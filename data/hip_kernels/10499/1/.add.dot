digraph "CFG for 'add' function" {
	label="CFG for 'add' function";

	Node0x4a52e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = add i32 %11, %4\l  %13 = icmp slt i32 %12, %0\l  %14 = icmp sgt i32 %0, 0\l  %15 = and i1 %13, %14\l  br i1 %15, label %16, label %95\l|{<s0>T|<s1>F}}"];
	Node0x4a52e60:s0 -> Node0x4a54e60;
	Node0x4a52e60:s1 -> Node0x4a54ef0;
	Node0x4a54e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%16:\l16:                                               \l  %17 = sext i32 %12 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %2, i64 %17\l  %19 = mul nsw i32 %12, %0\l  %20 = load float, float addrspace(1)* %18, align 4, !tbaa !7\l  %21 = and i32 %0, 7\l  %22 = icmp ult i32 %0, 8\l  br i1 %22, label %79, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4a54e60:s0 -> Node0x4a55590;
	Node0x4a54e60:s1 -> Node0x4a55620;
	Node0x4a55620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %0, -8\l  br label %25\l}"];
	Node0x4a55620 -> Node0x4a55820;
	Node0x4a55820 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%25:\l25:                                               \l  %26 = phi float [ %20, %23 ], [ %75, %25 ]\l  %27 = phi i32 [ 0, %23 ], [ %76, %25 ]\l  %28 = phi i32 [ 0, %23 ], [ %77, %25 ]\l  %29 = add nsw i32 %27, %19\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7\l  %33 = fadd contract float %26, %32\l  store float %33, float addrspace(1)* %18, align 4, !tbaa !7\l  %34 = or i32 %27, 1\l  %35 = add nsw i32 %34, %19\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !7\l  %39 = fadd contract float %33, %38\l  store float %39, float addrspace(1)* %18, align 4, !tbaa !7\l  %40 = or i32 %27, 2\l  %41 = add nsw i32 %40, %19\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %1, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = fadd contract float %39, %44\l  store float %45, float addrspace(1)* %18, align 4, !tbaa !7\l  %46 = or i32 %27, 3\l  %47 = add nsw i32 %46, %19\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7\l  %51 = fadd contract float %45, %50\l  store float %51, float addrspace(1)* %18, align 4, !tbaa !7\l  %52 = or i32 %27, 4\l  %53 = add nsw i32 %52, %19\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !7\l  %57 = fadd contract float %51, %56\l  store float %57, float addrspace(1)* %18, align 4, !tbaa !7\l  %58 = or i32 %27, 5\l  %59 = add nsw i32 %58, %19\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7\l  %63 = fadd contract float %57, %62\l  store float %63, float addrspace(1)* %18, align 4, !tbaa !7\l  %64 = or i32 %27, 6\l  %65 = add nsw i32 %64, %19\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = fadd contract float %63, %68\l  store float %69, float addrspace(1)* %18, align 4, !tbaa !7\l  %70 = or i32 %27, 7\l  %71 = add nsw i32 %70, %19\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = fadd contract float %69, %74\l  store float %75, float addrspace(1)* %18, align 4, !tbaa !7\l  %76 = add nuw nsw i32 %27, 8\l  %77 = add i32 %28, 8\l  %78 = icmp eq i32 %77, %24\l  br i1 %78, label %79, label %25, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4a55820:s0 -> Node0x4a55590;
	Node0x4a55820:s1 -> Node0x4a55820;
	Node0x4a55590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%79:\l79:                                               \l  %80 = phi float [ %20, %16 ], [ %75, %25 ]\l  %81 = phi i32 [ 0, %16 ], [ %76, %25 ]\l  %82 = icmp eq i32 %21, 0\l  br i1 %82, label %95, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4a55590:s0 -> Node0x4a54ef0;
	Node0x4a55590:s1 -> Node0x4a588c0;
	Node0x4a588c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%83:\l83:                                               \l  %84 = phi float [ %91, %83 ], [ %80, %79 ]\l  %85 = phi i32 [ %92, %83 ], [ %81, %79 ]\l  %86 = phi i32 [ %93, %83 ], [ 0, %79 ]\l  %87 = add nsw i32 %85, %19\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7\l  %91 = fadd contract float %84, %90\l  store float %91, float addrspace(1)* %18, align 4, !tbaa !7\l  %92 = add nuw nsw i32 %85, 1\l  %93 = add i32 %86, 1\l  %94 = icmp eq i32 %93, %21\l  br i1 %94, label %95, label %83, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4a588c0:s0 -> Node0x4a54ef0;
	Node0x4a588c0:s1 -> Node0x4a588c0;
	Node0x4a54ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%95:\l95:                                               \l  ret void\l}"];
}
