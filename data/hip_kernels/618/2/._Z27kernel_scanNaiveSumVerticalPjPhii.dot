digraph "CFG for '_Z27kernel_scanNaiveSumVerticalPjPhii' function" {
	label="CFG for '_Z27kernel_scanNaiveSumVerticalPjPhii' function";

	Node0x5c52eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%4:\l  %5 = alloca [1024 x i32], align 16, addrspace(5)\l  %6 = bitcast [1024 x i32] addrspace(5)* %5 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 4096, i8 addrspace(5)* %6) #4\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = icmp sgt i32 %2, 0\l  br i1 %8, label %9, label %32\l|{<s0>T|<s1>F}}"];
	Node0x5c52eb0:s0 -> Node0x5c52f40;
	Node0x5c52eb0:s1 -> Node0x5c54070;
	Node0x5c52f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%9:\l9:                                                \l  %10 = load \<4 x i32\>*, \<4 x i32\>* addrspace(1)* bitcast\l... (%struct.__hip_texture* addrspace(1)* getelementptr inbounds\l... (%struct.texture, %struct.texture addrspace(1)* @texInImage, i64 0, i32 0,\l... i32 11) to \<4 x i32\>* addrspace(1)*), align 8\l  %11 = mul nsw i32 %7, %2\l  %12 = addrspacecast \<4 x i32\>* %10 to \<4 x i32\> addrspace(4)*\l  %13 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %12, align 16, !tbaa !5\l  %14 = and i32 %2, 7\l  %15 = icmp ult i32 %2, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x5c52f40:s0 -> Node0x5c54d50;
	Node0x5c52f40:s1 -> Node0x5c54de0;
	Node0x5c54de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%16:\l16:                                               \l  %17 = and i32 %2, -8\l  br label %43\l}"];
	Node0x5c54de0 -> Node0x5c53fd0;
	Node0x5c54d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%18:\l18:                                               \l  %19 = phi i32 [ 0, %9 ], [ %93, %43 ]\l  %20 = icmp eq i32 %14, 0\l  br i1 %20, label %32, label %21\l|{<s0>T|<s1>F}}"];
	Node0x5c54d50:s0 -> Node0x5c54070;
	Node0x5c54d50:s1 -> Node0x5c552a0;
	Node0x5c552a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%21:\l21:                                               \l  %22 = phi i32 [ %29, %21 ], [ %19, %18 ]\l  %23 = phi i32 [ %30, %21 ], [ 0, %18 ]\l  %24 = add nsw i32 %22, %11\l  %25 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %24, i32 0, i32 0, i32 0)\l  %26 = bitcast float %25 to i32\l  %27 = and i32 %26, 255\l  %28 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %22\l  store i32 %27, i32 addrspace(5)* %28, align 4, !tbaa !8\l  %29 = add nuw nsw i32 %22, 1\l  %30 = add i32 %23, 1\l  %31 = icmp eq i32 %30, %14\l  br i1 %31, label %32, label %21, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5c552a0:s0 -> Node0x5c54070;
	Node0x5c552a0:s1 -> Node0x5c552a0;
	Node0x5c54070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%32:\l32:                                               \l  %33 = icmp sgt i32 %2, 1\l  br i1 %33, label %34, label %110\l|{<s0>T|<s1>F}}"];
	Node0x5c54070:s0 -> Node0x5c54fb0;
	Node0x5c54070:s1 -> Node0x5c56240;
	Node0x5c54fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%34:\l34:                                               \l  %35 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 0\l  %36 = load i32, i32 addrspace(5)* %35, align 16, !tbaa !8\l  %37 = add i32 %2, -1\l  %38 = add i32 %2, -2\l  %39 = and i32 %37, 7\l  %40 = icmp ult i32 %38, 7\l  br i1 %40, label %96, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5c54fb0:s0 -> Node0x5c56d00;
	Node0x5c54fb0:s1 -> Node0x5c56d50;
	Node0x5c56d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%41:\l41:                                               \l  %42 = and i32 %37, -8\l  br label %117\l}"];
	Node0x5c56d50 -> Node0x5c56f20;
	Node0x5c53fd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %16 ], [ %93, %43 ]\l  %45 = phi i32 [ 0, %16 ], [ %94, %43 ]\l  %46 = add nsw i32 %44, %11\l  %47 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %46, i32 0, i32 0, i32 0)\l  %48 = bitcast float %47 to i32\l  %49 = and i32 %48, 255\l  %50 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %44\l  store i32 %49, i32 addrspace(5)* %50, align 16, !tbaa !8\l  %51 = or i32 %44, 1\l  %52 = add nsw i32 %51, %11\l  %53 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %52, i32 0, i32 0, i32 0)\l  %54 = bitcast float %53 to i32\l  %55 = and i32 %54, 255\l  %56 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %51\l  store i32 %55, i32 addrspace(5)* %56, align 4, !tbaa !8\l  %57 = or i32 %44, 2\l  %58 = add nsw i32 %57, %11\l  %59 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %58, i32 0, i32 0, i32 0)\l  %60 = bitcast float %59 to i32\l  %61 = and i32 %60, 255\l  %62 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %57\l  store i32 %61, i32 addrspace(5)* %62, align 8, !tbaa !8\l  %63 = or i32 %44, 3\l  %64 = add nsw i32 %63, %11\l  %65 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %64, i32 0, i32 0, i32 0)\l  %66 = bitcast float %65 to i32\l  %67 = and i32 %66, 255\l  %68 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %63\l  store i32 %67, i32 addrspace(5)* %68, align 4, !tbaa !8\l  %69 = or i32 %44, 4\l  %70 = add nsw i32 %69, %11\l  %71 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %70, i32 0, i32 0, i32 0)\l  %72 = bitcast float %71 to i32\l  %73 = and i32 %72, 255\l  %74 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %69\l  store i32 %73, i32 addrspace(5)* %74, align 16, !tbaa !8\l  %75 = or i32 %44, 5\l  %76 = add nsw i32 %75, %11\l  %77 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %76, i32 0, i32 0, i32 0)\l  %78 = bitcast float %77 to i32\l  %79 = and i32 %78, 255\l  %80 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %75\l  store i32 %79, i32 addrspace(5)* %80, align 4, !tbaa !8\l  %81 = or i32 %44, 6\l  %82 = add nsw i32 %81, %11\l  %83 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %82, i32 0, i32 0, i32 0)\l  %84 = bitcast float %83 to i32\l  %85 = and i32 %84, 255\l  %86 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %81\l  store i32 %85, i32 addrspace(5)* %86, align 8, !tbaa !8\l  %87 = or i32 %44, 7\l  %88 = add nsw i32 %87, %11\l  %89 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(\<4 x i32\>\l... %13, i32 %88, i32 0, i32 0, i32 0)\l  %90 = bitcast float %89 to i32\l  %91 = and i32 %90, 255\l  %92 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %87\l  store i32 %91, i32 addrspace(5)* %92, align 4, !tbaa !8\l  %93 = add nuw nsw i32 %44, 8\l  %94 = add i32 %45, 8\l  %95 = icmp eq i32 %94, %17\l  br i1 %95, label %18, label %43, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5c53fd0:s0 -> Node0x5c54d50;
	Node0x5c53fd0:s1 -> Node0x5c53fd0;
	Node0x5c56d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%96:\l96:                                               \l  %97 = phi i32 [ %36, %34 ], [ %151, %117 ]\l  %98 = phi i32 [ 1, %34 ], [ %152, %117 ]\l  %99 = icmp eq i32 %39, 0\l  br i1 %99, label %110, label %100\l|{<s0>T|<s1>F}}"];
	Node0x5c56d00:s0 -> Node0x5c56240;
	Node0x5c56d00:s1 -> Node0x5c5a010;
	Node0x5c5a010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%100:\l100:                                              \l  %101 = phi i32 [ %106, %100 ], [ %97, %96 ]\l  %102 = phi i32 [ %107, %100 ], [ %98, %96 ]\l  %103 = phi i32 [ %108, %100 ], [ 0, %96 ]\l  %104 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %102\l  %105 = load i32, i32 addrspace(5)* %104, align 4, !tbaa !8\l  %106 = add i32 %105, %101\l  store i32 %106, i32 addrspace(5)* %104, align 4, !tbaa !8\l  %107 = add nuw nsw i32 %102, 1\l  %108 = add i32 %103, 1\l  %109 = icmp eq i32 %108, %39\l  br i1 %109, label %110, label %100, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5c5a010:s0 -> Node0x5c56240;
	Node0x5c5a010:s1 -> Node0x5c5a010;
	Node0x5c56240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%110:\l110:                                              \l  br i1 %8, label %111, label %169\l|{<s0>T|<s1>F}}"];
	Node0x5c56240:s0 -> Node0x5c5a9a0;
	Node0x5c56240:s1 -> Node0x5c5a9f0;
	Node0x5c5a9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%111:\l111:                                              \l  %112 = mul nsw i32 %7, %2\l  %113 = and i32 %2, 7\l  %114 = icmp ult i32 %2, 8\l  br i1 %114, label %155, label %115\l|{<s0>T|<s1>F}}"];
	Node0x5c5a9a0:s0 -> Node0x5c5ace0;
	Node0x5c5a9a0:s1 -> Node0x5c5ad30;
	Node0x5c5ad30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%115:\l115:                                              \l  %116 = and i32 %2, -8\l  br label %170\l}"];
	Node0x5c5ad30 -> Node0x5c5af00;
	Node0x5c56f20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%117:\l117:                                              \l  %118 = phi i32 [ %36, %41 ], [ %151, %117 ]\l  %119 = phi i32 [ 1, %41 ], [ %152, %117 ]\l  %120 = phi i32 [ 0, %41 ], [ %153, %117 ]\l  %121 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %119\l  %122 = load i32, i32 addrspace(5)* %121, align 4, !tbaa !8\l  %123 = add i32 %122, %118\l  store i32 %123, i32 addrspace(5)* %121, align 4, !tbaa !8\l  %124 = add nuw nsw i32 %119, 1\l  %125 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %124\l  %126 = load i32, i32 addrspace(5)* %125, align 4, !tbaa !8\l  %127 = add i32 %126, %123\l  store i32 %127, i32 addrspace(5)* %125, align 4, !tbaa !8\l  %128 = add nuw nsw i32 %119, 2\l  %129 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %128\l  %130 = load i32, i32 addrspace(5)* %129, align 4, !tbaa !8\l  %131 = add i32 %130, %127\l  store i32 %131, i32 addrspace(5)* %129, align 4, !tbaa !8\l  %132 = add nuw nsw i32 %119, 3\l  %133 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %132\l  %134 = load i32, i32 addrspace(5)* %133, align 4, !tbaa !8\l  %135 = add i32 %134, %131\l  store i32 %135, i32 addrspace(5)* %133, align 4, !tbaa !8\l  %136 = add nuw nsw i32 %119, 4\l  %137 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %136\l  %138 = load i32, i32 addrspace(5)* %137, align 4, !tbaa !8\l  %139 = add i32 %138, %135\l  store i32 %139, i32 addrspace(5)* %137, align 4, !tbaa !8\l  %140 = add nuw nsw i32 %119, 5\l  %141 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %140\l  %142 = load i32, i32 addrspace(5)* %141, align 4, !tbaa !8\l  %143 = add i32 %142, %139\l  store i32 %143, i32 addrspace(5)* %141, align 4, !tbaa !8\l  %144 = add nuw nsw i32 %119, 6\l  %145 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %144\l  %146 = load i32, i32 addrspace(5)* %145, align 4, !tbaa !8\l  %147 = add i32 %146, %143\l  store i32 %147, i32 addrspace(5)* %145, align 4, !tbaa !8\l  %148 = add nuw nsw i32 %119, 7\l  %149 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %148\l  %150 = load i32, i32 addrspace(5)* %149, align 4, !tbaa !8\l  %151 = add i32 %150, %147\l  store i32 %151, i32 addrspace(5)* %149, align 4, !tbaa !8\l  %152 = add nuw nsw i32 %119, 8\l  %153 = add i32 %120, 8\l  %154 = icmp eq i32 %153, %42\l  br i1 %154, label %96, label %117, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5c56f20:s0 -> Node0x5c56d00;
	Node0x5c56f20:s1 -> Node0x5c56f20;
	Node0x5c5ace0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%155:\l155:                                              \l  %156 = phi i32 [ 0, %111 ], [ %220, %170 ]\l  %157 = icmp eq i32 %113, 0\l  br i1 %157, label %169, label %158\l|{<s0>T|<s1>F}}"];
	Node0x5c5ace0:s0 -> Node0x5c5a9f0;
	Node0x5c5ace0:s1 -> Node0x5c5d060;
	Node0x5c5d060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%158:\l158:                                              \l  %159 = phi i32 [ %166, %158 ], [ %156, %155 ]\l  %160 = phi i32 [ %167, %158 ], [ 0, %155 ]\l  %161 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %159\l  %162 = load i32, i32 addrspace(5)* %161, align 4, !tbaa !8\l  %163 = add nsw i32 %159, %112\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %164\l  store i32 %162, i32 addrspace(1)* %165, align 4, !tbaa !8\l  %166 = add nuw nsw i32 %159, 1\l  %167 = add i32 %160, 1\l  %168 = icmp eq i32 %167, %113\l  br i1 %168, label %169, label %158, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5c5d060:s0 -> Node0x5c5a9f0;
	Node0x5c5d060:s1 -> Node0x5c5d060;
	Node0x5c5a9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%169:\l169:                                              \l  call void @llvm.lifetime.end.p5i8(i64 4096, i8 addrspace(5)* %6) #4\l  ret void\l}"];
	Node0x5c5af00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%170:\l170:                                              \l  %171 = phi i32 [ 0, %115 ], [ %220, %170 ]\l  %172 = phi i32 [ 0, %115 ], [ %221, %170 ]\l  %173 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %171\l  %174 = load i32, i32 addrspace(5)* %173, align 16, !tbaa !8\l  %175 = add nsw i32 %171, %112\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %176\l  store i32 %174, i32 addrspace(1)* %177, align 4, !tbaa !8\l  %178 = or i32 %171, 1\l  %179 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %178\l  %180 = load i32, i32 addrspace(5)* %179, align 4, !tbaa !8\l  %181 = add nsw i32 %178, %112\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %182\l  store i32 %180, i32 addrspace(1)* %183, align 4, !tbaa !8\l  %184 = or i32 %171, 2\l  %185 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %184\l  %186 = load i32, i32 addrspace(5)* %185, align 8, !tbaa !8\l  %187 = add nsw i32 %184, %112\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %188\l  store i32 %186, i32 addrspace(1)* %189, align 4, !tbaa !8\l  %190 = or i32 %171, 3\l  %191 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %190\l  %192 = load i32, i32 addrspace(5)* %191, align 4, !tbaa !8\l  %193 = add nsw i32 %190, %112\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %194\l  store i32 %192, i32 addrspace(1)* %195, align 4, !tbaa !8\l  %196 = or i32 %171, 4\l  %197 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %196\l  %198 = load i32, i32 addrspace(5)* %197, align 16, !tbaa !8\l  %199 = add nsw i32 %196, %112\l  %200 = sext i32 %199 to i64\l  %201 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %200\l  store i32 %198, i32 addrspace(1)* %201, align 4, !tbaa !8\l  %202 = or i32 %171, 5\l  %203 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %202\l  %204 = load i32, i32 addrspace(5)* %203, align 4, !tbaa !8\l  %205 = add nsw i32 %202, %112\l  %206 = sext i32 %205 to i64\l  %207 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %206\l  store i32 %204, i32 addrspace(1)* %207, align 4, !tbaa !8\l  %208 = or i32 %171, 6\l  %209 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %208\l  %210 = load i32, i32 addrspace(5)* %209, align 8, !tbaa !8\l  %211 = add nsw i32 %208, %112\l  %212 = sext i32 %211 to i64\l  %213 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %212\l  store i32 %210, i32 addrspace(1)* %213, align 4, !tbaa !8\l  %214 = or i32 %171, 7\l  %215 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(5)* %5,\l... i32 0, i32 %214\l  %216 = load i32, i32 addrspace(5)* %215, align 4, !tbaa !8\l  %217 = add nsw i32 %214, %112\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %218\l  store i32 %216, i32 addrspace(1)* %219, align 4, !tbaa !8\l  %220 = add nuw nsw i32 %171, 8\l  %221 = add i32 %172, 8\l  %222 = icmp eq i32 %221, %116\l  br i1 %222, label %155, label %170, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5c5af00:s0 -> Node0x5c5ace0;
	Node0x5c5af00:s1 -> Node0x5c5af00;
}
