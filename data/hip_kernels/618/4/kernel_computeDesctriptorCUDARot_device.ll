; ModuleID = '../data/hip_kernels/618/4/main.cu'
source_filename = "../data/hip_kernels/618/4/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.texture = type { %struct.textureReference }
%struct.textureReference = type { i32, i32, i32, [3 x i32], %struct.hipChannelFormatDesc, i32, i32, i32, float, float, float, %struct.__hip_texture*, i32, i32, [7 x i32], i32 }
%struct.hipChannelFormatDesc = type { i32, i32, i32, i32, i32 }
%struct.__hip_texture = type opaque
%struct.texture.0 = type { %struct.textureReference }

@texInImage = protected local_unnamed_addr addrspace(1) externally_initialized global %struct.texture undef, align 8
@texIntegralImage = protected addrspace(1) externally_initialized global %struct.texture.0 undef, align 8
@keypointsCount = protected local_unnamed_addr addrspace(1) externally_initialized global i32 0, align 4
@llvm.compiler.used = appending addrspace(1) global [1 x i8*] [i8* addrspacecast (i8 addrspace(1)* bitcast (%struct.texture.0 addrspace(1)* @texIntegralImage to i8 addrspace(1)*) to i8*)], section "llvm.metadata"

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p5i8(i64 immarg, i8 addrspace(5)* nocapture) #0

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p5i8(i64 immarg, i8 addrspace(5)* nocapture) #0

; Function Attrs: mustprogress norecurse nounwind
define protected amdgpu_kernel void @_Z32kernel_computeDesctriptorCUDARotPbPcPiS1_S1_iPjiif(i8 addrspace(1)* nocapture writeonly %0, i8 addrspace(1)* nocapture writeonly %1, i32 addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, i32 addrspace(1)* nocapture readonly %4, i32 %5, i32 addrspace(1)* nocapture readnone %6, i32 %7, i32 %8, float %9) local_unnamed_addr #1 {
  %11 = alloca [64 x float], align 16, addrspace(5)
  %12 = alloca [64 x float], align 16, addrspace(5)
  %13 = alloca [64 x float], align 16, addrspace(5)
  %14 = alloca [64 x float], align 16, addrspace(5)
  %15 = alloca [256 x i8], align 16, addrspace(5)
  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %18 = mul nsw i32 %17, %8
  %19 = add nsw i32 %18, %16
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %20
  store i8 0, i8 addrspace(1)* %21, align 1, !tbaa !5
  %22 = icmp slt i32 %19, %5
  br i1 %22, label %23, label %1561

23:                                               ; preds = %10
  %24 = bitcast [64 x float] addrspace(5)* %11 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 256, i8 addrspace(5)* %24) #5
  %25 = bitcast [64 x float] addrspace(5)* %12 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 256, i8 addrspace(5)* %25) #5
  %26 = bitcast [64 x float] addrspace(5)* %13 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 256, i8 addrspace(5)* %26) #5
  %27 = bitcast [64 x float] addrspace(5)* %14 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 256, i8 addrspace(5)* %27) #5
  %28 = fmul contract float %9, 8.000000e+00
  br label %42

29:                                               ; preds = %250
  %30 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %20
  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !9, !amdgpu.noclobber !11
  %32 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %20
  %33 = load i32, i32 addrspace(1)* %32, align 4, !tbaa !9, !amdgpu.noclobber !11
  %34 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %20
  %35 = load i32, i32 addrspace(1)* %34, align 4, !tbaa !9, !amdgpu.noclobber !11
  %36 = sitofp i32 %31 to float
  %37 = sitofp i32 %33 to float
  %38 = sitofp i32 %7 to float
  %39 = mul nsw i32 %8, %7
  %40 = load <4 x i32>*, <4 x i32>* addrspace(1)* bitcast (%struct.__hip_texture* addrspace(1)* getelementptr inbounds (%struct.texture.0, %struct.texture.0 addrspace(1)* @texIntegralImage, i64 0, i32 0, i32 11) to <4 x i32>* addrspace(1)*), align 8
  %41 = addrspacecast <4 x i32>* %40 to <4 x i32> addrspace(4)*
  br label %275

42:                                               ; preds = %23, %250
  %43 = phi i32 [ 0, %23 ], [ %271, %250 ]
  %44 = and i32 %43, 3
  %45 = add nuw nsw i32 %44, 2
  %46 = sitofp i32 %45 to float
  %47 = fsub float 0.000000e+00, %46
  %48 = fadd float %47, %46
  %49 = fmul float %46, 0x3FE62E4300000000
  %50 = fneg float %49
  %51 = tail call float @llvm.fma.f32(float %46, float 0x3FE62E4300000000, float %50)
  %52 = fmul float %48, 0x3FE62E4300000000
  %53 = tail call float @llvm.fma.f32(float %46, float 0xBE205C6100000000, float %52)
  %54 = fadd float %51, %53
  %55 = fadd float %49, %54
  %56 = fsub float %55, %49
  %57 = fsub float %54, %56
  %58 = tail call float @llvm.fabs.f32(float %49) #6
  %59 = fcmp oeq float %58, 0x7FF0000000000000
  %60 = select i1 %59, float %49, float %55
  %61 = tail call float @llvm.fabs.f32(float %60) #6
  %62 = fcmp oeq float %61, 0x7FF0000000000000
  %63 = select i1 %62, float 0.000000e+00, float %57
  %64 = fcmp oeq float %60, 0x40562E4300000000
  %65 = select i1 %64, float 0x3EE0000000000000, float 0.000000e+00
  %66 = fsub float %60, %65
  %67 = fadd float %65, %63
  %68 = fmul float %66, 0x3FF7154760000000
  %69 = tail call float @llvm.rint.f32(float %68)
  %70 = fcmp ogt float %66, 0x40562E4300000000
  %71 = fcmp olt float %66, 0xC059D1DA00000000
  %72 = fneg float %68
  %73 = tail call float @llvm.fma.f32(float %66, float 0x3FF7154760000000, float %72)
  %74 = tail call float @llvm.fma.f32(float %66, float 0x3E54AE0BE0000000, float %73)
  %75 = fsub float %68, %69
  %76 = fadd float %74, %75
  %77 = tail call float @llvm.exp2.f32(float %76)
  %78 = fptosi float %69 to i32
  %79 = tail call float @llvm.amdgcn.ldexp.f32(float %77, i32 %78)
  %80 = select i1 %71, float 0.000000e+00, float %79
  %81 = select i1 %70, float 0x7FF0000000000000, float %80
  %82 = tail call float @llvm.fma.f32(float %81, float %67, float %81)
  %83 = tail call float @llvm.fabs.f32(float %81) #6
  %84 = fcmp oeq float %83, 0x7FF0000000000000
  %85 = select i1 %84, float %81, float %82
  %86 = tail call float @llvm.fabs.f32(float %85)
  %87 = fmul contract float %86, %9
  %88 = sitofp i32 %43 to float
  %89 = fmul contract float %88, 2.500000e-01
  %90 = fmul contract float %89, 0x401921FB60000000
  %91 = fmul contract float %90, 6.250000e-02
  %92 = tail call float @llvm.fabs.f32(float %91)
  %93 = fcmp olt float %92, 1.310720e+05
  br i1 %93, label %94, label %123

94:                                               ; preds = %42
  %95 = fmul float %92, 0x3FE45F3060000000
  %96 = tail call float @llvm.rint.f32(float %95)
  %97 = tail call float @llvm.fma.f32(float %96, float 0xBFF921FB40000000, float %92)
  %98 = tail call float @llvm.fma.f32(float %96, float 0xBE74442D00000000, float %97)
  %99 = tail call float @llvm.fma.f32(float %96, float 0xBCF8469880000000, float %98)
  %100 = fptosi float %96 to i32
  %101 = fmul float %99, %99
  %102 = tail call float @llvm.fmuladd.f32(float %101, float 0xBF29833040000000, float 0x3F81103880000000)
  %103 = tail call float @llvm.fmuladd.f32(float %101, float %102, float 0xBFC55553A0000000)
  %104 = fmul float %101, %103
  %105 = tail call float @llvm.fmuladd.f32(float %99, float %104, float %99)
  %106 = tail call float @llvm.fmuladd.f32(float %101, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %107 = tail call float @llvm.fmuladd.f32(float %101, float %106, float 0x3FA5557EE0000000)
  %108 = tail call float @llvm.fmuladd.f32(float %101, float %107, float 0xBFE0000080000000)
  %109 = tail call float @llvm.fmuladd.f32(float %101, float %108, float 1.000000e+00)
  %110 = fneg float %105
  %111 = and i32 %100, 1
  %112 = icmp eq i32 %111, 0
  %113 = select i1 %112, float %109, float %110
  %114 = bitcast float %113 to i32
  %115 = shl i32 %100, 30
  %116 = and i32 %115, -2147483648
  %117 = xor i32 %116, %114
  %118 = bitcast i32 %117 to float
  %119 = tail call i1 @llvm.amdgcn.class.f32(float %92, i32 504)
  %120 = select i1 %119, float %118, float 0x7FF8000000000000
  %121 = fmul contract float %120, %87
  %122 = bitcast float %92 to i32
  br label %250

123:                                              ; preds = %42
  %124 = bitcast float %92 to i32
  %125 = lshr i32 %124, 23
  %126 = and i32 %124, 8388607
  %127 = or i32 %126, 8388608
  %128 = zext i32 %127 to i64
  %129 = mul nuw nsw i64 %128, 4266746795
  %130 = trunc i64 %129 to i32
  %131 = lshr i64 %129, 32
  %132 = mul nuw nsw i64 %128, 1011060801
  %133 = add nuw nsw i64 %131, %132
  %134 = trunc i64 %133 to i32
  %135 = lshr i64 %133, 32
  %136 = mul nuw nsw i64 %128, 3680671129
  %137 = add nuw nsw i64 %135, %136
  %138 = trunc i64 %137 to i32
  %139 = lshr i64 %137, 32
  %140 = mul nuw nsw i64 %128, 4113882560
  %141 = add nuw nsw i64 %139, %140
  %142 = trunc i64 %141 to i32
  %143 = lshr i64 %141, 32
  %144 = mul nuw nsw i64 %128, 4230436817
  %145 = add nuw nsw i64 %143, %144
  %146 = trunc i64 %145 to i32
  %147 = lshr i64 %145, 32
  %148 = mul nuw nsw i64 %128, 1313084713
  %149 = add nuw nsw i64 %147, %148
  %150 = trunc i64 %149 to i32
  %151 = lshr i64 %149, 32
  %152 = mul nuw nsw i64 %128, 2734261102
  %153 = add nuw nsw i64 %151, %152
  %154 = trunc i64 %153 to i32
  %155 = lshr i64 %153, 32
  %156 = trunc i64 %155 to i32
  %157 = add nsw i32 %125, -120
  %158 = icmp ugt i32 %157, 63
  %159 = select i1 %158, i32 %150, i32 %156
  %160 = select i1 %158, i32 %146, i32 %154
  %161 = select i1 %158, i32 %142, i32 %150
  %162 = select i1 %158, i32 %138, i32 %146
  %163 = select i1 %158, i32 %134, i32 %142
  %164 = select i1 %158, i32 %130, i32 %138
  %165 = select i1 %158, i32 -64, i32 0
  %166 = add nsw i32 %165, %157
  %167 = icmp ugt i32 %166, 31
  %168 = select i1 %167, i32 %160, i32 %159
  %169 = select i1 %167, i32 %161, i32 %160
  %170 = select i1 %167, i32 %162, i32 %161
  %171 = select i1 %167, i32 %163, i32 %162
  %172 = select i1 %167, i32 %164, i32 %163
  %173 = select i1 %167, i32 -32, i32 0
  %174 = add nsw i32 %173, %166
  %175 = icmp ugt i32 %174, 31
  %176 = select i1 %175, i32 %169, i32 %168
  %177 = select i1 %175, i32 %170, i32 %169
  %178 = select i1 %175, i32 %171, i32 %170
  %179 = select i1 %175, i32 %172, i32 %171
  %180 = select i1 %175, i32 -32, i32 0
  %181 = add nsw i32 %180, %174
  %182 = icmp eq i32 %181, 0
  %183 = sub nsw i32 32, %181
  %184 = tail call i32 @llvm.fshr.i32(i32 %176, i32 %177, i32 %183)
  %185 = tail call i32 @llvm.fshr.i32(i32 %177, i32 %178, i32 %183)
  %186 = tail call i32 @llvm.fshr.i32(i32 %178, i32 %179, i32 %183)
  %187 = select i1 %182, i32 %176, i32 %184
  %188 = select i1 %182, i32 %177, i32 %185
  %189 = select i1 %182, i32 %178, i32 %186
  %190 = lshr i32 %187, 29
  %191 = tail call i32 @llvm.fshl.i32(i32 %187, i32 %188, i32 2)
  %192 = tail call i32 @llvm.fshl.i32(i32 %188, i32 %189, i32 2)
  %193 = tail call i32 @llvm.fshl.i32(i32 %189, i32 %179, i32 2)
  %194 = and i32 %190, 1
  %195 = sub nsw i32 0, %194
  %196 = shl i32 %190, 31
  %197 = xor i32 %191, %195
  %198 = xor i32 %192, %195
  %199 = xor i32 %193, %195
  %200 = tail call i32 @llvm.ctlz.i32(i32 %197, i1 false), !range !12
  %201 = sub nsw i32 31, %200
  %202 = tail call i32 @llvm.fshr.i32(i32 %197, i32 %198, i32 %201)
  %203 = tail call i32 @llvm.fshr.i32(i32 %198, i32 %199, i32 %201)
  %204 = shl nuw nsw i32 %200, 23
  %205 = sub nuw nsw i32 1056964608, %204
  %206 = lshr i32 %202, 9
  %207 = or i32 %206, %205
  %208 = or i32 %207, %196
  %209 = bitcast i32 %208 to float
  %210 = tail call i32 @llvm.fshl.i32(i32 %202, i32 %203, i32 23)
  %211 = tail call i32 @llvm.ctlz.i32(i32 %210, i1 false), !range !12
  %212 = fmul float %209, 0x3FF921FB40000000
  %213 = add nuw nsw i32 %211, %200
  %214 = shl nuw nsw i32 %213, 23
  %215 = sub nuw nsw i32 855638016, %214
  %216 = sub nsw i32 31, %211
  %217 = tail call i32 @llvm.fshr.i32(i32 %210, i32 %203, i32 %216)
  %218 = lshr i32 %217, 9
  %219 = or i32 %215, %218
  %220 = or i32 %219, %196
  %221 = bitcast i32 %220 to float
  %222 = fneg float %212
  %223 = tail call float @llvm.fma.f32(float %209, float 0x3FF921FB40000000, float %222)
  %224 = tail call float @llvm.fma.f32(float %209, float 0x3E74442D00000000, float %223)
  %225 = tail call float @llvm.fma.f32(float %221, float 0x3FF921FB40000000, float %224)
  %226 = fadd float %212, %225
  %227 = lshr i32 %187, 30
  %228 = add nuw nsw i32 %194, %227
  %229 = fmul float %226, %226
  %230 = tail call float @llvm.fmuladd.f32(float %229, float 0xBF29833040000000, float 0x3F81103880000000)
  %231 = tail call float @llvm.fmuladd.f32(float %229, float %230, float 0xBFC55553A0000000)
  %232 = fmul float %229, %231
  %233 = tail call float @llvm.fmuladd.f32(float %226, float %232, float %226)
  %234 = tail call float @llvm.fmuladd.f32(float %229, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %235 = tail call float @llvm.fmuladd.f32(float %229, float %234, float 0x3FA5557EE0000000)
  %236 = tail call float @llvm.fmuladd.f32(float %229, float %235, float 0xBFE0000080000000)
  %237 = tail call float @llvm.fmuladd.f32(float %229, float %236, float 1.000000e+00)
  %238 = fneg float %233
  %239 = and i32 %228, 1
  %240 = icmp eq i32 %239, 0
  %241 = select i1 %240, float %237, float %238
  %242 = bitcast float %241 to i32
  %243 = shl i32 %228, 30
  %244 = and i32 %243, -2147483648
  %245 = xor i32 %244, %242
  %246 = bitcast i32 %245 to float
  %247 = tail call i1 @llvm.amdgcn.class.f32(float %92, i32 504)
  %248 = select i1 %247, float %246, float 0x7FF8000000000000
  %249 = fmul contract float %87, %248
  br label %250

250:                                              ; preds = %94, %123
  %251 = phi i32 [ %116, %94 ], [ %244, %123 ]
  %252 = phi i32 [ %111, %94 ], [ %239, %123 ]
  %253 = phi float [ %109, %94 ], [ %237, %123 ]
  %254 = phi float [ %105, %94 ], [ %233, %123 ]
  %255 = phi float [ %121, %94 ], [ %249, %123 ]
  %256 = phi i1 [ %119, %94 ], [ %247, %123 ]
  %257 = phi i32 [ %122, %94 ], [ %124, %123 ]
  %258 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %12, i32 0, i32 %43
  store float %255, float addrspace(5)* %258, align 4
  %259 = icmp eq i32 %252, 0
  %260 = select i1 %259, float %254, float %253
  %261 = bitcast float %260 to i32
  %262 = bitcast float %91 to i32
  %263 = xor i32 %257, %262
  %264 = xor i32 %263, %251
  %265 = xor i32 %264, %261
  %266 = bitcast i32 %265 to float
  %267 = select i1 %256, float %266, float 0x7FF8000000000000
  %268 = fmul contract float %87, %267
  %269 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %13, i32 0, i32 %43
  store float %268, float addrspace(5)* %269, align 4, !tbaa !13
  %270 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %14, i32 0, i32 %43
  store float %28, float addrspace(5)* %270, align 4, !tbaa !13
  %271 = add nuw nsw i32 %43, 1
  %272 = icmp eq i32 %271, 64
  br i1 %272, label %29, label %42, !llvm.loop !15

273:                                              ; preds = %392
  %274 = shl nsw i32 %35, 2
  br i1 %376, label %395, label %1560

275:                                              ; preds = %392, %29
  %276 = phi i1 [ true, %29 ], [ %376, %392 ]
  %277 = phi i32 [ 0, %29 ], [ %393, %392 ]
  %278 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %12, i32 0, i32 %277
  %279 = load float, float addrspace(5)* %278, align 8, !tbaa !13
  %280 = tail call float @llvm.floor.f32(float %279)
  %281 = fadd contract float %280, %36
  %282 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %14, i32 0, i32 %277
  %283 = load float, float addrspace(5)* %282, align 8, !tbaa !13
  %284 = tail call float @llvm.floor.f32(float %283)
  %285 = fadd contract float %281, %284
  %286 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %13, i32 0, i32 %277
  %287 = load float, float addrspace(5)* %286, align 8, !tbaa !13
  %288 = tail call float @llvm.floor.f32(float %287)
  %289 = fadd contract float %288, %37
  %290 = fadd contract float %284, %289
  %291 = fmul contract float %290, %38
  %292 = fadd contract float %285, %291
  %293 = fptosi float %292 to i32
  %294 = icmp sgt i32 %293, -1
  %295 = icmp sgt i32 %39, %293
  %296 = and i1 %295, %294
  %297 = fsub contract float %281, %284
  %298 = fsub contract float %289, %284
  %299 = fmul contract float %298, %38
  %300 = fadd contract float %297, %299
  %301 = fptosi float %300 to i32
  %302 = icmp sgt i32 %301, -1
  %303 = icmp sgt i32 %39, %301
  %304 = and i1 %303, %302
  %305 = fadd contract float %285, %299
  %306 = fptosi float %305 to i32
  %307 = icmp sgt i32 %306, -1
  %308 = icmp sgt i32 %39, %306
  %309 = and i1 %308, %307
  %310 = fadd contract float %297, %291
  %311 = fptosi float %310 to i32
  %312 = icmp sgt i32 %311, -1
  %313 = icmp sgt i32 %39, %311
  %314 = and i1 %313, %312
  %315 = select i1 %314, i1 %309, i1 false
  %316 = select i1 %315, i1 %304, i1 false
  %317 = select i1 %316, i1 %296, i1 false
  %318 = select i1 %317, i1 %276, i1 false
  br i1 %318, label %319, label %334

319:                                              ; preds = %275
  %320 = load <4 x i32>, <4 x i32> addrspace(4)* %41, align 16, !tbaa !17
  %321 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %320, i32 %293, i32 0, i32 0, i32 0)
  %322 = bitcast float %321 to i32
  %323 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %320, i32 %301, i32 0, i32 0, i32 0)
  %324 = bitcast float %323 to i32
  %325 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %320, i32 %306, i32 0, i32 0, i32 0)
  %326 = bitcast float %325 to i32
  %327 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %320, i32 %311, i32 0, i32 0, i32 0)
  %328 = bitcast float %327 to i32
  %329 = add i32 %324, %322
  %330 = add i32 %326, %328
  %331 = sub i32 %329, %330
  %332 = uitofp i32 %331 to float
  %333 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %277
  store float %332, float addrspace(5)* %333, align 8, !tbaa !13
  br label %334

334:                                              ; preds = %275, %319
  %335 = or i32 %277, 1
  %336 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %12, i32 0, i32 %335
  %337 = load float, float addrspace(5)* %336, align 4, !tbaa !13
  %338 = tail call float @llvm.floor.f32(float %337)
  %339 = fadd contract float %338, %36
  %340 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %14, i32 0, i32 %335
  %341 = load float, float addrspace(5)* %340, align 4, !tbaa !13
  %342 = tail call float @llvm.floor.f32(float %341)
  %343 = fadd contract float %339, %342
  %344 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %13, i32 0, i32 %335
  %345 = load float, float addrspace(5)* %344, align 4, !tbaa !13
  %346 = tail call float @llvm.floor.f32(float %345)
  %347 = fadd contract float %346, %37
  %348 = fadd contract float %342, %347
  %349 = fmul contract float %348, %38
  %350 = fadd contract float %343, %349
  %351 = fptosi float %350 to i32
  %352 = icmp sgt i32 %351, -1
  %353 = icmp sgt i32 %39, %351
  %354 = and i1 %353, %352
  %355 = fsub contract float %339, %342
  %356 = fsub contract float %347, %342
  %357 = fmul contract float %356, %38
  %358 = fadd contract float %355, %357
  %359 = fptosi float %358 to i32
  %360 = icmp sgt i32 %359, -1
  %361 = icmp sgt i32 %39, %359
  %362 = and i1 %361, %360
  %363 = fadd contract float %343, %357
  %364 = fptosi float %363 to i32
  %365 = icmp sgt i32 %364, -1
  %366 = icmp sgt i32 %39, %364
  %367 = and i1 %366, %365
  %368 = fadd contract float %355, %349
  %369 = fptosi float %368 to i32
  %370 = icmp sgt i32 %369, -1
  %371 = icmp sgt i32 %39, %369
  %372 = and i1 %371, %370
  %373 = select i1 %372, i1 %367, i1 false
  %374 = select i1 %373, i1 %362, i1 false
  %375 = select i1 %374, i1 %354, i1 false
  %376 = select i1 %375, i1 %318, i1 false
  br i1 %376, label %377, label %392

377:                                              ; preds = %334
  %378 = load <4 x i32>, <4 x i32> addrspace(4)* %41, align 16, !tbaa !17
  %379 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %378, i32 %351, i32 0, i32 0, i32 0)
  %380 = bitcast float %379 to i32
  %381 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %378, i32 %359, i32 0, i32 0, i32 0)
  %382 = bitcast float %381 to i32
  %383 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %378, i32 %364, i32 0, i32 0, i32 0)
  %384 = bitcast float %383 to i32
  %385 = tail call float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32> %378, i32 %369, i32 0, i32 0, i32 0)
  %386 = bitcast float %385 to i32
  %387 = add i32 %382, %380
  %388 = add i32 %384, %386
  %389 = sub i32 %387, %388
  %390 = uitofp i32 %389 to float
  %391 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %335
  store float %390, float addrspace(5)* %391, align 4, !tbaa !13
  br label %392

392:                                              ; preds = %377, %334
  %393 = add nuw nsw i32 %277, 2
  %394 = icmp eq i32 %393, 64
  br i1 %394, label %273, label %275, !llvm.loop !20

395:                                              ; preds = %273
  store i8 1, i8 addrspace(1)* %21, align 1, !tbaa !5
  %396 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 0
  call void @llvm.lifetime.start.p5i8(i64 256, i8 addrspace(5)* %396) #5
  br label %1453

397:                                              ; preds = %1453
  %398 = shl nsw i32 %19, 5
  %399 = load i8, i8 addrspace(5)* %396, align 16, !tbaa !5, !range !21
  %400 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 1
  %401 = load i8, i8 addrspace(5)* %400, align 1, !tbaa !5, !range !21
  %402 = shl nuw nsw i8 %401, 1
  %403 = or i8 %399, %402
  %404 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 2
  %405 = load i8, i8 addrspace(5)* %404, align 2, !tbaa !5, !range !21
  %406 = shl nuw nsw i8 %405, 2
  %407 = or i8 %403, %406
  %408 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 3
  %409 = load i8, i8 addrspace(5)* %408, align 1, !tbaa !5, !range !21
  %410 = shl nuw nsw i8 %409, 3
  %411 = or i8 %407, %410
  %412 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 4
  %413 = load i8, i8 addrspace(5)* %412, align 4, !tbaa !5, !range !21
  %414 = shl nuw nsw i8 %413, 4
  %415 = or i8 %411, %414
  %416 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 5
  %417 = load i8, i8 addrspace(5)* %416, align 1, !tbaa !5, !range !21
  %418 = shl nuw nsw i8 %417, 5
  %419 = or i8 %415, %418
  %420 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 6
  %421 = load i8, i8 addrspace(5)* %420, align 2, !tbaa !5, !range !21
  %422 = shl nuw nsw i8 %421, 6
  %423 = add nuw nsw i8 %419, %422
  %424 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 7
  %425 = load i8, i8 addrspace(5)* %424, align 1, !tbaa !5, !range !21
  %426 = shl nuw i8 %425, 7
  %427 = add nuw i8 %423, %426
  %428 = sext i32 %398 to i64
  %429 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %428
  store i8 %427, i8 addrspace(1)* %429, align 1, !tbaa !22
  %430 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 8
  %431 = load i8, i8 addrspace(5)* %430, align 8, !tbaa !5, !range !21
  %432 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 9
  %433 = load i8, i8 addrspace(5)* %432, align 1, !tbaa !5, !range !21
  %434 = shl nuw nsw i8 %433, 1
  %435 = or i8 %431, %434
  %436 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 10
  %437 = load i8, i8 addrspace(5)* %436, align 2, !tbaa !5, !range !21
  %438 = shl nuw nsw i8 %437, 2
  %439 = or i8 %435, %438
  %440 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 11
  %441 = load i8, i8 addrspace(5)* %440, align 1, !tbaa !5, !range !21
  %442 = shl nuw nsw i8 %441, 3
  %443 = or i8 %439, %442
  %444 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 12
  %445 = load i8, i8 addrspace(5)* %444, align 4, !tbaa !5, !range !21
  %446 = shl nuw nsw i8 %445, 4
  %447 = or i8 %443, %446
  %448 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 13
  %449 = load i8, i8 addrspace(5)* %448, align 1, !tbaa !5, !range !21
  %450 = shl nuw nsw i8 %449, 5
  %451 = or i8 %447, %450
  %452 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 14
  %453 = load i8, i8 addrspace(5)* %452, align 2, !tbaa !5, !range !21
  %454 = shl nuw nsw i8 %453, 6
  %455 = add nuw nsw i8 %451, %454
  %456 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 15
  %457 = load i8, i8 addrspace(5)* %456, align 1, !tbaa !5, !range !21
  %458 = shl nuw i8 %457, 7
  %459 = add nuw i8 %455, %458
  %460 = add nuw nsw i32 %398, 1
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %461
  store i8 %459, i8 addrspace(1)* %462, align 1, !tbaa !22
  %463 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 16
  %464 = load i8, i8 addrspace(5)* %463, align 16, !tbaa !5, !range !21
  %465 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 17
  %466 = load i8, i8 addrspace(5)* %465, align 1, !tbaa !5, !range !21
  %467 = shl nuw nsw i8 %466, 1
  %468 = or i8 %464, %467
  %469 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 18
  %470 = load i8, i8 addrspace(5)* %469, align 2, !tbaa !5, !range !21
  %471 = shl nuw nsw i8 %470, 2
  %472 = or i8 %468, %471
  %473 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 19
  %474 = load i8, i8 addrspace(5)* %473, align 1, !tbaa !5, !range !21
  %475 = shl nuw nsw i8 %474, 3
  %476 = or i8 %472, %475
  %477 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 20
  %478 = load i8, i8 addrspace(5)* %477, align 4, !tbaa !5, !range !21
  %479 = shl nuw nsw i8 %478, 4
  %480 = or i8 %476, %479
  %481 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 21
  %482 = load i8, i8 addrspace(5)* %481, align 1, !tbaa !5, !range !21
  %483 = shl nuw nsw i8 %482, 5
  %484 = or i8 %480, %483
  %485 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 22
  %486 = load i8, i8 addrspace(5)* %485, align 2, !tbaa !5, !range !21
  %487 = shl nuw nsw i8 %486, 6
  %488 = add nuw nsw i8 %484, %487
  %489 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 23
  %490 = load i8, i8 addrspace(5)* %489, align 1, !tbaa !5, !range !21
  %491 = shl nuw i8 %490, 7
  %492 = add nuw i8 %488, %491
  %493 = add nuw nsw i32 %398, 2
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %494
  store i8 %492, i8 addrspace(1)* %495, align 1, !tbaa !22
  %496 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 24
  %497 = load i8, i8 addrspace(5)* %496, align 8, !tbaa !5, !range !21
  %498 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 25
  %499 = load i8, i8 addrspace(5)* %498, align 1, !tbaa !5, !range !21
  %500 = shl nuw nsw i8 %499, 1
  %501 = or i8 %497, %500
  %502 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 26
  %503 = load i8, i8 addrspace(5)* %502, align 2, !tbaa !5, !range !21
  %504 = shl nuw nsw i8 %503, 2
  %505 = or i8 %501, %504
  %506 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 27
  %507 = load i8, i8 addrspace(5)* %506, align 1, !tbaa !5, !range !21
  %508 = shl nuw nsw i8 %507, 3
  %509 = or i8 %505, %508
  %510 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 28
  %511 = load i8, i8 addrspace(5)* %510, align 4, !tbaa !5, !range !21
  %512 = shl nuw nsw i8 %511, 4
  %513 = or i8 %509, %512
  %514 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 29
  %515 = load i8, i8 addrspace(5)* %514, align 1, !tbaa !5, !range !21
  %516 = shl nuw nsw i8 %515, 5
  %517 = or i8 %513, %516
  %518 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 30
  %519 = load i8, i8 addrspace(5)* %518, align 2, !tbaa !5, !range !21
  %520 = shl nuw nsw i8 %519, 6
  %521 = add nuw nsw i8 %517, %520
  %522 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 31
  %523 = load i8, i8 addrspace(5)* %522, align 1, !tbaa !5, !range !21
  %524 = shl nuw i8 %523, 7
  %525 = add nuw i8 %521, %524
  %526 = add nuw nsw i32 %398, 3
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %527
  store i8 %525, i8 addrspace(1)* %528, align 1, !tbaa !22
  %529 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 32
  %530 = load i8, i8 addrspace(5)* %529, align 16, !tbaa !5, !range !21
  %531 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 33
  %532 = load i8, i8 addrspace(5)* %531, align 1, !tbaa !5, !range !21
  %533 = shl nuw nsw i8 %532, 1
  %534 = or i8 %530, %533
  %535 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 34
  %536 = load i8, i8 addrspace(5)* %535, align 2, !tbaa !5, !range !21
  %537 = shl nuw nsw i8 %536, 2
  %538 = or i8 %534, %537
  %539 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 35
  %540 = load i8, i8 addrspace(5)* %539, align 1, !tbaa !5, !range !21
  %541 = shl nuw nsw i8 %540, 3
  %542 = or i8 %538, %541
  %543 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 36
  %544 = load i8, i8 addrspace(5)* %543, align 4, !tbaa !5, !range !21
  %545 = shl nuw nsw i8 %544, 4
  %546 = or i8 %542, %545
  %547 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 37
  %548 = load i8, i8 addrspace(5)* %547, align 1, !tbaa !5, !range !21
  %549 = shl nuw nsw i8 %548, 5
  %550 = or i8 %546, %549
  %551 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 38
  %552 = load i8, i8 addrspace(5)* %551, align 2, !tbaa !5, !range !21
  %553 = shl nuw nsw i8 %552, 6
  %554 = add nuw nsw i8 %550, %553
  %555 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 39
  %556 = load i8, i8 addrspace(5)* %555, align 1, !tbaa !5, !range !21
  %557 = shl nuw i8 %556, 7
  %558 = add nuw i8 %554, %557
  %559 = add nuw nsw i32 %398, 4
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %560
  store i8 %558, i8 addrspace(1)* %561, align 1, !tbaa !22
  %562 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 40
  %563 = load i8, i8 addrspace(5)* %562, align 8, !tbaa !5, !range !21
  %564 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 41
  %565 = load i8, i8 addrspace(5)* %564, align 1, !tbaa !5, !range !21
  %566 = shl nuw nsw i8 %565, 1
  %567 = or i8 %563, %566
  %568 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 42
  %569 = load i8, i8 addrspace(5)* %568, align 2, !tbaa !5, !range !21
  %570 = shl nuw nsw i8 %569, 2
  %571 = or i8 %567, %570
  %572 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 43
  %573 = load i8, i8 addrspace(5)* %572, align 1, !tbaa !5, !range !21
  %574 = shl nuw nsw i8 %573, 3
  %575 = or i8 %571, %574
  %576 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 44
  %577 = load i8, i8 addrspace(5)* %576, align 4, !tbaa !5, !range !21
  %578 = shl nuw nsw i8 %577, 4
  %579 = or i8 %575, %578
  %580 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 45
  %581 = load i8, i8 addrspace(5)* %580, align 1, !tbaa !5, !range !21
  %582 = shl nuw nsw i8 %581, 5
  %583 = or i8 %579, %582
  %584 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 46
  %585 = load i8, i8 addrspace(5)* %584, align 2, !tbaa !5, !range !21
  %586 = shl nuw nsw i8 %585, 6
  %587 = add nuw nsw i8 %583, %586
  %588 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 47
  %589 = load i8, i8 addrspace(5)* %588, align 1, !tbaa !5, !range !21
  %590 = shl nuw i8 %589, 7
  %591 = add nuw i8 %587, %590
  %592 = add nuw nsw i32 %398, 5
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %593
  store i8 %591, i8 addrspace(1)* %594, align 1, !tbaa !22
  %595 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 48
  %596 = load i8, i8 addrspace(5)* %595, align 16, !tbaa !5, !range !21
  %597 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 49
  %598 = load i8, i8 addrspace(5)* %597, align 1, !tbaa !5, !range !21
  %599 = shl nuw nsw i8 %598, 1
  %600 = or i8 %596, %599
  %601 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 50
  %602 = load i8, i8 addrspace(5)* %601, align 2, !tbaa !5, !range !21
  %603 = shl nuw nsw i8 %602, 2
  %604 = or i8 %600, %603
  %605 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 51
  %606 = load i8, i8 addrspace(5)* %605, align 1, !tbaa !5, !range !21
  %607 = shl nuw nsw i8 %606, 3
  %608 = or i8 %604, %607
  %609 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 52
  %610 = load i8, i8 addrspace(5)* %609, align 4, !tbaa !5, !range !21
  %611 = shl nuw nsw i8 %610, 4
  %612 = or i8 %608, %611
  %613 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 53
  %614 = load i8, i8 addrspace(5)* %613, align 1, !tbaa !5, !range !21
  %615 = shl nuw nsw i8 %614, 5
  %616 = or i8 %612, %615
  %617 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 54
  %618 = load i8, i8 addrspace(5)* %617, align 2, !tbaa !5, !range !21
  %619 = shl nuw nsw i8 %618, 6
  %620 = add nuw nsw i8 %616, %619
  %621 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 55
  %622 = load i8, i8 addrspace(5)* %621, align 1, !tbaa !5, !range !21
  %623 = shl nuw i8 %622, 7
  %624 = add nuw i8 %620, %623
  %625 = add nuw nsw i32 %398, 6
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %626
  store i8 %624, i8 addrspace(1)* %627, align 1, !tbaa !22
  %628 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 56
  %629 = load i8, i8 addrspace(5)* %628, align 8, !tbaa !5, !range !21
  %630 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 57
  %631 = load i8, i8 addrspace(5)* %630, align 1, !tbaa !5, !range !21
  %632 = shl nuw nsw i8 %631, 1
  %633 = or i8 %629, %632
  %634 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 58
  %635 = load i8, i8 addrspace(5)* %634, align 2, !tbaa !5, !range !21
  %636 = shl nuw nsw i8 %635, 2
  %637 = or i8 %633, %636
  %638 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 59
  %639 = load i8, i8 addrspace(5)* %638, align 1, !tbaa !5, !range !21
  %640 = shl nuw nsw i8 %639, 3
  %641 = or i8 %637, %640
  %642 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 60
  %643 = load i8, i8 addrspace(5)* %642, align 4, !tbaa !5, !range !21
  %644 = shl nuw nsw i8 %643, 4
  %645 = or i8 %641, %644
  %646 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 61
  %647 = load i8, i8 addrspace(5)* %646, align 1, !tbaa !5, !range !21
  %648 = shl nuw nsw i8 %647, 5
  %649 = or i8 %645, %648
  %650 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 62
  %651 = load i8, i8 addrspace(5)* %650, align 2, !tbaa !5, !range !21
  %652 = shl nuw nsw i8 %651, 6
  %653 = add nuw nsw i8 %649, %652
  %654 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 63
  %655 = load i8, i8 addrspace(5)* %654, align 1, !tbaa !5, !range !21
  %656 = shl nuw i8 %655, 7
  %657 = add nuw i8 %653, %656
  %658 = add nuw nsw i32 %398, 7
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %659
  store i8 %657, i8 addrspace(1)* %660, align 1, !tbaa !22
  %661 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 64
  %662 = load i8, i8 addrspace(5)* %661, align 16, !tbaa !5, !range !21
  %663 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 65
  %664 = load i8, i8 addrspace(5)* %663, align 1, !tbaa !5, !range !21
  %665 = shl nuw nsw i8 %664, 1
  %666 = or i8 %662, %665
  %667 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 66
  %668 = load i8, i8 addrspace(5)* %667, align 2, !tbaa !5, !range !21
  %669 = shl nuw nsw i8 %668, 2
  %670 = or i8 %666, %669
  %671 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 67
  %672 = load i8, i8 addrspace(5)* %671, align 1, !tbaa !5, !range !21
  %673 = shl nuw nsw i8 %672, 3
  %674 = or i8 %670, %673
  %675 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 68
  %676 = load i8, i8 addrspace(5)* %675, align 4, !tbaa !5, !range !21
  %677 = shl nuw nsw i8 %676, 4
  %678 = or i8 %674, %677
  %679 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 69
  %680 = load i8, i8 addrspace(5)* %679, align 1, !tbaa !5, !range !21
  %681 = shl nuw nsw i8 %680, 5
  %682 = or i8 %678, %681
  %683 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 70
  %684 = load i8, i8 addrspace(5)* %683, align 2, !tbaa !5, !range !21
  %685 = shl nuw nsw i8 %684, 6
  %686 = add nuw nsw i8 %682, %685
  %687 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 71
  %688 = load i8, i8 addrspace(5)* %687, align 1, !tbaa !5, !range !21
  %689 = shl nuw i8 %688, 7
  %690 = add nuw i8 %686, %689
  %691 = add nuw nsw i32 %398, 8
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %692
  store i8 %690, i8 addrspace(1)* %693, align 1, !tbaa !22
  %694 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 72
  %695 = load i8, i8 addrspace(5)* %694, align 8, !tbaa !5, !range !21
  %696 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 73
  %697 = load i8, i8 addrspace(5)* %696, align 1, !tbaa !5, !range !21
  %698 = shl nuw nsw i8 %697, 1
  %699 = or i8 %695, %698
  %700 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 74
  %701 = load i8, i8 addrspace(5)* %700, align 2, !tbaa !5, !range !21
  %702 = shl nuw nsw i8 %701, 2
  %703 = or i8 %699, %702
  %704 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 75
  %705 = load i8, i8 addrspace(5)* %704, align 1, !tbaa !5, !range !21
  %706 = shl nuw nsw i8 %705, 3
  %707 = or i8 %703, %706
  %708 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 76
  %709 = load i8, i8 addrspace(5)* %708, align 4, !tbaa !5, !range !21
  %710 = shl nuw nsw i8 %709, 4
  %711 = or i8 %707, %710
  %712 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 77
  %713 = load i8, i8 addrspace(5)* %712, align 1, !tbaa !5, !range !21
  %714 = shl nuw nsw i8 %713, 5
  %715 = or i8 %711, %714
  %716 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 78
  %717 = load i8, i8 addrspace(5)* %716, align 2, !tbaa !5, !range !21
  %718 = shl nuw nsw i8 %717, 6
  %719 = add nuw nsw i8 %715, %718
  %720 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 79
  %721 = load i8, i8 addrspace(5)* %720, align 1, !tbaa !5, !range !21
  %722 = shl nuw i8 %721, 7
  %723 = add nuw i8 %719, %722
  %724 = add nuw nsw i32 %398, 9
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %725
  store i8 %723, i8 addrspace(1)* %726, align 1, !tbaa !22
  %727 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 80
  %728 = load i8, i8 addrspace(5)* %727, align 16, !tbaa !5, !range !21
  %729 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 81
  %730 = load i8, i8 addrspace(5)* %729, align 1, !tbaa !5, !range !21
  %731 = shl nuw nsw i8 %730, 1
  %732 = or i8 %728, %731
  %733 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 82
  %734 = load i8, i8 addrspace(5)* %733, align 2, !tbaa !5, !range !21
  %735 = shl nuw nsw i8 %734, 2
  %736 = or i8 %732, %735
  %737 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 83
  %738 = load i8, i8 addrspace(5)* %737, align 1, !tbaa !5, !range !21
  %739 = shl nuw nsw i8 %738, 3
  %740 = or i8 %736, %739
  %741 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 84
  %742 = load i8, i8 addrspace(5)* %741, align 4, !tbaa !5, !range !21
  %743 = shl nuw nsw i8 %742, 4
  %744 = or i8 %740, %743
  %745 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 85
  %746 = load i8, i8 addrspace(5)* %745, align 1, !tbaa !5, !range !21
  %747 = shl nuw nsw i8 %746, 5
  %748 = or i8 %744, %747
  %749 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 86
  %750 = load i8, i8 addrspace(5)* %749, align 2, !tbaa !5, !range !21
  %751 = shl nuw nsw i8 %750, 6
  %752 = add nuw nsw i8 %748, %751
  %753 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 87
  %754 = load i8, i8 addrspace(5)* %753, align 1, !tbaa !5, !range !21
  %755 = shl nuw i8 %754, 7
  %756 = add nuw i8 %752, %755
  %757 = add nuw nsw i32 %398, 10
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %758
  store i8 %756, i8 addrspace(1)* %759, align 1, !tbaa !22
  %760 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 88
  %761 = load i8, i8 addrspace(5)* %760, align 8, !tbaa !5, !range !21
  %762 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 89
  %763 = load i8, i8 addrspace(5)* %762, align 1, !tbaa !5, !range !21
  %764 = shl nuw nsw i8 %763, 1
  %765 = or i8 %761, %764
  %766 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 90
  %767 = load i8, i8 addrspace(5)* %766, align 2, !tbaa !5, !range !21
  %768 = shl nuw nsw i8 %767, 2
  %769 = or i8 %765, %768
  %770 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 91
  %771 = load i8, i8 addrspace(5)* %770, align 1, !tbaa !5, !range !21
  %772 = shl nuw nsw i8 %771, 3
  %773 = or i8 %769, %772
  %774 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 92
  %775 = load i8, i8 addrspace(5)* %774, align 4, !tbaa !5, !range !21
  %776 = shl nuw nsw i8 %775, 4
  %777 = or i8 %773, %776
  %778 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 93
  %779 = load i8, i8 addrspace(5)* %778, align 1, !tbaa !5, !range !21
  %780 = shl nuw nsw i8 %779, 5
  %781 = or i8 %777, %780
  %782 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 94
  %783 = load i8, i8 addrspace(5)* %782, align 2, !tbaa !5, !range !21
  %784 = shl nuw nsw i8 %783, 6
  %785 = add nuw nsw i8 %781, %784
  %786 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 95
  %787 = load i8, i8 addrspace(5)* %786, align 1, !tbaa !5, !range !21
  %788 = shl nuw i8 %787, 7
  %789 = add nuw i8 %785, %788
  %790 = add nuw nsw i32 %398, 11
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %791
  store i8 %789, i8 addrspace(1)* %792, align 1, !tbaa !22
  %793 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 96
  %794 = load i8, i8 addrspace(5)* %793, align 16, !tbaa !5, !range !21
  %795 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 97
  %796 = load i8, i8 addrspace(5)* %795, align 1, !tbaa !5, !range !21
  %797 = shl nuw nsw i8 %796, 1
  %798 = or i8 %794, %797
  %799 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 98
  %800 = load i8, i8 addrspace(5)* %799, align 2, !tbaa !5, !range !21
  %801 = shl nuw nsw i8 %800, 2
  %802 = or i8 %798, %801
  %803 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 99
  %804 = load i8, i8 addrspace(5)* %803, align 1, !tbaa !5, !range !21
  %805 = shl nuw nsw i8 %804, 3
  %806 = or i8 %802, %805
  %807 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 100
  %808 = load i8, i8 addrspace(5)* %807, align 4, !tbaa !5, !range !21
  %809 = shl nuw nsw i8 %808, 4
  %810 = or i8 %806, %809
  %811 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 101
  %812 = load i8, i8 addrspace(5)* %811, align 1, !tbaa !5, !range !21
  %813 = shl nuw nsw i8 %812, 5
  %814 = or i8 %810, %813
  %815 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 102
  %816 = load i8, i8 addrspace(5)* %815, align 2, !tbaa !5, !range !21
  %817 = shl nuw nsw i8 %816, 6
  %818 = add nuw nsw i8 %814, %817
  %819 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 103
  %820 = load i8, i8 addrspace(5)* %819, align 1, !tbaa !5, !range !21
  %821 = shl nuw i8 %820, 7
  %822 = add nuw i8 %818, %821
  %823 = add nuw nsw i32 %398, 12
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %824
  store i8 %822, i8 addrspace(1)* %825, align 1, !tbaa !22
  %826 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 104
  %827 = load i8, i8 addrspace(5)* %826, align 8, !tbaa !5, !range !21
  %828 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 105
  %829 = load i8, i8 addrspace(5)* %828, align 1, !tbaa !5, !range !21
  %830 = shl nuw nsw i8 %829, 1
  %831 = or i8 %827, %830
  %832 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 106
  %833 = load i8, i8 addrspace(5)* %832, align 2, !tbaa !5, !range !21
  %834 = shl nuw nsw i8 %833, 2
  %835 = or i8 %831, %834
  %836 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 107
  %837 = load i8, i8 addrspace(5)* %836, align 1, !tbaa !5, !range !21
  %838 = shl nuw nsw i8 %837, 3
  %839 = or i8 %835, %838
  %840 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 108
  %841 = load i8, i8 addrspace(5)* %840, align 4, !tbaa !5, !range !21
  %842 = shl nuw nsw i8 %841, 4
  %843 = or i8 %839, %842
  %844 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 109
  %845 = load i8, i8 addrspace(5)* %844, align 1, !tbaa !5, !range !21
  %846 = shl nuw nsw i8 %845, 5
  %847 = or i8 %843, %846
  %848 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 110
  %849 = load i8, i8 addrspace(5)* %848, align 2, !tbaa !5, !range !21
  %850 = shl nuw nsw i8 %849, 6
  %851 = add nuw nsw i8 %847, %850
  %852 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 111
  %853 = load i8, i8 addrspace(5)* %852, align 1, !tbaa !5, !range !21
  %854 = shl nuw i8 %853, 7
  %855 = add nuw i8 %851, %854
  %856 = add nuw nsw i32 %398, 13
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %857
  store i8 %855, i8 addrspace(1)* %858, align 1, !tbaa !22
  %859 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 112
  %860 = load i8, i8 addrspace(5)* %859, align 16, !tbaa !5, !range !21
  %861 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 113
  %862 = load i8, i8 addrspace(5)* %861, align 1, !tbaa !5, !range !21
  %863 = shl nuw nsw i8 %862, 1
  %864 = or i8 %860, %863
  %865 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 114
  %866 = load i8, i8 addrspace(5)* %865, align 2, !tbaa !5, !range !21
  %867 = shl nuw nsw i8 %866, 2
  %868 = or i8 %864, %867
  %869 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 115
  %870 = load i8, i8 addrspace(5)* %869, align 1, !tbaa !5, !range !21
  %871 = shl nuw nsw i8 %870, 3
  %872 = or i8 %868, %871
  %873 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 116
  %874 = load i8, i8 addrspace(5)* %873, align 4, !tbaa !5, !range !21
  %875 = shl nuw nsw i8 %874, 4
  %876 = or i8 %872, %875
  %877 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 117
  %878 = load i8, i8 addrspace(5)* %877, align 1, !tbaa !5, !range !21
  %879 = shl nuw nsw i8 %878, 5
  %880 = or i8 %876, %879
  %881 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 118
  %882 = load i8, i8 addrspace(5)* %881, align 2, !tbaa !5, !range !21
  %883 = shl nuw nsw i8 %882, 6
  %884 = add nuw nsw i8 %880, %883
  %885 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 119
  %886 = load i8, i8 addrspace(5)* %885, align 1, !tbaa !5, !range !21
  %887 = shl nuw i8 %886, 7
  %888 = add nuw i8 %884, %887
  %889 = add nuw nsw i32 %398, 14
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %890
  store i8 %888, i8 addrspace(1)* %891, align 1, !tbaa !22
  %892 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 120
  %893 = load i8, i8 addrspace(5)* %892, align 8, !tbaa !5, !range !21
  %894 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 121
  %895 = load i8, i8 addrspace(5)* %894, align 1, !tbaa !5, !range !21
  %896 = shl nuw nsw i8 %895, 1
  %897 = or i8 %893, %896
  %898 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 122
  %899 = load i8, i8 addrspace(5)* %898, align 2, !tbaa !5, !range !21
  %900 = shl nuw nsw i8 %899, 2
  %901 = or i8 %897, %900
  %902 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 123
  %903 = load i8, i8 addrspace(5)* %902, align 1, !tbaa !5, !range !21
  %904 = shl nuw nsw i8 %903, 3
  %905 = or i8 %901, %904
  %906 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 124
  %907 = load i8, i8 addrspace(5)* %906, align 4, !tbaa !5, !range !21
  %908 = shl nuw nsw i8 %907, 4
  %909 = or i8 %905, %908
  %910 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 125
  %911 = load i8, i8 addrspace(5)* %910, align 1, !tbaa !5, !range !21
  %912 = shl nuw nsw i8 %911, 5
  %913 = or i8 %909, %912
  %914 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 126
  %915 = load i8, i8 addrspace(5)* %914, align 2, !tbaa !5, !range !21
  %916 = shl nuw nsw i8 %915, 6
  %917 = add nuw nsw i8 %913, %916
  %918 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 127
  %919 = load i8, i8 addrspace(5)* %918, align 1, !tbaa !5, !range !21
  %920 = shl nuw i8 %919, 7
  %921 = add nuw i8 %917, %920
  %922 = add nuw nsw i32 %398, 15
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %923
  store i8 %921, i8 addrspace(1)* %924, align 1, !tbaa !22
  %925 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 128
  %926 = load i8, i8 addrspace(5)* %925, align 16, !tbaa !5, !range !21
  %927 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 129
  %928 = load i8, i8 addrspace(5)* %927, align 1, !tbaa !5, !range !21
  %929 = shl nuw nsw i8 %928, 1
  %930 = or i8 %926, %929
  %931 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 130
  %932 = load i8, i8 addrspace(5)* %931, align 2, !tbaa !5, !range !21
  %933 = shl nuw nsw i8 %932, 2
  %934 = or i8 %930, %933
  %935 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 131
  %936 = load i8, i8 addrspace(5)* %935, align 1, !tbaa !5, !range !21
  %937 = shl nuw nsw i8 %936, 3
  %938 = or i8 %934, %937
  %939 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 132
  %940 = load i8, i8 addrspace(5)* %939, align 4, !tbaa !5, !range !21
  %941 = shl nuw nsw i8 %940, 4
  %942 = or i8 %938, %941
  %943 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 133
  %944 = load i8, i8 addrspace(5)* %943, align 1, !tbaa !5, !range !21
  %945 = shl nuw nsw i8 %944, 5
  %946 = or i8 %942, %945
  %947 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 134
  %948 = load i8, i8 addrspace(5)* %947, align 2, !tbaa !5, !range !21
  %949 = shl nuw nsw i8 %948, 6
  %950 = add nuw nsw i8 %946, %949
  %951 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 135
  %952 = load i8, i8 addrspace(5)* %951, align 1, !tbaa !5, !range !21
  %953 = shl nuw i8 %952, 7
  %954 = add nuw i8 %950, %953
  %955 = add nuw nsw i32 %398, 16
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %956
  store i8 %954, i8 addrspace(1)* %957, align 1, !tbaa !22
  %958 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 136
  %959 = load i8, i8 addrspace(5)* %958, align 8, !tbaa !5, !range !21
  %960 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 137
  %961 = load i8, i8 addrspace(5)* %960, align 1, !tbaa !5, !range !21
  %962 = shl nuw nsw i8 %961, 1
  %963 = or i8 %959, %962
  %964 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 138
  %965 = load i8, i8 addrspace(5)* %964, align 2, !tbaa !5, !range !21
  %966 = shl nuw nsw i8 %965, 2
  %967 = or i8 %963, %966
  %968 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 139
  %969 = load i8, i8 addrspace(5)* %968, align 1, !tbaa !5, !range !21
  %970 = shl nuw nsw i8 %969, 3
  %971 = or i8 %967, %970
  %972 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 140
  %973 = load i8, i8 addrspace(5)* %972, align 4, !tbaa !5, !range !21
  %974 = shl nuw nsw i8 %973, 4
  %975 = or i8 %971, %974
  %976 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 141
  %977 = load i8, i8 addrspace(5)* %976, align 1, !tbaa !5, !range !21
  %978 = shl nuw nsw i8 %977, 5
  %979 = or i8 %975, %978
  %980 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 142
  %981 = load i8, i8 addrspace(5)* %980, align 2, !tbaa !5, !range !21
  %982 = shl nuw nsw i8 %981, 6
  %983 = add nuw nsw i8 %979, %982
  %984 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 143
  %985 = load i8, i8 addrspace(5)* %984, align 1, !tbaa !5, !range !21
  %986 = shl nuw i8 %985, 7
  %987 = add nuw i8 %983, %986
  %988 = add nuw nsw i32 %398, 17
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %989
  store i8 %987, i8 addrspace(1)* %990, align 1, !tbaa !22
  %991 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 144
  %992 = load i8, i8 addrspace(5)* %991, align 16, !tbaa !5, !range !21
  %993 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 145
  %994 = load i8, i8 addrspace(5)* %993, align 1, !tbaa !5, !range !21
  %995 = shl nuw nsw i8 %994, 1
  %996 = or i8 %992, %995
  %997 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 146
  %998 = load i8, i8 addrspace(5)* %997, align 2, !tbaa !5, !range !21
  %999 = shl nuw nsw i8 %998, 2
  %1000 = or i8 %996, %999
  %1001 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 147
  %1002 = load i8, i8 addrspace(5)* %1001, align 1, !tbaa !5, !range !21
  %1003 = shl nuw nsw i8 %1002, 3
  %1004 = or i8 %1000, %1003
  %1005 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 148
  %1006 = load i8, i8 addrspace(5)* %1005, align 4, !tbaa !5, !range !21
  %1007 = shl nuw nsw i8 %1006, 4
  %1008 = or i8 %1004, %1007
  %1009 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 149
  %1010 = load i8, i8 addrspace(5)* %1009, align 1, !tbaa !5, !range !21
  %1011 = shl nuw nsw i8 %1010, 5
  %1012 = or i8 %1008, %1011
  %1013 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 150
  %1014 = load i8, i8 addrspace(5)* %1013, align 2, !tbaa !5, !range !21
  %1015 = shl nuw nsw i8 %1014, 6
  %1016 = add nuw nsw i8 %1012, %1015
  %1017 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 151
  %1018 = load i8, i8 addrspace(5)* %1017, align 1, !tbaa !5, !range !21
  %1019 = shl nuw i8 %1018, 7
  %1020 = add nuw i8 %1016, %1019
  %1021 = add nuw nsw i32 %398, 18
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1022
  store i8 %1020, i8 addrspace(1)* %1023, align 1, !tbaa !22
  %1024 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 152
  %1025 = load i8, i8 addrspace(5)* %1024, align 8, !tbaa !5, !range !21
  %1026 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 153
  %1027 = load i8, i8 addrspace(5)* %1026, align 1, !tbaa !5, !range !21
  %1028 = shl nuw nsw i8 %1027, 1
  %1029 = or i8 %1025, %1028
  %1030 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 154
  %1031 = load i8, i8 addrspace(5)* %1030, align 2, !tbaa !5, !range !21
  %1032 = shl nuw nsw i8 %1031, 2
  %1033 = or i8 %1029, %1032
  %1034 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 155
  %1035 = load i8, i8 addrspace(5)* %1034, align 1, !tbaa !5, !range !21
  %1036 = shl nuw nsw i8 %1035, 3
  %1037 = or i8 %1033, %1036
  %1038 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 156
  %1039 = load i8, i8 addrspace(5)* %1038, align 4, !tbaa !5, !range !21
  %1040 = shl nuw nsw i8 %1039, 4
  %1041 = or i8 %1037, %1040
  %1042 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 157
  %1043 = load i8, i8 addrspace(5)* %1042, align 1, !tbaa !5, !range !21
  %1044 = shl nuw nsw i8 %1043, 5
  %1045 = or i8 %1041, %1044
  %1046 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 158
  %1047 = load i8, i8 addrspace(5)* %1046, align 2, !tbaa !5, !range !21
  %1048 = shl nuw nsw i8 %1047, 6
  %1049 = add nuw nsw i8 %1045, %1048
  %1050 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 159
  %1051 = load i8, i8 addrspace(5)* %1050, align 1, !tbaa !5, !range !21
  %1052 = shl nuw i8 %1051, 7
  %1053 = add nuw i8 %1049, %1052
  %1054 = add nuw nsw i32 %398, 19
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1055
  store i8 %1053, i8 addrspace(1)* %1056, align 1, !tbaa !22
  %1057 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 160
  %1058 = load i8, i8 addrspace(5)* %1057, align 16, !tbaa !5, !range !21
  %1059 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 161
  %1060 = load i8, i8 addrspace(5)* %1059, align 1, !tbaa !5, !range !21
  %1061 = shl nuw nsw i8 %1060, 1
  %1062 = or i8 %1058, %1061
  %1063 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 162
  %1064 = load i8, i8 addrspace(5)* %1063, align 2, !tbaa !5, !range !21
  %1065 = shl nuw nsw i8 %1064, 2
  %1066 = or i8 %1062, %1065
  %1067 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 163
  %1068 = load i8, i8 addrspace(5)* %1067, align 1, !tbaa !5, !range !21
  %1069 = shl nuw nsw i8 %1068, 3
  %1070 = or i8 %1066, %1069
  %1071 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 164
  %1072 = load i8, i8 addrspace(5)* %1071, align 4, !tbaa !5, !range !21
  %1073 = shl nuw nsw i8 %1072, 4
  %1074 = or i8 %1070, %1073
  %1075 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 165
  %1076 = load i8, i8 addrspace(5)* %1075, align 1, !tbaa !5, !range !21
  %1077 = shl nuw nsw i8 %1076, 5
  %1078 = or i8 %1074, %1077
  %1079 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 166
  %1080 = load i8, i8 addrspace(5)* %1079, align 2, !tbaa !5, !range !21
  %1081 = shl nuw nsw i8 %1080, 6
  %1082 = add nuw nsw i8 %1078, %1081
  %1083 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 167
  %1084 = load i8, i8 addrspace(5)* %1083, align 1, !tbaa !5, !range !21
  %1085 = shl nuw i8 %1084, 7
  %1086 = add nuw i8 %1082, %1085
  %1087 = add nuw nsw i32 %398, 20
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1088
  store i8 %1086, i8 addrspace(1)* %1089, align 1, !tbaa !22
  %1090 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 168
  %1091 = load i8, i8 addrspace(5)* %1090, align 8, !tbaa !5, !range !21
  %1092 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 169
  %1093 = load i8, i8 addrspace(5)* %1092, align 1, !tbaa !5, !range !21
  %1094 = shl nuw nsw i8 %1093, 1
  %1095 = or i8 %1091, %1094
  %1096 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 170
  %1097 = load i8, i8 addrspace(5)* %1096, align 2, !tbaa !5, !range !21
  %1098 = shl nuw nsw i8 %1097, 2
  %1099 = or i8 %1095, %1098
  %1100 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 171
  %1101 = load i8, i8 addrspace(5)* %1100, align 1, !tbaa !5, !range !21
  %1102 = shl nuw nsw i8 %1101, 3
  %1103 = or i8 %1099, %1102
  %1104 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 172
  %1105 = load i8, i8 addrspace(5)* %1104, align 4, !tbaa !5, !range !21
  %1106 = shl nuw nsw i8 %1105, 4
  %1107 = or i8 %1103, %1106
  %1108 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 173
  %1109 = load i8, i8 addrspace(5)* %1108, align 1, !tbaa !5, !range !21
  %1110 = shl nuw nsw i8 %1109, 5
  %1111 = or i8 %1107, %1110
  %1112 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 174
  %1113 = load i8, i8 addrspace(5)* %1112, align 2, !tbaa !5, !range !21
  %1114 = shl nuw nsw i8 %1113, 6
  %1115 = add nuw nsw i8 %1111, %1114
  %1116 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 175
  %1117 = load i8, i8 addrspace(5)* %1116, align 1, !tbaa !5, !range !21
  %1118 = shl nuw i8 %1117, 7
  %1119 = add nuw i8 %1115, %1118
  %1120 = add nuw nsw i32 %398, 21
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1121
  store i8 %1119, i8 addrspace(1)* %1122, align 1, !tbaa !22
  %1123 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 176
  %1124 = load i8, i8 addrspace(5)* %1123, align 16, !tbaa !5, !range !21
  %1125 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 177
  %1126 = load i8, i8 addrspace(5)* %1125, align 1, !tbaa !5, !range !21
  %1127 = shl nuw nsw i8 %1126, 1
  %1128 = or i8 %1124, %1127
  %1129 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 178
  %1130 = load i8, i8 addrspace(5)* %1129, align 2, !tbaa !5, !range !21
  %1131 = shl nuw nsw i8 %1130, 2
  %1132 = or i8 %1128, %1131
  %1133 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 179
  %1134 = load i8, i8 addrspace(5)* %1133, align 1, !tbaa !5, !range !21
  %1135 = shl nuw nsw i8 %1134, 3
  %1136 = or i8 %1132, %1135
  %1137 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 180
  %1138 = load i8, i8 addrspace(5)* %1137, align 4, !tbaa !5, !range !21
  %1139 = shl nuw nsw i8 %1138, 4
  %1140 = or i8 %1136, %1139
  %1141 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 181
  %1142 = load i8, i8 addrspace(5)* %1141, align 1, !tbaa !5, !range !21
  %1143 = shl nuw nsw i8 %1142, 5
  %1144 = or i8 %1140, %1143
  %1145 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 182
  %1146 = load i8, i8 addrspace(5)* %1145, align 2, !tbaa !5, !range !21
  %1147 = shl nuw nsw i8 %1146, 6
  %1148 = add nuw nsw i8 %1144, %1147
  %1149 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 183
  %1150 = load i8, i8 addrspace(5)* %1149, align 1, !tbaa !5, !range !21
  %1151 = shl nuw i8 %1150, 7
  %1152 = add nuw i8 %1148, %1151
  %1153 = add nuw nsw i32 %398, 22
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1154
  store i8 %1152, i8 addrspace(1)* %1155, align 1, !tbaa !22
  %1156 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 184
  %1157 = load i8, i8 addrspace(5)* %1156, align 8, !tbaa !5, !range !21
  %1158 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 185
  %1159 = load i8, i8 addrspace(5)* %1158, align 1, !tbaa !5, !range !21
  %1160 = shl nuw nsw i8 %1159, 1
  %1161 = or i8 %1157, %1160
  %1162 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 186
  %1163 = load i8, i8 addrspace(5)* %1162, align 2, !tbaa !5, !range !21
  %1164 = shl nuw nsw i8 %1163, 2
  %1165 = or i8 %1161, %1164
  %1166 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 187
  %1167 = load i8, i8 addrspace(5)* %1166, align 1, !tbaa !5, !range !21
  %1168 = shl nuw nsw i8 %1167, 3
  %1169 = or i8 %1165, %1168
  %1170 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 188
  %1171 = load i8, i8 addrspace(5)* %1170, align 4, !tbaa !5, !range !21
  %1172 = shl nuw nsw i8 %1171, 4
  %1173 = or i8 %1169, %1172
  %1174 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 189
  %1175 = load i8, i8 addrspace(5)* %1174, align 1, !tbaa !5, !range !21
  %1176 = shl nuw nsw i8 %1175, 5
  %1177 = or i8 %1173, %1176
  %1178 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 190
  %1179 = load i8, i8 addrspace(5)* %1178, align 2, !tbaa !5, !range !21
  %1180 = shl nuw nsw i8 %1179, 6
  %1181 = add nuw nsw i8 %1177, %1180
  %1182 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 191
  %1183 = load i8, i8 addrspace(5)* %1182, align 1, !tbaa !5, !range !21
  %1184 = shl nuw i8 %1183, 7
  %1185 = add nuw i8 %1181, %1184
  %1186 = add nuw nsw i32 %398, 23
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1187
  store i8 %1185, i8 addrspace(1)* %1188, align 1, !tbaa !22
  %1189 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 192
  %1190 = load i8, i8 addrspace(5)* %1189, align 16, !tbaa !5, !range !21
  %1191 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 193
  %1192 = load i8, i8 addrspace(5)* %1191, align 1, !tbaa !5, !range !21
  %1193 = shl nuw nsw i8 %1192, 1
  %1194 = or i8 %1190, %1193
  %1195 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 194
  %1196 = load i8, i8 addrspace(5)* %1195, align 2, !tbaa !5, !range !21
  %1197 = shl nuw nsw i8 %1196, 2
  %1198 = or i8 %1194, %1197
  %1199 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 195
  %1200 = load i8, i8 addrspace(5)* %1199, align 1, !tbaa !5, !range !21
  %1201 = shl nuw nsw i8 %1200, 3
  %1202 = or i8 %1198, %1201
  %1203 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 196
  %1204 = load i8, i8 addrspace(5)* %1203, align 4, !tbaa !5, !range !21
  %1205 = shl nuw nsw i8 %1204, 4
  %1206 = or i8 %1202, %1205
  %1207 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 197
  %1208 = load i8, i8 addrspace(5)* %1207, align 1, !tbaa !5, !range !21
  %1209 = shl nuw nsw i8 %1208, 5
  %1210 = or i8 %1206, %1209
  %1211 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 198
  %1212 = load i8, i8 addrspace(5)* %1211, align 2, !tbaa !5, !range !21
  %1213 = shl nuw nsw i8 %1212, 6
  %1214 = add nuw nsw i8 %1210, %1213
  %1215 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 199
  %1216 = load i8, i8 addrspace(5)* %1215, align 1, !tbaa !5, !range !21
  %1217 = shl nuw i8 %1216, 7
  %1218 = add nuw i8 %1214, %1217
  %1219 = add nuw nsw i32 %398, 24
  %1220 = sext i32 %1219 to i64
  %1221 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1220
  store i8 %1218, i8 addrspace(1)* %1221, align 1, !tbaa !22
  %1222 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 200
  %1223 = load i8, i8 addrspace(5)* %1222, align 8, !tbaa !5, !range !21
  %1224 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 201
  %1225 = load i8, i8 addrspace(5)* %1224, align 1, !tbaa !5, !range !21
  %1226 = shl nuw nsw i8 %1225, 1
  %1227 = or i8 %1223, %1226
  %1228 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 202
  %1229 = load i8, i8 addrspace(5)* %1228, align 2, !tbaa !5, !range !21
  %1230 = shl nuw nsw i8 %1229, 2
  %1231 = or i8 %1227, %1230
  %1232 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 203
  %1233 = load i8, i8 addrspace(5)* %1232, align 1, !tbaa !5, !range !21
  %1234 = shl nuw nsw i8 %1233, 3
  %1235 = or i8 %1231, %1234
  %1236 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 204
  %1237 = load i8, i8 addrspace(5)* %1236, align 4, !tbaa !5, !range !21
  %1238 = shl nuw nsw i8 %1237, 4
  %1239 = or i8 %1235, %1238
  %1240 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 205
  %1241 = load i8, i8 addrspace(5)* %1240, align 1, !tbaa !5, !range !21
  %1242 = shl nuw nsw i8 %1241, 5
  %1243 = or i8 %1239, %1242
  %1244 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 206
  %1245 = load i8, i8 addrspace(5)* %1244, align 2, !tbaa !5, !range !21
  %1246 = shl nuw nsw i8 %1245, 6
  %1247 = add nuw nsw i8 %1243, %1246
  %1248 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 207
  %1249 = load i8, i8 addrspace(5)* %1248, align 1, !tbaa !5, !range !21
  %1250 = shl nuw i8 %1249, 7
  %1251 = add nuw i8 %1247, %1250
  %1252 = add nuw nsw i32 %398, 25
  %1253 = sext i32 %1252 to i64
  %1254 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1253
  store i8 %1251, i8 addrspace(1)* %1254, align 1, !tbaa !22
  %1255 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 208
  %1256 = load i8, i8 addrspace(5)* %1255, align 16, !tbaa !5, !range !21
  %1257 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 209
  %1258 = load i8, i8 addrspace(5)* %1257, align 1, !tbaa !5, !range !21
  %1259 = shl nuw nsw i8 %1258, 1
  %1260 = or i8 %1256, %1259
  %1261 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 210
  %1262 = load i8, i8 addrspace(5)* %1261, align 2, !tbaa !5, !range !21
  %1263 = shl nuw nsw i8 %1262, 2
  %1264 = or i8 %1260, %1263
  %1265 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 211
  %1266 = load i8, i8 addrspace(5)* %1265, align 1, !tbaa !5, !range !21
  %1267 = shl nuw nsw i8 %1266, 3
  %1268 = or i8 %1264, %1267
  %1269 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 212
  %1270 = load i8, i8 addrspace(5)* %1269, align 4, !tbaa !5, !range !21
  %1271 = shl nuw nsw i8 %1270, 4
  %1272 = or i8 %1268, %1271
  %1273 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 213
  %1274 = load i8, i8 addrspace(5)* %1273, align 1, !tbaa !5, !range !21
  %1275 = shl nuw nsw i8 %1274, 5
  %1276 = or i8 %1272, %1275
  %1277 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 214
  %1278 = load i8, i8 addrspace(5)* %1277, align 2, !tbaa !5, !range !21
  %1279 = shl nuw nsw i8 %1278, 6
  %1280 = add nuw nsw i8 %1276, %1279
  %1281 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 215
  %1282 = load i8, i8 addrspace(5)* %1281, align 1, !tbaa !5, !range !21
  %1283 = shl nuw i8 %1282, 7
  %1284 = add nuw i8 %1280, %1283
  %1285 = add nuw nsw i32 %398, 26
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1286
  store i8 %1284, i8 addrspace(1)* %1287, align 1, !tbaa !22
  %1288 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 216
  %1289 = load i8, i8 addrspace(5)* %1288, align 8, !tbaa !5, !range !21
  %1290 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 217
  %1291 = load i8, i8 addrspace(5)* %1290, align 1, !tbaa !5, !range !21
  %1292 = shl nuw nsw i8 %1291, 1
  %1293 = or i8 %1289, %1292
  %1294 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 218
  %1295 = load i8, i8 addrspace(5)* %1294, align 2, !tbaa !5, !range !21
  %1296 = shl nuw nsw i8 %1295, 2
  %1297 = or i8 %1293, %1296
  %1298 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 219
  %1299 = load i8, i8 addrspace(5)* %1298, align 1, !tbaa !5, !range !21
  %1300 = shl nuw nsw i8 %1299, 3
  %1301 = or i8 %1297, %1300
  %1302 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 220
  %1303 = load i8, i8 addrspace(5)* %1302, align 4, !tbaa !5, !range !21
  %1304 = shl nuw nsw i8 %1303, 4
  %1305 = or i8 %1301, %1304
  %1306 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 221
  %1307 = load i8, i8 addrspace(5)* %1306, align 1, !tbaa !5, !range !21
  %1308 = shl nuw nsw i8 %1307, 5
  %1309 = or i8 %1305, %1308
  %1310 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 222
  %1311 = load i8, i8 addrspace(5)* %1310, align 2, !tbaa !5, !range !21
  %1312 = shl nuw nsw i8 %1311, 6
  %1313 = add nuw nsw i8 %1309, %1312
  %1314 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 223
  %1315 = load i8, i8 addrspace(5)* %1314, align 1, !tbaa !5, !range !21
  %1316 = shl nuw i8 %1315, 7
  %1317 = add nuw i8 %1313, %1316
  %1318 = add nuw nsw i32 %398, 27
  %1319 = sext i32 %1318 to i64
  %1320 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1319
  store i8 %1317, i8 addrspace(1)* %1320, align 1, !tbaa !22
  %1321 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 224
  %1322 = load i8, i8 addrspace(5)* %1321, align 16, !tbaa !5, !range !21
  %1323 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 225
  %1324 = load i8, i8 addrspace(5)* %1323, align 1, !tbaa !5, !range !21
  %1325 = shl nuw nsw i8 %1324, 1
  %1326 = or i8 %1322, %1325
  %1327 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 226
  %1328 = load i8, i8 addrspace(5)* %1327, align 2, !tbaa !5, !range !21
  %1329 = shl nuw nsw i8 %1328, 2
  %1330 = or i8 %1326, %1329
  %1331 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 227
  %1332 = load i8, i8 addrspace(5)* %1331, align 1, !tbaa !5, !range !21
  %1333 = shl nuw nsw i8 %1332, 3
  %1334 = or i8 %1330, %1333
  %1335 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 228
  %1336 = load i8, i8 addrspace(5)* %1335, align 4, !tbaa !5, !range !21
  %1337 = shl nuw nsw i8 %1336, 4
  %1338 = or i8 %1334, %1337
  %1339 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 229
  %1340 = load i8, i8 addrspace(5)* %1339, align 1, !tbaa !5, !range !21
  %1341 = shl nuw nsw i8 %1340, 5
  %1342 = or i8 %1338, %1341
  %1343 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 230
  %1344 = load i8, i8 addrspace(5)* %1343, align 2, !tbaa !5, !range !21
  %1345 = shl nuw nsw i8 %1344, 6
  %1346 = add nuw nsw i8 %1342, %1345
  %1347 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 231
  %1348 = load i8, i8 addrspace(5)* %1347, align 1, !tbaa !5, !range !21
  %1349 = shl nuw i8 %1348, 7
  %1350 = add nuw i8 %1346, %1349
  %1351 = add nuw nsw i32 %398, 28
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1352
  store i8 %1350, i8 addrspace(1)* %1353, align 1, !tbaa !22
  %1354 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 232
  %1355 = load i8, i8 addrspace(5)* %1354, align 8, !tbaa !5, !range !21
  %1356 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 233
  %1357 = load i8, i8 addrspace(5)* %1356, align 1, !tbaa !5, !range !21
  %1358 = shl nuw nsw i8 %1357, 1
  %1359 = or i8 %1355, %1358
  %1360 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 234
  %1361 = load i8, i8 addrspace(5)* %1360, align 2, !tbaa !5, !range !21
  %1362 = shl nuw nsw i8 %1361, 2
  %1363 = or i8 %1359, %1362
  %1364 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 235
  %1365 = load i8, i8 addrspace(5)* %1364, align 1, !tbaa !5, !range !21
  %1366 = shl nuw nsw i8 %1365, 3
  %1367 = or i8 %1363, %1366
  %1368 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 236
  %1369 = load i8, i8 addrspace(5)* %1368, align 4, !tbaa !5, !range !21
  %1370 = shl nuw nsw i8 %1369, 4
  %1371 = or i8 %1367, %1370
  %1372 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 237
  %1373 = load i8, i8 addrspace(5)* %1372, align 1, !tbaa !5, !range !21
  %1374 = shl nuw nsw i8 %1373, 5
  %1375 = or i8 %1371, %1374
  %1376 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 238
  %1377 = load i8, i8 addrspace(5)* %1376, align 2, !tbaa !5, !range !21
  %1378 = shl nuw nsw i8 %1377, 6
  %1379 = add nuw nsw i8 %1375, %1378
  %1380 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 239
  %1381 = load i8, i8 addrspace(5)* %1380, align 1, !tbaa !5, !range !21
  %1382 = shl nuw i8 %1381, 7
  %1383 = add nuw i8 %1379, %1382
  %1384 = add nuw nsw i32 %398, 29
  %1385 = sext i32 %1384 to i64
  %1386 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1385
  store i8 %1383, i8 addrspace(1)* %1386, align 1, !tbaa !22
  %1387 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 240
  %1388 = load i8, i8 addrspace(5)* %1387, align 16, !tbaa !5, !range !21
  %1389 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 241
  %1390 = load i8, i8 addrspace(5)* %1389, align 1, !tbaa !5, !range !21
  %1391 = shl nuw nsw i8 %1390, 1
  %1392 = or i8 %1388, %1391
  %1393 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 242
  %1394 = load i8, i8 addrspace(5)* %1393, align 2, !tbaa !5, !range !21
  %1395 = shl nuw nsw i8 %1394, 2
  %1396 = or i8 %1392, %1395
  %1397 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 243
  %1398 = load i8, i8 addrspace(5)* %1397, align 1, !tbaa !5, !range !21
  %1399 = shl nuw nsw i8 %1398, 3
  %1400 = or i8 %1396, %1399
  %1401 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 244
  %1402 = load i8, i8 addrspace(5)* %1401, align 4, !tbaa !5, !range !21
  %1403 = shl nuw nsw i8 %1402, 4
  %1404 = or i8 %1400, %1403
  %1405 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 245
  %1406 = load i8, i8 addrspace(5)* %1405, align 1, !tbaa !5, !range !21
  %1407 = shl nuw nsw i8 %1406, 5
  %1408 = or i8 %1404, %1407
  %1409 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 246
  %1410 = load i8, i8 addrspace(5)* %1409, align 2, !tbaa !5, !range !21
  %1411 = shl nuw nsw i8 %1410, 6
  %1412 = add nuw nsw i8 %1408, %1411
  %1413 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 247
  %1414 = load i8, i8 addrspace(5)* %1413, align 1, !tbaa !5, !range !21
  %1415 = shl nuw i8 %1414, 7
  %1416 = add nuw i8 %1412, %1415
  %1417 = add nuw nsw i32 %398, 30
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1418
  store i8 %1416, i8 addrspace(1)* %1419, align 1, !tbaa !22
  %1420 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 248
  %1421 = load i8, i8 addrspace(5)* %1420, align 8, !tbaa !5, !range !21
  %1422 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 249
  %1423 = load i8, i8 addrspace(5)* %1422, align 1, !tbaa !5, !range !21
  %1424 = shl nuw nsw i8 %1423, 1
  %1425 = or i8 %1421, %1424
  %1426 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 250
  %1427 = load i8, i8 addrspace(5)* %1426, align 2, !tbaa !5, !range !21
  %1428 = shl nuw nsw i8 %1427, 2
  %1429 = or i8 %1425, %1428
  %1430 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 251
  %1431 = load i8, i8 addrspace(5)* %1430, align 1, !tbaa !5, !range !21
  %1432 = shl nuw nsw i8 %1431, 3
  %1433 = or i8 %1429, %1432
  %1434 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 252
  %1435 = load i8, i8 addrspace(5)* %1434, align 4, !tbaa !5, !range !21
  %1436 = shl nuw nsw i8 %1435, 4
  %1437 = or i8 %1433, %1436
  %1438 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 253
  %1439 = load i8, i8 addrspace(5)* %1438, align 1, !tbaa !5, !range !21
  %1440 = shl nuw nsw i8 %1439, 5
  %1441 = or i8 %1437, %1440
  %1442 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 254
  %1443 = load i8, i8 addrspace(5)* %1442, align 2, !tbaa !5, !range !21
  %1444 = shl nuw nsw i8 %1443, 6
  %1445 = add nuw nsw i8 %1441, %1444
  %1446 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 255
  %1447 = load i8, i8 addrspace(5)* %1446, align 1, !tbaa !5, !range !21
  %1448 = shl nuw i8 %1447, 7
  %1449 = add nuw i8 %1445, %1448
  %1450 = add nuw nsw i32 %398, 31
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %1451
  store i8 %1449, i8 addrspace(1)* %1452, align 1, !tbaa !22
  call void @llvm.lifetime.end.p5i8(i64 256, i8 addrspace(5)* %396) #5
  br label %1560

1453:                                             ; preds = %1453, %395
  %1454 = phi i32 [ 0, %395 ], [ %1558, %1453 ]
  %1455 = add nsw i32 %1454, %274
  %1456 = srem i32 %1455, 64
  %1457 = trunc i32 %1456 to i8
  %1458 = add nsw i8 %1457, 8
  %1459 = srem i8 %1458, 64
  %1460 = sext i8 %1459 to i32
  %1461 = add nsw i8 %1457, 24
  %1462 = srem i8 %1461, 64
  %1463 = sext i8 %1462 to i32
  %1464 = add nsw i8 %1457, 36
  %1465 = srem i8 %1464, 64
  %1466 = sext i8 %1465 to i32
  %1467 = sitofp i32 %1456 to float
  %1468 = fmul contract float %1467, 4.000000e+00
  %1469 = fmul contract float %1468, 2.500000e-01
  %1470 = fadd contract float %1469, 4.000000e+00
  %1471 = srem i8 %1457, 4
  %1472 = sub nsw i8 3, %1471
  %1473 = sitofp i8 %1472 to float
  %1474 = fadd contract float %1470, %1473
  %1475 = fptosi float %1474 to i32
  %1476 = srem i32 %1475, 64
  %1477 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1456
  %1478 = load float, float addrspace(5)* %1477, align 8, !tbaa !13
  %1479 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1460
  %1480 = load float, float addrspace(5)* %1479, align 4, !tbaa !13
  %1481 = fcmp contract olt float %1478, %1480
  %1482 = shl nuw nsw i32 %1454, 2
  %1483 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1482
  %1484 = zext i1 %1481 to i8
  store i8 %1484, i8 addrspace(5)* %1483, align 8, !tbaa !5
  %1485 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1463
  %1486 = load float, float addrspace(5)* %1485, align 4, !tbaa !13
  %1487 = fcmp contract olt float %1478, %1486
  %1488 = zext i1 %1487 to i8
  %1489 = shl nuw nsw i32 %1454, 2
  %1490 = add nuw nsw i32 %1489, 1
  %1491 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1490
  store i8 %1488, i8 addrspace(5)* %1491, align 1, !tbaa !5
  %1492 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1466
  %1493 = load float, float addrspace(5)* %1492, align 4, !tbaa !13
  %1494 = fcmp contract olt float %1478, %1493
  %1495 = zext i1 %1494 to i8
  %1496 = shl nuw nsw i32 %1454, 2
  %1497 = add nuw nsw i32 %1496, 2
  %1498 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1497
  store i8 %1495, i8 addrspace(5)* %1498, align 2, !tbaa !5
  %1499 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1476
  %1500 = load float, float addrspace(5)* %1499, align 4, !tbaa !13
  %1501 = fcmp contract olt float %1478, %1500
  %1502 = zext i1 %1501 to i8
  %1503 = shl nuw nsw i32 %1454, 2
  %1504 = add nuw nsw i32 %1503, 3
  %1505 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1504
  store i8 %1502, i8 addrspace(5)* %1505, align 1, !tbaa !5
  %1506 = or i32 %1454, 1
  %1507 = add nsw i32 %1506, %274
  %1508 = srem i32 %1507, 64
  %1509 = trunc i32 %1508 to i8
  %1510 = add nsw i8 %1509, 8
  %1511 = srem i8 %1510, 64
  %1512 = sext i8 %1511 to i32
  %1513 = add nsw i8 %1509, 24
  %1514 = srem i8 %1513, 64
  %1515 = sext i8 %1514 to i32
  %1516 = add nsw i8 %1509, 36
  %1517 = srem i8 %1516, 64
  %1518 = sext i8 %1517 to i32
  %1519 = sitofp i32 %1508 to float
  %1520 = fmul contract float %1519, 4.000000e+00
  %1521 = fmul contract float %1520, 2.500000e-01
  %1522 = fadd contract float %1521, 4.000000e+00
  %1523 = srem i8 %1509, 4
  %1524 = sub nsw i8 3, %1523
  %1525 = sitofp i8 %1524 to float
  %1526 = fadd contract float %1522, %1525
  %1527 = fptosi float %1526 to i32
  %1528 = srem i32 %1527, 64
  %1529 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1508
  %1530 = load float, float addrspace(5)* %1529, align 4, !tbaa !13
  %1531 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1512
  %1532 = load float, float addrspace(5)* %1531, align 4, !tbaa !13
  %1533 = fcmp contract olt float %1530, %1532
  %1534 = shl nuw nsw i32 %1506, 2
  %1535 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1534
  %1536 = zext i1 %1533 to i8
  store i8 %1536, i8 addrspace(5)* %1535, align 4, !tbaa !5
  %1537 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1515
  %1538 = load float, float addrspace(5)* %1537, align 4, !tbaa !13
  %1539 = fcmp contract olt float %1530, %1538
  %1540 = zext i1 %1539 to i8
  %1541 = shl nuw nsw i32 %1506, 2
  %1542 = add nuw nsw i32 %1541, 1
  %1543 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1542
  store i8 %1540, i8 addrspace(5)* %1543, align 1, !tbaa !5
  %1544 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1518
  %1545 = load float, float addrspace(5)* %1544, align 4, !tbaa !13
  %1546 = fcmp contract olt float %1530, %1545
  %1547 = zext i1 %1546 to i8
  %1548 = shl nuw nsw i32 %1506, 2
  %1549 = add nuw nsw i32 %1548, 2
  %1550 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1549
  store i8 %1547, i8 addrspace(5)* %1550, align 2, !tbaa !5
  %1551 = getelementptr inbounds [64 x float], [64 x float] addrspace(5)* %11, i32 0, i32 %1528
  %1552 = load float, float addrspace(5)* %1551, align 4, !tbaa !13
  %1553 = fcmp contract olt float %1530, %1552
  %1554 = zext i1 %1553 to i8
  %1555 = shl nuw nsw i32 %1506, 2
  %1556 = add nuw nsw i32 %1555, 3
  %1557 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(5)* %15, i32 0, i32 %1556
  store i8 %1554, i8 addrspace(5)* %1557, align 1, !tbaa !5
  %1558 = add nuw nsw i32 %1454, 2
  %1559 = icmp eq i32 %1558, 64
  br i1 %1559, label %397, label %1453, !llvm.loop !23

1560:                                             ; preds = %397, %273
  call void @llvm.lifetime.end.p5i8(i64 256, i8 addrspace(5)* %27) #5
  call void @llvm.lifetime.end.p5i8(i64 256, i8 addrspace(5)* %26) #5
  call void @llvm.lifetime.end.p5i8(i64 256, i8 addrspace(5)* %25) #5
  call void @llvm.lifetime.end.p5i8(i64 256, i8 addrspace(5)* %24) #5
  br label %1561

1561:                                             ; preds = %1560, %10
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.floor.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.exp2.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.ldexp.f32(float, i32) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #3

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.struct.buffer.load.format.f32(<4 x i32>, i32, i32, i32, i32 immarg) #4

attributes #0 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #1 = { mustprogress norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nounwind readonly willreturn }
attributes #5 = { nounwind }
attributes #6 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !6, i64 0}
!6 = !{!"bool", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{}
!12 = !{i32 0, i32 33}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !7, i64 0}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!18, !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C/C++ TBAA"}
!20 = distinct !{!20, !16}
!21 = !{i8 0, i8 2}
!22 = !{!7, !7, i64 0}
!23 = distinct !{!23, !16}
