digraph "CFG for '_Z19calcDenseForwardGPUPfS_S_S_iiiiiii' function" {
	label="CFG for '_Z19calcDenseForwardGPUPfS_S_S_iiiiiii' function";

	Node0x4e43960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !4\l  %18 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !13, !invariant.load\l... !14\l  %21 = zext i16 %20 to i32\l  %22 = udiv i32 %17, %21\l  %23 = mul i32 %22, %21\l  %24 = icmp ugt i32 %17, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %13\l  %28 = add i32 %27, %12\l  %29 = mul i32 %28, %21\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %31 = add i32 %29, %30\l  %32 = mul nsw i32 %8, %4\l  %33 = mul nsw i32 %32, %9\l  %34 = mul nsw i32 %33, %10\l  %35 = icmp slt i32 %31, %34\l  br i1 %35, label %36, label %200\l|{<s0>T|<s1>F}}"];
	Node0x4e43960:s0 -> Node0x4e45360;
	Node0x4e43960:s1 -> Node0x4e470a0;
	Node0x4e45360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%36:\l36:                                               \l  %37 = freeze i32 %31\l  %38 = freeze i32 %8\l  %39 = sdiv i32 %37, %38\l  %40 = mul i32 %39, %38\l  %41 = sub i32 %37, %40\l  %42 = mul nsw i32 %6, %5\l  %43 = mul nsw i32 %42, %7\l  %44 = icmp sgt i32 %7, 0\l  br i1 %44, label %45, label %61\l|{<s0>T|<s1>F}}"];
	Node0x4e45360:s0 -> Node0x4e47620;
	Node0x4e45360:s1 -> Node0x4e47670;
	Node0x4e47620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%45:\l45:                                               \l  %46 = sdiv i32 %39, %9\l  %47 = sdiv i32 %46, %10\l  %48 = icmp sgt i32 %6, 0\l  %49 = icmp sgt i32 %5, 0\l  %50 = mul nsw i32 %41, %43\l  %51 = mul nsw i32 %47, %43\l  %52 = and i32 %5, 7\l  %53 = icmp ult i32 %5, 8\l  %54 = and i32 %5, -8\l  %55 = icmp eq i32 %52, 0\l  br label %56\l}"];
	Node0x4e47620 -> Node0x4e47db0;
	Node0x4e47db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%56:\l56:                                               \l  %57 = phi float [ 0.000000e+00, %45 ], [ %78, %77 ]\l  %58 = phi i32 [ 0, %45 ], [ %79, %77 ]\l  br i1 %48, label %59, label %77\l|{<s0>T|<s1>F}}"];
	Node0x4e47db0:s0 -> Node0x4e48b50;
	Node0x4e47db0:s1 -> Node0x4e488f0;
	Node0x4e48b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%59:\l59:                                               \l  %60 = mul nsw i32 %58, %42\l  br label %69\l}"];
	Node0x4e48b50 -> Node0x4e48d20;
	Node0x4e47670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%61:\l61:                                               \l  %62 = phi float [ 0.000000e+00, %36 ], [ %78, %77 ]\l  %63 = sext i32 %41 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %3, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %66 = fadd contract float %62, %65\l  %67 = sext i32 %31 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  store float %66, float addrspace(1)* %68, align 4, !tbaa !16\l  br label %200\l}"];
	Node0x4e47670 -> Node0x4e470a0;
	Node0x4e48d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%69:\l69:                                               \l  %70 = phi float [ %57, %59 ], [ %103, %102 ]\l  %71 = phi i32 [ 0, %59 ], [ %104, %102 ]\l  br i1 %49, label %72, label %102\l|{<s0>T|<s1>F}}"];
	Node0x4e48d20:s0 -> Node0x4e4a4e0;
	Node0x4e48d20:s1 -> Node0x4e4a2b0;
	Node0x4e4a4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%72:\l72:                                               \l  %73 = mul nsw i32 %71, %5\l  %74 = add i32 %73, %60\l  %75 = add i32 %74, %50\l  %76 = add i32 %74, %51\l  br i1 %53, label %81, label %106\l|{<s0>T|<s1>F}}"];
	Node0x4e4a4e0:s0 -> Node0x4e4a860;
	Node0x4e4a4e0:s1 -> Node0x4e4a8b0;
	Node0x4e488f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%77:\l77:                                               \l  %78 = phi float [ %57, %56 ], [ %103, %102 ]\l  %79 = add nuw nsw i32 %58, 1\l  %80 = icmp eq i32 %79, %7\l  br i1 %80, label %61, label %56, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4e488f0:s0 -> Node0x4e47670;
	Node0x4e488f0:s1 -> Node0x4e47db0;
	Node0x4e4a860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%81:\l81:                                               \l  %82 = phi float [ undef, %72 ], [ %196, %106 ]\l  %83 = phi float [ %70, %72 ], [ %196, %106 ]\l  %84 = phi i32 [ 0, %72 ], [ %197, %106 ]\l  br i1 %55, label %102, label %85\l|{<s0>T|<s1>F}}"];
	Node0x4e4a860:s0 -> Node0x4e4a2b0;
	Node0x4e4a860:s1 -> Node0x4e4b380;
	Node0x4e4b380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%85:\l85:                                               \l  %86 = phi float [ %98, %85 ], [ %83, %81 ]\l  %87 = phi i32 [ %99, %85 ], [ %84, %81 ]\l  %88 = phi i32 [ %100, %85 ], [ 0, %81 ]\l  %89 = add i32 %75, %87\l  %90 = add i32 %76, %87\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %94 = sext i32 %89 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %2, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %97 = fmul contract float %93, %96\l  %98 = fadd contract float %86, %97\l  %99 = add nuw nsw i32 %87, 1\l  %100 = add i32 %88, 1\l  %101 = icmp eq i32 %100, %52\l  br i1 %101, label %102, label %85, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4e4b380:s0 -> Node0x4e4a2b0;
	Node0x4e4b380:s1 -> Node0x4e4b380;
	Node0x4e4a2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%102:\l102:                                              \l  %103 = phi float [ %70, %69 ], [ %82, %81 ], [ %98, %85 ]\l  %104 = add nuw nsw i32 %71, 1\l  %105 = icmp eq i32 %104, %6\l  br i1 %105, label %77, label %69, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4e4a2b0:s0 -> Node0x4e488f0;
	Node0x4e4a2b0:s1 -> Node0x4e48d20;
	Node0x4e4a8b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%106:\l106:                                              \l  %107 = phi float [ %196, %106 ], [ %70, %72 ]\l  %108 = phi i32 [ %197, %106 ], [ 0, %72 ]\l  %109 = phi i32 [ %198, %106 ], [ 0, %72 ]\l  %110 = add i32 %75, %108\l  %111 = add i32 %76, %108\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %115 = sext i32 %110 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %2, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %118 = fmul contract float %114, %117\l  %119 = fadd contract float %107, %118\l  %120 = or i32 %108, 1\l  %121 = add i32 %75, %120\l  %122 = add i32 %76, %120\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %126 = sext i32 %121 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %2, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %129 = fmul contract float %125, %128\l  %130 = fadd contract float %119, %129\l  %131 = or i32 %108, 2\l  %132 = add i32 %75, %131\l  %133 = add i32 %76, %131\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %0, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %137 = sext i32 %132 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %2, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %140 = fmul contract float %136, %139\l  %141 = fadd contract float %130, %140\l  %142 = or i32 %108, 3\l  %143 = add i32 %75, %142\l  %144 = add i32 %76, %142\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %148 = sext i32 %143 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %2, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %151 = fmul contract float %147, %150\l  %152 = fadd contract float %141, %151\l  %153 = or i32 %108, 4\l  %154 = add i32 %75, %153\l  %155 = add i32 %76, %153\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %159 = sext i32 %154 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %2, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %162 = fmul contract float %158, %161\l  %163 = fadd contract float %152, %162\l  %164 = or i32 %108, 5\l  %165 = add i32 %75, %164\l  %166 = add i32 %76, %164\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %0, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %170 = sext i32 %165 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %2, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %173 = fmul contract float %169, %172\l  %174 = fadd contract float %163, %173\l  %175 = or i32 %108, 6\l  %176 = add i32 %75, %175\l  %177 = add i32 %76, %175\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds float, float addrspace(1)* %0, i64 %178\l  %180 = load float, float addrspace(1)* %179, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %181 = sext i32 %176 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %2, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %184 = fmul contract float %180, %183\l  %185 = fadd contract float %174, %184\l  %186 = or i32 %108, 7\l  %187 = add i32 %75, %186\l  %188 = add i32 %76, %186\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %0, i64 %189\l  %191 = load float, float addrspace(1)* %190, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %192 = sext i32 %187 to i64\l  %193 = getelementptr inbounds float, float addrspace(1)* %2, i64 %192\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %195 = fmul contract float %191, %194\l  %196 = fadd contract float %185, %195\l  %197 = add nuw nsw i32 %108, 8\l  %198 = add i32 %109, 8\l  %199 = icmp eq i32 %198, %54\l  br i1 %199, label %81, label %106, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x4e4a8b0:s0 -> Node0x4e4a860;
	Node0x4e4a8b0:s1 -> Node0x4e4a8b0;
	Node0x4e470a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%200:\l200:                                              \l  ret void\l}"];
}
