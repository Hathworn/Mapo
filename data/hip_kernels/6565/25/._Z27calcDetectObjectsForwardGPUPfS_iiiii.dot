digraph "CFG for '_Z27calcDetectObjectsForwardGPUPfS_iiiii' function" {
	label="CFG for '_Z27calcDetectObjectsForwardGPUPfS_iiiii' function";

	Node0x5e09ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !4\l  %12 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !13, !invariant.load\l... !14\l  %15 = zext i16 %14 to i32\l  %16 = udiv i32 %11, %15\l  %17 = icmp sgt i32 %5, 0\l  br i1 %17, label %18, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5e09ad0:s0 -> Node0x5e0b7a0;
	Node0x5e09ad0:s1 -> Node0x5e0b830;
	Node0x5e0b7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%18:\l18:                                               \l  %19 = mul i32 %16, %15\l  %20 = icmp ugt i32 %11, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %16, %21\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %24 = mul i32 %22, %23\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %26 = add i32 %24, %25\l  %27 = mul i32 %26, %15\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = mul nsw i32 %3, %2\l  %31 = mul nsw i32 %30, %4\l  %32 = mul nsw i32 %31, %29\l  %33 = icmp sgt i32 %6, 0\l  %34 = add nsw i32 %6, 4\l  %35 = and i32 %6, 1\l  %36 = icmp eq i32 %6, 1\l  %37 = and i32 %6, -2\l  %38 = icmp eq i32 %35, 0\l  br label %40\l}"];
	Node0x5e0b7a0 -> Node0x5e0cb90;
	Node0x5e0b830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%39:\l39:                                               \l  ret void\l}"];
	Node0x5e0cb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%40:\l40:                                               \l  %41 = phi i32 [ 0, %18 ], [ %152, %151 ]\l  %42 = add nsw i32 %41, %32\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !16\l  %46 = fneg contract float %45\l  %47 = fmul float %45, 0xBFF7154760000000\l  %48 = tail call float @llvm.rint.f32(float %47)\l  %49 = fcmp olt float %45, 0xC0562E4300000000\l  %50 = fcmp ogt float %45, 0x4059D1DA00000000\l  %51 = fneg float %47\l  %52 = tail call float @llvm.fma.f32(float %46, float 0x3FF7154760000000,\l... float %51)\l  %53 = tail call float @llvm.fma.f32(float %46, float 0x3E54AE0BE0000000,\l... float %52)\l  %54 = fsub float %47, %48\l  %55 = fadd float %53, %54\l  %56 = tail call float @llvm.exp2.f32(float %55)\l  %57 = fptosi float %48 to i32\l  %58 = tail call float @llvm.amdgcn.ldexp.f32(float %56, i32 %57)\l  %59 = fadd contract float %58, 1.000000e+00\l  %60 = fdiv contract float 1.000000e+00, %59\l  %61 = select i1 %50, float 1.000000e+00, float %60\l  %62 = select i1 %49, float 0.000000e+00, float %61\l  %63 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  store float %62, float addrspace(1)* %63, align 4, !tbaa !16\l  %64 = add nsw i32 %42, 1\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16\l  %68 = fneg contract float %67\l  %69 = fmul float %67, 0xBFF7154760000000\l  %70 = tail call float @llvm.rint.f32(float %69)\l  %71 = fcmp olt float %67, 0xC0562E4300000000\l  %72 = fcmp ogt float %67, 0x4059D1DA00000000\l  %73 = fneg float %69\l  %74 = tail call float @llvm.fma.f32(float %68, float 0x3FF7154760000000,\l... float %73)\l  %75 = tail call float @llvm.fma.f32(float %68, float 0x3E54AE0BE0000000,\l... float %74)\l  %76 = fsub float %69, %70\l  %77 = fadd float %75, %76\l  %78 = tail call float @llvm.exp2.f32(float %77)\l  %79 = fptosi float %70 to i32\l  %80 = tail call float @llvm.amdgcn.ldexp.f32(float %78, i32 %79)\l  %81 = fadd contract float %80, 1.000000e+00\l  %82 = fdiv contract float 1.000000e+00, %81\l  %83 = select i1 %72, float 1.000000e+00, float %82\l  %84 = select i1 %71, float 0.000000e+00, float %83\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %65\l  store float %84, float addrspace(1)* %85, align 4, !tbaa !16\l  %86 = add nsw i32 %42, 2\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16\l  %90 = fmul float %89, 0x3FF7154760000000\l  %91 = tail call float @llvm.rint.f32(float %90)\l  %92 = fcmp ogt float %89, 0x40562E4300000000\l  %93 = fcmp olt float %89, 0xC059D1DA00000000\l  %94 = fneg float %90\l  %95 = tail call float @llvm.fma.f32(float %89, float 0x3FF7154760000000,\l... float %94)\l  %96 = tail call float @llvm.fma.f32(float %89, float 0x3E54AE0BE0000000,\l... float %95)\l  %97 = fsub float %90, %91\l  %98 = fadd float %96, %97\l  %99 = tail call float @llvm.exp2.f32(float %98)\l  %100 = fptosi float %91 to i32\l  %101 = tail call float @llvm.amdgcn.ldexp.f32(float %99, i32 %100)\l  %102 = select i1 %93, float 0.000000e+00, float %101\l  %103 = select i1 %92, float 0x7FF0000000000000, float %102\l  %104 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  store float %103, float addrspace(1)* %104, align 4, !tbaa !16\l  %105 = add nsw i32 %42, 3\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16\l  %109 = fmul float %108, 0x3FF7154760000000\l  %110 = tail call float @llvm.rint.f32(float %109)\l  %111 = fcmp ogt float %108, 0x40562E4300000000\l  %112 = fcmp olt float %108, 0xC059D1DA00000000\l  %113 = fneg float %109\l  %114 = tail call float @llvm.fma.f32(float %108, float 0x3FF7154760000000,\l... float %113)\l  %115 = tail call float @llvm.fma.f32(float %108, float 0x3E54AE0BE0000000,\l... float %114)\l  %116 = fsub float %109, %110\l  %117 = fadd float %115, %116\l  %118 = tail call float @llvm.exp2.f32(float %117)\l  %119 = fptosi float %110 to i32\l  %120 = tail call float @llvm.amdgcn.ldexp.f32(float %118, i32 %119)\l  %121 = select i1 %112, float 0.000000e+00, float %120\l  %122 = select i1 %111, float 0x7FF0000000000000, float %121\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %106\l  store float %122, float addrspace(1)* %123, align 4, !tbaa !16\l  br i1 %33, label %124, label %151\l|{<s0>T|<s1>F}}"];
	Node0x5e0cb90:s0 -> Node0x5e12360;
	Node0x5e0cb90:s1 -> Node0x5e0cd10;
	Node0x5e12360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%124:\l124:                                              \l  %125 = add nsw i32 %42, 4\l  br i1 %36, label %126, label %154\l|{<s0>T|<s1>F}}"];
	Node0x5e12360:s0 -> Node0x5e124f0;
	Node0x5e12360:s1 -> Node0x5e12540;
	Node0x5e124f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%126:\l126:                                              \l  %127 = phi i32 [ 0, %124 ], [ %202, %154 ]\l  br i1 %38, label %151, label %128\l|{<s0>T|<s1>F}}"];
	Node0x5e124f0:s0 -> Node0x5e0cd10;
	Node0x5e124f0:s1 -> Node0x5e12730;
	Node0x5e12730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%128:\l128:                                              \l  %129 = add nsw i32 %125, %127\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !16\l  %133 = fneg contract float %132\l  %134 = fmul float %132, 0xBFF7154760000000\l  %135 = tail call float @llvm.rint.f32(float %134)\l  %136 = fcmp olt float %132, 0xC0562E4300000000\l  %137 = fcmp ogt float %132, 0x4059D1DA00000000\l  %138 = fneg float %134\l  %139 = tail call float @llvm.fma.f32(float %133, float 0x3FF7154760000000,\l... float %138)\l  %140 = tail call float @llvm.fma.f32(float %133, float 0x3E54AE0BE0000000,\l... float %139)\l  %141 = fsub float %134, %135\l  %142 = fadd float %140, %141\l  %143 = tail call float @llvm.exp2.f32(float %142)\l  %144 = fptosi float %135 to i32\l  %145 = tail call float @llvm.amdgcn.ldexp.f32(float %143, i32 %144)\l  %146 = fadd contract float %145, 1.000000e+00\l  %147 = fdiv contract float 1.000000e+00, %146\l  %148 = select i1 %137, float 1.000000e+00, float %147\l  %149 = select i1 %136, float 0.000000e+00, float %148\l  %150 = getelementptr inbounds float, float addrspace(1)* %1, i64 %130\l  store float %149, float addrspace(1)* %150, align 4, !tbaa !16\l  br label %151\l}"];
	Node0x5e12730 -> Node0x5e0cd10;
	Node0x5e0cd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%151:\l151:                                              \l  %152 = add nsw i32 %34, %41\l  %153 = icmp slt i32 %152, %5\l  br i1 %153, label %40, label %39, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5e0cd10:s0 -> Node0x5e0cb90;
	Node0x5e0cd10:s1 -> Node0x5e0b830;
	Node0x5e12540 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%154:\l154:                                              \l  %155 = phi i32 [ %202, %154 ], [ 0, %124 ]\l  %156 = phi i32 [ %203, %154 ], [ 0, %124 ]\l  %157 = add nsw i32 %125, %155\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %0, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !16\l  %161 = fneg contract float %160\l  %162 = fmul float %160, 0xBFF7154760000000\l  %163 = tail call float @llvm.rint.f32(float %162)\l  %164 = fcmp olt float %160, 0xC0562E4300000000\l  %165 = fcmp ogt float %160, 0x4059D1DA00000000\l  %166 = fneg float %162\l  %167 = tail call float @llvm.fma.f32(float %161, float 0x3FF7154760000000,\l... float %166)\l  %168 = tail call float @llvm.fma.f32(float %161, float 0x3E54AE0BE0000000,\l... float %167)\l  %169 = fsub float %162, %163\l  %170 = fadd float %168, %169\l  %171 = tail call float @llvm.exp2.f32(float %170)\l  %172 = fptosi float %163 to i32\l  %173 = tail call float @llvm.amdgcn.ldexp.f32(float %171, i32 %172)\l  %174 = fadd contract float %173, 1.000000e+00\l  %175 = fdiv contract float 1.000000e+00, %174\l  %176 = select i1 %165, float 1.000000e+00, float %175\l  %177 = select i1 %164, float 0.000000e+00, float %176\l  %178 = getelementptr inbounds float, float addrspace(1)* %1, i64 %158\l  store float %177, float addrspace(1)* %178, align 4, !tbaa !16\l  %179 = or i32 %155, 1\l  %180 = add nsw i32 %125, %179\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %0, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !16\l  %184 = fneg contract float %183\l  %185 = fmul float %183, 0xBFF7154760000000\l  %186 = tail call float @llvm.rint.f32(float %185)\l  %187 = fcmp olt float %183, 0xC0562E4300000000\l  %188 = fcmp ogt float %183, 0x4059D1DA00000000\l  %189 = fneg float %185\l  %190 = tail call float @llvm.fma.f32(float %184, float 0x3FF7154760000000,\l... float %189)\l  %191 = tail call float @llvm.fma.f32(float %184, float 0x3E54AE0BE0000000,\l... float %190)\l  %192 = fsub float %185, %186\l  %193 = fadd float %191, %192\l  %194 = tail call float @llvm.exp2.f32(float %193)\l  %195 = fptosi float %186 to i32\l  %196 = tail call float @llvm.amdgcn.ldexp.f32(float %194, i32 %195)\l  %197 = fadd contract float %196, 1.000000e+00\l  %198 = fdiv contract float 1.000000e+00, %197\l  %199 = select i1 %188, float 1.000000e+00, float %198\l  %200 = select i1 %187, float 0.000000e+00, float %199\l  %201 = getelementptr inbounds float, float addrspace(1)* %1, i64 %181\l  store float %200, float addrspace(1)* %201, align 4, !tbaa !16\l  %202 = add nuw nsw i32 %155, 2\l  %203 = add i32 %156, 2\l  %204 = icmp eq i32 %203, %37\l  br i1 %204, label %126, label %154, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5e12540:s0 -> Node0x5e124f0;
	Node0x5e12540:s1 -> Node0x5e12540;
}
