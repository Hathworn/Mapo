digraph "CFG for '_Z21calcMaxPoolForwardGPUPfS_iiiiiiiii' function" {
	label="CFG for '_Z21calcMaxPoolForwardGPUPfS_iiiiiiiii' function";

	Node0x4d25ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !4\l  %18 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !13, !invariant.load\l... !14\l  %21 = zext i16 %20 to i32\l  %22 = udiv i32 %17, %21\l  %23 = mul i32 %22, %21\l  %24 = icmp ugt i32 %17, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %13\l  %28 = add i32 %27, %12\l  %29 = mul i32 %28, %21\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %31 = add i32 %29, %30\l  %32 = mul nsw i32 %6, %5\l  %33 = mul nsw i32 %32, %7\l  %34 = mul nsw i32 %33, %8\l  %35 = icmp slt i32 %31, %34\l  br i1 %35, label %36, label %155\l|{<s0>T|<s1>F}}"];
	Node0x4d25ea0:s0 -> Node0x4d278a0;
	Node0x4d25ea0:s1 -> Node0x4d295e0;
	Node0x4d278a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%36:\l36:                                               \l  %37 = freeze i32 %31\l  %38 = freeze i32 %6\l  %39 = sdiv i32 %37, %38\l  %40 = mul i32 %39, %38\l  %41 = sub i32 %37, %40\l  %42 = freeze i32 %7\l  %43 = sdiv i32 %39, %42\l  %44 = mul i32 %43, %42\l  %45 = sub i32 %39, %44\l  %46 = mul nsw i32 %41, %9\l  %47 = mul nsw i32 %45, %9\l  %48 = icmp sgt i32 %10, 0\l  br i1 %48, label %49, label %68\l|{<s0>T|<s1>F}}"];
	Node0x4d278a0:s0 -> Node0x4d29d80;
	Node0x4d278a0:s1 -> Node0x4d29dd0;
	Node0x4d29d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%49:\l49:                                               \l  %50 = freeze i32 %8\l  %51 = sdiv i32 %43, %50\l  %52 = mul i32 %51, %50\l  %53 = sub i32 %43, %52\l  %54 = mul i32 %51, %4\l  %55 = add i32 %54, %53\l  %56 = mul i32 %55, %3\l  %57 = and i32 %10, 7\l  %58 = icmp ult i32 %10, 8\l  %59 = and i32 %10, -8\l  %60 = icmp eq i32 %57, 0\l  br label %61\l}"];
	Node0x4d29d80 -> Node0x4d2a580;
	Node0x4d2a580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%61:\l61:                                               \l  %62 = phi float [ -1.000000e+06, %49 ], [ %90, %89 ]\l  %63 = phi i32 [ 0, %49 ], [ %91, %89 ]\l  %64 = add i32 %63, %47\l  %65 = add i32 %64, %56\l  %66 = mul i32 %65, %2\l  %67 = add i32 %66, %46\l  br i1 %58, label %72, label %93\l|{<s0>T|<s1>F}}"];
	Node0x4d2a580:s0 -> Node0x4d29420;
	Node0x4d2a580:s1 -> Node0x4d2b800;
	Node0x4d29dd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%68:\l68:                                               \l  %69 = phi float [ -1.000000e+06, %36 ], [ %90, %89 ]\l  %70 = sext i32 %31 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  store float %69, float addrspace(1)* %71, align 4, !tbaa !16\l  br label %155\l}"];
	Node0x4d29dd0 -> Node0x4d295e0;
	Node0x4d29420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%72:\l72:                                               \l  %73 = phi float [ undef, %61 ], [ %151, %93 ]\l  %74 = phi float [ %62, %61 ], [ %151, %93 ]\l  %75 = phi i32 [ 0, %61 ], [ %152, %93 ]\l  br i1 %60, label %89, label %76\l|{<s0>T|<s1>F}}"];
	Node0x4d29420:s0 -> Node0x4d2b0c0;
	Node0x4d29420:s1 -> Node0x4d2c3c0;
	Node0x4d2c3c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi float [ %85, %76 ], [ %74, %72 ]\l  %78 = phi i32 [ %86, %76 ], [ %75, %72 ]\l  %79 = phi i32 [ %87, %76 ], [ 0, %72 ]\l  %80 = add i32 %67, %78\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %84 = fcmp contract ogt float %83, %77\l  %85 = select i1 %84, float %83, float %77\l  %86 = add nuw nsw i32 %78, 1\l  %87 = add i32 %79, 1\l  %88 = icmp eq i32 %87, %57\l  br i1 %88, label %89, label %76, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4d2c3c0:s0 -> Node0x4d2b0c0;
	Node0x4d2c3c0:s1 -> Node0x4d2c3c0;
	Node0x4d2b0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%89:\l89:                                               \l  %90 = phi float [ %73, %72 ], [ %85, %76 ]\l  %91 = add nuw nsw i32 %63, 1\l  %92 = icmp eq i32 %91, %10\l  br i1 %92, label %68, label %61, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4d2b0c0:s0 -> Node0x4d29dd0;
	Node0x4d2b0c0:s1 -> Node0x4d2a580;
	Node0x4d2b800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%93:\l93:                                               \l  %94 = phi float [ %151, %93 ], [ %62, %61 ]\l  %95 = phi i32 [ %152, %93 ], [ 0, %61 ]\l  %96 = phi i32 [ %153, %93 ], [ 0, %61 ]\l  %97 = add i32 %67, %95\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %101 = fcmp contract ogt float %100, %94\l  %102 = select i1 %101, float %100, float %94\l  %103 = or i32 %95, 1\l  %104 = add i32 %67, %103\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %108 = fcmp contract ogt float %107, %102\l  %109 = select i1 %108, float %107, float %102\l  %110 = or i32 %95, 2\l  %111 = add i32 %67, %110\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %115 = fcmp contract ogt float %114, %109\l  %116 = select i1 %115, float %114, float %109\l  %117 = or i32 %95, 3\l  %118 = add i32 %67, %117\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %122 = fcmp contract ogt float %121, %116\l  %123 = select i1 %122, float %121, float %116\l  %124 = or i32 %95, 4\l  %125 = add i32 %67, %124\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %129 = fcmp contract ogt float %128, %123\l  %130 = select i1 %129, float %128, float %123\l  %131 = or i32 %95, 5\l  %132 = add i32 %67, %131\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %0, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %136 = fcmp contract ogt float %135, %130\l  %137 = select i1 %136, float %135, float %130\l  %138 = or i32 %95, 6\l  %139 = add i32 %67, %138\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %143 = fcmp contract ogt float %142, %137\l  %144 = select i1 %143, float %142, float %137\l  %145 = or i32 %95, 7\l  %146 = add i32 %67, %145\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %0, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %150 = fcmp contract ogt float %149, %144\l  %151 = select i1 %150, float %149, float %144\l  %152 = add nuw nsw i32 %95, 8\l  %153 = add i32 %96, 8\l  %154 = icmp eq i32 %153, %59\l  br i1 %154, label %72, label %93, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4d2b800:s0 -> Node0x4d29420;
	Node0x4d2b800:s1 -> Node0x4d2b800;
	Node0x4d295e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%155:\l155:                                              \l  ret void\l}"];
}
