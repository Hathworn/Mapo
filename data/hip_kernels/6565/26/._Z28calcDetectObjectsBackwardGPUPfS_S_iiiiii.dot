digraph "CFG for '_Z28calcDetectObjectsBackwardGPUPfS_S_iiiiii' function" {
	label="CFG for '_Z28calcDetectObjectsBackwardGPUPfS_S_iiiiii' function";

	Node0x4e316d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%9:\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !4\l  %14 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !13, !invariant.load\l... !14\l  %17 = zext i16 %16 to i32\l  %18 = udiv i32 %13, %17\l  %19 = icmp sgt i32 %7, 0\l  br i1 %19, label %20, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4e316d0:s0 -> Node0x4e33ec0;
	Node0x4e316d0:s1 -> Node0x4e33f50;
	Node0x4e33ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%20:\l20:                                               \l  %21 = mul i32 %18, %17\l  %22 = icmp ugt i32 %13, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %18, %23\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %26 = mul i32 %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %28 = add i32 %26, %27\l  %29 = mul i32 %28, %17\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %31 = add i32 %29, %30\l  %32 = mul nsw i32 %5, %4\l  %33 = mul nsw i32 %32, %6\l  %34 = mul nsw i32 %33, %31\l  %35 = icmp sgt i32 %8, 0\l  %36 = add nsw i32 %8, 4\l  %37 = and i32 %8, 1\l  %38 = icmp eq i32 %8, 1\l  %39 = and i32 %8, -2\l  %40 = icmp eq i32 %37, 0\l  br label %42\l}"];
	Node0x4e33ec0 -> Node0x4e352b0;
	Node0x4e33f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%41:\l41:                                               \l  ret void\l}"];
	Node0x4e352b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%42:\l42:                                               \l  %43 = phi i32 [ 0, %20 ], [ %175, %174 ]\l  %44 = add nsw i32 %43, %34\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %2, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16\l  %48 = fneg contract float %47\l  %49 = fmul float %47, 0xBFF7154760000000\l  %50 = tail call float @llvm.rint.f32(float %49)\l  %51 = fcmp olt float %47, 0xC0562E4300000000\l  %52 = fcmp ogt float %47, 0x4059D1DA00000000\l  %53 = fneg float %49\l  %54 = tail call float @llvm.fma.f32(float %48, float 0x3FF7154760000000,\l... float %53)\l  %55 = tail call float @llvm.fma.f32(float %48, float 0x3E54AE0BE0000000,\l... float %54)\l  %56 = fsub float %49, %50\l  %57 = fadd float %55, %56\l  %58 = tail call float @llvm.exp2.f32(float %57)\l  %59 = fptosi float %50 to i32\l  %60 = tail call float @llvm.amdgcn.ldexp.f32(float %58, i32 %59)\l  %61 = fadd contract float %60, 1.000000e+00\l  %62 = fdiv contract float 1.000000e+00, %61\l  %63 = select i1 %52, float 1.000000e+00, float %62\l  %64 = select i1 %51, float 0.000000e+00, float %63\l  %65 = fsub contract float 1.000000e+00, %64\l  %66 = fmul contract float %64, %65\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !16\l  %69 = fmul contract float %68, %66\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  store float %69, float addrspace(1)* %70, align 4, !tbaa !16\l  %71 = add nsw i32 %44, 1\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %2, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16\l  %75 = fneg contract float %74\l  %76 = fmul float %74, 0xBFF7154760000000\l  %77 = tail call float @llvm.rint.f32(float %76)\l  %78 = fcmp olt float %74, 0xC0562E4300000000\l  %79 = fcmp ogt float %74, 0x4059D1DA00000000\l  %80 = fneg float %76\l  %81 = tail call float @llvm.fma.f32(float %75, float 0x3FF7154760000000,\l... float %80)\l  %82 = tail call float @llvm.fma.f32(float %75, float 0x3E54AE0BE0000000,\l... float %81)\l  %83 = fsub float %76, %77\l  %84 = fadd float %82, %83\l  %85 = tail call float @llvm.exp2.f32(float %84)\l  %86 = fptosi float %77 to i32\l  %87 = tail call float @llvm.amdgcn.ldexp.f32(float %85, i32 %86)\l  %88 = fadd contract float %87, 1.000000e+00\l  %89 = fdiv contract float 1.000000e+00, %88\l  %90 = select i1 %79, float 1.000000e+00, float %89\l  %91 = select i1 %78, float 0.000000e+00, float %90\l  %92 = fsub contract float 1.000000e+00, %91\l  %93 = fmul contract float %91, %92\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16\l  %96 = fmul contract float %95, %93\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  store float %96, float addrspace(1)* %97, align 4, !tbaa !16\l  %98 = add nsw i32 %44, 2\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %2, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16\l  %102 = fmul float %101, 0x3FF7154760000000\l  %103 = tail call float @llvm.rint.f32(float %102)\l  %104 = fcmp ogt float %101, 0x40562E4300000000\l  %105 = fcmp olt float %101, 0xC059D1DA00000000\l  %106 = fneg float %102\l  %107 = tail call float @llvm.fma.f32(float %101, float 0x3FF7154760000000,\l... float %106)\l  %108 = tail call float @llvm.fma.f32(float %101, float 0x3E54AE0BE0000000,\l... float %107)\l  %109 = fsub float %102, %103\l  %110 = fadd float %108, %109\l  %111 = tail call float @llvm.exp2.f32(float %110)\l  %112 = fptosi float %103 to i32\l  %113 = tail call float @llvm.amdgcn.ldexp.f32(float %111, i32 %112)\l  %114 = select i1 %105, float 0.000000e+00, float %113\l  %115 = select i1 %104, float 0x7FF0000000000000, float %114\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16\l  %118 = fmul contract float %117, %115\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  store float %118, float addrspace(1)* %119, align 4, !tbaa !16\l  %120 = add nsw i32 %44, 3\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %2, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16\l  %124 = fmul float %123, 0x3FF7154760000000\l  %125 = tail call float @llvm.rint.f32(float %124)\l  %126 = fcmp ogt float %123, 0x40562E4300000000\l  %127 = fcmp olt float %123, 0xC059D1DA00000000\l  %128 = fneg float %124\l  %129 = tail call float @llvm.fma.f32(float %123, float 0x3FF7154760000000,\l... float %128)\l  %130 = tail call float @llvm.fma.f32(float %123, float 0x3E54AE0BE0000000,\l... float %129)\l  %131 = fsub float %124, %125\l  %132 = fadd float %130, %131\l  %133 = tail call float @llvm.exp2.f32(float %132)\l  %134 = fptosi float %125 to i32\l  %135 = tail call float @llvm.amdgcn.ldexp.f32(float %133, i32 %134)\l  %136 = select i1 %127, float 0.000000e+00, float %135\l  %137 = select i1 %126, float 0x7FF0000000000000, float %136\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = fmul contract float %139, %137\l  %141 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  store float %140, float addrspace(1)* %141, align 4, !tbaa !16\l  br i1 %35, label %142, label %174\l|{<s0>T|<s1>F}}"];
	Node0x4e352b0:s0 -> Node0x4e3b750;
	Node0x4e352b0:s1 -> Node0x4e35430;
	Node0x4e3b750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%142:\l142:                                              \l  %143 = add nsw i32 %44, 4\l  br i1 %38, label %144, label %177\l|{<s0>T|<s1>F}}"];
	Node0x4e3b750:s0 -> Node0x4e3b8e0;
	Node0x4e3b750:s1 -> Node0x4e3b930;
	Node0x4e3b8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%144:\l144:                                              \l  %145 = phi i32 [ 0, %142 ], [ %235, %177 ]\l  br i1 %40, label %174, label %146\l|{<s0>T|<s1>F}}"];
	Node0x4e3b8e0:s0 -> Node0x4e35430;
	Node0x4e3b8e0:s1 -> Node0x4e3bb20;
	Node0x4e3bb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%146:\l146:                                              \l  %147 = add nsw i32 %143, %145\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %2, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16\l  %151 = fneg contract float %150\l  %152 = fmul float %150, 0xBFF7154760000000\l  %153 = tail call float @llvm.rint.f32(float %152)\l  %154 = fcmp olt float %150, 0xC0562E4300000000\l  %155 = fcmp ogt float %150, 0x4059D1DA00000000\l  %156 = fneg float %152\l  %157 = tail call float @llvm.fma.f32(float %151, float 0x3FF7154760000000,\l... float %156)\l  %158 = tail call float @llvm.fma.f32(float %151, float 0x3E54AE0BE0000000,\l... float %157)\l  %159 = fsub float %152, %153\l  %160 = fadd float %158, %159\l  %161 = tail call float @llvm.exp2.f32(float %160)\l  %162 = fptosi float %153 to i32\l  %163 = tail call float @llvm.amdgcn.ldexp.f32(float %161, i32 %162)\l  %164 = fadd contract float %163, 1.000000e+00\l  %165 = fdiv contract float 1.000000e+00, %164\l  %166 = select i1 %155, float 1.000000e+00, float %165\l  %167 = select i1 %154, float 0.000000e+00, float %166\l  %168 = fsub contract float 1.000000e+00, %167\l  %169 = fmul contract float %167, %168\l  %170 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !16\l  %172 = fmul contract float %171, %169\l  %173 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  store float %172, float addrspace(1)* %173, align 4, !tbaa !16\l  br label %174\l}"];
	Node0x4e3bb20 -> Node0x4e35430;
	Node0x4e35430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%174:\l174:                                              \l  %175 = add nsw i32 %36, %43\l  %176 = icmp slt i32 %175, %7\l  br i1 %176, label %42, label %41, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4e35430:s0 -> Node0x4e352b0;
	Node0x4e35430:s1 -> Node0x4e33f50;
	Node0x4e3b930 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%177:\l177:                                              \l  %178 = phi i32 [ %235, %177 ], [ 0, %142 ]\l  %179 = phi i32 [ %236, %177 ], [ 0, %142 ]\l  %180 = add nsw i32 %143, %178\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %2, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !16\l  %184 = fneg contract float %183\l  %185 = fmul float %183, 0xBFF7154760000000\l  %186 = tail call float @llvm.rint.f32(float %185)\l  %187 = fcmp olt float %183, 0xC0562E4300000000\l  %188 = fcmp ogt float %183, 0x4059D1DA00000000\l  %189 = fneg float %185\l  %190 = tail call float @llvm.fma.f32(float %184, float 0x3FF7154760000000,\l... float %189)\l  %191 = tail call float @llvm.fma.f32(float %184, float 0x3E54AE0BE0000000,\l... float %190)\l  %192 = fsub float %185, %186\l  %193 = fadd float %191, %192\l  %194 = tail call float @llvm.exp2.f32(float %193)\l  %195 = fptosi float %186 to i32\l  %196 = tail call float @llvm.amdgcn.ldexp.f32(float %194, i32 %195)\l  %197 = fadd contract float %196, 1.000000e+00\l  %198 = fdiv contract float 1.000000e+00, %197\l  %199 = select i1 %188, float 1.000000e+00, float %198\l  %200 = select i1 %187, float 0.000000e+00, float %199\l  %201 = fsub contract float 1.000000e+00, %200\l  %202 = fmul contract float %200, %201\l  %203 = getelementptr inbounds float, float addrspace(1)* %0, i64 %181\l  %204 = load float, float addrspace(1)* %203, align 4, !tbaa !16\l  %205 = fmul contract float %204, %202\l  %206 = getelementptr inbounds float, float addrspace(1)* %1, i64 %181\l  store float %205, float addrspace(1)* %206, align 4, !tbaa !16\l  %207 = or i32 %178, 1\l  %208 = add nsw i32 %143, %207\l  %209 = sext i32 %208 to i64\l  %210 = getelementptr inbounds float, float addrspace(1)* %2, i64 %209\l  %211 = load float, float addrspace(1)* %210, align 4, !tbaa !16\l  %212 = fneg contract float %211\l  %213 = fmul float %211, 0xBFF7154760000000\l  %214 = tail call float @llvm.rint.f32(float %213)\l  %215 = fcmp olt float %211, 0xC0562E4300000000\l  %216 = fcmp ogt float %211, 0x4059D1DA00000000\l  %217 = fneg float %213\l  %218 = tail call float @llvm.fma.f32(float %212, float 0x3FF7154760000000,\l... float %217)\l  %219 = tail call float @llvm.fma.f32(float %212, float 0x3E54AE0BE0000000,\l... float %218)\l  %220 = fsub float %213, %214\l  %221 = fadd float %219, %220\l  %222 = tail call float @llvm.exp2.f32(float %221)\l  %223 = fptosi float %214 to i32\l  %224 = tail call float @llvm.amdgcn.ldexp.f32(float %222, i32 %223)\l  %225 = fadd contract float %224, 1.000000e+00\l  %226 = fdiv contract float 1.000000e+00, %225\l  %227 = select i1 %216, float 1.000000e+00, float %226\l  %228 = select i1 %215, float 0.000000e+00, float %227\l  %229 = fsub contract float 1.000000e+00, %228\l  %230 = fmul contract float %228, %229\l  %231 = getelementptr inbounds float, float addrspace(1)* %0, i64 %209\l  %232 = load float, float addrspace(1)* %231, align 4, !tbaa !16\l  %233 = fmul contract float %232, %230\l  %234 = getelementptr inbounds float, float addrspace(1)* %1, i64 %209\l  store float %233, float addrspace(1)* %234, align 4, !tbaa !16\l  %235 = add nuw nsw i32 %178, 2\l  %236 = add i32 %179, 2\l  %237 = icmp eq i32 %236, %39\l  br i1 %237, label %144, label %177, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4e3b930:s0 -> Node0x4e3b8e0;
	Node0x4e3b930:s1 -> Node0x4e3b930;
}
