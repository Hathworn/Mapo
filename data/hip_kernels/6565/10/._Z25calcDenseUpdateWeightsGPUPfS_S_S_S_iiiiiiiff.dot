digraph "CFG for '_Z25calcDenseUpdateWeightsGPUPfS_S_S_S_iiiiiiiff' function" {
	label="CFG for '_Z25calcDenseUpdateWeightsGPUPfS_S_S_S_iiiiiiiff' function";

	Node0x50a60e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%14:\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %17, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !4\l  %21 = getelementptr i8, i8 addrspace(4)* %17, i64 4\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 4, !range !13, !invariant.load\l... !14\l  %24 = zext i16 %23 to i32\l  %25 = udiv i32 %20, %24\l  %26 = mul i32 %25, %24\l  %27 = icmp ugt i32 %20, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %16\l  %31 = add i32 %30, %15\l  %32 = mul i32 %31, %24\l  %33 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %34 = add i32 %32, %33\l  %35 = icmp slt i32 %34, %9\l  br i1 %35, label %36, label %240\l|{<s0>T|<s1>F}}"];
	Node0x50a60e0:s0 -> Node0x50a98d0;
	Node0x50a60e0:s1 -> Node0x50a9960;
	Node0x50a98d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%36:\l36:                                               \l  %37 = mul nsw i32 %7, %6\l  %38 = mul nsw i32 %37, %8\l  %39 = icmp sgt i32 %38, 0\l  br i1 %39, label %40, label %63\l|{<s0>T|<s1>F}}"];
	Node0x50a98d0:s0 -> Node0x50a9c50;
	Node0x50a98d0:s1 -> Node0x50a9ca0;
	Node0x50a9c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%40:\l40:                                               \l  %41 = and i32 %38, 7\l  %42 = icmp ult i32 %38, 8\l  br i1 %42, label %45, label %43\l|{<s0>T|<s1>F}}"];
	Node0x50a9c50:s0 -> Node0x50a9f60;
	Node0x50a9c50:s1 -> Node0x50a9fb0;
	Node0x50a9fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%43:\l43:                                               \l  %44 = and i32 %38, -8\l  br label %77\l}"];
	Node0x50a9fb0 -> Node0x50aa1b0;
	Node0x50a9f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%45:\l45:                                               \l  %46 = phi i32 [ 0, %40 ], [ %159, %77 ]\l  %47 = icmp eq i32 %41, 0\l  br i1 %47, label %63, label %48\l|{<s0>T|<s1>F}}"];
	Node0x50a9f60:s0 -> Node0x50a9ca0;
	Node0x50a9f60:s1 -> Node0x50aa3e0;
	Node0x50aa3e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  %49 = phi i32 [ %60, %48 ], [ %46, %45 ]\l  %50 = phi i32 [ %61, %48 ], [ 0, %45 ]\l  %51 = mul nsw i32 %49, %9\l  %52 = add nsw i32 %51, %34\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = getelementptr inbounds float, float addrspace(1)* %3, i64 %53\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !16\l  %58 = fmul contract float %57, %12\l  %59 = fsub contract float %55, %58\l  store float %59, float addrspace(1)* %54, align 4, !tbaa !16\l  %60 = add nuw nsw i32 %49, 1\l  %61 = add i32 %50, 1\l  %62 = icmp eq i32 %61, %41\l  br i1 %62, label %63, label %48, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x50aa3e0:s0 -> Node0x50a9ca0;
	Node0x50aa3e0:s1 -> Node0x50aa3e0;
	Node0x50a9ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%63:\l63:                                               \l  %64 = sext i32 %34 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16\l  %67 = getelementptr inbounds float, float addrspace(1)* %4, i64 %64\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !16\l  %69 = fmul contract float %68, %12\l  %70 = fsub contract float %66, %69\l  store float %70, float addrspace(1)* %65, align 4, !tbaa !16\l  %71 = icmp sgt i32 %5, 0\l  br i1 %71, label %72, label %240\l|{<s0>T|<s1>F}}"];
	Node0x50a9ca0:s0 -> Node0x50a61d0;
	Node0x50a9ca0:s1 -> Node0x50a9960;
	Node0x50a61d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%72:\l72:                                               \l  %73 = and i32 %5, 3\l  %74 = icmp ult i32 %5, 4\l  br i1 %74, label %219, label %75\l|{<s0>T|<s1>F}}"];
	Node0x50a61d0:s0 -> Node0x50ac020;
	Node0x50a61d0:s1 -> Node0x50ac070;
	Node0x50ac070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%75:\l75:                                               \l  %76 = and i32 %5, -4\l  br label %162\l}"];
	Node0x50ac070 -> Node0x50ac240;
	Node0x50aa1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%77:\l77:                                               \l  %78 = phi i32 [ 0, %43 ], [ %159, %77 ]\l  %79 = phi i32 [ 0, %43 ], [ %160, %77 ]\l  %80 = mul nsw i32 %78, %9\l  %81 = add nsw i32 %80, %34\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16\l  %85 = getelementptr inbounds float, float addrspace(1)* %3, i64 %82\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = fmul contract float %86, %12\l  %88 = fsub contract float %84, %87\l  store float %88, float addrspace(1)* %83, align 4, !tbaa !16\l  %89 = or i32 %78, 1\l  %90 = mul nsw i32 %89, %9\l  %91 = add nsw i32 %90, %34\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !16\l  %95 = getelementptr inbounds float, float addrspace(1)* %3, i64 %92\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16\l  %97 = fmul contract float %96, %12\l  %98 = fsub contract float %94, %97\l  store float %98, float addrspace(1)* %93, align 4, !tbaa !16\l  %99 = or i32 %78, 2\l  %100 = mul nsw i32 %99, %9\l  %101 = add nsw i32 %100, %34\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16\l  %105 = getelementptr inbounds float, float addrspace(1)* %3, i64 %102\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !16\l  %107 = fmul contract float %106, %12\l  %108 = fsub contract float %104, %107\l  store float %108, float addrspace(1)* %103, align 4, !tbaa !16\l  %109 = or i32 %78, 3\l  %110 = mul nsw i32 %109, %9\l  %111 = add nsw i32 %110, %34\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = getelementptr inbounds float, float addrspace(1)* %3, i64 %112\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !16\l  %117 = fmul contract float %116, %12\l  %118 = fsub contract float %114, %117\l  store float %118, float addrspace(1)* %113, align 4, !tbaa !16\l  %119 = or i32 %78, 4\l  %120 = mul nsw i32 %119, %9\l  %121 = add nsw i32 %120, %34\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %0, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !16\l  %125 = getelementptr inbounds float, float addrspace(1)* %3, i64 %122\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = fmul contract float %126, %12\l  %128 = fsub contract float %124, %127\l  store float %128, float addrspace(1)* %123, align 4, !tbaa !16\l  %129 = or i32 %78, 5\l  %130 = mul nsw i32 %129, %9\l  %131 = add nsw i32 %130, %34\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = getelementptr inbounds float, float addrspace(1)* %3, i64 %132\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16\l  %137 = fmul contract float %136, %12\l  %138 = fsub contract float %134, %137\l  store float %138, float addrspace(1)* %133, align 4, !tbaa !16\l  %139 = or i32 %78, 6\l  %140 = mul nsw i32 %139, %9\l  %141 = add nsw i32 %140, %34\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !16\l  %145 = getelementptr inbounds float, float addrspace(1)* %3, i64 %142\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16\l  %147 = fmul contract float %146, %12\l  %148 = fsub contract float %144, %147\l  store float %148, float addrspace(1)* %143, align 4, !tbaa !16\l  %149 = or i32 %78, 7\l  %150 = mul nsw i32 %149, %9\l  %151 = add nsw i32 %150, %34\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %0, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !16\l  %155 = getelementptr inbounds float, float addrspace(1)* %3, i64 %152\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !16\l  %157 = fmul contract float %156, %12\l  %158 = fsub contract float %154, %157\l  store float %158, float addrspace(1)* %153, align 4, !tbaa !16\l  %159 = add nuw nsw i32 %78, 8\l  %160 = add i32 %79, 8\l  %161 = icmp eq i32 %160, %44\l  br i1 %161, label %45, label %77, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x50aa1b0:s0 -> Node0x50a9f60;
	Node0x50aa1b0:s1 -> Node0x50aa1b0;
	Node0x50ac240 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%162:\l162:                                              \l  %163 = phi i32 [ 0, %75 ], [ %216, %162 ]\l  %164 = phi i32 [ 0, %75 ], [ %217, %162 ]\l  %165 = mul nsw i32 %163, %9\l  %166 = add nsw i32 %165, %34\l  %167 = shl nsw i32 %166, 1\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %2, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !16\l  %171 = add nuw nsw i32 %167, 1\l  %172 = sext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %2, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !16\l  %175 = fmul contract float %174, %13\l  %176 = fadd contract float %170, %175\l  store float %176, float addrspace(1)* %173, align 4, !tbaa !16\l  %177 = or i32 %163, 1\l  %178 = mul nsw i32 %177, %9\l  %179 = add nsw i32 %178, %34\l  %180 = shl nsw i32 %179, 1\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %2, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !16\l  %184 = add nuw nsw i32 %180, 1\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds float, float addrspace(1)* %2, i64 %185\l  %187 = load float, float addrspace(1)* %186, align 4, !tbaa !16\l  %188 = fmul contract float %187, %13\l  %189 = fadd contract float %183, %188\l  store float %189, float addrspace(1)* %186, align 4, !tbaa !16\l  %190 = or i32 %163, 2\l  %191 = mul nsw i32 %190, %9\l  %192 = add nsw i32 %191, %34\l  %193 = shl nsw i32 %192, 1\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %2, i64 %194\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !16\l  %197 = add nuw nsw i32 %193, 1\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %2, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !16\l  %201 = fmul contract float %200, %13\l  %202 = fadd contract float %196, %201\l  store float %202, float addrspace(1)* %199, align 4, !tbaa !16\l  %203 = or i32 %163, 3\l  %204 = mul nsw i32 %203, %9\l  %205 = add nsw i32 %204, %34\l  %206 = shl nsw i32 %205, 1\l  %207 = sext i32 %206 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %2, i64 %207\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !16\l  %210 = add nuw nsw i32 %206, 1\l  %211 = sext i32 %210 to i64\l  %212 = getelementptr inbounds float, float addrspace(1)* %2, i64 %211\l  %213 = load float, float addrspace(1)* %212, align 4, !tbaa !16\l  %214 = fmul contract float %213, %13\l  %215 = fadd contract float %209, %214\l  store float %215, float addrspace(1)* %212, align 4, !tbaa !16\l  %216 = add nuw nsw i32 %163, 4\l  %217 = add i32 %164, 4\l  %218 = icmp eq i32 %217, %76\l  br i1 %218, label %219, label %162, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x50ac240:s0 -> Node0x50ac020;
	Node0x50ac240:s1 -> Node0x50ac240;
	Node0x50ac020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%219:\l219:                                              \l  %220 = phi i32 [ 0, %72 ], [ %216, %162 ]\l  %221 = icmp eq i32 %73, 0\l  br i1 %221, label %240, label %222\l|{<s0>T|<s1>F}}"];
	Node0x50ac020:s0 -> Node0x50a9960;
	Node0x50ac020:s1 -> Node0x50a8140;
	Node0x50a8140 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%222:\l222:                                              \l  %223 = phi i32 [ %237, %222 ], [ %220, %219 ]\l  %224 = phi i32 [ %238, %222 ], [ 0, %219 ]\l  %225 = mul nsw i32 %223, %9\l  %226 = add nsw i32 %225, %34\l  %227 = shl nsw i32 %226, 1\l  %228 = sext i32 %227 to i64\l  %229 = getelementptr inbounds float, float addrspace(1)* %2, i64 %228\l  %230 = load float, float addrspace(1)* %229, align 4, !tbaa !16\l  %231 = add nuw nsw i32 %227, 1\l  %232 = sext i32 %231 to i64\l  %233 = getelementptr inbounds float, float addrspace(1)* %2, i64 %232\l  %234 = load float, float addrspace(1)* %233, align 4, !tbaa !16\l  %235 = fmul contract float %234, %13\l  %236 = fadd contract float %230, %235\l  store float %236, float addrspace(1)* %233, align 4, !tbaa !16\l  %237 = add nuw nsw i32 %223, 1\l  %238 = add i32 %224, 1\l  %239 = icmp eq i32 %238, %73\l  br i1 %239, label %240, label %222, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x50a8140:s0 -> Node0x50a9960;
	Node0x50a8140:s1 -> Node0x50a8140;
	Node0x50a9960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%240:\l240:                                              \l  ret void\l}"];
}
