digraph "CFG for '_Z25calcConvolutionForwardGPUPfS_S_iiiiiiiiii' function" {
	label="CFG for '_Z25calcConvolutionForwardGPUPfS_S_iiiiiiiiii' function";

	Node0x4632a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%13:\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %17 = getelementptr inbounds i8, i8 addrspace(4)* %16, i64 12\l  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*\l  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !4\l  %20 = getelementptr i8, i8 addrspace(4)* %16, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !13, !invariant.load\l... !14\l  %23 = zext i16 %22 to i32\l  %24 = udiv i32 %19, %23\l  %25 = mul i32 %24, %23\l  %26 = icmp ugt i32 %19, %25\l  %27 = zext i1 %26 to i32\l  %28 = add i32 %24, %27\l  %29 = mul i32 %28, %15\l  %30 = add i32 %29, %14\l  %31 = mul i32 %30, %23\l  %32 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %33 = add i32 %31, %32\l  %34 = mul nsw i32 %7, %6\l  %35 = mul nsw i32 %34, %8\l  %36 = mul nsw i32 %35, %9\l  %37 = icmp slt i32 %33, %36\l  br i1 %37, label %38, label %215\l|{<s0>T|<s1>F}}"];
	Node0x4632a10:s0 -> Node0x4633d10;
	Node0x4632a10:s1 -> Node0x46361a0;
	Node0x4633d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%38:\l38:                                               \l  %39 = freeze i32 %33\l  %40 = freeze i32 %7\l  %41 = sdiv i32 %39, %40\l  %42 = mul i32 %41, %40\l  %43 = sub i32 %39, %42\l  %44 = freeze i32 %8\l  %45 = sdiv i32 %41, %44\l  %46 = mul i32 %45, %44\l  %47 = sub i32 %41, %46\l  %48 = mul nsw i32 %43, %11\l  %49 = mul nsw i32 %47, %11\l  %50 = icmp sgt i32 %5, 0\l  br i1 %50, label %51, label %71\l|{<s0>T|<s1>F}}"];
	Node0x4633d10:s0 -> Node0x4636940;
	Node0x4633d10:s1 -> Node0x4636990;
	Node0x4636940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%51:\l51:                                               \l  %52 = freeze i32 %9\l  %53 = sdiv i32 %45, %52\l  %54 = mul i32 %53, %52\l  %55 = sub i32 %45, %54\l  %56 = icmp sgt i32 %10, 0\l  %57 = mul i32 %53, %5\l  %58 = mul nsw i32 %55, %12\l  %59 = and i32 %10, 7\l  %60 = icmp ult i32 %10, 8\l  %61 = and i32 %10, -8\l  %62 = icmp eq i32 %59, 0\l  br label %63\l}"];
	Node0x4636940 -> Node0x4637140;
	Node0x4637140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%63:\l63:                                               \l  %64 = phi float [ 0.000000e+00, %51 ], [ %84, %83 ]\l  %65 = phi i32 [ 0, %51 ], [ %85, %83 ]\l  br i1 %56, label %66, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4637140:s0 -> Node0x4635e30;
	Node0x4637140:s1 -> Node0x4637c80;
	Node0x4635e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%66:\l66:                                               \l  %67 = add i32 %65, %57\l  %68 = mul i32 %67, %4\l  %69 = add i32 %68, %49\l  %70 = mul i32 %65, %10\l  br label %75\l}"];
	Node0x4635e30 -> Node0x4635ec0;
	Node0x4636990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%71:\l71:                                               \l  %72 = phi float [ 0.000000e+00, %38 ], [ %84, %83 ]\l  %73 = sext i32 %33 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  store float %72, float addrspace(1)* %74, align 4, !tbaa !16\l  br label %215\l}"];
	Node0x4636990 -> Node0x46361a0;
	Node0x4635ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%75:\l75:                                               \l  %76 = phi float [ %64, %66 ], [ %110, %109 ]\l  %77 = phi i32 [ 0, %66 ], [ %111, %109 ]\l  %78 = add i32 %69, %77\l  %79 = mul i32 %78, %3\l  %80 = add i32 %77, %70\l  %81 = mul i32 %80, %10\l  %82 = add i32 %81, %58\l  br i1 %60, label %87, label %113\l|{<s0>T|<s1>F}}"];
	Node0x4635ec0:s0 -> Node0x4638e50;
	Node0x4635ec0:s1 -> Node0x4638ee0;
	Node0x4637c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%83:\l83:                                               \l  %84 = phi float [ %64, %63 ], [ %110, %109 ]\l  %85 = add nuw nsw i32 %65, 1\l  %86 = icmp eq i32 %85, %5\l  br i1 %86, label %71, label %63, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4637c80:s0 -> Node0x4636990;
	Node0x4637c80:s1 -> Node0x4637140;
	Node0x4638e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%87:\l87:                                               \l  %88 = phi float [ undef, %75 ], [ %211, %113 ]\l  %89 = phi float [ %76, %75 ], [ %211, %113 ]\l  %90 = phi i32 [ 0, %75 ], [ %212, %113 ]\l  br i1 %62, label %109, label %91\l|{<s0>T|<s1>F}}"];
	Node0x4638e50:s0 -> Node0x4638920;
	Node0x4638e50:s1 -> Node0x46399b0;
	Node0x46399b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%91:\l91:                                               \l  %92 = phi float [ %105, %91 ], [ %89, %87 ]\l  %93 = phi i32 [ %106, %91 ], [ %90, %87 ]\l  %94 = phi i32 [ %107, %91 ], [ 0, %87 ]\l  %95 = add i32 %93, %48\l  %96 = add i32 %95, %79\l  %97 = add i32 %82, %93\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %101 = sext i32 %96 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %104 = fmul contract float %100, %103\l  %105 = fadd contract float %92, %104\l  %106 = add nuw nsw i32 %93, 1\l  %107 = add i32 %94, 1\l  %108 = icmp eq i32 %107, %59\l  br i1 %108, label %109, label %91, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x46399b0:s0 -> Node0x4638920;
	Node0x46399b0:s1 -> Node0x46399b0;
	Node0x4638920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%109:\l109:                                              \l  %110 = phi float [ %88, %87 ], [ %105, %91 ]\l  %111 = add nuw nsw i32 %77, 1\l  %112 = icmp eq i32 %111, %10\l  br i1 %112, label %83, label %75, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4638920:s0 -> Node0x4637c80;
	Node0x4638920:s1 -> Node0x4635ec0;
	Node0x4638ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%113:\l113:                                              \l  %114 = phi float [ %211, %113 ], [ %76, %75 ]\l  %115 = phi i32 [ %212, %113 ], [ 0, %75 ]\l  %116 = phi i32 [ %213, %113 ], [ 0, %75 ]\l  %117 = add i32 %115, %48\l  %118 = add i32 %117, %79\l  %119 = add i32 %82, %115\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %123 = sext i32 %118 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %126 = fmul contract float %122, %125\l  %127 = fadd contract float %114, %126\l  %128 = or i32 %115, 1\l  %129 = add i32 %128, %48\l  %130 = add i32 %129, %79\l  %131 = add i32 %82, %128\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %2, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %135 = sext i32 %130 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %138 = fmul contract float %134, %137\l  %139 = fadd contract float %127, %138\l  %140 = or i32 %115, 2\l  %141 = add i32 %140, %48\l  %142 = add i32 %141, %79\l  %143 = add i32 %82, %140\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %2, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %147 = sext i32 %142 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %150 = fmul contract float %146, %149\l  %151 = fadd contract float %139, %150\l  %152 = or i32 %115, 3\l  %153 = add i32 %152, %48\l  %154 = add i32 %153, %79\l  %155 = add i32 %82, %152\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %2, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %159 = sext i32 %154 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %162 = fmul contract float %158, %161\l  %163 = fadd contract float %151, %162\l  %164 = or i32 %115, 4\l  %165 = add i32 %164, %48\l  %166 = add i32 %165, %79\l  %167 = add i32 %82, %164\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %2, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %171 = sext i32 %166 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %1, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %174 = fmul contract float %170, %173\l  %175 = fadd contract float %163, %174\l  %176 = or i32 %115, 5\l  %177 = add i32 %176, %48\l  %178 = add i32 %177, %79\l  %179 = add i32 %82, %176\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %2, i64 %180\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %183 = sext i32 %178 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %1, i64 %183\l  %185 = load float, float addrspace(1)* %184, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %186 = fmul contract float %182, %185\l  %187 = fadd contract float %175, %186\l  %188 = or i32 %115, 6\l  %189 = add i32 %188, %48\l  %190 = add i32 %189, %79\l  %191 = add i32 %82, %188\l  %192 = sext i32 %191 to i64\l  %193 = getelementptr inbounds float, float addrspace(1)* %2, i64 %192\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %195 = sext i32 %190 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %1, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %198 = fmul contract float %194, %197\l  %199 = fadd contract float %187, %198\l  %200 = or i32 %115, 7\l  %201 = add i32 %200, %48\l  %202 = add i32 %201, %79\l  %203 = add i32 %82, %200\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %2, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %207 = sext i32 %202 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %1, i64 %207\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %210 = fmul contract float %206, %209\l  %211 = fadd contract float %199, %210\l  %212 = add nuw nsw i32 %115, 8\l  %213 = add i32 %116, 8\l  %214 = icmp eq i32 %213, %61\l  br i1 %214, label %87, label %113, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x4638ee0:s0 -> Node0x4638e50;
	Node0x4638ee0:s1 -> Node0x4638ee0;
	Node0x46361a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%215:\l215:                                              \l  ret void\l}"];
}
