digraph "CFG for '_Z16rand_init_kerneliP25hiprandStatePhilox4_32_10i' function" {
	label="CFG for '_Z16rand_init_kerneliP25hiprandStatePhilox4_32_10i' function";

	Node0x4cf6f70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = add i32 %11, %4\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %181\l|{<s0>T|<s1>F}}"];
	Node0x4cf6f70:s0 -> Node0x4cf8e10;
	Node0x4cf6f70:s1 -> Node0x4cf8ea0;
	Node0x4cf8e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%14:\l14:                                               \l  %15 = sext i32 %12 to i64\l  %16 = ashr i32 %0, 31\l  %17 = ashr i32 %12, 31\l  %18 = insertelement \<4 x i32\> \<i32 0, i32 0, i32 poison, i32 poison\>, i32\l... %12, i64 2\l  %19 = insertelement \<4 x i32\> %18, i32 %17, i64 3\l  %20 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 0, i64 0) #2, !srcloc !7\l  %21 = extractvalue \{ i64, i64 \} %20, 0\l  %22 = lshr i64 %21, 32\l  %23 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %12, i64 0) #2, !srcloc !7\l  %24 = extractvalue \{ i64, i64 \} %23, 0\l  %25 = lshr i64 %24, 32\l  %26 = trunc i64 %24 to i32\l  %27 = trunc i64 %25 to i32\l  %28 = xor i32 %27, %0\l  %29 = xor i32 %12, %0\l  %30 = ashr i32 %29, 31\l  %31 = trunc i64 %22 to i32\l  %32 = xor i32 %30, %31\l  %33 = add i32 %0, -1640531527\l  %34 = add nsw i32 %16, -1150833019\l  %35 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %28, i64 0) #2, !srcloc !7\l  %36 = extractvalue \{ i64, i64 \} %35, 0\l  %37 = lshr i64 %36, 32\l  %38 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %32, i64 0) #2, !srcloc !7\l  %39 = extractvalue \{ i64, i64 \} %38, 0\l  %40 = lshr i64 %39, 32\l  %41 = trunc i64 %40 to i32\l  %42 = trunc i64 %39 to i32\l  %43 = xor i32 %33, %26\l  %44 = xor i32 %43, %41\l  %45 = xor i64 %37, %21\l  %46 = trunc i64 %45 to i32\l  %47 = xor i32 %34, %46\l  %48 = add i32 %0, 1013904242\l  %49 = add nsw i32 %16, 1993301258\l  %50 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %44, i64 0) #2, !srcloc !7\l  %51 = extractvalue \{ i64, i64 \} %50, 0\l  %52 = lshr i64 %51, 32\l  %53 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %47, i64 0) #2, !srcloc !7\l  %54 = extractvalue \{ i64, i64 \} %53, 0\l  %55 = lshr i64 %54, 32\l  %56 = trunc i64 %55 to i32\l  %57 = trunc i64 %54 to i32\l  %58 = xor i32 %48, %42\l  %59 = xor i32 %58, %56\l  %60 = xor i64 %52, %36\l  %61 = trunc i64 %60 to i32\l  %62 = xor i32 %49, %61\l  %63 = add i32 %0, -626627285\l  %64 = add nsw i32 %16, 842468239\l  %65 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %59, i64 0) #2, !srcloc !7\l  %66 = extractvalue \{ i64, i64 \} %65, 0\l  %67 = lshr i64 %66, 32\l  %68 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %62, i64 0) #2, !srcloc !7\l  %69 = extractvalue \{ i64, i64 \} %68, 0\l  %70 = lshr i64 %69, 32\l  %71 = trunc i64 %70 to i32\l  %72 = trunc i64 %69 to i32\l  %73 = xor i32 %63, %57\l  %74 = xor i32 %73, %71\l  %75 = xor i64 %67, %51\l  %76 = trunc i64 %75 to i32\l  %77 = xor i32 %64, %76\l  %78 = add i32 %0, 2027808484\l  %79 = add nsw i32 %16, -308364780\l  %80 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %74, i64 0) #2, !srcloc !7\l  %81 = extractvalue \{ i64, i64 \} %80, 0\l  %82 = lshr i64 %81, 32\l  %83 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %77, i64 0) #2, !srcloc !7\l  %84 = extractvalue \{ i64, i64 \} %83, 0\l  %85 = lshr i64 %84, 32\l  %86 = trunc i64 %85 to i32\l  %87 = trunc i64 %84 to i32\l  %88 = xor i32 %78, %72\l  %89 = xor i32 %88, %86\l  %90 = xor i64 %82, %66\l  %91 = trunc i64 %90 to i32\l  %92 = xor i32 %79, %91\l  %93 = add i32 %0, 387276957\l  %94 = add nsw i32 %16, -1459197799\l  %95 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %89, i64 0) #2, !srcloc !7\l  %96 = extractvalue \{ i64, i64 \} %95, 0\l  %97 = lshr i64 %96, 32\l  %98 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %92, i64 0) #2, !srcloc !7\l  %99 = extractvalue \{ i64, i64 \} %98, 0\l  %100 = lshr i64 %99, 32\l  %101 = trunc i64 %100 to i32\l  %102 = trunc i64 %99 to i32\l  %103 = xor i32 %93, %87\l  %104 = xor i32 %103, %101\l  %105 = xor i64 %97, %81\l  %106 = trunc i64 %105 to i32\l  %107 = xor i32 %94, %106\l  %108 = add i32 %0, -1253254570\l  %109 = add nsw i32 %16, 1684936478\l  %110 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %104, i64 0) #2, !srcloc !7\l  %111 = extractvalue \{ i64, i64 \} %110, 0\l  %112 = lshr i64 %111, 32\l  %113 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %107, i64 0) #2, !srcloc !7\l  %114 = extractvalue \{ i64, i64 \} %113, 0\l  %115 = lshr i64 %114, 32\l  %116 = trunc i64 %115 to i32\l  %117 = trunc i64 %114 to i32\l  %118 = xor i32 %108, %102\l  %119 = xor i32 %118, %116\l  %120 = xor i64 %112, %96\l  %121 = trunc i64 %120 to i32\l  %122 = xor i32 %109, %121\l  %123 = add i32 %0, 1401181199\l  %124 = add nsw i32 %16, 534103459\l  %125 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %119, i64 0) #2, !srcloc !7\l  %126 = extractvalue \{ i64, i64 \} %125, 0\l  %127 = lshr i64 %126, 32\l  %128 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %122, i64 0) #2, !srcloc !7\l  %129 = extractvalue \{ i64, i64 \} %128, 0\l  %130 = lshr i64 %129, 32\l  %131 = trunc i64 %130 to i32\l  %132 = trunc i64 %129 to i32\l  %133 = xor i32 %123, %117\l  %134 = xor i32 %133, %131\l  %135 = xor i64 %127, %111\l  %136 = trunc i64 %135 to i32\l  %137 = xor i32 %124, %136\l  %138 = add i32 %0, -239350328\l  %139 = add nsw i32 %16, -616729560\l  %140 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %134, i64 0) #2, !srcloc !7\l  %141 = extractvalue \{ i64, i64 \} %140, 0\l  %142 = lshr i64 %141, 32\l  %143 = trunc i64 %141 to i32\l  %144 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %137, i64 0) #2, !srcloc !7\l  %145 = extractvalue \{ i64, i64 \} %144, 0\l  %146 = lshr i64 %145, 32\l  %147 = trunc i64 %146 to i32\l  %148 = trunc i64 %145 to i32\l  %149 = xor i32 %138, %132\l  %150 = xor i32 %149, %147\l  %151 = xor i64 %142, %126\l  %152 = trunc i64 %151 to i32\l  %153 = xor i32 %139, %152\l  %154 = add i32 %0, -1879881855\l  %155 = add nsw i32 %16, -1767562579\l  %156 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %150, i64 0) #2, !srcloc !7\l  %157 = extractvalue \{ i64, i64 \} %156, 0\l  %158 = lshr i64 %157, 32\l  %159 = trunc i64 %158 to i32\l  %160 = trunc i64 %157 to i32\l  %161 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %153, i64 0) #2, !srcloc !7\l  %162 = extractvalue \{ i64, i64 \} %161, 0\l  %163 = lshr i64 %162, 32\l  %164 = trunc i64 %163 to i32\l  %165 = trunc i64 %162 to i32\l  %166 = xor i32 %154, %148\l  %167 = xor i32 %166, %164\l  %168 = xor i32 %155, %143\l  %169 = xor i32 %168, %159\l  %170 = insertelement \<4 x i32\> undef, i32 %167, i64 0\l  %171 = insertelement \<4 x i32\> %170, i32 %165, i64 1\l  %172 = insertelement \<4 x i32\> %171, i32 %169, i64 2\l  %173 = insertelement \<4 x i32\> %172, i32 %160, i64 3\l  %174 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 0, i32 0, i32 0, i32 0\l  store \<4 x i32\> %19, \<4 x i32\> addrspace(1)* %174, align 16\l  %175 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 1, i32 0, i32 0, i32 0\l  store \<4 x i32\> %173, \<4 x i32\> addrspace(1)* %175, align 16\l  %176 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 2, i32 0, i32 0, i32 0, i64 0\l  store i32 %0, i32 addrspace(1)* %176, align 16\l  %177 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 2, i32 0, i32 0, i32 0, i64 1\l  store i32 %16, i32 addrspace(1)* %177, align 4\l  %178 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 3\l  store i32 0, i32 addrspace(1)* %178, align 8\l  %179 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 4\l  store i32 0, i32 addrspace(1)* %179, align 4\l  %180 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %1, i64 %15, i32 0, i32 0,\l... i32 5\l  store i32 0, i32 addrspace(1)* %180, align 16\l  br label %181\l}"];
	Node0x4cf8e10 -> Node0x4cf8ea0;
	Node0x4cf8ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%181:\l181:                                              \l  ret void\l}"];
}
