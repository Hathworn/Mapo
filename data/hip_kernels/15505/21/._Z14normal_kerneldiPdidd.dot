digraph "CFG for '_Z14normal_kerneldiPdidd' function" {
	label="CFG for '_Z14normal_kerneldiPdidd' function";

	Node0x4d90e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = icmp eq i32 %6, 0\l  br i1 %7, label %8, label %260\l|{<s0>T|<s1>F}}"];
	Node0x4d90e60:s0 -> Node0x4d92260;
	Node0x4d90e60:s1 -> Node0x4d922b0;
	Node0x4d92260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%8:\l8:                                                \l  %9 = xor i32 %0, 746559103\l  %10 = icmp sgt i32 %0, -1\l  %11 = mul i32 %9, 1228688033\l  %12 = select i1 %10, i32 -1973591729, i32 -100066652\l  %13 = icmp eq i32 %2, 0\l  br i1 %13, label %260, label %14\l|{<s0>T|<s1>F}}"];
	Node0x4d92260:s0 -> Node0x4d922b0;
	Node0x4d92260:s1 -> Node0x4d8e8a0;
	Node0x4d8e8a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%14:\l14:                                               \l  %15 = add i32 %11, 6615241\l  %16 = add i32 %15, %12\l  %17 = add i32 %11, 5783321\l  %18 = xor i32 %12, 88675123\l  %19 = add nsw i32 %12, 521288629\l  %20 = xor i32 %11, 362436069\l  %21 = add i32 %11, 123456789\l  %22 = sext i32 %2 to i64\l  br label %23\l}"];
	Node0x4d8e8a0 -> Node0x4d92f10;
	Node0x4d92f10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i64 [ %258, %245 ], [ 0, %14 ]\l  %25 = phi i32 [ %253, %245 ], [ %16, %14 ]\l  %26 = phi i32 [ %252, %245 ], [ %17, %14 ]\l  %27 = phi i32 [ %251, %245 ], [ 0, %14 ]\l  %28 = phi i32 [ %250, %245 ], [ %18, %14 ]\l  %29 = phi double [ %249, %245 ], [ undef, %14 ]\l  %30 = phi i32 [ %248, %245 ], [ %21, %14 ]\l  %31 = phi i32 [ %247, %245 ], [ %20, %14 ]\l  %32 = phi i32 [ %246, %245 ], [ %19, %14 ]\l  %33 = icmp eq i32 %27, 0\l  br i1 %33, label %37, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4d92f10:s0 -> Node0x4d92af0;
	Node0x4d92f10:s1 -> Node0x4d940f0;
	Node0x4d940f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%34:\l34:                                               \l  %35 = fptrunc double %29 to float\l  %36 = fpext float %35 to double\l  br label %245\l}"];
	Node0x4d940f0 -> Node0x4d93000;
	Node0x4d92af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%37:\l37:                                               \l  %38 = lshr i32 %30, 2\l  %39 = xor i32 %38, %30\l  %40 = shl i32 %26, 4\l  %41 = shl i32 %39, 1\l  %42 = xor i32 %41, %40\l  %43 = xor i32 %42, %39\l  %44 = xor i32 %43, %26\l  %45 = add i32 %25, 362437\l  %46 = add i32 %45, %44\l  %47 = lshr i32 %31, 2\l  %48 = xor i32 %47, %31\l  %49 = shl i32 %44, 4\l  %50 = shl i32 %48, 1\l  %51 = xor i32 %50, %49\l  %52 = xor i32 %51, %48\l  %53 = xor i32 %52, %44\l  %54 = add i32 %25, 724874\l  %55 = add i32 %54, %53\l  %56 = lshr i32 %32, 2\l  %57 = xor i32 %56, %32\l  %58 = shl i32 %53, 4\l  %59 = shl i32 %57, 1\l  %60 = xor i32 %59, %58\l  %61 = xor i32 %60, %57\l  %62 = xor i32 %61, %53\l  %63 = add i32 %25, 1087311\l  %64 = add i32 %63, %62\l  %65 = lshr i32 %28, 2\l  %66 = xor i32 %65, %28\l  %67 = shl i32 %62, 4\l  %68 = shl i32 %66, 1\l  %69 = xor i32 %68, %67\l  %70 = xor i32 %69, %66\l  %71 = xor i32 %70, %62\l  %72 = add i32 %25, 1449748\l  %73 = add i32 %71, %72\l  %74 = zext i32 %46 to i64\l  %75 = zext i32 %55 to i64\l  %76 = shl nuw nsw i64 %75, 21\l  %77 = xor i64 %76, %74\l  %78 = uitofp i64 %77 to double\l  %79 = fmul contract double %78, 0x3CA0000000000000\l  %80 = fadd contract double %79, 0x3CA0000000000000\l  %81 = zext i32 %64 to i64\l  %82 = zext i32 %73 to i64\l  %83 = shl nuw nsw i64 %82, 21\l  %84 = xor i64 %83, %81\l  %85 = uitofp i64 %84 to double\l  %86 = fmul contract double %85, 0x3CB0000000000000\l  %87 = fadd contract double %86, 0x3CB0000000000000\l  %88 = tail call double @llvm.amdgcn.frexp.mant.f64(double %80)\l  %89 = fcmp olt double %88, 0x3FE5555555555555\l  %90 = zext i1 %89 to i32\l  %91 = tail call double @llvm.amdgcn.ldexp.f64(double %88, i32 %90)\l  %92 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %80)\l  %93 = sub nsw i32 %92, %90\l  %94 = fadd double %91, -1.000000e+00\l  %95 = fadd double %91, 1.000000e+00\l  %96 = fadd double %95, -1.000000e+00\l  %97 = fsub double %91, %96\l  %98 = tail call double @llvm.amdgcn.rcp.f64(double %95)\l  %99 = fneg double %95\l  %100 = tail call double @llvm.fma.f64(double %99, double %98, double\l... 1.000000e+00)\l  %101 = tail call double @llvm.fma.f64(double %100, double %98, double %98)\l  %102 = tail call double @llvm.fma.f64(double %99, double %101, double\l... 1.000000e+00)\l  %103 = tail call double @llvm.fma.f64(double %102, double %101, double %101)\l  %104 = fmul double %94, %103\l  %105 = fmul double %95, %104\l  %106 = fneg double %105\l  %107 = tail call double @llvm.fma.f64(double %104, double %95, double %106)\l  %108 = tail call double @llvm.fma.f64(double %104, double %97, double %107)\l  %109 = fadd double %105, %108\l  %110 = fsub double %109, %105\l  %111 = fsub double %108, %110\l  %112 = fsub double %94, %109\l  %113 = fsub double %94, %112\l  %114 = fsub double %113, %109\l  %115 = fsub double %114, %111\l  %116 = fadd double %112, %115\l  %117 = fmul double %103, %116\l  %118 = fadd double %104, %117\l  %119 = fsub double %118, %104\l  %120 = fsub double %117, %119\l  %121 = fmul double %118, %118\l  %122 = tail call double @llvm.fma.f64(double %121, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %123 = tail call double @llvm.fma.f64(double %121, double %122, double\l... 0x3FC7474DD7F4DF2E)\l  %124 = tail call double @llvm.fma.f64(double %121, double %123, double\l... 0x3FCC71C016291751)\l  %125 = tail call double @llvm.fma.f64(double %121, double %124, double\l... 0x3FD249249B27ACF1)\l  %126 = tail call double @llvm.fma.f64(double %121, double %125, double\l... 0x3FD99999998EF7B6)\l  %127 = tail call double @llvm.fma.f64(double %121, double %126, double\l... 0x3FE5555555555780)\l  %128 = tail call double @llvm.amdgcn.ldexp.f64(double %118, i32 1)\l  %129 = tail call double @llvm.amdgcn.ldexp.f64(double %120, i32 1)\l  %130 = fmul double %118, %121\l  %131 = fmul double %130, %127\l  %132 = fadd double %128, %131\l  %133 = fsub double %132, %128\l  %134 = fsub double %131, %133\l  %135 = fadd double %129, %134\l  %136 = fadd double %132, %135\l  %137 = fsub double %136, %132\l  %138 = fsub double %135, %137\l  %139 = sitofp i32 %93 to double\l  %140 = fmul double %139, 0x3FE62E42FEFA39EF\l  %141 = fneg double %140\l  %142 = tail call double @llvm.fma.f64(double %139, double\l... 0x3FE62E42FEFA39EF, double %141)\l  %143 = tail call double @llvm.fma.f64(double %139, double\l... 0x3C7ABC9E3B39803F, double %142)\l  %144 = fadd double %140, %143\l  %145 = fsub double %144, %140\l  %146 = fsub double %143, %145\l  %147 = fadd double %144, %136\l  %148 = fsub double %147, %144\l  %149 = fsub double %147, %148\l  %150 = fsub double %144, %149\l  %151 = fsub double %136, %148\l  %152 = fadd double %151, %150\l  %153 = fadd double %146, %138\l  %154 = fsub double %153, %146\l  %155 = fsub double %153, %154\l  %156 = fsub double %146, %155\l  %157 = fsub double %138, %154\l  %158 = fadd double %157, %156\l  %159 = fadd double %153, %152\l  %160 = fadd double %147, %159\l  %161 = fsub double %160, %147\l  %162 = fsub double %159, %161\l  %163 = fadd double %158, %162\l  %164 = fadd double %160, %163\l  %165 = fcmp oeq double %80, 0x7FF0000000000000\l  %166 = select i1 %165, double %80, double %164\l  %167 = fcmp oeq double %80, 0.000000e+00\l  %168 = fmul contract double %166, -2.000000e+00\l  %169 = select i1 %167, double 0x7FF0000000000000, double %168\l  %170 = fcmp olt double %169, 0x1000000000000000\l  %171 = select i1 %170, double 0x4FF0000000000000, double 1.000000e+00\l  %172 = fmul double %169, %171\l  %173 = tail call double @llvm.amdgcn.rsq.f64(double %172)\l  %174 = fmul double %172, %173\l  %175 = fmul double %173, 5.000000e-01\l  %176 = fneg double %175\l  %177 = tail call double @llvm.fma.f64(double %176, double %174, double\l... 5.000000e-01)\l  %178 = tail call double @llvm.fma.f64(double %175, double %177, double %175)\l  %179 = tail call double @llvm.fma.f64(double %174, double %177, double %174)\l  %180 = fneg double %179\l  %181 = tail call double @llvm.fma.f64(double %180, double %179, double %172)\l  %182 = tail call double @llvm.fma.f64(double %181, double %178, double %179)\l  %183 = fneg double %182\l  %184 = tail call double @llvm.fma.f64(double %183, double %182, double %172)\l  %185 = tail call double @llvm.fma.f64(double %184, double %178, double %182)\l  %186 = select i1 %170, double 0x37F0000000000000, double 1.000000e+00\l  %187 = fmul double %186, %185\l  %188 = fcmp oeq double %172, 0.000000e+00\l  %189 = fcmp oeq double %172, 0x7FF0000000000000\l  %190 = or i1 %188, %189\l  %191 = select i1 %190, double %172, double %187\l  %192 = fmul double %87, 5.000000e-01\l  %193 = tail call double @llvm.amdgcn.fract.f64(double %192)\l  %194 = tail call i1 @llvm.amdgcn.class.f64(double %192, i32 516)\l  %195 = fmul double %193, 2.000000e+00\l  %196 = select i1 %194, double 0.000000e+00, double %195\l  %197 = fcmp ogt double %87, 1.000000e+00\l  %198 = select i1 %197, double %196, double %87\l  %199 = fmul double %198, 2.000000e+00\l  %200 = tail call double @llvm.rint.f64(double %199)\l  %201 = tail call double @llvm.fma.f64(double %200, double -5.000000e-01,\l... double %198)\l  %202 = fptosi double %200 to i32\l  %203 = fmul double %201, %201\l  %204 = tail call double @llvm.fma.f64(double %203, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %205 = tail call double @llvm.fma.f64(double %203, double %204, double\l... 0x3FB50782D5F14825)\l  %206 = tail call double @llvm.fma.f64(double %203, double %205, double\l... 0xBFE32D2CCDFE9424)\l  %207 = tail call double @llvm.fma.f64(double %203, double %206, double\l... 0x400466BC67754FFF)\l  %208 = tail call double @llvm.fma.f64(double %203, double %207, double\l... 0xC014ABBCE625BE09)\l  %209 = fmul double %201, %203\l  %210 = fmul double %209, %208\l  %211 = tail call double @llvm.fma.f64(double %201, double\l... 0x400921FB54442D18, double %210)\l  %212 = tail call double @llvm.fma.f64(double %203, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %213 = tail call double @llvm.fma.f64(double %203, double %212, double\l... 0xBF9A6D1E7294BFF9)\l  %214 = tail call double @llvm.fma.f64(double %203, double %213, double\l... 0x3FCE1F5067B90B37)\l  %215 = tail call double @llvm.fma.f64(double %203, double %214, double\l... 0xBFF55D3C7E3C325B)\l  %216 = tail call double @llvm.fma.f64(double %203, double %215, double\l... 0x40103C1F081B5A67)\l  %217 = tail call double @llvm.fma.f64(double %203, double %216, double\l... 0xC013BD3CC9BE45DE)\l  %218 = tail call double @llvm.fma.f64(double %203, double %217, double\l... 1.000000e+00)\l  %219 = shl i32 %202, 30\l  %220 = and i32 %219, -2147483648\l  %221 = and i32 %202, 1\l  %222 = icmp eq i32 %221, 0\l  %223 = select i1 %222, double %211, double %218\l  %224 = bitcast double %223 to \<2 x i32\>\l  %225 = bitcast double %87 to \<2 x i32\>\l  %226 = extractelement \<2 x i32\> %225, i64 1\l  %227 = and i32 %226, -2147483648\l  %228 = extractelement \<2 x i32\> %224, i64 1\l  %229 = xor i32 %227, %228\l  %230 = xor i32 %229, %220\l  %231 = insertelement \<2 x i32\> %224, i32 %230, i64 1\l  %232 = fneg double %211\l  %233 = select i1 %222, double %218, double %232\l  %234 = bitcast double %233 to \<2 x i32\>\l  %235 = extractelement \<2 x i32\> %234, i64 1\l  %236 = xor i32 %235, %220\l  %237 = insertelement \<2 x i32\> %234, i32 %236, i64 1\l  %238 = tail call i1 @llvm.amdgcn.class.f64(double %87, i32 516)\l  %239 = select i1 %238, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %237\l  %240 = select i1 %238, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %231\l  %241 = bitcast \<2 x i32\> %240 to double\l  %242 = bitcast \<2 x i32\> %239 to double\l  %243 = fmul contract double %191, %241\l  %244 = fmul contract double %191, %242\l  br label %245\l}"];
	Node0x4d92af0 -> Node0x4d93000;
	Node0x4d93000 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%245:\l245:                                              \l  %246 = phi i32 [ %53, %37 ], [ %32, %34 ]\l  %247 = phi i32 [ %44, %37 ], [ %31, %34 ]\l  %248 = phi i32 [ %26, %37 ], [ %30, %34 ]\l  %249 = phi double [ %244, %37 ], [ %29, %34 ]\l  %250 = phi i32 [ %62, %37 ], [ %28, %34 ]\l  %251 = phi i32 [ 1, %37 ], [ 0, %34 ]\l  %252 = phi i32 [ %71, %37 ], [ %26, %34 ]\l  %253 = phi i32 [ %72, %37 ], [ %25, %34 ]\l  %254 = phi double [ %243, %37 ], [ %36, %34 ]\l  %255 = fmul contract double %254, %4\l  %256 = fadd contract double %255, %3\l  %257 = getelementptr inbounds double, double addrspace(1)* %1, i64 %24\l  store double %256, double addrspace(1)* %257, align 8, !tbaa !5\l  %258 = add nuw i64 %24, 1\l  %259 = icmp eq i64 %258, %22\l  br i1 %259, label %260, label %23, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x4d93000:s0 -> Node0x4d922b0;
	Node0x4d93000:s1 -> Node0x4d92f10;
	Node0x4d922b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%260:\l260:                                              \l  ret void\l}"];
}
