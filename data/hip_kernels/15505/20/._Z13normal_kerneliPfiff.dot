digraph "CFG for '_Z13normal_kerneliPfiff' function" {
	label="CFG for '_Z13normal_kerneliPfiff' function";

	Node0x4f72150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = icmp eq i32 %6, 0\l  br i1 %7, label %8, label %113\l|{<s0>T|<s1>F}}"];
	Node0x4f72150:s0 -> Node0x4f73550;
	Node0x4f72150:s1 -> Node0x4f735a0;
	Node0x4f73550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%8:\l8:                                                \l  %9 = xor i32 %0, 746559103\l  %10 = icmp sgt i32 %0, -1\l  %11 = mul i32 %9, 1228688033\l  %12 = select i1 %10, i32 -1973591729, i32 -100066652\l  %13 = icmp eq i32 %2, 0\l  br i1 %13, label %113, label %14\l|{<s0>T|<s1>F}}"];
	Node0x4f73550:s0 -> Node0x4f735a0;
	Node0x4f73550:s1 -> Node0x4f6fb90;
	Node0x4f6fb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%14:\l14:                                               \l  %15 = add i32 %11, 6615241\l  %16 = add i32 %15, %12\l  %17 = add i32 %11, 5783321\l  %18 = xor i32 %12, 88675123\l  %19 = add nsw i32 %12, 521288629\l  %20 = xor i32 %11, 362436069\l  %21 = add i32 %11, 123456789\l  %22 = sext i32 %2 to i64\l  br label %23\l}"];
	Node0x4f6fb90 -> Node0x4f74200;
	Node0x4f74200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i64 [ %111, %98 ], [ 0, %14 ]\l  %25 = phi i32 [ %106, %98 ], [ %16, %14 ]\l  %26 = phi i32 [ %105, %98 ], [ 0, %14 ]\l  %27 = phi i32 [ %104, %98 ], [ %17, %14 ]\l  %28 = phi float [ %103, %98 ], [ undef, %14 ]\l  %29 = phi i32 [ %102, %98 ], [ %18, %14 ]\l  %30 = phi i32 [ %101, %98 ], [ %21, %14 ]\l  %31 = phi i32 [ %100, %98 ], [ %20, %14 ]\l  %32 = phi i32 [ %99, %98 ], [ %19, %14 ]\l  %33 = icmp eq i32 %26, 0\l  br i1 %33, label %34, label %98\l|{<s0>T|<s1>F}}"];
	Node0x4f74200:s0 -> Node0x4f73de0;
	Node0x4f74200:s1 -> Node0x4f742f0;
	Node0x4f73de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%34:\l34:                                               \l  %35 = lshr i32 %30, 2\l  %36 = xor i32 %35, %30\l  %37 = shl i32 %27, 4\l  %38 = shl i32 %36, 1\l  %39 = xor i32 %38, %37\l  %40 = xor i32 %39, %36\l  %41 = xor i32 %40, %27\l  %42 = add i32 %25, 362437\l  %43 = add i32 %42, %41\l  %44 = lshr i32 %31, 2\l  %45 = xor i32 %44, %31\l  %46 = shl i32 %41, 4\l  %47 = shl i32 %45, 1\l  %48 = xor i32 %47, %46\l  %49 = xor i32 %48, %45\l  %50 = xor i32 %49, %41\l  %51 = add i32 %25, 724874\l  %52 = add i32 %50, %51\l  %53 = uitofp i32 %43 to float\l  %54 = fmul contract float %53, 0x3DF0000000000000\l  %55 = fadd contract float %54, 0x3DF0000000000000\l  %56 = uitofp i32 %52 to float\l  %57 = fmul contract float %56, 0x3E1921FB60000000\l  %58 = fadd contract float %57, 0x3E1921FB60000000\l  %59 = tail call i1 @llvm.amdgcn.class.f32(float %55, i32 144)\l  %60 = select i1 %59, float 0x41F0000000000000, float 1.000000e+00\l  %61 = fmul float %55, %60\l  %62 = tail call float @llvm.log2.f32(float %61)\l  %63 = fmul float %62, 0x3FE62E42E0000000\l  %64 = tail call i1 @llvm.amdgcn.class.f32(float %62, i32 519)\l  %65 = fneg float %63\l  %66 = tail call float @llvm.fma.f32(float %62, float 0x3FE62E42E0000000,\l... float %65)\l  %67 = tail call float @llvm.fma.f32(float %62, float 0x3E6EFA39E0000000,\l... float %66)\l  %68 = fadd float %63, %67\l  %69 = select i1 %64, float %62, float %68\l  %70 = select i1 %59, float 0x40362E4300000000, float 0.000000e+00\l  %71 = fsub float %69, %70\l  %72 = fmul contract float %71, -2.000000e+00\l  %73 = fcmp olt float %72, 0x39F0000000000000\l  %74 = select i1 %73, float 0x41F0000000000000, float 1.000000e+00\l  %75 = fmul float %72, %74\l  %76 = tail call float @llvm.sqrt.f32(float %75)\l  %77 = bitcast float %76 to i32\l  %78 = add nsw i32 %77, -1\l  %79 = bitcast i32 %78 to float\l  %80 = add nsw i32 %77, 1\l  %81 = bitcast i32 %80 to float\l  %82 = tail call i1 @llvm.amdgcn.class.f32(float %75, i32 608)\l  %83 = select i1 %73, float 0x3EF0000000000000, float 1.000000e+00\l  %84 = fneg float %81\l  %85 = tail call float @llvm.fma.f32(float %84, float %76, float %75)\l  %86 = fcmp ogt float %85, 0.000000e+00\l  %87 = fneg float %79\l  %88 = tail call float @llvm.fma.f32(float %87, float %76, float %75)\l  %89 = fcmp ole float %88, 0.000000e+00\l  %90 = select i1 %89, float %79, float %76\l  %91 = select i1 %86, float %81, float %90\l  %92 = fmul float %83, %91\l  %93 = select i1 %82, float %75, float %92\l  %94 = tail call float @llvm.sin.f32(float %58)\l  %95 = tail call float @llvm.cos.f32(float %58)\l  %96 = fmul contract float %94, %93\l  %97 = fmul contract float %95, %93\l  br label %98\l}"];
	Node0x4f73de0 -> Node0x4f742f0;
	Node0x4f742f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%98:\l98:                                               \l  %99 = phi i32 [ %27, %34 ], [ %32, %23 ]\l  %100 = phi i32 [ %29, %34 ], [ %31, %23 ]\l  %101 = phi i32 [ %32, %34 ], [ %30, %23 ]\l  %102 = phi i32 [ %41, %34 ], [ %29, %23 ]\l  %103 = phi float [ %97, %34 ], [ %28, %23 ]\l  %104 = phi i32 [ %50, %34 ], [ %27, %23 ]\l  %105 = phi i32 [ 1, %34 ], [ 0, %23 ]\l  %106 = phi i32 [ %51, %34 ], [ %25, %23 ]\l  %107 = phi float [ %96, %34 ], [ %28, %23 ]\l  %108 = fmul contract float %107, %4\l  %109 = fadd contract float %108, %3\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24\l  store float %109, float addrspace(1)* %110, align 4, !tbaa !5\l  %111 = add nuw i64 %24, 1\l  %112 = icmp eq i64 %111, %22\l  br i1 %112, label %113, label %23, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x4f742f0:s0 -> Node0x4f735a0;
	Node0x4f742f0:s1 -> Node0x4f74200;
	Node0x4f735a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%113:\l113:                                              \l  ret void\l}"];
}
