digraph "CFG for '_Z16rand_zero_kernelPfifP25hiprandStatePhilox4_32_10' function" {
	label="CFG for '_Z16rand_zero_kernelPfifP25hiprandStatePhilox4_32_10' function";

	Node0x49f6640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%4:\l  %5 = alloca %struct.HIP_vector_type.4, align 16, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = add i32 %13, %6\l  %15 = sext i32 %14 to i64\l  %16 = shl nsw i32 %14, 2\l  %17 = bitcast %struct.HIP_vector_type.4 addrspace(5)* %5 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 16, i8 addrspace(5)* %17) #3\l  %18 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %3, i64 %15, i32 0, i32 0,\l... i32 1, i32 0, i32 0, i32 0\l  %19 = load \<4 x i32\>, \<4 x i32\> addrspace(1)* %18, align 16,\l... !amdgpu.noclobber !6\l  %20 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %3, i64 %15, i32 0, i32 0,\l... i32 0, i32 0, i32 0, i32 0\l  %21 = load \<4 x i32\>, \<4 x i32\> addrspace(1)* %20, align 16,\l... !amdgpu.noclobber !6\l  %22 = extractelement \<4 x i32\> %21, i64 0\l  %23 = add i32 %22, 1\l  %24 = insertelement \<4 x i32\> poison, i32 %23, i64 0\l  %25 = icmp eq i32 %23, 0\l  %26 = zext i1 %25 to i32\l  %27 = extractelement \<4 x i32\> %21, i64 1\l  %28 = add i32 %27, %26\l  %29 = insertelement \<4 x i32\> %24, i32 %28, i64 1\l  %30 = icmp eq i32 %28, 0\l  %31 = select i1 %30, i32 %26, i32 0\l  %32 = extractelement \<4 x i32\> %21, i64 2\l  %33 = add i32 %31, %32\l  %34 = insertelement \<4 x i32\> %29, i32 %33, i64 2\l  %35 = icmp eq i32 %33, 0\l  %36 = select i1 %35, i32 %31, i32 0\l  %37 = extractelement \<4 x i32\> %21, i64 3\l  %38 = add i32 %36, %37\l  %39 = insertelement \<4 x i32\> %34, i32 %38, i64 3\l  store \<4 x i32\> %39, \<4 x i32\> addrspace(1)* %20, align 16\l  %40 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %3, i64 %15, i32 0, i32 0,\l... i32 2, i32 0, i32 0, i32 0, i64 0\l  %41 = load i32, i32 addrspace(1)* %40, align 16, !amdgpu.noclobber !6\l  %42 = getelementptr inbounds %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %3, i64 %15, i32 0, i32 0,\l... i32 2, i32 0, i32 0, i32 0, i64 1\l  %43 = load i32, i32 addrspace(1)* %42, align 4, !amdgpu.noclobber !6\l  %44 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %23, i64 0) #4, !srcloc !7\l  %45 = extractvalue \{ i64, i64 \} %44, 0\l  %46 = lshr i64 %45, 32\l  %47 = trunc i64 %46 to i32\l  %48 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %33, i64 0) #4, !srcloc !7\l  %49 = extractvalue \{ i64, i64 \} %48, 0\l  %50 = lshr i64 %49, 32\l  %51 = trunc i64 %50 to i32\l  %52 = trunc i64 %49 to i32\l  %53 = xor i32 %28, %41\l  %54 = xor i32 %53, %51\l  %55 = xor i32 %43, %47\l  %56 = xor i32 %55, %38\l  %57 = add i32 %41, -1640531527\l  %58 = add i32 %43, -1150833019\l  %59 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %54, i64 0) #4, !srcloc !7\l  %60 = extractvalue \{ i64, i64 \} %59, 0\l  %61 = lshr i64 %60, 32\l  %62 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %56, i64 0) #4, !srcloc !7\l  %63 = extractvalue \{ i64, i64 \} %62, 0\l  %64 = lshr i64 %63, 32\l  %65 = trunc i64 %64 to i32\l  %66 = trunc i64 %63 to i32\l  %67 = xor i32 %57, %52\l  %68 = xor i32 %67, %65\l  %69 = xor i64 %61, %45\l  %70 = trunc i64 %69 to i32\l  %71 = xor i32 %58, %70\l  %72 = add i32 %41, 1013904242\l  %73 = add i32 %43, 1993301258\l  %74 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %68, i64 0) #4, !srcloc !7\l  %75 = extractvalue \{ i64, i64 \} %74, 0\l  %76 = lshr i64 %75, 32\l  %77 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %71, i64 0) #4, !srcloc !7\l  %78 = extractvalue \{ i64, i64 \} %77, 0\l  %79 = lshr i64 %78, 32\l  %80 = trunc i64 %79 to i32\l  %81 = trunc i64 %78 to i32\l  %82 = xor i32 %72, %66\l  %83 = xor i32 %82, %80\l  %84 = xor i64 %76, %60\l  %85 = trunc i64 %84 to i32\l  %86 = xor i32 %73, %85\l  %87 = add i32 %41, -626627285\l  %88 = add i32 %43, 842468239\l  %89 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %83, i64 0) #4, !srcloc !7\l  %90 = extractvalue \{ i64, i64 \} %89, 0\l  %91 = lshr i64 %90, 32\l  %92 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %86, i64 0) #4, !srcloc !7\l  %93 = extractvalue \{ i64, i64 \} %92, 0\l  %94 = lshr i64 %93, 32\l  %95 = trunc i64 %94 to i32\l  %96 = trunc i64 %93 to i32\l  %97 = xor i32 %87, %81\l  %98 = xor i32 %97, %95\l  %99 = xor i64 %91, %75\l  %100 = trunc i64 %99 to i32\l  %101 = xor i32 %88, %100\l  %102 = add i32 %41, 2027808484\l  %103 = add i32 %43, -308364780\l  %104 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %98, i64 0) #4, !srcloc !7\l  %105 = extractvalue \{ i64, i64 \} %104, 0\l  %106 = lshr i64 %105, 32\l  %107 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %101, i64 0) #4, !srcloc !7\l  %108 = extractvalue \{ i64, i64 \} %107, 0\l  %109 = lshr i64 %108, 32\l  %110 = trunc i64 %109 to i32\l  %111 = trunc i64 %108 to i32\l  %112 = xor i32 %102, %96\l  %113 = xor i32 %112, %110\l  %114 = xor i64 %106, %90\l  %115 = trunc i64 %114 to i32\l  %116 = xor i32 %103, %115\l  %117 = add i32 %41, 387276957\l  %118 = add i32 %43, -1459197799\l  %119 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %113, i64 0) #4, !srcloc !7\l  %120 = extractvalue \{ i64, i64 \} %119, 0\l  %121 = lshr i64 %120, 32\l  %122 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %116, i64 0) #4, !srcloc !7\l  %123 = extractvalue \{ i64, i64 \} %122, 0\l  %124 = lshr i64 %123, 32\l  %125 = trunc i64 %124 to i32\l  %126 = trunc i64 %123 to i32\l  %127 = xor i32 %117, %111\l  %128 = xor i32 %127, %125\l  %129 = xor i64 %121, %105\l  %130 = trunc i64 %129 to i32\l  %131 = xor i32 %118, %130\l  %132 = add i32 %41, -1253254570\l  %133 = add i32 %43, 1684936478\l  %134 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %128, i64 0) #4, !srcloc !7\l  %135 = extractvalue \{ i64, i64 \} %134, 0\l  %136 = lshr i64 %135, 32\l  %137 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %131, i64 0) #4, !srcloc !7\l  %138 = extractvalue \{ i64, i64 \} %137, 0\l  %139 = lshr i64 %138, 32\l  %140 = trunc i64 %139 to i32\l  %141 = trunc i64 %138 to i32\l  %142 = xor i32 %132, %126\l  %143 = xor i32 %142, %140\l  %144 = xor i64 %136, %120\l  %145 = trunc i64 %144 to i32\l  %146 = xor i32 %133, %145\l  %147 = add i32 %41, 1401181199\l  %148 = add i32 %43, 534103459\l  %149 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %143, i64 0) #4, !srcloc !7\l  %150 = extractvalue \{ i64, i64 \} %149, 0\l  %151 = lshr i64 %150, 32\l  %152 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %146, i64 0) #4, !srcloc !7\l  %153 = extractvalue \{ i64, i64 \} %152, 0\l  %154 = lshr i64 %153, 32\l  %155 = trunc i64 %154 to i32\l  %156 = trunc i64 %153 to i32\l  %157 = xor i32 %147, %141\l  %158 = xor i32 %157, %155\l  %159 = xor i64 %151, %135\l  %160 = trunc i64 %159 to i32\l  %161 = xor i32 %148, %160\l  %162 = add i32 %41, -239350328\l  %163 = add i32 %43, -616729560\l  %164 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %158, i64 0) #4, !srcloc !7\l  %165 = extractvalue \{ i64, i64 \} %164, 0\l  %166 = lshr i64 %165, 32\l  %167 = trunc i64 %165 to i32\l  %168 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %161, i64 0) #4, !srcloc !7\l  %169 = extractvalue \{ i64, i64 \} %168, 0\l  %170 = lshr i64 %169, 32\l  %171 = trunc i64 %170 to i32\l  %172 = trunc i64 %169 to i32\l  %173 = xor i32 %162, %156\l  %174 = xor i32 %173, %171\l  %175 = xor i64 %166, %150\l  %176 = trunc i64 %175 to i32\l  %177 = xor i32 %163, %176\l  %178 = add i32 %41, -1879881855\l  %179 = add i32 %43, -1767562579\l  %180 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %174, i64 0) #4, !srcloc !7\l  %181 = extractvalue \{ i64, i64 \} %180, 0\l  %182 = lshr i64 %181, 32\l  %183 = trunc i64 %182 to i32\l  %184 = trunc i64 %181 to i32\l  %185 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %177, i64 0) #4, !srcloc !7\l  %186 = extractvalue \{ i64, i64 \} %185, 0\l  %187 = lshr i64 %186, 32\l  %188 = trunc i64 %187 to i32\l  %189 = trunc i64 %186 to i32\l  %190 = xor i32 %178, %172\l  %191 = xor i32 %190, %188\l  %192 = xor i32 %179, %167\l  %193 = xor i32 %192, %183\l  %194 = insertelement \<4 x i32\> undef, i32 %191, i64 0\l  %195 = insertelement \<4 x i32\> %194, i32 %189, i64 1\l  %196 = insertelement \<4 x i32\> %195, i32 %193, i64 2\l  %197 = insertelement \<4 x i32\> %196, i32 %184, i64 3\l  store \<4 x i32\> %197, \<4 x i32\> addrspace(1)* %18, align 16\l  %198 = getelementptr %struct.hiprandStatePhilox4_32_10,\l... %struct.hiprandStatePhilox4_32_10 addrspace(1)* %3, i64 %15, i32 0, i32 0,\l... i32 3\l  %199 = load i32, i32 addrspace(1)* %198, align 8, !tbaa !8\l  switch i32 %199, label %206 [\l    i32 0, label %207\l    i32 1, label %200\l    i32 2, label %202\l    i32 3, label %204\l  ]\l|{<s0>def|<s1>0|<s2>1|<s3>2|<s4>3}}"];
	Node0x49f6640:s0 -> Node0x4a02880;
	Node0x49f6640:s1 -> Node0x4a028d0;
	Node0x49f6640:s2 -> Node0x4a02960;
	Node0x49f6640:s3 -> Node0x4a029f0;
	Node0x49f6640:s4 -> Node0x4a02a80;
	Node0x4a02960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%200:\l200:                                              \l  %201 = shufflevector \<4 x i32\> %19, \<4 x i32\> %194, \<4 x i32\> \<i32 1, i32 2,\l... i32 3, i32 4\>\l  br label %207\l}"];
	Node0x4a02960 -> Node0x4a028d0;
	Node0x4a029f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%202:\l202:                                              \l  %203 = shufflevector \<4 x i32\> %19, \<4 x i32\> %195, \<4 x i32\> \<i32 2, i32 3,\l... i32 4, i32 5\>\l  br label %207\l}"];
	Node0x4a029f0 -> Node0x4a028d0;
	Node0x4a02a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%204:\l204:                                              \l  %205 = shufflevector \<4 x i32\> %19, \<4 x i32\> %196, \<4 x i32\> \<i32 3, i32 4,\l... i32 5, i32 6\>\l  br label %207\l}"];
	Node0x4a02a80 -> Node0x4a028d0;
	Node0x4a02880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5572df70",label="{%206:\l206:                                              \l  unreachable\l}"];
	Node0x4a028d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%207:\l207:                                              \l  %208 = phi \<4 x i32\> [ %205, %204 ], [ %203, %202 ], [ %201, %200 ], [ %19,\l... %4 ]\l  %209 = extractelement \<4 x i32\> %208, i64 0\l  %210 = uitofp i32 %209 to float\l  %211 = fmul contract float %210, 0x3DF0000000000000\l  %212 = fadd contract float %211, 0x3DF0000000000000\l  %213 = extractelement \<4 x i32\> %208, i64 1\l  %214 = uitofp i32 %213 to float\l  %215 = fmul contract float %214, 0x3DF0000000000000\l  %216 = fadd contract float %215, 0x3DF0000000000000\l  %217 = extractelement \<4 x i32\> %208, i64 2\l  %218 = uitofp i32 %217 to float\l  %219 = fmul contract float %218, 0x3DF0000000000000\l  %220 = fadd contract float %219, 0x3DF0000000000000\l  %221 = extractelement \<4 x i32\> %208, i64 3\l  %222 = uitofp i32 %221 to float\l  %223 = fmul contract float %222, 0x3DF0000000000000\l  %224 = fadd contract float %223, 0x3DF0000000000000\l  %225 = insertelement \<4 x float\> undef, float %212, i64 0\l  %226 = insertelement \<4 x float\> %225, float %216, i64 1\l  %227 = insertelement \<4 x float\> %226, float %220, i64 2\l  %228 = insertelement \<4 x float\> %227, float %224, i64 3\l  %229 = getelementptr inbounds %struct.HIP_vector_type.4,\l... %struct.HIP_vector_type.4 addrspace(5)* %5, i32 0, i32 0, i32 0, i32 0\l  store \<4 x float\> %228, \<4 x float\> addrspace(5)* %229, align 16\l  %230 = icmp slt i32 %16, %1\l  br i1 %230, label %231, label %246\l|{<s0>T|<s1>F}}"];
	Node0x4a028d0:s0 -> Node0x4a04ad0;
	Node0x4a028d0:s1 -> Node0x4a04b20;
	Node0x4a04ad0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%231:\l231:                                              \l  %232 = phi i32 [ %241, %240 ], [ 0, %207 ]\l  %233 = phi i32 [ %242, %240 ], [ %16, %207 ]\l  %234 = getelementptr inbounds %struct.HIP_vector_type.4,\l... %struct.HIP_vector_type.4 addrspace(5)* %5, i32 0, i32 0, i32 0, i32 0, i32\l... %232\l  %235 = load float, float addrspace(5)* %234, align 4, !tbaa !20\l  %236 = fcmp contract olt float %235, %2\l  br i1 %236, label %237, label %240\l|{<s0>T|<s1>F}}"];
	Node0x4a04ad0:s0 -> Node0x4a05280;
	Node0x4a04ad0:s1 -> Node0x4a04c90;
	Node0x4a05280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%237:\l237:                                              \l  %238 = sext i32 %233 to i64\l  %239 = getelementptr inbounds float, float addrspace(1)* %0, i64 %238\l  store float 0.000000e+00, float addrspace(1)* %239, align 4, !tbaa !20\l  br label %240\l}"];
	Node0x4a05280 -> Node0x4a04c90;
	Node0x4a04c90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%240:\l240:                                              \l  %241 = add nuw nsw i32 %232, 1\l  %242 = add nsw i32 %233, 1\l  %243 = icmp ult i32 %232, 3\l  %244 = icmp slt i32 %242, %1\l  %245 = select i1 %243, i1 %244, i1 false\l  br i1 %245, label %231, label %246, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4a04c90:s0 -> Node0x4a04ad0;
	Node0x4a04c90:s1 -> Node0x4a04b20;
	Node0x4a04b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%246:\l246:                                              \l  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %17) #3\l  ret void\l}"];
}
