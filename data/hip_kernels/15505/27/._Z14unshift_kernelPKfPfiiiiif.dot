digraph "CFG for '_Z14unshift_kernelPKfPfiiiiif' function" {
	label="CFG for '_Z14unshift_kernelPKfPfiiiiif' function";

	Node0x50a4c00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = mul i32 %15, %14\l  %17 = add i32 %16, %9\l  %18 = freeze i32 %17\l  %19 = freeze i32 %2\l  %20 = sdiv i32 %18, %19\l  %21 = mul i32 %20, %19\l  %22 = sub i32 %18, %21\l  %23 = add nsw i32 %22, %5\l  %24 = add nsw i32 %20, %6\l  %25 = icmp sgt i32 %2, -1\l  %26 = icmp slt i32 %20, %3\l  %27 = select i1 %25, i1 %26, i1 false\l  %28 = icmp slt i32 %23, %2\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %150\l|{<s0>T|<s1>F}}"];
	Node0x50a4c00:s0 -> Node0x50a7160;
	Node0x50a4c00:s1 -> Node0x50a71f0;
	Node0x50a7160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%30:\l30:                                               \l  %31 = icmp sge i32 %24, %3\l  %32 = or i32 %23, %24\l  %33 = icmp slt i32 %32, 0\l  %34 = select i1 %31, i1 true, i1 %33\l  br i1 %34, label %150, label %35\l|{<s0>T|<s1>F}}"];
	Node0x50a7160:s0 -> Node0x50a71f0;
	Node0x50a7160:s1 -> Node0x50a7710;
	Node0x50a7710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%35:\l35:                                               \l  %36 = fcmp contract ogt float %7, 0.000000e+00\l  %37 = mul nsw i32 %24, %2\l  %38 = add nsw i32 %37, %23\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = mul nsw i32 %20, %2\l  %42 = add nsw i32 %41, %22\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  %45 = icmp eq i32 %4, 0\l  br i1 %36, label %46, label %88\l|{<s0>T|<s1>F}}"];
	Node0x50a7710:s0 -> Node0x50a87a0;
	Node0x50a7710:s1 -> Node0x50a8830;
	Node0x50a87a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%46:\l46:                                               \l  br i1 %45, label %150, label %47\l|{<s0>T|<s1>F}}"];
	Node0x50a87a0:s0 -> Node0x50a71f0;
	Node0x50a87a0:s1 -> Node0x50a8970;
	Node0x50a8970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%47:\l47:                                               \l  %48 = mul nsw i32 %3, %2\l  %49 = sext i32 %48 to i64\l  %50 = sext i32 %4 to i64\l  %51 = and i64 %50, 3\l  %52 = icmp ult i32 %4, 4\l  br i1 %52, label %122, label %53\l|{<s0>T|<s1>F}}"];
	Node0x50a8970:s0 -> Node0x50a8d60;
	Node0x50a8970:s1 -> Node0x50a8db0;
	Node0x50a8db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%53:\l53:                                               \l  %54 = and i64 %50, -4\l  br label %55\l}"];
	Node0x50a8db0 -> Node0x50a8fb0;
	Node0x50a8fb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%55:\l55:                                               \l  %56 = phi i64 [ 0, %53 ], [ %85, %55 ]\l  %57 = phi i64 [ 0, %53 ], [ %86, %55 ]\l  %58 = mul i64 %56, %49\l  %59 = getelementptr inbounds float, float addrspace(1)* %40, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7\l  %61 = getelementptr inbounds float, float addrspace(1)* %44, i64 %58\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7\l  %63 = fadd contract float %60, %62\l  store float %63, float addrspace(1)* %61, align 4, !tbaa !7\l  %64 = or i64 %56, 1\l  %65 = mul i64 %64, %49\l  %66 = getelementptr inbounds float, float addrspace(1)* %40, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7\l  %68 = getelementptr inbounds float, float addrspace(1)* %44, i64 %65\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7\l  %70 = fadd contract float %67, %69\l  store float %70, float addrspace(1)* %68, align 4, !tbaa !7\l  %71 = or i64 %56, 2\l  %72 = mul i64 %71, %49\l  %73 = getelementptr inbounds float, float addrspace(1)* %40, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = getelementptr inbounds float, float addrspace(1)* %44, i64 %72\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7\l  %77 = fadd contract float %74, %76\l  store float %77, float addrspace(1)* %75, align 4, !tbaa !7\l  %78 = or i64 %56, 3\l  %79 = mul i64 %78, %49\l  %80 = getelementptr inbounds float, float addrspace(1)* %40, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7\l  %82 = getelementptr inbounds float, float addrspace(1)* %44, i64 %79\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7\l  %84 = fadd contract float %81, %83\l  store float %84, float addrspace(1)* %82, align 4, !tbaa !7\l  %85 = add nuw i64 %56, 4\l  %86 = add i64 %57, 4\l  %87 = icmp eq i64 %86, %54\l  br i1 %87, label %122, label %55, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x50a8fb0:s0 -> Node0x50a8d60;
	Node0x50a8fb0:s1 -> Node0x50a8fb0;
	Node0x50a8830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%88:\l88:                                               \l  br i1 %45, label %150, label %89\l|{<s0>T|<s1>F}}"];
	Node0x50a8830:s0 -> Node0x50a71f0;
	Node0x50a8830:s1 -> Node0x50ab0c0;
	Node0x50ab0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%89:\l89:                                               \l  %90 = mul nsw i32 %3, %2\l  %91 = sext i32 %90 to i64\l  %92 = sext i32 %4 to i64\l  %93 = and i64 %92, 3\l  %94 = icmp ult i32 %4, 4\l  br i1 %94, label %137, label %95\l|{<s0>T|<s1>F}}"];
	Node0x50ab0c0:s0 -> Node0x50ab450;
	Node0x50ab0c0:s1 -> Node0x50ab4a0;
	Node0x50ab4a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%95:\l95:                                               \l  %96 = and i64 %92, -4\l  br label %97\l}"];
	Node0x50ab4a0 -> Node0x50ab670;
	Node0x50ab670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%97:\l97:                                               \l  %98 = phi i64 [ 0, %95 ], [ %119, %97 ]\l  %99 = phi i64 [ 0, %95 ], [ %120, %97 ]\l  %100 = mul i64 %98, %91\l  %101 = getelementptr inbounds float, float addrspace(1)* %40, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = getelementptr inbounds float, float addrspace(1)* %44, i64 %100\l  store float %102, float addrspace(1)* %103, align 4, !tbaa !7\l  %104 = or i64 %98, 1\l  %105 = mul i64 %104, %91\l  %106 = getelementptr inbounds float, float addrspace(1)* %40, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7\l  %108 = getelementptr inbounds float, float addrspace(1)* %44, i64 %105\l  store float %107, float addrspace(1)* %108, align 4, !tbaa !7\l  %109 = or i64 %98, 2\l  %110 = mul i64 %109, %91\l  %111 = getelementptr inbounds float, float addrspace(1)* %40, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = getelementptr inbounds float, float addrspace(1)* %44, i64 %110\l  store float %112, float addrspace(1)* %113, align 4, !tbaa !7\l  %114 = or i64 %98, 3\l  %115 = mul i64 %114, %91\l  %116 = getelementptr inbounds float, float addrspace(1)* %40, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7\l  %118 = getelementptr inbounds float, float addrspace(1)* %44, i64 %115\l  store float %117, float addrspace(1)* %118, align 4, !tbaa !7\l  %119 = add nuw i64 %98, 4\l  %120 = add i64 %99, 4\l  %121 = icmp eq i64 %120, %96\l  br i1 %121, label %137, label %97, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x50ab670:s0 -> Node0x50ab450;
	Node0x50ab670:s1 -> Node0x50ab670;
	Node0x50a8d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%122:\l122:                                              \l  %123 = phi i64 [ 0, %47 ], [ %85, %55 ]\l  %124 = icmp eq i64 %51, 0\l  br i1 %124, label %150, label %125\l|{<s0>T|<s1>F}}"];
	Node0x50a8d60:s0 -> Node0x50a71f0;
	Node0x50a8d60:s1 -> Node0x50aca20;
	Node0x50aca20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%125:\l125:                                              \l  %126 = phi i64 [ %134, %125 ], [ %123, %122 ]\l  %127 = phi i64 [ %135, %125 ], [ 0, %122 ]\l  %128 = mul i64 %126, %49\l  %129 = getelementptr inbounds float, float addrspace(1)* %40, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7\l  %131 = getelementptr inbounds float, float addrspace(1)* %44, i64 %128\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7\l  %133 = fadd contract float %130, %132\l  store float %133, float addrspace(1)* %131, align 4, !tbaa !7\l  %134 = add nuw i64 %126, 1\l  %135 = add i64 %127, 1\l  %136 = icmp eq i64 %135, %51\l  br i1 %136, label %150, label %125, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x50aca20:s0 -> Node0x50a71f0;
	Node0x50aca20:s1 -> Node0x50aca20;
	Node0x50ab450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%137:\l137:                                              \l  %138 = phi i64 [ 0, %89 ], [ %119, %97 ]\l  %139 = icmp eq i64 %93, 0\l  br i1 %139, label %150, label %140\l|{<s0>T|<s1>F}}"];
	Node0x50ab450:s0 -> Node0x50a71f0;
	Node0x50ab450:s1 -> Node0x50ad8f0;
	Node0x50ad8f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%140:\l140:                                              \l  %141 = phi i64 [ %147, %140 ], [ %138, %137 ]\l  %142 = phi i64 [ %148, %140 ], [ 0, %137 ]\l  %143 = mul i64 %141, %91\l  %144 = getelementptr inbounds float, float addrspace(1)* %40, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7\l  %146 = getelementptr inbounds float, float addrspace(1)* %44, i64 %143\l  store float %145, float addrspace(1)* %146, align 4, !tbaa !7\l  %147 = add nuw i64 %141, 1\l  %148 = add i64 %142, 1\l  %149 = icmp eq i64 %148, %93\l  br i1 %149, label %150, label %140, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x50ad8f0:s0 -> Node0x50a71f0;
	Node0x50ad8f0:s1 -> Node0x50ad8f0;
	Node0x50a71f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%150:\l150:                                              \l  ret void\l}"];
}
