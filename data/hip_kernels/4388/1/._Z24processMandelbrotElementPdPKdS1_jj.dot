digraph "CFG for '_Z24processMandelbrotElementPdPKdS1_jj' function" {
	label="CFG for '_Z24processMandelbrotElementPdPKdS1_jj' function";

	Node0x5036c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !4\l  %12 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !13\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !13\l  %15 = bitcast i8 addrspace(4)* %12 to \<2 x i16\> addrspace(4)*\l  %16 = load \<2 x i16\>, \<2 x i16\> addrspace(4)* %15, align 4, !invariant.load\l... !14\l  %17 = zext \<2 x i16\> %16 to \<2 x i32\>\l  %18 = extractelement \<2 x i32\> %17, i64 0\l  %19 = udiv i32 %11, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %11, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %7\l  %25 = add i32 %24, %6\l  %26 = zext i32 %25 to i64\l  %27 = mul nuw nsw i32 %14, %18\l  %28 = add nuw nsw i32 %27, %13\l  %29 = zext i32 %28 to i64\l  %30 = extractelement \<2 x i32\> %17, i64 1\l  %31 = mul nuw nsw i32 %30, %18\l  %32 = zext i32 %31 to i64\l  %33 = mul nuw nsw i64 %26, %32\l  %34 = add nuw nsw i64 %33, %29\l  %35 = zext i32 %4 to i64\l  %36 = icmp ult i64 %34, %35\l  br i1 %36, label %37, label %142\l|{<s0>T|<s1>F}}"];
	Node0x5036c10:s0 -> Node0x503a710;
	Node0x5036c10:s1 -> Node0x503a7a0;
	Node0x503a710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%37:\l37:                                               \l  %38 = getelementptr inbounds double, double addrspace(1)* %1, i64 %34\l  %39 = load double, double addrspace(1)* %38, align 8, !tbaa !15,\l... !amdgpu.noclobber !14\l  %40 = getelementptr inbounds double, double addrspace(1)* %2, i64 %34\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !15,\l... !amdgpu.noclobber !14\l  br label %42\l}"];
	Node0x503a710 -> Node0x503b910;
	Node0x503b910 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi double [ %39, %37 ], [ %53, %50 ]\l  %44 = phi i32 [ 0, %37 ], [ %51, %50 ]\l  %45 = phi double [ %41, %37 ], [ %56, %50 ]\l  %46 = fmul contract double %43, %43\l  %47 = fmul contract double %45, %45\l  %48 = fadd contract double %46, %47\l  %49 = fcmp contract ugt double %48, 4.000000e+00\l  br i1 %49, label %58, label %50\l|{<s0>T|<s1>F}}"];
	Node0x503b910:s0 -> Node0x503ca50;
	Node0x503b910:s1 -> Node0x503ba10;
	Node0x503ba10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%50:\l50:                                               \l  %51 = add i32 %44, 1\l  %52 = fsub contract double %46, %47\l  %53 = fadd contract double %39, %52\l  %54 = fmul contract double %43, 2.000000e+00\l  %55 = fmul contract double %54, %45\l  %56 = fadd contract double %41, %55\l  %57 = icmp ugt i32 %51, %3\l  br i1 %57, label %58, label %42, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x503ba10:s0 -> Node0x503ca50;
	Node0x503ba10:s1 -> Node0x503b910;
	Node0x503ca50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%58:\l58:                                               \l  %59 = phi i32 [ %51, %50 ], [ %44, %42 ]\l  %60 = add i32 %59, 1\l  %61 = uitofp i32 %60 to double\l  %62 = tail call double @llvm.amdgcn.frexp.mant.f64(double %61)\l  %63 = fcmp olt double %62, 0x3FE5555555555555\l  %64 = zext i1 %63 to i32\l  %65 = tail call double @llvm.amdgcn.ldexp.f64(double %62, i32 %64)\l  %66 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %61)\l  %67 = sub nsw i32 %66, %64\l  %68 = fadd double %65, -1.000000e+00\l  %69 = fadd double %65, 1.000000e+00\l  %70 = fadd double %69, -1.000000e+00\l  %71 = fsub double %65, %70\l  %72 = tail call double @llvm.amdgcn.rcp.f64(double %69)\l  %73 = fneg double %69\l  %74 = tail call double @llvm.fma.f64(double %73, double %72, double\l... 1.000000e+00)\l  %75 = tail call double @llvm.fma.f64(double %74, double %72, double %72)\l  %76 = tail call double @llvm.fma.f64(double %73, double %75, double\l... 1.000000e+00)\l  %77 = tail call double @llvm.fma.f64(double %76, double %75, double %75)\l  %78 = fmul double %68, %77\l  %79 = fmul double %69, %78\l  %80 = fneg double %79\l  %81 = tail call double @llvm.fma.f64(double %78, double %69, double %80)\l  %82 = tail call double @llvm.fma.f64(double %78, double %71, double %81)\l  %83 = fadd double %79, %82\l  %84 = fsub double %83, %79\l  %85 = fsub double %82, %84\l  %86 = fsub double %68, %83\l  %87 = fsub double %68, %86\l  %88 = fsub double %87, %83\l  %89 = fsub double %88, %85\l  %90 = fadd double %86, %89\l  %91 = fmul double %77, %90\l  %92 = fadd double %78, %91\l  %93 = fsub double %92, %78\l  %94 = fsub double %91, %93\l  %95 = fmul double %92, %92\l  %96 = tail call double @llvm.fma.f64(double %95, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %97 = tail call double @llvm.fma.f64(double %95, double %96, double\l... 0x3FC7474DD7F4DF2E)\l  %98 = tail call double @llvm.fma.f64(double %95, double %97, double\l... 0x3FCC71C016291751)\l  %99 = tail call double @llvm.fma.f64(double %95, double %98, double\l... 0x3FD249249B27ACF1)\l  %100 = tail call double @llvm.fma.f64(double %95, double %99, double\l... 0x3FD99999998EF7B6)\l  %101 = tail call double @llvm.fma.f64(double %95, double %100, double\l... 0x3FE5555555555780)\l  %102 = tail call double @llvm.amdgcn.ldexp.f64(double %92, i32 1)\l  %103 = tail call double @llvm.amdgcn.ldexp.f64(double %94, i32 1)\l  %104 = fmul double %92, %95\l  %105 = fmul double %104, %101\l  %106 = fadd double %102, %105\l  %107 = fsub double %106, %102\l  %108 = fsub double %105, %107\l  %109 = fadd double %103, %108\l  %110 = fadd double %106, %109\l  %111 = fsub double %110, %106\l  %112 = fsub double %109, %111\l  %113 = sitofp i32 %67 to double\l  %114 = fmul double %113, 0x3FE62E42FEFA39EF\l  %115 = fneg double %114\l  %116 = tail call double @llvm.fma.f64(double %113, double\l... 0x3FE62E42FEFA39EF, double %115)\l  %117 = tail call double @llvm.fma.f64(double %113, double\l... 0x3C7ABC9E3B39803F, double %116)\l  %118 = fadd double %114, %117\l  %119 = fsub double %118, %114\l  %120 = fsub double %117, %119\l  %121 = fadd double %118, %110\l  %122 = fsub double %121, %118\l  %123 = fsub double %121, %122\l  %124 = fsub double %118, %123\l  %125 = fsub double %110, %122\l  %126 = fadd double %125, %124\l  %127 = fadd double %120, %112\l  %128 = fsub double %127, %120\l  %129 = fsub double %127, %128\l  %130 = fsub double %120, %129\l  %131 = fsub double %112, %128\l  %132 = fadd double %131, %130\l  %133 = fadd double %127, %126\l  %134 = fadd double %121, %133\l  %135 = fsub double %134, %121\l  %136 = fsub double %133, %135\l  %137 = fadd double %132, %136\l  %138 = fadd double %134, %137\l  %139 = icmp eq i32 %60, 0\l  %140 = select i1 %139, double 0xFFF0000000000000, double %138\l  %141 = getelementptr inbounds double, double addrspace(1)* %0, i64 %34\l  store double %140, double addrspace(1)* %141, align 8, !tbaa !15\l  br label %142\l}"];
	Node0x503ca50 -> Node0x503a7a0;
	Node0x503a7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%142:\l142:                                              \l  ret void\l}"];
}
