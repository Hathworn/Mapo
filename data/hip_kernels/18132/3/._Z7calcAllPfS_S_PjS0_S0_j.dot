digraph "CFG for '_Z7calcAllPfS_S_PjS0_S0_j' function" {
	label="CFG for '_Z7calcAllPfS_S_PjS0_S0_j' function";

	Node0x5a81fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp ult i32 %16, %6\l  br i1 %17, label %18, label %180\l|{<s0>T|<s1>F}}"];
	Node0x5a81fd0:s0 -> Node0x5a83f00;
	Node0x5a81fd0:s1 -> Node0x5a83f90;
	Node0x5a83f00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%18:\l18:                                               \l  %19 = phi i32 [ %24, %18 ], [ 0, %7 ]\l  %20 = zext i32 %19 to i64\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %20\l  %22 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %23 = icmp ugt i32 %16, %22\l  %24 = add i32 %19, 1\l  br i1 %23, label %18, label %25, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5a83f00:s0 -> Node0x5a83f00;
	Node0x5a83f00:s1 -> Node0x5a84c50;
	Node0x5a84c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%25:\l25:                                               \l  %26 = add i32 %19, -1\l  %27 = zext i32 %26 to i64\l  %28 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %27\l  %29 = load i32, i32 addrspace(1)* %28, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %30 = icmp eq i32 %29, 0\l  br i1 %30, label %66, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5a84c50:s0 -> Node0x5a85740;
	Node0x5a84c50:s1 -> Node0x5a857d0;
	Node0x5a857d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%31:\l31:                                               \l  %32 = zext i32 %19 to i64\l  %33 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %32\l  %34 = load i32, i32 addrspace(1)* %33, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %35 = sub i32 %16, %22\l  %36 = mul i32 %29, %35\l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %27\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %39 = and i32 %29, 7\l  %40 = icmp ult i32 %29, 8\l  br i1 %40, label %43, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5a857d0:s0 -> Node0x5a85f80;
	Node0x5a857d0:s1 -> Node0x5a86010;
	Node0x5a86010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%41:\l41:                                               \l  %42 = and i32 %29, -8\l  br label %78\l}"];
	Node0x5a86010 -> Node0x5a86210;
	Node0x5a85f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%43:\l43:                                               \l  %44 = phi float [ undef, %31 ], [ %176, %78 ]\l  %45 = phi i32 [ 0, %31 ], [ %177, %78 ]\l  %46 = phi float [ 0.000000e+00, %31 ], [ %176, %78 ]\l  %47 = icmp eq i32 %39, 0\l  br i1 %47, label %66, label %48\l|{<s0>T|<s1>F}}"];
	Node0x5a85f80:s0 -> Node0x5a85740;
	Node0x5a85f80:s1 -> Node0x5a87480;
	Node0x5a87480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%48:\l48:                                               \l  %49 = phi i32 [ %63, %48 ], [ %45, %43 ]\l  %50 = phi float [ %62, %48 ], [ %46, %43 ]\l  %51 = phi i32 [ %64, %48 ], [ 0, %43 ]\l  %52 = add i32 %36, %49\l  %53 = add i32 %52, %34\l  %54 = zext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %57 = add i32 %38, %49\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %2, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %61 = fmul contract float %56, %60\l  %62 = fadd contract float %50, %61\l  %63 = add nuw i32 %49, 1\l  %64 = add i32 %51, 1\l  %65 = icmp eq i32 %64, %39\l  br i1 %65, label %66, label %48, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5a87480:s0 -> Node0x5a85740;
	Node0x5a87480:s1 -> Node0x5a87480;
	Node0x5a85740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%66:\l66:                                               \l  %67 = phi float [ 0.000000e+00, %25 ], [ %44, %43 ], [ %62, %48 ]\l  %68 = zext i32 %16 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %71 = fadd contract float %67, %70\l  %72 = fcmp contract olt float %71, 0.000000e+00\l  %73 = fneg contract float %71\l  %74 = select contract i1 %72, float %73, float %71\l  %75 = fadd contract float %74, 1.000000e+00\l  %76 = fdiv contract float %71, %75\l  %77 = getelementptr inbounds float, float addrspace(1)* %2, i64 %68\l  store float %76, float addrspace(1)* %77, align 4, !tbaa !13\l  br label %180\l}"];
	Node0x5a85740 -> Node0x5a83f90;
	Node0x5a86210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %41 ], [ %177, %78 ]\l  %80 = phi float [ 0.000000e+00, %41 ], [ %176, %78 ]\l  %81 = phi i32 [ 0, %41 ], [ %178, %78 ]\l  %82 = add i32 %36, %79\l  %83 = add i32 %82, %34\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %87 = add i32 %38, %79\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %2, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %86, %90\l  %92 = fadd contract float %80, %91\l  %93 = or i32 %79, 1\l  %94 = add i32 %36, %93\l  %95 = add i32 %94, %34\l  %96 = zext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %99 = add i32 %38, %93\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %2, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %103 = fmul contract float %98, %102\l  %104 = fadd contract float %92, %103\l  %105 = or i32 %79, 2\l  %106 = add i32 %36, %105\l  %107 = add i32 %106, %34\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %111 = add i32 %38, %105\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %2, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %115 = fmul contract float %110, %114\l  %116 = fadd contract float %104, %115\l  %117 = or i32 %79, 3\l  %118 = add i32 %36, %117\l  %119 = add i32 %118, %34\l  %120 = zext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %123 = add i32 %38, %117\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %2, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %127 = fmul contract float %122, %126\l  %128 = fadd contract float %116, %127\l  %129 = or i32 %79, 4\l  %130 = add i32 %36, %129\l  %131 = add i32 %130, %34\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %135 = add i32 %38, %129\l  %136 = zext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %2, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %139 = fmul contract float %134, %138\l  %140 = fadd contract float %128, %139\l  %141 = or i32 %79, 5\l  %142 = add i32 %36, %141\l  %143 = add i32 %142, %34\l  %144 = zext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %147 = add i32 %38, %141\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %2, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %151 = fmul contract float %146, %150\l  %152 = fadd contract float %140, %151\l  %153 = or i32 %79, 6\l  %154 = add i32 %36, %153\l  %155 = add i32 %154, %34\l  %156 = zext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %159 = add i32 %38, %153\l  %160 = zext i32 %159 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %2, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %163 = fmul contract float %158, %162\l  %164 = fadd contract float %152, %163\l  %165 = or i32 %79, 7\l  %166 = add i32 %36, %165\l  %167 = add i32 %166, %34\l  %168 = zext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %0, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %171 = add i32 %38, %165\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %2, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %175 = fmul contract float %170, %174\l  %176 = fadd contract float %164, %175\l  %177 = add nuw i32 %79, 8\l  %178 = add i32 %81, 8\l  %179 = icmp eq i32 %178, %42\l  br i1 %179, label %43, label %78, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5a86210:s0 -> Node0x5a85f80;
	Node0x5a86210:s1 -> Node0x5a86210;
	Node0x5a83f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%180:\l180:                                              \l  ret void\l}"];
}
