digraph "CFG for '_Z20computeHessianListS0PfS_S_PiS0_S0_iPdS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_i' function" {
	label="CFG for '_Z20computeHessianListS0PfS_S_PiS0_S0_iPdS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_i' function";

	Node0x4c190f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l  %23 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %24 = getelementptr i8, i8 addrspace(4)* %23, i64 4\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 4, !range !4, !invariant.load !5\l  %27 = zext i16 %26 to i32\l  %28 = getelementptr inbounds i8, i8 addrspace(4)* %23, i64 12\l  %29 = bitcast i8 addrspace(4)* %28 to i32 addrspace(4)*\l  %30 = load i32, i32 addrspace(4)* %29, align 4, !tbaa !6\l  %31 = udiv i32 %30, %27\l  %32 = mul i32 %31, %27\l  %33 = icmp ugt i32 %30, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = mul i32 %35, %27\l  %37 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %38 = icmp slt i32 %37, 6\l  br i1 %38, label %39, label %142\l|{<s0>T|<s1>F}}"];
	Node0x4c190f0:s0 -> Node0x4c1c210;
	Node0x4c190f0:s1 -> Node0x4c1c2a0;
	Node0x4c1c210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%39:\l39:                                               \l  %40 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %41 = mul i32 %40, %27\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %43 = add i32 %41, %42\l  %44 = mul nsw i32 %37, %6\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds double, double addrspace(1)* %19, i64 %45\l  %47 = mul nsw i32 %6, 6\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds double, double addrspace(1)* %46, i64 %48\l  %50 = getelementptr inbounds double, double addrspace(1)* %49, i64 %48\l  %51 = mul nsw i32 %37, %21\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %20, i64 %52\l  %54 = icmp slt i32 %43, %6\l  br i1 %54, label %55, label %142\l|{<s0>T|<s1>F}}"];
	Node0x4c1c210:s0 -> Node0x4c1d090;
	Node0x4c1c210:s1 -> Node0x4c1c2a0;
	Node0x4c1d090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%55:\l55:                                               \l  %56 = phi i32 [ %84, %83 ], [ %43, %39 ]\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %57\l  %59 = load i32, i32 addrspace(1)* %58, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %63 = fpext float %62 to double\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %66 = fpext float %65 to double\l  %67 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %69 = fpext float %68 to double\l  %70 = getelementptr inbounds double, double addrspace(1)* %46, i64 %57\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !22\l  %72 = getelementptr inbounds double, double addrspace(1)* %49, i64 %57\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !22\l  %74 = getelementptr inbounds double, double addrspace(1)* %50, i64 %57\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !22\l  %76 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %57\l  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %78 = add nsw i32 %56, 1\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %79\l  %81 = load i32, i32 addrspace(1)* %80, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %82 = icmp slt i32 %77, %81\l  br i1 %82, label %86, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4c1d090:s0 -> Node0x4c1be30;
	Node0x4c1d090:s1 -> Node0x4c1d1d0;
	Node0x4c1d1d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%83:\l83:                                               \l  %84 = add nsw i32 %56, %36\l  %85 = icmp slt i32 %84, %6\l  br i1 %85, label %55, label %142, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4c1d1d0:s0 -> Node0x4c1d090;
	Node0x4c1d1d0:s1 -> Node0x4c1c2a0;
	Node0x4c1be30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%86:\l86:                                               \l  %87 = phi i32 [ %140, %86 ], [ %77, %55 ]\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %88\l  %90 = load i32, i32 addrspace(1)* %89, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds double, double addrspace(1)* %7, i64 %91\l  %93 = load double, double addrspace(1)* %92, align 8, !tbaa !22\l  %94 = fsub contract double %63, %93\l  %95 = getelementptr inbounds double, double addrspace(1)* %10, i64 %91\l  %96 = load double, double addrspace(1)* %95, align 8, !tbaa !22\l  %97 = fmul contract double %71, %96\l  %98 = getelementptr inbounds double, double addrspace(1)* %11, i64 %91\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !22\l  %100 = fmul contract double %73, %99\l  %101 = fadd contract double %97, %100\l  %102 = getelementptr inbounds double, double addrspace(1)* %12, i64 %91\l  %103 = load double, double addrspace(1)* %102, align 8, !tbaa !22\l  %104 = fmul contract double %75, %103\l  %105 = fadd contract double %101, %104\l  %106 = fmul contract double %94, %105\l  %107 = getelementptr inbounds double, double addrspace(1)* %8, i64 %91\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !22\l  %109 = fsub contract double %66, %108\l  %110 = getelementptr inbounds double, double addrspace(1)* %13, i64 %91\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !22\l  %112 = fmul contract double %71, %111\l  %113 = getelementptr inbounds double, double addrspace(1)* %14, i64 %91\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !22\l  %115 = fmul contract double %73, %114\l  %116 = fadd contract double %112, %115\l  %117 = getelementptr inbounds double, double addrspace(1)* %15, i64 %91\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !22\l  %119 = fmul contract double %75, %118\l  %120 = fadd contract double %116, %119\l  %121 = fmul contract double %109, %120\l  %122 = fadd contract double %106, %121\l  %123 = getelementptr inbounds double, double addrspace(1)* %9, i64 %91\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !22\l  %125 = fsub contract double %69, %124\l  %126 = getelementptr inbounds double, double addrspace(1)* %16, i64 %91\l  %127 = load double, double addrspace(1)* %126, align 8, !tbaa !22\l  %128 = fmul contract double %71, %127\l  %129 = getelementptr inbounds double, double addrspace(1)* %17, i64 %91\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !22\l  %131 = fmul contract double %73, %130\l  %132 = fadd contract double %128, %131\l  %133 = getelementptr inbounds double, double addrspace(1)* %18, i64 %91\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !22\l  %135 = fmul contract double %75, %134\l  %136 = fadd contract double %132, %135\l  %137 = fmul contract double %125, %136\l  %138 = fadd contract double %122, %137\l  %139 = getelementptr inbounds double, double addrspace(1)* %53, i64 %88\l  store double %138, double addrspace(1)* %139, align 8, !tbaa !22\l  %140 = add nsw i32 %87, 1\l  %141 = icmp slt i32 %140, %81\l  br i1 %141, label %86, label %83, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4c1be30:s0 -> Node0x4c1be30;
	Node0x4c1be30:s1 -> Node0x4c1d1d0;
	Node0x4c1c2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%142:\l142:                                              \l  ret void\l}"];
}
