digraph "CFG for '_Z14calc_histogramPcPjjf' function" {
	label="CFG for '_Z14calc_histogramPcPjjf' function";

	Node0x58f5b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = uitofp i32 %13 to float\l  %15 = fmul contract float %14, %3\l  %16 = fptoui float %15 to i32\l  %17 = uitofp i32 %16 to float\l  %18 = fadd contract float %17, %3\l  %19 = fptoui float %18 to i32\l  %20 = tail call i32 @llvm.umin.i32(i32 %19, i32 %2)\l  %21 = icmp ugt i32 %20, %16\l  br i1 %21, label %62, label %22\l|{<s0>T|<s1>F}}"];
	Node0x58f5b30:s0 -> Node0x58f7fa0;
	Node0x58f5b30:s1 -> Node0x58f8030;
	Node0x58f8030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%22:\l22:                                               \l  %23 = phi i32 [ 0, %4 ], [ %98, %97 ]\l  %24 = phi i32 [ 0, %4 ], [ %99, %97 ]\l  %25 = phi i32 [ 0, %4 ], [ %100, %97 ]\l  %26 = phi i32 [ 0, %4 ], [ %101, %97 ]\l  %27 = phi i32 [ 0, %4 ], [ %102, %97 ]\l  %28 = phi i32 [ 0, %4 ], [ %103, %97 ]\l  %29 = phi i32 [ 0, %4 ], [ %104, %97 ]\l  %30 = phi i32 [ 0, %4 ], [ %105, %97 ]\l  %31 = phi i32 [ 0, %4 ], [ %106, %97 ]\l  %32 = phi i32 [ 0, %4 ], [ %107, %97 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %33 = load i32, i32 addrspace(1)* %1, align 4, !tbaa !7, !amdgpu.noclobber !5\l  %34 = add i32 %33, %23\l  store i32 %34, i32 addrspace(1)* %1, align 4, !tbaa !7\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 1\l  %36 = load i32, i32 addrspace(1)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %37 = add i32 %36, %24\l  store i32 %37, i32 addrspace(1)* %35, align 4, !tbaa !7\l  %38 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 2\l  %39 = load i32, i32 addrspace(1)* %38, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %40 = add i32 %39, %25\l  store i32 %40, i32 addrspace(1)* %38, align 4, !tbaa !7\l  %41 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 3\l  %42 = load i32, i32 addrspace(1)* %41, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %43 = add i32 %42, %26\l  store i32 %43, i32 addrspace(1)* %41, align 4, !tbaa !7\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 4\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %46 = add i32 %45, %27\l  store i32 %46, i32 addrspace(1)* %44, align 4, !tbaa !7\l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 5\l  %48 = load i32, i32 addrspace(1)* %47, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %49 = add i32 %48, %28\l  store i32 %49, i32 addrspace(1)* %47, align 4, !tbaa !7\l  %50 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 6\l  %51 = load i32, i32 addrspace(1)* %50, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %52 = add i32 %51, %29\l  store i32 %52, i32 addrspace(1)* %50, align 4, !tbaa !7\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 7\l  %54 = load i32, i32 addrspace(1)* %53, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %55 = add i32 %54, %30\l  store i32 %55, i32 addrspace(1)* %53, align 4, !tbaa !7\l  %56 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 8\l  %57 = load i32, i32 addrspace(1)* %56, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %58 = add i32 %57, %31\l  store i32 %58, i32 addrspace(1)* %56, align 4, !tbaa !7\l  %59 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 9\l  %60 = load i32, i32 addrspace(1)* %59, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %61 = add i32 %60, %32\l  store i32 %61, i32 addrspace(1)* %59, align 4, !tbaa !7\l  ret void\l}"];
	Node0x58f7fa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%62:\l62:                                               \l  %63 = phi i32 [ %108, %97 ], [ %16, %4 ]\l  %64 = phi i32 [ %107, %97 ], [ 0, %4 ]\l  %65 = phi i32 [ %106, %97 ], [ 0, %4 ]\l  %66 = phi i32 [ %105, %97 ], [ 0, %4 ]\l  %67 = phi i32 [ %104, %97 ], [ 0, %4 ]\l  %68 = phi i32 [ %103, %97 ], [ 0, %4 ]\l  %69 = phi i32 [ %102, %97 ], [ 0, %4 ]\l  %70 = phi i32 [ %101, %97 ], [ 0, %4 ]\l  %71 = phi i32 [ %100, %97 ], [ 0, %4 ]\l  %72 = phi i32 [ %99, %97 ], [ 0, %4 ]\l  %73 = phi i32 [ %98, %97 ], [ 0, %4 ]\l  %74 = zext i32 %63 to i64\l  %75 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %74\l  %76 = load i8, i8 addrspace(1)* %75, align 1, !tbaa !11, !amdgpu.noclobber !5\l  switch i8 %76, label %97 [\l    i8 48, label %77\l    i8 49, label %79\l    i8 50, label %81\l    i8 51, label %83\l    i8 52, label %85\l    i8 53, label %87\l    i8 54, label %89\l    i8 55, label %91\l    i8 56, label %93\l    i8 57, label %95\l  ]\l|{<s0>def|<s1>48|<s2>49|<s3>50|<s4>51|<s5>52|<s6>53|<s7>54|<s8>55|<s9>56|<s10>57}}"];
	Node0x58f7fa0:s0 -> Node0x58f81d0;
	Node0x58f7fa0:s1 -> Node0x58fc560;
	Node0x58f7fa0:s2 -> Node0x58fc620;
	Node0x58f7fa0:s3 -> Node0x58fc6e0;
	Node0x58f7fa0:s4 -> Node0x58fc7a0;
	Node0x58f7fa0:s5 -> Node0x58fc860;
	Node0x58f7fa0:s6 -> Node0x58fc920;
	Node0x58f7fa0:s7 -> Node0x58fc9e0;
	Node0x58f7fa0:s8 -> Node0x58fcaa0;
	Node0x58f7fa0:s9 -> Node0x58fcb60;
	Node0x58f7fa0:s10 -> Node0x58fcc20;
	Node0x58fc560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%77:\l77:                                               \l  %78 = add i32 %73, 1\l  br label %97\l}"];
	Node0x58fc560 -> Node0x58f81d0;
	Node0x58fc620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%79:\l79:                                               \l  %80 = add i32 %72, 1\l  br label %97\l}"];
	Node0x58fc620 -> Node0x58f81d0;
	Node0x58fc6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%81:\l81:                                               \l  %82 = add i32 %71, 1\l  br label %97\l}"];
	Node0x58fc6e0 -> Node0x58f81d0;
	Node0x58fc7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%83:\l83:                                               \l  %84 = add i32 %70, 1\l  br label %97\l}"];
	Node0x58fc7a0 -> Node0x58f81d0;
	Node0x58fc860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%85:\l85:                                               \l  %86 = add i32 %69, 1\l  br label %97\l}"];
	Node0x58fc860 -> Node0x58f81d0;
	Node0x58fc920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%87:\l87:                                               \l  %88 = add i32 %68, 1\l  br label %97\l}"];
	Node0x58fc920 -> Node0x58f81d0;
	Node0x58fc9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%89:\l89:                                               \l  %90 = add i32 %67, 1\l  br label %97\l}"];
	Node0x58fc9e0 -> Node0x58f81d0;
	Node0x58fcaa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%91:\l91:                                               \l  %92 = add i32 %66, 1\l  br label %97\l}"];
	Node0x58fcaa0 -> Node0x58f81d0;
	Node0x58fcb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%93:\l93:                                               \l  %94 = add i32 %65, 1\l  br label %97\l}"];
	Node0x58fcb60 -> Node0x58f81d0;
	Node0x58fcc20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%95:\l95:                                               \l  %96 = add i32 %64, 1\l  br label %97\l}"];
	Node0x58fcc20 -> Node0x58f81d0;
	Node0x58f81d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%97:\l97:                                               \l  %98 = phi i32 [ %78, %77 ], [ %73, %79 ], [ %73, %81 ], [ %73, %83 ], [ %73,\l... %85 ], [ %73, %87 ], [ %73, %89 ], [ %73, %91 ], [ %73, %93 ], [ %73, %95 ],\l... [ %73, %62 ]\l  %99 = phi i32 [ %72, %77 ], [ %80, %79 ], [ %72, %81 ], [ %72, %83 ], [ %72,\l... %85 ], [ %72, %87 ], [ %72, %89 ], [ %72, %91 ], [ %72, %93 ], [ %72, %95 ],\l... [ %72, %62 ]\l  %100 = phi i32 [ %71, %77 ], [ %71, %79 ], [ %82, %81 ], [ %71, %83 ], [\l... %71, %85 ], [ %71, %87 ], [ %71, %89 ], [ %71, %91 ], [ %71, %93 ], [ %71,\l... %95 ], [ %71, %62 ]\l  %101 = phi i32 [ %70, %77 ], [ %70, %79 ], [ %70, %81 ], [ %84, %83 ], [\l... %70, %85 ], [ %70, %87 ], [ %70, %89 ], [ %70, %91 ], [ %70, %93 ], [ %70,\l... %95 ], [ %70, %62 ]\l  %102 = phi i32 [ %69, %77 ], [ %69, %79 ], [ %69, %81 ], [ %69, %83 ], [\l... %86, %85 ], [ %69, %87 ], [ %69, %89 ], [ %69, %91 ], [ %69, %93 ], [ %69,\l... %95 ], [ %69, %62 ]\l  %103 = phi i32 [ %68, %77 ], [ %68, %79 ], [ %68, %81 ], [ %68, %83 ], [\l... %68, %85 ], [ %88, %87 ], [ %68, %89 ], [ %68, %91 ], [ %68, %93 ], [ %68,\l... %95 ], [ %68, %62 ]\l  %104 = phi i32 [ %67, %77 ], [ %67, %79 ], [ %67, %81 ], [ %67, %83 ], [\l... %67, %85 ], [ %67, %87 ], [ %90, %89 ], [ %67, %91 ], [ %67, %93 ], [ %67,\l... %95 ], [ %67, %62 ]\l  %105 = phi i32 [ %66, %77 ], [ %66, %79 ], [ %66, %81 ], [ %66, %83 ], [\l... %66, %85 ], [ %66, %87 ], [ %66, %89 ], [ %92, %91 ], [ %66, %93 ], [ %66,\l... %95 ], [ %66, %62 ]\l  %106 = phi i32 [ %65, %77 ], [ %65, %79 ], [ %65, %81 ], [ %65, %83 ], [\l... %65, %85 ], [ %65, %87 ], [ %65, %89 ], [ %65, %91 ], [ %94, %93 ], [ %65,\l... %95 ], [ %65, %62 ]\l  %107 = phi i32 [ %64, %77 ], [ %64, %79 ], [ %64, %81 ], [ %64, %83 ], [\l... %64, %85 ], [ %64, %87 ], [ %64, %89 ], [ %64, %91 ], [ %64, %93 ], [ %96,\l... %95 ], [ %64, %62 ]\l  %108 = add nuw i32 %63, 1\l  %109 = icmp ult i32 %108, %20\l  br i1 %109, label %62, label %22, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x58f81d0:s0 -> Node0x58f7fa0;
	Node0x58f81d0:s1 -> Node0x58f8030;
}
