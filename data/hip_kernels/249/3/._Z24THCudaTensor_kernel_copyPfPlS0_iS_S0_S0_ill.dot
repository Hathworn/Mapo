digraph "CFG for '_Z24THCudaTensor_kernel_copyPfPlS0_iS_S0_S0_ill' function" {
	label="CFG for '_Z24THCudaTensor_kernel_copyPfPlS0_iS_S0_S0_ill' function";

	Node0x5ad6a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !4\l  %16 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !13, !invariant.load\l... !14\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %15, %19\l  %21 = mul i32 %20, %19\l  %22 = icmp ugt i32 %15, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 16\l  %26 = bitcast i8 addrspace(4)* %25 to i32 addrspace(4)*\l  %27 = load i32, i32 addrspace(4)* %26, align 8, !tbaa !15\l  %28 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 2, !range !13, !invariant.load\l... !14\l  %31 = zext i16 %30 to i32\l  %32 = udiv i32 %27, %31\l  %33 = mul i32 %32, %31\l  %34 = icmp ugt i32 %27, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %11\l  %38 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %39 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %40 = add i32 %37, %38\l  %41 = mul i32 %40, %24\l  %42 = add i32 %41, %39\l  %43 = mul i32 %42, %31\l  %44 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %45 = add i32 %43, %44\l  %46 = zext i32 %45 to i64\l  %47 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %48 = add nsw i32 %7, -1\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds i64, i64 addrspace(1)* %6, i64 %49\l  %51 = load i64, i64 addrspace(1)* %50, align 8, !tbaa !17, !amdgpu.noclobber\l... !14\l  %52 = add nsw i32 %3, -1\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %53\l  %55 = load i64, i64 addrspace(1)* %54, align 8, !tbaa !17, !amdgpu.noclobber\l... !14\l  %56 = mul nsw i64 %55, %9\l  %57 = add nuw nsw i64 %46, 1\l  %58 = mul nsw i64 %57, %9\l  %59 = icmp sgt i64 %58, %8\l  br i1 %59, label %197, label %60\l|{<s0>T|<s1>F}}"];
	Node0x5ad6a10:s0 -> Node0x5adcce0;
	Node0x5ad6a10:s1 -> Node0x5adcd70;
	Node0x5adcd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%60:\l60:                                               \l  %61 = mul nsw i64 %46, %9\l  %62 = icmp sgt i32 %3, 0\l  br i1 %62, label %63, label %84\l|{<s0>T|<s1>F}}"];
	Node0x5adcd70:s0 -> Node0x5add000;
	Node0x5adcd70:s1 -> Node0x5add050;
	Node0x5add000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%63:\l63:                                               \l  %64 = and i32 %3, 1\l  %65 = icmp eq i32 %52, 0\l  br i1 %65, label %70, label %66\l|{<s0>T|<s1>F}}"];
	Node0x5add000:s0 -> Node0x5ada810;
	Node0x5add000:s1 -> Node0x5ada860;
	Node0x5ada860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%66:\l66:                                               \l  %67 = and i32 %3, -2\l  br label %92\l}"];
	Node0x5ada860 -> Node0x5ada920;
	Node0x5add810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%68:\l68:                                               \l  %69 = zext i32 %121 to i64\l  br label %70\l}"];
	Node0x5add810 -> Node0x5ada810;
	Node0x5ada810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%70:\l70:                                               \l  %71 = phi i64 [ undef, %63 ], [ %118, %68 ]\l  %72 = phi i64 [ 0, %63 ], [ %69, %68 ]\l  %73 = phi i64 [ %61, %63 ], [ %120, %68 ]\l  %74 = phi i64 [ 0, %63 ], [ %118, %68 ]\l  %75 = icmp eq i32 %64, 0\l  br i1 %75, label %84, label %76\l|{<s0>T|<s1>F}}"];
	Node0x5ada810:s0 -> Node0x5add050;
	Node0x5ada810:s1 -> Node0x5ade1f0;
	Node0x5ade1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%76:\l76:                                               \l  %77 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %72\l  %78 = load i64, i64 addrspace(1)* %77, align 8, !tbaa !17, !amdgpu.noclobber\l... !14\l  %79 = sdiv i64 %73, %78\l  %80 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %72\l  %81 = load i64, i64 addrspace(1)* %80, align 8, !tbaa !17, !amdgpu.noclobber\l... !14\l  %82 = mul nsw i64 %81, %79\l  %83 = add nsw i64 %82, %74\l  br label %84\l}"];
	Node0x5ade1f0 -> Node0x5add050;
	Node0x5add050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%84:\l84:                                               \l  %85 = phi i64 [ 0, %60 ], [ %71, %70 ], [ %83, %76 ]\l  %86 = icmp sgt i32 %7, 0\l  br i1 %86, label %87, label %140\l|{<s0>T|<s1>F}}"];
	Node0x5add050:s0 -> Node0x5ade940;
	Node0x5add050:s1 -> Node0x5ade990;
	Node0x5ade940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%87:\l87:                                               \l  %88 = and i32 %7, 1\l  %89 = icmp eq i32 %7, 1\l  br i1 %89, label %126, label %90\l|{<s0>T|<s1>F}}"];
	Node0x5ade940:s0 -> Node0x5adebf0;
	Node0x5ade940:s1 -> Node0x5adec40;
	Node0x5adec40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%90:\l90:                                               \l  %91 = and i32 %7, -2\l  br label %151\l}"];
	Node0x5adec40 -> Node0x5adee10;
	Node0x5ada920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%92:\l92:                                               \l  %93 = phi i32 [ 0, %66 ], [ %121, %92 ]\l  %94 = phi i64 [ %61, %66 ], [ %120, %92 ]\l  %95 = phi i64 [ 0, %66 ], [ %118, %92 ]\l  %96 = phi i32 [ 0, %66 ], [ %122, %92 ]\l  %97 = zext i32 %93 to i64\l  %98 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %97\l  %99 = load i64, i64 addrspace(1)* %98, align 8, !tbaa !17, !amdgpu.noclobber\l... !14\l  %100 = freeze i64 %94\l  %101 = freeze i64 %99\l  %102 = sdiv i64 %100, %101\l  %103 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %97\l  %104 = load i64, i64 addrspace(1)* %103, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %105 = mul nsw i64 %104, %102\l  %106 = add nsw i64 %105, %95\l  %107 = mul i64 %102, %101\l  %108 = sub i64 %100, %107\l  %109 = or i32 %93, 1\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %110\l  %112 = load i64, i64 addrspace(1)* %111, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %113 = freeze i64 %112\l  %114 = sdiv i64 %108, %113\l  %115 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %110\l  %116 = load i64, i64 addrspace(1)* %115, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %117 = mul nsw i64 %116, %114\l  %118 = add nsw i64 %117, %106\l  %119 = mul i64 %114, %113\l  %120 = sub i64 %108, %119\l  %121 = add nuw nsw i32 %93, 2\l  %122 = add i32 %96, 2\l  %123 = icmp eq i32 %122, %67\l  br i1 %123, label %68, label %92, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5ada920:s0 -> Node0x5add810;
	Node0x5ada920:s1 -> Node0x5ada920;
	Node0x5ae0240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%124:\l124:                                              \l  %125 = zext i32 %180 to i64\l  br label %126\l}"];
	Node0x5ae0240 -> Node0x5adebf0;
	Node0x5adebf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%126:\l126:                                              \l  %127 = phi i64 [ undef, %87 ], [ %177, %124 ]\l  %128 = phi i64 [ 0, %87 ], [ %125, %124 ]\l  %129 = phi i64 [ %61, %87 ], [ %179, %124 ]\l  %130 = phi i64 [ 0, %87 ], [ %177, %124 ]\l  %131 = icmp eq i32 %88, 0\l  br i1 %131, label %140, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5adebf0:s0 -> Node0x5ade990;
	Node0x5adebf0:s1 -> Node0x5add440;
	Node0x5add440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%132:\l132:                                              \l  %133 = getelementptr inbounds i64, i64 addrspace(1)* %5, i64 %128\l  %134 = load i64, i64 addrspace(1)* %133, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %135 = sdiv i64 %129, %134\l  %136 = getelementptr inbounds i64, i64 addrspace(1)* %6, i64 %128\l  %137 = load i64, i64 addrspace(1)* %136, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %138 = mul nsw i64 %137, %135\l  %139 = add nsw i64 %138, %130\l  br label %140\l}"];
	Node0x5add440 -> Node0x5ade990;
	Node0x5ade990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%140:\l140:                                              \l  %141 = phi i64 [ 0, %84 ], [ %127, %126 ], [ %139, %132 ]\l  %142 = trunc i64 %51 to i32\l  %143 = trunc i64 %55 to i32\l  %144 = mul i32 %47, %143\l  %145 = sext i32 %144 to i64\l  %146 = icmp sgt i64 %56, %145\l  br i1 %146, label %147, label %197\l|{<s0>T|<s1>F}}"];
	Node0x5ade990:s0 -> Node0x5ae13f0;
	Node0x5ade990:s1 -> Node0x5adcce0;
	Node0x5ae13f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%147:\l147:                                              \l  %148 = mul i32 %47, %142\l  %149 = mul i32 %142, %19\l  %150 = mul i32 %143, %19\l  br label %183\l}"];
	Node0x5ae13f0 -> Node0x5ae16a0;
	Node0x5adee10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%151:\l151:                                              \l  %152 = phi i32 [ 0, %90 ], [ %180, %151 ]\l  %153 = phi i64 [ %61, %90 ], [ %179, %151 ]\l  %154 = phi i64 [ 0, %90 ], [ %177, %151 ]\l  %155 = phi i32 [ 0, %90 ], [ %181, %151 ]\l  %156 = zext i32 %152 to i64\l  %157 = getelementptr inbounds i64, i64 addrspace(1)* %5, i64 %156\l  %158 = load i64, i64 addrspace(1)* %157, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %159 = freeze i64 %153\l  %160 = freeze i64 %158\l  %161 = sdiv i64 %159, %160\l  %162 = getelementptr inbounds i64, i64 addrspace(1)* %6, i64 %156\l  %163 = load i64, i64 addrspace(1)* %162, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %164 = mul nsw i64 %163, %161\l  %165 = add nsw i64 %164, %154\l  %166 = mul i64 %161, %160\l  %167 = sub i64 %159, %166\l  %168 = or i32 %152, 1\l  %169 = zext i32 %168 to i64\l  %170 = getelementptr inbounds i64, i64 addrspace(1)* %5, i64 %169\l  %171 = load i64, i64 addrspace(1)* %170, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %172 = freeze i64 %171\l  %173 = sdiv i64 %167, %172\l  %174 = getelementptr inbounds i64, i64 addrspace(1)* %6, i64 %169\l  %175 = load i64, i64 addrspace(1)* %174, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %176 = mul nsw i64 %175, %173\l  %177 = add nsw i64 %176, %165\l  %178 = mul i64 %173, %172\l  %179 = sub i64 %167, %178\l  %180 = add nuw nsw i32 %152, 2\l  %181 = add i32 %155, 2\l  %182 = icmp eq i32 %181, %91\l  br i1 %182, label %124, label %151, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5adee10:s0 -> Node0x5ae0240;
	Node0x5adee10:s1 -> Node0x5adee10;
	Node0x5ae16a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%183:\l183:                                              \l  %184 = phi i64 [ %145, %147 ], [ %195, %183 ]\l  %185 = phi i32 [ %148, %147 ], [ %193, %183 ]\l  %186 = trunc i64 %184 to i32\l  %187 = sext i32 %185 to i64\l  %188 = add nsw i64 %141, %187\l  %189 = getelementptr inbounds float, float addrspace(1)* %4, i64 %188\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !24\l  %191 = add nsw i64 %184, %85\l  %192 = getelementptr inbounds float, float addrspace(1)* %0, i64 %191\l  store float %190, float addrspace(1)* %192, align 4, !tbaa !24\l  %193 = add i32 %185, %149\l  %194 = add i32 %150, %186\l  %195 = sext i32 %194 to i64\l  %196 = icmp sgt i64 %56, %195\l  br i1 %196, label %183, label %197, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5ae16a0:s0 -> Node0x5ae16a0;
	Node0x5ae16a0:s1 -> Node0x5adcce0;
	Node0x5adcce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%197:\l197:                                              \l  ret void\l}"];
}
