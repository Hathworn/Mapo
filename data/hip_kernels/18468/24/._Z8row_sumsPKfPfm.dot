digraph "CFG for '_Z8row_sumsPKfPfm' function" {
	label="CFG for '_Z8row_sumsPKfPfm' function";

	Node0x4fd8ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = add i32 %11, %4\l  %13 = sext i32 %12 to i64\l  %14 = icmp ult i64 %13, %2\l  br i1 %14, label %15, label %86\l|{<s0>T|<s1>F}}"];
	Node0x4fd8ce0:s0 -> Node0x4fdac20;
	Node0x4fd8ce0:s1 -> Node0x4fdacb0;
	Node0x4fdac20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = mul i64 %13, %2\l  %17 = and i64 %2, 7\l  %18 = icmp ult i64 %2, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x4fdac20:s0 -> Node0x4fdb050;
	Node0x4fdac20:s1 -> Node0x4fdb0a0;
	Node0x4fdb0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i64 %2, -8\l  br label %40\l}"];
	Node0x4fdb0a0 -> Node0x4fdb2a0;
	Node0x4fdb050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %15 ], [ %82, %40 ]\l  %23 = phi i64 [ 0, %15 ], [ %83, %40 ]\l  %24 = phi float [ 0.000000e+00, %15 ], [ %82, %40 ]\l  %25 = icmp eq i64 %17, 0\l  br i1 %25, label %37, label %26\l|{<s0>T|<s1>F}}"];
	Node0x4fdb050:s0 -> Node0x4fdc540;
	Node0x4fdb050:s1 -> Node0x4fdc5d0;
	Node0x4fdc5d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i64 [ %34, %26 ], [ %23, %21 ]\l  %28 = phi float [ %33, %26 ], [ %24, %21 ]\l  %29 = phi i64 [ %35, %26 ], [ 0, %21 ]\l  %30 = add i64 %27, %16\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %33 = fadd contract float %28, %32\l  %34 = add nuw i64 %27, 1\l  %35 = add i64 %29, 1\l  %36 = icmp eq i64 %35, %17\l  br i1 %36, label %37, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4fdc5d0:s0 -> Node0x4fdc540;
	Node0x4fdc5d0:s1 -> Node0x4fdc5d0;
	Node0x4fdc540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = phi float [ %22, %21 ], [ %33, %26 ]\l  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %13\l  store float %38, float addrspace(1)* %39, align 4, !tbaa !7\l  br label %86\l}"];
	Node0x4fdc540 -> Node0x4fdacb0;
	Node0x4fdb2a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%40:\l40:                                               \l  %41 = phi i64 [ 0, %19 ], [ %83, %40 ]\l  %42 = phi float [ 0.000000e+00, %19 ], [ %82, %40 ]\l  %43 = phi i64 [ 0, %19 ], [ %84, %40 ]\l  %44 = add i64 %41, %16\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %47 = fadd contract float %42, %46\l  %48 = or i64 %41, 1\l  %49 = add i64 %48, %16\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %52 = fadd contract float %47, %51\l  %53 = or i64 %41, 2\l  %54 = add i64 %53, %16\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %57 = fadd contract float %52, %56\l  %58 = or i64 %41, 3\l  %59 = add i64 %58, %16\l  %60 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %62 = fadd contract float %57, %61\l  %63 = or i64 %41, 4\l  %64 = add i64 %63, %16\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %67 = fadd contract float %62, %66\l  %68 = or i64 %41, 5\l  %69 = add i64 %68, %16\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %72 = fadd contract float %67, %71\l  %73 = or i64 %41, 6\l  %74 = add i64 %73, %16\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %77 = fadd contract float %72, %76\l  %78 = or i64 %41, 7\l  %79 = add i64 %78, %16\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %82 = fadd contract float %77, %81\l  %83 = add nuw i64 %41, 8\l  %84 = add i64 %43, 8\l  %85 = icmp eq i64 %84, %20\l  br i1 %85, label %21, label %40, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4fdb2a0:s0 -> Node0x4fdb050;
	Node0x4fdb2a0:s1 -> Node0x4fdb2a0;
	Node0x4fdacb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%86:\l86:                                               \l  ret void\l}"];
}
