digraph "CFG for '_Z26extract_with_interpolationiPfS_S_iiii' function" {
	label="CFG for '_Z26extract_with_interpolationiPfS_S_iiii' function";

	Node0x5ef32c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !6\l  %18 = mul i32 %9, %14\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %20 = add i32 %18, %19\l  %21 = icmp slt i32 %20, %0\l  br i1 %21, label %22, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5ef32c0:s0 -> Node0x5ef5540;
	Node0x5ef32c0:s1 -> Node0x5ef55d0;
	Node0x5ef5540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%22:\l22:                                               \l  %23 = add nsw i32 %7, -1\l  %24 = add nsw i32 %6, -1\l  %25 = icmp sgt i32 %5, 0\l  %26 = udiv i32 %17, %14\l  %27 = mul i32 %26, %14\l  %28 = icmp ugt i32 %17, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = mul i32 %30, %14\l  %32 = and i32 %5, 1\l  %33 = icmp eq i32 %5, 1\l  %34 = and i32 %5, -2\l  %35 = icmp eq i32 %32, 0\l  br label %37\l}"];
	Node0x5ef5540 -> Node0x5ef4e80;
	Node0x5ef55d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%36:\l36:                                               \l  ret void\l}"];
	Node0x5ef4e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%37:\l37:                                               \l  %38 = phi i32 [ %20, %22 ], [ %127, %126 ]\l  %39 = freeze i32 %38\l  %40 = freeze i32 %4\l  %41 = sdiv i32 %39, %40\l  %42 = mul i32 %41, %5\l  %43 = shl nsw i32 %38, 1\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %2, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !16\l  %47 = add nuw nsw i32 %43, 1\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %2, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !16\l  %51 = tail call float @llvm.floor.f32(float %46)\l  %52 = fptosi float %51 to i32\l  %53 = add nsw i32 %52, 1\l  %54 = tail call float @llvm.floor.f32(float %50)\l  %55 = fptosi float %54 to i32\l  %56 = add nsw i32 %55, 1\l  %57 = tail call i32 @llvm.smin.i32(i32 %23, i32 %52)\l  %58 = icmp sgt i32 %52, 0\l  %59 = select i1 %58, i32 %57, i32 0\l  %60 = tail call i32 @llvm.smin.i32(i32 %24, i32 %55)\l  %61 = icmp sgt i32 %55, 0\l  %62 = select i1 %61, i32 %60, i32 0\l  %63 = icmp slt i32 %52, 0\l  %64 = tail call i32 @llvm.smin.i32(i32 %53, i32 %23)\l  %65 = select i1 %63, i32 0, i32 %64\l  %66 = icmp slt i32 %55, 0\l  %67 = tail call i32 @llvm.smin.i32(i32 %56, i32 %24)\l  %68 = select i1 %66, i32 0, i32 %67\l  %69 = sitofp i32 %65 to float\l  %70 = fsub contract float %69, %46\l  %71 = sitofp i32 %59 to float\l  %72 = fsub contract float %46, %71\l  %73 = sitofp i32 %68 to float\l  %74 = fsub contract float %73, %50\l  %75 = sitofp i32 %62 to float\l  %76 = fsub contract float %50, %75\l  %77 = icmp eq i32 %59, %65\l  %78 = select i1 %77, float 1.000000e+00, float %70\l  %79 = select i1 %77, float 0.000000e+00, float %72\l  %80 = icmp eq i32 %62, %68\l  %81 = select i1 %80, float 1.000000e+00, float %74\l  %82 = select i1 %80, float 0.000000e+00, float %76\l  br i1 %25, label %83, label %126\l|{<s0>T|<s1>F}}"];
	Node0x5ef4e80:s0 -> Node0x5ef93b0;
	Node0x5ef4e80:s1 -> Node0x5ef6110;
	Node0x5ef93b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%83:\l83:                                               \l  %84 = fmul contract float %78, %81\l  %85 = fmul contract float %82, %78\l  %86 = fmul contract float %79, %81\l  %87 = fmul contract float %79, %82\l  %88 = mul i32 %41, %40\l  %89 = sub i32 %39, %88\l  br i1 %33, label %90, label %129\l|{<s0>T|<s1>F}}"];
	Node0x5ef93b0:s0 -> Node0x5ef9850;
	Node0x5ef93b0:s1 -> Node0x5ef98a0;
	Node0x5ef9850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%90:\l90:                                               \l  %91 = phi i32 [ 0, %83 ], [ %199, %129 ]\l  br i1 %35, label %126, label %92\l|{<s0>T|<s1>F}}"];
	Node0x5ef9850:s0 -> Node0x5ef6110;
	Node0x5ef9850:s1 -> Node0x5ef9a90;
	Node0x5ef9a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%92:\l92:                                               \l  %93 = add i32 %91, %42\l  %94 = mul nsw i32 %93, %6\l  %95 = add nsw i32 %94, %62\l  %96 = mul nsw i32 %95, %7\l  %97 = add nsw i32 %96, %59\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = fmul contract float %84, %100\l  %102 = add nsw i32 %94, %68\l  %103 = mul nsw i32 %102, %7\l  %104 = add nsw i32 %103, %59\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = fmul contract float %85, %107\l  %109 = fadd contract float %101, %108\l  %110 = add nsw i32 %96, %65\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !16\l  %114 = fmul contract float %86, %113\l  %115 = fadd contract float %109, %114\l  %116 = add nsw i32 %103, %65\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = fmul contract float %87, %119\l  %121 = fadd contract float %115, %120\l  %122 = mul i32 %93, %4\l  %123 = add i32 %89, %122\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %3, i64 %124\l  store float %121, float addrspace(1)* %125, align 4, !tbaa !16\l  br label %126\l}"];
	Node0x5ef9a90 -> Node0x5ef6110;
	Node0x5ef6110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%126:\l126:                                              \l  %127 = add i32 %31, %38\l  %128 = icmp slt i32 %127, %0\l  br i1 %128, label %37, label %36, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5ef6110:s0 -> Node0x5ef4e80;
	Node0x5ef6110:s1 -> Node0x5ef55d0;
	Node0x5ef98a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%129:\l129:                                              \l  %130 = phi i32 [ %199, %129 ], [ 0, %83 ]\l  %131 = phi i32 [ %200, %129 ], [ 0, %83 ]\l  %132 = add i32 %130, %42\l  %133 = mul nsw i32 %132, %6\l  %134 = add nsw i32 %133, %62\l  %135 = mul nsw i32 %134, %7\l  %136 = add nsw i32 %135, %59\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = fmul contract float %84, %139\l  %141 = add nsw i32 %133, %68\l  %142 = mul nsw i32 %141, %7\l  %143 = add nsw i32 %142, %59\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16\l  %147 = fmul contract float %85, %146\l  %148 = fadd contract float %140, %147\l  %149 = add nsw i32 %135, %65\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %1, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !16\l  %153 = fmul contract float %86, %152\l  %154 = fadd contract float %148, %153\l  %155 = add nsw i32 %142, %65\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !16\l  %159 = fmul contract float %87, %158\l  %160 = fadd contract float %154, %159\l  %161 = mul i32 %132, %4\l  %162 = add i32 %89, %161\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %3, i64 %163\l  store float %160, float addrspace(1)* %164, align 4, !tbaa !16\l  %165 = or i32 %130, 1\l  %166 = add i32 %165, %42\l  %167 = mul nsw i32 %166, %6\l  %168 = add nsw i32 %167, %62\l  %169 = mul nsw i32 %168, %7\l  %170 = add nsw i32 %169, %59\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %1, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !16\l  %174 = fmul contract float %84, %173\l  %175 = add nsw i32 %167, %68\l  %176 = mul nsw i32 %175, %7\l  %177 = add nsw i32 %176, %59\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds float, float addrspace(1)* %1, i64 %178\l  %180 = load float, float addrspace(1)* %179, align 4, !tbaa !16\l  %181 = fmul contract float %85, %180\l  %182 = fadd contract float %174, %181\l  %183 = add nsw i32 %169, %65\l  %184 = sext i32 %183 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %1, i64 %184\l  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !16\l  %187 = fmul contract float %86, %186\l  %188 = fadd contract float %182, %187\l  %189 = add nsw i32 %176, %65\l  %190 = sext i32 %189 to i64\l  %191 = getelementptr inbounds float, float addrspace(1)* %1, i64 %190\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !16\l  %193 = fmul contract float %87, %192\l  %194 = fadd contract float %188, %193\l  %195 = mul i32 %166, %4\l  %196 = add i32 %89, %195\l  %197 = sext i32 %196 to i64\l  %198 = getelementptr inbounds float, float addrspace(1)* %3, i64 %197\l  store float %194, float addrspace(1)* %198, align 4, !tbaa !16\l  %199 = add nuw nsw i32 %130, 2\l  %200 = add i32 %131, 2\l  %201 = icmp eq i32 %200, %34\l  br i1 %201, label %90, label %129, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5ef98a0:s0 -> Node0x5ef9850;
	Node0x5ef98a0:s1 -> Node0x5ef98a0;
}
