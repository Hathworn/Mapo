digraph "CFG for '_Z22calculateSpaceTimeKSHMP10spacePointiiffffP9blackHoleii' function" {
	label="CFG for '_Z22calculateSpaceTimeKSHMP10spacePointiiffffP9blackHoleii' function";

	Node0x4d767e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %12, %17\l  %19 = add i32 %18, %11\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %22 = getelementptr i8, i8 addrspace(4)* %13, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !5, !invariant.load !6\l  %25 = zext i16 %24 to i32\l  %26 = mul i32 %21, %25\l  %27 = add i32 %26, %20\l  %28 = icmp eq i32 %19, 0\l  %29 = icmp eq i32 %27, 0\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %67\l|{<s0>T|<s1>F}}"];
	Node0x4d767e0:s0 -> Node0x4d7a930;
	Node0x4d767e0:s1 -> Node0x4d7a9c0;
	Node0x4d7a930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%31:\l31:                                               \l  %32 = bitcast %struct.blackHole addrspace(1)* %7 to i8 addrspace(1)*\l  %33 = sext i32 %9 to i64\l  %34 = icmp ugt i32 %9, 3\l  br i1 %34, label %35, label %53\l|{<s0>T|<s1>F}}"];
	Node0x4d7a930:s0 -> Node0x4d7ad80;
	Node0x4d7a930:s1 -> Node0x4d7ae10;
	Node0x4d7ad80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%35:\l35:                                               \l  %36 = phi i8 addrspace(1)* [ %50, %35 ], [ %32, %31 ]\l  %37 = phi i8 addrspace(3)* [ %51, %35 ], [ bitcast ([0 x float]\l... addrspace(3)* @s to i8 addrspace(3)*), %31 ]\l  %38 = phi i64 [ %49, %35 ], [ %33, %31 ]\l  %39 = load i8, i8 addrspace(1)* %36, align 1, !tbaa !7\l  store i8 %39, i8 addrspace(3)* %37, align 1, !tbaa !7\l  %40 = getelementptr inbounds i8, i8 addrspace(1)* %36, i64 1\l  %41 = load i8, i8 addrspace(1)* %40, align 1, !tbaa !7\l  %42 = getelementptr inbounds i8, i8 addrspace(3)* %37, i32 1\l  store i8 %41, i8 addrspace(3)* %42, align 1, !tbaa !7\l  %43 = getelementptr inbounds i8, i8 addrspace(1)* %36, i64 2\l  %44 = load i8, i8 addrspace(1)* %43, align 1, !tbaa !7\l  %45 = getelementptr inbounds i8, i8 addrspace(3)* %37, i32 2\l  store i8 %44, i8 addrspace(3)* %45, align 1, !tbaa !7\l  %46 = getelementptr inbounds i8, i8 addrspace(1)* %36, i64 3\l  %47 = load i8, i8 addrspace(1)* %46, align 1, !tbaa !7\l  %48 = getelementptr inbounds i8, i8 addrspace(3)* %37, i32 3\l  store i8 %47, i8 addrspace(3)* %48, align 1, !tbaa !7\l  %49 = add i64 %38, -4\l  %50 = getelementptr inbounds i8, i8 addrspace(1)* %36, i64 4\l  %51 = getelementptr inbounds i8, i8 addrspace(3)* %37, i32 4\l  %52 = icmp ugt i64 %49, 3\l  br i1 %52, label %35, label %53, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4d7ad80:s0 -> Node0x4d7ad80;
	Node0x4d7ad80:s1 -> Node0x4d7ae10;
	Node0x4d7ae10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%53:\l53:                                               \l  %54 = phi i64 [ %33, %31 ], [ %49, %35 ]\l  %55 = phi i8 addrspace(3)* [ bitcast ([0 x float] addrspace(3)* @s to i8\l... addrspace(3)*), %31 ], [ %51, %35 ]\l  %56 = phi i8 addrspace(1)* [ %32, %31 ], [ %50, %35 ]\l  switch i64 %54, label %67 [\l    i64 3, label %57\l    i64 2, label %61\l    i64 1, label %65\l  ]\l|{<s0>def|<s1>3|<s2>2|<s3>1}}"];
	Node0x4d7ae10:s0 -> Node0x4d7a9c0;
	Node0x4d7ae10:s1 -> Node0x4d7ca90;
	Node0x4d7ae10:s2 -> Node0x4d7cae0;
	Node0x4d7ae10:s3 -> Node0x4d7cb70;
	Node0x4d7ca90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%57:\l57:                                               \l  %58 = getelementptr inbounds i8, i8 addrspace(1)* %56, i64 2\l  %59 = load i8, i8 addrspace(1)* %58, align 1, !tbaa !7\l  %60 = getelementptr inbounds i8, i8 addrspace(3)* %55, i32 2\l  store i8 %59, i8 addrspace(3)* %60, align 1, !tbaa !7\l  br label %61\l}"];
	Node0x4d7ca90 -> Node0x4d7cae0;
	Node0x4d7cae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%61:\l61:                                               \l  %62 = getelementptr inbounds i8, i8 addrspace(1)* %56, i64 1\l  %63 = load i8, i8 addrspace(1)* %62, align 1, !tbaa !7\l  %64 = getelementptr inbounds i8, i8 addrspace(3)* %55, i32 1\l  store i8 %63, i8 addrspace(3)* %64, align 1, !tbaa !7\l  br label %65\l}"];
	Node0x4d7cae0 -> Node0x4d7cb70;
	Node0x4d7cb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%65:\l65:                                               \l  %66 = load i8, i8 addrspace(1)* %56, align 1, !tbaa !7\l  store i8 %66, i8 addrspace(3)* %55, align 1, !tbaa !7\l  br label %67\l}"];
	Node0x4d7cb70 -> Node0x4d7a9c0;
	Node0x4d7a9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%67:\l67:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %68 = icmp slt i32 %19, %1\l  %69 = icmp slt i32 %27, %2\l  %70 = select i1 %68, i1 %69, i1 false\l  br i1 %70, label %71, label %287\l|{<s0>T|<s1>F}}"];
	Node0x4d7a9c0:s0 -> Node0x4d7da10;
	Node0x4d7a9c0:s1 -> Node0x4d7da60;
	Node0x4d7da10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%71:\l71:                                               \l  %72 = sitofp i32 %19 to float\l  %73 = sitofp i32 %1 to float\l  %74 = fdiv contract float %72, %73\l  %75 = fsub contract float %4, %3\l  %76 = fmul contract float %75, %74\l  %77 = fadd contract float %76, %3\l  %78 = sitofp i32 %27 to float\l  %79 = sitofp i32 %2 to float\l  %80 = fdiv contract float %78, %79\l  %81 = fsub contract float %5, %6\l  %82 = fmul contract float %81, %80\l  %83 = fadd contract float %82, %6\l  %84 = mul nsw i32 %19, %1\l  %85 = add nsw i32 %84, %27\l  %86 = icmp sgt i32 %8, 0\l  br i1 %86, label %93, label %87\l|{<s0>T|<s1>F}}"];
	Node0x4d7da10:s0 -> Node0x4d7e350;
	Node0x4d7da10:s1 -> Node0x4d7e3a0;
	Node0x4d7e3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%87:\l87:                                               \l  %88 = phi float [ 0.000000e+00, %71 ], [ %284, %93 ]\l  %89 = sext i32 %85 to i64\l  %90 = getelementptr inbounds %struct.spacePoint, %struct.spacePoint\l... addrspace(1)* %0, i64 %89, i32 0\l  store float %77, float addrspace(1)* %90, align 4, !tbaa !12\l  %91 = getelementptr inbounds %struct.spacePoint, %struct.spacePoint\l... addrspace(1)* %0, i64 %89, i32 1\l  store float %83, float addrspace(1)* %91, align 4, !tbaa !15\l  %92 = getelementptr inbounds %struct.spacePoint, %struct.spacePoint\l... addrspace(1)* %0, i64 %89, i32 2\l  store float %88, float addrspace(1)* %92, align 4, !tbaa !16\l  br label %287\l}"];
	Node0x4d7e3a0 -> Node0x4d7da60;
	Node0x4d7e350 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%93:\l93:                                               \l  %94 = phi float [ %284, %93 ], [ 0.000000e+00, %71 ]\l  %95 = phi i32 [ %285, %93 ], [ 0, %71 ]\l  %96 = getelementptr inbounds %struct.blackHole, %struct.blackHole\l... addrspace(3)* bitcast ([0 x float] addrspace(3)* @s to %struct.blackHole\l... addrspace(3)*), i32 %95, i32 0\l  %97 = load float, float addrspace(3)* %96, align 4, !tbaa !17\l  %98 = fsub contract float %77, %97\l  %99 = getelementptr inbounds %struct.blackHole, %struct.blackHole\l... addrspace(3)* bitcast ([0 x float] addrspace(3)* @s to %struct.blackHole\l... addrspace(3)*), i32 %95, i32 1\l  %100 = load float, float addrspace(3)* %99, align 4, !tbaa !19\l  %101 = fsub contract float %83, %100\l  %102 = fmul contract float %98, %98\l  %103 = fmul contract float %101, %101\l  %104 = fadd contract float %102, %103\l  %105 = fcmp olt float %104, 0x39F0000000000000\l  %106 = select i1 %105, float 0x41F0000000000000, float 1.000000e+00\l  %107 = fmul float %104, %106\l  %108 = tail call float @llvm.sqrt.f32(float %107)\l  %109 = bitcast float %108 to i32\l  %110 = add nsw i32 %109, -1\l  %111 = bitcast i32 %110 to float\l  %112 = add nsw i32 %109, 1\l  %113 = bitcast i32 %112 to float\l  %114 = tail call i1 @llvm.amdgcn.class.f32(float %107, i32 608)\l  %115 = select i1 %105, float 0x3EF0000000000000, float 1.000000e+00\l  %116 = fneg float %113\l  %117 = tail call float @llvm.fma.f32(float %116, float %108, float %107)\l  %118 = fcmp ogt float %117, 0.000000e+00\l  %119 = fneg float %111\l  %120 = tail call float @llvm.fma.f32(float %119, float %108, float %107)\l  %121 = fcmp ole float %120, 0.000000e+00\l  %122 = select i1 %121, float %111, float %108\l  %123 = select i1 %118, float %113, float %122\l  %124 = fmul float %115, %123\l  %125 = select i1 %114, float %107, float %124\l  %126 = fcmp contract oeq float %125, 0.000000e+00\l  %127 = select i1 %126, float 0x3E112E0BE0000000, float %125\l  %128 = tail call float @llvm.fabs.f32(float %127)\l  %129 = tail call float @llvm.amdgcn.frexp.mant.f32(float %128)\l  %130 = fcmp olt float %129, 0x3FE5555560000000\l  %131 = zext i1 %130 to i32\l  %132 = tail call float @llvm.amdgcn.ldexp.f32(float %129, i32 %131)\l  %133 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %128)\l  %134 = sub nsw i32 %133, %131\l  %135 = fadd float %132, -1.000000e+00\l  %136 = fadd float %132, 1.000000e+00\l  %137 = fadd float %136, -1.000000e+00\l  %138 = fsub float %132, %137\l  %139 = tail call float @llvm.amdgcn.rcp.f32(float %136)\l  %140 = fmul float %135, %139\l  %141 = fmul float %136, %140\l  %142 = fneg float %141\l  %143 = tail call float @llvm.fma.f32(float %140, float %136, float %142)\l  %144 = tail call float @llvm.fma.f32(float %140, float %138, float %143)\l  %145 = fadd float %141, %144\l  %146 = fsub float %145, %141\l  %147 = fsub float %144, %146\l  %148 = fsub float %135, %145\l  %149 = fsub float %135, %148\l  %150 = fsub float %149, %145\l  %151 = fsub float %150, %147\l  %152 = fadd float %148, %151\l  %153 = fmul float %139, %152\l  %154 = fadd float %140, %153\l  %155 = fsub float %154, %140\l  %156 = fsub float %153, %155\l  %157 = fmul float %154, %154\l  %158 = fneg float %157\l  %159 = tail call float @llvm.fma.f32(float %154, float %154, float %158)\l  %160 = fmul float %156, 2.000000e+00\l  %161 = tail call float @llvm.fma.f32(float %154, float %160, float %159)\l  %162 = fadd float %157, %161\l  %163 = fsub float %162, %157\l  %164 = fsub float %161, %163\l  %165 = tail call float @llvm.fmuladd.f32(float %162, float\l... 0x3FCED89C20000000, float 0x3FD23E9880000000)\l  %166 = tail call float @llvm.fmuladd.f32(float %162, float %165, float\l... 0x3FD999BDE0000000)\l  %167 = sitofp i32 %134 to float\l  %168 = fmul float %167, 0x3FE62E4300000000\l  %169 = fneg float %168\l  %170 = tail call float @llvm.fma.f32(float %167, float 0x3FE62E4300000000,\l... float %169)\l  %171 = tail call float @llvm.fma.f32(float %167, float 0xBE205C6100000000,\l... float %170)\l  %172 = fadd float %168, %171\l  %173 = fsub float %172, %168\l  %174 = fsub float %171, %173\l  %175 = tail call float @llvm.amdgcn.ldexp.f32(float %154, i32 1)\l  %176 = fmul float %154, %162\l  %177 = fneg float %176\l  %178 = tail call float @llvm.fma.f32(float %162, float %154, float %177)\l  %179 = tail call float @llvm.fma.f32(float %162, float %156, float %178)\l  %180 = tail call float @llvm.fma.f32(float %164, float %154, float %179)\l  %181 = fadd float %176, %180\l  %182 = fsub float %181, %176\l  %183 = fsub float %180, %182\l  %184 = fmul float %162, %166\l  %185 = fneg float %184\l  %186 = tail call float @llvm.fma.f32(float %162, float %166, float %185)\l  %187 = tail call float @llvm.fma.f32(float %164, float %166, float %186)\l  %188 = fadd float %184, %187\l  %189 = fsub float %188, %184\l  %190 = fsub float %187, %189\l  %191 = fadd float %188, 0x3FE5555540000000\l  %192 = fadd float %191, 0xBFE5555540000000\l  %193 = fsub float %188, %192\l  %194 = fadd float %190, 0x3E2E720200000000\l  %195 = fadd float %194, %193\l  %196 = fadd float %191, %195\l  %197 = fsub float %196, %191\l  %198 = fsub float %195, %197\l  %199 = fmul float %181, %196\l  %200 = fneg float %199\l  %201 = tail call float @llvm.fma.f32(float %181, float %196, float %200)\l  %202 = tail call float @llvm.fma.f32(float %181, float %198, float %201)\l  %203 = tail call float @llvm.fma.f32(float %183, float %196, float %202)\l  %204 = tail call float @llvm.amdgcn.ldexp.f32(float %156, i32 1)\l  %205 = fadd float %199, %203\l  %206 = fsub float %205, %199\l  %207 = fsub float %203, %206\l  %208 = fadd float %175, %205\l  %209 = fsub float %208, %175\l  %210 = fsub float %205, %209\l  %211 = fadd float %204, %207\l  %212 = fadd float %211, %210\l  %213 = fadd float %208, %212\l  %214 = fsub float %213, %208\l  %215 = fsub float %212, %214\l  %216 = fadd float %172, %213\l  %217 = fsub float %216, %172\l  %218 = fsub float %216, %217\l  %219 = fsub float %172, %218\l  %220 = fsub float %213, %217\l  %221 = fadd float %220, %219\l  %222 = fadd float %174, %215\l  %223 = fsub float %222, %174\l  %224 = fsub float %222, %223\l  %225 = fsub float %174, %224\l  %226 = fsub float %215, %223\l  %227 = fadd float %226, %225\l  %228 = fadd float %222, %221\l  %229 = fadd float %216, %228\l  %230 = fsub float %229, %216\l  %231 = fsub float %228, %230\l  %232 = fadd float %227, %231\l  %233 = fadd float %229, %232\l  %234 = fsub float %233, %229\l  %235 = fsub float %232, %234\l  %236 = fmul float %233, 0x3FA99999A0000000\l  %237 = fneg float %236\l  %238 = tail call float @llvm.fma.f32(float %233, float 0x3FA99999A0000000,\l... float %237)\l  %239 = tail call float @llvm.fma.f32(float %235, float 0x3FA99999A0000000,\l... float %238)\l  %240 = fadd float %236, %239\l  %241 = fsub float %240, %236\l  %242 = fsub float %239, %241\l  %243 = tail call float @llvm.fabs.f32(float %236) #4\l  %244 = fcmp oeq float %243, 0x7FF0000000000000\l  %245 = select i1 %244, float %236, float %240\l  %246 = tail call float @llvm.fabs.f32(float %245) #4\l  %247 = fcmp oeq float %246, 0x7FF0000000000000\l  %248 = select i1 %247, float 0.000000e+00, float %242\l  %249 = fcmp oeq float %245, 0x40562E4300000000\l  %250 = select i1 %249, float 0x3EE0000000000000, float 0.000000e+00\l  %251 = fsub float %245, %250\l  %252 = fadd float %250, %248\l  %253 = fmul float %251, 0x3FF7154760000000\l  %254 = tail call float @llvm.rint.f32(float %253)\l  %255 = fcmp ogt float %251, 0x40562E4300000000\l  %256 = fcmp olt float %251, 0xC059D1DA00000000\l  %257 = fneg float %253\l  %258 = tail call float @llvm.fma.f32(float %251, float 0x3FF7154760000000,\l... float %257)\l  %259 = tail call float @llvm.fma.f32(float %251, float 0x3E54AE0BE0000000,\l... float %258)\l  %260 = fsub float %253, %254\l  %261 = fadd float %259, %260\l  %262 = tail call float @llvm.exp2.f32(float %261)\l  %263 = fptosi float %254 to i32\l  %264 = tail call float @llvm.amdgcn.ldexp.f32(float %262, i32 %263)\l  %265 = select i1 %256, float 0.000000e+00, float %264\l  %266 = select i1 %255, float 0x7FF0000000000000, float %265\l  %267 = tail call float @llvm.fma.f32(float %266, float %252, float %266)\l  %268 = tail call float @llvm.fabs.f32(float %266) #4\l  %269 = fcmp oeq float %268, 0x7FF0000000000000\l  %270 = select i1 %269, float %266, float %267\l  %271 = fcmp uge float %127, 0.000000e+00\l  %272 = tail call float @llvm.fabs.f32(float %270)\l  %273 = fcmp oeq float %128, 0x7FF0000000000000\l  %274 = fcmp uno float %127, 0.000000e+00\l  %275 = fcmp oeq float %127, 1.000000e+00\l  %276 = fdiv contract float 1.000000e+00, %272\l  %277 = select i1 %271, float %276, float 0x7FF8000000000000\l  %278 = select i1 %273, float 0.000000e+00, float %277\l  %279 = select i1 %274, float 0x7FF8000000000000, float %278\l  %280 = select i1 %275, float 1.000000e+00, float %279\l  %281 = getelementptr inbounds %struct.blackHole, %struct.blackHole\l... addrspace(3)* bitcast ([0 x float] addrspace(3)* @s to %struct.blackHole\l... addrspace(3)*), i32 %95, i32 2\l  %282 = load float, float addrspace(3)* %281, align 4, !tbaa !20\l  %283 = fmul contract float %282, %280\l  %284 = fadd contract float %94, %283\l  %285 = add nuw nsw i32 %95, 1\l  %286 = icmp eq i32 %285, %8\l  br i1 %286, label %87, label %93, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4d7e350:s0 -> Node0x4d7e3a0;
	Node0x4d7e350:s1 -> Node0x4d7e350;
	Node0x4d7da60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%287:\l287:                                              \l  ret void\l}"];
}
