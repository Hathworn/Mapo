digraph "CFG for '_Z12blend_kernelPfPKf' function" {
	label="CFG for '_Z12blend_kernelPfPKf' function";

	Node0x53e8a10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !7\l  %13 = mul i32 %4, %9\l  %14 = add i32 %13, %3\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = mul i32 %22, %9\l  %24 = udiv i32 %12, %9\l  %25 = mul i32 %24, %9\l  %26 = icmp ugt i32 %12, %25\l  %27 = zext i1 %26 to i32\l  %28 = add i32 %24, %27\l  %29 = mul i32 %23, %28\l  %30 = add i32 %29, %14\l  %31 = add nsw i32 %30, -1\l  %32 = icmp eq i32 %14, 0\l  %33 = select i1 %32, i32 %29, i32 %31\l  %34 = icmp ne i32 %14, 1023\l  %35 = zext i1 %34 to i32\l  %36 = add nsw i32 %30, %35\l  %37 = add nsw i32 %30, -1024\l  %38 = add nsw i32 %30, 1024\l  %39 = icmp eq i32 %22, 0\l  %40 = select i1 %39, i32 %30, i32 %37\l  %41 = icmp eq i32 %22, 1023\l  %42 = select i1 %41, i32 %30, i32 %38\l  %43 = sext i32 %30 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %46 = sext i32 %40 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %49 = sext i32 %42 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %52 = fadd contract float %48, %51\l  %53 = sext i32 %33 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %56 = fadd contract float %52, %55\l  %57 = sext i32 %36 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %60 = fadd contract float %56, %59\l  %61 = fmul contract float %45, 4.000000e+00\l  %62 = fsub contract float %60, %61\l  %63 = fmul contract float %62, 2.500000e-01\l  %64 = fadd contract float %45, %63\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  store float %64, float addrspace(1)* %65, align 4, !tbaa !16\l  ret void\l}"];
}
