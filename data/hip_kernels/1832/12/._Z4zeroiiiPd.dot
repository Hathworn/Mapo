digraph "CFG for '_Z4zeroiiiPd' function" {
	label="CFG for '_Z4zeroiiiPd' function";

	Node0x5b141d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = mul nsw i32 %1, %0\l  %14 = mul nsw i32 %13, %2\l  %15 = udiv i32 %12, %9\l  %16 = mul i32 %15, %9\l  %17 = icmp ugt i32 %12, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 16\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 8, !tbaa !15\l  %23 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = udiv i32 %22, %26\l  %28 = mul i32 %27, %26\l  %29 = icmp ugt i32 %22, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %19\l  %33 = udiv i32 %14, %32\l  %34 = sdiv i32 %33, %9\l  %35 = icmp sgt i32 %34, 0\l  br i1 %35, label %36, label %61\l|{<s0>T|<s1>F}}"];
	Node0x5b141d0:s0 -> Node0x5b16010;
	Node0x5b141d0:s1 -> Node0x5b17910;
	Node0x5b16010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%36:\l36:                                               \l  %37 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %38 = mul i32 %19, %37\l  %39 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %40 = add i32 %38, %39\l  %41 = mul i32 %40, %33\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %43 = add nsw i32 %41, %42\l  %44 = and i32 %34, 7\l  %45 = icmp ult i32 %34, 8\l  br i1 %45, label %48, label %46\l|{<s0>T|<s1>F}}"];
	Node0x5b16010:s0 -> Node0x5b18540;
	Node0x5b16010:s1 -> Node0x5b185d0;
	Node0x5b185d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%46:\l46:                                               \l  %47 = and i32 %34, -8\l  br label %62\l}"];
	Node0x5b185d0 -> Node0x5b187d0;
	Node0x5b18540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %36 ], [ %104, %62 ]\l  %50 = icmp eq i32 %44, 0\l  br i1 %50, label %61, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5b18540:s0 -> Node0x5b17910;
	Node0x5b18540:s1 -> Node0x5b18a00;
	Node0x5b18a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi i32 [ %58, %51 ], [ %49, %48 ]\l  %53 = phi i32 [ %59, %51 ], [ 0, %48 ]\l  %54 = mul nuw nsw i32 %52, %9\l  %55 = add nsw i32 %43, %54\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %3, i64 %56\l  store double 0.000000e+00, double addrspace(1)* %57, align 8, !tbaa !17\l  %58 = add nuw nsw i32 %52, 1\l  %59 = add i32 %53, 1\l  %60 = icmp eq i32 %59, %44\l  br i1 %60, label %61, label %51, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5b18a00:s0 -> Node0x5b17910;
	Node0x5b18a00:s1 -> Node0x5b18a00;
	Node0x5b17910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%61:\l61:                                               \l  ret void\l}"];
	Node0x5b187d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i32 [ 0, %46 ], [ %104, %62 ]\l  %64 = phi i32 [ 0, %46 ], [ %105, %62 ]\l  %65 = mul nuw nsw i32 %63, %9\l  %66 = add nsw i32 %43, %65\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %3, i64 %67\l  store double 0.000000e+00, double addrspace(1)* %68, align 8, !tbaa !17\l  %69 = or i32 %63, 1\l  %70 = mul nuw nsw i32 %69, %9\l  %71 = add nsw i32 %43, %70\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds double, double addrspace(1)* %3, i64 %72\l  store double 0.000000e+00, double addrspace(1)* %73, align 8, !tbaa !17\l  %74 = or i32 %63, 2\l  %75 = mul nuw nsw i32 %74, %9\l  %76 = add nsw i32 %43, %75\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds double, double addrspace(1)* %3, i64 %77\l  store double 0.000000e+00, double addrspace(1)* %78, align 8, !tbaa !17\l  %79 = or i32 %63, 3\l  %80 = mul nuw nsw i32 %79, %9\l  %81 = add nsw i32 %43, %80\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds double, double addrspace(1)* %3, i64 %82\l  store double 0.000000e+00, double addrspace(1)* %83, align 8, !tbaa !17\l  %84 = or i32 %63, 4\l  %85 = mul nuw nsw i32 %84, %9\l  %86 = add nsw i32 %43, %85\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %3, i64 %87\l  store double 0.000000e+00, double addrspace(1)* %88, align 8, !tbaa !17\l  %89 = or i32 %63, 5\l  %90 = mul nuw nsw i32 %89, %9\l  %91 = add nsw i32 %43, %90\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %3, i64 %92\l  store double 0.000000e+00, double addrspace(1)* %93, align 8, !tbaa !17\l  %94 = or i32 %63, 6\l  %95 = mul nuw nsw i32 %94, %9\l  %96 = add nsw i32 %43, %95\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %3, i64 %97\l  store double 0.000000e+00, double addrspace(1)* %98, align 8, !tbaa !17\l  %99 = or i32 %63, 7\l  %100 = mul nuw nsw i32 %99, %9\l  %101 = add nsw i32 %43, %100\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %3, i64 %102\l  store double 0.000000e+00, double addrspace(1)* %103, align 8, !tbaa !17\l  %104 = add nuw nsw i32 %63, 8\l  %105 = add i32 %64, 8\l  %106 = icmp eq i32 %105, %47\l  br i1 %106, label %48, label %62, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5b187d0:s0 -> Node0x5b18540;
	Node0x5b187d0:s1 -> Node0x5b187d0;
}
