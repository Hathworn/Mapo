digraph "CFG for '_Z11MultiplyAddPfS_ii' function" {
	label="CFG for '_Z11MultiplyAddPfS_ii' function";

	Node0x529f730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = shl i32 %5, 8\l  %7 = ashr exact i32 %6, 4\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = add nsw i32 %7, %8\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = shl i32 %10, 8\l  %12 = ashr exact i32 %11, 4\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %14 = add nsw i32 %12, %13\l  %15 = icmp slt i32 %9, %2\l  %16 = icmp slt i32 %14, %3\l  %17 = select i1 %15, i1 %16, i1 false\l  br i1 %17, label %18, label %33\l|{<s0>T|<s1>F}}"];
	Node0x529f730:s0 -> Node0x52a08b0;
	Node0x529f730:s1 -> Node0x52a1820;
	Node0x52a08b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%18:\l18:                                               \l  %19 = shl i32 %2, 8\l  %20 = ashr exact i32 %19, 8\l  %21 = shl i32 %14, 8\l  %22 = ashr exact i32 %21, 8\l  %23 = mul nsw i32 %20, %22\l  %24 = add nsw i32 %23, %9\l  %25 = load float, float addrspace(4)* getelementptr inbounds ([8 x float],\l... [8 x float] addrspace(4)* @d_ConstantA, i64 0, i64 0), align 16, !tbaa !5\l  %26 = sext i32 %24 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %1, i64 %26\l  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %29 = fmul contract float %25, %28\l  %30 = load float, float addrspace(4)* getelementptr inbounds ([8 x float],\l... [8 x float] addrspace(4)* @d_ConstantB, i64 0, i64 0), align 16, !tbaa !5\l  %31 = fadd contract float %29, %30\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %26\l  store float %31, float addrspace(1)* %32, align 4, !tbaa !5\l  br label %33\l}"];
	Node0x52a08b0 -> Node0x52a1820;
	Node0x52a1820 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
}
