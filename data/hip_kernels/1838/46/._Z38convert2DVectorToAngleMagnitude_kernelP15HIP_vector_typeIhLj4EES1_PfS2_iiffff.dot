digraph "CFG for '_Z38convert2DVectorToAngleMagnitude_kernelP15HIP_vector_typeIhLj4EES1_PfS2_iiffff' function" {
	label="CFG for '_Z38convert2DVectorToAngleMagnitude_kernelP15HIP_vector_typeIhLj4EES1_PfS2_iiffff' function";

	Node0x51faba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = shl i32 %11, 8\l  %18 = ashr exact i32 %17, 8\l  %19 = mul nsw i32 %18, %16\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = shl i32 %22, 8\l  %28 = ashr exact i32 %27, 8\l  %29 = mul nsw i32 %28, %26\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %31 = add i32 %29, %30\l  %32 = icmp slt i32 %21, %4\l  %33 = icmp slt i32 %31, %5\l  %34 = select i1 %32, i1 %33, i1 false\l  br i1 %34, label %35, label %190\l|{<s0>T|<s1>F}}"];
	Node0x51faba0:s0 -> Node0x51fd1c0;
	Node0x51faba0:s1 -> Node0x51ff590;
	Node0x51fd1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%35:\l35:                                               \l  %36 = shl i32 %31, 8\l  %37 = ashr exact i32 %36, 8\l  %38 = shl i32 %4, 8\l  %39 = ashr exact i32 %38, 8\l  %40 = mul nsw i32 %37, %39\l  %41 = add nsw i32 %40, %21\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %2, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %45 = getelementptr inbounds float, float addrspace(1)* %3, i64 %42\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = tail call float @llvm.fabs.f32(float %44)\l  %48 = tail call float @llvm.fabs.f32(float %46)\l  %49 = tail call float @llvm.minnum.f32(float %47, float %48)\l  %50 = tail call float @llvm.maxnum.f32(float %47, float %48)\l  %51 = fdiv float %49, %50, !fpmath !11\l  %52 = fmul float %51, %51\l  %53 = tail call float @llvm.fmuladd.f32(float %52, float 0x3F65A54B00000000,\l... float 0xBF8F4B2180000000)\l  %54 = tail call float @llvm.fmuladd.f32(float %52, float %53, float\l... 0x3FA53F67E0000000)\l  %55 = tail call float @llvm.fmuladd.f32(float %52, float %54, float\l... 0xBFB2FA9AE0000000)\l  %56 = tail call float @llvm.fmuladd.f32(float %52, float %55, float\l... 0x3FBB263640000000)\l  %57 = tail call float @llvm.fmuladd.f32(float %52, float %56, float\l... 0xBFC22C1CC0000000)\l  %58 = tail call float @llvm.fmuladd.f32(float %52, float %57, float\l... 0x3FC99717E0000000)\l  %59 = tail call float @llvm.fmuladd.f32(float %52, float %58, float\l... 0xBFD5554C40000000)\l  %60 = fmul float %52, %59\l  %61 = tail call float @llvm.fmuladd.f32(float %51, float %60, float %51)\l  %62 = fsub float 0x3FF921FB60000000, %61\l  %63 = fcmp ogt float %48, %47\l  %64 = select i1 %63, float %62, float %61\l  %65 = fcmp olt float %44, 0.000000e+00\l  %66 = fmul contract float %44, %44\l  %67 = fmul contract float %46, %46\l  %68 = fadd contract float %66, %67\l  %69 = fcmp olt float %68, 0x39F0000000000000\l  %70 = select i1 %69, float 0x41F0000000000000, float 1.000000e+00\l  %71 = fmul float %68, %70\l  %72 = tail call float @llvm.sqrt.f32(float %71)\l  %73 = bitcast float %72 to i32\l  %74 = add nsw i32 %73, -1\l  %75 = bitcast i32 %74 to float\l  %76 = add nsw i32 %73, 1\l  %77 = bitcast i32 %76 to float\l  %78 = tail call i1 @llvm.amdgcn.class.f32(float %71, i32 608)\l  %79 = select i1 %69, float 0x3EF0000000000000, float 1.000000e+00\l  %80 = fneg float %77\l  %81 = tail call float @llvm.fma.f32(float %80, float %72, float %71)\l  %82 = fcmp ogt float %81, 0.000000e+00\l  %83 = fneg float %75\l  %84 = tail call float @llvm.fma.f32(float %83, float %72, float %71)\l  %85 = fcmp ole float %84, 0.000000e+00\l  %86 = select i1 %85, float %75, float %72\l  %87 = select i1 %82, float %77, float %86\l  %88 = fmul float %79, %87\l  %89 = select i1 %78, float %71, float %88\l  %90 = tail call i1 @llvm.amdgcn.class.f32(float %89, i32 504)\l  br i1 %90, label %91, label %175\l|{<s0>T|<s1>F}}"];
	Node0x51fd1c0:s0 -> Node0x52041c0;
	Node0x51fd1c0:s1 -> Node0x5204210;
	Node0x52041c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%91:\l91:                                               \l  %92 = fcmp uno float %44, %46\l  %93 = fcmp oeq float %48, 0x7FF0000000000000\l  %94 = fcmp oeq float %47, 0x7FF0000000000000\l  %95 = and i1 %94, %93\l  %96 = select i1 %65, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %97 = fcmp oeq float %46, 0.000000e+00\l  %98 = bitcast float %44 to i32\l  %99 = icmp slt i32 %98, 0\l  %100 = select i1 %99, float 0x400921FB60000000, float 0.000000e+00\l  %101 = fsub float 0x400921FB60000000, %64\l  %102 = select i1 %65, float %101, float %64\l  %103 = select i1 %97, float %100, float %102\l  %104 = select i1 %95, float %96, float %103\l  %105 = select i1 %92, float 0x7FF8000000000000, float %104\l  %106 = tail call float @llvm.copysign.f32(float %105, float %46)\l  %107 = fsub contract float %106, %6\l  %108 = fsub contract float %7, %6\l  %109 = fdiv contract float %107, %108\l  %110 = fcmp contract olt float %109, 2.500000e-01\l  br i1 %110, label %111, label %113\l|{<s0>T|<s1>F}}"];
	Node0x52041c0:s0 -> Node0x5205160;
	Node0x52041c0:s1 -> Node0x52051f0;
	Node0x5205160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%111:\l111:                                              \l  %112 = fmul contract float %109, 4.000000e+00\l  br label %134\l}"];
	Node0x5205160 -> Node0x52053c0;
	Node0x52051f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%113:\l113:                                              \l  %114 = fcmp contract olt float %109, 5.000000e-01\l  br i1 %114, label %115, label %122\l|{<s0>T|<s1>F}}"];
	Node0x52051f0:s0 -> Node0x5205550;
	Node0x52051f0:s1 -> Node0x52055e0;
	Node0x5205550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%115:\l115:                                              \l  %116 = fsub contract float 2.500000e-01, %109\l  %117 = fmul contract float %116, 4.000000e+00\l  %118 = fadd contract float %117, 1.000000e+00\l  %119 = fpext float %118 to double\l  %120 = fmul contract double %119, 2.550000e+02\l  %121 = fptoui double %120 to i8\l  br label %134\l}"];
	Node0x5205550 -> Node0x52053c0;
	Node0x52055e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%122:\l122:                                              \l  %123 = fcmp contract olt float %109, 7.500000e-01\l  br i1 %123, label %124, label %130\l|{<s0>T|<s1>F}}"];
	Node0x52055e0:s0 -> Node0x5205b40;
	Node0x52055e0:s1 -> Node0x5205bd0;
	Node0x5205b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%124:\l124:                                              \l  %125 = fadd contract float %109, -5.000000e-01\l  %126 = fmul contract float %125, 4.000000e+00\l  %127 = fpext float %126 to double\l  %128 = fmul contract double %127, 2.550000e+02\l  %129 = fptoui double %128 to i8\l  br label %134\l}"];
	Node0x5205b40 -> Node0x52053c0;
	Node0x5205bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%130:\l130:                                              \l  %131 = fsub contract float 7.500000e-01, %109\l  %132 = fmul contract float %131, 4.000000e+00\l  %133 = fadd contract float %132, 1.000000e+00\l  br label %134\l}"];
	Node0x5205bd0 -> Node0x52053c0;
	Node0x52053c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%134:\l134:                                              \l  %135 = phi i8 [ 0, %111 ], [ 0, %115 ], [ %129, %124 ], [ -1, %130 ]\l  %136 = phi float [ %112, %111 ], [ 1.000000e+00, %115 ], [ 1.000000e+00,\l... %124 ], [ %133, %130 ]\l  %137 = phi i8 [ -1, %111 ], [ %121, %115 ], [ 0, %124 ], [ 0, %130 ]\l  %138 = fpext float %136 to double\l  %139 = fmul contract double %138, 2.550000e+02\l  %140 = fptoui double %139 to i8\l  %141 = fsub contract float %89, %8\l  %142 = fsub contract float %9, %8\l  %143 = fdiv contract float %141, %142\l  %144 = fcmp contract olt float %143, 2.500000e-01\l  br i1 %144, label %145, label %147\l|{<s0>T|<s1>F}}"];
	Node0x52053c0:s0 -> Node0x5206d50;
	Node0x52053c0:s1 -> Node0x5206da0;
	Node0x5206d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%145:\l145:                                              \l  %146 = fmul contract float %143, 4.000000e+00\l  br label %168\l}"];
	Node0x5206d50 -> Node0x5206f30;
	Node0x5206da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%147:\l147:                                              \l  %148 = fcmp contract olt float %143, 5.000000e-01\l  br i1 %148, label %149, label %156\l|{<s0>T|<s1>F}}"];
	Node0x5206da0:s0 -> Node0x5207080;
	Node0x5206da0:s1 -> Node0x52070d0;
	Node0x5207080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%149:\l149:                                              \l  %150 = fsub contract float 2.500000e-01, %143\l  %151 = fmul contract float %150, 4.000000e+00\l  %152 = fadd contract float %151, 1.000000e+00\l  %153 = fpext float %152 to double\l  %154 = fmul contract double %153, 2.550000e+02\l  %155 = fptoui double %154 to i8\l  br label %168\l}"];
	Node0x5207080 -> Node0x5206f30;
	Node0x52070d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%156:\l156:                                              \l  %157 = fcmp contract olt float %143, 7.500000e-01\l  br i1 %157, label %158, label %164\l|{<s0>T|<s1>F}}"];
	Node0x52070d0:s0 -> Node0x5207630;
	Node0x52070d0:s1 -> Node0x5207680;
	Node0x5207630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%158:\l158:                                              \l  %159 = fadd contract float %143, -5.000000e-01\l  %160 = fmul contract float %159, 4.000000e+00\l  %161 = fpext float %160 to double\l  %162 = fmul contract double %161, 2.550000e+02\l  %163 = fptoui double %162 to i8\l  br label %168\l}"];
	Node0x5207630 -> Node0x5206f30;
	Node0x5207680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%164:\l164:                                              \l  %165 = fsub contract float 7.500000e-01, %143\l  %166 = fmul contract float %165, 4.000000e+00\l  %167 = fadd contract float %166, 1.000000e+00\l  br label %168\l}"];
	Node0x5207680 -> Node0x5206f30;
	Node0x5206f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%168:\l168:                                              \l  %169 = phi i8 [ 0, %145 ], [ 0, %149 ], [ %163, %158 ], [ -1, %164 ]\l  %170 = phi float [ %146, %145 ], [ 1.000000e+00, %149 ], [ 1.000000e+00,\l... %158 ], [ %167, %164 ]\l  %171 = phi i8 [ -1, %145 ], [ %155, %149 ], [ 0, %158 ], [ 0, %164 ]\l  %172 = fpext float %170 to double\l  %173 = fmul contract double %172, 2.550000e+02\l  %174 = fptoui double %173 to i8\l  br label %175\l}"];
	Node0x5206f30 -> Node0x5204210;
	Node0x5204210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%175:\l175:                                              \l  %176 = phi i8 [ %140, %168 ], [ -1, %35 ]\l  %177 = phi i8 [ %135, %168 ], [ -1, %35 ]\l  %178 = phi i8 [ %171, %168 ], [ -1, %35 ]\l  %179 = phi i8 [ %174, %168 ], [ -1, %35 ]\l  %180 = phi i8 [ %169, %168 ], [ -1, %35 ]\l  %181 = phi i8 [ %137, %168 ], [ -1, %35 ]\l  %182 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %42, i32 0, i32 0, i32 0, i64 0\l  store i8 %177, i8 addrspace(1)* %182, align 4\l  %183 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %42, i32 0, i32 0, i32 0, i64 1\l  store i8 %176, i8 addrspace(1)* %183, align 1\l  %184 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %42, i32 0, i32 0, i32 0, i64 2\l  store i8 %181, i8 addrspace(1)* %184, align 2\l  %185 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %42, i32 0, i32 0, i32 0, i64 3\l  store i8 -1, i8 addrspace(1)* %185, align 1\l  %186 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %42, i32 0, i32 0, i32 0, i64 0\l  store i8 %180, i8 addrspace(1)* %186, align 4\l  %187 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %42, i32 0, i32 0, i32 0, i64 1\l  store i8 %179, i8 addrspace(1)* %187, align 1\l  %188 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %42, i32 0, i32 0, i32 0, i64 2\l  store i8 %178, i8 addrspace(1)* %188, align 2\l  %189 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %42, i32 0, i32 0, i32 0, i64 3\l  store i8 -1, i8 addrspace(1)* %189, align 1\l  br label %190\l}"];
	Node0x5204210 -> Node0x51ff590;
	Node0x51ff590 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%190:\l190:                                              \l  ret void\l}"];
}
