digraph "CFG for '_Z31convertKinectFloatToRGBA_kernelP15HIP_vector_typeIhLj4EEPKfiiiff' function" {
	label="CFG for '_Z31convertKinectFloatToRGBA_kernelP15HIP_vector_typeIhLj4EEPKfiiiff' function";

	Node0x5e8ebc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = shl i32 %8, 8\l  %15 = ashr exact i32 %14, 8\l  %16 = mul nsw i32 %15, %13\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = shl i32 %19, 8\l  %25 = ashr exact i32 %24, 8\l  %26 = mul nsw i32 %25, %23\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %28 = add i32 %26, %27\l  %29 = icmp slt i32 %18, %2\l  %30 = icmp slt i32 %28, %3\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %94\l|{<s0>T|<s1>F}}"];
	Node0x5e8ebc0:s0 -> Node0x5e92860;
	Node0x5e8ebc0:s1 -> Node0x5e928f0;
	Node0x5e92860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%32:\l32:                                               \l  %33 = bitcast float addrspace(1)* %1 to i8 addrspace(1)*\l  %34 = mul nsw i32 %28, %4\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds i8, i8 addrspace(1)* %33, i64 %35\l  %37 = bitcast i8 addrspace(1)* %36 to float addrspace(1)*\l  %38 = sext i32 %18 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %37, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %41 = fcmp contract oeq float %40, 0.000000e+00\l  %42 = select i1 %41, float 0x7FF8000000000000, float %40\l  %43 = tail call i1 @llvm.amdgcn.class.f32(float %42, i32 504)\l  br i1 %43, label %44, label %79\l|{<s0>T|<s1>F}}"];
	Node0x5e92860:s0 -> Node0x5e93ee0;
	Node0x5e92860:s1 -> Node0x5e93f70;
	Node0x5e93ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%44:\l44:                                               \l  %45 = fsub contract float %42, %5\l  %46 = fsub contract float %6, %5\l  %47 = fdiv contract float %45, %46\l  %48 = fcmp contract olt float %47, 2.500000e-01\l  br i1 %48, label %49, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5e93ee0:s0 -> Node0x5e942f0;
	Node0x5e93ee0:s1 -> Node0x5e94380;
	Node0x5e942f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%49:\l49:                                               \l  %50 = fmul contract float %47, 4.000000e+00\l  br label %72\l}"];
	Node0x5e942f0 -> Node0x5e94550;
	Node0x5e94380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%51:\l51:                                               \l  %52 = fcmp contract olt float %47, 5.000000e-01\l  br i1 %52, label %53, label %60\l|{<s0>T|<s1>F}}"];
	Node0x5e94380:s0 -> Node0x5e946e0;
	Node0x5e94380:s1 -> Node0x5e94770;
	Node0x5e946e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%53:\l53:                                               \l  %54 = fsub contract float 2.500000e-01, %47\l  %55 = fmul contract float %54, 4.000000e+00\l  %56 = fadd contract float %55, 1.000000e+00\l  %57 = fpext float %56 to double\l  %58 = fmul contract double %57, 2.550000e+02\l  %59 = fptoui double %58 to i8\l  br label %72\l}"];
	Node0x5e946e0 -> Node0x5e94550;
	Node0x5e94770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%60:\l60:                                               \l  %61 = fcmp contract olt float %47, 7.500000e-01\l  br i1 %61, label %62, label %68\l|{<s0>T|<s1>F}}"];
	Node0x5e94770:s0 -> Node0x5e94d10;
	Node0x5e94770:s1 -> Node0x5e94da0;
	Node0x5e94d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%62:\l62:                                               \l  %63 = fadd contract float %47, -5.000000e-01\l  %64 = fmul contract float %63, 4.000000e+00\l  %65 = fpext float %64 to double\l  %66 = fmul contract double %65, 2.550000e+02\l  %67 = fptoui double %66 to i8\l  br label %72\l}"];
	Node0x5e94d10 -> Node0x5e94550;
	Node0x5e94da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%68:\l68:                                               \l  %69 = fsub contract float 7.500000e-01, %47\l  %70 = fmul contract float %69, 4.000000e+00\l  %71 = fadd contract float %70, 1.000000e+00\l  br label %72\l}"];
	Node0x5e94da0 -> Node0x5e94550;
	Node0x5e94550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%72:\l72:                                               \l  %73 = phi i8 [ 0, %49 ], [ 0, %53 ], [ %67, %62 ], [ -1, %68 ]\l  %74 = phi float [ %50, %49 ], [ 1.000000e+00, %53 ], [ 1.000000e+00, %62 ],\l... [ %71, %68 ]\l  %75 = phi i8 [ -1, %49 ], [ %59, %53 ], [ 0, %62 ], [ 0, %68 ]\l  %76 = fpext float %74 to double\l  %77 = fmul contract double %76, 2.550000e+02\l  %78 = fptoui double %77 to i8\l  br label %79\l}"];
	Node0x5e94550 -> Node0x5e93f70;
	Node0x5e93f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%79:\l79:                                               \l  %80 = phi i8 [ %75, %72 ], [ -1, %32 ]\l  %81 = phi i8 [ %78, %72 ], [ -1, %32 ]\l  %82 = phi i8 [ %73, %72 ], [ -1, %32 ]\l  %83 = shl i32 %28, 8\l  %84 = ashr exact i32 %83, 8\l  %85 = shl i32 %2, 8\l  %86 = ashr exact i32 %85, 8\l  %87 = mul nsw i32 %84, %86\l  %88 = add nsw i32 %87, %18\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %89, i32 0, i32 0, i32 0, i64 0\l  store i8 %82, i8 addrspace(1)* %90, align 4\l  %91 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %89, i32 0, i32 0, i32 0, i64 1\l  store i8 %81, i8 addrspace(1)* %91, align 1\l  %92 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %89, i32 0, i32 0, i32 0, i64 2\l  store i8 %80, i8 addrspace(1)* %92, align 2\l  %93 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %89, i32 0, i32 0, i32 0, i64 3\l  store i8 -1, i8 addrspace(1)* %93, align 1\l  br label %94\l}"];
	Node0x5e93f70 -> Node0x5e928f0;
	Node0x5e928f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%94:\l94:                                               \l  ret void\l}"];
}
