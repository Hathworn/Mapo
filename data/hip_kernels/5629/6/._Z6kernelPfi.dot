digraph "CFG for '_Z6kernelPfi' function" {
	label="CFG for '_Z6kernelPfi' function";

	Node0x632b5b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = add i32 %3, %1\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = add i32 %4, %11\l  %13 = sitofp i32 %12 to float\l  %14 = tail call float @llvm.fabs.f32(float %13)\l  %15 = fcmp olt float %14, 1.310720e+05\l  br i1 %15, label %16, label %46\l|{<s0>T|<s1>F}}"];
	Node0x632b5b0:s0 -> Node0x632e200;
	Node0x632b5b0:s1 -> Node0x632e290;
	Node0x632e200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%16:\l16:                                               \l  %17 = fmul float %14, 0x3FE45F3060000000\l  %18 = tail call float @llvm.rint.f32(float %17)\l  %19 = tail call float @llvm.fma.f32(float %18, float 0xBFF921FB40000000,\l... float %14)\l  %20 = tail call float @llvm.fma.f32(float %18, float 0xBE74442D00000000,\l... float %19)\l  %21 = tail call float @llvm.fma.f32(float %18, float 0xBCF8469880000000,\l... float %20)\l  %22 = fptosi float %18 to i32\l  %23 = bitcast float %14 to i32\l  %24 = fmul float %21, %21\l  %25 = tail call float @llvm.fmuladd.f32(float %24, float 0xBF29833040000000,\l... float 0x3F81103880000000)\l  %26 = tail call float @llvm.fmuladd.f32(float %24, float %25, float\l... 0xBFC55553A0000000)\l  %27 = fmul float %24, %26\l  %28 = tail call float @llvm.fmuladd.f32(float %21, float %27, float %21)\l  %29 = tail call float @llvm.fmuladd.f32(float %24, float 0x3EFAEA6680000000,\l... float 0xBF56C9E760000000)\l  %30 = tail call float @llvm.fmuladd.f32(float %24, float %29, float\l... 0x3FA5557EE0000000)\l  %31 = tail call float @llvm.fmuladd.f32(float %24, float %30, float\l... 0xBFE0000080000000)\l  %32 = tail call float @llvm.fmuladd.f32(float %24, float %31, float\l... 1.000000e+00)\l  %33 = and i32 %22, 1\l  %34 = icmp eq i32 %33, 0\l  %35 = select i1 %34, float %28, float %32\l  %36 = bitcast float %35 to i32\l  %37 = shl i32 %22, 30\l  %38 = and i32 %37, -2147483648\l  %39 = bitcast float %13 to i32\l  %40 = xor i32 %23, %39\l  %41 = xor i32 %40, %36\l  %42 = xor i32 %41, %38\l  %43 = bitcast i32 %42 to float\l  %44 = tail call i1 @llvm.amdgcn.class.f32(float %14, i32 504)\l  %45 = select i1 %44, float %43, float 0x7FF8000000000000\l  br label %174\l}"];
	Node0x632e200 -> Node0x6330560;
	Node0x632e290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%46:\l46:                                               \l  %47 = bitcast float %14 to i32\l  %48 = lshr i32 %47, 23\l  %49 = and i32 %47, 8388607\l  %50 = or i32 %49, 8388608\l  %51 = zext i32 %50 to i64\l  %52 = mul nuw nsw i64 %51, 4266746795\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = mul nuw nsw i64 %51, 1011060801\l  %56 = add nuw nsw i64 %54, %55\l  %57 = trunc i64 %56 to i32\l  %58 = lshr i64 %56, 32\l  %59 = mul nuw nsw i64 %51, 3680671129\l  %60 = add nuw nsw i64 %58, %59\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %51, 4113882560\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %51, 4230436817\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %51, 1313084713\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = mul nuw nsw i64 %51, 2734261102\l  %76 = add nuw nsw i64 %74, %75\l  %77 = trunc i64 %76 to i32\l  %78 = lshr i64 %76, 32\l  %79 = trunc i64 %78 to i32\l  %80 = add nsw i32 %48, -120\l  %81 = icmp ugt i32 %80, 63\l  %82 = select i1 %81, i32 %73, i32 %79\l  %83 = select i1 %81, i32 %69, i32 %77\l  %84 = select i1 %81, i32 %65, i32 %73\l  %85 = select i1 %81, i32 %61, i32 %69\l  %86 = select i1 %81, i32 %57, i32 %65\l  %87 = select i1 %81, i32 %53, i32 %61\l  %88 = select i1 %81, i32 -64, i32 0\l  %89 = add nsw i32 %88, %80\l  %90 = icmp ugt i32 %89, 31\l  %91 = select i1 %90, i32 %83, i32 %82\l  %92 = select i1 %90, i32 %84, i32 %83\l  %93 = select i1 %90, i32 %85, i32 %84\l  %94 = select i1 %90, i32 %86, i32 %85\l  %95 = select i1 %90, i32 %87, i32 %86\l  %96 = select i1 %90, i32 -32, i32 0\l  %97 = add nsw i32 %96, %89\l  %98 = icmp ugt i32 %97, 31\l  %99 = select i1 %98, i32 %92, i32 %91\l  %100 = select i1 %98, i32 %93, i32 %92\l  %101 = select i1 %98, i32 %94, i32 %93\l  %102 = select i1 %98, i32 %95, i32 %94\l  %103 = select i1 %98, i32 -32, i32 0\l  %104 = add nsw i32 %103, %97\l  %105 = icmp eq i32 %104, 0\l  %106 = sub nsw i32 32, %104\l  %107 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %106)\l  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %106)\l  %109 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %106)\l  %110 = select i1 %105, i32 %99, i32 %107\l  %111 = select i1 %105, i32 %100, i32 %108\l  %112 = select i1 %105, i32 %101, i32 %109\l  %113 = lshr i32 %110, 29\l  %114 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %111, i32 2)\l  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 2)\l  %116 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %102, i32 2)\l  %117 = and i32 %113, 1\l  %118 = sub nsw i32 0, %117\l  %119 = shl i32 %113, 31\l  %120 = xor i32 %114, %118\l  %121 = xor i32 %115, %118\l  %122 = xor i32 %116, %118\l  %123 = tail call i32 @llvm.ctlz.i32(i32 %120, i1 false), !range !7\l  %124 = sub nsw i32 31, %123\l  %125 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %124)\l  %126 = tail call i32 @llvm.fshr.i32(i32 %121, i32 %122, i32 %124)\l  %127 = shl nuw nsw i32 %123, 23\l  %128 = sub nuw nsw i32 1056964608, %127\l  %129 = lshr i32 %125, 9\l  %130 = or i32 %129, %128\l  %131 = or i32 %130, %119\l  %132 = bitcast i32 %131 to float\l  %133 = tail call i32 @llvm.fshl.i32(i32 %125, i32 %126, i32 23)\l  %134 = tail call i32 @llvm.ctlz.i32(i32 %133, i1 false), !range !7\l  %135 = fmul float %132, 0x3FF921FB40000000\l  %136 = add nuw nsw i32 %134, %123\l  %137 = shl nuw nsw i32 %136, 23\l  %138 = sub nuw nsw i32 855638016, %137\l  %139 = sub nsw i32 31, %134\l  %140 = tail call i32 @llvm.fshr.i32(i32 %133, i32 %126, i32 %139)\l  %141 = lshr i32 %140, 9\l  %142 = or i32 %138, %141\l  %143 = or i32 %142, %119\l  %144 = bitcast i32 %143 to float\l  %145 = fneg float %135\l  %146 = tail call float @llvm.fma.f32(float %132, float 0x3FF921FB40000000,\l... float %145)\l  %147 = tail call float @llvm.fma.f32(float %132, float 0x3E74442D00000000,\l... float %146)\l  %148 = tail call float @llvm.fma.f32(float %144, float 0x3FF921FB40000000,\l... float %147)\l  %149 = fadd float %135, %148\l  %150 = lshr i32 %110, 30\l  %151 = add nuw nsw i32 %117, %150\l  %152 = fmul float %149, %149\l  %153 = tail call float @llvm.fmuladd.f32(float %152, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %154 = tail call float @llvm.fmuladd.f32(float %152, float %153, float\l... 0xBFC55553A0000000)\l  %155 = fmul float %152, %154\l  %156 = tail call float @llvm.fmuladd.f32(float %149, float %155, float %149)\l  %157 = tail call float @llvm.fmuladd.f32(float %152, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %158 = tail call float @llvm.fmuladd.f32(float %152, float %157, float\l... 0x3FA5557EE0000000)\l  %159 = tail call float @llvm.fmuladd.f32(float %152, float %158, float\l... 0xBFE0000080000000)\l  %160 = tail call float @llvm.fmuladd.f32(float %152, float %159, float\l... 1.000000e+00)\l  %161 = and i32 %151, 1\l  %162 = icmp eq i32 %161, 0\l  %163 = select i1 %162, float %156, float %160\l  %164 = bitcast float %163 to i32\l  %165 = shl i32 %151, 30\l  %166 = and i32 %165, -2147483648\l  %167 = bitcast float %13 to i32\l  %168 = xor i32 %167, %164\l  %169 = xor i32 %168, %166\l  %170 = xor i32 %169, %47\l  %171 = bitcast i32 %170 to float\l  %172 = tail call i1 @llvm.amdgcn.class.f32(float %14, i32 504)\l  %173 = select i1 %172, float %171, float 0x7FF8000000000000\l  br label %174\l}"];
	Node0x632e290 -> Node0x6330560;
	Node0x6330560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%174:\l174:                                              \l  %175 = phi i32 [ %38, %16 ], [ %166, %46 ]\l  %176 = phi i32 [ %33, %16 ], [ %161, %46 ]\l  %177 = phi float [ %32, %16 ], [ %160, %46 ]\l  %178 = phi float [ %28, %16 ], [ %156, %46 ]\l  %179 = phi float [ %45, %16 ], [ %173, %46 ]\l  %180 = phi i1 [ %44, %16 ], [ %172, %46 ]\l  %181 = fneg float %178\l  %182 = icmp eq i32 %176, 0\l  %183 = select i1 %182, float %177, float %181\l  %184 = bitcast float %183 to i32\l  %185 = xor i32 %175, %184\l  %186 = bitcast i32 %185 to float\l  %187 = select i1 %180, float %186, float 0x7FF8000000000000\l  %188 = sext i32 %12 to i64\l  %189 = getelementptr inbounds float, float addrspace(1)* %0, i64 %188\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !8,\l... !amdgpu.noclobber !6\l  %191 = fmul contract float %179, %179\l  %192 = fmul contract float %187, %187\l  %193 = fadd contract float %191, %192\l  %194 = fcmp olt float %193, 0x39F0000000000000\l  %195 = select i1 %194, float 0x41F0000000000000, float 1.000000e+00\l  %196 = fmul float %193, %195\l  %197 = tail call float @llvm.sqrt.f32(float %196)\l  %198 = bitcast float %197 to i32\l  %199 = add nsw i32 %198, -1\l  %200 = bitcast i32 %199 to float\l  %201 = add nsw i32 %198, 1\l  %202 = bitcast i32 %201 to float\l  %203 = tail call i1 @llvm.amdgcn.class.f32(float %196, i32 608)\l  %204 = select i1 %194, float 0x3EF0000000000000, float 1.000000e+00\l  %205 = fneg float %202\l  %206 = tail call float @llvm.fma.f32(float %205, float %197, float %196)\l  %207 = fcmp ogt float %206, 0.000000e+00\l  %208 = fneg float %200\l  %209 = tail call float @llvm.fma.f32(float %208, float %197, float %196)\l  %210 = fcmp ole float %209, 0.000000e+00\l  %211 = select i1 %210, float %200, float %197\l  %212 = select i1 %207, float %202, float %211\l  %213 = fmul float %204, %212\l  %214 = select i1 %203, float %196, float %213\l  %215 = fadd contract float %190, %214\l  store float %215, float addrspace(1)* %189, align 4, !tbaa !8\l  ret void\l}"];
}
