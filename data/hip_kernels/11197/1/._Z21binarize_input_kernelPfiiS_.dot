digraph "CFG for '_Z21binarize_input_kernelPfiiS_' function" {
	label="CFG for '_Z21binarize_input_kernelPfiiS_' function";

	Node0x5702c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = mul i32 %21, %14\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %2\l  br i1 %25, label %26, label %226\l|{<s0>T|<s1>F}}"];
	Node0x5702c80:s0 -> Node0x5705500;
	Node0x5702c80:s1 -> Node0x5705590;
	Node0x5705500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %1, 0\l  br i1 %27, label %28, label %122\l|{<s0>T|<s1>F}}"];
	Node0x5705500:s0 -> Node0x5705760;
	Node0x5705500:s1 -> Node0x57057b0;
	Node0x5705760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = and i32 %1, 7\l  %30 = icmp ult i32 %1, 8\l  br i1 %30, label %103, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5705760:s0 -> Node0x5705a70;
	Node0x5705760:s1 -> Node0x5705ac0;
	Node0x5705ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %1, -8\l  br label %33\l}"];
	Node0x5705ac0 -> Node0x5704d00;
	Node0x5704d00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %31 ], [ %99, %33 ]\l  %35 = phi i32 [ 0, %31 ], [ %100, %33 ]\l  %36 = phi i32 [ 0, %31 ], [ %101, %33 ]\l  %37 = mul nsw i32 %35, %2\l  %38 = add nsw i32 %37, %24\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %42 = tail call float @llvm.fabs.f32(float %41)\l  %43 = fadd contract float %34, %42\l  %44 = or i32 %35, 1\l  %45 = mul nsw i32 %44, %2\l  %46 = add nsw i32 %45, %24\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %50 = tail call float @llvm.fabs.f32(float %49)\l  %51 = fadd contract float %43, %50\l  %52 = or i32 %35, 2\l  %53 = mul nsw i32 %52, %2\l  %54 = add nsw i32 %53, %24\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %58 = tail call float @llvm.fabs.f32(float %57)\l  %59 = fadd contract float %51, %58\l  %60 = or i32 %35, 3\l  %61 = mul nsw i32 %60, %2\l  %62 = add nsw i32 %61, %24\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %66 = tail call float @llvm.fabs.f32(float %65)\l  %67 = fadd contract float %59, %66\l  %68 = or i32 %35, 4\l  %69 = mul nsw i32 %68, %2\l  %70 = add nsw i32 %69, %24\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %74 = tail call float @llvm.fabs.f32(float %73)\l  %75 = fadd contract float %67, %74\l  %76 = or i32 %35, 5\l  %77 = mul nsw i32 %76, %2\l  %78 = add nsw i32 %77, %24\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %82 = tail call float @llvm.fabs.f32(float %81)\l  %83 = fadd contract float %75, %82\l  %84 = or i32 %35, 6\l  %85 = mul nsw i32 %84, %2\l  %86 = add nsw i32 %85, %24\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %90 = tail call float @llvm.fabs.f32(float %89)\l  %91 = fadd contract float %83, %90\l  %92 = or i32 %35, 7\l  %93 = mul nsw i32 %92, %2\l  %94 = add nsw i32 %93, %24\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %98 = tail call float @llvm.fabs.f32(float %97)\l  %99 = fadd contract float %91, %98\l  %100 = add nuw nsw i32 %35, 8\l  %101 = add i32 %36, 8\l  %102 = icmp eq i32 %101, %32\l  br i1 %102, label %103, label %33, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5704d00:s0 -> Node0x5705a70;
	Node0x5704d00:s1 -> Node0x5704d00;
	Node0x5705a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%103:\l103:                                              \l  %104 = phi float [ undef, %28 ], [ %99, %33 ]\l  %105 = phi float [ 0.000000e+00, %28 ], [ %99, %33 ]\l  %106 = phi i32 [ 0, %28 ], [ %100, %33 ]\l  %107 = icmp eq i32 %29, 0\l  br i1 %107, label %122, label %108\l|{<s0>T|<s1>F}}"];
	Node0x5705a70:s0 -> Node0x57057b0;
	Node0x5705a70:s1 -> Node0x570ae70;
	Node0x570ae70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%108:\l108:                                              \l  %109 = phi float [ %118, %108 ], [ %105, %103 ]\l  %110 = phi i32 [ %119, %108 ], [ %106, %103 ]\l  %111 = phi i32 [ %120, %108 ], [ 0, %103 ]\l  %112 = mul nsw i32 %110, %2\l  %113 = add nsw i32 %112, %24\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %117 = tail call float @llvm.fabs.f32(float %116)\l  %118 = fadd contract float %109, %117\l  %119 = add nuw nsw i32 %110, 1\l  %120 = add i32 %111, 1\l  %121 = icmp eq i32 %120, %29\l  br i1 %121, label %122, label %108, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x570ae70:s0 -> Node0x57057b0;
	Node0x570ae70:s1 -> Node0x570ae70;
	Node0x57057b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%122:\l122:                                              \l  %123 = phi float [ 0.000000e+00, %26 ], [ %104, %103 ], [ %118, %108 ]\l  %124 = sitofp i32 %1 to float\l  %125 = fdiv contract float %123, %124\l  br i1 %27, label %126, label %226\l|{<s0>T|<s1>F}}"];
	Node0x57057b0:s0 -> Node0x570bb40;
	Node0x57057b0:s1 -> Node0x5705590;
	Node0x570bb40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%126:\l126:                                              \l  %127 = fneg contract float %125\l  %128 = and i32 %1, 7\l  %129 = icmp ult i32 %1, 8\l  br i1 %129, label %209, label %130\l|{<s0>T|<s1>F}}"];
	Node0x570bb40:s0 -> Node0x5708d10;
	Node0x570bb40:s1 -> Node0x5708d60;
	Node0x5708d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%130:\l130:                                              \l  %131 = and i32 %1, -8\l  br label %132\l}"];
	Node0x5708d60 -> Node0x5708f30;
	Node0x5708f30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%132:\l132:                                              \l  %133 = phi i32 [ 0, %130 ], [ %206, %132 ]\l  %134 = phi i32 [ 0, %130 ], [ %207, %132 ]\l  %135 = mul nsw i32 %133, %2\l  %136 = add nsw i32 %135, %24\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = fcmp contract ogt float %139, 0.000000e+00\l  %141 = select contract i1 %140, float %125, float %127\l  %142 = getelementptr inbounds float, float addrspace(1)* %3, i64 %137\l  store float %141, float addrspace(1)* %142, align 4, !tbaa !16\l  %143 = or i32 %133, 1\l  %144 = mul nsw i32 %143, %2\l  %145 = add nsw i32 %144, %24\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %0, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16\l  %149 = fcmp contract ogt float %148, 0.000000e+00\l  %150 = select contract i1 %149, float %125, float %127\l  %151 = getelementptr inbounds float, float addrspace(1)* %3, i64 %146\l  store float %150, float addrspace(1)* %151, align 4, !tbaa !16\l  %152 = or i32 %133, 2\l  %153 = mul nsw i32 %152, %2\l  %154 = add nsw i32 %153, %24\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %0, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !16\l  %158 = fcmp contract ogt float %157, 0.000000e+00\l  %159 = select contract i1 %158, float %125, float %127\l  %160 = getelementptr inbounds float, float addrspace(1)* %3, i64 %155\l  store float %159, float addrspace(1)* %160, align 4, !tbaa !16\l  %161 = or i32 %133, 3\l  %162 = mul nsw i32 %161, %2\l  %163 = add nsw i32 %162, %24\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %0, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !16\l  %167 = fcmp contract ogt float %166, 0.000000e+00\l  %168 = select contract i1 %167, float %125, float %127\l  %169 = getelementptr inbounds float, float addrspace(1)* %3, i64 %164\l  store float %168, float addrspace(1)* %169, align 4, !tbaa !16\l  %170 = or i32 %133, 4\l  %171 = mul nsw i32 %170, %2\l  %172 = add nsw i32 %171, %24\l  %173 = sext i32 %172 to i64\l  %174 = getelementptr inbounds float, float addrspace(1)* %0, i64 %173\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !16\l  %176 = fcmp contract ogt float %175, 0.000000e+00\l  %177 = select contract i1 %176, float %125, float %127\l  %178 = getelementptr inbounds float, float addrspace(1)* %3, i64 %173\l  store float %177, float addrspace(1)* %178, align 4, !tbaa !16\l  %179 = or i32 %133, 5\l  %180 = mul nsw i32 %179, %2\l  %181 = add nsw i32 %180, %24\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %0, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !16\l  %185 = fcmp contract ogt float %184, 0.000000e+00\l  %186 = select contract i1 %185, float %125, float %127\l  %187 = getelementptr inbounds float, float addrspace(1)* %3, i64 %182\l  store float %186, float addrspace(1)* %187, align 4, !tbaa !16\l  %188 = or i32 %133, 6\l  %189 = mul nsw i32 %188, %2\l  %190 = add nsw i32 %189, %24\l  %191 = sext i32 %190 to i64\l  %192 = getelementptr inbounds float, float addrspace(1)* %0, i64 %191\l  %193 = load float, float addrspace(1)* %192, align 4, !tbaa !16\l  %194 = fcmp contract ogt float %193, 0.000000e+00\l  %195 = select contract i1 %194, float %125, float %127\l  %196 = getelementptr inbounds float, float addrspace(1)* %3, i64 %191\l  store float %195, float addrspace(1)* %196, align 4, !tbaa !16\l  %197 = or i32 %133, 7\l  %198 = mul nsw i32 %197, %2\l  %199 = add nsw i32 %198, %24\l  %200 = sext i32 %199 to i64\l  %201 = getelementptr inbounds float, float addrspace(1)* %0, i64 %200\l  %202 = load float, float addrspace(1)* %201, align 4, !tbaa !16\l  %203 = fcmp contract ogt float %202, 0.000000e+00\l  %204 = select contract i1 %203, float %125, float %127\l  %205 = getelementptr inbounds float, float addrspace(1)* %3, i64 %200\l  store float %204, float addrspace(1)* %205, align 4, !tbaa !16\l  %206 = add nuw nsw i32 %133, 8\l  %207 = add i32 %134, 8\l  %208 = icmp eq i32 %207, %131\l  br i1 %208, label %209, label %132, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5708f30:s0 -> Node0x5708d10;
	Node0x5708f30:s1 -> Node0x5708f30;
	Node0x5708d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%209:\l209:                                              \l  %210 = phi i32 [ 0, %126 ], [ %206, %132 ]\l  %211 = icmp eq i32 %128, 0\l  br i1 %211, label %226, label %212\l|{<s0>T|<s1>F}}"];
	Node0x5708d10:s0 -> Node0x5705590;
	Node0x5708d10:s1 -> Node0x570f720;
	Node0x570f720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%212:\l212:                                              \l  %213 = phi i32 [ %223, %212 ], [ %210, %209 ]\l  %214 = phi i32 [ %224, %212 ], [ 0, %209 ]\l  %215 = mul nsw i32 %213, %2\l  %216 = add nsw i32 %215, %24\l  %217 = sext i32 %216 to i64\l  %218 = getelementptr inbounds float, float addrspace(1)* %0, i64 %217\l  %219 = load float, float addrspace(1)* %218, align 4, !tbaa !16\l  %220 = fcmp contract ogt float %219, 0.000000e+00\l  %221 = select contract i1 %220, float %125, float %127\l  %222 = getelementptr inbounds float, float addrspace(1)* %3, i64 %217\l  store float %221, float addrspace(1)* %222, align 4, !tbaa !16\l  %223 = add nuw nsw i32 %213, 1\l  %224 = add i32 %214, 1\l  %225 = icmp eq i32 %224, %128\l  br i1 %225, label %226, label %212, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x570f720:s0 -> Node0x5705590;
	Node0x570f720:s1 -> Node0x570f720;
	Node0x5705590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%226:\l226:                                              \l  ret void\l}"];
}
