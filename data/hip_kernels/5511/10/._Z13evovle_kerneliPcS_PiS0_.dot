digraph "CFG for '_Z13evovle_kerneliPcS_PiS0_' function" {
	label="CFG for '_Z13evovle_kerneliPcS_PiS0_' function";

	Node0x58b3090 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %7, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add nuw nsw i32 %13, 1\l  %15 = add i32 %14, %12\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = add i32 %23, 1\l  %25 = add nsw i32 %0, 2\l  %26 = mul nsw i32 %15, %25\l  %27 = add nsw i32 %24, %26\l  %28 = icmp sgt i32 %15, %0\l  %29 = icmp sgt i32 %24, %0\l  %30 = select i1 %28, i1 true, i1 %29\l  br i1 %30, label %104, label %31\l|{<s0>T|<s1>F}}"];
	Node0x58b3090:s0 -> Node0x58b6e10;
	Node0x58b3090:s1 -> Node0x58b6ea0;
	Node0x58b6ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%31:\l31:                                               \l  %32 = add nsw i32 %27, %25\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %33\l  %35 = load i8, i8 addrspace(1)* %34, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %36 = sext i8 %35 to i32\l  %37 = sub nsw i32 %27, %25\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %38\l  %40 = load i8, i8 addrspace(1)* %39, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %41 = sext i8 %40 to i32\l  %42 = add nsw i32 %41, %36\l  %43 = add nsw i32 %27, 1\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %44\l  %46 = load i8, i8 addrspace(1)* %45, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %47 = sext i8 %46 to i32\l  %48 = add nsw i32 %42, %47\l  %49 = add i32 %26, %23\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %50\l  %52 = load i8, i8 addrspace(1)* %51, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %53 = sext i8 %52 to i32\l  %54 = add nsw i32 %48, %53\l  %55 = add nsw i32 %0, 3\l  %56 = add nsw i32 %27, %55\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %57\l  %59 = load i8, i8 addrspace(1)* %58, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %60 = sext i8 %59 to i32\l  %61 = add nsw i32 %54, %60\l  %62 = sub nsw i32 %27, %55\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %63\l  %65 = load i8, i8 addrspace(1)* %64, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %66 = sext i8 %65 to i32\l  %67 = add nsw i32 %61, %66\l  %68 = add nsw i32 %0, 1\l  %69 = sub nsw i32 %27, %68\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %70\l  %72 = load i8, i8 addrspace(1)* %71, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %73 = sext i8 %72 to i32\l  %74 = add nsw i32 %67, %73\l  %75 = add nsw i32 %27, %68\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %76\l  %78 = load i8, i8 addrspace(1)* %77, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %79 = sext i8 %78 to i32\l  %80 = add nsw i32 %74, %79\l  %81 = sext i32 %27 to i64\l  %82 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %81\l  %83 = icmp eq i32 %80, 3\l  br i1 %83, label %89, label %84\l|{<s0>T|<s1>F}}"];
	Node0x58b6ea0:s0 -> Node0x58b9760;
	Node0x58b6ea0:s1 -> Node0x58b97f0;
	Node0x58b97f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%84:\l84:                                               \l  %85 = load i8, i8 addrspace(1)* %82, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %86 = icmp eq i32 %80, 2\l  %87 = icmp ne i8 %85, 0\l  %88 = select i1 %86, i1 %87, i1 false\l  br label %89\l}"];
	Node0x58b97f0 -> Node0x58b9760;
	Node0x58b9760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%89:\l89:                                               \l  %90 = phi i1 [ true, %31 ], [ %88, %84 ]\l  %91 = zext i1 %90 to i8\l  %92 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %81\l  store i8 %91, i8 addrspace(1)* %92, align 1, !tbaa !7\l  br i1 %90, label %93, label %97\l|{<s0>T|<s1>F}}"];
	Node0x58b9760:s0 -> Node0x58b9e90;
	Node0x58b9760:s1 -> Node0x58b9ee0;
	Node0x58b9e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%93:\l93:                                               \l  %94 = load i32, i32 addrspace(1)* %3, align 4, !tbaa !10\l  %95 = add nsw i32 %94, 1\l  store i32 %95, i32 addrspace(1)* %3, align 4, !tbaa !10\l  %96 = load i8, i8 addrspace(1)* %92, align 1, !tbaa !7\l  br label %97\l}"];
	Node0x58b9e90 -> Node0x58b9ee0;
	Node0x58b9ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%97:\l97:                                               \l  %98 = phi i8 [ %96, %93 ], [ 0, %89 ]\l  %99 = load i8, i8 addrspace(1)* %82, align 1, !tbaa !7\l  %100 = icmp eq i8 %98, %99\l  br i1 %100, label %104, label %101\l|{<s0>T|<s1>F}}"];
	Node0x58b9ee0:s0 -> Node0x58b6e10;
	Node0x58b9ee0:s1 -> Node0x58bab50;
	Node0x58bab50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%101:\l101:                                              \l  %102 = load i32, i32 addrspace(1)* %4, align 4, !tbaa !10\l  %103 = add nsw i32 %102, 1\l  store i32 %103, i32 addrspace(1)* %4, align 4, !tbaa !10\l  br label %104\l}"];
	Node0x58bab50 -> Node0x58b6e10;
	Node0x58b6e10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%104:\l104:                                              \l  ret void\l}"];
}
