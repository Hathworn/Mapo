digraph "CFG for '_Z32sampleMultinomialWithReplacementP18hiprandStateMtgp32iPfliS1_' function" {
	label="CFG for '_Z32sampleMultinomialWithReplacementP18hiprandStateMtgp32iPfliS1_' function";

	Node0x48f1a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = zext i32 %7 to i64\l  %9 = icmp slt i64 %8, %3\l  br i1 %9, label %10, label %47\l|{<s0>T|<s1>F}}"];
	Node0x48f1a90:s0 -> Node0x48f0cb0;
	Node0x48f1a90:s1 -> Node0x48f1e00;
	Node0x48f0cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%10:\l10:                                               \l  %11 = icmp sgt i32 %1, 0\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y()\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x()\l  %14 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 1\l  %18 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 0, i32 0\l  %19 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 7\l  %20 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 4\l  %21 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 5\l  %22 = icmp eq i32 %13, 0\l  %23 = sext i32 %4 to i64\l  %24 = icmp sgt i32 %4, 0\l  %25 = sext i32 %1 to i64\l  %26 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %29 = bitcast i8 addrspace(4)* %28 to i32 addrspace(4)*\l  %30 = load i32, i32 addrspace(4)* %29, align 4, !tbaa !4\l  %31 = load i16, i16 addrspace(4)* %16, align 4, !range !13, !invariant.load\l... !14\l  %32 = zext i16 %31 to i32\l  %33 = udiv i32 %30, %32\l  %34 = mul i32 %33, %32\l  %35 = icmp ugt i32 %30, %34\l  %36 = zext i1 %35 to i32\l  %37 = add i32 %33, %36\l  %38 = zext i32 %37 to i64\l  br label %39\l}"];
	Node0x48f0cb0 -> Node0x48f4bf0;
	Node0x48f4bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%39:\l39:                                               \l  %40 = phi i64 [ %8, %10 ], [ %49, %48 ]\l  br i1 %11, label %41, label %48\l|{<s0>T|<s1>F}}"];
	Node0x48f4bf0:s0 -> Node0x48f4e30;
	Node0x48f4bf0:s1 -> Node0x48f4cf0;
	Node0x48f4e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%41:\l41:                                               \l  %42 = mul nsw i64 %40, %23\l  %43 = getelementptr inbounds float, float addrspace(1)* %5, i64 %42\l  %44 = mul nsw i64 %40, %25\l  %45 = load i16, i16 addrspace(4)* %27, align 2, !range !13, !invariant.load\l... !14\l  %46 = zext i16 %45 to i32\l  br label %51\l}"];
	Node0x48f4e30 -> Node0x48f5e30;
	Node0x48f1e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%47:\l47:                                               \l  ret void\l}"];
	Node0x48f4cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%48:\l48:                                               \l  %49 = add nuw nsw i64 %40, %38\l  %50 = icmp slt i64 %49, %3\l  br i1 %50, label %39, label %47, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x48f4cf0:s0 -> Node0x48f4bf0;
	Node0x48f4cf0:s1 -> Node0x48f1e00;
	Node0x48f5e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %41 ], [ %139, %138 ]\l  %53 = add i32 %52, %12\l  %54 = load i32, i32 addrspace(1)* %17, align 4, !tbaa !17\l  %55 = load i32, i32 addrspace(1)* %18, align 4, !tbaa !23\l  %56 = add i32 %55, %13\l  %57 = and i32 %56, 1023\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 0, i32 2, i64\l... %58\l  %60 = load i32, i32 addrspace(1)* %59, align 4, !tbaa !24\l  %61 = add i32 %56, 1\l  %62 = and i32 %61, 1023\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 0, i32 2, i64\l... %63\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !24\l  %66 = add i32 %56, %54\l  %67 = and i32 %66, 1023\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 0, i32 2, i64\l... %68\l  %70 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !24\l  %71 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !25\l  %72 = and i32 %71, %60\l  %73 = xor i32 %72, %65\l  %74 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !26\l  %75 = shl i32 %73, %74\l  %76 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !27\l  %77 = lshr i32 %70, %76\l  %78 = xor i32 %75, %77\l  %79 = xor i32 %78, %73\l  %80 = and i32 %79, 15\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 2, i64 %81\l  %83 = load i32, i32 addrspace(1)* %82, align 4, !tbaa !24\l  %84 = xor i32 %79, %83\l  %85 = add i32 %56, 351\l  %86 = and i32 %85, 1023\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 0, i32 2, i64\l... %87\l  store i32 %84, i32 addrspace(1)* %88, align 4, !tbaa !24\l  %89 = add i32 %66, 1023\l  %90 = and i32 %89, 1023\l  %91 = zext i32 %90 to i64\l  %92 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 0, i32 2, i64\l... %91\l  %93 = load i32, i32 addrspace(1)* %92, align 4, !tbaa !24\l  %94 = lshr i32 %93, 16\l  %95 = xor i32 %94, %93\l  %96 = lshr i32 %95, 8\l  %97 = xor i32 %96, %95\l  %98 = and i32 %97, 15\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds %struct.hiprandStateMtgp32,\l... %struct.hiprandStateMtgp32 addrspace(1)* %0, i64 %8, i32 0, i32 3, i64 %99\l  %101 = load i32, i32 addrspace(1)* %100, align 4, !tbaa !24\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %22, label %102, label %106\l|{<s0>T|<s1>F}}"];
	Node0x48f5e30:s0 -> Node0x48f9490;
	Node0x48f5e30:s1 -> Node0x48f9520;
	Node0x48f9490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%102:\l102:                                              \l  %103 = load i32, i32 addrspace(1)* %18, align 4, !tbaa !23\l  %104 = add i32 %103, %32\l  %105 = and i32 %104, 1023\l  store i32 %105, i32 addrspace(1)* %18, align 4, !tbaa !23\l  br label %106\l}"];
	Node0x48f9490 -> Node0x48f9520;
	Node0x48f9520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%106:\l106:                                              \l  %107 = xor i32 %101, %84\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %108 = uitofp i32 %107 to float\l  %109 = fmul contract float %108, 0x3DF0000000000000\l  %110 = fadd contract float %109, 0x3DF0000000000000\l  %111 = icmp slt i32 %53, %1\l  %112 = select i1 %22, i1 %111, i1 false\l  br i1 %112, label %113, label %138\l|{<s0>T|<s1>F}}"];
	Node0x48f9520:s0 -> Node0x48fade0;
	Node0x48f9520:s1 -> Node0x48f61d0;
	Node0x48fade0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%113:\l113:                                              \l  br i1 %24, label %114, label %129\l|{<s0>T|<s1>F}}"];
	Node0x48fade0:s0 -> Node0x48faf20;
	Node0x48fade0:s1 -> Node0x48faf70;
	Node0x48faf20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%114:\l114:                                              \l  %115 = phi i32 [ %127, %114 ], [ %4, %113 ]\l  %116 = phi i32 [ %126, %114 ], [ 0, %113 ]\l  %117 = phi i32 [ %125, %114 ], [ %4, %113 ]\l  %118 = lshr i32 %115, 1\l  %119 = add nsw i32 %118, %116\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %43, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !28\l  %123 = fcmp contract olt float %122, %110\l  %124 = add nsw i32 %119, 1\l  %125 = select i1 %123, i32 %117, i32 %119\l  %126 = select i1 %123, i32 %124, i32 %116\l  %127 = sub nsw i32 %125, %126\l  %128 = icmp sgt i32 %127, 0\l  br i1 %128, label %114, label %129, !llvm.loop !30\l|{<s0>T|<s1>F}}"];
	Node0x48faf20:s0 -> Node0x48faf20;
	Node0x48faf20:s1 -> Node0x48faf70;
	Node0x48faf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%129:\l129:                                              \l  %130 = phi i32 [ 0, %113 ], [ %126, %114 ]\l  %131 = icmp eq i32 %130, %4\l  %132 = select i1 %131, i32 0, i32 %130\l  %133 = sitofp i32 %132 to float\l  %134 = fadd contract float %133, 1.000000e+00\l  %135 = sext i32 %53 to i64\l  %136 = add nsw i64 %44, %135\l  %137 = getelementptr inbounds float, float addrspace(1)* %2, i64 %136\l  store float %134, float addrspace(1)* %137, align 4, !tbaa !28\l  br label %138\l}"];
	Node0x48faf70 -> Node0x48f61d0;
	Node0x48f61d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%138:\l138:                                              \l  %139 = add i32 %52, %46\l  %140 = icmp slt i32 %139, %1\l  br i1 %140, label %51, label %48, !llvm.loop !31\l|{<s0>T|<s1>F}}"];
	Node0x48f61d0:s0 -> Node0x48f5e30;
	Node0x48f61d0:s1 -> Node0x48f4cf0;
}
