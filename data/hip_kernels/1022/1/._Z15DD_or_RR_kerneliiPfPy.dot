digraph "CFG for '_Z15DD_or_RR_kerneliiPfPy' function" {
	label="CFG for '_Z15DD_or_RR_kerneliiPfPy' function";

	Node0x4dbdf50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = shl i32 %14, 8\l  %16 = icmp slt i32 %13, %0\l  %17 = add nsw i32 %15, 256\l  %18 = icmp sgt i32 %17, %13\l  %19 = select i1 %16, i1 %18, i1 false\l  br i1 %19, label %20, label %890\l|{<s0>T|<s1>F}}"];
	Node0x4dbdf50:s0 -> Node0x4dc03b0;
	Node0x4dbdf50:s1 -> Node0x4dc0440;
	Node0x4dc03b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%20:\l20:                                               \l  %21 = icmp eq i32 %12, 0\l  br i1 %21, label %22, label %97\l|{<s0>T|<s1>F}}"];
	Node0x4dc03b0:s0 -> Node0x4dc0610;
	Node0x4dc03b0:s1 -> Node0x4dc0660;
	Node0x4dc0610 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%22:\l22:                                               \l  %23 = phi i32 [ %95, %22 ], [ 0, %20 ]\l  %24 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %23\l  store i32 0, i32 addrspace(3)* %24, align 16, !tbaa !7\l  %25 = or i32 %23, 1\l  %26 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %25\l  store i32 0, i32 addrspace(3)* %26, align 4, !tbaa !7\l  %27 = or i32 %23, 2\l  %28 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %27\l  store i32 0, i32 addrspace(3)* %28, align 8, !tbaa !7\l  %29 = or i32 %23, 3\l  %30 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %29\l  store i32 0, i32 addrspace(3)* %30, align 4, !tbaa !7\l  %31 = add nuw nsw i32 %23, 4\l  %32 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %31\l  store i32 0, i32 addrspace(3)* %32, align 16, !tbaa !7\l  %33 = add nuw nsw i32 %23, 5\l  %34 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %33\l  store i32 0, i32 addrspace(3)* %34, align 4, !tbaa !7\l  %35 = add nuw nsw i32 %23, 6\l  %36 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %35\l  store i32 0, i32 addrspace(3)* %36, align 8, !tbaa !7\l  %37 = add nuw nsw i32 %23, 7\l  %38 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %37\l  store i32 0, i32 addrspace(3)* %38, align 4, !tbaa !7\l  %39 = add nuw nsw i32 %23, 8\l  %40 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %39\l  store i32 0, i32 addrspace(3)* %40, align 16, !tbaa !7\l  %41 = add nuw nsw i32 %23, 9\l  %42 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %41\l  store i32 0, i32 addrspace(3)* %42, align 4, !tbaa !7\l  %43 = add nuw nsw i32 %23, 10\l  %44 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %43\l  store i32 0, i32 addrspace(3)* %44, align 8, !tbaa !7\l  %45 = add nuw nsw i32 %23, 11\l  %46 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %45\l  store i32 0, i32 addrspace(3)* %46, align 4, !tbaa !7\l  %47 = add nuw nsw i32 %23, 12\l  %48 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %47\l  store i32 0, i32 addrspace(3)* %48, align 16, !tbaa !7\l  %49 = add nuw nsw i32 %23, 13\l  %50 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %49\l  store i32 0, i32 addrspace(3)* %50, align 4, !tbaa !7\l  %51 = add nuw nsw i32 %23, 14\l  %52 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %51\l  store i32 0, i32 addrspace(3)* %52, align 8, !tbaa !7\l  %53 = add nuw nsw i32 %23, 15\l  %54 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %53\l  store i32 0, i32 addrspace(3)* %54, align 4, !tbaa !7\l  %55 = add nuw nsw i32 %23, 16\l  %56 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %55\l  store i32 0, i32 addrspace(3)* %56, align 16, !tbaa !7\l  %57 = add nuw nsw i32 %23, 17\l  %58 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %57\l  store i32 0, i32 addrspace(3)* %58, align 4, !tbaa !7\l  %59 = add nuw nsw i32 %23, 18\l  %60 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %59\l  store i32 0, i32 addrspace(3)* %60, align 8, !tbaa !7\l  %61 = add nuw nsw i32 %23, 19\l  %62 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %61\l  store i32 0, i32 addrspace(3)* %62, align 4, !tbaa !7\l  %63 = add nuw nsw i32 %23, 20\l  %64 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %63\l  store i32 0, i32 addrspace(3)* %64, align 16, !tbaa !7\l  %65 = add nuw nsw i32 %23, 21\l  %66 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %65\l  store i32 0, i32 addrspace(3)* %66, align 4, !tbaa !7\l  %67 = add nuw nsw i32 %23, 22\l  %68 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %67\l  store i32 0, i32 addrspace(3)* %68, align 8, !tbaa !7\l  %69 = add nuw nsw i32 %23, 23\l  %70 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %69\l  store i32 0, i32 addrspace(3)* %70, align 4, !tbaa !7\l  %71 = add nuw nsw i32 %23, 24\l  %72 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %71\l  store i32 0, i32 addrspace(3)* %72, align 16, !tbaa !7\l  %73 = add nuw nsw i32 %23, 25\l  %74 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %73\l  store i32 0, i32 addrspace(3)* %74, align 4, !tbaa !7\l  %75 = add nuw nsw i32 %23, 26\l  %76 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %75\l  store i32 0, i32 addrspace(3)* %76, align 8, !tbaa !7\l  %77 = add nuw nsw i32 %23, 27\l  %78 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %77\l  store i32 0, i32 addrspace(3)* %78, align 4, !tbaa !7\l  %79 = add nuw nsw i32 %23, 28\l  %80 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %79\l  store i32 0, i32 addrspace(3)* %80, align 16, !tbaa !7\l  %81 = add nuw nsw i32 %23, 29\l  %82 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %81\l  store i32 0, i32 addrspace(3)* %82, align 4, !tbaa !7\l  %83 = add nuw nsw i32 %23, 30\l  %84 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %83\l  store i32 0, i32 addrspace(3)* %84, align 8, !tbaa !7\l  %85 = add nuw nsw i32 %23, 31\l  %86 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %85\l  store i32 0, i32 addrspace(3)* %86, align 4, !tbaa !7\l  %87 = add nuw nsw i32 %23, 32\l  %88 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %87\l  store i32 0, i32 addrspace(3)* %88, align 16, !tbaa !7\l  %89 = add nuw nsw i32 %23, 33\l  %90 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %89\l  store i32 0, i32 addrspace(3)* %90, align 4, !tbaa !7\l  %91 = add nuw nsw i32 %23, 34\l  %92 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %91\l  store i32 0, i32 addrspace(3)* %92, align 8, !tbaa !7\l  %93 = add nuw nsw i32 %23, 35\l  %94 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %93\l  store i32 0, i32 addrspace(3)* %94, align 4, !tbaa !7\l  %95 = add nuw nsw i32 %23, 36\l  %96 = icmp eq i32 %95, 720\l  br i1 %96, label %97, label %22, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4dc0610:s0 -> Node0x4dc0660;
	Node0x4dc0610:s1 -> Node0x4dc0610;
	Node0x4dc0660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%97:\l97:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %98 = shl nsw i32 %13, 1\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %2, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %102 = add nuw nsw i32 %98, 1\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %106 = sub nsw i32 %13, %15\l  %107 = tail call i32 @llvm.smax.i32(i32 %106, i32 -1)\l  %108 = sub nsw i32 %1, %15\l  %109 = tail call i32 @llvm.smin.i32(i32 %108, i32 256)\l  %110 = add nsw i32 %107, 1\l  %111 = icmp slt i32 %110, %109\l  br i1 %111, label %112, label %256\l|{<s0>T|<s1>F}}"];
	Node0x4dc0660:s0 -> Node0x4dc7b50;
	Node0x4dc0660:s1 -> Node0x4dc7be0;
	Node0x4dc7b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%112:\l112:                                              \l  %113 = tail call float @llvm.fabs.f32(float %105)\l  %114 = fcmp olt float %113, 1.310720e+05\l  %115 = bitcast float %113 to i32\l  %116 = lshr i32 %115, 23\l  %117 = and i32 %115, 8388607\l  %118 = or i32 %117, 8388608\l  %119 = zext i32 %118 to i64\l  %120 = mul nuw nsw i64 %119, 4266746795\l  %121 = trunc i64 %120 to i32\l  %122 = lshr i64 %120, 32\l  %123 = mul nuw nsw i64 %119, 1011060801\l  %124 = add nuw nsw i64 %122, %123\l  %125 = trunc i64 %124 to i32\l  %126 = lshr i64 %124, 32\l  %127 = mul nuw nsw i64 %119, 3680671129\l  %128 = add nuw nsw i64 %126, %127\l  %129 = trunc i64 %128 to i32\l  %130 = lshr i64 %128, 32\l  %131 = mul nuw nsw i64 %119, 4113882560\l  %132 = add nuw nsw i64 %130, %131\l  %133 = trunc i64 %132 to i32\l  %134 = lshr i64 %132, 32\l  %135 = mul nuw nsw i64 %119, 4230436817\l  %136 = add nuw nsw i64 %134, %135\l  %137 = trunc i64 %136 to i32\l  %138 = lshr i64 %136, 32\l  %139 = mul nuw nsw i64 %119, 1313084713\l  %140 = add nuw nsw i64 %138, %139\l  %141 = trunc i64 %140 to i32\l  %142 = lshr i64 %140, 32\l  %143 = mul nuw nsw i64 %119, 2734261102\l  %144 = add nuw nsw i64 %142, %143\l  %145 = trunc i64 %144 to i32\l  %146 = lshr i64 %144, 32\l  %147 = trunc i64 %146 to i32\l  %148 = add nsw i32 %116, -120\l  %149 = icmp ugt i32 %148, 63\l  %150 = select i1 %149, i32 %141, i32 %147\l  %151 = select i1 %149, i32 %137, i32 %145\l  %152 = select i1 %149, i32 %133, i32 %141\l  %153 = select i1 %149, i32 %129, i32 %137\l  %154 = select i1 %149, i32 %125, i32 %133\l  %155 = select i1 %149, i32 %121, i32 %129\l  %156 = select i1 %149, i32 -64, i32 0\l  %157 = add nsw i32 %156, %148\l  %158 = icmp ugt i32 %157, 31\l  %159 = select i1 %158, i32 %151, i32 %150\l  %160 = select i1 %158, i32 %152, i32 %151\l  %161 = select i1 %158, i32 %153, i32 %152\l  %162 = select i1 %158, i32 %154, i32 %153\l  %163 = select i1 %158, i32 %155, i32 %154\l  %164 = select i1 %158, i32 -32, i32 0\l  %165 = add nsw i32 %164, %157\l  %166 = icmp ugt i32 %165, 31\l  %167 = select i1 %166, i32 %160, i32 %159\l  %168 = select i1 %166, i32 %161, i32 %160\l  %169 = select i1 %166, i32 %162, i32 %161\l  %170 = select i1 %166, i32 %163, i32 %162\l  %171 = select i1 %166, i32 -32, i32 0\l  %172 = add nsw i32 %171, %165\l  %173 = icmp eq i32 %172, 0\l  %174 = sub nsw i32 32, %172\l  %175 = tail call i32 @llvm.fshr.i32(i32 %167, i32 %168, i32 %174)\l  %176 = tail call i32 @llvm.fshr.i32(i32 %168, i32 %169, i32 %174)\l  %177 = tail call i32 @llvm.fshr.i32(i32 %169, i32 %170, i32 %174)\l  %178 = select i1 %173, i32 %167, i32 %175\l  %179 = select i1 %173, i32 %168, i32 %176\l  %180 = select i1 %173, i32 %169, i32 %177\l  %181 = lshr i32 %178, 29\l  %182 = tail call i32 @llvm.fshl.i32(i32 %178, i32 %179, i32 2)\l  %183 = tail call i32 @llvm.fshl.i32(i32 %179, i32 %180, i32 2)\l  %184 = tail call i32 @llvm.fshl.i32(i32 %180, i32 %170, i32 2)\l  %185 = and i32 %181, 1\l  %186 = sub nsw i32 0, %185\l  %187 = shl i32 %181, 31\l  %188 = xor i32 %182, %186\l  %189 = xor i32 %183, %186\l  %190 = xor i32 %184, %186\l  %191 = tail call i32 @llvm.ctlz.i32(i32 %188, i1 false), !range !15\l  %192 = sub nsw i32 31, %191\l  %193 = tail call i32 @llvm.fshr.i32(i32 %188, i32 %189, i32 %192)\l  %194 = tail call i32 @llvm.fshr.i32(i32 %189, i32 %190, i32 %192)\l  %195 = shl nuw nsw i32 %191, 23\l  %196 = sub nuw nsw i32 1056964608, %195\l  %197 = lshr i32 %193, 9\l  %198 = or i32 %197, %196\l  %199 = or i32 %198, %187\l  %200 = bitcast i32 %199 to float\l  %201 = tail call i32 @llvm.fshl.i32(i32 %193, i32 %194, i32 23)\l  %202 = tail call i32 @llvm.ctlz.i32(i32 %201, i1 false), !range !15\l  %203 = fmul float %200, 0x3FF921FB40000000\l  %204 = add nuw nsw i32 %202, %191\l  %205 = shl nuw nsw i32 %204, 23\l  %206 = sub nuw nsw i32 855638016, %205\l  %207 = sub nsw i32 31, %202\l  %208 = tail call i32 @llvm.fshr.i32(i32 %201, i32 %194, i32 %207)\l  %209 = lshr i32 %208, 9\l  %210 = or i32 %206, %209\l  %211 = or i32 %210, %187\l  %212 = bitcast i32 %211 to float\l  %213 = fneg float %203\l  %214 = tail call float @llvm.fma.f32(float %200, float 0x3FF921FB40000000,\l... float %213)\l  %215 = tail call float @llvm.fma.f32(float %200, float 0x3E74442D00000000,\l... float %214)\l  %216 = tail call float @llvm.fma.f32(float %212, float 0x3FF921FB40000000,\l... float %215)\l  %217 = fadd float %203, %216\l  %218 = lshr i32 %178, 30\l  %219 = add nuw nsw i32 %185, %218\l  %220 = fmul float %113, 0x3FE45F3060000000\l  %221 = tail call float @llvm.rint.f32(float %220)\l  %222 = tail call float @llvm.fma.f32(float %221, float 0xBFF921FB40000000,\l... float %113)\l  %223 = tail call float @llvm.fma.f32(float %221, float 0xBE74442D00000000,\l... float %222)\l  %224 = tail call float @llvm.fma.f32(float %221, float 0xBCF8469880000000,\l... float %223)\l  %225 = fptosi float %221 to i32\l  %226 = bitcast float %105 to i32\l  %227 = tail call i1 @llvm.amdgcn.class.f32(float %113, i32 504)\l  %228 = select i1 %114, float %224, float %217\l  %229 = select i1 %114, i32 %225, i32 %219\l  %230 = fmul float %228, %228\l  %231 = tail call float @llvm.fmuladd.f32(float %230, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %232 = tail call float @llvm.fmuladd.f32(float %230, float %231, float\l... 0xBFC55553A0000000)\l  %233 = fmul float %230, %232\l  %234 = tail call float @llvm.fmuladd.f32(float %228, float %233, float %228)\l  %235 = tail call float @llvm.fmuladd.f32(float %230, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %236 = tail call float @llvm.fmuladd.f32(float %230, float %235, float\l... 0x3FA5557EE0000000)\l  %237 = tail call float @llvm.fmuladd.f32(float %230, float %236, float\l... 0xBFE0000080000000)\l  %238 = tail call float @llvm.fmuladd.f32(float %230, float %237, float\l... 1.000000e+00)\l  %239 = and i32 %229, 1\l  %240 = icmp eq i32 %239, 0\l  %241 = select i1 %240, float %234, float %238\l  %242 = bitcast float %241 to i32\l  %243 = shl i32 %229, 30\l  %244 = and i32 %243, -2147483648\l  %245 = xor i32 %226, %242\l  %246 = xor i32 %245, %115\l  %247 = xor i32 %246, %244\l  %248 = bitcast i32 %247 to float\l  %249 = select i1 %227, float %248, float 0x7FF8000000000000\l  %250 = fneg float %234\l  %251 = select i1 %240, float %238, float %250\l  %252 = bitcast float %251 to i32\l  %253 = xor i32 %244, %252\l  %254 = bitcast i32 %253 to float\l  %255 = select i1 %227, float %254, float 0x7FF8000000000000\l  br label %257\l}"];
	Node0x4dc7b50 -> Node0x4dd0ba0;
	Node0x4dc7be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%256:\l256:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %21, label %719, label %890\l|{<s0>T|<s1>F}}"];
	Node0x4dc7be0:s0 -> Node0x4dc9f10;
	Node0x4dc7be0:s1 -> Node0x4dc0440;
	Node0x4dd0ba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%257:\l257:                                              \l  %258 = phi i32 [ %110, %112 ], [ %717, %663 ]\l  %259 = add nsw i32 %258, %15\l  %260 = shl nsw i32 %259, 1\l  %261 = sext i32 %260 to i64\l  %262 = getelementptr inbounds float, float addrspace(1)* %2, i64 %261\l  %263 = load float, float addrspace(1)* %262, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %264 = add nuw nsw i32 %260, 1\l  %265 = sext i32 %264 to i64\l  %266 = getelementptr inbounds float, float addrspace(1)* %2, i64 %265\l  %267 = load float, float addrspace(1)* %266, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %268 = tail call float @llvm.fabs.f32(float %267)\l  %269 = fcmp olt float %268, 1.310720e+05\l  br i1 %269, label %270, label %278\l|{<s0>T|<s1>F}}"];
	Node0x4dd0ba0:s0 -> Node0x4dd1f80;
	Node0x4dd0ba0:s1 -> Node0x4dd2010;
	Node0x4dd1f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%270:\l270:                                              \l  %271 = fmul float %268, 0x3FE45F3060000000\l  %272 = tail call float @llvm.rint.f32(float %271)\l  %273 = tail call float @llvm.fma.f32(float %272, float 0xBFF921FB40000000,\l... float %268)\l  %274 = tail call float @llvm.fma.f32(float %272, float 0xBE74442D00000000,\l... float %273)\l  %275 = tail call float @llvm.fma.f32(float %272, float 0xBCF8469880000000,\l... float %274)\l  %276 = fptosi float %272 to i32\l  %277 = bitcast float %268 to i32\l  br label %384\l}"];
	Node0x4dd1f80 -> Node0x4dd2740;
	Node0x4dd2010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%278:\l278:                                              \l  %279 = bitcast float %268 to i32\l  %280 = lshr i32 %279, 23\l  %281 = and i32 %279, 8388607\l  %282 = or i32 %281, 8388608\l  %283 = zext i32 %282 to i64\l  %284 = mul nuw nsw i64 %283, 4266746795\l  %285 = trunc i64 %284 to i32\l  %286 = lshr i64 %284, 32\l  %287 = mul nuw nsw i64 %283, 1011060801\l  %288 = add nuw nsw i64 %286, %287\l  %289 = trunc i64 %288 to i32\l  %290 = lshr i64 %288, 32\l  %291 = mul nuw nsw i64 %283, 3680671129\l  %292 = add nuw nsw i64 %290, %291\l  %293 = trunc i64 %292 to i32\l  %294 = lshr i64 %292, 32\l  %295 = mul nuw nsw i64 %283, 4113882560\l  %296 = add nuw nsw i64 %294, %295\l  %297 = trunc i64 %296 to i32\l  %298 = lshr i64 %296, 32\l  %299 = mul nuw nsw i64 %283, 4230436817\l  %300 = add nuw nsw i64 %298, %299\l  %301 = trunc i64 %300 to i32\l  %302 = lshr i64 %300, 32\l  %303 = mul nuw nsw i64 %283, 1313084713\l  %304 = add nuw nsw i64 %302, %303\l  %305 = trunc i64 %304 to i32\l  %306 = lshr i64 %304, 32\l  %307 = mul nuw nsw i64 %283, 2734261102\l  %308 = add nuw nsw i64 %306, %307\l  %309 = trunc i64 %308 to i32\l  %310 = lshr i64 %308, 32\l  %311 = trunc i64 %310 to i32\l  %312 = add nsw i32 %280, -120\l  %313 = icmp ugt i32 %312, 63\l  %314 = select i1 %313, i32 %305, i32 %311\l  %315 = select i1 %313, i32 %301, i32 %309\l  %316 = select i1 %313, i32 %297, i32 %305\l  %317 = select i1 %313, i32 %293, i32 %301\l  %318 = select i1 %313, i32 %289, i32 %297\l  %319 = select i1 %313, i32 %285, i32 %293\l  %320 = select i1 %313, i32 -64, i32 0\l  %321 = add nsw i32 %320, %312\l  %322 = icmp ugt i32 %321, 31\l  %323 = select i1 %322, i32 %315, i32 %314\l  %324 = select i1 %322, i32 %316, i32 %315\l  %325 = select i1 %322, i32 %317, i32 %316\l  %326 = select i1 %322, i32 %318, i32 %317\l  %327 = select i1 %322, i32 %319, i32 %318\l  %328 = select i1 %322, i32 -32, i32 0\l  %329 = add nsw i32 %328, %321\l  %330 = icmp ugt i32 %329, 31\l  %331 = select i1 %330, i32 %324, i32 %323\l  %332 = select i1 %330, i32 %325, i32 %324\l  %333 = select i1 %330, i32 %326, i32 %325\l  %334 = select i1 %330, i32 %327, i32 %326\l  %335 = select i1 %330, i32 -32, i32 0\l  %336 = add nsw i32 %335, %329\l  %337 = icmp eq i32 %336, 0\l  %338 = sub nsw i32 32, %336\l  %339 = tail call i32 @llvm.fshr.i32(i32 %331, i32 %332, i32 %338)\l  %340 = tail call i32 @llvm.fshr.i32(i32 %332, i32 %333, i32 %338)\l  %341 = tail call i32 @llvm.fshr.i32(i32 %333, i32 %334, i32 %338)\l  %342 = select i1 %337, i32 %331, i32 %339\l  %343 = select i1 %337, i32 %332, i32 %340\l  %344 = select i1 %337, i32 %333, i32 %341\l  %345 = lshr i32 %342, 29\l  %346 = tail call i32 @llvm.fshl.i32(i32 %342, i32 %343, i32 2)\l  %347 = tail call i32 @llvm.fshl.i32(i32 %343, i32 %344, i32 2)\l  %348 = tail call i32 @llvm.fshl.i32(i32 %344, i32 %334, i32 2)\l  %349 = and i32 %345, 1\l  %350 = sub nsw i32 0, %349\l  %351 = shl i32 %345, 31\l  %352 = xor i32 %346, %350\l  %353 = xor i32 %347, %350\l  %354 = xor i32 %348, %350\l  %355 = tail call i32 @llvm.ctlz.i32(i32 %352, i1 false), !range !15\l  %356 = sub nsw i32 31, %355\l  %357 = tail call i32 @llvm.fshr.i32(i32 %352, i32 %353, i32 %356)\l  %358 = tail call i32 @llvm.fshr.i32(i32 %353, i32 %354, i32 %356)\l  %359 = shl nuw nsw i32 %355, 23\l  %360 = sub nuw nsw i32 1056964608, %359\l  %361 = lshr i32 %357, 9\l  %362 = or i32 %361, %360\l  %363 = or i32 %362, %351\l  %364 = bitcast i32 %363 to float\l  %365 = tail call i32 @llvm.fshl.i32(i32 %357, i32 %358, i32 23)\l  %366 = tail call i32 @llvm.ctlz.i32(i32 %365, i1 false), !range !15\l  %367 = fmul float %364, 0x3FF921FB40000000\l  %368 = add nuw nsw i32 %366, %355\l  %369 = shl nuw nsw i32 %368, 23\l  %370 = sub nuw nsw i32 855638016, %369\l  %371 = sub nsw i32 31, %366\l  %372 = tail call i32 @llvm.fshr.i32(i32 %365, i32 %358, i32 %371)\l  %373 = lshr i32 %372, 9\l  %374 = or i32 %370, %373\l  %375 = or i32 %374, %351\l  %376 = bitcast i32 %375 to float\l  %377 = fneg float %367\l  %378 = tail call float @llvm.fma.f32(float %364, float 0x3FF921FB40000000,\l... float %377)\l  %379 = tail call float @llvm.fma.f32(float %364, float 0x3E74442D00000000,\l... float %378)\l  %380 = tail call float @llvm.fma.f32(float %376, float 0x3FF921FB40000000,\l... float %379)\l  %381 = fadd float %367, %380\l  %382 = lshr i32 %342, 30\l  %383 = add nuw nsw i32 %349, %382\l  br label %384\l}"];
	Node0x4dd2010 -> Node0x4dd2740;
	Node0x4dd2740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%384:\l384:                                              \l  %385 = phi i32 [ %277, %270 ], [ %279, %278 ]\l  %386 = phi float [ %275, %270 ], [ %381, %278 ]\l  %387 = phi i32 [ %276, %270 ], [ %383, %278 ]\l  %388 = fmul float %386, %386\l  %389 = tail call float @llvm.fmuladd.f32(float %388, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %390 = tail call float @llvm.fmuladd.f32(float %388, float %389, float\l... 0xBFC55553A0000000)\l  %391 = fmul float %388, %390\l  %392 = tail call float @llvm.fmuladd.f32(float %386, float %391, float %386)\l  %393 = tail call float @llvm.fmuladd.f32(float %388, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %394 = tail call float @llvm.fmuladd.f32(float %388, float %393, float\l... 0x3FA5557EE0000000)\l  %395 = tail call float @llvm.fmuladd.f32(float %388, float %394, float\l... 0xBFE0000080000000)\l  %396 = tail call float @llvm.fmuladd.f32(float %388, float %395, float\l... 1.000000e+00)\l  %397 = and i32 %387, 1\l  %398 = icmp eq i32 %397, 0\l  %399 = select i1 %398, float %392, float %396\l  %400 = bitcast float %399 to i32\l  %401 = shl i32 %387, 30\l  %402 = and i32 %401, -2147483648\l  %403 = bitcast float %267 to i32\l  %404 = xor i32 %385, %403\l  %405 = xor i32 %404, %402\l  %406 = xor i32 %405, %400\l  %407 = bitcast i32 %406 to float\l  %408 = tail call i1 @llvm.amdgcn.class.f32(float %268, i32 504)\l  %409 = select i1 %408, float %407, float 0x7FF8000000000000\l  %410 = fmul contract float %249, %409\l  br i1 %269, label %411, label %418\l|{<s0>T|<s1>F}}"];
	Node0x4dd2740:s0 -> Node0x4dd8160;
	Node0x4dd2740:s1 -> Node0x4dd81b0;
	Node0x4dd8160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%411:\l411:                                              \l  %412 = fmul float %268, 0x3FE45F3060000000\l  %413 = tail call float @llvm.rint.f32(float %412)\l  %414 = tail call float @llvm.fma.f32(float %413, float 0xBFF921FB40000000,\l... float %268)\l  %415 = tail call float @llvm.fma.f32(float %413, float 0xBE74442D00000000,\l... float %414)\l  %416 = tail call float @llvm.fma.f32(float %413, float 0xBCF8469880000000,\l... float %415)\l  %417 = fptosi float %413 to i32\l  br label %524\l}"];
	Node0x4dd8160 -> Node0x4dd8830;
	Node0x4dd81b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%418:\l418:                                              \l  %419 = bitcast float %268 to i32\l  %420 = lshr i32 %419, 23\l  %421 = and i32 %419, 8388607\l  %422 = or i32 %421, 8388608\l  %423 = zext i32 %422 to i64\l  %424 = mul nuw nsw i64 %423, 4266746795\l  %425 = trunc i64 %424 to i32\l  %426 = lshr i64 %424, 32\l  %427 = mul nuw nsw i64 %423, 1011060801\l  %428 = add nuw nsw i64 %426, %427\l  %429 = trunc i64 %428 to i32\l  %430 = lshr i64 %428, 32\l  %431 = mul nuw nsw i64 %423, 3680671129\l  %432 = add nuw nsw i64 %430, %431\l  %433 = trunc i64 %432 to i32\l  %434 = lshr i64 %432, 32\l  %435 = mul nuw nsw i64 %423, 4113882560\l  %436 = add nuw nsw i64 %434, %435\l  %437 = trunc i64 %436 to i32\l  %438 = lshr i64 %436, 32\l  %439 = mul nuw nsw i64 %423, 4230436817\l  %440 = add nuw nsw i64 %438, %439\l  %441 = trunc i64 %440 to i32\l  %442 = lshr i64 %440, 32\l  %443 = mul nuw nsw i64 %423, 1313084713\l  %444 = add nuw nsw i64 %442, %443\l  %445 = trunc i64 %444 to i32\l  %446 = lshr i64 %444, 32\l  %447 = mul nuw nsw i64 %423, 2734261102\l  %448 = add nuw nsw i64 %446, %447\l  %449 = trunc i64 %448 to i32\l  %450 = lshr i64 %448, 32\l  %451 = trunc i64 %450 to i32\l  %452 = add nsw i32 %420, -120\l  %453 = icmp ugt i32 %452, 63\l  %454 = select i1 %453, i32 %445, i32 %451\l  %455 = select i1 %453, i32 %441, i32 %449\l  %456 = select i1 %453, i32 %437, i32 %445\l  %457 = select i1 %453, i32 %433, i32 %441\l  %458 = select i1 %453, i32 %429, i32 %437\l  %459 = select i1 %453, i32 %425, i32 %433\l  %460 = select i1 %453, i32 -64, i32 0\l  %461 = add nsw i32 %460, %452\l  %462 = icmp ugt i32 %461, 31\l  %463 = select i1 %462, i32 %455, i32 %454\l  %464 = select i1 %462, i32 %456, i32 %455\l  %465 = select i1 %462, i32 %457, i32 %456\l  %466 = select i1 %462, i32 %458, i32 %457\l  %467 = select i1 %462, i32 %459, i32 %458\l  %468 = select i1 %462, i32 -32, i32 0\l  %469 = add nsw i32 %468, %461\l  %470 = icmp ugt i32 %469, 31\l  %471 = select i1 %470, i32 %464, i32 %463\l  %472 = select i1 %470, i32 %465, i32 %464\l  %473 = select i1 %470, i32 %466, i32 %465\l  %474 = select i1 %470, i32 %467, i32 %466\l  %475 = select i1 %470, i32 -32, i32 0\l  %476 = add nsw i32 %475, %469\l  %477 = icmp eq i32 %476, 0\l  %478 = sub nsw i32 32, %476\l  %479 = tail call i32 @llvm.fshr.i32(i32 %471, i32 %472, i32 %478)\l  %480 = tail call i32 @llvm.fshr.i32(i32 %472, i32 %473, i32 %478)\l  %481 = tail call i32 @llvm.fshr.i32(i32 %473, i32 %474, i32 %478)\l  %482 = select i1 %477, i32 %471, i32 %479\l  %483 = select i1 %477, i32 %472, i32 %480\l  %484 = select i1 %477, i32 %473, i32 %481\l  %485 = lshr i32 %482, 29\l  %486 = tail call i32 @llvm.fshl.i32(i32 %482, i32 %483, i32 2)\l  %487 = tail call i32 @llvm.fshl.i32(i32 %483, i32 %484, i32 2)\l  %488 = tail call i32 @llvm.fshl.i32(i32 %484, i32 %474, i32 2)\l  %489 = and i32 %485, 1\l  %490 = sub nsw i32 0, %489\l  %491 = shl i32 %485, 31\l  %492 = xor i32 %486, %490\l  %493 = xor i32 %487, %490\l  %494 = xor i32 %488, %490\l  %495 = tail call i32 @llvm.ctlz.i32(i32 %492, i1 false), !range !15\l  %496 = sub nsw i32 31, %495\l  %497 = tail call i32 @llvm.fshr.i32(i32 %492, i32 %493, i32 %496)\l  %498 = tail call i32 @llvm.fshr.i32(i32 %493, i32 %494, i32 %496)\l  %499 = shl nuw nsw i32 %495, 23\l  %500 = sub nuw nsw i32 1056964608, %499\l  %501 = lshr i32 %497, 9\l  %502 = or i32 %501, %500\l  %503 = or i32 %502, %491\l  %504 = bitcast i32 %503 to float\l  %505 = tail call i32 @llvm.fshl.i32(i32 %497, i32 %498, i32 23)\l  %506 = tail call i32 @llvm.ctlz.i32(i32 %505, i1 false), !range !15\l  %507 = fmul float %504, 0x3FF921FB40000000\l  %508 = add nuw nsw i32 %506, %495\l  %509 = shl nuw nsw i32 %508, 23\l  %510 = sub nuw nsw i32 855638016, %509\l  %511 = sub nsw i32 31, %506\l  %512 = tail call i32 @llvm.fshr.i32(i32 %505, i32 %498, i32 %511)\l  %513 = lshr i32 %512, 9\l  %514 = or i32 %510, %513\l  %515 = or i32 %514, %491\l  %516 = bitcast i32 %515 to float\l  %517 = fneg float %507\l  %518 = tail call float @llvm.fma.f32(float %504, float 0x3FF921FB40000000,\l... float %517)\l  %519 = tail call float @llvm.fma.f32(float %504, float 0x3E74442D00000000,\l... float %518)\l  %520 = tail call float @llvm.fma.f32(float %516, float 0x3FF921FB40000000,\l... float %519)\l  %521 = fadd float %507, %520\l  %522 = lshr i32 %482, 30\l  %523 = add nuw nsw i32 %489, %522\l  br label %524\l}"];
	Node0x4dd81b0 -> Node0x4dd8830;
	Node0x4dd8830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%524:\l524:                                              \l  %525 = phi float [ %416, %411 ], [ %521, %418 ]\l  %526 = phi i32 [ %417, %411 ], [ %523, %418 ]\l  %527 = fmul float %525, %525\l  %528 = tail call float @llvm.fmuladd.f32(float %527, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %529 = tail call float @llvm.fmuladd.f32(float %527, float %528, float\l... 0xBFC55553A0000000)\l  %530 = fmul float %527, %529\l  %531 = tail call float @llvm.fmuladd.f32(float %525, float %530, float %525)\l  %532 = tail call float @llvm.fmuladd.f32(float %527, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %533 = tail call float @llvm.fmuladd.f32(float %527, float %532, float\l... 0x3FA5557EE0000000)\l  %534 = tail call float @llvm.fmuladd.f32(float %527, float %533, float\l... 0xBFE0000080000000)\l  %535 = tail call float @llvm.fmuladd.f32(float %527, float %534, float\l... 1.000000e+00)\l  %536 = fneg float %531\l  %537 = and i32 %526, 1\l  %538 = icmp eq i32 %537, 0\l  %539 = select i1 %538, float %535, float %536\l  %540 = bitcast float %539 to i32\l  %541 = shl i32 %526, 30\l  %542 = and i32 %541, -2147483648\l  %543 = xor i32 %542, %540\l  %544 = bitcast i32 %543 to float\l  %545 = select i1 %408, float %544, float 0x7FF8000000000000\l  %546 = fmul contract float %255, %545\l  %547 = fsub contract float %101, %263\l  %548 = tail call float @llvm.fabs.f32(float %547)\l  %549 = fcmp olt float %548, 1.310720e+05\l  br i1 %549, label %550, label %557\l|{<s0>T|<s1>F}}"];
	Node0x4dd8830:s0 -> Node0x4ddfbc0;
	Node0x4dd8830:s1 -> Node0x4ddfc10;
	Node0x4ddfbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%550:\l550:                                              \l  %551 = fmul float %548, 0x3FE45F3060000000\l  %552 = tail call float @llvm.rint.f32(float %551)\l  %553 = tail call float @llvm.fma.f32(float %552, float 0xBFF921FB40000000,\l... float %548)\l  %554 = tail call float @llvm.fma.f32(float %552, float 0xBE74442D00000000,\l... float %553)\l  %555 = tail call float @llvm.fma.f32(float %552, float 0xBCF8469880000000,\l... float %554)\l  %556 = fptosi float %552 to i32\l  br label %663\l}"];
	Node0x4ddfbc0 -> Node0x4dca010;
	Node0x4ddfc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%557:\l557:                                              \l  %558 = bitcast float %548 to i32\l  %559 = lshr i32 %558, 23\l  %560 = and i32 %558, 8388607\l  %561 = or i32 %560, 8388608\l  %562 = zext i32 %561 to i64\l  %563 = mul nuw nsw i64 %562, 4266746795\l  %564 = trunc i64 %563 to i32\l  %565 = lshr i64 %563, 32\l  %566 = mul nuw nsw i64 %562, 1011060801\l  %567 = add nuw nsw i64 %565, %566\l  %568 = trunc i64 %567 to i32\l  %569 = lshr i64 %567, 32\l  %570 = mul nuw nsw i64 %562, 3680671129\l  %571 = add nuw nsw i64 %569, %570\l  %572 = trunc i64 %571 to i32\l  %573 = lshr i64 %571, 32\l  %574 = mul nuw nsw i64 %562, 4113882560\l  %575 = add nuw nsw i64 %573, %574\l  %576 = trunc i64 %575 to i32\l  %577 = lshr i64 %575, 32\l  %578 = mul nuw nsw i64 %562, 4230436817\l  %579 = add nuw nsw i64 %577, %578\l  %580 = trunc i64 %579 to i32\l  %581 = lshr i64 %579, 32\l  %582 = mul nuw nsw i64 %562, 1313084713\l  %583 = add nuw nsw i64 %581, %582\l  %584 = trunc i64 %583 to i32\l  %585 = lshr i64 %583, 32\l  %586 = mul nuw nsw i64 %562, 2734261102\l  %587 = add nuw nsw i64 %585, %586\l  %588 = trunc i64 %587 to i32\l  %589 = lshr i64 %587, 32\l  %590 = trunc i64 %589 to i32\l  %591 = add nsw i32 %559, -120\l  %592 = icmp ugt i32 %591, 63\l  %593 = select i1 %592, i32 %584, i32 %590\l  %594 = select i1 %592, i32 %580, i32 %588\l  %595 = select i1 %592, i32 %576, i32 %584\l  %596 = select i1 %592, i32 %572, i32 %580\l  %597 = select i1 %592, i32 %568, i32 %576\l  %598 = select i1 %592, i32 %564, i32 %572\l  %599 = select i1 %592, i32 -64, i32 0\l  %600 = add nsw i32 %599, %591\l  %601 = icmp ugt i32 %600, 31\l  %602 = select i1 %601, i32 %594, i32 %593\l  %603 = select i1 %601, i32 %595, i32 %594\l  %604 = select i1 %601, i32 %596, i32 %595\l  %605 = select i1 %601, i32 %597, i32 %596\l  %606 = select i1 %601, i32 %598, i32 %597\l  %607 = select i1 %601, i32 -32, i32 0\l  %608 = add nsw i32 %607, %600\l  %609 = icmp ugt i32 %608, 31\l  %610 = select i1 %609, i32 %603, i32 %602\l  %611 = select i1 %609, i32 %604, i32 %603\l  %612 = select i1 %609, i32 %605, i32 %604\l  %613 = select i1 %609, i32 %606, i32 %605\l  %614 = select i1 %609, i32 -32, i32 0\l  %615 = add nsw i32 %614, %608\l  %616 = icmp eq i32 %615, 0\l  %617 = sub nsw i32 32, %615\l  %618 = tail call i32 @llvm.fshr.i32(i32 %610, i32 %611, i32 %617)\l  %619 = tail call i32 @llvm.fshr.i32(i32 %611, i32 %612, i32 %617)\l  %620 = tail call i32 @llvm.fshr.i32(i32 %612, i32 %613, i32 %617)\l  %621 = select i1 %616, i32 %610, i32 %618\l  %622 = select i1 %616, i32 %611, i32 %619\l  %623 = select i1 %616, i32 %612, i32 %620\l  %624 = lshr i32 %621, 29\l  %625 = tail call i32 @llvm.fshl.i32(i32 %621, i32 %622, i32 2)\l  %626 = tail call i32 @llvm.fshl.i32(i32 %622, i32 %623, i32 2)\l  %627 = tail call i32 @llvm.fshl.i32(i32 %623, i32 %613, i32 2)\l  %628 = and i32 %624, 1\l  %629 = sub nsw i32 0, %628\l  %630 = shl i32 %624, 31\l  %631 = xor i32 %625, %629\l  %632 = xor i32 %626, %629\l  %633 = xor i32 %627, %629\l  %634 = tail call i32 @llvm.ctlz.i32(i32 %631, i1 false), !range !15\l  %635 = sub nsw i32 31, %634\l  %636 = tail call i32 @llvm.fshr.i32(i32 %631, i32 %632, i32 %635)\l  %637 = tail call i32 @llvm.fshr.i32(i32 %632, i32 %633, i32 %635)\l  %638 = shl nuw nsw i32 %634, 23\l  %639 = sub nuw nsw i32 1056964608, %638\l  %640 = lshr i32 %636, 9\l  %641 = or i32 %640, %639\l  %642 = or i32 %641, %630\l  %643 = bitcast i32 %642 to float\l  %644 = tail call i32 @llvm.fshl.i32(i32 %636, i32 %637, i32 23)\l  %645 = tail call i32 @llvm.ctlz.i32(i32 %644, i1 false), !range !15\l  %646 = fmul float %643, 0x3FF921FB40000000\l  %647 = add nuw nsw i32 %645, %634\l  %648 = shl nuw nsw i32 %647, 23\l  %649 = sub nuw nsw i32 855638016, %648\l  %650 = sub nsw i32 31, %645\l  %651 = tail call i32 @llvm.fshr.i32(i32 %644, i32 %637, i32 %650)\l  %652 = lshr i32 %651, 9\l  %653 = or i32 %649, %652\l  %654 = or i32 %653, %630\l  %655 = bitcast i32 %654 to float\l  %656 = fneg float %646\l  %657 = tail call float @llvm.fma.f32(float %643, float 0x3FF921FB40000000,\l... float %656)\l  %658 = tail call float @llvm.fma.f32(float %643, float 0x3E74442D00000000,\l... float %657)\l  %659 = tail call float @llvm.fma.f32(float %655, float 0x3FF921FB40000000,\l... float %658)\l  %660 = fadd float %646, %659\l  %661 = lshr i32 %621, 30\l  %662 = add nuw nsw i32 %628, %661\l  br label %663\l}"];
	Node0x4ddfc10 -> Node0x4dca010;
	Node0x4dca010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%663:\l663:                                              \l  %664 = phi float [ %555, %550 ], [ %660, %557 ]\l  %665 = phi i32 [ %556, %550 ], [ %662, %557 ]\l  %666 = fmul float %664, %664\l  %667 = tail call float @llvm.fmuladd.f32(float %666, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %668 = tail call float @llvm.fmuladd.f32(float %666, float %667, float\l... 0xBFC55553A0000000)\l  %669 = fmul float %666, %668\l  %670 = tail call float @llvm.fmuladd.f32(float %664, float %669, float %664)\l  %671 = tail call float @llvm.fmuladd.f32(float %666, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %672 = tail call float @llvm.fmuladd.f32(float %666, float %671, float\l... 0x3FA5557EE0000000)\l  %673 = tail call float @llvm.fmuladd.f32(float %666, float %672, float\l... 0xBFE0000080000000)\l  %674 = tail call float @llvm.fmuladd.f32(float %666, float %673, float\l... 1.000000e+00)\l  %675 = fneg float %670\l  %676 = and i32 %665, 1\l  %677 = icmp eq i32 %676, 0\l  %678 = select i1 %677, float %674, float %675\l  %679 = bitcast float %678 to i32\l  %680 = shl i32 %665, 30\l  %681 = and i32 %680, -2147483648\l  %682 = xor i32 %681, %679\l  %683 = bitcast i32 %682 to float\l  %684 = tail call i1 @llvm.amdgcn.class.f32(float %548, i32 504)\l  %685 = select i1 %684, float %683, float 0x7FF8000000000000\l  %686 = fmul contract float %546, %685\l  %687 = fadd contract float %410, %686\l  %688 = tail call float @llvm.minnum.f32(float %687, float 1.000000e+00)\l  %689 = tail call float @llvm.maxnum.f32(float %688, float -1.000000e+00)\l  %690 = tail call float @llvm.fabs.f32(float %689)\l  %691 = tail call float @llvm.fmuladd.f32(float %690, float -5.000000e-01,\l... float 5.000000e-01)\l  %692 = fmul float %689, %689\l  %693 = fcmp ogt float %690, 5.000000e-01\l  %694 = select i1 %693, float %691, float %692\l  %695 = tail call float @llvm.fmuladd.f32(float %694, float\l... 0x3FA38434E0000000, float 0x3F8BF8BB40000000)\l  %696 = tail call float @llvm.fmuladd.f32(float %694, float %695, float\l... 0x3FA0698780000000)\l  %697 = tail call float @llvm.fmuladd.f32(float %694, float %696, float\l... 0x3FA6C83620000000)\l  %698 = tail call float @llvm.fmuladd.f32(float %694, float %697, float\l... 0x3FB3337900000000)\l  %699 = tail call float @llvm.fmuladd.f32(float %694, float %698, float\l... 0x3FC5555580000000)\l  %700 = fmul float %694, %699\l  %701 = tail call float @llvm.sqrt.f32(float %694)\l  %702 = tail call float @llvm.fmuladd.f32(float %701, float %700, float %701)\l  %703 = fmul float %702, 2.000000e+00\l  %704 = fsub float 0x400921FB60000000, %703\l  %705 = fcmp olt float %689, 0.000000e+00\l  %706 = select i1 %705, float %704, float %703\l  %707 = tail call float @llvm.fmuladd.f32(float %689, float %700, float %689)\l  %708 = fsub float 0x3FF921FB60000000, %707\l  %709 = select i1 %693, float %706, float %708\l  %710 = fmul contract float %709, 1.800000e+02\l  %711 = fdiv contract float %710, 0x400921FA00000000\l  %712 = fmul contract float %711, 4.000000e+00\l  %713 = tail call float @llvm.floor.f32(float %712)\l  %714 = fptosi float %713 to i32\l  %715 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %714\l  %716 = atomicrmw add i32 addrspace(3)* %715, i32 2 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %717 = add nsw i32 %258, 1\l  %718 = icmp slt i32 %717, %109\l  br i1 %718, label %257, label %256, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4dca010:s0 -> Node0x4dd0ba0;
	Node0x4dca010:s1 -> Node0x4dc7be0;
	Node0x4dc9f10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%719:\l719:                                              \l  %720 = phi i32 [ %888, %719 ], [ 0, %256 ]\l  %721 = zext i32 %720 to i64\l  %722 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %721\l  %723 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %720\l  %724 = load i32, i32 addrspace(3)* %723, align 16, !tbaa !7\l  %725 = zext i32 %724 to i64\l  %726 = atomicrmw add i64 addrspace(1)* %722, i64 %725\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %727 = or i32 %720, 1\l  %728 = zext i32 %727 to i64\l  %729 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %728\l  %730 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %727\l  %731 = load i32, i32 addrspace(3)* %730, align 4, !tbaa !7\l  %732 = zext i32 %731 to i64\l  %733 = atomicrmw add i64 addrspace(1)* %729, i64 %732\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %734 = or i32 %720, 2\l  %735 = zext i32 %734 to i64\l  %736 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %735\l  %737 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %734\l  %738 = load i32, i32 addrspace(3)* %737, align 8, !tbaa !7\l  %739 = zext i32 %738 to i64\l  %740 = atomicrmw add i64 addrspace(1)* %736, i64 %739\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %741 = or i32 %720, 3\l  %742 = zext i32 %741 to i64\l  %743 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %742\l  %744 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %741\l  %745 = load i32, i32 addrspace(3)* %744, align 4, !tbaa !7\l  %746 = zext i32 %745 to i64\l  %747 = atomicrmw add i64 addrspace(1)* %743, i64 %746\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %748 = or i32 %720, 4\l  %749 = zext i32 %748 to i64\l  %750 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %749\l  %751 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %748\l  %752 = load i32, i32 addrspace(3)* %751, align 16, !tbaa !7\l  %753 = zext i32 %752 to i64\l  %754 = atomicrmw add i64 addrspace(1)* %750, i64 %753\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %755 = or i32 %720, 5\l  %756 = zext i32 %755 to i64\l  %757 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %756\l  %758 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %755\l  %759 = load i32, i32 addrspace(3)* %758, align 4, !tbaa !7\l  %760 = zext i32 %759 to i64\l  %761 = atomicrmw add i64 addrspace(1)* %757, i64 %760\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %762 = or i32 %720, 6\l  %763 = zext i32 %762 to i64\l  %764 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %763\l  %765 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %762\l  %766 = load i32, i32 addrspace(3)* %765, align 8, !tbaa !7\l  %767 = zext i32 %766 to i64\l  %768 = atomicrmw add i64 addrspace(1)* %764, i64 %767\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %769 = or i32 %720, 7\l  %770 = zext i32 %769 to i64\l  %771 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %770\l  %772 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %769\l  %773 = load i32, i32 addrspace(3)* %772, align 4, !tbaa !7\l  %774 = zext i32 %773 to i64\l  %775 = atomicrmw add i64 addrspace(1)* %771, i64 %774\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %776 = add nuw nsw i32 %720, 8\l  %777 = zext i32 %776 to i64\l  %778 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %777\l  %779 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %776\l  %780 = load i32, i32 addrspace(3)* %779, align 16, !tbaa !7\l  %781 = zext i32 %780 to i64\l  %782 = atomicrmw add i64 addrspace(1)* %778, i64 %781\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %783 = add nuw nsw i32 %720, 9\l  %784 = zext i32 %783 to i64\l  %785 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %784\l  %786 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %783\l  %787 = load i32, i32 addrspace(3)* %786, align 4, !tbaa !7\l  %788 = zext i32 %787 to i64\l  %789 = atomicrmw add i64 addrspace(1)* %785, i64 %788\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %790 = add nuw nsw i32 %720, 10\l  %791 = zext i32 %790 to i64\l  %792 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %791\l  %793 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %790\l  %794 = load i32, i32 addrspace(3)* %793, align 8, !tbaa !7\l  %795 = zext i32 %794 to i64\l  %796 = atomicrmw add i64 addrspace(1)* %792, i64 %795\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %797 = add nuw nsw i32 %720, 11\l  %798 = zext i32 %797 to i64\l  %799 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %798\l  %800 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %797\l  %801 = load i32, i32 addrspace(3)* %800, align 4, !tbaa !7\l  %802 = zext i32 %801 to i64\l  %803 = atomicrmw add i64 addrspace(1)* %799, i64 %802\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %804 = add nuw nsw i32 %720, 12\l  %805 = zext i32 %804 to i64\l  %806 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %805\l  %807 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %804\l  %808 = load i32, i32 addrspace(3)* %807, align 16, !tbaa !7\l  %809 = zext i32 %808 to i64\l  %810 = atomicrmw add i64 addrspace(1)* %806, i64 %809\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %811 = add nuw nsw i32 %720, 13\l  %812 = zext i32 %811 to i64\l  %813 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %812\l  %814 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %811\l  %815 = load i32, i32 addrspace(3)* %814, align 4, !tbaa !7\l  %816 = zext i32 %815 to i64\l  %817 = atomicrmw add i64 addrspace(1)* %813, i64 %816\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %818 = add nuw nsw i32 %720, 14\l  %819 = zext i32 %818 to i64\l  %820 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %819\l  %821 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %818\l  %822 = load i32, i32 addrspace(3)* %821, align 8, !tbaa !7\l  %823 = zext i32 %822 to i64\l  %824 = atomicrmw add i64 addrspace(1)* %820, i64 %823\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %825 = add nuw nsw i32 %720, 15\l  %826 = zext i32 %825 to i64\l  %827 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %826\l  %828 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %825\l  %829 = load i32, i32 addrspace(3)* %828, align 4, !tbaa !7\l  %830 = zext i32 %829 to i64\l  %831 = atomicrmw add i64 addrspace(1)* %827, i64 %830\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %832 = add nuw nsw i32 %720, 16\l  %833 = zext i32 %832 to i64\l  %834 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %833\l  %835 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %832\l  %836 = load i32, i32 addrspace(3)* %835, align 16, !tbaa !7\l  %837 = zext i32 %836 to i64\l  %838 = atomicrmw add i64 addrspace(1)* %834, i64 %837\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %839 = add nuw nsw i32 %720, 17\l  %840 = zext i32 %839 to i64\l  %841 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %840\l  %842 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %839\l  %843 = load i32, i32 addrspace(3)* %842, align 4, !tbaa !7\l  %844 = zext i32 %843 to i64\l  %845 = atomicrmw add i64 addrspace(1)* %841, i64 %844\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %846 = add nuw nsw i32 %720, 18\l  %847 = zext i32 %846 to i64\l  %848 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %847\l  %849 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %846\l  %850 = load i32, i32 addrspace(3)* %849, align 8, !tbaa !7\l  %851 = zext i32 %850 to i64\l  %852 = atomicrmw add i64 addrspace(1)* %848, i64 %851\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %853 = add nuw nsw i32 %720, 19\l  %854 = zext i32 %853 to i64\l  %855 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %854\l  %856 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %853\l  %857 = load i32, i32 addrspace(3)* %856, align 4, !tbaa !7\l  %858 = zext i32 %857 to i64\l  %859 = atomicrmw add i64 addrspace(1)* %855, i64 %858\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %860 = add nuw nsw i32 %720, 20\l  %861 = zext i32 %860 to i64\l  %862 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %861\l  %863 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %860\l  %864 = load i32, i32 addrspace(3)* %863, align 16, !tbaa !7\l  %865 = zext i32 %864 to i64\l  %866 = atomicrmw add i64 addrspace(1)* %862, i64 %865\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %867 = add nuw nsw i32 %720, 21\l  %868 = zext i32 %867 to i64\l  %869 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %868\l  %870 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %867\l  %871 = load i32, i32 addrspace(3)* %870, align 4, !tbaa !7\l  %872 = zext i32 %871 to i64\l  %873 = atomicrmw add i64 addrspace(1)* %869, i64 %872\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %874 = add nuw nsw i32 %720, 22\l  %875 = zext i32 %874 to i64\l  %876 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %875\l  %877 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %874\l  %878 = load i32, i32 addrspace(3)* %877, align 8, !tbaa !7\l  %879 = zext i32 %878 to i64\l  %880 = atomicrmw add i64 addrspace(1)* %876, i64 %879\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %881 = add nuw nsw i32 %720, 23\l  %882 = zext i32 %881 to i64\l  %883 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %882\l  %884 = getelementptr inbounds [720 x i32], [720 x i32] addrspace(3)*\l... @_ZZ15DD_or_RR_kerneliiPfPyE5sHist, i32 0, i32 %881\l  %885 = load i32, i32 addrspace(3)* %884, align 4, !tbaa !7\l  %886 = zext i32 %885 to i64\l  %887 = atomicrmw add i64 addrspace(1)* %883, i64 %886\l... syncscope(\"agent-one-as\") monotonic, align 8\l  %888 = add nuw nsw i32 %720, 24\l  %889 = icmp eq i32 %888, 720\l  br i1 %889, label %890, label %719, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4dc9f10:s0 -> Node0x4dc0440;
	Node0x4dc9f10:s1 -> Node0x4dc9f10;
	Node0x4dc0440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%890:\l890:                                              \l  ret void\l}"];
}
