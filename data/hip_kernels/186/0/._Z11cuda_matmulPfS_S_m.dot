digraph "CFG for '_Z11cuda_matmulPfS_S_m' function" {
	label="CFG for '_Z11cuda_matmulPfS_S_m' function";

	Node0x4875630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %6, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = trunc i64 %3 to i32\l  %15 = mul i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp eq i64 %3, 0\l  br i1 %24, label %27, label %25\l|{<s0>T|<s1>F}}"];
	Node0x4875630:s0 -> Node0x48790b0;
	Node0x4875630:s1 -> Node0x4879140;
	Node0x4879140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%25:\l25:                                               \l  %26 = sext i32 %23 to i64\l  br label %32\l}"];
	Node0x4879140 -> Node0x48792f0;
	Node0x48790b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%27:\l27:                                               \l  %28 = phi float [ 0.000000e+00, %4 ], [ %45, %32 ]\l  %29 = add nsw i32 %15, %23\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  store float %28, float addrspace(1)* %31, align 4, !tbaa !7\l  ret void\l}"];
	Node0x48792f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%32:\l32:                                               \l  %33 = phi i64 [ 0, %25 ], [ %47, %32 ]\l  %34 = phi float [ 0.000000e+00, %25 ], [ %45, %32 ]\l  %35 = trunc i64 %33 to i32\l  %36 = add nsw i32 %15, %35\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = mul i64 %33, %3\l  %41 = add i64 %40, %26\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = fmul contract float %39, %43\l  %45 = fadd contract float %34, %44\l  %46 = add nuw nsw i64 %33, 1\l  %47 = and i64 %46, 4294967295\l  %48 = icmp ult i64 %47, %3\l  br i1 %48, label %32, label %27, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x48792f0:s0 -> Node0x48792f0;
	Node0x48792f0:s1 -> Node0x48790b0;
}
