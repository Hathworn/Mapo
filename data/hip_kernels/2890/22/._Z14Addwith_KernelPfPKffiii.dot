digraph "CFG for '_Z14Addwith_KernelPfPKffiii' function" {
	label="CFG for '_Z14Addwith_KernelPfPKffiii' function";

	Node0x4e10820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = add i32 %14, %7\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !5, !invariant.load !6\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = add i32 %22, %16\l  %24 = icmp slt i32 %15, %3\l  %25 = icmp slt i32 %23, %4\l  %26 = select i1 %24, i1 %25, i1 false\l  %27 = icmp sgt i32 %5, 0\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %131\l|{<s0>T|<s1>F}}"];
	Node0x4e10820:s0 -> Node0x4e143e0;
	Node0x4e10820:s1 -> Node0x4e14470;
	Node0x4e143e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %23, %3\l  %31 = add nsw i32 %30, %15\l  %32 = mul nsw i32 %31, %5\l  %33 = and i32 %5, 7\l  %34 = icmp ult i32 %5, 8\l  br i1 %34, label %114, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4e143e0:s0 -> Node0x4e14a00;
	Node0x4e143e0:s1 -> Node0x4e14a50;
	Node0x4e14a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%35:\l35:                                               \l  %36 = and i32 %5, -8\l  br label %37\l}"];
	Node0x4e14a50 -> Node0x4e14c50;
	Node0x4e14c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%37:\l37:                                               \l  %38 = phi i32 [ 0, %35 ], [ %111, %37 ]\l  %39 = phi i32 [ 0, %35 ], [ %112, %37 ]\l  %40 = add nsw i32 %38, %32\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7\l  %44 = fmul contract float %43, %2\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7\l  %47 = fadd contract float %46, %44\l  store float %47, float addrspace(1)* %45, align 4, !tbaa !7\l  %48 = or i32 %38, 1\l  %49 = add nsw i32 %48, %32\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7\l  %53 = fmul contract float %52, %2\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7\l  %56 = fadd contract float %55, %53\l  store float %56, float addrspace(1)* %54, align 4, !tbaa !7\l  %57 = or i32 %38, 2\l  %58 = add nsw i32 %57, %32\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %1, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7\l  %62 = fmul contract float %61, %2\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7\l  %65 = fadd contract float %64, %62\l  store float %65, float addrspace(1)* %63, align 4, !tbaa !7\l  %66 = or i32 %38, 3\l  %67 = add nsw i32 %66, %32\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7\l  %71 = fmul contract float %70, %2\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7\l  %74 = fadd contract float %73, %71\l  store float %74, float addrspace(1)* %72, align 4, !tbaa !7\l  %75 = or i32 %38, 4\l  %76 = add nsw i32 %75, %32\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7\l  %80 = fmul contract float %79, %2\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7\l  %83 = fadd contract float %82, %80\l  store float %83, float addrspace(1)* %81, align 4, !tbaa !7\l  %84 = or i32 %38, 5\l  %85 = add nsw i32 %84, %32\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = fmul contract float %88, %2\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7\l  %92 = fadd contract float %91, %89\l  store float %92, float addrspace(1)* %90, align 4, !tbaa !7\l  %93 = or i32 %38, 6\l  %94 = add nsw i32 %93, %32\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7\l  %98 = fmul contract float %97, %2\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7\l  %101 = fadd contract float %100, %98\l  store float %101, float addrspace(1)* %99, align 4, !tbaa !7\l  %102 = or i32 %38, 7\l  %103 = add nsw i32 %102, %32\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7\l  %107 = fmul contract float %106, %2\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7\l  %110 = fadd contract float %109, %107\l  store float %110, float addrspace(1)* %108, align 4, !tbaa !7\l  %111 = add nuw nsw i32 %38, 8\l  %112 = add i32 %39, 8\l  %113 = icmp eq i32 %112, %36\l  br i1 %113, label %114, label %37, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4e14c50:s0 -> Node0x4e14a00;
	Node0x4e14c50:s1 -> Node0x4e14c50;
	Node0x4e14a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%114:\l114:                                              \l  %115 = phi i32 [ 0, %29 ], [ %111, %37 ]\l  %116 = icmp eq i32 %33, 0\l  br i1 %116, label %131, label %117\l|{<s0>T|<s1>F}}"];
	Node0x4e14a00:s0 -> Node0x4e14470;
	Node0x4e14a00:s1 -> Node0x4e18880;
	Node0x4e18880 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%117:\l117:                                              \l  %118 = phi i32 [ %128, %117 ], [ %115, %114 ]\l  %119 = phi i32 [ %129, %117 ], [ 0, %114 ]\l  %120 = add nsw i32 %118, %32\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7\l  %124 = fmul contract float %123, %2\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7\l  %127 = fadd contract float %126, %124\l  store float %127, float addrspace(1)* %125, align 4, !tbaa !7\l  %128 = add nuw nsw i32 %118, 1\l  %129 = add i32 %119, 1\l  %130 = icmp eq i32 %129, %33\l  br i1 %130, label %131, label %117, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4e18880:s0 -> Node0x4e14470;
	Node0x4e18880:s1 -> Node0x4e18880;
	Node0x4e14470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%131:\l131:                                              \l  ret void\l}"];
}
