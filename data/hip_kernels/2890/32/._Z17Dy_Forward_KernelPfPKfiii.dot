digraph "CFG for '_Z17Dy_Forward_KernelPfPKfiii' function" {
	label="CFG for '_Z17Dy_Forward_KernelPfPKfiii' function";

	Node0x4f39930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp slt i32 %14, %2\l  %24 = icmp slt i32 %22, %3\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %209\l|{<s0>T|<s1>F}}"];
	Node0x4f39930:s0 -> Node0x4f3d390;
	Node0x4f39930:s1 -> Node0x4f3d420;
	Node0x4f3d390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %22, %2\l  %28 = add nsw i32 %27, %14\l  %29 = add nsw i32 %3, -1\l  %30 = icmp eq i32 %22, %29\l  %31 = icmp sgt i32 %4, 0\l  br i1 %30, label %41, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4f3d390:s0 -> Node0x4f3d890;
	Node0x4f3d390:s1 -> Node0x4f3d8e0;
	Node0x4f3d8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  br i1 %31, label %33, label %209\l|{<s0>T|<s1>F}}"];
	Node0x4f3d8e0:s0 -> Node0x4f3c140;
	Node0x4f3d8e0:s1 -> Node0x4f3d420;
	Node0x4f3c140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = add nsw i32 %28, %2\l  %35 = mul nsw i32 %34, %4\l  %36 = mul nsw i32 %28, %4\l  %37 = and i32 %4, 7\l  %38 = icmp ult i32 %4, 8\l  br i1 %38, label %190, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4f3c140:s0 -> Node0x4f3df60;
	Node0x4f3c140:s1 -> Node0x4f3dfb0;
	Node0x4f3dfb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%39:\l39:                                               \l  %40 = and i32 %4, -8\l  br label %85\l}"];
	Node0x4f3dfb0 -> Node0x4f3e1b0;
	Node0x4f3d890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%41:\l41:                                               \l  br i1 %31, label %42, label %209\l|{<s0>T|<s1>F}}"];
	Node0x4f3d890:s0 -> Node0x4f3e270;
	Node0x4f3d890:s1 -> Node0x4f3d420;
	Node0x4f3e270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%42:\l42:                                               \l  %43 = mul nsw i32 %28, %4\l  %44 = and i32 %4, 7\l  %45 = icmp ult i32 %4, 8\l  br i1 %45, label %178, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4f3e270:s0 -> Node0x4f3e520;
	Node0x4f3e270:s1 -> Node0x4f3e570;
	Node0x4f3e570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%46:\l46:                                               \l  %47 = and i32 %4, -8\l  br label %48\l}"];
	Node0x4f3e570 -> Node0x4f3e740;
	Node0x4f3e740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %46 ], [ %82, %48 ]\l  %50 = phi i32 [ 0, %46 ], [ %83, %48 ]\l  %51 = add nsw i32 %49, %43\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  store float 0.000000e+00, float addrspace(1)* %53, align 4, !tbaa !7\l  %54 = or i32 %49, 1\l  %55 = add nsw i32 %54, %43\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  store float 0.000000e+00, float addrspace(1)* %57, align 4, !tbaa !7\l  %58 = or i32 %49, 2\l  %59 = add nsw i32 %58, %43\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  store float 0.000000e+00, float addrspace(1)* %61, align 4, !tbaa !7\l  %62 = or i32 %49, 3\l  %63 = add nsw i32 %62, %43\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  store float 0.000000e+00, float addrspace(1)* %65, align 4, !tbaa !7\l  %66 = or i32 %49, 4\l  %67 = add nsw i32 %66, %43\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  store float 0.000000e+00, float addrspace(1)* %69, align 4, !tbaa !7\l  %70 = or i32 %49, 5\l  %71 = add nsw i32 %70, %43\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  store float 0.000000e+00, float addrspace(1)* %73, align 4, !tbaa !7\l  %74 = or i32 %49, 6\l  %75 = add nsw i32 %74, %43\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  store float 0.000000e+00, float addrspace(1)* %77, align 4, !tbaa !7\l  %78 = or i32 %49, 7\l  %79 = add nsw i32 %78, %43\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  store float 0.000000e+00, float addrspace(1)* %81, align 4, !tbaa !7\l  %82 = add nuw nsw i32 %49, 8\l  %83 = add i32 %50, 8\l  %84 = icmp eq i32 %83, %47\l  br i1 %84, label %178, label %48, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4f3e740:s0 -> Node0x4f3e520;
	Node0x4f3e740:s1 -> Node0x4f3e740;
	Node0x4f3e1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%85:\l85:                                               \l  %86 = phi i32 [ 0, %39 ], [ %175, %85 ]\l  %87 = phi i32 [ 0, %39 ], [ %176, %85 ]\l  %88 = add nsw i32 %86, %35\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7\l  %92 = add nsw i32 %86, %36\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = fsub contract float %91, %95\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  store float %96, float addrspace(1)* %97, align 4, !tbaa !7\l  %98 = or i32 %86, 1\l  %99 = add nsw i32 %98, %35\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = add nsw i32 %98, %36\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7\l  %107 = fsub contract float %102, %106\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  store float %107, float addrspace(1)* %108, align 4, !tbaa !7\l  %109 = or i32 %86, 2\l  %110 = add nsw i32 %109, %35\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7\l  %114 = add nsw i32 %109, %36\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7\l  %118 = fsub contract float %113, %117\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  store float %118, float addrspace(1)* %119, align 4, !tbaa !7\l  %120 = or i32 %86, 3\l  %121 = add nsw i32 %120, %35\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7\l  %125 = add nsw i32 %120, %36\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7\l  %129 = fsub contract float %124, %128\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  store float %129, float addrspace(1)* %130, align 4, !tbaa !7\l  %131 = or i32 %86, 4\l  %132 = add nsw i32 %131, %35\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %1, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7\l  %136 = add nsw i32 %131, %36\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7\l  %140 = fsub contract float %135, %139\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  store float %140, float addrspace(1)* %141, align 4, !tbaa !7\l  %142 = or i32 %86, 5\l  %143 = add nsw i32 %142, %35\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7\l  %147 = add nsw i32 %142, %36\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7\l  %151 = fsub contract float %146, %150\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  store float %151, float addrspace(1)* %152, align 4, !tbaa !7\l  %153 = or i32 %86, 6\l  %154 = add nsw i32 %153, %35\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %1, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !7\l  %158 = add nsw i32 %153, %36\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7\l  %162 = fsub contract float %157, %161\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %159\l  store float %162, float addrspace(1)* %163, align 4, !tbaa !7\l  %164 = or i32 %86, 7\l  %165 = add nsw i32 %164, %35\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %1, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !7\l  %169 = add nsw i32 %164, %36\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %1, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !7\l  %173 = fsub contract float %168, %172\l  %174 = getelementptr inbounds float, float addrspace(1)* %0, i64 %170\l  store float %173, float addrspace(1)* %174, align 4, !tbaa !7\l  %175 = add nuw nsw i32 %86, 8\l  %176 = add i32 %87, 8\l  %177 = icmp eq i32 %176, %40\l  br i1 %177, label %190, label %85, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f3e1b0:s0 -> Node0x4f3df60;
	Node0x4f3e1b0:s1 -> Node0x4f3e1b0;
	Node0x4f3e520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%178:\l178:                                              \l  %179 = phi i32 [ 0, %42 ], [ %82, %48 ]\l  %180 = icmp eq i32 %44, 0\l  br i1 %180, label %209, label %181\l|{<s0>T|<s1>F}}"];
	Node0x4f3e520:s0 -> Node0x4f3d420;
	Node0x4f3e520:s1 -> Node0x4f454b0;
	Node0x4f454b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%181:\l181:                                              \l  %182 = phi i32 [ %187, %181 ], [ %179, %178 ]\l  %183 = phi i32 [ %188, %181 ], [ 0, %178 ]\l  %184 = add nsw i32 %182, %43\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds float, float addrspace(1)* %0, i64 %185\l  store float 0.000000e+00, float addrspace(1)* %186, align 4, !tbaa !7\l  %187 = add nuw nsw i32 %182, 1\l  %188 = add i32 %183, 1\l  %189 = icmp eq i32 %188, %44\l  br i1 %189, label %209, label %181, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4f454b0:s0 -> Node0x4f3d420;
	Node0x4f454b0:s1 -> Node0x4f454b0;
	Node0x4f3df60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%190:\l190:                                              \l  %191 = phi i32 [ 0, %33 ], [ %175, %85 ]\l  %192 = icmp eq i32 %37, 0\l  br i1 %192, label %209, label %193\l|{<s0>T|<s1>F}}"];
	Node0x4f3df60:s0 -> Node0x4f3d420;
	Node0x4f3df60:s1 -> Node0x4f45de0;
	Node0x4f45de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%193:\l193:                                              \l  %194 = phi i32 [ %206, %193 ], [ %191, %190 ]\l  %195 = phi i32 [ %207, %193 ], [ 0, %190 ]\l  %196 = add nsw i32 %194, %35\l  %197 = sext i32 %196 to i64\l  %198 = getelementptr inbounds float, float addrspace(1)* %1, i64 %197\l  %199 = load float, float addrspace(1)* %198, align 4, !tbaa !7\l  %200 = add nsw i32 %194, %36\l  %201 = sext i32 %200 to i64\l  %202 = getelementptr inbounds float, float addrspace(1)* %1, i64 %201\l  %203 = load float, float addrspace(1)* %202, align 4, !tbaa !7\l  %204 = fsub contract float %199, %203\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %201\l  store float %204, float addrspace(1)* %205, align 4, !tbaa !7\l  %206 = add nuw nsw i32 %194, 1\l  %207 = add i32 %195, 1\l  %208 = icmp eq i32 %207, %37\l  br i1 %208, label %209, label %193, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4f45de0:s0 -> Node0x4f3d420;
	Node0x4f45de0:s1 -> Node0x4f45de0;
	Node0x4f3d420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%209:\l209:                                              \l  ret void\l}"];
}
