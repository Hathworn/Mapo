digraph "CFG for '_Z20TransposeKernelFast2PKhPhii' function" {
	label="CFG for '_Z20TransposeKernelFast2PKhPhii' function";

	Node0x5c7e7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = shl i32 %7, 5\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = shl i32 %9, 5\l  %11 = add nsw i32 %8, %5\l  %12 = icmp slt i32 %11, %2\l  br i1 %12, label %13, label %112\l|{<s0>T|<s1>F}}"];
	Node0x5c7e7d0:s0 -> Node0x5c80a20;
	Node0x5c7e7d0:s1 -> Node0x5c80ab0;
	Node0x5c80a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%13:\l13:                                               \l  %14 = add nsw i32 %10, 32\l  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 %3)\l  %16 = add nsw i32 %10, %6\l  %17 = icmp slt i32 %16, %15\l  br i1 %17, label %18, label %112\l|{<s0>T|<s1>F}}"];
	Node0x5c80a20:s0 -> Node0x5c81050;
	Node0x5c80a20:s1 -> Node0x5c80ab0;
	Node0x5c81050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%18:\l18:                                               \l  %19 = add i32 %6, %10\l  %20 = add i32 %19, 8\l  %21 = tail call i32 @llvm.smax.i32(i32 %15, i32 %20)\l  %22 = xor i32 %6, -1\l  %23 = add i32 %21, %22\l  %24 = sub i32 %23, %10\l  %25 = lshr i32 %24, 3\l  %26 = add nuw nsw i32 %25, 1\l  %27 = icmp ult i32 %24, 216\l  br i1 %27, label %97, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5c81050:s0 -> Node0x5c81900;
	Node0x5c81050:s1 -> Node0x5c81990;
	Node0x5c81990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%28:\l28:                                               \l  %29 = add i32 %6, %10\l  %30 = add i32 %29, 8\l  %31 = tail call i32 @llvm.smax.i32(i32 %15, i32 %30)\l  %32 = xor i32 %6, -1\l  %33 = add i32 %31, %32\l  %34 = sub i32 %33, %10\l  %35 = lshr i32 %34, 3\l  %36 = shl i32 %2, 3\l  %37 = mul i32 %2, -8\l  %38 = mul i32 %16, %2\l  %39 = add i32 %5, %38\l  %40 = add i32 %39, %8\l  %41 = icmp slt i32 %36, 0\l  %42 = select i1 %41, i32 %37, i32 %36\l  %43 = tail call \{ i32, i1 \} @llvm.umul.with.overflow.i32(i32 %42, i32 %35)\l  %44 = extractvalue \{ i32, i1 \} %43, 0\l  %45 = extractvalue \{ i32, i1 \} %43, 1\l  %46 = add i32 %40, %44\l  %47 = sub i32 %40, %44\l  %48 = icmp slt i32 %46, %40\l  %49 = icmp sgt i32 %47, %40\l  %50 = select i1 %41, i1 %49, i1 %48\l  %51 = or i1 %50, %45\l  br i1 %51, label %97, label %52\l|{<s0>T|<s1>F}}"];
	Node0x5c81990:s0 -> Node0x5c81900;
	Node0x5c81990:s1 -> Node0x5c82d80;
	Node0x5c82d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%52:\l52:                                               \l  %53 = and i32 %26, -4\l  %54 = shl i32 %53, 3\l  %55 = add i32 %6, %54\l  %56 = shl i32 %53, 3\l  %57 = add i32 %16, %56\l  %58 = insertelement \<4 x i32\> poison, i32 %16, i64 0\l  %59 = shufflevector \<4 x i32\> %58, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %60 = add \<4 x i32\> %59, \<i32 0, i32 8, i32 16, i32 24\>\l  %61 = insertelement \<4 x i32\> poison, i32 %2, i64 0\l  %62 = shufflevector \<4 x i32\> %61, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %63 = insertelement \<4 x i32\> poison, i32 %11, i64 0\l  %64 = shufflevector \<4 x i32\> %63, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  br label %65\l}"];
	Node0x5c82d80 -> Node0x5c81df0;
	Node0x5c81df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%65:\l65:                                               \l  %66 = phi i32 [ 0, %52 ], [ %92, %65 ]\l  %67 = phi \<4 x i32\> [ %60, %52 ], [ %93, %65 ]\l  %68 = shl i32 %66, 3\l  %69 = add i32 %6, %68\l  %70 = add i32 %69, 8\l  %71 = add i32 %69, 16\l  %72 = add i32 %69, 24\l  %73 = mul nsw \<4 x i32\> %67, %62\l  %74 = add nsw \<4 x i32\> %73, %64\l  %75 = sext \<4 x i32\> %74 to \<4 x i64\>\l  %76 = extractelement \<4 x i64\> %75, i64 0\l  %77 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %76\l  %78 = extractelement \<4 x i64\> %75, i64 1\l  %79 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %78\l  %80 = extractelement \<4 x i64\> %75, i64 2\l  %81 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %80\l  %82 = extractelement \<4 x i64\> %75, i64 3\l  %83 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %82\l  %84 = load i8, i8 addrspace(1)* %77, align 1, !tbaa !5, !amdgpu.noclobber !8\l  %85 = load i8, i8 addrspace(1)* %79, align 1, !tbaa !5, !amdgpu.noclobber !8\l  %86 = load i8, i8 addrspace(1)* %81, align 1, !tbaa !5, !amdgpu.noclobber !8\l  %87 = load i8, i8 addrspace(1)* %83, align 1, !tbaa !5, !amdgpu.noclobber !8\l  %88 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %69, i32 %5\l  %89 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %70, i32 %5\l  %90 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %71, i32 %5\l  %91 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %72, i32 %5\l  store i8 %84, i8 addrspace(3)* %88, align 1, !tbaa !5\l  store i8 %85, i8 addrspace(3)* %89, align 1, !tbaa !5\l  store i8 %86, i8 addrspace(3)* %90, align 1, !tbaa !5\l  store i8 %87, i8 addrspace(3)* %91, align 1, !tbaa !5\l  %92 = add nuw i32 %66, 4\l  %93 = add \<4 x i32\> %67, \<i32 32, i32 32, i32 32, i32 32\>\l  %94 = icmp eq i32 %92, %53\l  br i1 %94, label %95, label %65, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x5c81df0:s0 -> Node0x5c86750;
	Node0x5c81df0:s1 -> Node0x5c81df0;
	Node0x5c86750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%95:\l95:                                               \l  %96 = icmp eq i32 %26, %53\l  br i1 %96, label %112, label %97\l|{<s0>T|<s1>F}}"];
	Node0x5c86750:s0 -> Node0x5c80ab0;
	Node0x5c86750:s1 -> Node0x5c81900;
	Node0x5c81900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%97:\l97:                                               \l  %98 = phi i32 [ %6, %28 ], [ %6, %18 ], [ %55, %95 ]\l  %99 = phi i32 [ %16, %28 ], [ %16, %18 ], [ %57, %95 ]\l  br label %100\l}"];
	Node0x5c81900 -> Node0x5c873a0;
	Node0x5c873a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%100:\l100:                                              \l  %101 = phi i32 [ %109, %100 ], [ %98, %97 ]\l  %102 = phi i32 [ %110, %100 ], [ %99, %97 ]\l  %103 = mul nsw i32 %102, %2\l  %104 = add nsw i32 %103, %11\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %105\l  %107 = load i8, i8 addrspace(1)* %106, align 1, !tbaa !5, !amdgpu.noclobber\l... !8\l  %108 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %101, i32 %5\l  store i8 %107, i8 addrspace(3)* %108, align 1, !tbaa !5\l  %109 = add nuw nsw i32 %101, 8\l  %110 = add nsw i32 %102, 8\l  %111 = icmp slt i32 %110, %15\l  br i1 %111, label %100, label %112, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5c873a0:s0 -> Node0x5c873a0;
	Node0x5c873a0:s1 -> Node0x5c80ab0;
	Node0x5c80ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%112:\l112:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %113 = add nsw i32 %10, %5\l  %114 = icmp slt i32 %113, %3\l  br i1 %114, label %115, label %214\l|{<s0>T|<s1>F}}"];
	Node0x5c80ab0:s0 -> Node0x5c880e0;
	Node0x5c80ab0:s1 -> Node0x5c88170;
	Node0x5c880e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%115:\l115:                                              \l  %116 = add nsw i32 %8, 32\l  %117 = tail call i32 @llvm.smin.i32(i32 %116, i32 %2)\l  %118 = add nsw i32 %8, %6\l  %119 = icmp slt i32 %118, %117\l  br i1 %119, label %120, label %214\l|{<s0>T|<s1>F}}"];
	Node0x5c880e0:s0 -> Node0x5c885b0;
	Node0x5c880e0:s1 -> Node0x5c88170;
	Node0x5c885b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%120:\l120:                                              \l  %121 = add i32 %6, %8\l  %122 = add i32 %121, 8\l  %123 = tail call i32 @llvm.smax.i32(i32 %117, i32 %122)\l  %124 = xor i32 %6, -1\l  %125 = add i32 %123, %124\l  %126 = sub i32 %125, %8\l  %127 = lshr i32 %126, 3\l  %128 = add nuw nsw i32 %127, 1\l  %129 = icmp ult i32 %126, 216\l  br i1 %129, label %199, label %130\l|{<s0>T|<s1>F}}"];
	Node0x5c885b0:s0 -> Node0x5c846e0;
	Node0x5c885b0:s1 -> Node0x5c84730;
	Node0x5c84730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%130:\l130:                                              \l  %131 = add i32 %6, %8\l  %132 = add i32 %131, 8\l  %133 = tail call i32 @llvm.smax.i32(i32 %117, i32 %132)\l  %134 = xor i32 %6, -1\l  %135 = add i32 %133, %134\l  %136 = sub i32 %135, %8\l  %137 = lshr i32 %136, 3\l  %138 = shl i32 %3, 3\l  %139 = mul i32 %3, -8\l  %140 = mul i32 %118, %3\l  %141 = add i32 %5, %140\l  %142 = add i32 %141, %10\l  %143 = icmp slt i32 %138, 0\l  %144 = select i1 %143, i32 %139, i32 %138\l  %145 = tail call \{ i32, i1 \} @llvm.umul.with.overflow.i32(i32 %144, i32 %137)\l  %146 = extractvalue \{ i32, i1 \} %145, 0\l  %147 = extractvalue \{ i32, i1 \} %145, 1\l  %148 = add i32 %142, %146\l  %149 = sub i32 %142, %146\l  %150 = icmp slt i32 %148, %142\l  %151 = icmp sgt i32 %149, %142\l  %152 = select i1 %143, i1 %151, i1 %150\l  %153 = or i1 %152, %147\l  br i1 %153, label %199, label %154\l|{<s0>T|<s1>F}}"];
	Node0x5c84730:s0 -> Node0x5c846e0;
	Node0x5c84730:s1 -> Node0x5c8a0a0;
	Node0x5c8a0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%154:\l154:                                              \l  %155 = and i32 %128, -4\l  %156 = shl i32 %155, 3\l  %157 = add i32 %118, %156\l  %158 = shl i32 %155, 3\l  %159 = add i32 %6, %158\l  %160 = insertelement \<4 x i32\> poison, i32 %118, i64 0\l  %161 = shufflevector \<4 x i32\> %160, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %162 = add \<4 x i32\> %161, \<i32 0, i32 8, i32 16, i32 24\>\l  %163 = insertelement \<4 x i32\> poison, i32 %3, i64 0\l  %164 = shufflevector \<4 x i32\> %163, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %165 = insertelement \<4 x i32\> poison, i32 %113, i64 0\l  %166 = shufflevector \<4 x i32\> %165, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  br label %167\l}"];
	Node0x5c8a0a0 -> Node0x5c8a920;
	Node0x5c8a920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%167:\l167:                                              \l  %168 = phi i32 [ 0, %154 ], [ %194, %167 ]\l  %169 = phi \<4 x i32\> [ %162, %154 ], [ %195, %167 ]\l  %170 = shl i32 %168, 3\l  %171 = add i32 %6, %170\l  %172 = add i32 %171, 8\l  %173 = add i32 %171, 16\l  %174 = add i32 %171, 24\l  %175 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %5, i32 %171\l  %176 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %5, i32 %172\l  %177 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %5, i32 %173\l  %178 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %5, i32 %174\l  %179 = load i8, i8 addrspace(3)* %175, align 1, !tbaa !5\l  %180 = load i8, i8 addrspace(3)* %176, align 1, !tbaa !5\l  %181 = load i8, i8 addrspace(3)* %177, align 1, !tbaa !5\l  %182 = load i8, i8 addrspace(3)* %178, align 1, !tbaa !5\l  %183 = mul nsw \<4 x i32\> %169, %164\l  %184 = add nsw \<4 x i32\> %183, %166\l  %185 = sext \<4 x i32\> %184 to \<4 x i64\>\l  %186 = extractelement \<4 x i64\> %185, i64 0\l  %187 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %186\l  %188 = extractelement \<4 x i64\> %185, i64 1\l  %189 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %188\l  %190 = extractelement \<4 x i64\> %185, i64 2\l  %191 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %190\l  %192 = extractelement \<4 x i64\> %185, i64 3\l  %193 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %192\l  store i8 %179, i8 addrspace(1)* %187, align 1, !tbaa !5\l  store i8 %180, i8 addrspace(1)* %189, align 1, !tbaa !5\l  store i8 %181, i8 addrspace(1)* %191, align 1, !tbaa !5\l  store i8 %182, i8 addrspace(1)* %193, align 1, !tbaa !5\l  %194 = add nuw i32 %168, 4\l  %195 = add \<4 x i32\> %169, \<i32 32, i32 32, i32 32, i32 32\>\l  %196 = icmp eq i32 %194, %155\l  br i1 %196, label %197, label %167, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5c8a920:s0 -> Node0x5c89aa0;
	Node0x5c8a920:s1 -> Node0x5c8a920;
	Node0x5c89aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%197:\l197:                                              \l  %198 = icmp eq i32 %128, %155\l  br i1 %198, label %214, label %199\l|{<s0>T|<s1>F}}"];
	Node0x5c89aa0:s0 -> Node0x5c88170;
	Node0x5c89aa0:s1 -> Node0x5c846e0;
	Node0x5c846e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%199:\l199:                                              \l  %200 = phi i32 [ %118, %130 ], [ %118, %120 ], [ %157, %197 ]\l  %201 = phi i32 [ %6, %130 ], [ %6, %120 ], [ %159, %197 ]\l  br label %202\l}"];
	Node0x5c846e0 -> Node0x5c8c2c0;
	Node0x5c8c2c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%202:\l202:                                              \l  %203 = phi i32 [ %212, %202 ], [ %200, %199 ]\l  %204 = phi i32 [ %211, %202 ], [ %201, %199 ]\l  %205 = getelementptr inbounds [32 x [36 x i8]], [32 x [36 x i8]]\l... addrspace(3)* @_ZZ20TransposeKernelFast2PKhPhiiE4sbuf, i32 0, i32 %5, i32 %204\l  %206 = load i8, i8 addrspace(3)* %205, align 1, !tbaa !5\l  %207 = mul nsw i32 %203, %3\l  %208 = add nsw i32 %207, %113\l  %209 = sext i32 %208 to i64\l  %210 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %209\l  store i8 %206, i8 addrspace(1)* %210, align 1, !tbaa !5\l  %211 = add nuw nsw i32 %204, 8\l  %212 = add nsw i32 %203, 8\l  %213 = icmp slt i32 %212, %117\l  br i1 %213, label %202, label %214, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5c8c2c0:s0 -> Node0x5c8c2c0;
	Node0x5c8c2c0:s1 -> Node0x5c88170;
	Node0x5c88170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%214:\l214:                                              \l  ret void\l}"];
}
