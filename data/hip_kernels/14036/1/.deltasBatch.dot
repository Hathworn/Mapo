digraph "CFG for 'deltasBatch' function" {
	label="CFG for 'deltasBatch' function";

	Node0x4ee0470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = add i32 %5, 1\l  %17 = mul nsw i32 %15, %16\l  %18 = mul i32 %15, %4\l  %19 = mul i32 %18, %5\l  %20 = icmp slt i32 %5, 0\l  br i1 %20, label %38, label %21\l|{<s0>T|<s1>F}}"];
	Node0x4ee0470:s0 -> Node0x4ee2670;
	Node0x4ee0470:s1 -> Node0x4ee2700;
	Node0x4ee2700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%21:\l21:                                               \l  %22 = and i32 %16, 7\l  %23 = icmp ult i32 %5, 7\l  br i1 %23, label %26, label %24\l|{<s0>T|<s1>F}}"];
	Node0x4ee2700:s0 -> Node0x4ee2990;
	Node0x4ee2700:s1 -> Node0x4ee29e0;
	Node0x4ee29e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%24:\l24:                                               \l  %25 = and i32 %16, -8\l  br label %55\l}"];
	Node0x4ee29e0 -> Node0x4ee2be0;
	Node0x4ee2990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%26:\l26:                                               \l  %27 = phi i32 [ 0, %21 ], [ %89, %55 ]\l  %28 = icmp eq i32 %22, 0\l  br i1 %28, label %38, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4ee2990:s0 -> Node0x4ee2670;
	Node0x4ee2990:s1 -> Node0x4ee2e10;
	Node0x4ee2e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%29:\l29:                                               \l  %30 = phi i32 [ %35, %29 ], [ %27, %26 ]\l  %31 = phi i32 [ %36, %29 ], [ 0, %26 ]\l  %32 = add nsw i32 %30, %17\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %3, i64 %33\l  store float 0.000000e+00, float addrspace(1)* %34, align 4, !tbaa !7\l  %35 = add nuw i32 %30, 1\l  %36 = add i32 %31, 1\l  %37 = icmp eq i32 %36, %22\l  br i1 %37, label %38, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4ee2e10:s0 -> Node0x4ee2670;
	Node0x4ee2e10:s1 -> Node0x4ee2e10;
	Node0x4ee2670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%38:\l38:                                               \l  %39 = icmp sgt i32 %4, 0\l  br i1 %39, label %40, label %97\l|{<s0>T|<s1>F}}"];
	Node0x4ee2670:s0 -> Node0x4ee43f0;
	Node0x4ee2670:s1 -> Node0x4ee4440;
	Node0x4ee43f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%40:\l40:                                               \l  %41 = icmp sgt i32 %5, 0\l  %42 = sext i32 %5 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %2, i64 %42\l  %44 = add nsw i32 %17, %5\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %3, i64 %45\l  %47 = and i32 %5, 7\l  %48 = icmp ult i32 %5, 8\l  %49 = and i32 %5, -8\l  %50 = icmp eq i32 %47, 0\l  %51 = and i32 %5, 7\l  %52 = icmp ult i32 %5, 8\l  %53 = and i32 %5, -8\l  %54 = icmp eq i32 %51, 0\l  br label %92\l}"];
	Node0x4ee43f0 -> Node0x4ee4d40;
	Node0x4ee2be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%55:\l55:                                               \l  %56 = phi i32 [ 0, %24 ], [ %89, %55 ]\l  %57 = phi i32 [ 0, %24 ], [ %90, %55 ]\l  %58 = add nsw i32 %56, %17\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %3, i64 %59\l  store float 0.000000e+00, float addrspace(1)* %60, align 4, !tbaa !7\l  %61 = or i32 %56, 1\l  %62 = add nsw i32 %61, %17\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %3, i64 %63\l  store float 0.000000e+00, float addrspace(1)* %64, align 4, !tbaa !7\l  %65 = or i32 %56, 2\l  %66 = add nsw i32 %65, %17\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %3, i64 %67\l  store float 0.000000e+00, float addrspace(1)* %68, align 4, !tbaa !7\l  %69 = or i32 %56, 3\l  %70 = add nsw i32 %69, %17\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %3, i64 %71\l  store float 0.000000e+00, float addrspace(1)* %72, align 4, !tbaa !7\l  %73 = or i32 %56, 4\l  %74 = add nsw i32 %73, %17\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %3, i64 %75\l  store float 0.000000e+00, float addrspace(1)* %76, align 4, !tbaa !7\l  %77 = or i32 %56, 5\l  %78 = add nsw i32 %77, %17\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %3, i64 %79\l  store float 0.000000e+00, float addrspace(1)* %80, align 4, !tbaa !7\l  %81 = or i32 %56, 6\l  %82 = add nsw i32 %81, %17\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %3, i64 %83\l  store float 0.000000e+00, float addrspace(1)* %84, align 4, !tbaa !7\l  %85 = or i32 %56, 7\l  %86 = add nsw i32 %85, %17\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %3, i64 %87\l  store float 0.000000e+00, float addrspace(1)* %88, align 4, !tbaa !7\l  %89 = add nuw i32 %56, 8\l  %90 = add i32 %57, 8\l  %91 = icmp eq i32 %90, %25\l  br i1 %91, label %26, label %55, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4ee2be0:s0 -> Node0x4ee2990;
	Node0x4ee2be0:s1 -> Node0x4ee2be0;
	Node0x4ee4d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%92:\l92:                                               \l  %93 = phi i32 [ 0, %40 ], [ %335, %334 ]\l  br i1 %41, label %94, label %118\l|{<s0>T|<s1>F}}"];
	Node0x4ee4d40:s0 -> Node0x4ee7230;
	Node0x4ee4d40:s1 -> Node0x4ee72c0;
	Node0x4ee7230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%94:\l94:                                               \l  %95 = mul nsw i32 %93, %5\l  %96 = add nsw i32 %95, %19\l  br i1 %48, label %98, label %134\l|{<s0>T|<s1>F}}"];
	Node0x4ee7230:s0 -> Node0x4ee7520;
	Node0x4ee7230:s1 -> Node0x4ee7570;
	Node0x4ee4440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%97:\l97:                                               \l  ret void\l}"];
	Node0x4ee7520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%98:\l98:                                               \l  %99 = phi float [ undef, %94 ], [ %216, %134 ]\l  %100 = phi i32 [ 0, %94 ], [ %217, %134 ]\l  %101 = phi float [ 0.000000e+00, %94 ], [ %216, %134 ]\l  br i1 %50, label %118, label %102\l|{<s0>T|<s1>F}}"];
	Node0x4ee7520:s0 -> Node0x4ee72c0;
	Node0x4ee7520:s1 -> Node0x4ee7d20;
	Node0x4ee7d20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%102:\l102:                                              \l  %103 = phi i32 [ %115, %102 ], [ %100, %98 ]\l  %104 = phi float [ %114, %102 ], [ %101, %98 ]\l  %105 = phi i32 [ %116, %102 ], [ 0, %98 ]\l  %106 = add nsw i32 %96, %103\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7\l  %110 = zext i32 %103 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = fmul contract float %109, %112\l  %114 = fadd contract float %104, %113\l  %115 = add nuw nsw i32 %103, 1\l  %116 = add i32 %105, 1\l  %117 = icmp eq i32 %116, %47\l  br i1 %117, label %118, label %102, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4ee7d20:s0 -> Node0x4ee72c0;
	Node0x4ee7d20:s1 -> Node0x4ee7d20;
	Node0x4ee72c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%118:\l118:                                              \l  %119 = phi float [ 0.000000e+00, %92 ], [ %99, %98 ], [ %114, %102 ]\l  %120 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %121 = fadd contract float %119, %120\l  %122 = fcmp contract ogt float %121, 0.000000e+00\l  %123 = select i1 %122, float 1.000000e+00, float 0.000000e+00\l  %124 = add nsw i32 %93, %18\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7\l  %128 = fsub contract float %127, %123\l  %129 = fcmp contract une float %128, 0.000000e+00\l  br i1 %129, label %130, label %334\l|{<s0>T|<s1>F}}"];
	Node0x4ee72c0:s0 -> Node0x4ee5a60;
	Node0x4ee72c0:s1 -> Node0x4ee70f0;
	Node0x4ee5a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%130:\l130:                                              \l  br i1 %41, label %131, label %238\l|{<s0>T|<s1>F}}"];
	Node0x4ee5a60:s0 -> Node0x4ee5ba0;
	Node0x4ee5a60:s1 -> Node0x4ee5bf0;
	Node0x4ee5ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%131:\l131:                                              \l  %132 = mul nsw i32 %93, %5\l  %133 = add nsw i32 %132, %19\l  br i1 %52, label %220, label %241\l|{<s0>T|<s1>F}}"];
	Node0x4ee5ba0:s0 -> Node0x4ee9790;
	Node0x4ee5ba0:s1 -> Node0x4ee97e0;
	Node0x4ee7570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%134:\l134:                                              \l  %135 = phi i32 [ %217, %134 ], [ 0, %94 ]\l  %136 = phi float [ %216, %134 ], [ 0.000000e+00, %94 ]\l  %137 = phi i32 [ %218, %134 ], [ 0, %94 ]\l  %138 = add nsw i32 %96, %135\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %0, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7\l  %142 = zext i32 %135 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %2, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7\l  %145 = fmul contract float %141, %144\l  %146 = fadd contract float %136, %145\l  %147 = or i32 %135, 1\l  %148 = add nsw i32 %96, %147\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %0, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7\l  %152 = zext i32 %147 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %2, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !7\l  %155 = fmul contract float %151, %154\l  %156 = fadd contract float %146, %155\l  %157 = or i32 %135, 2\l  %158 = add nsw i32 %96, %157\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %0, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7\l  %162 = zext i32 %157 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %2, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7\l  %165 = fmul contract float %161, %164\l  %166 = fadd contract float %156, %165\l  %167 = or i32 %135, 3\l  %168 = add nsw i32 %96, %167\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %0, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !7\l  %172 = zext i32 %167 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %2, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !7\l  %175 = fmul contract float %171, %174\l  %176 = fadd contract float %166, %175\l  %177 = or i32 %135, 4\l  %178 = add nsw i32 %96, %177\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %0, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !7\l  %182 = zext i32 %177 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %2, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !7\l  %185 = fmul contract float %181, %184\l  %186 = fadd contract float %176, %185\l  %187 = or i32 %135, 5\l  %188 = add nsw i32 %96, %187\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %0, i64 %189\l  %191 = load float, float addrspace(1)* %190, align 4, !tbaa !7\l  %192 = zext i32 %187 to i64\l  %193 = getelementptr inbounds float, float addrspace(1)* %2, i64 %192\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !7\l  %195 = fmul contract float %191, %194\l  %196 = fadd contract float %186, %195\l  %197 = or i32 %135, 6\l  %198 = add nsw i32 %96, %197\l  %199 = sext i32 %198 to i64\l  %200 = getelementptr inbounds float, float addrspace(1)* %0, i64 %199\l  %201 = load float, float addrspace(1)* %200, align 4, !tbaa !7\l  %202 = zext i32 %197 to i64\l  %203 = getelementptr inbounds float, float addrspace(1)* %2, i64 %202\l  %204 = load float, float addrspace(1)* %203, align 4, !tbaa !7\l  %205 = fmul contract float %201, %204\l  %206 = fadd contract float %196, %205\l  %207 = or i32 %135, 7\l  %208 = add nsw i32 %96, %207\l  %209 = sext i32 %208 to i64\l  %210 = getelementptr inbounds float, float addrspace(1)* %0, i64 %209\l  %211 = load float, float addrspace(1)* %210, align 4, !tbaa !7\l  %212 = zext i32 %207 to i64\l  %213 = getelementptr inbounds float, float addrspace(1)* %2, i64 %212\l  %214 = load float, float addrspace(1)* %213, align 4, !tbaa !7\l  %215 = fmul contract float %211, %214\l  %216 = fadd contract float %206, %215\l  %217 = add nuw nsw i32 %135, 8\l  %218 = add i32 %137, 8\l  %219 = icmp eq i32 %218, %49\l  br i1 %219, label %98, label %134, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4ee7570:s0 -> Node0x4ee7520;
	Node0x4ee7570:s1 -> Node0x4ee7570;
	Node0x4ee9790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%220:\l220:                                              \l  %221 = phi i32 [ 0, %131 ], [ %331, %241 ]\l  br i1 %54, label %238, label %222\l|{<s0>T|<s1>F}}"];
	Node0x4ee9790:s0 -> Node0x4ee5bf0;
	Node0x4ee9790:s1 -> Node0x4eec830;
	Node0x4eec830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%222:\l222:                                              \l  %223 = phi i32 [ %235, %222 ], [ %221, %220 ]\l  %224 = phi i32 [ %236, %222 ], [ 0, %220 ]\l  %225 = add nsw i32 %133, %223\l  %226 = sext i32 %225 to i64\l  %227 = getelementptr inbounds float, float addrspace(1)* %0, i64 %226\l  %228 = load float, float addrspace(1)* %227, align 4, !tbaa !7\l  %229 = fmul contract float %128, %228\l  %230 = add nsw i32 %223, %17\l  %231 = sext i32 %230 to i64\l  %232 = getelementptr inbounds float, float addrspace(1)* %3, i64 %231\l  %233 = load float, float addrspace(1)* %232, align 4, !tbaa !7\l  %234 = fadd contract float %233, %229\l  store float %234, float addrspace(1)* %232, align 4, !tbaa !7\l  %235 = add nuw nsw i32 %223, 1\l  %236 = add i32 %224, 1\l  %237 = icmp eq i32 %236, %51\l  br i1 %237, label %238, label %222, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4eec830:s0 -> Node0x4ee5bf0;
	Node0x4eec830:s1 -> Node0x4eec830;
	Node0x4ee5bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%238:\l238:                                              \l  %239 = load float, float addrspace(1)* %46, align 4, !tbaa !7\l  %240 = fadd contract float %128, %239\l  store float %240, float addrspace(1)* %46, align 4, !tbaa !7\l  br label %334\l}"];
	Node0x4ee5bf0 -> Node0x4ee70f0;
	Node0x4ee97e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%241:\l241:                                              \l  %242 = phi i32 [ %331, %241 ], [ 0, %131 ]\l  %243 = phi i32 [ %332, %241 ], [ 0, %131 ]\l  %244 = add nsw i32 %133, %242\l  %245 = sext i32 %244 to i64\l  %246 = getelementptr inbounds float, float addrspace(1)* %0, i64 %245\l  %247 = load float, float addrspace(1)* %246, align 4, !tbaa !7\l  %248 = fmul contract float %128, %247\l  %249 = add nsw i32 %242, %17\l  %250 = sext i32 %249 to i64\l  %251 = getelementptr inbounds float, float addrspace(1)* %3, i64 %250\l  %252 = load float, float addrspace(1)* %251, align 4, !tbaa !7\l  %253 = fadd contract float %252, %248\l  store float %253, float addrspace(1)* %251, align 4, !tbaa !7\l  %254 = or i32 %242, 1\l  %255 = add nsw i32 %133, %254\l  %256 = sext i32 %255 to i64\l  %257 = getelementptr inbounds float, float addrspace(1)* %0, i64 %256\l  %258 = load float, float addrspace(1)* %257, align 4, !tbaa !7\l  %259 = fmul contract float %128, %258\l  %260 = add nsw i32 %254, %17\l  %261 = sext i32 %260 to i64\l  %262 = getelementptr inbounds float, float addrspace(1)* %3, i64 %261\l  %263 = load float, float addrspace(1)* %262, align 4, !tbaa !7\l  %264 = fadd contract float %263, %259\l  store float %264, float addrspace(1)* %262, align 4, !tbaa !7\l  %265 = or i32 %242, 2\l  %266 = add nsw i32 %133, %265\l  %267 = sext i32 %266 to i64\l  %268 = getelementptr inbounds float, float addrspace(1)* %0, i64 %267\l  %269 = load float, float addrspace(1)* %268, align 4, !tbaa !7\l  %270 = fmul contract float %128, %269\l  %271 = add nsw i32 %265, %17\l  %272 = sext i32 %271 to i64\l  %273 = getelementptr inbounds float, float addrspace(1)* %3, i64 %272\l  %274 = load float, float addrspace(1)* %273, align 4, !tbaa !7\l  %275 = fadd contract float %274, %270\l  store float %275, float addrspace(1)* %273, align 4, !tbaa !7\l  %276 = or i32 %242, 3\l  %277 = add nsw i32 %133, %276\l  %278 = sext i32 %277 to i64\l  %279 = getelementptr inbounds float, float addrspace(1)* %0, i64 %278\l  %280 = load float, float addrspace(1)* %279, align 4, !tbaa !7\l  %281 = fmul contract float %128, %280\l  %282 = add nsw i32 %276, %17\l  %283 = sext i32 %282 to i64\l  %284 = getelementptr inbounds float, float addrspace(1)* %3, i64 %283\l  %285 = load float, float addrspace(1)* %284, align 4, !tbaa !7\l  %286 = fadd contract float %285, %281\l  store float %286, float addrspace(1)* %284, align 4, !tbaa !7\l  %287 = or i32 %242, 4\l  %288 = add nsw i32 %133, %287\l  %289 = sext i32 %288 to i64\l  %290 = getelementptr inbounds float, float addrspace(1)* %0, i64 %289\l  %291 = load float, float addrspace(1)* %290, align 4, !tbaa !7\l  %292 = fmul contract float %128, %291\l  %293 = add nsw i32 %287, %17\l  %294 = sext i32 %293 to i64\l  %295 = getelementptr inbounds float, float addrspace(1)* %3, i64 %294\l  %296 = load float, float addrspace(1)* %295, align 4, !tbaa !7\l  %297 = fadd contract float %296, %292\l  store float %297, float addrspace(1)* %295, align 4, !tbaa !7\l  %298 = or i32 %242, 5\l  %299 = add nsw i32 %133, %298\l  %300 = sext i32 %299 to i64\l  %301 = getelementptr inbounds float, float addrspace(1)* %0, i64 %300\l  %302 = load float, float addrspace(1)* %301, align 4, !tbaa !7\l  %303 = fmul contract float %128, %302\l  %304 = add nsw i32 %298, %17\l  %305 = sext i32 %304 to i64\l  %306 = getelementptr inbounds float, float addrspace(1)* %3, i64 %305\l  %307 = load float, float addrspace(1)* %306, align 4, !tbaa !7\l  %308 = fadd contract float %307, %303\l  store float %308, float addrspace(1)* %306, align 4, !tbaa !7\l  %309 = or i32 %242, 6\l  %310 = add nsw i32 %133, %309\l  %311 = sext i32 %310 to i64\l  %312 = getelementptr inbounds float, float addrspace(1)* %0, i64 %311\l  %313 = load float, float addrspace(1)* %312, align 4, !tbaa !7\l  %314 = fmul contract float %128, %313\l  %315 = add nsw i32 %309, %17\l  %316 = sext i32 %315 to i64\l  %317 = getelementptr inbounds float, float addrspace(1)* %3, i64 %316\l  %318 = load float, float addrspace(1)* %317, align 4, !tbaa !7\l  %319 = fadd contract float %318, %314\l  store float %319, float addrspace(1)* %317, align 4, !tbaa !7\l  %320 = or i32 %242, 7\l  %321 = add nsw i32 %133, %320\l  %322 = sext i32 %321 to i64\l  %323 = getelementptr inbounds float, float addrspace(1)* %0, i64 %322\l  %324 = load float, float addrspace(1)* %323, align 4, !tbaa !7\l  %325 = fmul contract float %128, %324\l  %326 = add nsw i32 %320, %17\l  %327 = sext i32 %326 to i64\l  %328 = getelementptr inbounds float, float addrspace(1)* %3, i64 %327\l  %329 = load float, float addrspace(1)* %328, align 4, !tbaa !7\l  %330 = fadd contract float %329, %325\l  store float %330, float addrspace(1)* %328, align 4, !tbaa !7\l  %331 = add nuw nsw i32 %242, 8\l  %332 = add i32 %243, 8\l  %333 = icmp eq i32 %332, %53\l  br i1 %333, label %220, label %241, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4ee97e0:s0 -> Node0x4ee9790;
	Node0x4ee97e0:s1 -> Node0x4ee97e0;
	Node0x4ee70f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%334:\l334:                                              \l  %335 = add nuw nsw i32 %93, 1\l  %336 = icmp eq i32 %335, %4\l  br i1 %336, label %97, label %92, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4ee70f0:s0 -> Node0x4ee4440;
	Node0x4ee70f0:s1 -> Node0x4ee4d40;
}
