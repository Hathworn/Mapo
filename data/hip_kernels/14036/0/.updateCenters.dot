digraph "CFG for 'updateCenters' function" {
	label="CFG for 'updateCenters' function";

	Node0x4a568a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%4:\l  %5 = alloca [784 x float], align 16, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = bitcast [784 x float] addrspace(5)* %5 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 3136, i8 addrspace(5)* %15) #3\l  %16 = mul nsw i32 %14, 784\l  br label %17\l}"];
	Node0x4a568a0 -> Node0x4a57aa0;
	Node0x4a57aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%17:\l17:                                               \l  %18 = phi i32 [ 0, %4 ], [ %114, %17 ]\l  %19 = add nsw i32 %18, %16\l  %20 = sext i32 %19 to i64\l  %21 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20\l  %22 = load float, float addrspace(1)* %21, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %23 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %18\l  store float %22, float addrspace(5)* %23, align 16, !tbaa !7\l  %24 = or i32 %18, 1\l  %25 = add nsw i32 %24, %16\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %1, i64 %26\l  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %29 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %24\l  store float %28, float addrspace(5)* %29, align 4, !tbaa !7\l  %30 = or i32 %18, 2\l  %31 = add nsw i32 %30, %16\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %35 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %30\l  store float %34, float addrspace(5)* %35, align 8, !tbaa !7\l  %36 = or i32 %18, 3\l  %37 = add nsw i32 %36, %16\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %41 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %36\l  store float %40, float addrspace(5)* %41, align 4, !tbaa !7\l  %42 = or i32 %18, 4\l  %43 = add nsw i32 %42, %16\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %42\l  store float %46, float addrspace(5)* %47, align 16, !tbaa !7\l  %48 = or i32 %18, 5\l  %49 = add nsw i32 %48, %16\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %48\l  store float %52, float addrspace(5)* %53, align 4, !tbaa !7\l  %54 = or i32 %18, 6\l  %55 = add nsw i32 %54, %16\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %1, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %54\l  store float %58, float addrspace(5)* %59, align 8, !tbaa !7\l  %60 = or i32 %18, 7\l  %61 = add nsw i32 %60, %16\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %1, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %60\l  store float %64, float addrspace(5)* %65, align 4, !tbaa !7\l  %66 = or i32 %18, 8\l  %67 = add nsw i32 %66, %16\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %71 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %66\l  store float %70, float addrspace(5)* %71, align 16, !tbaa !7\l  %72 = or i32 %18, 9\l  %73 = add nsw i32 %72, %16\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %72\l  store float %76, float addrspace(5)* %77, align 4, !tbaa !7\l  %78 = or i32 %18, 10\l  %79 = add nsw i32 %78, %16\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %78\l  store float %82, float addrspace(5)* %83, align 8, !tbaa !7\l  %84 = or i32 %18, 11\l  %85 = add nsw i32 %84, %16\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %84\l  store float %88, float addrspace(5)* %89, align 4, !tbaa !7\l  %90 = or i32 %18, 12\l  %91 = add nsw i32 %90, %16\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %90\l  store float %94, float addrspace(5)* %95, align 16, !tbaa !7\l  %96 = or i32 %18, 13\l  %97 = add nsw i32 %96, %16\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %96\l  store float %100, float addrspace(5)* %101, align 4, !tbaa !7\l  %102 = or i32 %18, 14\l  %103 = add nsw i32 %102, %16\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %102\l  store float %106, float addrspace(5)* %107, align 8, !tbaa !7\l  %108 = or i32 %18, 15\l  %109 = add nsw i32 %108, %16\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %108\l  store float %112, float addrspace(5)* %113, align 4, !tbaa !7\l  %114 = add nuw nsw i32 %18, 16\l  %115 = icmp eq i32 %114, 784\l  br i1 %115, label %116, label %17, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4a57aa0:s0 -> Node0x4a5e9e0;
	Node0x4a57aa0:s1 -> Node0x4a57aa0;
	Node0x4a5e9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%116:\l116:                                              \l  %117 = phi i32 [ %289, %285 ], [ 0, %17 ]\l  %118 = phi i32 [ %288, %285 ], [ -1, %17 ]\l  %119 = phi float [ %287, %285 ], [ 1.000000e+08, %17 ]\l  %120 = mul nuw nsw i32 %117, 784\l  br label %121\l}"];
	Node0x4a5e9e0 -> Node0x4a5fab0;
	Node0x4a5fab0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%121:\l121:                                              \l  %122 = phi float [ 0.000000e+00, %116 ], [ %282, %121 ]\l  %123 = phi i32 [ 0, %116 ], [ %283, %121 ]\l  %124 = add nuw nsw i32 %123, %120\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %123\l  %129 = load float, float addrspace(5)* %128, align 16, !tbaa !7\l  %130 = fsub contract float %127, %129\l  %131 = fmul contract float %130, %130\l  %132 = fadd contract float %122, %131\l  %133 = or i32 %123, 1\l  %134 = add nuw nsw i32 %133, %120\l  %135 = zext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %0, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %133\l  %139 = load float, float addrspace(5)* %138, align 4, !tbaa !7\l  %140 = fsub contract float %137, %139\l  %141 = fmul contract float %140, %140\l  %142 = fadd contract float %132, %141\l  %143 = or i32 %123, 2\l  %144 = add nuw nsw i32 %143, %120\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %148 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %143\l  %149 = load float, float addrspace(5)* %148, align 8, !tbaa !7\l  %150 = fsub contract float %147, %149\l  %151 = fmul contract float %150, %150\l  %152 = fadd contract float %142, %151\l  %153 = or i32 %123, 3\l  %154 = add nuw nsw i32 %153, %120\l  %155 = zext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %0, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %158 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %153\l  %159 = load float, float addrspace(5)* %158, align 4, !tbaa !7\l  %160 = fsub contract float %157, %159\l  %161 = fmul contract float %160, %160\l  %162 = fadd contract float %152, %161\l  %163 = or i32 %123, 4\l  %164 = add nuw nsw i32 %163, %120\l  %165 = zext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %0, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %168 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %163\l  %169 = load float, float addrspace(5)* %168, align 16, !tbaa !7\l  %170 = fsub contract float %167, %169\l  %171 = fmul contract float %170, %170\l  %172 = fadd contract float %162, %171\l  %173 = or i32 %123, 5\l  %174 = add nuw nsw i32 %173, %120\l  %175 = zext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %0, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %178 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %173\l  %179 = load float, float addrspace(5)* %178, align 4, !tbaa !7\l  %180 = fsub contract float %177, %179\l  %181 = fmul contract float %180, %180\l  %182 = fadd contract float %172, %181\l  %183 = or i32 %123, 6\l  %184 = add nuw nsw i32 %183, %120\l  %185 = zext i32 %184 to i64\l  %186 = getelementptr inbounds float, float addrspace(1)* %0, i64 %185\l  %187 = load float, float addrspace(1)* %186, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %188 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %183\l  %189 = load float, float addrspace(5)* %188, align 8, !tbaa !7\l  %190 = fsub contract float %187, %189\l  %191 = fmul contract float %190, %190\l  %192 = fadd contract float %182, %191\l  %193 = or i32 %123, 7\l  %194 = add nuw nsw i32 %193, %120\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %0, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %198 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %193\l  %199 = load float, float addrspace(5)* %198, align 4, !tbaa !7\l  %200 = fsub contract float %197, %199\l  %201 = fmul contract float %200, %200\l  %202 = fadd contract float %192, %201\l  %203 = or i32 %123, 8\l  %204 = add nuw nsw i32 %203, %120\l  %205 = zext i32 %204 to i64\l  %206 = getelementptr inbounds float, float addrspace(1)* %0, i64 %205\l  %207 = load float, float addrspace(1)* %206, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %208 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %203\l  %209 = load float, float addrspace(5)* %208, align 16, !tbaa !7\l  %210 = fsub contract float %207, %209\l  %211 = fmul contract float %210, %210\l  %212 = fadd contract float %202, %211\l  %213 = or i32 %123, 9\l  %214 = add nuw nsw i32 %213, %120\l  %215 = zext i32 %214 to i64\l  %216 = getelementptr inbounds float, float addrspace(1)* %0, i64 %215\l  %217 = load float, float addrspace(1)* %216, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %218 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %213\l  %219 = load float, float addrspace(5)* %218, align 4, !tbaa !7\l  %220 = fsub contract float %217, %219\l  %221 = fmul contract float %220, %220\l  %222 = fadd contract float %212, %221\l  %223 = or i32 %123, 10\l  %224 = add nuw nsw i32 %223, %120\l  %225 = zext i32 %224 to i64\l  %226 = getelementptr inbounds float, float addrspace(1)* %0, i64 %225\l  %227 = load float, float addrspace(1)* %226, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %228 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %223\l  %229 = load float, float addrspace(5)* %228, align 8, !tbaa !7\l  %230 = fsub contract float %227, %229\l  %231 = fmul contract float %230, %230\l  %232 = fadd contract float %222, %231\l  %233 = or i32 %123, 11\l  %234 = add nuw nsw i32 %233, %120\l  %235 = zext i32 %234 to i64\l  %236 = getelementptr inbounds float, float addrspace(1)* %0, i64 %235\l  %237 = load float, float addrspace(1)* %236, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %238 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %233\l  %239 = load float, float addrspace(5)* %238, align 4, !tbaa !7\l  %240 = fsub contract float %237, %239\l  %241 = fmul contract float %240, %240\l  %242 = fadd contract float %232, %241\l  %243 = or i32 %123, 12\l  %244 = add nuw nsw i32 %243, %120\l  %245 = zext i32 %244 to i64\l  %246 = getelementptr inbounds float, float addrspace(1)* %0, i64 %245\l  %247 = load float, float addrspace(1)* %246, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %248 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %243\l  %249 = load float, float addrspace(5)* %248, align 16, !tbaa !7\l  %250 = fsub contract float %247, %249\l  %251 = fmul contract float %250, %250\l  %252 = fadd contract float %242, %251\l  %253 = or i32 %123, 13\l  %254 = add nuw nsw i32 %253, %120\l  %255 = zext i32 %254 to i64\l  %256 = getelementptr inbounds float, float addrspace(1)* %0, i64 %255\l  %257 = load float, float addrspace(1)* %256, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %258 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %253\l  %259 = load float, float addrspace(5)* %258, align 4, !tbaa !7\l  %260 = fsub contract float %257, %259\l  %261 = fmul contract float %260, %260\l  %262 = fadd contract float %252, %261\l  %263 = or i32 %123, 14\l  %264 = add nuw nsw i32 %263, %120\l  %265 = zext i32 %264 to i64\l  %266 = getelementptr inbounds float, float addrspace(1)* %0, i64 %265\l  %267 = load float, float addrspace(1)* %266, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %268 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %263\l  %269 = load float, float addrspace(5)* %268, align 8, !tbaa !7\l  %270 = fsub contract float %267, %269\l  %271 = fmul contract float %270, %270\l  %272 = fadd contract float %262, %271\l  %273 = or i32 %123, 15\l  %274 = add nuw nsw i32 %273, %120\l  %275 = zext i32 %274 to i64\l  %276 = getelementptr inbounds float, float addrspace(1)* %0, i64 %275\l  %277 = load float, float addrspace(1)* %276, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %278 = getelementptr inbounds [784 x float], [784 x float] addrspace(5)* %5,\l... i32 0, i32 %273\l  %279 = load float, float addrspace(5)* %278, align 4, !tbaa !7\l  %280 = fsub contract float %277, %279\l  %281 = fmul contract float %280, %280\l  %282 = fadd contract float %272, %281\l  %283 = add nuw nsw i32 %123, 16\l  %284 = icmp eq i32 %283, 784\l  br i1 %284, label %285, label %121, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4a5fab0:s0 -> Node0x4a5ec20;
	Node0x4a5fab0:s1 -> Node0x4a5fab0;
	Node0x4a5ec20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%285:\l285:                                              \l  %286 = fcmp contract olt float %282, %119\l  %287 = select i1 %286, float %282, float %119\l  %288 = select i1 %286, i32 %117, i32 %118\l  %289 = add nuw nsw i32 %117, 1\l  %290 = icmp eq i32 %289, 100\l  br i1 %290, label %291, label %116, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4a5ec20:s0 -> Node0x4a640f0;
	Node0x4a5ec20:s1 -> Node0x4a5e9e0;
	Node0x4a640f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%291:\l291:                                              \l  %292 = sext i32 %14 to i64\l  %293 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %292\l  store i32 %288, i32 addrspace(1)* %293, align 4, !tbaa !15\l  call void @llvm.lifetime.end.p5i8(i64 3136, i8 addrspace(5)* %15) #3\l  ret void\l}"];
}
