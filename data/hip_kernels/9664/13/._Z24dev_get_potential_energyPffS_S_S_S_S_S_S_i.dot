digraph "CFG for '_Z24dev_get_potential_energyPffS_S_S_S_S_S_S_i' function" {
	label="CFG for '_Z24dev_get_potential_energyPffS_S_S_S_S_S_S_i' function";

	Node0x4cc21f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !7\l  %21 = mul i32 %12, %17\l  %22 = add i32 %21, %11\l  %23 = icmp ult i32 %22, %9\l  br i1 %23, label %24, label %114\l|{<s0>T|<s1>F}}"];
	Node0x4cc21f0:s0 -> Node0x4cc4af0;
	Node0x4cc21f0:s1 -> Node0x4cc4b80;
	Node0x4cc4af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%24:\l24:                                               \l  %25 = udiv i32 %20, %17\l  %26 = mul i32 %25, %17\l  %27 = icmp ugt i32 %20, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %17\l  br label %31\l}"];
	Node0x4cc4af0 -> Node0x4cc5000;
	Node0x4cc5000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%31:\l31:                                               \l  %32 = phi float [ 0.000000e+00, %24 ], [ %111, %110 ]\l  %33 = phi i32 [ %22, %24 ], [ %112, %110 ]\l  %34 = icmp eq i32 %33, 0\l  br i1 %34, label %110, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4cc5000:s0 -> Node0x4cc5b10;
	Node0x4cc5000:s1 -> Node0x4cc5f50;
	Node0x4cc5f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%35:\l35:                                               \l  %36 = zext i32 %33 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %3, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %39 = getelementptr inbounds float, float addrspace(1)* %6, i64 %36\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %41 = getelementptr inbounds float, float addrspace(1)* %4, i64 %36\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %43 = getelementptr inbounds float, float addrspace(1)* %7, i64 %36\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %45 = getelementptr inbounds float, float addrspace(1)* %5, i64 %36\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %47 = getelementptr inbounds float, float addrspace(1)* %8, i64 %36\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %49 = getelementptr inbounds float, float addrspace(1)* %2, i64 %36\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  br label %51\l}"];
	Node0x4cc5f50 -> Node0x4cc77c0;
	Node0x4cc77c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi float [ %32, %35 ], [ %107, %51 ]\l  %53 = phi i32 [ 0, %35 ], [ %108, %51 ]\l  %54 = zext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %3, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %57 = fsub contract float %56, %38\l  %58 = getelementptr inbounds float, float addrspace(1)* %6, i64 %54\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %60 = fsub contract float %59, %40\l  %61 = fadd contract float %57, %60\l  %62 = getelementptr inbounds float, float addrspace(1)* %4, i64 %54\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %64 = fsub contract float %63, %42\l  %65 = getelementptr inbounds float, float addrspace(1)* %7, i64 %54\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %67 = fsub contract float %66, %44\l  %68 = fadd contract float %64, %67\l  %69 = getelementptr inbounds float, float addrspace(1)* %5, i64 %54\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %71 = fsub contract float %70, %46\l  %72 = getelementptr inbounds float, float addrspace(1)* %8, i64 %54\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %74 = fsub contract float %73, %48\l  %75 = fadd contract float %71, %74\l  %76 = fmul contract float %61, %61\l  %77 = fmul contract float %68, %68\l  %78 = fadd contract float %76, %77\l  %79 = fmul contract float %75, %75\l  %80 = fadd contract float %78, %79\l  %81 = fadd contract float %80, %1\l  %82 = fcmp olt float %81, 0x39F0000000000000\l  %83 = select i1 %82, float 0x41F0000000000000, float 1.000000e+00\l  %84 = fmul float %81, %83\l  %85 = tail call float @llvm.sqrt.f32(float %84)\l  %86 = bitcast float %85 to i32\l  %87 = add nsw i32 %86, -1\l  %88 = bitcast i32 %87 to float\l  %89 = add nsw i32 %86, 1\l  %90 = bitcast i32 %89 to float\l  %91 = tail call i1 @llvm.amdgcn.class.f32(float %84, i32 608)\l  %92 = select i1 %82, float 0x3EF0000000000000, float 1.000000e+00\l  %93 = fneg float %90\l  %94 = tail call float @llvm.fma.f32(float %93, float %85, float %84)\l  %95 = fcmp ogt float %94, 0.000000e+00\l  %96 = fneg float %88\l  %97 = tail call float @llvm.fma.f32(float %96, float %85, float %84)\l  %98 = fcmp ole float %97, 0.000000e+00\l  %99 = select i1 %98, float %88, float %85\l  %100 = select i1 %95, float %90, float %99\l  %101 = fmul float %92, %100\l  %102 = select i1 %91, float %84, float %101\l  %103 = getelementptr inbounds float, float addrspace(1)* %2, i64 %54\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %105 = fmul contract float %104, %50\l  %106 = fdiv contract float %105, %102\l  %107 = fsub contract float %52, %106\l  %108 = add nuw i32 %53, 1\l  %109 = icmp ult i32 %108, %33\l  br i1 %109, label %51, label %110, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4cc77c0:s0 -> Node0x4cc77c0;
	Node0x4cc77c0:s1 -> Node0x4cc5b10;
	Node0x4cc5b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%110:\l110:                                              \l  %111 = phi float [ %32, %31 ], [ %107, %51 ]\l  %112 = add i32 %30, %33\l  %113 = icmp ult i32 %112, %9\l  br i1 %113, label %31, label %114, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4cc5b10:s0 -> Node0x4cc5000;
	Node0x4cc5b10:s1 -> Node0x4cc4b80;
	Node0x4cc4b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%114:\l114:                                              \l  %115 = phi float [ 0.000000e+00, %10 ], [ %111, %110 ]\l  %116 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @thread_results, i32 0, i32 %11\l  store float %115, float addrspace(3)* %116, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %117 = icmp ult i16 %16, 2\l  br i1 %117, label %130, label %118\l|{<s0>T|<s1>F}}"];
	Node0x4cc4b80:s0 -> Node0x4ccae00;
	Node0x4cc4b80:s1 -> Node0x4ccae90;
	Node0x4ccae90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%118:\l118:                                              \l  %119 = phi i32 [ %120, %128 ], [ %17, %114 ]\l  %120 = lshr i32 %119, 1\l  %121 = icmp ult i32 %11, %120\l  br i1 %121, label %122, label %128\l|{<s0>T|<s1>F}}"];
	Node0x4ccae90:s0 -> Node0x4ccb230;
	Node0x4ccae90:s1 -> Node0x4ccafd0;
	Node0x4ccb230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%122:\l122:                                              \l  %123 = add nuw nsw i32 %120, %11\l  %124 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @thread_results, i32 0, i32 %123\l  %125 = load float, float addrspace(3)* %124, align 4, !tbaa !16\l  %126 = load float, float addrspace(3)* %116, align 4, !tbaa !16\l  %127 = fadd contract float %125, %126\l  store float %127, float addrspace(3)* %116, align 4, !tbaa !16\l  br label %128\l}"];
	Node0x4ccb230 -> Node0x4ccafd0;
	Node0x4ccafd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%128:\l128:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %129 = icmp ult i32 %119, 4\l  br i1 %129, label %130, label %118, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4ccafd0:s0 -> Node0x4ccae00;
	Node0x4ccafd0:s1 -> Node0x4ccae90;
	Node0x4ccae00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%130:\l130:                                              \l  %131 = icmp eq i32 %11, 0\l  br i1 %131, label %132, label %136\l|{<s0>T|<s1>F}}"];
	Node0x4ccae00:s0 -> Node0x4cc8500;
	Node0x4ccae00:s1 -> Node0x4ccbf90;
	Node0x4cc8500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%132:\l132:                                              \l  %133 = load float, float addrspace(3)* getelementptr inbounds ([0 x float],\l... [0 x float] addrspace(3)* @thread_results, i32 0, i32 0), align 4, !tbaa !16\l  %134 = zext i32 %12 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %0, i64 %134\l  store float %133, float addrspace(1)* %135, align 4, !tbaa !16\l  br label %136\l}"];
	Node0x4cc8500 -> Node0x4ccbf90;
	Node0x4ccbf90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%136:\l136:                                              \l  ret void\l}"];
}
