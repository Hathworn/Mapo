digraph "CFG for '_Z3xTAPdiS_iiS_i' function" {
	label="CFG for '_Z3xTAPdiS_iiS_i' function";

	Node0x59809b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp slt i32 %16, %1\l  br i1 %17, label %18, label %153\l|{<s0>T|<s1>F}}"];
	Node0x59809b0:s0 -> Node0x59828e0;
	Node0x59809b0:s1 -> Node0x5982970;
	Node0x59828e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%18:\l18:                                               \l  %19 = icmp sgt i32 %3, 0\l  br i1 %19, label %20, label %47\l|{<s0>T|<s1>F}}"];
	Node0x59828e0:s0 -> Node0x5982b40;
	Node0x59828e0:s1 -> Node0x5982b90;
	Node0x5982b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%20:\l20:                                               \l  %21 = and i32 %3, 7\l  %22 = icmp ult i32 %3, 8\l  br i1 %22, label %25, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5982b40:s0 -> Node0x5982e50;
	Node0x5982b40:s1 -> Node0x5982ea0;
	Node0x5982ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %3, -8\l  br label %51\l}"];
	Node0x5982ea0 -> Node0x59830a0;
	Node0x5982e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%25:\l25:                                               \l  %26 = phi i32 [ 0, %20 ], [ %150, %51 ]\l  %27 = phi double [ undef, %20 ], [ %149, %51 ]\l  %28 = icmp eq i32 %21, 0\l  br i1 %28, label %47, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5982e50:s0 -> Node0x5982b90;
	Node0x5982e50:s1 -> Node0x5983800;
	Node0x5983800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %44, %29 ], [ %26, %25 ]\l  %31 = phi double [ %43, %29 ], [ %27, %25 ]\l  %32 = phi i32 [ %45, %29 ], [ 0, %25 ]\l  %33 = mul nsw i32 %30, %6\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %5, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = mul nsw i32 %30, %4\l  %38 = add nsw i32 %37, %16\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %2, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fmul contract double %36, %41\l  %43 = fadd contract double %31, %42\l  %44 = add nuw nsw i32 %30, 1\l  %45 = add i32 %32, 1\l  %46 = icmp eq i32 %45, %21\l  br i1 %46, label %47, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5983800:s0 -> Node0x5982b90;
	Node0x5983800:s1 -> Node0x5983800;
	Node0x5982b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = phi double [ undef, %18 ], [ %27, %25 ], [ %43, %29 ]\l  %49 = sext i32 %16 to i64\l  %50 = getelementptr inbounds double, double addrspace(1)* %0, i64 %49\l  store double %48, double addrspace(1)* %50, align 8, !tbaa !7\l  br label %153\l}"];
	Node0x5982b90 -> Node0x5982970;
	Node0x59830a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %23 ], [ %150, %51 ]\l  %53 = phi double [ undef, %23 ], [ %149, %51 ]\l  %54 = phi i32 [ 0, %23 ], [ %151, %51 ]\l  %55 = mul nsw i32 %52, %6\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %5, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = mul nsw i32 %52, %4\l  %60 = add nsw i32 %59, %16\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds double, double addrspace(1)* %2, i64 %61\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = fmul contract double %58, %63\l  %65 = fadd contract double %53, %64\l  %66 = or i32 %52, 1\l  %67 = mul nsw i32 %66, %6\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %5, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %71 = mul nsw i32 %66, %4\l  %72 = add nsw i32 %71, %16\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %2, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = fmul contract double %70, %75\l  %77 = fadd contract double %65, %76\l  %78 = or i32 %52, 2\l  %79 = mul nsw i32 %78, %6\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %5, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = mul nsw i32 %78, %4\l  %84 = add nsw i32 %83, %16\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds double, double addrspace(1)* %2, i64 %85\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = fmul contract double %82, %87\l  %89 = fadd contract double %77, %88\l  %90 = or i32 %52, 3\l  %91 = mul nsw i32 %90, %6\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %5, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = mul nsw i32 %90, %4\l  %96 = add nsw i32 %95, %16\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %2, i64 %97\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fmul contract double %94, %99\l  %101 = fadd contract double %89, %100\l  %102 = or i32 %52, 4\l  %103 = mul nsw i32 %102, %6\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds double, double addrspace(1)* %5, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = mul nsw i32 %102, %4\l  %108 = add nsw i32 %107, %16\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds double, double addrspace(1)* %2, i64 %109\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = fmul contract double %106, %111\l  %113 = fadd contract double %101, %112\l  %114 = or i32 %52, 5\l  %115 = mul nsw i32 %114, %6\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds double, double addrspace(1)* %5, i64 %116\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = mul nsw i32 %114, %4\l  %120 = add nsw i32 %119, %16\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds double, double addrspace(1)* %2, i64 %121\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %124 = fmul contract double %118, %123\l  %125 = fadd contract double %113, %124\l  %126 = or i32 %52, 6\l  %127 = mul nsw i32 %126, %6\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds double, double addrspace(1)* %5, i64 %128\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = mul nsw i32 %126, %4\l  %132 = add nsw i32 %131, %16\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds double, double addrspace(1)* %2, i64 %133\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %136 = fmul contract double %130, %135\l  %137 = fadd contract double %125, %136\l  %138 = or i32 %52, 7\l  %139 = mul nsw i32 %138, %6\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds double, double addrspace(1)* %5, i64 %140\l  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %143 = mul nsw i32 %138, %4\l  %144 = add nsw i32 %143, %16\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds double, double addrspace(1)* %2, i64 %145\l  %147 = load double, double addrspace(1)* %146, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %148 = fmul contract double %142, %147\l  %149 = fadd contract double %137, %148\l  %150 = add nuw nsw i32 %52, 8\l  %151 = add i32 %54, 8\l  %152 = icmp eq i32 %151, %24\l  br i1 %152, label %25, label %51, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x59830a0:s0 -> Node0x5982e50;
	Node0x59830a0:s1 -> Node0x59830a0;
	Node0x5982970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%153:\l153:                                              \l  ret void\l}"];
}
