digraph "CFG for '_Z21clipFilterDepthKernelP13__hip_texturejjjjffP13__hip_surface' function" {
	label="CFG for '_Z21clipFilterDepthKernelP13__hip_texturejjjjffP13__hip_surface' function";

	Node0x4875240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %11, %15\l  %17 = add i32 %16, %9\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = add i32 %24, %18\l  %26 = icmp ult i32 %25, %1\l  %27 = icmp ult i32 %17, %2\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %204\l|{<s0>T|<s1>F}}"];
	Node0x4875240:s0 -> Node0x4878630;
	Node0x4875240:s1 -> Node0x48786c0;
	Node0x4878630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%29:\l29:                                               \l  %30 = add i32 %17, 20\l  %31 = add i32 %25, 20\l  %32 = uitofp i32 %30 to float\l  %33 = uitofp i32 %31 to float\l  %34 = bitcast %struct.__hip_texture addrspace(1)* %0 to i32 addrspace(1)*\l  %35 = addrspacecast i32 addrspace(1)* %34 to i32 addrspace(4)*\l  %36 = getelementptr inbounds i32, i32 addrspace(4)* %35, i64 12\l  %37 = getelementptr inbounds i32, i32 addrspace(4)* %35, i64 10\l  %38 = load i32, i32 addrspace(4)* %37, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %39 = uitofp i32 %38 to float\l  %40 = getelementptr inbounds i32, i32 addrspace(4)* %35, i64 2\l  %41 = load i32, i32 addrspace(4)* %40, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %42 = lshr i32 %41, 14\l  %43 = and i32 %42, 16383\l  %44 = add nuw nsw i32 %43, 1\l  %45 = uitofp i32 %44 to float\l  %46 = load i32, i32 addrspace(4)* %36, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %47 = and i32 %46, 32768\l  %48 = icmp eq i32 %47, 0\l  %49 = select i1 %48, float %39, float 1.000000e+00\l  %50 = select i1 %48, float %45, float 1.000000e+00\l  %51 = getelementptr inbounds i32, i32 addrspace(4)* %35, i64 14\l  %52 = load i32, i32 addrspace(4)* %51, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %53 = and i32 %52, 1048576\l  %54 = icmp eq i32 %53, 0\l  %55 = bitcast i32 addrspace(4)* %36 to \<4 x i32\> addrspace(4)*\l  %56 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %55, align 16, !tbaa !11,\l... !amdgpu.noclobber !6\l  %57 = bitcast %struct.__hip_texture addrspace(1)* %0 to \<8 x i32\>\l... addrspace(1)*\l  %58 = addrspacecast \<8 x i32\> addrspace(1)* %57 to \<8 x i32\> addrspace(4)*\l  %59 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %58, align 32, !tbaa !11,\l... !amdgpu.noclobber !6\l  %60 = tail call float @llvm.amdgcn.rcp.f32(float %50)\l  %61 = tail call float @llvm.amdgcn.rcp.f32(float %49)\l  %62 = add i32 %25, 15\l  %63 = add i32 %25, 25\l  %64 = icmp ugt i32 %62, %63\l  br i1 %64, label %84, label %65\l|{<s0>T|<s1>F}}"];
	Node0x4878630:s0 -> Node0x48789c0;
	Node0x4878630:s1 -> Node0x4878a10;
	Node0x4878a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%65:\l65:                                               \l  %66 = fmul float %49, %32\l  %67 = tail call float @llvm.floor.f32(float %66)\l  %68 = fmul float %61, %67\l  %69 = select i1 %54, float %68, float %32\l  %70 = fmul float %50, %33\l  %71 = tail call float @llvm.floor.f32(float %70)\l  %72 = fmul float %60, %71\l  %73 = select i1 %54, float %72, float %33\l  %74 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %69, float %73, \<8 x i32\> %59, \<4 x i32\> %56, i1 false, i32 0, i32 0)\l  %75 = bitcast float %74 to i32\l  %76 = add i32 %17, 15\l  %77 = add i32 %17, 25\l  %78 = icmp ugt i32 %76, %77\l  %79 = and i32 %75, 65535\l  %80 = fneg contract float %5\l  %81 = fneg contract float %6\l  br label %127\l}"];
	Node0x4878a10 -> Node0x487d0d0;
	Node0x487d1d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%82:\l82:                                               \l  %83 = fdiv contract float %141, %140\l  br label %84\l}"];
	Node0x487d1d0 -> Node0x48789c0;
	Node0x48789c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%84:\l84:                                               \l  %85 = phi float [ %83, %82 ], [ 0x7FF8000000000000, %29 ]\l  %86 = tail call float @llvm.rint.f32(float %85)\l  %87 = fptoui float %86 to i32\l  %88 = and i32 %87, 65535\l  %89 = icmp ult i32 %88, %3\l  %90 = icmp ugt i32 %88, %4\l  %91 = select i1 %89, i1 true, i1 %90\l  %92 = shl i32 %17, 1\l  %93 = bitcast %struct.__hip_surface addrspace(1)* %7 to i32 addrspace(1)*\l  %94 = addrspacecast i32 addrspace(1)* %93 to i32 addrspace(4)*\l  %95 = getelementptr inbounds i32, i32 addrspace(4)* %94, i64 8\l  %96 = load i32, i32 addrspace(4)* %95, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %97 = getelementptr inbounds i32, i32 addrspace(4)* %94, i64 9\l  %98 = load i32, i32 addrspace(4)* %97, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %99 = icmp eq i32 %96, 4\l  br i1 %99, label %100, label %102\l|{<s0>T|<s1>F}}"];
	Node0x48789c0:s0 -> Node0x487df40;
	Node0x48789c0:s1 -> Node0x487dfd0;
	Node0x487df40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%100:\l100:                                              \l  %101 = sdiv i32 %92, 3\l  br label %107\l}"];
	Node0x487df40 -> Node0x487e1a0;
	Node0x487dfd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%102:\l102:                                              \l  %103 = sext i32 %96 to i64\l  %104 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)*\l... @_ZZL17__hipGetPixelAddriiiE9FormatLUT, i64 0, i64 %103\l  %105 = load i32, i32 addrspace(4)* %104, align 4, !tbaa !12\l  %106 = ashr i32 %92, %105\l  br label %107\l}"];
	Node0x487dfd0 -> Node0x487e1a0;
	Node0x487e1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%107:\l107:                                              \l  %108 = phi i32 [ %101, %100 ], [ %106, %102 ]\l  %109 = sext i32 %98 to i64\l  %110 = lshr i64 4176, %109\l  %111 = and i64 %110, 1\l  %112 = icmp eq i64 %111, 0\l  br i1 %112, label %115, label %113\l|{<s0>T|<s1>F}}"];
	Node0x487e1a0:s0 -> Node0x487e980;
	Node0x487e1a0:s1 -> Node0x487e9d0;
	Node0x487e9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%113:\l113:                                              \l  %114 = sdiv i32 %108, 3\l  br label %119\l}"];
	Node0x487e9d0 -> Node0x487eba0;
	Node0x487e980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%115:\l115:                                              \l  %116 = getelementptr inbounds [20 x i32], [20 x i32] addrspace(4)*\l... @_ZZL17__hipGetPixelAddriiiE8OrderLUT, i64 0, i64 %109\l  %117 = load i32, i32 addrspace(4)* %116, align 4, !tbaa !12\l  %118 = ashr i32 %108, %117\l  br label %119\l}"];
	Node0x487e980 -> Node0x487eba0;
	Node0x487eba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%119:\l119:                                              \l  %120 = phi i32 [ %114, %113 ], [ %118, %115 ]\l  %121 = bitcast i32 %88 to float\l  %122 = select i1 %91, float 0.000000e+00, float %121\l  %123 = insertelement \<4 x float\> \<float poison, float 0.000000e+00, float\l... 0.000000e+00, float 0.000000e+00\>, float %122, i64 0\l  %124 = bitcast %struct.__hip_surface addrspace(1)* %7 to \<8 x i32\>\l... addrspace(1)*\l  %125 = addrspacecast \<8 x i32\> addrspace(1)* %124 to \<8 x i32\> addrspace(4)*\l  %126 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %125, align 32, !tbaa !11,\l... !amdgpu.noclobber !6\l  tail call void @llvm.amdgcn.image.store.2d.v4f32.i32(\<4 x float\> %123, i32\l... 15, i32 %120, i32 %25, \<8 x i32\> %126, i32 0, i32 0)\l  br label %204\l}"];
	Node0x487eba0 -> Node0x48786c0;
	Node0x487d0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%127:\l127:                                              \l  %128 = phi float [ 0.000000e+00, %65 ], [ %141, %139 ]\l  %129 = phi float [ 0.000000e+00, %65 ], [ %140, %139 ]\l  %130 = phi i32 [ %62, %65 ], [ %142, %139 ]\l  br i1 %78, label %139, label %131\l|{<s0>T|<s1>F}}"];
	Node0x487d0d0:s0 -> Node0x4880250;
	Node0x487d0d0:s1 -> Node0x487c1f0;
	Node0x487c1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%131:\l131:                                              \l  %132 = uitofp i32 %130 to float\l  %133 = fmul float %50, %132\l  %134 = tail call float @llvm.floor.f32(float %133)\l  %135 = fmul float %60, %134\l  %136 = select i1 %54, float %135, float %132\l  %137 = sub i32 %130, %31\l  %138 = mul i32 %137, %137\l  br label %144\l}"];
	Node0x487c1f0 -> Node0x4880f10;
	Node0x4880250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%139:\l139:                                              \l  %140 = phi float [ %129, %127 ], [ %198, %144 ]\l  %141 = phi float [ %128, %127 ], [ %201, %144 ]\l  %142 = add i32 %130, 1\l  %143 = icmp ugt i32 %142, %63\l  br i1 %143, label %82, label %127, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4880250:s0 -> Node0x487d1d0;
	Node0x4880250:s1 -> Node0x487d0d0;
	Node0x4880f10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%144:\l144:                                              \l  %145 = phi float [ %128, %131 ], [ %201, %144 ]\l  %146 = phi float [ %129, %131 ], [ %198, %144 ]\l  %147 = phi i32 [ %76, %131 ], [ %202, %144 ]\l  %148 = uitofp i32 %147 to float\l  %149 = fmul float %49, %148\l  %150 = tail call float @llvm.floor.f32(float %149)\l  %151 = fmul float %61, %150\l  %152 = select i1 %54, float %151, float %148\l  %153 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %152, float %136, \<8 x i32\> %59, \<4 x i32\> %56, i1 false, i32 0, i32 0)\l  %154 = bitcast float %153 to i32\l  %155 = trunc i32 %154 to i16\l  %156 = and i32 %154, 65535\l  %157 = sub nsw i32 %156, %79\l  %158 = mul nsw i32 %157, %157\l  %159 = sitofp i32 %158 to float\l  %160 = sub i32 %147, %30\l  %161 = mul i32 %160, %160\l  %162 = add i32 %161, %138\l  %163 = uitofp i32 %162 to float\l  %164 = icmp ne i16 %155, 0\l  %165 = uitofp i1 %164 to float\l  %166 = fmul contract float %80, %163\l  %167 = fmul float %166, 0x3FF7154760000000\l  %168 = tail call float @llvm.rint.f32(float %167)\l  %169 = fcmp ogt float %166, 0x40562E4300000000\l  %170 = fcmp olt float %166, 0xC059D1DA00000000\l  %171 = fneg float %167\l  %172 = tail call float @llvm.fma.f32(float %166, float 0x3FF7154760000000,\l... float %171)\l  %173 = tail call float @llvm.fma.f32(float %166, float 0x3E54AE0BE0000000,\l... float %172)\l  %174 = fsub float %167, %168\l  %175 = fadd float %173, %174\l  %176 = tail call float @llvm.exp2.f32(float %175)\l  %177 = fptosi float %168 to i32\l  %178 = tail call float @llvm.amdgcn.ldexp.f32(float %176, i32 %177)\l  %179 = select i1 %170, float 0.000000e+00, float %178\l  %180 = select i1 %169, float 0x7FF0000000000000, float %179\l  %181 = fmul contract float %180, %165\l  %182 = fmul contract float %81, %159\l  %183 = fmul float %182, 0x3FF7154760000000\l  %184 = tail call float @llvm.rint.f32(float %183)\l  %185 = fcmp ogt float %182, 0x40562E4300000000\l  %186 = fcmp olt float %182, 0xC059D1DA00000000\l  %187 = fneg float %183\l  %188 = tail call float @llvm.fma.f32(float %182, float 0x3FF7154760000000,\l... float %187)\l  %189 = tail call float @llvm.fma.f32(float %182, float 0x3E54AE0BE0000000,\l... float %188)\l  %190 = fsub float %183, %184\l  %191 = fadd float %189, %190\l  %192 = tail call float @llvm.exp2.f32(float %191)\l  %193 = fptosi float %184 to i32\l  %194 = tail call float @llvm.amdgcn.ldexp.f32(float %192, i32 %193)\l  %195 = select i1 %186, float 0.000000e+00, float %194\l  %196 = select i1 %185, float 0x7FF0000000000000, float %195\l  %197 = fmul contract float %181, %196\l  %198 = fadd contract float %146, %197\l  %199 = uitofp i16 %155 to float\l  %200 = fmul contract float %197, %199\l  %201 = fadd contract float %145, %200\l  %202 = add i32 %147, 1\l  %203 = icmp ugt i32 %202, %77\l  br i1 %203, label %139, label %144, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4880f10:s0 -> Node0x4880250;
	Node0x4880f10:s1 -> Node0x4880f10;
	Node0x48786c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%204:\l204:                                              \l  ret void\l}"];
}
