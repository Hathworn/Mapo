digraph "CFG for '_Z28markValidIndexMapPixelKernelP13__hip_textureijjPh' function" {
	label="CFG for '_Z28markValidIndexMapPixelKernelP13__hip_textureijjPh' function";

	Node0x604afd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %8, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp ult i32 %14, %3\l  %24 = icmp ult i32 %22, %2\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %140\l|{<s0>T|<s1>F}}"];
	Node0x604afd0:s0 -> Node0x604ea30;
	Node0x604afd0:s1 -> Node0x604eac0;
	Node0x604ea30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%26:\l26:                                               \l  %27 = mul i32 %22, %3\l  %28 = add i32 %27, %14\l  %29 = icmp slt i32 %1, 1\l  br i1 %29, label %30, label %73\l|{<s0>T|<s1>F}}"];
	Node0x604ea30:s0 -> Node0x604ede0;
	Node0x604ea30:s1 -> Node0x604ee30;
	Node0x604ede0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%30:\l30:                                               \l  %31 = uitofp i32 %14 to float\l  %32 = uitofp i32 %22 to float\l  %33 = bitcast %struct.__hip_texture addrspace(1)* %0 to i32 addrspace(1)*\l  %34 = addrspacecast i32 addrspace(1)* %33 to i32 addrspace(4)*\l  %35 = getelementptr inbounds i32, i32 addrspace(4)* %34, i64 12\l  %36 = getelementptr inbounds i32, i32 addrspace(4)* %34, i64 10\l  %37 = load i32, i32 addrspace(4)* %36, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %38 = uitofp i32 %37 to float\l  %39 = getelementptr inbounds i32, i32 addrspace(4)* %34, i64 2\l  %40 = load i32, i32 addrspace(4)* %39, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %41 = lshr i32 %40, 14\l  %42 = and i32 %41, 16383\l  %43 = add nuw nsw i32 %42, 1\l  %44 = uitofp i32 %43 to float\l  %45 = load i32, i32 addrspace(4)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %46 = and i32 %45, 32768\l  %47 = icmp eq i32 %46, 0\l  %48 = select i1 %47, float %38, float 1.000000e+00\l  %49 = select i1 %47, float %44, float 1.000000e+00\l  %50 = getelementptr inbounds i32, i32 addrspace(4)* %34, i64 14\l  %51 = load i32, i32 addrspace(4)* %50, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %52 = and i32 %51, 1048576\l  %53 = icmp eq i32 %52, 0\l  %54 = bitcast i32 addrspace(4)* %35 to \<4 x i32\> addrspace(4)*\l  %55 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %54, align 16, !tbaa !11,\l... !amdgpu.noclobber !6\l  %56 = bitcast %struct.__hip_texture addrspace(1)* %0 to \<8 x i32\>\l... addrspace(1)*\l  %57 = addrspacecast \<8 x i32\> addrspace(1)* %56 to \<8 x i32\> addrspace(4)*\l  %58 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %57, align 32, !tbaa !11,\l... !amdgpu.noclobber !6\l  %59 = tail call float @llvm.amdgcn.rcp.f32(float %49)\l  %60 = fmul float %49, %32\l  %61 = tail call float @llvm.floor.f32(float %60)\l  %62 = fmul float %59, %61\l  %63 = select i1 %53, float %62, float %32\l  %64 = tail call float @llvm.amdgcn.rcp.f32(float %48)\l  %65 = fmul float %48, %31\l  %66 = tail call float @llvm.floor.f32(float %65)\l  %67 = fmul float %64, %66\l  %68 = select i1 %53, float %67, float %31\l  %69 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %68, float %63, \<8 x i32\> %58, \<4 x i32\> %55, i1 false, i32 0, i32 0)\l  %70 = bitcast float %69 to i32\l  %71 = icmp ne i32 %70, -1\l  %72 = zext i1 %71 to i8\l  br label %136\l}"];
	Node0x604ede0 -> Node0x6053170;
	Node0x604ee30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%73:\l73:                                               \l  %74 = sub i32 %22, %1\l  %75 = add i32 %22, %1\l  %76 = icmp ugt i32 %74, %75\l  br i1 %76, label %136, label %77\l|{<s0>T|<s1>F}}"];
	Node0x604ee30:s0 -> Node0x6053170;
	Node0x604ee30:s1 -> Node0x6053420;
	Node0x6053420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%77:\l77:                                               \l  %78 = sub i32 %14, %1\l  %79 = add i32 %14, %1\l  %80 = icmp ugt i32 %78, %79\l  %81 = bitcast %struct.__hip_texture addrspace(1)* %0 to i32 addrspace(1)*\l  %82 = addrspacecast i32 addrspace(1)* %81 to i32 addrspace(4)*\l  %83 = getelementptr inbounds i32, i32 addrspace(4)* %82, i64 12\l  %84 = getelementptr inbounds i32, i32 addrspace(4)* %82, i64 10\l  %85 = getelementptr inbounds i32, i32 addrspace(4)* %82, i64 2\l  %86 = getelementptr inbounds i32, i32 addrspace(4)* %82, i64 14\l  %87 = bitcast i32 addrspace(4)* %83 to \<4 x i32\> addrspace(4)*\l  %88 = bitcast %struct.__hip_texture addrspace(1)* %0 to \<8 x i32\>\l... addrspace(1)*\l  %89 = addrspacecast \<8 x i32\> addrspace(1)* %88 to \<8 x i32\> addrspace(4)*\l  br label %90\l}"];
	Node0x6053420 -> Node0x6053b80;
	Node0x6053b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%90:\l90:                                               \l  %91 = phi i32 [ %74, %77 ], [ %120, %118 ]\l  %92 = phi i8 [ 1, %77 ], [ %119, %118 ]\l  br i1 %80, label %118, label %93\l|{<s0>T|<s1>F}}"];
	Node0x6053b80:s0 -> Node0x6053cb0;
	Node0x6053b80:s1 -> Node0x6053f40;
	Node0x6053f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%93:\l93:                                               \l  %94 = uitofp i32 %91 to float\l  %95 = load i32, i32 addrspace(4)* %84, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %96 = uitofp i32 %95 to float\l  %97 = load i32, i32 addrspace(4)* %85, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %98 = lshr i32 %97, 14\l  %99 = and i32 %98, 16383\l  %100 = add nuw nsw i32 %99, 1\l  %101 = uitofp i32 %100 to float\l  %102 = load i32, i32 addrspace(4)* %83, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %103 = and i32 %102, 32768\l  %104 = icmp eq i32 %103, 0\l  %105 = select i1 %104, float %96, float 1.000000e+00\l  %106 = select i1 %104, float %101, float 1.000000e+00\l  %107 = load i32, i32 addrspace(4)* %86, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %108 = and i32 %107, 1048576\l  %109 = icmp eq i32 %108, 0\l  %110 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %87, align 16, !tbaa !11,\l... !amdgpu.noclobber !6\l  %111 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %89, align 32, !tbaa !11,\l... !amdgpu.noclobber !6\l  %112 = tail call float @llvm.amdgcn.rcp.f32(float %106)\l  %113 = fmul float %106, %94\l  %114 = tail call float @llvm.floor.f32(float %113)\l  %115 = fmul float %112, %114\l  %116 = select i1 %109, float %115, float %94\l  %117 = tail call float @llvm.amdgcn.rcp.f32(float %105)\l  br label %122\l}"];
	Node0x6053f40 -> Node0x6055010;
	Node0x6053cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%118:\l118:                                              \l  %119 = phi i8 [ %92, %90 ], [ %133, %122 ]\l  %120 = add i32 %91, 1\l  %121 = icmp ugt i32 %120, %75\l  br i1 %121, label %136, label %90, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x6053cb0:s0 -> Node0x6053170;
	Node0x6053cb0:s1 -> Node0x6053b80;
	Node0x6055010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%122:\l122:                                              \l  %123 = phi i32 [ %78, %93 ], [ %134, %122 ]\l  %124 = phi i8 [ %92, %93 ], [ %133, %122 ]\l  %125 = uitofp i32 %123 to float\l  %126 = fmul float %105, %125\l  %127 = tail call float @llvm.floor.f32(float %126)\l  %128 = fmul float %117, %127\l  %129 = select i1 %109, float %128, float %125\l  %130 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %129, float %116, \<8 x i32\> %111, \<4 x i32\> %110, i1 false, i32 0, i32 0)\l  %131 = bitcast float %130 to i32\l  %132 = icmp eq i32 %131, -1\l  %133 = select i1 %132, i8 0, i8 %124\l  %134 = add i32 %123, 1\l  %135 = icmp ugt i32 %134, %79\l  br i1 %135, label %118, label %122, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x6055010:s0 -> Node0x6053cb0;
	Node0x6055010:s1 -> Node0x6055010;
	Node0x6053170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%136:\l136:                                              \l  %137 = phi i8 [ %72, %30 ], [ 1, %73 ], [ %119, %118 ]\l  %138 = zext i32 %28 to i64\l  %139 = getelementptr inbounds i8, i8 addrspace(1)* %4, i64 %138\l  store i8 %137, i8 addrspace(1)* %139, align 1, !tbaa !15\l  br label %140\l}"];
	Node0x6053170 -> Node0x604eac0;
	Node0x604eac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%140:\l140:                                              \l  ret void\l}"];
}
