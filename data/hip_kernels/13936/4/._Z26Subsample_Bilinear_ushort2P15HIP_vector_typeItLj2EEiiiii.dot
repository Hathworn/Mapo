digraph "CFG for '_Z26Subsample_Bilinear_ushort2P15HIP_vector_typeItLj2EEiiiii' function" {
	label="CFG for '_Z26Subsample_Bilinear_ushort2P15HIP_vector_typeItLj2EEiiiii' function";

	Node0x4633550 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp slt i32 %23, %2\l  %25 = icmp slt i32 %15, %1\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %146\l|{<s0>T|<s1>F}}"];
	Node0x4633550:s0 -> Node0x4636980;
	Node0x4633550:s1 -> Node0x4636a10;
	Node0x4636980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%27:\l27:                                               \l  %28 = sitofp i32 %4 to float\l  %29 = sitofp i32 %1 to float\l  %30 = fdiv contract float %28, %29\l  %31 = sitofp i32 %5 to float\l  %32 = sitofp i32 %2 to float\l  %33 = fdiv contract float %31, %32\l  %34 = sitofp i32 %15 to float\l  %35 = fadd contract float %34, 5.000000e-01\l  %36 = fmul contract float %30, %35\l  %37 = sitofp i32 %23 to float\l  %38 = fadd contract float %37, 5.000000e-01\l  %39 = fmul contract float %33, %38\l  %40 = fadd contract float %30, -1.000000e+00\l  %41 = fmul contract float %40, 5.000000e-01\l  %42 = tail call float @llvm.maxnum.f32(float %41, float 0.000000e+00)\l  %43 = tail call float @llvm.minnum.f32(float %42, float 1.000000e+00)\l  %44 = fadd contract float %33, -1.000000e+00\l  %45 = fmul contract float %44, 5.000000e-01\l  %46 = tail call float @llvm.maxnum.f32(float %45, float 0.000000e+00)\l  %47 = tail call float @llvm.minnum.f32(float %46, float 1.000000e+00)\l  %48 = fadd contract float %43, 5.000000e-01\l  %49 = fdiv contract float %43, %48\l  %50 = fadd contract float %47, 5.000000e-01\l  %51 = fdiv contract float %47, %50\l  %52 = load %struct.__hip_texture*, %struct.__hip_texture* addrspace(1)*\l... getelementptr inbounds (%struct.texture.3, %struct.texture.3 addrspace(1)*\l... @ushort2_tex, i64 0, i32 0, i32 11), align 8\l  %53 = fsub contract float %36, %49\l  %54 = fsub contract float %39, %51\l  %55 = bitcast %struct.__hip_texture* %52 to i32*\l  %56 = addrspacecast i32* %55 to i32 addrspace(4)*\l  %57 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 12\l  %58 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 10\l  %59 = load i32, i32 addrspace(4)* %58, align 4, !tbaa !7\l  %60 = uitofp i32 %59 to float\l  %61 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 2\l  %62 = load i32, i32 addrspace(4)* %61, align 4, !tbaa !7\l  %63 = lshr i32 %62, 14\l  %64 = and i32 %63, 16383\l  %65 = add nuw nsw i32 %64, 1\l  %66 = uitofp i32 %65 to float\l  %67 = load i32, i32 addrspace(4)* %57, align 4, !tbaa !7\l  %68 = and i32 %67, 32768\l  %69 = icmp eq i32 %68, 0\l  %70 = select i1 %69, float %60, float 1.000000e+00\l  %71 = select i1 %69, float %66, float 1.000000e+00\l  %72 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 14\l  %73 = load i32, i32 addrspace(4)* %72, align 4, !tbaa !7\l  %74 = and i32 %73, 1048576\l  %75 = icmp eq i32 %74, 0\l  %76 = bitcast i32 addrspace(4)* %57 to \<4 x i32\> addrspace(4)*\l  %77 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %76, align 16, !tbaa !11\l  %78 = bitcast %struct.__hip_texture* %52 to \<8 x i32\>*\l  %79 = addrspacecast \<8 x i32\>* %78 to \<8 x i32\> addrspace(4)*\l  %80 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %79, align 32, !tbaa !11\l  %81 = tail call float @llvm.amdgcn.rcp.f32(float %71)\l  %82 = fmul float %54, %71\l  %83 = tail call float @llvm.floor.f32(float %82)\l  %84 = fmul float %81, %83\l  %85 = select i1 %75, float %84, float %54\l  %86 = tail call float @llvm.amdgcn.rcp.f32(float %70)\l  %87 = fmul float %53, %70\l  %88 = tail call float @llvm.floor.f32(float %87)\l  %89 = fmul float %86, %88\l  %90 = select i1 %75, float %89, float %53\l  %91 = tail call \<2 x float\> @llvm.amdgcn.image.sample.lz.2d.v2f32.f32(i32 3,\l... float %90, float %85, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32 0)\l  %92 = shufflevector \<2 x float\> %91, \<2 x float\> poison, \<4 x i32\> \<i32 0,\l... i32 1, i32 undef, i32 undef\>\l  %93 = bitcast \<4 x float\> %92 to \<4 x i32\>\l  %94 = extractelement \<4 x i32\> %93, i64 0\l  %95 = extractelement \<4 x i32\> %93, i64 1\l  %96 = and i32 %95, 65535\l  %97 = fadd contract float %49, %36\l  %98 = fmul float %97, %70\l  %99 = tail call float @llvm.floor.f32(float %98)\l  %100 = fmul float %86, %99\l  %101 = select i1 %75, float %100, float %97\l  %102 = tail call \<2 x float\> @llvm.amdgcn.image.sample.lz.2d.v2f32.f32(i32\l... 3, float %101, float %85, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32\l... 0)\l  %103 = shufflevector \<2 x float\> %102, \<2 x float\> poison, \<4 x i32\> \<i32 0,\l... i32 1, i32 undef, i32 undef\>\l  %104 = bitcast \<4 x float\> %103 to \<4 x i32\>\l  %105 = extractelement \<4 x i32\> %104, i64 0\l  %106 = extractelement \<4 x i32\> %104, i64 1\l  %107 = and i32 %106, 65535\l  %108 = fadd contract float %51, %39\l  %109 = fmul float %108, %71\l  %110 = tail call float @llvm.floor.f32(float %109)\l  %111 = fmul float %81, %110\l  %112 = select i1 %75, float %111, float %108\l  %113 = tail call \<2 x float\> @llvm.amdgcn.image.sample.lz.2d.v2f32.f32(i32\l... 3, float %90, float %112, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32\l... 0)\l  %114 = shufflevector \<2 x float\> %113, \<2 x float\> poison, \<4 x i32\> \<i32 0,\l... i32 1, i32 undef, i32 undef\>\l  %115 = bitcast \<4 x float\> %114 to \<4 x i32\>\l  %116 = extractelement \<4 x i32\> %115, i64 0\l  %117 = extractelement \<4 x i32\> %115, i64 1\l  %118 = and i32 %117, 65535\l  %119 = tail call \<2 x float\> @llvm.amdgcn.image.sample.lz.2d.v2f32.f32(i32\l... 3, float %101, float %112, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32\l... 0)\l  %120 = shufflevector \<2 x float\> %119, \<2 x float\> poison, \<4 x i32\> \<i32 0,\l... i32 1, i32 undef, i32 undef\>\l  %121 = bitcast \<4 x float\> %120 to \<4 x i32\>\l  %122 = extractelement \<4 x i32\> %121, i64 0\l  %123 = extractelement \<4 x i32\> %121, i64 1\l  %124 = and i32 %123, 65535\l  %125 = and i32 %94, 65535\l  %126 = and i32 %105, 65535\l  %127 = and i32 %116, 65535\l  %128 = and i32 %122, 65535\l  %129 = add nuw nsw i32 %125, 2\l  %130 = add nuw nsw i32 %129, %126\l  %131 = add nuw nsw i32 %130, %127\l  %132 = add nuw nsw i32 %131, %128\l  %133 = lshr i32 %132, 2\l  %134 = add nuw nsw i32 %107, %96\l  %135 = add nuw nsw i32 %134, %118\l  %136 = add nuw nsw i32 %135, %124\l  %137 = shl nuw i32 %136, 14\l  %138 = add nuw i32 %137, 32768\l  %139 = and i32 %138, -65536\l  %140 = or i32 %139, %133\l  %141 = mul nsw i32 %23, %3\l  %142 = add nsw i32 %141, %15\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %143\l  %145 = bitcast %struct.HIP_vector_type addrspace(1)* %144 to i32\l... addrspace(1)*\l  store i32 %140, i32 addrspace(1)* %145, align 4\l  br label %146\l}"];
	Node0x4636980 -> Node0x4636a10;
	Node0x4636a10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%146:\l146:                                              \l  ret void\l}"];
}
