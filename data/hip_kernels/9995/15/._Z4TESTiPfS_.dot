digraph "CFG for '_Z4TESTiPfS_' function" {
	label="CFG for '_Z4TESTiPfS_' function";

	Node0x64d0c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%3:\l  %4 = icmp sgt i32 %0, 0\l  br i1 %4, label %5, label %25\l|{<s0>T|<s1>F}}"];
	Node0x64d0c80:s0 -> Node0x64d13c0;
	Node0x64d0c80:s1 -> Node0x64d1450;
	Node0x64d13c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%5:\l5:                                                \l  %6 = and i32 %0, 7\l  %7 = icmp ult i32 %0, 8\l  br i1 %7, label %10, label %8\l|{<s0>T|<s1>F}}"];
	Node0x64d13c0:s0 -> Node0x64d16e0;
	Node0x64d13c0:s1 -> Node0x64d1730;
	Node0x64d1730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%8:\l8:                                                \l  %9 = and i32 %0, -8\l  br label %26\l}"];
	Node0x64d1730 -> Node0x64d1370;
	Node0x64d16e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%10:\l10:                                               \l  %11 = phi i32 [ 0, %5 ], [ %84, %26 ]\l  %12 = icmp eq i32 %6, 0\l  br i1 %12, label %25, label %13\l|{<s0>T|<s1>F}}"];
	Node0x64d16e0:s0 -> Node0x64d1450;
	Node0x64d16e0:s1 -> Node0x64d1ba0;
	Node0x64d1ba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%13:\l13:                                               \l  %14 = phi i32 [ %22, %13 ], [ %11, %10 ]\l  %15 = phi i32 [ %23, %13 ], [ 0, %10 ]\l  %16 = zext i32 %14 to i64\l  %17 = getelementptr inbounds float, float addrspace(1)* %1, i64 %16\l  %18 = load float, float addrspace(1)* %17, align 4, !tbaa !4\l  %19 = getelementptr inbounds float, float addrspace(1)* %2, i64 %16\l  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4\l  %21 = fadd contract float %18, %20\l  store float %21, float addrspace(1)* %19, align 4, !tbaa !4\l  %22 = add nuw nsw i32 %14, 1\l  %23 = add i32 %15, 1\l  %24 = icmp eq i32 %23, %6\l  br i1 %24, label %25, label %13, !llvm.loop !8\l|{<s0>T|<s1>F}}"];
	Node0x64d1ba0:s0 -> Node0x64d1450;
	Node0x64d1ba0:s1 -> Node0x64d1ba0;
	Node0x64d1450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%25:\l25:                                               \l  ret void\l}"];
	Node0x64d1370 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%26:\l26:                                               \l  %27 = phi i32 [ 0, %8 ], [ %84, %26 ]\l  %28 = phi i32 [ 0, %8 ], [ %85, %26 ]\l  %29 = zext i32 %27 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !4\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %29\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !4\l  %34 = fadd contract float %31, %33\l  store float %34, float addrspace(1)* %32, align 4, !tbaa !4\l  %35 = or i32 %27, 1\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4\l  %39 = getelementptr inbounds float, float addrspace(1)* %2, i64 %36\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !4\l  %41 = fadd contract float %38, %40\l  store float %41, float addrspace(1)* %39, align 4, !tbaa !4\l  %42 = or i32 %27, 2\l  %43 = zext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !4\l  %46 = getelementptr inbounds float, float addrspace(1)* %2, i64 %43\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4\l  %48 = fadd contract float %45, %47\l  store float %48, float addrspace(1)* %46, align 4, !tbaa !4\l  %49 = or i32 %27, 3\l  %50 = zext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !4\l  %53 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !4\l  %55 = fadd contract float %52, %54\l  store float %55, float addrspace(1)* %53, align 4, !tbaa !4\l  %56 = or i32 %27, 4\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !4\l  %60 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !4\l  %62 = fadd contract float %59, %61\l  store float %62, float addrspace(1)* %60, align 4, !tbaa !4\l  %63 = or i32 %27, 5\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !4\l  %67 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !4\l  %69 = fadd contract float %66, %68\l  store float %69, float addrspace(1)* %67, align 4, !tbaa !4\l  %70 = or i32 %27, 6\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !4\l  %74 = getelementptr inbounds float, float addrspace(1)* %2, i64 %71\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !4\l  %76 = fadd contract float %73, %75\l  store float %76, float addrspace(1)* %74, align 4, !tbaa !4\l  %77 = or i32 %27, 7\l  %78 = zext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !4\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %78\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !4\l  %83 = fadd contract float %80, %82\l  store float %83, float addrspace(1)* %81, align 4, !tbaa !4\l  %84 = add nuw nsw i32 %27, 8\l  %85 = add i32 %28, 8\l  %86 = icmp eq i32 %85, %9\l  br i1 %86, label %10, label %26, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x64d1370:s0 -> Node0x64d16e0;
	Node0x64d1370:s1 -> Node0x64d1370;
}
