digraph "CFG for '_Z18bit_to_pauli_basisPdjj' function" {
	label="CFG for '_Z18bit_to_pauli_basisPdjj' function";

	Node0x4ed6a80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 2, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %13, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %20 = add i32 %18, %19\l  %21 = shl nuw i32 1, %2\l  %22 = icmp slt i32 %12, %21\l  %23 = icmp slt i32 %20, %21\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %74\l|{<s0>T|<s1>F}}"];
	Node0x4ed6a80:s0 -> Node0x4eda5c0;
	Node0x4ed6a80:s1 -> Node0x4eda650;
	Node0x4eda5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%25:\l25:                                               \l  %26 = or i32 %12, %1\l  %27 = shl i32 %26, %2\l  %28 = xor i32 %1, -1\l  %29 = and i32 %20, %28\l  %30 = or i32 %27, %29\l  %31 = shl i32 %30, 1\l  %32 = and i32 %12, %28\l  %33 = shl i32 %32, %2\l  %34 = or i32 %20, %1\l  %35 = or i32 %34, %33\l  %36 = shl i32 %35, 1\l  %37 = and i32 %12, %1\l  %38 = icmp eq i32 %37, 0\l  br i1 %38, label %54, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4eda5c0:s0 -> Node0x4ed99a0;
	Node0x4eda5c0:s1 -> Node0x4edb090;
	Node0x4edb090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%39:\l39:                                               \l  %40 = xor i32 %20, -1\l  %41 = and i32 %40, %1\l  %42 = icmp eq i32 %41, 0\l  br i1 %42, label %54, label %43\l|{<s0>T|<s1>F}}"];
	Node0x4edb090:s0 -> Node0x4ed99a0;
	Node0x4edb090:s1 -> Node0x4edb380;
	Node0x4edb380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%43:\l43:                                               \l  %44 = sext i32 %31 to i64\l  %45 = getelementptr inbounds double, double addrspace(1)* %0, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = sext i32 %36 to i64\l  %48 = getelementptr inbounds double, double addrspace(1)* %0, i64 %47\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %50 = fadd contract double %46, %49\l  %51 = fmul contract double %50, 0x3FE6A09E667F3BCD\l  store double %51, double addrspace(1)* %45, align 8, !tbaa !7\l  %52 = fsub contract double %46, %49\l  %53 = fmul contract double %52, 0x3FE6A09E667F3BCD\l  store double %53, double addrspace(1)* %48, align 8, !tbaa !7\l  br label %54\l}"];
	Node0x4edb380 -> Node0x4ed99a0;
	Node0x4ed99a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%54:\l54:                                               \l  %55 = xor i32 %12, -1\l  %56 = and i32 %55, %1\l  %57 = icmp eq i32 %56, 0\l  %58 = and i32 %20, %1\l  %59 = icmp eq i32 %58, 0\l  %60 = select i1 %57, i1 true, i1 %59\l  br i1 %60, label %74, label %61\l|{<s0>T|<s1>F}}"];
	Node0x4ed99a0:s0 -> Node0x4eda650;
	Node0x4ed99a0:s1 -> Node0x4edd120;
	Node0x4edd120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%61:\l61:                                               \l  %62 = add nuw nsw i32 %31, 1\l  %63 = add nuw nsw i32 %36, 1\l  %64 = sext i32 %62 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %0, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !7\l  %67 = sext i32 %63 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %0, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !7\l  %70 = fadd contract double %66, %69\l  %71 = fmul contract double %70, 0x3FE6A09E667F3BCD\l  store double %71, double addrspace(1)* %65, align 8, !tbaa !7\l  %72 = fsub contract double %66, %69\l  %73 = fmul contract double %72, 0x3FE6A09E667F3BCD\l  store double %73, double addrspace(1)* %68, align 8, !tbaa !7\l  br label %74\l}"];
	Node0x4edd120 -> Node0x4eda650;
	Node0x4eda650 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%74:\l74:                                               \l  ret void\l}"];
}
