digraph "CFG for '_Z9sobelCudaPhS_ii' function" {
	label="CFG for '_Z9sobelCudaPhS_ii' function";

	Node0x4a941f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = add i32 %12, %5\l  %14 = freeze i32 %13\l  %15 = freeze i32 %2\l  %16 = sdiv i32 %14, %15\l  %17 = mul i32 %16, %15\l  %18 = sub i32 %14, %17\l  %19 = icmp slt i32 %18, 1\l  br i1 %19, label %120, label %20\l|{<s0>T|<s1>F}}"];
	Node0x4a941f0:s0 -> Node0x4a94240;
	Node0x4a941f0:s1 -> Node0x4a96490;
	Node0x4a96490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e36c5570",label="{%20:\l20:                                               \l  %21 = add nsw i32 %2, -1\l  %22 = icmp slt i32 %18, %21\l  %23 = icmp sgt i32 %16, 0\l  %24 = and i1 %23, %22\l  %25 = add nsw i32 %3, -1\l  %26 = icmp slt i32 %16, %25\l  %27 = select i1 %24, i1 %26, i1 false\l  br i1 %27, label %28, label %120\l|{<s0>T|<s1>F}}"];
	Node0x4a96490:s0 -> Node0x4a96a70;
	Node0x4a96490:s1 -> Node0x4a94240;
	Node0x4a96a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%28:\l28:                                               \l  %29 = add nsw i32 %18, -1\l  %30 = add nsw i32 %16, -1\l  %31 = mul nsw i32 %30, %2\l  %32 = add nsw i32 %29, %31\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %33\l  %35 = load i8, i8 addrspace(1)* %34, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %36 = zext i8 %35 to i32\l  %37 = add nsw i32 %31, %18\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %38\l  %40 = load i8, i8 addrspace(1)* %39, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %41 = zext i8 %40 to i32\l  %42 = add nuw nsw i32 %18, 1\l  %43 = add nsw i32 %42, %31\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %44\l  %46 = load i8, i8 addrspace(1)* %45, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %47 = zext i8 %46 to i32\l  %48 = add nuw nsw i32 %16, 1\l  %49 = mul nsw i32 %48, %2\l  %50 = add nsw i32 %29, %49\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %51\l  %53 = load i8, i8 addrspace(1)* %52, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %54 = zext i8 %53 to i32\l  %55 = add nsw i32 %49, %18\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %56\l  %58 = load i8, i8 addrspace(1)* %57, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %59 = zext i8 %58 to i32\l  %60 = add nsw i32 %42, %49\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %61\l  %63 = load i8, i8 addrspace(1)* %62, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %64 = zext i8 %63 to i32\l  %65 = sub nsw i32 %59, %41\l  %66 = shl nsw i32 %65, 1\l  %67 = add nuw nsw i32 %47, %36\l  %68 = sub nsw i32 %54, %67\l  %69 = add nsw i32 %68, %64\l  %70 = add nsw i32 %69, %66\l  %71 = mul nsw i32 %16, %2\l  %72 = add nsw i32 %29, %71\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %73\l  %75 = load i8, i8 addrspace(1)* %74, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %76 = zext i8 %75 to i32\l  %77 = add nsw i32 %42, %71\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %78\l  %80 = load i8, i8 addrspace(1)* %79, align 1, !tbaa !7, !amdgpu.noclobber !6\l  %81 = zext i8 %80 to i32\l  %82 = sub nsw i32 %81, %76\l  %83 = shl nsw i32 %82, 1\l  %84 = add nuw nsw i32 %36, %54\l  %85 = sub nsw i32 %47, %84\l  %86 = add nsw i32 %85, %64\l  %87 = add nsw i32 %86, %83\l  %88 = mul nsw i32 %70, %70\l  %89 = sitofp i32 %88 to float\l  %90 = mul nsw i32 %87, %87\l  %91 = sitofp i32 %90 to float\l  %92 = fadd contract float %89, %91\l  %93 = fcmp olt float %92, 0x39F0000000000000\l  %94 = select i1 %93, float 0x41F0000000000000, float 1.000000e+00\l  %95 = fmul float %92, %94\l  %96 = tail call float @llvm.sqrt.f32(float %95)\l  %97 = bitcast float %96 to i32\l  %98 = add nsw i32 %97, -1\l  %99 = bitcast i32 %98 to float\l  %100 = add nsw i32 %97, 1\l  %101 = bitcast i32 %100 to float\l  %102 = tail call i1 @llvm.amdgcn.class.f32(float %95, i32 608)\l  %103 = select i1 %93, float 0x3EF0000000000000, float 1.000000e+00\l  %104 = fneg float %101\l  %105 = tail call float @llvm.fma.f32(float %104, float %96, float %95)\l  %106 = fcmp ogt float %105, 0.000000e+00\l  %107 = fneg float %99\l  %108 = tail call float @llvm.fma.f32(float %107, float %96, float %95)\l  %109 = fcmp ole float %108, 0.000000e+00\l  %110 = select i1 %109, float %99, float %96\l  %111 = select i1 %106, float %101, float %110\l  %112 = fmul float %103, %111\l  %113 = select i1 %102, float %95, float %112\l  %114 = fpext float %113 to double\l  %115 = tail call double @llvm.minnum.f64(double %114, double 2.550000e+02)\l  %116 = fptoui double %115 to i8\l  %117 = add nsw i32 %18, %71\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %118\l  store i8 %116, i8 addrspace(1)* %119, align 1, !tbaa !7\l  br label %120\l}"];
	Node0x4a96a70 -> Node0x4a94240;
	Node0x4a94240 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%120:\l120:                                              \l  ret void\l}"];
}
