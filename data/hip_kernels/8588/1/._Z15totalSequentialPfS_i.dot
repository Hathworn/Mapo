digraph "CFG for '_Z15totalSequentialPfS_i' function" {
	label="CFG for '_Z15totalSequentialPfS_i' function";

	Node0x643e010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = icmp eq i32 %4, 0\l  br i1 %12, label %13, label %112\l|{<s0>T|<s1>F}}"];
	Node0x643e010:s0 -> Node0x643eda0;
	Node0x643e010:s1 -> Node0x643ff10;
	Node0x643eda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%13:\l13:                                               \l  %14 = and i32 %10, 7\l  %15 = icmp ult i16 %9, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x643eda0:s0 -> Node0x64401d0;
	Node0x643eda0:s1 -> Node0x6440220;
	Node0x6440220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%16:\l16:                                               \l  %17 = and i32 %10, 2040\l  br label %42\l}"];
	Node0x6440220 -> Node0x643f950;
	Node0x64401d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = phi i32 [ undef, %13 ], [ %108, %42 ]\l  %20 = phi i32 [ 0, %13 ], [ %109, %42 ]\l  %21 = phi i32 [ 0, %13 ], [ %108, %42 ]\l  %22 = icmp eq i32 %14, 0\l  br i1 %22, label %37, label %23\l|{<s0>T|<s1>F}}"];
	Node0x64401d0:s0 -> Node0x6440cd0;
	Node0x64401d0:s1 -> Node0x6440d60;
	Node0x6440d60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i32 [ %34, %23 ], [ %20, %18 ]\l  %25 = phi i32 [ %33, %23 ], [ %21, %18 ]\l  %26 = phi i32 [ %35, %23 ], [ 0, %18 ]\l  %27 = add i32 %24, %11\l  %28 = zext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %31 = sitofp i32 %25 to float\l  %32 = fadd contract float %30, %31\l  %33 = fptosi float %32 to i32\l  %34 = add nuw nsw i32 %24, 1\l  %35 = add i32 %26, 1\l  %36 = icmp eq i32 %35, %14\l  br i1 %36, label %37, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x6440d60:s0 -> Node0x6440cd0;
	Node0x6440d60:s1 -> Node0x6440d60;
	Node0x6440cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = phi i32 [ %19, %18 ], [ %33, %23 ]\l  %39 = sitofp i32 %38 to float\l  %40 = zext i32 %5 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40\l  store float %39, float addrspace(1)* %41, align 4, !tbaa !7\l  br label %112\l}"];
	Node0x6440cd0 -> Node0x643ff10;
	Node0x643f950 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%42:\l42:                                               \l  %43 = phi i32 [ 0, %16 ], [ %109, %42 ]\l  %44 = phi i32 [ 0, %16 ], [ %108, %42 ]\l  %45 = phi i32 [ 0, %16 ], [ %110, %42 ]\l  %46 = add i32 %43, %11\l  %47 = zext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %50 = sitofp i32 %44 to float\l  %51 = fadd contract float %49, %50\l  %52 = fptosi float %51 to i32\l  %53 = or i32 %43, 1\l  %54 = add i32 %53, %11\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %58 = sitofp i32 %52 to float\l  %59 = fadd contract float %57, %58\l  %60 = fptosi float %59 to i32\l  %61 = or i32 %43, 2\l  %62 = add i32 %61, %11\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %66 = sitofp i32 %60 to float\l  %67 = fadd contract float %65, %66\l  %68 = fptosi float %67 to i32\l  %69 = or i32 %43, 3\l  %70 = add i32 %69, %11\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %74 = sitofp i32 %68 to float\l  %75 = fadd contract float %73, %74\l  %76 = fptosi float %75 to i32\l  %77 = or i32 %43, 4\l  %78 = add i32 %77, %11\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %82 = sitofp i32 %76 to float\l  %83 = fadd contract float %81, %82\l  %84 = fptosi float %83 to i32\l  %85 = or i32 %43, 5\l  %86 = add i32 %85, %11\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %90 = sitofp i32 %84 to float\l  %91 = fadd contract float %89, %90\l  %92 = fptosi float %91 to i32\l  %93 = or i32 %43, 6\l  %94 = add i32 %93, %11\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %98 = sitofp i32 %92 to float\l  %99 = fadd contract float %97, %98\l  %100 = fptosi float %99 to i32\l  %101 = or i32 %43, 7\l  %102 = add i32 %101, %11\l  %103 = zext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %106 = sitofp i32 %100 to float\l  %107 = fadd contract float %105, %106\l  %108 = fptosi float %107 to i32\l  %109 = add nuw nsw i32 %43, 8\l  %110 = add i32 %45, 8\l  %111 = icmp eq i32 %110, %17\l  br i1 %111, label %18, label %42, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x643f950:s0 -> Node0x64401d0;
	Node0x643f950:s1 -> Node0x643f950;
	Node0x643ff10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%112:\l112:                                              \l  ret void\l}"];
}
