digraph "CFG for '_Z15matrixMultiply1PfS_i' function" {
	label="CFG for '_Z15matrixMultiply1PfS_i' function";

	Node0x64f4ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = getelementptr i8, i8 addrspace(4)* %4, i64 6\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 2, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %5, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %12 = add i32 %10, %11\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %13, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = add i32 %18, %19\l  %21 = icmp sgt i32 %2, 0\l  br i1 %21, label %22, label %54\l|{<s0>T|<s1>F}}"];
	Node0x64f4ae0:s0 -> Node0x64f8450;
	Node0x64f4ae0:s1 -> Node0x64f84e0;
	Node0x64f8450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = mul nsw i32 %20, %2\l  %24 = add nsw i32 %23, %12\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %1, i64 %25\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !7\l  %28 = and i32 %2, 7\l  %29 = icmp ult i32 %2, 8\l  br i1 %29, label %32, label %30\l|{<s0>T|<s1>F}}"];
	Node0x64f8450:s0 -> Node0x64f8b40;
	Node0x64f8450:s1 -> Node0x64f8bd0;
	Node0x64f8bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%30:\l30:                                               \l  %31 = and i32 %2, -8\l  br label %55\l}"];
	Node0x64f8bd0 -> Node0x64f8dd0;
	Node0x64f8b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%32:\l32:                                               \l  %33 = phi float [ %27, %22 ], [ %153, %55 ]\l  %34 = phi i32 [ 0, %22 ], [ %154, %55 ]\l  %35 = icmp eq i32 %28, 0\l  br i1 %35, label %54, label %36\l|{<s0>T|<s1>F}}"];
	Node0x64f8b40:s0 -> Node0x64f84e0;
	Node0x64f8b40:s1 -> Node0x64f9220;
	Node0x64f9220 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi float [ %50, %36 ], [ %33, %32 ]\l  %38 = phi i32 [ %51, %36 ], [ %34, %32 ]\l  %39 = phi i32 [ %52, %36 ], [ 0, %32 ]\l  %40 = mul nsw i32 %38, %2\l  %41 = add nsw i32 %40, %20\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = add nsw i32 %40, %12\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7\l  %49 = fmul contract float %44, %48\l  %50 = fadd contract float %37, %49\l  store float %50, float addrspace(1)* %26, align 4, !tbaa !7\l  %51 = add nuw nsw i32 %38, 1\l  %52 = add i32 %39, 1\l  %53 = icmp eq i32 %52, %28\l  br i1 %53, label %54, label %36, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x64f9220:s0 -> Node0x64f84e0;
	Node0x64f9220:s1 -> Node0x64f9220;
	Node0x64f84e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%54:\l54:                                               \l  ret void\l}"];
	Node0x64f8dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%55:\l55:                                               \l  %56 = phi float [ %27, %30 ], [ %153, %55 ]\l  %57 = phi i32 [ 0, %30 ], [ %154, %55 ]\l  %58 = phi i32 [ 0, %30 ], [ %155, %55 ]\l  %59 = mul nsw i32 %57, %2\l  %60 = add nsw i32 %59, %20\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7\l  %64 = add nsw i32 %59, %12\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7\l  %68 = fmul contract float %63, %67\l  %69 = fadd contract float %56, %68\l  store float %69, float addrspace(1)* %26, align 4, !tbaa !7\l  %70 = or i32 %57, 1\l  %71 = mul nsw i32 %70, %2\l  %72 = add nsw i32 %71, %20\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7\l  %76 = add nsw i32 %71, %12\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7\l  %80 = fmul contract float %75, %79\l  %81 = fadd contract float %69, %80\l  store float %81, float addrspace(1)* %26, align 4, !tbaa !7\l  %82 = or i32 %57, 2\l  %83 = mul nsw i32 %82, %2\l  %84 = add nsw i32 %83, %20\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7\l  %88 = add nsw i32 %83, %12\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7\l  %92 = fmul contract float %87, %91\l  %93 = fadd contract float %81, %92\l  store float %93, float addrspace(1)* %26, align 4, !tbaa !7\l  %94 = or i32 %57, 3\l  %95 = mul nsw i32 %94, %2\l  %96 = add nsw i32 %95, %20\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7\l  %100 = add nsw i32 %95, %12\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7\l  %104 = fmul contract float %99, %103\l  %105 = fadd contract float %93, %104\l  store float %105, float addrspace(1)* %26, align 4, !tbaa !7\l  %106 = or i32 %57, 4\l  %107 = mul nsw i32 %106, %2\l  %108 = add nsw i32 %107, %20\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %0, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7\l  %112 = add nsw i32 %107, %12\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7\l  %116 = fmul contract float %111, %115\l  %117 = fadd contract float %105, %116\l  store float %117, float addrspace(1)* %26, align 4, !tbaa !7\l  %118 = or i32 %57, 5\l  %119 = mul nsw i32 %118, %2\l  %120 = add nsw i32 %119, %20\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7\l  %124 = add nsw i32 %119, %12\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7\l  %128 = fmul contract float %123, %127\l  %129 = fadd contract float %117, %128\l  store float %129, float addrspace(1)* %26, align 4, !tbaa !7\l  %130 = or i32 %57, 6\l  %131 = mul nsw i32 %130, %2\l  %132 = add nsw i32 %131, %20\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %0, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7\l  %136 = add nsw i32 %131, %12\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7\l  %140 = fmul contract float %135, %139\l  %141 = fadd contract float %129, %140\l  store float %141, float addrspace(1)* %26, align 4, !tbaa !7\l  %142 = or i32 %57, 7\l  %143 = mul nsw i32 %142, %2\l  %144 = add nsw i32 %143, %20\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7\l  %148 = add nsw i32 %143, %12\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %0, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7\l  %152 = fmul contract float %147, %151\l  %153 = fadd contract float %141, %152\l  store float %153, float addrspace(1)* %26, align 4, !tbaa !7\l  %154 = add nuw nsw i32 %57, 8\l  %155 = add i32 %58, 8\l  %156 = icmp eq i32 %155, %31\l  br i1 %156, label %32, label %55, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x64f8dd0:s0 -> Node0x64f8b40;
	Node0x64f8dd0:s1 -> Node0x64f8dd0;
}
