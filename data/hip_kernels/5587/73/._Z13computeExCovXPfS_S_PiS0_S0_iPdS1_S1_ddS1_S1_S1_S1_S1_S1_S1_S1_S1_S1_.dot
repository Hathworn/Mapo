digraph "CFG for '_Z13computeExCovXPfS_S_PiS0_S0_iPdS1_S1_ddS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_' function" {
	label="CFG for '_Z13computeExCovXPfS_S_PiS0_S0_iPdS1_S1_ddS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_' function";

	Node0x48cd530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%22:\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 4, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = getelementptr inbounds i8, i8 addrspace(4)* %25, i64 12\l  %31 = bitcast i8 addrspace(4)* %30 to i32 addrspace(4)*\l  %32 = load i32, i32 addrspace(4)* %31, align 4, !tbaa !7\l  %33 = mul i32 %24, %29\l  %34 = add i32 %33, %23\l  %35 = udiv i32 %32, %29\l  %36 = mul i32 %35, %29\l  %37 = icmp ugt i32 %32, %36\l  %38 = zext i1 %37 to i32\l  %39 = add i32 %35, %38\l  %40 = mul i32 %39, %29\l  %41 = icmp slt i32 %34, %6\l  br i1 %41, label %42, label %44\l|{<s0>T|<s1>F}}"];
	Node0x48cd530:s0 -> Node0x48d0ad0;
	Node0x48cd530:s1 -> Node0x48d0b60;
	Node0x48d0ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%42:\l42:                                               \l  %43 = fneg contract double %11\l  br label %45\l}"];
	Node0x48d0ad0 -> Node0x48d0d10;
	Node0x48d0b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%44:\l44:                                               \l  ret void\l}"];
	Node0x48d0d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%45:\l45:                                               \l  %46 = phi i32 [ %34, %42 ], [ %68, %67 ]\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %47\l  %49 = load i32, i32 addrspace(1)* %48, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %53 = fpext float %52 to double\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %56 = fpext float %55 to double\l  %57 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %59 = fpext float %58 to double\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %47\l  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %62 = add nsw i32 %46, 1\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %63\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %66 = icmp slt i32 %61, %65\l  br i1 %66, label %70, label %67\l|{<s0>T|<s1>F}}"];
	Node0x48d0d10:s0 -> Node0x48d0640;
	Node0x48d0d10:s1 -> Node0x48d0e20;
	Node0x48d0e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%67:\l67:                                               \l  %68 = add nsw i32 %46, %40\l  %69 = icmp slt i32 %68, %6\l  br i1 %69, label %45, label %44, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x48d0e20:s0 -> Node0x48d0d10;
	Node0x48d0e20:s1 -> Node0x48d0b60;
	Node0x48d0640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  %71 = phi i32 [ %148, %70 ], [ %61, %45 ]\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %72\l  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %7, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !24\l  %78 = fsub contract double %53, %77\l  %79 = getelementptr inbounds double, double addrspace(1)* %8, i64 %75\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !24\l  %81 = fsub contract double %56, %80\l  %82 = getelementptr inbounds double, double addrspace(1)* %9, i64 %75\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !24\l  %84 = fsub contract double %59, %83\l  %85 = getelementptr inbounds double, double addrspace(1)* %13, i64 %75\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !24\l  %87 = fmul contract double %78, %86\l  %88 = getelementptr inbounds double, double addrspace(1)* %14, i64 %75\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !24\l  %90 = fmul contract double %81, %89\l  %91 = fadd contract double %87, %90\l  %92 = getelementptr inbounds double, double addrspace(1)* %15, i64 %75\l  %93 = load double, double addrspace(1)* %92, align 8, !tbaa !24\l  %94 = fmul contract double %84, %93\l  %95 = fadd contract double %91, %94\l  %96 = fmul contract double %78, %95\l  %97 = getelementptr inbounds double, double addrspace(1)* %16, i64 %75\l  %98 = load double, double addrspace(1)* %97, align 8, !tbaa !24\l  %99 = fmul contract double %78, %98\l  %100 = getelementptr inbounds double, double addrspace(1)* %17, i64 %75\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !24\l  %102 = fmul contract double %81, %101\l  %103 = fadd contract double %99, %102\l  %104 = getelementptr inbounds double, double addrspace(1)* %18, i64 %75\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !24\l  %106 = fmul contract double %84, %105\l  %107 = fadd contract double %103, %106\l  %108 = fmul contract double %81, %107\l  %109 = fadd contract double %96, %108\l  %110 = getelementptr inbounds double, double addrspace(1)* %19, i64 %75\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !24\l  %112 = fmul contract double %78, %111\l  %113 = getelementptr inbounds double, double addrspace(1)* %20, i64 %75\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !24\l  %115 = fmul contract double %81, %114\l  %116 = fadd contract double %112, %115\l  %117 = getelementptr inbounds double, double addrspace(1)* %21, i64 %75\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !24\l  %119 = fmul contract double %84, %118\l  %120 = fadd contract double %116, %119\l  %121 = fmul contract double %84, %120\l  %122 = fadd contract double %109, %121\l  %123 = fmul contract double %122, %43\l  %124 = fmul contract double %123, 5.000000e-01\l  %125 = fmul double %124, 0x3FF71547652B82FE\l  %126 = tail call double @llvm.rint.f64(double %125)\l  %127 = fneg double %126\l  %128 = tail call double @llvm.fma.f64(double %127, double\l... 0x3FE62E42FEFA39EF, double %124)\l  %129 = tail call double @llvm.fma.f64(double %127, double\l... 0x3C7ABC9E3B39803F, double %128)\l  %130 = tail call double @llvm.fma.f64(double %129, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %131 = tail call double @llvm.fma.f64(double %129, double %130, double\l... 0x3EC71DEE623FDE64)\l  %132 = tail call double @llvm.fma.f64(double %129, double %131, double\l... 0x3EFA01997C89E6B0)\l  %133 = tail call double @llvm.fma.f64(double %129, double %132, double\l... 0x3F2A01A014761F6E)\l  %134 = tail call double @llvm.fma.f64(double %129, double %133, double\l... 0x3F56C16C1852B7B0)\l  %135 = tail call double @llvm.fma.f64(double %129, double %134, double\l... 0x3F81111111122322)\l  %136 = tail call double @llvm.fma.f64(double %129, double %135, double\l... 0x3FA55555555502A1)\l  %137 = tail call double @llvm.fma.f64(double %129, double %136, double\l... 0x3FC5555555555511)\l  %138 = tail call double @llvm.fma.f64(double %129, double %137, double\l... 0x3FE000000000000B)\l  %139 = tail call double @llvm.fma.f64(double %129, double %138, double\l... 1.000000e+00)\l  %140 = tail call double @llvm.fma.f64(double %129, double %139, double\l... 1.000000e+00)\l  %141 = fptosi double %126 to i32\l  %142 = tail call double @llvm.amdgcn.ldexp.f64(double %140, i32 %141)\l  %143 = fcmp ogt double %124, 1.024000e+03\l  %144 = select i1 %143, double 0x7FF0000000000000, double %142\l  %145 = fcmp olt double %124, -1.075000e+03\l  %146 = select i1 %145, double 0.000000e+00, double %144\l  %147 = getelementptr inbounds double, double addrspace(1)* %12, i64 %72\l  store double %146, double addrspace(1)* %147, align 8, !tbaa !24\l  %148 = add nsw i32 %71, 1\l  %149 = icmp slt i32 %148, %65\l  br i1 %149, label %70, label %67, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x48d0640:s0 -> Node0x48d0640;
	Node0x48d0640:s1 -> Node0x48d0e20;
}
