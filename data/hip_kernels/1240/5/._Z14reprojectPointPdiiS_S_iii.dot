digraph "CFG for '_Z14reprojectPointPdiiS_S_iii' function" {
	label="CFG for '_Z14reprojectPointPdiiS_S_iii' function";

	Node0x64ed5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !6\l  %18 = mul i32 %9, %14\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %20 = add i32 %18, %19\l  %21 = udiv i32 %17, %14\l  %22 = mul i32 %21, %14\l  %23 = icmp ugt i32 %17, %22\l  %24 = zext i1 %23 to i32\l  %25 = add i32 %21, %24\l  %26 = mul i32 %25, %14\l  %27 = sub nsw i32 %1, %2\l  %28 = icmp slt i32 %20, %27\l  br i1 %28, label %29, label %36\l|{<s0>T|<s1>F}}"];
	Node0x64ed5e0:s0 -> Node0x64efbf0;
	Node0x64ed5e0:s1 -> Node0x64efc80;
	Node0x64efbf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %7, %1\l  %31 = icmp sgt i32 %1, 0\l  %32 = and i32 %1, 3\l  %33 = icmp ult i32 %1, 4\l  %34 = and i32 %1, -4\l  %35 = icmp eq i32 %32, 0\l  br label %37\l}"];
	Node0x64efbf0 -> Node0x64f02d0;
	Node0x64efc80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%36:\l36:                                               \l  ret void\l}"];
	Node0x64f02d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%37:\l37:                                               \l  %38 = phi i32 [ %20, %29 ], [ %66, %65 ]\l  %39 = add nsw i32 %38, %30\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds double, double addrspace(1)* %3, i64 %40\l  store double 0.000000e+00, double addrspace(1)* %41, align 8, !tbaa !16\l  br i1 %31, label %42, label %65\l|{<s0>T|<s1>F}}"];
	Node0x64f02d0:s0 -> Node0x64f1300;
	Node0x64f02d0:s1 -> Node0x64f0410;
	Node0x64f1300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%42:\l42:                                               \l  %43 = mul nsw i32 %38, %1\l  br i1 %33, label %44, label %68\l|{<s0>T|<s1>F}}"];
	Node0x64f1300:s0 -> Node0x64f14d0;
	Node0x64f1300:s1 -> Node0x64f1520;
	Node0x64f14d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = phi double [ 0.000000e+00, %42 ], [ %118, %68 ]\l  %46 = phi i32 [ 0, %42 ], [ %119, %68 ]\l  br i1 %35, label %65, label %47\l|{<s0>T|<s1>F}}"];
	Node0x64f14d0:s0 -> Node0x64f0410;
	Node0x64f14d0:s1 -> Node0x64f1830;
	Node0x64f1830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi double [ %61, %47 ], [ %45, %44 ]\l  %49 = phi i32 [ %62, %47 ], [ %46, %44 ]\l  %50 = phi i32 [ %63, %47 ], [ 0, %44 ]\l  %51 = add nsw i32 %49, %43\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %0, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !16\l  %55 = mul nsw i32 %49, %5\l  %56 = add nsw i32 %55, %6\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %4, i64 %57\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !16\l  %60 = fmul contract double %54, %59\l  %61 = fadd contract double %48, %60\l  store double %61, double addrspace(1)* %41, align 8, !tbaa !16\l  %62 = add nuw nsw i32 %49, 1\l  %63 = add i32 %50, 1\l  %64 = icmp eq i32 %63, %32\l  br i1 %64, label %65, label %47, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x64f1830:s0 -> Node0x64f0410;
	Node0x64f1830:s1 -> Node0x64f1830;
	Node0x64f0410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%65:\l65:                                               \l  %66 = add nsw i32 %38, %26\l  %67 = icmp slt i32 %66, %27\l  br i1 %67, label %37, label %36, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x64f0410:s0 -> Node0x64f02d0;
	Node0x64f0410:s1 -> Node0x64efc80;
	Node0x64f1520 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%68:\l68:                                               \l  %69 = phi double [ %118, %68 ], [ 0.000000e+00, %42 ]\l  %70 = phi i32 [ %119, %68 ], [ 0, %42 ]\l  %71 = phi i32 [ %120, %68 ], [ 0, %42 ]\l  %72 = add nsw i32 %70, %43\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %0, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !16\l  %76 = mul nsw i32 %70, %5\l  %77 = add nsw i32 %76, %6\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %4, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !16\l  %81 = fmul contract double %75, %80\l  %82 = fadd contract double %69, %81\l  store double %82, double addrspace(1)* %41, align 8, !tbaa !16\l  %83 = or i32 %70, 1\l  %84 = add nsw i32 %83, %43\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds double, double addrspace(1)* %0, i64 %85\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !16\l  %88 = mul nsw i32 %83, %5\l  %89 = add nsw i32 %88, %6\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %4, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %93 = fmul contract double %87, %92\l  %94 = fadd contract double %82, %93\l  store double %94, double addrspace(1)* %41, align 8, !tbaa !16\l  %95 = or i32 %70, 2\l  %96 = add nsw i32 %95, %43\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %0, i64 %97\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !16\l  %100 = mul nsw i32 %95, %5\l  %101 = add nsw i32 %100, %6\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %4, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !16\l  %105 = fmul contract double %99, %104\l  %106 = fadd contract double %94, %105\l  store double %106, double addrspace(1)* %41, align 8, !tbaa !16\l  %107 = or i32 %70, 3\l  %108 = add nsw i32 %107, %43\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds double, double addrspace(1)* %0, i64 %109\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !16\l  %112 = mul nsw i32 %107, %5\l  %113 = add nsw i32 %112, %6\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %4, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !16\l  %117 = fmul contract double %111, %116\l  %118 = fadd contract double %106, %117\l  store double %118, double addrspace(1)* %41, align 8, !tbaa !16\l  %119 = add nuw nsw i32 %70, 4\l  %120 = add i32 %71, 4\l  %121 = icmp eq i32 %120, %34\l  br i1 %121, label %44, label %68, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x64f1520:s0 -> Node0x64f14d0;
	Node0x64f1520:s1 -> Node0x64f1520;
}
