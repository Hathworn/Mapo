digraph "CFG for '_Z12setup_kernelxP12hiprandStatet' function" {
	label="CFG for '_Z12setup_kernelxP12hiprandStatet' function";

	Node0x50e2a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = mul i32 %5, %10\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %16 = add i32 %14, %15\l  %17 = zext i16 %2 to i32\l  %18 = icmp slt i32 %16, %17\l  br i1 %18, label %19, label %235\l|{<s0>T|<s1>F}}"];
	Node0x50e2a40:s0 -> Node0x50e8110;
	Node0x50e2a40:s1 -> Node0x50e81a0;
	Node0x50e8110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6a8bef70",label="{%19:\l19:                                               \l  %20 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  %21 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %22 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %23 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %24 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %25 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %26 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 0\l  %27 = trunc i64 %0 to i32\l  %28 = xor i32 %27, 746559103\l  %29 = lshr i64 %0, 32\l  %30 = trunc i64 %29 to i32\l  %31 = xor i32 %30, -1607034933\l  %32 = mul i32 %28, 1228688033\l  %33 = mul i32 %31, 2073658381\l  %34 = add i32 %32, 123456789\l  %35 = xor i32 %32, 362436069\l  %36 = add i32 %33, 521288629\l  %37 = xor i32 %33, 88675123\l  %38 = add i32 %32, 5783321\l  %39 = add i32 %32, 6615241\l  %40 = add i32 %39, %33\l  %41 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 1\l  %42 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 2\l  %43 = udiv i32 %13, %10\l  %44 = mul i32 %43, %10\l  %45 = icmp ugt i32 %13, %44\l  %46 = zext i1 %45 to i32\l  %47 = add i32 %43, %46\l  %48 = mul i32 %47, %10\l  br label %49\l}"];
	Node0x50e8110 -> Node0x50e99e0;
	Node0x50e99e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%49:\l49:                                               \l  %50 = phi i32 [ %16, %19 ], [ %233, %231 ]\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %51\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %20) #4\l  store i32 %34, i32 addrspace(5)* %21, align 8, !tbaa !16\l  store i32 %35, i32 addrspace(5)* %22, align 4, !tbaa !16\l  store i32 %36, i32 addrspace(5)* %23, align 8, !tbaa !16\l  store i32 %37, i32 addrspace(5)* %24, align 4, !tbaa !16\l  store i32 %38, i32 addrspace(5)* %25, align 8, !tbaa !16\l  store i32 %40, i32 addrspace(5)* %26, align 8, !tbaa !20\l  %53 = icmp eq i32 %50, 0\l  br i1 %53, label %231, label %54\l|{<s0>T|<s1>F}}"];
	Node0x50e99e0:s0 -> Node0x50e9ad0;
	Node0x50e99e0:s1 -> Node0x50eab10;
	Node0x50eab10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%54:\l54:                                               \l  %55 = phi i64 [ %64, %62 ], [ %51, %49 ]\l  %56 = phi i32 [ %63, %62 ], [ 0, %49 ]\l  %57 = trunc i64 %55 to i32\l  %58 = and i32 %57, 3\l  %59 = icmp eq i32 %58, 0\l  br i1 %59, label %62, label %60\l|{<s0>T|<s1>F}}"];
	Node0x50eab10:s0 -> Node0x50eac50;
	Node0x50eab10:s1 -> Node0x50eb040;
	Node0x50eb040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%60:\l60:                                               \l  %61 = zext i32 %56 to i64\l  br label %66\l}"];
	Node0x50eb040 -> Node0x50eb1f0;
	Node0x50eac50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%62:\l62:                                               \l  %63 = add nuw nsw i32 %56, 1\l  %64 = lshr i64 %55, 2\l  %65 = icmp ult i64 %55, 4\l  br i1 %65, label %231, label %54, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x50eac50:s0 -> Node0x50e9ad0;
	Node0x50eac50:s1 -> Node0x50eab10;
	Node0x50eb1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%66:\l66:                                               \l  %67 = phi i32 [ 0, %60 ], [ %229, %228 ]\l  br label %68\l}"];
	Node0x50eb1f0 -> Node0x50eb8d0;
	Node0x50eb8d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%68:\l68:                                               \l  %69 = phi i32 [ 0, %66 ], [ %201, %68 ]\l  %70 = phi i32 [ 0, %66 ], [ %207, %68 ]\l  %71 = phi i32 [ 0, %66 ], [ %213, %68 ]\l  %72 = phi i32 [ 0, %66 ], [ %219, %68 ]\l  %73 = phi i32 [ 0, %66 ], [ %225, %68 ]\l  %74 = phi i32 [ 0, %66 ], [ %226, %68 ]\l  %75 = lshr i32 %74, 5\l  %76 = and i32 %74, 28\l  %77 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %75\l  %78 = load i32, i32 addrspace(5)* %77, align 4, !tbaa !16\l  %79 = shl nuw i32 1, %76\l  %80 = and i32 %79, %78\l  %81 = icmp eq i32 %80, 0\l  %82 = mul nuw nsw i32 %74, 5\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %83\l  %85 = load i32, i32 addrspace(4)* %84, align 16, !tbaa !16\l  %86 = select i1 %81, i32 0, i32 %85\l  %87 = xor i32 %86, %69\l  %88 = or i32 %82, 1\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %89\l  %91 = load i32, i32 addrspace(4)* %90, align 4, !tbaa !16\l  %92 = select i1 %81, i32 0, i32 %91\l  %93 = xor i32 %92, %70\l  %94 = or i32 %82, 2\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %95\l  %97 = load i32, i32 addrspace(4)* %96, align 8, !tbaa !16\l  %98 = select i1 %81, i32 0, i32 %97\l  %99 = xor i32 %98, %71\l  %100 = or i32 %82, 3\l  %101 = zext i32 %100 to i64\l  %102 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %101\l  %103 = load i32, i32 addrspace(4)* %102, align 4, !tbaa !16\l  %104 = select i1 %81, i32 0, i32 %103\l  %105 = xor i32 %104, %72\l  %106 = add nuw nsw i32 %82, 4\l  %107 = zext i32 %106 to i64\l  %108 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %107\l  %109 = load i32, i32 addrspace(4)* %108, align 16, !tbaa !16\l  %110 = select i1 %81, i32 0, i32 %109\l  %111 = xor i32 %110, %73\l  %112 = or i32 %74, 1\l  %113 = lshr i32 %74, 5\l  %114 = and i32 %112, 29\l  %115 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %113\l  %116 = load i32, i32 addrspace(5)* %115, align 4, !tbaa !16\l  %117 = shl nuw i32 1, %114\l  %118 = and i32 %117, %116\l  %119 = icmp eq i32 %118, 0\l  %120 = mul nuw nsw i32 %112, 5\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %121\l  %123 = load i32, i32 addrspace(4)* %122, align 4, !tbaa !16\l  %124 = select i1 %119, i32 0, i32 %123\l  %125 = xor i32 %124, %87\l  %126 = add nuw nsw i32 %120, 1\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %127\l  %129 = load i32, i32 addrspace(4)* %128, align 8, !tbaa !16\l  %130 = select i1 %119, i32 0, i32 %129\l  %131 = xor i32 %130, %93\l  %132 = or i32 %120, 2\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %133\l  %135 = load i32, i32 addrspace(4)* %134, align 4, !tbaa !16\l  %136 = select i1 %119, i32 0, i32 %135\l  %137 = xor i32 %136, %99\l  %138 = add nuw nsw i32 %120, 3\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %139\l  %141 = load i32, i32 addrspace(4)* %140, align 16, !tbaa !16\l  %142 = select i1 %119, i32 0, i32 %141\l  %143 = xor i32 %142, %105\l  %144 = add nuw nsw i32 %120, 4\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %145\l  %147 = load i32, i32 addrspace(4)* %146, align 4, !tbaa !16\l  %148 = select i1 %119, i32 0, i32 %147\l  %149 = xor i32 %148, %111\l  %150 = or i32 %74, 2\l  %151 = lshr i32 %74, 5\l  %152 = and i32 %150, 30\l  %153 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %151\l  %154 = load i32, i32 addrspace(5)* %153, align 4, !tbaa !16\l  %155 = shl nuw i32 1, %152\l  %156 = and i32 %155, %154\l  %157 = icmp eq i32 %156, 0\l  %158 = mul nuw nsw i32 %150, 5\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %159\l  %161 = load i32, i32 addrspace(4)* %160, align 8, !tbaa !16\l  %162 = select i1 %157, i32 0, i32 %161\l  %163 = xor i32 %162, %125\l  %164 = or i32 %158, 1\l  %165 = zext i32 %164 to i64\l  %166 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %165\l  %167 = load i32, i32 addrspace(4)* %166, align 4, !tbaa !16\l  %168 = select i1 %157, i32 0, i32 %167\l  %169 = xor i32 %168, %131\l  %170 = add nuw nsw i32 %158, 2\l  %171 = zext i32 %170 to i64\l  %172 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %171\l  %173 = load i32, i32 addrspace(4)* %172, align 16, !tbaa !16\l  %174 = select i1 %157, i32 0, i32 %173\l  %175 = xor i32 %174, %137\l  %176 = add nuw nsw i32 %158, 3\l  %177 = zext i32 %176 to i64\l  %178 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %177\l  %179 = load i32, i32 addrspace(4)* %178, align 4, !tbaa !16\l  %180 = select i1 %157, i32 0, i32 %179\l  %181 = xor i32 %180, %143\l  %182 = add nuw nsw i32 %158, 4\l  %183 = zext i32 %182 to i64\l  %184 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %183\l  %185 = load i32, i32 addrspace(4)* %184, align 8, !tbaa !16\l  %186 = select i1 %157, i32 0, i32 %185\l  %187 = xor i32 %186, %149\l  %188 = or i32 %74, 3\l  %189 = lshr i32 %74, 5\l  %190 = and i32 %188, 31\l  %191 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %189\l  %192 = load i32, i32 addrspace(5)* %191, align 4, !tbaa !16\l  %193 = shl nuw i32 1, %190\l  %194 = and i32 %193, %192\l  %195 = icmp eq i32 %194, 0\l  %196 = mul nuw nsw i32 %188, 5\l  %197 = zext i32 %196 to i64\l  %198 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %197\l  %199 = load i32, i32 addrspace(4)* %198, align 4, !tbaa !16\l  %200 = select i1 %195, i32 0, i32 %199\l  %201 = xor i32 %200, %163\l  %202 = add nuw nsw i32 %196, 1\l  %203 = zext i32 %202 to i64\l  %204 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %203\l  %205 = load i32, i32 addrspace(4)* %204, align 16, !tbaa !16\l  %206 = select i1 %195, i32 0, i32 %205\l  %207 = xor i32 %206, %169\l  %208 = add nuw nsw i32 %196, 2\l  %209 = zext i32 %208 to i64\l  %210 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %209\l  %211 = load i32, i32 addrspace(4)* %210, align 4, !tbaa !16\l  %212 = select i1 %195, i32 0, i32 %211\l  %213 = xor i32 %212, %175\l  %214 = add nuw nsw i32 %196, 3\l  %215 = zext i32 %214 to i64\l  %216 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %215\l  %217 = load i32, i32 addrspace(4)* %216, align 8, !tbaa !16\l  %218 = select i1 %195, i32 0, i32 %217\l  %219 = xor i32 %218, %181\l  %220 = add nuw nsw i32 %196, 4\l  %221 = zext i32 %220 to i64\l  %222 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %221\l  %223 = load i32, i32 addrspace(4)* %222, align 4, !tbaa !16\l  %224 = select i1 %195, i32 0, i32 %223\l  %225 = xor i32 %224, %187\l  %226 = add nuw nsw i32 %74, 4\l  %227 = icmp eq i32 %226, 160\l  br i1 %227, label %228, label %68, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x50eb8d0:s0 -> Node0x50e8fb0;
	Node0x50eb8d0:s1 -> Node0x50eb8d0;
	Node0x50e8fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%228:\l228:                                              \l  store i32 %201, i32 addrspace(5)* %21, align 8, !tbaa !16\l  store i32 %207, i32 addrspace(5)* %22, align 4, !tbaa !16\l  store i32 %213, i32 addrspace(5)* %23, align 8, !tbaa !16\l  store i32 %219, i32 addrspace(5)* %24, align 4, !tbaa !16\l  store i32 %225, i32 addrspace(5)* %25, align 8, !tbaa !16\l  %229 = add nuw nsw i32 %67, 1\l  %230 = icmp eq i32 %229, %58\l  br i1 %230, label %62, label %66, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x50e8fb0:s0 -> Node0x50eac50;
	Node0x50e8fb0:s1 -> Node0x50eb1f0;
	Node0x50e9ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%231:\l231:                                              \l  store i32 0, i32 addrspace(5)* %41, align 4, !tbaa !29\l  store i32 0, i32 addrspace(5)* %42, align 8, !tbaa !30\l  %232 = bitcast %struct.hiprandState addrspace(1)* %52 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %232, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %20, i64 48, i1 false), !tbaa.struct !31\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %20) #4\l  %233 = add i32 %48, %50\l  %234 = icmp slt i32 %233, %17\l  br i1 %234, label %49, label %235, !llvm.loop !35\l|{<s0>T|<s1>F}}"];
	Node0x50e9ad0:s0 -> Node0x50e99e0;
	Node0x50e9ad0:s1 -> Node0x50e81a0;
	Node0x50e81a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%235:\l235:                                              \l  ret void\l}"];
}
