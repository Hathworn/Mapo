digraph "CFG for '_Z23kernelSum_Column_MatrixPfS_i' function" {
	label="CFG for '_Z23kernelSum_Column_MatrixPfS_i' function";

	Node0x544edb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = udiv i32 %2, %9\l  %11 = mul nsw i32 %4, %2\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = mul i32 %10, %12\l  %14 = add i32 %13, %11\l  %15 = icmp sgt i32 %10, 0\l  br i1 %15, label %16, label %38\l|{<s0>T|<s1>F}}"];
	Node0x544edb0:s0 -> Node0x5450e10;
	Node0x544edb0:s1 -> Node0x5450ea0;
	Node0x5450e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%16:\l16:                                               \l  %17 = and i32 %10, 7\l  %18 = icmp ult i32 %10, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5450e10:s0 -> Node0x5451210;
	Node0x5450e10:s1 -> Node0x5451260;
	Node0x5451260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%19:\l19:                                               \l  %20 = and i32 %10, -8\l  br label %52\l}"];
	Node0x5451260 -> Node0x5451430;
	Node0x5451210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %16 ], [ %102, %52 ]\l  %23 = phi i32 [ 0, %16 ], [ %103, %52 ]\l  %24 = phi float [ 0.000000e+00, %16 ], [ %102, %52 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %38, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5451210:s0 -> Node0x5450ea0;
	Node0x5451210:s1 -> Node0x5452280;
	Node0x5452280 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %35, %26 ], [ %23, %21 ]\l  %28 = phi float [ %34, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %36, %26 ], [ 0, %21 ]\l  %30 = add nsw i32 %14, %27\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %34 = fadd contract float %28, %33\l  %35 = add nuw nsw i32 %27, 1\l  %36 = add i32 %29, 1\l  %37 = icmp eq i32 %36, %17\l  br i1 %37, label %38, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5452280:s0 -> Node0x5450ea0;
	Node0x5452280:s1 -> Node0x5452280;
	Node0x5450ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%38:\l38:                                               \l  %39 = phi float [ 0.000000e+00, %3 ], [ %22, %21 ], [ %34, %26 ]\l  %40 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %12\l  store float %39, float addrspace(3)* %40, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %41 = icmp eq i32 %12, 0\l  br i1 %41, label %42, label %165\l|{<s0>T|<s1>F}}"];
	Node0x5450ea0:s0 -> Node0x54540b0;
	Node0x5450ea0:s1 -> Node0x5454100;
	Node0x54540b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%42:\l42:                                               \l  %43 = load float, float addrspace(3)* getelementptr inbounds ([32 x float],\l... [32 x float] addrspace(3)* @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix,\l... i32 0, i32 0), align 16, !tbaa !7\l  %44 = icmp ugt i16 %8, 1\l  br i1 %44, label %45, label %123\l|{<s0>T|<s1>F}}"];
	Node0x54540b0:s0 -> Node0x5454690;
	Node0x54540b0:s1 -> Node0x54546e0;
	Node0x5454690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%45:\l45:                                               \l  %46 = add nsw i32 %9, -1\l  %47 = add nsw i32 %9, -2\l  %48 = and i32 %46, 7\l  %49 = icmp ult i32 %47, 7\l  br i1 %49, label %106, label %50\l|{<s0>T|<s1>F}}"];
	Node0x5454690:s0 -> Node0x5454a90;
	Node0x5454690:s1 -> Node0x5454ae0;
	Node0x5454ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%50:\l50:                                               \l  %51 = and i32 %46, -8\l  br label %127\l}"];
	Node0x5454ae0 -> Node0x5454cb0;
	Node0x5451430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%52:\l52:                                               \l  %53 = phi i32 [ 0, %19 ], [ %103, %52 ]\l  %54 = phi float [ 0.000000e+00, %19 ], [ %102, %52 ]\l  %55 = phi i32 [ 0, %19 ], [ %104, %52 ]\l  %56 = add nsw i32 %14, %53\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fadd contract float %54, %59\l  %61 = or i32 %53, 1\l  %62 = add nsw i32 %14, %61\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = fadd contract float %60, %65\l  %67 = or i32 %53, 2\l  %68 = add nsw i32 %14, %67\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = fadd contract float %66, %71\l  %73 = or i32 %53, 3\l  %74 = add nsw i32 %14, %73\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fadd contract float %72, %77\l  %79 = or i32 %53, 4\l  %80 = add nsw i32 %14, %79\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %84 = fadd contract float %78, %83\l  %85 = or i32 %53, 5\l  %86 = add nsw i32 %14, %85\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = fadd contract float %84, %89\l  %91 = or i32 %53, 6\l  %92 = add nsw i32 %14, %91\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = fadd contract float %90, %95\l  %97 = or i32 %53, 7\l  %98 = add nsw i32 %14, %97\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fadd contract float %96, %101\l  %103 = add nuw nsw i32 %53, 8\l  %104 = add i32 %55, 8\l  %105 = icmp eq i32 %104, %20\l  br i1 %105, label %21, label %52, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5451430:s0 -> Node0x5451210;
	Node0x5451430:s1 -> Node0x5451430;
	Node0x5454a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%106:\l106:                                              \l  %107 = phi float [ undef, %45 ], [ %161, %127 ]\l  %108 = phi i32 [ 1, %45 ], [ %162, %127 ]\l  %109 = phi float [ %43, %45 ], [ %161, %127 ]\l  %110 = icmp eq i32 %48, 0\l  br i1 %110, label %121, label %111\l|{<s0>T|<s1>F}}"];
	Node0x5454a90:s0 -> Node0x5457320;
	Node0x5454a90:s1 -> Node0x54573b0;
	Node0x54573b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%111:\l111:                                              \l  %112 = phi i32 [ %118, %111 ], [ %108, %106 ]\l  %113 = phi float [ %117, %111 ], [ %109, %106 ]\l  %114 = phi i32 [ %119, %111 ], [ 0, %106 ]\l  %115 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %112\l  %116 = load float, float addrspace(3)* %115, align 4, !tbaa !7\l  %117 = fadd contract float %113, %116\l  %118 = add nuw nsw i32 %112, 1\l  %119 = add i32 %114, 1\l  %120 = icmp eq i32 %119, %48\l  br i1 %120, label %121, label %111, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x54573b0:s0 -> Node0x5457320;
	Node0x54573b0:s1 -> Node0x54573b0;
	Node0x5457320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%121:\l121:                                              \l  %122 = phi float [ %107, %106 ], [ %117, %111 ]\l  store float %122, float addrspace(3)* getelementptr inbounds ([32 x float],\l... [32 x float] addrspace(3)* @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix,\l... i32 0, i32 0), align 16, !tbaa !7\l  br label %123\l}"];
	Node0x5457320 -> Node0x54546e0;
	Node0x54546e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%123:\l123:                                              \l  %124 = phi float [ %122, %121 ], [ %43, %42 ]\l  %125 = zext i32 %4 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  store float %124, float addrspace(1)* %126, align 4, !tbaa !7\l  br label %165\l}"];
	Node0x54546e0 -> Node0x5454100;
	Node0x5454cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%127:\l127:                                              \l  %128 = phi i32 [ 1, %50 ], [ %162, %127 ]\l  %129 = phi float [ %43, %50 ], [ %161, %127 ]\l  %130 = phi i32 [ 0, %50 ], [ %163, %127 ]\l  %131 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %128\l  %132 = load float, float addrspace(3)* %131, align 4, !tbaa !7\l  %133 = fadd contract float %129, %132\l  %134 = add nuw nsw i32 %128, 1\l  %135 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %134\l  %136 = load float, float addrspace(3)* %135, align 4, !tbaa !7\l  %137 = fadd contract float %133, %136\l  %138 = add nuw nsw i32 %128, 2\l  %139 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %138\l  %140 = load float, float addrspace(3)* %139, align 4, !tbaa !7\l  %141 = fadd contract float %137, %140\l  %142 = add nuw nsw i32 %128, 3\l  %143 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %142\l  %144 = load float, float addrspace(3)* %143, align 4, !tbaa !7\l  %145 = fadd contract float %141, %144\l  %146 = add nuw nsw i32 %128, 4\l  %147 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %146\l  %148 = load float, float addrspace(3)* %147, align 4, !tbaa !7\l  %149 = fadd contract float %145, %148\l  %150 = add nuw nsw i32 %128, 5\l  %151 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %150\l  %152 = load float, float addrspace(3)* %151, align 4, !tbaa !7\l  %153 = fadd contract float %149, %152\l  %154 = add nuw nsw i32 %128, 6\l  %155 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %154\l  %156 = load float, float addrspace(3)* %155, align 4, !tbaa !7\l  %157 = fadd contract float %153, %156\l  %158 = add nuw nsw i32 %128, 7\l  %159 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ23kernelSum_Column_MatrixPfS_iE11shareMatrix, i32 0, i32 %158\l  %160 = load float, float addrspace(3)* %159, align 4, !tbaa !7\l  %161 = fadd contract float %157, %160\l  %162 = add nuw nsw i32 %128, 8\l  %163 = add i32 %130, 8\l  %164 = icmp eq i32 %163, %51\l  br i1 %164, label %106, label %127, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5454cb0:s0 -> Node0x5454a90;
	Node0x5454cb0:s1 -> Node0x5454cb0;
	Node0x5454100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%165:\l165:                                              \l  ret void\l}"];
}
