digraph "CFG for 'vec_computePSF_phaseNManywithOil_f' function" {
	label="CFG for 'vec_computePSF_phaseNManywithOil_f' function";

	Node0x45f0a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%16:\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 12\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 4, !tbaa !7\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %28 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %29 = getelementptr i8, i8 addrspace(4)* %19, i64 6\l  %30 = bitcast i8 addrspace(4)* %29 to i16 addrspace(4)*\l  %31 = load i16, i16 addrspace(4)* %30, align 2, !range !5, !invariant.load !6\l  %32 = zext i16 %31 to i32\l  %33 = mul i32 %28, %32\l  %34 = add i32 %33, %27\l  %35 = udiv i32 %26, %23\l  %36 = mul i32 %35, %23\l  %37 = icmp ugt i32 %26, %36\l  %38 = zext i1 %37 to i32\l  %39 = add i32 %35, %38\l  %40 = mul i32 %39, %34\l  %41 = add i32 %40, %18\l  %42 = mul i32 %41, %23\l  %43 = add i32 %42, %17\l  %44 = icmp slt i32 %43, %0\l  br i1 %44, label %45, label %391\l|{<s0>T|<s1>F}}"];
	Node0x45f0a20:s0 -> Node0x45f57a0;
	Node0x45f0a20:s1 -> Node0x45f5830;
	Node0x45f57a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%45:\l45:                                               \l  %46 = freeze i32 %43\l  %47 = freeze i32 %1\l  %48 = sdiv i32 %46, %47\l  %49 = mul i32 %48, %47\l  %50 = sub i32 %46, %49\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %3, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %54 = sext i32 %48 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %11, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %57 = fmul contract float %53, %56\l  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 %51\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %60 = add nsw i32 %48, %15\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %11, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %64 = fmul contract float %59, %63\l  %65 = fadd contract float %57, %64\l  %66 = getelementptr inbounds float, float addrspace(1)* %10, i64 %51\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %68 = fadd contract float %67, %65\l  %69 = getelementptr inbounds float, float addrspace(1)* %5, i64 %51\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %71 = shl nsw i32 %15, 1\l  %72 = add nsw i32 %48, %71\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %11, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %76 = fmul contract float %70, %75\l  %77 = fadd contract float %68, %76\l  %78 = getelementptr inbounds float, float addrspace(1)* %7, i64 %51\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %80 = mul nsw i32 %15, 3\l  %81 = add nsw i32 %48, %80\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %11, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %85 = fmul contract float %79, %84\l  %86 = fsub contract float %77, %85\l  %87 = getelementptr inbounds float, float addrspace(1)* %6, i64 %51\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %89 = fmul contract float %76, %88\l  %90 = fadd contract float %68, %89\l  %91 = getelementptr inbounds float, float addrspace(1)* %8, i64 %51\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %93 = fmul contract float %85, %92\l  %94 = fsub contract float %90, %93\l  %95 = getelementptr inbounds float, float addrspace(1)* %9, i64 %51\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %97 = tail call float @llvm.fabs.f32(float %86)\l  %98 = fcmp olt float %97, 1.310720e+05\l  br i1 %98, label %99, label %106\l|{<s0>T|<s1>F}}"];
	Node0x45f57a0:s0 -> Node0x45f8dd0;
	Node0x45f57a0:s1 -> Node0x45f8e60;
	Node0x45f8dd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%99:\l99:                                               \l  %100 = fmul float %97, 0x3FE45F3060000000\l  %101 = tail call float @llvm.rint.f32(float %100)\l  %102 = tail call float @llvm.fma.f32(float %101, float 0xBFF921FB40000000,\l... float %97)\l  %103 = tail call float @llvm.fma.f32(float %101, float 0xBE74442D00000000,\l... float %102)\l  %104 = tail call float @llvm.fma.f32(float %101, float 0xBCF8469880000000,\l... float %103)\l  %105 = fptosi float %101 to i32\l  br label %212\l}"];
	Node0x45f8dd0 -> Node0x45f98a0;
	Node0x45f8e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%106:\l106:                                              \l  %107 = bitcast float %97 to i32\l  %108 = lshr i32 %107, 23\l  %109 = and i32 %107, 8388607\l  %110 = or i32 %109, 8388608\l  %111 = zext i32 %110 to i64\l  %112 = mul nuw nsw i64 %111, 4266746795\l  %113 = trunc i64 %112 to i32\l  %114 = lshr i64 %112, 32\l  %115 = mul nuw nsw i64 %111, 1011060801\l  %116 = add nuw nsw i64 %114, %115\l  %117 = trunc i64 %116 to i32\l  %118 = lshr i64 %116, 32\l  %119 = mul nuw nsw i64 %111, 3680671129\l  %120 = add nuw nsw i64 %118, %119\l  %121 = trunc i64 %120 to i32\l  %122 = lshr i64 %120, 32\l  %123 = mul nuw nsw i64 %111, 4113882560\l  %124 = add nuw nsw i64 %122, %123\l  %125 = trunc i64 %124 to i32\l  %126 = lshr i64 %124, 32\l  %127 = mul nuw nsw i64 %111, 4230436817\l  %128 = add nuw nsw i64 %126, %127\l  %129 = trunc i64 %128 to i32\l  %130 = lshr i64 %128, 32\l  %131 = mul nuw nsw i64 %111, 1313084713\l  %132 = add nuw nsw i64 %130, %131\l  %133 = trunc i64 %132 to i32\l  %134 = lshr i64 %132, 32\l  %135 = mul nuw nsw i64 %111, 2734261102\l  %136 = add nuw nsw i64 %134, %135\l  %137 = trunc i64 %136 to i32\l  %138 = lshr i64 %136, 32\l  %139 = trunc i64 %138 to i32\l  %140 = add nsw i32 %108, -120\l  %141 = icmp ugt i32 %140, 63\l  %142 = select i1 %141, i32 %133, i32 %139\l  %143 = select i1 %141, i32 %129, i32 %137\l  %144 = select i1 %141, i32 %125, i32 %133\l  %145 = select i1 %141, i32 %121, i32 %129\l  %146 = select i1 %141, i32 %117, i32 %125\l  %147 = select i1 %141, i32 %113, i32 %121\l  %148 = select i1 %141, i32 -64, i32 0\l  %149 = add nsw i32 %148, %140\l  %150 = icmp ugt i32 %149, 31\l  %151 = select i1 %150, i32 %143, i32 %142\l  %152 = select i1 %150, i32 %144, i32 %143\l  %153 = select i1 %150, i32 %145, i32 %144\l  %154 = select i1 %150, i32 %146, i32 %145\l  %155 = select i1 %150, i32 %147, i32 %146\l  %156 = select i1 %150, i32 -32, i32 0\l  %157 = add nsw i32 %156, %149\l  %158 = icmp ugt i32 %157, 31\l  %159 = select i1 %158, i32 %152, i32 %151\l  %160 = select i1 %158, i32 %153, i32 %152\l  %161 = select i1 %158, i32 %154, i32 %153\l  %162 = select i1 %158, i32 %155, i32 %154\l  %163 = select i1 %158, i32 -32, i32 0\l  %164 = add nsw i32 %163, %157\l  %165 = icmp eq i32 %164, 0\l  %166 = sub nsw i32 32, %164\l  %167 = tail call i32 @llvm.fshr.i32(i32 %159, i32 %160, i32 %166)\l  %168 = tail call i32 @llvm.fshr.i32(i32 %160, i32 %161, i32 %166)\l  %169 = tail call i32 @llvm.fshr.i32(i32 %161, i32 %162, i32 %166)\l  %170 = select i1 %165, i32 %159, i32 %167\l  %171 = select i1 %165, i32 %160, i32 %168\l  %172 = select i1 %165, i32 %161, i32 %169\l  %173 = lshr i32 %170, 29\l  %174 = tail call i32 @llvm.fshl.i32(i32 %170, i32 %171, i32 2)\l  %175 = tail call i32 @llvm.fshl.i32(i32 %171, i32 %172, i32 2)\l  %176 = tail call i32 @llvm.fshl.i32(i32 %172, i32 %162, i32 2)\l  %177 = and i32 %173, 1\l  %178 = sub nsw i32 0, %177\l  %179 = shl i32 %173, 31\l  %180 = xor i32 %174, %178\l  %181 = xor i32 %175, %178\l  %182 = xor i32 %176, %178\l  %183 = tail call i32 @llvm.ctlz.i32(i32 %180, i1 false), !range !20\l  %184 = sub nsw i32 31, %183\l  %185 = tail call i32 @llvm.fshr.i32(i32 %180, i32 %181, i32 %184)\l  %186 = tail call i32 @llvm.fshr.i32(i32 %181, i32 %182, i32 %184)\l  %187 = shl nuw nsw i32 %183, 23\l  %188 = sub nuw nsw i32 1056964608, %187\l  %189 = lshr i32 %185, 9\l  %190 = or i32 %189, %188\l  %191 = or i32 %190, %179\l  %192 = bitcast i32 %191 to float\l  %193 = tail call i32 @llvm.fshl.i32(i32 %185, i32 %186, i32 23)\l  %194 = tail call i32 @llvm.ctlz.i32(i32 %193, i1 false), !range !20\l  %195 = fmul float %192, 0x3FF921FB40000000\l  %196 = add nuw nsw i32 %194, %183\l  %197 = shl nuw nsw i32 %196, 23\l  %198 = sub nuw nsw i32 855638016, %197\l  %199 = sub nsw i32 31, %194\l  %200 = tail call i32 @llvm.fshr.i32(i32 %193, i32 %186, i32 %199)\l  %201 = lshr i32 %200, 9\l  %202 = or i32 %198, %201\l  %203 = or i32 %202, %179\l  %204 = bitcast i32 %203 to float\l  %205 = fneg float %195\l  %206 = tail call float @llvm.fma.f32(float %192, float 0x3FF921FB40000000,\l... float %205)\l  %207 = tail call float @llvm.fma.f32(float %192, float 0x3E74442D00000000,\l... float %206)\l  %208 = tail call float @llvm.fma.f32(float %204, float 0x3FF921FB40000000,\l... float %207)\l  %209 = fadd float %195, %208\l  %210 = lshr i32 %170, 30\l  %211 = add nuw nsw i32 %177, %210\l  br label %212\l}"];
	Node0x45f8e60 -> Node0x45f98a0;
	Node0x45f98a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%212:\l212:                                              \l  %213 = phi float [ %104, %99 ], [ %209, %106 ]\l  %214 = phi i32 [ %105, %99 ], [ %211, %106 ]\l  %215 = fmul float %213, %213\l  %216 = tail call float @llvm.fmuladd.f32(float %215, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %217 = tail call float @llvm.fmuladd.f32(float %215, float %216, float\l... 0xBFC55553A0000000)\l  %218 = fmul float %215, %217\l  %219 = tail call float @llvm.fmuladd.f32(float %213, float %218, float %213)\l  %220 = tail call float @llvm.fmuladd.f32(float %215, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %221 = tail call float @llvm.fmuladd.f32(float %215, float %220, float\l... 0x3FA5557EE0000000)\l  %222 = tail call float @llvm.fmuladd.f32(float %215, float %221, float\l... 0xBFE0000080000000)\l  %223 = tail call float @llvm.fmuladd.f32(float %215, float %222, float\l... 1.000000e+00)\l  %224 = fneg float %219\l  %225 = and i32 %214, 1\l  %226 = icmp eq i32 %225, 0\l  %227 = select i1 %226, float %223, float %224\l  %228 = bitcast float %227 to i32\l  %229 = shl i32 %214, 30\l  %230 = and i32 %229, -2147483648\l  %231 = xor i32 %230, %228\l  %232 = bitcast i32 %231 to float\l  %233 = tail call i1 @llvm.amdgcn.class.f32(float %97, i32 504)\l  %234 = select i1 %233, float %232, float 0x7FF8000000000000\l  %235 = fmul contract float %96, %234\l  %236 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %51\l  %237 = load i32, i32 addrspace(1)* %236, align 4, !tbaa !21,\l... !amdgpu.noclobber !6\l  %238 = mul nsw i32 %48, %2\l  %239 = add nsw i32 %237, %238\l  %240 = sext i32 %239 to i64\l  %241 = getelementptr inbounds float, float addrspace(1)* %14, i64 %240\l  store float %235, float addrspace(1)* %241, align 4, !tbaa !16\l  %242 = load float, float addrspace(1)* %95, align 4, !tbaa !16\l  %243 = tail call float @llvm.fabs.f32(float %94)\l  %244 = fcmp olt float %243, 1.310720e+05\l  br i1 %244, label %245, label %253\l|{<s0>T|<s1>F}}"];
	Node0x45f98a0:s0 -> Node0x4601190;
	Node0x45f98a0:s1 -> Node0x4601220;
	Node0x4601190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%245:\l245:                                              \l  %246 = fmul float %243, 0x3FE45F3060000000\l  %247 = tail call float @llvm.rint.f32(float %246)\l  %248 = tail call float @llvm.fma.f32(float %247, float 0xBFF921FB40000000,\l... float %243)\l  %249 = tail call float @llvm.fma.f32(float %247, float 0xBE74442D00000000,\l... float %248)\l  %250 = tail call float @llvm.fma.f32(float %247, float 0xBCF8469880000000,\l... float %249)\l  %251 = fptosi float %247 to i32\l  %252 = bitcast float %243 to i32\l  br label %359\l}"];
	Node0x4601190 -> Node0x4601950;
	Node0x4601220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%253:\l253:                                              \l  %254 = bitcast float %243 to i32\l  %255 = lshr i32 %254, 23\l  %256 = and i32 %254, 8388607\l  %257 = or i32 %256, 8388608\l  %258 = zext i32 %257 to i64\l  %259 = mul nuw nsw i64 %258, 4266746795\l  %260 = trunc i64 %259 to i32\l  %261 = lshr i64 %259, 32\l  %262 = mul nuw nsw i64 %258, 1011060801\l  %263 = add nuw nsw i64 %261, %262\l  %264 = trunc i64 %263 to i32\l  %265 = lshr i64 %263, 32\l  %266 = mul nuw nsw i64 %258, 3680671129\l  %267 = add nuw nsw i64 %265, %266\l  %268 = trunc i64 %267 to i32\l  %269 = lshr i64 %267, 32\l  %270 = mul nuw nsw i64 %258, 4113882560\l  %271 = add nuw nsw i64 %269, %270\l  %272 = trunc i64 %271 to i32\l  %273 = lshr i64 %271, 32\l  %274 = mul nuw nsw i64 %258, 4230436817\l  %275 = add nuw nsw i64 %273, %274\l  %276 = trunc i64 %275 to i32\l  %277 = lshr i64 %275, 32\l  %278 = mul nuw nsw i64 %258, 1313084713\l  %279 = add nuw nsw i64 %277, %278\l  %280 = trunc i64 %279 to i32\l  %281 = lshr i64 %279, 32\l  %282 = mul nuw nsw i64 %258, 2734261102\l  %283 = add nuw nsw i64 %281, %282\l  %284 = trunc i64 %283 to i32\l  %285 = lshr i64 %283, 32\l  %286 = trunc i64 %285 to i32\l  %287 = add nsw i32 %255, -120\l  %288 = icmp ugt i32 %287, 63\l  %289 = select i1 %288, i32 %280, i32 %286\l  %290 = select i1 %288, i32 %276, i32 %284\l  %291 = select i1 %288, i32 %272, i32 %280\l  %292 = select i1 %288, i32 %268, i32 %276\l  %293 = select i1 %288, i32 %264, i32 %272\l  %294 = select i1 %288, i32 %260, i32 %268\l  %295 = select i1 %288, i32 -64, i32 0\l  %296 = add nsw i32 %295, %287\l  %297 = icmp ugt i32 %296, 31\l  %298 = select i1 %297, i32 %290, i32 %289\l  %299 = select i1 %297, i32 %291, i32 %290\l  %300 = select i1 %297, i32 %292, i32 %291\l  %301 = select i1 %297, i32 %293, i32 %292\l  %302 = select i1 %297, i32 %294, i32 %293\l  %303 = select i1 %297, i32 -32, i32 0\l  %304 = add nsw i32 %303, %296\l  %305 = icmp ugt i32 %304, 31\l  %306 = select i1 %305, i32 %299, i32 %298\l  %307 = select i1 %305, i32 %300, i32 %299\l  %308 = select i1 %305, i32 %301, i32 %300\l  %309 = select i1 %305, i32 %302, i32 %301\l  %310 = select i1 %305, i32 -32, i32 0\l  %311 = add nsw i32 %310, %304\l  %312 = icmp eq i32 %311, 0\l  %313 = sub nsw i32 32, %311\l  %314 = tail call i32 @llvm.fshr.i32(i32 %306, i32 %307, i32 %313)\l  %315 = tail call i32 @llvm.fshr.i32(i32 %307, i32 %308, i32 %313)\l  %316 = tail call i32 @llvm.fshr.i32(i32 %308, i32 %309, i32 %313)\l  %317 = select i1 %312, i32 %306, i32 %314\l  %318 = select i1 %312, i32 %307, i32 %315\l  %319 = select i1 %312, i32 %308, i32 %316\l  %320 = lshr i32 %317, 29\l  %321 = tail call i32 @llvm.fshl.i32(i32 %317, i32 %318, i32 2)\l  %322 = tail call i32 @llvm.fshl.i32(i32 %318, i32 %319, i32 2)\l  %323 = tail call i32 @llvm.fshl.i32(i32 %319, i32 %309, i32 2)\l  %324 = and i32 %320, 1\l  %325 = sub nsw i32 0, %324\l  %326 = shl i32 %320, 31\l  %327 = xor i32 %321, %325\l  %328 = xor i32 %322, %325\l  %329 = xor i32 %323, %325\l  %330 = tail call i32 @llvm.ctlz.i32(i32 %327, i1 false), !range !20\l  %331 = sub nsw i32 31, %330\l  %332 = tail call i32 @llvm.fshr.i32(i32 %327, i32 %328, i32 %331)\l  %333 = tail call i32 @llvm.fshr.i32(i32 %328, i32 %329, i32 %331)\l  %334 = shl nuw nsw i32 %330, 23\l  %335 = sub nuw nsw i32 1056964608, %334\l  %336 = lshr i32 %332, 9\l  %337 = or i32 %336, %335\l  %338 = or i32 %337, %326\l  %339 = bitcast i32 %338 to float\l  %340 = tail call i32 @llvm.fshl.i32(i32 %332, i32 %333, i32 23)\l  %341 = tail call i32 @llvm.ctlz.i32(i32 %340, i1 false), !range !20\l  %342 = fmul float %339, 0x3FF921FB40000000\l  %343 = add nuw nsw i32 %341, %330\l  %344 = shl nuw nsw i32 %343, 23\l  %345 = sub nuw nsw i32 855638016, %344\l  %346 = sub nsw i32 31, %341\l  %347 = tail call i32 @llvm.fshr.i32(i32 %340, i32 %333, i32 %346)\l  %348 = lshr i32 %347, 9\l  %349 = or i32 %345, %348\l  %350 = or i32 %349, %326\l  %351 = bitcast i32 %350 to float\l  %352 = fneg float %342\l  %353 = tail call float @llvm.fma.f32(float %339, float 0x3FF921FB40000000,\l... float %352)\l  %354 = tail call float @llvm.fma.f32(float %339, float 0x3E74442D00000000,\l... float %353)\l  %355 = tail call float @llvm.fma.f32(float %351, float 0x3FF921FB40000000,\l... float %354)\l  %356 = fadd float %342, %355\l  %357 = lshr i32 %317, 30\l  %358 = add nuw nsw i32 %324, %357\l  br label %359\l}"];
	Node0x4601220 -> Node0x4601950;
	Node0x4601950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%359:\l359:                                              \l  %360 = phi i32 [ %252, %245 ], [ %254, %253 ]\l  %361 = phi float [ %250, %245 ], [ %356, %253 ]\l  %362 = phi i32 [ %251, %245 ], [ %358, %253 ]\l  %363 = fmul float %361, %361\l  %364 = tail call float @llvm.fmuladd.f32(float %363, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %365 = tail call float @llvm.fmuladd.f32(float %363, float %364, float\l... 0xBFC55553A0000000)\l  %366 = fmul float %363, %365\l  %367 = tail call float @llvm.fmuladd.f32(float %361, float %366, float %361)\l  %368 = tail call float @llvm.fmuladd.f32(float %363, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %369 = tail call float @llvm.fmuladd.f32(float %363, float %368, float\l... 0x3FA5557EE0000000)\l  %370 = tail call float @llvm.fmuladd.f32(float %363, float %369, float\l... 0xBFE0000080000000)\l  %371 = tail call float @llvm.fmuladd.f32(float %363, float %370, float\l... 1.000000e+00)\l  %372 = and i32 %362, 1\l  %373 = icmp eq i32 %372, 0\l  %374 = select i1 %373, float %367, float %371\l  %375 = bitcast float %374 to i32\l  %376 = shl i32 %362, 30\l  %377 = and i32 %376, -2147483648\l  %378 = bitcast float %94 to i32\l  %379 = xor i32 %360, %378\l  %380 = xor i32 %379, %377\l  %381 = xor i32 %380, %375\l  %382 = bitcast i32 %381 to float\l  %383 = tail call i1 @llvm.amdgcn.class.f32(float %243, i32 504)\l  %384 = select i1 %383, float %382, float 0x7FF8000000000000\l  %385 = fmul contract float %242, %384\l  %386 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %51\l  %387 = load i32, i32 addrspace(1)* %386, align 4, !tbaa !21,\l... !amdgpu.noclobber !6\l  %388 = add nsw i32 %387, %238\l  %389 = sext i32 %388 to i64\l  %390 = getelementptr inbounds float, float addrspace(1)* %14, i64 %389\l  store float %385, float addrspace(1)* %390, align 4, !tbaa !16\l  br label %391\l}"];
	Node0x4601950 -> Node0x45f5830;
	Node0x45f5830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%391:\l391:                                              \l  ret void\l}"];
}
