digraph "CFG for 'vec_pow' function" {
	label="CFG for 'vec_pow' function";

	Node0x5915400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = udiv i32 %14, %11\l  %24 = mul i32 %23, %11\l  %25 = icmp ugt i32 %14, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %22\l  %29 = add i32 %28, %6\l  %30 = mul i32 %29, %11\l  %31 = add i32 %30, %5\l  %32 = icmp slt i32 %31, %0\l  br i1 %32, label %33, label %246\l|{<s0>T|<s1>F}}"];
	Node0x5915400:s0 -> Node0x5917e20;
	Node0x5915400:s1 -> Node0x5917eb0;
	Node0x5917e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%33:\l33:                                               \l  %34 = sext i32 %31 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %2, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %37 = getelementptr inbounds double, double addrspace(1)* %3, i64 %34\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %39 = tail call double @llvm.fabs.f64(double %36)\l  %40 = tail call double @llvm.amdgcn.frexp.mant.f64(double %39)\l  %41 = fcmp olt double %40, 0x3FE5555555555555\l  %42 = zext i1 %41 to i32\l  %43 = tail call double @llvm.amdgcn.ldexp.f64(double %40, i32 %42)\l  %44 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %39)\l  %45 = sub nsw i32 %44, %42\l  %46 = fadd double %43, -1.000000e+00\l  %47 = fadd double %43, 1.000000e+00\l  %48 = fadd double %47, -1.000000e+00\l  %49 = fsub double %43, %48\l  %50 = tail call double @llvm.amdgcn.rcp.f64(double %47)\l  %51 = fneg double %47\l  %52 = tail call double @llvm.fma.f64(double %51, double %50, double\l... 1.000000e+00)\l  %53 = tail call double @llvm.fma.f64(double %52, double %50, double %50)\l  %54 = tail call double @llvm.fma.f64(double %51, double %53, double\l... 1.000000e+00)\l  %55 = tail call double @llvm.fma.f64(double %54, double %53, double %53)\l  %56 = fmul double %46, %55\l  %57 = fmul double %47, %56\l  %58 = fneg double %57\l  %59 = tail call double @llvm.fma.f64(double %56, double %47, double %58)\l  %60 = tail call double @llvm.fma.f64(double %56, double %49, double %59)\l  %61 = fadd double %57, %60\l  %62 = fsub double %61, %57\l  %63 = fsub double %60, %62\l  %64 = fsub double %46, %61\l  %65 = fsub double %46, %64\l  %66 = fsub double %65, %61\l  %67 = fsub double %66, %63\l  %68 = fadd double %64, %67\l  %69 = fmul double %55, %68\l  %70 = fadd double %56, %69\l  %71 = fsub double %70, %56\l  %72 = fsub double %69, %71\l  %73 = fmul double %70, %70\l  %74 = fneg double %73\l  %75 = tail call double @llvm.fma.f64(double %70, double %70, double %74)\l  %76 = fmul double %72, 2.000000e+00\l  %77 = tail call double @llvm.fma.f64(double %70, double %76, double %75)\l  %78 = fadd double %73, %77\l  %79 = fsub double %78, %73\l  %80 = fsub double %77, %79\l  %81 = tail call double @llvm.fma.f64(double %78, double 0x3FBDEE674222DE17,\l... double 0x3FBA6564968915A9)\l  %82 = tail call double @llvm.fma.f64(double %78, double %81, double\l... 0x3FBE25E43ABE935A)\l  %83 = tail call double @llvm.fma.f64(double %78, double %82, double\l... 0x3FC110EF47E6C9C2)\l  %84 = tail call double @llvm.fma.f64(double %78, double %83, double\l... 0x3FC3B13BCFA74449)\l  %85 = tail call double @llvm.fma.f64(double %78, double %84, double\l... 0x3FC745D171BF3C30)\l  %86 = tail call double @llvm.fma.f64(double %78, double %85, double\l... 0x3FCC71C71C7792CE)\l  %87 = tail call double @llvm.fma.f64(double %78, double %86, double\l... 0x3FD24924924920DA)\l  %88 = tail call double @llvm.fma.f64(double %78, double %87, double\l... 0x3FD999999999999C)\l  %89 = sitofp i32 %45 to double\l  %90 = fmul double %89, 0x3FE62E42FEFA39EF\l  %91 = fneg double %90\l  %92 = tail call double @llvm.fma.f64(double %89, double 0x3FE62E42FEFA39EF,\l... double %91)\l  %93 = tail call double @llvm.fma.f64(double %89, double 0x3C7ABC9E3B39803F,\l... double %92)\l  %94 = fadd double %90, %93\l  %95 = fsub double %94, %90\l  %96 = fsub double %93, %95\l  %97 = tail call double @llvm.amdgcn.ldexp.f64(double %70, i32 1)\l  %98 = tail call double @llvm.amdgcn.ldexp.f64(double %72, i32 1)\l  %99 = fmul double %70, %78\l  %100 = fneg double %99\l  %101 = tail call double @llvm.fma.f64(double %78, double %70, double %100)\l  %102 = tail call double @llvm.fma.f64(double %78, double %72, double %101)\l  %103 = tail call double @llvm.fma.f64(double %80, double %70, double %102)\l  %104 = fadd double %99, %103\l  %105 = fsub double %104, %99\l  %106 = fsub double %103, %105\l  %107 = fmul double %78, %88\l  %108 = fneg double %107\l  %109 = tail call double @llvm.fma.f64(double %78, double %88, double %108)\l  %110 = tail call double @llvm.fma.f64(double %80, double %88, double %109)\l  %111 = fadd double %107, %110\l  %112 = fsub double %111, %107\l  %113 = fsub double %110, %112\l  %114 = fadd double %111, 0x3FE5555555555555\l  %115 = fadd double %114, 0xBFE5555555555555\l  %116 = fsub double %111, %115\l  %117 = fadd double %113, 0x3C8543B0D5DF274D\l  %118 = fadd double %117, %116\l  %119 = fadd double %114, %118\l  %120 = fsub double %119, %114\l  %121 = fsub double %118, %120\l  %122 = fmul double %104, %119\l  %123 = fneg double %122\l  %124 = tail call double @llvm.fma.f64(double %104, double %119, double %123)\l  %125 = tail call double @llvm.fma.f64(double %104, double %121, double %124)\l  %126 = tail call double @llvm.fma.f64(double %106, double %119, double %125)\l  %127 = fadd double %122, %126\l  %128 = fsub double %127, %122\l  %129 = fsub double %126, %128\l  %130 = fadd double %97, %127\l  %131 = fsub double %130, %97\l  %132 = fsub double %127, %131\l  %133 = fadd double %98, %129\l  %134 = fadd double %133, %132\l  %135 = fadd double %130, %134\l  %136 = fsub double %135, %130\l  %137 = fsub double %134, %136\l  %138 = fadd double %94, %135\l  %139 = fsub double %138, %94\l  %140 = fsub double %138, %139\l  %141 = fsub double %94, %140\l  %142 = fsub double %135, %139\l  %143 = fadd double %142, %141\l  %144 = fadd double %96, %137\l  %145 = fsub double %144, %96\l  %146 = fsub double %144, %145\l  %147 = fsub double %96, %146\l  %148 = fsub double %137, %145\l  %149 = fadd double %148, %147\l  %150 = fadd double %144, %143\l  %151 = fadd double %138, %150\l  %152 = fsub double %151, %138\l  %153 = fsub double %150, %152\l  %154 = fadd double %149, %153\l  %155 = fadd double %151, %154\l  %156 = fsub double %155, %151\l  %157 = fsub double %154, %156\l  %158 = fmul double %38, %155\l  %159 = fneg double %158\l  %160 = tail call double @llvm.fma.f64(double %38, double %155, double %159)\l  %161 = tail call double @llvm.fma.f64(double %38, double %157, double %160)\l  %162 = fadd double %158, %161\l  %163 = fsub double %162, %158\l  %164 = fsub double %161, %163\l  %165 = tail call double @llvm.fabs.f64(double %158) #3\l  %166 = fcmp oeq double %165, 0x7FF0000000000000\l  %167 = select i1 %166, double %158, double %162\l  %168 = tail call double @llvm.fabs.f64(double %167) #3\l  %169 = fcmp oeq double %168, 0x7FF0000000000000\l  %170 = select i1 %169, double 0.000000e+00, double %164\l  %171 = fmul double %167, 0x3FF71547652B82FE\l  %172 = tail call double @llvm.rint.f64(double %171)\l  %173 = fneg double %172\l  %174 = tail call double @llvm.fma.f64(double %173, double\l... 0x3FE62E42FEFA39EF, double %167)\l  %175 = tail call double @llvm.fma.f64(double %173, double\l... 0x3C7ABC9E3B39803F, double %174)\l  %176 = tail call double @llvm.fma.f64(double %175, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %177 = tail call double @llvm.fma.f64(double %175, double %176, double\l... 0x3EC71DEE623FDE64)\l  %178 = tail call double @llvm.fma.f64(double %175, double %177, double\l... 0x3EFA01997C89E6B0)\l  %179 = tail call double @llvm.fma.f64(double %175, double %178, double\l... 0x3F2A01A014761F6E)\l  %180 = tail call double @llvm.fma.f64(double %175, double %179, double\l... 0x3F56C16C1852B7B0)\l  %181 = tail call double @llvm.fma.f64(double %175, double %180, double\l... 0x3F81111111122322)\l  %182 = tail call double @llvm.fma.f64(double %175, double %181, double\l... 0x3FA55555555502A1)\l  %183 = tail call double @llvm.fma.f64(double %175, double %182, double\l... 0x3FC5555555555511)\l  %184 = tail call double @llvm.fma.f64(double %175, double %183, double\l... 0x3FE000000000000B)\l  %185 = tail call double @llvm.fma.f64(double %175, double %184, double\l... 1.000000e+00)\l  %186 = tail call double @llvm.fma.f64(double %175, double %185, double\l... 1.000000e+00)\l  %187 = fptosi double %172 to i32\l  %188 = tail call double @llvm.amdgcn.ldexp.f64(double %186, i32 %187)\l  %189 = fcmp ogt double %167, 1.024000e+03\l  %190 = select i1 %189, double 0x7FF0000000000000, double %188\l  %191 = fcmp olt double %167, -1.075000e+03\l  %192 = select i1 %191, double 0.000000e+00, double %190\l  %193 = tail call double @llvm.fma.f64(double %192, double %170, double %192)\l  %194 = tail call double @llvm.fabs.f64(double %192) #3\l  %195 = fcmp oeq double %194, 0x7FF0000000000000\l  %196 = select i1 %195, double %192, double %193\l  %197 = tail call double @llvm.fabs.f64(double %38)\l  %198 = tail call double @llvm.trunc.f64(double %197)\l  %199 = fcmp oeq double %197, %198\l  %200 = zext i1 %199 to i32\l  %201 = fmul double %198, 5.000000e-01\l  %202 = tail call double @llvm.amdgcn.fract.f64(double %201)\l  %203 = tail call i1 @llvm.amdgcn.class.f64(double %201, i32 516)\l  %204 = select i1 %203, double 0.000000e+00, double %202\l  %205 = fcmp oeq double %204, 0.000000e+00\l  %206 = and i1 %199, %205\l  %207 = zext i1 %206 to i32\l  %208 = add nuw nsw i32 %207, %200\l  %209 = icmp eq i32 %208, 1\l  %210 = fcmp olt double %36, 0.000000e+00\l  %211 = and i1 %210, %209\l  %212 = select i1 %211, double -0.000000e+00, double 0.000000e+00\l  %213 = tail call double @llvm.copysign.f64(double %196, double %212)\l  %214 = fcmp uge double %36, 0.000000e+00\l  %215 = icmp ne i32 %208, 0\l  %216 = select i1 %214, i1 true, i1 %215\l  %217 = select i1 %216, double %213, double 0x7FF8000000000000\l  %218 = fcmp oeq double %197, 0x7FF0000000000000\l  %219 = fcmp oeq double %39, 1.000000e+00\l  %220 = fadd double %39, -1.000000e+00\l  %221 = bitcast double %38 to \<2 x i32\>\l  %222 = extractelement \<2 x i32\> %221, i64 1\l  %223 = bitcast double %220 to \<2 x i32\>\l  %224 = extractelement \<2 x i32\> %223, i64 1\l  %225 = xor i32 %224, %222\l  %226 = icmp sgt i32 %225, -1\l  %227 = select i1 %226, double 0x7FF0000000000000, double 0.000000e+00\l  %228 = select i1 %219, double %39, double %227\l  %229 = select i1 %218, double %228, double %217\l  %230 = fcmp oeq double %39, 0x7FF0000000000000\l  %231 = fcmp oeq double %36, 0.000000e+00\l  %232 = or i1 %231, %230\l  %233 = fcmp olt double %38, 0.000000e+00\l  %234 = xor i1 %231, %233\l  %235 = select i1 %234, double 0.000000e+00, double 0x7FF0000000000000\l  %236 = select i1 %209, double %36, double 0.000000e+00\l  %237 = tail call double @llvm.copysign.f64(double %235, double %236)\l  %238 = select i1 %232, double %237, double %229\l  %239 = fcmp uno double %36, %38\l  %240 = select i1 %239, double 0x7FF8000000000000, double %238\l  %241 = fcmp oeq double %36, 1.000000e+00\l  %242 = fcmp oeq double %38, 0.000000e+00\l  %243 = or i1 %241, %242\l  %244 = select i1 %243, double 1.000000e+00, double %240\l  %245 = getelementptr inbounds double, double addrspace(1)* %1, i64 %34\l  store double %244, double addrspace(1)* %245, align 8, !tbaa !16\l  br label %246\l}"];
	Node0x5917e20 -> Node0x5917eb0;
	Node0x5917eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%246:\l246:                                              \l  ret void\l}"];
}
