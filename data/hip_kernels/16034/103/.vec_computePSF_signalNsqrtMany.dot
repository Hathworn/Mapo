digraph "CFG for 'vec_computePSF_signalNsqrtMany' function" {
	label="CFG for 'vec_computePSF_signalNsqrtMany' function";

	Node0x4b81120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = add i32 %24, %18\l  %26 = udiv i32 %17, %14\l  %27 = mul i32 %26, %14\l  %28 = icmp ugt i32 %17, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = mul i32 %30, %25\l  %32 = add i32 %31, %9\l  %33 = mul i32 %32, %14\l  %34 = add i32 %33, %8\l  %35 = freeze i32 %34\l  %36 = icmp slt i32 %35, %0\l  br i1 %36, label %37, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4b81120:s0 -> Node0x4b85280;
	Node0x4b81120:s1 -> Node0x4b85310;
	Node0x4b85280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%37:\l37:                                               \l  %38 = srem i32 %35, %1\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %42 = sub nsw i32 %35, %38\l  %43 = shl nsw i32 %42, 1\l  %44 = add nsw i32 %43, %41\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds double, double addrspace(1)* %3, i64 %45\l  %47 = load double, double addrspace(1)* %46, align 8, !tbaa !20,\l... !amdgpu.noclobber !6\l  %48 = fdiv contract double %47, %4\l  %49 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %39\l  %50 = load i32, i32 addrspace(1)* %49, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %51 = add nsw i32 %50, %43\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %3, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !20,\l... !amdgpu.noclobber !6\l  %55 = fdiv contract double %54, %4\l  %56 = fmul contract double %48, %48\l  %57 = fmul contract double %55, %55\l  %58 = fadd contract double %56, %57\l  %59 = fcmp olt double %58, 0x1000000000000000\l  %60 = select i1 %59, double 0x4FF0000000000000, double 1.000000e+00\l  %61 = fmul double %58, %60\l  %62 = tail call double @llvm.amdgcn.rsq.f64(double %61)\l  %63 = fmul double %61, %62\l  %64 = fmul double %62, 5.000000e-01\l  %65 = fneg double %64\l  %66 = tail call double @llvm.fma.f64(double %65, double %63, double\l... 5.000000e-01)\l  %67 = tail call double @llvm.fma.f64(double %64, double %66, double %64)\l  %68 = tail call double @llvm.fma.f64(double %63, double %66, double %63)\l  %69 = fneg double %68\l  %70 = tail call double @llvm.fma.f64(double %69, double %68, double %61)\l  %71 = tail call double @llvm.fma.f64(double %70, double %67, double %68)\l  %72 = fneg double %71\l  %73 = tail call double @llvm.fma.f64(double %72, double %71, double %61)\l  %74 = tail call double @llvm.fma.f64(double %73, double %67, double %71)\l  %75 = select i1 %59, double 0x37F0000000000000, double 1.000000e+00\l  %76 = fmul double %75, %74\l  %77 = fcmp oeq double %61, 0.000000e+00\l  %78 = fcmp oeq double %61, 0x7FF0000000000000\l  %79 = or i1 %77, %78\l  %80 = select i1 %79, double %61, double %76\l  %81 = sext i32 %35 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %2, i64 %81\l  store double %80, double addrspace(1)* %82, align 8, !tbaa !20\l  br label %83\l}"];
	Node0x4b85280 -> Node0x4b85310;
	Node0x4b85310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%83:\l83:                                               \l  ret void\l}"];
}
