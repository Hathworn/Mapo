digraph "CFG for 'vec_log1p' function" {
	label="CFG for 'vec_log1p' function";

	Node0x49f7d40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %14\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = add i32 %27, %5\l  %29 = mul i32 %28, %10\l  %30 = add i32 %29, %4\l  %31 = icmp slt i32 %30, %0\l  br i1 %31, label %32, label %159\l|{<s0>T|<s1>F}}"];
	Node0x49f7d40:s0 -> Node0x49fbd80;
	Node0x49f7d40:s1 -> Node0x49fbe10;
	Node0x49fbd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%32:\l32:                                               \l  %33 = sext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = fadd double %35, 1.000000e+00\l  %37 = fadd double %36, -1.000000e+00\l  %38 = fsub double %37, %36\l  %39 = fadd double %38, 1.000000e+00\l  %40 = fsub double %35, %37\l  %41 = fadd double %40, %39\l  %42 = tail call double @llvm.amdgcn.frexp.mant.f64(double %36)\l  %43 = fcmp olt double %42, 0x3FE5555555555555\l  %44 = sext i1 %43 to i32\l  %45 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %36)\l  %46 = add i32 %45, %44\l  %47 = sub nsw i32 0, %46\l  %48 = tail call double @llvm.amdgcn.ldexp.f64(double %36, i32 %47)\l  %49 = tail call double @llvm.amdgcn.ldexp.f64(double %41, i32 %47)\l  %50 = fadd double %48, -1.000000e+00\l  %51 = fadd double %50, 1.000000e+00\l  %52 = fsub double %48, %51\l  %53 = fadd double %49, %52\l  %54 = fadd double %50, %53\l  %55 = fsub double %54, %50\l  %56 = fsub double %53, %55\l  %57 = fadd double %48, 1.000000e+00\l  %58 = fadd double %57, -1.000000e+00\l  %59 = fsub double %48, %58\l  %60 = fadd double %49, %59\l  %61 = fadd double %57, %60\l  %62 = fsub double %61, %57\l  %63 = fsub double %60, %62\l  %64 = tail call double @llvm.amdgcn.rcp.f64(double %61)\l  %65 = fneg double %61\l  %66 = tail call double @llvm.fma.f64(double %65, double %64, double\l... 1.000000e+00)\l  %67 = tail call double @llvm.fma.f64(double %66, double %64, double %64)\l  %68 = tail call double @llvm.fma.f64(double %65, double %67, double\l... 1.000000e+00)\l  %69 = tail call double @llvm.fma.f64(double %68, double %67, double %67)\l  %70 = fmul double %54, %69\l  %71 = fmul double %61, %70\l  %72 = fneg double %71\l  %73 = tail call double @llvm.fma.f64(double %70, double %61, double %72)\l  %74 = tail call double @llvm.fma.f64(double %70, double %63, double %73)\l  %75 = fadd double %71, %74\l  %76 = fsub double %75, %71\l  %77 = fsub double %74, %76\l  %78 = fsub double %54, %75\l  %79 = fsub double %54, %78\l  %80 = fsub double %79, %75\l  %81 = fadd double %56, %80\l  %82 = fsub double %81, %77\l  %83 = fadd double %78, %82\l  %84 = fsub double %83, %78\l  %85 = fsub double %82, %84\l  %86 = fmul double %69, %83\l  %87 = fmul double %61, %86\l  %88 = fneg double %87\l  %89 = tail call double @llvm.fma.f64(double %86, double %61, double %88)\l  %90 = tail call double @llvm.fma.f64(double %86, double %63, double %89)\l  %91 = fadd double %87, %90\l  %92 = fsub double %91, %87\l  %93 = fsub double %90, %92\l  %94 = fsub double %83, %91\l  %95 = fsub double %83, %94\l  %96 = fsub double %95, %91\l  %97 = fadd double %85, %96\l  %98 = fsub double %97, %93\l  %99 = fadd double %94, %98\l  %100 = fmul double %69, %99\l  %101 = fadd double %70, %86\l  %102 = fsub double %101, %70\l  %103 = fsub double %86, %102\l  %104 = fadd double %103, %100\l  %105 = fadd double %101, %104\l  %106 = fsub double %105, %101\l  %107 = fsub double %104, %106\l  %108 = fmul double %105, %105\l  %109 = tail call double @llvm.fma.f64(double %108, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %110 = tail call double @llvm.fma.f64(double %108, double %109, double\l... 0x3FC7474DD7F4DF2E)\l  %111 = tail call double @llvm.fma.f64(double %108, double %110, double\l... 0x3FCC71C016291751)\l  %112 = tail call double @llvm.fma.f64(double %108, double %111, double\l... 0x3FD249249B27ACF1)\l  %113 = tail call double @llvm.fma.f64(double %108, double %112, double\l... 0x3FD99999998EF7B6)\l  %114 = tail call double @llvm.fma.f64(double %108, double %113, double\l... 0x3FE5555555555780)\l  %115 = sitofp i32 %46 to double\l  %116 = fmul double %115, 0x3FE62E42FEFA39EF\l  %117 = fneg double %116\l  %118 = tail call double @llvm.fma.f64(double %115, double\l... 0x3FE62E42FEFA39EF, double %117)\l  %119 = tail call double @llvm.fma.f64(double %115, double\l... 0x3C7ABC9E3B39803F, double %118)\l  %120 = fadd double %116, %119\l  %121 = fsub double %120, %116\l  %122 = fsub double %119, %121\l  %123 = tail call double @llvm.amdgcn.ldexp.f64(double %105, i32 1)\l  %124 = tail call double @llvm.amdgcn.ldexp.f64(double %107, i32 1)\l  %125 = fmul double %105, %108\l  %126 = fmul double %125, %114\l  %127 = fadd double %123, %126\l  %128 = fsub double %127, %123\l  %129 = fsub double %126, %128\l  %130 = fadd double %124, %129\l  %131 = fadd double %127, %130\l  %132 = fsub double %131, %127\l  %133 = fsub double %130, %132\l  %134 = fadd double %120, %131\l  %135 = fsub double %134, %120\l  %136 = fsub double %134, %135\l  %137 = fsub double %120, %136\l  %138 = fsub double %131, %135\l  %139 = fadd double %138, %137\l  %140 = fadd double %122, %133\l  %141 = fsub double %140, %122\l  %142 = fsub double %140, %141\l  %143 = fsub double %122, %142\l  %144 = fsub double %133, %141\l  %145 = fadd double %144, %143\l  %146 = fadd double %140, %139\l  %147 = fadd double %134, %146\l  %148 = fsub double %147, %134\l  %149 = fsub double %146, %148\l  %150 = fadd double %145, %149\l  %151 = fadd double %147, %150\l  %152 = tail call i1 @llvm.amdgcn.class.f64(double %35, i32 512)\l  %153 = select i1 %152, double %35, double %151\l  %154 = fcmp olt double %35, -1.000000e+00\l  %155 = select i1 %154, double 0x7FF8000000000000, double %153\l  %156 = fcmp oeq double %35, -1.000000e+00\l  %157 = select i1 %156, double 0xFFF0000000000000, double %155\l  %158 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  store double %157, double addrspace(1)* %158, align 8, !tbaa !16\l  br label %159\l}"];
	Node0x49fbd80 -> Node0x49fbe10;
	Node0x49fbe10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%159:\l159:                                              \l  ret void\l}"];
}
