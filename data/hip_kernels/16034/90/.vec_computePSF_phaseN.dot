digraph "CFG for 'vec_computePSF_phaseN' function" {
	label="CFG for 'vec_computePSF_phaseN' function";

	Node0x51129e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %15, i64 12\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 4, !tbaa !7\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %25 = getelementptr i8, i8 addrspace(4)* %15, i64 6\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 2, !range !5, !invariant.load !6\l  %28 = zext i16 %27 to i32\l  %29 = mul i32 %24, %28\l  %30 = add i32 %29, %23\l  %31 = udiv i32 %22, %19\l  %32 = mul i32 %31, %19\l  %33 = icmp ugt i32 %22, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = mul i32 %35, %30\l  %37 = add i32 %36, %14\l  %38 = mul i32 %37, %19\l  %39 = add i32 %38, %13\l  %40 = icmp slt i32 %39, %0\l  br i1 %40, label %41, label %263\l|{<s0>T|<s1>F}}"];
	Node0x51129e0:s0 -> Node0x51176c0;
	Node0x51129e0:s1 -> Node0x5117750;
	Node0x51176c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%41:\l41:                                               \l  %42 = sext i32 %39 to i64\l  %43 = getelementptr inbounds double, double addrspace(1)* %1, i64 %42\l  %44 = load double, double addrspace(1)* %43, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %45 = fmul contract double %44, %6\l  %46 = getelementptr inbounds double, double addrspace(1)* %2, i64 %42\l  %47 = load double, double addrspace(1)* %46, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %48 = fmul contract double %47, %7\l  %49 = fadd contract double %45, %48\l  %50 = getelementptr inbounds double, double addrspace(1)* %3, i64 %42\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %52 = fmul contract double %51, %8\l  %53 = fadd contract double %49, %52\l  %54 = getelementptr inbounds double, double addrspace(1)* %5, i64 %42\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %56 = fadd contract double %55, %53\l  %57 = getelementptr inbounds double, double addrspace(1)* %4, i64 %42\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %59 = tail call double @llvm.fabs.f64(double %56)\l  %60 = fcmp olt double %59, 0x41D0000000000000\l  br i1 %60, label %61, label %118\l|{<s0>T|<s1>F}}"];
	Node0x51176c0:s0 -> Node0x51196e0;
	Node0x51176c0:s1 -> Node0x5119770;
	Node0x51196e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%61:\l61:                                               \l  %62 = fmul double %59, 0x3FE45F306DC9C883\l  %63 = tail call double @llvm.rint.f64(double %62)\l  %64 = tail call double @llvm.fma.f64(double %63, double 0xBFF921FB54442D18,\l... double %59)\l  %65 = tail call double @llvm.fma.f64(double %63, double 0xBC91A62633145C00,\l... double %64)\l  %66 = fmul double %63, 0x3C91A62633145C00\l  %67 = fneg double %66\l  %68 = tail call double @llvm.fma.f64(double %63, double 0x3C91A62633145C00,\l... double %67)\l  %69 = fsub double %64, %66\l  %70 = fsub double %64, %69\l  %71 = fsub double %70, %66\l  %72 = fsub double %69, %65\l  %73 = fadd double %72, %71\l  %74 = fsub double %73, %68\l  %75 = tail call double @llvm.fma.f64(double %63, double 0xB97B839A252049C0,\l... double %74)\l  %76 = fadd double %65, %75\l  %77 = fsub double %76, %65\l  %78 = fsub double %75, %77\l  %79 = fptosi double %63 to i32\l  %80 = fmul double %76, %76\l  %81 = fmul double %80, 5.000000e-01\l  %82 = fsub double 1.000000e+00, %81\l  %83 = fsub double 1.000000e+00, %82\l  %84 = fsub double %83, %81\l  %85 = fmul double %80, %80\l  %86 = tail call double @llvm.fma.f64(double %80, double 0xBDA907DB46CC5E42,\l... double 0x3E21EEB69037AB78)\l  %87 = tail call double @llvm.fma.f64(double %80, double %86, double\l... 0xBE927E4FA17F65F6)\l  %88 = tail call double @llvm.fma.f64(double %80, double %87, double\l... 0x3EFA01A019F4EC90)\l  %89 = tail call double @llvm.fma.f64(double %80, double %88, double\l... 0xBF56C16C16C16967)\l  %90 = tail call double @llvm.fma.f64(double %80, double %89, double\l... 0x3FA5555555555555)\l  %91 = fneg double %78\l  %92 = tail call double @llvm.fma.f64(double %76, double %91, double %84)\l  %93 = tail call double @llvm.fma.f64(double %85, double %90, double %92)\l  %94 = fadd double %82, %93\l  %95 = tail call double @llvm.fma.f64(double %80, double 0x3DE5E0B2F9A43BB8,\l... double 0xBE5AE600B42FDFA7)\l  %96 = tail call double @llvm.fma.f64(double %80, double %95, double\l... 0x3EC71DE3796CDE01)\l  %97 = tail call double @llvm.fma.f64(double %80, double %96, double\l... 0xBF2A01A019E83E5C)\l  %98 = tail call double @llvm.fma.f64(double %80, double %97, double\l... 0x3F81111111110BB3)\l  %99 = fneg double %80\l  %100 = fmul double %76, %99\l  %101 = fmul double %78, 5.000000e-01\l  %102 = tail call double @llvm.fma.f64(double %100, double %98, double %101)\l  %103 = tail call double @llvm.fma.f64(double %80, double %102, double %91)\l  %104 = tail call double @llvm.fma.f64(double %100, double\l... 0xBFC5555555555555, double %103)\l  %105 = fsub double %76, %104\l  %106 = fneg double %105\l  %107 = and i32 %79, 1\l  %108 = icmp eq i32 %107, 0\l  %109 = select i1 %108, double %94, double %106\l  %110 = bitcast double %109 to \<2 x i32\>\l  %111 = shl i32 %79, 30\l  %112 = and i32 %111, -2147483648\l  %113 = extractelement \<2 x i32\> %110, i64 1\l  %114 = xor i32 %113, %112\l  %115 = insertelement \<2 x i32\> %110, i32 %114, i64 1\l  %116 = tail call i1 @llvm.amdgcn.class.f64(double %59, i32 504)\l  %117 = select i1 %116, \<2 x i32\> %115, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %232\l}"];
	Node0x51196e0 -> Node0x511d6c0;
	Node0x5119770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%118:\l118:                                              \l  %119 = tail call double @llvm.amdgcn.trig.preop.f64(double %59, i32 0)\l  %120 = tail call double @llvm.amdgcn.trig.preop.f64(double %59, i32 1)\l  %121 = tail call double @llvm.amdgcn.trig.preop.f64(double %59, i32 2)\l  %122 = fcmp oge double %59, 0x7B00000000000000\l  %123 = tail call double @llvm.amdgcn.ldexp.f64(double %59, i32 -128)\l  %124 = select i1 %122, double %123, double %59\l  %125 = fmul double %121, %124\l  %126 = fneg double %125\l  %127 = tail call double @llvm.fma.f64(double %121, double %124, double %126)\l  %128 = fmul double %120, %124\l  %129 = fneg double %128\l  %130 = tail call double @llvm.fma.f64(double %120, double %124, double %129)\l  %131 = fmul double %119, %124\l  %132 = fneg double %131\l  %133 = tail call double @llvm.fma.f64(double %119, double %124, double %132)\l  %134 = fadd double %128, %133\l  %135 = fsub double %134, %128\l  %136 = fsub double %134, %135\l  %137 = fsub double %133, %135\l  %138 = fsub double %128, %136\l  %139 = fadd double %137, %138\l  %140 = fadd double %125, %130\l  %141 = fsub double %140, %125\l  %142 = fsub double %140, %141\l  %143 = fsub double %130, %141\l  %144 = fsub double %125, %142\l  %145 = fadd double %143, %144\l  %146 = fadd double %140, %139\l  %147 = fsub double %146, %140\l  %148 = fsub double %146, %147\l  %149 = fsub double %139, %147\l  %150 = fsub double %140, %148\l  %151 = fadd double %149, %150\l  %152 = fadd double %145, %151\l  %153 = fadd double %127, %152\l  %154 = fadd double %131, %134\l  %155 = fsub double %154, %131\l  %156 = fsub double %134, %155\l  %157 = fadd double %156, %146\l  %158 = fsub double %157, %156\l  %159 = fsub double %146, %158\l  %160 = fadd double %159, %153\l  %161 = tail call double @llvm.amdgcn.ldexp.f64(double %154, i32 -2)\l  %162 = tail call double @llvm.amdgcn.fract.f64(double %161)\l  %163 = tail call i1 @llvm.amdgcn.class.f64(double %161, i32 516)\l  %164 = select i1 %163, double 0.000000e+00, double %162\l  %165 = tail call double @llvm.amdgcn.ldexp.f64(double %164, i32 2)\l  %166 = fadd double %165, %157\l  %167 = fcmp olt double %166, 0.000000e+00\l  %168 = select i1 %167, double 4.000000e+00, double 0.000000e+00\l  %169 = fadd double %165, %168\l  %170 = fadd double %157, %169\l  %171 = fptosi double %170 to i32\l  %172 = sitofp i32 %171 to double\l  %173 = fsub double %169, %172\l  %174 = fadd double %157, %173\l  %175 = fsub double %174, %173\l  %176 = fsub double %157, %175\l  %177 = fadd double %160, %176\l  %178 = fcmp oge double %174, 5.000000e-01\l  %179 = zext i1 %178 to i32\l  %180 = add nsw i32 %179, %171\l  %181 = select i1 %178, double 1.000000e+00, double 0.000000e+00\l  %182 = fsub double %174, %181\l  %183 = fadd double %182, %177\l  %184 = fsub double %183, %182\l  %185 = fsub double %177, %184\l  %186 = fmul double %183, 0x3FF921FB54442D18\l  %187 = fneg double %186\l  %188 = tail call double @llvm.fma.f64(double %183, double\l... 0x3FF921FB54442D18, double %187)\l  %189 = tail call double @llvm.fma.f64(double %183, double\l... 0x3C91A62633145C07, double %188)\l  %190 = tail call double @llvm.fma.f64(double %185, double\l... 0x3FF921FB54442D18, double %189)\l  %191 = fadd double %186, %190\l  %192 = fsub double %191, %186\l  %193 = fsub double %190, %192\l  %194 = fmul double %191, %191\l  %195 = fmul double %194, 5.000000e-01\l  %196 = fsub double 1.000000e+00, %195\l  %197 = fsub double 1.000000e+00, %196\l  %198 = fsub double %197, %195\l  %199 = fmul double %194, %194\l  %200 = tail call double @llvm.fma.f64(double %194, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %201 = tail call double @llvm.fma.f64(double %194, double %200, double\l... 0xBE927E4FA17F65F6)\l  %202 = tail call double @llvm.fma.f64(double %194, double %201, double\l... 0x3EFA01A019F4EC90)\l  %203 = tail call double @llvm.fma.f64(double %194, double %202, double\l... 0xBF56C16C16C16967)\l  %204 = tail call double @llvm.fma.f64(double %194, double %203, double\l... 0x3FA5555555555555)\l  %205 = fneg double %193\l  %206 = tail call double @llvm.fma.f64(double %191, double %205, double %198)\l  %207 = tail call double @llvm.fma.f64(double %199, double %204, double %206)\l  %208 = fadd double %196, %207\l  %209 = tail call double @llvm.fma.f64(double %194, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %210 = tail call double @llvm.fma.f64(double %194, double %209, double\l... 0x3EC71DE3796CDE01)\l  %211 = tail call double @llvm.fma.f64(double %194, double %210, double\l... 0xBF2A01A019E83E5C)\l  %212 = tail call double @llvm.fma.f64(double %194, double %211, double\l... 0x3F81111111110BB3)\l  %213 = fneg double %194\l  %214 = fmul double %191, %213\l  %215 = fmul double %193, 5.000000e-01\l  %216 = tail call double @llvm.fma.f64(double %214, double %212, double %215)\l  %217 = tail call double @llvm.fma.f64(double %194, double %216, double %205)\l  %218 = tail call double @llvm.fma.f64(double %214, double\l... 0xBFC5555555555555, double %217)\l  %219 = fsub double %191, %218\l  %220 = fneg double %219\l  %221 = and i32 %180, 1\l  %222 = icmp eq i32 %221, 0\l  %223 = select i1 %222, double %208, double %220\l  %224 = bitcast double %223 to \<2 x i32\>\l  %225 = shl i32 %180, 30\l  %226 = and i32 %225, -2147483648\l  %227 = extractelement \<2 x i32\> %224, i64 1\l  %228 = xor i32 %227, %226\l  %229 = insertelement \<2 x i32\> %224, i32 %228, i64 1\l  %230 = tail call i1 @llvm.amdgcn.class.f64(double %59, i32 504)\l  %231 = select i1 %230, \<2 x i32\> %229, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %232\l}"];
	Node0x5119770 -> Node0x511d6c0;
	Node0x511d6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%232:\l232:                                              \l  %233 = phi \<2 x i32\> [ %117, %61 ], [ %231, %118 ]\l  %234 = phi i32 [ %111, %61 ], [ %225, %118 ]\l  %235 = phi i32 [ %107, %61 ], [ %221, %118 ]\l  %236 = phi double [ %105, %61 ], [ %219, %118 ]\l  %237 = phi double [ %94, %61 ], [ %208, %118 ]\l  %238 = phi i1 [ %116, %61 ], [ %230, %118 ]\l  %239 = bitcast \<2 x i32\> %233 to double\l  %240 = fmul contract double %58, %239\l  %241 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %42\l  %242 = load i32, i32 addrspace(1)* %241, align 4, !tbaa !20\l  %243 = sext i32 %242 to i64\l  %244 = getelementptr inbounds double, double addrspace(1)* %11, i64 %243\l  store double %240, double addrspace(1)* %244, align 8, !tbaa !16\l  %245 = load double, double addrspace(1)* %57, align 8, !tbaa !16\l  %246 = icmp eq i32 %235, 0\l  %247 = select i1 %246, double %236, double %237\l  %248 = bitcast double %247 to \<2 x i32\>\l  %249 = bitcast double %56 to \<2 x i32\>\l  %250 = extractelement \<2 x i32\> %249, i64 1\l  %251 = xor i32 %234, %250\l  %252 = and i32 %251, -2147483648\l  %253 = extractelement \<2 x i32\> %248, i64 1\l  %254 = xor i32 %253, %252\l  %255 = insertelement \<2 x i32\> %248, i32 %254, i64 1\l  %256 = select i1 %238, \<2 x i32\> %255, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %257 = bitcast \<2 x i32\> %256 to double\l  %258 = fmul contract double %245, %257\l  %259 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %42\l  %260 = load i32, i32 addrspace(1)* %259, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %261 = sext i32 %260 to i64\l  %262 = getelementptr inbounds double, double addrspace(1)* %11, i64 %261\l  store double %258, double addrspace(1)* %262, align 8, !tbaa !16\l  br label %263\l}"];
	Node0x511d6c0 -> Node0x5117750;
	Node0x5117750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%263:\l263:                                              \l  ret void\l}"];
}
