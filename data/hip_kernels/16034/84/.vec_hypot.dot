digraph "CFG for 'vec_hypot' function" {
	label="CFG for 'vec_hypot' function";

	Node0x5fd8050 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = udiv i32 %14, %11\l  %24 = mul i32 %23, %11\l  %25 = icmp ugt i32 %14, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %22\l  %29 = add i32 %28, %6\l  %30 = mul i32 %29, %11\l  %31 = add i32 %30, %5\l  %32 = icmp slt i32 %31, %0\l  br i1 %32, label %33, label %68\l|{<s0>T|<s1>F}}"];
	Node0x5fd8050:s0 -> Node0x5fdaa70;
	Node0x5fd8050:s1 -> Node0x5fdab00;
	Node0x5fdaa70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%33:\l33:                                               \l  %34 = sext i32 %31 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %2, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %37 = getelementptr inbounds double, double addrspace(1)* %3, i64 %34\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %39 = tail call double @llvm.fabs.f64(double %36)\l  %40 = tail call double @llvm.fabs.f64(double %38)\l  %41 = tail call double @llvm.maxnum.f64(double %39, double %40)\l  %42 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %41)\l  %43 = sub nsw i32 0, %42\l  %44 = tail call double @llvm.amdgcn.ldexp.f64(double %39, i32 %43)\l  %45 = tail call double @llvm.amdgcn.ldexp.f64(double %40, i32 %43)\l  %46 = fmul double %45, %45\l  %47 = tail call double @llvm.fma.f64(double %44, double %44, double %46)\l  %48 = tail call double @llvm.amdgcn.rsq.f64(double %47)\l  %49 = fmul double %47, %48\l  %50 = fmul double %48, 5.000000e-01\l  %51 = fneg double %50\l  %52 = tail call double @llvm.fma.f64(double %51, double %49, double\l... 5.000000e-01)\l  %53 = tail call double @llvm.fma.f64(double %50, double %52, double %50)\l  %54 = tail call double @llvm.fma.f64(double %49, double %52, double %49)\l  %55 = fneg double %54\l  %56 = tail call double @llvm.fma.f64(double %55, double %54, double %47)\l  %57 = tail call double @llvm.fma.f64(double %56, double %53, double %54)\l  %58 = fcmp oeq double %47, 0.000000e+00\l  %59 = select i1 %58, double %47, double %57\l  %60 = tail call double @llvm.amdgcn.ldexp.f64(double %59, i32 %42)\l  %61 = fcmp uno double %36, %38\l  %62 = select i1 %61, double 0x7FF8000000000000, double %60\l  %63 = fcmp oeq double %39, 0x7FF0000000000000\l  %64 = fcmp oeq double %40, 0x7FF0000000000000\l  %65 = or i1 %63, %64\l  %66 = select i1 %65, double 0x7FF0000000000000, double %62\l  %67 = getelementptr inbounds double, double addrspace(1)* %1, i64 %34\l  store double %66, double addrspace(1)* %67, align 8, !tbaa !16\l  br label %68\l}"];
	Node0x5fdaa70 -> Node0x5fdab00;
	Node0x5fdab00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%68:\l68:                                               \l  ret void\l}"];
}
