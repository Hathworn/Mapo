digraph "CFG for 'vec_asinh' function" {
	label="CFG for 'vec_asinh' function";

	Node0x47fd950 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %14\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = add i32 %27, %5\l  %29 = mul i32 %28, %10\l  %30 = add i32 %29, %4\l  %31 = icmp slt i32 %30, %0\l  br i1 %31, label %32, label %217\l|{<s0>T|<s1>F}}"];
	Node0x47fd950:s0 -> Node0x4801990;
	Node0x47fd950:s1 -> Node0x4801a20;
	Node0x4801990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%32:\l32:                                               \l  %33 = sext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = tail call double @llvm.fabs.f64(double %35)\l  %37 = fcmp oge double %36, 0x5FF0000000000000\l  %38 = select i1 %37, double 0x1FF0000000000000, double 1.000000e+00\l  %39 = fmul double %36, %38\l  %40 = fmul double %39, %39\l  %41 = fneg double %40\l  %42 = tail call double @llvm.fma.f64(double %39, double %39, double %41)\l  %43 = select i1 %37, double 0x4000000000000, double 1.000000e+00\l  %44 = fadd double %43, %40\l  %45 = fsub double %44, %40\l  %46 = fsub double %44, %45\l  %47 = fsub double %40, %46\l  %48 = fsub double %43, %45\l  %49 = fadd double %48, %47\l  %50 = fadd double %42, %49\l  %51 = fadd double %44, %50\l  %52 = fsub double %51, %44\l  %53 = fsub double %50, %52\l  %54 = tail call double @llvm.amdgcn.rsq.f64(double %51)\l  %55 = fmul double %51, %54\l  %56 = fmul double %54, 5.000000e-01\l  %57 = fneg double %56\l  %58 = tail call double @llvm.fma.f64(double %57, double %55, double\l... 5.000000e-01)\l  %59 = tail call double @llvm.fma.f64(double %56, double %58, double %56)\l  %60 = tail call double @llvm.fma.f64(double %55, double %58, double %55)\l  %61 = fneg double %60\l  %62 = tail call double @llvm.fma.f64(double %61, double %60, double %51)\l  %63 = tail call double @llvm.fma.f64(double %62, double %59, double %60)\l  %64 = fcmp oeq double %51, 0.000000e+00\l  %65 = select i1 %64, double %51, double %63\l  %66 = fmul double %65, %65\l  %67 = fneg double %66\l  %68 = tail call double @llvm.fma.f64(double %65, double %65, double %67)\l  %69 = fsub double %51, %66\l  %70 = fsub double %51, %69\l  %71 = fsub double %70, %66\l  %72 = fadd double %53, %71\l  %73 = fsub double %72, %68\l  %74 = fadd double %69, %73\l  %75 = fmul double %65, 2.000000e+00\l  %76 = tail call double @llvm.amdgcn.rcp.f64(double %75)\l  %77 = fneg double %75\l  %78 = tail call double @llvm.fma.f64(double %77, double %76, double\l... 1.000000e+00)\l  %79 = tail call double @llvm.fma.f64(double %78, double %76, double %76)\l  %80 = tail call double @llvm.fma.f64(double %77, double %79, double\l... 1.000000e+00)\l  %81 = tail call double @llvm.fma.f64(double %80, double %79, double %79)\l  %82 = fmul double %81, %74\l  %83 = tail call double @llvm.fma.f64(double %77, double %82, double %74)\l  %84 = tail call double @llvm.fma.f64(double %83, double %81, double %82)\l  %85 = select i1 %64, double 0.000000e+00, double %84\l  %86 = fadd double %65, %85\l  %87 = fsub double %86, %65\l  %88 = fsub double %85, %87\l  %89 = fadd double %39, %86\l  %90 = fsub double %89, %39\l  %91 = fsub double %89, %90\l  %92 = fsub double %39, %91\l  %93 = fsub double %86, %90\l  %94 = fadd double %93, %92\l  %95 = fadd double %88, %94\l  %96 = fadd double %89, %95\l  %97 = fsub double %96, %89\l  %98 = fsub double %95, %97\l  %99 = select i1 %37, i32 512, i32 0\l  %100 = tail call double @llvm.amdgcn.frexp.mant.f64(double %96)\l  %101 = fcmp olt double %100, 0x3FE5555555555555\l  %102 = sext i1 %101 to i32\l  %103 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %96)\l  %104 = add i32 %103, %102\l  %105 = sub nsw i32 0, %104\l  %106 = tail call double @llvm.amdgcn.ldexp.f64(double %96, i32 %105)\l  %107 = tail call double @llvm.amdgcn.ldexp.f64(double %98, i32 %105)\l  %108 = fadd double %106, -1.000000e+00\l  %109 = fadd double %108, 1.000000e+00\l  %110 = fsub double %106, %109\l  %111 = fadd double %107, %110\l  %112 = fadd double %108, %111\l  %113 = fsub double %112, %108\l  %114 = fsub double %111, %113\l  %115 = fadd double %106, 1.000000e+00\l  %116 = fadd double %115, -1.000000e+00\l  %117 = fsub double %106, %116\l  %118 = fadd double %107, %117\l  %119 = fadd double %115, %118\l  %120 = fsub double %119, %115\l  %121 = fsub double %118, %120\l  %122 = tail call double @llvm.amdgcn.rcp.f64(double %119)\l  %123 = fneg double %119\l  %124 = tail call double @llvm.fma.f64(double %123, double %122, double\l... 1.000000e+00)\l  %125 = tail call double @llvm.fma.f64(double %124, double %122, double %122)\l  %126 = tail call double @llvm.fma.f64(double %123, double %125, double\l... 1.000000e+00)\l  %127 = tail call double @llvm.fma.f64(double %126, double %125, double %125)\l  %128 = fmul double %112, %127\l  %129 = fmul double %119, %128\l  %130 = fneg double %129\l  %131 = tail call double @llvm.fma.f64(double %128, double %119, double %130)\l  %132 = tail call double @llvm.fma.f64(double %128, double %121, double %131)\l  %133 = fadd double %129, %132\l  %134 = fsub double %133, %129\l  %135 = fsub double %132, %134\l  %136 = fsub double %112, %133\l  %137 = fsub double %112, %136\l  %138 = fsub double %137, %133\l  %139 = fadd double %114, %138\l  %140 = fsub double %139, %135\l  %141 = fadd double %136, %140\l  %142 = fsub double %141, %136\l  %143 = fsub double %140, %142\l  %144 = fmul double %127, %141\l  %145 = fmul double %119, %144\l  %146 = fneg double %145\l  %147 = tail call double @llvm.fma.f64(double %144, double %119, double %146)\l  %148 = tail call double @llvm.fma.f64(double %144, double %121, double %147)\l  %149 = fadd double %145, %148\l  %150 = fsub double %149, %145\l  %151 = fsub double %148, %150\l  %152 = fsub double %141, %149\l  %153 = fsub double %141, %152\l  %154 = fsub double %153, %149\l  %155 = fadd double %143, %154\l  %156 = fsub double %155, %151\l  %157 = fadd double %152, %156\l  %158 = fmul double %127, %157\l  %159 = fadd double %128, %144\l  %160 = fsub double %159, %128\l  %161 = fsub double %144, %160\l  %162 = fadd double %161, %158\l  %163 = fadd double %159, %162\l  %164 = fsub double %163, %159\l  %165 = fsub double %162, %164\l  %166 = fmul double %163, %163\l  %167 = tail call double @llvm.fma.f64(double %166, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %168 = tail call double @llvm.fma.f64(double %166, double %167, double\l... 0x3FC7474DD7F4DF2E)\l  %169 = tail call double @llvm.fma.f64(double %166, double %168, double\l... 0x3FCC71C016291751)\l  %170 = tail call double @llvm.fma.f64(double %166, double %169, double\l... 0x3FD249249B27ACF1)\l  %171 = tail call double @llvm.fma.f64(double %166, double %170, double\l... 0x3FD99999998EF7B6)\l  %172 = tail call double @llvm.fma.f64(double %166, double %171, double\l... 0x3FE5555555555780)\l  %173 = add nsw i32 %104, %99\l  %174 = sitofp i32 %173 to double\l  %175 = fmul double %174, 0x3FE62E42FEFA39EF\l  %176 = fneg double %175\l  %177 = tail call double @llvm.fma.f64(double %174, double\l... 0x3FE62E42FEFA39EF, double %176)\l  %178 = tail call double @llvm.fma.f64(double %174, double\l... 0x3C7ABC9E3B39803F, double %177)\l  %179 = fadd double %175, %178\l  %180 = fsub double %179, %175\l  %181 = fsub double %178, %180\l  %182 = tail call double @llvm.amdgcn.ldexp.f64(double %163, i32 1)\l  %183 = tail call double @llvm.amdgcn.ldexp.f64(double %165, i32 1)\l  %184 = fmul double %163, %166\l  %185 = fmul double %184, %172\l  %186 = fadd double %182, %185\l  %187 = fsub double %186, %182\l  %188 = fsub double %185, %187\l  %189 = fadd double %183, %188\l  %190 = fadd double %186, %189\l  %191 = fsub double %190, %186\l  %192 = fsub double %189, %191\l  %193 = fadd double %179, %190\l  %194 = fsub double %193, %179\l  %195 = fsub double %193, %194\l  %196 = fsub double %179, %195\l  %197 = fsub double %190, %194\l  %198 = fadd double %197, %196\l  %199 = fadd double %181, %192\l  %200 = fsub double %199, %181\l  %201 = fsub double %199, %200\l  %202 = fsub double %181, %201\l  %203 = fsub double %192, %200\l  %204 = fadd double %203, %202\l  %205 = fadd double %199, %198\l  %206 = fadd double %193, %205\l  %207 = fsub double %206, %193\l  %208 = fsub double %205, %207\l  %209 = fadd double %204, %208\l  %210 = fadd double %206, %209\l  %211 = fcmp olt double %36, 0x3E40000000000000\l  %212 = tail call i1 @llvm.amdgcn.class.f64(double %36, i32 512)\l  %213 = select i1 %212, i1 true, i1 %211\l  %214 = select i1 %213, double %36, double %210\l  %215 = tail call double @llvm.copysign.f64(double %214, double %35)\l  %216 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  store double %215, double addrspace(1)* %216, align 8, !tbaa !16\l  br label %217\l}"];
	Node0x4801990 -> Node0x4801a20;
	Node0x4801a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%217:\l217:                                              \l  ret void\l}"];
}
