digraph "CFG for 'vec_cospi' function" {
	label="CFG for 'vec_cospi' function";

	Node0x62dd260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %14\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = add i32 %27, %5\l  %29 = mul i32 %28, %10\l  %30 = add i32 %29, %4\l  %31 = icmp slt i32 %30, %0\l  br i1 %31, label %32, label %78\l|{<s0>T|<s1>F}}"];
	Node0x62dd260:s0 -> Node0x62e12a0;
	Node0x62dd260:s1 -> Node0x62e1330;
	Node0x62e12a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%32:\l32:                                               \l  %33 = sext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = tail call double @llvm.fabs.f64(double %35)\l  %37 = fmul double %36, 5.000000e-01\l  %38 = tail call double @llvm.amdgcn.fract.f64(double %37)\l  %39 = tail call i1 @llvm.amdgcn.class.f64(double %37, i32 516)\l  %40 = fmul double %38, 2.000000e+00\l  %41 = select i1 %39, double 0.000000e+00, double %40\l  %42 = fcmp ogt double %36, 1.000000e+00\l  %43 = select i1 %42, double %41, double %36\l  %44 = fmul double %43, 2.000000e+00\l  %45 = tail call double @llvm.rint.f64(double %44)\l  %46 = tail call double @llvm.fma.f64(double %45, double -5.000000e-01,\l... double %43)\l  %47 = fptosi double %45 to i32\l  %48 = fmul double %46, %46\l  %49 = tail call double @llvm.fma.f64(double %48, double 0x3F3E357EF99EB0BB,\l... double 0xBF7E2FE76FDFFD2B)\l  %50 = tail call double @llvm.fma.f64(double %48, double %49, double\l... 0x3FB50782D5F14825)\l  %51 = tail call double @llvm.fma.f64(double %48, double %50, double\l... 0xBFE32D2CCDFE9424)\l  %52 = tail call double @llvm.fma.f64(double %48, double %51, double\l... 0x400466BC67754FFF)\l  %53 = tail call double @llvm.fma.f64(double %48, double %52, double\l... 0xC014ABBCE625BE09)\l  %54 = fmul double %46, %48\l  %55 = fmul double %54, %53\l  %56 = tail call double @llvm.fma.f64(double %46, double 0x400921FB54442D18,\l... double %55)\l  %57 = tail call double @llvm.fma.f64(double %48, double 0xBF1B167302E21C33,\l... double 0x3F5F9C89CA1D4F33)\l  %58 = tail call double @llvm.fma.f64(double %48, double %57, double\l... 0xBF9A6D1E7294BFF9)\l  %59 = tail call double @llvm.fma.f64(double %48, double %58, double\l... 0x3FCE1F5067B90B37)\l  %60 = tail call double @llvm.fma.f64(double %48, double %59, double\l... 0xBFF55D3C7E3C325B)\l  %61 = tail call double @llvm.fma.f64(double %48, double %60, double\l... 0x40103C1F081B5A67)\l  %62 = tail call double @llvm.fma.f64(double %48, double %61, double\l... 0xC013BD3CC9BE45DE)\l  %63 = tail call double @llvm.fma.f64(double %48, double %62, double\l... 1.000000e+00)\l  %64 = fneg double %56\l  %65 = and i32 %47, 1\l  %66 = icmp eq i32 %65, 0\l  %67 = select i1 %66, double %63, double %64\l  %68 = bitcast double %67 to \<2 x i32\>\l  %69 = shl i32 %47, 30\l  %70 = and i32 %69, -2147483648\l  %71 = extractelement \<2 x i32\> %68, i64 1\l  %72 = xor i32 %71, %70\l  %73 = insertelement \<2 x i32\> %68, i32 %72, i64 1\l  %74 = tail call i1 @llvm.amdgcn.class.f64(double %36, i32 504)\l  %75 = select i1 %74, \<2 x i32\> %73, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %76 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  %77 = bitcast double addrspace(1)* %76 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %75, \<2 x i32\> addrspace(1)* %77, align 8, !tbaa !16\l  br label %78\l}"];
	Node0x62e12a0 -> Node0x62e1330;
	Node0x62e1330 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  ret void\l}"];
}
