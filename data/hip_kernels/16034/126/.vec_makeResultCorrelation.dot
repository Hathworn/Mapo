digraph "CFG for 'vec_makeResultCorrelation' function" {
	label="CFG for 'vec_makeResultCorrelation' function";

	Node0x63dff90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !7\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = add i32 %23, %17\l  %25 = udiv i32 %16, %13\l  %26 = mul i32 %25, %13\l  %27 = icmp ugt i32 %16, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %24\l  %31 = add i32 %30, %8\l  %32 = mul i32 %31, %13\l  %33 = add i32 %32, %7\l  %34 = icmp slt i32 %33, %0\l  br i1 %34, label %35, label %79\l|{<s0>T|<s1>F}}"];
	Node0x63dff90:s0 -> Node0x63e2010;
	Node0x63dff90:s1 -> Node0x63e4120;
	Node0x63e2010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%35:\l35:                                               \l  %36 = freeze i32 %33\l  %37 = freeze i32 %1\l  %38 = sdiv i32 %36, %37\l  %39 = mul i32 %38, %37\l  %40 = sub i32 %36, %39\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %41\l  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %44 = mul nsw i32 %38, %2\l  %45 = add nsw i32 %43, %44\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %4, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %49 = fpext float %48 to double\l  %50 = sitofp i32 %2 to float\l  %51 = fpext float %50 to double\l  %52 = fmul contract double %51, 5.000000e-01\l  %53 = fcmp olt double %52, 0x1000000000000000\l  %54 = select i1 %53, double 0x4FF0000000000000, double 1.000000e+00\l  %55 = fmul double %52, %54\l  %56 = tail call double @llvm.amdgcn.rsq.f64(double %55)\l  %57 = fmul double %55, %56\l  %58 = fmul double %56, 5.000000e-01\l  %59 = fneg double %58\l  %60 = tail call double @llvm.fma.f64(double %59, double %57, double\l... 5.000000e-01)\l  %61 = tail call double @llvm.fma.f64(double %58, double %60, double %58)\l  %62 = tail call double @llvm.fma.f64(double %57, double %60, double %57)\l  %63 = fneg double %62\l  %64 = tail call double @llvm.fma.f64(double %63, double %62, double %55)\l  %65 = tail call double @llvm.fma.f64(double %64, double %61, double %62)\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %66, double %65, double %55)\l  %68 = tail call double @llvm.fma.f64(double %67, double %61, double %65)\l  %69 = select i1 %53, double 0x37F0000000000000, double 1.000000e+00\l  %70 = fmul double %69, %68\l  %71 = fcmp oeq double %55, 0.000000e+00\l  %72 = fcmp oeq double %55, 0x7FF0000000000000\l  %73 = or i1 %71, %72\l  %74 = select i1 %73, double %55, double %70\l  %75 = fdiv contract double %49, %74\l  %76 = fptrunc double %75 to float\l  %77 = sext i32 %33 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %3, i64 %77\l  store float %76, float addrspace(1)* %78, align 4, !tbaa !20\l  br label %79\l}"];
	Node0x63e2010 -> Node0x63e4120;
	Node0x63e4120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%79:\l79:                                               \l  ret void\l}"];
}
