digraph "CFG for 'vec_fmod' function" {
	label="CFG for 'vec_fmod' function";

	Node0x4e5a6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = udiv i32 %14, %11\l  %24 = mul i32 %23, %11\l  %25 = icmp ugt i32 %14, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %22\l  %29 = add i32 %28, %6\l  %30 = mul i32 %29, %11\l  %31 = add i32 %30, %5\l  %32 = icmp slt i32 %31, %0\l  br i1 %32, label %33, label %97\l|{<s0>T|<s1>F}}"];
	Node0x4e5a6d0:s0 -> Node0x4e5d0f0;
	Node0x4e5a6d0:s1 -> Node0x4e5d180;
	Node0x4e5d0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%33:\l33:                                               \l  %34 = sext i32 %31 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %2, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %37 = getelementptr inbounds double, double addrspace(1)* %3, i64 %34\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %39 = tail call double @llvm.fabs.f64(double %36)\l  %40 = tail call double @llvm.fabs.f64(double %38)\l  %41 = fcmp ogt double %39, %40\l  br i1 %41, label %42, label %84\l|{<s0>T|<s1>F}}"];
	Node0x4e5d0f0:s0 -> Node0x4e5f7c0;
	Node0x4e5d0f0:s1 -> Node0x4e5f850;
	Node0x4e5f7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%42:\l42:                                               \l  %43 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %39)\l  %44 = tail call double @llvm.amdgcn.frexp.mant.f64(double %39)\l  %45 = tail call double @llvm.amdgcn.ldexp.f64(double %44, i32 26)\l  %46 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %40)\l  %47 = add nsw i32 %46, -1\l  %48 = tail call double @llvm.amdgcn.frexp.mant.f64(double %40)\l  %49 = tail call double @llvm.amdgcn.ldexp.f64(double %48, i32 1)\l  %50 = sub i32 %43, %46\l  %51 = fdiv double 1.000000e+00, %49\l  %52 = icmp sgt i32 %50, 26\l  br i1 %52, label %53, label %66\l|{<s0>T|<s1>F}}"];
	Node0x4e5f7c0:s0 -> Node0x4e61000;
	Node0x4e5f7c0:s1 -> Node0x4e61090;
	Node0x4e61000 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = phi double [ %63, %53 ], [ %45, %42 ]\l  %55 = phi i32 [ %64, %53 ], [ %50, %42 ]\l  %56 = fmul double %51, %54\l  %57 = tail call double @llvm.rint.f64(double %56)\l  %58 = fneg double %57\l  %59 = tail call double @llvm.fma.f64(double %58, double %49, double %54)\l  %60 = fcmp olt double %59, 0.000000e+00\l  %61 = select i1 %60, double %49, double -0.000000e+00\l  %62 = fadd double %59, %61\l  %63 = tail call double @llvm.amdgcn.ldexp.f64(double %62, i32 26)\l  %64 = add nsw i32 %55, -26\l  %65 = icmp ugt i32 %55, 52\l  br i1 %65, label %53, label %66\l|{<s0>T|<s1>F}}"];
	Node0x4e61000:s0 -> Node0x4e61000;
	Node0x4e61000:s1 -> Node0x4e61090;
	Node0x4e61090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%66:\l66:                                               \l  %67 = phi i32 [ %50, %42 ], [ %64, %53 ]\l  %68 = phi double [ %45, %42 ], [ %63, %53 ]\l  %69 = add nsw i32 %67, -25\l  %70 = tail call double @llvm.amdgcn.ldexp.f64(double %68, i32 %69)\l  %71 = fmul double %51, %70\l  %72 = tail call double @llvm.rint.f64(double %71)\l  %73 = fneg double %72\l  %74 = tail call double @llvm.fma.f64(double %73, double %49, double %70)\l  %75 = fcmp olt double %74, 0.000000e+00\l  %76 = select i1 %75, double %49, double -0.000000e+00\l  %77 = fadd double %74, %76\l  %78 = tail call double @llvm.amdgcn.ldexp.f64(double %77, i32 %47)\l  %79 = bitcast double %36 to i64\l  %80 = and i64 %79, -9223372036854775808\l  %81 = bitcast double %78 to i64\l  %82 = xor i64 %80, %81\l  %83 = bitcast i64 %82 to double\l  br label %88\l}"];
	Node0x4e61090 -> Node0x4e62c40;
	Node0x4e5f850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%84:\l84:                                               \l  %85 = fcmp oeq double %39, %40\l  %86 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %36)\l  %87 = select i1 %85, double %86, double %36\l  br label %88\l}"];
	Node0x4e5f850 -> Node0x4e62c40;
	Node0x4e62c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%88:\l88:                                               \l  %89 = phi double [ %83, %66 ], [ %87, %84 ]\l  %90 = fcmp oeq double %38, 0.000000e+00\l  %91 = select i1 %90, double 0x7FF8000000000000, double %89\l  %92 = fcmp ord double %38, 0.000000e+00\l  %93 = tail call i1 @llvm.amdgcn.class.f64(double %36, i32 504)\l  %94 = select i1 %92, i1 %93, i1 false\l  %95 = select i1 %94, double %91, double 0x7FF8000000000000\l  %96 = getelementptr inbounds double, double addrspace(1)* %1, i64 %34\l  store double %95, double addrspace(1)* %96, align 8, !tbaa !16\l  br label %97\l}"];
	Node0x4e62c40 -> Node0x4e5d180;
	Node0x4e5d180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%97:\l97:                                               \l  ret void\l}"];
}
