digraph "CFG for 'vec_sin' function" {
	label="CFG for 'vec_sin' function";

	Node0x485c420 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %14\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = add i32 %27, %5\l  %29 = mul i32 %28, %10\l  %30 = add i32 %29, %4\l  %31 = icmp slt i32 %30, %0\l  br i1 %31, label %32, label %179\l|{<s0>T|<s1>F}}"];
	Node0x485c420:s0 -> Node0x4860460;
	Node0x485c420:s1 -> Node0x48604f0;
	Node0x4860460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%32:\l32:                                               \l  %33 = sext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = tail call double @llvm.fabs.f64(double %35)\l  %37 = fcmp olt double %36, 0x41D0000000000000\l  br i1 %37, label %38, label %57\l|{<s0>T|<s1>F}}"];
	Node0x4860460:s0 -> Node0x48616d0;
	Node0x4860460:s1 -> Node0x4861760;
	Node0x48616d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%38:\l38:                                               \l  %39 = fmul double %36, 0x3FE45F306DC9C883\l  %40 = tail call double @llvm.rint.f64(double %39)\l  %41 = tail call double @llvm.fma.f64(double %40, double 0xBFF921FB54442D18,\l... double %36)\l  %42 = tail call double @llvm.fma.f64(double %40, double 0xBC91A62633145C00,\l... double %41)\l  %43 = fmul double %40, 0x3C91A62633145C00\l  %44 = fneg double %43\l  %45 = tail call double @llvm.fma.f64(double %40, double 0x3C91A62633145C00,\l... double %44)\l  %46 = fsub double %41, %43\l  %47 = fsub double %41, %46\l  %48 = fsub double %47, %43\l  %49 = fsub double %46, %42\l  %50 = fadd double %49, %48\l  %51 = fsub double %50, %45\l  %52 = tail call double @llvm.fma.f64(double %40, double 0xB97B839A252049C0,\l... double %51)\l  %53 = fadd double %42, %52\l  %54 = fsub double %53, %42\l  %55 = fsub double %52, %54\l  %56 = fptosi double %40 to i32\l  br label %133\l}"];
	Node0x48616d0 -> Node0x4862920;
	Node0x4861760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%57:\l57:                                               \l  %58 = tail call double @llvm.amdgcn.trig.preop.f64(double %36, i32 0)\l  %59 = tail call double @llvm.amdgcn.trig.preop.f64(double %36, i32 1)\l  %60 = tail call double @llvm.amdgcn.trig.preop.f64(double %36, i32 2)\l  %61 = fcmp oge double %36, 0x7B00000000000000\l  %62 = tail call double @llvm.amdgcn.ldexp.f64(double %36, i32 -128)\l  %63 = select i1 %61, double %62, double %36\l  %64 = fmul double %60, %63\l  %65 = fneg double %64\l  %66 = tail call double @llvm.fma.f64(double %60, double %63, double %65)\l  %67 = fmul double %59, %63\l  %68 = fneg double %67\l  %69 = tail call double @llvm.fma.f64(double %59, double %63, double %68)\l  %70 = fmul double %58, %63\l  %71 = fneg double %70\l  %72 = tail call double @llvm.fma.f64(double %58, double %63, double %71)\l  %73 = fadd double %67, %72\l  %74 = fsub double %73, %67\l  %75 = fsub double %73, %74\l  %76 = fsub double %72, %74\l  %77 = fsub double %67, %75\l  %78 = fadd double %76, %77\l  %79 = fadd double %64, %69\l  %80 = fsub double %79, %64\l  %81 = fsub double %79, %80\l  %82 = fsub double %69, %80\l  %83 = fsub double %64, %81\l  %84 = fadd double %82, %83\l  %85 = fadd double %79, %78\l  %86 = fsub double %85, %79\l  %87 = fsub double %85, %86\l  %88 = fsub double %78, %86\l  %89 = fsub double %79, %87\l  %90 = fadd double %88, %89\l  %91 = fadd double %84, %90\l  %92 = fadd double %66, %91\l  %93 = fadd double %70, %73\l  %94 = fsub double %93, %70\l  %95 = fsub double %73, %94\l  %96 = fadd double %95, %85\l  %97 = fsub double %96, %95\l  %98 = fsub double %85, %97\l  %99 = fadd double %98, %92\l  %100 = tail call double @llvm.amdgcn.ldexp.f64(double %93, i32 -2)\l  %101 = tail call double @llvm.amdgcn.fract.f64(double %100)\l  %102 = tail call i1 @llvm.amdgcn.class.f64(double %100, i32 516)\l  %103 = select i1 %102, double 0.000000e+00, double %101\l  %104 = tail call double @llvm.amdgcn.ldexp.f64(double %103, i32 2)\l  %105 = fadd double %104, %96\l  %106 = fcmp olt double %105, 0.000000e+00\l  %107 = select i1 %106, double 4.000000e+00, double 0.000000e+00\l  %108 = fadd double %104, %107\l  %109 = fadd double %96, %108\l  %110 = fptosi double %109 to i32\l  %111 = sitofp i32 %110 to double\l  %112 = fsub double %108, %111\l  %113 = fadd double %96, %112\l  %114 = fsub double %113, %112\l  %115 = fsub double %96, %114\l  %116 = fadd double %99, %115\l  %117 = fcmp oge double %113, 5.000000e-01\l  %118 = zext i1 %117 to i32\l  %119 = add nsw i32 %118, %110\l  %120 = select i1 %117, double 1.000000e+00, double 0.000000e+00\l  %121 = fsub double %113, %120\l  %122 = fadd double %121, %116\l  %123 = fsub double %122, %121\l  %124 = fsub double %116, %123\l  %125 = fmul double %122, 0x3FF921FB54442D18\l  %126 = fneg double %125\l  %127 = tail call double @llvm.fma.f64(double %122, double\l... 0x3FF921FB54442D18, double %126)\l  %128 = tail call double @llvm.fma.f64(double %122, double\l... 0x3C91A62633145C07, double %127)\l  %129 = tail call double @llvm.fma.f64(double %124, double\l... 0x3FF921FB54442D18, double %128)\l  %130 = fadd double %125, %129\l  %131 = fsub double %130, %125\l  %132 = fsub double %129, %131\l  br label %133\l}"];
	Node0x4861760 -> Node0x4862920;
	Node0x4862920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%133:\l133:                                              \l  %134 = phi double [ %55, %38 ], [ %132, %57 ]\l  %135 = phi double [ %53, %38 ], [ %130, %57 ]\l  %136 = phi i32 [ %56, %38 ], [ %119, %57 ]\l  %137 = fmul double %135, %135\l  %138 = fmul double %137, 5.000000e-01\l  %139 = fsub double 1.000000e+00, %138\l  %140 = fsub double 1.000000e+00, %139\l  %141 = fsub double %140, %138\l  %142 = fmul double %137, %137\l  %143 = tail call double @llvm.fma.f64(double %137, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %144 = tail call double @llvm.fma.f64(double %137, double %143, double\l... 0xBE927E4FA17F65F6)\l  %145 = tail call double @llvm.fma.f64(double %137, double %144, double\l... 0x3EFA01A019F4EC90)\l  %146 = tail call double @llvm.fma.f64(double %137, double %145, double\l... 0xBF56C16C16C16967)\l  %147 = tail call double @llvm.fma.f64(double %137, double %146, double\l... 0x3FA5555555555555)\l  %148 = fneg double %134\l  %149 = tail call double @llvm.fma.f64(double %135, double %148, double %141)\l  %150 = tail call double @llvm.fma.f64(double %142, double %147, double %149)\l  %151 = fadd double %139, %150\l  %152 = tail call double @llvm.fma.f64(double %137, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %153 = tail call double @llvm.fma.f64(double %137, double %152, double\l... 0x3EC71DE3796CDE01)\l  %154 = tail call double @llvm.fma.f64(double %137, double %153, double\l... 0xBF2A01A019E83E5C)\l  %155 = tail call double @llvm.fma.f64(double %137, double %154, double\l... 0x3F81111111110BB3)\l  %156 = fneg double %137\l  %157 = fmul double %135, %156\l  %158 = fmul double %134, 5.000000e-01\l  %159 = tail call double @llvm.fma.f64(double %157, double %155, double %158)\l  %160 = tail call double @llvm.fma.f64(double %137, double %159, double %148)\l  %161 = tail call double @llvm.fma.f64(double %157, double\l... 0xBFC5555555555555, double %160)\l  %162 = fsub double %135, %161\l  %163 = and i32 %136, 1\l  %164 = icmp eq i32 %163, 0\l  %165 = select i1 %164, double %162, double %151\l  %166 = bitcast double %165 to \<2 x i32\>\l  %167 = shl i32 %136, 30\l  %168 = bitcast double %35 to \<2 x i32\>\l  %169 = extractelement \<2 x i32\> %168, i64 1\l  %170 = xor i32 %167, %169\l  %171 = and i32 %170, -2147483648\l  %172 = extractelement \<2 x i32\> %166, i64 1\l  %173 = xor i32 %172, %171\l  %174 = insertelement \<2 x i32\> %166, i32 %173, i64 1\l  %175 = tail call i1 @llvm.amdgcn.class.f64(double %36, i32 504)\l  %176 = select i1 %175, \<2 x i32\> %174, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %177 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  %178 = bitcast double addrspace(1)* %177 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %176, \<2 x i32\> addrspace(1)* %178, align 8, !tbaa !16\l  br label %179\l}"];
	Node0x4862920 -> Node0x48604f0;
	Node0x48604f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%179:\l179:                                              \l  ret void\l}"];
}
