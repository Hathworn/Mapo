digraph "CFG for 'vec_computePSF_phaseNMany_f' function" {
	label="CFG for 'vec_computePSF_phaseNMany_f' function";

	Node0x45cda00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%13:\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %17 = getelementptr i8, i8 addrspace(4)* %16, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = getelementptr inbounds i8, i8 addrspace(4)* %16, i64 12\l  %22 = bitcast i8 addrspace(4)* %21 to i32 addrspace(4)*\l  %23 = load i32, i32 addrspace(4)* %22, align 4, !tbaa !7\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %26 = getelementptr i8, i8 addrspace(4)* %16, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = mul i32 %25, %29\l  %31 = add i32 %30, %24\l  %32 = udiv i32 %23, %20\l  %33 = mul i32 %32, %20\l  %34 = icmp ugt i32 %23, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %31\l  %38 = add i32 %37, %15\l  %39 = mul i32 %38, %20\l  %40 = add i32 %39, %14\l  %41 = icmp slt i32 %40, %0\l  br i1 %41, label %42, label %271\l|{<s0>T|<s1>F}}"];
	Node0x45cda00:s0 -> Node0x45d2700;
	Node0x45cda00:s1 -> Node0x45d2790;
	Node0x45d2700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%42:\l42:                                               \l  %43 = freeze i32 %40\l  %44 = freeze i32 %1\l  %45 = sdiv i32 %43, %44\l  %46 = mul i32 %45, %44\l  %47 = sub i32 %43, %46\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %3, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %51 = sext i32 %45 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %8, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %54 = fmul contract float %50, %53\l  %55 = getelementptr inbounds float, float addrspace(1)* %4, i64 %48\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %57 = add nsw i32 %45, %12\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %8, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %61 = fmul contract float %56, %60\l  %62 = fadd contract float %54, %61\l  %63 = getelementptr inbounds float, float addrspace(1)* %5, i64 %48\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %65 = shl nsw i32 %12, 1\l  %66 = add nsw i32 %45, %65\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %8, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %70 = fmul contract float %64, %69\l  %71 = fadd contract float %62, %70\l  %72 = getelementptr inbounds float, float addrspace(1)* %7, i64 %48\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %74 = fadd contract float %73, %71\l  %75 = getelementptr inbounds float, float addrspace(1)* %6, i64 %48\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %77 = tail call float @llvm.fabs.f32(float %74)\l  %78 = fcmp olt float %77, 1.310720e+05\l  br i1 %78, label %79, label %114\l|{<s0>T|<s1>F}}"];
	Node0x45d2700:s0 -> Node0x45d52e0;
	Node0x45d2700:s1 -> Node0x45d5370;
	Node0x45d52e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%79:\l79:                                               \l  %80 = fmul float %77, 0x3FE45F3060000000\l  %81 = tail call float @llvm.rint.f32(float %80)\l  %82 = tail call float @llvm.fma.f32(float %81, float 0xBFF921FB40000000,\l... float %77)\l  %83 = tail call float @llvm.fma.f32(float %81, float 0xBE74442D00000000,\l... float %82)\l  %84 = tail call float @llvm.fma.f32(float %81, float 0xBCF8469880000000,\l... float %83)\l  %85 = fptosi float %81 to i32\l  %86 = fmul float %84, %84\l  %87 = tail call float @llvm.fmuladd.f32(float %86, float 0xBF29833040000000,\l... float 0x3F81103880000000)\l  %88 = tail call float @llvm.fmuladd.f32(float %86, float %87, float\l... 0xBFC55553A0000000)\l  %89 = fmul float %86, %88\l  %90 = tail call float @llvm.fmuladd.f32(float %84, float %89, float %84)\l  %91 = tail call float @llvm.fmuladd.f32(float %86, float 0x3EFAEA6680000000,\l... float 0xBF56C9E760000000)\l  %92 = tail call float @llvm.fmuladd.f32(float %86, float %91, float\l... 0x3FA5557EE0000000)\l  %93 = tail call float @llvm.fmuladd.f32(float %86, float %92, float\l... 0xBFE0000080000000)\l  %94 = tail call float @llvm.fmuladd.f32(float %86, float %93, float\l... 1.000000e+00)\l  %95 = fneg float %90\l  %96 = and i32 %85, 1\l  %97 = icmp eq i32 %96, 0\l  %98 = select i1 %97, float %94, float %95\l  %99 = bitcast float %98 to i32\l  %100 = shl i32 %85, 30\l  %101 = and i32 %100, -2147483648\l  %102 = xor i32 %101, %99\l  %103 = bitcast i32 %102 to float\l  %104 = tail call i1 @llvm.amdgcn.class.f32(float %77, i32 504)\l  %105 = select i1 %104, float %103, float 0x7FF8000000000000\l  %106 = fmul contract float %76, %105\l  %107 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %48\l  %108 = load i32, i32 addrspace(1)* %107, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %109 = mul nsw i32 %45, %2\l  %110 = add nsw i32 %108, %109\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %11, i64 %111\l  store float %106, float addrspace(1)* %112, align 4, !tbaa !16\l  %113 = bitcast float %77 to i32\l  br label %247\l}"];
	Node0x45d52e0 -> Node0x45d79d0;
	Node0x45d5370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%114:\l114:                                              \l  %115 = bitcast float %77 to i32\l  %116 = lshr i32 %115, 23\l  %117 = and i32 %115, 8388607\l  %118 = or i32 %117, 8388608\l  %119 = zext i32 %118 to i64\l  %120 = mul nuw nsw i64 %119, 4266746795\l  %121 = trunc i64 %120 to i32\l  %122 = lshr i64 %120, 32\l  %123 = mul nuw nsw i64 %119, 1011060801\l  %124 = add nuw nsw i64 %122, %123\l  %125 = trunc i64 %124 to i32\l  %126 = lshr i64 %124, 32\l  %127 = mul nuw nsw i64 %119, 3680671129\l  %128 = add nuw nsw i64 %126, %127\l  %129 = trunc i64 %128 to i32\l  %130 = lshr i64 %128, 32\l  %131 = mul nuw nsw i64 %119, 4113882560\l  %132 = add nuw nsw i64 %130, %131\l  %133 = trunc i64 %132 to i32\l  %134 = lshr i64 %132, 32\l  %135 = mul nuw nsw i64 %119, 4230436817\l  %136 = add nuw nsw i64 %134, %135\l  %137 = trunc i64 %136 to i32\l  %138 = lshr i64 %136, 32\l  %139 = mul nuw nsw i64 %119, 1313084713\l  %140 = add nuw nsw i64 %138, %139\l  %141 = trunc i64 %140 to i32\l  %142 = lshr i64 %140, 32\l  %143 = mul nuw nsw i64 %119, 2734261102\l  %144 = add nuw nsw i64 %142, %143\l  %145 = trunc i64 %144 to i32\l  %146 = lshr i64 %144, 32\l  %147 = trunc i64 %146 to i32\l  %148 = add nsw i32 %116, -120\l  %149 = icmp ugt i32 %148, 63\l  %150 = select i1 %149, i32 %141, i32 %147\l  %151 = select i1 %149, i32 %137, i32 %145\l  %152 = select i1 %149, i32 %133, i32 %141\l  %153 = select i1 %149, i32 %129, i32 %137\l  %154 = select i1 %149, i32 %125, i32 %133\l  %155 = select i1 %149, i32 %121, i32 %129\l  %156 = select i1 %149, i32 -64, i32 0\l  %157 = add nsw i32 %156, %148\l  %158 = icmp ugt i32 %157, 31\l  %159 = select i1 %158, i32 %151, i32 %150\l  %160 = select i1 %158, i32 %152, i32 %151\l  %161 = select i1 %158, i32 %153, i32 %152\l  %162 = select i1 %158, i32 %154, i32 %153\l  %163 = select i1 %158, i32 %155, i32 %154\l  %164 = select i1 %158, i32 -32, i32 0\l  %165 = add nsw i32 %164, %157\l  %166 = icmp ugt i32 %165, 31\l  %167 = select i1 %166, i32 %160, i32 %159\l  %168 = select i1 %166, i32 %161, i32 %160\l  %169 = select i1 %166, i32 %162, i32 %161\l  %170 = select i1 %166, i32 %163, i32 %162\l  %171 = select i1 %166, i32 -32, i32 0\l  %172 = add nsw i32 %171, %165\l  %173 = icmp eq i32 %172, 0\l  %174 = sub nsw i32 32, %172\l  %175 = tail call i32 @llvm.fshr.i32(i32 %167, i32 %168, i32 %174)\l  %176 = tail call i32 @llvm.fshr.i32(i32 %168, i32 %169, i32 %174)\l  %177 = tail call i32 @llvm.fshr.i32(i32 %169, i32 %170, i32 %174)\l  %178 = select i1 %173, i32 %167, i32 %175\l  %179 = select i1 %173, i32 %168, i32 %176\l  %180 = select i1 %173, i32 %169, i32 %177\l  %181 = lshr i32 %178, 29\l  %182 = tail call i32 @llvm.fshl.i32(i32 %178, i32 %179, i32 2)\l  %183 = tail call i32 @llvm.fshl.i32(i32 %179, i32 %180, i32 2)\l  %184 = tail call i32 @llvm.fshl.i32(i32 %180, i32 %170, i32 2)\l  %185 = and i32 %181, 1\l  %186 = sub nsw i32 0, %185\l  %187 = shl i32 %181, 31\l  %188 = xor i32 %182, %186\l  %189 = xor i32 %183, %186\l  %190 = xor i32 %184, %186\l  %191 = tail call i32 @llvm.ctlz.i32(i32 %188, i1 false), !range !22\l  %192 = sub nsw i32 31, %191\l  %193 = tail call i32 @llvm.fshr.i32(i32 %188, i32 %189, i32 %192)\l  %194 = tail call i32 @llvm.fshr.i32(i32 %189, i32 %190, i32 %192)\l  %195 = shl nuw nsw i32 %191, 23\l  %196 = sub nuw nsw i32 1056964608, %195\l  %197 = lshr i32 %193, 9\l  %198 = or i32 %197, %196\l  %199 = or i32 %198, %187\l  %200 = bitcast i32 %199 to float\l  %201 = tail call i32 @llvm.fshl.i32(i32 %193, i32 %194, i32 23)\l  %202 = tail call i32 @llvm.ctlz.i32(i32 %201, i1 false), !range !22\l  %203 = fmul float %200, 0x3FF921FB40000000\l  %204 = add nuw nsw i32 %202, %191\l  %205 = shl nuw nsw i32 %204, 23\l  %206 = sub nuw nsw i32 855638016, %205\l  %207 = sub nsw i32 31, %202\l  %208 = tail call i32 @llvm.fshr.i32(i32 %201, i32 %194, i32 %207)\l  %209 = lshr i32 %208, 9\l  %210 = or i32 %206, %209\l  %211 = or i32 %210, %187\l  %212 = bitcast i32 %211 to float\l  %213 = fneg float %203\l  %214 = tail call float @llvm.fma.f32(float %200, float 0x3FF921FB40000000,\l... float %213)\l  %215 = tail call float @llvm.fma.f32(float %200, float 0x3E74442D00000000,\l... float %214)\l  %216 = tail call float @llvm.fma.f32(float %212, float 0x3FF921FB40000000,\l... float %215)\l  %217 = fadd float %203, %216\l  %218 = lshr i32 %178, 30\l  %219 = add nuw nsw i32 %185, %218\l  %220 = fmul float %217, %217\l  %221 = tail call float @llvm.fmuladd.f32(float %220, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %222 = tail call float @llvm.fmuladd.f32(float %220, float %221, float\l... 0xBFC55553A0000000)\l  %223 = fmul float %220, %222\l  %224 = tail call float @llvm.fmuladd.f32(float %217, float %223, float %217)\l  %225 = tail call float @llvm.fmuladd.f32(float %220, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %226 = tail call float @llvm.fmuladd.f32(float %220, float %225, float\l... 0x3FA5557EE0000000)\l  %227 = tail call float @llvm.fmuladd.f32(float %220, float %226, float\l... 0xBFE0000080000000)\l  %228 = tail call float @llvm.fmuladd.f32(float %220, float %227, float\l... 1.000000e+00)\l  %229 = fneg float %224\l  %230 = and i32 %219, 1\l  %231 = icmp eq i32 %230, 0\l  %232 = select i1 %231, float %228, float %229\l  %233 = bitcast float %232 to i32\l  %234 = shl i32 %219, 30\l  %235 = and i32 %234, -2147483648\l  %236 = xor i32 %235, %233\l  %237 = bitcast i32 %236 to float\l  %238 = tail call i1 @llvm.amdgcn.class.f32(float %77, i32 504)\l  %239 = select i1 %238, float %237, float 0x7FF8000000000000\l  %240 = fmul contract float %76, %239\l  %241 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %48\l  %242 = load i32, i32 addrspace(1)* %241, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %243 = mul nsw i32 %45, %2\l  %244 = add nsw i32 %242, %243\l  %245 = sext i32 %244 to i64\l  %246 = getelementptr inbounds float, float addrspace(1)* %11, i64 %245\l  store float %240, float addrspace(1)* %246, align 4, !tbaa !16\l  br label %247\l}"];
	Node0x45d5370 -> Node0x45d79d0;
	Node0x45d79d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%247:\l247:                                              \l  %248 = phi i32 [ %101, %79 ], [ %235, %114 ]\l  %249 = phi i32 [ %96, %79 ], [ %230, %114 ]\l  %250 = phi float [ %94, %79 ], [ %228, %114 ]\l  %251 = phi float [ %90, %79 ], [ %224, %114 ]\l  %252 = phi i32 [ %109, %79 ], [ %243, %114 ]\l  %253 = phi i1 [ %104, %79 ], [ %238, %114 ]\l  %254 = phi i32 [ %113, %79 ], [ %115, %114 ]\l  %255 = load float, float addrspace(1)* %75, align 4, !tbaa !16\l  %256 = icmp eq i32 %249, 0\l  %257 = select i1 %256, float %251, float %250\l  %258 = bitcast float %257 to i32\l  %259 = bitcast float %74 to i32\l  %260 = xor i32 %254, %259\l  %261 = xor i32 %260, %248\l  %262 = xor i32 %261, %258\l  %263 = bitcast i32 %262 to float\l  %264 = select i1 %253, float %263, float 0x7FF8000000000000\l  %265 = fmul contract float %255, %264\l  %266 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %48\l  %267 = load i32, i32 addrspace(1)* %266, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %268 = add nsw i32 %267, %252\l  %269 = sext i32 %268 to i64\l  %270 = getelementptr inbounds float, float addrspace(1)* %11, i64 %269\l  store float %265, float addrspace(1)* %270, align 4, !tbaa !16\l  br label %271\l}"];
	Node0x45d79d0 -> Node0x45d2790;
	Node0x45d2790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%271:\l271:                                              \l  ret void\l}"];
}
