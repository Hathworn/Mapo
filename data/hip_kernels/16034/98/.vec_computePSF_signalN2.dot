digraph "CFG for 'vec_computePSF_signalN2' function" {
	label="CFG for 'vec_computePSF_signalN2' function";

	Node0x5e40cc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !7\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !5, !invariant.load !6\l  %24 = zext i16 %23 to i32\l  %25 = mul i32 %20, %24\l  %26 = add i32 %25, %19\l  %27 = udiv i32 %18, %15\l  %28 = mul i32 %27, %15\l  %29 = icmp ugt i32 %18, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %26\l  %33 = add i32 %32, %10\l  %34 = mul i32 %33, %15\l  %35 = add i32 %34, %9\l  %36 = icmp slt i32 %35, %0\l  br i1 %36, label %37, label %62\l|{<s0>T|<s1>F}}"];
	Node0x5e40cc0:s0 -> Node0x5e42af0;
	Node0x5e40cc0:s1 -> Node0x5e44e60;
	Node0x5e42af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%37:\l37:                                               \l  %38 = sext i32 %35 to i64\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %38\l  %40 = load i32, i32 addrspace(1)* %39, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds double, double addrspace(1)* %4, i64 %41\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !20,\l... !amdgpu.noclobber !6\l  %44 = fdiv contract double %43, %1\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %38\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds double, double addrspace(1)* %4, i64 %47\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !20,\l... !amdgpu.noclobber !6\l  %50 = fdiv contract double %49, %1\l  %51 = fmul contract double %44, %44\l  %52 = fmul contract double %50, %50\l  %53 = fadd contract double %51, %52\l  %54 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %38\l  %55 = load i32, i32 addrspace(1)* %54, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %7, i64 %56\l  store double %53, double addrspace(1)* %57, align 8, !tbaa !20\l  %58 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %38\l  %59 = load i32, i32 addrspace(1)* %58, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %7, i64 %60\l  store double 0.000000e+00, double addrspace(1)* %61, align 8, !tbaa !20\l  br label %62\l}"];
	Node0x5e42af0 -> Node0x5e44e60;
	Node0x5e44e60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%62:\l62:                                               \l  ret void\l}"];
}
