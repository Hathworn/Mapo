digraph "CFG for 'vec_log2' function" {
	label="CFG for 'vec_log2' function";

	Node0x4fa2720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %14\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = add i32 %27, %5\l  %29 = mul i32 %28, %10\l  %30 = add i32 %29, %4\l  %31 = icmp slt i32 %30, %0\l  br i1 %31, label %32, label %112\l|{<s0>T|<s1>F}}"];
	Node0x4fa2720:s0 -> Node0x4fa6760;
	Node0x4fa2720:s1 -> Node0x4fa67f0;
	Node0x4fa6760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%32:\l32:                                               \l  %33 = sext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = tail call double @llvm.amdgcn.frexp.mant.f64(double %35)\l  %37 = fcmp olt double %36, 0x3FE5555555555555\l  %38 = zext i1 %37 to i32\l  %39 = tail call double @llvm.amdgcn.ldexp.f64(double %36, i32 %38)\l  %40 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %35)\l  %41 = sub nsw i32 %40, %38\l  %42 = fadd double %39, -1.000000e+00\l  %43 = fadd double %39, 1.000000e+00\l  %44 = fadd double %43, -1.000000e+00\l  %45 = fsub double %39, %44\l  %46 = tail call double @llvm.amdgcn.rcp.f64(double %43)\l  %47 = fneg double %43\l  %48 = tail call double @llvm.fma.f64(double %47, double %46, double\l... 1.000000e+00)\l  %49 = tail call double @llvm.fma.f64(double %48, double %46, double %46)\l  %50 = tail call double @llvm.fma.f64(double %47, double %49, double\l... 1.000000e+00)\l  %51 = tail call double @llvm.fma.f64(double %50, double %49, double %49)\l  %52 = fmul double %42, %51\l  %53 = fmul double %43, %52\l  %54 = fneg double %53\l  %55 = tail call double @llvm.fma.f64(double %52, double %43, double %54)\l  %56 = tail call double @llvm.fma.f64(double %52, double %45, double %55)\l  %57 = fadd double %53, %56\l  %58 = fsub double %57, %53\l  %59 = fsub double %56, %58\l  %60 = fsub double %42, %57\l  %61 = fsub double %42, %60\l  %62 = fsub double %61, %57\l  %63 = fsub double %62, %59\l  %64 = fadd double %60, %63\l  %65 = fmul double %51, %64\l  %66 = fadd double %52, %65\l  %67 = fsub double %66, %52\l  %68 = fsub double %65, %67\l  %69 = fmul double %66, %66\l  %70 = tail call double @llvm.fma.f64(double %69, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %71 = tail call double @llvm.fma.f64(double %69, double %70, double\l... 0x3FC7474DD7F4DF2E)\l  %72 = tail call double @llvm.fma.f64(double %69, double %71, double\l... 0x3FCC71C016291751)\l  %73 = tail call double @llvm.fma.f64(double %69, double %72, double\l... 0x3FD249249B27ACF1)\l  %74 = tail call double @llvm.fma.f64(double %69, double %73, double\l... 0x3FD99999998EF7B6)\l  %75 = tail call double @llvm.fma.f64(double %69, double %74, double\l... 0x3FE5555555555780)\l  %76 = tail call double @llvm.amdgcn.ldexp.f64(double %66, i32 1)\l  %77 = tail call double @llvm.amdgcn.ldexp.f64(double %68, i32 1)\l  %78 = fmul double %66, %69\l  %79 = fmul double %78, %75\l  %80 = fadd double %76, %79\l  %81 = fsub double %80, %76\l  %82 = fsub double %79, %81\l  %83 = fadd double %77, %82\l  %84 = fadd double %80, %83\l  %85 = fsub double %84, %80\l  %86 = fsub double %83, %85\l  %87 = sitofp i32 %41 to double\l  %88 = fmul double %84, 0x3FF71547652B82FE\l  %89 = fneg double %88\l  %90 = tail call double @llvm.fma.f64(double %84, double 0x3FF71547652B82FE,\l... double %89)\l  %91 = tail call double @llvm.fma.f64(double %86, double 0x3FF71547652B82FE,\l... double %90)\l  %92 = tail call double @llvm.fma.f64(double %84, double 0x3C7777D0FFDA0D24,\l... double %91)\l  %93 = fadd double %88, %92\l  %94 = fsub double %93, %88\l  %95 = fsub double %92, %94\l  %96 = fadd double %93, %87\l  %97 = fsub double %96, %87\l  %98 = fsub double %97, %96\l  %99 = fadd double %98, %87\l  %100 = fsub double %93, %97\l  %101 = fadd double %100, %99\l  %102 = fadd double %95, %101\l  %103 = fadd double %96, %102\l  %104 = tail call double @llvm.fabs.f64(double %35) #3\l  %105 = fcmp oeq double %104, 0x7FF0000000000000\l  %106 = select i1 %105, double %35, double %103\l  %107 = fcmp olt double %35, 0.000000e+00\l  %108 = select i1 %107, double 0x7FF8000000000000, double %106\l  %109 = fcmp oeq double %35, 0.000000e+00\l  %110 = select i1 %109, double 0xFFF0000000000000, double %108\l  %111 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  store double %110, double addrspace(1)* %111, align 8, !tbaa !16\l  br label %112\l}"];
	Node0x4fa6760 -> Node0x4fa67f0;
	Node0x4fa67f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%112:\l112:                                              \l  ret void\l}"];
}
