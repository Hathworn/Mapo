digraph "CFG for 'vec_complexeConjugateKernel' function" {
	label="CFG for 'vec_complexeConjugateKernel' function";

	Node0x4b230f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !7\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !5, !invariant.load !6\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = add i32 %22, %16\l  %24 = udiv i32 %15, %12\l  %25 = mul i32 %24, %12\l  %26 = icmp ugt i32 %15, %25\l  %27 = zext i1 %26 to i32\l  %28 = add i32 %24, %27\l  %29 = mul i32 %28, %23\l  %30 = add i32 %29, %7\l  %31 = mul i32 %30, %12\l  %32 = add i32 %31, %6\l  %33 = shl i32 %32, 1\l  %34 = shl nsw i32 %1, 1\l  %35 = srem i32 %33, %34\l  %36 = shl nsw i32 %0, 1\l  %37 = icmp slt i32 %33, %36\l  br i1 %37, label %38, label %85\l|{<s0>T|<s1>F}}"];
	Node0x4b230f0:s0 -> Node0x4b25980;
	Node0x4b230f0:s1 -> Node0x4b274e0;
	Node0x4b25980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%38:\l38:                                               \l  %39 = sext i32 %35 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %3, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %42 = sitofp i32 %1 to float\l  %43 = icmp slt i32 %1, 1\l  %44 = select i1 %43, float 0x41F0000000000000, float 1.000000e+00\l  %45 = fmul float %44, %42\l  %46 = tail call float @llvm.sqrt.f32(float %45)\l  %47 = bitcast float %46 to i32\l  %48 = add nsw i32 %47, -1\l  %49 = bitcast i32 %48 to float\l  %50 = add nsw i32 %47, 1\l  %51 = bitcast i32 %50 to float\l  %52 = tail call i1 @llvm.amdgcn.class.f32(float %45, i32 608)\l  %53 = select i1 %43, float 0x3EF0000000000000, float 1.000000e+00\l  %54 = fneg float %51\l  %55 = tail call float @llvm.fma.f32(float %54, float %46, float %45)\l  %56 = fcmp ogt float %55, 0.000000e+00\l  %57 = fneg float %49\l  %58 = tail call float @llvm.fma.f32(float %57, float %46, float %45)\l  %59 = fcmp ole float %58, 0.000000e+00\l  %60 = select i1 %59, float %49, float %46\l  %61 = select i1 %56, float %51, float %60\l  %62 = fmul float %53, %61\l  %63 = select i1 %52, float %45, float %62\l  %64 = fdiv contract float %41, %63\l  %65 = add nsw i32 %35, 1\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %3, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %69 = fdiv contract float %68, %63\l  %70 = add nuw nsw i32 %33, 1\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %4, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %74 = fmul contract float %69, %73\l  %75 = sext i32 %33 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %4, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %78 = fmul contract float %64, %77\l  %79 = fadd contract float %74, %78\l  %80 = fmul contract float %69, %77\l  %81 = fmul contract float %64, %73\l  %82 = fsub contract float %80, %81\l  %83 = getelementptr inbounds float, float addrspace(1)* %2, i64 %71\l  store float %82, float addrspace(1)* %83, align 4, !tbaa !16\l  %84 = getelementptr inbounds float, float addrspace(1)* %2, i64 %75\l  store float %79, float addrspace(1)* %84, align 4, !tbaa !16\l  br label %85\l}"];
	Node0x4b25980 -> Node0x4b274e0;
	Node0x4b274e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%85:\l85:                                               \l  ret void\l}"];
}
