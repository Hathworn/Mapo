digraph "CFG for 'vec_computePSF_phaseNMany' function" {
	label="CFG for 'vec_computePSF_phaseNMany' function";

	Node0x5c64a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%13:\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %17 = getelementptr i8, i8 addrspace(4)* %16, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = getelementptr inbounds i8, i8 addrspace(4)* %16, i64 12\l  %22 = bitcast i8 addrspace(4)* %21 to i32 addrspace(4)*\l  %23 = load i32, i32 addrspace(4)* %22, align 4, !tbaa !7\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %26 = getelementptr i8, i8 addrspace(4)* %16, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = mul i32 %25, %29\l  %31 = add i32 %30, %24\l  %32 = udiv i32 %23, %20\l  %33 = mul i32 %32, %20\l  %34 = icmp ugt i32 %23, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %31\l  %38 = add i32 %37, %15\l  %39 = mul i32 %38, %20\l  %40 = add i32 %39, %14\l  %41 = icmp slt i32 %40, %0\l  br i1 %41, label %42, label %290\l|{<s0>T|<s1>F}}"];
	Node0x5c64a00:s0 -> Node0x5c69700;
	Node0x5c64a00:s1 -> Node0x5c69790;
	Node0x5c69700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%42:\l42:                                               \l  %43 = freeze i32 %40\l  %44 = freeze i32 %1\l  %45 = sdiv i32 %43, %44\l  %46 = mul i32 %45, %44\l  %47 = sub i32 %43, %46\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds double, double addrspace(1)* %3, i64 %48\l  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %51 = sext i32 %45 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %8, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %54 = fmul contract double %50, %53\l  %55 = getelementptr inbounds double, double addrspace(1)* %4, i64 %48\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %57 = add nsw i32 %45, %12\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds double, double addrspace(1)* %8, i64 %58\l  %60 = load double, double addrspace(1)* %59, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %61 = fmul contract double %56, %60\l  %62 = fadd contract double %54, %61\l  %63 = getelementptr inbounds double, double addrspace(1)* %5, i64 %48\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %65 = shl nsw i32 %12, 1\l  %66 = add nsw i32 %45, %65\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %8, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %70 = fmul contract double %64, %69\l  %71 = fadd contract double %62, %70\l  %72 = getelementptr inbounds double, double addrspace(1)* %7, i64 %48\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %74 = fadd contract double %73, %71\l  %75 = getelementptr inbounds double, double addrspace(1)* %6, i64 %48\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %77 = tail call double @llvm.fabs.f64(double %74)\l  %78 = fcmp olt double %77, 0x41D0000000000000\l  br i1 %78, label %79, label %140\l|{<s0>T|<s1>F}}"];
	Node0x5c69700:s0 -> Node0x5c6c2e0;
	Node0x5c69700:s1 -> Node0x5c6c370;
	Node0x5c6c2e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%79:\l79:                                               \l  %80 = fmul double %77, 0x3FE45F306DC9C883\l  %81 = tail call double @llvm.rint.f64(double %80)\l  %82 = tail call double @llvm.fma.f64(double %81, double 0xBFF921FB54442D18,\l... double %77)\l  %83 = tail call double @llvm.fma.f64(double %81, double 0xBC91A62633145C00,\l... double %82)\l  %84 = fmul double %81, 0x3C91A62633145C00\l  %85 = fneg double %84\l  %86 = tail call double @llvm.fma.f64(double %81, double 0x3C91A62633145C00,\l... double %85)\l  %87 = fsub double %82, %84\l  %88 = fsub double %82, %87\l  %89 = fsub double %88, %84\l  %90 = fsub double %87, %83\l  %91 = fadd double %90, %89\l  %92 = fsub double %91, %86\l  %93 = tail call double @llvm.fma.f64(double %81, double 0xB97B839A252049C0,\l... double %92)\l  %94 = fadd double %83, %93\l  %95 = fsub double %94, %83\l  %96 = fsub double %93, %95\l  %97 = fptosi double %81 to i32\l  %98 = fmul double %94, %94\l  %99 = fmul double %98, 5.000000e-01\l  %100 = fsub double 1.000000e+00, %99\l  %101 = fsub double 1.000000e+00, %100\l  %102 = fsub double %101, %99\l  %103 = fmul double %98, %98\l  %104 = tail call double @llvm.fma.f64(double %98, double 0xBDA907DB46CC5E42,\l... double 0x3E21EEB69037AB78)\l  %105 = tail call double @llvm.fma.f64(double %98, double %104, double\l... 0xBE927E4FA17F65F6)\l  %106 = tail call double @llvm.fma.f64(double %98, double %105, double\l... 0x3EFA01A019F4EC90)\l  %107 = tail call double @llvm.fma.f64(double %98, double %106, double\l... 0xBF56C16C16C16967)\l  %108 = tail call double @llvm.fma.f64(double %98, double %107, double\l... 0x3FA5555555555555)\l  %109 = fneg double %96\l  %110 = tail call double @llvm.fma.f64(double %94, double %109, double %102)\l  %111 = tail call double @llvm.fma.f64(double %103, double %108, double %110)\l  %112 = fadd double %100, %111\l  %113 = tail call double @llvm.fma.f64(double %98, double 0x3DE5E0B2F9A43BB8,\l... double 0xBE5AE600B42FDFA7)\l  %114 = tail call double @llvm.fma.f64(double %98, double %113, double\l... 0x3EC71DE3796CDE01)\l  %115 = tail call double @llvm.fma.f64(double %98, double %114, double\l... 0xBF2A01A019E83E5C)\l  %116 = tail call double @llvm.fma.f64(double %98, double %115, double\l... 0x3F81111111110BB3)\l  %117 = fneg double %98\l  %118 = fmul double %94, %117\l  %119 = fmul double %96, 5.000000e-01\l  %120 = tail call double @llvm.fma.f64(double %118, double %116, double %119)\l  %121 = tail call double @llvm.fma.f64(double %98, double %120, double %109)\l  %122 = tail call double @llvm.fma.f64(double %118, double\l... 0xBFC5555555555555, double %121)\l  %123 = fsub double %94, %122\l  %124 = fneg double %123\l  %125 = and i32 %97, 1\l  %126 = icmp eq i32 %125, 0\l  %127 = select i1 %126, double %112, double %124\l  %128 = bitcast double %127 to \<2 x i32\>\l  %129 = shl i32 %97, 30\l  %130 = and i32 %129, -2147483648\l  %131 = extractelement \<2 x i32\> %128, i64 1\l  %132 = xor i32 %131, %130\l  %133 = insertelement \<2 x i32\> %128, i32 %132, i64 1\l  %134 = tail call i1 @llvm.amdgcn.class.f64(double %77, i32 504)\l  %135 = select i1 %134, \<2 x i32\> %133, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %136 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %48\l  %137 = load i32, i32 addrspace(1)* %136, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %138 = mul nsw i32 %45, %2\l  %139 = add nsw i32 %137, %138\l  br label %258\l}"];
	Node0x5c6c2e0 -> Node0x5c70900;
	Node0x5c6c370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%140:\l140:                                              \l  %141 = tail call double @llvm.amdgcn.trig.preop.f64(double %77, i32 0)\l  %142 = tail call double @llvm.amdgcn.trig.preop.f64(double %77, i32 1)\l  %143 = tail call double @llvm.amdgcn.trig.preop.f64(double %77, i32 2)\l  %144 = fcmp oge double %77, 0x7B00000000000000\l  %145 = tail call double @llvm.amdgcn.ldexp.f64(double %77, i32 -128)\l  %146 = select i1 %144, double %145, double %77\l  %147 = fmul double %143, %146\l  %148 = fneg double %147\l  %149 = tail call double @llvm.fma.f64(double %143, double %146, double %148)\l  %150 = fmul double %142, %146\l  %151 = fneg double %150\l  %152 = tail call double @llvm.fma.f64(double %142, double %146, double %151)\l  %153 = fmul double %141, %146\l  %154 = fneg double %153\l  %155 = tail call double @llvm.fma.f64(double %141, double %146, double %154)\l  %156 = fadd double %150, %155\l  %157 = fsub double %156, %150\l  %158 = fsub double %156, %157\l  %159 = fsub double %155, %157\l  %160 = fsub double %150, %158\l  %161 = fadd double %159, %160\l  %162 = fadd double %147, %152\l  %163 = fsub double %162, %147\l  %164 = fsub double %162, %163\l  %165 = fsub double %152, %163\l  %166 = fsub double %147, %164\l  %167 = fadd double %165, %166\l  %168 = fadd double %162, %161\l  %169 = fsub double %168, %162\l  %170 = fsub double %168, %169\l  %171 = fsub double %161, %169\l  %172 = fsub double %162, %170\l  %173 = fadd double %171, %172\l  %174 = fadd double %167, %173\l  %175 = fadd double %149, %174\l  %176 = fadd double %153, %156\l  %177 = fsub double %176, %153\l  %178 = fsub double %156, %177\l  %179 = fadd double %178, %168\l  %180 = fsub double %179, %178\l  %181 = fsub double %168, %180\l  %182 = fadd double %181, %175\l  %183 = tail call double @llvm.amdgcn.ldexp.f64(double %176, i32 -2)\l  %184 = tail call double @llvm.amdgcn.fract.f64(double %183)\l  %185 = tail call i1 @llvm.amdgcn.class.f64(double %183, i32 516)\l  %186 = select i1 %185, double 0.000000e+00, double %184\l  %187 = tail call double @llvm.amdgcn.ldexp.f64(double %186, i32 2)\l  %188 = fadd double %187, %179\l  %189 = fcmp olt double %188, 0.000000e+00\l  %190 = select i1 %189, double 4.000000e+00, double 0.000000e+00\l  %191 = fadd double %187, %190\l  %192 = fadd double %179, %191\l  %193 = fptosi double %192 to i32\l  %194 = sitofp i32 %193 to double\l  %195 = fsub double %191, %194\l  %196 = fadd double %179, %195\l  %197 = fsub double %196, %195\l  %198 = fsub double %179, %197\l  %199 = fadd double %182, %198\l  %200 = fcmp oge double %196, 5.000000e-01\l  %201 = zext i1 %200 to i32\l  %202 = add nsw i32 %201, %193\l  %203 = select i1 %200, double 1.000000e+00, double 0.000000e+00\l  %204 = fsub double %196, %203\l  %205 = fadd double %204, %199\l  %206 = fsub double %205, %204\l  %207 = fsub double %199, %206\l  %208 = fmul double %205, 0x3FF921FB54442D18\l  %209 = fneg double %208\l  %210 = tail call double @llvm.fma.f64(double %205, double\l... 0x3FF921FB54442D18, double %209)\l  %211 = tail call double @llvm.fma.f64(double %205, double\l... 0x3C91A62633145C07, double %210)\l  %212 = tail call double @llvm.fma.f64(double %207, double\l... 0x3FF921FB54442D18, double %211)\l  %213 = fadd double %208, %212\l  %214 = fsub double %213, %208\l  %215 = fsub double %212, %214\l  %216 = fmul double %213, %213\l  %217 = fmul double %216, 5.000000e-01\l  %218 = fsub double 1.000000e+00, %217\l  %219 = fsub double 1.000000e+00, %218\l  %220 = fsub double %219, %217\l  %221 = fmul double %216, %216\l  %222 = tail call double @llvm.fma.f64(double %216, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %223 = tail call double @llvm.fma.f64(double %216, double %222, double\l... 0xBE927E4FA17F65F6)\l  %224 = tail call double @llvm.fma.f64(double %216, double %223, double\l... 0x3EFA01A019F4EC90)\l  %225 = tail call double @llvm.fma.f64(double %216, double %224, double\l... 0xBF56C16C16C16967)\l  %226 = tail call double @llvm.fma.f64(double %216, double %225, double\l... 0x3FA5555555555555)\l  %227 = fneg double %215\l  %228 = tail call double @llvm.fma.f64(double %213, double %227, double %220)\l  %229 = tail call double @llvm.fma.f64(double %221, double %226, double %228)\l  %230 = fadd double %218, %229\l  %231 = tail call double @llvm.fma.f64(double %216, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %232 = tail call double @llvm.fma.f64(double %216, double %231, double\l... 0x3EC71DE3796CDE01)\l  %233 = tail call double @llvm.fma.f64(double %216, double %232, double\l... 0xBF2A01A019E83E5C)\l  %234 = tail call double @llvm.fma.f64(double %216, double %233, double\l... 0x3F81111111110BB3)\l  %235 = fneg double %216\l  %236 = fmul double %213, %235\l  %237 = fmul double %215, 5.000000e-01\l  %238 = tail call double @llvm.fma.f64(double %236, double %234, double %237)\l  %239 = tail call double @llvm.fma.f64(double %216, double %238, double %227)\l  %240 = tail call double @llvm.fma.f64(double %236, double\l... 0xBFC5555555555555, double %239)\l  %241 = fsub double %213, %240\l  %242 = fneg double %241\l  %243 = and i32 %202, 1\l  %244 = icmp eq i32 %243, 0\l  %245 = select i1 %244, double %230, double %242\l  %246 = bitcast double %245 to \<2 x i32\>\l  %247 = shl i32 %202, 30\l  %248 = and i32 %247, -2147483648\l  %249 = extractelement \<2 x i32\> %246, i64 1\l  %250 = xor i32 %249, %248\l  %251 = insertelement \<2 x i32\> %246, i32 %250, i64 1\l  %252 = tail call i1 @llvm.amdgcn.class.f64(double %77, i32 504)\l  %253 = select i1 %252, \<2 x i32\> %251, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %254 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %48\l  %255 = load i32, i32 addrspace(1)* %254, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %256 = mul nsw i32 %45, %2\l  %257 = add nsw i32 %255, %256\l  br label %258\l}"];
	Node0x5c6c370 -> Node0x5c70900;
	Node0x5c70900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%258:\l258:                                              \l  %259 = phi i32 [ %139, %79 ], [ %257, %140 ]\l  %260 = phi \<2 x i32\> [ %135, %79 ], [ %253, %140 ]\l  %261 = phi i32 [ %129, %79 ], [ %247, %140 ]\l  %262 = phi i32 [ %125, %79 ], [ %243, %140 ]\l  %263 = phi double [ %123, %79 ], [ %241, %140 ]\l  %264 = phi double [ %112, %79 ], [ %230, %140 ]\l  %265 = phi i32 [ %138, %79 ], [ %256, %140 ]\l  %266 = phi i1 [ %134, %79 ], [ %252, %140 ]\l  %267 = bitcast \<2 x i32\> %260 to double\l  %268 = fmul contract double %76, %267\l  %269 = sext i32 %259 to i64\l  %270 = getelementptr inbounds double, double addrspace(1)* %11, i64 %269\l  store double %268, double addrspace(1)* %270, align 8, !tbaa !16\l  %271 = load double, double addrspace(1)* %75, align 8, !tbaa !16\l  %272 = icmp eq i32 %262, 0\l  %273 = select i1 %272, double %263, double %264\l  %274 = bitcast double %273 to \<2 x i32\>\l  %275 = bitcast double %74 to \<2 x i32\>\l  %276 = extractelement \<2 x i32\> %275, i64 1\l  %277 = xor i32 %261, %276\l  %278 = and i32 %277, -2147483648\l  %279 = extractelement \<2 x i32\> %274, i64 1\l  %280 = xor i32 %279, %278\l  %281 = insertelement \<2 x i32\> %274, i32 %280, i64 1\l  %282 = select i1 %266, \<2 x i32\> %281, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %283 = bitcast \<2 x i32\> %282 to double\l  %284 = fmul contract double %271, %283\l  %285 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %48\l  %286 = load i32, i32 addrspace(1)* %285, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %287 = add nsw i32 %286, %265\l  %288 = sext i32 %287 to i64\l  %289 = getelementptr inbounds double, double addrspace(1)* %11, i64 %288\l  store double %284, double addrspace(1)* %289, align 8, !tbaa !16\l  br label %290\l}"];
	Node0x5c70900 -> Node0x5c69790;
	Node0x5c69790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%290:\l290:                                              \l  ret void\l}"];
}
