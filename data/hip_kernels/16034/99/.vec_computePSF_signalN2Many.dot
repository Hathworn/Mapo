digraph "CFG for 'vec_computePSF_signalN2Many' function" {
	label="CFG for 'vec_computePSF_signalN2Many' function";

	Node0x5d522d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !7\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %13, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !5, !invariant.load !6\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %22, %26\l  %28 = add i32 %27, %21\l  %29 = udiv i32 %20, %17\l  %30 = mul i32 %29, %17\l  %31 = icmp ugt i32 %20, %30\l  %32 = zext i1 %31 to i32\l  %33 = add i32 %29, %32\l  %34 = mul i32 %33, %28\l  %35 = add i32 %34, %12\l  %36 = mul i32 %35, %17\l  %37 = add i32 %36, %11\l  %38 = icmp slt i32 %37, %0\l  br i1 %38, label %39, label %76\l|{<s0>T|<s1>F}}"];
	Node0x5d522d0:s0 -> Node0x5d54bc0;
	Node0x5d522d0:s1 -> Node0x5d57010;
	Node0x5d54bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%39:\l39:                                               \l  %40 = freeze i32 %37\l  %41 = freeze i32 %1\l  %42 = sdiv i32 %40, %41\l  %43 = mul i32 %42, %41\l  %44 = sub i32 %40, %43\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %45\l  %47 = load i32, i32 addrspace(1)* %46, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %48 = mul nsw i32 %42, %2\l  %49 = add nsw i32 %47, %48\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %6, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !20,\l... !amdgpu.noclobber !6\l  %53 = fdiv contract double %52, %3\l  %54 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %45\l  %55 = load i32, i32 addrspace(1)* %54, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %56 = add nsw i32 %55, %48\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %6, i64 %57\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !20,\l... !amdgpu.noclobber !6\l  %60 = fdiv contract double %59, %3\l  %61 = fmul contract double %53, %53\l  %62 = fmul contract double %60, %60\l  %63 = fadd contract double %61, %62\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %45\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %66 = shl nsw i32 %1, 1\l  %67 = mul nsw i32 %42, %66\l  %68 = add nsw i32 %65, %67\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %9, i64 %69\l  store double %63, double addrspace(1)* %70, align 8, !tbaa !20\l  %71 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %45\l  %72 = load i32, i32 addrspace(1)* %71, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %73 = add nsw i32 %72, %67\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds double, double addrspace(1)* %9, i64 %74\l  store double 0.000000e+00, double addrspace(1)* %75, align 8, !tbaa !20\l  br label %76\l}"];
	Node0x5d54bc0 -> Node0x5d57010;
	Node0x5d57010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  ret void\l}"];
}
