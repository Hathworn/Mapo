digraph "CFG for 'vec_computePSF_phaseNwithOil' function" {
	label="CFG for 'vec_computePSF_phaseNwithOil' function";

	Node0x5f2ea00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%16:\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 12\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 4, !tbaa !7\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %28 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %29 = getelementptr i8, i8 addrspace(4)* %19, i64 6\l  %30 = bitcast i8 addrspace(4)* %29 to i16 addrspace(4)*\l  %31 = load i16, i16 addrspace(4)* %30, align 2, !range !5, !invariant.load !6\l  %32 = zext i16 %31 to i32\l  %33 = mul i32 %28, %32\l  %34 = add i32 %33, %27\l  %35 = udiv i32 %26, %23\l  %36 = mul i32 %35, %23\l  %37 = icmp ugt i32 %26, %36\l  %38 = zext i1 %37 to i32\l  %39 = add i32 %35, %38\l  %40 = mul i32 %39, %34\l  %41 = add i32 %40, %18\l  %42 = mul i32 %41, %23\l  %43 = add i32 %42, %17\l  %44 = icmp slt i32 %43, %0\l  br i1 %44, label %45, label %368\l|{<s0>T|<s1>F}}"];
	Node0x5f2ea00:s0 -> Node0x5f33780;
	Node0x5f2ea00:s1 -> Node0x5f33810;
	Node0x5f33780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%45:\l45:                                               \l  %46 = sext i32 %43 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %1, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %49 = fmul contract double %48, %9\l  %50 = getelementptr inbounds double, double addrspace(1)* %2, i64 %46\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %52 = fmul contract double %51, %10\l  %53 = fadd contract double %49, %52\l  %54 = getelementptr inbounds double, double addrspace(1)* %8, i64 %46\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %56 = fadd contract double %55, %53\l  %57 = getelementptr inbounds double, double addrspace(1)* %3, i64 %46\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %59 = fmul contract double %58, %11\l  %60 = fadd contract double %56, %59\l  %61 = getelementptr inbounds double, double addrspace(1)* %5, i64 %46\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %63 = fmul contract double %62, %12\l  %64 = fsub contract double %60, %63\l  %65 = getelementptr inbounds double, double addrspace(1)* %4, i64 %46\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %67 = fmul contract double %59, %66\l  %68 = fadd contract double %56, %67\l  %69 = getelementptr inbounds double, double addrspace(1)* %6, i64 %46\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %71 = fmul contract double %63, %70\l  %72 = fsub contract double %68, %71\l  %73 = getelementptr inbounds double, double addrspace(1)* %7, i64 %46\l  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %75 = tail call double @llvm.fabs.f64(double %64)\l  %76 = fcmp olt double %75, 0x41D0000000000000\l  br i1 %76, label %77, label %96\l|{<s0>T|<s1>F}}"];
	Node0x5f33780:s0 -> Node0x5f36120;
	Node0x5f33780:s1 -> Node0x5f361b0;
	Node0x5f36120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%77:\l77:                                               \l  %78 = fmul double %75, 0x3FE45F306DC9C883\l  %79 = tail call double @llvm.rint.f64(double %78)\l  %80 = tail call double @llvm.fma.f64(double %79, double 0xBFF921FB54442D18,\l... double %75)\l  %81 = tail call double @llvm.fma.f64(double %79, double 0xBC91A62633145C00,\l... double %80)\l  %82 = fmul double %79, 0x3C91A62633145C00\l  %83 = fneg double %82\l  %84 = tail call double @llvm.fma.f64(double %79, double 0x3C91A62633145C00,\l... double %83)\l  %85 = fsub double %80, %82\l  %86 = fsub double %80, %85\l  %87 = fsub double %86, %82\l  %88 = fsub double %85, %81\l  %89 = fadd double %88, %87\l  %90 = fsub double %89, %84\l  %91 = tail call double @llvm.fma.f64(double %79, double 0xB97B839A252049C0,\l... double %90)\l  %92 = fadd double %81, %91\l  %93 = fsub double %92, %81\l  %94 = fsub double %91, %93\l  %95 = fptosi double %79 to i32\l  br label %172\l}"];
	Node0x5f36120 -> Node0x5f37340;
	Node0x5f361b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%96:\l96:                                               \l  %97 = tail call double @llvm.amdgcn.trig.preop.f64(double %75, i32 0)\l  %98 = tail call double @llvm.amdgcn.trig.preop.f64(double %75, i32 1)\l  %99 = tail call double @llvm.amdgcn.trig.preop.f64(double %75, i32 2)\l  %100 = fcmp oge double %75, 0x7B00000000000000\l  %101 = tail call double @llvm.amdgcn.ldexp.f64(double %75, i32 -128)\l  %102 = select i1 %100, double %101, double %75\l  %103 = fmul double %99, %102\l  %104 = fneg double %103\l  %105 = tail call double @llvm.fma.f64(double %99, double %102, double %104)\l  %106 = fmul double %98, %102\l  %107 = fneg double %106\l  %108 = tail call double @llvm.fma.f64(double %98, double %102, double %107)\l  %109 = fmul double %97, %102\l  %110 = fneg double %109\l  %111 = tail call double @llvm.fma.f64(double %97, double %102, double %110)\l  %112 = fadd double %106, %111\l  %113 = fsub double %112, %106\l  %114 = fsub double %112, %113\l  %115 = fsub double %111, %113\l  %116 = fsub double %106, %114\l  %117 = fadd double %115, %116\l  %118 = fadd double %103, %108\l  %119 = fsub double %118, %103\l  %120 = fsub double %118, %119\l  %121 = fsub double %108, %119\l  %122 = fsub double %103, %120\l  %123 = fadd double %121, %122\l  %124 = fadd double %118, %117\l  %125 = fsub double %124, %118\l  %126 = fsub double %124, %125\l  %127 = fsub double %117, %125\l  %128 = fsub double %118, %126\l  %129 = fadd double %127, %128\l  %130 = fadd double %123, %129\l  %131 = fadd double %105, %130\l  %132 = fadd double %109, %112\l  %133 = fsub double %132, %109\l  %134 = fsub double %112, %133\l  %135 = fadd double %134, %124\l  %136 = fsub double %135, %134\l  %137 = fsub double %124, %136\l  %138 = fadd double %137, %131\l  %139 = tail call double @llvm.amdgcn.ldexp.f64(double %132, i32 -2)\l  %140 = tail call double @llvm.amdgcn.fract.f64(double %139)\l  %141 = tail call i1 @llvm.amdgcn.class.f64(double %139, i32 516)\l  %142 = select i1 %141, double 0.000000e+00, double %140\l  %143 = tail call double @llvm.amdgcn.ldexp.f64(double %142, i32 2)\l  %144 = fadd double %143, %135\l  %145 = fcmp olt double %144, 0.000000e+00\l  %146 = select i1 %145, double 4.000000e+00, double 0.000000e+00\l  %147 = fadd double %143, %146\l  %148 = fadd double %135, %147\l  %149 = fptosi double %148 to i32\l  %150 = sitofp i32 %149 to double\l  %151 = fsub double %147, %150\l  %152 = fadd double %135, %151\l  %153 = fsub double %152, %151\l  %154 = fsub double %135, %153\l  %155 = fadd double %138, %154\l  %156 = fcmp oge double %152, 5.000000e-01\l  %157 = zext i1 %156 to i32\l  %158 = add nsw i32 %157, %149\l  %159 = select i1 %156, double 1.000000e+00, double 0.000000e+00\l  %160 = fsub double %152, %159\l  %161 = fadd double %160, %155\l  %162 = fsub double %161, %160\l  %163 = fsub double %155, %162\l  %164 = fmul double %161, 0x3FF921FB54442D18\l  %165 = fneg double %164\l  %166 = tail call double @llvm.fma.f64(double %161, double\l... 0x3FF921FB54442D18, double %165)\l  %167 = tail call double @llvm.fma.f64(double %161, double\l... 0x3C91A62633145C07, double %166)\l  %168 = tail call double @llvm.fma.f64(double %163, double\l... 0x3FF921FB54442D18, double %167)\l  %169 = fadd double %164, %168\l  %170 = fsub double %169, %164\l  %171 = fsub double %168, %170\l  br label %172\l}"];
	Node0x5f361b0 -> Node0x5f37340;
	Node0x5f37340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%172:\l172:                                              \l  %173 = phi double [ %94, %77 ], [ %171, %96 ]\l  %174 = phi double [ %92, %77 ], [ %169, %96 ]\l  %175 = phi i32 [ %95, %77 ], [ %158, %96 ]\l  %176 = fmul double %174, %174\l  %177 = fmul double %176, 5.000000e-01\l  %178 = fsub double 1.000000e+00, %177\l  %179 = fsub double 1.000000e+00, %178\l  %180 = fsub double %179, %177\l  %181 = fmul double %176, %176\l  %182 = tail call double @llvm.fma.f64(double %176, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %183 = tail call double @llvm.fma.f64(double %176, double %182, double\l... 0xBE927E4FA17F65F6)\l  %184 = tail call double @llvm.fma.f64(double %176, double %183, double\l... 0x3EFA01A019F4EC90)\l  %185 = tail call double @llvm.fma.f64(double %176, double %184, double\l... 0xBF56C16C16C16967)\l  %186 = tail call double @llvm.fma.f64(double %176, double %185, double\l... 0x3FA5555555555555)\l  %187 = fneg double %173\l  %188 = tail call double @llvm.fma.f64(double %174, double %187, double %180)\l  %189 = tail call double @llvm.fma.f64(double %181, double %186, double %188)\l  %190 = fadd double %178, %189\l  %191 = tail call double @llvm.fma.f64(double %176, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %192 = tail call double @llvm.fma.f64(double %176, double %191, double\l... 0x3EC71DE3796CDE01)\l  %193 = tail call double @llvm.fma.f64(double %176, double %192, double\l... 0xBF2A01A019E83E5C)\l  %194 = tail call double @llvm.fma.f64(double %176, double %193, double\l... 0x3F81111111110BB3)\l  %195 = fneg double %176\l  %196 = fmul double %174, %195\l  %197 = fmul double %173, 5.000000e-01\l  %198 = tail call double @llvm.fma.f64(double %196, double %194, double %197)\l  %199 = tail call double @llvm.fma.f64(double %176, double %198, double %187)\l  %200 = tail call double @llvm.fma.f64(double %196, double\l... 0xBFC5555555555555, double %199)\l  %201 = fsub double %174, %200\l  %202 = fneg double %201\l  %203 = and i32 %175, 1\l  %204 = icmp eq i32 %203, 0\l  %205 = select i1 %204, double %190, double %202\l  %206 = bitcast double %205 to \<2 x i32\>\l  %207 = shl i32 %175, 30\l  %208 = and i32 %207, -2147483648\l  %209 = extractelement \<2 x i32\> %206, i64 1\l  %210 = xor i32 %209, %208\l  %211 = insertelement \<2 x i32\> %206, i32 %210, i64 1\l  %212 = tail call i1 @llvm.amdgcn.class.f64(double %75, i32 504)\l  %213 = select i1 %212, \<2 x i32\> %211, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %214 = bitcast \<2 x i32\> %213 to double\l  %215 = fmul contract double %74, %214\l  %216 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %46\l  %217 = load i32, i32 addrspace(1)* %216, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds double, double addrspace(1)* %15, i64 %218\l  store double %215, double addrspace(1)* %219, align 8, !tbaa !16\l  %220 = load double, double addrspace(1)* %73, align 8, !tbaa !16\l  %221 = tail call double @llvm.fabs.f64(double %72)\l  %222 = fcmp olt double %221, 0x41D0000000000000\l  br i1 %222, label %223, label %242\l|{<s0>T|<s1>F}}"];
	Node0x5f37340:s0 -> Node0x5f3e4b0;
	Node0x5f37340:s1 -> Node0x5f3e540;
	Node0x5f3e4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%223:\l223:                                              \l  %224 = fmul double %221, 0x3FE45F306DC9C883\l  %225 = tail call double @llvm.rint.f64(double %224)\l  %226 = tail call double @llvm.fma.f64(double %225, double\l... 0xBFF921FB54442D18, double %221)\l  %227 = tail call double @llvm.fma.f64(double %225, double\l... 0xBC91A62633145C00, double %226)\l  %228 = fmul double %225, 0x3C91A62633145C00\l  %229 = fneg double %228\l  %230 = tail call double @llvm.fma.f64(double %225, double\l... 0x3C91A62633145C00, double %229)\l  %231 = fsub double %226, %228\l  %232 = fsub double %226, %231\l  %233 = fsub double %232, %228\l  %234 = fsub double %231, %227\l  %235 = fadd double %234, %233\l  %236 = fsub double %235, %230\l  %237 = tail call double @llvm.fma.f64(double %225, double\l... 0xB97B839A252049C0, double %236)\l  %238 = fadd double %227, %237\l  %239 = fsub double %238, %227\l  %240 = fsub double %237, %239\l  %241 = fptosi double %225 to i32\l  br label %318\l}"];
	Node0x5f3e4b0 -> Node0x5f3f340;
	Node0x5f3e540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%242:\l242:                                              \l  %243 = tail call double @llvm.amdgcn.trig.preop.f64(double %221, i32 0)\l  %244 = tail call double @llvm.amdgcn.trig.preop.f64(double %221, i32 1)\l  %245 = tail call double @llvm.amdgcn.trig.preop.f64(double %221, i32 2)\l  %246 = fcmp oge double %221, 0x7B00000000000000\l  %247 = tail call double @llvm.amdgcn.ldexp.f64(double %221, i32 -128)\l  %248 = select i1 %246, double %247, double %221\l  %249 = fmul double %245, %248\l  %250 = fneg double %249\l  %251 = tail call double @llvm.fma.f64(double %245, double %248, double %250)\l  %252 = fmul double %244, %248\l  %253 = fneg double %252\l  %254 = tail call double @llvm.fma.f64(double %244, double %248, double %253)\l  %255 = fmul double %243, %248\l  %256 = fneg double %255\l  %257 = tail call double @llvm.fma.f64(double %243, double %248, double %256)\l  %258 = fadd double %252, %257\l  %259 = fsub double %258, %252\l  %260 = fsub double %258, %259\l  %261 = fsub double %257, %259\l  %262 = fsub double %252, %260\l  %263 = fadd double %261, %262\l  %264 = fadd double %249, %254\l  %265 = fsub double %264, %249\l  %266 = fsub double %264, %265\l  %267 = fsub double %254, %265\l  %268 = fsub double %249, %266\l  %269 = fadd double %267, %268\l  %270 = fadd double %264, %263\l  %271 = fsub double %270, %264\l  %272 = fsub double %270, %271\l  %273 = fsub double %263, %271\l  %274 = fsub double %264, %272\l  %275 = fadd double %273, %274\l  %276 = fadd double %269, %275\l  %277 = fadd double %251, %276\l  %278 = fadd double %255, %258\l  %279 = fsub double %278, %255\l  %280 = fsub double %258, %279\l  %281 = fadd double %280, %270\l  %282 = fsub double %281, %280\l  %283 = fsub double %270, %282\l  %284 = fadd double %283, %277\l  %285 = tail call double @llvm.amdgcn.ldexp.f64(double %278, i32 -2)\l  %286 = tail call double @llvm.amdgcn.fract.f64(double %285)\l  %287 = tail call i1 @llvm.amdgcn.class.f64(double %285, i32 516)\l  %288 = select i1 %287, double 0.000000e+00, double %286\l  %289 = tail call double @llvm.amdgcn.ldexp.f64(double %288, i32 2)\l  %290 = fadd double %289, %281\l  %291 = fcmp olt double %290, 0.000000e+00\l  %292 = select i1 %291, double 4.000000e+00, double 0.000000e+00\l  %293 = fadd double %289, %292\l  %294 = fadd double %281, %293\l  %295 = fptosi double %294 to i32\l  %296 = sitofp i32 %295 to double\l  %297 = fsub double %293, %296\l  %298 = fadd double %281, %297\l  %299 = fsub double %298, %297\l  %300 = fsub double %281, %299\l  %301 = fadd double %284, %300\l  %302 = fcmp oge double %298, 5.000000e-01\l  %303 = zext i1 %302 to i32\l  %304 = add nsw i32 %303, %295\l  %305 = select i1 %302, double 1.000000e+00, double 0.000000e+00\l  %306 = fsub double %298, %305\l  %307 = fadd double %306, %301\l  %308 = fsub double %307, %306\l  %309 = fsub double %301, %308\l  %310 = fmul double %307, 0x3FF921FB54442D18\l  %311 = fneg double %310\l  %312 = tail call double @llvm.fma.f64(double %307, double\l... 0x3FF921FB54442D18, double %311)\l  %313 = tail call double @llvm.fma.f64(double %307, double\l... 0x3C91A62633145C07, double %312)\l  %314 = tail call double @llvm.fma.f64(double %309, double\l... 0x3FF921FB54442D18, double %313)\l  %315 = fadd double %310, %314\l  %316 = fsub double %315, %310\l  %317 = fsub double %314, %316\l  br label %318\l}"];
	Node0x5f3e540 -> Node0x5f3f340;
	Node0x5f3f340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%318:\l318:                                              \l  %319 = phi double [ %240, %223 ], [ %317, %242 ]\l  %320 = phi double [ %238, %223 ], [ %315, %242 ]\l  %321 = phi i32 [ %241, %223 ], [ %304, %242 ]\l  %322 = fmul double %320, %320\l  %323 = fmul double %322, 5.000000e-01\l  %324 = fsub double 1.000000e+00, %323\l  %325 = fsub double 1.000000e+00, %324\l  %326 = fsub double %325, %323\l  %327 = fmul double %322, %322\l  %328 = tail call double @llvm.fma.f64(double %322, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %329 = tail call double @llvm.fma.f64(double %322, double %328, double\l... 0xBE927E4FA17F65F6)\l  %330 = tail call double @llvm.fma.f64(double %322, double %329, double\l... 0x3EFA01A019F4EC90)\l  %331 = tail call double @llvm.fma.f64(double %322, double %330, double\l... 0xBF56C16C16C16967)\l  %332 = tail call double @llvm.fma.f64(double %322, double %331, double\l... 0x3FA5555555555555)\l  %333 = fneg double %319\l  %334 = tail call double @llvm.fma.f64(double %320, double %333, double %326)\l  %335 = tail call double @llvm.fma.f64(double %327, double %332, double %334)\l  %336 = fadd double %324, %335\l  %337 = tail call double @llvm.fma.f64(double %322, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %338 = tail call double @llvm.fma.f64(double %322, double %337, double\l... 0x3EC71DE3796CDE01)\l  %339 = tail call double @llvm.fma.f64(double %322, double %338, double\l... 0xBF2A01A019E83E5C)\l  %340 = tail call double @llvm.fma.f64(double %322, double %339, double\l... 0x3F81111111110BB3)\l  %341 = fneg double %322\l  %342 = fmul double %320, %341\l  %343 = fmul double %319, 5.000000e-01\l  %344 = tail call double @llvm.fma.f64(double %342, double %340, double %343)\l  %345 = tail call double @llvm.fma.f64(double %322, double %344, double %333)\l  %346 = tail call double @llvm.fma.f64(double %342, double\l... 0xBFC5555555555555, double %345)\l  %347 = fsub double %320, %346\l  %348 = and i32 %321, 1\l  %349 = icmp eq i32 %348, 0\l  %350 = select i1 %349, double %347, double %336\l  %351 = bitcast double %350 to \<2 x i32\>\l  %352 = shl i32 %321, 30\l  %353 = bitcast double %72 to \<2 x i32\>\l  %354 = extractelement \<2 x i32\> %353, i64 1\l  %355 = xor i32 %352, %354\l  %356 = and i32 %355, -2147483648\l  %357 = extractelement \<2 x i32\> %351, i64 1\l  %358 = xor i32 %357, %356\l  %359 = insertelement \<2 x i32\> %351, i32 %358, i64 1\l  %360 = tail call i1 @llvm.amdgcn.class.f64(double %221, i32 504)\l  %361 = select i1 %360, \<2 x i32\> %359, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %362 = bitcast \<2 x i32\> %361 to double\l  %363 = fmul contract double %220, %362\l  %364 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %46\l  %365 = load i32, i32 addrspace(1)* %364, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %366 = sext i32 %365 to i64\l  %367 = getelementptr inbounds double, double addrspace(1)* %15, i64 %366\l  store double %363, double addrspace(1)* %367, align 8, !tbaa !16\l  br label %368\l}"];
	Node0x5f3f340 -> Node0x5f33810;
	Node0x5f33810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%368:\l368:                                              \l  ret void\l}"];
}
