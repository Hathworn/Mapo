digraph "CFG for 'vec_computePSF_phase' function" {
	label="CFG for 'vec_computePSF_phase' function";

	Node0x52439f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !7\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %24 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 2, !range !5, !invariant.load !6\l  %27 = zext i16 %26 to i32\l  %28 = mul i32 %23, %27\l  %29 = add i32 %28, %22\l  %30 = udiv i32 %21, %18\l  %31 = mul i32 %30, %18\l  %32 = icmp ugt i32 %21, %31\l  %33 = zext i1 %32 to i32\l  %34 = add i32 %30, %33\l  %35 = mul i32 %34, %29\l  %36 = add i32 %35, %13\l  %37 = mul i32 %36, %18\l  %38 = add i32 %37, %12\l  %39 = icmp slt i32 %38, %0\l  br i1 %39, label %40, label %256\l|{<s0>T|<s1>F}}"];
	Node0x52439f0:s0 -> Node0x5248650;
	Node0x52439f0:s1 -> Node0x52486e0;
	Node0x5248650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%40:\l40:                                               \l  %41 = sext i32 %38 to i64\l  %42 = getelementptr inbounds double, double addrspace(1)* %3, i64 %41\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %44 = fmul contract double %43, %8\l  %45 = getelementptr inbounds double, double addrspace(1)* %4, i64 %41\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %47 = fmul contract double %46, %9\l  %48 = fadd contract double %44, %47\l  %49 = getelementptr inbounds double, double addrspace(1)* %5, i64 %41\l  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %51 = fmul contract double %50, %10\l  %52 = fadd contract double %48, %51\l  %53 = getelementptr inbounds double, double addrspace(1)* %7, i64 %41\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %55 = fadd contract double %54, %52\l  %56 = getelementptr inbounds double, double addrspace(1)* %6, i64 %41\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %58 = tail call double @llvm.fabs.f64(double %55)\l  %59 = fcmp olt double %58, 0x41D0000000000000\l  br i1 %59, label %60, label %117\l|{<s0>T|<s1>F}}"];
	Node0x5248650:s0 -> Node0x524a670;
	Node0x5248650:s1 -> Node0x524a700;
	Node0x524a670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%60:\l60:                                               \l  %61 = fmul double %58, 0x3FE45F306DC9C883\l  %62 = tail call double @llvm.rint.f64(double %61)\l  %63 = tail call double @llvm.fma.f64(double %62, double 0xBFF921FB54442D18,\l... double %58)\l  %64 = tail call double @llvm.fma.f64(double %62, double 0xBC91A62633145C00,\l... double %63)\l  %65 = fmul double %62, 0x3C91A62633145C00\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %62, double 0x3C91A62633145C00,\l... double %66)\l  %68 = fsub double %63, %65\l  %69 = fsub double %63, %68\l  %70 = fsub double %69, %65\l  %71 = fsub double %68, %64\l  %72 = fadd double %71, %70\l  %73 = fsub double %72, %67\l  %74 = tail call double @llvm.fma.f64(double %62, double 0xB97B839A252049C0,\l... double %73)\l  %75 = fadd double %64, %74\l  %76 = fsub double %75, %64\l  %77 = fsub double %74, %76\l  %78 = fptosi double %62 to i32\l  %79 = fmul double %75, %75\l  %80 = fmul double %79, 5.000000e-01\l  %81 = fsub double 1.000000e+00, %80\l  %82 = fsub double 1.000000e+00, %81\l  %83 = fsub double %82, %80\l  %84 = fmul double %79, %79\l  %85 = tail call double @llvm.fma.f64(double %79, double 0xBDA907DB46CC5E42,\l... double 0x3E21EEB69037AB78)\l  %86 = tail call double @llvm.fma.f64(double %79, double %85, double\l... 0xBE927E4FA17F65F6)\l  %87 = tail call double @llvm.fma.f64(double %79, double %86, double\l... 0x3EFA01A019F4EC90)\l  %88 = tail call double @llvm.fma.f64(double %79, double %87, double\l... 0xBF56C16C16C16967)\l  %89 = tail call double @llvm.fma.f64(double %79, double %88, double\l... 0x3FA5555555555555)\l  %90 = fneg double %77\l  %91 = tail call double @llvm.fma.f64(double %75, double %90, double %83)\l  %92 = tail call double @llvm.fma.f64(double %84, double %89, double %91)\l  %93 = fadd double %81, %92\l  %94 = tail call double @llvm.fma.f64(double %79, double 0x3DE5E0B2F9A43BB8,\l... double 0xBE5AE600B42FDFA7)\l  %95 = tail call double @llvm.fma.f64(double %79, double %94, double\l... 0x3EC71DE3796CDE01)\l  %96 = tail call double @llvm.fma.f64(double %79, double %95, double\l... 0xBF2A01A019E83E5C)\l  %97 = tail call double @llvm.fma.f64(double %79, double %96, double\l... 0x3F81111111110BB3)\l  %98 = fneg double %79\l  %99 = fmul double %75, %98\l  %100 = fmul double %77, 5.000000e-01\l  %101 = tail call double @llvm.fma.f64(double %99, double %97, double %100)\l  %102 = tail call double @llvm.fma.f64(double %79, double %101, double %90)\l  %103 = tail call double @llvm.fma.f64(double %99, double 0xBFC5555555555555,\l... double %102)\l  %104 = fsub double %75, %103\l  %105 = fneg double %104\l  %106 = and i32 %78, 1\l  %107 = icmp eq i32 %106, 0\l  %108 = select i1 %107, double %93, double %105\l  %109 = bitcast double %108 to \<2 x i32\>\l  %110 = shl i32 %78, 30\l  %111 = and i32 %110, -2147483648\l  %112 = extractelement \<2 x i32\> %109, i64 1\l  %113 = xor i32 %112, %111\l  %114 = insertelement \<2 x i32\> %109, i32 %113, i64 1\l  %115 = tail call i1 @llvm.amdgcn.class.f64(double %58, i32 504)\l  %116 = select i1 %115, \<2 x i32\> %114, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %231\l}"];
	Node0x524a670 -> Node0x524e670;
	Node0x524a700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%117:\l117:                                              \l  %118 = tail call double @llvm.amdgcn.trig.preop.f64(double %58, i32 0)\l  %119 = tail call double @llvm.amdgcn.trig.preop.f64(double %58, i32 1)\l  %120 = tail call double @llvm.amdgcn.trig.preop.f64(double %58, i32 2)\l  %121 = fcmp oge double %58, 0x7B00000000000000\l  %122 = tail call double @llvm.amdgcn.ldexp.f64(double %58, i32 -128)\l  %123 = select i1 %121, double %122, double %58\l  %124 = fmul double %120, %123\l  %125 = fneg double %124\l  %126 = tail call double @llvm.fma.f64(double %120, double %123, double %125)\l  %127 = fmul double %119, %123\l  %128 = fneg double %127\l  %129 = tail call double @llvm.fma.f64(double %119, double %123, double %128)\l  %130 = fmul double %118, %123\l  %131 = fneg double %130\l  %132 = tail call double @llvm.fma.f64(double %118, double %123, double %131)\l  %133 = fadd double %127, %132\l  %134 = fsub double %133, %127\l  %135 = fsub double %133, %134\l  %136 = fsub double %132, %134\l  %137 = fsub double %127, %135\l  %138 = fadd double %136, %137\l  %139 = fadd double %124, %129\l  %140 = fsub double %139, %124\l  %141 = fsub double %139, %140\l  %142 = fsub double %129, %140\l  %143 = fsub double %124, %141\l  %144 = fadd double %142, %143\l  %145 = fadd double %139, %138\l  %146 = fsub double %145, %139\l  %147 = fsub double %145, %146\l  %148 = fsub double %138, %146\l  %149 = fsub double %139, %147\l  %150 = fadd double %148, %149\l  %151 = fadd double %144, %150\l  %152 = fadd double %126, %151\l  %153 = fadd double %130, %133\l  %154 = fsub double %153, %130\l  %155 = fsub double %133, %154\l  %156 = fadd double %155, %145\l  %157 = fsub double %156, %155\l  %158 = fsub double %145, %157\l  %159 = fadd double %158, %152\l  %160 = tail call double @llvm.amdgcn.ldexp.f64(double %153, i32 -2)\l  %161 = tail call double @llvm.amdgcn.fract.f64(double %160)\l  %162 = tail call i1 @llvm.amdgcn.class.f64(double %160, i32 516)\l  %163 = select i1 %162, double 0.000000e+00, double %161\l  %164 = tail call double @llvm.amdgcn.ldexp.f64(double %163, i32 2)\l  %165 = fadd double %164, %156\l  %166 = fcmp olt double %165, 0.000000e+00\l  %167 = select i1 %166, double 4.000000e+00, double 0.000000e+00\l  %168 = fadd double %164, %167\l  %169 = fadd double %156, %168\l  %170 = fptosi double %169 to i32\l  %171 = sitofp i32 %170 to double\l  %172 = fsub double %168, %171\l  %173 = fadd double %156, %172\l  %174 = fsub double %173, %172\l  %175 = fsub double %156, %174\l  %176 = fadd double %159, %175\l  %177 = fcmp oge double %173, 5.000000e-01\l  %178 = zext i1 %177 to i32\l  %179 = add nsw i32 %178, %170\l  %180 = select i1 %177, double 1.000000e+00, double 0.000000e+00\l  %181 = fsub double %173, %180\l  %182 = fadd double %181, %176\l  %183 = fsub double %182, %181\l  %184 = fsub double %176, %183\l  %185 = fmul double %182, 0x3FF921FB54442D18\l  %186 = fneg double %185\l  %187 = tail call double @llvm.fma.f64(double %182, double\l... 0x3FF921FB54442D18, double %186)\l  %188 = tail call double @llvm.fma.f64(double %182, double\l... 0x3C91A62633145C07, double %187)\l  %189 = tail call double @llvm.fma.f64(double %184, double\l... 0x3FF921FB54442D18, double %188)\l  %190 = fadd double %185, %189\l  %191 = fsub double %190, %185\l  %192 = fsub double %189, %191\l  %193 = fmul double %190, %190\l  %194 = fmul double %193, 5.000000e-01\l  %195 = fsub double 1.000000e+00, %194\l  %196 = fsub double 1.000000e+00, %195\l  %197 = fsub double %196, %194\l  %198 = fmul double %193, %193\l  %199 = tail call double @llvm.fma.f64(double %193, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %200 = tail call double @llvm.fma.f64(double %193, double %199, double\l... 0xBE927E4FA17F65F6)\l  %201 = tail call double @llvm.fma.f64(double %193, double %200, double\l... 0x3EFA01A019F4EC90)\l  %202 = tail call double @llvm.fma.f64(double %193, double %201, double\l... 0xBF56C16C16C16967)\l  %203 = tail call double @llvm.fma.f64(double %193, double %202, double\l... 0x3FA5555555555555)\l  %204 = fneg double %192\l  %205 = tail call double @llvm.fma.f64(double %190, double %204, double %197)\l  %206 = tail call double @llvm.fma.f64(double %198, double %203, double %205)\l  %207 = fadd double %195, %206\l  %208 = tail call double @llvm.fma.f64(double %193, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %209 = tail call double @llvm.fma.f64(double %193, double %208, double\l... 0x3EC71DE3796CDE01)\l  %210 = tail call double @llvm.fma.f64(double %193, double %209, double\l... 0xBF2A01A019E83E5C)\l  %211 = tail call double @llvm.fma.f64(double %193, double %210, double\l... 0x3F81111111110BB3)\l  %212 = fneg double %193\l  %213 = fmul double %190, %212\l  %214 = fmul double %192, 5.000000e-01\l  %215 = tail call double @llvm.fma.f64(double %213, double %211, double %214)\l  %216 = tail call double @llvm.fma.f64(double %193, double %215, double %204)\l  %217 = tail call double @llvm.fma.f64(double %213, double\l... 0xBFC5555555555555, double %216)\l  %218 = fsub double %190, %217\l  %219 = fneg double %218\l  %220 = and i32 %179, 1\l  %221 = icmp eq i32 %220, 0\l  %222 = select i1 %221, double %207, double %219\l  %223 = bitcast double %222 to \<2 x i32\>\l  %224 = shl i32 %179, 30\l  %225 = and i32 %224, -2147483648\l  %226 = extractelement \<2 x i32\> %223, i64 1\l  %227 = xor i32 %226, %225\l  %228 = insertelement \<2 x i32\> %223, i32 %227, i64 1\l  %229 = tail call i1 @llvm.amdgcn.class.f64(double %58, i32 504)\l  %230 = select i1 %229, \<2 x i32\> %228, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %231\l}"];
	Node0x524a700 -> Node0x524e670;
	Node0x524e670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%231:\l231:                                              \l  %232 = phi i32 [ %110, %60 ], [ %224, %117 ]\l  %233 = phi i32 [ %106, %60 ], [ %220, %117 ]\l  %234 = phi double [ %104, %60 ], [ %218, %117 ]\l  %235 = phi double [ %93, %60 ], [ %207, %117 ]\l  %236 = phi \<2 x i32\> [ %116, %60 ], [ %230, %117 ]\l  %237 = phi i1 [ %115, %60 ], [ %229, %117 ]\l  %238 = bitcast \<2 x i32\> %236 to double\l  %239 = fmul contract double %57, %238\l  %240 = getelementptr inbounds double, double addrspace(1)* %1, i64 %41\l  store double %239, double addrspace(1)* %240, align 8\l  %241 = load double, double addrspace(1)* %56, align 8, !tbaa !16\l  %242 = icmp eq i32 %233, 0\l  %243 = select i1 %242, double %234, double %235\l  %244 = bitcast double %243 to \<2 x i32\>\l  %245 = bitcast double %55 to \<2 x i32\>\l  %246 = extractelement \<2 x i32\> %245, i64 1\l  %247 = xor i32 %232, %246\l  %248 = and i32 %247, -2147483648\l  %249 = extractelement \<2 x i32\> %244, i64 1\l  %250 = xor i32 %249, %248\l  %251 = insertelement \<2 x i32\> %244, i32 %250, i64 1\l  %252 = select i1 %237, \<2 x i32\> %251, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %253 = bitcast \<2 x i32\> %252 to double\l  %254 = fmul contract double %241, %253\l  %255 = getelementptr inbounds double, double addrspace(1)* %2, i64 %41\l  store double %254, double addrspace(1)* %255, align 8, !tbaa !16\l  br label %256\l}"];
	Node0x524e670 -> Node0x52486e0;
	Node0x52486e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%256:\l256:                                              \l  ret void\l}"];
}
