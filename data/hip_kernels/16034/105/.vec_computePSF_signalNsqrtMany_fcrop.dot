digraph "CFG for 'vec_computePSF_signalNsqrtMany_fcrop' function" {
	label="CFG for 'vec_computePSF_signalNsqrtMany_fcrop' function";

	Node0x4ec80f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !7\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !5, !invariant.load !6\l  %24 = zext i16 %23 to i32\l  %25 = mul i32 %20, %24\l  %26 = add i32 %25, %19\l  %27 = udiv i32 %18, %15\l  %28 = mul i32 %27, %15\l  %29 = icmp ugt i32 %18, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %26\l  %33 = add i32 %32, %10\l  %34 = mul i32 %33, %15\l  %35 = add i32 %34, %9\l  %36 = icmp slt i32 %35, %0\l  br i1 %36, label %37, label %86\l|{<s0>T|<s1>F}}"];
	Node0x4ec80f0:s0 -> Node0x4ec9f60;
	Node0x4ec80f0:s1 -> Node0x4ecc2d0;
	Node0x4ec9f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%37:\l37:                                               \l  %38 = freeze i32 %35\l  %39 = freeze i32 %1\l  %40 = sdiv i32 %38, %39\l  %41 = mul i32 %40, %39\l  %42 = sub i32 %38, %41\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %46 = shl i32 %2, 1\l  %47 = mul i32 %46, %40\l  %48 = add nsw i32 %45, %47\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %4, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %52 = fdiv contract float %51, %5\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %43\l  %54 = load i32, i32 addrspace(1)* %53, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %55 = add nsw i32 %54, %47\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %4, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !20,\l... !amdgpu.noclobber !6\l  %59 = fdiv contract float %58, %5\l  %60 = fmul contract float %52, %52\l  %61 = fmul contract float %59, %59\l  %62 = fadd contract float %60, %61\l  %63 = fcmp olt float %62, 0x39F0000000000000\l  %64 = select i1 %63, float 0x41F0000000000000, float 1.000000e+00\l  %65 = fmul float %62, %64\l  %66 = tail call float @llvm.sqrt.f32(float %65)\l  %67 = bitcast float %66 to i32\l  %68 = add nsw i32 %67, -1\l  %69 = bitcast i32 %68 to float\l  %70 = add nsw i32 %67, 1\l  %71 = bitcast i32 %70 to float\l  %72 = tail call i1 @llvm.amdgcn.class.f32(float %65, i32 608)\l  %73 = select i1 %63, float 0x3EF0000000000000, float 1.000000e+00\l  %74 = fneg float %71\l  %75 = tail call float @llvm.fma.f32(float %74, float %66, float %65)\l  %76 = fcmp ogt float %75, 0.000000e+00\l  %77 = fneg float %69\l  %78 = tail call float @llvm.fma.f32(float %77, float %66, float %65)\l  %79 = fcmp ole float %78, 0.000000e+00\l  %80 = select i1 %79, float %69, float %66\l  %81 = select i1 %76, float %71, float %80\l  %82 = fmul float %73, %81\l  %83 = select i1 %72, float %65, float %82\l  %84 = sext i32 %35 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %3, i64 %84\l  store float %83, float addrspace(1)* %85, align 4, !tbaa !20\l  br label %86\l}"];
	Node0x4ec9f60 -> Node0x4ecc2d0;
	Node0x4ecc2d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%86:\l86:                                               \l  ret void\l}"];
}
