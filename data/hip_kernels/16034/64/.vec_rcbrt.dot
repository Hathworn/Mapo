digraph "CFG for 'vec_rcbrt' function" {
	label="CFG for 'vec_rcbrt' function";

	Node0x5186060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %14\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = add i32 %27, %5\l  %29 = mul i32 %28, %10\l  %30 = add i32 %29, %4\l  %31 = icmp slt i32 %30, %0\l  br i1 %31, label %32, label %64\l|{<s0>T|<s1>F}}"];
	Node0x5186060:s0 -> Node0x518a0a0;
	Node0x5186060:s1 -> Node0x518a130;
	Node0x518a0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%32:\l32:                                               \l  %33 = sext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = tail call double @llvm.fabs.f64(double %35)\l  %37 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %36)\l  %38 = sitofp i32 %37 to float\l  %39 = fmul float %38, 0x3FD5555560000000\l  %40 = tail call float @llvm.rint.f32(float %39)\l  %41 = fptosi float %40 to i32\l  %42 = mul nsw i32 %41, -3\l  %43 = tail call double @llvm.amdgcn.ldexp.f64(double %36, i32 %42)\l  %44 = fptrunc double %43 to float\l  %45 = tail call float @llvm.log2.f32(float %44)\l  %46 = fmul float %45, 0xBFD5555560000000\l  %47 = tail call float @llvm.exp2.f32(float %46)\l  %48 = fpext float %47 to double\l  %49 = fmul double %48, %48\l  %50 = fmul double %49, %48\l  %51 = fneg double %43\l  %52 = tail call double @llvm.fma.f64(double %51, double %50, double\l... 1.000000e+00)\l  %53 = tail call double @llvm.fma.f64(double %52, double 0x3FCC71C71C71C8B2,\l... double 0x3FD5555555555685)\l  %54 = fmul double %52, %53\l  %55 = tail call double @llvm.fma.f64(double %48, double %54, double %48)\l  %56 = sub nsw i32 0, %41\l  %57 = tail call double @llvm.amdgcn.ldexp.f64(double %55, i32 %56)\l  %58 = tail call i1 @llvm.amdgcn.class.f64(double %43, i32 512)\l  %59 = select i1 %58, double 0.000000e+00, double %57\l  %60 = fcmp oeq double %35, 0.000000e+00\l  %61 = select i1 %60, double 0x7FF0000000000000, double %59\l  %62 = tail call double @llvm.copysign.f64(double %61, double %35)\l  %63 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  store double %62, double addrspace(1)* %63, align 8, !tbaa !16\l  br label %64\l}"];
	Node0x518a0a0 -> Node0x518a130;
	Node0x518a130 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%64:\l64:                                               \l  ret void\l}"];
}
