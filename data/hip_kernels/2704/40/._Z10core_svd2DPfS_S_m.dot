digraph "CFG for '_Z10core_svd2DPfS_S_m' function" {
	label="CFG for '_Z10core_svd2DPfS_S_m' function";

	Node0x5321a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 4, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = mul i32 %18, %5\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %21 = add i32 %19, %20\l  %22 = mul i32 %21, %13\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = add i32 %22, %23\l  %25 = zext i32 %24 to i64\l  %26 = icmp ult i64 %25, %3\l  br i1 %26, label %27, label %125\l|{<s0>T|<s1>F}}"];
	Node0x5321a00:s0 -> Node0x5324310;
	Node0x5321a00:s1 -> Node0x53243a0;
	Node0x5324310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%27:\l27:                                               \l  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %25\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %30 = fpext float %29 to double\l  %31 = add i64 %25, %3\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %34 = fpext float %33 to double\l  %35 = shl i64 %3, 1\l  %36 = add i64 %35, %25\l  %37 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %39 = fpext float %38 to double\l  %40 = tail call double @llvm.fabs.f64(double %34)\l  %41 = fcmp contract olt double %40, 1.000000e-15\l  br i1 %41, label %42, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5324310:s0 -> Node0x5326730;
	Node0x5324310:s1 -> Node0x53267c0;
	Node0x5326730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%42:\l42:                                               \l  %43 = insertelement \<2 x double\> undef, double %30, i64 0\l  %44 = insertelement \<2 x double\> %43, double %39, i64 1\l  br label %110\l}"];
	Node0x5326730 -> Node0x5327480;
	Node0x53267c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%45:\l45:                                               \l  %46 = fadd contract double %30, %39\l  %47 = fsub contract double %30, %39\l  %48 = fmul contract double %47, %47\l  %49 = fmul contract double %34, 4.000000e+00\l  %50 = fmul contract double %49, %34\l  %51 = fadd contract double %48, %50\l  %52 = fcmp olt double %51, 0x1000000000000000\l  %53 = select i1 %52, double 0x4FF0000000000000, double 1.000000e+00\l  %54 = fmul double %51, %53\l  %55 = tail call double @llvm.amdgcn.rsq.f64(double %54)\l  %56 = fmul double %54, %55\l  %57 = fmul double %55, 5.000000e-01\l  %58 = fneg double %57\l  %59 = tail call double @llvm.fma.f64(double %58, double %56, double\l... 5.000000e-01)\l  %60 = tail call double @llvm.fma.f64(double %57, double %59, double %57)\l  %61 = tail call double @llvm.fma.f64(double %56, double %59, double %56)\l  %62 = fneg double %61\l  %63 = tail call double @llvm.fma.f64(double %62, double %61, double %54)\l  %64 = tail call double @llvm.fma.f64(double %63, double %60, double %61)\l  %65 = fneg double %64\l  %66 = tail call double @llvm.fma.f64(double %65, double %64, double %54)\l  %67 = tail call double @llvm.fma.f64(double %66, double %60, double %64)\l  %68 = select i1 %52, double 0x37F0000000000000, double 1.000000e+00\l  %69 = fmul double %68, %67\l  %70 = fcmp oeq double %54, 0.000000e+00\l  %71 = fcmp oeq double %54, 0x7FF0000000000000\l  %72 = or i1 %70, %71\l  %73 = select i1 %72, double %54, double %69\l  %74 = fadd contract double %46, %73\l  %75 = fmul contract double %74, 5.000000e-01\l  %76 = insertelement \<2 x double\> undef, double %75, i64 0\l  %77 = fsub contract double %46, %73\l  %78 = fmul contract double %77, 5.000000e-01\l  %79 = insertelement \<2 x double\> %76, double %78, i64 1\l  %80 = fsub contract double %75, %30\l  %81 = fmul contract double %80, %80\l  %82 = fmul contract double %34, %34\l  %83 = fadd contract double %82, %81\l  %84 = fcmp olt double %83, 0x1000000000000000\l  %85 = select i1 %84, double 0x4FF0000000000000, double 1.000000e+00\l  %86 = fmul double %83, %85\l  %87 = tail call double @llvm.amdgcn.rsq.f64(double %86)\l  %88 = fmul double %86, %87\l  %89 = fmul double %87, 5.000000e-01\l  %90 = fneg double %89\l  %91 = tail call double @llvm.fma.f64(double %90, double %88, double\l... 5.000000e-01)\l  %92 = tail call double @llvm.fma.f64(double %89, double %91, double %89)\l  %93 = tail call double @llvm.fma.f64(double %88, double %91, double %88)\l  %94 = fneg double %93\l  %95 = tail call double @llvm.fma.f64(double %94, double %93, double %86)\l  %96 = tail call double @llvm.fma.f64(double %95, double %92, double %93)\l  %97 = fneg double %96\l  %98 = tail call double @llvm.fma.f64(double %97, double %96, double %86)\l  %99 = tail call double @llvm.fma.f64(double %98, double %92, double %96)\l  %100 = select i1 %84, double 0x37F0000000000000, double 1.000000e+00\l  %101 = fmul double %100, %99\l  %102 = fcmp oeq double %86, 0.000000e+00\l  %103 = fcmp oeq double %86, 0x7FF0000000000000\l  %104 = or i1 %102, %103\l  %105 = select i1 %104, double %86, double %101\l  %106 = fdiv contract double %34, %105\l  %107 = insertelement \<2 x double\> undef, double %106, i64 0\l  %108 = fdiv contract double %80, %105\l  %109 = insertelement \<2 x double\> %107, double %108, i64 1\l  br label %110\l}"];
	Node0x53267c0 -> Node0x5327480;
	Node0x5327480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%110:\l110:                                              \l  %111 = phi \<2 x double\> [ %44, %42 ], [ %79, %45 ]\l  %112 = phi \<2 x double\> [ \<double 1.000000e+00, double 0.000000e+00\>, %42 ],\l... [ %109, %45 ]\l  %113 = extractelement \<2 x double\> %111, i64 0\l  %114 = fptrunc double %113 to float\l  %115 = getelementptr inbounds float, float addrspace(1)* %1, i64 %25\l  store float %114, float addrspace(1)* %115, align 4, !tbaa !16\l  %116 = extractelement \<2 x double\> %112, i64 0\l  %117 = fptrunc double %116 to float\l  %118 = getelementptr inbounds float, float addrspace(1)* %2, i64 %25\l  store float %117, float addrspace(1)* %118, align 4, !tbaa !16\l  %119 = extractelement \<2 x double\> %111, i64 1\l  %120 = fptrunc double %119 to float\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %31\l  store float %120, float addrspace(1)* %121, align 4, !tbaa !16\l  %122 = extractelement \<2 x double\> %112, i64 1\l  %123 = fptrunc double %122 to float\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  store float %123, float addrspace(1)* %124, align 4, !tbaa !16\l  br label %125\l}"];
	Node0x5327480 -> Node0x53243a0;
	Node0x53243a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%125:\l125:                                              \l  ret void\l}"];
}
