digraph "CFG for '_Z12bitonicSort2Pijjj' function" {
	label="CFG for '_Z12bitonicSort2Pijjj' function";

	Node0x47fcc90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = bitcast i32 addrspace(1)* %0 to %struct.HIP_vector_type addrspace(1)*\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = zext i32 %14 to i64\l  %16 = icmp eq i32 %1, 0\l  br i1 %16, label %198, label %17\l|{<s0>T|<s1>F}}"];
	Node0x47fcc90:s0 -> Node0x47fd7e0;
	Node0x47fcc90:s1 -> Node0x47fed30;
	Node0x47fed30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#dc5d4a70",label="{%17:\l17:                                               \l  %18 = icmp eq i32 %2, 0\l  br i1 %18, label %97, label %19\l|{<s0>T|<s1>F}}"];
	Node0x47fed30:s0 -> Node0x47fef00;
	Node0x47fed30:s1 -> Node0x47fef50;
	Node0x47fef50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%19:\l19:                                               \l  %20 = add i32 %2, -1\l  %21 = shl nuw i32 1, %20\l  %22 = sext i32 %21 to i64\l  %23 = add nsw i64 %22, 4294967295\l  %24 = zext i32 %20 to i64\l  %25 = lshr i64 %15, %24\l  %26 = zext i32 %2 to i64\l  %27 = shl i64 %25, %26\l  %28 = and i64 %23, %15\l  %29 = add i64 %27, %28\l  %30 = add i64 %29, %22\l  %31 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %29, i32 0, i32 0, i32 0, i64 0\l  %32 = load i32, i32 addrspace(1)* %31, align 16, !amdgpu.noclobber !5\l  %33 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %29, i32 0, i32 0, i32 0, i64 1\l  %34 = load i32, i32 addrspace(1)* %33, align 4, !amdgpu.noclobber !5\l  %35 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %29, i32 0, i32 0, i32 0, i64 2\l  %36 = load i32, i32 addrspace(1)* %35, align 8, !amdgpu.noclobber !5\l  %37 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %29, i32 0, i32 0, i32 0, i64 3\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !amdgpu.noclobber !5\l  %39 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30\l  %40 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %39, i64 0, i32 0, i32 0, i32 0\l  %41 = load \<4 x i32\>, \<4 x i32\> addrspace(1)* %40, align 16,\l... !amdgpu.noclobber !5\l  %42 = extractelement \<4 x i32\> %41, i64 0\l  %43 = icmp slt i32 %32, %42\l  %44 = zext i1 %43 to i32\l  %45 = extractelement \<4 x i32\> %41, i64 1\l  %46 = icmp slt i32 %34, %45\l  %47 = zext i1 %46 to i32\l  %48 = extractelement \<4 x i32\> %41, i64 2\l  %49 = icmp slt i32 %36, %48\l  %50 = zext i1 %49 to i32\l  %51 = extractelement \<4 x i32\> %41, i64 3\l  %52 = icmp slt i32 %38, %51\l  %53 = zext i1 %52 to i32\l  %54 = and i32 %32, %44\l  %55 = xor i32 %44, -1\l  %56 = and i32 %42, %55\l  %57 = or i32 %54, %56\l  %58 = and i32 %34, %47\l  %59 = xor i32 %47, -1\l  %60 = and i32 %45, %59\l  %61 = or i32 %58, %60\l  %62 = and i32 %36, %50\l  %63 = xor i32 %50, -1\l  %64 = and i32 %48, %63\l  %65 = or i32 %62, %64\l  %66 = and i32 %38, %53\l  %67 = xor i32 %53, -1\l  %68 = and i32 %51, %67\l  %69 = or i32 %66, %68\l  %70 = and i32 %32, %55\l  %71 = and i32 %42, %44\l  %72 = or i32 %70, %71\l  %73 = and i32 %34, %59\l  %74 = and i32 %45, %47\l  %75 = or i32 %73, %74\l  %76 = and i32 %36, %63\l  %77 = and i32 %48, %50\l  %78 = or i32 %76, %77\l  %79 = and i32 %38, %67\l  %80 = and i32 %51, %53\l  %81 = or i32 %79, %80\l  %82 = add i32 %1, -1\l  %83 = zext i32 %82 to i64\l  %84 = shl nuw i64 1, %83\l  %85 = and i64 %84, %15\l  %86 = icmp eq i64 %85, 0\l  br i1 %86, label %92, label %87\l|{<s0>T|<s1>F}}"];
	Node0x47fef50:s0 -> Node0x48000b0;
	Node0x47fef50:s1 -> Node0x4802270;
	Node0x4802270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%87:\l87:                                               \l  store i32 %57, i32 addrspace(1)* %31, align 16\l  store i32 %61, i32 addrspace(1)* %33, align 4\l  store i32 %65, i32 addrspace(1)* %35, align 8\l  store i32 %69, i32 addrspace(1)* %37, align 4\l  %88 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %39, i64 0, i32 0, i32 0, i32 0, i64 0\l  store i32 %72, i32 addrspace(1)* %88, align 16\l  %89 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30, i32 0, i32 0, i32 0, i64 1\l  store i32 %75, i32 addrspace(1)* %89, align 4\l  %90 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30, i32 0, i32 0, i32 0, i64 2\l  store i32 %78, i32 addrspace(1)* %90, align 8\l  %91 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30, i32 0, i32 0, i32 0, i64 3\l  store i32 %81, i32 addrspace(1)* %91, align 4\l  br label %325\l}"];
	Node0x4802270 -> Node0x4802cb0;
	Node0x48000b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%92:\l92:                                               \l  %93 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %39, i64 0, i32 0, i32 0, i32 0, i64 0\l  store i32 %57, i32 addrspace(1)* %93, align 16\l  %94 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30, i32 0, i32 0, i32 0, i64 1\l  store i32 %61, i32 addrspace(1)* %94, align 4\l  %95 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30, i32 0, i32 0, i32 0, i64 2\l  store i32 %65, i32 addrspace(1)* %95, align 8\l  %96 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %30, i32 0, i32 0, i32 0, i64 3\l  store i32 %69, i32 addrspace(1)* %96, align 4\l  store i32 %72, i32 addrspace(1)* %31, align 16\l  store i32 %75, i32 addrspace(1)* %33, align 4\l  store i32 %78, i32 addrspace(1)* %35, align 8\l  store i32 %81, i32 addrspace(1)* %37, align 4\l  br label %325\l}"];
	Node0x48000b0 -> Node0x4802cb0;
	Node0x47fef00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%97:\l97:                                               \l  %98 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 0\l  %99 = load i32, i32 addrspace(1)* %98, align 16, !amdgpu.noclobber !5\l  %100 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 1\l  %101 = load i32, i32 addrspace(1)* %100, align 4, !amdgpu.noclobber !5\l  %102 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 2\l  %103 = load i32, i32 addrspace(1)* %102, align 8, !amdgpu.noclobber !5\l  %104 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 3\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !amdgpu.noclobber !5\l  %106 = icmp slt i32 %99, %103\l  %107 = zext i1 %106 to i32\l  %108 = icmp slt i32 %101, %105\l  %109 = zext i1 %108 to i32\l  %110 = icmp slt i32 %103, %99\l  %111 = zext i1 %110 to i32\l  %112 = xor i32 %111, -1\l  %113 = icmp slt i32 %105, %101\l  %114 = zext i1 %113 to i32\l  %115 = xor i32 %114, -1\l  %116 = zext i32 %1 to i64\l  %117 = shl nuw i64 1, %116\l  %118 = and i64 %117, %15\l  %119 = icmp eq i64 %118, 0\l  br i1 %119, label %159, label %120\l|{<s0>T|<s1>F}}"];
	Node0x47fef00:s0 -> Node0x4804460;
	Node0x47fef00:s1 -> Node0x48044b0;
	Node0x48044b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%120:\l120:                                              \l  %121 = and i32 %99, %107\l  %122 = xor i32 %107, -1\l  %123 = and i32 %103, %122\l  %124 = or i32 %121, %123\l  %125 = and i32 %101, %109\l  %126 = xor i32 %109, -1\l  %127 = and i32 %105, %126\l  %128 = or i32 %125, %127\l  %129 = and i32 %103, %112\l  %130 = and i32 %99, %111\l  %131 = or i32 %129, %130\l  %132 = and i32 %105, %115\l  %133 = and i32 %101, %114\l  %134 = or i32 %132, %133\l  %135 = icmp slt i32 %124, %128\l  %136 = zext i1 %135 to i32\l  %137 = icmp slt i32 %128, %124\l  %138 = zext i1 %137 to i32\l  %139 = xor i32 %138, -1\l  %140 = icmp slt i32 %131, %134\l  %141 = zext i1 %140 to i32\l  %142 = icmp slt i32 %134, %131\l  %143 = zext i1 %142 to i32\l  %144 = xor i32 %143, -1\l  %145 = and i32 %124, %136\l  %146 = xor i32 %136, -1\l  %147 = and i32 %128, %146\l  %148 = or i32 %145, %147\l  store i32 %148, i32 addrspace(1)* %98, align 16, !tbaa !7\l  %149 = and i32 %128, %139\l  %150 = and i32 %124, %138\l  %151 = or i32 %149, %150\l  store i32 %151, i32 addrspace(1)* %100, align 4, !tbaa !7\l  %152 = and i32 %131, %141\l  %153 = xor i32 %141, -1\l  %154 = and i32 %134, %153\l  %155 = or i32 %152, %154\l  store i32 %155, i32 addrspace(1)* %102, align 8, !tbaa !7\l  %156 = and i32 %134, %144\l  %157 = and i32 %131, %143\l  %158 = or i32 %156, %157\l  store i32 %158, i32 addrspace(1)* %104, align 4, !tbaa !7\l  br label %325\l}"];
	Node0x48044b0 -> Node0x4802cb0;
	Node0x4804460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%159:\l159:                                              \l  %160 = xor i32 %107, -1\l  %161 = and i32 %99, %160\l  %162 = and i32 %103, %107\l  %163 = or i32 %161, %162\l  %164 = xor i32 %109, -1\l  %165 = and i32 %101, %164\l  %166 = and i32 %105, %109\l  %167 = or i32 %165, %166\l  %168 = and i32 %103, %111\l  %169 = and i32 %99, %112\l  %170 = or i32 %168, %169\l  %171 = and i32 %105, %114\l  %172 = and i32 %101, %115\l  %173 = or i32 %171, %172\l  %174 = icmp slt i32 %163, %167\l  %175 = zext i1 %174 to i32\l  %176 = icmp slt i32 %167, %163\l  %177 = zext i1 %176 to i32\l  %178 = xor i32 %177, -1\l  %179 = icmp slt i32 %170, %173\l  %180 = zext i1 %179 to i32\l  %181 = icmp slt i32 %173, %170\l  %182 = zext i1 %181 to i32\l  %183 = xor i32 %182, -1\l  %184 = xor i32 %175, -1\l  %185 = and i32 %163, %184\l  %186 = and i32 %167, %175\l  %187 = or i32 %185, %186\l  store i32 %187, i32 addrspace(1)* %98, align 16, !tbaa !7\l  %188 = and i32 %167, %177\l  %189 = and i32 %163, %178\l  %190 = or i32 %188, %189\l  store i32 %190, i32 addrspace(1)* %100, align 4, !tbaa !7\l  %191 = xor i32 %180, -1\l  %192 = and i32 %170, %191\l  %193 = and i32 %173, %180\l  %194 = or i32 %192, %193\l  store i32 %194, i32 addrspace(1)* %102, align 8, !tbaa !7\l  %195 = and i32 %173, %182\l  %196 = and i32 %170, %183\l  %197 = or i32 %195, %196\l  store i32 %197, i32 addrspace(1)* %104, align 4, !tbaa !7\l  br label %325\l}"];
	Node0x4804460 -> Node0x4802cb0;
	Node0x47fd7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%198:\l198:                                              \l  %199 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 0\l  %200 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 1\l  %201 = bitcast i32 addrspace(1)* %199 to \<2 x i32\> addrspace(1)*\l  %202 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %201, align 16\l  %203 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 2\l  %204 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %15, i32 0, i32 0, i32 0, i64 3\l  %205 = bitcast i32 addrspace(1)* %203 to \<2 x i32\> addrspace(1)*\l  %206 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %205, align 8\l  %207 = extractelement \<2 x i32\> %202, i64 0\l  %208 = extractelement \<2 x i32\> %202, i64 1\l  %209 = icmp slt i32 %207, %208\l  %210 = zext i1 %209 to i32\l  %211 = icmp slt i32 %208, %207\l  %212 = zext i1 %211 to i32\l  %213 = xor i32 %212, -1\l  %214 = extractelement \<2 x i32\> %206, i64 0\l  %215 = extractelement \<2 x i32\> %206, i64 1\l  %216 = icmp slt i32 %214, %215\l  %217 = zext i1 %216 to i32\l  %218 = xor i32 %217, -1\l  %219 = icmp slt i32 %215, %214\l  %220 = zext i1 %219 to i32\l  %221 = xor i32 %210, -1\l  %222 = and i32 %207, %221\l  %223 = and i32 %208, %210\l  %224 = or i32 %222, %223\l  %225 = and i32 %208, %212\l  %226 = and i32 %207, %213\l  %227 = or i32 %225, %226\l  %228 = and i32 %214, %217\l  %229 = and i32 %215, %218\l  %230 = or i32 %228, %229\l  %231 = xor i32 %220, -1\l  %232 = and i32 %215, %231\l  %233 = and i32 %214, %220\l  %234 = or i32 %232, %233\l  %235 = icmp slt i32 %224, %230\l  %236 = zext i1 %235 to i32\l  %237 = icmp slt i32 %227, %234\l  %238 = zext i1 %237 to i32\l  %239 = icmp slt i32 %230, %224\l  %240 = zext i1 %239 to i32\l  %241 = xor i32 %240, -1\l  %242 = icmp slt i32 %234, %227\l  %243 = zext i1 %242 to i32\l  %244 = xor i32 %243, -1\l  %245 = and i64 %15, 1\l  %246 = icmp eq i64 %245, 0\l  br i1 %246, label %286, label %247\l|{<s0>T|<s1>F}}"];
	Node0x47fd7e0:s0 -> Node0x4809c30;
	Node0x47fd7e0:s1 -> Node0x4809c80;
	Node0x4809c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%247:\l247:                                              \l  %248 = and i32 %224, %236\l  %249 = xor i32 %236, -1\l  %250 = and i32 %230, %249\l  %251 = or i32 %248, %250\l  %252 = and i32 %227, %238\l  %253 = xor i32 %238, -1\l  %254 = and i32 %234, %253\l  %255 = or i32 %252, %254\l  %256 = and i32 %230, %241\l  %257 = and i32 %224, %240\l  %258 = or i32 %256, %257\l  %259 = and i32 %234, %244\l  %260 = and i32 %227, %243\l  %261 = or i32 %259, %260\l  %262 = icmp slt i32 %251, %255\l  %263 = zext i1 %262 to i32\l  %264 = icmp slt i32 %255, %251\l  %265 = zext i1 %264 to i32\l  %266 = xor i32 %265, -1\l  %267 = icmp slt i32 %258, %261\l  %268 = zext i1 %267 to i32\l  %269 = icmp slt i32 %261, %258\l  %270 = zext i1 %269 to i32\l  %271 = xor i32 %270, -1\l  %272 = and i32 %251, %263\l  %273 = xor i32 %263, -1\l  %274 = and i32 %255, %273\l  %275 = or i32 %272, %274\l  store i32 %275, i32 addrspace(1)* %199, align 16, !tbaa !7\l  %276 = and i32 %255, %266\l  %277 = and i32 %251, %265\l  %278 = or i32 %276, %277\l  store i32 %278, i32 addrspace(1)* %200, align 4, !tbaa !7\l  %279 = and i32 %258, %268\l  %280 = xor i32 %268, -1\l  %281 = and i32 %261, %280\l  %282 = or i32 %279, %281\l  store i32 %282, i32 addrspace(1)* %203, align 8, !tbaa !7\l  %283 = and i32 %261, %271\l  %284 = and i32 %258, %270\l  %285 = or i32 %283, %284\l  store i32 %285, i32 addrspace(1)* %204, align 4, !tbaa !7\l  br label %325\l}"];
	Node0x4809c80 -> Node0x4802cb0;
	Node0x4809c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%286:\l286:                                              \l  %287 = xor i32 %236, -1\l  %288 = and i32 %224, %287\l  %289 = and i32 %230, %236\l  %290 = or i32 %288, %289\l  %291 = xor i32 %238, -1\l  %292 = and i32 %227, %291\l  %293 = and i32 %234, %238\l  %294 = or i32 %292, %293\l  %295 = and i32 %230, %240\l  %296 = and i32 %224, %241\l  %297 = or i32 %295, %296\l  %298 = and i32 %234, %243\l  %299 = and i32 %227, %244\l  %300 = or i32 %298, %299\l  %301 = icmp slt i32 %290, %294\l  %302 = zext i1 %301 to i32\l  %303 = icmp slt i32 %294, %290\l  %304 = zext i1 %303 to i32\l  %305 = xor i32 %304, -1\l  %306 = icmp slt i32 %297, %300\l  %307 = zext i1 %306 to i32\l  %308 = icmp slt i32 %300, %297\l  %309 = zext i1 %308 to i32\l  %310 = xor i32 %309, -1\l  %311 = xor i32 %302, -1\l  %312 = and i32 %290, %311\l  %313 = and i32 %294, %302\l  %314 = or i32 %312, %313\l  store i32 %314, i32 addrspace(1)* %199, align 16, !tbaa !7\l  %315 = and i32 %294, %304\l  %316 = and i32 %290, %305\l  %317 = or i32 %315, %316\l  store i32 %317, i32 addrspace(1)* %200, align 4, !tbaa !7\l  %318 = xor i32 %307, -1\l  %319 = and i32 %297, %318\l  %320 = and i32 %300, %307\l  %321 = or i32 %319, %320\l  store i32 %321, i32 addrspace(1)* %203, align 8, !tbaa !7\l  %322 = and i32 %300, %309\l  %323 = and i32 %297, %310\l  %324 = or i32 %322, %323\l  store i32 %324, i32 addrspace(1)* %204, align 4, !tbaa !7\l  br label %325\l}"];
	Node0x4809c30 -> Node0x4802cb0;
	Node0x4802cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%325:\l325:                                              \l  ret void\l}"];
}
