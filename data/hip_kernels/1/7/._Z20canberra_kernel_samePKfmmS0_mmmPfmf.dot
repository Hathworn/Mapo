digraph "CFG for '_Z20canberra_kernel_samePKfmmS0_mmmPfmf' function" {
	label="CFG for '_Z20canberra_kernel_samePKfmmS0_mmmPfmf' function";

	Node0x4bd6a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = zext i32 %11 to i64\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = zext i32 %13 to i64\l  %15 = icmp eq i32 %11, %13\l  %16 = icmp ult i64 %12, %2\l  %17 = select i1 %15, i1 %16, i1 false\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x()\l  %19 = icmp eq i32 %18, 0\l  %20 = select i1 %17, i1 %19, i1 false\l  br i1 %20, label %21, label %25\l|{<s0>T|<s1>F}}"];
	Node0x4bd6a40:s0 -> Node0x4bd8240;
	Node0x4bd6a40:s1 -> Node0x4bd82d0;
	Node0x4bd8240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%21:\l21:                                               \l  %22 = mul i64 %14, %8\l  %23 = add i64 %22, %12\l  %24 = getelementptr inbounds float, float addrspace(1)* %7, i64 %23\l  store float 0.000000e+00, float addrspace(1)* %24, align 4, !tbaa !4\l  br label %25\l}"];
	Node0x4bd8240 -> Node0x4bd82d0;
	Node0x4bd82d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%25:\l25:                                               \l  %26 = icmp ult i64 %14, %2\l  %27 = icmp ult i32 %11, %13\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4bd82d0:s0 -> Node0x4bd9e60;
	Node0x4bd82d0:s1 -> Node0x4bd9eb0;
	Node0x4bd9e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%29:\l29:                                               \l  %30 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ20canberra_kernel_samePKfmmS0_mmmPfmfE4temp, i32 0, i32 %18\l  store float 0.000000e+00, float addrspace(3)* %30, align 4, !tbaa !4\l  %31 = zext i32 %18 to i64\l  %32 = icmp ult i64 %31, %6\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4bd9e60:s0 -> Node0x4bda040;
	Node0x4bd9e60:s1 -> Node0x4bd7730;
	Node0x4bd7730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%33:\l33:                                               \l  %34 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  br label %43\l}"];
	Node0x4bd7730 -> Node0x4bdad10;
	Node0x4bda040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%35:\l35:                                               \l  %36 = mul i64 %12, %1\l  %37 = mul i64 %14, %1\l  %38 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %39 = getelementptr i8, i8 addrspace(4)* %38, i64 4\l  %40 = bitcast i8 addrspace(4)* %39 to i16 addrspace(4)*\l  %41 = load i16, i16 addrspace(4)* %40, align 4, !range !8, !invariant.load !9\l  %42 = zext i16 %41 to i64\l  br label %52\l}"];
	Node0x4bda040 -> Node0x4bdb4b0;
	Node0x4bdad10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%43:\l43:                                               \l  %44 = phi i8 addrspace(4)* [ %34, %33 ], [ %38, %68 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %45 = getelementptr i8, i8 addrspace(4)* %44, i64 4\l  %46 = bitcast i8 addrspace(4)* %45 to i16 addrspace(4)*\l  %47 = load i16, i16 addrspace(4)* %46, align 4, !range !8, !invariant.load !9\l  %48 = icmp ult i16 %47, 2\l  br i1 %48, label %72, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4bdad10:s0 -> Node0x4bdc820;
	Node0x4bdad10:s1 -> Node0x4bdc8b0;
	Node0x4bdc8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%49:\l49:                                               \l  %50 = lshr i16 %47, 1\l  %51 = zext i16 %50 to i64\l  br label %73\l}"];
	Node0x4bdc8b0 -> Node0x4bdcb20;
	Node0x4bdb4b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%52:\l52:                                               \l  %53 = phi float [ 0.000000e+00, %35 ], [ %69, %68 ]\l  %54 = phi i64 [ %31, %35 ], [ %70, %68 ]\l  %55 = add i64 %54, %36\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !4\l  %58 = add i64 %54, %37\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !4\l  %61 = fadd contract float %57, %60\l  %62 = fcmp contract une float %61, 0.000000e+00\l  br i1 %62, label %63, label %68\l|{<s0>T|<s1>F}}"];
	Node0x4bdb4b0:s0 -> Node0x4bdd270;
	Node0x4bdb4b0:s1 -> Node0x4bdb5b0;
	Node0x4bdd270 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%63:\l63:                                               \l  %64 = fsub contract float %57, %60\l  %65 = fdiv contract float %64, %61\l  %66 = tail call contract float @llvm.fabs.f32(float %65)\l  %67 = fadd contract float %66, %53\l  store float %67, float addrspace(3)* %30, align 4, !tbaa !4\l  br label %68\l}"];
	Node0x4bdd270 -> Node0x4bdb5b0;
	Node0x4bdb5b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%68:\l68:                                               \l  %69 = phi float [ %67, %63 ], [ %53, %52 ]\l  %70 = add i64 %54, %42\l  %71 = icmp ult i64 %70, %6\l  br i1 %71, label %52, label %43, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4bdb5b0:s0 -> Node0x4bdb4b0;
	Node0x4bdb5b0:s1 -> Node0x4bdad10;
	Node0x4bdc820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%72:\l72:                                               \l  br i1 %19, label %86, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4bdc820:s0 -> Node0x4bddd40;
	Node0x4bdc820:s1 -> Node0x4bd9eb0;
	Node0x4bdcb20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi i64 [ %84, %83 ], [ %51, %49 ]\l  %75 = icmp ugt i64 %74, %31\l  br i1 %75, label %76, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4bdcb20:s0 -> Node0x4bde010;
	Node0x4bdcb20:s1 -> Node0x4bdde40;
	Node0x4bde010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%76:\l76:                                               \l  %77 = trunc i64 %74 to i32\l  %78 = add nuw nsw i32 %18, %77\l  %79 = getelementptr inbounds [32 x float], [32 x float] addrspace(3)*\l... @_ZZ20canberra_kernel_samePKfmmS0_mmmPfmfE4temp, i32 0, i32 %78\l  %80 = load float, float addrspace(3)* %79, align 4, !tbaa !4\l  %81 = load float, float addrspace(3)* %30, align 4, !tbaa !4\l  %82 = fadd contract float %80, %81\l  store float %82, float addrspace(3)* %30, align 4, !tbaa !4\l  br label %83\l}"];
	Node0x4bde010 -> Node0x4bdde40;
	Node0x4bdde40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%83:\l83:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %84 = lshr i64 %74, 1\l  %85 = icmp ult i64 %74, 2\l  br i1 %85, label %72, label %73, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4bdde40:s0 -> Node0x4bdc820;
	Node0x4bdde40:s1 -> Node0x4bdcb20;
	Node0x4bddd40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%86:\l86:                                               \l  %87 = load float, float addrspace(3)* getelementptr inbounds ([32 x float],\l... [32 x float] addrspace(3)* @_ZZ20canberra_kernel_samePKfmmS0_mmmPfmfE4temp,\l... i32 0, i32 0), align 16, !tbaa !4\l  %88 = mul i64 %14, %8\l  %89 = add i64 %88, %12\l  %90 = getelementptr inbounds float, float addrspace(1)* %7, i64 %89\l  store float %87, float addrspace(1)* %90, align 4, !tbaa !4\l  %91 = mul i64 %12, %8\l  %92 = add i64 %91, %14\l  %93 = getelementptr inbounds float, float addrspace(1)* %7, i64 %92\l  store float %87, float addrspace(1)* %93, align 4, !tbaa !4\l  br label %94\l}"];
	Node0x4bddd40 -> Node0x4bd9eb0;
	Node0x4bd9eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%94:\l94:                                               \l  ret void\l}"];
}
