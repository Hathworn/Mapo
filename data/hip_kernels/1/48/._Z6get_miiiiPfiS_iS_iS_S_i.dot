digraph "CFG for '_Z6get_miiiiPfiS_iS_iS_S_i' function" {
	label="CFG for '_Z6get_miiiiPfiS_iS_iS_S_i' function";

	Node0x633fae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%12:\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %13, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %22, %26\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %29 = add i32 %27, %28\l  %30 = icmp slt i32 %21, %2\l  %31 = icmp slt i32 %29, %6\l  %32 = select i1 %30, i1 %31, i1 false\l  br i1 %32, label %33, label %206\l|{<s0>T|<s1>F}}"];
	Node0x633fae0:s0 -> Node0x6341280;
	Node0x633fae0:s1 -> Node0x6341310;
	Node0x6341280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%33:\l33:                                               \l  %34 = mul nsw i32 %21, %4\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %3, i64 %35\l  %37 = mul nsw i32 %29, %8\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %7, i64 %38\l  %40 = icmp sgt i32 %0, 0\l  br i1 %40, label %41, label %51\l|{<s0>T|<s1>F}}"];
	Node0x6341280:s0 -> Node0x63447f0;
	Node0x6341280:s1 -> Node0x6344840;
	Node0x63447f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%41:\l41:                                               \l  %42 = icmp sgt i32 %1, 0\l  %43 = sitofp i32 %1 to float\l  %44 = and i32 %1, 7\l  %45 = icmp ult i32 %1, 8\l  %46 = and i32 %1, -8\l  %47 = icmp eq i32 %44, 0\l  br label %48\l}"];
	Node0x63447f0 -> Node0x6344d50;
	Node0x6344d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %41 ], [ %70, %69 ]\l  %50 = phi float [ 0.000000e+00, %41 ], [ %101, %69 ]\l  br label %65\l}"];
	Node0x6344d50 -> Node0x6345af0;
	Node0x6344840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %33 ], [ %101, %69 ]\l  %53 = sext i32 %21 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %5, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %56 = sext i32 %29 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %9, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = fadd contract float %55, %58\l  %60 = fadd contract float %52, %59\l  %61 = mul nsw i32 %29, %11\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %10, i64 %62\l  %64 = getelementptr inbounds float, float addrspace(1)* %63, i64 %53\l  store float %60, float addrspace(1)* %64, align 4, !tbaa !7\l  br label %206\l}"];
	Node0x6344840 -> Node0x6341310;
	Node0x6345af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%65:\l65:                                               \l  %66 = phi i32 [ %102, %94 ], [ 0, %48 ]\l  %67 = phi float [ %101, %94 ], [ %50, %48 ]\l  br i1 %42, label %68, label %94\l|{<s0>T|<s1>F}}"];
	Node0x6345af0:s0 -> Node0x6347020;
	Node0x6345af0:s1 -> Node0x6344220;
	Node0x6347020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%68:\l68:                                               \l  br i1 %45, label %72, label %104\l|{<s0>T|<s1>F}}"];
	Node0x6347020:s0 -> Node0x6347160;
	Node0x6347020:s1 -> Node0x63471b0;
	Node0x6344e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%69:\l69:                                               \l  %70 = add nuw nsw i32 %49, 1\l  %71 = icmp eq i32 %70, %0\l  br i1 %71, label %51, label %48, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x6344e40:s0 -> Node0x6344840;
	Node0x6344e40:s1 -> Node0x6344d50;
	Node0x6347160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%72:\l72:                                               \l  %73 = phi float [ undef, %68 ], [ %202, %104 ]\l  %74 = phi i32 [ 0, %68 ], [ %203, %104 ]\l  %75 = phi float [ 0.000000e+00, %68 ], [ %202, %104 ]\l  br i1 %47, label %94, label %76\l|{<s0>T|<s1>F}}"];
	Node0x6347160:s0 -> Node0x6344220;
	Node0x6347160:s1 -> Node0x6347c10;
	Node0x6347c10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi i32 [ %91, %76 ], [ %74, %72 ]\l  %78 = phi float [ %90, %76 ], [ %75, %72 ]\l  %79 = phi i32 [ %92, %76 ], [ 0, %72 ]\l  %80 = mul nsw i32 %77, %0\l  %81 = add nsw i32 %80, %49\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %36, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = add nsw i32 %80, %66\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %39, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = fmul contract float %84, %88\l  %90 = fadd contract float %78, %89\l  %91 = add nuw nsw i32 %77, 1\l  %92 = add i32 %79, 1\l  %93 = icmp eq i32 %92, %44\l  br i1 %93, label %94, label %76, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x6347c10:s0 -> Node0x6344220;
	Node0x6347c10:s1 -> Node0x6347c10;
	Node0x6344220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%94:\l94:                                               \l  %95 = phi float [ 0.000000e+00, %65 ], [ %73, %72 ], [ %90, %76 ]\l  %96 = fdiv contract float %95, %43\l  %97 = fcmp contract ugt float %96, 0.000000e+00\l  %98 = tail call float @llvm.log2.f32(float %96)\l  %99 = select i1 %97, float %98, float 0.000000e+00\l  %100 = fmul contract float %96, %99\l  %101 = fadd contract float %67, %100\l  %102 = add nuw nsw i32 %66, 1\l  %103 = icmp eq i32 %102, %0\l  br i1 %103, label %69, label %65, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x6344220:s0 -> Node0x6344e40;
	Node0x6344220:s1 -> Node0x6345af0;
	Node0x63471b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%104:\l104:                                              \l  %105 = phi i32 [ %203, %104 ], [ 0, %68 ]\l  %106 = phi float [ %202, %104 ], [ 0.000000e+00, %68 ]\l  %107 = phi i32 [ %204, %104 ], [ 0, %68 ]\l  %108 = mul nsw i32 %105, %0\l  %109 = add nsw i32 %108, %49\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %36, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = add nsw i32 %108, %66\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %39, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = fmul contract float %112, %116\l  %118 = fadd contract float %106, %117\l  %119 = or i32 %105, 1\l  %120 = mul nsw i32 %119, %0\l  %121 = add nsw i32 %120, %49\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %36, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = add nsw i32 %120, %66\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %39, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = fmul contract float %124, %128\l  %130 = fadd contract float %118, %129\l  %131 = or i32 %105, 2\l  %132 = mul nsw i32 %131, %0\l  %133 = add nsw i32 %132, %49\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %36, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %137 = add nsw i32 %132, %66\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %39, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %141 = fmul contract float %136, %140\l  %142 = fadd contract float %130, %141\l  %143 = or i32 %105, 3\l  %144 = mul nsw i32 %143, %0\l  %145 = add nsw i32 %144, %49\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %36, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = add nsw i32 %144, %66\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %39, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %153 = fmul contract float %148, %152\l  %154 = fadd contract float %142, %153\l  %155 = or i32 %105, 4\l  %156 = mul nsw i32 %155, %0\l  %157 = add nsw i32 %156, %49\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %36, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %161 = add nsw i32 %156, %66\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %39, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %165 = fmul contract float %160, %164\l  %166 = fadd contract float %154, %165\l  %167 = or i32 %105, 5\l  %168 = mul nsw i32 %167, %0\l  %169 = add nsw i32 %168, %49\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %36, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %173 = add nsw i32 %168, %66\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %39, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %177 = fmul contract float %172, %176\l  %178 = fadd contract float %166, %177\l  %179 = or i32 %105, 6\l  %180 = mul nsw i32 %179, %0\l  %181 = add nsw i32 %180, %49\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %36, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %185 = add nsw i32 %180, %66\l  %186 = sext i32 %185 to i64\l  %187 = getelementptr inbounds float, float addrspace(1)* %39, i64 %186\l  %188 = load float, float addrspace(1)* %187, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %189 = fmul contract float %184, %188\l  %190 = fadd contract float %178, %189\l  %191 = or i32 %105, 7\l  %192 = mul nsw i32 %191, %0\l  %193 = add nsw i32 %192, %49\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %36, i64 %194\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %197 = add nsw i32 %192, %66\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %39, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %201 = fmul contract float %196, %200\l  %202 = fadd contract float %190, %201\l  %203 = add nuw nsw i32 %105, 8\l  %204 = add i32 %107, 8\l  %205 = icmp eq i32 %204, %46\l  br i1 %205, label %72, label %104, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x63471b0:s0 -> Node0x6347160;
	Node0x63471b0:s1 -> Node0x63471b0;
	Node0x6341310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%206:\l206:                                              \l  ret void\l}"];
}
