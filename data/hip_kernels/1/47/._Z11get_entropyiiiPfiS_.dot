digraph "CFG for '_Z11get_entropyiiiPfiS_' function" {
	label="CFG for '_Z11get_entropyiiiPfiS_' function";

	Node0x5142590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %2\l  br i1 %16, label %17, label %129\l|{<s0>T|<s1>F}}"];
	Node0x5142590:s0 -> Node0x5142e70;
	Node0x5142590:s1 -> Node0x5144560;
	Node0x5142e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%17:\l17:                                               \l  %18 = mul nsw i32 %15, %4\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %3, i64 %19\l  %21 = icmp sgt i32 %0, 0\l  br i1 %21, label %22, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5142e70:s0 -> Node0x51448d0;
	Node0x5142e70:s1 -> Node0x5144920;
	Node0x51448d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%22:\l22:                                               \l  %23 = icmp sgt i32 %1, 0\l  %24 = sitofp i32 %1 to double\l  %25 = and i32 %1, 7\l  %26 = icmp ult i32 %1, 8\l  %27 = and i32 %1, -8\l  %28 = icmp eq i32 %25, 0\l  br label %29\l}"];
	Node0x51448d0 -> Node0x5144e30;
	Node0x5144e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %22 ], [ %65, %55 ]\l  %31 = phi float [ 0.000000e+00, %22 ], [ %64, %55 ]\l  br i1 %23, label %32, label %55\l|{<s0>T|<s1>F}}"];
	Node0x5144e30:s0 -> Node0x5145bd0;
	Node0x5144e30:s1 -> Node0x5144f20;
	Node0x5145bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%32:\l32:                                               \l  br i1 %26, label %38, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5145bd0:s0 -> Node0x5144450;
	Node0x5145bd0:s1 -> Node0x51444a0;
	Node0x5144920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %17 ], [ %64, %55 ]\l  %35 = fneg contract float %34\l  %36 = sext i32 %15 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %5, i64 %36\l  store float %35, float addrspace(1)* %37, align 4, !tbaa !7\l  br label %129\l}"];
	Node0x5144920 -> Node0x5144560;
	Node0x5144450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%38:\l38:                                               \l  %39 = phi float [ undef, %32 ], [ %125, %67 ]\l  %40 = phi i32 [ 0, %32 ], [ %126, %67 ]\l  %41 = phi float [ 0.000000e+00, %32 ], [ %125, %67 ]\l  br i1 %28, label %55, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5144450:s0 -> Node0x5144f20;
	Node0x5144450:s1 -> Node0x5146a90;
	Node0x5146a90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %52, %42 ], [ %40, %38 ]\l  %44 = phi float [ %51, %42 ], [ %41, %38 ]\l  %45 = phi i32 [ %53, %42 ], [ 0, %38 ]\l  %46 = mul nsw i32 %43, %0\l  %47 = add nsw i32 %46, %30\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %20, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = fadd contract float %44, %50\l  %52 = add nuw nsw i32 %43, 1\l  %53 = add i32 %45, 1\l  %54 = icmp eq i32 %53, %25\l  br i1 %54, label %55, label %42, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5146a90:s0 -> Node0x5144f20;
	Node0x5146a90:s1 -> Node0x5146a90;
	Node0x5144f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%55:\l55:                                               \l  %56 = phi float [ 0.000000e+00, %29 ], [ %39, %38 ], [ %51, %42 ]\l  %57 = fpext float %56 to double\l  %58 = fdiv contract double %57, %24\l  %59 = fptrunc double %58 to float\l  %60 = fcmp contract ugt float %59, 0.000000e+00\l  %61 = tail call float @llvm.log2.f32(float %59)\l  %62 = select i1 %60, float %61, float 0.000000e+00\l  %63 = fmul contract float %62, %59\l  %64 = fadd contract float %31, %63\l  %65 = add nuw nsw i32 %30, 1\l  %66 = icmp eq i32 %65, %0\l  br i1 %66, label %33, label %29, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5144f20:s0 -> Node0x5144920;
	Node0x5144f20:s1 -> Node0x5144e30;
	Node0x51444a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%67:\l67:                                               \l  %68 = phi i32 [ %126, %67 ], [ 0, %32 ]\l  %69 = phi float [ %125, %67 ], [ 0.000000e+00, %32 ]\l  %70 = phi i32 [ %127, %67 ], [ 0, %32 ]\l  %71 = mul nsw i32 %68, %0\l  %72 = add nsw i32 %71, %30\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %20, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = fadd contract float %69, %75\l  %77 = or i32 %68, 1\l  %78 = mul nsw i32 %77, %0\l  %79 = add nsw i32 %78, %30\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %20, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fadd contract float %76, %82\l  %84 = or i32 %68, 2\l  %85 = mul nsw i32 %84, %0\l  %86 = add nsw i32 %85, %30\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %20, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = fadd contract float %83, %89\l  %91 = or i32 %68, 3\l  %92 = mul nsw i32 %91, %0\l  %93 = add nsw i32 %92, %30\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %20, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fadd contract float %90, %96\l  %98 = or i32 %68, 4\l  %99 = mul nsw i32 %98, %0\l  %100 = add nsw i32 %99, %30\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %20, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = fadd contract float %97, %103\l  %105 = or i32 %68, 5\l  %106 = mul nsw i32 %105, %0\l  %107 = add nsw i32 %106, %30\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %20, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = fadd contract float %104, %110\l  %112 = or i32 %68, 6\l  %113 = mul nsw i32 %112, %0\l  %114 = add nsw i32 %113, %30\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %20, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fadd contract float %111, %117\l  %119 = or i32 %68, 7\l  %120 = mul nsw i32 %119, %0\l  %121 = add nsw i32 %120, %30\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %20, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = fadd contract float %118, %124\l  %126 = add nuw nsw i32 %68, 8\l  %127 = add i32 %70, 8\l  %128 = icmp eq i32 %127, %27\l  br i1 %128, label %38, label %67, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x51444a0:s0 -> Node0x5144450;
	Node0x51444a0:s1 -> Node0x51444a0;
	Node0x5144560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%129:\l129:                                              \l  ret void\l}"];
}
