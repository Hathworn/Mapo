digraph "CFG for '_Z18convolution_kerneliiiPdiiiS_S_iiiiS_' function" {
	label="CFG for '_Z18convolution_kerneliiiPdiiiS_S_iiiiS_' function";

	Node0x4585e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%14:\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %15, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %25 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 4, !range !4, !invariant.load !5\l  %28 = zext i16 %27 to i32\l  %29 = mul i32 %24, %28\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %31 = add i32 %29, %30\l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %33 = getelementptr i8, i8 addrspace(4)* %15, i64 8\l  %34 = bitcast i8 addrspace(4)* %33 to i16 addrspace(4)*\l  %35 = load i16, i16 addrspace(4)* %34, align 4, !range !4, !invariant.load !5\l  %36 = zext i16 %35 to i32\l  %37 = mul i32 %32, %36\l  %38 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !6\l  %39 = add i32 %37, %38\l  %40 = icmp slt i32 %23, %10\l  %41 = icmp slt i32 %31, %11\l  %42 = select i1 %40, i1 %41, i1 false\l  %43 = icmp slt i32 %39, %12\l  %44 = select i1 %42, i1 %43, i1 false\l  br i1 %44, label %45, label %226\l|{<s0>T|<s1>F}}"];
	Node0x4585e20:s0 -> Node0x458ae80;
	Node0x4585e20:s1 -> Node0x458af10;
	Node0x458ae80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%45:\l45:                                               \l  %46 = icmp sgt i32 %6, 0\l  br i1 %46, label %47, label %64\l|{<s0>T|<s1>F}}"];
	Node0x458ae80:s0 -> Node0x458b110;
	Node0x458ae80:s1 -> Node0x458b160;
	Node0x458b110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%47:\l47:                                               \l  %48 = icmp sgt i32 %4, 0\l  %49 = icmp sgt i32 %5, 0\l  %50 = mul i32 %5, %4\l  %51 = mul i32 %50, %6\l  %52 = mul i32 %51, %39\l  %53 = and i32 %5, 7\l  %54 = icmp ult i32 %5, 8\l  %55 = and i32 %5, -8\l  %56 = icmp eq i32 %53, 0\l  br label %57\l}"];
	Node0x458b110 -> Node0x458b840;
	Node0x458b840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%57:\l57:                                               \l  %58 = phi i32 [ 0, %47 ], [ %89, %86 ]\l  %59 = phi i32 [ 0, %47 ], [ %88, %86 ]\l  %60 = phi double [ 0.000000e+00, %47 ], [ %87, %86 ]\l  br i1 %48, label %61, label %86\l|{<s0>T|<s1>F}}"];
	Node0x458b840:s0 -> Node0x458c700;
	Node0x458b840:s1 -> Node0x458b930;
	Node0x458c700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%61:\l61:                                               \l  %62 = mul i32 %58, %0\l  %63 = add i32 %62, %23\l  br label %78\l}"];
	Node0x458c700 -> Node0x458c960;
	Node0x458b160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%64:\l64:                                               \l  %65 = phi double [ 0.000000e+00, %45 ], [ %87, %86 ]\l  %66 = sext i32 %39 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %8, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fadd contract double %65, %68\l  %70 = fcmp contract olt double %69, 0.000000e+00\l  %71 = mul i32 %39, %10\l  %72 = add i32 %71, %23\l  %73 = mul i32 %72, %11\l  %74 = add i32 %73, %31\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %13, i64 %75\l  %77 = select i1 %70, double 0.000000e+00, double %69\l  store double %77, double addrspace(1)* %76, align 8, !tbaa !7\l  br label %226\l}"];
	Node0x458b160 -> Node0x458af10;
	Node0x458c960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %61 ], [ %121, %118 ]\l  %80 = phi i32 [ %59, %61 ], [ %120, %118 ]\l  %81 = phi double [ %60, %61 ], [ %119, %118 ]\l  br i1 %49, label %82, label %118\l|{<s0>T|<s1>F}}"];
	Node0x458c960:s0 -> Node0x458dfc0;
	Node0x458c960:s1 -> Node0x458dc40;
	Node0x458dfc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%82:\l82:                                               \l  %83 = add i32 %63, %79\l  %84 = mul i32 %83, %1\l  %85 = add i32 %84, %31\l  br i1 %54, label %91, label %123\l|{<s0>T|<s1>F}}"];
	Node0x458dfc0:s0 -> Node0x458e2b0;
	Node0x458dfc0:s1 -> Node0x458e300;
	Node0x458b930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%86:\l86:                                               \l  %87 = phi double [ %60, %57 ], [ %119, %118 ]\l  %88 = phi i32 [ %59, %57 ], [ %120, %118 ]\l  %89 = add nuw nsw i32 %58, 1\l  %90 = icmp eq i32 %89, %6\l  br i1 %90, label %64, label %57, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x458b930:s0 -> Node0x458b160;
	Node0x458b930:s1 -> Node0x458b840;
	Node0x458e2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%91:\l91:                                               \l  %92 = phi double [ undef, %82 ], [ %221, %123 ]\l  %93 = phi i32 [ 0, %82 ], [ %223, %123 ]\l  %94 = phi i32 [ %80, %82 ], [ %222, %123 ]\l  %95 = phi double [ %81, %82 ], [ %221, %123 ]\l  br i1 %56, label %115, label %96\l|{<s0>T|<s1>F}}"];
	Node0x458e2b0:s0 -> Node0x458ef30;
	Node0x458e2b0:s1 -> Node0x458efc0;
	Node0x458efc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%96:\l96:                                               \l  %97 = phi i32 [ %112, %96 ], [ %93, %91 ]\l  %98 = phi i32 [ %111, %96 ], [ %94, %91 ]\l  %99 = phi double [ %110, %96 ], [ %95, %91 ]\l  %100 = phi i32 [ %113, %96 ], [ 0, %91 ]\l  %101 = add i32 %85, %97\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %3, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = add nsw i32 %98, %52\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %7, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fmul contract double %104, %108\l  %110 = fadd contract double %99, %109\l  %111 = add nsw i32 %98, 1\l  %112 = add nuw nsw i32 %97, 1\l  %113 = add i32 %100, 1\l  %114 = icmp eq i32 %113, %53\l  br i1 %114, label %115, label %96, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x458efc0:s0 -> Node0x458ef30;
	Node0x458efc0:s1 -> Node0x458efc0;
	Node0x458ef30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%115:\l115:                                              \l  %116 = phi double [ %92, %91 ], [ %110, %96 ]\l  %117 = add i32 %80, %5\l  br label %118\l}"];
	Node0x458ef30 -> Node0x458dc40;
	Node0x458dc40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%118:\l118:                                              \l  %119 = phi double [ %81, %78 ], [ %116, %115 ]\l  %120 = phi i32 [ %80, %78 ], [ %117, %115 ]\l  %121 = add nuw nsw i32 %79, 1\l  %122 = icmp eq i32 %121, %4\l  br i1 %122, label %86, label %78, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x458dc40:s0 -> Node0x458b930;
	Node0x458dc40:s1 -> Node0x458c960;
	Node0x458e300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%123:\l123:                                              \l  %124 = phi i32 [ %223, %123 ], [ 0, %82 ]\l  %125 = phi i32 [ %222, %123 ], [ %80, %82 ]\l  %126 = phi double [ %221, %123 ], [ %81, %82 ]\l  %127 = phi i32 [ %224, %123 ], [ 0, %82 ]\l  %128 = add i32 %85, %124\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds double, double addrspace(1)* %3, i64 %129\l  %131 = load double, double addrspace(1)* %130, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %132 = add nsw i32 %125, %52\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds double, double addrspace(1)* %7, i64 %133\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %136 = fmul contract double %131, %135\l  %137 = fadd contract double %126, %136\l  %138 = add nsw i32 %125, 1\l  %139 = or i32 %124, 1\l  %140 = add i32 %85, %139\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds double, double addrspace(1)* %3, i64 %141\l  %143 = load double, double addrspace(1)* %142, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = add nsw i32 %138, %52\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds double, double addrspace(1)* %7, i64 %145\l  %147 = load double, double addrspace(1)* %146, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %148 = fmul contract double %143, %147\l  %149 = fadd contract double %137, %148\l  %150 = add nsw i32 %125, 2\l  %151 = or i32 %124, 2\l  %152 = add i32 %85, %151\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds double, double addrspace(1)* %3, i64 %153\l  %155 = load double, double addrspace(1)* %154, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = add nsw i32 %150, %52\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds double, double addrspace(1)* %7, i64 %157\l  %159 = load double, double addrspace(1)* %158, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %160 = fmul contract double %155, %159\l  %161 = fadd contract double %149, %160\l  %162 = add nsw i32 %125, 3\l  %163 = or i32 %124, 3\l  %164 = add i32 %85, %163\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds double, double addrspace(1)* %3, i64 %165\l  %167 = load double, double addrspace(1)* %166, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %168 = add nsw i32 %162, %52\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds double, double addrspace(1)* %7, i64 %169\l  %171 = load double, double addrspace(1)* %170, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %172 = fmul contract double %167, %171\l  %173 = fadd contract double %161, %172\l  %174 = add nsw i32 %125, 4\l  %175 = or i32 %124, 4\l  %176 = add i32 %85, %175\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds double, double addrspace(1)* %3, i64 %177\l  %179 = load double, double addrspace(1)* %178, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %180 = add nsw i32 %174, %52\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds double, double addrspace(1)* %7, i64 %181\l  %183 = load double, double addrspace(1)* %182, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %184 = fmul contract double %179, %183\l  %185 = fadd contract double %173, %184\l  %186 = add nsw i32 %125, 5\l  %187 = or i32 %124, 5\l  %188 = add i32 %85, %187\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds double, double addrspace(1)* %3, i64 %189\l  %191 = load double, double addrspace(1)* %190, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %192 = add nsw i32 %186, %52\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds double, double addrspace(1)* %7, i64 %193\l  %195 = load double, double addrspace(1)* %194, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %196 = fmul contract double %191, %195\l  %197 = fadd contract double %185, %196\l  %198 = add nsw i32 %125, 6\l  %199 = or i32 %124, 6\l  %200 = add i32 %85, %199\l  %201 = sext i32 %200 to i64\l  %202 = getelementptr inbounds double, double addrspace(1)* %3, i64 %201\l  %203 = load double, double addrspace(1)* %202, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %204 = add nsw i32 %198, %52\l  %205 = sext i32 %204 to i64\l  %206 = getelementptr inbounds double, double addrspace(1)* %7, i64 %205\l  %207 = load double, double addrspace(1)* %206, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %208 = fmul contract double %203, %207\l  %209 = fadd contract double %197, %208\l  %210 = add nsw i32 %125, 7\l  %211 = or i32 %124, 7\l  %212 = add i32 %85, %211\l  %213 = sext i32 %212 to i64\l  %214 = getelementptr inbounds double, double addrspace(1)* %3, i64 %213\l  %215 = load double, double addrspace(1)* %214, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %216 = add nsw i32 %210, %52\l  %217 = sext i32 %216 to i64\l  %218 = getelementptr inbounds double, double addrspace(1)* %7, i64 %217\l  %219 = load double, double addrspace(1)* %218, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %220 = fmul contract double %215, %219\l  %221 = fadd contract double %209, %220\l  %222 = add nsw i32 %125, 8\l  %223 = add nuw nsw i32 %124, 8\l  %224 = add i32 %127, 8\l  %225 = icmp eq i32 %224, %55\l  br i1 %225, label %91, label %123, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x458e300:s0 -> Node0x458e2b0;
	Node0x458e300:s1 -> Node0x458e300;
	Node0x458af10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%226:\l226:                                              \l  ret void\l}"];
}
