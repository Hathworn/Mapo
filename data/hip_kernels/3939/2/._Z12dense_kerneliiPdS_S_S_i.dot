digraph "CFG for '_Z12dense_kerneliiPdS_S_S_i' function" {
	label="CFG for '_Z12dense_kerneliiPdS_S_S_i' function";

	Node0x5cb9a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = mul i32 %13, %12\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp slt i32 %16, %1\l  br i1 %17, label %18, label %144\l|{<s0>T|<s1>F}}"];
	Node0x5cb9a10:s0 -> Node0x5cbb960;
	Node0x5cb9a10:s1 -> Node0x5cbb9f0;
	Node0x5cbb960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%18:\l18:                                               \l  %19 = icmp sgt i32 %0, 0\l  br i1 %19, label %20, label %47\l|{<s0>T|<s1>F}}"];
	Node0x5cbb960:s0 -> Node0x5cbbbc0;
	Node0x5cbb960:s1 -> Node0x5cbbc10;
	Node0x5cbbbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%20:\l20:                                               \l  %21 = mul nsw i32 %16, %0\l  %22 = and i32 %0, 7\l  %23 = icmp ult i32 %0, 8\l  br i1 %23, label %26, label %24\l|{<s0>T|<s1>F}}"];
	Node0x5cbbbc0:s0 -> Node0x5cbbf60;
	Node0x5cbbbc0:s1 -> Node0x5cbbfb0;
	Node0x5cbbfb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l24:                                               \l  %25 = and i32 %0, -8\l  br label %58\l}"];
	Node0x5cbbfb0 -> Node0x5cbc1b0;
	Node0x5cbbf60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%26:\l26:                                               \l  %27 = phi double [ undef, %20 ], [ %140, %58 ]\l  %28 = phi i32 [ 0, %20 ], [ %141, %58 ]\l  %29 = phi double [ 0.000000e+00, %20 ], [ %140, %58 ]\l  %30 = icmp eq i32 %22, 0\l  br i1 %30, label %47, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5cbbf60:s0 -> Node0x5cbbc10;
	Node0x5cbbf60:s1 -> Node0x5cbd420;
	Node0x5cbd420 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ %44, %31 ], [ %28, %26 ]\l  %33 = phi double [ %43, %31 ], [ %29, %26 ]\l  %34 = phi i32 [ %45, %31 ], [ 0, %26 ]\l  %35 = zext i32 %32 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %2, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %38 = add nsw i32 %32, %21\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %3, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fmul contract double %37, %41\l  %43 = fadd contract double %33, %42\l  %44 = add nuw nsw i32 %32, 1\l  %45 = add i32 %34, 1\l  %46 = icmp eq i32 %45, %22\l  br i1 %46, label %47, label %31, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5cbd420:s0 -> Node0x5cbbc10;
	Node0x5cbd420:s1 -> Node0x5cbd420;
	Node0x5cbbc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = phi double [ 0.000000e+00, %18 ], [ %27, %26 ], [ %43, %31 ]\l  %49 = sext i32 %16 to i64\l  %50 = getelementptr inbounds double, double addrspace(1)* %4, i64 %49\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fadd contract double %48, %51\l  %53 = icmp ne i32 %1, %6\l  %54 = fcmp contract olt double %52, 0.000000e+00\l  %55 = select i1 %53, i1 %54, i1 false\l  %56 = select i1 %55, double 0.000000e+00, double %52\l  %57 = getelementptr inbounds double, double addrspace(1)* %5, i64 %49\l  store double %56, double addrspace(1)* %57, align 8, !tbaa !7\l  br label %144\l}"];
	Node0x5cbbc10 -> Node0x5cbb9f0;
	Node0x5cbc1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%58:\l58:                                               \l  %59 = phi i32 [ 0, %24 ], [ %141, %58 ]\l  %60 = phi double [ 0.000000e+00, %24 ], [ %140, %58 ]\l  %61 = phi i32 [ 0, %24 ], [ %142, %58 ]\l  %62 = zext i32 %59 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %2, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = add nsw i32 %59, %21\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %3, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fmul contract double %64, %68\l  %70 = fadd contract double %60, %69\l  %71 = or i32 %59, 1\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds double, double addrspace(1)* %2, i64 %72\l  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = add nsw i32 %71, %21\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %3, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fmul contract double %74, %78\l  %80 = fadd contract double %70, %79\l  %81 = or i32 %59, 2\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds double, double addrspace(1)* %2, i64 %82\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = add nsw i32 %81, %21\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds double, double addrspace(1)* %3, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = fmul contract double %84, %88\l  %90 = fadd contract double %80, %89\l  %91 = or i32 %59, 3\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %2, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = add nsw i32 %91, %21\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds double, double addrspace(1)* %3, i64 %96\l  %98 = load double, double addrspace(1)* %97, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = fmul contract double %94, %98\l  %100 = fadd contract double %90, %99\l  %101 = or i32 %59, 4\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %2, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = add nsw i32 %101, %21\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %3, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fmul contract double %104, %108\l  %110 = fadd contract double %100, %109\l  %111 = or i32 %59, 5\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds double, double addrspace(1)* %2, i64 %112\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %115 = add nsw i32 %111, %21\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds double, double addrspace(1)* %3, i64 %116\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = fmul contract double %114, %118\l  %120 = fadd contract double %110, %119\l  %121 = or i32 %59, 6\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds double, double addrspace(1)* %2, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = add nsw i32 %121, %21\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds double, double addrspace(1)* %3, i64 %126\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = fmul contract double %124, %128\l  %130 = fadd contract double %120, %129\l  %131 = or i32 %59, 7\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds double, double addrspace(1)* %2, i64 %132\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = add nsw i32 %131, %21\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds double, double addrspace(1)* %3, i64 %136\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %139 = fmul contract double %134, %138\l  %140 = fadd contract double %130, %139\l  %141 = add nuw nsw i32 %59, 8\l  %142 = add i32 %61, 8\l  %143 = icmp eq i32 %142, %25\l  br i1 %143, label %26, label %58, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5cbc1b0:s0 -> Node0x5cbbf60;
	Node0x5cbc1b0:s1 -> Node0x5cbc1b0;
	Node0x5cbb9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%144:\l144:                                              \l  ret void\l}"];
}
