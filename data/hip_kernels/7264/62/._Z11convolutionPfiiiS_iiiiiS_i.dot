digraph "CFG for '_Z11convolutionPfiiiS_iiiiiS_i' function" {
	label="CFG for '_Z11convolutionPfiiiS_iiiiiS_i' function";

	Node0x5ef5ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %13, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = mul i32 %21, %8\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %24 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 4, !range !4, !invariant.load !5\l  %27 = zext i16 %26 to i32\l  %28 = mul i32 %23, %27\l  %29 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %30 = add i32 %28, %29\l  %31 = mul i32 %30, %9\l  %32 = sub nsw i32 %1, %5\l  %33 = icmp sgt i32 %22, %32\l  %34 = sub nsw i32 %2, %6\l  %35 = icmp sgt i32 %31, %34\l  %36 = select i1 %33, i1 true, i1 %35\l  br i1 %36, label %144, label %37\l|{<s0>T|<s1>F}}"];
	Node0x5ef5ce0:s0 -> Node0x5ef7540;
	Node0x5ef5ce0:s1 -> Node0x5efa6f0;
	Node0x5efa6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%37:\l37:                                               \l  %38 = mul nsw i32 %31, %11\l  %39 = add nsw i32 %38, %22\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %10, i64 %40\l  store float 0.000000e+00, float addrspace(1)* %41, align 4, !tbaa !7\l  %42 = icmp sgt i32 %5, 0\l  br i1 %42, label %43, label %144\l|{<s0>T|<s1>F}}"];
	Node0x5efa6f0:s0 -> Node0x5efb700;
	Node0x5efa6f0:s1 -> Node0x5ef7540;
	Node0x5efb700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%43:\l43:                                               \l  %44 = icmp sgt i32 %6, 0\l  %45 = and i32 %6, 3\l  %46 = icmp ult i32 %6, 4\l  %47 = and i32 %6, -4\l  %48 = icmp eq i32 %45, 0\l  br label %49\l}"];
	Node0x5efb700 -> Node0x5efbba0;
	Node0x5efbba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%49:\l49:                                               \l  %50 = phi float [ 0.000000e+00, %43 ], [ %141, %140 ]\l  %51 = phi i32 [ 0, %43 ], [ %142, %140 ]\l  br i1 %44, label %52, label %140\l|{<s0>T|<s1>F}}"];
	Node0x5efbba0:s0 -> Node0x5efbef0;
	Node0x5efbba0:s1 -> Node0x5efbc90;
	Node0x5efbef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%52:\l52:                                               \l  %53 = add nsw i32 %51, %22\l  br i1 %46, label %116, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5efbef0:s0 -> Node0x5efc0c0;
	Node0x5efbef0:s1 -> Node0x5efc110;
	Node0x5efc110 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%54:\l54:                                               \l  %55 = phi float [ %112, %54 ], [ %50, %52 ]\l  %56 = phi i32 [ %113, %54 ], [ 0, %52 ]\l  %57 = phi i32 [ %114, %54 ], [ 0, %52 ]\l  %58 = mul nsw i32 %56, %7\l  %59 = add nsw i32 %58, %51\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %4, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7\l  %63 = add nsw i32 %56, %31\l  %64 = mul nsw i32 %63, %3\l  %65 = add nsw i32 %53, %64\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = fmul contract float %62, %68\l  %70 = fadd contract float %55, %69\l  store float %70, float addrspace(1)* %41, align 4, !tbaa !7\l  %71 = or i32 %56, 1\l  %72 = mul nsw i32 %71, %7\l  %73 = add nsw i32 %72, %51\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %4, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7\l  %77 = add nsw i32 %71, %31\l  %78 = mul nsw i32 %77, %3\l  %79 = add nsw i32 %53, %78\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7\l  %83 = fmul contract float %76, %82\l  %84 = fadd contract float %70, %83\l  store float %84, float addrspace(1)* %41, align 4, !tbaa !7\l  %85 = or i32 %56, 2\l  %86 = mul nsw i32 %85, %7\l  %87 = add nsw i32 %86, %51\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %4, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7\l  %91 = add nsw i32 %85, %31\l  %92 = mul nsw i32 %91, %3\l  %93 = add nsw i32 %53, %92\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7\l  %97 = fmul contract float %90, %96\l  %98 = fadd contract float %84, %97\l  store float %98, float addrspace(1)* %41, align 4, !tbaa !7\l  %99 = or i32 %56, 3\l  %100 = mul nsw i32 %99, %7\l  %101 = add nsw i32 %100, %51\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %4, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7\l  %105 = add nsw i32 %99, %31\l  %106 = mul nsw i32 %105, %3\l  %107 = add nsw i32 %53, %106\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7\l  %111 = fmul contract float %104, %110\l  %112 = fadd contract float %98, %111\l  store float %112, float addrspace(1)* %41, align 4, !tbaa !7\l  %113 = add nuw nsw i32 %56, 4\l  %114 = add i32 %57, 4\l  %115 = icmp eq i32 %114, %47\l  br i1 %115, label %116, label %54, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5efc110:s0 -> Node0x5efc0c0;
	Node0x5efc110:s1 -> Node0x5efc110;
	Node0x5efc0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%116:\l116:                                              \l  %117 = phi float [ undef, %52 ], [ %112, %54 ]\l  %118 = phi float [ %50, %52 ], [ %112, %54 ]\l  %119 = phi i32 [ 0, %52 ], [ %113, %54 ]\l  br i1 %48, label %140, label %120\l|{<s0>T|<s1>F}}"];
	Node0x5efc0c0:s0 -> Node0x5efbc90;
	Node0x5efc0c0:s1 -> Node0x5eff6c0;
	Node0x5eff6c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%120:\l120:                                              \l  %121 = phi float [ %136, %120 ], [ %118, %116 ]\l  %122 = phi i32 [ %137, %120 ], [ %119, %116 ]\l  %123 = phi i32 [ %138, %120 ], [ 0, %116 ]\l  %124 = mul nsw i32 %122, %7\l  %125 = add nsw i32 %124, %51\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %4, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7\l  %129 = add nsw i32 %122, %31\l  %130 = mul nsw i32 %129, %3\l  %131 = add nsw i32 %53, %130\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7\l  %135 = fmul contract float %128, %134\l  %136 = fadd contract float %121, %135\l  store float %136, float addrspace(1)* %41, align 4, !tbaa !7\l  %137 = add nuw nsw i32 %122, 1\l  %138 = add i32 %123, 1\l  %139 = icmp eq i32 %138, %45\l  br i1 %139, label %140, label %120, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5eff6c0:s0 -> Node0x5efbc90;
	Node0x5eff6c0:s1 -> Node0x5eff6c0;
	Node0x5efbc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%140:\l140:                                              \l  %141 = phi float [ %50, %49 ], [ %117, %116 ], [ %136, %120 ]\l  %142 = add nuw nsw i32 %51, 1\l  %143 = icmp eq i32 %142, %5\l  br i1 %143, label %144, label %49, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5efbc90:s0 -> Node0x5ef7540;
	Node0x5efbc90:s1 -> Node0x5efbba0;
	Node0x5ef7540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%144:\l144:                                              \l  ret void\l}"];
}
