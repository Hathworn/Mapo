digraph "CFG for '_Z12kSoftmaxGradPfS_S_ii' function" {
	label="CFG for '_Z12kSoftmaxGradPfS_S_ii' function";

	Node0x50cac20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = shl i32 %6, 5\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = add i32 %7, %8\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = shl i32 %10, 2\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %13 = add i32 %11, %12\l  %14 = mul nsw i32 %13, %3\l  %15 = add nsw i32 %14, %9\l  %16 = icmp slt i32 %13, %4\l  %17 = icmp slt i32 %9, %3\l  %18 = select i1 %16, i1 %17, i1 false\l  br i1 %18, label %19, label %167\l|{<s0>T|<s1>F}}"];
	Node0x50cac20:s0 -> Node0x50cd220;
	Node0x50cac20:s1 -> Node0x50cd2b0;
	Node0x50cd220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%19:\l19:                                               \l  %20 = icmp sgt i32 %4, 0\l  br i1 %20, label %21, label %50\l|{<s0>T|<s1>F}}"];
	Node0x50cd220:s0 -> Node0x50cd4b0;
	Node0x50cd220:s1 -> Node0x50cd500;
	Node0x50cd4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = and i32 %4, 7\l  %23 = icmp ult i32 %4, 8\l  br i1 %23, label %26, label %24\l|{<s0>T|<s1>F}}"];
	Node0x50cd4b0:s0 -> Node0x50cd7c0;
	Node0x50cd4b0:s1 -> Node0x50cd810;
	Node0x50cd810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l24:                                               \l  %25 = and i32 %4, -8\l  br label %57\l}"];
	Node0x50cd810 -> Node0x50cda10;
	Node0x50cd7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%26:\l26:                                               \l  %27 = phi float [ undef, %21 ], [ %163, %57 ]\l  %28 = phi i32 [ 0, %21 ], [ %164, %57 ]\l  %29 = phi float [ 0.000000e+00, %21 ], [ %163, %57 ]\l  %30 = icmp eq i32 %22, 0\l  br i1 %30, label %50, label %31\l|{<s0>T|<s1>F}}"];
	Node0x50cd7c0:s0 -> Node0x50cd500;
	Node0x50cd7c0:s1 -> Node0x50cec80;
	Node0x50cec80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ %47, %31 ], [ %28, %26 ]\l  %33 = phi float [ %46, %31 ], [ %29, %26 ]\l  %34 = phi i32 [ %48, %31 ], [ 0, %26 ]\l  %35 = mul nsw i32 %32, %3\l  %36 = add nsw i32 %35, %9\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %40 = icmp eq i32 %32, %13\l  %41 = uitofp i1 %40 to float\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %44 = fsub contract float %41, %43\l  %45 = fmul contract float %39, %44\l  %46 = fadd contract float %33, %45\l  %47 = add nuw nsw i32 %32, 1\l  %48 = add i32 %34, 1\l  %49 = icmp eq i32 %48, %22\l  br i1 %49, label %50, label %31, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x50cec80:s0 -> Node0x50cd500;
	Node0x50cec80:s1 -> Node0x50cec80;
	Node0x50cd500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%50:\l50:                                               \l  %51 = phi float [ 0.000000e+00, %19 ], [ %27, %26 ], [ %46, %31 ]\l  %52 = sext i32 %15 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %55 = fmul contract float %51, %54\l  %56 = getelementptr inbounds float, float addrspace(1)* %2, i64 %52\l  store float %55, float addrspace(1)* %56, align 4, !tbaa !5\l  br label %167\l}"];
	Node0x50cd500 -> Node0x50cd2b0;
	Node0x50cda10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%57:\l57:                                               \l  %58 = phi i32 [ 0, %24 ], [ %164, %57 ]\l  %59 = phi float [ 0.000000e+00, %24 ], [ %163, %57 ]\l  %60 = phi i32 [ 0, %24 ], [ %165, %57 ]\l  %61 = mul nsw i32 %58, %3\l  %62 = add nsw i32 %61, %9\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %66 = icmp eq i32 %58, %13\l  %67 = uitofp i1 %66 to float\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %70 = fsub contract float %67, %69\l  %71 = fmul contract float %65, %70\l  %72 = fadd contract float %59, %71\l  %73 = or i32 %58, 1\l  %74 = mul nsw i32 %73, %3\l  %75 = add nsw i32 %74, %9\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %79 = icmp eq i32 %73, %13\l  %80 = uitofp i1 %79 to float\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %83 = fsub contract float %80, %82\l  %84 = fmul contract float %78, %83\l  %85 = fadd contract float %72, %84\l  %86 = or i32 %58, 2\l  %87 = mul nsw i32 %86, %3\l  %88 = add nsw i32 %87, %9\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %92 = icmp eq i32 %86, %13\l  %93 = uitofp i1 %92 to float\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %96 = fsub contract float %93, %95\l  %97 = fmul contract float %91, %96\l  %98 = fadd contract float %85, %97\l  %99 = or i32 %58, 3\l  %100 = mul nsw i32 %99, %3\l  %101 = add nsw i32 %100, %9\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %105 = icmp eq i32 %99, %13\l  %106 = uitofp i1 %105 to float\l  %107 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %109 = fsub contract float %106, %108\l  %110 = fmul contract float %104, %109\l  %111 = fadd contract float %98, %110\l  %112 = or i32 %58, 4\l  %113 = mul nsw i32 %112, %3\l  %114 = add nsw i32 %113, %9\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %118 = icmp eq i32 %112, %13\l  %119 = uitofp i1 %118 to float\l  %120 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %122 = fsub contract float %119, %121\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %111, %123\l  %125 = or i32 %58, 5\l  %126 = mul nsw i32 %125, %3\l  %127 = add nsw i32 %126, %9\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %131 = icmp eq i32 %125, %13\l  %132 = uitofp i1 %131 to float\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %135 = fsub contract float %132, %134\l  %136 = fmul contract float %130, %135\l  %137 = fadd contract float %124, %136\l  %138 = or i32 %58, 6\l  %139 = mul nsw i32 %138, %3\l  %140 = add nsw i32 %139, %9\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %144 = icmp eq i32 %138, %13\l  %145 = uitofp i1 %144 to float\l  %146 = getelementptr inbounds float, float addrspace(1)* %1, i64 %141\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %148 = fsub contract float %145, %147\l  %149 = fmul contract float %143, %148\l  %150 = fadd contract float %137, %149\l  %151 = or i32 %58, 7\l  %152 = mul nsw i32 %151, %3\l  %153 = add nsw i32 %152, %9\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %157 = icmp eq i32 %151, %13\l  %158 = uitofp i1 %157 to float\l  %159 = getelementptr inbounds float, float addrspace(1)* %1, i64 %154\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %161 = fsub contract float %158, %160\l  %162 = fmul contract float %156, %161\l  %163 = fadd contract float %150, %162\l  %164 = add nuw nsw i32 %58, 8\l  %165 = add i32 %60, 8\l  %166 = icmp eq i32 %165, %25\l  br i1 %166, label %26, label %57, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x50cda10:s0 -> Node0x50cd7c0;
	Node0x50cda10:s1 -> Node0x50cda10;
	Node0x50cd2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%167:\l167:                                              \l  ret void\l}"];
}
