digraph "CFG for '_Z22lots_of_double_computePdimS_' function" {
	label="CFG for '_Z22lots_of_double_computePdimS_' function";

	Node0x614a8a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = mul i32 %5, %10\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %16 = add i32 %14, %15\l  %17 = zext i32 %16 to i64\l  %18 = udiv i32 %13, %10\l  %19 = mul i32 %18, %10\l  %20 = icmp ugt i32 %13, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %22, %10\l  %24 = zext i32 %23 to i64\l  %25 = sext i32 %1 to i64\l  %26 = icmp ult i64 %17, %25\l  br i1 %26, label %27, label %55\l|{<s0>T|<s1>F}}"];
	Node0x614a8a0:s0 -> Node0x614d010;
	Node0x614a8a0:s1 -> Node0x614d0a0;
	Node0x614d010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%27:\l27:                                               \l  %28 = icmp eq i64 %2, 0\l  br label %29\l}"];
	Node0x614d010 -> Node0x614d270;
	Node0x614d270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%29:\l29:                                               \l  %30 = phi i64 [ %17, %27 ], [ %53, %50 ]\l  %31 = getelementptr inbounds double, double addrspace(1)* %0, i64 %30\l  %32 = load double, double addrspace(1)* %31, align 8, !tbaa !16\l  br i1 %28, label %50, label %33\l|{<s0>T|<s1>F}}"];
	Node0x614d270:s0 -> Node0x614d360;
	Node0x614d270:s1 -> Node0x614ca50;
	Node0x614ca50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  %34 = phi double [ %47, %33 ], [ %32, %29 ]\l  %35 = phi i64 [ %48, %33 ], [ 0, %29 ]\l  %36 = fadd contract double %34, 5.000000e+00\l  %37 = fadd contract double %36, -1.010000e+02\l  %38 = fdiv contract double %37, 3.000000e+00\l  %39 = fadd contract double %38, 1.020000e+02\l  %40 = fadd contract double %39, 1.070000e+00\l  %41 = fadd contract double %40, -1.030000e+02\l  %42 = fdiv contract double %41, 1.037000e+00\l  %43 = fadd contract double %42, 1.040000e+02\l  %44 = fadd contract double %43, 3.000000e+00\l  %45 = fadd contract double %44, -1.050000e+02\l  %46 = fdiv contract double %45, 2.200000e-01\l  %47 = fadd contract double %46, 1.060000e+02\l  %48 = add nuw i64 %35, 1\l  %49 = icmp eq i64 %48, %2\l  br i1 %49, label %50, label %33, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x614ca50:s0 -> Node0x614d360;
	Node0x614ca50:s1 -> Node0x614ca50;
	Node0x614d360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%50:\l50:                                               \l  %51 = phi double [ %32, %29 ], [ %47, %33 ]\l  %52 = getelementptr inbounds double, double addrspace(1)* %3, i64 %30\l  store double %51, double addrspace(1)* %52, align 8, !tbaa !16\l  %53 = add i64 %30, %24\l  %54 = icmp ult i64 %53, %25\l  br i1 %54, label %29, label %55, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x614d360:s0 -> Node0x614d270;
	Node0x614d360:s1 -> Node0x614d0a0;
	Node0x614d0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%55:\l55:                                               \l  ret void\l}"];
}
