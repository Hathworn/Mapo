digraph "CFG for '_Z17adjust_galaxy_setP6Galaxyi' function" {
	label="CFG for '_Z17adjust_galaxy_setP6Galaxyi' function";

	Node0x601b440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !6\l  %12 = mul i32 %3, %8\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %14 = add i32 %12, %13\l  %15 = udiv i32 %11, %8\l  %16 = mul i32 %15, %8\l  %17 = icmp ugt i32 %11, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %8\l  %21 = icmp slt i32 %14, %1\l  br i1 %21, label %23, label %22\l|{<s0>T|<s1>F}}"];
	Node0x601b440:s0 -> Node0x6020190;
	Node0x601b440:s1 -> Node0x6020220;
	Node0x6020220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%22:\l22:                                               \l  ret void\l}"];
	Node0x6020190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i32 [ %213, %188 ], [ %14, %2 ]\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds %struct.Galaxy, %struct.Galaxy addrspace(1)*\l... %0, i64 %25, i32 0\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !16\l  %28 = fpext float %27 to double\l  %29 = fmul contract double %28, 0x400921FB54442D18\l  %30 = fdiv contract double %29, 1.080000e+04\l  %31 = fptrunc double %30 to float\l  store float %31, float addrspace(1)* %26, align 4, !tbaa !16\l  %32 = tail call float @llvm.fabs.f32(float %31)\l  %33 = fcmp olt float %32, 1.310720e+05\l  br i1 %33, label %34, label %62\l|{<s0>T|<s1>F}}"];
	Node0x6020190:s0 -> Node0x6021ef0;
	Node0x6020190:s1 -> Node0x6021f40;
	Node0x6021ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%34:\l34:                                               \l  %35 = fmul float %32, 0x3FE45F3060000000\l  %36 = tail call float @llvm.rint.f32(float %35)\l  %37 = tail call float @llvm.fma.f32(float %36, float 0xBFF921FB40000000,\l... float %32)\l  %38 = tail call float @llvm.fma.f32(float %36, float 0xBE74442D00000000,\l... float %37)\l  %39 = tail call float @llvm.fma.f32(float %36, float 0xBCF8469880000000,\l... float %38)\l  %40 = fptosi float %36 to i32\l  %41 = fmul float %39, %39\l  %42 = tail call float @llvm.fmuladd.f32(float %41, float 0xBF29833040000000,\l... float 0x3F81103880000000)\l  %43 = tail call float @llvm.fmuladd.f32(float %41, float %42, float\l... 0xBFC55553A0000000)\l  %44 = fmul float %41, %43\l  %45 = tail call float @llvm.fmuladd.f32(float %39, float %44, float %39)\l  %46 = tail call float @llvm.fmuladd.f32(float %41, float 0x3EFAEA6680000000,\l... float 0xBF56C9E760000000)\l  %47 = tail call float @llvm.fmuladd.f32(float %41, float %46, float\l... 0x3FA5557EE0000000)\l  %48 = tail call float @llvm.fmuladd.f32(float %41, float %47, float\l... 0xBFE0000080000000)\l  %49 = tail call float @llvm.fmuladd.f32(float %41, float %48, float\l... 1.000000e+00)\l  %50 = fneg float %45\l  %51 = and i32 %40, 1\l  %52 = icmp eq i32 %51, 0\l  %53 = select i1 %52, float %49, float %50\l  %54 = bitcast float %53 to i32\l  %55 = shl i32 %40, 30\l  %56 = and i32 %55, -2147483648\l  %57 = xor i32 %56, %54\l  %58 = bitcast i32 %57 to float\l  %59 = tail call i1 @llvm.amdgcn.class.f32(float %32, i32 504)\l  %60 = select i1 %59, float %58, float 0x7FF8000000000000\l  %61 = bitcast float %32 to i32\l  br label %188\l}"];
	Node0x6021ef0 -> Node0x60203b0;
	Node0x6021f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%62:\l62:                                               \l  %63 = bitcast float %32 to i32\l  %64 = lshr i32 %63, 23\l  %65 = and i32 %63, 8388607\l  %66 = or i32 %65, 8388608\l  %67 = zext i32 %66 to i64\l  %68 = mul nuw nsw i64 %67, 4266746795\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %67, 1011060801\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = mul nuw nsw i64 %67, 3680671129\l  %76 = add nuw nsw i64 %74, %75\l  %77 = trunc i64 %76 to i32\l  %78 = lshr i64 %76, 32\l  %79 = mul nuw nsw i64 %67, 4113882560\l  %80 = add nuw nsw i64 %78, %79\l  %81 = trunc i64 %80 to i32\l  %82 = lshr i64 %80, 32\l  %83 = mul nuw nsw i64 %67, 4230436817\l  %84 = add nuw nsw i64 %82, %83\l  %85 = trunc i64 %84 to i32\l  %86 = lshr i64 %84, 32\l  %87 = mul nuw nsw i64 %67, 1313084713\l  %88 = add nuw nsw i64 %86, %87\l  %89 = trunc i64 %88 to i32\l  %90 = lshr i64 %88, 32\l  %91 = mul nuw nsw i64 %67, 2734261102\l  %92 = add nuw nsw i64 %90, %91\l  %93 = trunc i64 %92 to i32\l  %94 = lshr i64 %92, 32\l  %95 = trunc i64 %94 to i32\l  %96 = add nsw i32 %64, -120\l  %97 = icmp ugt i32 %96, 63\l  %98 = select i1 %97, i32 %89, i32 %95\l  %99 = select i1 %97, i32 %85, i32 %93\l  %100 = select i1 %97, i32 %81, i32 %89\l  %101 = select i1 %97, i32 %77, i32 %85\l  %102 = select i1 %97, i32 %73, i32 %81\l  %103 = select i1 %97, i32 %69, i32 %77\l  %104 = select i1 %97, i32 -64, i32 0\l  %105 = add nsw i32 %104, %96\l  %106 = icmp ugt i32 %105, 31\l  %107 = select i1 %106, i32 %99, i32 %98\l  %108 = select i1 %106, i32 %100, i32 %99\l  %109 = select i1 %106, i32 %101, i32 %100\l  %110 = select i1 %106, i32 %102, i32 %101\l  %111 = select i1 %106, i32 %103, i32 %102\l  %112 = select i1 %106, i32 -32, i32 0\l  %113 = add nsw i32 %112, %105\l  %114 = icmp ugt i32 %113, 31\l  %115 = select i1 %114, i32 %108, i32 %107\l  %116 = select i1 %114, i32 %109, i32 %108\l  %117 = select i1 %114, i32 %110, i32 %109\l  %118 = select i1 %114, i32 %111, i32 %110\l  %119 = select i1 %114, i32 -32, i32 0\l  %120 = add nsw i32 %119, %113\l  %121 = icmp eq i32 %120, 0\l  %122 = sub nsw i32 32, %120\l  %123 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %116, i32 %122)\l  %124 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %122)\l  %125 = tail call i32 @llvm.fshr.i32(i32 %117, i32 %118, i32 %122)\l  %126 = select i1 %121, i32 %115, i32 %123\l  %127 = select i1 %121, i32 %116, i32 %124\l  %128 = select i1 %121, i32 %117, i32 %125\l  %129 = lshr i32 %126, 29\l  %130 = tail call i32 @llvm.fshl.i32(i32 %126, i32 %127, i32 2)\l  %131 = tail call i32 @llvm.fshl.i32(i32 %127, i32 %128, i32 2)\l  %132 = tail call i32 @llvm.fshl.i32(i32 %128, i32 %118, i32 2)\l  %133 = and i32 %129, 1\l  %134 = sub nsw i32 0, %133\l  %135 = shl i32 %129, 31\l  %136 = xor i32 %130, %134\l  %137 = xor i32 %131, %134\l  %138 = xor i32 %132, %134\l  %139 = tail call i32 @llvm.ctlz.i32(i32 %136, i1 false), !range !21\l  %140 = sub nsw i32 31, %139\l  %141 = tail call i32 @llvm.fshr.i32(i32 %136, i32 %137, i32 %140)\l  %142 = tail call i32 @llvm.fshr.i32(i32 %137, i32 %138, i32 %140)\l  %143 = shl nuw nsw i32 %139, 23\l  %144 = sub nuw nsw i32 1056964608, %143\l  %145 = lshr i32 %141, 9\l  %146 = or i32 %145, %144\l  %147 = or i32 %146, %135\l  %148 = bitcast i32 %147 to float\l  %149 = tail call i32 @llvm.fshl.i32(i32 %141, i32 %142, i32 23)\l  %150 = tail call i32 @llvm.ctlz.i32(i32 %149, i1 false), !range !21\l  %151 = fmul float %148, 0x3FF921FB40000000\l  %152 = add nuw nsw i32 %150, %139\l  %153 = shl nuw nsw i32 %152, 23\l  %154 = sub nuw nsw i32 855638016, %153\l  %155 = sub nsw i32 31, %150\l  %156 = tail call i32 @llvm.fshr.i32(i32 %149, i32 %142, i32 %155)\l  %157 = lshr i32 %156, 9\l  %158 = or i32 %154, %157\l  %159 = or i32 %158, %135\l  %160 = bitcast i32 %159 to float\l  %161 = fneg float %151\l  %162 = tail call float @llvm.fma.f32(float %148, float 0x3FF921FB40000000,\l... float %161)\l  %163 = tail call float @llvm.fma.f32(float %148, float 0x3E74442D00000000,\l... float %162)\l  %164 = tail call float @llvm.fma.f32(float %160, float 0x3FF921FB40000000,\l... float %163)\l  %165 = fadd float %151, %164\l  %166 = lshr i32 %126, 30\l  %167 = add nuw nsw i32 %133, %166\l  %168 = fmul float %165, %165\l  %169 = tail call float @llvm.fmuladd.f32(float %168, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %170 = tail call float @llvm.fmuladd.f32(float %168, float %169, float\l... 0xBFC55553A0000000)\l  %171 = fmul float %168, %170\l  %172 = tail call float @llvm.fmuladd.f32(float %165, float %171, float %165)\l  %173 = tail call float @llvm.fmuladd.f32(float %168, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %174 = tail call float @llvm.fmuladd.f32(float %168, float %173, float\l... 0x3FA5557EE0000000)\l  %175 = tail call float @llvm.fmuladd.f32(float %168, float %174, float\l... 0xBFE0000080000000)\l  %176 = tail call float @llvm.fmuladd.f32(float %168, float %175, float\l... 1.000000e+00)\l  %177 = fneg float %172\l  %178 = and i32 %167, 1\l  %179 = icmp eq i32 %178, 0\l  %180 = select i1 %179, float %176, float %177\l  %181 = bitcast float %180 to i32\l  %182 = shl i32 %167, 30\l  %183 = and i32 %182, -2147483648\l  %184 = xor i32 %183, %181\l  %185 = bitcast i32 %184 to float\l  %186 = tail call i1 @llvm.amdgcn.class.f32(float %32, i32 504)\l  %187 = select i1 %186, float %185, float 0x7FF8000000000000\l  br label %188\l}"];
	Node0x6021f40 -> Node0x60203b0;
	Node0x60203b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%188:\l188:                                              \l  %189 = phi i32 [ %56, %34 ], [ %183, %62 ]\l  %190 = phi i32 [ %51, %34 ], [ %178, %62 ]\l  %191 = phi float [ %49, %34 ], [ %176, %62 ]\l  %192 = phi float [ %45, %34 ], [ %172, %62 ]\l  %193 = phi float [ %60, %34 ], [ %187, %62 ]\l  %194 = phi i1 [ %59, %34 ], [ %186, %62 ]\l  %195 = phi i32 [ %61, %34 ], [ %63, %62 ]\l  %196 = getelementptr inbounds %struct.Galaxy, %struct.Galaxy addrspace(1)*\l... %0, i64 %25, i32 1\l  store float %193, float addrspace(1)* %196, align 4\l  %197 = icmp eq i32 %190, 0\l  %198 = select i1 %197, float %192, float %191\l  %199 = bitcast float %198 to i32\l  %200 = bitcast float %31 to i32\l  %201 = xor i32 %195, %200\l  %202 = xor i32 %201, %189\l  %203 = xor i32 %202, %199\l  %204 = bitcast i32 %203 to float\l  %205 = select i1 %194, float %204, float 0x7FF8000000000000\l  %206 = getelementptr inbounds %struct.Galaxy, %struct.Galaxy addrspace(1)*\l... %0, i64 %25, i32 2\l  store float %205, float addrspace(1)* %206, align 4, !tbaa !22\l  %207 = getelementptr inbounds %struct.Galaxy, %struct.Galaxy addrspace(1)*\l... %0, i64 %25, i32 3\l  %208 = load float, float addrspace(1)* %207, align 4, !tbaa !23\l  %209 = fpext float %208 to double\l  %210 = fmul contract double %209, 0x400921FB54442D18\l  %211 = fdiv contract double %210, 1.080000e+04\l  %212 = fptrunc double %211 to float\l  store float %212, float addrspace(1)* %207, align 4, !tbaa !23\l  %213 = add nsw i32 %24, %20\l  %214 = icmp slt i32 %213, %1\l  br i1 %214, label %23, label %22, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x60203b0:s0 -> Node0x6020190;
	Node0x60203b0:s1 -> Node0x6020220;
}
