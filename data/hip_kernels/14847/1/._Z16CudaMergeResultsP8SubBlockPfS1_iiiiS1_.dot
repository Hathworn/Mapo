digraph "CFG for '_Z16CudaMergeResultsP8SubBlockPfS1_iiiiS1_' function" {
	label="CFG for '_Z16CudaMergeResultsP8SubBlockPfS1_iiiiS1_' function";

	Node0x5dd1840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = icmp eq i32 %9, 0\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x()\l  %12 = icmp eq i32 %11, 0\l  %13 = select i1 %10, i1 %12, i1 false\l  %14 = icmp sgt i32 %3, 0\l  %15 = select i1 %13, i1 %14, i1 false\l  br i1 %15, label %16, label %170\l|{<s0>T|<s1>F}}"];
	Node0x5dd1840:s0 -> Node0x5dd4f20;
	Node0x5dd1840:s1 -> Node0x5dd4fb0;
	Node0x5dd4f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %4, 0\l  %18 = and i32 %4, 7\l  %19 = icmp ult i32 %4, 8\l  %20 = and i32 %4, -8\l  %21 = icmp eq i32 %18, 0\l  br label %22\l}"];
	Node0x5dd4f20 -> Node0x5dd54d0;
	Node0x5dd54d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%22:\l22:                                               \l  %23 = phi i32 [ 0, %16 ], [ %51, %50 ]\l  %24 = zext i32 %23 to i64\l  %25 = getelementptr inbounds %struct.SubBlock, %struct.SubBlock\l... addrspace(1)* %0, i64 %24, i32 1\l  %26 = load i32*, i32* addrspace(1)* %25, align 8, !tbaa !4,\l... !amdgpu.noclobber !10\l  br i1 %17, label %27, label %50\l|{<s0>T|<s1>F}}"];
	Node0x5dd54d0:s0 -> Node0x5dd6640;
	Node0x5dd54d0:s1 -> Node0x5dd55c0;
	Node0x5dd6640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%27:\l27:                                               \l  %28 = mul nsw i32 %23, %4\l  br i1 %19, label %29, label %53\l|{<s0>T|<s1>F}}"];
	Node0x5dd6640:s0 -> Node0x5dd6810;
	Node0x5dd6640:s1 -> Node0x5dd6860;
	Node0x5dd6810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %27 ], [ %167, %53 ]\l  br i1 %21, label %50, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5dd6810:s0 -> Node0x5dd55c0;
	Node0x5dd6810:s1 -> Node0x5dd6a50;
	Node0x5dd6a50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ %47, %31 ], [ %30, %29 ]\l  %33 = phi i32 [ %48, %31 ], [ 0, %29 ]\l  %34 = add nsw i32 %32, %28\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %7, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !11\l  %38 = zext i32 %32 to i64\l  %39 = getelementptr inbounds i32, i32* %26, i64 %38\l  %40 = addrspacecast i32* %39 to i32 addrspace(1)*\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !13, !amdgpu.noclobber\l... !10\l  %42 = add nsw i32 %41, -1\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %2, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !11\l  %46 = fadd contract float %37, %45\l  store float %46, float addrspace(1)* %44, align 4, !tbaa !11\l  %47 = add nuw nsw i32 %32, 1\l  %48 = add i32 %33, 1\l  %49 = icmp eq i32 %48, %18\l  br i1 %49, label %50, label %31, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5dd6a50:s0 -> Node0x5dd55c0;
	Node0x5dd6a50:s1 -> Node0x5dd6a50;
	Node0x5dd55c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%50:\l50:                                               \l  %51 = add nuw nsw i32 %23, 1\l  %52 = icmp eq i32 %51, %3\l  br i1 %52, label %170, label %22, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5dd55c0:s0 -> Node0x5dd4fb0;
	Node0x5dd55c0:s1 -> Node0x5dd54d0;
	Node0x5dd6860 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%53:\l53:                                               \l  %54 = phi i32 [ %167, %53 ], [ 0, %27 ]\l  %55 = phi i32 [ %168, %53 ], [ 0, %27 ]\l  %56 = add nsw i32 %54, %28\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %7, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !11\l  %60 = zext i32 %54 to i64\l  %61 = getelementptr inbounds i32, i32* %26, i64 %60\l  %62 = addrspacecast i32* %61 to i32 addrspace(1)*\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !13, !amdgpu.noclobber\l... !10\l  %64 = add nsw i32 %63, -1\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !11\l  %68 = fadd contract float %59, %67\l  store float %68, float addrspace(1)* %66, align 4, !tbaa !11\l  %69 = or i32 %54, 1\l  %70 = add nsw i32 %69, %28\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %7, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !11\l  %74 = zext i32 %69 to i64\l  %75 = getelementptr inbounds i32, i32* %26, i64 %74\l  %76 = addrspacecast i32* %75 to i32 addrspace(1)*\l  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !13, !amdgpu.noclobber\l... !10\l  %78 = add nsw i32 %77, -1\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %2, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !11\l  %82 = fadd contract float %73, %81\l  store float %82, float addrspace(1)* %80, align 4, !tbaa !11\l  %83 = or i32 %54, 2\l  %84 = add nsw i32 %83, %28\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %7, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !11\l  %88 = zext i32 %83 to i64\l  %89 = getelementptr inbounds i32, i32* %26, i64 %88\l  %90 = addrspacecast i32* %89 to i32 addrspace(1)*\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !13, !amdgpu.noclobber\l... !10\l  %92 = add nsw i32 %91, -1\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !11\l  %96 = fadd contract float %87, %95\l  store float %96, float addrspace(1)* %94, align 4, !tbaa !11\l  %97 = or i32 %54, 3\l  %98 = add nsw i32 %97, %28\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %7, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !11\l  %102 = zext i32 %97 to i64\l  %103 = getelementptr inbounds i32, i32* %26, i64 %102\l  %104 = addrspacecast i32* %103 to i32 addrspace(1)*\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !tbaa !13,\l... !amdgpu.noclobber !10\l  %106 = add nsw i32 %105, -1\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %2, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !11\l  %110 = fadd contract float %101, %109\l  store float %110, float addrspace(1)* %108, align 4, !tbaa !11\l  %111 = or i32 %54, 4\l  %112 = add nsw i32 %111, %28\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %7, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !11\l  %116 = zext i32 %111 to i64\l  %117 = getelementptr inbounds i32, i32* %26, i64 %116\l  %118 = addrspacecast i32* %117 to i32 addrspace(1)*\l  %119 = load i32, i32 addrspace(1)* %118, align 4, !tbaa !13,\l... !amdgpu.noclobber !10\l  %120 = add nsw i32 %119, -1\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %2, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !11\l  %124 = fadd contract float %115, %123\l  store float %124, float addrspace(1)* %122, align 4, !tbaa !11\l  %125 = or i32 %54, 5\l  %126 = add nsw i32 %125, %28\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %7, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !11\l  %130 = zext i32 %125 to i64\l  %131 = getelementptr inbounds i32, i32* %26, i64 %130\l  %132 = addrspacecast i32* %131 to i32 addrspace(1)*\l  %133 = load i32, i32 addrspace(1)* %132, align 4, !tbaa !13,\l... !amdgpu.noclobber !10\l  %134 = add nsw i32 %133, -1\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %2, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !11\l  %138 = fadd contract float %129, %137\l  store float %138, float addrspace(1)* %136, align 4, !tbaa !11\l  %139 = or i32 %54, 6\l  %140 = add nsw i32 %139, %28\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %7, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !11\l  %144 = zext i32 %139 to i64\l  %145 = getelementptr inbounds i32, i32* %26, i64 %144\l  %146 = addrspacecast i32* %145 to i32 addrspace(1)*\l  %147 = load i32, i32 addrspace(1)* %146, align 4, !tbaa !13,\l... !amdgpu.noclobber !10\l  %148 = add nsw i32 %147, -1\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %2, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !11\l  %152 = fadd contract float %143, %151\l  store float %152, float addrspace(1)* %150, align 4, !tbaa !11\l  %153 = or i32 %54, 7\l  %154 = add nsw i32 %153, %28\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %7, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !11\l  %158 = zext i32 %153 to i64\l  %159 = getelementptr inbounds i32, i32* %26, i64 %158\l  %160 = addrspacecast i32* %159 to i32 addrspace(1)*\l  %161 = load i32, i32 addrspace(1)* %160, align 4, !tbaa !13,\l... !amdgpu.noclobber !10\l  %162 = add nsw i32 %161, -1\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %2, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !11\l  %166 = fadd contract float %157, %165\l  store float %166, float addrspace(1)* %164, align 4, !tbaa !11\l  %167 = add nuw nsw i32 %54, 8\l  %168 = add i32 %55, 8\l  %169 = icmp eq i32 %168, %20\l  br i1 %169, label %29, label %53, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5dd6860:s0 -> Node0x5dd6810;
	Node0x5dd6860:s1 -> Node0x5dd6860;
	Node0x5dd4fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%170:\l170:                                              \l  ret void\l}"];
}
