digraph "CFG for '_Z26matrixMultiplicationKernelPlS_S_l' function" {
	label="CFG for '_Z26matrixMultiplicationKernelPlS_S_l' function";

	Node0x5e26c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = zext i32 %13 to i64\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %22 = add i32 %20, %21\l  %23 = zext i32 %22 to i64\l  %24 = icmp slt i64 %14, %3\l  %25 = icmp slt i64 %23, %3\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5e26c80:s0 -> Node0x5e2a860;
	Node0x5e26c80:s1 -> Node0x5e2a8f0;
	Node0x5e2a860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%27:\l27:                                               \l  %28 = icmp sgt i64 %3, 0\l  %29 = mul nsw i64 %14, %3\l  br i1 %28, label %30, label %50\l|{<s0>T|<s1>F}}"];
	Node0x5e2a860:s0 -> Node0x5e2ab80;
	Node0x5e2a860:s1 -> Node0x5e2abd0;
	Node0x5e2ab80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%30:\l30:                                               \l  %31 = and i64 %3, 1\l  %32 = icmp eq i64 %3, 1\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5e2ab80:s0 -> Node0x5e28e30;
	Node0x5e2ab80:s1 -> Node0x5e28e80;
	Node0x5e28e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%33:\l33:                                               \l  %34 = and i64 %3, -2\l  br label %54\l}"];
	Node0x5e28e80 -> Node0x5e2b1b0;
	Node0x5e28e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%35:\l35:                                               \l  %36 = phi i64 [ undef, %30 ], [ %76, %54 ]\l  %37 = phi i64 [ 0, %30 ], [ %77, %54 ]\l  %38 = phi i64 [ 0, %30 ], [ %76, %54 ]\l  %39 = icmp eq i64 %31, 0\l  br i1 %39, label %50, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5e28e30:s0 -> Node0x5e2abd0;
	Node0x5e28e30:s1 -> Node0x5e2b9d0;
	Node0x5e2b9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%40:\l40:                                               \l  %41 = add nsw i64 %37, %29\l  %42 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %41\l  %43 = load i64, i64 addrspace(1)* %42, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %44 = mul nsw i64 %37, %3\l  %45 = add nsw i64 %44, %23\l  %46 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %45\l  %47 = load i64, i64 addrspace(1)* %46, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %48 = mul nsw i64 %47, %43\l  %49 = add nsw i64 %48, %38\l  br label %50\l}"];
	Node0x5e2b9d0 -> Node0x5e2abd0;
	Node0x5e2abd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%50:\l50:                                               \l  %51 = phi i64 [ 0, %27 ], [ %36, %35 ], [ %49, %40 ]\l  %52 = add nsw i64 %29, %23\l  %53 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %52\l  store i64 %51, i64 addrspace(1)* %53, align 8, !tbaa !7\l  br label %80\l}"];
	Node0x5e2abd0 -> Node0x5e2a8f0;
	Node0x5e2b1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%54:\l54:                                               \l  %55 = phi i64 [ 0, %33 ], [ %77, %54 ]\l  %56 = phi i64 [ 0, %33 ], [ %76, %54 ]\l  %57 = phi i64 [ 0, %33 ], [ %78, %54 ]\l  %58 = add nsw i64 %55, %29\l  %59 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %58\l  %60 = load i64, i64 addrspace(1)* %59, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %61 = mul nsw i64 %55, %3\l  %62 = add nsw i64 %61, %23\l  %63 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %62\l  %64 = load i64, i64 addrspace(1)* %63, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %65 = mul nsw i64 %64, %60\l  %66 = add nsw i64 %65, %56\l  %67 = or i64 %55, 1\l  %68 = add nsw i64 %67, %29\l  %69 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %68\l  %70 = load i64, i64 addrspace(1)* %69, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %71 = mul nsw i64 %67, %3\l  %72 = add nsw i64 %71, %23\l  %73 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %72\l  %74 = load i64, i64 addrspace(1)* %73, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %75 = mul nsw i64 %74, %70\l  %76 = add nsw i64 %75, %66\l  %77 = add nuw nsw i64 %55, 2\l  %78 = add i64 %57, 2\l  %79 = icmp eq i64 %78, %34\l  br i1 %79, label %35, label %54, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5e2b1b0:s0 -> Node0x5e28e30;
	Node0x5e2b1b0:s1 -> Node0x5e2b1b0;
	Node0x5e2a8f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%80:\l80:                                               \l  ret void\l}"];
}
