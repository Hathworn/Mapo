digraph "CFG for '_Z16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_' function" {
	label="CFG for '_Z16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_' function";

	Node0x49025f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%20:\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %22 = zext i32 %21 to i64\l  %23 = mul i64 %3, %0\l  %24 = icmp ugt i64 %23, %22\l  br i1 %24, label %25, label %31\l|{<s0>T|<s1>F}}"];
	Node0x49025f0:s0 -> Node0x49029f0;
	Node0x49025f0:s1 -> Node0x4902a80;
	Node0x49029f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%25:\l25:                                               \l  %26 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %27 = getelementptr i8, i8 addrspace(4)* %26, i64 4\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 4, !range !5, !invariant.load !6\l  %30 = zext i16 %29 to i64\l  br label %59\l}"];
	Node0x49029f0 -> Node0x4904f10;
	Node0x4902a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%31:\l31:                                               \l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %33 = zext i32 %32 to i64\l  %34 = shl nuw nsw i64 %33, 8\l  %35 = add nuw nsw i64 %34, %22\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %36 = icmp eq i64 %18, 0\l  br i1 %36, label %67, label %37\l|{<s0>T|<s1>F}}"];
	Node0x4902a80:s0 -> Node0x4905820;
	Node0x4902a80:s1 -> Node0x49058b0;
	Node0x49058b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%37:\l37:                                               \l  %38 = icmp eq i64 %0, 0\l  %39 = icmp eq i64 %3, 0\l  %40 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %41 = getelementptr inbounds i8, i8 addrspace(4)* %40, i64 12\l  %42 = bitcast i8 addrspace(4)* %41 to i32 addrspace(4)*\l  %43 = load i32, i32 addrspace(4)* %42, align 4, !tbaa !7\l  %44 = getelementptr i8, i8 addrspace(4)* %40, i64 4\l  %45 = bitcast i8 addrspace(4)* %44 to i16 addrspace(4)*\l  %46 = load i16, i16 addrspace(4)* %45, align 4, !range !5, !invariant.load !6\l  %47 = zext i16 %46 to i32\l  %48 = udiv i32 %43, %47\l  %49 = mul i32 %48, %47\l  %50 = icmp ugt i32 %43, %49\l  %51 = zext i1 %50 to i32\l  %52 = add i32 %48, %51\l  %53 = mul i32 %52, %47\l  %54 = zext i32 %53 to i64\l  %55 = and i64 %3, 3\l  %56 = icmp ult i64 %3, 4\l  %57 = and i64 %3, -4\l  %58 = icmp eq i64 %55, 0\l  br label %68\l}"];
	Node0x49058b0 -> Node0x4907340;
	Node0x4904f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%59:\l59:                                               \l  %60 = phi i64 [ %22, %25 ], [ %65, %59 ]\l  %61 = getelementptr inbounds double, double addrspace(1)* %15, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %63 = trunc i64 %60 to i32\l  %64 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_E6t2_shm, i32 0, i32 %63\l  store double %62, double addrspace(3)* %64, align 8, !tbaa !16\l  %65 = add i64 %60, %30\l  %66 = icmp ult i64 %65, %23\l  br i1 %66, label %59, label %31, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4904f10:s0 -> Node0x4904f10;
	Node0x4904f10:s1 -> Node0x4902a80;
	Node0x4905820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%67:\l67:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
	Node0x4907340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%68:\l68:                                               \l  %69 = phi i64 [ 0, %37 ], [ %179, %178 ]\l  %70 = phi i64 [ %35, %37 ], [ %78, %178 ]\l  %71 = add i64 %69, %70\l  %72 = freeze i64 %71\l  %73 = freeze i64 %2\l  %74 = udiv i64 %72, %73\l  %75 = mul i64 %74, %73\l  %76 = sub i64 %72, %75\l  %77 = freeze i64 %1\l  %78 = udiv i64 %74, %77\l  %79 = mul i64 %78, %77\l  %80 = sub i64 %74, %79\l  %81 = urem i64 %78, %4\l  %82 = add i64 %69, %35\l  %83 = icmp uge i64 %82, %18\l  %84 = select i1 %83, i1 true, i1 %38\l  br i1 %84, label %178, label %85\l|{<s0>T|<s1>F}}"];
	Node0x4907340:s0 -> Node0x49086c0;
	Node0x4907340:s1 -> Node0x4909080;
	Node0x4909080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%85:\l85:                                               \l  %86 = mul i64 %76, %7\l  %87 = mul i64 %80, %8\l  %88 = add i64 %87, %86\l  %89 = mul i64 %81, %9\l  %90 = add i64 %88, %89\l  %91 = getelementptr inbounds double, double addrspace(1)* %16, i64 %90\l  %92 = mul i64 %76, %10\l  %93 = mul i64 %80, %11\l  %94 = add i64 %93, %92\l  %95 = mul i64 %81, %13\l  %96 = add i64 %94, %95\l  br label %97\l}"];
	Node0x4909080 -> Node0x49097c0;
	Node0x49097c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%97:\l97:                                               \l  %98 = phi i64 [ 0, %85 ], [ %176, %175 ]\l  br i1 %39, label %175, label %99\l|{<s0>T|<s1>F}}"];
	Node0x49097c0:s0 -> Node0x49098b0;
	Node0x49097c0:s1 -> Node0x49099f0;
	Node0x49099f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%99:\l99:                                               \l  %100 = mul i64 %98, %3\l  %101 = mul i64 %98, %12\l  %102 = add i64 %96, %101\l  br i1 %56, label %156, label %103\l|{<s0>T|<s1>F}}"];
	Node0x49099f0:s0 -> Node0x4909ce0;
	Node0x49099f0:s1 -> Node0x4909d30;
	Node0x4909d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%103:\l103:                                              \l  %104 = phi i64 [ %153, %103 ], [ 0, %99 ]\l  %105 = phi i64 [ %154, %103 ], [ 0, %99 ]\l  %106 = add i64 %104, %100\l  %107 = trunc i64 %106 to i32\l  %108 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_E6t2_shm, i32 0, i32 %107\l  %109 = load double, double addrspace(3)* %108, align 8, !tbaa !16\l  %110 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %111 = fmul contract double %109, %110\l  %112 = mul i64 %104, %14\l  %113 = add i64 %102, %112\l  %114 = getelementptr inbounds double, double addrspace(1)* %19, i64 %113\l  %115 = load double, double addrspace(1)* %114, align 8, !tbaa !16\l  %116 = fsub contract double %115, %111\l  store double %116, double addrspace(1)* %114, align 8, !tbaa !16\l  %117 = or i64 %104, 1\l  %118 = add i64 %117, %100\l  %119 = trunc i64 %118 to i32\l  %120 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_E6t2_shm, i32 0, i32 %119\l  %121 = load double, double addrspace(3)* %120, align 8, !tbaa !16\l  %122 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %123 = fmul contract double %121, %122\l  %124 = mul i64 %117, %14\l  %125 = add i64 %102, %124\l  %126 = getelementptr inbounds double, double addrspace(1)* %19, i64 %125\l  %127 = load double, double addrspace(1)* %126, align 8, !tbaa !16\l  %128 = fsub contract double %127, %123\l  store double %128, double addrspace(1)* %126, align 8, !tbaa !16\l  %129 = or i64 %104, 2\l  %130 = add i64 %129, %100\l  %131 = trunc i64 %130 to i32\l  %132 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_E6t2_shm, i32 0, i32 %131\l  %133 = load double, double addrspace(3)* %132, align 8, !tbaa !16\l  %134 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %135 = fmul contract double %133, %134\l  %136 = mul i64 %129, %14\l  %137 = add i64 %102, %136\l  %138 = getelementptr inbounds double, double addrspace(1)* %19, i64 %137\l  %139 = load double, double addrspace(1)* %138, align 8, !tbaa !16\l  %140 = fsub contract double %139, %135\l  store double %140, double addrspace(1)* %138, align 8, !tbaa !16\l  %141 = or i64 %104, 3\l  %142 = add i64 %141, %100\l  %143 = trunc i64 %142 to i32\l  %144 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_E6t2_shm, i32 0, i32 %143\l  %145 = load double, double addrspace(3)* %144, align 8, !tbaa !16\l  %146 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %147 = fmul contract double %145, %146\l  %148 = mul i64 %141, %14\l  %149 = add i64 %102, %148\l  %150 = getelementptr inbounds double, double addrspace(1)* %19, i64 %149\l  %151 = load double, double addrspace(1)* %150, align 8, !tbaa !16\l  %152 = fsub contract double %151, %147\l  store double %152, double addrspace(1)* %150, align 8, !tbaa !16\l  %153 = add nuw i64 %104, 4\l  %154 = add i64 %105, 4\l  %155 = icmp eq i64 %154, %57\l  br i1 %155, label %156, label %103, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4909d30:s0 -> Node0x4909ce0;
	Node0x4909d30:s1 -> Node0x4909d30;
	Node0x4909ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%156:\l156:                                              \l  %157 = phi i64 [ 0, %99 ], [ %153, %103 ]\l  br i1 %58, label %175, label %158\l|{<s0>T|<s1>F}}"];
	Node0x4909ce0:s0 -> Node0x49098b0;
	Node0x4909ce0:s1 -> Node0x490c4a0;
	Node0x490c4a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%158:\l158:                                              \l  %159 = phi i64 [ %172, %158 ], [ %157, %156 ]\l  %160 = phi i64 [ %173, %158 ], [ 0, %156 ]\l  %161 = add i64 %159, %100\l  %162 = trunc i64 %161 to i32\l  %163 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_2_kernelmmmmmmmmmmmmmmmPdS_mmS_E6t2_shm, i32 0, i32 %162\l  %164 = load double, double addrspace(3)* %163, align 8, !tbaa !16\l  %165 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %166 = fmul contract double %164, %165\l  %167 = mul i64 %159, %14\l  %168 = add i64 %102, %167\l  %169 = getelementptr inbounds double, double addrspace(1)* %19, i64 %168\l  %170 = load double, double addrspace(1)* %169, align 8, !tbaa !16\l  %171 = fsub contract double %170, %166\l  store double %171, double addrspace(1)* %169, align 8, !tbaa !16\l  %172 = add nuw i64 %159, 1\l  %173 = add i64 %160, 1\l  %174 = icmp eq i64 %173, %55\l  br i1 %174, label %175, label %158, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x490c4a0:s0 -> Node0x49098b0;
	Node0x490c4a0:s1 -> Node0x490c4a0;
	Node0x49098b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%175:\l175:                                              \l  %176 = add nuw i64 %98, 1\l  %177 = icmp eq i64 %176, %0\l  br i1 %177, label %178, label %97, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x49098b0:s0 -> Node0x49086c0;
	Node0x49098b0:s1 -> Node0x49097c0;
	Node0x49086c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%178:\l178:                                              \l  %179 = add i64 %69, %54\l  %180 = icmp ult i64 %179, %18\l  br i1 %180, label %68, label %67, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x49086c0:s0 -> Node0x4907340;
	Node0x49086c0:s1 -> Node0x4905820;
}
