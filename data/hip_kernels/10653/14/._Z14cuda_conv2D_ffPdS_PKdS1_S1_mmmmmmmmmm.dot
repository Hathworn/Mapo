digraph "CFG for '_Z14cuda_conv2D_ffPdS_PKdS1_S1_mmmmmmmmmm' function" {
	label="CFG for '_Z14cuda_conv2D_ffPdS_PKdS1_S1_mmmmmmmmmm' function";

	Node0x5450a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%15:\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %18 = getelementptr i8, i8 addrspace(4)* %17, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %16, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %24 = add i32 %22, %23\l  %25 = sext i32 %24 to i64\l  %26 = freeze i64 %25\l  %27 = freeze i64 %9\l  %28 = udiv i64 %26, %27\l  %29 = mul i64 %28, %27\l  %30 = sub i64 %26, %29\l  %31 = shl i64 %28, 32\l  %32 = ashr exact i64 %31, 32\l  %33 = freeze i64 %32\l  %34 = freeze i64 %8\l  %35 = udiv i64 %33, %34\l  %36 = mul i64 %35, %34\l  %37 = sub i64 %33, %36\l  %38 = shl i64 %35, 32\l  %39 = ashr exact i64 %38, 32\l  %40 = icmp ult i64 %39, %5\l  br i1 %40, label %41, label %312\l|{<s0>T|<s1>F}}"];
	Node0x5450a20:s0 -> Node0x5453ec0;
	Node0x5450a20:s1 -> Node0x5453f50;
	Node0x5453ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%41:\l41:                                               \l  %42 = mul i64 %39, %8\l  %43 = mul i64 %37, %14\l  %44 = sub i64 %43, %13\l  %45 = mul i64 %39, %12\l  %46 = add i64 %42, %37\l  %47 = mul i64 %46, %9\l  %48 = add i64 %47, %30\l  %49 = mul i64 %30, %14\l  %50 = sub i64 %49, %13\l  %51 = getelementptr inbounds double, double addrspace(1)* %4, i64 %39\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = getelementptr inbounds double, double addrspace(1)* %1, i64 %48\l  store double %52, double addrspace(1)* %53, align 8, !tbaa !7\l  %54 = icmp eq i64 %12, 0\l  br i1 %54, label %63, label %55\l|{<s0>T|<s1>F}}"];
	Node0x5453ec0:s0 -> Node0x5455610;
	Node0x5453ec0:s1 -> Node0x54556a0;
	Node0x54556a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%55:\l55:                                               \l  %56 = icmp eq i64 %6, 0\l  %57 = icmp eq i64 %7, 0\l  %58 = trunc i64 %10 to i32\l  %59 = and i64 %7, 1\l  %60 = icmp eq i64 %7, 1\l  %61 = and i64 %7, -2\l  %62 = icmp eq i64 %59, 0\l  br label %216\l}"];
	Node0x54556a0 -> Node0x5455c10;
	Node0x5455610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%63:\l63:                                               \l  %64 = phi double [ %52, %41 ], [ %224, %223 ]\l  %65 = tail call double @llvm.fabs.f64(double %64)\l  %66 = fmul double %65, 0x3FF71547652B82FE\l  %67 = tail call double @llvm.rint.f64(double %66)\l  %68 = tail call double @llvm.fma.f64(double %67, double 0xBFE62E42FEFA3000,\l... double %65)\l  %69 = fadd double %68, 0.000000e+00\l  %70 = fsub double %68, %69\l  %71 = fadd double %70, 0.000000e+00\l  %72 = fmul double %67, 0x3D53DE6AF278E000\l  %73 = fsub double %69, %72\l  %74 = fsub double %69, %73\l  %75 = fsub double %74, %72\l  %76 = fadd double %71, %75\l  %77 = fadd double %73, %76\l  %78 = fsub double %77, %73\l  %79 = fsub double %76, %78\l  %80 = fmul double %67, 0x3AC9CC01F97B57A0\l  %81 = fsub double %77, %80\l  %82 = fsub double %77, %81\l  %83 = fsub double %82, %80\l  %84 = fadd double %79, %83\l  %85 = fadd double %81, %84\l  %86 = fsub double %85, %81\l  %87 = fsub double %84, %86\l  %88 = tail call double @llvm.fma.f64(double %85, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %89 = tail call double @llvm.fma.f64(double %85, double %88, double\l... 0x3EC71DEE623FDE64)\l  %90 = tail call double @llvm.fma.f64(double %85, double %89, double\l... 0x3EFA01997C89E6B0)\l  %91 = tail call double @llvm.fma.f64(double %85, double %90, double\l... 0x3F2A01A014761F6E)\l  %92 = tail call double @llvm.fma.f64(double %85, double %91, double\l... 0x3F56C16C1852B7B0)\l  %93 = tail call double @llvm.fma.f64(double %85, double %92, double\l... 0x3F81111111122322)\l  %94 = tail call double @llvm.fma.f64(double %85, double %93, double\l... 0x3FA55555555502A1)\l  %95 = tail call double @llvm.fma.f64(double %85, double %94, double\l... 0x3FC5555555555511)\l  %96 = tail call double @llvm.fma.f64(double %85, double %95, double\l... 0x3FE000000000000B)\l  %97 = fmul double %85, %85\l  %98 = fneg double %97\l  %99 = tail call double @llvm.fma.f64(double %85, double %85, double %98)\l  %100 = fmul double %87, 2.000000e+00\l  %101 = tail call double @llvm.fma.f64(double %85, double %100, double %99)\l  %102 = fadd double %97, %101\l  %103 = fsub double %102, %97\l  %104 = fsub double %101, %103\l  %105 = fmul double %102, %96\l  %106 = fneg double %105\l  %107 = tail call double @llvm.fma.f64(double %102, double %96, double %106)\l  %108 = tail call double @llvm.fma.f64(double %104, double %96, double %107)\l  %109 = fadd double %105, %108\l  %110 = fsub double %109, %105\l  %111 = fsub double %108, %110\l  %112 = fadd double %85, %109\l  %113 = fsub double %112, %85\l  %114 = fsub double %109, %113\l  %115 = fadd double %87, %111\l  %116 = fadd double %115, %114\l  %117 = fadd double %112, %116\l  %118 = fsub double %117, %112\l  %119 = fsub double %116, %118\l  %120 = fadd double %117, 1.000000e+00\l  %121 = fadd double %120, -1.000000e+00\l  %122 = fsub double %117, %121\l  %123 = fadd double %119, %122\l  %124 = fadd double %120, %123\l  %125 = fsub double %124, %120\l  %126 = fsub double %123, %125\l  %127 = fptosi double %67 to i32\l  %128 = tail call double @llvm.amdgcn.ldexp.f64(double %124, i32 %127)\l  %129 = tail call double @llvm.amdgcn.ldexp.f64(double %126, i32 %127)\l  %130 = tail call double @llvm.amdgcn.rcp.f64(double %128)\l  %131 = fneg double %128\l  %132 = tail call double @llvm.fma.f64(double %131, double %130, double\l... 1.000000e+00)\l  %133 = tail call double @llvm.fma.f64(double %132, double %130, double %130)\l  %134 = tail call double @llvm.fma.f64(double %131, double %133, double\l... 1.000000e+00)\l  %135 = tail call double @llvm.fma.f64(double %134, double %133, double %133)\l  %136 = fmul double %128, %135\l  %137 = fneg double %136\l  %138 = tail call double @llvm.fma.f64(double %135, double %128, double %137)\l  %139 = tail call double @llvm.fma.f64(double %135, double %129, double %138)\l  %140 = fadd double %136, %139\l  %141 = fsub double %140, %136\l  %142 = fsub double %139, %141\l  %143 = fsub double 1.000000e+00, %140\l  %144 = fsub double 1.000000e+00, %143\l  %145 = fsub double %144, %140\l  %146 = fsub double %145, %142\l  %147 = fadd double %143, %146\l  %148 = fsub double %147, %143\l  %149 = fsub double %146, %148\l  %150 = fmul double %135, %147\l  %151 = fmul double %128, %150\l  %152 = fneg double %151\l  %153 = tail call double @llvm.fma.f64(double %150, double %128, double %152)\l  %154 = tail call double @llvm.fma.f64(double %150, double %129, double %153)\l  %155 = fadd double %151, %154\l  %156 = fsub double %155, %151\l  %157 = fsub double %154, %156\l  %158 = fsub double %147, %155\l  %159 = fsub double %147, %158\l  %160 = fsub double %159, %155\l  %161 = fadd double %149, %160\l  %162 = fsub double %161, %157\l  %163 = fadd double %158, %162\l  %164 = fmul double %135, %163\l  %165 = fadd double %135, %150\l  %166 = fsub double %165, %135\l  %167 = fsub double %150, %166\l  %168 = fadd double %167, %164\l  %169 = fadd double %165, %168\l  %170 = fsub double %169, %165\l  %171 = fsub double %168, %170\l  %172 = fsub double %128, %169\l  %173 = fsub double %128, %172\l  %174 = fsub double %173, %169\l  %175 = fadd double %129, %174\l  %176 = fsub double %175, %171\l  %177 = fadd double %172, %176\l  %178 = fsub double %177, %172\l  %179 = fsub double %176, %178\l  %180 = fadd double %128, %169\l  %181 = fsub double %180, %128\l  %182 = fsub double %169, %181\l  %183 = fadd double %129, %171\l  %184 = fadd double %183, %182\l  %185 = fadd double %180, %184\l  %186 = fsub double %185, %180\l  %187 = fsub double %184, %186\l  %188 = tail call double @llvm.amdgcn.rcp.f64(double %185)\l  %189 = fneg double %185\l  %190 = tail call double @llvm.fma.f64(double %189, double %188, double\l... 1.000000e+00)\l  %191 = tail call double @llvm.fma.f64(double %190, double %188, double %188)\l  %192 = tail call double @llvm.fma.f64(double %189, double %191, double\l... 1.000000e+00)\l  %193 = tail call double @llvm.fma.f64(double %192, double %191, double %191)\l  %194 = fmul double %177, %193\l  %195 = fmul double %185, %194\l  %196 = fneg double %195\l  %197 = tail call double @llvm.fma.f64(double %194, double %185, double %196)\l  %198 = tail call double @llvm.fma.f64(double %194, double %187, double %197)\l  %199 = fadd double %195, %198\l  %200 = fsub double %199, %195\l  %201 = fsub double %198, %200\l  %202 = fsub double %177, %199\l  %203 = fsub double %177, %202\l  %204 = fsub double %203, %199\l  %205 = fsub double %204, %201\l  %206 = fadd double %179, %205\l  %207 = fadd double %202, %206\l  %208 = fmul double %193, %207\l  %209 = fadd double %194, %208\l  %210 = fcmp ogt double %65, 1.906250e+01\l  %211 = select i1 %210, double 1.000000e+00, double %209\l  %212 = fcmp olt double %65, 0x3E40000000000000\l  %213 = select i1 %212, double %65, double %211\l  %214 = tail call double @llvm.copysign.f64(double %213, double %64)\l  %215 = getelementptr inbounds double, double addrspace(1)* %0, i64 %48\l  store double %214, double addrspace(1)* %215, align 8, !tbaa !7\l  br label %312\l}"];
	Node0x5455610 -> Node0x5453f50;
	Node0x5455c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%216:\l216:                                              \l  %217 = phi double [ %52, %55 ], [ %224, %223 ]\l  %218 = phi i64 [ 0, %55 ], [ %225, %223 ]\l  %219 = mul i64 %218, %10\l  br i1 %56, label %223, label %220\l|{<s0>T|<s1>F}}"];
	Node0x5455c10:s0 -> Node0x5455d00;
	Node0x5455c10:s1 -> Node0x545e6a0;
	Node0x545e6a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%220:\l220:                                              \l  %221 = add i64 %218, %45\l  %222 = mul i64 %221, %6\l  br label %227\l}"];
	Node0x545e6a0 -> Node0x545e900;
	Node0x5455d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%223:\l223:                                              \l  %224 = phi double [ %217, %216 ], [ %263, %262 ]\l  %225 = add nuw i64 %218, 1\l  %226 = icmp eq i64 %225, %12\l  br i1 %226, label %63, label %216, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5455d00:s0 -> Node0x5455610;
	Node0x5455d00:s1 -> Node0x5455c10;
	Node0x545e900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%227:\l227:                                              \l  %228 = phi double [ %217, %220 ], [ %263, %262 ]\l  %229 = phi i64 [ 0, %220 ], [ %264, %262 ]\l  %230 = add i64 %229, %44\l  %231 = trunc i64 %230 to i32\l  br i1 %57, label %262, label %232\l|{<s0>T|<s1>F}}"];
	Node0x545e900:s0 -> Node0x545e9f0;
	Node0x545e900:s1 -> Node0x545f020;
	Node0x545f020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%232:\l232:                                              \l  %233 = icmp sgt i32 %231, -1\l  %234 = icmp slt i32 %231, %58\l  %235 = and i64 %230, 4294967295\l  %236 = add i64 %235, %219\l  %237 = mul i64 %236, %11\l  %238 = add i64 %229, %222\l  %239 = mul i64 %238, %7\l  br i1 %60, label %240, label %266\l|{<s0>T|<s1>F}}"];
	Node0x545f020:s0 -> Node0x545f580;
	Node0x545f020:s1 -> Node0x545f5d0;
	Node0x545f580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%240:\l240:                                              \l  %241 = phi double [ undef, %232 ], [ %308, %307 ]\l  %242 = phi double [ %228, %232 ], [ %308, %307 ]\l  %243 = phi i64 [ 0, %232 ], [ %309, %307 ]\l  br i1 %62, label %262, label %244\l|{<s0>T|<s1>F}}"];
	Node0x545f580:s0 -> Node0x545e9f0;
	Node0x545f580:s1 -> Node0x545fe70;
	Node0x545fe70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%244:\l244:                                              \l  %245 = add i64 %243, %50\l  %246 = trunc i64 %245 to i32\l  br i1 %233, label %247, label %262\l|{<s0>T|<s1>F}}"];
	Node0x545fe70:s0 -> Node0x54600b0;
	Node0x545fe70:s1 -> Node0x545e9f0;
	Node0x54600b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%247:\l247:                                              \l  %248 = icmp sgt i32 %246, -1\l  %249 = select i1 %234, i1 %248, i1 false\l  %250 = icmp slt i32 %246, %58\l  %251 = select i1 %249, i1 %250, i1 false\l  br i1 %251, label %252, label %262\l|{<s0>T|<s1>F}}"];
	Node0x54600b0:s0 -> Node0x5460460;
	Node0x54600b0:s1 -> Node0x545e9f0;
	Node0x5460460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%252:\l252:                                              \l  %253 = and i64 %245, 4294967295\l  %254 = add i64 %253, %237\l  %255 = add i64 %243, %239\l  %256 = getelementptr inbounds double, double addrspace(1)* %3, i64 %255\l  %257 = load double, double addrspace(1)* %256, align 8, !tbaa !7\l  %258 = getelementptr inbounds double, double addrspace(1)* %2, i64 %254\l  %259 = load double, double addrspace(1)* %258, align 8, !tbaa !7\l  %260 = fmul contract double %257, %259\l  %261 = fadd contract double %242, %260\l  store double %261, double addrspace(1)* %53, align 8, !tbaa !7\l  br label %262\l}"];
	Node0x5460460 -> Node0x545e9f0;
	Node0x545e9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%262:\l262:                                              \l  %263 = phi double [ %228, %227 ], [ %241, %240 ], [ %261, %252 ], [ %242,\l... %247 ], [ %242, %244 ]\l  %264 = add nuw i64 %229, 1\l  %265 = icmp eq i64 %264, %6\l  br i1 %265, label %223, label %227, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x545e9f0:s0 -> Node0x5455d00;
	Node0x545e9f0:s1 -> Node0x545e900;
	Node0x545f5d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%266:\l266:                                              \l  %267 = phi double [ %308, %307 ], [ %228, %232 ]\l  %268 = phi i64 [ %309, %307 ], [ 0, %232 ]\l  %269 = phi i64 [ %310, %307 ], [ 0, %232 ]\l  %270 = add i64 %268, %50\l  %271 = trunc i64 %270 to i32\l  br i1 %233, label %272, label %287\l|{<s0>T|<s1>F}}"];
	Node0x545f5d0:s0 -> Node0x5461a20;
	Node0x545f5d0:s1 -> Node0x5461a70;
	Node0x5461a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%272:\l272:                                              \l  %273 = icmp sgt i32 %271, -1\l  %274 = select i1 %234, i1 %273, i1 false\l  %275 = icmp slt i32 %271, %58\l  %276 = select i1 %274, i1 %275, i1 false\l  br i1 %276, label %277, label %287\l|{<s0>T|<s1>F}}"];
	Node0x5461a20:s0 -> Node0x5461e30;
	Node0x5461a20:s1 -> Node0x5461a70;
	Node0x5461e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%277:\l277:                                              \l  %278 = and i64 %270, 4294967295\l  %279 = add i64 %278, %237\l  %280 = add i64 %268, %239\l  %281 = getelementptr inbounds double, double addrspace(1)* %3, i64 %280\l  %282 = load double, double addrspace(1)* %281, align 8, !tbaa !7\l  %283 = getelementptr inbounds double, double addrspace(1)* %2, i64 %279\l  %284 = load double, double addrspace(1)* %283, align 8, !tbaa !7\l  %285 = fmul contract double %282, %284\l  %286 = fadd contract double %267, %285\l  store double %286, double addrspace(1)* %53, align 8, !tbaa !7\l  br label %287\l}"];
	Node0x5461e30 -> Node0x5461a70;
	Node0x5461a70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%287:\l287:                                              \l  %288 = phi double [ %286, %277 ], [ %267, %272 ], [ %267, %266 ]\l  %289 = or i64 %268, 1\l  %290 = add i64 %289, %50\l  %291 = trunc i64 %290 to i32\l  br i1 %233, label %292, label %307\l|{<s0>T|<s1>F}}"];
	Node0x5461a70:s0 -> Node0x5462780;
	Node0x5461a70:s1 -> Node0x545fb60;
	Node0x5462780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%292:\l292:                                              \l  %293 = icmp sgt i32 %291, -1\l  %294 = select i1 %234, i1 %293, i1 false\l  %295 = icmp slt i32 %291, %58\l  %296 = select i1 %294, i1 %295, i1 false\l  br i1 %296, label %297, label %307\l|{<s0>T|<s1>F}}"];
	Node0x5462780:s0 -> Node0x5462b00;
	Node0x5462780:s1 -> Node0x545fb60;
	Node0x5462b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%297:\l297:                                              \l  %298 = and i64 %290, 4294967295\l  %299 = add i64 %298, %237\l  %300 = add i64 %289, %239\l  %301 = getelementptr inbounds double, double addrspace(1)* %3, i64 %300\l  %302 = load double, double addrspace(1)* %301, align 8, !tbaa !7\l  %303 = getelementptr inbounds double, double addrspace(1)* %2, i64 %299\l  %304 = load double, double addrspace(1)* %303, align 8, !tbaa !7\l  %305 = fmul contract double %302, %304\l  %306 = fadd contract double %288, %305\l  store double %306, double addrspace(1)* %53, align 8, !tbaa !7\l  br label %307\l}"];
	Node0x5462b00 -> Node0x545fb60;
	Node0x545fb60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%307:\l307:                                              \l  %308 = phi double [ %306, %297 ], [ %288, %292 ], [ %288, %287 ]\l  %309 = add nuw i64 %268, 2\l  %310 = add i64 %269, 2\l  %311 = icmp eq i64 %310, %61\l  br i1 %311, label %240, label %266, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x545fb60:s0 -> Node0x545f580;
	Node0x545fb60:s1 -> Node0x545f5d0;
	Node0x5453f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%312:\l312:                                              \l  ret void\l}"];
}
