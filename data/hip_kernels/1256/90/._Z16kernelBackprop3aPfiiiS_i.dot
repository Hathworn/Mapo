digraph "CFG for '_Z16kernelBackprop3aPfiiiS_i' function" {
	label="CFG for '_Z16kernelBackprop3aPfiiiS_i' function";

	Node0x46ed830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = add i32 %7, %1\l  %9 = zext i32 %8 to i64\l  %10 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9\l  store float 0.000000e+00, float addrspace(1)* %10, align 4, !tbaa !5\l  %11 = icmp sgt i32 %2, 0\l  br i1 %11, label %12, label %147\l|{<s0>T|<s1>F}}"];
	Node0x46ed830:s0 -> Node0x46efa40;
	Node0x46ed830:s1 -> Node0x46efad0;
	Node0x46efa40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%12:\l12:                                               \l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !9, !invariant.load\l... !10\l  %17 = zext i16 %16 to i32\l  %18 = add i32 %7, %5\l  %19 = and i32 %2, 7\l  %20 = icmp ult i32 %2, 8\l  br i1 %20, label %125, label %21\l|{<s0>T|<s1>F}}"];
	Node0x46efa40:s0 -> Node0x46f05c0;
	Node0x46efa40:s1 -> Node0x46f0650;
	Node0x46f0650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %2, -8\l  br label %23\l}"];
	Node0x46f0650 -> Node0x46f0850;
	Node0x46f0850 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%23:\l23:                                               \l  %24 = phi float [ 0.000000e+00, %21 ], [ %121, %23 ]\l  %25 = phi i32 [ 0, %21 ], [ %122, %23 ]\l  %26 = phi i32 [ 0, %21 ], [ %123, %23 ]\l  %27 = add nsw i32 %25, %3\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !5\l  %31 = mul i32 %25, %17\l  %32 = add i32 %18, %31\l  %33 = zext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %4, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !5\l  %36 = fmul contract float %30, %35\l  %37 = fadd contract float %24, %36\l  store float %37, float addrspace(1)* %10, align 4, !tbaa !5\l  %38 = or i32 %25, 1\l  %39 = add nsw i32 %38, %3\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !5\l  %43 = mul i32 %38, %17\l  %44 = add i32 %18, %43\l  %45 = zext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %4, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !5\l  %48 = fmul contract float %42, %47\l  %49 = fadd contract float %37, %48\l  store float %49, float addrspace(1)* %10, align 4, !tbaa !5\l  %50 = or i32 %25, 2\l  %51 = add nsw i32 %50, %3\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !5\l  %55 = mul i32 %50, %17\l  %56 = add i32 %18, %55\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !5\l  %60 = fmul contract float %54, %59\l  %61 = fadd contract float %49, %60\l  store float %61, float addrspace(1)* %10, align 4, !tbaa !5\l  %62 = or i32 %25, 3\l  %63 = add nsw i32 %62, %3\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !5\l  %67 = mul i32 %62, %17\l  %68 = add i32 %18, %67\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %4, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !5\l  %72 = fmul contract float %66, %71\l  %73 = fadd contract float %61, %72\l  store float %73, float addrspace(1)* %10, align 4, !tbaa !5\l  %74 = or i32 %25, 4\l  %75 = add nsw i32 %74, %3\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !5\l  %79 = mul i32 %74, %17\l  %80 = add i32 %18, %79\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %4, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5\l  %84 = fmul contract float %78, %83\l  %85 = fadd contract float %73, %84\l  store float %85, float addrspace(1)* %10, align 4, !tbaa !5\l  %86 = or i32 %25, 5\l  %87 = add nsw i32 %86, %3\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !5\l  %91 = mul i32 %86, %17\l  %92 = add i32 %18, %91\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %4, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5\l  %96 = fmul contract float %90, %95\l  %97 = fadd contract float %85, %96\l  store float %97, float addrspace(1)* %10, align 4, !tbaa !5\l  %98 = or i32 %25, 6\l  %99 = add nsw i32 %98, %3\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !5\l  %103 = mul i32 %98, %17\l  %104 = add i32 %18, %103\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %4, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !5\l  %108 = fmul contract float %102, %107\l  %109 = fadd contract float %97, %108\l  store float %109, float addrspace(1)* %10, align 4, !tbaa !5\l  %110 = or i32 %25, 7\l  %111 = add nsw i32 %110, %3\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !5\l  %115 = mul i32 %110, %17\l  %116 = add i32 %18, %115\l  %117 = zext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %4, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !5\l  %120 = fmul contract float %114, %119\l  %121 = fadd contract float %109, %120\l  store float %121, float addrspace(1)* %10, align 4, !tbaa !5\l  %122 = add nuw nsw i32 %25, 8\l  %123 = add i32 %26, 8\l  %124 = icmp eq i32 %123, %22\l  br i1 %124, label %125, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x46f0850:s0 -> Node0x46f05c0;
	Node0x46f0850:s1 -> Node0x46f0850;
	Node0x46f05c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%125:\l125:                                              \l  %126 = phi float [ 0.000000e+00, %12 ], [ %121, %23 ]\l  %127 = phi i32 [ 0, %12 ], [ %122, %23 ]\l  %128 = icmp eq i32 %19, 0\l  br i1 %128, label %147, label %129\l|{<s0>T|<s1>F}}"];
	Node0x46f05c0:s0 -> Node0x46efad0;
	Node0x46f05c0:s1 -> Node0x46f29a0;
	Node0x46f29a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%129:\l129:                                              \l  %130 = phi float [ %143, %129 ], [ %126, %125 ]\l  %131 = phi i32 [ %144, %129 ], [ %127, %125 ]\l  %132 = phi i32 [ %145, %129 ], [ 0, %125 ]\l  %133 = add nsw i32 %131, %3\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %0, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !5\l  %137 = mul i32 %131, %17\l  %138 = add i32 %18, %137\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %4, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !5\l  %142 = fmul contract float %136, %141\l  %143 = fadd contract float %130, %142\l  store float %143, float addrspace(1)* %10, align 4, !tbaa !5\l  %144 = add nuw nsw i32 %131, 1\l  %145 = add i32 %132, 1\l  %146 = icmp eq i32 %145, %19\l  br i1 %146, label %147, label %129, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x46f29a0:s0 -> Node0x46efad0;
	Node0x46f29a0:s1 -> Node0x46f29a0;
	Node0x46efad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%147:\l147:                                              \l  ret void\l}"];
}
