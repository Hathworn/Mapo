digraph "CFG for '_Z22softmax_kernel_new_apiPfiiiiiifS_' function" {
	label="CFG for '_Z22softmax_kernel_new_apiPfiiiiiifS_' function";

	Node0x54d39f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !4\l  %16 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !13, !invariant.load\l... !14\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %15, %19\l  %21 = mul i32 %20, %19\l  %22 = icmp ugt i32 %15, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  %26 = add i32 %25, %10\l  %27 = mul i32 %26, %19\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = mul nsw i32 %4, %2\l  %31 = icmp slt i32 %29, %30\l  br i1 %31, label %32, label %288\l|{<s0>T|<s1>F}}"];
	Node0x54d39f0:s0 -> Node0x54d6e20;
	Node0x54d39f0:s1 -> Node0x54d6eb0;
	Node0x54d6e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = freeze i32 %29\l  %34 = freeze i32 %4\l  %35 = sdiv i32 %33, %34\l  %36 = mul i32 %35, %34\l  %37 = sub i32 %33, %36\l  %38 = mul nsw i32 %35, %3\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = mul nsw i32 %37, %5\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %40, i64 %42\l  %44 = getelementptr inbounds float, float addrspace(1)* %8, i64 %39\l  %45 = getelementptr inbounds float, float addrspace(1)* %44, i64 %42\l  %46 = icmp sgt i32 %1, 0\l  br i1 %46, label %47, label %72\l|{<s0>T|<s1>F}}"];
	Node0x54d6e20:s0 -> Node0x54d78c0;
	Node0x54d6e20:s1 -> Node0x54d7910;
	Node0x54d78c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%47:\l47:                                               \l  %48 = and i32 %1, 7\l  %49 = icmp ult i32 %1, 8\l  br i1 %49, label %52, label %50\l|{<s0>T|<s1>F}}"];
	Node0x54d78c0:s0 -> Node0x54d7ba0;
	Node0x54d78c0:s1 -> Node0x54d7bf0;
	Node0x54d7bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%50:\l50:                                               \l  %51 = and i32 %1, -8\l  br label %80\l}"];
	Node0x54d7bf0 -> Node0x54d7df0;
	Node0x54d7ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%52:\l52:                                               \l  %53 = phi float [ undef, %47 ], [ %154, %80 ]\l  %54 = phi i32 [ 0, %47 ], [ %155, %80 ]\l  %55 = phi float [ 0xFFF0000000000000, %47 ], [ %154, %80 ]\l  %56 = icmp eq i32 %48, 0\l  br i1 %56, label %72, label %57\l|{<s0>T|<s1>F}}"];
	Node0x54d7ba0:s0 -> Node0x54d7910;
	Node0x54d7ba0:s1 -> Node0x54d9060;
	Node0x54d9060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%57:\l57:                                               \l  %58 = phi i32 [ %69, %57 ], [ %54, %52 ]\l  %59 = phi float [ %68, %57 ], [ %55, %52 ]\l  %60 = phi i32 [ %70, %57 ], [ 0, %52 ]\l  %61 = mul nsw i32 %58, %6\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %43, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %65 = fptosi float %64 to i32\l  %66 = sitofp i32 %65 to float\l  %67 = fcmp contract olt float %59, %66\l  %68 = select contract i1 %67, float %66, float %59\l  %69 = add nuw nsw i32 %58, 1\l  %70 = add i32 %60, 1\l  %71 = icmp eq i32 %70, %48\l  br i1 %71, label %72, label %57, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x54d9060:s0 -> Node0x54d7910;
	Node0x54d9060:s1 -> Node0x54d9060;
	Node0x54d7910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%72:\l72:                                               \l  %73 = phi float [ 0xFFF0000000000000, %32 ], [ %53, %52 ], [ %68, %57 ]\l  br i1 %46, label %74, label %186\l|{<s0>T|<s1>F}}"];
	Node0x54d7910:s0 -> Node0x54da6b0;
	Node0x54d7910:s1 -> Node0x54da700;
	Node0x54da6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%74:\l74:                                               \l  %75 = fdiv contract float %73, %7\l  %76 = and i32 %1, 1\l  %77 = icmp eq i32 %1, 1\l  br i1 %77, label %158, label %78\l|{<s0>T|<s1>F}}"];
	Node0x54da6b0:s0 -> Node0x54da9f0;
	Node0x54da6b0:s1 -> Node0x54daa40;
	Node0x54daa40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%78:\l78:                                               \l  %79 = and i32 %1, -2\l  br label %193\l}"];
	Node0x54daa40 -> Node0x54dac10;
	Node0x54d7df0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%80:\l80:                                               \l  %81 = phi i32 [ 0, %50 ], [ %155, %80 ]\l  %82 = phi float [ 0xFFF0000000000000, %50 ], [ %154, %80 ]\l  %83 = phi i32 [ 0, %50 ], [ %156, %80 ]\l  %84 = mul nsw i32 %81, %6\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %43, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %88 = fptosi float %87 to i32\l  %89 = sitofp i32 %88 to float\l  %90 = fcmp contract olt float %82, %89\l  %91 = select contract i1 %90, float %89, float %82\l  %92 = or i32 %81, 1\l  %93 = mul nsw i32 %92, %6\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %43, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %97 = fptosi float %96 to i32\l  %98 = sitofp i32 %97 to float\l  %99 = fcmp contract olt float %91, %98\l  %100 = select contract i1 %99, float %98, float %91\l  %101 = or i32 %81, 2\l  %102 = mul nsw i32 %101, %6\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %43, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %106 = fptosi float %105 to i32\l  %107 = sitofp i32 %106 to float\l  %108 = fcmp contract olt float %100, %107\l  %109 = select contract i1 %108, float %107, float %100\l  %110 = or i32 %81, 3\l  %111 = mul nsw i32 %110, %6\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %43, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %115 = fptosi float %114 to i32\l  %116 = sitofp i32 %115 to float\l  %117 = fcmp contract olt float %109, %116\l  %118 = select contract i1 %117, float %116, float %109\l  %119 = or i32 %81, 4\l  %120 = mul nsw i32 %119, %6\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %43, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %124 = fptosi float %123 to i32\l  %125 = sitofp i32 %124 to float\l  %126 = fcmp contract olt float %118, %125\l  %127 = select contract i1 %126, float %125, float %118\l  %128 = or i32 %81, 5\l  %129 = mul nsw i32 %128, %6\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %43, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %133 = fptosi float %132 to i32\l  %134 = sitofp i32 %133 to float\l  %135 = fcmp contract olt float %127, %134\l  %136 = select contract i1 %135, float %134, float %127\l  %137 = or i32 %81, 6\l  %138 = mul nsw i32 %137, %6\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %43, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %142 = fptosi float %141 to i32\l  %143 = sitofp i32 %142 to float\l  %144 = fcmp contract olt float %136, %143\l  %145 = select contract i1 %144, float %143, float %136\l  %146 = or i32 %81, 7\l  %147 = mul nsw i32 %146, %6\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %43, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %151 = fptosi float %150 to i32\l  %152 = sitofp i32 %151 to float\l  %153 = fcmp contract olt float %145, %152\l  %154 = select contract i1 %153, float %152, float %145\l  %155 = add nuw nsw i32 %81, 8\l  %156 = add i32 %83, 8\l  %157 = icmp eq i32 %156, %51\l  br i1 %157, label %52, label %80, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x54d7df0:s0 -> Node0x54d7ba0;
	Node0x54d7df0:s1 -> Node0x54d7df0;
	Node0x54da9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%158:\l158:                                              \l  %159 = phi float [ undef, %74 ], [ %240, %193 ]\l  %160 = phi i32 [ 0, %74 ], [ %242, %193 ]\l  %161 = phi float [ 0.000000e+00, %74 ], [ %240, %193 ]\l  %162 = icmp eq i32 %76, 0\l  br i1 %162, label %186, label %163\l|{<s0>T|<s1>F}}"];
	Node0x54da9f0:s0 -> Node0x54da700;
	Node0x54da9f0:s1 -> Node0x54de730;
	Node0x54de730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%163:\l163:                                              \l  %164 = mul nsw i32 %160, %6\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %43, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !16\l  %168 = fdiv contract float %167, %7\l  %169 = fsub contract float %168, %75\l  %170 = fmul float %169, 0x3FF7154760000000\l  %171 = tail call float @llvm.rint.f32(float %170)\l  %172 = fcmp ogt float %169, 0x40562E4300000000\l  %173 = fcmp olt float %169, 0xC059D1DA00000000\l  %174 = fneg float %170\l  %175 = tail call float @llvm.fma.f32(float %169, float 0x3FF7154760000000,\l... float %174)\l  %176 = tail call float @llvm.fma.f32(float %169, float 0x3E54AE0BE0000000,\l... float %175)\l  %177 = fsub float %170, %171\l  %178 = fadd float %176, %177\l  %179 = tail call float @llvm.exp2.f32(float %178)\l  %180 = fptosi float %171 to i32\l  %181 = tail call float @llvm.amdgcn.ldexp.f32(float %179, i32 %180)\l  %182 = select i1 %173, float 0.000000e+00, float %181\l  %183 = select i1 %172, float 0x7FF0000000000000, float %182\l  %184 = fadd contract float %161, %183\l  %185 = getelementptr inbounds float, float addrspace(1)* %45, i64 %165\l  store float %183, float addrspace(1)* %185, align 4, !tbaa !16\l  br label %186\l}"];
	Node0x54de730 -> Node0x54da700;
	Node0x54da700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%186:\l186:                                              \l  %187 = phi float [ 0.000000e+00, %72 ], [ %159, %158 ], [ %184, %163 ]\l  br i1 %46, label %188, label %288\l|{<s0>T|<s1>F}}"];
	Node0x54da700:s0 -> Node0x54dfee0;
	Node0x54da700:s1 -> Node0x54d6eb0;
	Node0x54dfee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%188:\l188:                                              \l  %189 = and i32 %1, 3\l  %190 = icmp ult i32 %1, 4\l  br i1 %190, label %274, label %191\l|{<s0>T|<s1>F}}"];
	Node0x54dfee0:s0 -> Node0x54e0100;
	Node0x54dfee0:s1 -> Node0x54e0150;
	Node0x54e0150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%191:\l191:                                              \l  %192 = and i32 %1, -4\l  br label %245\l}"];
	Node0x54e0150 -> Node0x54e0320;
	Node0x54dac10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%193:\l193:                                              \l  %194 = phi i32 [ 0, %78 ], [ %242, %193 ]\l  %195 = phi float [ 0.000000e+00, %78 ], [ %240, %193 ]\l  %196 = phi i32 [ 0, %78 ], [ %243, %193 ]\l  %197 = mul nsw i32 %194, %6\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %43, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !16\l  %201 = fdiv contract float %200, %7\l  %202 = fsub contract float %201, %75\l  %203 = fmul float %202, 0x3FF7154760000000\l  %204 = tail call float @llvm.rint.f32(float %203)\l  %205 = fcmp ogt float %202, 0x40562E4300000000\l  %206 = fcmp olt float %202, 0xC059D1DA00000000\l  %207 = fneg float %203\l  %208 = tail call float @llvm.fma.f32(float %202, float 0x3FF7154760000000,\l... float %207)\l  %209 = tail call float @llvm.fma.f32(float %202, float 0x3E54AE0BE0000000,\l... float %208)\l  %210 = fsub float %203, %204\l  %211 = fadd float %209, %210\l  %212 = tail call float @llvm.exp2.f32(float %211)\l  %213 = fptosi float %204 to i32\l  %214 = tail call float @llvm.amdgcn.ldexp.f32(float %212, i32 %213)\l  %215 = select i1 %206, float 0.000000e+00, float %214\l  %216 = select i1 %205, float 0x7FF0000000000000, float %215\l  %217 = fadd contract float %195, %216\l  %218 = getelementptr inbounds float, float addrspace(1)* %45, i64 %198\l  store float %216, float addrspace(1)* %218, align 4, !tbaa !16\l  %219 = or i32 %194, 1\l  %220 = mul nsw i32 %219, %6\l  %221 = sext i32 %220 to i64\l  %222 = getelementptr inbounds float, float addrspace(1)* %43, i64 %221\l  %223 = load float, float addrspace(1)* %222, align 4, !tbaa !16\l  %224 = fdiv contract float %223, %7\l  %225 = fsub contract float %224, %75\l  %226 = fmul float %225, 0x3FF7154760000000\l  %227 = tail call float @llvm.rint.f32(float %226)\l  %228 = fcmp ogt float %225, 0x40562E4300000000\l  %229 = fcmp olt float %225, 0xC059D1DA00000000\l  %230 = fneg float %226\l  %231 = tail call float @llvm.fma.f32(float %225, float 0x3FF7154760000000,\l... float %230)\l  %232 = tail call float @llvm.fma.f32(float %225, float 0x3E54AE0BE0000000,\l... float %231)\l  %233 = fsub float %226, %227\l  %234 = fadd float %232, %233\l  %235 = tail call float @llvm.exp2.f32(float %234)\l  %236 = fptosi float %227 to i32\l  %237 = tail call float @llvm.amdgcn.ldexp.f32(float %235, i32 %236)\l  %238 = select i1 %229, float 0.000000e+00, float %237\l  %239 = select i1 %228, float 0x7FF0000000000000, float %238\l  %240 = fadd contract float %217, %239\l  %241 = getelementptr inbounds float, float addrspace(1)* %45, i64 %221\l  store float %239, float addrspace(1)* %241, align 4, !tbaa !16\l  %242 = add nuw nsw i32 %194, 2\l  %243 = add i32 %196, 2\l  %244 = icmp eq i32 %243, %79\l  br i1 %244, label %158, label %193, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x54dac10:s0 -> Node0x54da9f0;
	Node0x54dac10:s1 -> Node0x54dac10;
	Node0x54e0320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%245:\l245:                                              \l  %246 = phi i32 [ 0, %191 ], [ %271, %245 ]\l  %247 = phi i32 [ 0, %191 ], [ %272, %245 ]\l  %248 = mul nsw i32 %246, %6\l  %249 = sext i32 %248 to i64\l  %250 = getelementptr inbounds float, float addrspace(1)* %45, i64 %249\l  %251 = load float, float addrspace(1)* %250, align 4, !tbaa !16\l  %252 = fdiv contract float %251, %187\l  store float %252, float addrspace(1)* %250, align 4, !tbaa !16\l  %253 = or i32 %246, 1\l  %254 = mul nsw i32 %253, %6\l  %255 = sext i32 %254 to i64\l  %256 = getelementptr inbounds float, float addrspace(1)* %45, i64 %255\l  %257 = load float, float addrspace(1)* %256, align 4, !tbaa !16\l  %258 = fdiv contract float %257, %187\l  store float %258, float addrspace(1)* %256, align 4, !tbaa !16\l  %259 = or i32 %246, 2\l  %260 = mul nsw i32 %259, %6\l  %261 = sext i32 %260 to i64\l  %262 = getelementptr inbounds float, float addrspace(1)* %45, i64 %261\l  %263 = load float, float addrspace(1)* %262, align 4, !tbaa !16\l  %264 = fdiv contract float %263, %187\l  store float %264, float addrspace(1)* %262, align 4, !tbaa !16\l  %265 = or i32 %246, 3\l  %266 = mul nsw i32 %265, %6\l  %267 = sext i32 %266 to i64\l  %268 = getelementptr inbounds float, float addrspace(1)* %45, i64 %267\l  %269 = load float, float addrspace(1)* %268, align 4, !tbaa !16\l  %270 = fdiv contract float %269, %187\l  store float %270, float addrspace(1)* %268, align 4, !tbaa !16\l  %271 = add nuw nsw i32 %246, 4\l  %272 = add i32 %247, 4\l  %273 = icmp eq i32 %272, %192\l  br i1 %273, label %274, label %245, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x54e0320:s0 -> Node0x54e0100;
	Node0x54e0320:s1 -> Node0x54e0320;
	Node0x54e0100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%274:\l274:                                              \l  %275 = phi i32 [ 0, %188 ], [ %271, %245 ]\l  %276 = icmp eq i32 %189, 0\l  br i1 %276, label %288, label %277\l|{<s0>T|<s1>F}}"];
	Node0x54e0100:s0 -> Node0x54d6eb0;
	Node0x54e0100:s1 -> Node0x54e4530;
	Node0x54e4530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%277:\l277:                                              \l  %278 = phi i32 [ %285, %277 ], [ %275, %274 ]\l  %279 = phi i32 [ %286, %277 ], [ 0, %274 ]\l  %280 = mul nsw i32 %278, %6\l  %281 = sext i32 %280 to i64\l  %282 = getelementptr inbounds float, float addrspace(1)* %45, i64 %281\l  %283 = load float, float addrspace(1)* %282, align 4, !tbaa !16\l  %284 = fdiv contract float %283, %187\l  store float %284, float addrspace(1)* %282, align 4, !tbaa !16\l  %285 = add nuw nsw i32 %278, 1\l  %286 = add i32 %279, 1\l  %287 = icmp eq i32 %286, %189\l  br i1 %287, label %288, label %277, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x54e4530:s0 -> Node0x54d6eb0;
	Node0x54e4530:s1 -> Node0x54e4530;
	Node0x54d6eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%288:\l288:                                              \l  ret void\l}"];
}
