digraph "CFG for '_Z18kernel_dot_productPKdS0_iPd' function" {
	label="CFG for '_Z18kernel_dot_productPKdS0_iPd' function";

	Node0x5a0e470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = zext i32 %5 to i64\l  %7 = getelementptr inbounds double, double addrspace(1)* %0, i64 %6\l  %8 = load double, double addrspace(1)* %7, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %9 = getelementptr inbounds double, double addrspace(1)* %1, i64 %6\l  %10 = load double, double addrspace(1)* %9, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %11 = fmul contract double %8, %10\l  %12 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %5\l  store double %11, double addrspace(3)* %12, align 8, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %13 = icmp eq i32 %5, 0\l  br i1 %13, label %14, label %76\l|{<s0>T|<s1>F}}"];
	Node0x5a0e470:s0 -> Node0x5a10ff0;
	Node0x5a0e470:s1 -> Node0x5a11080;
	Node0x5a10ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%14:\l14:                                               \l  %15 = icmp sgt i32 %2, 0\l  br i1 %15, label %16, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5a10ff0:s0 -> Node0x5a11250;
	Node0x5a10ff0:s1 -> Node0x5a112a0;
	Node0x5a11250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%16:\l16:                                               \l  %17 = and i32 %2, 7\l  %18 = icmp ult i32 %2, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5a11250:s0 -> Node0x5a115b0;
	Node0x5a11250:s1 -> Node0x5a11600;
	Node0x5a11600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %2, -8\l  br label %38\l}"];
	Node0x5a11600 -> Node0x5a11800;
	Node0x5a115b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi double [ undef, %16 ], [ %72, %38 ]\l  %23 = phi i32 [ 0, %16 ], [ %73, %38 ]\l  %24 = phi double [ 0.000000e+00, %16 ], [ %72, %38 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %36, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5a115b0:s0 -> Node0x5a112a0;
	Node0x5a115b0:s1 -> Node0x5a12a70;
	Node0x5a12a70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %33, %26 ], [ %23, %21 ]\l  %28 = phi double [ %32, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %34, %26 ], [ 0, %21 ]\l  %30 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %27\l  %31 = load double, double addrspace(3)* %30, align 8, !tbaa !5\l  %32 = fadd contract double %28, %31\l  %33 = add nuw nsw i32 %27, 1\l  %34 = add i32 %29, 1\l  %35 = icmp eq i32 %34, %17\l  br i1 %35, label %36, label %26, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5a12a70:s0 -> Node0x5a112a0;
	Node0x5a12a70:s1 -> Node0x5a12a70;
	Node0x5a112a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%36:\l36:                                               \l  %37 = phi double [ 0.000000e+00, %14 ], [ %22, %21 ], [ %32, %26 ]\l  store double %37, double addrspace(1)* %3, align 8, !tbaa !5\l  br label %76\l}"];
	Node0x5a112a0 -> Node0x5a11080;
	Node0x5a11800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%38:\l38:                                               \l  %39 = phi i32 [ 0, %19 ], [ %73, %38 ]\l  %40 = phi double [ 0.000000e+00, %19 ], [ %72, %38 ]\l  %41 = phi i32 [ 0, %19 ], [ %74, %38 ]\l  %42 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %39\l  %43 = load double, double addrspace(3)* %42, align 8, !tbaa !5\l  %44 = fadd contract double %40, %43\l  %45 = or i32 %39, 1\l  %46 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %45\l  %47 = load double, double addrspace(3)* %46, align 8, !tbaa !5\l  %48 = fadd contract double %44, %47\l  %49 = or i32 %39, 2\l  %50 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %49\l  %51 = load double, double addrspace(3)* %50, align 8, !tbaa !5\l  %52 = fadd contract double %48, %51\l  %53 = or i32 %39, 3\l  %54 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %53\l  %55 = load double, double addrspace(3)* %54, align 8, !tbaa !5\l  %56 = fadd contract double %52, %55\l  %57 = or i32 %39, 4\l  %58 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %57\l  %59 = load double, double addrspace(3)* %58, align 8, !tbaa !5\l  %60 = fadd contract double %56, %59\l  %61 = or i32 %39, 5\l  %62 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %61\l  %63 = load double, double addrspace(3)* %62, align 8, !tbaa !5\l  %64 = fadd contract double %60, %63\l  %65 = or i32 %39, 6\l  %66 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %65\l  %67 = load double, double addrspace(3)* %66, align 8, !tbaa !5\l  %68 = fadd contract double %64, %67\l  %69 = or i32 %39, 7\l  %70 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)*\l... @products, i32 0, i32 %69\l  %71 = load double, double addrspace(3)* %70, align 8, !tbaa !5\l  %72 = fadd contract double %68, %71\l  %73 = add nuw nsw i32 %39, 8\l  %74 = add nuw i32 %41, 8\l  %75 = icmp eq i32 %74, %20\l  br i1 %75, label %21, label %38, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5a11800:s0 -> Node0x5a115b0;
	Node0x5a11800:s1 -> Node0x5a11800;
	Node0x5a11080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%76:\l76:                                               \l  ret void\l}"];
}
