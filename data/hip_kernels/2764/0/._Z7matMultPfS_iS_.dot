digraph "CFG for '_Z7matMultPfS_iS_' function" {
	label="CFG for '_Z7matMultPfS_iS_' function";

	Node0x4a21820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %9 = shl nsw i32 %2, 5\l  %10 = mul nsw i32 %9, %6\l  %11 = mul nsw i32 %8, %2\l  %12 = add nsw i32 %10, %11\l  %13 = shl nsw i32 %5, 5\l  %14 = add i32 %13, %7\l  %15 = icmp sgt i32 %2, 0\l  br i1 %15, label %16, label %44\l|{<s0>T|<s1>F}}"];
	Node0x4a21820:s0 -> Node0x4a23ca0;
	Node0x4a21820:s1 -> Node0x4a23d30;
	Node0x4a23ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%16:\l16:                                               \l  %17 = and i32 %2, 7\l  %18 = icmp ult i32 %2, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x4a23ca0:s0 -> Node0x4a240a0;
	Node0x4a23ca0:s1 -> Node0x4a240f0;
	Node0x4a240f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %2, -8\l  br label %50\l}"];
	Node0x4a240f0 -> Node0x4a242c0;
	Node0x4a240a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %16 ], [ %148, %50 ]\l  %23 = phi float [ 0.000000e+00, %16 ], [ %148, %50 ]\l  %24 = phi i32 [ 0, %16 ], [ %149, %50 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %44, label %26\l|{<s0>T|<s1>F}}"];
	Node0x4a240a0:s0 -> Node0x4a23d30;
	Node0x4a240a0:s1 -> Node0x4a25530;
	Node0x4a25530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi float [ %40, %26 ], [ %23, %21 ]\l  %28 = phi i32 [ %41, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %42, %26 ], [ 0, %21 ]\l  %30 = add nsw i32 %12, %28\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %34 = mul nsw i32 %28, %2\l  %35 = add nsw i32 %14, %34\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %39 = fmul contract float %33, %38\l  %40 = fadd contract float %27, %39\l  %41 = add nuw nsw i32 %28, 1\l  %42 = add i32 %29, 1\l  %43 = icmp eq i32 %42, %17\l  br i1 %43, label %44, label %26, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4a25530:s0 -> Node0x4a23d30;
	Node0x4a25530:s1 -> Node0x4a25530;
	Node0x4a23d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%44:\l44:                                               \l  %45 = phi float [ 0.000000e+00, %4 ], [ %22, %21 ], [ %40, %26 ]\l  %46 = add i32 %14, %11\l  %47 = add i32 %46, %10\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %3, i64 %48\l  store float %45, float addrspace(1)* %49, align 4, !tbaa !5\l  ret void\l}"];
	Node0x4a242c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%50:\l50:                                               \l  %51 = phi float [ 0.000000e+00, %19 ], [ %148, %50 ]\l  %52 = phi i32 [ 0, %19 ], [ %149, %50 ]\l  %53 = phi i32 [ 0, %19 ], [ %150, %50 ]\l  %54 = add nsw i32 %12, %52\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %58 = mul nsw i32 %52, %2\l  %59 = add nsw i32 %14, %58\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %63 = fmul contract float %57, %62\l  %64 = fadd contract float %51, %63\l  %65 = or i32 %52, 1\l  %66 = add nsw i32 %12, %65\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %70 = mul nsw i32 %65, %2\l  %71 = add nsw i32 %14, %70\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %75 = fmul contract float %69, %74\l  %76 = fadd contract float %64, %75\l  %77 = or i32 %52, 2\l  %78 = add nsw i32 %12, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %82 = mul nsw i32 %77, %2\l  %83 = add nsw i32 %14, %82\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %87 = fmul contract float %81, %86\l  %88 = fadd contract float %76, %87\l  %89 = or i32 %52, 3\l  %90 = add nsw i32 %12, %89\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %94 = mul nsw i32 %89, %2\l  %95 = add nsw i32 %14, %94\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %88, %99\l  %101 = or i32 %52, 4\l  %102 = add nsw i32 %12, %101\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %106 = mul nsw i32 %101, %2\l  %107 = add nsw i32 %14, %106\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %111 = fmul contract float %105, %110\l  %112 = fadd contract float %100, %111\l  %113 = or i32 %52, 5\l  %114 = add nsw i32 %12, %113\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %118 = mul nsw i32 %113, %2\l  %119 = add nsw i32 %14, %118\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %112, %123\l  %125 = or i32 %52, 6\l  %126 = add nsw i32 %12, %125\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %130 = mul nsw i32 %125, %2\l  %131 = add nsw i32 %14, %130\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %135 = fmul contract float %129, %134\l  %136 = fadd contract float %124, %135\l  %137 = or i32 %52, 7\l  %138 = add nsw i32 %12, %137\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %0, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %142 = mul nsw i32 %137, %2\l  %143 = add nsw i32 %14, %142\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %136, %147\l  %149 = add nuw nsw i32 %52, 8\l  %150 = add i32 %53, 8\l  %151 = icmp eq i32 %150, %20\l  br i1 %151, label %21, label %50, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4a242c0:s0 -> Node0x4a240a0;
	Node0x4a242c0:s1 -> Node0x4a242c0;
}
