; ModuleID = '../data/hip_kernels/1127/2/main.cu'
source_filename = "../data/hip_kernels/1127/2/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z10CalcAngMomPdS_S_S_S_S_S_S_ddS_S_S_S_S_ib(double addrspace(1)* nocapture writeonly %0, double addrspace(1)* nocapture writeonly %1, double addrspace(1)* nocapture writeonly %2, double addrspace(1)* nocapture readnone %3, double addrspace(1)* nocapture readnone %4, double addrspace(1)* nocapture readnone %5, double addrspace(1)* nocapture readonly %6, double addrspace(1)* nocapture readonly %7, double %8, double %9, double addrspace(1)* nocapture readonly %10, double addrspace(1)* nocapture readonly %11, double addrspace(1)* nocapture readonly %12, double addrspace(1)* nocapture readonly %13, double addrspace(1)* nocapture readonly %14, i32 %15, i1 %16) local_unnamed_addr #0 {
  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4
  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*
  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !4, !invariant.load !5
  %23 = zext i16 %22 to i32
  %24 = mul i32 %18, %23
  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %26 = add i32 %24, %25
  %27 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 16
  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*
  %29 = load i32, i32 addrspace(4)* %28, align 8, !tbaa !7
  %30 = getelementptr i8, i8 addrspace(4)* %19, i64 6
  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*
  %32 = load i16, i16 addrspace(4)* %31, align 2, !range !4, !invariant.load !5
  %33 = zext i16 %32 to i32
  %34 = udiv i32 %29, %33
  %35 = mul i32 %34, %33
  %36 = icmp ugt i32 %29, %35
  %37 = zext i1 %36 to i32
  %38 = add i32 %34, %37
  %39 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %40 = icmp slt i32 %26, %15
  br i1 %40, label %41, label %1360

41:                                               ; preds = %17
  %42 = add nsw i32 %39, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds double, double addrspace(1)* %11, i64 %43
  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !16, !amdgpu.noclobber !5
  %46 = fadd contract double %45, %8
  %47 = sext i32 %39 to i64
  %48 = getelementptr inbounds double, double addrspace(1)* %11, i64 %47
  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !16, !amdgpu.noclobber !5
  %50 = fadd contract double %49, %8
  %51 = sext i32 %26 to i64
  %52 = getelementptr inbounds double, double addrspace(1)* %13, i64 %51
  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !16
  br i1 %16, label %54, label %562

54:                                               ; preds = %41
  %55 = tail call double @llvm.fabs.f64(double %8)
  %56 = tail call double @llvm.amdgcn.frexp.mant.f64(double %55)
  %57 = fcmp olt double %56, 0x3FE5555555555555
  %58 = zext i1 %57 to i32
  %59 = tail call double @llvm.amdgcn.ldexp.f64(double %56, i32 %58)
  %60 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %55)
  %61 = sub nsw i32 %60, %58
  %62 = fadd double %59, -1.000000e+00
  %63 = fadd double %59, 1.000000e+00
  %64 = fadd double %63, -1.000000e+00
  %65 = fsub double %59, %64
  %66 = tail call double @llvm.amdgcn.rcp.f64(double %63)
  %67 = fneg double %63
  %68 = tail call double @llvm.fma.f64(double %67, double %66, double 1.000000e+00)
  %69 = tail call double @llvm.fma.f64(double %68, double %66, double %66)
  %70 = tail call double @llvm.fma.f64(double %67, double %69, double 1.000000e+00)
  %71 = tail call double @llvm.fma.f64(double %70, double %69, double %69)
  %72 = fmul double %62, %71
  %73 = fmul double %63, %72
  %74 = fneg double %73
  %75 = tail call double @llvm.fma.f64(double %72, double %63, double %74)
  %76 = tail call double @llvm.fma.f64(double %72, double %65, double %75)
  %77 = fadd double %73, %76
  %78 = fsub double %77, %73
  %79 = fsub double %76, %78
  %80 = fsub double %62, %77
  %81 = fsub double %62, %80
  %82 = fsub double %81, %77
  %83 = fsub double %82, %79
  %84 = fadd double %80, %83
  %85 = fmul double %71, %84
  %86 = fadd double %72, %85
  %87 = fsub double %86, %72
  %88 = fsub double %85, %87
  %89 = fmul double %86, %86
  %90 = fneg double %89
  %91 = tail call double @llvm.fma.f64(double %86, double %86, double %90)
  %92 = fmul double %88, 2.000000e+00
  %93 = tail call double @llvm.fma.f64(double %86, double %92, double %91)
  %94 = fadd double %89, %93
  %95 = fsub double %94, %89
  %96 = fsub double %93, %95
  %97 = tail call double @llvm.fma.f64(double %94, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %98 = tail call double @llvm.fma.f64(double %94, double %97, double 0x3FBE25E43ABE935A)
  %99 = tail call double @llvm.fma.f64(double %94, double %98, double 0x3FC110EF47E6C9C2)
  %100 = tail call double @llvm.fma.f64(double %94, double %99, double 0x3FC3B13BCFA74449)
  %101 = tail call double @llvm.fma.f64(double %94, double %100, double 0x3FC745D171BF3C30)
  %102 = tail call double @llvm.fma.f64(double %94, double %101, double 0x3FCC71C71C7792CE)
  %103 = tail call double @llvm.fma.f64(double %94, double %102, double 0x3FD24924924920DA)
  %104 = tail call double @llvm.fma.f64(double %94, double %103, double 0x3FD999999999999C)
  %105 = sitofp i32 %61 to double
  %106 = fmul double %105, 0x3FE62E42FEFA39EF
  %107 = fneg double %106
  %108 = tail call double @llvm.fma.f64(double %105, double 0x3FE62E42FEFA39EF, double %107)
  %109 = tail call double @llvm.fma.f64(double %105, double 0x3C7ABC9E3B39803F, double %108)
  %110 = fadd double %106, %109
  %111 = fsub double %110, %106
  %112 = fsub double %109, %111
  %113 = tail call double @llvm.amdgcn.ldexp.f64(double %86, i32 1)
  %114 = tail call double @llvm.amdgcn.ldexp.f64(double %88, i32 1)
  %115 = fmul double %86, %94
  %116 = fneg double %115
  %117 = tail call double @llvm.fma.f64(double %94, double %86, double %116)
  %118 = tail call double @llvm.fma.f64(double %94, double %88, double %117)
  %119 = tail call double @llvm.fma.f64(double %96, double %86, double %118)
  %120 = fadd double %115, %119
  %121 = fsub double %120, %115
  %122 = fsub double %119, %121
  %123 = fmul double %94, %104
  %124 = fneg double %123
  %125 = tail call double @llvm.fma.f64(double %94, double %104, double %124)
  %126 = tail call double @llvm.fma.f64(double %96, double %104, double %125)
  %127 = fadd double %123, %126
  %128 = fsub double %127, %123
  %129 = fsub double %126, %128
  %130 = fadd double %127, 0x3FE5555555555555
  %131 = fadd double %130, 0xBFE5555555555555
  %132 = fsub double %127, %131
  %133 = fadd double %129, 0x3C8543B0D5DF274D
  %134 = fadd double %133, %132
  %135 = fadd double %130, %134
  %136 = fsub double %135, %130
  %137 = fsub double %134, %136
  %138 = fmul double %120, %135
  %139 = fneg double %138
  %140 = tail call double @llvm.fma.f64(double %120, double %135, double %139)
  %141 = tail call double @llvm.fma.f64(double %120, double %137, double %140)
  %142 = tail call double @llvm.fma.f64(double %122, double %135, double %141)
  %143 = fadd double %138, %142
  %144 = fsub double %143, %138
  %145 = fsub double %142, %144
  %146 = fadd double %113, %143
  %147 = fsub double %146, %113
  %148 = fsub double %143, %147
  %149 = fadd double %114, %145
  %150 = fadd double %149, %148
  %151 = fadd double %146, %150
  %152 = fsub double %151, %146
  %153 = fsub double %150, %152
  %154 = fadd double %110, %151
  %155 = fsub double %154, %110
  %156 = fsub double %154, %155
  %157 = fsub double %110, %156
  %158 = fsub double %151, %155
  %159 = fadd double %158, %157
  %160 = fadd double %112, %153
  %161 = fsub double %160, %112
  %162 = fsub double %160, %161
  %163 = fsub double %112, %162
  %164 = fsub double %153, %161
  %165 = fadd double %164, %163
  %166 = fadd double %160, %159
  %167 = fadd double %154, %166
  %168 = fsub double %167, %154
  %169 = fsub double %166, %168
  %170 = fadd double %165, %169
  %171 = fadd double %167, %170
  %172 = fsub double %171, %167
  %173 = fsub double %170, %172
  %174 = fmul double %171, 2.000000e+00
  %175 = fneg double %174
  %176 = tail call double @llvm.fma.f64(double %171, double 2.000000e+00, double %175)
  %177 = tail call double @llvm.fma.f64(double %173, double 2.000000e+00, double %176)
  %178 = fadd double %174, %177
  %179 = fsub double %178, %174
  %180 = fsub double %177, %179
  %181 = tail call double @llvm.fabs.f64(double %174) #3
  %182 = fcmp oeq double %181, 0x7FF0000000000000
  %183 = select i1 %182, double %174, double %178
  %184 = tail call double @llvm.fabs.f64(double %183) #3
  %185 = fcmp oeq double %184, 0x7FF0000000000000
  %186 = select i1 %185, double 0.000000e+00, double %180
  %187 = fmul double %183, 0x3FF71547652B82FE
  %188 = tail call double @llvm.rint.f64(double %187)
  %189 = fneg double %188
  %190 = tail call double @llvm.fma.f64(double %189, double 0x3FE62E42FEFA39EF, double %183)
  %191 = tail call double @llvm.fma.f64(double %189, double 0x3C7ABC9E3B39803F, double %190)
  %192 = tail call double @llvm.fma.f64(double %191, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %193 = tail call double @llvm.fma.f64(double %191, double %192, double 0x3EC71DEE623FDE64)
  %194 = tail call double @llvm.fma.f64(double %191, double %193, double 0x3EFA01997C89E6B0)
  %195 = tail call double @llvm.fma.f64(double %191, double %194, double 0x3F2A01A014761F6E)
  %196 = tail call double @llvm.fma.f64(double %191, double %195, double 0x3F56C16C1852B7B0)
  %197 = tail call double @llvm.fma.f64(double %191, double %196, double 0x3F81111111122322)
  %198 = tail call double @llvm.fma.f64(double %191, double %197, double 0x3FA55555555502A1)
  %199 = tail call double @llvm.fma.f64(double %191, double %198, double 0x3FC5555555555511)
  %200 = tail call double @llvm.fma.f64(double %191, double %199, double 0x3FE000000000000B)
  %201 = tail call double @llvm.fma.f64(double %191, double %200, double 1.000000e+00)
  %202 = tail call double @llvm.fma.f64(double %191, double %201, double 1.000000e+00)
  %203 = fptosi double %188 to i32
  %204 = tail call double @llvm.amdgcn.ldexp.f64(double %202, i32 %203)
  %205 = fcmp ogt double %183, 1.024000e+03
  %206 = select i1 %205, double 0x7FF0000000000000, double %204
  %207 = fcmp olt double %183, -1.075000e+03
  %208 = select i1 %207, double 0.000000e+00, double %206
  %209 = tail call double @llvm.fma.f64(double %208, double %186, double %208)
  %210 = tail call double @llvm.fabs.f64(double %208) #3
  %211 = fcmp oeq double %210, 0x7FF0000000000000
  %212 = select i1 %211, double %208, double %209
  %213 = tail call double @llvm.fabs.f64(double %212)
  %214 = fcmp oeq double %55, 0x7FF0000000000000
  %215 = fcmp oeq double %8, 0.000000e+00
  %216 = select i1 %214, double 0x7FF0000000000000, double %213
  %217 = select i1 %215, double 0.000000e+00, double %216
  %218 = fcmp uno double %8, 0.000000e+00
  %219 = select i1 %218, double 0x7FF8000000000000, double %217
  %220 = fdiv contract double %53, %219
  %221 = tail call double @llvm.fabs.f64(double %46)
  %222 = tail call double @llvm.amdgcn.frexp.mant.f64(double %221)
  %223 = fcmp olt double %222, 0x3FE5555555555555
  %224 = zext i1 %223 to i32
  %225 = tail call double @llvm.amdgcn.ldexp.f64(double %222, i32 %224)
  %226 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %221)
  %227 = sub nsw i32 %226, %224
  %228 = fadd double %225, -1.000000e+00
  %229 = fadd double %225, 1.000000e+00
  %230 = fadd double %229, -1.000000e+00
  %231 = fsub double %225, %230
  %232 = tail call double @llvm.amdgcn.rcp.f64(double %229)
  %233 = fneg double %229
  %234 = tail call double @llvm.fma.f64(double %233, double %232, double 1.000000e+00)
  %235 = tail call double @llvm.fma.f64(double %234, double %232, double %232)
  %236 = tail call double @llvm.fma.f64(double %233, double %235, double 1.000000e+00)
  %237 = tail call double @llvm.fma.f64(double %236, double %235, double %235)
  %238 = fmul double %228, %237
  %239 = fmul double %229, %238
  %240 = fneg double %239
  %241 = tail call double @llvm.fma.f64(double %238, double %229, double %240)
  %242 = tail call double @llvm.fma.f64(double %238, double %231, double %241)
  %243 = fadd double %239, %242
  %244 = fsub double %243, %239
  %245 = fsub double %242, %244
  %246 = fsub double %228, %243
  %247 = fsub double %228, %246
  %248 = fsub double %247, %243
  %249 = fsub double %248, %245
  %250 = fadd double %246, %249
  %251 = fmul double %237, %250
  %252 = fadd double %238, %251
  %253 = fsub double %252, %238
  %254 = fsub double %251, %253
  %255 = fmul double %252, %252
  %256 = fneg double %255
  %257 = tail call double @llvm.fma.f64(double %252, double %252, double %256)
  %258 = fmul double %254, 2.000000e+00
  %259 = tail call double @llvm.fma.f64(double %252, double %258, double %257)
  %260 = fadd double %255, %259
  %261 = fsub double %260, %255
  %262 = fsub double %259, %261
  %263 = tail call double @llvm.fma.f64(double %260, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %264 = tail call double @llvm.fma.f64(double %260, double %263, double 0x3FBE25E43ABE935A)
  %265 = tail call double @llvm.fma.f64(double %260, double %264, double 0x3FC110EF47E6C9C2)
  %266 = tail call double @llvm.fma.f64(double %260, double %265, double 0x3FC3B13BCFA74449)
  %267 = tail call double @llvm.fma.f64(double %260, double %266, double 0x3FC745D171BF3C30)
  %268 = tail call double @llvm.fma.f64(double %260, double %267, double 0x3FCC71C71C7792CE)
  %269 = tail call double @llvm.fma.f64(double %260, double %268, double 0x3FD24924924920DA)
  %270 = tail call double @llvm.fma.f64(double %260, double %269, double 0x3FD999999999999C)
  %271 = sitofp i32 %227 to double
  %272 = fmul double %271, 0x3FE62E42FEFA39EF
  %273 = fneg double %272
  %274 = tail call double @llvm.fma.f64(double %271, double 0x3FE62E42FEFA39EF, double %273)
  %275 = tail call double @llvm.fma.f64(double %271, double 0x3C7ABC9E3B39803F, double %274)
  %276 = fadd double %272, %275
  %277 = fsub double %276, %272
  %278 = fsub double %275, %277
  %279 = tail call double @llvm.amdgcn.ldexp.f64(double %252, i32 1)
  %280 = tail call double @llvm.amdgcn.ldexp.f64(double %254, i32 1)
  %281 = fmul double %252, %260
  %282 = fneg double %281
  %283 = tail call double @llvm.fma.f64(double %260, double %252, double %282)
  %284 = tail call double @llvm.fma.f64(double %260, double %254, double %283)
  %285 = tail call double @llvm.fma.f64(double %262, double %252, double %284)
  %286 = fadd double %281, %285
  %287 = fsub double %286, %281
  %288 = fsub double %285, %287
  %289 = fmul double %260, %270
  %290 = fneg double %289
  %291 = tail call double @llvm.fma.f64(double %260, double %270, double %290)
  %292 = tail call double @llvm.fma.f64(double %262, double %270, double %291)
  %293 = fadd double %289, %292
  %294 = fsub double %293, %289
  %295 = fsub double %292, %294
  %296 = fadd double %293, 0x3FE5555555555555
  %297 = fadd double %296, 0xBFE5555555555555
  %298 = fsub double %293, %297
  %299 = fadd double %295, 0x3C8543B0D5DF274D
  %300 = fadd double %299, %298
  %301 = fadd double %296, %300
  %302 = fsub double %301, %296
  %303 = fsub double %300, %302
  %304 = fmul double %286, %301
  %305 = fneg double %304
  %306 = tail call double @llvm.fma.f64(double %286, double %301, double %305)
  %307 = tail call double @llvm.fma.f64(double %286, double %303, double %306)
  %308 = tail call double @llvm.fma.f64(double %288, double %301, double %307)
  %309 = fadd double %304, %308
  %310 = fsub double %309, %304
  %311 = fsub double %308, %310
  %312 = fadd double %279, %309
  %313 = fsub double %312, %279
  %314 = fsub double %309, %313
  %315 = fadd double %280, %311
  %316 = fadd double %315, %314
  %317 = fadd double %312, %316
  %318 = fsub double %317, %312
  %319 = fsub double %316, %318
  %320 = fadd double %276, %317
  %321 = fsub double %320, %276
  %322 = fsub double %320, %321
  %323 = fsub double %276, %322
  %324 = fsub double %317, %321
  %325 = fadd double %324, %323
  %326 = fadd double %278, %319
  %327 = fsub double %326, %278
  %328 = fsub double %326, %327
  %329 = fsub double %278, %328
  %330 = fsub double %319, %327
  %331 = fadd double %330, %329
  %332 = fadd double %326, %325
  %333 = fadd double %320, %332
  %334 = fsub double %333, %320
  %335 = fsub double %332, %334
  %336 = fadd double %331, %335
  %337 = fadd double %333, %336
  %338 = fsub double %337, %333
  %339 = fsub double %336, %338
  %340 = fmul double %337, 3.000000e+00
  %341 = fneg double %340
  %342 = tail call double @llvm.fma.f64(double %337, double 3.000000e+00, double %341)
  %343 = tail call double @llvm.fma.f64(double %339, double 3.000000e+00, double %342)
  %344 = fadd double %340, %343
  %345 = fsub double %344, %340
  %346 = fsub double %343, %345
  %347 = tail call double @llvm.fabs.f64(double %340) #3
  %348 = fcmp oeq double %347, 0x7FF0000000000000
  %349 = select i1 %348, double %340, double %344
  %350 = tail call double @llvm.fabs.f64(double %349) #3
  %351 = fcmp oeq double %350, 0x7FF0000000000000
  %352 = select i1 %351, double 0.000000e+00, double %346
  %353 = fmul double %349, 0x3FF71547652B82FE
  %354 = tail call double @llvm.rint.f64(double %353)
  %355 = fneg double %354
  %356 = tail call double @llvm.fma.f64(double %355, double 0x3FE62E42FEFA39EF, double %349)
  %357 = tail call double @llvm.fma.f64(double %355, double 0x3C7ABC9E3B39803F, double %356)
  %358 = tail call double @llvm.fma.f64(double %357, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %359 = tail call double @llvm.fma.f64(double %357, double %358, double 0x3EC71DEE623FDE64)
  %360 = tail call double @llvm.fma.f64(double %357, double %359, double 0x3EFA01997C89E6B0)
  %361 = tail call double @llvm.fma.f64(double %357, double %360, double 0x3F2A01A014761F6E)
  %362 = tail call double @llvm.fma.f64(double %357, double %361, double 0x3F56C16C1852B7B0)
  %363 = tail call double @llvm.fma.f64(double %357, double %362, double 0x3F81111111122322)
  %364 = tail call double @llvm.fma.f64(double %357, double %363, double 0x3FA55555555502A1)
  %365 = tail call double @llvm.fma.f64(double %357, double %364, double 0x3FC5555555555511)
  %366 = tail call double @llvm.fma.f64(double %357, double %365, double 0x3FE000000000000B)
  %367 = tail call double @llvm.fma.f64(double %357, double %366, double 1.000000e+00)
  %368 = tail call double @llvm.fma.f64(double %357, double %367, double 1.000000e+00)
  %369 = fptosi double %354 to i32
  %370 = tail call double @llvm.amdgcn.ldexp.f64(double %368, i32 %369)
  %371 = fcmp ogt double %349, 1.024000e+03
  %372 = select i1 %371, double 0x7FF0000000000000, double %370
  %373 = fcmp olt double %349, -1.075000e+03
  %374 = select i1 %373, double 0.000000e+00, double %372
  %375 = tail call double @llvm.fma.f64(double %374, double %352, double %374)
  %376 = tail call double @llvm.fabs.f64(double %374) #3
  %377 = fcmp oeq double %376, 0x7FF0000000000000
  %378 = select i1 %377, double %374, double %375
  %379 = fcmp uge double %46, 0.000000e+00
  %380 = select i1 %379, double 0.000000e+00, double -0.000000e+00
  %381 = tail call double @llvm.copysign.f64(double %378, double %380)
  %382 = fcmp oeq double %221, 0x7FF0000000000000
  %383 = fcmp oeq double %46, 0.000000e+00
  %384 = or i1 %383, %382
  %385 = select i1 %383, double 0.000000e+00, double 0x7FF0000000000000
  %386 = tail call double @llvm.copysign.f64(double %385, double %46)
  %387 = select i1 %384, double %386, double %381
  %388 = fcmp uno double %46, 0.000000e+00
  %389 = select i1 %388, double 0x7FF8000000000000, double %387
  %390 = tail call double @llvm.fabs.f64(double %50)
  %391 = tail call double @llvm.amdgcn.frexp.mant.f64(double %390)
  %392 = fcmp olt double %391, 0x3FE5555555555555
  %393 = zext i1 %392 to i32
  %394 = tail call double @llvm.amdgcn.ldexp.f64(double %391, i32 %393)
  %395 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %390)
  %396 = sub nsw i32 %395, %393
  %397 = fadd double %394, -1.000000e+00
  %398 = fadd double %394, 1.000000e+00
  %399 = fadd double %398, -1.000000e+00
  %400 = fsub double %394, %399
  %401 = tail call double @llvm.amdgcn.rcp.f64(double %398)
  %402 = fneg double %398
  %403 = tail call double @llvm.fma.f64(double %402, double %401, double 1.000000e+00)
  %404 = tail call double @llvm.fma.f64(double %403, double %401, double %401)
  %405 = tail call double @llvm.fma.f64(double %402, double %404, double 1.000000e+00)
  %406 = tail call double @llvm.fma.f64(double %405, double %404, double %404)
  %407 = fmul double %397, %406
  %408 = fmul double %398, %407
  %409 = fneg double %408
  %410 = tail call double @llvm.fma.f64(double %407, double %398, double %409)
  %411 = tail call double @llvm.fma.f64(double %407, double %400, double %410)
  %412 = fadd double %408, %411
  %413 = fsub double %412, %408
  %414 = fsub double %411, %413
  %415 = fsub double %397, %412
  %416 = fsub double %397, %415
  %417 = fsub double %416, %412
  %418 = fsub double %417, %414
  %419 = fadd double %415, %418
  %420 = fmul double %406, %419
  %421 = fadd double %407, %420
  %422 = fsub double %421, %407
  %423 = fsub double %420, %422
  %424 = fmul double %421, %421
  %425 = fneg double %424
  %426 = tail call double @llvm.fma.f64(double %421, double %421, double %425)
  %427 = fmul double %423, 2.000000e+00
  %428 = tail call double @llvm.fma.f64(double %421, double %427, double %426)
  %429 = fadd double %424, %428
  %430 = fsub double %429, %424
  %431 = fsub double %428, %430
  %432 = tail call double @llvm.fma.f64(double %429, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %433 = tail call double @llvm.fma.f64(double %429, double %432, double 0x3FBE25E43ABE935A)
  %434 = tail call double @llvm.fma.f64(double %429, double %433, double 0x3FC110EF47E6C9C2)
  %435 = tail call double @llvm.fma.f64(double %429, double %434, double 0x3FC3B13BCFA74449)
  %436 = tail call double @llvm.fma.f64(double %429, double %435, double 0x3FC745D171BF3C30)
  %437 = tail call double @llvm.fma.f64(double %429, double %436, double 0x3FCC71C71C7792CE)
  %438 = tail call double @llvm.fma.f64(double %429, double %437, double 0x3FD24924924920DA)
  %439 = tail call double @llvm.fma.f64(double %429, double %438, double 0x3FD999999999999C)
  %440 = sitofp i32 %396 to double
  %441 = fmul double %440, 0x3FE62E42FEFA39EF
  %442 = fneg double %441
  %443 = tail call double @llvm.fma.f64(double %440, double 0x3FE62E42FEFA39EF, double %442)
  %444 = tail call double @llvm.fma.f64(double %440, double 0x3C7ABC9E3B39803F, double %443)
  %445 = fadd double %441, %444
  %446 = fsub double %445, %441
  %447 = fsub double %444, %446
  %448 = tail call double @llvm.amdgcn.ldexp.f64(double %421, i32 1)
  %449 = tail call double @llvm.amdgcn.ldexp.f64(double %423, i32 1)
  %450 = fmul double %421, %429
  %451 = fneg double %450
  %452 = tail call double @llvm.fma.f64(double %429, double %421, double %451)
  %453 = tail call double @llvm.fma.f64(double %429, double %423, double %452)
  %454 = tail call double @llvm.fma.f64(double %431, double %421, double %453)
  %455 = fadd double %450, %454
  %456 = fsub double %455, %450
  %457 = fsub double %454, %456
  %458 = fmul double %429, %439
  %459 = fneg double %458
  %460 = tail call double @llvm.fma.f64(double %429, double %439, double %459)
  %461 = tail call double @llvm.fma.f64(double %431, double %439, double %460)
  %462 = fadd double %458, %461
  %463 = fsub double %462, %458
  %464 = fsub double %461, %463
  %465 = fadd double %462, 0x3FE5555555555555
  %466 = fadd double %465, 0xBFE5555555555555
  %467 = fsub double %462, %466
  %468 = fadd double %464, 0x3C8543B0D5DF274D
  %469 = fadd double %468, %467
  %470 = fadd double %465, %469
  %471 = fsub double %470, %465
  %472 = fsub double %469, %471
  %473 = fmul double %455, %470
  %474 = fneg double %473
  %475 = tail call double @llvm.fma.f64(double %455, double %470, double %474)
  %476 = tail call double @llvm.fma.f64(double %455, double %472, double %475)
  %477 = tail call double @llvm.fma.f64(double %457, double %470, double %476)
  %478 = fadd double %473, %477
  %479 = fsub double %478, %473
  %480 = fsub double %477, %479
  %481 = fadd double %448, %478
  %482 = fsub double %481, %448
  %483 = fsub double %478, %482
  %484 = fadd double %449, %480
  %485 = fadd double %484, %483
  %486 = fadd double %481, %485
  %487 = fsub double %486, %481
  %488 = fsub double %485, %487
  %489 = fadd double %445, %486
  %490 = fsub double %489, %445
  %491 = fsub double %489, %490
  %492 = fsub double %445, %491
  %493 = fsub double %486, %490
  %494 = fadd double %493, %492
  %495 = fadd double %447, %488
  %496 = fsub double %495, %447
  %497 = fsub double %495, %496
  %498 = fsub double %447, %497
  %499 = fsub double %488, %496
  %500 = fadd double %499, %498
  %501 = fadd double %495, %494
  %502 = fadd double %489, %501
  %503 = fsub double %502, %489
  %504 = fsub double %501, %503
  %505 = fadd double %500, %504
  %506 = fadd double %502, %505
  %507 = fsub double %506, %502
  %508 = fsub double %505, %507
  %509 = fmul double %506, 3.000000e+00
  %510 = fneg double %509
  %511 = tail call double @llvm.fma.f64(double %506, double 3.000000e+00, double %510)
  %512 = tail call double @llvm.fma.f64(double %508, double 3.000000e+00, double %511)
  %513 = fadd double %509, %512
  %514 = fsub double %513, %509
  %515 = fsub double %512, %514
  %516 = tail call double @llvm.fabs.f64(double %509) #3
  %517 = fcmp oeq double %516, 0x7FF0000000000000
  %518 = select i1 %517, double %509, double %513
  %519 = tail call double @llvm.fabs.f64(double %518) #3
  %520 = fcmp oeq double %519, 0x7FF0000000000000
  %521 = select i1 %520, double 0.000000e+00, double %515
  %522 = fmul double %518, 0x3FF71547652B82FE
  %523 = tail call double @llvm.rint.f64(double %522)
  %524 = fneg double %523
  %525 = tail call double @llvm.fma.f64(double %524, double 0x3FE62E42FEFA39EF, double %518)
  %526 = tail call double @llvm.fma.f64(double %524, double 0x3C7ABC9E3B39803F, double %525)
  %527 = tail call double @llvm.fma.f64(double %526, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %528 = tail call double @llvm.fma.f64(double %526, double %527, double 0x3EC71DEE623FDE64)
  %529 = tail call double @llvm.fma.f64(double %526, double %528, double 0x3EFA01997C89E6B0)
  %530 = tail call double @llvm.fma.f64(double %526, double %529, double 0x3F2A01A014761F6E)
  %531 = tail call double @llvm.fma.f64(double %526, double %530, double 0x3F56C16C1852B7B0)
  %532 = tail call double @llvm.fma.f64(double %526, double %531, double 0x3F81111111122322)
  %533 = tail call double @llvm.fma.f64(double %526, double %532, double 0x3FA55555555502A1)
  %534 = tail call double @llvm.fma.f64(double %526, double %533, double 0x3FC5555555555511)
  %535 = tail call double @llvm.fma.f64(double %526, double %534, double 0x3FE000000000000B)
  %536 = tail call double @llvm.fma.f64(double %526, double %535, double 1.000000e+00)
  %537 = tail call double @llvm.fma.f64(double %526, double %536, double 1.000000e+00)
  %538 = fptosi double %523 to i32
  %539 = tail call double @llvm.amdgcn.ldexp.f64(double %537, i32 %538)
  %540 = fcmp ogt double %518, 1.024000e+03
  %541 = select i1 %540, double 0x7FF0000000000000, double %539
  %542 = fcmp olt double %518, -1.075000e+03
  %543 = select i1 %542, double 0.000000e+00, double %541
  %544 = tail call double @llvm.fma.f64(double %543, double %521, double %543)
  %545 = tail call double @llvm.fabs.f64(double %543) #3
  %546 = fcmp oeq double %545, 0x7FF0000000000000
  %547 = select i1 %546, double %543, double %544
  %548 = fcmp uge double %50, 0.000000e+00
  %549 = select i1 %548, double 0.000000e+00, double -0.000000e+00
  %550 = tail call double @llvm.copysign.f64(double %547, double %549)
  %551 = fcmp oeq double %390, 0x7FF0000000000000
  %552 = fcmp oeq double %50, 0.000000e+00
  %553 = or i1 %552, %551
  %554 = select i1 %552, double 0.000000e+00, double 0x7FF0000000000000
  %555 = tail call double @llvm.copysign.f64(double %554, double %50)
  %556 = select i1 %553, double %555, double %550
  %557 = fcmp uno double %50, 0.000000e+00
  %558 = select i1 %557, double 0x7FF8000000000000, double %556
  %559 = fsub contract double %389, %558
  %560 = fmul contract double %559, %220
  %561 = fdiv contract double %560, 3.000000e+00
  br label %565

562:                                              ; preds = %41
  %563 = fsub contract double %46, %50
  %564 = fmul contract double %563, %53
  br label %565

565:                                              ; preds = %562, %54
  %566 = phi double [ %561, %54 ], [ %564, %562 ]
  %567 = getelementptr inbounds double, double addrspace(1)* %10, i64 %47
  %568 = load double, double addrspace(1)* %567, align 8, !tbaa !16, !amdgpu.noclobber !5
  %569 = fadd contract double %568, %8
  %570 = mul nsw i32 %26, 3
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds double, double addrspace(1)* %14, i64 %571
  %573 = load double, double addrspace(1)* %572, align 8, !tbaa !16, !amdgpu.noclobber !5
  %574 = fmul contract double %569, %573
  %575 = add nsw i32 %570, 1
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds double, double addrspace(1)* %14, i64 %576
  %578 = load double, double addrspace(1)* %577, align 8, !tbaa !16, !amdgpu.noclobber !5
  %579 = fmul contract double %569, %578
  %580 = add nsw i32 %570, 2
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds double, double addrspace(1)* %14, i64 %581
  %583 = load double, double addrspace(1)* %582, align 8, !tbaa !16, !amdgpu.noclobber !5
  %584 = fmul contract double %569, %583
  %585 = mul nsw i32 %38, %570
  %586 = mul nsw i32 %39, 3
  %587 = add nsw i32 %585, %586
  %588 = add nsw i32 %587, 2
  %589 = sext i32 %588 to i64
  %590 = getelementptr inbounds double, double addrspace(1)* %6, i64 %589
  %591 = load double, double addrspace(1)* %590, align 8, !tbaa !16, !amdgpu.noclobber !5
  %592 = fmul contract double %579, %591
  %593 = add nsw i32 %587, 1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds double, double addrspace(1)* %6, i64 %594
  %596 = load double, double addrspace(1)* %595, align 8, !tbaa !16, !amdgpu.noclobber !5
  %597 = fmul contract double %584, %596
  %598 = fsub contract double %592, %597
  %599 = mul nsw i32 %38, %26
  %600 = add nsw i32 %599, %39
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds double, double addrspace(1)* %7, i64 %601
  %603 = load double, double addrspace(1)* %602, align 8, !tbaa !16, !amdgpu.noclobber !5
  %604 = fmul contract double %603, %9
  %605 = fmul contract double %569, %604
  %606 = fmul contract double %584, %605
  %607 = shl nsw i32 %26, 1
  %608 = add nuw nsw i32 %607, 1
  %609 = sext i32 %608 to i64
  %610 = getelementptr inbounds double, double addrspace(1)* %12, i64 %609
  %611 = load double, double addrspace(1)* %610, align 8, !tbaa !16, !amdgpu.noclobber !5
  %612 = tail call double @llvm.fabs.f64(double %611)
  %613 = fcmp olt double %612, 0x41D0000000000000
  br i1 %613, label %614, label %633

614:                                              ; preds = %565
  %615 = fmul double %612, 0x3FE45F306DC9C883
  %616 = tail call double @llvm.rint.f64(double %615)
  %617 = tail call double @llvm.fma.f64(double %616, double 0xBFF921FB54442D18, double %612)
  %618 = tail call double @llvm.fma.f64(double %616, double 0xBC91A62633145C00, double %617)
  %619 = fmul double %616, 0x3C91A62633145C00
  %620 = fneg double %619
  %621 = tail call double @llvm.fma.f64(double %616, double 0x3C91A62633145C00, double %620)
  %622 = fsub double %617, %619
  %623 = fsub double %617, %622
  %624 = fsub double %623, %619
  %625 = fsub double %622, %618
  %626 = fadd double %625, %624
  %627 = fsub double %626, %621
  %628 = tail call double @llvm.fma.f64(double %616, double 0xB97B839A252049C0, double %627)
  %629 = fadd double %618, %628
  %630 = fsub double %629, %618
  %631 = fsub double %628, %630
  %632 = fptosi double %616 to i32
  br label %709

633:                                              ; preds = %565
  %634 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 0)
  %635 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 1)
  %636 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 2)
  %637 = fcmp oge double %612, 0x7B00000000000000
  %638 = tail call double @llvm.amdgcn.ldexp.f64(double %612, i32 -128)
  %639 = select i1 %637, double %638, double %612
  %640 = fmul double %636, %639
  %641 = fneg double %640
  %642 = tail call double @llvm.fma.f64(double %636, double %639, double %641)
  %643 = fmul double %635, %639
  %644 = fneg double %643
  %645 = tail call double @llvm.fma.f64(double %635, double %639, double %644)
  %646 = fmul double %634, %639
  %647 = fneg double %646
  %648 = tail call double @llvm.fma.f64(double %634, double %639, double %647)
  %649 = fadd double %643, %648
  %650 = fsub double %649, %643
  %651 = fsub double %649, %650
  %652 = fsub double %648, %650
  %653 = fsub double %643, %651
  %654 = fadd double %652, %653
  %655 = fadd double %640, %645
  %656 = fsub double %655, %640
  %657 = fsub double %655, %656
  %658 = fsub double %645, %656
  %659 = fsub double %640, %657
  %660 = fadd double %658, %659
  %661 = fadd double %655, %654
  %662 = fsub double %661, %655
  %663 = fsub double %661, %662
  %664 = fsub double %654, %662
  %665 = fsub double %655, %663
  %666 = fadd double %664, %665
  %667 = fadd double %660, %666
  %668 = fadd double %642, %667
  %669 = fadd double %646, %649
  %670 = fsub double %669, %646
  %671 = fsub double %649, %670
  %672 = fadd double %671, %661
  %673 = fsub double %672, %671
  %674 = fsub double %661, %673
  %675 = fadd double %674, %668
  %676 = tail call double @llvm.amdgcn.ldexp.f64(double %669, i32 -2)
  %677 = tail call double @llvm.amdgcn.fract.f64(double %676)
  %678 = tail call i1 @llvm.amdgcn.class.f64(double %676, i32 516)
  %679 = select i1 %678, double 0.000000e+00, double %677
  %680 = tail call double @llvm.amdgcn.ldexp.f64(double %679, i32 2)
  %681 = fadd double %680, %672
  %682 = fcmp olt double %681, 0.000000e+00
  %683 = select i1 %682, double 4.000000e+00, double 0.000000e+00
  %684 = fadd double %680, %683
  %685 = fadd double %672, %684
  %686 = fptosi double %685 to i32
  %687 = sitofp i32 %686 to double
  %688 = fsub double %684, %687
  %689 = fadd double %672, %688
  %690 = fsub double %689, %688
  %691 = fsub double %672, %690
  %692 = fadd double %675, %691
  %693 = fcmp oge double %689, 5.000000e-01
  %694 = zext i1 %693 to i32
  %695 = add nsw i32 %694, %686
  %696 = select i1 %693, double 1.000000e+00, double 0.000000e+00
  %697 = fsub double %689, %696
  %698 = fadd double %697, %692
  %699 = fsub double %698, %697
  %700 = fsub double %692, %699
  %701 = fmul double %698, 0x3FF921FB54442D18
  %702 = fneg double %701
  %703 = tail call double @llvm.fma.f64(double %698, double 0x3FF921FB54442D18, double %702)
  %704 = tail call double @llvm.fma.f64(double %698, double 0x3C91A62633145C07, double %703)
  %705 = tail call double @llvm.fma.f64(double %700, double 0x3FF921FB54442D18, double %704)
  %706 = fadd double %701, %705
  %707 = fsub double %706, %701
  %708 = fsub double %705, %707
  br label %709

709:                                              ; preds = %614, %633
  %710 = phi double [ %631, %614 ], [ %708, %633 ]
  %711 = phi double [ %629, %614 ], [ %706, %633 ]
  %712 = phi i32 [ %632, %614 ], [ %695, %633 ]
  %713 = fmul double %711, %711
  %714 = fmul double %713, 5.000000e-01
  %715 = fsub double 1.000000e+00, %714
  %716 = fsub double 1.000000e+00, %715
  %717 = fsub double %716, %714
  %718 = fmul double %713, %713
  %719 = tail call double @llvm.fma.f64(double %713, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %720 = tail call double @llvm.fma.f64(double %713, double %719, double 0xBE927E4FA17F65F6)
  %721 = tail call double @llvm.fma.f64(double %713, double %720, double 0x3EFA01A019F4EC90)
  %722 = tail call double @llvm.fma.f64(double %713, double %721, double 0xBF56C16C16C16967)
  %723 = tail call double @llvm.fma.f64(double %713, double %722, double 0x3FA5555555555555)
  %724 = fneg double %710
  %725 = tail call double @llvm.fma.f64(double %711, double %724, double %717)
  %726 = tail call double @llvm.fma.f64(double %718, double %723, double %725)
  %727 = fadd double %715, %726
  %728 = tail call double @llvm.fma.f64(double %713, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %729 = tail call double @llvm.fma.f64(double %713, double %728, double 0x3EC71DE3796CDE01)
  %730 = tail call double @llvm.fma.f64(double %713, double %729, double 0xBF2A01A019E83E5C)
  %731 = tail call double @llvm.fma.f64(double %713, double %730, double 0x3F81111111110BB3)
  %732 = fneg double %713
  %733 = fmul double %711, %732
  %734 = fmul double %710, 5.000000e-01
  %735 = tail call double @llvm.fma.f64(double %733, double %731, double %734)
  %736 = tail call double @llvm.fma.f64(double %713, double %735, double %724)
  %737 = tail call double @llvm.fma.f64(double %733, double 0xBFC5555555555555, double %736)
  %738 = fsub double %711, %737
  %739 = fneg double %738
  %740 = and i32 %712, 1
  %741 = icmp eq i32 %740, 0
  %742 = select i1 %741, double %727, double %739
  %743 = bitcast double %742 to <2 x i32>
  %744 = shl i32 %712, 30
  %745 = and i32 %744, -2147483648
  %746 = extractelement <2 x i32> %743, i64 1
  %747 = xor i32 %746, %745
  %748 = insertelement <2 x i32> %743, i32 %747, i64 1
  %749 = tail call i1 @llvm.amdgcn.class.f64(double %612, i32 504)
  %750 = select i1 %749, <2 x i32> %748, <2 x i32> <i32 0, i32 2146959360>
  %751 = bitcast <2 x i32> %750 to double
  %752 = fmul contract double %606, %751
  %753 = sext i32 %607 to i64
  %754 = getelementptr inbounds double, double addrspace(1)* %12, i64 %753
  %755 = load double, double addrspace(1)* %754, align 8, !tbaa !16, !amdgpu.noclobber !5
  %756 = tail call double @llvm.fabs.f64(double %755)
  %757 = fcmp olt double %756, 0x41D0000000000000
  br i1 %757, label %758, label %777

758:                                              ; preds = %709
  %759 = fmul double %756, 0x3FE45F306DC9C883
  %760 = tail call double @llvm.rint.f64(double %759)
  %761 = tail call double @llvm.fma.f64(double %760, double 0xBFF921FB54442D18, double %756)
  %762 = tail call double @llvm.fma.f64(double %760, double 0xBC91A62633145C00, double %761)
  %763 = fmul double %760, 0x3C91A62633145C00
  %764 = fneg double %763
  %765 = tail call double @llvm.fma.f64(double %760, double 0x3C91A62633145C00, double %764)
  %766 = fsub double %761, %763
  %767 = fsub double %761, %766
  %768 = fsub double %767, %763
  %769 = fsub double %766, %762
  %770 = fadd double %769, %768
  %771 = fsub double %770, %765
  %772 = tail call double @llvm.fma.f64(double %760, double 0xB97B839A252049C0, double %771)
  %773 = fadd double %762, %772
  %774 = fsub double %773, %762
  %775 = fsub double %772, %774
  %776 = fptosi double %760 to i32
  br label %853

777:                                              ; preds = %709
  %778 = tail call double @llvm.amdgcn.trig.preop.f64(double %756, i32 0)
  %779 = tail call double @llvm.amdgcn.trig.preop.f64(double %756, i32 1)
  %780 = tail call double @llvm.amdgcn.trig.preop.f64(double %756, i32 2)
  %781 = fcmp oge double %756, 0x7B00000000000000
  %782 = tail call double @llvm.amdgcn.ldexp.f64(double %756, i32 -128)
  %783 = select i1 %781, double %782, double %756
  %784 = fmul double %780, %783
  %785 = fneg double %784
  %786 = tail call double @llvm.fma.f64(double %780, double %783, double %785)
  %787 = fmul double %779, %783
  %788 = fneg double %787
  %789 = tail call double @llvm.fma.f64(double %779, double %783, double %788)
  %790 = fmul double %778, %783
  %791 = fneg double %790
  %792 = tail call double @llvm.fma.f64(double %778, double %783, double %791)
  %793 = fadd double %787, %792
  %794 = fsub double %793, %787
  %795 = fsub double %793, %794
  %796 = fsub double %792, %794
  %797 = fsub double %787, %795
  %798 = fadd double %796, %797
  %799 = fadd double %784, %789
  %800 = fsub double %799, %784
  %801 = fsub double %799, %800
  %802 = fsub double %789, %800
  %803 = fsub double %784, %801
  %804 = fadd double %802, %803
  %805 = fadd double %799, %798
  %806 = fsub double %805, %799
  %807 = fsub double %805, %806
  %808 = fsub double %798, %806
  %809 = fsub double %799, %807
  %810 = fadd double %808, %809
  %811 = fadd double %804, %810
  %812 = fadd double %786, %811
  %813 = fadd double %790, %793
  %814 = fsub double %813, %790
  %815 = fsub double %793, %814
  %816 = fadd double %815, %805
  %817 = fsub double %816, %815
  %818 = fsub double %805, %817
  %819 = fadd double %818, %812
  %820 = tail call double @llvm.amdgcn.ldexp.f64(double %813, i32 -2)
  %821 = tail call double @llvm.amdgcn.fract.f64(double %820)
  %822 = tail call i1 @llvm.amdgcn.class.f64(double %820, i32 516)
  %823 = select i1 %822, double 0.000000e+00, double %821
  %824 = tail call double @llvm.amdgcn.ldexp.f64(double %823, i32 2)
  %825 = fadd double %824, %816
  %826 = fcmp olt double %825, 0.000000e+00
  %827 = select i1 %826, double 4.000000e+00, double 0.000000e+00
  %828 = fadd double %824, %827
  %829 = fadd double %816, %828
  %830 = fptosi double %829 to i32
  %831 = sitofp i32 %830 to double
  %832 = fsub double %828, %831
  %833 = fadd double %816, %832
  %834 = fsub double %833, %832
  %835 = fsub double %816, %834
  %836 = fadd double %819, %835
  %837 = fcmp oge double %833, 5.000000e-01
  %838 = zext i1 %837 to i32
  %839 = add nsw i32 %838, %830
  %840 = select i1 %837, double 1.000000e+00, double 0.000000e+00
  %841 = fsub double %833, %840
  %842 = fadd double %841, %836
  %843 = fsub double %842, %841
  %844 = fsub double %836, %843
  %845 = fmul double %842, 0x3FF921FB54442D18
  %846 = fneg double %845
  %847 = tail call double @llvm.fma.f64(double %842, double 0x3FF921FB54442D18, double %846)
  %848 = tail call double @llvm.fma.f64(double %842, double 0x3C91A62633145C07, double %847)
  %849 = tail call double @llvm.fma.f64(double %844, double 0x3FF921FB54442D18, double %848)
  %850 = fadd double %845, %849
  %851 = fsub double %850, %845
  %852 = fsub double %849, %851
  br label %853

853:                                              ; preds = %758, %777
  %854 = phi double [ %775, %758 ], [ %852, %777 ]
  %855 = phi double [ %773, %758 ], [ %850, %777 ]
  %856 = phi i32 [ %776, %758 ], [ %839, %777 ]
  %857 = fmul double %855, %855
  %858 = fmul double %857, 5.000000e-01
  %859 = fsub double 1.000000e+00, %858
  %860 = fsub double 1.000000e+00, %859
  %861 = fsub double %860, %858
  %862 = fmul double %857, %857
  %863 = tail call double @llvm.fma.f64(double %857, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %864 = tail call double @llvm.fma.f64(double %857, double %863, double 0xBE927E4FA17F65F6)
  %865 = tail call double @llvm.fma.f64(double %857, double %864, double 0x3EFA01A019F4EC90)
  %866 = tail call double @llvm.fma.f64(double %857, double %865, double 0xBF56C16C16C16967)
  %867 = tail call double @llvm.fma.f64(double %857, double %866, double 0x3FA5555555555555)
  %868 = fneg double %854
  %869 = tail call double @llvm.fma.f64(double %855, double %868, double %861)
  %870 = tail call double @llvm.fma.f64(double %862, double %867, double %869)
  %871 = fadd double %859, %870
  %872 = tail call double @llvm.fma.f64(double %857, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %873 = tail call double @llvm.fma.f64(double %857, double %872, double 0x3EC71DE3796CDE01)
  %874 = tail call double @llvm.fma.f64(double %857, double %873, double 0xBF2A01A019E83E5C)
  %875 = tail call double @llvm.fma.f64(double %857, double %874, double 0x3F81111111110BB3)
  %876 = fneg double %857
  %877 = fmul double %855, %876
  %878 = fmul double %854, 5.000000e-01
  %879 = tail call double @llvm.fma.f64(double %877, double %875, double %878)
  %880 = tail call double @llvm.fma.f64(double %857, double %879, double %868)
  %881 = tail call double @llvm.fma.f64(double %877, double 0xBFC5555555555555, double %880)
  %882 = fsub double %855, %881
  %883 = fneg double %882
  %884 = and i32 %856, 1
  %885 = icmp eq i32 %884, 0
  %886 = select i1 %885, double %871, double %883
  %887 = bitcast double %886 to <2 x i32>
  %888 = shl i32 %856, 30
  %889 = and i32 %888, -2147483648
  %890 = extractelement <2 x i32> %887, i64 1
  %891 = xor i32 %890, %889
  %892 = insertelement <2 x i32> %887, i32 %891, i64 1
  %893 = tail call i1 @llvm.amdgcn.class.f64(double %756, i32 504)
  %894 = select i1 %893, <2 x i32> %892, <2 x i32> <i32 0, i32 2146959360>
  %895 = bitcast <2 x i32> %894 to double
  %896 = fmul contract double %752, %895
  %897 = fsub contract double %598, %896
  %898 = sext i32 %587 to i64
  %899 = getelementptr inbounds double, double addrspace(1)* %6, i64 %898
  %900 = load double, double addrspace(1)* %899, align 8, !tbaa !16, !amdgpu.noclobber !5
  %901 = fmul contract double %584, %900
  %902 = fmul contract double %574, %591
  %903 = fsub contract double %901, %902
  br i1 %613, label %904, label %923

904:                                              ; preds = %853
  %905 = fmul double %612, 0x3FE45F306DC9C883
  %906 = tail call double @llvm.rint.f64(double %905)
  %907 = tail call double @llvm.fma.f64(double %906, double 0xBFF921FB54442D18, double %612)
  %908 = tail call double @llvm.fma.f64(double %906, double 0xBC91A62633145C00, double %907)
  %909 = fmul double %906, 0x3C91A62633145C00
  %910 = fneg double %909
  %911 = tail call double @llvm.fma.f64(double %906, double 0x3C91A62633145C00, double %910)
  %912 = fsub double %907, %909
  %913 = fsub double %907, %912
  %914 = fsub double %913, %909
  %915 = fsub double %912, %908
  %916 = fadd double %915, %914
  %917 = fsub double %916, %911
  %918 = tail call double @llvm.fma.f64(double %906, double 0xB97B839A252049C0, double %917)
  %919 = fadd double %908, %918
  %920 = fsub double %919, %908
  %921 = fsub double %918, %920
  %922 = fptosi double %906 to i32
  br label %999

923:                                              ; preds = %853
  %924 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 0)
  %925 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 1)
  %926 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 2)
  %927 = fcmp oge double %612, 0x7B00000000000000
  %928 = tail call double @llvm.amdgcn.ldexp.f64(double %612, i32 -128)
  %929 = select i1 %927, double %928, double %612
  %930 = fmul double %926, %929
  %931 = fneg double %930
  %932 = tail call double @llvm.fma.f64(double %926, double %929, double %931)
  %933 = fmul double %925, %929
  %934 = fneg double %933
  %935 = tail call double @llvm.fma.f64(double %925, double %929, double %934)
  %936 = fmul double %924, %929
  %937 = fneg double %936
  %938 = tail call double @llvm.fma.f64(double %924, double %929, double %937)
  %939 = fadd double %933, %938
  %940 = fsub double %939, %933
  %941 = fsub double %939, %940
  %942 = fsub double %938, %940
  %943 = fsub double %933, %941
  %944 = fadd double %942, %943
  %945 = fadd double %930, %935
  %946 = fsub double %945, %930
  %947 = fsub double %945, %946
  %948 = fsub double %935, %946
  %949 = fsub double %930, %947
  %950 = fadd double %948, %949
  %951 = fadd double %945, %944
  %952 = fsub double %951, %945
  %953 = fsub double %951, %952
  %954 = fsub double %944, %952
  %955 = fsub double %945, %953
  %956 = fadd double %954, %955
  %957 = fadd double %950, %956
  %958 = fadd double %932, %957
  %959 = fadd double %936, %939
  %960 = fsub double %959, %936
  %961 = fsub double %939, %960
  %962 = fadd double %961, %951
  %963 = fsub double %962, %961
  %964 = fsub double %951, %963
  %965 = fadd double %964, %958
  %966 = tail call double @llvm.amdgcn.ldexp.f64(double %959, i32 -2)
  %967 = tail call double @llvm.amdgcn.fract.f64(double %966)
  %968 = tail call i1 @llvm.amdgcn.class.f64(double %966, i32 516)
  %969 = select i1 %968, double 0.000000e+00, double %967
  %970 = tail call double @llvm.amdgcn.ldexp.f64(double %969, i32 2)
  %971 = fadd double %970, %962
  %972 = fcmp olt double %971, 0.000000e+00
  %973 = select i1 %972, double 4.000000e+00, double 0.000000e+00
  %974 = fadd double %970, %973
  %975 = fadd double %962, %974
  %976 = fptosi double %975 to i32
  %977 = sitofp i32 %976 to double
  %978 = fsub double %974, %977
  %979 = fadd double %962, %978
  %980 = fsub double %979, %978
  %981 = fsub double %962, %980
  %982 = fadd double %965, %981
  %983 = fcmp oge double %979, 5.000000e-01
  %984 = zext i1 %983 to i32
  %985 = add nsw i32 %984, %976
  %986 = select i1 %983, double 1.000000e+00, double 0.000000e+00
  %987 = fsub double %979, %986
  %988 = fadd double %987, %982
  %989 = fsub double %988, %987
  %990 = fsub double %982, %989
  %991 = fmul double %988, 0x3FF921FB54442D18
  %992 = fneg double %991
  %993 = tail call double @llvm.fma.f64(double %988, double 0x3FF921FB54442D18, double %992)
  %994 = tail call double @llvm.fma.f64(double %988, double 0x3C91A62633145C07, double %993)
  %995 = tail call double @llvm.fma.f64(double %990, double 0x3FF921FB54442D18, double %994)
  %996 = fadd double %991, %995
  %997 = fsub double %996, %991
  %998 = fsub double %995, %997
  br label %999

999:                                              ; preds = %904, %923
  %1000 = phi double [ %921, %904 ], [ %998, %923 ]
  %1001 = phi double [ %919, %904 ], [ %996, %923 ]
  %1002 = phi i32 [ %922, %904 ], [ %985, %923 ]
  %1003 = fmul double %1001, %1001
  %1004 = fmul double %1003, 5.000000e-01
  %1005 = fsub double 1.000000e+00, %1004
  %1006 = fsub double 1.000000e+00, %1005
  %1007 = fsub double %1006, %1004
  %1008 = fmul double %1003, %1003
  %1009 = tail call double @llvm.fma.f64(double %1003, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1010 = tail call double @llvm.fma.f64(double %1003, double %1009, double 0xBE927E4FA17F65F6)
  %1011 = tail call double @llvm.fma.f64(double %1003, double %1010, double 0x3EFA01A019F4EC90)
  %1012 = tail call double @llvm.fma.f64(double %1003, double %1011, double 0xBF56C16C16C16967)
  %1013 = tail call double @llvm.fma.f64(double %1003, double %1012, double 0x3FA5555555555555)
  %1014 = fneg double %1000
  %1015 = tail call double @llvm.fma.f64(double %1001, double %1014, double %1007)
  %1016 = tail call double @llvm.fma.f64(double %1008, double %1013, double %1015)
  %1017 = fadd double %1005, %1016
  %1018 = tail call double @llvm.fma.f64(double %1003, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1019 = tail call double @llvm.fma.f64(double %1003, double %1018, double 0x3EC71DE3796CDE01)
  %1020 = tail call double @llvm.fma.f64(double %1003, double %1019, double 0xBF2A01A019E83E5C)
  %1021 = tail call double @llvm.fma.f64(double %1003, double %1020, double 0x3F81111111110BB3)
  %1022 = fneg double %1003
  %1023 = fmul double %1001, %1022
  %1024 = fmul double %1000, 5.000000e-01
  %1025 = tail call double @llvm.fma.f64(double %1023, double %1021, double %1024)
  %1026 = tail call double @llvm.fma.f64(double %1003, double %1025, double %1014)
  %1027 = tail call double @llvm.fma.f64(double %1023, double 0xBFC5555555555555, double %1026)
  %1028 = fsub double %1001, %1027
  %1029 = fneg double %1028
  %1030 = and i32 %1002, 1
  %1031 = icmp eq i32 %1030, 0
  %1032 = select i1 %1031, double %1017, double %1029
  %1033 = bitcast double %1032 to <2 x i32>
  %1034 = shl i32 %1002, 30
  %1035 = and i32 %1034, -2147483648
  %1036 = extractelement <2 x i32> %1033, i64 1
  %1037 = xor i32 %1036, %1035
  %1038 = insertelement <2 x i32> %1033, i32 %1037, i64 1
  %1039 = select i1 %749, <2 x i32> %1038, <2 x i32> <i32 0, i32 2146959360>
  %1040 = bitcast <2 x i32> %1039 to double
  %1041 = fmul contract double %606, %1040
  br i1 %757, label %1042, label %1061

1042:                                             ; preds = %999
  %1043 = fmul double %756, 0x3FE45F306DC9C883
  %1044 = tail call double @llvm.rint.f64(double %1043)
  %1045 = tail call double @llvm.fma.f64(double %1044, double 0xBFF921FB54442D18, double %756)
  %1046 = tail call double @llvm.fma.f64(double %1044, double 0xBC91A62633145C00, double %1045)
  %1047 = fmul double %1044, 0x3C91A62633145C00
  %1048 = fneg double %1047
  %1049 = tail call double @llvm.fma.f64(double %1044, double 0x3C91A62633145C00, double %1048)
  %1050 = fsub double %1045, %1047
  %1051 = fsub double %1045, %1050
  %1052 = fsub double %1051, %1047
  %1053 = fsub double %1050, %1046
  %1054 = fadd double %1053, %1052
  %1055 = fsub double %1054, %1049
  %1056 = tail call double @llvm.fma.f64(double %1044, double 0xB97B839A252049C0, double %1055)
  %1057 = fadd double %1046, %1056
  %1058 = fsub double %1057, %1046
  %1059 = fsub double %1056, %1058
  %1060 = fptosi double %1044 to i32
  br label %1137

1061:                                             ; preds = %999
  %1062 = tail call double @llvm.amdgcn.trig.preop.f64(double %756, i32 0)
  %1063 = tail call double @llvm.amdgcn.trig.preop.f64(double %756, i32 1)
  %1064 = tail call double @llvm.amdgcn.trig.preop.f64(double %756, i32 2)
  %1065 = fcmp oge double %756, 0x7B00000000000000
  %1066 = tail call double @llvm.amdgcn.ldexp.f64(double %756, i32 -128)
  %1067 = select i1 %1065, double %1066, double %756
  %1068 = fmul double %1064, %1067
  %1069 = fneg double %1068
  %1070 = tail call double @llvm.fma.f64(double %1064, double %1067, double %1069)
  %1071 = fmul double %1063, %1067
  %1072 = fneg double %1071
  %1073 = tail call double @llvm.fma.f64(double %1063, double %1067, double %1072)
  %1074 = fmul double %1062, %1067
  %1075 = fneg double %1074
  %1076 = tail call double @llvm.fma.f64(double %1062, double %1067, double %1075)
  %1077 = fadd double %1071, %1076
  %1078 = fsub double %1077, %1071
  %1079 = fsub double %1077, %1078
  %1080 = fsub double %1076, %1078
  %1081 = fsub double %1071, %1079
  %1082 = fadd double %1080, %1081
  %1083 = fadd double %1068, %1073
  %1084 = fsub double %1083, %1068
  %1085 = fsub double %1083, %1084
  %1086 = fsub double %1073, %1084
  %1087 = fsub double %1068, %1085
  %1088 = fadd double %1086, %1087
  %1089 = fadd double %1083, %1082
  %1090 = fsub double %1089, %1083
  %1091 = fsub double %1089, %1090
  %1092 = fsub double %1082, %1090
  %1093 = fsub double %1083, %1091
  %1094 = fadd double %1092, %1093
  %1095 = fadd double %1088, %1094
  %1096 = fadd double %1070, %1095
  %1097 = fadd double %1074, %1077
  %1098 = fsub double %1097, %1074
  %1099 = fsub double %1077, %1098
  %1100 = fadd double %1099, %1089
  %1101 = fsub double %1100, %1099
  %1102 = fsub double %1089, %1101
  %1103 = fadd double %1102, %1096
  %1104 = tail call double @llvm.amdgcn.ldexp.f64(double %1097, i32 -2)
  %1105 = tail call double @llvm.amdgcn.fract.f64(double %1104)
  %1106 = tail call i1 @llvm.amdgcn.class.f64(double %1104, i32 516)
  %1107 = select i1 %1106, double 0.000000e+00, double %1105
  %1108 = tail call double @llvm.amdgcn.ldexp.f64(double %1107, i32 2)
  %1109 = fadd double %1108, %1100
  %1110 = fcmp olt double %1109, 0.000000e+00
  %1111 = select i1 %1110, double 4.000000e+00, double 0.000000e+00
  %1112 = fadd double %1108, %1111
  %1113 = fadd double %1100, %1112
  %1114 = fptosi double %1113 to i32
  %1115 = sitofp i32 %1114 to double
  %1116 = fsub double %1112, %1115
  %1117 = fadd double %1100, %1116
  %1118 = fsub double %1117, %1116
  %1119 = fsub double %1100, %1118
  %1120 = fadd double %1103, %1119
  %1121 = fcmp oge double %1117, 5.000000e-01
  %1122 = zext i1 %1121 to i32
  %1123 = add nsw i32 %1122, %1114
  %1124 = select i1 %1121, double 1.000000e+00, double 0.000000e+00
  %1125 = fsub double %1117, %1124
  %1126 = fadd double %1125, %1120
  %1127 = fsub double %1126, %1125
  %1128 = fsub double %1120, %1127
  %1129 = fmul double %1126, 0x3FF921FB54442D18
  %1130 = fneg double %1129
  %1131 = tail call double @llvm.fma.f64(double %1126, double 0x3FF921FB54442D18, double %1130)
  %1132 = tail call double @llvm.fma.f64(double %1126, double 0x3C91A62633145C07, double %1131)
  %1133 = tail call double @llvm.fma.f64(double %1128, double 0x3FF921FB54442D18, double %1132)
  %1134 = fadd double %1129, %1133
  %1135 = fsub double %1134, %1129
  %1136 = fsub double %1133, %1135
  br label %1137

1137:                                             ; preds = %1042, %1061
  %1138 = phi double [ %1059, %1042 ], [ %1136, %1061 ]
  %1139 = phi double [ %1057, %1042 ], [ %1134, %1061 ]
  %1140 = phi i32 [ %1060, %1042 ], [ %1123, %1061 ]
  %1141 = fmul double %1139, %1139
  %1142 = fmul double %1141, 5.000000e-01
  %1143 = fsub double 1.000000e+00, %1142
  %1144 = fsub double 1.000000e+00, %1143
  %1145 = fsub double %1144, %1142
  %1146 = fmul double %1141, %1141
  %1147 = tail call double @llvm.fma.f64(double %1141, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1148 = tail call double @llvm.fma.f64(double %1141, double %1147, double 0xBE927E4FA17F65F6)
  %1149 = tail call double @llvm.fma.f64(double %1141, double %1148, double 0x3EFA01A019F4EC90)
  %1150 = tail call double @llvm.fma.f64(double %1141, double %1149, double 0xBF56C16C16C16967)
  %1151 = tail call double @llvm.fma.f64(double %1141, double %1150, double 0x3FA5555555555555)
  %1152 = fneg double %1138
  %1153 = tail call double @llvm.fma.f64(double %1139, double %1152, double %1145)
  %1154 = tail call double @llvm.fma.f64(double %1146, double %1151, double %1153)
  %1155 = fadd double %1143, %1154
  %1156 = tail call double @llvm.fma.f64(double %1141, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1157 = tail call double @llvm.fma.f64(double %1141, double %1156, double 0x3EC71DE3796CDE01)
  %1158 = tail call double @llvm.fma.f64(double %1141, double %1157, double 0xBF2A01A019E83E5C)
  %1159 = tail call double @llvm.fma.f64(double %1141, double %1158, double 0x3F81111111110BB3)
  %1160 = fneg double %1141
  %1161 = fmul double %1139, %1160
  %1162 = fmul double %1138, 5.000000e-01
  %1163 = tail call double @llvm.fma.f64(double %1161, double %1159, double %1162)
  %1164 = tail call double @llvm.fma.f64(double %1141, double %1163, double %1152)
  %1165 = tail call double @llvm.fma.f64(double %1161, double 0xBFC5555555555555, double %1164)
  %1166 = fsub double %1139, %1165
  %1167 = and i32 %1140, 1
  %1168 = icmp eq i32 %1167, 0
  %1169 = select i1 %1168, double %1166, double %1155
  %1170 = bitcast double %1169 to <2 x i32>
  %1171 = shl i32 %1140, 30
  %1172 = bitcast double %755 to <2 x i32>
  %1173 = extractelement <2 x i32> %1172, i64 1
  %1174 = xor i32 %1171, %1173
  %1175 = and i32 %1174, -2147483648
  %1176 = extractelement <2 x i32> %1170, i64 1
  %1177 = xor i32 %1176, %1175
  %1178 = insertelement <2 x i32> %1170, i32 %1177, i64 1
  %1179 = select i1 %893, <2 x i32> %1178, <2 x i32> <i32 0, i32 2146959360>
  %1180 = bitcast <2 x i32> %1179 to double
  %1181 = fmul contract double %1041, %1180
  %1182 = fsub contract double %903, %1181
  %1183 = fmul contract double %574, %596
  %1184 = fmul contract double %579, %900
  %1185 = fsub contract double %1183, %1184
  %1186 = fmul contract double %569, %605
  br i1 %613, label %1187, label %1232

1187:                                             ; preds = %1137
  %1188 = fmul double %612, 0x3FE45F306DC9C883
  %1189 = tail call double @llvm.rint.f64(double %1188)
  %1190 = tail call double @llvm.fma.f64(double %1189, double 0xBFF921FB54442D18, double %612)
  %1191 = tail call double @llvm.fma.f64(double %1189, double 0xBC91A62633145C00, double %1190)
  %1192 = fmul double %1189, 0x3C91A62633145C00
  %1193 = fneg double %1192
  %1194 = tail call double @llvm.fma.f64(double %1189, double 0x3C91A62633145C00, double %1193)
  %1195 = fsub double %1190, %1192
  %1196 = fsub double %1190, %1195
  %1197 = fsub double %1196, %1192
  %1198 = fsub double %1195, %1191
  %1199 = fadd double %1198, %1197
  %1200 = fsub double %1199, %1194
  %1201 = tail call double @llvm.fma.f64(double %1189, double 0xB97B839A252049C0, double %1200)
  %1202 = fadd double %1191, %1201
  %1203 = fsub double %1202, %1191
  %1204 = fsub double %1201, %1203
  %1205 = fptosi double %1189 to i32
  %1206 = fmul double %1202, %1202
  %1207 = fmul double %1206, 5.000000e-01
  %1208 = fsub double 1.000000e+00, %1207
  %1209 = fsub double 1.000000e+00, %1208
  %1210 = fsub double %1209, %1207
  %1211 = fmul double %1206, %1206
  %1212 = tail call double @llvm.fma.f64(double %1206, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1213 = tail call double @llvm.fma.f64(double %1206, double %1212, double 0xBE927E4FA17F65F6)
  %1214 = tail call double @llvm.fma.f64(double %1206, double %1213, double 0x3EFA01A019F4EC90)
  %1215 = tail call double @llvm.fma.f64(double %1206, double %1214, double 0xBF56C16C16C16967)
  %1216 = tail call double @llvm.fma.f64(double %1206, double %1215, double 0x3FA5555555555555)
  %1217 = fneg double %1204
  %1218 = tail call double @llvm.fma.f64(double %1202, double %1217, double %1210)
  %1219 = tail call double @llvm.fma.f64(double %1211, double %1216, double %1218)
  %1220 = fadd double %1208, %1219
  %1221 = tail call double @llvm.fma.f64(double %1206, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1222 = tail call double @llvm.fma.f64(double %1206, double %1221, double 0x3EC71DE3796CDE01)
  %1223 = tail call double @llvm.fma.f64(double %1206, double %1222, double 0xBF2A01A019E83E5C)
  %1224 = tail call double @llvm.fma.f64(double %1206, double %1223, double 0x3F81111111110BB3)
  %1225 = fneg double %1206
  %1226 = fmul double %1202, %1225
  %1227 = fmul double %1204, 5.000000e-01
  %1228 = tail call double @llvm.fma.f64(double %1226, double %1224, double %1227)
  %1229 = tail call double @llvm.fma.f64(double %1206, double %1228, double %1217)
  %1230 = tail call double @llvm.fma.f64(double %1226, double 0xBFC5555555555555, double %1229)
  %1231 = fsub double %1202, %1230
  br label %1334

1232:                                             ; preds = %1137
  %1233 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 0)
  %1234 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 1)
  %1235 = tail call double @llvm.amdgcn.trig.preop.f64(double %612, i32 2)
  %1236 = fcmp oge double %612, 0x7B00000000000000
  %1237 = tail call double @llvm.amdgcn.ldexp.f64(double %612, i32 -128)
  %1238 = select i1 %1236, double %1237, double %612
  %1239 = fmul double %1235, %1238
  %1240 = fneg double %1239
  %1241 = tail call double @llvm.fma.f64(double %1235, double %1238, double %1240)
  %1242 = fmul double %1234, %1238
  %1243 = fneg double %1242
  %1244 = tail call double @llvm.fma.f64(double %1234, double %1238, double %1243)
  %1245 = fmul double %1233, %1238
  %1246 = fneg double %1245
  %1247 = tail call double @llvm.fma.f64(double %1233, double %1238, double %1246)
  %1248 = fadd double %1242, %1247
  %1249 = fsub double %1248, %1242
  %1250 = fsub double %1248, %1249
  %1251 = fsub double %1247, %1249
  %1252 = fsub double %1242, %1250
  %1253 = fadd double %1251, %1252
  %1254 = fadd double %1239, %1244
  %1255 = fsub double %1254, %1239
  %1256 = fsub double %1254, %1255
  %1257 = fsub double %1244, %1255
  %1258 = fsub double %1239, %1256
  %1259 = fadd double %1257, %1258
  %1260 = fadd double %1254, %1253
  %1261 = fsub double %1260, %1254
  %1262 = fsub double %1260, %1261
  %1263 = fsub double %1253, %1261
  %1264 = fsub double %1254, %1262
  %1265 = fadd double %1263, %1264
  %1266 = fadd double %1259, %1265
  %1267 = fadd double %1241, %1266
  %1268 = fadd double %1245, %1248
  %1269 = fsub double %1268, %1245
  %1270 = fsub double %1248, %1269
  %1271 = fadd double %1270, %1260
  %1272 = fsub double %1271, %1270
  %1273 = fsub double %1260, %1272
  %1274 = fadd double %1273, %1267
  %1275 = tail call double @llvm.amdgcn.ldexp.f64(double %1268, i32 -2)
  %1276 = tail call double @llvm.amdgcn.fract.f64(double %1275)
  %1277 = tail call i1 @llvm.amdgcn.class.f64(double %1275, i32 516)
  %1278 = select i1 %1277, double 0.000000e+00, double %1276
  %1279 = tail call double @llvm.amdgcn.ldexp.f64(double %1278, i32 2)
  %1280 = fadd double %1279, %1271
  %1281 = fcmp olt double %1280, 0.000000e+00
  %1282 = select i1 %1281, double 4.000000e+00, double 0.000000e+00
  %1283 = fadd double %1279, %1282
  %1284 = fadd double %1271, %1283
  %1285 = fptosi double %1284 to i32
  %1286 = sitofp i32 %1285 to double
  %1287 = fsub double %1283, %1286
  %1288 = fadd double %1271, %1287
  %1289 = fsub double %1288, %1287
  %1290 = fsub double %1271, %1289
  %1291 = fadd double %1274, %1290
  %1292 = fcmp oge double %1288, 5.000000e-01
  %1293 = zext i1 %1292 to i32
  %1294 = add nsw i32 %1293, %1285
  %1295 = select i1 %1292, double 1.000000e+00, double 0.000000e+00
  %1296 = fsub double %1288, %1295
  %1297 = fadd double %1296, %1291
  %1298 = fsub double %1297, %1296
  %1299 = fsub double %1291, %1298
  %1300 = fmul double %1297, 0x3FF921FB54442D18
  %1301 = fneg double %1300
  %1302 = tail call double @llvm.fma.f64(double %1297, double 0x3FF921FB54442D18, double %1301)
  %1303 = tail call double @llvm.fma.f64(double %1297, double 0x3C91A62633145C07, double %1302)
  %1304 = tail call double @llvm.fma.f64(double %1299, double 0x3FF921FB54442D18, double %1303)
  %1305 = fadd double %1300, %1304
  %1306 = fsub double %1305, %1300
  %1307 = fsub double %1304, %1306
  %1308 = fmul double %1305, %1305
  %1309 = fmul double %1308, 5.000000e-01
  %1310 = fsub double 1.000000e+00, %1309
  %1311 = fsub double 1.000000e+00, %1310
  %1312 = fsub double %1311, %1309
  %1313 = fmul double %1308, %1308
  %1314 = tail call double @llvm.fma.f64(double %1308, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1315 = tail call double @llvm.fma.f64(double %1308, double %1314, double 0xBE927E4FA17F65F6)
  %1316 = tail call double @llvm.fma.f64(double %1308, double %1315, double 0x3EFA01A019F4EC90)
  %1317 = tail call double @llvm.fma.f64(double %1308, double %1316, double 0xBF56C16C16C16967)
  %1318 = tail call double @llvm.fma.f64(double %1308, double %1317, double 0x3FA5555555555555)
  %1319 = fneg double %1307
  %1320 = tail call double @llvm.fma.f64(double %1305, double %1319, double %1312)
  %1321 = tail call double @llvm.fma.f64(double %1313, double %1318, double %1320)
  %1322 = fadd double %1310, %1321
  %1323 = tail call double @llvm.fma.f64(double %1308, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1324 = tail call double @llvm.fma.f64(double %1308, double %1323, double 0x3EC71DE3796CDE01)
  %1325 = tail call double @llvm.fma.f64(double %1308, double %1324, double 0xBF2A01A019E83E5C)
  %1326 = tail call double @llvm.fma.f64(double %1308, double %1325, double 0x3F81111111110BB3)
  %1327 = fneg double %1308
  %1328 = fmul double %1305, %1327
  %1329 = fmul double %1307, 5.000000e-01
  %1330 = tail call double @llvm.fma.f64(double %1328, double %1326, double %1329)
  %1331 = tail call double @llvm.fma.f64(double %1308, double %1330, double %1319)
  %1332 = tail call double @llvm.fma.f64(double %1328, double 0xBFC5555555555555, double %1331)
  %1333 = fsub double %1305, %1332
  br label %1334

1334:                                             ; preds = %1187, %1232
  %1335 = phi double [ %1231, %1187 ], [ %1333, %1232 ]
  %1336 = phi i32 [ %1205, %1187 ], [ %1294, %1232 ]
  %1337 = phi double [ %1220, %1187 ], [ %1322, %1232 ]
  %1338 = fneg double %1335
  %1339 = and i32 %1336, 1
  %1340 = icmp eq i32 %1339, 0
  %1341 = select i1 %1340, double %1337, double %1338
  %1342 = bitcast double %1341 to <2 x i32>
  %1343 = shl i32 %1336, 30
  %1344 = and i32 %1343, -2147483648
  %1345 = extractelement <2 x i32> %1342, i64 1
  %1346 = xor i32 %1345, %1344
  %1347 = insertelement <2 x i32> %1342, i32 %1346, i64 1
  %1348 = select i1 %749, <2 x i32> %1347, <2 x i32> <i32 0, i32 2146959360>
  %1349 = bitcast <2 x i32> %1348 to double
  %1350 = fmul contract double %1186, %1349
  %1351 = bitcast <2 x i32> %1348 to double
  %1352 = fmul contract double %1350, %1351
  %1353 = fadd contract double %1185, %1352
  %1354 = fmul contract double %566, %897
  %1355 = getelementptr inbounds double, double addrspace(1)* %0, i64 %601
  store double %1354, double addrspace(1)* %1355, align 8, !tbaa !16
  %1356 = fmul contract double %566, %1182
  %1357 = getelementptr inbounds double, double addrspace(1)* %1, i64 %601
  store double %1356, double addrspace(1)* %1357, align 8, !tbaa !16
  %1358 = fmul contract double %566, %1353
  %1359 = getelementptr inbounds double, double addrspace(1)* %2, i64 %601
  store double %1358, double addrspace(1)* %1359, align 8, !tbaa !16
  br label %1360

1360:                                             ; preds = %1334, %17
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.frexp.mant.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !12, i64 16}
!8 = !{!"hsa_kernel_dispatch_packet_s", !9, i64 0, !9, i64 2, !9, i64 4, !9, i64 6, !9, i64 8, !9, i64 10, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !13, i64 32, !14, i64 40, !13, i64 48, !15, i64 56}
!9 = !{!"short", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!"int", !10, i64 0}
!13 = !{!"long", !10, i64 0}
!14 = !{!"any pointer", !10, i64 0}
!15 = !{!"hsa_signal_s", !13, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"double", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C++ TBAA"}
