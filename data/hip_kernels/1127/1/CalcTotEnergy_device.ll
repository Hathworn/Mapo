; ModuleID = '../data/hip_kernels/1127/1/main.cu'
source_filename = "../data/hip_kernels/1127/1/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z13CalcTotEnergyPdS_S_S_S_S_ddddS_S_S_S_S_ib(double addrspace(1)* nocapture writeonly %0, double addrspace(1)* nocapture readnone %1, double addrspace(1)* nocapture readonly %2, double addrspace(1)* nocapture readonly %3, double addrspace(1)* nocapture readonly %4, double addrspace(1)* nocapture readonly %5, double %6, double %7, double %8, double %9, double addrspace(1)* nocapture readonly %10, double addrspace(1)* nocapture readonly %11, double addrspace(1)* nocapture readonly %12, double addrspace(1)* nocapture readonly %13, double addrspace(1)* nocapture readnone %14, i32 %15, i1 %16) local_unnamed_addr #0 {
  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4
  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*
  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !4, !invariant.load !5
  %23 = zext i16 %22 to i32
  %24 = mul i32 %18, %23
  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %26 = add i32 %24, %25
  %27 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 16
  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*
  %29 = load i32, i32 addrspace(4)* %28, align 8, !tbaa !7
  %30 = getelementptr i8, i8 addrspace(4)* %19, i64 6
  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*
  %32 = load i16, i16 addrspace(4)* %31, align 2, !range !4, !invariant.load !5
  %33 = zext i16 %32 to i32
  %34 = udiv i32 %29, %33
  %35 = mul i32 %34, %33
  %36 = icmp ugt i32 %29, %35
  %37 = zext i1 %36 to i32
  %38 = add i32 %34, %37
  %39 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %40 = icmp slt i32 %26, %15
  br i1 %40, label %41, label %1317

41:                                               ; preds = %17
  %42 = fsub contract double %7, %8
  %43 = add nsw i32 %39, 1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double addrspace(1)* %11, i64 %44
  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !16, !amdgpu.noclobber !5
  %47 = fadd contract double %46, %9
  %48 = sext i32 %39 to i64
  %49 = getelementptr inbounds double, double addrspace(1)* %11, i64 %48
  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !16, !amdgpu.noclobber !5
  %51 = fadd contract double %50, %9
  %52 = sext i32 %26 to i64
  %53 = getelementptr inbounds double, double addrspace(1)* %13, i64 %52
  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !16
  br i1 %16, label %55, label %563

55:                                               ; preds = %41
  %56 = tail call double @llvm.fabs.f64(double %9)
  %57 = tail call double @llvm.amdgcn.frexp.mant.f64(double %56)
  %58 = fcmp olt double %57, 0x3FE5555555555555
  %59 = zext i1 %58 to i32
  %60 = tail call double @llvm.amdgcn.ldexp.f64(double %57, i32 %59)
  %61 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %56)
  %62 = sub nsw i32 %61, %59
  %63 = fadd double %60, -1.000000e+00
  %64 = fadd double %60, 1.000000e+00
  %65 = fadd double %64, -1.000000e+00
  %66 = fsub double %60, %65
  %67 = tail call double @llvm.amdgcn.rcp.f64(double %64)
  %68 = fneg double %64
  %69 = tail call double @llvm.fma.f64(double %68, double %67, double 1.000000e+00)
  %70 = tail call double @llvm.fma.f64(double %69, double %67, double %67)
  %71 = tail call double @llvm.fma.f64(double %68, double %70, double 1.000000e+00)
  %72 = tail call double @llvm.fma.f64(double %71, double %70, double %70)
  %73 = fmul double %63, %72
  %74 = fmul double %64, %73
  %75 = fneg double %74
  %76 = tail call double @llvm.fma.f64(double %73, double %64, double %75)
  %77 = tail call double @llvm.fma.f64(double %73, double %66, double %76)
  %78 = fadd double %74, %77
  %79 = fsub double %78, %74
  %80 = fsub double %77, %79
  %81 = fsub double %63, %78
  %82 = fsub double %63, %81
  %83 = fsub double %82, %78
  %84 = fsub double %83, %80
  %85 = fadd double %81, %84
  %86 = fmul double %72, %85
  %87 = fadd double %73, %86
  %88 = fsub double %87, %73
  %89 = fsub double %86, %88
  %90 = fmul double %87, %87
  %91 = fneg double %90
  %92 = tail call double @llvm.fma.f64(double %87, double %87, double %91)
  %93 = fmul double %89, 2.000000e+00
  %94 = tail call double @llvm.fma.f64(double %87, double %93, double %92)
  %95 = fadd double %90, %94
  %96 = fsub double %95, %90
  %97 = fsub double %94, %96
  %98 = tail call double @llvm.fma.f64(double %95, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %99 = tail call double @llvm.fma.f64(double %95, double %98, double 0x3FBE25E43ABE935A)
  %100 = tail call double @llvm.fma.f64(double %95, double %99, double 0x3FC110EF47E6C9C2)
  %101 = tail call double @llvm.fma.f64(double %95, double %100, double 0x3FC3B13BCFA74449)
  %102 = tail call double @llvm.fma.f64(double %95, double %101, double 0x3FC745D171BF3C30)
  %103 = tail call double @llvm.fma.f64(double %95, double %102, double 0x3FCC71C71C7792CE)
  %104 = tail call double @llvm.fma.f64(double %95, double %103, double 0x3FD24924924920DA)
  %105 = tail call double @llvm.fma.f64(double %95, double %104, double 0x3FD999999999999C)
  %106 = sitofp i32 %62 to double
  %107 = fmul double %106, 0x3FE62E42FEFA39EF
  %108 = fneg double %107
  %109 = tail call double @llvm.fma.f64(double %106, double 0x3FE62E42FEFA39EF, double %108)
  %110 = tail call double @llvm.fma.f64(double %106, double 0x3C7ABC9E3B39803F, double %109)
  %111 = fadd double %107, %110
  %112 = fsub double %111, %107
  %113 = fsub double %110, %112
  %114 = tail call double @llvm.amdgcn.ldexp.f64(double %87, i32 1)
  %115 = tail call double @llvm.amdgcn.ldexp.f64(double %89, i32 1)
  %116 = fmul double %87, %95
  %117 = fneg double %116
  %118 = tail call double @llvm.fma.f64(double %95, double %87, double %117)
  %119 = tail call double @llvm.fma.f64(double %95, double %89, double %118)
  %120 = tail call double @llvm.fma.f64(double %97, double %87, double %119)
  %121 = fadd double %116, %120
  %122 = fsub double %121, %116
  %123 = fsub double %120, %122
  %124 = fmul double %95, %105
  %125 = fneg double %124
  %126 = tail call double @llvm.fma.f64(double %95, double %105, double %125)
  %127 = tail call double @llvm.fma.f64(double %97, double %105, double %126)
  %128 = fadd double %124, %127
  %129 = fsub double %128, %124
  %130 = fsub double %127, %129
  %131 = fadd double %128, 0x3FE5555555555555
  %132 = fadd double %131, 0xBFE5555555555555
  %133 = fsub double %128, %132
  %134 = fadd double %130, 0x3C8543B0D5DF274D
  %135 = fadd double %134, %133
  %136 = fadd double %131, %135
  %137 = fsub double %136, %131
  %138 = fsub double %135, %137
  %139 = fmul double %121, %136
  %140 = fneg double %139
  %141 = tail call double @llvm.fma.f64(double %121, double %136, double %140)
  %142 = tail call double @llvm.fma.f64(double %121, double %138, double %141)
  %143 = tail call double @llvm.fma.f64(double %123, double %136, double %142)
  %144 = fadd double %139, %143
  %145 = fsub double %144, %139
  %146 = fsub double %143, %145
  %147 = fadd double %114, %144
  %148 = fsub double %147, %114
  %149 = fsub double %144, %148
  %150 = fadd double %115, %146
  %151 = fadd double %150, %149
  %152 = fadd double %147, %151
  %153 = fsub double %152, %147
  %154 = fsub double %151, %153
  %155 = fadd double %111, %152
  %156 = fsub double %155, %111
  %157 = fsub double %155, %156
  %158 = fsub double %111, %157
  %159 = fsub double %152, %156
  %160 = fadd double %159, %158
  %161 = fadd double %113, %154
  %162 = fsub double %161, %113
  %163 = fsub double %161, %162
  %164 = fsub double %113, %163
  %165 = fsub double %154, %162
  %166 = fadd double %165, %164
  %167 = fadd double %161, %160
  %168 = fadd double %155, %167
  %169 = fsub double %168, %155
  %170 = fsub double %167, %169
  %171 = fadd double %166, %170
  %172 = fadd double %168, %171
  %173 = fsub double %172, %168
  %174 = fsub double %171, %173
  %175 = fmul double %172, 2.000000e+00
  %176 = fneg double %175
  %177 = tail call double @llvm.fma.f64(double %172, double 2.000000e+00, double %176)
  %178 = tail call double @llvm.fma.f64(double %174, double 2.000000e+00, double %177)
  %179 = fadd double %175, %178
  %180 = fsub double %179, %175
  %181 = fsub double %178, %180
  %182 = tail call double @llvm.fabs.f64(double %175) #3
  %183 = fcmp oeq double %182, 0x7FF0000000000000
  %184 = select i1 %183, double %175, double %179
  %185 = tail call double @llvm.fabs.f64(double %184) #3
  %186 = fcmp oeq double %185, 0x7FF0000000000000
  %187 = select i1 %186, double 0.000000e+00, double %181
  %188 = fmul double %184, 0x3FF71547652B82FE
  %189 = tail call double @llvm.rint.f64(double %188)
  %190 = fneg double %189
  %191 = tail call double @llvm.fma.f64(double %190, double 0x3FE62E42FEFA39EF, double %184)
  %192 = tail call double @llvm.fma.f64(double %190, double 0x3C7ABC9E3B39803F, double %191)
  %193 = tail call double @llvm.fma.f64(double %192, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %194 = tail call double @llvm.fma.f64(double %192, double %193, double 0x3EC71DEE623FDE64)
  %195 = tail call double @llvm.fma.f64(double %192, double %194, double 0x3EFA01997C89E6B0)
  %196 = tail call double @llvm.fma.f64(double %192, double %195, double 0x3F2A01A014761F6E)
  %197 = tail call double @llvm.fma.f64(double %192, double %196, double 0x3F56C16C1852B7B0)
  %198 = tail call double @llvm.fma.f64(double %192, double %197, double 0x3F81111111122322)
  %199 = tail call double @llvm.fma.f64(double %192, double %198, double 0x3FA55555555502A1)
  %200 = tail call double @llvm.fma.f64(double %192, double %199, double 0x3FC5555555555511)
  %201 = tail call double @llvm.fma.f64(double %192, double %200, double 0x3FE000000000000B)
  %202 = tail call double @llvm.fma.f64(double %192, double %201, double 1.000000e+00)
  %203 = tail call double @llvm.fma.f64(double %192, double %202, double 1.000000e+00)
  %204 = fptosi double %189 to i32
  %205 = tail call double @llvm.amdgcn.ldexp.f64(double %203, i32 %204)
  %206 = fcmp ogt double %184, 1.024000e+03
  %207 = select i1 %206, double 0x7FF0000000000000, double %205
  %208 = fcmp olt double %184, -1.075000e+03
  %209 = select i1 %208, double 0.000000e+00, double %207
  %210 = tail call double @llvm.fma.f64(double %209, double %187, double %209)
  %211 = tail call double @llvm.fabs.f64(double %209) #3
  %212 = fcmp oeq double %211, 0x7FF0000000000000
  %213 = select i1 %212, double %209, double %210
  %214 = tail call double @llvm.fabs.f64(double %213)
  %215 = fcmp oeq double %56, 0x7FF0000000000000
  %216 = fcmp oeq double %9, 0.000000e+00
  %217 = select i1 %215, double 0x7FF0000000000000, double %214
  %218 = select i1 %216, double 0.000000e+00, double %217
  %219 = fcmp uno double %9, 0.000000e+00
  %220 = select i1 %219, double 0x7FF8000000000000, double %218
  %221 = fdiv contract double %54, %220
  %222 = tail call double @llvm.fabs.f64(double %47)
  %223 = tail call double @llvm.amdgcn.frexp.mant.f64(double %222)
  %224 = fcmp olt double %223, 0x3FE5555555555555
  %225 = zext i1 %224 to i32
  %226 = tail call double @llvm.amdgcn.ldexp.f64(double %223, i32 %225)
  %227 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %222)
  %228 = sub nsw i32 %227, %225
  %229 = fadd double %226, -1.000000e+00
  %230 = fadd double %226, 1.000000e+00
  %231 = fadd double %230, -1.000000e+00
  %232 = fsub double %226, %231
  %233 = tail call double @llvm.amdgcn.rcp.f64(double %230)
  %234 = fneg double %230
  %235 = tail call double @llvm.fma.f64(double %234, double %233, double 1.000000e+00)
  %236 = tail call double @llvm.fma.f64(double %235, double %233, double %233)
  %237 = tail call double @llvm.fma.f64(double %234, double %236, double 1.000000e+00)
  %238 = tail call double @llvm.fma.f64(double %237, double %236, double %236)
  %239 = fmul double %229, %238
  %240 = fmul double %230, %239
  %241 = fneg double %240
  %242 = tail call double @llvm.fma.f64(double %239, double %230, double %241)
  %243 = tail call double @llvm.fma.f64(double %239, double %232, double %242)
  %244 = fadd double %240, %243
  %245 = fsub double %244, %240
  %246 = fsub double %243, %245
  %247 = fsub double %229, %244
  %248 = fsub double %229, %247
  %249 = fsub double %248, %244
  %250 = fsub double %249, %246
  %251 = fadd double %247, %250
  %252 = fmul double %238, %251
  %253 = fadd double %239, %252
  %254 = fsub double %253, %239
  %255 = fsub double %252, %254
  %256 = fmul double %253, %253
  %257 = fneg double %256
  %258 = tail call double @llvm.fma.f64(double %253, double %253, double %257)
  %259 = fmul double %255, 2.000000e+00
  %260 = tail call double @llvm.fma.f64(double %253, double %259, double %258)
  %261 = fadd double %256, %260
  %262 = fsub double %261, %256
  %263 = fsub double %260, %262
  %264 = tail call double @llvm.fma.f64(double %261, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %265 = tail call double @llvm.fma.f64(double %261, double %264, double 0x3FBE25E43ABE935A)
  %266 = tail call double @llvm.fma.f64(double %261, double %265, double 0x3FC110EF47E6C9C2)
  %267 = tail call double @llvm.fma.f64(double %261, double %266, double 0x3FC3B13BCFA74449)
  %268 = tail call double @llvm.fma.f64(double %261, double %267, double 0x3FC745D171BF3C30)
  %269 = tail call double @llvm.fma.f64(double %261, double %268, double 0x3FCC71C71C7792CE)
  %270 = tail call double @llvm.fma.f64(double %261, double %269, double 0x3FD24924924920DA)
  %271 = tail call double @llvm.fma.f64(double %261, double %270, double 0x3FD999999999999C)
  %272 = sitofp i32 %228 to double
  %273 = fmul double %272, 0x3FE62E42FEFA39EF
  %274 = fneg double %273
  %275 = tail call double @llvm.fma.f64(double %272, double 0x3FE62E42FEFA39EF, double %274)
  %276 = tail call double @llvm.fma.f64(double %272, double 0x3C7ABC9E3B39803F, double %275)
  %277 = fadd double %273, %276
  %278 = fsub double %277, %273
  %279 = fsub double %276, %278
  %280 = tail call double @llvm.amdgcn.ldexp.f64(double %253, i32 1)
  %281 = tail call double @llvm.amdgcn.ldexp.f64(double %255, i32 1)
  %282 = fmul double %253, %261
  %283 = fneg double %282
  %284 = tail call double @llvm.fma.f64(double %261, double %253, double %283)
  %285 = tail call double @llvm.fma.f64(double %261, double %255, double %284)
  %286 = tail call double @llvm.fma.f64(double %263, double %253, double %285)
  %287 = fadd double %282, %286
  %288 = fsub double %287, %282
  %289 = fsub double %286, %288
  %290 = fmul double %261, %271
  %291 = fneg double %290
  %292 = tail call double @llvm.fma.f64(double %261, double %271, double %291)
  %293 = tail call double @llvm.fma.f64(double %263, double %271, double %292)
  %294 = fadd double %290, %293
  %295 = fsub double %294, %290
  %296 = fsub double %293, %295
  %297 = fadd double %294, 0x3FE5555555555555
  %298 = fadd double %297, 0xBFE5555555555555
  %299 = fsub double %294, %298
  %300 = fadd double %296, 0x3C8543B0D5DF274D
  %301 = fadd double %300, %299
  %302 = fadd double %297, %301
  %303 = fsub double %302, %297
  %304 = fsub double %301, %303
  %305 = fmul double %287, %302
  %306 = fneg double %305
  %307 = tail call double @llvm.fma.f64(double %287, double %302, double %306)
  %308 = tail call double @llvm.fma.f64(double %287, double %304, double %307)
  %309 = tail call double @llvm.fma.f64(double %289, double %302, double %308)
  %310 = fadd double %305, %309
  %311 = fsub double %310, %305
  %312 = fsub double %309, %311
  %313 = fadd double %280, %310
  %314 = fsub double %313, %280
  %315 = fsub double %310, %314
  %316 = fadd double %281, %312
  %317 = fadd double %316, %315
  %318 = fadd double %313, %317
  %319 = fsub double %318, %313
  %320 = fsub double %317, %319
  %321 = fadd double %277, %318
  %322 = fsub double %321, %277
  %323 = fsub double %321, %322
  %324 = fsub double %277, %323
  %325 = fsub double %318, %322
  %326 = fadd double %325, %324
  %327 = fadd double %279, %320
  %328 = fsub double %327, %279
  %329 = fsub double %327, %328
  %330 = fsub double %279, %329
  %331 = fsub double %320, %328
  %332 = fadd double %331, %330
  %333 = fadd double %327, %326
  %334 = fadd double %321, %333
  %335 = fsub double %334, %321
  %336 = fsub double %333, %335
  %337 = fadd double %332, %336
  %338 = fadd double %334, %337
  %339 = fsub double %338, %334
  %340 = fsub double %337, %339
  %341 = fmul double %338, 3.000000e+00
  %342 = fneg double %341
  %343 = tail call double @llvm.fma.f64(double %338, double 3.000000e+00, double %342)
  %344 = tail call double @llvm.fma.f64(double %340, double 3.000000e+00, double %343)
  %345 = fadd double %341, %344
  %346 = fsub double %345, %341
  %347 = fsub double %344, %346
  %348 = tail call double @llvm.fabs.f64(double %341) #3
  %349 = fcmp oeq double %348, 0x7FF0000000000000
  %350 = select i1 %349, double %341, double %345
  %351 = tail call double @llvm.fabs.f64(double %350) #3
  %352 = fcmp oeq double %351, 0x7FF0000000000000
  %353 = select i1 %352, double 0.000000e+00, double %347
  %354 = fmul double %350, 0x3FF71547652B82FE
  %355 = tail call double @llvm.rint.f64(double %354)
  %356 = fneg double %355
  %357 = tail call double @llvm.fma.f64(double %356, double 0x3FE62E42FEFA39EF, double %350)
  %358 = tail call double @llvm.fma.f64(double %356, double 0x3C7ABC9E3B39803F, double %357)
  %359 = tail call double @llvm.fma.f64(double %358, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %360 = tail call double @llvm.fma.f64(double %358, double %359, double 0x3EC71DEE623FDE64)
  %361 = tail call double @llvm.fma.f64(double %358, double %360, double 0x3EFA01997C89E6B0)
  %362 = tail call double @llvm.fma.f64(double %358, double %361, double 0x3F2A01A014761F6E)
  %363 = tail call double @llvm.fma.f64(double %358, double %362, double 0x3F56C16C1852B7B0)
  %364 = tail call double @llvm.fma.f64(double %358, double %363, double 0x3F81111111122322)
  %365 = tail call double @llvm.fma.f64(double %358, double %364, double 0x3FA55555555502A1)
  %366 = tail call double @llvm.fma.f64(double %358, double %365, double 0x3FC5555555555511)
  %367 = tail call double @llvm.fma.f64(double %358, double %366, double 0x3FE000000000000B)
  %368 = tail call double @llvm.fma.f64(double %358, double %367, double 1.000000e+00)
  %369 = tail call double @llvm.fma.f64(double %358, double %368, double 1.000000e+00)
  %370 = fptosi double %355 to i32
  %371 = tail call double @llvm.amdgcn.ldexp.f64(double %369, i32 %370)
  %372 = fcmp ogt double %350, 1.024000e+03
  %373 = select i1 %372, double 0x7FF0000000000000, double %371
  %374 = fcmp olt double %350, -1.075000e+03
  %375 = select i1 %374, double 0.000000e+00, double %373
  %376 = tail call double @llvm.fma.f64(double %375, double %353, double %375)
  %377 = tail call double @llvm.fabs.f64(double %375) #3
  %378 = fcmp oeq double %377, 0x7FF0000000000000
  %379 = select i1 %378, double %375, double %376
  %380 = fcmp uge double %47, 0.000000e+00
  %381 = select i1 %380, double 0.000000e+00, double -0.000000e+00
  %382 = tail call double @llvm.copysign.f64(double %379, double %381)
  %383 = fcmp oeq double %222, 0x7FF0000000000000
  %384 = fcmp oeq double %47, 0.000000e+00
  %385 = or i1 %384, %383
  %386 = select i1 %384, double 0.000000e+00, double 0x7FF0000000000000
  %387 = tail call double @llvm.copysign.f64(double %386, double %47)
  %388 = select i1 %385, double %387, double %382
  %389 = fcmp uno double %47, 0.000000e+00
  %390 = select i1 %389, double 0x7FF8000000000000, double %388
  %391 = tail call double @llvm.fabs.f64(double %51)
  %392 = tail call double @llvm.amdgcn.frexp.mant.f64(double %391)
  %393 = fcmp olt double %392, 0x3FE5555555555555
  %394 = zext i1 %393 to i32
  %395 = tail call double @llvm.amdgcn.ldexp.f64(double %392, i32 %394)
  %396 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %391)
  %397 = sub nsw i32 %396, %394
  %398 = fadd double %395, -1.000000e+00
  %399 = fadd double %395, 1.000000e+00
  %400 = fadd double %399, -1.000000e+00
  %401 = fsub double %395, %400
  %402 = tail call double @llvm.amdgcn.rcp.f64(double %399)
  %403 = fneg double %399
  %404 = tail call double @llvm.fma.f64(double %403, double %402, double 1.000000e+00)
  %405 = tail call double @llvm.fma.f64(double %404, double %402, double %402)
  %406 = tail call double @llvm.fma.f64(double %403, double %405, double 1.000000e+00)
  %407 = tail call double @llvm.fma.f64(double %406, double %405, double %405)
  %408 = fmul double %398, %407
  %409 = fmul double %399, %408
  %410 = fneg double %409
  %411 = tail call double @llvm.fma.f64(double %408, double %399, double %410)
  %412 = tail call double @llvm.fma.f64(double %408, double %401, double %411)
  %413 = fadd double %409, %412
  %414 = fsub double %413, %409
  %415 = fsub double %412, %414
  %416 = fsub double %398, %413
  %417 = fsub double %398, %416
  %418 = fsub double %417, %413
  %419 = fsub double %418, %415
  %420 = fadd double %416, %419
  %421 = fmul double %407, %420
  %422 = fadd double %408, %421
  %423 = fsub double %422, %408
  %424 = fsub double %421, %423
  %425 = fmul double %422, %422
  %426 = fneg double %425
  %427 = tail call double @llvm.fma.f64(double %422, double %422, double %426)
  %428 = fmul double %424, 2.000000e+00
  %429 = tail call double @llvm.fma.f64(double %422, double %428, double %427)
  %430 = fadd double %425, %429
  %431 = fsub double %430, %425
  %432 = fsub double %429, %431
  %433 = tail call double @llvm.fma.f64(double %430, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %434 = tail call double @llvm.fma.f64(double %430, double %433, double 0x3FBE25E43ABE935A)
  %435 = tail call double @llvm.fma.f64(double %430, double %434, double 0x3FC110EF47E6C9C2)
  %436 = tail call double @llvm.fma.f64(double %430, double %435, double 0x3FC3B13BCFA74449)
  %437 = tail call double @llvm.fma.f64(double %430, double %436, double 0x3FC745D171BF3C30)
  %438 = tail call double @llvm.fma.f64(double %430, double %437, double 0x3FCC71C71C7792CE)
  %439 = tail call double @llvm.fma.f64(double %430, double %438, double 0x3FD24924924920DA)
  %440 = tail call double @llvm.fma.f64(double %430, double %439, double 0x3FD999999999999C)
  %441 = sitofp i32 %397 to double
  %442 = fmul double %441, 0x3FE62E42FEFA39EF
  %443 = fneg double %442
  %444 = tail call double @llvm.fma.f64(double %441, double 0x3FE62E42FEFA39EF, double %443)
  %445 = tail call double @llvm.fma.f64(double %441, double 0x3C7ABC9E3B39803F, double %444)
  %446 = fadd double %442, %445
  %447 = fsub double %446, %442
  %448 = fsub double %445, %447
  %449 = tail call double @llvm.amdgcn.ldexp.f64(double %422, i32 1)
  %450 = tail call double @llvm.amdgcn.ldexp.f64(double %424, i32 1)
  %451 = fmul double %422, %430
  %452 = fneg double %451
  %453 = tail call double @llvm.fma.f64(double %430, double %422, double %452)
  %454 = tail call double @llvm.fma.f64(double %430, double %424, double %453)
  %455 = tail call double @llvm.fma.f64(double %432, double %422, double %454)
  %456 = fadd double %451, %455
  %457 = fsub double %456, %451
  %458 = fsub double %455, %457
  %459 = fmul double %430, %440
  %460 = fneg double %459
  %461 = tail call double @llvm.fma.f64(double %430, double %440, double %460)
  %462 = tail call double @llvm.fma.f64(double %432, double %440, double %461)
  %463 = fadd double %459, %462
  %464 = fsub double %463, %459
  %465 = fsub double %462, %464
  %466 = fadd double %463, 0x3FE5555555555555
  %467 = fadd double %466, 0xBFE5555555555555
  %468 = fsub double %463, %467
  %469 = fadd double %465, 0x3C8543B0D5DF274D
  %470 = fadd double %469, %468
  %471 = fadd double %466, %470
  %472 = fsub double %471, %466
  %473 = fsub double %470, %472
  %474 = fmul double %456, %471
  %475 = fneg double %474
  %476 = tail call double @llvm.fma.f64(double %456, double %471, double %475)
  %477 = tail call double @llvm.fma.f64(double %456, double %473, double %476)
  %478 = tail call double @llvm.fma.f64(double %458, double %471, double %477)
  %479 = fadd double %474, %478
  %480 = fsub double %479, %474
  %481 = fsub double %478, %480
  %482 = fadd double %449, %479
  %483 = fsub double %482, %449
  %484 = fsub double %479, %483
  %485 = fadd double %450, %481
  %486 = fadd double %485, %484
  %487 = fadd double %482, %486
  %488 = fsub double %487, %482
  %489 = fsub double %486, %488
  %490 = fadd double %446, %487
  %491 = fsub double %490, %446
  %492 = fsub double %490, %491
  %493 = fsub double %446, %492
  %494 = fsub double %487, %491
  %495 = fadd double %494, %493
  %496 = fadd double %448, %489
  %497 = fsub double %496, %448
  %498 = fsub double %496, %497
  %499 = fsub double %448, %498
  %500 = fsub double %489, %497
  %501 = fadd double %500, %499
  %502 = fadd double %496, %495
  %503 = fadd double %490, %502
  %504 = fsub double %503, %490
  %505 = fsub double %502, %504
  %506 = fadd double %501, %505
  %507 = fadd double %503, %506
  %508 = fsub double %507, %503
  %509 = fsub double %506, %508
  %510 = fmul double %507, 3.000000e+00
  %511 = fneg double %510
  %512 = tail call double @llvm.fma.f64(double %507, double 3.000000e+00, double %511)
  %513 = tail call double @llvm.fma.f64(double %509, double 3.000000e+00, double %512)
  %514 = fadd double %510, %513
  %515 = fsub double %514, %510
  %516 = fsub double %513, %515
  %517 = tail call double @llvm.fabs.f64(double %510) #3
  %518 = fcmp oeq double %517, 0x7FF0000000000000
  %519 = select i1 %518, double %510, double %514
  %520 = tail call double @llvm.fabs.f64(double %519) #3
  %521 = fcmp oeq double %520, 0x7FF0000000000000
  %522 = select i1 %521, double 0.000000e+00, double %516
  %523 = fmul double %519, 0x3FF71547652B82FE
  %524 = tail call double @llvm.rint.f64(double %523)
  %525 = fneg double %524
  %526 = tail call double @llvm.fma.f64(double %525, double 0x3FE62E42FEFA39EF, double %519)
  %527 = tail call double @llvm.fma.f64(double %525, double 0x3C7ABC9E3B39803F, double %526)
  %528 = tail call double @llvm.fma.f64(double %527, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %529 = tail call double @llvm.fma.f64(double %527, double %528, double 0x3EC71DEE623FDE64)
  %530 = tail call double @llvm.fma.f64(double %527, double %529, double 0x3EFA01997C89E6B0)
  %531 = tail call double @llvm.fma.f64(double %527, double %530, double 0x3F2A01A014761F6E)
  %532 = tail call double @llvm.fma.f64(double %527, double %531, double 0x3F56C16C1852B7B0)
  %533 = tail call double @llvm.fma.f64(double %527, double %532, double 0x3F81111111122322)
  %534 = tail call double @llvm.fma.f64(double %527, double %533, double 0x3FA55555555502A1)
  %535 = tail call double @llvm.fma.f64(double %527, double %534, double 0x3FC5555555555511)
  %536 = tail call double @llvm.fma.f64(double %527, double %535, double 0x3FE000000000000B)
  %537 = tail call double @llvm.fma.f64(double %527, double %536, double 1.000000e+00)
  %538 = tail call double @llvm.fma.f64(double %527, double %537, double 1.000000e+00)
  %539 = fptosi double %524 to i32
  %540 = tail call double @llvm.amdgcn.ldexp.f64(double %538, i32 %539)
  %541 = fcmp ogt double %519, 1.024000e+03
  %542 = select i1 %541, double 0x7FF0000000000000, double %540
  %543 = fcmp olt double %519, -1.075000e+03
  %544 = select i1 %543, double 0.000000e+00, double %542
  %545 = tail call double @llvm.fma.f64(double %544, double %522, double %544)
  %546 = tail call double @llvm.fabs.f64(double %544) #3
  %547 = fcmp oeq double %546, 0x7FF0000000000000
  %548 = select i1 %547, double %544, double %545
  %549 = fcmp uge double %51, 0.000000e+00
  %550 = select i1 %549, double 0.000000e+00, double -0.000000e+00
  %551 = tail call double @llvm.copysign.f64(double %548, double %550)
  %552 = fcmp oeq double %391, 0x7FF0000000000000
  %553 = fcmp oeq double %51, 0.000000e+00
  %554 = or i1 %553, %552
  %555 = select i1 %553, double 0.000000e+00, double 0x7FF0000000000000
  %556 = tail call double @llvm.copysign.f64(double %555, double %51)
  %557 = select i1 %554, double %556, double %551
  %558 = fcmp uno double %51, 0.000000e+00
  %559 = select i1 %558, double 0x7FF8000000000000, double %557
  %560 = fsub contract double %390, %559
  %561 = fmul contract double %560, %221
  %562 = fdiv contract double %561, 3.000000e+00
  br label %566

563:                                              ; preds = %41
  %564 = fsub contract double %47, %51
  %565 = fmul contract double %564, %54
  br label %566

566:                                              ; preds = %563, %55
  %567 = phi double [ %562, %55 ], [ %565, %563 ]
  %568 = mul i32 %38, %26
  %569 = add i32 %568, %39
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds double, double addrspace(1)* %3, i64 %570
  %572 = load double, double addrspace(1)* %571, align 8, !tbaa !16, !amdgpu.noclobber !5
  %573 = shl nsw i32 %26, 1
  %574 = add nuw nsw i32 %573, 1
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds double, double addrspace(1)* %12, i64 %575
  %577 = load double, double addrspace(1)* %576, align 8, !tbaa !16, !amdgpu.noclobber !5
  %578 = tail call double @llvm.fabs.f64(double %577)
  %579 = fcmp olt double %578, 0x41D0000000000000
  br i1 %579, label %580, label %599

580:                                              ; preds = %566
  %581 = fmul double %578, 0x3FE45F306DC9C883
  %582 = tail call double @llvm.rint.f64(double %581)
  %583 = tail call double @llvm.fma.f64(double %582, double 0xBFF921FB54442D18, double %578)
  %584 = tail call double @llvm.fma.f64(double %582, double 0xBC91A62633145C00, double %583)
  %585 = fmul double %582, 0x3C91A62633145C00
  %586 = fneg double %585
  %587 = tail call double @llvm.fma.f64(double %582, double 0x3C91A62633145C00, double %586)
  %588 = fsub double %583, %585
  %589 = fsub double %583, %588
  %590 = fsub double %589, %585
  %591 = fsub double %588, %584
  %592 = fadd double %591, %590
  %593 = fsub double %592, %587
  %594 = tail call double @llvm.fma.f64(double %582, double 0xB97B839A252049C0, double %593)
  %595 = fadd double %584, %594
  %596 = fsub double %595, %584
  %597 = fsub double %594, %596
  %598 = fptosi double %582 to i32
  br label %675

599:                                              ; preds = %566
  %600 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 0)
  %601 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 1)
  %602 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 2)
  %603 = fcmp oge double %578, 0x7B00000000000000
  %604 = tail call double @llvm.amdgcn.ldexp.f64(double %578, i32 -128)
  %605 = select i1 %603, double %604, double %578
  %606 = fmul double %602, %605
  %607 = fneg double %606
  %608 = tail call double @llvm.fma.f64(double %602, double %605, double %607)
  %609 = fmul double %601, %605
  %610 = fneg double %609
  %611 = tail call double @llvm.fma.f64(double %601, double %605, double %610)
  %612 = fmul double %600, %605
  %613 = fneg double %612
  %614 = tail call double @llvm.fma.f64(double %600, double %605, double %613)
  %615 = fadd double %609, %614
  %616 = fsub double %615, %609
  %617 = fsub double %615, %616
  %618 = fsub double %614, %616
  %619 = fsub double %609, %617
  %620 = fadd double %618, %619
  %621 = fadd double %606, %611
  %622 = fsub double %621, %606
  %623 = fsub double %621, %622
  %624 = fsub double %611, %622
  %625 = fsub double %606, %623
  %626 = fadd double %624, %625
  %627 = fadd double %621, %620
  %628 = fsub double %627, %621
  %629 = fsub double %627, %628
  %630 = fsub double %620, %628
  %631 = fsub double %621, %629
  %632 = fadd double %630, %631
  %633 = fadd double %626, %632
  %634 = fadd double %608, %633
  %635 = fadd double %612, %615
  %636 = fsub double %635, %612
  %637 = fsub double %615, %636
  %638 = fadd double %637, %627
  %639 = fsub double %638, %637
  %640 = fsub double %627, %639
  %641 = fadd double %640, %634
  %642 = tail call double @llvm.amdgcn.ldexp.f64(double %635, i32 -2)
  %643 = tail call double @llvm.amdgcn.fract.f64(double %642)
  %644 = tail call i1 @llvm.amdgcn.class.f64(double %642, i32 516)
  %645 = select i1 %644, double 0.000000e+00, double %643
  %646 = tail call double @llvm.amdgcn.ldexp.f64(double %645, i32 2)
  %647 = fadd double %646, %638
  %648 = fcmp olt double %647, 0.000000e+00
  %649 = select i1 %648, double 4.000000e+00, double 0.000000e+00
  %650 = fadd double %646, %649
  %651 = fadd double %638, %650
  %652 = fptosi double %651 to i32
  %653 = sitofp i32 %652 to double
  %654 = fsub double %650, %653
  %655 = fadd double %638, %654
  %656 = fsub double %655, %654
  %657 = fsub double %638, %656
  %658 = fadd double %641, %657
  %659 = fcmp oge double %655, 5.000000e-01
  %660 = zext i1 %659 to i32
  %661 = add nsw i32 %660, %652
  %662 = select i1 %659, double 1.000000e+00, double 0.000000e+00
  %663 = fsub double %655, %662
  %664 = fadd double %663, %658
  %665 = fsub double %664, %663
  %666 = fsub double %658, %665
  %667 = fmul double %664, 0x3FF921FB54442D18
  %668 = fneg double %667
  %669 = tail call double @llvm.fma.f64(double %664, double 0x3FF921FB54442D18, double %668)
  %670 = tail call double @llvm.fma.f64(double %664, double 0x3C91A62633145C07, double %669)
  %671 = tail call double @llvm.fma.f64(double %666, double 0x3FF921FB54442D18, double %670)
  %672 = fadd double %667, %671
  %673 = fsub double %672, %667
  %674 = fsub double %671, %673
  br label %675

675:                                              ; preds = %580, %599
  %676 = phi double [ %597, %580 ], [ %674, %599 ]
  %677 = phi double [ %595, %580 ], [ %672, %599 ]
  %678 = phi i32 [ %598, %580 ], [ %661, %599 ]
  %679 = fmul double %677, %677
  %680 = fmul double %679, 5.000000e-01
  %681 = fsub double 1.000000e+00, %680
  %682 = fsub double 1.000000e+00, %681
  %683 = fsub double %682, %680
  %684 = fmul double %679, %679
  %685 = tail call double @llvm.fma.f64(double %679, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %686 = tail call double @llvm.fma.f64(double %679, double %685, double 0xBE927E4FA17F65F6)
  %687 = tail call double @llvm.fma.f64(double %679, double %686, double 0x3EFA01A019F4EC90)
  %688 = tail call double @llvm.fma.f64(double %679, double %687, double 0xBF56C16C16C16967)
  %689 = tail call double @llvm.fma.f64(double %679, double %688, double 0x3FA5555555555555)
  %690 = fneg double %676
  %691 = tail call double @llvm.fma.f64(double %677, double %690, double %683)
  %692 = tail call double @llvm.fma.f64(double %684, double %689, double %691)
  %693 = fadd double %681, %692
  %694 = tail call double @llvm.fma.f64(double %679, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %695 = tail call double @llvm.fma.f64(double %679, double %694, double 0x3EC71DE3796CDE01)
  %696 = tail call double @llvm.fma.f64(double %679, double %695, double 0xBF2A01A019E83E5C)
  %697 = tail call double @llvm.fma.f64(double %679, double %696, double 0x3F81111111110BB3)
  %698 = fneg double %679
  %699 = fmul double %677, %698
  %700 = fmul double %676, 5.000000e-01
  %701 = tail call double @llvm.fma.f64(double %699, double %697, double %700)
  %702 = tail call double @llvm.fma.f64(double %679, double %701, double %690)
  %703 = tail call double @llvm.fma.f64(double %699, double 0xBFC5555555555555, double %702)
  %704 = fsub double %677, %703
  %705 = fneg double %704
  %706 = and i32 %678, 1
  %707 = icmp eq i32 %706, 0
  %708 = select i1 %707, double %693, double %705
  %709 = bitcast double %708 to <2 x i32>
  %710 = shl i32 %678, 30
  %711 = and i32 %710, -2147483648
  %712 = extractelement <2 x i32> %709, i64 1
  %713 = xor i32 %712, %711
  %714 = insertelement <2 x i32> %709, i32 %713, i64 1
  %715 = tail call i1 @llvm.amdgcn.class.f64(double %578, i32 504)
  %716 = select i1 %715, <2 x i32> %714, <2 x i32> <i32 0, i32 2146959360>
  %717 = bitcast <2 x i32> %716 to double
  %718 = fmul contract double %572, %717
  %719 = sext i32 %573 to i64
  %720 = getelementptr inbounds double, double addrspace(1)* %12, i64 %719
  %721 = load double, double addrspace(1)* %720, align 8, !tbaa !16, !amdgpu.noclobber !5
  %722 = tail call double @llvm.fabs.f64(double %721)
  %723 = fcmp olt double %722, 0x41D0000000000000
  br i1 %723, label %724, label %743

724:                                              ; preds = %675
  %725 = fmul double %722, 0x3FE45F306DC9C883
  %726 = tail call double @llvm.rint.f64(double %725)
  %727 = tail call double @llvm.fma.f64(double %726, double 0xBFF921FB54442D18, double %722)
  %728 = tail call double @llvm.fma.f64(double %726, double 0xBC91A62633145C00, double %727)
  %729 = fmul double %726, 0x3C91A62633145C00
  %730 = fneg double %729
  %731 = tail call double @llvm.fma.f64(double %726, double 0x3C91A62633145C00, double %730)
  %732 = fsub double %727, %729
  %733 = fsub double %727, %732
  %734 = fsub double %733, %729
  %735 = fsub double %732, %728
  %736 = fadd double %735, %734
  %737 = fsub double %736, %731
  %738 = tail call double @llvm.fma.f64(double %726, double 0xB97B839A252049C0, double %737)
  %739 = fadd double %728, %738
  %740 = fsub double %739, %728
  %741 = fsub double %738, %740
  %742 = fptosi double %726 to i32
  br label %819

743:                                              ; preds = %675
  %744 = tail call double @llvm.amdgcn.trig.preop.f64(double %722, i32 0)
  %745 = tail call double @llvm.amdgcn.trig.preop.f64(double %722, i32 1)
  %746 = tail call double @llvm.amdgcn.trig.preop.f64(double %722, i32 2)
  %747 = fcmp oge double %722, 0x7B00000000000000
  %748 = tail call double @llvm.amdgcn.ldexp.f64(double %722, i32 -128)
  %749 = select i1 %747, double %748, double %722
  %750 = fmul double %746, %749
  %751 = fneg double %750
  %752 = tail call double @llvm.fma.f64(double %746, double %749, double %751)
  %753 = fmul double %745, %749
  %754 = fneg double %753
  %755 = tail call double @llvm.fma.f64(double %745, double %749, double %754)
  %756 = fmul double %744, %749
  %757 = fneg double %756
  %758 = tail call double @llvm.fma.f64(double %744, double %749, double %757)
  %759 = fadd double %753, %758
  %760 = fsub double %759, %753
  %761 = fsub double %759, %760
  %762 = fsub double %758, %760
  %763 = fsub double %753, %761
  %764 = fadd double %762, %763
  %765 = fadd double %750, %755
  %766 = fsub double %765, %750
  %767 = fsub double %765, %766
  %768 = fsub double %755, %766
  %769 = fsub double %750, %767
  %770 = fadd double %768, %769
  %771 = fadd double %765, %764
  %772 = fsub double %771, %765
  %773 = fsub double %771, %772
  %774 = fsub double %764, %772
  %775 = fsub double %765, %773
  %776 = fadd double %774, %775
  %777 = fadd double %770, %776
  %778 = fadd double %752, %777
  %779 = fadd double %756, %759
  %780 = fsub double %779, %756
  %781 = fsub double %759, %780
  %782 = fadd double %781, %771
  %783 = fsub double %782, %781
  %784 = fsub double %771, %783
  %785 = fadd double %784, %778
  %786 = tail call double @llvm.amdgcn.ldexp.f64(double %779, i32 -2)
  %787 = tail call double @llvm.amdgcn.fract.f64(double %786)
  %788 = tail call i1 @llvm.amdgcn.class.f64(double %786, i32 516)
  %789 = select i1 %788, double 0.000000e+00, double %787
  %790 = tail call double @llvm.amdgcn.ldexp.f64(double %789, i32 2)
  %791 = fadd double %790, %782
  %792 = fcmp olt double %791, 0.000000e+00
  %793 = select i1 %792, double 4.000000e+00, double 0.000000e+00
  %794 = fadd double %790, %793
  %795 = fadd double %782, %794
  %796 = fptosi double %795 to i32
  %797 = sitofp i32 %796 to double
  %798 = fsub double %794, %797
  %799 = fadd double %782, %798
  %800 = fsub double %799, %798
  %801 = fsub double %782, %800
  %802 = fadd double %785, %801
  %803 = fcmp oge double %799, 5.000000e-01
  %804 = zext i1 %803 to i32
  %805 = add nsw i32 %804, %796
  %806 = select i1 %803, double 1.000000e+00, double 0.000000e+00
  %807 = fsub double %799, %806
  %808 = fadd double %807, %802
  %809 = fsub double %808, %807
  %810 = fsub double %802, %809
  %811 = fmul double %808, 0x3FF921FB54442D18
  %812 = fneg double %811
  %813 = tail call double @llvm.fma.f64(double %808, double 0x3FF921FB54442D18, double %812)
  %814 = tail call double @llvm.fma.f64(double %808, double 0x3C91A62633145C07, double %813)
  %815 = tail call double @llvm.fma.f64(double %810, double 0x3FF921FB54442D18, double %814)
  %816 = fadd double %811, %815
  %817 = fsub double %816, %811
  %818 = fsub double %815, %817
  br label %819

819:                                              ; preds = %724, %743
  %820 = phi double [ %741, %724 ], [ %818, %743 ]
  %821 = phi double [ %739, %724 ], [ %816, %743 ]
  %822 = phi i32 [ %742, %724 ], [ %805, %743 ]
  %823 = fmul double %821, %821
  %824 = fmul double %823, 5.000000e-01
  %825 = fsub double 1.000000e+00, %824
  %826 = fsub double 1.000000e+00, %825
  %827 = fsub double %826, %824
  %828 = fmul double %823, %823
  %829 = tail call double @llvm.fma.f64(double %823, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %830 = tail call double @llvm.fma.f64(double %823, double %829, double 0xBE927E4FA17F65F6)
  %831 = tail call double @llvm.fma.f64(double %823, double %830, double 0x3EFA01A019F4EC90)
  %832 = tail call double @llvm.fma.f64(double %823, double %831, double 0xBF56C16C16C16967)
  %833 = tail call double @llvm.fma.f64(double %823, double %832, double 0x3FA5555555555555)
  %834 = fneg double %820
  %835 = tail call double @llvm.fma.f64(double %821, double %834, double %827)
  %836 = tail call double @llvm.fma.f64(double %828, double %833, double %835)
  %837 = fadd double %825, %836
  %838 = tail call double @llvm.fma.f64(double %823, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %839 = tail call double @llvm.fma.f64(double %823, double %838, double 0x3EC71DE3796CDE01)
  %840 = tail call double @llvm.fma.f64(double %823, double %839, double 0xBF2A01A019E83E5C)
  %841 = tail call double @llvm.fma.f64(double %823, double %840, double 0x3F81111111110BB3)
  %842 = fneg double %823
  %843 = fmul double %821, %842
  %844 = fmul double %820, 5.000000e-01
  %845 = tail call double @llvm.fma.f64(double %843, double %841, double %844)
  %846 = tail call double @llvm.fma.f64(double %823, double %845, double %834)
  %847 = tail call double @llvm.fma.f64(double %843, double 0xBFC5555555555555, double %846)
  %848 = fsub double %821, %847
  %849 = fneg double %848
  %850 = and i32 %822, 1
  %851 = icmp eq i32 %850, 0
  %852 = select i1 %851, double %837, double %849
  %853 = bitcast double %852 to <2 x i32>
  %854 = shl i32 %822, 30
  %855 = and i32 %854, -2147483648
  %856 = extractelement <2 x i32> %853, i64 1
  %857 = xor i32 %856, %855
  %858 = insertelement <2 x i32> %853, i32 %857, i64 1
  %859 = tail call i1 @llvm.amdgcn.class.f64(double %722, i32 504)
  %860 = select i1 %859, <2 x i32> %858, <2 x i32> <i32 0, i32 2146959360>
  %861 = bitcast <2 x i32> %860 to double
  %862 = fmul contract double %718, %861
  br i1 %579, label %863, label %882

863:                                              ; preds = %819
  %864 = fmul double %578, 0x3FE45F306DC9C883
  %865 = tail call double @llvm.rint.f64(double %864)
  %866 = tail call double @llvm.fma.f64(double %865, double 0xBFF921FB54442D18, double %578)
  %867 = tail call double @llvm.fma.f64(double %865, double 0xBC91A62633145C00, double %866)
  %868 = fmul double %865, 0x3C91A62633145C00
  %869 = fneg double %868
  %870 = tail call double @llvm.fma.f64(double %865, double 0x3C91A62633145C00, double %869)
  %871 = fsub double %866, %868
  %872 = fsub double %866, %871
  %873 = fsub double %872, %868
  %874 = fsub double %871, %867
  %875 = fadd double %874, %873
  %876 = fsub double %875, %870
  %877 = tail call double @llvm.fma.f64(double %865, double 0xB97B839A252049C0, double %876)
  %878 = fadd double %867, %877
  %879 = fsub double %878, %867
  %880 = fsub double %877, %879
  %881 = fptosi double %865 to i32
  br label %958

882:                                              ; preds = %819
  %883 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 0)
  %884 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 1)
  %885 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 2)
  %886 = fcmp oge double %578, 0x7B00000000000000
  %887 = tail call double @llvm.amdgcn.ldexp.f64(double %578, i32 -128)
  %888 = select i1 %886, double %887, double %578
  %889 = fmul double %885, %888
  %890 = fneg double %889
  %891 = tail call double @llvm.fma.f64(double %885, double %888, double %890)
  %892 = fmul double %884, %888
  %893 = fneg double %892
  %894 = tail call double @llvm.fma.f64(double %884, double %888, double %893)
  %895 = fmul double %883, %888
  %896 = fneg double %895
  %897 = tail call double @llvm.fma.f64(double %883, double %888, double %896)
  %898 = fadd double %892, %897
  %899 = fsub double %898, %892
  %900 = fsub double %898, %899
  %901 = fsub double %897, %899
  %902 = fsub double %892, %900
  %903 = fadd double %901, %902
  %904 = fadd double %889, %894
  %905 = fsub double %904, %889
  %906 = fsub double %904, %905
  %907 = fsub double %894, %905
  %908 = fsub double %889, %906
  %909 = fadd double %907, %908
  %910 = fadd double %904, %903
  %911 = fsub double %910, %904
  %912 = fsub double %910, %911
  %913 = fsub double %903, %911
  %914 = fsub double %904, %912
  %915 = fadd double %913, %914
  %916 = fadd double %909, %915
  %917 = fadd double %891, %916
  %918 = fadd double %895, %898
  %919 = fsub double %918, %895
  %920 = fsub double %898, %919
  %921 = fadd double %920, %910
  %922 = fsub double %921, %920
  %923 = fsub double %910, %922
  %924 = fadd double %923, %917
  %925 = tail call double @llvm.amdgcn.ldexp.f64(double %918, i32 -2)
  %926 = tail call double @llvm.amdgcn.fract.f64(double %925)
  %927 = tail call i1 @llvm.amdgcn.class.f64(double %925, i32 516)
  %928 = select i1 %927, double 0.000000e+00, double %926
  %929 = tail call double @llvm.amdgcn.ldexp.f64(double %928, i32 2)
  %930 = fadd double %929, %921
  %931 = fcmp olt double %930, 0.000000e+00
  %932 = select i1 %931, double 4.000000e+00, double 0.000000e+00
  %933 = fadd double %929, %932
  %934 = fadd double %921, %933
  %935 = fptosi double %934 to i32
  %936 = sitofp i32 %935 to double
  %937 = fsub double %933, %936
  %938 = fadd double %921, %937
  %939 = fsub double %938, %937
  %940 = fsub double %921, %939
  %941 = fadd double %924, %940
  %942 = fcmp oge double %938, 5.000000e-01
  %943 = zext i1 %942 to i32
  %944 = add nsw i32 %943, %935
  %945 = select i1 %942, double 1.000000e+00, double 0.000000e+00
  %946 = fsub double %938, %945
  %947 = fadd double %946, %941
  %948 = fsub double %947, %946
  %949 = fsub double %941, %948
  %950 = fmul double %947, 0x3FF921FB54442D18
  %951 = fneg double %950
  %952 = tail call double @llvm.fma.f64(double %947, double 0x3FF921FB54442D18, double %951)
  %953 = tail call double @llvm.fma.f64(double %947, double 0x3C91A62633145C07, double %952)
  %954 = tail call double @llvm.fma.f64(double %949, double 0x3FF921FB54442D18, double %953)
  %955 = fadd double %950, %954
  %956 = fsub double %955, %950
  %957 = fsub double %954, %956
  br label %958

958:                                              ; preds = %863, %882
  %959 = phi double [ %880, %863 ], [ %957, %882 ]
  %960 = phi double [ %878, %863 ], [ %955, %882 ]
  %961 = phi i32 [ %881, %863 ], [ %944, %882 ]
  %962 = fmul double %960, %960
  %963 = fmul double %962, 5.000000e-01
  %964 = fsub double 1.000000e+00, %963
  %965 = fsub double 1.000000e+00, %964
  %966 = fsub double %965, %963
  %967 = fmul double %962, %962
  %968 = tail call double @llvm.fma.f64(double %962, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %969 = tail call double @llvm.fma.f64(double %962, double %968, double 0xBE927E4FA17F65F6)
  %970 = tail call double @llvm.fma.f64(double %962, double %969, double 0x3EFA01A019F4EC90)
  %971 = tail call double @llvm.fma.f64(double %962, double %970, double 0xBF56C16C16C16967)
  %972 = tail call double @llvm.fma.f64(double %962, double %971, double 0x3FA5555555555555)
  %973 = fneg double %959
  %974 = tail call double @llvm.fma.f64(double %960, double %973, double %966)
  %975 = tail call double @llvm.fma.f64(double %967, double %972, double %974)
  %976 = fadd double %964, %975
  %977 = tail call double @llvm.fma.f64(double %962, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %978 = tail call double @llvm.fma.f64(double %962, double %977, double 0x3EC71DE3796CDE01)
  %979 = tail call double @llvm.fma.f64(double %962, double %978, double 0xBF2A01A019E83E5C)
  %980 = tail call double @llvm.fma.f64(double %962, double %979, double 0x3F81111111110BB3)
  %981 = fneg double %962
  %982 = fmul double %960, %981
  %983 = fmul double %959, 5.000000e-01
  %984 = tail call double @llvm.fma.f64(double %982, double %980, double %983)
  %985 = tail call double @llvm.fma.f64(double %962, double %984, double %973)
  %986 = tail call double @llvm.fma.f64(double %982, double 0xBFC5555555555555, double %985)
  %987 = fsub double %960, %986
  %988 = fneg double %987
  %989 = and i32 %961, 1
  %990 = icmp eq i32 %989, 0
  %991 = select i1 %990, double %976, double %988
  %992 = bitcast double %991 to <2 x i32>
  %993 = shl i32 %961, 30
  %994 = and i32 %993, -2147483648
  %995 = extractelement <2 x i32> %992, i64 1
  %996 = xor i32 %995, %994
  %997 = insertelement <2 x i32> %992, i32 %996, i64 1
  %998 = select i1 %715, <2 x i32> %997, <2 x i32> <i32 0, i32 2146959360>
  %999 = bitcast <2 x i32> %998 to double
  %1000 = fmul contract double %572, %999
  br i1 %723, label %1001, label %1020

1001:                                             ; preds = %958
  %1002 = fmul double %722, 0x3FE45F306DC9C883
  %1003 = tail call double @llvm.rint.f64(double %1002)
  %1004 = tail call double @llvm.fma.f64(double %1003, double 0xBFF921FB54442D18, double %722)
  %1005 = tail call double @llvm.fma.f64(double %1003, double 0xBC91A62633145C00, double %1004)
  %1006 = fmul double %1003, 0x3C91A62633145C00
  %1007 = fneg double %1006
  %1008 = tail call double @llvm.fma.f64(double %1003, double 0x3C91A62633145C00, double %1007)
  %1009 = fsub double %1004, %1006
  %1010 = fsub double %1004, %1009
  %1011 = fsub double %1010, %1006
  %1012 = fsub double %1009, %1005
  %1013 = fadd double %1012, %1011
  %1014 = fsub double %1013, %1008
  %1015 = tail call double @llvm.fma.f64(double %1003, double 0xB97B839A252049C0, double %1014)
  %1016 = fadd double %1005, %1015
  %1017 = fsub double %1016, %1005
  %1018 = fsub double %1015, %1017
  %1019 = fptosi double %1003 to i32
  br label %1096

1020:                                             ; preds = %958
  %1021 = tail call double @llvm.amdgcn.trig.preop.f64(double %722, i32 0)
  %1022 = tail call double @llvm.amdgcn.trig.preop.f64(double %722, i32 1)
  %1023 = tail call double @llvm.amdgcn.trig.preop.f64(double %722, i32 2)
  %1024 = fcmp oge double %722, 0x7B00000000000000
  %1025 = tail call double @llvm.amdgcn.ldexp.f64(double %722, i32 -128)
  %1026 = select i1 %1024, double %1025, double %722
  %1027 = fmul double %1023, %1026
  %1028 = fneg double %1027
  %1029 = tail call double @llvm.fma.f64(double %1023, double %1026, double %1028)
  %1030 = fmul double %1022, %1026
  %1031 = fneg double %1030
  %1032 = tail call double @llvm.fma.f64(double %1022, double %1026, double %1031)
  %1033 = fmul double %1021, %1026
  %1034 = fneg double %1033
  %1035 = tail call double @llvm.fma.f64(double %1021, double %1026, double %1034)
  %1036 = fadd double %1030, %1035
  %1037 = fsub double %1036, %1030
  %1038 = fsub double %1036, %1037
  %1039 = fsub double %1035, %1037
  %1040 = fsub double %1030, %1038
  %1041 = fadd double %1039, %1040
  %1042 = fadd double %1027, %1032
  %1043 = fsub double %1042, %1027
  %1044 = fsub double %1042, %1043
  %1045 = fsub double %1032, %1043
  %1046 = fsub double %1027, %1044
  %1047 = fadd double %1045, %1046
  %1048 = fadd double %1042, %1041
  %1049 = fsub double %1048, %1042
  %1050 = fsub double %1048, %1049
  %1051 = fsub double %1041, %1049
  %1052 = fsub double %1042, %1050
  %1053 = fadd double %1051, %1052
  %1054 = fadd double %1047, %1053
  %1055 = fadd double %1029, %1054
  %1056 = fadd double %1033, %1036
  %1057 = fsub double %1056, %1033
  %1058 = fsub double %1036, %1057
  %1059 = fadd double %1058, %1048
  %1060 = fsub double %1059, %1058
  %1061 = fsub double %1048, %1060
  %1062 = fadd double %1061, %1055
  %1063 = tail call double @llvm.amdgcn.ldexp.f64(double %1056, i32 -2)
  %1064 = tail call double @llvm.amdgcn.fract.f64(double %1063)
  %1065 = tail call i1 @llvm.amdgcn.class.f64(double %1063, i32 516)
  %1066 = select i1 %1065, double 0.000000e+00, double %1064
  %1067 = tail call double @llvm.amdgcn.ldexp.f64(double %1066, i32 2)
  %1068 = fadd double %1067, %1059
  %1069 = fcmp olt double %1068, 0.000000e+00
  %1070 = select i1 %1069, double 4.000000e+00, double 0.000000e+00
  %1071 = fadd double %1067, %1070
  %1072 = fadd double %1059, %1071
  %1073 = fptosi double %1072 to i32
  %1074 = sitofp i32 %1073 to double
  %1075 = fsub double %1071, %1074
  %1076 = fadd double %1059, %1075
  %1077 = fsub double %1076, %1075
  %1078 = fsub double %1059, %1077
  %1079 = fadd double %1062, %1078
  %1080 = fcmp oge double %1076, 5.000000e-01
  %1081 = zext i1 %1080 to i32
  %1082 = add nsw i32 %1081, %1073
  %1083 = select i1 %1080, double 1.000000e+00, double 0.000000e+00
  %1084 = fsub double %1076, %1083
  %1085 = fadd double %1084, %1079
  %1086 = fsub double %1085, %1084
  %1087 = fsub double %1079, %1086
  %1088 = fmul double %1085, 0x3FF921FB54442D18
  %1089 = fneg double %1088
  %1090 = tail call double @llvm.fma.f64(double %1085, double 0x3FF921FB54442D18, double %1089)
  %1091 = tail call double @llvm.fma.f64(double %1085, double 0x3C91A62633145C07, double %1090)
  %1092 = tail call double @llvm.fma.f64(double %1087, double 0x3FF921FB54442D18, double %1091)
  %1093 = fadd double %1088, %1092
  %1094 = fsub double %1093, %1088
  %1095 = fsub double %1092, %1094
  br label %1096

1096:                                             ; preds = %1001, %1020
  %1097 = phi double [ %1018, %1001 ], [ %1095, %1020 ]
  %1098 = phi double [ %1016, %1001 ], [ %1093, %1020 ]
  %1099 = phi i32 [ %1019, %1001 ], [ %1082, %1020 ]
  %1100 = fmul double %1098, %1098
  %1101 = fmul double %1100, 5.000000e-01
  %1102 = fsub double 1.000000e+00, %1101
  %1103 = fsub double 1.000000e+00, %1102
  %1104 = fsub double %1103, %1101
  %1105 = fmul double %1100, %1100
  %1106 = tail call double @llvm.fma.f64(double %1100, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1107 = tail call double @llvm.fma.f64(double %1100, double %1106, double 0xBE927E4FA17F65F6)
  %1108 = tail call double @llvm.fma.f64(double %1100, double %1107, double 0x3EFA01A019F4EC90)
  %1109 = tail call double @llvm.fma.f64(double %1100, double %1108, double 0xBF56C16C16C16967)
  %1110 = tail call double @llvm.fma.f64(double %1100, double %1109, double 0x3FA5555555555555)
  %1111 = fneg double %1097
  %1112 = tail call double @llvm.fma.f64(double %1098, double %1111, double %1104)
  %1113 = tail call double @llvm.fma.f64(double %1105, double %1110, double %1112)
  %1114 = fadd double %1102, %1113
  %1115 = tail call double @llvm.fma.f64(double %1100, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1116 = tail call double @llvm.fma.f64(double %1100, double %1115, double 0x3EC71DE3796CDE01)
  %1117 = tail call double @llvm.fma.f64(double %1100, double %1116, double 0xBF2A01A019E83E5C)
  %1118 = tail call double @llvm.fma.f64(double %1100, double %1117, double 0x3F81111111110BB3)
  %1119 = fneg double %1100
  %1120 = fmul double %1098, %1119
  %1121 = fmul double %1097, 5.000000e-01
  %1122 = tail call double @llvm.fma.f64(double %1120, double %1118, double %1121)
  %1123 = tail call double @llvm.fma.f64(double %1100, double %1122, double %1111)
  %1124 = tail call double @llvm.fma.f64(double %1120, double 0xBFC5555555555555, double %1123)
  %1125 = fsub double %1098, %1124
  %1126 = and i32 %1099, 1
  %1127 = icmp eq i32 %1126, 0
  %1128 = select i1 %1127, double %1125, double %1114
  %1129 = bitcast double %1128 to <2 x i32>
  %1130 = shl i32 %1099, 30
  %1131 = bitcast double %721 to <2 x i32>
  %1132 = extractelement <2 x i32> %1131, i64 1
  %1133 = xor i32 %1130, %1132
  %1134 = and i32 %1133, -2147483648
  %1135 = extractelement <2 x i32> %1129, i64 1
  %1136 = xor i32 %1135, %1134
  %1137 = insertelement <2 x i32> %1129, i32 %1136, i64 1
  %1138 = select i1 %859, <2 x i32> %1137, <2 x i32> <i32 0, i32 2146959360>
  %1139 = bitcast <2 x i32> %1138 to double
  %1140 = fmul contract double %1000, %1139
  br i1 %579, label %1141, label %1160

1141:                                             ; preds = %1096
  %1142 = fmul double %578, 0x3FE45F306DC9C883
  %1143 = tail call double @llvm.rint.f64(double %1142)
  %1144 = tail call double @llvm.fma.f64(double %1143, double 0xBFF921FB54442D18, double %578)
  %1145 = tail call double @llvm.fma.f64(double %1143, double 0xBC91A62633145C00, double %1144)
  %1146 = fmul double %1143, 0x3C91A62633145C00
  %1147 = fneg double %1146
  %1148 = tail call double @llvm.fma.f64(double %1143, double 0x3C91A62633145C00, double %1147)
  %1149 = fsub double %1144, %1146
  %1150 = fsub double %1144, %1149
  %1151 = fsub double %1150, %1146
  %1152 = fsub double %1149, %1145
  %1153 = fadd double %1152, %1151
  %1154 = fsub double %1153, %1148
  %1155 = tail call double @llvm.fma.f64(double %1143, double 0xB97B839A252049C0, double %1154)
  %1156 = fadd double %1145, %1155
  %1157 = fsub double %1156, %1145
  %1158 = fsub double %1155, %1157
  %1159 = fptosi double %1143 to i32
  br label %1236

1160:                                             ; preds = %1096
  %1161 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 0)
  %1162 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 1)
  %1163 = tail call double @llvm.amdgcn.trig.preop.f64(double %578, i32 2)
  %1164 = fcmp oge double %578, 0x7B00000000000000
  %1165 = tail call double @llvm.amdgcn.ldexp.f64(double %578, i32 -128)
  %1166 = select i1 %1164, double %1165, double %578
  %1167 = fmul double %1163, %1166
  %1168 = fneg double %1167
  %1169 = tail call double @llvm.fma.f64(double %1163, double %1166, double %1168)
  %1170 = fmul double %1162, %1166
  %1171 = fneg double %1170
  %1172 = tail call double @llvm.fma.f64(double %1162, double %1166, double %1171)
  %1173 = fmul double %1161, %1166
  %1174 = fneg double %1173
  %1175 = tail call double @llvm.fma.f64(double %1161, double %1166, double %1174)
  %1176 = fadd double %1170, %1175
  %1177 = fsub double %1176, %1170
  %1178 = fsub double %1176, %1177
  %1179 = fsub double %1175, %1177
  %1180 = fsub double %1170, %1178
  %1181 = fadd double %1179, %1180
  %1182 = fadd double %1167, %1172
  %1183 = fsub double %1182, %1167
  %1184 = fsub double %1182, %1183
  %1185 = fsub double %1172, %1183
  %1186 = fsub double %1167, %1184
  %1187 = fadd double %1185, %1186
  %1188 = fadd double %1182, %1181
  %1189 = fsub double %1188, %1182
  %1190 = fsub double %1188, %1189
  %1191 = fsub double %1181, %1189
  %1192 = fsub double %1182, %1190
  %1193 = fadd double %1191, %1192
  %1194 = fadd double %1187, %1193
  %1195 = fadd double %1169, %1194
  %1196 = fadd double %1173, %1176
  %1197 = fsub double %1196, %1173
  %1198 = fsub double %1176, %1197
  %1199 = fadd double %1198, %1188
  %1200 = fsub double %1199, %1198
  %1201 = fsub double %1188, %1200
  %1202 = fadd double %1201, %1195
  %1203 = tail call double @llvm.amdgcn.ldexp.f64(double %1196, i32 -2)
  %1204 = tail call double @llvm.amdgcn.fract.f64(double %1203)
  %1205 = tail call i1 @llvm.amdgcn.class.f64(double %1203, i32 516)
  %1206 = select i1 %1205, double 0.000000e+00, double %1204
  %1207 = tail call double @llvm.amdgcn.ldexp.f64(double %1206, i32 2)
  %1208 = fadd double %1207, %1199
  %1209 = fcmp olt double %1208, 0.000000e+00
  %1210 = select i1 %1209, double 4.000000e+00, double 0.000000e+00
  %1211 = fadd double %1207, %1210
  %1212 = fadd double %1199, %1211
  %1213 = fptosi double %1212 to i32
  %1214 = sitofp i32 %1213 to double
  %1215 = fsub double %1211, %1214
  %1216 = fadd double %1199, %1215
  %1217 = fsub double %1216, %1215
  %1218 = fsub double %1199, %1217
  %1219 = fadd double %1202, %1218
  %1220 = fcmp oge double %1216, 5.000000e-01
  %1221 = zext i1 %1220 to i32
  %1222 = add nsw i32 %1221, %1213
  %1223 = select i1 %1220, double 1.000000e+00, double 0.000000e+00
  %1224 = fsub double %1216, %1223
  %1225 = fadd double %1224, %1219
  %1226 = fsub double %1225, %1224
  %1227 = fsub double %1219, %1226
  %1228 = fmul double %1225, 0x3FF921FB54442D18
  %1229 = fneg double %1228
  %1230 = tail call double @llvm.fma.f64(double %1225, double 0x3FF921FB54442D18, double %1229)
  %1231 = tail call double @llvm.fma.f64(double %1225, double 0x3C91A62633145C07, double %1230)
  %1232 = tail call double @llvm.fma.f64(double %1227, double 0x3FF921FB54442D18, double %1231)
  %1233 = fadd double %1228, %1232
  %1234 = fsub double %1233, %1228
  %1235 = fsub double %1232, %1234
  br label %1236

1236:                                             ; preds = %1141, %1160
  %1237 = phi double [ %1158, %1141 ], [ %1235, %1160 ]
  %1238 = phi double [ %1156, %1141 ], [ %1233, %1160 ]
  %1239 = phi i32 [ %1159, %1141 ], [ %1222, %1160 ]
  %1240 = fmul double %1238, %1238
  %1241 = fmul double %1240, 5.000000e-01
  %1242 = fsub double 1.000000e+00, %1241
  %1243 = fsub double 1.000000e+00, %1242
  %1244 = fsub double %1243, %1241
  %1245 = fmul double %1240, %1240
  %1246 = tail call double @llvm.fma.f64(double %1240, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1247 = tail call double @llvm.fma.f64(double %1240, double %1246, double 0xBE927E4FA17F65F6)
  %1248 = tail call double @llvm.fma.f64(double %1240, double %1247, double 0x3EFA01A019F4EC90)
  %1249 = tail call double @llvm.fma.f64(double %1240, double %1248, double 0xBF56C16C16C16967)
  %1250 = tail call double @llvm.fma.f64(double %1240, double %1249, double 0x3FA5555555555555)
  %1251 = fneg double %1237
  %1252 = tail call double @llvm.fma.f64(double %1238, double %1251, double %1244)
  %1253 = tail call double @llvm.fma.f64(double %1245, double %1250, double %1252)
  %1254 = fadd double %1242, %1253
  %1255 = tail call double @llvm.fma.f64(double %1240, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1256 = tail call double @llvm.fma.f64(double %1240, double %1255, double 0x3EC71DE3796CDE01)
  %1257 = tail call double @llvm.fma.f64(double %1240, double %1256, double 0xBF2A01A019E83E5C)
  %1258 = tail call double @llvm.fma.f64(double %1240, double %1257, double 0x3F81111111110BB3)
  %1259 = fneg double %1240
  %1260 = fmul double %1238, %1259
  %1261 = fmul double %1237, 5.000000e-01
  %1262 = tail call double @llvm.fma.f64(double %1260, double %1258, double %1261)
  %1263 = tail call double @llvm.fma.f64(double %1240, double %1262, double %1251)
  %1264 = tail call double @llvm.fma.f64(double %1260, double 0xBFC5555555555555, double %1263)
  %1265 = fsub double %1238, %1264
  %1266 = and i32 %1239, 1
  %1267 = icmp eq i32 %1266, 0
  %1268 = select i1 %1267, double %1265, double %1254
  %1269 = bitcast double %1268 to <2 x i32>
  %1270 = shl i32 %1239, 30
  %1271 = bitcast double %577 to <2 x i32>
  %1272 = extractelement <2 x i32> %1271, i64 1
  %1273 = xor i32 %1270, %1272
  %1274 = and i32 %1273, -2147483648
  %1275 = extractelement <2 x i32> %1269, i64 1
  %1276 = xor i32 %1275, %1274
  %1277 = insertelement <2 x i32> %1269, i32 %1276, i64 1
  %1278 = select i1 %715, <2 x i32> %1277, <2 x i32> <i32 0, i32 2146959360>
  %1279 = bitcast <2 x i32> %1278 to double
  %1280 = fmul contract double %572, %1279
  %1281 = mul i32 %569, 3
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1282
  %1284 = load double, double addrspace(1)* %1283, align 8, !tbaa !16, !amdgpu.noclobber !5
  %1285 = fadd contract double %862, %1284
  %1286 = fmul contract double %1285, %1285
  %1287 = add nsw i32 %1281, 1
  %1288 = sext i32 %1287 to i64
  %1289 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1288
  %1290 = load double, double addrspace(1)* %1289, align 8, !tbaa !16, !amdgpu.noclobber !5
  %1291 = fadd contract double %1140, %1290
  %1292 = fmul contract double %1291, %1291
  %1293 = fadd contract double %1286, %1292
  %1294 = add nsw i32 %1281, 2
  %1295 = sext i32 %1294 to i64
  %1296 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1295
  %1297 = load double, double addrspace(1)* %1296, align 8, !tbaa !16, !amdgpu.noclobber !5
  %1298 = fadd contract double %1297, %1280
  %1299 = fmul contract double %1298, %1298
  %1300 = fadd contract double %1293, %1299
  %1301 = fmul contract double %1300, 5.000000e-01
  %1302 = getelementptr inbounds double, double addrspace(1)* %4, i64 %570
  %1303 = load double, double addrspace(1)* %1302, align 8, !tbaa !16, !amdgpu.noclobber !5
  %1304 = fdiv contract double %1301, %1303
  %1305 = getelementptr inbounds double, double addrspace(1)* %5, i64 %570
  %1306 = load double, double addrspace(1)* %1305, align 8, !tbaa !16, !amdgpu.noclobber !5
  %1307 = fmul contract double %42, %1306
  %1308 = fmul contract double %1303, %1307
  %1309 = fmul contract double %1303, %6
  %1310 = getelementptr inbounds double, double addrspace(1)* %10, i64 %48
  %1311 = load double, double addrspace(1)* %1310, align 8, !tbaa !16, !amdgpu.noclobber !5
  %1312 = fmul contract double %1309, %1311
  %1313 = fadd contract double %1308, %1304
  %1314 = fadd contract double %1312, %1313
  %1315 = fmul contract double %567, %1314
  %1316 = getelementptr inbounds double, double addrspace(1)* %0, i64 %570
  store double %1315, double addrspace(1)* %1316, align 8, !tbaa !16
  br label %1317

1317:                                             ; preds = %1236, %17
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.frexp.mant.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !12, i64 16}
!8 = !{!"hsa_kernel_dispatch_packet_s", !9, i64 0, !9, i64 2, !9, i64 4, !9, i64 6, !9, i64 8, !9, i64 10, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !13, i64 32, !14, i64 40, !13, i64 48, !15, i64 56}
!9 = !{!"short", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!"int", !10, i64 0}
!13 = !{!"long", !10, i64 0}
!14 = !{!"any pointer", !10, i64 0}
!15 = !{!"hsa_signal_s", !13, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"double", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C++ TBAA"}
