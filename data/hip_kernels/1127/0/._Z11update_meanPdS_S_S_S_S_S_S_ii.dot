digraph "CFG for '_Z11update_meanPdS_S_S_S_S_S_S_ii' function" {
	label="CFG for '_Z11update_meanPdS_S_S_S_S_S_S_ii' function";

	Node0x523c9e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 16\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 8, !tbaa !7\l  %23 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = udiv i32 %22, %26\l  %28 = mul i32 %27, %26\l  %29 = icmp ugt i32 %22, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %33 = icmp slt i32 %19, %9\l  br i1 %33, label %34, label %107\l|{<s0>T|<s1>F}}"];
	Node0x523c9e0:s0 -> Node0x523efc0;
	Node0x523c9e0:s1 -> Node0x5240c70;
	Node0x523efc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%34:\l34:                                               \l  %35 = sitofp i32 %8 to double\l  %36 = fdiv contract double 1.000000e+00, %35\l  %37 = mul i32 %31, %19\l  %38 = add i32 %37, %32\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %0, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !16,\l... !amdgpu.noclobber !5\l  %42 = add nsw i32 %8, -1\l  %43 = sitofp i32 %42 to double\l  %44 = fmul contract double %41, %43\l  %45 = getelementptr inbounds double, double addrspace(1)* %1, i64 %39\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !16,\l... !amdgpu.noclobber !5\l  %47 = fadd contract double %44, %46\l  %48 = fmul contract double %36, %47\l  store double %48, double addrspace(1)* %40, align 8, !tbaa !16\l  %49 = getelementptr inbounds double, double addrspace(1)* %2, i64 %39\l  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !16\l  %51 = fmul contract double %50, %43\l  %52 = getelementptr inbounds double, double addrspace(1)* %3, i64 %39\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !16\l  %54 = fadd contract double %51, %53\l  %55 = fmul contract double %36, %54\l  store double %55, double addrspace(1)* %49, align 8, !tbaa !16\l  %56 = mul i32 %38, 3\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %4, i64 %57\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !16\l  %60 = fmul contract double %59, %43\l  %61 = getelementptr inbounds double, double addrspace(1)* %5, i64 %57\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !16\l  %63 = fadd contract double %60, %62\l  %64 = fadd contract double %63, 0.000000e+00\l  %65 = fmul contract double %36, %64\l  store double %65, double addrspace(1)* %58, align 8, !tbaa !16\l  %66 = add nsw i32 %56, 1\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %4, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !16\l  %70 = fmul contract double %69, %43\l  %71 = getelementptr inbounds double, double addrspace(1)* %5, i64 %67\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !16\l  %73 = fadd contract double %70, %72\l  %74 = fmul contract double %36, %73\l  store double %74, double addrspace(1)* %68, align 8, !tbaa !16\l  %75 = add nsw i32 %56, 2\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %4, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !16\l  %79 = fmul contract double %78, %43\l  %80 = getelementptr inbounds double, double addrspace(1)* %5, i64 %76\l  %81 = load double, double addrspace(1)* %80, align 8, !tbaa !16\l  %82 = fadd contract double %79, %81\l  %83 = fmul contract double %36, %82\l  store double %83, double addrspace(1)* %77, align 8, !tbaa !16\l  %84 = add nsw i32 %31, 1\l  %85 = mul nsw i32 %84, %19\l  %86 = add nsw i32 %85, %32\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %6, i64 %87\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !16\l  %90 = fmul contract double %89, %43\l  %91 = getelementptr inbounds double, double addrspace(1)* %7, i64 %87\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !16\l  %93 = fadd contract double %90, %92\l  %94 = fmul contract double %36, %93\l  store double %94, double addrspace(1)* %88, align 8, !tbaa !16\l  %95 = add nsw i32 %31, -1\l  %96 = icmp eq i32 %32, %95\l  br i1 %96, label %97, label %107\l|{<s0>T|<s1>F}}"];
	Node0x523efc0:s0 -> Node0x5244770;
	Node0x523efc0:s1 -> Node0x5240c70;
	Node0x5244770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%97:\l97:                                               \l  %98 = add nsw i32 %86, 1\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %6, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %102 = fmul contract double %101, %43\l  %103 = getelementptr inbounds double, double addrspace(1)* %7, i64 %99\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !16\l  %105 = fadd contract double %102, %104\l  %106 = fmul contract double %36, %105\l  store double %106, double addrspace(1)* %100, align 8, !tbaa !16\l  br label %107\l}"];
	Node0x5244770 -> Node0x5240c70;
	Node0x5240c70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%107:\l107:                                              \l  ret void\l}"];
}
