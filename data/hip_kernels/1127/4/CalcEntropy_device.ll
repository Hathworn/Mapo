; ModuleID = '../data/hip_kernels/1127/4/main.cu'
source_filename = "../data/hip_kernels/1127/4/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z11CalcEntropyPdS_S_ddddS_S_S_S_S_ib(double addrspace(1)* nocapture writeonly %0, double addrspace(1)* nocapture readonly %1, double addrspace(1)* nocapture readonly %2, double %3, double %4, double %5, double %6, double addrspace(1)* nocapture readnone %7, double addrspace(1)* nocapture readonly %8, double addrspace(1)* nocapture readnone %9, double addrspace(1)* nocapture readonly %10, double addrspace(1)* nocapture readnone %11, i32 %12, i1 %13) local_unnamed_addr #0 {
  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %16 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %17 = getelementptr i8, i8 addrspace(4)* %16, i64 4
  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*
  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5
  %20 = zext i16 %19 to i32
  %21 = mul i32 %15, %20
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %23 = add i32 %21, %22
  %24 = getelementptr inbounds i8, i8 addrspace(4)* %16, i64 16
  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*
  %26 = load i32, i32 addrspace(4)* %25, align 8, !tbaa !7
  %27 = getelementptr i8, i8 addrspace(4)* %16, i64 6
  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*
  %29 = load i16, i16 addrspace(4)* %28, align 2, !range !4, !invariant.load !5
  %30 = zext i16 %29 to i32
  %31 = udiv i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %33 = icmp slt i32 %23, %12
  br i1 %33, label %34, label %867

34:                                               ; preds = %14
  %35 = mul i32 %31, %30
  %36 = icmp ugt i32 %26, %35
  %37 = zext i1 %36 to i32
  %38 = add i32 %31, %37
  %39 = fdiv contract double %4, %3
  %40 = mul nsw i32 %38, %23
  %41 = add nsw i32 %40, %32
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, double addrspace(1)* %2, i64 %42
  %44 = load double, double addrspace(1)* %43, align 8, !tbaa !16, !amdgpu.noclobber !5
  %45 = getelementptr inbounds double, double addrspace(1)* %1, i64 %42
  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !16, !amdgpu.noclobber !5
  %47 = fdiv contract double %6, %46
  %48 = tail call double @llvm.fabs.f64(double %47)
  %49 = tail call double @llvm.amdgcn.frexp.mant.f64(double %48)
  %50 = fcmp olt double %49, 0x3FE5555555555555
  %51 = zext i1 %50 to i32
  %52 = tail call double @llvm.amdgcn.ldexp.f64(double %49, i32 %51)
  %53 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %48)
  %54 = sub nsw i32 %53, %51
  %55 = fadd double %52, -1.000000e+00
  %56 = fadd double %52, 1.000000e+00
  %57 = fadd double %56, -1.000000e+00
  %58 = fsub double %52, %57
  %59 = tail call double @llvm.amdgcn.rcp.f64(double %56)
  %60 = fneg double %56
  %61 = tail call double @llvm.fma.f64(double %60, double %59, double 1.000000e+00)
  %62 = tail call double @llvm.fma.f64(double %61, double %59, double %59)
  %63 = tail call double @llvm.fma.f64(double %60, double %62, double 1.000000e+00)
  %64 = tail call double @llvm.fma.f64(double %63, double %62, double %62)
  %65 = fmul double %55, %64
  %66 = fmul double %56, %65
  %67 = fneg double %66
  %68 = tail call double @llvm.fma.f64(double %65, double %56, double %67)
  %69 = tail call double @llvm.fma.f64(double %65, double %58, double %68)
  %70 = fadd double %66, %69
  %71 = fsub double %70, %66
  %72 = fsub double %69, %71
  %73 = fsub double %55, %70
  %74 = fsub double %55, %73
  %75 = fsub double %74, %70
  %76 = fsub double %75, %72
  %77 = fadd double %73, %76
  %78 = fmul double %64, %77
  %79 = fadd double %65, %78
  %80 = fsub double %79, %65
  %81 = fsub double %78, %80
  %82 = fmul double %79, %79
  %83 = fneg double %82
  %84 = tail call double @llvm.fma.f64(double %79, double %79, double %83)
  %85 = fmul double %81, 2.000000e+00
  %86 = tail call double @llvm.fma.f64(double %79, double %85, double %84)
  %87 = fadd double %82, %86
  %88 = fsub double %87, %82
  %89 = fsub double %86, %88
  %90 = tail call double @llvm.fma.f64(double %87, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %91 = tail call double @llvm.fma.f64(double %87, double %90, double 0x3FBE25E43ABE935A)
  %92 = tail call double @llvm.fma.f64(double %87, double %91, double 0x3FC110EF47E6C9C2)
  %93 = tail call double @llvm.fma.f64(double %87, double %92, double 0x3FC3B13BCFA74449)
  %94 = tail call double @llvm.fma.f64(double %87, double %93, double 0x3FC745D171BF3C30)
  %95 = tail call double @llvm.fma.f64(double %87, double %94, double 0x3FCC71C71C7792CE)
  %96 = tail call double @llvm.fma.f64(double %87, double %95, double 0x3FD24924924920DA)
  %97 = tail call double @llvm.fma.f64(double %87, double %96, double 0x3FD999999999999C)
  %98 = sitofp i32 %54 to double
  %99 = fmul double %98, 0x3FE62E42FEFA39EF
  %100 = fneg double %99
  %101 = tail call double @llvm.fma.f64(double %98, double 0x3FE62E42FEFA39EF, double %100)
  %102 = tail call double @llvm.fma.f64(double %98, double 0x3C7ABC9E3B39803F, double %101)
  %103 = fadd double %99, %102
  %104 = fsub double %103, %99
  %105 = fsub double %102, %104
  %106 = tail call double @llvm.amdgcn.ldexp.f64(double %79, i32 1)
  %107 = tail call double @llvm.amdgcn.ldexp.f64(double %81, i32 1)
  %108 = fmul double %79, %87
  %109 = fneg double %108
  %110 = tail call double @llvm.fma.f64(double %87, double %79, double %109)
  %111 = tail call double @llvm.fma.f64(double %87, double %81, double %110)
  %112 = tail call double @llvm.fma.f64(double %89, double %79, double %111)
  %113 = fadd double %108, %112
  %114 = fsub double %113, %108
  %115 = fsub double %112, %114
  %116 = fmul double %87, %97
  %117 = fneg double %116
  %118 = tail call double @llvm.fma.f64(double %87, double %97, double %117)
  %119 = tail call double @llvm.fma.f64(double %89, double %97, double %118)
  %120 = fadd double %116, %119
  %121 = fsub double %120, %116
  %122 = fsub double %119, %121
  %123 = fadd double %120, 0x3FE5555555555555
  %124 = fadd double %123, 0xBFE5555555555555
  %125 = fsub double %120, %124
  %126 = fadd double %122, 0x3C8543B0D5DF274D
  %127 = fadd double %126, %125
  %128 = fadd double %123, %127
  %129 = fsub double %128, %123
  %130 = fsub double %127, %129
  %131 = fmul double %113, %128
  %132 = fneg double %131
  %133 = tail call double @llvm.fma.f64(double %113, double %128, double %132)
  %134 = tail call double @llvm.fma.f64(double %113, double %130, double %133)
  %135 = tail call double @llvm.fma.f64(double %115, double %128, double %134)
  %136 = fadd double %131, %135
  %137 = fsub double %136, %131
  %138 = fsub double %135, %137
  %139 = fadd double %106, %136
  %140 = fsub double %139, %106
  %141 = fsub double %136, %140
  %142 = fadd double %107, %138
  %143 = fadd double %142, %141
  %144 = fadd double %139, %143
  %145 = fsub double %144, %139
  %146 = fsub double %143, %145
  %147 = fadd double %103, %144
  %148 = fsub double %147, %103
  %149 = fsub double %147, %148
  %150 = fsub double %103, %149
  %151 = fsub double %144, %148
  %152 = fadd double %151, %150
  %153 = fadd double %105, %146
  %154 = fsub double %153, %105
  %155 = fsub double %153, %154
  %156 = fsub double %105, %155
  %157 = fsub double %146, %154
  %158 = fadd double %157, %156
  %159 = fadd double %153, %152
  %160 = fadd double %147, %159
  %161 = fsub double %160, %147
  %162 = fsub double %159, %161
  %163 = fadd double %158, %162
  %164 = fadd double %160, %163
  %165 = fsub double %164, %160
  %166 = fsub double %163, %165
  %167 = fmul double %39, %164
  %168 = fneg double %167
  %169 = tail call double @llvm.fma.f64(double %39, double %164, double %168)
  %170 = tail call double @llvm.fma.f64(double %39, double %166, double %169)
  %171 = fadd double %167, %170
  %172 = fsub double %171, %167
  %173 = fsub double %170, %172
  %174 = tail call double @llvm.fabs.f64(double %167) #3
  %175 = fcmp oeq double %174, 0x7FF0000000000000
  %176 = select i1 %175, double %167, double %171
  %177 = tail call double @llvm.fabs.f64(double %176) #3
  %178 = fcmp oeq double %177, 0x7FF0000000000000
  %179 = select i1 %178, double 0.000000e+00, double %173
  %180 = fmul double %176, 0x3FF71547652B82FE
  %181 = tail call double @llvm.rint.f64(double %180)
  %182 = fneg double %181
  %183 = tail call double @llvm.fma.f64(double %182, double 0x3FE62E42FEFA39EF, double %176)
  %184 = tail call double @llvm.fma.f64(double %182, double 0x3C7ABC9E3B39803F, double %183)
  %185 = tail call double @llvm.fma.f64(double %184, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %186 = tail call double @llvm.fma.f64(double %184, double %185, double 0x3EC71DEE623FDE64)
  %187 = tail call double @llvm.fma.f64(double %184, double %186, double 0x3EFA01997C89E6B0)
  %188 = tail call double @llvm.fma.f64(double %184, double %187, double 0x3F2A01A014761F6E)
  %189 = tail call double @llvm.fma.f64(double %184, double %188, double 0x3F56C16C1852B7B0)
  %190 = tail call double @llvm.fma.f64(double %184, double %189, double 0x3F81111111122322)
  %191 = tail call double @llvm.fma.f64(double %184, double %190, double 0x3FA55555555502A1)
  %192 = tail call double @llvm.fma.f64(double %184, double %191, double 0x3FC5555555555511)
  %193 = tail call double @llvm.fma.f64(double %184, double %192, double 0x3FE000000000000B)
  %194 = tail call double @llvm.fma.f64(double %184, double %193, double 1.000000e+00)
  %195 = tail call double @llvm.fma.f64(double %184, double %194, double 1.000000e+00)
  %196 = fptosi double %181 to i32
  %197 = tail call double @llvm.amdgcn.ldexp.f64(double %195, i32 %196)
  %198 = fcmp ogt double %176, 1.024000e+03
  %199 = select i1 %198, double 0x7FF0000000000000, double %197
  %200 = fcmp olt double %176, -1.075000e+03
  %201 = select i1 %200, double 0.000000e+00, double %199
  %202 = tail call double @llvm.fma.f64(double %201, double %179, double %201)
  %203 = tail call double @llvm.fabs.f64(double %201) #3
  %204 = fcmp oeq double %203, 0x7FF0000000000000
  %205 = select i1 %204, double %201, double %202
  %206 = tail call double @llvm.fabs.f64(double %39)
  %207 = tail call double @llvm.trunc.f64(double %206)
  %208 = fcmp oeq double %206, %207
  %209 = zext i1 %208 to i32
  %210 = fmul double %207, 5.000000e-01
  %211 = tail call double @llvm.amdgcn.fract.f64(double %210)
  %212 = tail call i1 @llvm.amdgcn.class.f64(double %210, i32 516)
  %213 = select i1 %212, double 0.000000e+00, double %211
  %214 = fcmp oeq double %213, 0.000000e+00
  %215 = and i1 %208, %214
  %216 = zext i1 %215 to i32
  %217 = add nuw nsw i32 %216, %209
  %218 = icmp eq i32 %217, 1
  %219 = fcmp olt double %47, 0.000000e+00
  %220 = and i1 %218, %219
  %221 = select i1 %220, double -0.000000e+00, double 0.000000e+00
  %222 = tail call double @llvm.copysign.f64(double %205, double %221)
  %223 = fcmp uge double %47, 0.000000e+00
  %224 = icmp ne i32 %217, 0
  %225 = select i1 %223, i1 true, i1 %224
  %226 = select i1 %225, double %222, double 0x7FF8000000000000
  %227 = fcmp oeq double %206, 0x7FF0000000000000
  %228 = fcmp oeq double %48, 1.000000e+00
  %229 = fadd double %48, -1.000000e+00
  %230 = bitcast double %39 to <2 x i32>
  %231 = extractelement <2 x i32> %230, i64 1
  %232 = bitcast double %229 to <2 x i32>
  %233 = extractelement <2 x i32> %232, i64 1
  %234 = xor i32 %233, %231
  %235 = icmp sgt i32 %234, -1
  %236 = select i1 %235, double 0x7FF0000000000000, double 0.000000e+00
  %237 = select i1 %228, double %48, double %236
  %238 = select i1 %227, double %237, double %226
  %239 = fcmp oeq double %48, 0x7FF0000000000000
  %240 = fcmp oeq double %47, 0.000000e+00
  %241 = or i1 %240, %239
  %242 = fcmp olt double %39, 0.000000e+00
  %243 = xor i1 %242, %240
  %244 = select i1 %243, double 0.000000e+00, double 0x7FF0000000000000
  %245 = select i1 %218, double %47, double 0.000000e+00
  %246 = tail call double @llvm.copysign.f64(double %244, double %245)
  %247 = select i1 %241, double %246, double %238
  %248 = fcmp uno double %47, %39
  %249 = select i1 %248, double 0x7FF8000000000000, double %247
  %250 = fcmp oeq double %47, 1.000000e+00
  %251 = fcmp oeq double %39, 0.000000e+00
  %252 = or i1 %251, %250
  %253 = select i1 %252, double 1.000000e+00, double %249
  %254 = fmul contract double %44, %253
  %255 = tail call double @llvm.amdgcn.frexp.mant.f64(double %254)
  %256 = fcmp olt double %255, 0x3FE5555555555555
  %257 = zext i1 %256 to i32
  %258 = tail call double @llvm.amdgcn.ldexp.f64(double %255, i32 %257)
  %259 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %254)
  %260 = sub nsw i32 %259, %257
  %261 = fadd double %258, -1.000000e+00
  %262 = fadd double %258, 1.000000e+00
  %263 = fadd double %262, -1.000000e+00
  %264 = fsub double %258, %263
  %265 = tail call double @llvm.amdgcn.rcp.f64(double %262)
  %266 = fneg double %262
  %267 = tail call double @llvm.fma.f64(double %266, double %265, double 1.000000e+00)
  %268 = tail call double @llvm.fma.f64(double %267, double %265, double %265)
  %269 = tail call double @llvm.fma.f64(double %266, double %268, double 1.000000e+00)
  %270 = tail call double @llvm.fma.f64(double %269, double %268, double %268)
  %271 = fmul double %261, %270
  %272 = fmul double %262, %271
  %273 = fneg double %272
  %274 = tail call double @llvm.fma.f64(double %271, double %262, double %273)
  %275 = tail call double @llvm.fma.f64(double %271, double %264, double %274)
  %276 = fadd double %272, %275
  %277 = fsub double %276, %272
  %278 = fsub double %275, %277
  %279 = fsub double %261, %276
  %280 = fsub double %261, %279
  %281 = fsub double %280, %276
  %282 = fsub double %281, %278
  %283 = fadd double %279, %282
  %284 = fmul double %270, %283
  %285 = fadd double %271, %284
  %286 = fsub double %285, %271
  %287 = fsub double %284, %286
  %288 = fmul double %285, %285
  %289 = tail call double @llvm.fma.f64(double %288, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %290 = tail call double @llvm.fma.f64(double %288, double %289, double 0x3FC7474DD7F4DF2E)
  %291 = tail call double @llvm.fma.f64(double %288, double %290, double 0x3FCC71C016291751)
  %292 = tail call double @llvm.fma.f64(double %288, double %291, double 0x3FD249249B27ACF1)
  %293 = tail call double @llvm.fma.f64(double %288, double %292, double 0x3FD99999998EF7B6)
  %294 = tail call double @llvm.fma.f64(double %288, double %293, double 0x3FE5555555555780)
  %295 = tail call double @llvm.amdgcn.ldexp.f64(double %285, i32 1)
  %296 = tail call double @llvm.amdgcn.ldexp.f64(double %287, i32 1)
  %297 = fmul double %285, %288
  %298 = fmul double %297, %294
  %299 = fadd double %295, %298
  %300 = fsub double %299, %295
  %301 = fsub double %298, %300
  %302 = fadd double %296, %301
  %303 = fadd double %299, %302
  %304 = fsub double %303, %299
  %305 = fsub double %302, %304
  %306 = sitofp i32 %260 to double
  %307 = fmul double %306, 0x3FE62E42FEFA39EF
  %308 = fneg double %307
  %309 = tail call double @llvm.fma.f64(double %306, double 0x3FE62E42FEFA39EF, double %308)
  %310 = tail call double @llvm.fma.f64(double %306, double 0x3C7ABC9E3B39803F, double %309)
  %311 = fadd double %307, %310
  %312 = fsub double %311, %307
  %313 = fsub double %310, %312
  %314 = fadd double %311, %303
  %315 = fsub double %314, %311
  %316 = fsub double %314, %315
  %317 = fsub double %311, %316
  %318 = fsub double %303, %315
  %319 = fadd double %318, %317
  %320 = fadd double %313, %305
  %321 = fsub double %320, %313
  %322 = fsub double %320, %321
  %323 = fsub double %313, %322
  %324 = fsub double %305, %321
  %325 = fadd double %324, %323
  %326 = fadd double %320, %319
  %327 = fadd double %314, %326
  %328 = fsub double %327, %314
  %329 = fsub double %326, %328
  %330 = fadd double %325, %329
  %331 = fadd double %327, %330
  %332 = tail call double @llvm.fabs.f64(double %254) #3
  %333 = fcmp oeq double %332, 0x7FF0000000000000
  %334 = select i1 %333, double %254, double %331
  %335 = fcmp olt double %254, 0.000000e+00
  %336 = select i1 %335, double 0x7FF8000000000000, double %334
  %337 = fcmp oeq double %254, 0.000000e+00
  %338 = select i1 %337, double 0xFFF0000000000000, double %336
  %339 = fmul contract double %338, %3
  %340 = add nsw i32 %32, 1
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds double, double addrspace(1)* %8, i64 %341
  %343 = load double, double addrspace(1)* %342, align 8, !tbaa !16, !amdgpu.noclobber !5
  %344 = fadd contract double %343, %5
  %345 = sext i32 %32 to i64
  %346 = getelementptr inbounds double, double addrspace(1)* %8, i64 %345
  %347 = load double, double addrspace(1)* %346, align 8, !tbaa !16, !amdgpu.noclobber !5
  %348 = fadd contract double %347, %5
  %349 = sext i32 %23 to i64
  %350 = getelementptr inbounds double, double addrspace(1)* %10, i64 %349
  %351 = load double, double addrspace(1)* %350, align 8, !tbaa !16
  br i1 %13, label %352, label %860

352:                                              ; preds = %34
  %353 = tail call double @llvm.fabs.f64(double %5)
  %354 = tail call double @llvm.amdgcn.frexp.mant.f64(double %353)
  %355 = fcmp olt double %354, 0x3FE5555555555555
  %356 = zext i1 %355 to i32
  %357 = tail call double @llvm.amdgcn.ldexp.f64(double %354, i32 %356)
  %358 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %353)
  %359 = sub nsw i32 %358, %356
  %360 = fadd double %357, -1.000000e+00
  %361 = fadd double %357, 1.000000e+00
  %362 = fadd double %361, -1.000000e+00
  %363 = fsub double %357, %362
  %364 = tail call double @llvm.amdgcn.rcp.f64(double %361)
  %365 = fneg double %361
  %366 = tail call double @llvm.fma.f64(double %365, double %364, double 1.000000e+00)
  %367 = tail call double @llvm.fma.f64(double %366, double %364, double %364)
  %368 = tail call double @llvm.fma.f64(double %365, double %367, double 1.000000e+00)
  %369 = tail call double @llvm.fma.f64(double %368, double %367, double %367)
  %370 = fmul double %360, %369
  %371 = fmul double %361, %370
  %372 = fneg double %371
  %373 = tail call double @llvm.fma.f64(double %370, double %361, double %372)
  %374 = tail call double @llvm.fma.f64(double %370, double %363, double %373)
  %375 = fadd double %371, %374
  %376 = fsub double %375, %371
  %377 = fsub double %374, %376
  %378 = fsub double %360, %375
  %379 = fsub double %360, %378
  %380 = fsub double %379, %375
  %381 = fsub double %380, %377
  %382 = fadd double %378, %381
  %383 = fmul double %369, %382
  %384 = fadd double %370, %383
  %385 = fsub double %384, %370
  %386 = fsub double %383, %385
  %387 = fmul double %384, %384
  %388 = fneg double %387
  %389 = tail call double @llvm.fma.f64(double %384, double %384, double %388)
  %390 = fmul double %386, 2.000000e+00
  %391 = tail call double @llvm.fma.f64(double %384, double %390, double %389)
  %392 = fadd double %387, %391
  %393 = fsub double %392, %387
  %394 = fsub double %391, %393
  %395 = tail call double @llvm.fma.f64(double %392, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %396 = tail call double @llvm.fma.f64(double %392, double %395, double 0x3FBE25E43ABE935A)
  %397 = tail call double @llvm.fma.f64(double %392, double %396, double 0x3FC110EF47E6C9C2)
  %398 = tail call double @llvm.fma.f64(double %392, double %397, double 0x3FC3B13BCFA74449)
  %399 = tail call double @llvm.fma.f64(double %392, double %398, double 0x3FC745D171BF3C30)
  %400 = tail call double @llvm.fma.f64(double %392, double %399, double 0x3FCC71C71C7792CE)
  %401 = tail call double @llvm.fma.f64(double %392, double %400, double 0x3FD24924924920DA)
  %402 = tail call double @llvm.fma.f64(double %392, double %401, double 0x3FD999999999999C)
  %403 = sitofp i32 %359 to double
  %404 = fmul double %403, 0x3FE62E42FEFA39EF
  %405 = fneg double %404
  %406 = tail call double @llvm.fma.f64(double %403, double 0x3FE62E42FEFA39EF, double %405)
  %407 = tail call double @llvm.fma.f64(double %403, double 0x3C7ABC9E3B39803F, double %406)
  %408 = fadd double %404, %407
  %409 = fsub double %408, %404
  %410 = fsub double %407, %409
  %411 = tail call double @llvm.amdgcn.ldexp.f64(double %384, i32 1)
  %412 = tail call double @llvm.amdgcn.ldexp.f64(double %386, i32 1)
  %413 = fmul double %384, %392
  %414 = fneg double %413
  %415 = tail call double @llvm.fma.f64(double %392, double %384, double %414)
  %416 = tail call double @llvm.fma.f64(double %392, double %386, double %415)
  %417 = tail call double @llvm.fma.f64(double %394, double %384, double %416)
  %418 = fadd double %413, %417
  %419 = fsub double %418, %413
  %420 = fsub double %417, %419
  %421 = fmul double %392, %402
  %422 = fneg double %421
  %423 = tail call double @llvm.fma.f64(double %392, double %402, double %422)
  %424 = tail call double @llvm.fma.f64(double %394, double %402, double %423)
  %425 = fadd double %421, %424
  %426 = fsub double %425, %421
  %427 = fsub double %424, %426
  %428 = fadd double %425, 0x3FE5555555555555
  %429 = fadd double %428, 0xBFE5555555555555
  %430 = fsub double %425, %429
  %431 = fadd double %427, 0x3C8543B0D5DF274D
  %432 = fadd double %431, %430
  %433 = fadd double %428, %432
  %434 = fsub double %433, %428
  %435 = fsub double %432, %434
  %436 = fmul double %418, %433
  %437 = fneg double %436
  %438 = tail call double @llvm.fma.f64(double %418, double %433, double %437)
  %439 = tail call double @llvm.fma.f64(double %418, double %435, double %438)
  %440 = tail call double @llvm.fma.f64(double %420, double %433, double %439)
  %441 = fadd double %436, %440
  %442 = fsub double %441, %436
  %443 = fsub double %440, %442
  %444 = fadd double %411, %441
  %445 = fsub double %444, %411
  %446 = fsub double %441, %445
  %447 = fadd double %412, %443
  %448 = fadd double %447, %446
  %449 = fadd double %444, %448
  %450 = fsub double %449, %444
  %451 = fsub double %448, %450
  %452 = fadd double %408, %449
  %453 = fsub double %452, %408
  %454 = fsub double %452, %453
  %455 = fsub double %408, %454
  %456 = fsub double %449, %453
  %457 = fadd double %456, %455
  %458 = fadd double %410, %451
  %459 = fsub double %458, %410
  %460 = fsub double %458, %459
  %461 = fsub double %410, %460
  %462 = fsub double %451, %459
  %463 = fadd double %462, %461
  %464 = fadd double %458, %457
  %465 = fadd double %452, %464
  %466 = fsub double %465, %452
  %467 = fsub double %464, %466
  %468 = fadd double %463, %467
  %469 = fadd double %465, %468
  %470 = fsub double %469, %465
  %471 = fsub double %468, %470
  %472 = fmul double %469, 2.000000e+00
  %473 = fneg double %472
  %474 = tail call double @llvm.fma.f64(double %469, double 2.000000e+00, double %473)
  %475 = tail call double @llvm.fma.f64(double %471, double 2.000000e+00, double %474)
  %476 = fadd double %472, %475
  %477 = fsub double %476, %472
  %478 = fsub double %475, %477
  %479 = tail call double @llvm.fabs.f64(double %472) #3
  %480 = fcmp oeq double %479, 0x7FF0000000000000
  %481 = select i1 %480, double %472, double %476
  %482 = tail call double @llvm.fabs.f64(double %481) #3
  %483 = fcmp oeq double %482, 0x7FF0000000000000
  %484 = select i1 %483, double 0.000000e+00, double %478
  %485 = fmul double %481, 0x3FF71547652B82FE
  %486 = tail call double @llvm.rint.f64(double %485)
  %487 = fneg double %486
  %488 = tail call double @llvm.fma.f64(double %487, double 0x3FE62E42FEFA39EF, double %481)
  %489 = tail call double @llvm.fma.f64(double %487, double 0x3C7ABC9E3B39803F, double %488)
  %490 = tail call double @llvm.fma.f64(double %489, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %491 = tail call double @llvm.fma.f64(double %489, double %490, double 0x3EC71DEE623FDE64)
  %492 = tail call double @llvm.fma.f64(double %489, double %491, double 0x3EFA01997C89E6B0)
  %493 = tail call double @llvm.fma.f64(double %489, double %492, double 0x3F2A01A014761F6E)
  %494 = tail call double @llvm.fma.f64(double %489, double %493, double 0x3F56C16C1852B7B0)
  %495 = tail call double @llvm.fma.f64(double %489, double %494, double 0x3F81111111122322)
  %496 = tail call double @llvm.fma.f64(double %489, double %495, double 0x3FA55555555502A1)
  %497 = tail call double @llvm.fma.f64(double %489, double %496, double 0x3FC5555555555511)
  %498 = tail call double @llvm.fma.f64(double %489, double %497, double 0x3FE000000000000B)
  %499 = tail call double @llvm.fma.f64(double %489, double %498, double 1.000000e+00)
  %500 = tail call double @llvm.fma.f64(double %489, double %499, double 1.000000e+00)
  %501 = fptosi double %486 to i32
  %502 = tail call double @llvm.amdgcn.ldexp.f64(double %500, i32 %501)
  %503 = fcmp ogt double %481, 1.024000e+03
  %504 = select i1 %503, double 0x7FF0000000000000, double %502
  %505 = fcmp olt double %481, -1.075000e+03
  %506 = select i1 %505, double 0.000000e+00, double %504
  %507 = tail call double @llvm.fma.f64(double %506, double %484, double %506)
  %508 = tail call double @llvm.fabs.f64(double %506) #3
  %509 = fcmp oeq double %508, 0x7FF0000000000000
  %510 = select i1 %509, double %506, double %507
  %511 = tail call double @llvm.fabs.f64(double %510)
  %512 = fcmp oeq double %353, 0x7FF0000000000000
  %513 = fcmp oeq double %5, 0.000000e+00
  %514 = select i1 %512, double 0x7FF0000000000000, double %511
  %515 = select i1 %513, double 0.000000e+00, double %514
  %516 = fcmp uno double %5, 0.000000e+00
  %517 = select i1 %516, double 0x7FF8000000000000, double %515
  %518 = fdiv contract double %351, %517
  %519 = tail call double @llvm.fabs.f64(double %344)
  %520 = tail call double @llvm.amdgcn.frexp.mant.f64(double %519)
  %521 = fcmp olt double %520, 0x3FE5555555555555
  %522 = zext i1 %521 to i32
  %523 = tail call double @llvm.amdgcn.ldexp.f64(double %520, i32 %522)
  %524 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %519)
  %525 = sub nsw i32 %524, %522
  %526 = fadd double %523, -1.000000e+00
  %527 = fadd double %523, 1.000000e+00
  %528 = fadd double %527, -1.000000e+00
  %529 = fsub double %523, %528
  %530 = tail call double @llvm.amdgcn.rcp.f64(double %527)
  %531 = fneg double %527
  %532 = tail call double @llvm.fma.f64(double %531, double %530, double 1.000000e+00)
  %533 = tail call double @llvm.fma.f64(double %532, double %530, double %530)
  %534 = tail call double @llvm.fma.f64(double %531, double %533, double 1.000000e+00)
  %535 = tail call double @llvm.fma.f64(double %534, double %533, double %533)
  %536 = fmul double %526, %535
  %537 = fmul double %527, %536
  %538 = fneg double %537
  %539 = tail call double @llvm.fma.f64(double %536, double %527, double %538)
  %540 = tail call double @llvm.fma.f64(double %536, double %529, double %539)
  %541 = fadd double %537, %540
  %542 = fsub double %541, %537
  %543 = fsub double %540, %542
  %544 = fsub double %526, %541
  %545 = fsub double %526, %544
  %546 = fsub double %545, %541
  %547 = fsub double %546, %543
  %548 = fadd double %544, %547
  %549 = fmul double %535, %548
  %550 = fadd double %536, %549
  %551 = fsub double %550, %536
  %552 = fsub double %549, %551
  %553 = fmul double %550, %550
  %554 = fneg double %553
  %555 = tail call double @llvm.fma.f64(double %550, double %550, double %554)
  %556 = fmul double %552, 2.000000e+00
  %557 = tail call double @llvm.fma.f64(double %550, double %556, double %555)
  %558 = fadd double %553, %557
  %559 = fsub double %558, %553
  %560 = fsub double %557, %559
  %561 = tail call double @llvm.fma.f64(double %558, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %562 = tail call double @llvm.fma.f64(double %558, double %561, double 0x3FBE25E43ABE935A)
  %563 = tail call double @llvm.fma.f64(double %558, double %562, double 0x3FC110EF47E6C9C2)
  %564 = tail call double @llvm.fma.f64(double %558, double %563, double 0x3FC3B13BCFA74449)
  %565 = tail call double @llvm.fma.f64(double %558, double %564, double 0x3FC745D171BF3C30)
  %566 = tail call double @llvm.fma.f64(double %558, double %565, double 0x3FCC71C71C7792CE)
  %567 = tail call double @llvm.fma.f64(double %558, double %566, double 0x3FD24924924920DA)
  %568 = tail call double @llvm.fma.f64(double %558, double %567, double 0x3FD999999999999C)
  %569 = sitofp i32 %525 to double
  %570 = fmul double %569, 0x3FE62E42FEFA39EF
  %571 = fneg double %570
  %572 = tail call double @llvm.fma.f64(double %569, double 0x3FE62E42FEFA39EF, double %571)
  %573 = tail call double @llvm.fma.f64(double %569, double 0x3C7ABC9E3B39803F, double %572)
  %574 = fadd double %570, %573
  %575 = fsub double %574, %570
  %576 = fsub double %573, %575
  %577 = tail call double @llvm.amdgcn.ldexp.f64(double %550, i32 1)
  %578 = tail call double @llvm.amdgcn.ldexp.f64(double %552, i32 1)
  %579 = fmul double %550, %558
  %580 = fneg double %579
  %581 = tail call double @llvm.fma.f64(double %558, double %550, double %580)
  %582 = tail call double @llvm.fma.f64(double %558, double %552, double %581)
  %583 = tail call double @llvm.fma.f64(double %560, double %550, double %582)
  %584 = fadd double %579, %583
  %585 = fsub double %584, %579
  %586 = fsub double %583, %585
  %587 = fmul double %558, %568
  %588 = fneg double %587
  %589 = tail call double @llvm.fma.f64(double %558, double %568, double %588)
  %590 = tail call double @llvm.fma.f64(double %560, double %568, double %589)
  %591 = fadd double %587, %590
  %592 = fsub double %591, %587
  %593 = fsub double %590, %592
  %594 = fadd double %591, 0x3FE5555555555555
  %595 = fadd double %594, 0xBFE5555555555555
  %596 = fsub double %591, %595
  %597 = fadd double %593, 0x3C8543B0D5DF274D
  %598 = fadd double %597, %596
  %599 = fadd double %594, %598
  %600 = fsub double %599, %594
  %601 = fsub double %598, %600
  %602 = fmul double %584, %599
  %603 = fneg double %602
  %604 = tail call double @llvm.fma.f64(double %584, double %599, double %603)
  %605 = tail call double @llvm.fma.f64(double %584, double %601, double %604)
  %606 = tail call double @llvm.fma.f64(double %586, double %599, double %605)
  %607 = fadd double %602, %606
  %608 = fsub double %607, %602
  %609 = fsub double %606, %608
  %610 = fadd double %577, %607
  %611 = fsub double %610, %577
  %612 = fsub double %607, %611
  %613 = fadd double %578, %609
  %614 = fadd double %613, %612
  %615 = fadd double %610, %614
  %616 = fsub double %615, %610
  %617 = fsub double %614, %616
  %618 = fadd double %574, %615
  %619 = fsub double %618, %574
  %620 = fsub double %618, %619
  %621 = fsub double %574, %620
  %622 = fsub double %615, %619
  %623 = fadd double %622, %621
  %624 = fadd double %576, %617
  %625 = fsub double %624, %576
  %626 = fsub double %624, %625
  %627 = fsub double %576, %626
  %628 = fsub double %617, %625
  %629 = fadd double %628, %627
  %630 = fadd double %624, %623
  %631 = fadd double %618, %630
  %632 = fsub double %631, %618
  %633 = fsub double %630, %632
  %634 = fadd double %629, %633
  %635 = fadd double %631, %634
  %636 = fsub double %635, %631
  %637 = fsub double %634, %636
  %638 = fmul double %635, 3.000000e+00
  %639 = fneg double %638
  %640 = tail call double @llvm.fma.f64(double %635, double 3.000000e+00, double %639)
  %641 = tail call double @llvm.fma.f64(double %637, double 3.000000e+00, double %640)
  %642 = fadd double %638, %641
  %643 = fsub double %642, %638
  %644 = fsub double %641, %643
  %645 = tail call double @llvm.fabs.f64(double %638) #3
  %646 = fcmp oeq double %645, 0x7FF0000000000000
  %647 = select i1 %646, double %638, double %642
  %648 = tail call double @llvm.fabs.f64(double %647) #3
  %649 = fcmp oeq double %648, 0x7FF0000000000000
  %650 = select i1 %649, double 0.000000e+00, double %644
  %651 = fmul double %647, 0x3FF71547652B82FE
  %652 = tail call double @llvm.rint.f64(double %651)
  %653 = fneg double %652
  %654 = tail call double @llvm.fma.f64(double %653, double 0x3FE62E42FEFA39EF, double %647)
  %655 = tail call double @llvm.fma.f64(double %653, double 0x3C7ABC9E3B39803F, double %654)
  %656 = tail call double @llvm.fma.f64(double %655, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %657 = tail call double @llvm.fma.f64(double %655, double %656, double 0x3EC71DEE623FDE64)
  %658 = tail call double @llvm.fma.f64(double %655, double %657, double 0x3EFA01997C89E6B0)
  %659 = tail call double @llvm.fma.f64(double %655, double %658, double 0x3F2A01A014761F6E)
  %660 = tail call double @llvm.fma.f64(double %655, double %659, double 0x3F56C16C1852B7B0)
  %661 = tail call double @llvm.fma.f64(double %655, double %660, double 0x3F81111111122322)
  %662 = tail call double @llvm.fma.f64(double %655, double %661, double 0x3FA55555555502A1)
  %663 = tail call double @llvm.fma.f64(double %655, double %662, double 0x3FC5555555555511)
  %664 = tail call double @llvm.fma.f64(double %655, double %663, double 0x3FE000000000000B)
  %665 = tail call double @llvm.fma.f64(double %655, double %664, double 1.000000e+00)
  %666 = tail call double @llvm.fma.f64(double %655, double %665, double 1.000000e+00)
  %667 = fptosi double %652 to i32
  %668 = tail call double @llvm.amdgcn.ldexp.f64(double %666, i32 %667)
  %669 = fcmp ogt double %647, 1.024000e+03
  %670 = select i1 %669, double 0x7FF0000000000000, double %668
  %671 = fcmp olt double %647, -1.075000e+03
  %672 = select i1 %671, double 0.000000e+00, double %670
  %673 = tail call double @llvm.fma.f64(double %672, double %650, double %672)
  %674 = tail call double @llvm.fabs.f64(double %672) #3
  %675 = fcmp oeq double %674, 0x7FF0000000000000
  %676 = select i1 %675, double %672, double %673
  %677 = fcmp uge double %344, 0.000000e+00
  %678 = select i1 %677, double 0.000000e+00, double -0.000000e+00
  %679 = tail call double @llvm.copysign.f64(double %676, double %678)
  %680 = fcmp oeq double %519, 0x7FF0000000000000
  %681 = fcmp oeq double %344, 0.000000e+00
  %682 = or i1 %681, %680
  %683 = select i1 %681, double 0.000000e+00, double 0x7FF0000000000000
  %684 = tail call double @llvm.copysign.f64(double %683, double %344)
  %685 = select i1 %682, double %684, double %679
  %686 = fcmp uno double %344, 0.000000e+00
  %687 = select i1 %686, double 0x7FF8000000000000, double %685
  %688 = tail call double @llvm.fabs.f64(double %348)
  %689 = tail call double @llvm.amdgcn.frexp.mant.f64(double %688)
  %690 = fcmp olt double %689, 0x3FE5555555555555
  %691 = zext i1 %690 to i32
  %692 = tail call double @llvm.amdgcn.ldexp.f64(double %689, i32 %691)
  %693 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %688)
  %694 = sub nsw i32 %693, %691
  %695 = fadd double %692, -1.000000e+00
  %696 = fadd double %692, 1.000000e+00
  %697 = fadd double %696, -1.000000e+00
  %698 = fsub double %692, %697
  %699 = tail call double @llvm.amdgcn.rcp.f64(double %696)
  %700 = fneg double %696
  %701 = tail call double @llvm.fma.f64(double %700, double %699, double 1.000000e+00)
  %702 = tail call double @llvm.fma.f64(double %701, double %699, double %699)
  %703 = tail call double @llvm.fma.f64(double %700, double %702, double 1.000000e+00)
  %704 = tail call double @llvm.fma.f64(double %703, double %702, double %702)
  %705 = fmul double %695, %704
  %706 = fmul double %696, %705
  %707 = fneg double %706
  %708 = tail call double @llvm.fma.f64(double %705, double %696, double %707)
  %709 = tail call double @llvm.fma.f64(double %705, double %698, double %708)
  %710 = fadd double %706, %709
  %711 = fsub double %710, %706
  %712 = fsub double %709, %711
  %713 = fsub double %695, %710
  %714 = fsub double %695, %713
  %715 = fsub double %714, %710
  %716 = fsub double %715, %712
  %717 = fadd double %713, %716
  %718 = fmul double %704, %717
  %719 = fadd double %705, %718
  %720 = fsub double %719, %705
  %721 = fsub double %718, %720
  %722 = fmul double %719, %719
  %723 = fneg double %722
  %724 = tail call double @llvm.fma.f64(double %719, double %719, double %723)
  %725 = fmul double %721, 2.000000e+00
  %726 = tail call double @llvm.fma.f64(double %719, double %725, double %724)
  %727 = fadd double %722, %726
  %728 = fsub double %727, %722
  %729 = fsub double %726, %728
  %730 = tail call double @llvm.fma.f64(double %727, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %731 = tail call double @llvm.fma.f64(double %727, double %730, double 0x3FBE25E43ABE935A)
  %732 = tail call double @llvm.fma.f64(double %727, double %731, double 0x3FC110EF47E6C9C2)
  %733 = tail call double @llvm.fma.f64(double %727, double %732, double 0x3FC3B13BCFA74449)
  %734 = tail call double @llvm.fma.f64(double %727, double %733, double 0x3FC745D171BF3C30)
  %735 = tail call double @llvm.fma.f64(double %727, double %734, double 0x3FCC71C71C7792CE)
  %736 = tail call double @llvm.fma.f64(double %727, double %735, double 0x3FD24924924920DA)
  %737 = tail call double @llvm.fma.f64(double %727, double %736, double 0x3FD999999999999C)
  %738 = sitofp i32 %694 to double
  %739 = fmul double %738, 0x3FE62E42FEFA39EF
  %740 = fneg double %739
  %741 = tail call double @llvm.fma.f64(double %738, double 0x3FE62E42FEFA39EF, double %740)
  %742 = tail call double @llvm.fma.f64(double %738, double 0x3C7ABC9E3B39803F, double %741)
  %743 = fadd double %739, %742
  %744 = fsub double %743, %739
  %745 = fsub double %742, %744
  %746 = tail call double @llvm.amdgcn.ldexp.f64(double %719, i32 1)
  %747 = tail call double @llvm.amdgcn.ldexp.f64(double %721, i32 1)
  %748 = fmul double %719, %727
  %749 = fneg double %748
  %750 = tail call double @llvm.fma.f64(double %727, double %719, double %749)
  %751 = tail call double @llvm.fma.f64(double %727, double %721, double %750)
  %752 = tail call double @llvm.fma.f64(double %729, double %719, double %751)
  %753 = fadd double %748, %752
  %754 = fsub double %753, %748
  %755 = fsub double %752, %754
  %756 = fmul double %727, %737
  %757 = fneg double %756
  %758 = tail call double @llvm.fma.f64(double %727, double %737, double %757)
  %759 = tail call double @llvm.fma.f64(double %729, double %737, double %758)
  %760 = fadd double %756, %759
  %761 = fsub double %760, %756
  %762 = fsub double %759, %761
  %763 = fadd double %760, 0x3FE5555555555555
  %764 = fadd double %763, 0xBFE5555555555555
  %765 = fsub double %760, %764
  %766 = fadd double %762, 0x3C8543B0D5DF274D
  %767 = fadd double %766, %765
  %768 = fadd double %763, %767
  %769 = fsub double %768, %763
  %770 = fsub double %767, %769
  %771 = fmul double %753, %768
  %772 = fneg double %771
  %773 = tail call double @llvm.fma.f64(double %753, double %768, double %772)
  %774 = tail call double @llvm.fma.f64(double %753, double %770, double %773)
  %775 = tail call double @llvm.fma.f64(double %755, double %768, double %774)
  %776 = fadd double %771, %775
  %777 = fsub double %776, %771
  %778 = fsub double %775, %777
  %779 = fadd double %746, %776
  %780 = fsub double %779, %746
  %781 = fsub double %776, %780
  %782 = fadd double %747, %778
  %783 = fadd double %782, %781
  %784 = fadd double %779, %783
  %785 = fsub double %784, %779
  %786 = fsub double %783, %785
  %787 = fadd double %743, %784
  %788 = fsub double %787, %743
  %789 = fsub double %787, %788
  %790 = fsub double %743, %789
  %791 = fsub double %784, %788
  %792 = fadd double %791, %790
  %793 = fadd double %745, %786
  %794 = fsub double %793, %745
  %795 = fsub double %793, %794
  %796 = fsub double %745, %795
  %797 = fsub double %786, %794
  %798 = fadd double %797, %796
  %799 = fadd double %793, %792
  %800 = fadd double %787, %799
  %801 = fsub double %800, %787
  %802 = fsub double %799, %801
  %803 = fadd double %798, %802
  %804 = fadd double %800, %803
  %805 = fsub double %804, %800
  %806 = fsub double %803, %805
  %807 = fmul double %804, 3.000000e+00
  %808 = fneg double %807
  %809 = tail call double @llvm.fma.f64(double %804, double 3.000000e+00, double %808)
  %810 = tail call double @llvm.fma.f64(double %806, double 3.000000e+00, double %809)
  %811 = fadd double %807, %810
  %812 = fsub double %811, %807
  %813 = fsub double %810, %812
  %814 = tail call double @llvm.fabs.f64(double %807) #3
  %815 = fcmp oeq double %814, 0x7FF0000000000000
  %816 = select i1 %815, double %807, double %811
  %817 = tail call double @llvm.fabs.f64(double %816) #3
  %818 = fcmp oeq double %817, 0x7FF0000000000000
  %819 = select i1 %818, double 0.000000e+00, double %813
  %820 = fmul double %816, 0x3FF71547652B82FE
  %821 = tail call double @llvm.rint.f64(double %820)
  %822 = fneg double %821
  %823 = tail call double @llvm.fma.f64(double %822, double 0x3FE62E42FEFA39EF, double %816)
  %824 = tail call double @llvm.fma.f64(double %822, double 0x3C7ABC9E3B39803F, double %823)
  %825 = tail call double @llvm.fma.f64(double %824, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %826 = tail call double @llvm.fma.f64(double %824, double %825, double 0x3EC71DEE623FDE64)
  %827 = tail call double @llvm.fma.f64(double %824, double %826, double 0x3EFA01997C89E6B0)
  %828 = tail call double @llvm.fma.f64(double %824, double %827, double 0x3F2A01A014761F6E)
  %829 = tail call double @llvm.fma.f64(double %824, double %828, double 0x3F56C16C1852B7B0)
  %830 = tail call double @llvm.fma.f64(double %824, double %829, double 0x3F81111111122322)
  %831 = tail call double @llvm.fma.f64(double %824, double %830, double 0x3FA55555555502A1)
  %832 = tail call double @llvm.fma.f64(double %824, double %831, double 0x3FC5555555555511)
  %833 = tail call double @llvm.fma.f64(double %824, double %832, double 0x3FE000000000000B)
  %834 = tail call double @llvm.fma.f64(double %824, double %833, double 1.000000e+00)
  %835 = tail call double @llvm.fma.f64(double %824, double %834, double 1.000000e+00)
  %836 = fptosi double %821 to i32
  %837 = tail call double @llvm.amdgcn.ldexp.f64(double %835, i32 %836)
  %838 = fcmp ogt double %816, 1.024000e+03
  %839 = select i1 %838, double 0x7FF0000000000000, double %837
  %840 = fcmp olt double %816, -1.075000e+03
  %841 = select i1 %840, double 0.000000e+00, double %839
  %842 = tail call double @llvm.fma.f64(double %841, double %819, double %841)
  %843 = tail call double @llvm.fabs.f64(double %841) #3
  %844 = fcmp oeq double %843, 0x7FF0000000000000
  %845 = select i1 %844, double %841, double %842
  %846 = fcmp uge double %348, 0.000000e+00
  %847 = select i1 %846, double 0.000000e+00, double -0.000000e+00
  %848 = tail call double @llvm.copysign.f64(double %845, double %847)
  %849 = fcmp oeq double %688, 0x7FF0000000000000
  %850 = fcmp oeq double %348, 0.000000e+00
  %851 = or i1 %850, %849
  %852 = select i1 %850, double 0.000000e+00, double 0x7FF0000000000000
  %853 = tail call double @llvm.copysign.f64(double %852, double %348)
  %854 = select i1 %851, double %853, double %848
  %855 = fcmp uno double %348, 0.000000e+00
  %856 = select i1 %855, double 0x7FF8000000000000, double %854
  %857 = fsub contract double %687, %856
  %858 = fmul contract double %857, %518
  %859 = fdiv contract double %858, 3.000000e+00
  br label %863

860:                                              ; preds = %34
  %861 = fsub contract double %344, %348
  %862 = fmul contract double %861, %351
  br label %863

863:                                              ; preds = %860, %352
  %864 = phi double [ %859, %352 ], [ %862, %860 ]
  %865 = fmul contract double %339, %864
  %866 = getelementptr inbounds double, double addrspace(1)* %0, i64 %42
  store double %865, double addrspace(1)* %866, align 8, !tbaa !16
  br label %867

867:                                              ; preds = %863, %14
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.frexp.mant.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.trunc.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.copysign.f64(double, double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #1

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !12, i64 16}
!8 = !{!"hsa_kernel_dispatch_packet_s", !9, i64 0, !9, i64 2, !9, i64 4, !9, i64 6, !9, i64 8, !9, i64 10, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !13, i64 32, !14, i64 40, !13, i64 48, !15, i64 56}
!9 = !{!"short", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!"int", !10, i64 0}
!13 = !{!"long", !10, i64 0}
!14 = !{!"any pointer", !10, i64 0}
!15 = !{!"hsa_signal_s", !13, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"double", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C++ TBAA"}
