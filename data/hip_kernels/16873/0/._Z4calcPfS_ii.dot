digraph "CFG for '_Z4calcPfS_ii' function" {
	label="CFG for '_Z4calcPfS_ii' function";

	Node0x619b5b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = mul i32 %5, %10\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %16 = add i32 %14, %15\l  %17 = udiv i32 %13, %10\l  %18 = mul i32 %17, %10\l  %19 = icmp ugt i32 %13, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = icmp slt i32 %16, %3\l  br i1 %22, label %23, label %194\l|{<s0>T|<s1>F}}"];
	Node0x619b5b0:s0 -> Node0x619daf0;
	Node0x619b5b0:s1 -> Node0x619db80;
	Node0x619daf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%23:\l23:                                               \l  %24 = mul nsw i32 %16, 10\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %0, i64 %25\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %28 = or i32 %24, 1\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %32 = add nsw i32 %24, 2\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %36 = add nsw i32 %24, 3\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %40 = add nsw i32 %24, 4\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %44 = add nsw i32 %24, 5\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %48 = add nsw i32 %24, 6\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %52 = add nsw i32 %24, 7\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %56 = add nsw i32 %24, 8\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %60 = add nsw i32 %24, 9\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %64 = icmp sgt i32 %21, 0\l  br i1 %64, label %65, label %194\l|{<s0>T|<s1>F}}"];
	Node0x619daf0:s0 -> Node0x619efb0;
	Node0x619daf0:s1 -> Node0x619db80;
	Node0x619efb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%65:\l65:                                               \l  %66 = mul nuw nsw i32 %15, 10\l  %67 = getelementptr inbounds [1280 x float], [1280 x float] addrspace(3)*\l... @_ZZ4calcPfS_iiE13cached_points, i32 0, i32 %66\l  %68 = fpext float %39 to double\l  %69 = fmul contract double %68, 6.674000e-11\l  %70 = sitofp i32 %2 to float\l  %71 = fmul contract float %43, %70\l  %72 = fadd contract float %27, %71\l  %73 = fmul contract float %70, %70\l  %74 = fmul contract float %73, %55\l  %75 = fmul contract float %74, 5.000000e-01\l  %76 = fadd contract float %72, %75\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %25\l  %78 = fmul contract float %47, %70\l  %79 = fadd contract float %31, %78\l  %80 = fmul contract float %73, %59\l  %81 = fmul contract float %80, 5.000000e-01\l  %82 = fadd contract float %79, %81\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %84 = fmul contract float %51, %70\l  %85 = fadd contract float %35, %84\l  %86 = fmul contract float %73, %63\l  %87 = fmul contract float %86, 5.000000e-01\l  %88 = fadd contract float %85, %87\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %33\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %91 = fmul contract float %55, %70\l  %92 = fadd contract float %43, %91\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %94 = fmul contract float %59, %70\l  %95 = fadd contract float %47, %94\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  %97 = fmul contract float %63, %70\l  %98 = fadd contract float %51, %97\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  br label %103\l}"];
	Node0x619efb0 -> Node0x61a27f0;
	Node0x61a27f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%103:\l103:                                              \l  %104 = phi i32 [ 0, %65 ], [ %119, %115 ]\l  %105 = shl nsw i32 %104, 7\l  %106 = add nuw nsw i32 %105, %15\l  %107 = icmp slt i32 %106, %3\l  br i1 %107, label %108, label %114\l|{<s0>T|<s1>F}}"];
	Node0x61a27f0:s0 -> Node0x61a2bd0;
	Node0x61a27f0:s1 -> Node0x61a2c60;
	Node0x61a2bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%108:\l108:                                              \l  %109 = mul nsw i32 %106, 10\l  %110 = add nuw nsw i32 %109, 9\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !16\l  store float %113, float addrspace(3)* %67, align 8, !tbaa !16\l  br label %114\l}"];
	Node0x61a2bd0 -> Node0x61a2c60;
	Node0x61a2c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%114:\l114:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %121\l}"];
	Node0x61a2c60 -> Node0x61a3400;
	Node0x61a28e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%115:\l115:                                              \l  store float %76, float addrspace(1)* %77, align 4, !tbaa !16\l  store float %82, float addrspace(1)* %83, align 4, !tbaa !16\l  store float %88, float addrspace(1)* %89, align 4, !tbaa !16\l  store float %39, float addrspace(1)* %90, align 4, !tbaa !16\l  store float %92, float addrspace(1)* %93, align 4, !tbaa !16\l  store float %95, float addrspace(1)* %96, align 4, !tbaa !16\l  store float %98, float addrspace(1)* %99, align 4, !tbaa !16\l  %116 = fdiv contract float %191, %39\l  store float %116, float addrspace(1)* %100, align 4, !tbaa !16\l  %117 = fdiv contract float %190, %39\l  store float %117, float addrspace(1)* %101, align 4, !tbaa !16\l  %118 = fdiv contract float %189, %39\l  store float %118, float addrspace(1)* %102, align 4, !tbaa !16\l  %119 = add nuw nsw i32 %104, 1\l  %120 = icmp eq i32 %119, %21\l  br i1 %120, label %194, label %103, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x61a28e0:s0 -> Node0x619db80;
	Node0x61a28e0:s1 -> Node0x61a27f0;
	Node0x61a3400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%121:\l121:                                              \l  %122 = phi float [ 0.000000e+00, %114 ], [ %191, %188 ]\l  %123 = phi float [ 0.000000e+00, %114 ], [ %190, %188 ]\l  %124 = phi float [ 0.000000e+00, %114 ], [ %189, %188 ]\l  %125 = phi i32 [ 0, %114 ], [ %192, %188 ]\l  %126 = add nuw nsw i32 %125, %105\l  %127 = icmp sge i32 %126, %3\l  %128 = icmp eq i32 %126, %16\l  %129 = select i1 %127, i1 true, i1 %128\l  br i1 %129, label %188, label %130\l|{<s0>T|<s1>F}}"];
	Node0x61a3400:s0 -> Node0x61a3ff0;
	Node0x61a3400:s1 -> Node0x61a0560;
	Node0x61a0560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%130:\l130:                                              \l  %131 = mul nuw nsw i32 %125, 10\l  %132 = getelementptr inbounds [1280 x float], [1280 x float] addrspace(3)*\l... @_ZZ4calcPfS_iiE13cached_points, i32 0, i32 %131\l  %133 = load float, float addrspace(3)* %132, align 8, !tbaa !16\l  %134 = fsub contract float %133, %27\l  %135 = or i32 %131, 1\l  %136 = getelementptr inbounds [1280 x float], [1280 x float] addrspace(3)*\l... @_ZZ4calcPfS_iiE13cached_points, i32 0, i32 %135\l  %137 = load float, float addrspace(3)* %136, align 4, !tbaa !16\l  %138 = fsub contract float %137, %31\l  %139 = add nuw nsw i32 %131, 2\l  %140 = getelementptr inbounds [1280 x float], [1280 x float] addrspace(3)*\l... @_ZZ4calcPfS_iiE13cached_points, i32 0, i32 %139\l  %141 = load float, float addrspace(3)* %140, align 8, !tbaa !16\l  %142 = fsub contract float %141, %35\l  %143 = fmul contract float %134, %134\l  %144 = fmul contract float %138, %138\l  %145 = fadd contract float %143, %144\l  %146 = fmul contract float %142, %142\l  %147 = fadd contract float %145, %146\l  %148 = fcmp olt float %147, 0x39F0000000000000\l  %149 = select i1 %148, float 0x41F0000000000000, float 1.000000e+00\l  %150 = fmul float %147, %149\l  %151 = tail call float @llvm.sqrt.f32(float %150)\l  %152 = bitcast float %151 to i32\l  %153 = add nsw i32 %152, -1\l  %154 = bitcast i32 %153 to float\l  %155 = add nsw i32 %152, 1\l  %156 = bitcast i32 %155 to float\l  %157 = tail call i1 @llvm.amdgcn.class.f32(float %150, i32 608)\l  %158 = select i1 %148, float 0x3EF0000000000000, float 1.000000e+00\l  %159 = fneg float %156\l  %160 = tail call float @llvm.fma.f32(float %159, float %151, float %150)\l  %161 = fcmp ogt float %160, 0.000000e+00\l  %162 = fneg float %154\l  %163 = tail call float @llvm.fma.f32(float %162, float %151, float %150)\l  %164 = fcmp ole float %163, 0.000000e+00\l  %165 = select i1 %164, float %154, float %151\l  %166 = select i1 %161, float %156, float %165\l  %167 = fmul float %158, %166\l  %168 = select i1 %157, float %150, float %167\l  %169 = add nuw nsw i32 %131, 3\l  %170 = getelementptr inbounds [1280 x float], [1280 x float] addrspace(3)*\l... @_ZZ4calcPfS_iiE13cached_points, i32 0, i32 %169\l  %171 = load float, float addrspace(3)* %170, align 4, !tbaa !16\l  %172 = fpext float %171 to double\l  %173 = fmul contract double %69, %172\l  %174 = fmul contract float %168, %168\l  %175 = fadd contract float %174, 0x3EB0C6F7C0000000\l  %176 = fpext float %175 to double\l  %177 = fdiv contract double %173, %176\l  %178 = fptrunc double %177 to float\l  %179 = fmul contract float %134, %178\l  %180 = fdiv contract float %179, %168\l  %181 = fadd contract float %122, %180\l  %182 = fmul contract float %138, %178\l  %183 = fdiv contract float %182, %168\l  %184 = fadd contract float %123, %183\l  %185 = fmul contract float %142, %178\l  %186 = fdiv contract float %185, %168\l  %187 = fadd contract float %124, %186\l  br label %188\l}"];
	Node0x61a0560 -> Node0x61a3ff0;
	Node0x61a3ff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%188:\l188:                                              \l  %189 = phi float [ %187, %130 ], [ %124, %121 ]\l  %190 = phi float [ %184, %130 ], [ %123, %121 ]\l  %191 = phi float [ %181, %130 ], [ %122, %121 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %192 = add nuw nsw i32 %125, 1\l  %193 = icmp eq i32 %192, 128\l  br i1 %193, label %115, label %121, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x61a3ff0:s0 -> Node0x61a28e0;
	Node0x61a3ff0:s1 -> Node0x61a3400;
	Node0x619db80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%194:\l194:                                              \l  ret void\l}"];
}
