digraph "CFG for '_Z15multiplyVectorsPfS_S_ii' function" {
	label="CFG for '_Z15multiplyVectorsPfS_S_ii' function";

	Node0x51c6eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp slt i32 %14, %3\l  %24 = icmp slt i32 %22, %4\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %176\l|{<s0>T|<s1>F}}"];
	Node0x51c6eb0:s0 -> Node0x51ca910;
	Node0x51c6eb0:s1 -> Node0x51ca9a0;
	Node0x51ca910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %3, 0\l  %28 = mul nsw i32 %22, %3\l  br i1 %27, label %29, label %61\l|{<s0>T|<s1>F}}"];
	Node0x51ca910:s0 -> Node0x51cac30;
	Node0x51ca910:s1 -> Node0x51cac80;
	Node0x51cac30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = and i32 %3, 7\l  %31 = icmp ult i32 %3, 8\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x51cac30:s0 -> Node0x51caf40;
	Node0x51cac30:s1 -> Node0x51caf90;
	Node0x51caf90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %3, -8\l  br label %66\l}"];
	Node0x51caf90 -> Node0x51c9780;
	Node0x51caf40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = phi double [ undef, %29 ], [ %172, %66 ]\l  %36 = phi i32 [ 0, %29 ], [ %173, %66 ]\l  %37 = phi double [ 0.000000e+00, %29 ], [ %172, %66 ]\l  %38 = icmp eq i32 %30, 0\l  br i1 %38, label %58, label %39\l|{<s0>T|<s1>F}}"];
	Node0x51caf40:s0 -> Node0x51cc500;
	Node0x51caf40:s1 -> Node0x51cc590;
	Node0x51cc590 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %55, %39 ], [ %36, %34 ]\l  %41 = phi double [ %54, %39 ], [ %37, %34 ]\l  %42 = phi i32 [ %56, %39 ], [ 0, %34 ]\l  %43 = add nsw i32 %40, %28\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %47 = mul nsw i32 %40, %3\l  %48 = add nsw i32 %47, %14\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %52 = fmul contract float %46, %51\l  %53 = fpext float %52 to double\l  %54 = fadd contract double %41, %53\l  %55 = add nuw nsw i32 %40, 1\l  %56 = add i32 %42, 1\l  %57 = icmp eq i32 %56, %30\l  br i1 %57, label %58, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x51cc590:s0 -> Node0x51cc500;
	Node0x51cc590:s1 -> Node0x51cc590;
	Node0x51cc500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%58:\l58:                                               \l  %59 = phi double [ %35, %34 ], [ %54, %39 ]\l  %60 = fptrunc double %59 to float\l  br label %61\l}"];
	Node0x51cc500 -> Node0x51cac80;
	Node0x51cac80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%61:\l61:                                               \l  %62 = phi float [ %60, %58 ], [ 0.000000e+00, %26 ]\l  %63 = add nsw i32 %28, %14\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64\l  store float %62, float addrspace(1)* %65, align 4, !tbaa !7\l  br label %176\l}"];
	Node0x51cac80 -> Node0x51ca9a0;
	Node0x51c9780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%66:\l66:                                               \l  %67 = phi i32 [ 0, %32 ], [ %173, %66 ]\l  %68 = phi double [ 0.000000e+00, %32 ], [ %172, %66 ]\l  %69 = phi i32 [ 0, %32 ], [ %174, %66 ]\l  %70 = add nsw i32 %67, %28\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %74 = mul nsw i32 %67, %3\l  %75 = add nsw i32 %74, %14\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %79 = fmul contract float %73, %78\l  %80 = fpext float %79 to double\l  %81 = fadd contract double %68, %80\l  %82 = or i32 %67, 1\l  %83 = add nsw i32 %82, %28\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %87 = mul nsw i32 %82, %3\l  %88 = add nsw i32 %87, %14\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %92 = fmul contract float %86, %91\l  %93 = fpext float %92 to double\l  %94 = fadd contract double %81, %93\l  %95 = or i32 %67, 2\l  %96 = add nsw i32 %95, %28\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %100 = mul nsw i32 %95, %3\l  %101 = add nsw i32 %100, %14\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %105 = fmul contract float %99, %104\l  %106 = fpext float %105 to double\l  %107 = fadd contract double %94, %106\l  %108 = or i32 %67, 3\l  %109 = add nsw i32 %108, %28\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %113 = mul nsw i32 %108, %3\l  %114 = add nsw i32 %113, %14\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %118 = fmul contract float %112, %117\l  %119 = fpext float %118 to double\l  %120 = fadd contract double %107, %119\l  %121 = or i32 %67, 4\l  %122 = add nsw i32 %121, %28\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %126 = mul nsw i32 %121, %3\l  %127 = add nsw i32 %126, %14\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %131 = fmul contract float %125, %130\l  %132 = fpext float %131 to double\l  %133 = fadd contract double %120, %132\l  %134 = or i32 %67, 5\l  %135 = add nsw i32 %134, %28\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %139 = mul nsw i32 %134, %3\l  %140 = add nsw i32 %139, %14\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %1, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %144 = fmul contract float %138, %143\l  %145 = fpext float %144 to double\l  %146 = fadd contract double %133, %145\l  %147 = or i32 %67, 6\l  %148 = add nsw i32 %147, %28\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %0, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %152 = mul nsw i32 %147, %3\l  %153 = add nsw i32 %152, %14\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %1, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %157 = fmul contract float %151, %156\l  %158 = fpext float %157 to double\l  %159 = fadd contract double %146, %158\l  %160 = or i32 %67, 7\l  %161 = add nsw i32 %160, %28\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %165 = mul nsw i32 %160, %3\l  %166 = add nsw i32 %165, %14\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %1, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %170 = fmul contract float %164, %169\l  %171 = fpext float %170 to double\l  %172 = fadd contract double %159, %171\l  %173 = add nuw nsw i32 %67, 8\l  %174 = add i32 %69, 8\l  %175 = icmp eq i32 %174, %33\l  br i1 %175, label %34, label %66, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x51c9780:s0 -> Node0x51caf40;
	Node0x51c9780:s1 -> Node0x51c9780;
	Node0x51ca9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%176:\l176:                                              \l  ret void\l}"];
}
