digraph "CFG for '_Z15multiply_devicePdS_i' function" {
	label="CFG for '_Z15multiply_devicePdS_i' function";

	Node0x63f9b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = icmp slt i32 %5, %2\l  br i1 %6, label %7, label %161\l|{<s0>T|<s1>F}}"];
	Node0x63f9b90:s0 -> Node0x63fabe0;
	Node0x63f9b90:s1 -> Node0x63fac70;
	Node0x63fabe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%7:\l7:                                                \l  %8 = icmp sgt i32 %2, 0\l  %9 = mul nsw i32 %4, %2\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !5\l  %14 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !14, !invariant.load\l... !15\l  %17 = zext i16 %16 to i32\l  %18 = udiv i32 %13, %17\l  %19 = mul i32 %18, %17\l  %20 = icmp ugt i32 %13, %19\l  %21 = zext i1 %20 to i32\l  %22 = and i32 %2, 7\l  %23 = icmp ult i32 %2, 8\l  %24 = and i32 %2, -8\l  %25 = icmp eq i32 %22, 0\l  br label %26\l}"];
	Node0x63fabe0 -> Node0x63fc4b0;
	Node0x63fc4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%26:\l26:                                               \l  %27 = phi i32 [ %5, %7 ], [ %159, %153 ]\l  br i1 %8, label %28, label %153\l|{<s0>T|<s1>F}}"];
	Node0x63fc4b0:s0 -> Node0x63fc720;
	Node0x63fc4b0:s1 -> Node0x63fc5e0;
	Node0x63fc720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%28:\l28:                                               \l  br i1 %23, label %131, label %29\l|{<s0>T|<s1>F}}"];
	Node0x63fc720:s0 -> Node0x63fc860;
	Node0x63fc720:s1 -> Node0x63fc8b0;
	Node0x63fc8b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%29:\l29:                                               \l  %30 = phi i32 [ %128, %29 ], [ 0, %28 ]\l  %31 = phi double [ %127, %29 ], [ 0.000000e+00, %28 ]\l  %32 = phi i32 [ %129, %29 ], [ 0, %28 ]\l  %33 = mul nsw i32 %30, %2\l  %34 = add nsw i32 %33, %4\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %0, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !16\l  %38 = add nsw i32 %33, %27\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %0, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !16\l  %42 = fmul contract double %37, %41\l  %43 = fadd contract double %31, %42\l  %44 = or i32 %30, 1\l  %45 = mul nsw i32 %44, %2\l  %46 = add nsw i32 %45, %4\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds double, double addrspace(1)* %0, i64 %47\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !16\l  %50 = add nsw i32 %45, %27\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %0, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !16\l  %54 = fmul contract double %49, %53\l  %55 = fadd contract double %43, %54\l  %56 = or i32 %30, 2\l  %57 = mul nsw i32 %56, %2\l  %58 = add nsw i32 %57, %4\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %0, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !16\l  %62 = add nsw i32 %57, %27\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds double, double addrspace(1)* %0, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !16\l  %66 = fmul contract double %61, %65\l  %67 = fadd contract double %55, %66\l  %68 = or i32 %30, 3\l  %69 = mul nsw i32 %68, %2\l  %70 = add nsw i32 %69, %4\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds double, double addrspace(1)* %0, i64 %71\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !16\l  %74 = add nsw i32 %69, %27\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %0, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !16\l  %78 = fmul contract double %73, %77\l  %79 = fadd contract double %67, %78\l  %80 = or i32 %30, 4\l  %81 = mul nsw i32 %80, %2\l  %82 = add nsw i32 %81, %4\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %0, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !16\l  %86 = add nsw i32 %81, %27\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %0, i64 %87\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !16\l  %90 = fmul contract double %85, %89\l  %91 = fadd contract double %79, %90\l  %92 = or i32 %30, 5\l  %93 = mul nsw i32 %92, %2\l  %94 = add nsw i32 %93, %4\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds double, double addrspace(1)* %0, i64 %95\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !16\l  %98 = add nsw i32 %93, %27\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %0, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %102 = fmul contract double %97, %101\l  %103 = fadd contract double %91, %102\l  %104 = or i32 %30, 6\l  %105 = mul nsw i32 %104, %2\l  %106 = add nsw i32 %105, %4\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds double, double addrspace(1)* %0, i64 %107\l  %109 = load double, double addrspace(1)* %108, align 8, !tbaa !16\l  %110 = add nsw i32 %105, %27\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds double, double addrspace(1)* %0, i64 %111\l  %113 = load double, double addrspace(1)* %112, align 8, !tbaa !16\l  %114 = fmul contract double %109, %113\l  %115 = fadd contract double %103, %114\l  %116 = or i32 %30, 7\l  %117 = mul nsw i32 %116, %2\l  %118 = add nsw i32 %117, %4\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds double, double addrspace(1)* %0, i64 %119\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !16\l  %122 = add nsw i32 %117, %27\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds double, double addrspace(1)* %0, i64 %123\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !16\l  %126 = fmul contract double %121, %125\l  %127 = fadd contract double %115, %126\l  %128 = add nuw nsw i32 %30, 8\l  %129 = add i32 %32, 8\l  %130 = icmp eq i32 %129, %24\l  br i1 %130, label %131, label %29, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x63fc8b0:s0 -> Node0x63fc860;
	Node0x63fc8b0:s1 -> Node0x63fc8b0;
	Node0x63fc860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%131:\l131:                                              \l  %132 = phi double [ undef, %28 ], [ %127, %29 ]\l  %133 = phi i32 [ 0, %28 ], [ %128, %29 ]\l  %134 = phi double [ 0.000000e+00, %28 ], [ %127, %29 ]\l  br i1 %25, label %153, label %135\l|{<s0>T|<s1>F}}"];
	Node0x63fc860:s0 -> Node0x63fc5e0;
	Node0x63fc860:s1 -> Node0x64022a0;
	Node0x64022a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%135:\l135:                                              \l  %136 = phi i32 [ %150, %135 ], [ %133, %131 ]\l  %137 = phi double [ %149, %135 ], [ %134, %131 ]\l  %138 = phi i32 [ %151, %135 ], [ 0, %131 ]\l  %139 = mul nsw i32 %136, %2\l  %140 = add nsw i32 %139, %4\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds double, double addrspace(1)* %0, i64 %141\l  %143 = load double, double addrspace(1)* %142, align 8, !tbaa !16\l  %144 = add nsw i32 %139, %27\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds double, double addrspace(1)* %0, i64 %145\l  %147 = load double, double addrspace(1)* %146, align 8, !tbaa !16\l  %148 = fmul contract double %143, %147\l  %149 = fadd contract double %137, %148\l  %150 = add nuw nsw i32 %136, 1\l  %151 = add i32 %138, 1\l  %152 = icmp eq i32 %151, %22\l  br i1 %152, label %153, label %135, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x64022a0:s0 -> Node0x63fc5e0;
	Node0x64022a0:s1 -> Node0x64022a0;
	Node0x63fc5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%153:\l153:                                              \l  %154 = phi double [ 0.000000e+00, %26 ], [ %132, %131 ], [ %149, %135 ]\l  %155 = add nsw i32 %27, %9\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds double, double addrspace(1)* %1, i64 %156\l  store double %154, double addrspace(1)* %157, align 8, !tbaa !16\l  %158 = add i32 %18, %27\l  %159 = add i32 %158, %21\l  %160 = icmp slt i32 %159, %2\l  br i1 %160, label %26, label %161, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x63fc5e0:s0 -> Node0x63fc4b0;
	Node0x63fc5e0:s1 -> Node0x63fac70;
	Node0x63fac70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%161:\l161:                                              \l  ret void\l}"];
}
