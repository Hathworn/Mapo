digraph "CFG for '_Z9minKernelPfiS_' function" {
	label="CFG for '_Z9minKernelPfiS_' function";

	Node0x4ea1260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = shl i32 %5, 1\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = mul i32 %6, %11\l  %16 = add i32 %15, %4\l  %17 = shl nuw nsw i32 %11, 1\l  %18 = udiv i32 %14, %11\l  %19 = mul i32 %18, %11\l  %20 = icmp ugt i32 %14, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %17, %22\l  %24 = icmp ult i32 %16, %1\l  br i1 %24, label %25, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4ea1260:s0 -> Node0x4ea1ff0;
	Node0x4ea1260:s1 -> Node0x4ea39f0;
	Node0x4ea1ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%25:\l25:                                               \l  %26 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %4\l  br label %31\l}"];
	Node0x4ea1ff0 -> Node0x4ea3bf0;
	Node0x4ea39f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%27:\l27:                                               \l  %28 = icmp ugt i16 %10, 65\l  br i1 %28, label %29, label %43\l|{<s0>T|<s1>F}}"];
	Node0x4ea39f0:s0 -> Node0x4ea3d70;
	Node0x4ea39f0:s1 -> Node0x4ea3dc0;
	Node0x4ea3d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%29:\l29:                                               \l  %30 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %4\l  br label %45\l}"];
	Node0x4ea3d70 -> Node0x4ea3ff0;
	Node0x4ea3bf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ %16, %25 ], [ %41, %31 ]\l  %33 = zext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %36 = add i32 %32, %11\l  %37 = zext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %40 = tail call float @llvm.minnum.f32(float %35, float %39)\l  store float %40, float addrspace(3)* %26, align 4, !tbaa !16\l  %41 = add i32 %32, %23\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %42 = icmp ult i32 %41, %1\l  br i1 %42, label %31, label %27, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4ea3bf0:s0 -> Node0x4ea3bf0;
	Node0x4ea3bf0:s1 -> Node0x4ea39f0;
	Node0x4ea3dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%43:\l43:                                               \l  %44 = icmp ult i32 %4, 32\l  br i1 %44, label %57, label %89\l|{<s0>T|<s1>F}}"];
	Node0x4ea3dc0:s0 -> Node0x4ea5d20;
	Node0x4ea3dc0:s1 -> Node0x4ea5d70;
	Node0x4ea3ff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi i32 [ %11, %29 ], [ %47, %55 ]\l  %47 = lshr i32 %46, 1\l  %48 = icmp ult i32 %4, %47\l  br i1 %48, label %49, label %55\l|{<s0>T|<s1>F}}"];
	Node0x4ea3ff0:s0 -> Node0x4ea6140;
	Node0x4ea3ff0:s1 -> Node0x4ea5ee0;
	Node0x4ea6140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%49:\l49:                                               \l  %50 = load float, float addrspace(3)* %30, align 4, !tbaa !16\l  %51 = add nuw nsw i32 %47, %4\l  %52 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %51\l  %53 = load float, float addrspace(3)* %52, align 4, !tbaa !16\l  %54 = tail call float @llvm.minnum.f32(float %50, float %53)\l  store float %54, float addrspace(3)* %30, align 4, !tbaa !16\l  br label %55\l}"];
	Node0x4ea6140 -> Node0x4ea5ee0;
	Node0x4ea5ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %56 = icmp ugt i32 %46, 131\l  br i1 %56, label %45, label %43, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4ea5ee0:s0 -> Node0x4ea3ff0;
	Node0x4ea5ee0:s1 -> Node0x4ea3dc0;
	Node0x4ea5d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%57:\l57:                                               \l  %58 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %4\l  %59 = load float, float addrspace(3)* %58, align 4, !tbaa !16\l  %60 = add nuw nsw i32 %4, 32\l  %61 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %60\l  %62 = load float, float addrspace(3)* %61, align 4, !tbaa !16\l  %63 = tail call float @llvm.minnum.f32(float %59, float %62)\l  store float %63, float addrspace(3)* %58, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %64 = load float, float addrspace(3)* %58, align 4, !tbaa !16\l  %65 = add nuw nsw i32 %4, 16\l  %66 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %65\l  %67 = load float, float addrspace(3)* %66, align 4, !tbaa !16\l  %68 = tail call float @llvm.minnum.f32(float %64, float %67)\l  store float %68, float addrspace(3)* %58, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %69 = load float, float addrspace(3)* %58, align 4, !tbaa !16\l  %70 = add nuw nsw i32 %4, 8\l  %71 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %70\l  %72 = load float, float addrspace(3)* %71, align 4, !tbaa !16\l  %73 = tail call float @llvm.minnum.f32(float %69, float %72)\l  store float %73, float addrspace(3)* %58, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %74 = load float, float addrspace(3)* %58, align 4, !tbaa !16\l  %75 = add nuw nsw i32 %4, 4\l  %76 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %75\l  %77 = load float, float addrspace(3)* %76, align 4, !tbaa !16\l  %78 = tail call float @llvm.minnum.f32(float %74, float %77)\l  store float %78, float addrspace(3)* %58, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %79 = load float, float addrspace(3)* %58, align 4, !tbaa !16\l  %80 = add nuw nsw i32 %4, 2\l  %81 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %80\l  %82 = load float, float addrspace(3)* %81, align 4, !tbaa !16\l  %83 = tail call float @llvm.minnum.f32(float %79, float %82)\l  store float %83, float addrspace(3)* %58, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %84 = load float, float addrspace(3)* %58, align 4, !tbaa !16\l  %85 = add nuw nsw i32 %4, 1\l  %86 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sdata,\l... i32 0, i32 %85\l  %87 = load float, float addrspace(3)* %86, align 4, !tbaa !16\l  %88 = tail call float @llvm.minnum.f32(float %84, float %87)\l  store float %88, float addrspace(3)* %58, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %89\l}"];
	Node0x4ea5d20 -> Node0x4ea5d70;
	Node0x4ea5d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%89:\l89:                                               \l  %90 = icmp eq i32 %4, 0\l  br i1 %90, label %91, label %95\l|{<s0>T|<s1>F}}"];
	Node0x4ea5d70:s0 -> Node0x4ea8e60;
	Node0x4ea5d70:s1 -> Node0x4ea8eb0;
	Node0x4ea8e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%91:\l91:                                               \l  %92 = load float, float addrspace(3)* getelementptr inbounds ([0 x float],\l... [0 x float] addrspace(3)* @sdata, i32 0, i32 0), align 4, !tbaa !16\l  %93 = zext i32 %5 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  store float %92, float addrspace(1)* %94, align 4, !tbaa !16\l  br label %95\l}"];
	Node0x4ea8e60 -> Node0x4ea8eb0;
	Node0x4ea8eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%95:\l95:                                               \l  ret void\l}"];
}
