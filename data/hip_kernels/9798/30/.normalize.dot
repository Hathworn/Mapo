digraph "CFG for 'normalize' function" {
	label="CFG for 'normalize' function";

	Node0x4969950 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp ult i32 %13, %2\l  br i1 %14, label %15, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4969950:s0 -> Node0x496b870;
	Node0x4969950:s1 -> Node0x496b900;
	Node0x496b870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%15:\l15:                                               \l  %16 = sext i32 %3 to i64\l  %17 = getelementptr inbounds double, double addrspace(1)* %0, i64 %16\l  %18 = load double, double addrspace(1)* %17, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %19 = sext i32 %13 to i64\l  %20 = getelementptr inbounds double, double addrspace(1)* %0, i64 %19\l  %21 = load double, double addrspace(1)* %20, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %22 = fsub contract double %21, %18\l  %23 = fmul double %22, 0x3FF71547652B82FE\l  %24 = tail call double @llvm.rint.f64(double %23)\l  %25 = fneg double %24\l  %26 = tail call double @llvm.fma.f64(double %25, double 0x3FE62E42FEFA39EF,\l... double %22)\l  %27 = tail call double @llvm.fma.f64(double %25, double 0x3C7ABC9E3B39803F,\l... double %26)\l  %28 = tail call double @llvm.fma.f64(double %27, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %29 = tail call double @llvm.fma.f64(double %27, double %28, double\l... 0x3EC71DEE623FDE64)\l  %30 = tail call double @llvm.fma.f64(double %27, double %29, double\l... 0x3EFA01997C89E6B0)\l  %31 = tail call double @llvm.fma.f64(double %27, double %30, double\l... 0x3F2A01A014761F6E)\l  %32 = tail call double @llvm.fma.f64(double %27, double %31, double\l... 0x3F56C16C1852B7B0)\l  %33 = tail call double @llvm.fma.f64(double %27, double %32, double\l... 0x3F81111111122322)\l  %34 = tail call double @llvm.fma.f64(double %27, double %33, double\l... 0x3FA55555555502A1)\l  %35 = tail call double @llvm.fma.f64(double %27, double %34, double\l... 0x3FC5555555555511)\l  %36 = tail call double @llvm.fma.f64(double %27, double %35, double\l... 0x3FE000000000000B)\l  %37 = tail call double @llvm.fma.f64(double %27, double %36, double\l... 1.000000e+00)\l  %38 = tail call double @llvm.fma.f64(double %27, double %37, double\l... 1.000000e+00)\l  %39 = fptosi double %24 to i32\l  %40 = tail call double @llvm.amdgcn.ldexp.f64(double %38, i32 %39)\l  %41 = fcmp ogt double %22, 1.024000e+03\l  %42 = select i1 %41, double 0x7FF0000000000000, double %40\l  %43 = fcmp olt double %22, -1.075000e+03\l  %44 = select i1 %43, double 0.000000e+00, double %42\l  %45 = getelementptr inbounds double, double addrspace(1)* %1, i64 %19\l  store double %44, double addrspace(1)* %45, align 8, !tbaa !7\l  br label %46\l}"];
	Node0x496b870 -> Node0x496b900;
	Node0x496b900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  ret void\l}"];
}
