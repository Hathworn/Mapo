digraph "CFG for '_Z20compute_squared_normPfiiiS_' function" {
	label="CFG for '_Z20compute_squared_normPfiiiS_' function";

	Node0x5c1b1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp ult i32 %14, %1\l  br i1 %15, label %16, label %116\l|{<s0>T|<s1>F}}"];
	Node0x5c1b1b0:s0 -> Node0x5c1d070;
	Node0x5c1b1b0:s1 -> Node0x5c1d100;
	Node0x5c1d070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %3, 0\l  br i1 %17, label %18, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5c1d070:s0 -> Node0x5c1d350;
	Node0x5c1d070:s1 -> Node0x5c1d3a0;
	Node0x5c1d350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = and i32 %3, 7\l  %20 = icmp ult i32 %3, 8\l  br i1 %20, label %23, label %21\l|{<s0>T|<s1>F}}"];
	Node0x5c1d350:s0 -> Node0x5c1d660;
	Node0x5c1d350:s1 -> Node0x5c1d6b0;
	Node0x5c1d6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %3, -8\l  br label %46\l}"];
	Node0x5c1d6b0 -> Node0x5c1d8b0;
	Node0x5c1d660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = phi float [ undef, %18 ], [ %112, %46 ]\l  %25 = phi float [ 0.000000e+00, %18 ], [ %112, %46 ]\l  %26 = phi i32 [ 0, %18 ], [ %113, %46 ]\l  %27 = icmp eq i32 %19, 0\l  br i1 %27, label %42, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5c1d660:s0 -> Node0x5c1d3a0;
	Node0x5c1d660:s1 -> Node0x5c1eb20;
	Node0x5c1eb20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi float [ %38, %28 ], [ %25, %23 ]\l  %30 = phi i32 [ %39, %28 ], [ %26, %23 ]\l  %31 = phi i32 [ %40, %28 ], [ 0, %23 ]\l  %32 = mul nsw i32 %30, %2\l  %33 = add i32 %32, %14\l  %34 = zext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = fmul contract float %36, %36\l  %38 = fadd contract float %29, %37\l  %39 = add nuw nsw i32 %30, 1\l  %40 = add i32 %31, 1\l  %41 = icmp eq i32 %40, %19\l  br i1 %41, label %42, label %28, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5c1eb20:s0 -> Node0x5c1d3a0;
	Node0x5c1eb20:s1 -> Node0x5c1eb20;
	Node0x5c1d3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%42:\l42:                                               \l  %43 = phi float [ 0.000000e+00, %16 ], [ %24, %23 ], [ %38, %28 ]\l  %44 = zext i32 %14 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %4, i64 %44\l  store float %43, float addrspace(1)* %45, align 4, !tbaa !7\l  br label %116\l}"];
	Node0x5c1d3a0 -> Node0x5c1d100;
	Node0x5c1d8b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %21 ], [ %112, %46 ]\l  %48 = phi i32 [ 0, %21 ], [ %113, %46 ]\l  %49 = phi i32 [ 0, %21 ], [ %114, %46 ]\l  %50 = mul nsw i32 %48, %2\l  %51 = add i32 %50, %14\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fmul contract float %54, %54\l  %56 = fadd contract float %47, %55\l  %57 = or i32 %48, 1\l  %58 = mul nsw i32 %57, %2\l  %59 = add i32 %58, %14\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %63 = fmul contract float %62, %62\l  %64 = fadd contract float %56, %63\l  %65 = or i32 %48, 2\l  %66 = mul nsw i32 %65, %2\l  %67 = add i32 %66, %14\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %71 = fmul contract float %70, %70\l  %72 = fadd contract float %64, %71\l  %73 = or i32 %48, 3\l  %74 = mul nsw i32 %73, %2\l  %75 = add i32 %74, %14\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fmul contract float %78, %78\l  %80 = fadd contract float %72, %79\l  %81 = or i32 %48, 4\l  %82 = mul nsw i32 %81, %2\l  %83 = add i32 %82, %14\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = fmul contract float %86, %86\l  %88 = fadd contract float %80, %87\l  %89 = or i32 %48, 5\l  %90 = mul nsw i32 %89, %2\l  %91 = add i32 %90, %14\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = fmul contract float %94, %94\l  %96 = fadd contract float %88, %95\l  %97 = or i32 %48, 6\l  %98 = mul nsw i32 %97, %2\l  %99 = add i32 %98, %14\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = fmul contract float %102, %102\l  %104 = fadd contract float %96, %103\l  %105 = or i32 %48, 7\l  %106 = mul nsw i32 %105, %2\l  %107 = add i32 %106, %14\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %110, %110\l  %112 = fadd contract float %104, %111\l  %113 = add nuw nsw i32 %48, 8\l  %114 = add i32 %49, 8\l  %115 = icmp eq i32 %114, %22\l  br i1 %115, label %23, label %46, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5c1d8b0:s0 -> Node0x5c1d660;
	Node0x5c1d8b0:s1 -> Node0x5c1d8b0;
	Node0x5c1d100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%116:\l116:                                              \l  ret void\l}"];
}
