digraph "CFG for '_Z29findCentroidsAtomicFreeReduceiPiiS_S_Pj' function" {
	label="CFG for '_Z29findCentroidsAtomicFreeReduceiPiiS_S_Pj' function";

	Node0x5badef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = icmp eq i32 %7, 0\l  br i1 %8, label %9, label %173\l|{<s0>T|<s1>F}}"];
	Node0x5badef0:s0 -> Node0x5bab920;
	Node0x5badef0:s1 -> Node0x5bae880;
	Node0x5bab920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%9:\l9:                                                \l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %12 = shl nuw nsw i32 %10, 5\l  %13 = add nsw i32 %12, %11\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !5\l  %18 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !14, !invariant.load\l... !15\l  %21 = zext i16 %20 to i32\l  %22 = udiv i32 %17, %21\l  %23 = mul i32 %22, %21\l  %24 = icmp ugt i32 %17, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = icmp eq i32 %26, 0\l  br i1 %27, label %72, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5bab920:s0 -> Node0x5bb08d0;
	Node0x5bab920:s1 -> Node0x5bb0960;
	Node0x5bb0960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 16\l  %30 = bitcast i8 addrspace(4)* %29 to i32 addrspace(4)*\l  %31 = load i32, i32 addrspace(4)* %30, align 8, !tbaa !16\l  %32 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %33 = bitcast i8 addrspace(4)* %32 to i16 addrspace(4)*\l  %34 = load i16, i16 addrspace(4)* %33, align 2, !range !14, !invariant.load\l... !15\l  %35 = zext i16 %34 to i32\l  %36 = udiv i32 %31, %35\l  %37 = mul i32 %36, %35\l  %38 = icmp ugt i32 %31, %37\l  %39 = zext i1 %38 to i32\l  %40 = add i32 %36, %39\l  %41 = add i32 %22, %25\l  %42 = add i32 %41, -1\l  %43 = and i32 %26, 7\l  %44 = icmp ult i32 %42, 7\l  br i1 %44, label %47, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5bb0960:s0 -> Node0x5bb21c0;
	Node0x5bb0960:s1 -> Node0x5bb2250;
	Node0x5bb2250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%45:\l45:                                               \l  %46 = and i32 %26, -8\l  br label %78\l}"];
	Node0x5bb2250 -> Node0x5bb2450;
	Node0x5bb21c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%47:\l47:                                               \l  %48 = phi i32 [ undef, %28 ], [ %166, %78 ]\l  %49 = phi i32 [ undef, %28 ], [ %169, %78 ]\l  %50 = phi i32 [ 0, %28 ], [ %166, %78 ]\l  %51 = phi i32 [ 0, %28 ], [ %170, %78 ]\l  %52 = phi i32 [ 0, %28 ], [ %169, %78 ]\l  %53 = icmp eq i32 %43, 0\l  br i1 %53, label %72, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5bb21c0:s0 -> Node0x5bb08d0;
	Node0x5bb21c0:s1 -> Node0x5bb2e40;
	Node0x5bb2e40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%54:\l54:                                               \l  %55 = phi i32 [ %65, %54 ], [ %50, %47 ]\l  %56 = phi i32 [ %69, %54 ], [ %51, %47 ]\l  %57 = phi i32 [ %68, %54 ], [ %52, %47 ]\l  %58 = phi i32 [ %70, %54 ], [ 0, %47 ]\l  %59 = mul i32 %56, %21\l  %60 = mul i32 %59, %40\l  %61 = add i32 %60, %13\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %62\l  %64 = load i32, i32 addrspace(1)* %63, align 4, !tbaa !17, !amdgpu.noclobber\l... !15\l  %65 = add nsw i32 %64, %55\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %62\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !17, !amdgpu.noclobber\l... !15\l  %68 = add i32 %67, %57\l  %69 = add nuw nsw i32 %56, 1\l  %70 = add i32 %58, 1\l  %71 = icmp eq i32 %70, %43\l  br i1 %71, label %72, label %54, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5bb2e40:s0 -> Node0x5bb08d0;
	Node0x5bb2e40:s1 -> Node0x5bb2e40;
	Node0x5bb08d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%72:\l72:                                               \l  %73 = phi i32 [ 0, %9 ], [ %49, %47 ], [ %68, %54 ]\l  %74 = phi i32 [ 0, %9 ], [ %48, %47 ], [ %65, %54 ]\l  %75 = sext i32 %13 to i64\l  %76 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %75\l  store i32 %74, i32 addrspace(1)* %76, align 4, !tbaa !17\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %75\l  store i32 %73, i32 addrspace(1)* %77, align 4, !tbaa !17\l  br label %173\l}"];
	Node0x5bb08d0 -> Node0x5bae880;
	Node0x5bb2450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %45 ], [ %166, %78 ]\l  %80 = phi i32 [ 0, %45 ], [ %170, %78 ]\l  %81 = phi i32 [ 0, %45 ], [ %169, %78 ]\l  %82 = phi i32 [ 0, %45 ], [ %171, %78 ]\l  %83 = mul i32 %80, %21\l  %84 = mul i32 %83, %40\l  %85 = add i32 %84, %13\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %86\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !17, !amdgpu.noclobber\l... !15\l  %89 = add nsw i32 %88, %79\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %86\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !17, !amdgpu.noclobber\l... !15\l  %92 = add i32 %91, %81\l  %93 = or i32 %80, 1\l  %94 = mul i32 %93, %21\l  %95 = mul i32 %94, %40\l  %96 = add i32 %95, %13\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %97\l  %99 = load i32, i32 addrspace(1)* %98, align 4, !tbaa !17, !amdgpu.noclobber\l... !15\l  %100 = add nsw i32 %99, %89\l  %101 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %97\l  %102 = load i32, i32 addrspace(1)* %101, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %103 = add i32 %102, %92\l  %104 = or i32 %80, 2\l  %105 = mul i32 %104, %21\l  %106 = mul i32 %105, %40\l  %107 = add i32 %106, %13\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %108\l  %110 = load i32, i32 addrspace(1)* %109, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %111 = add nsw i32 %110, %100\l  %112 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %108\l  %113 = load i32, i32 addrspace(1)* %112, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %114 = add i32 %113, %103\l  %115 = or i32 %80, 3\l  %116 = mul i32 %115, %21\l  %117 = mul i32 %116, %40\l  %118 = add i32 %117, %13\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %119\l  %121 = load i32, i32 addrspace(1)* %120, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %122 = add nsw i32 %121, %111\l  %123 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %119\l  %124 = load i32, i32 addrspace(1)* %123, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %125 = add i32 %124, %114\l  %126 = or i32 %80, 4\l  %127 = mul i32 %126, %21\l  %128 = mul i32 %127, %40\l  %129 = add i32 %128, %13\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %130\l  %132 = load i32, i32 addrspace(1)* %131, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %133 = add nsw i32 %132, %122\l  %134 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %130\l  %135 = load i32, i32 addrspace(1)* %134, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %136 = add i32 %135, %125\l  %137 = or i32 %80, 5\l  %138 = mul i32 %137, %21\l  %139 = mul i32 %138, %40\l  %140 = add i32 %139, %13\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %141\l  %143 = load i32, i32 addrspace(1)* %142, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %144 = add nsw i32 %143, %133\l  %145 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %141\l  %146 = load i32, i32 addrspace(1)* %145, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %147 = add i32 %146, %136\l  %148 = or i32 %80, 6\l  %149 = mul i32 %148, %21\l  %150 = mul i32 %149, %40\l  %151 = add i32 %150, %13\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %152\l  %154 = load i32, i32 addrspace(1)* %153, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %155 = add nsw i32 %154, %144\l  %156 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %152\l  %157 = load i32, i32 addrspace(1)* %156, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %158 = add i32 %157, %147\l  %159 = or i32 %80, 7\l  %160 = mul i32 %159, %21\l  %161 = mul i32 %160, %40\l  %162 = add i32 %161, %13\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %163\l  %165 = load i32, i32 addrspace(1)* %164, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %166 = add nsw i32 %165, %155\l  %167 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %163\l  %168 = load i32, i32 addrspace(1)* %167, align 4, !tbaa !17,\l... !amdgpu.noclobber !15\l  %169 = add i32 %168, %158\l  %170 = add nuw nsw i32 %80, 8\l  %171 = add i32 %82, 8\l  %172 = icmp eq i32 %171, %46\l  br i1 %172, label %47, label %78, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5bb2450:s0 -> Node0x5bb21c0;
	Node0x5bb2450:s1 -> Node0x5bb2450;
	Node0x5bae880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%173:\l173:                                              \l  ret void\l}"];
}
