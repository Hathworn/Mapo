digraph "CFG for '_Z24findDiffLabelsAtomicFreePfiiiPiS0_' function" {
	label="CFG for '_Z24findDiffLabelsAtomicFreePfiiiPiS0_' function";

	Node0x5c5f450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %2\l  br i1 %16, label %17, label %123\l|{<s0>T|<s1>F}}"];
	Node0x5c5f450:s0 -> Node0x5c5fd70;
	Node0x5c5f450:s1 -> Node0x5c61460;
	Node0x5c5fd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%17:\l17:                                               \l  %18 = icmp sgt i32 %3, 0\l  br i1 %18, label %19, label %47\l|{<s0>T|<s1>F}}"];
	Node0x5c5fd70:s0 -> Node0x5c61630;
	Node0x5c5fd70:s1 -> Node0x5c61680;
	Node0x5c61630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%19:\l19:                                               \l  %20 = and i32 %3, 7\l  %21 = icmp ult i32 %3, 8\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x5c61630:s0 -> Node0x5c61940;
	Node0x5c61630:s1 -> Node0x5c61990;
	Node0x5c61990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i32 %3, -8\l  br label %51\l}"];
	Node0x5c61990 -> Node0x5c61b90;
	Node0x5c61940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi i32 [ undef, %19 ], [ %117, %51 ]\l  %26 = phi i32 [ %15, %19 ], [ %119, %51 ]\l  %27 = phi float [ 1.000000e+07, %19 ], [ %118, %51 ]\l  %28 = phi i32 [ 0, %19 ], [ %120, %51 ]\l  %29 = phi i32 [ -1, %19 ], [ %117, %51 ]\l  %30 = icmp eq i32 %20, 0\l  br i1 %30, label %47, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5c61940:s0 -> Node0x5c61680;
	Node0x5c61940:s1 -> Node0x5c63070;
	Node0x5c63070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ %43, %31 ], [ %26, %24 ]\l  %33 = phi float [ %42, %31 ], [ %27, %24 ]\l  %34 = phi i32 [ %44, %31 ], [ %28, %24 ]\l  %35 = phi i32 [ %41, %31 ], [ %29, %24 ]\l  %36 = phi i32 [ %45, %31 ], [ 0, %24 ]\l  %37 = sext i32 %32 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fcmp contract olt float %39, %33\l  %41 = select i1 %40, i32 %34, i32 %35\l  %42 = select i1 %40, float %39, float %33\l  %43 = add nsw i32 %32, %1\l  %44 = add nuw nsw i32 %34, 1\l  %45 = add i32 %36, 1\l  %46 = icmp eq i32 %45, %20\l  br i1 %46, label %47, label %31, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5c63070:s0 -> Node0x5c61680;
	Node0x5c63070:s1 -> Node0x5c63070;
	Node0x5c61680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = phi i32 [ -1, %17 ], [ %25, %24 ], [ %41, %31 ]\l  %49 = sext i32 %15 to i64\l  %50 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %49\l  store i32 %48, i32 addrspace(1)* %50, align 4, !tbaa !13\l  br label %123\l}"];
	Node0x5c61680 -> Node0x5c61460;
	Node0x5c61b90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi i32 [ %15, %22 ], [ %119, %51 ]\l  %53 = phi float [ 1.000000e+07, %22 ], [ %118, %51 ]\l  %54 = phi i32 [ 0, %22 ], [ %120, %51 ]\l  %55 = phi i32 [ -1, %22 ], [ %117, %51 ]\l  %56 = phi i32 [ 0, %22 ], [ %121, %51 ]\l  %57 = sext i32 %52 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fcmp contract olt float %59, %53\l  %61 = select i1 %60, i32 %54, i32 %55\l  %62 = select i1 %60, float %59, float %53\l  %63 = add nsw i32 %52, %1\l  %64 = or i32 %54, 1\l  %65 = sext i32 %63 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = fcmp contract olt float %67, %62\l  %69 = select i1 %68, i32 %64, i32 %61\l  %70 = select i1 %68, float %67, float %62\l  %71 = add nsw i32 %63, %1\l  %72 = or i32 %54, 2\l  %73 = sext i32 %71 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = fcmp contract olt float %75, %70\l  %77 = select i1 %76, i32 %72, i32 %69\l  %78 = select i1 %76, float %75, float %70\l  %79 = add nsw i32 %71, %1\l  %80 = or i32 %54, 3\l  %81 = sext i32 %79 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %84 = fcmp contract olt float %83, %78\l  %85 = select i1 %84, i32 %80, i32 %77\l  %86 = select i1 %84, float %83, float %78\l  %87 = add nsw i32 %79, %1\l  %88 = or i32 %54, 4\l  %89 = sext i32 %87 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = fcmp contract olt float %91, %86\l  %93 = select i1 %92, i32 %88, i32 %85\l  %94 = select i1 %92, float %91, float %86\l  %95 = add nsw i32 %87, %1\l  %96 = or i32 %54, 5\l  %97 = sext i32 %95 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fcmp contract olt float %99, %94\l  %101 = select i1 %100, i32 %96, i32 %93\l  %102 = select i1 %100, float %99, float %94\l  %103 = add nsw i32 %95, %1\l  %104 = or i32 %54, 6\l  %105 = sext i32 %103 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = fcmp contract olt float %107, %102\l  %109 = select i1 %108, i32 %104, i32 %101\l  %110 = select i1 %108, float %107, float %102\l  %111 = add nsw i32 %103, %1\l  %112 = or i32 %54, 7\l  %113 = sext i32 %111 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fcmp contract olt float %115, %110\l  %117 = select i1 %116, i32 %112, i32 %109\l  %118 = select i1 %116, float %115, float %110\l  %119 = add nsw i32 %111, %1\l  %120 = add nuw nsw i32 %54, 8\l  %121 = add i32 %56, 8\l  %122 = icmp eq i32 %121, %23\l  br i1 %122, label %24, label %51, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5c61b90:s0 -> Node0x5c61940;
	Node0x5c61b90:s1 -> Node0x5c61b90;
	Node0x5c61460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%123:\l123:                                              \l  ret void\l}"];
}
