digraph "CFG for '_Z10matrixNormPfS_i' function" {
	label="CFG for '_Z10matrixNormPfS_i' function";

	Node0x58b8400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %424\l|{<s0>T|<s1>F}}"];
	Node0x58b8400:s0 -> Node0x58ba300;
	Node0x58b8400:s1 -> Node0x58ba390;
	Node0x58ba300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%14:\l14:                                               \l  %15 = icmp sgt i32 %2, 0\l  br i1 %15, label %16, label %102\l|{<s0>T|<s1>F}}"];
	Node0x58ba300:s0 -> Node0x58ba560;
	Node0x58ba300:s1 -> Node0x58ba5b0;
	Node0x58ba560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%16:\l16:                                               \l  %17 = add i32 %2, -1\l  %18 = and i32 %2, 7\l  %19 = icmp ult i32 %17, 7\l  br i1 %19, label %84, label %20\l|{<s0>T|<s1>F}}"];
	Node0x58ba560:s0 -> Node0x58ba9b0;
	Node0x58ba560:s1 -> Node0x58baa00;
	Node0x58baa00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%20:\l20:                                               \l  %21 = and i32 %2, -8\l  br label %22\l}"];
	Node0x58baa00 -> Node0x58babd0;
	Node0x58babd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%22:\l22:                                               \l  %23 = phi i32 [ 0, %20 ], [ %81, %22 ]\l  %24 = phi float [ 0.000000e+00, %20 ], [ %80, %22 ]\l  %25 = phi i32 [ 0, %20 ], [ %82, %22 ]\l  %26 = mul nsw i32 %23, %2\l  %27 = add nsw i32 %26, %12\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %31 = fadd contract float %24, %30\l  %32 = or i32 %23, 1\l  %33 = mul nsw i32 %32, %2\l  %34 = add nsw i32 %33, %12\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %38 = fadd contract float %31, %37\l  %39 = or i32 %23, 2\l  %40 = mul nsw i32 %39, %2\l  %41 = add nsw i32 %40, %12\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %45 = fadd contract float %38, %44\l  %46 = or i32 %23, 3\l  %47 = mul nsw i32 %46, %2\l  %48 = add nsw i32 %47, %12\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fadd contract float %45, %51\l  %53 = or i32 %23, 4\l  %54 = mul nsw i32 %53, %2\l  %55 = add nsw i32 %54, %12\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = fadd contract float %52, %58\l  %60 = or i32 %23, 5\l  %61 = mul nsw i32 %60, %2\l  %62 = add nsw i32 %61, %12\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = fadd contract float %59, %65\l  %67 = or i32 %23, 6\l  %68 = mul nsw i32 %67, %2\l  %69 = add nsw i32 %68, %12\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = fadd contract float %66, %72\l  %74 = or i32 %23, 7\l  %75 = mul nsw i32 %74, %2\l  %76 = add nsw i32 %75, %12\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fadd contract float %73, %79\l  %81 = add nuw nsw i32 %23, 8\l  %82 = add i32 %25, 8\l  %83 = icmp eq i32 %82, %21\l  br i1 %83, label %84, label %22, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x58babd0:s0 -> Node0x58ba9b0;
	Node0x58babd0:s1 -> Node0x58babd0;
	Node0x58ba9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%84:\l84:                                               \l  %85 = phi float [ undef, %16 ], [ %80, %22 ]\l  %86 = phi i32 [ 0, %16 ], [ %81, %22 ]\l  %87 = phi float [ 0.000000e+00, %16 ], [ %80, %22 ]\l  %88 = icmp eq i32 %18, 0\l  br i1 %88, label %102, label %89\l|{<s0>T|<s1>F}}"];
	Node0x58ba9b0:s0 -> Node0x58ba5b0;
	Node0x58ba9b0:s1 -> Node0x58bf510;
	Node0x58bf510 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%89:\l89:                                               \l  %90 = phi i32 [ %99, %89 ], [ %86, %84 ]\l  %91 = phi float [ %98, %89 ], [ %87, %84 ]\l  %92 = phi i32 [ %100, %89 ], [ 0, %84 ]\l  %93 = mul nsw i32 %90, %2\l  %94 = add nsw i32 %93, %12\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = fadd contract float %91, %97\l  %99 = add nuw nsw i32 %90, 1\l  %100 = add i32 %92, 1\l  %101 = icmp eq i32 %100, %18\l  br i1 %101, label %102, label %89, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x58bf510:s0 -> Node0x58ba5b0;
	Node0x58bf510:s1 -> Node0x58bf510;
	Node0x58ba5b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%102:\l102:                                              \l  %103 = phi float [ 0.000000e+00, %14 ], [ %85, %84 ], [ %98, %89 ]\l  %104 = sitofp i32 %2 to float\l  %105 = fdiv contract float %103, %104\l  br i1 %15, label %106, label %270\l|{<s0>T|<s1>F}}"];
	Node0x58ba5b0:s0 -> Node0x58c00f0;
	Node0x58ba5b0:s1 -> Node0x58c0140;
	Node0x58c00f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ %268, %106 ], [ 0, %102 ]\l  %108 = phi float [ %267, %106 ], [ 0.000000e+00, %102 ]\l  %109 = mul nsw i32 %107, %2\l  %110 = add nsw i32 %109, %12\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %114 = fsub contract float %113, %105\l  %115 = tail call float @llvm.fabs.f32(float %114)\l  %116 = tail call float @llvm.amdgcn.frexp.mant.f32(float %115)\l  %117 = fcmp olt float %116, 0x3FE5555560000000\l  %118 = zext i1 %117 to i32\l  %119 = tail call float @llvm.amdgcn.ldexp.f32(float %116, i32 %118)\l  %120 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %115)\l  %121 = sub nsw i32 %120, %118\l  %122 = fadd float %119, -1.000000e+00\l  %123 = fadd float %119, 1.000000e+00\l  %124 = fadd float %123, -1.000000e+00\l  %125 = fsub float %119, %124\l  %126 = tail call float @llvm.amdgcn.rcp.f32(float %123)\l  %127 = fmul float %122, %126\l  %128 = fmul float %123, %127\l  %129 = fneg float %128\l  %130 = tail call float @llvm.fma.f32(float %127, float %123, float %129)\l  %131 = tail call float @llvm.fma.f32(float %127, float %125, float %130)\l  %132 = fadd float %128, %131\l  %133 = fsub float %132, %128\l  %134 = fsub float %131, %133\l  %135 = fsub float %122, %132\l  %136 = fsub float %122, %135\l  %137 = fsub float %136, %132\l  %138 = fsub float %137, %134\l  %139 = fadd float %135, %138\l  %140 = fmul float %126, %139\l  %141 = fadd float %127, %140\l  %142 = fsub float %141, %127\l  %143 = fsub float %140, %142\l  %144 = fmul float %141, %141\l  %145 = fneg float %144\l  %146 = tail call float @llvm.fma.f32(float %141, float %141, float %145)\l  %147 = fmul float %143, 2.000000e+00\l  %148 = tail call float @llvm.fma.f32(float %141, float %147, float %146)\l  %149 = fadd float %144, %148\l  %150 = fsub float %149, %144\l  %151 = fsub float %148, %150\l  %152 = tail call float @llvm.fmuladd.f32(float %149, float\l... 0x3FCED89C20000000, float 0x3FD23E9880000000)\l  %153 = tail call float @llvm.fmuladd.f32(float %149, float %152, float\l... 0x3FD999BDE0000000)\l  %154 = sitofp i32 %121 to float\l  %155 = fmul float %154, 0x3FE62E4300000000\l  %156 = fneg float %155\l  %157 = tail call float @llvm.fma.f32(float %154, float 0x3FE62E4300000000,\l... float %156)\l  %158 = tail call float @llvm.fma.f32(float %154, float 0xBE205C6100000000,\l... float %157)\l  %159 = fadd float %155, %158\l  %160 = fsub float %159, %155\l  %161 = fsub float %158, %160\l  %162 = tail call float @llvm.amdgcn.ldexp.f32(float %141, i32 1)\l  %163 = fmul float %141, %149\l  %164 = fneg float %163\l  %165 = tail call float @llvm.fma.f32(float %149, float %141, float %164)\l  %166 = tail call float @llvm.fma.f32(float %149, float %143, float %165)\l  %167 = tail call float @llvm.fma.f32(float %151, float %141, float %166)\l  %168 = fadd float %163, %167\l  %169 = fsub float %168, %163\l  %170 = fsub float %167, %169\l  %171 = fmul float %149, %153\l  %172 = fneg float %171\l  %173 = tail call float @llvm.fma.f32(float %149, float %153, float %172)\l  %174 = tail call float @llvm.fma.f32(float %151, float %153, float %173)\l  %175 = fadd float %171, %174\l  %176 = fsub float %175, %171\l  %177 = fsub float %174, %176\l  %178 = fadd float %175, 0x3FE5555540000000\l  %179 = fadd float %178, 0xBFE5555540000000\l  %180 = fsub float %175, %179\l  %181 = fadd float %177, 0x3E2E720200000000\l  %182 = fadd float %181, %180\l  %183 = fadd float %178, %182\l  %184 = fsub float %183, %178\l  %185 = fsub float %182, %184\l  %186 = fmul float %168, %183\l  %187 = fneg float %186\l  %188 = tail call float @llvm.fma.f32(float %168, float %183, float %187)\l  %189 = tail call float @llvm.fma.f32(float %168, float %185, float %188)\l  %190 = tail call float @llvm.fma.f32(float %170, float %183, float %189)\l  %191 = tail call float @llvm.amdgcn.ldexp.f32(float %143, i32 1)\l  %192 = fadd float %186, %190\l  %193 = fsub float %192, %186\l  %194 = fsub float %190, %193\l  %195 = fadd float %162, %192\l  %196 = fsub float %195, %162\l  %197 = fsub float %192, %196\l  %198 = fadd float %191, %194\l  %199 = fadd float %198, %197\l  %200 = fadd float %195, %199\l  %201 = fsub float %200, %195\l  %202 = fsub float %199, %201\l  %203 = fadd float %159, %200\l  %204 = fsub float %203, %159\l  %205 = fsub float %203, %204\l  %206 = fsub float %159, %205\l  %207 = fsub float %200, %204\l  %208 = fadd float %207, %206\l  %209 = fadd float %161, %202\l  %210 = fsub float %209, %161\l  %211 = fsub float %209, %210\l  %212 = fsub float %161, %211\l  %213 = fsub float %202, %210\l  %214 = fadd float %213, %212\l  %215 = fadd float %209, %208\l  %216 = fadd float %203, %215\l  %217 = fsub float %216, %203\l  %218 = fsub float %215, %217\l  %219 = fadd float %214, %218\l  %220 = fadd float %216, %219\l  %221 = fsub float %220, %216\l  %222 = fsub float %219, %221\l  %223 = fmul float %220, 2.000000e+00\l  %224 = fneg float %223\l  %225 = tail call float @llvm.fma.f32(float %220, float 2.000000e+00, float\l... %224)\l  %226 = tail call float @llvm.fma.f32(float %222, float 2.000000e+00, float\l... %225)\l  %227 = fadd float %223, %226\l  %228 = fsub float %227, %223\l  %229 = fsub float %226, %228\l  %230 = tail call float @llvm.fabs.f32(float %223) #3\l  %231 = fcmp oeq float %230, 0x7FF0000000000000\l  %232 = select i1 %231, float %223, float %227\l  %233 = tail call float @llvm.fabs.f32(float %232) #3\l  %234 = fcmp oeq float %233, 0x7FF0000000000000\l  %235 = select i1 %234, float 0.000000e+00, float %229\l  %236 = fcmp oeq float %232, 0x40562E4300000000\l  %237 = select i1 %236, float 0x3EE0000000000000, float 0.000000e+00\l  %238 = fsub float %232, %237\l  %239 = fadd float %237, %235\l  %240 = fmul float %238, 0x3FF7154760000000\l  %241 = tail call float @llvm.rint.f32(float %240)\l  %242 = fcmp ogt float %238, 0x40562E4300000000\l  %243 = fcmp olt float %238, 0xC059D1DA00000000\l  %244 = fneg float %240\l  %245 = tail call float @llvm.fma.f32(float %238, float 0x3FF7154760000000,\l... float %244)\l  %246 = tail call float @llvm.fma.f32(float %238, float 0x3E54AE0BE0000000,\l... float %245)\l  %247 = fsub float %240, %241\l  %248 = fadd float %246, %247\l  %249 = tail call float @llvm.exp2.f32(float %248)\l  %250 = fptosi float %241 to i32\l  %251 = tail call float @llvm.amdgcn.ldexp.f32(float %249, i32 %250)\l  %252 = select i1 %243, float 0.000000e+00, float %251\l  %253 = select i1 %242, float 0x7FF0000000000000, float %252\l  %254 = tail call float @llvm.fma.f32(float %253, float %239, float %253)\l  %255 = tail call float @llvm.fabs.f32(float %253) #3\l  %256 = fcmp oeq float %255, 0x7FF0000000000000\l  %257 = select i1 %256, float %253, float %254\l  %258 = tail call float @llvm.fabs.f32(float %257)\l  %259 = fcmp oeq float %115, 0x7FF0000000000000\l  %260 = fcmp oeq float %114, 0.000000e+00\l  %261 = select i1 %259, float 0x7FF0000000000000, float %258\l  %262 = select i1 %260, float 0.000000e+00, float %261\l  %263 = fcmp uno float %114, 0.000000e+00\l  %264 = select i1 %263, float 0x7FF8000000000000, float %262\l  %265 = fcmp oeq float %114, 1.000000e+00\l  %266 = select i1 %265, float 1.000000e+00, float %264\l  %267 = fadd contract float %108, %266\l  %268 = add nuw nsw i32 %107, 1\l  %269 = icmp eq i32 %268, %2\l  br i1 %269, label %270, label %106, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x58c00f0:s0 -> Node0x58c0140;
	Node0x58c00f0:s1 -> Node0x58c00f0;
	Node0x58c0140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%270:\l270:                                              \l  %271 = phi float [ 0.000000e+00, %102 ], [ %267, %106 ]\l  %272 = fdiv contract float %271, %104\l  %273 = fcmp olt float %272, 0x39F0000000000000\l  %274 = select i1 %273, float 0x41F0000000000000, float 1.000000e+00\l  %275 = fmul float %272, %274\l  %276 = tail call float @llvm.sqrt.f32(float %275)\l  %277 = bitcast float %276 to i32\l  %278 = add nsw i32 %277, -1\l  %279 = bitcast i32 %278 to float\l  %280 = add nsw i32 %277, 1\l  %281 = bitcast i32 %280 to float\l  %282 = tail call i1 @llvm.amdgcn.class.f32(float %275, i32 608)\l  %283 = select i1 %273, float 0x3EF0000000000000, float 1.000000e+00\l  %284 = fneg float %281\l  %285 = tail call float @llvm.fma.f32(float %284, float %276, float %275)\l  %286 = fcmp ogt float %285, 0.000000e+00\l  %287 = fneg float %279\l  %288 = tail call float @llvm.fma.f32(float %287, float %276, float %275)\l  %289 = fcmp ole float %288, 0.000000e+00\l  %290 = select i1 %289, float %279, float %276\l  %291 = select i1 %286, float %281, float %290\l  %292 = fmul float %283, %291\l  %293 = select i1 %282, float %275, float %292\l  br i1 %15, label %294, label %424\l|{<s0>T|<s1>F}}"];
	Node0x58c0140:s0 -> Node0x58ca160;
	Node0x58c0140:s1 -> Node0x58ba390;
	Node0x58ca160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%294:\l294:                                              \l  %295 = fcmp contract oeq float %293, 0.000000e+00\l  br i1 %295, label %296, label %302\l|{<s0>T|<s1>F}}"];
	Node0x58ca160:s0 -> Node0x58ca330;
	Node0x58ca160:s1 -> Node0x58ca380;
	Node0x58ca330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%296:\l296:                                              \l  %297 = add i32 %2, -1\l  %298 = and i32 %2, 7\l  %299 = icmp ult i32 %297, 7\l  br i1 %299, label %411, label %300\l|{<s0>T|<s1>F}}"];
	Node0x58ca330:s0 -> Node0x58ca670;
	Node0x58ca330:s1 -> Node0x58ca6c0;
	Node0x58ca6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%300:\l300:                                              \l  %301 = and i32 %2, -8\l  br label %308\l}"];
	Node0x58ca6c0 -> Node0x58ca890;
	Node0x58ca380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%302:\l302:                                              \l  %303 = add i32 %2, -1\l  %304 = and i32 %2, 3\l  %305 = icmp ult i32 %303, 3\l  br i1 %305, label %394, label %306\l|{<s0>T|<s1>F}}"];
	Node0x58ca380:s0 -> Node0x58cab00;
	Node0x58ca380:s1 -> Node0x58cab50;
	Node0x58cab50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%306:\l306:                                              \l  %307 = and i32 %2, -4\l  br label %353\l}"];
	Node0x58cab50 -> Node0x58cad20;
	Node0x58ca890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%308:\l308:                                              \l  %309 = phi i32 [ 0, %300 ], [ %350, %308 ]\l  %310 = phi i32 [ 0, %300 ], [ %351, %308 ]\l  %311 = mul nsw i32 %309, %2\l  %312 = add nsw i32 %311, %12\l  %313 = sext i32 %312 to i64\l  %314 = getelementptr inbounds float, float addrspace(1)* %1, i64 %313\l  store float 0.000000e+00, float addrspace(1)* %314, align 4, !tbaa !7\l  %315 = or i32 %309, 1\l  %316 = mul nsw i32 %315, %2\l  %317 = add nsw i32 %316, %12\l  %318 = sext i32 %317 to i64\l  %319 = getelementptr inbounds float, float addrspace(1)* %1, i64 %318\l  store float 0.000000e+00, float addrspace(1)* %319, align 4, !tbaa !7\l  %320 = or i32 %309, 2\l  %321 = mul nsw i32 %320, %2\l  %322 = add nsw i32 %321, %12\l  %323 = sext i32 %322 to i64\l  %324 = getelementptr inbounds float, float addrspace(1)* %1, i64 %323\l  store float 0.000000e+00, float addrspace(1)* %324, align 4, !tbaa !7\l  %325 = or i32 %309, 3\l  %326 = mul nsw i32 %325, %2\l  %327 = add nsw i32 %326, %12\l  %328 = sext i32 %327 to i64\l  %329 = getelementptr inbounds float, float addrspace(1)* %1, i64 %328\l  store float 0.000000e+00, float addrspace(1)* %329, align 4, !tbaa !7\l  %330 = or i32 %309, 4\l  %331 = mul nsw i32 %330, %2\l  %332 = add nsw i32 %331, %12\l  %333 = sext i32 %332 to i64\l  %334 = getelementptr inbounds float, float addrspace(1)* %1, i64 %333\l  store float 0.000000e+00, float addrspace(1)* %334, align 4, !tbaa !7\l  %335 = or i32 %309, 5\l  %336 = mul nsw i32 %335, %2\l  %337 = add nsw i32 %336, %12\l  %338 = sext i32 %337 to i64\l  %339 = getelementptr inbounds float, float addrspace(1)* %1, i64 %338\l  store float 0.000000e+00, float addrspace(1)* %339, align 4, !tbaa !7\l  %340 = or i32 %309, 6\l  %341 = mul nsw i32 %340, %2\l  %342 = add nsw i32 %341, %12\l  %343 = sext i32 %342 to i64\l  %344 = getelementptr inbounds float, float addrspace(1)* %1, i64 %343\l  store float 0.000000e+00, float addrspace(1)* %344, align 4, !tbaa !7\l  %345 = or i32 %309, 7\l  %346 = mul nsw i32 %345, %2\l  %347 = add nsw i32 %346, %12\l  %348 = sext i32 %347 to i64\l  %349 = getelementptr inbounds float, float addrspace(1)* %1, i64 %348\l  store float 0.000000e+00, float addrspace(1)* %349, align 4, !tbaa !7\l  %350 = add nuw nsw i32 %309, 8\l  %351 = add i32 %310, 8\l  %352 = icmp eq i32 %351, %301\l  br i1 %352, label %411, label %308, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x58ca890:s0 -> Node0x58ca670;
	Node0x58ca890:s1 -> Node0x58ca890;
	Node0x58cad20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%353:\l353:                                              \l  %354 = phi i32 [ 0, %306 ], [ %391, %353 ]\l  %355 = phi i32 [ 0, %306 ], [ %392, %353 ]\l  %356 = mul nsw i32 %354, %2\l  %357 = add nsw i32 %356, %12\l  %358 = sext i32 %357 to i64\l  %359 = getelementptr inbounds float, float addrspace(1)* %0, i64 %358\l  %360 = load float, float addrspace(1)* %359, align 4, !tbaa !7\l  %361 = fsub contract float %360, %105\l  %362 = fdiv contract float %361, %293\l  %363 = getelementptr inbounds float, float addrspace(1)* %1, i64 %358\l  store float %362, float addrspace(1)* %363, align 4, !tbaa !7\l  %364 = or i32 %354, 1\l  %365 = mul nsw i32 %364, %2\l  %366 = add nsw i32 %365, %12\l  %367 = sext i32 %366 to i64\l  %368 = getelementptr inbounds float, float addrspace(1)* %0, i64 %367\l  %369 = load float, float addrspace(1)* %368, align 4, !tbaa !7\l  %370 = fsub contract float %369, %105\l  %371 = fdiv contract float %370, %293\l  %372 = getelementptr inbounds float, float addrspace(1)* %1, i64 %367\l  store float %371, float addrspace(1)* %372, align 4, !tbaa !7\l  %373 = or i32 %354, 2\l  %374 = mul nsw i32 %373, %2\l  %375 = add nsw i32 %374, %12\l  %376 = sext i32 %375 to i64\l  %377 = getelementptr inbounds float, float addrspace(1)* %0, i64 %376\l  %378 = load float, float addrspace(1)* %377, align 4, !tbaa !7\l  %379 = fsub contract float %378, %105\l  %380 = fdiv contract float %379, %293\l  %381 = getelementptr inbounds float, float addrspace(1)* %1, i64 %376\l  store float %380, float addrspace(1)* %381, align 4, !tbaa !7\l  %382 = or i32 %354, 3\l  %383 = mul nsw i32 %382, %2\l  %384 = add nsw i32 %383, %12\l  %385 = sext i32 %384 to i64\l  %386 = getelementptr inbounds float, float addrspace(1)* %0, i64 %385\l  %387 = load float, float addrspace(1)* %386, align 4, !tbaa !7\l  %388 = fsub contract float %387, %105\l  %389 = fdiv contract float %388, %293\l  %390 = getelementptr inbounds float, float addrspace(1)* %1, i64 %385\l  store float %389, float addrspace(1)* %390, align 4, !tbaa !7\l  %391 = add nuw nsw i32 %354, 4\l  %392 = add i32 %355, 4\l  %393 = icmp eq i32 %392, %307\l  br i1 %393, label %394, label %353, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x58cad20:s0 -> Node0x58cab00;
	Node0x58cad20:s1 -> Node0x58cad20;
	Node0x58cab00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%394:\l394:                                              \l  %395 = phi i32 [ 0, %302 ], [ %391, %353 ]\l  %396 = icmp eq i32 %304, 0\l  br i1 %396, label %424, label %397\l|{<s0>T|<s1>F}}"];
	Node0x58cab00:s0 -> Node0x58ba390;
	Node0x58cab00:s1 -> Node0x58cede0;
	Node0x58cede0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%397:\l397:                                              \l  %398 = phi i32 [ %408, %397 ], [ %395, %394 ]\l  %399 = phi i32 [ %409, %397 ], [ 0, %394 ]\l  %400 = mul nsw i32 %398, %2\l  %401 = add nsw i32 %400, %12\l  %402 = sext i32 %401 to i64\l  %403 = getelementptr inbounds float, float addrspace(1)* %0, i64 %402\l  %404 = load float, float addrspace(1)* %403, align 4, !tbaa !7\l  %405 = fsub contract float %404, %105\l  %406 = fdiv contract float %405, %293\l  %407 = getelementptr inbounds float, float addrspace(1)* %1, i64 %402\l  store float %406, float addrspace(1)* %407, align 4, !tbaa !7\l  %408 = add nuw nsw i32 %398, 1\l  %409 = add i32 %399, 1\l  %410 = icmp eq i32 %409, %304\l  br i1 %410, label %424, label %397, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x58cede0:s0 -> Node0x58ba390;
	Node0x58cede0:s1 -> Node0x58cede0;
	Node0x58ca670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%411:\l411:                                              \l  %412 = phi i32 [ 0, %296 ], [ %350, %308 ]\l  %413 = icmp eq i32 %298, 0\l  br i1 %413, label %424, label %414\l|{<s0>T|<s1>F}}"];
	Node0x58ca670:s0 -> Node0x58ba390;
	Node0x58ca670:s1 -> Node0x58cf950;
	Node0x58cf950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%414:\l414:                                              \l  %415 = phi i32 [ %421, %414 ], [ %412, %411 ]\l  %416 = phi i32 [ %422, %414 ], [ 0, %411 ]\l  %417 = mul nsw i32 %415, %2\l  %418 = add nsw i32 %417, %12\l  %419 = sext i32 %418 to i64\l  %420 = getelementptr inbounds float, float addrspace(1)* %1, i64 %419\l  store float 0.000000e+00, float addrspace(1)* %420, align 4, !tbaa !7\l  %421 = add nuw nsw i32 %415, 1\l  %422 = add i32 %416, 1\l  %423 = icmp eq i32 %422, %298\l  br i1 %423, label %424, label %414, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x58cf950:s0 -> Node0x58ba390;
	Node0x58cf950:s1 -> Node0x58cf950;
	Node0x58ba390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%424:\l424:                                              \l  ret void\l}"];
}
