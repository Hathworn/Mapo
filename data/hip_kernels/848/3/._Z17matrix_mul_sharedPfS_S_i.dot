digraph "CFG for '_Z17matrix_mul_sharedPfS_S_i' function" {
	label="CFG for '_Z17matrix_mul_sharedPfS_S_i' function";

	Node0x4e49cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %6, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = add i32 %19, %12\l  %21 = add i32 %11, %13\l  %22 = sdiv i32 %3, %10\l  %23 = icmp sgt i32 %22, 0\l  %24 = mul nsw i32 %20, %3\l  br i1 %23, label %25, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4e49cb0:s0 -> Node0x4e4d760;
	Node0x4e49cb0:s1 -> Node0x4e4d7f0;
	Node0x4e4d760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%25:\l25:                                               \l  %26 = add i32 %24, %13\l  %27 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %13\l  %28 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %12, i32 %13\l  %29 = and i32 %10, 7\l  %30 = icmp ult i16 %9, 8\l  %31 = and i32 %10, 2040\l  %32 = icmp eq i32 %29, 0\l  br label %38\l}"];
	Node0x4e4d760 -> Node0x4e4da10;
	Node0x4e4d7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %4 ], [ %70, %69 ]\l  %35 = add nsw i32 %24, %21\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %2, i64 %36\l  store float %34, float addrspace(1)* %37, align 4, !tbaa !7\l  ret void\l}"];
	Node0x4e4da10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%38:\l38:                                               \l  %39 = phi i32 [ 0, %25 ], [ %71, %69 ]\l  %40 = phi float [ 0.000000e+00, %25 ], [ %70, %69 ]\l  %41 = mul nuw nsw i32 %39, %10\l  %42 = add i32 %26, %41\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  store float %45, float addrspace(3)* %27, align 4, !tbaa !7\l  %46 = add nuw nsw i32 %41, %12\l  %47 = mul nsw i32 %46, %3\l  %48 = add nsw i32 %47, %21\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  store float %51, float addrspace(3)* %28, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %30, label %52, label %73\l|{<s0>T|<s1>F}}"];
	Node0x4e4da10:s0 -> Node0x4e501c0;
	Node0x4e4da10:s1 -> Node0x4e50250;
	Node0x4e501c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%52:\l52:                                               \l  %53 = phi float [ undef, %38 ], [ %131, %73 ]\l  %54 = phi i32 [ 0, %38 ], [ %132, %73 ]\l  %55 = phi float [ %40, %38 ], [ %131, %73 ]\l  br i1 %32, label %69, label %56\l|{<s0>T|<s1>F}}"];
	Node0x4e501c0:s0 -> Node0x4e4eab0;
	Node0x4e501c0:s1 -> Node0x4e50610;
	Node0x4e50610 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%56:\l56:                                               \l  %57 = phi i32 [ %66, %56 ], [ %54, %52 ]\l  %58 = phi float [ %65, %56 ], [ %55, %52 ]\l  %59 = phi i32 [ %67, %56 ], [ 0, %52 ]\l  %60 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %57\l  %61 = load float, float addrspace(3)* %60, align 4, !tbaa !7\l  %62 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %57, i32 %13\l  %63 = load float, float addrspace(3)* %62, align 4, !tbaa !7\l  %64 = fmul contract float %61, %63\l  %65 = fadd contract float %58, %64\l  %66 = add nuw nsw i32 %57, 1\l  %67 = add i32 %59, 1\l  %68 = icmp eq i32 %67, %29\l  br i1 %68, label %69, label %56, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4e50610:s0 -> Node0x4e4eab0;
	Node0x4e50610:s1 -> Node0x4e50610;
	Node0x4e4eab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%69:\l69:                                               \l  %70 = phi float [ %53, %52 ], [ %65, %56 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %71 = add nuw nsw i32 %39, 1\l  %72 = icmp eq i32 %71, %22\l  br i1 %72, label %33, label %38, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4e4eab0:s0 -> Node0x4e4d7f0;
	Node0x4e4eab0:s1 -> Node0x4e4da10;
	Node0x4e50250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%73:\l73:                                               \l  %74 = phi i32 [ %132, %73 ], [ 0, %38 ]\l  %75 = phi float [ %131, %73 ], [ %40, %38 ]\l  %76 = phi i32 [ %133, %73 ], [ 0, %38 ]\l  %77 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %74\l  %78 = load float, float addrspace(3)* %77, align 16, !tbaa !7\l  %79 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %74, i32 %13\l  %80 = load float, float addrspace(3)* %79, align 4, !tbaa !7\l  %81 = fmul contract float %78, %80\l  %82 = fadd contract float %75, %81\l  %83 = or i32 %74, 1\l  %84 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %83\l  %85 = load float, float addrspace(3)* %84, align 4, !tbaa !7\l  %86 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %83, i32 %13\l  %87 = load float, float addrspace(3)* %86, align 4, !tbaa !7\l  %88 = fmul contract float %85, %87\l  %89 = fadd contract float %82, %88\l  %90 = or i32 %74, 2\l  %91 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %90\l  %92 = load float, float addrspace(3)* %91, align 8, !tbaa !7\l  %93 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %90, i32 %13\l  %94 = load float, float addrspace(3)* %93, align 4, !tbaa !7\l  %95 = fmul contract float %92, %94\l  %96 = fadd contract float %89, %95\l  %97 = or i32 %74, 3\l  %98 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %97\l  %99 = load float, float addrspace(3)* %98, align 4, !tbaa !7\l  %100 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %97, i32 %13\l  %101 = load float, float addrspace(3)* %100, align 4, !tbaa !7\l  %102 = fmul contract float %99, %101\l  %103 = fadd contract float %96, %102\l  %104 = or i32 %74, 4\l  %105 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %104\l  %106 = load float, float addrspace(3)* %105, align 16, !tbaa !7\l  %107 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %104, i32 %13\l  %108 = load float, float addrspace(3)* %107, align 4, !tbaa !7\l  %109 = fmul contract float %106, %108\l  %110 = fadd contract float %103, %109\l  %111 = or i32 %74, 5\l  %112 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %111\l  %113 = load float, float addrspace(3)* %112, align 4, !tbaa !7\l  %114 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %111, i32 %13\l  %115 = load float, float addrspace(3)* %114, align 4, !tbaa !7\l  %116 = fmul contract float %113, %115\l  %117 = fadd contract float %110, %116\l  %118 = or i32 %74, 6\l  %119 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %118\l  %120 = load float, float addrspace(3)* %119, align 8, !tbaa !7\l  %121 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %118, i32 %13\l  %122 = load float, float addrspace(3)* %121, align 4, !tbaa !7\l  %123 = fmul contract float %120, %122\l  %124 = fadd contract float %117, %123\l  %125 = or i32 %74, 7\l  %126 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3ads, i32 0, i32 %12, i32 %125\l  %127 = load float, float addrspace(3)* %126, align 4, !tbaa !7\l  %128 = getelementptr inbounds [16 x [16 x float]], [16 x [16 x float]]\l... addrspace(3)* @_ZZ17matrix_mul_sharedPfS_S_iE3bds, i32 0, i32 %125, i32 %13\l  %129 = load float, float addrspace(3)* %128, align 4, !tbaa !7\l  %130 = fmul contract float %127, %129\l  %131 = fadd contract float %124, %130\l  %132 = add nuw nsw i32 %74, 8\l  %133 = add i32 %76, 8\l  %134 = icmp eq i32 %133, %31\l  br i1 %134, label %52, label %73, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4e50250:s0 -> Node0x4e501c0;
	Node0x4e50250:s1 -> Node0x4e50250;
}
