digraph "CFG for '_Z10NV12ToARGBPjmS_mjj' function" {
	label="CFG for '_Z10NV12ToARGBPjmS_mjj' function";

	Node0x56a7c00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = lshr i64 %3, 2\l  %8 = trunc i64 %7 to i32\l  %9 = bitcast i32 addrspace(1)* %0 to i8 addrspace(1)*\l  %10 = trunc i64 %1 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = shl nuw nsw i16 %15, 1\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %11, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = shl nuw nsw i32 %19, 1\l  %21 = add i32 %18, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %22, %26\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %29 = add i32 %27, %28\l  %30 = icmp ult i32 %21, %4\l  %31 = icmp ult i32 %29, %5\l  %32 = select i1 %30, i1 %31, i1 false\l  br i1 %32, label %33, label %157\l|{<s0>T|<s1>F}}"];
	Node0x56a7c00:s0 -> Node0x56a9150;
	Node0x56a7c00:s1 -> Node0x56a91e0;
	Node0x56a9150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%33:\l33:                                               \l  %34 = mul i32 %29, %10\l  %35 = add i32 %34, %21\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds i8, i8 addrspace(1)* %9, i64 %36\l  %38 = load i8, i8 addrspace(1)* %37, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %39 = zext i8 %38 to i32\l  %40 = shl nuw nsw i32 %39, 2\l  %41 = add i32 %35, 1\l  %42 = zext i32 %41 to i64\l  %43 = getelementptr inbounds i8, i8 addrspace(1)* %9, i64 %42\l  %44 = load i8, i8 addrspace(1)* %43, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %45 = zext i8 %44 to i32\l  %46 = shl nuw nsw i32 %45, 2\l  %47 = mul i32 %10, %5\l  %48 = ashr i32 %29, 1\l  %49 = and i32 %29, 1\l  %50 = icmp eq i32 %49, 0\l  %51 = mul i32 %48, %10\l  %52 = add i32 %21, %47\l  %53 = add i32 %52, %51\l  %54 = zext i32 %53 to i64\l  %55 = getelementptr inbounds i8, i8 addrspace(1)* %9, i64 %54\l  %56 = load i8, i8 addrspace(1)* %55, align 1, !tbaa !7\l  %57 = zext i8 %56 to i32\l  %58 = add i32 %53, 1\l  %59 = zext i32 %58 to i64\l  %60 = getelementptr inbounds i8, i8 addrspace(1)* %9, i64 %59\l  %61 = load i8, i8 addrspace(1)* %60, align 1, !tbaa !7\l  %62 = zext i8 %61 to i32\l  br i1 %50, label %86, label %63\l|{<s0>T|<s1>F}}"];
	Node0x56a9150:s0 -> Node0x56acd70;
	Node0x56a9150:s1 -> Node0x56ace00;
	Node0x56ace00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%63:\l63:                                               \l  %64 = lshr i32 %5, 1\l  %65 = add nsw i32 %64, -1\l  %66 = icmp ult i32 %48, %65\l  br i1 %66, label %67, label %86\l|{<s0>T|<s1>F}}"];
	Node0x56ace00:s0 -> Node0x56ab480;
	Node0x56ace00:s1 -> Node0x56acd70;
	Node0x56ab480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%67:\l67:                                               \l  %68 = add nsw i32 %48, 1\l  %69 = mul i32 %68, %10\l  %70 = add i32 %52, %69\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds i8, i8 addrspace(1)* %9, i64 %71\l  %73 = load i8, i8 addrspace(1)* %72, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %74 = zext i8 %73 to i32\l  %75 = add nuw nsw i32 %57, 1\l  %76 = add nuw nsw i32 %75, %74\l  %77 = lshr i32 %76, 1\l  %78 = add i32 %70, 1\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds i8, i8 addrspace(1)* %9, i64 %79\l  %81 = load i8, i8 addrspace(1)* %80, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %82 = zext i8 %81 to i32\l  %83 = add nuw nsw i32 %62, 1\l  %84 = add nuw nsw i32 %83, %82\l  %85 = lshr i32 %84, 1\l  br label %86\l}"];
	Node0x56ab480 -> Node0x56acd70;
	Node0x56acd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%86:\l86:                                               \l  %87 = phi i32 [ %85, %67 ], [ %62, %63 ], [ %62, %33 ]\l  %88 = phi i32 [ %77, %67 ], [ %57, %63 ], [ %57, %33 ]\l  %89 = shl nuw nsw i32 %88, 12\l  %90 = shl nuw nsw i32 %87, 22\l  %91 = or i32 %90, %89\l  %92 = shl nuw nsw i32 %88, 2\l  %93 = and i32 %92, 1020\l  %94 = lshr i32 %91, 20\l  %95 = uitofp i32 %40 to float\l  %96 = uitofp i32 %93 to float\l  %97 = fadd contract float %96, -5.120000e+02\l  %98 = uitofp i32 %94 to float\l  %99 = fadd contract float %98, -5.120000e+02\l  %100 = fmul contract float %99, 0x3FF23D70A0000000\l  %101 = fadd contract float %100, %95\l  %102 = fmul contract float %97, 0x3FD947AE20000000\l  %103 = fsub contract float %95, %102\l  %104 = fmul contract float %99, 0x3FE2978D40000000\l  %105 = fsub contract float %103, %104\l  %106 = fmul contract float %97, 0x4000418940000000\l  %107 = fadd contract float %106, %95\l  %108 = uitofp i32 %46 to float\l  %109 = fadd contract float %100, %108\l  %110 = fsub contract float %108, %102\l  %111 = fsub contract float %110, %104\l  %112 = fadd contract float %106, %108\l  %113 = load i32, i32 addrspace(4)* @constAlpha, align 4, !tbaa !10\l  %114 = tail call float @llvm.maxnum.f32(float %101, float 0.000000e+00)\l  %115 = tail call float @llvm.minnum.f32(float %114, float 1.023000e+03)\l  %116 = tail call float @llvm.maxnum.f32(float %105, float 0.000000e+00)\l  %117 = tail call float @llvm.minnum.f32(float %116, float 1.023000e+03)\l  %118 = tail call float @llvm.maxnum.f32(float %107, float 0.000000e+00)\l  %119 = tail call float @llvm.minnum.f32(float %118, float 1.023000e+03)\l  %120 = fptoui float %115 to i32\l  %121 = shl i32 %120, 22\l  %122 = and i32 %121, -16777216\l  %123 = fptoui float %117 to i32\l  %124 = shl i32 %123, 14\l  %125 = and i32 %124, -65536\l  %126 = fptoui float %119 to i32\l  %127 = shl i32 %126, 6\l  %128 = and i32 %127, -256\l  %129 = or i32 %122, %128\l  %130 = or i32 %129, %125\l  %131 = or i32 %130, %113\l  %132 = mul i32 %29, %8\l  %133 = add i32 %132, %21\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %134\l  store i32 %131, i32 addrspace(1)* %135, align 4, !tbaa !10\l  %136 = tail call float @llvm.maxnum.f32(float %109, float 0.000000e+00)\l  %137 = tail call float @llvm.minnum.f32(float %136, float 1.023000e+03)\l  %138 = tail call float @llvm.maxnum.f32(float %111, float 0.000000e+00)\l  %139 = tail call float @llvm.minnum.f32(float %138, float 1.023000e+03)\l  %140 = tail call float @llvm.maxnum.f32(float %112, float 0.000000e+00)\l  %141 = tail call float @llvm.minnum.f32(float %140, float 1.023000e+03)\l  %142 = fptoui float %137 to i32\l  %143 = shl i32 %142, 22\l  %144 = and i32 %143, -16777216\l  %145 = fptoui float %139 to i32\l  %146 = shl i32 %145, 14\l  %147 = and i32 %146, -65536\l  %148 = fptoui float %141 to i32\l  %149 = shl i32 %148, 6\l  %150 = and i32 %149, -256\l  %151 = or i32 %144, %150\l  %152 = or i32 %151, %147\l  %153 = or i32 %152, %113\l  %154 = add i32 %133, 1\l  %155 = zext i32 %154 to i64\l  %156 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %155\l  store i32 %153, i32 addrspace(1)* %156, align 4, !tbaa !10\l  br label %157\l}"];
	Node0x56acd70 -> Node0x56a91e0;
	Node0x56a91e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%157:\l157:                                              \l  ret void\l}"];
}
