digraph "CFG for '_Z18kernel_extract_roiPfS_Pciiiiiiiiiiiii' function" {
	label="CFG for '_Z18kernel_extract_roiPfS_Pciiiiiiiiiiiii' function";

	Node0x4f8bee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%16:\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = getelementptr i8, i8 addrspace(4)* %18, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %17, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %25 = add i32 %23, %24\l  %26 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %27 = getelementptr i8, i8 addrspace(4)* %18, i64 6\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 2, !range !4, !invariant.load !5\l  %30 = zext i16 %29 to i32\l  %31 = mul i32 %26, %30\l  %32 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %33 = add i32 %31, %32\l  %34 = icmp ult i32 %25, %4\l  %35 = icmp ult i32 %33, %5\l  %36 = select i1 %34, i1 %35, i1 false\l  br i1 %36, label %37, label %157\l|{<s0>T|<s1>F}}"];
	Node0x4f8bee0:s0 -> Node0x4f8bd10;
	Node0x4f8bee0:s1 -> Node0x4f907c0;
	Node0x4f8bd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%37:\l37:                                               \l  %38 = uitofp i32 %25 to float\l  %39 = sitofp i32 %14 to float\l  %40 = fmul contract float %39, %38\l  %41 = sitofp i32 %4 to float\l  %42 = fdiv contract float %40, %41\l  %43 = sitofp i32 %12 to float\l  %44 = fadd contract float %42, %43\l  %45 = uitofp i32 %33 to float\l  %46 = sitofp i32 %15 to float\l  %47 = fmul contract float %46, %45\l  %48 = sitofp i32 %5 to float\l  %49 = fdiv contract float %47, %48\l  %50 = sitofp i32 %13 to float\l  %51 = fadd contract float %49, %50\l  %52 = tail call float @llvm.floor.f32(float %44)\l  %53 = fptosi float %52 to i32\l  %54 = tail call float @llvm.floor.f32(float %51)\l  %55 = fptosi float %54 to i32\l  %56 = tail call float @llvm.ceil.f32(float %44)\l  %57 = fptosi float %56 to i32\l  %58 = tail call float @llvm.ceil.f32(float %51)\l  %59 = fptosi float %58 to i32\l  %60 = fsub contract float %44, %52\l  %61 = fsub contract float %51, %54\l  %62 = fsub contract float 1.000000e+00, %60\l  %63 = fsub contract float 1.000000e+00, %61\l  %64 = fmul contract float %62, %63\l  %65 = fmul contract float %60, %63\l  %66 = fmul contract float %62, %61\l  %67 = fmul contract float %60, %61\l  %68 = mul nsw i32 %55, %3\l  %69 = add nsw i32 %68, %53\l  %70 = add nsw i32 %68, %57\l  %71 = mul nsw i32 %59, %3\l  %72 = add nsw i32 %71, %53\l  %73 = add nsw i32 %71, %57\l  %74 = mul i32 %33, %4\l  %75 = add i32 %74, %25\l  %76 = add nsw i32 %69, %6\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fmul contract float %64, %79\l  %81 = add nsw i32 %70, %6\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fmul contract float %65, %84\l  %86 = fadd contract float %80, %85\l  %87 = add nsw i32 %72, %6\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %66, %90\l  %92 = fadd contract float %86, %91\l  %93 = add nsw i32 %73, %6\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fmul contract float %67, %96\l  %98 = fadd contract float %92, %97\l  %99 = tail call float @llvm.round.f32(float %98)\l  %100 = add nsw i32 %75, %9\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  store float %99, float addrspace(1)* %102, align 4, !tbaa !7\l  %103 = add nsw i32 %69, %7\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7\l  %107 = fmul contract float %64, %106\l  %108 = add nsw i32 %70, %7\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %0, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7\l  %112 = fmul contract float %65, %111\l  %113 = fadd contract float %107, %112\l  %114 = add nsw i32 %72, %7\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7\l  %118 = fmul contract float %66, %117\l  %119 = fadd contract float %113, %118\l  %120 = add nsw i32 %73, %7\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7\l  %124 = fmul contract float %67, %123\l  %125 = fadd contract float %119, %124\l  %126 = tail call float @llvm.round.f32(float %125)\l  %127 = add nsw i32 %75, %10\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  store float %126, float addrspace(1)* %129, align 4, !tbaa !7\l  %130 = add nsw i32 %69, %8\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7\l  %134 = fmul contract float %64, %133\l  %135 = add nsw i32 %70, %8\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7\l  %139 = fmul contract float %65, %138\l  %140 = fadd contract float %134, %139\l  %141 = add nsw i32 %72, %8\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7\l  %145 = fmul contract float %66, %144\l  %146 = fadd contract float %140, %145\l  %147 = add nsw i32 %73, %8\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7\l  %151 = fmul contract float %67, %150\l  %152 = fadd contract float %146, %151\l  %153 = tail call float @llvm.round.f32(float %152)\l  %154 = add nsw i32 %75, %11\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %1, i64 %155\l  store float %153, float addrspace(1)* %156, align 4, !tbaa !7\l  br label %157\l}"];
	Node0x4f8bd10 -> Node0x4f907c0;
	Node0x4f907c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%157:\l157:                                              \l  ret void\l}"];
}
