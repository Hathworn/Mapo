digraph "CFG for '_Z4initjP12hiprandState' function" {
	label="CFG for '_Z4initjP12hiprandState' function";

	Node0x4bf6a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%2:\l  %3 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 6\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 2, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = mul i32 %9, %8\l  %11 = zext i32 %10 to i64\l  %12 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %12) #4\l  %13 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 0\l  %14 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 1\l  %15 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 2\l  %16 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 3\l  %17 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 4\l  %18 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 0\l  %19 = xor i32 %0, 746559103\l  %20 = mul i32 %19, 1228688033\l  %21 = add i32 %20, 123456789\l  store i32 %21, i32 addrspace(5)* %13, align 8, !tbaa !6\l  %22 = xor i32 %20, 362436069\l  store i32 %22, i32 addrspace(5)* %14, align 4, !tbaa !6\l  store i32 -1452303100, i32 addrspace(5)* %15, align 8, !tbaa !6\l  store i32 -1894485380, i32 addrspace(5)* %16, align 4, !tbaa !6\l  %23 = add i32 %20, 5783321\l  store i32 %23, i32 addrspace(5)* %17, align 8, !tbaa !6\l  %24 = add i32 %20, -1966976488\l  store i32 %24, i32 addrspace(5)* %18, align 8, !tbaa !10\l  %25 = icmp eq i32 %10, 0\l  br i1 %25, label %203, label %26\l|{<s0>T|<s1>F}}"];
	Node0x4bf6a20:s0 -> Node0x4bfd370;
	Node0x4bf6a20:s1 -> Node0x4bfd400;
	Node0x4bfd400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%26:\l26:                                               \l  %27 = phi i64 [ %36, %34 ], [ %11, %2 ]\l  %28 = phi i32 [ %35, %34 ], [ 0, %2 ]\l  %29 = trunc i64 %27 to i32\l  %30 = and i32 %29, 3\l  %31 = icmp eq i32 %30, 0\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4bfd400:s0 -> Node0x4bfd540;
	Node0x4bfd400:s1 -> Node0x4bfd930;
	Node0x4bfd930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%32:\l32:                                               \l  %33 = zext i32 %28 to i64\l  br label %38\l}"];
	Node0x4bfd930 -> Node0x4bfc000;
	Node0x4bfd540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%34:\l34:                                               \l  %35 = add nuw nsw i32 %28, 1\l  %36 = lshr i64 %27, 2\l  %37 = icmp ult i64 %27, 4\l  br i1 %37, label %203, label %26, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4bfd540:s0 -> Node0x4bfd370;
	Node0x4bfd540:s1 -> Node0x4bfd400;
	Node0x4bfc000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%38:\l38:                                               \l  %39 = phi i32 [ 0, %32 ], [ %201, %200 ]\l  br label %40\l}"];
	Node0x4bfc000 -> Node0x4bfe110;
	Node0x4bfe110 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ 0, %38 ], [ %173, %40 ]\l  %42 = phi i32 [ 0, %38 ], [ %179, %40 ]\l  %43 = phi i32 [ 0, %38 ], [ %185, %40 ]\l  %44 = phi i32 [ 0, %38 ], [ %191, %40 ]\l  %45 = phi i32 [ 0, %38 ], [ %197, %40 ]\l  %46 = phi i32 [ 0, %38 ], [ %198, %40 ]\l  %47 = lshr i32 %46, 5\l  %48 = and i32 %46, 28\l  %49 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %47\l  %50 = load i32, i32 addrspace(5)* %49, align 4, !tbaa !6\l  %51 = shl nuw i32 1, %48\l  %52 = and i32 %51, %50\l  %53 = icmp eq i32 %52, 0\l  %54 = mul nuw nsw i32 %46, 5\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %55\l  %57 = load i32, i32 addrspace(4)* %56, align 16, !tbaa !6\l  %58 = select i1 %53, i32 0, i32 %57\l  %59 = xor i32 %58, %41\l  %60 = or i32 %54, 1\l  %61 = zext i32 %60 to i64\l  %62 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %61\l  %63 = load i32, i32 addrspace(4)* %62, align 4, !tbaa !6\l  %64 = select i1 %53, i32 0, i32 %63\l  %65 = xor i32 %64, %42\l  %66 = or i32 %54, 2\l  %67 = zext i32 %66 to i64\l  %68 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %67\l  %69 = load i32, i32 addrspace(4)* %68, align 8, !tbaa !6\l  %70 = select i1 %53, i32 0, i32 %69\l  %71 = xor i32 %70, %43\l  %72 = or i32 %54, 3\l  %73 = zext i32 %72 to i64\l  %74 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %73\l  %75 = load i32, i32 addrspace(4)* %74, align 4, !tbaa !6\l  %76 = select i1 %53, i32 0, i32 %75\l  %77 = xor i32 %76, %44\l  %78 = add nuw nsw i32 %54, 4\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %79\l  %81 = load i32, i32 addrspace(4)* %80, align 16, !tbaa !6\l  %82 = select i1 %53, i32 0, i32 %81\l  %83 = xor i32 %82, %45\l  %84 = or i32 %46, 1\l  %85 = lshr i32 %46, 5\l  %86 = and i32 %84, 29\l  %87 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %85\l  %88 = load i32, i32 addrspace(5)* %87, align 4, !tbaa !6\l  %89 = shl nuw i32 1, %86\l  %90 = and i32 %89, %88\l  %91 = icmp eq i32 %90, 0\l  %92 = mul nuw nsw i32 %84, 5\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %93\l  %95 = load i32, i32 addrspace(4)* %94, align 4, !tbaa !6\l  %96 = select i1 %91, i32 0, i32 %95\l  %97 = xor i32 %96, %59\l  %98 = add nuw nsw i32 %92, 1\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %99\l  %101 = load i32, i32 addrspace(4)* %100, align 8, !tbaa !6\l  %102 = select i1 %91, i32 0, i32 %101\l  %103 = xor i32 %102, %65\l  %104 = or i32 %92, 2\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %105\l  %107 = load i32, i32 addrspace(4)* %106, align 4, !tbaa !6\l  %108 = select i1 %91, i32 0, i32 %107\l  %109 = xor i32 %108, %71\l  %110 = add nuw nsw i32 %92, 3\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %111\l  %113 = load i32, i32 addrspace(4)* %112, align 16, !tbaa !6\l  %114 = select i1 %91, i32 0, i32 %113\l  %115 = xor i32 %114, %77\l  %116 = add nuw nsw i32 %92, 4\l  %117 = zext i32 %116 to i64\l  %118 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %117\l  %119 = load i32, i32 addrspace(4)* %118, align 4, !tbaa !6\l  %120 = select i1 %91, i32 0, i32 %119\l  %121 = xor i32 %120, %83\l  %122 = or i32 %46, 2\l  %123 = lshr i32 %46, 5\l  %124 = and i32 %122, 30\l  %125 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %123\l  %126 = load i32, i32 addrspace(5)* %125, align 4, !tbaa !6\l  %127 = shl nuw i32 1, %124\l  %128 = and i32 %127, %126\l  %129 = icmp eq i32 %128, 0\l  %130 = mul nuw nsw i32 %122, 5\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %131\l  %133 = load i32, i32 addrspace(4)* %132, align 8, !tbaa !6\l  %134 = select i1 %129, i32 0, i32 %133\l  %135 = xor i32 %134, %97\l  %136 = or i32 %130, 1\l  %137 = zext i32 %136 to i64\l  %138 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %137\l  %139 = load i32, i32 addrspace(4)* %138, align 4, !tbaa !6\l  %140 = select i1 %129, i32 0, i32 %139\l  %141 = xor i32 %140, %103\l  %142 = add nuw nsw i32 %130, 2\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %143\l  %145 = load i32, i32 addrspace(4)* %144, align 16, !tbaa !6\l  %146 = select i1 %129, i32 0, i32 %145\l  %147 = xor i32 %146, %109\l  %148 = add nuw nsw i32 %130, 3\l  %149 = zext i32 %148 to i64\l  %150 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %149\l  %151 = load i32, i32 addrspace(4)* %150, align 4, !tbaa !6\l  %152 = select i1 %129, i32 0, i32 %151\l  %153 = xor i32 %152, %115\l  %154 = add nuw nsw i32 %130, 4\l  %155 = zext i32 %154 to i64\l  %156 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %155\l  %157 = load i32, i32 addrspace(4)* %156, align 8, !tbaa !6\l  %158 = select i1 %129, i32 0, i32 %157\l  %159 = xor i32 %158, %121\l  %160 = or i32 %46, 3\l  %161 = lshr i32 %46, 5\l  %162 = and i32 %160, 31\l  %163 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %161\l  %164 = load i32, i32 addrspace(5)* %163, align 4, !tbaa !6\l  %165 = shl nuw i32 1, %162\l  %166 = and i32 %165, %164\l  %167 = icmp eq i32 %166, 0\l  %168 = mul nuw nsw i32 %160, 5\l  %169 = zext i32 %168 to i64\l  %170 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %169\l  %171 = load i32, i32 addrspace(4)* %170, align 4, !tbaa !6\l  %172 = select i1 %167, i32 0, i32 %171\l  %173 = xor i32 %172, %135\l  %174 = add nuw nsw i32 %168, 1\l  %175 = zext i32 %174 to i64\l  %176 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %175\l  %177 = load i32, i32 addrspace(4)* %176, align 16, !tbaa !6\l  %178 = select i1 %167, i32 0, i32 %177\l  %179 = xor i32 %178, %141\l  %180 = add nuw nsw i32 %168, 2\l  %181 = zext i32 %180 to i64\l  %182 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %181\l  %183 = load i32, i32 addrspace(4)* %182, align 4, !tbaa !6\l  %184 = select i1 %167, i32 0, i32 %183\l  %185 = xor i32 %184, %147\l  %186 = add nuw nsw i32 %168, 3\l  %187 = zext i32 %186 to i64\l  %188 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %187\l  %189 = load i32, i32 addrspace(4)* %188, align 8, !tbaa !6\l  %190 = select i1 %167, i32 0, i32 %189\l  %191 = xor i32 %190, %153\l  %192 = add nuw nsw i32 %168, 4\l  %193 = zext i32 %192 to i64\l  %194 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %193\l  %195 = load i32, i32 addrspace(4)* %194, align 4, !tbaa !6\l  %196 = select i1 %167, i32 0, i32 %195\l  %197 = xor i32 %196, %159\l  %198 = add nuw nsw i32 %46, 4\l  %199 = icmp eq i32 %198, 160\l  br i1 %199, label %200, label %40, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4bfe110:s0 -> Node0x4bfdfd0;
	Node0x4bfe110:s1 -> Node0x4bfe110;
	Node0x4bfdfd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%200:\l200:                                              \l  store i32 %173, i32 addrspace(5)* %13, align 8, !tbaa !6\l  store i32 %179, i32 addrspace(5)* %14, align 4, !tbaa !6\l  store i32 %185, i32 addrspace(5)* %15, align 8, !tbaa !6\l  store i32 %191, i32 addrspace(5)* %16, align 4, !tbaa !6\l  store i32 %197, i32 addrspace(5)* %17, align 8, !tbaa !6\l  %201 = add nuw nsw i32 %39, 1\l  %202 = icmp eq i32 %201, %30\l  br i1 %202, label %34, label %38, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4bfdfd0:s0 -> Node0x4bfd540;
	Node0x4bfdfd0:s1 -> Node0x4bfc000;
	Node0x4bfd370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%203:\l203:                                              \l  %204 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %11\l  %205 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %205, align 4, !tbaa !19\l  %206 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %206, align 8, !tbaa !20\l  %207 = bitcast %struct.hiprandState addrspace(1)* %204 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %207, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %12, i64 48, i1 false), !tbaa.struct !21\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %12) #4\l  ret void\l}"];
}
