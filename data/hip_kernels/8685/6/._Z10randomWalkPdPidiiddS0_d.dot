digraph "CFG for '_Z10randomWalkPdPidiiddS0_d' function" {
	label="CFG for '_Z10randomWalkPdPidiiddS0_d' function";

	Node0x60ab9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = add i32 %17, %10\l  %19 = icmp slt i32 %18, %4\l  br i1 %19, label %20, label %334\l|{<s0>T|<s1>F}}"];
	Node0x60ab9d0:s0 -> Node0x60ae460;
	Node0x60ab9d0:s1 -> Node0x60ae4f0;
	Node0x60ae460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%20:\l20:                                               \l  %21 = mul i32 %11, 1000\l  %22 = add i32 %21, %10\l  %23 = uitofp i32 %22 to double\l  %24 = fadd contract double %23, %8\l  %25 = fptoui double %24 to i64\l  %26 = trunc i64 %25 to i32\l  %27 = xor i32 %26, 746559103\l  %28 = lshr i64 %25, 32\l  %29 = trunc i64 %28 to i32\l  %30 = xor i32 %29, -1607034933\l  %31 = mul i32 %27, 1228688033\l  %32 = mul i32 %30, 2073658381\l  %33 = mul i32 %18, %3\l  %34 = sext i32 %18 to i64\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %34\l  store i32 0, i32 addrspace(1)* %35, align 4, !tbaa !7\l  %36 = sext i32 %33 to i64\l  %37 = getelementptr inbounds double, double addrspace(1)* %0, i64 %36\l  store double 0.000000e+00, double addrspace(1)* %37, align 8, !tbaa !11\l  %38 = add nsw i32 %33, %3\l  %39 = icmp sgt i32 %3, 1\l  br i1 %39, label %40, label %332\l|{<s0>T|<s1>F}}"];
	Node0x60ae460:s0 -> Node0x60b0050;
	Node0x60ae460:s1 -> Node0x60b00e0;
	Node0x60b0050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%40:\l40:                                               \l  %41 = add nsw i32 %33, 1\l  %42 = add i32 %31, 6615241\l  %43 = add i32 %42, %32\l  %44 = add i32 %31, 5783321\l  %45 = xor i32 %32, 88675123\l  %46 = add i32 %32, 521288629\l  %47 = xor i32 %31, 362436069\l  %48 = add i32 %31, 123456789\l  %49 = sitofp i32 %3 to double\l  %50 = fdiv contract double %2, %49\l  %51 = fcmp olt double %50, 0x1000000000000000\l  %52 = select i1 %51, double 0x4FF0000000000000, double 1.000000e+00\l  %53 = fmul double %50, %52\l  %54 = tail call double @llvm.amdgcn.rsq.f64(double %53)\l  %55 = fmul double %53, %54\l  %56 = fmul double %54, 5.000000e-01\l  %57 = fneg double %56\l  %58 = tail call double @llvm.fma.f64(double %57, double %55, double\l... 5.000000e-01)\l  %59 = tail call double @llvm.fma.f64(double %56, double %58, double %56)\l  %60 = tail call double @llvm.fma.f64(double %55, double %58, double %55)\l  %61 = fneg double %60\l  %62 = tail call double @llvm.fma.f64(double %61, double %60, double %53)\l  %63 = tail call double @llvm.fma.f64(double %62, double %59, double %60)\l  %64 = fneg double %63\l  %65 = tail call double @llvm.fma.f64(double %64, double %63, double %53)\l  %66 = tail call double @llvm.fma.f64(double %65, double %59, double %63)\l  %67 = select i1 %51, double 0x37F0000000000000, double 1.000000e+00\l  %68 = fmul double %67, %66\l  %69 = fcmp oeq double %53, 0.000000e+00\l  %70 = fcmp oeq double %53, 0x7FF0000000000000\l  %71 = or i1 %69, %70\l  %72 = select i1 %71, double %53, double %68\l  br label %74\l}"];
	Node0x60b0050 -> Node0x60b1fe0;
	Node0x60b20e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%73:\l73:                                               \l  br i1 %329, label %334, label %332\l|{<s0>T|<s1>F}}"];
	Node0x60b20e0:s0 -> Node0x60ae4f0;
	Node0x60b20e0:s1 -> Node0x60b00e0;
	Node0x60b1fe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%74:\l74:                                               \l  %75 = phi double [ 0.000000e+00, %40 ], [ %314, %328 ]\l  %76 = phi i32 [ %41, %40 ], [ %330, %328 ]\l  %77 = phi i32 [ %33, %40 ], [ %76, %328 ]\l  %78 = phi i1 [ false, %40 ], [ %329, %328 ]\l  %79 = phi i32 [ %43, %40 ], [ %311, %328 ]\l  %80 = phi i32 [ %44, %40 ], [ %310, %328 ]\l  %81 = phi i32 [ 0, %40 ], [ %309, %328 ]\l  %82 = phi i32 [ %45, %40 ], [ %308, %328 ]\l  %83 = phi double [ undef, %40 ], [ %307, %328 ]\l  %84 = phi i32 [ %48, %40 ], [ %306, %328 ]\l  %85 = phi i32 [ %47, %40 ], [ %305, %328 ]\l  %86 = phi i32 [ %46, %40 ], [ %304, %328 ]\l  %87 = icmp eq i32 %81, 0\l  br i1 %87, label %91, label %88\l|{<s0>T|<s1>F}}"];
	Node0x60b1fe0:s0 -> Node0x60b33e0;
	Node0x60b1fe0:s1 -> Node0x60b3470;
	Node0x60b3470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%88:\l88:                                               \l  %89 = fptrunc double %83 to float\l  %90 = fpext float %89 to double\l  br label %302\l}"];
	Node0x60b3470 -> Node0x60b3690;
	Node0x60b33e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%91:\l91:                                               \l  %92 = lshr i32 %84, 2\l  %93 = xor i32 %92, %84\l  %94 = shl i32 %80, 4\l  %95 = shl i32 %93, 1\l  %96 = xor i32 %95, %94\l  %97 = xor i32 %96, %93\l  %98 = xor i32 %97, %80\l  %99 = add i32 %79, 362437\l  %100 = add i32 %99, %98\l  %101 = lshr i32 %85, 2\l  %102 = xor i32 %101, %85\l  %103 = shl i32 %98, 4\l  %104 = shl i32 %102, 1\l  %105 = xor i32 %104, %103\l  %106 = xor i32 %105, %102\l  %107 = xor i32 %106, %98\l  %108 = add i32 %79, 724874\l  %109 = add i32 %108, %107\l  %110 = lshr i32 %86, 2\l  %111 = xor i32 %110, %86\l  %112 = shl i32 %107, 4\l  %113 = shl i32 %111, 1\l  %114 = xor i32 %113, %112\l  %115 = xor i32 %114, %111\l  %116 = xor i32 %115, %107\l  %117 = add i32 %79, 1087311\l  %118 = add i32 %117, %116\l  %119 = lshr i32 %82, 2\l  %120 = xor i32 %119, %82\l  %121 = shl i32 %116, 4\l  %122 = shl i32 %120, 1\l  %123 = xor i32 %122, %121\l  %124 = xor i32 %123, %120\l  %125 = xor i32 %124, %116\l  %126 = add i32 %79, 1449748\l  %127 = add i32 %125, %126\l  %128 = zext i32 %100 to i64\l  %129 = zext i32 %109 to i64\l  %130 = shl nuw nsw i64 %129, 21\l  %131 = xor i64 %130, %128\l  %132 = uitofp i64 %131 to double\l  %133 = fmul contract double %132, 0x3CA0000000000000\l  %134 = fadd contract double %133, 0x3CA0000000000000\l  %135 = zext i32 %118 to i64\l  %136 = zext i32 %127 to i64\l  %137 = shl nuw nsw i64 %136, 21\l  %138 = xor i64 %137, %135\l  %139 = uitofp i64 %138 to double\l  %140 = fmul contract double %139, 0x3CB0000000000000\l  %141 = fadd contract double %140, 0x3CB0000000000000\l  %142 = tail call double @llvm.amdgcn.frexp.mant.f64(double %134)\l  %143 = fcmp olt double %142, 0x3FE5555555555555\l  %144 = zext i1 %143 to i32\l  %145 = tail call double @llvm.amdgcn.ldexp.f64(double %142, i32 %144)\l  %146 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %134)\l  %147 = sub nsw i32 %146, %144\l  %148 = fadd double %145, -1.000000e+00\l  %149 = fadd double %145, 1.000000e+00\l  %150 = fadd double %149, -1.000000e+00\l  %151 = fsub double %145, %150\l  %152 = tail call double @llvm.amdgcn.rcp.f64(double %149)\l  %153 = fneg double %149\l  %154 = tail call double @llvm.fma.f64(double %153, double %152, double\l... 1.000000e+00)\l  %155 = tail call double @llvm.fma.f64(double %154, double %152, double %152)\l  %156 = tail call double @llvm.fma.f64(double %153, double %155, double\l... 1.000000e+00)\l  %157 = tail call double @llvm.fma.f64(double %156, double %155, double %155)\l  %158 = fmul double %148, %157\l  %159 = fmul double %149, %158\l  %160 = fneg double %159\l  %161 = tail call double @llvm.fma.f64(double %158, double %149, double %160)\l  %162 = tail call double @llvm.fma.f64(double %158, double %151, double %161)\l  %163 = fadd double %159, %162\l  %164 = fsub double %163, %159\l  %165 = fsub double %162, %164\l  %166 = fsub double %148, %163\l  %167 = fsub double %148, %166\l  %168 = fsub double %167, %163\l  %169 = fsub double %168, %165\l  %170 = fadd double %166, %169\l  %171 = fmul double %157, %170\l  %172 = fadd double %158, %171\l  %173 = fsub double %172, %158\l  %174 = fsub double %171, %173\l  %175 = fmul double %172, %172\l  %176 = tail call double @llvm.fma.f64(double %175, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %177 = tail call double @llvm.fma.f64(double %175, double %176, double\l... 0x3FC7474DD7F4DF2E)\l  %178 = tail call double @llvm.fma.f64(double %175, double %177, double\l... 0x3FCC71C016291751)\l  %179 = tail call double @llvm.fma.f64(double %175, double %178, double\l... 0x3FD249249B27ACF1)\l  %180 = tail call double @llvm.fma.f64(double %175, double %179, double\l... 0x3FD99999998EF7B6)\l  %181 = tail call double @llvm.fma.f64(double %175, double %180, double\l... 0x3FE5555555555780)\l  %182 = tail call double @llvm.amdgcn.ldexp.f64(double %172, i32 1)\l  %183 = tail call double @llvm.amdgcn.ldexp.f64(double %174, i32 1)\l  %184 = fmul double %172, %175\l  %185 = fmul double %184, %181\l  %186 = fadd double %182, %185\l  %187 = fsub double %186, %182\l  %188 = fsub double %185, %187\l  %189 = fadd double %183, %188\l  %190 = fadd double %186, %189\l  %191 = fsub double %190, %186\l  %192 = fsub double %189, %191\l  %193 = sitofp i32 %147 to double\l  %194 = fmul double %193, 0x3FE62E42FEFA39EF\l  %195 = fneg double %194\l  %196 = tail call double @llvm.fma.f64(double %193, double\l... 0x3FE62E42FEFA39EF, double %195)\l  %197 = tail call double @llvm.fma.f64(double %193, double\l... 0x3C7ABC9E3B39803F, double %196)\l  %198 = fadd double %194, %197\l  %199 = fsub double %198, %194\l  %200 = fsub double %197, %199\l  %201 = fadd double %198, %190\l  %202 = fsub double %201, %198\l  %203 = fsub double %201, %202\l  %204 = fsub double %198, %203\l  %205 = fsub double %190, %202\l  %206 = fadd double %205, %204\l  %207 = fadd double %200, %192\l  %208 = fsub double %207, %200\l  %209 = fsub double %207, %208\l  %210 = fsub double %200, %209\l  %211 = fsub double %192, %208\l  %212 = fadd double %211, %210\l  %213 = fadd double %207, %206\l  %214 = fadd double %201, %213\l  %215 = fsub double %214, %201\l  %216 = fsub double %213, %215\l  %217 = fadd double %212, %216\l  %218 = fadd double %214, %217\l  %219 = fcmp oeq double %134, 0x7FF0000000000000\l  %220 = select i1 %219, double %134, double %218\l  %221 = fcmp oeq double %134, 0.000000e+00\l  %222 = fmul contract double %220, -2.000000e+00\l  %223 = select i1 %221, double 0x7FF0000000000000, double %222\l  %224 = fcmp olt double %223, 0x1000000000000000\l  %225 = select i1 %224, double 0x4FF0000000000000, double 1.000000e+00\l  %226 = fmul double %223, %225\l  %227 = tail call double @llvm.amdgcn.rsq.f64(double %226)\l  %228 = fmul double %226, %227\l  %229 = fmul double %227, 5.000000e-01\l  %230 = fneg double %229\l  %231 = tail call double @llvm.fma.f64(double %230, double %228, double\l... 5.000000e-01)\l  %232 = tail call double @llvm.fma.f64(double %229, double %231, double %229)\l  %233 = tail call double @llvm.fma.f64(double %228, double %231, double %228)\l  %234 = fneg double %233\l  %235 = tail call double @llvm.fma.f64(double %234, double %233, double %226)\l  %236 = tail call double @llvm.fma.f64(double %235, double %232, double %233)\l  %237 = fneg double %236\l  %238 = tail call double @llvm.fma.f64(double %237, double %236, double %226)\l  %239 = tail call double @llvm.fma.f64(double %238, double %232, double %236)\l  %240 = select i1 %224, double 0x37F0000000000000, double 1.000000e+00\l  %241 = fmul double %240, %239\l  %242 = fcmp oeq double %226, 0.000000e+00\l  %243 = fcmp oeq double %226, 0x7FF0000000000000\l  %244 = or i1 %242, %243\l  %245 = select i1 %244, double %226, double %241\l  %246 = fmul double %141, 5.000000e-01\l  %247 = tail call double @llvm.amdgcn.fract.f64(double %246)\l  %248 = tail call i1 @llvm.amdgcn.class.f64(double %246, i32 516)\l  %249 = fmul double %247, 2.000000e+00\l  %250 = select i1 %248, double 0.000000e+00, double %249\l  %251 = fcmp ogt double %141, 1.000000e+00\l  %252 = select i1 %251, double %250, double %141\l  %253 = fmul double %252, 2.000000e+00\l  %254 = tail call double @llvm.rint.f64(double %253)\l  %255 = tail call double @llvm.fma.f64(double %254, double -5.000000e-01,\l... double %252)\l  %256 = fptosi double %254 to i32\l  %257 = fmul double %255, %255\l  %258 = tail call double @llvm.fma.f64(double %257, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %259 = tail call double @llvm.fma.f64(double %257, double %258, double\l... 0x3FB50782D5F14825)\l  %260 = tail call double @llvm.fma.f64(double %257, double %259, double\l... 0xBFE32D2CCDFE9424)\l  %261 = tail call double @llvm.fma.f64(double %257, double %260, double\l... 0x400466BC67754FFF)\l  %262 = tail call double @llvm.fma.f64(double %257, double %261, double\l... 0xC014ABBCE625BE09)\l  %263 = fmul double %255, %257\l  %264 = fmul double %263, %262\l  %265 = tail call double @llvm.fma.f64(double %255, double\l... 0x400921FB54442D18, double %264)\l  %266 = tail call double @llvm.fma.f64(double %257, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %267 = tail call double @llvm.fma.f64(double %257, double %266, double\l... 0xBF9A6D1E7294BFF9)\l  %268 = tail call double @llvm.fma.f64(double %257, double %267, double\l... 0x3FCE1F5067B90B37)\l  %269 = tail call double @llvm.fma.f64(double %257, double %268, double\l... 0xBFF55D3C7E3C325B)\l  %270 = tail call double @llvm.fma.f64(double %257, double %269, double\l... 0x40103C1F081B5A67)\l  %271 = tail call double @llvm.fma.f64(double %257, double %270, double\l... 0xC013BD3CC9BE45DE)\l  %272 = tail call double @llvm.fma.f64(double %257, double %271, double\l... 1.000000e+00)\l  %273 = shl i32 %256, 30\l  %274 = and i32 %273, -2147483648\l  %275 = and i32 %256, 1\l  %276 = icmp eq i32 %275, 0\l  %277 = select i1 %276, double %265, double %272\l  %278 = bitcast double %277 to \<2 x i32\>\l  %279 = bitcast double %141 to \<2 x i32\>\l  %280 = extractelement \<2 x i32\> %279, i64 1\l  %281 = and i32 %280, -2147483648\l  %282 = extractelement \<2 x i32\> %278, i64 1\l  %283 = xor i32 %281, %282\l  %284 = xor i32 %283, %274\l  %285 = insertelement \<2 x i32\> %278, i32 %284, i64 1\l  %286 = fneg double %265\l  %287 = select i1 %276, double %272, double %286\l  %288 = bitcast double %287 to \<2 x i32\>\l  %289 = extractelement \<2 x i32\> %288, i64 1\l  %290 = xor i32 %289, %274\l  %291 = insertelement \<2 x i32\> %288, i32 %290, i64 1\l  %292 = tail call i1 @llvm.amdgcn.class.f64(double %141, i32 516)\l  %293 = select i1 %292, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %291\l  %294 = select i1 %292, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %285\l  %295 = bitcast \<2 x i32\> %294 to double\l  %296 = bitcast \<2 x i32\> %293 to double\l  %297 = fmul contract double %245, %295\l  %298 = fmul contract double %245, %296\l  %299 = sext i32 %77 to i64\l  %300 = getelementptr inbounds double, double addrspace(1)* %0, i64 %299\l  %301 = load double, double addrspace(1)* %300, align 8, !tbaa !11\l  br label %302\l}"];
	Node0x60b33e0 -> Node0x60b3690;
	Node0x60b3690 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%302:\l302:                                              \l  %303 = phi double [ %301, %91 ], [ %75, %88 ]\l  %304 = phi i32 [ %107, %91 ], [ %86, %88 ]\l  %305 = phi i32 [ %98, %91 ], [ %85, %88 ]\l  %306 = phi i32 [ %80, %91 ], [ %84, %88 ]\l  %307 = phi double [ %298, %91 ], [ %83, %88 ]\l  %308 = phi i32 [ %116, %91 ], [ %82, %88 ]\l  %309 = phi i32 [ 1, %91 ], [ 0, %88 ]\l  %310 = phi i32 [ %125, %91 ], [ %80, %88 ]\l  %311 = phi i32 [ %126, %91 ], [ %79, %88 ]\l  %312 = phi double [ %297, %91 ], [ %90, %88 ]\l  %313 = fmul contract double %72, %312\l  %314 = fadd contract double %303, %313\l  %315 = sext i32 %76 to i64\l  %316 = getelementptr inbounds double, double addrspace(1)* %0, i64 %315\l  store double %314, double addrspace(1)* %316, align 8, !tbaa !11\l  %317 = fcmp contract ult double %314, %6\l  %318 = select i1 %317, i1 true, i1 %78\l  br i1 %318, label %321, label %319\l|{<s0>T|<s1>F}}"];
	Node0x60b3690:s0 -> Node0x60bfe30;
	Node0x60b3690:s1 -> Node0x60bfe80;
	Node0x60bfe80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%319:\l319:                                              \l  %320 = sub nsw i32 %76, %33\l  br label %326\l}"];
	Node0x60bfe80 -> Node0x60c0010;
	Node0x60bfe30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%321:\l321:                                              \l  %322 = fcmp contract ugt double %314, %5\l  %323 = select i1 %322, i1 true, i1 %78\l  br i1 %323, label %328, label %324\l|{<s0>T|<s1>F}}"];
	Node0x60bfe30:s0 -> Node0x60b2250;
	Node0x60bfe30:s1 -> Node0x60c0210;
	Node0x60c0210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%324:\l324:                                              \l  %325 = sub i32 %33, %76\l  br label %326\l}"];
	Node0x60c0210 -> Node0x60c0010;
	Node0x60c0010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%326:\l326:                                              \l  %327 = phi i32 [ %320, %319 ], [ %325, %324 ]\l  store i32 %327, i32 addrspace(1)* %35, align 4, !tbaa !7\l  br label %328\l}"];
	Node0x60c0010 -> Node0x60b2250;
	Node0x60b2250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%328:\l328:                                              \l  %329 = phi i1 [ %78, %321 ], [ true, %326 ]\l  %330 = add nsw i32 %76, 1\l  %331 = icmp slt i32 %330, %38\l  br i1 %331, label %74, label %73, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x60b2250:s0 -> Node0x60b1fe0;
	Node0x60b2250:s1 -> Node0x60b20e0;
	Node0x60b00e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%332:\l332:                                              \l  %333 = atomicrmw add i32 addrspace(1)* %7, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  br label %334\l}"];
	Node0x60b00e0 -> Node0x60ae4f0;
	Node0x60ae4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%334:\l334:                                              \l  ret void\l}"];
}
