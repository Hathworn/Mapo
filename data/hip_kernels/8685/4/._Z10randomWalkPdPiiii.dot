digraph "CFG for '_Z10randomWalkPdPiiii' function" {
	label="CFG for '_Z10randomWalkPdPiiii' function";

	Node0x4b6f490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = icmp slt i32 %14, %4\l  br i1 %15, label %16, label %295\l|{<s0>T|<s1>F}}"];
	Node0x4b6f490:s0 -> Node0x4b71360;
	Node0x4b6f490:s1 -> Node0x4b713f0;
	Node0x4b71360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%16:\l16:                                               \l  %17 = mul i32 %14, %3\l  %18 = sext i32 %14 to i64\l  %19 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %18\l  store i32 0, i32 addrspace(1)* %19, align 4, !tbaa !7\l  %20 = sext i32 %17 to i64\l  %21 = getelementptr inbounds double, double addrspace(1)* %0, i64 %20\l  store double 0.000000e+00, double addrspace(1)* %21, align 8, !tbaa !11\l  %22 = add nsw i32 %17, %3\l  %23 = icmp sgt i32 %3, 1\l  br i1 %23, label %24, label %295\l|{<s0>T|<s1>F}}"];
	Node0x4b71360:s0 -> Node0x4b72760;
	Node0x4b71360:s1 -> Node0x4b713f0;
	Node0x4b72760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%24:\l24:                                               \l  %25 = add nsw i32 %17, 1\l  %26 = sitofp i32 %2 to double\l  %27 = sitofp i32 %3 to double\l  %28 = fdiv contract double %26, %27\l  %29 = fcmp olt double %28, 0x1000000000000000\l  %30 = select i1 %29, double 0x4FF0000000000000, double 1.000000e+00\l  %31 = fmul double %28, %30\l  %32 = tail call double @llvm.amdgcn.rsq.f64(double %31)\l  %33 = fmul double %31, %32\l  %34 = fmul double %32, 5.000000e-01\l  %35 = fneg double %34\l  %36 = tail call double @llvm.fma.f64(double %35, double %33, double\l... 5.000000e-01)\l  %37 = tail call double @llvm.fma.f64(double %34, double %36, double %34)\l  %38 = tail call double @llvm.fma.f64(double %33, double %36, double %33)\l  %39 = fneg double %38\l  %40 = tail call double @llvm.fma.f64(double %39, double %38, double %31)\l  %41 = tail call double @llvm.fma.f64(double %40, double %37, double %38)\l  %42 = fneg double %41\l  %43 = tail call double @llvm.fma.f64(double %42, double %41, double %31)\l  %44 = tail call double @llvm.fma.f64(double %43, double %37, double %41)\l  %45 = select i1 %29, double 0x37F0000000000000, double 1.000000e+00\l  %46 = fmul double %45, %44\l  %47 = fcmp oeq double %31, 0.000000e+00\l  %48 = fcmp oeq double %31, 0x7FF0000000000000\l  %49 = or i1 %47, %48\l  %50 = select i1 %49, double %31, double %46\l  br label %51\l}"];
	Node0x4b72760 -> Node0x4b740b0;
	Node0x4b740b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi double [ 0.000000e+00, %24 ], [ %290, %278 ]\l  %53 = phi i32 [ %25, %24 ], [ %293, %278 ]\l  %54 = phi i32 [ %17, %24 ], [ %53, %278 ]\l  %55 = phi i32 [ 485462757, %24 ], [ %287, %278 ]\l  %56 = phi i32 [ -1836744730, %24 ], [ %286, %278 ]\l  %57 = phi i32 [ 0, %24 ], [ %285, %278 ]\l  %58 = phi i32 [ -1894485380, %24 ], [ %284, %278 ]\l  %59 = phi double [ undef, %24 ], [ %283, %278 ]\l  %60 = phi i32 [ -1719071262, %24 ], [ %282, %278 ]\l  %61 = phi i32 [ -2018044632, %24 ], [ %281, %278 ]\l  %62 = phi i32 [ -1452303100, %24 ], [ %280, %278 ]\l  %63 = icmp eq i32 %57, 0\l  br i1 %63, label %67, label %64\l|{<s0>T|<s1>F}}"];
	Node0x4b740b0:s0 -> Node0x4b75380;
	Node0x4b740b0:s1 -> Node0x4b75410;
	Node0x4b75410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%64:\l64:                                               \l  %65 = fptrunc double %59 to float\l  %66 = fpext float %65 to double\l  br label %278\l}"];
	Node0x4b75410 -> Node0x4b741b0;
	Node0x4b75380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%67:\l67:                                               \l  %68 = lshr i32 %60, 2\l  %69 = xor i32 %68, %60\l  %70 = shl i32 %56, 4\l  %71 = shl i32 %69, 1\l  %72 = xor i32 %71, %70\l  %73 = xor i32 %72, %69\l  %74 = xor i32 %73, %56\l  %75 = add i32 %55, 362437\l  %76 = add i32 %75, %74\l  %77 = lshr i32 %61, 2\l  %78 = xor i32 %77, %61\l  %79 = shl i32 %74, 4\l  %80 = shl i32 %78, 1\l  %81 = xor i32 %80, %79\l  %82 = xor i32 %81, %78\l  %83 = xor i32 %82, %74\l  %84 = add i32 %55, 724874\l  %85 = add i32 %84, %83\l  %86 = lshr i32 %62, 2\l  %87 = xor i32 %86, %62\l  %88 = shl i32 %83, 4\l  %89 = shl i32 %87, 1\l  %90 = xor i32 %89, %88\l  %91 = xor i32 %90, %87\l  %92 = xor i32 %91, %83\l  %93 = add i32 %55, 1087311\l  %94 = add i32 %93, %92\l  %95 = lshr i32 %58, 2\l  %96 = xor i32 %95, %58\l  %97 = shl i32 %92, 4\l  %98 = shl i32 %96, 1\l  %99 = xor i32 %98, %97\l  %100 = xor i32 %99, %96\l  %101 = xor i32 %100, %92\l  %102 = add i32 %55, 1449748\l  %103 = add i32 %101, %102\l  %104 = zext i32 %76 to i64\l  %105 = zext i32 %85 to i64\l  %106 = shl nuw nsw i64 %105, 21\l  %107 = xor i64 %106, %104\l  %108 = uitofp i64 %107 to double\l  %109 = fmul contract double %108, 0x3CA0000000000000\l  %110 = fadd contract double %109, 0x3CA0000000000000\l  %111 = zext i32 %94 to i64\l  %112 = zext i32 %103 to i64\l  %113 = shl nuw nsw i64 %112, 21\l  %114 = xor i64 %113, %111\l  %115 = uitofp i64 %114 to double\l  %116 = fmul contract double %115, 0x3CB0000000000000\l  %117 = fadd contract double %116, 0x3CB0000000000000\l  %118 = tail call double @llvm.amdgcn.frexp.mant.f64(double %110)\l  %119 = fcmp olt double %118, 0x3FE5555555555555\l  %120 = zext i1 %119 to i32\l  %121 = tail call double @llvm.amdgcn.ldexp.f64(double %118, i32 %120)\l  %122 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %110)\l  %123 = sub nsw i32 %122, %120\l  %124 = fadd double %121, -1.000000e+00\l  %125 = fadd double %121, 1.000000e+00\l  %126 = fadd double %125, -1.000000e+00\l  %127 = fsub double %121, %126\l  %128 = tail call double @llvm.amdgcn.rcp.f64(double %125)\l  %129 = fneg double %125\l  %130 = tail call double @llvm.fma.f64(double %129, double %128, double\l... 1.000000e+00)\l  %131 = tail call double @llvm.fma.f64(double %130, double %128, double %128)\l  %132 = tail call double @llvm.fma.f64(double %129, double %131, double\l... 1.000000e+00)\l  %133 = tail call double @llvm.fma.f64(double %132, double %131, double %131)\l  %134 = fmul double %124, %133\l  %135 = fmul double %125, %134\l  %136 = fneg double %135\l  %137 = tail call double @llvm.fma.f64(double %134, double %125, double %136)\l  %138 = tail call double @llvm.fma.f64(double %134, double %127, double %137)\l  %139 = fadd double %135, %138\l  %140 = fsub double %139, %135\l  %141 = fsub double %138, %140\l  %142 = fsub double %124, %139\l  %143 = fsub double %124, %142\l  %144 = fsub double %143, %139\l  %145 = fsub double %144, %141\l  %146 = fadd double %142, %145\l  %147 = fmul double %133, %146\l  %148 = fadd double %134, %147\l  %149 = fsub double %148, %134\l  %150 = fsub double %147, %149\l  %151 = fmul double %148, %148\l  %152 = tail call double @llvm.fma.f64(double %151, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %153 = tail call double @llvm.fma.f64(double %151, double %152, double\l... 0x3FC7474DD7F4DF2E)\l  %154 = tail call double @llvm.fma.f64(double %151, double %153, double\l... 0x3FCC71C016291751)\l  %155 = tail call double @llvm.fma.f64(double %151, double %154, double\l... 0x3FD249249B27ACF1)\l  %156 = tail call double @llvm.fma.f64(double %151, double %155, double\l... 0x3FD99999998EF7B6)\l  %157 = tail call double @llvm.fma.f64(double %151, double %156, double\l... 0x3FE5555555555780)\l  %158 = tail call double @llvm.amdgcn.ldexp.f64(double %148, i32 1)\l  %159 = tail call double @llvm.amdgcn.ldexp.f64(double %150, i32 1)\l  %160 = fmul double %148, %151\l  %161 = fmul double %160, %157\l  %162 = fadd double %158, %161\l  %163 = fsub double %162, %158\l  %164 = fsub double %161, %163\l  %165 = fadd double %159, %164\l  %166 = fadd double %162, %165\l  %167 = fsub double %166, %162\l  %168 = fsub double %165, %167\l  %169 = sitofp i32 %123 to double\l  %170 = fmul double %169, 0x3FE62E42FEFA39EF\l  %171 = fneg double %170\l  %172 = tail call double @llvm.fma.f64(double %169, double\l... 0x3FE62E42FEFA39EF, double %171)\l  %173 = tail call double @llvm.fma.f64(double %169, double\l... 0x3C7ABC9E3B39803F, double %172)\l  %174 = fadd double %170, %173\l  %175 = fsub double %174, %170\l  %176 = fsub double %173, %175\l  %177 = fadd double %174, %166\l  %178 = fsub double %177, %174\l  %179 = fsub double %177, %178\l  %180 = fsub double %174, %179\l  %181 = fsub double %166, %178\l  %182 = fadd double %181, %180\l  %183 = fadd double %176, %168\l  %184 = fsub double %183, %176\l  %185 = fsub double %183, %184\l  %186 = fsub double %176, %185\l  %187 = fsub double %168, %184\l  %188 = fadd double %187, %186\l  %189 = fadd double %183, %182\l  %190 = fadd double %177, %189\l  %191 = fsub double %190, %177\l  %192 = fsub double %189, %191\l  %193 = fadd double %188, %192\l  %194 = fadd double %190, %193\l  %195 = fcmp oeq double %110, 0x7FF0000000000000\l  %196 = select i1 %195, double %110, double %194\l  %197 = fcmp oeq double %110, 0.000000e+00\l  %198 = fmul contract double %196, -2.000000e+00\l  %199 = select i1 %197, double 0x7FF0000000000000, double %198\l  %200 = fcmp olt double %199, 0x1000000000000000\l  %201 = select i1 %200, double 0x4FF0000000000000, double 1.000000e+00\l  %202 = fmul double %199, %201\l  %203 = tail call double @llvm.amdgcn.rsq.f64(double %202)\l  %204 = fmul double %202, %203\l  %205 = fmul double %203, 5.000000e-01\l  %206 = fneg double %205\l  %207 = tail call double @llvm.fma.f64(double %206, double %204, double\l... 5.000000e-01)\l  %208 = tail call double @llvm.fma.f64(double %205, double %207, double %205)\l  %209 = tail call double @llvm.fma.f64(double %204, double %207, double %204)\l  %210 = fneg double %209\l  %211 = tail call double @llvm.fma.f64(double %210, double %209, double %202)\l  %212 = tail call double @llvm.fma.f64(double %211, double %208, double %209)\l  %213 = fneg double %212\l  %214 = tail call double @llvm.fma.f64(double %213, double %212, double %202)\l  %215 = tail call double @llvm.fma.f64(double %214, double %208, double %212)\l  %216 = select i1 %200, double 0x37F0000000000000, double 1.000000e+00\l  %217 = fmul double %216, %215\l  %218 = fcmp oeq double %202, 0.000000e+00\l  %219 = fcmp oeq double %202, 0x7FF0000000000000\l  %220 = or i1 %218, %219\l  %221 = select i1 %220, double %202, double %217\l  %222 = fmul double %117, 5.000000e-01\l  %223 = tail call double @llvm.amdgcn.fract.f64(double %222)\l  %224 = tail call i1 @llvm.amdgcn.class.f64(double %222, i32 516)\l  %225 = fmul double %223, 2.000000e+00\l  %226 = select i1 %224, double 0.000000e+00, double %225\l  %227 = fcmp ogt double %117, 1.000000e+00\l  %228 = select i1 %227, double %226, double %117\l  %229 = fmul double %228, 2.000000e+00\l  %230 = tail call double @llvm.rint.f64(double %229)\l  %231 = tail call double @llvm.fma.f64(double %230, double -5.000000e-01,\l... double %228)\l  %232 = fptosi double %230 to i32\l  %233 = fmul double %231, %231\l  %234 = tail call double @llvm.fma.f64(double %233, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %235 = tail call double @llvm.fma.f64(double %233, double %234, double\l... 0x3FB50782D5F14825)\l  %236 = tail call double @llvm.fma.f64(double %233, double %235, double\l... 0xBFE32D2CCDFE9424)\l  %237 = tail call double @llvm.fma.f64(double %233, double %236, double\l... 0x400466BC67754FFF)\l  %238 = tail call double @llvm.fma.f64(double %233, double %237, double\l... 0xC014ABBCE625BE09)\l  %239 = fmul double %231, %233\l  %240 = fmul double %239, %238\l  %241 = tail call double @llvm.fma.f64(double %231, double\l... 0x400921FB54442D18, double %240)\l  %242 = tail call double @llvm.fma.f64(double %233, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %243 = tail call double @llvm.fma.f64(double %233, double %242, double\l... 0xBF9A6D1E7294BFF9)\l  %244 = tail call double @llvm.fma.f64(double %233, double %243, double\l... 0x3FCE1F5067B90B37)\l  %245 = tail call double @llvm.fma.f64(double %233, double %244, double\l... 0xBFF55D3C7E3C325B)\l  %246 = tail call double @llvm.fma.f64(double %233, double %245, double\l... 0x40103C1F081B5A67)\l  %247 = tail call double @llvm.fma.f64(double %233, double %246, double\l... 0xC013BD3CC9BE45DE)\l  %248 = tail call double @llvm.fma.f64(double %233, double %247, double\l... 1.000000e+00)\l  %249 = shl i32 %232, 30\l  %250 = and i32 %249, -2147483648\l  %251 = and i32 %232, 1\l  %252 = icmp eq i32 %251, 0\l  %253 = select i1 %252, double %241, double %248\l  %254 = bitcast double %253 to \<2 x i32\>\l  %255 = bitcast double %117 to \<2 x i32\>\l  %256 = extractelement \<2 x i32\> %255, i64 1\l  %257 = and i32 %256, -2147483648\l  %258 = extractelement \<2 x i32\> %254, i64 1\l  %259 = xor i32 %257, %258\l  %260 = xor i32 %259, %250\l  %261 = insertelement \<2 x i32\> %254, i32 %260, i64 1\l  %262 = fneg double %241\l  %263 = select i1 %252, double %248, double %262\l  %264 = bitcast double %263 to \<2 x i32\>\l  %265 = extractelement \<2 x i32\> %264, i64 1\l  %266 = xor i32 %265, %250\l  %267 = insertelement \<2 x i32\> %264, i32 %266, i64 1\l  %268 = tail call i1 @llvm.amdgcn.class.f64(double %117, i32 516)\l  %269 = select i1 %268, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %267\l  %270 = select i1 %268, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %261\l  %271 = bitcast \<2 x i32\> %270 to double\l  %272 = bitcast \<2 x i32\> %269 to double\l  %273 = fmul contract double %221, %271\l  %274 = fmul contract double %221, %272\l  %275 = sext i32 %54 to i64\l  %276 = getelementptr inbounds double, double addrspace(1)* %0, i64 %275\l  %277 = load double, double addrspace(1)* %276, align 8, !tbaa !11\l  br label %278\l}"];
	Node0x4b75380 -> Node0x4b741b0;
	Node0x4b741b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%278:\l278:                                              \l  %279 = phi double [ %277, %67 ], [ %52, %64 ]\l  %280 = phi i32 [ %83, %67 ], [ %62, %64 ]\l  %281 = phi i32 [ %74, %67 ], [ %61, %64 ]\l  %282 = phi i32 [ %56, %67 ], [ %60, %64 ]\l  %283 = phi double [ %274, %67 ], [ %59, %64 ]\l  %284 = phi i32 [ %92, %67 ], [ %58, %64 ]\l  %285 = phi i32 [ 1, %67 ], [ 0, %64 ]\l  %286 = phi i32 [ %101, %67 ], [ %56, %64 ]\l  %287 = phi i32 [ %102, %67 ], [ %55, %64 ]\l  %288 = phi double [ %273, %67 ], [ %66, %64 ]\l  %289 = fmul contract double %50, %288\l  %290 = fadd contract double %279, %289\l  %291 = sext i32 %53 to i64\l  %292 = getelementptr inbounds double, double addrspace(1)* %0, i64 %291\l  store double %290, double addrspace(1)* %292, align 8, !tbaa !11\l  %293 = add nsw i32 %53, 1\l  %294 = icmp slt i32 %293, %22\l  br i1 %294, label %51, label %295, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b741b0:s0 -> Node0x4b740b0;
	Node0x4b741b0:s1 -> Node0x4b713f0;
	Node0x4b713f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%295:\l295:                                              \l  ret void\l}"];
}
