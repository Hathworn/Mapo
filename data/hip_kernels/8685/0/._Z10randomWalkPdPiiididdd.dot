digraph "CFG for '_Z10randomWalkPdPiiididdd' function" {
	label="CFG for '_Z10randomWalkPdPiiididdd' function";

	Node0x59b29d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = add i32 %17, %10\l  %19 = icmp slt i32 %18, %5\l  br i1 %19, label %20, label %338\l|{<s0>T|<s1>F}}"];
	Node0x59b29d0:s0 -> Node0x59b5460;
	Node0x59b29d0:s1 -> Node0x59b54f0;
	Node0x59b5460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%20:\l20:                                               \l  %21 = uitofp i32 %11 to double\l  %22 = fmul contract double %8, 1.000000e+03\l  %23 = fmul contract double %22, %21\l  %24 = uitofp i32 %10 to double\l  %25 = fadd contract double %23, %24\l  %26 = tail call i64 @llvm.amdgcn.s.memtime()\l  %27 = sitofp i64 %26 to double\l  %28 = fadd contract double %25, %27\l  %29 = fptoui double %28 to i64\l  %30 = trunc i64 %29 to i32\l  %31 = xor i32 %30, 746559103\l  %32 = lshr i64 %29, 32\l  %33 = trunc i64 %32 to i32\l  %34 = xor i32 %33, -1607034933\l  %35 = mul i32 %31, 1228688033\l  %36 = mul i32 %34, 2073658381\l  %37 = mul i32 %18, %3\l  %38 = sext i32 %18 to i64\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %38\l  store i32 0, i32 addrspace(1)* %39, align 4, !tbaa !7\l  %40 = sext i32 %37 to i64\l  %41 = getelementptr inbounds double, double addrspace(1)* %0, i64 %40\l  store double 0.000000e+00, double addrspace(1)* %41, align 8, !tbaa !11\l  %42 = add nsw i32 %37, %3\l  %43 = icmp sgt i32 %3, 1\l  br i1 %43, label %44, label %338\l|{<s0>T|<s1>F}}"];
	Node0x59b5460:s0 -> Node0x59b73e0;
	Node0x59b5460:s1 -> Node0x59b54f0;
	Node0x59b73e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%44:\l44:                                               \l  %45 = add nsw i32 %37, 1\l  %46 = add i32 %35, 6615241\l  %47 = add i32 %46, %36\l  %48 = add i32 %35, 5783321\l  %49 = xor i32 %36, 88675123\l  %50 = add i32 %36, 521288629\l  %51 = xor i32 %35, 362436069\l  %52 = add i32 %35, 123456789\l  %53 = sitofp i32 %2 to double\l  %54 = sitofp i32 %3 to double\l  %55 = fdiv contract double %53, %54\l  %56 = fmul contract double %55, %4\l  %57 = fcmp olt double %55, 0x1000000000000000\l  %58 = select i1 %57, double 0x4FF0000000000000, double 1.000000e+00\l  %59 = fmul double %55, %58\l  %60 = tail call double @llvm.amdgcn.rsq.f64(double %59)\l  %61 = fmul double %59, %60\l  %62 = fmul double %60, 5.000000e-01\l  %63 = fneg double %62\l  %64 = tail call double @llvm.fma.f64(double %63, double %61, double\l... 5.000000e-01)\l  %65 = tail call double @llvm.fma.f64(double %62, double %64, double %62)\l  %66 = tail call double @llvm.fma.f64(double %61, double %64, double %61)\l  %67 = fneg double %66\l  %68 = tail call double @llvm.fma.f64(double %67, double %66, double %59)\l  %69 = tail call double @llvm.fma.f64(double %68, double %65, double %66)\l  %70 = fneg double %69\l  %71 = tail call double @llvm.fma.f64(double %70, double %69, double %59)\l  %72 = tail call double @llvm.fma.f64(double %71, double %65, double %69)\l  %73 = select i1 %57, double 0x37F0000000000000, double 1.000000e+00\l  %74 = fmul double %73, %72\l  %75 = fcmp oeq double %59, 0.000000e+00\l  %76 = fcmp oeq double %59, 0x7FF0000000000000\l  %77 = or i1 %75, %76\l  %78 = select i1 %77, double %59, double %74\l  br label %79\l}"];
	Node0x59b73e0 -> Node0x59b9410;
	Node0x59b9410 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%79:\l79:                                               \l  %80 = phi double [ 0.000000e+00, %44 ], [ %320, %334 ]\l  %81 = phi i32 [ %45, %44 ], [ %336, %334 ]\l  %82 = phi i32 [ %37, %44 ], [ %81, %334 ]\l  %83 = phi i1 [ false, %44 ], [ %335, %334 ]\l  %84 = phi i32 [ %47, %44 ], [ %316, %334 ]\l  %85 = phi i32 [ %48, %44 ], [ %315, %334 ]\l  %86 = phi i32 [ 0, %44 ], [ %314, %334 ]\l  %87 = phi i32 [ %49, %44 ], [ %313, %334 ]\l  %88 = phi double [ undef, %44 ], [ %312, %334 ]\l  %89 = phi i32 [ %52, %44 ], [ %311, %334 ]\l  %90 = phi i32 [ %51, %44 ], [ %310, %334 ]\l  %91 = phi i32 [ %50, %44 ], [ %309, %334 ]\l  %92 = icmp eq i32 %86, 0\l  br i1 %92, label %96, label %93\l|{<s0>T|<s1>F}}"];
	Node0x59b9410:s0 -> Node0x59ba6e0;
	Node0x59b9410:s1 -> Node0x59ba770;
	Node0x59ba770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%93:\l93:                                               \l  %94 = fptrunc double %88 to float\l  %95 = fpext float %94 to double\l  br label %307\l}"];
	Node0x59ba770 -> Node0x59ba990;
	Node0x59ba6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%96:\l96:                                               \l  %97 = lshr i32 %89, 2\l  %98 = xor i32 %97, %89\l  %99 = shl i32 %85, 4\l  %100 = shl i32 %98, 1\l  %101 = xor i32 %100, %99\l  %102 = xor i32 %101, %98\l  %103 = xor i32 %102, %85\l  %104 = add i32 %84, 362437\l  %105 = add i32 %104, %103\l  %106 = lshr i32 %90, 2\l  %107 = xor i32 %106, %90\l  %108 = shl i32 %103, 4\l  %109 = shl i32 %107, 1\l  %110 = xor i32 %109, %108\l  %111 = xor i32 %110, %107\l  %112 = xor i32 %111, %103\l  %113 = add i32 %84, 724874\l  %114 = add i32 %113, %112\l  %115 = lshr i32 %91, 2\l  %116 = xor i32 %115, %91\l  %117 = shl i32 %112, 4\l  %118 = shl i32 %116, 1\l  %119 = xor i32 %118, %117\l  %120 = xor i32 %119, %116\l  %121 = xor i32 %120, %112\l  %122 = add i32 %84, 1087311\l  %123 = add i32 %122, %121\l  %124 = lshr i32 %87, 2\l  %125 = xor i32 %124, %87\l  %126 = shl i32 %121, 4\l  %127 = shl i32 %125, 1\l  %128 = xor i32 %127, %126\l  %129 = xor i32 %128, %125\l  %130 = xor i32 %129, %121\l  %131 = add i32 %84, 1449748\l  %132 = add i32 %130, %131\l  %133 = zext i32 %105 to i64\l  %134 = zext i32 %114 to i64\l  %135 = shl nuw nsw i64 %134, 21\l  %136 = xor i64 %135, %133\l  %137 = uitofp i64 %136 to double\l  %138 = fmul contract double %137, 0x3CA0000000000000\l  %139 = fadd contract double %138, 0x3CA0000000000000\l  %140 = zext i32 %123 to i64\l  %141 = zext i32 %132 to i64\l  %142 = shl nuw nsw i64 %141, 21\l  %143 = xor i64 %142, %140\l  %144 = uitofp i64 %143 to double\l  %145 = fmul contract double %144, 0x3CB0000000000000\l  %146 = fadd contract double %145, 0x3CB0000000000000\l  %147 = tail call double @llvm.amdgcn.frexp.mant.f64(double %139)\l  %148 = fcmp olt double %147, 0x3FE5555555555555\l  %149 = zext i1 %148 to i32\l  %150 = tail call double @llvm.amdgcn.ldexp.f64(double %147, i32 %149)\l  %151 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %139)\l  %152 = sub nsw i32 %151, %149\l  %153 = fadd double %150, -1.000000e+00\l  %154 = fadd double %150, 1.000000e+00\l  %155 = fadd double %154, -1.000000e+00\l  %156 = fsub double %150, %155\l  %157 = tail call double @llvm.amdgcn.rcp.f64(double %154)\l  %158 = fneg double %154\l  %159 = tail call double @llvm.fma.f64(double %158, double %157, double\l... 1.000000e+00)\l  %160 = tail call double @llvm.fma.f64(double %159, double %157, double %157)\l  %161 = tail call double @llvm.fma.f64(double %158, double %160, double\l... 1.000000e+00)\l  %162 = tail call double @llvm.fma.f64(double %161, double %160, double %160)\l  %163 = fmul double %153, %162\l  %164 = fmul double %154, %163\l  %165 = fneg double %164\l  %166 = tail call double @llvm.fma.f64(double %163, double %154, double %165)\l  %167 = tail call double @llvm.fma.f64(double %163, double %156, double %166)\l  %168 = fadd double %164, %167\l  %169 = fsub double %168, %164\l  %170 = fsub double %167, %169\l  %171 = fsub double %153, %168\l  %172 = fsub double %153, %171\l  %173 = fsub double %172, %168\l  %174 = fsub double %173, %170\l  %175 = fadd double %171, %174\l  %176 = fmul double %162, %175\l  %177 = fadd double %163, %176\l  %178 = fsub double %177, %163\l  %179 = fsub double %176, %178\l  %180 = fmul double %177, %177\l  %181 = tail call double @llvm.fma.f64(double %180, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %182 = tail call double @llvm.fma.f64(double %180, double %181, double\l... 0x3FC7474DD7F4DF2E)\l  %183 = tail call double @llvm.fma.f64(double %180, double %182, double\l... 0x3FCC71C016291751)\l  %184 = tail call double @llvm.fma.f64(double %180, double %183, double\l... 0x3FD249249B27ACF1)\l  %185 = tail call double @llvm.fma.f64(double %180, double %184, double\l... 0x3FD99999998EF7B6)\l  %186 = tail call double @llvm.fma.f64(double %180, double %185, double\l... 0x3FE5555555555780)\l  %187 = tail call double @llvm.amdgcn.ldexp.f64(double %177, i32 1)\l  %188 = tail call double @llvm.amdgcn.ldexp.f64(double %179, i32 1)\l  %189 = fmul double %177, %180\l  %190 = fmul double %189, %186\l  %191 = fadd double %187, %190\l  %192 = fsub double %191, %187\l  %193 = fsub double %190, %192\l  %194 = fadd double %188, %193\l  %195 = fadd double %191, %194\l  %196 = fsub double %195, %191\l  %197 = fsub double %194, %196\l  %198 = sitofp i32 %152 to double\l  %199 = fmul double %198, 0x3FE62E42FEFA39EF\l  %200 = fneg double %199\l  %201 = tail call double @llvm.fma.f64(double %198, double\l... 0x3FE62E42FEFA39EF, double %200)\l  %202 = tail call double @llvm.fma.f64(double %198, double\l... 0x3C7ABC9E3B39803F, double %201)\l  %203 = fadd double %199, %202\l  %204 = fsub double %203, %199\l  %205 = fsub double %202, %204\l  %206 = fadd double %203, %195\l  %207 = fsub double %206, %203\l  %208 = fsub double %206, %207\l  %209 = fsub double %203, %208\l  %210 = fsub double %195, %207\l  %211 = fadd double %210, %209\l  %212 = fadd double %205, %197\l  %213 = fsub double %212, %205\l  %214 = fsub double %212, %213\l  %215 = fsub double %205, %214\l  %216 = fsub double %197, %213\l  %217 = fadd double %216, %215\l  %218 = fadd double %212, %211\l  %219 = fadd double %206, %218\l  %220 = fsub double %219, %206\l  %221 = fsub double %218, %220\l  %222 = fadd double %217, %221\l  %223 = fadd double %219, %222\l  %224 = fcmp oeq double %139, 0x7FF0000000000000\l  %225 = select i1 %224, double %139, double %223\l  %226 = fcmp oeq double %139, 0.000000e+00\l  %227 = fmul contract double %225, -2.000000e+00\l  %228 = select i1 %226, double 0x7FF0000000000000, double %227\l  %229 = fcmp olt double %228, 0x1000000000000000\l  %230 = select i1 %229, double 0x4FF0000000000000, double 1.000000e+00\l  %231 = fmul double %228, %230\l  %232 = tail call double @llvm.amdgcn.rsq.f64(double %231)\l  %233 = fmul double %231, %232\l  %234 = fmul double %232, 5.000000e-01\l  %235 = fneg double %234\l  %236 = tail call double @llvm.fma.f64(double %235, double %233, double\l... 5.000000e-01)\l  %237 = tail call double @llvm.fma.f64(double %234, double %236, double %234)\l  %238 = tail call double @llvm.fma.f64(double %233, double %236, double %233)\l  %239 = fneg double %238\l  %240 = tail call double @llvm.fma.f64(double %239, double %238, double %231)\l  %241 = tail call double @llvm.fma.f64(double %240, double %237, double %238)\l  %242 = fneg double %241\l  %243 = tail call double @llvm.fma.f64(double %242, double %241, double %231)\l  %244 = tail call double @llvm.fma.f64(double %243, double %237, double %241)\l  %245 = select i1 %229, double 0x37F0000000000000, double 1.000000e+00\l  %246 = fmul double %245, %244\l  %247 = fcmp oeq double %231, 0.000000e+00\l  %248 = fcmp oeq double %231, 0x7FF0000000000000\l  %249 = or i1 %247, %248\l  %250 = select i1 %249, double %231, double %246\l  %251 = fmul double %146, 5.000000e-01\l  %252 = tail call double @llvm.amdgcn.fract.f64(double %251)\l  %253 = tail call i1 @llvm.amdgcn.class.f64(double %251, i32 516)\l  %254 = fmul double %252, 2.000000e+00\l  %255 = select i1 %253, double 0.000000e+00, double %254\l  %256 = fcmp ogt double %146, 1.000000e+00\l  %257 = select i1 %256, double %255, double %146\l  %258 = fmul double %257, 2.000000e+00\l  %259 = tail call double @llvm.rint.f64(double %258)\l  %260 = tail call double @llvm.fma.f64(double %259, double -5.000000e-01,\l... double %257)\l  %261 = fptosi double %259 to i32\l  %262 = fmul double %260, %260\l  %263 = tail call double @llvm.fma.f64(double %262, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %264 = tail call double @llvm.fma.f64(double %262, double %263, double\l... 0x3FB50782D5F14825)\l  %265 = tail call double @llvm.fma.f64(double %262, double %264, double\l... 0xBFE32D2CCDFE9424)\l  %266 = tail call double @llvm.fma.f64(double %262, double %265, double\l... 0x400466BC67754FFF)\l  %267 = tail call double @llvm.fma.f64(double %262, double %266, double\l... 0xC014ABBCE625BE09)\l  %268 = fmul double %260, %262\l  %269 = fmul double %268, %267\l  %270 = tail call double @llvm.fma.f64(double %260, double\l... 0x400921FB54442D18, double %269)\l  %271 = tail call double @llvm.fma.f64(double %262, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %272 = tail call double @llvm.fma.f64(double %262, double %271, double\l... 0xBF9A6D1E7294BFF9)\l  %273 = tail call double @llvm.fma.f64(double %262, double %272, double\l... 0x3FCE1F5067B90B37)\l  %274 = tail call double @llvm.fma.f64(double %262, double %273, double\l... 0xBFF55D3C7E3C325B)\l  %275 = tail call double @llvm.fma.f64(double %262, double %274, double\l... 0x40103C1F081B5A67)\l  %276 = tail call double @llvm.fma.f64(double %262, double %275, double\l... 0xC013BD3CC9BE45DE)\l  %277 = tail call double @llvm.fma.f64(double %262, double %276, double\l... 1.000000e+00)\l  %278 = shl i32 %261, 30\l  %279 = and i32 %278, -2147483648\l  %280 = and i32 %261, 1\l  %281 = icmp eq i32 %280, 0\l  %282 = select i1 %281, double %270, double %277\l  %283 = bitcast double %282 to \<2 x i32\>\l  %284 = bitcast double %146 to \<2 x i32\>\l  %285 = extractelement \<2 x i32\> %284, i64 1\l  %286 = and i32 %285, -2147483648\l  %287 = extractelement \<2 x i32\> %283, i64 1\l  %288 = xor i32 %286, %287\l  %289 = xor i32 %288, %279\l  %290 = insertelement \<2 x i32\> %283, i32 %289, i64 1\l  %291 = fneg double %270\l  %292 = select i1 %281, double %277, double %291\l  %293 = bitcast double %292 to \<2 x i32\>\l  %294 = extractelement \<2 x i32\> %293, i64 1\l  %295 = xor i32 %294, %279\l  %296 = insertelement \<2 x i32\> %293, i32 %295, i64 1\l  %297 = tail call i1 @llvm.amdgcn.class.f64(double %146, i32 516)\l  %298 = select i1 %297, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %296\l  %299 = select i1 %297, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %290\l  %300 = bitcast \<2 x i32\> %299 to double\l  %301 = bitcast \<2 x i32\> %298 to double\l  %302 = fmul contract double %250, %300\l  %303 = fmul contract double %250, %301\l  %304 = sext i32 %82 to i64\l  %305 = getelementptr inbounds double, double addrspace(1)* %0, i64 %304\l  %306 = load double, double addrspace(1)* %305, align 8, !tbaa !11\l  br label %307\l}"];
	Node0x59ba6e0 -> Node0x59ba990;
	Node0x59ba990 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%307:\l307:                                              \l  %308 = phi double [ %306, %96 ], [ %80, %93 ]\l  %309 = phi i32 [ %112, %96 ], [ %91, %93 ]\l  %310 = phi i32 [ %103, %96 ], [ %90, %93 ]\l  %311 = phi i32 [ %85, %96 ], [ %89, %93 ]\l  %312 = phi double [ %303, %96 ], [ %88, %93 ]\l  %313 = phi i32 [ %121, %96 ], [ %87, %93 ]\l  %314 = phi i32 [ 1, %96 ], [ 0, %93 ]\l  %315 = phi i32 [ %130, %96 ], [ %85, %93 ]\l  %316 = phi i32 [ %131, %96 ], [ %84, %93 ]\l  %317 = phi double [ %302, %96 ], [ %95, %93 ]\l  %318 = fadd contract double %56, %308\l  %319 = fmul contract double %78, %317\l  %320 = fadd contract double %319, %318\l  %321 = sext i32 %81 to i64\l  %322 = getelementptr inbounds double, double addrspace(1)* %0, i64 %321\l  store double %320, double addrspace(1)* %322, align 8, !tbaa !11\l  %323 = fcmp contract ult double %320, %7\l  %324 = select i1 %83, i1 true, i1 %323\l  br i1 %324, label %327, label %325\l|{<s0>T|<s1>F}}"];
	Node0x59ba990:s0 -> Node0x59c71a0;
	Node0x59ba990:s1 -> Node0x59c71f0;
	Node0x59c71f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%325:\l325:                                              \l  %326 = sub nsw i32 %81, %37\l  br label %332\l}"];
	Node0x59c71f0 -> Node0x59c7380;
	Node0x59c71a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%327:\l327:                                              \l  br i1 %83, label %334, label %328\l|{<s0>T|<s1>F}}"];
	Node0x59c71a0:s0 -> Node0x59b9510;
	Node0x59c71a0:s1 -> Node0x59c7440;
	Node0x59c7440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%328:\l328:                                              \l  %329 = fcmp contract ugt double %320, %6\l  br i1 %329, label %334, label %330\l|{<s0>T|<s1>F}}"];
	Node0x59c7440:s0 -> Node0x59b9510;
	Node0x59c7440:s1 -> Node0x59c75d0;
	Node0x59c75d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%330:\l330:                                              \l  %331 = sub i32 %37, %81\l  br label %332\l}"];
	Node0x59c75d0 -> Node0x59c7380;
	Node0x59c7380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%332:\l332:                                              \l  %333 = phi i32 [ %326, %325 ], [ %331, %330 ]\l  store i32 %333, i32 addrspace(1)* %39, align 4, !tbaa !7\l  br label %334\l}"];
	Node0x59c7380 -> Node0x59b9510;
	Node0x59b9510 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%334:\l334:                                              \l  %335 = phi i1 [ true, %327 ], [ false, %328 ], [ true, %332 ]\l  %336 = add nsw i32 %81, 1\l  %337 = icmp slt i32 %336, %42\l  br i1 %337, label %79, label %338, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x59b9510:s0 -> Node0x59b9410;
	Node0x59b9510:s1 -> Node0x59b54f0;
	Node0x59b54f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%338:\l338:                                              \l  ret void\l}"];
}
