digraph "CFG for '_Z8convolveiiiPf' function" {
	label="CFG for '_Z8convolveiiiPf' function";

	Node0x5ad9270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp slt i32 %21, %1\l  %23 = icmp slt i32 %13, %0\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5ad9270:s0 -> Node0x5adc6c0;
	Node0x5ad9270:s1 -> Node0x5adc750;
	Node0x5adc6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%25:\l25:                                               \l  %26 = sub i32 0, %2\l  %27 = icmp slt i32 %2, 0\l  br i1 %27, label %102, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5adc6c0:s0 -> Node0x5adc9b0;
	Node0x5adc6c0:s1 -> Node0x5adca00;
	Node0x5adca00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%28:\l28:                                               \l  %29 = load %struct.__hip_texture*, %struct.__hip_texture* addrspace(1)*\l... getelementptr inbounds (%struct.texture, %struct.texture addrspace(1)*\l... @tex_img, i64 0, i32 0, i32 11), align 8\l  %30 = bitcast %struct.__hip_texture* %29 to i32*\l  %31 = addrspacecast i32* %30 to i32 addrspace(4)*\l  %32 = getelementptr inbounds i32, i32 addrspace(4)* %31, i64 12\l  %33 = getelementptr inbounds i32, i32 addrspace(4)* %31, i64 10\l  %34 = getelementptr inbounds i32, i32 addrspace(4)* %31, i64 2\l  %35 = getelementptr inbounds i32, i32 addrspace(4)* %31, i64 14\l  %36 = bitcast i32 addrspace(4)* %32 to \<4 x i32\> addrspace(4)*\l  %37 = bitcast %struct.__hip_texture* %29 to \<8 x i32\>*\l  %38 = addrspacecast \<8 x i32\>* %37 to \<8 x i32\> addrspace(4)*\l  %39 = load %struct.__hip_texture*, %struct.__hip_texture* addrspace(1)*\l... getelementptr inbounds (%struct.texture, %struct.texture addrspace(1)*\l... @tex_kernel, i64 0, i32 0, i32 11), align 8\l  %40 = bitcast %struct.__hip_texture* %39 to i32*\l  %41 = addrspacecast i32* %40 to i32 addrspace(4)*\l  %42 = getelementptr inbounds i32, i32 addrspace(4)* %41, i64 12\l  %43 = getelementptr inbounds i32, i32 addrspace(4)* %41, i64 10\l  %44 = getelementptr inbounds i32, i32 addrspace(4)* %41, i64 2\l  %45 = getelementptr inbounds i32, i32 addrspace(4)* %41, i64 14\l  %46 = bitcast i32 addrspace(4)* %42 to \<4 x i32\> addrspace(4)*\l  %47 = bitcast %struct.__hip_texture* %39 to \<8 x i32\>*\l  %48 = addrspacecast \<8 x i32\>* %47 to \<8 x i32\> addrspace(4)*\l  %49 = load i32, i32 addrspace(4)* %33, align 4, !tbaa !7\l  %50 = uitofp i32 %49 to float\l  %51 = load i32, i32 addrspace(4)* %34, align 4, !tbaa !7\l  %52 = lshr i32 %51, 14\l  %53 = and i32 %52, 16383\l  %54 = add nuw nsw i32 %53, 1\l  %55 = uitofp i32 %54 to float\l  %56 = load i32, i32 addrspace(4)* %32, align 4, !tbaa !7\l  %57 = and i32 %56, 32768\l  %58 = icmp eq i32 %57, 0\l  %59 = select i1 %58, float %50, float 1.000000e+00\l  %60 = select i1 %58, float %55, float 1.000000e+00\l  %61 = load i32, i32 addrspace(4)* %35, align 4, !tbaa !7\l  %62 = and i32 %61, 1048576\l  %63 = icmp eq i32 %62, 0\l  %64 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %36, align 16, !tbaa !11\l  %65 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %38, align 32, !tbaa !11\l  %66 = tail call float @llvm.amdgcn.rcp.f32(float %60)\l  %67 = tail call float @llvm.amdgcn.rcp.f32(float %59)\l  %68 = load i32, i32 addrspace(4)* %43, align 4, !tbaa !7\l  %69 = uitofp i32 %68 to float\l  %70 = load i32, i32 addrspace(4)* %44, align 4, !tbaa !7\l  %71 = lshr i32 %70, 14\l  %72 = and i32 %71, 16383\l  %73 = add nuw nsw i32 %72, 1\l  %74 = uitofp i32 %73 to float\l  %75 = load i32, i32 addrspace(4)* %42, align 4, !tbaa !7\l  %76 = and i32 %75, 32768\l  %77 = icmp eq i32 %76, 0\l  %78 = select i1 %77, float %69, float 1.000000e+00\l  %79 = select i1 %77, float %74, float 1.000000e+00\l  %80 = load i32, i32 addrspace(4)* %45, align 4, !tbaa !7\l  %81 = and i32 %80, 1048576\l  %82 = icmp eq i32 %81, 0\l  %83 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %46, align 16, !tbaa !11\l  %84 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %48, align 32, !tbaa !11\l  %85 = tail call float @llvm.amdgcn.rcp.f32(float %79)\l  %86 = tail call float @llvm.amdgcn.rcp.f32(float %78)\l  br label %87\l}"];
	Node0x5adca00 -> Node0x5ae1200;
	Node0x5ae1200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%87:\l87:                                               \l  %88 = phi float [ 0.000000e+00, %28 ], [ %129, %108 ]\l  %89 = phi i32 [ %26, %28 ], [ %109, %108 ]\l  %90 = add nsw i32 %89, %21\l  %91 = sitofp i32 %90 to float\l  %92 = fmul float %60, %91\l  %93 = tail call float @llvm.floor.f32(float %92)\l  %94 = fmul float %66, %93\l  %95 = select i1 %63, float %94, float %91\l  %96 = add nsw i32 %89, %2\l  %97 = sitofp i32 %96 to float\l  %98 = fmul float %79, %97\l  %99 = tail call float @llvm.floor.f32(float %98)\l  %100 = fmul float %85, %99\l  %101 = select i1 %82, float %100, float %97\l  br label %111\l}"];
	Node0x5ae1200 -> Node0x5ae1e40;
	Node0x5adc9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%102:\l102:                                              \l  %103 = phi float [ 0.000000e+00, %25 ], [ %129, %108 ]\l  %104 = mul nsw i32 %21, %0\l  %105 = add nsw i32 %104, %13\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %3, i64 %106\l  store float %103, float addrspace(1)* %107, align 4, !tbaa !12\l  br label %132\l}"];
	Node0x5adc9b0 -> Node0x5adc750;
	Node0x5ae1300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%108:\l108:                                              \l  %109 = add i32 %89, 1\l  %110 = icmp eq i32 %89, %2\l  br i1 %110, label %102, label %87, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5ae1300:s0 -> Node0x5adc9b0;
	Node0x5ae1300:s1 -> Node0x5ae1200;
	Node0x5ae1e40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%111:\l111:                                              \l  %112 = phi float [ %88, %87 ], [ %129, %111 ]\l  %113 = phi i32 [ %26, %87 ], [ %130, %111 ]\l  %114 = add nsw i32 %113, %13\l  %115 = sitofp i32 %114 to float\l  %116 = fmul float %59, %115\l  %117 = tail call float @llvm.floor.f32(float %116)\l  %118 = fmul float %67, %117\l  %119 = select i1 %63, float %118, float %115\l  %120 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %119, float %95, \<8 x i32\> %65, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %121 = add nsw i32 %113, %2\l  %122 = sitofp i32 %121 to float\l  %123 = fmul float %78, %122\l  %124 = tail call float @llvm.floor.f32(float %123)\l  %125 = fmul float %86, %124\l  %126 = select i1 %82, float %125, float %122\l  %127 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %126, float %101, \<8 x i32\> %84, \<4 x i32\> %83, i1 false, i32 0, i32 0)\l  %128 = fmul contract float %120, %127\l  %129 = fadd contract float %112, %128\l  %130 = add i32 %113, 1\l  %131 = icmp eq i32 %113, %2\l  br i1 %131, label %108, label %111, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5ae1e40:s0 -> Node0x5ae1300;
	Node0x5ae1e40:s1 -> Node0x5ae1e40;
	Node0x5adc750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%132:\l132:                                              \l  ret void\l}"];
}
