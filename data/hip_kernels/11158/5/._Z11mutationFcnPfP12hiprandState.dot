digraph "CFG for '_Z11mutationFcnPfP12hiprandState' function" {
	label="CFG for '_Z11mutationFcnPfP12hiprandState' function";

	Node0x63fa0d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = zext i32 %3 to i64\l  %5 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %4, i32 0, i32 0, i32 0\l  %6 = load i32, i32 addrspace(1)* %5, align 8\l  %7 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %4, i32 0, i32 0, i32 5, i64 0\l  %8 = load i32, i32 addrspace(1)* %7, align 8\l  %9 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %4, i32 0, i32 0, i32 5, i64 4\l  %10 = load i32, i32 addrspace(1)* %9, align 8\l  %11 = lshr i32 %8, 2\l  %12 = xor i32 %11, %8\l  %13 = shl i32 %10, 4\l  %14 = shl i32 %12, 1\l  %15 = xor i32 %13, %14\l  %16 = xor i32 %15, %10\l  %17 = xor i32 %16, %12\l  %18 = add i32 %6, 362437\l  %19 = add i32 %18, %17\l  %20 = uitofp i32 %19 to float\l  %21 = fmul contract float %20, 0x3DF0000000000000\l  %22 = fadd contract float %21, 0x3DF0000000000000\l  %23 = sitofp i32 %3 to float\l  %24 = fmul contract float %23, 3.750000e-01\l  %25 = fdiv contract float %24, 5.000000e+02\l  %26 = fsub contract float 5.000000e-01, %25\l  %27 = fpext float %22 to double\l  %28 = fcmp contract olt double %27, 1.000000e-02\l  br i1 %28, label %29, label %153\l|{<s0>T|<s1>F}}"];
	Node0x63fa0d0:s0 -> Node0x63fcf60;
	Node0x63fa0d0:s1 -> Node0x63fcff0;
	Node0x63fcf60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%29:\l29:                                               \l  %30 = and i32 %19, 1\l  %31 = icmp eq i32 %30, 0\l  %32 = mul nuw nsw i32 %3, 10\l  br i1 %31, label %153, label %33\l|{<s0>T|<s1>F}}"];
	Node0x63fcf60:s0 -> Node0x63fcff0;
	Node0x63fcf60:s1 -> Node0x63fbd40;
	Node0x63fbd40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%33:\l33:                                               \l  %34 = zext i32 %32 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !5\l  %37 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 0), align 16, !tbaa !5\l  %38 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 0), align 16, !tbaa !5\l  %39 = fsub contract float %37, %38\l  %40 = fmul contract float %26, %39\l  %41 = fmul contract float %22, %40\l  %42 = fadd contract float %36, %41\l  %43 = fcmp contract ule float %42, %37\l  %44 = fcmp contract uge float %42, %38\l  tail call void @llvm.assume(i1 %43)\l  tail call void @llvm.assume(i1 %44)\l  store float %42, float addrspace(1)* %35, align 4, !tbaa !5\l  %45 = or i32 %32, 1\l  %46 = zext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !5\l  %49 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 1), align 4, !tbaa !5\l  %50 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 1), align 4, !tbaa !5\l  %51 = fsub contract float %49, %50\l  %52 = fmul contract float %26, %51\l  %53 = fmul contract float %22, %52\l  %54 = fadd contract float %48, %53\l  %55 = fcmp contract ule float %54, %49\l  %56 = fcmp contract uge float %54, %50\l  tail call void @llvm.assume(i1 %55)\l  tail call void @llvm.assume(i1 %56)\l  store float %54, float addrspace(1)* %47, align 4, !tbaa !5\l  %57 = add nuw nsw i32 %32, 2\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !5\l  %61 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 2), align 8, !tbaa !5\l  %62 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 2), align 8, !tbaa !5\l  %63 = fsub contract float %61, %62\l  %64 = fmul contract float %26, %63\l  %65 = fmul contract float %22, %64\l  %66 = fadd contract float %60, %65\l  %67 = fcmp contract ule float %66, %61\l  %68 = fcmp contract uge float %66, %62\l  tail call void @llvm.assume(i1 %67)\l  tail call void @llvm.assume(i1 %68)\l  store float %66, float addrspace(1)* %59, align 4, !tbaa !5\l  %69 = add nuw nsw i32 %32, 3\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !5\l  %73 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 3), align 4, !tbaa !5\l  %74 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 3), align 4, !tbaa !5\l  %75 = fsub contract float %73, %74\l  %76 = fmul contract float %26, %75\l  %77 = fmul contract float %22, %76\l  %78 = fadd contract float %72, %77\l  %79 = fcmp contract ule float %78, %73\l  %80 = fcmp contract uge float %78, %74\l  tail call void @llvm.assume(i1 %79)\l  tail call void @llvm.assume(i1 %80)\l  store float %78, float addrspace(1)* %71, align 4, !tbaa !5\l  %81 = add nuw nsw i32 %32, 4\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !5\l  %85 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 4), align 16, !tbaa !5\l  %86 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 4), align 16, !tbaa !5\l  %87 = fsub contract float %85, %86\l  %88 = fmul contract float %26, %87\l  %89 = fmul contract float %22, %88\l  %90 = fadd contract float %84, %89\l  %91 = fcmp contract ule float %90, %85\l  %92 = fcmp contract uge float %90, %86\l  tail call void @llvm.assume(i1 %91)\l  tail call void @llvm.assume(i1 %92)\l  store float %90, float addrspace(1)* %83, align 4, !tbaa !5\l  %93 = add nuw nsw i32 %32, 5\l  %94 = zext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !5\l  %97 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 5), align 4, !tbaa !5\l  %98 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 5), align 4, !tbaa !5\l  %99 = fsub contract float %97, %98\l  %100 = fmul contract float %26, %99\l  %101 = fmul contract float %22, %100\l  %102 = fadd contract float %96, %101\l  %103 = fcmp contract ule float %102, %97\l  %104 = fcmp contract uge float %102, %98\l  tail call void @llvm.assume(i1 %103)\l  tail call void @llvm.assume(i1 %104)\l  store float %102, float addrspace(1)* %95, align 4, !tbaa !5\l  %105 = add nuw nsw i32 %32, 6\l  %106 = zext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !5\l  %109 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 6), align 8, !tbaa !5\l  %110 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 6), align 8, !tbaa !5\l  %111 = fsub contract float %109, %110\l  %112 = fmul contract float %26, %111\l  %113 = fmul contract float %22, %112\l  %114 = fadd contract float %108, %113\l  %115 = fcmp contract ule float %114, %109\l  %116 = fcmp contract uge float %114, %110\l  tail call void @llvm.assume(i1 %115)\l  tail call void @llvm.assume(i1 %116)\l  store float %114, float addrspace(1)* %107, align 4, !tbaa !5\l  %117 = add nuw nsw i32 %32, 7\l  %118 = zext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !5\l  %121 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 7), align 4, !tbaa !5\l  %122 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 7), align 4, !tbaa !5\l  %123 = fsub contract float %121, %122\l  %124 = fmul contract float %26, %123\l  %125 = fmul contract float %22, %124\l  %126 = fadd contract float %120, %125\l  %127 = fcmp contract ule float %126, %121\l  %128 = fcmp contract uge float %126, %122\l  tail call void @llvm.assume(i1 %127)\l  tail call void @llvm.assume(i1 %128)\l  store float %126, float addrspace(1)* %119, align 4, !tbaa !5\l  %129 = add nuw nsw i32 %32, 8\l  %130 = zext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !5\l  %133 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 8), align 16, !tbaa !5\l  %134 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 8), align 16, !tbaa !5\l  %135 = fsub contract float %133, %134\l  %136 = fmul contract float %26, %135\l  %137 = fmul contract float %22, %136\l  %138 = fadd contract float %132, %137\l  %139 = fcmp contract ule float %138, %133\l  %140 = fcmp contract uge float %138, %134\l  tail call void @llvm.assume(i1 %139)\l  tail call void @llvm.assume(i1 %140)\l  store float %138, float addrspace(1)* %131, align 4, !tbaa !5\l  %141 = add nuw nsw i32 %32, 9\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !5\l  %145 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_UB, i64 0, i64 9), align 4, !tbaa !5\l  %146 = load float, float addrspace(1)* getelementptr inbounds ([10 x float],\l... [10 x float] addrspace(1)* @c_LB, i64 0, i64 9), align 4, !tbaa !5\l  %147 = fsub contract float %145, %146\l  %148 = fmul contract float %26, %147\l  %149 = fmul contract float %22, %148\l  %150 = fadd contract float %144, %149\l  %151 = fcmp contract ule float %150, %145\l  %152 = fcmp contract uge float %150, %146\l  tail call void @llvm.assume(i1 %151)\l  tail call void @llvm.assume(i1 %152)\l  store float %150, float addrspace(1)* %143, align 4, !tbaa !5\l  br label %153\l}"];
	Node0x63fbd40 -> Node0x63fcff0;
	Node0x63fcff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%153:\l153:                                              \l  ret void\l}"];
}
