digraph "CFG for '_Z17valid_convolutionPfiS_iiS_ii' function" {
	label="CFG for '_Z17valid_convolutionPfiS_iiS_ii' function";

	Node0x505fdf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = add i32 %16, %9\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = add i32 %24, %18\l  %26 = icmp slt i32 %25, %6\l  %27 = icmp slt i32 %17, %7\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %166\l|{<s0>T|<s1>F}}"];
	Node0x505fdf0:s0 -> Node0x5063870;
	Node0x505fdf0:s1 -> Node0x5063900;
	Node0x5063870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %25, %7\l  %31 = add nsw i32 %30, %17\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %5, i64 %32\l  store float 0.000000e+00, float addrspace(1)* %33, align 4, !tbaa !7\l  %34 = icmp sgt i32 %1, 0\l  br i1 %34, label %35, label %166\l|{<s0>T|<s1>F}}"];
	Node0x5063870:s0 -> Node0x5064a10;
	Node0x5063870:s1 -> Node0x5063900;
	Node0x5064a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%35:\l35:                                               \l  %36 = and i32 %1, 7\l  %37 = icmp ult i32 %1, 8\l  %38 = and i32 %1, -8\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x5064a10 -> Node0x5064e20;
	Node0x5064e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%40:\l40:                                               \l  %41 = phi float [ %69, %68 ], [ 0.000000e+00, %35 ]\l  %42 = phi i32 [ %70, %68 ], [ 0, %35 ]\l  %43 = mul nsw i32 %42, %1\l  %44 = add nsw i32 %42, %25\l  %45 = mul nsw i32 %44, %3\l  %46 = add i32 %45, %17\l  br i1 %37, label %47, label %72\l|{<s0>T|<s1>F}}"];
	Node0x5064e20:s0 -> Node0x50653b0;
	Node0x5064e20:s1 -> Node0x5065440;
	Node0x50653b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%47:\l47:                                               \l  %48 = phi float [ undef, %40 ], [ %162, %72 ]\l  %49 = phi float [ %41, %40 ], [ %162, %72 ]\l  %50 = phi i32 [ 0, %40 ], [ %163, %72 ]\l  br i1 %39, label %68, label %51\l|{<s0>T|<s1>F}}"];
	Node0x50653b0:s0 -> Node0x5064f10;
	Node0x50653b0:s1 -> Node0x5065c50;
	Node0x5065c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi float [ %64, %51 ], [ %49, %47 ]\l  %53 = phi i32 [ %65, %51 ], [ %50, %47 ]\l  %54 = phi i32 [ %66, %51 ], [ 0, %47 ]\l  %55 = add nsw i32 %53, %43\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7\l  %59 = add i32 %46, %53\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7\l  %63 = fmul contract float %58, %62\l  %64 = fadd contract float %52, %63\l  store float %64, float addrspace(1)* %33, align 4, !tbaa !7\l  %65 = add nuw nsw i32 %53, 1\l  %66 = add i32 %54, 1\l  %67 = icmp eq i32 %66, %36\l  br i1 %67, label %68, label %51, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5065c50:s0 -> Node0x5064f10;
	Node0x5065c50:s1 -> Node0x5065c50;
	Node0x5064f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%68:\l68:                                               \l  %69 = phi float [ %48, %47 ], [ %64, %51 ]\l  %70 = add nuw nsw i32 %42, 1\l  %71 = icmp eq i32 %70, %1\l  br i1 %71, label %166, label %40, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5064f10:s0 -> Node0x5063900;
	Node0x5064f10:s1 -> Node0x5064e20;
	Node0x5065440 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%72:\l72:                                               \l  %73 = phi float [ %162, %72 ], [ %41, %40 ]\l  %74 = phi i32 [ %163, %72 ], [ 0, %40 ]\l  %75 = phi i32 [ %164, %72 ], [ 0, %40 ]\l  %76 = add nsw i32 %74, %43\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7\l  %80 = add i32 %46, %74\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %2, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7\l  %84 = fmul contract float %79, %83\l  %85 = fadd contract float %73, %84\l  store float %85, float addrspace(1)* %33, align 4, !tbaa !7\l  %86 = or i32 %74, 1\l  %87 = add nsw i32 %86, %43\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7\l  %91 = add i32 %46, %86\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %2, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7\l  %95 = fmul contract float %90, %94\l  %96 = fadd contract float %85, %95\l  store float %96, float addrspace(1)* %33, align 4, !tbaa !7\l  %97 = or i32 %74, 2\l  %98 = add nsw i32 %97, %43\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7\l  %102 = add i32 %46, %97\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7\l  %106 = fmul contract float %101, %105\l  %107 = fadd contract float %96, %106\l  store float %107, float addrspace(1)* %33, align 4, !tbaa !7\l  %108 = or i32 %74, 3\l  %109 = add nsw i32 %108, %43\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = add i32 %46, %108\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %2, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7\l  %117 = fmul contract float %112, %116\l  %118 = fadd contract float %107, %117\l  store float %118, float addrspace(1)* %33, align 4, !tbaa !7\l  %119 = or i32 %74, 4\l  %120 = add nsw i32 %119, %43\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7\l  %124 = add i32 %46, %119\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %2, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7\l  %128 = fmul contract float %123, %127\l  %129 = fadd contract float %118, %128\l  store float %129, float addrspace(1)* %33, align 4, !tbaa !7\l  %130 = or i32 %74, 5\l  %131 = add nsw i32 %130, %43\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7\l  %135 = add i32 %46, %130\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %2, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7\l  %139 = fmul contract float %134, %138\l  %140 = fadd contract float %129, %139\l  store float %140, float addrspace(1)* %33, align 4, !tbaa !7\l  %141 = or i32 %74, 6\l  %142 = add nsw i32 %141, %43\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7\l  %146 = add i32 %46, %141\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %2, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7\l  %150 = fmul contract float %145, %149\l  %151 = fadd contract float %140, %150\l  store float %151, float addrspace(1)* %33, align 4, !tbaa !7\l  %152 = or i32 %74, 7\l  %153 = add nsw i32 %152, %43\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7\l  %157 = add i32 %46, %152\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %2, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !7\l  %161 = fmul contract float %156, %160\l  %162 = fadd contract float %151, %161\l  store float %162, float addrspace(1)* %33, align 4, !tbaa !7\l  %163 = add nuw nsw i32 %74, 8\l  %164 = add i32 %75, 8\l  %165 = icmp eq i32 %164, %38\l  br i1 %165, label %47, label %72, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5065440:s0 -> Node0x50653b0;
	Node0x5065440:s1 -> Node0x5065440;
	Node0x5063900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%166:\l166:                                              \l  ret void\l}"];
}
