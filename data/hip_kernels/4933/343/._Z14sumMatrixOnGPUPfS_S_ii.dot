digraph "CFG for '_Z14sumMatrixOnGPUPfS_S_ii' function" {
	label="CFG for '_Z14sumMatrixOnGPUPfS_S_ii' function";

	Node0x4fc64d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp ult i32 %14, %3\l  %24 = icmp ult i32 %22, %4\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %320\l|{<s0>T|<s1>F}}"];
	Node0x4fc64d0:s0 -> Node0x4fc9f30;
	Node0x4fc64d0:s1 -> Node0x4fc9fc0;
	Node0x4fc9f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%26:\l26:                                               \l  %27 = mul i32 %22, %3\l  %28 = add i32 %27, %14\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %32 = tail call float @llvm.fabs.f32(float %31)\l  %33 = fcmp olt float %32, 1.310720e+05\l  br i1 %33, label %34, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4fc9f30:s0 -> Node0x4fcb330;
	Node0x4fc9f30:s1 -> Node0x4fcb380;
	Node0x4fcb330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%34:\l34:                                               \l  %35 = fmul float %32, 0x3FE45F3060000000\l  %36 = tail call float @llvm.rint.f32(float %35)\l  %37 = tail call float @llvm.fma.f32(float %36, float 0xBFF921FB40000000,\l... float %32)\l  %38 = tail call float @llvm.fma.f32(float %36, float 0xBE74442D00000000,\l... float %37)\l  %39 = tail call float @llvm.fma.f32(float %36, float 0xBCF8469880000000,\l... float %38)\l  %40 = fptosi float %36 to i32\l  %41 = bitcast float %32 to i32\l  br label %148\l}"];
	Node0x4fcb330 -> Node0x4fcbe30;
	Node0x4fcb380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%42:\l42:                                               \l  %43 = bitcast float %32 to i32\l  %44 = lshr i32 %43, 23\l  %45 = and i32 %43, 8388607\l  %46 = or i32 %45, 8388608\l  %47 = zext i32 %46 to i64\l  %48 = mul nuw nsw i64 %47, 4266746795\l  %49 = trunc i64 %48 to i32\l  %50 = lshr i64 %48, 32\l  %51 = mul nuw nsw i64 %47, 1011060801\l  %52 = add nuw nsw i64 %50, %51\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = mul nuw nsw i64 %47, 3680671129\l  %56 = add nuw nsw i64 %54, %55\l  %57 = trunc i64 %56 to i32\l  %58 = lshr i64 %56, 32\l  %59 = mul nuw nsw i64 %47, 4113882560\l  %60 = add nuw nsw i64 %58, %59\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %47, 4230436817\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %47, 1313084713\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %47, 2734261102\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = trunc i64 %74 to i32\l  %76 = add nsw i32 %44, -120\l  %77 = icmp ugt i32 %76, 63\l  %78 = select i1 %77, i32 %69, i32 %75\l  %79 = select i1 %77, i32 %65, i32 %73\l  %80 = select i1 %77, i32 %61, i32 %69\l  %81 = select i1 %77, i32 %57, i32 %65\l  %82 = select i1 %77, i32 %53, i32 %61\l  %83 = select i1 %77, i32 %49, i32 %57\l  %84 = select i1 %77, i32 -64, i32 0\l  %85 = add nsw i32 %84, %76\l  %86 = icmp ugt i32 %85, 31\l  %87 = select i1 %86, i32 %79, i32 %78\l  %88 = select i1 %86, i32 %80, i32 %79\l  %89 = select i1 %86, i32 %81, i32 %80\l  %90 = select i1 %86, i32 %82, i32 %81\l  %91 = select i1 %86, i32 %83, i32 %82\l  %92 = select i1 %86, i32 -32, i32 0\l  %93 = add nsw i32 %92, %85\l  %94 = icmp ugt i32 %93, 31\l  %95 = select i1 %94, i32 %88, i32 %87\l  %96 = select i1 %94, i32 %89, i32 %88\l  %97 = select i1 %94, i32 %90, i32 %89\l  %98 = select i1 %94, i32 %91, i32 %90\l  %99 = select i1 %94, i32 -32, i32 0\l  %100 = add nsw i32 %99, %93\l  %101 = icmp eq i32 %100, 0\l  %102 = sub nsw i32 32, %100\l  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %102)\l  %104 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %102)\l  %105 = tail call i32 @llvm.fshr.i32(i32 %97, i32 %98, i32 %102)\l  %106 = select i1 %101, i32 %95, i32 %103\l  %107 = select i1 %101, i32 %96, i32 %104\l  %108 = select i1 %101, i32 %97, i32 %105\l  %109 = lshr i32 %106, 29\l  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 2)\l  %111 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %108, i32 2)\l  %112 = tail call i32 @llvm.fshl.i32(i32 %108, i32 %98, i32 2)\l  %113 = and i32 %109, 1\l  %114 = sub nsw i32 0, %113\l  %115 = shl i32 %109, 31\l  %116 = xor i32 %110, %114\l  %117 = xor i32 %111, %114\l  %118 = xor i32 %112, %114\l  %119 = tail call i32 @llvm.ctlz.i32(i32 %116, i1 false), !range !11\l  %120 = sub nsw i32 31, %119\l  %121 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %120)\l  %122 = tail call i32 @llvm.fshr.i32(i32 %117, i32 %118, i32 %120)\l  %123 = shl nuw nsw i32 %119, 23\l  %124 = sub nuw nsw i32 1056964608, %123\l  %125 = lshr i32 %121, 9\l  %126 = or i32 %125, %124\l  %127 = or i32 %126, %115\l  %128 = bitcast i32 %127 to float\l  %129 = tail call i32 @llvm.fshl.i32(i32 %121, i32 %122, i32 23)\l  %130 = tail call i32 @llvm.ctlz.i32(i32 %129, i1 false), !range !11\l  %131 = fmul float %128, 0x3FF921FB40000000\l  %132 = add nuw nsw i32 %130, %119\l  %133 = shl nuw nsw i32 %132, 23\l  %134 = sub nuw nsw i32 855638016, %133\l  %135 = sub nsw i32 31, %130\l  %136 = tail call i32 @llvm.fshr.i32(i32 %129, i32 %122, i32 %135)\l  %137 = lshr i32 %136, 9\l  %138 = or i32 %134, %137\l  %139 = or i32 %138, %115\l  %140 = bitcast i32 %139 to float\l  %141 = fneg float %131\l  %142 = tail call float @llvm.fma.f32(float %128, float 0x3FF921FB40000000,\l... float %141)\l  %143 = tail call float @llvm.fma.f32(float %128, float 0x3E74442D00000000,\l... float %142)\l  %144 = tail call float @llvm.fma.f32(float %140, float 0x3FF921FB40000000,\l... float %143)\l  %145 = fadd float %131, %144\l  %146 = lshr i32 %106, 30\l  %147 = add nuw nsw i32 %113, %146\l  br label %148\l}"];
	Node0x4fcb380 -> Node0x4fcbe30;
	Node0x4fcbe30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%148:\l148:                                              \l  %149 = phi i32 [ %41, %34 ], [ %43, %42 ]\l  %150 = phi float [ %39, %34 ], [ %145, %42 ]\l  %151 = phi i32 [ %40, %34 ], [ %147, %42 ]\l  %152 = fmul float %150, %150\l  %153 = tail call float @llvm.fmuladd.f32(float %152, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %154 = tail call float @llvm.fmuladd.f32(float %152, float %153, float\l... 0xBFC55553A0000000)\l  %155 = fmul float %152, %154\l  %156 = tail call float @llvm.fmuladd.f32(float %150, float %155, float %150)\l  %157 = tail call float @llvm.fmuladd.f32(float %152, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %158 = tail call float @llvm.fmuladd.f32(float %152, float %157, float\l... 0x3FA5557EE0000000)\l  %159 = tail call float @llvm.fmuladd.f32(float %152, float %158, float\l... 0xBFE0000080000000)\l  %160 = tail call float @llvm.fmuladd.f32(float %152, float %159, float\l... 1.000000e+00)\l  %161 = and i32 %151, 1\l  %162 = icmp eq i32 %161, 0\l  %163 = select i1 %162, float %156, float %160\l  %164 = bitcast float %163 to i32\l  %165 = shl i32 %151, 30\l  %166 = and i32 %165, -2147483648\l  %167 = bitcast float %31 to i32\l  %168 = xor i32 %149, %167\l  %169 = xor i32 %168, %166\l  %170 = xor i32 %169, %164\l  %171 = bitcast i32 %170 to float\l  %172 = tail call i1 @llvm.amdgcn.class.f32(float %32, i32 504)\l  %173 = select i1 %172, float %171, float 0x7FF8000000000000\l  %174 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %176 = tail call float @llvm.fabs.f32(float %175)\l  %177 = fcmp olt float %176, 1.310720e+05\l  br i1 %177, label %178, label %186\l|{<s0>T|<s1>F}}"];
	Node0x4fcbe30:s0 -> Node0x4fd3bf0;
	Node0x4fcbe30:s1 -> Node0x4fd3c80;
	Node0x4fd3bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%178:\l178:                                              \l  %179 = fmul float %176, 0x3FE45F3060000000\l  %180 = tail call float @llvm.rint.f32(float %179)\l  %181 = tail call float @llvm.fma.f32(float %180, float 0xBFF921FB40000000,\l... float %176)\l  %182 = tail call float @llvm.fma.f32(float %180, float 0xBE74442D00000000,\l... float %181)\l  %183 = tail call float @llvm.fma.f32(float %180, float 0xBCF8469880000000,\l... float %182)\l  %184 = fptosi float %180 to i32\l  %185 = bitcast float %176 to i32\l  br label %292\l}"];
	Node0x4fd3bf0 -> Node0x4fd43b0;
	Node0x4fd3c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%186:\l186:                                              \l  %187 = bitcast float %176 to i32\l  %188 = lshr i32 %187, 23\l  %189 = and i32 %187, 8388607\l  %190 = or i32 %189, 8388608\l  %191 = zext i32 %190 to i64\l  %192 = mul nuw nsw i64 %191, 4266746795\l  %193 = trunc i64 %192 to i32\l  %194 = lshr i64 %192, 32\l  %195 = mul nuw nsw i64 %191, 1011060801\l  %196 = add nuw nsw i64 %194, %195\l  %197 = trunc i64 %196 to i32\l  %198 = lshr i64 %196, 32\l  %199 = mul nuw nsw i64 %191, 3680671129\l  %200 = add nuw nsw i64 %198, %199\l  %201 = trunc i64 %200 to i32\l  %202 = lshr i64 %200, 32\l  %203 = mul nuw nsw i64 %191, 4113882560\l  %204 = add nuw nsw i64 %202, %203\l  %205 = trunc i64 %204 to i32\l  %206 = lshr i64 %204, 32\l  %207 = mul nuw nsw i64 %191, 4230436817\l  %208 = add nuw nsw i64 %206, %207\l  %209 = trunc i64 %208 to i32\l  %210 = lshr i64 %208, 32\l  %211 = mul nuw nsw i64 %191, 1313084713\l  %212 = add nuw nsw i64 %210, %211\l  %213 = trunc i64 %212 to i32\l  %214 = lshr i64 %212, 32\l  %215 = mul nuw nsw i64 %191, 2734261102\l  %216 = add nuw nsw i64 %214, %215\l  %217 = trunc i64 %216 to i32\l  %218 = lshr i64 %216, 32\l  %219 = trunc i64 %218 to i32\l  %220 = add nsw i32 %188, -120\l  %221 = icmp ugt i32 %220, 63\l  %222 = select i1 %221, i32 %213, i32 %219\l  %223 = select i1 %221, i32 %209, i32 %217\l  %224 = select i1 %221, i32 %205, i32 %213\l  %225 = select i1 %221, i32 %201, i32 %209\l  %226 = select i1 %221, i32 %197, i32 %205\l  %227 = select i1 %221, i32 %193, i32 %201\l  %228 = select i1 %221, i32 -64, i32 0\l  %229 = add nsw i32 %228, %220\l  %230 = icmp ugt i32 %229, 31\l  %231 = select i1 %230, i32 %223, i32 %222\l  %232 = select i1 %230, i32 %224, i32 %223\l  %233 = select i1 %230, i32 %225, i32 %224\l  %234 = select i1 %230, i32 %226, i32 %225\l  %235 = select i1 %230, i32 %227, i32 %226\l  %236 = select i1 %230, i32 -32, i32 0\l  %237 = add nsw i32 %236, %229\l  %238 = icmp ugt i32 %237, 31\l  %239 = select i1 %238, i32 %232, i32 %231\l  %240 = select i1 %238, i32 %233, i32 %232\l  %241 = select i1 %238, i32 %234, i32 %233\l  %242 = select i1 %238, i32 %235, i32 %234\l  %243 = select i1 %238, i32 -32, i32 0\l  %244 = add nsw i32 %243, %237\l  %245 = icmp eq i32 %244, 0\l  %246 = sub nsw i32 32, %244\l  %247 = tail call i32 @llvm.fshr.i32(i32 %239, i32 %240, i32 %246)\l  %248 = tail call i32 @llvm.fshr.i32(i32 %240, i32 %241, i32 %246)\l  %249 = tail call i32 @llvm.fshr.i32(i32 %241, i32 %242, i32 %246)\l  %250 = select i1 %245, i32 %239, i32 %247\l  %251 = select i1 %245, i32 %240, i32 %248\l  %252 = select i1 %245, i32 %241, i32 %249\l  %253 = lshr i32 %250, 29\l  %254 = tail call i32 @llvm.fshl.i32(i32 %250, i32 %251, i32 2)\l  %255 = tail call i32 @llvm.fshl.i32(i32 %251, i32 %252, i32 2)\l  %256 = tail call i32 @llvm.fshl.i32(i32 %252, i32 %242, i32 2)\l  %257 = and i32 %253, 1\l  %258 = sub nsw i32 0, %257\l  %259 = shl i32 %253, 31\l  %260 = xor i32 %254, %258\l  %261 = xor i32 %255, %258\l  %262 = xor i32 %256, %258\l  %263 = tail call i32 @llvm.ctlz.i32(i32 %260, i1 false), !range !11\l  %264 = sub nsw i32 31, %263\l  %265 = tail call i32 @llvm.fshr.i32(i32 %260, i32 %261, i32 %264)\l  %266 = tail call i32 @llvm.fshr.i32(i32 %261, i32 %262, i32 %264)\l  %267 = shl nuw nsw i32 %263, 23\l  %268 = sub nuw nsw i32 1056964608, %267\l  %269 = lshr i32 %265, 9\l  %270 = or i32 %269, %268\l  %271 = or i32 %270, %259\l  %272 = bitcast i32 %271 to float\l  %273 = tail call i32 @llvm.fshl.i32(i32 %265, i32 %266, i32 23)\l  %274 = tail call i32 @llvm.ctlz.i32(i32 %273, i1 false), !range !11\l  %275 = fmul float %272, 0x3FF921FB40000000\l  %276 = add nuw nsw i32 %274, %263\l  %277 = shl nuw nsw i32 %276, 23\l  %278 = sub nuw nsw i32 855638016, %277\l  %279 = sub nsw i32 31, %274\l  %280 = tail call i32 @llvm.fshr.i32(i32 %273, i32 %266, i32 %279)\l  %281 = lshr i32 %280, 9\l  %282 = or i32 %278, %281\l  %283 = or i32 %282, %259\l  %284 = bitcast i32 %283 to float\l  %285 = fneg float %275\l  %286 = tail call float @llvm.fma.f32(float %272, float 0x3FF921FB40000000,\l... float %285)\l  %287 = tail call float @llvm.fma.f32(float %272, float 0x3E74442D00000000,\l... float %286)\l  %288 = tail call float @llvm.fma.f32(float %284, float 0x3FF921FB40000000,\l... float %287)\l  %289 = fadd float %275, %288\l  %290 = lshr i32 %250, 30\l  %291 = add nuw nsw i32 %257, %290\l  br label %292\l}"];
	Node0x4fd3c80 -> Node0x4fd43b0;
	Node0x4fd43b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%292:\l292:                                              \l  %293 = phi i32 [ %185, %178 ], [ %187, %186 ]\l  %294 = phi float [ %183, %178 ], [ %289, %186 ]\l  %295 = phi i32 [ %184, %178 ], [ %291, %186 ]\l  %296 = fmul float %294, %294\l  %297 = tail call float @llvm.fmuladd.f32(float %296, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %298 = tail call float @llvm.fmuladd.f32(float %296, float %297, float\l... 0xBFC55553A0000000)\l  %299 = fmul float %296, %298\l  %300 = tail call float @llvm.fmuladd.f32(float %294, float %299, float %294)\l  %301 = tail call float @llvm.fmuladd.f32(float %296, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %302 = tail call float @llvm.fmuladd.f32(float %296, float %301, float\l... 0x3FA5557EE0000000)\l  %303 = tail call float @llvm.fmuladd.f32(float %296, float %302, float\l... 0xBFE0000080000000)\l  %304 = tail call float @llvm.fmuladd.f32(float %296, float %303, float\l... 1.000000e+00)\l  %305 = and i32 %295, 1\l  %306 = icmp eq i32 %305, 0\l  %307 = select i1 %306, float %300, float %304\l  %308 = bitcast float %307 to i32\l  %309 = shl i32 %295, 30\l  %310 = and i32 %309, -2147483648\l  %311 = bitcast float %175 to i32\l  %312 = xor i32 %293, %311\l  %313 = xor i32 %312, %310\l  %314 = xor i32 %313, %308\l  %315 = bitcast i32 %314 to float\l  %316 = tail call i1 @llvm.amdgcn.class.f32(float %176, i32 504)\l  %317 = select i1 %316, float %315, float 0x7FF8000000000000\l  %318 = fadd contract float %173, %317\l  %319 = getelementptr inbounds float, float addrspace(1)* %2, i64 %29\l  store float %318, float addrspace(1)* %319, align 4, !tbaa !7\l  br label %320\l}"];
	Node0x4fd43b0 -> Node0x4fc9fc0;
	Node0x4fc9fc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%320:\l320:                                              \l  ret void\l}"];
}
