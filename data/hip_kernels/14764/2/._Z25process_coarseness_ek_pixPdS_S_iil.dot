digraph "CFG for '_Z25process_coarseness_ek_pixPdS_S_iil' function" {
	label="CFG for '_Z25process_coarseness_ek_pixPdS_S_iil' function";

	Node0x4f5fc60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = add i32 %14, %7\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !5, !invariant.load !6\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = add i32 %22, %16\l  %24 = trunc i64 %5 to i32\l  %25 = add i32 %23, %24\l  %26 = sub i32 %23, %24\l  %27 = add i32 %15, %24\l  %28 = sub i32 %15, %24\l  %29 = icmp slt i32 %15, %3\l  %30 = icmp slt i32 %23, %4\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %75\l|{<s0>T|<s1>F}}"];
	Node0x4f5fc60:s0 -> Node0x4f639a0;
	Node0x4f5fc60:s1 -> Node0x4f63a30;
	Node0x4f639a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%32:\l32:                                               \l  %33 = icmp slt i32 %25, %4\l  %34 = icmp sgt i32 %26, -1\l  %35 = and i1 %33, %34\l  %36 = mul nsw i32 %15, %4\l  br i1 %35, label %37, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4f639a0:s0 -> Node0x4f62370;
	Node0x4f639a0:s1 -> Node0x4f63f30;
	Node0x4f62370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%37:\l37:                                               \l  %38 = add nsw i32 %25, %36\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %0, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %42 = add nsw i32 %26, %36\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %0, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %46 = fsub contract double %41, %45\l  %47 = tail call double @llvm.fabs.f64(double %46)\l  br label %48\l}"];
	Node0x4f62370 -> Node0x4f63f30;
	Node0x4f63f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%48:\l48:                                               \l  %49 = phi double [ %47, %37 ], [ 0.000000e+00, %32 ]\l  %50 = add nsw i32 %36, %23\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %1, i64 %51\l  store double %49, double addrspace(1)* %52, align 8, !tbaa !7\l  %53 = icmp slt i32 %27, %3\l  %54 = icmp sgt i32 %28, -1\l  %55 = and i1 %53, %54\l  br i1 %55, label %56, label %69\l|{<s0>T|<s1>F}}"];
	Node0x4f63f30:s0 -> Node0x4f65e50;
	Node0x4f63f30:s1 -> Node0x4f65ee0;
	Node0x4f65e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%56:\l56:                                               \l  %57 = mul nsw i32 %27, %4\l  %58 = add nsw i32 %57, %23\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %0, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !7\l  %62 = mul nsw i32 %28, %4\l  %63 = add nsw i32 %62, %23\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %0, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !7\l  %67 = fsub contract double %61, %66\l  %68 = tail call double @llvm.fabs.f64(double %67)\l  br label %69\l}"];
	Node0x4f65e50 -> Node0x4f65ee0;
	Node0x4f65ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%69:\l69:                                               \l  %70 = phi double [ %68, %56 ], [ 0.000000e+00, %48 ]\l  %71 = mul nsw i32 %15, %4\l  %72 = add nsw i32 %71, %23\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %2, i64 %73\l  store double %70, double addrspace(1)* %74, align 8, !tbaa !7\l  br label %75\l}"];
	Node0x4f65ee0 -> Node0x4f63a30;
	Node0x4f63a30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  ret void\l}"];
}
