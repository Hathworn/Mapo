digraph "CFG for '_Z25process_coarseness_ak_pixPdS_iil' function" {
	label="CFG for '_Z25process_coarseness_ak_pixPdS_iil' function";

	Node0x4674e50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp slt i32 %14, %2\l  %24 = icmp slt i32 %22, %3\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %85\l|{<s0>T|<s1>F}}"];
	Node0x4674e50:s0 -> Node0x46788f0;
	Node0x4674e50:s1 -> Node0x4678980;
	Node0x46788f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %14, %3\l  %28 = add nsw i32 %27, %22\l  %29 = sext i32 %22 to i64\l  %30 = sext i32 %14 to i64\l  %31 = sdiv i64 %4, 2\l  %32 = sext i32 %3 to i64\l  %33 = sext i32 %2 to i64\l  %34 = sub nsw i64 %30, %31\l  %35 = sub nsw i64 %29, %31\l  %36 = add nsw i64 %31, %30\l  %37 = tail call i64 @llvm.smax.i64(i64 %35, i64 0)\l  %38 = tail call i64 @llvm.smin.i64(i64 %36, i64 %33)\l  %39 = add nsw i64 %38, -1\l  %40 = icmp slt i64 %35, 1\l  br i1 %40, label %47, label %41\l|{<s0>T|<s1>F}}"];
	Node0x46788f0:s0 -> Node0x46796e0;
	Node0x46788f0:s1 -> Node0x4679770;
	Node0x4679770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%41:\l41:                                               \l  %42 = mul nsw i64 %39, %32\l  %43 = add nsw i64 %37, -1\l  %44 = add i64 %43, %42\l  %45 = getelementptr inbounds double, double addrspace(1)* %1, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %47\l}"];
	Node0x4679770 -> Node0x46796e0;
	Node0x46796e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%47:\l47:                                               \l  %48 = phi double [ %46, %41 ], [ 0.000000e+00, %26 ]\l  %49 = icmp slt i64 %34, 1\l  br i1 %49, label %56, label %50\l|{<s0>T|<s1>F}}"];
	Node0x46796e0:s0 -> Node0x467a910;
	Node0x46796e0:s1 -> Node0x467a9a0;
	Node0x467a9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%50:\l50:                                               \l  %51 = add nsw i64 %38, -2\l  %52 = mul nsw i64 %51, %32\l  %53 = add nsw i64 %52, %37\l  %54 = getelementptr inbounds double, double addrspace(1)* %1, i64 %53\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %56\l}"];
	Node0x467a9a0 -> Node0x467a910;
	Node0x467a910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%56:\l56:                                               \l  %57 = phi i1 [ true, %47 ], [ %40, %50 ]\l  %58 = phi double [ 0.000000e+00, %47 ], [ %55, %50 ]\l  br i1 %57, label %66, label %59\l|{<s0>T|<s1>F}}"];
	Node0x467a910:s0 -> Node0x467b5b0;
	Node0x467a910:s1 -> Node0x467b600;
	Node0x467b600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%59:\l59:                                               \l  %60 = add nsw i64 %38, -2\l  %61 = mul nsw i64 %60, %32\l  %62 = add nsw i64 %37, -1\l  %63 = add i64 %62, %61\l  %64 = getelementptr inbounds double, double addrspace(1)* %1, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %66\l}"];
	Node0x467b600 -> Node0x467b5b0;
	Node0x467b5b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%66:\l66:                                               \l  %67 = phi double [ %65, %59 ], [ 0.000000e+00, %56 ]\l  %68 = add nsw i64 %31, %29\l  %69 = tail call i64 @llvm.smin.i64(i64 %68, i64 %32)\l  %70 = tail call i64 @llvm.smax.i64(i64 %34, i64 0)\l  %71 = mul nsw i64 %39, %32\l  %72 = add nsw i64 %71, %37\l  %73 = getelementptr inbounds double, double addrspace(1)* %1, i64 %72\l  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %75 = sub i64 %38, %70\l  %76 = sub i64 %69, %37\l  %77 = mul nsw i64 %76, %75\l  %78 = fsub contract double %74, %48\l  %79 = fsub contract double %78, %58\l  %80 = fadd contract double %67, %79\l  %81 = sitofp i64 %77 to double\l  %82 = fdiv contract double %80, %81\l  %83 = sext i32 %28 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %0, i64 %83\l  store double %82, double addrspace(1)* %84, align 8, !tbaa !7\l  br label %85\l}"];
	Node0x467b5b0 -> Node0x4678980;
	Node0x4678980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%85:\l85:                                               \l  ret void\l}"];
}
