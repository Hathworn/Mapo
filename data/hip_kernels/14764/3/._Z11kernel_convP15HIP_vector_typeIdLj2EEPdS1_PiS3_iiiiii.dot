digraph "CFG for '_Z11kernel_convP15HIP_vector_typeIdLj2EEPdS1_PiS3_iiiiii' function" {
	label="CFG for '_Z11kernel_convP15HIP_vector_typeIdLj2EEPdS1_PiS3_iiiiii' function";

	Node0x59d77a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !7\l  %22 = mul i32 %13, %18\l  %23 = add i32 %22, %12\l  %24 = udiv i32 %21, %18\l  %25 = mul i32 %24, %18\l  %26 = icmp ugt i32 %21, %25\l  %27 = zext i1 %26 to i32\l  %28 = add i32 %24, %27\l  %29 = mul i32 %28, %18\l  %30 = mul nsw i32 %10, %9\l  %31 = icmp slt i32 %23, %30\l  br i1 %31, label %32, label %189\l|{<s0>T|<s1>F}}"];
	Node0x59d77a0:s0 -> Node0x59da920;
	Node0x59d77a0:s1 -> Node0x59da9b0;
	Node0x59da920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%32:\l32:                                               \l  %33 = add nsw i32 %5, -1\l  %34 = add nsw i32 %6, -1\l  br label %35\l}"];
	Node0x59da920 -> Node0x59d9cc0;
	Node0x59d9cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%35:\l35:                                               \l  %36 = phi i32 [ %23, %32 ], [ %187, %186 ]\l  %37 = freeze i32 %36\l  %38 = freeze i32 %10\l  %39 = sdiv i32 %37, %38\l  %40 = mul i32 %39, %38\l  %41 = sub i32 %37, %40\l  %42 = sext i32 %39 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %42\l  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !16\l  %45 = sext i32 %41 to i64\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %45\l  %47 = load i32, i32 addrspace(1)* %46, align 4, !tbaa !16\l  %48 = sub nsw i32 %41, %34\l  %49 = tail call i32 @llvm.smax.i32(i32 %48, i32 0)\l  %50 = tail call i32 @llvm.smin.i32(i32 %34, i32 %41)\l  %51 = icmp sgt i32 %44, 0\l  br i1 %51, label %52, label %186\l|{<s0>T|<s1>F}}"];
	Node0x59d9cc0:s0 -> Node0x59dc1e0;
	Node0x59d9cc0:s1 -> Node0x59dae00;
	Node0x59dc1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%52:\l52:                                               \l  %53 = tail call i32 @llvm.smin.i32(i32 %33, i32 %39)\l  %54 = sub nsw i32 %39, %33\l  %55 = tail call i32 @llvm.smax.i32(i32 %54, i32 0)\l  %56 = icmp sgt i32 %47, 0\l  %57 = mul nsw i32 %39, %10\l  %58 = add nsw i32 %57, %41\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %59, i32 0, i32 0, i32 0, i64 0\l  %61 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %59, i32 0, i32 0, i32 0, i64 1\l  %62 = and i32 %47, 3\l  %63 = icmp ult i32 %47, 4\l  %64 = and i32 %47, -4\l  %65 = icmp eq i32 %62, 0\l  br label %66\l}"];
	Node0x59dc1e0 -> Node0x59dab80;
	Node0x59dab80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%66:\l66:                                               \l  %67 = phi i32 [ 0, %52 ], [ %184, %181 ]\l  %68 = phi i32 [ %53, %52 ], [ %183, %181 ]\l  %69 = phi i32 [ %55, %52 ], [ %182, %181 ]\l  br i1 %56, label %70, label %181\l|{<s0>T|<s1>F}}"];
	Node0x59dab80:s0 -> Node0x59dd410;
	Node0x59dab80:s1 -> Node0x59dacb0;
	Node0x59dd410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%70:\l70:                                               \l  %71 = mul nsw i32 %68, %6\l  %72 = mul nsw i32 %69, %8\l  %73 = load double, double addrspace(1)* %60, align 16, !tbaa !20\l  %74 = load double, double addrspace(1)* %61, align 8, !tbaa !20\l  br i1 %63, label %151, label %75\l|{<s0>T|<s1>F}}"];
	Node0x59dd410:s0 -> Node0x59dde90;
	Node0x59dd410:s1 -> Node0x59ddf20;
	Node0x59ddf20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%75:\l75:                                               \l  %76 = phi double [ %146, %75 ], [ %74, %70 ]\l  %77 = phi double [ %141, %75 ], [ %73, %70 ]\l  %78 = phi i32 [ %148, %75 ], [ %50, %70 ]\l  %79 = phi i32 [ %147, %75 ], [ %49, %70 ]\l  %80 = phi i32 [ %149, %75 ], [ 0, %70 ]\l  %81 = add nsw i32 %78, %71\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds double, double addrspace(1)* %1, i64 %82\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !21\l  %85 = add nsw i32 %79, %72\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %86, i32 0, i32 0, i32 0, i64 0\l  %88 = load double, double addrspace(1)* %87, align 16, !tbaa !20\l  %89 = fmul contract double %84, %88\l  %90 = fadd contract double %77, %89\l  store double %90, double addrspace(1)* %60, align 16, !tbaa !20\l  %91 = load double, double addrspace(1)* %83, align 8, !tbaa !21\l  %92 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %86, i32 0, i32 0, i32 0, i64 1\l  %93 = load double, double addrspace(1)* %92, align 8, !tbaa !20\l  %94 = fmul contract double %91, %93\l  %95 = fadd contract double %76, %94\l  store double %95, double addrspace(1)* %61, align 8, !tbaa !20\l  %96 = add nuw nsw i32 %79, 1\l  %97 = add nsw i32 %78, -1\l  %98 = add nsw i32 %97, %71\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %1, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !21\l  %102 = add nsw i32 %96, %72\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %103, i32 0, i32 0, i32 0, i64 0\l  %105 = load double, double addrspace(1)* %104, align 16, !tbaa !20\l  %106 = fmul contract double %101, %105\l  %107 = fadd contract double %90, %106\l  store double %107, double addrspace(1)* %60, align 16, !tbaa !20\l  %108 = load double, double addrspace(1)* %100, align 8, !tbaa !21\l  %109 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %103, i32 0, i32 0, i32 0, i64 1\l  %110 = load double, double addrspace(1)* %109, align 8, !tbaa !20\l  %111 = fmul contract double %108, %110\l  %112 = fadd contract double %95, %111\l  store double %112, double addrspace(1)* %61, align 8, !tbaa !20\l  %113 = add nuw nsw i32 %79, 2\l  %114 = add nsw i32 %78, -2\l  %115 = add nsw i32 %114, %71\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds double, double addrspace(1)* %1, i64 %116\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !21\l  %119 = add nsw i32 %113, %72\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %120, i32 0, i32 0, i32 0, i64 0\l  %122 = load double, double addrspace(1)* %121, align 16, !tbaa !20\l  %123 = fmul contract double %118, %122\l  %124 = fadd contract double %107, %123\l  store double %124, double addrspace(1)* %60, align 16, !tbaa !20\l  %125 = load double, double addrspace(1)* %117, align 8, !tbaa !21\l  %126 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %120, i32 0, i32 0, i32 0, i64 1\l  %127 = load double, double addrspace(1)* %126, align 8, !tbaa !20\l  %128 = fmul contract double %125, %127\l  %129 = fadd contract double %112, %128\l  store double %129, double addrspace(1)* %61, align 8, !tbaa !20\l  %130 = add nuw nsw i32 %79, 3\l  %131 = add nsw i32 %78, -3\l  %132 = add nsw i32 %131, %71\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds double, double addrspace(1)* %1, i64 %133\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !21\l  %136 = add nsw i32 %130, %72\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %137, i32 0, i32 0, i32 0, i64 0\l  %139 = load double, double addrspace(1)* %138, align 16, !tbaa !20\l  %140 = fmul contract double %135, %139\l  %141 = fadd contract double %124, %140\l  store double %141, double addrspace(1)* %60, align 16, !tbaa !20\l  %142 = load double, double addrspace(1)* %134, align 8, !tbaa !21\l  %143 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %137, i32 0, i32 0, i32 0, i64 1\l  %144 = load double, double addrspace(1)* %143, align 8, !tbaa !20\l  %145 = fmul contract double %142, %144\l  %146 = fadd contract double %129, %145\l  store double %146, double addrspace(1)* %61, align 8, !tbaa !20\l  %147 = add nuw nsw i32 %79, 4\l  %148 = add nsw i32 %78, -4\l  %149 = add i32 %80, 4\l  %150 = icmp eq i32 %149, %64\l  br i1 %150, label %151, label %75, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x59ddf20:s0 -> Node0x59dde90;
	Node0x59ddf20:s1 -> Node0x59ddf20;
	Node0x59dde90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%151:\l151:                                              \l  %152 = phi double [ %74, %70 ], [ %146, %75 ]\l  %153 = phi double [ %73, %70 ], [ %141, %75 ]\l  %154 = phi i32 [ %50, %70 ], [ %148, %75 ]\l  %155 = phi i32 [ %49, %70 ], [ %147, %75 ]\l  br i1 %65, label %181, label %156\l|{<s0>T|<s1>F}}"];
	Node0x59dde90:s0 -> Node0x59dacb0;
	Node0x59dde90:s1 -> Node0x59e2360;
	Node0x59e2360 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%156:\l156:                                              \l  %157 = phi double [ %176, %156 ], [ %152, %151 ]\l  %158 = phi double [ %171, %156 ], [ %153, %151 ]\l  %159 = phi i32 [ %178, %156 ], [ %154, %151 ]\l  %160 = phi i32 [ %177, %156 ], [ %155, %151 ]\l  %161 = phi i32 [ %179, %156 ], [ 0, %151 ]\l  %162 = add nsw i32 %159, %71\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds double, double addrspace(1)* %1, i64 %163\l  %165 = load double, double addrspace(1)* %164, align 8, !tbaa !21\l  %166 = add nsw i32 %160, %72\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %167, i32 0, i32 0, i32 0, i64 0\l  %169 = load double, double addrspace(1)* %168, align 16, !tbaa !20\l  %170 = fmul contract double %165, %169\l  %171 = fadd contract double %158, %170\l  store double %171, double addrspace(1)* %60, align 16, !tbaa !20\l  %172 = load double, double addrspace(1)* %164, align 8, !tbaa !21\l  %173 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %167, i32 0, i32 0, i32 0, i64 1\l  %174 = load double, double addrspace(1)* %173, align 8, !tbaa !20\l  %175 = fmul contract double %172, %174\l  %176 = fadd contract double %157, %175\l  store double %176, double addrspace(1)* %61, align 8, !tbaa !20\l  %177 = add nuw nsw i32 %160, 1\l  %178 = add nsw i32 %159, -1\l  %179 = add i32 %161, 1\l  %180 = icmp eq i32 %179, %62\l  br i1 %180, label %181, label %156, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x59e2360:s0 -> Node0x59dacb0;
	Node0x59e2360:s1 -> Node0x59e2360;
	Node0x59dacb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%181:\l181:                                              \l  %182 = add nuw nsw i32 %69, 1\l  %183 = add nsw i32 %68, -1\l  %184 = add nuw nsw i32 %67, 1\l  %185 = icmp eq i32 %184, %44\l  br i1 %185, label %186, label %66, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x59dacb0:s0 -> Node0x59dae00;
	Node0x59dacb0:s1 -> Node0x59dab80;
	Node0x59dae00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%186:\l186:                                              \l  %187 = add nsw i32 %36, %29\l  %188 = icmp slt i32 %187, %30\l  br i1 %188, label %35, label %189, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x59dae00:s0 -> Node0x59d9cc0;
	Node0x59dae00:s1 -> Node0x59da9b0;
	Node0x59da9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%189:\l189:                                              \l  ret void\l}"];
}
