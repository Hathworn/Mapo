digraph "CFG for '_Z12errorsKernelPfS_S_ii' function" {
	label="CFG for '_Z12errorsKernelPfS_S_ii' function";

	Node0x5fe4e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = icmp sgt i32 %4, 0\l  br i1 %7, label %8, label %15\l|{<s0>T|<s1>F}}"];
	Node0x5fe4e80:s0 -> Node0x5fe6280;
	Node0x5fe4e80:s1 -> Node0x5fe6310;
	Node0x5fe6280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%8:\l8:                                                \l  %9 = icmp sgt i32 %3, 0\l  %10 = mul nsw i32 %6, %3\l  %11 = zext i32 %6 to i64\l  %12 = getelementptr inbounds float, float addrspace(1)* %2, i64 %11\l  br label %13\l}"];
	Node0x5fe6280 -> Node0x5fe4100;
	Node0x5fe4100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%13:\l13:                                               \l  %14 = phi i32 [ 0, %8 ], [ %55, %25 ]\l  br i1 %9, label %16, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5fe4100:s0 -> Node0x5fe68f0;
	Node0x5fe4100:s1 -> Node0x5fe67b0;
	Node0x5fe6310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%15:\l15:                                               \l  ret void\l}"];
	Node0x5fe68f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%16:\l16:                                               \l  %17 = phi i32 [ %78, %67 ], [ 0, %13 ]\l  %18 = phi float [ %77, %67 ], [ 0.000000e+00, %13 ]\l  %19 = icmp eq i32 %17, 0\l  br i1 %19, label %67, label %20\l|{<s0>T|<s1>F}}"];
	Node0x5fe68f0:s0 -> Node0x5fe6480;
	Node0x5fe68f0:s1 -> Node0x5fe7840;
	Node0x5fe7840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%20:\l20:                                               \l  %21 = and i32 %17, 7\l  %22 = icmp ult i32 %17, 8\l  br i1 %22, label %57, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5fe7840:s0 -> Node0x5fe7b00;
	Node0x5fe7840:s1 -> Node0x5fe7b50;
	Node0x5fe7b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%23:\l23:                                               \l  %24 = and i32 %17, 2147483640\l  br label %80\l}"];
	Node0x5fe7b50 -> Node0x5fe7d50;
	Node0x5fe67b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%25:\l25:                                               \l  %26 = phi float [ 0.000000e+00, %13 ], [ %77, %67 ]\l  %27 = zext i32 %14 to i64\l  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !5\l  %30 = fsub contract float %29, %26\l  %31 = fmul contract float %30, %30\l  %32 = fcmp olt float %31, 0x39F0000000000000\l  %33 = select i1 %32, float 0x41F0000000000000, float 1.000000e+00\l  %34 = fmul float %31, %33\l  %35 = tail call float @llvm.sqrt.f32(float %34)\l  %36 = bitcast float %35 to i32\l  %37 = add nsw i32 %36, -1\l  %38 = bitcast i32 %37 to float\l  %39 = add nsw i32 %36, 1\l  %40 = bitcast i32 %39 to float\l  %41 = tail call i1 @llvm.amdgcn.class.f32(float %34, i32 608)\l  %42 = select i1 %32, float 0x3EF0000000000000, float 1.000000e+00\l  %43 = fneg float %40\l  %44 = tail call float @llvm.fma.f32(float %43, float %35, float %34)\l  %45 = fcmp ogt float %44, 0.000000e+00\l  %46 = fneg float %38\l  %47 = tail call float @llvm.fma.f32(float %46, float %35, float %34)\l  %48 = fcmp ole float %47, 0.000000e+00\l  %49 = select i1 %48, float %38, float %35\l  %50 = select i1 %45, float %40, float %49\l  %51 = fmul float %42, %50\l  %52 = select i1 %41, float %34, float %51\l  %53 = load float, float addrspace(1)* %12, align 4, !tbaa !5\l  %54 = fadd contract float %53, %52\l  store float %54, float addrspace(1)* %12, align 4, !tbaa !5\l  %55 = add nuw nsw i32 %14, 1\l  %56 = icmp eq i32 %55, %4\l  br i1 %56, label %15, label %13, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x5fe67b0:s0 -> Node0x5fe6310;
	Node0x5fe67b0:s1 -> Node0x5fe4100;
	Node0x5fe7b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%57:\l57:                                               \l  %58 = phi i32 [ undef, %20 ], [ %90, %80 ]\l  %59 = phi i32 [ 1, %20 ], [ %90, %80 ]\l  %60 = icmp eq i32 %21, 0\l  br i1 %60, label %67, label %61\l|{<s0>T|<s1>F}}"];
	Node0x5fe7b00:s0 -> Node0x5fe6480;
	Node0x5fe7b00:s1 -> Node0x5fea720;
	Node0x5fea720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = phi i32 [ %64, %61 ], [ %59, %57 ]\l  %63 = phi i32 [ %65, %61 ], [ 0, %57 ]\l  %64 = mul nsw i32 %62, %14\l  %65 = add i32 %63, 1\l  %66 = icmp eq i32 %65, %21\l  br i1 %66, label %67, label %61, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5fea720:s0 -> Node0x5fe6480;
	Node0x5fea720:s1 -> Node0x5fea720;
	Node0x5fe6480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%67:\l67:                                               \l  %68 = phi i32 [ 1, %16 ], [ %58, %57 ], [ %64, %61 ]\l  %69 = add nsw i32 %17, %10\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !5\l  %73 = sitofp i32 %68 to float\l  %74 = fmul contract float %72, %73\l  %75 = fptosi float %74 to i32\l  %76 = sitofp i32 %75 to float\l  %77 = fadd contract float %18, %76\l  %78 = add nuw nsw i32 %17, 1\l  %79 = icmp eq i32 %78, %3\l  br i1 %79, label %25, label %16, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5fe6480:s0 -> Node0x5fe67b0;
	Node0x5fe6480:s1 -> Node0x5fe68f0;
	Node0x5fe7d50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%80:\l80:                                               \l  %81 = phi i32 [ 1, %23 ], [ %90, %80 ]\l  %82 = phi i32 [ 0, %23 ], [ %91, %80 ]\l  %83 = mul nsw i32 %81, %14\l  %84 = mul nsw i32 %83, %14\l  %85 = mul nsw i32 %84, %14\l  %86 = mul nsw i32 %85, %14\l  %87 = mul nsw i32 %86, %14\l  %88 = mul nsw i32 %87, %14\l  %89 = mul nsw i32 %88, %14\l  %90 = mul nsw i32 %89, %14\l  %91 = add i32 %82, 8\l  %92 = icmp eq i32 %91, %24\l  br i1 %92, label %57, label %80, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5fe7d50:s0 -> Node0x5fe7b00;
	Node0x5fe7d50:s1 -> Node0x5fe7d50;
}
