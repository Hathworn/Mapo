digraph "CFG for '_Z34_bcnn_forward_softmax_layer_kerneliiPfS_' function" {
	label="CFG for '_Z34_bcnn_forward_softmax_layer_kerneliiPfS_' function";

	Node0x4894460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = mul i32 %21, %14\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %1\l  br i1 %25, label %26, label %358\l|{<s0>T|<s1>F}}"];
	Node0x4894460:s0 -> Node0x4896d20;
	Node0x4894460:s1 -> Node0x4896db0;
	Node0x4896d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %0, 0\l  br i1 %27, label %28, label %54\l|{<s0>T|<s1>F}}"];
	Node0x4896d20:s0 -> Node0x4896f80;
	Node0x4896d20:s1 -> Node0x4896fd0;
	Node0x4896f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = mul nsw i32 %24, %0\l  %30 = and i32 %0, 7\l  %31 = icmp ult i32 %0, 8\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4896f80:s0 -> Node0x4897320;
	Node0x4896f80:s1 -> Node0x4897370;
	Node0x4897370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %0, -8\l  br label %62\l}"];
	Node0x4897370 -> Node0x48965e0;
	Node0x4897320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = phi float [ undef, %28 ], [ %136, %62 ]\l  %36 = phi i32 [ 0, %28 ], [ %137, %62 ]\l  %37 = phi float [ 0xFFF0000000000000, %28 ], [ %136, %62 ]\l  %38 = icmp eq i32 %30, 0\l  br i1 %38, label %54, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4897320:s0 -> Node0x4896fd0;
	Node0x4897320:s1 -> Node0x48988e0;
	Node0x48988e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %51, %39 ], [ %36, %34 ]\l  %41 = phi float [ %50, %39 ], [ %37, %34 ]\l  %42 = phi i32 [ %52, %39 ], [ 0, %34 ]\l  %43 = add nsw i32 %40, %29\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %2, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %47 = fptosi float %46 to i32\l  %48 = sitofp i32 %47 to float\l  %49 = fcmp contract olt float %41, %48\l  %50 = select contract i1 %49, float %48, float %41\l  %51 = add nuw nsw i32 %40, 1\l  %52 = add i32 %42, 1\l  %53 = icmp eq i32 %52, %30\l  br i1 %53, label %54, label %39, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x48988e0:s0 -> Node0x4896fd0;
	Node0x48988e0:s1 -> Node0x48988e0;
	Node0x4896fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%54:\l54:                                               \l  %55 = phi float [ 0xFFF0000000000000, %26 ], [ %35, %34 ], [ %50, %39 ]\l  br i1 %27, label %56, label %166\l|{<s0>T|<s1>F}}"];
	Node0x4896fd0:s0 -> Node0x4899d20;
	Node0x4896fd0:s1 -> Node0x4899d70;
	Node0x4899d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%56:\l56:                                               \l  %57 = mul nsw i32 %24, %0\l  %58 = and i32 %0, 1\l  %59 = icmp eq i32 %0, 1\l  br i1 %59, label %140, label %60\l|{<s0>T|<s1>F}}"];
	Node0x4899d20:s0 -> Node0x489a060;
	Node0x4899d20:s1 -> Node0x489a0b0;
	Node0x489a0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%60:\l60:                                               \l  %61 = and i32 %0, -2\l  br label %169\l}"];
	Node0x489a0b0 -> Node0x489a280;
	Node0x48965e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i32 [ 0, %32 ], [ %137, %62 ]\l  %64 = phi float [ 0xFFF0000000000000, %32 ], [ %136, %62 ]\l  %65 = phi i32 [ 0, %32 ], [ %138, %62 ]\l  %66 = add nsw i32 %63, %29\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %2, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %70 = fptosi float %69 to i32\l  %71 = sitofp i32 %70 to float\l  %72 = fcmp contract olt float %64, %71\l  %73 = select contract i1 %72, float %71, float %64\l  %74 = or i32 %63, 1\l  %75 = add nsw i32 %74, %29\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %2, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %79 = fptosi float %78 to i32\l  %80 = sitofp i32 %79 to float\l  %81 = fcmp contract olt float %73, %80\l  %82 = select contract i1 %81, float %80, float %73\l  %83 = or i32 %63, 2\l  %84 = add nsw i32 %83, %29\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %2, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %88 = fptosi float %87 to i32\l  %89 = sitofp i32 %88 to float\l  %90 = fcmp contract olt float %82, %89\l  %91 = select contract i1 %90, float %89, float %82\l  %92 = or i32 %63, 3\l  %93 = add nsw i32 %92, %29\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %2, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %97 = fptosi float %96 to i32\l  %98 = sitofp i32 %97 to float\l  %99 = fcmp contract olt float %91, %98\l  %100 = select contract i1 %99, float %98, float %91\l  %101 = or i32 %63, 4\l  %102 = add nsw i32 %101, %29\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %106 = fptosi float %105 to i32\l  %107 = sitofp i32 %106 to float\l  %108 = fcmp contract olt float %100, %107\l  %109 = select contract i1 %108, float %107, float %100\l  %110 = or i32 %63, 5\l  %111 = add nsw i32 %110, %29\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %2, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %115 = fptosi float %114 to i32\l  %116 = sitofp i32 %115 to float\l  %117 = fcmp contract olt float %109, %116\l  %118 = select contract i1 %117, float %116, float %109\l  %119 = or i32 %63, 6\l  %120 = add nsw i32 %119, %29\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %2, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %124 = fptosi float %123 to i32\l  %125 = sitofp i32 %124 to float\l  %126 = fcmp contract olt float %118, %125\l  %127 = select contract i1 %126, float %125, float %118\l  %128 = or i32 %63, 7\l  %129 = add nsw i32 %128, %29\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %2, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %133 = fptosi float %132 to i32\l  %134 = sitofp i32 %133 to float\l  %135 = fcmp contract olt float %127, %134\l  %136 = select contract i1 %135, float %134, float %127\l  %137 = add nuw nsw i32 %63, 8\l  %138 = add i32 %65, 8\l  %139 = icmp eq i32 %138, %33\l  br i1 %139, label %34, label %62, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x48965e0:s0 -> Node0x4897320;
	Node0x48965e0:s1 -> Node0x48965e0;
	Node0x489a060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%140:\l140:                                              \l  %141 = phi float [ undef, %56 ], [ %213, %169 ]\l  %142 = phi i32 [ 0, %56 ], [ %214, %169 ]\l  %143 = phi float [ 0.000000e+00, %56 ], [ %213, %169 ]\l  %144 = icmp eq i32 %58, 0\l  br i1 %144, label %166, label %145\l|{<s0>T|<s1>F}}"];
	Node0x489a060:s0 -> Node0x4899d70;
	Node0x489a060:s1 -> Node0x489dfa0;
	Node0x489dfa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%145:\l145:                                              \l  %146 = add nsw i32 %142, %57\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %2, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %150 = fsub contract float %149, %55\l  %151 = fmul float %150, 0x3FF7154760000000\l  %152 = tail call float @llvm.rint.f32(float %151)\l  %153 = fcmp ogt float %150, 0x40562E4300000000\l  %154 = fcmp olt float %150, 0xC059D1DA00000000\l  %155 = fneg float %151\l  %156 = tail call float @llvm.fma.f32(float %150, float 0x3FF7154760000000,\l... float %155)\l  %157 = tail call float @llvm.fma.f32(float %150, float 0x3E54AE0BE0000000,\l... float %156)\l  %158 = fsub float %151, %152\l  %159 = fadd float %157, %158\l  %160 = tail call float @llvm.exp2.f32(float %159)\l  %161 = fptosi float %152 to i32\l  %162 = tail call float @llvm.amdgcn.ldexp.f32(float %160, i32 %161)\l  %163 = select i1 %154, float 0.000000e+00, float %162\l  %164 = select i1 %153, float 0x7FF0000000000000, float %163\l  %165 = fadd contract float %143, %164\l  br label %166\l}"];
	Node0x489dfa0 -> Node0x4899d70;
	Node0x4899d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%166:\l166:                                              \l  %167 = phi float [ 0.000000e+00, %54 ], [ %141, %140 ], [ %165, %145 ]\l  %168 = fcmp contract une float %167, 0.000000e+00\l  br i1 %168, label %217, label %231\l|{<s0>T|<s1>F}}"];
	Node0x4899d70:s0 -> Node0x489f600;
	Node0x4899d70:s1 -> Node0x489f650;
	Node0x489a280 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%169:\l169:                                              \l  %170 = phi i32 [ 0, %60 ], [ %214, %169 ]\l  %171 = phi float [ 0.000000e+00, %60 ], [ %213, %169 ]\l  %172 = phi i32 [ 0, %60 ], [ %215, %169 ]\l  %173 = add nsw i32 %170, %57\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %2, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %177 = fsub contract float %176, %55\l  %178 = fmul float %177, 0x3FF7154760000000\l  %179 = tail call float @llvm.rint.f32(float %178)\l  %180 = fcmp ogt float %177, 0x40562E4300000000\l  %181 = fcmp olt float %177, 0xC059D1DA00000000\l  %182 = fneg float %178\l  %183 = tail call float @llvm.fma.f32(float %177, float 0x3FF7154760000000,\l... float %182)\l  %184 = tail call float @llvm.fma.f32(float %177, float 0x3E54AE0BE0000000,\l... float %183)\l  %185 = fsub float %178, %179\l  %186 = fadd float %184, %185\l  %187 = tail call float @llvm.exp2.f32(float %186)\l  %188 = fptosi float %179 to i32\l  %189 = tail call float @llvm.amdgcn.ldexp.f32(float %187, i32 %188)\l  %190 = select i1 %181, float 0.000000e+00, float %189\l  %191 = select i1 %180, float 0x7FF0000000000000, float %190\l  %192 = fadd contract float %171, %191\l  %193 = or i32 %170, 1\l  %194 = add nsw i32 %193, %57\l  %195 = sext i32 %194 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %2, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %198 = fsub contract float %197, %55\l  %199 = fmul float %198, 0x3FF7154760000000\l  %200 = tail call float @llvm.rint.f32(float %199)\l  %201 = fcmp ogt float %198, 0x40562E4300000000\l  %202 = fcmp olt float %198, 0xC059D1DA00000000\l  %203 = fneg float %199\l  %204 = tail call float @llvm.fma.f32(float %198, float 0x3FF7154760000000,\l... float %203)\l  %205 = tail call float @llvm.fma.f32(float %198, float 0x3E54AE0BE0000000,\l... float %204)\l  %206 = fsub float %199, %200\l  %207 = fadd float %205, %206\l  %208 = tail call float @llvm.exp2.f32(float %207)\l  %209 = fptosi float %200 to i32\l  %210 = tail call float @llvm.amdgcn.ldexp.f32(float %208, i32 %209)\l  %211 = select i1 %202, float 0.000000e+00, float %210\l  %212 = select i1 %201, float 0x7FF0000000000000, float %211\l  %213 = fadd contract float %192, %212\l  %214 = add nuw nsw i32 %170, 2\l  %215 = add i32 %172, 2\l  %216 = icmp eq i32 %215, %61\l  br i1 %216, label %140, label %169, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x489a280:s0 -> Node0x489a060;
	Node0x489a280:s1 -> Node0x489a280;
	Node0x489f600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%217:\l217:                                              \l  %218 = tail call i1 @llvm.amdgcn.class.f32(float %167, i32 144)\l  %219 = select i1 %218, float 0x41F0000000000000, float 1.000000e+00\l  %220 = fmul float %167, %219\l  %221 = tail call float @llvm.log2.f32(float %220)\l  %222 = fmul float %221, 0x3FE62E42E0000000\l  %223 = tail call i1 @llvm.amdgcn.class.f32(float %221, i32 519)\l  %224 = fneg float %222\l  %225 = tail call float @llvm.fma.f32(float %221, float 0x3FE62E42E0000000,\l... float %224)\l  %226 = tail call float @llvm.fma.f32(float %221, float 0x3E6EFA39E0000000,\l... float %225)\l  %227 = fadd float %222, %226\l  %228 = select i1 %223, float %221, float %227\l  %229 = select i1 %218, float 0x40362E4300000000, float 0.000000e+00\l  %230 = fsub float %228, %229\l  br label %231\l}"];
	Node0x489f600 -> Node0x489f650;
	Node0x489f650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%231:\l231:                                              \l  %232 = phi float [ %230, %217 ], [ -1.000000e+02, %166 ]\l  %233 = fadd contract float %55, %232\l  br i1 %27, label %234, label %358\l|{<s0>T|<s1>F}}"];
	Node0x489f650:s0 -> Node0x48a2880;
	Node0x489f650:s1 -> Node0x4896db0;
	Node0x48a2880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%234:\l234:                                              \l  %235 = mul nsw i32 %24, %0\l  %236 = and i32 %0, 3\l  %237 = icmp ult i32 %0, 4\l  br i1 %237, label %329, label %238\l|{<s0>T|<s1>F}}"];
	Node0x48a2880:s0 -> Node0x48a2b70;
	Node0x48a2880:s1 -> Node0x48a2bc0;
	Node0x48a2bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%238:\l238:                                              \l  %239 = and i32 %0, -4\l  br label %240\l}"];
	Node0x48a2bc0 -> Node0x48a2d90;
	Node0x48a2d90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%240:\l240:                                              \l  %241 = phi i32 [ 0, %238 ], [ %326, %240 ]\l  %242 = phi i32 [ 0, %238 ], [ %327, %240 ]\l  %243 = add nsw i32 %241, %235\l  %244 = sext i32 %243 to i64\l  %245 = getelementptr inbounds float, float addrspace(1)* %2, i64 %244\l  %246 = load float, float addrspace(1)* %245, align 4, !tbaa !16\l  %247 = fsub contract float %246, %233\l  %248 = fmul float %247, 0x3FF7154760000000\l  %249 = tail call float @llvm.rint.f32(float %248)\l  %250 = fcmp ogt float %247, 0x40562E4300000000\l  %251 = fcmp olt float %247, 0xC059D1DA00000000\l  %252 = fneg float %248\l  %253 = tail call float @llvm.fma.f32(float %247, float 0x3FF7154760000000,\l... float %252)\l  %254 = tail call float @llvm.fma.f32(float %247, float 0x3E54AE0BE0000000,\l... float %253)\l  %255 = fsub float %248, %249\l  %256 = fadd float %254, %255\l  %257 = tail call float @llvm.exp2.f32(float %256)\l  %258 = fptosi float %249 to i32\l  %259 = tail call float @llvm.amdgcn.ldexp.f32(float %257, i32 %258)\l  %260 = select i1 %251, float 0.000000e+00, float %259\l  %261 = select i1 %250, float 0x7FF0000000000000, float %260\l  %262 = getelementptr inbounds float, float addrspace(1)* %3, i64 %244\l  store float %261, float addrspace(1)* %262, align 4, !tbaa !16\l  %263 = or i32 %241, 1\l  %264 = add nsw i32 %263, %235\l  %265 = sext i32 %264 to i64\l  %266 = getelementptr inbounds float, float addrspace(1)* %2, i64 %265\l  %267 = load float, float addrspace(1)* %266, align 4, !tbaa !16\l  %268 = fsub contract float %267, %233\l  %269 = fmul float %268, 0x3FF7154760000000\l  %270 = tail call float @llvm.rint.f32(float %269)\l  %271 = fcmp ogt float %268, 0x40562E4300000000\l  %272 = fcmp olt float %268, 0xC059D1DA00000000\l  %273 = fneg float %269\l  %274 = tail call float @llvm.fma.f32(float %268, float 0x3FF7154760000000,\l... float %273)\l  %275 = tail call float @llvm.fma.f32(float %268, float 0x3E54AE0BE0000000,\l... float %274)\l  %276 = fsub float %269, %270\l  %277 = fadd float %275, %276\l  %278 = tail call float @llvm.exp2.f32(float %277)\l  %279 = fptosi float %270 to i32\l  %280 = tail call float @llvm.amdgcn.ldexp.f32(float %278, i32 %279)\l  %281 = select i1 %272, float 0.000000e+00, float %280\l  %282 = select i1 %271, float 0x7FF0000000000000, float %281\l  %283 = getelementptr inbounds float, float addrspace(1)* %3, i64 %265\l  store float %282, float addrspace(1)* %283, align 4, !tbaa !16\l  %284 = or i32 %241, 2\l  %285 = add nsw i32 %284, %235\l  %286 = sext i32 %285 to i64\l  %287 = getelementptr inbounds float, float addrspace(1)* %2, i64 %286\l  %288 = load float, float addrspace(1)* %287, align 4, !tbaa !16\l  %289 = fsub contract float %288, %233\l  %290 = fmul float %289, 0x3FF7154760000000\l  %291 = tail call float @llvm.rint.f32(float %290)\l  %292 = fcmp ogt float %289, 0x40562E4300000000\l  %293 = fcmp olt float %289, 0xC059D1DA00000000\l  %294 = fneg float %290\l  %295 = tail call float @llvm.fma.f32(float %289, float 0x3FF7154760000000,\l... float %294)\l  %296 = tail call float @llvm.fma.f32(float %289, float 0x3E54AE0BE0000000,\l... float %295)\l  %297 = fsub float %290, %291\l  %298 = fadd float %296, %297\l  %299 = tail call float @llvm.exp2.f32(float %298)\l  %300 = fptosi float %291 to i32\l  %301 = tail call float @llvm.amdgcn.ldexp.f32(float %299, i32 %300)\l  %302 = select i1 %293, float 0.000000e+00, float %301\l  %303 = select i1 %292, float 0x7FF0000000000000, float %302\l  %304 = getelementptr inbounds float, float addrspace(1)* %3, i64 %286\l  store float %303, float addrspace(1)* %304, align 4, !tbaa !16\l  %305 = or i32 %241, 3\l  %306 = add nsw i32 %305, %235\l  %307 = sext i32 %306 to i64\l  %308 = getelementptr inbounds float, float addrspace(1)* %2, i64 %307\l  %309 = load float, float addrspace(1)* %308, align 4, !tbaa !16\l  %310 = fsub contract float %309, %233\l  %311 = fmul float %310, 0x3FF7154760000000\l  %312 = tail call float @llvm.rint.f32(float %311)\l  %313 = fcmp ogt float %310, 0x40562E4300000000\l  %314 = fcmp olt float %310, 0xC059D1DA00000000\l  %315 = fneg float %311\l  %316 = tail call float @llvm.fma.f32(float %310, float 0x3FF7154760000000,\l... float %315)\l  %317 = tail call float @llvm.fma.f32(float %310, float 0x3E54AE0BE0000000,\l... float %316)\l  %318 = fsub float %311, %312\l  %319 = fadd float %317, %318\l  %320 = tail call float @llvm.exp2.f32(float %319)\l  %321 = fptosi float %312 to i32\l  %322 = tail call float @llvm.amdgcn.ldexp.f32(float %320, i32 %321)\l  %323 = select i1 %314, float 0.000000e+00, float %322\l  %324 = select i1 %313, float 0x7FF0000000000000, float %323\l  %325 = getelementptr inbounds float, float addrspace(1)* %3, i64 %307\l  store float %324, float addrspace(1)* %325, align 4, !tbaa !16\l  %326 = add nuw nsw i32 %241, 4\l  %327 = add i32 %242, 4\l  %328 = icmp eq i32 %327, %239\l  br i1 %328, label %329, label %240, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x48a2d90:s0 -> Node0x48a2b70;
	Node0x48a2d90:s1 -> Node0x48a2d90;
	Node0x48a2b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%329:\l329:                                              \l  %330 = phi i32 [ 0, %234 ], [ %326, %240 ]\l  %331 = icmp eq i32 %236, 0\l  br i1 %331, label %358, label %332\l|{<s0>T|<s1>F}}"];
	Node0x48a2b70:s0 -> Node0x4896db0;
	Node0x48a2b70:s1 -> Node0x48a7780;
	Node0x48a7780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%332:\l332:                                              \l  %333 = phi i32 [ %355, %332 ], [ %330, %329 ]\l  %334 = phi i32 [ %356, %332 ], [ 0, %329 ]\l  %335 = add nsw i32 %333, %235\l  %336 = sext i32 %335 to i64\l  %337 = getelementptr inbounds float, float addrspace(1)* %2, i64 %336\l  %338 = load float, float addrspace(1)* %337, align 4, !tbaa !16\l  %339 = fsub contract float %338, %233\l  %340 = fmul float %339, 0x3FF7154760000000\l  %341 = tail call float @llvm.rint.f32(float %340)\l  %342 = fcmp ogt float %339, 0x40562E4300000000\l  %343 = fcmp olt float %339, 0xC059D1DA00000000\l  %344 = fneg float %340\l  %345 = tail call float @llvm.fma.f32(float %339, float 0x3FF7154760000000,\l... float %344)\l  %346 = tail call float @llvm.fma.f32(float %339, float 0x3E54AE0BE0000000,\l... float %345)\l  %347 = fsub float %340, %341\l  %348 = fadd float %346, %347\l  %349 = tail call float @llvm.exp2.f32(float %348)\l  %350 = fptosi float %341 to i32\l  %351 = tail call float @llvm.amdgcn.ldexp.f32(float %349, i32 %350)\l  %352 = select i1 %343, float 0.000000e+00, float %351\l  %353 = select i1 %342, float 0x7FF0000000000000, float %352\l  %354 = getelementptr inbounds float, float addrspace(1)* %3, i64 %336\l  store float %353, float addrspace(1)* %354, align 4, !tbaa !16\l  %355 = add nuw nsw i32 %333, 1\l  %356 = add i32 %334, 1\l  %357 = icmp eq i32 %356, %236\l  br i1 %357, label %358, label %332, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x48a7780:s0 -> Node0x4896db0;
	Node0x48a7780:s1 -> Node0x48a7780;
	Node0x4896db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%358:\l358:                                              \l  ret void\l}"];
}
