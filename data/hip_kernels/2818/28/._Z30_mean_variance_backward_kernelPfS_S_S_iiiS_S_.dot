digraph "CFG for '_Z30_mean_variance_backward_kernelPfS_S_S_iiiS_S_' function" {
	label="CFG for '_Z30_mean_variance_backward_kernelPfS_S_S_iiiS_S_' function";

	Node0x5947d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !4\l  %16 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !13, !invariant.load\l... !14\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %15, %19\l  %21 = mul i32 %20, %19\l  %22 = icmp ugt i32 %15, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  %26 = add i32 %25, %10\l  %27 = mul i32 %26, %19\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = icmp slt i32 %29, %5\l  br i1 %30, label %31, label %194\l|{<s0>T|<s1>F}}"];
	Node0x5947d40:s0 -> Node0x594b360;
	Node0x5947d40:s1 -> Node0x594b3f0;
	Node0x594b360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%31:\l31:                                               \l  %32 = sext i32 %29 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %7, i64 %32\l  store float 0.000000e+00, float addrspace(1)* %33, align 4, !tbaa !16\l  %34 = getelementptr inbounds float, float addrspace(1)* %8, i64 %32\l  store float 0.000000e+00, float addrspace(1)* %34, align 4, !tbaa !16\l  %35 = icmp sgt i32 %4, 0\l  br i1 %35, label %36, label %139\l|{<s0>T|<s1>F}}"];
	Node0x594b360:s0 -> Node0x594cb20;
	Node0x594b360:s1 -> Node0x594cbb0;
	Node0x594cb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%36:\l36:                                               \l  %37 = icmp sgt i32 %6, 0\l  %38 = getelementptr inbounds float, float addrspace(1)* %2, i64 %32\l  %39 = and i32 %6, 3\l  %40 = icmp ult i32 %6, 4\l  %41 = and i32 %6, -4\l  %42 = icmp eq i32 %39, 0\l  br label %43\l}"];
	Node0x594cb20 -> Node0x594d0c0;
	Node0x594d0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %36 ], [ %137, %136 ]\l  br i1 %37, label %45, label %136\l|{<s0>T|<s1>F}}"];
	Node0x594d0c0:s0 -> Node0x594d2f0;
	Node0x594d0c0:s1 -> Node0x594d1b0;
	Node0x594d2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%45:\l45:                                               \l  %46 = mul nsw i32 %44, %5\l  %47 = add i32 %46, %29\l  %48 = mul i32 %47, %6\l  br i1 %40, label %114, label %49\l|{<s0>T|<s1>F}}"];
	Node0x594d2f0:s0 -> Node0x594d5e0;
	Node0x594d2f0:s1 -> Node0x594d630;
	Node0x594d630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%49:\l49:                                               \l  %50 = phi i32 [ %111, %49 ], [ 0, %45 ]\l  %51 = phi i32 [ %112, %49 ], [ 0, %45 ]\l  %52 = add nsw i32 %50, %48\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %57 = fadd contract float %55, %56\l  store float %57, float addrspace(1)* %33, align 4, !tbaa !16\l  %58 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !16\l  %61 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %62 = fsub contract float %60, %61\l  %63 = fmul contract float %58, %62\l  %64 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %65 = fadd contract float %64, %63\l  store float %65, float addrspace(1)* %34, align 4, !tbaa !16\l  %66 = or i32 %50, 1\l  %67 = add nsw i32 %66, %48\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16\l  %71 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %72 = fadd contract float %70, %71\l  store float %72, float addrspace(1)* %33, align 4, !tbaa !16\l  %73 = load float, float addrspace(1)* %69, align 4, !tbaa !16\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16\l  %76 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %77 = fsub contract float %75, %76\l  %78 = fmul contract float %73, %77\l  %79 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %80 = fadd contract float %79, %78\l  store float %80, float addrspace(1)* %34, align 4, !tbaa !16\l  %81 = or i32 %50, 2\l  %82 = add nsw i32 %81, %48\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16\l  %86 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %87 = fadd contract float %85, %86\l  store float %87, float addrspace(1)* %33, align 4, !tbaa !16\l  %88 = load float, float addrspace(1)* %84, align 4, !tbaa !16\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %92 = fsub contract float %90, %91\l  %93 = fmul contract float %88, %92\l  %94 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %95 = fadd contract float %94, %93\l  store float %95, float addrspace(1)* %34, align 4, !tbaa !16\l  %96 = or i32 %50, 3\l  %97 = add nsw i32 %96, %48\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %102 = fadd contract float %100, %101\l  store float %102, float addrspace(1)* %33, align 4, !tbaa !16\l  %103 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16\l  %106 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %107 = fsub contract float %105, %106\l  %108 = fmul contract float %103, %107\l  %109 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %110 = fadd contract float %109, %108\l  store float %110, float addrspace(1)* %34, align 4, !tbaa !16\l  %111 = add nuw nsw i32 %50, 4\l  %112 = add i32 %51, 4\l  %113 = icmp eq i32 %112, %41\l  br i1 %113, label %114, label %49, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x594d630:s0 -> Node0x594d5e0;
	Node0x594d630:s1 -> Node0x594d630;
	Node0x594d5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%114:\l114:                                              \l  %115 = phi i32 [ 0, %45 ], [ %111, %49 ]\l  br i1 %42, label %136, label %116\l|{<s0>T|<s1>F}}"];
	Node0x594d5e0:s0 -> Node0x594d1b0;
	Node0x594d5e0:s1 -> Node0x5950280;
	Node0x5950280 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%116:\l116:                                              \l  %117 = phi i32 [ %133, %116 ], [ %115, %114 ]\l  %118 = phi i32 [ %134, %116 ], [ 0, %114 ]\l  %119 = add nsw i32 %117, %48\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %124 = fadd contract float %122, %123\l  store float %124, float addrspace(1)* %33, align 4, !tbaa !16\l  %125 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !16\l  %128 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %129 = fsub contract float %127, %128\l  %130 = fmul contract float %125, %129\l  %131 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %132 = fadd contract float %131, %130\l  store float %132, float addrspace(1)* %34, align 4, !tbaa !16\l  %133 = add nuw nsw i32 %117, 1\l  %134 = add i32 %118, 1\l  %135 = icmp eq i32 %134, %39\l  br i1 %135, label %136, label %116, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5950280:s0 -> Node0x594d1b0;
	Node0x5950280:s1 -> Node0x5950280;
	Node0x594d1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%136:\l136:                                              \l  %137 = add nuw nsw i32 %44, 1\l  %138 = icmp eq i32 %137, %4\l  br i1 %138, label %139, label %43, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x594d1b0:s0 -> Node0x594cbb0;
	Node0x594d1b0:s1 -> Node0x594d0c0;
	Node0x594cbb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%139:\l139:                                              \l  %140 = getelementptr inbounds float, float addrspace(1)* %3, i64 %32\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %142 = fadd contract float %141, 0x3EE4F8B580000000\l  %143 = fcmp olt float %142, 0x39F0000000000000\l  %144 = select i1 %143, float 0x41F0000000000000, float 1.000000e+00\l  %145 = fmul float %142, %144\l  %146 = tail call float @llvm.sqrt.f32(float %145)\l  %147 = bitcast float %146 to i32\l  %148 = add nsw i32 %147, -1\l  %149 = bitcast i32 %148 to float\l  %150 = add nsw i32 %147, 1\l  %151 = bitcast i32 %150 to float\l  %152 = tail call i1 @llvm.amdgcn.class.f32(float %145, i32 608)\l  %153 = select i1 %143, float 0x3EF0000000000000, float 1.000000e+00\l  %154 = fneg float %151\l  %155 = tail call float @llvm.fma.f32(float %154, float %146, float %145)\l  %156 = fcmp ogt float %155, 0.000000e+00\l  %157 = fneg float %149\l  %158 = tail call float @llvm.fma.f32(float %157, float %146, float %145)\l  %159 = fcmp ole float %158, 0.000000e+00\l  %160 = select i1 %159, float %149, float %146\l  %161 = select i1 %156, float %151, float %160\l  %162 = fmul float %153, %161\l  %163 = select i1 %152, float %145, float %162\l  %164 = fdiv contract float -1.000000e+00, %163\l  %165 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %166 = fmul contract float %165, %164\l  store float %166, float addrspace(1)* %33, align 4, !tbaa !16\l  %167 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %168 = fcmp olt float %167, 0x39F0000000000000\l  %169 = select i1 %168, float 0x41F0000000000000, float 1.000000e+00\l  %170 = fmul float %167, %169\l  %171 = tail call float @llvm.sqrt.f32(float %170)\l  %172 = bitcast float %171 to i32\l  %173 = add nsw i32 %172, -1\l  %174 = bitcast i32 %173 to float\l  %175 = add nsw i32 %172, 1\l  %176 = bitcast i32 %175 to float\l  %177 = tail call i1 @llvm.amdgcn.class.f32(float %170, i32 608)\l  %178 = select i1 %168, float 0x3EF0000000000000, float 1.000000e+00\l  %179 = fneg float %176\l  %180 = tail call float @llvm.fma.f32(float %179, float %171, float %170)\l  %181 = fcmp ogt float %180, 0.000000e+00\l  %182 = fneg float %174\l  %183 = tail call float @llvm.fma.f32(float %182, float %171, float %170)\l  %184 = fcmp ole float %183, 0.000000e+00\l  %185 = select i1 %184, float %174, float %171\l  %186 = select i1 %181, float %176, float %185\l  %187 = fmul float %178, %186\l  %188 = select i1 %177, float %170, float %187\l  %189 = fmul contract float %167, %188\l  %190 = fadd contract float %189, 0x3EE4F8B580000000\l  %191 = fdiv contract float -5.000000e-01, %190\l  %192 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %193 = fmul contract float %192, %191\l  store float %193, float addrspace(1)* %34, align 4, !tbaa !16\l  br label %194\l}"];
	Node0x594cbb0 -> Node0x594b3f0;
	Node0x594b3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%194:\l194:                                              \l  ret void\l}"];
}
