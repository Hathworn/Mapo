digraph "CFG for '_Z30reduce_and_expand_array_kernelPKfPfii' function" {
	label="CFG for '_Z30reduce_and_expand_array_kernelPKfPfii' function";

	Node0x5bb6cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %2\l  br i1 %14, label %15, label %169\l|{<s0>T|<s1>F}}"];
	Node0x5bb6cc0:s0 -> Node0x5bb8c10;
	Node0x5bb6cc0:s1 -> Node0x5bb8ca0;
	Node0x5bb8c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = icmp sgt i32 %3, 0\l  br i1 %16, label %17, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5bb8c10:s0 -> Node0x5bb78b0;
	Node0x5bb8c10:s1 -> Node0x5bb8f80;
	Node0x5bb78b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = and i32 %3, 7\l  %19 = icmp ult i32 %3, 8\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x5bb78b0:s0 -> Node0x5bb9200;
	Node0x5bb78b0:s1 -> Node0x5bb9250;
	Node0x5bb9250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%20:\l20:                                               \l  %21 = and i32 %3, -8\l  br label %49\l}"];
	Node0x5bb9250 -> Node0x5bb9450;
	Node0x5bb9200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = phi float [ undef, %17 ], [ %107, %49 ]\l  %24 = phi i32 [ 0, %17 ], [ %108, %49 ]\l  %25 = phi float [ 0.000000e+00, %17 ], [ %107, %49 ]\l  %26 = icmp eq i32 %18, 0\l  br i1 %26, label %40, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5bb9200:s0 -> Node0x5bb8f80;
	Node0x5bb9200:s1 -> Node0x5bba6c0;
	Node0x5bba6c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi i32 [ %37, %27 ], [ %24, %22 ]\l  %29 = phi float [ %36, %27 ], [ %25, %22 ]\l  %30 = phi i32 [ %38, %27 ], [ 0, %22 ]\l  %31 = mul nsw i32 %28, %2\l  %32 = add nsw i32 %31, %13\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = fadd contract float %29, %35\l  %37 = add nuw nsw i32 %28, 1\l  %38 = add i32 %30, 1\l  %39 = icmp eq i32 %38, %18\l  br i1 %39, label %40, label %27, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5bba6c0:s0 -> Node0x5bb8f80;
	Node0x5bba6c0:s1 -> Node0x5bba6c0;
	Node0x5bb8f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %15 ], [ %23, %22 ], [ %36, %27 ]\l  br i1 %16, label %42, label %169\l|{<s0>T|<s1>F}}"];
	Node0x5bb8f80:s0 -> Node0x5bbbb00;
	Node0x5bb8f80:s1 -> Node0x5bb8ca0;
	Node0x5bbbb00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%42:\l42:                                               \l  %43 = sitofp i32 %3 to float\l  %44 = fdiv contract float %41, %43\l  %45 = and i32 %3, 7\l  %46 = icmp ult i32 %3, 8\l  br i1 %46, label %156, label %47\l|{<s0>T|<s1>F}}"];
	Node0x5bbbb00:s0 -> Node0x5bbbe20;
	Node0x5bbbb00:s1 -> Node0x5bbbe70;
	Node0x5bbbe70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%47:\l47:                                               \l  %48 = and i32 %3, -8\l  br label %111\l}"];
	Node0x5bbbe70 -> Node0x5bbc040;
	Node0x5bb9450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%49:\l49:                                               \l  %50 = phi i32 [ 0, %20 ], [ %108, %49 ]\l  %51 = phi float [ 0.000000e+00, %20 ], [ %107, %49 ]\l  %52 = phi i32 [ 0, %20 ], [ %109, %49 ]\l  %53 = mul nsw i32 %50, %2\l  %54 = add nsw i32 %53, %13\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = fadd contract float %51, %57\l  %59 = or i32 %50, 1\l  %60 = mul nsw i32 %59, %2\l  %61 = add nsw i32 %60, %13\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = fadd contract float %58, %64\l  %66 = or i32 %50, 2\l  %67 = mul nsw i32 %66, %2\l  %68 = add nsw i32 %67, %13\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = fadd contract float %65, %71\l  %73 = or i32 %50, 3\l  %74 = mul nsw i32 %73, %2\l  %75 = add nsw i32 %74, %13\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fadd contract float %72, %78\l  %80 = or i32 %50, 4\l  %81 = mul nsw i32 %80, %2\l  %82 = add nsw i32 %81, %13\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = fadd contract float %79, %85\l  %87 = or i32 %50, 5\l  %88 = mul nsw i32 %87, %2\l  %89 = add nsw i32 %88, %13\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = fadd contract float %86, %92\l  %94 = or i32 %50, 6\l  %95 = mul nsw i32 %94, %2\l  %96 = add nsw i32 %95, %13\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fadd contract float %93, %99\l  %101 = or i32 %50, 7\l  %102 = mul nsw i32 %101, %2\l  %103 = add nsw i32 %102, %13\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = fadd contract float %100, %106\l  %108 = add nuw nsw i32 %50, 8\l  %109 = add i32 %52, 8\l  %110 = icmp eq i32 %109, %21\l  br i1 %110, label %22, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5bb9450:s0 -> Node0x5bb9200;
	Node0x5bb9450:s1 -> Node0x5bb9450;
	Node0x5bbc040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%111:\l111:                                              \l  %112 = phi i32 [ 0, %47 ], [ %153, %111 ]\l  %113 = phi i32 [ 0, %47 ], [ %154, %111 ]\l  %114 = mul nsw i32 %112, %2\l  %115 = add nsw i32 %114, %13\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %1, i64 %116\l  store float %44, float addrspace(1)* %117, align 4, !tbaa !7\l  %118 = or i32 %112, 1\l  %119 = mul nsw i32 %118, %2\l  %120 = add nsw i32 %119, %13\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  store float %44, float addrspace(1)* %122, align 4, !tbaa !7\l  %123 = or i32 %112, 2\l  %124 = mul nsw i32 %123, %2\l  %125 = add nsw i32 %124, %13\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  store float %44, float addrspace(1)* %127, align 4, !tbaa !7\l  %128 = or i32 %112, 3\l  %129 = mul nsw i32 %128, %2\l  %130 = add nsw i32 %129, %13\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %1, i64 %131\l  store float %44, float addrspace(1)* %132, align 4, !tbaa !7\l  %133 = or i32 %112, 4\l  %134 = mul nsw i32 %133, %2\l  %135 = add nsw i32 %134, %13\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  store float %44, float addrspace(1)* %137, align 4, !tbaa !7\l  %138 = or i32 %112, 5\l  %139 = mul nsw i32 %138, %2\l  %140 = add nsw i32 %139, %13\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %1, i64 %141\l  store float %44, float addrspace(1)* %142, align 4, !tbaa !7\l  %143 = or i32 %112, 6\l  %144 = mul nsw i32 %143, %2\l  %145 = add nsw i32 %144, %13\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %1, i64 %146\l  store float %44, float addrspace(1)* %147, align 4, !tbaa !7\l  %148 = or i32 %112, 7\l  %149 = mul nsw i32 %148, %2\l  %150 = add nsw i32 %149, %13\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %1, i64 %151\l  store float %44, float addrspace(1)* %152, align 4, !tbaa !7\l  %153 = add nuw nsw i32 %112, 8\l  %154 = add i32 %113, 8\l  %155 = icmp eq i32 %154, %48\l  br i1 %155, label %156, label %111, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5bbc040:s0 -> Node0x5bbbe20;
	Node0x5bbc040:s1 -> Node0x5bbc040;
	Node0x5bbbe20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%156:\l156:                                              \l  %157 = phi i32 [ 0, %42 ], [ %153, %111 ]\l  %158 = icmp eq i32 %45, 0\l  br i1 %158, label %169, label %159\l|{<s0>T|<s1>F}}"];
	Node0x5bbbe20:s0 -> Node0x5bb8ca0;
	Node0x5bbbe20:s1 -> Node0x5bc1230;
	Node0x5bc1230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%159:\l159:                                              \l  %160 = phi i32 [ %166, %159 ], [ %157, %156 ]\l  %161 = phi i32 [ %167, %159 ], [ 0, %156 ]\l  %162 = mul nsw i32 %160, %2\l  %163 = add nsw i32 %162, %13\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %1, i64 %164\l  store float %44, float addrspace(1)* %165, align 4, !tbaa !7\l  %166 = add nuw nsw i32 %160, 1\l  %167 = add i32 %161, 1\l  %168 = icmp eq i32 %167, %45\l  br i1 %168, label %169, label %159, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5bc1230:s0 -> Node0x5bb8ca0;
	Node0x5bc1230:s1 -> Node0x5bc1230;
	Node0x5bb8ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%169:\l169:                                              \l  ret void\l}"];
}
