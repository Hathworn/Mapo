digraph "CFG for '_Z29backward_maxpool_layer_kerneliiiiiiiiPfS_Pi' function" {
	label="CFG for '_Z29backward_maxpool_layer_kerneliiiiiiiiPfS_Pi' function";

	Node0x5cf60e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%11:\l  %12 = sub i32 %1, %6\l  %13 = add i32 %12, %7\l  %14 = sdiv i32 %13, %5\l  %15 = add nsw i32 %14, 1\l  %16 = sub i32 %2, %6\l  %17 = add i32 %16, %7\l  %18 = sdiv i32 %17, %4\l  %19 = add nsw i32 %18, 1\l  %20 = add nsw i32 %6, -1\l  %21 = sdiv i32 %20, %4\l  %22 = sdiv i32 %20, %5\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr inbounds i8, i8 addrspace(4)* %25, i64 12\l  %27 = bitcast i8 addrspace(4)* %26 to i32 addrspace(4)*\l  %28 = load i32, i32 addrspace(4)* %27, align 4, !tbaa !4\l  %29 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %30 = bitcast i8 addrspace(4)* %29 to i16 addrspace(4)*\l  %31 = load i16, i16 addrspace(4)* %30, align 4, !range !13, !invariant.load\l... !14\l  %32 = zext i16 %31 to i32\l  %33 = udiv i32 %28, %32\l  %34 = mul i32 %33, %32\l  %35 = icmp ugt i32 %28, %34\l  %36 = zext i1 %35 to i32\l  %37 = add i32 %33, %36\l  %38 = mul i32 %37, %24\l  %39 = add i32 %38, %23\l  %40 = mul i32 %39, %32\l  %41 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %42 = add i32 %40, %41\l  %43 = icmp slt i32 %42, %0\l  br i1 %43, label %44, label %157\l|{<s0>T|<s1>F}}"];
	Node0x5cf60e0:s0 -> Node0x5cf9ec0;
	Node0x5cf60e0:s1 -> Node0x5cf9f50;
	Node0x5cf9ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%44:\l44:                                               \l  %45 = freeze i32 %42\l  %46 = freeze i32 %2\l  %47 = sdiv i32 %45, %46\l  %48 = sdiv i32 %7, -2\l  %49 = icmp slt i32 %22, 0\l  br i1 %49, label %151, label %50\l|{<s0>T|<s1>F}}"];
	Node0x5cf9ec0:s0 -> Node0x5cfa350;
	Node0x5cf9ec0:s1 -> Node0x5cfa3a0;
	Node0x5cfa3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%50:\l50:                                               \l  %51 = sub nsw i32 0, %22\l  %52 = freeze i32 %47\l  %53 = freeze i32 %1\l  %54 = sdiv i32 %52, %53\l  %55 = freeze i32 %54\l  %56 = mul i32 %54, %53\l  %57 = sub i32 %52, %56\l  %58 = mul i32 %47, %46\l  %59 = sub i32 %45, %58\l  %60 = icmp slt i32 %21, 0\l  %61 = sub nsw i32 %59, %48\l  %62 = sub nsw i32 %57, %48\l  %63 = mul nsw i32 %55, %15\l  %64 = tail call i32 @llvm.abs.i32(i32 %21, i1 false)\l  %65 = add i32 %21, %64\l  %66 = and i32 %65, 1\l  %67 = icmp eq i32 %66, 0\l  %68 = icmp eq i32 %65, 0\l  br label %69\l}"];
	Node0x5cfa3a0 -> Node0x5cf96c0;
	Node0x5cf96c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%69:\l69:                                               \l  %70 = phi float [ 0.000000e+00, %50 ], [ %148, %147 ]\l  %71 = phi i32 [ %51, %50 ], [ %149, %147 ]\l  br i1 %60, label %147, label %72\l|{<s0>T|<s1>F}}"];
	Node0x5cf96c0:s0 -> Node0x5cfbda0;
	Node0x5cf96c0:s1 -> Node0x5cfc000;
	Node0x5cfc000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%72:\l72:                                               \l  %73 = sdiv i32 %61, %4\l  %74 = sdiv i32 %62, %5\l  %75 = add nsw i32 %74, %71\l  %76 = add nsw i32 %75, %63\l  %77 = mul nsw i32 %76, %19\l  %78 = icmp sgt i32 %75, -1\l  %79 = icmp sle i32 %75, %14\l  br i1 %67, label %80, label %99\l|{<s0>T|<s1>F}}"];
	Node0x5cfc000:s0 -> Node0x5cfc530;
	Node0x5cfc000:s1 -> Node0x5cfc580;
	Node0x5cfc530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%80:\l80:                                               \l  %81 = sub i32 %73, %21\l  %82 = add nsw i32 %77, %81\l  %83 = icmp sgt i32 %81, -1\l  br i1 %83, label %84, label %96\l|{<s0>T|<s1>F}}"];
	Node0x5cfc530:s0 -> Node0x5cfc870;
	Node0x5cfc530:s1 -> Node0x5cfc8c0;
	Node0x5cfc870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%84:\l84:                                               \l  %85 = icmp sle i32 %81, %18\l  %86 = select i1 %85, i1 %78, i1 false\l  %87 = select i1 %86, i1 %79, i1 false\l  br i1 %87, label %88, label %96\l|{<s0>T|<s1>F}}"];
	Node0x5cfc870:s0 -> Node0x5cfcbf0;
	Node0x5cfc870:s1 -> Node0x5cfc8c0;
	Node0x5cfcbf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%88:\l88:                                               \l  %89 = sext i32 %82 to i64\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %89\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %92 = icmp eq i32 %91, %42\l  br i1 %92, label %93, label %96\l|{<s0>T|<s1>F}}"];
	Node0x5cfcbf0:s0 -> Node0x5cfd6f0;
	Node0x5cfcbf0:s1 -> Node0x5cfc8c0;
	Node0x5cfd6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%93:\l93:                                               \l  %94 = getelementptr inbounds float, float addrspace(1)* %8, i64 %89\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  br label %96\l}"];
	Node0x5cfd6f0 -> Node0x5cfc8c0;
	Node0x5cfc8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%96:\l96:                                               \l  %97 = phi contract float [ %95, %93 ], [ 0.000000e+00, %88 ], [\l... 0.000000e+00, %84 ], [ 0.000000e+00, %80 ]\l  %98 = fadd contract float %70, %97\l  br label %99\l}"];
	Node0x5cfc8c0 -> Node0x5cfc580;
	Node0x5cfc580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%99:\l99:                                               \l  %100 = phi float [ undef, %72 ], [ %98, %96 ]\l  %101 = phi float [ %70, %72 ], [ %98, %96 ]\l  %102 = phi i32 [ 0, %72 ], [ 1, %96 ]\l  br i1 %68, label %147, label %103\l|{<s0>T|<s1>F}}"];
	Node0x5cfc580:s0 -> Node0x5cfbda0;
	Node0x5cfc580:s1 -> Node0x5cfe310;
	Node0x5cfe310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%103:\l103:                                              \l  %104 = sub i32 %102, %21\l  br label %105\l}"];
	Node0x5cfe310 -> Node0x5cfe4a0;
	Node0x5cfe4a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%105:\l105:                                              \l  %106 = phi float [ %101, %103 ], [ %144, %142 ]\l  %107 = phi i32 [ %104, %103 ], [ %145, %142 ]\l  %108 = add nsw i32 %73, %107\l  %109 = add nsw i32 %77, %108\l  %110 = icmp sgt i32 %108, -1\l  br i1 %110, label %111, label %123\l|{<s0>T|<s1>F}}"];
	Node0x5cfe4a0:s0 -> Node0x5cfe930;
	Node0x5cfe4a0:s1 -> Node0x5cfe9c0;
	Node0x5cfe930 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%111:\l111:                                              \l  %112 = icmp sle i32 %108, %18\l  %113 = select i1 %112, i1 %78, i1 false\l  %114 = select i1 %113, i1 %79, i1 false\l  br i1 %114, label %115, label %123\l|{<s0>T|<s1>F}}"];
	Node0x5cfe930:s0 -> Node0x5cfecf0;
	Node0x5cfe930:s1 -> Node0x5cfe9c0;
	Node0x5cfecf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%115:\l115:                                              \l  %116 = sext i32 %109 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %116\l  %118 = load i32, i32 addrspace(1)* %117, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %119 = icmp eq i32 %118, %42\l  br i1 %119, label %120, label %123\l|{<s0>T|<s1>F}}"];
	Node0x5cfecf0:s0 -> Node0x5cff610;
	Node0x5cfecf0:s1 -> Node0x5cfe9c0;
	Node0x5cff610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%120:\l120:                                              \l  %121 = getelementptr inbounds float, float addrspace(1)* %8, i64 %116\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  br label %123\l}"];
	Node0x5cff610 -> Node0x5cfe9c0;
	Node0x5cfe9c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%123:\l123:                                              \l  %124 = phi contract float [ %122, %120 ], [ 0.000000e+00, %115 ], [\l... 0.000000e+00, %111 ], [ 0.000000e+00, %105 ]\l  %125 = fadd contract float %106, %124\l  %126 = add i32 %107, 1\l  %127 = add nsw i32 %73, %126\l  %128 = add nsw i32 %77, %127\l  %129 = icmp sgt i32 %127, -1\l  br i1 %129, label %130, label %142\l|{<s0>T|<s1>F}}"];
	Node0x5cfe9c0:s0 -> Node0x5cfae60;
	Node0x5cfe9c0:s1 -> Node0x5cfe560;
	Node0x5cfae60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%130:\l130:                                              \l  %131 = icmp sle i32 %127, %18\l  %132 = select i1 %131, i1 %78, i1 false\l  %133 = select i1 %132, i1 %79, i1 false\l  br i1 %133, label %134, label %142\l|{<s0>T|<s1>F}}"];
	Node0x5cfae60:s0 -> Node0x5cfb150;
	Node0x5cfae60:s1 -> Node0x5cfe560;
	Node0x5cfb150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%134:\l134:                                              \l  %135 = sext i32 %128 to i64\l  %136 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %135\l  %137 = load i32, i32 addrspace(1)* %136, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %138 = icmp eq i32 %137, %42\l  br i1 %138, label %139, label %142\l|{<s0>T|<s1>F}}"];
	Node0x5cfb150:s0 -> Node0x5d00cf0;
	Node0x5cfb150:s1 -> Node0x5cfe560;
	Node0x5d00cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%139:\l139:                                              \l  %140 = getelementptr inbounds float, float addrspace(1)* %8, i64 %135\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  br label %142\l}"];
	Node0x5d00cf0 -> Node0x5cfe560;
	Node0x5cfe560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%142:\l142:                                              \l  %143 = phi contract float [ %141, %139 ], [ 0.000000e+00, %134 ], [\l... 0.000000e+00, %130 ], [ 0.000000e+00, %123 ]\l  %144 = fadd contract float %125, %143\l  %145 = add i32 %107, 2\l  %146 = icmp eq i32 %126, %64\l  br i1 %146, label %147, label %105, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5cfe560:s0 -> Node0x5cfbda0;
	Node0x5cfe560:s1 -> Node0x5cfe4a0;
	Node0x5cfbda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%147:\l147:                                              \l  %148 = phi float [ %70, %69 ], [ %100, %99 ], [ %144, %142 ]\l  %149 = add i32 %71, 1\l  %150 = icmp eq i32 %71, %22\l  br i1 %150, label %151, label %69, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5cfbda0:s0 -> Node0x5cfa350;
	Node0x5cfbda0:s1 -> Node0x5cf96c0;
	Node0x5cfa350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%151:\l151:                                              \l  %152 = phi float [ 0.000000e+00, %44 ], [ %148, %147 ]\l  %153 = sext i32 %42 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %9, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %156 = fadd contract float %152, %155\l  store float %156, float addrspace(1)* %154, align 4, !tbaa !20\l  br label %157\l}"];
	Node0x5cfa350 -> Node0x5cf9f50;
	Node0x5cf9f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%157:\l157:                                              \l  ret void\l}"];
}
