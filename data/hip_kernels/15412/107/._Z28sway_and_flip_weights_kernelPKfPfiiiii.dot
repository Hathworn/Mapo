digraph "CFG for '_Z28sway_and_flip_weights_kernelPKfPfiiiii' function" {
	label="CFG for '_Z28sway_and_flip_weights_kernelPKfPfiiiii' function";

	Node0x4de64e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = mul nsw i32 %4, %4\l  %18 = mul nsw i32 %16, %17\l  %19 = sdiv i32 %2, %17\l  %20 = sdiv i32 %19, 4\l  %21 = sdiv i32 %16, %20\l  %22 = icmp slt i32 %18, %2\l  br i1 %22, label %23, label %735\l|{<s0>T|<s1>F}}"];
	Node0x4de64e0:s0 -> Node0x4de8720;
	Node0x4de64e0:s1 -> Node0x4de87b0;
	Node0x4de8720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%23:\l23:                                               \l  %24 = icmp eq i32 %21, 0\l  br i1 %24, label %25, label %114\l|{<s0>T|<s1>F}}"];
	Node0x4de8720:s0 -> Node0x4de89b0;
	Node0x4de8720:s1 -> Node0x4de8a00;
	Node0x4de89b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%25:\l25:                                               \l  %26 = icmp sgt i32 %4, 0\l  br i1 %26, label %27, label %735\l|{<s0>T|<s1>F}}"];
	Node0x4de89b0:s0 -> Node0x4de8bd0;
	Node0x4de89b0:s1 -> Node0x4de87b0;
	Node0x4de8bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%27:\l27:                                               \l  %28 = add i32 %4, -1\l  %29 = and i32 %4, 7\l  %30 = icmp ult i32 %28, 7\l  %31 = and i32 %4, -8\l  %32 = icmp eq i32 %29, 0\l  br label %33\l}"];
	Node0x4de8bd0 -> Node0x4de8340;
	Node0x4de8340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%33:\l33:                                               \l  %34 = phi i32 [ %51, %50 ], [ 0, %27 ]\l  %35 = add i32 %34, %18\l  br i1 %30, label %36, label %53\l|{<s0>T|<s1>F}}"];
	Node0x4de8340:s0 -> Node0x4de9410;
	Node0x4de8340:s1 -> Node0x4de94a0;
	Node0x4de9410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%36:\l36:                                               \l  %37 = phi i32 [ 0, %33 ], [ %111, %53 ]\l  br i1 %32, label %50, label %38\l|{<s0>T|<s1>F}}"];
	Node0x4de9410:s0 -> Node0x4de9240;
	Node0x4de9410:s1 -> Node0x4de96c0;
	Node0x4de96c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%38:\l38:                                               \l  %39 = phi i32 [ %47, %38 ], [ %37, %36 ]\l  %40 = phi i32 [ %48, %38 ], [ 0, %36 ]\l  %41 = mul nsw i32 %39, %4\l  %42 = add i32 %35, %41\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  store float %45, float addrspace(1)* %46, align 4, !tbaa !7\l  %47 = add nuw nsw i32 %39, 1\l  %48 = add i32 %40, 1\l  %49 = icmp eq i32 %48, %29\l  br i1 %49, label %50, label %38, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4de96c0:s0 -> Node0x4de9240;
	Node0x4de96c0:s1 -> Node0x4de96c0;
	Node0x4de9240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%50:\l50:                                               \l  %51 = add nuw nsw i32 %34, 1\l  %52 = icmp eq i32 %51, %4\l  br i1 %52, label %735, label %33, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4de9240:s0 -> Node0x4de87b0;
	Node0x4de9240:s1 -> Node0x4de8340;
	Node0x4de94a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%53:\l53:                                               \l  %54 = phi i32 [ %111, %53 ], [ 0, %33 ]\l  %55 = phi i32 [ %112, %53 ], [ 0, %33 ]\l  %56 = mul nsw i32 %54, %4\l  %57 = add i32 %35, %56\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  store float %60, float addrspace(1)* %61, align 4, !tbaa !7\l  %62 = or i32 %54, 1\l  %63 = mul nsw i32 %62, %4\l  %64 = add i32 %35, %63\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %65\l  store float %67, float addrspace(1)* %68, align 4, !tbaa !7\l  %69 = or i32 %54, 2\l  %70 = mul nsw i32 %69, %4\l  %71 = add i32 %35, %70\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  store float %74, float addrspace(1)* %75, align 4, !tbaa !7\l  %76 = or i32 %54, 3\l  %77 = mul nsw i32 %76, %4\l  %78 = add i32 %35, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  store float %81, float addrspace(1)* %82, align 4, !tbaa !7\l  %83 = or i32 %54, 4\l  %84 = mul nsw i32 %83, %4\l  %85 = add i32 %35, %84\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  store float %88, float addrspace(1)* %89, align 4, !tbaa !7\l  %90 = or i32 %54, 5\l  %91 = mul nsw i32 %90, %4\l  %92 = add i32 %35, %91\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  store float %95, float addrspace(1)* %96, align 4, !tbaa !7\l  %97 = or i32 %54, 6\l  %98 = mul nsw i32 %97, %4\l  %99 = add i32 %35, %98\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  store float %102, float addrspace(1)* %103, align 4, !tbaa !7\l  %104 = or i32 %54, 7\l  %105 = mul nsw i32 %104, %4\l  %106 = add i32 %35, %105\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107\l  store float %109, float addrspace(1)* %110, align 4, !tbaa !7\l  %111 = add nuw nsw i32 %54, 8\l  %112 = add i32 %55, 8\l  %113 = icmp eq i32 %112, %31\l  br i1 %113, label %36, label %53, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4de94a0:s0 -> Node0x4de9410;
	Node0x4de94a0:s1 -> Node0x4de94a0;
	Node0x4de8a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%114:\l114:                                              \l  %115 = icmp ult i32 %21, 3\l  br i1 %115, label %116, label %632\l|{<s0>T|<s1>F}}"];
	Node0x4de8a00:s0 -> Node0x4ded510;
	Node0x4de8a00:s1 -> Node0x4ded560;
	Node0x4ded510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%116:\l116:                                              \l  %117 = icmp eq i32 %21, 2\l  %118 = sub nsw i32 0, %5\l  %119 = select i1 %117, i32 %118, i32 %5\l  %120 = icmp eq i32 %6, 0\l  %121 = sub nsw i32 0, %119\l  %122 = select i1 %120, i32 %119, i32 %121\l  %123 = sitofp i32 %122 to double\l  %124 = fmul contract double %123, 0x400921FB53C8D4F1\l  %125 = fdiv contract double %124, 1.800000e+02\l  %126 = fptrunc double %125 to float\l  %127 = tail call float @llvm.fabs.f32(float %126)\l  %128 = fcmp olt float %127, 1.310720e+05\l  br i1 %128, label %129, label %136\l|{<s0>T|<s1>F}}"];
	Node0x4ded510:s0 -> Node0x4deb1e0;
	Node0x4ded510:s1 -> Node0x4deb270;
	Node0x4deb1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%129:\l129:                                              \l  %130 = fmul float %127, 0x3FE45F3060000000\l  %131 = tail call float @llvm.rint.f32(float %130)\l  %132 = tail call float @llvm.fma.f32(float %131, float 0xBFF921FB40000000,\l... float %127)\l  %133 = tail call float @llvm.fma.f32(float %131, float 0xBE74442D00000000,\l... float %132)\l  %134 = tail call float @llvm.fma.f32(float %131, float 0xBCF8469880000000,\l... float %133)\l  %135 = fptosi float %131 to i32\l  br label %242\l}"];
	Node0x4deb1e0 -> Node0x4def7d0;
	Node0x4deb270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%136:\l136:                                              \l  %137 = bitcast float %127 to i32\l  %138 = lshr i32 %137, 23\l  %139 = and i32 %137, 8388607\l  %140 = or i32 %139, 8388608\l  %141 = zext i32 %140 to i64\l  %142 = mul nuw nsw i64 %141, 4266746795\l  %143 = trunc i64 %142 to i32\l  %144 = lshr i64 %142, 32\l  %145 = mul nuw nsw i64 %141, 1011060801\l  %146 = add nuw nsw i64 %144, %145\l  %147 = trunc i64 %146 to i32\l  %148 = lshr i64 %146, 32\l  %149 = mul nuw nsw i64 %141, 3680671129\l  %150 = add nuw nsw i64 %148, %149\l  %151 = trunc i64 %150 to i32\l  %152 = lshr i64 %150, 32\l  %153 = mul nuw nsw i64 %141, 4113882560\l  %154 = add nuw nsw i64 %152, %153\l  %155 = trunc i64 %154 to i32\l  %156 = lshr i64 %154, 32\l  %157 = mul nuw nsw i64 %141, 4230436817\l  %158 = add nuw nsw i64 %156, %157\l  %159 = trunc i64 %158 to i32\l  %160 = lshr i64 %158, 32\l  %161 = mul nuw nsw i64 %141, 1313084713\l  %162 = add nuw nsw i64 %160, %161\l  %163 = trunc i64 %162 to i32\l  %164 = lshr i64 %162, 32\l  %165 = mul nuw nsw i64 %141, 2734261102\l  %166 = add nuw nsw i64 %164, %165\l  %167 = trunc i64 %166 to i32\l  %168 = lshr i64 %166, 32\l  %169 = trunc i64 %168 to i32\l  %170 = add nsw i32 %138, -120\l  %171 = icmp ugt i32 %170, 63\l  %172 = select i1 %171, i32 %163, i32 %169\l  %173 = select i1 %171, i32 %159, i32 %167\l  %174 = select i1 %171, i32 %155, i32 %163\l  %175 = select i1 %171, i32 %151, i32 %159\l  %176 = select i1 %171, i32 %147, i32 %155\l  %177 = select i1 %171, i32 %143, i32 %151\l  %178 = select i1 %171, i32 -64, i32 0\l  %179 = add nsw i32 %178, %170\l  %180 = icmp ugt i32 %179, 31\l  %181 = select i1 %180, i32 %173, i32 %172\l  %182 = select i1 %180, i32 %174, i32 %173\l  %183 = select i1 %180, i32 %175, i32 %174\l  %184 = select i1 %180, i32 %176, i32 %175\l  %185 = select i1 %180, i32 %177, i32 %176\l  %186 = select i1 %180, i32 -32, i32 0\l  %187 = add nsw i32 %186, %179\l  %188 = icmp ugt i32 %187, 31\l  %189 = select i1 %188, i32 %182, i32 %181\l  %190 = select i1 %188, i32 %183, i32 %182\l  %191 = select i1 %188, i32 %184, i32 %183\l  %192 = select i1 %188, i32 %185, i32 %184\l  %193 = select i1 %188, i32 -32, i32 0\l  %194 = add nsw i32 %193, %187\l  %195 = icmp eq i32 %194, 0\l  %196 = sub nsw i32 32, %194\l  %197 = tail call i32 @llvm.fshr.i32(i32 %189, i32 %190, i32 %196)\l  %198 = tail call i32 @llvm.fshr.i32(i32 %190, i32 %191, i32 %196)\l  %199 = tail call i32 @llvm.fshr.i32(i32 %191, i32 %192, i32 %196)\l  %200 = select i1 %195, i32 %189, i32 %197\l  %201 = select i1 %195, i32 %190, i32 %198\l  %202 = select i1 %195, i32 %191, i32 %199\l  %203 = lshr i32 %200, 29\l  %204 = tail call i32 @llvm.fshl.i32(i32 %200, i32 %201, i32 2)\l  %205 = tail call i32 @llvm.fshl.i32(i32 %201, i32 %202, i32 2)\l  %206 = tail call i32 @llvm.fshl.i32(i32 %202, i32 %192, i32 2)\l  %207 = and i32 %203, 1\l  %208 = sub nsw i32 0, %207\l  %209 = shl i32 %203, 31\l  %210 = xor i32 %204, %208\l  %211 = xor i32 %205, %208\l  %212 = xor i32 %206, %208\l  %213 = tail call i32 @llvm.ctlz.i32(i32 %210, i1 false), !range !16\l  %214 = sub nsw i32 31, %213\l  %215 = tail call i32 @llvm.fshr.i32(i32 %210, i32 %211, i32 %214)\l  %216 = tail call i32 @llvm.fshr.i32(i32 %211, i32 %212, i32 %214)\l  %217 = shl nuw nsw i32 %213, 23\l  %218 = sub nuw nsw i32 1056964608, %217\l  %219 = lshr i32 %215, 9\l  %220 = or i32 %219, %218\l  %221 = or i32 %220, %209\l  %222 = bitcast i32 %221 to float\l  %223 = tail call i32 @llvm.fshl.i32(i32 %215, i32 %216, i32 23)\l  %224 = tail call i32 @llvm.ctlz.i32(i32 %223, i1 false), !range !16\l  %225 = fmul float %222, 0x3FF921FB40000000\l  %226 = add nuw nsw i32 %224, %213\l  %227 = shl nuw nsw i32 %226, 23\l  %228 = sub nuw nsw i32 855638016, %227\l  %229 = sub nsw i32 31, %224\l  %230 = tail call i32 @llvm.fshr.i32(i32 %223, i32 %216, i32 %229)\l  %231 = lshr i32 %230, 9\l  %232 = or i32 %228, %231\l  %233 = or i32 %232, %209\l  %234 = bitcast i32 %233 to float\l  %235 = fneg float %225\l  %236 = tail call float @llvm.fma.f32(float %222, float 0x3FF921FB40000000,\l... float %235)\l  %237 = tail call float @llvm.fma.f32(float %222, float 0x3E74442D00000000,\l... float %236)\l  %238 = tail call float @llvm.fma.f32(float %234, float 0x3FF921FB40000000,\l... float %237)\l  %239 = fadd float %225, %238\l  %240 = lshr i32 %200, 30\l  %241 = add nuw nsw i32 %207, %240\l  br label %242\l}"];
	Node0x4deb270 -> Node0x4def7d0;
	Node0x4def7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%242:\l242:                                              \l  %243 = phi float [ %134, %129 ], [ %239, %136 ]\l  %244 = phi i32 [ %135, %129 ], [ %241, %136 ]\l  %245 = fmul float %243, %243\l  %246 = tail call float @llvm.fmuladd.f32(float %245, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %247 = tail call float @llvm.fmuladd.f32(float %245, float %246, float\l... 0xBFC55553A0000000)\l  %248 = fmul float %245, %247\l  %249 = tail call float @llvm.fmuladd.f32(float %243, float %248, float %243)\l  %250 = tail call float @llvm.fmuladd.f32(float %245, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %251 = tail call float @llvm.fmuladd.f32(float %245, float %250, float\l... 0x3FA5557EE0000000)\l  %252 = tail call float @llvm.fmuladd.f32(float %245, float %251, float\l... 0xBFE0000080000000)\l  %253 = tail call float @llvm.fmuladd.f32(float %245, float %252, float\l... 1.000000e+00)\l  %254 = fneg float %249\l  %255 = and i32 %244, 1\l  %256 = icmp eq i32 %255, 0\l  %257 = select i1 %256, float %253, float %254\l  %258 = bitcast float %257 to i32\l  %259 = shl i32 %244, 30\l  %260 = and i32 %259, -2147483648\l  %261 = xor i32 %260, %258\l  %262 = bitcast i32 %261 to float\l  %263 = tail call i1 @llvm.amdgcn.class.f32(float %127, i32 504)\l  %264 = select i1 %263, float %262, float 0x7FF8000000000000\l  br i1 %128, label %265, label %273\l|{<s0>T|<s1>F}}"];
	Node0x4def7d0:s0 -> Node0x4deef60;
	Node0x4def7d0:s1 -> Node0x4deeff0;
	Node0x4deef60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%265:\l265:                                              \l  %266 = fmul float %127, 0x3FE45F3060000000\l  %267 = tail call float @llvm.rint.f32(float %266)\l  %268 = tail call float @llvm.fma.f32(float %267, float 0xBFF921FB40000000,\l... float %127)\l  %269 = tail call float @llvm.fma.f32(float %267, float 0xBE74442D00000000,\l... float %268)\l  %270 = tail call float @llvm.fma.f32(float %267, float 0xBCF8469880000000,\l... float %269)\l  %271 = fptosi float %267 to i32\l  %272 = bitcast float %127 to i32\l  br label %379\l}"];
	Node0x4deef60 -> Node0x4df7400;
	Node0x4deeff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%273:\l273:                                              \l  %274 = bitcast float %127 to i32\l  %275 = lshr i32 %274, 23\l  %276 = and i32 %274, 8388607\l  %277 = or i32 %276, 8388608\l  %278 = zext i32 %277 to i64\l  %279 = mul nuw nsw i64 %278, 4266746795\l  %280 = trunc i64 %279 to i32\l  %281 = lshr i64 %279, 32\l  %282 = mul nuw nsw i64 %278, 1011060801\l  %283 = add nuw nsw i64 %281, %282\l  %284 = trunc i64 %283 to i32\l  %285 = lshr i64 %283, 32\l  %286 = mul nuw nsw i64 %278, 3680671129\l  %287 = add nuw nsw i64 %285, %286\l  %288 = trunc i64 %287 to i32\l  %289 = lshr i64 %287, 32\l  %290 = mul nuw nsw i64 %278, 4113882560\l  %291 = add nuw nsw i64 %289, %290\l  %292 = trunc i64 %291 to i32\l  %293 = lshr i64 %291, 32\l  %294 = mul nuw nsw i64 %278, 4230436817\l  %295 = add nuw nsw i64 %293, %294\l  %296 = trunc i64 %295 to i32\l  %297 = lshr i64 %295, 32\l  %298 = mul nuw nsw i64 %278, 1313084713\l  %299 = add nuw nsw i64 %297, %298\l  %300 = trunc i64 %299 to i32\l  %301 = lshr i64 %299, 32\l  %302 = mul nuw nsw i64 %278, 2734261102\l  %303 = add nuw nsw i64 %301, %302\l  %304 = trunc i64 %303 to i32\l  %305 = lshr i64 %303, 32\l  %306 = trunc i64 %305 to i32\l  %307 = add nsw i32 %275, -120\l  %308 = icmp ugt i32 %307, 63\l  %309 = select i1 %308, i32 %300, i32 %306\l  %310 = select i1 %308, i32 %296, i32 %304\l  %311 = select i1 %308, i32 %292, i32 %300\l  %312 = select i1 %308, i32 %288, i32 %296\l  %313 = select i1 %308, i32 %284, i32 %292\l  %314 = select i1 %308, i32 %280, i32 %288\l  %315 = select i1 %308, i32 -64, i32 0\l  %316 = add nsw i32 %315, %307\l  %317 = icmp ugt i32 %316, 31\l  %318 = select i1 %317, i32 %310, i32 %309\l  %319 = select i1 %317, i32 %311, i32 %310\l  %320 = select i1 %317, i32 %312, i32 %311\l  %321 = select i1 %317, i32 %313, i32 %312\l  %322 = select i1 %317, i32 %314, i32 %313\l  %323 = select i1 %317, i32 -32, i32 0\l  %324 = add nsw i32 %323, %316\l  %325 = icmp ugt i32 %324, 31\l  %326 = select i1 %325, i32 %319, i32 %318\l  %327 = select i1 %325, i32 %320, i32 %319\l  %328 = select i1 %325, i32 %321, i32 %320\l  %329 = select i1 %325, i32 %322, i32 %321\l  %330 = select i1 %325, i32 -32, i32 0\l  %331 = add nsw i32 %330, %324\l  %332 = icmp eq i32 %331, 0\l  %333 = sub nsw i32 32, %331\l  %334 = tail call i32 @llvm.fshr.i32(i32 %326, i32 %327, i32 %333)\l  %335 = tail call i32 @llvm.fshr.i32(i32 %327, i32 %328, i32 %333)\l  %336 = tail call i32 @llvm.fshr.i32(i32 %328, i32 %329, i32 %333)\l  %337 = select i1 %332, i32 %326, i32 %334\l  %338 = select i1 %332, i32 %327, i32 %335\l  %339 = select i1 %332, i32 %328, i32 %336\l  %340 = lshr i32 %337, 29\l  %341 = tail call i32 @llvm.fshl.i32(i32 %337, i32 %338, i32 2)\l  %342 = tail call i32 @llvm.fshl.i32(i32 %338, i32 %339, i32 2)\l  %343 = tail call i32 @llvm.fshl.i32(i32 %339, i32 %329, i32 2)\l  %344 = and i32 %340, 1\l  %345 = sub nsw i32 0, %344\l  %346 = shl i32 %340, 31\l  %347 = xor i32 %341, %345\l  %348 = xor i32 %342, %345\l  %349 = xor i32 %343, %345\l  %350 = tail call i32 @llvm.ctlz.i32(i32 %347, i1 false), !range !16\l  %351 = sub nsw i32 31, %350\l  %352 = tail call i32 @llvm.fshr.i32(i32 %347, i32 %348, i32 %351)\l  %353 = tail call i32 @llvm.fshr.i32(i32 %348, i32 %349, i32 %351)\l  %354 = shl nuw nsw i32 %350, 23\l  %355 = sub nuw nsw i32 1056964608, %354\l  %356 = lshr i32 %352, 9\l  %357 = or i32 %356, %355\l  %358 = or i32 %357, %346\l  %359 = bitcast i32 %358 to float\l  %360 = tail call i32 @llvm.fshl.i32(i32 %352, i32 %353, i32 23)\l  %361 = tail call i32 @llvm.ctlz.i32(i32 %360, i1 false), !range !16\l  %362 = fmul float %359, 0x3FF921FB40000000\l  %363 = add nuw nsw i32 %361, %350\l  %364 = shl nuw nsw i32 %363, 23\l  %365 = sub nuw nsw i32 855638016, %364\l  %366 = sub nsw i32 31, %361\l  %367 = tail call i32 @llvm.fshr.i32(i32 %360, i32 %353, i32 %366)\l  %368 = lshr i32 %367, 9\l  %369 = or i32 %365, %368\l  %370 = or i32 %369, %346\l  %371 = bitcast i32 %370 to float\l  %372 = fneg float %362\l  %373 = tail call float @llvm.fma.f32(float %359, float 0x3FF921FB40000000,\l... float %372)\l  %374 = tail call float @llvm.fma.f32(float %359, float 0x3E74442D00000000,\l... float %373)\l  %375 = tail call float @llvm.fma.f32(float %371, float 0x3FF921FB40000000,\l... float %374)\l  %376 = fadd float %362, %375\l  %377 = lshr i32 %337, 30\l  %378 = add nuw nsw i32 %344, %377\l  br label %379\l}"];
	Node0x4deeff0 -> Node0x4df7400;
	Node0x4df7400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%379:\l379:                                              \l  %380 = phi i32 [ %272, %265 ], [ %274, %273 ]\l  %381 = phi float [ %270, %265 ], [ %376, %273 ]\l  %382 = phi i32 [ %271, %265 ], [ %378, %273 ]\l  %383 = fmul float %381, %381\l  %384 = tail call float @llvm.fmuladd.f32(float %383, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %385 = tail call float @llvm.fmuladd.f32(float %383, float %384, float\l... 0xBFC55553A0000000)\l  %386 = fmul float %383, %385\l  %387 = tail call float @llvm.fmuladd.f32(float %381, float %386, float %381)\l  %388 = tail call float @llvm.fmuladd.f32(float %383, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %389 = tail call float @llvm.fmuladd.f32(float %383, float %388, float\l... 0x3FA5557EE0000000)\l  %390 = tail call float @llvm.fmuladd.f32(float %383, float %389, float\l... 0xBFE0000080000000)\l  %391 = tail call float @llvm.fmuladd.f32(float %383, float %390, float\l... 1.000000e+00)\l  %392 = and i32 %382, 1\l  %393 = icmp eq i32 %392, 0\l  %394 = select i1 %393, float %387, float %391\l  %395 = bitcast float %394 to i32\l  %396 = shl i32 %382, 30\l  %397 = and i32 %396, -2147483648\l  %398 = bitcast float %126 to i32\l  %399 = xor i32 %380, %398\l  %400 = xor i32 %399, %397\l  %401 = xor i32 %400, %395\l  %402 = bitcast i32 %401 to float\l  %403 = select i1 %263, float %402, float 0x7FF8000000000000\l  %404 = sdiv i32 %4, 2\l  %405 = icmp sgt i32 %4, 0\l  br i1 %405, label %406, label %417\l|{<s0>T|<s1>F}}"];
	Node0x4df7400:s0 -> Node0x4dfcda0;
	Node0x4df7400:s1 -> Node0x4dfcdf0;
	Node0x4dfcda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%406:\l406:                                              \l  %407 = sitofp i32 %404 to float\l  br label %408\l}"];
	Node0x4dfcda0 -> Node0x4dfcfa0;
	Node0x4dfcfa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%408:\l408:                                              \l  %409 = phi float [ 0.000000e+00, %406 ], [ %552, %428 ]\l  %410 = phi i32 [ 0, %406 ], [ %429, %428 ]\l  %411 = sub nsw i32 %410, %404\l  %412 = sitofp i32 %411 to float\l  %413 = fmul contract float %403, %412\l  %414 = fmul contract float %264, %412\l  %415 = mul nsw i32 %410, %4\l  %416 = add i32 %415, %18\l  br label %431\l}"];
	Node0x4dfcfa0 -> Node0x4dfd610;
	Node0x4dfcdf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%417:\l417:                                              \l  %418 = phi float [ 0.000000e+00, %379 ], [ %552, %428 ]\l  %419 = sitofp i32 %17 to float\l  %420 = fsub contract float %419, %418\l  %421 = fdiv contract float %419, %420\l  br i1 %405, label %422, label %735\l|{<s0>T|<s1>F}}"];
	Node0x4dfcdf0:s0 -> Node0x4dfd950;
	Node0x4dfcdf0:s1 -> Node0x4de87b0;
	Node0x4dfd950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%422:\l422:                                              \l  %423 = add i32 %4, -1\l  %424 = and i32 %4, 7\l  %425 = icmp ult i32 %423, 7\l  %426 = and i32 %4, -8\l  %427 = icmp eq i32 %424, 0\l  br label %559\l}"];
	Node0x4dfd950 -> Node0x4dfdd20;
	Node0x4dfd0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%428:\l428:                                              \l  %429 = add nuw nsw i32 %410, 1\l  %430 = icmp eq i32 %429, %4\l  br i1 %430, label %417, label %408, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4dfd0a0:s0 -> Node0x4dfcdf0;
	Node0x4dfd0a0:s1 -> Node0x4dfcfa0;
	Node0x4dfd610 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%431:\l431:                                              \l  %432 = phi float [ %409, %408 ], [ %552, %551 ]\l  %433 = phi i32 [ 0, %408 ], [ %557, %551 ]\l  %434 = sub nsw i32 %433, %404\l  %435 = sitofp i32 %434 to float\l  %436 = fmul contract float %264, %435\l  %437 = fadd contract float %436, %407\l  %438 = fadd contract float %413, %437\l  %439 = fmul contract float %403, %435\l  %440 = fsub contract float %407, %439\l  %441 = fadd contract float %414, %440\l  %442 = tail call float @llvm.floor.f32(float %438)\l  %443 = fptosi float %442 to i32\l  %444 = tail call float @llvm.ceil.f32(float %438)\l  %445 = fptosi float %444 to i32\l  %446 = icmp eq i32 %443, %445\l  %447 = add nsw i32 %443, 1\l  %448 = select i1 %446, i32 %447, i32 %445\l  %449 = tail call float @llvm.floor.f32(float %441)\l  %450 = fptosi float %449 to i32\l  %451 = tail call float @llvm.ceil.f32(float %441)\l  %452 = fptosi float %451 to i32\l  %453 = icmp eq i32 %450, %452\l  %454 = add nsw i32 %450, 1\l  %455 = select i1 %453, i32 %454, i32 %452\l  %456 = sitofp i32 %448 to float\l  %457 = fsub contract float %456, %438\l  %458 = sitofp i32 %443 to float\l  %459 = fsub contract float %438, %458\l  %460 = sitofp i32 %455 to float\l  %461 = fsub contract float %460, %441\l  %462 = sitofp i32 %450 to float\l  %463 = fsub contract float %441, %462\l  %464 = icmp sgt i32 %443, -1\l  br i1 %464, label %465, label %481\l|{<s0>T|<s1>F}}"];
	Node0x4dfd610:s0 -> Node0x4dff710;
	Node0x4dfd610:s1 -> Node0x4dff7a0;
	Node0x4dff710 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%465:\l465:                                              \l  %466 = icmp slt i32 %443, %4\l  %467 = icmp sgt i32 %450, -1\l  %468 = select i1 %466, i1 %467, i1 false\l  %469 = icmp slt i32 %450, %4\l  %470 = select i1 %468, i1 %469, i1 false\l  br i1 %470, label %471, label %481\l|{<s0>T|<s1>F}}"];
	Node0x4dff710:s0 -> Node0x4dffbf0;
	Node0x4dff710:s1 -> Node0x4dff7a0;
	Node0x4dffbf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%471:\l471:                                              \l  %472 = mul nsw i32 %450, %4\l  %473 = add i32 %18, %443\l  %474 = add i32 %473, %472\l  %475 = sext i32 %474 to i64\l  %476 = getelementptr inbounds float, float addrspace(1)* %0, i64 %475\l  %477 = load float, float addrspace(1)* %476, align 4, !tbaa !7\l  %478 = fmul contract float %457, %477\l  %479 = fmul contract float %461, %478\l  %480 = fadd contract float %479, 0.000000e+00\l  br label %484\l}"];
	Node0x4dffbf0 -> Node0x4e001d0;
	Node0x4dff7a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%481:\l481:                                              \l  %482 = fmul contract float %457, %461\l  %483 = fadd contract float %432, %482\l  br label %484\l}"];
	Node0x4dff7a0 -> Node0x4e001d0;
	Node0x4e001d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%484:\l484:                                              \l  %485 = phi float [ %432, %471 ], [ %483, %481 ]\l  %486 = phi float [ %480, %471 ], [ 0.000000e+00, %481 ]\l  %487 = icmp sgt i32 %448, -1\l  br i1 %487, label %488, label %504\l|{<s0>T|<s1>F}}"];
	Node0x4e001d0:s0 -> Node0x4e00610;
	Node0x4e001d0:s1 -> Node0x4e00660;
	Node0x4e00610 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%488:\l488:                                              \l  %489 = icmp slt i32 %448, %4\l  %490 = icmp sgt i32 %450, -1\l  %491 = select i1 %489, i1 %490, i1 false\l  %492 = icmp slt i32 %450, %4\l  %493 = select i1 %491, i1 %492, i1 false\l  br i1 %493, label %494, label %504\l|{<s0>T|<s1>F}}"];
	Node0x4e00610:s0 -> Node0x4e00a70;
	Node0x4e00610:s1 -> Node0x4e00660;
	Node0x4e00a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%494:\l494:                                              \l  %495 = mul nsw i32 %450, %4\l  %496 = add i32 %448, %18\l  %497 = add i32 %496, %495\l  %498 = sext i32 %497 to i64\l  %499 = getelementptr inbounds float, float addrspace(1)* %0, i64 %498\l  %500 = load float, float addrspace(1)* %499, align 4, !tbaa !7\l  %501 = fmul contract float %459, %500\l  %502 = fmul contract float %461, %501\l  %503 = fadd contract float %486, %502\l  br label %507\l}"];
	Node0x4e00a70 -> Node0x4e01050;
	Node0x4e00660 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%504:\l504:                                              \l  %505 = fmul contract float %459, %461\l  %506 = fadd contract float %505, %485\l  br label %507\l}"];
	Node0x4e00660 -> Node0x4e01050;
	Node0x4e01050 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%507:\l507:                                              \l  %508 = phi float [ %485, %494 ], [ %506, %504 ]\l  %509 = phi float [ %503, %494 ], [ %486, %504 ]\l  br i1 %464, label %510, label %526\l|{<s0>T|<s1>F}}"];
	Node0x4e01050:s0 -> Node0x4e01400;
	Node0x4e01050:s1 -> Node0x4e01450;
	Node0x4e01400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%510:\l510:                                              \l  %511 = icmp slt i32 %443, %4\l  %512 = icmp sgt i32 %455, -1\l  %513 = select i1 %511, i1 %512, i1 false\l  %514 = icmp slt i32 %455, %4\l  %515 = select i1 %513, i1 %514, i1 false\l  br i1 %515, label %516, label %526\l|{<s0>T|<s1>F}}"];
	Node0x4e01400:s0 -> Node0x4df5f90;
	Node0x4e01400:s1 -> Node0x4e01450;
	Node0x4df5f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%516:\l516:                                              \l  %517 = mul nsw i32 %455, %4\l  %518 = add i32 %18, %443\l  %519 = add i32 %518, %517\l  %520 = sext i32 %519 to i64\l  %521 = getelementptr inbounds float, float addrspace(1)* %0, i64 %520\l  %522 = load float, float addrspace(1)* %521, align 4, !tbaa !7\l  %523 = fmul contract float %457, %522\l  %524 = fmul contract float %463, %523\l  %525 = fadd contract float %509, %524\l  br label %529\l}"];
	Node0x4df5f90 -> Node0x4df6570;
	Node0x4e01450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%526:\l526:                                              \l  %527 = fmul contract float %463, %457\l  %528 = fadd contract float %527, %508\l  br label %529\l}"];
	Node0x4e01450 -> Node0x4df6570;
	Node0x4df6570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%529:\l529:                                              \l  %530 = phi float [ %508, %516 ], [ %528, %526 ]\l  %531 = phi float [ %525, %516 ], [ %509, %526 ]\l  br i1 %487, label %532, label %548\l|{<s0>T|<s1>F}}"];
	Node0x4df6570:s0 -> Node0x4df6920;
	Node0x4df6570:s1 -> Node0x4df6970;
	Node0x4df6920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%532:\l532:                                              \l  %533 = icmp slt i32 %448, %4\l  %534 = icmp sgt i32 %455, -1\l  %535 = select i1 %533, i1 %534, i1 false\l  %536 = icmp slt i32 %455, %4\l  %537 = select i1 %535, i1 %536, i1 false\l  br i1 %537, label %538, label %548\l|{<s0>T|<s1>F}}"];
	Node0x4df6920:s0 -> Node0x4e03680;
	Node0x4df6920:s1 -> Node0x4df6970;
	Node0x4e03680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%538:\l538:                                              \l  %539 = mul nsw i32 %455, %4\l  %540 = add i32 %448, %18\l  %541 = add i32 %540, %539\l  %542 = sext i32 %541 to i64\l  %543 = getelementptr inbounds float, float addrspace(1)* %0, i64 %542\l  %544 = load float, float addrspace(1)* %543, align 4, !tbaa !7\l  %545 = fmul contract float %459, %544\l  %546 = fmul contract float %463, %545\l  %547 = fadd contract float %531, %546\l  br label %551\l}"];
	Node0x4e03680 -> Node0x4dfe070;
	Node0x4df6970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%548:\l548:                                              \l  %549 = fmul contract float %459, %463\l  %550 = fadd contract float %549, %530\l  br label %551\l}"];
	Node0x4df6970 -> Node0x4dfe070;
	Node0x4dfe070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%551:\l551:                                              \l  %552 = phi float [ %530, %538 ], [ %550, %548 ]\l  %553 = phi float [ %547, %538 ], [ %531, %548 ]\l  %554 = add i32 %416, %433\l  %555 = sext i32 %554 to i64\l  %556 = getelementptr inbounds float, float addrspace(1)* %1, i64 %555\l  store float %553, float addrspace(1)* %556, align 4, !tbaa !7\l  %557 = add nuw nsw i32 %433, 1\l  %558 = icmp eq i32 %557, %4\l  br i1 %558, label %428, label %431, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4dfe070:s0 -> Node0x4dfd0a0;
	Node0x4dfe070:s1 -> Node0x4dfd610;
	Node0x4dfdd20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%559:\l559:                                              \l  %560 = phi i32 [ %577, %576 ], [ 0, %422 ]\l  %561 = mul nsw i32 %560, %4\l  %562 = add i32 %561, %18\l  br i1 %425, label %563, label %579\l|{<s0>T|<s1>F}}"];
	Node0x4dfdd20:s0 -> Node0x4e04660;
	Node0x4dfdd20:s1 -> Node0x4e046b0;
	Node0x4e04660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%563:\l563:                                              \l  %564 = phi i32 [ 0, %559 ], [ %629, %579 ]\l  br i1 %427, label %576, label %565\l|{<s0>T|<s1>F}}"];
	Node0x4e04660:s0 -> Node0x4e04440;
	Node0x4e04660:s1 -> Node0x4e048a0;
	Node0x4e048a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%565:\l565:                                              \l  %566 = phi i32 [ %573, %565 ], [ %564, %563 ]\l  %567 = phi i32 [ %574, %565 ], [ 0, %563 ]\l  %568 = add i32 %562, %566\l  %569 = sext i32 %568 to i64\l  %570 = getelementptr inbounds float, float addrspace(1)* %1, i64 %569\l  %571 = load float, float addrspace(1)* %570, align 4, !tbaa !7\l  %572 = fmul contract float %421, %571\l  store float %572, float addrspace(1)* %570, align 4, !tbaa !7\l  %573 = add nuw nsw i32 %566, 1\l  %574 = add i32 %567, 1\l  %575 = icmp eq i32 %574, %424\l  br i1 %575, label %576, label %565, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4e048a0:s0 -> Node0x4e04440;
	Node0x4e048a0:s1 -> Node0x4e048a0;
	Node0x4e04440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%576:\l576:                                              \l  %577 = add nuw nsw i32 %560, 1\l  %578 = icmp eq i32 %577, %4\l  br i1 %578, label %735, label %559, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4e04440:s0 -> Node0x4de87b0;
	Node0x4e04440:s1 -> Node0x4dfdd20;
	Node0x4e046b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%579:\l579:                                              \l  %580 = phi i32 [ %629, %579 ], [ 0, %559 ]\l  %581 = phi i32 [ %630, %579 ], [ 0, %559 ]\l  %582 = add i32 %562, %580\l  %583 = sext i32 %582 to i64\l  %584 = getelementptr inbounds float, float addrspace(1)* %1, i64 %583\l  %585 = load float, float addrspace(1)* %584, align 4, !tbaa !7\l  %586 = fmul contract float %421, %585\l  store float %586, float addrspace(1)* %584, align 4, !tbaa !7\l  %587 = or i32 %580, 1\l  %588 = add i32 %562, %587\l  %589 = sext i32 %588 to i64\l  %590 = getelementptr inbounds float, float addrspace(1)* %1, i64 %589\l  %591 = load float, float addrspace(1)* %590, align 4, !tbaa !7\l  %592 = fmul contract float %421, %591\l  store float %592, float addrspace(1)* %590, align 4, !tbaa !7\l  %593 = or i32 %580, 2\l  %594 = add i32 %562, %593\l  %595 = sext i32 %594 to i64\l  %596 = getelementptr inbounds float, float addrspace(1)* %1, i64 %595\l  %597 = load float, float addrspace(1)* %596, align 4, !tbaa !7\l  %598 = fmul contract float %421, %597\l  store float %598, float addrspace(1)* %596, align 4, !tbaa !7\l  %599 = or i32 %580, 3\l  %600 = add i32 %562, %599\l  %601 = sext i32 %600 to i64\l  %602 = getelementptr inbounds float, float addrspace(1)* %1, i64 %601\l  %603 = load float, float addrspace(1)* %602, align 4, !tbaa !7\l  %604 = fmul contract float %421, %603\l  store float %604, float addrspace(1)* %602, align 4, !tbaa !7\l  %605 = or i32 %580, 4\l  %606 = add i32 %562, %605\l  %607 = sext i32 %606 to i64\l  %608 = getelementptr inbounds float, float addrspace(1)* %1, i64 %607\l  %609 = load float, float addrspace(1)* %608, align 4, !tbaa !7\l  %610 = fmul contract float %421, %609\l  store float %610, float addrspace(1)* %608, align 4, !tbaa !7\l  %611 = or i32 %580, 5\l  %612 = add i32 %562, %611\l  %613 = sext i32 %612 to i64\l  %614 = getelementptr inbounds float, float addrspace(1)* %1, i64 %613\l  %615 = load float, float addrspace(1)* %614, align 4, !tbaa !7\l  %616 = fmul contract float %421, %615\l  store float %616, float addrspace(1)* %614, align 4, !tbaa !7\l  %617 = or i32 %580, 6\l  %618 = add i32 %562, %617\l  %619 = sext i32 %618 to i64\l  %620 = getelementptr inbounds float, float addrspace(1)* %1, i64 %619\l  %621 = load float, float addrspace(1)* %620, align 4, !tbaa !7\l  %622 = fmul contract float %421, %621\l  store float %622, float addrspace(1)* %620, align 4, !tbaa !7\l  %623 = or i32 %580, 7\l  %624 = add i32 %562, %623\l  %625 = sext i32 %624 to i64\l  %626 = getelementptr inbounds float, float addrspace(1)* %1, i64 %625\l  %627 = load float, float addrspace(1)* %626, align 4, !tbaa !7\l  %628 = fmul contract float %421, %627\l  store float %628, float addrspace(1)* %626, align 4, !tbaa !7\l  %629 = add nuw nsw i32 %580, 8\l  %630 = add i32 %581, 8\l  %631 = icmp eq i32 %630, %426\l  br i1 %631, label %563, label %579, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4e046b0:s0 -> Node0x4e04660;
	Node0x4e046b0:s1 -> Node0x4e046b0;
	Node0x4ded560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%632:\l632:                                              \l  %633 = icmp eq i32 %21, 3\l  %634 = icmp sgt i32 %4, 0\l  %635 = select i1 %633, i1 %634, i1 false\l  br i1 %635, label %636, label %735\l|{<s0>T|<s1>F}}"];
	Node0x4ded560:s0 -> Node0x4de7c60;
	Node0x4ded560:s1 -> Node0x4de87b0;
	Node0x4de7c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%636:\l636:                                              \l  %637 = add i32 %4, -1\l  %638 = and i32 %4, 7\l  %639 = icmp ult i32 %637, 7\l  %640 = and i32 %4, -8\l  %641 = icmp eq i32 %638, 0\l  br label %642\l}"];
	Node0x4de7c60 -> Node0x4e08670;
	Node0x4e08670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%642:\l642:                                              \l  %643 = phi i32 [ %664, %663 ], [ 0, %636 ]\l  %644 = mul nsw i32 %643, %4\l  %645 = add i32 %644, %18\l  %646 = add nsw i32 %645, -1\l  %647 = add i32 %646, %4\l  br i1 %639, label %648, label %666\l|{<s0>T|<s1>F}}"];
	Node0x4e08670:s0 -> Node0x4e08ab0;
	Node0x4e08670:s1 -> Node0x4e08b40;
	Node0x4e08ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%648:\l648:                                              \l  %649 = phi i32 [ 0, %642 ], [ %732, %666 ]\l  br i1 %641, label %663, label %650\l|{<s0>T|<s1>F}}"];
	Node0x4e08ab0:s0 -> Node0x4e08730;
	Node0x4e08ab0:s1 -> Node0x4e08d30;
	Node0x4e08d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%650:\l650:                                              \l  %651 = phi i32 [ %660, %650 ], [ %649, %648 ]\l  %652 = phi i32 [ %661, %650 ], [ 0, %648 ]\l  %653 = add i32 %645, %651\l  %654 = sext i32 %653 to i64\l  %655 = getelementptr inbounds float, float addrspace(1)* %0, i64 %654\l  %656 = load float, float addrspace(1)* %655, align 4, !tbaa !7\l  %657 = sub i32 %647, %651\l  %658 = sext i32 %657 to i64\l  %659 = getelementptr inbounds float, float addrspace(1)* %1, i64 %658\l  store float %656, float addrspace(1)* %659, align 4, !tbaa !7\l  %660 = add nuw nsw i32 %651, 1\l  %661 = add i32 %652, 1\l  %662 = icmp eq i32 %661, %638\l  br i1 %662, label %663, label %650, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4e08d30:s0 -> Node0x4e08730;
	Node0x4e08d30:s1 -> Node0x4e08d30;
	Node0x4e08730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%663:\l663:                                              \l  %664 = add nuw nsw i32 %643, 1\l  %665 = icmp eq i32 %664, %4\l  br i1 %665, label %735, label %642, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4e08730:s0 -> Node0x4de87b0;
	Node0x4e08730:s1 -> Node0x4e08670;
	Node0x4e08b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%666:\l666:                                              \l  %667 = phi i32 [ %732, %666 ], [ 0, %642 ]\l  %668 = phi i32 [ %733, %666 ], [ 0, %642 ]\l  %669 = add i32 %645, %667\l  %670 = sext i32 %669 to i64\l  %671 = getelementptr inbounds float, float addrspace(1)* %0, i64 %670\l  %672 = load float, float addrspace(1)* %671, align 4, !tbaa !7\l  %673 = sub i32 %647, %667\l  %674 = sext i32 %673 to i64\l  %675 = getelementptr inbounds float, float addrspace(1)* %1, i64 %674\l  store float %672, float addrspace(1)* %675, align 4, !tbaa !7\l  %676 = or i32 %667, 1\l  %677 = add i32 %645, %676\l  %678 = sext i32 %677 to i64\l  %679 = getelementptr inbounds float, float addrspace(1)* %0, i64 %678\l  %680 = load float, float addrspace(1)* %679, align 4, !tbaa !7\l  %681 = sub i32 %647, %676\l  %682 = sext i32 %681 to i64\l  %683 = getelementptr inbounds float, float addrspace(1)* %1, i64 %682\l  store float %680, float addrspace(1)* %683, align 4, !tbaa !7\l  %684 = or i32 %667, 2\l  %685 = add i32 %645, %684\l  %686 = sext i32 %685 to i64\l  %687 = getelementptr inbounds float, float addrspace(1)* %0, i64 %686\l  %688 = load float, float addrspace(1)* %687, align 4, !tbaa !7\l  %689 = sub i32 %647, %684\l  %690 = sext i32 %689 to i64\l  %691 = getelementptr inbounds float, float addrspace(1)* %1, i64 %690\l  store float %688, float addrspace(1)* %691, align 4, !tbaa !7\l  %692 = or i32 %667, 3\l  %693 = add i32 %645, %692\l  %694 = sext i32 %693 to i64\l  %695 = getelementptr inbounds float, float addrspace(1)* %0, i64 %694\l  %696 = load float, float addrspace(1)* %695, align 4, !tbaa !7\l  %697 = sub i32 %647, %692\l  %698 = sext i32 %697 to i64\l  %699 = getelementptr inbounds float, float addrspace(1)* %1, i64 %698\l  store float %696, float addrspace(1)* %699, align 4, !tbaa !7\l  %700 = or i32 %667, 4\l  %701 = add i32 %645, %700\l  %702 = sext i32 %701 to i64\l  %703 = getelementptr inbounds float, float addrspace(1)* %0, i64 %702\l  %704 = load float, float addrspace(1)* %703, align 4, !tbaa !7\l  %705 = sub i32 %647, %700\l  %706 = sext i32 %705 to i64\l  %707 = getelementptr inbounds float, float addrspace(1)* %1, i64 %706\l  store float %704, float addrspace(1)* %707, align 4, !tbaa !7\l  %708 = or i32 %667, 5\l  %709 = add i32 %645, %708\l  %710 = sext i32 %709 to i64\l  %711 = getelementptr inbounds float, float addrspace(1)* %0, i64 %710\l  %712 = load float, float addrspace(1)* %711, align 4, !tbaa !7\l  %713 = sub i32 %647, %708\l  %714 = sext i32 %713 to i64\l  %715 = getelementptr inbounds float, float addrspace(1)* %1, i64 %714\l  store float %712, float addrspace(1)* %715, align 4, !tbaa !7\l  %716 = or i32 %667, 6\l  %717 = add i32 %645, %716\l  %718 = sext i32 %717 to i64\l  %719 = getelementptr inbounds float, float addrspace(1)* %0, i64 %718\l  %720 = load float, float addrspace(1)* %719, align 4, !tbaa !7\l  %721 = sub i32 %647, %716\l  %722 = sext i32 %721 to i64\l  %723 = getelementptr inbounds float, float addrspace(1)* %1, i64 %722\l  store float %720, float addrspace(1)* %723, align 4, !tbaa !7\l  %724 = or i32 %667, 7\l  %725 = add i32 %645, %724\l  %726 = sext i32 %725 to i64\l  %727 = getelementptr inbounds float, float addrspace(1)* %0, i64 %726\l  %728 = load float, float addrspace(1)* %727, align 4, !tbaa !7\l  %729 = sub i32 %647, %724\l  %730 = sext i32 %729 to i64\l  %731 = getelementptr inbounds float, float addrspace(1)* %1, i64 %730\l  store float %728, float addrspace(1)* %731, align 4, !tbaa !7\l  %732 = add nuw nsw i32 %667, 8\l  %733 = add i32 %668, 8\l  %734 = icmp eq i32 %733, %640\l  br i1 %734, label %648, label %666, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4e08b40:s0 -> Node0x4e08ab0;
	Node0x4e08b40:s1 -> Node0x4e08b40;
	Node0x4de87b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%735:\l735:                                              \l  ret void\l}"];
}
