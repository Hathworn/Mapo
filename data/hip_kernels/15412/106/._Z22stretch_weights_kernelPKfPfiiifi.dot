digraph "CFG for '_Z22stretch_weights_kernelPKfPfiiifi' function" {
	label="CFG for '_Z22stretch_weights_kernelPKfPfiiifi' function";

	Node0x64a84d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = mul nsw i32 %4, %4\l  %18 = mul nsw i32 %16, %17\l  %19 = sdiv i32 %2, %17\l  %20 = sdiv i32 %19, 4\l  %21 = sdiv i32 %16, %20\l  %22 = icmp slt i32 %18, %2\l  br i1 %22, label %23, label %295\l|{<s0>T|<s1>F}}"];
	Node0x64a84d0:s0 -> Node0x64aa710;
	Node0x64a84d0:s1 -> Node0x64aa7a0;
	Node0x64aa710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%23:\l23:                                               \l  %24 = icmp eq i32 %21, 0\l  br i1 %24, label %25, label %113\l|{<s0>T|<s1>F}}"];
	Node0x64aa710:s0 -> Node0x64aa9a0;
	Node0x64aa710:s1 -> Node0x64aa9f0;
	Node0x64aa9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%25:\l25:                                               \l  %26 = icmp sgt i32 %4, 0\l  br i1 %26, label %27, label %295\l|{<s0>T|<s1>F}}"];
	Node0x64aa9a0:s0 -> Node0x64aabc0;
	Node0x64aa9a0:s1 -> Node0x64aa7a0;
	Node0x64aabc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%27:\l27:                                               \l  %28 = and i32 %4, 7\l  %29 = icmp ult i32 %4, 8\l  %30 = and i32 %4, -8\l  %31 = icmp eq i32 %28, 0\l  br label %32\l}"];
	Node0x64aabc0 -> Node0x64aaf90;
	Node0x64aaf90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%32:\l32:                                               \l  %33 = phi i32 [ %50, %49 ], [ 0, %27 ]\l  %34 = add i32 %33, %18\l  br i1 %29, label %35, label %52\l|{<s0>T|<s1>F}}"];
	Node0x64aaf90:s0 -> Node0x64ab350;
	Node0x64aaf90:s1 -> Node0x64ab3e0;
	Node0x64ab350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%35:\l35:                                               \l  %36 = phi i32 [ 0, %32 ], [ %110, %52 ]\l  br i1 %31, label %49, label %37\l|{<s0>T|<s1>F}}"];
	Node0x64ab350:s0 -> Node0x64aa360;
	Node0x64ab350:s1 -> Node0x64ab600;
	Node0x64ab600 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%37:\l37:                                               \l  %38 = phi i32 [ %46, %37 ], [ %36, %35 ]\l  %39 = phi i32 [ %47, %37 ], [ 0, %35 ]\l  %40 = mul nsw i32 %38, %4\l  %41 = add i32 %34, %40\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %42\l  store float %44, float addrspace(1)* %45, align 4, !tbaa !7\l  %46 = add nuw nsw i32 %38, 1\l  %47 = add i32 %39, 1\l  %48 = icmp eq i32 %47, %28\l  br i1 %48, label %49, label %37, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x64ab600:s0 -> Node0x64aa360;
	Node0x64ab600:s1 -> Node0x64ab600;
	Node0x64aa360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%49:\l49:                                               \l  %50 = add nuw nsw i32 %33, 1\l  %51 = icmp eq i32 %50, %4\l  br i1 %51, label %295, label %32, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x64aa360:s0 -> Node0x64aa7a0;
	Node0x64aa360:s1 -> Node0x64aaf90;
	Node0x64ab3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%52:\l52:                                               \l  %53 = phi i32 [ %110, %52 ], [ 0, %32 ]\l  %54 = phi i32 [ %111, %52 ], [ 0, %32 ]\l  %55 = mul nsw i32 %53, %4\l  %56 = add i32 %34, %55\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  store float %59, float addrspace(1)* %60, align 4, !tbaa !7\l  %61 = or i32 %53, 1\l  %62 = mul nsw i32 %61, %4\l  %63 = add i32 %34, %62\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  store float %66, float addrspace(1)* %67, align 4, !tbaa !7\l  %68 = or i32 %53, 2\l  %69 = mul nsw i32 %68, %4\l  %70 = add i32 %34, %69\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %71\l  store float %73, float addrspace(1)* %74, align 4, !tbaa !7\l  %75 = or i32 %53, 3\l  %76 = mul nsw i32 %75, %4\l  %77 = add i32 %34, %76\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  store float %80, float addrspace(1)* %81, align 4, !tbaa !7\l  %82 = or i32 %53, 4\l  %83 = mul nsw i32 %82, %4\l  %84 = add i32 %34, %83\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85\l  store float %87, float addrspace(1)* %88, align 4, !tbaa !7\l  %89 = or i32 %53, 5\l  %90 = mul nsw i32 %89, %4\l  %91 = add i32 %34, %90\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7\l  %95 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  store float %94, float addrspace(1)* %95, align 4, !tbaa !7\l  %96 = or i32 %53, 6\l  %97 = mul nsw i32 %96, %4\l  %98 = add i32 %34, %97\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  store float %101, float addrspace(1)* %102, align 4, !tbaa !7\l  %103 = or i32 %53, 7\l  %104 = mul nsw i32 %103, %4\l  %105 = add i32 %34, %104\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %106\l  store float %108, float addrspace(1)* %109, align 4, !tbaa !7\l  %110 = add nuw nsw i32 %53, 8\l  %111 = add i32 %54, 8\l  %112 = icmp eq i32 %111, %30\l  br i1 %112, label %35, label %52, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x64ab3e0:s0 -> Node0x64ab350;
	Node0x64ab3e0:s1 -> Node0x64ab3e0;
	Node0x64aa9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%113:\l113:                                              \l  %114 = icmp sgt i32 %21, 0\l  br i1 %114, label %115, label %295\l|{<s0>T|<s1>F}}"];
	Node0x64aa9f0:s0 -> Node0x64af450;
	Node0x64aa9f0:s1 -> Node0x64aa7a0;
	Node0x64af450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%115:\l115:                                              \l  switch i32 %21, label %118 [\l    i32 1, label %119\l    i32 2, label %116\l    i32 3, label %117\l  ]\l|{<s0>def|<s1>1|<s2>2|<s3>3}}"];
	Node0x64af450:s0 -> Node0x64af550;
	Node0x64af450:s1 -> Node0x64af5a0;
	Node0x64af450:s2 -> Node0x64af630;
	Node0x64af450:s3 -> Node0x64af6c0;
	Node0x64af630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%116:\l116:                                              \l  br label %119\l}"];
	Node0x64af630 -> Node0x64af5a0;
	Node0x64af6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%117:\l117:                                              \l  br label %119\l}"];
	Node0x64af6c0 -> Node0x64af5a0;
	Node0x64af550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%118:\l118:                                              \l  br label %119\l}"];
	Node0x64af550 -> Node0x64af5a0;
	Node0x64af5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%119:\l119:                                              \l  %120 = phi float [ 0x3FE99999A0000000, %116 ], [ 0x3FF4CCCCC0000000, %117 ],\l... [ 0x3FE4CCCCC0000000, %115 ], [ %5, %118 ]\l  %121 = icmp eq i32 %6, 0\l  %122 = fdiv contract float 1.000000e+00, %120\l  %123 = select i1 %121, float %120, float %122\l  %124 = sdiv i32 %4, 2\l  %125 = icmp sgt i32 %4, 0\l  br i1 %125, label %126, label %295\l|{<s0>T|<s1>F}}"];
	Node0x64af5a0:s0 -> Node0x64b0800;
	Node0x64af5a0:s1 -> Node0x64aa7a0;
	Node0x64b0800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%126:\l126:                                              \l  %127 = sitofp i32 %124 to float\l  br label %128\l}"];
	Node0x64b0800 -> Node0x64b09b0;
	Node0x64b09b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%128:\l128:                                              \l  %129 = phi i32 [ 0, %126 ], [ %160, %159 ]\l  %130 = sub nsw i32 %129, %124\l  %131 = sitofp i32 %130 to float\l  %132 = fdiv contract float %131, %123\l  %133 = fadd contract float %132, %127\l  %134 = tail call float @llvm.floor.f32(float %133)\l  %135 = fptosi float %134 to i32\l  %136 = tail call float @llvm.ceil.f32(float %133)\l  %137 = fptosi float %136 to i32\l  %138 = icmp eq i32 %135, %137\l  %139 = add nsw i32 %135, 1\l  %140 = select i1 %138, i32 %139, i32 %137\l  %141 = sitofp i32 %140 to float\l  %142 = fsub contract float %141, %133\l  %143 = sitofp i32 %135 to float\l  %144 = fsub contract float %133, %143\l  %145 = icmp sgt i32 %135, -1\l  %146 = icmp slt i32 %135, %4\l  %147 = mul nsw i32 %135, %4\l  %148 = icmp sgt i32 %140, -1\l  %149 = icmp slt i32 %140, %4\l  %150 = mul nsw i32 %140, %4\l  %151 = mul nsw i32 %129, %4\l  %152 = add i32 %151, %18\l  br label %162\l}"];
	Node0x64b09b0 -> Node0x64b1ef0;
	Node0x64b1ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%153:\l153:                                              \l  br i1 %125, label %154, label %295\l|{<s0>T|<s1>F}}"];
	Node0x64b1ff0:s0 -> Node0x64b2080;
	Node0x64b1ff0:s1 -> Node0x64aa7a0;
	Node0x64b2080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%154:\l154:                                              \l  %155 = and i32 %4, 3\l  %156 = icmp ult i32 %4, 4\l  %157 = and i32 %4, -4\l  %158 = icmp eq i32 %155, 0\l  br label %246\l}"];
	Node0x64b2080 -> Node0x64b23f0;
	Node0x64ad190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%159:\l159:                                              \l  %160 = add nuw nsw i32 %129, 1\l  %161 = icmp eq i32 %160, %4\l  br i1 %161, label %153, label %128, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x64ad190:s0 -> Node0x64b1ff0;
	Node0x64ad190:s1 -> Node0x64b09b0;
	Node0x64b1ef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%162:\l162:                                              \l  %163 = phi i32 [ 0, %128 ], [ %244, %239 ]\l  %164 = sub nsw i32 %163, %124\l  %165 = sitofp i32 %164 to float\l  %166 = fdiv contract float %165, %123\l  %167 = fadd contract float %166, %127\l  %168 = tail call float @llvm.floor.f32(float %167)\l  %169 = fptosi float %168 to i32\l  %170 = tail call float @llvm.ceil.f32(float %167)\l  %171 = fptosi float %170 to i32\l  %172 = icmp eq i32 %169, %171\l  %173 = add nsw i32 %169, 1\l  %174 = select i1 %172, i32 %173, i32 %171\l  %175 = sitofp i32 %174 to float\l  %176 = fsub contract float %175, %167\l  %177 = sitofp i32 %169 to float\l  %178 = fsub contract float %167, %177\l  %179 = icmp sgt i32 %169, -1\l  br i1 %179, label %180, label %193\l|{<s0>T|<s1>F}}"];
	Node0x64b1ef0:s0 -> Node0x64b3230;
	Node0x64b1ef0:s1 -> Node0x64b32c0;
	Node0x64b3230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%180:\l180:                                              \l  %181 = icmp slt i32 %169, %4\l  %182 = select i1 %181, i1 %145, i1 false\l  %183 = select i1 %182, i1 %146, i1 false\l  br i1 %183, label %184, label %193\l|{<s0>T|<s1>F}}"];
	Node0x64b3230:s0 -> Node0x64b35f0;
	Node0x64b3230:s1 -> Node0x64b32c0;
	Node0x64b35f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%184:\l184:                                              \l  %185 = add i32 %18, %169\l  %186 = add i32 %185, %147\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !7\l  %190 = fmul contract float %176, %189\l  %191 = fmul contract float %142, %190\l  %192 = fadd contract float %191, 0.000000e+00\l  br label %193\l}"];
	Node0x64b35f0 -> Node0x64b32c0;
	Node0x64b32c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%193:\l193:                                              \l  %194 = phi float [ %192, %184 ], [ 0.000000e+00, %180 ], [ 0.000000e+00,\l... %162 ]\l  %195 = icmp sgt i32 %174, -1\l  br i1 %195, label %196, label %209\l|{<s0>T|<s1>F}}"];
	Node0x64b32c0:s0 -> Node0x64b3d40;
	Node0x64b32c0:s1 -> Node0x64b3d90;
	Node0x64b3d40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%196:\l196:                                              \l  %197 = icmp slt i32 %174, %4\l  %198 = select i1 %197, i1 %145, i1 false\l  %199 = select i1 %198, i1 %146, i1 false\l  br i1 %199, label %200, label %209\l|{<s0>T|<s1>F}}"];
	Node0x64b3d40:s0 -> Node0x64b40c0;
	Node0x64b3d40:s1 -> Node0x64b3d90;
	Node0x64b40c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%200:\l200:                                              \l  %201 = add i32 %174, %18\l  %202 = add i32 %201, %147\l  %203 = sext i32 %202 to i64\l  %204 = getelementptr inbounds float, float addrspace(1)* %0, i64 %203\l  %205 = load float, float addrspace(1)* %204, align 4, !tbaa !7\l  %206 = fmul contract float %178, %205\l  %207 = fmul contract float %142, %206\l  %208 = fadd contract float %194, %207\l  br label %209\l}"];
	Node0x64b40c0 -> Node0x64b3d90;
	Node0x64b3d90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%209:\l209:                                              \l  %210 = phi float [ %208, %200 ], [ %194, %196 ], [ %194, %193 ]\l  br i1 %179, label %211, label %224\l|{<s0>T|<s1>F}}"];
	Node0x64b3d90:s0 -> Node0x64b4750;
	Node0x64b3d90:s1 -> Node0x64b47a0;
	Node0x64b4750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%211:\l211:                                              \l  %212 = icmp slt i32 %169, %4\l  %213 = select i1 %212, i1 %148, i1 false\l  %214 = select i1 %213, i1 %149, i1 false\l  br i1 %214, label %215, label %224\l|{<s0>T|<s1>F}}"];
	Node0x64b4750:s0 -> Node0x64b4a90;
	Node0x64b4750:s1 -> Node0x64b47a0;
	Node0x64b4a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%215:\l215:                                              \l  %216 = add i32 %18, %169\l  %217 = add i32 %216, %150\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds float, float addrspace(1)* %0, i64 %218\l  %220 = load float, float addrspace(1)* %219, align 4, !tbaa !7\l  %221 = fmul contract float %176, %220\l  %222 = fmul contract float %144, %221\l  %223 = fadd contract float %210, %222\l  br label %224\l}"];
	Node0x64b4a90 -> Node0x64b47a0;
	Node0x64b47a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%224:\l224:                                              \l  %225 = phi float [ %223, %215 ], [ %210, %211 ], [ %210, %209 ]\l  br i1 %195, label %226, label %239\l|{<s0>T|<s1>F}}"];
	Node0x64b47a0:s0 -> Node0x64b5120;
	Node0x64b47a0:s1 -> Node0x64b2770;
	Node0x64b5120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%226:\l226:                                              \l  %227 = icmp slt i32 %174, %4\l  %228 = select i1 %227, i1 %148, i1 false\l  %229 = select i1 %228, i1 %149, i1 false\l  br i1 %229, label %230, label %239\l|{<s0>T|<s1>F}}"];
	Node0x64b5120:s0 -> Node0x64b5410;
	Node0x64b5120:s1 -> Node0x64b2770;
	Node0x64b5410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%230:\l230:                                              \l  %231 = add i32 %174, %18\l  %232 = add i32 %231, %150\l  %233 = sext i32 %232 to i64\l  %234 = getelementptr inbounds float, float addrspace(1)* %0, i64 %233\l  %235 = load float, float addrspace(1)* %234, align 4, !tbaa !7\l  %236 = fmul contract float %178, %235\l  %237 = fmul contract float %144, %236\l  %238 = fadd contract float %225, %237\l  br label %239\l}"];
	Node0x64b5410 -> Node0x64b2770;
	Node0x64b2770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%239:\l239:                                              \l  %240 = phi float [ %238, %230 ], [ %225, %226 ], [ %225, %224 ]\l  %241 = add i32 %152, %163\l  %242 = sext i32 %241 to i64\l  %243 = getelementptr inbounds float, float addrspace(1)* %1, i64 %242\l  store float %240, float addrspace(1)* %243, align 4, !tbaa !7\l  %244 = add nuw nsw i32 %163, 1\l  %245 = icmp eq i32 %244, %4\l  br i1 %245, label %159, label %162, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x64b2770:s0 -> Node0x64ad190;
	Node0x64b2770:s1 -> Node0x64b1ef0;
	Node0x64b23f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%246:\l246:                                              \l  %247 = phi i32 [ %264, %263 ], [ 0, %154 ]\l  %248 = mul nsw i32 %247, %4\l  %249 = add i32 %248, %18\l  br i1 %156, label %250, label %266\l|{<s0>T|<s1>F}}"];
	Node0x64b23f0:s0 -> Node0x64b6140;
	Node0x64b23f0:s1 -> Node0x64b61d0;
	Node0x64b6140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%250:\l250:                                              \l  %251 = phi i32 [ 0, %246 ], [ %292, %266 ]\l  br i1 %158, label %263, label %252\l|{<s0>T|<s1>F}}"];
	Node0x64b6140:s0 -> Node0x64b5f20;
	Node0x64b6140:s1 -> Node0x64b63c0;
	Node0x64b63c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%252:\l252:                                              \l  %253 = phi i32 [ %260, %252 ], [ %251, %250 ]\l  %254 = phi i32 [ %261, %252 ], [ 0, %250 ]\l  %255 = add i32 %249, %253\l  %256 = sext i32 %255 to i64\l  %257 = getelementptr inbounds float, float addrspace(1)* %1, i64 %256\l  %258 = load float, float addrspace(1)* %257, align 4, !tbaa !7\l  %259 = fdiv contract float %258, %123\l  store float %259, float addrspace(1)* %257, align 4, !tbaa !7\l  %260 = add nuw nsw i32 %253, 1\l  %261 = add i32 %254, 1\l  %262 = icmp eq i32 %261, %155\l  br i1 %262, label %263, label %252, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x64b63c0:s0 -> Node0x64b5f20;
	Node0x64b63c0:s1 -> Node0x64b63c0;
	Node0x64b5f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%263:\l263:                                              \l  %264 = add nuw nsw i32 %247, 1\l  %265 = icmp eq i32 %264, %4\l  br i1 %265, label %295, label %246, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x64b5f20:s0 -> Node0x64aa7a0;
	Node0x64b5f20:s1 -> Node0x64b23f0;
	Node0x64b61d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%266:\l266:                                              \l  %267 = phi i32 [ %292, %266 ], [ 0, %246 ]\l  %268 = phi i32 [ %293, %266 ], [ 0, %246 ]\l  %269 = add i32 %249, %267\l  %270 = sext i32 %269 to i64\l  %271 = getelementptr inbounds float, float addrspace(1)* %1, i64 %270\l  %272 = load float, float addrspace(1)* %271, align 4, !tbaa !7\l  %273 = fdiv contract float %272, %123\l  store float %273, float addrspace(1)* %271, align 4, !tbaa !7\l  %274 = or i32 %267, 1\l  %275 = add i32 %249, %274\l  %276 = sext i32 %275 to i64\l  %277 = getelementptr inbounds float, float addrspace(1)* %1, i64 %276\l  %278 = load float, float addrspace(1)* %277, align 4, !tbaa !7\l  %279 = fdiv contract float %278, %123\l  store float %279, float addrspace(1)* %277, align 4, !tbaa !7\l  %280 = or i32 %267, 2\l  %281 = add i32 %249, %280\l  %282 = sext i32 %281 to i64\l  %283 = getelementptr inbounds float, float addrspace(1)* %1, i64 %282\l  %284 = load float, float addrspace(1)* %283, align 4, !tbaa !7\l  %285 = fdiv contract float %284, %123\l  store float %285, float addrspace(1)* %283, align 4, !tbaa !7\l  %286 = or i32 %267, 3\l  %287 = add i32 %249, %286\l  %288 = sext i32 %287 to i64\l  %289 = getelementptr inbounds float, float addrspace(1)* %1, i64 %288\l  %290 = load float, float addrspace(1)* %289, align 4, !tbaa !7\l  %291 = fdiv contract float %290, %123\l  store float %291, float addrspace(1)* %289, align 4, !tbaa !7\l  %292 = add nuw nsw i32 %267, 4\l  %293 = add i32 %268, 4\l  %294 = icmp eq i32 %293, %157\l  br i1 %294, label %250, label %266, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x64b61d0:s0 -> Node0x64b6140;
	Node0x64b61d0:s1 -> Node0x64b61d0;
	Node0x64aa7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%295:\l295:                                              \l  ret void\l}"];
}
