digraph "CFG for '_Z21input_shortcut_kernelPfiiiiiiiiiiS_iiiS_' function" {
	label="CFG for '_Z21input_shortcut_kernelPfiiiiiiiiiiS_iiiS_' function";

	Node0x58c2ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%16:\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 12\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 4, !tbaa !4\l  %23 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 4, !range !13, !invariant.load\l... !14\l  %26 = zext i16 %25 to i32\l  %27 = udiv i32 %22, %26\l  %28 = mul i32 %27, %26\l  %29 = icmp ugt i32 %22, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %18\l  %33 = add i32 %32, %17\l  %34 = mul i32 %33, %26\l  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %36 = add i32 %34, %35\l  %37 = icmp slt i32 %36, %1\l  br i1 %37, label %38, label %77\l|{<s0>T|<s1>F}}"];
	Node0x58c2ea0:s0 -> Node0x58c6440;
	Node0x58c2ea0:s1 -> Node0x58c64d0;
	Node0x58c6440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%38:\l38:                                               \l  %39 = freeze i32 %36\l  %40 = freeze i32 %2\l  %41 = sdiv i32 %39, %40\l  %42 = mul i32 %41, %40\l  %43 = sub i32 %39, %42\l  %44 = freeze i32 %3\l  %45 = sdiv i32 %41, %44\l  %46 = mul i32 %45, %44\l  %47 = sub i32 %41, %46\l  %48 = freeze i32 %4\l  %49 = sdiv i32 %45, %48\l  %50 = mul i32 %49, %48\l  %51 = sub i32 %45, %50\l  %52 = srem i32 %49, %7\l  %53 = mul nsw i32 %43, %6\l  %54 = mul nsw i32 %47, %6\l  %55 = mul nsw i32 %52, %14\l  %56 = add nsw i32 %55, %51\l  %57 = mul nsw i32 %56, %13\l  %58 = add nsw i32 %57, %54\l  %59 = mul nsw i32 %58, %12\l  %60 = add nsw i32 %59, %53\l  %61 = mul nsw i32 %43, %5\l  %62 = mul nsw i32 %47, %5\l  %63 = mul nsw i32 %52, %10\l  %64 = add nsw i32 %63, %51\l  %65 = mul nsw i32 %64, %9\l  %66 = add nsw i32 %65, %62\l  %67 = mul nsw i32 %66, %8\l  %68 = add nsw i32 %67, %61\l  %69 = sext i32 %60 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %72 = sext i32 %68 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %11, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %75 = fadd contract float %71, %74\l  %76 = getelementptr inbounds float, float addrspace(1)* %15, i64 %69\l  store float %75, float addrspace(1)* %76, align 4, !tbaa !16\l  br label %77\l}"];
	Node0x58c6440 -> Node0x58c64d0;
	Node0x58c64d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%77:\l77:                                               \l  ret void\l}"];
}
