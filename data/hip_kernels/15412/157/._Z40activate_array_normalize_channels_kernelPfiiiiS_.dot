digraph "CFG for '_Z40activate_array_normalize_channels_kernelPfiiiiS_' function" {
	label="CFG for '_Z40activate_array_normalize_channels_kernelPfiiiiS_' function";

	Node0x5270fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = freeze i32 %15\l  %17 = freeze i32 %4\l  %18 = sdiv i32 %16, %17\l  %19 = mul i32 %18, %17\l  %20 = sub i32 %16, %19\l  %21 = icmp slt i32 %15, %1\l  br i1 %21, label %22, label %186\l|{<s0>T|<s1>F}}"];
	Node0x5270fc0:s0 -> Node0x52731a0;
	Node0x5270fc0:s1 -> Node0x5273230;
	Node0x52731a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%22:\l22:                                               \l  %23 = icmp sgt i32 %3, 0\l  br i1 %23, label %24, label %51\l|{<s0>T|<s1>F}}"];
	Node0x52731a0:s0 -> Node0x5273400;
	Node0x52731a0:s1 -> Node0x5273450;
	Node0x5273400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = mul i32 %18, %3\l  %26 = and i32 %3, 7\l  %27 = icmp ult i32 %3, 8\l  br i1 %27, label %30, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5273400:s0 -> Node0x52737a0;
	Node0x5273400:s1 -> Node0x52737f0;
	Node0x52737f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%28:\l28:                                               \l  %29 = and i32 %3, -8\l  br label %59\l}"];
	Node0x52737f0 -> Node0x52739f0;
	Node0x52737a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = phi float [ undef, %24 ], [ %141, %59 ]\l  %32 = phi float [ 0x3F1A36E2E0000000, %24 ], [ %141, %59 ]\l  %33 = phi i32 [ 0, %24 ], [ %142, %59 ]\l  %34 = icmp eq i32 %26, 0\l  br i1 %34, label %51, label %35\l|{<s0>T|<s1>F}}"];
	Node0x52737a0:s0 -> Node0x5273450;
	Node0x52737a0:s1 -> Node0x5272f10;
	Node0x5272f10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%35:\l35:                                               \l  %36 = phi float [ %47, %35 ], [ %32, %30 ]\l  %37 = phi i32 [ %48, %35 ], [ %33, %30 ]\l  %38 = phi i32 [ %49, %35 ], [ 0, %30 ]\l  %39 = add i32 %37, %25\l  %40 = mul i32 %39, %4\l  %41 = add i32 %40, %20\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %45 = fcmp contract ogt float %44, -0.000000e+00\l  %46 = select i1 %45, float %44, float -0.000000e+00\l  %47 = fadd contract float %36, %46\l  %48 = add nuw nsw i32 %37, 1\l  %49 = add i32 %38, 1\l  %50 = icmp eq i32 %49, %26\l  br i1 %50, label %51, label %35, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5272f10:s0 -> Node0x5273450;
	Node0x5272f10:s1 -> Node0x5272f10;
	Node0x5273450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%51:\l51:                                               \l  %52 = phi float [ 0x3F1A36E2E0000000, %22 ], [ %31, %30 ], [ %47, %35 ]\l  br i1 %23, label %53, label %186\l|{<s0>T|<s1>F}}"];
	Node0x5273450:s0 -> Node0x52762b0;
	Node0x5273450:s1 -> Node0x5273230;
	Node0x52762b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%53:\l53:                                               \l  %54 = mul i32 %18, %3\l  %55 = and i32 %3, 1\l  %56 = icmp eq i32 %3, 1\l  br i1 %56, label %172, label %57\l|{<s0>T|<s1>F}}"];
	Node0x52762b0:s0 -> Node0x5276560;
	Node0x52762b0:s1 -> Node0x52765b0;
	Node0x52765b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%57:\l57:                                               \l  %58 = and i32 %3, -2\l  br label %145\l}"];
	Node0x52765b0 -> Node0x5276780;
	Node0x52739f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%59:\l59:                                               \l  %60 = phi float [ 0x3F1A36E2E0000000, %28 ], [ %141, %59 ]\l  %61 = phi i32 [ 0, %28 ], [ %142, %59 ]\l  %62 = phi i32 [ 0, %28 ], [ %143, %59 ]\l  %63 = add i32 %61, %25\l  %64 = mul i32 %63, %4\l  %65 = add i32 %64, %20\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fcmp contract ogt float %68, -0.000000e+00\l  %70 = select i1 %69, float %68, float -0.000000e+00\l  %71 = fadd contract float %60, %70\l  %72 = or i32 %61, 1\l  %73 = add i32 %72, %25\l  %74 = mul i32 %73, %4\l  %75 = add i32 %74, %20\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fcmp contract ogt float %78, -0.000000e+00\l  %80 = select i1 %79, float %78, float -0.000000e+00\l  %81 = fadd contract float %71, %80\l  %82 = or i32 %61, 2\l  %83 = add i32 %82, %25\l  %84 = mul i32 %83, %4\l  %85 = add i32 %84, %20\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = fcmp contract ogt float %88, -0.000000e+00\l  %90 = select i1 %89, float %88, float -0.000000e+00\l  %91 = fadd contract float %81, %90\l  %92 = or i32 %61, 3\l  %93 = add i32 %92, %25\l  %94 = mul i32 %93, %4\l  %95 = add i32 %94, %20\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = fcmp contract ogt float %98, -0.000000e+00\l  %100 = select i1 %99, float %98, float -0.000000e+00\l  %101 = fadd contract float %91, %100\l  %102 = or i32 %61, 4\l  %103 = add i32 %102, %25\l  %104 = mul i32 %103, %4\l  %105 = add i32 %104, %20\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fcmp contract ogt float %108, -0.000000e+00\l  %110 = select i1 %109, float %108, float -0.000000e+00\l  %111 = fadd contract float %101, %110\l  %112 = or i32 %61, 5\l  %113 = add i32 %112, %25\l  %114 = mul i32 %113, %4\l  %115 = add i32 %114, %20\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = fcmp contract ogt float %118, -0.000000e+00\l  %120 = select i1 %119, float %118, float -0.000000e+00\l  %121 = fadd contract float %111, %120\l  %122 = or i32 %61, 6\l  %123 = add i32 %122, %25\l  %124 = mul i32 %123, %4\l  %125 = add i32 %124, %20\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = fcmp contract ogt float %128, -0.000000e+00\l  %130 = select i1 %129, float %128, float -0.000000e+00\l  %131 = fadd contract float %121, %130\l  %132 = or i32 %61, 7\l  %133 = add i32 %132, %25\l  %134 = mul i32 %133, %4\l  %135 = add i32 %134, %20\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %139 = fcmp contract ogt float %138, -0.000000e+00\l  %140 = select i1 %139, float %138, float -0.000000e+00\l  %141 = fadd contract float %131, %140\l  %142 = add nuw nsw i32 %61, 8\l  %143 = add i32 %62, 8\l  %144 = icmp eq i32 %143, %29\l  br i1 %144, label %30, label %59, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x52739f0:s0 -> Node0x52737a0;
	Node0x52739f0:s1 -> Node0x52739f0;
	Node0x5276780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%145:\l145:                                              \l  %146 = phi i32 [ 0, %57 ], [ %169, %145 ]\l  %147 = phi i32 [ 0, %57 ], [ %170, %145 ]\l  %148 = add i32 %146, %54\l  %149 = mul i32 %148, %4\l  %150 = add i32 %149, %20\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7\l  %154 = fcmp contract ogt float %153, 0.000000e+00\l  %155 = fdiv contract float %153, %52\l  %156 = select i1 %154, float %155, float 0.000000e+00\l  %157 = getelementptr inbounds float, float addrspace(1)* %5, i64 %151\l  store float %156, float addrspace(1)* %157, align 4, !tbaa !7\l  %158 = or i32 %146, 1\l  %159 = add i32 %158, %54\l  %160 = mul i32 %159, %4\l  %161 = add i32 %160, %20\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7\l  %165 = fcmp contract ogt float %164, 0.000000e+00\l  %166 = fdiv contract float %164, %52\l  %167 = select i1 %165, float %166, float 0.000000e+00\l  %168 = getelementptr inbounds float, float addrspace(1)* %5, i64 %162\l  store float %167, float addrspace(1)* %168, align 4, !tbaa !7\l  %169 = add nuw nsw i32 %146, 2\l  %170 = add i32 %147, 2\l  %171 = icmp eq i32 %170, %58\l  br i1 %171, label %172, label %145, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5276780:s0 -> Node0x5276560;
	Node0x5276780:s1 -> Node0x5276780;
	Node0x5276560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%172:\l172:                                              \l  %173 = phi i32 [ 0, %53 ], [ %169, %145 ]\l  %174 = icmp eq i32 %55, 0\l  br i1 %174, label %186, label %175\l|{<s0>T|<s1>F}}"];
	Node0x5276560:s0 -> Node0x5273230;
	Node0x5276560:s1 -> Node0x527bb10;
	Node0x527bb10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%175:\l175:                                              \l  %176 = add i32 %173, %54\l  %177 = mul i32 %176, %4\l  %178 = add i32 %177, %20\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %0, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !7\l  %182 = fcmp contract ogt float %181, 0.000000e+00\l  %183 = fdiv contract float %181, %52\l  %184 = select i1 %182, float %183, float 0.000000e+00\l  %185 = getelementptr inbounds float, float addrspace(1)* %5, i64 %179\l  store float %184, float addrspace(1)* %185, align 4, !tbaa !7\l  br label %186\l}"];
	Node0x527bb10 -> Node0x5273230;
	Node0x5273230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%186:\l186:                                              \l  ret void\l}"];
}
