digraph "CFG for '_Z9self_dotsiiPdS_' function" {
	label="CFG for '_Z9self_dotsiiPdS_' function";

	Node0x4c51080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %0\l  br i1 %14, label %15, label %107\l|{<s0>T|<s1>F}}"];
	Node0x4c51080:s0 -> Node0x4c52f80;
	Node0x4c51080:s1 -> Node0x4c53010;
	Node0x4c52f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = icmp sgt i32 %1, 0\l  br i1 %16, label %17, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4c52f80:s0 -> Node0x4c527c0;
	Node0x4c52f80:s1 -> Node0x4c532f0;
	Node0x4c527c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = mul nsw i32 %13, %1\l  %19 = and i32 %1, 7\l  %20 = icmp ult i32 %1, 8\l  br i1 %20, label %23, label %21\l|{<s0>T|<s1>F}}"];
	Node0x4c527c0:s0 -> Node0x4c53600;
	Node0x4c527c0:s1 -> Node0x4c53650;
	Node0x4c53650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %1, -8\l  br label %45\l}"];
	Node0x4c53650 -> Node0x4c53850;
	Node0x4c53600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = phi double [ undef, %17 ], [ %103, %45 ]\l  %25 = phi double [ 0.000000e+00, %17 ], [ %103, %45 ]\l  %26 = phi i32 [ 0, %17 ], [ %104, %45 ]\l  %27 = icmp eq i32 %19, 0\l  br i1 %27, label %41, label %28\l|{<s0>T|<s1>F}}"];
	Node0x4c53600:s0 -> Node0x4c532f0;
	Node0x4c53600:s1 -> Node0x4c54ac0;
	Node0x4c54ac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi double [ %37, %28 ], [ %25, %23 ]\l  %30 = phi i32 [ %38, %28 ], [ %26, %23 ]\l  %31 = phi i32 [ %39, %28 ], [ 0, %23 ]\l  %32 = add nsw i32 %30, %18\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = fmul contract double %35, %35\l  %37 = fadd contract double %29, %36\l  %38 = add nuw nsw i32 %30, 1\l  %39 = add i32 %31, 1\l  %40 = icmp eq i32 %39, %19\l  br i1 %40, label %41, label %28, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4c54ac0:s0 -> Node0x4c532f0;
	Node0x4c54ac0:s1 -> Node0x4c54ac0;
	Node0x4c532f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%41:\l41:                                               \l  %42 = phi double [ 0.000000e+00, %15 ], [ %24, %23 ], [ %37, %28 ]\l  %43 = sext i32 %13 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %3, i64 %43\l  store double %42, double addrspace(1)* %44, align 8, !tbaa !7\l  br label %107\l}"];
	Node0x4c532f0 -> Node0x4c53010;
	Node0x4c53850 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%45:\l45:                                               \l  %46 = phi double [ 0.000000e+00, %21 ], [ %103, %45 ]\l  %47 = phi i32 [ 0, %21 ], [ %104, %45 ]\l  %48 = phi i32 [ 0, %21 ], [ %105, %45 ]\l  %49 = add nsw i32 %47, %18\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %2, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fmul contract double %52, %52\l  %54 = fadd contract double %46, %53\l  %55 = or i32 %47, 1\l  %56 = add nsw i32 %55, %18\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %2, i64 %57\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fmul contract double %59, %59\l  %61 = fadd contract double %54, %60\l  %62 = or i32 %47, 2\l  %63 = add nsw i32 %62, %18\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %2, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = fmul contract double %66, %66\l  %68 = fadd contract double %61, %67\l  %69 = or i32 %47, 3\l  %70 = add nsw i32 %69, %18\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds double, double addrspace(1)* %2, i64 %71\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = fmul contract double %73, %73\l  %75 = fadd contract double %68, %74\l  %76 = or i32 %47, 4\l  %77 = add nsw i32 %76, %18\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %2, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = fmul contract double %80, %80\l  %82 = fadd contract double %75, %81\l  %83 = or i32 %47, 5\l  %84 = add nsw i32 %83, %18\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds double, double addrspace(1)* %2, i64 %85\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = fmul contract double %87, %87\l  %89 = fadd contract double %82, %88\l  %90 = or i32 %47, 6\l  %91 = add nsw i32 %90, %18\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %2, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = fmul contract double %94, %94\l  %96 = fadd contract double %89, %95\l  %97 = or i32 %47, 7\l  %98 = add nsw i32 %97, %18\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %2, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fmul contract double %101, %101\l  %103 = fadd contract double %96, %102\l  %104 = add nuw nsw i32 %47, 8\l  %105 = add i32 %48, 8\l  %106 = icmp eq i32 %105, %22\l  br i1 %106, label %23, label %45, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4c53850:s0 -> Node0x4c53600;
	Node0x4c53850:s1 -> Node0x4c53850;
	Node0x4c53010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%107:\l107:                                              \l  ret void\l}"];
}
