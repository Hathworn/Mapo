digraph "CFG for '_Z11test_kerneliPdS_S_' function" {
	label="CFG for '_Z11test_kerneliPdS_S_' function";

	Node0x4d9a040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 4, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = mul i32 %18, %5\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %21 = add i32 %19, %20\l  %22 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !13, !invariant.load\l... !14\l  %25 = zext i16 %24 to i32\l  %26 = mul i32 %21, %25\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %26, %27\l  %30 = mul i32 %29, %13\l  %31 = add i32 %30, %28\l  %32 = icmp slt i32 %31, 2048\l  br i1 %32, label %33, label %181\l|{<s0>T|<s1>F}}"];
	Node0x4d9a040:s0 -> Node0x4d9bf40;
	Node0x4d9a040:s1 -> Node0x4d9bfd0;
	Node0x4d9bf40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%33:\l33:                                               \l  %34 = phi i32 [ %179, %171 ], [ 0, %4 ]\l  %35 = mul nsw i32 %34, %0\l  %36 = add nsw i32 %35, %31\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds double, double addrspace(1)* %2, i64 %37\l  %39 = load double, double addrspace(1)* %38, align 8, !tbaa !16\l  %40 = icmp eq i32 %34, 0\l  br i1 %40, label %171, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4d9bf40:s0 -> Node0x4d9e3a0;
	Node0x4d9bf40:s1 -> Node0x4d9e9b0;
	Node0x4d9e9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%41:\l41:                                               \l  %42 = and i32 %34, 7\l  %43 = icmp ult i32 %34, 8\l  br i1 %43, label %148, label %44\l|{<s0>T|<s1>F}}"];
	Node0x4d9e9b0:s0 -> Node0x4d9ec40;
	Node0x4d9e9b0:s1 -> Node0x4d9ec90;
	Node0x4d9ec90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%44:\l44:                                               \l  %45 = and i32 %34, 2147483640\l  br label %46\l}"];
	Node0x4d9ec90 -> Node0x4d9ee90;
	Node0x4d9ee90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%46:\l46:                                               \l  %47 = phi double [ %39, %44 ], [ %144, %46 ]\l  %48 = phi i32 [ 0, %44 ], [ %145, %46 ]\l  %49 = phi i32 [ 0, %44 ], [ %146, %46 ]\l  %50 = mul nsw i32 %48, %0\l  %51 = add nsw i32 %50, %34\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %1, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !16\l  %55 = add nsw i32 %50, %31\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %3, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !16\l  %59 = fmul contract double %54, %58\l  %60 = fsub contract double %47, %59\l  %61 = or i32 %48, 1\l  %62 = mul nsw i32 %61, %0\l  %63 = add nsw i32 %62, %34\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %1, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !16\l  %67 = add nsw i32 %62, %31\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %3, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !16\l  %71 = fmul contract double %66, %70\l  %72 = fsub contract double %60, %71\l  %73 = or i32 %48, 2\l  %74 = mul nsw i32 %73, %0\l  %75 = add nsw i32 %74, %34\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %1, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !16\l  %79 = add nsw i32 %74, %31\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %3, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !16\l  %83 = fmul contract double %78, %82\l  %84 = fsub contract double %72, %83\l  %85 = or i32 %48, 3\l  %86 = mul nsw i32 %85, %0\l  %87 = add nsw i32 %86, %34\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %1, i64 %88\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %91 = add nsw i32 %86, %31\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %3, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !16\l  %95 = fmul contract double %90, %94\l  %96 = fsub contract double %84, %95\l  %97 = or i32 %48, 4\l  %98 = mul nsw i32 %97, %0\l  %99 = add nsw i32 %98, %34\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds double, double addrspace(1)* %1, i64 %100\l  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !16\l  %103 = add nsw i32 %98, %31\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds double, double addrspace(1)* %3, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !16\l  %107 = fmul contract double %102, %106\l  %108 = fsub contract double %96, %107\l  %109 = or i32 %48, 5\l  %110 = mul nsw i32 %109, %0\l  %111 = add nsw i32 %110, %34\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds double, double addrspace(1)* %1, i64 %112\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !16\l  %115 = add nsw i32 %110, %31\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds double, double addrspace(1)* %3, i64 %116\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !16\l  %119 = fmul contract double %114, %118\l  %120 = fsub contract double %108, %119\l  %121 = or i32 %48, 6\l  %122 = mul nsw i32 %121, %0\l  %123 = add nsw i32 %122, %34\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds double, double addrspace(1)* %1, i64 %124\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !16\l  %127 = add nsw i32 %122, %31\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds double, double addrspace(1)* %3, i64 %128\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !16\l  %131 = fmul contract double %126, %130\l  %132 = fsub contract double %120, %131\l  %133 = or i32 %48, 7\l  %134 = mul nsw i32 %133, %0\l  %135 = add nsw i32 %134, %34\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds double, double addrspace(1)* %1, i64 %136\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !16\l  %139 = add nsw i32 %134, %31\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds double, double addrspace(1)* %3, i64 %140\l  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !16\l  %143 = fmul contract double %138, %142\l  %144 = fsub contract double %132, %143\l  %145 = add nuw nsw i32 %48, 8\l  %146 = add i32 %49, 8\l  %147 = icmp eq i32 %146, %45\l  br i1 %147, label %148, label %46, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4d9ee90:s0 -> Node0x4d9ec40;
	Node0x4d9ee90:s1 -> Node0x4d9ee90;
	Node0x4d9ec40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%148:\l148:                                              \l  %149 = phi double [ undef, %41 ], [ %144, %46 ]\l  %150 = phi double [ %39, %41 ], [ %144, %46 ]\l  %151 = phi i32 [ 0, %41 ], [ %145, %46 ]\l  %152 = icmp eq i32 %42, 0\l  br i1 %152, label %171, label %153\l|{<s0>T|<s1>F}}"];
	Node0x4d9ec40:s0 -> Node0x4d9e3a0;
	Node0x4d9ec40:s1 -> Node0x4da3c40;
	Node0x4da3c40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%153:\l153:                                              \l  %154 = phi double [ %167, %153 ], [ %150, %148 ]\l  %155 = phi i32 [ %168, %153 ], [ %151, %148 ]\l  %156 = phi i32 [ %169, %153 ], [ 0, %148 ]\l  %157 = mul nsw i32 %155, %0\l  %158 = add nsw i32 %157, %34\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds double, double addrspace(1)* %1, i64 %159\l  %161 = load double, double addrspace(1)* %160, align 8, !tbaa !16\l  %162 = add nsw i32 %157, %31\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds double, double addrspace(1)* %3, i64 %163\l  %165 = load double, double addrspace(1)* %164, align 8, !tbaa !16\l  %166 = fmul contract double %161, %165\l  %167 = fsub contract double %154, %166\l  %168 = add nuw nsw i32 %155, 1\l  %169 = add i32 %156, 1\l  %170 = icmp eq i32 %169, %42\l  br i1 %170, label %171, label %153, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4da3c40:s0 -> Node0x4d9e3a0;
	Node0x4da3c40:s1 -> Node0x4da3c40;
	Node0x4d9e3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%171:\l171:                                              \l  %172 = phi double [ %39, %33 ], [ %149, %148 ], [ %167, %153 ]\l  %173 = add nsw i32 %35, %34\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds double, double addrspace(1)* %1, i64 %174\l  %176 = load double, double addrspace(1)* %175, align 8, !tbaa !16\l  %177 = fdiv contract double %172, %176\l  %178 = getelementptr inbounds double, double addrspace(1)* %3, i64 %37\l  store double %177, double addrspace(1)* %178, align 8, !tbaa !16\l  %179 = add nuw nsw i32 %34, 1\l  %180 = icmp eq i32 %179, 2048\l  br i1 %180, label %181, label %33, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4d9e3a0:s0 -> Node0x4d9bfd0;
	Node0x4d9e3a0:s1 -> Node0x4d9bf40;
	Node0x4d9bfd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%181:\l181:                                              \l  ret void\l}"];
}
