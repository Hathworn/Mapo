digraph "CFG for '_Z14convert_to_rgbPfPhiiii' function" {
	label="CFG for '_Z14convert_to_rgbPfPhiiii' function";

	Node0x5757aa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = mul nsw i32 %7, %4\l  %10 = mul nsw i32 %8, %5\l  %11 = add nsw i32 %10, %9\l  %12 = add nsw i32 %11, 2\l  %13 = sext i32 %12 to i64\l  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %13\l  %15 = load float, float addrspace(1)* %14, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %16 = add nsw i32 %11, 1\l  %17 = sext i32 %16 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %0, i64 %17\l  %19 = load float, float addrspace(1)* %18, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %20 = sext i32 %11 to i64\l  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20\l  %22 = load float, float addrspace(1)* %21, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %23 = fdiv contract float %15, 6.000000e+01\l  %24 = tail call float @llvm.floor.f32(float %23)\l  %25 = fsub contract float %23, %24\l  %26 = fsub contract float 1.000000e+00, %19\l  %27 = fmul contract float %22, %26\l  %28 = fmul contract float %19, %25\l  %29 = fsub contract float 1.000000e+00, %28\l  %30 = fmul contract float %22, %29\l  %31 = fsub contract float 1.000000e+00, %25\l  %32 = fmul contract float %19, %31\l  %33 = fsub contract float 1.000000e+00, %32\l  %34 = fmul contract float %22, %33\l  %35 = fcmp contract oeq float %24, 0.000000e+00\l  %36 = fcmp contract oeq float %24, 6.000000e+00\l  %37 = or i1 %35, %36\l  br i1 %37, label %50, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5757aa0:s0 -> Node0x575be20;
	Node0x5757aa0:s1 -> Node0x575beb0;
	Node0x575beb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%38:\l38:                                               \l  %39 = fcmp contract oeq float %24, 1.000000e+00\l  br i1 %39, label %50, label %40\l|{<s0>T|<s1>F}}"];
	Node0x575beb0:s0 -> Node0x575be20;
	Node0x575beb0:s1 -> Node0x575c080;
	Node0x575c080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%40:\l40:                                               \l  %41 = fcmp contract oeq float %24, 2.000000e+00\l  br i1 %41, label %50, label %42\l|{<s0>T|<s1>F}}"];
	Node0x575c080:s0 -> Node0x575be20;
	Node0x575c080:s1 -> Node0x575c210;
	Node0x575c210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%42:\l42:                                               \l  %43 = fcmp contract oeq float %24, 3.000000e+00\l  %44 = fcmp contract oeq float %24, 4.000000e+00\l  %45 = select i1 %44, float %34, float %22\l  %46 = or i1 %43, %44\l  %47 = select i1 %46, float %22, float %30\l  %48 = select i1 %43, float %30, float %27\l  %49 = select i1 %43, float %27, float %45\l  br label %50\l}"];
	Node0x575c210 -> Node0x575be20;
	Node0x575be20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%50:\l50:                                               \l  %51 = phi float [ %27, %6 ], [ %27, %38 ], [ %34, %40 ], [ %47, %42 ]\l  %52 = phi float [ %34, %6 ], [ %22, %38 ], [ %22, %40 ], [ %48, %42 ]\l  %53 = phi float [ %22, %6 ], [ %30, %38 ], [ %27, %40 ], [ %49, %42 ]\l  %54 = fmul contract float %53, 2.550000e+02\l  %55 = tail call float @llvm.rint.f32(float %54)\l  %56 = fptoui float %55 to i32\l  %57 = trunc i32 %56 to i8\l  %58 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %13\l  store i8 %57, i8 addrspace(1)* %58, align 1, !tbaa !10\l  %59 = fmul contract float %52, 2.550000e+02\l  %60 = tail call float @llvm.rint.f32(float %59)\l  %61 = fptoui float %60 to i32\l  %62 = trunc i32 %61 to i8\l  %63 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %17\l  store i8 %62, i8 addrspace(1)* %63, align 1, !tbaa !10\l  %64 = fmul contract float %51, 2.550000e+02\l  %65 = tail call float @llvm.rint.f32(float %64)\l  %66 = fptoui float %65 to i32\l  %67 = trunc i32 %66 to i8\l  %68 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %20\l  store i8 %67, i8 addrspace(1)* %68, align 1, !tbaa !10\l  ret void\l}"];
}
