digraph "CFG for '_Z10kernCalcMummPKdS0_S0_Pd' function" {
	label="CFG for '_Z10kernCalcMummPKdS0_S0_Pd' function";

	Node0x4587510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !4\l  %12 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !13, !invariant.load\l... !14\l  %15 = zext i16 %14 to i32\l  %16 = udiv i32 %11, %15\l  %17 = mul i32 %16, %15\l  %18 = icmp ugt i32 %11, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %7\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = add i32 %21, %22\l  %24 = mul i32 %23, %15\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %25\l  %27 = sext i32 %26 to i64\l  %28 = icmp ult i64 %27, %0\l  br i1 %28, label %29, label %145\l|{<s0>T|<s1>F}}"];
	Node0x4587510:s0 -> Node0x4589db0;
	Node0x4587510:s1 -> Node0x4589e40;
	Node0x4589db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%29:\l29:                                               \l  %30 = getelementptr inbounds double, double addrspace(1)* %3, i64 %27\l  %31 = load double, double addrspace(1)* %30, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %32 = fmul double %31, 0x3FF71547652B82FE\l  %33 = tail call double @llvm.rint.f64(double %32)\l  %34 = fneg double %33\l  %35 = tail call double @llvm.fma.f64(double %34, double 0x3FE62E42FEFA39EF,\l... double %31)\l  %36 = tail call double @llvm.fma.f64(double %34, double 0x3C7ABC9E3B39803F,\l... double %35)\l  %37 = tail call double @llvm.fma.f64(double %36, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %38 = tail call double @llvm.fma.f64(double %36, double %37, double\l... 0x3EC71DEE623FDE64)\l  %39 = tail call double @llvm.fma.f64(double %36, double %38, double\l... 0x3EFA01997C89E6B0)\l  %40 = tail call double @llvm.fma.f64(double %36, double %39, double\l... 0x3F2A01A014761F6E)\l  %41 = tail call double @llvm.fma.f64(double %36, double %40, double\l... 0x3F56C16C1852B7B0)\l  %42 = tail call double @llvm.fma.f64(double %36, double %41, double\l... 0x3F81111111122322)\l  %43 = tail call double @llvm.fma.f64(double %36, double %42, double\l... 0x3FA55555555502A1)\l  %44 = tail call double @llvm.fma.f64(double %36, double %43, double\l... 0x3FC5555555555511)\l  %45 = tail call double @llvm.fma.f64(double %36, double %44, double\l... 0x3FE000000000000B)\l  %46 = tail call double @llvm.fma.f64(double %36, double %45, double\l... 1.000000e+00)\l  %47 = tail call double @llvm.fma.f64(double %36, double %46, double\l... 1.000000e+00)\l  %48 = fptosi double %33 to i32\l  %49 = tail call double @llvm.amdgcn.ldexp.f64(double %47, i32 %48)\l  %50 = fcmp ogt double %31, 1.024000e+03\l  %51 = select i1 %50, double 0x7FF0000000000000, double %49\l  %52 = fcmp olt double %31, -1.075000e+03\l  %53 = select i1 %52, double 0.000000e+00, double %51\l  %54 = load double, double addrspace(1)* %4, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %55 = fmul double %54, 0x3FF71547652B82FE\l  %56 = tail call double @llvm.rint.f64(double %55)\l  %57 = fneg double %56\l  %58 = tail call double @llvm.fma.f64(double %57, double 0x3FE62E42FEFA39EF,\l... double %54)\l  %59 = tail call double @llvm.fma.f64(double %57, double 0x3C7ABC9E3B39803F,\l... double %58)\l  %60 = tail call double @llvm.fma.f64(double %59, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %61 = tail call double @llvm.fma.f64(double %59, double %60, double\l... 0x3EC71DEE623FDE64)\l  %62 = tail call double @llvm.fma.f64(double %59, double %61, double\l... 0x3EFA01997C89E6B0)\l  %63 = tail call double @llvm.fma.f64(double %59, double %62, double\l... 0x3F2A01A014761F6E)\l  %64 = tail call double @llvm.fma.f64(double %59, double %63, double\l... 0x3F56C16C1852B7B0)\l  %65 = tail call double @llvm.fma.f64(double %59, double %64, double\l... 0x3F81111111122322)\l  %66 = tail call double @llvm.fma.f64(double %59, double %65, double\l... 0x3FA55555555502A1)\l  %67 = tail call double @llvm.fma.f64(double %59, double %66, double\l... 0x3FC5555555555511)\l  %68 = tail call double @llvm.fma.f64(double %59, double %67, double\l... 0x3FE000000000000B)\l  %69 = tail call double @llvm.fma.f64(double %59, double %68, double\l... 1.000000e+00)\l  %70 = tail call double @llvm.fma.f64(double %59, double %69, double\l... 1.000000e+00)\l  %71 = fptosi double %56 to i32\l  %72 = tail call double @llvm.amdgcn.ldexp.f64(double %70, i32 %71)\l  %73 = fcmp ogt double %54, 1.024000e+03\l  %74 = select i1 %73, double 0x7FF0000000000000, double %72\l  %75 = fcmp olt double %54, -1.075000e+03\l  %76 = select i1 %75, double 0.000000e+00, double %74\l  %77 = fdiv contract double %53, %76\l  %78 = mul i64 %27, %1\l  %79 = getelementptr inbounds double, double addrspace(1)* %2, i64 %78\l  %80 = getelementptr inbounds double, double addrspace(1)* %5, i64 %78\l  %81 = icmp eq i64 %1, 0\l  br i1 %81, label %145, label %82\l|{<s0>T|<s1>F}}"];
	Node0x4589db0:s0 -> Node0x4589e40;
	Node0x4589db0:s1 -> Node0x458f230;
	Node0x458f230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%82:\l82:                                               \l  %83 = and i64 %1, 7\l  %84 = icmp ult i64 %1, 8\l  br i1 %84, label %132, label %85\l|{<s0>T|<s1>F}}"];
	Node0x458f230:s0 -> Node0x458f4b0;
	Node0x458f230:s1 -> Node0x458f500;
	Node0x458f500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%85:\l85:                                               \l  %86 = and i64 %1, -8\l  br label %87\l}"];
	Node0x458f500 -> Node0x458f700;
	Node0x458f700 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%87:\l87:                                               \l  %88 = phi i64 [ 0, %85 ], [ %129, %87 ]\l  %89 = phi i64 [ 0, %85 ], [ %130, %87 ]\l  %90 = getelementptr inbounds double, double addrspace(1)* %79, i64 %88\l  %91 = load double, double addrspace(1)* %90, align 8, !tbaa !16\l  %92 = fmul contract double %77, %91\l  %93 = getelementptr inbounds double, double addrspace(1)* %80, i64 %88\l  store double %92, double addrspace(1)* %93, align 8, !tbaa !16\l  %94 = or i64 %88, 1\l  %95 = getelementptr inbounds double, double addrspace(1)* %79, i64 %94\l  %96 = load double, double addrspace(1)* %95, align 8, !tbaa !16\l  %97 = fmul contract double %77, %96\l  %98 = getelementptr inbounds double, double addrspace(1)* %80, i64 %94\l  store double %97, double addrspace(1)* %98, align 8, !tbaa !16\l  %99 = or i64 %88, 2\l  %100 = getelementptr inbounds double, double addrspace(1)* %79, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %102 = fmul contract double %77, %101\l  %103 = getelementptr inbounds double, double addrspace(1)* %80, i64 %99\l  store double %102, double addrspace(1)* %103, align 8, !tbaa !16\l  %104 = or i64 %88, 3\l  %105 = getelementptr inbounds double, double addrspace(1)* %79, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !16\l  %107 = fmul contract double %77, %106\l  %108 = getelementptr inbounds double, double addrspace(1)* %80, i64 %104\l  store double %107, double addrspace(1)* %108, align 8, !tbaa !16\l  %109 = or i64 %88, 4\l  %110 = getelementptr inbounds double, double addrspace(1)* %79, i64 %109\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !16\l  %112 = fmul contract double %77, %111\l  %113 = getelementptr inbounds double, double addrspace(1)* %80, i64 %109\l  store double %112, double addrspace(1)* %113, align 8, !tbaa !16\l  %114 = or i64 %88, 5\l  %115 = getelementptr inbounds double, double addrspace(1)* %79, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !16\l  %117 = fmul contract double %77, %116\l  %118 = getelementptr inbounds double, double addrspace(1)* %80, i64 %114\l  store double %117, double addrspace(1)* %118, align 8, !tbaa !16\l  %119 = or i64 %88, 6\l  %120 = getelementptr inbounds double, double addrspace(1)* %79, i64 %119\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !16\l  %122 = fmul contract double %77, %121\l  %123 = getelementptr inbounds double, double addrspace(1)* %80, i64 %119\l  store double %122, double addrspace(1)* %123, align 8, !tbaa !16\l  %124 = or i64 %88, 7\l  %125 = getelementptr inbounds double, double addrspace(1)* %79, i64 %124\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !16\l  %127 = fmul contract double %77, %126\l  %128 = getelementptr inbounds double, double addrspace(1)* %80, i64 %124\l  store double %127, double addrspace(1)* %128, align 8, !tbaa !16\l  %129 = add nuw i64 %88, 8\l  %130 = add i64 %89, 8\l  %131 = icmp eq i64 %130, %86\l  br i1 %131, label %132, label %87, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x458f700:s0 -> Node0x458f4b0;
	Node0x458f700:s1 -> Node0x458f700;
	Node0x458f4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%132:\l132:                                              \l  %133 = phi i64 [ 0, %82 ], [ %129, %87 ]\l  %134 = icmp eq i64 %83, 0\l  br i1 %134, label %145, label %135\l|{<s0>T|<s1>F}}"];
	Node0x458f4b0:s0 -> Node0x4589e40;
	Node0x458f4b0:s1 -> Node0x4591dc0;
	Node0x4591dc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%135:\l135:                                              \l  %136 = phi i64 [ %142, %135 ], [ %133, %132 ]\l  %137 = phi i64 [ %143, %135 ], [ 0, %132 ]\l  %138 = getelementptr inbounds double, double addrspace(1)* %79, i64 %136\l  %139 = load double, double addrspace(1)* %138, align 8, !tbaa !16\l  %140 = fmul contract double %77, %139\l  %141 = getelementptr inbounds double, double addrspace(1)* %80, i64 %136\l  store double %140, double addrspace(1)* %141, align 8, !tbaa !16\l  %142 = add nuw i64 %136, 1\l  %143 = add i64 %137, 1\l  %144 = icmp eq i64 %143, %83\l  br i1 %144, label %145, label %135, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4591dc0:s0 -> Node0x4589e40;
	Node0x4591dc0:s1 -> Node0x4591dc0;
	Node0x4589e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%145:\l145:                                              \l  ret void\l}"];
}
