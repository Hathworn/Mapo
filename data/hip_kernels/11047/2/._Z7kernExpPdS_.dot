digraph "CFG for '_Z7kernExpPdS_' function" {
	label="CFG for '_Z7kernExpPdS_' function";

	Node0x4b07b20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12\l  %6 = bitcast i8 addrspace(4)* %5 to i32 addrspace(4)*\l  %7 = load i32, i32 addrspace(4)* %6, align 4, !tbaa !4\l  %8 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !13, !invariant.load\l... !14\l  %11 = zext i16 %10 to i32\l  %12 = udiv i32 %7, %11\l  %13 = mul i32 %12, %11\l  %14 = icmp ugt i32 %7, %13\l  %15 = zext i1 %14 to i32\l  %16 = add i32 %12, %15\l  %17 = mul i32 %16, %3\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = add i32 %17, %18\l  %20 = mul i32 %19, %11\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %22 = add i32 %20, %21\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds double, double addrspace(1)* %0, i64 %23\l  %25 = load double, double addrspace(1)* %24, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %26 = load double, double addrspace(1)* %1, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %27 = fsub contract double %25, %26\l  %28 = fmul double %27, 0x3FF71547652B82FE\l  %29 = tail call double @llvm.rint.f64(double %28)\l  %30 = fneg double %29\l  %31 = tail call double @llvm.fma.f64(double %30, double 0x3FE62E42FEFA39EF,\l... double %27)\l  %32 = tail call double @llvm.fma.f64(double %30, double 0x3C7ABC9E3B39803F,\l... double %31)\l  %33 = tail call double @llvm.fma.f64(double %32, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %34 = tail call double @llvm.fma.f64(double %32, double %33, double\l... 0x3EC71DEE623FDE64)\l  %35 = tail call double @llvm.fma.f64(double %32, double %34, double\l... 0x3EFA01997C89E6B0)\l  %36 = tail call double @llvm.fma.f64(double %32, double %35, double\l... 0x3F2A01A014761F6E)\l  %37 = tail call double @llvm.fma.f64(double %32, double %36, double\l... 0x3F56C16C1852B7B0)\l  %38 = tail call double @llvm.fma.f64(double %32, double %37, double\l... 0x3F81111111122322)\l  %39 = tail call double @llvm.fma.f64(double %32, double %38, double\l... 0x3FA55555555502A1)\l  %40 = tail call double @llvm.fma.f64(double %32, double %39, double\l... 0x3FC5555555555511)\l  %41 = tail call double @llvm.fma.f64(double %32, double %40, double\l... 0x3FE000000000000B)\l  %42 = tail call double @llvm.fma.f64(double %32, double %41, double\l... 1.000000e+00)\l  %43 = tail call double @llvm.fma.f64(double %32, double %42, double\l... 1.000000e+00)\l  %44 = fptosi double %29 to i32\l  %45 = tail call double @llvm.amdgcn.ldexp.f64(double %43, i32 %44)\l  %46 = fcmp ogt double %27, 1.024000e+03\l  %47 = select i1 %46, double 0x7FF0000000000000, double %45\l  %48 = fcmp olt double %27, -1.075000e+03\l  %49 = select i1 %48, double 0.000000e+00, double %47\l  store double %49, double addrspace(1)* %24, align 8, !tbaa !16\l  ret void\l}"];
}
