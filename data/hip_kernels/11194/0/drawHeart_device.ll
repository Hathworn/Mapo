; ModuleID = '../data/hip_kernels/11194/0/main.cu'
source_filename = "../data/hip_kernels/11194/0/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define protected amdgpu_kernel void @_Z9drawHeartiPfS_(i32 %0, float addrspace(1)* nocapture writeonly %1, float addrspace(1)* nocapture writeonly %2) local_unnamed_addr #0 {
  %4 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4
  %5 = mul i32 %4, %0
  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %7 = add i32 %5, %6
  %8 = sitofp i32 %7 to float
  %9 = fmul contract float %8, 0x401921FB40000000
  %10 = sitofp i32 %0 to float
  %11 = fdiv contract float %9, %10
  %12 = tail call float @llvm.fabs.f32(float %11)
  %13 = fcmp olt float %12, 1.310720e+05
  br i1 %13, label %14, label %22

14:                                               ; preds = %3
  %15 = fmul float %12, 0x3FE45F3060000000
  %16 = tail call float @llvm.rint.f32(float %15)
  %17 = tail call float @llvm.fma.f32(float %16, float 0xBFF921FB40000000, float %12)
  %18 = tail call float @llvm.fma.f32(float %16, float 0xBE74442D00000000, float %17)
  %19 = tail call float @llvm.fma.f32(float %16, float 0xBCF8469880000000, float %18)
  %20 = fptosi float %16 to i32
  %21 = bitcast float %12 to i32
  br label %128

22:                                               ; preds = %3
  %23 = bitcast float %12 to i32
  %24 = lshr i32 %23, 23
  %25 = and i32 %23, 8388607
  %26 = or i32 %25, 8388608
  %27 = zext i32 %26 to i64
  %28 = mul nuw nsw i64 %27, 4266746795
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %28, 32
  %31 = mul nuw nsw i64 %27, 1011060801
  %32 = add nuw nsw i64 %30, %31
  %33 = trunc i64 %32 to i32
  %34 = lshr i64 %32, 32
  %35 = mul nuw nsw i64 %27, 3680671129
  %36 = add nuw nsw i64 %34, %35
  %37 = trunc i64 %36 to i32
  %38 = lshr i64 %36, 32
  %39 = mul nuw nsw i64 %27, 4113882560
  %40 = add nuw nsw i64 %38, %39
  %41 = trunc i64 %40 to i32
  %42 = lshr i64 %40, 32
  %43 = mul nuw nsw i64 %27, 4230436817
  %44 = add nuw nsw i64 %42, %43
  %45 = trunc i64 %44 to i32
  %46 = lshr i64 %44, 32
  %47 = mul nuw nsw i64 %27, 1313084713
  %48 = add nuw nsw i64 %46, %47
  %49 = trunc i64 %48 to i32
  %50 = lshr i64 %48, 32
  %51 = mul nuw nsw i64 %27, 2734261102
  %52 = add nuw nsw i64 %50, %51
  %53 = trunc i64 %52 to i32
  %54 = lshr i64 %52, 32
  %55 = trunc i64 %54 to i32
  %56 = add nsw i32 %24, -120
  %57 = icmp ugt i32 %56, 63
  %58 = select i1 %57, i32 %49, i32 %55
  %59 = select i1 %57, i32 %45, i32 %53
  %60 = select i1 %57, i32 %41, i32 %49
  %61 = select i1 %57, i32 %37, i32 %45
  %62 = select i1 %57, i32 %33, i32 %41
  %63 = select i1 %57, i32 %29, i32 %37
  %64 = select i1 %57, i32 -64, i32 0
  %65 = add nsw i32 %64, %56
  %66 = icmp ugt i32 %65, 31
  %67 = select i1 %66, i32 %59, i32 %58
  %68 = select i1 %66, i32 %60, i32 %59
  %69 = select i1 %66, i32 %61, i32 %60
  %70 = select i1 %66, i32 %62, i32 %61
  %71 = select i1 %66, i32 %63, i32 %62
  %72 = select i1 %66, i32 -32, i32 0
  %73 = add nsw i32 %72, %65
  %74 = icmp ugt i32 %73, 31
  %75 = select i1 %74, i32 %68, i32 %67
  %76 = select i1 %74, i32 %69, i32 %68
  %77 = select i1 %74, i32 %70, i32 %69
  %78 = select i1 %74, i32 %71, i32 %70
  %79 = select i1 %74, i32 -32, i32 0
  %80 = add nsw i32 %79, %73
  %81 = icmp eq i32 %80, 0
  %82 = sub nsw i32 32, %80
  %83 = tail call i32 @llvm.fshr.i32(i32 %75, i32 %76, i32 %82)
  %84 = tail call i32 @llvm.fshr.i32(i32 %76, i32 %77, i32 %82)
  %85 = tail call i32 @llvm.fshr.i32(i32 %77, i32 %78, i32 %82)
  %86 = select i1 %81, i32 %75, i32 %83
  %87 = select i1 %81, i32 %76, i32 %84
  %88 = select i1 %81, i32 %77, i32 %85
  %89 = lshr i32 %86, 29
  %90 = tail call i32 @llvm.fshl.i32(i32 %86, i32 %87, i32 2)
  %91 = tail call i32 @llvm.fshl.i32(i32 %87, i32 %88, i32 2)
  %92 = tail call i32 @llvm.fshl.i32(i32 %88, i32 %78, i32 2)
  %93 = and i32 %89, 1
  %94 = sub nsw i32 0, %93
  %95 = shl i32 %89, 31
  %96 = xor i32 %90, %94
  %97 = xor i32 %91, %94
  %98 = xor i32 %92, %94
  %99 = tail call i32 @llvm.ctlz.i32(i32 %96, i1 false), !range !5
  %100 = sub nsw i32 31, %99
  %101 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %100)
  %102 = tail call i32 @llvm.fshr.i32(i32 %97, i32 %98, i32 %100)
  %103 = shl nuw nsw i32 %99, 23
  %104 = sub nuw nsw i32 1056964608, %103
  %105 = lshr i32 %101, 9
  %106 = or i32 %105, %104
  %107 = or i32 %106, %95
  %108 = bitcast i32 %107 to float
  %109 = tail call i32 @llvm.fshl.i32(i32 %101, i32 %102, i32 23)
  %110 = tail call i32 @llvm.ctlz.i32(i32 %109, i1 false), !range !5
  %111 = fmul float %108, 0x3FF921FB40000000
  %112 = add nuw nsw i32 %110, %99
  %113 = shl nuw nsw i32 %112, 23
  %114 = sub nuw nsw i32 855638016, %113
  %115 = sub nsw i32 31, %110
  %116 = tail call i32 @llvm.fshr.i32(i32 %109, i32 %102, i32 %115)
  %117 = lshr i32 %116, 9
  %118 = or i32 %114, %117
  %119 = or i32 %118, %95
  %120 = bitcast i32 %119 to float
  %121 = fneg float %111
  %122 = tail call float @llvm.fma.f32(float %108, float 0x3FF921FB40000000, float %121)
  %123 = tail call float @llvm.fma.f32(float %108, float 0x3E74442D00000000, float %122)
  %124 = tail call float @llvm.fma.f32(float %120, float 0x3FF921FB40000000, float %123)
  %125 = fadd float %111, %124
  %126 = lshr i32 %86, 30
  %127 = add nuw nsw i32 %93, %126
  br label %128

128:                                              ; preds = %14, %22
  %129 = phi i32 [ %21, %14 ], [ %23, %22 ]
  %130 = phi float [ %19, %14 ], [ %125, %22 ]
  %131 = phi i32 [ %20, %14 ], [ %127, %22 ]
  %132 = fmul float %130, %130
  %133 = tail call float @llvm.fmuladd.f32(float %132, float 0xBF29833040000000, float 0x3F81103880000000)
  %134 = tail call float @llvm.fmuladd.f32(float %132, float %133, float 0xBFC55553A0000000)
  %135 = fmul float %132, %134
  %136 = tail call float @llvm.fmuladd.f32(float %130, float %135, float %130)
  %137 = tail call float @llvm.fmuladd.f32(float %132, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %138 = tail call float @llvm.fmuladd.f32(float %132, float %137, float 0x3FA5557EE0000000)
  %139 = tail call float @llvm.fmuladd.f32(float %132, float %138, float 0xBFE0000080000000)
  %140 = tail call float @llvm.fmuladd.f32(float %132, float %139, float 1.000000e+00)
  %141 = and i32 %131, 1
  %142 = icmp eq i32 %141, 0
  %143 = select i1 %142, float %136, float %140
  %144 = bitcast float %143 to i32
  %145 = shl i32 %131, 30
  %146 = and i32 %145, -2147483648
  %147 = bitcast float %11 to i32
  %148 = xor i32 %129, %146
  %149 = xor i32 %148, %144
  %150 = xor i32 %149, %147
  %151 = bitcast i32 %150 to float
  %152 = tail call i1 @llvm.amdgcn.class.f32(float %12, i32 504)
  %153 = fmul contract float %151, 8.000000e+00
  br i1 %13, label %154, label %162

154:                                              ; preds = %128
  %155 = fmul float %12, 0x3FE45F3060000000
  %156 = tail call float @llvm.rint.f32(float %155)
  %157 = tail call float @llvm.fma.f32(float %156, float 0xBFF921FB40000000, float %12)
  %158 = tail call float @llvm.fma.f32(float %156, float 0xBE74442D00000000, float %157)
  %159 = tail call float @llvm.fma.f32(float %156, float 0xBCF8469880000000, float %158)
  %160 = fptosi float %156 to i32
  %161 = bitcast float %12 to i32
  br label %268

162:                                              ; preds = %128
  %163 = bitcast float %12 to i32
  %164 = lshr i32 %163, 23
  %165 = and i32 %163, 8388607
  %166 = or i32 %165, 8388608
  %167 = zext i32 %166 to i64
  %168 = mul nuw nsw i64 %167, 4266746795
  %169 = trunc i64 %168 to i32
  %170 = lshr i64 %168, 32
  %171 = mul nuw nsw i64 %167, 1011060801
  %172 = add nuw nsw i64 %170, %171
  %173 = trunc i64 %172 to i32
  %174 = lshr i64 %172, 32
  %175 = mul nuw nsw i64 %167, 3680671129
  %176 = add nuw nsw i64 %174, %175
  %177 = trunc i64 %176 to i32
  %178 = lshr i64 %176, 32
  %179 = mul nuw nsw i64 %167, 4113882560
  %180 = add nuw nsw i64 %178, %179
  %181 = trunc i64 %180 to i32
  %182 = lshr i64 %180, 32
  %183 = mul nuw nsw i64 %167, 4230436817
  %184 = add nuw nsw i64 %182, %183
  %185 = trunc i64 %184 to i32
  %186 = lshr i64 %184, 32
  %187 = mul nuw nsw i64 %167, 1313084713
  %188 = add nuw nsw i64 %186, %187
  %189 = trunc i64 %188 to i32
  %190 = lshr i64 %188, 32
  %191 = mul nuw nsw i64 %167, 2734261102
  %192 = add nuw nsw i64 %190, %191
  %193 = trunc i64 %192 to i32
  %194 = lshr i64 %192, 32
  %195 = trunc i64 %194 to i32
  %196 = add nsw i32 %164, -120
  %197 = icmp ugt i32 %196, 63
  %198 = select i1 %197, i32 %189, i32 %195
  %199 = select i1 %197, i32 %185, i32 %193
  %200 = select i1 %197, i32 %181, i32 %189
  %201 = select i1 %197, i32 %177, i32 %185
  %202 = select i1 %197, i32 %173, i32 %181
  %203 = select i1 %197, i32 %169, i32 %177
  %204 = select i1 %197, i32 -64, i32 0
  %205 = add nsw i32 %204, %196
  %206 = icmp ugt i32 %205, 31
  %207 = select i1 %206, i32 %199, i32 %198
  %208 = select i1 %206, i32 %200, i32 %199
  %209 = select i1 %206, i32 %201, i32 %200
  %210 = select i1 %206, i32 %202, i32 %201
  %211 = select i1 %206, i32 %203, i32 %202
  %212 = select i1 %206, i32 -32, i32 0
  %213 = add nsw i32 %212, %205
  %214 = icmp ugt i32 %213, 31
  %215 = select i1 %214, i32 %208, i32 %207
  %216 = select i1 %214, i32 %209, i32 %208
  %217 = select i1 %214, i32 %210, i32 %209
  %218 = select i1 %214, i32 %211, i32 %210
  %219 = select i1 %214, i32 -32, i32 0
  %220 = add nsw i32 %219, %213
  %221 = icmp eq i32 %220, 0
  %222 = sub nsw i32 32, %220
  %223 = tail call i32 @llvm.fshr.i32(i32 %215, i32 %216, i32 %222)
  %224 = tail call i32 @llvm.fshr.i32(i32 %216, i32 %217, i32 %222)
  %225 = tail call i32 @llvm.fshr.i32(i32 %217, i32 %218, i32 %222)
  %226 = select i1 %221, i32 %215, i32 %223
  %227 = select i1 %221, i32 %216, i32 %224
  %228 = select i1 %221, i32 %217, i32 %225
  %229 = lshr i32 %226, 29
  %230 = tail call i32 @llvm.fshl.i32(i32 %226, i32 %227, i32 2)
  %231 = tail call i32 @llvm.fshl.i32(i32 %227, i32 %228, i32 2)
  %232 = tail call i32 @llvm.fshl.i32(i32 %228, i32 %218, i32 2)
  %233 = and i32 %229, 1
  %234 = sub nsw i32 0, %233
  %235 = shl i32 %229, 31
  %236 = xor i32 %230, %234
  %237 = xor i32 %231, %234
  %238 = xor i32 %232, %234
  %239 = tail call i32 @llvm.ctlz.i32(i32 %236, i1 false), !range !5
  %240 = sub nsw i32 31, %239
  %241 = tail call i32 @llvm.fshr.i32(i32 %236, i32 %237, i32 %240)
  %242 = tail call i32 @llvm.fshr.i32(i32 %237, i32 %238, i32 %240)
  %243 = shl nuw nsw i32 %239, 23
  %244 = sub nuw nsw i32 1056964608, %243
  %245 = lshr i32 %241, 9
  %246 = or i32 %245, %244
  %247 = or i32 %246, %235
  %248 = bitcast i32 %247 to float
  %249 = tail call i32 @llvm.fshl.i32(i32 %241, i32 %242, i32 23)
  %250 = tail call i32 @llvm.ctlz.i32(i32 %249, i1 false), !range !5
  %251 = fmul float %248, 0x3FF921FB40000000
  %252 = add nuw nsw i32 %250, %239
  %253 = shl nuw nsw i32 %252, 23
  %254 = sub nuw nsw i32 855638016, %253
  %255 = sub nsw i32 31, %250
  %256 = tail call i32 @llvm.fshr.i32(i32 %249, i32 %242, i32 %255)
  %257 = lshr i32 %256, 9
  %258 = or i32 %254, %257
  %259 = or i32 %258, %235
  %260 = bitcast i32 %259 to float
  %261 = fneg float %251
  %262 = tail call float @llvm.fma.f32(float %248, float 0x3FF921FB40000000, float %261)
  %263 = tail call float @llvm.fma.f32(float %248, float 0x3E74442D00000000, float %262)
  %264 = tail call float @llvm.fma.f32(float %260, float 0x3FF921FB40000000, float %263)
  %265 = fadd float %251, %264
  %266 = lshr i32 %226, 30
  %267 = add nuw nsw i32 %233, %266
  br label %268

268:                                              ; preds = %154, %162
  %269 = phi i32 [ %161, %154 ], [ %163, %162 ]
  %270 = phi float [ %159, %154 ], [ %265, %162 ]
  %271 = phi i32 [ %160, %154 ], [ %267, %162 ]
  %272 = fmul float %270, %270
  %273 = tail call float @llvm.fmuladd.f32(float %272, float 0xBF29833040000000, float 0x3F81103880000000)
  %274 = tail call float @llvm.fmuladd.f32(float %272, float %273, float 0xBFC55553A0000000)
  %275 = fmul float %272, %274
  %276 = tail call float @llvm.fmuladd.f32(float %270, float %275, float %270)
  %277 = tail call float @llvm.fmuladd.f32(float %272, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %278 = tail call float @llvm.fmuladd.f32(float %272, float %277, float 0x3FA5557EE0000000)
  %279 = tail call float @llvm.fmuladd.f32(float %272, float %278, float 0xBFE0000080000000)
  %280 = tail call float @llvm.fmuladd.f32(float %272, float %279, float 1.000000e+00)
  %281 = and i32 %271, 1
  %282 = icmp eq i32 %281, 0
  %283 = select i1 %282, float %276, float %280
  %284 = bitcast float %283 to i32
  %285 = shl i32 %271, 30
  %286 = and i32 %285, -2147483648
  %287 = xor i32 %269, %286
  %288 = xor i32 %287, %284
  %289 = xor i32 %288, %147
  %290 = bitcast i32 %289 to float
  %291 = fmul contract float %153, %290
  br i1 %13, label %292, label %300

292:                                              ; preds = %268
  %293 = fmul float %12, 0x3FE45F3060000000
  %294 = tail call float @llvm.rint.f32(float %293)
  %295 = tail call float @llvm.fma.f32(float %294, float 0xBFF921FB40000000, float %12)
  %296 = tail call float @llvm.fma.f32(float %294, float 0xBE74442D00000000, float %295)
  %297 = tail call float @llvm.fma.f32(float %294, float 0xBCF8469880000000, float %296)
  %298 = fptosi float %294 to i32
  %299 = bitcast float %12 to i32
  br label %406

300:                                              ; preds = %268
  %301 = bitcast float %12 to i32
  %302 = lshr i32 %301, 23
  %303 = and i32 %301, 8388607
  %304 = or i32 %303, 8388608
  %305 = zext i32 %304 to i64
  %306 = mul nuw nsw i64 %305, 4266746795
  %307 = trunc i64 %306 to i32
  %308 = lshr i64 %306, 32
  %309 = mul nuw nsw i64 %305, 1011060801
  %310 = add nuw nsw i64 %308, %309
  %311 = trunc i64 %310 to i32
  %312 = lshr i64 %310, 32
  %313 = mul nuw nsw i64 %305, 3680671129
  %314 = add nuw nsw i64 %312, %313
  %315 = trunc i64 %314 to i32
  %316 = lshr i64 %314, 32
  %317 = mul nuw nsw i64 %305, 4113882560
  %318 = add nuw nsw i64 %316, %317
  %319 = trunc i64 %318 to i32
  %320 = lshr i64 %318, 32
  %321 = mul nuw nsw i64 %305, 4230436817
  %322 = add nuw nsw i64 %320, %321
  %323 = trunc i64 %322 to i32
  %324 = lshr i64 %322, 32
  %325 = mul nuw nsw i64 %305, 1313084713
  %326 = add nuw nsw i64 %324, %325
  %327 = trunc i64 %326 to i32
  %328 = lshr i64 %326, 32
  %329 = mul nuw nsw i64 %305, 2734261102
  %330 = add nuw nsw i64 %328, %329
  %331 = trunc i64 %330 to i32
  %332 = lshr i64 %330, 32
  %333 = trunc i64 %332 to i32
  %334 = add nsw i32 %302, -120
  %335 = icmp ugt i32 %334, 63
  %336 = select i1 %335, i32 %327, i32 %333
  %337 = select i1 %335, i32 %323, i32 %331
  %338 = select i1 %335, i32 %319, i32 %327
  %339 = select i1 %335, i32 %315, i32 %323
  %340 = select i1 %335, i32 %311, i32 %319
  %341 = select i1 %335, i32 %307, i32 %315
  %342 = select i1 %335, i32 -64, i32 0
  %343 = add nsw i32 %342, %334
  %344 = icmp ugt i32 %343, 31
  %345 = select i1 %344, i32 %337, i32 %336
  %346 = select i1 %344, i32 %338, i32 %337
  %347 = select i1 %344, i32 %339, i32 %338
  %348 = select i1 %344, i32 %340, i32 %339
  %349 = select i1 %344, i32 %341, i32 %340
  %350 = select i1 %344, i32 -32, i32 0
  %351 = add nsw i32 %350, %343
  %352 = icmp ugt i32 %351, 31
  %353 = select i1 %352, i32 %346, i32 %345
  %354 = select i1 %352, i32 %347, i32 %346
  %355 = select i1 %352, i32 %348, i32 %347
  %356 = select i1 %352, i32 %349, i32 %348
  %357 = select i1 %352, i32 -32, i32 0
  %358 = add nsw i32 %357, %351
  %359 = icmp eq i32 %358, 0
  %360 = sub nsw i32 32, %358
  %361 = tail call i32 @llvm.fshr.i32(i32 %353, i32 %354, i32 %360)
  %362 = tail call i32 @llvm.fshr.i32(i32 %354, i32 %355, i32 %360)
  %363 = tail call i32 @llvm.fshr.i32(i32 %355, i32 %356, i32 %360)
  %364 = select i1 %359, i32 %353, i32 %361
  %365 = select i1 %359, i32 %354, i32 %362
  %366 = select i1 %359, i32 %355, i32 %363
  %367 = lshr i32 %364, 29
  %368 = tail call i32 @llvm.fshl.i32(i32 %364, i32 %365, i32 2)
  %369 = tail call i32 @llvm.fshl.i32(i32 %365, i32 %366, i32 2)
  %370 = tail call i32 @llvm.fshl.i32(i32 %366, i32 %356, i32 2)
  %371 = and i32 %367, 1
  %372 = sub nsw i32 0, %371
  %373 = shl i32 %367, 31
  %374 = xor i32 %368, %372
  %375 = xor i32 %369, %372
  %376 = xor i32 %370, %372
  %377 = tail call i32 @llvm.ctlz.i32(i32 %374, i1 false), !range !5
  %378 = sub nsw i32 31, %377
  %379 = tail call i32 @llvm.fshr.i32(i32 %374, i32 %375, i32 %378)
  %380 = tail call i32 @llvm.fshr.i32(i32 %375, i32 %376, i32 %378)
  %381 = shl nuw nsw i32 %377, 23
  %382 = sub nuw nsw i32 1056964608, %381
  %383 = lshr i32 %379, 9
  %384 = or i32 %383, %382
  %385 = or i32 %384, %373
  %386 = bitcast i32 %385 to float
  %387 = tail call i32 @llvm.fshl.i32(i32 %379, i32 %380, i32 23)
  %388 = tail call i32 @llvm.ctlz.i32(i32 %387, i1 false), !range !5
  %389 = fmul float %386, 0x3FF921FB40000000
  %390 = add nuw nsw i32 %388, %377
  %391 = shl nuw nsw i32 %390, 23
  %392 = sub nuw nsw i32 855638016, %391
  %393 = sub nsw i32 31, %388
  %394 = tail call i32 @llvm.fshr.i32(i32 %387, i32 %380, i32 %393)
  %395 = lshr i32 %394, 9
  %396 = or i32 %392, %395
  %397 = or i32 %396, %373
  %398 = bitcast i32 %397 to float
  %399 = fneg float %389
  %400 = tail call float @llvm.fma.f32(float %386, float 0x3FF921FB40000000, float %399)
  %401 = tail call float @llvm.fma.f32(float %386, float 0x3E74442D00000000, float %400)
  %402 = tail call float @llvm.fma.f32(float %398, float 0x3FF921FB40000000, float %401)
  %403 = fadd float %389, %402
  %404 = lshr i32 %364, 30
  %405 = add nuw nsw i32 %371, %404
  br label %406

406:                                              ; preds = %292, %300
  %407 = phi i32 [ %299, %292 ], [ %301, %300 ]
  %408 = phi float [ %297, %292 ], [ %403, %300 ]
  %409 = phi i32 [ %298, %292 ], [ %405, %300 ]
  %410 = fmul float %408, %408
  %411 = tail call float @llvm.fmuladd.f32(float %410, float 0xBF29833040000000, float 0x3F81103880000000)
  %412 = tail call float @llvm.fmuladd.f32(float %410, float %411, float 0xBFC55553A0000000)
  %413 = fmul float %410, %412
  %414 = tail call float @llvm.fmuladd.f32(float %408, float %413, float %408)
  %415 = tail call float @llvm.fmuladd.f32(float %410, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %416 = tail call float @llvm.fmuladd.f32(float %410, float %415, float 0x3FA5557EE0000000)
  %417 = tail call float @llvm.fmuladd.f32(float %410, float %416, float 0xBFE0000080000000)
  %418 = tail call float @llvm.fmuladd.f32(float %410, float %417, float 1.000000e+00)
  %419 = and i32 %409, 1
  %420 = icmp eq i32 %419, 0
  %421 = select i1 %420, float %414, float %418
  %422 = bitcast float %421 to i32
  %423 = shl i32 %409, 30
  %424 = and i32 %423, -2147483648
  %425 = xor i32 %407, %424
  %426 = xor i32 %425, %422
  %427 = xor i32 %426, %147
  %428 = bitcast i32 %427 to float
  %429 = fmul contract float %291, %428
  %430 = select contract i1 %152, float %429, float 0x7FF8000000000000
  %431 = sext i32 %7 to i64
  %432 = getelementptr inbounds float, float addrspace(1)* %1, i64 %431
  store float %430, float addrspace(1)* %432, align 4, !tbaa !6
  br i1 %13, label %433, label %440

433:                                              ; preds = %406
  %434 = fmul float %12, 0x3FE45F3060000000
  %435 = tail call float @llvm.rint.f32(float %434)
  %436 = tail call float @llvm.fma.f32(float %435, float 0xBFF921FB40000000, float %12)
  %437 = tail call float @llvm.fma.f32(float %435, float 0xBE74442D00000000, float %436)
  %438 = tail call float @llvm.fma.f32(float %435, float 0xBCF8469880000000, float %437)
  %439 = fptosi float %435 to i32
  br label %546

440:                                              ; preds = %406
  %441 = bitcast float %12 to i32
  %442 = lshr i32 %441, 23
  %443 = and i32 %441, 8388607
  %444 = or i32 %443, 8388608
  %445 = zext i32 %444 to i64
  %446 = mul nuw nsw i64 %445, 4266746795
  %447 = trunc i64 %446 to i32
  %448 = lshr i64 %446, 32
  %449 = mul nuw nsw i64 %445, 1011060801
  %450 = add nuw nsw i64 %448, %449
  %451 = trunc i64 %450 to i32
  %452 = lshr i64 %450, 32
  %453 = mul nuw nsw i64 %445, 3680671129
  %454 = add nuw nsw i64 %452, %453
  %455 = trunc i64 %454 to i32
  %456 = lshr i64 %454, 32
  %457 = mul nuw nsw i64 %445, 4113882560
  %458 = add nuw nsw i64 %456, %457
  %459 = trunc i64 %458 to i32
  %460 = lshr i64 %458, 32
  %461 = mul nuw nsw i64 %445, 4230436817
  %462 = add nuw nsw i64 %460, %461
  %463 = trunc i64 %462 to i32
  %464 = lshr i64 %462, 32
  %465 = mul nuw nsw i64 %445, 1313084713
  %466 = add nuw nsw i64 %464, %465
  %467 = trunc i64 %466 to i32
  %468 = lshr i64 %466, 32
  %469 = mul nuw nsw i64 %445, 2734261102
  %470 = add nuw nsw i64 %468, %469
  %471 = trunc i64 %470 to i32
  %472 = lshr i64 %470, 32
  %473 = trunc i64 %472 to i32
  %474 = add nsw i32 %442, -120
  %475 = icmp ugt i32 %474, 63
  %476 = select i1 %475, i32 %467, i32 %473
  %477 = select i1 %475, i32 %463, i32 %471
  %478 = select i1 %475, i32 %459, i32 %467
  %479 = select i1 %475, i32 %455, i32 %463
  %480 = select i1 %475, i32 %451, i32 %459
  %481 = select i1 %475, i32 %447, i32 %455
  %482 = select i1 %475, i32 -64, i32 0
  %483 = add nsw i32 %482, %474
  %484 = icmp ugt i32 %483, 31
  %485 = select i1 %484, i32 %477, i32 %476
  %486 = select i1 %484, i32 %478, i32 %477
  %487 = select i1 %484, i32 %479, i32 %478
  %488 = select i1 %484, i32 %480, i32 %479
  %489 = select i1 %484, i32 %481, i32 %480
  %490 = select i1 %484, i32 -32, i32 0
  %491 = add nsw i32 %490, %483
  %492 = icmp ugt i32 %491, 31
  %493 = select i1 %492, i32 %486, i32 %485
  %494 = select i1 %492, i32 %487, i32 %486
  %495 = select i1 %492, i32 %488, i32 %487
  %496 = select i1 %492, i32 %489, i32 %488
  %497 = select i1 %492, i32 -32, i32 0
  %498 = add nsw i32 %497, %491
  %499 = icmp eq i32 %498, 0
  %500 = sub nsw i32 32, %498
  %501 = tail call i32 @llvm.fshr.i32(i32 %493, i32 %494, i32 %500)
  %502 = tail call i32 @llvm.fshr.i32(i32 %494, i32 %495, i32 %500)
  %503 = tail call i32 @llvm.fshr.i32(i32 %495, i32 %496, i32 %500)
  %504 = select i1 %499, i32 %493, i32 %501
  %505 = select i1 %499, i32 %494, i32 %502
  %506 = select i1 %499, i32 %495, i32 %503
  %507 = lshr i32 %504, 29
  %508 = tail call i32 @llvm.fshl.i32(i32 %504, i32 %505, i32 2)
  %509 = tail call i32 @llvm.fshl.i32(i32 %505, i32 %506, i32 2)
  %510 = tail call i32 @llvm.fshl.i32(i32 %506, i32 %496, i32 2)
  %511 = and i32 %507, 1
  %512 = sub nsw i32 0, %511
  %513 = shl i32 %507, 31
  %514 = xor i32 %508, %512
  %515 = xor i32 %509, %512
  %516 = xor i32 %510, %512
  %517 = tail call i32 @llvm.ctlz.i32(i32 %514, i1 false), !range !5
  %518 = sub nsw i32 31, %517
  %519 = tail call i32 @llvm.fshr.i32(i32 %514, i32 %515, i32 %518)
  %520 = tail call i32 @llvm.fshr.i32(i32 %515, i32 %516, i32 %518)
  %521 = shl nuw nsw i32 %517, 23
  %522 = sub nuw nsw i32 1056964608, %521
  %523 = lshr i32 %519, 9
  %524 = or i32 %523, %522
  %525 = or i32 %524, %513
  %526 = bitcast i32 %525 to float
  %527 = tail call i32 @llvm.fshl.i32(i32 %519, i32 %520, i32 23)
  %528 = tail call i32 @llvm.ctlz.i32(i32 %527, i1 false), !range !5
  %529 = fmul float %526, 0x3FF921FB40000000
  %530 = add nuw nsw i32 %528, %517
  %531 = shl nuw nsw i32 %530, 23
  %532 = sub nuw nsw i32 855638016, %531
  %533 = sub nsw i32 31, %528
  %534 = tail call i32 @llvm.fshr.i32(i32 %527, i32 %520, i32 %533)
  %535 = lshr i32 %534, 9
  %536 = or i32 %532, %535
  %537 = or i32 %536, %513
  %538 = bitcast i32 %537 to float
  %539 = fneg float %529
  %540 = tail call float @llvm.fma.f32(float %526, float 0x3FF921FB40000000, float %539)
  %541 = tail call float @llvm.fma.f32(float %526, float 0x3E74442D00000000, float %540)
  %542 = tail call float @llvm.fma.f32(float %538, float 0x3FF921FB40000000, float %541)
  %543 = fadd float %529, %542
  %544 = lshr i32 %504, 30
  %545 = add nuw nsw i32 %511, %544
  br label %546

546:                                              ; preds = %433, %440
  %547 = phi float [ %438, %433 ], [ %543, %440 ]
  %548 = phi i32 [ %439, %433 ], [ %545, %440 ]
  %549 = fmul float %547, %547
  %550 = fmul contract float %11, 2.000000e+00
  %551 = tail call float @llvm.fabs.f32(float %550)
  %552 = fcmp olt float %551, 1.310720e+05
  br i1 %552, label %553, label %560

553:                                              ; preds = %546
  %554 = fmul float %551, 0x3FE45F3060000000
  %555 = tail call float @llvm.rint.f32(float %554)
  %556 = tail call float @llvm.fma.f32(float %555, float 0xBFF921FB40000000, float %551)
  %557 = tail call float @llvm.fma.f32(float %555, float 0xBE74442D00000000, float %556)
  %558 = tail call float @llvm.fma.f32(float %555, float 0xBCF8469880000000, float %557)
  %559 = fptosi float %555 to i32
  br label %666

560:                                              ; preds = %546
  %561 = bitcast float %551 to i32
  %562 = lshr i32 %561, 23
  %563 = and i32 %561, 8388607
  %564 = or i32 %563, 8388608
  %565 = zext i32 %564 to i64
  %566 = mul nuw nsw i64 %565, 4266746795
  %567 = trunc i64 %566 to i32
  %568 = lshr i64 %566, 32
  %569 = mul nuw nsw i64 %565, 1011060801
  %570 = add nuw nsw i64 %568, %569
  %571 = trunc i64 %570 to i32
  %572 = lshr i64 %570, 32
  %573 = mul nuw nsw i64 %565, 3680671129
  %574 = add nuw nsw i64 %572, %573
  %575 = trunc i64 %574 to i32
  %576 = lshr i64 %574, 32
  %577 = mul nuw nsw i64 %565, 4113882560
  %578 = add nuw nsw i64 %576, %577
  %579 = trunc i64 %578 to i32
  %580 = lshr i64 %578, 32
  %581 = mul nuw nsw i64 %565, 4230436817
  %582 = add nuw nsw i64 %580, %581
  %583 = trunc i64 %582 to i32
  %584 = lshr i64 %582, 32
  %585 = mul nuw nsw i64 %565, 1313084713
  %586 = add nuw nsw i64 %584, %585
  %587 = trunc i64 %586 to i32
  %588 = lshr i64 %586, 32
  %589 = mul nuw nsw i64 %565, 2734261102
  %590 = add nuw nsw i64 %588, %589
  %591 = trunc i64 %590 to i32
  %592 = lshr i64 %590, 32
  %593 = trunc i64 %592 to i32
  %594 = add nsw i32 %562, -120
  %595 = icmp ugt i32 %594, 63
  %596 = select i1 %595, i32 %587, i32 %593
  %597 = select i1 %595, i32 %583, i32 %591
  %598 = select i1 %595, i32 %579, i32 %587
  %599 = select i1 %595, i32 %575, i32 %583
  %600 = select i1 %595, i32 %571, i32 %579
  %601 = select i1 %595, i32 %567, i32 %575
  %602 = select i1 %595, i32 -64, i32 0
  %603 = add nsw i32 %602, %594
  %604 = icmp ugt i32 %603, 31
  %605 = select i1 %604, i32 %597, i32 %596
  %606 = select i1 %604, i32 %598, i32 %597
  %607 = select i1 %604, i32 %599, i32 %598
  %608 = select i1 %604, i32 %600, i32 %599
  %609 = select i1 %604, i32 %601, i32 %600
  %610 = select i1 %604, i32 -32, i32 0
  %611 = add nsw i32 %610, %603
  %612 = icmp ugt i32 %611, 31
  %613 = select i1 %612, i32 %606, i32 %605
  %614 = select i1 %612, i32 %607, i32 %606
  %615 = select i1 %612, i32 %608, i32 %607
  %616 = select i1 %612, i32 %609, i32 %608
  %617 = select i1 %612, i32 -32, i32 0
  %618 = add nsw i32 %617, %611
  %619 = icmp eq i32 %618, 0
  %620 = sub nsw i32 32, %618
  %621 = tail call i32 @llvm.fshr.i32(i32 %613, i32 %614, i32 %620)
  %622 = tail call i32 @llvm.fshr.i32(i32 %614, i32 %615, i32 %620)
  %623 = tail call i32 @llvm.fshr.i32(i32 %615, i32 %616, i32 %620)
  %624 = select i1 %619, i32 %613, i32 %621
  %625 = select i1 %619, i32 %614, i32 %622
  %626 = select i1 %619, i32 %615, i32 %623
  %627 = lshr i32 %624, 29
  %628 = tail call i32 @llvm.fshl.i32(i32 %624, i32 %625, i32 2)
  %629 = tail call i32 @llvm.fshl.i32(i32 %625, i32 %626, i32 2)
  %630 = tail call i32 @llvm.fshl.i32(i32 %626, i32 %616, i32 2)
  %631 = and i32 %627, 1
  %632 = sub nsw i32 0, %631
  %633 = shl i32 %627, 31
  %634 = xor i32 %628, %632
  %635 = xor i32 %629, %632
  %636 = xor i32 %630, %632
  %637 = tail call i32 @llvm.ctlz.i32(i32 %634, i1 false), !range !5
  %638 = sub nsw i32 31, %637
  %639 = tail call i32 @llvm.fshr.i32(i32 %634, i32 %635, i32 %638)
  %640 = tail call i32 @llvm.fshr.i32(i32 %635, i32 %636, i32 %638)
  %641 = shl nuw nsw i32 %637, 23
  %642 = sub nuw nsw i32 1056964608, %641
  %643 = lshr i32 %639, 9
  %644 = or i32 %643, %642
  %645 = or i32 %644, %633
  %646 = bitcast i32 %645 to float
  %647 = tail call i32 @llvm.fshl.i32(i32 %639, i32 %640, i32 23)
  %648 = tail call i32 @llvm.ctlz.i32(i32 %647, i1 false), !range !5
  %649 = fmul float %646, 0x3FF921FB40000000
  %650 = add nuw nsw i32 %648, %637
  %651 = shl nuw nsw i32 %650, 23
  %652 = sub nuw nsw i32 855638016, %651
  %653 = sub nsw i32 31, %648
  %654 = tail call i32 @llvm.fshr.i32(i32 %647, i32 %640, i32 %653)
  %655 = lshr i32 %654, 9
  %656 = or i32 %652, %655
  %657 = or i32 %656, %633
  %658 = bitcast i32 %657 to float
  %659 = fneg float %649
  %660 = tail call float @llvm.fma.f32(float %646, float 0x3FF921FB40000000, float %659)
  %661 = tail call float @llvm.fma.f32(float %646, float 0x3E74442D00000000, float %660)
  %662 = tail call float @llvm.fma.f32(float %658, float 0x3FF921FB40000000, float %661)
  %663 = fadd float %649, %662
  %664 = lshr i32 %624, 30
  %665 = add nuw nsw i32 %631, %664
  br label %666

666:                                              ; preds = %553, %560
  %667 = phi float [ %558, %553 ], [ %663, %560 ]
  %668 = phi i32 [ %559, %553 ], [ %665, %560 ]
  %669 = fmul float %667, %667
  %670 = fmul contract float %11, 3.000000e+00
  %671 = tail call float @llvm.fabs.f32(float %670)
  %672 = fcmp olt float %671, 1.310720e+05
  br i1 %672, label %673, label %680

673:                                              ; preds = %666
  %674 = fmul float %671, 0x3FE45F3060000000
  %675 = tail call float @llvm.rint.f32(float %674)
  %676 = tail call float @llvm.fma.f32(float %675, float 0xBFF921FB40000000, float %671)
  %677 = tail call float @llvm.fma.f32(float %675, float 0xBE74442D00000000, float %676)
  %678 = tail call float @llvm.fma.f32(float %675, float 0xBCF8469880000000, float %677)
  %679 = fptosi float %675 to i32
  br label %786

680:                                              ; preds = %666
  %681 = bitcast float %671 to i32
  %682 = lshr i32 %681, 23
  %683 = and i32 %681, 8388607
  %684 = or i32 %683, 8388608
  %685 = zext i32 %684 to i64
  %686 = mul nuw nsw i64 %685, 4266746795
  %687 = trunc i64 %686 to i32
  %688 = lshr i64 %686, 32
  %689 = mul nuw nsw i64 %685, 1011060801
  %690 = add nuw nsw i64 %688, %689
  %691 = trunc i64 %690 to i32
  %692 = lshr i64 %690, 32
  %693 = mul nuw nsw i64 %685, 3680671129
  %694 = add nuw nsw i64 %692, %693
  %695 = trunc i64 %694 to i32
  %696 = lshr i64 %694, 32
  %697 = mul nuw nsw i64 %685, 4113882560
  %698 = add nuw nsw i64 %696, %697
  %699 = trunc i64 %698 to i32
  %700 = lshr i64 %698, 32
  %701 = mul nuw nsw i64 %685, 4230436817
  %702 = add nuw nsw i64 %700, %701
  %703 = trunc i64 %702 to i32
  %704 = lshr i64 %702, 32
  %705 = mul nuw nsw i64 %685, 1313084713
  %706 = add nuw nsw i64 %704, %705
  %707 = trunc i64 %706 to i32
  %708 = lshr i64 %706, 32
  %709 = mul nuw nsw i64 %685, 2734261102
  %710 = add nuw nsw i64 %708, %709
  %711 = trunc i64 %710 to i32
  %712 = lshr i64 %710, 32
  %713 = trunc i64 %712 to i32
  %714 = add nsw i32 %682, -120
  %715 = icmp ugt i32 %714, 63
  %716 = select i1 %715, i32 %707, i32 %713
  %717 = select i1 %715, i32 %703, i32 %711
  %718 = select i1 %715, i32 %699, i32 %707
  %719 = select i1 %715, i32 %695, i32 %703
  %720 = select i1 %715, i32 %691, i32 %699
  %721 = select i1 %715, i32 %687, i32 %695
  %722 = select i1 %715, i32 -64, i32 0
  %723 = add nsw i32 %722, %714
  %724 = icmp ugt i32 %723, 31
  %725 = select i1 %724, i32 %717, i32 %716
  %726 = select i1 %724, i32 %718, i32 %717
  %727 = select i1 %724, i32 %719, i32 %718
  %728 = select i1 %724, i32 %720, i32 %719
  %729 = select i1 %724, i32 %721, i32 %720
  %730 = select i1 %724, i32 -32, i32 0
  %731 = add nsw i32 %730, %723
  %732 = icmp ugt i32 %731, 31
  %733 = select i1 %732, i32 %726, i32 %725
  %734 = select i1 %732, i32 %727, i32 %726
  %735 = select i1 %732, i32 %728, i32 %727
  %736 = select i1 %732, i32 %729, i32 %728
  %737 = select i1 %732, i32 -32, i32 0
  %738 = add nsw i32 %737, %731
  %739 = icmp eq i32 %738, 0
  %740 = sub nsw i32 32, %738
  %741 = tail call i32 @llvm.fshr.i32(i32 %733, i32 %734, i32 %740)
  %742 = tail call i32 @llvm.fshr.i32(i32 %734, i32 %735, i32 %740)
  %743 = tail call i32 @llvm.fshr.i32(i32 %735, i32 %736, i32 %740)
  %744 = select i1 %739, i32 %733, i32 %741
  %745 = select i1 %739, i32 %734, i32 %742
  %746 = select i1 %739, i32 %735, i32 %743
  %747 = lshr i32 %744, 29
  %748 = tail call i32 @llvm.fshl.i32(i32 %744, i32 %745, i32 2)
  %749 = tail call i32 @llvm.fshl.i32(i32 %745, i32 %746, i32 2)
  %750 = tail call i32 @llvm.fshl.i32(i32 %746, i32 %736, i32 2)
  %751 = and i32 %747, 1
  %752 = sub nsw i32 0, %751
  %753 = shl i32 %747, 31
  %754 = xor i32 %748, %752
  %755 = xor i32 %749, %752
  %756 = xor i32 %750, %752
  %757 = tail call i32 @llvm.ctlz.i32(i32 %754, i1 false), !range !5
  %758 = sub nsw i32 31, %757
  %759 = tail call i32 @llvm.fshr.i32(i32 %754, i32 %755, i32 %758)
  %760 = tail call i32 @llvm.fshr.i32(i32 %755, i32 %756, i32 %758)
  %761 = shl nuw nsw i32 %757, 23
  %762 = sub nuw nsw i32 1056964608, %761
  %763 = lshr i32 %759, 9
  %764 = or i32 %763, %762
  %765 = or i32 %764, %753
  %766 = bitcast i32 %765 to float
  %767 = tail call i32 @llvm.fshl.i32(i32 %759, i32 %760, i32 23)
  %768 = tail call i32 @llvm.ctlz.i32(i32 %767, i1 false), !range !5
  %769 = fmul float %766, 0x3FF921FB40000000
  %770 = add nuw nsw i32 %768, %757
  %771 = shl nuw nsw i32 %770, 23
  %772 = sub nuw nsw i32 855638016, %771
  %773 = sub nsw i32 31, %768
  %774 = tail call i32 @llvm.fshr.i32(i32 %767, i32 %760, i32 %773)
  %775 = lshr i32 %774, 9
  %776 = or i32 %772, %775
  %777 = or i32 %776, %753
  %778 = bitcast i32 %777 to float
  %779 = fneg float %769
  %780 = tail call float @llvm.fma.f32(float %766, float 0x3FF921FB40000000, float %779)
  %781 = tail call float @llvm.fma.f32(float %766, float 0x3E74442D00000000, float %780)
  %782 = tail call float @llvm.fma.f32(float %778, float 0x3FF921FB40000000, float %781)
  %783 = fadd float %769, %782
  %784 = lshr i32 %744, 30
  %785 = add nuw nsw i32 %751, %784
  br label %786

786:                                              ; preds = %673, %680
  %787 = phi float [ %678, %673 ], [ %783, %680 ]
  %788 = phi i32 [ %679, %673 ], [ %785, %680 ]
  %789 = fmul float %787, %787
  %790 = fmul contract float %11, 4.000000e+00
  %791 = tail call float @llvm.fabs.f32(float %790)
  %792 = fcmp olt float %791, 1.310720e+05
  br i1 %792, label %793, label %800

793:                                              ; preds = %786
  %794 = fmul float %791, 0x3FE45F3060000000
  %795 = tail call float @llvm.rint.f32(float %794)
  %796 = tail call float @llvm.fma.f32(float %795, float 0xBFF921FB40000000, float %791)
  %797 = tail call float @llvm.fma.f32(float %795, float 0xBE74442D00000000, float %796)
  %798 = tail call float @llvm.fma.f32(float %795, float 0xBCF8469880000000, float %797)
  %799 = fptosi float %795 to i32
  br label %906

800:                                              ; preds = %786
  %801 = bitcast float %791 to i32
  %802 = lshr i32 %801, 23
  %803 = and i32 %801, 8388607
  %804 = or i32 %803, 8388608
  %805 = zext i32 %804 to i64
  %806 = mul nuw nsw i64 %805, 4266746795
  %807 = trunc i64 %806 to i32
  %808 = lshr i64 %806, 32
  %809 = mul nuw nsw i64 %805, 1011060801
  %810 = add nuw nsw i64 %808, %809
  %811 = trunc i64 %810 to i32
  %812 = lshr i64 %810, 32
  %813 = mul nuw nsw i64 %805, 3680671129
  %814 = add nuw nsw i64 %812, %813
  %815 = trunc i64 %814 to i32
  %816 = lshr i64 %814, 32
  %817 = mul nuw nsw i64 %805, 4113882560
  %818 = add nuw nsw i64 %816, %817
  %819 = trunc i64 %818 to i32
  %820 = lshr i64 %818, 32
  %821 = mul nuw nsw i64 %805, 4230436817
  %822 = add nuw nsw i64 %820, %821
  %823 = trunc i64 %822 to i32
  %824 = lshr i64 %822, 32
  %825 = mul nuw nsw i64 %805, 1313084713
  %826 = add nuw nsw i64 %824, %825
  %827 = trunc i64 %826 to i32
  %828 = lshr i64 %826, 32
  %829 = mul nuw nsw i64 %805, 2734261102
  %830 = add nuw nsw i64 %828, %829
  %831 = trunc i64 %830 to i32
  %832 = lshr i64 %830, 32
  %833 = trunc i64 %832 to i32
  %834 = add nsw i32 %802, -120
  %835 = icmp ugt i32 %834, 63
  %836 = select i1 %835, i32 %827, i32 %833
  %837 = select i1 %835, i32 %823, i32 %831
  %838 = select i1 %835, i32 %819, i32 %827
  %839 = select i1 %835, i32 %815, i32 %823
  %840 = select i1 %835, i32 %811, i32 %819
  %841 = select i1 %835, i32 %807, i32 %815
  %842 = select i1 %835, i32 -64, i32 0
  %843 = add nsw i32 %842, %834
  %844 = icmp ugt i32 %843, 31
  %845 = select i1 %844, i32 %837, i32 %836
  %846 = select i1 %844, i32 %838, i32 %837
  %847 = select i1 %844, i32 %839, i32 %838
  %848 = select i1 %844, i32 %840, i32 %839
  %849 = select i1 %844, i32 %841, i32 %840
  %850 = select i1 %844, i32 -32, i32 0
  %851 = add nsw i32 %850, %843
  %852 = icmp ugt i32 %851, 31
  %853 = select i1 %852, i32 %846, i32 %845
  %854 = select i1 %852, i32 %847, i32 %846
  %855 = select i1 %852, i32 %848, i32 %847
  %856 = select i1 %852, i32 %849, i32 %848
  %857 = select i1 %852, i32 -32, i32 0
  %858 = add nsw i32 %857, %851
  %859 = icmp eq i32 %858, 0
  %860 = sub nsw i32 32, %858
  %861 = tail call i32 @llvm.fshr.i32(i32 %853, i32 %854, i32 %860)
  %862 = tail call i32 @llvm.fshr.i32(i32 %854, i32 %855, i32 %860)
  %863 = tail call i32 @llvm.fshr.i32(i32 %855, i32 %856, i32 %860)
  %864 = select i1 %859, i32 %853, i32 %861
  %865 = select i1 %859, i32 %854, i32 %862
  %866 = select i1 %859, i32 %855, i32 %863
  %867 = lshr i32 %864, 29
  %868 = tail call i32 @llvm.fshl.i32(i32 %864, i32 %865, i32 2)
  %869 = tail call i32 @llvm.fshl.i32(i32 %865, i32 %866, i32 2)
  %870 = tail call i32 @llvm.fshl.i32(i32 %866, i32 %856, i32 2)
  %871 = and i32 %867, 1
  %872 = sub nsw i32 0, %871
  %873 = shl i32 %867, 31
  %874 = xor i32 %868, %872
  %875 = xor i32 %869, %872
  %876 = xor i32 %870, %872
  %877 = tail call i32 @llvm.ctlz.i32(i32 %874, i1 false), !range !5
  %878 = sub nsw i32 31, %877
  %879 = tail call i32 @llvm.fshr.i32(i32 %874, i32 %875, i32 %878)
  %880 = tail call i32 @llvm.fshr.i32(i32 %875, i32 %876, i32 %878)
  %881 = shl nuw nsw i32 %877, 23
  %882 = sub nuw nsw i32 1056964608, %881
  %883 = lshr i32 %879, 9
  %884 = or i32 %883, %882
  %885 = or i32 %884, %873
  %886 = bitcast i32 %885 to float
  %887 = tail call i32 @llvm.fshl.i32(i32 %879, i32 %880, i32 23)
  %888 = tail call i32 @llvm.ctlz.i32(i32 %887, i1 false), !range !5
  %889 = fmul float %886, 0x3FF921FB40000000
  %890 = add nuw nsw i32 %888, %877
  %891 = shl nuw nsw i32 %890, 23
  %892 = sub nuw nsw i32 855638016, %891
  %893 = sub nsw i32 31, %888
  %894 = tail call i32 @llvm.fshr.i32(i32 %887, i32 %880, i32 %893)
  %895 = lshr i32 %894, 9
  %896 = or i32 %892, %895
  %897 = or i32 %896, %873
  %898 = bitcast i32 %897 to float
  %899 = fneg float %889
  %900 = tail call float @llvm.fma.f32(float %886, float 0x3FF921FB40000000, float %899)
  %901 = tail call float @llvm.fma.f32(float %886, float 0x3E74442D00000000, float %900)
  %902 = tail call float @llvm.fma.f32(float %898, float 0x3FF921FB40000000, float %901)
  %903 = fadd float %889, %902
  %904 = lshr i32 %864, 30
  %905 = add nuw nsw i32 %871, %904
  br label %906

906:                                              ; preds = %793, %800
  %907 = phi float [ %798, %793 ], [ %903, %800 ]
  %908 = phi i32 [ %799, %793 ], [ %905, %800 ]
  %909 = shl i32 %548, 30
  %910 = and i32 %909, -2147483648
  %911 = and i32 %548, 1
  %912 = icmp eq i32 %911, 0
  %913 = tail call float @llvm.fmuladd.f32(float %549, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %914 = tail call float @llvm.fmuladd.f32(float %549, float %913, float 0x3FA5557EE0000000)
  %915 = tail call float @llvm.fmuladd.f32(float %549, float %914, float 0xBFE0000080000000)
  %916 = tail call float @llvm.fmuladd.f32(float %549, float %915, float 1.000000e+00)
  %917 = tail call float @llvm.fmuladd.f32(float %549, float 0xBF29833040000000, float 0x3F81103880000000)
  %918 = tail call float @llvm.fmuladd.f32(float %549, float %917, float 0xBFC55553A0000000)
  %919 = fmul float %549, %918
  %920 = tail call float @llvm.fmuladd.f32(float %547, float %919, float %547)
  %921 = fneg float %920
  %922 = select i1 %912, float %916, float %921
  %923 = bitcast float %922 to i32
  %924 = xor i32 %910, %923
  %925 = bitcast i32 %924 to float
  %926 = fmul contract float %925, 1.300000e+01
  %927 = select i1 %152, float %926, float 0x7FF8000000000000
  %928 = tail call i1 @llvm.amdgcn.class.f32(float %551, i32 504)
  %929 = shl i32 %668, 30
  %930 = and i32 %929, -2147483648
  %931 = and i32 %668, 1
  %932 = icmp eq i32 %931, 0
  %933 = tail call float @llvm.fmuladd.f32(float %669, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %934 = tail call float @llvm.fmuladd.f32(float %669, float %933, float 0x3FA5557EE0000000)
  %935 = tail call float @llvm.fmuladd.f32(float %669, float %934, float 0xBFE0000080000000)
  %936 = tail call float @llvm.fmuladd.f32(float %669, float %935, float 1.000000e+00)
  %937 = tail call float @llvm.fmuladd.f32(float %669, float 0xBF29833040000000, float 0x3F81103880000000)
  %938 = tail call float @llvm.fmuladd.f32(float %669, float %937, float 0xBFC55553A0000000)
  %939 = fmul float %669, %938
  %940 = tail call float @llvm.fmuladd.f32(float %667, float %939, float %667)
  %941 = fneg float %940
  %942 = select i1 %932, float %936, float %941
  %943 = bitcast float %942 to i32
  %944 = xor i32 %930, %943
  %945 = bitcast i32 %944 to float
  %946 = fmul contract float %945, 5.000000e+00
  %947 = select i1 %928, float %946, float 0x7FF8000000000000
  %948 = fsub contract float %927, %947
  %949 = tail call i1 @llvm.amdgcn.class.f32(float %671, i32 504)
  %950 = shl i32 %788, 30
  %951 = and i32 %950, -2147483648
  %952 = and i32 %788, 1
  %953 = icmp eq i32 %952, 0
  %954 = tail call float @llvm.fmuladd.f32(float %789, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %955 = tail call float @llvm.fmuladd.f32(float %789, float %954, float 0x3FA5557EE0000000)
  %956 = tail call float @llvm.fmuladd.f32(float %789, float %955, float 0xBFE0000080000000)
  %957 = tail call float @llvm.fmuladd.f32(float %789, float %956, float 1.000000e+00)
  %958 = tail call float @llvm.fmuladd.f32(float %789, float 0xBF29833040000000, float 0x3F81103880000000)
  %959 = tail call float @llvm.fmuladd.f32(float %789, float %958, float 0xBFC55553A0000000)
  %960 = fmul float %789, %959
  %961 = tail call float @llvm.fmuladd.f32(float %787, float %960, float %787)
  %962 = fneg float %961
  %963 = select i1 %953, float %957, float %962
  %964 = bitcast float %963 to i32
  %965 = xor i32 %951, %964
  %966 = bitcast i32 %965 to float
  %967 = fmul contract float %966, 2.000000e+00
  %968 = select i1 %949, float %967, float 0x7FF8000000000000
  %969 = fsub contract float %948, %968
  %970 = fmul float %907, %907
  %971 = tail call float @llvm.fmuladd.f32(float %970, float 0xBF29833040000000, float 0x3F81103880000000)
  %972 = tail call float @llvm.fmuladd.f32(float %970, float %971, float 0xBFC55553A0000000)
  %973 = fmul float %970, %972
  %974 = tail call float @llvm.fmuladd.f32(float %907, float %973, float %907)
  %975 = tail call float @llvm.fmuladd.f32(float %970, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %976 = tail call float @llvm.fmuladd.f32(float %970, float %975, float 0x3FA5557EE0000000)
  %977 = tail call float @llvm.fmuladd.f32(float %970, float %976, float 0xBFE0000080000000)
  %978 = tail call float @llvm.fmuladd.f32(float %970, float %977, float 1.000000e+00)
  %979 = fneg float %974
  %980 = and i32 %908, 1
  %981 = icmp eq i32 %980, 0
  %982 = select i1 %981, float %978, float %979
  %983 = bitcast float %982 to i32
  %984 = shl i32 %908, 30
  %985 = and i32 %984, -2147483648
  %986 = xor i32 %985, %983
  %987 = bitcast i32 %986 to float
  %988 = tail call i1 @llvm.amdgcn.class.f32(float %791, i32 504)
  %989 = select i1 %988, float %987, float 0x7FF8000000000000
  %990 = fsub contract float %969, %989
  %991 = fmul contract float %990, -5.000000e-01
  %992 = getelementptr inbounds float, float addrspace(1)* %2, i64 %431
  store float %991, float addrspace(1)* %992, align 4, !tbaa !6
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{i32 0, i32 33}
!6 = !{!7, !7, i64 0}
!7 = !{!"float", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
