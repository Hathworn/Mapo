digraph "CFG for '_Z9drawHeartiPfS_' function" {
	label="CFG for '_Z9drawHeartiPfS_' function";

	Node0x53643e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %5 = mul i32 %4, %0\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = add i32 %5, %6\l  %8 = sitofp i32 %7 to float\l  %9 = fmul contract float %8, 0x401921FB40000000\l  %10 = sitofp i32 %0 to float\l  %11 = fdiv contract float %9, %10\l  %12 = tail call float @llvm.fabs.f32(float %11)\l  %13 = fcmp olt float %12, 1.310720e+05\l  br i1 %13, label %14, label %22\l|{<s0>T|<s1>F}}"];
	Node0x53643e0:s0 -> Node0x53669d0;
	Node0x53643e0:s1 -> Node0x5366a60;
	Node0x53669d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%14:\l14:                                               \l  %15 = fmul float %12, 0x3FE45F3060000000\l  %16 = tail call float @llvm.rint.f32(float %15)\l  %17 = tail call float @llvm.fma.f32(float %16, float 0xBFF921FB40000000,\l... float %12)\l  %18 = tail call float @llvm.fma.f32(float %16, float 0xBE74442D00000000,\l... float %17)\l  %19 = tail call float @llvm.fma.f32(float %16, float 0xBCF8469880000000,\l... float %18)\l  %20 = fptosi float %16 to i32\l  %21 = bitcast float %12 to i32\l  br label %128\l}"];
	Node0x53669d0 -> Node0x53675b0;
	Node0x5366a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%22:\l22:                                               \l  %23 = bitcast float %12 to i32\l  %24 = lshr i32 %23, 23\l  %25 = and i32 %23, 8388607\l  %26 = or i32 %25, 8388608\l  %27 = zext i32 %26 to i64\l  %28 = mul nuw nsw i64 %27, 4266746795\l  %29 = trunc i64 %28 to i32\l  %30 = lshr i64 %28, 32\l  %31 = mul nuw nsw i64 %27, 1011060801\l  %32 = add nuw nsw i64 %30, %31\l  %33 = trunc i64 %32 to i32\l  %34 = lshr i64 %32, 32\l  %35 = mul nuw nsw i64 %27, 3680671129\l  %36 = add nuw nsw i64 %34, %35\l  %37 = trunc i64 %36 to i32\l  %38 = lshr i64 %36, 32\l  %39 = mul nuw nsw i64 %27, 4113882560\l  %40 = add nuw nsw i64 %38, %39\l  %41 = trunc i64 %40 to i32\l  %42 = lshr i64 %40, 32\l  %43 = mul nuw nsw i64 %27, 4230436817\l  %44 = add nuw nsw i64 %42, %43\l  %45 = trunc i64 %44 to i32\l  %46 = lshr i64 %44, 32\l  %47 = mul nuw nsw i64 %27, 1313084713\l  %48 = add nuw nsw i64 %46, %47\l  %49 = trunc i64 %48 to i32\l  %50 = lshr i64 %48, 32\l  %51 = mul nuw nsw i64 %27, 2734261102\l  %52 = add nuw nsw i64 %50, %51\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = trunc i64 %54 to i32\l  %56 = add nsw i32 %24, -120\l  %57 = icmp ugt i32 %56, 63\l  %58 = select i1 %57, i32 %49, i32 %55\l  %59 = select i1 %57, i32 %45, i32 %53\l  %60 = select i1 %57, i32 %41, i32 %49\l  %61 = select i1 %57, i32 %37, i32 %45\l  %62 = select i1 %57, i32 %33, i32 %41\l  %63 = select i1 %57, i32 %29, i32 %37\l  %64 = select i1 %57, i32 -64, i32 0\l  %65 = add nsw i32 %64, %56\l  %66 = icmp ugt i32 %65, 31\l  %67 = select i1 %66, i32 %59, i32 %58\l  %68 = select i1 %66, i32 %60, i32 %59\l  %69 = select i1 %66, i32 %61, i32 %60\l  %70 = select i1 %66, i32 %62, i32 %61\l  %71 = select i1 %66, i32 %63, i32 %62\l  %72 = select i1 %66, i32 -32, i32 0\l  %73 = add nsw i32 %72, %65\l  %74 = icmp ugt i32 %73, 31\l  %75 = select i1 %74, i32 %68, i32 %67\l  %76 = select i1 %74, i32 %69, i32 %68\l  %77 = select i1 %74, i32 %70, i32 %69\l  %78 = select i1 %74, i32 %71, i32 %70\l  %79 = select i1 %74, i32 -32, i32 0\l  %80 = add nsw i32 %79, %73\l  %81 = icmp eq i32 %80, 0\l  %82 = sub nsw i32 32, %80\l  %83 = tail call i32 @llvm.fshr.i32(i32 %75, i32 %76, i32 %82)\l  %84 = tail call i32 @llvm.fshr.i32(i32 %76, i32 %77, i32 %82)\l  %85 = tail call i32 @llvm.fshr.i32(i32 %77, i32 %78, i32 %82)\l  %86 = select i1 %81, i32 %75, i32 %83\l  %87 = select i1 %81, i32 %76, i32 %84\l  %88 = select i1 %81, i32 %77, i32 %85\l  %89 = lshr i32 %86, 29\l  %90 = tail call i32 @llvm.fshl.i32(i32 %86, i32 %87, i32 2)\l  %91 = tail call i32 @llvm.fshl.i32(i32 %87, i32 %88, i32 2)\l  %92 = tail call i32 @llvm.fshl.i32(i32 %88, i32 %78, i32 2)\l  %93 = and i32 %89, 1\l  %94 = sub nsw i32 0, %93\l  %95 = shl i32 %89, 31\l  %96 = xor i32 %90, %94\l  %97 = xor i32 %91, %94\l  %98 = xor i32 %92, %94\l  %99 = tail call i32 @llvm.ctlz.i32(i32 %96, i1 false), !range !5\l  %100 = sub nsw i32 31, %99\l  %101 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %100)\l  %102 = tail call i32 @llvm.fshr.i32(i32 %97, i32 %98, i32 %100)\l  %103 = shl nuw nsw i32 %99, 23\l  %104 = sub nuw nsw i32 1056964608, %103\l  %105 = lshr i32 %101, 9\l  %106 = or i32 %105, %104\l  %107 = or i32 %106, %95\l  %108 = bitcast i32 %107 to float\l  %109 = tail call i32 @llvm.fshl.i32(i32 %101, i32 %102, i32 23)\l  %110 = tail call i32 @llvm.ctlz.i32(i32 %109, i1 false), !range !5\l  %111 = fmul float %108, 0x3FF921FB40000000\l  %112 = add nuw nsw i32 %110, %99\l  %113 = shl nuw nsw i32 %112, 23\l  %114 = sub nuw nsw i32 855638016, %113\l  %115 = sub nsw i32 31, %110\l  %116 = tail call i32 @llvm.fshr.i32(i32 %109, i32 %102, i32 %115)\l  %117 = lshr i32 %116, 9\l  %118 = or i32 %114, %117\l  %119 = or i32 %118, %95\l  %120 = bitcast i32 %119 to float\l  %121 = fneg float %111\l  %122 = tail call float @llvm.fma.f32(float %108, float 0x3FF921FB40000000,\l... float %121)\l  %123 = tail call float @llvm.fma.f32(float %108, float 0x3E74442D00000000,\l... float %122)\l  %124 = tail call float @llvm.fma.f32(float %120, float 0x3FF921FB40000000,\l... float %123)\l  %125 = fadd float %111, %124\l  %126 = lshr i32 %86, 30\l  %127 = add nuw nsw i32 %93, %126\l  br label %128\l}"];
	Node0x5366a60 -> Node0x53675b0;
	Node0x53675b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%128:\l128:                                              \l  %129 = phi i32 [ %21, %14 ], [ %23, %22 ]\l  %130 = phi float [ %19, %14 ], [ %125, %22 ]\l  %131 = phi i32 [ %20, %14 ], [ %127, %22 ]\l  %132 = fmul float %130, %130\l  %133 = tail call float @llvm.fmuladd.f32(float %132, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %134 = tail call float @llvm.fmuladd.f32(float %132, float %133, float\l... 0xBFC55553A0000000)\l  %135 = fmul float %132, %134\l  %136 = tail call float @llvm.fmuladd.f32(float %130, float %135, float %130)\l  %137 = tail call float @llvm.fmuladd.f32(float %132, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %138 = tail call float @llvm.fmuladd.f32(float %132, float %137, float\l... 0x3FA5557EE0000000)\l  %139 = tail call float @llvm.fmuladd.f32(float %132, float %138, float\l... 0xBFE0000080000000)\l  %140 = tail call float @llvm.fmuladd.f32(float %132, float %139, float\l... 1.000000e+00)\l  %141 = and i32 %131, 1\l  %142 = icmp eq i32 %141, 0\l  %143 = select i1 %142, float %136, float %140\l  %144 = bitcast float %143 to i32\l  %145 = shl i32 %131, 30\l  %146 = and i32 %145, -2147483648\l  %147 = bitcast float %11 to i32\l  %148 = xor i32 %129, %146\l  %149 = xor i32 %148, %144\l  %150 = xor i32 %149, %147\l  %151 = bitcast i32 %150 to float\l  %152 = tail call i1 @llvm.amdgcn.class.f32(float %12, i32 504)\l  %153 = fmul contract float %151, 8.000000e+00\l  br i1 %13, label %154, label %162\l|{<s0>T|<s1>F}}"];
	Node0x53675b0:s0 -> Node0x536f160;
	Node0x53675b0:s1 -> Node0x536f1f0;
	Node0x536f160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%154:\l154:                                              \l  %155 = fmul float %12, 0x3FE45F3060000000\l  %156 = tail call float @llvm.rint.f32(float %155)\l  %157 = tail call float @llvm.fma.f32(float %156, float 0xBFF921FB40000000,\l... float %12)\l  %158 = tail call float @llvm.fma.f32(float %156, float 0xBE74442D00000000,\l... float %157)\l  %159 = tail call float @llvm.fma.f32(float %156, float 0xBCF8469880000000,\l... float %158)\l  %160 = fptosi float %156 to i32\l  %161 = bitcast float %12 to i32\l  br label %268\l}"];
	Node0x536f160 -> Node0x536f980;
	Node0x536f1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%162:\l162:                                              \l  %163 = bitcast float %12 to i32\l  %164 = lshr i32 %163, 23\l  %165 = and i32 %163, 8388607\l  %166 = or i32 %165, 8388608\l  %167 = zext i32 %166 to i64\l  %168 = mul nuw nsw i64 %167, 4266746795\l  %169 = trunc i64 %168 to i32\l  %170 = lshr i64 %168, 32\l  %171 = mul nuw nsw i64 %167, 1011060801\l  %172 = add nuw nsw i64 %170, %171\l  %173 = trunc i64 %172 to i32\l  %174 = lshr i64 %172, 32\l  %175 = mul nuw nsw i64 %167, 3680671129\l  %176 = add nuw nsw i64 %174, %175\l  %177 = trunc i64 %176 to i32\l  %178 = lshr i64 %176, 32\l  %179 = mul nuw nsw i64 %167, 4113882560\l  %180 = add nuw nsw i64 %178, %179\l  %181 = trunc i64 %180 to i32\l  %182 = lshr i64 %180, 32\l  %183 = mul nuw nsw i64 %167, 4230436817\l  %184 = add nuw nsw i64 %182, %183\l  %185 = trunc i64 %184 to i32\l  %186 = lshr i64 %184, 32\l  %187 = mul nuw nsw i64 %167, 1313084713\l  %188 = add nuw nsw i64 %186, %187\l  %189 = trunc i64 %188 to i32\l  %190 = lshr i64 %188, 32\l  %191 = mul nuw nsw i64 %167, 2734261102\l  %192 = add nuw nsw i64 %190, %191\l  %193 = trunc i64 %192 to i32\l  %194 = lshr i64 %192, 32\l  %195 = trunc i64 %194 to i32\l  %196 = add nsw i32 %164, -120\l  %197 = icmp ugt i32 %196, 63\l  %198 = select i1 %197, i32 %189, i32 %195\l  %199 = select i1 %197, i32 %185, i32 %193\l  %200 = select i1 %197, i32 %181, i32 %189\l  %201 = select i1 %197, i32 %177, i32 %185\l  %202 = select i1 %197, i32 %173, i32 %181\l  %203 = select i1 %197, i32 %169, i32 %177\l  %204 = select i1 %197, i32 -64, i32 0\l  %205 = add nsw i32 %204, %196\l  %206 = icmp ugt i32 %205, 31\l  %207 = select i1 %206, i32 %199, i32 %198\l  %208 = select i1 %206, i32 %200, i32 %199\l  %209 = select i1 %206, i32 %201, i32 %200\l  %210 = select i1 %206, i32 %202, i32 %201\l  %211 = select i1 %206, i32 %203, i32 %202\l  %212 = select i1 %206, i32 -32, i32 0\l  %213 = add nsw i32 %212, %205\l  %214 = icmp ugt i32 %213, 31\l  %215 = select i1 %214, i32 %208, i32 %207\l  %216 = select i1 %214, i32 %209, i32 %208\l  %217 = select i1 %214, i32 %210, i32 %209\l  %218 = select i1 %214, i32 %211, i32 %210\l  %219 = select i1 %214, i32 -32, i32 0\l  %220 = add nsw i32 %219, %213\l  %221 = icmp eq i32 %220, 0\l  %222 = sub nsw i32 32, %220\l  %223 = tail call i32 @llvm.fshr.i32(i32 %215, i32 %216, i32 %222)\l  %224 = tail call i32 @llvm.fshr.i32(i32 %216, i32 %217, i32 %222)\l  %225 = tail call i32 @llvm.fshr.i32(i32 %217, i32 %218, i32 %222)\l  %226 = select i1 %221, i32 %215, i32 %223\l  %227 = select i1 %221, i32 %216, i32 %224\l  %228 = select i1 %221, i32 %217, i32 %225\l  %229 = lshr i32 %226, 29\l  %230 = tail call i32 @llvm.fshl.i32(i32 %226, i32 %227, i32 2)\l  %231 = tail call i32 @llvm.fshl.i32(i32 %227, i32 %228, i32 2)\l  %232 = tail call i32 @llvm.fshl.i32(i32 %228, i32 %218, i32 2)\l  %233 = and i32 %229, 1\l  %234 = sub nsw i32 0, %233\l  %235 = shl i32 %229, 31\l  %236 = xor i32 %230, %234\l  %237 = xor i32 %231, %234\l  %238 = xor i32 %232, %234\l  %239 = tail call i32 @llvm.ctlz.i32(i32 %236, i1 false), !range !5\l  %240 = sub nsw i32 31, %239\l  %241 = tail call i32 @llvm.fshr.i32(i32 %236, i32 %237, i32 %240)\l  %242 = tail call i32 @llvm.fshr.i32(i32 %237, i32 %238, i32 %240)\l  %243 = shl nuw nsw i32 %239, 23\l  %244 = sub nuw nsw i32 1056964608, %243\l  %245 = lshr i32 %241, 9\l  %246 = or i32 %245, %244\l  %247 = or i32 %246, %235\l  %248 = bitcast i32 %247 to float\l  %249 = tail call i32 @llvm.fshl.i32(i32 %241, i32 %242, i32 23)\l  %250 = tail call i32 @llvm.ctlz.i32(i32 %249, i1 false), !range !5\l  %251 = fmul float %248, 0x3FF921FB40000000\l  %252 = add nuw nsw i32 %250, %239\l  %253 = shl nuw nsw i32 %252, 23\l  %254 = sub nuw nsw i32 855638016, %253\l  %255 = sub nsw i32 31, %250\l  %256 = tail call i32 @llvm.fshr.i32(i32 %249, i32 %242, i32 %255)\l  %257 = lshr i32 %256, 9\l  %258 = or i32 %254, %257\l  %259 = or i32 %258, %235\l  %260 = bitcast i32 %259 to float\l  %261 = fneg float %251\l  %262 = tail call float @llvm.fma.f32(float %248, float 0x3FF921FB40000000,\l... float %261)\l  %263 = tail call float @llvm.fma.f32(float %248, float 0x3E74442D00000000,\l... float %262)\l  %264 = tail call float @llvm.fma.f32(float %260, float 0x3FF921FB40000000,\l... float %263)\l  %265 = fadd float %251, %264\l  %266 = lshr i32 %226, 30\l  %267 = add nuw nsw i32 %233, %266\l  br label %268\l}"];
	Node0x536f1f0 -> Node0x536f980;
	Node0x536f980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%268:\l268:                                              \l  %269 = phi i32 [ %161, %154 ], [ %163, %162 ]\l  %270 = phi float [ %159, %154 ], [ %265, %162 ]\l  %271 = phi i32 [ %160, %154 ], [ %267, %162 ]\l  %272 = fmul float %270, %270\l  %273 = tail call float @llvm.fmuladd.f32(float %272, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %274 = tail call float @llvm.fmuladd.f32(float %272, float %273, float\l... 0xBFC55553A0000000)\l  %275 = fmul float %272, %274\l  %276 = tail call float @llvm.fmuladd.f32(float %270, float %275, float %270)\l  %277 = tail call float @llvm.fmuladd.f32(float %272, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %278 = tail call float @llvm.fmuladd.f32(float %272, float %277, float\l... 0x3FA5557EE0000000)\l  %279 = tail call float @llvm.fmuladd.f32(float %272, float %278, float\l... 0xBFE0000080000000)\l  %280 = tail call float @llvm.fmuladd.f32(float %272, float %279, float\l... 1.000000e+00)\l  %281 = and i32 %271, 1\l  %282 = icmp eq i32 %281, 0\l  %283 = select i1 %282, float %276, float %280\l  %284 = bitcast float %283 to i32\l  %285 = shl i32 %271, 30\l  %286 = and i32 %285, -2147483648\l  %287 = xor i32 %269, %286\l  %288 = xor i32 %287, %284\l  %289 = xor i32 %288, %147\l  %290 = bitcast i32 %289 to float\l  %291 = fmul contract float %153, %290\l  br i1 %13, label %292, label %300\l|{<s0>T|<s1>F}}"];
	Node0x536f980:s0 -> Node0x53759b0;
	Node0x536f980:s1 -> Node0x5375a00;
	Node0x53759b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%292:\l292:                                              \l  %293 = fmul float %12, 0x3FE45F3060000000\l  %294 = tail call float @llvm.rint.f32(float %293)\l  %295 = tail call float @llvm.fma.f32(float %294, float 0xBFF921FB40000000,\l... float %12)\l  %296 = tail call float @llvm.fma.f32(float %294, float 0xBE74442D00000000,\l... float %295)\l  %297 = tail call float @llvm.fma.f32(float %294, float 0xBCF8469880000000,\l... float %296)\l  %298 = fptosi float %294 to i32\l  %299 = bitcast float %12 to i32\l  br label %406\l}"];
	Node0x53759b0 -> Node0x53760f0;
	Node0x5375a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%300:\l300:                                              \l  %301 = bitcast float %12 to i32\l  %302 = lshr i32 %301, 23\l  %303 = and i32 %301, 8388607\l  %304 = or i32 %303, 8388608\l  %305 = zext i32 %304 to i64\l  %306 = mul nuw nsw i64 %305, 4266746795\l  %307 = trunc i64 %306 to i32\l  %308 = lshr i64 %306, 32\l  %309 = mul nuw nsw i64 %305, 1011060801\l  %310 = add nuw nsw i64 %308, %309\l  %311 = trunc i64 %310 to i32\l  %312 = lshr i64 %310, 32\l  %313 = mul nuw nsw i64 %305, 3680671129\l  %314 = add nuw nsw i64 %312, %313\l  %315 = trunc i64 %314 to i32\l  %316 = lshr i64 %314, 32\l  %317 = mul nuw nsw i64 %305, 4113882560\l  %318 = add nuw nsw i64 %316, %317\l  %319 = trunc i64 %318 to i32\l  %320 = lshr i64 %318, 32\l  %321 = mul nuw nsw i64 %305, 4230436817\l  %322 = add nuw nsw i64 %320, %321\l  %323 = trunc i64 %322 to i32\l  %324 = lshr i64 %322, 32\l  %325 = mul nuw nsw i64 %305, 1313084713\l  %326 = add nuw nsw i64 %324, %325\l  %327 = trunc i64 %326 to i32\l  %328 = lshr i64 %326, 32\l  %329 = mul nuw nsw i64 %305, 2734261102\l  %330 = add nuw nsw i64 %328, %329\l  %331 = trunc i64 %330 to i32\l  %332 = lshr i64 %330, 32\l  %333 = trunc i64 %332 to i32\l  %334 = add nsw i32 %302, -120\l  %335 = icmp ugt i32 %334, 63\l  %336 = select i1 %335, i32 %327, i32 %333\l  %337 = select i1 %335, i32 %323, i32 %331\l  %338 = select i1 %335, i32 %319, i32 %327\l  %339 = select i1 %335, i32 %315, i32 %323\l  %340 = select i1 %335, i32 %311, i32 %319\l  %341 = select i1 %335, i32 %307, i32 %315\l  %342 = select i1 %335, i32 -64, i32 0\l  %343 = add nsw i32 %342, %334\l  %344 = icmp ugt i32 %343, 31\l  %345 = select i1 %344, i32 %337, i32 %336\l  %346 = select i1 %344, i32 %338, i32 %337\l  %347 = select i1 %344, i32 %339, i32 %338\l  %348 = select i1 %344, i32 %340, i32 %339\l  %349 = select i1 %344, i32 %341, i32 %340\l  %350 = select i1 %344, i32 -32, i32 0\l  %351 = add nsw i32 %350, %343\l  %352 = icmp ugt i32 %351, 31\l  %353 = select i1 %352, i32 %346, i32 %345\l  %354 = select i1 %352, i32 %347, i32 %346\l  %355 = select i1 %352, i32 %348, i32 %347\l  %356 = select i1 %352, i32 %349, i32 %348\l  %357 = select i1 %352, i32 -32, i32 0\l  %358 = add nsw i32 %357, %351\l  %359 = icmp eq i32 %358, 0\l  %360 = sub nsw i32 32, %358\l  %361 = tail call i32 @llvm.fshr.i32(i32 %353, i32 %354, i32 %360)\l  %362 = tail call i32 @llvm.fshr.i32(i32 %354, i32 %355, i32 %360)\l  %363 = tail call i32 @llvm.fshr.i32(i32 %355, i32 %356, i32 %360)\l  %364 = select i1 %359, i32 %353, i32 %361\l  %365 = select i1 %359, i32 %354, i32 %362\l  %366 = select i1 %359, i32 %355, i32 %363\l  %367 = lshr i32 %364, 29\l  %368 = tail call i32 @llvm.fshl.i32(i32 %364, i32 %365, i32 2)\l  %369 = tail call i32 @llvm.fshl.i32(i32 %365, i32 %366, i32 2)\l  %370 = tail call i32 @llvm.fshl.i32(i32 %366, i32 %356, i32 2)\l  %371 = and i32 %367, 1\l  %372 = sub nsw i32 0, %371\l  %373 = shl i32 %367, 31\l  %374 = xor i32 %368, %372\l  %375 = xor i32 %369, %372\l  %376 = xor i32 %370, %372\l  %377 = tail call i32 @llvm.ctlz.i32(i32 %374, i1 false), !range !5\l  %378 = sub nsw i32 31, %377\l  %379 = tail call i32 @llvm.fshr.i32(i32 %374, i32 %375, i32 %378)\l  %380 = tail call i32 @llvm.fshr.i32(i32 %375, i32 %376, i32 %378)\l  %381 = shl nuw nsw i32 %377, 23\l  %382 = sub nuw nsw i32 1056964608, %381\l  %383 = lshr i32 %379, 9\l  %384 = or i32 %383, %382\l  %385 = or i32 %384, %373\l  %386 = bitcast i32 %385 to float\l  %387 = tail call i32 @llvm.fshl.i32(i32 %379, i32 %380, i32 23)\l  %388 = tail call i32 @llvm.ctlz.i32(i32 %387, i1 false), !range !5\l  %389 = fmul float %386, 0x3FF921FB40000000\l  %390 = add nuw nsw i32 %388, %377\l  %391 = shl nuw nsw i32 %390, 23\l  %392 = sub nuw nsw i32 855638016, %391\l  %393 = sub nsw i32 31, %388\l  %394 = tail call i32 @llvm.fshr.i32(i32 %387, i32 %380, i32 %393)\l  %395 = lshr i32 %394, 9\l  %396 = or i32 %392, %395\l  %397 = or i32 %396, %373\l  %398 = bitcast i32 %397 to float\l  %399 = fneg float %389\l  %400 = tail call float @llvm.fma.f32(float %386, float 0x3FF921FB40000000,\l... float %399)\l  %401 = tail call float @llvm.fma.f32(float %386, float 0x3E74442D00000000,\l... float %400)\l  %402 = tail call float @llvm.fma.f32(float %398, float 0x3FF921FB40000000,\l... float %401)\l  %403 = fadd float %389, %402\l  %404 = lshr i32 %364, 30\l  %405 = add nuw nsw i32 %371, %404\l  br label %406\l}"];
	Node0x5375a00 -> Node0x53760f0;
	Node0x53760f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%406:\l406:                                              \l  %407 = phi i32 [ %299, %292 ], [ %301, %300 ]\l  %408 = phi float [ %297, %292 ], [ %403, %300 ]\l  %409 = phi i32 [ %298, %292 ], [ %405, %300 ]\l  %410 = fmul float %408, %408\l  %411 = tail call float @llvm.fmuladd.f32(float %410, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %412 = tail call float @llvm.fmuladd.f32(float %410, float %411, float\l... 0xBFC55553A0000000)\l  %413 = fmul float %410, %412\l  %414 = tail call float @llvm.fmuladd.f32(float %408, float %413, float %408)\l  %415 = tail call float @llvm.fmuladd.f32(float %410, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %416 = tail call float @llvm.fmuladd.f32(float %410, float %415, float\l... 0x3FA5557EE0000000)\l  %417 = tail call float @llvm.fmuladd.f32(float %410, float %416, float\l... 0xBFE0000080000000)\l  %418 = tail call float @llvm.fmuladd.f32(float %410, float %417, float\l... 1.000000e+00)\l  %419 = and i32 %409, 1\l  %420 = icmp eq i32 %419, 0\l  %421 = select i1 %420, float %414, float %418\l  %422 = bitcast float %421 to i32\l  %423 = shl i32 %409, 30\l  %424 = and i32 %423, -2147483648\l  %425 = xor i32 %407, %424\l  %426 = xor i32 %425, %422\l  %427 = xor i32 %426, %147\l  %428 = bitcast i32 %427 to float\l  %429 = fmul contract float %291, %428\l  %430 = select contract i1 %152, float %429, float 0x7FF8000000000000\l  %431 = sext i32 %7 to i64\l  %432 = getelementptr inbounds float, float addrspace(1)* %1, i64 %431\l  store float %430, float addrspace(1)* %432, align 4, !tbaa !6\l  br i1 %13, label %433, label %440\l|{<s0>T|<s1>F}}"];
	Node0x53760f0:s0 -> Node0x537bc30;
	Node0x53760f0:s1 -> Node0x537bcc0;
	Node0x537bc30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%433:\l433:                                              \l  %434 = fmul float %12, 0x3FE45F3060000000\l  %435 = tail call float @llvm.rint.f32(float %434)\l  %436 = tail call float @llvm.fma.f32(float %435, float 0xBFF921FB40000000,\l... float %12)\l  %437 = tail call float @llvm.fma.f32(float %435, float 0xBE74442D00000000,\l... float %436)\l  %438 = tail call float @llvm.fma.f32(float %435, float 0xBCF8469880000000,\l... float %437)\l  %439 = fptosi float %435 to i32\l  br label %546\l}"];
	Node0x537bc30 -> Node0x537c380;
	Node0x537bcc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%440:\l440:                                              \l  %441 = bitcast float %12 to i32\l  %442 = lshr i32 %441, 23\l  %443 = and i32 %441, 8388607\l  %444 = or i32 %443, 8388608\l  %445 = zext i32 %444 to i64\l  %446 = mul nuw nsw i64 %445, 4266746795\l  %447 = trunc i64 %446 to i32\l  %448 = lshr i64 %446, 32\l  %449 = mul nuw nsw i64 %445, 1011060801\l  %450 = add nuw nsw i64 %448, %449\l  %451 = trunc i64 %450 to i32\l  %452 = lshr i64 %450, 32\l  %453 = mul nuw nsw i64 %445, 3680671129\l  %454 = add nuw nsw i64 %452, %453\l  %455 = trunc i64 %454 to i32\l  %456 = lshr i64 %454, 32\l  %457 = mul nuw nsw i64 %445, 4113882560\l  %458 = add nuw nsw i64 %456, %457\l  %459 = trunc i64 %458 to i32\l  %460 = lshr i64 %458, 32\l  %461 = mul nuw nsw i64 %445, 4230436817\l  %462 = add nuw nsw i64 %460, %461\l  %463 = trunc i64 %462 to i32\l  %464 = lshr i64 %462, 32\l  %465 = mul nuw nsw i64 %445, 1313084713\l  %466 = add nuw nsw i64 %464, %465\l  %467 = trunc i64 %466 to i32\l  %468 = lshr i64 %466, 32\l  %469 = mul nuw nsw i64 %445, 2734261102\l  %470 = add nuw nsw i64 %468, %469\l  %471 = trunc i64 %470 to i32\l  %472 = lshr i64 %470, 32\l  %473 = trunc i64 %472 to i32\l  %474 = add nsw i32 %442, -120\l  %475 = icmp ugt i32 %474, 63\l  %476 = select i1 %475, i32 %467, i32 %473\l  %477 = select i1 %475, i32 %463, i32 %471\l  %478 = select i1 %475, i32 %459, i32 %467\l  %479 = select i1 %475, i32 %455, i32 %463\l  %480 = select i1 %475, i32 %451, i32 %459\l  %481 = select i1 %475, i32 %447, i32 %455\l  %482 = select i1 %475, i32 -64, i32 0\l  %483 = add nsw i32 %482, %474\l  %484 = icmp ugt i32 %483, 31\l  %485 = select i1 %484, i32 %477, i32 %476\l  %486 = select i1 %484, i32 %478, i32 %477\l  %487 = select i1 %484, i32 %479, i32 %478\l  %488 = select i1 %484, i32 %480, i32 %479\l  %489 = select i1 %484, i32 %481, i32 %480\l  %490 = select i1 %484, i32 -32, i32 0\l  %491 = add nsw i32 %490, %483\l  %492 = icmp ugt i32 %491, 31\l  %493 = select i1 %492, i32 %486, i32 %485\l  %494 = select i1 %492, i32 %487, i32 %486\l  %495 = select i1 %492, i32 %488, i32 %487\l  %496 = select i1 %492, i32 %489, i32 %488\l  %497 = select i1 %492, i32 -32, i32 0\l  %498 = add nsw i32 %497, %491\l  %499 = icmp eq i32 %498, 0\l  %500 = sub nsw i32 32, %498\l  %501 = tail call i32 @llvm.fshr.i32(i32 %493, i32 %494, i32 %500)\l  %502 = tail call i32 @llvm.fshr.i32(i32 %494, i32 %495, i32 %500)\l  %503 = tail call i32 @llvm.fshr.i32(i32 %495, i32 %496, i32 %500)\l  %504 = select i1 %499, i32 %493, i32 %501\l  %505 = select i1 %499, i32 %494, i32 %502\l  %506 = select i1 %499, i32 %495, i32 %503\l  %507 = lshr i32 %504, 29\l  %508 = tail call i32 @llvm.fshl.i32(i32 %504, i32 %505, i32 2)\l  %509 = tail call i32 @llvm.fshl.i32(i32 %505, i32 %506, i32 2)\l  %510 = tail call i32 @llvm.fshl.i32(i32 %506, i32 %496, i32 2)\l  %511 = and i32 %507, 1\l  %512 = sub nsw i32 0, %511\l  %513 = shl i32 %507, 31\l  %514 = xor i32 %508, %512\l  %515 = xor i32 %509, %512\l  %516 = xor i32 %510, %512\l  %517 = tail call i32 @llvm.ctlz.i32(i32 %514, i1 false), !range !5\l  %518 = sub nsw i32 31, %517\l  %519 = tail call i32 @llvm.fshr.i32(i32 %514, i32 %515, i32 %518)\l  %520 = tail call i32 @llvm.fshr.i32(i32 %515, i32 %516, i32 %518)\l  %521 = shl nuw nsw i32 %517, 23\l  %522 = sub nuw nsw i32 1056964608, %521\l  %523 = lshr i32 %519, 9\l  %524 = or i32 %523, %522\l  %525 = or i32 %524, %513\l  %526 = bitcast i32 %525 to float\l  %527 = tail call i32 @llvm.fshl.i32(i32 %519, i32 %520, i32 23)\l  %528 = tail call i32 @llvm.ctlz.i32(i32 %527, i1 false), !range !5\l  %529 = fmul float %526, 0x3FF921FB40000000\l  %530 = add nuw nsw i32 %528, %517\l  %531 = shl nuw nsw i32 %530, 23\l  %532 = sub nuw nsw i32 855638016, %531\l  %533 = sub nsw i32 31, %528\l  %534 = tail call i32 @llvm.fshr.i32(i32 %527, i32 %520, i32 %533)\l  %535 = lshr i32 %534, 9\l  %536 = or i32 %532, %535\l  %537 = or i32 %536, %513\l  %538 = bitcast i32 %537 to float\l  %539 = fneg float %529\l  %540 = tail call float @llvm.fma.f32(float %526, float 0x3FF921FB40000000,\l... float %539)\l  %541 = tail call float @llvm.fma.f32(float %526, float 0x3E74442D00000000,\l... float %540)\l  %542 = tail call float @llvm.fma.f32(float %538, float 0x3FF921FB40000000,\l... float %541)\l  %543 = fadd float %529, %542\l  %544 = lshr i32 %504, 30\l  %545 = add nuw nsw i32 %511, %544\l  br label %546\l}"];
	Node0x537bcc0 -> Node0x537c380;
	Node0x537c380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%546:\l546:                                              \l  %547 = phi float [ %438, %433 ], [ %543, %440 ]\l  %548 = phi i32 [ %439, %433 ], [ %545, %440 ]\l  %549 = fmul float %547, %547\l  %550 = fmul contract float %11, 2.000000e+00\l  %551 = tail call float @llvm.fabs.f32(float %550)\l  %552 = fcmp olt float %551, 1.310720e+05\l  br i1 %552, label %553, label %560\l|{<s0>T|<s1>F}}"];
	Node0x537c380:s0 -> Node0x5381de0;
	Node0x537c380:s1 -> Node0x5381e30;
	Node0x5381de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%553:\l553:                                              \l  %554 = fmul float %551, 0x3FE45F3060000000\l  %555 = tail call float @llvm.rint.f32(float %554)\l  %556 = tail call float @llvm.fma.f32(float %555, float 0xBFF921FB40000000,\l... float %551)\l  %557 = tail call float @llvm.fma.f32(float %555, float 0xBE74442D00000000,\l... float %556)\l  %558 = tail call float @llvm.fma.f32(float %555, float 0xBCF8469880000000,\l... float %557)\l  %559 = fptosi float %555 to i32\l  br label %666\l}"];
	Node0x5381de0 -> Node0x53824f0;
	Node0x5381e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%560:\l560:                                              \l  %561 = bitcast float %551 to i32\l  %562 = lshr i32 %561, 23\l  %563 = and i32 %561, 8388607\l  %564 = or i32 %563, 8388608\l  %565 = zext i32 %564 to i64\l  %566 = mul nuw nsw i64 %565, 4266746795\l  %567 = trunc i64 %566 to i32\l  %568 = lshr i64 %566, 32\l  %569 = mul nuw nsw i64 %565, 1011060801\l  %570 = add nuw nsw i64 %568, %569\l  %571 = trunc i64 %570 to i32\l  %572 = lshr i64 %570, 32\l  %573 = mul nuw nsw i64 %565, 3680671129\l  %574 = add nuw nsw i64 %572, %573\l  %575 = trunc i64 %574 to i32\l  %576 = lshr i64 %574, 32\l  %577 = mul nuw nsw i64 %565, 4113882560\l  %578 = add nuw nsw i64 %576, %577\l  %579 = trunc i64 %578 to i32\l  %580 = lshr i64 %578, 32\l  %581 = mul nuw nsw i64 %565, 4230436817\l  %582 = add nuw nsw i64 %580, %581\l  %583 = trunc i64 %582 to i32\l  %584 = lshr i64 %582, 32\l  %585 = mul nuw nsw i64 %565, 1313084713\l  %586 = add nuw nsw i64 %584, %585\l  %587 = trunc i64 %586 to i32\l  %588 = lshr i64 %586, 32\l  %589 = mul nuw nsw i64 %565, 2734261102\l  %590 = add nuw nsw i64 %588, %589\l  %591 = trunc i64 %590 to i32\l  %592 = lshr i64 %590, 32\l  %593 = trunc i64 %592 to i32\l  %594 = add nsw i32 %562, -120\l  %595 = icmp ugt i32 %594, 63\l  %596 = select i1 %595, i32 %587, i32 %593\l  %597 = select i1 %595, i32 %583, i32 %591\l  %598 = select i1 %595, i32 %579, i32 %587\l  %599 = select i1 %595, i32 %575, i32 %583\l  %600 = select i1 %595, i32 %571, i32 %579\l  %601 = select i1 %595, i32 %567, i32 %575\l  %602 = select i1 %595, i32 -64, i32 0\l  %603 = add nsw i32 %602, %594\l  %604 = icmp ugt i32 %603, 31\l  %605 = select i1 %604, i32 %597, i32 %596\l  %606 = select i1 %604, i32 %598, i32 %597\l  %607 = select i1 %604, i32 %599, i32 %598\l  %608 = select i1 %604, i32 %600, i32 %599\l  %609 = select i1 %604, i32 %601, i32 %600\l  %610 = select i1 %604, i32 -32, i32 0\l  %611 = add nsw i32 %610, %603\l  %612 = icmp ugt i32 %611, 31\l  %613 = select i1 %612, i32 %606, i32 %605\l  %614 = select i1 %612, i32 %607, i32 %606\l  %615 = select i1 %612, i32 %608, i32 %607\l  %616 = select i1 %612, i32 %609, i32 %608\l  %617 = select i1 %612, i32 -32, i32 0\l  %618 = add nsw i32 %617, %611\l  %619 = icmp eq i32 %618, 0\l  %620 = sub nsw i32 32, %618\l  %621 = tail call i32 @llvm.fshr.i32(i32 %613, i32 %614, i32 %620)\l  %622 = tail call i32 @llvm.fshr.i32(i32 %614, i32 %615, i32 %620)\l  %623 = tail call i32 @llvm.fshr.i32(i32 %615, i32 %616, i32 %620)\l  %624 = select i1 %619, i32 %613, i32 %621\l  %625 = select i1 %619, i32 %614, i32 %622\l  %626 = select i1 %619, i32 %615, i32 %623\l  %627 = lshr i32 %624, 29\l  %628 = tail call i32 @llvm.fshl.i32(i32 %624, i32 %625, i32 2)\l  %629 = tail call i32 @llvm.fshl.i32(i32 %625, i32 %626, i32 2)\l  %630 = tail call i32 @llvm.fshl.i32(i32 %626, i32 %616, i32 2)\l  %631 = and i32 %627, 1\l  %632 = sub nsw i32 0, %631\l  %633 = shl i32 %627, 31\l  %634 = xor i32 %628, %632\l  %635 = xor i32 %629, %632\l  %636 = xor i32 %630, %632\l  %637 = tail call i32 @llvm.ctlz.i32(i32 %634, i1 false), !range !5\l  %638 = sub nsw i32 31, %637\l  %639 = tail call i32 @llvm.fshr.i32(i32 %634, i32 %635, i32 %638)\l  %640 = tail call i32 @llvm.fshr.i32(i32 %635, i32 %636, i32 %638)\l  %641 = shl nuw nsw i32 %637, 23\l  %642 = sub nuw nsw i32 1056964608, %641\l  %643 = lshr i32 %639, 9\l  %644 = or i32 %643, %642\l  %645 = or i32 %644, %633\l  %646 = bitcast i32 %645 to float\l  %647 = tail call i32 @llvm.fshl.i32(i32 %639, i32 %640, i32 23)\l  %648 = tail call i32 @llvm.ctlz.i32(i32 %647, i1 false), !range !5\l  %649 = fmul float %646, 0x3FF921FB40000000\l  %650 = add nuw nsw i32 %648, %637\l  %651 = shl nuw nsw i32 %650, 23\l  %652 = sub nuw nsw i32 855638016, %651\l  %653 = sub nsw i32 31, %648\l  %654 = tail call i32 @llvm.fshr.i32(i32 %647, i32 %640, i32 %653)\l  %655 = lshr i32 %654, 9\l  %656 = or i32 %652, %655\l  %657 = or i32 %656, %633\l  %658 = bitcast i32 %657 to float\l  %659 = fneg float %649\l  %660 = tail call float @llvm.fma.f32(float %646, float 0x3FF921FB40000000,\l... float %659)\l  %661 = tail call float @llvm.fma.f32(float %646, float 0x3E74442D00000000,\l... float %660)\l  %662 = tail call float @llvm.fma.f32(float %658, float 0x3FF921FB40000000,\l... float %661)\l  %663 = fadd float %649, %662\l  %664 = lshr i32 %624, 30\l  %665 = add nuw nsw i32 %631, %664\l  br label %666\l}"];
	Node0x5381e30 -> Node0x53824f0;
	Node0x53824f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%666:\l666:                                              \l  %667 = phi float [ %558, %553 ], [ %663, %560 ]\l  %668 = phi i32 [ %559, %553 ], [ %665, %560 ]\l  %669 = fmul float %667, %667\l  %670 = fmul contract float %11, 3.000000e+00\l  %671 = tail call float @llvm.fabs.f32(float %670)\l  %672 = fcmp olt float %671, 1.310720e+05\l  br i1 %672, label %673, label %680\l|{<s0>T|<s1>F}}"];
	Node0x53824f0:s0 -> Node0x5386f50;
	Node0x53824f0:s1 -> Node0x5386fa0;
	Node0x5386f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%673:\l673:                                              \l  %674 = fmul float %671, 0x3FE45F3060000000\l  %675 = tail call float @llvm.rint.f32(float %674)\l  %676 = tail call float @llvm.fma.f32(float %675, float 0xBFF921FB40000000,\l... float %671)\l  %677 = tail call float @llvm.fma.f32(float %675, float 0xBE74442D00000000,\l... float %676)\l  %678 = tail call float @llvm.fma.f32(float %675, float 0xBCF8469880000000,\l... float %677)\l  %679 = fptosi float %675 to i32\l  br label %786\l}"];
	Node0x5386f50 -> Node0x5387660;
	Node0x5386fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%680:\l680:                                              \l  %681 = bitcast float %671 to i32\l  %682 = lshr i32 %681, 23\l  %683 = and i32 %681, 8388607\l  %684 = or i32 %683, 8388608\l  %685 = zext i32 %684 to i64\l  %686 = mul nuw nsw i64 %685, 4266746795\l  %687 = trunc i64 %686 to i32\l  %688 = lshr i64 %686, 32\l  %689 = mul nuw nsw i64 %685, 1011060801\l  %690 = add nuw nsw i64 %688, %689\l  %691 = trunc i64 %690 to i32\l  %692 = lshr i64 %690, 32\l  %693 = mul nuw nsw i64 %685, 3680671129\l  %694 = add nuw nsw i64 %692, %693\l  %695 = trunc i64 %694 to i32\l  %696 = lshr i64 %694, 32\l  %697 = mul nuw nsw i64 %685, 4113882560\l  %698 = add nuw nsw i64 %696, %697\l  %699 = trunc i64 %698 to i32\l  %700 = lshr i64 %698, 32\l  %701 = mul nuw nsw i64 %685, 4230436817\l  %702 = add nuw nsw i64 %700, %701\l  %703 = trunc i64 %702 to i32\l  %704 = lshr i64 %702, 32\l  %705 = mul nuw nsw i64 %685, 1313084713\l  %706 = add nuw nsw i64 %704, %705\l  %707 = trunc i64 %706 to i32\l  %708 = lshr i64 %706, 32\l  %709 = mul nuw nsw i64 %685, 2734261102\l  %710 = add nuw nsw i64 %708, %709\l  %711 = trunc i64 %710 to i32\l  %712 = lshr i64 %710, 32\l  %713 = trunc i64 %712 to i32\l  %714 = add nsw i32 %682, -120\l  %715 = icmp ugt i32 %714, 63\l  %716 = select i1 %715, i32 %707, i32 %713\l  %717 = select i1 %715, i32 %703, i32 %711\l  %718 = select i1 %715, i32 %699, i32 %707\l  %719 = select i1 %715, i32 %695, i32 %703\l  %720 = select i1 %715, i32 %691, i32 %699\l  %721 = select i1 %715, i32 %687, i32 %695\l  %722 = select i1 %715, i32 -64, i32 0\l  %723 = add nsw i32 %722, %714\l  %724 = icmp ugt i32 %723, 31\l  %725 = select i1 %724, i32 %717, i32 %716\l  %726 = select i1 %724, i32 %718, i32 %717\l  %727 = select i1 %724, i32 %719, i32 %718\l  %728 = select i1 %724, i32 %720, i32 %719\l  %729 = select i1 %724, i32 %721, i32 %720\l  %730 = select i1 %724, i32 -32, i32 0\l  %731 = add nsw i32 %730, %723\l  %732 = icmp ugt i32 %731, 31\l  %733 = select i1 %732, i32 %726, i32 %725\l  %734 = select i1 %732, i32 %727, i32 %726\l  %735 = select i1 %732, i32 %728, i32 %727\l  %736 = select i1 %732, i32 %729, i32 %728\l  %737 = select i1 %732, i32 -32, i32 0\l  %738 = add nsw i32 %737, %731\l  %739 = icmp eq i32 %738, 0\l  %740 = sub nsw i32 32, %738\l  %741 = tail call i32 @llvm.fshr.i32(i32 %733, i32 %734, i32 %740)\l  %742 = tail call i32 @llvm.fshr.i32(i32 %734, i32 %735, i32 %740)\l  %743 = tail call i32 @llvm.fshr.i32(i32 %735, i32 %736, i32 %740)\l  %744 = select i1 %739, i32 %733, i32 %741\l  %745 = select i1 %739, i32 %734, i32 %742\l  %746 = select i1 %739, i32 %735, i32 %743\l  %747 = lshr i32 %744, 29\l  %748 = tail call i32 @llvm.fshl.i32(i32 %744, i32 %745, i32 2)\l  %749 = tail call i32 @llvm.fshl.i32(i32 %745, i32 %746, i32 2)\l  %750 = tail call i32 @llvm.fshl.i32(i32 %746, i32 %736, i32 2)\l  %751 = and i32 %747, 1\l  %752 = sub nsw i32 0, %751\l  %753 = shl i32 %747, 31\l  %754 = xor i32 %748, %752\l  %755 = xor i32 %749, %752\l  %756 = xor i32 %750, %752\l  %757 = tail call i32 @llvm.ctlz.i32(i32 %754, i1 false), !range !5\l  %758 = sub nsw i32 31, %757\l  %759 = tail call i32 @llvm.fshr.i32(i32 %754, i32 %755, i32 %758)\l  %760 = tail call i32 @llvm.fshr.i32(i32 %755, i32 %756, i32 %758)\l  %761 = shl nuw nsw i32 %757, 23\l  %762 = sub nuw nsw i32 1056964608, %761\l  %763 = lshr i32 %759, 9\l  %764 = or i32 %763, %762\l  %765 = or i32 %764, %753\l  %766 = bitcast i32 %765 to float\l  %767 = tail call i32 @llvm.fshl.i32(i32 %759, i32 %760, i32 23)\l  %768 = tail call i32 @llvm.ctlz.i32(i32 %767, i1 false), !range !5\l  %769 = fmul float %766, 0x3FF921FB40000000\l  %770 = add nuw nsw i32 %768, %757\l  %771 = shl nuw nsw i32 %770, 23\l  %772 = sub nuw nsw i32 855638016, %771\l  %773 = sub nsw i32 31, %768\l  %774 = tail call i32 @llvm.fshr.i32(i32 %767, i32 %760, i32 %773)\l  %775 = lshr i32 %774, 9\l  %776 = or i32 %772, %775\l  %777 = or i32 %776, %753\l  %778 = bitcast i32 %777 to float\l  %779 = fneg float %769\l  %780 = tail call float @llvm.fma.f32(float %766, float 0x3FF921FB40000000,\l... float %779)\l  %781 = tail call float @llvm.fma.f32(float %766, float 0x3E74442D00000000,\l... float %780)\l  %782 = tail call float @llvm.fma.f32(float %778, float 0x3FF921FB40000000,\l... float %781)\l  %783 = fadd float %769, %782\l  %784 = lshr i32 %744, 30\l  %785 = add nuw nsw i32 %751, %784\l  br label %786\l}"];
	Node0x5386fa0 -> Node0x5387660;
	Node0x5387660 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%786:\l786:                                              \l  %787 = phi float [ %678, %673 ], [ %783, %680 ]\l  %788 = phi i32 [ %679, %673 ], [ %785, %680 ]\l  %789 = fmul float %787, %787\l  %790 = fmul contract float %11, 4.000000e+00\l  %791 = tail call float @llvm.fabs.f32(float %790)\l  %792 = fcmp olt float %791, 1.310720e+05\l  br i1 %792, label %793, label %800\l|{<s0>T|<s1>F}}"];
	Node0x5387660:s0 -> Node0x538c0c0;
	Node0x5387660:s1 -> Node0x538c110;
	Node0x538c0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%793:\l793:                                              \l  %794 = fmul float %791, 0x3FE45F3060000000\l  %795 = tail call float @llvm.rint.f32(float %794)\l  %796 = tail call float @llvm.fma.f32(float %795, float 0xBFF921FB40000000,\l... float %791)\l  %797 = tail call float @llvm.fma.f32(float %795, float 0xBE74442D00000000,\l... float %796)\l  %798 = tail call float @llvm.fma.f32(float %795, float 0xBCF8469880000000,\l... float %797)\l  %799 = fptosi float %795 to i32\l  br label %906\l}"];
	Node0x538c0c0 -> Node0x538c7d0;
	Node0x538c110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%800:\l800:                                              \l  %801 = bitcast float %791 to i32\l  %802 = lshr i32 %801, 23\l  %803 = and i32 %801, 8388607\l  %804 = or i32 %803, 8388608\l  %805 = zext i32 %804 to i64\l  %806 = mul nuw nsw i64 %805, 4266746795\l  %807 = trunc i64 %806 to i32\l  %808 = lshr i64 %806, 32\l  %809 = mul nuw nsw i64 %805, 1011060801\l  %810 = add nuw nsw i64 %808, %809\l  %811 = trunc i64 %810 to i32\l  %812 = lshr i64 %810, 32\l  %813 = mul nuw nsw i64 %805, 3680671129\l  %814 = add nuw nsw i64 %812, %813\l  %815 = trunc i64 %814 to i32\l  %816 = lshr i64 %814, 32\l  %817 = mul nuw nsw i64 %805, 4113882560\l  %818 = add nuw nsw i64 %816, %817\l  %819 = trunc i64 %818 to i32\l  %820 = lshr i64 %818, 32\l  %821 = mul nuw nsw i64 %805, 4230436817\l  %822 = add nuw nsw i64 %820, %821\l  %823 = trunc i64 %822 to i32\l  %824 = lshr i64 %822, 32\l  %825 = mul nuw nsw i64 %805, 1313084713\l  %826 = add nuw nsw i64 %824, %825\l  %827 = trunc i64 %826 to i32\l  %828 = lshr i64 %826, 32\l  %829 = mul nuw nsw i64 %805, 2734261102\l  %830 = add nuw nsw i64 %828, %829\l  %831 = trunc i64 %830 to i32\l  %832 = lshr i64 %830, 32\l  %833 = trunc i64 %832 to i32\l  %834 = add nsw i32 %802, -120\l  %835 = icmp ugt i32 %834, 63\l  %836 = select i1 %835, i32 %827, i32 %833\l  %837 = select i1 %835, i32 %823, i32 %831\l  %838 = select i1 %835, i32 %819, i32 %827\l  %839 = select i1 %835, i32 %815, i32 %823\l  %840 = select i1 %835, i32 %811, i32 %819\l  %841 = select i1 %835, i32 %807, i32 %815\l  %842 = select i1 %835, i32 -64, i32 0\l  %843 = add nsw i32 %842, %834\l  %844 = icmp ugt i32 %843, 31\l  %845 = select i1 %844, i32 %837, i32 %836\l  %846 = select i1 %844, i32 %838, i32 %837\l  %847 = select i1 %844, i32 %839, i32 %838\l  %848 = select i1 %844, i32 %840, i32 %839\l  %849 = select i1 %844, i32 %841, i32 %840\l  %850 = select i1 %844, i32 -32, i32 0\l  %851 = add nsw i32 %850, %843\l  %852 = icmp ugt i32 %851, 31\l  %853 = select i1 %852, i32 %846, i32 %845\l  %854 = select i1 %852, i32 %847, i32 %846\l  %855 = select i1 %852, i32 %848, i32 %847\l  %856 = select i1 %852, i32 %849, i32 %848\l  %857 = select i1 %852, i32 -32, i32 0\l  %858 = add nsw i32 %857, %851\l  %859 = icmp eq i32 %858, 0\l  %860 = sub nsw i32 32, %858\l  %861 = tail call i32 @llvm.fshr.i32(i32 %853, i32 %854, i32 %860)\l  %862 = tail call i32 @llvm.fshr.i32(i32 %854, i32 %855, i32 %860)\l  %863 = tail call i32 @llvm.fshr.i32(i32 %855, i32 %856, i32 %860)\l  %864 = select i1 %859, i32 %853, i32 %861\l  %865 = select i1 %859, i32 %854, i32 %862\l  %866 = select i1 %859, i32 %855, i32 %863\l  %867 = lshr i32 %864, 29\l  %868 = tail call i32 @llvm.fshl.i32(i32 %864, i32 %865, i32 2)\l  %869 = tail call i32 @llvm.fshl.i32(i32 %865, i32 %866, i32 2)\l  %870 = tail call i32 @llvm.fshl.i32(i32 %866, i32 %856, i32 2)\l  %871 = and i32 %867, 1\l  %872 = sub nsw i32 0, %871\l  %873 = shl i32 %867, 31\l  %874 = xor i32 %868, %872\l  %875 = xor i32 %869, %872\l  %876 = xor i32 %870, %872\l  %877 = tail call i32 @llvm.ctlz.i32(i32 %874, i1 false), !range !5\l  %878 = sub nsw i32 31, %877\l  %879 = tail call i32 @llvm.fshr.i32(i32 %874, i32 %875, i32 %878)\l  %880 = tail call i32 @llvm.fshr.i32(i32 %875, i32 %876, i32 %878)\l  %881 = shl nuw nsw i32 %877, 23\l  %882 = sub nuw nsw i32 1056964608, %881\l  %883 = lshr i32 %879, 9\l  %884 = or i32 %883, %882\l  %885 = or i32 %884, %873\l  %886 = bitcast i32 %885 to float\l  %887 = tail call i32 @llvm.fshl.i32(i32 %879, i32 %880, i32 23)\l  %888 = tail call i32 @llvm.ctlz.i32(i32 %887, i1 false), !range !5\l  %889 = fmul float %886, 0x3FF921FB40000000\l  %890 = add nuw nsw i32 %888, %877\l  %891 = shl nuw nsw i32 %890, 23\l  %892 = sub nuw nsw i32 855638016, %891\l  %893 = sub nsw i32 31, %888\l  %894 = tail call i32 @llvm.fshr.i32(i32 %887, i32 %880, i32 %893)\l  %895 = lshr i32 %894, 9\l  %896 = or i32 %892, %895\l  %897 = or i32 %896, %873\l  %898 = bitcast i32 %897 to float\l  %899 = fneg float %889\l  %900 = tail call float @llvm.fma.f32(float %886, float 0x3FF921FB40000000,\l... float %899)\l  %901 = tail call float @llvm.fma.f32(float %886, float 0x3E74442D00000000,\l... float %900)\l  %902 = tail call float @llvm.fma.f32(float %898, float 0x3FF921FB40000000,\l... float %901)\l  %903 = fadd float %889, %902\l  %904 = lshr i32 %864, 30\l  %905 = add nuw nsw i32 %871, %904\l  br label %906\l}"];
	Node0x538c110 -> Node0x538c7d0;
	Node0x538c7d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%906:\l906:                                              \l  %907 = phi float [ %798, %793 ], [ %903, %800 ]\l  %908 = phi i32 [ %799, %793 ], [ %905, %800 ]\l  %909 = shl i32 %548, 30\l  %910 = and i32 %909, -2147483648\l  %911 = and i32 %548, 1\l  %912 = icmp eq i32 %911, 0\l  %913 = tail call float @llvm.fmuladd.f32(float %549, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %914 = tail call float @llvm.fmuladd.f32(float %549, float %913, float\l... 0x3FA5557EE0000000)\l  %915 = tail call float @llvm.fmuladd.f32(float %549, float %914, float\l... 0xBFE0000080000000)\l  %916 = tail call float @llvm.fmuladd.f32(float %549, float %915, float\l... 1.000000e+00)\l  %917 = tail call float @llvm.fmuladd.f32(float %549, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %918 = tail call float @llvm.fmuladd.f32(float %549, float %917, float\l... 0xBFC55553A0000000)\l  %919 = fmul float %549, %918\l  %920 = tail call float @llvm.fmuladd.f32(float %547, float %919, float %547)\l  %921 = fneg float %920\l  %922 = select i1 %912, float %916, float %921\l  %923 = bitcast float %922 to i32\l  %924 = xor i32 %910, %923\l  %925 = bitcast i32 %924 to float\l  %926 = fmul contract float %925, 1.300000e+01\l  %927 = select i1 %152, float %926, float 0x7FF8000000000000\l  %928 = tail call i1 @llvm.amdgcn.class.f32(float %551, i32 504)\l  %929 = shl i32 %668, 30\l  %930 = and i32 %929, -2147483648\l  %931 = and i32 %668, 1\l  %932 = icmp eq i32 %931, 0\l  %933 = tail call float @llvm.fmuladd.f32(float %669, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %934 = tail call float @llvm.fmuladd.f32(float %669, float %933, float\l... 0x3FA5557EE0000000)\l  %935 = tail call float @llvm.fmuladd.f32(float %669, float %934, float\l... 0xBFE0000080000000)\l  %936 = tail call float @llvm.fmuladd.f32(float %669, float %935, float\l... 1.000000e+00)\l  %937 = tail call float @llvm.fmuladd.f32(float %669, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %938 = tail call float @llvm.fmuladd.f32(float %669, float %937, float\l... 0xBFC55553A0000000)\l  %939 = fmul float %669, %938\l  %940 = tail call float @llvm.fmuladd.f32(float %667, float %939, float %667)\l  %941 = fneg float %940\l  %942 = select i1 %932, float %936, float %941\l  %943 = bitcast float %942 to i32\l  %944 = xor i32 %930, %943\l  %945 = bitcast i32 %944 to float\l  %946 = fmul contract float %945, 5.000000e+00\l  %947 = select i1 %928, float %946, float 0x7FF8000000000000\l  %948 = fsub contract float %927, %947\l  %949 = tail call i1 @llvm.amdgcn.class.f32(float %671, i32 504)\l  %950 = shl i32 %788, 30\l  %951 = and i32 %950, -2147483648\l  %952 = and i32 %788, 1\l  %953 = icmp eq i32 %952, 0\l  %954 = tail call float @llvm.fmuladd.f32(float %789, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %955 = tail call float @llvm.fmuladd.f32(float %789, float %954, float\l... 0x3FA5557EE0000000)\l  %956 = tail call float @llvm.fmuladd.f32(float %789, float %955, float\l... 0xBFE0000080000000)\l  %957 = tail call float @llvm.fmuladd.f32(float %789, float %956, float\l... 1.000000e+00)\l  %958 = tail call float @llvm.fmuladd.f32(float %789, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %959 = tail call float @llvm.fmuladd.f32(float %789, float %958, float\l... 0xBFC55553A0000000)\l  %960 = fmul float %789, %959\l  %961 = tail call float @llvm.fmuladd.f32(float %787, float %960, float %787)\l  %962 = fneg float %961\l  %963 = select i1 %953, float %957, float %962\l  %964 = bitcast float %963 to i32\l  %965 = xor i32 %951, %964\l  %966 = bitcast i32 %965 to float\l  %967 = fmul contract float %966, 2.000000e+00\l  %968 = select i1 %949, float %967, float 0x7FF8000000000000\l  %969 = fsub contract float %948, %968\l  %970 = fmul float %907, %907\l  %971 = tail call float @llvm.fmuladd.f32(float %970, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %972 = tail call float @llvm.fmuladd.f32(float %970, float %971, float\l... 0xBFC55553A0000000)\l  %973 = fmul float %970, %972\l  %974 = tail call float @llvm.fmuladd.f32(float %907, float %973, float %907)\l  %975 = tail call float @llvm.fmuladd.f32(float %970, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %976 = tail call float @llvm.fmuladd.f32(float %970, float %975, float\l... 0x3FA5557EE0000000)\l  %977 = tail call float @llvm.fmuladd.f32(float %970, float %976, float\l... 0xBFE0000080000000)\l  %978 = tail call float @llvm.fmuladd.f32(float %970, float %977, float\l... 1.000000e+00)\l  %979 = fneg float %974\l  %980 = and i32 %908, 1\l  %981 = icmp eq i32 %980, 0\l  %982 = select i1 %981, float %978, float %979\l  %983 = bitcast float %982 to i32\l  %984 = shl i32 %908, 30\l  %985 = and i32 %984, -2147483648\l  %986 = xor i32 %985, %983\l  %987 = bitcast i32 %986 to float\l  %988 = tail call i1 @llvm.amdgcn.class.f32(float %791, i32 504)\l  %989 = select i1 %988, float %987, float 0x7FF8000000000000\l  %990 = fsub contract float %969, %989\l  %991 = fmul contract float %990, -5.000000e-01\l  %992 = getelementptr inbounds float, float addrspace(1)* %2, i64 %431\l  store float %991, float addrspace(1)* %992, align 4, !tbaa !6\l  ret void\l}"];
}
