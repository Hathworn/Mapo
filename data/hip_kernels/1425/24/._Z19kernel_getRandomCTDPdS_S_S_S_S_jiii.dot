digraph "CFG for '_Z19kernel_getRandomCTDPdS_S_S_S_S_jiii' function" {
	label="CFG for '_Z19kernel_getRandomCTDPdS_S_S_S_S_jiii' function";

	Node0x504cb30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%10:\l  %11 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %13, %18\l  %20 = add i32 %19, %12\l  %21 = sext i32 %20 to i64\l  %22 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %22) #4\l  %23 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 0\l  %24 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 1\l  %25 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 2\l  %26 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 3\l  %27 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 4\l  %28 = xor i32 %6, 746559103\l  %29 = mul i32 %28, 1228688033\l  %30 = add i32 %29, 123456789\l  store i32 %30, i32 addrspace(5)* %23, align 8, !tbaa !7\l  %31 = xor i32 %29, 362436069\l  store i32 %31, i32 addrspace(5)* %24, align 4, !tbaa !7\l  store i32 -1452303100, i32 addrspace(5)* %25, align 8, !tbaa !7\l  store i32 -1894485380, i32 addrspace(5)* %26, align 4, !tbaa !7\l  %32 = add i32 %29, 5783321\l  store i32 %32, i32 addrspace(5)* %27, align 8, !tbaa !7\l  %33 = icmp eq i32 %20, 0\l  br i1 %33, label %219, label %34\l|{<s0>T|<s1>F}}"];
	Node0x504cb30:s0 -> Node0x50519e0;
	Node0x504cb30:s1 -> Node0x5053700;
	Node0x5053700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%34:\l34:                                               \l  %35 = phi i32 [ %47, %46 ], [ %32, %10 ]\l  %36 = phi i32 [ %48, %46 ], [ -1452303100, %10 ]\l  %37 = phi i32 [ %49, %46 ], [ %31, %10 ]\l  %38 = phi i32 [ %50, %46 ], [ %30, %10 ]\l  %39 = phi i64 [ %52, %46 ], [ %21, %10 ]\l  %40 = phi i32 [ %51, %46 ], [ 0, %10 ]\l  %41 = trunc i64 %39 to i32\l  %42 = and i32 %41, 3\l  %43 = icmp eq i32 %42, 0\l  br i1 %43, label %46, label %44\l|{<s0>T|<s1>F}}"];
	Node0x5053700:s0 -> Node0x5053840;
	Node0x5053700:s1 -> Node0x50540b0;
	Node0x50540b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%44:\l44:                                               \l  %45 = zext i32 %40 to i64\l  br label %54\l}"];
	Node0x50540b0 -> Node0x5054260;
	Node0x5053840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%46:\l46:                                               \l  %47 = phi i32 [ %35, %34 ], [ %213, %216 ]\l  %48 = phi i32 [ %36, %34 ], [ %201, %216 ]\l  %49 = phi i32 [ %37, %34 ], [ %195, %216 ]\l  %50 = phi i32 [ %38, %34 ], [ %189, %216 ]\l  %51 = add nuw nsw i32 %40, 1\l  %52 = lshr i64 %39, 2\l  %53 = icmp ult i64 %39, 4\l  br i1 %53, label %219, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5053840:s0 -> Node0x50519e0;
	Node0x5053840:s1 -> Node0x5053700;
	Node0x5054260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%54:\l54:                                               \l  %55 = phi i32 [ 0, %44 ], [ %217, %216 ]\l  br label %56\l}"];
	Node0x5054260 -> Node0x5054a30;
	Node0x5054a30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%56:\l56:                                               \l  %57 = phi i32 [ 0, %54 ], [ %189, %56 ]\l  %58 = phi i32 [ 0, %54 ], [ %195, %56 ]\l  %59 = phi i32 [ 0, %54 ], [ %201, %56 ]\l  %60 = phi i32 [ 0, %54 ], [ %207, %56 ]\l  %61 = phi i32 [ 0, %54 ], [ %213, %56 ]\l  %62 = phi i32 [ 0, %54 ], [ %214, %56 ]\l  %63 = lshr i32 %62, 5\l  %64 = and i32 %62, 28\l  %65 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 %63\l  %66 = load i32, i32 addrspace(5)* %65, align 4, !tbaa !7\l  %67 = shl nuw i32 1, %64\l  %68 = and i32 %67, %66\l  %69 = icmp eq i32 %68, 0\l  %70 = mul nuw nsw i32 %62, 5\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %71\l  %73 = load i32, i32 addrspace(4)* %72, align 16, !tbaa !7\l  %74 = select i1 %69, i32 0, i32 %73\l  %75 = xor i32 %74, %57\l  %76 = or i32 %70, 1\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %77\l  %79 = load i32, i32 addrspace(4)* %78, align 4, !tbaa !7\l  %80 = select i1 %69, i32 0, i32 %79\l  %81 = xor i32 %80, %58\l  %82 = or i32 %70, 2\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %83\l  %85 = load i32, i32 addrspace(4)* %84, align 8, !tbaa !7\l  %86 = select i1 %69, i32 0, i32 %85\l  %87 = xor i32 %86, %59\l  %88 = or i32 %70, 3\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %89\l  %91 = load i32, i32 addrspace(4)* %90, align 4, !tbaa !7\l  %92 = select i1 %69, i32 0, i32 %91\l  %93 = xor i32 %92, %60\l  %94 = add nuw nsw i32 %70, 4\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %95\l  %97 = load i32, i32 addrspace(4)* %96, align 16, !tbaa !7\l  %98 = select i1 %69, i32 0, i32 %97\l  %99 = xor i32 %98, %61\l  %100 = or i32 %62, 1\l  %101 = lshr i32 %62, 5\l  %102 = and i32 %100, 29\l  %103 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 %101\l  %104 = load i32, i32 addrspace(5)* %103, align 4, !tbaa !7\l  %105 = shl nuw i32 1, %102\l  %106 = and i32 %105, %104\l  %107 = icmp eq i32 %106, 0\l  %108 = mul nuw nsw i32 %100, 5\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %109\l  %111 = load i32, i32 addrspace(4)* %110, align 4, !tbaa !7\l  %112 = select i1 %107, i32 0, i32 %111\l  %113 = xor i32 %112, %75\l  %114 = add nuw nsw i32 %108, 1\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %115\l  %117 = load i32, i32 addrspace(4)* %116, align 8, !tbaa !7\l  %118 = select i1 %107, i32 0, i32 %117\l  %119 = xor i32 %118, %81\l  %120 = or i32 %108, 2\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %121\l  %123 = load i32, i32 addrspace(4)* %122, align 4, !tbaa !7\l  %124 = select i1 %107, i32 0, i32 %123\l  %125 = xor i32 %124, %87\l  %126 = add nuw nsw i32 %108, 3\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %127\l  %129 = load i32, i32 addrspace(4)* %128, align 16, !tbaa !7\l  %130 = select i1 %107, i32 0, i32 %129\l  %131 = xor i32 %130, %93\l  %132 = add nuw nsw i32 %108, 4\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %133\l  %135 = load i32, i32 addrspace(4)* %134, align 4, !tbaa !7\l  %136 = select i1 %107, i32 0, i32 %135\l  %137 = xor i32 %136, %99\l  %138 = or i32 %62, 2\l  %139 = lshr i32 %62, 5\l  %140 = and i32 %138, 30\l  %141 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 %139\l  %142 = load i32, i32 addrspace(5)* %141, align 4, !tbaa !7\l  %143 = shl nuw i32 1, %140\l  %144 = and i32 %143, %142\l  %145 = icmp eq i32 %144, 0\l  %146 = mul nuw nsw i32 %138, 5\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %147\l  %149 = load i32, i32 addrspace(4)* %148, align 8, !tbaa !7\l  %150 = select i1 %145, i32 0, i32 %149\l  %151 = xor i32 %150, %113\l  %152 = or i32 %146, 1\l  %153 = zext i32 %152 to i64\l  %154 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %153\l  %155 = load i32, i32 addrspace(4)* %154, align 4, !tbaa !7\l  %156 = select i1 %145, i32 0, i32 %155\l  %157 = xor i32 %156, %119\l  %158 = add nuw nsw i32 %146, 2\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %159\l  %161 = load i32, i32 addrspace(4)* %160, align 16, !tbaa !7\l  %162 = select i1 %145, i32 0, i32 %161\l  %163 = xor i32 %162, %125\l  %164 = add nuw nsw i32 %146, 3\l  %165 = zext i32 %164 to i64\l  %166 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %165\l  %167 = load i32, i32 addrspace(4)* %166, align 4, !tbaa !7\l  %168 = select i1 %145, i32 0, i32 %167\l  %169 = xor i32 %168, %131\l  %170 = add nuw nsw i32 %146, 4\l  %171 = zext i32 %170 to i64\l  %172 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %171\l  %173 = load i32, i32 addrspace(4)* %172, align 8, !tbaa !7\l  %174 = select i1 %145, i32 0, i32 %173\l  %175 = xor i32 %174, %137\l  %176 = or i32 %62, 3\l  %177 = lshr i32 %62, 5\l  %178 = and i32 %176, 31\l  %179 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %11, i32 0, i32 0, i32\l... 5, i32 %177\l  %180 = load i32, i32 addrspace(5)* %179, align 4, !tbaa !7\l  %181 = shl nuw i32 1, %178\l  %182 = and i32 %181, %180\l  %183 = icmp eq i32 %182, 0\l  %184 = mul nuw nsw i32 %176, 5\l  %185 = zext i32 %184 to i64\l  %186 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %185\l  %187 = load i32, i32 addrspace(4)* %186, align 4, !tbaa !7\l  %188 = select i1 %183, i32 0, i32 %187\l  %189 = xor i32 %188, %151\l  %190 = add nuw nsw i32 %184, 1\l  %191 = zext i32 %190 to i64\l  %192 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %191\l  %193 = load i32, i32 addrspace(4)* %192, align 16, !tbaa !7\l  %194 = select i1 %183, i32 0, i32 %193\l  %195 = xor i32 %194, %157\l  %196 = add nuw nsw i32 %184, 2\l  %197 = zext i32 %196 to i64\l  %198 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %197\l  %199 = load i32, i32 addrspace(4)* %198, align 4, !tbaa !7\l  %200 = select i1 %183, i32 0, i32 %199\l  %201 = xor i32 %200, %163\l  %202 = add nuw nsw i32 %184, 3\l  %203 = zext i32 %202 to i64\l  %204 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %203\l  %205 = load i32, i32 addrspace(4)* %204, align 8, !tbaa !7\l  %206 = select i1 %183, i32 0, i32 %205\l  %207 = xor i32 %206, %169\l  %208 = add nuw nsw i32 %184, 4\l  %209 = zext i32 %208 to i64\l  %210 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %45, i64 %209\l  %211 = load i32, i32 addrspace(4)* %210, align 4, !tbaa !7\l  %212 = select i1 %183, i32 0, i32 %211\l  %213 = xor i32 %212, %175\l  %214 = add nuw nsw i32 %62, 4\l  %215 = icmp eq i32 %214, 160\l  br i1 %215, label %216, label %56, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5054a30:s0 -> Node0x5054350;
	Node0x5054a30:s1 -> Node0x5054a30;
	Node0x5054350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%216:\l216:                                              \l  store i32 %189, i32 addrspace(5)* %23, align 8, !tbaa !7\l  store i32 %195, i32 addrspace(5)* %24, align 4, !tbaa !7\l  store i32 %201, i32 addrspace(5)* %25, align 8, !tbaa !7\l  store i32 %207, i32 addrspace(5)* %26, align 4, !tbaa !7\l  store i32 %213, i32 addrspace(5)* %27, align 8, !tbaa !7\l  %217 = add nuw nsw i32 %55, 1\l  %218 = icmp eq i32 %217, %42\l  br i1 %218, label %46, label %54, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5054350:s0 -> Node0x5053840;
	Node0x5054350:s1 -> Node0x5054260;
	Node0x50519e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%219:\l219:                                              \l  %220 = phi i32 [ %32, %10 ], [ %47, %46 ]\l  %221 = phi i32 [ -1452303100, %10 ], [ %48, %46 ]\l  %222 = phi i32 [ %31, %10 ], [ %49, %46 ]\l  %223 = phi i32 [ %30, %10 ], [ %50, %46 ]\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %22) #4\l  %224 = lshr i32 %223, 2\l  %225 = xor i32 %224, %223\l  %226 = shl i32 %220, 4\l  %227 = shl i32 %225, 1\l  %228 = xor i32 %227, %226\l  %229 = xor i32 %228, %225\l  %230 = xor i32 %229, %220\l  %231 = add i32 %29, -1966614051\l  %232 = add i32 %231, %230\l  %233 = uitofp i32 %232 to float\l  %234 = fmul contract float %233, 0x3DF0000000000000\l  %235 = fadd contract float %234, 0x3DF0000000000000\l  %236 = sub nsw i32 0, %8\l  %237 = sitofp i32 %236 to float\l  %238 = fmul contract float %235, %237\l  %239 = sitofp i32 %8 to float\l  %240 = fadd contract float %238, %239\l  %241 = tail call float @llvm.trunc.f32(float %240)\l  %242 = fptosi float %241 to i32\l  %243 = mul i32 %13, %8\l  %244 = add i32 %243, %242\l  %245 = shl i32 %244, 1\l  %246 = shl nsw i32 %20, 1\l  %247 = sext i32 %245 to i64\l  %248 = getelementptr inbounds double, double addrspace(1)* %0, i64 %247\l  %249 = load double, double addrspace(1)* %248, align 8, !tbaa !15\l  %250 = sext i32 %246 to i64\l  %251 = getelementptr inbounds double, double addrspace(1)* %1, i64 %250\l  store double %249, double addrspace(1)* %251, align 8, !tbaa !15\l  %252 = add nuw nsw i32 %245, 1\l  %253 = sext i32 %252 to i64\l  %254 = getelementptr inbounds double, double addrspace(1)* %0, i64 %253\l  %255 = load double, double addrspace(1)* %254, align 8, !tbaa !15\l  %256 = add nuw nsw i32 %246, 1\l  %257 = sext i32 %256 to i64\l  %258 = getelementptr inbounds double, double addrspace(1)* %1, i64 %257\l  store double %255, double addrspace(1)* %258, align 8, !tbaa !15\l  %259 = lshr i32 %222, 2\l  %260 = xor i32 %259, %222\l  %261 = shl i32 %230, 4\l  %262 = shl i32 %260, 1\l  %263 = xor i32 %262, %261\l  %264 = xor i32 %263, %260\l  %265 = xor i32 %264, %230\l  %266 = add i32 %29, -1966251614\l  %267 = add i32 %266, %265\l  %268 = uitofp i32 %267 to float\l  %269 = fmul contract float %268, 0x3DF0000000000000\l  %270 = fadd contract float %269, 0x3DF0000000000000\l  %271 = sub nsw i32 0, %7\l  %272 = sitofp i32 %271 to float\l  %273 = fmul contract float %270, %272\l  %274 = sitofp i32 %7 to float\l  %275 = fadd contract float %273, %274\l  %276 = tail call float @llvm.trunc.f32(float %275)\l  %277 = fptosi float %276 to i32\l  %278 = mul i32 %13, %7\l  %279 = add i32 %278, %277\l  %280 = shl i32 %279, 2\l  %281 = shl nsw i32 %20, 2\l  %282 = sext i32 %280 to i64\l  %283 = getelementptr inbounds double, double addrspace(1)* %4, i64 %282\l  %284 = load double, double addrspace(1)* %283, align 8, !tbaa !15\l  %285 = sext i32 %281 to i64\l  %286 = getelementptr inbounds double, double addrspace(1)* %5, i64 %285\l  store double %284, double addrspace(1)* %286, align 8, !tbaa !15\l  %287 = add nuw nsw i32 %280, 1\l  %288 = sext i32 %287 to i64\l  %289 = getelementptr inbounds double, double addrspace(1)* %4, i64 %288\l  %290 = load double, double addrspace(1)* %289, align 8, !tbaa !15\l  %291 = add nuw nsw i32 %281, 1\l  %292 = sext i32 %291 to i64\l  %293 = getelementptr inbounds double, double addrspace(1)* %5, i64 %292\l  store double %290, double addrspace(1)* %293, align 8, !tbaa !15\l  %294 = add nuw nsw i32 %280, 2\l  %295 = sext i32 %294 to i64\l  %296 = getelementptr inbounds double, double addrspace(1)* %4, i64 %295\l  %297 = load double, double addrspace(1)* %296, align 8, !tbaa !15\l  %298 = add nuw nsw i32 %281, 2\l  %299 = sext i32 %298 to i64\l  %300 = getelementptr inbounds double, double addrspace(1)* %5, i64 %299\l  store double %297, double addrspace(1)* %300, align 8, !tbaa !15\l  %301 = add nuw nsw i32 %280, 3\l  %302 = sext i32 %301 to i64\l  %303 = getelementptr inbounds double, double addrspace(1)* %4, i64 %302\l  %304 = load double, double addrspace(1)* %303, align 8, !tbaa !15\l  %305 = add nuw nsw i32 %281, 3\l  %306 = sext i32 %305 to i64\l  %307 = getelementptr inbounds double, double addrspace(1)* %5, i64 %306\l  store double %304, double addrspace(1)* %307, align 8, !tbaa !15\l  %308 = lshr i32 %221, 2\l  %309 = xor i32 %308, %221\l  %310 = shl i32 %265, 4\l  %311 = shl i32 %309, 1\l  %312 = xor i32 %311, %310\l  %313 = xor i32 %312, %309\l  %314 = xor i32 %313, %265\l  %315 = add i32 %29, -1965889177\l  %316 = add i32 %315, %314\l  %317 = uitofp i32 %316 to float\l  %318 = fmul contract float %317, 0x3DF0000000000000\l  %319 = fadd contract float %318, 0x3DF0000000000000\l  %320 = sub nsw i32 0, %9\l  %321 = sitofp i32 %320 to float\l  %322 = fmul contract float %319, %321\l  %323 = sitofp i32 %9 to float\l  %324 = fadd contract float %322, %323\l  %325 = mul i32 %13, %9\l  %326 = tail call float @llvm.trunc.f32(float %324)\l  %327 = fptosi float %326 to i32\l  %328 = add i32 %325, %327\l  %329 = zext i32 %328 to i64\l  %330 = getelementptr inbounds double, double addrspace(1)* %2, i64 %329\l  %331 = load double, double addrspace(1)* %330, align 8, !tbaa !15\l  %332 = getelementptr inbounds double, double addrspace(1)* %3, i64 %21\l  store double %331, double addrspace(1)* %332, align 8, !tbaa !15\l  ret void\l}"];
}
