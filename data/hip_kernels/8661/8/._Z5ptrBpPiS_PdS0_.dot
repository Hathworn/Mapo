digraph "CFG for '_Z5ptrBpPiS_PdS0_' function" {
	label="CFG for '_Z5ptrBpPiS_PdS0_' function";

	Node0x4f85560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = load i32, i32 addrspace(1)* %1, align 4, !tbaa !7, !amdgpu.noclobber !5\l  %23 = icmp sgt i32 %22, 0\l  br i1 %23, label %24, label %112\l|{<s0>T|<s1>F}}"];
	Node0x4f85560:s0 -> Node0x4f890f0;
	Node0x4f85560:s1 -> Node0x4f89180;
	Node0x4f890f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = mul nsw i32 %21, %22\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds double, double addrspace(1)* %2, i64 %26\l  %28 = mul nsw i32 %13, %22\l  %29 = sext i32 %28 to i64\l  %30 = load i32, i32 addrspace(1)* %0, align 4, !tbaa !7, !amdgpu.noclobber !5\l  %31 = mul nsw i32 %30, %21\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds double, double addrspace(1)* %3, i64 %32\l  %34 = sext i32 %13 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %33, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !11,\l... !amdgpu.noclobber !5\l  %37 = getelementptr double, double addrspace(1)* %27, i64 %29\l  %38 = and i32 %22, 7\l  %39 = icmp ult i32 %22, 8\l  br i1 %39, label %96, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4f890f0:s0 -> Node0x4f8a3a0;
	Node0x4f890f0:s1 -> Node0x4f8a430;
	Node0x4f8a430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%40:\l40:                                               \l  %41 = and i32 %22, -8\l  br label %42\l}"];
	Node0x4f8a430 -> Node0x4f8a630;
	Node0x4f8a630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%42:\l42:                                               \l  %43 = phi double [ %36, %40 ], [ %92, %42 ]\l  %44 = phi i32 [ 0, %40 ], [ %93, %42 ]\l  %45 = phi i32 [ 0, %40 ], [ %94, %42 ]\l  %46 = zext i32 %44 to i64\l  %47 = getelementptr double, double addrspace(1)* %37, i64 %46\l  %48 = getelementptr inbounds double, double addrspace(1)* %47, i64 %46\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !11\l  %50 = fadd contract double %43, %49\l  store double %50, double addrspace(1)* %35, align 8, !tbaa !11\l  %51 = or i32 %44, 1\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr double, double addrspace(1)* %37, i64 %52\l  %54 = getelementptr inbounds double, double addrspace(1)* %53, i64 %52\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !11\l  %56 = fadd contract double %50, %55\l  store double %56, double addrspace(1)* %35, align 8, !tbaa !11\l  %57 = or i32 %44, 2\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr double, double addrspace(1)* %37, i64 %58\l  %60 = getelementptr inbounds double, double addrspace(1)* %59, i64 %58\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !11\l  %62 = fadd contract double %56, %61\l  store double %62, double addrspace(1)* %35, align 8, !tbaa !11\l  %63 = or i32 %44, 3\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr double, double addrspace(1)* %37, i64 %64\l  %66 = getelementptr inbounds double, double addrspace(1)* %65, i64 %64\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !11\l  %68 = fadd contract double %62, %67\l  store double %68, double addrspace(1)* %35, align 8, !tbaa !11\l  %69 = or i32 %44, 4\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr double, double addrspace(1)* %37, i64 %70\l  %72 = getelementptr inbounds double, double addrspace(1)* %71, i64 %70\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !11\l  %74 = fadd contract double %68, %73\l  store double %74, double addrspace(1)* %35, align 8, !tbaa !11\l  %75 = or i32 %44, 5\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr double, double addrspace(1)* %37, i64 %76\l  %78 = getelementptr inbounds double, double addrspace(1)* %77, i64 %76\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !11\l  %80 = fadd contract double %74, %79\l  store double %80, double addrspace(1)* %35, align 8, !tbaa !11\l  %81 = or i32 %44, 6\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr double, double addrspace(1)* %37, i64 %82\l  %84 = getelementptr inbounds double, double addrspace(1)* %83, i64 %82\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !11\l  %86 = fadd contract double %80, %85\l  store double %86, double addrspace(1)* %35, align 8, !tbaa !11\l  %87 = or i32 %44, 7\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr double, double addrspace(1)* %37, i64 %88\l  %90 = getelementptr inbounds double, double addrspace(1)* %89, i64 %88\l  %91 = load double, double addrspace(1)* %90, align 8, !tbaa !11\l  %92 = fadd contract double %86, %91\l  store double %92, double addrspace(1)* %35, align 8, !tbaa !11\l  %93 = add nuw nsw i32 %44, 8\l  %94 = add i32 %45, 8\l  %95 = icmp eq i32 %94, %41\l  br i1 %95, label %96, label %42, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f8a630:s0 -> Node0x4f8a3a0;
	Node0x4f8a630:s1 -> Node0x4f8a630;
	Node0x4f8a3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%96:\l96:                                               \l  %97 = phi double [ %36, %24 ], [ %92, %42 ]\l  %98 = phi i32 [ 0, %24 ], [ %93, %42 ]\l  %99 = icmp eq i32 %38, 0\l  br i1 %99, label %112, label %100\l|{<s0>T|<s1>F}}"];
	Node0x4f8a3a0:s0 -> Node0x4f89180;
	Node0x4f8a3a0:s1 -> Node0x4f8d630;
	Node0x4f8d630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%100:\l100:                                              \l  %101 = phi double [ %108, %100 ], [ %97, %96 ]\l  %102 = phi i32 [ %109, %100 ], [ %98, %96 ]\l  %103 = phi i32 [ %110, %100 ], [ 0, %96 ]\l  %104 = zext i32 %102 to i64\l  %105 = getelementptr double, double addrspace(1)* %37, i64 %104\l  %106 = getelementptr inbounds double, double addrspace(1)* %105, i64 %104\l  %107 = load double, double addrspace(1)* %106, align 8, !tbaa !11\l  %108 = fadd contract double %101, %107\l  store double %108, double addrspace(1)* %35, align 8, !tbaa !11\l  %109 = add nuw nsw i32 %102, 1\l  %110 = add i32 %103, 1\l  %111 = icmp eq i32 %110, %38\l  br i1 %111, label %112, label %100, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4f8d630:s0 -> Node0x4f89180;
	Node0x4f8d630:s1 -> Node0x4f8d630;
	Node0x4f89180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%112:\l112:                                              \l  ret void\l}"];
}
