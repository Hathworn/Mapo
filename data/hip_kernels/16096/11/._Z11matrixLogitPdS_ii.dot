digraph "CFG for '_Z11matrixLogitPdS_ii' function" {
	label="CFG for '_Z11matrixLogitPdS_ii' function";

	Node0x61085d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp slt i32 %13, %3\l  %23 = icmp slt i32 %21, %2\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %118\l|{<s0>T|<s1>F}}"];
	Node0x61085d0:s0 -> Node0x610c070;
	Node0x61085d0:s1 -> Node0x610c100;
	Node0x610c070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%25:\l25:                                               \l  %26 = mul nsw i32 %21, %3\l  %27 = add nsw i32 %26, %13\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds double, double addrspace(1)* %0, i64 %28\l  %30 = load double, double addrspace(1)* %29, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %31 = fsub contract double 1.000000e+00, %30\l  %32 = fdiv contract double %30, %31\l  %33 = tail call double @llvm.amdgcn.frexp.mant.f64(double %32)\l  %34 = fcmp olt double %33, 0x3FE5555555555555\l  %35 = zext i1 %34 to i32\l  %36 = tail call double @llvm.amdgcn.ldexp.f64(double %33, i32 %35)\l  %37 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %32)\l  %38 = sub nsw i32 %37, %35\l  %39 = fadd double %36, -1.000000e+00\l  %40 = fadd double %36, 1.000000e+00\l  %41 = fadd double %40, -1.000000e+00\l  %42 = fsub double %36, %41\l  %43 = tail call double @llvm.amdgcn.rcp.f64(double %40)\l  %44 = fneg double %40\l  %45 = tail call double @llvm.fma.f64(double %44, double %43, double\l... 1.000000e+00)\l  %46 = tail call double @llvm.fma.f64(double %45, double %43, double %43)\l  %47 = tail call double @llvm.fma.f64(double %44, double %46, double\l... 1.000000e+00)\l  %48 = tail call double @llvm.fma.f64(double %47, double %46, double %46)\l  %49 = fmul double %39, %48\l  %50 = fmul double %40, %49\l  %51 = fneg double %50\l  %52 = tail call double @llvm.fma.f64(double %49, double %40, double %51)\l  %53 = tail call double @llvm.fma.f64(double %49, double %42, double %52)\l  %54 = fadd double %50, %53\l  %55 = fsub double %54, %50\l  %56 = fsub double %53, %55\l  %57 = fsub double %39, %54\l  %58 = fsub double %39, %57\l  %59 = fsub double %58, %54\l  %60 = fsub double %59, %56\l  %61 = fadd double %57, %60\l  %62 = fmul double %48, %61\l  %63 = fadd double %49, %62\l  %64 = fsub double %63, %49\l  %65 = fsub double %62, %64\l  %66 = fmul double %63, %63\l  %67 = tail call double @llvm.fma.f64(double %66, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %68 = tail call double @llvm.fma.f64(double %66, double %67, double\l... 0x3FC7474DD7F4DF2E)\l  %69 = tail call double @llvm.fma.f64(double %66, double %68, double\l... 0x3FCC71C016291751)\l  %70 = tail call double @llvm.fma.f64(double %66, double %69, double\l... 0x3FD249249B27ACF1)\l  %71 = tail call double @llvm.fma.f64(double %66, double %70, double\l... 0x3FD99999998EF7B6)\l  %72 = tail call double @llvm.fma.f64(double %66, double %71, double\l... 0x3FE5555555555780)\l  %73 = tail call double @llvm.amdgcn.ldexp.f64(double %63, i32 1)\l  %74 = tail call double @llvm.amdgcn.ldexp.f64(double %65, i32 1)\l  %75 = fmul double %63, %66\l  %76 = fmul double %75, %72\l  %77 = fadd double %73, %76\l  %78 = fsub double %77, %73\l  %79 = fsub double %76, %78\l  %80 = fadd double %74, %79\l  %81 = fadd double %77, %80\l  %82 = fsub double %81, %77\l  %83 = fsub double %80, %82\l  %84 = sitofp i32 %38 to double\l  %85 = fmul double %84, 0x3FE62E42FEFA39EF\l  %86 = fneg double %85\l  %87 = tail call double @llvm.fma.f64(double %84, double 0x3FE62E42FEFA39EF,\l... double %86)\l  %88 = tail call double @llvm.fma.f64(double %84, double 0x3C7ABC9E3B39803F,\l... double %87)\l  %89 = fadd double %85, %88\l  %90 = fsub double %89, %85\l  %91 = fsub double %88, %90\l  %92 = fadd double %89, %81\l  %93 = fsub double %92, %89\l  %94 = fsub double %92, %93\l  %95 = fsub double %89, %94\l  %96 = fsub double %81, %93\l  %97 = fadd double %96, %95\l  %98 = fadd double %91, %83\l  %99 = fsub double %98, %91\l  %100 = fsub double %98, %99\l  %101 = fsub double %91, %100\l  %102 = fsub double %83, %99\l  %103 = fadd double %102, %101\l  %104 = fadd double %98, %97\l  %105 = fadd double %92, %104\l  %106 = fsub double %105, %92\l  %107 = fsub double %104, %106\l  %108 = fadd double %103, %107\l  %109 = fadd double %105, %108\l  %110 = tail call double @llvm.fabs.f64(double %32) #3\l  %111 = fcmp oeq double %110, 0x7FF0000000000000\l  %112 = select i1 %111, double %32, double %109\l  %113 = fcmp olt double %32, 0.000000e+00\l  %114 = select i1 %113, double 0x7FF8000000000000, double %112\l  %115 = fcmp oeq double %32, 0.000000e+00\l  %116 = select i1 %115, double 0xFFF0000000000000, double %114\l  %117 = getelementptr inbounds double, double addrspace(1)* %1, i64 %28\l  store double %116, double addrspace(1)* %117, align 8, !tbaa !7\l  br label %118\l}"];
	Node0x610c070 -> Node0x610c100;
	Node0x610c100 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%118:\l118:                                              \l  ret void\l}"];
}
