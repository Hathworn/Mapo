digraph "CFG for '_Z14matrixMultiplyPdS_S_iiii' function" {
	label="CFG for '_Z14matrixMultiplyPdS_S_iiii' function";

	Node0x5293e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = zext i32 %16 to i64\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = zext i32 %25 to i64\l  %27 = sext i32 %4 to i64\l  %28 = icmp slt i64 %17, %27\l  %29 = sext i32 %3 to i64\l  %30 = icmp slt i64 %26, %29\l  %31 = select i1 %28, i1 %30, i1 false\l  br i1 %31, label %32, label %171\l|{<s0>T|<s1>F}}"];
	Node0x5293e50:s0 -> Node0x5297a70;
	Node0x5293e50:s1 -> Node0x5297b00;
	Node0x5297a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = icmp sgt i32 %5, 0\l  br i1 %33, label %34, label %64\l|{<s0>T|<s1>F}}"];
	Node0x5297a70:s0 -> Node0x5295d30;
	Node0x5297a70:s1 -> Node0x5297e50;
	Node0x5295d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = zext i32 %5 to i64\l  %36 = mul nuw nsw i64 %26, %35\l  %37 = and i32 %5, 7\l  %38 = icmp ult i32 %5, 8\l  br i1 %38, label %41, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5295d30:s0 -> Node0x5298210;
	Node0x5295d30:s1 -> Node0x5298260;
	Node0x5298260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%39:\l39:                                               \l  %40 = and i32 %5, -8\l  br label %69\l}"];
	Node0x5298260 -> Node0x5298460;
	Node0x5298210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = phi double [ undef, %34 ], [ %167, %69 ]\l  %43 = phi i32 [ 0, %34 ], [ %168, %69 ]\l  %44 = phi double [ 0.000000e+00, %34 ], [ %167, %69 ]\l  %45 = icmp eq i32 %37, 0\l  br i1 %45, label %64, label %46\l|{<s0>T|<s1>F}}"];
	Node0x5298210:s0 -> Node0x5297e50;
	Node0x5298210:s1 -> Node0x52996d0;
	Node0x52996d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi i32 [ %61, %46 ], [ %43, %41 ]\l  %48 = phi double [ %60, %46 ], [ %44, %41 ]\l  %49 = phi i32 [ %62, %46 ], [ 0, %41 ]\l  %50 = zext i32 %47 to i64\l  %51 = add nuw nsw i64 %36, %50\l  %52 = getelementptr inbounds double, double addrspace(1)* %0, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = mul nsw i32 %47, %6\l  %55 = sext i32 %54 to i64\l  %56 = add nsw i64 %55, %17\l  %57 = getelementptr inbounds double, double addrspace(1)* %1, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = fmul contract double %53, %58\l  %60 = fadd contract double %48, %59\l  %61 = add nuw nsw i32 %47, 1\l  %62 = add i32 %49, 1\l  %63 = icmp eq i32 %62, %37\l  br i1 %63, label %64, label %46, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x52996d0:s0 -> Node0x5297e50;
	Node0x52996d0:s1 -> Node0x52996d0;
	Node0x5297e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%64:\l64:                                               \l  %65 = phi double [ 0.000000e+00, %32 ], [ %42, %41 ], [ %60, %46 ]\l  %66 = mul nsw i64 %26, %27\l  %67 = add nsw i64 %66, %17\l  %68 = getelementptr inbounds double, double addrspace(1)* %2, i64 %67\l  store double %65, double addrspace(1)* %68, align 8, !tbaa !7\l  br label %171\l}"];
	Node0x5297e50 -> Node0x5297b00;
	Node0x5298460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%69:\l69:                                               \l  %70 = phi i32 [ 0, %39 ], [ %168, %69 ]\l  %71 = phi double [ 0.000000e+00, %39 ], [ %167, %69 ]\l  %72 = phi i32 [ 0, %39 ], [ %169, %69 ]\l  %73 = zext i32 %70 to i64\l  %74 = add nuw nsw i64 %36, %73\l  %75 = getelementptr inbounds double, double addrspace(1)* %0, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = mul nsw i32 %70, %6\l  %78 = sext i32 %77 to i64\l  %79 = add nsw i64 %78, %17\l  %80 = getelementptr inbounds double, double addrspace(1)* %1, i64 %79\l  %81 = load double, double addrspace(1)* %80, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = fmul contract double %76, %81\l  %83 = fadd contract double %71, %82\l  %84 = or i32 %70, 1\l  %85 = zext i32 %84 to i64\l  %86 = add nuw nsw i64 %36, %85\l  %87 = getelementptr inbounds double, double addrspace(1)* %0, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = mul nsw i32 %84, %6\l  %90 = sext i32 %89 to i64\l  %91 = add nsw i64 %90, %17\l  %92 = getelementptr inbounds double, double addrspace(1)* %1, i64 %91\l  %93 = load double, double addrspace(1)* %92, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract double %88, %93\l  %95 = fadd contract double %83, %94\l  %96 = or i32 %70, 2\l  %97 = zext i32 %96 to i64\l  %98 = add nuw nsw i64 %36, %97\l  %99 = getelementptr inbounds double, double addrspace(1)* %0, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = mul nsw i32 %96, %6\l  %102 = sext i32 %101 to i64\l  %103 = add nsw i64 %102, %17\l  %104 = getelementptr inbounds double, double addrspace(1)* %1, i64 %103\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fmul contract double %100, %105\l  %107 = fadd contract double %95, %106\l  %108 = or i32 %70, 3\l  %109 = zext i32 %108 to i64\l  %110 = add nuw nsw i64 %36, %109\l  %111 = getelementptr inbounds double, double addrspace(1)* %0, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = mul nsw i32 %108, %6\l  %114 = sext i32 %113 to i64\l  %115 = add nsw i64 %114, %17\l  %116 = getelementptr inbounds double, double addrspace(1)* %1, i64 %115\l  %117 = load double, double addrspace(1)* %116, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fmul contract double %112, %117\l  %119 = fadd contract double %107, %118\l  %120 = or i32 %70, 4\l  %121 = zext i32 %120 to i64\l  %122 = add nuw nsw i64 %36, %121\l  %123 = getelementptr inbounds double, double addrspace(1)* %0, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = mul nsw i32 %120, %6\l  %126 = sext i32 %125 to i64\l  %127 = add nsw i64 %126, %17\l  %128 = getelementptr inbounds double, double addrspace(1)* %1, i64 %127\l  %129 = load double, double addrspace(1)* %128, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = fmul contract double %124, %129\l  %131 = fadd contract double %119, %130\l  %132 = or i32 %70, 5\l  %133 = zext i32 %132 to i64\l  %134 = add nuw nsw i64 %36, %133\l  %135 = getelementptr inbounds double, double addrspace(1)* %0, i64 %134\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %137 = mul nsw i32 %132, %6\l  %138 = sext i32 %137 to i64\l  %139 = add nsw i64 %138, %17\l  %140 = getelementptr inbounds double, double addrspace(1)* %1, i64 %139\l  %141 = load double, double addrspace(1)* %140, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = fmul contract double %136, %141\l  %143 = fadd contract double %131, %142\l  %144 = or i32 %70, 6\l  %145 = zext i32 %144 to i64\l  %146 = add nuw nsw i64 %36, %145\l  %147 = getelementptr inbounds double, double addrspace(1)* %0, i64 %146\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = mul nsw i32 %144, %6\l  %150 = sext i32 %149 to i64\l  %151 = add nsw i64 %150, %17\l  %152 = getelementptr inbounds double, double addrspace(1)* %1, i64 %151\l  %153 = load double, double addrspace(1)* %152, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = fmul contract double %148, %153\l  %155 = fadd contract double %143, %154\l  %156 = or i32 %70, 7\l  %157 = zext i32 %156 to i64\l  %158 = add nuw nsw i64 %36, %157\l  %159 = getelementptr inbounds double, double addrspace(1)* %0, i64 %158\l  %160 = load double, double addrspace(1)* %159, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %161 = mul nsw i32 %156, %6\l  %162 = sext i32 %161 to i64\l  %163 = add nsw i64 %162, %17\l  %164 = getelementptr inbounds double, double addrspace(1)* %1, i64 %163\l  %165 = load double, double addrspace(1)* %164, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %166 = fmul contract double %160, %165\l  %167 = fadd contract double %155, %166\l  %168 = add nuw nsw i32 %70, 8\l  %169 = add i32 %72, 8\l  %170 = icmp eq i32 %169, %40\l  br i1 %170, label %41, label %69, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5298460:s0 -> Node0x5298210;
	Node0x5298460:s1 -> Node0x5298460;
	Node0x5297b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%171:\l171:                                              \l  ret void\l}"];
}
