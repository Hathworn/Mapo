digraph "CFG for '_Z18convolve_optimisedPfS_S_ii' function" {
	label="CFG for '_Z18convolve_optimisedPfS_S_ii' function";

	Node0x56382f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = mul nsw i32 %7, %4\l  %9 = add nsw i32 %8, %6\l  %10 = sext i32 %9 to i64\l  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10\l  %12 = load float, float addrspace(1)* %11, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %13 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %6\l  store float %12, float addrspace(3)* %13, align 4, !tbaa !5\l  %14 = icmp eq i32 %6, 0\l  %15 = icmp sgt i32 %3, 1\l  %16 = select i1 %14, i1 %15, i1 false\l  br i1 %16, label %17, label %100\l|{<s0>T|<s1>F}}"];
	Node0x56382f0:s0 -> Node0x56392c0;
	Node0x56382f0:s1 -> Node0x563a910;
	Node0x56392c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%17:\l17:                                               \l  %18 = add i32 %3, -2\l  %19 = add i32 %3, -1\l  %20 = and i32 %19, 7\l  %21 = icmp ult i32 %18, 7\l  br i1 %21, label %85, label %22\l|{<s0>T|<s1>F}}"];
	Node0x56392c0:s0 -> Node0x563ad20;
	Node0x56392c0:s1 -> Node0x563ad70;
	Node0x563ad70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%22:\l22:                                               \l  %23 = and i32 %19, -8\l  br label %24\l}"];
	Node0x563ad70 -> Node0x563af70;
	Node0x563af70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%24:\l24:                                               \l  %25 = phi i32 [ 0, %22 ], [ %82, %24 ]\l  %26 = phi i32 [ 0, %22 ], [ %83, %24 ]\l  %27 = add i32 %25, %4\l  %28 = add i32 %27, %8\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %32 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %27\l  store float %31, float addrspace(3)* %32, align 4, !tbaa !5\l  %33 = or i32 %25, 1\l  %34 = add i32 %33, %4\l  %35 = add i32 %34, %8\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %39 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %34\l  store float %38, float addrspace(3)* %39, align 4, !tbaa !5\l  %40 = or i32 %25, 2\l  %41 = add i32 %40, %4\l  %42 = add i32 %41, %8\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %46 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %41\l  store float %45, float addrspace(3)* %46, align 4, !tbaa !5\l  %47 = or i32 %25, 3\l  %48 = add i32 %47, %4\l  %49 = add i32 %48, %8\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %53 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %48\l  store float %52, float addrspace(3)* %53, align 4, !tbaa !5\l  %54 = or i32 %25, 4\l  %55 = add i32 %54, %4\l  %56 = add i32 %55, %8\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %60 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %55\l  store float %59, float addrspace(3)* %60, align 4, !tbaa !5\l  %61 = or i32 %25, 5\l  %62 = add i32 %61, %4\l  %63 = add i32 %62, %8\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %67 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %62\l  store float %66, float addrspace(3)* %67, align 4, !tbaa !5\l  %68 = or i32 %25, 6\l  %69 = add i32 %68, %4\l  %70 = add i32 %69, %8\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %74 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %69\l  store float %73, float addrspace(3)* %74, align 4, !tbaa !5\l  %75 = or i32 %25, 7\l  %76 = add i32 %75, %4\l  %77 = add i32 %76, %8\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %81 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %76\l  store float %80, float addrspace(3)* %81, align 4, !tbaa !5\l  %82 = add nuw nsw i32 %25, 8\l  %83 = add i32 %26, 8\l  %84 = icmp eq i32 %83, %23\l  br i1 %84, label %85, label %24, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x563af70:s0 -> Node0x563ad20;
	Node0x563af70:s1 -> Node0x563af70;
	Node0x563ad20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%85:\l85:                                               \l  %86 = phi i32 [ 0, %17 ], [ %82, %24 ]\l  %87 = icmp eq i32 %20, 0\l  br i1 %87, label %100, label %88\l|{<s0>T|<s1>F}}"];
	Node0x563ad20:s0 -> Node0x563a910;
	Node0x563ad20:s1 -> Node0x563e640;
	Node0x563e640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%88:\l88:                                               \l  %89 = phi i32 [ %97, %88 ], [ %86, %85 ]\l  %90 = phi i32 [ %98, %88 ], [ 0, %85 ]\l  %91 = add i32 %89, %4\l  %92 = add i32 %91, %8\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %96 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %91\l  store float %95, float addrspace(3)* %96, align 4, !tbaa !5\l  %97 = add nuw nsw i32 %89, 1\l  %98 = add i32 %90, 1\l  %99 = icmp eq i32 %98, %20\l  br i1 %99, label %100, label %88, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x563e640:s0 -> Node0x563a910;
	Node0x563e640:s1 -> Node0x563e640;
	Node0x563a910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%100:\l100:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10\l  store float 0.000000e+00, float addrspace(1)* %101, align 4, !tbaa !5\l  %102 = icmp sgt i32 %3, 0\l  br i1 %102, label %103, label %127\l|{<s0>T|<s1>F}}"];
	Node0x563a910:s0 -> Node0x563feb0;
	Node0x563a910:s1 -> Node0x563ff40;
	Node0x563feb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%103:\l103:                                              \l  %104 = and i32 %3, 7\l  %105 = icmp ult i32 %3, 8\l  br i1 %105, label %108, label %106\l|{<s0>T|<s1>F}}"];
	Node0x563feb0:s0 -> Node0x56401a0;
	Node0x563feb0:s1 -> Node0x56401f0;
	Node0x56401f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%106:\l106:                                              \l  %107 = and i32 %3, -8\l  br label %128\l}"];
	Node0x56401f0 -> Node0x56403c0;
	Node0x56401a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%108:\l108:                                              \l  %109 = phi float [ 0.000000e+00, %103 ], [ %202, %128 ]\l  %110 = phi i32 [ 0, %103 ], [ %203, %128 ]\l  %111 = icmp eq i32 %104, 0\l  br i1 %111, label %127, label %112\l|{<s0>T|<s1>F}}"];
	Node0x56401a0:s0 -> Node0x563ff40;
	Node0x56401a0:s1 -> Node0x56406e0;
	Node0x56406e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%112:\l112:                                              \l  %113 = phi float [ %123, %112 ], [ %109, %108 ]\l  %114 = phi i32 [ %124, %112 ], [ %110, %108 ]\l  %115 = phi i32 [ %125, %112 ], [ 0, %108 ]\l  %116 = zext i32 %114 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !5\l  %119 = add nuw nsw i32 %114, %6\l  %120 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %119\l  %121 = load float, float addrspace(3)* %120, align 4, !tbaa !5\l  %122 = fmul contract float %118, %121\l  %123 = fadd contract float %113, %122\l  store float %123, float addrspace(1)* %101, align 4, !tbaa !5\l  %124 = add nuw nsw i32 %114, 1\l  %125 = add i32 %115, 1\l  %126 = icmp eq i32 %125, %104\l  br i1 %126, label %127, label %112, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x56406e0:s0 -> Node0x563ff40;
	Node0x56406e0:s1 -> Node0x56406e0;
	Node0x563ff40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%127:\l127:                                              \l  ret void\l}"];
	Node0x56403c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%128:\l128:                                              \l  %129 = phi float [ 0.000000e+00, %106 ], [ %202, %128 ]\l  %130 = phi i32 [ 0, %106 ], [ %203, %128 ]\l  %131 = phi i32 [ 0, %106 ], [ %204, %128 ]\l  %132 = zext i32 %130 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %2, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !5\l  %135 = add nuw nsw i32 %130, %6\l  %136 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %135\l  %137 = load float, float addrspace(3)* %136, align 4, !tbaa !5\l  %138 = fmul contract float %134, %137\l  %139 = fadd contract float %129, %138\l  store float %139, float addrspace(1)* %101, align 4, !tbaa !5\l  %140 = or i32 %130, 1\l  %141 = zext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %2, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !5\l  %144 = add nuw nsw i32 %140, %6\l  %145 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %144\l  %146 = load float, float addrspace(3)* %145, align 4, !tbaa !5\l  %147 = fmul contract float %143, %146\l  %148 = fadd contract float %139, %147\l  store float %148, float addrspace(1)* %101, align 4, !tbaa !5\l  %149 = or i32 %130, 2\l  %150 = zext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %2, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !5\l  %153 = add nuw nsw i32 %149, %6\l  %154 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %153\l  %155 = load float, float addrspace(3)* %154, align 4, !tbaa !5\l  %156 = fmul contract float %152, %155\l  %157 = fadd contract float %148, %156\l  store float %157, float addrspace(1)* %101, align 4, !tbaa !5\l  %158 = or i32 %130, 3\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %2, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !5\l  %162 = add nuw nsw i32 %158, %6\l  %163 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %162\l  %164 = load float, float addrspace(3)* %163, align 4, !tbaa !5\l  %165 = fmul contract float %161, %164\l  %166 = fadd contract float %157, %165\l  store float %166, float addrspace(1)* %101, align 4, !tbaa !5\l  %167 = or i32 %130, 4\l  %168 = zext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %2, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !5\l  %171 = add nuw nsw i32 %167, %6\l  %172 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %171\l  %173 = load float, float addrspace(3)* %172, align 4, !tbaa !5\l  %174 = fmul contract float %170, %173\l  %175 = fadd contract float %166, %174\l  store float %175, float addrspace(1)* %101, align 4, !tbaa !5\l  %176 = or i32 %130, 5\l  %177 = zext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %2, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !5\l  %180 = add nuw nsw i32 %176, %6\l  %181 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %180\l  %182 = load float, float addrspace(3)* %181, align 4, !tbaa !5\l  %183 = fmul contract float %179, %182\l  %184 = fadd contract float %175, %183\l  store float %184, float addrspace(1)* %101, align 4, !tbaa !5\l  %185 = or i32 %130, 6\l  %186 = zext i32 %185 to i64\l  %187 = getelementptr inbounds float, float addrspace(1)* %2, i64 %186\l  %188 = load float, float addrspace(1)* %187, align 4, !tbaa !5\l  %189 = add nuw nsw i32 %185, %6\l  %190 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %189\l  %191 = load float, float addrspace(3)* %190, align 4, !tbaa !5\l  %192 = fmul contract float %188, %191\l  %193 = fadd contract float %184, %192\l  store float %193, float addrspace(1)* %101, align 4, !tbaa !5\l  %194 = or i32 %130, 7\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %2, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !5\l  %198 = add nuw nsw i32 %194, %6\l  %199 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @data_in_shared, i32 0, i32 %198\l  %200 = load float, float addrspace(3)* %199, align 4, !tbaa !5\l  %201 = fmul contract float %197, %200\l  %202 = fadd contract float %193, %201\l  store float %202, float addrspace(1)* %101, align 4, !tbaa !5\l  %203 = add nuw nsw i32 %130, 8\l  %204 = add i32 %131, 8\l  %205 = icmp eq i32 %204, %107\l  br i1 %205, label %108, label %128, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56403c0:s0 -> Node0x56401a0;
	Node0x56403c0:s1 -> Node0x56403c0;
}
