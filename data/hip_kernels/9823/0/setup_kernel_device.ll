; ModuleID = '../data/hip_kernels/9823/0/main.cu'
source_filename = "../data/hip_kernels/9823/0/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.hiprandStateMRG32k3a = type { %"class.rocrand_device::mrg32k3a_engine" }
%"class.rocrand_device::mrg32k3a_engine" = type { %"struct.rocrand_device::mrg32k3a_engine::mrg32k3a_state" }
%"struct.rocrand_device::mrg32k3a_engine::mrg32k3a_state" = type { [3 x i32], [3 x i32], i32, i32, float, double }

@_ZL7d_A1P76 = internal unnamed_addr addrspace(4) constant [576 x i64] [i64 82758667, i64 1871391091, i64 4127413238, i64 3672831523, i64 69195019, i64 1871391091, i64 3672091415, i64 3528743235, i64 69195019, i64 3361372532, i64 2329303404, i64 99651939, i64 2008671965, i64 2931758910, i64 2329303404, i64 1113529483, i64 2374097189, i64 2931758910, i64 1831590873, i64 1588259595, i64 1314332382, i64 2385989343, i64 2508077280, i64 1588259595, i64 1787615788, i64 661437137, i64 2508077280, i64 2326052247, i64 4183591379, i64 4049009082, i64 2604529491, i64 1453913233, i64 4183591379, i64 2311925423, i64 1805360390, i64 1453913233, i64 3956367490, i64 604461629, i64 1257432102, i64 794711716, i64 1155867175, i64 604461629, i64 1777070788, i64 429445904, i64 1155867175, i64 1686241617, i64 1257046062, i64 1427609439, i64 490376081, i64 387798431, i64 1257046062, i64 235551485, i64 1312672615, i64 387798431, i64 2362447880, i64 3445363024, i64 3160262066, i64 2426867845, i64 4194339866, i64 3445363024, i64 1046144413, i64 4177893681, i64 4194339866, i64 4251175413, i64 3559576374, i64 3107663662, i64 697539134, i64 1909472435, i64 3559576374, i64 280754246, i64 375835695, i64 1909472435, i64 1099512970, i64 712404985, i64 1571467521, i64 546519870, i64 1135109300, i64 712404985, i64 3325312332, i64 2352874613, i64 1135109300, i64 1945425936, i64 1653045514, i64 381988982, i64 3733376326, i64 414410025, i64 1653045514, i64 1181583679, i64 1185848176, i64 414410025, i64 2526336124, i64 3019211015, i64 4215964965, i64 2683163472, i64 4188191530, i64 3019211015, i64 2964651598, i64 293801056, i64 4188191530, i64 1444052678, i64 2253324417, i64 39719589, i64 1880267534, i64 2391992038, i64 2253324417, i64 987740265, i64 3691889508, i64 2391992038, i64 166599066, i64 2335494420, i64 1232261118, i64 2227597731, i64 2570600780, i64 2335494420, i64 2700034538, i64 3460843234, i64 2570600780, i64 2511338360, i64 1188954576, i64 1251401239, i64 2511664974, i64 292276982, i64 1188954576, i64 697844082, i64 3093661552, i64 292276982, i64 3624650744, i64 51993077, i64 3540268009, i64 3252828938, i64 3710319575, i64 51993077, i64 2858628849, i64 3910069381, i64 3710319575, i64 655966702, i64 754002362, i64 1646581402, i64 1958331075, i64 475572423, i64 754002362, i64 3248619000, i64 3228514800, i64 475572423, i64 2760311307, i64 4166372813, i64 741596417, i64 2282679206, i64 3090782630, i64 4166372813, i64 3242468721, i64 1628442374, i64 3090782630, i64 4265279407, i64 3532111852, i64 1754687396, i64 500404765, i64 2603727025, i64 3532111852, i64 1428367254, i64 3149485478, i64 2603727025, i64 2873769531, i64 2081104178, i64 596284397, i64 4153800443, i64 1261269623, i64 2081104178, i64 3967600061, i64 1830023157, i64 1261269623, i64 278611533, i64 2229285304, i64 3443204327, i64 3110641420, i64 77498444, i64 2229285304, i64 3904070810, i64 1070507239, i64 77498444, i64 544639534, i64 568528663, i64 2177189807, i64 2475829068, i64 121482268, i64 568528663, i64 876978915, i64 3116647617, i64 121482268, i64 1547862823, i64 2404658587, i64 4191448009, i64 2158188804, i64 2976916793, i64 2404658587, i64 168571747, i64 1691884706, i64 2976916793, i64 3208213311, i64 4212638780, i64 3235157352, i64 671148556, i64 2951207765, i64 4212638780, i64 2075145516, i64 2395485231, i64 2951207765, i64 4080517315, i64 2133433101, i64 4043998180, i64 2044221845, i64 867670560, i64 2133433101, i64 834432416, i64 3613001199, i64 867670560, i64 4102885735, i64 1319434267, i64 2678775073, i64 740092580, i64 607380970, i64 1319434267, i64 2198271844, i64 2610193258, i64 607380970, i64 1165218048, i64 1317690360, i64 1189150958, i64 399240205, i64 2507168618, i64 1317690360, i64 2988334517, i64 2687593413, i64 2507168618, i64 1028861702, i64 4082006648, i64 338232527, i64 1888486946, i64 1842080991, i64 4082006648, i64 3903826366, i64 3109935091, i64 1842080991, i64 614134826, i64 2261996505, i64 2888080641, i64 710199359, i64 2773979788, i64 2261996505, i64 1144301620, i64 2554371815, i64 2773979788, i64 4056173823, i64 1285620078, i64 357420018, i64 2423072612, i64 2309408315, i64 1285620078, i64 1533175115, i64 2760088020, i64 2309408315, i64 4264130267, i64 815015434, i64 3142242173, i64 180649975, i64 2500813569, i64 815015434, i64 3378723563, i64 829683767, i64 2500813569, i64 4174387531, i64 1030729435, i64 2812778314, i64 1752988797, i64 4044178729, i64 1030729435, i64 467969301, i64 554748104, i64 4044178729, i64 1348429235, i64 2928743274, i64 3776082629, i64 3607529209, i64 3069812185, i64 2928743274, i64 2542432347, i64 3208181168, i64 3069812185, i64 4064845753, i64 668285756, i64 3816217625, i64 3713143233, i64 1380634204, i64 668285756, i64 3533700508, i64 1192551435, i64 1380634204, i64 1515684518, i64 1706771705, i64 728123349, i64 3174850469, i64 2057456462, i64 1706771705, i64 3410402985, i64 2897339640, i64 2057456462, i64 3082272717, i64 531091457, i64 1390161328, i64 3895139973, i64 2171402857, i64 531091457, i64 4030688141, i64 3049703400, i64 2171402857, i64 1241147206, i64 3193892819, i64 1244284192, i64 65180262, i64 4065669017, i64 3193892819, i64 1484817937, i64 3661081858, i64 4065669017, i64 1438760812, i64 3491341751, i64 3414470157, i64 2805337292, i64 272266053, i64 3491341751, i64 824109230, i64 3202556526, i64 272266053, i64 135412706, i64 3627115412, i64 2345042216, i64 1565169824, i64 2166856449, i64 3627115412, i64 1026946745, i64 3467845248, i64 2166856449, i64 1889419951, i64 3256876154, i64 1240505488, i64 1254783743, i64 989966800, i64 3256876154, i64 1995297400, i64 3692472918, i64 989966800, i64 3206226875, i64 285700890, i64 496017472, i64 2515316194, i64 2129675196, i64 285700890, i64 1863853990, i64 2673457552, i64 2129675196, i64 4163770641, i64 255160418, i64 772100749, i64 1987092456, i64 3237660221, i64 255160418, i64 1394381051, i64 4216039401, i64 3237660221, i64 2133915627, i64 2713747584, i64 627765421, i64 2300605925, i64 35690583, i64 2713747584, i64 2918902946, i64 2638220304, i64 35690583, i64 2587549655, i64 998684270, i64 4292130625, i64 1791772791, i64 2820705344, i64 998684270, i64 124590158, i64 3831143549, i64 2820705344, i64 978482299, i64 3200877282, i64 497605289, i64 3717741518, i64 3737164414, i64 3200877282, i64 4046686626, i64 861393946, i64 3737164414, i64 2665561897, i64 300934584, i64 3179822945, i64 893043137, i64 2031413512, i64 300934584, i64 3806926970, i64 2413249929, i64 2031413512, i64 1417581911, i64 3071835354, i64 2575196237, i64 4101127251, i64 1375339216, i64 3071835354, i64 847617977, i64 3632503316, i64 1375339216, i64 2747488994, i64 3296604805, i64 898095468, i64 1742777145, i64 219265369, i64 3296604805, i64 823714885, i64 667779292, i64 219265369, i64 2640209692, i64 3040506537, i64 3626115220, i64 161827078, i64 852668118, i64 3040506537, i64 3856381322, i64 3360242076, i64 852668118, i64 3734246393, i64 4151553160, i64 4177051283, i64 266522866, i64 1731798531, i64 4151553160, i64 632196679, i64 3864297722, i64 1731798531, i64 1694175127, i64 1087914338, i64 2384195794, i64 2764925057, i64 505782858, i64 1087914338, i64 3235634082, i64 807915248, i64 505782858, i64 2402749950, i64 2353776151, i64 75909174, i64 890570951, i64 1752665661, i64 2353776151, i64 3120241607, i64 3862435696, i64 1752665661, i64 2427906178, i64 3580155704, i64 949770784, i64 226153695, i64 1230515664, i64 3580155704, i64 1988835001, i64 986791581, i64 1230515664, i64 1774047142, i64 3199155377, i64 3106427820, i64 1901920839, i64 4290900039, i64 3199155377, i64 4178980191, i64 280623348, i64 4290900039, i64 3567524348, i64 1934119675, i64 3188270128, i64 2997767678, i64 826363896, i64 1934119675, i64 262952343, i64 614326610, i64 826363896, i64 1625613062, i64 4288164505, i64 2481284279, i64 4273461426, i64 1177260757, i64 4288164505, i64 305959988, i64 4017252267, i64 1177260757, i64 337929267, i64 333342539, i64 418300166, i64 2944208672, i64 379097734, i64 333342539, i64 2084056909, i64 3625475947, i64 379097734, i64 1189899255, i64 1307754719, i64 1214919992, i64 3736721708, i64 3514751918, i64 1307754719, i64 732435953, i64 2021244538, i64 3514751918, i64 4089172695, i64 1533534334, i64 525643282, i64 1497577018, i64 1335684482, i64 1533534334, i64 2079007086, i64 3977541427, i64 1335684482, i64 3075256652, i64 2762754934, i64 3846844247, i64 3057872364, i64 3274545167, i64 2762754934, i64 4028573983, i64 938934351, i64 3274545167, i64 2597859300, i64 2880151048, i64 2523330453, i64 1121709186, i64 175667448, i64 2880151048, i64 4182510911, i64 1723133625, i64 175667448, i64 484148868, i64 1404283933, i64 2982534313, i64 3736767353, i64 3179865161, i64 1404283933, i64 391120388, i64 3758716888, i64 3179865161, i64 2138867468, i64 1128973399, i64 2133702321, i64 1613561693, i64 3622350766, i64 1128973399, i64 1500151924, i64 3759983985, i64 3622350766, i64 3027706760, i64 3786576552, i64 2698781808, i64 2810527099, i64 90498489, i64 3786576552, i64 4220122612, i64 1855245979, i64 90498489, i64 3739389517, i64 1110440720, i64 917457922, i64 2163873618, i64 3707591763, i64 1110440720, i64 2667061910, i64 2533383962, i64 3707591763], align 16
@_ZL7d_A2P76 = internal unnamed_addr addrspace(4) constant [576 x i64] [i64 1511326704, i64 3759209742, i64 1610795712, i64 4292754251, i64 1511326704, i64 3889917532, i64 3859662829, i64 4292754251, i64 3708466080, i64 972103006, i64 964807713, i64 878035866, i64 4248550197, i64 972103006, i64 1926628839, i64 1448629089, i64 4248550197, i64 3196114006, i64 3497384788, i64 3174249442, i64 3182508868, i64 3864816447, i64 3497384788, i64 3038399593, i64 2546884738, i64 3864816447, i64 2980208068, i64 1776335558, i64 1189944887, i64 4095757548, i64 3813600746, i64 1776335558, i64 789475914, i64 4119698302, i64 3813600746, i64 2145357457, i64 4022832294, i64 4130146837, i64 1942923647, i64 1675130777, i64 4022832294, i64 916677004, i64 4089786548, i64 1675130777, i64 116540512, i64 165639584, i64 1205513289, i64 2037453462, i64 1444587280, i64 165639584, i64 161923120, i64 2617085459, i64 1444587280, i64 2006913311, i64 3458099202, i64 3062421748, i64 4052486999, i64 1064270720, i64 3458099202, i64 230768332, i64 4056228301, i64 1064270720, i64 2219267779, i64 296275263, i64 3452455838, i64 2081462173, i64 1789143993, i64 296275263, i64 3463234943, i64 2097389984, i64 1789143993, i64 3447191459, i64 2828288883, i64 3866690251, i64 410553827, i64 1587005542, i64 2828288883, i64 1469478670, i64 2766486018, i64 1587005542, i64 2627363449, i64 3288027530, i64 412403981, i64 2458742268, i64 4267121909, i64 3288027530, i64 138566505, i64 420803572, i64 4267121909, i64 4094554844, i64 3844599430, i64 2430152838, i64 3283485436, i64 2486244684, i64 3844599430, i64 4252427633, i64 3560842909, i64 2486244684, i64 3960267499, i64 67933059, i64 1294996291, i64 2657888382, i64 513233413, i64 67933059, i64 1379805031, i64 44564058, i64 513233413, i64 86971645, i64 2732588524, i64 1866530072, i64 818237694, i64 2540507736, i64 2732588524, i64 3257104212, i64 1164400003, i64 2540507736, i64 1124501551, i64 4199239222, i64 3155848463, i64 2121388468, i64 1135554501, i64 4199239222, i64 2056492193, i64 3251740389, i64 1135554501, i64 2343537248, i64 550710036, i64 500329021, i64 1075236085, i64 356444753, i64 550710036, i64 1634965500, i64 58733535, i64 356444753, i64 1261552815, i64 708689546, i64 419139045, i64 2012018174, i64 706488081, i64 708689546, i64 1113760995, i64 585555005, i64 706488081, i64 76092226, i64 1293182265, i64 3168473803, i64 366230236, i64 3319068849, i64 1293182265, i64 1085259665, i64 1675229290, i64 3319068849, i64 3912300371, i64 3186089068, i64 4188864734, i64 1211781402, i64 756122322, i64 3186089068, i64 578262892, i64 2518961174, i64 756122322, i64 1658665581, i64 1347291439, i64 2050427676, i64 736113023, i64 4102191254, i64 1347291439, i64 878627148, i64 1293500383, i64 4102191254, i64 745646810, i64 4196897331, i64 3436564969, i64 1900167098, i64 3108887846, i64 4196897331, i64 2697923227, i64 1405263476, i64 3108887846, i64 314631094, i64 958383622, i64 3694638688, i64 1150087061, i64 3770009830, i64 958383622, i64 793326651, i64 533700213, i64 3770009830, i64 1513734026, i64 4119603367, i64 3479396923, i64 3534176399, i64 3765397477, i64 4119603367, i64 1458031003, i64 3380901602, i64 3765397477, i64 2684083587, i64 980937351, i64 2094378936, i64 448446028, i64 1421333909, i64 980937351, i64 3405683645, i64 323724368, i64 1421333909, i64 338680738, i64 2942968846, i64 4293637338, i64 3549906544, i64 527851489, i64 2942968846, i64 3852871282, i64 4209198933, i64 527851489, i64 1091268872, i64 1975983015, i64 2092556693, i64 611187071, i64 3982652344, i64 1975983015, i64 3001736262, i64 2055073597, i64 3982652344, i64 1875181995, i64 2970221269, i64 880904779, i64 2447465272, i64 2888742196, i64 2970221269, i64 3521651749, i64 3019977656, i64 2888742196, i64 2712717326, i64 419134859, i64 2976059897, i64 747864206, i64 4101695717, i64 419134859, i64 4264593116, i64 2657991148, i64 4101695717, i64 2542621682, i64 4043135299, i64 1612983166, i64 1149778656, i64 1267010518, i64 4043135299, i64 3496325546, i64 3094232897, i64 1267010518, i64 2949176293, i64 3949395794, i64 1774568686, i64 2123036003, i64 2182983404, i64 3949395794, i64 2355671350, i64 2820933455, i64 2182983404, i64 513963325, i64 3046911698, i64 2576744453, i64 2492729814, i64 4277866093, i64 3046911698, i64 3146977604, i64 2249371766, i64 4277866093, i64 3622293976, i64 1391529818, i64 423458502, i64 2587125255, i64 3536237833, i64 1391529818, i64 985347517, i64 157623850, i64 3536237833, i64 1015566287, i64 48329260, i64 2599277669, i64 821961664, i64 902187690, i64 48329260, i64 1716556555, i64 4019658974, i64 902187690, i64 950730510, i64 1318489562, i64 1530977112, i64 3713577419, i64 4270158447, i64 1318489562, i64 1654940598, i64 2679964938, i64 4270158447, i64 1337075195, i64 770600793, i64 3249576224, i64 3578552768, i64 2710443459, i64 770600793, i64 2990852339, i64 3098163705, i64 2710443459, i64 522138188, i64 2803285489, i64 1922250286, i64 3164022812, i64 477609731, i64 2803285489, i64 2140252218, i64 2252852611, i64 477609731, i64 3058519788, i64 208329741, i64 3633562083, i64 3548346666, i64 3892091460, i64 208329741, i64 516833304, i64 3440632377, i64 3892091460, i64 1638833719, i64 1816075033, i64 3570111203, i64 959489356, i64 3482051486, i64 1816075033, i64 861657108, i64 3119495098, i64 3482051486, i64 2576849579, i64 4240216888, i64 2891584407, i64 2102314945, i64 4064489450, i64 4240216888, i64 1427441010, i64 2441164913, i64 4064489450, i64 3558527186, i64 2918371295, i64 65155283, i64 3469357011, i64 3579773554, i64 2918371295, i64 3494391959, i64 3266584309, i64 3579773554, i64 3837485479, i64 2959420453, i64 1365016881, i64 4082486022, i64 236489012, i64 2959420453, i64 3802558529, i64 2687043642, i64 236489012, i64 2547086826, i64 4185325422, i64 2762854843, i64 3200044912, i64 3664909559, i64 4185325422, i64 3543921700, i64 4240262918, i64 3664909559, i64 2853212443, i64 2618500928, i64 4237264351, i64 1470046497, i64 1893990098, i64 2618500928, i64 2982567031, i64 3017062825, i64 1893990098, i64 3195556801, i64 1868464655, i64 3407681142, i64 1652841784, i64 1678569574, i64 1868464655, i64 4162480901, i64 1477016185, i64 1678569574, i64 4145063890, i64 792188465, i64 4251338402, i64 2219407026, i64 3840340879, i64 792188465, i64 3493367465, i64 2979958414, i64 3840340879, i64 2338974139, i64 478845700, i64 2378167062, i64 882114621, i64 1674533845, i64 478845700, i64 3572905305, i64 3571222880, i64 1674533845, i64 1242316901, i64 2636090868, i64 1972761498, i64 71690719, i64 1228103463, i64 2636090868, i64 1280685025, i64 3741735502, i64 1228103463, i64 994061750, i64 1156725261, i64 1100755307, i64 221922891, i64 2892200461, i64 1156725261, i64 1505716533, i64 2287613563, i64 2892200461, i64 3689457190, i64 1387244644, i64 3135090808, i64 1243609165, i64 1724967466, i64 1387244644, i64 3296353235, i64 1064364031, i64 1724967466, i64 2107521044, i64 2822471992, i64 2034317853, i64 2071407475, i64 170903528, i64 2822471992, i64 1322162887, i64 2524982332, i64 170903528, i64 2656231333, i64 3653936868, i64 3893194049, i64 2484299328, i64 1313746234, i64 3653936868, i64 1705346273, i64 1397638018, i64 1313746234, i64 4015529545, i64 4129760842, i64 1671665759, i64 1677834656, i64 3200005334, i64 4129760842, i64 3486207172, i64 2850728736, i64 3200005334, i64 3076201597, i64 1464411153, i64 277697599, i64 1610723613, i64 32183930, i64 1464411153, i64 1022607788, i64 2824425944, i64 32183930, i64 2093834863, i64 3492361727, i64 1027004383, i64 3167429889, i64 3674905362, i64 3492361727, i64 3572939265, i64 4270409313, i64 3674905362, i64 698814233, i64 880482061, i64 205175925, i64 4070445105, i64 2208329119, i64 880482061, i64 1933248566, i64 3741227945, i64 2208329119, i64 3962062826, i64 4184605179, i64 1189429800, i64 567967482, i64 107217966, i64 4184605179, i64 784865788, i64 549462420, i64 107217966, i64 3134382704, i64 2732536445, i64 1231107067, i64 3374588386, i64 409954030, i64 2732536445, i64 1044831206, i64 3398162498, i64 409954030, i64 3505648581, i64 2169560691, i64 1076348534, i64 637306236, i64 3704346564, i64 2169560691, i64 293694496, i64 632453145, i64 3704346564, i64 1609425246, i64 372115891, i64 3928812480, i64 2830541169, i64 3056527841, i64 372115891, i64 1924239834, i64 3044937468, i64 3056527841, i64 547142630, i64 1660852083, i64 3635660815, i64 1389092450, i64 1025573319, i64 1660852083, i64 3276803366, i64 4036331438, i64 1025573319, i64 4092197741, i64 1360732901, i64 2887812973, i64 4101068693, i64 52572783, i64 1360732901, i64 112458461, i64 2636566855, i64 52572783, i64 1136777988, i64 3455696508, i64 536919193, i64 3978804036, i64 3094157668, i64 3455696508, i64 3821833900, i64 2278849016, i64 3094157668, i64 2531965909, i64 2125991744, i64 890897326, i64 3790557569, i64 1433592392, i64 2125991744, i64 3671109604, i64 808215503, i64 1433592392, i64 2446306581, i64 3524411799, i64 932865240, i64 1838275365, i64 1789634890, i64 3524411799, i64 4130736474, i64 2252266098, i64 1789634890, i64 3048775967, i64 1773339925, i64 948403862, i64 1999624391, i64 983864203, i64 1773339925, i64 3734776305, i64 314407045, i64 983864203, i64 2648614071], align 16

; Function Attrs: convergent norecurse nounwind
define protected amdgpu_kernel void @_Z12setup_kernelP20hiprandStateMRG32k3aj(%struct.hiprandStateMRG32k3a addrspace(1)* nocapture writeonly %0, i32 %1) local_unnamed_addr #0 {
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %5 = shl i32 %4, 8
  %6 = add i32 %5, %3
  %7 = sext i32 %6 to i64
  %8 = icmp eq i32 %1, 0
  %9 = select i1 %8, i32 12345, i32 %1
  %10 = zext i32 %9 to i64
  %11 = xor i32 %9, 1431655765
  %12 = lshr i32 %11, 17
  %13 = zext i32 %12 to i64
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %13, 17
  %16 = sub nsw i64 %14, %15
  %17 = mul nuw nsw i64 %13, %10
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = and i64 %17, 4294967295
  %21 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %19, i64 %20) #2, !srcloc !5
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = icmp ugt i64 %22, 4294967086
  %24 = shl i64 %22, 17
  %25 = add i64 %24, -562949926027264
  %26 = select i1 %23, i64 %25, i64 %24
  %27 = mul i64 %16, %10
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = and i64 %27, 4294967295
  %31 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %29, i64 %30) #2, !srcloc !5
  %32 = extractvalue { i64, i64 } %31, 0
  %33 = icmp ugt i64 %32, 4294967086
  %34 = add i64 %32, -4294967087
  %35 = select i1 %33, i64 %34, i64 %32
  %36 = add nsw i64 %26, %35
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %37 to i32
  %39 = and i64 %36, 4294967295
  %40 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %38, i64 %39) #2, !srcloc !5
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = icmp ugt i64 %41, 4294967086
  %43 = add i64 %41, -4294967087
  %44 = select i1 %42, i64 %43, i64 %41
  %45 = icmp slt i64 %44, 0
  %46 = add nuw nsw i64 %44, 4294967087
  %47 = select i1 %45, i64 %46, i64 %44
  %48 = trunc i64 %47 to i32
  %49 = mul nuw nsw i64 %10, 21845
  %50 = lshr i64 %49, 32
  %51 = trunc i64 %50 to i32
  %52 = and i64 %49, 4294967295
  %53 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %51, i64 %52) #2, !srcloc !5
  %54 = extractvalue { i64, i64 } %53, 0
  %55 = icmp ugt i64 %54, 4294967086
  %56 = shl i64 %54, 17
  %57 = add i64 %56, -562949926027264
  %58 = select i1 %55, i64 %57, i64 %56
  %59 = mul nuw nsw i64 %10, 43690
  %60 = lshr i64 %59, 32
  %61 = trunc i64 %60 to i32
  %62 = and i64 %59, 4294967294
  %63 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %61, i64 %62) #2, !srcloc !5
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = icmp ugt i64 %64, 4294967086
  %66 = add i64 %64, -4294967087
  %67 = select i1 %65, i64 %66, i64 %64
  %68 = add nsw i64 %58, %67
  %69 = lshr i64 %68, 32
  %70 = trunc i64 %69 to i32
  %71 = and i64 %68, 4294967295
  %72 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %70, i64 %71) #2, !srcloc !5
  %73 = extractvalue { i64, i64 } %72, 0
  %74 = icmp ugt i64 %73, 4294967086
  %75 = add i64 %73, -4294967087
  %76 = select i1 %74, i64 %75, i64 %73
  %77 = icmp slt i64 %76, 0
  %78 = add nuw nsw i64 %76, 4294967087
  %79 = select i1 %77, i64 %78, i64 %76
  %80 = trunc i64 %79 to i32
  %81 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %19, i64 %20) #2, !srcloc !5
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = icmp ugt i64 %82, 4294967086
  %84 = shl i64 %82, 17
  %85 = add i64 %84, -562949926027264
  %86 = select i1 %83, i64 %85, i64 %84
  %87 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %29, i64 %30) #2, !srcloc !5
  %88 = extractvalue { i64, i64 } %87, 0
  %89 = icmp ugt i64 %88, 4294967086
  %90 = add i64 %88, -4294967087
  %91 = select i1 %89, i64 %90, i64 %88
  %92 = add nsw i64 %86, %91
  %93 = lshr i64 %92, 32
  %94 = trunc i64 %93 to i32
  %95 = and i64 %92, 4294967295
  %96 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %94, i64 %95) #2, !srcloc !5
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = icmp ugt i64 %97, 4294967086
  %99 = add i64 %97, -4294967087
  %100 = select i1 %98, i64 %99, i64 %97
  %101 = icmp slt i64 %100, 0
  %102 = add nuw nsw i64 %100, 4294967087
  %103 = select i1 %101, i64 %102, i64 %100
  %104 = trunc i64 %103 to i32
  %105 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %51, i64 %52) #2, !srcloc !5
  %106 = extractvalue { i64, i64 } %105, 0
  %107 = lshr i64 %106, 32
  %108 = trunc i64 %107 to i32
  %109 = and i64 %106, 4294967295
  %110 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %108, i64 %109) #2, !srcloc !5
  %111 = extractvalue { i64, i64 } %110, 0
  %112 = icmp ugt i64 %111, 4294944442
  %113 = shl i64 %111, 17
  %114 = add i64 %113, -562946958032896
  %115 = select i1 %112, i64 %114, i64 %113
  %116 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %61, i64 %62) #2, !srcloc !5
  %117 = extractvalue { i64, i64 } %116, 0
  %118 = lshr i64 %117, 32
  %119 = trunc i64 %118 to i32
  %120 = and i64 %117, 4294967295
  %121 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %119, i64 %120) #2, !srcloc !5
  %122 = extractvalue { i64, i64 } %121, 0
  %123 = icmp ugt i64 %122, 4294944442
  %124 = add i64 %122, -4294944443
  %125 = select i1 %123, i64 %124, i64 %122
  %126 = add nsw i64 %125, %115
  %127 = lshr i64 %126, 32
  %128 = trunc i64 %127 to i32
  %129 = and i64 %126, 4294967295
  %130 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %128, i64 %129) #2, !srcloc !5
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = lshr i64 %131, 32
  %133 = trunc i64 %132 to i32
  %134 = and i64 %131, 4294967295
  %135 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %133, i64 %134) #2, !srcloc !5
  %136 = extractvalue { i64, i64 } %135, 0
  %137 = icmp ugt i64 %136, 4294944442
  %138 = add i64 %136, -4294944443
  %139 = select i1 %137, i64 %138, i64 %136
  %140 = icmp slt i64 %139, 0
  %141 = add nuw nsw i64 %139, 4294944443
  %142 = select i1 %140, i64 %141, i64 %139
  %143 = trunc i64 %142 to i32
  %144 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %19, i64 %20) #2, !srcloc !5
  %145 = extractvalue { i64, i64 } %144, 0
  %146 = lshr i64 %145, 32
  %147 = trunc i64 %146 to i32
  %148 = and i64 %145, 4294967295
  %149 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %147, i64 %148) #2, !srcloc !5
  %150 = extractvalue { i64, i64 } %149, 0
  %151 = icmp ugt i64 %150, 4294944442
  %152 = shl i64 %150, 17
  %153 = add i64 %152, -562946958032896
  %154 = select i1 %151, i64 %153, i64 %152
  %155 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %29, i64 %30) #2, !srcloc !5
  %156 = extractvalue { i64, i64 } %155, 0
  %157 = lshr i64 %156, 32
  %158 = trunc i64 %157 to i32
  %159 = and i64 %156, 4294967295
  %160 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %158, i64 %159) #2, !srcloc !5
  %161 = extractvalue { i64, i64 } %160, 0
  %162 = icmp ugt i64 %161, 4294944442
  %163 = add i64 %161, -4294944443
  %164 = select i1 %162, i64 %163, i64 %161
  %165 = add nsw i64 %164, %154
  %166 = lshr i64 %165, 32
  %167 = trunc i64 %166 to i32
  %168 = and i64 %165, 4294967295
  %169 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %167, i64 %168) #2, !srcloc !5
  %170 = extractvalue { i64, i64 } %169, 0
  %171 = lshr i64 %170, 32
  %172 = trunc i64 %171 to i32
  %173 = and i64 %170, 4294967295
  %174 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %172, i64 %173) #2, !srcloc !5
  %175 = extractvalue { i64, i64 } %174, 0
  %176 = icmp ugt i64 %175, 4294944442
  %177 = add i64 %175, -4294944443
  %178 = select i1 %176, i64 %177, i64 %175
  %179 = icmp slt i64 %178, 0
  %180 = add nuw nsw i64 %178, 4294944443
  %181 = select i1 %179, i64 %180, i64 %178
  %182 = trunc i64 %181 to i32
  %183 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %51, i64 %52) #2, !srcloc !5
  %184 = extractvalue { i64, i64 } %183, 0
  %185 = lshr i64 %184, 32
  %186 = trunc i64 %185 to i32
  %187 = and i64 %184, 4294967295
  %188 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %186, i64 %187) #2, !srcloc !5
  %189 = extractvalue { i64, i64 } %188, 0
  %190 = icmp ugt i64 %189, 4294944442
  %191 = shl i64 %189, 17
  %192 = add i64 %191, -562946958032896
  %193 = select i1 %190, i64 %192, i64 %191
  %194 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %61, i64 %62) #2, !srcloc !5
  %195 = extractvalue { i64, i64 } %194, 0
  %196 = lshr i64 %195, 32
  %197 = trunc i64 %196 to i32
  %198 = and i64 %195, 4294967295
  %199 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %197, i64 %198) #2, !srcloc !5
  %200 = extractvalue { i64, i64 } %199, 0
  %201 = icmp ugt i64 %200, 4294944442
  %202 = add i64 %200, -4294944443
  %203 = select i1 %201, i64 %202, i64 %200
  %204 = add nsw i64 %203, %193
  %205 = lshr i64 %204, 32
  %206 = trunc i64 %205 to i32
  %207 = and i64 %204, 4294967295
  %208 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %206, i64 %207) #2, !srcloc !5
  %209 = extractvalue { i64, i64 } %208, 0
  %210 = lshr i64 %209, 32
  %211 = trunc i64 %210 to i32
  %212 = and i64 %209, 4294967295
  %213 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %211, i64 %212) #2, !srcloc !5
  %214 = extractvalue { i64, i64 } %213, 0
  %215 = icmp ugt i64 %214, 4294944442
  %216 = add i64 %214, -4294944443
  %217 = select i1 %215, i64 %216, i64 %214
  %218 = icmp slt i64 %217, 0
  %219 = add nuw nsw i64 %217, 4294944443
  %220 = select i1 %218, i64 %219, i64 %217
  %221 = trunc i64 %220 to i32
  %222 = icmp eq i32 %6, 0
  br i1 %222, label %576, label %223

223:                                              ; preds = %2, %566
  %224 = phi i32 [ %567, %566 ], [ %221, %2 ]
  %225 = phi i32 [ %568, %566 ], [ %182, %2 ]
  %226 = phi i32 [ %569, %566 ], [ %143, %2 ]
  %227 = phi i32 [ %570, %566 ], [ %104, %2 ]
  %228 = phi i32 [ %571, %566 ], [ %80, %2 ]
  %229 = phi i32 [ %572, %566 ], [ %48, %2 ]
  %230 = phi i32 [ %574, %566 ], [ 0, %2 ]
  %231 = phi i64 [ %573, %566 ], [ %7, %2 ]
  %232 = and i64 %231, 1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %566, label %234

234:                                              ; preds = %223
  %235 = zext i32 %230 to i64
  %236 = getelementptr inbounds [576 x i64], [576 x i64] addrspace(4)* @_ZL7d_A1P76, i64 0, i64 %235
  %237 = load i64, i64 addrspace(4)* %236, align 8, !tbaa !6
  %238 = zext i32 %229 to i64
  %239 = mul i64 %237, %238
  %240 = lshr i64 %239, 32
  %241 = trunc i64 %240 to i32
  %242 = and i64 %239, 4294967295
  %243 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %241, i64 %242) #2, !srcloc !5
  %244 = extractvalue { i64, i64 } %243, 0
  %245 = icmp ugt i64 %244, 4294967086
  %246 = add i64 %244, -4294967087
  %247 = select i1 %245, i64 %246, i64 %244
  %248 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 1
  %249 = load i64, i64 addrspace(4)* %248, align 8, !tbaa !6
  %250 = zext i32 %228 to i64
  %251 = mul i64 %249, %250
  %252 = lshr i64 %251, 32
  %253 = trunc i64 %252 to i32
  %254 = and i64 %251, 4294967295
  %255 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %253, i64 %254) #2, !srcloc !5
  %256 = extractvalue { i64, i64 } %255, 0
  %257 = icmp ugt i64 %256, 4294967086
  %258 = add i64 %256, -4294967087
  %259 = select i1 %257, i64 %258, i64 %256
  %260 = add i64 %259, %247
  %261 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 2
  %262 = load i64, i64 addrspace(4)* %261, align 8, !tbaa !6
  %263 = zext i32 %227 to i64
  %264 = mul i64 %262, %263
  %265 = lshr i64 %264, 32
  %266 = trunc i64 %265 to i32
  %267 = and i64 %264, 4294967295
  %268 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %266, i64 %267) #2, !srcloc !5
  %269 = extractvalue { i64, i64 } %268, 0
  %270 = icmp ugt i64 %269, 4294967086
  %271 = add i64 %269, -4294967087
  %272 = select i1 %270, i64 %271, i64 %269
  %273 = add i64 %260, %272
  %274 = lshr i64 %273, 32
  %275 = trunc i64 %274 to i32
  %276 = and i64 %273, 4294967295
  %277 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %275, i64 %276) #2, !srcloc !5
  %278 = extractvalue { i64, i64 } %277, 0
  %279 = icmp ugt i64 %278, 4294967086
  %280 = add i64 %278, 209
  %281 = select i1 %279, i64 %280, i64 %278
  %282 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 3
  %283 = load i64, i64 addrspace(4)* %282, align 8, !tbaa !6
  %284 = mul i64 %283, %238
  %285 = lshr i64 %284, 32
  %286 = trunc i64 %285 to i32
  %287 = and i64 %284, 4294967295
  %288 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %286, i64 %287) #2, !srcloc !5
  %289 = extractvalue { i64, i64 } %288, 0
  %290 = icmp ugt i64 %289, 4294967086
  %291 = add i64 %289, -4294967087
  %292 = select i1 %290, i64 %291, i64 %289
  %293 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 4
  %294 = load i64, i64 addrspace(4)* %293, align 8, !tbaa !6
  %295 = mul i64 %294, %250
  %296 = lshr i64 %295, 32
  %297 = trunc i64 %296 to i32
  %298 = and i64 %295, 4294967295
  %299 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %297, i64 %298) #2, !srcloc !5
  %300 = extractvalue { i64, i64 } %299, 0
  %301 = icmp ugt i64 %300, 4294967086
  %302 = add i64 %300, -4294967087
  %303 = select i1 %301, i64 %302, i64 %300
  %304 = add i64 %303, %292
  %305 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 5
  %306 = load i64, i64 addrspace(4)* %305, align 8, !tbaa !6
  %307 = mul i64 %306, %263
  %308 = lshr i64 %307, 32
  %309 = trunc i64 %308 to i32
  %310 = and i64 %307, 4294967295
  %311 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %309, i64 %310) #2, !srcloc !5
  %312 = extractvalue { i64, i64 } %311, 0
  %313 = icmp ugt i64 %312, 4294967086
  %314 = add i64 %312, -4294967087
  %315 = select i1 %313, i64 %314, i64 %312
  %316 = add i64 %304, %315
  %317 = lshr i64 %316, 32
  %318 = trunc i64 %317 to i32
  %319 = and i64 %316, 4294967295
  %320 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %318, i64 %319) #2, !srcloc !5
  %321 = extractvalue { i64, i64 } %320, 0
  %322 = icmp ugt i64 %321, 4294967086
  %323 = add i64 %321, 209
  %324 = select i1 %322, i64 %323, i64 %321
  %325 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 6
  %326 = load i64, i64 addrspace(4)* %325, align 8, !tbaa !6
  %327 = mul i64 %326, %238
  %328 = lshr i64 %327, 32
  %329 = trunc i64 %328 to i32
  %330 = and i64 %327, 4294967295
  %331 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %329, i64 %330) #2, !srcloc !5
  %332 = extractvalue { i64, i64 } %331, 0
  %333 = icmp ugt i64 %332, 4294967086
  %334 = add i64 %332, -4294967087
  %335 = select i1 %333, i64 %334, i64 %332
  %336 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 7
  %337 = load i64, i64 addrspace(4)* %336, align 8, !tbaa !6
  %338 = mul i64 %337, %250
  %339 = lshr i64 %338, 32
  %340 = trunc i64 %339 to i32
  %341 = and i64 %338, 4294967295
  %342 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %340, i64 %341) #2, !srcloc !5
  %343 = extractvalue { i64, i64 } %342, 0
  %344 = icmp ugt i64 %343, 4294967086
  %345 = add i64 %343, -4294967087
  %346 = select i1 %344, i64 %345, i64 %343
  %347 = add i64 %346, %335
  %348 = getelementptr inbounds i64, i64 addrspace(4)* %236, i64 8
  %349 = load i64, i64 addrspace(4)* %348, align 8, !tbaa !6
  %350 = mul i64 %349, %263
  %351 = lshr i64 %350, 32
  %352 = trunc i64 %351 to i32
  %353 = and i64 %350, 4294967295
  %354 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %352, i64 %353) #2, !srcloc !5
  %355 = extractvalue { i64, i64 } %354, 0
  %356 = icmp ugt i64 %355, 4294967086
  %357 = add i64 %355, -4294967087
  %358 = select i1 %356, i64 %357, i64 %355
  %359 = add i64 %347, %358
  %360 = lshr i64 %359, 32
  %361 = trunc i64 %360 to i32
  %362 = and i64 %359, 4294967295
  %363 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 209, i32 %361, i64 %362) #2, !srcloc !5
  %364 = extractvalue { i64, i64 } %363, 0
  %365 = icmp ugt i64 %364, 4294967086
  %366 = add i64 %364, 209
  %367 = select i1 %365, i64 %366, i64 %364
  %368 = trunc i64 %281 to i32
  %369 = trunc i64 %324 to i32
  %370 = trunc i64 %367 to i32
  %371 = getelementptr inbounds [576 x i64], [576 x i64] addrspace(4)* @_ZL7d_A2P76, i64 0, i64 %235
  %372 = load i64, i64 addrspace(4)* %371, align 8, !tbaa !6
  %373 = zext i32 %226 to i64
  %374 = mul i64 %372, %373
  %375 = lshr i64 %374, 32
  %376 = trunc i64 %375 to i32
  %377 = and i64 %374, 4294967295
  %378 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %376, i64 %377) #2, !srcloc !5
  %379 = extractvalue { i64, i64 } %378, 0
  %380 = lshr i64 %379, 32
  %381 = trunc i64 %380 to i32
  %382 = and i64 %379, 4294967295
  %383 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %381, i64 %382) #2, !srcloc !5
  %384 = extractvalue { i64, i64 } %383, 0
  %385 = icmp ugt i64 %384, 4294944442
  %386 = add i64 %384, -4294944443
  %387 = select i1 %385, i64 %386, i64 %384
  %388 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 1
  %389 = load i64, i64 addrspace(4)* %388, align 8, !tbaa !6
  %390 = zext i32 %225 to i64
  %391 = mul i64 %389, %390
  %392 = lshr i64 %391, 32
  %393 = trunc i64 %392 to i32
  %394 = and i64 %391, 4294967295
  %395 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %393, i64 %394) #2, !srcloc !5
  %396 = extractvalue { i64, i64 } %395, 0
  %397 = lshr i64 %396, 32
  %398 = trunc i64 %397 to i32
  %399 = and i64 %396, 4294967295
  %400 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %398, i64 %399) #2, !srcloc !5
  %401 = extractvalue { i64, i64 } %400, 0
  %402 = icmp ugt i64 %401, 4294944442
  %403 = add i64 %401, -4294944443
  %404 = select i1 %402, i64 %403, i64 %401
  %405 = add i64 %404, %387
  %406 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 2
  %407 = load i64, i64 addrspace(4)* %406, align 8, !tbaa !6
  %408 = zext i32 %224 to i64
  %409 = mul i64 %407, %408
  %410 = lshr i64 %409, 32
  %411 = trunc i64 %410 to i32
  %412 = and i64 %409, 4294967295
  %413 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %411, i64 %412) #2, !srcloc !5
  %414 = extractvalue { i64, i64 } %413, 0
  %415 = lshr i64 %414, 32
  %416 = trunc i64 %415 to i32
  %417 = and i64 %414, 4294967295
  %418 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %416, i64 %417) #2, !srcloc !5
  %419 = extractvalue { i64, i64 } %418, 0
  %420 = icmp ugt i64 %419, 4294944442
  %421 = add i64 %419, -4294944443
  %422 = select i1 %420, i64 %421, i64 %419
  %423 = add i64 %405, %422
  %424 = lshr i64 %423, 32
  %425 = trunc i64 %424 to i32
  %426 = and i64 %423, 4294967295
  %427 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %425, i64 %426) #2, !srcloc !5
  %428 = extractvalue { i64, i64 } %427, 0
  %429 = lshr i64 %428, 32
  %430 = trunc i64 %429 to i32
  %431 = and i64 %428, 4294967295
  %432 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %430, i64 %431) #2, !srcloc !5
  %433 = extractvalue { i64, i64 } %432, 0
  %434 = icmp ugt i64 %433, 4294944442
  %435 = add i64 %433, 22853
  %436 = select i1 %434, i64 %435, i64 %433
  %437 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 3
  %438 = load i64, i64 addrspace(4)* %437, align 8, !tbaa !6
  %439 = mul i64 %438, %373
  %440 = lshr i64 %439, 32
  %441 = trunc i64 %440 to i32
  %442 = and i64 %439, 4294967295
  %443 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %441, i64 %442) #2, !srcloc !5
  %444 = extractvalue { i64, i64 } %443, 0
  %445 = lshr i64 %444, 32
  %446 = trunc i64 %445 to i32
  %447 = and i64 %444, 4294967295
  %448 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %446, i64 %447) #2, !srcloc !5
  %449 = extractvalue { i64, i64 } %448, 0
  %450 = icmp ugt i64 %449, 4294944442
  %451 = add i64 %449, -4294944443
  %452 = select i1 %450, i64 %451, i64 %449
  %453 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 4
  %454 = load i64, i64 addrspace(4)* %453, align 8, !tbaa !6
  %455 = mul i64 %454, %390
  %456 = lshr i64 %455, 32
  %457 = trunc i64 %456 to i32
  %458 = and i64 %455, 4294967295
  %459 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %457, i64 %458) #2, !srcloc !5
  %460 = extractvalue { i64, i64 } %459, 0
  %461 = lshr i64 %460, 32
  %462 = trunc i64 %461 to i32
  %463 = and i64 %460, 4294967295
  %464 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %462, i64 %463) #2, !srcloc !5
  %465 = extractvalue { i64, i64 } %464, 0
  %466 = icmp ugt i64 %465, 4294944442
  %467 = add i64 %465, -4294944443
  %468 = select i1 %466, i64 %467, i64 %465
  %469 = add i64 %468, %452
  %470 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 5
  %471 = load i64, i64 addrspace(4)* %470, align 8, !tbaa !6
  %472 = mul i64 %471, %408
  %473 = lshr i64 %472, 32
  %474 = trunc i64 %473 to i32
  %475 = and i64 %472, 4294967295
  %476 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %474, i64 %475) #2, !srcloc !5
  %477 = extractvalue { i64, i64 } %476, 0
  %478 = lshr i64 %477, 32
  %479 = trunc i64 %478 to i32
  %480 = and i64 %477, 4294967295
  %481 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %479, i64 %480) #2, !srcloc !5
  %482 = extractvalue { i64, i64 } %481, 0
  %483 = icmp ugt i64 %482, 4294944442
  %484 = add i64 %482, -4294944443
  %485 = select i1 %483, i64 %484, i64 %482
  %486 = add i64 %469, %485
  %487 = lshr i64 %486, 32
  %488 = trunc i64 %487 to i32
  %489 = and i64 %486, 4294967295
  %490 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %488, i64 %489) #2, !srcloc !5
  %491 = extractvalue { i64, i64 } %490, 0
  %492 = lshr i64 %491, 32
  %493 = trunc i64 %492 to i32
  %494 = and i64 %491, 4294967295
  %495 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %493, i64 %494) #2, !srcloc !5
  %496 = extractvalue { i64, i64 } %495, 0
  %497 = icmp ugt i64 %496, 4294944442
  %498 = add i64 %496, 22853
  %499 = select i1 %497, i64 %498, i64 %496
  %500 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 6
  %501 = load i64, i64 addrspace(4)* %500, align 8, !tbaa !6
  %502 = mul i64 %501, %373
  %503 = lshr i64 %502, 32
  %504 = trunc i64 %503 to i32
  %505 = and i64 %502, 4294967295
  %506 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %504, i64 %505) #2, !srcloc !5
  %507 = extractvalue { i64, i64 } %506, 0
  %508 = lshr i64 %507, 32
  %509 = trunc i64 %508 to i32
  %510 = and i64 %507, 4294967295
  %511 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %509, i64 %510) #2, !srcloc !5
  %512 = extractvalue { i64, i64 } %511, 0
  %513 = icmp ugt i64 %512, 4294944442
  %514 = add i64 %512, -4294944443
  %515 = select i1 %513, i64 %514, i64 %512
  %516 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 7
  %517 = load i64, i64 addrspace(4)* %516, align 8, !tbaa !6
  %518 = mul i64 %517, %390
  %519 = lshr i64 %518, 32
  %520 = trunc i64 %519 to i32
  %521 = and i64 %518, 4294967295
  %522 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %520, i64 %521) #2, !srcloc !5
  %523 = extractvalue { i64, i64 } %522, 0
  %524 = lshr i64 %523, 32
  %525 = trunc i64 %524 to i32
  %526 = and i64 %523, 4294967295
  %527 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %525, i64 %526) #2, !srcloc !5
  %528 = extractvalue { i64, i64 } %527, 0
  %529 = icmp ugt i64 %528, 4294944442
  %530 = add i64 %528, -4294944443
  %531 = select i1 %529, i64 %530, i64 %528
  %532 = add i64 %531, %515
  %533 = getelementptr inbounds i64, i64 addrspace(4)* %371, i64 8
  %534 = load i64, i64 addrspace(4)* %533, align 8, !tbaa !6
  %535 = mul i64 %534, %408
  %536 = lshr i64 %535, 32
  %537 = trunc i64 %536 to i32
  %538 = and i64 %535, 4294967295
  %539 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %537, i64 %538) #2, !srcloc !5
  %540 = extractvalue { i64, i64 } %539, 0
  %541 = lshr i64 %540, 32
  %542 = trunc i64 %541 to i32
  %543 = and i64 %540, 4294967295
  %544 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %542, i64 %543) #2, !srcloc !5
  %545 = extractvalue { i64, i64 } %544, 0
  %546 = icmp ugt i64 %545, 4294944442
  %547 = add i64 %545, -4294944443
  %548 = select i1 %546, i64 %547, i64 %545
  %549 = add i64 %532, %548
  %550 = lshr i64 %549, 32
  %551 = trunc i64 %550 to i32
  %552 = and i64 %549, 4294967295
  %553 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %551, i64 %552) #2, !srcloc !5
  %554 = extractvalue { i64, i64 } %553, 0
  %555 = lshr i64 %554, 32
  %556 = trunc i64 %555 to i32
  %557 = and i64 %554, 4294967295
  %558 = tail call { i64, i64 } asm sideeffect "v_mad_u64_u32 $0, $1, $2, $3, $4", "=v,=s,r,v,v"(i32 22853, i32 %556, i64 %557) #2, !srcloc !5
  %559 = extractvalue { i64, i64 } %558, 0
  %560 = icmp ugt i64 %559, 4294944442
  %561 = add i64 %559, 22853
  %562 = select i1 %560, i64 %561, i64 %559
  %563 = trunc i64 %436 to i32
  %564 = trunc i64 %499 to i32
  %565 = trunc i64 %562 to i32
  br label %566

566:                                              ; preds = %234, %223
  %567 = phi i32 [ %224, %223 ], [ %565, %234 ]
  %568 = phi i32 [ %225, %223 ], [ %564, %234 ]
  %569 = phi i32 [ %226, %223 ], [ %563, %234 ]
  %570 = phi i32 [ %227, %223 ], [ %370, %234 ]
  %571 = phi i32 [ %228, %223 ], [ %369, %234 ]
  %572 = phi i32 [ %229, %223 ], [ %368, %234 ]
  %573 = lshr i64 %231, 1
  %574 = add nuw nsw i32 %230, 9
  %575 = icmp ult i64 %231, 2
  br i1 %575, label %576, label %223, !llvm.loop !10

576:                                              ; preds = %566, %2
  %577 = phi i32 [ %221, %2 ], [ %567, %566 ]
  %578 = phi i32 [ %182, %2 ], [ %568, %566 ]
  %579 = phi i32 [ %143, %2 ], [ %569, %566 ]
  %580 = phi i32 [ %104, %2 ], [ %570, %566 ]
  %581 = phi i32 [ %80, %2 ], [ %571, %566 ]
  %582 = phi i32 [ %48, %2 ], [ %572, %566 ]
  %583 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 0, i64 0
  store i32 %582, i32 addrspace(1)* %583, align 8, !tbaa.struct !12
  %584 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 0, i64 1
  store i32 %581, i32 addrspace(1)* %584, align 4, !tbaa.struct !20
  %585 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 0, i64 2
  store i32 %580, i32 addrspace(1)* %585, align 8, !tbaa.struct !21
  %586 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 1, i64 0
  store i32 %579, i32 addrspace(1)* %586, align 4, !tbaa.struct !22
  %587 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 1, i64 1
  store i32 %578, i32 addrspace(1)* %587, align 8, !tbaa.struct !23
  %588 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 1, i64 2
  store i32 %577, i32 addrspace(1)* %588, align 4, !tbaa.struct !24
  %589 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 2
  store i32 0, i32 addrspace(1)* %589, align 8, !tbaa.struct !25
  %590 = getelementptr inbounds %struct.hiprandStateMRG32k3a, %struct.hiprandStateMRG32k3a addrspace(1)* %0, i64 %7, i32 0, i32 0, i32 3
  store i32 0, i32 addrspace(1)* %590, align 4, !tbaa.struct !26
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #1

attributes #0 = { convergent norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { convergent nounwind }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{i64 5995706}
!6 = !{!7, !7, i64 0}
!7 = !{!"long long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{i64 0, i64 12, !13, i64 12, i64 12, !13, i64 24, i64 4, !14, i64 28, i64 4, !14, i64 32, i64 4, !16, i64 40, i64 8, !18}
!13 = !{!8, !8, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !8, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"float", !8, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"double", !8, i64 0}
!20 = !{i64 0, i64 8, !13, i64 8, i64 12, !13, i64 20, i64 4, !14, i64 24, i64 4, !14, i64 28, i64 4, !16, i64 36, i64 8, !18}
!21 = !{i64 0, i64 4, !13, i64 4, i64 12, !13, i64 16, i64 4, !14, i64 20, i64 4, !14, i64 24, i64 4, !16, i64 32, i64 8, !18}
!22 = !{i64 0, i64 12, !13, i64 12, i64 4, !14, i64 16, i64 4, !14, i64 20, i64 4, !16, i64 28, i64 8, !18}
!23 = !{i64 0, i64 8, !13, i64 8, i64 4, !14, i64 12, i64 4, !14, i64 16, i64 4, !16, i64 24, i64 8, !18}
!24 = !{i64 0, i64 4, !13, i64 4, i64 4, !14, i64 8, i64 4, !14, i64 12, i64 4, !16, i64 20, i64 8, !18}
!25 = !{i64 0, i64 4, !14, i64 4, i64 4, !14, i64 8, i64 4, !16, i64 16, i64 8, !18}
!26 = !{i64 0, i64 4, !14, i64 4, i64 4, !16, i64 12, i64 8, !18}
