digraph "CFG for '_Z11mean_kernelPfiiiS_' function" {
	label="CFG for '_Z11mean_kernelPfiiiS_' function";

	Node0x52337f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%5:\l  %6 = mul nsw i32 %3, %1\l  %7 = sitofp i32 %6 to double\l  %8 = fdiv contract double 1.000000e+00, %7\l  %9 = fptrunc double %8 to float\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !4\l  %16 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !13, !invariant.load\l... !14\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %15, %19\l  %21 = mul i32 %20, %19\l  %22 = icmp ugt i32 %15, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  %26 = add i32 %25, %10\l  %27 = mul i32 %26, %19\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = icmp slt i32 %29, %2\l  br i1 %30, label %31, label %125\l|{<s0>T|<s1>F}}"];
	Node0x52337f0:s0 -> Node0x5236c70;
	Node0x52337f0:s1 -> Node0x5236d00;
	Node0x5236c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%31:\l31:                                               \l  %32 = sext i32 %29 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %4, i64 %32\l  store float 0.000000e+00, float addrspace(1)* %33, align 4, !tbaa !16\l  %34 = icmp sgt i32 %1, 0\l  br i1 %34, label %35, label %122\l|{<s0>T|<s1>F}}"];
	Node0x5236c70:s0 -> Node0x52372e0;
	Node0x5236c70:s1 -> Node0x5237370;
	Node0x52372e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%35:\l35:                                               \l  %36 = icmp sgt i32 %3, 0\l  %37 = and i32 %3, 7\l  %38 = icmp ult i32 %3, 8\l  %39 = and i32 %3, -8\l  %40 = icmp eq i32 %37, 0\l  br label %41\l}"];
	Node0x52372e0 -> Node0x52377e0;
	Node0x52377e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%41:\l41:                                               \l  %42 = phi float [ 0.000000e+00, %35 ], [ %119, %118 ]\l  %43 = phi i32 [ 0, %35 ], [ %120, %118 ]\l  br i1 %36, label %44, label %118\l|{<s0>T|<s1>F}}"];
	Node0x52377e0:s0 -> Node0x5237b30;
	Node0x52377e0:s1 -> Node0x52378d0;
	Node0x5237b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = mul nsw i32 %43, %2\l  %46 = add i32 %45, %29\l  %47 = mul i32 %46, %3\l  br i1 %38, label %102, label %48\l|{<s0>T|<s1>F}}"];
	Node0x5237b30:s0 -> Node0x5237e20;
	Node0x5237b30:s1 -> Node0x5237e70;
	Node0x5237e70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%48:\l48:                                               \l  %49 = phi float [ %98, %48 ], [ %42, %44 ]\l  %50 = phi i32 [ %99, %48 ], [ 0, %44 ]\l  %51 = phi i32 [ %100, %48 ], [ 0, %44 ]\l  %52 = add nsw i32 %50, %47\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = fadd contract float %55, %49\l  store float %56, float addrspace(1)* %33, align 4, !tbaa !16\l  %57 = or i32 %50, 1\l  %58 = add nsw i32 %57, %47\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !16\l  %62 = fadd contract float %61, %56\l  store float %62, float addrspace(1)* %33, align 4, !tbaa !16\l  %63 = or i32 %50, 2\l  %64 = add nsw i32 %63, %47\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16\l  %68 = fadd contract float %67, %62\l  store float %68, float addrspace(1)* %33, align 4, !tbaa !16\l  %69 = or i32 %50, 3\l  %70 = add nsw i32 %69, %47\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16\l  %74 = fadd contract float %73, %68\l  store float %74, float addrspace(1)* %33, align 4, !tbaa !16\l  %75 = or i32 %50, 4\l  %76 = add nsw i32 %75, %47\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !16\l  %80 = fadd contract float %79, %74\l  store float %80, float addrspace(1)* %33, align 4, !tbaa !16\l  %81 = or i32 %50, 5\l  %82 = add nsw i32 %81, %47\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16\l  %86 = fadd contract float %85, %80\l  store float %86, float addrspace(1)* %33, align 4, !tbaa !16\l  %87 = or i32 %50, 6\l  %88 = add nsw i32 %87, %47\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !16\l  %92 = fadd contract float %91, %86\l  store float %92, float addrspace(1)* %33, align 4, !tbaa !16\l  %93 = or i32 %50, 7\l  %94 = add nsw i32 %93, %47\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16\l  %98 = fadd contract float %97, %92\l  store float %98, float addrspace(1)* %33, align 4, !tbaa !16\l  %99 = add nuw nsw i32 %50, 8\l  %100 = add i32 %51, 8\l  %101 = icmp eq i32 %100, %39\l  br i1 %101, label %102, label %48, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5237e70:s0 -> Node0x5237e20;
	Node0x5237e70:s1 -> Node0x5237e70;
	Node0x5237e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%102:\l102:                                              \l  %103 = phi float [ undef, %44 ], [ %98, %48 ]\l  %104 = phi float [ %42, %44 ], [ %98, %48 ]\l  %105 = phi i32 [ 0, %44 ], [ %99, %48 ]\l  br i1 %40, label %118, label %106\l|{<s0>T|<s1>F}}"];
	Node0x5237e20:s0 -> Node0x52378d0;
	Node0x5237e20:s1 -> Node0x523b2a0;
	Node0x523b2a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi float [ %114, %106 ], [ %104, %102 ]\l  %108 = phi i32 [ %115, %106 ], [ %105, %102 ]\l  %109 = phi i32 [ %116, %106 ], [ 0, %102 ]\l  %110 = add nsw i32 %108, %47\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !16\l  %114 = fadd contract float %113, %107\l  store float %114, float addrspace(1)* %33, align 4, !tbaa !16\l  %115 = add nuw nsw i32 %108, 1\l  %116 = add i32 %109, 1\l  %117 = icmp eq i32 %116, %37\l  br i1 %117, label %118, label %106, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x523b2a0:s0 -> Node0x52378d0;
	Node0x523b2a0:s1 -> Node0x523b2a0;
	Node0x52378d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%118:\l118:                                              \l  %119 = phi float [ %42, %41 ], [ %103, %102 ], [ %114, %106 ]\l  %120 = add nuw nsw i32 %43, 1\l  %121 = icmp eq i32 %120, %1\l  br i1 %121, label %122, label %41, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x52378d0:s0 -> Node0x5237370;
	Node0x52378d0:s1 -> Node0x52377e0;
	Node0x5237370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%122:\l122:                                              \l  %123 = phi float [ 0.000000e+00, %31 ], [ %119, %118 ]\l  %124 = fmul contract float %123, %9\l  store float %124, float addrspace(1)* %33, align 4, !tbaa !16\l  br label %125\l}"];
	Node0x5237370 -> Node0x5236d00;
	Node0x5236d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%125:\l125:                                              \l  ret void\l}"];
}
