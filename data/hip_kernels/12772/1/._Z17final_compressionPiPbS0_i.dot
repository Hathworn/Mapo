digraph "CFG for '_Z17final_compressionPiPbS0_i' function" {
	label="CFG for '_Z17final_compressionPiPbS0_i' function";

	Node0x4beff60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = mul i32 %13, 255\l  %15 = icmp slt i32 %13, %3\l  br i1 %15, label %16, label %183\l|{<s0>T|<s1>F}}"];
	Node0x4beff60:s0 -> Node0x4bf1f00;
	Node0x4beff60:s1 -> Node0x4bf1f90;
	Node0x4bf1f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %13, 0\l  br i1 %17, label %18, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4bf1f00:s0 -> Node0x4bf0b40;
	Node0x4bf1f00:s1 -> Node0x4bf2270;
	Node0x4bf0b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = add i32 %12, %11\l  %20 = add i32 %19, -1\l  %21 = and i32 %13, 7\l  %22 = icmp ult i32 %20, 7\l  br i1 %22, label %25, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4bf0b40:s0 -> Node0x4bf2650;
	Node0x4bf0b40:s1 -> Node0x4bf26a0;
	Node0x4bf26a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %13, -8\l  br label %52\l}"];
	Node0x4bf26a0 -> Node0x4bf28a0;
	Node0x4bf2650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%25:\l25:                                               \l  %26 = phi i32 [ undef, %18 ], [ %94, %52 ]\l  %27 = phi i32 [ 0, %18 ], [ %95, %52 ]\l  %28 = phi i32 [ 0, %18 ], [ %94, %52 ]\l  %29 = icmp eq i32 %21, 0\l  br i1 %29, label %41, label %30\l|{<s0>T|<s1>F}}"];
	Node0x4bf2650:s0 -> Node0x4bf2270;
	Node0x4bf2650:s1 -> Node0x4bf30c0;
	Node0x4bf30c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%30:\l30:                                               \l  %31 = phi i32 [ %38, %30 ], [ %27, %25 ]\l  %32 = phi i32 [ %37, %30 ], [ %28, %25 ]\l  %33 = phi i32 [ %39, %30 ], [ 0, %25 ]\l  %34 = zext i32 %31 to i64\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %34\l  %36 = load i32, i32 addrspace(1)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %37 = add nsw i32 %36, %32\l  %38 = add nuw nsw i32 %31, 1\l  %39 = add i32 %33, 1\l  %40 = icmp eq i32 %39, %21\l  br i1 %40, label %41, label %30, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4bf30c0:s0 -> Node0x4bf2270;
	Node0x4bf30c0:s1 -> Node0x4bf30c0;
	Node0x4bf2270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%41:\l41:                                               \l  %42 = phi i32 [ 0, %16 ], [ %26, %25 ], [ %37, %30 ]\l  %43 = sext i32 %13 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %46 = icmp sgt i32 %45, 0\l  br i1 %46, label %47, label %183\l|{<s0>T|<s1>F}}"];
	Node0x4bf2270:s0 -> Node0x4bf4be0;
	Node0x4bf2270:s1 -> Node0x4bf1f90;
	Node0x4bf4be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%47:\l47:                                               \l  %48 = and i32 %45, 7\l  %49 = icmp ult i32 %45, 8\l  br i1 %49, label %167, label %50\l|{<s0>T|<s1>F}}"];
	Node0x4bf4be0:s0 -> Node0x4bf4e40;
	Node0x4bf4be0:s1 -> Node0x4bf4e90;
	Node0x4bf4e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%50:\l50:                                               \l  %51 = and i32 %45, -8\l  br label %98\l}"];
	Node0x4bf4e90 -> Node0x4bf5060;
	Node0x4bf28a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%52:\l52:                                               \l  %53 = phi i32 [ 0, %23 ], [ %95, %52 ]\l  %54 = phi i32 [ 0, %23 ], [ %94, %52 ]\l  %55 = phi i32 [ 0, %23 ], [ %96, %52 ]\l  %56 = zext i32 %53 to i64\l  %57 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %56\l  %58 = load i32, i32 addrspace(1)* %57, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %59 = add nsw i32 %58, %54\l  %60 = or i32 %53, 1\l  %61 = zext i32 %60 to i64\l  %62 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %61\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %64 = add nsw i32 %63, %59\l  %65 = or i32 %53, 2\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %66\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %69 = add nsw i32 %68, %64\l  %70 = or i32 %53, 3\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %71\l  %73 = load i32, i32 addrspace(1)* %72, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %74 = add nsw i32 %73, %69\l  %75 = or i32 %53, 4\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %76\l  %78 = load i32, i32 addrspace(1)* %77, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %79 = add nsw i32 %78, %74\l  %80 = or i32 %53, 5\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %81\l  %83 = load i32, i32 addrspace(1)* %82, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %84 = add nsw i32 %83, %79\l  %85 = or i32 %53, 6\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %86\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %89 = add nsw i32 %88, %84\l  %90 = or i32 %53, 7\l  %91 = zext i32 %90 to i64\l  %92 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %91\l  %93 = load i32, i32 addrspace(1)* %92, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %94 = add nsw i32 %93, %89\l  %95 = add nuw nsw i32 %53, 8\l  %96 = add i32 %55, 8\l  %97 = icmp eq i32 %96, %24\l  br i1 %97, label %25, label %52, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4bf28a0:s0 -> Node0x4bf2650;
	Node0x4bf28a0:s1 -> Node0x4bf28a0;
	Node0x4bf5060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%98:\l98:                                               \l  %99 = phi i32 [ 0, %50 ], [ %164, %98 ]\l  %100 = phi i32 [ 0, %50 ], [ %165, %98 ]\l  %101 = add nsw i32 %99, %14\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %102\l  %104 = load i8, i8 addrspace(1)* %103, align 1, !tbaa !15, !range !17\l  %105 = add nsw i32 %99, %42\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %106\l  store i8 %104, i8 addrspace(1)* %107, align 1, !tbaa !15\l  %108 = or i32 %99, 1\l  %109 = add nsw i32 %108, %14\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %110\l  %112 = load i8, i8 addrspace(1)* %111, align 1, !tbaa !15, !range !17\l  %113 = add nsw i32 %108, %42\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %114\l  store i8 %112, i8 addrspace(1)* %115, align 1, !tbaa !15\l  %116 = or i32 %99, 2\l  %117 = add nsw i32 %116, %14\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %118\l  %120 = load i8, i8 addrspace(1)* %119, align 1, !tbaa !15, !range !17\l  %121 = add nsw i32 %116, %42\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %122\l  store i8 %120, i8 addrspace(1)* %123, align 1, !tbaa !15\l  %124 = or i32 %99, 3\l  %125 = add nsw i32 %124, %14\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %126\l  %128 = load i8, i8 addrspace(1)* %127, align 1, !tbaa !15, !range !17\l  %129 = add nsw i32 %124, %42\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %130\l  store i8 %128, i8 addrspace(1)* %131, align 1, !tbaa !15\l  %132 = or i32 %99, 4\l  %133 = add nsw i32 %132, %14\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %134\l  %136 = load i8, i8 addrspace(1)* %135, align 1, !tbaa !15, !range !17\l  %137 = add nsw i32 %132, %42\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %138\l  store i8 %136, i8 addrspace(1)* %139, align 1, !tbaa !15\l  %140 = or i32 %99, 5\l  %141 = add nsw i32 %140, %14\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %142\l  %144 = load i8, i8 addrspace(1)* %143, align 1, !tbaa !15, !range !17\l  %145 = add nsw i32 %140, %42\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %146\l  store i8 %144, i8 addrspace(1)* %147, align 1, !tbaa !15\l  %148 = or i32 %99, 6\l  %149 = add nsw i32 %148, %14\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %150\l  %152 = load i8, i8 addrspace(1)* %151, align 1, !tbaa !15, !range !17\l  %153 = add nsw i32 %148, %42\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %154\l  store i8 %152, i8 addrspace(1)* %155, align 1, !tbaa !15\l  %156 = or i32 %99, 7\l  %157 = add nsw i32 %156, %14\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %158\l  %160 = load i8, i8 addrspace(1)* %159, align 1, !tbaa !15, !range !17\l  %161 = add nsw i32 %156, %42\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %162\l  store i8 %160, i8 addrspace(1)* %163, align 1, !tbaa !15\l  %164 = add nuw nsw i32 %99, 8\l  %165 = add i32 %100, 8\l  %166 = icmp eq i32 %165, %51\l  br i1 %166, label %167, label %98, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4bf5060:s0 -> Node0x4bf4e40;
	Node0x4bf5060:s1 -> Node0x4bf5060;
	Node0x4bf4e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%167:\l167:                                              \l  %168 = phi i32 [ 0, %47 ], [ %164, %98 ]\l  %169 = icmp eq i32 %48, 0\l  br i1 %169, label %183, label %170\l|{<s0>T|<s1>F}}"];
	Node0x4bf4e40:s0 -> Node0x4bf1f90;
	Node0x4bf4e40:s1 -> Node0x4bfb000;
	Node0x4bfb000 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%170:\l170:                                              \l  %171 = phi i32 [ %180, %170 ], [ %168, %167 ]\l  %172 = phi i32 [ %181, %170 ], [ 0, %167 ]\l  %173 = add nsw i32 %171, %14\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %174\l  %176 = load i8, i8 addrspace(1)* %175, align 1, !tbaa !15, !range !17\l  %177 = add nsw i32 %171, %42\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %178\l  store i8 %176, i8 addrspace(1)* %179, align 1, !tbaa !15\l  %180 = add nuw nsw i32 %171, 1\l  %181 = add i32 %172, 1\l  %182 = icmp eq i32 %181, %48\l  br i1 %182, label %183, label %170, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4bfb000:s0 -> Node0x4bf1f90;
	Node0x4bfb000:s1 -> Node0x4bfb000;
	Node0x4bf1f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%183:\l183:                                              \l  ret void\l}"];
}
