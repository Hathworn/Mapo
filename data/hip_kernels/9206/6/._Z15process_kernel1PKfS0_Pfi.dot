digraph "CFG for '_Z15process_kernel1PKfS0_Pfi' function" {
	label="CFG for '_Z15process_kernel1PKfS0_Pfi' function";

	Node0x6496430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 4, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 16\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 8, !tbaa !15\l  %22 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !13, !invariant.load\l... !14\l  %25 = zext i16 %24 to i32\l  %26 = udiv i32 %21, %25\l  %27 = mul i32 %26, %25\l  %28 = icmp ugt i32 %21, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = mul i32 %30, %5\l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %33 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %34 = add i32 %31, %32\l  %35 = mul i32 %34, %18\l  %36 = add i32 %35, %33\l  %37 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %38 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %39 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %40 = getelementptr i8, i8 addrspace(4)* %6, i64 8\l  %41 = bitcast i8 addrspace(4)* %40 to i16 addrspace(4)*\l  %42 = load i16, i16 addrspace(4)* %41, align 4, !range !13, !invariant.load\l... !14\l  %43 = zext i16 %42 to i32\l  %44 = mul i32 %36, %43\l  %45 = add i32 %44, %37\l  %46 = mul i32 %45, %25\l  %47 = add i32 %46, %38\l  %48 = mul i32 %47, %13\l  %49 = add i32 %48, %39\l  %50 = icmp slt i32 %49, %3\l  br i1 %50, label %51, label %339\l|{<s0>T|<s1>F}}"];
	Node0x6496430:s0 -> Node0x649b400;
	Node0x6496430:s1 -> Node0x649b490;
	Node0x649b400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%51:\l51:                                               \l  %52 = sext i32 %49 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !17,\l... !amdgpu.noclobber !14\l  %55 = tail call float @llvm.fabs.f32(float %54)\l  %56 = fcmp olt float %55, 1.310720e+05\l  br i1 %56, label %57, label %65\l|{<s0>T|<s1>F}}"];
	Node0x649b400:s0 -> Node0x649c570;
	Node0x649b400:s1 -> Node0x649c600;
	Node0x649c570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%57:\l57:                                               \l  %58 = fmul float %55, 0x3FE45F3060000000\l  %59 = tail call float @llvm.rint.f32(float %58)\l  %60 = tail call float @llvm.fma.f32(float %59, float 0xBFF921FB40000000,\l... float %55)\l  %61 = tail call float @llvm.fma.f32(float %59, float 0xBE74442D00000000,\l... float %60)\l  %62 = tail call float @llvm.fma.f32(float %59, float 0xBCF8469880000000,\l... float %61)\l  %63 = fptosi float %59 to i32\l  %64 = bitcast float %55 to i32\l  br label %171\l}"];
	Node0x649c570 -> Node0x6499b00;
	Node0x649c600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%65:\l65:                                               \l  %66 = bitcast float %55 to i32\l  %67 = lshr i32 %66, 23\l  %68 = and i32 %66, 8388607\l  %69 = or i32 %68, 8388608\l  %70 = zext i32 %69 to i64\l  %71 = mul nuw nsw i64 %70, 4266746795\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = mul nuw nsw i64 %70, 1011060801\l  %75 = add nuw nsw i64 %73, %74\l  %76 = trunc i64 %75 to i32\l  %77 = lshr i64 %75, 32\l  %78 = mul nuw nsw i64 %70, 3680671129\l  %79 = add nuw nsw i64 %77, %78\l  %80 = trunc i64 %79 to i32\l  %81 = lshr i64 %79, 32\l  %82 = mul nuw nsw i64 %70, 4113882560\l  %83 = add nuw nsw i64 %81, %82\l  %84 = trunc i64 %83 to i32\l  %85 = lshr i64 %83, 32\l  %86 = mul nuw nsw i64 %70, 4230436817\l  %87 = add nuw nsw i64 %85, %86\l  %88 = trunc i64 %87 to i32\l  %89 = lshr i64 %87, 32\l  %90 = mul nuw nsw i64 %70, 1313084713\l  %91 = add nuw nsw i64 %89, %90\l  %92 = trunc i64 %91 to i32\l  %93 = lshr i64 %91, 32\l  %94 = mul nuw nsw i64 %70, 2734261102\l  %95 = add nuw nsw i64 %93, %94\l  %96 = trunc i64 %95 to i32\l  %97 = lshr i64 %95, 32\l  %98 = trunc i64 %97 to i32\l  %99 = add nsw i32 %67, -120\l  %100 = icmp ugt i32 %99, 63\l  %101 = select i1 %100, i32 %92, i32 %98\l  %102 = select i1 %100, i32 %88, i32 %96\l  %103 = select i1 %100, i32 %84, i32 %92\l  %104 = select i1 %100, i32 %80, i32 %88\l  %105 = select i1 %100, i32 %76, i32 %84\l  %106 = select i1 %100, i32 %72, i32 %80\l  %107 = select i1 %100, i32 -64, i32 0\l  %108 = add nsw i32 %107, %99\l  %109 = icmp ugt i32 %108, 31\l  %110 = select i1 %109, i32 %102, i32 %101\l  %111 = select i1 %109, i32 %103, i32 %102\l  %112 = select i1 %109, i32 %104, i32 %103\l  %113 = select i1 %109, i32 %105, i32 %104\l  %114 = select i1 %109, i32 %106, i32 %105\l  %115 = select i1 %109, i32 -32, i32 0\l  %116 = add nsw i32 %115, %108\l  %117 = icmp ugt i32 %116, 31\l  %118 = select i1 %117, i32 %111, i32 %110\l  %119 = select i1 %117, i32 %112, i32 %111\l  %120 = select i1 %117, i32 %113, i32 %112\l  %121 = select i1 %117, i32 %114, i32 %113\l  %122 = select i1 %117, i32 -32, i32 0\l  %123 = add nsw i32 %122, %116\l  %124 = icmp eq i32 %123, 0\l  %125 = sub nsw i32 32, %123\l  %126 = tail call i32 @llvm.fshr.i32(i32 %118, i32 %119, i32 %125)\l  %127 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %120, i32 %125)\l  %128 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %125)\l  %129 = select i1 %124, i32 %118, i32 %126\l  %130 = select i1 %124, i32 %119, i32 %127\l  %131 = select i1 %124, i32 %120, i32 %128\l  %132 = lshr i32 %129, 29\l  %133 = tail call i32 @llvm.fshl.i32(i32 %129, i32 %130, i32 2)\l  %134 = tail call i32 @llvm.fshl.i32(i32 %130, i32 %131, i32 2)\l  %135 = tail call i32 @llvm.fshl.i32(i32 %131, i32 %121, i32 2)\l  %136 = and i32 %132, 1\l  %137 = sub nsw i32 0, %136\l  %138 = shl i32 %132, 31\l  %139 = xor i32 %133, %137\l  %140 = xor i32 %134, %137\l  %141 = xor i32 %135, %137\l  %142 = tail call i32 @llvm.ctlz.i32(i32 %139, i1 false), !range !21\l  %143 = sub nsw i32 31, %142\l  %144 = tail call i32 @llvm.fshr.i32(i32 %139, i32 %140, i32 %143)\l  %145 = tail call i32 @llvm.fshr.i32(i32 %140, i32 %141, i32 %143)\l  %146 = shl nuw nsw i32 %142, 23\l  %147 = sub nuw nsw i32 1056964608, %146\l  %148 = lshr i32 %144, 9\l  %149 = or i32 %148, %147\l  %150 = or i32 %149, %138\l  %151 = bitcast i32 %150 to float\l  %152 = tail call i32 @llvm.fshl.i32(i32 %144, i32 %145, i32 23)\l  %153 = tail call i32 @llvm.ctlz.i32(i32 %152, i1 false), !range !21\l  %154 = fmul float %151, 0x3FF921FB40000000\l  %155 = add nuw nsw i32 %153, %142\l  %156 = shl nuw nsw i32 %155, 23\l  %157 = sub nuw nsw i32 855638016, %156\l  %158 = sub nsw i32 31, %153\l  %159 = tail call i32 @llvm.fshr.i32(i32 %152, i32 %145, i32 %158)\l  %160 = lshr i32 %159, 9\l  %161 = or i32 %157, %160\l  %162 = or i32 %161, %138\l  %163 = bitcast i32 %162 to float\l  %164 = fneg float %154\l  %165 = tail call float @llvm.fma.f32(float %151, float 0x3FF921FB40000000,\l... float %164)\l  %166 = tail call float @llvm.fma.f32(float %151, float 0x3E74442D00000000,\l... float %165)\l  %167 = tail call float @llvm.fma.f32(float %163, float 0x3FF921FB40000000,\l... float %166)\l  %168 = fadd float %154, %167\l  %169 = lshr i32 %129, 30\l  %170 = add nuw nsw i32 %136, %169\l  br label %171\l}"];
	Node0x649c600 -> Node0x6499b00;
	Node0x6499b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%171:\l171:                                              \l  %172 = phi i32 [ %64, %57 ], [ %66, %65 ]\l  %173 = phi float [ %62, %57 ], [ %168, %65 ]\l  %174 = phi i32 [ %63, %57 ], [ %170, %65 ]\l  %175 = fmul float %173, %173\l  %176 = tail call float @llvm.fmuladd.f32(float %175, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %177 = tail call float @llvm.fmuladd.f32(float %175, float %176, float\l... 0xBFC55553A0000000)\l  %178 = fmul float %175, %177\l  %179 = tail call float @llvm.fmuladd.f32(float %173, float %178, float %173)\l  %180 = tail call float @llvm.fmuladd.f32(float %175, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %181 = tail call float @llvm.fmuladd.f32(float %175, float %180, float\l... 0x3FA5557EE0000000)\l  %182 = tail call float @llvm.fmuladd.f32(float %175, float %181, float\l... 0xBFE0000080000000)\l  %183 = tail call float @llvm.fmuladd.f32(float %175, float %182, float\l... 1.000000e+00)\l  %184 = and i32 %174, 1\l  %185 = icmp eq i32 %184, 0\l  %186 = select i1 %185, float %179, float %183\l  %187 = bitcast float %186 to i32\l  %188 = shl i32 %174, 30\l  %189 = and i32 %188, -2147483648\l  %190 = bitcast float %54 to i32\l  %191 = xor i32 %172, %190\l  %192 = xor i32 %191, %189\l  %193 = xor i32 %192, %187\l  %194 = bitcast i32 %193 to float\l  %195 = tail call i1 @llvm.amdgcn.class.f32(float %55, i32 504)\l  %196 = select i1 %195, float %194, float 0x7FF8000000000000\l  %197 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %198 = load float, float addrspace(1)* %197, align 4, !tbaa !17,\l... !amdgpu.noclobber !14\l  %199 = tail call float @llvm.fabs.f32(float %198)\l  %200 = fcmp olt float %199, 1.310720e+05\l  br i1 %200, label %201, label %208\l|{<s0>T|<s1>F}}"];
	Node0x6499b00:s0 -> Node0x64a4e90;
	Node0x6499b00:s1 -> Node0x64a4f20;
	Node0x64a4e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%201:\l201:                                              \l  %202 = fmul float %199, 0x3FE45F3060000000\l  %203 = tail call float @llvm.rint.f32(float %202)\l  %204 = tail call float @llvm.fma.f32(float %203, float 0xBFF921FB40000000,\l... float %199)\l  %205 = tail call float @llvm.fma.f32(float %203, float 0xBE74442D00000000,\l... float %204)\l  %206 = tail call float @llvm.fma.f32(float %203, float 0xBCF8469880000000,\l... float %205)\l  %207 = fptosi float %203 to i32\l  br label %314\l}"];
	Node0x64a4e90 -> Node0x64a55e0;
	Node0x64a4f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%208:\l208:                                              \l  %209 = bitcast float %199 to i32\l  %210 = lshr i32 %209, 23\l  %211 = and i32 %209, 8388607\l  %212 = or i32 %211, 8388608\l  %213 = zext i32 %212 to i64\l  %214 = mul nuw nsw i64 %213, 4266746795\l  %215 = trunc i64 %214 to i32\l  %216 = lshr i64 %214, 32\l  %217 = mul nuw nsw i64 %213, 1011060801\l  %218 = add nuw nsw i64 %216, %217\l  %219 = trunc i64 %218 to i32\l  %220 = lshr i64 %218, 32\l  %221 = mul nuw nsw i64 %213, 3680671129\l  %222 = add nuw nsw i64 %220, %221\l  %223 = trunc i64 %222 to i32\l  %224 = lshr i64 %222, 32\l  %225 = mul nuw nsw i64 %213, 4113882560\l  %226 = add nuw nsw i64 %224, %225\l  %227 = trunc i64 %226 to i32\l  %228 = lshr i64 %226, 32\l  %229 = mul nuw nsw i64 %213, 4230436817\l  %230 = add nuw nsw i64 %228, %229\l  %231 = trunc i64 %230 to i32\l  %232 = lshr i64 %230, 32\l  %233 = mul nuw nsw i64 %213, 1313084713\l  %234 = add nuw nsw i64 %232, %233\l  %235 = trunc i64 %234 to i32\l  %236 = lshr i64 %234, 32\l  %237 = mul nuw nsw i64 %213, 2734261102\l  %238 = add nuw nsw i64 %236, %237\l  %239 = trunc i64 %238 to i32\l  %240 = lshr i64 %238, 32\l  %241 = trunc i64 %240 to i32\l  %242 = add nsw i32 %210, -120\l  %243 = icmp ugt i32 %242, 63\l  %244 = select i1 %243, i32 %235, i32 %241\l  %245 = select i1 %243, i32 %231, i32 %239\l  %246 = select i1 %243, i32 %227, i32 %235\l  %247 = select i1 %243, i32 %223, i32 %231\l  %248 = select i1 %243, i32 %219, i32 %227\l  %249 = select i1 %243, i32 %215, i32 %223\l  %250 = select i1 %243, i32 -64, i32 0\l  %251 = add nsw i32 %250, %242\l  %252 = icmp ugt i32 %251, 31\l  %253 = select i1 %252, i32 %245, i32 %244\l  %254 = select i1 %252, i32 %246, i32 %245\l  %255 = select i1 %252, i32 %247, i32 %246\l  %256 = select i1 %252, i32 %248, i32 %247\l  %257 = select i1 %252, i32 %249, i32 %248\l  %258 = select i1 %252, i32 -32, i32 0\l  %259 = add nsw i32 %258, %251\l  %260 = icmp ugt i32 %259, 31\l  %261 = select i1 %260, i32 %254, i32 %253\l  %262 = select i1 %260, i32 %255, i32 %254\l  %263 = select i1 %260, i32 %256, i32 %255\l  %264 = select i1 %260, i32 %257, i32 %256\l  %265 = select i1 %260, i32 -32, i32 0\l  %266 = add nsw i32 %265, %259\l  %267 = icmp eq i32 %266, 0\l  %268 = sub nsw i32 32, %266\l  %269 = tail call i32 @llvm.fshr.i32(i32 %261, i32 %262, i32 %268)\l  %270 = tail call i32 @llvm.fshr.i32(i32 %262, i32 %263, i32 %268)\l  %271 = tail call i32 @llvm.fshr.i32(i32 %263, i32 %264, i32 %268)\l  %272 = select i1 %267, i32 %261, i32 %269\l  %273 = select i1 %267, i32 %262, i32 %270\l  %274 = select i1 %267, i32 %263, i32 %271\l  %275 = lshr i32 %272, 29\l  %276 = tail call i32 @llvm.fshl.i32(i32 %272, i32 %273, i32 2)\l  %277 = tail call i32 @llvm.fshl.i32(i32 %273, i32 %274, i32 2)\l  %278 = tail call i32 @llvm.fshl.i32(i32 %274, i32 %264, i32 2)\l  %279 = and i32 %275, 1\l  %280 = sub nsw i32 0, %279\l  %281 = shl i32 %275, 31\l  %282 = xor i32 %276, %280\l  %283 = xor i32 %277, %280\l  %284 = xor i32 %278, %280\l  %285 = tail call i32 @llvm.ctlz.i32(i32 %282, i1 false), !range !21\l  %286 = sub nsw i32 31, %285\l  %287 = tail call i32 @llvm.fshr.i32(i32 %282, i32 %283, i32 %286)\l  %288 = tail call i32 @llvm.fshr.i32(i32 %283, i32 %284, i32 %286)\l  %289 = shl nuw nsw i32 %285, 23\l  %290 = sub nuw nsw i32 1056964608, %289\l  %291 = lshr i32 %287, 9\l  %292 = or i32 %291, %290\l  %293 = or i32 %292, %281\l  %294 = bitcast i32 %293 to float\l  %295 = tail call i32 @llvm.fshl.i32(i32 %287, i32 %288, i32 23)\l  %296 = tail call i32 @llvm.ctlz.i32(i32 %295, i1 false), !range !21\l  %297 = fmul float %294, 0x3FF921FB40000000\l  %298 = add nuw nsw i32 %296, %285\l  %299 = shl nuw nsw i32 %298, 23\l  %300 = sub nuw nsw i32 855638016, %299\l  %301 = sub nsw i32 31, %296\l  %302 = tail call i32 @llvm.fshr.i32(i32 %295, i32 %288, i32 %301)\l  %303 = lshr i32 %302, 9\l  %304 = or i32 %300, %303\l  %305 = or i32 %304, %281\l  %306 = bitcast i32 %305 to float\l  %307 = fneg float %297\l  %308 = tail call float @llvm.fma.f32(float %294, float 0x3FF921FB40000000,\l... float %307)\l  %309 = tail call float @llvm.fma.f32(float %294, float 0x3E74442D00000000,\l... float %308)\l  %310 = tail call float @llvm.fma.f32(float %306, float 0x3FF921FB40000000,\l... float %309)\l  %311 = fadd float %297, %310\l  %312 = lshr i32 %272, 30\l  %313 = add nuw nsw i32 %279, %312\l  br label %314\l}"];
	Node0x64a4f20 -> Node0x64a55e0;
	Node0x64a55e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%314:\l314:                                              \l  %315 = phi float [ %206, %201 ], [ %311, %208 ]\l  %316 = phi i32 [ %207, %201 ], [ %313, %208 ]\l  %317 = fmul float %315, %315\l  %318 = tail call float @llvm.fmuladd.f32(float %317, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %319 = tail call float @llvm.fmuladd.f32(float %317, float %318, float\l... 0xBFC55553A0000000)\l  %320 = fmul float %317, %319\l  %321 = tail call float @llvm.fmuladd.f32(float %315, float %320, float %315)\l  %322 = tail call float @llvm.fmuladd.f32(float %317, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %323 = tail call float @llvm.fmuladd.f32(float %317, float %322, float\l... 0x3FA5557EE0000000)\l  %324 = tail call float @llvm.fmuladd.f32(float %317, float %323, float\l... 0xBFE0000080000000)\l  %325 = tail call float @llvm.fmuladd.f32(float %317, float %324, float\l... 1.000000e+00)\l  %326 = fneg float %321\l  %327 = and i32 %316, 1\l  %328 = icmp eq i32 %327, 0\l  %329 = select i1 %328, float %325, float %326\l  %330 = bitcast float %329 to i32\l  %331 = shl i32 %316, 30\l  %332 = and i32 %331, -2147483648\l  %333 = xor i32 %332, %330\l  %334 = bitcast i32 %333 to float\l  %335 = tail call i1 @llvm.amdgcn.class.f32(float %199, i32 504)\l  %336 = select i1 %335, float %334, float 0x7FF8000000000000\l  %337 = fadd contract float %196, %336\l  %338 = getelementptr inbounds float, float addrspace(1)* %2, i64 %52\l  store float %337, float addrspace(1)* %338, align 4, !tbaa !17\l  br label %339\l}"];
	Node0x64a55e0 -> Node0x649b490;
	Node0x649b490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%339:\l339:                                              \l  ret void\l}"];
}
