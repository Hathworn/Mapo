digraph "CFG for '_Z17copyBiasToOutputsPfS_iiiii' function" {
	label="CFG for '_Z17copyBiasToOutputsPfS_iiiii' function";

	Node0x58422e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = mul i32 %13, %12\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %19 = sext i32 %16 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %0, i64 %19\l  %21 = load float, float addrspace(1)* %20, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %22 = mul nsw i32 %18, %6\l  %23 = mul nsw i32 %17, %5\l  %24 = add nsw i32 %22, %23\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %1, i64 %25\l  %27 = icmp sgt i32 %3, 0\l  br i1 %27, label %28, label %59\l|{<s0>T|<s1>F}}"];
	Node0x58422e0:s0 -> Node0x5845270;
	Node0x58422e0:s1 -> Node0x5845300;
	Node0x5845270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%28:\l28:                                               \l  %29 = icmp slt i32 %16, %4\l  br i1 %29, label %35, label %30\l|{<s0>T|<s1>F}}"];
	Node0x5845270:s0 -> Node0x58454d0;
	Node0x5845270:s1 -> Node0x5845520;
	Node0x5845520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = and i32 %3, 7\l  %32 = icmp ult i32 %3, 8\l  br i1 %32, label %53, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5845520:s0 -> Node0x5844120;
	Node0x5845520:s1 -> Node0x5844170;
	Node0x5844170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %3, -8\l  br label %60\l}"];
	Node0x5844170 -> Node0x5845b30;
	Node0x58454d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = and i32 %3, 7\l  %37 = icmp ult i32 %3, 8\l  br i1 %37, label %40, label %38\l|{<s0>T|<s1>F}}"];
	Node0x58454d0:s0 -> Node0x5845d10;
	Node0x58454d0:s1 -> Node0x5845d60;
	Node0x5845d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%38:\l38:                                               \l  %39 = and i32 %3, -8\l  br label %64\l}"];
	Node0x5845d60 -> Node0x5845f30;
	Node0x5845d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%40:\l40:                                               \l  %41 = phi i32 [ 0, %35 ], [ %106, %64 ]\l  %42 = icmp eq i32 %36, 0\l  br i1 %42, label %59, label %43\l|{<s0>T|<s1>F}}"];
	Node0x5845d10:s0 -> Node0x5845300;
	Node0x5845d10:s1 -> Node0x5846160;
	Node0x5846160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %50, %43 ], [ %41, %40 ]\l  %45 = phi i32 [ %51, %43 ], [ 0, %40 ]\l  %46 = mul nsw i32 %44, %4\l  %47 = add nsw i32 %46, %16\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %26, i64 %48\l  store float %21, float addrspace(1)* %49, align 4, !tbaa !7\l  %50 = add nuw nsw i32 %44, 1\l  %51 = add i32 %45, 1\l  %52 = icmp eq i32 %51, %36\l  br i1 %52, label %59, label %43, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5846160:s0 -> Node0x5845300;
	Node0x5846160:s1 -> Node0x5846160;
	Node0x5844120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%53:\l53:                                               \l  %54 = icmp eq i32 %31, 0\l  br i1 %54, label %59, label %55\l|{<s0>T|<s1>F}}"];
	Node0x5844120:s0 -> Node0x5845300;
	Node0x5844120:s1 -> Node0x5847150;
	Node0x5847150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = phi i32 [ %57, %55 ], [ 0, %53 ]\l  %57 = add i32 %56, 1\l  %58 = icmp eq i32 %57, %31\l  br i1 %58, label %59, label %55, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5847150:s0 -> Node0x5845300;
	Node0x5847150:s1 -> Node0x5847150;
	Node0x5845300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%59:\l59:                                               \l  ret void\l}"];
	Node0x5845b30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%60:\l60:                                               \l  %61 = phi i32 [ 0, %33 ], [ %62, %60 ]\l  %62 = add i32 %61, 8\l  %63 = icmp eq i32 %62, %34\l  br i1 %63, label %53, label %60, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5845b30:s0 -> Node0x5844120;
	Node0x5845b30:s1 -> Node0x5845b30;
	Node0x5845f30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%64:\l64:                                               \l  %65 = phi i32 [ 0, %38 ], [ %106, %64 ]\l  %66 = phi i32 [ 0, %38 ], [ %107, %64 ]\l  %67 = mul nsw i32 %65, %4\l  %68 = add nsw i32 %67, %16\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %26, i64 %69\l  store float %21, float addrspace(1)* %70, align 4, !tbaa !7\l  %71 = or i32 %65, 1\l  %72 = mul nsw i32 %71, %4\l  %73 = add nsw i32 %72, %16\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %26, i64 %74\l  store float %21, float addrspace(1)* %75, align 4, !tbaa !7\l  %76 = or i32 %65, 2\l  %77 = mul nsw i32 %76, %4\l  %78 = add nsw i32 %77, %16\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %26, i64 %79\l  store float %21, float addrspace(1)* %80, align 4, !tbaa !7\l  %81 = or i32 %65, 3\l  %82 = mul nsw i32 %81, %4\l  %83 = add nsw i32 %82, %16\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %26, i64 %84\l  store float %21, float addrspace(1)* %85, align 4, !tbaa !7\l  %86 = or i32 %65, 4\l  %87 = mul nsw i32 %86, %4\l  %88 = add nsw i32 %87, %16\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %26, i64 %89\l  store float %21, float addrspace(1)* %90, align 4, !tbaa !7\l  %91 = or i32 %65, 5\l  %92 = mul nsw i32 %91, %4\l  %93 = add nsw i32 %92, %16\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %26, i64 %94\l  store float %21, float addrspace(1)* %95, align 4, !tbaa !7\l  %96 = or i32 %65, 6\l  %97 = mul nsw i32 %96, %4\l  %98 = add nsw i32 %97, %16\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %26, i64 %99\l  store float %21, float addrspace(1)* %100, align 4, !tbaa !7\l  %101 = or i32 %65, 7\l  %102 = mul nsw i32 %101, %4\l  %103 = add nsw i32 %102, %16\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %26, i64 %104\l  store float %21, float addrspace(1)* %105, align 4, !tbaa !7\l  %106 = add nuw nsw i32 %65, 8\l  %107 = add i32 %66, 8\l  %108 = icmp eq i32 %107, %39\l  br i1 %108, label %40, label %64, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5845f30:s0 -> Node0x5845d10;
	Node0x5845f30:s1 -> Node0x5845f30;
}
