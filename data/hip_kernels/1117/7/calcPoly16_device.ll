; ModuleID = '../data/hip_kernels/1117/7/main.cu'
source_filename = "../data/hip_kernels/1117/7/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%0 = type { %1 addrspace(1)*, %2 addrspace(1)*, %3, i64, i64, i64 }
%1 = type { i64, i64, i32, i32 }
%2 = type { [64 x [8 x i64]] }
%3 = type { i64 }
%4 = type { i64, %3, i64, i32, i32, i64, i64, %5, [2 x i32] }
%5 = type { %6 addrspace(1)* }
%6 = type { %7, [4 x i32], i64, i32, i32, i32, i32, i64, i32, [9 x i32], i64, i32, i32, [4 x i32], i64, i64, i32, i32, [2 x i32], %3, [14 x i32] }
%7 = type { i32, i32, i8 addrspace(1)*, %3, i32, i32, i64 }

@.str = private unnamed_addr addrspace(4) constant [191 x i8] c"a=[%2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d, %2d,], res=[%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,%2d,] Y=[%d %d %d %d %d %d %d %d %d %d]\0A\00", align 1

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p5i8(i64 immarg, i8 addrspace(5)* nocapture) #0

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p5i8(i64 immarg, i8 addrspace(5)* nocapture) #0

; Function Attrs: convergent norecurse nounwind
define protected amdgpu_kernel void @_Z10calcPoly16v() local_unnamed_addr #1 {
  %1 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !4
  %2 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %4 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %5 = and i32 %4, 15
  %6 = lshr i32 %4, 4
  %7 = and i32 %6, 15
  %8 = lshr i32 %4, 8
  %9 = and i32 %8, 15
  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %11 = and i32 %10, 15
  %12 = lshr i32 %10, 4
  %13 = and i32 %12, 15
  %14 = lshr i32 %10, 8
  %15 = and i32 %14, 15
  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %17 = and i32 %16, 15
  %18 = lshr i32 %16, 4
  %19 = and i32 %18, 15
  %20 = lshr i32 %16, 8
  %21 = and i32 %20, 15
  %22 = lshr i32 %16, 12
  %23 = and i32 %22, 15
  %24 = lshr i32 %16, 16
  %25 = and i32 %24, 15
  %26 = lshr i32 %16, 20
  %27 = and i32 %26, 15
  %28 = lshr i32 %16, 24
  %29 = and i32 %28, 15
  %30 = shl nuw nsw i32 %1, 2
  %31 = trunc i32 %30 to i16
  %32 = urem i16 %31, 17
  %33 = zext i16 %32 to i32
  %34 = trunc i16 %32 to i8
  %35 = add nuw nsw i8 %34, 1
  %36 = urem i8 %35, 17
  %37 = zext i8 %36 to i32
  %38 = add nuw nsw i8 %34, 2
  %39 = urem i8 %38, 17
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i8 %34, 3
  %42 = urem i8 %41, 17
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 1, %33
  %45 = shl nuw nsw i32 1, %37
  %46 = shl nuw nsw i32 1, %40
  %47 = shl nuw nsw i32 1, %43
  %48 = trunc i32 %29 to i8
  %49 = add nuw nsw i8 %48, 1
  %50 = urem i8 %49, 17
  %51 = trunc i32 %27 to i8
  %52 = add nuw nsw i8 %50, %51
  %53 = urem i8 %52, 17
  %54 = trunc i32 %25 to i8
  %55 = add nuw nsw i8 %53, %54
  %56 = urem i8 %55, 17
  %57 = trunc i32 %23 to i8
  %58 = add nuw nsw i8 %56, %57
  %59 = urem i8 %58, 17
  %60 = trunc i32 %21 to i8
  %61 = add nuw nsw i8 %59, %60
  %62 = urem i8 %61, 17
  %63 = trunc i32 %19 to i8
  %64 = add nuw nsw i8 %62, %63
  %65 = urem i8 %64, 17
  %66 = trunc i32 %17 to i8
  %67 = add nuw nsw i8 %65, %66
  %68 = urem i8 %67, 17
  %69 = trunc i32 %15 to i8
  %70 = add nuw nsw i8 %68, %69
  %71 = urem i8 %70, 17
  %72 = trunc i32 %13 to i8
  %73 = add nuw nsw i8 %71, %72
  %74 = urem i8 %73, 17
  %75 = trunc i32 %11 to i8
  %76 = add nuw nsw i8 %74, %75
  %77 = urem i8 %76, 17
  %78 = trunc i32 %9 to i8
  %79 = add nuw nsw i8 %77, %78
  %80 = urem i8 %79, 17
  %81 = trunc i32 %7 to i8
  %82 = add nuw nsw i8 %80, %81
  %83 = urem i8 %82, 17
  %84 = trunc i32 %5 to i8
  %85 = add nuw nsw i8 %83, %84
  %86 = urem i8 %85, 17
  %87 = zext i8 %86 to i32
  %88 = add nuw nsw i32 %3, %87
  %89 = trunc i32 %88 to i16
  %90 = urem i16 %89, 17
  %91 = trunc i32 %2 to i16
  %92 = add nuw nsw i16 %90, %91
  %93 = urem i16 %92, 17
  %94 = zext i16 %93 to i32
  %95 = trunc i32 %30 to i16
  %96 = add nuw nsw i16 %93, %95
  %97 = urem i16 %96, 17
  %98 = zext i16 %97 to i32
  %99 = trunc i16 %97 to i8
  %100 = add nuw nsw i8 %99, 1
  %101 = urem i8 %100, 17
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i8 %99, 2
  %104 = urem i8 %103, 17
  %105 = zext i8 %104 to i32
  %106 = add nuw nsw i8 %99, 3
  %107 = urem i8 %106, 17
  %108 = zext i8 %107 to i32
  %109 = shl nuw nsw i32 1, %98
  %110 = or i32 %44, %109
  %111 = shl nuw nsw i32 1, %102
  %112 = or i32 %45, %111
  %113 = shl nuw nsw i32 1, %105
  %114 = or i32 %46, %113
  %115 = shl nuw nsw i32 1, %108
  %116 = or i32 %47, %115
  %117 = trunc i32 %29 to i8
  %118 = shl nuw nsw i8 %117, 1
  %119 = add nuw nsw i8 %118, 4
  %120 = urem i8 %119, 17
  %121 = trunc i32 %27 to i8
  %122 = add nuw nsw i8 %120, %121
  %123 = shl nuw nsw i8 %122, 1
  %124 = urem i8 %123, 17
  %125 = trunc i32 %25 to i8
  %126 = add nuw nsw i8 %124, %125
  %127 = shl nuw nsw i8 %126, 1
  %128 = urem i8 %127, 17
  %129 = trunc i32 %23 to i8
  %130 = add nuw nsw i8 %128, %129
  %131 = shl nuw nsw i8 %130, 1
  %132 = urem i8 %131, 17
  %133 = trunc i32 %21 to i8
  %134 = add nuw nsw i8 %132, %133
  %135 = shl nuw nsw i8 %134, 1
  %136 = urem i8 %135, 17
  %137 = trunc i32 %19 to i8
  %138 = add nuw nsw i8 %136, %137
  %139 = shl nuw nsw i8 %138, 1
  %140 = urem i8 %139, 17
  %141 = trunc i32 %17 to i8
  %142 = add nuw nsw i8 %140, %141
  %143 = shl nuw nsw i8 %142, 1
  %144 = urem i8 %143, 17
  %145 = trunc i32 %15 to i8
  %146 = add nuw nsw i8 %144, %145
  %147 = shl nuw nsw i8 %146, 1
  %148 = urem i8 %147, 17
  %149 = trunc i32 %13 to i8
  %150 = add nuw nsw i8 %148, %149
  %151 = shl nuw nsw i8 %150, 1
  %152 = urem i8 %151, 17
  %153 = trunc i32 %11 to i8
  %154 = add nuw nsw i8 %152, %153
  %155 = shl nuw nsw i8 %154, 1
  %156 = urem i8 %155, 17
  %157 = trunc i32 %9 to i8
  %158 = add nuw nsw i8 %156, %157
  %159 = shl nuw nsw i8 %158, 1
  %160 = urem i8 %159, 17
  %161 = trunc i32 %7 to i8
  %162 = add nuw nsw i8 %160, %161
  %163 = shl nuw nsw i8 %162, 1
  %164 = urem i8 %163, 17
  %165 = trunc i32 %5 to i8
  %166 = add nuw nsw i8 %164, %165
  %167 = shl nuw nsw i8 %166, 1
  %168 = urem i8 %167, 17
  %169 = zext i8 %168 to i32
  %170 = add nuw nsw i32 %3, %169
  %171 = trunc i32 %170 to i16
  %172 = shl nuw nsw i16 %171, 1
  %173 = urem i16 %172, 17
  %174 = trunc i32 %2 to i16
  %175 = add nuw nsw i16 %173, %174
  %176 = shl nuw nsw i16 %175, 1
  %177 = urem i16 %176, 17
  %178 = zext i16 %177 to i32
  %179 = trunc i32 %30 to i16
  %180 = add nuw nsw i16 %177, %179
  %181 = urem i16 %180, 17
  %182 = zext i16 %181 to i32
  %183 = trunc i16 %181 to i8
  %184 = add nuw nsw i8 %183, 1
  %185 = urem i8 %184, 17
  %186 = zext i8 %185 to i32
  %187 = add nuw nsw i8 %183, 2
  %188 = urem i8 %187, 17
  %189 = zext i8 %188 to i32
  %190 = add nuw nsw i8 %183, 3
  %191 = urem i8 %190, 17
  %192 = zext i8 %191 to i32
  %193 = shl nuw nsw i32 1, %182
  %194 = or i32 %110, %193
  %195 = shl nuw nsw i32 1, %186
  %196 = or i32 %112, %195
  %197 = shl nuw nsw i32 1, %189
  %198 = or i32 %114, %197
  %199 = shl nuw nsw i32 1, %192
  %200 = or i32 %116, %199
  %201 = trunc i32 %29 to i8
  %202 = mul nuw nsw i8 %201, 3
  %203 = add nuw nsw i8 %202, 9
  %204 = urem i8 %203, 17
  %205 = trunc i32 %27 to i8
  %206 = add nuw nsw i8 %204, %205
  %207 = mul nuw i8 %206, 3
  %208 = urem i8 %207, 17
  %209 = trunc i32 %25 to i8
  %210 = add nuw nsw i8 %208, %209
  %211 = mul nuw i8 %210, 3
  %212 = urem i8 %211, 17
  %213 = trunc i32 %23 to i8
  %214 = add nuw nsw i8 %212, %213
  %215 = mul nuw i8 %214, 3
  %216 = urem i8 %215, 17
  %217 = trunc i32 %21 to i8
  %218 = add nuw nsw i8 %216, %217
  %219 = mul nuw i8 %218, 3
  %220 = urem i8 %219, 17
  %221 = trunc i32 %19 to i8
  %222 = add nuw nsw i8 %220, %221
  %223 = mul nuw i8 %222, 3
  %224 = urem i8 %223, 17
  %225 = trunc i32 %17 to i8
  %226 = add nuw nsw i8 %224, %225
  %227 = mul nuw i8 %226, 3
  %228 = urem i8 %227, 17
  %229 = trunc i32 %15 to i8
  %230 = add nuw nsw i8 %228, %229
  %231 = mul nuw i8 %230, 3
  %232 = urem i8 %231, 17
  %233 = trunc i32 %13 to i8
  %234 = add nuw nsw i8 %232, %233
  %235 = mul nuw i8 %234, 3
  %236 = urem i8 %235, 17
  %237 = trunc i32 %11 to i8
  %238 = add nuw nsw i8 %236, %237
  %239 = mul nuw i8 %238, 3
  %240 = urem i8 %239, 17
  %241 = trunc i32 %9 to i8
  %242 = add nuw nsw i8 %240, %241
  %243 = mul nuw i8 %242, 3
  %244 = urem i8 %243, 17
  %245 = trunc i32 %7 to i8
  %246 = add nuw nsw i8 %244, %245
  %247 = mul nuw i8 %246, 3
  %248 = urem i8 %247, 17
  %249 = trunc i32 %5 to i8
  %250 = add nuw nsw i8 %248, %249
  %251 = mul nuw i8 %250, 3
  %252 = urem i8 %251, 17
  %253 = zext i8 %252 to i32
  %254 = add nuw nsw i32 %3, %253
  %255 = trunc i32 %254 to i16
  %256 = mul nuw nsw i16 %255, 3
  %257 = urem i16 %256, 17
  %258 = trunc i32 %2 to i16
  %259 = add nuw nsw i16 %257, %258
  %260 = mul nuw nsw i16 %259, 3
  %261 = urem i16 %260, 17
  %262 = zext i16 %261 to i32
  %263 = trunc i32 %30 to i16
  %264 = add nuw nsw i16 %261, %263
  %265 = urem i16 %264, 17
  %266 = zext i16 %265 to i32
  %267 = trunc i16 %265 to i8
  %268 = add nuw nsw i8 %267, 1
  %269 = urem i8 %268, 17
  %270 = zext i8 %269 to i32
  %271 = add nuw nsw i8 %267, 2
  %272 = urem i8 %271, 17
  %273 = zext i8 %272 to i32
  %274 = add nuw nsw i8 %267, 3
  %275 = urem i8 %274, 17
  %276 = zext i8 %275 to i32
  %277 = shl nuw nsw i32 1, %266
  %278 = or i32 %194, %277
  %279 = shl nuw nsw i32 1, %270
  %280 = or i32 %196, %279
  %281 = shl nuw nsw i32 1, %273
  %282 = or i32 %198, %281
  %283 = shl nuw nsw i32 1, %276
  %284 = or i32 %200, %283
  %285 = trunc i32 %29 to i8
  %286 = shl nuw nsw i8 %285, 2
  %287 = add nuw nsw i8 %286, 16
  %288 = urem i8 %287, 17
  %289 = trunc i32 %27 to i8
  %290 = add nuw nsw i8 %288, %289
  %291 = shl nuw i8 %290, 2
  %292 = urem i8 %291, 17
  %293 = trunc i32 %25 to i8
  %294 = add nuw nsw i8 %292, %293
  %295 = shl nuw i8 %294, 2
  %296 = urem i8 %295, 17
  %297 = trunc i32 %23 to i8
  %298 = add nuw nsw i8 %296, %297
  %299 = shl nuw i8 %298, 2
  %300 = urem i8 %299, 17
  %301 = trunc i32 %21 to i8
  %302 = add nuw nsw i8 %300, %301
  %303 = shl nuw i8 %302, 2
  %304 = urem i8 %303, 17
  %305 = trunc i32 %19 to i8
  %306 = add nuw nsw i8 %304, %305
  %307 = shl nuw i8 %306, 2
  %308 = urem i8 %307, 17
  %309 = trunc i32 %17 to i8
  %310 = add nuw nsw i8 %308, %309
  %311 = shl nuw i8 %310, 2
  %312 = urem i8 %311, 17
  %313 = trunc i32 %15 to i8
  %314 = add nuw nsw i8 %312, %313
  %315 = shl nuw i8 %314, 2
  %316 = urem i8 %315, 17
  %317 = trunc i32 %13 to i8
  %318 = add nuw nsw i8 %316, %317
  %319 = shl nuw i8 %318, 2
  %320 = urem i8 %319, 17
  %321 = trunc i32 %11 to i8
  %322 = add nuw nsw i8 %320, %321
  %323 = shl nuw i8 %322, 2
  %324 = urem i8 %323, 17
  %325 = trunc i32 %9 to i8
  %326 = add nuw nsw i8 %324, %325
  %327 = shl nuw i8 %326, 2
  %328 = urem i8 %327, 17
  %329 = trunc i32 %7 to i8
  %330 = add nuw nsw i8 %328, %329
  %331 = shl nuw i8 %330, 2
  %332 = urem i8 %331, 17
  %333 = trunc i32 %5 to i8
  %334 = add nuw nsw i8 %332, %333
  %335 = shl nuw i8 %334, 2
  %336 = urem i8 %335, 17
  %337 = zext i8 %336 to i32
  %338 = add nuw nsw i32 %3, %337
  %339 = trunc i32 %338 to i16
  %340 = shl nuw nsw i16 %339, 2
  %341 = urem i16 %340, 17
  %342 = trunc i32 %2 to i16
  %343 = add nuw nsw i16 %341, %342
  %344 = shl nuw nsw i16 %343, 2
  %345 = urem i16 %344, 17
  %346 = zext i16 %345 to i32
  %347 = trunc i32 %30 to i16
  %348 = add nuw nsw i16 %345, %347
  %349 = urem i16 %348, 17
  %350 = zext i16 %349 to i32
  %351 = trunc i16 %349 to i8
  %352 = add nuw nsw i8 %351, 1
  %353 = urem i8 %352, 17
  %354 = zext i8 %353 to i32
  %355 = add nuw nsw i8 %351, 2
  %356 = urem i8 %355, 17
  %357 = zext i8 %356 to i32
  %358 = add nuw nsw i8 %351, 3
  %359 = urem i8 %358, 17
  %360 = zext i8 %359 to i32
  %361 = shl nuw nsw i32 1, %350
  %362 = or i32 %278, %361
  %363 = shl nuw nsw i32 1, %354
  %364 = or i32 %280, %363
  %365 = shl nuw nsw i32 1, %357
  %366 = or i32 %282, %365
  %367 = shl nuw nsw i32 1, %360
  %368 = or i32 %284, %367
  %369 = trunc i32 %29 to i8
  %370 = mul nuw nsw i8 %369, 5
  %371 = add nuw i8 %370, 25
  %372 = urem i8 %371, 17
  %373 = trunc i32 %27 to i8
  %374 = add nuw nsw i8 %372, %373
  %375 = mul i8 %374, 5
  %376 = urem i8 %375, 17
  %377 = trunc i32 %25 to i8
  %378 = add nuw nsw i8 %376, %377
  %379 = mul i8 %378, 5
  %380 = urem i8 %379, 17
  %381 = trunc i32 %23 to i8
  %382 = add nuw nsw i8 %380, %381
  %383 = mul i8 %382, 5
  %384 = urem i8 %383, 17
  %385 = trunc i32 %21 to i8
  %386 = add nuw nsw i8 %384, %385
  %387 = mul i8 %386, 5
  %388 = urem i8 %387, 17
  %389 = trunc i32 %19 to i8
  %390 = add nuw nsw i8 %388, %389
  %391 = mul i8 %390, 5
  %392 = urem i8 %391, 17
  %393 = trunc i32 %17 to i8
  %394 = add nuw nsw i8 %392, %393
  %395 = mul i8 %394, 5
  %396 = urem i8 %395, 17
  %397 = trunc i32 %15 to i8
  %398 = add nuw nsw i8 %396, %397
  %399 = mul i8 %398, 5
  %400 = urem i8 %399, 17
  %401 = trunc i32 %13 to i8
  %402 = add nuw nsw i8 %400, %401
  %403 = mul i8 %402, 5
  %404 = urem i8 %403, 17
  %405 = trunc i32 %11 to i8
  %406 = add nuw nsw i8 %404, %405
  %407 = mul i8 %406, 5
  %408 = urem i8 %407, 17
  %409 = trunc i32 %9 to i8
  %410 = add nuw nsw i8 %408, %409
  %411 = mul i8 %410, 5
  %412 = urem i8 %411, 17
  %413 = trunc i32 %7 to i8
  %414 = add nuw nsw i8 %412, %413
  %415 = mul i8 %414, 5
  %416 = urem i8 %415, 17
  %417 = trunc i32 %5 to i8
  %418 = add nuw nsw i8 %416, %417
  %419 = mul i8 %418, 5
  %420 = urem i8 %419, 17
  %421 = zext i8 %420 to i32
  %422 = add nuw nsw i32 %3, %421
  %423 = trunc i32 %422 to i16
  %424 = mul nuw nsw i16 %423, 5
  %425 = urem i16 %424, 17
  %426 = trunc i32 %2 to i16
  %427 = add nuw nsw i16 %425, %426
  %428 = mul nuw nsw i16 %427, 5
  %429 = urem i16 %428, 17
  %430 = zext i16 %429 to i32
  %431 = trunc i32 %30 to i16
  %432 = add nuw nsw i16 %429, %431
  %433 = urem i16 %432, 17
  %434 = zext i16 %433 to i32
  %435 = trunc i16 %433 to i8
  %436 = add nuw nsw i8 %435, 1
  %437 = urem i8 %436, 17
  %438 = zext i8 %437 to i32
  %439 = add nuw nsw i8 %435, 2
  %440 = urem i8 %439, 17
  %441 = zext i8 %440 to i32
  %442 = add nuw nsw i8 %435, 3
  %443 = urem i8 %442, 17
  %444 = zext i8 %443 to i32
  %445 = shl nuw nsw i32 1, %434
  %446 = or i32 %362, %445
  %447 = shl nuw nsw i32 1, %438
  %448 = or i32 %364, %447
  %449 = shl nuw nsw i32 1, %441
  %450 = or i32 %366, %449
  %451 = shl nuw nsw i32 1, %444
  %452 = or i32 %368, %451
  %453 = trunc i32 %29 to i8
  %454 = mul nuw nsw i8 %453, 6
  %455 = add nuw i8 %454, 36
  %456 = urem i8 %455, 17
  %457 = trunc i32 %27 to i8
  %458 = add nuw nsw i8 %456, %457
  %459 = mul i8 %458, 6
  %460 = urem i8 %459, 17
  %461 = trunc i32 %25 to i8
  %462 = add nuw nsw i8 %460, %461
  %463 = mul i8 %462, 6
  %464 = urem i8 %463, 17
  %465 = trunc i32 %23 to i8
  %466 = add nuw nsw i8 %464, %465
  %467 = mul i8 %466, 6
  %468 = urem i8 %467, 17
  %469 = trunc i32 %21 to i8
  %470 = add nuw nsw i8 %468, %469
  %471 = mul i8 %470, 6
  %472 = urem i8 %471, 17
  %473 = trunc i32 %19 to i8
  %474 = add nuw nsw i8 %472, %473
  %475 = mul i8 %474, 6
  %476 = urem i8 %475, 17
  %477 = trunc i32 %17 to i8
  %478 = add nuw nsw i8 %476, %477
  %479 = mul i8 %478, 6
  %480 = urem i8 %479, 17
  %481 = trunc i32 %15 to i8
  %482 = add nuw nsw i8 %480, %481
  %483 = mul i8 %482, 6
  %484 = urem i8 %483, 17
  %485 = trunc i32 %13 to i8
  %486 = add nuw nsw i8 %484, %485
  %487 = mul i8 %486, 6
  %488 = urem i8 %487, 17
  %489 = trunc i32 %11 to i8
  %490 = add nuw nsw i8 %488, %489
  %491 = mul i8 %490, 6
  %492 = urem i8 %491, 17
  %493 = trunc i32 %9 to i8
  %494 = add nuw nsw i8 %492, %493
  %495 = mul i8 %494, 6
  %496 = urem i8 %495, 17
  %497 = trunc i32 %7 to i8
  %498 = add nuw nsw i8 %496, %497
  %499 = mul i8 %498, 6
  %500 = urem i8 %499, 17
  %501 = trunc i32 %5 to i8
  %502 = add nuw nsw i8 %500, %501
  %503 = mul i8 %502, 6
  %504 = urem i8 %503, 17
  %505 = zext i8 %504 to i32
  %506 = add nuw nsw i32 %3, %505
  %507 = trunc i32 %506 to i16
  %508 = mul nuw nsw i16 %507, 6
  %509 = urem i16 %508, 17
  %510 = trunc i32 %2 to i16
  %511 = add nuw nsw i16 %509, %510
  %512 = mul nuw nsw i16 %511, 6
  %513 = urem i16 %512, 17
  %514 = zext i16 %513 to i32
  %515 = trunc i32 %30 to i16
  %516 = add nuw nsw i16 %513, %515
  %517 = urem i16 %516, 17
  %518 = zext i16 %517 to i32
  %519 = trunc i16 %517 to i8
  %520 = add nuw nsw i8 %519, 1
  %521 = urem i8 %520, 17
  %522 = zext i8 %521 to i32
  %523 = add nuw nsw i8 %519, 2
  %524 = urem i8 %523, 17
  %525 = zext i8 %524 to i32
  %526 = add nuw nsw i8 %519, 3
  %527 = urem i8 %526, 17
  %528 = zext i8 %527 to i32
  %529 = shl nuw nsw i32 1, %518
  %530 = or i32 %446, %529
  %531 = shl nuw nsw i32 1, %522
  %532 = or i32 %448, %531
  %533 = shl nuw nsw i32 1, %525
  %534 = or i32 %450, %533
  %535 = shl nuw nsw i32 1, %528
  %536 = or i32 %452, %535
  %537 = trunc i32 %29 to i8
  %538 = mul nuw nsw i8 %537, 7
  %539 = add nuw i8 %538, 49
  %540 = urem i8 %539, 17
  %541 = trunc i32 %27 to i8
  %542 = add nuw nsw i8 %540, %541
  %543 = mul i8 %542, 7
  %544 = urem i8 %543, 17
  %545 = trunc i32 %25 to i8
  %546 = add nuw nsw i8 %544, %545
  %547 = mul i8 %546, 7
  %548 = urem i8 %547, 17
  %549 = trunc i32 %23 to i8
  %550 = add nuw nsw i8 %548, %549
  %551 = mul i8 %550, 7
  %552 = urem i8 %551, 17
  %553 = trunc i32 %21 to i8
  %554 = add nuw nsw i8 %552, %553
  %555 = mul i8 %554, 7
  %556 = urem i8 %555, 17
  %557 = trunc i32 %19 to i8
  %558 = add nuw nsw i8 %556, %557
  %559 = mul i8 %558, 7
  %560 = urem i8 %559, 17
  %561 = trunc i32 %17 to i8
  %562 = add nuw nsw i8 %560, %561
  %563 = mul i8 %562, 7
  %564 = urem i8 %563, 17
  %565 = trunc i32 %15 to i8
  %566 = add nuw nsw i8 %564, %565
  %567 = mul i8 %566, 7
  %568 = urem i8 %567, 17
  %569 = trunc i32 %13 to i8
  %570 = add nuw nsw i8 %568, %569
  %571 = mul i8 %570, 7
  %572 = urem i8 %571, 17
  %573 = trunc i32 %11 to i8
  %574 = add nuw nsw i8 %572, %573
  %575 = mul i8 %574, 7
  %576 = urem i8 %575, 17
  %577 = trunc i32 %9 to i8
  %578 = add nuw nsw i8 %576, %577
  %579 = mul i8 %578, 7
  %580 = urem i8 %579, 17
  %581 = trunc i32 %7 to i8
  %582 = add nuw nsw i8 %580, %581
  %583 = mul i8 %582, 7
  %584 = urem i8 %583, 17
  %585 = trunc i32 %5 to i8
  %586 = add nuw nsw i8 %584, %585
  %587 = mul i8 %586, 7
  %588 = urem i8 %587, 17
  %589 = zext i8 %588 to i32
  %590 = add nuw nsw i32 %3, %589
  %591 = trunc i32 %590 to i16
  %592 = mul nuw nsw i16 %591, 7
  %593 = urem i16 %592, 17
  %594 = trunc i32 %2 to i16
  %595 = add nuw nsw i16 %593, %594
  %596 = mul nuw nsw i16 %595, 7
  %597 = urem i16 %596, 17
  %598 = zext i16 %597 to i32
  %599 = trunc i32 %30 to i16
  %600 = add nuw nsw i16 %597, %599
  %601 = urem i16 %600, 17
  %602 = zext i16 %601 to i32
  %603 = trunc i16 %601 to i8
  %604 = add nuw nsw i8 %603, 1
  %605 = urem i8 %604, 17
  %606 = zext i8 %605 to i32
  %607 = add nuw nsw i8 %603, 2
  %608 = urem i8 %607, 17
  %609 = zext i8 %608 to i32
  %610 = add nuw nsw i8 %603, 3
  %611 = urem i8 %610, 17
  %612 = zext i8 %611 to i32
  %613 = shl nuw nsw i32 1, %602
  %614 = or i32 %530, %613
  %615 = shl nuw nsw i32 1, %606
  %616 = or i32 %532, %615
  %617 = shl nuw nsw i32 1, %609
  %618 = or i32 %534, %617
  %619 = shl nuw nsw i32 1, %612
  %620 = or i32 %536, %619
  %621 = tail call i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr()
  %622 = getelementptr inbounds i8, i8 addrspace(4)* %621, i64 24
  %623 = bitcast i8 addrspace(4)* %622 to i64 addrspace(4)*
  %624 = zext i32 %2 to i64
  %625 = zext i32 %3 to i64
  %626 = zext i32 %5 to i64
  %627 = zext i32 %7 to i64
  %628 = zext i32 %9 to i64
  %629 = zext i32 %11 to i64
  %630 = zext i32 %13 to i64
  %631 = zext i32 %15 to i64
  %632 = zext i32 %17 to i64
  %633 = zext i32 %19 to i64
  %634 = zext i32 %21 to i64
  %635 = zext i32 %23 to i64
  %636 = zext i32 %25 to i64
  %637 = zext i32 %27 to i64
  %638 = zext i32 %29 to i64
  %639 = zext i32 %614 to i64
  %640 = zext i32 %616 to i64
  %641 = zext i32 %618 to i64
  %642 = zext i32 %620 to i64
  %643 = icmp eq i32 %614, 13139
  br i1 %643, label %644, label %1723

644:                                              ; preds = %0
  %645 = trunc i32 %29 to i8
  %646 = shl nuw nsw i8 %645, 3
  %647 = add nuw i8 %646, 64
  %648 = urem i8 %647, 17
  %649 = trunc i32 %27 to i8
  %650 = add nuw nsw i8 %648, %649
  %651 = shl i8 %650, 3
  %652 = urem i8 %651, 17
  %653 = trunc i32 %25 to i8
  %654 = add nuw nsw i8 %652, %653
  %655 = shl i8 %654, 3
  %656 = urem i8 %655, 17
  %657 = trunc i32 %23 to i8
  %658 = add nuw nsw i8 %656, %657
  %659 = shl i8 %658, 3
  %660 = urem i8 %659, 17
  %661 = trunc i32 %21 to i8
  %662 = add nuw nsw i8 %660, %661
  %663 = shl i8 %662, 3
  %664 = urem i8 %663, 17
  %665 = trunc i32 %19 to i8
  %666 = add nuw nsw i8 %664, %665
  %667 = shl i8 %666, 3
  %668 = urem i8 %667, 17
  %669 = trunc i32 %17 to i8
  %670 = add nuw nsw i8 %668, %669
  %671 = shl i8 %670, 3
  %672 = urem i8 %671, 17
  %673 = trunc i32 %15 to i8
  %674 = add nuw nsw i8 %672, %673
  %675 = shl i8 %674, 3
  %676 = urem i8 %675, 17
  %677 = trunc i32 %13 to i8
  %678 = add nuw nsw i8 %676, %677
  %679 = shl i8 %678, 3
  %680 = urem i8 %679, 17
  %681 = trunc i32 %11 to i8
  %682 = add nuw nsw i8 %680, %681
  %683 = shl i8 %682, 3
  %684 = urem i8 %683, 17
  %685 = trunc i32 %9 to i8
  %686 = add nuw nsw i8 %684, %685
  %687 = shl i8 %686, 3
  %688 = urem i8 %687, 17
  %689 = trunc i32 %7 to i8
  %690 = add nuw nsw i8 %688, %689
  %691 = shl i8 %690, 3
  %692 = urem i8 %691, 17
  %693 = trunc i32 %5 to i8
  %694 = add nuw nsw i8 %692, %693
  %695 = shl i8 %694, 3
  %696 = urem i8 %695, 17
  %697 = zext i8 %696 to i32
  %698 = add nuw nsw i32 %3, %697
  %699 = trunc i32 %698 to i16
  %700 = shl nuw nsw i16 %699, 3
  %701 = urem i16 %700, 17
  %702 = trunc i32 %2 to i16
  %703 = add nuw nsw i16 %701, %702
  %704 = shl nuw nsw i16 %703, 3
  %705 = urem i16 %704, 17
  %706 = trunc i32 %30 to i16
  %707 = add nuw nsw i16 %705, %706
  %708 = urem i16 %707, 17
  %709 = zext i16 %708 to i32
  %710 = shl nuw nsw i32 1, %709
  %711 = trunc i32 %29 to i8
  %712 = mul nuw i8 %711, 9
  %713 = add i8 %712, 81
  %714 = urem i8 %713, 17
  %715 = zext i8 %714 to i32
  %716 = add nuw nsw i32 %27, %715
  %717 = trunc i32 %716 to i16
  %718 = mul nuw nsw i16 %717, 9
  %719 = urem i16 %718, 17
  %720 = trunc i32 %25 to i16
  %721 = add nuw nsw i16 %719, %720
  %722 = mul nuw nsw i16 %721, 9
  %723 = urem i16 %722, 17
  %724 = trunc i32 %23 to i16
  %725 = add nuw nsw i16 %723, %724
  %726 = mul nuw nsw i16 %725, 9
  %727 = urem i16 %726, 17
  %728 = trunc i32 %21 to i16
  %729 = add nuw nsw i16 %727, %728
  %730 = mul nuw nsw i16 %729, 9
  %731 = urem i16 %730, 17
  %732 = trunc i32 %19 to i16
  %733 = add nuw nsw i16 %731, %732
  %734 = mul nuw nsw i16 %733, 9
  %735 = urem i16 %734, 17
  %736 = trunc i32 %17 to i16
  %737 = add nuw nsw i16 %735, %736
  %738 = mul nuw nsw i16 %737, 9
  %739 = urem i16 %738, 17
  %740 = trunc i32 %15 to i16
  %741 = add nuw nsw i16 %739, %740
  %742 = mul nuw nsw i16 %741, 9
  %743 = urem i16 %742, 17
  %744 = trunc i32 %13 to i16
  %745 = add nuw nsw i16 %743, %744
  %746 = mul nuw nsw i16 %745, 9
  %747 = urem i16 %746, 17
  %748 = trunc i32 %11 to i16
  %749 = add nuw nsw i16 %747, %748
  %750 = mul nuw nsw i16 %749, 9
  %751 = urem i16 %750, 17
  %752 = trunc i32 %9 to i16
  %753 = add nuw nsw i16 %751, %752
  %754 = mul nuw nsw i16 %753, 9
  %755 = urem i16 %754, 17
  %756 = trunc i32 %7 to i16
  %757 = add nuw nsw i16 %755, %756
  %758 = mul nuw nsw i16 %757, 9
  %759 = urem i16 %758, 17
  %760 = trunc i32 %5 to i16
  %761 = add nuw nsw i16 %759, %760
  %762 = mul nuw nsw i16 %761, 9
  %763 = urem i16 %762, 17
  %764 = trunc i32 %3 to i16
  %765 = add nuw nsw i16 %763, %764
  %766 = mul nuw nsw i16 %765, 9
  %767 = urem i16 %766, 17
  %768 = trunc i32 %2 to i16
  %769 = add nuw nsw i16 %767, %768
  %770 = mul nuw nsw i16 %769, 9
  %771 = urem i16 %770, 17
  %772 = trunc i32 %30 to i16
  %773 = add nuw nsw i16 %771, %772
  %774 = urem i16 %773, 17
  %775 = zext i16 %774 to i32
  %776 = shl nuw nsw i32 1, %775
  %777 = trunc i32 %29 to i8
  %778 = mul nuw i8 %777, 10
  %779 = add i8 %778, 100
  %780 = urem i8 %779, 17
  %781 = zext i8 %780 to i32
  %782 = add nuw nsw i32 %27, %781
  %783 = trunc i32 %782 to i16
  %784 = insertelement <2 x i32> poison, i32 %25, i64 0
  %785 = shufflevector <2 x i32> %784, <2 x i32> poison, <2 x i32> zeroinitializer
  %786 = trunc <2 x i32> %785 to <2 x i16>
  %787 = insertelement <2 x i32> poison, i32 %23, i64 0
  %788 = shufflevector <2 x i32> %787, <2 x i32> poison, <2 x i32> zeroinitializer
  %789 = trunc <2 x i32> %788 to <2 x i16>
  %790 = insertelement <2 x i32> poison, i32 %21, i64 0
  %791 = shufflevector <2 x i32> %790, <2 x i32> poison, <2 x i32> zeroinitializer
  %792 = trunc <2 x i32> %791 to <2 x i16>
  %793 = insertelement <2 x i32> poison, i32 %19, i64 0
  %794 = shufflevector <2 x i32> %793, <2 x i32> poison, <2 x i32> zeroinitializer
  %795 = trunc <2 x i32> %794 to <2 x i16>
  %796 = insertelement <2 x i32> poison, i32 %17, i64 0
  %797 = shufflevector <2 x i32> %796, <2 x i32> poison, <2 x i32> zeroinitializer
  %798 = trunc <2 x i32> %797 to <2 x i16>
  %799 = insertelement <2 x i32> poison, i32 %15, i64 0
  %800 = shufflevector <2 x i32> %799, <2 x i32> poison, <2 x i32> zeroinitializer
  %801 = trunc <2 x i32> %800 to <2 x i16>
  %802 = insertelement <2 x i32> poison, i32 %13, i64 0
  %803 = shufflevector <2 x i32> %802, <2 x i32> poison, <2 x i32> zeroinitializer
  %804 = trunc <2 x i32> %803 to <2 x i16>
  %805 = insertelement <2 x i32> poison, i32 %11, i64 0
  %806 = shufflevector <2 x i32> %805, <2 x i32> poison, <2 x i32> zeroinitializer
  %807 = trunc <2 x i32> %806 to <2 x i16>
  %808 = insertelement <2 x i32> poison, i32 %9, i64 0
  %809 = shufflevector <2 x i32> %808, <2 x i32> poison, <2 x i32> zeroinitializer
  %810 = trunc <2 x i32> %809 to <2 x i16>
  %811 = insertelement <2 x i32> poison, i32 %7, i64 0
  %812 = shufflevector <2 x i32> %811, <2 x i32> poison, <2 x i32> zeroinitializer
  %813 = trunc <2 x i32> %812 to <2 x i16>
  %814 = insertelement <2 x i32> poison, i32 %5, i64 0
  %815 = shufflevector <2 x i32> %814, <2 x i32> poison, <2 x i32> zeroinitializer
  %816 = trunc <2 x i32> %815 to <2 x i16>
  %817 = trunc i32 %3 to i16
  %818 = insertelement <4 x i16> undef, i16 %817, i64 0
  %819 = shufflevector <4 x i16> %818, <4 x i16> poison, <4 x i32> zeroinitializer
  %820 = trunc i32 %2 to i16
  %821 = insertelement <4 x i16> undef, i16 %820, i64 0
  %822 = shufflevector <4 x i16> %821, <4 x i16> poison, <4 x i32> zeroinitializer
  %823 = trunc i32 %30 to i16
  %824 = insertelement <4 x i16> undef, i16 %823, i64 0
  %825 = shufflevector <4 x i16> %824, <4 x i16> poison, <4 x i32> zeroinitializer
  %826 = trunc i32 %29 to i16
  %827 = mul nuw nsw i16 %826, 11
  %828 = add nuw nsw i16 %827, 121
  %829 = urem i16 %828, 17
  %830 = trunc i32 %27 to i16
  %831 = add nuw nsw i16 %829, %830
  %832 = insertelement <2 x i16> poison, i16 %783, i64 0
  %833 = insertelement <2 x i16> %832, i16 %831, i64 1
  %834 = mul nuw nsw <2 x i16> %833, <i16 10, i16 11>
  %835 = urem <2 x i16> %834, <i16 17, i16 17>
  %836 = add nuw nsw <2 x i16> %835, %786
  %837 = mul nuw nsw <2 x i16> %836, <i16 10, i16 11>
  %838 = urem <2 x i16> %837, <i16 17, i16 17>
  %839 = add nuw nsw <2 x i16> %838, %789
  %840 = mul nuw nsw <2 x i16> %839, <i16 10, i16 11>
  %841 = urem <2 x i16> %840, <i16 17, i16 17>
  %842 = add nuw nsw <2 x i16> %841, %792
  %843 = mul nuw nsw <2 x i16> %842, <i16 10, i16 11>
  %844 = urem <2 x i16> %843, <i16 17, i16 17>
  %845 = add nuw nsw <2 x i16> %844, %795
  %846 = mul nuw nsw <2 x i16> %845, <i16 10, i16 11>
  %847 = urem <2 x i16> %846, <i16 17, i16 17>
  %848 = add nuw nsw <2 x i16> %847, %798
  %849 = mul nuw nsw <2 x i16> %848, <i16 10, i16 11>
  %850 = urem <2 x i16> %849, <i16 17, i16 17>
  %851 = add nuw nsw <2 x i16> %850, %801
  %852 = mul nuw nsw <2 x i16> %851, <i16 10, i16 11>
  %853 = urem <2 x i16> %852, <i16 17, i16 17>
  %854 = add nuw nsw <2 x i16> %853, %804
  %855 = mul nuw nsw <2 x i16> %854, <i16 10, i16 11>
  %856 = urem <2 x i16> %855, <i16 17, i16 17>
  %857 = add nuw nsw <2 x i16> %856, %807
  %858 = mul nuw nsw <2 x i16> %857, <i16 10, i16 11>
  %859 = urem <2 x i16> %858, <i16 17, i16 17>
  %860 = add nuw nsw <2 x i16> %859, %810
  %861 = mul nuw nsw <2 x i16> %860, <i16 10, i16 11>
  %862 = urem <2 x i16> %861, <i16 17, i16 17>
  %863 = add nuw nsw <2 x i16> %862, %813
  %864 = mul nuw nsw <2 x i16> %863, <i16 10, i16 11>
  %865 = urem <2 x i16> %864, <i16 17, i16 17>
  %866 = add nuw nsw <2 x i16> %865, %816
  %867 = trunc i32 %29 to i16
  %868 = insertelement <2 x i16> undef, i16 %867, i64 0
  %869 = shufflevector <2 x i16> %868, <2 x i16> poison, <2 x i32> zeroinitializer
  %870 = trunc i32 %27 to i16
  %871 = insertelement <2 x i16> undef, i16 %870, i64 0
  %872 = shufflevector <2 x i16> %871, <2 x i16> poison, <2 x i32> zeroinitializer
  %873 = trunc <2 x i32> %785 to <2 x i16>
  %874 = trunc <2 x i32> %788 to <2 x i16>
  %875 = trunc <2 x i32> %791 to <2 x i16>
  %876 = trunc <2 x i32> %794 to <2 x i16>
  %877 = trunc <2 x i32> %797 to <2 x i16>
  %878 = trunc <2 x i32> %800 to <2 x i16>
  %879 = trunc <2 x i32> %803 to <2 x i16>
  %880 = trunc <2 x i32> %806 to <2 x i16>
  %881 = trunc <2 x i32> %809 to <2 x i16>
  %882 = trunc <2 x i32> %812 to <2 x i16>
  %883 = trunc <2 x i32> %815 to <2 x i16>
  %884 = mul nuw nsw <2 x i16> %869, <i16 12, i16 13>
  %885 = add nuw nsw <2 x i16> %884, <i16 144, i16 169>
  %886 = urem <2 x i16> %885, <i16 17, i16 17>
  %887 = add nuw nsw <2 x i16> %886, %872
  %888 = mul nuw nsw <2 x i16> %887, <i16 12, i16 13>
  %889 = urem <2 x i16> %888, <i16 17, i16 17>
  %890 = add nuw nsw <2 x i16> %889, %873
  %891 = mul nuw nsw <2 x i16> %890, <i16 12, i16 13>
  %892 = urem <2 x i16> %891, <i16 17, i16 17>
  %893 = add nuw nsw <2 x i16> %892, %874
  %894 = mul nuw nsw <2 x i16> %893, <i16 12, i16 13>
  %895 = urem <2 x i16> %894, <i16 17, i16 17>
  %896 = add nuw nsw <2 x i16> %895, %875
  %897 = mul nuw nsw <2 x i16> %896, <i16 12, i16 13>
  %898 = urem <2 x i16> %897, <i16 17, i16 17>
  %899 = add nuw nsw <2 x i16> %898, %876
  %900 = mul nuw nsw <2 x i16> %899, <i16 12, i16 13>
  %901 = urem <2 x i16> %900, <i16 17, i16 17>
  %902 = add nuw nsw <2 x i16> %901, %877
  %903 = mul nuw nsw <2 x i16> %902, <i16 12, i16 13>
  %904 = urem <2 x i16> %903, <i16 17, i16 17>
  %905 = add nuw nsw <2 x i16> %904, %878
  %906 = mul nuw nsw <2 x i16> %905, <i16 12, i16 13>
  %907 = urem <2 x i16> %906, <i16 17, i16 17>
  %908 = add nuw nsw <2 x i16> %907, %879
  %909 = mul nuw nsw <2 x i16> %908, <i16 12, i16 13>
  %910 = urem <2 x i16> %909, <i16 17, i16 17>
  %911 = add nuw nsw <2 x i16> %910, %880
  %912 = mul nuw nsw <2 x i16> %911, <i16 12, i16 13>
  %913 = urem <2 x i16> %912, <i16 17, i16 17>
  %914 = add nuw nsw <2 x i16> %913, %881
  %915 = mul nuw nsw <2 x i16> %914, <i16 12, i16 13>
  %916 = urem <2 x i16> %915, <i16 17, i16 17>
  %917 = add nuw nsw <2 x i16> %916, %882
  %918 = mul nuw nsw <2 x i16> %917, <i16 12, i16 13>
  %919 = urem <2 x i16> %918, <i16 17, i16 17>
  %920 = add nuw nsw <2 x i16> %919, %883
  %921 = shufflevector <2 x i16> %866, <2 x i16> %920, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %922 = mul nuw nsw <4 x i16> %921, <i16 10, i16 11, i16 12, i16 13>
  %923 = urem <4 x i16> %922, <i16 17, i16 17, i16 17, i16 17>
  %924 = add nuw nsw <4 x i16> %923, %819
  %925 = mul nuw nsw <4 x i16> %924, <i16 10, i16 11, i16 12, i16 13>
  %926 = urem <4 x i16> %925, <i16 17, i16 17, i16 17, i16 17>
  %927 = add nuw nsw <4 x i16> %926, %822
  %928 = mul nuw nsw <4 x i16> %927, <i16 10, i16 11, i16 12, i16 13>
  %929 = urem <4 x i16> %928, <i16 17, i16 17, i16 17, i16 17>
  %930 = add nuw nsw <4 x i16> %929, %825
  %931 = urem <4 x i16> %930, <i16 17, i16 17, i16 17, i16 17>
  %932 = zext <4 x i16> %931 to <4 x i32>
  %933 = shl nuw nsw <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %932
  %934 = trunc i32 %29 to i16
  %935 = mul nuw nsw i16 %934, 14
  %936 = add nuw nsw i16 %935, 196
  %937 = urem i16 %936, 17
  %938 = trunc i32 %27 to i16
  %939 = add nuw nsw i16 %937, %938
  %940 = mul nuw nsw i16 %939, 14
  %941 = urem i16 %940, 17
  %942 = trunc i32 %25 to i16
  %943 = add nuw nsw i16 %941, %942
  %944 = mul nuw nsw i16 %943, 14
  %945 = urem i16 %944, 17
  %946 = trunc i32 %23 to i16
  %947 = add nuw nsw i16 %945, %946
  %948 = mul nuw nsw i16 %947, 14
  %949 = urem i16 %948, 17
  %950 = trunc i32 %21 to i16
  %951 = add nuw nsw i16 %949, %950
  %952 = mul nuw nsw i16 %951, 14
  %953 = urem i16 %952, 17
  %954 = trunc i32 %19 to i16
  %955 = add nuw nsw i16 %953, %954
  %956 = mul nuw nsw i16 %955, 14
  %957 = urem i16 %956, 17
  %958 = trunc i32 %17 to i16
  %959 = add nuw nsw i16 %957, %958
  %960 = mul nuw nsw i16 %959, 14
  %961 = urem i16 %960, 17
  %962 = trunc i32 %15 to i16
  %963 = add nuw nsw i16 %961, %962
  %964 = mul nuw nsw i16 %963, 14
  %965 = urem i16 %964, 17
  %966 = trunc i32 %13 to i16
  %967 = add nuw nsw i16 %965, %966
  %968 = mul nuw nsw i16 %967, 14
  %969 = urem i16 %968, 17
  %970 = trunc i32 %11 to i16
  %971 = add nuw nsw i16 %969, %970
  %972 = mul nuw nsw i16 %971, 14
  %973 = urem i16 %972, 17
  %974 = trunc i32 %9 to i16
  %975 = add nuw nsw i16 %973, %974
  %976 = mul nuw nsw i16 %975, 14
  %977 = urem i16 %976, 17
  %978 = trunc i32 %7 to i16
  %979 = add nuw nsw i16 %977, %978
  %980 = mul nuw nsw i16 %979, 14
  %981 = urem i16 %980, 17
  %982 = trunc i32 %5 to i16
  %983 = add nuw nsw i16 %981, %982
  %984 = mul nuw nsw i16 %983, 14
  %985 = urem i16 %984, 17
  %986 = trunc i32 %3 to i16
  %987 = add nuw nsw i16 %985, %986
  %988 = mul nuw nsw i16 %987, 14
  %989 = urem i16 %988, 17
  %990 = trunc i32 %2 to i16
  %991 = add nuw nsw i16 %989, %990
  %992 = mul nuw nsw i16 %991, 14
  %993 = urem i16 %992, 17
  %994 = trunc i32 %30 to i16
  %995 = add nuw nsw i16 %993, %994
  %996 = urem i16 %995, 17
  %997 = zext i16 %996 to i32
  %998 = shl nuw nsw i32 1, %997
  %999 = trunc i32 %29 to i16
  %1000 = mul nuw nsw i16 %999, 15
  %1001 = add nuw nsw i16 %1000, 225
  %1002 = urem i16 %1001, 17
  %1003 = trunc i32 %27 to i16
  %1004 = add nuw nsw i16 %1002, %1003
  %1005 = mul nuw nsw i16 %1004, 15
  %1006 = urem i16 %1005, 17
  %1007 = trunc i32 %25 to i16
  %1008 = add nuw nsw i16 %1006, %1007
  %1009 = mul nuw nsw i16 %1008, 15
  %1010 = urem i16 %1009, 17
  %1011 = trunc i32 %23 to i16
  %1012 = add nuw nsw i16 %1010, %1011
  %1013 = mul nuw nsw i16 %1012, 15
  %1014 = urem i16 %1013, 17
  %1015 = trunc i32 %21 to i16
  %1016 = add nuw nsw i16 %1014, %1015
  %1017 = mul nuw nsw i16 %1016, 15
  %1018 = urem i16 %1017, 17
  %1019 = trunc i32 %19 to i16
  %1020 = add nuw nsw i16 %1018, %1019
  %1021 = mul nuw nsw i16 %1020, 15
  %1022 = urem i16 %1021, 17
  %1023 = trunc i32 %17 to i16
  %1024 = add nuw nsw i16 %1022, %1023
  %1025 = mul nuw nsw i16 %1024, 15
  %1026 = urem i16 %1025, 17
  %1027 = trunc i32 %15 to i16
  %1028 = add nuw nsw i16 %1026, %1027
  %1029 = mul nuw nsw i16 %1028, 15
  %1030 = urem i16 %1029, 17
  %1031 = trunc i32 %13 to i16
  %1032 = add nuw nsw i16 %1030, %1031
  %1033 = mul nuw nsw i16 %1032, 15
  %1034 = urem i16 %1033, 17
  %1035 = trunc i32 %11 to i16
  %1036 = add nuw nsw i16 %1034, %1035
  %1037 = mul nuw nsw i16 %1036, 15
  %1038 = urem i16 %1037, 17
  %1039 = trunc i32 %9 to i16
  %1040 = add nuw nsw i16 %1038, %1039
  %1041 = mul nuw nsw i16 %1040, 15
  %1042 = urem i16 %1041, 17
  %1043 = trunc i32 %7 to i16
  %1044 = add nuw nsw i16 %1042, %1043
  %1045 = mul nuw nsw i16 %1044, 15
  %1046 = urem i16 %1045, 17
  %1047 = trunc i32 %5 to i16
  %1048 = add nuw nsw i16 %1046, %1047
  %1049 = mul nuw nsw i16 %1048, 15
  %1050 = urem i16 %1049, 17
  %1051 = trunc i32 %3 to i16
  %1052 = add nuw nsw i16 %1050, %1051
  %1053 = mul nuw nsw i16 %1052, 15
  %1054 = urem i16 %1053, 17
  %1055 = trunc i32 %2 to i16
  %1056 = add nuw nsw i16 %1054, %1055
  %1057 = mul nuw nsw i16 %1056, 15
  %1058 = urem i16 %1057, 17
  %1059 = trunc i32 %30 to i16
  %1060 = add nuw nsw i16 %1058, %1059
  %1061 = urem i16 %1060, 17
  %1062 = zext i16 %1061 to i32
  %1063 = shl nuw nsw i32 1, %1062
  %1064 = tail call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %933)
  %1065 = or i32 %776, %710
  %1066 = or i32 %998, %1063
  %1067 = or i32 %1065, %1066
  %1068 = or i32 %1064, %1067
  %1069 = icmp eq i32 %1068, 52396
  br i1 %1069, label %1070, label %1723

1070:                                             ; preds = %644
  %1071 = load i64, i64 addrspace(4)* %623, align 8, !tbaa !5
  %1072 = inttoptr i64 %1071 to i8 addrspace(1)*
  %1073 = addrspacecast i8 addrspace(1)* %1072 to i8*
  %1074 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1075 = extractelement <2 x i64> %1074, i64 0
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %1085, label %1076

1076:                                             ; preds = %1070, %1076
  %1077 = phi i8 addrspace(4)* [ %1078, %1076 ], [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %1070 ]
  %1078 = getelementptr i8, i8 addrspace(4)* %1077, i64 1
  %1079 = load i8, i8 addrspace(4)* %1077, align 1
  %1080 = icmp eq i8 %1079, 0
  br i1 %1080, label %1081, label %1076

1081:                                             ; preds = %1076
  %1082 = addrspacecast i8 addrspace(4)* %1077 to i8*
  %1083 = ptrtoint i8* %1082 to i64
  %1084 = add i64 %1083, add (i64 sub (i64 0, i64 ptrtoint ([191 x i8]* addrspacecast ([191 x i8] addrspace(4)* @.str to [191 x i8]*) to i64)), i64 1)
  br label %1085

1085:                                             ; preds = %1081, %1070
  %1086 = phi i64 [ %1084, %1081 ], [ 0, %1070 ]
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %1087, label %1091

1087:                                             ; preds = %1085
  %1088 = and i64 %1075, -225
  %1089 = or i64 %1088, 32
  %1090 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1089, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %1532

1091:                                             ; preds = %1085
  %1092 = and i64 %1075, 2
  %1093 = and i64 %1075, -3
  %1094 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %1093, i64 0
  br label %1095

1095:                                             ; preds = %1521, %1091
  %1096 = phi i64 [ %1086, %1091 ], [ %1529, %1521 ]
  %1097 = phi i8 addrspace(4)* [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %1091 ], [ %1530, %1521 ]
  %1098 = phi <2 x i64> [ %1094, %1091 ], [ %1528, %1521 ]
  %1099 = icmp ugt i64 %1096, 56
  %1100 = extractelement <2 x i64> %1098, i64 0
  %1101 = or i64 %1100, %1092
  %1102 = insertelement <2 x i64> poison, i64 %1101, i64 0
  %1103 = select i1 %1099, <2 x i64> %1098, <2 x i64> %1102
  %1104 = tail call i64 @llvm.umin.i64(i64 %1096, i64 56)
  %1105 = trunc i64 %1104 to i32
  %1106 = extractelement <2 x i64> %1103, i64 0
  %1107 = icmp ugt i32 %1105, 7
  br i1 %1107, label %1110, label %1108

1108:                                             ; preds = %1095
  %1109 = icmp eq i32 %1105, 0
  br i1 %1109, label %1163, label %1150

1110:                                             ; preds = %1095
  %1111 = load i8, i8 addrspace(4)* %1097, align 1, !tbaa !9
  %1112 = zext i8 %1111 to i64
  %1113 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 1
  %1114 = load i8, i8 addrspace(4)* %1113, align 1, !tbaa !9
  %1115 = zext i8 %1114 to i64
  %1116 = shl nuw nsw i64 %1115, 8
  %1117 = or i64 %1116, %1112
  %1118 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 2
  %1119 = load i8, i8 addrspace(4)* %1118, align 1, !tbaa !9
  %1120 = zext i8 %1119 to i64
  %1121 = shl nuw nsw i64 %1120, 16
  %1122 = or i64 %1117, %1121
  %1123 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 3
  %1124 = load i8, i8 addrspace(4)* %1123, align 1, !tbaa !9
  %1125 = zext i8 %1124 to i64
  %1126 = shl nuw nsw i64 %1125, 24
  %1127 = or i64 %1122, %1126
  %1128 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 4
  %1129 = load i8, i8 addrspace(4)* %1128, align 1, !tbaa !9
  %1130 = zext i8 %1129 to i64
  %1131 = shl nuw nsw i64 %1130, 32
  %1132 = or i64 %1127, %1131
  %1133 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 5
  %1134 = load i8, i8 addrspace(4)* %1133, align 1, !tbaa !9
  %1135 = zext i8 %1134 to i64
  %1136 = shl nuw nsw i64 %1135, 40
  %1137 = or i64 %1132, %1136
  %1138 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 6
  %1139 = load i8, i8 addrspace(4)* %1138, align 1, !tbaa !9
  %1140 = zext i8 %1139 to i64
  %1141 = shl nuw nsw i64 %1140, 48
  %1142 = or i64 %1137, %1141
  %1143 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 7
  %1144 = load i8, i8 addrspace(4)* %1143, align 1, !tbaa !9
  %1145 = zext i8 %1144 to i64
  %1146 = shl nuw i64 %1145, 56
  %1147 = or i64 %1142, %1146
  %1148 = add nsw i32 %1105, -8
  %1149 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 8
  br label %1163

1150:                                             ; preds = %1108, %1150
  %1151 = phi i32 [ %1161, %1150 ], [ 0, %1108 ]
  %1152 = phi i64 [ %1160, %1150 ], [ 0, %1108 ]
  %1153 = zext i32 %1151 to i64
  %1154 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 %1153
  %1155 = load i8, i8 addrspace(4)* %1154, align 1, !tbaa !9
  %1156 = zext i8 %1155 to i64
  %1157 = shl i32 %1151, 3
  %1158 = zext i32 %1157 to i64
  %1159 = shl nuw i64 %1156, %1158
  %1160 = or i64 %1159, %1152
  %1161 = add nuw nsw i32 %1151, 1
  %1162 = icmp eq i32 %1161, %1105
  br i1 %1162, label %1163, label %1150, !llvm.loop !10

1163:                                             ; preds = %1150, %1110, %1108
  %1164 = phi i8 addrspace(4)* [ %1149, %1110 ], [ %1097, %1108 ], [ %1097, %1150 ]
  %1165 = phi i32 [ %1148, %1110 ], [ 0, %1108 ], [ 0, %1150 ]
  %1166 = phi i64 [ %1147, %1110 ], [ 0, %1108 ], [ %1160, %1150 ]
  %1167 = icmp ugt i32 %1165, 7
  br i1 %1167, label %1170, label %1168

1168:                                             ; preds = %1163
  %1169 = icmp eq i32 %1165, 0
  br i1 %1169, label %1223, label %1210

1170:                                             ; preds = %1163
  %1171 = load i8, i8 addrspace(4)* %1164, align 1, !tbaa !9
  %1172 = zext i8 %1171 to i64
  %1173 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 1
  %1174 = load i8, i8 addrspace(4)* %1173, align 1, !tbaa !9
  %1175 = zext i8 %1174 to i64
  %1176 = shl nuw nsw i64 %1175, 8
  %1177 = or i64 %1176, %1172
  %1178 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 2
  %1179 = load i8, i8 addrspace(4)* %1178, align 1, !tbaa !9
  %1180 = zext i8 %1179 to i64
  %1181 = shl nuw nsw i64 %1180, 16
  %1182 = or i64 %1177, %1181
  %1183 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 3
  %1184 = load i8, i8 addrspace(4)* %1183, align 1, !tbaa !9
  %1185 = zext i8 %1184 to i64
  %1186 = shl nuw nsw i64 %1185, 24
  %1187 = or i64 %1182, %1186
  %1188 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 4
  %1189 = load i8, i8 addrspace(4)* %1188, align 1, !tbaa !9
  %1190 = zext i8 %1189 to i64
  %1191 = shl nuw nsw i64 %1190, 32
  %1192 = or i64 %1187, %1191
  %1193 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 5
  %1194 = load i8, i8 addrspace(4)* %1193, align 1, !tbaa !9
  %1195 = zext i8 %1194 to i64
  %1196 = shl nuw nsw i64 %1195, 40
  %1197 = or i64 %1192, %1196
  %1198 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 6
  %1199 = load i8, i8 addrspace(4)* %1198, align 1, !tbaa !9
  %1200 = zext i8 %1199 to i64
  %1201 = shl nuw nsw i64 %1200, 48
  %1202 = or i64 %1197, %1201
  %1203 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 7
  %1204 = load i8, i8 addrspace(4)* %1203, align 1, !tbaa !9
  %1205 = zext i8 %1204 to i64
  %1206 = shl nuw i64 %1205, 56
  %1207 = or i64 %1202, %1206
  %1208 = add nsw i32 %1165, -8
  %1209 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 8
  br label %1223

1210:                                             ; preds = %1168, %1210
  %1211 = phi i32 [ %1221, %1210 ], [ 0, %1168 ]
  %1212 = phi i64 [ %1220, %1210 ], [ 0, %1168 ]
  %1213 = zext i32 %1211 to i64
  %1214 = getelementptr inbounds i8, i8 addrspace(4)* %1164, i64 %1213
  %1215 = load i8, i8 addrspace(4)* %1214, align 1, !tbaa !9
  %1216 = zext i8 %1215 to i64
  %1217 = shl i32 %1211, 3
  %1218 = zext i32 %1217 to i64
  %1219 = shl nuw i64 %1216, %1218
  %1220 = or i64 %1219, %1212
  %1221 = add nuw nsw i32 %1211, 1
  %1222 = icmp eq i32 %1221, %1165
  br i1 %1222, label %1223, label %1210

1223:                                             ; preds = %1210, %1170, %1168
  %1224 = phi i8 addrspace(4)* [ %1209, %1170 ], [ %1164, %1168 ], [ %1164, %1210 ]
  %1225 = phi i32 [ %1208, %1170 ], [ 0, %1168 ], [ 0, %1210 ]
  %1226 = phi i64 [ %1207, %1170 ], [ 0, %1168 ], [ %1220, %1210 ]
  %1227 = icmp ugt i32 %1225, 7
  br i1 %1227, label %1230, label %1228

1228:                                             ; preds = %1223
  %1229 = icmp eq i32 %1225, 0
  br i1 %1229, label %1283, label %1270

1230:                                             ; preds = %1223
  %1231 = load i8, i8 addrspace(4)* %1224, align 1, !tbaa !9
  %1232 = zext i8 %1231 to i64
  %1233 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 1
  %1234 = load i8, i8 addrspace(4)* %1233, align 1, !tbaa !9
  %1235 = zext i8 %1234 to i64
  %1236 = shl nuw nsw i64 %1235, 8
  %1237 = or i64 %1236, %1232
  %1238 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 2
  %1239 = load i8, i8 addrspace(4)* %1238, align 1, !tbaa !9
  %1240 = zext i8 %1239 to i64
  %1241 = shl nuw nsw i64 %1240, 16
  %1242 = or i64 %1237, %1241
  %1243 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 3
  %1244 = load i8, i8 addrspace(4)* %1243, align 1, !tbaa !9
  %1245 = zext i8 %1244 to i64
  %1246 = shl nuw nsw i64 %1245, 24
  %1247 = or i64 %1242, %1246
  %1248 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 4
  %1249 = load i8, i8 addrspace(4)* %1248, align 1, !tbaa !9
  %1250 = zext i8 %1249 to i64
  %1251 = shl nuw nsw i64 %1250, 32
  %1252 = or i64 %1247, %1251
  %1253 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 5
  %1254 = load i8, i8 addrspace(4)* %1253, align 1, !tbaa !9
  %1255 = zext i8 %1254 to i64
  %1256 = shl nuw nsw i64 %1255, 40
  %1257 = or i64 %1252, %1256
  %1258 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 6
  %1259 = load i8, i8 addrspace(4)* %1258, align 1, !tbaa !9
  %1260 = zext i8 %1259 to i64
  %1261 = shl nuw nsw i64 %1260, 48
  %1262 = or i64 %1257, %1261
  %1263 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 7
  %1264 = load i8, i8 addrspace(4)* %1263, align 1, !tbaa !9
  %1265 = zext i8 %1264 to i64
  %1266 = shl nuw i64 %1265, 56
  %1267 = or i64 %1262, %1266
  %1268 = add nsw i32 %1225, -8
  %1269 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 8
  br label %1283

1270:                                             ; preds = %1228, %1270
  %1271 = phi i32 [ %1281, %1270 ], [ 0, %1228 ]
  %1272 = phi i64 [ %1280, %1270 ], [ 0, %1228 ]
  %1273 = zext i32 %1271 to i64
  %1274 = getelementptr inbounds i8, i8 addrspace(4)* %1224, i64 %1273
  %1275 = load i8, i8 addrspace(4)* %1274, align 1, !tbaa !9
  %1276 = zext i8 %1275 to i64
  %1277 = shl i32 %1271, 3
  %1278 = zext i32 %1277 to i64
  %1279 = shl nuw i64 %1276, %1278
  %1280 = or i64 %1279, %1272
  %1281 = add nuw nsw i32 %1271, 1
  %1282 = icmp eq i32 %1281, %1225
  br i1 %1282, label %1283, label %1270

1283:                                             ; preds = %1270, %1230, %1228
  %1284 = phi i8 addrspace(4)* [ %1269, %1230 ], [ %1224, %1228 ], [ %1224, %1270 ]
  %1285 = phi i32 [ %1268, %1230 ], [ 0, %1228 ], [ 0, %1270 ]
  %1286 = phi i64 [ %1267, %1230 ], [ 0, %1228 ], [ %1280, %1270 ]
  %1287 = icmp ugt i32 %1285, 7
  br i1 %1287, label %1290, label %1288

1288:                                             ; preds = %1283
  %1289 = icmp eq i32 %1285, 0
  br i1 %1289, label %1343, label %1330

1290:                                             ; preds = %1283
  %1291 = load i8, i8 addrspace(4)* %1284, align 1, !tbaa !9
  %1292 = zext i8 %1291 to i64
  %1293 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 1
  %1294 = load i8, i8 addrspace(4)* %1293, align 1, !tbaa !9
  %1295 = zext i8 %1294 to i64
  %1296 = shl nuw nsw i64 %1295, 8
  %1297 = or i64 %1296, %1292
  %1298 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 2
  %1299 = load i8, i8 addrspace(4)* %1298, align 1, !tbaa !9
  %1300 = zext i8 %1299 to i64
  %1301 = shl nuw nsw i64 %1300, 16
  %1302 = or i64 %1297, %1301
  %1303 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 3
  %1304 = load i8, i8 addrspace(4)* %1303, align 1, !tbaa !9
  %1305 = zext i8 %1304 to i64
  %1306 = shl nuw nsw i64 %1305, 24
  %1307 = or i64 %1302, %1306
  %1308 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 4
  %1309 = load i8, i8 addrspace(4)* %1308, align 1, !tbaa !9
  %1310 = zext i8 %1309 to i64
  %1311 = shl nuw nsw i64 %1310, 32
  %1312 = or i64 %1307, %1311
  %1313 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 5
  %1314 = load i8, i8 addrspace(4)* %1313, align 1, !tbaa !9
  %1315 = zext i8 %1314 to i64
  %1316 = shl nuw nsw i64 %1315, 40
  %1317 = or i64 %1312, %1316
  %1318 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 6
  %1319 = load i8, i8 addrspace(4)* %1318, align 1, !tbaa !9
  %1320 = zext i8 %1319 to i64
  %1321 = shl nuw nsw i64 %1320, 48
  %1322 = or i64 %1317, %1321
  %1323 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 7
  %1324 = load i8, i8 addrspace(4)* %1323, align 1, !tbaa !9
  %1325 = zext i8 %1324 to i64
  %1326 = shl nuw i64 %1325, 56
  %1327 = or i64 %1322, %1326
  %1328 = add nsw i32 %1285, -8
  %1329 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 8
  br label %1343

1330:                                             ; preds = %1288, %1330
  %1331 = phi i32 [ %1341, %1330 ], [ 0, %1288 ]
  %1332 = phi i64 [ %1340, %1330 ], [ 0, %1288 ]
  %1333 = zext i32 %1331 to i64
  %1334 = getelementptr inbounds i8, i8 addrspace(4)* %1284, i64 %1333
  %1335 = load i8, i8 addrspace(4)* %1334, align 1, !tbaa !9
  %1336 = zext i8 %1335 to i64
  %1337 = shl i32 %1331, 3
  %1338 = zext i32 %1337 to i64
  %1339 = shl nuw i64 %1336, %1338
  %1340 = or i64 %1339, %1332
  %1341 = add nuw nsw i32 %1331, 1
  %1342 = icmp eq i32 %1341, %1285
  br i1 %1342, label %1343, label %1330

1343:                                             ; preds = %1330, %1290, %1288
  %1344 = phi i8 addrspace(4)* [ %1329, %1290 ], [ %1284, %1288 ], [ %1284, %1330 ]
  %1345 = phi i32 [ %1328, %1290 ], [ 0, %1288 ], [ 0, %1330 ]
  %1346 = phi i64 [ %1327, %1290 ], [ 0, %1288 ], [ %1340, %1330 ]
  %1347 = icmp ugt i32 %1345, 7
  br i1 %1347, label %1350, label %1348

1348:                                             ; preds = %1343
  %1349 = icmp eq i32 %1345, 0
  br i1 %1349, label %1403, label %1390

1350:                                             ; preds = %1343
  %1351 = load i8, i8 addrspace(4)* %1344, align 1, !tbaa !9
  %1352 = zext i8 %1351 to i64
  %1353 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 1
  %1354 = load i8, i8 addrspace(4)* %1353, align 1, !tbaa !9
  %1355 = zext i8 %1354 to i64
  %1356 = shl nuw nsw i64 %1355, 8
  %1357 = or i64 %1356, %1352
  %1358 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 2
  %1359 = load i8, i8 addrspace(4)* %1358, align 1, !tbaa !9
  %1360 = zext i8 %1359 to i64
  %1361 = shl nuw nsw i64 %1360, 16
  %1362 = or i64 %1357, %1361
  %1363 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 3
  %1364 = load i8, i8 addrspace(4)* %1363, align 1, !tbaa !9
  %1365 = zext i8 %1364 to i64
  %1366 = shl nuw nsw i64 %1365, 24
  %1367 = or i64 %1362, %1366
  %1368 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 4
  %1369 = load i8, i8 addrspace(4)* %1368, align 1, !tbaa !9
  %1370 = zext i8 %1369 to i64
  %1371 = shl nuw nsw i64 %1370, 32
  %1372 = or i64 %1367, %1371
  %1373 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 5
  %1374 = load i8, i8 addrspace(4)* %1373, align 1, !tbaa !9
  %1375 = zext i8 %1374 to i64
  %1376 = shl nuw nsw i64 %1375, 40
  %1377 = or i64 %1372, %1376
  %1378 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 6
  %1379 = load i8, i8 addrspace(4)* %1378, align 1, !tbaa !9
  %1380 = zext i8 %1379 to i64
  %1381 = shl nuw nsw i64 %1380, 48
  %1382 = or i64 %1377, %1381
  %1383 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 7
  %1384 = load i8, i8 addrspace(4)* %1383, align 1, !tbaa !9
  %1385 = zext i8 %1384 to i64
  %1386 = shl nuw i64 %1385, 56
  %1387 = or i64 %1382, %1386
  %1388 = add nsw i32 %1345, -8
  %1389 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 8
  br label %1403

1390:                                             ; preds = %1348, %1390
  %1391 = phi i32 [ %1401, %1390 ], [ 0, %1348 ]
  %1392 = phi i64 [ %1400, %1390 ], [ 0, %1348 ]
  %1393 = zext i32 %1391 to i64
  %1394 = getelementptr inbounds i8, i8 addrspace(4)* %1344, i64 %1393
  %1395 = load i8, i8 addrspace(4)* %1394, align 1, !tbaa !9
  %1396 = zext i8 %1395 to i64
  %1397 = shl i32 %1391, 3
  %1398 = zext i32 %1397 to i64
  %1399 = shl nuw i64 %1396, %1398
  %1400 = or i64 %1399, %1392
  %1401 = add nuw nsw i32 %1391, 1
  %1402 = icmp eq i32 %1401, %1345
  br i1 %1402, label %1403, label %1390

1403:                                             ; preds = %1390, %1350, %1348
  %1404 = phi i8 addrspace(4)* [ %1389, %1350 ], [ %1344, %1348 ], [ %1344, %1390 ]
  %1405 = phi i32 [ %1388, %1350 ], [ 0, %1348 ], [ 0, %1390 ]
  %1406 = phi i64 [ %1387, %1350 ], [ 0, %1348 ], [ %1400, %1390 ]
  %1407 = icmp ugt i32 %1405, 7
  br i1 %1407, label %1410, label %1408

1408:                                             ; preds = %1403
  %1409 = icmp eq i32 %1405, 0
  br i1 %1409, label %1463, label %1450

1410:                                             ; preds = %1403
  %1411 = load i8, i8 addrspace(4)* %1404, align 1, !tbaa !9
  %1412 = zext i8 %1411 to i64
  %1413 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 1
  %1414 = load i8, i8 addrspace(4)* %1413, align 1, !tbaa !9
  %1415 = zext i8 %1414 to i64
  %1416 = shl nuw nsw i64 %1415, 8
  %1417 = or i64 %1416, %1412
  %1418 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 2
  %1419 = load i8, i8 addrspace(4)* %1418, align 1, !tbaa !9
  %1420 = zext i8 %1419 to i64
  %1421 = shl nuw nsw i64 %1420, 16
  %1422 = or i64 %1417, %1421
  %1423 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 3
  %1424 = load i8, i8 addrspace(4)* %1423, align 1, !tbaa !9
  %1425 = zext i8 %1424 to i64
  %1426 = shl nuw nsw i64 %1425, 24
  %1427 = or i64 %1422, %1426
  %1428 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 4
  %1429 = load i8, i8 addrspace(4)* %1428, align 1, !tbaa !9
  %1430 = zext i8 %1429 to i64
  %1431 = shl nuw nsw i64 %1430, 32
  %1432 = or i64 %1427, %1431
  %1433 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 5
  %1434 = load i8, i8 addrspace(4)* %1433, align 1, !tbaa !9
  %1435 = zext i8 %1434 to i64
  %1436 = shl nuw nsw i64 %1435, 40
  %1437 = or i64 %1432, %1436
  %1438 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 6
  %1439 = load i8, i8 addrspace(4)* %1438, align 1, !tbaa !9
  %1440 = zext i8 %1439 to i64
  %1441 = shl nuw nsw i64 %1440, 48
  %1442 = or i64 %1437, %1441
  %1443 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 7
  %1444 = load i8, i8 addrspace(4)* %1443, align 1, !tbaa !9
  %1445 = zext i8 %1444 to i64
  %1446 = shl nuw i64 %1445, 56
  %1447 = or i64 %1442, %1446
  %1448 = add nsw i32 %1405, -8
  %1449 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 8
  br label %1463

1450:                                             ; preds = %1408, %1450
  %1451 = phi i32 [ %1461, %1450 ], [ 0, %1408 ]
  %1452 = phi i64 [ %1460, %1450 ], [ 0, %1408 ]
  %1453 = zext i32 %1451 to i64
  %1454 = getelementptr inbounds i8, i8 addrspace(4)* %1404, i64 %1453
  %1455 = load i8, i8 addrspace(4)* %1454, align 1, !tbaa !9
  %1456 = zext i8 %1455 to i64
  %1457 = shl i32 %1451, 3
  %1458 = zext i32 %1457 to i64
  %1459 = shl nuw i64 %1456, %1458
  %1460 = or i64 %1459, %1452
  %1461 = add nuw nsw i32 %1451, 1
  %1462 = icmp eq i32 %1461, %1405
  br i1 %1462, label %1463, label %1450

1463:                                             ; preds = %1450, %1410, %1408
  %1464 = phi i8 addrspace(4)* [ %1449, %1410 ], [ %1404, %1408 ], [ %1404, %1450 ]
  %1465 = phi i32 [ %1448, %1410 ], [ 0, %1408 ], [ 0, %1450 ]
  %1466 = phi i64 [ %1447, %1410 ], [ 0, %1408 ], [ %1460, %1450 ]
  %1467 = icmp ugt i32 %1465, 7
  br i1 %1467, label %1470, label %1468

1468:                                             ; preds = %1463
  %1469 = icmp eq i32 %1465, 0
  br i1 %1469, label %1521, label %1508

1470:                                             ; preds = %1463
  %1471 = load i8, i8 addrspace(4)* %1464, align 1, !tbaa !9
  %1472 = zext i8 %1471 to i64
  %1473 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 1
  %1474 = load i8, i8 addrspace(4)* %1473, align 1, !tbaa !9
  %1475 = zext i8 %1474 to i64
  %1476 = shl nuw nsw i64 %1475, 8
  %1477 = or i64 %1476, %1472
  %1478 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 2
  %1479 = load i8, i8 addrspace(4)* %1478, align 1, !tbaa !9
  %1480 = zext i8 %1479 to i64
  %1481 = shl nuw nsw i64 %1480, 16
  %1482 = or i64 %1477, %1481
  %1483 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 3
  %1484 = load i8, i8 addrspace(4)* %1483, align 1, !tbaa !9
  %1485 = zext i8 %1484 to i64
  %1486 = shl nuw nsw i64 %1485, 24
  %1487 = or i64 %1482, %1486
  %1488 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 4
  %1489 = load i8, i8 addrspace(4)* %1488, align 1, !tbaa !9
  %1490 = zext i8 %1489 to i64
  %1491 = shl nuw nsw i64 %1490, 32
  %1492 = or i64 %1487, %1491
  %1493 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 5
  %1494 = load i8, i8 addrspace(4)* %1493, align 1, !tbaa !9
  %1495 = zext i8 %1494 to i64
  %1496 = shl nuw nsw i64 %1495, 40
  %1497 = or i64 %1492, %1496
  %1498 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 6
  %1499 = load i8, i8 addrspace(4)* %1498, align 1, !tbaa !9
  %1500 = zext i8 %1499 to i64
  %1501 = shl nuw nsw i64 %1500, 48
  %1502 = or i64 %1497, %1501
  %1503 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 7
  %1504 = load i8, i8 addrspace(4)* %1503, align 1, !tbaa !9
  %1505 = zext i8 %1504 to i64
  %1506 = shl nuw i64 %1505, 56
  %1507 = or i64 %1502, %1506
  br label %1521

1508:                                             ; preds = %1468, %1508
  %1509 = phi i32 [ %1519, %1508 ], [ 0, %1468 ]
  %1510 = phi i64 [ %1518, %1508 ], [ 0, %1468 ]
  %1511 = zext i32 %1509 to i64
  %1512 = getelementptr inbounds i8, i8 addrspace(4)* %1464, i64 %1511
  %1513 = load i8, i8 addrspace(4)* %1512, align 1, !tbaa !9
  %1514 = zext i8 %1513 to i64
  %1515 = shl i32 %1509, 3
  %1516 = zext i32 %1515 to i64
  %1517 = shl nuw i64 %1514, %1516
  %1518 = or i64 %1517, %1510
  %1519 = add nuw nsw i32 %1509, 1
  %1520 = icmp eq i32 %1519, %1465
  br i1 %1520, label %1521, label %1508

1521:                                             ; preds = %1508, %1470, %1468
  %1522 = phi i64 [ %1507, %1470 ], [ 0, %1468 ], [ %1518, %1508 ]
  %1523 = shl nuw nsw i64 %1104, 2
  %1524 = add nuw nsw i64 %1523, 28
  %1525 = and i64 %1524, 480
  %1526 = and i64 %1106, -225
  %1527 = or i64 %1526, %1525
  %1528 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1527, i64 noundef %1166, i64 noundef %1226, i64 noundef %1286, i64 noundef %1346, i64 noundef %1406, i64 noundef %1466, i64 noundef %1522) #11
  %1529 = sub i64 %1096, %1104
  %1530 = getelementptr inbounds i8, i8 addrspace(4)* %1097, i64 %1104
  %1531 = icmp eq i64 %1529, 0
  br i1 %1531, label %1532, label %1095

1532:                                             ; preds = %1521, %1087
  %1533 = phi <2 x i64> [ %1090, %1087 ], [ %1528, %1521 ]
  %1534 = extractelement <2 x i64> %1533, i64 0
  %1535 = zext i32 %30 to i64
  %1536 = and i64 %1534, -225
  %1537 = or i64 %1536, 32
  %1538 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1537, i64 noundef %1535, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1539 = extractelement <2 x i64> %1538, i64 0
  %1540 = and i64 %1539, -225
  %1541 = or i64 %1540, 32
  %1542 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1541, i64 noundef %624, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1543 = extractelement <2 x i64> %1542, i64 0
  %1544 = and i64 %1543, -225
  %1545 = or i64 %1544, 32
  %1546 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1545, i64 noundef %625, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1547 = extractelement <2 x i64> %1546, i64 0
  %1548 = and i64 %1547, -225
  %1549 = or i64 %1548, 32
  %1550 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1549, i64 noundef %626, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1551 = extractelement <2 x i64> %1550, i64 0
  %1552 = and i64 %1551, -225
  %1553 = or i64 %1552, 32
  %1554 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1553, i64 noundef %627, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1555 = extractelement <2 x i64> %1554, i64 0
  %1556 = and i64 %1555, -225
  %1557 = or i64 %1556, 32
  %1558 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1557, i64 noundef %628, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1559 = extractelement <2 x i64> %1558, i64 0
  %1560 = and i64 %1559, -225
  %1561 = or i64 %1560, 32
  %1562 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1561, i64 noundef %629, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1563 = extractelement <2 x i64> %1562, i64 0
  %1564 = and i64 %1563, -225
  %1565 = or i64 %1564, 32
  %1566 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1565, i64 noundef %630, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1567 = extractelement <2 x i64> %1566, i64 0
  %1568 = and i64 %1567, -225
  %1569 = or i64 %1568, 32
  %1570 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1569, i64 noundef %631, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1571 = extractelement <2 x i64> %1570, i64 0
  %1572 = and i64 %1571, -225
  %1573 = or i64 %1572, 32
  %1574 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1573, i64 noundef %632, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1575 = extractelement <2 x i64> %1574, i64 0
  %1576 = and i64 %1575, -225
  %1577 = or i64 %1576, 32
  %1578 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1577, i64 noundef %633, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1579 = extractelement <2 x i64> %1578, i64 0
  %1580 = and i64 %1579, -225
  %1581 = or i64 %1580, 32
  %1582 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1581, i64 noundef %634, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1583 = extractelement <2 x i64> %1582, i64 0
  %1584 = and i64 %1583, -225
  %1585 = or i64 %1584, 32
  %1586 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1585, i64 noundef %635, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1587 = extractelement <2 x i64> %1586, i64 0
  %1588 = and i64 %1587, -225
  %1589 = or i64 %1588, 32
  %1590 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1589, i64 noundef %636, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1591 = extractelement <2 x i64> %1590, i64 0
  %1592 = and i64 %1591, -225
  %1593 = or i64 %1592, 32
  %1594 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1593, i64 noundef %637, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1595 = extractelement <2 x i64> %1594, i64 0
  %1596 = and i64 %1595, -225
  %1597 = or i64 %1596, 32
  %1598 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1597, i64 noundef %638, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1599 = extractelement <2 x i64> %1598, i64 0
  %1600 = zext i16 %32 to i64
  %1601 = and i64 %1599, -225
  %1602 = or i64 %1601, 32
  %1603 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1602, i64 noundef %1600, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1604 = extractelement <2 x i64> %1603, i64 0
  %1605 = zext i16 %97 to i64
  %1606 = and i64 %1604, -225
  %1607 = or i64 %1606, 32
  %1608 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1607, i64 noundef %1605, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1609 = extractelement <2 x i64> %1608, i64 0
  %1610 = zext i16 %181 to i64
  %1611 = and i64 %1609, -225
  %1612 = or i64 %1611, 32
  %1613 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1612, i64 noundef %1610, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1614 = extractelement <2 x i64> %1613, i64 0
  %1615 = zext i16 %265 to i64
  %1616 = and i64 %1614, -225
  %1617 = or i64 %1616, 32
  %1618 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1617, i64 noundef %1615, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1619 = extractelement <2 x i64> %1618, i64 0
  %1620 = zext i16 %349 to i64
  %1621 = and i64 %1619, -225
  %1622 = or i64 %1621, 32
  %1623 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1622, i64 noundef %1620, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1624 = extractelement <2 x i64> %1623, i64 0
  %1625 = zext i16 %433 to i64
  %1626 = and i64 %1624, -225
  %1627 = or i64 %1626, 32
  %1628 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1627, i64 noundef %1625, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1629 = extractelement <2 x i64> %1628, i64 0
  %1630 = zext i16 %517 to i64
  %1631 = and i64 %1629, -225
  %1632 = or i64 %1631, 32
  %1633 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1632, i64 noundef %1630, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1634 = extractelement <2 x i64> %1633, i64 0
  %1635 = zext i16 %601 to i64
  %1636 = and i64 %1634, -225
  %1637 = or i64 %1636, 32
  %1638 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1637, i64 noundef %1635, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1639 = extractelement <2 x i64> %1638, i64 0
  %1640 = zext i16 %708 to i64
  %1641 = and i64 %1639, -225
  %1642 = or i64 %1641, 32
  %1643 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1642, i64 noundef %1640, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1644 = extractelement <2 x i64> %1643, i64 0
  %1645 = zext i16 %774 to i64
  %1646 = and i64 %1644, -225
  %1647 = or i64 %1646, 32
  %1648 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1647, i64 noundef %1645, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1649 = extractelement <2 x i64> %1648, i64 0
  %1650 = extractelement <4 x i16> %931, i64 0
  %1651 = zext i16 %1650 to i64
  %1652 = and i64 %1649, -225
  %1653 = or i64 %1652, 32
  %1654 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1653, i64 noundef %1651, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1655 = extractelement <2 x i64> %1654, i64 0
  %1656 = extractelement <4 x i16> %931, i64 1
  %1657 = zext i16 %1656 to i64
  %1658 = and i64 %1655, -225
  %1659 = or i64 %1658, 32
  %1660 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1659, i64 noundef %1657, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1661 = extractelement <2 x i64> %1660, i64 0
  %1662 = extractelement <4 x i16> %931, i64 2
  %1663 = zext i16 %1662 to i64
  %1664 = and i64 %1661, -225
  %1665 = or i64 %1664, 32
  %1666 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1665, i64 noundef %1663, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1667 = extractelement <2 x i64> %1666, i64 0
  %1668 = extractelement <4 x i16> %931, i64 3
  %1669 = zext i16 %1668 to i64
  %1670 = and i64 %1667, -225
  %1671 = or i64 %1670, 32
  %1672 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1671, i64 noundef %1669, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1673 = extractelement <2 x i64> %1672, i64 0
  %1674 = zext i16 %996 to i64
  %1675 = and i64 %1673, -225
  %1676 = or i64 %1675, 32
  %1677 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1676, i64 noundef %1674, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1678 = extractelement <2 x i64> %1677, i64 0
  %1679 = zext i16 %1061 to i64
  %1680 = and i64 %1678, -225
  %1681 = or i64 %1680, 32
  %1682 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1681, i64 noundef %1679, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1683 = extractelement <2 x i64> %1682, i64 0
  %1684 = and i64 %1683, -225
  %1685 = or i64 %1684, 32
  %1686 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1685, i64 noundef %639, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1687 = extractelement <2 x i64> %1686, i64 0
  %1688 = and i64 %1687, -225
  %1689 = or i64 %1688, 32
  %1690 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1689, i64 noundef %640, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1691 = extractelement <2 x i64> %1690, i64 0
  %1692 = and i64 %1691, -225
  %1693 = or i64 %1692, 32
  %1694 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1693, i64 noundef %641, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1695 = extractelement <2 x i64> %1694, i64 0
  %1696 = and i64 %1695, -225
  %1697 = or i64 %1696, 32
  %1698 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1697, i64 noundef %642, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1699 = extractelement <2 x i64> %1698, i64 0
  %1700 = and i64 %1699, -225
  %1701 = or i64 %1700, 32
  %1702 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1701, i64 noundef 52396, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1703 = extractelement <2 x i64> %1702, i64 0
  %1704 = and i64 %1703, -225
  %1705 = or i64 %1704, 32
  %1706 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1705, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1707 = extractelement <2 x i64> %1706, i64 0
  %1708 = and i64 %1707, -225
  %1709 = or i64 %1708, 32
  %1710 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1709, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1711 = extractelement <2 x i64> %1710, i64 0
  %1712 = and i64 %1711, -225
  %1713 = or i64 %1712, 32
  %1714 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1713, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1715 = extractelement <2 x i64> %1714, i64 0
  %1716 = and i64 %1715, -225
  %1717 = or i64 %1716, 32
  %1718 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1717, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %1719 = extractelement <2 x i64> %1718, i64 0
  %1720 = and i64 %1719, -227
  %1721 = or i64 %1720, 34
  %1722 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %1073, i64 noundef %1721, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %1723

1723:                                             ; preds = %0, %1532, %644
  %1724 = phi i32 [ 52396, %1532 ], [ %1068, %644 ], [ 0, %0 ]
  %1725 = icmp eq i32 %616, 13139
  br i1 %1725, label %1726, label %2785

1726:                                             ; preds = %1723
  %1727 = add nuw nsw i32 %30, 1
  %1728 = shl nuw nsw i32 %29, 3
  %1729 = add nuw nsw i32 %1728, 64
  %1730 = urem i32 %1729, 17
  %1731 = add nuw nsw i32 %1730, %27
  %1732 = shl nuw nsw i32 %1731, 3
  %1733 = urem i32 %1732, 17
  %1734 = add nuw nsw i32 %1733, %25
  %1735 = shl nuw nsw i32 %1734, 3
  %1736 = urem i32 %1735, 17
  %1737 = add nuw nsw i32 %1736, %23
  %1738 = shl nuw nsw i32 %1737, 3
  %1739 = urem i32 %1738, 17
  %1740 = add nuw nsw i32 %1739, %21
  %1741 = shl nuw nsw i32 %1740, 3
  %1742 = urem i32 %1741, 17
  %1743 = add nuw nsw i32 %1742, %19
  %1744 = shl nuw nsw i32 %1743, 3
  %1745 = urem i32 %1744, 17
  %1746 = add nuw nsw i32 %1745, %17
  %1747 = shl nuw nsw i32 %1746, 3
  %1748 = urem i32 %1747, 17
  %1749 = add nuw nsw i32 %1748, %15
  %1750 = shl nuw nsw i32 %1749, 3
  %1751 = urem i32 %1750, 17
  %1752 = add nuw nsw i32 %1751, %13
  %1753 = shl nuw nsw i32 %1752, 3
  %1754 = urem i32 %1753, 17
  %1755 = add nuw nsw i32 %1754, %11
  %1756 = shl nuw nsw i32 %1755, 3
  %1757 = urem i32 %1756, 17
  %1758 = add nuw nsw i32 %1757, %9
  %1759 = shl nuw nsw i32 %1758, 3
  %1760 = urem i32 %1759, 17
  %1761 = add nuw nsw i32 %1760, %7
  %1762 = shl nuw nsw i32 %1761, 3
  %1763 = urem i32 %1762, 17
  %1764 = add nuw nsw i32 %1763, %5
  %1765 = shl nuw nsw i32 %1764, 3
  %1766 = urem i32 %1765, 17
  %1767 = add nuw nsw i32 %1766, %3
  %1768 = shl nuw nsw i32 %1767, 3
  %1769 = urem i32 %1768, 17
  %1770 = add nuw nsw i32 %1769, %2
  %1771 = shl nuw nsw i32 %1770, 3
  %1772 = urem i32 %1771, 17
  %1773 = add nuw nsw i32 %1727, %1772
  %1774 = urem i32 %1773, 17
  %1775 = shl nuw nsw i32 1, %1774
  %1776 = mul nuw nsw i32 %29, 9
  %1777 = add nuw nsw i32 %1776, 81
  %1778 = urem i32 %1777, 17
  %1779 = add nuw nsw i32 %1778, %27
  %1780 = mul nuw nsw i32 %1779, 9
  %1781 = urem i32 %1780, 17
  %1782 = add nuw nsw i32 %1781, %25
  %1783 = mul nuw nsw i32 %1782, 9
  %1784 = urem i32 %1783, 17
  %1785 = add nuw nsw i32 %1784, %23
  %1786 = mul nuw nsw i32 %1785, 9
  %1787 = urem i32 %1786, 17
  %1788 = add nuw nsw i32 %1787, %21
  %1789 = mul nuw nsw i32 %1788, 9
  %1790 = urem i32 %1789, 17
  %1791 = add nuw nsw i32 %1790, %19
  %1792 = mul nuw nsw i32 %1791, 9
  %1793 = urem i32 %1792, 17
  %1794 = add nuw nsw i32 %1793, %17
  %1795 = mul nuw nsw i32 %1794, 9
  %1796 = urem i32 %1795, 17
  %1797 = add nuw nsw i32 %1796, %15
  %1798 = mul nuw nsw i32 %1797, 9
  %1799 = urem i32 %1798, 17
  %1800 = add nuw nsw i32 %1799, %13
  %1801 = mul nuw nsw i32 %1800, 9
  %1802 = urem i32 %1801, 17
  %1803 = add nuw nsw i32 %1802, %11
  %1804 = mul nuw nsw i32 %1803, 9
  %1805 = urem i32 %1804, 17
  %1806 = add nuw nsw i32 %1805, %9
  %1807 = mul nuw nsw i32 %1806, 9
  %1808 = urem i32 %1807, 17
  %1809 = add nuw nsw i32 %1808, %7
  %1810 = mul nuw nsw i32 %1809, 9
  %1811 = urem i32 %1810, 17
  %1812 = add nuw nsw i32 %1811, %5
  %1813 = mul nuw nsw i32 %1812, 9
  %1814 = urem i32 %1813, 17
  %1815 = add nuw nsw i32 %1814, %3
  %1816 = mul nuw nsw i32 %1815, 9
  %1817 = urem i32 %1816, 17
  %1818 = add nuw nsw i32 %1817, %2
  %1819 = mul nuw nsw i32 %1818, 9
  %1820 = urem i32 %1819, 17
  %1821 = add nuw nsw i32 %1727, %1820
  %1822 = urem i32 %1821, 17
  %1823 = shl nuw nsw i32 1, %1822
  %1824 = or i32 %1775, %1823
  %1825 = mul nuw nsw i32 %29, 10
  %1826 = add nuw nsw i32 %1825, 100
  %1827 = urem i32 %1826, 17
  %1828 = add nuw nsw i32 %1827, %27
  %1829 = mul nuw nsw i32 %1828, 10
  %1830 = urem i32 %1829, 17
  %1831 = add nuw nsw i32 %1830, %25
  %1832 = mul nuw nsw i32 %1831, 10
  %1833 = urem i32 %1832, 17
  %1834 = add nuw nsw i32 %1833, %23
  %1835 = mul nuw nsw i32 %1834, 10
  %1836 = urem i32 %1835, 17
  %1837 = add nuw nsw i32 %1836, %21
  %1838 = mul nuw nsw i32 %1837, 10
  %1839 = urem i32 %1838, 17
  %1840 = add nuw nsw i32 %1839, %19
  %1841 = mul nuw nsw i32 %1840, 10
  %1842 = urem i32 %1841, 17
  %1843 = add nuw nsw i32 %1842, %17
  %1844 = mul nuw nsw i32 %1843, 10
  %1845 = urem i32 %1844, 17
  %1846 = add nuw nsw i32 %1845, %15
  %1847 = mul nuw nsw i32 %1846, 10
  %1848 = urem i32 %1847, 17
  %1849 = add nuw nsw i32 %1848, %13
  %1850 = mul nuw nsw i32 %1849, 10
  %1851 = urem i32 %1850, 17
  %1852 = add nuw nsw i32 %1851, %11
  %1853 = mul nuw nsw i32 %1852, 10
  %1854 = urem i32 %1853, 17
  %1855 = add nuw nsw i32 %1854, %9
  %1856 = mul nuw nsw i32 %1855, 10
  %1857 = urem i32 %1856, 17
  %1858 = add nuw nsw i32 %1857, %7
  %1859 = mul nuw nsw i32 %1858, 10
  %1860 = urem i32 %1859, 17
  %1861 = add nuw nsw i32 %1860, %5
  %1862 = mul nuw nsw i32 %1861, 10
  %1863 = urem i32 %1862, 17
  %1864 = add nuw nsw i32 %1863, %3
  %1865 = mul nuw nsw i32 %1864, 10
  %1866 = urem i32 %1865, 17
  %1867 = add nuw nsw i32 %1866, %2
  %1868 = mul nuw nsw i32 %1867, 10
  %1869 = urem i32 %1868, 17
  %1870 = add nuw nsw i32 %1727, %1869
  %1871 = urem i32 %1870, 17
  %1872 = shl nuw nsw i32 1, %1871
  %1873 = or i32 %1824, %1872
  %1874 = mul nuw nsw i32 %29, 11
  %1875 = add nuw nsw i32 %1874, 121
  %1876 = urem i32 %1875, 17
  %1877 = add nuw nsw i32 %1876, %27
  %1878 = mul nuw nsw i32 %1877, 11
  %1879 = urem i32 %1878, 17
  %1880 = add nuw nsw i32 %1879, %25
  %1881 = mul nuw nsw i32 %1880, 11
  %1882 = urem i32 %1881, 17
  %1883 = add nuw nsw i32 %1882, %23
  %1884 = mul nuw nsw i32 %1883, 11
  %1885 = urem i32 %1884, 17
  %1886 = add nuw nsw i32 %1885, %21
  %1887 = mul nuw nsw i32 %1886, 11
  %1888 = urem i32 %1887, 17
  %1889 = add nuw nsw i32 %1888, %19
  %1890 = mul nuw nsw i32 %1889, 11
  %1891 = urem i32 %1890, 17
  %1892 = add nuw nsw i32 %1891, %17
  %1893 = mul nuw nsw i32 %1892, 11
  %1894 = urem i32 %1893, 17
  %1895 = add nuw nsw i32 %1894, %15
  %1896 = mul nuw nsw i32 %1895, 11
  %1897 = urem i32 %1896, 17
  %1898 = add nuw nsw i32 %1897, %13
  %1899 = mul nuw nsw i32 %1898, 11
  %1900 = urem i32 %1899, 17
  %1901 = add nuw nsw i32 %1900, %11
  %1902 = mul nuw nsw i32 %1901, 11
  %1903 = urem i32 %1902, 17
  %1904 = add nuw nsw i32 %1903, %9
  %1905 = mul nuw nsw i32 %1904, 11
  %1906 = urem i32 %1905, 17
  %1907 = add nuw nsw i32 %1906, %7
  %1908 = mul nuw nsw i32 %1907, 11
  %1909 = urem i32 %1908, 17
  %1910 = add nuw nsw i32 %1909, %5
  %1911 = mul nuw nsw i32 %1910, 11
  %1912 = urem i32 %1911, 17
  %1913 = add nuw nsw i32 %1912, %3
  %1914 = mul nuw nsw i32 %1913, 11
  %1915 = urem i32 %1914, 17
  %1916 = add nuw nsw i32 %1915, %2
  %1917 = mul nuw nsw i32 %1916, 11
  %1918 = urem i32 %1917, 17
  %1919 = add nuw nsw i32 %1727, %1918
  %1920 = urem i32 %1919, 17
  %1921 = shl nuw nsw i32 1, %1920
  %1922 = or i32 %1873, %1921
  %1923 = mul nuw nsw i32 %29, 12
  %1924 = add nuw nsw i32 %1923, 144
  %1925 = urem i32 %1924, 17
  %1926 = add nuw nsw i32 %1925, %27
  %1927 = mul nuw nsw i32 %1926, 12
  %1928 = urem i32 %1927, 17
  %1929 = add nuw nsw i32 %1928, %25
  %1930 = mul nuw nsw i32 %1929, 12
  %1931 = urem i32 %1930, 17
  %1932 = add nuw nsw i32 %1931, %23
  %1933 = mul nuw nsw i32 %1932, 12
  %1934 = urem i32 %1933, 17
  %1935 = add nuw nsw i32 %1934, %21
  %1936 = mul nuw nsw i32 %1935, 12
  %1937 = urem i32 %1936, 17
  %1938 = add nuw nsw i32 %1937, %19
  %1939 = mul nuw nsw i32 %1938, 12
  %1940 = urem i32 %1939, 17
  %1941 = add nuw nsw i32 %1940, %17
  %1942 = mul nuw nsw i32 %1941, 12
  %1943 = urem i32 %1942, 17
  %1944 = add nuw nsw i32 %1943, %15
  %1945 = mul nuw nsw i32 %1944, 12
  %1946 = urem i32 %1945, 17
  %1947 = add nuw nsw i32 %1946, %13
  %1948 = mul nuw nsw i32 %1947, 12
  %1949 = urem i32 %1948, 17
  %1950 = add nuw nsw i32 %1949, %11
  %1951 = mul nuw nsw i32 %1950, 12
  %1952 = urem i32 %1951, 17
  %1953 = add nuw nsw i32 %1952, %9
  %1954 = mul nuw nsw i32 %1953, 12
  %1955 = urem i32 %1954, 17
  %1956 = add nuw nsw i32 %1955, %7
  %1957 = mul nuw nsw i32 %1956, 12
  %1958 = urem i32 %1957, 17
  %1959 = add nuw nsw i32 %1958, %5
  %1960 = mul nuw nsw i32 %1959, 12
  %1961 = urem i32 %1960, 17
  %1962 = add nuw nsw i32 %1961, %3
  %1963 = mul nuw nsw i32 %1962, 12
  %1964 = urem i32 %1963, 17
  %1965 = add nuw nsw i32 %1964, %2
  %1966 = mul nuw nsw i32 %1965, 12
  %1967 = urem i32 %1966, 17
  %1968 = add nuw nsw i32 %1727, %1967
  %1969 = urem i32 %1968, 17
  %1970 = shl nuw nsw i32 1, %1969
  %1971 = or i32 %1922, %1970
  %1972 = mul nuw nsw i32 %29, 13
  %1973 = add nuw nsw i32 %1972, 169
  %1974 = urem i32 %1973, 17
  %1975 = add nuw nsw i32 %1974, %27
  %1976 = mul nuw nsw i32 %1975, 13
  %1977 = urem i32 %1976, 17
  %1978 = add nuw nsw i32 %1977, %25
  %1979 = mul nuw nsw i32 %1978, 13
  %1980 = urem i32 %1979, 17
  %1981 = add nuw nsw i32 %1980, %23
  %1982 = mul nuw nsw i32 %1981, 13
  %1983 = urem i32 %1982, 17
  %1984 = add nuw nsw i32 %1983, %21
  %1985 = mul nuw nsw i32 %1984, 13
  %1986 = urem i32 %1985, 17
  %1987 = add nuw nsw i32 %1986, %19
  %1988 = mul nuw nsw i32 %1987, 13
  %1989 = urem i32 %1988, 17
  %1990 = add nuw nsw i32 %1989, %17
  %1991 = mul nuw nsw i32 %1990, 13
  %1992 = urem i32 %1991, 17
  %1993 = add nuw nsw i32 %1992, %15
  %1994 = mul nuw nsw i32 %1993, 13
  %1995 = urem i32 %1994, 17
  %1996 = add nuw nsw i32 %1995, %13
  %1997 = mul nuw nsw i32 %1996, 13
  %1998 = urem i32 %1997, 17
  %1999 = add nuw nsw i32 %1998, %11
  %2000 = mul nuw nsw i32 %1999, 13
  %2001 = urem i32 %2000, 17
  %2002 = add nuw nsw i32 %2001, %9
  %2003 = mul nuw nsw i32 %2002, 13
  %2004 = urem i32 %2003, 17
  %2005 = add nuw nsw i32 %2004, %7
  %2006 = mul nuw nsw i32 %2005, 13
  %2007 = urem i32 %2006, 17
  %2008 = add nuw nsw i32 %2007, %5
  %2009 = mul nuw nsw i32 %2008, 13
  %2010 = urem i32 %2009, 17
  %2011 = add nuw nsw i32 %2010, %3
  %2012 = mul nuw nsw i32 %2011, 13
  %2013 = urem i32 %2012, 17
  %2014 = add nuw nsw i32 %2013, %2
  %2015 = mul nuw nsw i32 %2014, 13
  %2016 = urem i32 %2015, 17
  %2017 = add nuw nsw i32 %1727, %2016
  %2018 = urem i32 %2017, 17
  %2019 = shl nuw nsw i32 1, %2018
  %2020 = or i32 %1971, %2019
  %2021 = mul nuw nsw i32 %29, 14
  %2022 = add nuw nsw i32 %2021, 196
  %2023 = urem i32 %2022, 17
  %2024 = add nuw nsw i32 %2023, %27
  %2025 = mul nuw nsw i32 %2024, 14
  %2026 = urem i32 %2025, 17
  %2027 = add nuw nsw i32 %2026, %25
  %2028 = mul nuw nsw i32 %2027, 14
  %2029 = urem i32 %2028, 17
  %2030 = add nuw nsw i32 %2029, %23
  %2031 = mul nuw nsw i32 %2030, 14
  %2032 = urem i32 %2031, 17
  %2033 = add nuw nsw i32 %2032, %21
  %2034 = mul nuw nsw i32 %2033, 14
  %2035 = urem i32 %2034, 17
  %2036 = add nuw nsw i32 %2035, %19
  %2037 = mul nuw nsw i32 %2036, 14
  %2038 = urem i32 %2037, 17
  %2039 = add nuw nsw i32 %2038, %17
  %2040 = mul nuw nsw i32 %2039, 14
  %2041 = urem i32 %2040, 17
  %2042 = add nuw nsw i32 %2041, %15
  %2043 = mul nuw nsw i32 %2042, 14
  %2044 = urem i32 %2043, 17
  %2045 = add nuw nsw i32 %2044, %13
  %2046 = mul nuw nsw i32 %2045, 14
  %2047 = urem i32 %2046, 17
  %2048 = add nuw nsw i32 %2047, %11
  %2049 = mul nuw nsw i32 %2048, 14
  %2050 = urem i32 %2049, 17
  %2051 = add nuw nsw i32 %2050, %9
  %2052 = mul nuw nsw i32 %2051, 14
  %2053 = urem i32 %2052, 17
  %2054 = add nuw nsw i32 %2053, %7
  %2055 = mul nuw nsw i32 %2054, 14
  %2056 = urem i32 %2055, 17
  %2057 = add nuw nsw i32 %2056, %5
  %2058 = mul nuw nsw i32 %2057, 14
  %2059 = urem i32 %2058, 17
  %2060 = add nuw nsw i32 %2059, %3
  %2061 = mul nuw nsw i32 %2060, 14
  %2062 = urem i32 %2061, 17
  %2063 = add nuw nsw i32 %2062, %2
  %2064 = mul nuw nsw i32 %2063, 14
  %2065 = urem i32 %2064, 17
  %2066 = add nuw nsw i32 %1727, %2065
  %2067 = urem i32 %2066, 17
  %2068 = shl nuw nsw i32 1, %2067
  %2069 = or i32 %2020, %2068
  %2070 = mul nuw nsw i32 %29, 15
  %2071 = add nuw nsw i32 %2070, 225
  %2072 = urem i32 %2071, 17
  %2073 = add nuw nsw i32 %2072, %27
  %2074 = mul nuw nsw i32 %2073, 15
  %2075 = urem i32 %2074, 17
  %2076 = add nuw nsw i32 %2075, %25
  %2077 = mul nuw nsw i32 %2076, 15
  %2078 = urem i32 %2077, 17
  %2079 = add nuw nsw i32 %2078, %23
  %2080 = mul nuw nsw i32 %2079, 15
  %2081 = urem i32 %2080, 17
  %2082 = add nuw nsw i32 %2081, %21
  %2083 = mul nuw nsw i32 %2082, 15
  %2084 = urem i32 %2083, 17
  %2085 = add nuw nsw i32 %2084, %19
  %2086 = mul nuw nsw i32 %2085, 15
  %2087 = urem i32 %2086, 17
  %2088 = add nuw nsw i32 %2087, %17
  %2089 = mul nuw nsw i32 %2088, 15
  %2090 = urem i32 %2089, 17
  %2091 = add nuw nsw i32 %2090, %15
  %2092 = mul nuw nsw i32 %2091, 15
  %2093 = urem i32 %2092, 17
  %2094 = add nuw nsw i32 %2093, %13
  %2095 = mul nuw nsw i32 %2094, 15
  %2096 = urem i32 %2095, 17
  %2097 = add nuw nsw i32 %2096, %11
  %2098 = mul nuw nsw i32 %2097, 15
  %2099 = urem i32 %2098, 17
  %2100 = add nuw nsw i32 %2099, %9
  %2101 = mul nuw nsw i32 %2100, 15
  %2102 = urem i32 %2101, 17
  %2103 = add nuw nsw i32 %2102, %7
  %2104 = mul nuw nsw i32 %2103, 15
  %2105 = urem i32 %2104, 17
  %2106 = add nuw nsw i32 %2105, %5
  %2107 = mul nuw nsw i32 %2106, 15
  %2108 = urem i32 %2107, 17
  %2109 = add nuw nsw i32 %2108, %3
  %2110 = mul nuw nsw i32 %2109, 15
  %2111 = urem i32 %2110, 17
  %2112 = add nuw nsw i32 %2111, %2
  %2113 = mul nuw nsw i32 %2112, 15
  %2114 = urem i32 %2113, 17
  %2115 = add nuw nsw i32 %1727, %2114
  %2116 = urem i32 %2115, 17
  %2117 = shl nuw nsw i32 1, %2116
  %2118 = or i32 %2069, %2117
  %2119 = icmp eq i32 %2118, 52396
  br i1 %2119, label %2120, label %2785

2120:                                             ; preds = %1726
  %2121 = urem i32 %1727, 17
  %2122 = add nuw nsw i32 %1727, %94
  %2123 = urem i32 %2122, 17
  %2124 = add nuw nsw i32 %1727, %178
  %2125 = urem i32 %2124, 17
  %2126 = add nuw nsw i32 %1727, %262
  %2127 = urem i32 %2126, 17
  %2128 = add nuw nsw i32 %1727, %346
  %2129 = urem i32 %2128, 17
  %2130 = add nuw nsw i32 %1727, %430
  %2131 = urem i32 %2130, 17
  %2132 = add nuw nsw i32 %1727, %514
  %2133 = urem i32 %2132, 17
  %2134 = add nuw nsw i32 %1727, %598
  %2135 = urem i32 %2134, 17
  %2136 = load i64, i64 addrspace(4)* %623, align 8, !tbaa !5
  %2137 = inttoptr i64 %2136 to i8 addrspace(1)*
  %2138 = addrspacecast i8 addrspace(1)* %2137 to i8*
  %2139 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2140 = extractelement <2 x i64> %2139, i64 0
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %2150, label %2141

2141:                                             ; preds = %2120, %2141
  %2142 = phi i8 addrspace(4)* [ %2143, %2141 ], [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %2120 ]
  %2143 = getelementptr i8, i8 addrspace(4)* %2142, i64 1
  %2144 = load i8, i8 addrspace(4)* %2142, align 1
  %2145 = icmp eq i8 %2144, 0
  br i1 %2145, label %2146, label %2141

2146:                                             ; preds = %2141
  %2147 = addrspacecast i8 addrspace(4)* %2142 to i8*
  %2148 = ptrtoint i8* %2147 to i64
  %2149 = add i64 %2148, add (i64 sub (i64 0, i64 ptrtoint ([191 x i8]* addrspacecast ([191 x i8] addrspace(4)* @.str to [191 x i8]*) to i64)), i64 1)
  br label %2150

2150:                                             ; preds = %2146, %2120
  %2151 = phi i64 [ %2149, %2146 ], [ 0, %2120 ]
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %2593, label %2152

2152:                                             ; preds = %2150
  %2153 = and i64 %2140, 2
  %2154 = and i64 %2140, -3
  %2155 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %2154, i64 0
  br label %2156

2156:                                             ; preds = %2582, %2152
  %2157 = phi i64 [ %2151, %2152 ], [ %2590, %2582 ]
  %2158 = phi i8 addrspace(4)* [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %2152 ], [ %2591, %2582 ]
  %2159 = phi <2 x i64> [ %2155, %2152 ], [ %2589, %2582 ]
  %2160 = icmp ugt i64 %2157, 56
  %2161 = extractelement <2 x i64> %2159, i64 0
  %2162 = or i64 %2161, %2153
  %2163 = insertelement <2 x i64> poison, i64 %2162, i64 0
  %2164 = select i1 %2160, <2 x i64> %2159, <2 x i64> %2163
  %2165 = tail call i64 @llvm.umin.i64(i64 %2157, i64 56)
  %2166 = trunc i64 %2165 to i32
  %2167 = extractelement <2 x i64> %2164, i64 0
  %2168 = icmp ugt i32 %2166, 7
  br i1 %2168, label %2184, label %2169

2169:                                             ; preds = %2156
  %2170 = icmp eq i32 %2166, 0
  br i1 %2170, label %2224, label %2171

2171:                                             ; preds = %2169, %2171
  %2172 = phi i32 [ %2182, %2171 ], [ 0, %2169 ]
  %2173 = phi i64 [ %2181, %2171 ], [ 0, %2169 ]
  %2174 = zext i32 %2172 to i64
  %2175 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 %2174
  %2176 = load i8, i8 addrspace(4)* %2175, align 1, !tbaa !9
  %2177 = zext i8 %2176 to i64
  %2178 = shl i32 %2172, 3
  %2179 = zext i32 %2178 to i64
  %2180 = shl nuw i64 %2177, %2179
  %2181 = or i64 %2180, %2173
  %2182 = add nuw nsw i32 %2172, 1
  %2183 = icmp eq i32 %2182, %2166
  br i1 %2183, label %2224, label %2171, !llvm.loop !10

2184:                                             ; preds = %2156
  %2185 = load i8, i8 addrspace(4)* %2158, align 1, !tbaa !9
  %2186 = zext i8 %2185 to i64
  %2187 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 1
  %2188 = load i8, i8 addrspace(4)* %2187, align 1, !tbaa !9
  %2189 = zext i8 %2188 to i64
  %2190 = shl nuw nsw i64 %2189, 8
  %2191 = or i64 %2190, %2186
  %2192 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 2
  %2193 = load i8, i8 addrspace(4)* %2192, align 1, !tbaa !9
  %2194 = zext i8 %2193 to i64
  %2195 = shl nuw nsw i64 %2194, 16
  %2196 = or i64 %2191, %2195
  %2197 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 3
  %2198 = load i8, i8 addrspace(4)* %2197, align 1, !tbaa !9
  %2199 = zext i8 %2198 to i64
  %2200 = shl nuw nsw i64 %2199, 24
  %2201 = or i64 %2196, %2200
  %2202 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 4
  %2203 = load i8, i8 addrspace(4)* %2202, align 1, !tbaa !9
  %2204 = zext i8 %2203 to i64
  %2205 = shl nuw nsw i64 %2204, 32
  %2206 = or i64 %2201, %2205
  %2207 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 5
  %2208 = load i8, i8 addrspace(4)* %2207, align 1, !tbaa !9
  %2209 = zext i8 %2208 to i64
  %2210 = shl nuw nsw i64 %2209, 40
  %2211 = or i64 %2206, %2210
  %2212 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 6
  %2213 = load i8, i8 addrspace(4)* %2212, align 1, !tbaa !9
  %2214 = zext i8 %2213 to i64
  %2215 = shl nuw nsw i64 %2214, 48
  %2216 = or i64 %2211, %2215
  %2217 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 7
  %2218 = load i8, i8 addrspace(4)* %2217, align 1, !tbaa !9
  %2219 = zext i8 %2218 to i64
  %2220 = shl nuw i64 %2219, 56
  %2221 = or i64 %2216, %2220
  %2222 = add nsw i32 %2166, -8
  %2223 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 8
  br label %2224

2224:                                             ; preds = %2171, %2184, %2169
  %2225 = phi i8 addrspace(4)* [ %2223, %2184 ], [ %2158, %2169 ], [ %2158, %2171 ]
  %2226 = phi i32 [ %2222, %2184 ], [ 0, %2169 ], [ 0, %2171 ]
  %2227 = phi i64 [ %2221, %2184 ], [ 0, %2169 ], [ %2181, %2171 ]
  %2228 = icmp ugt i32 %2226, 7
  br i1 %2228, label %2244, label %2229

2229:                                             ; preds = %2224
  %2230 = icmp eq i32 %2226, 0
  br i1 %2230, label %2284, label %2231

2231:                                             ; preds = %2229, %2231
  %2232 = phi i32 [ %2242, %2231 ], [ 0, %2229 ]
  %2233 = phi i64 [ %2241, %2231 ], [ 0, %2229 ]
  %2234 = zext i32 %2232 to i64
  %2235 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 %2234
  %2236 = load i8, i8 addrspace(4)* %2235, align 1, !tbaa !9
  %2237 = zext i8 %2236 to i64
  %2238 = shl i32 %2232, 3
  %2239 = zext i32 %2238 to i64
  %2240 = shl nuw i64 %2237, %2239
  %2241 = or i64 %2240, %2233
  %2242 = add nuw nsw i32 %2232, 1
  %2243 = icmp eq i32 %2242, %2226
  br i1 %2243, label %2284, label %2231

2244:                                             ; preds = %2224
  %2245 = load i8, i8 addrspace(4)* %2225, align 1, !tbaa !9
  %2246 = zext i8 %2245 to i64
  %2247 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 1
  %2248 = load i8, i8 addrspace(4)* %2247, align 1, !tbaa !9
  %2249 = zext i8 %2248 to i64
  %2250 = shl nuw nsw i64 %2249, 8
  %2251 = or i64 %2250, %2246
  %2252 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 2
  %2253 = load i8, i8 addrspace(4)* %2252, align 1, !tbaa !9
  %2254 = zext i8 %2253 to i64
  %2255 = shl nuw nsw i64 %2254, 16
  %2256 = or i64 %2251, %2255
  %2257 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 3
  %2258 = load i8, i8 addrspace(4)* %2257, align 1, !tbaa !9
  %2259 = zext i8 %2258 to i64
  %2260 = shl nuw nsw i64 %2259, 24
  %2261 = or i64 %2256, %2260
  %2262 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 4
  %2263 = load i8, i8 addrspace(4)* %2262, align 1, !tbaa !9
  %2264 = zext i8 %2263 to i64
  %2265 = shl nuw nsw i64 %2264, 32
  %2266 = or i64 %2261, %2265
  %2267 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 5
  %2268 = load i8, i8 addrspace(4)* %2267, align 1, !tbaa !9
  %2269 = zext i8 %2268 to i64
  %2270 = shl nuw nsw i64 %2269, 40
  %2271 = or i64 %2266, %2270
  %2272 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 6
  %2273 = load i8, i8 addrspace(4)* %2272, align 1, !tbaa !9
  %2274 = zext i8 %2273 to i64
  %2275 = shl nuw nsw i64 %2274, 48
  %2276 = or i64 %2271, %2275
  %2277 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 7
  %2278 = load i8, i8 addrspace(4)* %2277, align 1, !tbaa !9
  %2279 = zext i8 %2278 to i64
  %2280 = shl nuw i64 %2279, 56
  %2281 = or i64 %2276, %2280
  %2282 = add nsw i32 %2226, -8
  %2283 = getelementptr inbounds i8, i8 addrspace(4)* %2225, i64 8
  br label %2284

2284:                                             ; preds = %2231, %2244, %2229
  %2285 = phi i8 addrspace(4)* [ %2283, %2244 ], [ %2225, %2229 ], [ %2225, %2231 ]
  %2286 = phi i32 [ %2282, %2244 ], [ 0, %2229 ], [ 0, %2231 ]
  %2287 = phi i64 [ %2281, %2244 ], [ 0, %2229 ], [ %2241, %2231 ]
  %2288 = icmp ugt i32 %2286, 7
  br i1 %2288, label %2304, label %2289

2289:                                             ; preds = %2284
  %2290 = icmp eq i32 %2286, 0
  br i1 %2290, label %2344, label %2291

2291:                                             ; preds = %2289, %2291
  %2292 = phi i32 [ %2302, %2291 ], [ 0, %2289 ]
  %2293 = phi i64 [ %2301, %2291 ], [ 0, %2289 ]
  %2294 = zext i32 %2292 to i64
  %2295 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 %2294
  %2296 = load i8, i8 addrspace(4)* %2295, align 1, !tbaa !9
  %2297 = zext i8 %2296 to i64
  %2298 = shl i32 %2292, 3
  %2299 = zext i32 %2298 to i64
  %2300 = shl nuw i64 %2297, %2299
  %2301 = or i64 %2300, %2293
  %2302 = add nuw nsw i32 %2292, 1
  %2303 = icmp eq i32 %2302, %2286
  br i1 %2303, label %2344, label %2291

2304:                                             ; preds = %2284
  %2305 = load i8, i8 addrspace(4)* %2285, align 1, !tbaa !9
  %2306 = zext i8 %2305 to i64
  %2307 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 1
  %2308 = load i8, i8 addrspace(4)* %2307, align 1, !tbaa !9
  %2309 = zext i8 %2308 to i64
  %2310 = shl nuw nsw i64 %2309, 8
  %2311 = or i64 %2310, %2306
  %2312 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 2
  %2313 = load i8, i8 addrspace(4)* %2312, align 1, !tbaa !9
  %2314 = zext i8 %2313 to i64
  %2315 = shl nuw nsw i64 %2314, 16
  %2316 = or i64 %2311, %2315
  %2317 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 3
  %2318 = load i8, i8 addrspace(4)* %2317, align 1, !tbaa !9
  %2319 = zext i8 %2318 to i64
  %2320 = shl nuw nsw i64 %2319, 24
  %2321 = or i64 %2316, %2320
  %2322 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 4
  %2323 = load i8, i8 addrspace(4)* %2322, align 1, !tbaa !9
  %2324 = zext i8 %2323 to i64
  %2325 = shl nuw nsw i64 %2324, 32
  %2326 = or i64 %2321, %2325
  %2327 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 5
  %2328 = load i8, i8 addrspace(4)* %2327, align 1, !tbaa !9
  %2329 = zext i8 %2328 to i64
  %2330 = shl nuw nsw i64 %2329, 40
  %2331 = or i64 %2326, %2330
  %2332 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 6
  %2333 = load i8, i8 addrspace(4)* %2332, align 1, !tbaa !9
  %2334 = zext i8 %2333 to i64
  %2335 = shl nuw nsw i64 %2334, 48
  %2336 = or i64 %2331, %2335
  %2337 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 7
  %2338 = load i8, i8 addrspace(4)* %2337, align 1, !tbaa !9
  %2339 = zext i8 %2338 to i64
  %2340 = shl nuw i64 %2339, 56
  %2341 = or i64 %2336, %2340
  %2342 = add nsw i32 %2286, -8
  %2343 = getelementptr inbounds i8, i8 addrspace(4)* %2285, i64 8
  br label %2344

2344:                                             ; preds = %2291, %2304, %2289
  %2345 = phi i8 addrspace(4)* [ %2343, %2304 ], [ %2285, %2289 ], [ %2285, %2291 ]
  %2346 = phi i32 [ %2342, %2304 ], [ 0, %2289 ], [ 0, %2291 ]
  %2347 = phi i64 [ %2341, %2304 ], [ 0, %2289 ], [ %2301, %2291 ]
  %2348 = icmp ugt i32 %2346, 7
  br i1 %2348, label %2364, label %2349

2349:                                             ; preds = %2344
  %2350 = icmp eq i32 %2346, 0
  br i1 %2350, label %2404, label %2351

2351:                                             ; preds = %2349, %2351
  %2352 = phi i32 [ %2362, %2351 ], [ 0, %2349 ]
  %2353 = phi i64 [ %2361, %2351 ], [ 0, %2349 ]
  %2354 = zext i32 %2352 to i64
  %2355 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 %2354
  %2356 = load i8, i8 addrspace(4)* %2355, align 1, !tbaa !9
  %2357 = zext i8 %2356 to i64
  %2358 = shl i32 %2352, 3
  %2359 = zext i32 %2358 to i64
  %2360 = shl nuw i64 %2357, %2359
  %2361 = or i64 %2360, %2353
  %2362 = add nuw nsw i32 %2352, 1
  %2363 = icmp eq i32 %2362, %2346
  br i1 %2363, label %2404, label %2351

2364:                                             ; preds = %2344
  %2365 = load i8, i8 addrspace(4)* %2345, align 1, !tbaa !9
  %2366 = zext i8 %2365 to i64
  %2367 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 1
  %2368 = load i8, i8 addrspace(4)* %2367, align 1, !tbaa !9
  %2369 = zext i8 %2368 to i64
  %2370 = shl nuw nsw i64 %2369, 8
  %2371 = or i64 %2370, %2366
  %2372 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 2
  %2373 = load i8, i8 addrspace(4)* %2372, align 1, !tbaa !9
  %2374 = zext i8 %2373 to i64
  %2375 = shl nuw nsw i64 %2374, 16
  %2376 = or i64 %2371, %2375
  %2377 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 3
  %2378 = load i8, i8 addrspace(4)* %2377, align 1, !tbaa !9
  %2379 = zext i8 %2378 to i64
  %2380 = shl nuw nsw i64 %2379, 24
  %2381 = or i64 %2376, %2380
  %2382 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 4
  %2383 = load i8, i8 addrspace(4)* %2382, align 1, !tbaa !9
  %2384 = zext i8 %2383 to i64
  %2385 = shl nuw nsw i64 %2384, 32
  %2386 = or i64 %2381, %2385
  %2387 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 5
  %2388 = load i8, i8 addrspace(4)* %2387, align 1, !tbaa !9
  %2389 = zext i8 %2388 to i64
  %2390 = shl nuw nsw i64 %2389, 40
  %2391 = or i64 %2386, %2390
  %2392 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 6
  %2393 = load i8, i8 addrspace(4)* %2392, align 1, !tbaa !9
  %2394 = zext i8 %2393 to i64
  %2395 = shl nuw nsw i64 %2394, 48
  %2396 = or i64 %2391, %2395
  %2397 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 7
  %2398 = load i8, i8 addrspace(4)* %2397, align 1, !tbaa !9
  %2399 = zext i8 %2398 to i64
  %2400 = shl nuw i64 %2399, 56
  %2401 = or i64 %2396, %2400
  %2402 = add nsw i32 %2346, -8
  %2403 = getelementptr inbounds i8, i8 addrspace(4)* %2345, i64 8
  br label %2404

2404:                                             ; preds = %2351, %2364, %2349
  %2405 = phi i8 addrspace(4)* [ %2403, %2364 ], [ %2345, %2349 ], [ %2345, %2351 ]
  %2406 = phi i32 [ %2402, %2364 ], [ 0, %2349 ], [ 0, %2351 ]
  %2407 = phi i64 [ %2401, %2364 ], [ 0, %2349 ], [ %2361, %2351 ]
  %2408 = icmp ugt i32 %2406, 7
  br i1 %2408, label %2424, label %2409

2409:                                             ; preds = %2404
  %2410 = icmp eq i32 %2406, 0
  br i1 %2410, label %2464, label %2411

2411:                                             ; preds = %2409, %2411
  %2412 = phi i32 [ %2422, %2411 ], [ 0, %2409 ]
  %2413 = phi i64 [ %2421, %2411 ], [ 0, %2409 ]
  %2414 = zext i32 %2412 to i64
  %2415 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 %2414
  %2416 = load i8, i8 addrspace(4)* %2415, align 1, !tbaa !9
  %2417 = zext i8 %2416 to i64
  %2418 = shl i32 %2412, 3
  %2419 = zext i32 %2418 to i64
  %2420 = shl nuw i64 %2417, %2419
  %2421 = or i64 %2420, %2413
  %2422 = add nuw nsw i32 %2412, 1
  %2423 = icmp eq i32 %2422, %2406
  br i1 %2423, label %2464, label %2411

2424:                                             ; preds = %2404
  %2425 = load i8, i8 addrspace(4)* %2405, align 1, !tbaa !9
  %2426 = zext i8 %2425 to i64
  %2427 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 1
  %2428 = load i8, i8 addrspace(4)* %2427, align 1, !tbaa !9
  %2429 = zext i8 %2428 to i64
  %2430 = shl nuw nsw i64 %2429, 8
  %2431 = or i64 %2430, %2426
  %2432 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 2
  %2433 = load i8, i8 addrspace(4)* %2432, align 1, !tbaa !9
  %2434 = zext i8 %2433 to i64
  %2435 = shl nuw nsw i64 %2434, 16
  %2436 = or i64 %2431, %2435
  %2437 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 3
  %2438 = load i8, i8 addrspace(4)* %2437, align 1, !tbaa !9
  %2439 = zext i8 %2438 to i64
  %2440 = shl nuw nsw i64 %2439, 24
  %2441 = or i64 %2436, %2440
  %2442 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 4
  %2443 = load i8, i8 addrspace(4)* %2442, align 1, !tbaa !9
  %2444 = zext i8 %2443 to i64
  %2445 = shl nuw nsw i64 %2444, 32
  %2446 = or i64 %2441, %2445
  %2447 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 5
  %2448 = load i8, i8 addrspace(4)* %2447, align 1, !tbaa !9
  %2449 = zext i8 %2448 to i64
  %2450 = shl nuw nsw i64 %2449, 40
  %2451 = or i64 %2446, %2450
  %2452 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 6
  %2453 = load i8, i8 addrspace(4)* %2452, align 1, !tbaa !9
  %2454 = zext i8 %2453 to i64
  %2455 = shl nuw nsw i64 %2454, 48
  %2456 = or i64 %2451, %2455
  %2457 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 7
  %2458 = load i8, i8 addrspace(4)* %2457, align 1, !tbaa !9
  %2459 = zext i8 %2458 to i64
  %2460 = shl nuw i64 %2459, 56
  %2461 = or i64 %2456, %2460
  %2462 = add nsw i32 %2406, -8
  %2463 = getelementptr inbounds i8, i8 addrspace(4)* %2405, i64 8
  br label %2464

2464:                                             ; preds = %2411, %2424, %2409
  %2465 = phi i8 addrspace(4)* [ %2463, %2424 ], [ %2405, %2409 ], [ %2405, %2411 ]
  %2466 = phi i32 [ %2462, %2424 ], [ 0, %2409 ], [ 0, %2411 ]
  %2467 = phi i64 [ %2461, %2424 ], [ 0, %2409 ], [ %2421, %2411 ]
  %2468 = icmp ugt i32 %2466, 7
  br i1 %2468, label %2484, label %2469

2469:                                             ; preds = %2464
  %2470 = icmp eq i32 %2466, 0
  br i1 %2470, label %2524, label %2471

2471:                                             ; preds = %2469, %2471
  %2472 = phi i32 [ %2482, %2471 ], [ 0, %2469 ]
  %2473 = phi i64 [ %2481, %2471 ], [ 0, %2469 ]
  %2474 = zext i32 %2472 to i64
  %2475 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 %2474
  %2476 = load i8, i8 addrspace(4)* %2475, align 1, !tbaa !9
  %2477 = zext i8 %2476 to i64
  %2478 = shl i32 %2472, 3
  %2479 = zext i32 %2478 to i64
  %2480 = shl nuw i64 %2477, %2479
  %2481 = or i64 %2480, %2473
  %2482 = add nuw nsw i32 %2472, 1
  %2483 = icmp eq i32 %2482, %2466
  br i1 %2483, label %2524, label %2471

2484:                                             ; preds = %2464
  %2485 = load i8, i8 addrspace(4)* %2465, align 1, !tbaa !9
  %2486 = zext i8 %2485 to i64
  %2487 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 1
  %2488 = load i8, i8 addrspace(4)* %2487, align 1, !tbaa !9
  %2489 = zext i8 %2488 to i64
  %2490 = shl nuw nsw i64 %2489, 8
  %2491 = or i64 %2490, %2486
  %2492 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 2
  %2493 = load i8, i8 addrspace(4)* %2492, align 1, !tbaa !9
  %2494 = zext i8 %2493 to i64
  %2495 = shl nuw nsw i64 %2494, 16
  %2496 = or i64 %2491, %2495
  %2497 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 3
  %2498 = load i8, i8 addrspace(4)* %2497, align 1, !tbaa !9
  %2499 = zext i8 %2498 to i64
  %2500 = shl nuw nsw i64 %2499, 24
  %2501 = or i64 %2496, %2500
  %2502 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 4
  %2503 = load i8, i8 addrspace(4)* %2502, align 1, !tbaa !9
  %2504 = zext i8 %2503 to i64
  %2505 = shl nuw nsw i64 %2504, 32
  %2506 = or i64 %2501, %2505
  %2507 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 5
  %2508 = load i8, i8 addrspace(4)* %2507, align 1, !tbaa !9
  %2509 = zext i8 %2508 to i64
  %2510 = shl nuw nsw i64 %2509, 40
  %2511 = or i64 %2506, %2510
  %2512 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 6
  %2513 = load i8, i8 addrspace(4)* %2512, align 1, !tbaa !9
  %2514 = zext i8 %2513 to i64
  %2515 = shl nuw nsw i64 %2514, 48
  %2516 = or i64 %2511, %2515
  %2517 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 7
  %2518 = load i8, i8 addrspace(4)* %2517, align 1, !tbaa !9
  %2519 = zext i8 %2518 to i64
  %2520 = shl nuw i64 %2519, 56
  %2521 = or i64 %2516, %2520
  %2522 = add nsw i32 %2466, -8
  %2523 = getelementptr inbounds i8, i8 addrspace(4)* %2465, i64 8
  br label %2524

2524:                                             ; preds = %2471, %2484, %2469
  %2525 = phi i8 addrspace(4)* [ %2523, %2484 ], [ %2465, %2469 ], [ %2465, %2471 ]
  %2526 = phi i32 [ %2522, %2484 ], [ 0, %2469 ], [ 0, %2471 ]
  %2527 = phi i64 [ %2521, %2484 ], [ 0, %2469 ], [ %2481, %2471 ]
  %2528 = icmp ugt i32 %2526, 7
  br i1 %2528, label %2544, label %2529

2529:                                             ; preds = %2524
  %2530 = icmp eq i32 %2526, 0
  br i1 %2530, label %2582, label %2531

2531:                                             ; preds = %2529, %2531
  %2532 = phi i32 [ %2542, %2531 ], [ 0, %2529 ]
  %2533 = phi i64 [ %2541, %2531 ], [ 0, %2529 ]
  %2534 = zext i32 %2532 to i64
  %2535 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 %2534
  %2536 = load i8, i8 addrspace(4)* %2535, align 1, !tbaa !9
  %2537 = zext i8 %2536 to i64
  %2538 = shl i32 %2532, 3
  %2539 = zext i32 %2538 to i64
  %2540 = shl nuw i64 %2537, %2539
  %2541 = or i64 %2540, %2533
  %2542 = add nuw nsw i32 %2532, 1
  %2543 = icmp eq i32 %2542, %2526
  br i1 %2543, label %2582, label %2531

2544:                                             ; preds = %2524
  %2545 = load i8, i8 addrspace(4)* %2525, align 1, !tbaa !9
  %2546 = zext i8 %2545 to i64
  %2547 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 1
  %2548 = load i8, i8 addrspace(4)* %2547, align 1, !tbaa !9
  %2549 = zext i8 %2548 to i64
  %2550 = shl nuw nsw i64 %2549, 8
  %2551 = or i64 %2550, %2546
  %2552 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 2
  %2553 = load i8, i8 addrspace(4)* %2552, align 1, !tbaa !9
  %2554 = zext i8 %2553 to i64
  %2555 = shl nuw nsw i64 %2554, 16
  %2556 = or i64 %2551, %2555
  %2557 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 3
  %2558 = load i8, i8 addrspace(4)* %2557, align 1, !tbaa !9
  %2559 = zext i8 %2558 to i64
  %2560 = shl nuw nsw i64 %2559, 24
  %2561 = or i64 %2556, %2560
  %2562 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 4
  %2563 = load i8, i8 addrspace(4)* %2562, align 1, !tbaa !9
  %2564 = zext i8 %2563 to i64
  %2565 = shl nuw nsw i64 %2564, 32
  %2566 = or i64 %2561, %2565
  %2567 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 5
  %2568 = load i8, i8 addrspace(4)* %2567, align 1, !tbaa !9
  %2569 = zext i8 %2568 to i64
  %2570 = shl nuw nsw i64 %2569, 40
  %2571 = or i64 %2566, %2570
  %2572 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 6
  %2573 = load i8, i8 addrspace(4)* %2572, align 1, !tbaa !9
  %2574 = zext i8 %2573 to i64
  %2575 = shl nuw nsw i64 %2574, 48
  %2576 = or i64 %2571, %2575
  %2577 = getelementptr inbounds i8, i8 addrspace(4)* %2525, i64 7
  %2578 = load i8, i8 addrspace(4)* %2577, align 1, !tbaa !9
  %2579 = zext i8 %2578 to i64
  %2580 = shl nuw i64 %2579, 56
  %2581 = or i64 %2576, %2580
  br label %2582

2582:                                             ; preds = %2531, %2544, %2529
  %2583 = phi i64 [ %2581, %2544 ], [ 0, %2529 ], [ %2541, %2531 ]
  %2584 = shl nuw nsw i64 %2165, 2
  %2585 = add nuw nsw i64 %2584, 28
  %2586 = and i64 %2585, 480
  %2587 = and i64 %2167, -225
  %2588 = or i64 %2587, %2586
  %2589 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2588, i64 noundef %2227, i64 noundef %2287, i64 noundef %2347, i64 noundef %2407, i64 noundef %2467, i64 noundef %2527, i64 noundef %2583) #11
  %2590 = sub i64 %2157, %2165
  %2591 = getelementptr inbounds i8, i8 addrspace(4)* %2158, i64 %2165
  %2592 = icmp eq i64 %2590, 0
  br i1 %2592, label %2597, label %2156

2593:                                             ; preds = %2150
  %2594 = and i64 %2140, -225
  %2595 = or i64 %2594, 32
  %2596 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2595, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %2597

2597:                                             ; preds = %2582, %2593
  %2598 = phi <2 x i64> [ %2596, %2593 ], [ %2589, %2582 ]
  %2599 = extractelement <2 x i64> %2598, i64 0
  %2600 = zext i32 %1727 to i64
  %2601 = and i64 %2599, -225
  %2602 = or i64 %2601, 32
  %2603 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2602, i64 noundef %2600, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2604 = extractelement <2 x i64> %2603, i64 0
  %2605 = and i64 %2604, -225
  %2606 = or i64 %2605, 32
  %2607 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2606, i64 noundef %624, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2608 = extractelement <2 x i64> %2607, i64 0
  %2609 = and i64 %2608, -225
  %2610 = or i64 %2609, 32
  %2611 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2610, i64 noundef %625, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2612 = extractelement <2 x i64> %2611, i64 0
  %2613 = and i64 %2612, -225
  %2614 = or i64 %2613, 32
  %2615 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2614, i64 noundef %626, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2616 = extractelement <2 x i64> %2615, i64 0
  %2617 = and i64 %2616, -225
  %2618 = or i64 %2617, 32
  %2619 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2618, i64 noundef %627, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2620 = extractelement <2 x i64> %2619, i64 0
  %2621 = and i64 %2620, -225
  %2622 = or i64 %2621, 32
  %2623 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2622, i64 noundef %628, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2624 = extractelement <2 x i64> %2623, i64 0
  %2625 = and i64 %2624, -225
  %2626 = or i64 %2625, 32
  %2627 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2626, i64 noundef %629, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2628 = extractelement <2 x i64> %2627, i64 0
  %2629 = and i64 %2628, -225
  %2630 = or i64 %2629, 32
  %2631 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2630, i64 noundef %630, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2632 = extractelement <2 x i64> %2631, i64 0
  %2633 = and i64 %2632, -225
  %2634 = or i64 %2633, 32
  %2635 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2634, i64 noundef %631, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2636 = extractelement <2 x i64> %2635, i64 0
  %2637 = and i64 %2636, -225
  %2638 = or i64 %2637, 32
  %2639 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2638, i64 noundef %632, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2640 = extractelement <2 x i64> %2639, i64 0
  %2641 = and i64 %2640, -225
  %2642 = or i64 %2641, 32
  %2643 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2642, i64 noundef %633, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2644 = extractelement <2 x i64> %2643, i64 0
  %2645 = and i64 %2644, -225
  %2646 = or i64 %2645, 32
  %2647 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2646, i64 noundef %634, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2648 = extractelement <2 x i64> %2647, i64 0
  %2649 = and i64 %2648, -225
  %2650 = or i64 %2649, 32
  %2651 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2650, i64 noundef %635, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2652 = extractelement <2 x i64> %2651, i64 0
  %2653 = and i64 %2652, -225
  %2654 = or i64 %2653, 32
  %2655 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2654, i64 noundef %636, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2656 = extractelement <2 x i64> %2655, i64 0
  %2657 = and i64 %2656, -225
  %2658 = or i64 %2657, 32
  %2659 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2658, i64 noundef %637, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2660 = extractelement <2 x i64> %2659, i64 0
  %2661 = and i64 %2660, -225
  %2662 = or i64 %2661, 32
  %2663 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2662, i64 noundef %638, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2664 = extractelement <2 x i64> %2663, i64 0
  %2665 = zext i32 %2121 to i64
  %2666 = and i64 %2664, -225
  %2667 = or i64 %2666, 32
  %2668 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2667, i64 noundef %2665, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2669 = extractelement <2 x i64> %2668, i64 0
  %2670 = zext i32 %2123 to i64
  %2671 = and i64 %2669, -225
  %2672 = or i64 %2671, 32
  %2673 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2672, i64 noundef %2670, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2674 = extractelement <2 x i64> %2673, i64 0
  %2675 = zext i32 %2125 to i64
  %2676 = and i64 %2674, -225
  %2677 = or i64 %2676, 32
  %2678 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2677, i64 noundef %2675, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2679 = extractelement <2 x i64> %2678, i64 0
  %2680 = zext i32 %2127 to i64
  %2681 = and i64 %2679, -225
  %2682 = or i64 %2681, 32
  %2683 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2682, i64 noundef %2680, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2684 = extractelement <2 x i64> %2683, i64 0
  %2685 = zext i32 %2129 to i64
  %2686 = and i64 %2684, -225
  %2687 = or i64 %2686, 32
  %2688 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2687, i64 noundef %2685, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2689 = extractelement <2 x i64> %2688, i64 0
  %2690 = zext i32 %2131 to i64
  %2691 = and i64 %2689, -225
  %2692 = or i64 %2691, 32
  %2693 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2692, i64 noundef %2690, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2694 = extractelement <2 x i64> %2693, i64 0
  %2695 = zext i32 %2133 to i64
  %2696 = and i64 %2694, -225
  %2697 = or i64 %2696, 32
  %2698 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2697, i64 noundef %2695, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2699 = extractelement <2 x i64> %2698, i64 0
  %2700 = zext i32 %2135 to i64
  %2701 = and i64 %2699, -225
  %2702 = or i64 %2701, 32
  %2703 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2702, i64 noundef %2700, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2704 = extractelement <2 x i64> %2703, i64 0
  %2705 = zext i32 %1774 to i64
  %2706 = and i64 %2704, -225
  %2707 = or i64 %2706, 32
  %2708 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2707, i64 noundef %2705, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2709 = extractelement <2 x i64> %2708, i64 0
  %2710 = zext i32 %1822 to i64
  %2711 = and i64 %2709, -225
  %2712 = or i64 %2711, 32
  %2713 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2712, i64 noundef %2710, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2714 = extractelement <2 x i64> %2713, i64 0
  %2715 = zext i32 %1871 to i64
  %2716 = and i64 %2714, -225
  %2717 = or i64 %2716, 32
  %2718 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2717, i64 noundef %2715, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2719 = extractelement <2 x i64> %2718, i64 0
  %2720 = zext i32 %1920 to i64
  %2721 = and i64 %2719, -225
  %2722 = or i64 %2721, 32
  %2723 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2722, i64 noundef %2720, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2724 = extractelement <2 x i64> %2723, i64 0
  %2725 = zext i32 %1969 to i64
  %2726 = and i64 %2724, -225
  %2727 = or i64 %2726, 32
  %2728 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2727, i64 noundef %2725, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2729 = extractelement <2 x i64> %2728, i64 0
  %2730 = zext i32 %2018 to i64
  %2731 = and i64 %2729, -225
  %2732 = or i64 %2731, 32
  %2733 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2732, i64 noundef %2730, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2734 = extractelement <2 x i64> %2733, i64 0
  %2735 = zext i32 %2067 to i64
  %2736 = and i64 %2734, -225
  %2737 = or i64 %2736, 32
  %2738 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2737, i64 noundef %2735, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2739 = extractelement <2 x i64> %2738, i64 0
  %2740 = zext i32 %2116 to i64
  %2741 = and i64 %2739, -225
  %2742 = or i64 %2741, 32
  %2743 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2742, i64 noundef %2740, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2744 = extractelement <2 x i64> %2743, i64 0
  %2745 = and i64 %2744, -225
  %2746 = or i64 %2745, 32
  %2747 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2746, i64 noundef %639, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2748 = extractelement <2 x i64> %2747, i64 0
  %2749 = and i64 %2748, -225
  %2750 = or i64 %2749, 32
  %2751 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2750, i64 noundef %640, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2752 = extractelement <2 x i64> %2751, i64 0
  %2753 = and i64 %2752, -225
  %2754 = or i64 %2753, 32
  %2755 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2754, i64 noundef %641, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2756 = extractelement <2 x i64> %2755, i64 0
  %2757 = and i64 %2756, -225
  %2758 = or i64 %2757, 32
  %2759 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2758, i64 noundef %642, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2760 = extractelement <2 x i64> %2759, i64 0
  %2761 = zext i32 %1724 to i64
  %2762 = and i64 %2760, -225
  %2763 = or i64 %2762, 32
  %2764 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2763, i64 noundef %2761, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2765 = extractelement <2 x i64> %2764, i64 0
  %2766 = and i64 %2765, -225
  %2767 = or i64 %2766, 32
  %2768 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2767, i64 noundef 52396, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2769 = extractelement <2 x i64> %2768, i64 0
  %2770 = and i64 %2769, -225
  %2771 = or i64 %2770, 32
  %2772 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2771, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2773 = extractelement <2 x i64> %2772, i64 0
  %2774 = and i64 %2773, -225
  %2775 = or i64 %2774, 32
  %2776 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2775, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2777 = extractelement <2 x i64> %2776, i64 0
  %2778 = and i64 %2777, -225
  %2779 = or i64 %2778, 32
  %2780 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2779, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %2781 = extractelement <2 x i64> %2780, i64 0
  %2782 = and i64 %2781, -227
  %2783 = or i64 %2782, 34
  %2784 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %2138, i64 noundef %2783, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %2785

2785:                                             ; preds = %2597, %1726, %1723
  %2786 = phi i32 [ 52396, %2597 ], [ %2118, %1726 ], [ 0, %1723 ]
  %2787 = icmp eq i32 %618, 13139
  br i1 %2787, label %2788, label %3848

2788:                                             ; preds = %2785
  %2789 = add nuw nsw i32 %30, 2
  %2790 = shl nuw nsw i32 %29, 3
  %2791 = add nuw nsw i32 %2790, 64
  %2792 = urem i32 %2791, 17
  %2793 = add nuw nsw i32 %2792, %27
  %2794 = shl nuw nsw i32 %2793, 3
  %2795 = urem i32 %2794, 17
  %2796 = add nuw nsw i32 %2795, %25
  %2797 = shl nuw nsw i32 %2796, 3
  %2798 = urem i32 %2797, 17
  %2799 = add nuw nsw i32 %2798, %23
  %2800 = shl nuw nsw i32 %2799, 3
  %2801 = urem i32 %2800, 17
  %2802 = add nuw nsw i32 %2801, %21
  %2803 = shl nuw nsw i32 %2802, 3
  %2804 = urem i32 %2803, 17
  %2805 = add nuw nsw i32 %2804, %19
  %2806 = shl nuw nsw i32 %2805, 3
  %2807 = urem i32 %2806, 17
  %2808 = add nuw nsw i32 %2807, %17
  %2809 = shl nuw nsw i32 %2808, 3
  %2810 = urem i32 %2809, 17
  %2811 = add nuw nsw i32 %2810, %15
  %2812 = shl nuw nsw i32 %2811, 3
  %2813 = urem i32 %2812, 17
  %2814 = add nuw nsw i32 %2813, %13
  %2815 = shl nuw nsw i32 %2814, 3
  %2816 = urem i32 %2815, 17
  %2817 = add nuw nsw i32 %2816, %11
  %2818 = shl nuw nsw i32 %2817, 3
  %2819 = urem i32 %2818, 17
  %2820 = add nuw nsw i32 %2819, %9
  %2821 = shl nuw nsw i32 %2820, 3
  %2822 = urem i32 %2821, 17
  %2823 = add nuw nsw i32 %2822, %7
  %2824 = shl nuw nsw i32 %2823, 3
  %2825 = urem i32 %2824, 17
  %2826 = add nuw nsw i32 %2825, %5
  %2827 = shl nuw nsw i32 %2826, 3
  %2828 = urem i32 %2827, 17
  %2829 = add nuw nsw i32 %2828, %3
  %2830 = shl nuw nsw i32 %2829, 3
  %2831 = urem i32 %2830, 17
  %2832 = add nuw nsw i32 %2831, %2
  %2833 = shl nuw nsw i32 %2832, 3
  %2834 = urem i32 %2833, 17
  %2835 = add nuw nsw i32 %2789, %2834
  %2836 = urem i32 %2835, 17
  %2837 = shl nuw nsw i32 1, %2836
  %2838 = mul nuw nsw i32 %29, 9
  %2839 = add nuw nsw i32 %2838, 81
  %2840 = urem i32 %2839, 17
  %2841 = add nuw nsw i32 %2840, %27
  %2842 = mul nuw nsw i32 %2841, 9
  %2843 = urem i32 %2842, 17
  %2844 = add nuw nsw i32 %2843, %25
  %2845 = mul nuw nsw i32 %2844, 9
  %2846 = urem i32 %2845, 17
  %2847 = add nuw nsw i32 %2846, %23
  %2848 = mul nuw nsw i32 %2847, 9
  %2849 = urem i32 %2848, 17
  %2850 = add nuw nsw i32 %2849, %21
  %2851 = mul nuw nsw i32 %2850, 9
  %2852 = urem i32 %2851, 17
  %2853 = add nuw nsw i32 %2852, %19
  %2854 = mul nuw nsw i32 %2853, 9
  %2855 = urem i32 %2854, 17
  %2856 = add nuw nsw i32 %2855, %17
  %2857 = mul nuw nsw i32 %2856, 9
  %2858 = urem i32 %2857, 17
  %2859 = add nuw nsw i32 %2858, %15
  %2860 = mul nuw nsw i32 %2859, 9
  %2861 = urem i32 %2860, 17
  %2862 = add nuw nsw i32 %2861, %13
  %2863 = mul nuw nsw i32 %2862, 9
  %2864 = urem i32 %2863, 17
  %2865 = add nuw nsw i32 %2864, %11
  %2866 = mul nuw nsw i32 %2865, 9
  %2867 = urem i32 %2866, 17
  %2868 = add nuw nsw i32 %2867, %9
  %2869 = mul nuw nsw i32 %2868, 9
  %2870 = urem i32 %2869, 17
  %2871 = add nuw nsw i32 %2870, %7
  %2872 = mul nuw nsw i32 %2871, 9
  %2873 = urem i32 %2872, 17
  %2874 = add nuw nsw i32 %2873, %5
  %2875 = mul nuw nsw i32 %2874, 9
  %2876 = urem i32 %2875, 17
  %2877 = add nuw nsw i32 %2876, %3
  %2878 = mul nuw nsw i32 %2877, 9
  %2879 = urem i32 %2878, 17
  %2880 = add nuw nsw i32 %2879, %2
  %2881 = mul nuw nsw i32 %2880, 9
  %2882 = urem i32 %2881, 17
  %2883 = add nuw nsw i32 %2789, %2882
  %2884 = urem i32 %2883, 17
  %2885 = shl nuw nsw i32 1, %2884
  %2886 = or i32 %2837, %2885
  %2887 = mul nuw nsw i32 %29, 10
  %2888 = add nuw nsw i32 %2887, 100
  %2889 = urem i32 %2888, 17
  %2890 = add nuw nsw i32 %2889, %27
  %2891 = mul nuw nsw i32 %2890, 10
  %2892 = urem i32 %2891, 17
  %2893 = add nuw nsw i32 %2892, %25
  %2894 = mul nuw nsw i32 %2893, 10
  %2895 = urem i32 %2894, 17
  %2896 = add nuw nsw i32 %2895, %23
  %2897 = mul nuw nsw i32 %2896, 10
  %2898 = urem i32 %2897, 17
  %2899 = add nuw nsw i32 %2898, %21
  %2900 = mul nuw nsw i32 %2899, 10
  %2901 = urem i32 %2900, 17
  %2902 = add nuw nsw i32 %2901, %19
  %2903 = mul nuw nsw i32 %2902, 10
  %2904 = urem i32 %2903, 17
  %2905 = add nuw nsw i32 %2904, %17
  %2906 = mul nuw nsw i32 %2905, 10
  %2907 = urem i32 %2906, 17
  %2908 = add nuw nsw i32 %2907, %15
  %2909 = mul nuw nsw i32 %2908, 10
  %2910 = urem i32 %2909, 17
  %2911 = add nuw nsw i32 %2910, %13
  %2912 = mul nuw nsw i32 %2911, 10
  %2913 = urem i32 %2912, 17
  %2914 = add nuw nsw i32 %2913, %11
  %2915 = mul nuw nsw i32 %2914, 10
  %2916 = urem i32 %2915, 17
  %2917 = add nuw nsw i32 %2916, %9
  %2918 = mul nuw nsw i32 %2917, 10
  %2919 = urem i32 %2918, 17
  %2920 = add nuw nsw i32 %2919, %7
  %2921 = mul nuw nsw i32 %2920, 10
  %2922 = urem i32 %2921, 17
  %2923 = add nuw nsw i32 %2922, %5
  %2924 = mul nuw nsw i32 %2923, 10
  %2925 = urem i32 %2924, 17
  %2926 = add nuw nsw i32 %2925, %3
  %2927 = mul nuw nsw i32 %2926, 10
  %2928 = urem i32 %2927, 17
  %2929 = add nuw nsw i32 %2928, %2
  %2930 = mul nuw nsw i32 %2929, 10
  %2931 = urem i32 %2930, 17
  %2932 = add nuw nsw i32 %2789, %2931
  %2933 = urem i32 %2932, 17
  %2934 = shl nuw nsw i32 1, %2933
  %2935 = or i32 %2886, %2934
  %2936 = mul nuw nsw i32 %29, 11
  %2937 = add nuw nsw i32 %2936, 121
  %2938 = urem i32 %2937, 17
  %2939 = add nuw nsw i32 %2938, %27
  %2940 = mul nuw nsw i32 %2939, 11
  %2941 = urem i32 %2940, 17
  %2942 = add nuw nsw i32 %2941, %25
  %2943 = mul nuw nsw i32 %2942, 11
  %2944 = urem i32 %2943, 17
  %2945 = add nuw nsw i32 %2944, %23
  %2946 = mul nuw nsw i32 %2945, 11
  %2947 = urem i32 %2946, 17
  %2948 = add nuw nsw i32 %2947, %21
  %2949 = mul nuw nsw i32 %2948, 11
  %2950 = urem i32 %2949, 17
  %2951 = add nuw nsw i32 %2950, %19
  %2952 = mul nuw nsw i32 %2951, 11
  %2953 = urem i32 %2952, 17
  %2954 = add nuw nsw i32 %2953, %17
  %2955 = mul nuw nsw i32 %2954, 11
  %2956 = urem i32 %2955, 17
  %2957 = add nuw nsw i32 %2956, %15
  %2958 = mul nuw nsw i32 %2957, 11
  %2959 = urem i32 %2958, 17
  %2960 = add nuw nsw i32 %2959, %13
  %2961 = mul nuw nsw i32 %2960, 11
  %2962 = urem i32 %2961, 17
  %2963 = add nuw nsw i32 %2962, %11
  %2964 = mul nuw nsw i32 %2963, 11
  %2965 = urem i32 %2964, 17
  %2966 = add nuw nsw i32 %2965, %9
  %2967 = mul nuw nsw i32 %2966, 11
  %2968 = urem i32 %2967, 17
  %2969 = add nuw nsw i32 %2968, %7
  %2970 = mul nuw nsw i32 %2969, 11
  %2971 = urem i32 %2970, 17
  %2972 = add nuw nsw i32 %2971, %5
  %2973 = mul nuw nsw i32 %2972, 11
  %2974 = urem i32 %2973, 17
  %2975 = add nuw nsw i32 %2974, %3
  %2976 = mul nuw nsw i32 %2975, 11
  %2977 = urem i32 %2976, 17
  %2978 = add nuw nsw i32 %2977, %2
  %2979 = mul nuw nsw i32 %2978, 11
  %2980 = urem i32 %2979, 17
  %2981 = add nuw nsw i32 %2789, %2980
  %2982 = urem i32 %2981, 17
  %2983 = shl nuw nsw i32 1, %2982
  %2984 = or i32 %2935, %2983
  %2985 = mul nuw nsw i32 %29, 12
  %2986 = add nuw nsw i32 %2985, 144
  %2987 = urem i32 %2986, 17
  %2988 = add nuw nsw i32 %2987, %27
  %2989 = mul nuw nsw i32 %2988, 12
  %2990 = urem i32 %2989, 17
  %2991 = add nuw nsw i32 %2990, %25
  %2992 = mul nuw nsw i32 %2991, 12
  %2993 = urem i32 %2992, 17
  %2994 = add nuw nsw i32 %2993, %23
  %2995 = mul nuw nsw i32 %2994, 12
  %2996 = urem i32 %2995, 17
  %2997 = add nuw nsw i32 %2996, %21
  %2998 = mul nuw nsw i32 %2997, 12
  %2999 = urem i32 %2998, 17
  %3000 = add nuw nsw i32 %2999, %19
  %3001 = mul nuw nsw i32 %3000, 12
  %3002 = urem i32 %3001, 17
  %3003 = add nuw nsw i32 %3002, %17
  %3004 = mul nuw nsw i32 %3003, 12
  %3005 = urem i32 %3004, 17
  %3006 = add nuw nsw i32 %3005, %15
  %3007 = mul nuw nsw i32 %3006, 12
  %3008 = urem i32 %3007, 17
  %3009 = add nuw nsw i32 %3008, %13
  %3010 = mul nuw nsw i32 %3009, 12
  %3011 = urem i32 %3010, 17
  %3012 = add nuw nsw i32 %3011, %11
  %3013 = mul nuw nsw i32 %3012, 12
  %3014 = urem i32 %3013, 17
  %3015 = add nuw nsw i32 %3014, %9
  %3016 = mul nuw nsw i32 %3015, 12
  %3017 = urem i32 %3016, 17
  %3018 = add nuw nsw i32 %3017, %7
  %3019 = mul nuw nsw i32 %3018, 12
  %3020 = urem i32 %3019, 17
  %3021 = add nuw nsw i32 %3020, %5
  %3022 = mul nuw nsw i32 %3021, 12
  %3023 = urem i32 %3022, 17
  %3024 = add nuw nsw i32 %3023, %3
  %3025 = mul nuw nsw i32 %3024, 12
  %3026 = urem i32 %3025, 17
  %3027 = add nuw nsw i32 %3026, %2
  %3028 = mul nuw nsw i32 %3027, 12
  %3029 = urem i32 %3028, 17
  %3030 = add nuw nsw i32 %2789, %3029
  %3031 = urem i32 %3030, 17
  %3032 = shl nuw nsw i32 1, %3031
  %3033 = or i32 %2984, %3032
  %3034 = mul nuw nsw i32 %29, 13
  %3035 = add nuw nsw i32 %3034, 169
  %3036 = urem i32 %3035, 17
  %3037 = add nuw nsw i32 %3036, %27
  %3038 = mul nuw nsw i32 %3037, 13
  %3039 = urem i32 %3038, 17
  %3040 = add nuw nsw i32 %3039, %25
  %3041 = mul nuw nsw i32 %3040, 13
  %3042 = urem i32 %3041, 17
  %3043 = add nuw nsw i32 %3042, %23
  %3044 = mul nuw nsw i32 %3043, 13
  %3045 = urem i32 %3044, 17
  %3046 = add nuw nsw i32 %3045, %21
  %3047 = mul nuw nsw i32 %3046, 13
  %3048 = urem i32 %3047, 17
  %3049 = add nuw nsw i32 %3048, %19
  %3050 = mul nuw nsw i32 %3049, 13
  %3051 = urem i32 %3050, 17
  %3052 = add nuw nsw i32 %3051, %17
  %3053 = mul nuw nsw i32 %3052, 13
  %3054 = urem i32 %3053, 17
  %3055 = add nuw nsw i32 %3054, %15
  %3056 = mul nuw nsw i32 %3055, 13
  %3057 = urem i32 %3056, 17
  %3058 = add nuw nsw i32 %3057, %13
  %3059 = mul nuw nsw i32 %3058, 13
  %3060 = urem i32 %3059, 17
  %3061 = add nuw nsw i32 %3060, %11
  %3062 = mul nuw nsw i32 %3061, 13
  %3063 = urem i32 %3062, 17
  %3064 = add nuw nsw i32 %3063, %9
  %3065 = mul nuw nsw i32 %3064, 13
  %3066 = urem i32 %3065, 17
  %3067 = add nuw nsw i32 %3066, %7
  %3068 = mul nuw nsw i32 %3067, 13
  %3069 = urem i32 %3068, 17
  %3070 = add nuw nsw i32 %3069, %5
  %3071 = mul nuw nsw i32 %3070, 13
  %3072 = urem i32 %3071, 17
  %3073 = add nuw nsw i32 %3072, %3
  %3074 = mul nuw nsw i32 %3073, 13
  %3075 = urem i32 %3074, 17
  %3076 = add nuw nsw i32 %3075, %2
  %3077 = mul nuw nsw i32 %3076, 13
  %3078 = urem i32 %3077, 17
  %3079 = add nuw nsw i32 %2789, %3078
  %3080 = urem i32 %3079, 17
  %3081 = shl nuw nsw i32 1, %3080
  %3082 = or i32 %3033, %3081
  %3083 = mul nuw nsw i32 %29, 14
  %3084 = add nuw nsw i32 %3083, 196
  %3085 = urem i32 %3084, 17
  %3086 = add nuw nsw i32 %3085, %27
  %3087 = mul nuw nsw i32 %3086, 14
  %3088 = urem i32 %3087, 17
  %3089 = add nuw nsw i32 %3088, %25
  %3090 = mul nuw nsw i32 %3089, 14
  %3091 = urem i32 %3090, 17
  %3092 = add nuw nsw i32 %3091, %23
  %3093 = mul nuw nsw i32 %3092, 14
  %3094 = urem i32 %3093, 17
  %3095 = add nuw nsw i32 %3094, %21
  %3096 = mul nuw nsw i32 %3095, 14
  %3097 = urem i32 %3096, 17
  %3098 = add nuw nsw i32 %3097, %19
  %3099 = mul nuw nsw i32 %3098, 14
  %3100 = urem i32 %3099, 17
  %3101 = add nuw nsw i32 %3100, %17
  %3102 = mul nuw nsw i32 %3101, 14
  %3103 = urem i32 %3102, 17
  %3104 = add nuw nsw i32 %3103, %15
  %3105 = mul nuw nsw i32 %3104, 14
  %3106 = urem i32 %3105, 17
  %3107 = add nuw nsw i32 %3106, %13
  %3108 = mul nuw nsw i32 %3107, 14
  %3109 = urem i32 %3108, 17
  %3110 = add nuw nsw i32 %3109, %11
  %3111 = mul nuw nsw i32 %3110, 14
  %3112 = urem i32 %3111, 17
  %3113 = add nuw nsw i32 %3112, %9
  %3114 = mul nuw nsw i32 %3113, 14
  %3115 = urem i32 %3114, 17
  %3116 = add nuw nsw i32 %3115, %7
  %3117 = mul nuw nsw i32 %3116, 14
  %3118 = urem i32 %3117, 17
  %3119 = add nuw nsw i32 %3118, %5
  %3120 = mul nuw nsw i32 %3119, 14
  %3121 = urem i32 %3120, 17
  %3122 = add nuw nsw i32 %3121, %3
  %3123 = mul nuw nsw i32 %3122, 14
  %3124 = urem i32 %3123, 17
  %3125 = add nuw nsw i32 %3124, %2
  %3126 = mul nuw nsw i32 %3125, 14
  %3127 = urem i32 %3126, 17
  %3128 = add nuw nsw i32 %2789, %3127
  %3129 = urem i32 %3128, 17
  %3130 = shl nuw nsw i32 1, %3129
  %3131 = or i32 %3082, %3130
  %3132 = mul nuw nsw i32 %29, 15
  %3133 = add nuw nsw i32 %3132, 225
  %3134 = urem i32 %3133, 17
  %3135 = add nuw nsw i32 %3134, %27
  %3136 = mul nuw nsw i32 %3135, 15
  %3137 = urem i32 %3136, 17
  %3138 = add nuw nsw i32 %3137, %25
  %3139 = mul nuw nsw i32 %3138, 15
  %3140 = urem i32 %3139, 17
  %3141 = add nuw nsw i32 %3140, %23
  %3142 = mul nuw nsw i32 %3141, 15
  %3143 = urem i32 %3142, 17
  %3144 = add nuw nsw i32 %3143, %21
  %3145 = mul nuw nsw i32 %3144, 15
  %3146 = urem i32 %3145, 17
  %3147 = add nuw nsw i32 %3146, %19
  %3148 = mul nuw nsw i32 %3147, 15
  %3149 = urem i32 %3148, 17
  %3150 = add nuw nsw i32 %3149, %17
  %3151 = mul nuw nsw i32 %3150, 15
  %3152 = urem i32 %3151, 17
  %3153 = add nuw nsw i32 %3152, %15
  %3154 = mul nuw nsw i32 %3153, 15
  %3155 = urem i32 %3154, 17
  %3156 = add nuw nsw i32 %3155, %13
  %3157 = mul nuw nsw i32 %3156, 15
  %3158 = urem i32 %3157, 17
  %3159 = add nuw nsw i32 %3158, %11
  %3160 = mul nuw nsw i32 %3159, 15
  %3161 = urem i32 %3160, 17
  %3162 = add nuw nsw i32 %3161, %9
  %3163 = mul nuw nsw i32 %3162, 15
  %3164 = urem i32 %3163, 17
  %3165 = add nuw nsw i32 %3164, %7
  %3166 = mul nuw nsw i32 %3165, 15
  %3167 = urem i32 %3166, 17
  %3168 = add nuw nsw i32 %3167, %5
  %3169 = mul nuw nsw i32 %3168, 15
  %3170 = urem i32 %3169, 17
  %3171 = add nuw nsw i32 %3170, %3
  %3172 = mul nuw nsw i32 %3171, 15
  %3173 = urem i32 %3172, 17
  %3174 = add nuw nsw i32 %3173, %2
  %3175 = mul nuw nsw i32 %3174, 15
  %3176 = urem i32 %3175, 17
  %3177 = add nuw nsw i32 %2789, %3176
  %3178 = urem i32 %3177, 17
  %3179 = shl nuw nsw i32 1, %3178
  %3180 = or i32 %3131, %3179
  %3181 = icmp eq i32 %3180, 52396
  br i1 %3181, label %3182, label %3848

3182:                                             ; preds = %2788
  %3183 = urem i32 %2789, 17
  %3184 = add nuw nsw i32 %2789, %94
  %3185 = urem i32 %3184, 17
  %3186 = add nuw nsw i32 %2789, %178
  %3187 = urem i32 %3186, 17
  %3188 = add nuw nsw i32 %2789, %262
  %3189 = urem i32 %3188, 17
  %3190 = add nuw nsw i32 %2789, %346
  %3191 = urem i32 %3190, 17
  %3192 = add nuw nsw i32 %2789, %430
  %3193 = urem i32 %3192, 17
  %3194 = add nuw nsw i32 %2789, %514
  %3195 = urem i32 %3194, 17
  %3196 = add nuw nsw i32 %2789, %598
  %3197 = urem i32 %3196, 17
  %3198 = load i64, i64 addrspace(4)* %623, align 8, !tbaa !5
  %3199 = inttoptr i64 %3198 to i8 addrspace(1)*
  %3200 = addrspacecast i8 addrspace(1)* %3199 to i8*
  %3201 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3202 = extractelement <2 x i64> %3201, i64 0
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %3212, label %3203

3203:                                             ; preds = %3182, %3203
  %3204 = phi i8 addrspace(4)* [ %3205, %3203 ], [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %3182 ]
  %3205 = getelementptr i8, i8 addrspace(4)* %3204, i64 1
  %3206 = load i8, i8 addrspace(4)* %3204, align 1
  %3207 = icmp eq i8 %3206, 0
  br i1 %3207, label %3208, label %3203

3208:                                             ; preds = %3203
  %3209 = addrspacecast i8 addrspace(4)* %3204 to i8*
  %3210 = ptrtoint i8* %3209 to i64
  %3211 = add i64 %3210, add (i64 sub (i64 0, i64 ptrtoint ([191 x i8]* addrspacecast ([191 x i8] addrspace(4)* @.str to [191 x i8]*) to i64)), i64 1)
  br label %3212

3212:                                             ; preds = %3208, %3182
  %3213 = phi i64 [ %3211, %3208 ], [ 0, %3182 ]
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %3655, label %3214

3214:                                             ; preds = %3212
  %3215 = and i64 %3202, 2
  %3216 = and i64 %3202, -3
  %3217 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %3216, i64 0
  br label %3218

3218:                                             ; preds = %3644, %3214
  %3219 = phi i64 [ %3213, %3214 ], [ %3652, %3644 ]
  %3220 = phi i8 addrspace(4)* [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %3214 ], [ %3653, %3644 ]
  %3221 = phi <2 x i64> [ %3217, %3214 ], [ %3651, %3644 ]
  %3222 = icmp ugt i64 %3219, 56
  %3223 = extractelement <2 x i64> %3221, i64 0
  %3224 = or i64 %3223, %3215
  %3225 = insertelement <2 x i64> poison, i64 %3224, i64 0
  %3226 = select i1 %3222, <2 x i64> %3221, <2 x i64> %3225
  %3227 = tail call i64 @llvm.umin.i64(i64 %3219, i64 56)
  %3228 = trunc i64 %3227 to i32
  %3229 = extractelement <2 x i64> %3226, i64 0
  %3230 = icmp ugt i32 %3228, 7
  br i1 %3230, label %3246, label %3231

3231:                                             ; preds = %3218
  %3232 = icmp eq i32 %3228, 0
  br i1 %3232, label %3286, label %3233

3233:                                             ; preds = %3231, %3233
  %3234 = phi i32 [ %3244, %3233 ], [ 0, %3231 ]
  %3235 = phi i64 [ %3243, %3233 ], [ 0, %3231 ]
  %3236 = zext i32 %3234 to i64
  %3237 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 %3236
  %3238 = load i8, i8 addrspace(4)* %3237, align 1, !tbaa !9
  %3239 = zext i8 %3238 to i64
  %3240 = shl i32 %3234, 3
  %3241 = zext i32 %3240 to i64
  %3242 = shl nuw i64 %3239, %3241
  %3243 = or i64 %3242, %3235
  %3244 = add nuw nsw i32 %3234, 1
  %3245 = icmp eq i32 %3244, %3228
  br i1 %3245, label %3286, label %3233, !llvm.loop !10

3246:                                             ; preds = %3218
  %3247 = load i8, i8 addrspace(4)* %3220, align 1, !tbaa !9
  %3248 = zext i8 %3247 to i64
  %3249 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 1
  %3250 = load i8, i8 addrspace(4)* %3249, align 1, !tbaa !9
  %3251 = zext i8 %3250 to i64
  %3252 = shl nuw nsw i64 %3251, 8
  %3253 = or i64 %3252, %3248
  %3254 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 2
  %3255 = load i8, i8 addrspace(4)* %3254, align 1, !tbaa !9
  %3256 = zext i8 %3255 to i64
  %3257 = shl nuw nsw i64 %3256, 16
  %3258 = or i64 %3253, %3257
  %3259 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 3
  %3260 = load i8, i8 addrspace(4)* %3259, align 1, !tbaa !9
  %3261 = zext i8 %3260 to i64
  %3262 = shl nuw nsw i64 %3261, 24
  %3263 = or i64 %3258, %3262
  %3264 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 4
  %3265 = load i8, i8 addrspace(4)* %3264, align 1, !tbaa !9
  %3266 = zext i8 %3265 to i64
  %3267 = shl nuw nsw i64 %3266, 32
  %3268 = or i64 %3263, %3267
  %3269 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 5
  %3270 = load i8, i8 addrspace(4)* %3269, align 1, !tbaa !9
  %3271 = zext i8 %3270 to i64
  %3272 = shl nuw nsw i64 %3271, 40
  %3273 = or i64 %3268, %3272
  %3274 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 6
  %3275 = load i8, i8 addrspace(4)* %3274, align 1, !tbaa !9
  %3276 = zext i8 %3275 to i64
  %3277 = shl nuw nsw i64 %3276, 48
  %3278 = or i64 %3273, %3277
  %3279 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 7
  %3280 = load i8, i8 addrspace(4)* %3279, align 1, !tbaa !9
  %3281 = zext i8 %3280 to i64
  %3282 = shl nuw i64 %3281, 56
  %3283 = or i64 %3278, %3282
  %3284 = add nsw i32 %3228, -8
  %3285 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 8
  br label %3286

3286:                                             ; preds = %3233, %3246, %3231
  %3287 = phi i8 addrspace(4)* [ %3285, %3246 ], [ %3220, %3231 ], [ %3220, %3233 ]
  %3288 = phi i32 [ %3284, %3246 ], [ 0, %3231 ], [ 0, %3233 ]
  %3289 = phi i64 [ %3283, %3246 ], [ 0, %3231 ], [ %3243, %3233 ]
  %3290 = icmp ugt i32 %3288, 7
  br i1 %3290, label %3306, label %3291

3291:                                             ; preds = %3286
  %3292 = icmp eq i32 %3288, 0
  br i1 %3292, label %3346, label %3293

3293:                                             ; preds = %3291, %3293
  %3294 = phi i32 [ %3304, %3293 ], [ 0, %3291 ]
  %3295 = phi i64 [ %3303, %3293 ], [ 0, %3291 ]
  %3296 = zext i32 %3294 to i64
  %3297 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 %3296
  %3298 = load i8, i8 addrspace(4)* %3297, align 1, !tbaa !9
  %3299 = zext i8 %3298 to i64
  %3300 = shl i32 %3294, 3
  %3301 = zext i32 %3300 to i64
  %3302 = shl nuw i64 %3299, %3301
  %3303 = or i64 %3302, %3295
  %3304 = add nuw nsw i32 %3294, 1
  %3305 = icmp eq i32 %3304, %3288
  br i1 %3305, label %3346, label %3293

3306:                                             ; preds = %3286
  %3307 = load i8, i8 addrspace(4)* %3287, align 1, !tbaa !9
  %3308 = zext i8 %3307 to i64
  %3309 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 1
  %3310 = load i8, i8 addrspace(4)* %3309, align 1, !tbaa !9
  %3311 = zext i8 %3310 to i64
  %3312 = shl nuw nsw i64 %3311, 8
  %3313 = or i64 %3312, %3308
  %3314 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 2
  %3315 = load i8, i8 addrspace(4)* %3314, align 1, !tbaa !9
  %3316 = zext i8 %3315 to i64
  %3317 = shl nuw nsw i64 %3316, 16
  %3318 = or i64 %3313, %3317
  %3319 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 3
  %3320 = load i8, i8 addrspace(4)* %3319, align 1, !tbaa !9
  %3321 = zext i8 %3320 to i64
  %3322 = shl nuw nsw i64 %3321, 24
  %3323 = or i64 %3318, %3322
  %3324 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 4
  %3325 = load i8, i8 addrspace(4)* %3324, align 1, !tbaa !9
  %3326 = zext i8 %3325 to i64
  %3327 = shl nuw nsw i64 %3326, 32
  %3328 = or i64 %3323, %3327
  %3329 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 5
  %3330 = load i8, i8 addrspace(4)* %3329, align 1, !tbaa !9
  %3331 = zext i8 %3330 to i64
  %3332 = shl nuw nsw i64 %3331, 40
  %3333 = or i64 %3328, %3332
  %3334 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 6
  %3335 = load i8, i8 addrspace(4)* %3334, align 1, !tbaa !9
  %3336 = zext i8 %3335 to i64
  %3337 = shl nuw nsw i64 %3336, 48
  %3338 = or i64 %3333, %3337
  %3339 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 7
  %3340 = load i8, i8 addrspace(4)* %3339, align 1, !tbaa !9
  %3341 = zext i8 %3340 to i64
  %3342 = shl nuw i64 %3341, 56
  %3343 = or i64 %3338, %3342
  %3344 = add nsw i32 %3288, -8
  %3345 = getelementptr inbounds i8, i8 addrspace(4)* %3287, i64 8
  br label %3346

3346:                                             ; preds = %3293, %3306, %3291
  %3347 = phi i8 addrspace(4)* [ %3345, %3306 ], [ %3287, %3291 ], [ %3287, %3293 ]
  %3348 = phi i32 [ %3344, %3306 ], [ 0, %3291 ], [ 0, %3293 ]
  %3349 = phi i64 [ %3343, %3306 ], [ 0, %3291 ], [ %3303, %3293 ]
  %3350 = icmp ugt i32 %3348, 7
  br i1 %3350, label %3366, label %3351

3351:                                             ; preds = %3346
  %3352 = icmp eq i32 %3348, 0
  br i1 %3352, label %3406, label %3353

3353:                                             ; preds = %3351, %3353
  %3354 = phi i32 [ %3364, %3353 ], [ 0, %3351 ]
  %3355 = phi i64 [ %3363, %3353 ], [ 0, %3351 ]
  %3356 = zext i32 %3354 to i64
  %3357 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 %3356
  %3358 = load i8, i8 addrspace(4)* %3357, align 1, !tbaa !9
  %3359 = zext i8 %3358 to i64
  %3360 = shl i32 %3354, 3
  %3361 = zext i32 %3360 to i64
  %3362 = shl nuw i64 %3359, %3361
  %3363 = or i64 %3362, %3355
  %3364 = add nuw nsw i32 %3354, 1
  %3365 = icmp eq i32 %3364, %3348
  br i1 %3365, label %3406, label %3353

3366:                                             ; preds = %3346
  %3367 = load i8, i8 addrspace(4)* %3347, align 1, !tbaa !9
  %3368 = zext i8 %3367 to i64
  %3369 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 1
  %3370 = load i8, i8 addrspace(4)* %3369, align 1, !tbaa !9
  %3371 = zext i8 %3370 to i64
  %3372 = shl nuw nsw i64 %3371, 8
  %3373 = or i64 %3372, %3368
  %3374 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 2
  %3375 = load i8, i8 addrspace(4)* %3374, align 1, !tbaa !9
  %3376 = zext i8 %3375 to i64
  %3377 = shl nuw nsw i64 %3376, 16
  %3378 = or i64 %3373, %3377
  %3379 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 3
  %3380 = load i8, i8 addrspace(4)* %3379, align 1, !tbaa !9
  %3381 = zext i8 %3380 to i64
  %3382 = shl nuw nsw i64 %3381, 24
  %3383 = or i64 %3378, %3382
  %3384 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 4
  %3385 = load i8, i8 addrspace(4)* %3384, align 1, !tbaa !9
  %3386 = zext i8 %3385 to i64
  %3387 = shl nuw nsw i64 %3386, 32
  %3388 = or i64 %3383, %3387
  %3389 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 5
  %3390 = load i8, i8 addrspace(4)* %3389, align 1, !tbaa !9
  %3391 = zext i8 %3390 to i64
  %3392 = shl nuw nsw i64 %3391, 40
  %3393 = or i64 %3388, %3392
  %3394 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 6
  %3395 = load i8, i8 addrspace(4)* %3394, align 1, !tbaa !9
  %3396 = zext i8 %3395 to i64
  %3397 = shl nuw nsw i64 %3396, 48
  %3398 = or i64 %3393, %3397
  %3399 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 7
  %3400 = load i8, i8 addrspace(4)* %3399, align 1, !tbaa !9
  %3401 = zext i8 %3400 to i64
  %3402 = shl nuw i64 %3401, 56
  %3403 = or i64 %3398, %3402
  %3404 = add nsw i32 %3348, -8
  %3405 = getelementptr inbounds i8, i8 addrspace(4)* %3347, i64 8
  br label %3406

3406:                                             ; preds = %3353, %3366, %3351
  %3407 = phi i8 addrspace(4)* [ %3405, %3366 ], [ %3347, %3351 ], [ %3347, %3353 ]
  %3408 = phi i32 [ %3404, %3366 ], [ 0, %3351 ], [ 0, %3353 ]
  %3409 = phi i64 [ %3403, %3366 ], [ 0, %3351 ], [ %3363, %3353 ]
  %3410 = icmp ugt i32 %3408, 7
  br i1 %3410, label %3426, label %3411

3411:                                             ; preds = %3406
  %3412 = icmp eq i32 %3408, 0
  br i1 %3412, label %3466, label %3413

3413:                                             ; preds = %3411, %3413
  %3414 = phi i32 [ %3424, %3413 ], [ 0, %3411 ]
  %3415 = phi i64 [ %3423, %3413 ], [ 0, %3411 ]
  %3416 = zext i32 %3414 to i64
  %3417 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 %3416
  %3418 = load i8, i8 addrspace(4)* %3417, align 1, !tbaa !9
  %3419 = zext i8 %3418 to i64
  %3420 = shl i32 %3414, 3
  %3421 = zext i32 %3420 to i64
  %3422 = shl nuw i64 %3419, %3421
  %3423 = or i64 %3422, %3415
  %3424 = add nuw nsw i32 %3414, 1
  %3425 = icmp eq i32 %3424, %3408
  br i1 %3425, label %3466, label %3413

3426:                                             ; preds = %3406
  %3427 = load i8, i8 addrspace(4)* %3407, align 1, !tbaa !9
  %3428 = zext i8 %3427 to i64
  %3429 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 1
  %3430 = load i8, i8 addrspace(4)* %3429, align 1, !tbaa !9
  %3431 = zext i8 %3430 to i64
  %3432 = shl nuw nsw i64 %3431, 8
  %3433 = or i64 %3432, %3428
  %3434 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 2
  %3435 = load i8, i8 addrspace(4)* %3434, align 1, !tbaa !9
  %3436 = zext i8 %3435 to i64
  %3437 = shl nuw nsw i64 %3436, 16
  %3438 = or i64 %3433, %3437
  %3439 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 3
  %3440 = load i8, i8 addrspace(4)* %3439, align 1, !tbaa !9
  %3441 = zext i8 %3440 to i64
  %3442 = shl nuw nsw i64 %3441, 24
  %3443 = or i64 %3438, %3442
  %3444 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 4
  %3445 = load i8, i8 addrspace(4)* %3444, align 1, !tbaa !9
  %3446 = zext i8 %3445 to i64
  %3447 = shl nuw nsw i64 %3446, 32
  %3448 = or i64 %3443, %3447
  %3449 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 5
  %3450 = load i8, i8 addrspace(4)* %3449, align 1, !tbaa !9
  %3451 = zext i8 %3450 to i64
  %3452 = shl nuw nsw i64 %3451, 40
  %3453 = or i64 %3448, %3452
  %3454 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 6
  %3455 = load i8, i8 addrspace(4)* %3454, align 1, !tbaa !9
  %3456 = zext i8 %3455 to i64
  %3457 = shl nuw nsw i64 %3456, 48
  %3458 = or i64 %3453, %3457
  %3459 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 7
  %3460 = load i8, i8 addrspace(4)* %3459, align 1, !tbaa !9
  %3461 = zext i8 %3460 to i64
  %3462 = shl nuw i64 %3461, 56
  %3463 = or i64 %3458, %3462
  %3464 = add nsw i32 %3408, -8
  %3465 = getelementptr inbounds i8, i8 addrspace(4)* %3407, i64 8
  br label %3466

3466:                                             ; preds = %3413, %3426, %3411
  %3467 = phi i8 addrspace(4)* [ %3465, %3426 ], [ %3407, %3411 ], [ %3407, %3413 ]
  %3468 = phi i32 [ %3464, %3426 ], [ 0, %3411 ], [ 0, %3413 ]
  %3469 = phi i64 [ %3463, %3426 ], [ 0, %3411 ], [ %3423, %3413 ]
  %3470 = icmp ugt i32 %3468, 7
  br i1 %3470, label %3486, label %3471

3471:                                             ; preds = %3466
  %3472 = icmp eq i32 %3468, 0
  br i1 %3472, label %3526, label %3473

3473:                                             ; preds = %3471, %3473
  %3474 = phi i32 [ %3484, %3473 ], [ 0, %3471 ]
  %3475 = phi i64 [ %3483, %3473 ], [ 0, %3471 ]
  %3476 = zext i32 %3474 to i64
  %3477 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 %3476
  %3478 = load i8, i8 addrspace(4)* %3477, align 1, !tbaa !9
  %3479 = zext i8 %3478 to i64
  %3480 = shl i32 %3474, 3
  %3481 = zext i32 %3480 to i64
  %3482 = shl nuw i64 %3479, %3481
  %3483 = or i64 %3482, %3475
  %3484 = add nuw nsw i32 %3474, 1
  %3485 = icmp eq i32 %3484, %3468
  br i1 %3485, label %3526, label %3473

3486:                                             ; preds = %3466
  %3487 = load i8, i8 addrspace(4)* %3467, align 1, !tbaa !9
  %3488 = zext i8 %3487 to i64
  %3489 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 1
  %3490 = load i8, i8 addrspace(4)* %3489, align 1, !tbaa !9
  %3491 = zext i8 %3490 to i64
  %3492 = shl nuw nsw i64 %3491, 8
  %3493 = or i64 %3492, %3488
  %3494 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 2
  %3495 = load i8, i8 addrspace(4)* %3494, align 1, !tbaa !9
  %3496 = zext i8 %3495 to i64
  %3497 = shl nuw nsw i64 %3496, 16
  %3498 = or i64 %3493, %3497
  %3499 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 3
  %3500 = load i8, i8 addrspace(4)* %3499, align 1, !tbaa !9
  %3501 = zext i8 %3500 to i64
  %3502 = shl nuw nsw i64 %3501, 24
  %3503 = or i64 %3498, %3502
  %3504 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 4
  %3505 = load i8, i8 addrspace(4)* %3504, align 1, !tbaa !9
  %3506 = zext i8 %3505 to i64
  %3507 = shl nuw nsw i64 %3506, 32
  %3508 = or i64 %3503, %3507
  %3509 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 5
  %3510 = load i8, i8 addrspace(4)* %3509, align 1, !tbaa !9
  %3511 = zext i8 %3510 to i64
  %3512 = shl nuw nsw i64 %3511, 40
  %3513 = or i64 %3508, %3512
  %3514 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 6
  %3515 = load i8, i8 addrspace(4)* %3514, align 1, !tbaa !9
  %3516 = zext i8 %3515 to i64
  %3517 = shl nuw nsw i64 %3516, 48
  %3518 = or i64 %3513, %3517
  %3519 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 7
  %3520 = load i8, i8 addrspace(4)* %3519, align 1, !tbaa !9
  %3521 = zext i8 %3520 to i64
  %3522 = shl nuw i64 %3521, 56
  %3523 = or i64 %3518, %3522
  %3524 = add nsw i32 %3468, -8
  %3525 = getelementptr inbounds i8, i8 addrspace(4)* %3467, i64 8
  br label %3526

3526:                                             ; preds = %3473, %3486, %3471
  %3527 = phi i8 addrspace(4)* [ %3525, %3486 ], [ %3467, %3471 ], [ %3467, %3473 ]
  %3528 = phi i32 [ %3524, %3486 ], [ 0, %3471 ], [ 0, %3473 ]
  %3529 = phi i64 [ %3523, %3486 ], [ 0, %3471 ], [ %3483, %3473 ]
  %3530 = icmp ugt i32 %3528, 7
  br i1 %3530, label %3546, label %3531

3531:                                             ; preds = %3526
  %3532 = icmp eq i32 %3528, 0
  br i1 %3532, label %3586, label %3533

3533:                                             ; preds = %3531, %3533
  %3534 = phi i32 [ %3544, %3533 ], [ 0, %3531 ]
  %3535 = phi i64 [ %3543, %3533 ], [ 0, %3531 ]
  %3536 = zext i32 %3534 to i64
  %3537 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 %3536
  %3538 = load i8, i8 addrspace(4)* %3537, align 1, !tbaa !9
  %3539 = zext i8 %3538 to i64
  %3540 = shl i32 %3534, 3
  %3541 = zext i32 %3540 to i64
  %3542 = shl nuw i64 %3539, %3541
  %3543 = or i64 %3542, %3535
  %3544 = add nuw nsw i32 %3534, 1
  %3545 = icmp eq i32 %3544, %3528
  br i1 %3545, label %3586, label %3533

3546:                                             ; preds = %3526
  %3547 = load i8, i8 addrspace(4)* %3527, align 1, !tbaa !9
  %3548 = zext i8 %3547 to i64
  %3549 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 1
  %3550 = load i8, i8 addrspace(4)* %3549, align 1, !tbaa !9
  %3551 = zext i8 %3550 to i64
  %3552 = shl nuw nsw i64 %3551, 8
  %3553 = or i64 %3552, %3548
  %3554 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 2
  %3555 = load i8, i8 addrspace(4)* %3554, align 1, !tbaa !9
  %3556 = zext i8 %3555 to i64
  %3557 = shl nuw nsw i64 %3556, 16
  %3558 = or i64 %3553, %3557
  %3559 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 3
  %3560 = load i8, i8 addrspace(4)* %3559, align 1, !tbaa !9
  %3561 = zext i8 %3560 to i64
  %3562 = shl nuw nsw i64 %3561, 24
  %3563 = or i64 %3558, %3562
  %3564 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 4
  %3565 = load i8, i8 addrspace(4)* %3564, align 1, !tbaa !9
  %3566 = zext i8 %3565 to i64
  %3567 = shl nuw nsw i64 %3566, 32
  %3568 = or i64 %3563, %3567
  %3569 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 5
  %3570 = load i8, i8 addrspace(4)* %3569, align 1, !tbaa !9
  %3571 = zext i8 %3570 to i64
  %3572 = shl nuw nsw i64 %3571, 40
  %3573 = or i64 %3568, %3572
  %3574 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 6
  %3575 = load i8, i8 addrspace(4)* %3574, align 1, !tbaa !9
  %3576 = zext i8 %3575 to i64
  %3577 = shl nuw nsw i64 %3576, 48
  %3578 = or i64 %3573, %3577
  %3579 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 7
  %3580 = load i8, i8 addrspace(4)* %3579, align 1, !tbaa !9
  %3581 = zext i8 %3580 to i64
  %3582 = shl nuw i64 %3581, 56
  %3583 = or i64 %3578, %3582
  %3584 = add nsw i32 %3528, -8
  %3585 = getelementptr inbounds i8, i8 addrspace(4)* %3527, i64 8
  br label %3586

3586:                                             ; preds = %3533, %3546, %3531
  %3587 = phi i8 addrspace(4)* [ %3585, %3546 ], [ %3527, %3531 ], [ %3527, %3533 ]
  %3588 = phi i32 [ %3584, %3546 ], [ 0, %3531 ], [ 0, %3533 ]
  %3589 = phi i64 [ %3583, %3546 ], [ 0, %3531 ], [ %3543, %3533 ]
  %3590 = icmp ugt i32 %3588, 7
  br i1 %3590, label %3606, label %3591

3591:                                             ; preds = %3586
  %3592 = icmp eq i32 %3588, 0
  br i1 %3592, label %3644, label %3593

3593:                                             ; preds = %3591, %3593
  %3594 = phi i32 [ %3604, %3593 ], [ 0, %3591 ]
  %3595 = phi i64 [ %3603, %3593 ], [ 0, %3591 ]
  %3596 = zext i32 %3594 to i64
  %3597 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 %3596
  %3598 = load i8, i8 addrspace(4)* %3597, align 1, !tbaa !9
  %3599 = zext i8 %3598 to i64
  %3600 = shl i32 %3594, 3
  %3601 = zext i32 %3600 to i64
  %3602 = shl nuw i64 %3599, %3601
  %3603 = or i64 %3602, %3595
  %3604 = add nuw nsw i32 %3594, 1
  %3605 = icmp eq i32 %3604, %3588
  br i1 %3605, label %3644, label %3593

3606:                                             ; preds = %3586
  %3607 = load i8, i8 addrspace(4)* %3587, align 1, !tbaa !9
  %3608 = zext i8 %3607 to i64
  %3609 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 1
  %3610 = load i8, i8 addrspace(4)* %3609, align 1, !tbaa !9
  %3611 = zext i8 %3610 to i64
  %3612 = shl nuw nsw i64 %3611, 8
  %3613 = or i64 %3612, %3608
  %3614 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 2
  %3615 = load i8, i8 addrspace(4)* %3614, align 1, !tbaa !9
  %3616 = zext i8 %3615 to i64
  %3617 = shl nuw nsw i64 %3616, 16
  %3618 = or i64 %3613, %3617
  %3619 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 3
  %3620 = load i8, i8 addrspace(4)* %3619, align 1, !tbaa !9
  %3621 = zext i8 %3620 to i64
  %3622 = shl nuw nsw i64 %3621, 24
  %3623 = or i64 %3618, %3622
  %3624 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 4
  %3625 = load i8, i8 addrspace(4)* %3624, align 1, !tbaa !9
  %3626 = zext i8 %3625 to i64
  %3627 = shl nuw nsw i64 %3626, 32
  %3628 = or i64 %3623, %3627
  %3629 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 5
  %3630 = load i8, i8 addrspace(4)* %3629, align 1, !tbaa !9
  %3631 = zext i8 %3630 to i64
  %3632 = shl nuw nsw i64 %3631, 40
  %3633 = or i64 %3628, %3632
  %3634 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 6
  %3635 = load i8, i8 addrspace(4)* %3634, align 1, !tbaa !9
  %3636 = zext i8 %3635 to i64
  %3637 = shl nuw nsw i64 %3636, 48
  %3638 = or i64 %3633, %3637
  %3639 = getelementptr inbounds i8, i8 addrspace(4)* %3587, i64 7
  %3640 = load i8, i8 addrspace(4)* %3639, align 1, !tbaa !9
  %3641 = zext i8 %3640 to i64
  %3642 = shl nuw i64 %3641, 56
  %3643 = or i64 %3638, %3642
  br label %3644

3644:                                             ; preds = %3593, %3606, %3591
  %3645 = phi i64 [ %3643, %3606 ], [ 0, %3591 ], [ %3603, %3593 ]
  %3646 = shl nuw nsw i64 %3227, 2
  %3647 = add nuw nsw i64 %3646, 28
  %3648 = and i64 %3647, 480
  %3649 = and i64 %3229, -225
  %3650 = or i64 %3649, %3648
  %3651 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3650, i64 noundef %3289, i64 noundef %3349, i64 noundef %3409, i64 noundef %3469, i64 noundef %3529, i64 noundef %3589, i64 noundef %3645) #11
  %3652 = sub i64 %3219, %3227
  %3653 = getelementptr inbounds i8, i8 addrspace(4)* %3220, i64 %3227
  %3654 = icmp eq i64 %3652, 0
  br i1 %3654, label %3659, label %3218

3655:                                             ; preds = %3212
  %3656 = and i64 %3202, -225
  %3657 = or i64 %3656, 32
  %3658 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3657, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %3659

3659:                                             ; preds = %3644, %3655
  %3660 = phi <2 x i64> [ %3658, %3655 ], [ %3651, %3644 ]
  %3661 = extractelement <2 x i64> %3660, i64 0
  %3662 = zext i32 %2789 to i64
  %3663 = and i64 %3661, -225
  %3664 = or i64 %3663, 32
  %3665 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3664, i64 noundef %3662, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3666 = extractelement <2 x i64> %3665, i64 0
  %3667 = and i64 %3666, -225
  %3668 = or i64 %3667, 32
  %3669 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3668, i64 noundef %624, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3670 = extractelement <2 x i64> %3669, i64 0
  %3671 = and i64 %3670, -225
  %3672 = or i64 %3671, 32
  %3673 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3672, i64 noundef %625, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3674 = extractelement <2 x i64> %3673, i64 0
  %3675 = and i64 %3674, -225
  %3676 = or i64 %3675, 32
  %3677 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3676, i64 noundef %626, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3678 = extractelement <2 x i64> %3677, i64 0
  %3679 = and i64 %3678, -225
  %3680 = or i64 %3679, 32
  %3681 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3680, i64 noundef %627, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3682 = extractelement <2 x i64> %3681, i64 0
  %3683 = and i64 %3682, -225
  %3684 = or i64 %3683, 32
  %3685 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3684, i64 noundef %628, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3686 = extractelement <2 x i64> %3685, i64 0
  %3687 = and i64 %3686, -225
  %3688 = or i64 %3687, 32
  %3689 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3688, i64 noundef %629, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3690 = extractelement <2 x i64> %3689, i64 0
  %3691 = and i64 %3690, -225
  %3692 = or i64 %3691, 32
  %3693 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3692, i64 noundef %630, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3694 = extractelement <2 x i64> %3693, i64 0
  %3695 = and i64 %3694, -225
  %3696 = or i64 %3695, 32
  %3697 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3696, i64 noundef %631, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3698 = extractelement <2 x i64> %3697, i64 0
  %3699 = and i64 %3698, -225
  %3700 = or i64 %3699, 32
  %3701 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3700, i64 noundef %632, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3702 = extractelement <2 x i64> %3701, i64 0
  %3703 = and i64 %3702, -225
  %3704 = or i64 %3703, 32
  %3705 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3704, i64 noundef %633, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3706 = extractelement <2 x i64> %3705, i64 0
  %3707 = and i64 %3706, -225
  %3708 = or i64 %3707, 32
  %3709 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3708, i64 noundef %634, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3710 = extractelement <2 x i64> %3709, i64 0
  %3711 = and i64 %3710, -225
  %3712 = or i64 %3711, 32
  %3713 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3712, i64 noundef %635, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3714 = extractelement <2 x i64> %3713, i64 0
  %3715 = and i64 %3714, -225
  %3716 = or i64 %3715, 32
  %3717 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3716, i64 noundef %636, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3718 = extractelement <2 x i64> %3717, i64 0
  %3719 = and i64 %3718, -225
  %3720 = or i64 %3719, 32
  %3721 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3720, i64 noundef %637, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3722 = extractelement <2 x i64> %3721, i64 0
  %3723 = and i64 %3722, -225
  %3724 = or i64 %3723, 32
  %3725 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3724, i64 noundef %638, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3726 = extractelement <2 x i64> %3725, i64 0
  %3727 = zext i32 %3183 to i64
  %3728 = and i64 %3726, -225
  %3729 = or i64 %3728, 32
  %3730 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3729, i64 noundef %3727, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3731 = extractelement <2 x i64> %3730, i64 0
  %3732 = zext i32 %3185 to i64
  %3733 = and i64 %3731, -225
  %3734 = or i64 %3733, 32
  %3735 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3734, i64 noundef %3732, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3736 = extractelement <2 x i64> %3735, i64 0
  %3737 = zext i32 %3187 to i64
  %3738 = and i64 %3736, -225
  %3739 = or i64 %3738, 32
  %3740 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3739, i64 noundef %3737, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3741 = extractelement <2 x i64> %3740, i64 0
  %3742 = zext i32 %3189 to i64
  %3743 = and i64 %3741, -225
  %3744 = or i64 %3743, 32
  %3745 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3744, i64 noundef %3742, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3746 = extractelement <2 x i64> %3745, i64 0
  %3747 = zext i32 %3191 to i64
  %3748 = and i64 %3746, -225
  %3749 = or i64 %3748, 32
  %3750 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3749, i64 noundef %3747, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3751 = extractelement <2 x i64> %3750, i64 0
  %3752 = zext i32 %3193 to i64
  %3753 = and i64 %3751, -225
  %3754 = or i64 %3753, 32
  %3755 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3754, i64 noundef %3752, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3756 = extractelement <2 x i64> %3755, i64 0
  %3757 = zext i32 %3195 to i64
  %3758 = and i64 %3756, -225
  %3759 = or i64 %3758, 32
  %3760 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3759, i64 noundef %3757, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3761 = extractelement <2 x i64> %3760, i64 0
  %3762 = zext i32 %3197 to i64
  %3763 = and i64 %3761, -225
  %3764 = or i64 %3763, 32
  %3765 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3764, i64 noundef %3762, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3766 = extractelement <2 x i64> %3765, i64 0
  %3767 = zext i32 %2836 to i64
  %3768 = and i64 %3766, -225
  %3769 = or i64 %3768, 32
  %3770 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3769, i64 noundef %3767, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3771 = extractelement <2 x i64> %3770, i64 0
  %3772 = zext i32 %2884 to i64
  %3773 = and i64 %3771, -225
  %3774 = or i64 %3773, 32
  %3775 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3774, i64 noundef %3772, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3776 = extractelement <2 x i64> %3775, i64 0
  %3777 = zext i32 %2933 to i64
  %3778 = and i64 %3776, -225
  %3779 = or i64 %3778, 32
  %3780 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3779, i64 noundef %3777, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3781 = extractelement <2 x i64> %3780, i64 0
  %3782 = zext i32 %2982 to i64
  %3783 = and i64 %3781, -225
  %3784 = or i64 %3783, 32
  %3785 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3784, i64 noundef %3782, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3786 = extractelement <2 x i64> %3785, i64 0
  %3787 = zext i32 %3031 to i64
  %3788 = and i64 %3786, -225
  %3789 = or i64 %3788, 32
  %3790 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3789, i64 noundef %3787, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3791 = extractelement <2 x i64> %3790, i64 0
  %3792 = zext i32 %3080 to i64
  %3793 = and i64 %3791, -225
  %3794 = or i64 %3793, 32
  %3795 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3794, i64 noundef %3792, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3796 = extractelement <2 x i64> %3795, i64 0
  %3797 = zext i32 %3129 to i64
  %3798 = and i64 %3796, -225
  %3799 = or i64 %3798, 32
  %3800 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3799, i64 noundef %3797, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3801 = extractelement <2 x i64> %3800, i64 0
  %3802 = zext i32 %3178 to i64
  %3803 = and i64 %3801, -225
  %3804 = or i64 %3803, 32
  %3805 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3804, i64 noundef %3802, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3806 = extractelement <2 x i64> %3805, i64 0
  %3807 = and i64 %3806, -225
  %3808 = or i64 %3807, 32
  %3809 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3808, i64 noundef %639, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3810 = extractelement <2 x i64> %3809, i64 0
  %3811 = and i64 %3810, -225
  %3812 = or i64 %3811, 32
  %3813 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3812, i64 noundef %640, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3814 = extractelement <2 x i64> %3813, i64 0
  %3815 = and i64 %3814, -225
  %3816 = or i64 %3815, 32
  %3817 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3816, i64 noundef %641, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3818 = extractelement <2 x i64> %3817, i64 0
  %3819 = and i64 %3818, -225
  %3820 = or i64 %3819, 32
  %3821 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3820, i64 noundef %642, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3822 = extractelement <2 x i64> %3821, i64 0
  %3823 = zext i32 %1724 to i64
  %3824 = and i64 %3822, -225
  %3825 = or i64 %3824, 32
  %3826 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3825, i64 noundef %3823, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3827 = extractelement <2 x i64> %3826, i64 0
  %3828 = zext i32 %2786 to i64
  %3829 = and i64 %3827, -225
  %3830 = or i64 %3829, 32
  %3831 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3830, i64 noundef %3828, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3832 = extractelement <2 x i64> %3831, i64 0
  %3833 = and i64 %3832, -225
  %3834 = or i64 %3833, 32
  %3835 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3834, i64 noundef 52396, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3836 = extractelement <2 x i64> %3835, i64 0
  %3837 = and i64 %3836, -225
  %3838 = or i64 %3837, 32
  %3839 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3838, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3840 = extractelement <2 x i64> %3839, i64 0
  %3841 = and i64 %3840, -225
  %3842 = or i64 %3841, 32
  %3843 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3842, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %3844 = extractelement <2 x i64> %3843, i64 0
  %3845 = and i64 %3844, -227
  %3846 = or i64 %3845, 34
  %3847 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %3200, i64 noundef %3846, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %3848

3848:                                             ; preds = %3659, %2788, %2785
  %3849 = phi i32 [ 52396, %3659 ], [ %3180, %2788 ], [ 0, %2785 ]
  %3850 = icmp eq i32 %620, 13139
  br i1 %3850, label %3851, label %4912

3851:                                             ; preds = %3848
  %3852 = add nuw nsw i32 %30, 3
  %3853 = shl nuw nsw i32 %29, 3
  %3854 = add nuw nsw i32 %3853, 64
  %3855 = urem i32 %3854, 17
  %3856 = add nuw nsw i32 %3855, %27
  %3857 = shl nuw nsw i32 %3856, 3
  %3858 = urem i32 %3857, 17
  %3859 = add nuw nsw i32 %3858, %25
  %3860 = shl nuw nsw i32 %3859, 3
  %3861 = urem i32 %3860, 17
  %3862 = add nuw nsw i32 %3861, %23
  %3863 = shl nuw nsw i32 %3862, 3
  %3864 = urem i32 %3863, 17
  %3865 = add nuw nsw i32 %3864, %21
  %3866 = shl nuw nsw i32 %3865, 3
  %3867 = urem i32 %3866, 17
  %3868 = add nuw nsw i32 %3867, %19
  %3869 = shl nuw nsw i32 %3868, 3
  %3870 = urem i32 %3869, 17
  %3871 = add nuw nsw i32 %3870, %17
  %3872 = shl nuw nsw i32 %3871, 3
  %3873 = urem i32 %3872, 17
  %3874 = add nuw nsw i32 %3873, %15
  %3875 = shl nuw nsw i32 %3874, 3
  %3876 = urem i32 %3875, 17
  %3877 = add nuw nsw i32 %3876, %13
  %3878 = shl nuw nsw i32 %3877, 3
  %3879 = urem i32 %3878, 17
  %3880 = add nuw nsw i32 %3879, %11
  %3881 = shl nuw nsw i32 %3880, 3
  %3882 = urem i32 %3881, 17
  %3883 = add nuw nsw i32 %3882, %9
  %3884 = shl nuw nsw i32 %3883, 3
  %3885 = urem i32 %3884, 17
  %3886 = add nuw nsw i32 %3885, %7
  %3887 = shl nuw nsw i32 %3886, 3
  %3888 = urem i32 %3887, 17
  %3889 = add nuw nsw i32 %3888, %5
  %3890 = shl nuw nsw i32 %3889, 3
  %3891 = urem i32 %3890, 17
  %3892 = add nuw nsw i32 %3891, %3
  %3893 = shl nuw nsw i32 %3892, 3
  %3894 = urem i32 %3893, 17
  %3895 = add nuw nsw i32 %3894, %2
  %3896 = shl nuw nsw i32 %3895, 3
  %3897 = urem i32 %3896, 17
  %3898 = add nuw nsw i32 %3852, %3897
  %3899 = urem i32 %3898, 17
  %3900 = shl nuw nsw i32 1, %3899
  %3901 = mul nuw nsw i32 %29, 9
  %3902 = add nuw nsw i32 %3901, 81
  %3903 = urem i32 %3902, 17
  %3904 = add nuw nsw i32 %3903, %27
  %3905 = mul nuw nsw i32 %3904, 9
  %3906 = urem i32 %3905, 17
  %3907 = add nuw nsw i32 %3906, %25
  %3908 = mul nuw nsw i32 %3907, 9
  %3909 = urem i32 %3908, 17
  %3910 = add nuw nsw i32 %3909, %23
  %3911 = mul nuw nsw i32 %3910, 9
  %3912 = urem i32 %3911, 17
  %3913 = add nuw nsw i32 %3912, %21
  %3914 = mul nuw nsw i32 %3913, 9
  %3915 = urem i32 %3914, 17
  %3916 = add nuw nsw i32 %3915, %19
  %3917 = mul nuw nsw i32 %3916, 9
  %3918 = urem i32 %3917, 17
  %3919 = add nuw nsw i32 %3918, %17
  %3920 = mul nuw nsw i32 %3919, 9
  %3921 = urem i32 %3920, 17
  %3922 = add nuw nsw i32 %3921, %15
  %3923 = mul nuw nsw i32 %3922, 9
  %3924 = urem i32 %3923, 17
  %3925 = add nuw nsw i32 %3924, %13
  %3926 = mul nuw nsw i32 %3925, 9
  %3927 = urem i32 %3926, 17
  %3928 = add nuw nsw i32 %3927, %11
  %3929 = mul nuw nsw i32 %3928, 9
  %3930 = urem i32 %3929, 17
  %3931 = add nuw nsw i32 %3930, %9
  %3932 = mul nuw nsw i32 %3931, 9
  %3933 = urem i32 %3932, 17
  %3934 = add nuw nsw i32 %3933, %7
  %3935 = mul nuw nsw i32 %3934, 9
  %3936 = urem i32 %3935, 17
  %3937 = add nuw nsw i32 %3936, %5
  %3938 = mul nuw nsw i32 %3937, 9
  %3939 = urem i32 %3938, 17
  %3940 = add nuw nsw i32 %3939, %3
  %3941 = mul nuw nsw i32 %3940, 9
  %3942 = urem i32 %3941, 17
  %3943 = add nuw nsw i32 %3942, %2
  %3944 = mul nuw nsw i32 %3943, 9
  %3945 = urem i32 %3944, 17
  %3946 = add nuw nsw i32 %3852, %3945
  %3947 = urem i32 %3946, 17
  %3948 = shl nuw nsw i32 1, %3947
  %3949 = or i32 %3900, %3948
  %3950 = mul nuw nsw i32 %29, 10
  %3951 = add nuw nsw i32 %3950, 100
  %3952 = urem i32 %3951, 17
  %3953 = add nuw nsw i32 %3952, %27
  %3954 = mul nuw nsw i32 %3953, 10
  %3955 = urem i32 %3954, 17
  %3956 = add nuw nsw i32 %3955, %25
  %3957 = mul nuw nsw i32 %3956, 10
  %3958 = urem i32 %3957, 17
  %3959 = add nuw nsw i32 %3958, %23
  %3960 = mul nuw nsw i32 %3959, 10
  %3961 = urem i32 %3960, 17
  %3962 = add nuw nsw i32 %3961, %21
  %3963 = mul nuw nsw i32 %3962, 10
  %3964 = urem i32 %3963, 17
  %3965 = add nuw nsw i32 %3964, %19
  %3966 = mul nuw nsw i32 %3965, 10
  %3967 = urem i32 %3966, 17
  %3968 = add nuw nsw i32 %3967, %17
  %3969 = mul nuw nsw i32 %3968, 10
  %3970 = urem i32 %3969, 17
  %3971 = add nuw nsw i32 %3970, %15
  %3972 = mul nuw nsw i32 %3971, 10
  %3973 = urem i32 %3972, 17
  %3974 = add nuw nsw i32 %3973, %13
  %3975 = mul nuw nsw i32 %3974, 10
  %3976 = urem i32 %3975, 17
  %3977 = add nuw nsw i32 %3976, %11
  %3978 = mul nuw nsw i32 %3977, 10
  %3979 = urem i32 %3978, 17
  %3980 = add nuw nsw i32 %3979, %9
  %3981 = mul nuw nsw i32 %3980, 10
  %3982 = urem i32 %3981, 17
  %3983 = add nuw nsw i32 %3982, %7
  %3984 = mul nuw nsw i32 %3983, 10
  %3985 = urem i32 %3984, 17
  %3986 = add nuw nsw i32 %3985, %5
  %3987 = mul nuw nsw i32 %3986, 10
  %3988 = urem i32 %3987, 17
  %3989 = add nuw nsw i32 %3988, %3
  %3990 = mul nuw nsw i32 %3989, 10
  %3991 = urem i32 %3990, 17
  %3992 = add nuw nsw i32 %3991, %2
  %3993 = mul nuw nsw i32 %3992, 10
  %3994 = urem i32 %3993, 17
  %3995 = add nuw nsw i32 %3852, %3994
  %3996 = urem i32 %3995, 17
  %3997 = shl nuw nsw i32 1, %3996
  %3998 = or i32 %3949, %3997
  %3999 = mul nuw nsw i32 %29, 11
  %4000 = add nuw nsw i32 %3999, 121
  %4001 = urem i32 %4000, 17
  %4002 = add nuw nsw i32 %4001, %27
  %4003 = mul nuw nsw i32 %4002, 11
  %4004 = urem i32 %4003, 17
  %4005 = add nuw nsw i32 %4004, %25
  %4006 = mul nuw nsw i32 %4005, 11
  %4007 = urem i32 %4006, 17
  %4008 = add nuw nsw i32 %4007, %23
  %4009 = mul nuw nsw i32 %4008, 11
  %4010 = urem i32 %4009, 17
  %4011 = add nuw nsw i32 %4010, %21
  %4012 = mul nuw nsw i32 %4011, 11
  %4013 = urem i32 %4012, 17
  %4014 = add nuw nsw i32 %4013, %19
  %4015 = mul nuw nsw i32 %4014, 11
  %4016 = urem i32 %4015, 17
  %4017 = add nuw nsw i32 %4016, %17
  %4018 = mul nuw nsw i32 %4017, 11
  %4019 = urem i32 %4018, 17
  %4020 = add nuw nsw i32 %4019, %15
  %4021 = mul nuw nsw i32 %4020, 11
  %4022 = urem i32 %4021, 17
  %4023 = add nuw nsw i32 %4022, %13
  %4024 = mul nuw nsw i32 %4023, 11
  %4025 = urem i32 %4024, 17
  %4026 = add nuw nsw i32 %4025, %11
  %4027 = mul nuw nsw i32 %4026, 11
  %4028 = urem i32 %4027, 17
  %4029 = add nuw nsw i32 %4028, %9
  %4030 = mul nuw nsw i32 %4029, 11
  %4031 = urem i32 %4030, 17
  %4032 = add nuw nsw i32 %4031, %7
  %4033 = mul nuw nsw i32 %4032, 11
  %4034 = urem i32 %4033, 17
  %4035 = add nuw nsw i32 %4034, %5
  %4036 = mul nuw nsw i32 %4035, 11
  %4037 = urem i32 %4036, 17
  %4038 = add nuw nsw i32 %4037, %3
  %4039 = mul nuw nsw i32 %4038, 11
  %4040 = urem i32 %4039, 17
  %4041 = add nuw nsw i32 %4040, %2
  %4042 = mul nuw nsw i32 %4041, 11
  %4043 = urem i32 %4042, 17
  %4044 = add nuw nsw i32 %3852, %4043
  %4045 = urem i32 %4044, 17
  %4046 = shl nuw nsw i32 1, %4045
  %4047 = or i32 %3998, %4046
  %4048 = mul nuw nsw i32 %29, 12
  %4049 = add nuw nsw i32 %4048, 144
  %4050 = urem i32 %4049, 17
  %4051 = add nuw nsw i32 %4050, %27
  %4052 = mul nuw nsw i32 %4051, 12
  %4053 = urem i32 %4052, 17
  %4054 = add nuw nsw i32 %4053, %25
  %4055 = mul nuw nsw i32 %4054, 12
  %4056 = urem i32 %4055, 17
  %4057 = add nuw nsw i32 %4056, %23
  %4058 = mul nuw nsw i32 %4057, 12
  %4059 = urem i32 %4058, 17
  %4060 = add nuw nsw i32 %4059, %21
  %4061 = mul nuw nsw i32 %4060, 12
  %4062 = urem i32 %4061, 17
  %4063 = add nuw nsw i32 %4062, %19
  %4064 = mul nuw nsw i32 %4063, 12
  %4065 = urem i32 %4064, 17
  %4066 = add nuw nsw i32 %4065, %17
  %4067 = mul nuw nsw i32 %4066, 12
  %4068 = urem i32 %4067, 17
  %4069 = add nuw nsw i32 %4068, %15
  %4070 = mul nuw nsw i32 %4069, 12
  %4071 = urem i32 %4070, 17
  %4072 = add nuw nsw i32 %4071, %13
  %4073 = mul nuw nsw i32 %4072, 12
  %4074 = urem i32 %4073, 17
  %4075 = add nuw nsw i32 %4074, %11
  %4076 = mul nuw nsw i32 %4075, 12
  %4077 = urem i32 %4076, 17
  %4078 = add nuw nsw i32 %4077, %9
  %4079 = mul nuw nsw i32 %4078, 12
  %4080 = urem i32 %4079, 17
  %4081 = add nuw nsw i32 %4080, %7
  %4082 = mul nuw nsw i32 %4081, 12
  %4083 = urem i32 %4082, 17
  %4084 = add nuw nsw i32 %4083, %5
  %4085 = mul nuw nsw i32 %4084, 12
  %4086 = urem i32 %4085, 17
  %4087 = add nuw nsw i32 %4086, %3
  %4088 = mul nuw nsw i32 %4087, 12
  %4089 = urem i32 %4088, 17
  %4090 = add nuw nsw i32 %4089, %2
  %4091 = mul nuw nsw i32 %4090, 12
  %4092 = urem i32 %4091, 17
  %4093 = add nuw nsw i32 %3852, %4092
  %4094 = urem i32 %4093, 17
  %4095 = shl nuw nsw i32 1, %4094
  %4096 = or i32 %4047, %4095
  %4097 = mul nuw nsw i32 %29, 13
  %4098 = add nuw nsw i32 %4097, 169
  %4099 = urem i32 %4098, 17
  %4100 = add nuw nsw i32 %4099, %27
  %4101 = mul nuw nsw i32 %4100, 13
  %4102 = urem i32 %4101, 17
  %4103 = add nuw nsw i32 %4102, %25
  %4104 = mul nuw nsw i32 %4103, 13
  %4105 = urem i32 %4104, 17
  %4106 = add nuw nsw i32 %4105, %23
  %4107 = mul nuw nsw i32 %4106, 13
  %4108 = urem i32 %4107, 17
  %4109 = add nuw nsw i32 %4108, %21
  %4110 = mul nuw nsw i32 %4109, 13
  %4111 = urem i32 %4110, 17
  %4112 = add nuw nsw i32 %4111, %19
  %4113 = mul nuw nsw i32 %4112, 13
  %4114 = urem i32 %4113, 17
  %4115 = add nuw nsw i32 %4114, %17
  %4116 = mul nuw nsw i32 %4115, 13
  %4117 = urem i32 %4116, 17
  %4118 = add nuw nsw i32 %4117, %15
  %4119 = mul nuw nsw i32 %4118, 13
  %4120 = urem i32 %4119, 17
  %4121 = add nuw nsw i32 %4120, %13
  %4122 = mul nuw nsw i32 %4121, 13
  %4123 = urem i32 %4122, 17
  %4124 = add nuw nsw i32 %4123, %11
  %4125 = mul nuw nsw i32 %4124, 13
  %4126 = urem i32 %4125, 17
  %4127 = add nuw nsw i32 %4126, %9
  %4128 = mul nuw nsw i32 %4127, 13
  %4129 = urem i32 %4128, 17
  %4130 = add nuw nsw i32 %4129, %7
  %4131 = mul nuw nsw i32 %4130, 13
  %4132 = urem i32 %4131, 17
  %4133 = add nuw nsw i32 %4132, %5
  %4134 = mul nuw nsw i32 %4133, 13
  %4135 = urem i32 %4134, 17
  %4136 = add nuw nsw i32 %4135, %3
  %4137 = mul nuw nsw i32 %4136, 13
  %4138 = urem i32 %4137, 17
  %4139 = add nuw nsw i32 %4138, %2
  %4140 = mul nuw nsw i32 %4139, 13
  %4141 = urem i32 %4140, 17
  %4142 = add nuw nsw i32 %3852, %4141
  %4143 = urem i32 %4142, 17
  %4144 = shl nuw nsw i32 1, %4143
  %4145 = or i32 %4096, %4144
  %4146 = mul nuw nsw i32 %29, 14
  %4147 = add nuw nsw i32 %4146, 196
  %4148 = urem i32 %4147, 17
  %4149 = add nuw nsw i32 %4148, %27
  %4150 = mul nuw nsw i32 %4149, 14
  %4151 = urem i32 %4150, 17
  %4152 = add nuw nsw i32 %4151, %25
  %4153 = mul nuw nsw i32 %4152, 14
  %4154 = urem i32 %4153, 17
  %4155 = add nuw nsw i32 %4154, %23
  %4156 = mul nuw nsw i32 %4155, 14
  %4157 = urem i32 %4156, 17
  %4158 = add nuw nsw i32 %4157, %21
  %4159 = mul nuw nsw i32 %4158, 14
  %4160 = urem i32 %4159, 17
  %4161 = add nuw nsw i32 %4160, %19
  %4162 = mul nuw nsw i32 %4161, 14
  %4163 = urem i32 %4162, 17
  %4164 = add nuw nsw i32 %4163, %17
  %4165 = mul nuw nsw i32 %4164, 14
  %4166 = urem i32 %4165, 17
  %4167 = add nuw nsw i32 %4166, %15
  %4168 = mul nuw nsw i32 %4167, 14
  %4169 = urem i32 %4168, 17
  %4170 = add nuw nsw i32 %4169, %13
  %4171 = mul nuw nsw i32 %4170, 14
  %4172 = urem i32 %4171, 17
  %4173 = add nuw nsw i32 %4172, %11
  %4174 = mul nuw nsw i32 %4173, 14
  %4175 = urem i32 %4174, 17
  %4176 = add nuw nsw i32 %4175, %9
  %4177 = mul nuw nsw i32 %4176, 14
  %4178 = urem i32 %4177, 17
  %4179 = add nuw nsw i32 %4178, %7
  %4180 = mul nuw nsw i32 %4179, 14
  %4181 = urem i32 %4180, 17
  %4182 = add nuw nsw i32 %4181, %5
  %4183 = mul nuw nsw i32 %4182, 14
  %4184 = urem i32 %4183, 17
  %4185 = add nuw nsw i32 %4184, %3
  %4186 = mul nuw nsw i32 %4185, 14
  %4187 = urem i32 %4186, 17
  %4188 = add nuw nsw i32 %4187, %2
  %4189 = mul nuw nsw i32 %4188, 14
  %4190 = urem i32 %4189, 17
  %4191 = add nuw nsw i32 %3852, %4190
  %4192 = urem i32 %4191, 17
  %4193 = shl nuw nsw i32 1, %4192
  %4194 = or i32 %4145, %4193
  %4195 = mul nuw nsw i32 %29, 15
  %4196 = add nuw nsw i32 %4195, 225
  %4197 = urem i32 %4196, 17
  %4198 = add nuw nsw i32 %4197, %27
  %4199 = mul nuw nsw i32 %4198, 15
  %4200 = urem i32 %4199, 17
  %4201 = add nuw nsw i32 %4200, %25
  %4202 = mul nuw nsw i32 %4201, 15
  %4203 = urem i32 %4202, 17
  %4204 = add nuw nsw i32 %4203, %23
  %4205 = mul nuw nsw i32 %4204, 15
  %4206 = urem i32 %4205, 17
  %4207 = add nuw nsw i32 %4206, %21
  %4208 = mul nuw nsw i32 %4207, 15
  %4209 = urem i32 %4208, 17
  %4210 = add nuw nsw i32 %4209, %19
  %4211 = mul nuw nsw i32 %4210, 15
  %4212 = urem i32 %4211, 17
  %4213 = add nuw nsw i32 %4212, %17
  %4214 = mul nuw nsw i32 %4213, 15
  %4215 = urem i32 %4214, 17
  %4216 = add nuw nsw i32 %4215, %15
  %4217 = mul nuw nsw i32 %4216, 15
  %4218 = urem i32 %4217, 17
  %4219 = add nuw nsw i32 %4218, %13
  %4220 = mul nuw nsw i32 %4219, 15
  %4221 = urem i32 %4220, 17
  %4222 = add nuw nsw i32 %4221, %11
  %4223 = mul nuw nsw i32 %4222, 15
  %4224 = urem i32 %4223, 17
  %4225 = add nuw nsw i32 %4224, %9
  %4226 = mul nuw nsw i32 %4225, 15
  %4227 = urem i32 %4226, 17
  %4228 = add nuw nsw i32 %4227, %7
  %4229 = mul nuw nsw i32 %4228, 15
  %4230 = urem i32 %4229, 17
  %4231 = add nuw nsw i32 %4230, %5
  %4232 = mul nuw nsw i32 %4231, 15
  %4233 = urem i32 %4232, 17
  %4234 = add nuw nsw i32 %4233, %3
  %4235 = mul nuw nsw i32 %4234, 15
  %4236 = urem i32 %4235, 17
  %4237 = add nuw nsw i32 %4236, %2
  %4238 = mul nuw nsw i32 %4237, 15
  %4239 = urem i32 %4238, 17
  %4240 = add nuw nsw i32 %3852, %4239
  %4241 = urem i32 %4240, 17
  %4242 = shl nuw nsw i32 1, %4241
  %4243 = or i32 %4194, %4242
  %4244 = icmp eq i32 %4243, 52396
  br i1 %4244, label %4245, label %4912

4245:                                             ; preds = %3851
  %4246 = urem i32 %3852, 17
  %4247 = add nuw nsw i32 %3852, %94
  %4248 = urem i32 %4247, 17
  %4249 = add nuw nsw i32 %3852, %178
  %4250 = urem i32 %4249, 17
  %4251 = add nuw nsw i32 %3852, %262
  %4252 = urem i32 %4251, 17
  %4253 = add nuw nsw i32 %3852, %346
  %4254 = urem i32 %4253, 17
  %4255 = add nuw nsw i32 %3852, %430
  %4256 = urem i32 %4255, 17
  %4257 = add nuw nsw i32 %3852, %514
  %4258 = urem i32 %4257, 17
  %4259 = add nuw nsw i32 %3852, %598
  %4260 = urem i32 %4259, 17
  %4261 = load i64, i64 addrspace(4)* %623, align 8, !tbaa !5
  %4262 = inttoptr i64 %4261 to i8 addrspace(1)*
  %4263 = addrspacecast i8 addrspace(1)* %4262 to i8*
  %4264 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4265 = extractelement <2 x i64> %4264, i64 0
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %4275, label %4266

4266:                                             ; preds = %4245, %4266
  %4267 = phi i8 addrspace(4)* [ %4268, %4266 ], [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %4245 ]
  %4268 = getelementptr i8, i8 addrspace(4)* %4267, i64 1
  %4269 = load i8, i8 addrspace(4)* %4267, align 1
  %4270 = icmp eq i8 %4269, 0
  br i1 %4270, label %4271, label %4266

4271:                                             ; preds = %4266
  %4272 = addrspacecast i8 addrspace(4)* %4267 to i8*
  %4273 = ptrtoint i8* %4272 to i64
  %4274 = add i64 %4273, add (i64 sub (i64 0, i64 ptrtoint ([191 x i8]* addrspacecast ([191 x i8] addrspace(4)* @.str to [191 x i8]*) to i64)), i64 1)
  br label %4275

4275:                                             ; preds = %4271, %4245
  %4276 = phi i64 [ %4274, %4271 ], [ 0, %4245 ]
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null), label %4718, label %4277

4277:                                             ; preds = %4275
  %4278 = and i64 %4265, 2
  %4279 = and i64 %4265, -3
  %4280 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %4279, i64 0
  br label %4281

4281:                                             ; preds = %4707, %4277
  %4282 = phi i64 [ %4276, %4277 ], [ %4715, %4707 ]
  %4283 = phi i8 addrspace(4)* [ getelementptr inbounds ([191 x i8], [191 x i8] addrspace(4)* @.str, i64 0, i64 0), %4277 ], [ %4716, %4707 ]
  %4284 = phi <2 x i64> [ %4280, %4277 ], [ %4714, %4707 ]
  %4285 = icmp ugt i64 %4282, 56
  %4286 = extractelement <2 x i64> %4284, i64 0
  %4287 = or i64 %4286, %4278
  %4288 = insertelement <2 x i64> poison, i64 %4287, i64 0
  %4289 = select i1 %4285, <2 x i64> %4284, <2 x i64> %4288
  %4290 = tail call i64 @llvm.umin.i64(i64 %4282, i64 56)
  %4291 = trunc i64 %4290 to i32
  %4292 = extractelement <2 x i64> %4289, i64 0
  %4293 = icmp ugt i32 %4291, 7
  br i1 %4293, label %4309, label %4294

4294:                                             ; preds = %4281
  %4295 = icmp eq i32 %4291, 0
  br i1 %4295, label %4349, label %4296

4296:                                             ; preds = %4294, %4296
  %4297 = phi i32 [ %4307, %4296 ], [ 0, %4294 ]
  %4298 = phi i64 [ %4306, %4296 ], [ 0, %4294 ]
  %4299 = zext i32 %4297 to i64
  %4300 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 %4299
  %4301 = load i8, i8 addrspace(4)* %4300, align 1, !tbaa !9
  %4302 = zext i8 %4301 to i64
  %4303 = shl i32 %4297, 3
  %4304 = zext i32 %4303 to i64
  %4305 = shl nuw i64 %4302, %4304
  %4306 = or i64 %4305, %4298
  %4307 = add nuw nsw i32 %4297, 1
  %4308 = icmp eq i32 %4307, %4291
  br i1 %4308, label %4349, label %4296, !llvm.loop !10

4309:                                             ; preds = %4281
  %4310 = load i8, i8 addrspace(4)* %4283, align 1, !tbaa !9
  %4311 = zext i8 %4310 to i64
  %4312 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 1
  %4313 = load i8, i8 addrspace(4)* %4312, align 1, !tbaa !9
  %4314 = zext i8 %4313 to i64
  %4315 = shl nuw nsw i64 %4314, 8
  %4316 = or i64 %4315, %4311
  %4317 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 2
  %4318 = load i8, i8 addrspace(4)* %4317, align 1, !tbaa !9
  %4319 = zext i8 %4318 to i64
  %4320 = shl nuw nsw i64 %4319, 16
  %4321 = or i64 %4316, %4320
  %4322 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 3
  %4323 = load i8, i8 addrspace(4)* %4322, align 1, !tbaa !9
  %4324 = zext i8 %4323 to i64
  %4325 = shl nuw nsw i64 %4324, 24
  %4326 = or i64 %4321, %4325
  %4327 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 4
  %4328 = load i8, i8 addrspace(4)* %4327, align 1, !tbaa !9
  %4329 = zext i8 %4328 to i64
  %4330 = shl nuw nsw i64 %4329, 32
  %4331 = or i64 %4326, %4330
  %4332 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 5
  %4333 = load i8, i8 addrspace(4)* %4332, align 1, !tbaa !9
  %4334 = zext i8 %4333 to i64
  %4335 = shl nuw nsw i64 %4334, 40
  %4336 = or i64 %4331, %4335
  %4337 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 6
  %4338 = load i8, i8 addrspace(4)* %4337, align 1, !tbaa !9
  %4339 = zext i8 %4338 to i64
  %4340 = shl nuw nsw i64 %4339, 48
  %4341 = or i64 %4336, %4340
  %4342 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 7
  %4343 = load i8, i8 addrspace(4)* %4342, align 1, !tbaa !9
  %4344 = zext i8 %4343 to i64
  %4345 = shl nuw i64 %4344, 56
  %4346 = or i64 %4341, %4345
  %4347 = add nsw i32 %4291, -8
  %4348 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 8
  br label %4349

4349:                                             ; preds = %4296, %4309, %4294
  %4350 = phi i8 addrspace(4)* [ %4348, %4309 ], [ %4283, %4294 ], [ %4283, %4296 ]
  %4351 = phi i32 [ %4347, %4309 ], [ 0, %4294 ], [ 0, %4296 ]
  %4352 = phi i64 [ %4346, %4309 ], [ 0, %4294 ], [ %4306, %4296 ]
  %4353 = icmp ugt i32 %4351, 7
  br i1 %4353, label %4369, label %4354

4354:                                             ; preds = %4349
  %4355 = icmp eq i32 %4351, 0
  br i1 %4355, label %4409, label %4356

4356:                                             ; preds = %4354, %4356
  %4357 = phi i32 [ %4367, %4356 ], [ 0, %4354 ]
  %4358 = phi i64 [ %4366, %4356 ], [ 0, %4354 ]
  %4359 = zext i32 %4357 to i64
  %4360 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 %4359
  %4361 = load i8, i8 addrspace(4)* %4360, align 1, !tbaa !9
  %4362 = zext i8 %4361 to i64
  %4363 = shl i32 %4357, 3
  %4364 = zext i32 %4363 to i64
  %4365 = shl nuw i64 %4362, %4364
  %4366 = or i64 %4365, %4358
  %4367 = add nuw nsw i32 %4357, 1
  %4368 = icmp eq i32 %4367, %4351
  br i1 %4368, label %4409, label %4356

4369:                                             ; preds = %4349
  %4370 = load i8, i8 addrspace(4)* %4350, align 1, !tbaa !9
  %4371 = zext i8 %4370 to i64
  %4372 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 1
  %4373 = load i8, i8 addrspace(4)* %4372, align 1, !tbaa !9
  %4374 = zext i8 %4373 to i64
  %4375 = shl nuw nsw i64 %4374, 8
  %4376 = or i64 %4375, %4371
  %4377 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 2
  %4378 = load i8, i8 addrspace(4)* %4377, align 1, !tbaa !9
  %4379 = zext i8 %4378 to i64
  %4380 = shl nuw nsw i64 %4379, 16
  %4381 = or i64 %4376, %4380
  %4382 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 3
  %4383 = load i8, i8 addrspace(4)* %4382, align 1, !tbaa !9
  %4384 = zext i8 %4383 to i64
  %4385 = shl nuw nsw i64 %4384, 24
  %4386 = or i64 %4381, %4385
  %4387 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 4
  %4388 = load i8, i8 addrspace(4)* %4387, align 1, !tbaa !9
  %4389 = zext i8 %4388 to i64
  %4390 = shl nuw nsw i64 %4389, 32
  %4391 = or i64 %4386, %4390
  %4392 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 5
  %4393 = load i8, i8 addrspace(4)* %4392, align 1, !tbaa !9
  %4394 = zext i8 %4393 to i64
  %4395 = shl nuw nsw i64 %4394, 40
  %4396 = or i64 %4391, %4395
  %4397 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 6
  %4398 = load i8, i8 addrspace(4)* %4397, align 1, !tbaa !9
  %4399 = zext i8 %4398 to i64
  %4400 = shl nuw nsw i64 %4399, 48
  %4401 = or i64 %4396, %4400
  %4402 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 7
  %4403 = load i8, i8 addrspace(4)* %4402, align 1, !tbaa !9
  %4404 = zext i8 %4403 to i64
  %4405 = shl nuw i64 %4404, 56
  %4406 = or i64 %4401, %4405
  %4407 = add nsw i32 %4351, -8
  %4408 = getelementptr inbounds i8, i8 addrspace(4)* %4350, i64 8
  br label %4409

4409:                                             ; preds = %4356, %4369, %4354
  %4410 = phi i8 addrspace(4)* [ %4408, %4369 ], [ %4350, %4354 ], [ %4350, %4356 ]
  %4411 = phi i32 [ %4407, %4369 ], [ 0, %4354 ], [ 0, %4356 ]
  %4412 = phi i64 [ %4406, %4369 ], [ 0, %4354 ], [ %4366, %4356 ]
  %4413 = icmp ugt i32 %4411, 7
  br i1 %4413, label %4429, label %4414

4414:                                             ; preds = %4409
  %4415 = icmp eq i32 %4411, 0
  br i1 %4415, label %4469, label %4416

4416:                                             ; preds = %4414, %4416
  %4417 = phi i32 [ %4427, %4416 ], [ 0, %4414 ]
  %4418 = phi i64 [ %4426, %4416 ], [ 0, %4414 ]
  %4419 = zext i32 %4417 to i64
  %4420 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 %4419
  %4421 = load i8, i8 addrspace(4)* %4420, align 1, !tbaa !9
  %4422 = zext i8 %4421 to i64
  %4423 = shl i32 %4417, 3
  %4424 = zext i32 %4423 to i64
  %4425 = shl nuw i64 %4422, %4424
  %4426 = or i64 %4425, %4418
  %4427 = add nuw nsw i32 %4417, 1
  %4428 = icmp eq i32 %4427, %4411
  br i1 %4428, label %4469, label %4416

4429:                                             ; preds = %4409
  %4430 = load i8, i8 addrspace(4)* %4410, align 1, !tbaa !9
  %4431 = zext i8 %4430 to i64
  %4432 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 1
  %4433 = load i8, i8 addrspace(4)* %4432, align 1, !tbaa !9
  %4434 = zext i8 %4433 to i64
  %4435 = shl nuw nsw i64 %4434, 8
  %4436 = or i64 %4435, %4431
  %4437 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 2
  %4438 = load i8, i8 addrspace(4)* %4437, align 1, !tbaa !9
  %4439 = zext i8 %4438 to i64
  %4440 = shl nuw nsw i64 %4439, 16
  %4441 = or i64 %4436, %4440
  %4442 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 3
  %4443 = load i8, i8 addrspace(4)* %4442, align 1, !tbaa !9
  %4444 = zext i8 %4443 to i64
  %4445 = shl nuw nsw i64 %4444, 24
  %4446 = or i64 %4441, %4445
  %4447 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 4
  %4448 = load i8, i8 addrspace(4)* %4447, align 1, !tbaa !9
  %4449 = zext i8 %4448 to i64
  %4450 = shl nuw nsw i64 %4449, 32
  %4451 = or i64 %4446, %4450
  %4452 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 5
  %4453 = load i8, i8 addrspace(4)* %4452, align 1, !tbaa !9
  %4454 = zext i8 %4453 to i64
  %4455 = shl nuw nsw i64 %4454, 40
  %4456 = or i64 %4451, %4455
  %4457 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 6
  %4458 = load i8, i8 addrspace(4)* %4457, align 1, !tbaa !9
  %4459 = zext i8 %4458 to i64
  %4460 = shl nuw nsw i64 %4459, 48
  %4461 = or i64 %4456, %4460
  %4462 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 7
  %4463 = load i8, i8 addrspace(4)* %4462, align 1, !tbaa !9
  %4464 = zext i8 %4463 to i64
  %4465 = shl nuw i64 %4464, 56
  %4466 = or i64 %4461, %4465
  %4467 = add nsw i32 %4411, -8
  %4468 = getelementptr inbounds i8, i8 addrspace(4)* %4410, i64 8
  br label %4469

4469:                                             ; preds = %4416, %4429, %4414
  %4470 = phi i8 addrspace(4)* [ %4468, %4429 ], [ %4410, %4414 ], [ %4410, %4416 ]
  %4471 = phi i32 [ %4467, %4429 ], [ 0, %4414 ], [ 0, %4416 ]
  %4472 = phi i64 [ %4466, %4429 ], [ 0, %4414 ], [ %4426, %4416 ]
  %4473 = icmp ugt i32 %4471, 7
  br i1 %4473, label %4489, label %4474

4474:                                             ; preds = %4469
  %4475 = icmp eq i32 %4471, 0
  br i1 %4475, label %4529, label %4476

4476:                                             ; preds = %4474, %4476
  %4477 = phi i32 [ %4487, %4476 ], [ 0, %4474 ]
  %4478 = phi i64 [ %4486, %4476 ], [ 0, %4474 ]
  %4479 = zext i32 %4477 to i64
  %4480 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 %4479
  %4481 = load i8, i8 addrspace(4)* %4480, align 1, !tbaa !9
  %4482 = zext i8 %4481 to i64
  %4483 = shl i32 %4477, 3
  %4484 = zext i32 %4483 to i64
  %4485 = shl nuw i64 %4482, %4484
  %4486 = or i64 %4485, %4478
  %4487 = add nuw nsw i32 %4477, 1
  %4488 = icmp eq i32 %4487, %4471
  br i1 %4488, label %4529, label %4476

4489:                                             ; preds = %4469
  %4490 = load i8, i8 addrspace(4)* %4470, align 1, !tbaa !9
  %4491 = zext i8 %4490 to i64
  %4492 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 1
  %4493 = load i8, i8 addrspace(4)* %4492, align 1, !tbaa !9
  %4494 = zext i8 %4493 to i64
  %4495 = shl nuw nsw i64 %4494, 8
  %4496 = or i64 %4495, %4491
  %4497 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 2
  %4498 = load i8, i8 addrspace(4)* %4497, align 1, !tbaa !9
  %4499 = zext i8 %4498 to i64
  %4500 = shl nuw nsw i64 %4499, 16
  %4501 = or i64 %4496, %4500
  %4502 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 3
  %4503 = load i8, i8 addrspace(4)* %4502, align 1, !tbaa !9
  %4504 = zext i8 %4503 to i64
  %4505 = shl nuw nsw i64 %4504, 24
  %4506 = or i64 %4501, %4505
  %4507 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 4
  %4508 = load i8, i8 addrspace(4)* %4507, align 1, !tbaa !9
  %4509 = zext i8 %4508 to i64
  %4510 = shl nuw nsw i64 %4509, 32
  %4511 = or i64 %4506, %4510
  %4512 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 5
  %4513 = load i8, i8 addrspace(4)* %4512, align 1, !tbaa !9
  %4514 = zext i8 %4513 to i64
  %4515 = shl nuw nsw i64 %4514, 40
  %4516 = or i64 %4511, %4515
  %4517 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 6
  %4518 = load i8, i8 addrspace(4)* %4517, align 1, !tbaa !9
  %4519 = zext i8 %4518 to i64
  %4520 = shl nuw nsw i64 %4519, 48
  %4521 = or i64 %4516, %4520
  %4522 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 7
  %4523 = load i8, i8 addrspace(4)* %4522, align 1, !tbaa !9
  %4524 = zext i8 %4523 to i64
  %4525 = shl nuw i64 %4524, 56
  %4526 = or i64 %4521, %4525
  %4527 = add nsw i32 %4471, -8
  %4528 = getelementptr inbounds i8, i8 addrspace(4)* %4470, i64 8
  br label %4529

4529:                                             ; preds = %4476, %4489, %4474
  %4530 = phi i8 addrspace(4)* [ %4528, %4489 ], [ %4470, %4474 ], [ %4470, %4476 ]
  %4531 = phi i32 [ %4527, %4489 ], [ 0, %4474 ], [ 0, %4476 ]
  %4532 = phi i64 [ %4526, %4489 ], [ 0, %4474 ], [ %4486, %4476 ]
  %4533 = icmp ugt i32 %4531, 7
  br i1 %4533, label %4549, label %4534

4534:                                             ; preds = %4529
  %4535 = icmp eq i32 %4531, 0
  br i1 %4535, label %4589, label %4536

4536:                                             ; preds = %4534, %4536
  %4537 = phi i32 [ %4547, %4536 ], [ 0, %4534 ]
  %4538 = phi i64 [ %4546, %4536 ], [ 0, %4534 ]
  %4539 = zext i32 %4537 to i64
  %4540 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 %4539
  %4541 = load i8, i8 addrspace(4)* %4540, align 1, !tbaa !9
  %4542 = zext i8 %4541 to i64
  %4543 = shl i32 %4537, 3
  %4544 = zext i32 %4543 to i64
  %4545 = shl nuw i64 %4542, %4544
  %4546 = or i64 %4545, %4538
  %4547 = add nuw nsw i32 %4537, 1
  %4548 = icmp eq i32 %4547, %4531
  br i1 %4548, label %4589, label %4536

4549:                                             ; preds = %4529
  %4550 = load i8, i8 addrspace(4)* %4530, align 1, !tbaa !9
  %4551 = zext i8 %4550 to i64
  %4552 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 1
  %4553 = load i8, i8 addrspace(4)* %4552, align 1, !tbaa !9
  %4554 = zext i8 %4553 to i64
  %4555 = shl nuw nsw i64 %4554, 8
  %4556 = or i64 %4555, %4551
  %4557 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 2
  %4558 = load i8, i8 addrspace(4)* %4557, align 1, !tbaa !9
  %4559 = zext i8 %4558 to i64
  %4560 = shl nuw nsw i64 %4559, 16
  %4561 = or i64 %4556, %4560
  %4562 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 3
  %4563 = load i8, i8 addrspace(4)* %4562, align 1, !tbaa !9
  %4564 = zext i8 %4563 to i64
  %4565 = shl nuw nsw i64 %4564, 24
  %4566 = or i64 %4561, %4565
  %4567 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 4
  %4568 = load i8, i8 addrspace(4)* %4567, align 1, !tbaa !9
  %4569 = zext i8 %4568 to i64
  %4570 = shl nuw nsw i64 %4569, 32
  %4571 = or i64 %4566, %4570
  %4572 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 5
  %4573 = load i8, i8 addrspace(4)* %4572, align 1, !tbaa !9
  %4574 = zext i8 %4573 to i64
  %4575 = shl nuw nsw i64 %4574, 40
  %4576 = or i64 %4571, %4575
  %4577 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 6
  %4578 = load i8, i8 addrspace(4)* %4577, align 1, !tbaa !9
  %4579 = zext i8 %4578 to i64
  %4580 = shl nuw nsw i64 %4579, 48
  %4581 = or i64 %4576, %4580
  %4582 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 7
  %4583 = load i8, i8 addrspace(4)* %4582, align 1, !tbaa !9
  %4584 = zext i8 %4583 to i64
  %4585 = shl nuw i64 %4584, 56
  %4586 = or i64 %4581, %4585
  %4587 = add nsw i32 %4531, -8
  %4588 = getelementptr inbounds i8, i8 addrspace(4)* %4530, i64 8
  br label %4589

4589:                                             ; preds = %4536, %4549, %4534
  %4590 = phi i8 addrspace(4)* [ %4588, %4549 ], [ %4530, %4534 ], [ %4530, %4536 ]
  %4591 = phi i32 [ %4587, %4549 ], [ 0, %4534 ], [ 0, %4536 ]
  %4592 = phi i64 [ %4586, %4549 ], [ 0, %4534 ], [ %4546, %4536 ]
  %4593 = icmp ugt i32 %4591, 7
  br i1 %4593, label %4609, label %4594

4594:                                             ; preds = %4589
  %4595 = icmp eq i32 %4591, 0
  br i1 %4595, label %4649, label %4596

4596:                                             ; preds = %4594, %4596
  %4597 = phi i32 [ %4607, %4596 ], [ 0, %4594 ]
  %4598 = phi i64 [ %4606, %4596 ], [ 0, %4594 ]
  %4599 = zext i32 %4597 to i64
  %4600 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 %4599
  %4601 = load i8, i8 addrspace(4)* %4600, align 1, !tbaa !9
  %4602 = zext i8 %4601 to i64
  %4603 = shl i32 %4597, 3
  %4604 = zext i32 %4603 to i64
  %4605 = shl nuw i64 %4602, %4604
  %4606 = or i64 %4605, %4598
  %4607 = add nuw nsw i32 %4597, 1
  %4608 = icmp eq i32 %4607, %4591
  br i1 %4608, label %4649, label %4596

4609:                                             ; preds = %4589
  %4610 = load i8, i8 addrspace(4)* %4590, align 1, !tbaa !9
  %4611 = zext i8 %4610 to i64
  %4612 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 1
  %4613 = load i8, i8 addrspace(4)* %4612, align 1, !tbaa !9
  %4614 = zext i8 %4613 to i64
  %4615 = shl nuw nsw i64 %4614, 8
  %4616 = or i64 %4615, %4611
  %4617 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 2
  %4618 = load i8, i8 addrspace(4)* %4617, align 1, !tbaa !9
  %4619 = zext i8 %4618 to i64
  %4620 = shl nuw nsw i64 %4619, 16
  %4621 = or i64 %4616, %4620
  %4622 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 3
  %4623 = load i8, i8 addrspace(4)* %4622, align 1, !tbaa !9
  %4624 = zext i8 %4623 to i64
  %4625 = shl nuw nsw i64 %4624, 24
  %4626 = or i64 %4621, %4625
  %4627 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 4
  %4628 = load i8, i8 addrspace(4)* %4627, align 1, !tbaa !9
  %4629 = zext i8 %4628 to i64
  %4630 = shl nuw nsw i64 %4629, 32
  %4631 = or i64 %4626, %4630
  %4632 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 5
  %4633 = load i8, i8 addrspace(4)* %4632, align 1, !tbaa !9
  %4634 = zext i8 %4633 to i64
  %4635 = shl nuw nsw i64 %4634, 40
  %4636 = or i64 %4631, %4635
  %4637 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 6
  %4638 = load i8, i8 addrspace(4)* %4637, align 1, !tbaa !9
  %4639 = zext i8 %4638 to i64
  %4640 = shl nuw nsw i64 %4639, 48
  %4641 = or i64 %4636, %4640
  %4642 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 7
  %4643 = load i8, i8 addrspace(4)* %4642, align 1, !tbaa !9
  %4644 = zext i8 %4643 to i64
  %4645 = shl nuw i64 %4644, 56
  %4646 = or i64 %4641, %4645
  %4647 = add nsw i32 %4591, -8
  %4648 = getelementptr inbounds i8, i8 addrspace(4)* %4590, i64 8
  br label %4649

4649:                                             ; preds = %4596, %4609, %4594
  %4650 = phi i8 addrspace(4)* [ %4648, %4609 ], [ %4590, %4594 ], [ %4590, %4596 ]
  %4651 = phi i32 [ %4647, %4609 ], [ 0, %4594 ], [ 0, %4596 ]
  %4652 = phi i64 [ %4646, %4609 ], [ 0, %4594 ], [ %4606, %4596 ]
  %4653 = icmp ugt i32 %4651, 7
  br i1 %4653, label %4669, label %4654

4654:                                             ; preds = %4649
  %4655 = icmp eq i32 %4651, 0
  br i1 %4655, label %4707, label %4656

4656:                                             ; preds = %4654, %4656
  %4657 = phi i32 [ %4667, %4656 ], [ 0, %4654 ]
  %4658 = phi i64 [ %4666, %4656 ], [ 0, %4654 ]
  %4659 = zext i32 %4657 to i64
  %4660 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 %4659
  %4661 = load i8, i8 addrspace(4)* %4660, align 1, !tbaa !9
  %4662 = zext i8 %4661 to i64
  %4663 = shl i32 %4657, 3
  %4664 = zext i32 %4663 to i64
  %4665 = shl nuw i64 %4662, %4664
  %4666 = or i64 %4665, %4658
  %4667 = add nuw nsw i32 %4657, 1
  %4668 = icmp eq i32 %4667, %4651
  br i1 %4668, label %4707, label %4656

4669:                                             ; preds = %4649
  %4670 = load i8, i8 addrspace(4)* %4650, align 1, !tbaa !9
  %4671 = zext i8 %4670 to i64
  %4672 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 1
  %4673 = load i8, i8 addrspace(4)* %4672, align 1, !tbaa !9
  %4674 = zext i8 %4673 to i64
  %4675 = shl nuw nsw i64 %4674, 8
  %4676 = or i64 %4675, %4671
  %4677 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 2
  %4678 = load i8, i8 addrspace(4)* %4677, align 1, !tbaa !9
  %4679 = zext i8 %4678 to i64
  %4680 = shl nuw nsw i64 %4679, 16
  %4681 = or i64 %4676, %4680
  %4682 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 3
  %4683 = load i8, i8 addrspace(4)* %4682, align 1, !tbaa !9
  %4684 = zext i8 %4683 to i64
  %4685 = shl nuw nsw i64 %4684, 24
  %4686 = or i64 %4681, %4685
  %4687 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 4
  %4688 = load i8, i8 addrspace(4)* %4687, align 1, !tbaa !9
  %4689 = zext i8 %4688 to i64
  %4690 = shl nuw nsw i64 %4689, 32
  %4691 = or i64 %4686, %4690
  %4692 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 5
  %4693 = load i8, i8 addrspace(4)* %4692, align 1, !tbaa !9
  %4694 = zext i8 %4693 to i64
  %4695 = shl nuw nsw i64 %4694, 40
  %4696 = or i64 %4691, %4695
  %4697 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 6
  %4698 = load i8, i8 addrspace(4)* %4697, align 1, !tbaa !9
  %4699 = zext i8 %4698 to i64
  %4700 = shl nuw nsw i64 %4699, 48
  %4701 = or i64 %4696, %4700
  %4702 = getelementptr inbounds i8, i8 addrspace(4)* %4650, i64 7
  %4703 = load i8, i8 addrspace(4)* %4702, align 1, !tbaa !9
  %4704 = zext i8 %4703 to i64
  %4705 = shl nuw i64 %4704, 56
  %4706 = or i64 %4701, %4705
  br label %4707

4707:                                             ; preds = %4656, %4669, %4654
  %4708 = phi i64 [ %4706, %4669 ], [ 0, %4654 ], [ %4666, %4656 ]
  %4709 = shl nuw nsw i64 %4290, 2
  %4710 = add nuw nsw i64 %4709, 28
  %4711 = and i64 %4710, 480
  %4712 = and i64 %4292, -225
  %4713 = or i64 %4712, %4711
  %4714 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4713, i64 noundef %4352, i64 noundef %4412, i64 noundef %4472, i64 noundef %4532, i64 noundef %4592, i64 noundef %4652, i64 noundef %4708) #11
  %4715 = sub i64 %4282, %4290
  %4716 = getelementptr inbounds i8, i8 addrspace(4)* %4283, i64 %4290
  %4717 = icmp eq i64 %4715, 0
  br i1 %4717, label %4722, label %4281

4718:                                             ; preds = %4275
  %4719 = and i64 %4265, -225
  %4720 = or i64 %4719, 32
  %4721 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4720, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %4722

4722:                                             ; preds = %4707, %4718
  %4723 = phi <2 x i64> [ %4721, %4718 ], [ %4714, %4707 ]
  %4724 = extractelement <2 x i64> %4723, i64 0
  %4725 = zext i32 %3852 to i64
  %4726 = and i64 %4724, -225
  %4727 = or i64 %4726, 32
  %4728 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4727, i64 noundef %4725, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4729 = extractelement <2 x i64> %4728, i64 0
  %4730 = and i64 %4729, -225
  %4731 = or i64 %4730, 32
  %4732 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4731, i64 noundef %624, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4733 = extractelement <2 x i64> %4732, i64 0
  %4734 = and i64 %4733, -225
  %4735 = or i64 %4734, 32
  %4736 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4735, i64 noundef %625, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4737 = extractelement <2 x i64> %4736, i64 0
  %4738 = and i64 %4737, -225
  %4739 = or i64 %4738, 32
  %4740 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4739, i64 noundef %626, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4741 = extractelement <2 x i64> %4740, i64 0
  %4742 = and i64 %4741, -225
  %4743 = or i64 %4742, 32
  %4744 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4743, i64 noundef %627, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4745 = extractelement <2 x i64> %4744, i64 0
  %4746 = and i64 %4745, -225
  %4747 = or i64 %4746, 32
  %4748 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4747, i64 noundef %628, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4749 = extractelement <2 x i64> %4748, i64 0
  %4750 = and i64 %4749, -225
  %4751 = or i64 %4750, 32
  %4752 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4751, i64 noundef %629, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4753 = extractelement <2 x i64> %4752, i64 0
  %4754 = and i64 %4753, -225
  %4755 = or i64 %4754, 32
  %4756 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4755, i64 noundef %630, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4757 = extractelement <2 x i64> %4756, i64 0
  %4758 = and i64 %4757, -225
  %4759 = or i64 %4758, 32
  %4760 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4759, i64 noundef %631, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4761 = extractelement <2 x i64> %4760, i64 0
  %4762 = and i64 %4761, -225
  %4763 = or i64 %4762, 32
  %4764 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4763, i64 noundef %632, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4765 = extractelement <2 x i64> %4764, i64 0
  %4766 = and i64 %4765, -225
  %4767 = or i64 %4766, 32
  %4768 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4767, i64 noundef %633, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4769 = extractelement <2 x i64> %4768, i64 0
  %4770 = and i64 %4769, -225
  %4771 = or i64 %4770, 32
  %4772 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4771, i64 noundef %634, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4773 = extractelement <2 x i64> %4772, i64 0
  %4774 = and i64 %4773, -225
  %4775 = or i64 %4774, 32
  %4776 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4775, i64 noundef %635, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4777 = extractelement <2 x i64> %4776, i64 0
  %4778 = and i64 %4777, -225
  %4779 = or i64 %4778, 32
  %4780 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4779, i64 noundef %636, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4781 = extractelement <2 x i64> %4780, i64 0
  %4782 = and i64 %4781, -225
  %4783 = or i64 %4782, 32
  %4784 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4783, i64 noundef %637, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4785 = extractelement <2 x i64> %4784, i64 0
  %4786 = and i64 %4785, -225
  %4787 = or i64 %4786, 32
  %4788 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4787, i64 noundef %638, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4789 = extractelement <2 x i64> %4788, i64 0
  %4790 = zext i32 %4246 to i64
  %4791 = and i64 %4789, -225
  %4792 = or i64 %4791, 32
  %4793 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4792, i64 noundef %4790, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4794 = extractelement <2 x i64> %4793, i64 0
  %4795 = zext i32 %4248 to i64
  %4796 = and i64 %4794, -225
  %4797 = or i64 %4796, 32
  %4798 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4797, i64 noundef %4795, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4799 = extractelement <2 x i64> %4798, i64 0
  %4800 = zext i32 %4250 to i64
  %4801 = and i64 %4799, -225
  %4802 = or i64 %4801, 32
  %4803 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4802, i64 noundef %4800, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4804 = extractelement <2 x i64> %4803, i64 0
  %4805 = zext i32 %4252 to i64
  %4806 = and i64 %4804, -225
  %4807 = or i64 %4806, 32
  %4808 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4807, i64 noundef %4805, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4809 = extractelement <2 x i64> %4808, i64 0
  %4810 = zext i32 %4254 to i64
  %4811 = and i64 %4809, -225
  %4812 = or i64 %4811, 32
  %4813 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4812, i64 noundef %4810, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4814 = extractelement <2 x i64> %4813, i64 0
  %4815 = zext i32 %4256 to i64
  %4816 = and i64 %4814, -225
  %4817 = or i64 %4816, 32
  %4818 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4817, i64 noundef %4815, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4819 = extractelement <2 x i64> %4818, i64 0
  %4820 = zext i32 %4258 to i64
  %4821 = and i64 %4819, -225
  %4822 = or i64 %4821, 32
  %4823 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4822, i64 noundef %4820, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4824 = extractelement <2 x i64> %4823, i64 0
  %4825 = zext i32 %4260 to i64
  %4826 = and i64 %4824, -225
  %4827 = or i64 %4826, 32
  %4828 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4827, i64 noundef %4825, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4829 = extractelement <2 x i64> %4828, i64 0
  %4830 = zext i32 %3899 to i64
  %4831 = and i64 %4829, -225
  %4832 = or i64 %4831, 32
  %4833 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4832, i64 noundef %4830, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4834 = extractelement <2 x i64> %4833, i64 0
  %4835 = zext i32 %3947 to i64
  %4836 = and i64 %4834, -225
  %4837 = or i64 %4836, 32
  %4838 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4837, i64 noundef %4835, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4839 = extractelement <2 x i64> %4838, i64 0
  %4840 = zext i32 %3996 to i64
  %4841 = and i64 %4839, -225
  %4842 = or i64 %4841, 32
  %4843 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4842, i64 noundef %4840, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4844 = extractelement <2 x i64> %4843, i64 0
  %4845 = zext i32 %4045 to i64
  %4846 = and i64 %4844, -225
  %4847 = or i64 %4846, 32
  %4848 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4847, i64 noundef %4845, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4849 = extractelement <2 x i64> %4848, i64 0
  %4850 = zext i32 %4094 to i64
  %4851 = and i64 %4849, -225
  %4852 = or i64 %4851, 32
  %4853 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4852, i64 noundef %4850, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4854 = extractelement <2 x i64> %4853, i64 0
  %4855 = zext i32 %4143 to i64
  %4856 = and i64 %4854, -225
  %4857 = or i64 %4856, 32
  %4858 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4857, i64 noundef %4855, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4859 = extractelement <2 x i64> %4858, i64 0
  %4860 = zext i32 %4192 to i64
  %4861 = and i64 %4859, -225
  %4862 = or i64 %4861, 32
  %4863 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4862, i64 noundef %4860, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4864 = extractelement <2 x i64> %4863, i64 0
  %4865 = zext i32 %4241 to i64
  %4866 = and i64 %4864, -225
  %4867 = or i64 %4866, 32
  %4868 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4867, i64 noundef %4865, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4869 = extractelement <2 x i64> %4868, i64 0
  %4870 = and i64 %4869, -225
  %4871 = or i64 %4870, 32
  %4872 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4871, i64 noundef %639, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4873 = extractelement <2 x i64> %4872, i64 0
  %4874 = and i64 %4873, -225
  %4875 = or i64 %4874, 32
  %4876 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4875, i64 noundef %640, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4877 = extractelement <2 x i64> %4876, i64 0
  %4878 = and i64 %4877, -225
  %4879 = or i64 %4878, 32
  %4880 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4879, i64 noundef %641, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4881 = extractelement <2 x i64> %4880, i64 0
  %4882 = and i64 %4881, -225
  %4883 = or i64 %4882, 32
  %4884 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4883, i64 noundef %642, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4885 = extractelement <2 x i64> %4884, i64 0
  %4886 = zext i32 %1724 to i64
  %4887 = and i64 %4885, -225
  %4888 = or i64 %4887, 32
  %4889 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4888, i64 noundef %4886, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4890 = extractelement <2 x i64> %4889, i64 0
  %4891 = zext i32 %2786 to i64
  %4892 = and i64 %4890, -225
  %4893 = or i64 %4892, 32
  %4894 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4893, i64 noundef %4891, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4895 = extractelement <2 x i64> %4894, i64 0
  %4896 = zext i32 %3849 to i64
  %4897 = and i64 %4895, -225
  %4898 = or i64 %4897, 32
  %4899 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4898, i64 noundef %4896, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4900 = extractelement <2 x i64> %4899, i64 0
  %4901 = and i64 %4900, -225
  %4902 = or i64 %4901, 32
  %4903 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4902, i64 noundef 52396, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4904 = extractelement <2 x i64> %4903, i64 0
  %4905 = and i64 %4904, -225
  %4906 = or i64 %4905, 32
  %4907 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4906, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  %4908 = extractelement <2 x i64> %4907, i64 0
  %4909 = and i64 %4908, -227
  %4910 = or i64 %4909, 34
  %4911 = tail call fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %4263, i64 noundef %4910, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #11
  br label %4912

4912:                                             ; preds = %4722, %3851, %3848
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.z() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr() #2

; Function Attrs: convergent noinline norecurse nounwind optnone
define internal fastcc <2 x i64> @__ockl_hostcall_internal(i8* noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8) unnamed_addr #3 {
  %10 = alloca i8*, align 8, addrspace(5)
  %11 = alloca i32, align 4, addrspace(5)
  %12 = alloca i64, align 8, addrspace(5)
  %13 = alloca i64, align 8, addrspace(5)
  %14 = alloca i64, align 8, addrspace(5)
  %15 = alloca i64, align 8, addrspace(5)
  %16 = alloca i64, align 8, addrspace(5)
  %17 = alloca i64, align 8, addrspace(5)
  %18 = alloca i64, align 8, addrspace(5)
  %19 = alloca i64, align 8, addrspace(5)
  %20 = alloca i32, align 4, addrspace(5)
  %21 = alloca i32, align 4, addrspace(5)
  %22 = alloca %0 addrspace(1)*, align 8, addrspace(5)
  %23 = alloca i64, align 8, addrspace(5)
  %24 = alloca %1 addrspace(1)*, align 8, addrspace(5)
  %25 = alloca %2 addrspace(1)*, align 8, addrspace(5)
  %26 = alloca <2 x i64>, align 16, addrspace(5)
  store i8* %0, i8* addrspace(5)* %10, align 8, !tbaa !12
  store i32 2, i32 addrspace(5)* %11, align 4, !tbaa !14
  store i64 %1, i64 addrspace(5)* %12, align 8, !tbaa !5
  store i64 %2, i64 addrspace(5)* %13, align 8, !tbaa !5
  store i64 %3, i64 addrspace(5)* %14, align 8, !tbaa !5
  store i64 %4, i64 addrspace(5)* %15, align 8, !tbaa !5
  store i64 %5, i64 addrspace(5)* %16, align 8, !tbaa !5
  store i64 %6, i64 addrspace(5)* %17, align 8, !tbaa !5
  store i64 %7, i64 addrspace(5)* %18, align 8, !tbaa !5
  store i64 %8, i64 addrspace(5)* %19, align 8, !tbaa !5
  %27 = bitcast i32 addrspace(5)* %20 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %27) #6
  %28 = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
  %29 = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 %28)
  store i32 %29, i32 addrspace(5)* %20, align 4, !tbaa !14
  %30 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %31 = call i32 asm sideeffect "; ockl readfirstlane hoisting hack $0", "=v,0"(i32 %30) #11, !srcloc !16
  store i32 %31, i32 addrspace(5)* %20, align 4, !tbaa !14
  %32 = bitcast i32 addrspace(5)* %21 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %32) #6
  %33 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %34 = call i32 @llvm.amdgcn.readfirstlane(i32 %33)
  store i32 %34, i32 addrspace(5)* %21, align 4, !tbaa !14
  %35 = bitcast %0 addrspace(1)* addrspace(5)* %22 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %35) #6
  %36 = load i8*, i8* addrspace(5)* %10, align 8, !tbaa !12
  %37 = addrspacecast i8* %36 to %0 addrspace(1)*
  store %0 addrspace(1)* %37, %0 addrspace(1)* addrspace(5)* %22, align 8, !tbaa !12
  %38 = bitcast i64 addrspace(5)* %23 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %38) #6
  %39 = load %0 addrspace(1)*, %0 addrspace(1)* addrspace(5)* %22, align 8, !tbaa !12
  %40 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %41 = load i32, i32 addrspace(5)* %21, align 4, !tbaa !14
  %42 = icmp eq i32 %40, %41
  br i1 %42, label %43, label %68

43:                                               ; preds = %9
  %44 = getelementptr inbounds %0, %0 addrspace(1)* %39, i64 0, i32 3
  %45 = load atomic i64, i64 addrspace(1)* %44 syncscope("one-as") acquire, align 8
  %46 = getelementptr %0, %0 addrspace(1)* %39, i64 0, i32 0
  %47 = getelementptr %0, %0 addrspace(1)* %39, i64 0, i32 5
  %48 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(1)* %46, align 8, !tbaa !17
  %49 = load i64, i64 addrspace(1)* %47, align 8, !tbaa !20
  %50 = and i64 %49, %45
  %51 = getelementptr inbounds %1, %1 addrspace(1)* %48, i64 %50, i32 0
  %52 = load atomic i64, i64 addrspace(1)* %51 syncscope("one-as") monotonic, align 8
  %53 = cmpxchg i64 addrspace(1)* %44, i64 %45, i64 %52 syncscope("one-as") acquire monotonic, align 8
  %54 = extractvalue { i64, i1 } %53, 1
  br i1 %54, label %65, label %55

55:                                               ; preds = %55, %43
  %56 = phi { i64, i1 } [ %63, %55 ], [ %53, %43 ]
  %57 = extractvalue { i64, i1 } %56, 0
  call void @llvm.amdgcn.s.sleep(i32 1)
  %58 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(1)* %46, align 8, !tbaa !17
  %59 = load i64, i64 addrspace(1)* %47, align 8, !tbaa !20
  %60 = and i64 %59, %57
  %61 = getelementptr inbounds %1, %1 addrspace(1)* %58, i64 %60, i32 0
  %62 = load atomic i64, i64 addrspace(1)* %61 syncscope("one-as") monotonic, align 8
  %63 = cmpxchg i64 addrspace(1)* %44, i64 %57, i64 %62 syncscope("one-as") acquire monotonic, align 8
  %64 = extractvalue { i64, i1 } %63, 1
  br i1 %64, label %65, label %55

65:                                               ; preds = %55, %43
  %66 = phi { i64, i1 } [ %53, %43 ], [ %63, %55 ]
  %67 = extractvalue { i64, i1 } %66, 0
  br label %68

68:                                               ; preds = %9, %65
  %69 = phi i64 [ %67, %65 ], [ 0, %9 ]
  %70 = trunc i64 %69 to i32
  %71 = lshr i64 %69, 32
  %72 = trunc i64 %71 to i32
  %73 = call i32 @llvm.amdgcn.readfirstlane(i32 %70)
  %74 = call i32 @llvm.amdgcn.readfirstlane(i32 %72)
  %75 = zext i32 %74 to i64
  %76 = shl nuw i64 %75, 32
  %77 = zext i32 %73 to i64
  %78 = or i64 %76, %77
  store i64 %78, i64 addrspace(5)* %23, align 8, !tbaa !5
  %79 = bitcast %1 addrspace(1)* addrspace(5)* %24 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %79) #6
  %80 = load %0 addrspace(1)*, %0 addrspace(1)* addrspace(5)* %22, align 8, !tbaa !12
  %81 = load i64, i64 addrspace(5)* %23, align 8, !tbaa !5
  %82 = getelementptr %0, %0 addrspace(1)* %80, i64 0, i32 0
  %83 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(1)* %82, align 8, !tbaa !17
  %84 = getelementptr %0, %0 addrspace(1)* %80, i64 0, i32 5
  %85 = load i64, i64 addrspace(1)* %84, align 8, !tbaa !20
  %86 = and i64 %81, %85
  %87 = getelementptr inbounds %1, %1 addrspace(1)* %83, i64 %86
  store %1 addrspace(1)* %87, %1 addrspace(1)* addrspace(5)* %24, align 8, !tbaa !12
  %88 = bitcast %2 addrspace(1)* addrspace(5)* %25 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %88) #6
  %89 = load %0 addrspace(1)*, %0 addrspace(1)* addrspace(5)* %22, align 8, !tbaa !12
  %90 = load i64, i64 addrspace(5)* %23, align 8, !tbaa !5
  %91 = getelementptr %0, %0 addrspace(1)* %89, i64 0, i32 1
  %92 = load %2 addrspace(1)*, %2 addrspace(1)* addrspace(1)* %91, align 8, !tbaa !21
  %93 = getelementptr %0, %0 addrspace(1)* %89, i64 0, i32 5
  %94 = load i64, i64 addrspace(1)* %93, align 8, !tbaa !20
  %95 = and i64 %90, %94
  %96 = getelementptr inbounds %2, %2 addrspace(1)* %92, i64 %95
  store %2 addrspace(1)* %96, %2 addrspace(1)* addrspace(5)* %25, align 8, !tbaa !12
  %97 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(5)* %24, align 8, !tbaa !12
  %98 = load %2 addrspace(1)*, %2 addrspace(1)* addrspace(5)* %25, align 8, !tbaa !12
  %99 = load i32, i32 addrspace(5)* %11, align 4, !tbaa !14
  %100 = load i64, i64 addrspace(5)* %12, align 8, !tbaa !5
  %101 = load i64, i64 addrspace(5)* %13, align 8, !tbaa !5
  %102 = load i64, i64 addrspace(5)* %14, align 8, !tbaa !5
  %103 = load i64, i64 addrspace(5)* %15, align 8, !tbaa !5
  %104 = load i64, i64 addrspace(5)* %16, align 8, !tbaa !5
  %105 = load i64, i64 addrspace(5)* %17, align 8, !tbaa !5
  %106 = load i64, i64 addrspace(5)* %18, align 8, !tbaa !5
  %107 = load i64, i64 addrspace(5)* %19, align 8, !tbaa !5
  %108 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %109 = load i32, i32 addrspace(5)* %21, align 4, !tbaa !14
  %110 = call i64 @llvm.read_register.i64(metadata !22) #12
  %111 = icmp eq i32 %108, %109
  br i1 %111, label %112, label %116

112:                                              ; preds = %68
  %113 = getelementptr inbounds %1, %1 addrspace(1)* %97, i64 0, i32 2
  store i32 %99, i32 addrspace(1)* %113, align 8, !tbaa !23
  %114 = getelementptr inbounds %1, %1 addrspace(1)* %97, i64 0, i32 1
  store i64 %110, i64 addrspace(1)* %114, align 8, !tbaa !25
  %115 = getelementptr inbounds %1, %1 addrspace(1)* %97, i64 0, i32 3
  store i32 1, i32 addrspace(1)* %115, align 4, !tbaa !26
  br label %116

116:                                              ; preds = %68, %112
  %117 = zext i32 %108 to i64
  %118 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 0
  store i64 %100, i64 addrspace(1)* %118, align 8, !tbaa !5
  %119 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 1
  store i64 %101, i64 addrspace(1)* %119, align 8, !tbaa !5
  %120 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 2
  store i64 %102, i64 addrspace(1)* %120, align 8, !tbaa !5
  %121 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 3
  store i64 %103, i64 addrspace(1)* %121, align 8, !tbaa !5
  %122 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 4
  store i64 %104, i64 addrspace(1)* %122, align 8, !tbaa !5
  %123 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 5
  store i64 %105, i64 addrspace(1)* %123, align 8, !tbaa !5
  %124 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 6
  store i64 %106, i64 addrspace(1)* %124, align 8, !tbaa !5
  %125 = getelementptr inbounds %2, %2 addrspace(1)* %98, i64 0, i32 0, i64 %117, i64 7
  store i64 %107, i64 addrspace(1)* %125, align 8, !tbaa !5
  %126 = load %0 addrspace(1)*, %0 addrspace(1)* addrspace(5)* %22, align 8, !tbaa !12
  %127 = load i64, i64 addrspace(5)* %23, align 8, !tbaa !5
  %128 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %129 = load i32, i32 addrspace(5)* %21, align 4, !tbaa !14
  %130 = icmp eq i32 %128, %129
  br i1 %130, label %131, label %163

131:                                              ; preds = %116
  %132 = getelementptr inbounds %0, %0 addrspace(1)* %126, i64 0, i32 4
  %133 = load atomic i64, i64 addrspace(1)* %132 syncscope("one-as") monotonic, align 8
  %134 = getelementptr %0, %0 addrspace(1)* %126, i64 0, i32 0
  %135 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(1)* %134, align 8, !tbaa !17
  %136 = getelementptr %0, %0 addrspace(1)* %126, i64 0, i32 5
  %137 = load i64, i64 addrspace(1)* %136, align 8, !tbaa !20
  %138 = and i64 %137, %127
  %139 = getelementptr inbounds %1, %1 addrspace(1)* %135, i64 %138, i32 0
  store i64 %133, i64 addrspace(1)* %139, align 8, !tbaa !27
  %140 = cmpxchg i64 addrspace(1)* %132, i64 %133, i64 %127 syncscope("one-as") release monotonic, align 8
  %141 = extractvalue { i64, i1 } %140, 1
  br i1 %141, label %147, label %142

142:                                              ; preds = %142, %131
  %143 = phi { i64, i1 } [ %145, %142 ], [ %140, %131 ]
  %144 = extractvalue { i64, i1 } %143, 0
  call void @llvm.amdgcn.s.sleep(i32 1)
  store i64 %144, i64 addrspace(1)* %139, align 8, !tbaa !27
  %145 = cmpxchg i64 addrspace(1)* %132, i64 %144, i64 %127 syncscope("one-as") release monotonic, align 8
  %146 = extractvalue { i64, i1 } %145, 1
  br i1 %146, label %147, label %142

147:                                              ; preds = %142, %131
  %148 = getelementptr inbounds %0, %0 addrspace(1)* %126, i64 0, i32 2, i32 0
  %149 = load i64, i64 addrspace(1)* %148, align 8
  %150 = inttoptr i64 %149 to %4 addrspace(1)*
  %151 = getelementptr inbounds %4, %4 addrspace(1)* %150, i64 0, i32 1, i32 0
  %152 = atomicrmw add i64 addrspace(1)* %151, i64 1 syncscope("one-as") release, align 8
  %153 = getelementptr inbounds %4, %4 addrspace(1)* %150, i64 0, i32 2
  %154 = load i64, i64 addrspace(1)* %153, align 16, !tbaa !28
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %163, label %156

156:                                              ; preds = %147
  %157 = inttoptr i64 %154 to i64 addrspace(1)*
  %158 = getelementptr inbounds %4, %4 addrspace(1)* %150, i64 0, i32 3
  %159 = load i32, i32 addrspace(1)* %158, align 8, !tbaa !30
  %160 = zext i32 %159 to i64
  store atomic i64 %160, i64 addrspace(1)* %157 syncscope("one-as") release, align 8
  %161 = call i32 @llvm.amdgcn.readfirstlane(i32 %159)
  %162 = and i32 %161, 255
  call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %162)
  br label %163

163:                                              ; preds = %116, %147, %156
  %164 = bitcast <2 x i64> addrspace(5)* %26 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 16, i8 addrspace(5)* %164) #6
  %165 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(5)* %24, align 8, !tbaa !12
  %166 = load %2 addrspace(1)*, %2 addrspace(1)* addrspace(5)* %25, align 8, !tbaa !12
  %167 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %168 = load i32, i32 addrspace(5)* %21, align 4, !tbaa !14
  %169 = icmp eq i32 %167, %168
  %170 = getelementptr inbounds %1, %1 addrspace(1)* %165, i64 0, i32 3
  br label %171

171:                                              ; preds = %179, %163
  br i1 %169, label %172, label %175

172:                                              ; preds = %171
  %173 = load atomic i32, i32 addrspace(1)* %170 syncscope("one-as") acquire, align 4
  %174 = and i32 %173, 1
  br label %175

175:                                              ; preds = %172, %171
  %176 = phi i32 [ %174, %172 ], [ 1, %171 ]
  %177 = call i32 @llvm.amdgcn.readfirstlane(i32 %176)
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %180, label %179

179:                                              ; preds = %175
  call void @llvm.amdgcn.s.sleep(i32 1)
  br label %171

180:                                              ; preds = %175
  %181 = zext i32 %167 to i64
  %182 = getelementptr inbounds %2, %2 addrspace(1)* %166, i64 0, i32 0, i64 %181, i64 0
  %183 = getelementptr inbounds %2, %2 addrspace(1)* %166, i64 0, i32 0, i64 %181, i64 1
  %184 = load i64, i64 addrspace(1)* %182, align 8, !tbaa !5
  %185 = load i64, i64 addrspace(1)* %183, align 8, !tbaa !5
  %186 = insertelement <2 x i64> undef, i64 %184, i64 0
  %187 = insertelement <2 x i64> %186, i64 %185, i64 1
  store <2 x i64> %187, <2 x i64> addrspace(5)* %26, align 16, !tbaa !9
  %188 = load %0 addrspace(1)*, %0 addrspace(1)* addrspace(5)* %22, align 8, !tbaa !12
  %189 = load i64, i64 addrspace(5)* %23, align 8, !tbaa !5
  %190 = load i32, i32 addrspace(5)* %20, align 4, !tbaa !14
  %191 = load i32, i32 addrspace(5)* %21, align 4, !tbaa !14
  %192 = icmp eq i32 %190, %191
  br i1 %192, label %193, label %213

193:                                              ; preds = %180
  %194 = getelementptr inbounds %0, %0 addrspace(1)* %188, i64 0, i32 5
  %195 = load i64, i64 addrspace(1)* %194, align 8, !tbaa !20
  %196 = add i64 %195, 1
  %197 = add i64 %196, %189
  %198 = icmp eq i64 %197, 0
  %199 = select i1 %198, i64 %196, i64 %197
  %200 = getelementptr inbounds %0, %0 addrspace(1)* %188, i64 0, i32 3
  %201 = load atomic i64, i64 addrspace(1)* %200 syncscope("one-as") monotonic, align 8
  %202 = getelementptr %0, %0 addrspace(1)* %188, i64 0, i32 0
  %203 = load %1 addrspace(1)*, %1 addrspace(1)* addrspace(1)* %202, align 8, !tbaa !17
  %204 = and i64 %199, %195
  %205 = getelementptr inbounds %1, %1 addrspace(1)* %203, i64 %204, i32 0
  store i64 %201, i64 addrspace(1)* %205, align 8, !tbaa !27
  %206 = cmpxchg i64 addrspace(1)* %200, i64 %201, i64 %199 syncscope("one-as") release monotonic, align 8
  %207 = extractvalue { i64, i1 } %206, 1
  br i1 %207, label %213, label %208

208:                                              ; preds = %208, %193
  %209 = phi { i64, i1 } [ %211, %208 ], [ %206, %193 ]
  %210 = extractvalue { i64, i1 } %209, 0
  call void @llvm.amdgcn.s.sleep(i32 1)
  store i64 %210, i64 addrspace(1)* %205, align 8, !tbaa !27
  %211 = cmpxchg i64 addrspace(1)* %200, i64 %210, i64 %199 syncscope("one-as") release monotonic, align 8
  %212 = extractvalue { i64, i1 } %211, 1
  br i1 %212, label %213, label %208

213:                                              ; preds = %180, %193, %208
  %214 = load <2 x i64>, <2 x i64> addrspace(5)* %26, align 16, !tbaa !9
  %215 = bitcast <2 x i64> addrspace(5)* %26 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %215) #6
  %216 = bitcast %2 addrspace(1)* addrspace(5)* %25 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %216) #6
  %217 = bitcast %1 addrspace(1)* addrspace(5)* %24 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %217) #6
  %218 = bitcast i64 addrspace(5)* %23 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %218) #6
  %219 = bitcast %0 addrspace(1)* addrspace(5)* %22 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %219) #6
  %220 = bitcast i32 addrspace(5)* %21 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %220) #6
  %221 = bitcast i32 addrspace(5)* %20 to i8 addrspace(5)*
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %221) #6
  ret <2 x i64> %214
}

; Function Attrs: convergent mustprogress nofree nounwind readnone willreturn
declare i32 @llvm.amdgcn.readfirstlane(i32) #4

; Function Attrs: mustprogress nounwind willreturn
declare void @llvm.amdgcn.s.sleep(i32 immarg) #5

; Function Attrs: nounwind
declare void @llvm.amdgcn.s.sendmsg(i32 immarg, i32) #6

; Function Attrs: nofree nounwind readonly
declare i64 @llvm.read_register.i64(metadata) #7

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare i32 @llvm.amdgcn.mbcnt.lo(i32, i32) #8

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare i32 @llvm.amdgcn.mbcnt.hi(i32, i32) #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umin.i64(i64, i64) #9

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.z() #2

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.or.v4i32(<4 x i32>) #10

attributes #0 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #1 = { convergent norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { convergent noinline norecurse nounwind optnone "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+16-bit-insts,+add-no-carry-insts,+aperture-regs,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+ds-src2-insts,+enable-ds128,+enable-prt-strict-null,+extended-image-insts,+fast-denormal-f32,+fast-fmaf,+flat-address-space,+flat-for-global,+flat-global-insts,+flat-inst-offsets,+flat-scratch-insts,+fma-mix-insts,+fp64,+gcn3-encoding,+gfx7-gfx8-gfx9-insts,+gfx8-insts,+gfx9,+gfx9-insts,+half-rate-64-ops,+image-gather4-d16-bug,+image-insts,+int-clamp-insts,+inv-2pi-inline-imm,+ldsbankcount32,+load-store-opt,+localmemorysize65536,+mad-mac-f32-insts,+negative-scratch-offset-bug,+promote-alloca,+r128-a16,+s-memrealtime,+s-memtime-inst,+scalar-atomics,+scalar-flat-scratch-insts,+scalar-stores,+sdwa,+sdwa-omod,+sdwa-scalar,+sdwa-sdst,+sramecc,+sramecc-support,+trap-handler,+unaligned-access-mode,+unaligned-buffer-access,+unaligned-ds-access,+vgpr-index-mode,+vop3p,-wavefrontsize16,-wavefrontsize32,+wavefrontsize64,+xnack-support" }
attributes #4 = { convergent mustprogress nofree nounwind readnone willreturn }
attributes #5 = { mustprogress nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { mustprogress nofree nosync nounwind readnone willreturn }
attributes #9 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #10 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #11 = { convergent nounwind }
attributes #12 = { convergent }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !6, i64 0}
!6 = !{!"long", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!7, !7, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = !{!13, !13, i64 0}
!13 = !{!"any pointer", !7, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !7, i64 0}
!16 = !{i64 2662}
!17 = !{!18, !13, i64 0}
!18 = !{!"", !13, i64 0, !13, i64 8, !19, i64 16, !6, i64 24, !6, i64 32, !6, i64 40}
!19 = !{!"hsa_signal_s", !6, i64 0}
!20 = !{!18, !6, i64 40}
!21 = !{!18, !13, i64 8}
!22 = !{!"exec"}
!23 = !{!24, !15, i64 16}
!24 = !{!"", !6, i64 0, !6, i64 8, !15, i64 16, !15, i64 20}
!25 = !{!24, !6, i64 8}
!26 = !{!24, !15, i64 20}
!27 = !{!24, !6, i64 0}
!28 = !{!29, !6, i64 16}
!29 = !{!"amd_signal_s", !6, i64 0, !7, i64 8, !6, i64 16, !15, i64 24, !15, i64 28, !6, i64 32, !6, i64 40, !7, i64 48, !7, i64 56}
!30 = !{!29, !15, i64 24}
