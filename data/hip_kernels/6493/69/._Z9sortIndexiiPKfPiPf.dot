digraph "CFG for '_Z9sortIndexiiPKfPiPf' function" {
	label="CFG for '_Z9sortIndexiiPKfPiPf' function";

	Node0x4a58a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %8, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp slt i32 %14, %0\l  %24 = icmp slt i32 %22, %1\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %141\l|{<s0>T|<s1>F}}"];
	Node0x4a58a50:s0 -> Node0x4a5c4d0;
	Node0x4a58a50:s1 -> Node0x4a5c560;
	Node0x4a5c4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %22, %0\l  %28 = add nsw i32 %27, %14\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %2, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %32 = icmp sgt i32 %1, 0\l  br i1 %32, label %33, label %71\l|{<s0>T|<s1>F}}"];
	Node0x4a5c4d0:s0 -> Node0x4a5b280;
	Node0x4a5c4d0:s1 -> Node0x4a5b310;
	Node0x4a5b280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%33:\l33:                                               \l  %34 = and i32 %1, 1\l  %35 = icmp eq i32 %1, 1\l  br i1 %35, label %38, label %36\l|{<s0>T|<s1>F}}"];
	Node0x4a5b280:s0 -> Node0x4a5cfa0;
	Node0x4a5b280:s1 -> Node0x4a5cff0;
	Node0x4a5cff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%36:\l36:                                               \l  %37 = and i32 %1, -2\l  br label %76\l}"];
	Node0x4a5cff0 -> Node0x4a5d1f0;
	Node0x4a5cfa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%38:\l38:                                               \l  %39 = phi i32 [ undef, %33 ], [ %136, %135 ]\l  %40 = phi float [ undef, %33 ], [ %137, %135 ]\l  %41 = phi i32 [ 0, %33 ], [ %138, %135 ]\l  %42 = phi float [ %31, %33 ], [ %137, %135 ]\l  %43 = phi i32 [ %22, %33 ], [ %136, %135 ]\l  %44 = icmp eq i32 %34, 0\l  br i1 %44, label %71, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4a5cfa0:s0 -> Node0x4a5b310;
	Node0x4a5cfa0:s1 -> Node0x4a5dc70;
	Node0x4a5dc70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%45:\l45:                                               \l  %46 = mul nsw i32 %41, %0\l  %47 = add nsw i32 %46, %14\l  %48 = icmp sgt i32 %41, %22\l  br i1 %48, label %61, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4a5dc70:s0 -> Node0x4a5df60;
	Node0x4a5dc70:s1 -> Node0x4a5dfb0;
	Node0x4a5dfb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%49:\l49:                                               \l  %50 = icmp slt i32 %41, %22\l  br i1 %50, label %51, label %71\l|{<s0>T|<s1>F}}"];
	Node0x4a5dfb0:s0 -> Node0x4a5e180;
	Node0x4a5dfb0:s1 -> Node0x4a5b310;
	Node0x4a5e180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%51:\l51:                                               \l  %52 = sext i32 %47 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %2, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %55 = fcmp contract ogt float %54, %42\l  %56 = select i1 %55, i32 %41, i32 %43\l  %57 = uitofp i1 %55 to float\l  %58 = fsub contract float %54, %42\l  %59 = fmul contract float %58, %57\l  %60 = fadd contract float %42, %59\l  br label %71\l}"];
	Node0x4a5e180 -> Node0x4a5b310;
	Node0x4a5df60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%61:\l61:                                               \l  %62 = sext i32 %47 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %2, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %65 = fcmp contract olt float %64, %42\l  %66 = select i1 %65, i32 %41, i32 %43\l  %67 = uitofp i1 %65 to float\l  %68 = fsub contract float %64, %42\l  %69 = fmul contract float %68, %67\l  %70 = fadd contract float %42, %69\l  br label %71\l}"];
	Node0x4a5df60 -> Node0x4a5b310;
	Node0x4a5b310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%71:\l71:                                               \l  %72 = phi i32 [ %22, %26 ], [ %39, %38 ], [ %66, %61 ], [ %56, %51 ], [ %43,\l... %49 ]\l  %73 = phi float [ %31, %26 ], [ %40, %38 ], [ %70, %61 ], [ %60, %51 ], [\l... %42, %49 ]\l  %74 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %29\l  store i32 %72, i32 addrspace(1)* %74, align 4, !tbaa !11\l  %75 = getelementptr inbounds float, float addrspace(1)* %4, i64 %29\l  store float %73, float addrspace(1)* %75, align 4, !tbaa !7\l  br label %141\l}"];
	Node0x4a5b310 -> Node0x4a5c560;
	Node0x4a5d1f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi i32 [ 0, %36 ], [ %138, %135 ]\l  %78 = phi float [ %31, %36 ], [ %137, %135 ]\l  %79 = phi i32 [ %22, %36 ], [ %136, %135 ]\l  %80 = phi i32 [ 0, %36 ], [ %139, %135 ]\l  %81 = mul nsw i32 %77, %0\l  %82 = add nsw i32 %81, %14\l  %83 = icmp sgt i32 %77, %22\l  br i1 %83, label %84, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4a5d1f0:s0 -> Node0x4a5fff0;
	Node0x4a5d1f0:s1 -> Node0x4a60080;
	Node0x4a5fff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%84:\l84:                                               \l  %85 = sext i32 %82 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %2, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %88 = fcmp contract olt float %87, %78\l  %89 = select i1 %88, i32 %77, i32 %79\l  %90 = uitofp i1 %88 to float\l  %91 = fsub contract float %87, %78\l  %92 = fmul contract float %91, %90\l  %93 = fadd contract float %78, %92\l  br label %106\l}"];
	Node0x4a5fff0 -> Node0x4a606d0;
	Node0x4a60080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%94:\l94:                                               \l  %95 = icmp slt i32 %77, %22\l  br i1 %95, label %96, label %106\l|{<s0>T|<s1>F}}"];
	Node0x4a60080:s0 -> Node0x4a60860;
	Node0x4a60080:s1 -> Node0x4a606d0;
	Node0x4a60860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%96:\l96:                                               \l  %97 = sext i32 %82 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %2, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %100 = fcmp contract ogt float %99, %78\l  %101 = select i1 %100, i32 %77, i32 %79\l  %102 = uitofp i1 %100 to float\l  %103 = fsub contract float %99, %78\l  %104 = fmul contract float %103, %102\l  %105 = fadd contract float %78, %104\l  br label %106\l}"];
	Node0x4a60860 -> Node0x4a606d0;
	Node0x4a606d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ %89, %84 ], [ %101, %96 ], [ %79, %94 ]\l  %108 = phi float [ %93, %84 ], [ %105, %96 ], [ %78, %94 ]\l  %109 = or i32 %77, 1\l  %110 = mul nsw i32 %109, %0\l  %111 = add nsw i32 %110, %14\l  %112 = icmp slt i32 %77, %22\l  br i1 %112, label %113, label %125\l|{<s0>T|<s1>F}}"];
	Node0x4a606d0:s0 -> Node0x4a61290;
	Node0x4a606d0:s1 -> Node0x4a612e0;
	Node0x4a61290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%113:\l113:                                              \l  %114 = icmp slt i32 %109, %22\l  br i1 %114, label %115, label %135\l|{<s0>T|<s1>F}}"];
	Node0x4a61290:s0 -> Node0x4a614b0;
	Node0x4a61290:s1 -> Node0x4a5d700;
	Node0x4a614b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%115:\l115:                                              \l  %116 = sext i32 %111 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %119 = fcmp contract ogt float %118, %108\l  %120 = select i1 %119, i32 %109, i32 %107\l  %121 = uitofp i1 %119 to float\l  %122 = fsub contract float %118, %108\l  %123 = fmul contract float %122, %121\l  %124 = fadd contract float %108, %123\l  br label %135\l}"];
	Node0x4a614b0 -> Node0x4a5d700;
	Node0x4a612e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%125:\l125:                                              \l  %126 = sext i32 %111 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %2, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %129 = fcmp contract olt float %128, %108\l  %130 = select i1 %129, i32 %109, i32 %107\l  %131 = uitofp i1 %129 to float\l  %132 = fsub contract float %128, %108\l  %133 = fmul contract float %132, %131\l  %134 = fadd contract float %108, %133\l  br label %135\l}"];
	Node0x4a612e0 -> Node0x4a5d700;
	Node0x4a5d700 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%135:\l135:                                              \l  %136 = phi i32 [ %130, %125 ], [ %120, %115 ], [ %107, %113 ]\l  %137 = phi float [ %134, %125 ], [ %124, %115 ], [ %108, %113 ]\l  %138 = add nuw nsw i32 %77, 2\l  %139 = add i32 %80, 2\l  %140 = icmp eq i32 %139, %37\l  br i1 %140, label %38, label %76, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4a5d700:s0 -> Node0x4a5cfa0;
	Node0x4a5d700:s1 -> Node0x4a5d1f0;
	Node0x4a5c560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%141:\l141:                                              \l  ret void\l}"];
}
