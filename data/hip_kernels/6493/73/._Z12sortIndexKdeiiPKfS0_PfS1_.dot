digraph "CFG for '_Z12sortIndexKdeiiPKfS0_PfS1_' function" {
	label="CFG for '_Z12sortIndexKdeiiPKfS0_PfS1_' function";

	Node0x48e5100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %9, %13\l  %15 = add i32 %14, %7\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !5, !invariant.load !6\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = add i32 %22, %16\l  %24 = icmp slt i32 %15, %0\l  %25 = icmp slt i32 %23, %1\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %174\l|{<s0>T|<s1>F}}"];
	Node0x48e5100:s0 -> Node0x48e8b70;
	Node0x48e5100:s1 -> Node0x48e8c00;
	Node0x48e8b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%27:\l27:                                               \l  %28 = mul nsw i32 %23, %0\l  %29 = add nsw i32 %28, %15\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %33 = getelementptr inbounds float, float addrspace(1)* %3, i64 %30\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %35 = icmp sgt i32 %1, 0\l  br i1 %35, label %36, label %84\l|{<s0>T|<s1>F}}"];
	Node0x48e8b70:s0 -> Node0x48e9a80;
	Node0x48e8b70:s1 -> Node0x48e9b10;
	Node0x48e9a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%36:\l36:                                               \l  %37 = and i32 %1, 1\l  %38 = icmp eq i32 %1, 1\l  br i1 %38, label %41, label %39\l|{<s0>T|<s1>F}}"];
	Node0x48e9a80:s0 -> Node0x48e9da0;
	Node0x48e9a80:s1 -> Node0x48e9df0;
	Node0x48e9df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%39:\l39:                                               \l  %40 = and i32 %1, -2\l  br label %89\l}"];
	Node0x48e9df0 -> Node0x48e9ff0;
	Node0x48e9da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%41:\l41:                                               \l  %42 = phi float [ undef, %36 ], [ %169, %168 ]\l  %43 = phi float [ undef, %36 ], [ %170, %168 ]\l  %44 = phi i32 [ 0, %36 ], [ %171, %168 ]\l  %45 = phi float [ %34, %36 ], [ %170, %168 ]\l  %46 = phi float [ %32, %36 ], [ %169, %168 ]\l  %47 = icmp eq i32 %37, 0\l  br i1 %47, label %84, label %48\l|{<s0>T|<s1>F}}"];
	Node0x48e9da0:s0 -> Node0x48e9b10;
	Node0x48e9da0:s1 -> Node0x48eaa70;
	Node0x48eaa70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%48:\l48:                                               \l  %49 = mul nsw i32 %44, %0\l  %50 = add nsw i32 %49, %15\l  %51 = icmp sgt i32 %44, %23\l  br i1 %51, label %64, label %52\l|{<s0>T|<s1>F}}"];
	Node0x48eaa70:s0 -> Node0x48ead60;
	Node0x48eaa70:s1 -> Node0x48eadb0;
	Node0x48eadb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%52:\l52:                                               \l  %53 = icmp slt i32 %44, %23\l  br i1 %53, label %54, label %84\l|{<s0>T|<s1>F}}"];
	Node0x48eadb0:s0 -> Node0x48eaf80;
	Node0x48eadb0:s1 -> Node0x48e9b10;
	Node0x48eaf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%54:\l54:                                               \l  %55 = sext i32 %50 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %2, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %58 = fcmp contract olt float %57, %46\l  %59 = uitofp i1 %58 to float\l  %60 = fsub contract float %57, %46\l  %61 = fmul contract float %60, %59\l  %62 = fadd contract float %46, %61\l  %63 = fcmp contract olt float %57, %62\l  br label %74\l}"];
	Node0x48eaf80 -> Node0x48eb570;
	Node0x48ead60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%64:\l64:                                               \l  %65 = sext i32 %50 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %68 = fcmp contract ogt float %67, %46\l  %69 = uitofp i1 %68 to float\l  %70 = fsub contract float %67, %46\l  %71 = fmul contract float %70, %69\l  %72 = fadd contract float %46, %71\l  %73 = fcmp contract ogt float %67, %72\l  br label %74\l}"];
	Node0x48ead60 -> Node0x48eb570;
	Node0x48eb570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%74:\l74:                                               \l  %75 = phi i1 [ %73, %64 ], [ %63, %54 ]\l  %76 = phi i64 [ %65, %64 ], [ %55, %54 ]\l  %77 = phi float [ %72, %64 ], [ %62, %54 ]\l  %78 = uitofp i1 %75 to float\l  %79 = getelementptr inbounds float, float addrspace(1)* %3, i64 %76\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = fsub contract float %80, %45\l  %82 = fmul contract float %81, %78\l  %83 = fadd contract float %45, %82\l  br label %84\l}"];
	Node0x48eb570 -> Node0x48e9b10;
	Node0x48e9b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%84:\l84:                                               \l  %85 = phi float [ %32, %27 ], [ %42, %41 ], [ %46, %52 ], [ %77, %74 ]\l  %86 = phi float [ %34, %27 ], [ %43, %41 ], [ %45, %52 ], [ %83, %74 ]\l  %87 = getelementptr inbounds float, float addrspace(1)* %4, i64 %30\l  store float %85, float addrspace(1)* %87, align 4, !tbaa !7\l  %88 = getelementptr inbounds float, float addrspace(1)* %5, i64 %30\l  store float %86, float addrspace(1)* %88, align 4, !tbaa !7\l  br label %174\l}"];
	Node0x48e9b10 -> Node0x48e8c00;
	Node0x48e9ff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%89:\l89:                                               \l  %90 = phi i32 [ 0, %39 ], [ %171, %168 ]\l  %91 = phi float [ %34, %39 ], [ %170, %168 ]\l  %92 = phi float [ %32, %39 ], [ %169, %168 ]\l  %93 = phi i32 [ 0, %39 ], [ %172, %168 ]\l  %94 = mul nsw i32 %90, %0\l  %95 = add nsw i32 %94, %15\l  %96 = icmp sgt i32 %90, %23\l  br i1 %96, label %97, label %107\l|{<s0>T|<s1>F}}"];
	Node0x48e9ff0:s0 -> Node0x48ecc90;
	Node0x48e9ff0:s1 -> Node0x48ecce0;
	Node0x48ecc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%97:\l97:                                               \l  %98 = sext i32 %95 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %101 = fcmp contract ogt float %100, %92\l  %102 = uitofp i1 %101 to float\l  %103 = fsub contract float %100, %92\l  %104 = fmul contract float %103, %102\l  %105 = fadd contract float %92, %104\l  %106 = fcmp contract ogt float %100, %105\l  br label %119\l}"];
	Node0x48ecc90 -> Node0x48ed2d0;
	Node0x48ecce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%107:\l107:                                              \l  %108 = icmp slt i32 %90, %23\l  br i1 %108, label %109, label %129\l|{<s0>T|<s1>F}}"];
	Node0x48ecce0:s0 -> Node0x48ed460;
	Node0x48ecce0:s1 -> Node0x48ed4b0;
	Node0x48ed460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%109:\l109:                                              \l  %110 = sext i32 %95 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %113 = fcmp contract olt float %112, %92\l  %114 = uitofp i1 %113 to float\l  %115 = fsub contract float %112, %92\l  %116 = fmul contract float %115, %114\l  %117 = fadd contract float %92, %116\l  %118 = fcmp contract olt float %112, %117\l  br label %119\l}"];
	Node0x48ed460 -> Node0x48ed2d0;
	Node0x48ed2d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%119:\l119:                                              \l  %120 = phi i1 [ %106, %97 ], [ %118, %109 ]\l  %121 = phi i64 [ %98, %97 ], [ %110, %109 ]\l  %122 = phi float [ %105, %97 ], [ %117, %109 ]\l  %123 = uitofp i1 %120 to float\l  %124 = getelementptr inbounds float, float addrspace(1)* %3, i64 %121\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7\l  %126 = fsub contract float %125, %91\l  %127 = fmul contract float %126, %123\l  %128 = fadd contract float %91, %127\l  br label %129\l}"];
	Node0x48ed2d0 -> Node0x48ed4b0;
	Node0x48ed4b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%129:\l129:                                              \l  %130 = phi float [ %92, %107 ], [ %122, %119 ]\l  %131 = phi float [ %91, %107 ], [ %128, %119 ]\l  %132 = or i32 %90, 1\l  %133 = mul nsw i32 %132, %0\l  %134 = add nsw i32 %133, %15\l  %135 = icmp slt i32 %90, %23\l  br i1 %135, label %136, label %148\l|{<s0>T|<s1>F}}"];
	Node0x48ed4b0:s0 -> Node0x48ee870;
	Node0x48ed4b0:s1 -> Node0x48ee8c0;
	Node0x48ee870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%136:\l136:                                              \l  %137 = icmp slt i32 %132, %23\l  br i1 %137, label %138, label %168\l|{<s0>T|<s1>F}}"];
	Node0x48ee870:s0 -> Node0x48eea50;
	Node0x48ee870:s1 -> Node0x48ea500;
	Node0x48eea50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%138:\l138:                                              \l  %139 = sext i32 %134 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %2, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %142 = fcmp contract olt float %141, %130\l  %143 = uitofp i1 %142 to float\l  %144 = fsub contract float %141, %130\l  %145 = fmul contract float %144, %143\l  %146 = fadd contract float %130, %145\l  %147 = fcmp contract olt float %141, %146\l  br label %158\l}"];
	Node0x48eea50 -> Node0x48ef010;
	Node0x48ee8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%148:\l148:                                              \l  %149 = sext i32 %134 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %2, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %152 = fcmp contract ogt float %151, %130\l  %153 = uitofp i1 %152 to float\l  %154 = fsub contract float %151, %130\l  %155 = fmul contract float %154, %153\l  %156 = fadd contract float %130, %155\l  %157 = fcmp contract ogt float %151, %156\l  br label %158\l}"];
	Node0x48ee8c0 -> Node0x48ef010;
	Node0x48ef010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%158:\l158:                                              \l  %159 = phi i1 [ %157, %148 ], [ %147, %138 ]\l  %160 = phi i64 [ %149, %148 ], [ %139, %138 ]\l  %161 = phi float [ %156, %148 ], [ %146, %138 ]\l  %162 = uitofp i1 %159 to float\l  %163 = getelementptr inbounds float, float addrspace(1)* %3, i64 %160\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7\l  %165 = fsub contract float %164, %131\l  %166 = fmul contract float %165, %162\l  %167 = fadd contract float %131, %166\l  br label %168\l}"];
	Node0x48ef010 -> Node0x48ea500;
	Node0x48ea500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%168:\l168:                                              \l  %169 = phi float [ %130, %136 ], [ %161, %158 ]\l  %170 = phi float [ %131, %136 ], [ %167, %158 ]\l  %171 = add nuw nsw i32 %90, 2\l  %172 = add i32 %93, 2\l  %173 = icmp eq i32 %172, %40\l  br i1 %173, label %41, label %89, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x48ea500:s0 -> Node0x48e9da0;
	Node0x48ea500:s1 -> Node0x48e9ff0;
	Node0x48e8c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%174:\l174:                                              \l  ret void\l}"];
}
