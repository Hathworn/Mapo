digraph "CFG for '_Z23patchmatch2_conv_kernelPfS_S_S_S_Piiiiii' function" {
	label="CFG for '_Z23patchmatch2_conv_kernelPfS_S_S_S_Piiiiii' function";

	Node0x531ba20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %12, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = add i32 %18, %19\l  %21 = mul nsw i32 %10, %9\l  %22 = shl nsw i32 %7, 1\l  %23 = add nuw nsw i32 %22, 1\l  %24 = mul nsw i32 %23, %23\l  %25 = mul nsw i32 %21, %24\l  %26 = icmp slt i32 %20, %25\l  br i1 %26, label %27, label %301\l|{<s0>T|<s1>F}}"];
	Node0x531ba20:s0 -> Node0x531e800;
	Node0x531ba20:s1 -> Node0x531e890;
	Node0x531e800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = sext i32 %20 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %4, i64 %28\l  store float -1.000000e+00, float addrspace(1)* %29, align 4, !tbaa !7\l  %30 = freeze i32 %20\l  %31 = freeze i32 %24\l  %32 = sdiv i32 %30, %31\l  %33 = mul i32 %32, %31\l  %34 = sub i32 %30, %33\l  %35 = freeze i32 %10\l  %36 = sdiv i32 %32, %35\l  %37 = mul i32 %36, %35\l  %38 = sub i32 %32, %37\l  %39 = freeze i32 %23\l  %40 = sdiv i32 %34, %39\l  %41 = sub nsw i32 %40, %7\l  %42 = mul i32 %40, %39\l  %43 = sub i32 %34, %42\l  %44 = sub nsw i32 %43, %7\l  %45 = shl nsw i32 %32, 1\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %46\l  %48 = load i32, i32 addrspace(1)* %47, align 4, !tbaa !11, !amdgpu.noclobber\l... !5\l  %49 = add nuw nsw i32 %45, 1\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %50\l  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !11, !amdgpu.noclobber\l... !5\l  %53 = add nsw i32 %52, %41\l  %54 = add nsw i32 %48, %44\l  %55 = icmp sgt i32 %54, -1\l  br i1 %55, label %56, label %301\l|{<s0>T|<s1>F}}"];
	Node0x531e800:s0 -> Node0x53213e0;
	Node0x531e800:s1 -> Node0x531e890;
	Node0x53213e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%56:\l56:                                               \l  %57 = icmp slt i32 %54, %10\l  %58 = icmp sgt i32 %53, -1\l  %59 = select i1 %57, i1 %58, i1 false\l  %60 = icmp slt i32 %53, %9\l  %61 = select i1 %59, i1 %60, i1 false\l  br i1 %61, label %62, label %301\l|{<s0>T|<s1>F}}"];
	Node0x53213e0:s0 -> Node0x5321860;
	Node0x53213e0:s1 -> Node0x531e890;
	Node0x5321860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%62:\l62:                                               \l  %63 = add nsw i32 %6, -1\l  %64 = sdiv i32 %63, 2\l  %65 = sub nsw i32 0, %64\l  %66 = icmp slt i32 %6, 0\l  br i1 %66, label %86, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5321860:s0 -> Node0x531f980;
	Node0x5321860:s1 -> Node0x531fa10;
	Node0x531fa10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%67:\l67:                                               \l  %68 = icmp sgt i32 %8, 0\l  %69 = tail call i32 @llvm.abs.i32(i32 %64, i1 true)\l  %70 = and i32 %8, 7\l  %71 = icmp ult i32 %8, 8\l  %72 = and i32 %8, -8\l  %73 = icmp eq i32 %70, 0\l  br label %74\l}"];
	Node0x531fa10 -> Node0x5322510;
	Node0x5322510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%74:\l74:                                               \l  %75 = phi float [ 0.000000e+00, %67 ], [ %298, %91 ]\l  %76 = phi i32 [ 0, %67 ], [ %297, %91 ]\l  %77 = phi i32 [ %65, %67 ], [ %92, %91 ]\l  %78 = add nsw i32 %77, %36\l  %79 = add nsw i32 %77, %53\l  %80 = icmp sgt i32 %78, -1\l  %81 = icmp slt i32 %78, %9\l  %82 = icmp sgt i32 %79, -1\l  %83 = icmp slt i32 %79, %9\l  %84 = mul nsw i32 %78, %10\l  %85 = mul nsw i32 %79, %10\l  br label %94\l}"];
	Node0x5322510 -> Node0x5322e80;
	Node0x531f980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%86:\l86:                                               \l  %87 = phi i32 [ 0, %62 ], [ %297, %91 ]\l  %88 = phi float [ 0.000000e+00, %62 ], [ %298, %91 ]\l  %89 = sitofp i32 %87 to float\l  %90 = fdiv contract float %88, %89\l  store float %90, float addrspace(1)* %29, align 4, !tbaa !7\l  br label %301\l}"];
	Node0x531f980 -> Node0x531e890;
	Node0x5322680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%91:\l91:                                               \l  %92 = add i32 %77, 1\l  %93 = icmp eq i32 %77, %69\l  br i1 %93, label %86, label %74, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5322680:s0 -> Node0x531f980;
	Node0x5322680:s1 -> Node0x5322510;
	Node0x5322e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%94:\l94:                                               \l  %95 = phi float [ %75, %74 ], [ %298, %296 ]\l  %96 = phi i32 [ %76, %74 ], [ %297, %296 ]\l  %97 = phi i32 [ %65, %74 ], [ %299, %296 ]\l  %98 = add nsw i32 %97, %38\l  %99 = add nsw i32 %97, %54\l  %100 = icmp sgt i32 %98, -1\l  %101 = icmp slt i32 %98, %10\l  %102 = select i1 %100, i1 %101, i1 false\l  %103 = select i1 %102, i1 %80, i1 false\l  %104 = icmp sgt i32 %99, -1\l  %105 = select i1 %103, i1 %81, i1 false\l  %106 = select i1 %105, i1 %104, i1 false\l  br i1 %106, label %107, label %296\l|{<s0>T|<s1>F}}"];
	Node0x5322e80:s0 -> Node0x53243a0;
	Node0x5322e80:s1 -> Node0x5323b70;
	Node0x53243a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%107:\l107:                                              \l  %108 = icmp slt i32 %99, %10\l  %109 = select i1 %108, i1 %82, i1 false\l  %110 = select i1 %109, i1 %83, i1 false\l  br i1 %110, label %111, label %296\l|{<s0>T|<s1>F}}"];
	Node0x53243a0:s0 -> Node0x53246d0;
	Node0x53243a0:s1 -> Node0x5323b70;
	Node0x53246d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%111:\l111:                                              \l  %112 = add nsw i32 %98, %84\l  %113 = add nsw i32 %99, %85\l  br i1 %68, label %114, label %143\l|{<s0>T|<s1>F}}"];
	Node0x53246d0:s0 -> Node0x53248f0;
	Node0x53246d0:s1 -> Node0x5324940;
	Node0x53248f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%114:\l114:                                              \l  br i1 %71, label %115, label %146\l|{<s0>T|<s1>F}}"];
	Node0x53248f0:s0 -> Node0x5324a80;
	Node0x53248f0:s1 -> Node0x5324ad0;
	Node0x5324a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%115:\l115:                                              \l  %116 = phi float [ undef, %114 ], [ %292, %146 ]\l  %117 = phi float [ %95, %114 ], [ %292, %146 ]\l  %118 = phi i32 [ 0, %114 ], [ %293, %146 ]\l  br i1 %73, label %143, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5324a80:s0 -> Node0x5324940;
	Node0x5324a80:s1 -> Node0x53252e0;
	Node0x53252e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%119:\l119:                                              \l  %120 = phi float [ %139, %119 ], [ %117, %115 ]\l  %121 = phi i32 [ %140, %119 ], [ %118, %115 ]\l  %122 = phi i32 [ %141, %119 ], [ 0, %115 ]\l  %123 = mul nsw i32 %121, %21\l  %124 = add nsw i32 %112, %123\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7\l  %128 = add nsw i32 %113, %123\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %1, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7\l  %132 = fmul contract float %127, %131\l  %133 = fadd contract float %120, %132\l  %134 = getelementptr inbounds float, float addrspace(1)* %2, i64 %125\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7\l  %136 = getelementptr inbounds float, float addrspace(1)* %3, i64 %129\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7\l  %138 = fmul contract float %135, %137\l  %139 = fadd contract float %133, %138\l  %140 = add nuw nsw i32 %121, 1\l  %141 = add i32 %122, 1\l  %142 = icmp eq i32 %141, %70\l  br i1 %142, label %143, label %119, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x53252e0:s0 -> Node0x5324940;
	Node0x53252e0:s1 -> Node0x53252e0;
	Node0x5324940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%143:\l143:                                              \l  %144 = phi float [ %95, %111 ], [ %116, %115 ], [ %139, %119 ]\l  %145 = add nsw i32 %96, 1\l  br label %296\l}"];
	Node0x5324940 -> Node0x5323b70;
	Node0x5324ad0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%146:\l146:                                              \l  %147 = phi float [ %292, %146 ], [ %95, %114 ]\l  %148 = phi i32 [ %293, %146 ], [ 0, %114 ]\l  %149 = phi i32 [ %294, %146 ], [ 0, %114 ]\l  %150 = mul nsw i32 %148, %21\l  %151 = add nsw i32 %112, %150\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %0, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !7\l  %155 = add nsw i32 %113, %150\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7\l  %159 = fmul contract float %154, %158\l  %160 = fadd contract float %147, %159\l  %161 = getelementptr inbounds float, float addrspace(1)* %2, i64 %152\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !7\l  %163 = getelementptr inbounds float, float addrspace(1)* %3, i64 %156\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7\l  %165 = fmul contract float %162, %164\l  %166 = fadd contract float %160, %165\l  %167 = or i32 %148, 1\l  %168 = mul nsw i32 %167, %21\l  %169 = add nsw i32 %112, %168\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %0, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !7\l  %173 = add nsw i32 %113, %168\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %1, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !7\l  %177 = fmul contract float %172, %176\l  %178 = fadd contract float %166, %177\l  %179 = getelementptr inbounds float, float addrspace(1)* %2, i64 %170\l  %180 = load float, float addrspace(1)* %179, align 4, !tbaa !7\l  %181 = getelementptr inbounds float, float addrspace(1)* %3, i64 %174\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !7\l  %183 = fmul contract float %180, %182\l  %184 = fadd contract float %178, %183\l  %185 = or i32 %148, 2\l  %186 = mul nsw i32 %185, %21\l  %187 = add nsw i32 %112, %186\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds float, float addrspace(1)* %0, i64 %188\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !7\l  %191 = add nsw i32 %113, %186\l  %192 = sext i32 %191 to i64\l  %193 = getelementptr inbounds float, float addrspace(1)* %1, i64 %192\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !7\l  %195 = fmul contract float %190, %194\l  %196 = fadd contract float %184, %195\l  %197 = getelementptr inbounds float, float addrspace(1)* %2, i64 %188\l  %198 = load float, float addrspace(1)* %197, align 4, !tbaa !7\l  %199 = getelementptr inbounds float, float addrspace(1)* %3, i64 %192\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !7\l  %201 = fmul contract float %198, %200\l  %202 = fadd contract float %196, %201\l  %203 = or i32 %148, 3\l  %204 = mul nsw i32 %203, %21\l  %205 = add nsw i32 %112, %204\l  %206 = sext i32 %205 to i64\l  %207 = getelementptr inbounds float, float addrspace(1)* %0, i64 %206\l  %208 = load float, float addrspace(1)* %207, align 4, !tbaa !7\l  %209 = add nsw i32 %113, %204\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds float, float addrspace(1)* %1, i64 %210\l  %212 = load float, float addrspace(1)* %211, align 4, !tbaa !7\l  %213 = fmul contract float %208, %212\l  %214 = fadd contract float %202, %213\l  %215 = getelementptr inbounds float, float addrspace(1)* %2, i64 %206\l  %216 = load float, float addrspace(1)* %215, align 4, !tbaa !7\l  %217 = getelementptr inbounds float, float addrspace(1)* %3, i64 %210\l  %218 = load float, float addrspace(1)* %217, align 4, !tbaa !7\l  %219 = fmul contract float %216, %218\l  %220 = fadd contract float %214, %219\l  %221 = or i32 %148, 4\l  %222 = mul nsw i32 %221, %21\l  %223 = add nsw i32 %112, %222\l  %224 = sext i32 %223 to i64\l  %225 = getelementptr inbounds float, float addrspace(1)* %0, i64 %224\l  %226 = load float, float addrspace(1)* %225, align 4, !tbaa !7\l  %227 = add nsw i32 %113, %222\l  %228 = sext i32 %227 to i64\l  %229 = getelementptr inbounds float, float addrspace(1)* %1, i64 %228\l  %230 = load float, float addrspace(1)* %229, align 4, !tbaa !7\l  %231 = fmul contract float %226, %230\l  %232 = fadd contract float %220, %231\l  %233 = getelementptr inbounds float, float addrspace(1)* %2, i64 %224\l  %234 = load float, float addrspace(1)* %233, align 4, !tbaa !7\l  %235 = getelementptr inbounds float, float addrspace(1)* %3, i64 %228\l  %236 = load float, float addrspace(1)* %235, align 4, !tbaa !7\l  %237 = fmul contract float %234, %236\l  %238 = fadd contract float %232, %237\l  %239 = or i32 %148, 5\l  %240 = mul nsw i32 %239, %21\l  %241 = add nsw i32 %112, %240\l  %242 = sext i32 %241 to i64\l  %243 = getelementptr inbounds float, float addrspace(1)* %0, i64 %242\l  %244 = load float, float addrspace(1)* %243, align 4, !tbaa !7\l  %245 = add nsw i32 %113, %240\l  %246 = sext i32 %245 to i64\l  %247 = getelementptr inbounds float, float addrspace(1)* %1, i64 %246\l  %248 = load float, float addrspace(1)* %247, align 4, !tbaa !7\l  %249 = fmul contract float %244, %248\l  %250 = fadd contract float %238, %249\l  %251 = getelementptr inbounds float, float addrspace(1)* %2, i64 %242\l  %252 = load float, float addrspace(1)* %251, align 4, !tbaa !7\l  %253 = getelementptr inbounds float, float addrspace(1)* %3, i64 %246\l  %254 = load float, float addrspace(1)* %253, align 4, !tbaa !7\l  %255 = fmul contract float %252, %254\l  %256 = fadd contract float %250, %255\l  %257 = or i32 %148, 6\l  %258 = mul nsw i32 %257, %21\l  %259 = add nsw i32 %112, %258\l  %260 = sext i32 %259 to i64\l  %261 = getelementptr inbounds float, float addrspace(1)* %0, i64 %260\l  %262 = load float, float addrspace(1)* %261, align 4, !tbaa !7\l  %263 = add nsw i32 %113, %258\l  %264 = sext i32 %263 to i64\l  %265 = getelementptr inbounds float, float addrspace(1)* %1, i64 %264\l  %266 = load float, float addrspace(1)* %265, align 4, !tbaa !7\l  %267 = fmul contract float %262, %266\l  %268 = fadd contract float %256, %267\l  %269 = getelementptr inbounds float, float addrspace(1)* %2, i64 %260\l  %270 = load float, float addrspace(1)* %269, align 4, !tbaa !7\l  %271 = getelementptr inbounds float, float addrspace(1)* %3, i64 %264\l  %272 = load float, float addrspace(1)* %271, align 4, !tbaa !7\l  %273 = fmul contract float %270, %272\l  %274 = fadd contract float %268, %273\l  %275 = or i32 %148, 7\l  %276 = mul nsw i32 %275, %21\l  %277 = add nsw i32 %112, %276\l  %278 = sext i32 %277 to i64\l  %279 = getelementptr inbounds float, float addrspace(1)* %0, i64 %278\l  %280 = load float, float addrspace(1)* %279, align 4, !tbaa !7\l  %281 = add nsw i32 %113, %276\l  %282 = sext i32 %281 to i64\l  %283 = getelementptr inbounds float, float addrspace(1)* %1, i64 %282\l  %284 = load float, float addrspace(1)* %283, align 4, !tbaa !7\l  %285 = fmul contract float %280, %284\l  %286 = fadd contract float %274, %285\l  %287 = getelementptr inbounds float, float addrspace(1)* %2, i64 %278\l  %288 = load float, float addrspace(1)* %287, align 4, !tbaa !7\l  %289 = getelementptr inbounds float, float addrspace(1)* %3, i64 %282\l  %290 = load float, float addrspace(1)* %289, align 4, !tbaa !7\l  %291 = fmul contract float %288, %290\l  %292 = fadd contract float %286, %291\l  %293 = add nuw nsw i32 %148, 8\l  %294 = add i32 %149, 8\l  %295 = icmp eq i32 %294, %72\l  br i1 %295, label %115, label %146, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5324ad0:s0 -> Node0x5324a80;
	Node0x5324ad0:s1 -> Node0x5324ad0;
	Node0x5323b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%296:\l296:                                              \l  %297 = phi i32 [ %145, %143 ], [ %96, %107 ], [ %96, %94 ]\l  %298 = phi float [ %144, %143 ], [ %95, %107 ], [ %95, %94 ]\l  %299 = add i32 %97, 1\l  %300 = icmp eq i32 %97, %69\l  br i1 %300, label %91, label %94, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5323b70:s0 -> Node0x5322680;
	Node0x5323b70:s1 -> Node0x5322e80;
	Node0x531e890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%301:\l301:                                              \l  ret void\l}"];
}
