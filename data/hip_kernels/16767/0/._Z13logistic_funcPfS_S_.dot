digraph "CFG for '_Z13logistic_funcPfS_S_' function" {
	label="CFG for '_Z13logistic_funcPfS_S_' function";

	Node0x606cba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = load i32, i32 addrspace(4)* @features, align 4, !tbaa !7\l  %14 = icmp sgt i32 %13, 0\l  br i1 %14, label %15, label %42\l|{<s0>T|<s1>F}}"];
	Node0x606cba0:s0 -> Node0x606e600;
	Node0x606cba0:s1 -> Node0x606e690;
	Node0x606e600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = mul nsw i32 %13, %12\l  %17 = and i32 %13, 7\l  %18 = icmp ult i32 %13, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x606e600:s0 -> Node0x606ea30;
	Node0x606e600:s1 -> Node0x606ea80;
	Node0x606ea80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %13, -8\l  br label %65\l}"];
	Node0x606ea80 -> Node0x606ec80;
	Node0x606ea30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %15 ], [ %147, %65 ]\l  %23 = phi float [ 0.000000e+00, %15 ], [ %147, %65 ]\l  %24 = phi i32 [ 0, %15 ], [ %148, %65 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %42, label %26\l|{<s0>T|<s1>F}}"];
	Node0x606ea30:s0 -> Node0x606e690;
	Node0x606ea30:s1 -> Node0x606fef0;
	Node0x606fef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi float [ %38, %26 ], [ %23, %21 ]\l  %28 = phi i32 [ %39, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %40, %26 ], [ 0, %21 ]\l  %30 = add nsw i32 %16, %28\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %34 = zext i32 %28 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %1, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %37 = fmul contract float %33, %36\l  %38 = fadd contract float %27, %37\l  %39 = add nuw nsw i32 %28, 1\l  %40 = add i32 %29, 1\l  %41 = icmp eq i32 %40, %17\l  br i1 %41, label %42, label %26, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x606fef0:s0 -> Node0x606e690;
	Node0x606fef0:s1 -> Node0x606fef0;
	Node0x606e690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%42:\l42:                                               \l  %43 = phi float [ 0.000000e+00, %3 ], [ %22, %21 ], [ %38, %26 ]\l  %44 = fneg contract float %43\l  %45 = fmul float %43, 0xBFF7154760000000\l  %46 = tail call float @llvm.rint.f32(float %45)\l  %47 = fcmp olt float %43, 0xC0562E4300000000\l  %48 = fcmp ogt float %43, 0x4059D1DA00000000\l  %49 = fneg float %45\l  %50 = tail call float @llvm.fma.f32(float %44, float 0x3FF7154760000000,\l... float %49)\l  %51 = tail call float @llvm.fma.f32(float %44, float 0x3E54AE0BE0000000,\l... float %50)\l  %52 = fsub float %45, %46\l  %53 = fadd float %51, %52\l  %54 = tail call float @llvm.exp2.f32(float %53)\l  %55 = fptosi float %46 to i32\l  %56 = tail call float @llvm.amdgcn.ldexp.f32(float %54, i32 %55)\l  %57 = select i1 %48, float 0.000000e+00, float %56\l  %58 = select i1 %47, float 0x7FF0000000000000, float %57\l  %59 = fpext float %58 to double\l  %60 = fadd contract double %59, 1.000000e+00\l  %61 = fdiv contract double 1.000000e+00, %60\l  %62 = fptrunc double %61 to float\l  %63 = sext i32 %12 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  store float %62, float addrspace(1)* %64, align 4, !tbaa !11\l  ret void\l}"];
	Node0x606ec80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%65:\l65:                                               \l  %66 = phi float [ 0.000000e+00, %19 ], [ %147, %65 ]\l  %67 = phi i32 [ 0, %19 ], [ %148, %65 ]\l  %68 = phi i32 [ 0, %19 ], [ %149, %65 ]\l  %69 = add nsw i32 %16, %67\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %73 = zext i32 %67 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %76 = fmul contract float %72, %75\l  %77 = fadd contract float %66, %76\l  %78 = or i32 %67, 1\l  %79 = add nsw i32 %16, %78\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %83 = zext i32 %78 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %86 = fmul contract float %82, %85\l  %87 = fadd contract float %77, %86\l  %88 = or i32 %67, 2\l  %89 = add nsw i32 %16, %88\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %93 = zext i32 %88 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %96 = fmul contract float %92, %95\l  %97 = fadd contract float %87, %96\l  %98 = or i32 %67, 3\l  %99 = add nsw i32 %16, %98\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %2, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %103 = zext i32 %98 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %1, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %102, %105\l  %107 = fadd contract float %97, %106\l  %108 = or i32 %67, 4\l  %109 = add nsw i32 %16, %108\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %113 = zext i32 %108 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %112, %115\l  %117 = fadd contract float %107, %116\l  %118 = or i32 %67, 5\l  %119 = add nsw i32 %16, %118\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %123 = zext i32 %118 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %122, %125\l  %127 = fadd contract float %117, %126\l  %128 = or i32 %67, 6\l  %129 = add nsw i32 %16, %128\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %2, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %133 = zext i32 %128 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %1, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %136 = fmul contract float %132, %135\l  %137 = fadd contract float %127, %136\l  %138 = or i32 %67, 7\l  %139 = add nsw i32 %16, %138\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %2, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %143 = zext i32 %138 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %1, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %146 = fmul contract float %142, %145\l  %147 = fadd contract float %137, %146\l  %148 = add nuw nsw i32 %67, 8\l  %149 = add i32 %68, 8\l  %150 = icmp eq i32 %149, %20\l  br i1 %150, label %21, label %65, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x606ec80:s0 -> Node0x606ea30;
	Node0x606ec80:s1 -> Node0x606ec80;
}
