digraph "CFG for '_Z12log_gradientPfS_S_S_Pi' function" {
	label="CFG for '_Z12log_gradientPfS_S_S_Pi' function";

	Node0x5a82090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = load i32, i32 addrspace(4)* @num_rows, align 4, !tbaa !7\l  %16 = icmp sgt i32 %15, 0\l  br i1 %16, label %17, label %49\l|{<s0>T|<s1>F}}"];
	Node0x5a82090:s0 -> Node0x5a82570;
	Node0x5a82090:s1 -> Node0x5a83c00;
	Node0x5a82570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = load i32, i32 addrspace(4)* @features, align 4, !tbaa !7\l  %19 = and i32 %15, 7\l  %20 = icmp ult i32 %15, 8\l  br i1 %20, label %23, label %21\l|{<s0>T|<s1>F}}"];
	Node0x5a82570:s0 -> Node0x5a844e0;
	Node0x5a82570:s1 -> Node0x5a84570;
	Node0x5a84570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %15, -8\l  br label %53\l}"];
	Node0x5a84570 -> Node0x5a84770;
	Node0x5a844e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = phi float [ undef, %17 ], [ %175, %53 ]\l  %25 = phi float [ 0.000000e+00, %17 ], [ %175, %53 ]\l  %26 = phi i32 [ 0, %17 ], [ %176, %53 ]\l  %27 = icmp eq i32 %19, 0\l  br i1 %27, label %49, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5a844e0:s0 -> Node0x5a83c00;
	Node0x5a844e0:s1 -> Node0x5a859e0;
	Node0x5a859e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi float [ %45, %28 ], [ %25, %23 ]\l  %30 = phi i32 [ %46, %28 ], [ %26, %23 ]\l  %31 = phi i32 [ %47, %28 ], [ 0, %23 ]\l  %32 = zext i32 %30 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %32\l  %36 = load i32, i32 addrspace(1)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %37 = sitofp i32 %36 to float\l  %38 = fsub contract float %34, %37\l  %39 = mul nsw i32 %18, %30\l  %40 = add nsw i32 %39, %14\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %44 = fmul contract float %38, %43\l  %45 = fadd contract float %29, %44\l  %46 = add nuw nsw i32 %30, 1\l  %47 = add i32 %31, 1\l  %48 = icmp eq i32 %47, %19\l  br i1 %48, label %49, label %28, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5a859e0:s0 -> Node0x5a83c00;
	Node0x5a859e0:s1 -> Node0x5a859e0;
	Node0x5a83c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%49:\l49:                                               \l  %50 = phi float [ 0.000000e+00, %5 ], [ %24, %23 ], [ %45, %28 ]\l  %51 = sext i32 %14 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  store float %50, float addrspace(1)* %52, align 4, !tbaa !11\l  ret void\l}"];
	Node0x5a84770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%53:\l53:                                               \l  %54 = phi float [ 0.000000e+00, %21 ], [ %175, %53 ]\l  %55 = phi i32 [ 0, %21 ], [ %176, %53 ]\l  %56 = phi i32 [ 0, %21 ], [ %177, %53 ]\l  %57 = zext i32 %55 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %57\l  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %62 = sitofp i32 %61 to float\l  %63 = fsub contract float %59, %62\l  %64 = mul nsw i32 %18, %55\l  %65 = add nsw i32 %64, %14\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %3, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %69 = fmul contract float %63, %68\l  %70 = fadd contract float %54, %69\l  %71 = or i32 %55, 1\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %72\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %77 = sitofp i32 %76 to float\l  %78 = fsub contract float %74, %77\l  %79 = mul nsw i32 %18, %71\l  %80 = add nsw i32 %79, %14\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %3, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %84 = fmul contract float %78, %83\l  %85 = fadd contract float %70, %84\l  %86 = or i32 %55, 2\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %87\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %92 = sitofp i32 %91 to float\l  %93 = fsub contract float %89, %92\l  %94 = mul nsw i32 %18, %86\l  %95 = add nsw i32 %94, %14\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %3, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %85, %99\l  %101 = or i32 %55, 3\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %102\l  %106 = load i32, i32 addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = sitofp i32 %106 to float\l  %108 = fsub contract float %104, %107\l  %109 = mul nsw i32 %18, %101\l  %110 = add nsw i32 %109, %14\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %3, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %114 = fmul contract float %108, %113\l  %115 = fadd contract float %100, %114\l  %116 = or i32 %55, 4\l  %117 = zext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %120 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %117\l  %121 = load i32, i32 addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %122 = sitofp i32 %121 to float\l  %123 = fsub contract float %119, %122\l  %124 = mul nsw i32 %18, %116\l  %125 = add nsw i32 %124, %14\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %3, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %129 = fmul contract float %123, %128\l  %130 = fadd contract float %115, %129\l  %131 = or i32 %55, 5\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %135 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %132\l  %136 = load i32, i32 addrspace(1)* %135, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %137 = sitofp i32 %136 to float\l  %138 = fsub contract float %134, %137\l  %139 = mul nsw i32 %18, %131\l  %140 = add nsw i32 %139, %14\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %3, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %144 = fmul contract float %138, %143\l  %145 = fadd contract float %130, %144\l  %146 = or i32 %55, 6\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %0, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %150 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %147\l  %151 = load i32, i32 addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %152 = sitofp i32 %151 to float\l  %153 = fsub contract float %149, %152\l  %154 = mul nsw i32 %18, %146\l  %155 = add nsw i32 %154, %14\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %3, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %153, %158\l  %160 = fadd contract float %145, %159\l  %161 = or i32 %55, 7\l  %162 = zext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %165 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %162\l  %166 = load i32, i32 addrspace(1)* %165, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %167 = sitofp i32 %166 to float\l  %168 = fsub contract float %164, %167\l  %169 = mul nsw i32 %18, %161\l  %170 = add nsw i32 %169, %14\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %3, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %174 = fmul contract float %168, %173\l  %175 = fadd contract float %160, %174\l  %176 = add nuw nsw i32 %55, 8\l  %177 = add i32 %56, 8\l  %178 = icmp eq i32 %177, %22\l  br i1 %178, label %23, label %53, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5a84770:s0 -> Node0x5a844e0;
	Node0x5a84770:s1 -> Node0x5a84770;
}
