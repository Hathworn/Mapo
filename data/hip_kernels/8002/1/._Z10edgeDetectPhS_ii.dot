digraph "CFG for '_Z10edgeDetectPhS_ii' function" {
	label="CFG for '_Z10edgeDetectPhS_ii' function";

	Node0x4abb760 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %13, 0\l  %23 = icmp slt i32 %13, %3\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %137\l|{<s0>T|<s1>F}}"];
	Node0x4abb760:s0 -> Node0x4abf230;
	Node0x4abb760:s1 -> Node0x4abf2c0;
	Node0x4abf230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%25:\l25:                                               \l  %26 = icmp sge i32 %21, %2\l  %27 = icmp slt i32 %21, 1\l  %28 = or i1 %26, %27\l  br i1 %28, label %137, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4abf230:s0 -> Node0x4abf2c0;
	Node0x4abf230:s1 -> Node0x4abf5e0;
	Node0x4abf5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%29:\l29:                                               \l  %30 = add nsw i32 %21, -1\l  %31 = add nsw i32 %13, -1\l  %32 = mul nsw i32 %30, %3\l  %33 = add nsw i32 %31, %32\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %34\l  %36 = load i8, i8 addrspace(1)* %35, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %37 = zext i8 %36 to i32\l  %38 = uitofp i8 %36 to double\l  %39 = add nsw i32 %13, %32\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %40\l  %42 = load i8, i8 addrspace(1)* %41, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %43 = zext i8 %42 to i32\l  %44 = mul nsw i32 %43, -2\l  %45 = add nuw nsw i32 %13, 1\l  %46 = add nsw i32 %45, %32\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %47\l  %49 = load i8, i8 addrspace(1)* %48, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %50 = zext i8 %49 to i32\l  %51 = sub nsw i32 0, %50\l  %52 = sitofp i32 %51 to double\l  %53 = fadd contract double %38, %52\l  %54 = add nuw nsw i32 %37, %50\l  %55 = sub nsw i32 %44, %54\l  %56 = sitofp i32 %55 to double\l  %57 = mul nsw i32 %21, %3\l  %58 = add nsw i32 %31, %57\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %59\l  %61 = load i8, i8 addrspace(1)* %60, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %62 = zext i8 %61 to i32\l  %63 = shl nuw nsw i32 %62, 1\l  %64 = sitofp i32 %63 to double\l  %65 = fadd contract double %53, %64\l  %66 = fadd contract double %65, 0.000000e+00\l  %67 = add nuw nsw i32 %13, 1\l  %68 = add nsw i32 %67, %57\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %69\l  %71 = load i8, i8 addrspace(1)* %70, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %72 = zext i8 %71 to i32\l  %73 = mul nsw i32 %72, -2\l  %74 = sitofp i32 %73 to double\l  %75 = fadd contract double %66, %74\l  %76 = add nuw nsw i32 %21, 1\l  %77 = mul nsw i32 %76, %3\l  %78 = add nsw i32 %31, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %79\l  %81 = load i8, i8 addrspace(1)* %80, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %82 = uitofp i8 %81 to double\l  %83 = fadd contract double %56, %82\l  %84 = fadd contract double %75, %82\l  %85 = add nsw i32 %13, %77\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %86\l  %88 = load i8, i8 addrspace(1)* %87, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %89 = zext i8 %88 to i32\l  %90 = fadd contract double %84, 0.000000e+00\l  %91 = shl nuw nsw i32 %89, 1\l  %92 = sitofp i32 %91 to double\l  %93 = fadd contract double %83, %92\l  %94 = add nuw nsw i32 %13, 1\l  %95 = add nsw i32 %94, %77\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %96\l  %98 = load i8, i8 addrspace(1)* %97, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %99 = zext i8 %98 to i32\l  %100 = sub nsw i32 0, %99\l  %101 = sitofp i32 %100 to double\l  %102 = fadd contract double %90, %101\l  %103 = uitofp i8 %98 to double\l  %104 = fadd contract double %93, %103\l  %105 = fmul contract double %102, %102\l  %106 = fmul contract double %104, %104\l  %107 = fadd contract double %105, %106\l  %108 = fcmp olt double %107, 0x1000000000000000\l  %109 = select i1 %108, double 0x4FF0000000000000, double 1.000000e+00\l  %110 = fmul double %107, %109\l  %111 = tail call double @llvm.amdgcn.rsq.f64(double %110)\l  %112 = fmul double %110, %111\l  %113 = fmul double %111, 5.000000e-01\l  %114 = fneg double %113\l  %115 = tail call double @llvm.fma.f64(double %114, double %112, double\l... 5.000000e-01)\l  %116 = tail call double @llvm.fma.f64(double %113, double %115, double %113)\l  %117 = tail call double @llvm.fma.f64(double %112, double %115, double %112)\l  %118 = fneg double %117\l  %119 = tail call double @llvm.fma.f64(double %118, double %117, double %110)\l  %120 = tail call double @llvm.fma.f64(double %119, double %116, double %117)\l  %121 = fneg double %120\l  %122 = tail call double @llvm.fma.f64(double %121, double %120, double %110)\l  %123 = tail call double @llvm.fma.f64(double %122, double %116, double %120)\l  %124 = select i1 %108, double 0x37F0000000000000, double 1.000000e+00\l  %125 = fmul double %124, %123\l  %126 = fcmp oeq double %110, 0.000000e+00\l  %127 = fcmp oeq double %110, 0x7FF0000000000000\l  %128 = or i1 %126, %127\l  %129 = select i1 %128, double %110, double %125\l  %130 = fptosi double %129 to i32\l  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 0)\l  %132 = tail call i32 @llvm.umin.i32(i32 %131, i32 255)\l  %133 = trunc i32 %132 to i8\l  %134 = add nsw i32 %57, %13\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %135\l  store i8 %133, i8 addrspace(1)* %136, align 1, !tbaa !7\l  br label %137\l}"];
	Node0x4abf5e0 -> Node0x4abf2c0;
	Node0x4abf2c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%137:\l137:                                              \l  ret void\l}"];
}
