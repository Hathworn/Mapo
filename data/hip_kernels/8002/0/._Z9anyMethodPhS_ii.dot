digraph "CFG for '_Z9anyMethodPhS_ii' function" {
	label="CFG for '_Z9anyMethodPhS_ii' function";

	Node0x620a270 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %13, -1\l  br i1 %22, label %23, label %118\l|{<s0>T|<s1>F}}"];
	Node0x620a270:s0 -> Node0x620dbd0;
	Node0x620a270:s1 -> Node0x620dc60;
	Node0x620dbd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e36c5570",label="{%23:\l23:                                               \l  %24 = icmp slt i32 %13, %2\l  %25 = icmp sgt i32 %21, -1\l  %26 = select i1 %24, i1 %25, i1 false\l  %27 = icmp slt i32 %21, %3\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %118\l|{<s0>T|<s1>F}}"];
	Node0x620dbd0:s0 -> Node0x620e0e0;
	Node0x620dbd0:s1 -> Node0x620dc60;
	Node0x620e0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%29:\l29:                                               \l  %30 = add nsw i32 %21, -1\l  %31 = mul nsw i32 %30, %2\l  %32 = add nsw i32 %13, -1\l  %33 = add nsw i32 %31, %32\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %34\l  %36 = load i8, i8 addrspace(1)* %35, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %37 = zext i8 %36 to i32\l  %38 = add nuw nsw i32 %13, 1\l  %39 = add nsw i32 %31, %38\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %40\l  %42 = load i8, i8 addrspace(1)* %41, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %43 = zext i8 %42 to i32\l  %44 = mul nsw i32 %21, %2\l  %45 = add nsw i32 %44, %32\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %46\l  %48 = load i8, i8 addrspace(1)* %47, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %49 = zext i8 %48 to i32\l  %50 = add nsw i32 %44, %38\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %51\l  %53 = load i8, i8 addrspace(1)* %52, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %54 = zext i8 %53 to i32\l  %55 = add nuw nsw i32 %21, 1\l  %56 = mul nsw i32 %55, %2\l  %57 = add nsw i32 %56, %32\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %58\l  %60 = load i8, i8 addrspace(1)* %59, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %61 = zext i8 %60 to i32\l  %62 = add nsw i32 %56, %38\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %63\l  %65 = load i8, i8 addrspace(1)* %64, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %66 = zext i8 %65 to i32\l  %67 = sub nsw i32 %54, %49\l  %68 = add nuw nsw i32 %37, %61\l  %69 = sub nsw i32 %43, %68\l  %70 = add nsw i32 %69, %66\l  %71 = add nsw i32 %56, %13\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %72\l  %74 = load i8, i8 addrspace(1)* %73, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %75 = zext i8 %74 to i32\l  %76 = sub nsw i32 %43, %75\l  %77 = shl nsw i32 %76, 1\l  %78 = add nuw nsw i32 %43, %37\l  %79 = add nuw nsw i32 %61, %66\l  %80 = sub nsw i32 %78, %79\l  %81 = add nsw i32 %80, %77\l  %82 = shl nsw i32 %67, 3\l  %83 = shl nsw i32 %70, 2\l  %84 = add nsw i32 %82, %83\l  %85 = trunc i32 %81 to i16\l  %86 = sdiv i16 %85, 5\l  %87 = sitofp i32 %84 to float\l  %88 = fmul contract float %87, %87\l  %89 = sitofp i16 %86 to float\l  %90 = fmul contract float %89, %89\l  %91 = fadd contract float %88, %90\l  %92 = fcmp olt float %91, 0x39F0000000000000\l  %93 = select i1 %92, float 0x41F0000000000000, float 1.000000e+00\l  %94 = fmul float %91, %93\l  %95 = tail call float @llvm.sqrt.f32(float %94)\l  %96 = bitcast float %95 to i32\l  %97 = add nsw i32 %96, -1\l  %98 = bitcast i32 %97 to float\l  %99 = add nsw i32 %96, 1\l  %100 = bitcast i32 %99 to float\l  %101 = tail call i1 @llvm.amdgcn.class.f32(float %94, i32 608)\l  %102 = select i1 %92, float 0x3EF0000000000000, float 1.000000e+00\l  %103 = fneg float %100\l  %104 = tail call float @llvm.fma.f32(float %103, float %95, float %94)\l  %105 = fcmp ogt float %104, 0.000000e+00\l  %106 = fneg float %98\l  %107 = tail call float @llvm.fma.f32(float %106, float %95, float %94)\l  %108 = fcmp ole float %107, 0.000000e+00\l  %109 = select i1 %108, float %98, float %95\l  %110 = select i1 %105, float %100, float %109\l  %111 = fmul float %102, %110\l  %112 = select i1 %101, float %94, float %111\l  %113 = fptosi float %112 to i32\l  %114 = trunc i32 %113 to i8\l  %115 = add nsw i32 %44, %13\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %116\l  store i8 %114, i8 addrspace(1)* %117, align 1, !tbaa !7\l  br label %118\l}"];
	Node0x620e0e0 -> Node0x620dc60;
	Node0x620dc60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%118:\l118:                                              \l  ret void\l}"];
}
