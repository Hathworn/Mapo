digraph "CFG for '_Z17fourier_transformPfS_iii' function" {
	label="CFG for '_Z17fourier_transformPfS_iii' function";

	Node0x4fe1270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp sgt i32 %2, 0\l  br i1 %15, label %16, label %187\l|{<s0>T|<s1>F}}"];
	Node0x4fe1270:s0 -> Node0x4fe3130;
	Node0x4fe1270:s1 -> Node0x4fe31c0;
	Node0x4fe3130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %3, 0\l  %18 = mul nsw i32 %14, %2\l  %19 = mul nsw i32 %14, %3\l  %20 = sitofp i32 %2 to double\l  br label %21\l}"];
	Node0x4fe3130 -> Node0x4fe35a0;
	Node0x4fe35a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%21:\l21:                                               \l  %22 = phi i32 [ 0, %16 ], [ %185, %180 ]\l  br i1 %17, label %23, label %180\l|{<s0>T|<s1>F}}"];
	Node0x4fe35a0:s0 -> Node0x4fe37d0;
	Node0x4fe35a0:s1 -> Node0x4fe3690;
	Node0x4fe37d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%23:\l23:                                               \l  %24 = add nsw i32 %22, %19\l  %25 = sitofp i32 %24 to double\l  br label %26\l}"];
	Node0x4fe37d0 -> Node0x4fe3a10;
	Node0x4fe3a10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi float [ 0.000000e+00, %23 ], [ %177, %153 ]\l  %28 = phi i32 [ 0, %23 ], [ %178, %153 ]\l  %29 = add nsw i32 %28, %18\l  %30 = sitofp i32 %29 to double\l  %31 = fmul contract double %30, 0x401921FB54442D18\l  %32 = fmul contract double %31, %25\l  %33 = fdiv contract double %32, %20\l  %34 = fptrunc double %33 to float\l  %35 = sext i32 %29 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !7\l  %38 = tail call float @llvm.fabs.f32(float %34)\l  %39 = fcmp olt float %38, 1.310720e+05\l  br i1 %39, label %40, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4fe3a10:s0 -> Node0x4fe51a0;
	Node0x4fe3a10:s1 -> Node0x4fe5230;
	Node0x4fe51a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%40:\l40:                                               \l  %41 = fmul float %38, 0x3FE45F3060000000\l  %42 = tail call float @llvm.rint.f32(float %41)\l  %43 = tail call float @llvm.fma.f32(float %42, float 0xBFF921FB40000000,\l... float %38)\l  %44 = tail call float @llvm.fma.f32(float %42, float 0xBE74442D00000000,\l... float %43)\l  %45 = tail call float @llvm.fma.f32(float %42, float 0xBCF8469880000000,\l... float %44)\l  %46 = fptosi float %42 to i32\l  br label %153\l}"];
	Node0x4fe51a0 -> Node0x4fe4550;
	Node0x4fe5230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%47:\l47:                                               \l  %48 = bitcast float %38 to i32\l  %49 = lshr i32 %48, 23\l  %50 = and i32 %48, 8388607\l  %51 = or i32 %50, 8388608\l  %52 = zext i32 %51 to i64\l  %53 = mul nuw nsw i64 %52, 4266746795\l  %54 = trunc i64 %53 to i32\l  %55 = lshr i64 %53, 32\l  %56 = mul nuw nsw i64 %52, 1011060801\l  %57 = add nuw nsw i64 %55, %56\l  %58 = trunc i64 %57 to i32\l  %59 = lshr i64 %57, 32\l  %60 = mul nuw nsw i64 %52, 3680671129\l  %61 = add nuw nsw i64 %59, %60\l  %62 = trunc i64 %61 to i32\l  %63 = lshr i64 %61, 32\l  %64 = mul nuw nsw i64 %52, 4113882560\l  %65 = add nuw nsw i64 %63, %64\l  %66 = trunc i64 %65 to i32\l  %67 = lshr i64 %65, 32\l  %68 = mul nuw nsw i64 %52, 4230436817\l  %69 = add nuw nsw i64 %67, %68\l  %70 = trunc i64 %69 to i32\l  %71 = lshr i64 %69, 32\l  %72 = mul nuw nsw i64 %52, 1313084713\l  %73 = add nuw nsw i64 %71, %72\l  %74 = trunc i64 %73 to i32\l  %75 = lshr i64 %73, 32\l  %76 = mul nuw nsw i64 %52, 2734261102\l  %77 = add nuw nsw i64 %75, %76\l  %78 = trunc i64 %77 to i32\l  %79 = lshr i64 %77, 32\l  %80 = trunc i64 %79 to i32\l  %81 = add nsw i32 %49, -120\l  %82 = icmp ugt i32 %81, 63\l  %83 = select i1 %82, i32 %74, i32 %80\l  %84 = select i1 %82, i32 %70, i32 %78\l  %85 = select i1 %82, i32 %66, i32 %74\l  %86 = select i1 %82, i32 %62, i32 %70\l  %87 = select i1 %82, i32 %58, i32 %66\l  %88 = select i1 %82, i32 %54, i32 %62\l  %89 = select i1 %82, i32 -64, i32 0\l  %90 = add nsw i32 %89, %81\l  %91 = icmp ugt i32 %90, 31\l  %92 = select i1 %91, i32 %84, i32 %83\l  %93 = select i1 %91, i32 %85, i32 %84\l  %94 = select i1 %91, i32 %86, i32 %85\l  %95 = select i1 %91, i32 %87, i32 %86\l  %96 = select i1 %91, i32 %88, i32 %87\l  %97 = select i1 %91, i32 -32, i32 0\l  %98 = add nsw i32 %97, %90\l  %99 = icmp ugt i32 %98, 31\l  %100 = select i1 %99, i32 %93, i32 %92\l  %101 = select i1 %99, i32 %94, i32 %93\l  %102 = select i1 %99, i32 %95, i32 %94\l  %103 = select i1 %99, i32 %96, i32 %95\l  %104 = select i1 %99, i32 -32, i32 0\l  %105 = add nsw i32 %104, %98\l  %106 = icmp eq i32 %105, 0\l  %107 = sub nsw i32 32, %105\l  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %107)\l  %109 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %107)\l  %110 = tail call i32 @llvm.fshr.i32(i32 %102, i32 %103, i32 %107)\l  %111 = select i1 %106, i32 %100, i32 %108\l  %112 = select i1 %106, i32 %101, i32 %109\l  %113 = select i1 %106, i32 %102, i32 %110\l  %114 = lshr i32 %111, 29\l  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 2)\l  %116 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %113, i32 2)\l  %117 = tail call i32 @llvm.fshl.i32(i32 %113, i32 %103, i32 2)\l  %118 = and i32 %114, 1\l  %119 = sub nsw i32 0, %118\l  %120 = shl i32 %114, 31\l  %121 = xor i32 %115, %119\l  %122 = xor i32 %116, %119\l  %123 = xor i32 %117, %119\l  %124 = tail call i32 @llvm.ctlz.i32(i32 %121, i1 false), !range !11\l  %125 = sub nsw i32 31, %124\l  %126 = tail call i32 @llvm.fshr.i32(i32 %121, i32 %122, i32 %125)\l  %127 = tail call i32 @llvm.fshr.i32(i32 %122, i32 %123, i32 %125)\l  %128 = shl nuw nsw i32 %124, 23\l  %129 = sub nuw nsw i32 1056964608, %128\l  %130 = lshr i32 %126, 9\l  %131 = or i32 %130, %129\l  %132 = or i32 %131, %120\l  %133 = bitcast i32 %132 to float\l  %134 = tail call i32 @llvm.fshl.i32(i32 %126, i32 %127, i32 23)\l  %135 = tail call i32 @llvm.ctlz.i32(i32 %134, i1 false), !range !11\l  %136 = fmul float %133, 0x3FF921FB40000000\l  %137 = add nuw nsw i32 %135, %124\l  %138 = shl nuw nsw i32 %137, 23\l  %139 = sub nuw nsw i32 855638016, %138\l  %140 = sub nsw i32 31, %135\l  %141 = tail call i32 @llvm.fshr.i32(i32 %134, i32 %127, i32 %140)\l  %142 = lshr i32 %141, 9\l  %143 = or i32 %139, %142\l  %144 = or i32 %143, %120\l  %145 = bitcast i32 %144 to float\l  %146 = fneg float %136\l  %147 = tail call float @llvm.fma.f32(float %133, float 0x3FF921FB40000000,\l... float %146)\l  %148 = tail call float @llvm.fma.f32(float %133, float 0x3E74442D00000000,\l... float %147)\l  %149 = tail call float @llvm.fma.f32(float %145, float 0x3FF921FB40000000,\l... float %148)\l  %150 = fadd float %136, %149\l  %151 = lshr i32 %111, 30\l  %152 = add nuw nsw i32 %118, %151\l  br label %153\l}"];
	Node0x4fe5230 -> Node0x4fe4550;
	Node0x4fe4550 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%153:\l153:                                              \l  %154 = phi float [ %45, %40 ], [ %150, %47 ]\l  %155 = phi i32 [ %46, %40 ], [ %152, %47 ]\l  %156 = fmul float %154, %154\l  %157 = tail call float @llvm.fmuladd.f32(float %156, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %158 = tail call float @llvm.fmuladd.f32(float %156, float %157, float\l... 0xBFC55553A0000000)\l  %159 = fmul float %156, %158\l  %160 = tail call float @llvm.fmuladd.f32(float %154, float %159, float %154)\l  %161 = tail call float @llvm.fmuladd.f32(float %156, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %162 = tail call float @llvm.fmuladd.f32(float %156, float %161, float\l... 0x3FA5557EE0000000)\l  %163 = tail call float @llvm.fmuladd.f32(float %156, float %162, float\l... 0xBFE0000080000000)\l  %164 = tail call float @llvm.fmuladd.f32(float %156, float %163, float\l... 1.000000e+00)\l  %165 = fneg float %160\l  %166 = and i32 %155, 1\l  %167 = icmp eq i32 %166, 0\l  %168 = select i1 %167, float %164, float %165\l  %169 = bitcast float %168 to i32\l  %170 = shl i32 %155, 30\l  %171 = and i32 %170, -2147483648\l  %172 = xor i32 %171, %169\l  %173 = bitcast i32 %172 to float\l  %174 = tail call i1 @llvm.amdgcn.class.f32(float %38, i32 504)\l  %175 = select i1 %174, float %173, float 0x7FF8000000000000\l  %176 = fmul contract float %37, %175\l  %177 = fadd contract float %27, %176\l  %178 = add nuw nsw i32 %28, 1\l  %179 = icmp eq i32 %178, %3\l  br i1 %179, label %180, label %26, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4fe4550:s0 -> Node0x4fe3690;
	Node0x4fe4550:s1 -> Node0x4fe3a10;
	Node0x4fe3690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%180:\l180:                                              \l  %181 = phi float [ 0.000000e+00, %21 ], [ %177, %153 ]\l  %182 = add nsw i32 %22, %18\l  %183 = sext i32 %182 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %1, i64 %183\l  store float %181, float addrspace(1)* %184, align 4, !tbaa !7\l  %185 = add nuw nsw i32 %22, 1\l  %186 = icmp eq i32 %185, %2\l  br i1 %186, label %187, label %21, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4fe3690:s0 -> Node0x4fe31c0;
	Node0x4fe3690:s1 -> Node0x4fe35a0;
	Node0x4fe31c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%187:\l187:                                              \l  ret void\l}"];
}
