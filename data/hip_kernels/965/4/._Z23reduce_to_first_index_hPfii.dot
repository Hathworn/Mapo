digraph "CFG for '_Z23reduce_to_first_index_hPfii' function" {
	label="CFG for '_Z23reduce_to_first_index_hPfii' function";

	Node0x5f60f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %105\l|{<s0>T|<s1>F}}"];
	Node0x5f60f60:s0 -> Node0x5f62e30;
	Node0x5f60f60:s1 -> Node0x5f62ec0;
	Node0x5f62e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%14:\l14:                                               \l  %15 = icmp sgt i32 %1, 0\l  br i1 %15, label %16, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5f62e30:s0 -> Node0x5f63090;
	Node0x5f62e30:s1 -> Node0x5f630e0;
	Node0x5f63090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%16:\l16:                                               \l  %17 = and i32 %1, 7\l  %18 = icmp ult i32 %1, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5f63090:s0 -> Node0x5f63450;
	Node0x5f63090:s1 -> Node0x5f634a0;
	Node0x5f634a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %1, -8\l  br label %43\l}"];
	Node0x5f634a0 -> Node0x5f63670;
	Node0x5f63450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %16 ], [ %101, %43 ]\l  %23 = phi i32 [ 0, %16 ], [ %102, %43 ]\l  %24 = phi float [ 0.000000e+00, %16 ], [ %101, %43 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %39, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5f63450:s0 -> Node0x5f630e0;
	Node0x5f63450:s1 -> Node0x5f648e0;
	Node0x5f648e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %36, %26 ], [ %23, %21 ]\l  %28 = phi float [ %35, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %37, %26 ], [ 0, %21 ]\l  %30 = mul nsw i32 %27, %2\l  %31 = add nsw i32 %30, %12\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %35 = fadd contract float %28, %34\l  %36 = add nuw nsw i32 %27, 1\l  %37 = add i32 %29, 1\l  %38 = icmp eq i32 %37, %17\l  br i1 %38, label %39, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5f648e0:s0 -> Node0x5f630e0;
	Node0x5f648e0:s1 -> Node0x5f648e0;
	Node0x5f630e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%39:\l39:                                               \l  %40 = phi float [ 0.000000e+00, %14 ], [ %22, %21 ], [ %35, %26 ]\l  %41 = sext i32 %12 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  store float %40, float addrspace(1)* %42, align 4, !tbaa !7\l  br label %105\l}"];
	Node0x5f630e0 -> Node0x5f62ec0;
	Node0x5f63670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %19 ], [ %102, %43 ]\l  %45 = phi float [ 0.000000e+00, %19 ], [ %101, %43 ]\l  %46 = phi i32 [ 0, %19 ], [ %103, %43 ]\l  %47 = mul nsw i32 %44, %2\l  %48 = add nsw i32 %47, %12\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fadd contract float %45, %51\l  %53 = or i32 %44, 1\l  %54 = mul nsw i32 %53, %2\l  %55 = add nsw i32 %54, %12\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = fadd contract float %52, %58\l  %60 = or i32 %44, 2\l  %61 = mul nsw i32 %60, %2\l  %62 = add nsw i32 %61, %12\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = fadd contract float %59, %65\l  %67 = or i32 %44, 3\l  %68 = mul nsw i32 %67, %2\l  %69 = add nsw i32 %68, %12\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = fadd contract float %66, %72\l  %74 = or i32 %44, 4\l  %75 = mul nsw i32 %74, %2\l  %76 = add nsw i32 %75, %12\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fadd contract float %73, %79\l  %81 = or i32 %44, 5\l  %82 = mul nsw i32 %81, %2\l  %83 = add nsw i32 %82, %12\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = fadd contract float %80, %86\l  %88 = or i32 %44, 6\l  %89 = mul nsw i32 %88, %2\l  %90 = add nsw i32 %89, %12\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fadd contract float %87, %93\l  %95 = or i32 %44, 7\l  %96 = mul nsw i32 %95, %2\l  %97 = add nsw i32 %96, %12\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = fadd contract float %94, %100\l  %102 = add nuw nsw i32 %44, 8\l  %103 = add i32 %46, 8\l  %104 = icmp eq i32 %103, %20\l  br i1 %104, label %21, label %43, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f63670:s0 -> Node0x5f63450;
	Node0x5f63670:s1 -> Node0x5f63670;
	Node0x5f62ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%105:\l105:                                              \l  ret void\l}"];
}
