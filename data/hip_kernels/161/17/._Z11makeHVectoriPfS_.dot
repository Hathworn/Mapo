digraph "CFG for '_Z11makeHVectoriPfS_' function" {
	label="CFG for '_Z11makeHVectoriPfS_' function";

	Node0x477e590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = icmp ult i32 %4, %0\l  br i1 %5, label %6, label %117\l|{<s0>T|<s1>F}}"];
	Node0x477e590:s0 -> Node0x477f400;
	Node0x477e590:s1 -> Node0x477f490;
	Node0x477f400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%6:\l6:                                                \l  %7 = icmp slt i32 %4, %0\l  br i1 %7, label %8, label %26\l|{<s0>T|<s1>F}}"];
	Node0x477f400:s0 -> Node0x477f660;
	Node0x477f400:s1 -> Node0x477f6b0;
	Node0x477f660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%8:\l8:                                                \l  %9 = icmp eq i32 %4, 0\l  br label %10\l}"];
	Node0x477f660 -> Node0x477f320;
	Node0x477f320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l10:                                               \l  %11 = phi float [ 0.000000e+00, %8 ], [ %23, %22 ]\l  %12 = phi i32 [ %4, %8 ], [ %24, %22 ]\l  %13 = icmp eq i32 %12, 0\l  %14 = select i1 %9, i1 %13, i1 false\l  br i1 %14, label %22, label %15\l|{<s0>T|<s1>F}}"];
	Node0x477f320:s0 -> Node0x47809e0;
	Node0x477f320:s1 -> Node0x4780db0;
	Node0x4780db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%15:\l15:                                               \l  %16 = zext i32 %12 to i64\l  %17 = getelementptr inbounds float, float addrspace(1)* %1, i64 %16\l  %18 = load float, float addrspace(1)* %17, align 4, !tbaa !5\l  %19 = getelementptr inbounds float, float addrspace(1)* %2, i64 %16\l  store float %18, float addrspace(1)* %19, align 4, !tbaa !5\l  %20 = fmul contract float %18, %18\l  %21 = fadd contract float %11, %20\l  br label %22\l}"];
	Node0x4780db0 -> Node0x47809e0;
	Node0x47809e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = phi float [ %11, %10 ], [ %21, %15 ]\l  %24 = add nuw nsw i32 %12, 512\l  %25 = icmp slt i32 %24, %0\l  br i1 %25, label %10, label %26, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x47809e0:s0 -> Node0x477f320;
	Node0x47809e0:s1 -> Node0x477f6b0;
	Node0x477f6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%26:\l26:                                               \l  %27 = phi float [ 0.000000e+00, %6 ], [ %23, %22 ]\l  %28 = getelementptr inbounds [512 x float], [512 x float] addrspace(3)*\l... @_ZZ11makeHVectoriPfS_E4sums, i32 0, i32 %4\l  store float %27, float addrspace(3)* %28, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %29 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %30 = getelementptr i8, i8 addrspace(4)* %29, i64 4\l  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*\l  %32 = load i16, i16 addrspace(4)* %31, align 4, !range !11, !invariant.load\l... !12\l  %33 = icmp ult i16 %32, 2\l  br i1 %33, label %50, label %34\l|{<s0>T|<s1>F}}"];
	Node0x477f6b0:s0 -> Node0x4780ff0;
	Node0x477f6b0:s1 -> Node0x4782ba0;
	Node0x4782ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%34:\l34:                                               \l  %35 = zext i16 %32 to i32\l  br label %36\l}"];
	Node0x4782ba0 -> Node0x4782d50;
	Node0x4782d50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi i32 [ %38, %48 ], [ %35, %34 ]\l  %38 = lshr i32 %37, 1\l  %39 = add nuw nsw i32 %38, %4\l  %40 = icmp ult i32 %4, %38\l  %41 = icmp slt i32 %39, %0\l  %42 = select i1 %40, i1 %41, i1 false\l  br i1 %42, label %43, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4782d50:s0 -> Node0x4783270;
	Node0x4782d50:s1 -> Node0x4782e10;
	Node0x4783270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%43:\l43:                                               \l  %44 = getelementptr inbounds [512 x float], [512 x float] addrspace(3)*\l... @_ZZ11makeHVectoriPfS_E4sums, i32 0, i32 %39\l  %45 = load float, float addrspace(3)* %44, align 4, !tbaa !5\l  %46 = load float, float addrspace(3)* %28, align 4, !tbaa !5\l  %47 = fadd contract float %45, %46\l  store float %47, float addrspace(3)* %28, align 4, !tbaa !5\l  br label %48\l}"];
	Node0x4783270 -> Node0x4782e10;
	Node0x4782e10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %49 = icmp ult i32 %37, 4\l  br i1 %49, label %50, label %36, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4782e10:s0 -> Node0x4780ff0;
	Node0x4782e10:s1 -> Node0x4782d50;
	Node0x4780ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%50:\l50:                                               \l  %51 = icmp eq i32 %4, 0\l  br i1 %51, label %52, label %106\l|{<s0>T|<s1>F}}"];
	Node0x4780ff0:s0 -> Node0x4783ae0;
	Node0x4780ff0:s1 -> Node0x4783b30;
	Node0x4783ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%52:\l52:                                               \l  %53 = load float, float addrspace(1)* %1, align 4, !tbaa !5\l  %54 = fmul contract float %53, %53\l  %55 = load float, float addrspace(3)* getelementptr inbounds ([512 x float],\l... [512 x float] addrspace(3)* @_ZZ11makeHVectoriPfS_E4sums, i32 0, i32 0),\l... align 16, !tbaa !5\l  %56 = fadd contract float %54, %55\l  %57 = fcmp olt float %56, 0x39F0000000000000\l  %58 = select i1 %57, float 0x41F0000000000000, float 1.000000e+00\l  %59 = fmul float %56, %58\l  %60 = tail call float @llvm.sqrt.f32(float %59)\l  %61 = bitcast float %60 to i32\l  %62 = add nsw i32 %61, -1\l  %63 = bitcast i32 %62 to float\l  %64 = add nsw i32 %61, 1\l  %65 = bitcast i32 %64 to float\l  %66 = tail call i1 @llvm.amdgcn.class.f32(float %59, i32 608)\l  %67 = select i1 %57, float 0x3EF0000000000000, float 1.000000e+00\l  %68 = fneg float %65\l  %69 = tail call float @llvm.fma.f32(float %68, float %60, float %59)\l  %70 = fcmp ogt float %69, 0.000000e+00\l  %71 = fneg float %63\l  %72 = tail call float @llvm.fma.f32(float %71, float %60, float %59)\l  %73 = fcmp ole float %72, 0.000000e+00\l  %74 = select i1 %73, float %63, float %60\l  %75 = select i1 %70, float %65, float %74\l  %76 = fmul float %67, %75\l  %77 = select i1 %66, float %59, float %76\l  %78 = fcmp contract ogt float %53, 0.000000e+00\l  %79 = fneg contract float %77\l  %80 = select i1 %78, float %77, float %79\l  %81 = fadd contract float %53, %80\l  store float %81, float addrspace(1)* %2, align 4, !tbaa !5\l  %82 = fmul contract float %81, %81\l  %83 = fadd contract float %55, %82\l  %84 = fdiv contract float 2.000000e+00, %83\l  %85 = fcmp olt float %84, 0x39F0000000000000\l  %86 = select i1 %85, float 0x41F0000000000000, float 1.000000e+00\l  %87 = fmul float %84, %86\l  %88 = tail call float @llvm.sqrt.f32(float %87)\l  %89 = bitcast float %88 to i32\l  %90 = add nsw i32 %89, -1\l  %91 = bitcast i32 %90 to float\l  %92 = add nsw i32 %89, 1\l  %93 = bitcast i32 %92 to float\l  %94 = tail call i1 @llvm.amdgcn.class.f32(float %87, i32 608)\l  %95 = select i1 %85, float 0x3EF0000000000000, float 1.000000e+00\l  %96 = fneg float %93\l  %97 = tail call float @llvm.fma.f32(float %96, float %88, float %87)\l  %98 = fcmp ogt float %97, 0.000000e+00\l  %99 = fneg float %91\l  %100 = tail call float @llvm.fma.f32(float %99, float %88, float %87)\l  %101 = fcmp ole float %100, 0.000000e+00\l  %102 = select i1 %101, float %91, float %88\l  %103 = select i1 %98, float %93, float %102\l  %104 = fmul float %95, %103\l  %105 = select i1 %94, float %87, float %104\l  store float %105, float addrspace(3)* @_ZZ11makeHVectoriPfS_E4beta, align 4,\l... !tbaa !5\l  br label %106\l}"];
	Node0x4783ae0 -> Node0x4783b30;
	Node0x4783b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%106:\l106:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %7, label %107, label %117\l|{<s0>T|<s1>F}}"];
	Node0x4783b30:s0 -> Node0x4786bc0;
	Node0x4783b30:s1 -> Node0x477f490;
	Node0x4786bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%107:\l107:                                              \l  %108 = load float, float addrspace(3)* @_ZZ11makeHVectoriPfS_E4beta, align\l... 4, !tbaa !5\l  br label %109\l}"];
	Node0x4786bc0 -> Node0x4786d30;
	Node0x4786d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%109:\l109:                                              \l  %110 = phi i32 [ %4, %107 ], [ %115, %109 ]\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %2, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !5\l  %114 = fmul contract float %108, %113\l  store float %114, float addrspace(1)* %112, align 4, !tbaa !5\l  %115 = add nuw nsw i32 %110, 512\l  %116 = icmp slt i32 %115, %0\l  br i1 %116, label %109, label %117, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4786d30:s0 -> Node0x4786d30;
	Node0x4786d30:s1 -> Node0x477f490;
	Node0x477f490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%117:\l117:                                              \l  ret void\l}"];
}
