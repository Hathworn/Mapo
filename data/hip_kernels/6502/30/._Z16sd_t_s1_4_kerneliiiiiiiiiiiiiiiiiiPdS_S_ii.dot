digraph "CFG for '_Z16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_ii' function" {
	label="CFG for '_Z16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_ii' function";

	Node0x5de17b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%23:\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %25 = mul nsw i32 %3, %0\l  %26 = icmp slt i32 %24, %25\l  br i1 %26, label %27, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5de17b0:s0 -> Node0x5de1d70;
	Node0x5de17b0:s1 -> Node0x5de1e00;
	Node0x5de1d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%27:\l27:                                               \l  %28 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %29 = getelementptr i8, i8 addrspace(4)* %28, i64 4\l  %30 = bitcast i8 addrspace(4)* %29 to i16 addrspace(4)*\l  %31 = load i16, i16 addrspace(4)* %30, align 4, !range !5, !invariant.load !6\l  %32 = zext i16 %31 to i32\l  br label %59\l}"];
	Node0x5de1d70 -> Node0x5de1890;
	Node0x5de1e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%33:\l33:                                               \l  %34 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %35 = shl nsw i32 %34, 8\l  %36 = add i32 %35, %24\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %37 = icmp sgt i32 %22, 0\l  br i1 %37, label %38, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5de1e00:s0 -> Node0x5de48d0;
	Node0x5de1e00:s1 -> Node0x5de4960;
	Node0x5de48d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%38:\l38:                                               \l  %39 = icmp slt i32 %0, 1\l  %40 = icmp sgt i32 %3, 0\l  %41 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %42 = getelementptr inbounds i8, i8 addrspace(4)* %41, i64 12\l  %43 = bitcast i8 addrspace(4)* %42 to i32 addrspace(4)*\l  %44 = load i32, i32 addrspace(4)* %43, align 4, !tbaa !7\l  %45 = getelementptr i8, i8 addrspace(4)* %41, i64 4\l  %46 = bitcast i8 addrspace(4)* %45 to i16 addrspace(4)*\l  %47 = load i16, i16 addrspace(4)* %46, align 4, !range !5, !invariant.load !6\l  %48 = zext i16 %47 to i32\l  %49 = udiv i32 %44, %48\l  %50 = mul i32 %49, %48\l  %51 = icmp ugt i32 %44, %50\l  %52 = zext i1 %51 to i32\l  %53 = add i32 %49, %52\l  %54 = mul i32 %53, %48\l  %55 = and i32 %3, 3\l  %56 = icmp ult i32 %3, 4\l  %57 = and i32 %3, -4\l  %58 = icmp eq i32 %55, 0\l  br label %68\l}"];
	Node0x5de48d0 -> Node0x5de63e0;
	Node0x5de1890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%59:\l59:                                               \l  %60 = phi i32 [ %24, %27 ], [ %65, %59 ]\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds double, double addrspace(1)* %19, i64 %61\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %64 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %60\l  store double %63, double addrspace(3)* %64, align 8, !tbaa !16\l  %65 = add i32 %60, %32\l  %66 = icmp slt i32 %65, %25\l  br i1 %66, label %59, label %33, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5de1890:s0 -> Node0x5de1890;
	Node0x5de1890:s1 -> Node0x5de1e00;
	Node0x5de4960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%67:\l67:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
	Node0x5de63e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%68:\l68:                                               \l  %69 = phi i32 [ 0, %38 ], [ %188, %187 ]\l  %70 = phi i32 [ %36, %38 ], [ %82, %187 ]\l  %71 = add nsw i32 %69, %70\l  %72 = freeze i32 %71\l  %73 = freeze i32 %2\l  %74 = sdiv i32 %72, %73\l  %75 = mul i32 %74, %73\l  %76 = sub i32 %72, %75\l  %77 = freeze i32 %1\l  %78 = sdiv i32 %74, %77\l  %79 = mul i32 %78, %77\l  %80 = sub i32 %74, %79\l  %81 = freeze i32 %5\l  %82 = sdiv i32 %78, %81\l  %83 = mul i32 %82, %81\l  %84 = sub i32 %78, %83\l  %85 = srem i32 %82, %4\l  %86 = add nsw i32 %69, %36\l  %87 = icmp sge i32 %86, %22\l  %88 = select i1 %87, i1 true, i1 %39\l  br i1 %88, label %187, label %89\l|{<s0>T|<s1>F}}"];
	Node0x5de63e0:s0 -> Node0x5de7730;
	Node0x5de63e0:s1 -> Node0x5de8310;
	Node0x5de8310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%89:\l89:                                               \l  %90 = mul nsw i32 %76, %8\l  %91 = mul nsw i32 %80, %9\l  %92 = add nsw i32 %91, %90\l  %93 = mul nsw i32 %84, %10\l  %94 = add nsw i32 %92, %93\l  %95 = mul nsw i32 %85, %11\l  %96 = add nsw i32 %94, %95\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %20, i64 %97\l  %99 = mul nsw i32 %76, %12\l  %100 = mul nsw i32 %80, %13\l  %101 = add nsw i32 %100, %99\l  %102 = mul nsw i32 %84, %15\l  %103 = mul nsw i32 %85, %16\l  %104 = add i32 %101, %102\l  %105 = add i32 %104, %103\l  br label %106\l}"];
	Node0x5de8310 -> Node0x5de8d00;
	Node0x5de8d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%106:\l106:                                              \l  %107 = phi i32 [ 0, %89 ], [ %185, %184 ]\l  br i1 %40, label %108, label %184\l|{<s0>T|<s1>F}}"];
	Node0x5de8d00:s0 -> Node0x5de8f30;
	Node0x5de8d00:s1 -> Node0x5de8df0;
	Node0x5de8f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%108:\l108:                                              \l  %109 = mul nsw i32 %107, %3\l  %110 = mul nsw i32 %107, %14\l  %111 = add i32 %105, %110\l  br i1 %56, label %165, label %112\l|{<s0>T|<s1>F}}"];
	Node0x5de8f30:s0 -> Node0x5de9220;
	Node0x5de8f30:s1 -> Node0x5de9270;
	Node0x5de9270 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%112:\l112:                                              \l  %113 = phi i32 [ %162, %112 ], [ 0, %108 ]\l  %114 = phi i32 [ %163, %112 ], [ 0, %108 ]\l  %115 = add nsw i32 %113, %109\l  %116 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %115\l  %117 = load double, double addrspace(3)* %116, align 8, !tbaa !16\l  %118 = load double, double addrspace(1)* %98, align 8, !tbaa !16\l  %119 = fmul contract double %117, %118\l  %120 = mul nsw i32 %113, %17\l  %121 = add i32 %111, %120\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds double, double addrspace(1)* %18, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !16\l  %125 = fsub contract double %124, %119\l  store double %125, double addrspace(1)* %123, align 8, !tbaa !16\l  %126 = or i32 %113, 1\l  %127 = add nsw i32 %126, %109\l  %128 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %127\l  %129 = load double, double addrspace(3)* %128, align 8, !tbaa !16\l  %130 = load double, double addrspace(1)* %98, align 8, !tbaa !16\l  %131 = fmul contract double %129, %130\l  %132 = mul nsw i32 %126, %17\l  %133 = add i32 %111, %132\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds double, double addrspace(1)* %18, i64 %134\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !16\l  %137 = fsub contract double %136, %131\l  store double %137, double addrspace(1)* %135, align 8, !tbaa !16\l  %138 = or i32 %113, 2\l  %139 = add nsw i32 %138, %109\l  %140 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %139\l  %141 = load double, double addrspace(3)* %140, align 8, !tbaa !16\l  %142 = load double, double addrspace(1)* %98, align 8, !tbaa !16\l  %143 = fmul contract double %141, %142\l  %144 = mul nsw i32 %138, %17\l  %145 = add i32 %111, %144\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds double, double addrspace(1)* %18, i64 %146\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !16\l  %149 = fsub contract double %148, %143\l  store double %149, double addrspace(1)* %147, align 8, !tbaa !16\l  %150 = or i32 %113, 3\l  %151 = add nsw i32 %150, %109\l  %152 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %151\l  %153 = load double, double addrspace(3)* %152, align 8, !tbaa !16\l  %154 = load double, double addrspace(1)* %98, align 8, !tbaa !16\l  %155 = fmul contract double %153, %154\l  %156 = mul nsw i32 %150, %17\l  %157 = add i32 %111, %156\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds double, double addrspace(1)* %18, i64 %158\l  %160 = load double, double addrspace(1)* %159, align 8, !tbaa !16\l  %161 = fsub contract double %160, %155\l  store double %161, double addrspace(1)* %159, align 8, !tbaa !16\l  %162 = add nuw nsw i32 %113, 4\l  %163 = add i32 %114, 4\l  %164 = icmp eq i32 %163, %57\l  br i1 %164, label %165, label %112, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5de9270:s0 -> Node0x5de9220;
	Node0x5de9270:s1 -> Node0x5de9270;
	Node0x5de9220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%165:\l165:                                              \l  %166 = phi i32 [ 0, %108 ], [ %162, %112 ]\l  br i1 %58, label %184, label %167\l|{<s0>T|<s1>F}}"];
	Node0x5de9220:s0 -> Node0x5de8df0;
	Node0x5de9220:s1 -> Node0x5deb990;
	Node0x5deb990 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%167:\l167:                                              \l  %168 = phi i32 [ %181, %167 ], [ %166, %165 ]\l  %169 = phi i32 [ %182, %167 ], [ 0, %165 ]\l  %170 = add nsw i32 %168, %109\l  %171 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_4_kerneliiiiiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %170\l  %172 = load double, double addrspace(3)* %171, align 8, !tbaa !16\l  %173 = load double, double addrspace(1)* %98, align 8, !tbaa !16\l  %174 = fmul contract double %172, %173\l  %175 = mul nsw i32 %168, %17\l  %176 = add i32 %111, %175\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds double, double addrspace(1)* %18, i64 %177\l  %179 = load double, double addrspace(1)* %178, align 8, !tbaa !16\l  %180 = fsub contract double %179, %174\l  store double %180, double addrspace(1)* %178, align 8, !tbaa !16\l  %181 = add nuw nsw i32 %168, 1\l  %182 = add i32 %169, 1\l  %183 = icmp eq i32 %182, %55\l  br i1 %183, label %184, label %167, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5deb990:s0 -> Node0x5de8df0;
	Node0x5deb990:s1 -> Node0x5deb990;
	Node0x5de8df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%184:\l184:                                              \l  %185 = add nuw nsw i32 %107, 1\l  %186 = icmp eq i32 %185, %0\l  br i1 %186, label %187, label %106, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5de8df0:s0 -> Node0x5de7730;
	Node0x5de8df0:s1 -> Node0x5de8d00;
	Node0x5de7730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%187:\l187:                                              \l  %188 = add i32 %54, %69\l  %189 = icmp slt i32 %188, %22\l  br i1 %189, label %68, label %67, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5de7730:s0 -> Node0x5de63e0;
	Node0x5de7730:s1 -> Node0x5de4960;
}
