digraph "CFG for '_Z16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_ii' function" {
	label="CFG for '_Z16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_ii' function";

	Node0x4d64730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%20:\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %22 = mul nsw i32 %3, %0\l  %23 = icmp slt i32 %21, %22\l  br i1 %23, label %24, label %30\l|{<s0>T|<s1>F}}"];
	Node0x4d64730:s0 -> Node0x4d64cf0;
	Node0x4d64730:s1 -> Node0x4d66030;
	Node0x4d64cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%24:\l24:                                               \l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 4, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  br label %56\l}"];
	Node0x4d64cf0 -> Node0x4d66e80;
	Node0x4d66030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%30:\l30:                                               \l  %31 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %32 = shl nsw i32 %31, 8\l  %33 = add i32 %32, %21\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %34 = icmp sgt i32 %19, 0\l  br i1 %34, label %35, label %64\l|{<s0>T|<s1>F}}"];
	Node0x4d66030:s0 -> Node0x4d67730;
	Node0x4d66030:s1 -> Node0x4d677c0;
	Node0x4d67730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%35:\l35:                                               \l  %36 = icmp slt i32 %0, 1\l  %37 = icmp sgt i32 %3, 0\l  %38 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %39 = getelementptr inbounds i8, i8 addrspace(4)* %38, i64 12\l  %40 = bitcast i8 addrspace(4)* %39 to i32 addrspace(4)*\l  %41 = load i32, i32 addrspace(4)* %40, align 4, !tbaa !7\l  %42 = getelementptr i8, i8 addrspace(4)* %38, i64 4\l  %43 = bitcast i8 addrspace(4)* %42 to i16 addrspace(4)*\l  %44 = load i16, i16 addrspace(4)* %43, align 4, !range !5, !invariant.load !6\l  %45 = zext i16 %44 to i32\l  %46 = udiv i32 %41, %45\l  %47 = mul i32 %46, %45\l  %48 = icmp ugt i32 %41, %47\l  %49 = zext i1 %48 to i32\l  %50 = add i32 %46, %49\l  %51 = mul i32 %50, %45\l  %52 = and i32 %3, 3\l  %53 = icmp ult i32 %3, 4\l  %54 = and i32 %3, -4\l  %55 = icmp eq i32 %52, 0\l  br label %65\l}"];
	Node0x4d67730 -> Node0x4d69240;
	Node0x4d66e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%56:\l56:                                               \l  %57 = phi i32 [ %21, %24 ], [ %62, %56 ]\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds double, double addrspace(1)* %16, i64 %58\l  %60 = load double, double addrspace(1)* %59, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %61 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %57\l  store double %60, double addrspace(3)* %61, align 8, !tbaa !16\l  %62 = add i32 %57, %29\l  %63 = icmp slt i32 %62, %22\l  br i1 %63, label %56, label %30, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4d66e80:s0 -> Node0x4d66e80;
	Node0x4d66e80:s1 -> Node0x4d66030;
	Node0x4d677c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%64:\l64:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
	Node0x4d69240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%65:\l65:                                               \l  %66 = phi i32 [ 0, %35 ], [ %177, %176 ]\l  %67 = phi i32 [ %33, %35 ], [ %75, %176 ]\l  %68 = add nsw i32 %66, %67\l  %69 = freeze i32 %68\l  %70 = freeze i32 %2\l  %71 = sdiv i32 %69, %70\l  %72 = mul i32 %71, %70\l  %73 = sub i32 %69, %72\l  %74 = freeze i32 %1\l  %75 = sdiv i32 %71, %74\l  %76 = mul i32 %75, %74\l  %77 = sub i32 %71, %76\l  %78 = srem i32 %75, %4\l  %79 = add nsw i32 %66, %33\l  %80 = icmp sge i32 %79, %19\l  %81 = select i1 %80, i1 true, i1 %36\l  br i1 %81, label %176, label %82\l|{<s0>T|<s1>F}}"];
	Node0x4d69240:s0 -> Node0x4d67370;
	Node0x4d69240:s1 -> Node0x4d6af40;
	Node0x4d6af40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%82:\l82:                                               \l  %83 = mul nsw i32 %73, %7\l  %84 = mul nsw i32 %77, %8\l  %85 = add nsw i32 %84, %83\l  %86 = mul nsw i32 %78, %9\l  %87 = add nsw i32 %85, %86\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %17, i64 %88\l  %90 = mul nsw i32 %73, %10\l  %91 = mul nsw i32 %77, %11\l  %92 = add nsw i32 %91, %90\l  %93 = mul nsw i32 %78, %13\l  %94 = add i32 %92, %93\l  br label %95\l}"];
	Node0x4d6af40 -> Node0x4d6b6f0;
	Node0x4d6b6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%95:\l95:                                               \l  %96 = phi i32 [ 0, %82 ], [ %174, %173 ]\l  br i1 %37, label %97, label %173\l|{<s0>T|<s1>F}}"];
	Node0x4d6b6f0:s0 -> Node0x4d6b920;
	Node0x4d6b6f0:s1 -> Node0x4d6b7e0;
	Node0x4d6b920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%97:\l97:                                               \l  %98 = mul nsw i32 %96, %3\l  %99 = mul nsw i32 %96, %12\l  %100 = add i32 %94, %99\l  br i1 %53, label %154, label %101\l|{<s0>T|<s1>F}}"];
	Node0x4d6b920:s0 -> Node0x4d6bc10;
	Node0x4d6b920:s1 -> Node0x4d6bc60;
	Node0x4d6bc60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%101:\l101:                                              \l  %102 = phi i32 [ %151, %101 ], [ 0, %97 ]\l  %103 = phi i32 [ %152, %101 ], [ 0, %97 ]\l  %104 = add nsw i32 %102, %98\l  %105 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %104\l  %106 = load double, double addrspace(3)* %105, align 8, !tbaa !16\l  %107 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %108 = fmul contract double %106, %107\l  %109 = mul nsw i32 %102, %14\l  %110 = add i32 %100, %109\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds double, double addrspace(1)* %15, i64 %111\l  %113 = load double, double addrspace(1)* %112, align 8, !tbaa !16\l  %114 = fadd contract double %113, %108\l  store double %114, double addrspace(1)* %112, align 8, !tbaa !16\l  %115 = or i32 %102, 1\l  %116 = add nsw i32 %115, %98\l  %117 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %116\l  %118 = load double, double addrspace(3)* %117, align 8, !tbaa !16\l  %119 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %120 = fmul contract double %118, %119\l  %121 = mul nsw i32 %115, %14\l  %122 = add i32 %100, %121\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds double, double addrspace(1)* %15, i64 %123\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !16\l  %126 = fadd contract double %125, %120\l  store double %126, double addrspace(1)* %124, align 8, !tbaa !16\l  %127 = or i32 %102, 2\l  %128 = add nsw i32 %127, %98\l  %129 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %128\l  %130 = load double, double addrspace(3)* %129, align 8, !tbaa !16\l  %131 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %132 = fmul contract double %130, %131\l  %133 = mul nsw i32 %127, %14\l  %134 = add i32 %100, %133\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds double, double addrspace(1)* %15, i64 %135\l  %137 = load double, double addrspace(1)* %136, align 8, !tbaa !16\l  %138 = fadd contract double %137, %132\l  store double %138, double addrspace(1)* %136, align 8, !tbaa !16\l  %139 = or i32 %102, 3\l  %140 = add nsw i32 %139, %98\l  %141 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %140\l  %142 = load double, double addrspace(3)* %141, align 8, !tbaa !16\l  %143 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %144 = fmul contract double %142, %143\l  %145 = mul nsw i32 %139, %14\l  %146 = add i32 %100, %145\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds double, double addrspace(1)* %15, i64 %147\l  %149 = load double, double addrspace(1)* %148, align 8, !tbaa !16\l  %150 = fadd contract double %149, %144\l  store double %150, double addrspace(1)* %148, align 8, !tbaa !16\l  %151 = add nuw nsw i32 %102, 4\l  %152 = add i32 %103, 4\l  %153 = icmp eq i32 %152, %54\l  br i1 %153, label %154, label %101, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4d6bc60:s0 -> Node0x4d6bc10;
	Node0x4d6bc60:s1 -> Node0x4d6bc60;
	Node0x4d6bc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%154:\l154:                                              \l  %155 = phi i32 [ 0, %97 ], [ %151, %101 ]\l  br i1 %55, label %173, label %156\l|{<s0>T|<s1>F}}"];
	Node0x4d6bc10:s0 -> Node0x4d6b7e0;
	Node0x4d6bc10:s1 -> Node0x4d6e3a0;
	Node0x4d6e3a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%156:\l156:                                              \l  %157 = phi i32 [ %170, %156 ], [ %155, %154 ]\l  %158 = phi i32 [ %171, %156 ], [ 0, %154 ]\l  %159 = add nsw i32 %157, %98\l  %160 = getelementptr inbounds [512 x double], [512 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_7_kerneliiiiiiiiiiiiiiiPdS_S_iiE6t2_shm, i32 0, i32 %159\l  %161 = load double, double addrspace(3)* %160, align 8, !tbaa !16\l  %162 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %163 = fmul contract double %161, %162\l  %164 = mul nsw i32 %157, %14\l  %165 = add i32 %100, %164\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds double, double addrspace(1)* %15, i64 %166\l  %168 = load double, double addrspace(1)* %167, align 8, !tbaa !16\l  %169 = fadd contract double %168, %163\l  store double %169, double addrspace(1)* %167, align 8, !tbaa !16\l  %170 = add nuw nsw i32 %157, 1\l  %171 = add i32 %158, 1\l  %172 = icmp eq i32 %171, %52\l  br i1 %172, label %173, label %156, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4d6e3a0:s0 -> Node0x4d6b7e0;
	Node0x4d6e3a0:s1 -> Node0x4d6e3a0;
	Node0x4d6b7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%173:\l173:                                              \l  %174 = add nuw nsw i32 %96, 1\l  %175 = icmp eq i32 %174, %0\l  br i1 %175, label %176, label %95, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x4d6b7e0:s0 -> Node0x4d67370;
	Node0x4d6b7e0:s1 -> Node0x4d6b6f0;
	Node0x4d67370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%176:\l176:                                              \l  %177 = add i32 %51, %66\l  %178 = icmp slt i32 %177, %19\l  br i1 %178, label %65, label %64, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4d67370:s0 -> Node0x4d69240;
	Node0x4d67370:s1 -> Node0x4d677c0;
}
