digraph "CFG for '_Z16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mm' function" {
	label="CFG for '_Z16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mm' function";

	Node0x51d1790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%23:\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %25 = zext i32 %24 to i64\l  %26 = mul i64 %3, %0\l  %27 = icmp ugt i64 %26, %25\l  br i1 %27, label %28, label %34\l|{<s0>T|<s1>F}}"];
	Node0x51d1790:s0 -> Node0x51d1dc0;
	Node0x51d1790:s1 -> Node0x51d3250;
	Node0x51d1dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%28:\l28:                                               \l  %29 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %30 = getelementptr i8, i8 addrspace(4)* %29, i64 4\l  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*\l  %32 = load i16, i16 addrspace(4)* %31, align 4, !range !5, !invariant.load !6\l  %33 = zext i16 %32 to i64\l  br label %62\l}"];
	Node0x51d1dc0 -> Node0x51d18e0;
	Node0x51d3250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%34:\l34:                                               \l  %35 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %36 = zext i32 %35 to i64\l  %37 = shl nuw nsw i64 %36, 8\l  %38 = add nuw nsw i64 %37, %25\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %39 = icmp eq i64 %22, 0\l  br i1 %39, label %70, label %40\l|{<s0>T|<s1>F}}"];
	Node0x51d3250:s0 -> Node0x51d4980;
	Node0x51d3250:s1 -> Node0x51d4a10;
	Node0x51d4a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%40:\l40:                                               \l  %41 = icmp eq i64 %0, 0\l  %42 = icmp eq i64 %3, 0\l  %43 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %44 = getelementptr inbounds i8, i8 addrspace(4)* %43, i64 12\l  %45 = bitcast i8 addrspace(4)* %44 to i32 addrspace(4)*\l  %46 = load i32, i32 addrspace(4)* %45, align 4, !tbaa !7\l  %47 = getelementptr i8, i8 addrspace(4)* %43, i64 4\l  %48 = bitcast i8 addrspace(4)* %47 to i16 addrspace(4)*\l  %49 = load i16, i16 addrspace(4)* %48, align 4, !range !5, !invariant.load !6\l  %50 = zext i16 %49 to i32\l  %51 = udiv i32 %46, %50\l  %52 = mul i32 %51, %50\l  %53 = icmp ugt i32 %46, %52\l  %54 = zext i1 %53 to i32\l  %55 = add i32 %51, %54\l  %56 = mul i32 %55, %50\l  %57 = zext i32 %56 to i64\l  %58 = and i64 %3, 3\l  %59 = icmp ult i64 %3, 4\l  %60 = and i64 %3, -4\l  %61 = icmp eq i64 %58, 0\l  br label %71\l}"];
	Node0x51d4a10 -> Node0x51d64a0;
	Node0x51d18e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%62:\l62:                                               \l  %63 = phi i64 [ %25, %28 ], [ %68, %62 ]\l  %64 = getelementptr inbounds double, double addrspace(1)* %19, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %66 = trunc i64 %63 to i32\l  %67 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mmE6t2_shm, i32 0, i32 %66\l  store double %65, double addrspace(3)* %67, align 8, !tbaa !16\l  %68 = add i64 %63, %33\l  %69 = icmp ult i64 %68, %26\l  br i1 %69, label %62, label %34, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x51d18e0:s0 -> Node0x51d18e0;
	Node0x51d18e0:s1 -> Node0x51d3250;
	Node0x51d4980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%70:\l70:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
	Node0x51d64a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%71:\l71:                                               \l  %72 = phi i64 [ 0, %40 ], [ %190, %189 ]\l  %73 = phi i64 [ %38, %40 ], [ %85, %189 ]\l  %74 = add i64 %72, %73\l  %75 = freeze i64 %74\l  %76 = freeze i64 %2\l  %77 = udiv i64 %75, %76\l  %78 = mul i64 %77, %76\l  %79 = sub i64 %75, %78\l  %80 = freeze i64 %1\l  %81 = udiv i64 %77, %80\l  %82 = mul i64 %81, %80\l  %83 = sub i64 %77, %82\l  %84 = freeze i64 %5\l  %85 = udiv i64 %81, %84\l  %86 = mul i64 %85, %84\l  %87 = sub i64 %81, %86\l  %88 = urem i64 %85, %4\l  %89 = add i64 %72, %38\l  %90 = icmp uge i64 %89, %22\l  %91 = select i1 %90, i1 true, i1 %41\l  br i1 %91, label %189, label %92\l|{<s0>T|<s1>F}}"];
	Node0x51d64a0:s0 -> Node0x51d7800;
	Node0x51d64a0:s1 -> Node0x51d83e0;
	Node0x51d83e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%92:\l92:                                               \l  %93 = mul i64 %79, %8\l  %94 = mul i64 %83, %9\l  %95 = add i64 %94, %93\l  %96 = mul i64 %87, %10\l  %97 = add i64 %95, %96\l  %98 = mul i64 %88, %11\l  %99 = add i64 %97, %98\l  %100 = getelementptr inbounds double, double addrspace(1)* %20, i64 %99\l  %101 = mul i64 %79, %12\l  %102 = mul i64 %83, %13\l  %103 = add i64 %102, %101\l  %104 = mul i64 %87, %15\l  %105 = mul i64 %88, %16\l  %106 = add i64 %103, %104\l  %107 = add i64 %106, %105\l  br label %108\l}"];
	Node0x51d83e0 -> Node0x51d8d60;
	Node0x51d8d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%108:\l108:                                              \l  %109 = phi i64 [ 0, %92 ], [ %187, %186 ]\l  br i1 %42, label %186, label %110\l|{<s0>T|<s1>F}}"];
	Node0x51d8d60:s0 -> Node0x51d8e50;
	Node0x51d8d60:s1 -> Node0x51d8f90;
	Node0x51d8f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%110:\l110:                                              \l  %111 = mul i64 %109, %3\l  %112 = mul i64 %109, %14\l  %113 = add i64 %107, %112\l  br i1 %59, label %167, label %114\l|{<s0>T|<s1>F}}"];
	Node0x51d8f90:s0 -> Node0x51d9280;
	Node0x51d8f90:s1 -> Node0x51d92d0;
	Node0x51d92d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%114:\l114:                                              \l  %115 = phi i64 [ %164, %114 ], [ 0, %110 ]\l  %116 = phi i64 [ %165, %114 ], [ 0, %110 ]\l  %117 = add i64 %115, %111\l  %118 = trunc i64 %117 to i32\l  %119 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mmE6t2_shm, i32 0, i32 %118\l  %120 = load double, double addrspace(3)* %119, align 8, !tbaa !16\l  %121 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %122 = fmul contract double %120, %121\l  %123 = mul i64 %115, %17\l  %124 = add i64 %113, %123\l  %125 = getelementptr inbounds double, double addrspace(1)* %18, i64 %124\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !16\l  %127 = fadd contract double %126, %122\l  store double %127, double addrspace(1)* %125, align 8, !tbaa !16\l  %128 = or i64 %115, 1\l  %129 = add i64 %128, %111\l  %130 = trunc i64 %129 to i32\l  %131 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mmE6t2_shm, i32 0, i32 %130\l  %132 = load double, double addrspace(3)* %131, align 8, !tbaa !16\l  %133 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %134 = fmul contract double %132, %133\l  %135 = mul i64 %128, %17\l  %136 = add i64 %113, %135\l  %137 = getelementptr inbounds double, double addrspace(1)* %18, i64 %136\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !16\l  %139 = fadd contract double %138, %134\l  store double %139, double addrspace(1)* %137, align 8, !tbaa !16\l  %140 = or i64 %115, 2\l  %141 = add i64 %140, %111\l  %142 = trunc i64 %141 to i32\l  %143 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mmE6t2_shm, i32 0, i32 %142\l  %144 = load double, double addrspace(3)* %143, align 8, !tbaa !16\l  %145 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %146 = fmul contract double %144, %145\l  %147 = mul i64 %140, %17\l  %148 = add i64 %113, %147\l  %149 = getelementptr inbounds double, double addrspace(1)* %18, i64 %148\l  %150 = load double, double addrspace(1)* %149, align 8, !tbaa !16\l  %151 = fadd contract double %150, %146\l  store double %151, double addrspace(1)* %149, align 8, !tbaa !16\l  %152 = or i64 %115, 3\l  %153 = add i64 %152, %111\l  %154 = trunc i64 %153 to i32\l  %155 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mmE6t2_shm, i32 0, i32 %154\l  %156 = load double, double addrspace(3)* %155, align 8, !tbaa !16\l  %157 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %158 = fmul contract double %156, %157\l  %159 = mul i64 %152, %17\l  %160 = add i64 %113, %159\l  %161 = getelementptr inbounds double, double addrspace(1)* %18, i64 %160\l  %162 = load double, double addrspace(1)* %161, align 8, !tbaa !16\l  %163 = fadd contract double %162, %158\l  store double %163, double addrspace(1)* %161, align 8, !tbaa !16\l  %164 = add nuw i64 %115, 4\l  %165 = add i64 %116, 4\l  %166 = icmp eq i64 %165, %60\l  br i1 %166, label %167, label %114, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x51d92d0:s0 -> Node0x51d9280;
	Node0x51d92d0:s1 -> Node0x51d92d0;
	Node0x51d9280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%167:\l167:                                              \l  %168 = phi i64 [ 0, %110 ], [ %164, %114 ]\l  br i1 %61, label %186, label %169\l|{<s0>T|<s1>F}}"];
	Node0x51d9280:s0 -> Node0x51d8e50;
	Node0x51d9280:s1 -> Node0x51dba40;
	Node0x51dba40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%169:\l169:                                              \l  %170 = phi i64 [ %183, %169 ], [ %168, %167 ]\l  %171 = phi i64 [ %184, %169 ], [ 0, %167 ]\l  %172 = add i64 %170, %111\l  %173 = trunc i64 %172 to i32\l  %174 = getelementptr inbounds [1024 x double], [1024 x double] addrspace(3)*\l... @_ZZ16sd_t_s1_5_kernelmmmmmmmmmmmmmmmmmmPdS_S_mmE6t2_shm, i32 0, i32 %173\l  %175 = load double, double addrspace(3)* %174, align 8, !tbaa !16\l  %176 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %177 = fmul contract double %175, %176\l  %178 = mul i64 %170, %17\l  %179 = add i64 %113, %178\l  %180 = getelementptr inbounds double, double addrspace(1)* %18, i64 %179\l  %181 = load double, double addrspace(1)* %180, align 8, !tbaa !16\l  %182 = fadd contract double %181, %177\l  store double %182, double addrspace(1)* %180, align 8, !tbaa !16\l  %183 = add nuw i64 %170, 1\l  %184 = add i64 %171, 1\l  %185 = icmp eq i64 %184, %58\l  br i1 %185, label %186, label %169, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x51dba40:s0 -> Node0x51d8e50;
	Node0x51dba40:s1 -> Node0x51dba40;
	Node0x51d8e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%186:\l186:                                              \l  %187 = add nuw i64 %109, 1\l  %188 = icmp eq i64 %187, %0\l  br i1 %188, label %189, label %108, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x51d8e50:s0 -> Node0x51d7800;
	Node0x51d8e50:s1 -> Node0x51d8d60;
	Node0x51d7800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%189:\l189:                                              \l  %190 = add i64 %72, %57\l  %191 = icmp ult i64 %190, %22\l  br i1 %191, label %71, label %70, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x51d7800:s0 -> Node0x51d64a0;
	Node0x51d7800:s1 -> Node0x51d4980;
}
