digraph "CFG for '_Z12kSetupCurandP12hiprandStatey' function" {
	label="CFG for '_Z12kSetupCurandP12hiprandStatey' function";

	Node0x60dc9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%2:\l  %3 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = shl i32 %4, 7\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = add i32 %5, %6\l  %8 = zext i32 %7 to i64\l  %9 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %9) #4\l  %10 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 0\l  %11 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 1\l  %12 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 2\l  %13 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 3\l  %14 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 4\l  %15 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 0\l  %16 = trunc i64 %1 to i32\l  %17 = xor i32 %16, 746559103\l  %18 = lshr i64 %1, 32\l  %19 = trunc i64 %18 to i32\l  %20 = xor i32 %19, -1607034933\l  %21 = mul i32 %17, 1228688033\l  %22 = mul i32 %20, 2073658381\l  %23 = add i32 %21, 123456789\l  store i32 %23, i32 addrspace(5)* %10, align 8, !tbaa !5\l  %24 = xor i32 %21, 362436069\l  store i32 %24, i32 addrspace(5)* %11, align 4, !tbaa !5\l  %25 = add i32 %22, 521288629\l  store i32 %25, i32 addrspace(5)* %12, align 8, !tbaa !5\l  %26 = xor i32 %22, 88675123\l  store i32 %26, i32 addrspace(5)* %13, align 4, !tbaa !5\l  %27 = add i32 %21, 5783321\l  store i32 %27, i32 addrspace(5)* %14, align 8, !tbaa !5\l  %28 = add i32 %21, 6615241\l  %29 = add i32 %28, %22\l  store i32 %29, i32 addrspace(5)* %15, align 8, !tbaa !9\l  %30 = icmp eq i32 %7, 0\l  br i1 %30, label %208, label %31\l|{<s0>T|<s1>F}}"];
	Node0x60dc9f0:s0 -> Node0x60e3500;
	Node0x60dc9f0:s1 -> Node0x60e3590;
	Node0x60e3590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%31:\l31:                                               \l  %32 = phi i64 [ %41, %39 ], [ %8, %2 ]\l  %33 = phi i32 [ %40, %39 ], [ 0, %2 ]\l  %34 = trunc i64 %32 to i32\l  %35 = and i32 %34, 3\l  %36 = icmp eq i32 %35, 0\l  br i1 %36, label %39, label %37\l|{<s0>T|<s1>F}}"];
	Node0x60e3590:s0 -> Node0x60e36d0;
	Node0x60e3590:s1 -> Node0x60e1fc0;
	Node0x60e1fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%37:\l37:                                               \l  %38 = zext i32 %33 to i64\l  br label %43\l}"];
	Node0x60e1fc0 -> Node0x60e3d70;
	Node0x60e36d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%39:\l39:                                               \l  %40 = add nuw nsw i32 %33, 1\l  %41 = lshr i64 %32, 2\l  %42 = icmp ult i64 %32, 4\l  br i1 %42, label %208, label %31, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x60e36d0:s0 -> Node0x60e3500;
	Node0x60e36d0:s1 -> Node0x60e3590;
	Node0x60e3d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %37 ], [ %206, %205 ]\l  br label %45\l}"];
	Node0x60e3d70 -> Node0x60e4280;
	Node0x60e4280 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi i32 [ 0, %43 ], [ %178, %45 ]\l  %47 = phi i32 [ 0, %43 ], [ %184, %45 ]\l  %48 = phi i32 [ 0, %43 ], [ %190, %45 ]\l  %49 = phi i32 [ 0, %43 ], [ %196, %45 ]\l  %50 = phi i32 [ 0, %43 ], [ %202, %45 ]\l  %51 = phi i32 [ 0, %43 ], [ %203, %45 ]\l  %52 = lshr i32 %51, 5\l  %53 = and i32 %51, 28\l  %54 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %52\l  %55 = load i32, i32 addrspace(5)* %54, align 4, !tbaa !5\l  %56 = shl nuw i32 1, %53\l  %57 = and i32 %56, %55\l  %58 = icmp eq i32 %57, 0\l  %59 = mul nuw nsw i32 %51, 5\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %60\l  %62 = load i32, i32 addrspace(4)* %61, align 16, !tbaa !5\l  %63 = select i1 %58, i32 0, i32 %62\l  %64 = xor i32 %63, %46\l  %65 = or i32 %59, 1\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %66\l  %68 = load i32, i32 addrspace(4)* %67, align 4, !tbaa !5\l  %69 = select i1 %58, i32 0, i32 %68\l  %70 = xor i32 %69, %47\l  %71 = or i32 %59, 2\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %72\l  %74 = load i32, i32 addrspace(4)* %73, align 8, !tbaa !5\l  %75 = select i1 %58, i32 0, i32 %74\l  %76 = xor i32 %75, %48\l  %77 = or i32 %59, 3\l  %78 = zext i32 %77 to i64\l  %79 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %78\l  %80 = load i32, i32 addrspace(4)* %79, align 4, !tbaa !5\l  %81 = select i1 %58, i32 0, i32 %80\l  %82 = xor i32 %81, %49\l  %83 = add nuw nsw i32 %59, 4\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %84\l  %86 = load i32, i32 addrspace(4)* %85, align 16, !tbaa !5\l  %87 = select i1 %58, i32 0, i32 %86\l  %88 = xor i32 %87, %50\l  %89 = or i32 %51, 1\l  %90 = lshr i32 %51, 5\l  %91 = and i32 %89, 29\l  %92 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %90\l  %93 = load i32, i32 addrspace(5)* %92, align 4, !tbaa !5\l  %94 = shl nuw i32 1, %91\l  %95 = and i32 %94, %93\l  %96 = icmp eq i32 %95, 0\l  %97 = mul nuw nsw i32 %89, 5\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %98\l  %100 = load i32, i32 addrspace(4)* %99, align 4, !tbaa !5\l  %101 = select i1 %96, i32 0, i32 %100\l  %102 = xor i32 %101, %64\l  %103 = add nuw nsw i32 %97, 1\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %104\l  %106 = load i32, i32 addrspace(4)* %105, align 8, !tbaa !5\l  %107 = select i1 %96, i32 0, i32 %106\l  %108 = xor i32 %107, %70\l  %109 = or i32 %97, 2\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %110\l  %112 = load i32, i32 addrspace(4)* %111, align 4, !tbaa !5\l  %113 = select i1 %96, i32 0, i32 %112\l  %114 = xor i32 %113, %76\l  %115 = add nuw nsw i32 %97, 3\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %116\l  %118 = load i32, i32 addrspace(4)* %117, align 16, !tbaa !5\l  %119 = select i1 %96, i32 0, i32 %118\l  %120 = xor i32 %119, %82\l  %121 = add nuw nsw i32 %97, 4\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %122\l  %124 = load i32, i32 addrspace(4)* %123, align 4, !tbaa !5\l  %125 = select i1 %96, i32 0, i32 %124\l  %126 = xor i32 %125, %88\l  %127 = or i32 %51, 2\l  %128 = lshr i32 %51, 5\l  %129 = and i32 %127, 30\l  %130 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %128\l  %131 = load i32, i32 addrspace(5)* %130, align 4, !tbaa !5\l  %132 = shl nuw i32 1, %129\l  %133 = and i32 %132, %131\l  %134 = icmp eq i32 %133, 0\l  %135 = mul nuw nsw i32 %127, 5\l  %136 = zext i32 %135 to i64\l  %137 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %136\l  %138 = load i32, i32 addrspace(4)* %137, align 8, !tbaa !5\l  %139 = select i1 %134, i32 0, i32 %138\l  %140 = xor i32 %139, %102\l  %141 = or i32 %135, 1\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %142\l  %144 = load i32, i32 addrspace(4)* %143, align 4, !tbaa !5\l  %145 = select i1 %134, i32 0, i32 %144\l  %146 = xor i32 %145, %108\l  %147 = add nuw nsw i32 %135, 2\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %148\l  %150 = load i32, i32 addrspace(4)* %149, align 16, !tbaa !5\l  %151 = select i1 %134, i32 0, i32 %150\l  %152 = xor i32 %151, %114\l  %153 = add nuw nsw i32 %135, 3\l  %154 = zext i32 %153 to i64\l  %155 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %154\l  %156 = load i32, i32 addrspace(4)* %155, align 4, !tbaa !5\l  %157 = select i1 %134, i32 0, i32 %156\l  %158 = xor i32 %157, %120\l  %159 = add nuw nsw i32 %135, 4\l  %160 = zext i32 %159 to i64\l  %161 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %160\l  %162 = load i32, i32 addrspace(4)* %161, align 8, !tbaa !5\l  %163 = select i1 %134, i32 0, i32 %162\l  %164 = xor i32 %163, %126\l  %165 = or i32 %51, 3\l  %166 = lshr i32 %51, 5\l  %167 = and i32 %165, 31\l  %168 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %166\l  %169 = load i32, i32 addrspace(5)* %168, align 4, !tbaa !5\l  %170 = shl nuw i32 1, %167\l  %171 = and i32 %170, %169\l  %172 = icmp eq i32 %171, 0\l  %173 = mul nuw nsw i32 %165, 5\l  %174 = zext i32 %173 to i64\l  %175 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %174\l  %176 = load i32, i32 addrspace(4)* %175, align 4, !tbaa !5\l  %177 = select i1 %172, i32 0, i32 %176\l  %178 = xor i32 %177, %140\l  %179 = add nuw nsw i32 %173, 1\l  %180 = zext i32 %179 to i64\l  %181 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %180\l  %182 = load i32, i32 addrspace(4)* %181, align 16, !tbaa !5\l  %183 = select i1 %172, i32 0, i32 %182\l  %184 = xor i32 %183, %146\l  %185 = add nuw nsw i32 %173, 2\l  %186 = zext i32 %185 to i64\l  %187 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %186\l  %188 = load i32, i32 addrspace(4)* %187, align 4, !tbaa !5\l  %189 = select i1 %172, i32 0, i32 %188\l  %190 = xor i32 %189, %152\l  %191 = add nuw nsw i32 %173, 3\l  %192 = zext i32 %191 to i64\l  %193 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %192\l  %194 = load i32, i32 addrspace(4)* %193, align 8, !tbaa !5\l  %195 = select i1 %172, i32 0, i32 %194\l  %196 = xor i32 %195, %158\l  %197 = add nuw nsw i32 %173, 4\l  %198 = zext i32 %197 to i64\l  %199 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %38, i64 %198\l  %200 = load i32, i32 addrspace(4)* %199, align 4, !tbaa !5\l  %201 = select i1 %172, i32 0, i32 %200\l  %202 = xor i32 %201, %164\l  %203 = add nuw nsw i32 %51, 4\l  %204 = icmp eq i32 %203, 160\l  br i1 %204, label %205, label %45, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x60e4280:s0 -> Node0x60e4140;
	Node0x60e4280:s1 -> Node0x60e4280;
	Node0x60e4140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%205:\l205:                                              \l  store i32 %178, i32 addrspace(5)* %10, align 8, !tbaa !5\l  store i32 %184, i32 addrspace(5)* %11, align 4, !tbaa !5\l  store i32 %190, i32 addrspace(5)* %12, align 8, !tbaa !5\l  store i32 %196, i32 addrspace(5)* %13, align 4, !tbaa !5\l  store i32 %202, i32 addrspace(5)* %14, align 8, !tbaa !5\l  %206 = add nuw nsw i32 %44, 1\l  %207 = icmp eq i32 %206, %35\l  br i1 %207, label %39, label %43, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x60e4140:s0 -> Node0x60e36d0;
	Node0x60e4140:s1 -> Node0x60e3d70;
	Node0x60e3500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%208:\l208:                                              \l  %209 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %8\l  %210 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %210, align 4, !tbaa !18\l  %211 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %211, align 8, !tbaa !19\l  %212 = bitcast %struct.hiprandState addrspace(1)* %209 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %212, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %9, i64 48, i1 false), !tbaa.struct !20\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %9) #4\l  ret void\l}"];
}
