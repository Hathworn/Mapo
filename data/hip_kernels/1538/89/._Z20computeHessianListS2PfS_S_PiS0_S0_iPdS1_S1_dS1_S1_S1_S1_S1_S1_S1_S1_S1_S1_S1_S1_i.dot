digraph "CFG for '_Z20computeHessianListS2PfS_S_PiS0_S0_iPdS1_S1_dS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_i' function" {
	label="CFG for '_Z20computeHessianListS2PfS_S_PiS0_S0_iPdS1_S1_dS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_i' function";

	Node0x47f1660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 4, !range !4, !invariant.load !5\l  %29 = zext i16 %28 to i32\l  %30 = getelementptr inbounds i8, i8 addrspace(4)* %25, i64 12\l  %31 = bitcast i8 addrspace(4)* %30 to i32 addrspace(4)*\l  %32 = load i32, i32 addrspace(4)* %31, align 4, !tbaa !6\l  %33 = udiv i32 %32, %29\l  %34 = mul i32 %33, %29\l  %35 = icmp ugt i32 %32, %34\l  %36 = zext i1 %35 to i32\l  %37 = add i32 %33, %36\l  %38 = mul i32 %37, %29\l  %39 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %40 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %41 = icmp slt i32 %39, 6\l  %42 = icmp slt i32 %40, 6\l  %43 = select i1 %41, i1 %42, i1 false\l  br i1 %43, label %44, label %169\l|{<s0>T|<s1>F}}"];
	Node0x47f1660:s0 -> Node0x47f4b50;
	Node0x47f1660:s1 -> Node0x47f4be0;
	Node0x47f4b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%44:\l44:                                               \l  %45 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %46 = mul i32 %45, %29\l  %47 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %48 = add i32 %46, %47\l  %49 = mul nsw i32 %39, 6\l  %50 = add nsw i32 %49, %40\l  %51 = mul nsw i32 %50, %6\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %22, i64 %52\l  %54 = mul i32 %39, 18\l  %55 = add nsw i32 %54, %40\l  %56 = mul nsw i32 %55, %6\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %21, i64 %57\l  %59 = mul nsw i32 %6, 6\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %58, i64 %60\l  %62 = getelementptr inbounds double, double addrspace(1)* %61, i64 %60\l  %63 = icmp slt i32 %48, %6\l  br i1 %63, label %64, label %169\l|{<s0>T|<s1>F}}"];
	Node0x47f4b50:s0 -> Node0x47f5c10;
	Node0x47f4b50:s1 -> Node0x47f4be0;
	Node0x47f5c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%64:\l64:                                               \l  %65 = phi i32 [ %96, %94 ], [ %48, %44 ]\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %66\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %72 = fpext float %71 to double\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %69\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %75 = fpext float %74 to double\l  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 %69\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %78 = fpext float %77 to double\l  %79 = getelementptr inbounds double, double addrspace(1)* %58, i64 %66\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !22\l  %81 = getelementptr inbounds double, double addrspace(1)* %61, i64 %66\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !22\l  %83 = getelementptr inbounds double, double addrspace(1)* %62, i64 %66\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !22\l  %85 = getelementptr inbounds double, double addrspace(1)* %53, i64 %66\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !22\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %66\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %89 = add nsw i32 %65, 1\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %90\l  %92 = load i32, i32 addrspace(1)* %91, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %93 = icmp slt i32 %88, %92\l  br i1 %93, label %98, label %94\l|{<s0>T|<s1>F}}"];
	Node0x47f5c10:s0 -> Node0x47f8d70;
	Node0x47f5c10:s1 -> Node0x47f4150;
	Node0x47f4150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%94:\l94:                                               \l  %95 = phi double [ %86, %64 ], [ %166, %165 ]\l  store double %95, double addrspace(1)* %85, align 8, !tbaa !22\l  %96 = add nsw i32 %65, %38\l  %97 = icmp slt i32 %96, %6\l  br i1 %97, label %64, label %169, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x47f4150:s0 -> Node0x47f5c10;
	Node0x47f4150:s1 -> Node0x47f4be0;
	Node0x47f8d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%98:\l98:                                               \l  %99 = phi i32 [ %167, %165 ], [ %88, %64 ]\l  %100 = phi double [ %166, %165 ], [ %86, %64 ]\l  %101 = sext i32 %99 to i64\l  %102 = getelementptr inbounds double, double addrspace(1)* %11, i64 %101\l  %103 = load double, double addrspace(1)* %102, align 8, !tbaa !22\l  %104 = fcmp contract ogt double %103, 1.000000e+00\l  %105 = fcmp contract olt double %103, 0.000000e+00\l  %106 = or i1 %104, %105\l  %107 = fcmp contract uno double %103, 0.000000e+00\l  %108 = or i1 %107, %106\l  br i1 %108, label %165, label %109\l|{<s0>T|<s1>F}}"];
	Node0x47f8d70:s0 -> Node0x47f8eb0;
	Node0x47f8d70:s1 -> Node0x47fa380;
	Node0x47fa380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%109:\l109:                                              \l  %110 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %101\l  %111 = load i32, i32 addrspace(1)* %110, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %112 = fmul contract double %103, %10\l  %113 = sext i32 %111 to i64\l  %114 = getelementptr inbounds double, double addrspace(1)* %7, i64 %113\l  %115 = load double, double addrspace(1)* %114, align 8, !tbaa !22\l  %116 = fsub contract double %72, %115\l  %117 = getelementptr inbounds double, double addrspace(1)* %12, i64 %113\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !22\l  %119 = fmul contract double %80, %118\l  %120 = getelementptr inbounds double, double addrspace(1)* %13, i64 %113\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !22\l  %122 = fmul contract double %82, %121\l  %123 = fadd contract double %119, %122\l  %124 = getelementptr inbounds double, double addrspace(1)* %14, i64 %113\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !22\l  %126 = fmul contract double %84, %125\l  %127 = fadd contract double %123, %126\l  %128 = fmul contract double %116, %127\l  %129 = fmul contract double %112, %128\l  %130 = fadd contract double %100, %129\l  %131 = getelementptr inbounds double, double addrspace(1)* %8, i64 %113\l  %132 = load double, double addrspace(1)* %131, align 8, !tbaa !22\l  %133 = fsub contract double %75, %132\l  %134 = getelementptr inbounds double, double addrspace(1)* %15, i64 %113\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !22\l  %136 = fmul contract double %80, %135\l  %137 = getelementptr inbounds double, double addrspace(1)* %16, i64 %113\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !22\l  %139 = fmul contract double %82, %138\l  %140 = fadd contract double %136, %139\l  %141 = getelementptr inbounds double, double addrspace(1)* %17, i64 %113\l  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !22\l  %143 = fmul contract double %84, %142\l  %144 = fadd contract double %140, %143\l  %145 = fmul contract double %133, %144\l  %146 = fmul contract double %112, %145\l  %147 = fadd contract double %130, %146\l  %148 = getelementptr inbounds double, double addrspace(1)* %9, i64 %113\l  %149 = load double, double addrspace(1)* %148, align 8, !tbaa !22\l  %150 = fsub contract double %78, %149\l  %151 = getelementptr inbounds double, double addrspace(1)* %18, i64 %113\l  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !22\l  %153 = fmul contract double %80, %152\l  %154 = getelementptr inbounds double, double addrspace(1)* %19, i64 %113\l  %155 = load double, double addrspace(1)* %154, align 8, !tbaa !22\l  %156 = fmul contract double %82, %155\l  %157 = fadd contract double %153, %156\l  %158 = getelementptr inbounds double, double addrspace(1)* %20, i64 %113\l  %159 = load double, double addrspace(1)* %158, align 8, !tbaa !22\l  %160 = fmul contract double %84, %159\l  %161 = fadd contract double %157, %160\l  %162 = fmul contract double %150, %161\l  %163 = fmul contract double %112, %162\l  %164 = fadd contract double %147, %163\l  br label %165\l}"];
	Node0x47fa380 -> Node0x47f8eb0;
	Node0x47f8eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%165:\l165:                                              \l  %166 = phi double [ %100, %98 ], [ %164, %109 ]\l  %167 = add nsw i32 %99, 1\l  %168 = icmp slt i32 %167, %92\l  br i1 %168, label %98, label %94, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x47f8eb0:s0 -> Node0x47f8d70;
	Node0x47f8eb0:s1 -> Node0x47f4150;
	Node0x47f4be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%169:\l169:                                              \l  ret void\l}"];
}
