digraph "CFG for '_Z26calculateFeatureDifferencePfiiS_S_S_S_iiS_' function" {
	label="CFG for '_Z26calculateFeatureDifferencePfiiS_S_S_S_iiS_' function";

	Node0x5ec3a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l  %11 = sub nsw i32 %1, %7\l  %12 = add nsw i32 %11, 1\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %14, %19\l  %21 = add i32 %20, %13\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %24 = getelementptr i8, i8 addrspace(4)* %15, i64 6\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 2, !range !5, !invariant.load !6\l  %27 = zext i16 %26 to i32\l  %28 = mul i32 %23, %27\l  %29 = add i32 %28, %22\l  %30 = icmp sgt i32 %21, %11\l  %31 = sub nsw i32 %2, %8\l  %32 = icmp sgt i32 %29, %31\l  %33 = select i1 %30, i1 true, i1 %32\l  br i1 %33, label %396, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5ec3a20:s0 -> Node0x5ec6060;
	Node0x5ec3a20:s1 -> Node0x5ec83b0;
	Node0x5ec83b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%34:\l34:                                               \l  %35 = add nsw i32 %21, -1\l  %36 = add nsw i32 %29, -1\l  %37 = add nsw i32 %35, %7\l  %38 = add nsw i32 %36, %8\l  %39 = mul nsw i32 %38, %1\l  %40 = add nsw i32 %39, %37\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %44 = icmp slt i32 %21, 1\l  br i1 %44, label %50, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5ec83b0:s0 -> Node0x5ec8c40;
	Node0x5ec83b0:s1 -> Node0x5ec8cd0;
	Node0x5ec8cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%45:\l45:                                               \l  %46 = add nsw i32 %39, %35\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %3, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %50\l}"];
	Node0x5ec8cd0 -> Node0x5ec8c40;
	Node0x5ec8c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%50:\l50:                                               \l  %51 = phi contract float [ %49, %45 ], [ 0.000000e+00, %34 ]\l  %52 = icmp slt i32 %29, 1\l  br i1 %52, label %59, label %53\l|{<s0>T|<s1>F}}"];
	Node0x5ec8c40:s0 -> Node0x5eca1f0;
	Node0x5ec8c40:s1 -> Node0x5eca280;
	Node0x5eca280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%53:\l53:                                               \l  %54 = mul nsw i32 %36, %1\l  %55 = add nsw i32 %54, %37\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %3, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %59\l}"];
	Node0x5eca280 -> Node0x5eca1f0;
	Node0x5eca1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%59:\l59:                                               \l  %60 = phi contract float [ %58, %53 ], [ 0.000000e+00, %50 ]\l  %61 = select i1 %44, i1 true, i1 %52\l  br i1 %61, label %68, label %62\l|{<s0>T|<s1>F}}"];
	Node0x5eca1f0:s0 -> Node0x5eca830;
	Node0x5eca1f0:s1 -> Node0x5eca880;
	Node0x5eca880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%62:\l62:                                               \l  %63 = mul nsw i32 %36, %1\l  %64 = add nsw i32 %63, %35\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %3, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %68\l}"];
	Node0x5eca880 -> Node0x5eca830;
	Node0x5eca830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%68:\l68:                                               \l  %69 = phi contract float [ %67, %62 ], [ 0.000000e+00, %59 ]\l  %70 = fsub contract float %43, %51\l  %71 = fsub contract float %70, %60\l  %72 = fadd contract float %71, %69\l  %73 = getelementptr inbounds float, float addrspace(1)* %4, i64 %41\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br i1 %44, label %80, label %75\l|{<s0>T|<s1>F}}"];
	Node0x5eca830:s0 -> Node0x5ecb260;
	Node0x5eca830:s1 -> Node0x5ecb2f0;
	Node0x5ecb2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%75:\l75:                                               \l  %76 = add nsw i32 %39, %35\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %4, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %80\l}"];
	Node0x5ecb2f0 -> Node0x5ecb260;
	Node0x5ecb260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%80:\l80:                                               \l  %81 = phi contract float [ %79, %75 ], [ 0.000000e+00, %68 ]\l  br i1 %52, label %88, label %82\l|{<s0>T|<s1>F}}"];
	Node0x5ecb260:s0 -> Node0x5ecb760;
	Node0x5ecb260:s1 -> Node0x5ecb7b0;
	Node0x5ecb7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%82:\l82:                                               \l  %83 = mul nsw i32 %36, %1\l  %84 = add nsw i32 %83, %37\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %4, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %88\l}"];
	Node0x5ecb7b0 -> Node0x5ecb760;
	Node0x5ecb760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%88:\l88:                                               \l  %89 = phi contract float [ %87, %82 ], [ 0.000000e+00, %80 ]\l  br i1 %61, label %96, label %90\l|{<s0>T|<s1>F}}"];
	Node0x5ecb760:s0 -> Node0x5ecbcb0;
	Node0x5ecb760:s1 -> Node0x5ecbd00;
	Node0x5ecbd00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%90:\l90:                                               \l  %91 = mul nsw i32 %36, %1\l  %92 = add nsw i32 %91, %35\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %4, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %96\l}"];
	Node0x5ecbd00 -> Node0x5ecbcb0;
	Node0x5ecbcb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%96:\l96:                                               \l  %97 = phi contract float [ %95, %90 ], [ 0.000000e+00, %88 ]\l  %98 = fsub contract float %74, %81\l  %99 = fsub contract float %98, %89\l  %100 = fadd contract float %99, %97\l  %101 = mul i32 %8, %7\l  %102 = sitofp i32 %101 to float\l  %103 = fdiv contract float %72, %102\l  %104 = fdiv contract float %100, %102\l  %105 = tail call float @llvm.fabs.f32(float %103)\l  %106 = tail call float @llvm.amdgcn.frexp.mant.f32(float %105)\l  %107 = fcmp olt float %106, 0x3FE5555560000000\l  %108 = zext i1 %107 to i32\l  %109 = tail call float @llvm.amdgcn.ldexp.f32(float %106, i32 %108)\l  %110 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %105)\l  %111 = sub nsw i32 %110, %108\l  %112 = fadd float %109, -1.000000e+00\l  %113 = fadd float %109, 1.000000e+00\l  %114 = fadd float %113, -1.000000e+00\l  %115 = fsub float %109, %114\l  %116 = tail call float @llvm.amdgcn.rcp.f32(float %113)\l  %117 = fmul float %112, %116\l  %118 = fmul float %113, %117\l  %119 = fneg float %118\l  %120 = tail call float @llvm.fma.f32(float %117, float %113, float %119)\l  %121 = tail call float @llvm.fma.f32(float %117, float %115, float %120)\l  %122 = fadd float %118, %121\l  %123 = fsub float %122, %118\l  %124 = fsub float %121, %123\l  %125 = fsub float %112, %122\l  %126 = fsub float %112, %125\l  %127 = fsub float %126, %122\l  %128 = fsub float %127, %124\l  %129 = fadd float %125, %128\l  %130 = fmul float %116, %129\l  %131 = fadd float %117, %130\l  %132 = fsub float %131, %117\l  %133 = fsub float %130, %132\l  %134 = fmul float %131, %131\l  %135 = fneg float %134\l  %136 = tail call float @llvm.fma.f32(float %131, float %131, float %135)\l  %137 = fmul float %133, 2.000000e+00\l  %138 = tail call float @llvm.fma.f32(float %131, float %137, float %136)\l  %139 = fadd float %134, %138\l  %140 = fsub float %139, %134\l  %141 = fsub float %138, %140\l  %142 = tail call float @llvm.fmuladd.f32(float %139, float\l... 0x3FCED89C20000000, float 0x3FD23E9880000000)\l  %143 = tail call float @llvm.fmuladd.f32(float %139, float %142, float\l... 0x3FD999BDE0000000)\l  %144 = sitofp i32 %111 to float\l  %145 = fmul float %144, 0x3FE62E4300000000\l  %146 = fneg float %145\l  %147 = tail call float @llvm.fma.f32(float %144, float 0x3FE62E4300000000,\l... float %146)\l  %148 = tail call float @llvm.fma.f32(float %144, float 0xBE205C6100000000,\l... float %147)\l  %149 = fadd float %145, %148\l  %150 = fsub float %149, %145\l  %151 = fsub float %148, %150\l  %152 = tail call float @llvm.amdgcn.ldexp.f32(float %131, i32 1)\l  %153 = fmul float %131, %139\l  %154 = fneg float %153\l  %155 = tail call float @llvm.fma.f32(float %139, float %131, float %154)\l  %156 = tail call float @llvm.fma.f32(float %139, float %133, float %155)\l  %157 = tail call float @llvm.fma.f32(float %141, float %131, float %156)\l  %158 = fadd float %153, %157\l  %159 = fsub float %158, %153\l  %160 = fsub float %157, %159\l  %161 = fmul float %139, %143\l  %162 = fneg float %161\l  %163 = tail call float @llvm.fma.f32(float %139, float %143, float %162)\l  %164 = tail call float @llvm.fma.f32(float %141, float %143, float %163)\l  %165 = fadd float %161, %164\l  %166 = fsub float %165, %161\l  %167 = fsub float %164, %166\l  %168 = fadd float %165, 0x3FE5555540000000\l  %169 = fadd float %168, 0xBFE5555540000000\l  %170 = fsub float %165, %169\l  %171 = fadd float %167, 0x3E2E720200000000\l  %172 = fadd float %171, %170\l  %173 = fadd float %168, %172\l  %174 = fsub float %173, %168\l  %175 = fsub float %172, %174\l  %176 = fmul float %158, %173\l  %177 = fneg float %176\l  %178 = tail call float @llvm.fma.f32(float %158, float %173, float %177)\l  %179 = tail call float @llvm.fma.f32(float %158, float %175, float %178)\l  %180 = tail call float @llvm.fma.f32(float %160, float %173, float %179)\l  %181 = tail call float @llvm.amdgcn.ldexp.f32(float %133, i32 1)\l  %182 = fadd float %176, %180\l  %183 = fsub float %182, %176\l  %184 = fsub float %180, %183\l  %185 = fadd float %152, %182\l  %186 = fsub float %185, %152\l  %187 = fsub float %182, %186\l  %188 = fadd float %181, %184\l  %189 = fadd float %188, %187\l  %190 = fadd float %185, %189\l  %191 = fsub float %190, %185\l  %192 = fsub float %189, %191\l  %193 = fadd float %149, %190\l  %194 = fsub float %193, %149\l  %195 = fsub float %193, %194\l  %196 = fsub float %149, %195\l  %197 = fsub float %190, %194\l  %198 = fadd float %197, %196\l  %199 = fadd float %151, %192\l  %200 = fsub float %199, %151\l  %201 = fsub float %199, %200\l  %202 = fsub float %151, %201\l  %203 = fsub float %192, %200\l  %204 = fadd float %203, %202\l  %205 = fadd float %199, %198\l  %206 = fadd float %193, %205\l  %207 = fsub float %206, %193\l  %208 = fsub float %205, %207\l  %209 = fadd float %204, %208\l  %210 = fadd float %206, %209\l  %211 = fsub float %210, %206\l  %212 = fsub float %209, %211\l  %213 = fmul float %210, 2.000000e+00\l  %214 = fneg float %213\l  %215 = tail call float @llvm.fma.f32(float %210, float 2.000000e+00, float\l... %214)\l  %216 = tail call float @llvm.fma.f32(float %212, float 2.000000e+00, float\l... %215)\l  %217 = fadd float %213, %216\l  %218 = fsub float %217, %213\l  %219 = fsub float %216, %218\l  %220 = tail call float @llvm.fabs.f32(float %213) #3\l  %221 = fcmp oeq float %220, 0x7FF0000000000000\l  %222 = select i1 %221, float %213, float %217\l  %223 = tail call float @llvm.fabs.f32(float %222) #3\l  %224 = fcmp oeq float %223, 0x7FF0000000000000\l  %225 = select i1 %224, float 0.000000e+00, float %219\l  %226 = fcmp oeq float %222, 0x40562E4300000000\l  %227 = select i1 %226, float 0x3EE0000000000000, float 0.000000e+00\l  %228 = fsub float %222, %227\l  %229 = fadd float %227, %225\l  %230 = fmul float %228, 0x3FF7154760000000\l  %231 = tail call float @llvm.rint.f32(float %230)\l  %232 = fcmp ogt float %228, 0x40562E4300000000\l  %233 = fcmp olt float %228, 0xC059D1DA00000000\l  %234 = fneg float %230\l  %235 = tail call float @llvm.fma.f32(float %228, float 0x3FF7154760000000,\l... float %234)\l  %236 = tail call float @llvm.fma.f32(float %228, float 0x3E54AE0BE0000000,\l... float %235)\l  %237 = fsub float %230, %231\l  %238 = fadd float %236, %237\l  %239 = tail call float @llvm.exp2.f32(float %238)\l  %240 = fptosi float %231 to i32\l  %241 = tail call float @llvm.amdgcn.ldexp.f32(float %239, i32 %240)\l  %242 = select i1 %233, float 0.000000e+00, float %241\l  %243 = select i1 %232, float 0x7FF0000000000000, float %242\l  %244 = tail call float @llvm.fma.f32(float %243, float %229, float %243)\l  %245 = tail call float @llvm.fabs.f32(float %243) #3\l  %246 = fcmp oeq float %245, 0x7FF0000000000000\l  %247 = select i1 %246, float %243, float %244\l  %248 = tail call float @llvm.fabs.f32(float %247)\l  %249 = fcmp oeq float %105, 0x7FF0000000000000\l  %250 = fcmp oeq float %103, 0.000000e+00\l  %251 = select i1 %249, float 0x7FF0000000000000, float %248\l  %252 = select i1 %250, float 0.000000e+00, float %251\l  %253 = fcmp uno float %103, 0.000000e+00\l  %254 = select i1 %253, float 0x7FF8000000000000, float %252\l  %255 = fcmp oeq float %103, 1.000000e+00\l  %256 = select i1 %255, float 1.000000e+00, float %254\l  %257 = fsub contract float %104, %256\l  %258 = getelementptr inbounds float, float addrspace(1)* %5, i64 %41\l  %259 = load float, float addrspace(1)* %258, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br i1 %44, label %265, label %260\l|{<s0>T|<s1>F}}"];
	Node0x5ecbcb0:s0 -> Node0x5ece020;
	Node0x5ecbcb0:s1 -> Node0x5ece0b0;
	Node0x5ece0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%260:\l260:                                              \l  %261 = add nsw i32 %39, %35\l  %262 = sext i32 %261 to i64\l  %263 = getelementptr inbounds float, float addrspace(1)* %5, i64 %262\l  %264 = load float, float addrspace(1)* %263, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %265\l}"];
	Node0x5ece0b0 -> Node0x5ece020;
	Node0x5ece020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%265:\l265:                                              \l  %266 = phi contract float [ %264, %260 ], [ 0.000000e+00, %96 ]\l  br i1 %52, label %273, label %267\l|{<s0>T|<s1>F}}"];
	Node0x5ece020:s0 -> Node0x5ece520;
	Node0x5ece020:s1 -> Node0x5ece570;
	Node0x5ece570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%267:\l267:                                              \l  %268 = mul nsw i32 %36, %1\l  %269 = add nsw i32 %268, %37\l  %270 = sext i32 %269 to i64\l  %271 = getelementptr inbounds float, float addrspace(1)* %5, i64 %270\l  %272 = load float, float addrspace(1)* %271, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %273\l}"];
	Node0x5ece570 -> Node0x5ece520;
	Node0x5ece520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%273:\l273:                                              \l  %274 = phi contract float [ %272, %267 ], [ 0.000000e+00, %265 ]\l  br i1 %61, label %281, label %275\l|{<s0>T|<s1>F}}"];
	Node0x5ece520:s0 -> Node0x5ed5630;
	Node0x5ece520:s1 -> Node0x5ed5680;
	Node0x5ed5680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%275:\l275:                                              \l  %276 = mul nsw i32 %36, %1\l  %277 = add nsw i32 %276, %35\l  %278 = sext i32 %277 to i64\l  %279 = getelementptr inbounds float, float addrspace(1)* %5, i64 %278\l  %280 = load float, float addrspace(1)* %279, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %281\l}"];
	Node0x5ed5680 -> Node0x5ed5630;
	Node0x5ed5630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%281:\l281:                                              \l  %282 = phi contract float [ %280, %275 ], [ 0.000000e+00, %273 ]\l  %283 = fsub contract float %259, %266\l  %284 = fsub contract float %283, %274\l  %285 = fadd contract float %284, %282\l  %286 = fpext float %285 to double\l  %287 = sitofp i32 %21 to double\l  %288 = sitofp i32 %7 to double\l  %289 = fmul contract double %288, 5.000000e-01\l  %290 = fadd contract double %289, %287\l  %291 = fpext float %72 to double\l  %292 = fmul contract double %290, %291\l  %293 = fsub contract double %286, %292\l  %294 = fmul contract double %293, 4.000000e+00\l  %295 = mul i32 %101, %7\l  %296 = sitofp i32 %295 to double\l  %297 = fdiv contract double %294, %296\l  %298 = fptrunc double %297 to float\l  %299 = getelementptr inbounds float, float addrspace(1)* %6, i64 %41\l  %300 = load float, float addrspace(1)* %299, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br i1 %44, label %306, label %301\l|{<s0>T|<s1>F}}"];
	Node0x5ed5630:s0 -> Node0x5ed6550;
	Node0x5ed5630:s1 -> Node0x5ed65e0;
	Node0x5ed65e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%301:\l301:                                              \l  %302 = add nsw i32 %39, %35\l  %303 = sext i32 %302 to i64\l  %304 = getelementptr inbounds float, float addrspace(1)* %6, i64 %303\l  %305 = load float, float addrspace(1)* %304, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %306\l}"];
	Node0x5ed65e0 -> Node0x5ed6550;
	Node0x5ed6550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%306:\l306:                                              \l  %307 = phi contract float [ %305, %301 ], [ 0.000000e+00, %281 ]\l  br i1 %52, label %314, label %308\l|{<s0>T|<s1>F}}"];
	Node0x5ed6550:s0 -> Node0x5ed6a50;
	Node0x5ed6550:s1 -> Node0x5ed6aa0;
	Node0x5ed6aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%308:\l308:                                              \l  %309 = mul nsw i32 %36, %1\l  %310 = add nsw i32 %309, %37\l  %311 = sext i32 %310 to i64\l  %312 = getelementptr inbounds float, float addrspace(1)* %6, i64 %311\l  %313 = load float, float addrspace(1)* %312, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %314\l}"];
	Node0x5ed6aa0 -> Node0x5ed6a50;
	Node0x5ed6a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%314:\l314:                                              \l  %315 = phi contract float [ %313, %308 ], [ 0.000000e+00, %306 ]\l  br i1 %61, label %322, label %316\l|{<s0>T|<s1>F}}"];
	Node0x5ed6a50:s0 -> Node0x5ed6fa0;
	Node0x5ed6a50:s1 -> Node0x5ed6ff0;
	Node0x5ed6ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%316:\l316:                                              \l  %317 = mul nsw i32 %36, %1\l  %318 = add nsw i32 %317, %35\l  %319 = sext i32 %318 to i64\l  %320 = getelementptr inbounds float, float addrspace(1)* %6, i64 %319\l  %321 = load float, float addrspace(1)* %320, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  br label %322\l}"];
	Node0x5ed6ff0 -> Node0x5ed6fa0;
	Node0x5ed6fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%322:\l322:                                              \l  %323 = phi contract float [ %321, %316 ], [ 0.000000e+00, %314 ]\l  %324 = fsub contract float %300, %307\l  %325 = fsub contract float %324, %315\l  %326 = fadd contract float %325, %323\l  %327 = fpext float %326 to double\l  %328 = sitofp i32 %29 to double\l  %329 = sitofp i32 %8 to double\l  %330 = fmul contract double %329, 5.000000e-01\l  %331 = fadd contract double %330, %328\l  %332 = fmul contract double %331, %291\l  %333 = fsub contract double %327, %332\l  %334 = fmul contract double %333, 4.000000e+00\l  %335 = mul i32 %101, %8\l  %336 = sitofp i32 %335 to double\l  %337 = fdiv contract double %334, %336\l  %338 = fptrunc double %337 to float\l  %339 = load float, float addrspace(1)* %0, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %340 = fsub contract float %339, %103\l  %341 = getelementptr inbounds float, float addrspace(1)* %0, i64 1\l  %342 = load float, float addrspace(1)* %341, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %343 = fsub contract float %342, %257\l  %344 = getelementptr inbounds float, float addrspace(1)* %0, i64 2\l  %345 = load float, float addrspace(1)* %344, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %346 = fsub contract float %345, %298\l  %347 = getelementptr inbounds float, float addrspace(1)* %0, i64 3\l  %348 = load float, float addrspace(1)* %347, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %349 = fsub contract float %348, %338\l  %350 = tail call float @llvm.fabs.f32(float %340)\l  %351 = tail call float @llvm.fabs.f32(float %343)\l  %352 = tail call float @llvm.fabs.f32(float %346)\l  %353 = tail call float @llvm.fabs.f32(float %349)\l  %354 = bitcast float %350 to i32\l  %355 = bitcast float %351 to i32\l  %356 = tail call i32 @llvm.umax.i32(i32 %354, i32 %355)\l  %357 = tail call i32 @llvm.umin.i32(i32 %354, i32 %355)\l  %358 = bitcast float %352 to i32\l  %359 = bitcast float %353 to i32\l  %360 = tail call i32 @llvm.umax.i32(i32 %358, i32 %359)\l  %361 = tail call i32 @llvm.umin.i32(i32 %358, i32 %359)\l  %362 = tail call i32 @llvm.umax.i32(i32 %356, i32 %360)\l  %363 = bitcast i32 %362 to float\l  %364 = tail call i32 @llvm.umin.i32(i32 %356, i32 %360)\l  %365 = tail call i32 @llvm.umax.i32(i32 %357, i32 %361)\l  %366 = tail call i32 @llvm.umin.i32(i32 %357, i32 %361)\l  %367 = bitcast i32 %366 to float\l  %368 = tail call i32 @llvm.umax.i32(i32 %365, i32 %364)\l  %369 = bitcast i32 %368 to float\l  %370 = tail call i32 @llvm.umin.i32(i32 %365, i32 %364)\l  %371 = bitcast i32 %370 to float\l  %372 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %363)\l  %373 = sub nsw i32 0, %372\l  %374 = tail call float @llvm.amdgcn.ldexp.f32(float %363, i32 %373)\l  %375 = tail call float @llvm.amdgcn.ldexp.f32(float %369, i32 %373)\l  %376 = tail call float @llvm.amdgcn.ldexp.f32(float %371, i32 %373)\l  %377 = tail call float @llvm.amdgcn.ldexp.f32(float %367, i32 %373)\l  %378 = fmul float %377, %377\l  %379 = tail call float @llvm.fmuladd.f32(float %376, float %376, float %378)\l  %380 = tail call float @llvm.fmuladd.f32(float %375, float %375, float %379)\l  %381 = tail call float @llvm.fmuladd.f32(float %374, float %374, float %380)\l  %382 = fcmp oeq float %350, 0x7FF0000000000000\l  %383 = fcmp oeq float %351, 0x7FF0000000000000\l  %384 = or i1 %382, %383\l  %385 = fcmp oeq float %352, 0x7FF0000000000000\l  %386 = or i1 %384, %385\l  %387 = fcmp oeq float %353, 0x7FF0000000000000\l  %388 = or i1 %386, %387\l  %389 = tail call float @llvm.sqrt.f32(float %381)\l  %390 = tail call float @llvm.amdgcn.ldexp.f32(float %389, i32 %372)\l  %391 = select i1 %388, float 0x7FF0000000000000, float %390\l  %392 = mul nsw i32 %29, %12\l  %393 = add nsw i32 %392, %21\l  %394 = sext i32 %393 to i64\l  %395 = getelementptr inbounds float, float addrspace(1)* %9, i64 %394\l  store float %391, float addrspace(1)* %395, align 4, !tbaa !7\l  br label %396\l}"];
	Node0x5ed6fa0 -> Node0x5ec6060;
	Node0x5ec6060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%396:\l396:                                              \l  ret void\l}"];
}
