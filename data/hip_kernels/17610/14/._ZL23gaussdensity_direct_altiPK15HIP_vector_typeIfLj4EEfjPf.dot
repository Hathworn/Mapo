digraph "CFG for '_ZL23gaussdensity_direct_altiPK15HIP_vector_typeIfLj4EEfjPf' function" {
	label="CFG for '_ZL23gaussdensity_direct_altiPK15HIP_vector_typeIfLj4EEfjPf' function";

	Node0x6158950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = shl i32 %6, 3\l  %16 = mul i32 %15, %11\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 16\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 8, !tbaa !16\l  %27 = mul i32 %19, %23\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %29 = add i32 %27, %28\l  %30 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %31 = getelementptr i8, i8 addrspace(4)* %7, i64 8\l  %32 = bitcast i8 addrspace(4)* %31 to i16 addrspace(4)*\l  %33 = load i16, i16 addrspace(4)* %32, align 4, !range !4, !invariant.load !5\l  %34 = zext i16 %33 to i32\l  %35 = mul i32 %30, %34\l  %36 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15\l  %37 = add i32 %35, %36\l  %38 = udiv i32 %14, %11\l  %39 = mul i32 %38, %11\l  %40 = icmp ugt i32 %14, %39\l  %41 = zext i1 %40 to i32\l  %42 = add i32 %38, %41\l  %43 = shl nuw nsw i32 %11, 3\l  %44 = mul i32 %43, %42\l  %45 = udiv i32 %26, %23\l  %46 = mul i32 %45, %23\l  %47 = icmp ugt i32 %26, %46\l  %48 = zext i1 %47 to i32\l  %49 = add i32 %45, %48\l  %50 = mul i32 %37, %23\l  %51 = mul i32 %50, %49\l  %52 = add i32 %51, %29\l  %53 = mul i32 %44, %52\l  %54 = add i32 %53, %18\l  %55 = add i32 %37, %3\l  %56 = uitofp i32 %18 to float\l  %57 = fmul contract float %56, %2\l  %58 = uitofp i32 %29 to float\l  %59 = fmul contract float %58, %2\l  %60 = uitofp i32 %55 to float\l  %61 = fmul contract float %60, %2\l  %62 = fmul contract float %2, 8.000000e+00\l  %63 = icmp sgt i32 %0, 0\l  br i1 %63, label %64, label %186\l|{<s0>T|<s1>F}}"];
	Node0x6158950:s0 -> Node0x615e960;
	Node0x6158950:s1 -> Node0x615e9f0;
	Node0x615e960 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%64:\l64:                                               \l  %65 = phi float [ %99, %64 ], [ 0.000000e+00, %5 ]\l  %66 = phi float [ %111, %64 ], [ 0.000000e+00, %5 ]\l  %67 = phi float [ %123, %64 ], [ 0.000000e+00, %5 ]\l  %68 = phi float [ %135, %64 ], [ 0.000000e+00, %5 ]\l  %69 = phi float [ %147, %64 ], [ 0.000000e+00, %5 ]\l  %70 = phi float [ %159, %64 ], [ 0.000000e+00, %5 ]\l  %71 = phi float [ %171, %64 ], [ 0.000000e+00, %5 ]\l  %72 = phi float [ %183, %64 ], [ 0.000000e+00, %5 ]\l  %73 = phi i32 [ %184, %64 ], [ 0, %5 ]\l  %74 = zext i32 %73 to i64\l  %75 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %74, i32 0, i32 0, i32 0, i64 0\l  %76 = load float, float addrspace(1)* %75, align 16, !amdgpu.noclobber !5\l  %77 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %74, i32 0, i32 0, i32 0, i64 1\l  %78 = load float, float addrspace(1)* %77, align 4, !amdgpu.noclobber !5\l  %79 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %74, i32 0, i32 0, i32 0, i64 2\l  %80 = load float, float addrspace(1)* %79, align 8, !amdgpu.noclobber !5\l  %81 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %74, i32 0, i32 0, i32 0, i64 3\l  %82 = load float, float addrspace(1)* %81, align 4, !amdgpu.noclobber !5\l  %83 = fsub contract float %59, %78\l  %84 = fsub contract float %61, %80\l  %85 = fmul contract float %83, %83\l  %86 = fmul contract float %84, %84\l  %87 = fadd contract float %85, %86\l  %88 = fsub contract float %57, %76\l  %89 = fmul contract float %88, %88\l  %90 = fadd contract float %89, %87\l  %91 = fneg contract float %90\l  %92 = fmul contract float %82, %91\l  %93 = fcmp olt float %92, -1.260000e+02\l  %94 = select i1 %93, float 0x3BF0000000000000, float 1.000000e+00\l  %95 = select i1 %93, float 6.400000e+01, float 0.000000e+00\l  %96 = fadd float %92, %95\l  %97 = tail call float @llvm.exp2.f32(float %96)\l  %98 = fmul float %94, %97\l  %99 = fadd contract float %65, %98\l  %100 = fadd contract float %62, %88\l  %101 = fmul contract float %100, %100\l  %102 = fadd contract float %101, %87\l  %103 = fneg contract float %102\l  %104 = fmul contract float %82, %103\l  %105 = fcmp olt float %104, -1.260000e+02\l  %106 = select i1 %105, float 0x3BF0000000000000, float 1.000000e+00\l  %107 = select i1 %105, float 6.400000e+01, float 0.000000e+00\l  %108 = fadd float %104, %107\l  %109 = tail call float @llvm.exp2.f32(float %108)\l  %110 = fmul float %106, %109\l  %111 = fadd contract float %66, %110\l  %112 = fadd contract float %62, %100\l  %113 = fmul contract float %112, %112\l  %114 = fadd contract float %113, %87\l  %115 = fneg contract float %114\l  %116 = fmul contract float %82, %115\l  %117 = fcmp olt float %116, -1.260000e+02\l  %118 = select i1 %117, float 0x3BF0000000000000, float 1.000000e+00\l  %119 = select i1 %117, float 6.400000e+01, float 0.000000e+00\l  %120 = fadd float %116, %119\l  %121 = tail call float @llvm.exp2.f32(float %120)\l  %122 = fmul float %118, %121\l  %123 = fadd contract float %67, %122\l  %124 = fadd contract float %62, %112\l  %125 = fmul contract float %124, %124\l  %126 = fadd contract float %125, %87\l  %127 = fneg contract float %126\l  %128 = fmul contract float %82, %127\l  %129 = fcmp olt float %128, -1.260000e+02\l  %130 = select i1 %129, float 0x3BF0000000000000, float 1.000000e+00\l  %131 = select i1 %129, float 6.400000e+01, float 0.000000e+00\l  %132 = fadd float %128, %131\l  %133 = tail call float @llvm.exp2.f32(float %132)\l  %134 = fmul float %130, %133\l  %135 = fadd contract float %68, %134\l  %136 = fadd contract float %62, %124\l  %137 = fmul contract float %136, %136\l  %138 = fadd contract float %87, %137\l  %139 = fneg contract float %138\l  %140 = fmul contract float %82, %139\l  %141 = fcmp olt float %140, -1.260000e+02\l  %142 = select i1 %141, float 0x3BF0000000000000, float 1.000000e+00\l  %143 = select i1 %141, float 6.400000e+01, float 0.000000e+00\l  %144 = fadd float %140, %143\l  %145 = tail call float @llvm.exp2.f32(float %144)\l  %146 = fmul float %142, %145\l  %147 = fadd contract float %69, %146\l  %148 = fadd contract float %62, %136\l  %149 = fmul contract float %148, %148\l  %150 = fadd contract float %87, %149\l  %151 = fneg contract float %150\l  %152 = fmul contract float %82, %151\l  %153 = fcmp olt float %152, -1.260000e+02\l  %154 = select i1 %153, float 0x3BF0000000000000, float 1.000000e+00\l  %155 = select i1 %153, float 6.400000e+01, float 0.000000e+00\l  %156 = fadd float %152, %155\l  %157 = tail call float @llvm.exp2.f32(float %156)\l  %158 = fmul float %154, %157\l  %159 = fadd contract float %70, %158\l  %160 = fadd contract float %62, %148\l  %161 = fmul contract float %160, %160\l  %162 = fadd contract float %87, %161\l  %163 = fneg contract float %162\l  %164 = fmul contract float %82, %163\l  %165 = fcmp olt float %164, -1.260000e+02\l  %166 = select i1 %165, float 0x3BF0000000000000, float 1.000000e+00\l  %167 = select i1 %165, float 6.400000e+01, float 0.000000e+00\l  %168 = fadd float %164, %167\l  %169 = tail call float @llvm.exp2.f32(float %168)\l  %170 = fmul float %166, %169\l  %171 = fadd contract float %71, %170\l  %172 = fadd contract float %62, %160\l  %173 = fmul contract float %172, %172\l  %174 = fadd contract float %87, %173\l  %175 = fneg contract float %174\l  %176 = fmul contract float %82, %175\l  %177 = fcmp olt float %176, -1.260000e+02\l  %178 = select i1 %177, float 0x3BF0000000000000, float 1.000000e+00\l  %179 = select i1 %177, float 6.400000e+01, float 0.000000e+00\l  %180 = fadd float %176, %179\l  %181 = tail call float @llvm.exp2.f32(float %180)\l  %182 = fmul float %178, %181\l  %183 = fadd contract float %72, %182\l  %184 = add nuw nsw i32 %73, 1\l  %185 = icmp eq i32 %184, %0\l  br i1 %185, label %186, label %64, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x615e960:s0 -> Node0x615e9f0;
	Node0x615e960:s1 -> Node0x615e960;
	Node0x615e9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%186:\l186:                                              \l  %187 = phi float [ 0.000000e+00, %5 ], [ %183, %64 ]\l  %188 = phi float [ 0.000000e+00, %5 ], [ %171, %64 ]\l  %189 = phi float [ 0.000000e+00, %5 ], [ %159, %64 ]\l  %190 = phi float [ 0.000000e+00, %5 ], [ %147, %64 ]\l  %191 = phi float [ 0.000000e+00, %5 ], [ %135, %64 ]\l  %192 = phi float [ 0.000000e+00, %5 ], [ %123, %64 ]\l  %193 = phi float [ 0.000000e+00, %5 ], [ %111, %64 ]\l  %194 = phi float [ 0.000000e+00, %5 ], [ %99, %64 ]\l  %195 = zext i32 %54 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %4, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %198 = fadd contract float %194, %197\l  store float %198, float addrspace(1)* %196, align 4, !tbaa !19\l  %199 = add i32 %54, 8\l  %200 = zext i32 %199 to i64\l  %201 = getelementptr inbounds float, float addrspace(1)* %4, i64 %200\l  %202 = load float, float addrspace(1)* %201, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %203 = fadd contract float %193, %202\l  store float %203, float addrspace(1)* %201, align 4, !tbaa !19\l  %204 = add i32 %54, 16\l  %205 = zext i32 %204 to i64\l  %206 = getelementptr inbounds float, float addrspace(1)* %4, i64 %205\l  %207 = load float, float addrspace(1)* %206, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %208 = fadd contract float %192, %207\l  store float %208, float addrspace(1)* %206, align 4, !tbaa !19\l  %209 = add i32 %54, 24\l  %210 = zext i32 %209 to i64\l  %211 = getelementptr inbounds float, float addrspace(1)* %4, i64 %210\l  %212 = load float, float addrspace(1)* %211, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %213 = fadd contract float %191, %212\l  store float %213, float addrspace(1)* %211, align 4, !tbaa !19\l  %214 = add i32 %54, 32\l  %215 = zext i32 %214 to i64\l  %216 = getelementptr inbounds float, float addrspace(1)* %4, i64 %215\l  %217 = load float, float addrspace(1)* %216, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %218 = fadd contract float %190, %217\l  store float %218, float addrspace(1)* %216, align 4, !tbaa !19\l  %219 = add i32 %54, 40\l  %220 = zext i32 %219 to i64\l  %221 = getelementptr inbounds float, float addrspace(1)* %4, i64 %220\l  %222 = load float, float addrspace(1)* %221, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %223 = fadd contract float %189, %222\l  store float %223, float addrspace(1)* %221, align 4, !tbaa !19\l  %224 = add i32 %54, 48\l  %225 = zext i32 %224 to i64\l  %226 = getelementptr inbounds float, float addrspace(1)* %4, i64 %225\l  %227 = load float, float addrspace(1)* %226, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %228 = fadd contract float %188, %227\l  store float %228, float addrspace(1)* %226, align 4, !tbaa !19\l  %229 = add i32 %54, 56\l  %230 = zext i32 %229 to i64\l  %231 = getelementptr inbounds float, float addrspace(1)* %4, i64 %230\l  %232 = load float, float addrspace(1)* %231, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %233 = fadd contract float %187, %232\l  store float %233, float addrspace(1)* %231, align 4, !tbaa !19\l  ret void\l}"];
}
