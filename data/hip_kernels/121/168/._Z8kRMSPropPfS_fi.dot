digraph "CFG for '_Z8kRMSPropPfS_fi' function" {
	label="CFG for '_Z8kRMSPropPfS_fi' function";

	Node0x4dc2b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = mul i32 %5, %10\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %16 = add i32 %14, %15\l  %17 = udiv i32 %13, %10\l  %18 = mul i32 %17, %10\l  %19 = icmp ugt i32 %13, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %10\l  %23 = icmp ult i32 %16, %3\l  br i1 %23, label %24, label %26\l|{<s0>T|<s1>F}}"];
	Node0x4dc2b00:s0 -> Node0x4dc50c0;
	Node0x4dc2b00:s1 -> Node0x4dc5150;
	Node0x4dc50c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%24:\l24:                                               \l  %25 = fsub contract float 1.000000e+00, %2\l  br label %27\l}"];
	Node0x4dc50c0 -> Node0x4dc5d30;
	Node0x4dc5150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%26:\l26:                                               \l  ret void\l}"];
	Node0x4dc5d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi i32 [ %16, %24 ], [ %60, %27 ]\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !16\l  %32 = fmul contract float %31, %2\l  %33 = fmul contract float %31, %32\l  %34 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %36 = fmul contract float %25, %35\l  %37 = fmul contract float %35, %36\l  %38 = fadd contract float %33, %37\l  %39 = fcmp olt float %38, 0x39F0000000000000\l  %40 = select i1 %39, float 0x41F0000000000000, float 1.000000e+00\l  %41 = fmul float %38, %40\l  %42 = tail call float @llvm.sqrt.f32(float %41)\l  %43 = bitcast float %42 to i32\l  %44 = add nsw i32 %43, -1\l  %45 = bitcast i32 %44 to float\l  %46 = add nsw i32 %43, 1\l  %47 = bitcast i32 %46 to float\l  %48 = tail call i1 @llvm.amdgcn.class.f32(float %41, i32 608)\l  %49 = select i1 %39, float 0x3EF0000000000000, float 1.000000e+00\l  %50 = fneg float %47\l  %51 = tail call float @llvm.fma.f32(float %50, float %42, float %41)\l  %52 = fcmp ogt float %51, 0.000000e+00\l  %53 = fneg float %45\l  %54 = tail call float @llvm.fma.f32(float %53, float %42, float %41)\l  %55 = fcmp ole float %54, 0.000000e+00\l  %56 = select i1 %55, float %45, float %42\l  %57 = select i1 %52, float %47, float %56\l  %58 = fmul float %49, %57\l  %59 = select i1 %48, float %41, float %58\l  store float %59, float addrspace(1)* %30, align 4, !tbaa !16\l  %60 = add i32 %28, %22\l  %61 = icmp ult i32 %60, %3\l  br i1 %61, label %27, label %26, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4dc5d30:s0 -> Node0x4dc5d30;
	Node0x4dc5d30:s1 -> Node0x4dc5150;
}
