digraph "CFG for '_Z16kExtractPatches2PfS_S_S_S_iiiiii' function" {
	label="CFG for '_Z16kExtractPatches2PfS_S_S_S_iiiiii' function";

	Node0x5eb2ef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %13 = freeze i32 %12\l  %14 = freeze i32 %5\l  %15 = udiv i32 %13, %14\l  %16 = mul i32 %15, %14\l  %17 = sub i32 %13, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %18, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %26 = add i32 %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %28 = getelementptr i8, i8 addrspace(4)* %19, i64 6\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 2, !range !4, !invariant.load !5\l  %31 = zext i16 %30 to i32\l  %32 = mul i32 %27, %31\l  %33 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %34 = add i32 %32, %33\l  %35 = icmp slt i32 %26, %8\l  %36 = icmp slt i32 %34, %9\l  %37 = select i1 %35, i1 %36, i1 false\l  br i1 %37, label %38, label %71\l|{<s0>T|<s1>F}}"];
	Node0x5eb2ef0:s0 -> Node0x5eb7a90;
	Node0x5eb2ef0:s1 -> Node0x5eb7b20;
	Node0x5eb7a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%38:\l38:                                               \l  %39 = sext i32 %17 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %3, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fptosi float %41 to i32\l  %43 = getelementptr inbounds float, float addrspace(1)* %2, i64 %39\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %45 = fptosi float %44 to i32\l  %46 = add nsw i32 %26, %45\l  %47 = getelementptr inbounds float, float addrspace(1)* %4, i64 %39\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = fcmp contract ogt float %48, 5.000000e-01\l  %50 = xor i32 %46, -1\l  %51 = add i32 %50, %6\l  %52 = select i1 %49, i32 %51, i32 %46\l  %53 = mul nsw i32 %15, %9\l  %54 = add nsw i32 %34, %53\l  %55 = mul nsw i32 %54, %8\l  %56 = add nsw i32 %55, %26\l  %57 = mul nsw i32 %56, %5\l  %58 = add nsw i32 %57, %17\l  %59 = sext i32 %58 to i64\l  %60 = mul nsw i32 %17, %10\l  %61 = add nsw i32 %15, %60\l  %62 = mul nsw i32 %61, %7\l  %63 = add i32 %34, %62\l  %64 = add i32 %63, %42\l  %65 = mul nsw i32 %64, %6\l  %66 = add nsw i32 %52, %65\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %59\l  store float %69, float addrspace(1)* %70, align 4, !tbaa !7\l  br label %71\l}"];
	Node0x5eb7a90 -> Node0x5eb7b20;
	Node0x5eb7b20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%71:\l71:                                               \l  ret void\l}"];
}
