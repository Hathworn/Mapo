digraph "CFG for '_Z9mapKernelPfiff' function" {
	label="CFG for '_Z9mapKernelPfiff' function";

	Node0x6278410 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = sitofp i32 %13 to float\l  %15 = fmul contract float %14, %3\l  %16 = fadd contract float %15, %2\l  switch i32 %1, label %297 [\l    i32 0, label %17\l    i32 1, label %153\l  ]\l|{<s0>def|<s1>0|<s2>1}}"];
	Node0x6278410:s0 -> Node0x6278f90;
	Node0x6278410:s1 -> Node0x627a500;
	Node0x6278410:s2 -> Node0x627a5c0;
	Node0x627a500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%17:\l17:                                               \l  %18 = tail call float @llvm.fabs.f32(float %16)\l  %19 = fcmp olt float %18, 1.310720e+05\l  br i1 %19, label %20, label %27\l|{<s0>T|<s1>F}}"];
	Node0x627a500:s0 -> Node0x627b400;
	Node0x627a500:s1 -> Node0x627b490;
	Node0x627b400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%20:\l20:                                               \l  %21 = fmul float %18, 0x3FE45F3060000000\l  %22 = tail call float @llvm.rint.f32(float %21)\l  %23 = tail call float @llvm.fma.f32(float %22, float 0xBFF921FB40000000,\l... float %18)\l  %24 = tail call float @llvm.fma.f32(float %22, float 0xBE74442D00000000,\l... float %23)\l  %25 = tail call float @llvm.fma.f32(float %22, float 0xBCF8469880000000,\l... float %24)\l  %26 = fptosi float %22 to i32\l  br label %133\l}"];
	Node0x627b400 -> Node0x627bed0;
	Node0x627b490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%27:\l27:                                               \l  %28 = bitcast float %18 to i32\l  %29 = lshr i32 %28, 23\l  %30 = and i32 %28, 8388607\l  %31 = or i32 %30, 8388608\l  %32 = zext i32 %31 to i64\l  %33 = mul nuw nsw i64 %32, 4266746795\l  %34 = trunc i64 %33 to i32\l  %35 = lshr i64 %33, 32\l  %36 = mul nuw nsw i64 %32, 1011060801\l  %37 = add nuw nsw i64 %35, %36\l  %38 = trunc i64 %37 to i32\l  %39 = lshr i64 %37, 32\l  %40 = mul nuw nsw i64 %32, 3680671129\l  %41 = add nuw nsw i64 %39, %40\l  %42 = trunc i64 %41 to i32\l  %43 = lshr i64 %41, 32\l  %44 = mul nuw nsw i64 %32, 4113882560\l  %45 = add nuw nsw i64 %43, %44\l  %46 = trunc i64 %45 to i32\l  %47 = lshr i64 %45, 32\l  %48 = mul nuw nsw i64 %32, 4230436817\l  %49 = add nuw nsw i64 %47, %48\l  %50 = trunc i64 %49 to i32\l  %51 = lshr i64 %49, 32\l  %52 = mul nuw nsw i64 %32, 1313084713\l  %53 = add nuw nsw i64 %51, %52\l  %54 = trunc i64 %53 to i32\l  %55 = lshr i64 %53, 32\l  %56 = mul nuw nsw i64 %32, 2734261102\l  %57 = add nuw nsw i64 %55, %56\l  %58 = trunc i64 %57 to i32\l  %59 = lshr i64 %57, 32\l  %60 = trunc i64 %59 to i32\l  %61 = add nsw i32 %29, -120\l  %62 = icmp ugt i32 %61, 63\l  %63 = select i1 %62, i32 %54, i32 %60\l  %64 = select i1 %62, i32 %50, i32 %58\l  %65 = select i1 %62, i32 %46, i32 %54\l  %66 = select i1 %62, i32 %42, i32 %50\l  %67 = select i1 %62, i32 %38, i32 %46\l  %68 = select i1 %62, i32 %34, i32 %42\l  %69 = select i1 %62, i32 -64, i32 0\l  %70 = add nsw i32 %69, %61\l  %71 = icmp ugt i32 %70, 31\l  %72 = select i1 %71, i32 %64, i32 %63\l  %73 = select i1 %71, i32 %65, i32 %64\l  %74 = select i1 %71, i32 %66, i32 %65\l  %75 = select i1 %71, i32 %67, i32 %66\l  %76 = select i1 %71, i32 %68, i32 %67\l  %77 = select i1 %71, i32 -32, i32 0\l  %78 = add nsw i32 %77, %70\l  %79 = icmp ugt i32 %78, 31\l  %80 = select i1 %79, i32 %73, i32 %72\l  %81 = select i1 %79, i32 %74, i32 %73\l  %82 = select i1 %79, i32 %75, i32 %74\l  %83 = select i1 %79, i32 %76, i32 %75\l  %84 = select i1 %79, i32 -32, i32 0\l  %85 = add nsw i32 %84, %78\l  %86 = icmp eq i32 %85, 0\l  %87 = sub nsw i32 32, %85\l  %88 = tail call i32 @llvm.fshr.i32(i32 %80, i32 %81, i32 %87)\l  %89 = tail call i32 @llvm.fshr.i32(i32 %81, i32 %82, i32 %87)\l  %90 = tail call i32 @llvm.fshr.i32(i32 %82, i32 %83, i32 %87)\l  %91 = select i1 %86, i32 %80, i32 %88\l  %92 = select i1 %86, i32 %81, i32 %89\l  %93 = select i1 %86, i32 %82, i32 %90\l  %94 = lshr i32 %91, 29\l  %95 = tail call i32 @llvm.fshl.i32(i32 %91, i32 %92, i32 2)\l  %96 = tail call i32 @llvm.fshl.i32(i32 %92, i32 %93, i32 2)\l  %97 = tail call i32 @llvm.fshl.i32(i32 %93, i32 %83, i32 2)\l  %98 = and i32 %94, 1\l  %99 = sub nsw i32 0, %98\l  %100 = shl i32 %94, 31\l  %101 = xor i32 %95, %99\l  %102 = xor i32 %96, %99\l  %103 = xor i32 %97, %99\l  %104 = tail call i32 @llvm.ctlz.i32(i32 %101, i1 false), !range !7\l  %105 = sub nsw i32 31, %104\l  %106 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %105)\l  %107 = tail call i32 @llvm.fshr.i32(i32 %102, i32 %103, i32 %105)\l  %108 = shl nuw nsw i32 %104, 23\l  %109 = sub nuw nsw i32 1056964608, %108\l  %110 = lshr i32 %106, 9\l  %111 = or i32 %110, %109\l  %112 = or i32 %111, %100\l  %113 = bitcast i32 %112 to float\l  %114 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 23)\l  %115 = tail call i32 @llvm.ctlz.i32(i32 %114, i1 false), !range !7\l  %116 = fmul float %113, 0x3FF921FB40000000\l  %117 = add nuw nsw i32 %115, %104\l  %118 = shl nuw nsw i32 %117, 23\l  %119 = sub nuw nsw i32 855638016, %118\l  %120 = sub nsw i32 31, %115\l  %121 = tail call i32 @llvm.fshr.i32(i32 %114, i32 %107, i32 %120)\l  %122 = lshr i32 %121, 9\l  %123 = or i32 %119, %122\l  %124 = or i32 %123, %100\l  %125 = bitcast i32 %124 to float\l  %126 = fneg float %116\l  %127 = tail call float @llvm.fma.f32(float %113, float 0x3FF921FB40000000,\l... float %126)\l  %128 = tail call float @llvm.fma.f32(float %113, float 0x3E74442D00000000,\l... float %127)\l  %129 = tail call float @llvm.fma.f32(float %125, float 0x3FF921FB40000000,\l... float %128)\l  %130 = fadd float %116, %129\l  %131 = lshr i32 %91, 30\l  %132 = add nuw nsw i32 %98, %131\l  br label %133\l}"];
	Node0x627b490 -> Node0x627bed0;
	Node0x627bed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%133:\l133:                                              \l  %134 = phi float [ %25, %20 ], [ %130, %27 ]\l  %135 = phi i32 [ %26, %20 ], [ %132, %27 ]\l  %136 = fmul float %134, %134\l  %137 = tail call float @llvm.fmuladd.f32(float %136, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %138 = tail call float @llvm.fmuladd.f32(float %136, float %137, float\l... 0xBFC55553A0000000)\l  %139 = fmul float %136, %138\l  %140 = tail call float @llvm.fmuladd.f32(float %134, float %139, float %134)\l  %141 = tail call float @llvm.fmuladd.f32(float %136, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %142 = tail call float @llvm.fmuladd.f32(float %136, float %141, float\l... 0x3FA5557EE0000000)\l  %143 = tail call float @llvm.fmuladd.f32(float %136, float %142, float\l... 0xBFE0000080000000)\l  %144 = tail call float @llvm.fmuladd.f32(float %136, float %143, float\l... 1.000000e+00)\l  %145 = fneg float %140\l  %146 = and i32 %135, 1\l  %147 = icmp eq i32 %146, 0\l  %148 = select i1 %147, float %144, float %145\l  %149 = bitcast float %148 to i32\l  %150 = shl i32 %135, 30\l  %151 = and i32 %150, -2147483648\l  %152 = xor i32 %151, %149\l  br label %437\l}"];
	Node0x627bed0 -> Node0x6282ee0;
	Node0x627a5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%153:\l153:                                              \l  %154 = tail call float @llvm.fabs.f32(float %16)\l  %155 = fcmp olt float %154, 1.310720e+05\l  br i1 %155, label %156, label %164\l|{<s0>T|<s1>F}}"];
	Node0x627a5c0:s0 -> Node0x6283150;
	Node0x627a5c0:s1 -> Node0x62831a0;
	Node0x6283150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%156:\l156:                                              \l  %157 = fmul float %154, 0x3FE45F3060000000\l  %158 = tail call float @llvm.rint.f32(float %157)\l  %159 = tail call float @llvm.fma.f32(float %158, float 0xBFF921FB40000000,\l... float %154)\l  %160 = tail call float @llvm.fma.f32(float %158, float 0xBE74442D00000000,\l... float %159)\l  %161 = tail call float @llvm.fma.f32(float %158, float 0xBCF8469880000000,\l... float %160)\l  %162 = fptosi float %158 to i32\l  %163 = bitcast float %154 to i32\l  br label %270\l}"];
	Node0x6283150 -> Node0x62838d0;
	Node0x62831a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%164:\l164:                                              \l  %165 = bitcast float %154 to i32\l  %166 = lshr i32 %165, 23\l  %167 = and i32 %165, 8388607\l  %168 = or i32 %167, 8388608\l  %169 = zext i32 %168 to i64\l  %170 = mul nuw nsw i64 %169, 4266746795\l  %171 = trunc i64 %170 to i32\l  %172 = lshr i64 %170, 32\l  %173 = mul nuw nsw i64 %169, 1011060801\l  %174 = add nuw nsw i64 %172, %173\l  %175 = trunc i64 %174 to i32\l  %176 = lshr i64 %174, 32\l  %177 = mul nuw nsw i64 %169, 3680671129\l  %178 = add nuw nsw i64 %176, %177\l  %179 = trunc i64 %178 to i32\l  %180 = lshr i64 %178, 32\l  %181 = mul nuw nsw i64 %169, 4113882560\l  %182 = add nuw nsw i64 %180, %181\l  %183 = trunc i64 %182 to i32\l  %184 = lshr i64 %182, 32\l  %185 = mul nuw nsw i64 %169, 4230436817\l  %186 = add nuw nsw i64 %184, %185\l  %187 = trunc i64 %186 to i32\l  %188 = lshr i64 %186, 32\l  %189 = mul nuw nsw i64 %169, 1313084713\l  %190 = add nuw nsw i64 %188, %189\l  %191 = trunc i64 %190 to i32\l  %192 = lshr i64 %190, 32\l  %193 = mul nuw nsw i64 %169, 2734261102\l  %194 = add nuw nsw i64 %192, %193\l  %195 = trunc i64 %194 to i32\l  %196 = lshr i64 %194, 32\l  %197 = trunc i64 %196 to i32\l  %198 = add nsw i32 %166, -120\l  %199 = icmp ugt i32 %198, 63\l  %200 = select i1 %199, i32 %191, i32 %197\l  %201 = select i1 %199, i32 %187, i32 %195\l  %202 = select i1 %199, i32 %183, i32 %191\l  %203 = select i1 %199, i32 %179, i32 %187\l  %204 = select i1 %199, i32 %175, i32 %183\l  %205 = select i1 %199, i32 %171, i32 %179\l  %206 = select i1 %199, i32 -64, i32 0\l  %207 = add nsw i32 %206, %198\l  %208 = icmp ugt i32 %207, 31\l  %209 = select i1 %208, i32 %201, i32 %200\l  %210 = select i1 %208, i32 %202, i32 %201\l  %211 = select i1 %208, i32 %203, i32 %202\l  %212 = select i1 %208, i32 %204, i32 %203\l  %213 = select i1 %208, i32 %205, i32 %204\l  %214 = select i1 %208, i32 -32, i32 0\l  %215 = add nsw i32 %214, %207\l  %216 = icmp ugt i32 %215, 31\l  %217 = select i1 %216, i32 %210, i32 %209\l  %218 = select i1 %216, i32 %211, i32 %210\l  %219 = select i1 %216, i32 %212, i32 %211\l  %220 = select i1 %216, i32 %213, i32 %212\l  %221 = select i1 %216, i32 -32, i32 0\l  %222 = add nsw i32 %221, %215\l  %223 = icmp eq i32 %222, 0\l  %224 = sub nsw i32 32, %222\l  %225 = tail call i32 @llvm.fshr.i32(i32 %217, i32 %218, i32 %224)\l  %226 = tail call i32 @llvm.fshr.i32(i32 %218, i32 %219, i32 %224)\l  %227 = tail call i32 @llvm.fshr.i32(i32 %219, i32 %220, i32 %224)\l  %228 = select i1 %223, i32 %217, i32 %225\l  %229 = select i1 %223, i32 %218, i32 %226\l  %230 = select i1 %223, i32 %219, i32 %227\l  %231 = lshr i32 %228, 29\l  %232 = tail call i32 @llvm.fshl.i32(i32 %228, i32 %229, i32 2)\l  %233 = tail call i32 @llvm.fshl.i32(i32 %229, i32 %230, i32 2)\l  %234 = tail call i32 @llvm.fshl.i32(i32 %230, i32 %220, i32 2)\l  %235 = and i32 %231, 1\l  %236 = sub nsw i32 0, %235\l  %237 = shl i32 %231, 31\l  %238 = xor i32 %232, %236\l  %239 = xor i32 %233, %236\l  %240 = xor i32 %234, %236\l  %241 = tail call i32 @llvm.ctlz.i32(i32 %238, i1 false), !range !7\l  %242 = sub nsw i32 31, %241\l  %243 = tail call i32 @llvm.fshr.i32(i32 %238, i32 %239, i32 %242)\l  %244 = tail call i32 @llvm.fshr.i32(i32 %239, i32 %240, i32 %242)\l  %245 = shl nuw nsw i32 %241, 23\l  %246 = sub nuw nsw i32 1056964608, %245\l  %247 = lshr i32 %243, 9\l  %248 = or i32 %247, %246\l  %249 = or i32 %248, %237\l  %250 = bitcast i32 %249 to float\l  %251 = tail call i32 @llvm.fshl.i32(i32 %243, i32 %244, i32 23)\l  %252 = tail call i32 @llvm.ctlz.i32(i32 %251, i1 false), !range !7\l  %253 = fmul float %250, 0x3FF921FB40000000\l  %254 = add nuw nsw i32 %252, %241\l  %255 = shl nuw nsw i32 %254, 23\l  %256 = sub nuw nsw i32 855638016, %255\l  %257 = sub nsw i32 31, %252\l  %258 = tail call i32 @llvm.fshr.i32(i32 %251, i32 %244, i32 %257)\l  %259 = lshr i32 %258, 9\l  %260 = or i32 %256, %259\l  %261 = or i32 %260, %237\l  %262 = bitcast i32 %261 to float\l  %263 = fneg float %253\l  %264 = tail call float @llvm.fma.f32(float %250, float 0x3FF921FB40000000,\l... float %263)\l  %265 = tail call float @llvm.fma.f32(float %250, float 0x3E74442D00000000,\l... float %264)\l  %266 = tail call float @llvm.fma.f32(float %262, float 0x3FF921FB40000000,\l... float %265)\l  %267 = fadd float %253, %266\l  %268 = lshr i32 %228, 30\l  %269 = add nuw nsw i32 %235, %268\l  br label %270\l}"];
	Node0x62831a0 -> Node0x62838d0;
	Node0x62838d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%270:\l270:                                              \l  %271 = phi i32 [ %163, %156 ], [ %165, %164 ]\l  %272 = phi float [ %161, %156 ], [ %267, %164 ]\l  %273 = phi i32 [ %162, %156 ], [ %269, %164 ]\l  %274 = and i32 %273, 1\l  %275 = fmul float %272, %272\l  %276 = tail call float @llvm.fmuladd.f32(float %275, float\l... 0xBF919DBA60000000, float 0x3FD8A8B0E0000000)\l  %277 = tail call float @llvm.fmuladd.f32(float %275, float\l... 0x3F92E29000000000, float 0xBFE07266E0000000)\l  %278 = tail call float @llvm.fmuladd.f32(float %275, float %277, float\l... 0x3FF27E84A0000000)\l  %279 = tail call float @llvm.amdgcn.rcp.f32(float %278)\l  %280 = fmul float %276, %279\l  %281 = fmul float %275, %280\l  %282 = tail call float @llvm.fma.f32(float %281, float %272, float %272)\l  %283 = fsub float %282, %272\l  %284 = fneg float %283\l  %285 = tail call float @llvm.fma.f32(float %281, float %272, float %284)\l  %286 = tail call float @llvm.amdgcn.rcp.f32(float %282)\l  %287 = fneg float %286\l  %288 = tail call float @llvm.fma.f32(float %282, float %287, float\l... 1.000000e+00)\l  %289 = tail call float @llvm.fma.f32(float %285, float %287, float %288)\l  %290 = tail call float @llvm.fma.f32(float %289, float %287, float %287)\l  %291 = icmp eq i32 %274, 0\l  %292 = select i1 %291, float %282, float %290\l  %293 = bitcast float %292 to i32\l  %294 = bitcast float %16 to i32\l  %295 = xor i32 %271, %294\l  %296 = xor i32 %295, %293\l  br label %437\l}"];
	Node0x62838d0 -> Node0x6282ee0;
	Node0x6278f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%297:\l297:                                              \l  %298 = tail call float @llvm.fabs.f32(float %16)\l  %299 = fcmp olt float %298, 1.310720e+05\l  br i1 %299, label %300, label %308\l|{<s0>T|<s1>F}}"];
	Node0x6278f90:s0 -> Node0x628a000;
	Node0x6278f90:s1 -> Node0x628a050;
	Node0x628a000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%300:\l300:                                              \l  %301 = fmul float %298, 0x3FE45F3060000000\l  %302 = tail call float @llvm.rint.f32(float %301)\l  %303 = tail call float @llvm.fma.f32(float %302, float 0xBFF921FB40000000,\l... float %298)\l  %304 = tail call float @llvm.fma.f32(float %302, float 0xBE74442D00000000,\l... float %303)\l  %305 = tail call float @llvm.fma.f32(float %302, float 0xBCF8469880000000,\l... float %304)\l  %306 = fptosi float %302 to i32\l  %307 = bitcast float %298 to i32\l  br label %414\l}"];
	Node0x628a000 -> Node0x628a740;
	Node0x628a050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%308:\l308:                                              \l  %309 = bitcast float %298 to i32\l  %310 = lshr i32 %309, 23\l  %311 = and i32 %309, 8388607\l  %312 = or i32 %311, 8388608\l  %313 = zext i32 %312 to i64\l  %314 = mul nuw nsw i64 %313, 4266746795\l  %315 = trunc i64 %314 to i32\l  %316 = lshr i64 %314, 32\l  %317 = mul nuw nsw i64 %313, 1011060801\l  %318 = add nuw nsw i64 %316, %317\l  %319 = trunc i64 %318 to i32\l  %320 = lshr i64 %318, 32\l  %321 = mul nuw nsw i64 %313, 3680671129\l  %322 = add nuw nsw i64 %320, %321\l  %323 = trunc i64 %322 to i32\l  %324 = lshr i64 %322, 32\l  %325 = mul nuw nsw i64 %313, 4113882560\l  %326 = add nuw nsw i64 %324, %325\l  %327 = trunc i64 %326 to i32\l  %328 = lshr i64 %326, 32\l  %329 = mul nuw nsw i64 %313, 4230436817\l  %330 = add nuw nsw i64 %328, %329\l  %331 = trunc i64 %330 to i32\l  %332 = lshr i64 %330, 32\l  %333 = mul nuw nsw i64 %313, 1313084713\l  %334 = add nuw nsw i64 %332, %333\l  %335 = trunc i64 %334 to i32\l  %336 = lshr i64 %334, 32\l  %337 = mul nuw nsw i64 %313, 2734261102\l  %338 = add nuw nsw i64 %336, %337\l  %339 = trunc i64 %338 to i32\l  %340 = lshr i64 %338, 32\l  %341 = trunc i64 %340 to i32\l  %342 = add nsw i32 %310, -120\l  %343 = icmp ugt i32 %342, 63\l  %344 = select i1 %343, i32 %335, i32 %341\l  %345 = select i1 %343, i32 %331, i32 %339\l  %346 = select i1 %343, i32 %327, i32 %335\l  %347 = select i1 %343, i32 %323, i32 %331\l  %348 = select i1 %343, i32 %319, i32 %327\l  %349 = select i1 %343, i32 %315, i32 %323\l  %350 = select i1 %343, i32 -64, i32 0\l  %351 = add nsw i32 %350, %342\l  %352 = icmp ugt i32 %351, 31\l  %353 = select i1 %352, i32 %345, i32 %344\l  %354 = select i1 %352, i32 %346, i32 %345\l  %355 = select i1 %352, i32 %347, i32 %346\l  %356 = select i1 %352, i32 %348, i32 %347\l  %357 = select i1 %352, i32 %349, i32 %348\l  %358 = select i1 %352, i32 -32, i32 0\l  %359 = add nsw i32 %358, %351\l  %360 = icmp ugt i32 %359, 31\l  %361 = select i1 %360, i32 %354, i32 %353\l  %362 = select i1 %360, i32 %355, i32 %354\l  %363 = select i1 %360, i32 %356, i32 %355\l  %364 = select i1 %360, i32 %357, i32 %356\l  %365 = select i1 %360, i32 -32, i32 0\l  %366 = add nsw i32 %365, %359\l  %367 = icmp eq i32 %366, 0\l  %368 = sub nsw i32 32, %366\l  %369 = tail call i32 @llvm.fshr.i32(i32 %361, i32 %362, i32 %368)\l  %370 = tail call i32 @llvm.fshr.i32(i32 %362, i32 %363, i32 %368)\l  %371 = tail call i32 @llvm.fshr.i32(i32 %363, i32 %364, i32 %368)\l  %372 = select i1 %367, i32 %361, i32 %369\l  %373 = select i1 %367, i32 %362, i32 %370\l  %374 = select i1 %367, i32 %363, i32 %371\l  %375 = lshr i32 %372, 29\l  %376 = tail call i32 @llvm.fshl.i32(i32 %372, i32 %373, i32 2)\l  %377 = tail call i32 @llvm.fshl.i32(i32 %373, i32 %374, i32 2)\l  %378 = tail call i32 @llvm.fshl.i32(i32 %374, i32 %364, i32 2)\l  %379 = and i32 %375, 1\l  %380 = sub nsw i32 0, %379\l  %381 = shl i32 %375, 31\l  %382 = xor i32 %376, %380\l  %383 = xor i32 %377, %380\l  %384 = xor i32 %378, %380\l  %385 = tail call i32 @llvm.ctlz.i32(i32 %382, i1 false), !range !7\l  %386 = sub nsw i32 31, %385\l  %387 = tail call i32 @llvm.fshr.i32(i32 %382, i32 %383, i32 %386)\l  %388 = tail call i32 @llvm.fshr.i32(i32 %383, i32 %384, i32 %386)\l  %389 = shl nuw nsw i32 %385, 23\l  %390 = sub nuw nsw i32 1056964608, %389\l  %391 = lshr i32 %387, 9\l  %392 = or i32 %391, %390\l  %393 = or i32 %392, %381\l  %394 = bitcast i32 %393 to float\l  %395 = tail call i32 @llvm.fshl.i32(i32 %387, i32 %388, i32 23)\l  %396 = tail call i32 @llvm.ctlz.i32(i32 %395, i1 false), !range !7\l  %397 = fmul float %394, 0x3FF921FB40000000\l  %398 = add nuw nsw i32 %396, %385\l  %399 = shl nuw nsw i32 %398, 23\l  %400 = sub nuw nsw i32 855638016, %399\l  %401 = sub nsw i32 31, %396\l  %402 = tail call i32 @llvm.fshr.i32(i32 %395, i32 %388, i32 %401)\l  %403 = lshr i32 %402, 9\l  %404 = or i32 %400, %403\l  %405 = or i32 %404, %381\l  %406 = bitcast i32 %405 to float\l  %407 = fneg float %397\l  %408 = tail call float @llvm.fma.f32(float %394, float 0x3FF921FB40000000,\l... float %407)\l  %409 = tail call float @llvm.fma.f32(float %394, float 0x3E74442D00000000,\l... float %408)\l  %410 = tail call float @llvm.fma.f32(float %406, float 0x3FF921FB40000000,\l... float %409)\l  %411 = fadd float %397, %410\l  %412 = lshr i32 %372, 30\l  %413 = add nuw nsw i32 %379, %412\l  br label %414\l}"];
	Node0x628a050 -> Node0x628a740;
	Node0x628a740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%414:\l414:                                              \l  %415 = phi i32 [ %307, %300 ], [ %309, %308 ]\l  %416 = phi float [ %305, %300 ], [ %411, %308 ]\l  %417 = phi i32 [ %306, %300 ], [ %413, %308 ]\l  %418 = fmul float %416, %416\l  %419 = tail call float @llvm.fmuladd.f32(float %418, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %420 = tail call float @llvm.fmuladd.f32(float %418, float %419, float\l... 0xBFC55553A0000000)\l  %421 = fmul float %418, %420\l  %422 = tail call float @llvm.fmuladd.f32(float %416, float %421, float %416)\l  %423 = tail call float @llvm.fmuladd.f32(float %418, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %424 = tail call float @llvm.fmuladd.f32(float %418, float %423, float\l... 0x3FA5557EE0000000)\l  %425 = tail call float @llvm.fmuladd.f32(float %418, float %424, float\l... 0xBFE0000080000000)\l  %426 = tail call float @llvm.fmuladd.f32(float %418, float %425, float\l... 1.000000e+00)\l  %427 = and i32 %417, 1\l  %428 = icmp eq i32 %427, 0\l  %429 = select i1 %428, float %422, float %426\l  %430 = bitcast float %429 to i32\l  %431 = shl i32 %417, 30\l  %432 = and i32 %431, -2147483648\l  %433 = bitcast float %16 to i32\l  %434 = xor i32 %415, %433\l  %435 = xor i32 %434, %432\l  %436 = xor i32 %435, %430\l  br label %437\l}"];
	Node0x628a740 -> Node0x6282ee0;
	Node0x6282ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%437:\l437:                                              \l  %438 = phi i32 [ %436, %414 ], [ %296, %270 ], [ %152, %133 ]\l  %439 = phi float [ %298, %414 ], [ %154, %270 ], [ %18, %133 ]\l  %440 = bitcast i32 %438 to float\l  %441 = tail call i1 @llvm.amdgcn.class.f32(float %439, i32 504)\l  %442 = select i1 %441, float %440, float 0x7FF8000000000000\l  %443 = shl nsw i32 %13, 1\l  %444 = sext i32 %443 to i64\l  %445 = getelementptr inbounds float, float addrspace(1)* %0, i64 %444\l  store float %16, float addrspace(1)* %445, align 4, !tbaa !8\l  %446 = add nuw nsw i32 %443, 1\l  %447 = sext i32 %446 to i64\l  %448 = getelementptr inbounds float, float addrspace(1)* %0, i64 %447\l  store float %442, float addrspace(1)* %448, align 4, !tbaa !8\l  ret void\l}"];
}
