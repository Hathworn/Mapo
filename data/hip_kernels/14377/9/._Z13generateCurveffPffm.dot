digraph "CFG for '_Z13generateCurveffPffm' function" {
	label="CFG for '_Z13generateCurveffPffm' function";

	Node0x6494450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = sitofp i32 %14 to float\l  %16 = fmul contract float %15, %1\l  %17 = fadd contract float %16, %3\l  %18 = sext i32 %14 to i64\l  %19 = icmp ult i64 %18, %4\l  br i1 %19, label %20, label %458\l|{<s0>T|<s1>F}}"];
	Node0x6494450:s0 -> Node0x6496560;
	Node0x6494450:s1 -> Node0x64965f0;
	Node0x6496560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%20:\l20:                                               \l  %21 = fmul contract float %17, %0\l  %22 = fadd contract float %21, %0\l  %23 = tail call float @llvm.fabs.f32(float %22)\l  %24 = fcmp olt float %23, 1.310720e+05\l  br i1 %24, label %25, label %32\l|{<s0>T|<s1>F}}"];
	Node0x6496560:s0 -> Node0x64974d0;
	Node0x6496560:s1 -> Node0x6497560;
	Node0x64974d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%25:\l25:                                               \l  %26 = fmul float %23, 0x3FE45F3060000000\l  %27 = tail call float @llvm.rint.f32(float %26)\l  %28 = tail call float @llvm.fma.f32(float %27, float 0xBFF921FB40000000,\l... float %23)\l  %29 = tail call float @llvm.fma.f32(float %27, float 0xBE74442D00000000,\l... float %28)\l  %30 = tail call float @llvm.fma.f32(float %27, float 0xBCF8469880000000,\l... float %29)\l  %31 = fptosi float %27 to i32\l  br label %138\l}"];
	Node0x64974d0 -> Node0x6497fc0;
	Node0x6497560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%32:\l32:                                               \l  %33 = bitcast float %23 to i32\l  %34 = lshr i32 %33, 23\l  %35 = and i32 %33, 8388607\l  %36 = or i32 %35, 8388608\l  %37 = zext i32 %36 to i64\l  %38 = mul nuw nsw i64 %37, 4266746795\l  %39 = trunc i64 %38 to i32\l  %40 = lshr i64 %38, 32\l  %41 = mul nuw nsw i64 %37, 1011060801\l  %42 = add nuw nsw i64 %40, %41\l  %43 = trunc i64 %42 to i32\l  %44 = lshr i64 %42, 32\l  %45 = mul nuw nsw i64 %37, 3680671129\l  %46 = add nuw nsw i64 %44, %45\l  %47 = trunc i64 %46 to i32\l  %48 = lshr i64 %46, 32\l  %49 = mul nuw nsw i64 %37, 4113882560\l  %50 = add nuw nsw i64 %48, %49\l  %51 = trunc i64 %50 to i32\l  %52 = lshr i64 %50, 32\l  %53 = mul nuw nsw i64 %37, 4230436817\l  %54 = add nuw nsw i64 %52, %53\l  %55 = trunc i64 %54 to i32\l  %56 = lshr i64 %54, 32\l  %57 = mul nuw nsw i64 %37, 1313084713\l  %58 = add nuw nsw i64 %56, %57\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = mul nuw nsw i64 %37, 2734261102\l  %62 = add nuw nsw i64 %60, %61\l  %63 = trunc i64 %62 to i32\l  %64 = lshr i64 %62, 32\l  %65 = trunc i64 %64 to i32\l  %66 = add nsw i32 %34, -120\l  %67 = icmp ugt i32 %66, 63\l  %68 = select i1 %67, i32 %59, i32 %65\l  %69 = select i1 %67, i32 %55, i32 %63\l  %70 = select i1 %67, i32 %51, i32 %59\l  %71 = select i1 %67, i32 %47, i32 %55\l  %72 = select i1 %67, i32 %43, i32 %51\l  %73 = select i1 %67, i32 %39, i32 %47\l  %74 = select i1 %67, i32 -64, i32 0\l  %75 = add nsw i32 %74, %66\l  %76 = icmp ugt i32 %75, 31\l  %77 = select i1 %76, i32 %69, i32 %68\l  %78 = select i1 %76, i32 %70, i32 %69\l  %79 = select i1 %76, i32 %71, i32 %70\l  %80 = select i1 %76, i32 %72, i32 %71\l  %81 = select i1 %76, i32 %73, i32 %72\l  %82 = select i1 %76, i32 -32, i32 0\l  %83 = add nsw i32 %82, %75\l  %84 = icmp ugt i32 %83, 31\l  %85 = select i1 %84, i32 %78, i32 %77\l  %86 = select i1 %84, i32 %79, i32 %78\l  %87 = select i1 %84, i32 %80, i32 %79\l  %88 = select i1 %84, i32 %81, i32 %80\l  %89 = select i1 %84, i32 -32, i32 0\l  %90 = add nsw i32 %89, %83\l  %91 = icmp eq i32 %90, 0\l  %92 = sub nsw i32 32, %90\l  %93 = tail call i32 @llvm.fshr.i32(i32 %85, i32 %86, i32 %92)\l  %94 = tail call i32 @llvm.fshr.i32(i32 %86, i32 %87, i32 %92)\l  %95 = tail call i32 @llvm.fshr.i32(i32 %87, i32 %88, i32 %92)\l  %96 = select i1 %91, i32 %85, i32 %93\l  %97 = select i1 %91, i32 %86, i32 %94\l  %98 = select i1 %91, i32 %87, i32 %95\l  %99 = lshr i32 %96, 29\l  %100 = tail call i32 @llvm.fshl.i32(i32 %96, i32 %97, i32 2)\l  %101 = tail call i32 @llvm.fshl.i32(i32 %97, i32 %98, i32 2)\l  %102 = tail call i32 @llvm.fshl.i32(i32 %98, i32 %88, i32 2)\l  %103 = and i32 %99, 1\l  %104 = sub nsw i32 0, %103\l  %105 = shl i32 %99, 31\l  %106 = xor i32 %100, %104\l  %107 = xor i32 %101, %104\l  %108 = xor i32 %102, %104\l  %109 = tail call i32 @llvm.ctlz.i32(i32 %106, i1 false), !range !7\l  %110 = sub nsw i32 31, %109\l  %111 = tail call i32 @llvm.fshr.i32(i32 %106, i32 %107, i32 %110)\l  %112 = tail call i32 @llvm.fshr.i32(i32 %107, i32 %108, i32 %110)\l  %113 = shl nuw nsw i32 %109, 23\l  %114 = sub nuw nsw i32 1056964608, %113\l  %115 = lshr i32 %111, 9\l  %116 = or i32 %115, %114\l  %117 = or i32 %116, %105\l  %118 = bitcast i32 %117 to float\l  %119 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 23)\l  %120 = tail call i32 @llvm.ctlz.i32(i32 %119, i1 false), !range !7\l  %121 = fmul float %118, 0x3FF921FB40000000\l  %122 = add nuw nsw i32 %120, %109\l  %123 = shl nuw nsw i32 %122, 23\l  %124 = sub nuw nsw i32 855638016, %123\l  %125 = sub nsw i32 31, %120\l  %126 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %112, i32 %125)\l  %127 = lshr i32 %126, 9\l  %128 = or i32 %124, %127\l  %129 = or i32 %128, %105\l  %130 = bitcast i32 %129 to float\l  %131 = fneg float %121\l  %132 = tail call float @llvm.fma.f32(float %118, float 0x3FF921FB40000000,\l... float %131)\l  %133 = tail call float @llvm.fma.f32(float %118, float 0x3E74442D00000000,\l... float %132)\l  %134 = tail call float @llvm.fma.f32(float %130, float 0x3FF921FB40000000,\l... float %133)\l  %135 = fadd float %121, %134\l  %136 = lshr i32 %96, 30\l  %137 = add nuw nsw i32 %103, %136\l  br label %138\l}"];
	Node0x6497560 -> Node0x6497fc0;
	Node0x6497fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%138:\l138:                                              \l  %139 = phi float [ %30, %25 ], [ %135, %32 ]\l  %140 = phi i32 [ %31, %25 ], [ %137, %32 ]\l  %141 = fmul float %139, %139\l  %142 = tail call float @llvm.fmuladd.f32(float %141, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %143 = tail call float @llvm.fmuladd.f32(float %141, float %142, float\l... 0xBFC55553A0000000)\l  %144 = fmul float %141, %143\l  %145 = tail call float @llvm.fmuladd.f32(float %139, float %144, float %139)\l  %146 = tail call float @llvm.fmuladd.f32(float %141, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %147 = tail call float @llvm.fmuladd.f32(float %141, float %146, float\l... 0x3FA5557EE0000000)\l  %148 = tail call float @llvm.fmuladd.f32(float %141, float %147, float\l... 0xBFE0000080000000)\l  %149 = tail call float @llvm.fmuladd.f32(float %141, float %148, float\l... 1.000000e+00)\l  %150 = fneg float %145\l  %151 = and i32 %140, 1\l  %152 = icmp eq i32 %151, 0\l  %153 = select i1 %152, float %149, float %150\l  %154 = bitcast float %153 to i32\l  %155 = shl i32 %140, 30\l  %156 = and i32 %155, -2147483648\l  %157 = xor i32 %156, %154\l  %158 = bitcast i32 %157 to float\l  %159 = tail call i1 @llvm.amdgcn.class.f32(float %23, i32 504)\l  %160 = select i1 %159, float %158, float 0x7FF8000000000000\l  %161 = fdiv contract float %160, %17\l  %162 = mul nsw i32 %14, 3\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %2, i64 %163\l  store float %161, float addrspace(1)* %164, align 4, !tbaa !8\l  br i1 %24, label %165, label %173\l|{<s0>T|<s1>F}}"];
	Node0x6497fc0:s0 -> Node0x649f830;
	Node0x6497fc0:s1 -> Node0x649f8c0;
	Node0x649f830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%165:\l165:                                              \l  %166 = fmul float %23, 0x3FE45F3060000000\l  %167 = tail call float @llvm.rint.f32(float %166)\l  %168 = tail call float @llvm.fma.f32(float %167, float 0xBFF921FB40000000,\l... float %23)\l  %169 = tail call float @llvm.fma.f32(float %167, float 0xBE74442D00000000,\l... float %168)\l  %170 = tail call float @llvm.fma.f32(float %167, float 0xBCF8469880000000,\l... float %169)\l  %171 = fptosi float %167 to i32\l  %172 = bitcast float %23 to i32\l  br label %279\l}"];
	Node0x649f830 -> Node0x649fff0;
	Node0x649f8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%173:\l173:                                              \l  %174 = bitcast float %23 to i32\l  %175 = lshr i32 %174, 23\l  %176 = and i32 %174, 8388607\l  %177 = or i32 %176, 8388608\l  %178 = zext i32 %177 to i64\l  %179 = mul nuw nsw i64 %178, 4266746795\l  %180 = trunc i64 %179 to i32\l  %181 = lshr i64 %179, 32\l  %182 = mul nuw nsw i64 %178, 1011060801\l  %183 = add nuw nsw i64 %181, %182\l  %184 = trunc i64 %183 to i32\l  %185 = lshr i64 %183, 32\l  %186 = mul nuw nsw i64 %178, 3680671129\l  %187 = add nuw nsw i64 %185, %186\l  %188 = trunc i64 %187 to i32\l  %189 = lshr i64 %187, 32\l  %190 = mul nuw nsw i64 %178, 4113882560\l  %191 = add nuw nsw i64 %189, %190\l  %192 = trunc i64 %191 to i32\l  %193 = lshr i64 %191, 32\l  %194 = mul nuw nsw i64 %178, 4230436817\l  %195 = add nuw nsw i64 %193, %194\l  %196 = trunc i64 %195 to i32\l  %197 = lshr i64 %195, 32\l  %198 = mul nuw nsw i64 %178, 1313084713\l  %199 = add nuw nsw i64 %197, %198\l  %200 = trunc i64 %199 to i32\l  %201 = lshr i64 %199, 32\l  %202 = mul nuw nsw i64 %178, 2734261102\l  %203 = add nuw nsw i64 %201, %202\l  %204 = trunc i64 %203 to i32\l  %205 = lshr i64 %203, 32\l  %206 = trunc i64 %205 to i32\l  %207 = add nsw i32 %175, -120\l  %208 = icmp ugt i32 %207, 63\l  %209 = select i1 %208, i32 %200, i32 %206\l  %210 = select i1 %208, i32 %196, i32 %204\l  %211 = select i1 %208, i32 %192, i32 %200\l  %212 = select i1 %208, i32 %188, i32 %196\l  %213 = select i1 %208, i32 %184, i32 %192\l  %214 = select i1 %208, i32 %180, i32 %188\l  %215 = select i1 %208, i32 -64, i32 0\l  %216 = add nsw i32 %215, %207\l  %217 = icmp ugt i32 %216, 31\l  %218 = select i1 %217, i32 %210, i32 %209\l  %219 = select i1 %217, i32 %211, i32 %210\l  %220 = select i1 %217, i32 %212, i32 %211\l  %221 = select i1 %217, i32 %213, i32 %212\l  %222 = select i1 %217, i32 %214, i32 %213\l  %223 = select i1 %217, i32 -32, i32 0\l  %224 = add nsw i32 %223, %216\l  %225 = icmp ugt i32 %224, 31\l  %226 = select i1 %225, i32 %219, i32 %218\l  %227 = select i1 %225, i32 %220, i32 %219\l  %228 = select i1 %225, i32 %221, i32 %220\l  %229 = select i1 %225, i32 %222, i32 %221\l  %230 = select i1 %225, i32 -32, i32 0\l  %231 = add nsw i32 %230, %224\l  %232 = icmp eq i32 %231, 0\l  %233 = sub nsw i32 32, %231\l  %234 = tail call i32 @llvm.fshr.i32(i32 %226, i32 %227, i32 %233)\l  %235 = tail call i32 @llvm.fshr.i32(i32 %227, i32 %228, i32 %233)\l  %236 = tail call i32 @llvm.fshr.i32(i32 %228, i32 %229, i32 %233)\l  %237 = select i1 %232, i32 %226, i32 %234\l  %238 = select i1 %232, i32 %227, i32 %235\l  %239 = select i1 %232, i32 %228, i32 %236\l  %240 = lshr i32 %237, 29\l  %241 = tail call i32 @llvm.fshl.i32(i32 %237, i32 %238, i32 2)\l  %242 = tail call i32 @llvm.fshl.i32(i32 %238, i32 %239, i32 2)\l  %243 = tail call i32 @llvm.fshl.i32(i32 %239, i32 %229, i32 2)\l  %244 = and i32 %240, 1\l  %245 = sub nsw i32 0, %244\l  %246 = shl i32 %240, 31\l  %247 = xor i32 %241, %245\l  %248 = xor i32 %242, %245\l  %249 = xor i32 %243, %245\l  %250 = tail call i32 @llvm.ctlz.i32(i32 %247, i1 false), !range !7\l  %251 = sub nsw i32 31, %250\l  %252 = tail call i32 @llvm.fshr.i32(i32 %247, i32 %248, i32 %251)\l  %253 = tail call i32 @llvm.fshr.i32(i32 %248, i32 %249, i32 %251)\l  %254 = shl nuw nsw i32 %250, 23\l  %255 = sub nuw nsw i32 1056964608, %254\l  %256 = lshr i32 %252, 9\l  %257 = or i32 %256, %255\l  %258 = or i32 %257, %246\l  %259 = bitcast i32 %258 to float\l  %260 = tail call i32 @llvm.fshl.i32(i32 %252, i32 %253, i32 23)\l  %261 = tail call i32 @llvm.ctlz.i32(i32 %260, i1 false), !range !7\l  %262 = fmul float %259, 0x3FF921FB40000000\l  %263 = add nuw nsw i32 %261, %250\l  %264 = shl nuw nsw i32 %263, 23\l  %265 = sub nuw nsw i32 855638016, %264\l  %266 = sub nsw i32 31, %261\l  %267 = tail call i32 @llvm.fshr.i32(i32 %260, i32 %253, i32 %266)\l  %268 = lshr i32 %267, 9\l  %269 = or i32 %265, %268\l  %270 = or i32 %269, %246\l  %271 = bitcast i32 %270 to float\l  %272 = fneg float %262\l  %273 = tail call float @llvm.fma.f32(float %259, float 0x3FF921FB40000000,\l... float %272)\l  %274 = tail call float @llvm.fma.f32(float %259, float 0x3E74442D00000000,\l... float %273)\l  %275 = tail call float @llvm.fma.f32(float %271, float 0x3FF921FB40000000,\l... float %274)\l  %276 = fadd float %262, %275\l  %277 = lshr i32 %237, 30\l  %278 = add nuw nsw i32 %244, %277\l  br label %279\l}"];
	Node0x649f8c0 -> Node0x649fff0;
	Node0x649fff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%279:\l279:                                              \l  %280 = phi i32 [ %172, %165 ], [ %174, %173 ]\l  %281 = phi float [ %170, %165 ], [ %276, %173 ]\l  %282 = phi i32 [ %171, %165 ], [ %278, %173 ]\l  %283 = fmul float %281, %281\l  %284 = tail call float @llvm.fmuladd.f32(float %283, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %285 = tail call float @llvm.fmuladd.f32(float %283, float %284, float\l... 0xBFC55553A0000000)\l  %286 = fmul float %283, %285\l  %287 = tail call float @llvm.fmuladd.f32(float %281, float %286, float %281)\l  %288 = tail call float @llvm.fmuladd.f32(float %283, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %289 = tail call float @llvm.fmuladd.f32(float %283, float %288, float\l... 0x3FA5557EE0000000)\l  %290 = tail call float @llvm.fmuladd.f32(float %283, float %289, float\l... 0xBFE0000080000000)\l  %291 = tail call float @llvm.fmuladd.f32(float %283, float %290, float\l... 1.000000e+00)\l  %292 = and i32 %282, 1\l  %293 = icmp eq i32 %292, 0\l  %294 = select i1 %293, float %287, float %291\l  %295 = bitcast float %294 to i32\l  %296 = shl i32 %282, 30\l  %297 = and i32 %296, -2147483648\l  %298 = bitcast float %22 to i32\l  %299 = xor i32 %280, %298\l  %300 = xor i32 %299, %297\l  %301 = xor i32 %300, %295\l  %302 = bitcast i32 %301 to float\l  %303 = select i1 %159, float %302, float 0x7FF8000000000000\l  %304 = fdiv contract float %303, %17\l  %305 = add nsw i32 %162, 1\l  %306 = sext i32 %305 to i64\l  %307 = getelementptr inbounds float, float addrspace(1)* %2, i64 %306\l  store float %304, float addrspace(1)* %307, align 4, !tbaa !8\l  %308 = fpext float %17 to double\l  %309 = tail call float @llvm.fabs.f32(float %0)\l  %310 = fcmp olt float %309, 1.310720e+05\l  br i1 %310, label %311, label %319\l|{<s0>T|<s1>F}}"];
	Node0x649fff0:s0 -> Node0x64a6b70;
	Node0x649fff0:s1 -> Node0x64a6bc0;
	Node0x64a6b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%311:\l311:                                              \l  %312 = fmul float %309, 0x3FE45F3060000000\l  %313 = tail call float @llvm.rint.f32(float %312)\l  %314 = tail call float @llvm.fma.f32(float %313, float 0xBFF921FB40000000,\l... float %309)\l  %315 = tail call float @llvm.fma.f32(float %313, float 0xBE74442D00000000,\l... float %314)\l  %316 = tail call float @llvm.fma.f32(float %313, float 0xBCF8469880000000,\l... float %315)\l  %317 = fptosi float %313 to i32\l  %318 = bitcast float %309 to i32\l  br label %425\l}"];
	Node0x64a6b70 -> Node0x64a72b0;
	Node0x64a6bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%319:\l319:                                              \l  %320 = bitcast float %309 to i32\l  %321 = lshr i32 %320, 23\l  %322 = and i32 %320, 8388607\l  %323 = or i32 %322, 8388608\l  %324 = zext i32 %323 to i64\l  %325 = mul nuw nsw i64 %324, 4266746795\l  %326 = trunc i64 %325 to i32\l  %327 = lshr i64 %325, 32\l  %328 = mul nuw nsw i64 %324, 1011060801\l  %329 = add nuw nsw i64 %327, %328\l  %330 = trunc i64 %329 to i32\l  %331 = lshr i64 %329, 32\l  %332 = mul nuw nsw i64 %324, 3680671129\l  %333 = add nuw nsw i64 %331, %332\l  %334 = trunc i64 %333 to i32\l  %335 = lshr i64 %333, 32\l  %336 = mul nuw nsw i64 %324, 4113882560\l  %337 = add nuw nsw i64 %335, %336\l  %338 = trunc i64 %337 to i32\l  %339 = lshr i64 %337, 32\l  %340 = mul nuw nsw i64 %324, 4230436817\l  %341 = add nuw nsw i64 %339, %340\l  %342 = trunc i64 %341 to i32\l  %343 = lshr i64 %341, 32\l  %344 = mul nuw nsw i64 %324, 1313084713\l  %345 = add nuw nsw i64 %343, %344\l  %346 = trunc i64 %345 to i32\l  %347 = lshr i64 %345, 32\l  %348 = mul nuw nsw i64 %324, 2734261102\l  %349 = add nuw nsw i64 %347, %348\l  %350 = trunc i64 %349 to i32\l  %351 = lshr i64 %349, 32\l  %352 = trunc i64 %351 to i32\l  %353 = add nsw i32 %321, -120\l  %354 = icmp ugt i32 %353, 63\l  %355 = select i1 %354, i32 %346, i32 %352\l  %356 = select i1 %354, i32 %342, i32 %350\l  %357 = select i1 %354, i32 %338, i32 %346\l  %358 = select i1 %354, i32 %334, i32 %342\l  %359 = select i1 %354, i32 %330, i32 %338\l  %360 = select i1 %354, i32 %326, i32 %334\l  %361 = select i1 %354, i32 -64, i32 0\l  %362 = add nsw i32 %361, %353\l  %363 = icmp ugt i32 %362, 31\l  %364 = select i1 %363, i32 %356, i32 %355\l  %365 = select i1 %363, i32 %357, i32 %356\l  %366 = select i1 %363, i32 %358, i32 %357\l  %367 = select i1 %363, i32 %359, i32 %358\l  %368 = select i1 %363, i32 %360, i32 %359\l  %369 = select i1 %363, i32 -32, i32 0\l  %370 = add nsw i32 %369, %362\l  %371 = icmp ugt i32 %370, 31\l  %372 = select i1 %371, i32 %365, i32 %364\l  %373 = select i1 %371, i32 %366, i32 %365\l  %374 = select i1 %371, i32 %367, i32 %366\l  %375 = select i1 %371, i32 %368, i32 %367\l  %376 = select i1 %371, i32 -32, i32 0\l  %377 = add nsw i32 %376, %370\l  %378 = icmp eq i32 %377, 0\l  %379 = sub nsw i32 32, %377\l  %380 = tail call i32 @llvm.fshr.i32(i32 %372, i32 %373, i32 %379)\l  %381 = tail call i32 @llvm.fshr.i32(i32 %373, i32 %374, i32 %379)\l  %382 = tail call i32 @llvm.fshr.i32(i32 %374, i32 %375, i32 %379)\l  %383 = select i1 %378, i32 %372, i32 %380\l  %384 = select i1 %378, i32 %373, i32 %381\l  %385 = select i1 %378, i32 %374, i32 %382\l  %386 = lshr i32 %383, 29\l  %387 = tail call i32 @llvm.fshl.i32(i32 %383, i32 %384, i32 2)\l  %388 = tail call i32 @llvm.fshl.i32(i32 %384, i32 %385, i32 2)\l  %389 = tail call i32 @llvm.fshl.i32(i32 %385, i32 %375, i32 2)\l  %390 = and i32 %386, 1\l  %391 = sub nsw i32 0, %390\l  %392 = shl i32 %386, 31\l  %393 = xor i32 %387, %391\l  %394 = xor i32 %388, %391\l  %395 = xor i32 %389, %391\l  %396 = tail call i32 @llvm.ctlz.i32(i32 %393, i1 false), !range !7\l  %397 = sub nsw i32 31, %396\l  %398 = tail call i32 @llvm.fshr.i32(i32 %393, i32 %394, i32 %397)\l  %399 = tail call i32 @llvm.fshr.i32(i32 %394, i32 %395, i32 %397)\l  %400 = shl nuw nsw i32 %396, 23\l  %401 = sub nuw nsw i32 1056964608, %400\l  %402 = lshr i32 %398, 9\l  %403 = or i32 %402, %401\l  %404 = or i32 %403, %392\l  %405 = bitcast i32 %404 to float\l  %406 = tail call i32 @llvm.fshl.i32(i32 %398, i32 %399, i32 23)\l  %407 = tail call i32 @llvm.ctlz.i32(i32 %406, i1 false), !range !7\l  %408 = fmul float %405, 0x3FF921FB40000000\l  %409 = add nuw nsw i32 %407, %396\l  %410 = shl nuw nsw i32 %409, 23\l  %411 = sub nuw nsw i32 855638016, %410\l  %412 = sub nsw i32 31, %407\l  %413 = tail call i32 @llvm.fshr.i32(i32 %406, i32 %399, i32 %412)\l  %414 = lshr i32 %413, 9\l  %415 = or i32 %411, %414\l  %416 = or i32 %415, %392\l  %417 = bitcast i32 %416 to float\l  %418 = fneg float %408\l  %419 = tail call float @llvm.fma.f32(float %405, float 0x3FF921FB40000000,\l... float %418)\l  %420 = tail call float @llvm.fma.f32(float %405, float 0x3E74442D00000000,\l... float %419)\l  %421 = tail call float @llvm.fma.f32(float %417, float 0x3FF921FB40000000,\l... float %420)\l  %422 = fadd float %408, %421\l  %423 = lshr i32 %383, 30\l  %424 = add nuw nsw i32 %390, %423\l  br label %425\l}"];
	Node0x64a6bc0 -> Node0x64a72b0;
	Node0x64a72b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%425:\l425:                                              \l  %426 = phi i32 [ %318, %311 ], [ %320, %319 ]\l  %427 = phi float [ %316, %311 ], [ %422, %319 ]\l  %428 = phi i32 [ %317, %311 ], [ %424, %319 ]\l  %429 = fmul float %427, %427\l  %430 = tail call float @llvm.fmuladd.f32(float %429, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %431 = tail call float @llvm.fmuladd.f32(float %429, float %430, float\l... 0xBFC55553A0000000)\l  %432 = fmul float %429, %431\l  %433 = tail call float @llvm.fmuladd.f32(float %427, float %432, float %427)\l  %434 = tail call float @llvm.fmuladd.f32(float %429, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %435 = tail call float @llvm.fmuladd.f32(float %429, float %434, float\l... 0x3FA5557EE0000000)\l  %436 = tail call float @llvm.fmuladd.f32(float %429, float %435, float\l... 0xBFE0000080000000)\l  %437 = tail call float @llvm.fmuladd.f32(float %429, float %436, float\l... 1.000000e+00)\l  %438 = and i32 %428, 1\l  %439 = icmp eq i32 %438, 0\l  %440 = select i1 %439, float %433, float %437\l  %441 = bitcast float %440 to i32\l  %442 = shl i32 %428, 30\l  %443 = and i32 %442, -2147483648\l  %444 = bitcast float %0 to i32\l  %445 = xor i32 %426, %444\l  %446 = xor i32 %445, %443\l  %447 = xor i32 %446, %441\l  %448 = bitcast i32 %447 to float\l  %449 = tail call i1 @llvm.amdgcn.class.f32(float %309, i32 504)\l  %450 = fpext float %448 to double\l  %451 = fmul contract double %450, 1.000000e-01\l  %452 = select i1 %449, double %451, double 0x7FF8000000000000\l  %453 = fadd contract double %452, %308\l  %454 = fptrunc double %453 to float\l  %455 = add nsw i32 %162, 2\l  %456 = sext i32 %455 to i64\l  %457 = getelementptr inbounds float, float addrspace(1)* %2, i64 %456\l  store float %454, float addrspace(1)* %457, align 4, !tbaa !8\l  br label %458\l}"];
	Node0x64a72b0 -> Node0x64965f0;
	Node0x64965f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%458:\l458:                                              \l  ret void\l}"];
}
