digraph "CFG for '_Z11simple_sinfPfmiff' function" {
	label="CFG for '_Z11simple_sinfPfmiff' function";

	Node0x4d16450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = sext i32 %14 to i64\l  %16 = icmp ult i64 %15, %1\l  br i1 %16, label %17, label %472\l|{<s0>T|<s1>F}}"];
	Node0x4d16450:s0 -> Node0x4d16f10;
	Node0x4d16450:s1 -> Node0x4d18460;
	Node0x4d16f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%17:\l17:                                               \l  %18 = sitofp i32 %14 to float\l  %19 = fmul contract float %18, %3\l  %20 = fadd contract float %19, %4\l  %21 = shl nsw i32 %14, 1\l  %22 = sext i32 %21 to i64\l  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %22\l  store float %20, float addrspace(1)* %23, align 4, !tbaa !7\l  switch i32 %2, label %472 [\l    i32 0, label %24\l    i32 1, label %167\l    i32 2, label %306\l    i32 3, label %453\l  ]\l|{<s0>def|<s1>0|<s2>1|<s3>2|<s4>3}}"];
	Node0x4d16f10:s0 -> Node0x4d18460;
	Node0x4d16f10:s1 -> Node0x4d18a90;
	Node0x4d16f10:s2 -> Node0x4d18b20;
	Node0x4d16f10:s3 -> Node0x4d18be0;
	Node0x4d16f10:s4 -> Node0x4d18ca0;
	Node0x4d18a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%24:\l24:                                               \l  %25 = tail call float @llvm.fabs.f32(float %20)\l  %26 = fcmp olt float %25, 1.310720e+05\l  br i1 %26, label %27, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4d18a90:s0 -> Node0x4d19b80;
	Node0x4d18a90:s1 -> Node0x4d19c10;
	Node0x4d19b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%27:\l27:                                               \l  %28 = fmul float %25, 0x3FE45F3060000000\l  %29 = tail call float @llvm.rint.f32(float %28)\l  %30 = tail call float @llvm.fma.f32(float %29, float 0xBFF921FB40000000,\l... float %25)\l  %31 = tail call float @llvm.fma.f32(float %29, float 0xBE74442D00000000,\l... float %30)\l  %32 = tail call float @llvm.fma.f32(float %29, float 0xBCF8469880000000,\l... float %31)\l  %33 = fptosi float %29 to i32\l  %34 = bitcast float %25 to i32\l  br label %141\l}"];
	Node0x4d19b80 -> Node0x4d1a810;
	Node0x4d19c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%35:\l35:                                               \l  %36 = bitcast float %25 to i32\l  %37 = lshr i32 %36, 23\l  %38 = and i32 %36, 8388607\l  %39 = or i32 %38, 8388608\l  %40 = zext i32 %39 to i64\l  %41 = mul nuw nsw i64 %40, 4266746795\l  %42 = trunc i64 %41 to i32\l  %43 = lshr i64 %41, 32\l  %44 = mul nuw nsw i64 %40, 1011060801\l  %45 = add nuw nsw i64 %43, %44\l  %46 = trunc i64 %45 to i32\l  %47 = lshr i64 %45, 32\l  %48 = mul nuw nsw i64 %40, 3680671129\l  %49 = add nuw nsw i64 %47, %48\l  %50 = trunc i64 %49 to i32\l  %51 = lshr i64 %49, 32\l  %52 = mul nuw nsw i64 %40, 4113882560\l  %53 = add nuw nsw i64 %51, %52\l  %54 = trunc i64 %53 to i32\l  %55 = lshr i64 %53, 32\l  %56 = mul nuw nsw i64 %40, 4230436817\l  %57 = add nuw nsw i64 %55, %56\l  %58 = trunc i64 %57 to i32\l  %59 = lshr i64 %57, 32\l  %60 = mul nuw nsw i64 %40, 1313084713\l  %61 = add nuw nsw i64 %59, %60\l  %62 = trunc i64 %61 to i32\l  %63 = lshr i64 %61, 32\l  %64 = mul nuw nsw i64 %40, 2734261102\l  %65 = add nuw nsw i64 %63, %64\l  %66 = trunc i64 %65 to i32\l  %67 = lshr i64 %65, 32\l  %68 = trunc i64 %67 to i32\l  %69 = add nsw i32 %37, -120\l  %70 = icmp ugt i32 %69, 63\l  %71 = select i1 %70, i32 %62, i32 %68\l  %72 = select i1 %70, i32 %58, i32 %66\l  %73 = select i1 %70, i32 %54, i32 %62\l  %74 = select i1 %70, i32 %50, i32 %58\l  %75 = select i1 %70, i32 %46, i32 %54\l  %76 = select i1 %70, i32 %42, i32 %50\l  %77 = select i1 %70, i32 -64, i32 0\l  %78 = add nsw i32 %77, %69\l  %79 = icmp ugt i32 %78, 31\l  %80 = select i1 %79, i32 %72, i32 %71\l  %81 = select i1 %79, i32 %73, i32 %72\l  %82 = select i1 %79, i32 %74, i32 %73\l  %83 = select i1 %79, i32 %75, i32 %74\l  %84 = select i1 %79, i32 %76, i32 %75\l  %85 = select i1 %79, i32 -32, i32 0\l  %86 = add nsw i32 %85, %78\l  %87 = icmp ugt i32 %86, 31\l  %88 = select i1 %87, i32 %81, i32 %80\l  %89 = select i1 %87, i32 %82, i32 %81\l  %90 = select i1 %87, i32 %83, i32 %82\l  %91 = select i1 %87, i32 %84, i32 %83\l  %92 = select i1 %87, i32 -32, i32 0\l  %93 = add nsw i32 %92, %86\l  %94 = icmp eq i32 %93, 0\l  %95 = sub nsw i32 32, %93\l  %96 = tail call i32 @llvm.fshr.i32(i32 %88, i32 %89, i32 %95)\l  %97 = tail call i32 @llvm.fshr.i32(i32 %89, i32 %90, i32 %95)\l  %98 = tail call i32 @llvm.fshr.i32(i32 %90, i32 %91, i32 %95)\l  %99 = select i1 %94, i32 %88, i32 %96\l  %100 = select i1 %94, i32 %89, i32 %97\l  %101 = select i1 %94, i32 %90, i32 %98\l  %102 = lshr i32 %99, 29\l  %103 = tail call i32 @llvm.fshl.i32(i32 %99, i32 %100, i32 2)\l  %104 = tail call i32 @llvm.fshl.i32(i32 %100, i32 %101, i32 2)\l  %105 = tail call i32 @llvm.fshl.i32(i32 %101, i32 %91, i32 2)\l  %106 = and i32 %102, 1\l  %107 = sub nsw i32 0, %106\l  %108 = shl i32 %102, 31\l  %109 = xor i32 %103, %107\l  %110 = xor i32 %104, %107\l  %111 = xor i32 %105, %107\l  %112 = tail call i32 @llvm.ctlz.i32(i32 %109, i1 false), !range !11\l  %113 = sub nsw i32 31, %112\l  %114 = tail call i32 @llvm.fshr.i32(i32 %109, i32 %110, i32 %113)\l  %115 = tail call i32 @llvm.fshr.i32(i32 %110, i32 %111, i32 %113)\l  %116 = shl nuw nsw i32 %112, 23\l  %117 = sub nuw nsw i32 1056964608, %116\l  %118 = lshr i32 %114, 9\l  %119 = or i32 %118, %117\l  %120 = or i32 %119, %108\l  %121 = bitcast i32 %120 to float\l  %122 = tail call i32 @llvm.fshl.i32(i32 %114, i32 %115, i32 23)\l  %123 = tail call i32 @llvm.ctlz.i32(i32 %122, i1 false), !range !11\l  %124 = fmul float %121, 0x3FF921FB40000000\l  %125 = add nuw nsw i32 %123, %112\l  %126 = shl nuw nsw i32 %125, 23\l  %127 = sub nuw nsw i32 855638016, %126\l  %128 = sub nsw i32 31, %123\l  %129 = tail call i32 @llvm.fshr.i32(i32 %122, i32 %115, i32 %128)\l  %130 = lshr i32 %129, 9\l  %131 = or i32 %127, %130\l  %132 = or i32 %131, %108\l  %133 = bitcast i32 %132 to float\l  %134 = fneg float %124\l  %135 = tail call float @llvm.fma.f32(float %121, float 0x3FF921FB40000000,\l... float %134)\l  %136 = tail call float @llvm.fma.f32(float %121, float 0x3E74442D00000000,\l... float %135)\l  %137 = tail call float @llvm.fma.f32(float %133, float 0x3FF921FB40000000,\l... float %136)\l  %138 = fadd float %124, %137\l  %139 = lshr i32 %99, 30\l  %140 = add nuw nsw i32 %106, %139\l  br label %141\l}"];
	Node0x4d19c10 -> Node0x4d1a810;
	Node0x4d1a810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%141:\l141:                                              \l  %142 = phi i32 [ %34, %27 ], [ %36, %35 ]\l  %143 = phi float [ %32, %27 ], [ %138, %35 ]\l  %144 = phi i32 [ %33, %27 ], [ %140, %35 ]\l  %145 = fmul float %143, %143\l  %146 = tail call float @llvm.fmuladd.f32(float %145, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %147 = tail call float @llvm.fmuladd.f32(float %145, float %146, float\l... 0xBFC55553A0000000)\l  %148 = fmul float %145, %147\l  %149 = tail call float @llvm.fmuladd.f32(float %143, float %148, float %143)\l  %150 = tail call float @llvm.fmuladd.f32(float %145, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %151 = tail call float @llvm.fmuladd.f32(float %145, float %150, float\l... 0x3FA5557EE0000000)\l  %152 = tail call float @llvm.fmuladd.f32(float %145, float %151, float\l... 0xBFE0000080000000)\l  %153 = tail call float @llvm.fmuladd.f32(float %145, float %152, float\l... 1.000000e+00)\l  %154 = and i32 %144, 1\l  %155 = icmp eq i32 %154, 0\l  %156 = select i1 %155, float %149, float %153\l  %157 = bitcast float %156 to i32\l  %158 = shl i32 %144, 30\l  %159 = and i32 %158, -2147483648\l  %160 = bitcast float %20 to i32\l  %161 = xor i32 %142, %160\l  %162 = xor i32 %161, %159\l  %163 = xor i32 %162, %157\l  %164 = bitcast i32 %163 to float\l  %165 = tail call i1 @llvm.amdgcn.class.f32(float %25, i32 504)\l  %166 = select i1 %165, float %164, float 0x7FF8000000000000\l  br label %467\l}"];
	Node0x4d1a810 -> Node0x4d21c00;
	Node0x4d18b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%167:\l167:                                              \l  %168 = tail call float @llvm.fabs.f32(float %20)\l  %169 = fcmp olt float %168, 1.310720e+05\l  br i1 %169, label %170, label %177\l|{<s0>T|<s1>F}}"];
	Node0x4d18b20:s0 -> Node0x4d21ee0;
	Node0x4d18b20:s1 -> Node0x4d21f30;
	Node0x4d21ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%170:\l170:                                              \l  %171 = fmul float %168, 0x3FE45F3060000000\l  %172 = tail call float @llvm.rint.f32(float %171)\l  %173 = tail call float @llvm.fma.f32(float %172, float 0xBFF921FB40000000,\l... float %168)\l  %174 = tail call float @llvm.fma.f32(float %172, float 0xBE74442D00000000,\l... float %173)\l  %175 = tail call float @llvm.fma.f32(float %172, float 0xBCF8469880000000,\l... float %174)\l  %176 = fptosi float %172 to i32\l  br label %283\l}"];
	Node0x4d21ee0 -> Node0x4d225f0;
	Node0x4d21f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%177:\l177:                                              \l  %178 = bitcast float %168 to i32\l  %179 = lshr i32 %178, 23\l  %180 = and i32 %178, 8388607\l  %181 = or i32 %180, 8388608\l  %182 = zext i32 %181 to i64\l  %183 = mul nuw nsw i64 %182, 4266746795\l  %184 = trunc i64 %183 to i32\l  %185 = lshr i64 %183, 32\l  %186 = mul nuw nsw i64 %182, 1011060801\l  %187 = add nuw nsw i64 %185, %186\l  %188 = trunc i64 %187 to i32\l  %189 = lshr i64 %187, 32\l  %190 = mul nuw nsw i64 %182, 3680671129\l  %191 = add nuw nsw i64 %189, %190\l  %192 = trunc i64 %191 to i32\l  %193 = lshr i64 %191, 32\l  %194 = mul nuw nsw i64 %182, 4113882560\l  %195 = add nuw nsw i64 %193, %194\l  %196 = trunc i64 %195 to i32\l  %197 = lshr i64 %195, 32\l  %198 = mul nuw nsw i64 %182, 4230436817\l  %199 = add nuw nsw i64 %197, %198\l  %200 = trunc i64 %199 to i32\l  %201 = lshr i64 %199, 32\l  %202 = mul nuw nsw i64 %182, 1313084713\l  %203 = add nuw nsw i64 %201, %202\l  %204 = trunc i64 %203 to i32\l  %205 = lshr i64 %203, 32\l  %206 = mul nuw nsw i64 %182, 2734261102\l  %207 = add nuw nsw i64 %205, %206\l  %208 = trunc i64 %207 to i32\l  %209 = lshr i64 %207, 32\l  %210 = trunc i64 %209 to i32\l  %211 = add nsw i32 %179, -120\l  %212 = icmp ugt i32 %211, 63\l  %213 = select i1 %212, i32 %204, i32 %210\l  %214 = select i1 %212, i32 %200, i32 %208\l  %215 = select i1 %212, i32 %196, i32 %204\l  %216 = select i1 %212, i32 %192, i32 %200\l  %217 = select i1 %212, i32 %188, i32 %196\l  %218 = select i1 %212, i32 %184, i32 %192\l  %219 = select i1 %212, i32 -64, i32 0\l  %220 = add nsw i32 %219, %211\l  %221 = icmp ugt i32 %220, 31\l  %222 = select i1 %221, i32 %214, i32 %213\l  %223 = select i1 %221, i32 %215, i32 %214\l  %224 = select i1 %221, i32 %216, i32 %215\l  %225 = select i1 %221, i32 %217, i32 %216\l  %226 = select i1 %221, i32 %218, i32 %217\l  %227 = select i1 %221, i32 -32, i32 0\l  %228 = add nsw i32 %227, %220\l  %229 = icmp ugt i32 %228, 31\l  %230 = select i1 %229, i32 %223, i32 %222\l  %231 = select i1 %229, i32 %224, i32 %223\l  %232 = select i1 %229, i32 %225, i32 %224\l  %233 = select i1 %229, i32 %226, i32 %225\l  %234 = select i1 %229, i32 -32, i32 0\l  %235 = add nsw i32 %234, %228\l  %236 = icmp eq i32 %235, 0\l  %237 = sub nsw i32 32, %235\l  %238 = tail call i32 @llvm.fshr.i32(i32 %230, i32 %231, i32 %237)\l  %239 = tail call i32 @llvm.fshr.i32(i32 %231, i32 %232, i32 %237)\l  %240 = tail call i32 @llvm.fshr.i32(i32 %232, i32 %233, i32 %237)\l  %241 = select i1 %236, i32 %230, i32 %238\l  %242 = select i1 %236, i32 %231, i32 %239\l  %243 = select i1 %236, i32 %232, i32 %240\l  %244 = lshr i32 %241, 29\l  %245 = tail call i32 @llvm.fshl.i32(i32 %241, i32 %242, i32 2)\l  %246 = tail call i32 @llvm.fshl.i32(i32 %242, i32 %243, i32 2)\l  %247 = tail call i32 @llvm.fshl.i32(i32 %243, i32 %233, i32 2)\l  %248 = and i32 %244, 1\l  %249 = sub nsw i32 0, %248\l  %250 = shl i32 %244, 31\l  %251 = xor i32 %245, %249\l  %252 = xor i32 %246, %249\l  %253 = xor i32 %247, %249\l  %254 = tail call i32 @llvm.ctlz.i32(i32 %251, i1 false), !range !11\l  %255 = sub nsw i32 31, %254\l  %256 = tail call i32 @llvm.fshr.i32(i32 %251, i32 %252, i32 %255)\l  %257 = tail call i32 @llvm.fshr.i32(i32 %252, i32 %253, i32 %255)\l  %258 = shl nuw nsw i32 %254, 23\l  %259 = sub nuw nsw i32 1056964608, %258\l  %260 = lshr i32 %256, 9\l  %261 = or i32 %260, %259\l  %262 = or i32 %261, %250\l  %263 = bitcast i32 %262 to float\l  %264 = tail call i32 @llvm.fshl.i32(i32 %256, i32 %257, i32 23)\l  %265 = tail call i32 @llvm.ctlz.i32(i32 %264, i1 false), !range !11\l  %266 = fmul float %263, 0x3FF921FB40000000\l  %267 = add nuw nsw i32 %265, %254\l  %268 = shl nuw nsw i32 %267, 23\l  %269 = sub nuw nsw i32 855638016, %268\l  %270 = sub nsw i32 31, %265\l  %271 = tail call i32 @llvm.fshr.i32(i32 %264, i32 %257, i32 %270)\l  %272 = lshr i32 %271, 9\l  %273 = or i32 %269, %272\l  %274 = or i32 %273, %250\l  %275 = bitcast i32 %274 to float\l  %276 = fneg float %266\l  %277 = tail call float @llvm.fma.f32(float %263, float 0x3FF921FB40000000,\l... float %276)\l  %278 = tail call float @llvm.fma.f32(float %263, float 0x3E74442D00000000,\l... float %277)\l  %279 = tail call float @llvm.fma.f32(float %275, float 0x3FF921FB40000000,\l... float %278)\l  %280 = fadd float %266, %279\l  %281 = lshr i32 %241, 30\l  %282 = add nuw nsw i32 %248, %281\l  br label %283\l}"];
	Node0x4d21f30 -> Node0x4d225f0;
	Node0x4d225f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%283:\l283:                                              \l  %284 = phi float [ %175, %170 ], [ %280, %177 ]\l  %285 = phi i32 [ %176, %170 ], [ %282, %177 ]\l  %286 = fmul float %284, %284\l  %287 = tail call float @llvm.fmuladd.f32(float %286, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %288 = tail call float @llvm.fmuladd.f32(float %286, float %287, float\l... 0xBFC55553A0000000)\l  %289 = fmul float %286, %288\l  %290 = tail call float @llvm.fmuladd.f32(float %284, float %289, float %284)\l  %291 = tail call float @llvm.fmuladd.f32(float %286, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %292 = tail call float @llvm.fmuladd.f32(float %286, float %291, float\l... 0x3FA5557EE0000000)\l  %293 = tail call float @llvm.fmuladd.f32(float %286, float %292, float\l... 0xBFE0000080000000)\l  %294 = tail call float @llvm.fmuladd.f32(float %286, float %293, float\l... 1.000000e+00)\l  %295 = fneg float %290\l  %296 = and i32 %285, 1\l  %297 = icmp eq i32 %296, 0\l  %298 = select i1 %297, float %294, float %295\l  %299 = bitcast float %298 to i32\l  %300 = shl i32 %285, 30\l  %301 = and i32 %300, -2147483648\l  %302 = xor i32 %301, %299\l  %303 = bitcast i32 %302 to float\l  %304 = tail call i1 @llvm.amdgcn.class.f32(float %168, i32 504)\l  %305 = select i1 %304, float %303, float 0x7FF8000000000000\l  br label %467\l}"];
	Node0x4d225f0 -> Node0x4d21c00;
	Node0x4d18be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%306:\l306:                                              \l  %307 = tail call float @llvm.fabs.f32(float %20)\l  %308 = fcmp olt float %307, 1.310720e+05\l  br i1 %308, label %309, label %317\l|{<s0>T|<s1>F}}"];
	Node0x4d18be0:s0 -> Node0x4d287e0;
	Node0x4d18be0:s1 -> Node0x4d28830;
	Node0x4d287e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%309:\l309:                                              \l  %310 = fmul float %307, 0x3FE45F3060000000\l  %311 = tail call float @llvm.rint.f32(float %310)\l  %312 = tail call float @llvm.fma.f32(float %311, float 0xBFF921FB40000000,\l... float %307)\l  %313 = tail call float @llvm.fma.f32(float %311, float 0xBE74442D00000000,\l... float %312)\l  %314 = tail call float @llvm.fma.f32(float %311, float 0xBCF8469880000000,\l... float %313)\l  %315 = fptosi float %311 to i32\l  %316 = bitcast float %307 to i32\l  br label %423\l}"];
	Node0x4d287e0 -> Node0x4d28f20;
	Node0x4d28830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%317:\l317:                                              \l  %318 = bitcast float %307 to i32\l  %319 = lshr i32 %318, 23\l  %320 = and i32 %318, 8388607\l  %321 = or i32 %320, 8388608\l  %322 = zext i32 %321 to i64\l  %323 = mul nuw nsw i64 %322, 4266746795\l  %324 = trunc i64 %323 to i32\l  %325 = lshr i64 %323, 32\l  %326 = mul nuw nsw i64 %322, 1011060801\l  %327 = add nuw nsw i64 %325, %326\l  %328 = trunc i64 %327 to i32\l  %329 = lshr i64 %327, 32\l  %330 = mul nuw nsw i64 %322, 3680671129\l  %331 = add nuw nsw i64 %329, %330\l  %332 = trunc i64 %331 to i32\l  %333 = lshr i64 %331, 32\l  %334 = mul nuw nsw i64 %322, 4113882560\l  %335 = add nuw nsw i64 %333, %334\l  %336 = trunc i64 %335 to i32\l  %337 = lshr i64 %335, 32\l  %338 = mul nuw nsw i64 %322, 4230436817\l  %339 = add nuw nsw i64 %337, %338\l  %340 = trunc i64 %339 to i32\l  %341 = lshr i64 %339, 32\l  %342 = mul nuw nsw i64 %322, 1313084713\l  %343 = add nuw nsw i64 %341, %342\l  %344 = trunc i64 %343 to i32\l  %345 = lshr i64 %343, 32\l  %346 = mul nuw nsw i64 %322, 2734261102\l  %347 = add nuw nsw i64 %345, %346\l  %348 = trunc i64 %347 to i32\l  %349 = lshr i64 %347, 32\l  %350 = trunc i64 %349 to i32\l  %351 = add nsw i32 %319, -120\l  %352 = icmp ugt i32 %351, 63\l  %353 = select i1 %352, i32 %344, i32 %350\l  %354 = select i1 %352, i32 %340, i32 %348\l  %355 = select i1 %352, i32 %336, i32 %344\l  %356 = select i1 %352, i32 %332, i32 %340\l  %357 = select i1 %352, i32 %328, i32 %336\l  %358 = select i1 %352, i32 %324, i32 %332\l  %359 = select i1 %352, i32 -64, i32 0\l  %360 = add nsw i32 %359, %351\l  %361 = icmp ugt i32 %360, 31\l  %362 = select i1 %361, i32 %354, i32 %353\l  %363 = select i1 %361, i32 %355, i32 %354\l  %364 = select i1 %361, i32 %356, i32 %355\l  %365 = select i1 %361, i32 %357, i32 %356\l  %366 = select i1 %361, i32 %358, i32 %357\l  %367 = select i1 %361, i32 -32, i32 0\l  %368 = add nsw i32 %367, %360\l  %369 = icmp ugt i32 %368, 31\l  %370 = select i1 %369, i32 %363, i32 %362\l  %371 = select i1 %369, i32 %364, i32 %363\l  %372 = select i1 %369, i32 %365, i32 %364\l  %373 = select i1 %369, i32 %366, i32 %365\l  %374 = select i1 %369, i32 -32, i32 0\l  %375 = add nsw i32 %374, %368\l  %376 = icmp eq i32 %375, 0\l  %377 = sub nsw i32 32, %375\l  %378 = tail call i32 @llvm.fshr.i32(i32 %370, i32 %371, i32 %377)\l  %379 = tail call i32 @llvm.fshr.i32(i32 %371, i32 %372, i32 %377)\l  %380 = tail call i32 @llvm.fshr.i32(i32 %372, i32 %373, i32 %377)\l  %381 = select i1 %376, i32 %370, i32 %378\l  %382 = select i1 %376, i32 %371, i32 %379\l  %383 = select i1 %376, i32 %372, i32 %380\l  %384 = lshr i32 %381, 29\l  %385 = tail call i32 @llvm.fshl.i32(i32 %381, i32 %382, i32 2)\l  %386 = tail call i32 @llvm.fshl.i32(i32 %382, i32 %383, i32 2)\l  %387 = tail call i32 @llvm.fshl.i32(i32 %383, i32 %373, i32 2)\l  %388 = and i32 %384, 1\l  %389 = sub nsw i32 0, %388\l  %390 = shl i32 %384, 31\l  %391 = xor i32 %385, %389\l  %392 = xor i32 %386, %389\l  %393 = xor i32 %387, %389\l  %394 = tail call i32 @llvm.ctlz.i32(i32 %391, i1 false), !range !11\l  %395 = sub nsw i32 31, %394\l  %396 = tail call i32 @llvm.fshr.i32(i32 %391, i32 %392, i32 %395)\l  %397 = tail call i32 @llvm.fshr.i32(i32 %392, i32 %393, i32 %395)\l  %398 = shl nuw nsw i32 %394, 23\l  %399 = sub nuw nsw i32 1056964608, %398\l  %400 = lshr i32 %396, 9\l  %401 = or i32 %400, %399\l  %402 = or i32 %401, %390\l  %403 = bitcast i32 %402 to float\l  %404 = tail call i32 @llvm.fshl.i32(i32 %396, i32 %397, i32 23)\l  %405 = tail call i32 @llvm.ctlz.i32(i32 %404, i1 false), !range !11\l  %406 = fmul float %403, 0x3FF921FB40000000\l  %407 = add nuw nsw i32 %405, %394\l  %408 = shl nuw nsw i32 %407, 23\l  %409 = sub nuw nsw i32 855638016, %408\l  %410 = sub nsw i32 31, %405\l  %411 = tail call i32 @llvm.fshr.i32(i32 %404, i32 %397, i32 %410)\l  %412 = lshr i32 %411, 9\l  %413 = or i32 %409, %412\l  %414 = or i32 %413, %390\l  %415 = bitcast i32 %414 to float\l  %416 = fneg float %406\l  %417 = tail call float @llvm.fma.f32(float %403, float 0x3FF921FB40000000,\l... float %416)\l  %418 = tail call float @llvm.fma.f32(float %403, float 0x3E74442D00000000,\l... float %417)\l  %419 = tail call float @llvm.fma.f32(float %415, float 0x3FF921FB40000000,\l... float %418)\l  %420 = fadd float %406, %419\l  %421 = lshr i32 %381, 30\l  %422 = add nuw nsw i32 %388, %421\l  br label %423\l}"];
	Node0x4d28830 -> Node0x4d28f20;
	Node0x4d28f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%423:\l423:                                              \l  %424 = phi i32 [ %316, %309 ], [ %318, %317 ]\l  %425 = phi float [ %314, %309 ], [ %420, %317 ]\l  %426 = phi i32 [ %315, %309 ], [ %422, %317 ]\l  %427 = and i32 %426, 1\l  %428 = fmul float %425, %425\l  %429 = tail call float @llvm.fmuladd.f32(float %428, float\l... 0xBF919DBA60000000, float 0x3FD8A8B0E0000000)\l  %430 = tail call float @llvm.fmuladd.f32(float %428, float\l... 0x3F92E29000000000, float 0xBFE07266E0000000)\l  %431 = tail call float @llvm.fmuladd.f32(float %428, float %430, float\l... 0x3FF27E84A0000000)\l  %432 = tail call float @llvm.amdgcn.rcp.f32(float %431)\l  %433 = fmul float %429, %432\l  %434 = fmul float %428, %433\l  %435 = tail call float @llvm.fma.f32(float %434, float %425, float %425)\l  %436 = fsub float %435, %425\l  %437 = fneg float %436\l  %438 = tail call float @llvm.fma.f32(float %434, float %425, float %437)\l  %439 = tail call float @llvm.amdgcn.rcp.f32(float %435)\l  %440 = fneg float %439\l  %441 = tail call float @llvm.fma.f32(float %435, float %440, float\l... 1.000000e+00)\l  %442 = tail call float @llvm.fma.f32(float %438, float %440, float %441)\l  %443 = tail call float @llvm.fma.f32(float %442, float %440, float %440)\l  %444 = icmp eq i32 %427, 0\l  %445 = select i1 %444, float %435, float %443\l  %446 = bitcast float %445 to i32\l  %447 = bitcast float %20 to i32\l  %448 = xor i32 %424, %447\l  %449 = xor i32 %448, %446\l  %450 = bitcast i32 %449 to float\l  %451 = tail call i1 @llvm.amdgcn.class.f32(float %307, i32 504)\l  %452 = select i1 %451, float %450, float 0x7FF8000000000000\l  br label %467\l}"];
	Node0x4d28f20 -> Node0x4d21c00;
	Node0x4d18ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%453:\l453:                                              \l  %454 = tail call i1 @llvm.amdgcn.class.f32(float %20, i32 144)\l  %455 = select i1 %454, float 0x41F0000000000000, float 1.000000e+00\l  %456 = fmul float %20, %455\l  %457 = tail call float @llvm.log2.f32(float %456)\l  %458 = fmul float %457, 0x3FD3441340000000\l  %459 = tail call i1 @llvm.amdgcn.class.f32(float %457, i32 519)\l  %460 = fneg float %458\l  %461 = tail call float @llvm.fma.f32(float %457, float 0x3FD3441340000000,\l... float %460)\l  %462 = tail call float @llvm.fma.f32(float %457, float 0x3E509F79E0000000,\l... float %461)\l  %463 = fadd float %458, %462\l  %464 = select i1 %459, float %457, float %463\l  %465 = select i1 %454, float 0x4023441360000000, float 0.000000e+00\l  %466 = fsub float %464, %465\l  br label %467\l}"];
	Node0x4d18ca0 -> Node0x4d21c00;
	Node0x4d21c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%467:\l467:                                              \l  %468 = phi float [ %166, %141 ], [ %305, %283 ], [ %452, %423 ], [ %466,\l... %453 ]\l  %469 = add nuw nsw i32 %21, 1\l  %470 = sext i32 %469 to i64\l  %471 = getelementptr inbounds float, float addrspace(1)* %0, i64 %470\l  store float %468, float addrspace(1)* %471, align 4, !tbaa !7\l  br label %472\l}"];
	Node0x4d21c00 -> Node0x4d18460;
	Node0x4d18460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%472:\l472:                                              \l  ret void\l}"];
}
