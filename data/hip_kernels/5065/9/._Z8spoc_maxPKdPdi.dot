digraph "CFG for '_Z8spoc_maxPKdPdi' function" {
	label="CFG for '_Z8spoc_maxPKdPdi' function";

	Node0x5f3d2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = mul i32 %9, %8\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp sgt i32 %12, 0\l  br i1 %13, label %106, label %14\l|{<s0>T|<s1>F}}"];
	Node0x5f3d2a0:s0 -> Node0x5f3f1a0;
	Node0x5f3d2a0:s1 -> Node0x5f3f230;
	Node0x5f3f230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%14:\l14:                                               \l  %15 = load double, double addrspace(1)* %0, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %16 = icmp sgt i32 %2, 1\l  br i1 %16, label %17, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5f3f230:s0 -> Node0x5f3ea50;
	Node0x5f3f230:s1 -> Node0x5f3fd40;
	Node0x5f3ea50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = add i32 %2, -1\l  %19 = add i32 %2, -2\l  %20 = and i32 %18, 7\l  %21 = icmp ult i32 %19, 7\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x5f3ea50:s0 -> Node0x5f40150;
	Node0x5f3ea50:s1 -> Node0x5f401a0;
	Node0x5f401a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i32 %18, -8\l  br label %44\l}"];
	Node0x5f401a0 -> Node0x5f403a0;
	Node0x5f40150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi double [ undef, %17 ], [ %102, %44 ]\l  %26 = phi i32 [ 1, %17 ], [ %103, %44 ]\l  %27 = phi double [ %15, %17 ], [ %102, %44 ]\l  %28 = icmp eq i32 %20, 0\l  br i1 %28, label %42, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5f40150:s0 -> Node0x5f3fd40;
	Node0x5f40150:s1 -> Node0x5f40bc0;
	Node0x5f40bc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %39, %29 ], [ %26, %24 ]\l  %31 = phi double [ %38, %29 ], [ %27, %24 ]\l  %32 = phi i32 [ %40, %29 ], [ 0, %24 ]\l  %33 = zext i32 %30 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %0, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = tail call double @llvm.fabs.f64(double %35)\l  %37 = fcmp contract olt double %31, %36\l  %38 = select i1 %37, double %36, double %31\l  %39 = add nuw nsw i32 %30, 1\l  %40 = add i32 %32, 1\l  %41 = icmp eq i32 %40, %20\l  br i1 %41, label %42, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5f40bc0:s0 -> Node0x5f3fd40;
	Node0x5f40bc0:s1 -> Node0x5f40bc0;
	Node0x5f3fd40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%42:\l42:                                               \l  %43 = phi double [ %15, %14 ], [ %25, %24 ], [ %38, %29 ]\l  store double %43, double addrspace(1)* %1, align 8, !tbaa !7\l  br label %106\l}"];
	Node0x5f3fd40 -> Node0x5f3f1a0;
	Node0x5f403a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%44:\l44:                                               \l  %45 = phi i32 [ 1, %22 ], [ %103, %44 ]\l  %46 = phi double [ %15, %22 ], [ %102, %44 ]\l  %47 = phi i32 [ 0, %22 ], [ %104, %44 ]\l  %48 = zext i32 %45 to i64\l  %49 = getelementptr inbounds double, double addrspace(1)* %0, i64 %48\l  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = tail call double @llvm.fabs.f64(double %50)\l  %52 = fcmp contract olt double %46, %51\l  %53 = select i1 %52, double %51, double %46\l  %54 = add nuw nsw i32 %45, 1\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %0, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = tail call double @llvm.fabs.f64(double %57)\l  %59 = fcmp contract olt double %53, %58\l  %60 = select i1 %59, double %58, double %53\l  %61 = add nuw nsw i32 %45, 2\l  %62 = zext i32 %61 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %0, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = tail call double @llvm.fabs.f64(double %64)\l  %66 = fcmp contract olt double %60, %65\l  %67 = select i1 %66, double %65, double %60\l  %68 = add nuw nsw i32 %45, 3\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %0, i64 %69\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = tail call double @llvm.fabs.f64(double %71)\l  %73 = fcmp contract olt double %67, %72\l  %74 = select i1 %73, double %72, double %67\l  %75 = add nuw nsw i32 %45, 4\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %0, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = tail call double @llvm.fabs.f64(double %78)\l  %80 = fcmp contract olt double %74, %79\l  %81 = select i1 %80, double %79, double %74\l  %82 = add nuw nsw i32 %45, 5\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %0, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = tail call double @llvm.fabs.f64(double %85)\l  %87 = fcmp contract olt double %81, %86\l  %88 = select i1 %87, double %86, double %81\l  %89 = add nuw nsw i32 %45, 6\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %0, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = tail call double @llvm.fabs.f64(double %92)\l  %94 = fcmp contract olt double %88, %93\l  %95 = select i1 %94, double %93, double %88\l  %96 = add nuw nsw i32 %45, 7\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %0, i64 %97\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = tail call double @llvm.fabs.f64(double %99)\l  %101 = fcmp contract olt double %95, %100\l  %102 = select i1 %101, double %100, double %95\l  %103 = add nuw nsw i32 %45, 8\l  %104 = add i32 %47, 8\l  %105 = icmp eq i32 %104, %23\l  br i1 %105, label %24, label %44, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f403a0:s0 -> Node0x5f40150;
	Node0x5f403a0:s1 -> Node0x5f403a0;
	Node0x5f3f1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%106:\l106:                                              \l  ret void\l}"];
}
