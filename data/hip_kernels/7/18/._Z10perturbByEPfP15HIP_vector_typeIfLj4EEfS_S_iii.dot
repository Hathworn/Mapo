digraph "CFG for '_Z10perturbByEPfP15HIP_vector_typeIfLj4EEfS_S_iii' function" {
	label="CFG for '_Z10perturbByEPfP15HIP_vector_typeIfLj4EEfS_S_iii' function";

	Node0x5f23460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = icmp slt i32 %17, %7\l  br i1 %18, label %19, label %138\l|{<s0>T|<s1>F}}"];
	Node0x5f23460:s0 -> Node0x5f25340;
	Node0x5f23460:s1 -> Node0x5f253d0;
	Node0x5f25340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%19:\l19:                                               \l  %20 = freeze i32 %17\l  %21 = sdiv i32 %20, 3\l  %22 = mul i32 %21, 3\l  %23 = sub i32 %20, %22\l  switch i32 %23, label %100 [\l    i32 0, label %24\l    i32 1, label %62\l  ]\l|{<s0>def|<s1>0|<s2>1}}"];
	Node0x5f25340:s0 -> Node0x5f25730;
	Node0x5f25340:s1 -> Node0x5f257b0;
	Node0x5f25340:s2 -> Node0x5f25870;
	Node0x5f257b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%24:\l24:                                               \l  %25 = sext i32 %21 to i64\l  %26 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %25, i32 0, i32 0, i32 0, i64 0\l  %27 = load float, float addrspace(1)* %26, align 16, !tbaa !7,\l... !amdgpu.noclobber !5\l  %28 = sext i32 %17 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  store float %27, float addrspace(1)* %29, align 4, !tbaa !10\l  %30 = mul nsw i32 %17, %6\l  %31 = add nsw i32 %30, %5\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %3, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !10\l  %35 = fmul contract float %34, %2\l  %36 = getelementptr inbounds float, float addrspace(1)* %4, i64 %25\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !10\l  %38 = fcmp olt float %37, 0x39F0000000000000\l  %39 = select i1 %38, float 0x41F0000000000000, float 1.000000e+00\l  %40 = fmul float %37, %39\l  %41 = tail call float @llvm.sqrt.f32(float %40)\l  %42 = bitcast float %41 to i32\l  %43 = add nsw i32 %42, -1\l  %44 = bitcast i32 %43 to float\l  %45 = add nsw i32 %42, 1\l  %46 = bitcast i32 %45 to float\l  %47 = tail call i1 @llvm.amdgcn.class.f32(float %40, i32 608)\l  %48 = select i1 %38, float 0x3EF0000000000000, float 1.000000e+00\l  %49 = fneg float %46\l  %50 = tail call float @llvm.fma.f32(float %49, float %41, float %40)\l  %51 = fcmp ogt float %50, 0.000000e+00\l  %52 = fneg float %44\l  %53 = tail call float @llvm.fma.f32(float %52, float %41, float %40)\l  %54 = fcmp ole float %53, 0.000000e+00\l  %55 = select i1 %54, float %44, float %41\l  %56 = select i1 %51, float %46, float %55\l  %57 = fmul float %48, %56\l  %58 = select i1 %47, float %40, float %57\l  %59 = fdiv contract float %35, %58\l  %60 = load float, float addrspace(1)* %26, align 16, !tbaa !7\l  %61 = fadd contract float %60, %59\l  store float %61, float addrspace(1)* %26, align 16, !tbaa !7\l  br label %138\l}"];
	Node0x5f257b0 -> Node0x5f253d0;
	Node0x5f25870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%62:\l62:                                               \l  %63 = sext i32 %21 to i64\l  %64 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %63, i32 0, i32 0, i32 0, i64 1\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = sext i32 %17 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  store float %65, float addrspace(1)* %67, align 4, !tbaa !10\l  %68 = mul nsw i32 %17, %6\l  %69 = add nsw i32 %68, %5\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %3, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !10\l  %73 = fmul contract float %72, %2\l  %74 = getelementptr inbounds float, float addrspace(1)* %4, i64 %63\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !10\l  %76 = fcmp olt float %75, 0x39F0000000000000\l  %77 = select i1 %76, float 0x41F0000000000000, float 1.000000e+00\l  %78 = fmul float %75, %77\l  %79 = tail call float @llvm.sqrt.f32(float %78)\l  %80 = bitcast float %79 to i32\l  %81 = add nsw i32 %80, -1\l  %82 = bitcast i32 %81 to float\l  %83 = add nsw i32 %80, 1\l  %84 = bitcast i32 %83 to float\l  %85 = tail call i1 @llvm.amdgcn.class.f32(float %78, i32 608)\l  %86 = select i1 %76, float 0x3EF0000000000000, float 1.000000e+00\l  %87 = fneg float %84\l  %88 = tail call float @llvm.fma.f32(float %87, float %79, float %78)\l  %89 = fcmp ogt float %88, 0.000000e+00\l  %90 = fneg float %82\l  %91 = tail call float @llvm.fma.f32(float %90, float %79, float %78)\l  %92 = fcmp ole float %91, 0.000000e+00\l  %93 = select i1 %92, float %82, float %79\l  %94 = select i1 %89, float %84, float %93\l  %95 = fmul float %86, %94\l  %96 = select i1 %85, float %78, float %95\l  %97 = fdiv contract float %73, %96\l  %98 = load float, float addrspace(1)* %64, align 4, !tbaa !7\l  %99 = fadd contract float %98, %97\l  store float %99, float addrspace(1)* %64, align 4, !tbaa !7\l  br label %138\l}"];
	Node0x5f25870 -> Node0x5f253d0;
	Node0x5f25730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%100:\l100:                                              \l  %101 = sext i32 %21 to i64\l  %102 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %101, i32 0, i32 0, i32 0, i64 2\l  %103 = load float, float addrspace(1)* %102, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = sext i32 %17 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  store float %103, float addrspace(1)* %105, align 4, !tbaa !10\l  %106 = mul nsw i32 %17, %6\l  %107 = add nsw i32 %106, %5\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %3, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !10\l  %111 = fmul contract float %110, %2\l  %112 = getelementptr inbounds float, float addrspace(1)* %4, i64 %101\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !10\l  %114 = fcmp olt float %113, 0x39F0000000000000\l  %115 = select i1 %114, float 0x41F0000000000000, float 1.000000e+00\l  %116 = fmul float %113, %115\l  %117 = tail call float @llvm.sqrt.f32(float %116)\l  %118 = bitcast float %117 to i32\l  %119 = add nsw i32 %118, -1\l  %120 = bitcast i32 %119 to float\l  %121 = add nsw i32 %118, 1\l  %122 = bitcast i32 %121 to float\l  %123 = tail call i1 @llvm.amdgcn.class.f32(float %116, i32 608)\l  %124 = select i1 %114, float 0x3EF0000000000000, float 1.000000e+00\l  %125 = fneg float %122\l  %126 = tail call float @llvm.fma.f32(float %125, float %117, float %116)\l  %127 = fcmp ogt float %126, 0.000000e+00\l  %128 = fneg float %120\l  %129 = tail call float @llvm.fma.f32(float %128, float %117, float %116)\l  %130 = fcmp ole float %129, 0.000000e+00\l  %131 = select i1 %130, float %120, float %117\l  %132 = select i1 %127, float %122, float %131\l  %133 = fmul float %124, %132\l  %134 = select i1 %123, float %116, float %133\l  %135 = fdiv contract float %111, %134\l  %136 = load float, float addrspace(1)* %102, align 8, !tbaa !7\l  %137 = fadd contract float %136, %135\l  store float %137, float addrspace(1)* %102, align 8, !tbaa !7\l  br label %138\l}"];
	Node0x5f25730 -> Node0x5f253d0;
	Node0x5f253d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%138:\l138:                                              \l  ret void\l}"];
}
