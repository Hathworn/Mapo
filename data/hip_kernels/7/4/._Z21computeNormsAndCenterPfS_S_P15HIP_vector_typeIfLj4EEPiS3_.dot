digraph "CFG for '_Z21computeNormsAndCenterPfS_S_P15HIP_vector_typeIfLj4EEPiS3_' function" {
	label="CFG for '_Z21computeNormsAndCenterPfS_S_P15HIP_vector_typeIfLj4EEPiS3_' function";

	Node0x6083cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %16\l  %18 = load i32, i32 addrspace(1)* %17, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %19 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %16\l  %20 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %21 = add nsw i32 %20, %18\l  %22 = icmp sgt i32 %20, 0\l  %23 = mul nsw i32 %15, 3\l  %24 = sext i32 %23 to i64\l  br i1 %22, label %30, label %25\l|{<s0>T|<s1>F}}"];
	Node0x6083cb0:s0 -> Node0x6086e50;
	Node0x6083cb0:s1 -> Node0x6086ee0;
	Node0x6086ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%25:\l25:                                               \l  %26 = add nsw i32 %23, 1\l  %27 = sext i32 %26 to i64\l  %28 = add nsw i32 %23, 2\l  %29 = sext i32 %28 to i64\l  br label %38\l}"];
	Node0x6086ee0 -> Node0x6087280;
	Node0x6086e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%30:\l30:                                               \l  %31 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24\l  %32 = add nsw i32 %23, 1\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %1, i64 %33\l  %35 = add nsw i32 %23, 2\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36\l  br label %73\l}"];
	Node0x6086e50 -> Node0x6087820;
	Node0x6087280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%38:\l38:                                               \l  %39 = phi i64 [ %29, %25 ], [ %36, %73 ]\l  %40 = phi i64 [ %27, %25 ], [ %33, %73 ]\l  %41 = phi float [ 0.000000e+00, %25 ], [ %89, %73 ]\l  %42 = fcmp olt float %41, 0x39F0000000000000\l  %43 = select i1 %42, float 0x41F0000000000000, float 1.000000e+00\l  %44 = fmul float %41, %43\l  %45 = tail call float @llvm.sqrt.f32(float %44)\l  %46 = bitcast float %45 to i32\l  %47 = add nsw i32 %46, -1\l  %48 = bitcast i32 %47 to float\l  %49 = add nsw i32 %46, 1\l  %50 = bitcast i32 %49 to float\l  %51 = tail call i1 @llvm.amdgcn.class.f32(float %44, i32 608)\l  %52 = select i1 %42, float 0x3EF0000000000000, float 1.000000e+00\l  %53 = fneg float %50\l  %54 = tail call float @llvm.fma.f32(float %53, float %45, float %44)\l  %55 = fcmp ogt float %54, 0.000000e+00\l  %56 = fneg float %48\l  %57 = tail call float @llvm.fma.f32(float %56, float %45, float %44)\l  %58 = fcmp ole float %57, 0.000000e+00\l  %59 = select i1 %58, float %48, float %45\l  %60 = select i1 %55, float %50, float %59\l  %61 = fmul float %52, %60\l  %62 = select i1 %51, float %44, float %61\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %16\l  store float %62, float addrspace(1)* %63, align 4, !tbaa !11\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !11\l  %66 = fdiv contract float %65, %41\l  store float %66, float addrspace(1)* %64, align 4, !tbaa !11\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !11\l  %69 = fdiv contract float %68, %41\l  store float %69, float addrspace(1)* %67, align 4, !tbaa !11\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !11\l  %72 = fdiv contract float %71, %41\l  store float %72, float addrspace(1)* %70, align 4, !tbaa !11\l  ret void\l}"];
	Node0x6087820 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi float [ 0.000000e+00, %30 ], [ %89, %73 ]\l  %75 = phi i32 [ %18, %30 ], [ %90, %73 ]\l  %76 = sdiv i32 %75, 3\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %2, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !11\l  %80 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %3, i64 %77, i32 0, i32 0, i32 0, i64 0\l  %81 = load float, float addrspace(1)* %80, align 16, !tbaa !13\l  %82 = fmul contract float %79, %81\l  store float %82, float addrspace(1)* %31, align 4, !tbaa !11\l  %83 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %3, i64 %77, i32 0, i32 0, i32 0, i64 1\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !13\l  %85 = fmul contract float %79, %84\l  store float %85, float addrspace(1)* %34, align 4, !tbaa !11\l  %86 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %3, i64 %77, i32 0, i32 0, i32 0, i64 2\l  %87 = load float, float addrspace(1)* %86, align 8, !tbaa !13\l  %88 = fmul contract float %79, %87\l  store float %88, float addrspace(1)* %37, align 4, !tbaa !11\l  %89 = fadd contract float %74, %79\l  %90 = add nsw i32 %75, 3\l  %91 = icmp slt i32 %90, %21\l  br i1 %91, label %73, label %38, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x6087820:s0 -> Node0x6087820;
	Node0x6087820:s1 -> Node0x6087280;
}
