digraph "CFG for '_Z12MatMulKernelPfS_S_iii' function" {
	label="CFG for '_Z12MatMulKernelPfS_S_iii' function";

	Node0x55d1ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = mul nsw i32 %5, %3\l  %17 = icmp sgt i32 %15, %16\l  br i1 %17, label %162, label %18\l|{<s0>T|<s1>F}}"];
	Node0x55d1ab0:s0 -> Node0x55d3a60;
	Node0x55d1ab0:s1 -> Node0x55d3af0;
	Node0x55d3af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%18:\l18:                                               \l  %19 = freeze i32 %15\l  %20 = freeze i32 %5\l  %21 = sdiv i32 %19, %20\l  %22 = mul i32 %21, %20\l  %23 = sub i32 %19, %22\l  %24 = icmp sgt i32 %4, 0\l  br i1 %24, label %25, label %54\l|{<s0>T|<s1>F}}"];
	Node0x55d3af0:s0 -> Node0x55d3f50;
	Node0x55d3af0:s1 -> Node0x55d3fa0;
	Node0x55d3f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%25:\l25:                                               \l  %26 = mul nsw i32 %21, %4\l  %27 = and i32 %4, 7\l  %28 = icmp ult i32 %4, 8\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x55d3f50:s0 -> Node0x55d42f0;
	Node0x55d3f50:s1 -> Node0x55d4340;
	Node0x55d4340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%29:\l29:                                               \l  %30 = and i32 %4, -8\l  br label %60\l}"];
	Node0x55d4340 -> Node0x55d4540;
	Node0x55d42f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = phi float [ undef, %25 ], [ %158, %60 ]\l  %33 = phi i32 [ 0, %25 ], [ %159, %60 ]\l  %34 = phi float [ 0.000000e+00, %25 ], [ %158, %60 ]\l  %35 = icmp eq i32 %27, 0\l  br i1 %35, label %54, label %36\l|{<s0>T|<s1>F}}"];
	Node0x55d42f0:s0 -> Node0x55d3fa0;
	Node0x55d42f0:s1 -> Node0x55d58c0;
	Node0x55d58c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi i32 [ %51, %36 ], [ %33, %31 ]\l  %38 = phi float [ %50, %36 ], [ %34, %31 ]\l  %39 = phi i32 [ %52, %36 ], [ 0, %31 ]\l  %40 = add nsw i32 %37, %26\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = mul nsw i32 %37, %5\l  %45 = add nsw i32 %44, %23\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %2, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = fmul contract float %43, %48\l  %50 = fadd contract float %38, %49\l  %51 = add nuw nsw i32 %37, 1\l  %52 = add i32 %39, 1\l  %53 = icmp eq i32 %52, %27\l  br i1 %53, label %54, label %36, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x55d58c0:s0 -> Node0x55d3fa0;
	Node0x55d58c0:s1 -> Node0x55d58c0;
	Node0x55d3fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%54:\l54:                                               \l  %55 = phi float [ 0.000000e+00, %18 ], [ %32, %31 ], [ %50, %36 ]\l  %56 = mul nsw i32 %21, %5\l  %57 = add nsw i32 %56, %23\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  store float %55, float addrspace(1)* %59, align 4, !tbaa !7\l  br label %162\l}"];
	Node0x55d3fa0 -> Node0x55d3a60;
	Node0x55d4540 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%60:\l60:                                               \l  %61 = phi i32 [ 0, %29 ], [ %159, %60 ]\l  %62 = phi float [ 0.000000e+00, %29 ], [ %158, %60 ]\l  %63 = phi i32 [ 0, %29 ], [ %160, %60 ]\l  %64 = add nsw i32 %61, %26\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %1, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = mul nsw i32 %61, %5\l  %69 = add nsw i32 %68, %23\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = fmul contract float %67, %72\l  %74 = fadd contract float %62, %73\l  %75 = or i32 %61, 1\l  %76 = add nsw i32 %75, %26\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = mul nsw i32 %75, %5\l  %81 = add nsw i32 %80, %23\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %2, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fmul contract float %79, %84\l  %86 = fadd contract float %74, %85\l  %87 = or i32 %61, 2\l  %88 = add nsw i32 %87, %26\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = mul nsw i32 %87, %5\l  %93 = add nsw i32 %92, %23\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %2, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fmul contract float %91, %96\l  %98 = fadd contract float %86, %97\l  %99 = or i32 %61, 3\l  %100 = add nsw i32 %99, %26\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = mul nsw i32 %99, %5\l  %105 = add nsw i32 %104, %23\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %2, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fmul contract float %103, %108\l  %110 = fadd contract float %98, %109\l  %111 = or i32 %61, 4\l  %112 = add nsw i32 %111, %26\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = mul nsw i32 %111, %5\l  %117 = add nsw i32 %116, %23\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %2, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %121 = fmul contract float %115, %120\l  %122 = fadd contract float %110, %121\l  %123 = or i32 %61, 5\l  %124 = add nsw i32 %123, %26\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = mul nsw i32 %123, %5\l  %129 = add nsw i32 %128, %23\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %2, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fmul contract float %127, %132\l  %134 = fadd contract float %122, %133\l  %135 = or i32 %61, 6\l  %136 = add nsw i32 %135, %26\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = mul nsw i32 %135, %5\l  %141 = add nsw i32 %140, %23\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %2, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = fmul contract float %139, %144\l  %146 = fadd contract float %134, %145\l  %147 = or i32 %61, 7\l  %148 = add nsw i32 %147, %26\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %1, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %152 = mul nsw i32 %147, %5\l  %153 = add nsw i32 %152, %23\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %2, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %157 = fmul contract float %151, %156\l  %158 = fadd contract float %146, %157\l  %159 = add nuw nsw i32 %61, 8\l  %160 = add i32 %63, 8\l  %161 = icmp eq i32 %160, %30\l  br i1 %161, label %31, label %60, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x55d4540:s0 -> Node0x55d42f0;
	Node0x55d4540:s1 -> Node0x55d4540;
	Node0x55d3a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%162:\l162:                                              \l  ret void\l}"];
}
