; ModuleID = '../data/hip_kernels/7762/3/main.cu'
source_filename = "../data/hip_kernels/7762/3/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z13atomicScatteriiiPdS_S_S_S_S_S_(i32 %0, i32 %1, i32 %2, double addrspace(1)* nocapture readonly %3, double addrspace(1)* nocapture readonly %4, double addrspace(1)* nocapture readonly %5, double addrspace(1)* nocapture readonly %6, double addrspace(1)* nocapture readonly %7, double addrspace(1)* nocapture readonly %8, double addrspace(1)* nocapture %9) local_unnamed_addr #0 {
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4
  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*
  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5
  %16 = zext i16 %15 to i32
  %17 = mul i32 %11, %16
  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %19 = add i32 %17, %18
  %20 = icmp slt i32 %19, %2
  br i1 %20, label %21, label %380

21:                                               ; preds = %10
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds double, double addrspace(1)* %5, i64 %22
  %24 = load double, double addrspace(1)* %23, align 8, !tbaa !7, !amdgpu.noclobber !5
  %25 = fmul contract double %24, %24
  %26 = fmul contract double %25, 0xBF79F02F6222C6A0
  %27 = sext i32 %0 to i64
  %28 = getelementptr inbounds double, double addrspace(1)* %3, i64 %27
  %29 = load double, double addrspace(1)* %28, align 8, !tbaa !7, !amdgpu.noclobber !5
  %30 = sext i32 %1 to i64
  %31 = getelementptr inbounds double, double addrspace(1)* %3, i64 %30
  %32 = load double, double addrspace(1)* %31, align 8, !tbaa !7, !amdgpu.noclobber !5
  %33 = fmul contract double %29, %32
  %34 = getelementptr inbounds double, double addrspace(1)* %9, i64 %22
  store double %33, double addrspace(1)* %34, align 8, !tbaa !7
  %35 = getelementptr inbounds double, double addrspace(1)* %4, i64 %27
  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7
  %37 = getelementptr inbounds double, double addrspace(1)* %4, i64 %30
  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !7
  %39 = fadd contract double %36, %38
  %40 = fmul contract double %26, %39
  %41 = fmul double %40, 0x3FF71547652B82FE
  %42 = tail call double @llvm.rint.f64(double %41)
  %43 = fneg double %42
  %44 = tail call double @llvm.fma.f64(double %43, double 0x3FE62E42FEFA39EF, double %40)
  %45 = tail call double @llvm.fma.f64(double %43, double 0x3C7ABC9E3B39803F, double %44)
  %46 = tail call double @llvm.fma.f64(double %45, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %47 = tail call double @llvm.fma.f64(double %45, double %46, double 0x3EC71DEE623FDE64)
  %48 = tail call double @llvm.fma.f64(double %45, double %47, double 0x3EFA01997C89E6B0)
  %49 = tail call double @llvm.fma.f64(double %45, double %48, double 0x3F2A01A014761F6E)
  %50 = tail call double @llvm.fma.f64(double %45, double %49, double 0x3F56C16C1852B7B0)
  %51 = tail call double @llvm.fma.f64(double %45, double %50, double 0x3F81111111122322)
  %52 = tail call double @llvm.fma.f64(double %45, double %51, double 0x3FA55555555502A1)
  %53 = tail call double @llvm.fma.f64(double %45, double %52, double 0x3FC5555555555511)
  %54 = tail call double @llvm.fma.f64(double %45, double %53, double 0x3FE000000000000B)
  %55 = tail call double @llvm.fma.f64(double %45, double %54, double 1.000000e+00)
  %56 = tail call double @llvm.fma.f64(double %45, double %55, double 1.000000e+00)
  %57 = fptosi double %42 to i32
  %58 = tail call double @llvm.amdgcn.ldexp.f64(double %56, i32 %57)
  %59 = fcmp ogt double %40, 1.024000e+03
  %60 = select i1 %59, double 0x7FF0000000000000, double %58
  %61 = fcmp olt double %40, -1.075000e+03
  %62 = select i1 %61, double 0.000000e+00, double %60
  %63 = fmul contract double %33, %62
  store double %63, double addrspace(1)* %34, align 8, !tbaa !7
  %64 = getelementptr inbounds double, double addrspace(1)* %8, i64 %27
  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !7
  %66 = getelementptr inbounds double, double addrspace(1)* %8, i64 %30
  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !7
  %68 = mul nsw i32 %0, 5
  %69 = mul nsw i32 %1, 5
  %70 = sext i32 %68 to i64
  %71 = getelementptr inbounds double, double addrspace(1)* %6, i64 %70
  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7
  %73 = getelementptr inbounds double, double addrspace(1)* %7, i64 %70
  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !7
  %75 = fmul contract double %26, %74
  %76 = fmul double %75, 0x3FF71547652B82FE
  %77 = tail call double @llvm.rint.f64(double %76)
  %78 = fneg double %77
  %79 = tail call double @llvm.fma.f64(double %78, double 0x3FE62E42FEFA39EF, double %75)
  %80 = tail call double @llvm.fma.f64(double %78, double 0x3C7ABC9E3B39803F, double %79)
  %81 = tail call double @llvm.fma.f64(double %80, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %82 = tail call double @llvm.fma.f64(double %80, double %81, double 0x3EC71DEE623FDE64)
  %83 = tail call double @llvm.fma.f64(double %80, double %82, double 0x3EFA01997C89E6B0)
  %84 = tail call double @llvm.fma.f64(double %80, double %83, double 0x3F2A01A014761F6E)
  %85 = tail call double @llvm.fma.f64(double %80, double %84, double 0x3F56C16C1852B7B0)
  %86 = tail call double @llvm.fma.f64(double %80, double %85, double 0x3F81111111122322)
  %87 = tail call double @llvm.fma.f64(double %80, double %86, double 0x3FA55555555502A1)
  %88 = tail call double @llvm.fma.f64(double %80, double %87, double 0x3FC5555555555511)
  %89 = tail call double @llvm.fma.f64(double %80, double %88, double 0x3FE000000000000B)
  %90 = tail call double @llvm.fma.f64(double %80, double %89, double 1.000000e+00)
  %91 = tail call double @llvm.fma.f64(double %80, double %90, double 1.000000e+00)
  %92 = fptosi double %77 to i32
  %93 = tail call double @llvm.amdgcn.ldexp.f64(double %91, i32 %92)
  %94 = fcmp ogt double %75, 1.024000e+03
  %95 = select i1 %94, double 0x7FF0000000000000, double %93
  %96 = fcmp olt double %75, -1.075000e+03
  %97 = select i1 %96, double 0.000000e+00, double %95
  %98 = fmul contract double %72, %97
  %99 = fadd contract double %65, %98
  %100 = sext i32 %69 to i64
  %101 = getelementptr inbounds double, double addrspace(1)* %6, i64 %100
  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !7
  %103 = getelementptr inbounds double, double addrspace(1)* %7, i64 %100
  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !7
  %105 = fmul contract double %26, %104
  %106 = fmul double %105, 0x3FF71547652B82FE
  %107 = tail call double @llvm.rint.f64(double %106)
  %108 = fneg double %107
  %109 = tail call double @llvm.fma.f64(double %108, double 0x3FE62E42FEFA39EF, double %105)
  %110 = tail call double @llvm.fma.f64(double %108, double 0x3C7ABC9E3B39803F, double %109)
  %111 = tail call double @llvm.fma.f64(double %110, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %112 = tail call double @llvm.fma.f64(double %110, double %111, double 0x3EC71DEE623FDE64)
  %113 = tail call double @llvm.fma.f64(double %110, double %112, double 0x3EFA01997C89E6B0)
  %114 = tail call double @llvm.fma.f64(double %110, double %113, double 0x3F2A01A014761F6E)
  %115 = tail call double @llvm.fma.f64(double %110, double %114, double 0x3F56C16C1852B7B0)
  %116 = tail call double @llvm.fma.f64(double %110, double %115, double 0x3F81111111122322)
  %117 = tail call double @llvm.fma.f64(double %110, double %116, double 0x3FA55555555502A1)
  %118 = tail call double @llvm.fma.f64(double %110, double %117, double 0x3FC5555555555511)
  %119 = tail call double @llvm.fma.f64(double %110, double %118, double 0x3FE000000000000B)
  %120 = tail call double @llvm.fma.f64(double %110, double %119, double 1.000000e+00)
  %121 = tail call double @llvm.fma.f64(double %110, double %120, double 1.000000e+00)
  %122 = fptosi double %107 to i32
  %123 = tail call double @llvm.amdgcn.ldexp.f64(double %121, i32 %122)
  %124 = fcmp ogt double %105, 1.024000e+03
  %125 = select i1 %124, double 0x7FF0000000000000, double %123
  %126 = fcmp olt double %105, -1.075000e+03
  %127 = select i1 %126, double 0.000000e+00, double %125
  %128 = fmul contract double %102, %127
  %129 = fadd contract double %67, %128
  %130 = add nsw i32 %68, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds double, double addrspace(1)* %6, i64 %131
  %133 = load double, double addrspace(1)* %132, align 8, !tbaa !7
  %134 = getelementptr inbounds double, double addrspace(1)* %7, i64 %131
  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !7
  %136 = fmul contract double %26, %135
  %137 = fmul double %136, 0x3FF71547652B82FE
  %138 = tail call double @llvm.rint.f64(double %137)
  %139 = fneg double %138
  %140 = tail call double @llvm.fma.f64(double %139, double 0x3FE62E42FEFA39EF, double %136)
  %141 = tail call double @llvm.fma.f64(double %139, double 0x3C7ABC9E3B39803F, double %140)
  %142 = tail call double @llvm.fma.f64(double %141, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %143 = tail call double @llvm.fma.f64(double %141, double %142, double 0x3EC71DEE623FDE64)
  %144 = tail call double @llvm.fma.f64(double %141, double %143, double 0x3EFA01997C89E6B0)
  %145 = tail call double @llvm.fma.f64(double %141, double %144, double 0x3F2A01A014761F6E)
  %146 = tail call double @llvm.fma.f64(double %141, double %145, double 0x3F56C16C1852B7B0)
  %147 = tail call double @llvm.fma.f64(double %141, double %146, double 0x3F81111111122322)
  %148 = tail call double @llvm.fma.f64(double %141, double %147, double 0x3FA55555555502A1)
  %149 = tail call double @llvm.fma.f64(double %141, double %148, double 0x3FC5555555555511)
  %150 = tail call double @llvm.fma.f64(double %141, double %149, double 0x3FE000000000000B)
  %151 = tail call double @llvm.fma.f64(double %141, double %150, double 1.000000e+00)
  %152 = tail call double @llvm.fma.f64(double %141, double %151, double 1.000000e+00)
  %153 = fptosi double %138 to i32
  %154 = tail call double @llvm.amdgcn.ldexp.f64(double %152, i32 %153)
  %155 = fcmp ogt double %136, 1.024000e+03
  %156 = select i1 %155, double 0x7FF0000000000000, double %154
  %157 = fcmp olt double %136, -1.075000e+03
  %158 = select i1 %157, double 0.000000e+00, double %156
  %159 = fmul contract double %133, %158
  %160 = fadd contract double %99, %159
  %161 = add nsw i32 %69, 1
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds double, double addrspace(1)* %6, i64 %162
  %164 = load double, double addrspace(1)* %163, align 8, !tbaa !7
  %165 = getelementptr inbounds double, double addrspace(1)* %7, i64 %162
  %166 = load double, double addrspace(1)* %165, align 8, !tbaa !7
  %167 = fmul contract double %26, %166
  %168 = fmul double %167, 0x3FF71547652B82FE
  %169 = tail call double @llvm.rint.f64(double %168)
  %170 = fneg double %169
  %171 = tail call double @llvm.fma.f64(double %170, double 0x3FE62E42FEFA39EF, double %167)
  %172 = tail call double @llvm.fma.f64(double %170, double 0x3C7ABC9E3B39803F, double %171)
  %173 = tail call double @llvm.fma.f64(double %172, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %174 = tail call double @llvm.fma.f64(double %172, double %173, double 0x3EC71DEE623FDE64)
  %175 = tail call double @llvm.fma.f64(double %172, double %174, double 0x3EFA01997C89E6B0)
  %176 = tail call double @llvm.fma.f64(double %172, double %175, double 0x3F2A01A014761F6E)
  %177 = tail call double @llvm.fma.f64(double %172, double %176, double 0x3F56C16C1852B7B0)
  %178 = tail call double @llvm.fma.f64(double %172, double %177, double 0x3F81111111122322)
  %179 = tail call double @llvm.fma.f64(double %172, double %178, double 0x3FA55555555502A1)
  %180 = tail call double @llvm.fma.f64(double %172, double %179, double 0x3FC5555555555511)
  %181 = tail call double @llvm.fma.f64(double %172, double %180, double 0x3FE000000000000B)
  %182 = tail call double @llvm.fma.f64(double %172, double %181, double 1.000000e+00)
  %183 = tail call double @llvm.fma.f64(double %172, double %182, double 1.000000e+00)
  %184 = fptosi double %169 to i32
  %185 = tail call double @llvm.amdgcn.ldexp.f64(double %183, i32 %184)
  %186 = fcmp ogt double %167, 1.024000e+03
  %187 = select i1 %186, double 0x7FF0000000000000, double %185
  %188 = fcmp olt double %167, -1.075000e+03
  %189 = select i1 %188, double 0.000000e+00, double %187
  %190 = fmul contract double %164, %189
  %191 = fadd contract double %129, %190
  %192 = add nsw i32 %68, 2
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds double, double addrspace(1)* %6, i64 %193
  %195 = load double, double addrspace(1)* %194, align 8, !tbaa !7
  %196 = getelementptr inbounds double, double addrspace(1)* %7, i64 %193
  %197 = load double, double addrspace(1)* %196, align 8, !tbaa !7
  %198 = fmul contract double %26, %197
  %199 = fmul double %198, 0x3FF71547652B82FE
  %200 = tail call double @llvm.rint.f64(double %199)
  %201 = fneg double %200
  %202 = tail call double @llvm.fma.f64(double %201, double 0x3FE62E42FEFA39EF, double %198)
  %203 = tail call double @llvm.fma.f64(double %201, double 0x3C7ABC9E3B39803F, double %202)
  %204 = tail call double @llvm.fma.f64(double %203, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %205 = tail call double @llvm.fma.f64(double %203, double %204, double 0x3EC71DEE623FDE64)
  %206 = tail call double @llvm.fma.f64(double %203, double %205, double 0x3EFA01997C89E6B0)
  %207 = tail call double @llvm.fma.f64(double %203, double %206, double 0x3F2A01A014761F6E)
  %208 = tail call double @llvm.fma.f64(double %203, double %207, double 0x3F56C16C1852B7B0)
  %209 = tail call double @llvm.fma.f64(double %203, double %208, double 0x3F81111111122322)
  %210 = tail call double @llvm.fma.f64(double %203, double %209, double 0x3FA55555555502A1)
  %211 = tail call double @llvm.fma.f64(double %203, double %210, double 0x3FC5555555555511)
  %212 = tail call double @llvm.fma.f64(double %203, double %211, double 0x3FE000000000000B)
  %213 = tail call double @llvm.fma.f64(double %203, double %212, double 1.000000e+00)
  %214 = tail call double @llvm.fma.f64(double %203, double %213, double 1.000000e+00)
  %215 = fptosi double %200 to i32
  %216 = tail call double @llvm.amdgcn.ldexp.f64(double %214, i32 %215)
  %217 = fcmp ogt double %198, 1.024000e+03
  %218 = select i1 %217, double 0x7FF0000000000000, double %216
  %219 = fcmp olt double %198, -1.075000e+03
  %220 = select i1 %219, double 0.000000e+00, double %218
  %221 = fmul contract double %195, %220
  %222 = fadd contract double %160, %221
  %223 = add nsw i32 %69, 2
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds double, double addrspace(1)* %6, i64 %224
  %226 = load double, double addrspace(1)* %225, align 8, !tbaa !7
  %227 = getelementptr inbounds double, double addrspace(1)* %7, i64 %224
  %228 = load double, double addrspace(1)* %227, align 8, !tbaa !7
  %229 = fmul contract double %26, %228
  %230 = fmul double %229, 0x3FF71547652B82FE
  %231 = tail call double @llvm.rint.f64(double %230)
  %232 = fneg double %231
  %233 = tail call double @llvm.fma.f64(double %232, double 0x3FE62E42FEFA39EF, double %229)
  %234 = tail call double @llvm.fma.f64(double %232, double 0x3C7ABC9E3B39803F, double %233)
  %235 = tail call double @llvm.fma.f64(double %234, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %236 = tail call double @llvm.fma.f64(double %234, double %235, double 0x3EC71DEE623FDE64)
  %237 = tail call double @llvm.fma.f64(double %234, double %236, double 0x3EFA01997C89E6B0)
  %238 = tail call double @llvm.fma.f64(double %234, double %237, double 0x3F2A01A014761F6E)
  %239 = tail call double @llvm.fma.f64(double %234, double %238, double 0x3F56C16C1852B7B0)
  %240 = tail call double @llvm.fma.f64(double %234, double %239, double 0x3F81111111122322)
  %241 = tail call double @llvm.fma.f64(double %234, double %240, double 0x3FA55555555502A1)
  %242 = tail call double @llvm.fma.f64(double %234, double %241, double 0x3FC5555555555511)
  %243 = tail call double @llvm.fma.f64(double %234, double %242, double 0x3FE000000000000B)
  %244 = tail call double @llvm.fma.f64(double %234, double %243, double 1.000000e+00)
  %245 = tail call double @llvm.fma.f64(double %234, double %244, double 1.000000e+00)
  %246 = fptosi double %231 to i32
  %247 = tail call double @llvm.amdgcn.ldexp.f64(double %245, i32 %246)
  %248 = fcmp ogt double %229, 1.024000e+03
  %249 = select i1 %248, double 0x7FF0000000000000, double %247
  %250 = fcmp olt double %229, -1.075000e+03
  %251 = select i1 %250, double 0.000000e+00, double %249
  %252 = fmul contract double %226, %251
  %253 = fadd contract double %191, %252
  %254 = add nsw i32 %68, 3
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds double, double addrspace(1)* %6, i64 %255
  %257 = load double, double addrspace(1)* %256, align 8, !tbaa !7
  %258 = getelementptr inbounds double, double addrspace(1)* %7, i64 %255
  %259 = load double, double addrspace(1)* %258, align 8, !tbaa !7
  %260 = fmul contract double %26, %259
  %261 = fmul double %260, 0x3FF71547652B82FE
  %262 = tail call double @llvm.rint.f64(double %261)
  %263 = fneg double %262
  %264 = tail call double @llvm.fma.f64(double %263, double 0x3FE62E42FEFA39EF, double %260)
  %265 = tail call double @llvm.fma.f64(double %263, double 0x3C7ABC9E3B39803F, double %264)
  %266 = tail call double @llvm.fma.f64(double %265, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %267 = tail call double @llvm.fma.f64(double %265, double %266, double 0x3EC71DEE623FDE64)
  %268 = tail call double @llvm.fma.f64(double %265, double %267, double 0x3EFA01997C89E6B0)
  %269 = tail call double @llvm.fma.f64(double %265, double %268, double 0x3F2A01A014761F6E)
  %270 = tail call double @llvm.fma.f64(double %265, double %269, double 0x3F56C16C1852B7B0)
  %271 = tail call double @llvm.fma.f64(double %265, double %270, double 0x3F81111111122322)
  %272 = tail call double @llvm.fma.f64(double %265, double %271, double 0x3FA55555555502A1)
  %273 = tail call double @llvm.fma.f64(double %265, double %272, double 0x3FC5555555555511)
  %274 = tail call double @llvm.fma.f64(double %265, double %273, double 0x3FE000000000000B)
  %275 = tail call double @llvm.fma.f64(double %265, double %274, double 1.000000e+00)
  %276 = tail call double @llvm.fma.f64(double %265, double %275, double 1.000000e+00)
  %277 = fptosi double %262 to i32
  %278 = tail call double @llvm.amdgcn.ldexp.f64(double %276, i32 %277)
  %279 = fcmp ogt double %260, 1.024000e+03
  %280 = select i1 %279, double 0x7FF0000000000000, double %278
  %281 = fcmp olt double %260, -1.075000e+03
  %282 = select i1 %281, double 0.000000e+00, double %280
  %283 = fmul contract double %257, %282
  %284 = fadd contract double %222, %283
  %285 = add nsw i32 %69, 3
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds double, double addrspace(1)* %6, i64 %286
  %288 = load double, double addrspace(1)* %287, align 8, !tbaa !7
  %289 = getelementptr inbounds double, double addrspace(1)* %7, i64 %286
  %290 = load double, double addrspace(1)* %289, align 8, !tbaa !7
  %291 = fmul contract double %26, %290
  %292 = fmul double %291, 0x3FF71547652B82FE
  %293 = tail call double @llvm.rint.f64(double %292)
  %294 = fneg double %293
  %295 = tail call double @llvm.fma.f64(double %294, double 0x3FE62E42FEFA39EF, double %291)
  %296 = tail call double @llvm.fma.f64(double %294, double 0x3C7ABC9E3B39803F, double %295)
  %297 = tail call double @llvm.fma.f64(double %296, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %298 = tail call double @llvm.fma.f64(double %296, double %297, double 0x3EC71DEE623FDE64)
  %299 = tail call double @llvm.fma.f64(double %296, double %298, double 0x3EFA01997C89E6B0)
  %300 = tail call double @llvm.fma.f64(double %296, double %299, double 0x3F2A01A014761F6E)
  %301 = tail call double @llvm.fma.f64(double %296, double %300, double 0x3F56C16C1852B7B0)
  %302 = tail call double @llvm.fma.f64(double %296, double %301, double 0x3F81111111122322)
  %303 = tail call double @llvm.fma.f64(double %296, double %302, double 0x3FA55555555502A1)
  %304 = tail call double @llvm.fma.f64(double %296, double %303, double 0x3FC5555555555511)
  %305 = tail call double @llvm.fma.f64(double %296, double %304, double 0x3FE000000000000B)
  %306 = tail call double @llvm.fma.f64(double %296, double %305, double 1.000000e+00)
  %307 = tail call double @llvm.fma.f64(double %296, double %306, double 1.000000e+00)
  %308 = fptosi double %293 to i32
  %309 = tail call double @llvm.amdgcn.ldexp.f64(double %307, i32 %308)
  %310 = fcmp ogt double %291, 1.024000e+03
  %311 = select i1 %310, double 0x7FF0000000000000, double %309
  %312 = fcmp olt double %291, -1.075000e+03
  %313 = select i1 %312, double 0.000000e+00, double %311
  %314 = fmul contract double %288, %313
  %315 = fadd contract double %253, %314
  %316 = add nsw i32 %68, 4
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds double, double addrspace(1)* %6, i64 %317
  %319 = load double, double addrspace(1)* %318, align 8, !tbaa !7
  %320 = getelementptr inbounds double, double addrspace(1)* %7, i64 %317
  %321 = load double, double addrspace(1)* %320, align 8, !tbaa !7
  %322 = fmul contract double %26, %321
  %323 = fmul double %322, 0x3FF71547652B82FE
  %324 = tail call double @llvm.rint.f64(double %323)
  %325 = fneg double %324
  %326 = tail call double @llvm.fma.f64(double %325, double 0x3FE62E42FEFA39EF, double %322)
  %327 = tail call double @llvm.fma.f64(double %325, double 0x3C7ABC9E3B39803F, double %326)
  %328 = tail call double @llvm.fma.f64(double %327, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %329 = tail call double @llvm.fma.f64(double %327, double %328, double 0x3EC71DEE623FDE64)
  %330 = tail call double @llvm.fma.f64(double %327, double %329, double 0x3EFA01997C89E6B0)
  %331 = tail call double @llvm.fma.f64(double %327, double %330, double 0x3F2A01A014761F6E)
  %332 = tail call double @llvm.fma.f64(double %327, double %331, double 0x3F56C16C1852B7B0)
  %333 = tail call double @llvm.fma.f64(double %327, double %332, double 0x3F81111111122322)
  %334 = tail call double @llvm.fma.f64(double %327, double %333, double 0x3FA55555555502A1)
  %335 = tail call double @llvm.fma.f64(double %327, double %334, double 0x3FC5555555555511)
  %336 = tail call double @llvm.fma.f64(double %327, double %335, double 0x3FE000000000000B)
  %337 = tail call double @llvm.fma.f64(double %327, double %336, double 1.000000e+00)
  %338 = tail call double @llvm.fma.f64(double %327, double %337, double 1.000000e+00)
  %339 = fptosi double %324 to i32
  %340 = tail call double @llvm.amdgcn.ldexp.f64(double %338, i32 %339)
  %341 = fcmp ogt double %322, 1.024000e+03
  %342 = select i1 %341, double 0x7FF0000000000000, double %340
  %343 = fcmp olt double %322, -1.075000e+03
  %344 = select i1 %343, double 0.000000e+00, double %342
  %345 = fmul contract double %319, %344
  %346 = fadd contract double %284, %345
  %347 = add nsw i32 %69, 4
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds double, double addrspace(1)* %6, i64 %348
  %350 = load double, double addrspace(1)* %349, align 8, !tbaa !7
  %351 = getelementptr inbounds double, double addrspace(1)* %7, i64 %348
  %352 = load double, double addrspace(1)* %351, align 8, !tbaa !7
  %353 = fmul contract double %26, %352
  %354 = fmul double %353, 0x3FF71547652B82FE
  %355 = tail call double @llvm.rint.f64(double %354)
  %356 = fneg double %355
  %357 = tail call double @llvm.fma.f64(double %356, double 0x3FE62E42FEFA39EF, double %353)
  %358 = tail call double @llvm.fma.f64(double %356, double 0x3C7ABC9E3B39803F, double %357)
  %359 = tail call double @llvm.fma.f64(double %358, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %360 = tail call double @llvm.fma.f64(double %358, double %359, double 0x3EC71DEE623FDE64)
  %361 = tail call double @llvm.fma.f64(double %358, double %360, double 0x3EFA01997C89E6B0)
  %362 = tail call double @llvm.fma.f64(double %358, double %361, double 0x3F2A01A014761F6E)
  %363 = tail call double @llvm.fma.f64(double %358, double %362, double 0x3F56C16C1852B7B0)
  %364 = tail call double @llvm.fma.f64(double %358, double %363, double 0x3F81111111122322)
  %365 = tail call double @llvm.fma.f64(double %358, double %364, double 0x3FA55555555502A1)
  %366 = tail call double @llvm.fma.f64(double %358, double %365, double 0x3FC5555555555511)
  %367 = tail call double @llvm.fma.f64(double %358, double %366, double 0x3FE000000000000B)
  %368 = tail call double @llvm.fma.f64(double %358, double %367, double 1.000000e+00)
  %369 = tail call double @llvm.fma.f64(double %358, double %368, double 1.000000e+00)
  %370 = fptosi double %355 to i32
  %371 = tail call double @llvm.amdgcn.ldexp.f64(double %369, i32 %370)
  %372 = fcmp ogt double %353, 1.024000e+03
  %373 = select i1 %372, double 0x7FF0000000000000, double %371
  %374 = fcmp olt double %353, -1.075000e+03
  %375 = select i1 %374, double 0.000000e+00, double %373
  %376 = fmul contract double %350, %375
  %377 = fadd contract double %315, %376
  %378 = fmul contract double %63, %346
  %379 = fmul contract double %378, %377
  store double %379, double addrspace(1)* %34, align 8, !tbaa !7
  br label %380

380:                                              ; preds = %21, %10
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
