digraph "CFG for '_Z5blendPfS_S_fPi' function" {
	label="CFG for '_Z5blendPfS_S_fPi' function";

	Node0x51c46e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = add i32 %20, %21\l  %23 = load i32, i32 addrspace(1)* %4, align 4, !tbaa !7, !amdgpu.noclobber !5\l  %24 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 1\l  %25 = load i32, i32 addrspace(1)* %24, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %26 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 2\l  %27 = load i32, i32 addrspace(1)* %26, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %28 = mul nsw i32 %27, %25\l  %29 = icmp slt i32 %14, %27\l  %30 = icmp slt i32 %22, %25\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %131\l|{<s0>T|<s1>F}}"];
	Node0x51c46e0:s0 -> Node0x51c8d20;
	Node0x51c46e0:s1 -> Node0x51c8db0;
	Node0x51c8d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = mul nsw i32 %22, %27\l  %34 = add i32 %33, %14\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %38 = fcmp contract olt float %37, 0x3FA99999A0000000\l  %39 = select i1 %38, float 0.000000e+00, float %3\l  %40 = icmp sgt i32 %23, 0\l  br i1 %40, label %41, label %131\l|{<s0>T|<s1>F}}"];
	Node0x51c8d20:s0 -> Node0x51ca070;
	Node0x51c8d20:s1 -> Node0x51c8db0;
	Node0x51ca070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = fpext float %39 to double\l  %43 = fsub contract double 1.000000e+00, %42\l  %44 = and i32 %23, 3\l  %45 = icmp ult i32 %23, 4\l  br i1 %45, label %109, label %46\l|{<s0>T|<s1>F}}"];
	Node0x51ca070:s0 -> Node0x51ca430;
	Node0x51ca070:s1 -> Node0x51ca4c0;
	Node0x51ca4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%46:\l46:                                               \l  %47 = and i32 %23, -4\l  br label %48\l}"];
	Node0x51ca4c0 -> Node0x51ca6c0;
	Node0x51ca6c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %46 ], [ %106, %48 ]\l  %50 = phi i32 [ 0, %46 ], [ %107, %48 ]\l  %51 = mul nsw i32 %28, %49\l  %52 = add i32 %34, %51\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !11\l  %56 = fmul contract float %39, %55\l  %57 = fpext float %56 to double\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %53\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !11\l  %60 = fpext float %59 to double\l  %61 = fmul contract double %43, %60\l  %62 = fadd contract double %61, %57\l  %63 = fptrunc double %62 to float\l  store float %63, float addrspace(1)* %58, align 4, !tbaa !11\l  %64 = or i32 %49, 1\l  %65 = mul nsw i32 %28, %64\l  %66 = add i32 %34, %65\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !11\l  %70 = fmul contract float %39, %69\l  %71 = fpext float %70 to double\l  %72 = getelementptr inbounds float, float addrspace(1)* %2, i64 %67\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !11\l  %74 = fpext float %73 to double\l  %75 = fmul contract double %43, %74\l  %76 = fadd contract double %75, %71\l  %77 = fptrunc double %76 to float\l  store float %77, float addrspace(1)* %72, align 4, !tbaa !11\l  %78 = or i32 %49, 2\l  %79 = mul nsw i32 %28, %78\l  %80 = add i32 %34, %79\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !11\l  %84 = fmul contract float %39, %83\l  %85 = fpext float %84 to double\l  %86 = getelementptr inbounds float, float addrspace(1)* %2, i64 %81\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !11\l  %88 = fpext float %87 to double\l  %89 = fmul contract double %43, %88\l  %90 = fadd contract double %89, %85\l  %91 = fptrunc double %90 to float\l  store float %91, float addrspace(1)* %86, align 4, !tbaa !11\l  %92 = or i32 %49, 3\l  %93 = mul nsw i32 %28, %92\l  %94 = add i32 %34, %93\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !11\l  %98 = fmul contract float %39, %97\l  %99 = fpext float %98 to double\l  %100 = getelementptr inbounds float, float addrspace(1)* %2, i64 %95\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !11\l  %102 = fpext float %101 to double\l  %103 = fmul contract double %43, %102\l  %104 = fadd contract double %103, %99\l  %105 = fptrunc double %104 to float\l  store float %105, float addrspace(1)* %100, align 4, !tbaa !11\l  %106 = add nuw nsw i32 %49, 4\l  %107 = add i32 %50, 4\l  %108 = icmp eq i32 %107, %47\l  br i1 %108, label %109, label %48, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x51ca6c0:s0 -> Node0x51ca430;
	Node0x51ca6c0:s1 -> Node0x51ca6c0;
	Node0x51ca430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%109:\l109:                                              \l  %110 = phi i32 [ 0, %41 ], [ %106, %48 ]\l  %111 = icmp eq i32 %44, 0\l  br i1 %111, label %131, label %112\l|{<s0>T|<s1>F}}"];
	Node0x51ca430:s0 -> Node0x51c8db0;
	Node0x51ca430:s1 -> Node0x51cd540;
	Node0x51cd540 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%112:\l112:                                              \l  %113 = phi i32 [ %128, %112 ], [ %110, %109 ]\l  %114 = phi i32 [ %129, %112 ], [ 0, %109 ]\l  %115 = mul nsw i32 %28, %113\l  %116 = add i32 %34, %115\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !11\l  %120 = fmul contract float %39, %119\l  %121 = fpext float %120 to double\l  %122 = getelementptr inbounds float, float addrspace(1)* %2, i64 %117\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !11\l  %124 = fpext float %123 to double\l  %125 = fmul contract double %43, %124\l  %126 = fadd contract double %125, %121\l  %127 = fptrunc double %126 to float\l  store float %127, float addrspace(1)* %122, align 4, !tbaa !11\l  %128 = add nuw nsw i32 %113, 1\l  %129 = add i32 %114, 1\l  %130 = icmp eq i32 %129, %44\l  br i1 %130, label %131, label %112, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x51cd540:s0 -> Node0x51c8db0;
	Node0x51cd540:s1 -> Node0x51cd540;
	Node0x51c8db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%131:\l131:                                              \l  ret void\l}"];
}
