digraph "CFG for '__ockl_dm_alloc' function" {
	label="CFG for '__ockl_dm_alloc' function";

	Node0x5f37180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%1:\l  %2 = icmp eq i64 %0, 0\l  br i1 %2, label %1423, label %3\l|{<s0>T|<s1>F}}"];
	Node0x5f37180:s0 -> Node0x5f41480;
	Node0x5f37180:s1 -> Node0x5f414d0;
	Node0x5f414d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%3:\l3:                                                \l  %4 = icmp ugt i64 %0, 3072\l  br i1 %4, label %5, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5f414d0:s0 -> Node0x5f416b0;
	Node0x5f414d0:s1 -> Node0x5f41700;
	Node0x5f416b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%5:\l5:                                                \l  %6 = tail call i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 24\l  %8 = bitcast i8 addrspace(4)* %7 to i64 addrspace(4)*\l  %9 = load i64, i64 addrspace(4)* %8, align 8, !tbaa !4\l  %10 = inttoptr i64 %9 to i8 addrspace(1)*\l  %11 = addrspacecast i8 addrspace(1)* %10 to i8*\l  %12 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %11,\l... i64 noundef 0, i64 noundef %0) #11\l  %13 = extractelement \<2 x i64\> %12, i64 0\l  %14 = icmp eq i64 %13, 0\l  br i1 %14, label %25, label %15\l|{<s0>T|<s1>F}}"];
	Node0x5f416b0:s0 -> Node0x5f41f50;
	Node0x5f416b0:s1 -> Node0x5f41fe0;
	Node0x5f41fe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%15:\l15:                                               \l  %16 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %18 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %17, i32 0)\l  %19 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %16, i32 %18)\l  %20 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %21 = icmp eq i32 %19, 0\l  br i1 %21, label %22, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5f41fe0:s0 -> Node0x5f44a90;
	Node0x5f41fe0:s1 -> Node0x5f41f50;
	Node0x5f44a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6a8bef70",label="{%22:\l22:                                               \l  %23 = tail call i64 @llvm.ctpop.i64(i64 %20), !range !11\l  %24 = atomicrmw add i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 9), i64 %23 syncscope(\"agent-one-as\") monotonic,\l... align 8\l  br label %25\l}"];
	Node0x5f44a90 -> Node0x5f41f50;
	Node0x5f41f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%25:\l25:                                               \l  %26 = inttoptr i64 %13 to i8 addrspace(1)*\l  br label %1423\l}"];
	Node0x5f41f50 -> Node0x5f41480;
	Node0x5f41700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%27:\l27:                                               \l  %28 = trunc i64 %0 to i32\l  %29 = tail call i32 @llvm.umax.i32(i32 %28, i32 16)\l  %30 = tail call i32 @llvm.ctlz.i32(i32 %29, i1 false), !range !12\l  %31 = sub nsw i32 31, %30\l  %32 = and i32 %31, 31\l  %33 = shl nuw i32 1, %32\l  %34 = shl nuw nsw i32 %30, 1\l  %35 = sub nsw i32 54, %34\l  %36 = icmp ugt i32 %29, %33\l  %37 = zext i1 %36 to i32\l  %38 = or i32 %35, %37\l  %39 = lshr i32 %33, 1\l  %40 = or i32 %39, %33\l  %41 = icmp ugt i32 %29, %40\l  %42 = zext i1 %41 to i32\l  %43 = add nsw i32 %38, %42\l  %44 = zext i32 %43 to i64\l  %45 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 1, i64 %44,\l... i32 0\l  %46 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 0, i64 %44,\l... i32 0\l  %47 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %44, i32 2\l  %48 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 2, i64 %44,\l... i32 0\l  %49 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 4, i64 %44,\l... i32 0\l  %50 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 3, i64 %44,\l... i32 0\l  %51 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %44, i32 5\l  %52 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %44, i32 0\l  %53 = lshr i64 191, %44\l  %54 = and i64 %53, 1\l  %55 = icmp eq i64 %54, 0\l  %56 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %44, i32 4\l  %57 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %44, i32 6\l  %58 = icmp eq i32 %43, 2\l  %59 = insertelement \<4 x i32\> \<i32 poison, i32 0, i32 0, i32 0\>, i32 %43,\l... i64 0\l  %60 = tail call i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr()\l  %61 = getelementptr inbounds i8, i8 addrspace(4)* %60, i64 24\l  %62 = bitcast i8 addrspace(4)* %61 to i64 addrspace(4)*\l  br label %63\l}"];
	Node0x5f41700 -> Node0x5f488f0;
	Node0x5f488f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%63:\l63:                                               \l  %64 = phi i32 [ 1, %27 ], [ %1418, %1417 ]\l  %65 = phi i8 addrspace(1)* [ null, %27 ], [ %1419, %1417 ]\l  %66 = tail call i32 asm sideeffect \"\l  %67 = icmp eq i32 %66, 0\l  br i1 %67, label %1417, label %68\l|{<s0>T|<s1>F}}"];
	Node0x5f488f0:s0 -> Node0x5f489b0;
	Node0x5f488f0:s1 -> Node0x5f49830;
	Node0x5f49830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%68:\l68:                                               \l  %69 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %43)\l  %70 = icmp eq i32 %69, %43\l  br i1 %70, label %71, label %1417\l|{<s0>T|<s1>F}}"];
	Node0x5f49830:s0 -> Node0x5f49ba0;
	Node0x5f49830:s1 -> Node0x5f489b0;
	Node0x5f49ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%71:\l71:                                               \l  %72 = phi i32 [ %1411, %1410 ], [ %66, %68 ]\l  %73 = phi i32 [ %1412, %1410 ], [ 1, %68 ]\l  %74 = phi i8 addrspace(1)* [ %1413, %1410 ], [ %65, %68 ]\l  %75 = tail call i32 asm sideeffect \"\l  %76 = icmp eq i32 %75, 0\l  br i1 %76, label %1410, label %77\l|{<s0>T|<s1>F}}"];
	Node0x5f49ba0:s0 -> Node0x5f49ce0;
	Node0x5f49ba0:s1 -> Node0x5f4a120;
	Node0x5f4a120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%77:\l77:                                               \l  %78 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %79 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %80 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %79, i32 0)\l  %81 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %78, i32 %80)\l  %82 = tail call i32 asm sideeffect \"\l  %83 = icmp eq i32 %82, 0\l  br i1 %83, label %84, label %86\l|{<s0>T|<s1>F}}"];
	Node0x5f4a120:s0 -> Node0x5f4b1f0;
	Node0x5f4a120:s1 -> Node0x5f4b280;
	Node0x5f4b1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%84:\l84:                                               \l  %85 = load atomic i32, i32 addrspace(1)* %45 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %86\l}"];
	Node0x5f4b1f0 -> Node0x5f4b280;
	Node0x5f4b280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%86:\l86:                                               \l  %87 = phi i32 [ %85, %84 ], [ 0, %77 ]\l  %88 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %87)\l  %89 = icmp ult i32 %88, 65792\l  br i1 %89, label %90, label %634\l|{<s0>T|<s1>F}}"];
	Node0x5f4b280:s0 -> Node0x5f4b6c0;
	Node0x5f4b280:s1 -> Node0x5f4b710;
	Node0x5f4b6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%90:\l90:                                               \l  %91 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %92 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %93 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %92, i32 0)\l  %94 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %91, i32 %93)\l  %95 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %96 = tail call i64 @llvm.ctpop.i64(i64 %95), !range !11\l  %97 = trunc i64 %96 to i32\l  br label %98\l}"];
	Node0x5f4b6c0 -> Node0x5f4ae30;
	Node0x5f4ae30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%98:\l98:                                               \l  %99 = phi i32 [ %94, %90 ], [ %102, %631 ]\l  %100 = phi i32 [ %88, %90 ], [ %632, %631 ]\l  %101 = phi %3 addrspace(1)* [ undef, %90 ], [ %633, %631 ]\l  %102 = tail call i32 asm sideeffect \"\l  %103 = icmp eq i32 %100, 0\l  br i1 %103, label %174, label %104\l|{<s0>T|<s1>F}}"];
	Node0x5f4ae30:s0 -> Node0x5f4cce0;
	Node0x5f4ae30:s1 -> Node0x5f4cd30;
	Node0x5f4cd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%104:\l104:                                              \l  %105 = icmp eq i32 %102, 0\l  br i1 %105, label %106, label %108\l|{<s0>T|<s1>F}}"];
	Node0x5f4cd30:s0 -> Node0x5f4cd80;
	Node0x5f4cd30:s1 -> Node0x5f4d680;
	Node0x5f4cd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%106:\l106:                                              \l  %107 = load atomic i32, i32 addrspace(1)* %46 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %108\l}"];
	Node0x5f4cd80 -> Node0x5f4d680;
	Node0x5f4d680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%108:\l108:                                              \l  %109 = phi i32 [ %107, %106 ], [ 0, %104 ]\l  %110 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %109)\l  %111 = add i32 %110, %102\l  %112 = urem i32 %111, %100\l  %113 = load i32, i32 addrspace(4)* %47, align 4, !tbaa !15\l  br label %114\l}"];
	Node0x5f4d680 -> Node0x5f4dcb0;
	Node0x5f4dcb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%114:\l114:                                              \l  %115 = phi i32 [ %112, %108 ], [ %169, %172 ]\l  %116 = phi i32 [ %100, %108 ], [ %170, %172 ]\l  %117 = phi %3 addrspace(1)* [ %101, %108 ], [ %171, %172 ]\l  %118 = icmp ugt i32 %115, 255\l  br i1 %118, label %119, label %129\l|{<s0>T|<s1>F}}"];
	Node0x5f4dcb0:s0 -> Node0x5f4e1f0;
	Node0x5f4dcb0:s1 -> Node0x5f4e280;
	Node0x5f4e1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%119:\l119:                                              \l  %120 = add i32 %115, -256\l  %121 = lshr i32 %120, 8\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %122, i32 0\l  %124 = load atomic i64, i64 addrspace(1)* %123 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %125 = inttoptr i64 %124 to %3 addrspace(1)*\l  %126 = and i32 %115, 255\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds %3, %3 addrspace(1)* %125, i64 %127\l  br label %132\l}"];
	Node0x5f4e1f0 -> Node0x5f48af0;
	Node0x5f4e280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%129:\l129:                                              \l  %130 = zext i32 %115 to i64\l  %131 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %130\l  br label %132\l}"];
	Node0x5f4e280 -> Node0x5f48af0;
	Node0x5f48af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%132:\l132:                                              \l  %133 = phi %3 addrspace(1)* [ %128, %119 ], [ %131, %129 ]\l  %134 = getelementptr inbounds %3, %3 addrspace(1)* %133, i64 0, i32 2\l  %135 = load atomic i32, i32 addrspace(1)* %134 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %136 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 %135, i32 %113, i32 36)\l  %137 = icmp eq i64 %136, 0\l  br i1 %137, label %143, label %138\l|{<s0>T|<s1>F}}"];
	Node0x5f48af0:s0 -> Node0x5f4f470;
	Node0x5f48af0:s1 -> Node0x5f4f4c0;
	Node0x5f4f4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%138:\l138:                                              \l  %139 = tail call i64 @llvm.cttz.i64(i64 %136, i1 true), !range !11\l  %140 = trunc i64 %139 to i32\l  %141 = shl nuw nsw i32 %140, 2\l  %142 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %141, i32 %115)\l  br label %143\l}"];
	Node0x5f4f4c0 -> Node0x5f4f470;
	Node0x5f4f470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%143:\l143:                                              \l  %144 = phi i32 [ %142, %138 ], [ -1, %132 ]\l  %145 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %144)\l  %146 = icmp eq i32 %145, -1\l  br i1 %146, label %162, label %147\l|{<s0>T|<s1>F}}"];
	Node0x5f4f470:s0 -> Node0x5f4fe70;
	Node0x5f4f470:s1 -> Node0x5f4fec0;
	Node0x5f4fec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%147:\l147:                                              \l  %148 = icmp ugt i32 %145, 255\l  br i1 %148, label %149, label %159\l|{<s0>T|<s1>F}}"];
	Node0x5f4fec0:s0 -> Node0x5f50090;
	Node0x5f4fec0:s1 -> Node0x5f500e0;
	Node0x5f50090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%149:\l149:                                              \l  %150 = add i32 %145, -256\l  %151 = lshr i32 %150, 8\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %152, i32 0\l  %154 = load atomic i64, i64 addrspace(1)* %153 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %155 = inttoptr i64 %154 to %3 addrspace(1)*\l  %156 = and i32 %145, 255\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds %3, %3 addrspace(1)* %155, i64 %157\l  br label %168\l}"];
	Node0x5f50090 -> Node0x5f50750;
	Node0x5f500e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%159:\l159:                                              \l  %160 = zext i32 %145 to i64\l  %161 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %160\l  br label %168\l}"];
	Node0x5f500e0 -> Node0x5f50750;
	Node0x5f4fe70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%162:\l162:                                              \l  %163 = add i32 %115, %97\l  %164 = urem i32 %163, %100\l  br i1 %105, label %165, label %166\l|{<s0>T|<s1>F}}"];
	Node0x5f4fe70:s0 -> Node0x5f50b10;
	Node0x5f4fe70:s1 -> Node0x5f50b60;
	Node0x5f50b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%165:\l165:                                              \l  store atomic i32 %164, i32 addrspace(1)* %46 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %166\l}"];
	Node0x5f50b10 -> Node0x5f50b60;
	Node0x5f50b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%166:\l166:                                              \l  %167 = sub i32 %116, %97\l  br label %168\l}"];
	Node0x5f50b60 -> Node0x5f50750;
	Node0x5f50750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%168:\l168:                                              \l  %169 = phi i32 [ %164, %166 ], [ %115, %149 ], [ %115, %159 ]\l  %170 = phi i32 [ %167, %166 ], [ %116, %149 ], [ %116, %159 ]\l  %171 = phi %3 addrspace(1)* [ %117, %166 ], [ %158, %149 ], [ %161, %159 ]\l  br i1 %146, label %172, label %1299\l|{<s0>T|<s1>F}}"];
	Node0x5f50750:s0 -> Node0x5f4ddb0;
	Node0x5f50750:s1 -> Node0x5f510d0;
	Node0x5f4ddb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%172:\l172:                                              \l  %173 = icmp sgt i32 %170, 0\l  br i1 %173, label %114, label %174\l|{<s0>T|<s1>F}}"];
	Node0x5f4ddb0:s0 -> Node0x5f4dcb0;
	Node0x5f4ddb0:s1 -> Node0x5f4cce0;
	Node0x5f4cce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%174:\l174:                                              \l  %175 = phi %3 addrspace(1)* [ %101, %98 ], [ %171, %172 ]\l  %176 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %177 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %178 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %177, i32 0)\l  %179 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %176, i32 %178)\l  br label %180\l}"];
	Node0x5f4cce0 -> Node0x5f51800;
	Node0x5f51800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%180:\l180:                                              \l  %181 = phi i32 [ %179, %174 ], [ %550, %548 ]\l  %182 = phi %3 addrspace(1)* [ undef, %174 ], [ %551, %548 ]\l  %183 = tail call i32 asm sideeffect \"\l  %184 = icmp eq i32 %183, 0\l  br i1 %184, label %185, label %187\l|{<s0>T|<s1>F}}"];
	Node0x5f51800:s0 -> Node0x5f51d00;
	Node0x5f51800:s1 -> Node0x5f51d50;
	Node0x5f51d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%185:\l185:                                              \l  %186 = load atomic i32, i32 addrspace(1)* %45 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %187\l}"];
	Node0x5f51d00 -> Node0x5f51d50;
	Node0x5f51d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%187:\l187:                                              \l  %188 = phi i32 [ %186, %185 ], [ 0, %180 ]\l  %189 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %188)\l  %190 = icmp eq i32 %189, 65792\l  br i1 %190, label %548, label %191\l|{<s0>T|<s1>F}}"];
	Node0x5f51d50:s0 -> Node0x5f518c0;
	Node0x5f51d50:s1 -> Node0x5f52100;
	Node0x5f52100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%191:\l191:                                              \l  br i1 %184, label %192, label %197\l|{<s0>T|<s1>F}}"];
	Node0x5f52100:s0 -> Node0x5f52200;
	Node0x5f52100:s1 -> Node0x5f52250;
	Node0x5f52200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%192:\l192:                                              \l  %193 = cmpxchg i32 addrspace(1)* %48, i32 0, i32 256\l... syncscope(\"agent-one-as\") monotonic monotonic, align 4\l  %194 = extractvalue \{ i32, i1 \} %193, 1\l  %195 = extractvalue \{ i32, i1 \} %193, 0\l  %196 = select i1 %194, i32 256, i32 %195\l  br label %197\l}"];
	Node0x5f52200 -> Node0x5f52250;
	Node0x5f52250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%197:\l197:                                              \l  %198 = phi i32 [ %196, %192 ], [ 0, %191 ]\l  %199 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %198)\l  %200 = icmp eq i32 %189, %199\l  br i1 %200, label %201, label %374\l|{<s0>T|<s1>F}}"];
	Node0x5f52250:s0 -> Node0x5f52a80;
	Node0x5f52250:s1 -> Node0x5f52ad0;
	Node0x5f52a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%201:\l201:                                              \l  %202 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %203 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %204 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %203, i32 0)\l  %205 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %202, i32 %204)\l  %206 = tail call i32 asm sideeffect \"\l  %207 = icmp eq i32 %206, 0\l  br i1 %207, label %208, label %210\l|{<s0>T|<s1>F}}"];
	Node0x5f52a80:s0 -> Node0x5f53220;
	Node0x5f52a80:s1 -> Node0x5f53270;
	Node0x5f53220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%208:\l208:                                              \l  %209 = load atomic i32, i32 addrspace(1)* %48 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %210\l}"];
	Node0x5f53220 -> Node0x5f53270;
	Node0x5f53270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%210:\l210:                                              \l  %211 = phi i32 [ %209, %208 ], [ 0, %201 ]\l  %212 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %211)\l  %213 = icmp eq i32 %212, 65792\l  br i1 %213, label %296, label %214\l|{<s0>T|<s1>F}}"];
	Node0x5f53270:s0 -> Node0x5f53620;
	Node0x5f53270:s1 -> Node0x5f53670;
	Node0x5f53670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%214:\l214:                                              \l  br i1 %207, label %215, label %224\l|{<s0>T|<s1>F}}"];
	Node0x5f53670:s0 -> Node0x5f53770;
	Node0x5f53670:s1 -> Node0x5f537c0;
	Node0x5f53770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%215:\l215:                                              \l  %216 = load atomic i64, i64 addrspace(1)* %49 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %217 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %218 = sub i64 %217, %216\l  %219 = icmp ugt i64 %218, 29999\l  br i1 %219, label %220, label %224\l|{<s0>T|<s1>F}}"];
	Node0x5f53770:s0 -> Node0x5f53bb0;
	Node0x5f53770:s1 -> Node0x5f537c0;
	Node0x5f53bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%220:\l220:                                              \l  %221 = cmpxchg i64 addrspace(1)* %49, i64 %216, i64 %217\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %222 = extractvalue \{ i64, i1 \} %221, 1\l  %223 = select i1 %222, i32 2, i32 1\l  br label %224\l}"];
	Node0x5f53bb0 -> Node0x5f537c0;
	Node0x5f537c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%224:\l224:                                              \l  %225 = phi i32 [ 1, %214 ], [ 1, %215 ], [ %223, %220 ]\l  %226 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %225)\l  %227 = icmp eq i32 %226, 1\l  br i1 %227, label %296, label %228\l|{<s0>T|<s1>F}}"];
	Node0x5f537c0:s0 -> Node0x5f53620;
	Node0x5f537c0:s1 -> Node0x5f541a0;
	Node0x5f541a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%228:\l228:                                              \l  br i1 %207, label %229, label %235\l|{<s0>T|<s1>F}}"];
	Node0x5f541a0:s0 -> Node0x5f542a0;
	Node0x5f541a0:s1 -> Node0x5f542f0;
	Node0x5f542a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%229:\l229:                                              \l  %230 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %231 = inttoptr i64 %230 to i8 addrspace(1)*\l  %232 = addrspacecast i8 addrspace(1)* %231 to i8*\l  %233 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %232, i64 noundef 0, i64 noundef 6144) #11\l  %234 = extractelement \<2 x i64\> %233, i64 0\l  br label %235\l}"];
	Node0x5f542a0 -> Node0x5f542f0;
	Node0x5f542f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%235:\l235:                                              \l  %236 = phi i64 [ %234, %229 ], [ 0, %228 ]\l  %237 = trunc i64 %236 to i32\l  %238 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %237)\l  %239 = insertelement \<2 x i32\> undef, i32 %238, i64 0\l  %240 = lshr i64 %236, 32\l  %241 = trunc i64 %240 to i32\l  %242 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %241)\l  %243 = insertelement \<2 x i32\> %239, i32 %242, i64 1\l  %244 = bitcast \<2 x i32\> %243 to i64\l  %245 = icmp eq i64 %244, 0\l  br i1 %245, label %296, label %246\l|{<s0>T|<s1>F}}"];
	Node0x5f542f0:s0 -> Node0x5f53620;
	Node0x5f542f0:s1 -> Node0x5f55420;
	Node0x5f55420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%246:\l246:                                              \l  %247 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %248 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %249 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %248, i32 0)\l  %250 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %247, i32 %249)\l  %251 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %252 = tail call i64 @llvm.ctpop.i64(i64 %251), !range !11\l  %253 = trunc i64 %252 to i32\l  %254 = inttoptr i64 %244 to i64 addrspace(1)*\l  %255 = icmp ult i32 %250, 768\l  br i1 %255, label %256, label %262\l|{<s0>T|<s1>F}}"];
	Node0x5f55420:s0 -> Node0x5f55d00;
	Node0x5f55420:s1 -> Node0x5f55d50;
	Node0x5f55d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%256:\l256:                                              \l  %257 = phi i32 [ %260, %256 ], [ %250, %246 ]\l  %258 = zext i32 %257 to i64\l  %259 = getelementptr inbounds i64, i64 addrspace(1)* %254, i64 %258\l  store i64 0, i64 addrspace(1)* %259, align 8, !tbaa !4\l  %260 = add i32 %257, %253\l  %261 = icmp ult i32 %260, 768\l  br i1 %261, label %256, label %262\l|{<s0>T|<s1>F}}"];
	Node0x5f55d00:s0 -> Node0x5f55d00;
	Node0x5f55d00:s1 -> Node0x5f55d50;
	Node0x5f55d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%262:\l262:                                              \l  br label %263\l}"];
	Node0x5f55d50 -> Node0x5f4ede0;
	Node0x5f4ede0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%263:\l263:                                              \l  %264 = phi i32 [ %293, %295 ], [ %226, %262 ]\l  %265 = phi i32 [ %273, %295 ], [ %212, %262 ]\l  %266 = phi i32 [ %267, %295 ], [ %206, %262 ]\l  %267 = tail call i32 asm sideeffect \"\l  %268 = icmp eq i32 %267, 0\l  br i1 %268, label %269, label %271\l|{<s0>T|<s1>F}}"];
	Node0x5f4ede0:s0 -> Node0x5f56f50;
	Node0x5f4ede0:s1 -> Node0x5f56fa0;
	Node0x5f56f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%269:\l269:                                              \l  %270 = load atomic i32, i32 addrspace(1)* %48 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %271\l}"];
	Node0x5f56f50 -> Node0x5f56fa0;
	Node0x5f56fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%271:\l271:                                              \l  %272 = phi i32 [ %270, %269 ], [ %265, %263 ]\l  %273 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %272)\l  %274 = icmp eq i32 %273, 65792\l  br i1 %274, label %275, label %281\l|{<s0>T|<s1>F}}"];
	Node0x5f56fa0:s0 -> Node0x5f33680;
	Node0x5f56fa0:s1 -> Node0x5f336d0;
	Node0x5f33680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%275:\l275:                                              \l  br i1 %268, label %276, label %296\l|{<s0>T|<s1>F}}"];
	Node0x5f33680:s0 -> Node0x5f337d0;
	Node0x5f33680:s1 -> Node0x5f53620;
	Node0x5f337d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%276:\l276:                                              \l  %277 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %278 = inttoptr i64 %277 to i8 addrspace(1)*\l  %279 = addrspacecast i8 addrspace(1)* %278 to i8*\l  %280 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %279, i64 noundef %244, i64 noundef 0) #11\l  br label %296\l}"];
	Node0x5f337d0 -> Node0x5f53620;
	Node0x5f336d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%281:\l281:                                              \l  br i1 %268, label %282, label %291\l|{<s0>T|<s1>F}}"];
	Node0x5f336d0:s0 -> Node0x5f33be0;
	Node0x5f336d0:s1 -> Node0x5f33c30;
	Node0x5f33be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%282:\l282:                                              \l  %283 = add i32 %273, -256\l  %284 = lshr i32 %283, 8\l  %285 = zext i32 %284 to i64\l  %286 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %285, i32 0\l  %287 = cmpxchg i64 addrspace(1)* %286, i64 0, i64 %244\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %288 = extractvalue \{ i64, i1 \} %287, 1\l  br i1 %288, label %289, label %291\l|{<s0>T|<s1>F}}"];
	Node0x5f33be0:s0 -> Node0x5f589d0;
	Node0x5f33be0:s1 -> Node0x5f33c30;
	Node0x5f589d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%289:\l289:                                              \l  %290 = atomicrmw add i32 addrspace(1)* %48, i32 256\l... syncscope(\"agent-one-as\") release, align 4\l  br label %291\l}"];
	Node0x5f589d0 -> Node0x5f33c30;
	Node0x5f33c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%291:\l291:                                              \l  %292 = phi i32 [ %264, %281 ], [ 0, %289 ], [ %264, %282 ]\l  %293 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %292)\l  %294 = icmp eq i32 %293, 0\l  br i1 %294, label %296, label %295\l|{<s0>T|<s1>F}}"];
	Node0x5f33c30:s0 -> Node0x5f53620;
	Node0x5f33c30:s1 -> Node0x5f4eea0;
	Node0x5f4eea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%295:\l295:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 2)\l  br label %263\l}"];
	Node0x5f4eea0 -> Node0x5f4ede0;
	Node0x5f53620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%296:\l296:                                              \l  %297 = phi i32 [ 2, %210 ], [ 1, %224 ], [ %226, %235 ], [ %264, %276 ], [\l... %264, %275 ], [ 0, %291 ]\l  %298 = icmp eq i32 %297, 0\l  br i1 %298, label %372, label %299\l|{<s0>T|<s1>F}}"];
	Node0x5f53620:s0 -> Node0x5f592a0;
	Node0x5f53620:s1 -> Node0x5f592f0;
	Node0x5f592f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%299:\l299:                                              \l  %300 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %301 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %302 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %301, i32 0)\l  %303 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %300, i32 %302)\l  %304 = icmp eq i32 %303, 0\l  br i1 %304, label %305, label %369\l|{<s0>T|<s1>F}}"];
	Node0x5f592f0:s0 -> Node0x5f598c0;
	Node0x5f592f0:s1 -> Node0x5f59910;
	Node0x5f598c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%305:\l305:                                              \l  %306 = load atomic i64, i64 addrspace(1)* %49 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %307 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %308 = sub i64 %307, %306\l  %309 = icmp ult i64 %308, 30000\l  br i1 %309, label %310, label %369\l|{<s0>T|<s1>F}}"];
	Node0x5f598c0:s0 -> Node0x5f59cc0;
	Node0x5f598c0:s1 -> Node0x5f59910;
	Node0x5f59cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%310:\l310:                                              \l  %311 = trunc i64 %308 to i32\l  %312 = sub nuw nsw i32 30000, %311\l  %313 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %314 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %312)\l  %315 = sext i32 %314 to i64\l  %316 = add i64 %313, %315\l  %317 = add i64 %313, 1625\l  %318 = icmp ugt i64 %316, %317\l  br i1 %318, label %323, label %319\l|{<s0>T|<s1>F}}"];
	Node0x5f59cc0:s0 -> Node0x5f5a2d0;
	Node0x5f59cc0:s1 -> Node0x5f5a320;
	Node0x5f5a320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%319:\l319:                                              \l  %320 = phi i64 [ %313, %310 ], [ %324, %323 ]\l  %321 = add i64 %320, 806\l  %322 = icmp ugt i64 %316, %321\l  br i1 %322, label %331, label %327\l|{<s0>T|<s1>F}}"];
	Node0x5f5a320:s0 -> Node0x5f5a650;
	Node0x5f5a320:s1 -> Node0x5f5a6a0;
	Node0x5f5a2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%323:\l323:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 127)\l  %324 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %325 = add i64 %324, 1625\l  %326 = icmp ugt i64 %316, %325\l  br i1 %326, label %323, label %319\l|{<s0>T|<s1>F}}"];
	Node0x5f5a2d0:s0 -> Node0x5f5a2d0;
	Node0x5f5a2d0:s1 -> Node0x5f5a320;
	Node0x5f5a6a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%327:\l327:                                              \l  %328 = phi i64 [ %320, %319 ], [ %332, %331 ]\l  %329 = add i64 %328, 396\l  %330 = icmp ugt i64 %316, %329\l  br i1 %330, label %335, label %339\l|{<s0>T|<s1>F}}"];
	Node0x5f5a6a0:s0 -> Node0x5f5ada0;
	Node0x5f5a6a0:s1 -> Node0x5f5adf0;
	Node0x5f5a650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%331:\l331:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 63)\l  %332 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %333 = add i64 %332, 806\l  %334 = icmp ugt i64 %316, %333\l  br i1 %334, label %331, label %327\l|{<s0>T|<s1>F}}"];
	Node0x5f5a650:s0 -> Node0x5f5a650;
	Node0x5f5a650:s1 -> Node0x5f5a6a0;
	Node0x5f5ada0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%335:\l335:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 31)\l  %336 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %337 = add i64 %336, 396\l  %338 = icmp ugt i64 %316, %337\l  br i1 %338, label %335, label %339\l|{<s0>T|<s1>F}}"];
	Node0x5f5ada0:s0 -> Node0x5f5ada0;
	Node0x5f5ada0:s1 -> Node0x5f5adf0;
	Node0x5f5adf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%339:\l339:                                              \l  %340 = phi i64 [ %328, %327 ], [ %336, %335 ]\l  %341 = add i64 %340, 192\l  %342 = icmp ugt i64 %316, %341\l  br i1 %342, label %347, label %343\l|{<s0>T|<s1>F}}"];
	Node0x5f5adf0:s0 -> Node0x5f5b7e0;
	Node0x5f5adf0:s1 -> Node0x5f5b830;
	Node0x5f5b830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%343:\l343:                                              \l  %344 = phi i64 [ %340, %339 ], [ %348, %347 ]\l  %345 = add i64 %344, 89\l  %346 = icmp ugt i64 %316, %345\l  br i1 %346, label %355, label %351\l|{<s0>T|<s1>F}}"];
	Node0x5f5b830:s0 -> Node0x5f5bb60;
	Node0x5f5b830:s1 -> Node0x5f5bbb0;
	Node0x5f5b7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%347:\l347:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 15)\l  %348 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %349 = add i64 %348, 192\l  %350 = icmp ugt i64 %316, %349\l  br i1 %350, label %347, label %343\l|{<s0>T|<s1>F}}"];
	Node0x5f5b7e0:s0 -> Node0x5f5b7e0;
	Node0x5f5b7e0:s1 -> Node0x5f5b830;
	Node0x5f5bbb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%351:\l351:                                              \l  %352 = phi i64 [ %344, %343 ], [ %356, %355 ]\l  %353 = add i64 %352, 38\l  %354 = icmp ugt i64 %316, %353\l  br i1 %354, label %362, label %359\l|{<s0>T|<s1>F}}"];
	Node0x5f5bbb0:s0 -> Node0x5f5c240;
	Node0x5f5bbb0:s1 -> Node0x5f5c290;
	Node0x5f5bb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%355:\l355:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 7)\l  %356 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %357 = add i64 %356, 89\l  %358 = icmp ugt i64 %316, %357\l  br i1 %358, label %355, label %351\l|{<s0>T|<s1>F}}"];
	Node0x5f5bb60:s0 -> Node0x5f5bb60;
	Node0x5f5bb60:s1 -> Node0x5f5bbb0;
	Node0x5f5c290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%359:\l359:                                              \l  %360 = phi i64 [ %352, %351 ], [ %363, %362 ]\l  %361 = icmp ugt i64 %316, %360\l  br i1 %361, label %366, label %369\l|{<s0>T|<s1>F}}"];
	Node0x5f5c290:s0 -> Node0x5f5c860;
	Node0x5f5c290:s1 -> Node0x5f59910;
	Node0x5f5c240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%362:\l362:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 3)\l  %363 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %364 = add i64 %363, 38\l  %365 = icmp ugt i64 %316, %364\l  br i1 %365, label %362, label %359\l|{<s0>T|<s1>F}}"];
	Node0x5f5c240:s0 -> Node0x5f5c240;
	Node0x5f5c240:s1 -> Node0x5f5c290;
	Node0x5f5c860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%366:\l366:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 1)\l  %367 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %368 = icmp ugt i64 %316, %367\l  br i1 %368, label %366, label %369\l|{<s0>T|<s1>F}}"];
	Node0x5f5c860:s0 -> Node0x5f5c860;
	Node0x5f5c860:s1 -> Node0x5f59910;
	Node0x5f59910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%369:\l369:                                              \l  %370 = icmp eq i32 %297, 2\l  %371 = select i1 %370, %3 addrspace(1)* null, %3 addrspace(1)* inttoptr (i64\l... 1 to %3 addrspace(1)*)\l  br label %372\l}"];
	Node0x5f59910 -> Node0x5f592a0;
	Node0x5f592a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%372:\l372:                                              \l  %373 = phi %3 addrspace(1)* [ %371, %369 ], [ %182, %296 ]\l  br i1 %298, label %374, label %548\l|{<s0>T|<s1>F}}"];
	Node0x5f592a0:s0 -> Node0x5f52ad0;
	Node0x5f592a0:s1 -> Node0x5f518c0;
	Node0x5f52ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%374:\l374:                                              \l  %375 = phi %3 addrspace(1)* [ %373, %372 ], [ %182, %197 ]\l  br i1 %184, label %376, label %385\l|{<s0>T|<s1>F}}"];
	Node0x5f52ad0:s0 -> Node0x5f5d3b0;
	Node0x5f52ad0:s1 -> Node0x5f5d400;
	Node0x5f5d3b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%376:\l376:                                              \l  %377 = load atomic i64, i64 addrspace(1)* %50 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %378 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %379 = sub i64 %378, %377\l  %380 = icmp ugt i64 %379, 19999\l  br i1 %380, label %381, label %385\l|{<s0>T|<s1>F}}"];
	Node0x5f5d3b0:s0 -> Node0x5f5d760;
	Node0x5f5d3b0:s1 -> Node0x5f5d400;
	Node0x5f5d760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%381:\l381:                                              \l  %382 = cmpxchg i64 addrspace(1)* %50, i64 %377, i64 %378\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %383 = extractvalue \{ i64, i1 \} %382, 1\l  %384 = select i1 %383, i8 addrspace(1)* null, i8 addrspace(1)* inttoptr (i64\l... 1 to i8 addrspace(1)*)\l  br label %385\l}"];
	Node0x5f5d760 -> Node0x5f5d400;
	Node0x5f5d400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%385:\l385:                                              \l  %386 = phi i8 addrspace(1)* [ inttoptr (i64 1 to i8 addrspace(1)*), %374 ],\l... [ inttoptr (i64 1 to i8 addrspace(1)*), %376 ], [ %384, %381 ]\l  %387 = ptrtoint i8 addrspace(1)* %386 to i64\l  %388 = trunc i64 %387 to i32\l  %389 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %388)\l  %390 = insertelement \<2 x i32\> undef, i32 %389, i64 0\l  %391 = lshr i64 %387, 32\l  %392 = trunc i64 %391 to i32\l  %393 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %392)\l  %394 = insertelement \<2 x i32\> %390, i32 %393, i64 1\l  %395 = bitcast \<2 x i32\> %394 to i64\l  %396 = icmp eq i64 %395, 0\l  br i1 %396, label %399, label %397\l|{<s0>T|<s1>F}}"];
	Node0x5f5d400:s0 -> Node0x5f5e1e0;
	Node0x5f5d400:s1 -> Node0x5f5e230;
	Node0x5f5e230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%397:\l397:                                              \l  %398 = inttoptr i64 %395 to %3 addrspace(1)*\l  br label %548\l}"];
	Node0x5f5e230 -> Node0x5f518c0;
	Node0x5f5e1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%399:\l399:                                              \l  br i1 %184, label %400, label %413\l|{<s0>T|<s1>F}}"];
	Node0x5f5e1e0:s0 -> Node0x5f5e410;
	Node0x5f5e1e0:s1 -> Node0x5f5e460;
	Node0x5f5e410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%400:\l400:                                              \l  %401 = load atomic i64, i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 6) syncscope(\"agent-one-as\") monotonic, align 8\l  %402 = load i64, i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 7), align 8, !tbaa !18\l  %403 = icmp ult i64 %401, %402\l  br i1 %403, label %404, label %407\l|{<s0>T|<s1>F}}"];
	Node0x5f5e410:s0 -> Node0x5f5e870;
	Node0x5f5e410:s1 -> Node0x5f5e8c0;
	Node0x5f5e870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%404:\l404:                                              \l  %405 = atomicrmw add i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 6), i64 2097152 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %406 = icmp ult i64 %405, %402\l  br i1 %406, label %413, label %407\l|{<s0>T|<s1>F}}"];
	Node0x5f5e870:s0 -> Node0x5f5e460;
	Node0x5f5e870:s1 -> Node0x5f5e8c0;
	Node0x5f5e8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%407:\l407:                                              \l  %408 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %409 = inttoptr i64 %408 to i8 addrspace(1)*\l  %410 = addrspacecast i8 addrspace(1)* %409 to i8*\l  %411 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %410, i64 noundef 0, i64 noundef 2097152) #11\l  %412 = extractelement \<2 x i64\> %411, i64 0\l  br label %413\l}"];
	Node0x5f5e8c0 -> Node0x5f5e460;
	Node0x5f5e460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%413:\l413:                                              \l  %414 = phi i64 [ 0, %399 ], [ %412, %407 ], [ %405, %404 ]\l  %415 = trunc i64 %414 to i32\l  %416 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %415)\l  %417 = insertelement \<2 x i32\> undef, i32 %416, i64 0\l  %418 = lshr i64 %414, 32\l  %419 = trunc i64 %418 to i32\l  %420 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %419)\l  %421 = insertelement \<2 x i32\> %417, i32 %420, i64 1\l  %422 = bitcast \<2 x i32\> %421 to i64\l  %423 = icmp eq i64 %422, 0\l  br i1 %423, label %548, label %424\l|{<s0>T|<s1>F}}"];
	Node0x5f5e460:s0 -> Node0x5f518c0;
	Node0x5f5e460:s1 -> Node0x5f5f640;
	Node0x5f5f640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%424:\l424:                                              \l  %425 = inttoptr i64 %422 to %5 addrspace(1)*\l  %426 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %427 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %428 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %427, i32 0)\l  %429 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %426, i32 %428)\l  %430 = tail call i32 asm sideeffect \"\l  %431 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %432 = tail call i64 @llvm.ctpop.i64(i64 %431), !range !11\l  %433 = trunc i64 %432 to i32\l  %434 = load i32, i32 addrspace(4)* %51, align 4, !tbaa !20\l  %435 = load i32, i32 addrspace(4)* %52, align 4, !tbaa !21\l  %436 = add i32 %435, 31\l  %437 = lshr i32 %436, 5\l  br i1 %55, label %461, label %438\l|{<s0>T|<s1>F}}"];
	Node0x5f5f640:s0 -> Node0x5f60430;
	Node0x5f5f640:s1 -> Node0x5f604c0;
	Node0x5f604c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%438:\l438:                                              \l  %439 = icmp ult i32 %430, %437\l  br i1 %439, label %446, label %440\l|{<s0>T|<s1>F}}"];
	Node0x5f604c0:s0 -> Node0x5f60690;
	Node0x5f604c0:s1 -> Node0x5f606e0;
	Node0x5f606e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%440:\l440:                                              \l  %441 = mul i32 %434, %433\l  %442 = load i32, i32 addrspace(4)* %56, align 4, !tbaa !22\l  %443 = mul i32 %434, %430\l  %444 = add i32 %442, %443\l  %445 = icmp ult i32 %444, %435\l  br i1 %445, label %452, label %470\l|{<s0>T|<s1>F}}"];
	Node0x5f606e0:s0 -> Node0x5f60bd0;
	Node0x5f606e0:s1 -> Node0x5f60c60;
	Node0x5f60690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%446:\l446:                                              \l  %447 = phi i32 [ %450, %446 ], [ %430, %438 ]\l  %448 = zext i32 %447 to i64\l  %449 = getelementptr inbounds %5, %5 addrspace(1)* %425, i64 0, i32 4, i64\l... %448\l  store i32 0, i32 addrspace(1)* %449, align 4, !tbaa !23\l  %450 = add i32 %447, %433\l  %451 = icmp ult i32 %450, %437\l  br i1 %451, label %446, label %440\l|{<s0>T|<s1>F}}"];
	Node0x5f60690:s0 -> Node0x5f60690;
	Node0x5f60690:s1 -> Node0x5f606e0;
	Node0x5f60bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%452:\l452:                                              \l  %453 = phi i32 [ %459, %452 ], [ %444, %440 ]\l  %454 = and i32 %453, 31\l  %455 = shl nuw i32 1, %454\l  %456 = lshr i32 %453, 5\l  %457 = zext i32 %456 to i64\l  %458 = getelementptr inbounds %5, %5 addrspace(1)* %425, i64 0, i32 4, i64\l... %457\l  store i32 %455, i32 addrspace(1)* %458, align 4, !tbaa !23\l  %459 = add i32 %453, %441\l  %460 = icmp ult i32 %459, %435\l  br i1 %460, label %452, label %470\l|{<s0>T|<s1>F}}"];
	Node0x5f60bd0:s0 -> Node0x5f60bd0;
	Node0x5f60bd0:s1 -> Node0x5f60c60;
	Node0x5f60430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%461:\l461:                                              \l  %462 = load i32, i32 addrspace(4)* %57, align 4, !tbaa !24\l  %463 = icmp ult i32 %430, %437\l  br i1 %463, label %464, label %470\l|{<s0>T|<s1>F}}"];
	Node0x5f60430:s0 -> Node0x5f5fbf0;
	Node0x5f60430:s1 -> Node0x5f60c60;
	Node0x5f5fbf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%464:\l464:                                              \l  %465 = phi i32 [ %468, %464 ], [ %430, %461 ]\l  %466 = zext i32 %465 to i64\l  %467 = getelementptr inbounds %5, %5 addrspace(1)* %425, i64 0, i32 4, i64\l... %466\l  store i32 %462, i32 addrspace(1)* %467, align 4, !tbaa !23\l  %468 = add i32 %465, %433\l  %469 = icmp ult i32 %468, %437\l  br i1 %469, label %464, label %470\l|{<s0>T|<s1>F}}"];
	Node0x5f5fbf0:s0 -> Node0x5f5fbf0;
	Node0x5f5fbf0:s1 -> Node0x5f60c60;
	Node0x5f60c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%470:\l470:                                              \l  %471 = icmp eq i32 %430, 0\l  br i1 %471, label %472, label %483\l|{<s0>T|<s1>F}}"];
	Node0x5f60c60:s0 -> Node0x5f62660;
	Node0x5f60c60:s1 -> Node0x5f626b0;
	Node0x5f62660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%472:\l472:                                              \l  br i1 %58, label %481, label %473\l|{<s0>T|<s1>F}}"];
	Node0x5f62660:s0 -> Node0x5f627b0;
	Node0x5f62660:s1 -> Node0x5f62800;
	Node0x5f62800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%473:\l473:                                              \l  %474 = and i32 %435, 31\l  %475 = shl nsw i32 -1, %474\l  %476 = add nsw i32 %437, -1\l  %477 = zext i32 %476 to i64\l  %478 = getelementptr inbounds %5, %5 addrspace(1)* %425, i64 0, i32 4, i64\l... %477\l  %479 = load i32, i32 addrspace(1)* %478, align 4, !tbaa !23\l  %480 = or i32 %479, %475\l  store i32 %480, i32 addrspace(1)* %478, align 4, !tbaa !23\l  br label %481\l}"];
	Node0x5f62800 -> Node0x5f627b0;
	Node0x5f627b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%481:\l481:                                              \l  %482 = inttoptr i64 %422 to \<4 x i32\> addrspace(1)*\l  store \<4 x i32\> %59, \<4 x i32\> addrspace(1)* %482, align 16, !tbaa !25\l  br label %483\l}"];
	Node0x5f627b0 -> Node0x5f626b0;
	Node0x5f626b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%483:\l483:                                              \l  %484 = getelementptr inbounds %5, %5 addrspace(1)* %425, i64 0, i32 1\l  br label %485\l}"];
	Node0x5f626b0 -> Node0x5f63130;
	Node0x5f63130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%485:\l485:                                              \l  %486 = phi i32 [ %199, %483 ], [ %502, %547 ]\l  %487 = phi i32 [ %189, %483 ], [ %495, %547 ]\l  %488 = phi i32 [ %183, %483 ], [ %489, %547 ]\l  %489 = tail call i32 asm sideeffect \"\l  %490 = icmp eq i32 %489, 0\l  br i1 %490, label %491, label %493\l|{<s0>T|<s1>F}}"];
	Node0x5f63130:s0 -> Node0x5f63830;
	Node0x5f63130:s1 -> Node0x5f63880;
	Node0x5f63830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%491:\l491:                                              \l  %492 = load atomic i32, i32 addrspace(1)* %45 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %493\l}"];
	Node0x5f63830 -> Node0x5f63880;
	Node0x5f63880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%493:\l493:                                              \l  %494 = phi i32 [ %492, %491 ], [ %487, %485 ]\l  %495 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %494)\l  %496 = icmp eq i32 %495, 65792\l  br i1 %496, label %548, label %497\l|{<s0>T|<s1>F}}"];
	Node0x5f63880:s0 -> Node0x5f518c0;
	Node0x5f63880:s1 -> Node0x5f63c70;
	Node0x5f63c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%497:\l497:                                              \l  br i1 %490, label %498, label %500\l|{<s0>T|<s1>F}}"];
	Node0x5f63c70:s0 -> Node0x5f63d70;
	Node0x5f63c70:s1 -> Node0x5f63dc0;
	Node0x5f63d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%498:\l498:                                              \l  %499 = load atomic i32, i32 addrspace(1)* %48 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %500\l}"];
	Node0x5f63d70 -> Node0x5f63dc0;
	Node0x5f63dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%500:\l500:                                              \l  %501 = phi i32 [ %499, %498 ], [ %486, %497 ]\l  %502 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %501)\l  %503 = icmp eq i32 %495, %502\l  br i1 %503, label %504, label %510\l|{<s0>T|<s1>F}}"];
	Node0x5f63dc0:s0 -> Node0x5f641d0;
	Node0x5f63dc0:s1 -> Node0x5f64220;
	Node0x5f641d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%504:\l504:                                              \l  br i1 %490, label %505, label %548\l|{<s0>T|<s1>F}}"];
	Node0x5f641d0:s0 -> Node0x5f64320;
	Node0x5f641d0:s1 -> Node0x5f518c0;
	Node0x5f64320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%505:\l505:                                              \l  %506 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %507 = inttoptr i64 %506 to i8 addrspace(1)*\l  %508 = addrspacecast i8 addrspace(1)* %507 to i8*\l  %509 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %508, i64 noundef %422, i64 noundef 0) #11\l  br label %548\l}"];
	Node0x5f64320 -> Node0x5f518c0;
	Node0x5f64220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%510:\l510:                                              \l  br i1 %490, label %511, label %533\l|{<s0>T|<s1>F}}"];
	Node0x5f64220:s0 -> Node0x5f64710;
	Node0x5f64220:s1 -> Node0x5f64760;
	Node0x5f64710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%511:\l511:                                              \l  %512 = icmp ugt i32 %495, 255\l  br i1 %512, label %513, label %523\l|{<s0>T|<s1>F}}"];
	Node0x5f64710:s0 -> Node0x5f63630;
	Node0x5f64710:s1 -> Node0x5f63420;
	Node0x5f63630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%513:\l513:                                              \l  %514 = add i32 %495, -256\l  %515 = lshr i32 %514, 8\l  %516 = zext i32 %515 to i64\l  %517 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %516, i32 0\l  %518 = load atomic i64, i64 addrspace(1)* %517 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %519 = inttoptr i64 %518 to %3 addrspace(1)*\l  %520 = and i32 %495, 255\l  %521 = zext i32 %520 to i64\l  %522 = getelementptr inbounds %3, %3 addrspace(1)* %519, i64 %521\l  br label %526\l}"];
	Node0x5f63630 -> Node0x5f563a0;
	Node0x5f63420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%523:\l523:                                              \l  %524 = zext i32 %495 to i64\l  %525 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %44, i64 %524\l  br label %526\l}"];
	Node0x5f63420 -> Node0x5f563a0;
	Node0x5f563a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%526:\l526:                                              \l  %527 = phi %3 addrspace(1)* [ %522, %513 ], [ %525, %523 ]\l  store i32 %495, i32 addrspace(1)* %484, align 4, !tbaa !26\l  %528 = getelementptr inbounds %3, %3 addrspace(1)* %527, i64 0, i32 1\l  %529 = cmpxchg i64 addrspace(1)* %528, i64 0, i64 %422\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %530 = extractvalue \{ i64, i1 \} %529, 1\l  br i1 %530, label %531, label %533\l|{<s0>T|<s1>F}}"];
	Node0x5f563a0:s0 -> Node0x5f56a40;
	Node0x5f563a0:s1 -> Node0x5f64760;
	Node0x5f56a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%531:\l531:                                              \l  %532 = atomicrmw add i32 addrspace(1)* %45, i32 1 syncscope(\"agent-one-as\")\l... release, align 4\l  br label %533\l}"];
	Node0x5f56a40 -> Node0x5f64760;
	Node0x5f64760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%533:\l533:                                              \l  %534 = phi %3 addrspace(1)* [ null, %510 ], [ %527, %531 ], [ null, %526 ]\l  %535 = ptrtoint %3 addrspace(1)* %534 to i64\l  %536 = trunc i64 %535 to i32\l  %537 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %536)\l  %538 = insertelement \<2 x i32\> undef, i32 %537, i64 0\l  %539 = lshr i64 %535, 32\l  %540 = trunc i64 %539 to i32\l  %541 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %540)\l  %542 = insertelement \<2 x i32\> %538, i32 %541, i64 1\l  %543 = bitcast \<2 x i32\> %542 to i64\l  %544 = icmp eq i64 %543, 0\l  br i1 %544, label %547, label %545\l|{<s0>T|<s1>F}}"];
	Node0x5f64760:s0 -> Node0x5f631f0;
	Node0x5f64760:s1 -> Node0x5f66e40;
	Node0x5f66e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%545:\l545:                                              \l  %546 = inttoptr i64 %543 to %3 addrspace(1)*\l  br label %548\l}"];
	Node0x5f66e40 -> Node0x5f518c0;
	Node0x5f631f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%547:\l547:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 2)\l  br label %485\l}"];
	Node0x5f631f0 -> Node0x5f63130;
	Node0x5f518c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%548:\l548:                                              \l  %549 = phi i1 [ false, %397 ], [ true, %505 ], [ true, %504 ], [ false, %413\l... ], [ false, %545 ], [ false, %187 ], [ false, %372 ], [ false, %493 ]\l  %550 = phi i32 [ %183, %397 ], [ 0, %505 ], [ %489, %504 ], [ %183, %413 ],\l... [ %489, %545 ], [ %183, %187 ], [ %183, %372 ], [ %489, %493 ]\l  %551 = phi %3 addrspace(1)* [ %398, %397 ], [ %375, %505 ], [ %375, %504 ],\l... [ null, %413 ], [ %546, %545 ], [ null, %187 ], [ %373, %372 ], [ null, %493 ]\l  br i1 %549, label %180, label %552\l|{<s0>T|<s1>F}}"];
	Node0x5f518c0:s0 -> Node0x5f51800;
	Node0x5f518c0:s1 -> Node0x5f67660;
	Node0x5f67660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%552:\l552:                                              \l  %553 = icmp eq %3 addrspace(1)* %551, inttoptr (i64 1 to %3 addrspace(1)*)\l  br i1 %553, label %554, label %631\l|{<s0>T|<s1>F}}"];
	Node0x5f67660:s0 -> Node0x5f677f0;
	Node0x5f67660:s1 -> Node0x5f4c500;
	Node0x5f677f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%554:\l554:                                              \l  %555 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %556 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %557 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %556, i32 0)\l  %558 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %555, i32 %557)\l  %559 = icmp eq i32 %558, 0\l  br i1 %559, label %560, label %624\l|{<s0>T|<s1>F}}"];
	Node0x5f677f0:s0 -> Node0x5f67da0;
	Node0x5f677f0:s1 -> Node0x5f67df0;
	Node0x5f67da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%560:\l560:                                              \l  %561 = load atomic i64, i64 addrspace(1)* %50 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %562 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %563 = sub i64 %562, %561\l  %564 = icmp ult i64 %563, 20000\l  br i1 %564, label %565, label %624\l|{<s0>T|<s1>F}}"];
	Node0x5f67da0:s0 -> Node0x5f68150;
	Node0x5f67da0:s1 -> Node0x5f67df0;
	Node0x5f68150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%565:\l565:                                              \l  %566 = trunc i64 %563 to i32\l  %567 = sub nuw nsw i32 20000, %566\l  %568 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %569 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %567)\l  %570 = sext i32 %569 to i64\l  %571 = add i64 %568, %570\l  %572 = add i64 %568, 1625\l  %573 = icmp ugt i64 %571, %572\l  br i1 %573, label %578, label %574\l|{<s0>T|<s1>F}}"];
	Node0x5f68150:s0 -> Node0x5f68730;
	Node0x5f68150:s1 -> Node0x5f68780;
	Node0x5f68780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%574:\l574:                                              \l  %575 = phi i64 [ %568, %565 ], [ %579, %578 ]\l  %576 = add i64 %575, 806\l  %577 = icmp ugt i64 %571, %576\l  br i1 %577, label %586, label %582\l|{<s0>T|<s1>F}}"];
	Node0x5f68780:s0 -> Node0x5f68a50;
	Node0x5f68780:s1 -> Node0x5f68aa0;
	Node0x5f68730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%578:\l578:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 127)\l  %579 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %580 = add i64 %579, 1625\l  %581 = icmp ugt i64 %571, %580\l  br i1 %581, label %578, label %574\l|{<s0>T|<s1>F}}"];
	Node0x5f68730:s0 -> Node0x5f68730;
	Node0x5f68730:s1 -> Node0x5f68780;
	Node0x5f68aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%582:\l582:                                              \l  %583 = phi i64 [ %575, %574 ], [ %587, %586 ]\l  %584 = add i64 %583, 396\l  %585 = icmp ugt i64 %571, %584\l  br i1 %585, label %590, label %594\l|{<s0>T|<s1>F}}"];
	Node0x5f68aa0:s0 -> Node0x5f69100;
	Node0x5f68aa0:s1 -> Node0x5f69150;
	Node0x5f68a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%586:\l586:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 63)\l  %587 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %588 = add i64 %587, 806\l  %589 = icmp ugt i64 %571, %588\l  br i1 %589, label %586, label %582\l|{<s0>T|<s1>F}}"];
	Node0x5f68a50:s0 -> Node0x5f68a50;
	Node0x5f68a50:s1 -> Node0x5f68aa0;
	Node0x5f69100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%590:\l590:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 31)\l  %591 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %592 = add i64 %591, 396\l  %593 = icmp ugt i64 %571, %592\l  br i1 %593, label %590, label %594\l|{<s0>T|<s1>F}}"];
	Node0x5f69100:s0 -> Node0x5f69100;
	Node0x5f69100:s1 -> Node0x5f69150;
	Node0x5f69150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%594:\l594:                                              \l  %595 = phi i64 [ %583, %582 ], [ %591, %590 ]\l  %596 = add i64 %595, 192\l  %597 = icmp ugt i64 %571, %596\l  br i1 %597, label %602, label %598\l|{<s0>T|<s1>F}}"];
	Node0x5f69150:s0 -> Node0x5f69b40;
	Node0x5f69150:s1 -> Node0x5f69b90;
	Node0x5f69b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%598:\l598:                                              \l  %599 = phi i64 [ %595, %594 ], [ %603, %602 ]\l  %600 = add i64 %599, 89\l  %601 = icmp ugt i64 %571, %600\l  br i1 %601, label %610, label %606\l|{<s0>T|<s1>F}}"];
	Node0x5f69b90:s0 -> Node0x5f69e60;
	Node0x5f69b90:s1 -> Node0x5f69eb0;
	Node0x5f69b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%602:\l602:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 15)\l  %603 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %604 = add i64 %603, 192\l  %605 = icmp ugt i64 %571, %604\l  br i1 %605, label %602, label %598\l|{<s0>T|<s1>F}}"];
	Node0x5f69b40:s0 -> Node0x5f69b40;
	Node0x5f69b40:s1 -> Node0x5f69b90;
	Node0x5f69eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%606:\l606:                                              \l  %607 = phi i64 [ %599, %598 ], [ %611, %610 ]\l  %608 = add i64 %607, 38\l  %609 = icmp ugt i64 %571, %608\l  br i1 %609, label %617, label %614\l|{<s0>T|<s1>F}}"];
	Node0x5f69eb0:s0 -> Node0x5f6a510;
	Node0x5f69eb0:s1 -> Node0x5f6a560;
	Node0x5f69e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%610:\l610:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 7)\l  %611 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %612 = add i64 %611, 89\l  %613 = icmp ugt i64 %571, %612\l  br i1 %613, label %610, label %606\l|{<s0>T|<s1>F}}"];
	Node0x5f69e60:s0 -> Node0x5f69e60;
	Node0x5f69e60:s1 -> Node0x5f69eb0;
	Node0x5f6a560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%614:\l614:                                              \l  %615 = phi i64 [ %607, %606 ], [ %618, %617 ]\l  %616 = icmp ugt i64 %571, %615\l  br i1 %616, label %621, label %624\l|{<s0>T|<s1>F}}"];
	Node0x5f6a560:s0 -> Node0x5f6ab30;
	Node0x5f6a560:s1 -> Node0x5f67df0;
	Node0x5f6a510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%617:\l617:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 3)\l  %618 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %619 = add i64 %618, 38\l  %620 = icmp ugt i64 %571, %619\l  br i1 %620, label %617, label %614\l|{<s0>T|<s1>F}}"];
	Node0x5f6a510:s0 -> Node0x5f6a510;
	Node0x5f6a510:s1 -> Node0x5f6a560;
	Node0x5f6ab30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%621:\l621:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 1)\l  %622 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %623 = icmp ugt i64 %571, %622\l  br i1 %623, label %621, label %624\l|{<s0>T|<s1>F}}"];
	Node0x5f6ab30:s0 -> Node0x5f6ab30;
	Node0x5f6ab30:s1 -> Node0x5f67df0;
	Node0x5f67df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%624:\l624:                                              \l  %625 = icmp eq i32 %102, 0\l  br i1 %625, label %626, label %628\l|{<s0>T|<s1>F}}"];
	Node0x5f67df0:s0 -> Node0x5f6b350;
	Node0x5f67df0:s1 -> Node0x5f6b3a0;
	Node0x5f6b350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%626:\l626:                                              \l  %627 = load atomic i32, i32 addrspace(1)* %45 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %628\l}"];
	Node0x5f6b350 -> Node0x5f6b3a0;
	Node0x5f6b3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%628:\l628:                                              \l  %629 = phi i32 [ %627, %626 ], [ %100, %624 ]\l  %630 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %629)\l  br label %631\l}"];
	Node0x5f6b3a0 -> Node0x5f4c500;
	Node0x5f4c500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%631:\l631:                                              \l  %632 = phi i32 [ %630, %628 ], [ %100, %552 ]\l  %633 = phi %3 addrspace(1)* [ %175, %628 ], [ %551, %552 ]\l  br i1 %553, label %98, label %1299\l|{<s0>T|<s1>F}}"];
	Node0x5f4c500:s0 -> Node0x5f4ae30;
	Node0x5f4c500:s1 -> Node0x5f510d0;
	Node0x5f4b710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%634:\l634:                                              \l  %635 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %636 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %637 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %636, i32 0)\l  %638 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %635, i32 %637)\l  %639 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %640 = tail call i64 @llvm.ctpop.i64(i64 %639), !range !11\l  %641 = trunc i64 %640 to i32\l  br label %642\l}"];
	Node0x5f4b710 -> Node0x5f6bff0;
	Node0x5f6bff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%642:\l642:                                              \l  %643 = phi i32 [ %43, %634 ], [ %1297, %1295 ]\l  %644 = phi i32 [ %638, %634 ], [ %646, %1295 ]\l  %645 = phi %3 addrspace(1)* [ undef, %634 ], [ %1298, %1295 ]\l  %646 = tail call i32 asm sideeffect \"\l  %647 = zext i32 %643 to i64\l  %648 = icmp eq i32 %646, 0\l  br i1 %648, label %649, label %652\l|{<s0>T|<s1>F}}"];
	Node0x5f6bff0:s0 -> Node0x5f6c660;
	Node0x5f6bff0:s1 -> Node0x5f6c6b0;
	Node0x5f6c660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%649:\l649:                                              \l  %650 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 0, i64\l... %647, i32 0\l  %651 = load atomic i32, i32 addrspace(1)* %650 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %652\l}"];
	Node0x5f6c660 -> Node0x5f6c6b0;
	Node0x5f6c6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%652:\l652:                                              \l  %653 = phi i32 [ %651, %649 ], [ 0, %642 ]\l  %654 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %653)\l  %655 = add i32 %654, %646\l  %656 = urem i32 %655, 65792\l  %657 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %647, i32 1\l  %658 = load i32, i32 addrspace(4)* %657, align 4, !tbaa !28\l  %659 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 0, i64\l... %647, i32 0\l  br label %660\l}"];
	Node0x5f6c6b0 -> Node0x5f6cec0;
	Node0x5f6cec0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%660:\l660:                                              \l  %661 = phi i32 [ %656, %652 ], [ %715, %718 ]\l  %662 = phi i32 [ 65792, %652 ], [ %716, %718 ]\l  %663 = phi %3 addrspace(1)* [ %645, %652 ], [ %717, %718 ]\l  %664 = icmp ugt i32 %661, 255\l  br i1 %664, label %665, label %675\l|{<s0>T|<s1>F}}"];
	Node0x5f6cec0:s0 -> Node0x5f6d2b0;
	Node0x5f6cec0:s1 -> Node0x5f6d340;
	Node0x5f6d2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%665:\l665:                                              \l  %666 = add i32 %661, -256\l  %667 = lshr i32 %666, 8\l  %668 = zext i32 %667 to i64\l  %669 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %647, i64 %668, i32 0\l  %670 = load atomic i64, i64 addrspace(1)* %669 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %671 = inttoptr i64 %670 to %3 addrspace(1)*\l  %672 = and i32 %661, 255\l  %673 = zext i32 %672 to i64\l  %674 = getelementptr inbounds %3, %3 addrspace(1)* %671, i64 %673\l  br label %678\l}"];
	Node0x5f6d2b0 -> Node0x5f6d9b0;
	Node0x5f6d340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%675:\l675:                                              \l  %676 = zext i32 %661 to i64\l  %677 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %647, i64 %676\l  br label %678\l}"];
	Node0x5f6d340 -> Node0x5f6d9b0;
	Node0x5f6d9b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%678:\l678:                                              \l  %679 = phi %3 addrspace(1)* [ %674, %665 ], [ %677, %675 ]\l  %680 = getelementptr inbounds %3, %3 addrspace(1)* %679, i64 0, i32 2\l  %681 = load atomic i32, i32 addrspace(1)* %680 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %682 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 %681, i32 %658, i32 36)\l  %683 = icmp eq i64 %682, 0\l  br i1 %683, label %689, label %684\l|{<s0>T|<s1>F}}"];
	Node0x5f6d9b0:s0 -> Node0x5f6dff0;
	Node0x5f6d9b0:s1 -> Node0x5f6e040;
	Node0x5f6e040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%684:\l684:                                              \l  %685 = tail call i64 @llvm.cttz.i64(i64 %682, i1 true), !range !11\l  %686 = trunc i64 %685 to i32\l  %687 = shl nuw nsw i32 %686, 2\l  %688 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %687, i32 %661)\l  br label %689\l}"];
	Node0x5f6e040 -> Node0x5f6dff0;
	Node0x5f6dff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%689:\l689:                                              \l  %690 = phi i32 [ %688, %684 ], [ -1, %678 ]\l  %691 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %690)\l  %692 = icmp eq i32 %691, -1\l  br i1 %692, label %708, label %693\l|{<s0>T|<s1>F}}"];
	Node0x5f6dff0:s0 -> Node0x5f6e700;
	Node0x5f6dff0:s1 -> Node0x5f6e750;
	Node0x5f6e750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%693:\l693:                                              \l  %694 = icmp ugt i32 %691, 255\l  br i1 %694, label %695, label %705\l|{<s0>T|<s1>F}}"];
	Node0x5f6e750:s0 -> Node0x5f6e8e0;
	Node0x5f6e750:s1 -> Node0x5f6e930;
	Node0x5f6e8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%695:\l695:                                              \l  %696 = add i32 %691, -256\l  %697 = lshr i32 %696, 8\l  %698 = zext i32 %697 to i64\l  %699 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %647, i64 %698, i32 0\l  %700 = load atomic i64, i64 addrspace(1)* %699 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %701 = inttoptr i64 %700 to %3 addrspace(1)*\l  %702 = and i32 %691, 255\l  %703 = zext i32 %702 to i64\l  %704 = getelementptr inbounds %3, %3 addrspace(1)* %701, i64 %703\l  br label %714\l}"];
	Node0x5f6e8e0 -> Node0x5f6efa0;
	Node0x5f6e930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%705:\l705:                                              \l  %706 = zext i32 %691 to i64\l  %707 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %647, i64 %706\l  br label %714\l}"];
	Node0x5f6e930 -> Node0x5f6efa0;
	Node0x5f6e700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%708:\l708:                                              \l  %709 = add i32 %661, %641\l  %710 = urem i32 %709, 65792\l  br i1 %648, label %711, label %712\l|{<s0>T|<s1>F}}"];
	Node0x5f6e700:s0 -> Node0x5f6f360;
	Node0x5f6e700:s1 -> Node0x5f6f3b0;
	Node0x5f6f360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%711:\l711:                                              \l  store atomic i32 %710, i32 addrspace(1)* %659 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %712\l}"];
	Node0x5f6f360 -> Node0x5f6f3b0;
	Node0x5f6f3b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%712:\l712:                                              \l  %713 = sub i32 %662, %641\l  br label %714\l}"];
	Node0x5f6f3b0 -> Node0x5f6efa0;
	Node0x5f6efa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%714:\l714:                                              \l  %715 = phi i32 [ %710, %712 ], [ %661, %695 ], [ %661, %705 ]\l  %716 = phi i32 [ %713, %712 ], [ %662, %695 ], [ %662, %705 ]\l  %717 = phi %3 addrspace(1)* [ %663, %712 ], [ %704, %695 ], [ %707, %705 ]\l  br i1 %692, label %718, label %1295\l|{<s0>T|<s1>F}}"];
	Node0x5f6efa0:s0 -> Node0x5f6cf80;
	Node0x5f6efa0:s1 -> Node0x5f6c0b0;
	Node0x5f6cf80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%718:\l718:                                              \l  %719 = icmp sgt i32 %716, 0\l  br i1 %719, label %660, label %720\l|{<s0>T|<s1>F}}"];
	Node0x5f6cf80:s0 -> Node0x5f6cec0;
	Node0x5f6cf80:s1 -> Node0x5f6fa60;
	Node0x5f6fa60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%720:\l720:                                              \l  %721 = and i32 %643, -2\l  %722 = add i32 %721, 2\l  %723 = icmp ne i32 %643, %43\l  %724 = icmp ugt i32 %722, 15\l  %725 = select i1 %723, i1 true, i1 %724\l  br i1 %725, label %1295, label %726\l|{<s0>T|<s1>F}}"];
	Node0x5f6fa60:s0 -> Node0x5f6c0b0;
	Node0x5f6fa60:s1 -> Node0x5f6fe50;
	Node0x5f6fe50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%726:\l726:                                              \l  br i1 %648, label %727, label %731\l|{<s0>T|<s1>F}}"];
	Node0x5f6fe50:s0 -> Node0x5f6ff50;
	Node0x5f6fe50:s1 -> Node0x5f6ffa0;
	Node0x5f6ff50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%727:\l727:                                              \l  %728 = zext i32 %722 to i64\l  %729 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 1, i64\l... %728, i32 0\l  %730 = load atomic i32, i32 addrspace(1)* %729 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %731\l}"];
	Node0x5f6ff50 -> Node0x5f6ffa0;
	Node0x5f6ffa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%731:\l731:                                              \l  %732 = phi i32 [ %730, %727 ], [ 0, %726 ]\l  %733 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %732)\l  %734 = icmp ult i32 %733, 65792\l  br i1 %734, label %735, label %1295\l|{<s0>T|<s1>F}}"];
	Node0x5f6ffa0:s0 -> Node0x5f70520;
	Node0x5f6ffa0:s1 -> Node0x5f6c0b0;
	Node0x5f70520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%735:\l735:                                              \l  %736 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %737 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %738 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %737, i32 0)\l  %739 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %736, i32 %738)\l  %740 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %741 = tail call i64 @llvm.ctpop.i64(i64 %740), !range !11\l  %742 = trunc i64 %741 to i32\l  %743 = zext i32 %722 to i64\l  %744 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 0, i64\l... %743, i32 0\l  %745 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %743, i32 2\l  %746 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 1, i64\l... %743, i32 0\l  %747 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 2, i64\l... %743, i32 0\l  %748 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 4, i64\l... %743, i32 0\l  %749 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 3, i64\l... %743, i32 0\l  %750 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %743, i32 5\l  %751 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %743, i32 0\l  %752 = lshr i64 191, %743\l  %753 = and i64 %752, 1\l  %754 = icmp eq i64 %753, 0\l  %755 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %743, i32 4\l  %756 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %743, i32 6\l  %757 = icmp eq i32 %721, 0\l  %758 = insertelement \<4 x i32\> \<i32 poison, i32 0, i32 0, i32 0\>, i32 %722,\l... i64 0\l  br label %759\l}"];
	Node0x5f70520 -> Node0x5f71950;
	Node0x5f71950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%759:\l759:                                              \l  %760 = phi i32 [ %739, %735 ], [ %763, %1292 ]\l  %761 = phi i32 [ %733, %735 ], [ %1293, %1292 ]\l  %762 = phi %3 addrspace(1)* [ undef, %735 ], [ %1294, %1292 ]\l  %763 = tail call i32 asm sideeffect \"\l  %764 = icmp eq i32 %761, 0\l  br i1 %764, label %835, label %765\l|{<s0>T|<s1>F}}"];
	Node0x5f71950:s0 -> Node0x5f71f20;
	Node0x5f71950:s1 -> Node0x5f71f70;
	Node0x5f71f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%765:\l765:                                              \l  %766 = icmp eq i32 %763, 0\l  br i1 %766, label %767, label %769\l|{<s0>T|<s1>F}}"];
	Node0x5f71f70:s0 -> Node0x5f72100;
	Node0x5f71f70:s1 -> Node0x5f72150;
	Node0x5f72100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%767:\l767:                                              \l  %768 = load atomic i32, i32 addrspace(1)* %744 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %769\l}"];
	Node0x5f72100 -> Node0x5f72150;
	Node0x5f72150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%769:\l769:                                              \l  %770 = phi i32 [ %768, %767 ], [ 0, %765 ]\l  %771 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %770)\l  %772 = add i32 %771, %763\l  %773 = urem i32 %772, %761\l  %774 = load i32, i32 addrspace(4)* %745, align 4, !tbaa !15\l  br label %775\l}"];
	Node0x5f72150 -> Node0x5f6c3f0;
	Node0x5f6c3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%775:\l775:                                              \l  %776 = phi i32 [ %773, %769 ], [ %830, %833 ]\l  %777 = phi i32 [ %761, %769 ], [ %831, %833 ]\l  %778 = phi %3 addrspace(1)* [ %762, %769 ], [ %832, %833 ]\l  %779 = icmp ugt i32 %776, 255\l  br i1 %779, label %780, label %790\l|{<s0>T|<s1>F}}"];
	Node0x5f6c3f0:s0 -> Node0x5f72f40;
	Node0x5f6c3f0:s1 -> Node0x5f72fd0;
	Node0x5f72f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%780:\l780:                                              \l  %781 = add i32 %776, -256\l  %782 = lshr i32 %781, 8\l  %783 = zext i32 %782 to i64\l  %784 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %783, i32 0\l  %785 = load atomic i64, i64 addrspace(1)* %784 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %786 = inttoptr i64 %785 to %3 addrspace(1)*\l  %787 = and i32 %776, 255\l  %788 = zext i32 %787 to i64\l  %789 = getelementptr inbounds %3, %3 addrspace(1)* %786, i64 %788\l  br label %793\l}"];
	Node0x5f72f40 -> Node0x5f73670;
	Node0x5f72fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%790:\l790:                                              \l  %791 = zext i32 %776 to i64\l  %792 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %791\l  br label %793\l}"];
	Node0x5f72fd0 -> Node0x5f73670;
	Node0x5f73670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%793:\l793:                                              \l  %794 = phi %3 addrspace(1)* [ %789, %780 ], [ %792, %790 ]\l  %795 = getelementptr inbounds %3, %3 addrspace(1)* %794, i64 0, i32 2\l  %796 = load atomic i32, i32 addrspace(1)* %795 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %797 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 %796, i32 %774, i32 36)\l  %798 = icmp eq i64 %797, 0\l  br i1 %798, label %804, label %799\l|{<s0>T|<s1>F}}"];
	Node0x5f73670:s0 -> Node0x5f73cf0;
	Node0x5f73670:s1 -> Node0x5f73d40;
	Node0x5f73d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%799:\l799:                                              \l  %800 = tail call i64 @llvm.cttz.i64(i64 %797, i1 true), !range !11\l  %801 = trunc i64 %800 to i32\l  %802 = shl nuw nsw i32 %801, 2\l  %803 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %802, i32 %776)\l  br label %804\l}"];
	Node0x5f73d40 -> Node0x5f73cf0;
	Node0x5f73cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%804:\l804:                                              \l  %805 = phi i32 [ %803, %799 ], [ -1, %793 ]\l  %806 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %805)\l  %807 = icmp eq i32 %806, -1\l  br i1 %807, label %823, label %808\l|{<s0>T|<s1>F}}"];
	Node0x5f73cf0:s0 -> Node0x5f74400;
	Node0x5f73cf0:s1 -> Node0x5f74450;
	Node0x5f74450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%808:\l808:                                              \l  %809 = icmp ugt i32 %806, 255\l  br i1 %809, label %810, label %820\l|{<s0>T|<s1>F}}"];
	Node0x5f74450:s0 -> Node0x5f745e0;
	Node0x5f74450:s1 -> Node0x5f74630;
	Node0x5f745e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%810:\l810:                                              \l  %811 = add i32 %806, -256\l  %812 = lshr i32 %811, 8\l  %813 = zext i32 %812 to i64\l  %814 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %813, i32 0\l  %815 = load atomic i64, i64 addrspace(1)* %814 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %816 = inttoptr i64 %815 to %3 addrspace(1)*\l  %817 = and i32 %806, 255\l  %818 = zext i32 %817 to i64\l  %819 = getelementptr inbounds %3, %3 addrspace(1)* %816, i64 %818\l  br label %829\l}"];
	Node0x5f745e0 -> Node0x5f74ca0;
	Node0x5f74630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%820:\l820:                                              \l  %821 = zext i32 %806 to i64\l  %822 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %821\l  br label %829\l}"];
	Node0x5f74630 -> Node0x5f74ca0;
	Node0x5f74400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%823:\l823:                                              \l  %824 = add i32 %776, %742\l  %825 = urem i32 %824, %761\l  br i1 %766, label %826, label %827\l|{<s0>T|<s1>F}}"];
	Node0x5f74400:s0 -> Node0x5f75060;
	Node0x5f74400:s1 -> Node0x5f750b0;
	Node0x5f75060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%826:\l826:                                              \l  store atomic i32 %825, i32 addrspace(1)* %744 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %827\l}"];
	Node0x5f75060 -> Node0x5f750b0;
	Node0x5f750b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%827:\l827:                                              \l  %828 = sub i32 %777, %742\l  br label %829\l}"];
	Node0x5f750b0 -> Node0x5f74ca0;
	Node0x5f74ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%829:\l829:                                              \l  %830 = phi i32 [ %825, %827 ], [ %776, %810 ], [ %776, %820 ]\l  %831 = phi i32 [ %828, %827 ], [ %777, %810 ], [ %777, %820 ]\l  %832 = phi %3 addrspace(1)* [ %778, %827 ], [ %819, %810 ], [ %822, %820 ]\l  br i1 %807, label %833, label %1295\l|{<s0>T|<s1>F}}"];
	Node0x5f74ca0:s0 -> Node0x5f71d20;
	Node0x5f74ca0:s1 -> Node0x5f6c0b0;
	Node0x5f71d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%833:\l833:                                              \l  %834 = icmp sgt i32 %831, 0\l  br i1 %834, label %775, label %835\l|{<s0>T|<s1>F}}"];
	Node0x5f71d20:s0 -> Node0x5f6c3f0;
	Node0x5f71d20:s1 -> Node0x5f71f20;
	Node0x5f71f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%835:\l835:                                              \l  %836 = phi %3 addrspace(1)* [ %762, %759 ], [ %832, %833 ]\l  %837 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %838 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %839 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %838, i32 0)\l  %840 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %837, i32 %839)\l  br label %841\l}"];
	Node0x5f71f20 -> Node0x5f75d00;
	Node0x5f75d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%841:\l841:                                              \l  %842 = phi i32 [ %840, %835 ], [ %1211, %1209 ]\l  %843 = phi %3 addrspace(1)* [ undef, %835 ], [ %1212, %1209 ]\l  %844 = tail call i32 asm sideeffect \"\l  %845 = icmp eq i32 %844, 0\l  br i1 %845, label %846, label %848\l|{<s0>T|<s1>F}}"];
	Node0x5f75d00:s0 -> Node0x5f76200;
	Node0x5f75d00:s1 -> Node0x5f76250;
	Node0x5f76200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%846:\l846:                                              \l  %847 = load atomic i32, i32 addrspace(1)* %746 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %848\l}"];
	Node0x5f76200 -> Node0x5f76250;
	Node0x5f76250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%848:\l848:                                              \l  %849 = phi i32 [ %847, %846 ], [ 0, %841 ]\l  %850 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %849)\l  %851 = icmp eq i32 %850, 65792\l  br i1 %851, label %1209, label %852\l|{<s0>T|<s1>F}}"];
	Node0x5f76250:s0 -> Node0x5f75dc0;
	Node0x5f76250:s1 -> Node0x5f76600;
	Node0x5f76600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%852:\l852:                                              \l  br i1 %845, label %853, label %858\l|{<s0>T|<s1>F}}"];
	Node0x5f76600:s0 -> Node0x5f76700;
	Node0x5f76600:s1 -> Node0x5f76750;
	Node0x5f76700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%853:\l853:                                              \l  %854 = cmpxchg i32 addrspace(1)* %747, i32 0, i32 256\l... syncscope(\"agent-one-as\") monotonic monotonic, align 4\l  %855 = extractvalue \{ i32, i1 \} %854, 1\l  %856 = extractvalue \{ i32, i1 \} %854, 0\l  %857 = select i1 %855, i32 256, i32 %856\l  br label %858\l}"];
	Node0x5f76700 -> Node0x5f76750;
	Node0x5f76750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%858:\l858:                                              \l  %859 = phi i32 [ %857, %853 ], [ 0, %852 ]\l  %860 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %859)\l  %861 = icmp eq i32 %850, %860\l  br i1 %861, label %862, label %1035\l|{<s0>T|<s1>F}}"];
	Node0x5f76750:s0 -> Node0x5f76d70;
	Node0x5f76750:s1 -> Node0x5f76dc0;
	Node0x5f76d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%862:\l862:                                              \l  %863 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %864 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %865 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %864, i32 0)\l  %866 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %863, i32 %865)\l  %867 = tail call i32 asm sideeffect \"\l  %868 = icmp eq i32 %867, 0\l  br i1 %868, label %869, label %871\l|{<s0>T|<s1>F}}"];
	Node0x5f76d70:s0 -> Node0x5f77510;
	Node0x5f76d70:s1 -> Node0x5f77560;
	Node0x5f77510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%869:\l869:                                              \l  %870 = load atomic i32, i32 addrspace(1)* %747 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %871\l}"];
	Node0x5f77510 -> Node0x5f77560;
	Node0x5f77560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%871:\l871:                                              \l  %872 = phi i32 [ %870, %869 ], [ 0, %862 ]\l  %873 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %872)\l  %874 = icmp eq i32 %873, 65792\l  br i1 %874, label %957, label %875\l|{<s0>T|<s1>F}}"];
	Node0x5f77560:s0 -> Node0x5f77910;
	Node0x5f77560:s1 -> Node0x5f77960;
	Node0x5f77960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%875:\l875:                                              \l  br i1 %868, label %876, label %885\l|{<s0>T|<s1>F}}"];
	Node0x5f77960:s0 -> Node0x5f77a60;
	Node0x5f77960:s1 -> Node0x5f77ab0;
	Node0x5f77a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%876:\l876:                                              \l  %877 = load atomic i64, i64 addrspace(1)* %748 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %878 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %879 = sub i64 %878, %877\l  %880 = icmp ugt i64 %879, 29999\l  br i1 %880, label %881, label %885\l|{<s0>T|<s1>F}}"];
	Node0x5f77a60:s0 -> Node0x5f77e10;
	Node0x5f77a60:s1 -> Node0x5f77ab0;
	Node0x5f77e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%881:\l881:                                              \l  %882 = cmpxchg i64 addrspace(1)* %748, i64 %877, i64 %878\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %883 = extractvalue \{ i64, i1 \} %882, 1\l  %884 = select i1 %883, i32 2, i32 1\l  br label %885\l}"];
	Node0x5f77e10 -> Node0x5f77ab0;
	Node0x5f77ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%885:\l885:                                              \l  %886 = phi i32 [ 1, %875 ], [ 1, %876 ], [ %884, %881 ]\l  %887 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %886)\l  %888 = icmp eq i32 %887, 1\l  br i1 %888, label %957, label %889\l|{<s0>T|<s1>F}}"];
	Node0x5f77ab0:s0 -> Node0x5f77910;
	Node0x5f77ab0:s1 -> Node0x5f783c0;
	Node0x5f783c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%889:\l889:                                              \l  br i1 %868, label %890, label %896\l|{<s0>T|<s1>F}}"];
	Node0x5f783c0:s0 -> Node0x5f784c0;
	Node0x5f783c0:s1 -> Node0x5f78510;
	Node0x5f784c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%890:\l890:                                              \l  %891 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %892 = inttoptr i64 %891 to i8 addrspace(1)*\l  %893 = addrspacecast i8 addrspace(1)* %892 to i8*\l  %894 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %893, i64 noundef 0, i64 noundef 6144) #11\l  %895 = extractelement \<2 x i64\> %894, i64 0\l  br label %896\l}"];
	Node0x5f784c0 -> Node0x5f78510;
	Node0x5f78510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%896:\l896:                                              \l  %897 = phi i64 [ %895, %890 ], [ 0, %889 ]\l  %898 = trunc i64 %897 to i32\l  %899 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %898)\l  %900 = insertelement \<2 x i32\> undef, i32 %899, i64 0\l  %901 = lshr i64 %897, 32\l  %902 = trunc i64 %901 to i32\l  %903 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %902)\l  %904 = insertelement \<2 x i32\> %900, i32 %903, i64 1\l  %905 = bitcast \<2 x i32\> %904 to i64\l  %906 = icmp eq i64 %905, 0\l  br i1 %906, label %957, label %907\l|{<s0>T|<s1>F}}"];
	Node0x5f78510:s0 -> Node0x5f77910;
	Node0x5f78510:s1 -> Node0x5f78ff0;
	Node0x5f78ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%907:\l907:                                              \l  %908 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %909 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %910 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %909, i32 0)\l  %911 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %908, i32 %910)\l  %912 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %913 = tail call i64 @llvm.ctpop.i64(i64 %912), !range !11\l  %914 = trunc i64 %913 to i32\l  %915 = inttoptr i64 %905 to i64 addrspace(1)*\l  %916 = icmp ult i32 %911, 768\l  br i1 %916, label %917, label %923\l|{<s0>T|<s1>F}}"];
	Node0x5f78ff0:s0 -> Node0x5f79880;
	Node0x5f78ff0:s1 -> Node0x5f798d0;
	Node0x5f79880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%917:\l917:                                              \l  %918 = phi i32 [ %921, %917 ], [ %911, %907 ]\l  %919 = zext i32 %918 to i64\l  %920 = getelementptr inbounds i64, i64 addrspace(1)* %915, i64 %919\l  store i64 0, i64 addrspace(1)* %920, align 8, !tbaa !4\l  %921 = add i32 %918, %914\l  %922 = icmp ult i32 %921, 768\l  br i1 %922, label %917, label %923\l|{<s0>T|<s1>F}}"];
	Node0x5f79880:s0 -> Node0x5f79880;
	Node0x5f79880:s1 -> Node0x5f798d0;
	Node0x5f798d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%923:\l923:                                              \l  br label %924\l}"];
	Node0x5f798d0 -> Node0x5f79df0;
	Node0x5f79df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%924:\l924:                                              \l  %925 = phi i32 [ %954, %956 ], [ %887, %923 ]\l  %926 = phi i32 [ %934, %956 ], [ %873, %923 ]\l  %927 = phi i32 [ %928, %956 ], [ %867, %923 ]\l  %928 = tail call i32 asm sideeffect \"\l  %929 = icmp eq i32 %928, 0\l  br i1 %929, label %930, label %932\l|{<s0>T|<s1>F}}"];
	Node0x5f79df0:s0 -> Node0x5f7a430;
	Node0x5f79df0:s1 -> Node0x5f7a480;
	Node0x5f7a430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%930:\l930:                                              \l  %931 = load atomic i32, i32 addrspace(1)* %747 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %932\l}"];
	Node0x5f7a430 -> Node0x5f7a480;
	Node0x5f7a480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%932:\l932:                                              \l  %933 = phi i32 [ %931, %930 ], [ %926, %924 ]\l  %934 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %933)\l  %935 = icmp eq i32 %934, 65792\l  br i1 %935, label %936, label %942\l|{<s0>T|<s1>F}}"];
	Node0x5f7a480:s0 -> Node0x5f7a870;
	Node0x5f7a480:s1 -> Node0x5f7a8c0;
	Node0x5f7a870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%936:\l936:                                              \l  br i1 %929, label %937, label %957\l|{<s0>T|<s1>F}}"];
	Node0x5f7a870:s0 -> Node0x5f7a9c0;
	Node0x5f7a870:s1 -> Node0x5f77910;
	Node0x5f7a9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%937:\l937:                                              \l  %938 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %939 = inttoptr i64 %938 to i8 addrspace(1)*\l  %940 = addrspacecast i8 addrspace(1)* %939 to i8*\l  %941 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %940, i64 noundef %905, i64 noundef 0) #11\l  br label %957\l}"];
	Node0x5f7a9c0 -> Node0x5f77910;
	Node0x5f7a8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%942:\l942:                                              \l  br i1 %929, label %943, label %952\l|{<s0>T|<s1>F}}"];
	Node0x5f7a8c0:s0 -> Node0x5f7adb0;
	Node0x5f7a8c0:s1 -> Node0x5f7ae00;
	Node0x5f7adb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%943:\l943:                                              \l  %944 = add i32 %934, -256\l  %945 = lshr i32 %944, 8\l  %946 = zext i32 %945 to i64\l  %947 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %946, i32 0\l  %948 = cmpxchg i64 addrspace(1)* %947, i64 0, i64 %905\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %949 = extractvalue \{ i64, i1 \} %948, 1\l  br i1 %949, label %950, label %952\l|{<s0>T|<s1>F}}"];
	Node0x5f7adb0:s0 -> Node0x5f7b2f0;
	Node0x5f7adb0:s1 -> Node0x5f7ae00;
	Node0x5f7b2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%950:\l950:                                              \l  %951 = atomicrmw add i32 addrspace(1)* %747, i32 256\l... syncscope(\"agent-one-as\") release, align 4\l  br label %952\l}"];
	Node0x5f7b2f0 -> Node0x5f7ae00;
	Node0x5f7ae00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%952:\l952:                                              \l  %953 = phi i32 [ %925, %942 ], [ 0, %950 ], [ %925, %943 ]\l  %954 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %953)\l  %955 = icmp eq i32 %954, 0\l  br i1 %955, label %957, label %956\l|{<s0>T|<s1>F}}"];
	Node0x5f7ae00:s0 -> Node0x5f77910;
	Node0x5f7ae00:s1 -> Node0x5f79eb0;
	Node0x5f79eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%956:\l956:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 2)\l  br label %924\l}"];
	Node0x5f79eb0 -> Node0x5f79df0;
	Node0x5f77910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%957:\l957:                                              \l  %958 = phi i32 [ 2, %871 ], [ 1, %885 ], [ %887, %896 ], [ %925, %937 ], [\l... %925, %936 ], [ 0, %952 ]\l  %959 = icmp eq i32 %958, 0\l  br i1 %959, label %1033, label %960\l|{<s0>T|<s1>F}}"];
	Node0x5f77910:s0 -> Node0x5f7bb30;
	Node0x5f77910:s1 -> Node0x5f7bb80;
	Node0x5f7bb80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%960:\l960:                                              \l  %961 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %962 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %963 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %962, i32 0)\l  %964 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %961, i32 %963)\l  %965 = icmp eq i32 %964, 0\l  br i1 %965, label %966, label %1030\l|{<s0>T|<s1>F}}"];
	Node0x5f7bb80:s0 -> Node0x5f7c150;
	Node0x5f7bb80:s1 -> Node0x5f7c1a0;
	Node0x5f7c150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%966:\l966:                                              \l  %967 = load atomic i64, i64 addrspace(1)* %748 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %968 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %969 = sub i64 %968, %967\l  %970 = icmp ult i64 %969, 30000\l  br i1 %970, label %971, label %1030\l|{<s0>T|<s1>F}}"];
	Node0x5f7c150:s0 -> Node0x5f7c500;
	Node0x5f7c150:s1 -> Node0x5f7c1a0;
	Node0x5f7c500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%971:\l971:                                              \l  %972 = trunc i64 %969 to i32\l  %973 = sub nuw nsw i32 30000, %972\l  %974 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %975 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %973)\l  %976 = sext i32 %975 to i64\l  %977 = add i64 %974, %976\l  %978 = add i64 %974, 1625\l  %979 = icmp ugt i64 %977, %978\l  br i1 %979, label %984, label %980\l|{<s0>T|<s1>F}}"];
	Node0x5f7c500:s0 -> Node0x5f7cae0;
	Node0x5f7c500:s1 -> Node0x5f7cb30;
	Node0x5f7cb30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%980:\l980:                                              \l  %981 = phi i64 [ %974, %971 ], [ %985, %984 ]\l  %982 = add i64 %981, 806\l  %983 = icmp ugt i64 %977, %982\l  br i1 %983, label %992, label %988\l|{<s0>T|<s1>F}}"];
	Node0x5f7cb30:s0 -> Node0x5f7ce00;
	Node0x5f7cb30:s1 -> Node0x5f7ce50;
	Node0x5f7cae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%984:\l984:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 127)\l  %985 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %986 = add i64 %985, 1625\l  %987 = icmp ugt i64 %977, %986\l  br i1 %987, label %984, label %980\l|{<s0>T|<s1>F}}"];
	Node0x5f7cae0:s0 -> Node0x5f7cae0;
	Node0x5f7cae0:s1 -> Node0x5f7cb30;
	Node0x5f7ce50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%988:\l988:                                              \l  %989 = phi i64 [ %981, %980 ], [ %993, %992 ]\l  %990 = add i64 %989, 396\l  %991 = icmp ugt i64 %977, %990\l  br i1 %991, label %996, label %1000\l|{<s0>T|<s1>F}}"];
	Node0x5f7ce50:s0 -> Node0x5f7d4b0;
	Node0x5f7ce50:s1 -> Node0x5f7d500;
	Node0x5f7ce00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%992:\l992:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 63)\l  %993 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %994 = add i64 %993, 806\l  %995 = icmp ugt i64 %977, %994\l  br i1 %995, label %992, label %988\l|{<s0>T|<s1>F}}"];
	Node0x5f7ce00:s0 -> Node0x5f7ce00;
	Node0x5f7ce00:s1 -> Node0x5f7ce50;
	Node0x5f7d4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%996:\l996:                                              \l  tail call void @llvm.amdgcn.s.sleep(i32 31)\l  %997 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %998 = add i64 %997, 396\l  %999 = icmp ugt i64 %977, %998\l  br i1 %999, label %996, label %1000\l|{<s0>T|<s1>F}}"];
	Node0x5f7d4b0:s0 -> Node0x5f7d4b0;
	Node0x5f7d4b0:s1 -> Node0x5f7d500;
	Node0x5f7d500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1000:\l1000:                                             \l  %1001 = phi i64 [ %989, %988 ], [ %997, %996 ]\l  %1002 = add i64 %1001, 192\l  %1003 = icmp ugt i64 %977, %1002\l  br i1 %1003, label %1008, label %1004\l|{<s0>T|<s1>F}}"];
	Node0x5f7d500:s0 -> Node0x5f7def0;
	Node0x5f7d500:s1 -> Node0x5f7df40;
	Node0x5f7df40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1004:\l1004:                                             \l  %1005 = phi i64 [ %1001, %1000 ], [ %1009, %1008 ]\l  %1006 = add i64 %1005, 89\l  %1007 = icmp ugt i64 %977, %1006\l  br i1 %1007, label %1016, label %1012\l|{<s0>T|<s1>F}}"];
	Node0x5f7df40:s0 -> Node0x5f7e210;
	Node0x5f7df40:s1 -> Node0x5f7e260;
	Node0x5f7def0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%1008:\l1008:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 15)\l  %1009 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1010 = add i64 %1009, 192\l  %1011 = icmp ugt i64 %977, %1010\l  br i1 %1011, label %1008, label %1004\l|{<s0>T|<s1>F}}"];
	Node0x5f7def0:s0 -> Node0x5f7def0;
	Node0x5f7def0:s1 -> Node0x5f7df40;
	Node0x5f7e260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1012:\l1012:                                             \l  %1013 = phi i64 [ %1005, %1004 ], [ %1017, %1016 ]\l  %1014 = add i64 %1013, 38\l  %1015 = icmp ugt i64 %977, %1014\l  br i1 %1015, label %1023, label %1020\l|{<s0>T|<s1>F}}"];
	Node0x5f7e260:s0 -> Node0x5f7e8c0;
	Node0x5f7e260:s1 -> Node0x5f7e910;
	Node0x5f7e210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%1016:\l1016:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 7)\l  %1017 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1018 = add i64 %1017, 89\l  %1019 = icmp ugt i64 %977, %1018\l  br i1 %1019, label %1016, label %1012\l|{<s0>T|<s1>F}}"];
	Node0x5f7e210:s0 -> Node0x5f7e210;
	Node0x5f7e210:s1 -> Node0x5f7e260;
	Node0x5f7e910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1020:\l1020:                                             \l  %1021 = phi i64 [ %1013, %1012 ], [ %1024, %1023 ]\l  %1022 = icmp ugt i64 %977, %1021\l  br i1 %1022, label %1027, label %1030\l|{<s0>T|<s1>F}}"];
	Node0x5f7e910:s0 -> Node0x5f7eee0;
	Node0x5f7e910:s1 -> Node0x5f7c1a0;
	Node0x5f7e8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%1023:\l1023:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 3)\l  %1024 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1025 = add i64 %1024, 38\l  %1026 = icmp ugt i64 %977, %1025\l  br i1 %1026, label %1023, label %1020\l|{<s0>T|<s1>F}}"];
	Node0x5f7e8c0:s0 -> Node0x5f7e8c0;
	Node0x5f7e8c0:s1 -> Node0x5f7e910;
	Node0x5f7eee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%1027:\l1027:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 1)\l  %1028 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1029 = icmp ugt i64 %977, %1028\l  br i1 %1029, label %1027, label %1030\l|{<s0>T|<s1>F}}"];
	Node0x5f7eee0:s0 -> Node0x5f7eee0;
	Node0x5f7eee0:s1 -> Node0x5f7c1a0;
	Node0x5f7c1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%1030:\l1030:                                             \l  %1031 = icmp eq i32 %958, 2\l  %1032 = select i1 %1031, %3 addrspace(1)* null, %3 addrspace(1)* inttoptr\l... (i64 1 to %3 addrspace(1)*)\l  br label %1033\l}"];
	Node0x5f7c1a0 -> Node0x5f7bb30;
	Node0x5f7bb30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%1033:\l1033:                                             \l  %1034 = phi %3 addrspace(1)* [ %1032, %1030 ], [ %843, %957 ]\l  br i1 %959, label %1035, label %1209\l|{<s0>T|<s1>F}}"];
	Node0x5f7bb30:s0 -> Node0x5f76dc0;
	Node0x5f7bb30:s1 -> Node0x5f75dc0;
	Node0x5f76dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%1035:\l1035:                                             \l  %1036 = phi %3 addrspace(1)* [ %1034, %1033 ], [ %843, %858 ]\l  br i1 %845, label %1037, label %1046\l|{<s0>T|<s1>F}}"];
	Node0x5f76dc0:s0 -> Node0x5f65180;
	Node0x5f76dc0:s1 -> Node0x5f651d0;
	Node0x5f65180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%1037:\l1037:                                             \l  %1038 = load atomic i64, i64 addrspace(1)* %749 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %1039 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1040 = sub i64 %1039, %1038\l  %1041 = icmp ugt i64 %1040, 19999\l  br i1 %1041, label %1042, label %1046\l|{<s0>T|<s1>F}}"];
	Node0x5f65180:s0 -> Node0x5f65530;
	Node0x5f65180:s1 -> Node0x5f651d0;
	Node0x5f65530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%1042:\l1042:                                             \l  %1043 = cmpxchg i64 addrspace(1)* %749, i64 %1038, i64 %1039\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %1044 = extractvalue \{ i64, i1 \} %1043, 1\l  %1045 = select i1 %1044, i8 addrspace(1)* null, i8 addrspace(1)* inttoptr\l... (i64 1 to i8 addrspace(1)*)\l  br label %1046\l}"];
	Node0x5f65530 -> Node0x5f651d0;
	Node0x5f651d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%1046:\l1046:                                             \l  %1047 = phi i8 addrspace(1)* [ inttoptr (i64 1 to i8 addrspace(1)*), %1035\l... ], [ inttoptr (i64 1 to i8 addrspace(1)*), %1037 ], [ %1045, %1042 ]\l  %1048 = ptrtoint i8 addrspace(1)* %1047 to i64\l  %1049 = trunc i64 %1048 to i32\l  %1050 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1049)\l  %1051 = insertelement \<2 x i32\> undef, i32 %1050, i64 0\l  %1052 = lshr i64 %1048, 32\l  %1053 = trunc i64 %1052 to i32\l  %1054 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1053)\l  %1055 = insertelement \<2 x i32\> %1051, i32 %1054, i64 1\l  %1056 = bitcast \<2 x i32\> %1055 to i64\l  %1057 = icmp eq i64 %1056, 0\l  br i1 %1057, label %1060, label %1058\l|{<s0>T|<s1>F}}"];
	Node0x5f651d0:s0 -> Node0x5f65f80;
	Node0x5f651d0:s1 -> Node0x5f65fd0;
	Node0x5f65fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%1058:\l1058:                                             \l  %1059 = inttoptr i64 %1056 to %3 addrspace(1)*\l  br label %1209\l}"];
	Node0x5f65fd0 -> Node0x5f75dc0;
	Node0x5f65f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%1060:\l1060:                                             \l  br i1 %845, label %1061, label %1074\l|{<s0>T|<s1>F}}"];
	Node0x5f65f80:s0 -> Node0x5f661b0;
	Node0x5f65f80:s1 -> Node0x5f66200;
	Node0x5f661b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%1061:\l1061:                                             \l  %1062 = load atomic i64, i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 6) syncscope(\"agent-one-as\") monotonic, align 8\l  %1063 = load i64, i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 7), align 8, !tbaa !18\l  %1064 = icmp ult i64 %1062, %1063\l  br i1 %1064, label %1065, label %1068\l|{<s0>T|<s1>F}}"];
	Node0x5f661b0:s0 -> Node0x5f66470;
	Node0x5f661b0:s1 -> Node0x5f664c0;
	Node0x5f66470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%1065:\l1065:                                             \l  %1066 = atomicrmw add i64 addrspace(1)* getelementptr inbounds (%0, %0\l... addrspace(1)* @0, i64 0, i32 6), i64 2097152 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %1067 = icmp ult i64 %1066, %1063\l  br i1 %1067, label %1074, label %1068\l|{<s0>T|<s1>F}}"];
	Node0x5f66470:s0 -> Node0x5f66200;
	Node0x5f66470:s1 -> Node0x5f664c0;
	Node0x5f664c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1068:\l1068:                                             \l  %1069 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %1070 = inttoptr i64 %1069 to i8 addrspace(1)*\l  %1071 = addrspacecast i8 addrspace(1)* %1070 to i8*\l  %1072 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %1071, i64 noundef 0, i64 noundef 2097152) #11\l  %1073 = extractelement \<2 x i64\> %1072, i64 0\l  br label %1074\l}"];
	Node0x5f664c0 -> Node0x5f66200;
	Node0x5f66200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%1074:\l1074:                                             \l  %1075 = phi i64 [ 0, %1060 ], [ %1073, %1068 ], [ %1066, %1065 ]\l  %1076 = trunc i64 %1075 to i32\l  %1077 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1076)\l  %1078 = insertelement \<2 x i32\> undef, i32 %1077, i64 0\l  %1079 = lshr i64 %1075, 32\l  %1080 = trunc i64 %1079 to i32\l  %1081 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1080)\l  %1082 = insertelement \<2 x i32\> %1078, i32 %1081, i64 1\l  %1083 = bitcast \<2 x i32\> %1082 to i64\l  %1084 = icmp eq i64 %1083, 0\l  br i1 %1084, label %1209, label %1085\l|{<s0>T|<s1>F}}"];
	Node0x5f66200:s0 -> Node0x5f75dc0;
	Node0x5f66200:s1 -> Node0x5f84070;
	Node0x5f84070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%1085:\l1085:                                             \l  %1086 = inttoptr i64 %1083 to %5 addrspace(1)*\l  %1087 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %1088 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %1089 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %1088, i32 0)\l  %1090 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %1087, i32 %1089)\l  %1091 = tail call i32 asm sideeffect \"\l  %1092 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %1093 = tail call i64 @llvm.ctpop.i64(i64 %1092), !range !11\l  %1094 = trunc i64 %1093 to i32\l  %1095 = load i32, i32 addrspace(4)* %750, align 4, !tbaa !20\l  %1096 = load i32, i32 addrspace(4)* %751, align 4, !tbaa !21\l  %1097 = add i32 %1096, 31\l  %1098 = lshr i32 %1097, 5\l  br i1 %754, label %1122, label %1099\l|{<s0>T|<s1>F}}"];
	Node0x5f84070:s0 -> Node0x5f845e0;
	Node0x5f84070:s1 -> Node0x5f857a0;
	Node0x5f857a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1099:\l1099:                                             \l  %1100 = icmp ult i32 %1091, %1098\l  br i1 %1100, label %1107, label %1101\l|{<s0>T|<s1>F}}"];
	Node0x5f857a0:s0 -> Node0x5f85930;
	Node0x5f857a0:s1 -> Node0x5f85980;
	Node0x5f85980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1101:\l1101:                                             \l  %1102 = mul i32 %1095, %1094\l  %1103 = load i32, i32 addrspace(4)* %755, align 4, !tbaa !22\l  %1104 = mul i32 %1095, %1091\l  %1105 = add i32 %1103, %1104\l  %1106 = icmp ult i32 %1105, %1096\l  br i1 %1106, label %1113, label %1131\l|{<s0>T|<s1>F}}"];
	Node0x5f85980:s0 -> Node0x5f86340;
	Node0x5f85980:s1 -> Node0x5f86390;
	Node0x5f85930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%1107:\l1107:                                             \l  %1108 = phi i32 [ %1111, %1107 ], [ %1091, %1099 ]\l  %1109 = zext i32 %1108 to i64\l  %1110 = getelementptr inbounds %5, %5 addrspace(1)* %1086, i64 0, i32 4, i64\l... %1109\l  store i32 0, i32 addrspace(1)* %1110, align 4, !tbaa !23\l  %1111 = add i32 %1108, %1094\l  %1112 = icmp ult i32 %1111, %1098\l  br i1 %1112, label %1107, label %1101\l|{<s0>T|<s1>F}}"];
	Node0x5f85930:s0 -> Node0x5f85930;
	Node0x5f85930:s1 -> Node0x5f85980;
	Node0x5f86340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%1113:\l1113:                                             \l  %1114 = phi i32 [ %1120, %1113 ], [ %1105, %1101 ]\l  %1115 = and i32 %1114, 31\l  %1116 = shl nuw i32 1, %1115\l  %1117 = lshr i32 %1114, 5\l  %1118 = zext i32 %1117 to i64\l  %1119 = getelementptr inbounds %5, %5 addrspace(1)* %1086, i64 0, i32 4, i64\l... %1118\l  store i32 %1116, i32 addrspace(1)* %1119, align 4, !tbaa !23\l  %1120 = add i32 %1114, %1102\l  %1121 = icmp ult i32 %1120, %1096\l  br i1 %1121, label %1113, label %1131\l|{<s0>T|<s1>F}}"];
	Node0x5f86340:s0 -> Node0x5f86340;
	Node0x5f86340:s1 -> Node0x5f86390;
	Node0x5f845e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1122:\l1122:                                             \l  %1123 = load i32, i32 addrspace(4)* %756, align 4, !tbaa !24\l  %1124 = icmp ult i32 %1091, %1098\l  br i1 %1124, label %1125, label %1131\l|{<s0>T|<s1>F}}"];
	Node0x5f845e0:s0 -> Node0x5f87610;
	Node0x5f845e0:s1 -> Node0x5f86390;
	Node0x5f87610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%1125:\l1125:                                             \l  %1126 = phi i32 [ %1129, %1125 ], [ %1091, %1122 ]\l  %1127 = zext i32 %1126 to i64\l  %1128 = getelementptr inbounds %5, %5 addrspace(1)* %1086, i64 0, i32 4, i64\l... %1127\l  store i32 %1123, i32 addrspace(1)* %1128, align 4, !tbaa !23\l  %1129 = add i32 %1126, %1094\l  %1130 = icmp ult i32 %1129, %1098\l  br i1 %1130, label %1125, label %1131\l|{<s0>T|<s1>F}}"];
	Node0x5f87610:s0 -> Node0x5f87610;
	Node0x5f87610:s1 -> Node0x5f86390;
	Node0x5f86390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%1131:\l1131:                                             \l  %1132 = icmp eq i32 %1091, 0\l  br i1 %1132, label %1133, label %1144\l|{<s0>T|<s1>F}}"];
	Node0x5f86390:s0 -> Node0x5f87c00;
	Node0x5f86390:s1 -> Node0x5f87c50;
	Node0x5f87c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1133:\l1133:                                             \l  br i1 %757, label %1142, label %1134\l|{<s0>T|<s1>F}}"];
	Node0x5f87c00:s0 -> Node0x5f87d50;
	Node0x5f87c00:s1 -> Node0x5f87da0;
	Node0x5f87da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%1134:\l1134:                                             \l  %1135 = and i32 %1096, 31\l  %1136 = shl nsw i32 -1, %1135\l  %1137 = add nsw i32 %1098, -1\l  %1138 = zext i32 %1137 to i64\l  %1139 = getelementptr inbounds %5, %5 addrspace(1)* %1086, i64 0, i32 4, i64\l... %1138\l  %1140 = load i32, i32 addrspace(1)* %1139, align 4, !tbaa !23\l  %1141 = or i32 %1140, %1136\l  store i32 %1141, i32 addrspace(1)* %1139, align 4, !tbaa !23\l  br label %1142\l}"];
	Node0x5f87da0 -> Node0x5f87d50;
	Node0x5f87d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1142:\l1142:                                             \l  %1143 = inttoptr i64 %1083 to \<4 x i32\> addrspace(1)*\l  store \<4 x i32\> %758, \<4 x i32\> addrspace(1)* %1143, align 16, !tbaa !25\l  br label %1144\l}"];
	Node0x5f87d50 -> Node0x5f87c50;
	Node0x5f87c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%1144:\l1144:                                             \l  %1145 = getelementptr inbounds %5, %5 addrspace(1)* %1086, i64 0, i32 1\l  br label %1146\l}"];
	Node0x5f87c50 -> Node0x5f88be0;
	Node0x5f88be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1146:\l1146:                                             \l  %1147 = phi i32 [ %860, %1144 ], [ %1163, %1208 ]\l  %1148 = phi i32 [ %850, %1144 ], [ %1156, %1208 ]\l  %1149 = phi i32 [ %844, %1144 ], [ %1150, %1208 ]\l  %1150 = tail call i32 asm sideeffect \"\l  %1151 = icmp eq i32 %1150, 0\l  br i1 %1151, label %1152, label %1154\l|{<s0>T|<s1>F}}"];
	Node0x5f88be0:s0 -> Node0x5f37910;
	Node0x5f88be0:s1 -> Node0x5f37960;
	Node0x5f37910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%1152:\l1152:                                             \l  %1153 = load atomic i32, i32 addrspace(1)* %746 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %1154\l}"];
	Node0x5f37910 -> Node0x5f37960;
	Node0x5f37960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1154:\l1154:                                             \l  %1155 = phi i32 [ %1153, %1152 ], [ %1148, %1146 ]\l  %1156 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1155)\l  %1157 = icmp eq i32 %1156, 65792\l  br i1 %1157, label %1209, label %1158\l|{<s0>T|<s1>F}}"];
	Node0x5f37960:s0 -> Node0x5f75dc0;
	Node0x5f37960:s1 -> Node0x5f37d10;
	Node0x5f37d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1158:\l1158:                                             \l  br i1 %1151, label %1159, label %1161\l|{<s0>T|<s1>F}}"];
	Node0x5f37d10:s0 -> Node0x5f37e10;
	Node0x5f37d10:s1 -> Node0x5f57120;
	Node0x5f37e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%1159:\l1159:                                             \l  %1160 = load atomic i32, i32 addrspace(1)* %747 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %1161\l}"];
	Node0x5f37e10 -> Node0x5f57120;
	Node0x5f57120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1161:\l1161:                                             \l  %1162 = phi i32 [ %1160, %1159 ], [ %1147, %1158 ]\l  %1163 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1162)\l  %1164 = icmp eq i32 %1156, %1163\l  br i1 %1164, label %1165, label %1171\l|{<s0>T|<s1>F}}"];
	Node0x5f57120:s0 -> Node0x5f57530;
	Node0x5f57120:s1 -> Node0x5f57580;
	Node0x5f57530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%1165:\l1165:                                             \l  br i1 %1151, label %1166, label %1209\l|{<s0>T|<s1>F}}"];
	Node0x5f57530:s0 -> Node0x5f57680;
	Node0x5f57530:s1 -> Node0x5f75dc0;
	Node0x5f57680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%1166:\l1166:                                             \l  %1167 = load i64, i64 addrspace(4)* %62, align 8, !tbaa !4\l  %1168 = inttoptr i64 %1167 to i8 addrspace(1)*\l  %1169 = addrspacecast i8 addrspace(1)* %1168 to i8*\l  %1170 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef\l... %1169, i64 noundef %1083, i64 noundef 0) #11\l  br label %1209\l}"];
	Node0x5f57680 -> Node0x5f75dc0;
	Node0x5f57580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1171:\l1171:                                             \l  br i1 %1151, label %1172, label %1194\l|{<s0>T|<s1>F}}"];
	Node0x5f57580:s0 -> Node0x5f57a70;
	Node0x5f57580:s1 -> Node0x5f57ac0;
	Node0x5f57a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%1172:\l1172:                                             \l  %1173 = icmp ugt i32 %1156, 255\l  br i1 %1173, label %1174, label %1184\l|{<s0>T|<s1>F}}"];
	Node0x5f57a70:s0 -> Node0x5f57c50;
	Node0x5f57a70:s1 -> Node0x5f57ca0;
	Node0x5f57c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%1174:\l1174:                                             \l  %1175 = add i32 %1156, -256\l  %1176 = lshr i32 %1175, 8\l  %1177 = zext i32 %1176 to i64\l  %1178 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %1177, i32 0\l  %1179 = load atomic i64, i64 addrspace(1)* %1178 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %1180 = inttoptr i64 %1179 to %3 addrspace(1)*\l  %1181 = and i32 %1156, 255\l  %1182 = zext i32 %1181 to i64\l  %1183 = getelementptr inbounds %3, %3 addrspace(1)* %1180, i64 %1182\l  br label %1187\l}"];
	Node0x5f57c50 -> Node0x5f582d0;
	Node0x5f57ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%1184:\l1184:                                             \l  %1185 = zext i32 %1156 to i64\l  %1186 = getelementptr inbounds %0, %0 addrspace(1)* @0, i64 0, i32 5, i64\l... %743, i64 %1185\l  br label %1187\l}"];
	Node0x5f57ca0 -> Node0x5f582d0;
	Node0x5f582d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%1187:\l1187:                                             \l  %1188 = phi %3 addrspace(1)* [ %1183, %1174 ], [ %1186, %1184 ]\l  store i32 %1156, i32 addrspace(1)* %1145, align 4, !tbaa !26\l  %1189 = getelementptr inbounds %3, %3 addrspace(1)* %1188, i64 0, i32 1\l  %1190 = cmpxchg i64 addrspace(1)* %1189, i64 0, i64 %1083\l... syncscope(\"agent-one-as\") monotonic monotonic, align 8\l  %1191 = extractvalue \{ i64, i1 \} %1190, 1\l  br i1 %1191, label %1192, label %1194\l|{<s0>T|<s1>F}}"];
	Node0x5f582d0:s0 -> Node0x5f8c860;
	Node0x5f582d0:s1 -> Node0x5f57ac0;
	Node0x5f8c860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%1192:\l1192:                                             \l  %1193 = atomicrmw add i32 addrspace(1)* %746, i32 1\l... syncscope(\"agent-one-as\") release, align 4\l  br label %1194\l}"];
	Node0x5f8c860 -> Node0x5f57ac0;
	Node0x5f57ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1194:\l1194:                                             \l  %1195 = phi %3 addrspace(1)* [ null, %1171 ], [ %1188, %1192 ], [ null,\l... %1187 ]\l  %1196 = ptrtoint %3 addrspace(1)* %1195 to i64\l  %1197 = trunc i64 %1196 to i32\l  %1198 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1197)\l  %1199 = insertelement \<2 x i32\> undef, i32 %1198, i64 0\l  %1200 = lshr i64 %1196, 32\l  %1201 = trunc i64 %1200 to i32\l  %1202 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1201)\l  %1203 = insertelement \<2 x i32\> %1199, i32 %1202, i64 1\l  %1204 = bitcast \<2 x i32\> %1203 to i64\l  %1205 = icmp eq i64 %1204, 0\l  br i1 %1205, label %1208, label %1206\l|{<s0>T|<s1>F}}"];
	Node0x5f57ac0:s0 -> Node0x5f88ca0;
	Node0x5f57ac0:s1 -> Node0x5f8d150;
	Node0x5f8d150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%1206:\l1206:                                             \l  %1207 = inttoptr i64 %1204 to %3 addrspace(1)*\l  br label %1209\l}"];
	Node0x5f8d150 -> Node0x5f75dc0;
	Node0x5f88ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%1208:\l1208:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 2)\l  br label %1146\l}"];
	Node0x5f88ca0 -> Node0x5f88be0;
	Node0x5f75dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%1209:\l1209:                                             \l  %1210 = phi i1 [ false, %1058 ], [ true, %1166 ], [ true, %1165 ], [ false,\l... %1074 ], [ false, %1206 ], [ false, %848 ], [ false, %1033 ], [ false, %1154 ]\l  %1211 = phi i32 [ %844, %1058 ], [ 0, %1166 ], [ %1150, %1165 ], [ %844,\l... %1074 ], [ %1150, %1206 ], [ %844, %848 ], [ %844, %1033 ], [ %1150, %1154 ]\l  %1212 = phi %3 addrspace(1)* [ %1059, %1058 ], [ %1036, %1166 ], [ %1036,\l... %1165 ], [ null, %1074 ], [ %1207, %1206 ], [ null, %848 ], [ %1034, %1033 ],\l... [ null, %1154 ]\l  br i1 %1210, label %841, label %1213\l|{<s0>T|<s1>F}}"];
	Node0x5f75dc0:s0 -> Node0x5f75d00;
	Node0x5f75dc0:s1 -> Node0x5f8d970;
	Node0x5f8d970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1213:\l1213:                                             \l  %1214 = icmp eq %3 addrspace(1)* %1212, inttoptr (i64 1 to %3 addrspace(1)*)\l  br i1 %1214, label %1215, label %1292\l|{<s0>T|<s1>F}}"];
	Node0x5f8d970:s0 -> Node0x5f8db00;
	Node0x5f8d970:s1 -> Node0x5f71a10;
	Node0x5f8db00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%1215:\l1215:                                             \l  %1216 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %1217 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %1218 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %1217, i32 0)\l  %1219 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %1216, i32 %1218)\l  %1220 = icmp eq i32 %1219, 0\l  br i1 %1220, label %1221, label %1285\l|{<s0>T|<s1>F}}"];
	Node0x5f8db00:s0 -> Node0x5f8e090;
	Node0x5f8db00:s1 -> Node0x5f8e0e0;
	Node0x5f8e090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%1221:\l1221:                                             \l  %1222 = load atomic i64, i64 addrspace(1)* %749 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %1223 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1224 = sub i64 %1223, %1222\l  %1225 = icmp ult i64 %1224, 20000\l  br i1 %1225, label %1226, label %1285\l|{<s0>T|<s1>F}}"];
	Node0x5f8e090:s0 -> Node0x5f8e440;
	Node0x5f8e090:s1 -> Node0x5f8e0e0;
	Node0x5f8e440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1226:\l1226:                                             \l  %1227 = trunc i64 %1224 to i32\l  %1228 = sub nuw nsw i32 20000, %1227\l  %1229 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1230 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1228)\l  %1231 = sext i32 %1230 to i64\l  %1232 = add i64 %1229, %1231\l  %1233 = add i64 %1229, 1625\l  %1234 = icmp ugt i64 %1232, %1233\l  br i1 %1234, label %1239, label %1235\l|{<s0>T|<s1>F}}"];
	Node0x5f8e440:s0 -> Node0x5f8ea20;
	Node0x5f8e440:s1 -> Node0x5f8ea70;
	Node0x5f8ea70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1235:\l1235:                                             \l  %1236 = phi i64 [ %1229, %1226 ], [ %1240, %1239 ]\l  %1237 = add i64 %1236, 806\l  %1238 = icmp ugt i64 %1232, %1237\l  br i1 %1238, label %1247, label %1243\l|{<s0>T|<s1>F}}"];
	Node0x5f8ea70:s0 -> Node0x5f8ed40;
	Node0x5f8ea70:s1 -> Node0x5f8ed90;
	Node0x5f8ea20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1239:\l1239:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 127)\l  %1240 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1241 = add i64 %1240, 1625\l  %1242 = icmp ugt i64 %1232, %1241\l  br i1 %1242, label %1239, label %1235\l|{<s0>T|<s1>F}}"];
	Node0x5f8ea20:s0 -> Node0x5f8ea20;
	Node0x5f8ea20:s1 -> Node0x5f8ea70;
	Node0x5f8ed90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1243:\l1243:                                             \l  %1244 = phi i64 [ %1236, %1235 ], [ %1248, %1247 ]\l  %1245 = add i64 %1244, 396\l  %1246 = icmp ugt i64 %1232, %1245\l  br i1 %1246, label %1251, label %1255\l|{<s0>T|<s1>F}}"];
	Node0x5f8ed90:s0 -> Node0x5f8f3f0;
	Node0x5f8ed90:s1 -> Node0x5f8f440;
	Node0x5f8ed40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1247:\l1247:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 63)\l  %1248 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1249 = add i64 %1248, 806\l  %1250 = icmp ugt i64 %1232, %1249\l  br i1 %1250, label %1247, label %1243\l|{<s0>T|<s1>F}}"];
	Node0x5f8ed40:s0 -> Node0x5f8ed40;
	Node0x5f8ed40:s1 -> Node0x5f8ed90;
	Node0x5f8f3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1251:\l1251:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 31)\l  %1252 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1253 = add i64 %1252, 396\l  %1254 = icmp ugt i64 %1232, %1253\l  br i1 %1254, label %1251, label %1255\l|{<s0>T|<s1>F}}"];
	Node0x5f8f3f0:s0 -> Node0x5f8f3f0;
	Node0x5f8f3f0:s1 -> Node0x5f8f440;
	Node0x5f8f440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1255:\l1255:                                             \l  %1256 = phi i64 [ %1244, %1243 ], [ %1252, %1251 ]\l  %1257 = add i64 %1256, 192\l  %1258 = icmp ugt i64 %1232, %1257\l  br i1 %1258, label %1263, label %1259\l|{<s0>T|<s1>F}}"];
	Node0x5f8f440:s0 -> Node0x5f8fe30;
	Node0x5f8f440:s1 -> Node0x5f8fe80;
	Node0x5f8fe80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1259:\l1259:                                             \l  %1260 = phi i64 [ %1256, %1255 ], [ %1264, %1263 ]\l  %1261 = add i64 %1260, 89\l  %1262 = icmp ugt i64 %1232, %1261\l  br i1 %1262, label %1271, label %1267\l|{<s0>T|<s1>F}}"];
	Node0x5f8fe80:s0 -> Node0x5f90150;
	Node0x5f8fe80:s1 -> Node0x5f901a0;
	Node0x5f8fe30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1263:\l1263:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 15)\l  %1264 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1265 = add i64 %1264, 192\l  %1266 = icmp ugt i64 %1232, %1265\l  br i1 %1266, label %1263, label %1259\l|{<s0>T|<s1>F}}"];
	Node0x5f8fe30:s0 -> Node0x5f8fe30;
	Node0x5f8fe30:s1 -> Node0x5f8fe80;
	Node0x5f901a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1267:\l1267:                                             \l  %1268 = phi i64 [ %1260, %1259 ], [ %1272, %1271 ]\l  %1269 = add i64 %1268, 38\l  %1270 = icmp ugt i64 %1232, %1269\l  br i1 %1270, label %1278, label %1275\l|{<s0>T|<s1>F}}"];
	Node0x5f901a0:s0 -> Node0x5f90800;
	Node0x5f901a0:s1 -> Node0x5f90850;
	Node0x5f90150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1271:\l1271:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 7)\l  %1272 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1273 = add i64 %1272, 89\l  %1274 = icmp ugt i64 %1232, %1273\l  br i1 %1274, label %1271, label %1267\l|{<s0>T|<s1>F}}"];
	Node0x5f90150:s0 -> Node0x5f90150;
	Node0x5f90150:s1 -> Node0x5f901a0;
	Node0x5f90850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%1275:\l1275:                                             \l  %1276 = phi i64 [ %1268, %1267 ], [ %1279, %1278 ]\l  %1277 = icmp ugt i64 %1232, %1276\l  br i1 %1277, label %1282, label %1285\l|{<s0>T|<s1>F}}"];
	Node0x5f90850:s0 -> Node0x5f90e20;
	Node0x5f90850:s1 -> Node0x5f8e0e0;
	Node0x5f90800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1278:\l1278:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 3)\l  %1279 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1280 = add i64 %1279, 38\l  %1281 = icmp ugt i64 %1232, %1280\l  br i1 %1281, label %1278, label %1275\l|{<s0>T|<s1>F}}"];
	Node0x5f90800:s0 -> Node0x5f90800;
	Node0x5f90800:s1 -> Node0x5f90850;
	Node0x5f90e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%1282:\l1282:                                             \l  tail call void @llvm.amdgcn.s.sleep(i32 1)\l  %1283 = tail call i64 @llvm.amdgcn.s.memrealtime()\l  %1284 = icmp ugt i64 %1232, %1283\l  br i1 %1284, label %1282, label %1285\l|{<s0>T|<s1>F}}"];
	Node0x5f90e20:s0 -> Node0x5f90e20;
	Node0x5f90e20:s1 -> Node0x5f8e0e0;
	Node0x5f8e0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%1285:\l1285:                                             \l  %1286 = icmp eq i32 %763, 0\l  br i1 %1286, label %1287, label %1289\l|{<s0>T|<s1>F}}"];
	Node0x5f8e0e0:s0 -> Node0x5f91640;
	Node0x5f8e0e0:s1 -> Node0x5f91690;
	Node0x5f91640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%1287:\l1287:                                             \l  %1288 = load atomic i32, i32 addrspace(1)* %746 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %1289\l}"];
	Node0x5f91640 -> Node0x5f91690;
	Node0x5f91690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%1289:\l1289:                                             \l  %1290 = phi i32 [ %1288, %1287 ], [ %761, %1285 ]\l  %1291 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1290)\l  br label %1292\l}"];
	Node0x5f91690 -> Node0x5f71a10;
	Node0x5f71a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%1292:\l1292:                                             \l  %1293 = phi i32 [ %1291, %1289 ], [ %761, %1213 ]\l  %1294 = phi %3 addrspace(1)* [ %836, %1289 ], [ %1212, %1213 ]\l  br i1 %1214, label %759, label %1295\l|{<s0>T|<s1>F}}"];
	Node0x5f71a10:s0 -> Node0x5f71950;
	Node0x5f71a10:s1 -> Node0x5f6c0b0;
	Node0x5f6c0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%1295:\l1295:                                             \l  %1296 = phi i1 [ false, %720 ], [ true, %731 ], [ false, %829 ], [ false,\l... %1292 ], [ false, %714 ]\l  %1297 = phi i32 [ %643, %720 ], [ %722, %731 ], [ %43, %829 ], [ %43, %1292\l... ], [ %643, %714 ]\l  %1298 = phi %3 addrspace(1)* [ null, %720 ], [ %717, %731 ], [ %832, %829 ],\l... [ %1294, %1292 ], [ %717, %714 ]\l  br i1 %1296, label %642, label %1299\l|{<s0>T|<s1>F}}"];
	Node0x5f6c0b0:s0 -> Node0x5f6bff0;
	Node0x5f6c0b0:s1 -> Node0x5f510d0;
	Node0x5f510d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%1299:\l1299:                                             \l  %1300 = phi %3 addrspace(1)* [ %171, %168 ], [ %633, %631 ], [ %1298, %1295 ]\l  %1301 = ptrtoint %3 addrspace(1)* %1300 to i64\l  %1302 = trunc i64 %1301 to i32\l  %1303 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1302)\l  %1304 = insertelement \<2 x i32\> undef, i32 %1303, i64 0\l  %1305 = lshr i64 %1301, 32\l  %1306 = trunc i64 %1305 to i32\l  %1307 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1306)\l  %1308 = insertelement \<2 x i32\> %1304, i32 %1307, i64 1\l  %1309 = bitcast \<2 x i32\> %1308 to i64\l  %1310 = icmp eq i64 %1309, 0\l  br i1 %1310, label %1410, label %1311\l|{<s0>T|<s1>F}}"];
	Node0x5f510d0:s0 -> Node0x5f49ce0;
	Node0x5f510d0:s1 -> Node0x5f92790;
	Node0x5f92790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%1311:\l1311:                                             \l  %1312 = inttoptr i64 %1309 to %3 addrspace(1)*\l  %1313 = tail call i32 @llvm.read_register.i32(metadata !8) #12\l  %1314 = tail call i32 @llvm.read_register.i32(metadata !9) #12\l  %1315 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %1314, i32 0)\l  %1316 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %1313, i32 %1315)\l  %1317 = tail call i32 asm sideeffect \"\l  %1318 = tail call i64 @llvm.read_register.i64(metadata !10) #12\l  %1319 = getelementptr inbounds %3, %3 addrspace(1)* %1312, i64 0, i32 1\l  %1320 = load atomic i64, i64 addrspace(1)* %1319 seq_cst, align 8, !tbaa !29\l  %1321 = inttoptr i64 %1320 to %5 addrspace(1)*\l  %1322 = getelementptr inbounds %5, %5 addrspace(1)* %1321, i64 0, i32 0\l  %1323 = load i32, i32 addrspace(1)* %1322, align 4, !tbaa !31\l  %1324 = icmp eq i32 %1317, 0\l  br i1 %1324, label %1325, label %1330\l|{<s0>T|<s1>F}}"];
	Node0x5f92790:s0 -> Node0x5f93230;
	Node0x5f92790:s1 -> Node0x5f93280;
	Node0x5f93230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%1325:\l1325:                                             \l  %1326 = tail call i64 @llvm.ctpop.i64(i64 %1318), !range !11\l  %1327 = trunc i64 %1326 to i32\l  %1328 = getelementptr inbounds %5, %5 addrspace(1)* %1321, i64 0, i32 2\l  %1329 = atomicrmw add i32 addrspace(1)* %1328, i32 %1327\l... syncscope(\"agent-one-as\") monotonic, align 4\l  br label %1330\l}"];
	Node0x5f93230 -> Node0x5f93280;
	Node0x5f93280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%1330:\l1330:                                             \l  %1331 = phi i32 [ %1329, %1325 ], [ 0, %1311 ]\l  %1332 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1331)\l  %1333 = zext i32 %1323 to i64\l  %1334 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %1333, i32 0\l  %1335 = load i32, i32 addrspace(4)* %1334, align 4, !tbaa !21\l  %1336 = add i32 %1335, 31\l  %1337 = lshr i32 %1336, 5\l  %1338 = icmp ult i32 %1336, 32\l  br i1 %1338, label %1397, label %1339\l|{<s0>T|<s1>F}}"];
	Node0x5f93280:s0 -> Node0x5f93fc0;
	Node0x5f93280:s1 -> Node0x5f94010;
	Node0x5f94010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%1339:\l1339:                                             \l  %1340 = add i32 %1332, %1317\l  %1341 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %1333, i32 7\l  %1342 = load i32, i32 addrspace(4)* %1341, align 4, !tbaa !32\l  %1343 = mul i32 %1342, %1340\l  %1344 = urem i32 %1343, %1335\l  %1345 = lshr i32 %1344, 5\l  %1346 = inttoptr i64 %1320 to i8 addrspace(1)*\l  %1347 = getelementptr inbounds [16 x %4], [16 x %4] addrspace(4)* @1, i64 0,\l... i64 %1333, i32 3\l  %1348 = lshr i32 %1323, 1\l  %1349 = add nuw i32 %1348, 4\l  %1350 = and i32 %1349, 31\l  %1351 = shl nuw i32 1, %1350\l  %1352 = and i32 %1323, 1\l  %1353 = icmp eq i32 %1352, 0\l  %1354 = lshr i32 %1351, 1\l  %1355 = select i1 %1353, i32 0, i32 %1354\l  %1356 = add nuw i32 %1355, %1351\l  br label %1357\l}"];
	Node0x5f94010 -> Node0x5f94ba0;
	Node0x5f94ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%1357:\l1357:                                             \l  %1358 = phi i32 [ %1345, %1339 ], [ %1392, %1389 ]\l  %1359 = phi i8 addrspace(1)* [ null, %1339 ], [ %1391, %1389 ]\l  %1360 = phi i32 [ 0, %1339 ], [ %1394, %1389 ]\l  %1361 = zext i32 %1358 to i64\l  %1362 = getelementptr inbounds %5, %5 addrspace(1)* %1321, i64 0, i32 4, i64\l... %1361\l  %1363 = load atomic i32, i32 addrspace(1)* %1362 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %1364 = icmp eq i32 %1363, -1\l  br i1 %1364, label %1385, label %1365\l|{<s0>T|<s1>F}}"];
	Node0x5f94ba0:s0 -> Node0x5f951d0;
	Node0x5f94ba0:s1 -> Node0x5f95260;
	Node0x5f95260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%1365:\l1365:                                             \l  %1366 = xor i32 %1363, -1\l  %1367 = tail call i32 @llvm.cttz.i32(i32 %1366, i1 false), !range !12\l  %1368 = and i32 %1367, 31\l  %1369 = shl nuw i32 1, %1368\l  %1370 = atomicrmw or i32 addrspace(1)* %1362, i32 %1369\l... syncscope(\"agent-one-as\") monotonic, align 4\l  %1371 = and i32 %1370, %1369\l  %1372 = icmp eq i32 %1371, 0\l  br i1 %1372, label %1373, label %1382\l|{<s0>T|<s1>F}}"];
	Node0x5f95260:s0 -> Node0x5f95eb0;
	Node0x5f95260:s1 -> Node0x5f95f40;
	Node0x5f95eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%1373:\l1373:                                             \l  %1374 = shl i32 %1358, 5\l  %1375 = add i32 %1367, %1374\l  %1376 = load i32, i32 addrspace(4)* %1347, align 4, !tbaa !33\l  %1377 = zext i32 %1376 to i64\l  %1378 = getelementptr inbounds i8, i8 addrspace(1)* %1346, i64 %1377\l  %1379 = mul i32 %1375, %1356\l  %1380 = zext i32 %1379 to i64\l  %1381 = getelementptr inbounds i8, i8 addrspace(1)* %1378, i64 %1380\l  br label %1382\l}"];
	Node0x5f95eb0 -> Node0x5f95f40;
	Node0x5f95f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%1382:\l1382:                                             \l  %1383 = phi i32 [ 2, %1373 ], [ 0, %1365 ]\l  %1384 = phi i8 addrspace(1)* [ %1381, %1373 ], [ %1359, %1365 ]\l  br i1 %1372, label %1389, label %1385\l|{<s0>T|<s1>F}}"];
	Node0x5f95f40:s0 -> Node0x5f94c60;
	Node0x5f95f40:s1 -> Node0x5f951d0;
	Node0x5f951d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%1385:\l1385:                                             \l  %1386 = phi i8 addrspace(1)* [ %1384, %1382 ], [ %1359, %1357 ]\l  %1387 = add i32 %1358, 1\l  %1388 = urem i32 %1387, %1337\l  br label %1389\l}"];
	Node0x5f951d0 -> Node0x5f94c60;
	Node0x5f94c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%1389:\l1389:                                             \l  %1390 = phi i32 [ 0, %1385 ], [ %1383, %1382 ]\l  %1391 = phi i8 addrspace(1)* [ %1386, %1385 ], [ %1384, %1382 ]\l  %1392 = phi i32 [ %1388, %1385 ], [ %1358, %1382 ]\l  %1393 = icmp eq i32 %1390, 0\l  %1394 = add nuw nsw i32 %1360, 1\l  %1395 = icmp ult i32 %1394, %1337\l  %1396 = select i1 %1393, i1 %1395, i1 false\l  br i1 %1396, label %1357, label %1397\l|{<s0>T|<s1>F}}"];
	Node0x5f94c60:s0 -> Node0x5f94ba0;
	Node0x5f94c60:s1 -> Node0x5f93fc0;
	Node0x5f93fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%1397:\l1397:                                             \l  %1398 = phi i8 addrspace(1)* [ null, %1330 ], [ %1391, %1389 ]\l  %1399 = ptrtoint i8 addrspace(1)* %1398 to i64\l  %1400 = tail call i64 @llvm.amdgcn.icmp.i64.i64(i64 noundef %1399, i64\l... noundef 0, i32 noundef 33) #6\l  br i1 %1324, label %1401, label %1406\l|{<s0>T|<s1>F}}"];
	Node0x5f93fc0:s0 -> Node0x5f97280;
	Node0x5f93fc0:s1 -> Node0x5f972d0;
	Node0x5f97280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%1401:\l1401:                                             \l  %1402 = tail call i64 @llvm.ctpop.i64(i64 %1400), !range !11\l  %1403 = trunc i64 %1402 to i32\l  %1404 = getelementptr inbounds %3, %3 addrspace(1)* %1312, i64 0, i32 2\l  %1405 = atomicrmw add i32 addrspace(1)* %1404, i32 %1403\l... syncscope(\"agent-one-as\") monotonic, align 4\l  br label %1406\l}"];
	Node0x5f97280 -> Node0x5f972d0;
	Node0x5f972d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%1406:\l1406:                                             \l  %1407 = icmp eq i8 addrspace(1)* %1398, null\l  %1408 = select i1 %1407, i32 %72, i32 0\l  %1409 = select i1 %1407, i32 %75, i32 0\l  br label %1410\l}"];
	Node0x5f972d0 -> Node0x5f49ce0;
	Node0x5f49ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%1410:\l1410:                                             \l  %1411 = phi i32 [ %72, %71 ], [ %1408, %1406 ], [ 0, %1299 ]\l  %1412 = phi i32 [ 0, %71 ], [ %1409, %1406 ], [ 0, %1299 ]\l  %1413 = phi i8 addrspace(1)* [ %74, %71 ], [ %1398, %1406 ], [ %74, %1299 ]\l  %1414 = tail call i32 asm sideeffect \"\l  %1415 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 noundef %1414, i32\l... noundef 0, i32 noundef 33) #6\l  %1416 = icmp eq i64 %1415, 0\l  br i1 %1416, label %1417, label %71\l|{<s0>T|<s1>F}}"];
	Node0x5f49ce0:s0 -> Node0x5f489b0;
	Node0x5f49ce0:s1 -> Node0x5f49ba0;
	Node0x5f489b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%1417:\l1417:                                             \l  %1418 = phi i32 [ 0, %63 ], [ %66, %68 ], [ %1411, %1410 ]\l  %1419 = phi i8 addrspace(1)* [ %65, %63 ], [ %65, %68 ], [ %1413, %1410 ]\l  %1420 = tail call i32 asm sideeffect \"\l  %1421 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 noundef %1420, i32\l... noundef 0, i32 noundef 33) #6\l  %1422 = icmp eq i64 %1421, 0\l  br i1 %1422, label %1423, label %63\l|{<s0>T|<s1>F}}"];
	Node0x5f489b0:s0 -> Node0x5f41480;
	Node0x5f489b0:s1 -> Node0x5f488f0;
	Node0x5f41480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%1423:\l1423:                                             \l  %1424 = phi i8 addrspace(1)* [ %26, %25 ], [ null, %1 ], [ %1419, %1417 ]\l  ret i8 addrspace(1)* %1424\l}"];
}
