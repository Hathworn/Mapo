digraph "CFG for '_Z5forcePdS_S_S_S_S_S_S_i' function" {
	label="CFG for '_Z5forcePdS_S_S_S_S_S_S_i' function";

	Node0x4a83ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%9:\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = mul i32 %15, %14\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = add nsw i32 %8, -1\l  %20 = icmp slt i32 %18, %19\l  %21 = icmp slt i32 %18, %8\l  %22 = and i1 %20, %21\l  br i1 %22, label %23, label %114\l|{<s0>T|<s1>F}}"];
	Node0x4a83ad0:s0 -> Node0x4a86740;
	Node0x4a83ad0:s1 -> Node0x4a867d0;
	Node0x4a86740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%23:\l23:                                               \l  %24 = sext i32 %18 to i64\l  %25 = getelementptr inbounds double, double addrspace(1)* %1, i64 %24\l  %26 = getelementptr inbounds double, double addrspace(1)* %2, i64 %24\l  %27 = getelementptr inbounds double, double addrspace(1)* %3, i64 %24\l  %28 = getelementptr inbounds double, double addrspace(1)* %0, i64 %24\l  %29 = getelementptr inbounds double, double addrspace(1)* %4, i64 %24\l  %30 = getelementptr inbounds double, double addrspace(1)* %5, i64 %24\l  %31 = getelementptr inbounds double, double addrspace(1)* %6, i64 %24\l  %32 = getelementptr inbounds double, double addrspace(1)* %7, i64 %24\l  %33 = add nsw i32 %18, 1\l  %34 = icmp slt i32 %33, %8\l  br i1 %34, label %35, label %114\l|{<s0>T|<s1>F}}"];
	Node0x4a86740:s0 -> Node0x4a86120;
	Node0x4a86740:s1 -> Node0x4a867d0;
	Node0x4a86120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%35:\l35:                                               \l  %36 = phi i32 [ %112, %108 ], [ %33, %23 ]\l  %37 = phi double [ %111, %108 ], [ undef, %23 ]\l  %38 = phi double [ %110, %108 ], [ undef, %23 ]\l  %39 = phi double [ %109, %108 ], [ undef, %23 ]\l  %40 = icmp eq i32 %18, %36\l  br i1 %40, label %108, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4a86120:s0 -> Node0x4a87200;
	Node0x4a86120:s1 -> Node0x4a87b40;
	Node0x4a87b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%41:\l41:                                               \l  %42 = load double, double addrspace(1)* %25, align 8, !tbaa !7\l  %43 = sext i32 %36 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %1, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !7\l  %46 = fsub contract double %42, %45\l  %47 = load double, double addrspace(1)* %26, align 8, !tbaa !7\l  %48 = getelementptr inbounds double, double addrspace(1)* %2, i64 %43\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !7\l  %50 = fsub contract double %47, %49\l  %51 = load double, double addrspace(1)* %27, align 8, !tbaa !7\l  %52 = getelementptr inbounds double, double addrspace(1)* %3, i64 %43\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !7\l  %54 = fsub contract double %51, %53\l  %55 = fmul contract double %46, %46\l  %56 = fmul contract double %50, %50\l  %57 = fadd contract double %55, %56\l  %58 = fmul contract double %54, %54\l  %59 = fadd contract double %57, %58\l  %60 = fcmp olt double %59, 0x1000000000000000\l  %61 = select i1 %60, double 0x4FF0000000000000, double 1.000000e+00\l  %62 = fmul double %59, %61\l  %63 = tail call double @llvm.amdgcn.rsq.f64(double %62)\l  %64 = fmul double %62, %63\l  %65 = fmul double %63, 5.000000e-01\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %66, double %64, double\l... 5.000000e-01)\l  %68 = tail call double @llvm.fma.f64(double %65, double %67, double %65)\l  %69 = tail call double @llvm.fma.f64(double %64, double %67, double %64)\l  %70 = fneg double %69\l  %71 = tail call double @llvm.fma.f64(double %70, double %69, double %62)\l  %72 = tail call double @llvm.fma.f64(double %71, double %68, double %69)\l  %73 = fneg double %72\l  %74 = tail call double @llvm.fma.f64(double %73, double %72, double %62)\l  %75 = tail call double @llvm.fma.f64(double %74, double %68, double %72)\l  %76 = select i1 %60, double 0x37F0000000000000, double 1.000000e+00\l  %77 = fmul double %76, %75\l  %78 = fcmp oeq double %62, 0.000000e+00\l  %79 = fcmp oeq double %62, 0x7FF0000000000000\l  %80 = or i1 %78, %79\l  %81 = select i1 %80, double %62, double %77\l  %82 = load double, double addrspace(1)* %28, align 8, !tbaa !7\l  %83 = getelementptr inbounds double, double addrspace(1)* %0, i64 %43\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !7\l  %85 = fmul contract double %82, %84\l  %86 = fmul contract double %46, %85\l  %87 = fmul contract double %81, %81\l  %88 = fmul contract double %81, %87\l  %89 = fdiv contract double %86, %88\l  %90 = fadd contract double %37, %89\l  %91 = fmul contract double %50, %85\l  %92 = fdiv contract double %91, %88\l  %93 = fadd contract double %38, %92\l  %94 = fmul contract double %54, %85\l  %95 = fdiv contract double %94, %88\l  %96 = fadd contract double %39, %95\l  %97 = load double, double addrspace(1)* %29, align 8, !tbaa !7\l  %98 = fadd contract double %97, %90\l  store double %98, double addrspace(1)* %29, align 8, !tbaa !7\l  %99 = load double, double addrspace(1)* %30, align 8, !tbaa !7\l  %100 = fadd contract double %99, %93\l  store double %100, double addrspace(1)* %30, align 8, !tbaa !7\l  %101 = load double, double addrspace(1)* %31, align 8, !tbaa !7\l  %102 = fadd contract double %101, %96\l  store double %102, double addrspace(1)* %31, align 8, !tbaa !7\l  %103 = load double, double addrspace(1)* %32, align 8, !tbaa !7\l  %104 = load double, double addrspace(1)* %83, align 8, !tbaa !7\l  %105 = fdiv contract double %104, %81\l  %106 = fmul contract double %105, 2.000000e+00\l  %107 = fadd contract double %103, %106\l  store double %107, double addrspace(1)* %32, align 8, !tbaa !7\l  br label %108\l}"];
	Node0x4a87b40 -> Node0x4a87200;
	Node0x4a87200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%108:\l108:                                              \l  %109 = phi double [ %96, %41 ], [ %39, %35 ]\l  %110 = phi double [ %93, %41 ], [ %38, %35 ]\l  %111 = phi double [ %90, %41 ], [ %37, %35 ]\l  %112 = add nsw i32 %36, 1\l  %113 = icmp slt i32 %112, %8\l  br i1 %113, label %35, label %114, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4a87200:s0 -> Node0x4a86120;
	Node0x4a87200:s1 -> Node0x4a867d0;
	Node0x4a867d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%114:\l114:                                              \l  ret void\l}"];
}
