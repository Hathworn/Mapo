digraph "CFG for '_Z9updateTauiPKdS0_S0_S0_PdS0_S0_S1_' function" {
	label="CFG for '_Z9updateTauiPKdS0_S0_S0_PdS0_S0_S1_' function";

	Node0x48577d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%9:\l  store double 0.000000e+00, double addrspace(1)* %5, align 8, !tbaa !4\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !8, !invariant.load !9\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !10\l  %19 = mul i32 %10, %15\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !19\l  %21 = add i32 %19, %20\l  %22 = udiv i32 %18, %15\l  %23 = mul i32 %22, %15\l  %24 = icmp ugt i32 %18, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %15\l  %28 = icmp slt i32 %21, %0\l  br i1 %28, label %29, label %82\l|{<s0>T|<s1>F}}"];
	Node0x48577d0:s0 -> Node0x485b4e0;
	Node0x48577d0:s1 -> Node0x485b570;
	Node0x485b4e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi double [ %79, %78 ], [ 0.000000e+00, %9 ]\l  %31 = phi i32 [ %80, %78 ], [ %21, %9 ]\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds double, double addrspace(1)* %1, i64 %32\l  %34 = load double, double addrspace(1)* %33, align 8, !tbaa !4\l  %35 = fcmp contract oeq double %34, 0.000000e+00\l  br i1 %35, label %78, label %36\l|{<s0>T|<s1>F}}"];
	Node0x485b4e0:s0 -> Node0x485b6b0;
	Node0x485b4e0:s1 -> Node0x485c230;
	Node0x485c230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%36:\l36:                                               \l  %37 = getelementptr inbounds double, double addrspace(1)* %2, i64 %32\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !4\l  %39 = fdiv contract double %38, %34\l  %40 = getelementptr inbounds double, double addrspace(1)* %3, i64 %32\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !4\l  %42 = fmul contract double %34, %39\l  %43 = fmul contract double %39, %42\l  %44 = fmul contract double %43, 5.000000e-01\l  %45 = fsub contract double %41, %44\l  %46 = load double, double addrspace(1)* %4, align 8, !tbaa !4\l  %47 = fadd contract double %46, -1.000000e+00\l  %48 = fmul contract double %47, %45\l  %49 = tail call double @llvm.fabs.f64(double %48)\l  %50 = fmul contract double %46, %49\l  %51 = fdiv contract double %50, %34\l  %52 = fcmp olt double %51, 0x1000000000000000\l  %53 = select i1 %52, double 0x4FF0000000000000, double 1.000000e+00\l  %54 = fmul double %51, %53\l  %55 = tail call double @llvm.amdgcn.rsq.f64(double %54)\l  %56 = fmul double %54, %55\l  %57 = fmul double %55, 5.000000e-01\l  %58 = fneg double %57\l  %59 = tail call double @llvm.fma.f64(double %58, double %56, double\l... 5.000000e-01)\l  %60 = tail call double @llvm.fma.f64(double %57, double %59, double %57)\l  %61 = tail call double @llvm.fma.f64(double %56, double %59, double %56)\l  %62 = fneg double %61\l  %63 = tail call double @llvm.fma.f64(double %62, double %61, double %54)\l  %64 = tail call double @llvm.fma.f64(double %63, double %60, double %61)\l  %65 = fneg double %64\l  %66 = tail call double @llvm.fma.f64(double %65, double %64, double %54)\l  %67 = tail call double @llvm.fma.f64(double %66, double %60, double %64)\l  %68 = select i1 %52, double 0x37F0000000000000, double 1.000000e+00\l  %69 = fmul double %68, %67\l  %70 = fcmp oeq double %54, 0.000000e+00\l  %71 = fcmp oeq double %54, 0x7FF0000000000000\l  %72 = or i1 %70, %71\l  %73 = select i1 %72, double %54, double %69\l  %74 = tail call double @llvm.fabs.f64(double %39)\l  %75 = fadd contract double %74, %73\l  %76 = fcmp contract olt double %30, %75\l  br i1 %76, label %77, label %78\l|{<s0>T|<s1>F}}"];
	Node0x485c230:s0 -> Node0x485e6e0;
	Node0x485c230:s1 -> Node0x485b6b0;
	Node0x485e6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%77:\l77:                                               \l  store double %75, double addrspace(1)* %5, align 8, !tbaa !4\l  br label %78\l}"];
	Node0x485e6e0 -> Node0x485b6b0;
	Node0x485b6b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = phi double [ %30, %36 ], [ %75, %77 ], [ %30, %29 ]\l  %80 = add nsw i32 %31, %27\l  %81 = icmp slt i32 %80, %0\l  br i1 %81, label %29, label %82, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x485b6b0:s0 -> Node0x485b4e0;
	Node0x485b6b0:s1 -> Node0x485b570;
	Node0x485b570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%82:\l82:                                               \l  %83 = phi double [ 0.000000e+00, %9 ], [ %79, %78 ]\l  %84 = load double, double addrspace(1)* %7, align 8, !tbaa !4\l  %85 = load double, double addrspace(1)* %6, align 8, !tbaa !4\l  %86 = fmul contract double %84, %85\l  %87 = fdiv contract double %86, %83\l  store double %87, double addrspace(1)* %8, align 8, !tbaa !4\l  ret void\l}"];
}
