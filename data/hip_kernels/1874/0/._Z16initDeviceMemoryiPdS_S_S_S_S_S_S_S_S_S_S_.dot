digraph "CFG for '_Z16initDeviceMemoryiPdS_S_S_S_S_S_S_S_S_S_S_' function" {
	label="CFG for '_Z16initDeviceMemoryiPdS_S_S_S_S_S_S_S_S_S_S_' function";

	Node0x484c0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%13:\l  store double 0.000000e+00, double addrspace(1)* %12, align 8, !tbaa !4\l  store double 1.000000e+00, double addrspace(1)* %6, align 8, !tbaa !4\l  store double 1.400000e+00, double addrspace(1)* %7, align 8, !tbaa !4\l  store double 9.000000e-01, double addrspace(1)* %8, align 8, !tbaa !4\l  store double 0.000000e+00, double addrspace(1)* %9, align 8, !tbaa !4\l  %14 = load double, double addrspace(1)* %6, align 8, !tbaa !4\l  %15 = add nsw i32 %0, -1\l  %16 = sitofp i32 %15 to double\l  %17 = fdiv contract double %14, %16\l  store double %17, double addrspace(1)* %5, align 8, !tbaa !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !8, !invariant.load !9\l  %23 = zext i16 %22 to i32\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 12\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 4, !tbaa !10\l  %27 = mul i32 %18, %23\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !19\l  %29 = add i32 %27, %28\l  %30 = icmp slt i32 %29, %0\l  br i1 %30, label %31, label %33\l|{<s0>T|<s1>F}}"];
	Node0x484c0a0:s0 -> Node0x48506b0;
	Node0x484c0a0:s1 -> Node0x4850740;
	Node0x48506b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%31:\l31:                                               \l  %32 = sdiv i32 %0, 2\l  br label %99\l}"];
	Node0x48506b0 -> Node0x484f3b0;
	Node0x4850740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%33:\l33:                                               \l  store double 0.000000e+00, double addrspace(1)* %11, align 8, !tbaa !4\l  %34 = udiv i32 %26, %23\l  %35 = mul i32 %34, %23\l  %36 = icmp ugt i32 %26, %35\l  %37 = zext i1 %36 to i32\l  %38 = add i32 %34, %37\l  %39 = mul i32 %38, %23\l  br i1 %30, label %40, label %93\l|{<s0>T|<s1>F}}"];
	Node0x4850740:s0 -> Node0x4850ef0;
	Node0x4850740:s1 -> Node0x4850f40;
	Node0x4850ef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi double [ %90, %89 ], [ 0.000000e+00, %33 ]\l  %42 = phi i32 [ %91, %89 ], [ %29, %33 ]\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %1, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !4\l  %46 = fcmp contract oeq double %45, 0.000000e+00\l  br i1 %46, label %89, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4850ef0:s0 -> Node0x4851080;
	Node0x4850ef0:s1 -> Node0x4851520;
	Node0x4851520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%47:\l47:                                               \l  %48 = getelementptr inbounds double, double addrspace(1)* %2, i64 %43\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !4\l  %50 = fdiv contract double %49, %45\l  %51 = getelementptr inbounds double, double addrspace(1)* %3, i64 %43\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !4\l  %53 = fmul contract double %45, %50\l  %54 = fmul contract double %50, %53\l  %55 = fmul contract double %54, 5.000000e-01\l  %56 = fsub contract double %52, %55\l  %57 = load double, double addrspace(1)* %7, align 8, !tbaa !4\l  %58 = fadd contract double %57, -1.000000e+00\l  %59 = fmul contract double %58, %56\l  %60 = tail call double @llvm.fabs.f64(double %59)\l  %61 = fmul contract double %57, %60\l  %62 = fdiv contract double %61, %45\l  %63 = fcmp olt double %62, 0x1000000000000000\l  %64 = select i1 %63, double 0x4FF0000000000000, double 1.000000e+00\l  %65 = fmul double %62, %64\l  %66 = tail call double @llvm.amdgcn.rsq.f64(double %65)\l  %67 = fmul double %65, %66\l  %68 = fmul double %66, 5.000000e-01\l  %69 = fneg double %68\l  %70 = tail call double @llvm.fma.f64(double %69, double %67, double\l... 5.000000e-01)\l  %71 = tail call double @llvm.fma.f64(double %68, double %70, double %68)\l  %72 = tail call double @llvm.fma.f64(double %67, double %70, double %67)\l  %73 = fneg double %72\l  %74 = tail call double @llvm.fma.f64(double %73, double %72, double %65)\l  %75 = tail call double @llvm.fma.f64(double %74, double %71, double %72)\l  %76 = fneg double %75\l  %77 = tail call double @llvm.fma.f64(double %76, double %75, double %65)\l  %78 = tail call double @llvm.fma.f64(double %77, double %71, double %75)\l  %79 = select i1 %63, double 0x37F0000000000000, double 1.000000e+00\l  %80 = fmul double %79, %78\l  %81 = fcmp oeq double %65, 0.000000e+00\l  %82 = fcmp oeq double %65, 0x7FF0000000000000\l  %83 = or i1 %81, %82\l  %84 = select i1 %83, double %65, double %80\l  %85 = tail call double @llvm.fabs.f64(double %50)\l  %86 = fadd contract double %85, %84\l  %87 = fcmp contract olt double %41, %86\l  br i1 %87, label %88, label %89\l|{<s0>T|<s1>F}}"];
	Node0x4851520:s0 -> Node0x4853950;
	Node0x4851520:s1 -> Node0x4851080;
	Node0x4853950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%88:\l88:                                               \l  store double %86, double addrspace(1)* %11, align 8, !tbaa !4\l  br label %89\l}"];
	Node0x4853950 -> Node0x4851080;
	Node0x4851080 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%89:\l89:                                               \l  %90 = phi double [ %41, %47 ], [ %86, %88 ], [ %41, %40 ]\l  %91 = add nsw i32 %42, %39\l  %92 = icmp slt i32 %91, %0\l  br i1 %92, label %40, label %93, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4851080:s0 -> Node0x4850ef0;
	Node0x4851080:s1 -> Node0x4850f40;
	Node0x4850f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%93:\l93:                                               \l  %94 = phi double [ 0.000000e+00, %33 ], [ %90, %89 ]\l  %95 = load double, double addrspace(1)* %8, align 8, !tbaa !4\l  %96 = load double, double addrspace(1)* %5, align 8, !tbaa !4\l  %97 = fmul contract double %95, %96\l  %98 = fdiv contract double %97, %94\l  store double %98, double addrspace(1)* %10, align 8, !tbaa !4\l  ret void\l}"];
	Node0x484f3b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%99:\l99:                                               \l  %100 = phi i32 [ %29, %31 ], [ %116, %99 ]\l  %101 = icmp slt i32 %100, %32\l  %102 = select i1 %101, double 1.000000e+00, double 1.250000e-01\l  %103 = select i1 %101, double 1.000000e+00, double 1.000000e-01\l  %104 = load double, double addrspace(1)* %7, align 8, !tbaa !4\l  %105 = fadd contract double %104, -1.000000e+00\l  %106 = fdiv contract double %103, %105\l  %107 = fmul contract double %102, 0.000000e+00\l  %108 = fmul contract double %107, 0.000000e+00\l  %109 = fmul contract double %108, 5.000000e-01\l  %110 = fadd contract double %109, %106\l  %111 = sext i32 %100 to i64\l  %112 = getelementptr inbounds double, double addrspace(1)* %1, i64 %111\l  store double %102, double addrspace(1)* %112, align 8, !tbaa !4\l  %113 = getelementptr inbounds double, double addrspace(1)* %2, i64 %111\l  store double %107, double addrspace(1)* %113, align 8, !tbaa !4\l  %114 = getelementptr inbounds double, double addrspace(1)* %3, i64 %111\l  store double %110, double addrspace(1)* %114, align 8, !tbaa !4\l  %115 = getelementptr inbounds double, double addrspace(1)* %4, i64 %111\l  store double 1.000000e+00, double addrspace(1)* %115, align 8, !tbaa !4\l  %116 = add nsw i32 %100, %23\l  %117 = icmp slt i32 %116, %0\l  br i1 %117, label %99, label %33, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x484f3b0:s0 -> Node0x484f3b0;
	Node0x484f3b0:s1 -> Node0x4850740;
}
