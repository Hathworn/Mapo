digraph "CFG for '_Z9device_llv' function" {
	label="CFG for '_Z9device_llv' function";

	Node0x58e0f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%0:\l  %1 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %2 = load i32, i32 addrspace(4)* @d_ncases, align 4, !tbaa !5\l  %3 = load i32, i32 addrspace(4)* @d_ntarg, align 4, !tbaa !5\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !9, !invariant.load !10\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !11\l  %13 = mul i32 %4, %9\l  %14 = add i32 %13, %1\l  %15 = icmp slt i32 %14, %2\l  br i1 %15, label %16, label %124\l|{<s0>T|<s1>F}}"];
	Node0x58e0f10:s0 -> Node0x58e26c0;
	Node0x58e0f10:s1 -> Node0x58e33c0;
	Node0x58e26c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%16:\l16:                                               \l  %17 = load double*, double* addrspace(4)* @d_output, align 8, !tbaa !20\l  %18 = load i32*, i32* addrspace(4)* @d_class, align 8, !tbaa !20\l  %19 = udiv i32 %12, %9\l  %20 = mul i32 %19, %9\l  %21 = icmp ugt i32 %12, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %9\l  br label %25\l}"];
	Node0x58e26c0 -> Node0x58e40d0;
	Node0x58e40d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%25:\l25:                                               \l  %26 = phi double [ 0.000000e+00, %16 ], [ %121, %25 ]\l  %27 = phi i32 [ %14, %16 ], [ %122, %25 ]\l  %28 = mul nsw i32 %27, %3\l  %29 = sext i32 %27 to i64\l  %30 = getelementptr inbounds i32, i32* %18, i64 %29\l  %31 = load i32, i32* %30, align 4, !tbaa !5\l  %32 = add nsw i32 %31, %28\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds double, double* %17, i64 %33\l  %35 = load double, double* %34, align 8, !tbaa !22\l  %36 = fadd contract double %35, 1.000000e-30\l  %37 = tail call double @llvm.amdgcn.frexp.mant.f64(double %36)\l  %38 = fcmp olt double %37, 0x3FE5555555555555\l  %39 = zext i1 %38 to i32\l  %40 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 %39)\l  %41 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %36)\l  %42 = sub nsw i32 %41, %39\l  %43 = fadd double %40, -1.000000e+00\l  %44 = fadd double %40, 1.000000e+00\l  %45 = fadd double %44, -1.000000e+00\l  %46 = fsub double %40, %45\l  %47 = tail call double @llvm.amdgcn.rcp.f64(double %44)\l  %48 = fneg double %44\l  %49 = tail call double @llvm.fma.f64(double %48, double %47, double\l... 1.000000e+00)\l  %50 = tail call double @llvm.fma.f64(double %49, double %47, double %47)\l  %51 = tail call double @llvm.fma.f64(double %48, double %50, double\l... 1.000000e+00)\l  %52 = tail call double @llvm.fma.f64(double %51, double %50, double %50)\l  %53 = fmul double %43, %52\l  %54 = fmul double %44, %53\l  %55 = fneg double %54\l  %56 = tail call double @llvm.fma.f64(double %53, double %44, double %55)\l  %57 = tail call double @llvm.fma.f64(double %53, double %46, double %56)\l  %58 = fadd double %54, %57\l  %59 = fsub double %58, %54\l  %60 = fsub double %57, %59\l  %61 = fsub double %43, %58\l  %62 = fsub double %43, %61\l  %63 = fsub double %62, %58\l  %64 = fsub double %63, %60\l  %65 = fadd double %61, %64\l  %66 = fmul double %52, %65\l  %67 = fadd double %53, %66\l  %68 = fsub double %67, %53\l  %69 = fsub double %66, %68\l  %70 = fmul double %67, %67\l  %71 = tail call double @llvm.fma.f64(double %70, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %72 = tail call double @llvm.fma.f64(double %70, double %71, double\l... 0x3FC7474DD7F4DF2E)\l  %73 = tail call double @llvm.fma.f64(double %70, double %72, double\l... 0x3FCC71C016291751)\l  %74 = tail call double @llvm.fma.f64(double %70, double %73, double\l... 0x3FD249249B27ACF1)\l  %75 = tail call double @llvm.fma.f64(double %70, double %74, double\l... 0x3FD99999998EF7B6)\l  %76 = tail call double @llvm.fma.f64(double %70, double %75, double\l... 0x3FE5555555555780)\l  %77 = tail call double @llvm.amdgcn.ldexp.f64(double %67, i32 1)\l  %78 = tail call double @llvm.amdgcn.ldexp.f64(double %69, i32 1)\l  %79 = fmul double %67, %70\l  %80 = fmul double %79, %76\l  %81 = fadd double %77, %80\l  %82 = fsub double %81, %77\l  %83 = fsub double %80, %82\l  %84 = fadd double %78, %83\l  %85 = fadd double %81, %84\l  %86 = fsub double %85, %81\l  %87 = fsub double %84, %86\l  %88 = sitofp i32 %42 to double\l  %89 = fmul double %88, 0x3FE62E42FEFA39EF\l  %90 = fneg double %89\l  %91 = tail call double @llvm.fma.f64(double %88, double 0x3FE62E42FEFA39EF,\l... double %90)\l  %92 = tail call double @llvm.fma.f64(double %88, double 0x3C7ABC9E3B39803F,\l... double %91)\l  %93 = fadd double %89, %92\l  %94 = fsub double %93, %89\l  %95 = fsub double %92, %94\l  %96 = fadd double %93, %85\l  %97 = fsub double %96, %93\l  %98 = fsub double %96, %97\l  %99 = fsub double %93, %98\l  %100 = fsub double %85, %97\l  %101 = fadd double %100, %99\l  %102 = fadd double %95, %87\l  %103 = fsub double %102, %95\l  %104 = fsub double %102, %103\l  %105 = fsub double %95, %104\l  %106 = fsub double %87, %103\l  %107 = fadd double %106, %105\l  %108 = fadd double %102, %101\l  %109 = fadd double %96, %108\l  %110 = fsub double %109, %96\l  %111 = fsub double %108, %110\l  %112 = fadd double %107, %111\l  %113 = fadd double %109, %112\l  %114 = tail call double @llvm.fabs.f64(double %36) #4\l  %115 = fcmp oeq double %114, 0x7FF0000000000000\l  %116 = select i1 %115, double %36, double %113\l  %117 = fcmp olt double %36, 0.000000e+00\l  %118 = select i1 %117, double 0x7FF8000000000000, double %116\l  %119 = fcmp oeq double %36, 0.000000e+00\l  %120 = select i1 %119, double 0xFFF0000000000000, double %118\l  %121 = fsub contract double %26, %120\l  %122 = add i32 %24, %27\l  %123 = icmp slt i32 %122, %2\l  br i1 %123, label %25, label %124, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x58e40d0:s0 -> Node0x58e40d0;
	Node0x58e40d0:s1 -> Node0x58e33c0;
	Node0x58e33c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%124:\l124:                                              \l  %125 = phi double [ 0.000000e+00, %0 ], [ %121, %25 ]\l  %126 = getelementptr inbounds [256 x double], [256 x double] addrspace(3)*\l... @_ZZ9device_llvE10partial_ll, i32 0, i32 %1\l  store double %125, double addrspace(3)* %126, align 8, !tbaa !22\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %127 = icmp ult i16 %8, 2\l  br i1 %127, label %140, label %128\l|{<s0>T|<s1>F}}"];
	Node0x58e33c0:s0 -> Node0x58eaba0;
	Node0x58e33c0:s1 -> Node0x58eac30;
	Node0x58eac30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%128:\l128:                                              \l  %129 = phi i32 [ %130, %138 ], [ %9, %124 ]\l  %130 = lshr i32 %129, 1\l  %131 = icmp ult i32 %1, %130\l  br i1 %131, label %132, label %138\l|{<s0>T|<s1>F}}"];
	Node0x58eac30:s0 -> Node0x58e73b0;
	Node0x58eac30:s1 -> Node0x58e7150;
	Node0x58e73b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%132:\l132:                                              \l  %133 = add nuw nsw i32 %130, %1\l  %134 = getelementptr inbounds [256 x double], [256 x double] addrspace(3)*\l... @_ZZ9device_llvE10partial_ll, i32 0, i32 %133\l  %135 = load double, double addrspace(3)* %134, align 8, !tbaa !22\l  %136 = load double, double addrspace(3)* %126, align 8, !tbaa !22\l  %137 = fadd contract double %135, %136\l  store double %137, double addrspace(3)* %126, align 8, !tbaa !22\l  br label %138\l}"];
	Node0x58e73b0 -> Node0x58e7150;
	Node0x58e7150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%138:\l138:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %139 = icmp ult i32 %129, 4\l  br i1 %139, label %140, label %128, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x58e7150:s0 -> Node0x58eaba0;
	Node0x58e7150:s1 -> Node0x58eac30;
	Node0x58eaba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%140:\l140:                                              \l  %141 = icmp eq i32 %1, 0\l  br i1 %141, label %142, label %148\l|{<s0>T|<s1>F}}"];
	Node0x58eaba0:s0 -> Node0x58ebd00;
	Node0x58eaba0:s1 -> Node0x58ebd50;
	Node0x58ebd00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%142:\l142:                                              \l  %143 = load double, double addrspace(3)* getelementptr inbounds ([256 x\l... double], [256 x double] addrspace(3)* @_ZZ9device_llvE10partial_ll, i32 0,\l... i32 0), align 16, !tbaa !22\l  %144 = fptrunc double %143 to float\l  %145 = load float*, float* addrspace(4)* @d_mse_out, align 8, !tbaa !20\l  %146 = zext i32 %4 to i64\l  %147 = getelementptr inbounds float, float* %145, i64 %146\l  store float %144, float* %147, align 4, !tbaa !27\l  br label %148\l}"];
	Node0x58ebd00 -> Node0x58ebd50;
	Node0x58ebd50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%148:\l148:                                              \l  ret void\l}"];
}
