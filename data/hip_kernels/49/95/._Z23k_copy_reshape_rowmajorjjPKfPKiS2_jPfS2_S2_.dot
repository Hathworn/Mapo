digraph "CFG for '_Z23k_copy_reshape_rowmajorjjPKfPKiS2_jPfS2_S2_' function" {
	label="CFG for '_Z23k_copy_reshape_rowmajorjjPKfPKiS2_jPfS2_S2_' function";

	Node0x50caf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !6\l  %19 = mul i32 %10, %15\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add i32 %19, %20\l  %22 = udiv i32 %18, %15\l  %23 = mul i32 %22, %15\l  %24 = icmp ugt i32 %18, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %15\l  %28 = icmp ult i32 %21, %0\l  br i1 %28, label %29, label %43\l|{<s0>T|<s1>F}}"];
	Node0x50caf80:s0 -> Node0x50ce070;
	Node0x50caf80:s1 -> Node0x50ce100;
	Node0x50ce070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%29:\l29:                                               \l  %30 = icmp eq i32 %1, 0\l  %31 = icmp eq i32 %5, 0\l  %32 = and i32 %1, 3\l  %33 = icmp ult i32 %1, 4\l  %34 = and i32 %1, -4\l  %35 = icmp eq i32 %32, 0\l  %36 = and i32 %5, 3\l  %37 = icmp ult i32 %5, 4\l  %38 = and i32 %5, -4\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x50ce070 -> Node0x50ce990;
	Node0x50ce990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%40:\l40:                                               \l  %41 = phi i32 [ %21, %29 ], [ %171, %168 ]\l  br i1 %30, label %72, label %42\l|{<s0>T|<s1>F}}"];
	Node0x50ce990:s0 -> Node0x50cebc0;
	Node0x50ce990:s1 -> Node0x50cec50;
	Node0x50cec50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%42:\l42:                                               \l  br i1 %33, label %44, label %75\l|{<s0>T|<s1>F}}"];
	Node0x50cec50:s0 -> Node0x50ced90;
	Node0x50cec50:s1 -> Node0x50cede0;
	Node0x50ce100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%43:\l43:                                               \l  ret void\l}"];
	Node0x50ced90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = phi float addrspace(1)* [ undef, %42 ], [ %136, %75 ]\l  %46 = phi float addrspace(1)* [ %2, %42 ], [ %136, %75 ]\l  %47 = phi i32 [ %41, %42 ], [ %129, %75 ]\l  %48 = phi i32 [ 0, %42 ], [ %137, %75 ]\l  br i1 %35, label %72, label %49\l|{<s0>T|<s1>F}}"];
	Node0x50ced90:s0 -> Node0x50cebc0;
	Node0x50ced90:s1 -> Node0x50cf720;
	Node0x50cf720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  %50 = phi float addrspace(1)* [ %68, %49 ], [ %46, %44 ]\l  %51 = phi i32 [ %61, %49 ], [ %47, %44 ]\l  %52 = phi i32 [ %69, %49 ], [ %48, %44 ]\l  %53 = phi i32 [ %70, %49 ], [ 0, %44 ]\l  %54 = xor i32 %52, -1\l  %55 = add i32 %54, %1\l  %56 = zext i32 %55 to i64\l  %57 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %56\l  %58 = load i32, i32 addrspace(1)* %57, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %59 = freeze i32 %51\l  %60 = freeze i32 %58\l  %61 = sdiv i32 %59, %60\l  %62 = mul i32 %61, %60\l  %63 = sub i32 %59, %62\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %56\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %66 = mul nsw i32 %65, %63\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %50, i64 %67\l  %69 = add nuw i32 %52, 1\l  %70 = add i32 %53, 1\l  %71 = icmp eq i32 %70, %32\l  br i1 %71, label %72, label %49, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x50cf720:s0 -> Node0x50cebc0;
	Node0x50cf720:s1 -> Node0x50cf720;
	Node0x50cebc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%72:\l72:                                               \l  %73 = phi float addrspace(1)* [ %2, %40 ], [ %45, %44 ], [ %68, %49 ]\l  br i1 %31, label %168, label %74\l|{<s0>T|<s1>F}}"];
	Node0x50cebc0:s0 -> Node0x50cea80;
	Node0x50cebc0:s1 -> Node0x50d1870;
	Node0x50d1870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%74:\l74:                                               \l  br i1 %37, label %140, label %173\l|{<s0>T|<s1>F}}"];
	Node0x50d1870:s0 -> Node0x50d1970;
	Node0x50d1870:s1 -> Node0x50d19c0;
	Node0x50cede0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%75:\l75:                                               \l  %76 = phi float addrspace(1)* [ %136, %75 ], [ %2, %42 ]\l  %77 = phi i32 [ %129, %75 ], [ %41, %42 ]\l  %78 = phi i32 [ %137, %75 ], [ 0, %42 ]\l  %79 = phi i32 [ %138, %75 ], [ 0, %42 ]\l  %80 = xor i32 %78, -1\l  %81 = add i32 %80, %1\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %82\l  %84 = load i32, i32 addrspace(1)* %83, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %85 = freeze i32 %77\l  %86 = freeze i32 %84\l  %87 = sdiv i32 %85, %86\l  %88 = mul i32 %87, %86\l  %89 = sub i32 %85, %88\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %82\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %92 = mul nsw i32 %91, %89\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %76, i64 %93\l  %95 = sub i32 %1, %78\l  %96 = add i32 %95, -2\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %97\l  %99 = load i32, i32 addrspace(1)* %98, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %100 = freeze i32 %99\l  %101 = sdiv i32 %87, %100\l  %102 = mul i32 %101, %100\l  %103 = sub i32 %87, %102\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %97\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %106 = mul nsw i32 %105, %103\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %94, i64 %107\l  %109 = sub i32 %1, %78\l  %110 = add i32 %109, -3\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %111\l  %113 = load i32, i32 addrspace(1)* %112, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %114 = freeze i32 %113\l  %115 = sdiv i32 %101, %114\l  %116 = mul i32 %115, %114\l  %117 = sub i32 %101, %116\l  %118 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %111\l  %119 = load i32, i32 addrspace(1)* %118, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %120 = mul nsw i32 %119, %117\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %108, i64 %121\l  %123 = sub i32 %1, %78\l  %124 = add i32 %123, -4\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %125\l  %127 = load i32, i32 addrspace(1)* %126, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %128 = freeze i32 %127\l  %129 = sdiv i32 %115, %128\l  %130 = mul i32 %129, %128\l  %131 = sub i32 %115, %130\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %125\l  %133 = load i32, i32 addrspace(1)* %132, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %134 = mul nsw i32 %133, %131\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %122, i64 %135\l  %137 = add nuw i32 %78, 4\l  %138 = add i32 %79, 4\l  %139 = icmp eq i32 %138, %34\l  br i1 %139, label %44, label %75, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x50cede0:s0 -> Node0x50ced90;
	Node0x50cede0:s1 -> Node0x50cede0;
	Node0x50d1970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%140:\l140:                                              \l  %141 = phi float addrspace(1)* [ undef, %74 ], [ %234, %173 ]\l  %142 = phi i32 [ 0, %74 ], [ %235, %173 ]\l  %143 = phi float addrspace(1)* [ %6, %74 ], [ %234, %173 ]\l  %144 = phi i32 [ %41, %74 ], [ %227, %173 ]\l  br i1 %39, label %168, label %145\l|{<s0>T|<s1>F}}"];
	Node0x50d1970:s0 -> Node0x50cea80;
	Node0x50d1970:s1 -> Node0x50d4790;
	Node0x50d4790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%145:\l145:                                              \l  %146 = phi i32 [ %165, %145 ], [ %142, %140 ]\l  %147 = phi float addrspace(1)* [ %164, %145 ], [ %143, %140 ]\l  %148 = phi i32 [ %157, %145 ], [ %144, %140 ]\l  %149 = phi i32 [ %166, %145 ], [ 0, %140 ]\l  %150 = xor i32 %146, -1\l  %151 = add i32 %150, %5\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %152\l  %154 = load i32, i32 addrspace(1)* %153, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %155 = freeze i32 %148\l  %156 = freeze i32 %154\l  %157 = sdiv i32 %155, %156\l  %158 = mul i32 %157, %156\l  %159 = sub i32 %155, %158\l  %160 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %152\l  %161 = load i32, i32 addrspace(1)* %160, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %162 = mul nsw i32 %161, %159\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %147, i64 %163\l  %165 = add nuw i32 %146, 1\l  %166 = add i32 %149, 1\l  %167 = icmp eq i32 %166, %36\l  br i1 %167, label %168, label %145, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x50d4790:s0 -> Node0x50cea80;
	Node0x50d4790:s1 -> Node0x50d4790;
	Node0x50cea80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%168:\l168:                                              \l  %169 = phi float addrspace(1)* [ %6, %72 ], [ %141, %140 ], [ %164, %145 ]\l  %170 = load float, float addrspace(1)* %73, align 4, !tbaa !25\l  store float %170, float addrspace(1)* %169, align 4, !tbaa !25\l  %171 = add i32 %41, %27\l  %172 = icmp ult i32 %171, %0\l  br i1 %172, label %40, label %43, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x50cea80:s0 -> Node0x50ce990;
	Node0x50cea80:s1 -> Node0x50ce100;
	Node0x50d19c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%173:\l173:                                              \l  %174 = phi i32 [ %235, %173 ], [ 0, %74 ]\l  %175 = phi float addrspace(1)* [ %234, %173 ], [ %6, %74 ]\l  %176 = phi i32 [ %227, %173 ], [ %41, %74 ]\l  %177 = phi i32 [ %236, %173 ], [ 0, %74 ]\l  %178 = xor i32 %174, -1\l  %179 = add i32 %178, %5\l  %180 = zext i32 %179 to i64\l  %181 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %180\l  %182 = load i32, i32 addrspace(1)* %181, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %183 = freeze i32 %176\l  %184 = freeze i32 %182\l  %185 = sdiv i32 %183, %184\l  %186 = mul i32 %185, %184\l  %187 = sub i32 %183, %186\l  %188 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %180\l  %189 = load i32, i32 addrspace(1)* %188, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %190 = mul nsw i32 %189, %187\l  %191 = sext i32 %190 to i64\l  %192 = getelementptr inbounds float, float addrspace(1)* %175, i64 %191\l  %193 = sub i32 %5, %174\l  %194 = add i32 %193, -2\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %195\l  %197 = load i32, i32 addrspace(1)* %196, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %198 = freeze i32 %197\l  %199 = sdiv i32 %185, %198\l  %200 = mul i32 %199, %198\l  %201 = sub i32 %185, %200\l  %202 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %195\l  %203 = load i32, i32 addrspace(1)* %202, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %204 = mul nsw i32 %203, %201\l  %205 = sext i32 %204 to i64\l  %206 = getelementptr inbounds float, float addrspace(1)* %192, i64 %205\l  %207 = sub i32 %5, %174\l  %208 = add i32 %207, -3\l  %209 = zext i32 %208 to i64\l  %210 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %209\l  %211 = load i32, i32 addrspace(1)* %210, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %212 = freeze i32 %211\l  %213 = sdiv i32 %199, %212\l  %214 = mul i32 %213, %212\l  %215 = sub i32 %199, %214\l  %216 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %209\l  %217 = load i32, i32 addrspace(1)* %216, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %218 = mul nsw i32 %217, %215\l  %219 = sext i32 %218 to i64\l  %220 = getelementptr inbounds float, float addrspace(1)* %206, i64 %219\l  %221 = sub i32 %5, %174\l  %222 = add i32 %221, -4\l  %223 = zext i32 %222 to i64\l  %224 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %223\l  %225 = load i32, i32 addrspace(1)* %224, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %226 = freeze i32 %225\l  %227 = sdiv i32 %213, %226\l  %228 = mul i32 %227, %226\l  %229 = sub i32 %213, %228\l  %230 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %223\l  %231 = load i32, i32 addrspace(1)* %230, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %232 = mul nsw i32 %231, %229\l  %233 = sext i32 %232 to i64\l  %234 = getelementptr inbounds float, float addrspace(1)* %220, i64 %233\l  %235 = add nuw i32 %174, 4\l  %236 = add i32 %177, 4\l  %237 = icmp eq i32 %236, %38\l  br i1 %237, label %140, label %173, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x50d19c0:s0 -> Node0x50d1970;
	Node0x50d19c0:s1 -> Node0x50d19c0;
}
