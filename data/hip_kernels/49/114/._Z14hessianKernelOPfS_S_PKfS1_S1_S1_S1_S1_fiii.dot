digraph "CFG for '_Z14hessianKernelOPfS_S_PKfS1_S1_S1_S1_S1_fiii' function" {
	label="CFG for '_Z14hessianKernelOPfS_S_PKfS1_S1_S1_S1_S1_fiii' function";

	Node0x56bd9e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%13:\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %10, %19\l  %21 = udiv i32 %15, %20\l  %22 = uitofp i32 %21 to float\l  %23 = fptosi float %22 to i32\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %25 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 2, !range !4, !invariant.load !5\l  %28 = zext i16 %27 to i32\l  %29 = mul i32 %24, %28\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %31 = add i32 %29, %30\l  %32 = mul nsw i32 %20, %23\l  %33 = sub i32 %15, %32\l  %34 = mul i32 %33, %19\l  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %36 = mul i32 %23, %11\l  %37 = add i32 %31, %36\l  %38 = mul i32 %37, %10\l  %39 = add i32 %34, %35\l  %40 = add i32 %39, %38\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = fneg contract float %43\l  %45 = getelementptr inbounds float, float addrspace(1)* %4, i64 %41\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = getelementptr inbounds float, float addrspace(1)* %5, i64 %41\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = fneg contract float %48\l  %50 = getelementptr inbounds float, float addrspace(1)* %6, i64 %41\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fneg contract float %51\l  %53 = getelementptr inbounds float, float addrspace(1)* %7, i64 %41\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fneg contract float %54\l  %56 = getelementptr inbounds float, float addrspace(1)* %8, i64 %41\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = fneg contract float %57\l  %59 = fsub contract float %52, %43\l  %60 = fsub contract float %59, %57\l  %61 = fdiv contract float %60, 3.000000e+00\l  %62 = fsub contract float %44, %61\l  %63 = fsub contract float %52, %61\l  %64 = fsub contract float %58, %61\l  %65 = fmul contract float %62, %63\l  %66 = fmul contract float %64, %65\l  %67 = fmul contract float %62, %55\l  %68 = fmul contract float %54, %67\l  %69 = fadd contract float %66, %68\l  %70 = fmul contract float %46, %54\l  %71 = fmul contract float %48, %70\l  %72 = fsub contract float %69, %71\l  %73 = fmul contract float %46, %46\l  %74 = fmul contract float %73, %64\l  %75 = fsub contract float %72, %74\l  %76 = fmul contract float %46, %48\l  %77 = fmul contract float %76, %54\l  %78 = fsub contract float %75, %77\l  %79 = fmul contract float %63, %49\l  %80 = fmul contract float %48, %79\l  %81 = fadd contract float %80, %78\l  %82 = fmul contract float %81, 5.000000e-01\l  %83 = fmul contract float %62, %62\l  %84 = fadd contract float %73, %83\l  %85 = fmul contract float %48, %48\l  %86 = fadd contract float %85, %84\l  %87 = fadd contract float %73, %86\l  %88 = fmul contract float %63, %63\l  %89 = fadd contract float %88, %87\l  %90 = fmul contract float %54, %54\l  %91 = fadd contract float %90, %89\l  %92 = fadd contract float %85, %91\l  %93 = fadd contract float %90, %92\l  %94 = fmul contract float %64, %64\l  %95 = fadd contract float %94, %93\l  %96 = fdiv contract float %95, 6.000000e+00\l  %97 = fmul contract float %96, %96\l  %98 = fmul contract float %96, %97\l  %99 = fmul contract float %82, %82\l  %100 = fsub contract float %98, %99\l  %101 = fcmp olt float %100, 0x39F0000000000000\l  %102 = select i1 %101, float 0x41F0000000000000, float 1.000000e+00\l  %103 = fmul float %100, %102\l  %104 = tail call float @llvm.sqrt.f32(float %103)\l  %105 = bitcast float %104 to i32\l  %106 = add nsw i32 %105, -1\l  %107 = bitcast i32 %106 to float\l  %108 = add nsw i32 %105, 1\l  %109 = bitcast i32 %108 to float\l  %110 = tail call i1 @llvm.amdgcn.class.f32(float %103, i32 608)\l  %111 = select i1 %101, float 0x3EF0000000000000, float 1.000000e+00\l  %112 = fneg float %109\l  %113 = tail call float @llvm.fma.f32(float %112, float %104, float %103)\l  %114 = fcmp ogt float %113, 0.000000e+00\l  %115 = fneg float %107\l  %116 = tail call float @llvm.fma.f32(float %115, float %104, float %103)\l  %117 = fcmp ole float %116, 0.000000e+00\l  %118 = select i1 %117, float %107, float %104\l  %119 = select i1 %114, float %109, float %118\l  %120 = fmul float %111, %119\l  %121 = select i1 %110, float %103, float %120\l  %122 = fdiv contract float %121, %82\l  %123 = tail call float @llvm.fabs.f32(float %122)\l  %124 = fcmp ogt float %123, 1.000000e+00\l  %125 = tail call float @llvm.amdgcn.rcp.f32(float %123)\l  %126 = select i1 %124, float %125, float %123\l  %127 = fmul float %126, %126\l  %128 = tail call float @llvm.fmuladd.f32(float %127, float\l... 0x3F65A54B00000000, float 0xBF8F4B2180000000)\l  %129 = tail call float @llvm.fmuladd.f32(float %127, float %128, float\l... 0x3FA53F67E0000000)\l  %130 = tail call float @llvm.fmuladd.f32(float %127, float %129, float\l... 0xBFB2FA9AE0000000)\l  %131 = tail call float @llvm.fmuladd.f32(float %127, float %130, float\l... 0x3FBB263640000000)\l  %132 = tail call float @llvm.fmuladd.f32(float %127, float %131, float\l... 0xBFC22C1CC0000000)\l  %133 = tail call float @llvm.fmuladd.f32(float %127, float %132, float\l... 0x3FC99717E0000000)\l  %134 = tail call float @llvm.fmuladd.f32(float %127, float %133, float\l... 0xBFD5554C40000000)\l  %135 = fmul float %127, %134\l  %136 = tail call float @llvm.fmuladd.f32(float %126, float %135, float %126)\l  %137 = fsub float 0x3FF921FB60000000, %136\l  %138 = select i1 %124, float %137, float %136\l  %139 = tail call float @llvm.copysign.f32(float %138, float %122)\l  %140 = fmul contract float %139, 0x3FD5555560000000\l  %141 = fcmp contract olt float %140, 0.000000e+00\l  %142 = fadd contract float %140, 0x3FF0C15160000000\l  %143 = select i1 %141, float %142, float %140\l  %144 = fcmp olt float %96, 0x39F0000000000000\l  %145 = select i1 %144, float 0x41F0000000000000, float 1.000000e+00\l  %146 = fmul float %96, %145\l  %147 = tail call float @llvm.sqrt.f32(float %146)\l  %148 = bitcast float %147 to i32\l  %149 = add nsw i32 %148, -1\l  %150 = bitcast i32 %149 to float\l  %151 = add nsw i32 %148, 1\l  %152 = bitcast i32 %151 to float\l  %153 = tail call i1 @llvm.amdgcn.class.f32(float %146, i32 608)\l  %154 = select i1 %144, float 0x3EF0000000000000, float 1.000000e+00\l  %155 = fneg float %152\l  %156 = tail call float @llvm.fma.f32(float %155, float %147, float %146)\l  %157 = fcmp ogt float %156, 0.000000e+00\l  %158 = fneg float %150\l  %159 = tail call float @llvm.fma.f32(float %158, float %147, float %146)\l  %160 = fcmp ole float %159, 0.000000e+00\l  %161 = select i1 %160, float %150, float %147\l  %162 = select i1 %157, float %152, float %161\l  %163 = fmul float %154, %162\l  %164 = select i1 %153, float %146, float %163\l  %165 = fmul contract float %164, 2.000000e+00\l  %166 = tail call float @llvm.fabs.f32(float %143)\l  %167 = fcmp olt float %166, 1.310720e+05\l  br i1 %167, label %168, label %175\l|{<s0>T|<s1>F}}"];
	Node0x56bd9e0:s0 -> Node0x56c9eb0;
	Node0x56bd9e0:s1 -> Node0x56c9f40;
	Node0x56c9eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%168:\l168:                                              \l  %169 = fmul float %166, 0x3FE45F3060000000\l  %170 = tail call float @llvm.rint.f32(float %169)\l  %171 = tail call float @llvm.fma.f32(float %170, float 0xBFF921FB40000000,\l... float %166)\l  %172 = tail call float @llvm.fma.f32(float %170, float 0xBE74442D00000000,\l... float %171)\l  %173 = tail call float @llvm.fma.f32(float %170, float 0xBCF8469880000000,\l... float %172)\l  %174 = fptosi float %170 to i32\l  br label %281\l}"];
	Node0x56c9eb0 -> Node0x56ca7c0;
	Node0x56c9f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%175:\l175:                                              \l  %176 = bitcast float %166 to i32\l  %177 = lshr i32 %176, 23\l  %178 = and i32 %176, 8388607\l  %179 = or i32 %178, 8388608\l  %180 = zext i32 %179 to i64\l  %181 = mul nuw nsw i64 %180, 4266746795\l  %182 = trunc i64 %181 to i32\l  %183 = lshr i64 %181, 32\l  %184 = mul nuw nsw i64 %180, 1011060801\l  %185 = add nuw nsw i64 %183, %184\l  %186 = trunc i64 %185 to i32\l  %187 = lshr i64 %185, 32\l  %188 = mul nuw nsw i64 %180, 3680671129\l  %189 = add nuw nsw i64 %187, %188\l  %190 = trunc i64 %189 to i32\l  %191 = lshr i64 %189, 32\l  %192 = mul nuw nsw i64 %180, 4113882560\l  %193 = add nuw nsw i64 %191, %192\l  %194 = trunc i64 %193 to i32\l  %195 = lshr i64 %193, 32\l  %196 = mul nuw nsw i64 %180, 4230436817\l  %197 = add nuw nsw i64 %195, %196\l  %198 = trunc i64 %197 to i32\l  %199 = lshr i64 %197, 32\l  %200 = mul nuw nsw i64 %180, 1313084713\l  %201 = add nuw nsw i64 %199, %200\l  %202 = trunc i64 %201 to i32\l  %203 = lshr i64 %201, 32\l  %204 = mul nuw nsw i64 %180, 2734261102\l  %205 = add nuw nsw i64 %203, %204\l  %206 = trunc i64 %205 to i32\l  %207 = lshr i64 %205, 32\l  %208 = trunc i64 %207 to i32\l  %209 = add nsw i32 %177, -120\l  %210 = icmp ugt i32 %209, 63\l  %211 = select i1 %210, i32 %202, i32 %208\l  %212 = select i1 %210, i32 %198, i32 %206\l  %213 = select i1 %210, i32 %194, i32 %202\l  %214 = select i1 %210, i32 %190, i32 %198\l  %215 = select i1 %210, i32 %186, i32 %194\l  %216 = select i1 %210, i32 %182, i32 %190\l  %217 = select i1 %210, i32 -64, i32 0\l  %218 = add nsw i32 %217, %209\l  %219 = icmp ugt i32 %218, 31\l  %220 = select i1 %219, i32 %212, i32 %211\l  %221 = select i1 %219, i32 %213, i32 %212\l  %222 = select i1 %219, i32 %214, i32 %213\l  %223 = select i1 %219, i32 %215, i32 %214\l  %224 = select i1 %219, i32 %216, i32 %215\l  %225 = select i1 %219, i32 -32, i32 0\l  %226 = add nsw i32 %225, %218\l  %227 = icmp ugt i32 %226, 31\l  %228 = select i1 %227, i32 %221, i32 %220\l  %229 = select i1 %227, i32 %222, i32 %221\l  %230 = select i1 %227, i32 %223, i32 %222\l  %231 = select i1 %227, i32 %224, i32 %223\l  %232 = select i1 %227, i32 -32, i32 0\l  %233 = add nsw i32 %232, %226\l  %234 = icmp eq i32 %233, 0\l  %235 = sub nsw i32 32, %233\l  %236 = tail call i32 @llvm.fshr.i32(i32 %228, i32 %229, i32 %235)\l  %237 = tail call i32 @llvm.fshr.i32(i32 %229, i32 %230, i32 %235)\l  %238 = tail call i32 @llvm.fshr.i32(i32 %230, i32 %231, i32 %235)\l  %239 = select i1 %234, i32 %228, i32 %236\l  %240 = select i1 %234, i32 %229, i32 %237\l  %241 = select i1 %234, i32 %230, i32 %238\l  %242 = lshr i32 %239, 29\l  %243 = tail call i32 @llvm.fshl.i32(i32 %239, i32 %240, i32 2)\l  %244 = tail call i32 @llvm.fshl.i32(i32 %240, i32 %241, i32 2)\l  %245 = tail call i32 @llvm.fshl.i32(i32 %241, i32 %231, i32 2)\l  %246 = and i32 %242, 1\l  %247 = sub nsw i32 0, %246\l  %248 = shl i32 %242, 31\l  %249 = xor i32 %243, %247\l  %250 = xor i32 %244, %247\l  %251 = xor i32 %245, %247\l  %252 = tail call i32 @llvm.ctlz.i32(i32 %249, i1 false), !range !11\l  %253 = sub nsw i32 31, %252\l  %254 = tail call i32 @llvm.fshr.i32(i32 %249, i32 %250, i32 %253)\l  %255 = tail call i32 @llvm.fshr.i32(i32 %250, i32 %251, i32 %253)\l  %256 = shl nuw nsw i32 %252, 23\l  %257 = sub nuw nsw i32 1056964608, %256\l  %258 = lshr i32 %254, 9\l  %259 = or i32 %258, %257\l  %260 = or i32 %259, %248\l  %261 = bitcast i32 %260 to float\l  %262 = tail call i32 @llvm.fshl.i32(i32 %254, i32 %255, i32 23)\l  %263 = tail call i32 @llvm.ctlz.i32(i32 %262, i1 false), !range !11\l  %264 = fmul float %261, 0x3FF921FB40000000\l  %265 = add nuw nsw i32 %263, %252\l  %266 = shl nuw nsw i32 %265, 23\l  %267 = sub nuw nsw i32 855638016, %266\l  %268 = sub nsw i32 31, %263\l  %269 = tail call i32 @llvm.fshr.i32(i32 %262, i32 %255, i32 %268)\l  %270 = lshr i32 %269, 9\l  %271 = or i32 %267, %270\l  %272 = or i32 %271, %248\l  %273 = bitcast i32 %272 to float\l  %274 = fneg float %264\l  %275 = tail call float @llvm.fma.f32(float %261, float 0x3FF921FB40000000,\l... float %274)\l  %276 = tail call float @llvm.fma.f32(float %261, float 0x3E74442D00000000,\l... float %275)\l  %277 = tail call float @llvm.fma.f32(float %273, float 0x3FF921FB40000000,\l... float %276)\l  %278 = fadd float %264, %277\l  %279 = lshr i32 %239, 30\l  %280 = add nuw nsw i32 %246, %279\l  br label %281\l}"];
	Node0x56c9f40 -> Node0x56ca7c0;
	Node0x56ca7c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%281:\l281:                                              \l  %282 = phi float [ %173, %168 ], [ %278, %175 ]\l  %283 = phi i32 [ %174, %168 ], [ %280, %175 ]\l  %284 = fmul float %282, %282\l  %285 = tail call float @llvm.fmuladd.f32(float %284, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %286 = tail call float @llvm.fmuladd.f32(float %284, float %285, float\l... 0xBFC55553A0000000)\l  %287 = fmul float %284, %286\l  %288 = tail call float @llvm.fmuladd.f32(float %282, float %287, float %282)\l  %289 = tail call float @llvm.fmuladd.f32(float %284, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %290 = tail call float @llvm.fmuladd.f32(float %284, float %289, float\l... 0x3FA5557EE0000000)\l  %291 = tail call float @llvm.fmuladd.f32(float %284, float %290, float\l... 0xBFE0000080000000)\l  %292 = tail call float @llvm.fmuladd.f32(float %284, float %291, float\l... 1.000000e+00)\l  %293 = fneg float %288\l  %294 = and i32 %283, 1\l  %295 = icmp eq i32 %294, 0\l  %296 = select i1 %295, float %292, float %293\l  %297 = bitcast float %296 to i32\l  %298 = shl i32 %283, 30\l  %299 = and i32 %298, -2147483648\l  %300 = xor i32 %299, %297\l  %301 = bitcast i32 %300 to float\l  %302 = tail call i1 @llvm.amdgcn.class.f32(float %166, i32 504)\l  %303 = select i1 %302, float %301, float 0x7FF8000000000000\l  %304 = fmul contract float %165, %303\l  %305 = fadd contract float %61, %304\l  br i1 %167, label %306, label %313\l|{<s0>T|<s1>F}}"];
	Node0x56ca7c0:s0 -> Node0x56d1ac0;
	Node0x56ca7c0:s1 -> Node0x56d1b50;
	Node0x56d1ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%306:\l306:                                              \l  %307 = fmul float %166, 0x3FE45F3060000000\l  %308 = tail call float @llvm.rint.f32(float %307)\l  %309 = tail call float @llvm.fma.f32(float %308, float 0xBFF921FB40000000,\l... float %166)\l  %310 = tail call float @llvm.fma.f32(float %308, float 0xBE74442D00000000,\l... float %309)\l  %311 = tail call float @llvm.fma.f32(float %308, float 0xBCF8469880000000,\l... float %310)\l  %312 = fptosi float %308 to i32\l  br label %419\l}"];
	Node0x56d1ac0 -> Node0x56d2240;
	Node0x56d1b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%313:\l313:                                              \l  %314 = bitcast float %166 to i32\l  %315 = lshr i32 %314, 23\l  %316 = and i32 %314, 8388607\l  %317 = or i32 %316, 8388608\l  %318 = zext i32 %317 to i64\l  %319 = mul nuw nsw i64 %318, 4266746795\l  %320 = trunc i64 %319 to i32\l  %321 = lshr i64 %319, 32\l  %322 = mul nuw nsw i64 %318, 1011060801\l  %323 = add nuw nsw i64 %321, %322\l  %324 = trunc i64 %323 to i32\l  %325 = lshr i64 %323, 32\l  %326 = mul nuw nsw i64 %318, 3680671129\l  %327 = add nuw nsw i64 %325, %326\l  %328 = trunc i64 %327 to i32\l  %329 = lshr i64 %327, 32\l  %330 = mul nuw nsw i64 %318, 4113882560\l  %331 = add nuw nsw i64 %329, %330\l  %332 = trunc i64 %331 to i32\l  %333 = lshr i64 %331, 32\l  %334 = mul nuw nsw i64 %318, 4230436817\l  %335 = add nuw nsw i64 %333, %334\l  %336 = trunc i64 %335 to i32\l  %337 = lshr i64 %335, 32\l  %338 = mul nuw nsw i64 %318, 1313084713\l  %339 = add nuw nsw i64 %337, %338\l  %340 = trunc i64 %339 to i32\l  %341 = lshr i64 %339, 32\l  %342 = mul nuw nsw i64 %318, 2734261102\l  %343 = add nuw nsw i64 %341, %342\l  %344 = trunc i64 %343 to i32\l  %345 = lshr i64 %343, 32\l  %346 = trunc i64 %345 to i32\l  %347 = add nsw i32 %315, -120\l  %348 = icmp ugt i32 %347, 63\l  %349 = select i1 %348, i32 %340, i32 %346\l  %350 = select i1 %348, i32 %336, i32 %344\l  %351 = select i1 %348, i32 %332, i32 %340\l  %352 = select i1 %348, i32 %328, i32 %336\l  %353 = select i1 %348, i32 %324, i32 %332\l  %354 = select i1 %348, i32 %320, i32 %328\l  %355 = select i1 %348, i32 -64, i32 0\l  %356 = add nsw i32 %355, %347\l  %357 = icmp ugt i32 %356, 31\l  %358 = select i1 %357, i32 %350, i32 %349\l  %359 = select i1 %357, i32 %351, i32 %350\l  %360 = select i1 %357, i32 %352, i32 %351\l  %361 = select i1 %357, i32 %353, i32 %352\l  %362 = select i1 %357, i32 %354, i32 %353\l  %363 = select i1 %357, i32 -32, i32 0\l  %364 = add nsw i32 %363, %356\l  %365 = icmp ugt i32 %364, 31\l  %366 = select i1 %365, i32 %359, i32 %358\l  %367 = select i1 %365, i32 %360, i32 %359\l  %368 = select i1 %365, i32 %361, i32 %360\l  %369 = select i1 %365, i32 %362, i32 %361\l  %370 = select i1 %365, i32 -32, i32 0\l  %371 = add nsw i32 %370, %364\l  %372 = icmp eq i32 %371, 0\l  %373 = sub nsw i32 32, %371\l  %374 = tail call i32 @llvm.fshr.i32(i32 %366, i32 %367, i32 %373)\l  %375 = tail call i32 @llvm.fshr.i32(i32 %367, i32 %368, i32 %373)\l  %376 = tail call i32 @llvm.fshr.i32(i32 %368, i32 %369, i32 %373)\l  %377 = select i1 %372, i32 %366, i32 %374\l  %378 = select i1 %372, i32 %367, i32 %375\l  %379 = select i1 %372, i32 %368, i32 %376\l  %380 = lshr i32 %377, 29\l  %381 = tail call i32 @llvm.fshl.i32(i32 %377, i32 %378, i32 2)\l  %382 = tail call i32 @llvm.fshl.i32(i32 %378, i32 %379, i32 2)\l  %383 = tail call i32 @llvm.fshl.i32(i32 %379, i32 %369, i32 2)\l  %384 = and i32 %380, 1\l  %385 = sub nsw i32 0, %384\l  %386 = shl i32 %380, 31\l  %387 = xor i32 %381, %385\l  %388 = xor i32 %382, %385\l  %389 = xor i32 %383, %385\l  %390 = tail call i32 @llvm.ctlz.i32(i32 %387, i1 false), !range !11\l  %391 = sub nsw i32 31, %390\l  %392 = tail call i32 @llvm.fshr.i32(i32 %387, i32 %388, i32 %391)\l  %393 = tail call i32 @llvm.fshr.i32(i32 %388, i32 %389, i32 %391)\l  %394 = shl nuw nsw i32 %390, 23\l  %395 = sub nuw nsw i32 1056964608, %394\l  %396 = lshr i32 %392, 9\l  %397 = or i32 %396, %395\l  %398 = or i32 %397, %386\l  %399 = bitcast i32 %398 to float\l  %400 = tail call i32 @llvm.fshl.i32(i32 %392, i32 %393, i32 23)\l  %401 = tail call i32 @llvm.ctlz.i32(i32 %400, i1 false), !range !11\l  %402 = fmul float %399, 0x3FF921FB40000000\l  %403 = add nuw nsw i32 %401, %390\l  %404 = shl nuw nsw i32 %403, 23\l  %405 = sub nuw nsw i32 855638016, %404\l  %406 = sub nsw i32 31, %401\l  %407 = tail call i32 @llvm.fshr.i32(i32 %400, i32 %393, i32 %406)\l  %408 = lshr i32 %407, 9\l  %409 = or i32 %405, %408\l  %410 = or i32 %409, %386\l  %411 = bitcast i32 %410 to float\l  %412 = fneg float %402\l  %413 = tail call float @llvm.fma.f32(float %399, float 0x3FF921FB40000000,\l... float %412)\l  %414 = tail call float @llvm.fma.f32(float %399, float 0x3E74442D00000000,\l... float %413)\l  %415 = tail call float @llvm.fma.f32(float %411, float 0x3FF921FB40000000,\l... float %414)\l  %416 = fadd float %402, %415\l  %417 = lshr i32 %377, 30\l  %418 = add nuw nsw i32 %384, %417\l  br label %419\l}"];
	Node0x56d1b50 -> Node0x56d2240;
	Node0x56d2240 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%419:\l419:                                              \l  %420 = phi float [ %311, %306 ], [ %416, %313 ]\l  %421 = phi i32 [ %312, %306 ], [ %418, %313 ]\l  %422 = fmul float %420, %420\l  %423 = tail call float @llvm.fmuladd.f32(float %422, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %424 = tail call float @llvm.fmuladd.f32(float %422, float %423, float\l... 0xBFC55553A0000000)\l  %425 = fmul float %422, %424\l  %426 = tail call float @llvm.fmuladd.f32(float %420, float %425, float %420)\l  %427 = tail call float @llvm.fmuladd.f32(float %422, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %428 = tail call float @llvm.fmuladd.f32(float %422, float %427, float\l... 0x3FA5557EE0000000)\l  %429 = tail call float @llvm.fmuladd.f32(float %422, float %428, float\l... 0xBFE0000080000000)\l  %430 = tail call float @llvm.fmuladd.f32(float %422, float %429, float\l... 1.000000e+00)\l  %431 = fneg float %426\l  %432 = and i32 %421, 1\l  %433 = icmp eq i32 %432, 0\l  %434 = select i1 %433, float %430, float %431\l  %435 = bitcast float %434 to i32\l  %436 = shl i32 %421, 30\l  %437 = and i32 %436, -2147483648\l  %438 = xor i32 %437, %435\l  %439 = bitcast i32 %438 to float\l  br i1 %167, label %440, label %448\l|{<s0>T|<s1>F}}"];
	Node0x56d2240:s0 -> Node0x56d7840;
	Node0x56d2240:s1 -> Node0x56d7890;
	Node0x56d7840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%440:\l440:                                              \l  %441 = fmul float %166, 0x3FE45F3060000000\l  %442 = tail call float @llvm.rint.f32(float %441)\l  %443 = tail call float @llvm.fma.f32(float %442, float 0xBFF921FB40000000,\l... float %166)\l  %444 = tail call float @llvm.fma.f32(float %442, float 0xBE74442D00000000,\l... float %443)\l  %445 = tail call float @llvm.fma.f32(float %442, float 0xBCF8469880000000,\l... float %444)\l  %446 = fptosi float %442 to i32\l  %447 = bitcast float %166 to i32\l  br label %554\l}"];
	Node0x56d7840 -> Node0x56d7f80;
	Node0x56d7890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%448:\l448:                                              \l  %449 = bitcast float %166 to i32\l  %450 = lshr i32 %449, 23\l  %451 = and i32 %449, 8388607\l  %452 = or i32 %451, 8388608\l  %453 = zext i32 %452 to i64\l  %454 = mul nuw nsw i64 %453, 4266746795\l  %455 = trunc i64 %454 to i32\l  %456 = lshr i64 %454, 32\l  %457 = mul nuw nsw i64 %453, 1011060801\l  %458 = add nuw nsw i64 %456, %457\l  %459 = trunc i64 %458 to i32\l  %460 = lshr i64 %458, 32\l  %461 = mul nuw nsw i64 %453, 3680671129\l  %462 = add nuw nsw i64 %460, %461\l  %463 = trunc i64 %462 to i32\l  %464 = lshr i64 %462, 32\l  %465 = mul nuw nsw i64 %453, 4113882560\l  %466 = add nuw nsw i64 %464, %465\l  %467 = trunc i64 %466 to i32\l  %468 = lshr i64 %466, 32\l  %469 = mul nuw nsw i64 %453, 4230436817\l  %470 = add nuw nsw i64 %468, %469\l  %471 = trunc i64 %470 to i32\l  %472 = lshr i64 %470, 32\l  %473 = mul nuw nsw i64 %453, 1313084713\l  %474 = add nuw nsw i64 %472, %473\l  %475 = trunc i64 %474 to i32\l  %476 = lshr i64 %474, 32\l  %477 = mul nuw nsw i64 %453, 2734261102\l  %478 = add nuw nsw i64 %476, %477\l  %479 = trunc i64 %478 to i32\l  %480 = lshr i64 %478, 32\l  %481 = trunc i64 %480 to i32\l  %482 = add nsw i32 %450, -120\l  %483 = icmp ugt i32 %482, 63\l  %484 = select i1 %483, i32 %475, i32 %481\l  %485 = select i1 %483, i32 %471, i32 %479\l  %486 = select i1 %483, i32 %467, i32 %475\l  %487 = select i1 %483, i32 %463, i32 %471\l  %488 = select i1 %483, i32 %459, i32 %467\l  %489 = select i1 %483, i32 %455, i32 %463\l  %490 = select i1 %483, i32 -64, i32 0\l  %491 = add nsw i32 %490, %482\l  %492 = icmp ugt i32 %491, 31\l  %493 = select i1 %492, i32 %485, i32 %484\l  %494 = select i1 %492, i32 %486, i32 %485\l  %495 = select i1 %492, i32 %487, i32 %486\l  %496 = select i1 %492, i32 %488, i32 %487\l  %497 = select i1 %492, i32 %489, i32 %488\l  %498 = select i1 %492, i32 -32, i32 0\l  %499 = add nsw i32 %498, %491\l  %500 = icmp ugt i32 %499, 31\l  %501 = select i1 %500, i32 %494, i32 %493\l  %502 = select i1 %500, i32 %495, i32 %494\l  %503 = select i1 %500, i32 %496, i32 %495\l  %504 = select i1 %500, i32 %497, i32 %496\l  %505 = select i1 %500, i32 -32, i32 0\l  %506 = add nsw i32 %505, %499\l  %507 = icmp eq i32 %506, 0\l  %508 = sub nsw i32 32, %506\l  %509 = tail call i32 @llvm.fshr.i32(i32 %501, i32 %502, i32 %508)\l  %510 = tail call i32 @llvm.fshr.i32(i32 %502, i32 %503, i32 %508)\l  %511 = tail call i32 @llvm.fshr.i32(i32 %503, i32 %504, i32 %508)\l  %512 = select i1 %507, i32 %501, i32 %509\l  %513 = select i1 %507, i32 %502, i32 %510\l  %514 = select i1 %507, i32 %503, i32 %511\l  %515 = lshr i32 %512, 29\l  %516 = tail call i32 @llvm.fshl.i32(i32 %512, i32 %513, i32 2)\l  %517 = tail call i32 @llvm.fshl.i32(i32 %513, i32 %514, i32 2)\l  %518 = tail call i32 @llvm.fshl.i32(i32 %514, i32 %504, i32 2)\l  %519 = and i32 %515, 1\l  %520 = sub nsw i32 0, %519\l  %521 = shl i32 %515, 31\l  %522 = xor i32 %516, %520\l  %523 = xor i32 %517, %520\l  %524 = xor i32 %518, %520\l  %525 = tail call i32 @llvm.ctlz.i32(i32 %522, i1 false), !range !11\l  %526 = sub nsw i32 31, %525\l  %527 = tail call i32 @llvm.fshr.i32(i32 %522, i32 %523, i32 %526)\l  %528 = tail call i32 @llvm.fshr.i32(i32 %523, i32 %524, i32 %526)\l  %529 = shl nuw nsw i32 %525, 23\l  %530 = sub nuw nsw i32 1056964608, %529\l  %531 = lshr i32 %527, 9\l  %532 = or i32 %531, %530\l  %533 = or i32 %532, %521\l  %534 = bitcast i32 %533 to float\l  %535 = tail call i32 @llvm.fshl.i32(i32 %527, i32 %528, i32 23)\l  %536 = tail call i32 @llvm.ctlz.i32(i32 %535, i1 false), !range !11\l  %537 = fmul float %534, 0x3FF921FB40000000\l  %538 = add nuw nsw i32 %536, %525\l  %539 = shl nuw nsw i32 %538, 23\l  %540 = sub nuw nsw i32 855638016, %539\l  %541 = sub nsw i32 31, %536\l  %542 = tail call i32 @llvm.fshr.i32(i32 %535, i32 %528, i32 %541)\l  %543 = lshr i32 %542, 9\l  %544 = or i32 %540, %543\l  %545 = or i32 %544, %521\l  %546 = bitcast i32 %545 to float\l  %547 = fneg float %537\l  %548 = tail call float @llvm.fma.f32(float %534, float 0x3FF921FB40000000,\l... float %547)\l  %549 = tail call float @llvm.fma.f32(float %534, float 0x3E74442D00000000,\l... float %548)\l  %550 = tail call float @llvm.fma.f32(float %546, float 0x3FF921FB40000000,\l... float %549)\l  %551 = fadd float %537, %550\l  %552 = lshr i32 %512, 30\l  %553 = add nuw nsw i32 %519, %552\l  br label %554\l}"];
	Node0x56d7890 -> Node0x56d7f80;
	Node0x56d7f80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%554:\l554:                                              \l  %555 = phi i32 [ %447, %440 ], [ %449, %448 ]\l  %556 = phi float [ %445, %440 ], [ %551, %448 ]\l  %557 = phi i32 [ %446, %440 ], [ %553, %448 ]\l  %558 = fmul float %556, %556\l  %559 = tail call float @llvm.fmuladd.f32(float %558, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %560 = tail call float @llvm.fmuladd.f32(float %558, float %559, float\l... 0xBFC55553A0000000)\l  %561 = fmul float %558, %560\l  %562 = tail call float @llvm.fmuladd.f32(float %556, float %561, float %556)\l  %563 = tail call float @llvm.fmuladd.f32(float %558, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %564 = tail call float @llvm.fmuladd.f32(float %558, float %563, float\l... 0x3FA5557EE0000000)\l  %565 = tail call float @llvm.fmuladd.f32(float %558, float %564, float\l... 0xBFE0000080000000)\l  %566 = tail call float @llvm.fmuladd.f32(float %558, float %565, float\l... 1.000000e+00)\l  %567 = and i32 %557, 1\l  %568 = icmp eq i32 %567, 0\l  %569 = select i1 %568, float %562, float %566\l  %570 = bitcast float %569 to i32\l  %571 = shl i32 %557, 30\l  %572 = and i32 %571, -2147483648\l  %573 = bitcast float %143 to i32\l  %574 = xor i32 %555, %572\l  %575 = xor i32 %574, %570\l  %576 = xor i32 %575, %573\l  %577 = bitcast i32 %576 to float\l  %578 = fmul contract float %577, 0x3FFBB67AE0000000\l  %579 = fadd contract float %578, %439\l  %580 = select contract i1 %302, float %579, float 0x7FF8000000000000\l  %581 = fmul contract float %164, %580\l  %582 = fsub contract float %61, %581\l  br i1 %167, label %583, label %610\l|{<s0>T|<s1>F}}"];
	Node0x56d7f80:s0 -> Node0x56dea50;
	Node0x56d7f80:s1 -> Node0x56deaa0;
	Node0x56dea50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%583:\l583:                                              \l  %584 = fmul float %166, 0x3FE45F3060000000\l  %585 = tail call float @llvm.rint.f32(float %584)\l  %586 = tail call float @llvm.fma.f32(float %585, float 0xBFF921FB40000000,\l... float %166)\l  %587 = tail call float @llvm.fma.f32(float %585, float 0xBE74442D00000000,\l... float %586)\l  %588 = tail call float @llvm.fma.f32(float %585, float 0xBCF8469880000000,\l... float %587)\l  %589 = fptosi float %585 to i32\l  %590 = fmul float %588, %588\l  %591 = tail call float @llvm.fmuladd.f32(float %590, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %592 = tail call float @llvm.fmuladd.f32(float %590, float %591, float\l... 0xBFC55553A0000000)\l  %593 = fmul float %590, %592\l  %594 = tail call float @llvm.fmuladd.f32(float %588, float %593, float %588)\l  %595 = tail call float @llvm.fmuladd.f32(float %590, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %596 = tail call float @llvm.fmuladd.f32(float %590, float %595, float\l... 0x3FA5557EE0000000)\l  %597 = tail call float @llvm.fmuladd.f32(float %590, float %596, float\l... 0xBFE0000080000000)\l  %598 = tail call float @llvm.fmuladd.f32(float %590, float %597, float\l... 1.000000e+00)\l  %599 = fneg float %594\l  %600 = and i32 %589, 1\l  %601 = icmp eq i32 %600, 0\l  %602 = select i1 %601, float %598, float %599\l  %603 = bitcast float %602 to i32\l  %604 = shl i32 %589, 30\l  %605 = and i32 %604, -2147483648\l  %606 = xor i32 %605, %603\l  %607 = bitcast i32 %606 to float\l  %608 = select i1 %302, float %607, float 0x7FF8000000000000\l  %609 = bitcast float %166 to i32\l  br label %735\l}"];
	Node0x56dea50 -> Node0x56e00c0;
	Node0x56deaa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%610:\l610:                                              \l  %611 = bitcast float %166 to i32\l  %612 = lshr i32 %611, 23\l  %613 = and i32 %611, 8388607\l  %614 = or i32 %613, 8388608\l  %615 = zext i32 %614 to i64\l  %616 = mul nuw nsw i64 %615, 4266746795\l  %617 = trunc i64 %616 to i32\l  %618 = lshr i64 %616, 32\l  %619 = mul nuw nsw i64 %615, 1011060801\l  %620 = add nuw nsw i64 %618, %619\l  %621 = trunc i64 %620 to i32\l  %622 = lshr i64 %620, 32\l  %623 = mul nuw nsw i64 %615, 3680671129\l  %624 = add nuw nsw i64 %622, %623\l  %625 = trunc i64 %624 to i32\l  %626 = lshr i64 %624, 32\l  %627 = mul nuw nsw i64 %615, 4113882560\l  %628 = add nuw nsw i64 %626, %627\l  %629 = trunc i64 %628 to i32\l  %630 = lshr i64 %628, 32\l  %631 = mul nuw nsw i64 %615, 4230436817\l  %632 = add nuw nsw i64 %630, %631\l  %633 = trunc i64 %632 to i32\l  %634 = lshr i64 %632, 32\l  %635 = mul nuw nsw i64 %615, 1313084713\l  %636 = add nuw nsw i64 %634, %635\l  %637 = trunc i64 %636 to i32\l  %638 = lshr i64 %636, 32\l  %639 = mul nuw nsw i64 %615, 2734261102\l  %640 = add nuw nsw i64 %638, %639\l  %641 = trunc i64 %640 to i32\l  %642 = lshr i64 %640, 32\l  %643 = trunc i64 %642 to i32\l  %644 = add nsw i32 %612, -120\l  %645 = icmp ugt i32 %644, 63\l  %646 = select i1 %645, i32 %637, i32 %643\l  %647 = select i1 %645, i32 %633, i32 %641\l  %648 = select i1 %645, i32 %629, i32 %637\l  %649 = select i1 %645, i32 %625, i32 %633\l  %650 = select i1 %645, i32 %621, i32 %629\l  %651 = select i1 %645, i32 %617, i32 %625\l  %652 = select i1 %645, i32 -64, i32 0\l  %653 = add nsw i32 %652, %644\l  %654 = icmp ugt i32 %653, 31\l  %655 = select i1 %654, i32 %647, i32 %646\l  %656 = select i1 %654, i32 %648, i32 %647\l  %657 = select i1 %654, i32 %649, i32 %648\l  %658 = select i1 %654, i32 %650, i32 %649\l  %659 = select i1 %654, i32 %651, i32 %650\l  %660 = select i1 %654, i32 -32, i32 0\l  %661 = add nsw i32 %660, %653\l  %662 = icmp ugt i32 %661, 31\l  %663 = select i1 %662, i32 %656, i32 %655\l  %664 = select i1 %662, i32 %657, i32 %656\l  %665 = select i1 %662, i32 %658, i32 %657\l  %666 = select i1 %662, i32 %659, i32 %658\l  %667 = select i1 %662, i32 -32, i32 0\l  %668 = add nsw i32 %667, %661\l  %669 = icmp eq i32 %668, 0\l  %670 = sub nsw i32 32, %668\l  %671 = tail call i32 @llvm.fshr.i32(i32 %663, i32 %664, i32 %670)\l  %672 = tail call i32 @llvm.fshr.i32(i32 %664, i32 %665, i32 %670)\l  %673 = tail call i32 @llvm.fshr.i32(i32 %665, i32 %666, i32 %670)\l  %674 = select i1 %669, i32 %663, i32 %671\l  %675 = select i1 %669, i32 %664, i32 %672\l  %676 = select i1 %669, i32 %665, i32 %673\l  %677 = lshr i32 %674, 29\l  %678 = tail call i32 @llvm.fshl.i32(i32 %674, i32 %675, i32 2)\l  %679 = tail call i32 @llvm.fshl.i32(i32 %675, i32 %676, i32 2)\l  %680 = tail call i32 @llvm.fshl.i32(i32 %676, i32 %666, i32 2)\l  %681 = and i32 %677, 1\l  %682 = sub nsw i32 0, %681\l  %683 = shl i32 %677, 31\l  %684 = xor i32 %678, %682\l  %685 = xor i32 %679, %682\l  %686 = xor i32 %680, %682\l  %687 = tail call i32 @llvm.ctlz.i32(i32 %684, i1 false), !range !11\l  %688 = sub nsw i32 31, %687\l  %689 = tail call i32 @llvm.fshr.i32(i32 %684, i32 %685, i32 %688)\l  %690 = tail call i32 @llvm.fshr.i32(i32 %685, i32 %686, i32 %688)\l  %691 = shl nuw nsw i32 %687, 23\l  %692 = sub nuw nsw i32 1056964608, %691\l  %693 = lshr i32 %689, 9\l  %694 = or i32 %693, %692\l  %695 = or i32 %694, %683\l  %696 = bitcast i32 %695 to float\l  %697 = tail call i32 @llvm.fshl.i32(i32 %689, i32 %690, i32 23)\l  %698 = tail call i32 @llvm.ctlz.i32(i32 %697, i1 false), !range !11\l  %699 = fmul float %696, 0x3FF921FB40000000\l  %700 = add nuw nsw i32 %698, %687\l  %701 = shl nuw nsw i32 %700, 23\l  %702 = sub nuw nsw i32 855638016, %701\l  %703 = sub nsw i32 31, %698\l  %704 = tail call i32 @llvm.fshr.i32(i32 %697, i32 %690, i32 %703)\l  %705 = lshr i32 %704, 9\l  %706 = or i32 %702, %705\l  %707 = or i32 %706, %683\l  %708 = bitcast i32 %707 to float\l  %709 = fneg float %699\l  %710 = tail call float @llvm.fma.f32(float %696, float 0x3FF921FB40000000,\l... float %709)\l  %711 = tail call float @llvm.fma.f32(float %696, float 0x3E74442D00000000,\l... float %710)\l  %712 = tail call float @llvm.fma.f32(float %708, float 0x3FF921FB40000000,\l... float %711)\l  %713 = fadd float %699, %712\l  %714 = lshr i32 %674, 30\l  %715 = add nuw nsw i32 %681, %714\l  %716 = fmul float %713, %713\l  %717 = tail call float @llvm.fmuladd.f32(float %716, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %718 = tail call float @llvm.fmuladd.f32(float %716, float %717, float\l... 0xBFC55553A0000000)\l  %719 = fmul float %716, %718\l  %720 = tail call float @llvm.fmuladd.f32(float %713, float %719, float %713)\l  %721 = tail call float @llvm.fmuladd.f32(float %716, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %722 = tail call float @llvm.fmuladd.f32(float %716, float %721, float\l... 0x3FA5557EE0000000)\l  %723 = tail call float @llvm.fmuladd.f32(float %716, float %722, float\l... 0xBFE0000080000000)\l  %724 = tail call float @llvm.fmuladd.f32(float %716, float %723, float\l... 1.000000e+00)\l  %725 = fneg float %720\l  %726 = and i32 %715, 1\l  %727 = icmp eq i32 %726, 0\l  %728 = select i1 %727, float %724, float %725\l  %729 = bitcast float %728 to i32\l  %730 = shl i32 %715, 30\l  %731 = and i32 %730, -2147483648\l  %732 = xor i32 %731, %729\l  %733 = bitcast i32 %732 to float\l  %734 = select i1 %302, float %733, float 0x7FF8000000000000\l  br label %735\l}"];
	Node0x56deaa0 -> Node0x56e00c0;
	Node0x56e00c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%735:\l735:                                              \l  %736 = phi i32 [ %605, %583 ], [ %731, %610 ]\l  %737 = phi i32 [ %600, %583 ], [ %726, %610 ]\l  %738 = phi float [ %598, %583 ], [ %724, %610 ]\l  %739 = phi float [ %594, %583 ], [ %720, %610 ]\l  %740 = phi float [ %608, %583 ], [ %734, %610 ]\l  %741 = phi i32 [ %609, %583 ], [ %611, %610 ]\l  %742 = icmp eq i32 %737, 0\l  %743 = select i1 %742, float %739, float %738\l  %744 = bitcast float %743 to i32\l  %745 = xor i32 %741, %736\l  %746 = xor i32 %745, %744\l  %747 = xor i32 %746, %573\l  %748 = bitcast i32 %747 to float\l  %749 = fmul contract float %748, 0x3FFBB67AE0000000\l  %750 = select i1 %302, float %749, float 0x7FF8000000000000\l  %751 = fsub contract float %740, %750\l  %752 = fmul contract float %164, %751\l  %753 = fsub contract float %61, %752\l  %754 = fcmp contract ogt float %305, %582\l  %755 = fcmp contract ogt float %305, %753\l  %756 = and i1 %754, %755\l  br i1 %756, label %757, label %761\l|{<s0>T|<s1>F}}"];
	Node0x56e00c0:s0 -> Node0x56e62a0;
	Node0x56e00c0:s1 -> Node0x56e62f0;
	Node0x56e62a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%757:\l757:                                              \l  %758 = fmul contract float %305, %9\l  %759 = fmul contract float %758, %9\l  %760 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  store float %759, float addrspace(1)* %760, align 4, !tbaa !7\l  br label %761\l}"];
	Node0x56e62a0 -> Node0x56e62f0;
	Node0x56e62f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%761:\l761:                                              \l  %762 = fcmp contract ogt float %582, %305\l  %763 = fcmp contract ogt float %582, %753\l  %764 = and i1 %762, %763\l  br i1 %764, label %765, label %769\l|{<s0>T|<s1>F}}"];
	Node0x56e62f0:s0 -> Node0x56e6860;
	Node0x56e62f0:s1 -> Node0x56e68b0;
	Node0x56e6860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%765:\l765:                                              \l  %766 = fmul contract float %582, %9\l  %767 = fmul contract float %766, %9\l  %768 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  store float %767, float addrspace(1)* %768, align 4, !tbaa !7\l  br label %769\l}"];
	Node0x56e6860 -> Node0x56e68b0;
	Node0x56e68b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%769:\l769:                                              \l  %770 = fcmp contract ogt float %753, %582\l  %771 = fcmp contract ogt float %753, %305\l  %772 = and i1 %770, %771\l  br i1 %772, label %776, label %773\l|{<s0>T|<s1>F}}"];
	Node0x56e68b0:s0 -> Node0x56e6e20;
	Node0x56e68b0:s1 -> Node0x56e6e70;
	Node0x56e6e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%773:\l773:                                              \l  %774 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %775 = load float, float addrspace(1)* %774, align 4, !tbaa !7\l  br label %780\l}"];
	Node0x56e6e70 -> Node0x56e7080;
	Node0x56e6e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%776:\l776:                                              \l  %777 = fmul contract float %753, %9\l  %778 = fmul contract float %777, %9\l  %779 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  store float %778, float addrspace(1)* %779, align 4, !tbaa !7\l  br label %780\l}"];
	Node0x56e6e20 -> Node0x56e7080;
	Node0x56e7080 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%780:\l780:                                              \l  %781 = phi float [ %775, %773 ], [ %778, %776 ]\l  %782 = fmul contract float %9, %9\l  %783 = fdiv contract float %781, %782\l  %784 = fsub contract float %44, %783\l  %785 = fsub contract float %52, %783\l  %786 = fmul contract float %48, %785\l  %787 = fadd contract float %70, %786\l  %788 = fmul contract float %784, %55\l  %789 = fsub contract float %788, %76\l  %790 = fmul contract float %785, %784\l  %791 = fsub contract float %790, %73\l  %792 = fmul contract float %787, %787\l  %793 = fmul contract float %789, %789\l  %794 = fadd contract float %792, %793\l  %795 = fmul contract float %791, %791\l  %796 = fadd contract float %795, %794\l  %797 = fcmp olt float %796, 0x39F0000000000000\l  %798 = select i1 %797, float 0x41F0000000000000, float 1.000000e+00\l  %799 = fmul float %796, %798\l  %800 = tail call float @llvm.sqrt.f32(float %799)\l  %801 = bitcast float %800 to i32\l  %802 = add nsw i32 %801, -1\l  %803 = bitcast i32 %802 to float\l  %804 = add nsw i32 %801, 1\l  %805 = bitcast i32 %804 to float\l  %806 = tail call i1 @llvm.amdgcn.class.f32(float %799, i32 608)\l  %807 = select i1 %797, float 0x3EF0000000000000, float 1.000000e+00\l  %808 = fneg float %805\l  %809 = tail call float @llvm.fma.f32(float %808, float %800, float %799)\l  %810 = fcmp ogt float %809, 0.000000e+00\l  %811 = fneg float %803\l  %812 = tail call float @llvm.fma.f32(float %811, float %800, float %799)\l  %813 = fcmp ole float %812, 0.000000e+00\l  %814 = select i1 %813, float %803, float %800\l  %815 = select i1 %810, float %805, float %814\l  %816 = fmul float %807, %815\l  %817 = select i1 %806, float %799, float %816\l  %818 = tail call float @llvm.fabs.f32(float %787)\l  %819 = tail call float @llvm.fabs.f32(float %789)\l  %820 = tail call float @llvm.minnum.f32(float %818, float %819)\l  %821 = tail call float @llvm.maxnum.f32(float %818, float %819)\l  %822 = fdiv float %820, %821, !fpmath !12\l  %823 = fmul float %822, %822\l  %824 = tail call float @llvm.fmuladd.f32(float %823, float\l... 0x3F65A54B00000000, float 0xBF8F4B2180000000)\l  %825 = tail call float @llvm.fmuladd.f32(float %823, float %824, float\l... 0x3FA53F67E0000000)\l  %826 = tail call float @llvm.fmuladd.f32(float %823, float %825, float\l... 0xBFB2FA9AE0000000)\l  %827 = tail call float @llvm.fmuladd.f32(float %823, float %826, float\l... 0x3FBB263640000000)\l  %828 = tail call float @llvm.fmuladd.f32(float %823, float %827, float\l... 0xBFC22C1CC0000000)\l  %829 = tail call float @llvm.fmuladd.f32(float %823, float %828, float\l... 0x3FC99717E0000000)\l  %830 = tail call float @llvm.fmuladd.f32(float %823, float %829, float\l... 0xBFD5554C40000000)\l  %831 = fmul float %823, %830\l  %832 = tail call float @llvm.fmuladd.f32(float %822, float %831, float %822)\l  %833 = fsub float 0x3FF921FB60000000, %832\l  %834 = fcmp ogt float %819, %818\l  %835 = select i1 %834, float %833, float %832\l  %836 = fcmp olt float %787, 0.000000e+00\l  %837 = fcmp contract ogt float %817, 0x3EB0C6F7A0000000\l  br i1 %837, label %838, label %860\l|{<s0>T|<s1>F}}"];
	Node0x56e7080:s0 -> Node0x56ea0d0;
	Node0x56e7080:s1 -> Node0x56ea160;
	Node0x56ea0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%838:\l838:                                              \l  %839 = fdiv contract float %791, %817\l  %840 = tail call float @llvm.fabs.f32(float %839)\l  %841 = tail call float @llvm.fmuladd.f32(float %840, float -5.000000e-01,\l... float 5.000000e-01)\l  %842 = fmul float %839, %839\l  %843 = fcmp ogt float %840, 5.000000e-01\l  %844 = select i1 %843, float %841, float %842\l  %845 = tail call float @llvm.fmuladd.f32(float %844, float\l... 0x3FA38434E0000000, float 0x3F8BF8BB40000000)\l  %846 = tail call float @llvm.fmuladd.f32(float %844, float %845, float\l... 0x3FA0698780000000)\l  %847 = tail call float @llvm.fmuladd.f32(float %844, float %846, float\l... 0x3FA6C83620000000)\l  %848 = tail call float @llvm.fmuladd.f32(float %844, float %847, float\l... 0x3FB3337900000000)\l  %849 = tail call float @llvm.fmuladd.f32(float %844, float %848, float\l... 0x3FC5555580000000)\l  %850 = fmul float %844, %849\l  %851 = tail call float @llvm.sqrt.f32(float %844)\l  %852 = tail call float @llvm.fmuladd.f32(float %851, float %850, float %851)\l  %853 = fmul float %852, 2.000000e+00\l  %854 = fsub float 0x400921FB60000000, %853\l  %855 = fcmp olt float %839, 0.000000e+00\l  %856 = select i1 %855, float %854, float %853\l  %857 = tail call float @llvm.fmuladd.f32(float %839, float %850, float %839)\l  %858 = fsub float 0x3FF921FB60000000, %857\l  %859 = select i1 %843, float %856, float %858\l  br label %860\l}"];
	Node0x56ea0d0 -> Node0x56ea160;
	Node0x56ea160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%860:\l860:                                              \l  %861 = phi float [ %859, %838 ], [ 0.000000e+00, %780 ]\l  %862 = fcmp uno float %787, %789\l  %863 = fcmp oeq float %819, 0x7FF0000000000000\l  %864 = fcmp oeq float %818, 0x7FF0000000000000\l  %865 = and i1 %863, %864\l  %866 = select i1 %836, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %867 = fcmp oeq float %789, 0.000000e+00\l  %868 = bitcast float %787 to i32\l  %869 = icmp slt i32 %868, 0\l  %870 = select i1 %869, float 0x400921FB60000000, float 0.000000e+00\l  %871 = fsub float 0x400921FB60000000, %835\l  %872 = select i1 %836, float %871, float %835\l  %873 = select i1 %867, float %870, float %872\l  %874 = select i1 %865, float %866, float %873\l  %875 = select i1 %862, float 0x7FF8000000000000, float %874\l  %876 = tail call float @llvm.copysign.f32(float %875, float %789)\l  %877 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  store float %876, float addrspace(1)* %877, align 4, !tbaa !7\l  %878 = getelementptr inbounds float, float addrspace(1)* %2, i64 %41\l  store float %861, float addrspace(1)* %878, align 4, !tbaa !7\l  ret void\l}"];
}
