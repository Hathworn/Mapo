digraph "CFG for '_Z15matrix_mult_kerPfS_S_i' function" {
	label="CFG for '_Z15matrix_mult_kerPfS_S_i' function";

	Node0x4d05b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %3, 0\l  %23 = mul nsw i32 %13, %3\l  br i1 %22, label %24, label %154\l|{<s0>T|<s1>F}}"];
	Node0x4d05b30:s0 -> Node0x4d09520;
	Node0x4d05b30:s1 -> Node0x4d095b0;
	Node0x4d09520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = and i32 %3, 7\l  %26 = icmp ult i32 %3, 8\l  br i1 %26, label %131, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4d09520:s0 -> Node0x4d09870;
	Node0x4d09520:s1 -> Node0x4d098c0;
	Node0x4d098c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %3, -8\l  br label %29\l}"];
	Node0x4d098c0 -> Node0x4d09ac0;
	Node0x4d09ac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %27 ], [ %128, %29 ]\l  %31 = phi float [ 0.000000e+00, %27 ], [ %127, %29 ]\l  %32 = phi i32 [ 0, %27 ], [ %129, %29 ]\l  %33 = add nsw i32 %30, %23\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = mul nsw i32 %30, %3\l  %38 = add nsw i32 %37, %21\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fmul contract float %36, %41\l  %43 = fadd contract float %31, %42\l  %44 = or i32 %30, 1\l  %45 = add nsw i32 %44, %23\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = mul nsw i32 %44, %3\l  %50 = add nsw i32 %49, %21\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = fmul contract float %48, %53\l  %55 = fadd contract float %43, %54\l  %56 = or i32 %30, 2\l  %57 = add nsw i32 %56, %23\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = mul nsw i32 %56, %3\l  %62 = add nsw i32 %61, %21\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = fmul contract float %60, %65\l  %67 = fadd contract float %55, %66\l  %68 = or i32 %30, 3\l  %69 = add nsw i32 %68, %23\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = mul nsw i32 %68, %3\l  %74 = add nsw i32 %73, %21\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fmul contract float %72, %77\l  %79 = fadd contract float %67, %78\l  %80 = or i32 %30, 4\l  %81 = add nsw i32 %80, %23\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = mul nsw i32 %80, %3\l  %86 = add nsw i32 %85, %21\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = fmul contract float %84, %89\l  %91 = fadd contract float %79, %90\l  %92 = or i32 %30, 5\l  %93 = add nsw i32 %92, %23\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = mul nsw i32 %92, %3\l  %98 = add nsw i32 %97, %21\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fmul contract float %96, %101\l  %103 = fadd contract float %91, %102\l  %104 = or i32 %30, 6\l  %105 = add nsw i32 %104, %23\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = mul nsw i32 %104, %3\l  %110 = add nsw i32 %109, %21\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %114 = fmul contract float %108, %113\l  %115 = fadd contract float %103, %114\l  %116 = or i32 %30, 7\l  %117 = add nsw i32 %116, %23\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %121 = mul nsw i32 %116, %3\l  %122 = add nsw i32 %121, %21\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %120, %125\l  %127 = fadd contract float %115, %126\l  %128 = add nuw nsw i32 %30, 8\l  %129 = add i32 %32, 8\l  %130 = icmp eq i32 %129, %28\l  br i1 %130, label %131, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4d09ac0:s0 -> Node0x4d09870;
	Node0x4d09ac0:s1 -> Node0x4d09ac0;
	Node0x4d09870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%131:\l131:                                              \l  %132 = phi float [ undef, %24 ], [ %127, %29 ]\l  %133 = phi i32 [ 0, %24 ], [ %128, %29 ]\l  %134 = phi float [ 0.000000e+00, %24 ], [ %127, %29 ]\l  %135 = icmp eq i32 %25, 0\l  br i1 %135, label %154, label %136\l|{<s0>T|<s1>F}}"];
	Node0x4d09870:s0 -> Node0x4d095b0;
	Node0x4d09870:s1 -> Node0x4d0f8f0;
	Node0x4d0f8f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%136:\l136:                                              \l  %137 = phi i32 [ %151, %136 ], [ %133, %131 ]\l  %138 = phi float [ %150, %136 ], [ %134, %131 ]\l  %139 = phi i32 [ %152, %136 ], [ 0, %131 ]\l  %140 = add nsw i32 %137, %23\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = mul nsw i32 %137, %3\l  %145 = add nsw i32 %144, %21\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %1, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = fmul contract float %143, %148\l  %150 = fadd contract float %138, %149\l  %151 = add nuw nsw i32 %137, 1\l  %152 = add i32 %139, 1\l  %153 = icmp eq i32 %152, %25\l  br i1 %153, label %154, label %136, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4d0f8f0:s0 -> Node0x4d095b0;
	Node0x4d0f8f0:s1 -> Node0x4d0f8f0;
	Node0x4d095b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%154:\l154:                                              \l  %155 = phi float [ 0.000000e+00, %4 ], [ %132, %131 ], [ %150, %136 ]\l  %156 = add nsw i32 %21, %23\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %2, i64 %157\l  store float %155, float addrspace(1)* %158, align 4, !tbaa !7\l  ret void\l}"];
}
