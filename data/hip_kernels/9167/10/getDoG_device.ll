; ModuleID = '../data/hip_kernels/9167/10/main.cu'
source_filename = "../data/hip_kernels/9167/10/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

@_ZZ6getDoGPdddE2g1 = internal unnamed_addr addrspace(3) global [900 x double] undef, align 16
@_ZZ6getDoGPdddE2g2 = internal unnamed_addr addrspace(3) global [900 x double] undef, align 16

; Function Attrs: convergent mustprogress norecurse nounwind
define protected amdgpu_kernel void @_Z6getDoGPddd(double addrspace(1)* nocapture writeonly %0, double %1, double %2) local_unnamed_addr #0 {
  %4 = fmul contract double %1, 3.000000e+00
  %5 = tail call double @llvm.ceil.f64(double %4)
  %6 = fmul contract double %5, 2.000000e+00
  %7 = fadd contract double %6, 1.000000e+00
  %8 = fptosi double %7 to i32
  %9 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4
  %10 = mul i32 %9, %8
  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %12 = add i32 %10, %11
  %13 = mul nsw i32 %8, %8
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %902

15:                                               ; preds = %3
  %16 = sdiv i32 %8, 2
  %17 = sub nsw i32 %11, %16
  %18 = tail call i32 @llvm.abs.i32(i32 %17, i1 true)
  %19 = sub nsw i32 %9, %16
  %20 = tail call i32 @llvm.abs.i32(i32 %19, i1 true)
  %21 = sitofp i32 %18 to double
  %22 = tail call double @llvm.fabs.f64(double %21)
  %23 = tail call double @llvm.amdgcn.frexp.mant.f64(double %22)
  %24 = fcmp olt double %23, 0x3FE5555555555555
  %25 = zext i1 %24 to i32
  %26 = tail call double @llvm.amdgcn.ldexp.f64(double %23, i32 %25)
  %27 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %22)
  %28 = sub nsw i32 %27, %25
  %29 = fadd double %26, -1.000000e+00
  %30 = fadd double %26, 1.000000e+00
  %31 = fadd double %30, -1.000000e+00
  %32 = fsub double %26, %31
  %33 = tail call double @llvm.amdgcn.rcp.f64(double %30)
  %34 = fneg double %30
  %35 = tail call double @llvm.fma.f64(double %34, double %33, double 1.000000e+00)
  %36 = tail call double @llvm.fma.f64(double %35, double %33, double %33)
  %37 = tail call double @llvm.fma.f64(double %34, double %36, double 1.000000e+00)
  %38 = tail call double @llvm.fma.f64(double %37, double %36, double %36)
  %39 = fmul double %29, %38
  %40 = fmul double %30, %39
  %41 = fneg double %40
  %42 = tail call double @llvm.fma.f64(double %39, double %30, double %41)
  %43 = tail call double @llvm.fma.f64(double %39, double %32, double %42)
  %44 = fadd double %40, %43
  %45 = fsub double %44, %40
  %46 = fsub double %43, %45
  %47 = fsub double %29, %44
  %48 = fsub double %29, %47
  %49 = fsub double %48, %44
  %50 = fsub double %49, %46
  %51 = fadd double %47, %50
  %52 = fmul double %38, %51
  %53 = fadd double %39, %52
  %54 = fsub double %53, %39
  %55 = fsub double %52, %54
  %56 = fmul double %53, %53
  %57 = fneg double %56
  %58 = tail call double @llvm.fma.f64(double %53, double %53, double %57)
  %59 = fmul double %55, 2.000000e+00
  %60 = tail call double @llvm.fma.f64(double %53, double %59, double %58)
  %61 = fadd double %56, %60
  %62 = fsub double %61, %56
  %63 = fsub double %60, %62
  %64 = tail call double @llvm.fma.f64(double %61, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %65 = tail call double @llvm.fma.f64(double %61, double %64, double 0x3FBE25E43ABE935A)
  %66 = tail call double @llvm.fma.f64(double %61, double %65, double 0x3FC110EF47E6C9C2)
  %67 = tail call double @llvm.fma.f64(double %61, double %66, double 0x3FC3B13BCFA74449)
  %68 = tail call double @llvm.fma.f64(double %61, double %67, double 0x3FC745D171BF3C30)
  %69 = tail call double @llvm.fma.f64(double %61, double %68, double 0x3FCC71C71C7792CE)
  %70 = tail call double @llvm.fma.f64(double %61, double %69, double 0x3FD24924924920DA)
  %71 = tail call double @llvm.fma.f64(double %61, double %70, double 0x3FD999999999999C)
  %72 = sitofp i32 %28 to double
  %73 = fmul double %72, 0x3FE62E42FEFA39EF
  %74 = fneg double %73
  %75 = tail call double @llvm.fma.f64(double %72, double 0x3FE62E42FEFA39EF, double %74)
  %76 = tail call double @llvm.fma.f64(double %72, double 0x3C7ABC9E3B39803F, double %75)
  %77 = fadd double %73, %76
  %78 = fsub double %77, %73
  %79 = fsub double %76, %78
  %80 = tail call double @llvm.amdgcn.ldexp.f64(double %53, i32 1)
  %81 = tail call double @llvm.amdgcn.ldexp.f64(double %55, i32 1)
  %82 = fmul double %53, %61
  %83 = fneg double %82
  %84 = tail call double @llvm.fma.f64(double %61, double %53, double %83)
  %85 = tail call double @llvm.fma.f64(double %61, double %55, double %84)
  %86 = tail call double @llvm.fma.f64(double %63, double %53, double %85)
  %87 = fadd double %82, %86
  %88 = fsub double %87, %82
  %89 = fsub double %86, %88
  %90 = fmul double %61, %71
  %91 = fneg double %90
  %92 = tail call double @llvm.fma.f64(double %61, double %71, double %91)
  %93 = tail call double @llvm.fma.f64(double %63, double %71, double %92)
  %94 = fadd double %90, %93
  %95 = fsub double %94, %90
  %96 = fsub double %93, %95
  %97 = fadd double %94, 0x3FE5555555555555
  %98 = fadd double %97, 0xBFE5555555555555
  %99 = fsub double %94, %98
  %100 = fadd double %96, 0x3C8543B0D5DF274D
  %101 = fadd double %100, %99
  %102 = fadd double %97, %101
  %103 = fsub double %102, %97
  %104 = fsub double %101, %103
  %105 = fmul double %87, %102
  %106 = fneg double %105
  %107 = tail call double @llvm.fma.f64(double %87, double %102, double %106)
  %108 = tail call double @llvm.fma.f64(double %87, double %104, double %107)
  %109 = tail call double @llvm.fma.f64(double %89, double %102, double %108)
  %110 = fadd double %105, %109
  %111 = fsub double %110, %105
  %112 = fsub double %109, %111
  %113 = fadd double %80, %110
  %114 = fsub double %113, %80
  %115 = fsub double %110, %114
  %116 = fadd double %81, %112
  %117 = fadd double %116, %115
  %118 = fadd double %113, %117
  %119 = fsub double %118, %113
  %120 = fsub double %117, %119
  %121 = fadd double %77, %118
  %122 = fsub double %121, %77
  %123 = fsub double %121, %122
  %124 = fsub double %77, %123
  %125 = fsub double %118, %122
  %126 = fadd double %125, %124
  %127 = fadd double %79, %120
  %128 = fsub double %127, %79
  %129 = fsub double %127, %128
  %130 = fsub double %79, %129
  %131 = fsub double %120, %128
  %132 = fadd double %131, %130
  %133 = fadd double %127, %126
  %134 = fadd double %121, %133
  %135 = fsub double %134, %121
  %136 = fsub double %133, %135
  %137 = fadd double %132, %136
  %138 = fadd double %134, %137
  %139 = fsub double %138, %134
  %140 = fsub double %137, %139
  %141 = fmul double %138, 2.000000e+00
  %142 = fneg double %141
  %143 = tail call double @llvm.fma.f64(double %138, double 2.000000e+00, double %142)
  %144 = tail call double @llvm.fma.f64(double %140, double 2.000000e+00, double %143)
  %145 = fadd double %141, %144
  %146 = fsub double %145, %141
  %147 = fsub double %144, %146
  %148 = tail call double @llvm.fabs.f64(double %141) #5
  %149 = fcmp oeq double %148, 0x7FF0000000000000
  %150 = select i1 %149, double %141, double %145
  %151 = tail call double @llvm.fabs.f64(double %150) #5
  %152 = fcmp oeq double %151, 0x7FF0000000000000
  %153 = select i1 %152, double 0.000000e+00, double %147
  %154 = fmul double %150, 0x3FF71547652B82FE
  %155 = tail call double @llvm.rint.f64(double %154)
  %156 = fneg double %155
  %157 = tail call double @llvm.fma.f64(double %156, double 0x3FE62E42FEFA39EF, double %150)
  %158 = tail call double @llvm.fma.f64(double %156, double 0x3C7ABC9E3B39803F, double %157)
  %159 = tail call double @llvm.fma.f64(double %158, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %160 = tail call double @llvm.fma.f64(double %158, double %159, double 0x3EC71DEE623FDE64)
  %161 = tail call double @llvm.fma.f64(double %158, double %160, double 0x3EFA01997C89E6B0)
  %162 = tail call double @llvm.fma.f64(double %158, double %161, double 0x3F2A01A014761F6E)
  %163 = tail call double @llvm.fma.f64(double %158, double %162, double 0x3F56C16C1852B7B0)
  %164 = tail call double @llvm.fma.f64(double %158, double %163, double 0x3F81111111122322)
  %165 = tail call double @llvm.fma.f64(double %158, double %164, double 0x3FA55555555502A1)
  %166 = tail call double @llvm.fma.f64(double %158, double %165, double 0x3FC5555555555511)
  %167 = tail call double @llvm.fma.f64(double %158, double %166, double 0x3FE000000000000B)
  %168 = tail call double @llvm.fma.f64(double %158, double %167, double 1.000000e+00)
  %169 = tail call double @llvm.fma.f64(double %158, double %168, double 1.000000e+00)
  %170 = fptosi double %155 to i32
  %171 = tail call double @llvm.amdgcn.ldexp.f64(double %169, i32 %170)
  %172 = fcmp ogt double %150, 1.024000e+03
  %173 = select i1 %172, double 0x7FF0000000000000, double %171
  %174 = fcmp olt double %150, -1.075000e+03
  %175 = select i1 %174, double 0.000000e+00, double %173
  %176 = tail call double @llvm.fma.f64(double %175, double %153, double %175)
  %177 = tail call double @llvm.fabs.f64(double %175) #5
  %178 = fcmp oeq double %177, 0x7FF0000000000000
  %179 = select i1 %178, double %175, double %176
  %180 = tail call double @llvm.fabs.f64(double %179)
  %181 = fcmp oeq double %22, 0x7FF0000000000000
  %182 = icmp eq i32 %11, %16
  %183 = select i1 %181, double 0x7FF0000000000000, double %180
  %184 = select i1 %182, double 0.000000e+00, double %183
  %185 = icmp eq i32 %18, 1
  %186 = select i1 %185, double 1.000000e+00, double %184
  %187 = sitofp i32 %20 to double
  %188 = tail call double @llvm.fabs.f64(double %187)
  %189 = tail call double @llvm.amdgcn.frexp.mant.f64(double %188)
  %190 = fcmp olt double %189, 0x3FE5555555555555
  %191 = zext i1 %190 to i32
  %192 = tail call double @llvm.amdgcn.ldexp.f64(double %189, i32 %191)
  %193 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %188)
  %194 = sub nsw i32 %193, %191
  %195 = fadd double %192, -1.000000e+00
  %196 = fadd double %192, 1.000000e+00
  %197 = fadd double %196, -1.000000e+00
  %198 = fsub double %192, %197
  %199 = tail call double @llvm.amdgcn.rcp.f64(double %196)
  %200 = fneg double %196
  %201 = tail call double @llvm.fma.f64(double %200, double %199, double 1.000000e+00)
  %202 = tail call double @llvm.fma.f64(double %201, double %199, double %199)
  %203 = tail call double @llvm.fma.f64(double %200, double %202, double 1.000000e+00)
  %204 = tail call double @llvm.fma.f64(double %203, double %202, double %202)
  %205 = fmul double %195, %204
  %206 = fmul double %196, %205
  %207 = fneg double %206
  %208 = tail call double @llvm.fma.f64(double %205, double %196, double %207)
  %209 = tail call double @llvm.fma.f64(double %205, double %198, double %208)
  %210 = fadd double %206, %209
  %211 = fsub double %210, %206
  %212 = fsub double %209, %211
  %213 = fsub double %195, %210
  %214 = fsub double %195, %213
  %215 = fsub double %214, %210
  %216 = fsub double %215, %212
  %217 = fadd double %213, %216
  %218 = fmul double %204, %217
  %219 = fadd double %205, %218
  %220 = fsub double %219, %205
  %221 = fsub double %218, %220
  %222 = fmul double %219, %219
  %223 = fneg double %222
  %224 = tail call double @llvm.fma.f64(double %219, double %219, double %223)
  %225 = fmul double %221, 2.000000e+00
  %226 = tail call double @llvm.fma.f64(double %219, double %225, double %224)
  %227 = fadd double %222, %226
  %228 = fsub double %227, %222
  %229 = fsub double %226, %228
  %230 = tail call double @llvm.fma.f64(double %227, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %231 = tail call double @llvm.fma.f64(double %227, double %230, double 0x3FBE25E43ABE935A)
  %232 = tail call double @llvm.fma.f64(double %227, double %231, double 0x3FC110EF47E6C9C2)
  %233 = tail call double @llvm.fma.f64(double %227, double %232, double 0x3FC3B13BCFA74449)
  %234 = tail call double @llvm.fma.f64(double %227, double %233, double 0x3FC745D171BF3C30)
  %235 = tail call double @llvm.fma.f64(double %227, double %234, double 0x3FCC71C71C7792CE)
  %236 = tail call double @llvm.fma.f64(double %227, double %235, double 0x3FD24924924920DA)
  %237 = tail call double @llvm.fma.f64(double %227, double %236, double 0x3FD999999999999C)
  %238 = sitofp i32 %194 to double
  %239 = fmul double %238, 0x3FE62E42FEFA39EF
  %240 = fneg double %239
  %241 = tail call double @llvm.fma.f64(double %238, double 0x3FE62E42FEFA39EF, double %240)
  %242 = tail call double @llvm.fma.f64(double %238, double 0x3C7ABC9E3B39803F, double %241)
  %243 = fadd double %239, %242
  %244 = fsub double %243, %239
  %245 = fsub double %242, %244
  %246 = tail call double @llvm.amdgcn.ldexp.f64(double %219, i32 1)
  %247 = tail call double @llvm.amdgcn.ldexp.f64(double %221, i32 1)
  %248 = fmul double %219, %227
  %249 = fneg double %248
  %250 = tail call double @llvm.fma.f64(double %227, double %219, double %249)
  %251 = tail call double @llvm.fma.f64(double %227, double %221, double %250)
  %252 = tail call double @llvm.fma.f64(double %229, double %219, double %251)
  %253 = fadd double %248, %252
  %254 = fsub double %253, %248
  %255 = fsub double %252, %254
  %256 = fmul double %227, %237
  %257 = fneg double %256
  %258 = tail call double @llvm.fma.f64(double %227, double %237, double %257)
  %259 = tail call double @llvm.fma.f64(double %229, double %237, double %258)
  %260 = fadd double %256, %259
  %261 = fsub double %260, %256
  %262 = fsub double %259, %261
  %263 = fadd double %260, 0x3FE5555555555555
  %264 = fadd double %263, 0xBFE5555555555555
  %265 = fsub double %260, %264
  %266 = fadd double %262, 0x3C8543B0D5DF274D
  %267 = fadd double %266, %265
  %268 = fadd double %263, %267
  %269 = fsub double %268, %263
  %270 = fsub double %267, %269
  %271 = fmul double %253, %268
  %272 = fneg double %271
  %273 = tail call double @llvm.fma.f64(double %253, double %268, double %272)
  %274 = tail call double @llvm.fma.f64(double %253, double %270, double %273)
  %275 = tail call double @llvm.fma.f64(double %255, double %268, double %274)
  %276 = fadd double %271, %275
  %277 = fsub double %276, %271
  %278 = fsub double %275, %277
  %279 = fadd double %246, %276
  %280 = fsub double %279, %246
  %281 = fsub double %276, %280
  %282 = fadd double %247, %278
  %283 = fadd double %282, %281
  %284 = fadd double %279, %283
  %285 = fsub double %284, %279
  %286 = fsub double %283, %285
  %287 = fadd double %243, %284
  %288 = fsub double %287, %243
  %289 = fsub double %287, %288
  %290 = fsub double %243, %289
  %291 = fsub double %284, %288
  %292 = fadd double %291, %290
  %293 = fadd double %245, %286
  %294 = fsub double %293, %245
  %295 = fsub double %293, %294
  %296 = fsub double %245, %295
  %297 = fsub double %286, %294
  %298 = fadd double %297, %296
  %299 = fadd double %293, %292
  %300 = fadd double %287, %299
  %301 = fsub double %300, %287
  %302 = fsub double %299, %301
  %303 = fadd double %298, %302
  %304 = fadd double %300, %303
  %305 = fsub double %304, %300
  %306 = fsub double %303, %305
  %307 = fmul double %304, 2.000000e+00
  %308 = fneg double %307
  %309 = tail call double @llvm.fma.f64(double %304, double 2.000000e+00, double %308)
  %310 = tail call double @llvm.fma.f64(double %306, double 2.000000e+00, double %309)
  %311 = fadd double %307, %310
  %312 = fsub double %311, %307
  %313 = fsub double %310, %312
  %314 = tail call double @llvm.fabs.f64(double %307) #5
  %315 = fcmp oeq double %314, 0x7FF0000000000000
  %316 = select i1 %315, double %307, double %311
  %317 = tail call double @llvm.fabs.f64(double %316) #5
  %318 = fcmp oeq double %317, 0x7FF0000000000000
  %319 = select i1 %318, double 0.000000e+00, double %313
  %320 = fmul double %316, 0x3FF71547652B82FE
  %321 = tail call double @llvm.rint.f64(double %320)
  %322 = fneg double %321
  %323 = tail call double @llvm.fma.f64(double %322, double 0x3FE62E42FEFA39EF, double %316)
  %324 = tail call double @llvm.fma.f64(double %322, double 0x3C7ABC9E3B39803F, double %323)
  %325 = tail call double @llvm.fma.f64(double %324, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %326 = tail call double @llvm.fma.f64(double %324, double %325, double 0x3EC71DEE623FDE64)
  %327 = tail call double @llvm.fma.f64(double %324, double %326, double 0x3EFA01997C89E6B0)
  %328 = tail call double @llvm.fma.f64(double %324, double %327, double 0x3F2A01A014761F6E)
  %329 = tail call double @llvm.fma.f64(double %324, double %328, double 0x3F56C16C1852B7B0)
  %330 = tail call double @llvm.fma.f64(double %324, double %329, double 0x3F81111111122322)
  %331 = tail call double @llvm.fma.f64(double %324, double %330, double 0x3FA55555555502A1)
  %332 = tail call double @llvm.fma.f64(double %324, double %331, double 0x3FC5555555555511)
  %333 = tail call double @llvm.fma.f64(double %324, double %332, double 0x3FE000000000000B)
  %334 = tail call double @llvm.fma.f64(double %324, double %333, double 1.000000e+00)
  %335 = tail call double @llvm.fma.f64(double %324, double %334, double 1.000000e+00)
  %336 = fptosi double %321 to i32
  %337 = tail call double @llvm.amdgcn.ldexp.f64(double %335, i32 %336)
  %338 = fcmp ogt double %316, 1.024000e+03
  %339 = select i1 %338, double 0x7FF0000000000000, double %337
  %340 = fcmp olt double %316, -1.075000e+03
  %341 = select i1 %340, double 0.000000e+00, double %339
  %342 = tail call double @llvm.fma.f64(double %341, double %319, double %341)
  %343 = tail call double @llvm.fabs.f64(double %341) #5
  %344 = fcmp oeq double %343, 0x7FF0000000000000
  %345 = select i1 %344, double %341, double %342
  %346 = tail call double @llvm.fabs.f64(double %345)
  %347 = fcmp oeq double %188, 0x7FF0000000000000
  %348 = icmp eq i32 %9, %16
  %349 = select i1 %347, double 0x7FF0000000000000, double %346
  %350 = select i1 %348, double 0.000000e+00, double %349
  %351 = icmp eq i32 %20, 1
  %352 = select i1 %351, double 1.000000e+00, double %350
  %353 = fadd contract double %186, %352
  %354 = fneg contract double %353
  %355 = tail call double @llvm.fabs.f64(double %1)
  %356 = tail call double @llvm.amdgcn.frexp.mant.f64(double %355)
  %357 = fcmp olt double %356, 0x3FE5555555555555
  %358 = zext i1 %357 to i32
  %359 = tail call double @llvm.amdgcn.ldexp.f64(double %356, i32 %358)
  %360 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %355)
  %361 = sub nsw i32 %360, %358
  %362 = fadd double %359, -1.000000e+00
  %363 = fadd double %359, 1.000000e+00
  %364 = fadd double %363, -1.000000e+00
  %365 = fsub double %359, %364
  %366 = tail call double @llvm.amdgcn.rcp.f64(double %363)
  %367 = fneg double %363
  %368 = tail call double @llvm.fma.f64(double %367, double %366, double 1.000000e+00)
  %369 = tail call double @llvm.fma.f64(double %368, double %366, double %366)
  %370 = tail call double @llvm.fma.f64(double %367, double %369, double 1.000000e+00)
  %371 = tail call double @llvm.fma.f64(double %370, double %369, double %369)
  %372 = fmul double %362, %371
  %373 = fmul double %363, %372
  %374 = fneg double %373
  %375 = tail call double @llvm.fma.f64(double %372, double %363, double %374)
  %376 = tail call double @llvm.fma.f64(double %372, double %365, double %375)
  %377 = fadd double %373, %376
  %378 = fsub double %377, %373
  %379 = fsub double %376, %378
  %380 = fsub double %362, %377
  %381 = fsub double %362, %380
  %382 = fsub double %381, %377
  %383 = fsub double %382, %379
  %384 = fadd double %380, %383
  %385 = fmul double %371, %384
  %386 = fadd double %372, %385
  %387 = fsub double %386, %372
  %388 = fsub double %385, %387
  %389 = fmul double %386, %386
  %390 = fneg double %389
  %391 = tail call double @llvm.fma.f64(double %386, double %386, double %390)
  %392 = fmul double %388, 2.000000e+00
  %393 = tail call double @llvm.fma.f64(double %386, double %392, double %391)
  %394 = fadd double %389, %393
  %395 = fsub double %394, %389
  %396 = fsub double %393, %395
  %397 = tail call double @llvm.fma.f64(double %394, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %398 = tail call double @llvm.fma.f64(double %394, double %397, double 0x3FBE25E43ABE935A)
  %399 = tail call double @llvm.fma.f64(double %394, double %398, double 0x3FC110EF47E6C9C2)
  %400 = tail call double @llvm.fma.f64(double %394, double %399, double 0x3FC3B13BCFA74449)
  %401 = tail call double @llvm.fma.f64(double %394, double %400, double 0x3FC745D171BF3C30)
  %402 = tail call double @llvm.fma.f64(double %394, double %401, double 0x3FCC71C71C7792CE)
  %403 = tail call double @llvm.fma.f64(double %394, double %402, double 0x3FD24924924920DA)
  %404 = tail call double @llvm.fma.f64(double %394, double %403, double 0x3FD999999999999C)
  %405 = sitofp i32 %361 to double
  %406 = fmul double %405, 0x3FE62E42FEFA39EF
  %407 = fneg double %406
  %408 = tail call double @llvm.fma.f64(double %405, double 0x3FE62E42FEFA39EF, double %407)
  %409 = tail call double @llvm.fma.f64(double %405, double 0x3C7ABC9E3B39803F, double %408)
  %410 = fadd double %406, %409
  %411 = fsub double %410, %406
  %412 = fsub double %409, %411
  %413 = tail call double @llvm.amdgcn.ldexp.f64(double %386, i32 1)
  %414 = tail call double @llvm.amdgcn.ldexp.f64(double %388, i32 1)
  %415 = fmul double %386, %394
  %416 = fneg double %415
  %417 = tail call double @llvm.fma.f64(double %394, double %386, double %416)
  %418 = tail call double @llvm.fma.f64(double %394, double %388, double %417)
  %419 = tail call double @llvm.fma.f64(double %396, double %386, double %418)
  %420 = fadd double %415, %419
  %421 = fsub double %420, %415
  %422 = fsub double %419, %421
  %423 = fmul double %394, %404
  %424 = fneg double %423
  %425 = tail call double @llvm.fma.f64(double %394, double %404, double %424)
  %426 = tail call double @llvm.fma.f64(double %396, double %404, double %425)
  %427 = fadd double %423, %426
  %428 = fsub double %427, %423
  %429 = fsub double %426, %428
  %430 = fadd double %427, 0x3FE5555555555555
  %431 = fadd double %430, 0xBFE5555555555555
  %432 = fsub double %427, %431
  %433 = fadd double %429, 0x3C8543B0D5DF274D
  %434 = fadd double %433, %432
  %435 = fadd double %430, %434
  %436 = fsub double %435, %430
  %437 = fsub double %434, %436
  %438 = fmul double %420, %435
  %439 = fneg double %438
  %440 = tail call double @llvm.fma.f64(double %420, double %435, double %439)
  %441 = tail call double @llvm.fma.f64(double %420, double %437, double %440)
  %442 = tail call double @llvm.fma.f64(double %422, double %435, double %441)
  %443 = fadd double %438, %442
  %444 = fsub double %443, %438
  %445 = fsub double %442, %444
  %446 = fadd double %413, %443
  %447 = fsub double %446, %413
  %448 = fsub double %443, %447
  %449 = fadd double %414, %445
  %450 = fadd double %449, %448
  %451 = fadd double %446, %450
  %452 = fsub double %451, %446
  %453 = fsub double %450, %452
  %454 = fadd double %410, %451
  %455 = fsub double %454, %410
  %456 = fsub double %454, %455
  %457 = fsub double %410, %456
  %458 = fsub double %451, %455
  %459 = fadd double %458, %457
  %460 = fadd double %412, %453
  %461 = fsub double %460, %412
  %462 = fsub double %460, %461
  %463 = fsub double %412, %462
  %464 = fsub double %453, %461
  %465 = fadd double %464, %463
  %466 = fadd double %460, %459
  %467 = fadd double %454, %466
  %468 = fsub double %467, %454
  %469 = fsub double %466, %468
  %470 = fadd double %465, %469
  %471 = fadd double %467, %470
  %472 = fsub double %471, %467
  %473 = fsub double %470, %472
  %474 = fmul double %471, 2.000000e+00
  %475 = fneg double %474
  %476 = tail call double @llvm.fma.f64(double %471, double 2.000000e+00, double %475)
  %477 = tail call double @llvm.fma.f64(double %473, double 2.000000e+00, double %476)
  %478 = fadd double %474, %477
  %479 = fsub double %478, %474
  %480 = fsub double %477, %479
  %481 = tail call double @llvm.fabs.f64(double %474) #5
  %482 = fcmp oeq double %481, 0x7FF0000000000000
  %483 = select i1 %482, double %474, double %478
  %484 = tail call double @llvm.fabs.f64(double %483) #5
  %485 = fcmp oeq double %484, 0x7FF0000000000000
  %486 = select i1 %485, double 0.000000e+00, double %480
  %487 = fmul double %483, 0x3FF71547652B82FE
  %488 = tail call double @llvm.rint.f64(double %487)
  %489 = fneg double %488
  %490 = tail call double @llvm.fma.f64(double %489, double 0x3FE62E42FEFA39EF, double %483)
  %491 = tail call double @llvm.fma.f64(double %489, double 0x3C7ABC9E3B39803F, double %490)
  %492 = tail call double @llvm.fma.f64(double %491, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %493 = tail call double @llvm.fma.f64(double %491, double %492, double 0x3EC71DEE623FDE64)
  %494 = tail call double @llvm.fma.f64(double %491, double %493, double 0x3EFA01997C89E6B0)
  %495 = tail call double @llvm.fma.f64(double %491, double %494, double 0x3F2A01A014761F6E)
  %496 = tail call double @llvm.fma.f64(double %491, double %495, double 0x3F56C16C1852B7B0)
  %497 = tail call double @llvm.fma.f64(double %491, double %496, double 0x3F81111111122322)
  %498 = tail call double @llvm.fma.f64(double %491, double %497, double 0x3FA55555555502A1)
  %499 = tail call double @llvm.fma.f64(double %491, double %498, double 0x3FC5555555555511)
  %500 = tail call double @llvm.fma.f64(double %491, double %499, double 0x3FE000000000000B)
  %501 = tail call double @llvm.fma.f64(double %491, double %500, double 1.000000e+00)
  %502 = tail call double @llvm.fma.f64(double %491, double %501, double 1.000000e+00)
  %503 = fptosi double %488 to i32
  %504 = tail call double @llvm.amdgcn.ldexp.f64(double %502, i32 %503)
  %505 = fcmp ogt double %483, 1.024000e+03
  %506 = select i1 %505, double 0x7FF0000000000000, double %504
  %507 = fcmp olt double %483, -1.075000e+03
  %508 = select i1 %507, double 0.000000e+00, double %506
  %509 = tail call double @llvm.fma.f64(double %508, double %486, double %508)
  %510 = tail call double @llvm.fabs.f64(double %508) #5
  %511 = fcmp oeq double %510, 0x7FF0000000000000
  %512 = select i1 %511, double %508, double %509
  %513 = tail call double @llvm.fabs.f64(double %512)
  %514 = fcmp oeq double %355, 0x7FF0000000000000
  %515 = fcmp oeq double %1, 0.000000e+00
  %516 = fcmp uno double %1, 0.000000e+00
  %517 = fcmp oeq double %1, 1.000000e+00
  %518 = fmul contract double %513, 2.000000e+00
  %519 = select i1 %514, double 0x7FF0000000000000, double %518
  %520 = select i1 %515, double 0.000000e+00, double %519
  %521 = select i1 %516, double 0x7FF8000000000000, double %520
  %522 = select i1 %517, double 2.000000e+00, double %521
  %523 = fdiv contract double %354, %522
  %524 = fmul double %523, 0x3FF71547652B82FE
  %525 = tail call double @llvm.rint.f64(double %524)
  %526 = fneg double %525
  %527 = tail call double @llvm.fma.f64(double %526, double 0x3FE62E42FEFA39EF, double %523)
  %528 = tail call double @llvm.fma.f64(double %526, double 0x3C7ABC9E3B39803F, double %527)
  %529 = tail call double @llvm.fma.f64(double %528, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %530 = tail call double @llvm.fma.f64(double %528, double %529, double 0x3EC71DEE623FDE64)
  %531 = tail call double @llvm.fma.f64(double %528, double %530, double 0x3EFA01997C89E6B0)
  %532 = tail call double @llvm.fma.f64(double %528, double %531, double 0x3F2A01A014761F6E)
  %533 = tail call double @llvm.fma.f64(double %528, double %532, double 0x3F56C16C1852B7B0)
  %534 = tail call double @llvm.fma.f64(double %528, double %533, double 0x3F81111111122322)
  %535 = tail call double @llvm.fma.f64(double %528, double %534, double 0x3FA55555555502A1)
  %536 = tail call double @llvm.fma.f64(double %528, double %535, double 0x3FC5555555555511)
  %537 = tail call double @llvm.fma.f64(double %528, double %536, double 0x3FE000000000000B)
  %538 = tail call double @llvm.fma.f64(double %528, double %537, double 1.000000e+00)
  %539 = tail call double @llvm.fma.f64(double %528, double %538, double 1.000000e+00)
  %540 = fptosi double %525 to i32
  %541 = tail call double @llvm.amdgcn.ldexp.f64(double %539, i32 %540)
  %542 = fcmp ogt double %523, 1.024000e+03
  %543 = select i1 %542, double 0x7FF0000000000000, double %541
  %544 = fcmp olt double %523, -1.075000e+03
  %545 = select i1 %544, double 0.000000e+00, double %543
  %546 = sext i32 %12 to i64
  %547 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %12
  store double %545, double addrspace(3)* %547, align 8, !tbaa !5
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %548 = icmp sgt i32 %8, 0
  br i1 %548, label %549, label %623

549:                                              ; preds = %15
  %550 = and i32 %8, 7
  %551 = icmp ult i32 %8, 8
  %552 = and i32 %8, -8
  %553 = icmp eq i32 %550, 0
  br label %554

554:                                              ; preds = %549, %619
  %555 = phi double [ %620, %619 ], [ 0.000000e+00, %549 ]
  %556 = phi i32 [ %621, %619 ], [ 0, %549 ]
  %557 = mul nsw i32 %556, %8
  br i1 %551, label %604, label %558

558:                                              ; preds = %554, %558
  %559 = phi double [ %600, %558 ], [ %555, %554 ]
  %560 = phi i32 [ %601, %558 ], [ 0, %554 ]
  %561 = phi i32 [ %602, %558 ], [ 0, %554 ]
  %562 = add nsw i32 %560, %557
  %563 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %562
  %564 = load double, double addrspace(3)* %563, align 8, !tbaa !5
  %565 = fadd contract double %559, %564
  %566 = or i32 %560, 1
  %567 = add nsw i32 %566, %557
  %568 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %567
  %569 = load double, double addrspace(3)* %568, align 8, !tbaa !5
  %570 = fadd contract double %565, %569
  %571 = or i32 %560, 2
  %572 = add nsw i32 %571, %557
  %573 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %572
  %574 = load double, double addrspace(3)* %573, align 8, !tbaa !5
  %575 = fadd contract double %570, %574
  %576 = or i32 %560, 3
  %577 = add nsw i32 %576, %557
  %578 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %577
  %579 = load double, double addrspace(3)* %578, align 8, !tbaa !5
  %580 = fadd contract double %575, %579
  %581 = or i32 %560, 4
  %582 = add nsw i32 %581, %557
  %583 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %582
  %584 = load double, double addrspace(3)* %583, align 8, !tbaa !5
  %585 = fadd contract double %580, %584
  %586 = or i32 %560, 5
  %587 = add nsw i32 %586, %557
  %588 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %587
  %589 = load double, double addrspace(3)* %588, align 8, !tbaa !5
  %590 = fadd contract double %585, %589
  %591 = or i32 %560, 6
  %592 = add nsw i32 %591, %557
  %593 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %592
  %594 = load double, double addrspace(3)* %593, align 8, !tbaa !5
  %595 = fadd contract double %590, %594
  %596 = or i32 %560, 7
  %597 = add nsw i32 %596, %557
  %598 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %597
  %599 = load double, double addrspace(3)* %598, align 8, !tbaa !5
  %600 = fadd contract double %595, %599
  %601 = add nuw nsw i32 %560, 8
  %602 = add i32 %561, 8
  %603 = icmp eq i32 %602, %552
  br i1 %603, label %604, label %558, !llvm.loop !9

604:                                              ; preds = %558, %554
  %605 = phi double [ undef, %554 ], [ %600, %558 ]
  %606 = phi double [ %555, %554 ], [ %600, %558 ]
  %607 = phi i32 [ 0, %554 ], [ %601, %558 ]
  br i1 %553, label %619, label %608

608:                                              ; preds = %604, %608
  %609 = phi double [ %615, %608 ], [ %606, %604 ]
  %610 = phi i32 [ %616, %608 ], [ %607, %604 ]
  %611 = phi i32 [ %617, %608 ], [ 0, %604 ]
  %612 = add nsw i32 %610, %557
  %613 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g1, i32 0, i32 %612
  %614 = load double, double addrspace(3)* %613, align 8, !tbaa !5
  %615 = fadd contract double %609, %614
  %616 = add nuw nsw i32 %610, 1
  %617 = add i32 %611, 1
  %618 = icmp eq i32 %617, %550
  br i1 %618, label %619, label %608, !llvm.loop !11

619:                                              ; preds = %608, %604
  %620 = phi double [ %605, %604 ], [ %615, %608 ]
  %621 = add nuw nsw i32 %556, 1
  %622 = icmp eq i32 %621, %8
  br i1 %622, label %623, label %554, !llvm.loop !13

623:                                              ; preds = %619, %15
  %624 = phi double [ 0.000000e+00, %15 ], [ %620, %619 ]
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %625 = load double, double addrspace(3)* %547, align 8, !tbaa !5
  %626 = fdiv contract double %625, %624
  store double %626, double addrspace(3)* %547, align 8, !tbaa !5
  %627 = fmul contract double %1, %2
  %628 = tail call double @llvm.fabs.f64(double %627)
  %629 = tail call double @llvm.amdgcn.frexp.mant.f64(double %628)
  %630 = fcmp olt double %629, 0x3FE5555555555555
  %631 = zext i1 %630 to i32
  %632 = tail call double @llvm.amdgcn.ldexp.f64(double %629, i32 %631)
  %633 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %628)
  %634 = sub nsw i32 %633, %631
  %635 = fadd double %632, -1.000000e+00
  %636 = fadd double %632, 1.000000e+00
  %637 = fadd double %636, -1.000000e+00
  %638 = fsub double %632, %637
  %639 = tail call double @llvm.amdgcn.rcp.f64(double %636)
  %640 = fneg double %636
  %641 = tail call double @llvm.fma.f64(double %640, double %639, double 1.000000e+00)
  %642 = tail call double @llvm.fma.f64(double %641, double %639, double %639)
  %643 = tail call double @llvm.fma.f64(double %640, double %642, double 1.000000e+00)
  %644 = tail call double @llvm.fma.f64(double %643, double %642, double %642)
  %645 = fmul double %635, %644
  %646 = fmul double %636, %645
  %647 = fneg double %646
  %648 = tail call double @llvm.fma.f64(double %645, double %636, double %647)
  %649 = tail call double @llvm.fma.f64(double %645, double %638, double %648)
  %650 = fadd double %646, %649
  %651 = fsub double %650, %646
  %652 = fsub double %649, %651
  %653 = fsub double %635, %650
  %654 = fsub double %635, %653
  %655 = fsub double %654, %650
  %656 = fsub double %655, %652
  %657 = fadd double %653, %656
  %658 = fmul double %644, %657
  %659 = fadd double %645, %658
  %660 = fsub double %659, %645
  %661 = fsub double %658, %660
  %662 = fmul double %659, %659
  %663 = fneg double %662
  %664 = tail call double @llvm.fma.f64(double %659, double %659, double %663)
  %665 = fmul double %661, 2.000000e+00
  %666 = tail call double @llvm.fma.f64(double %659, double %665, double %664)
  %667 = fadd double %662, %666
  %668 = fsub double %667, %662
  %669 = fsub double %666, %668
  %670 = tail call double @llvm.fma.f64(double %667, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %671 = tail call double @llvm.fma.f64(double %667, double %670, double 0x3FBE25E43ABE935A)
  %672 = tail call double @llvm.fma.f64(double %667, double %671, double 0x3FC110EF47E6C9C2)
  %673 = tail call double @llvm.fma.f64(double %667, double %672, double 0x3FC3B13BCFA74449)
  %674 = tail call double @llvm.fma.f64(double %667, double %673, double 0x3FC745D171BF3C30)
  %675 = tail call double @llvm.fma.f64(double %667, double %674, double 0x3FCC71C71C7792CE)
  %676 = tail call double @llvm.fma.f64(double %667, double %675, double 0x3FD24924924920DA)
  %677 = tail call double @llvm.fma.f64(double %667, double %676, double 0x3FD999999999999C)
  %678 = sitofp i32 %634 to double
  %679 = fmul double %678, 0x3FE62E42FEFA39EF
  %680 = fneg double %679
  %681 = tail call double @llvm.fma.f64(double %678, double 0x3FE62E42FEFA39EF, double %680)
  %682 = tail call double @llvm.fma.f64(double %678, double 0x3C7ABC9E3B39803F, double %681)
  %683 = fadd double %679, %682
  %684 = fsub double %683, %679
  %685 = fsub double %682, %684
  %686 = tail call double @llvm.amdgcn.ldexp.f64(double %659, i32 1)
  %687 = tail call double @llvm.amdgcn.ldexp.f64(double %661, i32 1)
  %688 = fmul double %659, %667
  %689 = fneg double %688
  %690 = tail call double @llvm.fma.f64(double %667, double %659, double %689)
  %691 = tail call double @llvm.fma.f64(double %667, double %661, double %690)
  %692 = tail call double @llvm.fma.f64(double %669, double %659, double %691)
  %693 = fadd double %688, %692
  %694 = fsub double %693, %688
  %695 = fsub double %692, %694
  %696 = fmul double %667, %677
  %697 = fneg double %696
  %698 = tail call double @llvm.fma.f64(double %667, double %677, double %697)
  %699 = tail call double @llvm.fma.f64(double %669, double %677, double %698)
  %700 = fadd double %696, %699
  %701 = fsub double %700, %696
  %702 = fsub double %699, %701
  %703 = fadd double %700, 0x3FE5555555555555
  %704 = fadd double %703, 0xBFE5555555555555
  %705 = fsub double %700, %704
  %706 = fadd double %702, 0x3C8543B0D5DF274D
  %707 = fadd double %706, %705
  %708 = fadd double %703, %707
  %709 = fsub double %708, %703
  %710 = fsub double %707, %709
  %711 = fmul double %693, %708
  %712 = fneg double %711
  %713 = tail call double @llvm.fma.f64(double %693, double %708, double %712)
  %714 = tail call double @llvm.fma.f64(double %693, double %710, double %713)
  %715 = tail call double @llvm.fma.f64(double %695, double %708, double %714)
  %716 = fadd double %711, %715
  %717 = fsub double %716, %711
  %718 = fsub double %715, %717
  %719 = fadd double %686, %716
  %720 = fsub double %719, %686
  %721 = fsub double %716, %720
  %722 = fadd double %687, %718
  %723 = fadd double %722, %721
  %724 = fadd double %719, %723
  %725 = fsub double %724, %719
  %726 = fsub double %723, %725
  %727 = fadd double %683, %724
  %728 = fsub double %727, %683
  %729 = fsub double %727, %728
  %730 = fsub double %683, %729
  %731 = fsub double %724, %728
  %732 = fadd double %731, %730
  %733 = fadd double %685, %726
  %734 = fsub double %733, %685
  %735 = fsub double %733, %734
  %736 = fsub double %685, %735
  %737 = fsub double %726, %734
  %738 = fadd double %737, %736
  %739 = fadd double %733, %732
  %740 = fadd double %727, %739
  %741 = fsub double %740, %727
  %742 = fsub double %739, %741
  %743 = fadd double %738, %742
  %744 = fadd double %740, %743
  %745 = fsub double %744, %740
  %746 = fsub double %743, %745
  %747 = fmul double %744, 2.000000e+00
  %748 = fneg double %747
  %749 = tail call double @llvm.fma.f64(double %744, double 2.000000e+00, double %748)
  %750 = tail call double @llvm.fma.f64(double %746, double 2.000000e+00, double %749)
  %751 = fadd double %747, %750
  %752 = fsub double %751, %747
  %753 = fsub double %750, %752
  %754 = tail call double @llvm.fabs.f64(double %747) #5
  %755 = fcmp oeq double %754, 0x7FF0000000000000
  %756 = select i1 %755, double %747, double %751
  %757 = tail call double @llvm.fabs.f64(double %756) #5
  %758 = fcmp oeq double %757, 0x7FF0000000000000
  %759 = select i1 %758, double 0.000000e+00, double %753
  %760 = fmul double %756, 0x3FF71547652B82FE
  %761 = tail call double @llvm.rint.f64(double %760)
  %762 = fneg double %761
  %763 = tail call double @llvm.fma.f64(double %762, double 0x3FE62E42FEFA39EF, double %756)
  %764 = tail call double @llvm.fma.f64(double %762, double 0x3C7ABC9E3B39803F, double %763)
  %765 = tail call double @llvm.fma.f64(double %764, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %766 = tail call double @llvm.fma.f64(double %764, double %765, double 0x3EC71DEE623FDE64)
  %767 = tail call double @llvm.fma.f64(double %764, double %766, double 0x3EFA01997C89E6B0)
  %768 = tail call double @llvm.fma.f64(double %764, double %767, double 0x3F2A01A014761F6E)
  %769 = tail call double @llvm.fma.f64(double %764, double %768, double 0x3F56C16C1852B7B0)
  %770 = tail call double @llvm.fma.f64(double %764, double %769, double 0x3F81111111122322)
  %771 = tail call double @llvm.fma.f64(double %764, double %770, double 0x3FA55555555502A1)
  %772 = tail call double @llvm.fma.f64(double %764, double %771, double 0x3FC5555555555511)
  %773 = tail call double @llvm.fma.f64(double %764, double %772, double 0x3FE000000000000B)
  %774 = tail call double @llvm.fma.f64(double %764, double %773, double 1.000000e+00)
  %775 = tail call double @llvm.fma.f64(double %764, double %774, double 1.000000e+00)
  %776 = fptosi double %761 to i32
  %777 = tail call double @llvm.amdgcn.ldexp.f64(double %775, i32 %776)
  %778 = fcmp ogt double %756, 1.024000e+03
  %779 = select i1 %778, double 0x7FF0000000000000, double %777
  %780 = fcmp olt double %756, -1.075000e+03
  %781 = select i1 %780, double 0.000000e+00, double %779
  %782 = tail call double @llvm.fma.f64(double %781, double %759, double %781)
  %783 = tail call double @llvm.fabs.f64(double %781) #5
  %784 = fcmp oeq double %783, 0x7FF0000000000000
  %785 = select i1 %784, double %781, double %782
  %786 = tail call double @llvm.fabs.f64(double %785)
  %787 = fcmp oeq double %628, 0x7FF0000000000000
  %788 = fcmp oeq double %627, 0.000000e+00
  %789 = fcmp uno double %627, 0.000000e+00
  %790 = fcmp oeq double %627, 1.000000e+00
  %791 = fmul contract double %786, 2.000000e+00
  %792 = select i1 %787, double 0x7FF0000000000000, double %791
  %793 = select i1 %788, double 0.000000e+00, double %792
  %794 = select i1 %789, double 0x7FF8000000000000, double %793
  %795 = select i1 %790, double 2.000000e+00, double %794
  %796 = fdiv contract double %354, %795
  %797 = fmul double %796, 0x3FF71547652B82FE
  %798 = tail call double @llvm.rint.f64(double %797)
  %799 = fneg double %798
  %800 = tail call double @llvm.fma.f64(double %799, double 0x3FE62E42FEFA39EF, double %796)
  %801 = tail call double @llvm.fma.f64(double %799, double 0x3C7ABC9E3B39803F, double %800)
  %802 = tail call double @llvm.fma.f64(double %801, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %803 = tail call double @llvm.fma.f64(double %801, double %802, double 0x3EC71DEE623FDE64)
  %804 = tail call double @llvm.fma.f64(double %801, double %803, double 0x3EFA01997C89E6B0)
  %805 = tail call double @llvm.fma.f64(double %801, double %804, double 0x3F2A01A014761F6E)
  %806 = tail call double @llvm.fma.f64(double %801, double %805, double 0x3F56C16C1852B7B0)
  %807 = tail call double @llvm.fma.f64(double %801, double %806, double 0x3F81111111122322)
  %808 = tail call double @llvm.fma.f64(double %801, double %807, double 0x3FA55555555502A1)
  %809 = tail call double @llvm.fma.f64(double %801, double %808, double 0x3FC5555555555511)
  %810 = tail call double @llvm.fma.f64(double %801, double %809, double 0x3FE000000000000B)
  %811 = tail call double @llvm.fma.f64(double %801, double %810, double 1.000000e+00)
  %812 = tail call double @llvm.fma.f64(double %801, double %811, double 1.000000e+00)
  %813 = fptosi double %798 to i32
  %814 = tail call double @llvm.amdgcn.ldexp.f64(double %812, i32 %813)
  %815 = fcmp ogt double %796, 1.024000e+03
  %816 = select i1 %815, double 0x7FF0000000000000, double %814
  %817 = fcmp olt double %796, -1.075000e+03
  %818 = select i1 %817, double 0.000000e+00, double %816
  %819 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %12
  store double %818, double addrspace(3)* %819, align 8, !tbaa !5
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  br i1 %548, label %820, label %894

820:                                              ; preds = %623
  %821 = and i32 %8, 7
  %822 = icmp ult i32 %8, 8
  %823 = and i32 %8, -8
  %824 = icmp eq i32 %821, 0
  br label %825

825:                                              ; preds = %820, %890
  %826 = phi double [ %891, %890 ], [ 0.000000e+00, %820 ]
  %827 = phi i32 [ %892, %890 ], [ 0, %820 ]
  %828 = mul nsw i32 %827, %8
  br i1 %822, label %875, label %829

829:                                              ; preds = %825, %829
  %830 = phi double [ %871, %829 ], [ %826, %825 ]
  %831 = phi i32 [ %872, %829 ], [ 0, %825 ]
  %832 = phi i32 [ %873, %829 ], [ 0, %825 ]
  %833 = add nsw i32 %831, %828
  %834 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %833
  %835 = load double, double addrspace(3)* %834, align 8, !tbaa !5
  %836 = fadd contract double %830, %835
  %837 = or i32 %831, 1
  %838 = add nsw i32 %837, %828
  %839 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %838
  %840 = load double, double addrspace(3)* %839, align 8, !tbaa !5
  %841 = fadd contract double %836, %840
  %842 = or i32 %831, 2
  %843 = add nsw i32 %842, %828
  %844 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %843
  %845 = load double, double addrspace(3)* %844, align 8, !tbaa !5
  %846 = fadd contract double %841, %845
  %847 = or i32 %831, 3
  %848 = add nsw i32 %847, %828
  %849 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %848
  %850 = load double, double addrspace(3)* %849, align 8, !tbaa !5
  %851 = fadd contract double %846, %850
  %852 = or i32 %831, 4
  %853 = add nsw i32 %852, %828
  %854 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %853
  %855 = load double, double addrspace(3)* %854, align 8, !tbaa !5
  %856 = fadd contract double %851, %855
  %857 = or i32 %831, 5
  %858 = add nsw i32 %857, %828
  %859 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %858
  %860 = load double, double addrspace(3)* %859, align 8, !tbaa !5
  %861 = fadd contract double %856, %860
  %862 = or i32 %831, 6
  %863 = add nsw i32 %862, %828
  %864 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %863
  %865 = load double, double addrspace(3)* %864, align 8, !tbaa !5
  %866 = fadd contract double %861, %865
  %867 = or i32 %831, 7
  %868 = add nsw i32 %867, %828
  %869 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %868
  %870 = load double, double addrspace(3)* %869, align 8, !tbaa !5
  %871 = fadd contract double %866, %870
  %872 = add nuw nsw i32 %831, 8
  %873 = add i32 %832, 8
  %874 = icmp eq i32 %873, %823
  br i1 %874, label %875, label %829, !llvm.loop !9

875:                                              ; preds = %829, %825
  %876 = phi double [ undef, %825 ], [ %871, %829 ]
  %877 = phi double [ %826, %825 ], [ %871, %829 ]
  %878 = phi i32 [ 0, %825 ], [ %872, %829 ]
  br i1 %824, label %890, label %879

879:                                              ; preds = %875, %879
  %880 = phi double [ %886, %879 ], [ %877, %875 ]
  %881 = phi i32 [ %887, %879 ], [ %878, %875 ]
  %882 = phi i32 [ %888, %879 ], [ 0, %875 ]
  %883 = add nsw i32 %881, %828
  %884 = getelementptr inbounds [900 x double], [900 x double] addrspace(3)* @_ZZ6getDoGPdddE2g2, i32 0, i32 %883
  %885 = load double, double addrspace(3)* %884, align 8, !tbaa !5
  %886 = fadd contract double %880, %885
  %887 = add nuw nsw i32 %881, 1
  %888 = add i32 %882, 1
  %889 = icmp eq i32 %888, %821
  br i1 %889, label %890, label %879, !llvm.loop !14

890:                                              ; preds = %879, %875
  %891 = phi double [ %876, %875 ], [ %886, %879 ]
  %892 = add nuw nsw i32 %827, 1
  %893 = icmp eq i32 %892, %8
  br i1 %893, label %894, label %825, !llvm.loop !13

894:                                              ; preds = %890, %623
  %895 = phi double [ 0.000000e+00, %623 ], [ %891, %890 ]
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %896 = load double, double addrspace(3)* %819, align 8, !tbaa !5
  %897 = fdiv contract double %896, %895
  store double %897, double addrspace(3)* %819, align 8, !tbaa !5
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %898 = load double, double addrspace(3)* %819, align 8, !tbaa !5
  %899 = load double, double addrspace(3)* %547, align 8, !tbaa !5
  %900 = fsub contract double %898, %899
  %901 = getelementptr inbounds double, double addrspace(1)* %0, i64 %546
  store double %900, double addrspace(1)* %901, align 8, !tbaa !5
  br label %902

902:                                              ; preds = %3, %894
  ret void
}

; Function Attrs: convergent mustprogress nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.frexp.mant.f64(double) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #4

attributes #0 = { convergent mustprogress norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !6, i64 0}
!6 = !{!"double", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !12}
