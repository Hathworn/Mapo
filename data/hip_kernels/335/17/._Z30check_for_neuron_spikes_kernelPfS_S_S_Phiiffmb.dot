digraph "CFG for '_Z30check_for_neuron_spikes_kernelPfS_S_S_Phiiffmb' function" {
	label="CFG for '_Z30check_for_neuron_spikes_kernelPfS_S_S_Phiiffmb' function";

	Node0x61ad470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !7\l  %22 = mul i32 %13, %18\l  %23 = add i32 %22, %12\l  %24 = sext i32 %23 to i64\l  %25 = icmp ult i64 %24, %9\l  br i1 %25, label %26, label %80\l|{<s0>T|<s1>F}}"];
	Node0x61ad470:s0 -> Node0x61b0330;
	Node0x61ad470:s1 -> Node0x61b03c0;
	Node0x61b0330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%26:\l26:                                               \l  %27 = fdiv contract float %7, %8\l  %28 = tail call float @llvm.round.f32(float %27)\l  %29 = fptosi float %28 to i32\l  %30 = udiv i32 %21, %18\l  %31 = mul i32 %30, %18\l  %32 = icmp ugt i32 %21, %31\l  %33 = zext i1 %32 to i32\l  %34 = add i32 %30, %33\l  %35 = mul i32 %34, %18\l  br label %36\l}"];
	Node0x61b0330 -> Node0x61b0bd0;
	Node0x61b0bd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi i64 [ %24, %26 ], [ %78, %76 ]\l  %38 = trunc i64 %37 to i32\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !16\l  %41 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !16\l  %43 = fcmp contract ult float %40, %42\l  br i1 %43, label %61, label %44\l|{<s0>T|<s1>F}}"];
	Node0x61b0bd0:s0 -> Node0x61b1910;
	Node0x61b0bd0:s1 -> Node0x61b19a0;
	Node0x61b19a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%44:\l44:                                               \l  %45 = getelementptr inbounds float, float addrspace(1)* %3, i64 %37\l  store float %7, float addrspace(1)* %45, align 4, !tbaa !16\l  %46 = getelementptr inbounds float, float addrspace(1)* %2, i64 %37\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16\l  store float %47, float addrspace(1)* %39, align 4, !tbaa !16\l  br i1 %10, label %48, label %76\l|{<s0>T|<s1>F}}"];
	Node0x61b19a0:s0 -> Node0x61b1db0;
	Node0x61b19a0:s1 -> Node0x61b0d00;
	Node0x61b1db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%48:\l48:                                               \l  %49 = mul nsw i32 %38, %5\l  %50 = srem i32 %29, %6\l  %51 = sdiv i32 %50, 8\l  %52 = shl nsw i32 %51, 3\l  %53 = sub nsw i32 %50, %52\l  %54 = add nsw i32 %51, %49\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds i8, i8 addrspace(1)* %4, i64 %55\l  %57 = load i8, i8 addrspace(1)* %56, align 1, !tbaa !20\l  %58 = shl nuw i32 1, %53\l  %59 = trunc i32 %58 to i8\l  %60 = or i8 %57, %59\l  store i8 %60, i8 addrspace(1)* %56, align 1, !tbaa !20\l  br label %76\l}"];
	Node0x61b1db0 -> Node0x61b0d00;
	Node0x61b1910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%61:\l61:                                               \l  br i1 %10, label %62, label %76\l|{<s0>T|<s1>F}}"];
	Node0x61b1910:s0 -> Node0x61b2d90;
	Node0x61b1910:s1 -> Node0x61b0d00;
	Node0x61b2d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%62:\l62:                                               \l  %63 = mul nsw i32 %38, %5\l  %64 = srem i32 %29, %6\l  %65 = sdiv i32 %64, 8\l  %66 = shl nsw i32 %65, 3\l  %67 = sub nsw i32 %64, %66\l  %68 = add nsw i32 %65, %63\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds i8, i8 addrspace(1)* %4, i64 %69\l  %71 = load i8, i8 addrspace(1)* %70, align 1, !tbaa !20\l  %72 = shl nuw i32 1, %67\l  %73 = trunc i32 %72 to i8\l  %74 = xor i8 %73, -1\l  %75 = and i8 %71, %74\l  store i8 %75, i8 addrspace(1)* %70, align 1, !tbaa !20\l  br label %76\l}"];
	Node0x61b2d90 -> Node0x61b0d00;
	Node0x61b0d00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = add i32 %35, %38\l  %78 = sext i32 %77 to i64\l  %79 = icmp ult i64 %78, %9\l  br i1 %79, label %36, label %80, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x61b0d00:s0 -> Node0x61b0bd0;
	Node0x61b0d00:s1 -> Node0x61b03c0;
	Node0x61b03c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%80:\l80:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
}
