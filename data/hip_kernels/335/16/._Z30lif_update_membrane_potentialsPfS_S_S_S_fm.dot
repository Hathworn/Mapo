digraph "CFG for '_Z30lif_update_membrane_potentialsPfS_S_S_S_fm' function" {
	label="CFG for '_Z30lif_update_membrane_potentialsPfS_S_S_S_fm' function";

	Node0x61b99b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %9, %14\l  %19 = add i32 %18, %8\l  %20 = sext i32 %19 to i64\l  %21 = icmp ult i64 %20, %6\l  br i1 %21, label %22, label %52\l|{<s0>T|<s1>F}}"];
	Node0x61b99b0:s0 -> Node0x61bbca0;
	Node0x61b99b0:s1 -> Node0x61bbd30;
	Node0x61bbca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%22:\l22:                                               \l  %23 = udiv i32 %17, %14\l  %24 = mul i32 %23, %14\l  %25 = icmp ugt i32 %17, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %14\l  br label %29\l}"];
	Node0x61bbca0 -> Node0x61bc1b0;
	Node0x61bc1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i64 [ %20, %22 ], [ %50, %29 ]\l  %31 = trunc i64 %30 to i32\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !16\l  %34 = fdiv contract float %5, %33\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !16\l  %37 = getelementptr inbounds float, float addrspace(1)* %4, i64 %30\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %39 = getelementptr inbounds float, float addrspace(1)* %3, i64 %30\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !16\l  %41 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !16\l  %43 = fmul contract float %38, %42\l  %44 = fadd contract float %40, %43\l  %45 = fmul contract float %34, %44\l  %46 = fsub contract float 1.000000e+00, %34\l  %47 = fmul contract float %36, %46\l  %48 = fadd contract float %47, %45\l  store float %48, float addrspace(1)* %35, align 4, !tbaa !16\l  %49 = add i32 %28, %31\l  %50 = sext i32 %49 to i64\l  %51 = icmp ult i64 %50, %6\l  br i1 %51, label %29, label %52, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x61bc1b0:s0 -> Node0x61bc1b0;
	Node0x61bc1b0:s1 -> Node0x61bbd30;
	Node0x61bbd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%52:\l52:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
}
