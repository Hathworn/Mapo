digraph "CFG for '_Z18matrixAdd_C_KernelPfS_S_mi' function" {
	label="CFG for '_Z18matrixAdd_C_KernelPfS_S_mi' function";

	Node0x4b8d750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = lshr i64 %3, 2\l  %16 = trunc i64 %15 to i32\l  %17 = icmp slt i32 %14, %4\l  %18 = icmp sgt i32 %4, 0\l  %19 = and i1 %17, %18\l  br i1 %19, label %20, label %128\l|{<s0>T|<s1>F}}"];
	Node0x4b8d750:s0 -> Node0x4b8f8e0;
	Node0x4b8d750:s1 -> Node0x4b8f970;
	Node0x4b8f8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%20:\l20:                                               \l  %21 = and i32 %4, 7\l  %22 = icmp ult i32 %4, 8\l  br i1 %22, label %110, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4b8f8e0:s0 -> Node0x4b8fc30;
	Node0x4b8f8e0:s1 -> Node0x4b8fc80;
	Node0x4b8fc80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %4, -8\l  br label %25\l}"];
	Node0x4b8fc80 -> Node0x4b8fe80;
	Node0x4b8fe80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%25:\l25:                                               \l  %26 = phi i32 [ 0, %23 ], [ %107, %25 ]\l  %27 = phi i32 [ 0, %23 ], [ %108, %25 ]\l  %28 = mul nsw i32 %26, %16\l  %29 = add nsw i32 %28, %14\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7\l  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7\l  %35 = fadd contract float %32, %34\l  %36 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  store float %35, float addrspace(1)* %36, align 4, !tbaa !7\l  %37 = or i32 %26, 1\l  %38 = mul nsw i32 %37, %16\l  %39 = add nsw i32 %38, %14\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7\l  %43 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = fadd contract float %42, %44\l  %46 = getelementptr inbounds float, float addrspace(1)* %2, i64 %40\l  store float %45, float addrspace(1)* %46, align 4, !tbaa !7\l  %47 = or i32 %26, 2\l  %48 = mul nsw i32 %47, %16\l  %49 = add nsw i32 %48, %14\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7\l  %55 = fadd contract float %52, %54\l  %56 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  store float %55, float addrspace(1)* %56, align 4, !tbaa !7\l  %57 = or i32 %26, 3\l  %58 = mul nsw i32 %57, %16\l  %59 = add nsw i32 %58, %14\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7\l  %63 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7\l  %65 = fadd contract float %62, %64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  store float %65, float addrspace(1)* %66, align 4, !tbaa !7\l  %67 = or i32 %26, 4\l  %68 = mul nsw i32 %67, %16\l  %69 = add nsw i32 %68, %14\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = fadd contract float %72, %74\l  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  store float %75, float addrspace(1)* %76, align 4, !tbaa !7\l  %77 = or i32 %26, 5\l  %78 = mul nsw i32 %77, %16\l  %79 = add nsw i32 %78, %14\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7\l  %85 = fadd contract float %82, %84\l  %86 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  store float %85, float addrspace(1)* %86, align 4, !tbaa !7\l  %87 = or i32 %26, 6\l  %88 = mul nsw i32 %87, %16\l  %89 = add nsw i32 %88, %14\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7\l  %95 = fadd contract float %92, %94\l  %96 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  store float %95, float addrspace(1)* %96, align 4, !tbaa !7\l  %97 = or i32 %26, 7\l  %98 = mul nsw i32 %97, %16\l  %99 = add nsw i32 %98, %14\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7\l  %105 = fadd contract float %102, %104\l  %106 = getelementptr inbounds float, float addrspace(1)* %2, i64 %100\l  store float %105, float addrspace(1)* %106, align 4, !tbaa !7\l  %107 = add nuw nsw i32 %26, 8\l  %108 = add i32 %27, 8\l  %109 = icmp eq i32 %108, %24\l  br i1 %109, label %110, label %25, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4b8fe80:s0 -> Node0x4b8fc30;
	Node0x4b8fe80:s1 -> Node0x4b8fe80;
	Node0x4b8fc30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%110:\l110:                                              \l  %111 = phi i32 [ 0, %20 ], [ %107, %25 ]\l  %112 = icmp eq i32 %21, 0\l  br i1 %112, label %128, label %113\l|{<s0>T|<s1>F}}"];
	Node0x4b8fc30:s0 -> Node0x4b8f970;
	Node0x4b8fc30:s1 -> Node0x4b940d0;
	Node0x4b940d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%113:\l113:                                              \l  %114 = phi i32 [ %125, %113 ], [ %111, %110 ]\l  %115 = phi i32 [ %126, %113 ], [ 0, %110 ]\l  %116 = mul nsw i32 %114, %16\l  %117 = add nsw i32 %116, %14\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7\l  %123 = fadd contract float %120, %122\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %118\l  store float %123, float addrspace(1)* %124, align 4, !tbaa !7\l  %125 = add nuw nsw i32 %114, 1\l  %126 = add i32 %115, 1\l  %127 = icmp eq i32 %126, %21\l  br i1 %127, label %128, label %113, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b940d0:s0 -> Node0x4b8f970;
	Node0x4b940d0:s1 -> Node0x4b940d0;
	Node0x4b8f970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%128:\l128:                                              \l  ret void\l}"];
}
