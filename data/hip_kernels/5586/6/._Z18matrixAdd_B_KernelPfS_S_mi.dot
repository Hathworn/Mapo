digraph "CFG for '_Z18matrixAdd_B_KernelPfS_S_mi' function" {
	label="CFG for '_Z18matrixAdd_B_KernelPfS_S_mi' function";

	Node0x4677650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp slt i32 %14, %4\l  %16 = icmp sgt i32 %4, 0\l  %17 = and i1 %15, %16\l  br i1 %17, label %18, label %120\l|{<s0>T|<s1>F}}"];
	Node0x4677650:s0 -> Node0x46796b0;
	Node0x4677650:s1 -> Node0x4679740;
	Node0x46796b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = lshr i64 %3, 2\l  %20 = trunc i64 %19 to i32\l  %21 = mul nsw i32 %14, %20\l  %22 = and i32 %4, 7\l  %23 = icmp ult i32 %4, 8\l  br i1 %23, label %103, label %24\l|{<s0>T|<s1>F}}"];
	Node0x46796b0:s0 -> Node0x4679bc0;
	Node0x46796b0:s1 -> Node0x4679c10;
	Node0x4679c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l24:                                               \l  %25 = and i32 %4, -8\l  br label %26\l}"];
	Node0x4679c10 -> Node0x4679e10;
	Node0x4679e10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%26:\l26:                                               \l  %27 = phi i32 [ 0, %24 ], [ %100, %26 ]\l  %28 = phi i32 [ 0, %24 ], [ %101, %26 ]\l  %29 = add nsw i32 %27, %21\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7\l  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7\l  %35 = fadd contract float %32, %34\l  %36 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  store float %35, float addrspace(1)* %36, align 4, !tbaa !7\l  %37 = or i32 %27, 1\l  %38 = add nsw i32 %37, %21\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7\l  %44 = fadd contract float %41, %43\l  %45 = getelementptr inbounds float, float addrspace(1)* %2, i64 %39\l  store float %44, float addrspace(1)* %45, align 4, !tbaa !7\l  %46 = or i32 %27, 2\l  %47 = add nsw i32 %46, %21\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7\l  %53 = fadd contract float %50, %52\l  %54 = getelementptr inbounds float, float addrspace(1)* %2, i64 %48\l  store float %53, float addrspace(1)* %54, align 4, !tbaa !7\l  %55 = or i32 %27, 3\l  %56 = add nsw i32 %55, %21\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7\l  %62 = fadd contract float %59, %61\l  %63 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  store float %62, float addrspace(1)* %63, align 4, !tbaa !7\l  %64 = or i32 %27, 4\l  %65 = add nsw i32 %64, %21\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %66\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7\l  %71 = fadd contract float %68, %70\l  %72 = getelementptr inbounds float, float addrspace(1)* %2, i64 %66\l  store float %71, float addrspace(1)* %72, align 4, !tbaa !7\l  %73 = or i32 %27, 5\l  %74 = add nsw i32 %73, %21\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7\l  %80 = fadd contract float %77, %79\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %75\l  store float %80, float addrspace(1)* %81, align 4, !tbaa !7\l  %82 = or i32 %27, 6\l  %83 = add nsw i32 %82, %21\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = fadd contract float %86, %88\l  %90 = getelementptr inbounds float, float addrspace(1)* %2, i64 %84\l  store float %89, float addrspace(1)* %90, align 4, !tbaa !7\l  %91 = or i32 %27, 7\l  %92 = add nsw i32 %91, %21\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7\l  %98 = fadd contract float %95, %97\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  store float %98, float addrspace(1)* %99, align 4, !tbaa !7\l  %100 = add nuw nsw i32 %27, 8\l  %101 = add i32 %28, 8\l  %102 = icmp eq i32 %101, %25\l  br i1 %102, label %103, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4679e10:s0 -> Node0x4679bc0;
	Node0x4679e10:s1 -> Node0x4679e10;
	Node0x4679bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%103:\l103:                                              \l  %104 = phi i32 [ 0, %18 ], [ %100, %26 ]\l  %105 = icmp eq i32 %22, 0\l  br i1 %105, label %120, label %106\l|{<s0>T|<s1>F}}"];
	Node0x4679bc0:s0 -> Node0x4679740;
	Node0x4679bc0:s1 -> Node0x467dbc0;
	Node0x467dbc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ %117, %106 ], [ %104, %103 ]\l  %108 = phi i32 [ %118, %106 ], [ 0, %103 ]\l  %109 = add nsw i32 %107, %21\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7\l  %115 = fadd contract float %112, %114\l  %116 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  store float %115, float addrspace(1)* %116, align 4, !tbaa !7\l  %117 = add nuw nsw i32 %107, 1\l  %118 = add i32 %108, 1\l  %119 = icmp eq i32 %118, %22\l  br i1 %119, label %120, label %106, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x467dbc0:s0 -> Node0x4679740;
	Node0x467dbc0:s1 -> Node0x467dbc0;
	Node0x4679740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%120:\l120:                                              \l  ret void\l}"];
}
