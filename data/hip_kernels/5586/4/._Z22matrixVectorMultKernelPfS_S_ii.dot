digraph "CFG for '_Z22matrixVectorMultKernelPfS_S_ii' function" {
	label="CFG for '_Z22matrixVectorMultKernelPfS_S_ii' function";

	Node0x55df770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp slt i32 %14, %3\l  br i1 %15, label %16, label %135\l|{<s0>T|<s1>F}}"];
	Node0x55df770:s0 -> Node0x55e1670;
	Node0x55df770:s1 -> Node0x55e1700;
	Node0x55e1670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %4, 0\l  br i1 %17, label %18, label %45\l|{<s0>T|<s1>F}}"];
	Node0x55e1670:s0 -> Node0x55e1950;
	Node0x55e1670:s1 -> Node0x55e19a0;
	Node0x55e1950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = mul nsw i32 %14, %4\l  %20 = and i32 %4, 7\l  %21 = icmp ult i32 %4, 8\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x55e1950:s0 -> Node0x55e1cf0;
	Node0x55e1950:s1 -> Node0x55e1d40;
	Node0x55e1d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i32 %4, -8\l  br label %49\l}"];
	Node0x55e1d40 -> Node0x55e1f40;
	Node0x55e1cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi float [ undef, %18 ], [ %131, %49 ]\l  %26 = phi i32 [ 0, %18 ], [ %132, %49 ]\l  %27 = phi float [ 0.000000e+00, %18 ], [ %131, %49 ]\l  %28 = icmp eq i32 %20, 0\l  br i1 %28, label %45, label %29\l|{<s0>T|<s1>F}}"];
	Node0x55e1cf0:s0 -> Node0x55e19a0;
	Node0x55e1cf0:s1 -> Node0x55e31b0;
	Node0x55e31b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %42, %29 ], [ %26, %24 ]\l  %31 = phi float [ %41, %29 ], [ %27, %24 ]\l  %32 = phi i32 [ %43, %29 ], [ 0, %24 ]\l  %33 = add nsw i32 %30, %19\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = zext i32 %30 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fadd contract float %36, %39\l  %41 = fadd contract float %31, %40\l  %42 = add nuw nsw i32 %30, 1\l  %43 = add i32 %32, 1\l  %44 = icmp eq i32 %43, %20\l  br i1 %44, label %45, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x55e31b0:s0 -> Node0x55e19a0;
	Node0x55e31b0:s1 -> Node0x55e31b0;
	Node0x55e19a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%45:\l45:                                               \l  %46 = phi float [ 0.000000e+00, %16 ], [ %25, %24 ], [ %41, %29 ]\l  %47 = sext i32 %14 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %2, i64 %47\l  store float %46, float addrspace(1)* %48, align 4, !tbaa !7\l  br label %135\l}"];
	Node0x55e19a0 -> Node0x55e1700;
	Node0x55e1f40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%49:\l49:                                               \l  %50 = phi i32 [ 0, %22 ], [ %132, %49 ]\l  %51 = phi float [ 0.000000e+00, %22 ], [ %131, %49 ]\l  %52 = phi i32 [ 0, %22 ], [ %133, %49 ]\l  %53 = add nsw i32 %50, %19\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %57 = zext i32 %50 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fadd contract float %56, %59\l  %61 = fadd contract float %51, %60\l  %62 = or i32 %50, 1\l  %63 = add nsw i32 %62, %19\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = zext i32 %62 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = fadd contract float %66, %69\l  %71 = fadd contract float %61, %70\l  %72 = or i32 %50, 2\l  %73 = add nsw i32 %72, %19\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = zext i32 %72 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fadd contract float %76, %79\l  %81 = fadd contract float %71, %80\l  %82 = or i32 %50, 3\l  %83 = add nsw i32 %82, %19\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = zext i32 %82 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = fadd contract float %86, %89\l  %91 = fadd contract float %81, %90\l  %92 = or i32 %50, 4\l  %93 = add nsw i32 %92, %19\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = zext i32 %92 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fadd contract float %96, %99\l  %101 = fadd contract float %91, %100\l  %102 = or i32 %50, 5\l  %103 = add nsw i32 %102, %19\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = zext i32 %102 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %110 = fadd contract float %106, %109\l  %111 = fadd contract float %101, %110\l  %112 = or i32 %50, 6\l  %113 = add nsw i32 %112, %19\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = zext i32 %112 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = fadd contract float %116, %119\l  %121 = fadd contract float %111, %120\l  %122 = or i32 %50, 7\l  %123 = add nsw i32 %122, %19\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = zext i32 %122 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %1, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = fadd contract float %126, %129\l  %131 = fadd contract float %121, %130\l  %132 = add nuw nsw i32 %50, 8\l  %133 = add i32 %52, 8\l  %134 = icmp eq i32 %133, %23\l  br i1 %134, label %24, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x55e1f40:s0 -> Node0x55e1cf0;
	Node0x55e1f40:s1 -> Node0x55e1f40;
	Node0x55e1700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%135:\l135:                                              \l  ret void\l}"];
}
