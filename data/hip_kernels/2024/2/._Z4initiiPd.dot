digraph "CFG for '_Z4initiiPd' function" {
	label="CFG for '_Z4initiiPd' function";

	Node0x63ea320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 2, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %13, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %20 = add i32 %18, %19\l  %21 = icmp sgt i32 %1, 0\l  br i1 %21, label %22, label %57\l|{<s0>T|<s1>F}}"];
	Node0x63ea320:s0 -> Node0x63edca0;
	Node0x63ea320:s1 -> Node0x63edd30;
	Node0x63edca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%22:\l22:                                               \l  %23 = icmp slt i32 %12, %0\l  %24 = icmp slt i32 %20, %0\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %31, label %26\l|{<s0>T|<s1>F}}"];
	Node0x63edca0:s0 -> Node0x63ee070;
	Node0x63edca0:s1 -> Node0x63ee0c0;
	Node0x63ee0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%26:\l26:                                               \l  %27 = and i32 %1, 7\l  %28 = icmp ult i32 %1, 8\l  br i1 %28, label %51, label %29\l|{<s0>T|<s1>F}}"];
	Node0x63ee0c0:s0 -> Node0x63ee380;
	Node0x63ee0c0:s1 -> Node0x63ee3d0;
	Node0x63ee3d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%29:\l29:                                               \l  %30 = and i32 %1, -8\l  br label %58\l}"];
	Node0x63ee3d0 -> Node0x63ee5d0;
	Node0x63ee070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = and i32 %1, 7\l  %33 = icmp ult i32 %1, 8\l  br i1 %33, label %36, label %34\l|{<s0>T|<s1>F}}"];
	Node0x63ee070:s0 -> Node0x63ed250;
	Node0x63ee070:s1 -> Node0x63ee930;
	Node0x63ee930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%34:\l34:                                               \l  %35 = and i32 %1, -8\l  br label %62\l}"];
	Node0x63ee930 -> Node0x63eeb00;
	Node0x63ed250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%36:\l36:                                               \l  %37 = phi i32 [ 0, %31 ], [ %120, %62 ]\l  %38 = icmp eq i32 %32, 0\l  br i1 %38, label %57, label %39\l|{<s0>T|<s1>F}}"];
	Node0x63ed250:s0 -> Node0x63edd30;
	Node0x63ed250:s1 -> Node0x63eed00;
	Node0x63eed00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %48, %39 ], [ %37, %36 ]\l  %41 = phi i32 [ %49, %39 ], [ 0, %36 ]\l  %42 = mul nsw i32 %40, %0\l  %43 = add i32 %42, %12\l  %44 = mul i32 %43, %0\l  %45 = add nsw i32 %44, %20\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %2, i64 %46\l  store double 0.000000e+00, double addrspace(1)* %47, align 8, !tbaa !7\l  %48 = add nuw nsw i32 %40, 1\l  %49 = add i32 %41, 1\l  %50 = icmp eq i32 %49, %32\l  br i1 %50, label %57, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x63eed00:s0 -> Node0x63edd30;
	Node0x63eed00:s1 -> Node0x63eed00;
	Node0x63ee380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%51:\l51:                                               \l  %52 = icmp eq i32 %27, 0\l  br i1 %52, label %57, label %53\l|{<s0>T|<s1>F}}"];
	Node0x63ee380:s0 -> Node0x63edd30;
	Node0x63ee380:s1 -> Node0x63f0390;
	Node0x63f0390 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = phi i32 [ %55, %53 ], [ 0, %51 ]\l  %55 = add i32 %54, 1\l  %56 = icmp eq i32 %55, %27\l  br i1 %56, label %57, label %53, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x63f0390:s0 -> Node0x63edd30;
	Node0x63f0390:s1 -> Node0x63f0390;
	Node0x63edd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%57:\l57:                                               \l  ret void\l}"];
	Node0x63ee5d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%58:\l58:                                               \l  %59 = phi i32 [ 0, %29 ], [ %60, %58 ]\l  %60 = add i32 %59, 8\l  %61 = icmp eq i32 %60, %30\l  br i1 %61, label %51, label %58, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x63ee5d0:s0 -> Node0x63ee380;
	Node0x63ee5d0:s1 -> Node0x63ee5d0;
	Node0x63eeb00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i32 [ 0, %34 ], [ %120, %62 ]\l  %64 = phi i32 [ 0, %34 ], [ %121, %62 ]\l  %65 = mul nsw i32 %63, %0\l  %66 = add i32 %65, %12\l  %67 = mul i32 %66, %0\l  %68 = add nsw i32 %67, %20\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %2, i64 %69\l  store double 0.000000e+00, double addrspace(1)* %70, align 8, !tbaa !7\l  %71 = or i32 %63, 1\l  %72 = mul nsw i32 %71, %0\l  %73 = add i32 %72, %12\l  %74 = mul i32 %73, %0\l  %75 = add nsw i32 %74, %20\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %2, i64 %76\l  store double 0.000000e+00, double addrspace(1)* %77, align 8, !tbaa !7\l  %78 = or i32 %63, 2\l  %79 = mul nsw i32 %78, %0\l  %80 = add i32 %79, %12\l  %81 = mul i32 %80, %0\l  %82 = add nsw i32 %81, %20\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %2, i64 %83\l  store double 0.000000e+00, double addrspace(1)* %84, align 8, !tbaa !7\l  %85 = or i32 %63, 3\l  %86 = mul nsw i32 %85, %0\l  %87 = add i32 %86, %12\l  %88 = mul i32 %87, %0\l  %89 = add nsw i32 %88, %20\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %2, i64 %90\l  store double 0.000000e+00, double addrspace(1)* %91, align 8, !tbaa !7\l  %92 = or i32 %63, 4\l  %93 = mul nsw i32 %92, %0\l  %94 = add i32 %93, %12\l  %95 = mul i32 %94, %0\l  %96 = add nsw i32 %95, %20\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %2, i64 %97\l  store double 0.000000e+00, double addrspace(1)* %98, align 8, !tbaa !7\l  %99 = or i32 %63, 5\l  %100 = mul nsw i32 %99, %0\l  %101 = add i32 %100, %12\l  %102 = mul i32 %101, %0\l  %103 = add nsw i32 %102, %20\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds double, double addrspace(1)* %2, i64 %104\l  store double 0.000000e+00, double addrspace(1)* %105, align 8, !tbaa !7\l  %106 = or i32 %63, 6\l  %107 = mul nsw i32 %106, %0\l  %108 = add i32 %107, %12\l  %109 = mul i32 %108, %0\l  %110 = add nsw i32 %109, %20\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds double, double addrspace(1)* %2, i64 %111\l  store double 0.000000e+00, double addrspace(1)* %112, align 8, !tbaa !7\l  %113 = or i32 %63, 7\l  %114 = mul nsw i32 %113, %0\l  %115 = add i32 %114, %12\l  %116 = mul i32 %115, %0\l  %117 = add nsw i32 %116, %20\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds double, double addrspace(1)* %2, i64 %118\l  store double 0.000000e+00, double addrspace(1)* %119, align 8, !tbaa !7\l  %120 = add nuw nsw i32 %63, 8\l  %121 = add i32 %64, 8\l  %122 = icmp eq i32 %121, %35\l  br i1 %122, label %36, label %62, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x63eeb00:s0 -> Node0x63ed250;
	Node0x63eeb00:s1 -> Node0x63eeb00;
}
