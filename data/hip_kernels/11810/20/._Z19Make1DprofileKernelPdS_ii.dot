digraph "CFG for '_Z19Make1DprofileKernelPdS_ii' function" {
	label="CFG for '_Z19Make1DprofileKernelPdS_ii' function";

	Node0x540af80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = add i32 %12, %5\l  %14 = icmp slt i32 %13, %3\l  br i1 %14, label %15, label %100\l|{<s0>T|<s1>F}}"];
	Node0x540af80:s0 -> Node0x540ce50;
	Node0x540af80:s1 -> Node0x540cee0;
	Node0x540ce50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = icmp sgt i32 %2, 0\l  br i1 %16, label %17, label %94\l|{<s0>T|<s1>F}}"];
	Node0x540ce50:s0 -> Node0x540c680;
	Node0x540ce50:s1 -> Node0x540d1c0;
	Node0x540c680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = mul nsw i32 %13, %2\l  %19 = and i32 %2, 7\l  %20 = icmp ult i32 %2, 8\l  br i1 %20, label %77, label %21\l|{<s0>T|<s1>F}}"];
	Node0x540c680:s0 -> Node0x540d4d0;
	Node0x540c680:s1 -> Node0x540d520;
	Node0x540d520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %2, -8\l  br label %23\l}"];
	Node0x540d520 -> Node0x540d720;
	Node0x540d720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%23:\l23:                                               \l  %24 = phi double [ 0.000000e+00, %21 ], [ %73, %23 ]\l  %25 = phi i32 [ 0, %21 ], [ %74, %23 ]\l  %26 = phi i32 [ 0, %21 ], [ %75, %23 ]\l  %27 = add nsw i32 %25, %18\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds double, double addrspace(1)* %0, i64 %28\l  %30 = load double, double addrspace(1)* %29, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %31 = fadd contract double %24, %30\l  %32 = or i32 %25, 1\l  %33 = add nsw i32 %32, %18\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %0, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %37 = fadd contract double %31, %36\l  %38 = or i32 %25, 2\l  %39 = add nsw i32 %38, %18\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds double, double addrspace(1)* %0, i64 %40\l  %42 = load double, double addrspace(1)* %41, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %43 = fadd contract double %37, %42\l  %44 = or i32 %25, 3\l  %45 = add nsw i32 %44, %18\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %0, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %49 = fadd contract double %43, %48\l  %50 = or i32 %25, 4\l  %51 = add nsw i32 %50, %18\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %0, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %55 = fadd contract double %49, %54\l  %56 = or i32 %25, 5\l  %57 = add nsw i32 %56, %18\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds double, double addrspace(1)* %0, i64 %58\l  %60 = load double, double addrspace(1)* %59, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %61 = fadd contract double %55, %60\l  %62 = or i32 %25, 6\l  %63 = add nsw i32 %62, %18\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %0, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %67 = fadd contract double %61, %66\l  %68 = or i32 %25, 7\l  %69 = add nsw i32 %68, %18\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %0, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %73 = fadd contract double %67, %72\l  %74 = add nuw nsw i32 %25, 8\l  %75 = add i32 %26, 8\l  %76 = icmp eq i32 %75, %22\l  br i1 %76, label %77, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x540d720:s0 -> Node0x540d4d0;
	Node0x540d720:s1 -> Node0x540d720;
	Node0x540d4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%77:\l77:                                               \l  %78 = phi double [ undef, %17 ], [ %73, %23 ]\l  %79 = phi double [ 0.000000e+00, %17 ], [ %73, %23 ]\l  %80 = phi i32 [ 0, %17 ], [ %74, %23 ]\l  %81 = icmp eq i32 %19, 0\l  br i1 %81, label %94, label %82\l|{<s0>T|<s1>F}}"];
	Node0x540d4d0:s0 -> Node0x540d1c0;
	Node0x540d4d0:s1 -> Node0x5411c00;
	Node0x5411c00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%82:\l82:                                               \l  %83 = phi double [ %90, %82 ], [ %79, %77 ]\l  %84 = phi i32 [ %91, %82 ], [ %80, %77 ]\l  %85 = phi i32 [ %92, %82 ], [ 0, %77 ]\l  %86 = add nsw i32 %84, %18\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %0, i64 %87\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %90 = fadd contract double %83, %89\l  %91 = add nuw nsw i32 %84, 1\l  %92 = add i32 %85, 1\l  %93 = icmp eq i32 %92, %19\l  br i1 %93, label %94, label %82, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5411c00:s0 -> Node0x540d1c0;
	Node0x5411c00:s1 -> Node0x5411c00;
	Node0x540d1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%94:\l94:                                               \l  %95 = phi double [ 0.000000e+00, %15 ], [ %78, %77 ], [ %90, %82 ]\l  %96 = sitofp i32 %2 to double\l  %97 = fdiv contract double %95, %96\l  %98 = sext i32 %13 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %1, i64 %98\l  store double %97, double addrspace(1)* %99, align 8, !tbaa !7\l  br label %100\l}"];
	Node0x540d1c0 -> Node0x540cee0;
	Node0x540cee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%100:\l100:                                              \l  ret void\l}"];
}
