digraph "CFG for '_Z14Substep1KernelPdS_S_S_S_S_S_S_S_S_S_diididd' function" {
	label="CFG for '_Z14Substep1KernelPdS_S_S_S_S_S_S_S_S_S_diididd' function";

	Node0x450a810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%18:\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %20 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %22 = getelementptr i8, i8 addrspace(4)* %20, i64 4\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 4, !range !5, !invariant.load !6\l  %25 = zext i16 %24 to i32\l  %26 = mul i32 %21, %25\l  %27 = add i32 %26, %19\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %29 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %30 = getelementptr i8, i8 addrspace(4)* %20, i64 6\l  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*\l  %32 = load i16, i16 addrspace(4)* %31, align 2, !range !5, !invariant.load !6\l  %33 = zext i16 %32 to i32\l  %34 = mul i32 %29, %33\l  %35 = add i32 %34, %28\l  %36 = icmp sgt i32 %35, 0\l  %37 = icmp slt i32 %35, %12\l  %38 = select i1 %36, i1 %37, i1 false\l  %39 = icmp slt i32 %27, %13\l  %40 = select i1 %38, i1 %39, i1 false\l  br i1 %40, label %41, label %104\l|{<s0>T|<s1>F}}"];
	Node0x450a810:s0 -> Node0x450f370;
	Node0x450a810:s1 -> Node0x450f400;
	Node0x450f370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%41:\l41:                                               \l  %42 = mul nsw i32 %35, %13\l  %43 = add nsw i32 %42, %27\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds double, double addrspace(1)* %0, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %47 = add nsw i32 %35, -1\l  %48 = mul nsw i32 %47, %13\l  %49 = add nsw i32 %48, %27\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %0, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %53 = fsub contract double %46, %52\l  %54 = getelementptr inbounds double, double addrspace(1)* %1, i64 %44\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %56 = getelementptr inbounds double, double addrspace(1)* %1, i64 %50\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %58 = fadd contract double %55, %57\l  %59 = zext i32 %35 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %3, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %62 = getelementptr inbounds double, double addrspace(1)* %4, i64 %44\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %64 = getelementptr inbounds double, double addrspace(1)* %4, i64 %50\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %66 = fsub contract double %63, %65\l  %67 = fmul contract double %61, %66\l  %68 = getelementptr inbounds double, double addrspace(1)* %9, i64 %44\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %70 = add nsw i32 %27, 1\l  %71 = srem i32 %70, %13\l  %72 = add nsw i32 %71, %42\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %9, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %76 = fadd contract double %69, %75\l  %77 = getelementptr inbounds double, double addrspace(1)* %9, i64 %50\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %79 = fadd contract double %76, %78\l  %80 = add nsw i32 %71, %48\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %9, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %84 = fadd contract double %79, %83\l  %85 = fmul contract double %84, 2.500000e-01\l  %86 = getelementptr inbounds double, double addrspace(1)* %5, i64 %59\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %88 = fmul contract double %87, %14\l  %89 = fadd contract double %85, %88\l  %90 = fmul contract double %89, %89\l  %91 = fmul contract double %53, -2.000000e+00\l  %92 = fdiv contract double %91, %58\l  %93 = fmul contract double %61, %92\l  %94 = fsub contract double %93, %67\l  %95 = getelementptr inbounds double, double addrspace(1)* %6, i64 %59\l  %96 = load double, double addrspace(1)* %95, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %97 = fmul contract double %96, %90\l  %98 = fadd contract double %94, %97\l  %99 = getelementptr inbounds double, double addrspace(1)* %7, i64 %44\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %101 = fmul contract double %98, %11\l  %102 = fadd contract double %100, %101\l  %103 = getelementptr inbounds double, double addrspace(1)* %2, i64 %44\l  store double %102, double addrspace(1)* %103, align 8, !tbaa !7\l  br label %104\l}"];
	Node0x450f370 -> Node0x450f400;
	Node0x450f400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%104:\l104:                                              \l  %105 = select i1 %37, i1 %39, i1 false\l  br i1 %105, label %106, label %358\l|{<s0>T|<s1>F}}"];
	Node0x450f400:s0 -> Node0x4513070;
	Node0x450f400:s1 -> Node0x45130c0;
	Node0x4513070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%106:\l106:                                              \l  %107 = fmul contract double %16, 5.000000e-01\l  %108 = sext i32 %35 to i64\l  %109 = getelementptr inbounds double, double addrspace(1)* %10, i64 %108\l  %110 = load double, double addrspace(1)* %109, align 8, !tbaa !7\l  %111 = fadd contract double %17, -2.500000e+00\l  %112 = tail call double @llvm.fabs.f64(double %110)\l  %113 = tail call double @llvm.amdgcn.frexp.mant.f64(double %112)\l  %114 = fcmp olt double %113, 0x3FE5555555555555\l  %115 = zext i1 %114 to i32\l  %116 = tail call double @llvm.amdgcn.ldexp.f64(double %113, i32 %115)\l  %117 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %112)\l  %118 = sub nsw i32 %117, %115\l  %119 = fadd double %116, -1.000000e+00\l  %120 = fadd double %116, 1.000000e+00\l  %121 = fadd double %120, -1.000000e+00\l  %122 = fsub double %116, %121\l  %123 = tail call double @llvm.amdgcn.rcp.f64(double %120)\l  %124 = fneg double %120\l  %125 = tail call double @llvm.fma.f64(double %124, double %123, double\l... 1.000000e+00)\l  %126 = tail call double @llvm.fma.f64(double %125, double %123, double %123)\l  %127 = tail call double @llvm.fma.f64(double %124, double %126, double\l... 1.000000e+00)\l  %128 = tail call double @llvm.fma.f64(double %127, double %126, double %126)\l  %129 = fmul double %119, %128\l  %130 = fmul double %120, %129\l  %131 = fneg double %130\l  %132 = tail call double @llvm.fma.f64(double %129, double %120, double %131)\l  %133 = tail call double @llvm.fma.f64(double %129, double %122, double %132)\l  %134 = fadd double %130, %133\l  %135 = fsub double %134, %130\l  %136 = fsub double %133, %135\l  %137 = fsub double %119, %134\l  %138 = fsub double %119, %137\l  %139 = fsub double %138, %134\l  %140 = fsub double %139, %136\l  %141 = fadd double %137, %140\l  %142 = fmul double %128, %141\l  %143 = fadd double %129, %142\l  %144 = fsub double %143, %129\l  %145 = fsub double %142, %144\l  %146 = fmul double %143, %143\l  %147 = fneg double %146\l  %148 = tail call double @llvm.fma.f64(double %143, double %143, double %147)\l  %149 = fmul double %145, 2.000000e+00\l  %150 = tail call double @llvm.fma.f64(double %143, double %149, double %148)\l  %151 = fadd double %146, %150\l  %152 = fsub double %151, %146\l  %153 = fsub double %150, %152\l  %154 = tail call double @llvm.fma.f64(double %151, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %155 = tail call double @llvm.fma.f64(double %151, double %154, double\l... 0x3FBE25E43ABE935A)\l  %156 = tail call double @llvm.fma.f64(double %151, double %155, double\l... 0x3FC110EF47E6C9C2)\l  %157 = tail call double @llvm.fma.f64(double %151, double %156, double\l... 0x3FC3B13BCFA74449)\l  %158 = tail call double @llvm.fma.f64(double %151, double %157, double\l... 0x3FC745D171BF3C30)\l  %159 = tail call double @llvm.fma.f64(double %151, double %158, double\l... 0x3FCC71C71C7792CE)\l  %160 = tail call double @llvm.fma.f64(double %151, double %159, double\l... 0x3FD24924924920DA)\l  %161 = tail call double @llvm.fma.f64(double %151, double %160, double\l... 0x3FD999999999999C)\l  %162 = sitofp i32 %118 to double\l  %163 = fmul double %162, 0x3FE62E42FEFA39EF\l  %164 = fneg double %163\l  %165 = tail call double @llvm.fma.f64(double %162, double\l... 0x3FE62E42FEFA39EF, double %164)\l  %166 = tail call double @llvm.fma.f64(double %162, double\l... 0x3C7ABC9E3B39803F, double %165)\l  %167 = fadd double %163, %166\l  %168 = fsub double %167, %163\l  %169 = fsub double %166, %168\l  %170 = tail call double @llvm.amdgcn.ldexp.f64(double %143, i32 1)\l  %171 = tail call double @llvm.amdgcn.ldexp.f64(double %145, i32 1)\l  %172 = fmul double %143, %151\l  %173 = fneg double %172\l  %174 = tail call double @llvm.fma.f64(double %151, double %143, double %173)\l  %175 = tail call double @llvm.fma.f64(double %151, double %145, double %174)\l  %176 = tail call double @llvm.fma.f64(double %153, double %143, double %175)\l  %177 = fadd double %172, %176\l  %178 = fsub double %177, %172\l  %179 = fsub double %176, %178\l  %180 = fmul double %151, %161\l  %181 = fneg double %180\l  %182 = tail call double @llvm.fma.f64(double %151, double %161, double %181)\l  %183 = tail call double @llvm.fma.f64(double %153, double %161, double %182)\l  %184 = fadd double %180, %183\l  %185 = fsub double %184, %180\l  %186 = fsub double %183, %185\l  %187 = fadd double %184, 0x3FE5555555555555\l  %188 = fadd double %187, 0xBFE5555555555555\l  %189 = fsub double %184, %188\l  %190 = fadd double %186, 0x3C8543B0D5DF274D\l  %191 = fadd double %190, %189\l  %192 = fadd double %187, %191\l  %193 = fsub double %192, %187\l  %194 = fsub double %191, %193\l  %195 = fmul double %177, %192\l  %196 = fneg double %195\l  %197 = tail call double @llvm.fma.f64(double %177, double %192, double %196)\l  %198 = tail call double @llvm.fma.f64(double %177, double %194, double %197)\l  %199 = tail call double @llvm.fma.f64(double %179, double %192, double %198)\l  %200 = fadd double %195, %199\l  %201 = fsub double %200, %195\l  %202 = fsub double %199, %201\l  %203 = fadd double %170, %200\l  %204 = fsub double %203, %170\l  %205 = fsub double %200, %204\l  %206 = fadd double %171, %202\l  %207 = fadd double %206, %205\l  %208 = fadd double %203, %207\l  %209 = fsub double %208, %203\l  %210 = fsub double %207, %209\l  %211 = fadd double %167, %208\l  %212 = fsub double %211, %167\l  %213 = fsub double %211, %212\l  %214 = fsub double %167, %213\l  %215 = fsub double %208, %212\l  %216 = fadd double %215, %214\l  %217 = fadd double %169, %210\l  %218 = fsub double %217, %169\l  %219 = fsub double %217, %218\l  %220 = fsub double %169, %219\l  %221 = fsub double %210, %218\l  %222 = fadd double %221, %220\l  %223 = fadd double %217, %216\l  %224 = fadd double %211, %223\l  %225 = fsub double %224, %211\l  %226 = fsub double %223, %225\l  %227 = fadd double %222, %226\l  %228 = fadd double %224, %227\l  %229 = fsub double %228, %224\l  %230 = fsub double %227, %229\l  %231 = fmul double %111, %228\l  %232 = fneg double %231\l  %233 = tail call double @llvm.fma.f64(double %111, double %228, double %232)\l  %234 = tail call double @llvm.fma.f64(double %111, double %230, double %233)\l  %235 = fadd double %231, %234\l  %236 = fsub double %235, %231\l  %237 = fsub double %234, %236\l  %238 = tail call double @llvm.fabs.f64(double %231) #3\l  %239 = fcmp oeq double %238, 0x7FF0000000000000\l  %240 = select i1 %239, double %231, double %235\l  %241 = tail call double @llvm.fabs.f64(double %240) #3\l  %242 = fcmp oeq double %241, 0x7FF0000000000000\l  %243 = select i1 %242, double 0.000000e+00, double %237\l  %244 = fmul double %240, 0x3FF71547652B82FE\l  %245 = tail call double @llvm.rint.f64(double %244)\l  %246 = fneg double %245\l  %247 = tail call double @llvm.fma.f64(double %246, double\l... 0x3FE62E42FEFA39EF, double %240)\l  %248 = tail call double @llvm.fma.f64(double %246, double\l... 0x3C7ABC9E3B39803F, double %247)\l  %249 = tail call double @llvm.fma.f64(double %248, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %250 = tail call double @llvm.fma.f64(double %248, double %249, double\l... 0x3EC71DEE623FDE64)\l  %251 = tail call double @llvm.fma.f64(double %248, double %250, double\l... 0x3EFA01997C89E6B0)\l  %252 = tail call double @llvm.fma.f64(double %248, double %251, double\l... 0x3F2A01A014761F6E)\l  %253 = tail call double @llvm.fma.f64(double %248, double %252, double\l... 0x3F56C16C1852B7B0)\l  %254 = tail call double @llvm.fma.f64(double %248, double %253, double\l... 0x3F81111111122322)\l  %255 = tail call double @llvm.fma.f64(double %248, double %254, double\l... 0x3FA55555555502A1)\l  %256 = tail call double @llvm.fma.f64(double %248, double %255, double\l... 0x3FC5555555555511)\l  %257 = tail call double @llvm.fma.f64(double %248, double %256, double\l... 0x3FE000000000000B)\l  %258 = tail call double @llvm.fma.f64(double %248, double %257, double\l... 1.000000e+00)\l  %259 = tail call double @llvm.fma.f64(double %248, double %258, double\l... 1.000000e+00)\l  %260 = fptosi double %245 to i32\l  %261 = tail call double @llvm.amdgcn.ldexp.f64(double %259, i32 %260)\l  %262 = fcmp ogt double %240, 1.024000e+03\l  %263 = select i1 %262, double 0x7FF0000000000000, double %261\l  %264 = fcmp olt double %240, -1.075000e+03\l  %265 = select i1 %264, double 0.000000e+00, double %263\l  %266 = tail call double @llvm.fma.f64(double %265, double %243, double %265)\l  %267 = tail call double @llvm.fabs.f64(double %265) #3\l  %268 = fcmp oeq double %267, 0x7FF0000000000000\l  %269 = select i1 %268, double %265, double %266\l  %270 = tail call double @llvm.fabs.f64(double %111)\l  %271 = tail call double @llvm.trunc.f64(double %270)\l  %272 = fcmp oeq double %270, %271\l  %273 = zext i1 %272 to i32\l  %274 = fmul double %271, 5.000000e-01\l  %275 = tail call double @llvm.amdgcn.fract.f64(double %274)\l  %276 = tail call i1 @llvm.amdgcn.class.f64(double %274, i32 516)\l  %277 = select i1 %276, double 0.000000e+00, double %275\l  %278 = fcmp oeq double %277, 0.000000e+00\l  %279 = and i1 %272, %278\l  %280 = zext i1 %279 to i32\l  %281 = add nuw nsw i32 %280, %273\l  %282 = icmp eq i32 %281, 1\l  %283 = fcmp olt double %110, 0.000000e+00\l  %284 = and i1 %282, %283\l  %285 = select i1 %284, double -0.000000e+00, double 0.000000e+00\l  %286 = tail call double @llvm.copysign.f64(double %269, double %285)\l  %287 = fcmp uge double %110, 0.000000e+00\l  %288 = icmp ne i32 %281, 0\l  %289 = select i1 %287, i1 true, i1 %288\l  %290 = select i1 %289, double %286, double 0x7FF8000000000000\l  %291 = fcmp oeq double %270, 0x7FF0000000000000\l  %292 = fcmp oeq double %112, 1.000000e+00\l  %293 = fadd double %112, -1.000000e+00\l  %294 = bitcast double %111 to \<2 x i32\>\l  %295 = extractelement \<2 x i32\> %294, i64 1\l  %296 = bitcast double %293 to \<2 x i32\>\l  %297 = extractelement \<2 x i32\> %296, i64 1\l  %298 = xor i32 %297, %295\l  %299 = icmp sgt i32 %298, -1\l  %300 = select i1 %299, double 0x7FF0000000000000, double 0.000000e+00\l  %301 = select i1 %292, double %112, double %300\l  %302 = select i1 %291, double %301, double %290\l  %303 = fcmp oeq double %112, 0x7FF0000000000000\l  %304 = fcmp oeq double %110, 0.000000e+00\l  %305 = or i1 %304, %303\l  %306 = fcmp olt double %111, 0.000000e+00\l  %307 = xor i1 %306, %304\l  %308 = select i1 %307, double 0.000000e+00, double 0x7FF0000000000000\l  %309 = select i1 %282, double %110, double 0.000000e+00\l  %310 = tail call double @llvm.copysign.f64(double %308, double %309)\l  %311 = select i1 %305, double %310, double %302\l  %312 = fcmp uno double %110, %111\l  %313 = select i1 %312, double 0x7FF8000000000000, double %311\l  %314 = fcmp oeq double %110, 1.000000e+00\l  %315 = fcmp oeq double %111, 0.000000e+00\l  %316 = or i1 %315, %314\l  %317 = select i1 %316, double 1.000000e+00, double %313\l  %318 = fmul contract double %107, %317\l  %319 = sitofp i32 %13 to double\l  %320 = fdiv contract double 0x401921FB54442D18, %319\l  %321 = fmul contract double %320, %110\l  %322 = fdiv contract double 1.000000e+00, %321\l  %323 = mul nsw i32 %35, %13\l  %324 = add nsw i32 %323, %27\l  %325 = sext i32 %324 to i64\l  %326 = getelementptr inbounds double, double addrspace(1)* %0, i64 %325\l  %327 = load double, double addrspace(1)* %326, align 8, !tbaa !7\l  %328 = add nsw i32 %13, -1\l  %329 = add i32 %328, %27\l  %330 = srem i32 %329, %13\l  %331 = add nsw i32 %330, %323\l  %332 = sext i32 %331 to i64\l  %333 = getelementptr inbounds double, double addrspace(1)* %0, i64 %332\l  %334 = load double, double addrspace(1)* %333, align 8, !tbaa !7\l  %335 = fsub contract double %327, %334\l  %336 = fmul contract double %335, 2.000000e+00\l  %337 = getelementptr inbounds double, double addrspace(1)* %1, i64 %325\l  %338 = load double, double addrspace(1)* %337, align 8, !tbaa !7\l  %339 = getelementptr inbounds double, double addrspace(1)* %1, i64 %332\l  %340 = load double, double addrspace(1)* %339, align 8, !tbaa !7\l  %341 = fadd contract double %338, %340\l  %342 = fdiv contract double %336, %341\l  %343 = fmul contract double %322, %342\l  %344 = getelementptr inbounds double, double addrspace(1)* %4, i64 %325\l  %345 = load double, double addrspace(1)* %344, align 8, !tbaa !7\l  %346 = getelementptr inbounds double, double addrspace(1)* %4, i64 %332\l  %347 = load double, double addrspace(1)* %346, align 8, !tbaa !7\l  %348 = fsub contract double %345, %347\l  %349 = fmul contract double %322, %348\l  %350 = getelementptr inbounds double, double addrspace(1)* %9, i64 %325\l  %351 = load double, double addrspace(1)* %350, align 8, !tbaa !7\l  %352 = fadd contract double %343, %349\l  %353 = fmul contract double %352, %11\l  %354 = fsub contract double %351, %353\l  %355 = getelementptr inbounds double, double addrspace(1)* %8, i64 %325\l  %356 = fmul contract double %318, %11\l  %357 = fadd contract double %354, %356\l  store double %357, double addrspace(1)* %355, align 8, !tbaa !7\l  br label %358\l}"];
	Node0x4513070 -> Node0x45130c0;
	Node0x45130c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%358:\l358:                                              \l  ret void\l}"];
}
