digraph "CFG for '_Z15InitLabelKernelPddddS_ii' function" {
	label="CFG for '_Z15InitLabelKernelPddddS_ii' function";

	Node0x5dcb520 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %10, %14\l  %16 = add i32 %15, %8\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = add i32 %23, %17\l  %25 = icmp slt i32 %24, %5\l  %26 = icmp slt i32 %16, %6\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %265\l|{<s0>T|<s1>F}}"];
	Node0x5dcb520:s0 -> Node0x5dcef90;
	Node0x5dcb520:s1 -> Node0x5dcf020;
	Node0x5dcef90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%28:\l28:                                               \l  %29 = sitofp i32 %16 to double\l  %30 = sitofp i32 %6 to double\l  %31 = fdiv contract double %29, %30\l  %32 = fmul contract double %31, 2.000000e+00\l  %33 = fmul contract double %32, 0x400921FB54442D18\l  %34 = sext i32 %24 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %4, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %37 = tail call double @llvm.fabs.f64(double %33)\l  %38 = fcmp olt double %37, 0x41D0000000000000\l  br i1 %38, label %39, label %96\l|{<s0>T|<s1>F}}"];
	Node0x5dcef90:s0 -> Node0x5dd0540;
	Node0x5dcef90:s1 -> Node0x5dd05d0;
	Node0x5dd0540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%39:\l39:                                               \l  %40 = fmul double %37, 0x3FE45F306DC9C883\l  %41 = tail call double @llvm.rint.f64(double %40)\l  %42 = tail call double @llvm.fma.f64(double %41, double 0xBFF921FB54442D18,\l... double %37)\l  %43 = tail call double @llvm.fma.f64(double %41, double 0xBC91A62633145C00,\l... double %42)\l  %44 = fmul double %41, 0x3C91A62633145C00\l  %45 = fneg double %44\l  %46 = tail call double @llvm.fma.f64(double %41, double 0x3C91A62633145C00,\l... double %45)\l  %47 = fsub double %42, %44\l  %48 = fsub double %42, %47\l  %49 = fsub double %48, %44\l  %50 = fsub double %47, %43\l  %51 = fadd double %50, %49\l  %52 = fsub double %51, %46\l  %53 = tail call double @llvm.fma.f64(double %41, double 0xB97B839A252049C0,\l... double %52)\l  %54 = fadd double %43, %53\l  %55 = fsub double %54, %43\l  %56 = fsub double %53, %55\l  %57 = fptosi double %41 to i32\l  %58 = fmul double %54, %54\l  %59 = fmul double %58, 5.000000e-01\l  %60 = fsub double 1.000000e+00, %59\l  %61 = fsub double 1.000000e+00, %60\l  %62 = fsub double %61, %59\l  %63 = fmul double %58, %58\l  %64 = tail call double @llvm.fma.f64(double %58, double 0xBDA907DB46CC5E42,\l... double 0x3E21EEB69037AB78)\l  %65 = tail call double @llvm.fma.f64(double %58, double %64, double\l... 0xBE927E4FA17F65F6)\l  %66 = tail call double @llvm.fma.f64(double %58, double %65, double\l... 0x3EFA01A019F4EC90)\l  %67 = tail call double @llvm.fma.f64(double %58, double %66, double\l... 0xBF56C16C16C16967)\l  %68 = tail call double @llvm.fma.f64(double %58, double %67, double\l... 0x3FA5555555555555)\l  %69 = fneg double %56\l  %70 = tail call double @llvm.fma.f64(double %54, double %69, double %62)\l  %71 = tail call double @llvm.fma.f64(double %63, double %68, double %70)\l  %72 = fadd double %60, %71\l  %73 = tail call double @llvm.fma.f64(double %58, double 0x3DE5E0B2F9A43BB8,\l... double 0xBE5AE600B42FDFA7)\l  %74 = tail call double @llvm.fma.f64(double %58, double %73, double\l... 0x3EC71DE3796CDE01)\l  %75 = tail call double @llvm.fma.f64(double %58, double %74, double\l... 0xBF2A01A019E83E5C)\l  %76 = tail call double @llvm.fma.f64(double %58, double %75, double\l... 0x3F81111111110BB3)\l  %77 = fneg double %58\l  %78 = fmul double %54, %77\l  %79 = fmul double %56, 5.000000e-01\l  %80 = tail call double @llvm.fma.f64(double %78, double %76, double %79)\l  %81 = tail call double @llvm.fma.f64(double %58, double %80, double %69)\l  %82 = tail call double @llvm.fma.f64(double %78, double 0xBFC5555555555555,\l... double %81)\l  %83 = fsub double %54, %82\l  %84 = fneg double %83\l  %85 = and i32 %57, 1\l  %86 = icmp eq i32 %85, 0\l  %87 = select i1 %86, double %72, double %84\l  %88 = bitcast double %87 to \<2 x i32\>\l  %89 = shl i32 %57, 30\l  %90 = and i32 %89, -2147483648\l  %91 = extractelement \<2 x i32\> %88, i64 1\l  %92 = xor i32 %91, %90\l  %93 = insertelement \<2 x i32\> %88, i32 %92, i64 1\l  %94 = tail call i1 @llvm.amdgcn.class.f64(double %37, i32 504)\l  %95 = select i1 %94, \<2 x i32\> %93, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %210\l}"];
	Node0x5dd0540 -> Node0x5dd4530;
	Node0x5dd05d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%96:\l96:                                               \l  %97 = tail call double @llvm.amdgcn.trig.preop.f64(double %37, i32 0)\l  %98 = tail call double @llvm.amdgcn.trig.preop.f64(double %37, i32 1)\l  %99 = tail call double @llvm.amdgcn.trig.preop.f64(double %37, i32 2)\l  %100 = fcmp oge double %37, 0x7B00000000000000\l  %101 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 -128)\l  %102 = select i1 %100, double %101, double %37\l  %103 = fmul double %99, %102\l  %104 = fneg double %103\l  %105 = tail call double @llvm.fma.f64(double %99, double %102, double %104)\l  %106 = fmul double %98, %102\l  %107 = fneg double %106\l  %108 = tail call double @llvm.fma.f64(double %98, double %102, double %107)\l  %109 = fmul double %97, %102\l  %110 = fneg double %109\l  %111 = tail call double @llvm.fma.f64(double %97, double %102, double %110)\l  %112 = fadd double %106, %111\l  %113 = fsub double %112, %106\l  %114 = fsub double %112, %113\l  %115 = fsub double %111, %113\l  %116 = fsub double %106, %114\l  %117 = fadd double %115, %116\l  %118 = fadd double %103, %108\l  %119 = fsub double %118, %103\l  %120 = fsub double %118, %119\l  %121 = fsub double %108, %119\l  %122 = fsub double %103, %120\l  %123 = fadd double %121, %122\l  %124 = fadd double %118, %117\l  %125 = fsub double %124, %118\l  %126 = fsub double %124, %125\l  %127 = fsub double %117, %125\l  %128 = fsub double %118, %126\l  %129 = fadd double %127, %128\l  %130 = fadd double %123, %129\l  %131 = fadd double %105, %130\l  %132 = fadd double %109, %112\l  %133 = fsub double %132, %109\l  %134 = fsub double %112, %133\l  %135 = fadd double %134, %124\l  %136 = fsub double %135, %134\l  %137 = fsub double %124, %136\l  %138 = fadd double %137, %131\l  %139 = tail call double @llvm.amdgcn.ldexp.f64(double %132, i32 -2)\l  %140 = tail call double @llvm.amdgcn.fract.f64(double %139)\l  %141 = tail call i1 @llvm.amdgcn.class.f64(double %139, i32 516)\l  %142 = select i1 %141, double 0.000000e+00, double %140\l  %143 = tail call double @llvm.amdgcn.ldexp.f64(double %142, i32 2)\l  %144 = fadd double %143, %135\l  %145 = fcmp olt double %144, 0.000000e+00\l  %146 = select i1 %145, double 4.000000e+00, double 0.000000e+00\l  %147 = fadd double %143, %146\l  %148 = fadd double %135, %147\l  %149 = fptosi double %148 to i32\l  %150 = sitofp i32 %149 to double\l  %151 = fsub double %147, %150\l  %152 = fadd double %135, %151\l  %153 = fsub double %152, %151\l  %154 = fsub double %135, %153\l  %155 = fadd double %138, %154\l  %156 = fcmp oge double %152, 5.000000e-01\l  %157 = zext i1 %156 to i32\l  %158 = add nsw i32 %157, %149\l  %159 = select i1 %156, double 1.000000e+00, double 0.000000e+00\l  %160 = fsub double %152, %159\l  %161 = fadd double %160, %155\l  %162 = fsub double %161, %160\l  %163 = fsub double %155, %162\l  %164 = fmul double %161, 0x3FF921FB54442D18\l  %165 = fneg double %164\l  %166 = tail call double @llvm.fma.f64(double %161, double\l... 0x3FF921FB54442D18, double %165)\l  %167 = tail call double @llvm.fma.f64(double %161, double\l... 0x3C91A62633145C07, double %166)\l  %168 = tail call double @llvm.fma.f64(double %163, double\l... 0x3FF921FB54442D18, double %167)\l  %169 = fadd double %164, %168\l  %170 = fsub double %169, %164\l  %171 = fsub double %168, %170\l  %172 = fmul double %169, %169\l  %173 = fmul double %172, 5.000000e-01\l  %174 = fsub double 1.000000e+00, %173\l  %175 = fsub double 1.000000e+00, %174\l  %176 = fsub double %175, %173\l  %177 = fmul double %172, %172\l  %178 = tail call double @llvm.fma.f64(double %172, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %179 = tail call double @llvm.fma.f64(double %172, double %178, double\l... 0xBE927E4FA17F65F6)\l  %180 = tail call double @llvm.fma.f64(double %172, double %179, double\l... 0x3EFA01A019F4EC90)\l  %181 = tail call double @llvm.fma.f64(double %172, double %180, double\l... 0xBF56C16C16C16967)\l  %182 = tail call double @llvm.fma.f64(double %172, double %181, double\l... 0x3FA5555555555555)\l  %183 = fneg double %171\l  %184 = tail call double @llvm.fma.f64(double %169, double %183, double %176)\l  %185 = tail call double @llvm.fma.f64(double %177, double %182, double %184)\l  %186 = fadd double %174, %185\l  %187 = tail call double @llvm.fma.f64(double %172, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %188 = tail call double @llvm.fma.f64(double %172, double %187, double\l... 0x3EC71DE3796CDE01)\l  %189 = tail call double @llvm.fma.f64(double %172, double %188, double\l... 0xBF2A01A019E83E5C)\l  %190 = tail call double @llvm.fma.f64(double %172, double %189, double\l... 0x3F81111111110BB3)\l  %191 = fneg double %172\l  %192 = fmul double %169, %191\l  %193 = fmul double %171, 5.000000e-01\l  %194 = tail call double @llvm.fma.f64(double %192, double %190, double %193)\l  %195 = tail call double @llvm.fma.f64(double %172, double %194, double %183)\l  %196 = tail call double @llvm.fma.f64(double %192, double\l... 0xBFC5555555555555, double %195)\l  %197 = fsub double %169, %196\l  %198 = fneg double %197\l  %199 = and i32 %158, 1\l  %200 = icmp eq i32 %199, 0\l  %201 = select i1 %200, double %186, double %198\l  %202 = bitcast double %201 to \<2 x i32\>\l  %203 = shl i32 %158, 30\l  %204 = and i32 %203, -2147483648\l  %205 = extractelement \<2 x i32\> %202, i64 1\l  %206 = xor i32 %205, %204\l  %207 = insertelement \<2 x i32\> %202, i32 %206, i64 1\l  %208 = tail call i1 @llvm.amdgcn.class.f64(double %37, i32 504)\l  %209 = select i1 %208, \<2 x i32\> %207, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %210\l}"];
	Node0x5dd05d0 -> Node0x5dd4530;
	Node0x5dd4530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%210:\l210:                                              \l  %211 = phi i32 [ %89, %39 ], [ %203, %96 ]\l  %212 = phi i32 [ %85, %39 ], [ %199, %96 ]\l  %213 = phi double [ %83, %39 ], [ %197, %96 ]\l  %214 = phi double [ %72, %39 ], [ %186, %96 ]\l  %215 = phi \<2 x i32\> [ %95, %39 ], [ %209, %96 ]\l  %216 = phi i1 [ %94, %39 ], [ %208, %96 ]\l  %217 = bitcast \<2 x i32\> %215 to double\l  %218 = fmul contract double %36, %217\l  %219 = icmp eq i32 %212, 0\l  %220 = select i1 %219, double %213, double %214\l  %221 = bitcast double %220 to \<2 x i32\>\l  %222 = bitcast double %33 to \<2 x i32\>\l  %223 = extractelement \<2 x i32\> %222, i64 1\l  %224 = xor i32 %211, %223\l  %225 = and i32 %224, -2147483648\l  %226 = extractelement \<2 x i32\> %221, i64 1\l  %227 = xor i32 %226, %225\l  %228 = insertelement \<2 x i32\> %221, i32 %227, i64 1\l  %229 = select i1 %216, \<2 x i32\> %228, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %230 = bitcast \<2 x i32\> %229 to double\l  %231 = fmul contract double %36, %230\l  %232 = fsub contract double %218, %1\l  %233 = fmul contract double %232, %232\l  %234 = fsub contract double %231, %2\l  %235 = fmul contract double %234, %234\l  %236 = fadd contract double %233, %235\l  %237 = fcmp olt double %236, 0x1000000000000000\l  %238 = select i1 %237, double 0x4FF0000000000000, double 1.000000e+00\l  %239 = fmul double %236, %238\l  %240 = tail call double @llvm.amdgcn.rsq.f64(double %239)\l  %241 = fmul double %239, %240\l  %242 = fmul double %240, 5.000000e-01\l  %243 = fneg double %242\l  %244 = tail call double @llvm.fma.f64(double %243, double %241, double\l... 5.000000e-01)\l  %245 = tail call double @llvm.fma.f64(double %242, double %244, double %242)\l  %246 = tail call double @llvm.fma.f64(double %241, double %244, double %241)\l  %247 = fneg double %246\l  %248 = tail call double @llvm.fma.f64(double %247, double %246, double %239)\l  %249 = tail call double @llvm.fma.f64(double %248, double %245, double %246)\l  %250 = fneg double %249\l  %251 = tail call double @llvm.fma.f64(double %250, double %249, double %239)\l  %252 = tail call double @llvm.fma.f64(double %251, double %245, double %249)\l  %253 = select i1 %237, double 0x37F0000000000000, double 1.000000e+00\l  %254 = fmul double %253, %252\l  %255 = fcmp oeq double %239, 0.000000e+00\l  %256 = fcmp oeq double %239, 0x7FF0000000000000\l  %257 = or i1 %255, %256\l  %258 = select i1 %257, double %239, double %254\l  %259 = fcmp contract olt double %258, %3\l  %260 = mul nsw i32 %24, %6\l  %261 = add nsw i32 %260, %16\l  %262 = sext i32 %261 to i64\l  %263 = getelementptr inbounds double, double addrspace(1)* %0, i64 %262\l  %264 = select i1 %259, double 1.000000e+00, double 0.000000e+00\l  store double %264, double addrspace(1)* %263, align 8, !tbaa !7\l  br label %265\l}"];
	Node0x5dd4530 -> Node0x5dcf020;
	Node0x5dcf020 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%265:\l265:                                              \l  ret void\l}"];
}
