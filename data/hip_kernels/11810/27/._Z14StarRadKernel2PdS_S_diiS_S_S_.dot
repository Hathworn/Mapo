digraph "CFG for '_Z14StarRadKernel2PdS_S_diiS_S_S_' function" {
	label="CFG for '_Z14StarRadKernel2PdS_S_diiS_S_S_' function";

	Node0x5c1b6a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %12, %16\l  %18 = add i32 %17, %10\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !5, !invariant.load !6\l  %24 = zext i16 %23 to i32\l  %25 = mul i32 %20, %24\l  %26 = add i32 %25, %19\l  %27 = icmp slt i32 %26, %4\l  %28 = icmp slt i32 %18, %5\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %87\l|{<s0>T|<s1>F}}"];
	Node0x5c1b6a0:s0 -> Node0x5c1fc70;
	Node0x5c1b6a0:s1 -> Node0x5c1fd00;
	Node0x5c1fc70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %26, %5\l  %32 = add nsw i32 %31, %18\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %36 = fcmp contract ogt double %35, 0.000000e+00\l  %37 = icmp sgt i32 %26, 0\l  %38 = select i1 %36, i1 %37, i1 false\l  br i1 %38, label %39, label %63\l|{<s0>T|<s1>F}}"];
	Node0x5c1fc70:s0 -> Node0x5c20fb0;
	Node0x5c1fc70:s1 -> Node0x5c21040;
	Node0x5c20fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%39:\l39:                                               \l  %40 = add nsw i32 %26, -1\l  %41 = mul nsw i32 %40, %5\l  %42 = add nsw i32 %41, %18\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %0, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %46 = zext i32 %26 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %7, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %49 = zext i32 %40 to i64\l  %50 = getelementptr inbounds double, double addrspace(1)* %7, i64 %49\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %52 = fsub contract double %48, %51\l  %53 = fmul contract double %35, %3\l  %54 = fsub contract double %52, %53\l  %55 = fmul contract double %54, 5.000000e-01\l  %56 = mul nsw i32 %18, %4\l  %57 = add nsw i32 %40, %56\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds double, double addrspace(1)* %8, i64 %58\l  %60 = load double, double addrspace(1)* %59, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %61 = fmul contract double %60, %55\l  %62 = fadd contract double %45, %61\l  br label %84\l}"];
	Node0x5c20fb0 -> Node0x5c22520;
	Node0x5c21040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%63:\l63:                                               \l  %64 = getelementptr inbounds double, double addrspace(1)* %0, i64 %33\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %66 = add nsw i32 %26, 1\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %7, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %70 = sext i32 %26 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %7, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %73 = fsub contract double %69, %72\l  %74 = fmul contract double %35, %3\l  %75 = fadd contract double %74, %73\l  %76 = fmul contract double %75, 5.000000e-01\l  %77 = mul nsw i32 %18, %4\l  %78 = add nsw i32 %26, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds double, double addrspace(1)* %8, i64 %79\l  %81 = load double, double addrspace(1)* %80, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %82 = fmul contract double %81, %76\l  %83 = fsub contract double %65, %82\l  br label %84\l}"];
	Node0x5c21040 -> Node0x5c22520;
	Node0x5c22520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%84:\l84:                                               \l  %85 = phi double [ %62, %39 ], [ %83, %63 ]\l  %86 = getelementptr inbounds double, double addrspace(1)* %2, i64 %33\l  store double %85, double addrspace(1)* %86, align 8, !tbaa !7\l  br label %87\l}"];
	Node0x5c22520 -> Node0x5c1fd00;
	Node0x5c1fd00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%87:\l87:                                               \l  %88 = icmp eq i32 %26, 0\l  %89 = select i1 %88, i1 %28, i1 false\l  br i1 %89, label %90, label %97\l|{<s0>T|<s1>F}}"];
	Node0x5c1fd00:s0 -> Node0x5c237b0;
	Node0x5c1fd00:s1 -> Node0x5c23800;
	Node0x5c237b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%90:\l90:                                               \l  %91 = mul nsw i32 %5, %4\l  %92 = add nsw i32 %18, %91\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %2, i64 %93\l  store double 0.000000e+00, double addrspace(1)* %94, align 8, !tbaa !7\l  %95 = sext i32 %18 to i64\l  %96 = getelementptr inbounds double, double addrspace(1)* %2, i64 %95\l  store double 0.000000e+00, double addrspace(1)* %96, align 8, !tbaa !7\l  br label %97\l}"];
	Node0x5c237b0 -> Node0x5c23800;
	Node0x5c23800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%97:\l97:                                               \l  ret void\l}"];
}
