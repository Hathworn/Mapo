digraph "CFG for '_Z21ConditionCFLKernel2D1PdS_S_iiS_S_S_iS_S_S_' function" {
	label="CFG for '_Z21ConditionCFLKernel2D1PdS_S_iiS_S_S_iS_S_S_' function";

	Node0x54afea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !5, !invariant.load !6\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = add i32 %20, %13\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %24 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 2, !range !5, !invariant.load !6\l  %27 = zext i16 %26 to i32\l  %28 = mul i32 %23, %27\l  %29 = add i32 %28, %22\l  %30 = icmp sgt i32 %29, 0\l  %31 = icmp slt i32 %29, %4\l  %32 = select i1 %30, i1 %31, i1 false\l  %33 = icmp slt i32 %21, %3\l  %34 = select i1 %32, i1 %33, i1 false\l  br i1 %34, label %35, label %130\l|{<s0>T|<s1>F}}"];
	Node0x54afea0:s0 -> Node0x54b2430;
	Node0x54afea0:s1 -> Node0x54b48a0;
	Node0x54b2430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%35:\l35:                                               \l  %36 = zext i32 %29 to i64\l  %37 = getelementptr inbounds double, double addrspace(1)* %0, i64 %36\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %39 = getelementptr inbounds double, double addrspace(1)* %1, i64 %36\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %41 = fsub contract double %38, %40\l  %42 = getelementptr inbounds double, double addrspace(1)* %2, i64 %36\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %44 = fmul contract double %43, 2.000000e+00\l  %45 = fmul contract double %44, 0x400921FB54442D18\l  %46 = sitofp i32 %3 to double\l  %47 = fdiv contract double %45, %46\l  %48 = icmp eq i32 %8, 0\l  %49 = mul nsw i32 %29, %3\l  %50 = add nsw i32 %49, %21\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %6, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !7\l  br i1 %48, label %58, label %54\l|{<s0>T|<s1>F}}"];
	Node0x54b2430:s0 -> Node0x54b6600;
	Node0x54b2430:s1 -> Node0x54b6690;
	Node0x54b6690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%54:\l54:                                               \l  %55 = getelementptr inbounds double, double addrspace(1)* %7, i64 %36\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %57 = fsub contract double %53, %56\l  br label %58\l}"];
	Node0x54b6690 -> Node0x54b6600;
	Node0x54b6600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%58:\l58:                                               \l  %59 = phi double [ %57, %54 ], [ %53, %35 ]\l  %60 = getelementptr inbounds double, double addrspace(1)* %5, i64 %51\l  store double %59, double addrspace(1)* %60, align 8, !tbaa !7\l  %61 = getelementptr inbounds double, double addrspace(1)* %9, i64 %51\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !7\l  %63 = fcmp contract olt double %47, %41\l  %64 = select i1 %63, double %47, double %41\l  %65 = fdiv contract double %62, %64\l  %66 = getelementptr inbounds double, double addrspace(1)* %10, i64 %51\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !7\l  %68 = tail call double @llvm.fabs.f64(double %67)\l  %69 = fdiv contract double %68, %41\l  %70 = tail call double @llvm.fabs.f64(double %59)\l  %71 = fdiv contract double %70, %47\l  %72 = add nuw nsw i32 %29, 1\l  %73 = mul nsw i32 %72, %3\l  %74 = add nsw i32 %73, %21\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %10, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !7\l  %78 = fsub contract double %77, %67\l  %79 = add nsw i32 %21, 1\l  %80 = srem i32 %79, %3\l  %81 = add nsw i32 %80, %49\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds double, double addrspace(1)* %6, i64 %82\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !7\l  %85 = getelementptr inbounds double, double addrspace(1)* %6, i64 %51\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !7\l  %87 = fsub contract double %84, %86\l  %88 = fcmp contract ult double %78, 0.000000e+00\l  %89 = fneg contract double %78\l  %90 = select i1 %88, double %89, double 1.000000e-10\l  %91 = fcmp contract ult double %87, 0.000000e+00\l  %92 = fneg contract double %87\l  %93 = select i1 %91, double %92, double 1.000000e-10\l  %94 = fdiv contract double %90, %41\l  %95 = fdiv contract double %93, %47\l  %96 = fcmp contract ogt double %95, %94\l  %97 = select i1 %96, double %95, double %94\l  %98 = fmul contract double %97, 0x401FCF41F212D772\l  %99 = fmul contract double %65, %65\l  %100 = fmul contract double %69, %69\l  %101 = fadd contract double %99, %100\l  %102 = fmul contract double %71, %71\l  %103 = fadd contract double %101, %102\l  %104 = fmul contract double %98, %98\l  %105 = fadd contract double %103, %104\l  %106 = fcmp olt double %105, 0x1000000000000000\l  %107 = select i1 %106, double 0x4FF0000000000000, double 1.000000e+00\l  %108 = fmul double %105, %107\l  %109 = tail call double @llvm.amdgcn.rsq.f64(double %108)\l  %110 = fmul double %108, %109\l  %111 = fmul double %109, 5.000000e-01\l  %112 = fneg double %111\l  %113 = tail call double @llvm.fma.f64(double %112, double %110, double\l... 5.000000e-01)\l  %114 = tail call double @llvm.fma.f64(double %111, double %113, double %111)\l  %115 = tail call double @llvm.fma.f64(double %110, double %113, double %110)\l  %116 = fneg double %115\l  %117 = tail call double @llvm.fma.f64(double %116, double %115, double %108)\l  %118 = tail call double @llvm.fma.f64(double %117, double %114, double %115)\l  %119 = fneg double %118\l  %120 = tail call double @llvm.fma.f64(double %119, double %118, double %108)\l  %121 = tail call double @llvm.fma.f64(double %120, double %114, double %118)\l  %122 = select i1 %106, double 0x37F0000000000000, double 1.000000e+00\l  %123 = fmul double %122, %121\l  %124 = fcmp oeq double %108, 0.000000e+00\l  %125 = fcmp oeq double %108, 0x7FF0000000000000\l  %126 = or i1 %124, %125\l  %127 = select i1 %126, double %108, double %123\l  %128 = fdiv contract double 5.000000e-01, %127\l  %129 = getelementptr inbounds double, double addrspace(1)* %11, i64 %51\l  store double %128, double addrspace(1)* %129, align 8, !tbaa !7\l  br label %130\l}"];
	Node0x54b6600 -> Node0x54b48a0;
	Node0x54b48a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%130:\l130:                                              \l  ret void\l}"];
}
