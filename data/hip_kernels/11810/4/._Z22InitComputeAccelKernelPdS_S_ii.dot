digraph "CFG for '_Z22InitComputeAccelKernelPdS_S_ii' function" {
	label="CFG for '_Z22InitComputeAccelKernelPdS_S_ii' function";

	Node0x4f68ed0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %8, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp slt i32 %22, %4\l  %24 = icmp slt i32 %14, %3\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %235\l|{<s0>T|<s1>F}}"];
	Node0x4f68ed0:s0 -> Node0x4f6c990;
	Node0x4f68ed0:s1 -> Node0x4f6ca20;
	Node0x4f6c990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%26:\l26:                                               \l  %27 = sext i32 %22 to i64\l  %28 = getelementptr inbounds double, double addrspace(1)* %2, i64 %27\l  %29 = load double, double addrspace(1)* %28, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %30 = sitofp i32 %14 to double\l  %31 = fmul contract double %30, 0x401921FB54442D18\l  %32 = sitofp i32 %3 to double\l  %33 = fdiv contract double %31, %32\l  %34 = tail call double @llvm.fabs.f64(double %33)\l  %35 = fcmp olt double %34, 0x41D0000000000000\l  br i1 %35, label %36, label %93\l|{<s0>T|<s1>F}}"];
	Node0x4f6c990:s0 -> Node0x4f6de70;
	Node0x4f6c990:s1 -> Node0x4f6df00;
	Node0x4f6de70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%36:\l36:                                               \l  %37 = fmul double %34, 0x3FE45F306DC9C883\l  %38 = tail call double @llvm.rint.f64(double %37)\l  %39 = tail call double @llvm.fma.f64(double %38, double 0xBFF921FB54442D18,\l... double %34)\l  %40 = tail call double @llvm.fma.f64(double %38, double 0xBC91A62633145C00,\l... double %39)\l  %41 = fmul double %38, 0x3C91A62633145C00\l  %42 = fneg double %41\l  %43 = tail call double @llvm.fma.f64(double %38, double 0x3C91A62633145C00,\l... double %42)\l  %44 = fsub double %39, %41\l  %45 = fsub double %39, %44\l  %46 = fsub double %45, %41\l  %47 = fsub double %44, %40\l  %48 = fadd double %47, %46\l  %49 = fsub double %48, %43\l  %50 = tail call double @llvm.fma.f64(double %38, double 0xB97B839A252049C0,\l... double %49)\l  %51 = fadd double %40, %50\l  %52 = fsub double %51, %40\l  %53 = fsub double %50, %52\l  %54 = fptosi double %38 to i32\l  %55 = fmul double %51, %51\l  %56 = fmul double %55, 5.000000e-01\l  %57 = fsub double 1.000000e+00, %56\l  %58 = fsub double 1.000000e+00, %57\l  %59 = fsub double %58, %56\l  %60 = fmul double %55, %55\l  %61 = tail call double @llvm.fma.f64(double %55, double 0xBDA907DB46CC5E42,\l... double 0x3E21EEB69037AB78)\l  %62 = tail call double @llvm.fma.f64(double %55, double %61, double\l... 0xBE927E4FA17F65F6)\l  %63 = tail call double @llvm.fma.f64(double %55, double %62, double\l... 0x3EFA01A019F4EC90)\l  %64 = tail call double @llvm.fma.f64(double %55, double %63, double\l... 0xBF56C16C16C16967)\l  %65 = tail call double @llvm.fma.f64(double %55, double %64, double\l... 0x3FA5555555555555)\l  %66 = fneg double %53\l  %67 = tail call double @llvm.fma.f64(double %51, double %66, double %59)\l  %68 = tail call double @llvm.fma.f64(double %60, double %65, double %67)\l  %69 = fadd double %57, %68\l  %70 = tail call double @llvm.fma.f64(double %55, double 0x3DE5E0B2F9A43BB8,\l... double 0xBE5AE600B42FDFA7)\l  %71 = tail call double @llvm.fma.f64(double %55, double %70, double\l... 0x3EC71DE3796CDE01)\l  %72 = tail call double @llvm.fma.f64(double %55, double %71, double\l... 0xBF2A01A019E83E5C)\l  %73 = tail call double @llvm.fma.f64(double %55, double %72, double\l... 0x3F81111111110BB3)\l  %74 = fneg double %55\l  %75 = fmul double %51, %74\l  %76 = fmul double %53, 5.000000e-01\l  %77 = tail call double @llvm.fma.f64(double %75, double %73, double %76)\l  %78 = tail call double @llvm.fma.f64(double %55, double %77, double %66)\l  %79 = tail call double @llvm.fma.f64(double %75, double 0xBFC5555555555555,\l... double %78)\l  %80 = fsub double %51, %79\l  %81 = fneg double %80\l  %82 = and i32 %54, 1\l  %83 = icmp eq i32 %82, 0\l  %84 = select i1 %83, double %69, double %81\l  %85 = bitcast double %84 to \<2 x i32\>\l  %86 = shl i32 %54, 30\l  %87 = and i32 %86, -2147483648\l  %88 = extractelement \<2 x i32\> %85, i64 1\l  %89 = xor i32 %88, %87\l  %90 = insertelement \<2 x i32\> %85, i32 %89, i64 1\l  %91 = tail call i1 @llvm.amdgcn.class.f64(double %34, i32 504)\l  %92 = select i1 %91, \<2 x i32\> %90, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %207\l}"];
	Node0x4f6de70 -> Node0x4f71e50;
	Node0x4f6df00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%93:\l93:                                               \l  %94 = tail call double @llvm.amdgcn.trig.preop.f64(double %34, i32 0)\l  %95 = tail call double @llvm.amdgcn.trig.preop.f64(double %34, i32 1)\l  %96 = tail call double @llvm.amdgcn.trig.preop.f64(double %34, i32 2)\l  %97 = fcmp oge double %34, 0x7B00000000000000\l  %98 = tail call double @llvm.amdgcn.ldexp.f64(double %34, i32 -128)\l  %99 = select i1 %97, double %98, double %34\l  %100 = fmul double %96, %99\l  %101 = fneg double %100\l  %102 = tail call double @llvm.fma.f64(double %96, double %99, double %101)\l  %103 = fmul double %95, %99\l  %104 = fneg double %103\l  %105 = tail call double @llvm.fma.f64(double %95, double %99, double %104)\l  %106 = fmul double %94, %99\l  %107 = fneg double %106\l  %108 = tail call double @llvm.fma.f64(double %94, double %99, double %107)\l  %109 = fadd double %103, %108\l  %110 = fsub double %109, %103\l  %111 = fsub double %109, %110\l  %112 = fsub double %108, %110\l  %113 = fsub double %103, %111\l  %114 = fadd double %112, %113\l  %115 = fadd double %100, %105\l  %116 = fsub double %115, %100\l  %117 = fsub double %115, %116\l  %118 = fsub double %105, %116\l  %119 = fsub double %100, %117\l  %120 = fadd double %118, %119\l  %121 = fadd double %115, %114\l  %122 = fsub double %121, %115\l  %123 = fsub double %121, %122\l  %124 = fsub double %114, %122\l  %125 = fsub double %115, %123\l  %126 = fadd double %124, %125\l  %127 = fadd double %120, %126\l  %128 = fadd double %102, %127\l  %129 = fadd double %106, %109\l  %130 = fsub double %129, %106\l  %131 = fsub double %109, %130\l  %132 = fadd double %131, %121\l  %133 = fsub double %132, %131\l  %134 = fsub double %121, %133\l  %135 = fadd double %134, %128\l  %136 = tail call double @llvm.amdgcn.ldexp.f64(double %129, i32 -2)\l  %137 = tail call double @llvm.amdgcn.fract.f64(double %136)\l  %138 = tail call i1 @llvm.amdgcn.class.f64(double %136, i32 516)\l  %139 = select i1 %138, double 0.000000e+00, double %137\l  %140 = tail call double @llvm.amdgcn.ldexp.f64(double %139, i32 2)\l  %141 = fadd double %140, %132\l  %142 = fcmp olt double %141, 0.000000e+00\l  %143 = select i1 %142, double 4.000000e+00, double 0.000000e+00\l  %144 = fadd double %140, %143\l  %145 = fadd double %132, %144\l  %146 = fptosi double %145 to i32\l  %147 = sitofp i32 %146 to double\l  %148 = fsub double %144, %147\l  %149 = fadd double %132, %148\l  %150 = fsub double %149, %148\l  %151 = fsub double %132, %150\l  %152 = fadd double %135, %151\l  %153 = fcmp oge double %149, 5.000000e-01\l  %154 = zext i1 %153 to i32\l  %155 = add nsw i32 %154, %146\l  %156 = select i1 %153, double 1.000000e+00, double 0.000000e+00\l  %157 = fsub double %149, %156\l  %158 = fadd double %157, %152\l  %159 = fsub double %158, %157\l  %160 = fsub double %152, %159\l  %161 = fmul double %158, 0x3FF921FB54442D18\l  %162 = fneg double %161\l  %163 = tail call double @llvm.fma.f64(double %158, double\l... 0x3FF921FB54442D18, double %162)\l  %164 = tail call double @llvm.fma.f64(double %158, double\l... 0x3C91A62633145C07, double %163)\l  %165 = tail call double @llvm.fma.f64(double %160, double\l... 0x3FF921FB54442D18, double %164)\l  %166 = fadd double %161, %165\l  %167 = fsub double %166, %161\l  %168 = fsub double %165, %167\l  %169 = fmul double %166, %166\l  %170 = fmul double %169, 5.000000e-01\l  %171 = fsub double 1.000000e+00, %170\l  %172 = fsub double 1.000000e+00, %171\l  %173 = fsub double %172, %170\l  %174 = fmul double %169, %169\l  %175 = tail call double @llvm.fma.f64(double %169, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %176 = tail call double @llvm.fma.f64(double %169, double %175, double\l... 0xBE927E4FA17F65F6)\l  %177 = tail call double @llvm.fma.f64(double %169, double %176, double\l... 0x3EFA01A019F4EC90)\l  %178 = tail call double @llvm.fma.f64(double %169, double %177, double\l... 0xBF56C16C16C16967)\l  %179 = tail call double @llvm.fma.f64(double %169, double %178, double\l... 0x3FA5555555555555)\l  %180 = fneg double %168\l  %181 = tail call double @llvm.fma.f64(double %166, double %180, double %173)\l  %182 = tail call double @llvm.fma.f64(double %174, double %179, double %181)\l  %183 = fadd double %171, %182\l  %184 = tail call double @llvm.fma.f64(double %169, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %185 = tail call double @llvm.fma.f64(double %169, double %184, double\l... 0x3EC71DE3796CDE01)\l  %186 = tail call double @llvm.fma.f64(double %169, double %185, double\l... 0xBF2A01A019E83E5C)\l  %187 = tail call double @llvm.fma.f64(double %169, double %186, double\l... 0x3F81111111110BB3)\l  %188 = fneg double %169\l  %189 = fmul double %166, %188\l  %190 = fmul double %168, 5.000000e-01\l  %191 = tail call double @llvm.fma.f64(double %189, double %187, double %190)\l  %192 = tail call double @llvm.fma.f64(double %169, double %191, double %180)\l  %193 = tail call double @llvm.fma.f64(double %189, double\l... 0xBFC5555555555555, double %192)\l  %194 = fsub double %166, %193\l  %195 = fneg double %194\l  %196 = and i32 %155, 1\l  %197 = icmp eq i32 %196, 0\l  %198 = select i1 %197, double %183, double %195\l  %199 = bitcast double %198 to \<2 x i32\>\l  %200 = shl i32 %155, 30\l  %201 = and i32 %200, -2147483648\l  %202 = extractelement \<2 x i32\> %199, i64 1\l  %203 = xor i32 %202, %201\l  %204 = insertelement \<2 x i32\> %199, i32 %203, i64 1\l  %205 = tail call i1 @llvm.amdgcn.class.f64(double %34, i32 504)\l  %206 = select i1 %205, \<2 x i32\> %204, \<2 x i32\> \<i32 0, i32 2146959360\>\l  br label %207\l}"];
	Node0x4f6df00 -> Node0x4f71e50;
	Node0x4f71e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%207:\l207:                                              \l  %208 = phi \<2 x i32\> [ %92, %36 ], [ %206, %93 ]\l  %209 = phi i32 [ %86, %36 ], [ %200, %93 ]\l  %210 = phi i32 [ %82, %36 ], [ %196, %93 ]\l  %211 = phi double [ %80, %36 ], [ %194, %93 ]\l  %212 = phi double [ %69, %36 ], [ %183, %93 ]\l  %213 = phi i1 [ %91, %36 ], [ %205, %93 ]\l  %214 = bitcast \<2 x i32\> %208 to double\l  %215 = fmul contract double %29, %214\l  %216 = mul nsw i32 %22, %3\l  %217 = add nsw i32 %216, %14\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds double, double addrspace(1)* %0, i64 %218\l  store double %215, double addrspace(1)* %219, align 8, !tbaa !7\l  %220 = load double, double addrspace(1)* %28, align 8, !tbaa !7\l  %221 = icmp eq i32 %210, 0\l  %222 = select i1 %221, double %211, double %212\l  %223 = bitcast double %222 to \<2 x i32\>\l  %224 = bitcast double %33 to \<2 x i32\>\l  %225 = extractelement \<2 x i32\> %224, i64 1\l  %226 = xor i32 %209, %225\l  %227 = and i32 %226, -2147483648\l  %228 = extractelement \<2 x i32\> %223, i64 1\l  %229 = xor i32 %228, %227\l  %230 = insertelement \<2 x i32\> %223, i32 %229, i64 1\l  %231 = select i1 %213, \<2 x i32\> %230, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %232 = bitcast \<2 x i32\> %231 to double\l  %233 = fmul contract double %220, %232\l  %234 = getelementptr inbounds double, double addrspace(1)* %1, i64 %218\l  store double %233, double addrspace(1)* %234, align 8, !tbaa !7\l  br label %235\l}"];
	Node0x4f71e50 -> Node0x4f6ca20;
	Node0x4f6ca20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%235:\l235:                                              \l  ret void\l}"];
}
