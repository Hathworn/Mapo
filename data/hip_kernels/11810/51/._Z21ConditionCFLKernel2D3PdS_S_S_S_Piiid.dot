digraph "CFG for '_Z21ConditionCFLKernel2D3PdS_S_S_S_Piiid' function" {
	label="CFG for '_Z21ConditionCFLKernel2D3PdS_S_S_S_Piiid' function";

	Node0x4f639c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = mul i32 %16, %15\l  %18 = sub i32 0, %17\l  %19 = icmp eq i32 %10, %18\l  br i1 %19, label %20, label %190\l|{<s0>T|<s1>F}}"];
	Node0x4f639c0:s0 -> Node0x4f664c0;
	Node0x4f639c0:s1 -> Node0x4f66550;
	Node0x4f664c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%20:\l20:                                               \l  %21 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %22 = load double, double addrspace(1)* %21, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %23 = icmp sgt i32 %7, 2\l  br i1 %23, label %24, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4f664c0:s0 -> Node0x4f67050;
	Node0x4f664c0:s1 -> Node0x4f670e0;
	Node0x4f67050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = add i32 %7, -2\l  %26 = add i32 %7, -3\l  %27 = and i32 %25, 7\l  %28 = icmp ult i32 %26, 7\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4f67050:s0 -> Node0x4f674f0;
	Node0x4f67050:s1 -> Node0x4f67540;
	Node0x4f67540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%29:\l29:                                               \l  %30 = and i32 %25, -8\l  br label %58\l}"];
	Node0x4f67540 -> Node0x4f67740;
	Node0x4f674f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = phi double [ undef, %24 ], [ %108, %58 ]\l  %33 = phi i32 [ 2, %24 ], [ %109, %58 ]\l  %34 = phi double [ %22, %24 ], [ %108, %58 ]\l  %35 = icmp eq i32 %27, 0\l  br i1 %35, label %48, label %36\l|{<s0>T|<s1>F}}"];
	Node0x4f674f0:s0 -> Node0x4f670e0;
	Node0x4f674f0:s1 -> Node0x4f68060;
	Node0x4f68060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi i32 [ %45, %36 ], [ %33, %31 ]\l  %38 = phi double [ %44, %36 ], [ %34, %31 ]\l  %39 = phi i32 [ %46, %36 ], [ 0, %31 ]\l  %40 = zext i32 %37 to i64\l  %41 = getelementptr inbounds double, double addrspace(1)* %0, i64 %40\l  %42 = load double, double addrspace(1)* %41, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %43 = fcmp contract olt double %42, %38\l  %44 = select i1 %43, double %42, double %38\l  %45 = add nuw nsw i32 %37, 1\l  %46 = add i32 %39, 1\l  %47 = icmp eq i32 %46, %27\l  br i1 %47, label %48, label %36, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4f68060:s0 -> Node0x4f670e0;
	Node0x4f68060:s1 -> Node0x4f68060;
	Node0x4f670e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%48:\l48:                                               \l  %49 = phi double [ %22, %20 ], [ %32, %31 ], [ %44, %36 ]\l  %50 = icmp sgt i32 %7, 1\l  br i1 %50, label %51, label %129\l|{<s0>T|<s1>F}}"];
	Node0x4f670e0:s0 -> Node0x4f69210;
	Node0x4f670e0:s1 -> Node0x4f69260;
	Node0x4f69210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%51:\l51:                                               \l  %52 = add i32 %7, -2\l  %53 = add i32 %7, -1\l  %54 = and i32 %53, 7\l  %55 = icmp ult i32 %52, 7\l  br i1 %55, label %112, label %56\l|{<s0>T|<s1>F}}"];
	Node0x4f69210:s0 -> Node0x4f695e0;
	Node0x4f69210:s1 -> Node0x4f69630;
	Node0x4f69630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%56:\l56:                                               \l  %57 = and i32 %53, -8\l  br label %136\l}"];
	Node0x4f69630 -> Node0x4f69800;
	Node0x4f67740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%58:\l58:                                               \l  %59 = phi i32 [ 2, %29 ], [ %109, %58 ]\l  %60 = phi double [ %22, %29 ], [ %108, %58 ]\l  %61 = phi i32 [ 0, %29 ], [ %110, %58 ]\l  %62 = zext i32 %59 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %0, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %65 = fcmp contract olt double %64, %60\l  %66 = select i1 %65, double %64, double %60\l  %67 = or i32 %59, 1\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %0, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = fcmp contract olt double %70, %66\l  %72 = select i1 %71, double %70, double %66\l  %73 = add nuw nsw i32 %59, 2\l  %74 = zext i32 %73 to i64\l  %75 = getelementptr inbounds double, double addrspace(1)* %0, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %77 = fcmp contract olt double %76, %72\l  %78 = select i1 %77, double %76, double %72\l  %79 = add nuw nsw i32 %59, 3\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %0, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %83 = fcmp contract olt double %82, %78\l  %84 = select i1 %83, double %82, double %78\l  %85 = add nuw nsw i32 %59, 4\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds double, double addrspace(1)* %0, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %89 = fcmp contract olt double %88, %84\l  %90 = select i1 %89, double %88, double %84\l  %91 = add nuw nsw i32 %59, 5\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %0, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %95 = fcmp contract olt double %94, %90\l  %96 = select i1 %95, double %94, double %90\l  %97 = add nuw nsw i32 %59, 6\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %0, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %101 = fcmp contract olt double %100, %96\l  %102 = select i1 %101, double %100, double %96\l  %103 = add nuw nsw i32 %59, 7\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds double, double addrspace(1)* %0, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %107 = fcmp contract olt double %106, %102\l  %108 = select i1 %107, double %106, double %102\l  %109 = add nuw nsw i32 %59, 8\l  %110 = add i32 %61, 8\l  %111 = icmp eq i32 %110, %30\l  br i1 %111, label %31, label %58, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f67740:s0 -> Node0x4f674f0;
	Node0x4f67740:s1 -> Node0x4f67740;
	Node0x4f695e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%112:\l112:                                              \l  %113 = phi double [ undef, %51 ], [ %186, %136 ]\l  %114 = phi i32 [ 0, %51 ], [ %187, %136 ]\l  %115 = phi double [ %49, %51 ], [ %186, %136 ]\l  %116 = icmp eq i32 %54, 0\l  br i1 %116, label %129, label %117\l|{<s0>T|<s1>F}}"];
	Node0x4f695e0:s0 -> Node0x4f69260;
	Node0x4f695e0:s1 -> Node0x4f6bf30;
	Node0x4f6bf30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%117:\l117:                                              \l  %118 = phi i32 [ %126, %117 ], [ %114, %112 ]\l  %119 = phi double [ %125, %117 ], [ %115, %112 ]\l  %120 = phi i32 [ %127, %117 ], [ 0, %112 ]\l  %121 = zext i32 %118 to i64\l  %122 = getelementptr inbounds double, double addrspace(1)* %2, i64 %121\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %124 = fcmp contract olt double %123, %119\l  %125 = select i1 %124, double %123, double %119\l  %126 = add nuw nsw i32 %118, 1\l  %127 = add i32 %120, 1\l  %128 = icmp eq i32 %127, %54\l  br i1 %128, label %129, label %117, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4f6bf30:s0 -> Node0x4f69260;
	Node0x4f6bf30:s1 -> Node0x4f6bf30;
	Node0x4f69260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%129:\l129:                                              \l  %130 = phi double [ %49, %48 ], [ %113, %112 ], [ %125, %117 ]\l  %131 = fcmp contract ogt double %130, %8\l  %132 = select i1 %131, double %8, double %130\l  %133 = fdiv contract double %8, %132\l  %134 = tail call double @llvm.ceil.f64(double %133)\l  %135 = fptosi double %134 to i32\l  store i32 %135, i32 addrspace(1)* %5, align 4, !tbaa !16\l  br label %190\l}"];
	Node0x4f69260 -> Node0x4f66550;
	Node0x4f69800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%136:\l136:                                              \l  %137 = phi i32 [ 0, %56 ], [ %187, %136 ]\l  %138 = phi double [ %49, %56 ], [ %186, %136 ]\l  %139 = phi i32 [ 0, %56 ], [ %188, %136 ]\l  %140 = zext i32 %137 to i64\l  %141 = getelementptr inbounds double, double addrspace(1)* %2, i64 %140\l  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %143 = fcmp contract olt double %142, %138\l  %144 = select i1 %143, double %142, double %138\l  %145 = or i32 %137, 1\l  %146 = zext i32 %145 to i64\l  %147 = getelementptr inbounds double, double addrspace(1)* %2, i64 %146\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %149 = fcmp contract olt double %148, %144\l  %150 = select i1 %149, double %148, double %144\l  %151 = or i32 %137, 2\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds double, double addrspace(1)* %2, i64 %152\l  %154 = load double, double addrspace(1)* %153, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %155 = fcmp contract olt double %154, %150\l  %156 = select i1 %155, double %154, double %150\l  %157 = or i32 %137, 3\l  %158 = zext i32 %157 to i64\l  %159 = getelementptr inbounds double, double addrspace(1)* %2, i64 %158\l  %160 = load double, double addrspace(1)* %159, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %161 = fcmp contract olt double %160, %156\l  %162 = select i1 %161, double %160, double %156\l  %163 = or i32 %137, 4\l  %164 = zext i32 %163 to i64\l  %165 = getelementptr inbounds double, double addrspace(1)* %2, i64 %164\l  %166 = load double, double addrspace(1)* %165, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %167 = fcmp contract olt double %166, %162\l  %168 = select i1 %167, double %166, double %162\l  %169 = or i32 %137, 5\l  %170 = zext i32 %169 to i64\l  %171 = getelementptr inbounds double, double addrspace(1)* %2, i64 %170\l  %172 = load double, double addrspace(1)* %171, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %173 = fcmp contract olt double %172, %168\l  %174 = select i1 %173, double %172, double %168\l  %175 = or i32 %137, 6\l  %176 = zext i32 %175 to i64\l  %177 = getelementptr inbounds double, double addrspace(1)* %2, i64 %176\l  %178 = load double, double addrspace(1)* %177, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %179 = fcmp contract olt double %178, %174\l  %180 = select i1 %179, double %178, double %174\l  %181 = or i32 %137, 7\l  %182 = zext i32 %181 to i64\l  %183 = getelementptr inbounds double, double addrspace(1)* %2, i64 %182\l  %184 = load double, double addrspace(1)* %183, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %185 = fcmp contract olt double %184, %180\l  %186 = select i1 %185, double %184, double %180\l  %187 = add nuw nsw i32 %137, 8\l  %188 = add i32 %139, 8\l  %189 = icmp eq i32 %188, %57\l  br i1 %189, label %112, label %136, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4f69800:s0 -> Node0x4f695e0;
	Node0x4f69800:s1 -> Node0x4f69800;
	Node0x4f66550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%190:\l190:                                              \l  ret void\l}"];
}
