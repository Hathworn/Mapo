digraph "CFG for '_Z20IntDataPointIdentityiPKiS0_PiS1_i' function" {
	label="CFG for '_Z20IntDataPointIdentityiPKiS0_PiS1_i' function";

	Node0x52de030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = zext i32 %7 to i64\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = zext i32 %9 to i64\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i64\l  %16 = mul nuw nsw i64 %15, %10\l  %17 = add nuw nsw i64 %16, %8\l  %18 = sext i32 %0 to i64\l  %19 = icmp slt i64 %17, %18\l  br i1 %19, label %20, label %84\l|{<s0>T|<s1>F}}"];
	Node0x52de030:s0 -> Node0x52e00f0;
	Node0x52de030:s1 -> Node0x52e0180;
	Node0x52e00f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%20:\l20:                                               \l  %21 = sext i32 %5 to i64\l  %22 = mul nsw i64 %17, %21\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %22\l  %24 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %22\l  %25 = icmp sgt i32 %5, 0\l  br i1 %25, label %26, label %43\l|{<s0>T|<s1>F}}"];
	Node0x52e00f0:s0 -> Node0x52e0590;
	Node0x52e00f0:s1 -> Node0x52e05e0;
	Node0x52e0590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%26:\l26:                                               \l  %27 = and i64 %21, 7\l  %28 = icmp ult i32 %5, 8\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x52e0590:s0 -> Node0x52e08a0;
	Node0x52e0590:s1 -> Node0x52e08f0;
	Node0x52e08f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%29:\l29:                                               \l  %30 = and i64 %21, -8\l  br label %47\l}"];
	Node0x52e08f0 -> Node0x52e0af0;
	Node0x52e08a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = phi i64 [ 0, %26 ], [ %81, %47 ]\l  %33 = icmp eq i64 %27, 0\l  br i1 %33, label %43, label %34\l|{<s0>T|<s1>F}}"];
	Node0x52e08a0:s0 -> Node0x52e05e0;
	Node0x52e08a0:s1 -> Node0x52dff70;
	Node0x52dff70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi i64 [ %40, %34 ], [ %32, %31 ]\l  %36 = phi i64 [ %41, %34 ], [ 0, %31 ]\l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %35\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !tbaa !7\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %35\l  store i32 %38, i32 addrspace(1)* %39, align 4, !tbaa !7\l  %40 = add nuw nsw i64 %35, 1\l  %41 = add i64 %36, 1\l  %42 = icmp eq i64 %41, %27\l  br i1 %42, label %43, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x52dff70:s0 -> Node0x52e05e0;
	Node0x52dff70:s1 -> Node0x52dff70;
	Node0x52e05e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%43:\l43:                                               \l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %17\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !7\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %17\l  store i32 %45, i32 addrspace(1)* %46, align 4, !tbaa !7\l  br label %84\l}"];
	Node0x52e05e0 -> Node0x52e0180;
	Node0x52e0af0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%47:\l47:                                               \l  %48 = phi i64 [ 0, %29 ], [ %81, %47 ]\l  %49 = phi i64 [ 0, %29 ], [ %82, %47 ]\l  %50 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %48\l  %51 = load i32, i32 addrspace(1)* %50, align 4, !tbaa !7\l  %52 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %48\l  store i32 %51, i32 addrspace(1)* %52, align 4, !tbaa !7\l  %53 = or i64 %48, 1\l  %54 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %53\l  %55 = load i32, i32 addrspace(1)* %54, align 4, !tbaa !7\l  %56 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %53\l  store i32 %55, i32 addrspace(1)* %56, align 4, !tbaa !7\l  %57 = or i64 %48, 2\l  %58 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %57\l  %59 = load i32, i32 addrspace(1)* %58, align 4, !tbaa !7\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %57\l  store i32 %59, i32 addrspace(1)* %60, align 4, !tbaa !7\l  %61 = or i64 %48, 3\l  %62 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %61\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !7\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %61\l  store i32 %63, i32 addrspace(1)* %64, align 4, !tbaa !7\l  %65 = or i64 %48, 4\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %65\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !7\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %65\l  store i32 %67, i32 addrspace(1)* %68, align 4, !tbaa !7\l  %69 = or i64 %48, 5\l  %70 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %69\l  %71 = load i32, i32 addrspace(1)* %70, align 4, !tbaa !7\l  %72 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %69\l  store i32 %71, i32 addrspace(1)* %72, align 4, !tbaa !7\l  %73 = or i64 %48, 6\l  %74 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %73\l  %75 = load i32, i32 addrspace(1)* %74, align 4, !tbaa !7\l  %76 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %73\l  store i32 %75, i32 addrspace(1)* %76, align 4, !tbaa !7\l  %77 = or i64 %48, 7\l  %78 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %77\l  %79 = load i32, i32 addrspace(1)* %78, align 4, !tbaa !7\l  %80 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %77\l  store i32 %79, i32 addrspace(1)* %80, align 4, !tbaa !7\l  %81 = add nuw nsw i64 %48, 8\l  %82 = add i64 %49, 8\l  %83 = icmp eq i64 %82, %30\l  br i1 %83, label %31, label %47, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x52e0af0:s0 -> Node0x52e08a0;
	Node0x52e0af0:s1 -> Node0x52e0af0;
	Node0x52e0180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%84:\l84:                                               \l  ret void\l}"];
}
