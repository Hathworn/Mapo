digraph "CFG for '_Z25cudaSNormalizeROIs_kerneljjjjjjjjbbbffPKfS0_PKiS2_S0_S0_S0_S0_S0_S0_PfPiS3_S3_S3_f' function" {
	label="CFG for '_Z25cudaSNormalizeROIs_kerneljjjjjjjjbbbffPKfS0_PKiS2_S0_S0_S0_S0_S0_S0_PfPiS3_S3_S3_f' function";

	Node0x4bd3240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%29:\l  %30 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %31 = mul i32 %30, %2\l  %32 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %33 = and i32 %32, 31\l  %34 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %35 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %36 = getelementptr i8, i8 addrspace(4)* %35, i64 4\l  %37 = bitcast i8 addrspace(4)* %36 to i16 addrspace(4)*\l  %38 = load i16, i16 addrspace(4)* %37, align 4, !range !5, !invariant.load !6\l  %39 = zext i16 %38 to i32\l  %40 = mul i32 %34, %39\l  %41 = add i32 %40, %33\l  %42 = icmp ult i32 %41, %2\l  br i1 %42, label %43, label %598\l|{<s0>T|<s1>F}}"];
	Node0x4bd3240:s0 -> Node0x4bd7c80;
	Node0x4bd3240:s1 -> Node0x4bd7d10;
	Node0x4bd7c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%43:\l43:                                               \l  br i1 %8, label %44, label %67\l|{<s0>T|<s1>F}}"];
	Node0x4bd7c80:s0 -> Node0x4bd7e50;
	Node0x4bd7c80:s1 -> Node0x4bd7ea0;
	Node0x4bd7e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%44:\l44:                                               \l  %45 = icmp ugt i32 %5, %4\l  %46 = add i32 %41, %31\l  br i1 %45, label %47, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4bd7e50:s0 -> Node0x4bd8100;
	Node0x4bd7e50:s1 -> Node0x4bd8150;
	Node0x4bd8100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%47:\l47:                                               \l  %48 = mul i32 %46, %5\l  br label %54\l}"];
	Node0x4bd8100 -> Node0x4bd8320;
	Node0x4bd8150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%49:\l49:                                               \l  %50 = phi i32 [ %4, %44 ], [ %64, %54 ]\l  %51 = sext i32 %46 to i64\l  %52 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %51\l  store i32 %50, i32 addrspace(1)* %52, align 4, !tbaa !7\l  %53 = add i32 %50, 1\l  br label %71\l}"];
	Node0x4bd8150 -> Node0x4bd8830;
	Node0x4bd8320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%54:\l54:                                               \l  %55 = phi i32 [ %4, %47 ], [ %64, %54 ]\l  %56 = phi float [ 0.000000e+00, %47 ], [ %63, %54 ]\l  %57 = phi i32 [ %4, %47 ], [ %65, %54 ]\l  %58 = add i32 %57, %48\l  %59 = zext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %19, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %62 = fcmp contract ult float %61, %56\l  %63 = select i1 %62, float %56, float %61\l  %64 = select i1 %62, i32 %55, i32 %57\l  %65 = add nuw i32 %57, 1\l  %66 = icmp ult i32 %65, %5\l  br i1 %66, label %54, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4bd8320:s0 -> Node0x4bd8320;
	Node0x4bd8320:s1 -> Node0x4bd8150;
	Node0x4bd7ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%67:\l67:                                               \l  %68 = add nsw i32 %41, %31\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %69\l  store i32 -1, i32 addrspace(1)* %70, align 4, !tbaa !7\l  br label %71\l}"];
	Node0x4bd7ea0 -> Node0x4bd8830;
	Node0x4bd8830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%71:\l71:                                               \l  %72 = phi i32 [ %53, %49 ], [ %5, %67 ]\l  %73 = phi i32 [ %50, %49 ], [ %4, %67 ]\l  %74 = icmp ult i32 %73, %72\l  br i1 %74, label %75, label %598\l|{<s0>T|<s1>F}}"];
	Node0x4bd8830:s0 -> Node0x4bdb0f0;
	Node0x4bd8830:s1 -> Node0x4bd7d10;
	Node0x4bdb0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%75:\l75:                                               \l  %76 = add i32 %41, %31\l  %77 = shl i32 %76, 2\l  %78 = mul i32 %77, %5\l  %79 = add i32 %41, %31\l  %80 = mul i32 %79, %5\l  %81 = sub i32 %5, %4\l  %82 = mul i32 %77, %81\l  %83 = zext i32 %77 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %17, i64 %83\l  %85 = or i32 %77, 1\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %17, i64 %86\l  %88 = or i32 %77, 2\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %17, i64 %89\l  %91 = or i32 %77, 3\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %17, i64 %92\l  %94 = getelementptr inbounds float, float addrspace(1)* %14, i64 1\l  %95 = getelementptr inbounds float, float addrspace(1)* %13, i64 1\l  %96 = getelementptr inbounds float, float addrspace(1)* %14, i64 2\l  %97 = getelementptr inbounds float, float addrspace(1)* %13, i64 2\l  %98 = getelementptr inbounds float, float addrspace(1)* %14, i64 3\l  %99 = getelementptr inbounds float, float addrspace(1)* %13, i64 3\l  %100 = fpext float %11 to double\l  %101 = fpext float %12 to double\l  %102 = shl i32 %79, 1\l  %103 = mul i32 %102, %5\l  %104 = mul i32 %79, 3\l  %105 = mul i32 %104, %5\l  %106 = add i32 %73, -1\l  br label %107\l}"];
	Node0x4bdb0f0 -> Node0x4bdc3a0;
	Node0x4bdc3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%107:\l107:                                              \l  %108 = phi i32 [ 0, %75 ], [ %597, %594 ]\l  %109 = phi i32 [ %73, %75 ], [ %595, %594 ]\l  %110 = add i32 %106, %108\l  %111 = add i32 %106, %108\l  %112 = shl i32 %109, 2\l  %113 = add i32 %112, %78\l  %114 = add i32 %109, %80\l  %115 = sub i32 %109, %4\l  %116 = shl i32 %115, 2\l  %117 = select i1 %8, i32 0, i32 %116\l  %118 = add i32 %82, %117\l  %119 = load float, float addrspace(1)* %84, align 4, !tbaa !11\l  %120 = fmul contract float %119, %11\l  %121 = load float, float addrspace(1)* %87, align 4, !tbaa !11\l  %122 = fmul contract float %121, %12\l  %123 = load float, float addrspace(1)* %90, align 4, !tbaa !11\l  %124 = fmul contract float %123, %11\l  %125 = load float, float addrspace(1)* %93, align 4, !tbaa !11\l  %126 = fmul contract float %125, %12\l  %127 = zext i32 %113 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %18, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !11\l  %130 = load float, float addrspace(1)* %14, align 4, !tbaa !11\l  %131 = fmul contract float %129, %130\l  %132 = load float, float addrspace(1)* %13, align 4, !tbaa !11\l  %133 = fadd contract float %131, %132\l  %134 = or i32 %113, 1\l  %135 = zext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %18, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !11\l  %138 = load float, float addrspace(1)* %94, align 4, !tbaa !11\l  %139 = fmul contract float %137, %138\l  %140 = load float, float addrspace(1)* %95, align 4, !tbaa !11\l  %141 = fadd contract float %139, %140\l  %142 = or i32 %113, 2\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %18, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !11\l  %146 = load float, float addrspace(1)* %96, align 4, !tbaa !11\l  %147 = fmul contract float %145, %146\l  %148 = load float, float addrspace(1)* %97, align 4, !tbaa !11\l  %149 = fadd contract float %147, %148\l  %150 = or i32 %113, 3\l  %151 = zext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %18, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !11\l  %154 = load float, float addrspace(1)* %98, align 4, !tbaa !11\l  %155 = fmul contract float %153, %154\l  %156 = load float, float addrspace(1)* %99, align 4, !tbaa !11\l  %157 = fadd contract float %155, %156\l  %158 = fmul contract float %124, %133\l  %159 = fadd contract float %120, %158\l  %160 = fpext float %159 to double\l  %161 = fpext float %124 to double\l  %162 = fmul contract double %161, 5.000000e-01\l  %163 = fadd contract double %162, %160\l  %164 = fmul float %149, 0x3FF7154760000000\l  %165 = tail call float @llvm.rint.f32(float %164)\l  %166 = fcmp ogt float %149, 0x40562E4300000000\l  %167 = fcmp olt float %149, 0xC059D1DA00000000\l  %168 = fneg float %164\l  %169 = tail call float @llvm.fma.f32(float %149, float 0x3FF7154760000000,\l... float %168)\l  %170 = tail call float @llvm.fma.f32(float %149, float 0x3E54AE0BE0000000,\l... float %169)\l  %171 = fsub float %164, %165\l  %172 = fadd float %170, %171\l  %173 = tail call float @llvm.exp2.f32(float %172)\l  %174 = fptosi float %165 to i32\l  %175 = tail call float @llvm.amdgcn.ldexp.f32(float %173, i32 %174)\l  %176 = select i1 %167, float 0.000000e+00, float %175\l  %177 = select i1 %166, float 0x7FF0000000000000, float %176\l  %178 = fpext float %177 to double\l  %179 = fmul contract double %162, %178\l  %180 = fsub contract double %163, %179\l  %181 = fptrunc double %180 to float\l  %182 = fmul contract float %126, %141\l  %183 = fadd contract float %122, %182\l  %184 = fpext float %183 to double\l  %185 = fpext float %126 to double\l  %186 = fmul contract double %185, 5.000000e-01\l  %187 = fadd contract double %186, %184\l  %188 = fmul float %157, 0x3FF7154760000000\l  %189 = tail call float @llvm.rint.f32(float %188)\l  %190 = fcmp ogt float %157, 0x40562E4300000000\l  %191 = fcmp olt float %157, 0xC059D1DA00000000\l  %192 = fneg float %188\l  %193 = tail call float @llvm.fma.f32(float %157, float 0x3FF7154760000000,\l... float %192)\l  %194 = tail call float @llvm.fma.f32(float %157, float 0x3E54AE0BE0000000,\l... float %193)\l  %195 = fsub float %188, %189\l  %196 = fadd float %194, %195\l  %197 = tail call float @llvm.exp2.f32(float %196)\l  %198 = fptosi float %189 to i32\l  %199 = tail call float @llvm.amdgcn.ldexp.f32(float %197, i32 %198)\l  %200 = select i1 %191, float 0.000000e+00, float %199\l  %201 = select i1 %190, float 0x7FF0000000000000, float %200\l  %202 = fpext float %201 to double\l  %203 = fmul contract double %186, %202\l  %204 = fsub contract double %187, %203\l  %205 = fptrunc double %204 to float\l  %206 = fmul contract float %124, %177\l  %207 = fmul contract float %126, %201\l  %208 = fcmp contract olt float %181, 0.000000e+00\l  %209 = fcmp contract olt float %181, -0.000000e+00\l  %210 = select i1 %209, float %181, float -0.000000e+00\l  %211 = fadd contract float %206, %210\l  %212 = select i1 %208, float 0.000000e+00, float %181\l  %213 = fcmp contract olt float %205, 0.000000e+00\l  %214 = fcmp contract olt float %205, -0.000000e+00\l  %215 = select i1 %214, float %205, float -0.000000e+00\l  %216 = fadd contract float %207, %215\l  %217 = select i1 %213, float 0.000000e+00, float %205\l  %218 = fadd contract float %212, %211\l  %219 = fcmp contract ogt float %218, 1.000000e+00\l  br i1 %219, label %220, label %224\l|{<s0>T|<s1>F}}"];
	Node0x4bdc3a0:s0 -> Node0x4be18c0;
	Node0x4bdc3a0:s1 -> Node0x4be1950;
	Node0x4be18c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%220:\l220:                                              \l  %221 = fpext float %212 to double\l  %222 = fsub contract double 1.000000e+00, %221\l  %223 = fdiv contract double %222, %100\l  br label %227\l}"];
	Node0x4be18c0 -> Node0x4be1c20;
	Node0x4be1950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%224:\l224:                                              \l  %225 = fdiv contract float %211, %11\l  %226 = fpext float %225 to double\l  br label %227\l}"];
	Node0x4be1950 -> Node0x4be1c20;
	Node0x4be1c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%227:\l227:                                              \l  %228 = phi contract double [ %223, %220 ], [ %226, %224 ]\l  %229 = fptrunc double %228 to float\l  %230 = fadd contract float %217, %216\l  %231 = fcmp contract ogt float %230, 1.000000e+00\l  br i1 %231, label %232, label %236\l|{<s0>T|<s1>F}}"];
	Node0x4be1c20:s0 -> Node0x4be20d0;
	Node0x4be1c20:s1 -> Node0x4be2120;
	Node0x4be20d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%232:\l232:                                              \l  %233 = fpext float %217 to double\l  %234 = fsub contract double 1.000000e+00, %233\l  %235 = fdiv contract double %234, %101\l  br label %239\l}"];
	Node0x4be20d0 -> Node0x4be23b0;
	Node0x4be2120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%236:\l236:                                              \l  %237 = fdiv contract float %216, %12\l  %238 = fpext float %237 to double\l  br label %239\l}"];
	Node0x4be2120 -> Node0x4be23b0;
	Node0x4be23b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%239:\l239:                                              \l  %240 = phi contract double [ %235, %232 ], [ %238, %236 ]\l  %241 = zext i32 %114 to i64\l  %242 = getelementptr inbounds float, float addrspace(1)* %19, i64 %241\l  %243 = load float, float addrspace(1)* %242, align 4, !tbaa !11\l  %244 = fcmp contract ult float %243, %28\l  br i1 %244, label %582, label %245\l|{<s0>T|<s1>F}}"];
	Node0x4be23b0:s0 -> Node0x4be28a0;
	Node0x4be23b0:s1 -> Node0x4be28f0;
	Node0x4be28f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%245:\l245:                                              \l  %246 = fdiv contract float %217, %12\l  %247 = fdiv contract float %212, %11\l  %248 = fptrunc double %240 to float\l  %249 = zext i32 %118 to i64\l  %250 = getelementptr inbounds float, float addrspace(1)* %23, i64 %249\l  store float %247, float addrspace(1)* %250, align 4, !tbaa !11\l  %251 = or i32 %118, 1\l  %252 = zext i32 %251 to i64\l  %253 = getelementptr inbounds float, float addrspace(1)* %23, i64 %252\l  store float %246, float addrspace(1)* %253, align 4, !tbaa !11\l  %254 = or i32 %118, 2\l  %255 = zext i32 %254 to i64\l  %256 = getelementptr inbounds float, float addrspace(1)* %23, i64 %255\l  store float %229, float addrspace(1)* %256, align 4, !tbaa !11\l  %257 = or i32 %118, 3\l  %258 = zext i32 %257 to i64\l  %259 = getelementptr inbounds float, float addrspace(1)* %23, i64 %258\l  store float %248, float addrspace(1)* %259, align 4, !tbaa !11\l  br i1 %9, label %260, label %419\l|{<s0>T|<s1>F}}"];
	Node0x4be28f0:s0 -> Node0x4bdda90;
	Node0x4be28f0:s1 -> Node0x4bddae0;
	Node0x4bdda90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%260:\l260:                                              \l  %261 = icmp eq i32 %109, 0\l  br i1 %261, label %283, label %262\l|{<s0>T|<s1>F}}"];
	Node0x4bdda90:s0 -> Node0x4bddcb0;
	Node0x4bdda90:s1 -> Node0x4bddd00;
	Node0x4bddd00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%262:\l262:                                              \l  %263 = and i32 %109, 7\l  %264 = icmp ult i32 %111, 7\l  br i1 %264, label %267, label %265\l|{<s0>T|<s1>F}}"];
	Node0x4bddd00:s0 -> Node0x4bddf60;
	Node0x4bddd00:s1 -> Node0x4be0370;
	Node0x4be0370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%265:\l265:                                              \l  %266 = and i32 %109, -8\l  br label %286\l}"];
	Node0x4be0370 -> Node0x4be42b0;
	Node0x4bddf60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%267:\l267:                                              \l  %268 = phi i32 [ undef, %262 ], [ %328, %286 ]\l  %269 = phi i32 [ 0, %262 ], [ %329, %286 ]\l  %270 = phi i32 [ 0, %262 ], [ %328, %286 ]\l  %271 = icmp eq i32 %263, 0\l  br i1 %271, label %283, label %272\l|{<s0>T|<s1>F}}"];
	Node0x4bddf60:s0 -> Node0x4bddcb0;
	Node0x4bddf60:s1 -> Node0x4be4ad0;
	Node0x4be4ad0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%272:\l272:                                              \l  %273 = phi i32 [ %280, %272 ], [ %269, %267 ]\l  %274 = phi i32 [ %279, %272 ], [ %270, %267 ]\l  %275 = phi i32 [ %281, %272 ], [ 0, %267 ]\l  %276 = zext i32 %273 to i64\l  %277 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %276\l  %278 = load i32, i32 addrspace(1)* %277, align 4, !tbaa !7\l  %279 = add i32 %278, %274\l  %280 = add nuw nsw i32 %273, 1\l  %281 = add i32 %275, 1\l  %282 = icmp eq i32 %281, %263\l  br i1 %282, label %283, label %272, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4be4ad0:s0 -> Node0x4bddcb0;
	Node0x4be4ad0:s1 -> Node0x4be4ad0;
	Node0x4bddcb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%283:\l283:                                              \l  %284 = phi i32 [ 0, %260 ], [ %268, %267 ], [ %279, %272 ]\l  %285 = icmp ult i32 %109, %5\l  br i1 %285, label %351, label %332\l|{<s0>T|<s1>F}}"];
	Node0x4bddcb0:s0 -> Node0x4be55b0;
	Node0x4bddcb0:s1 -> Node0x4be5600;
	Node0x4be42b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%286:\l286:                                              \l  %287 = phi i32 [ 0, %265 ], [ %329, %286 ]\l  %288 = phi i32 [ 0, %265 ], [ %328, %286 ]\l  %289 = phi i32 [ 0, %265 ], [ %330, %286 ]\l  %290 = zext i32 %287 to i64\l  %291 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %290\l  %292 = load i32, i32 addrspace(1)* %291, align 4, !tbaa !7\l  %293 = add i32 %292, %288\l  %294 = or i32 %287, 1\l  %295 = zext i32 %294 to i64\l  %296 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %295\l  %297 = load i32, i32 addrspace(1)* %296, align 4, !tbaa !7\l  %298 = add i32 %297, %293\l  %299 = or i32 %287, 2\l  %300 = zext i32 %299 to i64\l  %301 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %300\l  %302 = load i32, i32 addrspace(1)* %301, align 4, !tbaa !7\l  %303 = add i32 %302, %298\l  %304 = or i32 %287, 3\l  %305 = zext i32 %304 to i64\l  %306 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %305\l  %307 = load i32, i32 addrspace(1)* %306, align 4, !tbaa !7\l  %308 = add i32 %307, %303\l  %309 = or i32 %287, 4\l  %310 = zext i32 %309 to i64\l  %311 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %310\l  %312 = load i32, i32 addrspace(1)* %311, align 4, !tbaa !7\l  %313 = add i32 %312, %308\l  %314 = or i32 %287, 5\l  %315 = zext i32 %314 to i64\l  %316 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %315\l  %317 = load i32, i32 addrspace(1)* %316, align 4, !tbaa !7\l  %318 = add i32 %317, %313\l  %319 = or i32 %287, 6\l  %320 = zext i32 %319 to i64\l  %321 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %320\l  %322 = load i32, i32 addrspace(1)* %321, align 4, !tbaa !7\l  %323 = add i32 %322, %318\l  %324 = or i32 %287, 7\l  %325 = zext i32 %324 to i64\l  %326 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %325\l  %327 = load i32, i32 addrspace(1)* %326, align 4, !tbaa !7\l  %328 = add i32 %327, %323\l  %329 = add nuw nsw i32 %287, 8\l  %330 = add i32 %289, 8\l  %331 = icmp eq i32 %330, %266\l  br i1 %331, label %267, label %286, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4be42b0:s0 -> Node0x4bddf60;
	Node0x4be42b0:s1 -> Node0x4be42b0;
	Node0x4be5600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%332:\l332:                                              \l  %333 = phi i32 [ %284, %283 ], [ %357, %351 ]\l  %334 = zext i32 %109 to i64\l  %335 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %334\l  %336 = load i32, i32 addrspace(1)* %335, align 4, !tbaa !7\l  %337 = icmp eq i32 %336, 0\l  br i1 %337, label %419, label %338\l|{<s0>T|<s1>F}}"];
	Node0x4be5600:s0 -> Node0x4bddae0;
	Node0x4be5600:s1 -> Node0x4be7390;
	Node0x4be7390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%338:\l338:                                              \l  %339 = mul i32 %333, %102\l  %340 = shl i32 %284, 1\l  %341 = add i32 %339, %340\l  %342 = shl i32 %109, 1\l  %343 = add i32 %342, %103\l  %344 = mul i32 %343, %6\l  %345 = fpext float %122 to double\l  %346 = fpext float %120 to double\l  %347 = mul i32 %333, %77\l  %348 = shl i32 %284, 2\l  %349 = add i32 %347, %348\l  %350 = mul i32 %114, %6\l  br label %360\l}"];
	Node0x4be7390 -> Node0x4be7b10;
	Node0x4be55b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%351:\l351:                                              \l  %352 = phi i32 [ %358, %351 ], [ %109, %283 ]\l  %353 = phi i32 [ %357, %351 ], [ %284, %283 ]\l  %354 = sext i32 %352 to i64\l  %355 = getelementptr inbounds i32, i32 addrspace(1)* %15, i64 %354\l  %356 = load i32, i32 addrspace(1)* %355, align 4, !tbaa !7\l  %357 = add i32 %356, %353\l  %358 = add nuw nsw i32 %352, 1\l  %359 = icmp ult i32 %358, %5\l  br i1 %359, label %351, label %332, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4be55b0:s0 -> Node0x4be55b0;
	Node0x4be55b0:s1 -> Node0x4be5600;
	Node0x4be7b10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%360:\l360:                                              \l  %361 = phi i32 [ 0, %338 ], [ %417, %360 ]\l  %362 = shl i32 %361, 1\l  %363 = add i32 %341, %362\l  %364 = add i32 %362, %344\l  %365 = zext i32 %363 to i64\l  %366 = getelementptr inbounds float, float addrspace(1)* %20, i64 %365\l  %367 = load float, float addrspace(1)* %366, align 4, !tbaa !11\l  %368 = or i32 %363, 1\l  %369 = zext i32 %368 to i64\l  %370 = getelementptr inbounds float, float addrspace(1)* %20, i64 %369\l  %371 = load float, float addrspace(1)* %370, align 4, !tbaa !11\l  %372 = fpext float %367 to double\l  %373 = fadd contract double %372, 5.000000e-01\l  %374 = fmul contract double %373, %185\l  %375 = fadd contract double %374, %345\l  %376 = fdiv contract double %375, %101\l  %377 = fptrunc double %376 to float\l  %378 = zext i32 %364 to i64\l  %379 = getelementptr inbounds float, float addrspace(1)* %25, i64 %378\l  store float %377, float addrspace(1)* %379, align 4, !tbaa !11\l  %380 = fpext float %371 to double\l  %381 = fadd contract double %380, 5.000000e-01\l  %382 = fmul contract double %381, %161\l  %383 = fadd contract double %382, %346\l  %384 = fdiv contract double %383, %100\l  %385 = fptrunc double %384 to float\l  %386 = or i32 %364, 1\l  %387 = zext i32 %386 to i64\l  %388 = getelementptr inbounds float, float addrspace(1)* %25, i64 %387\l  store float %385, float addrspace(1)* %388, align 4, !tbaa !11\l  %389 = shl i32 %361, 2\l  %390 = add i32 %349, %389\l  %391 = zext i32 %390 to i64\l  %392 = getelementptr inbounds float, float addrspace(1)* %21, i64 %391\l  %393 = load float, float addrspace(1)* %392, align 4, !tbaa !11\l  %394 = or i32 %390, 1\l  %395 = zext i32 %394 to i64\l  %396 = getelementptr inbounds float, float addrspace(1)* %21, i64 %395\l  %397 = load float, float addrspace(1)* %396, align 4, !tbaa !11\l  %398 = fcmp contract ogt float %397, %393\l  %399 = select i1 %398, float 1.000000e+00, float 0.000000e+00\l  %400 = select i1 %398, float %397, float %393\l  %401 = or i32 %390, 2\l  %402 = zext i32 %401 to i64\l  %403 = getelementptr inbounds float, float addrspace(1)* %21, i64 %402\l  %404 = load float, float addrspace(1)* %403, align 4, !tbaa !11\l  %405 = fcmp contract ogt float %404, %400\l  %406 = select i1 %405, float 2.000000e+00, float %399\l  %407 = select i1 %405, float %404, float %400\l  %408 = or i32 %390, 3\l  %409 = zext i32 %408 to i64\l  %410 = getelementptr inbounds float, float addrspace(1)* %21, i64 %409\l  %411 = load float, float addrspace(1)* %410, align 4, !tbaa !11\l  %412 = fcmp contract ogt float %411, %407\l  %413 = select i1 %412, float 3.000000e+00, float %406\l  %414 = add i32 %361, %350\l  %415 = zext i32 %414 to i64\l  %416 = getelementptr inbounds float, float addrspace(1)* %26, i64 %415\l  store float %413, float addrspace(1)* %416, align 4, !tbaa !11\l  %417 = add nuw i32 %361, 1\l  %418 = icmp eq i32 %417, %336\l  br i1 %418, label %419, label %360, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4be7b10:s0 -> Node0x4bddae0;
	Node0x4be7b10:s1 -> Node0x4be7b10;
	Node0x4bddae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%419:\l419:                                              \l  br i1 %10, label %420, label %594\l|{<s0>T|<s1>F}}"];
	Node0x4bddae0:s0 -> Node0x4beaf80;
	Node0x4bddae0:s1 -> Node0x4bdc4c0;
	Node0x4beaf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%420:\l420:                                              \l  %421 = icmp eq i32 %109, 0\l  br i1 %421, label %443, label %422\l|{<s0>T|<s1>F}}"];
	Node0x4beaf80:s0 -> Node0x4beb110;
	Node0x4beaf80:s1 -> Node0x4beb160;
	Node0x4beb160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%422:\l422:                                              \l  %423 = and i32 %109, 7\l  %424 = icmp ult i32 %110, 7\l  br i1 %424, label %427, label %425\l|{<s0>T|<s1>F}}"];
	Node0x4beb160:s0 -> Node0x4beb3c0;
	Node0x4beb160:s1 -> Node0x4beb410;
	Node0x4beb410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%425:\l425:                                              \l  %426 = and i32 %109, -8\l  br label %446\l}"];
	Node0x4beb410 -> Node0x4beb5e0;
	Node0x4beb3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%427:\l427:                                              \l  %428 = phi i32 [ undef, %422 ], [ %488, %446 ]\l  %429 = phi i32 [ 0, %422 ], [ %489, %446 ]\l  %430 = phi i32 [ 0, %422 ], [ %488, %446 ]\l  %431 = icmp eq i32 %423, 0\l  br i1 %431, label %443, label %432\l|{<s0>T|<s1>F}}"];
	Node0x4beb3c0:s0 -> Node0x4beb110;
	Node0x4beb3c0:s1 -> Node0x4beb980;
	Node0x4beb980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%432:\l432:                                              \l  %433 = phi i32 [ %440, %432 ], [ %429, %427 ]\l  %434 = phi i32 [ %439, %432 ], [ %430, %427 ]\l  %435 = phi i32 [ %441, %432 ], [ 0, %427 ]\l  %436 = zext i32 %433 to i64\l  %437 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %436\l  %438 = load i32, i32 addrspace(1)* %437, align 4, !tbaa !7\l  %439 = add i32 %438, %434\l  %440 = add nuw nsw i32 %433, 1\l  %441 = add i32 %435, 1\l  %442 = icmp eq i32 %441, %423\l  br i1 %442, label %443, label %432, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4beb980:s0 -> Node0x4beb110;
	Node0x4beb980:s1 -> Node0x4beb980;
	Node0x4beb110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%443:\l443:                                              \l  %444 = phi i32 [ 0, %420 ], [ %428, %427 ], [ %439, %432 ]\l  %445 = icmp ult i32 %109, %5\l  br i1 %445, label %505, label %492\l|{<s0>T|<s1>F}}"];
	Node0x4beb110:s0 -> Node0x4bec430;
	Node0x4beb110:s1 -> Node0x4bec480;
	Node0x4beb5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%446:\l446:                                              \l  %447 = phi i32 [ 0, %425 ], [ %489, %446 ]\l  %448 = phi i32 [ 0, %425 ], [ %488, %446 ]\l  %449 = phi i32 [ 0, %425 ], [ %490, %446 ]\l  %450 = zext i32 %447 to i64\l  %451 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %450\l  %452 = load i32, i32 addrspace(1)* %451, align 4, !tbaa !7\l  %453 = add i32 %452, %448\l  %454 = or i32 %447, 1\l  %455 = zext i32 %454 to i64\l  %456 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %455\l  %457 = load i32, i32 addrspace(1)* %456, align 4, !tbaa !7\l  %458 = add i32 %457, %453\l  %459 = or i32 %447, 2\l  %460 = zext i32 %459 to i64\l  %461 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %460\l  %462 = load i32, i32 addrspace(1)* %461, align 4, !tbaa !7\l  %463 = add i32 %462, %458\l  %464 = or i32 %447, 3\l  %465 = zext i32 %464 to i64\l  %466 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %465\l  %467 = load i32, i32 addrspace(1)* %466, align 4, !tbaa !7\l  %468 = add i32 %467, %463\l  %469 = or i32 %447, 4\l  %470 = zext i32 %469 to i64\l  %471 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %470\l  %472 = load i32, i32 addrspace(1)* %471, align 4, !tbaa !7\l  %473 = add i32 %472, %468\l  %474 = or i32 %447, 5\l  %475 = zext i32 %474 to i64\l  %476 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %475\l  %477 = load i32, i32 addrspace(1)* %476, align 4, !tbaa !7\l  %478 = add i32 %477, %473\l  %479 = or i32 %447, 6\l  %480 = zext i32 %479 to i64\l  %481 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %480\l  %482 = load i32, i32 addrspace(1)* %481, align 4, !tbaa !7\l  %483 = add i32 %482, %478\l  %484 = or i32 %447, 7\l  %485 = zext i32 %484 to i64\l  %486 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %485\l  %487 = load i32, i32 addrspace(1)* %486, align 4, !tbaa !7\l  %488 = add i32 %487, %483\l  %489 = add nuw nsw i32 %447, 8\l  %490 = add i32 %449, 8\l  %491 = icmp eq i32 %490, %426\l  br i1 %491, label %427, label %446, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4beb5e0:s0 -> Node0x4beb3c0;
	Node0x4beb5e0:s1 -> Node0x4beb5e0;
	Node0x4bec480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%492:\l492:                                              \l  %493 = phi i32 [ %444, %443 ], [ %511, %505 ]\l  %494 = zext i32 %109 to i64\l  %495 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %494\l  %496 = load i32, i32 addrspace(1)* %495, align 4, !tbaa !7\l  %497 = icmp eq i32 %496, 0\l  br i1 %497, label %594, label %498\l|{<s0>T|<s1>F}}"];
	Node0x4bec480:s0 -> Node0x4bdc4c0;
	Node0x4bec480:s1 -> Node0x4bee1e0;
	Node0x4bee1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%498:\l498:                                              \l  %499 = mul i32 %493, %104\l  %500 = mul i32 %444, 3\l  %501 = add i32 %499, %500\l  %502 = mul i32 %109, 3\l  %503 = add i32 %502, %105\l  %504 = mul i32 %503, %7\l  br label %514\l}"];
	Node0x4bee1e0 -> Node0x4bee680;
	Node0x4bec430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%505:\l505:                                              \l  %506 = phi i32 [ %512, %505 ], [ %109, %443 ]\l  %507 = phi i32 [ %511, %505 ], [ %444, %443 ]\l  %508 = sext i32 %506 to i64\l  %509 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %508\l  %510 = load i32, i32 addrspace(1)* %509, align 4, !tbaa !7\l  %511 = add i32 %510, %507\l  %512 = add nuw nsw i32 %506, 1\l  %513 = icmp ult i32 %512, %5\l  br i1 %513, label %505, label %492, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4bec430:s0 -> Node0x4bec430;
	Node0x4bec430:s1 -> Node0x4bec480;
	Node0x4bee680 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%514:\l514:                                              \l  %515 = phi i32 [ 0, %498 ], [ %580, %514 ]\l  %516 = mul i32 %515, 3\l  %517 = add i32 %501, %516\l  %518 = add i32 %516, %504\l  %519 = zext i32 %517 to i64\l  %520 = getelementptr inbounds float, float addrspace(1)* %22, i64 %519\l  %521 = load float, float addrspace(1)* %520, align 4, !tbaa !11\l  %522 = fmul float %521, 0x3FF7154760000000\l  %523 = tail call float @llvm.rint.f32(float %522)\l  %524 = fcmp ogt float %521, 0x40562E4300000000\l  %525 = fcmp olt float %521, 0xC059D1DA00000000\l  %526 = fneg float %522\l  %527 = tail call float @llvm.fma.f32(float %521, float 0x3FF7154760000000,\l... float %526)\l  %528 = tail call float @llvm.fma.f32(float %521, float 0x3E54AE0BE0000000,\l... float %527)\l  %529 = fsub float %522, %523\l  %530 = fadd float %528, %529\l  %531 = tail call float @llvm.exp2.f32(float %530)\l  %532 = fptosi float %523 to i32\l  %533 = tail call float @llvm.amdgcn.ldexp.f32(float %531, i32 %532)\l  %534 = select i1 %525, float 0.000000e+00, float %533\l  %535 = select i1 %524, float 0x7FF0000000000000, float %534\l  %536 = add i32 %517, 1\l  %537 = zext i32 %536 to i64\l  %538 = getelementptr inbounds float, float addrspace(1)* %22, i64 %537\l  %539 = load float, float addrspace(1)* %538, align 4, !tbaa !11\l  %540 = fmul float %539, 0x3FF7154760000000\l  %541 = tail call float @llvm.rint.f32(float %540)\l  %542 = fcmp ogt float %539, 0x40562E4300000000\l  %543 = fcmp olt float %539, 0xC059D1DA00000000\l  %544 = fneg float %540\l  %545 = tail call float @llvm.fma.f32(float %539, float 0x3FF7154760000000,\l... float %544)\l  %546 = tail call float @llvm.fma.f32(float %539, float 0x3E54AE0BE0000000,\l... float %545)\l  %547 = fsub float %540, %541\l  %548 = fadd float %546, %547\l  %549 = tail call float @llvm.exp2.f32(float %548)\l  %550 = fptosi float %541 to i32\l  %551 = tail call float @llvm.amdgcn.ldexp.f32(float %549, i32 %550)\l  %552 = select i1 %543, float 0.000000e+00, float %551\l  %553 = select i1 %542, float 0x7FF0000000000000, float %552\l  %554 = add i32 %517, 2\l  %555 = zext i32 %554 to i64\l  %556 = getelementptr inbounds float, float addrspace(1)* %22, i64 %555\l  %557 = load float, float addrspace(1)* %556, align 4, !tbaa !11\l  %558 = fmul float %557, 0x3FF7154760000000\l  %559 = tail call float @llvm.rint.f32(float %558)\l  %560 = fcmp ogt float %557, 0x40562E4300000000\l  %561 = fcmp olt float %557, 0xC059D1DA00000000\l  %562 = fneg float %558\l  %563 = tail call float @llvm.fma.f32(float %557, float 0x3FF7154760000000,\l... float %562)\l  %564 = tail call float @llvm.fma.f32(float %557, float 0x3E54AE0BE0000000,\l... float %563)\l  %565 = fsub float %558, %559\l  %566 = fadd float %564, %565\l  %567 = tail call float @llvm.exp2.f32(float %566)\l  %568 = fptosi float %559 to i32\l  %569 = tail call float @llvm.amdgcn.ldexp.f32(float %567, i32 %568)\l  %570 = select i1 %561, float 0.000000e+00, float %569\l  %571 = select i1 %560, float 0x7FF0000000000000, float %570\l  %572 = zext i32 %518 to i64\l  %573 = getelementptr inbounds float, float addrspace(1)* %27, i64 %572\l  store float %535, float addrspace(1)* %573, align 4, !tbaa !11\l  %574 = add i32 %518, 1\l  %575 = zext i32 %574 to i64\l  %576 = getelementptr inbounds float, float addrspace(1)* %27, i64 %575\l  store float %553, float addrspace(1)* %576, align 4, !tbaa !11\l  %577 = add i32 %518, 2\l  %578 = zext i32 %577 to i64\l  %579 = getelementptr inbounds float, float addrspace(1)* %27, i64 %578\l  store float %571, float addrspace(1)* %579, align 4, !tbaa !11\l  %580 = add nuw i32 %515, 1\l  %581 = icmp eq i32 %580, %496\l  br i1 %581, label %594, label %514, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4bee680:s0 -> Node0x4bdc4c0;
	Node0x4bee680:s1 -> Node0x4bee680;
	Node0x4be28a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%582:\l582:                                              \l  %583 = zext i32 %118 to i64\l  %584 = getelementptr inbounds float, float addrspace(1)* %23, i64 %583\l  store float 0.000000e+00, float addrspace(1)* %584, align 4, !tbaa !11\l  %585 = or i32 %118, 1\l  %586 = zext i32 %585 to i64\l  %587 = getelementptr inbounds float, float addrspace(1)* %23, i64 %586\l  store float 0.000000e+00, float addrspace(1)* %587, align 4, !tbaa !11\l  %588 = or i32 %118, 2\l  %589 = zext i32 %588 to i64\l  %590 = getelementptr inbounds float, float addrspace(1)* %23, i64 %589\l  store float 0.000000e+00, float addrspace(1)* %590, align 4, !tbaa !11\l  %591 = or i32 %118, 3\l  %592 = zext i32 %591 to i64\l  %593 = getelementptr inbounds float, float addrspace(1)* %23, i64 %592\l  store float 0.000000e+00, float addrspace(1)* %593, align 4, !tbaa !11\l  br label %594\l}"];
	Node0x4be28a0 -> Node0x4bdc4c0;
	Node0x4bdc4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%594:\l594:                                              \l  %595 = add nuw i32 %109, 1\l  %596 = icmp ult i32 %595, %72\l  %597 = add i32 %108, 1\l  br i1 %596, label %107, label %598, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4bdc4c0:s0 -> Node0x4bdc3a0;
	Node0x4bdc4c0:s1 -> Node0x4bd7d10;
	Node0x4bd7d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%598:\l598:                                              \l  ret void\l}"];
}
