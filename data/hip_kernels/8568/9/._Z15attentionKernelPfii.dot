digraph "CFG for '_Z15attentionKernelPfii' function" {
	label="CFG for '_Z15attentionKernelPfii' function";

	Node0x5153f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %184\l|{<s0>T|<s1>F}}"];
	Node0x5153f60:s0 -> Node0x5155e30;
	Node0x5153f60:s1 -> Node0x5155ec0;
	Node0x5155e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%14:\l14:                                               \l  %15 = icmp sgt i32 %1, 0\l  br i1 %15, label %16, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5155e30:s0 -> Node0x5156090;
	Node0x5155e30:s1 -> Node0x51560e0;
	Node0x5156090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%16:\l16:                                               \l  %17 = and i32 %1, 7\l  %18 = icmp ult i32 %1, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5156090:s0 -> Node0x5156450;
	Node0x5156090:s1 -> Node0x51564a0;
	Node0x51564a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %1, -8\l  br label %46\l}"];
	Node0x51564a0 -> Node0x5156670;
	Node0x5156450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %16 ], [ %104, %46 ]\l  %23 = phi i32 [ 0, %16 ], [ %105, %46 ]\l  %24 = phi float [ 0.000000e+00, %16 ], [ %104, %46 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %39, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5156450:s0 -> Node0x51560e0;
	Node0x5156450:s1 -> Node0x51578e0;
	Node0x51578e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %36, %26 ], [ %23, %21 ]\l  %28 = phi float [ %35, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %37, %26 ], [ 0, %21 ]\l  %30 = mul nsw i32 %27, %2\l  %31 = add nsw i32 %30, %12\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %35 = fadd contract float %28, %34\l  %36 = add nuw nsw i32 %27, 1\l  %37 = add i32 %29, 1\l  %38 = icmp eq i32 %37, %17\l  br i1 %38, label %39, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x51578e0:s0 -> Node0x51560e0;
	Node0x51578e0:s1 -> Node0x51578e0;
	Node0x51560e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%39:\l39:                                               \l  %40 = phi float [ 0.000000e+00, %14 ], [ %22, %21 ], [ %35, %26 ]\l  br i1 %15, label %41, label %184\l|{<s0>T|<s1>F}}"];
	Node0x51560e0:s0 -> Node0x5158d20;
	Node0x51560e0:s1 -> Node0x5155ec0;
	Node0x5158d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = and i32 %1, 7\l  %43 = icmp ult i32 %1, 8\l  br i1 %43, label %169, label %44\l|{<s0>T|<s1>F}}"];
	Node0x5158d20:s0 -> Node0x5158f40;
	Node0x5158d20:s1 -> Node0x5158f90;
	Node0x5158f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%44:\l44:                                               \l  %45 = and i32 %1, -8\l  br label %108\l}"];
	Node0x5158f90 -> Node0x5159160;
	Node0x5156670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%46:\l46:                                               \l  %47 = phi i32 [ 0, %19 ], [ %105, %46 ]\l  %48 = phi float [ 0.000000e+00, %19 ], [ %104, %46 ]\l  %49 = phi i32 [ 0, %19 ], [ %106, %46 ]\l  %50 = mul nsw i32 %47, %2\l  %51 = add nsw i32 %50, %12\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fadd contract float %48, %54\l  %56 = or i32 %47, 1\l  %57 = mul nsw i32 %56, %2\l  %58 = add nsw i32 %57, %12\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %62 = fadd contract float %55, %61\l  %63 = or i32 %47, 2\l  %64 = mul nsw i32 %63, %2\l  %65 = add nsw i32 %64, %12\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fadd contract float %62, %68\l  %70 = or i32 %47, 3\l  %71 = mul nsw i32 %70, %2\l  %72 = add nsw i32 %71, %12\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = fadd contract float %69, %75\l  %77 = or i32 %47, 4\l  %78 = mul nsw i32 %77, %2\l  %79 = add nsw i32 %78, %12\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fadd contract float %76, %82\l  %84 = or i32 %47, 5\l  %85 = mul nsw i32 %84, %2\l  %86 = add nsw i32 %85, %12\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = fadd contract float %83, %89\l  %91 = or i32 %47, 6\l  %92 = mul nsw i32 %91, %2\l  %93 = add nsw i32 %92, %12\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fadd contract float %90, %96\l  %98 = or i32 %47, 7\l  %99 = mul nsw i32 %98, %2\l  %100 = add nsw i32 %99, %12\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = fadd contract float %97, %103\l  %105 = add nuw nsw i32 %47, 8\l  %106 = add i32 %49, 8\l  %107 = icmp eq i32 %106, %20\l  br i1 %107, label %21, label %46, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5156670:s0 -> Node0x5156450;
	Node0x5156670:s1 -> Node0x5156670;
	Node0x5159160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%108:\l108:                                              \l  %109 = phi i32 [ 0, %44 ], [ %166, %108 ]\l  %110 = phi i32 [ 0, %44 ], [ %167, %108 ]\l  %111 = mul nsw i32 %109, %2\l  %112 = add nsw i32 %111, %12\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7\l  %116 = fmul contract float %40, %115\l  store float %116, float addrspace(1)* %114, align 4, !tbaa !7\l  %117 = or i32 %109, 1\l  %118 = mul nsw i32 %117, %2\l  %119 = add nsw i32 %118, %12\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7\l  %123 = fmul contract float %40, %122\l  store float %123, float addrspace(1)* %121, align 4, !tbaa !7\l  %124 = or i32 %109, 2\l  %125 = mul nsw i32 %124, %2\l  %126 = add nsw i32 %125, %12\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7\l  %130 = fmul contract float %40, %129\l  store float %130, float addrspace(1)* %128, align 4, !tbaa !7\l  %131 = or i32 %109, 3\l  %132 = mul nsw i32 %131, %2\l  %133 = add nsw i32 %132, %12\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %0, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7\l  %137 = fmul contract float %40, %136\l  store float %137, float addrspace(1)* %135, align 4, !tbaa !7\l  %138 = or i32 %109, 4\l  %139 = mul nsw i32 %138, %2\l  %140 = add nsw i32 %139, %12\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7\l  %144 = fmul contract float %40, %143\l  store float %144, float addrspace(1)* %142, align 4, !tbaa !7\l  %145 = or i32 %109, 5\l  %146 = mul nsw i32 %145, %2\l  %147 = add nsw i32 %146, %12\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7\l  %151 = fmul contract float %40, %150\l  store float %151, float addrspace(1)* %149, align 4, !tbaa !7\l  %152 = or i32 %109, 6\l  %153 = mul nsw i32 %152, %2\l  %154 = add nsw i32 %153, %12\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %0, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !7\l  %158 = fmul contract float %40, %157\l  store float %158, float addrspace(1)* %156, align 4, !tbaa !7\l  %159 = or i32 %109, 7\l  %160 = mul nsw i32 %159, %2\l  %161 = add nsw i32 %160, %12\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7\l  %165 = fmul contract float %40, %164\l  store float %165, float addrspace(1)* %163, align 4, !tbaa !7\l  %166 = add nuw nsw i32 %109, 8\l  %167 = add i32 %110, 8\l  %168 = icmp eq i32 %167, %45\l  br i1 %168, label %169, label %108, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5159160:s0 -> Node0x5158f40;
	Node0x5159160:s1 -> Node0x5159160;
	Node0x5158f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%169:\l169:                                              \l  %170 = phi i32 [ 0, %41 ], [ %166, %108 ]\l  %171 = icmp eq i32 %42, 0\l  br i1 %171, label %184, label %172\l|{<s0>T|<s1>F}}"];
	Node0x5158f40:s0 -> Node0x5155ec0;
	Node0x5158f40:s1 -> Node0x515eb20;
	Node0x515eb20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%172:\l172:                                              \l  %173 = phi i32 [ %181, %172 ], [ %170, %169 ]\l  %174 = phi i32 [ %182, %172 ], [ 0, %169 ]\l  %175 = mul nsw i32 %173, %2\l  %176 = add nsw i32 %175, %12\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %0, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !7\l  %180 = fmul contract float %40, %179\l  store float %180, float addrspace(1)* %178, align 4, !tbaa !7\l  %181 = add nuw nsw i32 %173, 1\l  %182 = add i32 %174, 1\l  %183 = icmp eq i32 %182, %42\l  br i1 %183, label %184, label %172, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x515eb20:s0 -> Node0x5155ec0;
	Node0x515eb20:s1 -> Node0x515eb20;
	Node0x5155ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%184:\l184:                                              \l  ret void\l}"];
}
