digraph "CFG for '_Z26patchmatch_r_argmax_kernelPfS_S_Piiiiii' function" {
	label="CFG for '_Z26patchmatch_r_argmax_kernelPfS_S_Piiiiii' function";

	Node0x6487a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = mul nsw i32 %6, %5\l  %20 = mul nsw i32 %8, %7\l  %21 = icmp slt i32 %18, %19\l  %22 = icmp sgt i32 %7, 0\l  %23 = select i1 %21, i1 %22, i1 false\l  br i1 %23, label %24, label %125\l|{<s0>T|<s1>F}}"];
	Node0x6487a80:s0 -> Node0x648a7c0;
	Node0x6487a80:s1 -> Node0x648a850;
	Node0x648a7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%24:\l24:                                               \l  %25 = icmp sgt i32 %8, 0\l  %26 = mul nsw i32 %18, %20\l  %27 = shl nsw i32 %18, 1\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %28\l  %30 = add nuw nsw i32 %27, 1\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %31\l  %33 = icmp sgt i32 %4, 0\l  %34 = and i32 %4, 3\l  %35 = icmp ult i32 %4, 4\l  %36 = and i32 %4, -4\l  %37 = icmp eq i32 %34, 0\l  br label %38\l}"];
	Node0x648a7c0 -> Node0x648b2a0;
	Node0x648b2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%38:\l38:                                               \l  %39 = phi double [ -1.000000e+20, %24 ], [ %44, %43 ]\l  %40 = phi i32 [ 0, %24 ], [ %45, %43 ]\l  br i1 %25, label %41, label %43\l|{<s0>T|<s1>F}}"];
	Node0x648b2a0:s0 -> Node0x648c040;
	Node0x648b2a0:s1 -> Node0x648bde0;
	Node0x648c040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = mul nsw i32 %40, %8\l  br label %47\l}"];
	Node0x648c040 -> Node0x648c210;
	Node0x648bde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%43:\l43:                                               \l  %44 = phi double [ %39, %38 ], [ %122, %121 ]\l  %45 = add nuw nsw i32 %40, 1\l  %46 = icmp eq i32 %45, %7\l  br i1 %46, label %125, label %38, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x648bde0:s0 -> Node0x648a850;
	Node0x648bde0:s1 -> Node0x648b2a0;
	Node0x648c210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%47:\l47:                                               \l  %48 = phi double [ %39, %41 ], [ %122, %121 ]\l  %49 = phi i32 [ 0, %41 ], [ %123, %121 ]\l  %50 = add nsw i32 %49, %42\l  %51 = add nsw i32 %50, %26\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !9\l  %55 = fpext float %54 to double\l  %56 = fcmp contract olt double %48, %55\l  br i1 %56, label %57, label %121\l|{<s0>T|<s1>F}}"];
	Node0x648c210:s0 -> Node0x648cd10;
	Node0x648c210:s1 -> Node0x648c300;
	Node0x648cd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%57:\l57:                                               \l  store i32 %49, i32 addrspace(1)* %29, align 4, !tbaa !13\l  store i32 %40, i32 addrspace(1)* %32, align 4, !tbaa !13\l  br i1 %33, label %58, label %121\l|{<s0>T|<s1>F}}"];
	Node0x648cd10:s0 -> Node0x648d680;
	Node0x648cd10:s1 -> Node0x648c300;
	Node0x648d680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%58:\l58:                                               \l  br i1 %35, label %104, label %59\l|{<s0>T|<s1>F}}"];
	Node0x648d680:s0 -> Node0x648d7c0;
	Node0x648d680:s1 -> Node0x648d810;
	Node0x648d810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%59:\l59:                                               \l  %60 = phi i32 [ %101, %59 ], [ 0, %58 ]\l  %61 = phi i32 [ %102, %59 ], [ 0, %58 ]\l  %62 = mul nsw i32 %60, %20\l  %63 = add nsw i32 %62, %50\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !9\l  %67 = mul nsw i32 %60, %19\l  %68 = add nsw i32 %67, %18\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %2, i64 %69\l  store float %66, float addrspace(1)* %70, align 4, !tbaa !9\l  %71 = or i32 %60, 1\l  %72 = mul nsw i32 %71, %20\l  %73 = add nsw i32 %72, %50\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !9\l  %77 = mul nsw i32 %71, %19\l  %78 = add nsw i32 %77, %18\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %2, i64 %79\l  store float %76, float addrspace(1)* %80, align 4, !tbaa !9\l  %81 = or i32 %60, 2\l  %82 = mul nsw i32 %81, %20\l  %83 = add nsw i32 %82, %50\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !9\l  %87 = mul nsw i32 %81, %19\l  %88 = add nsw i32 %87, %18\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %2, i64 %89\l  store float %86, float addrspace(1)* %90, align 4, !tbaa !9\l  %91 = or i32 %60, 3\l  %92 = mul nsw i32 %91, %20\l  %93 = add nsw i32 %92, %50\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %1, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !9\l  %97 = mul nsw i32 %91, %19\l  %98 = add nsw i32 %97, %18\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %2, i64 %99\l  store float %96, float addrspace(1)* %100, align 4, !tbaa !9\l  %101 = add nuw nsw i32 %60, 4\l  %102 = add i32 %61, 4\l  %103 = icmp eq i32 %102, %36\l  br i1 %103, label %104, label %59, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x648d810:s0 -> Node0x648d7c0;
	Node0x648d810:s1 -> Node0x648d810;
	Node0x648d7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%104:\l104:                                              \l  %105 = phi i32 [ 0, %58 ], [ %101, %59 ]\l  br i1 %37, label %121, label %106\l|{<s0>T|<s1>F}}"];
	Node0x648d7c0:s0 -> Node0x648c300;
	Node0x648d7c0:s1 -> Node0x648fe90;
	Node0x648fe90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ %118, %106 ], [ %105, %104 ]\l  %108 = phi i32 [ %119, %106 ], [ 0, %104 ]\l  %109 = mul nsw i32 %107, %20\l  %110 = add nsw i32 %109, %50\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !9\l  %114 = mul nsw i32 %107, %19\l  %115 = add nsw i32 %114, %18\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  store float %113, float addrspace(1)* %117, align 4, !tbaa !9\l  %118 = add nuw nsw i32 %107, 1\l  %119 = add i32 %108, 1\l  %120 = icmp eq i32 %119, %34\l  br i1 %120, label %121, label %106, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x648fe90:s0 -> Node0x648c300;
	Node0x648fe90:s1 -> Node0x648fe90;
	Node0x648c300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%121:\l121:                                              \l  %122 = phi double [ %48, %47 ], [ %55, %57 ], [ %55, %106 ], [ %55, %104 ]\l  %123 = add nuw nsw i32 %49, 1\l  %124 = icmp eq i32 %123, %8\l  br i1 %124, label %43, label %47, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x648c300:s0 -> Node0x648bde0;
	Node0x648c300:s1 -> Node0x648c210;
	Node0x648a850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%125:\l125:                                              \l  ret void\l}"];
}
