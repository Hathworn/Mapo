digraph "CFG for '_Z12gpuCrossoverPfP12hiprandStateiiif' function" {
	label="CFG for '_Z12gpuCrossoverPfP12hiprandStateiiif' function";

	Node0x4dd8310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 0, i32 0, i32 0, i32 0\l  %17 = load i32, i32 addrspace(1)* %16, align 8, !amdgpu.noclobber !5\l  %18 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 0, i32 0, i32 0, i32 5, i64 0\l  %19 = load i32, i32 addrspace(1)* %18, align 8, !amdgpu.noclobber !5\l  %20 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 0, i32 0, i32 0, i32 5, i64 1\l  %21 = load i32, i32 addrspace(1)* %20, align 4, !amdgpu.noclobber !5\l  %22 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 0, i32 0, i32 0, i32 5, i64 2\l  %23 = load i32, i32 addrspace(1)* %22, align 8, !amdgpu.noclobber !5\l  %24 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 0, i32 0, i32 0, i32 5, i64 3\l  %25 = load i32, i32 addrspace(1)* %24, align 4, !amdgpu.noclobber !5\l  %26 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 0, i32 0, i32 0, i32 5, i64 4\l  %27 = load i32, i32 addrspace(1)* %26, align 8, !amdgpu.noclobber !5\l  %28 = lshr i32 %19, 2\l  %29 = xor i32 %28, %19\l  %30 = shl i32 %27, 4\l  %31 = shl i32 %29, 1\l  %32 = xor i32 %31, %30\l  %33 = xor i32 %32, %29\l  %34 = xor i32 %33, %27\l  %35 = add i32 %17, 362437\l  store i32 %35, i32 addrspace(1)* %16, align 8\l  store i32 %21, i32 addrspace(1)* %18, align 8\l  store i32 %23, i32 addrspace(1)* %20, align 4\l  store i32 %25, i32 addrspace(1)* %22, align 8\l  store i32 %27, i32 addrspace(1)* %24, align 4\l  store i32 %34, i32 addrspace(1)* %26, align 8\l  %36 = sitofp i32 %2 to float\l  %37 = shl nsw i32 %15, 1\l  %38 = mul nsw i32 %37, %2\l  %39 = add nsw i32 %38, %2\l  %40 = add nsw i32 %39, %2\l  %41 = mul nsw i32 %3, %2\l  %42 = icmp slt i32 %40, %41\l  br i1 %42, label %43, label %74\l|{<s0>T|<s1>F}}"];
	Node0x4dd8310:s0 -> Node0x4dda330;
	Node0x4dd8310:s1 -> Node0x4ddc060;
	Node0x4dda330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%43:\l43:                                               \l  %44 = add i32 %34, %35\l  %45 = uitofp i32 %44 to float\l  %46 = fmul contract float %45, 0x3DF0000000000000\l  %47 = fadd contract float %46, 0x3DF0000000000000\l  %48 = fmul contract float %47, %36\l  %49 = fptosi float %48 to i32\l  %50 = icmp slt i32 %49, %2\l  br i1 %50, label %51, label %74\l|{<s0>T|<s1>F}}"];
	Node0x4dda330:s0 -> Node0x4ddcf60;
	Node0x4dda330:s1 -> Node0x4ddc060;
	Node0x4ddcf60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%51:\l51:                                               \l  %52 = add nsw i32 %38, %49\l  %53 = add nsw i32 %39, %49\l  %54 = sext i32 %52 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54\l  %56 = sext i32 %53 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7\l  br label %59\l}"];
	Node0x4ddcf60 -> Node0x4ddd580;
	Node0x4ddd580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%59:\l59:                                               \l  %60 = phi float [ %58, %51 ], [ %64, %59 ]\l  %61 = phi i32 [ %49, %51 ], [ %65, %59 ]\l  %62 = load float, float addrspace(1)* %55, align 4, !tbaa !7\l  %63 = fptosi float %62 to i32\l  store float %60, float addrspace(1)* %55, align 4, !tbaa !7\l  %64 = sitofp i32 %63 to float\l  store float %64, float addrspace(1)* %57, align 4, !tbaa !7\l  %65 = add nsw i32 %61, 1\l  %66 = icmp slt i32 %65, %2\l  br i1 %66, label %59, label %67, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4ddd580:s0 -> Node0x4ddd580;
	Node0x4ddd580:s1 -> Node0x4ddb7b0;
	Node0x4ddb7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%67:\l67:                                               \l  %68 = load i32, i32 addrspace(1)* %16, align 8\l  %69 = load i32, i32 addrspace(1)* %18, align 8\l  %70 = load i32, i32 addrspace(1)* %20, align 4\l  %71 = load i32, i32 addrspace(1)* %22, align 8\l  %72 = load i32, i32 addrspace(1)* %24, align 4\l  %73 = load i32, i32 addrspace(1)* %26, align 8\l  br label %74\l}"];
	Node0x4ddb7b0 -> Node0x4ddc060;
	Node0x4ddc060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%74:\l74:                                               \l  %75 = phi i32 [ %73, %67 ], [ %34, %43 ], [ %34, %6 ]\l  %76 = phi i32 [ %72, %67 ], [ %27, %43 ], [ %27, %6 ]\l  %77 = phi i32 [ %71, %67 ], [ %25, %43 ], [ %25, %6 ]\l  %78 = phi i32 [ %70, %67 ], [ %23, %43 ], [ %23, %6 ]\l  %79 = phi i32 [ %69, %67 ], [ %21, %43 ], [ %21, %6 ]\l  %80 = phi i32 [ %68, %67 ], [ %35, %43 ], [ %35, %6 ]\l  %81 = lshr i32 %79, 2\l  %82 = xor i32 %81, %79\l  %83 = shl i32 %75, 4\l  %84 = shl i32 %82, 1\l  %85 = xor i32 %84, %83\l  %86 = xor i32 %85, %82\l  %87 = xor i32 %86, %75\l  %88 = add i32 %80, 362437\l  %89 = add i32 %87, %88\l  %90 = uitofp i32 %89 to float\l  %91 = fmul contract float %90, 0x3DF0000000000000\l  %92 = fadd contract float %91, 0x3DF0000000000000\l  store i32 %88, i32 addrspace(1)* %16, align 8\l  store i32 %78, i32 addrspace(1)* %18, align 8\l  store i32 %77, i32 addrspace(1)* %20, align 4\l  store i32 %76, i32 addrspace(1)* %22, align 8\l  store i32 %75, i32 addrspace(1)* %24, align 4\l  store i32 %87, i32 addrspace(1)* %26, align 8\l  %93 = fmul contract float %92, 1.000000e+02\l  %94 = fptosi float %93 to i32\l  %95 = sitofp i32 %94 to float\l  %96 = fmul contract float %5, 1.000000e+02\l  %97 = fcmp contract ogt float %96, %95\l  br i1 %97, label %98, label %203\l|{<s0>T|<s1>F}}"];
	Node0x4ddc060:s0 -> Node0x4ddfab0;
	Node0x4ddc060:s1 -> Node0x4ddfb00;
	Node0x4ddfab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%98:\l98:                                               \l  %99 = lshr i32 %78, 2\l  %100 = xor i32 %99, %78\l  %101 = shl i32 %87, 4\l  %102 = shl i32 %100, 1\l  %103 = xor i32 %102, %101\l  %104 = xor i32 %103, %100\l  %105 = xor i32 %104, %87\l  %106 = add i32 %80, 724874\l  %107 = add i32 %105, %106\l  %108 = uitofp i32 %107 to float\l  %109 = fmul contract float %108, 0x3DF0000000000000\l  %110 = fadd contract float %109, 0x3DF0000000000000\l  store i32 %106, i32 addrspace(1)* %16, align 8\l  store i32 %77, i32 addrspace(1)* %18, align 8\l  store i32 %76, i32 addrspace(1)* %20, align 4\l  store i32 %75, i32 addrspace(1)* %22, align 8\l  store i32 %87, i32 addrspace(1)* %24, align 4\l  store i32 %105, i32 addrspace(1)* %26, align 8\l  %111 = sdiv i32 %2, 4\l  %112 = sitofp i32 %111 to float\l  %113 = fmul contract float %110, %112\l  %114 = fptosi float %113 to i32\l  %115 = icmp sgt i32 %114, 0\l  br i1 %115, label %116, label %203\l|{<s0>T|<s1>F}}"];
	Node0x4ddfab0:s0 -> Node0x4de08d0;
	Node0x4ddfab0:s1 -> Node0x4ddfb00;
	Node0x4de08d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%116:\l116:                                              \l  %117 = and i32 %114, 1\l  %118 = icmp eq i32 %114, 1\l  br i1 %118, label %175, label %119\l|{<s0>T|<s1>F}}"];
	Node0x4de08d0:s0 -> Node0x4de0af0;
	Node0x4de08d0:s1 -> Node0x4de0b40;
	Node0x4de0b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%119:\l119:                                              \l  %120 = and i32 %114, -2\l  br label %121\l}"];
	Node0x4de0b40 -> Node0x4de0d10;
	Node0x4de0d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%121:\l121:                                              \l  %122 = phi i32 [ 0, %119 ], [ %173, %121 ]\l  %123 = load i32, i32 addrspace(1)* %16, align 8\l  %124 = load i32, i32 addrspace(1)* %18, align 8\l  %125 = load i32, i32 addrspace(1)* %20, align 4\l  %126 = load i32, i32 addrspace(1)* %22, align 8\l  %127 = load i32, i32 addrspace(1)* %24, align 4\l  %128 = load i32, i32 addrspace(1)* %26, align 8\l  %129 = lshr i32 %124, 2\l  %130 = xor i32 %129, %124\l  %131 = shl i32 %128, 4\l  %132 = shl i32 %130, 1\l  %133 = xor i32 %132, %131\l  %134 = xor i32 %133, %130\l  %135 = xor i32 %134, %128\l  %136 = add i32 %123, 362437\l  %137 = add i32 %135, %136\l  %138 = uitofp i32 %137 to float\l  %139 = fmul contract float %138, 0x3DF0000000000000\l  %140 = fadd contract float %139, 0x3DF0000000000000\l  store i32 %136, i32 addrspace(1)* %16, align 8\l  store i32 %125, i32 addrspace(1)* %18, align 8\l  store i32 %126, i32 addrspace(1)* %20, align 4\l  store i32 %127, i32 addrspace(1)* %22, align 8\l  store i32 %128, i32 addrspace(1)* %24, align 4\l  store i32 %135, i32 addrspace(1)* %26, align 8\l  %141 = fmul contract float %140, %36\l  %142 = fptosi float %141 to i32\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7\l  %146 = fcmp contract oeq float %145, 1.000000e+00\l  %147 = select i1 %146, float 0.000000e+00, float 1.000000e+00\l  store float %147, float addrspace(1)* %144, align 4, !tbaa !7\l  %148 = load i32, i32 addrspace(1)* %16, align 8\l  %149 = load i32, i32 addrspace(1)* %18, align 8\l  %150 = load i32, i32 addrspace(1)* %20, align 4\l  %151 = load i32, i32 addrspace(1)* %22, align 8\l  %152 = load i32, i32 addrspace(1)* %24, align 4\l  %153 = load i32, i32 addrspace(1)* %26, align 8\l  %154 = lshr i32 %149, 2\l  %155 = xor i32 %154, %149\l  %156 = shl i32 %153, 4\l  %157 = shl i32 %155, 1\l  %158 = xor i32 %157, %156\l  %159 = xor i32 %158, %155\l  %160 = xor i32 %159, %153\l  %161 = add i32 %148, 362437\l  %162 = add i32 %160, %161\l  %163 = uitofp i32 %162 to float\l  %164 = fmul contract float %163, 0x3DF0000000000000\l  %165 = fadd contract float %164, 0x3DF0000000000000\l  store i32 %161, i32 addrspace(1)* %16, align 8\l  store i32 %150, i32 addrspace(1)* %18, align 8\l  store i32 %151, i32 addrspace(1)* %20, align 4\l  store i32 %152, i32 addrspace(1)* %22, align 8\l  store i32 %153, i32 addrspace(1)* %24, align 4\l  store i32 %160, i32 addrspace(1)* %26, align 8\l  %166 = fmul contract float %165, %36\l  %167 = fptosi float %166 to i32\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %0, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !7\l  %171 = fcmp contract oeq float %170, 1.000000e+00\l  %172 = select i1 %171, float 0.000000e+00, float 1.000000e+00\l  store float %172, float addrspace(1)* %169, align 4, !tbaa !7\l  %173 = add i32 %122, 2\l  %174 = icmp eq i32 %173, %120\l  br i1 %174, label %175, label %121, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4de0d10:s0 -> Node0x4de0af0;
	Node0x4de0d10:s1 -> Node0x4de0d10;
	Node0x4de0af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%175:\l175:                                              \l  %176 = icmp eq i32 %117, 0\l  br i1 %176, label %203, label %177\l|{<s0>T|<s1>F}}"];
	Node0x4de0af0:s0 -> Node0x4ddfb00;
	Node0x4de0af0:s1 -> Node0x4de3890;
	Node0x4de3890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%177:\l177:                                              \l  %178 = load i32, i32 addrspace(1)* %16, align 8\l  %179 = load i32, i32 addrspace(1)* %18, align 8\l  %180 = load i32, i32 addrspace(1)* %20, align 4\l  %181 = load i32, i32 addrspace(1)* %22, align 8\l  %182 = load i32, i32 addrspace(1)* %24, align 4\l  %183 = load i32, i32 addrspace(1)* %26, align 8\l  %184 = lshr i32 %179, 2\l  %185 = xor i32 %184, %179\l  %186 = shl i32 %183, 4\l  %187 = shl i32 %185, 1\l  %188 = xor i32 %187, %186\l  %189 = xor i32 %188, %185\l  %190 = xor i32 %189, %183\l  %191 = add i32 %178, 362437\l  %192 = add i32 %190, %191\l  %193 = uitofp i32 %192 to float\l  %194 = fmul contract float %193, 0x3DF0000000000000\l  %195 = fadd contract float %194, 0x3DF0000000000000\l  store i32 %191, i32 addrspace(1)* %16, align 8\l  store i32 %180, i32 addrspace(1)* %18, align 8\l  store i32 %181, i32 addrspace(1)* %20, align 4\l  store i32 %182, i32 addrspace(1)* %22, align 8\l  store i32 %183, i32 addrspace(1)* %24, align 4\l  store i32 %190, i32 addrspace(1)* %26, align 8\l  %196 = fmul contract float %195, %36\l  %197 = fptosi float %196 to i32\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %0, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !7\l  %201 = fcmp contract oeq float %200, 1.000000e+00\l  %202 = select i1 %201, float 0.000000e+00, float 1.000000e+00\l  store float %202, float addrspace(1)* %199, align 4, !tbaa !7\l  br label %203\l}"];
	Node0x4de3890 -> Node0x4ddfb00;
	Node0x4ddfb00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%203:\l203:                                              \l  ret void\l}"];
}
