digraph "CFG for '_Z18kernelMultMatricesPfS_S_ii' function" {
	label="CFG for '_Z18kernelMultMatricesPfS_S_ii' function";

	Node0x465a680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = mul nsw i32 %14, %4\l  %24 = add nsw i32 %22, %23\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %2, i64 %25\l  store float 0.000000e+00, float addrspace(1)* %26, align 4, !tbaa !7\l  br label %28\l}"];
	Node0x465a680 -> Node0x465ed60;
	Node0x465ee60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%27:\l27:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
	Node0x465ed60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi float [ 0.000000e+00, %5 ], [ %125, %28 ]\l  %30 = phi i32 [ 0, %5 ], [ %126, %28 ]\l  %31 = mul nsw i32 %30, %4\l  %32 = add nsw i32 %31, %22\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = add nsw i32 %30, %23\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7\l  %40 = fmul contract float %35, %39\l  %41 = fadd contract float %29, %40\l  store float %41, float addrspace(1)* %26, align 4, !tbaa !7\l  %42 = or i32 %30, 1\l  %43 = mul nsw i32 %42, %4\l  %44 = add nsw i32 %43, %22\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7\l  %48 = add nsw i32 %42, %23\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7\l  %52 = fmul contract float %47, %51\l  %53 = fadd contract float %41, %52\l  store float %53, float addrspace(1)* %26, align 4, !tbaa !7\l  %54 = or i32 %30, 2\l  %55 = mul nsw i32 %54, %4\l  %56 = add nsw i32 %55, %22\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = add nsw i32 %54, %23\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7\l  %64 = fmul contract float %59, %63\l  %65 = fadd contract float %53, %64\l  store float %65, float addrspace(1)* %26, align 4, !tbaa !7\l  %66 = or i32 %30, 3\l  %67 = mul nsw i32 %66, %4\l  %68 = add nsw i32 %67, %22\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7\l  %72 = add nsw i32 %66, %23\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7\l  %76 = fmul contract float %71, %75\l  %77 = fadd contract float %65, %76\l  store float %77, float addrspace(1)* %26, align 4, !tbaa !7\l  %78 = or i32 %30, 4\l  %79 = mul nsw i32 %78, %4\l  %80 = add nsw i32 %79, %22\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7\l  %84 = add nsw i32 %78, %23\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7\l  %88 = fmul contract float %83, %87\l  %89 = fadd contract float %77, %88\l  store float %89, float addrspace(1)* %26, align 4, !tbaa !7\l  %90 = or i32 %30, 5\l  %91 = mul nsw i32 %90, %4\l  %92 = add nsw i32 %91, %22\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = add nsw i32 %90, %23\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7\l  %100 = fmul contract float %95, %99\l  %101 = fadd contract float %89, %100\l  store float %101, float addrspace(1)* %26, align 4, !tbaa !7\l  %102 = or i32 %30, 6\l  %103 = mul nsw i32 %102, %4\l  %104 = add nsw i32 %103, %22\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7\l  %108 = add nsw i32 %102, %23\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7\l  %112 = fmul contract float %107, %111\l  %113 = fadd contract float %101, %112\l  store float %113, float addrspace(1)* %26, align 4, !tbaa !7\l  %114 = or i32 %30, 7\l  %115 = mul nsw i32 %114, %4\l  %116 = add nsw i32 %115, %22\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7\l  %120 = add nsw i32 %114, %23\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7\l  %124 = fmul contract float %119, %123\l  %125 = fadd contract float %113, %124\l  store float %125, float addrspace(1)* %26, align 4, !tbaa !7\l  %126 = add nuw nsw i32 %30, 8\l  %127 = icmp eq i32 %126, 16384\l  br i1 %127, label %27, label %28, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x465ed60:s0 -> Node0x465ee60;
	Node0x465ed60:s1 -> Node0x465ed60;
}
