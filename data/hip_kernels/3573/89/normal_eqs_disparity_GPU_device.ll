; ModuleID = '../data/hip_kernels/3573/89/main.cu'
source_filename = "../data/hip_kernels/3573/89/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.HIP_vector_type = type { %struct.HIP_vector_base }
%struct.HIP_vector_base = type { %union.anon }
%union.anon = type { <4 x float> }

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z24normal_eqs_disparity_GPUPfPKfPK15HIP_vector_typeIfLj4EEPKifffffiS7_S7_f(float addrspace(1)* nocapture writeonly %0, float addrspace(1)* nocapture readonly %1, %struct.HIP_vector_type addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, float %4, float %5, float %6, float %7, float %8, i32 %9, i32 addrspace(1)* nocapture readonly %10, i32 addrspace(1)* nocapture readonly %11, float %12) local_unnamed_addr #0 {
  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %15 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12
  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*
  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !4
  %18 = getelementptr i8, i8 addrspace(4)* %14, i64 4
  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*
  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !13, !invariant.load !14
  %21 = zext i16 %20 to i32
  %22 = udiv i32 %17, %21
  %23 = mul i32 %22, %21
  %24 = icmp ugt i32 %17, %23
  %25 = zext i1 %24 to i32
  %26 = add i32 %22, %25
  %27 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %28 = mul i32 %27, %21
  %29 = mul i32 %26, %21
  %30 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %31
  %33 = load i32, i32 addrspace(1)* %32, align 4, !tbaa !15, !amdgpu.noclobber !14
  %34 = sitofp i32 %33 to float
  %35 = sitofp i32 %29 to float
  %36 = fdiv contract float %34, %35
  %37 = tail call float @llvm.ceil.f32(float %36)
  %38 = fptosi float %37 to i32
  %39 = getelementptr inbounds i32, i32 addrspace(1)* %11, i64 %31
  %40 = load i32, i32 addrspace(1)* %39, align 4, !tbaa !15, !amdgpu.noclobber !14
  %41 = mul i32 %28, %38
  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !19
  %43 = add i32 %41, %42
  %44 = add i32 %27, 1
  %45 = mul i32 %44, %21
  %46 = mul i32 %45, %38
  %47 = icmp ult i32 %43, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %13
  %49 = sitofp i32 %9 to float
  %50 = fmul contract float %4, %8
  %51 = fneg contract float %50
  br label %217

52:                                               ; preds = %553, %13
  %53 = phi float [ 0.000000e+00, %13 ], [ %554, %553 ]
  %54 = phi float [ 0.000000e+00, %13 ], [ %555, %553 ]
  %55 = phi float [ 0.000000e+00, %13 ], [ %556, %553 ]
  %56 = phi float [ 0.000000e+00, %13 ], [ %557, %553 ]
  %57 = phi float [ 0.000000e+00, %13 ], [ %558, %553 ]
  %58 = phi float [ 0.000000e+00, %13 ], [ %559, %553 ]
  %59 = phi float [ 0.000000e+00, %13 ], [ %560, %553 ]
  %60 = phi float [ 0.000000e+00, %13 ], [ %561, %553 ]
  %61 = phi float [ 0.000000e+00, %13 ], [ %562, %553 ]
  %62 = phi float [ 0.000000e+00, %13 ], [ %563, %553 ]
  %63 = phi float [ 0.000000e+00, %13 ], [ %564, %553 ]
  %64 = phi float [ 0.000000e+00, %13 ], [ %565, %553 ]
  %65 = phi float [ 0.000000e+00, %13 ], [ %566, %553 ]
  %66 = phi float [ 0.000000e+00, %13 ], [ %567, %553 ]
  %67 = phi float [ 0.000000e+00, %13 ], [ %568, %553 ]
  %68 = phi float [ 0.000000e+00, %13 ], [ %569, %553 ]
  %69 = phi float [ 0.000000e+00, %13 ], [ %570, %553 ]
  %70 = phi float [ 0.000000e+00, %13 ], [ %571, %553 ]
  %71 = phi float [ 0.000000e+00, %13 ], [ %572, %553 ]
  %72 = phi float [ 0.000000e+00, %13 ], [ %573, %553 ]
  %73 = phi float [ 0.000000e+00, %13 ], [ %574, %553 ]
  %74 = phi float [ 0.000000e+00, %13 ], [ %575, %553 ]
  %75 = phi float [ 0.000000e+00, %13 ], [ %576, %553 ]
  %76 = phi float [ 0.000000e+00, %13 ], [ %577, %553 ]
  %77 = phi float [ 0.000000e+00, %13 ], [ %578, %553 ]
  %78 = phi float [ 0.000000e+00, %13 ], [ %579, %553 ]
  %79 = phi float [ 0.000000e+00, %13 ], [ %580, %553 ]
  %80 = mul i32 %30, 27
  %81 = mul i32 %80, %29
  %82 = add i32 %28, %42
  %83 = add i32 %82, %81
  %84 = fmul contract float %12, %12
  %85 = fmul contract float %84, %79
  %86 = sext i32 %83 to i64
  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86
  store float %85, float addrspace(1)* %87, align 4, !tbaa !20
  %88 = fmul contract float %84, %78
  %89 = add nsw i32 %83, %29
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %88, float addrspace(1)* %91, align 4, !tbaa !20
  %92 = fmul contract float %84, %77
  %93 = shl nsw i32 %29, 1
  %94 = add nsw i32 %83, %93
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95
  store float %92, float addrspace(1)* %96, align 4, !tbaa !20
  %97 = fmul contract float %84, %76
  %98 = mul nsw i32 %29, 3
  %99 = add nsw i32 %83, %98
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100
  store float %97, float addrspace(1)* %101, align 4, !tbaa !20
  %102 = fmul contract float %84, %75
  %103 = shl nsw i32 %29, 2
  %104 = add nsw i32 %83, %103
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105
  store float %102, float addrspace(1)* %106, align 4, !tbaa !20
  %107 = fmul contract float %84, %74
  %108 = mul nsw i32 %29, 5
  %109 = add nsw i32 %83, %108
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110
  store float %107, float addrspace(1)* %111, align 4, !tbaa !20
  %112 = fmul contract float %84, %73
  %113 = mul nsw i32 %29, 6
  %114 = add nsw i32 %83, %113
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115
  store float %112, float addrspace(1)* %116, align 4, !tbaa !20
  %117 = fmul contract float %84, %72
  %118 = mul nsw i32 %29, 7
  %119 = add nsw i32 %83, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120
  store float %117, float addrspace(1)* %121, align 4, !tbaa !20
  %122 = fmul contract float %84, %71
  %123 = shl nsw i32 %29, 3
  %124 = add nsw i32 %83, %123
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125
  store float %122, float addrspace(1)* %126, align 4, !tbaa !20
  %127 = fmul contract float %84, %70
  %128 = mul nsw i32 %29, 9
  %129 = add nsw i32 %83, %128
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130
  store float %127, float addrspace(1)* %131, align 4, !tbaa !20
  %132 = fmul contract float %84, %69
  %133 = mul nsw i32 %29, 10
  %134 = add nsw i32 %83, %133
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float addrspace(1)* %0, i64 %135
  store float %132, float addrspace(1)* %136, align 4, !tbaa !20
  %137 = fmul contract float %84, %68
  %138 = mul nsw i32 %29, 11
  %139 = add nsw i32 %83, %138
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140
  store float %137, float addrspace(1)* %141, align 4, !tbaa !20
  %142 = fmul contract float %84, %67
  %143 = mul nsw i32 %29, 12
  %144 = add nsw i32 %83, %143
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145
  store float %142, float addrspace(1)* %146, align 4, !tbaa !20
  %147 = fmul contract float %84, %66
  %148 = mul nsw i32 %29, 13
  %149 = add nsw i32 %83, %148
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150
  store float %147, float addrspace(1)* %151, align 4, !tbaa !20
  %152 = fmul contract float %84, %65
  %153 = mul nsw i32 %29, 14
  %154 = add nsw i32 %83, %153
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds float, float addrspace(1)* %0, i64 %155
  store float %152, float addrspace(1)* %156, align 4, !tbaa !20
  %157 = fmul contract float %84, %64
  %158 = mul nsw i32 %29, 15
  %159 = add nsw i32 %83, %158
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float addrspace(1)* %0, i64 %160
  store float %157, float addrspace(1)* %161, align 4, !tbaa !20
  %162 = fmul contract float %84, %63
  %163 = shl nsw i32 %29, 4
  %164 = add nsw i32 %83, %163
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float addrspace(1)* %0, i64 %165
  store float %162, float addrspace(1)* %166, align 4, !tbaa !20
  %167 = fmul contract float %84, %62
  %168 = mul nsw i32 %29, 17
  %169 = add nsw i32 %83, %168
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds float, float addrspace(1)* %0, i64 %170
  store float %167, float addrspace(1)* %171, align 4, !tbaa !20
  %172 = fmul contract float %84, %61
  %173 = mul nsw i32 %29, 18
  %174 = add nsw i32 %83, %173
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float addrspace(1)* %0, i64 %175
  store float %172, float addrspace(1)* %176, align 4, !tbaa !20
  %177 = fmul contract float %84, %53
  %178 = mul nsw i32 %29, 19
  %179 = add nsw i32 %83, %178
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds float, float addrspace(1)* %0, i64 %180
  store float %177, float addrspace(1)* %181, align 4, !tbaa !20
  %182 = fmul contract float %84, %54
  %183 = mul nsw i32 %29, 20
  %184 = add nsw i32 %83, %183
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds float, float addrspace(1)* %0, i64 %185
  store float %182, float addrspace(1)* %186, align 4, !tbaa !20
  %187 = fmul contract float %84, %55
  %188 = mul nsw i32 %29, 21
  %189 = add nsw i32 %83, %188
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds float, float addrspace(1)* %0, i64 %190
  store float %187, float addrspace(1)* %191, align 4, !tbaa !20
  %192 = fmul contract float %84, %56
  %193 = mul nsw i32 %29, 22
  %194 = add nsw i32 %83, %193
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float addrspace(1)* %0, i64 %195
  store float %192, float addrspace(1)* %196, align 4, !tbaa !20
  %197 = fmul contract float %84, %57
  %198 = mul nsw i32 %29, 23
  %199 = add nsw i32 %83, %198
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float addrspace(1)* %0, i64 %200
  store float %197, float addrspace(1)* %201, align 4, !tbaa !20
  %202 = fmul contract float %84, %58
  %203 = mul nsw i32 %29, 24
  %204 = add nsw i32 %83, %203
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float addrspace(1)* %0, i64 %205
  store float %202, float addrspace(1)* %206, align 4, !tbaa !20
  %207 = fmul contract float %84, %59
  %208 = mul nsw i32 %29, 25
  %209 = add nsw i32 %83, %208
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds float, float addrspace(1)* %0, i64 %210
  store float %207, float addrspace(1)* %211, align 4, !tbaa !20
  %212 = fmul contract float %84, %60
  %213 = mul nsw i32 %29, 26
  %214 = add nsw i32 %83, %213
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds float, float addrspace(1)* %0, i64 %215
  store float %212, float addrspace(1)* %216, align 4, !tbaa !20
  ret void

217:                                              ; preds = %48, %553
  %218 = phi float [ 0.000000e+00, %48 ], [ %580, %553 ]
  %219 = phi float [ 0.000000e+00, %48 ], [ %579, %553 ]
  %220 = phi float [ 0.000000e+00, %48 ], [ %578, %553 ]
  %221 = phi float [ 0.000000e+00, %48 ], [ %577, %553 ]
  %222 = phi float [ 0.000000e+00, %48 ], [ %576, %553 ]
  %223 = phi float [ 0.000000e+00, %48 ], [ %575, %553 ]
  %224 = phi float [ 0.000000e+00, %48 ], [ %574, %553 ]
  %225 = phi float [ 0.000000e+00, %48 ], [ %573, %553 ]
  %226 = phi float [ 0.000000e+00, %48 ], [ %572, %553 ]
  %227 = phi float [ 0.000000e+00, %48 ], [ %571, %553 ]
  %228 = phi float [ 0.000000e+00, %48 ], [ %570, %553 ]
  %229 = phi float [ 0.000000e+00, %48 ], [ %569, %553 ]
  %230 = phi float [ 0.000000e+00, %48 ], [ %568, %553 ]
  %231 = phi float [ 0.000000e+00, %48 ], [ %567, %553 ]
  %232 = phi float [ 0.000000e+00, %48 ], [ %566, %553 ]
  %233 = phi float [ 0.000000e+00, %48 ], [ %565, %553 ]
  %234 = phi float [ 0.000000e+00, %48 ], [ %564, %553 ]
  %235 = phi float [ 0.000000e+00, %48 ], [ %563, %553 ]
  %236 = phi float [ 0.000000e+00, %48 ], [ %562, %553 ]
  %237 = phi i32 [ %43, %48 ], [ %581, %553 ]
  %238 = phi float [ 0.000000e+00, %48 ], [ %561, %553 ]
  %239 = phi float [ 0.000000e+00, %48 ], [ %560, %553 ]
  %240 = phi float [ 0.000000e+00, %48 ], [ %559, %553 ]
  %241 = phi float [ 0.000000e+00, %48 ], [ %558, %553 ]
  %242 = phi float [ 0.000000e+00, %48 ], [ %557, %553 ]
  %243 = phi float [ 0.000000e+00, %48 ], [ %556, %553 ]
  %244 = phi float [ 0.000000e+00, %48 ], [ %555, %553 ]
  %245 = phi float [ 0.000000e+00, %48 ], [ %554, %553 ]
  %246 = icmp slt i32 %237, %33
  br i1 %246, label %247, label %553

247:                                              ; preds = %217
  %248 = add nsw i32 %237, %40
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds float, float addrspace(1)* %1, i64 %249
  %251 = load float, float addrspace(1)* %250, align 4, !tbaa !20, !amdgpu.noclobber !14
  %252 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %2, i64 %249, i32 0, i32 0, i32 0, i64 0
  %253 = bitcast float addrspace(1)* %252 to <2 x float> addrspace(1)*
  %254 = load <2 x float>, <2 x float> addrspace(1)* %253, align 16
  %255 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %2, i64 %249, i32 0, i32 0, i32 0, i64 2
  %256 = bitcast float addrspace(1)* %255 to <2 x float> addrspace(1)*
  %257 = load <2 x float>, <2 x float> addrspace(1)* %256, align 8
  %258 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %249
  %259 = load i32, i32 addrspace(1)* %258, align 4, !tbaa !15, !amdgpu.noclobber !14
  %260 = sitofp i32 %259 to float
  %261 = fdiv contract float %260, %49
  %262 = tail call float @llvm.floor.f32(float %261)
  %263 = fmul contract float %262, %49
  %264 = fsub contract float %260, %263
  %265 = fsub contract float %264, %6
  %266 = fdiv contract float %265, %4
  %267 = fsub contract float %262, %7
  %268 = fdiv contract float %267, %5
  %269 = fdiv contract float %51, %251
  %270 = fmul contract float %269, %266
  %271 = fmul contract float %269, %268
  %272 = extractelement <2 x float> %254, i64 0
  %273 = fmul contract float %272, %266
  %274 = fmul contract float %272, %268
  %275 = fmul contract float %272, %272
  %276 = fdiv contract float %50, %275
  %277 = fmul contract float %276, %276
  %278 = extractelement <2 x float> %254, i64 1
  %279 = fmul contract float %278, %278
  %280 = fmul contract float %279, %277
  %281 = fadd contract float %218, %280
  %282 = extractelement <2 x float> %257, i64 0
  %283 = fmul contract float %278, %282
  %284 = fmul contract float %277, %283
  %285 = fadd contract float %219, %284
  %286 = extractelement <2 x float> %257, i64 1
  %287 = fmul contract float %278, %286
  %288 = fmul contract float %277, %287
  %289 = fadd contract float %220, %288
  %290 = fmul contract float %278, %274
  %291 = fmul contract float %286, %290
  %292 = fmul contract float %272, %278
  %293 = fmul contract float %292, %282
  %294 = fsub contract float %291, %293
  %295 = fmul contract float %277, %294
  %296 = fadd contract float %221, %295
  %297 = fmul contract float %272, %279
  %298 = fmul contract float %278, %273
  %299 = fmul contract float %286, %298
  %300 = fsub contract float %297, %299
  %301 = fmul contract float %277, %300
  %302 = fadd contract float %222, %301
  %303 = fneg contract float %274
  %304 = fmul contract float %282, %298
  %305 = fmul contract float %279, %274
  %306 = fsub contract float %304, %305
  %307 = fmul contract float %277, %306
  %308 = fadd contract float %223, %307
  %309 = fmul contract float %282, %282
  %310 = fmul contract float %277, %309
  %311 = fadd contract float %224, %310
  %312 = fmul contract float %282, %286
  %313 = fmul contract float %277, %312
  %314 = fadd contract float %225, %313
  %315 = fmul contract float %282, %274
  %316 = fmul contract float %286, %315
  %317 = fmul contract float %272, %309
  %318 = fsub contract float %316, %317
  %319 = fmul contract float %277, %318
  %320 = fadd contract float %226, %319
  %321 = fneg contract float %273
  %322 = fmul contract float %282, %321
  %323 = fmul contract float %286, %322
  %324 = fadd contract float %293, %323
  %325 = fmul contract float %277, %324
  %326 = fadd contract float %227, %325
  %327 = fmul contract float %309, %273
  %328 = fmul contract float %282, %290
  %329 = fsub contract float %327, %328
  %330 = fmul contract float %277, %329
  %331 = fadd contract float %228, %330
  %332 = fmul contract float %286, %286
  %333 = fmul contract float %277, %332
  %334 = fadd contract float %229, %333
  %335 = fmul contract float %332, %274
  %336 = fmul contract float %272, %282
  %337 = fmul contract float %336, %286
  %338 = fsub contract float %335, %337
  %339 = fmul contract float %277, %338
  %340 = fadd contract float %230, %339
  %341 = fmul contract float %292, %286
  %342 = fmul contract float %332, %273
  %343 = fsub contract float %341, %342
  %344 = fmul contract float %277, %343
  %345 = fadd contract float %231, %344
  %346 = fmul contract float %282, %273
  %347 = fmul contract float %286, %346
  %348 = fsub contract float %347, %291
  %349 = fmul contract float %277, %348
  %350 = fadd contract float %232, %349
  %351 = fmul contract float %274, %274
  %352 = fmul contract float %332, %351
  %353 = fmul contract float %275, %309
  %354 = fadd contract float %353, %352
  %355 = fmul contract float %272, %274
  %356 = fmul contract float %282, %355
  %357 = fmul contract float %286, %356
  %358 = fmul contract float %357, 2.000000e+00
  %359 = fsub contract float %354, %358
  %360 = fmul contract float %277, %359
  %361 = fadd contract float %233, %360
  %362 = fmul contract float %274, %321
  %363 = fmul contract float %332, %362
  %364 = fmul contract float %275, %278
  %365 = fmul contract float %364, %282
  %366 = fsub contract float %363, %365
  %367 = fmul contract float %272, %273
  %368 = fmul contract float %282, %367
  %369 = fmul contract float %286, %368
  %370 = fadd contract float %366, %369
  %371 = fmul contract float %278, %355
  %372 = fmul contract float %286, %371
  %373 = fadd contract float %372, %370
  %374 = fmul contract float %277, %373
  %375 = fadd contract float %234, %374
  %376 = fmul contract float %272, %321
  %377 = fmul contract float %309, %376
  %378 = fmul contract float %278, %351
  %379 = fmul contract float %286, %378
  %380 = fsub contract float %377, %379
  %381 = fmul contract float %274, %273
  %382 = fmul contract float %282, %381
  %383 = fmul contract float %286, %382
  %384 = fadd contract float %380, %383
  %385 = fmul contract float %282, %371
  %386 = fadd contract float %385, %384
  %387 = fmul contract float %277, %386
  %388 = fadd contract float %235, %387
  %389 = fmul contract float %273, %273
  %390 = fmul contract float %332, %389
  %391 = fmul contract float %275, %279
  %392 = fadd contract float %391, %390
  %393 = fmul contract float %278, %367
  %394 = fmul contract float %286, %393
  %395 = fmul contract float %394, 2.000000e+00
  %396 = fsub contract float %392, %395
  %397 = fmul contract float %277, %396
  %398 = fadd contract float %236, %397
  %399 = fmul contract float %272, %303
  %400 = fmul contract float %279, %399
  %401 = fmul contract float %282, %389
  %402 = fmul contract float %286, %401
  %403 = fsub contract float %400, %402
  %404 = fmul contract float %278, %381
  %405 = fmul contract float %286, %404
  %406 = fadd contract float %405, %403
  %407 = fmul contract float %282, %393
  %408 = fadd contract float %407, %406
  %409 = fmul contract float %277, %408
  %410 = fadd contract float %245, %409
  %411 = fmul contract float %309, %389
  %412 = fmul contract float %279, %351
  %413 = fadd contract float %412, %411
  %414 = fmul contract float %282, %404
  %415 = fmul contract float %414, 2.000000e+00
  %416 = fsub contract float %413, %415
  %417 = fmul contract float %277, %416
  %418 = fadd contract float %244, %417
  %419 = fmul contract float %279, %270
  %420 = fmul contract float %279, %273
  %421 = fsub contract float %419, %420
  %422 = fmul contract float %278, %271
  %423 = fmul contract float %282, %422
  %424 = fadd contract float %423, %421
  %425 = fsub contract float %424, %328
  %426 = fmul contract float %269, %278
  %427 = fmul contract float %426, %286
  %428 = fadd contract float %427, %425
  %429 = fsub contract float %428, %341
  %430 = fmul contract float %277, %429
  %431 = fadd contract float %243, %430
  %432 = fmul contract float %309, %271
  %433 = fmul contract float %309, %274
  %434 = fsub contract float %432, %433
  %435 = fmul contract float %278, %270
  %436 = fmul contract float %282, %435
  %437 = fadd contract float %434, %436
  %438 = fsub contract float %437, %304
  %439 = fmul contract float %269, %282
  %440 = fmul contract float %439, %286
  %441 = fadd contract float %440, %438
  %442 = fsub contract float %441, %337
  %443 = fmul contract float %277, %442
  %444 = fadd contract float %242, %443
  %445 = fmul contract float %269, %332
  %446 = fmul contract float %272, %332
  %447 = fsub contract float %445, %446
  %448 = fmul contract float %286, %435
  %449 = fadd contract float %447, %448
  %450 = fsub contract float %449, %299
  %451 = fmul contract float %282, %271
  %452 = fmul contract float %286, %451
  %453 = fadd contract float %452, %450
  %454 = fsub contract float %453, %316
  %455 = fmul contract float %277, %454
  %456 = fadd contract float %241, %455
  %457 = fneg contract float %271
  %458 = fmul contract float %272, %457
  %459 = fmul contract float %309, %458
  %460 = fmul contract float %269, %274
  %461 = fmul contract float %332, %460
  %462 = fadd contract float %459, %461
  %463 = fmul contract float %309, %355
  %464 = fadd contract float %463, %462
  %465 = fmul contract float %332, %355
  %466 = fsub contract float %464, %465
  %467 = fmul contract float %282, %351
  %468 = fmul contract float %286, %467
  %469 = fsub contract float %466, %468
  %470 = fmul contract float %275, %282
  %471 = fmul contract float %470, %286
  %472 = fadd contract float %471, %469
  %473 = fmul contract float %274, %270
  %474 = fmul contract float %278, %473
  %475 = fmul contract float %286, %474
  %476 = fadd contract float %475, %472
  %477 = fsub contract float %476, %405
  %478 = fmul contract float %272, %270
  %479 = fmul contract float %278, %478
  %480 = fmul contract float %282, %479
  %481 = fsub contract float %477, %480
  %482 = fmul contract float %271, %274
  %483 = fmul contract float %282, %482
  %484 = fmul contract float %286, %483
  %485 = fadd contract float %484, %481
  %486 = fadd contract float %407, %485
  %487 = fmul contract float %269, %272
  %488 = fmul contract float %487, %282
  %489 = fmul contract float %488, %286
  %490 = fsub contract float %486, %489
  %491 = fmul contract float %277, %490
  %492 = fadd contract float %240, %491
  %493 = fmul contract float %279, %478
  %494 = fmul contract float %269, %273
  %495 = fmul contract float %332, %494
  %496 = fsub contract float %493, %495
  %497 = fmul contract float %279, %367
  %498 = fsub contract float %496, %497
  %499 = fmul contract float %332, %367
  %500 = fadd contract float %499, %498
  %501 = fmul contract float %278, %389
  %502 = fmul contract float %286, %501
  %503 = fadd contract float %502, %500
  %504 = fmul contract float %364, %286
  %505 = fsub contract float %503, %504
  %506 = fmul contract float %270, %273
  %507 = fmul contract float %278, %506
  %508 = fmul contract float %286, %507
  %509 = fsub contract float %505, %508
  %510 = fmul contract float %271, %273
  %511 = fmul contract float %282, %510
  %512 = fmul contract float %286, %511
  %513 = fsub contract float %509, %512
  %514 = fadd contract float %383, %513
  %515 = fmul contract float %272, %271
  %516 = fmul contract float %278, %515
  %517 = fmul contract float %282, %516
  %518 = fadd contract float %517, %514
  %519 = fsub contract float %518, %385
  %520 = fmul contract float %487, %278
  %521 = fmul contract float %520, %286
  %522 = fadd contract float %521, %519
  %523 = fmul contract float %277, %522
  %524 = fadd contract float %239, %523
  %525 = fneg contract float %270
  %526 = fmul contract float %274, %525
  %527 = fmul contract float %279, %526
  %528 = fmul contract float %309, %510
  %529 = fadd contract float %527, %528
  %530 = fmul contract float %279, %381
  %531 = fadd contract float %530, %529
  %532 = fmul contract float %309, %381
  %533 = fsub contract float %531, %532
  %534 = fmul contract float %282, %501
  %535 = fsub contract float %533, %534
  %536 = fmul contract float %282, %378
  %537 = fadd contract float %536, %535
  %538 = fmul contract float %282, %507
  %539 = fadd contract float %538, %537
  %540 = fmul contract float %278, %482
  %541 = fmul contract float %282, %540
  %542 = fsub contract float %539, %541
  %543 = fmul contract float %282, %494
  %544 = fmul contract float %286, %543
  %545 = fadd contract float %544, %542
  %546 = fsub contract float %545, %369
  %547 = fmul contract float %278, %460
  %548 = fmul contract float %286, %547
  %549 = fsub contract float %546, %548
  %550 = fadd contract float %372, %549
  %551 = fmul contract float %277, %550
  %552 = fadd contract float %238, %551
  br label %553

553:                                              ; preds = %217, %247
  %554 = phi float [ %410, %247 ], [ %245, %217 ]
  %555 = phi float [ %418, %247 ], [ %244, %217 ]
  %556 = phi float [ %431, %247 ], [ %243, %217 ]
  %557 = phi float [ %444, %247 ], [ %242, %217 ]
  %558 = phi float [ %456, %247 ], [ %241, %217 ]
  %559 = phi float [ %492, %247 ], [ %240, %217 ]
  %560 = phi float [ %524, %247 ], [ %239, %217 ]
  %561 = phi float [ %552, %247 ], [ %238, %217 ]
  %562 = phi float [ %398, %247 ], [ %236, %217 ]
  %563 = phi float [ %388, %247 ], [ %235, %217 ]
  %564 = phi float [ %375, %247 ], [ %234, %217 ]
  %565 = phi float [ %361, %247 ], [ %233, %217 ]
  %566 = phi float [ %350, %247 ], [ %232, %217 ]
  %567 = phi float [ %345, %247 ], [ %231, %217 ]
  %568 = phi float [ %340, %247 ], [ %230, %217 ]
  %569 = phi float [ %334, %247 ], [ %229, %217 ]
  %570 = phi float [ %331, %247 ], [ %228, %217 ]
  %571 = phi float [ %326, %247 ], [ %227, %217 ]
  %572 = phi float [ %320, %247 ], [ %226, %217 ]
  %573 = phi float [ %314, %247 ], [ %225, %217 ]
  %574 = phi float [ %311, %247 ], [ %224, %217 ]
  %575 = phi float [ %308, %247 ], [ %223, %217 ]
  %576 = phi float [ %302, %247 ], [ %222, %217 ]
  %577 = phi float [ %296, %247 ], [ %221, %217 ]
  %578 = phi float [ %289, %247 ], [ %220, %217 ]
  %579 = phi float [ %285, %247 ], [ %219, %217 ]
  %580 = phi float [ %281, %247 ], [ %218, %217 ]
  %581 = add i32 %237, %21
  %582 = icmp ult i32 %581, %46
  br i1 %582, label %217, label %52, !llvm.loop !22
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.ceil.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.floor.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{!5, !9, i64 12}
!5 = !{!"hsa_kernel_dispatch_packet_s", !6, i64 0, !6, i64 2, !6, i64 4, !6, i64 6, !6, i64 8, !6, i64 10, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !10, i64 32, !11, i64 40, !10, i64 48, !12, i64 56}
!6 = !{!"short", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!"long", !7, i64 0}
!11 = !{!"any pointer", !7, i64 0}
!12 = !{!"hsa_signal_s", !10, i64 0}
!13 = !{i16 1, i16 1025}
!14 = !{}
!15 = !{!16, !16, i64 0}
!16 = !{!"int", !17, i64 0}
!17 = !{!"omnipotent char", !18, i64 0}
!18 = !{!"Simple C++ TBAA"}
!19 = !{i32 0, i32 1024}
!20 = !{!21, !21, i64 0}
!21 = !{!"float", !17, i64 0}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.mustprogress"}
