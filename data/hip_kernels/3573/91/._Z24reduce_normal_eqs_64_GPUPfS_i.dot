digraph "CFG for '_Z24reduce_normal_eqs_64_GPUPfS_i' function" {
	label="CFG for '_Z24reduce_normal_eqs_64_GPUPfS_i' function";

	Node0x61c2f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !5\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !14, !invariant.load\l... !15\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = mul i32 %21, %2\l  %23 = icmp sgt i32 %2, 0\l  br i1 %23, label %24, label %48\l|{<s0>T|<s1>F}}"];
	Node0x61c2f50:s0 -> Node0x61c3d20;
	Node0x61c2f50:s1 -> Node0x61c5820;
	Node0x61c3d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = and i32 %2, 7\l  %26 = icmp ult i32 %2, 8\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x61c3d20:s0 -> Node0x61c5ab0;
	Node0x61c3d20:s1 -> Node0x61c5b00;
	Node0x61c5b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %2, -8\l  br label %52\l}"];
	Node0x61c5b00 -> Node0x61c5d00;
	Node0x61c5ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %24 ], [ %118, %52 ]\l  %31 = phi i32 [ 0, %24 ], [ %119, %52 ]\l  %32 = phi float [ 0.000000e+00, %24 ], [ %118, %52 ]\l  %33 = icmp eq i32 %25, 0\l  br i1 %33, label %48, label %34\l|{<s0>T|<s1>F}}"];
	Node0x61c5ab0:s0 -> Node0x61c5820;
	Node0x61c5ab0:s1 -> Node0x61c5420;
	Node0x61c5420 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi i32 [ %45, %34 ], [ %31, %29 ]\l  %36 = phi float [ %44, %34 ], [ %32, %29 ]\l  %37 = phi i32 [ %46, %34 ], [ 0, %29 ]\l  %38 = add i32 %35, %22\l  %39 = shl i32 %38, 6\l  %40 = add i32 %39, %4\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %44 = fadd contract float %36, %43\l  %45 = add nuw nsw i32 %35, 1\l  %46 = add i32 %37, 1\l  %47 = icmp eq i32 %46, %25\l  br i1 %47, label %48, label %34, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x61c5420:s0 -> Node0x61c5820;
	Node0x61c5420:s1 -> Node0x61c5420;
	Node0x61c5820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%48:\l48:                                               \l  %49 = phi float [ 0.000000e+00, %3 ], [ %30, %29 ], [ %44, %34 ]\l  %50 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %4\l  store float %49, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %51 = icmp ult i32 %4, 32\l  br i1 %51, label %122, label %153\l|{<s0>T|<s1>F}}"];
	Node0x61c5820:s0 -> Node0x61c8a80;
	Node0x61c5820:s1 -> Node0x61c8b10;
	Node0x61c5d00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%52:\l52:                                               \l  %53 = phi i32 [ 0, %27 ], [ %119, %52 ]\l  %54 = phi float [ 0.000000e+00, %27 ], [ %118, %52 ]\l  %55 = phi i32 [ 0, %27 ], [ %120, %52 ]\l  %56 = add i32 %53, %22\l  %57 = shl i32 %56, 6\l  %58 = add i32 %57, %4\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %1, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %62 = fadd contract float %54, %61\l  %63 = or i32 %53, 1\l  %64 = add i32 %63, %22\l  %65 = shl i32 %64, 6\l  %66 = add i32 %65, %4\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %70 = fadd contract float %62, %69\l  %71 = or i32 %53, 2\l  %72 = add i32 %71, %22\l  %73 = shl i32 %72, 6\l  %74 = add i32 %73, %4\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %78 = fadd contract float %70, %77\l  %79 = or i32 %53, 3\l  %80 = add i32 %79, %22\l  %81 = shl i32 %80, 6\l  %82 = add i32 %81, %4\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %86 = fadd contract float %78, %85\l  %87 = or i32 %53, 4\l  %88 = add i32 %87, %22\l  %89 = shl i32 %88, 6\l  %90 = add i32 %89, %4\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %94 = fadd contract float %86, %93\l  %95 = or i32 %53, 5\l  %96 = add i32 %95, %22\l  %97 = shl i32 %96, 6\l  %98 = add i32 %97, %4\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %102 = fadd contract float %94, %101\l  %103 = or i32 %53, 6\l  %104 = add i32 %103, %22\l  %105 = shl i32 %104, 6\l  %106 = add i32 %105, %4\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %110 = fadd contract float %102, %109\l  %111 = or i32 %53, 7\l  %112 = add i32 %111, %22\l  %113 = shl i32 %112, 6\l  %114 = add i32 %113, %4\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %118 = fadd contract float %110, %117\l  %119 = add nuw nsw i32 %53, 8\l  %120 = add i32 %55, 8\l  %121 = icmp eq i32 %120, %28\l  br i1 %121, label %29, label %52, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x61c5d00:s0 -> Node0x61c5ab0;
	Node0x61c5d00:s1 -> Node0x61c5d00;
	Node0x61c8a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%122:\l122:                                              \l  %123 = add nuw nsw i32 %4, 32\l  %124 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %123\l  %125 = load float, float addrspace(3)* %124, align 4, !tbaa !16\l  %126 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %127 = fadd contract float %125, %126\l  store float %127, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %128 = add nuw nsw i32 %4, 16\l  %129 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %128\l  %130 = load float, float addrspace(3)* %129, align 4, !tbaa !16\l  %131 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %132 = fadd contract float %130, %131\l  store float %132, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %133 = add nuw nsw i32 %4, 8\l  %134 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %133\l  %135 = load float, float addrspace(3)* %134, align 4, !tbaa !16\l  %136 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %137 = fadd contract float %135, %136\l  store float %137, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %138 = add nuw nsw i32 %4, 4\l  %139 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %138\l  %140 = load float, float addrspace(3)* %139, align 4, !tbaa !16\l  %141 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %142 = fadd contract float %140, %141\l  store float %142, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %143 = add nuw nsw i32 %4, 2\l  %144 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %143\l  %145 = load float, float addrspace(3)* %144, align 4, !tbaa !16\l  %146 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %147 = fadd contract float %145, %146\l  store float %147, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %148 = add nuw nsw i32 %4, 1\l  %149 = getelementptr inbounds [64 x float], [64 x float] addrspace(3)*\l... @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0, i32 %148\l  %150 = load float, float addrspace(3)* %149, align 4, !tbaa !16\l  %151 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %152 = fadd contract float %150, %151\l  store float %152, float addrspace(3)* %50, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %153\l}"];
	Node0x61c8a80 -> Node0x61c8b10;
	Node0x61c8b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%153:\l153:                                              \l  %154 = icmp eq i32 %4, 0\l  br i1 %154, label %155, label %159\l|{<s0>T|<s1>F}}"];
	Node0x61c8b10:s0 -> Node0x61cda60;
	Node0x61c8b10:s1 -> Node0x61cdab0;
	Node0x61cda60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%155:\l155:                                              \l  %156 = load float, float addrspace(3)* getelementptr inbounds ([64 x float],\l... [64 x float] addrspace(3)* @_ZZ24reduce_normal_eqs_64_GPUPfS_iE4DATA, i32 0,\l... i32 0), align 16, !tbaa !16\l  %157 = zext i32 %21 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %0, i64 %157\l  store float %156, float addrspace(1)* %158, align 4, !tbaa !16\l  br label %159\l}"];
	Node0x61cda60 -> Node0x61cdab0;
	Node0x61cdab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%159:\l159:                                              \l  ret void\l}"];
}
