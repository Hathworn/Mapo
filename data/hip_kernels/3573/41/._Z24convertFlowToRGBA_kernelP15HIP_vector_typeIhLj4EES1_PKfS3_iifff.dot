digraph "CFG for '_Z24convertFlowToRGBA_kernelP15HIP_vector_typeIhLj4EES1_PKfS3_iifff' function" {
	label="CFG for '_Z24convertFlowToRGBA_kernelP15HIP_vector_typeIhLj4EES1_PKfS3_iifff' function";

	Node0x5cc50d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = shl i32 %10, 8\l  %17 = ashr exact i32 %16, 8\l  %18 = mul nsw i32 %17, %15\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = add i32 %18, %19\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %22 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !4, !invariant.load !5\l  %25 = zext i16 %24 to i32\l  %26 = shl i32 %21, 8\l  %27 = ashr exact i32 %26, 8\l  %28 = mul nsw i32 %27, %25\l  %29 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %30 = add i32 %28, %29\l  %31 = icmp slt i32 %20, %4\l  %32 = icmp slt i32 %30, %5\l  %33 = select i1 %31, i1 %32, i1 false\l  br i1 %33, label %34, label %156\l|{<s0>T|<s1>F}}"];
	Node0x5cc50d0:s0 -> Node0x5cc9a30;
	Node0x5cc50d0:s1 -> Node0x5cc9ac0;
	Node0x5cc9a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%34:\l34:                                               \l  %35 = shl i32 %30, 8\l  %36 = ashr exact i32 %35, 8\l  %37 = shl i32 %4, 8\l  %38 = ashr exact i32 %37, 8\l  %39 = mul nsw i32 %36, %38\l  %40 = add nsw i32 %39, %20\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %2, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %46 = fmul contract float %43, %43\l  %47 = fmul contract float %45, %45\l  %48 = fadd contract float %46, %47\l  %49 = fcmp olt float %48, 0x39F0000000000000\l  %50 = select i1 %49, float 0x41F0000000000000, float 1.000000e+00\l  %51 = fmul float %48, %50\l  %52 = tail call float @llvm.sqrt.f32(float %51)\l  %53 = bitcast float %52 to i32\l  %54 = add nsw i32 %53, -1\l  %55 = bitcast i32 %54 to float\l  %56 = add nsw i32 %53, 1\l  %57 = bitcast i32 %56 to float\l  %58 = tail call i1 @llvm.amdgcn.class.f32(float %51, i32 608)\l  %59 = select i1 %49, float 0x3EF0000000000000, float 1.000000e+00\l  %60 = fneg float %57\l  %61 = tail call float @llvm.fma.f32(float %60, float %52, float %51)\l  %62 = fcmp ogt float %61, 0.000000e+00\l  %63 = fneg float %55\l  %64 = tail call float @llvm.fma.f32(float %63, float %52, float %51)\l  %65 = fcmp ole float %64, 0.000000e+00\l  %66 = select i1 %65, float %55, float %52\l  %67 = select i1 %62, float %57, float %66\l  %68 = fmul float %59, %67\l  %69 = select i1 %58, float %51, float %68\l  %70 = tail call i1 @llvm.amdgcn.class.f32(float %43, i32 504)\l  %71 = fcmp contract uge float %69, %8\l  %72 = select i1 %70, i1 %71, i1 false\l  br i1 %72, label %73, label %141\l|{<s0>T|<s1>F}}"];
	Node0x5cc9a30:s0 -> Node0x5cccde0;
	Node0x5cc9a30:s1 -> Node0x5ccce30;
	Node0x5cccde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%73:\l73:                                               \l  %74 = fsub contract float %43, %6\l  %75 = fsub contract float %7, %6\l  %76 = fdiv contract float %74, %75\l  %77 = fcmp contract olt float %76, 2.500000e-01\l  br i1 %77, label %78, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5cccde0:s0 -> Node0x5ccd1b0;
	Node0x5cccde0:s1 -> Node0x5ccd240;
	Node0x5ccd1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%78:\l78:                                               \l  %79 = fmul contract float %76, 4.000000e+00\l  br label %101\l}"];
	Node0x5ccd1b0 -> Node0x5ccd410;
	Node0x5ccd240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%80:\l80:                                               \l  %81 = fcmp contract olt float %76, 5.000000e-01\l  br i1 %81, label %82, label %89\l|{<s0>T|<s1>F}}"];
	Node0x5ccd240:s0 -> Node0x5ccd5a0;
	Node0x5ccd240:s1 -> Node0x5ccd630;
	Node0x5ccd5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%82:\l82:                                               \l  %83 = fsub contract float 2.500000e-01, %76\l  %84 = fmul contract float %83, 4.000000e+00\l  %85 = fadd contract float %84, 1.000000e+00\l  %86 = fpext float %85 to double\l  %87 = fmul contract double %86, 2.550000e+02\l  %88 = fptoui double %87 to i8\l  br label %101\l}"];
	Node0x5ccd5a0 -> Node0x5ccd410;
	Node0x5ccd630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%89:\l89:                                               \l  %90 = fcmp contract olt float %76, 7.500000e-01\l  br i1 %90, label %91, label %97\l|{<s0>T|<s1>F}}"];
	Node0x5ccd630:s0 -> Node0x5ccdb90;
	Node0x5ccd630:s1 -> Node0x5ccdc20;
	Node0x5ccdb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%91:\l91:                                               \l  %92 = fadd contract float %76, -5.000000e-01\l  %93 = fmul contract float %92, 4.000000e+00\l  %94 = fpext float %93 to double\l  %95 = fmul contract double %94, 2.550000e+02\l  %96 = fptoui double %95 to i8\l  br label %101\l}"];
	Node0x5ccdb90 -> Node0x5ccd410;
	Node0x5ccdc20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%97:\l97:                                               \l  %98 = fsub contract float 7.500000e-01, %76\l  %99 = fmul contract float %98, 4.000000e+00\l  %100 = fadd contract float %99, 1.000000e+00\l  br label %101\l}"];
	Node0x5ccdc20 -> Node0x5ccd410;
	Node0x5ccd410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%101:\l101:                                              \l  %102 = phi i8 [ 0, %78 ], [ 0, %82 ], [ %96, %91 ], [ -1, %97 ]\l  %103 = phi float [ %79, %78 ], [ 1.000000e+00, %82 ], [ 1.000000e+00, %91 ],\l... [ %100, %97 ]\l  %104 = phi i8 [ -1, %78 ], [ %88, %82 ], [ 0, %91 ], [ 0, %97 ]\l  %105 = fpext float %103 to double\l  %106 = fmul contract double %105, 2.550000e+02\l  %107 = fptoui double %106 to i8\l  %108 = fsub contract float %45, %6\l  %109 = fdiv contract float %108, %75\l  %110 = fcmp contract olt float %109, 2.500000e-01\l  br i1 %110, label %111, label %113\l|{<s0>T|<s1>F}}"];
	Node0x5ccd410:s0 -> Node0x5cce8d0;
	Node0x5ccd410:s1 -> Node0x5cce920;
	Node0x5cce8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%111:\l111:                                              \l  %112 = fmul contract float %109, 4.000000e+00\l  br label %134\l}"];
	Node0x5cce8d0 -> Node0x5cceab0;
	Node0x5cce920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%113:\l113:                                              \l  %114 = fcmp contract olt float %109, 5.000000e-01\l  br i1 %114, label %115, label %122\l|{<s0>T|<s1>F}}"];
	Node0x5cce920:s0 -> Node0x5ccec00;
	Node0x5cce920:s1 -> Node0x5ccec50;
	Node0x5ccec00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%115:\l115:                                              \l  %116 = fsub contract float 2.500000e-01, %109\l  %117 = fmul contract float %116, 4.000000e+00\l  %118 = fadd contract float %117, 1.000000e+00\l  %119 = fpext float %118 to double\l  %120 = fmul contract double %119, 2.550000e+02\l  %121 = fptoui double %120 to i8\l  br label %134\l}"];
	Node0x5ccec00 -> Node0x5cceab0;
	Node0x5ccec50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%122:\l122:                                              \l  %123 = fcmp contract olt float %109, 7.500000e-01\l  br i1 %123, label %124, label %130\l|{<s0>T|<s1>F}}"];
	Node0x5ccec50:s0 -> Node0x5ccf1b0;
	Node0x5ccec50:s1 -> Node0x5ccf200;
	Node0x5ccf1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%124:\l124:                                              \l  %125 = fadd contract float %109, -5.000000e-01\l  %126 = fmul contract float %125, 4.000000e+00\l  %127 = fpext float %126 to double\l  %128 = fmul contract double %127, 2.550000e+02\l  %129 = fptoui double %128 to i8\l  br label %134\l}"];
	Node0x5ccf1b0 -> Node0x5cceab0;
	Node0x5ccf200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%130:\l130:                                              \l  %131 = fsub contract float 7.500000e-01, %109\l  %132 = fmul contract float %131, 4.000000e+00\l  %133 = fadd contract float %132, 1.000000e+00\l  br label %134\l}"];
	Node0x5ccf200 -> Node0x5cceab0;
	Node0x5cceab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%134:\l134:                                              \l  %135 = phi i8 [ 0, %111 ], [ 0, %115 ], [ %129, %124 ], [ -1, %130 ]\l  %136 = phi float [ %112, %111 ], [ 1.000000e+00, %115 ], [ 1.000000e+00,\l... %124 ], [ %133, %130 ]\l  %137 = phi i8 [ -1, %111 ], [ %121, %115 ], [ 0, %124 ], [ 0, %130 ]\l  %138 = fpext float %136 to double\l  %139 = fmul contract double %138, 2.550000e+02\l  %140 = fptoui double %139 to i8\l  br label %141\l}"];
	Node0x5cceab0 -> Node0x5ccce30;
	Node0x5ccce30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%141:\l141:                                              \l  %142 = phi i8 [ %104, %134 ], [ -1, %34 ]\l  %143 = phi i8 [ %107, %134 ], [ -1, %34 ]\l  %144 = phi i8 [ %102, %134 ], [ -1, %34 ]\l  %145 = phi i8 [ %137, %134 ], [ -1, %34 ]\l  %146 = phi i8 [ %140, %134 ], [ -1, %34 ]\l  %147 = phi i8 [ %135, %134 ], [ -1, %34 ]\l  %148 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %41, i32 0, i32 0, i32 0, i64 0\l  store i8 %144, i8 addrspace(1)* %148, align 4\l  %149 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %41, i32 0, i32 0, i32 0, i64 1\l  store i8 %143, i8 addrspace(1)* %149, align 1\l  %150 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %41, i32 0, i32 0, i32 0, i64 2\l  store i8 %142, i8 addrspace(1)* %150, align 2\l  %151 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %41, i32 0, i32 0, i32 0, i64 3\l  store i8 -1, i8 addrspace(1)* %151, align 1\l  %152 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %41, i32 0, i32 0, i32 0, i64 0\l  store i8 %147, i8 addrspace(1)* %152, align 4\l  %153 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %41, i32 0, i32 0, i32 0, i64 1\l  store i8 %146, i8 addrspace(1)* %153, align 1\l  %154 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %41, i32 0, i32 0, i32 0, i64 2\l  store i8 %145, i8 addrspace(1)* %154, align 2\l  %155 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %41, i32 0, i32 0, i32 0, i64 3\l  store i8 -1, i8 addrspace(1)* %155, align 1\l  br label %156\l}"];
	Node0x5ccce30 -> Node0x5cc9ac0;
	Node0x5cc9ac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%156:\l156:                                              \l  ret void\l}"];
}
