digraph "CFG for '_Z35flow_absolute_residual_scalable_GPUPfPK15HIP_vector_typeIfLj2EEPKfPKiPKjffffiiiS7_S7_ffS5_' function" {
	label="CFG for '_Z35flow_absolute_residual_scalable_GPUPfPK15HIP_vector_typeIfLj2EEPKfPKiPKjffffiiiS7_S7_ffS5_' function";

	Node0x5b0e980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%17:\l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = getelementptr i8, i8 addrspace(4)* %18, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %24 = mul i32 %23, %22\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %26 = add i32 %24, %25\l  %27 = icmp slt i32 %26, %11\l  br i1 %27, label %28, label %149\l|{<s0>T|<s1>F}}"];
	Node0x5b0e980:s0 -> Node0x5b11510;
	Node0x5b0e980:s1 -> Node0x5b115a0;
	Node0x5b11510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%28:\l28:                                               \l  %29 = sext i32 %26 to i64\l  %30 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %29\l  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %32 = zext i32 %31 to i64\l  %33 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %32\l  %34 = load i32, i32 addrspace(1)* %33, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %35 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %29, i32 0, i32 0, i32 0, i64 0\l  %36 = load float, float addrspace(1)* %35, align 8, !amdgpu.noclobber !5\l  %37 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %29, i32 0, i32 0, i32 0, i64 1\l  %38 = load float, float addrspace(1)* %37, align 4, !amdgpu.noclobber !5\l  %39 = getelementptr inbounds float, float addrspace(1)* %2, i64 %29\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %41 = fdiv contract float 1.000000e+00, %40\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %29\l  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %44 = mul nsw i32 %10, %9\l  %45 = icmp slt i32 %43, %44\l  %46 = select i1 %45, i32 0, i32 %9\l  %47 = mul nsw i32 %46, %10\l  %48 = sub nsw i32 %43, %47\l  %49 = sitofp i32 %48 to float\l  %50 = sitofp i32 %10 to float\l  %51 = fdiv contract float %49, %50\l  %52 = tail call float @llvm.floor.f32(float %51)\l  %53 = fmul contract float %52, %50\l  %54 = fsub contract float %49, %53\l  %55 = fsub contract float %54, %7\l  %56 = fsub contract float %52, %8\l  %57 = select contract i1 %45, float %14, float %15\l  %58 = sext i32 %34 to i64\l  %59 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %58\l  %60 = load i32, i32 addrspace(1)* %59, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %61 = add nsw i32 %60, %26\l  %62 = mul nsw i32 %34, 6\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %16, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %66 = or i32 %62, 1\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %16, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %70 = add nsw i32 %62, 2\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %16, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %74 = add nsw i32 %62, 3\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %16, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %78 = add nsw i32 %62, 4\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %16, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %82 = add nsw i32 %62, 5\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %16, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %86 = fmul contract float %81, %5\l  %87 = fsub contract float %86, %36\l  %88 = fmul contract float %85, %56\l  %89 = fsub contract float %87, %88\l  %90 = fmul contract float %55, %55\l  %91 = fmul contract float %81, %90\l  %92 = fdiv contract float %91, %5\l  %93 = fadd contract float %89, %92\l  %94 = fmul contract float %41, %5\l  %95 = fmul contract float %94, %65\l  %96 = fadd contract float %95, %93\l  %97 = fmul contract float %41, %55\l  %98 = fmul contract float %73, %97\l  %99 = fsub contract float %96, %98\l  %100 = fmul contract float %56, %55\l  %101 = fmul contract float %77, %100\l  %102 = fdiv contract float %101, %5\l  %103 = fsub contract float %99, %102\l  %104 = fneg contract float %38\l  %105 = fmul contract float %77, %6\l  %106 = fsub contract float %104, %105\l  %107 = fmul contract float %85, %55\l  %108 = fadd contract float %106, %107\l  %109 = fmul contract float %41, %56\l  %110 = fmul contract float %73, %109\l  %111 = fsub contract float %108, %110\l  %112 = fmul contract float %56, %56\l  %113 = fmul contract float %77, %112\l  %114 = fdiv contract float %113, %6\l  %115 = fsub contract float %111, %114\l  %116 = fmul contract float %41, %6\l  %117 = fmul contract float %116, %69\l  %118 = fadd contract float %117, %115\l  %119 = fmul contract float %81, %100\l  %120 = fdiv contract float %119, %6\l  %121 = fadd contract float %120, %118\l  %122 = fmul contract float %103, %103\l  %123 = fmul contract float %121, %121\l  %124 = fadd contract float %123, %122\l  %125 = fcmp olt float %124, 0x39F0000000000000\l  %126 = select i1 %125, float 0x41F0000000000000, float 1.000000e+00\l  %127 = fmul float %124, %126\l  %128 = tail call float @llvm.sqrt.f32(float %127)\l  %129 = bitcast float %128 to i32\l  %130 = add nsw i32 %129, -1\l  %131 = bitcast i32 %130 to float\l  %132 = add nsw i32 %129, 1\l  %133 = bitcast i32 %132 to float\l  %134 = tail call i1 @llvm.amdgcn.class.f32(float %127, i32 608)\l  %135 = select i1 %125, float 0x3EF0000000000000, float 1.000000e+00\l  %136 = fneg float %133\l  %137 = tail call float @llvm.fma.f32(float %136, float %128, float %127)\l  %138 = fcmp ogt float %137, 0.000000e+00\l  %139 = fneg float %131\l  %140 = tail call float @llvm.fma.f32(float %139, float %128, float %127)\l  %141 = fcmp ole float %140, 0.000000e+00\l  %142 = select i1 %141, float %131, float %128\l  %143 = select i1 %138, float %133, float %142\l  %144 = fmul float %135, %143\l  %145 = select i1 %134, float %127, float %144\l  %146 = fmul contract float %57, %145\l  %147 = sext i32 %61 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %0, i64 %147\l  store float %146, float addrspace(1)* %148, align 4, !tbaa !11\l  br label %149\l}"];
	Node0x5b11510 -> Node0x5b115a0;
	Node0x5b115a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%149:\l149:                                              \l  ret void\l}"];
}
