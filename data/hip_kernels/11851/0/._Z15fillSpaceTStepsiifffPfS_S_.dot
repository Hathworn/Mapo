digraph "CFG for '_Z15fillSpaceTStepsiifffPfS_S_' function" {
	label="CFG for '_Z15fillSpaceTStepsiifffPfS_S_' function";

	Node0x5565ae0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 2, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %25 = add i32 %23, %24\l  %26 = mul nsw i32 %17, %0\l  %27 = add i32 %26, %25\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %6, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %31 = fmul contract float %30, 2.000000e+00\l  %32 = getelementptr inbounds float, float addrspace(1)* %7, i64 %28\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %34 = fsub contract float %31, %33\l  %35 = fmul contract float %2, %2\l  %36 = fdiv contract float %3, %4\l  %37 = fmul contract float %36, %3\l  %38 = fdiv contract float %37, %4\l  %39 = fmul contract float %35, %38\l  %40 = add nsw i32 %17, 1\l  %41 = mul nsw i32 %40, %0\l  %42 = add nsw i32 %41, %25\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %6, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %46 = add nsw i32 %17, -1\l  %47 = mul nsw i32 %46, %0\l  %48 = add nsw i32 %47, %25\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %6, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fadd contract float %45, %51\l  %53 = add nsw i32 %27, -1\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %6, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %57 = fadd contract float %52, %56\l  %58 = add i32 %27, 1\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %6, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %62 = fadd contract float %57, %61\l  %63 = fmul contract float %30, 4.000000e+00\l  %64 = fsub contract float %62, %63\l  %65 = fmul contract float %39, %64\l  %66 = fadd contract float %34, %65\l  %67 = getelementptr inbounds float, float addrspace(1)* %5, i64 %28\l  store float %66, float addrspace(1)* %67, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
}
