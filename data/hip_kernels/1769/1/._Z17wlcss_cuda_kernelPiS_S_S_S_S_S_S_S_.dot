digraph "CFG for '_Z17wlcss_cuda_kernelPiS_S_S_S_S_S_S_S_' function" {
	label="CFG for '_Z17wlcss_cuda_kernelPiS_S_S_S_S_S_S_S_' function";

	Node0x5e1fbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %13 = sext i32 %11 to i64\l  %14 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %13\l  %15 = load i32, i32 addrspace(1)* %14, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %16 = sext i32 %12 to i64\l  %17 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %16\l  %18 = load i32, i32 addrspace(1)* %17, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %19 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %13\l  %20 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %16\l  %22 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %23 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %23, i64 12\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 4, !tbaa !10\l  %27 = getelementptr i8, i8 addrspace(4)* %23, i64 4\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 4, !range !19, !invariant.load\l... !9\l  %30 = zext i16 %29 to i32\l  %31 = udiv i32 %26, %30\l  %32 = mul i32 %31, %30\l  %33 = icmp ugt i32 %26, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = mul i32 %35, %10\l  %37 = getelementptr inbounds i8, i8 addrspace(4)* %23, i64 16\l  %38 = bitcast i8 addrspace(4)* %37 to i32 addrspace(4)*\l  %39 = load i32, i32 addrspace(4)* %38, align 8, !tbaa !20\l  %40 = getelementptr i8, i8 addrspace(4)* %23, i64 6\l  %41 = bitcast i8 addrspace(4)* %40 to i16 addrspace(4)*\l  %42 = load i16, i16 addrspace(4)* %41, align 2, !range !19, !invariant.load\l... !9\l  %43 = zext i16 %42 to i32\l  %44 = udiv i32 %39, %43\l  %45 = mul i32 %44, %43\l  %46 = icmp ugt i32 %39, %45\l  %47 = zext i1 %46 to i32\l  %48 = add i32 %44, %47\l  %49 = add i32 %36, %11\l  %50 = mul i32 %48, %49\l  %51 = add i32 %50, %12\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %52\l  %54 = load i32, i32 addrspace(1)* %53, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %55 = add nsw i32 %15, 2\l  %56 = sext i32 %55 to i64\l  %57 = tail call \{ i64, i1 \} @llvm.umul.with.overflow.i64(i64 %56, i64 4)\l  %58 = extractvalue \{ i64, i1 \} %57, 1\l  %59 = extractvalue \{ i64, i1 \} %57, 0\l  %60 = select i1 %58, i64 -1, i64 %59\l  %61 = tail call i64 @llvm.umax.i64(i64 %60, i64 1)\l  %62 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %61) #13\l  %63 = ptrtoint i8 addrspace(1)* %62 to i64\l  %64 = bitcast i8 addrspace(1)* %62 to i32 addrspace(1)*\l  tail call void @llvm.memset.p1i8.i64(i8 addrspace(1)* align 4 %62, i8 0, i64\l... %60, i1 false)\l  %65 = sext i32 %20 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %65\l  %67 = sext i32 %22 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %67\l  %69 = sext i32 %54 to i64\l  %70 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %69\l  %71 = mul nuw nsw i32 %10, 3\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %72\l  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !5\l  %75 = add nuw nsw i32 %71, 1\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %76\l  %78 = load i32, i32 addrspace(1)* %77, align 4, !tbaa !5\l  %79 = add nuw nsw i32 %71, 2\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %80\l  %82 = load i32, i32 addrspace(1)* %81, align 4, !tbaa !5\l  %83 = icmp sgt i32 %18, 0\l  br i1 %83, label %84, label %202\l|{<s0>T|<s1>F}}"];
	Node0x5e1fbc0:s0 -> Node0x5e25e80;
	Node0x5e1fbc0:s1 -> Node0x5e25f10;
	Node0x5e25e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%84:\l84:                                               \l  %85 = icmp sgt i32 %15, 0\l  %86 = add nsw i32 %15, 1\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %87\l  %89 = sext i32 %15 to i64\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %89\l  %91 = and i32 %15, 1\l  %92 = icmp eq i32 %15, 1\l  %93 = and i32 %15, -2\l  %94 = icmp eq i32 %91, 0\l  br label %95\l}"];
	Node0x5e25e80 -> Node0x5e265d0;
	Node0x5e265d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%95:\l95:                                               \l  %96 = phi i32 [ 0, %84 ], [ %139, %135 ]\l  br i1 %85, label %100, label %97\l|{<s0>T|<s1>F}}"];
	Node0x5e265d0:s0 -> Node0x5e26800;
	Node0x5e265d0:s1 -> Node0x5e26890;
	Node0x5e26890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%97:\l97:                                               \l  %98 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %99 = zext i32 %96 to i64\l  br label %135\l}"];
	Node0x5e26890 -> Node0x5e266c0;
	Node0x5e26800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%100:\l100:                                              \l  %101 = zext i32 %96 to i64\l  %102 = getelementptr inbounds i32, i32 addrspace(1)* %68, i64 %101\l  br i1 %92, label %103, label %141\l|{<s0>T|<s1>F}}"];
	Node0x5e26800:s0 -> Node0x5e26c60;
	Node0x5e26800:s1 -> Node0x5e26cb0;
	Node0x5e26c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%103:\l103:                                              \l  %104 = phi i32 [ undef, %100 ], [ %198, %196 ]\l  %105 = phi i32 [ 0, %100 ], [ %181, %196 ]\l  br i1 %94, label %135, label %106\l|{<s0>T|<s1>F}}"];
	Node0x5e26c60:s0 -> Node0x5e266c0;
	Node0x5e26c60:s1 -> Node0x5e27420;
	Node0x5e27420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%106:\l106:                                              \l  %107 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !5\l  %108 = zext i32 %105 to i64\l  %109 = getelementptr inbounds i32, i32 addrspace(1)* %66, i64 %108\l  %110 = load i32, i32 addrspace(1)* %109, align 4, !tbaa !5\l  %111 = sub nsw i32 %107, %110\l  %112 = tail call i32 @llvm.abs.i32(i32 %111, i1 true)\l  %113 = icmp sgt i32 %112, %82\l  %114 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %108\l  %115 = load i32, i32 addrspace(1)* %114, align 4, !tbaa !5\l  br i1 %113, label %119, label %116\l|{<s0>T|<s1>F}}"];
	Node0x5e27420:s0 -> Node0x5e27c00;
	Node0x5e27420:s1 -> Node0x5e27c90;
	Node0x5e27c90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%116:\l116:                                              \l  %117 = add nsw i32 %115, %74\l  %118 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  br label %131\l}"];
	Node0x5e27c90 -> Node0x5e27ed0;
	Node0x5e27c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%119:\l119:                                              \l  %120 = add nuw nsw i32 %105, 1\l  %121 = mul nsw i32 %112, %78\l  %122 = sub nsw i32 %115, %121\l  %123 = zext i32 %120 to i64\l  %124 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %123\l  %125 = load i32, i32 addrspace(1)* %124, align 4, !tbaa !5\l  %126 = sub nsw i32 %125, %121\l  %127 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %128 = sub nsw i32 %127, %121\l  %129 = tail call i32 @llvm.smax.i32(i32 %126, i32 %128)\l  %130 = tail call i32 @llvm.smax.i32(i32 %122, i32 %129)\l  br label %131\l}"];
	Node0x5e27c00 -> Node0x5e27ed0;
	Node0x5e27ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%131:\l131:                                              \l  %132 = phi i32 [ %127, %119 ], [ %118, %116 ]\l  %133 = phi i32 [ %130, %119 ], [ %117, %116 ]\l  %134 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %108\l  store i32 %132, i32 addrspace(1)* %134, align 4, !tbaa !5\l  store i32 %133, i32 addrspace(1)* %88, align 4, !tbaa !5\l  br label %135\l}"];
	Node0x5e27ed0 -> Node0x5e266c0;
	Node0x5e266c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%135:\l135:                                              \l  %136 = phi i64 [ %99, %97 ], [ %101, %103 ], [ %101, %131 ]\l  %137 = phi i32 [ %98, %97 ], [ %104, %103 ], [ %133, %131 ]\l  store i32 %137, i32 addrspace(1)* %90, align 4, !tbaa !5\l  %138 = getelementptr inbounds i32, i32 addrspace(1)* %70, i64 %136\l  store i32 %137, i32 addrspace(1)* %138, align 4, !tbaa !5\l  store i32 0, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %139 = add nuw nsw i32 %96, 1\l  %140 = icmp eq i32 %139, %18\l  br i1 %140, label %202, label %95, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5e266c0:s0 -> Node0x5e25f10;
	Node0x5e266c0:s1 -> Node0x5e265d0;
	Node0x5e26cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%141:\l141:                                              \l  %142 = phi i32 [ %181, %196 ], [ 0, %100 ]\l  %143 = phi i32 [ %200, %196 ], [ 0, %100 ]\l  %144 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !5\l  %145 = zext i32 %142 to i64\l  %146 = getelementptr inbounds i32, i32 addrspace(1)* %66, i64 %145\l  %147 = load i32, i32 addrspace(1)* %146, align 4, !tbaa !5\l  %148 = sub nsw i32 %144, %147\l  %149 = tail call i32 @llvm.abs.i32(i32 %148, i1 true)\l  %150 = icmp sgt i32 %149, %82\l  %151 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %145\l  %152 = load i32, i32 addrspace(1)* %151, align 4, !tbaa !5\l  %153 = or i32 %142, 1\l  br i1 %150, label %157, label %154\l|{<s0>T|<s1>F}}"];
	Node0x5e26cb0:s0 -> Node0x5e29d00;
	Node0x5e26cb0:s1 -> Node0x5e29d50;
	Node0x5e29d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%154:\l154:                                              \l  %155 = add nsw i32 %152, %74\l  %156 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  br label %168\l}"];
	Node0x5e29d50 -> Node0x5e29f90;
	Node0x5e29d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%157:\l157:                                              \l  %158 = mul nsw i32 %149, %78\l  %159 = sub nsw i32 %152, %158\l  %160 = zext i32 %153 to i64\l  %161 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %160\l  %162 = load i32, i32 addrspace(1)* %161, align 4, !tbaa !5\l  %163 = sub nsw i32 %162, %158\l  %164 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %165 = sub nsw i32 %164, %158\l  %166 = tail call i32 @llvm.smax.i32(i32 %163, i32 %165)\l  %167 = tail call i32 @llvm.smax.i32(i32 %159, i32 %166)\l  br label %168\l}"];
	Node0x5e29d00 -> Node0x5e29f90;
	Node0x5e29f90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%168:\l168:                                              \l  %169 = phi i32 [ %164, %157 ], [ %156, %154 ]\l  %170 = phi i32 [ %167, %157 ], [ %155, %154 ]\l  %171 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %145\l  store i32 %169, i32 addrspace(1)* %171, align 4, !tbaa !5\l  store i32 %170, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %172 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !5\l  %173 = zext i32 %153 to i64\l  %174 = getelementptr inbounds i32, i32 addrspace(1)* %66, i64 %173\l  %175 = load i32, i32 addrspace(1)* %174, align 4, !tbaa !5\l  %176 = sub nsw i32 %172, %175\l  %177 = tail call i32 @llvm.abs.i32(i32 %176, i1 true)\l  %178 = icmp sgt i32 %177, %82\l  %179 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %173\l  %180 = load i32, i32 addrspace(1)* %179, align 4, !tbaa !5\l  %181 = add nuw nsw i32 %142, 2\l  br i1 %178, label %185, label %182\l|{<s0>T|<s1>F}}"];
	Node0x5e29f90:s0 -> Node0x5e2aff0;
	Node0x5e29f90:s1 -> Node0x5e2b040;
	Node0x5e2b040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%182:\l182:                                              \l  %183 = add nsw i32 %180, %74\l  %184 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  br label %196\l}"];
	Node0x5e2b040 -> Node0x5e271c0;
	Node0x5e2aff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%185:\l185:                                              \l  %186 = mul nsw i32 %177, %78\l  %187 = sub nsw i32 %180, %186\l  %188 = zext i32 %181 to i64\l  %189 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %188\l  %190 = load i32, i32 addrspace(1)* %189, align 4, !tbaa !5\l  %191 = sub nsw i32 %190, %186\l  %192 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %193 = sub nsw i32 %192, %186\l  %194 = tail call i32 @llvm.smax.i32(i32 %191, i32 %193)\l  %195 = tail call i32 @llvm.smax.i32(i32 %187, i32 %194)\l  br label %196\l}"];
	Node0x5e2aff0 -> Node0x5e271c0;
	Node0x5e271c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%196:\l196:                                              \l  %197 = phi i32 [ %192, %185 ], [ %184, %182 ]\l  %198 = phi i32 [ %195, %185 ], [ %183, %182 ]\l  %199 = getelementptr inbounds i32, i32 addrspace(1)* %64, i64 %173\l  store i32 %197, i32 addrspace(1)* %199, align 4, !tbaa !5\l  store i32 %198, i32 addrspace(1)* %88, align 4, !tbaa !5\l  %200 = add i32 %143, 2\l  %201 = icmp eq i32 %200, %93\l  br i1 %201, label %103, label %141, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5e271c0:s0 -> Node0x5e26c60;
	Node0x5e271c0:s1 -> Node0x5e26cb0;
	Node0x5e25f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%202:\l202:                                              \l  %203 = icmp eq i8 addrspace(1)* %62, addrspacecast (i8* null to i8\l... addrspace(1)*)\l  br i1 %203, label %205, label %204\l|{<s0>T|<s1>F}}"];
	Node0x5e25f10:s0 -> Node0x5e27300;
	Node0x5e25f10:s1 -> Node0x5e2c590;
	Node0x5e2c590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%204:\l204:                                              \l  tail call fastcc void @__ockl_dm_dealloc(i64 %63) #13\l  br label %205\l}"];
	Node0x5e2c590 -> Node0x5e27300;
	Node0x5e27300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%205:\l205:                                              \l  ret void\l}"];
}
