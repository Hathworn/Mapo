digraph "CFG for '_ZL23KerBitReversalMatrixRowPfS_S_S_ii' function" {
	label="CFG for '_ZL23KerBitReversalMatrixRowPfS_S_S_ii' function";

	Node0x470e140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %8, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = shl nuw i32 1, %5\l  %25 = icmp slt i32 %15, %24\l  br i1 %25, label %26, label %100\l|{<s0>T|<s1>F}}"];
	Node0x470e140:s0 -> Node0x4711b10;
	Node0x470e140:s1 -> Node0x4711ba0;
	Node0x4711b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %5, 0\l  br i1 %27, label %28, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4711b10:s0 -> Node0x4711da0;
	Node0x4711b10:s1 -> Node0x4711df0;
	Node0x4711da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = and i32 %5, 7\l  %30 = icmp ult i32 %5, 8\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x4711da0:s0 -> Node0x47120b0;
	Node0x4711da0:s1 -> Node0x4712100;
	Node0x4712100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %5, -8\l  br label %51\l}"];
	Node0x4712100 -> Node0x4710160;
	Node0x47120b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi i32 [ undef, %28 ], [ %80, %51 ]\l  %35 = phi i32 [ 0, %28 ], [ %80, %51 ]\l  %36 = phi i32 [ %15, %28 ], [ %81, %51 ]\l  %37 = icmp eq i32 %29, 0\l  br i1 %37, label %48, label %38\l|{<s0>T|<s1>F}}"];
	Node0x47120b0:s0 -> Node0x4711df0;
	Node0x47120b0:s1 -> Node0x4712c30;
	Node0x4712c30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i32 [ %44, %38 ], [ %35, %33 ]\l  %40 = phi i32 [ %45, %38 ], [ %36, %33 ]\l  %41 = phi i32 [ %46, %38 ], [ 0, %33 ]\l  %42 = shl i32 %39, 1\l  %43 = and i32 %40, 1\l  %44 = or i32 %42, %43\l  %45 = ashr i32 %40, 1\l  %46 = add i32 %41, 1\l  %47 = icmp eq i32 %46, %29\l  br i1 %47, label %48, label %38, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x4712c30:s0 -> Node0x4711df0;
	Node0x4712c30:s1 -> Node0x4712c30;
	Node0x4711df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %26 ], [ %34, %33 ], [ %44, %38 ]\l  %50 = icmp slt i32 %15, %49\l  br i1 %50, label %100, label %84\l|{<s0>T|<s1>F}}"];
	Node0x4711df0:s0 -> Node0x4711ba0;
	Node0x4711df0:s1 -> Node0x4713680;
	Node0x4710160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %31 ], [ %80, %51 ]\l  %53 = phi i32 [ %15, %31 ], [ %81, %51 ]\l  %54 = phi i32 [ 0, %31 ], [ %82, %51 ]\l  %55 = shl i32 %52, 3\l  %56 = shl i32 %53, 2\l  %57 = and i32 %56, 4\l  %58 = or i32 %55, %57\l  %59 = and i32 %53, 2\l  %60 = or i32 %58, %59\l  %61 = lshr i32 %53, 4\l  %62 = shl i32 %60, 2\l  %63 = and i32 %53, 4\l  %64 = or i32 %63, %62\l  %65 = lshr i32 %53, 2\l  %66 = and i32 %65, 2\l  %67 = or i32 %64, %66\l  %68 = and i32 %61, 1\l  %69 = or i32 %67, %68\l  %70 = lshr i32 %53, 6\l  %71 = shl i32 %69, 2\l  %72 = lshr i32 %53, 4\l  %73 = and i32 %72, 2\l  %74 = or i32 %71, %73\l  %75 = and i32 %70, 1\l  %76 = or i32 %74, %75\l  %77 = lshr i32 %53, 7\l  %78 = shl i32 %76, 1\l  %79 = and i32 %77, 1\l  %80 = or i32 %78, %79\l  %81 = ashr i32 %53, 8\l  %82 = add i32 %54, 8\l  %83 = icmp eq i32 %82, %32\l  br i1 %83, label %33, label %51, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x4710160:s0 -> Node0x47120b0;
	Node0x4710160:s1 -> Node0x4710160;
	Node0x4713680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%84:\l84:                                               \l  %85 = mul nsw i32 %23, %4\l  %86 = add nsw i32 %85, %15\l  %87 = add nsw i32 %49, %85\l  %88 = sext i32 %86 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %93 = sext i32 %87 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  store float %95, float addrspace(1)* %89, align 4, !tbaa !11\l  %96 = getelementptr inbounds float, float addrspace(1)* %3, i64 %93\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !11\l  store float %97, float addrspace(1)* %91, align 4, !tbaa !11\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  store float %90, float addrspace(1)* %98, align 4, !tbaa !11\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  store float %92, float addrspace(1)* %99, align 4, !tbaa !11\l  br label %100\l}"];
	Node0x4713680 -> Node0x4711ba0;
	Node0x4711ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%100:\l100:                                              \l  ret void\l}"];
}
