digraph "CFG for 'matrix_log' function" {
	label="CFG for 'matrix_log' function";

	Node0x4bde200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp ult i32 %12, %2\l  br i1 %13, label %14, label %103\l|{<s0>T|<s1>F}}"];
	Node0x4bde200:s0 -> Node0x4be0110;
	Node0x4bde200:s1 -> Node0x4be01a0;
	Node0x4be0110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%14:\l14:                                               \l  %15 = sext i32 %12 to i64\l  %16 = getelementptr inbounds double, double addrspace(1)* %0, i64 %15\l  %17 = load double, double addrspace(1)* %16, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %18 = tail call double @llvm.amdgcn.frexp.mant.f64(double %17)\l  %19 = fcmp olt double %18, 0x3FE5555555555555\l  %20 = zext i1 %19 to i32\l  %21 = tail call double @llvm.amdgcn.ldexp.f64(double %18, i32 %20)\l  %22 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %17)\l  %23 = sub nsw i32 %22, %20\l  %24 = fadd double %21, -1.000000e+00\l  %25 = fadd double %21, 1.000000e+00\l  %26 = fadd double %25, -1.000000e+00\l  %27 = fsub double %21, %26\l  %28 = tail call double @llvm.amdgcn.rcp.f64(double %25)\l  %29 = fneg double %25\l  %30 = tail call double @llvm.fma.f64(double %29, double %28, double\l... 1.000000e+00)\l  %31 = tail call double @llvm.fma.f64(double %30, double %28, double %28)\l  %32 = tail call double @llvm.fma.f64(double %29, double %31, double\l... 1.000000e+00)\l  %33 = tail call double @llvm.fma.f64(double %32, double %31, double %31)\l  %34 = fmul double %24, %33\l  %35 = fmul double %25, %34\l  %36 = fneg double %35\l  %37 = tail call double @llvm.fma.f64(double %34, double %25, double %36)\l  %38 = tail call double @llvm.fma.f64(double %34, double %27, double %37)\l  %39 = fadd double %35, %38\l  %40 = fsub double %39, %35\l  %41 = fsub double %38, %40\l  %42 = fsub double %24, %39\l  %43 = fsub double %24, %42\l  %44 = fsub double %43, %39\l  %45 = fsub double %44, %41\l  %46 = fadd double %42, %45\l  %47 = fmul double %33, %46\l  %48 = fadd double %34, %47\l  %49 = fsub double %48, %34\l  %50 = fsub double %47, %49\l  %51 = fmul double %48, %48\l  %52 = tail call double @llvm.fma.f64(double %51, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %53 = tail call double @llvm.fma.f64(double %51, double %52, double\l... 0x3FC7474DD7F4DF2E)\l  %54 = tail call double @llvm.fma.f64(double %51, double %53, double\l... 0x3FCC71C016291751)\l  %55 = tail call double @llvm.fma.f64(double %51, double %54, double\l... 0x3FD249249B27ACF1)\l  %56 = tail call double @llvm.fma.f64(double %51, double %55, double\l... 0x3FD99999998EF7B6)\l  %57 = tail call double @llvm.fma.f64(double %51, double %56, double\l... 0x3FE5555555555780)\l  %58 = tail call double @llvm.amdgcn.ldexp.f64(double %48, i32 1)\l  %59 = tail call double @llvm.amdgcn.ldexp.f64(double %50, i32 1)\l  %60 = fmul double %48, %51\l  %61 = fmul double %60, %57\l  %62 = fadd double %58, %61\l  %63 = fsub double %62, %58\l  %64 = fsub double %61, %63\l  %65 = fadd double %59, %64\l  %66 = fadd double %62, %65\l  %67 = fsub double %66, %62\l  %68 = fsub double %65, %67\l  %69 = sitofp i32 %23 to double\l  %70 = fmul double %69, 0x3FE62E42FEFA39EF\l  %71 = fneg double %70\l  %72 = tail call double @llvm.fma.f64(double %69, double 0x3FE62E42FEFA39EF,\l... double %71)\l  %73 = tail call double @llvm.fma.f64(double %69, double 0x3C7ABC9E3B39803F,\l... double %72)\l  %74 = fadd double %70, %73\l  %75 = fsub double %74, %70\l  %76 = fsub double %73, %75\l  %77 = fadd double %74, %66\l  %78 = fsub double %77, %74\l  %79 = fsub double %77, %78\l  %80 = fsub double %74, %79\l  %81 = fsub double %66, %78\l  %82 = fadd double %81, %80\l  %83 = fadd double %76, %68\l  %84 = fsub double %83, %76\l  %85 = fsub double %83, %84\l  %86 = fsub double %76, %85\l  %87 = fsub double %68, %84\l  %88 = fadd double %87, %86\l  %89 = fadd double %83, %82\l  %90 = fadd double %77, %89\l  %91 = fsub double %90, %77\l  %92 = fsub double %89, %91\l  %93 = fadd double %88, %92\l  %94 = fadd double %90, %93\l  %95 = tail call double @llvm.fabs.f64(double %17) #3\l  %96 = fcmp oeq double %95, 0x7FF0000000000000\l  %97 = select i1 %96, double %17, double %94\l  %98 = fcmp olt double %17, 0.000000e+00\l  %99 = select i1 %98, double 0x7FF8000000000000, double %97\l  %100 = fcmp oeq double %17, 0.000000e+00\l  %101 = select i1 %100, double 0xFFF0000000000000, double %99\l  %102 = getelementptr inbounds double, double addrspace(1)* %1, i64 %15\l  store double %101, double addrspace(1)* %102, align 8, !tbaa !7\l  br label %103\l}"];
	Node0x4be0110 -> Node0x4be01a0;
	Node0x4be01a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%103:\l103:                                              \l  ret void\l}"];
}
