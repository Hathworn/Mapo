digraph "CFG for '_Z14mc_kernel_callPffffffffS_jj' function" {
	label="CFG for '_Z14mc_kernel_callPffffffffS_jj' function";

	Node0x5668310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %13, %18\l  %20 = add i32 %19, %12\l  %21 = icmp ult i32 %20, %10\l  br i1 %21, label %22, label %163\l|{<s0>T|<s1>F}}"];
	Node0x5668310:s0 -> Node0x566ae20;
	Node0x5668310:s1 -> Node0x566aeb0;
	Node0x566ae20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = tail call i32 @llvm.umax.i32(i32 %9, i32 1)\l  %24 = add i32 %23, -1\l  %25 = and i32 %23, 7\l  %26 = icmp ult i32 %24, 7\l  br i1 %26, label %115, label %27\l|{<s0>T|<s1>F}}"];
	Node0x566ae20:s0 -> Node0x566b3a0;
	Node0x566ae20:s1 -> Node0x566b430;
	Node0x566b430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %23, -8\l  br label %29\l}"];
	Node0x566b430 -> Node0x566b630;
	Node0x566b630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%29:\l29:                                               \l  %30 = phi float [ %3, %27 ], [ %111, %29 ]\l  %31 = phi i32 [ %20, %27 ], [ %112, %29 ]\l  %32 = phi i32 [ 0, %27 ], [ %113, %29 ]\l  %33 = fmul contract float %30, %5\l  %34 = fmul contract float %33, %7\l  %35 = fadd contract float %30, %34\l  %36 = fmul contract float %30, %4\l  %37 = sext i32 %31 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %8, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %40 = fmul contract float %36, %39\l  %41 = fadd contract float %35, %40\l  %42 = add nsw i32 %31, 1\l  %43 = fmul contract float %41, %5\l  %44 = fmul contract float %43, %7\l  %45 = fadd contract float %41, %44\l  %46 = fmul contract float %41, %4\l  %47 = sext i32 %42 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %8, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %50 = fmul contract float %46, %49\l  %51 = fadd contract float %45, %50\l  %52 = add nsw i32 %31, 2\l  %53 = fmul contract float %51, %5\l  %54 = fmul contract float %53, %7\l  %55 = fadd contract float %51, %54\l  %56 = fmul contract float %51, %4\l  %57 = sext i32 %52 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %8, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %60 = fmul contract float %56, %59\l  %61 = fadd contract float %55, %60\l  %62 = add nsw i32 %31, 3\l  %63 = fmul contract float %61, %5\l  %64 = fmul contract float %63, %7\l  %65 = fadd contract float %61, %64\l  %66 = fmul contract float %61, %4\l  %67 = sext i32 %62 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %8, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %70 = fmul contract float %66, %69\l  %71 = fadd contract float %65, %70\l  %72 = add nsw i32 %31, 4\l  %73 = fmul contract float %71, %5\l  %74 = fmul contract float %73, %7\l  %75 = fadd contract float %71, %74\l  %76 = fmul contract float %71, %4\l  %77 = sext i32 %72 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %8, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %80 = fmul contract float %76, %79\l  %81 = fadd contract float %75, %80\l  %82 = add nsw i32 %31, 5\l  %83 = fmul contract float %81, %5\l  %84 = fmul contract float %83, %7\l  %85 = fadd contract float %81, %84\l  %86 = fmul contract float %81, %4\l  %87 = sext i32 %82 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %8, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %90 = fmul contract float %86, %89\l  %91 = fadd contract float %85, %90\l  %92 = add nsw i32 %31, 6\l  %93 = fmul contract float %91, %5\l  %94 = fmul contract float %93, %7\l  %95 = fadd contract float %91, %94\l  %96 = fmul contract float %91, %4\l  %97 = sext i32 %92 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %8, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %100 = fmul contract float %96, %99\l  %101 = fadd contract float %95, %100\l  %102 = add nsw i32 %31, 7\l  %103 = fmul contract float %101, %5\l  %104 = fmul contract float %103, %7\l  %105 = fadd contract float %101, %104\l  %106 = fmul contract float %101, %4\l  %107 = sext i32 %102 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %8, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %110 = fmul contract float %106, %109\l  %111 = fadd contract float %105, %110\l  %112 = add nsw i32 %31, 8\l  %113 = add i32 %32, 8\l  %114 = icmp eq i32 %113, %28\l  br i1 %114, label %115, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x566b630:s0 -> Node0x566b3a0;
	Node0x566b630:s1 -> Node0x566b630;
	Node0x566b3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%115:\l115:                                              \l  %116 = phi float [ undef, %22 ], [ %111, %29 ]\l  %117 = phi float [ %3, %22 ], [ %111, %29 ]\l  %118 = phi i32 [ %20, %22 ], [ %112, %29 ]\l  %119 = icmp eq i32 %25, 0\l  br i1 %119, label %136, label %120\l|{<s0>T|<s1>F}}"];
	Node0x566b3a0:s0 -> Node0x56702d0;
	Node0x566b3a0:s1 -> Node0x5670320;
	Node0x5670320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%120:\l120:                                              \l  %121 = phi float [ %132, %120 ], [ %117, %115 ]\l  %122 = phi i32 [ %133, %120 ], [ %118, %115 ]\l  %123 = phi i32 [ %134, %120 ], [ 0, %115 ]\l  %124 = fmul contract float %121, %5\l  %125 = fmul contract float %124, %7\l  %126 = fadd contract float %121, %125\l  %127 = fmul contract float %121, %4\l  %128 = sext i32 %122 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %8, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %131 = fmul contract float %127, %130\l  %132 = fadd contract float %126, %131\l  %133 = add nsw i32 %122, 1\l  %134 = add i32 %123, 1\l  %135 = icmp eq i32 %134, %25\l  br i1 %135, label %136, label %120, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5670320:s0 -> Node0x56702d0;
	Node0x5670320:s1 -> Node0x5670320;
	Node0x56702d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%136:\l136:                                              \l  %137 = phi float [ %116, %115 ], [ %132, %120 ]\l  %138 = fcmp contract ogt float %137, %2\l  %139 = fsub contract float %137, %2\l  %140 = fpext float %139 to double\l  %141 = select contract i1 %138, double %140, double 0.000000e+00\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %142 = fneg contract float %6\l  %143 = fmul contract float %142, %1\l  %144 = fmul float %143, 0x3FF7154760000000\l  %145 = tail call float @llvm.rint.f32(float %144)\l  %146 = fcmp ogt float %143, 0x40562E4300000000\l  %147 = fcmp olt float %143, 0xC059D1DA00000000\l  %148 = fneg float %144\l  %149 = tail call float @llvm.fma.f32(float %143, float 0x3FF7154760000000,\l... float %148)\l  %150 = tail call float @llvm.fma.f32(float %143, float 0x3E54AE0BE0000000,\l... float %149)\l  %151 = fsub float %144, %145\l  %152 = fadd float %150, %151\l  %153 = tail call float @llvm.exp2.f32(float %152)\l  %154 = fptosi float %145 to i32\l  %155 = tail call float @llvm.amdgcn.ldexp.f32(float %153, i32 %154)\l  %156 = select i1 %147, float 0.000000e+00, float %155\l  %157 = select i1 %146, float 0x7FF0000000000000, float %156\l  %158 = fpext float %157 to double\l  %159 = fmul contract double %141, %158\l  %160 = fptrunc double %159 to float\l  %161 = sext i32 %20 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %0, i64 %161\l  store float %160, float addrspace(1)* %162, align 4, !tbaa !7\l  br label %163\l}"];
	Node0x56702d0 -> Node0x566aeb0;
	Node0x566aeb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%163:\l163:                                              \l  ret void\l}"];
}
