digraph "CFG for '_Z6kernelPhi' function" {
	label="CFG for '_Z6kernelPhi' function";

	Node0x4c5f8e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !7\l  %13 = mul i32 %4, %9\l  %14 = add i32 %13, %3\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = udiv i32 %12, %9\l  %24 = add nsw i32 %14, -512\l  %25 = sitofp i32 %24 to float\l  %26 = add nsw i32 %22, -512\l  %27 = sitofp i32 %26 to float\l  %28 = fmul contract float %25, %25\l  %29 = fmul contract float %27, %27\l  %30 = fadd contract float %28, %29\l  %31 = fcmp olt float %30, 0x39F0000000000000\l  %32 = select i1 %31, float 0x41F0000000000000, float 1.000000e+00\l  %33 = fmul float %30, %32\l  %34 = tail call float @llvm.sqrt.f32(float %33)\l  %35 = bitcast float %34 to i32\l  %36 = add nsw i32 %35, -1\l  %37 = bitcast i32 %36 to float\l  %38 = add nsw i32 %35, 1\l  %39 = bitcast i32 %38 to float\l  %40 = tail call i1 @llvm.amdgcn.class.f32(float %33, i32 608)\l  %41 = select i1 %31, float 0x3EF0000000000000, float 1.000000e+00\l  %42 = fneg float %39\l  %43 = tail call float @llvm.fma.f32(float %42, float %34, float %33)\l  %44 = fcmp ogt float %43, 0.000000e+00\l  %45 = fneg float %37\l  %46 = tail call float @llvm.fma.f32(float %45, float %34, float %33)\l  %47 = fcmp ole float %46, 0.000000e+00\l  %48 = select i1 %47, float %37, float %34\l  %49 = select i1 %44, float %39, float %48\l  %50 = fmul float %41, %49\l  %51 = select i1 %40, float %33, float %50\l  %52 = fdiv contract float %51, 1.000000e+01\l  %53 = sitofp i32 %1 to float\l  %54 = fdiv contract float %53, 7.000000e+00\l  %55 = fsub contract float %52, %54\l  %56 = tail call float @llvm.fabs.f32(float %55)\l  %57 = fcmp olt float %56, 1.310720e+05\l  br i1 %57, label %58, label %65\l|{<s0>T|<s1>F}}"];
	Node0x4c5f8e0:s0 -> Node0x4c65d30;
	Node0x4c5f8e0:s1 -> Node0x4c65dc0;
	Node0x4c65d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%58:\l58:                                               \l  %59 = fmul float %56, 0x3FE45F3060000000\l  %60 = tail call float @llvm.rint.f32(float %59)\l  %61 = tail call float @llvm.fma.f32(float %60, float 0xBFF921FB40000000,\l... float %56)\l  %62 = tail call float @llvm.fma.f32(float %60, float 0xBE74442D00000000,\l... float %61)\l  %63 = tail call float @llvm.fma.f32(float %60, float 0xBCF8469880000000,\l... float %62)\l  %64 = fptosi float %60 to i32\l  br label %171\l}"];
	Node0x4c65d30 -> Node0x4c64520;
	Node0x4c65dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%65:\l65:                                               \l  %66 = bitcast float %56 to i32\l  %67 = lshr i32 %66, 23\l  %68 = and i32 %66, 8388607\l  %69 = or i32 %68, 8388608\l  %70 = zext i32 %69 to i64\l  %71 = mul nuw nsw i64 %70, 4266746795\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = mul nuw nsw i64 %70, 1011060801\l  %75 = add nuw nsw i64 %73, %74\l  %76 = trunc i64 %75 to i32\l  %77 = lshr i64 %75, 32\l  %78 = mul nuw nsw i64 %70, 3680671129\l  %79 = add nuw nsw i64 %77, %78\l  %80 = trunc i64 %79 to i32\l  %81 = lshr i64 %79, 32\l  %82 = mul nuw nsw i64 %70, 4113882560\l  %83 = add nuw nsw i64 %81, %82\l  %84 = trunc i64 %83 to i32\l  %85 = lshr i64 %83, 32\l  %86 = mul nuw nsw i64 %70, 4230436817\l  %87 = add nuw nsw i64 %85, %86\l  %88 = trunc i64 %87 to i32\l  %89 = lshr i64 %87, 32\l  %90 = mul nuw nsw i64 %70, 1313084713\l  %91 = add nuw nsw i64 %89, %90\l  %92 = trunc i64 %91 to i32\l  %93 = lshr i64 %91, 32\l  %94 = mul nuw nsw i64 %70, 2734261102\l  %95 = add nuw nsw i64 %93, %94\l  %96 = trunc i64 %95 to i32\l  %97 = lshr i64 %95, 32\l  %98 = trunc i64 %97 to i32\l  %99 = add nsw i32 %67, -120\l  %100 = icmp ugt i32 %99, 63\l  %101 = select i1 %100, i32 %92, i32 %98\l  %102 = select i1 %100, i32 %88, i32 %96\l  %103 = select i1 %100, i32 %84, i32 %92\l  %104 = select i1 %100, i32 %80, i32 %88\l  %105 = select i1 %100, i32 %76, i32 %84\l  %106 = select i1 %100, i32 %72, i32 %80\l  %107 = select i1 %100, i32 -64, i32 0\l  %108 = add nsw i32 %107, %99\l  %109 = icmp ugt i32 %108, 31\l  %110 = select i1 %109, i32 %102, i32 %101\l  %111 = select i1 %109, i32 %103, i32 %102\l  %112 = select i1 %109, i32 %104, i32 %103\l  %113 = select i1 %109, i32 %105, i32 %104\l  %114 = select i1 %109, i32 %106, i32 %105\l  %115 = select i1 %109, i32 -32, i32 0\l  %116 = add nsw i32 %115, %108\l  %117 = icmp ugt i32 %116, 31\l  %118 = select i1 %117, i32 %111, i32 %110\l  %119 = select i1 %117, i32 %112, i32 %111\l  %120 = select i1 %117, i32 %113, i32 %112\l  %121 = select i1 %117, i32 %114, i32 %113\l  %122 = select i1 %117, i32 -32, i32 0\l  %123 = add nsw i32 %122, %116\l  %124 = icmp eq i32 %123, 0\l  %125 = sub nsw i32 32, %123\l  %126 = tail call i32 @llvm.fshr.i32(i32 %118, i32 %119, i32 %125)\l  %127 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %120, i32 %125)\l  %128 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %125)\l  %129 = select i1 %124, i32 %118, i32 %126\l  %130 = select i1 %124, i32 %119, i32 %127\l  %131 = select i1 %124, i32 %120, i32 %128\l  %132 = lshr i32 %129, 29\l  %133 = tail call i32 @llvm.fshl.i32(i32 %129, i32 %130, i32 2)\l  %134 = tail call i32 @llvm.fshl.i32(i32 %130, i32 %131, i32 2)\l  %135 = tail call i32 @llvm.fshl.i32(i32 %131, i32 %121, i32 2)\l  %136 = and i32 %132, 1\l  %137 = sub nsw i32 0, %136\l  %138 = shl i32 %132, 31\l  %139 = xor i32 %133, %137\l  %140 = xor i32 %134, %137\l  %141 = xor i32 %135, %137\l  %142 = tail call i32 @llvm.ctlz.i32(i32 %139, i1 false), !range !16\l  %143 = sub nsw i32 31, %142\l  %144 = tail call i32 @llvm.fshr.i32(i32 %139, i32 %140, i32 %143)\l  %145 = tail call i32 @llvm.fshr.i32(i32 %140, i32 %141, i32 %143)\l  %146 = shl nuw nsw i32 %142, 23\l  %147 = sub nuw nsw i32 1056964608, %146\l  %148 = lshr i32 %144, 9\l  %149 = or i32 %148, %147\l  %150 = or i32 %149, %138\l  %151 = bitcast i32 %150 to float\l  %152 = tail call i32 @llvm.fshl.i32(i32 %144, i32 %145, i32 23)\l  %153 = tail call i32 @llvm.ctlz.i32(i32 %152, i1 false), !range !16\l  %154 = fmul float %151, 0x3FF921FB40000000\l  %155 = add nuw nsw i32 %153, %142\l  %156 = shl nuw nsw i32 %155, 23\l  %157 = sub nuw nsw i32 855638016, %156\l  %158 = sub nsw i32 31, %153\l  %159 = tail call i32 @llvm.fshr.i32(i32 %152, i32 %145, i32 %158)\l  %160 = lshr i32 %159, 9\l  %161 = or i32 %157, %160\l  %162 = or i32 %161, %138\l  %163 = bitcast i32 %162 to float\l  %164 = fneg float %154\l  %165 = tail call float @llvm.fma.f32(float %151, float 0x3FF921FB40000000,\l... float %164)\l  %166 = tail call float @llvm.fma.f32(float %151, float 0x3E74442D00000000,\l... float %165)\l  %167 = tail call float @llvm.fma.f32(float %163, float 0x3FF921FB40000000,\l... float %166)\l  %168 = fadd float %154, %167\l  %169 = lshr i32 %129, 30\l  %170 = add nuw nsw i32 %136, %169\l  br label %171\l}"];
	Node0x4c65dc0 -> Node0x4c64520;
	Node0x4c64520 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%171:\l171:                                              \l  %172 = phi float [ %63, %58 ], [ %168, %65 ]\l  %173 = phi i32 [ %64, %58 ], [ %170, %65 ]\l  %174 = mul i32 %22, %9\l  %175 = mul i32 %23, %9\l  %176 = icmp ugt i32 %12, %175\l  %177 = zext i1 %176 to i32\l  %178 = add i32 %23, %177\l  %179 = mul i32 %174, %178\l  %180 = add i32 %179, %14\l  %181 = fmul float %172, %172\l  %182 = tail call float @llvm.fmuladd.f32(float %181, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %183 = tail call float @llvm.fmuladd.f32(float %181, float %182, float\l... 0xBFC55553A0000000)\l  %184 = fmul float %181, %183\l  %185 = tail call float @llvm.fmuladd.f32(float %172, float %184, float %172)\l  %186 = tail call float @llvm.fmuladd.f32(float %181, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %187 = tail call float @llvm.fmuladd.f32(float %181, float %186, float\l... 0x3FA5557EE0000000)\l  %188 = tail call float @llvm.fmuladd.f32(float %181, float %187, float\l... 0xBFE0000080000000)\l  %189 = tail call float @llvm.fmuladd.f32(float %181, float %188, float\l... 1.000000e+00)\l  %190 = fneg float %185\l  %191 = and i32 %173, 1\l  %192 = icmp eq i32 %191, 0\l  %193 = select i1 %192, float %189, float %190\l  %194 = bitcast float %193 to i32\l  %195 = shl i32 %173, 30\l  %196 = and i32 %195, -2147483648\l  %197 = xor i32 %196, %194\l  %198 = bitcast i32 %197 to float\l  %199 = tail call i1 @llvm.amdgcn.class.f32(float %56, i32 504)\l  %200 = fmul contract float %198, 1.270000e+02\l  %201 = select i1 %199, float %200, float 0x7FF8000000000000\l  %202 = fadd contract float %52, 1.000000e+00\l  %203 = fdiv contract float %201, %202\l  %204 = fadd contract float %203, 1.280000e+02\l  %205 = fptoui float %204 to i8\l  %206 = shl nsw i32 %180, 2\l  %207 = sext i32 %206 to i64\l  %208 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %207\l  store i8 %205, i8 addrspace(1)* %208, align 1, !tbaa !17\l  %209 = add nuw nsw i32 %206, 1\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %210\l  store i8 %205, i8 addrspace(1)* %211, align 1, !tbaa !17\l  %212 = add nuw nsw i32 %206, 2\l  %213 = sext i32 %212 to i64\l  %214 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %213\l  store i8 %205, i8 addrspace(1)* %214, align 1, !tbaa !17\l  %215 = add nuw nsw i32 %206, 3\l  %216 = sext i32 %215 to i64\l  %217 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %216\l  store i8 -1, i8 addrspace(1)* %217, align 1, !tbaa !17\l  ret void\l}"];
}
