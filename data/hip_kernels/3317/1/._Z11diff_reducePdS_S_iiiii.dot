digraph "CFG for '_Z11diff_reducePdS_S_iiiii' function" {
	label="CFG for '_Z11diff_reducePdS_S_iiiii' function";

	Node0x5728530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 2, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %25 = add i32 %23, %24\l  %26 = mul nsw i32 %17, %3\l  %27 = mul nsw i32 %25, %3\l  %28 = mul nsw i32 %17, %4\l  %29 = mul nsw i32 %25, %4\l  %30 = icmp ne i32 %17, %25\l  %31 = icmp slt i32 %17, %7\l  %32 = select i1 %30, i1 %31, i1 false\l  %33 = icmp slt i32 %25, %7\l  %34 = select i1 %32, i1 %33, i1 false\l  br i1 %34, label %35, label %361\l|{<s0>T|<s1>F}}"];
	Node0x5728530:s0 -> Node0x572a350;
	Node0x5728530:s1 -> Node0x572c4b0;
	Node0x572a350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%35:\l35:                                               \l  %36 = icmp sgt i32 %3, 0\l  br i1 %36, label %37, label %65\l|{<s0>T|<s1>F}}"];
	Node0x572a350:s0 -> Node0x572c680;
	Node0x572a350:s1 -> Node0x572c6d0;
	Node0x572c680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = and i32 %3, 7\l  %39 = icmp ult i32 %3, 8\l  br i1 %39, label %42, label %40\l|{<s0>T|<s1>F}}"];
	Node0x572c680:s0 -> Node0x572c990;
	Node0x572c680:s1 -> Node0x572c9e0;
	Node0x572c9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%40:\l40:                                               \l  %41 = and i32 %3, -8\l  br label %73\l}"];
	Node0x572c9e0 -> Node0x572cbe0;
	Node0x572c990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%42:\l42:                                               \l  %43 = phi double [ undef, %37 ], [ %171, %73 ]\l  %44 = phi i32 [ 0, %37 ], [ %172, %73 ]\l  %45 = phi double [ 0.000000e+00, %37 ], [ %171, %73 ]\l  %46 = icmp eq i32 %38, 0\l  br i1 %46, label %65, label %47\l|{<s0>T|<s1>F}}"];
	Node0x572c990:s0 -> Node0x572c6d0;
	Node0x572c990:s1 -> Node0x572de50;
	Node0x572de50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi i32 [ %62, %47 ], [ %44, %42 ]\l  %49 = phi double [ %61, %47 ], [ %45, %42 ]\l  %50 = phi i32 [ %63, %47 ], [ 0, %42 ]\l  %51 = add nsw i32 %48, %26\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %1, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = add nsw i32 %48, %27\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %1, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = fsub contract double %54, %58\l  %60 = fmul contract double %59, %59\l  %61 = fadd contract double %49, %60\l  %62 = add nuw nsw i32 %48, 1\l  %63 = add i32 %50, 1\l  %64 = icmp eq i32 %63, %38\l  br i1 %64, label %65, label %47, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x572de50:s0 -> Node0x572c6d0;
	Node0x572de50:s1 -> Node0x572de50;
	Node0x572c6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%65:\l65:                                               \l  %66 = phi double [ 0.000000e+00, %35 ], [ %43, %42 ], [ %61, %47 ]\l  %67 = icmp sgt i32 %4, 0\l  br i1 %67, label %68, label %300\l|{<s0>T|<s1>F}}"];
	Node0x572c6d0:s0 -> Node0x572c370;
	Node0x572c6d0:s1 -> Node0x572e190;
	Node0x572c370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%68:\l68:                                               \l  %69 = and i32 %4, 7\l  %70 = icmp ult i32 %4, 8\l  br i1 %70, label %277, label %71\l|{<s0>T|<s1>F}}"];
	Node0x572c370:s0 -> Node0x572f9a0;
	Node0x572c370:s1 -> Node0x572f9f0;
	Node0x572f9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%71:\l71:                                               \l  %72 = and i32 %4, -8\l  br label %175\l}"];
	Node0x572f9f0 -> Node0x572fbc0;
	Node0x572cbe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%73:\l73:                                               \l  %74 = phi i32 [ 0, %40 ], [ %172, %73 ]\l  %75 = phi double [ 0.000000e+00, %40 ], [ %171, %73 ]\l  %76 = phi i32 [ 0, %40 ], [ %173, %73 ]\l  %77 = add nsw i32 %74, %26\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %1, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = add nsw i32 %74, %27\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds double, double addrspace(1)* %1, i64 %82\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fsub contract double %80, %84\l  %86 = fmul contract double %85, %85\l  %87 = fadd contract double %75, %86\l  %88 = or i32 %74, 1\l  %89 = add nsw i32 %88, %26\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %1, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = add nsw i32 %88, %27\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds double, double addrspace(1)* %1, i64 %94\l  %96 = load double, double addrspace(1)* %95, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fsub contract double %92, %96\l  %98 = fmul contract double %97, %97\l  %99 = fadd contract double %87, %98\l  %100 = or i32 %74, 2\l  %101 = add nsw i32 %100, %26\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %1, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = add nsw i32 %100, %27\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %1, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fsub contract double %104, %108\l  %110 = fmul contract double %109, %109\l  %111 = fadd contract double %99, %110\l  %112 = or i32 %74, 3\l  %113 = add nsw i32 %112, %26\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %1, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = add nsw i32 %112, %27\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds double, double addrspace(1)* %1, i64 %118\l  %120 = load double, double addrspace(1)* %119, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %121 = fsub contract double %116, %120\l  %122 = fmul contract double %121, %121\l  %123 = fadd contract double %111, %122\l  %124 = or i32 %74, 4\l  %125 = add nsw i32 %124, %26\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds double, double addrspace(1)* %1, i64 %126\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = add nsw i32 %124, %27\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds double, double addrspace(1)* %1, i64 %130\l  %132 = load double, double addrspace(1)* %131, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fsub contract double %128, %132\l  %134 = fmul contract double %133, %133\l  %135 = fadd contract double %123, %134\l  %136 = or i32 %74, 5\l  %137 = add nsw i32 %136, %26\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds double, double addrspace(1)* %1, i64 %138\l  %140 = load double, double addrspace(1)* %139, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %141 = add nsw i32 %136, %27\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds double, double addrspace(1)* %1, i64 %142\l  %144 = load double, double addrspace(1)* %143, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = fsub contract double %140, %144\l  %146 = fmul contract double %145, %145\l  %147 = fadd contract double %135, %146\l  %148 = or i32 %74, 6\l  %149 = add nsw i32 %148, %26\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds double, double addrspace(1)* %1, i64 %150\l  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %153 = add nsw i32 %148, %27\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds double, double addrspace(1)* %1, i64 %154\l  %156 = load double, double addrspace(1)* %155, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %157 = fsub contract double %152, %156\l  %158 = fmul contract double %157, %157\l  %159 = fadd contract double %147, %158\l  %160 = or i32 %74, 7\l  %161 = add nsw i32 %160, %26\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds double, double addrspace(1)* %1, i64 %162\l  %164 = load double, double addrspace(1)* %163, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %165 = add nsw i32 %160, %27\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds double, double addrspace(1)* %1, i64 %166\l  %168 = load double, double addrspace(1)* %167, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %169 = fsub contract double %164, %168\l  %170 = fmul contract double %169, %169\l  %171 = fadd contract double %159, %170\l  %172 = add nuw nsw i32 %74, 8\l  %173 = add i32 %76, 8\l  %174 = icmp eq i32 %173, %41\l  br i1 %174, label %42, label %73, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x572cbe0:s0 -> Node0x572c990;
	Node0x572cbe0:s1 -> Node0x572cbe0;
	Node0x572fbc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%175:\l175:                                              \l  %176 = phi i32 [ 0, %71 ], [ %274, %175 ]\l  %177 = phi double [ 0.000000e+00, %71 ], [ %273, %175 ]\l  %178 = phi i32 [ 0, %71 ], [ %275, %175 ]\l  %179 = add nsw i32 %176, %28\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds double, double addrspace(1)* %2, i64 %180\l  %182 = load double, double addrspace(1)* %181, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %183 = add nsw i32 %176, %29\l  %184 = sext i32 %183 to i64\l  %185 = getelementptr inbounds double, double addrspace(1)* %2, i64 %184\l  %186 = load double, double addrspace(1)* %185, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %187 = fsub contract double %182, %186\l  %188 = fmul contract double %187, %187\l  %189 = fadd contract double %177, %188\l  %190 = or i32 %176, 1\l  %191 = add nsw i32 %190, %28\l  %192 = sext i32 %191 to i64\l  %193 = getelementptr inbounds double, double addrspace(1)* %2, i64 %192\l  %194 = load double, double addrspace(1)* %193, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %195 = add nsw i32 %190, %29\l  %196 = sext i32 %195 to i64\l  %197 = getelementptr inbounds double, double addrspace(1)* %2, i64 %196\l  %198 = load double, double addrspace(1)* %197, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %199 = fsub contract double %194, %198\l  %200 = fmul contract double %199, %199\l  %201 = fadd contract double %189, %200\l  %202 = or i32 %176, 2\l  %203 = add nsw i32 %202, %28\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds double, double addrspace(1)* %2, i64 %204\l  %206 = load double, double addrspace(1)* %205, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %207 = add nsw i32 %202, %29\l  %208 = sext i32 %207 to i64\l  %209 = getelementptr inbounds double, double addrspace(1)* %2, i64 %208\l  %210 = load double, double addrspace(1)* %209, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %211 = fsub contract double %206, %210\l  %212 = fmul contract double %211, %211\l  %213 = fadd contract double %201, %212\l  %214 = or i32 %176, 3\l  %215 = add nsw i32 %214, %28\l  %216 = sext i32 %215 to i64\l  %217 = getelementptr inbounds double, double addrspace(1)* %2, i64 %216\l  %218 = load double, double addrspace(1)* %217, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %219 = add nsw i32 %214, %29\l  %220 = sext i32 %219 to i64\l  %221 = getelementptr inbounds double, double addrspace(1)* %2, i64 %220\l  %222 = load double, double addrspace(1)* %221, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %223 = fsub contract double %218, %222\l  %224 = fmul contract double %223, %223\l  %225 = fadd contract double %213, %224\l  %226 = or i32 %176, 4\l  %227 = add nsw i32 %226, %28\l  %228 = sext i32 %227 to i64\l  %229 = getelementptr inbounds double, double addrspace(1)* %2, i64 %228\l  %230 = load double, double addrspace(1)* %229, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %231 = add nsw i32 %226, %29\l  %232 = sext i32 %231 to i64\l  %233 = getelementptr inbounds double, double addrspace(1)* %2, i64 %232\l  %234 = load double, double addrspace(1)* %233, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %235 = fsub contract double %230, %234\l  %236 = fmul contract double %235, %235\l  %237 = fadd contract double %225, %236\l  %238 = or i32 %176, 5\l  %239 = add nsw i32 %238, %28\l  %240 = sext i32 %239 to i64\l  %241 = getelementptr inbounds double, double addrspace(1)* %2, i64 %240\l  %242 = load double, double addrspace(1)* %241, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %243 = add nsw i32 %238, %29\l  %244 = sext i32 %243 to i64\l  %245 = getelementptr inbounds double, double addrspace(1)* %2, i64 %244\l  %246 = load double, double addrspace(1)* %245, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %247 = fsub contract double %242, %246\l  %248 = fmul contract double %247, %247\l  %249 = fadd contract double %237, %248\l  %250 = or i32 %176, 6\l  %251 = add nsw i32 %250, %28\l  %252 = sext i32 %251 to i64\l  %253 = getelementptr inbounds double, double addrspace(1)* %2, i64 %252\l  %254 = load double, double addrspace(1)* %253, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %255 = add nsw i32 %250, %29\l  %256 = sext i32 %255 to i64\l  %257 = getelementptr inbounds double, double addrspace(1)* %2, i64 %256\l  %258 = load double, double addrspace(1)* %257, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %259 = fsub contract double %254, %258\l  %260 = fmul contract double %259, %259\l  %261 = fadd contract double %249, %260\l  %262 = or i32 %176, 7\l  %263 = add nsw i32 %262, %28\l  %264 = sext i32 %263 to i64\l  %265 = getelementptr inbounds double, double addrspace(1)* %2, i64 %264\l  %266 = load double, double addrspace(1)* %265, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %267 = add nsw i32 %262, %29\l  %268 = sext i32 %267 to i64\l  %269 = getelementptr inbounds double, double addrspace(1)* %2, i64 %268\l  %270 = load double, double addrspace(1)* %269, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %271 = fsub contract double %266, %270\l  %272 = fmul contract double %271, %271\l  %273 = fadd contract double %261, %272\l  %274 = add nuw nsw i32 %176, 8\l  %275 = add i32 %178, 8\l  %276 = icmp eq i32 %275, %72\l  br i1 %276, label %277, label %175, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x572fbc0:s0 -> Node0x572f9a0;
	Node0x572fbc0:s1 -> Node0x572fbc0;
	Node0x572f9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%277:\l277:                                              \l  %278 = phi double [ undef, %68 ], [ %273, %175 ]\l  %279 = phi i32 [ 0, %68 ], [ %274, %175 ]\l  %280 = phi double [ 0.000000e+00, %68 ], [ %273, %175 ]\l  %281 = icmp eq i32 %69, 0\l  br i1 %281, label %300, label %282\l|{<s0>T|<s1>F}}"];
	Node0x572f9a0:s0 -> Node0x572e190;
	Node0x572f9a0:s1 -> Node0x5738370;
	Node0x5738370 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%282:\l282:                                              \l  %283 = phi i32 [ %297, %282 ], [ %279, %277 ]\l  %284 = phi double [ %296, %282 ], [ %280, %277 ]\l  %285 = phi i32 [ %298, %282 ], [ 0, %277 ]\l  %286 = add nsw i32 %283, %28\l  %287 = sext i32 %286 to i64\l  %288 = getelementptr inbounds double, double addrspace(1)* %2, i64 %287\l  %289 = load double, double addrspace(1)* %288, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %290 = add nsw i32 %283, %29\l  %291 = sext i32 %290 to i64\l  %292 = getelementptr inbounds double, double addrspace(1)* %2, i64 %291\l  %293 = load double, double addrspace(1)* %292, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %294 = fsub contract double %289, %293\l  %295 = fmul contract double %294, %294\l  %296 = fadd contract double %284, %295\l  %297 = add nuw nsw i32 %283, 1\l  %298 = add i32 %285, 1\l  %299 = icmp eq i32 %298, %69\l  br i1 %299, label %300, label %282, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5738370:s0 -> Node0x572e190;
	Node0x5738370:s1 -> Node0x5738370;
	Node0x572e190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%300:\l300:                                              \l  %301 = phi double [ 0.000000e+00, %65 ], [ %278, %277 ], [ %296, %282 ]\l  %302 = fneg contract double %66\l  %303 = mul nsw i32 %5, %3\l  %304 = mul nsw i32 %303, %5\l  %305 = sitofp i32 %304 to double\l  %306 = fdiv contract double %302, %305\l  %307 = fmul double %306, 0x3FF71547652B82FE\l  %308 = tail call double @llvm.rint.f64(double %307)\l  %309 = fneg double %308\l  %310 = tail call double @llvm.fma.f64(double %309, double\l... 0x3FE62E42FEFA39EF, double %306)\l  %311 = tail call double @llvm.fma.f64(double %309, double\l... 0x3C7ABC9E3B39803F, double %310)\l  %312 = tail call double @llvm.fma.f64(double %311, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %313 = tail call double @llvm.fma.f64(double %311, double %312, double\l... 0x3EC71DEE623FDE64)\l  %314 = tail call double @llvm.fma.f64(double %311, double %313, double\l... 0x3EFA01997C89E6B0)\l  %315 = tail call double @llvm.fma.f64(double %311, double %314, double\l... 0x3F2A01A014761F6E)\l  %316 = tail call double @llvm.fma.f64(double %311, double %315, double\l... 0x3F56C16C1852B7B0)\l  %317 = tail call double @llvm.fma.f64(double %311, double %316, double\l... 0x3F81111111122322)\l  %318 = tail call double @llvm.fma.f64(double %311, double %317, double\l... 0x3FA55555555502A1)\l  %319 = tail call double @llvm.fma.f64(double %311, double %318, double\l... 0x3FC5555555555511)\l  %320 = tail call double @llvm.fma.f64(double %311, double %319, double\l... 0x3FE000000000000B)\l  %321 = tail call double @llvm.fma.f64(double %311, double %320, double\l... 1.000000e+00)\l  %322 = tail call double @llvm.fma.f64(double %311, double %321, double\l... 1.000000e+00)\l  %323 = fptosi double %308 to i32\l  %324 = tail call double @llvm.amdgcn.ldexp.f64(double %322, i32 %323)\l  %325 = fcmp ogt double %306, 1.024000e+03\l  %326 = select i1 %325, double 0x7FF0000000000000, double %324\l  %327 = fcmp olt double %306, -1.075000e+03\l  %328 = select i1 %327, double 0.000000e+00, double %326\l  %329 = fneg contract double %301\l  %330 = mul nsw i32 %6, %4\l  %331 = mul nsw i32 %330, %6\l  %332 = sitofp i32 %331 to double\l  %333 = fdiv contract double %329, %332\l  %334 = fmul double %333, 0x3FF71547652B82FE\l  %335 = tail call double @llvm.rint.f64(double %334)\l  %336 = fneg double %335\l  %337 = tail call double @llvm.fma.f64(double %336, double\l... 0x3FE62E42FEFA39EF, double %333)\l  %338 = tail call double @llvm.fma.f64(double %336, double\l... 0x3C7ABC9E3B39803F, double %337)\l  %339 = tail call double @llvm.fma.f64(double %338, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %340 = tail call double @llvm.fma.f64(double %338, double %339, double\l... 0x3EC71DEE623FDE64)\l  %341 = tail call double @llvm.fma.f64(double %338, double %340, double\l... 0x3EFA01997C89E6B0)\l  %342 = tail call double @llvm.fma.f64(double %338, double %341, double\l... 0x3F2A01A014761F6E)\l  %343 = tail call double @llvm.fma.f64(double %338, double %342, double\l... 0x3F56C16C1852B7B0)\l  %344 = tail call double @llvm.fma.f64(double %338, double %343, double\l... 0x3F81111111122322)\l  %345 = tail call double @llvm.fma.f64(double %338, double %344, double\l... 0x3FA55555555502A1)\l  %346 = tail call double @llvm.fma.f64(double %338, double %345, double\l... 0x3FC5555555555511)\l  %347 = tail call double @llvm.fma.f64(double %338, double %346, double\l... 0x3FE000000000000B)\l  %348 = tail call double @llvm.fma.f64(double %338, double %347, double\l... 1.000000e+00)\l  %349 = tail call double @llvm.fma.f64(double %338, double %348, double\l... 1.000000e+00)\l  %350 = fptosi double %335 to i32\l  %351 = tail call double @llvm.amdgcn.ldexp.f64(double %349, i32 %350)\l  %352 = fcmp ogt double %333, 1.024000e+03\l  %353 = select i1 %352, double 0x7FF0000000000000, double %351\l  %354 = fcmp olt double %333, -1.075000e+03\l  %355 = select i1 %354, double 0.000000e+00, double %353\l  %356 = fmul contract double %328, %355\l  %357 = mul nsw i32 %25, %7\l  %358 = add nsw i32 %357, %17\l  %359 = sext i32 %358 to i64\l  %360 = getelementptr inbounds double, double addrspace(1)* %0, i64 %359\l  store double %356, double addrspace(1)* %360, align 8, !tbaa !7\l  br label %361\l}"];
	Node0x572e190 -> Node0x572c4b0;
	Node0x572c4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%361:\l361:                                              \l  ret void\l}"];
}
