digraph "CFG for '_Z7upscalePfS_liiiiiii' function" {
	label="CFG for '_Z7upscalePfS_liiiiiii' function";

	Node0x5800ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !7\l  %21 = mul i32 %13, %17\l  %22 = add i32 %21, %11\l  %23 = zext i32 %22 to i64\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %26 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = udiv i32 %20, %17\l  %31 = mul i32 %30, %17\l  %32 = icmp ugt i32 %20, %31\l  %33 = zext i1 %32 to i32\l  %34 = add i32 %30, %33\l  %35 = mul i32 %25, %17\l  %36 = mul i32 %35, %29\l  %37 = mul i32 %36, %34\l  %38 = add i32 %37, %24\l  %39 = zext i32 %38 to i64\l  %40 = add nuw nsw i64 %39, %23\l  %41 = icmp slt i64 %40, %2\l  br i1 %41, label %42, label %74\l|{<s0>T|<s1>F}}"];
	Node0x5800ea0:s0 -> Node0x5805cc0;
	Node0x5800ea0:s1 -> Node0x5805d50;
	Node0x5805cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%42:\l42:                                               \l  %43 = trunc i64 %40 to i32\l  %44 = freeze i32 %43\l  %45 = freeze i32 %9\l  %46 = sdiv i32 %44, %45\l  %47 = mul i32 %46, %45\l  %48 = sub i32 %44, %47\l  %49 = freeze i32 %8\l  %50 = sdiv i32 %46, %49\l  %51 = mul i32 %50, %49\l  %52 = sub i32 %46, %51\l  %53 = freeze i32 %7\l  %54 = sdiv i32 %50, %53\l  %55 = mul i32 %54, %53\l  %56 = sub i32 %50, %55\l  %57 = freeze i32 %54\l  %58 = sdiv i32 %48, %5\l  %59 = sdiv i32 %52, %4\l  %60 = sdiv i32 %56, %3\l  %61 = sdiv i32 %7, %3\l  %62 = sdiv i32 %8, %4\l  %63 = sdiv i32 %9, %5\l  %64 = mul nsw i32 %61, %57\l  %65 = add nsw i32 %64, %60\l  %66 = mul nsw i32 %65, %62\l  %67 = add nsw i32 %66, %59\l  %68 = mul nsw i32 %67, %63\l  %69 = add nsw i32 %68, %58\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40\l  store float %72, float addrspace(1)* %73, align 4, !tbaa !16\l  br label %74\l}"];
	Node0x5805cc0 -> Node0x5805d50;
	Node0x5805d50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%74:\l74:                                               \l  ret void\l}"];
}
