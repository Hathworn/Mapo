digraph "CFG for '_Z9downscalePfS_liiiiiii' function" {
	label="CFG for '_Z9downscalePfS_liiiiiii' function";

	Node0x5b75da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !7\l  %21 = mul i32 %13, %17\l  %22 = add i32 %21, %11\l  %23 = zext i32 %22 to i64\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %26 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = udiv i32 %20, %17\l  %31 = mul i32 %30, %17\l  %32 = icmp ugt i32 %20, %31\l  %33 = zext i1 %32 to i32\l  %34 = add i32 %30, %33\l  %35 = mul i32 %25, %17\l  %36 = mul i32 %35, %29\l  %37 = mul i32 %36, %34\l  %38 = add i32 %37, %24\l  %39 = zext i32 %38 to i64\l  %40 = add nuw nsw i64 %39, %23\l  %41 = icmp slt i64 %40, %2\l  %42 = icmp sgt i32 %3, 0\l  %43 = select i1 %41, i1 %42, i1 false\l  br i1 %43, label %44, label %151\l|{<s0>T|<s1>F}}"];
	Node0x5b75da0:s0 -> Node0x5b7ad20;
	Node0x5b75da0:s1 -> Node0x5b7adb0;
	Node0x5b7ad20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%44:\l44:                                               \l  %45 = icmp sgt i32 %4, 0\l  %46 = icmp sgt i32 %5, 0\l  %47 = trunc i64 %40 to i32\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %49 = and i32 %5, 3\l  %50 = icmp ult i32 %5, 4\l  %51 = and i32 %5, -4\l  %52 = icmp eq i32 %49, 0\l  br label %53\l}"];
	Node0x5b7ad20 -> Node0x5b7b3f0;
	Node0x5b7b3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%53:\l53:                                               \l  %54 = phi i32 [ 0, %44 ], [ %81, %80 ]\l  br i1 %45, label %55, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5b7b3f0:s0 -> Node0x5b7b620;
	Node0x5b7b3f0:s1 -> Node0x5b7b4e0;
	Node0x5b7b620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%55:\l55:                                               \l  %56 = phi i32 [ %103, %102 ], [ 0, %53 ]\l  br i1 %46, label %57, label %102\l|{<s0>T|<s1>F}}"];
	Node0x5b7b620:s0 -> Node0x5b7b8d0;
	Node0x5b7b620:s1 -> Node0x5b7b790;
	Node0x5b7b8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%57:\l57:                                               \l  %58 = freeze i32 %47\l  %59 = freeze i32 %9\l  %60 = sdiv i32 %58, %59\l  %61 = mul i32 %60, %59\l  %62 = sub i32 %58, %61\l  %63 = freeze i32 %8\l  %64 = sdiv i32 %60, %63\l  %65 = mul i32 %64, %63\l  %66 = sub i32 %60, %65\l  %67 = freeze i32 %7\l  %68 = sdiv i32 %64, %67\l  %69 = mul i32 %68, %67\l  %70 = sub i32 %64, %69\l  %71 = freeze i32 %68\l  %72 = mul i32 %71, %7\l  %73 = add i32 %72, %70\l  %74 = mul i32 %73, %3\l  %75 = add i32 %74, %54\l  %76 = mul i32 %75, %8\l  %77 = add i32 %76, %66\l  %78 = mul i32 %77, %4\l  %79 = load float, float addrspace(1)* %48, align 4, !tbaa !16\l  br i1 %50, label %83, label %105\l|{<s0>T|<s1>F}}"];
	Node0x5b7b8d0:s0 -> Node0x5b7c900;
	Node0x5b7b8d0:s1 -> Node0x5b7c950;
	Node0x5b7b4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%80:\l80:                                               \l  %81 = add nuw nsw i32 %54, 1\l  %82 = icmp eq i32 %81, %3\l  br i1 %82, label %151, label %53, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5b7b4e0:s0 -> Node0x5b7adb0;
	Node0x5b7b4e0:s1 -> Node0x5b7b3f0;
	Node0x5b7c900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%83:\l83:                                               \l  %84 = phi float [ %79, %57 ], [ %147, %105 ]\l  %85 = phi i32 [ 0, %57 ], [ %148, %105 ]\l  br i1 %52, label %102, label %86\l|{<s0>T|<s1>F}}"];
	Node0x5b7c900:s0 -> Node0x5b7b790;
	Node0x5b7c900:s1 -> Node0x5b7cf20;
	Node0x5b7cf20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%86:\l86:                                               \l  %87 = phi float [ %98, %86 ], [ %84, %83 ]\l  %88 = phi i32 [ %99, %86 ], [ %85, %83 ]\l  %89 = phi i32 [ %100, %86 ], [ 0, %83 ]\l  %90 = add i32 %78, %88\l  %91 = mul i32 %90, %9\l  %92 = add i32 %91, %62\l  %93 = mul i32 %92, %5\l  %94 = add i32 %93, %56\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16\l  %98 = fadd contract float %97, %87\l  store float %98, float addrspace(1)* %48, align 4, !tbaa !16\l  %99 = add nuw nsw i32 %88, 1\l  %100 = add i32 %89, 1\l  %101 = icmp eq i32 %100, %49\l  br i1 %101, label %102, label %86, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5b7cf20:s0 -> Node0x5b7b790;
	Node0x5b7cf20:s1 -> Node0x5b7cf20;
	Node0x5b7b790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%102:\l102:                                              \l  %103 = add nuw nsw i32 %56, 1\l  %104 = icmp eq i32 %103, %4\l  br i1 %104, label %80, label %55, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5b7b790:s0 -> Node0x5b7b4e0;
	Node0x5b7b790:s1 -> Node0x5b7b620;
	Node0x5b7c950 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%105:\l105:                                              \l  %106 = phi float [ %147, %105 ], [ %79, %57 ]\l  %107 = phi i32 [ %148, %105 ], [ 0, %57 ]\l  %108 = phi i32 [ %149, %105 ], [ 0, %57 ]\l  %109 = add i32 %78, %107\l  %110 = mul i32 %109, %9\l  %111 = add i32 %110, %62\l  %112 = mul i32 %111, %5\l  %113 = add i32 %112, %56\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %1, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !16\l  %117 = fadd contract float %116, %106\l  store float %117, float addrspace(1)* %48, align 4, !tbaa !16\l  %118 = or i32 %107, 1\l  %119 = add i32 %78, %118\l  %120 = mul i32 %119, %9\l  %121 = add i32 %120, %62\l  %122 = mul i32 %121, %5\l  %123 = add i32 %122, %56\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = fadd contract float %126, %117\l  store float %127, float addrspace(1)* %48, align 4, !tbaa !16\l  %128 = or i32 %107, 2\l  %129 = add i32 %78, %128\l  %130 = mul i32 %129, %9\l  %131 = add i32 %130, %62\l  %132 = mul i32 %131, %5\l  %133 = add i32 %132, %56\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %1, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16\l  %137 = fadd contract float %136, %127\l  store float %137, float addrspace(1)* %48, align 4, !tbaa !16\l  %138 = or i32 %107, 3\l  %139 = add i32 %78, %138\l  %140 = mul i32 %139, %9\l  %141 = add i32 %140, %62\l  %142 = mul i32 %141, %5\l  %143 = add i32 %142, %56\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16\l  %147 = fadd contract float %146, %137\l  store float %147, float addrspace(1)* %48, align 4, !tbaa !16\l  %148 = add nuw nsw i32 %107, 4\l  %149 = add i32 %108, 4\l  %150 = icmp eq i32 %149, %51\l  br i1 %150, label %83, label %105, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5b7c950:s0 -> Node0x5b7c900;
	Node0x5b7c950:s1 -> Node0x5b7c950;
	Node0x5b7adb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%151:\l151:                                              \l  ret void\l}"];
}
