digraph "CFG for '_Z4updZPfS_ffii' function" {
	label="CFG for '_Z4updZPfS_ffii' function";

	Node0x633d160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = mul nsw i32 %23, %4\l  %25 = add nsw i32 %24, %15\l  %26 = icmp slt i32 %15, %4\l  %27 = icmp slt i32 %23, %5\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %98\l|{<s0>T|<s1>F}}"];
	Node0x633d160:s0 -> Node0x6340d40;
	Node0x633d160:s1 -> Node0x6340dd0;
	Node0x6340d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%29:\l29:                                               \l  %30 = add nsw i32 %4, -1\l  %31 = icmp slt i32 %15, %30\l  br i1 %31, label %32, label %41\l|{<s0>T|<s1>F}}"];
	Node0x6340d40:s0 -> Node0x6341060;
	Node0x6340d40:s1 -> Node0x63410b0;
	Node0x6341060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%32:\l32:                                               \l  %33 = add nsw i32 %25, 1\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %1, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = sext i32 %25 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fsub contract float %36, %39\l  br label %41\l}"];
	Node0x6341060 -> Node0x63410b0;
	Node0x63410b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%41:\l41:                                               \l  %42 = phi float [ %40, %32 ], [ 0.000000e+00, %29 ]\l  %43 = add nsw i32 %5, -1\l  %44 = icmp slt i32 %23, %43\l  br i1 %44, label %45, label %54\l|{<s0>T|<s1>F}}"];
	Node0x63410b0:s0 -> Node0x6342b60;
	Node0x63410b0:s1 -> Node0x6342bf0;
	Node0x6342b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%45:\l45:                                               \l  %46 = add nsw i32 %25, %4\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %1, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %50 = sext i32 %25 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fsub contract float %49, %52\l  br label %54\l}"];
	Node0x6342b60 -> Node0x6342bf0;
	Node0x6342bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%54:\l54:                                               \l  %55 = phi float [ %53, %45 ], [ 0.000000e+00, %41 ]\l  %56 = shl nsw i32 %25, 1\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fmul contract float %42, %2\l  %61 = fadd contract float %60, %59\l  %62 = add nuw nsw i32 %56, 1\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = fmul contract float %55, %2\l  %67 = fadd contract float %66, %65\l  %68 = fmul contract float %61, %61\l  %69 = fadd contract float %68, %3\l  %70 = fmul contract float %67, %67\l  %71 = fadd contract float %69, %70\l  %72 = fcmp olt float %71, 0x39F0000000000000\l  %73 = select i1 %72, float 0x41F0000000000000, float 1.000000e+00\l  %74 = fmul float %71, %73\l  %75 = tail call float @llvm.sqrt.f32(float %74)\l  %76 = bitcast float %75 to i32\l  %77 = add nsw i32 %76, -1\l  %78 = bitcast i32 %77 to float\l  %79 = add nsw i32 %76, 1\l  %80 = bitcast i32 %79 to float\l  %81 = tail call i1 @llvm.amdgcn.class.f32(float %74, i32 608)\l  %82 = select i1 %72, float 0x3EF0000000000000, float 1.000000e+00\l  %83 = fneg float %80\l  %84 = tail call float @llvm.fma.f32(float %83, float %75, float %74)\l  %85 = fcmp ogt float %84, 0.000000e+00\l  %86 = fneg float %78\l  %87 = tail call float @llvm.fma.f32(float %86, float %75, float %74)\l  %88 = fcmp ole float %87, 0.000000e+00\l  %89 = select i1 %88, float %78, float %75\l  %90 = select i1 %85, float %80, float %89\l  %91 = fmul float %82, %90\l  %92 = select i1 %81, float %74, float %91\l  %93 = fcmp contract olt float %92, 1.000000e+00\l  %94 = fdiv contract float 1.000000e+00, %92\l  %95 = select i1 %93, float 1.000000e+00, float %94\l  %96 = fmul contract float %61, %95\l  store float %96, float addrspace(1)* %58, align 4, !tbaa !7\l  %97 = fmul contract float %67, %95\l  store float %97, float addrspace(1)* %64, align 4, !tbaa !7\l  br label %98\l}"];
	Node0x6342bf0 -> Node0x6340dd0;
	Node0x6340dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%98:\l98:                                               \l  ret void\l}"];
}
