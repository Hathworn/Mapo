digraph "CFG for '_Z13zupdate_interPffii' function" {
	label="CFG for '_Z13zupdate_interPffii' function";

	Node0x4d971f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = mul nsw i32 %21, %2\l  %23 = add nsw i32 %22, %13\l  %24 = icmp slt i32 %13, %2\l  %25 = icmp slt i32 %21, %3\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %103\l|{<s0>T|<s1>F}}"];
	Node0x4d971f0:s0 -> Node0x4d9ad80;
	Node0x4d971f0:s1 -> Node0x4d9ae10;
	Node0x4d9ad80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%27:\l27:                                               \l  %28 = add nsw i32 %2, -1\l  %29 = icmp slt i32 %13, %28\l  br i1 %29, label %30, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4d9ad80:s0 -> Node0x4d9b0a0;
	Node0x4d9ad80:s1 -> Node0x4d9b0f0;
	Node0x4d9b0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%30:\l30:                                               \l  %31 = mul i32 %23, 3\l  %32 = add i32 %31, 5\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = add nsw i32 %31, 2\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fsub contract float %35, %39\l  br label %41\l}"];
	Node0x4d9b0a0 -> Node0x4d9b0f0;
	Node0x4d9b0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%41:\l41:                                               \l  %42 = phi float [ %40, %30 ], [ 0.000000e+00, %27 ]\l  %43 = add nsw i32 %3, -1\l  %44 = icmp slt i32 %21, %43\l  br i1 %44, label %47, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4d9b0f0:s0 -> Node0x4d9cd20;
	Node0x4d9b0f0:s1 -> Node0x4d9cdb0;
	Node0x4d9cdb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%45:\l45:                                               \l  %46 = mul nsw i32 %23, 3\l  br label %60\l}"];
	Node0x4d9cdb0 -> Node0x4d9cf80;
	Node0x4d9cd20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%47:\l47:                                               \l  %48 = add nsw i32 %23, %2\l  %49 = mul nsw i32 %48, 3\l  %50 = add nsw i32 %49, 2\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = mul nsw i32 %23, 3\l  %55 = add nsw i32 %54, 2\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = fsub contract float %53, %58\l  br label %60\l}"];
	Node0x4d9cd20 -> Node0x4d9cf80;
	Node0x4d9cf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%60:\l60:                                               \l  %61 = phi i32 [ %46, %45 ], [ %54, %47 ]\l  %62 = phi float [ 0.000000e+00, %45 ], [ %59, %47 ]\l  %63 = fmul contract float %42, %42\l  %64 = fmul contract float %62, %62\l  %65 = fadd contract float %63, %64\l  %66 = fcmp olt float %65, 0x39F0000000000000\l  %67 = select i1 %66, float 0x41F0000000000000, float 1.000000e+00\l  %68 = fmul float %65, %67\l  %69 = tail call float @llvm.sqrt.f32(float %68)\l  %70 = bitcast float %69 to i32\l  %71 = add nsw i32 %70, -1\l  %72 = bitcast i32 %71 to float\l  %73 = add nsw i32 %70, 1\l  %74 = bitcast i32 %73 to float\l  %75 = tail call i1 @llvm.amdgcn.class.f32(float %68, i32 608)\l  %76 = select i1 %66, float 0x3EF0000000000000, float 1.000000e+00\l  %77 = fneg float %74\l  %78 = tail call float @llvm.fma.f32(float %77, float %69, float %68)\l  %79 = fcmp ogt float %78, 0.000000e+00\l  %80 = fneg float %72\l  %81 = tail call float @llvm.fma.f32(float %80, float %69, float %68)\l  %82 = fcmp ole float %81, 0.000000e+00\l  %83 = select i1 %82, float %72, float %69\l  %84 = select i1 %79, float %74, float %83\l  %85 = fmul float %76, %84\l  %86 = select i1 %75, float %68, float %85\l  %87 = fmul contract float %86, %1\l  %88 = fadd contract float %87, 1.000000e+00\l  %89 = fdiv contract float 1.000000e+00, %88\l  %90 = sext i32 %61 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = fmul contract float %42, %1\l  %94 = fadd contract float %93, %92\l  %95 = fmul contract float %94, %89\l  store float %95, float addrspace(1)* %91, align 4, !tbaa !7\l  %96 = add nsw i32 %61, 1\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fmul contract float %62, %1\l  %101 = fadd contract float %100, %99\l  %102 = fmul contract float %101, %89\l  store float %102, float addrspace(1)* %98, align 4, !tbaa !7\l  br label %103\l}"];
	Node0x4d9cf80 -> Node0x4d9ae10;
	Node0x4d9ae10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%103:\l103:                                              \l  ret void\l}"];
}
