digraph "CFG for '_Z10force_calcPfiiS_S_S_iiPif' function" {
	label="CFG for '_Z10force_calcPfiiS_S_S_iiPif' function";

	Node0x56db9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = icmp ult i32 %11, %1\l  %13 = icmp slt i32 %11, %1\l  %14 = and i1 %12, %13\l  br i1 %14, label %15, label %95\l|{<s0>T|<s1>F}}"];
	Node0x56db9d0:s0 -> Node0x56dc930;
	Node0x56db9d0:s1 -> Node0x56dc9c0;
	Node0x56dc930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%15:\l15:                                               \l  %16 = sdiv i32 %7, 2\l  %17 = icmp sgt i32 %7, 1\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x()\l  %19 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = icmp eq i32 %18, 0\l  %23 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 12\l  %24 = bitcast i8 addrspace(4)* %23 to i32 addrspace(4)*\l  %25 = load i32, i32 addrspace(4)* %24, align 4, !tbaa !4\l  %26 = load i16, i16 addrspace(4)* %21, align 4, !range !13, !invariant.load\l... !14\l  %27 = zext i16 %26 to i32\l  %28 = udiv i32 %25, %27\l  %29 = mul i32 %28, %27\l  %30 = icmp ugt i32 %25, %29\l  %31 = zext i1 %30 to i32\l  br label %32\l}"];
	Node0x56dc930 -> Node0x56dec70;
	Node0x56dec70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%32:\l32:                                               \l  %33 = phi i32 [ %11, %15 ], [ %93, %91 ]\l  br i1 %17, label %35, label %34\l|{<s0>T|<s1>F}}"];
	Node0x56dec70:s0 -> Node0x56defe0;
	Node0x56dec70:s1 -> Node0x56df070;
	Node0x56df070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%34:\l34:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %22, label %67, label %91\l|{<s0>T|<s1>F}}"];
	Node0x56df070:s0 -> Node0x56df460;
	Node0x56df070:s1 -> Node0x56dd1a0;
	Node0x56defe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%35:\l35:                                               \l  %36 = phi i32 [ %41, %40 ], [ %16, %32 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %37 = icmp slt i32 %18, %36\l  br i1 %37, label %38, label %40\l|{<s0>T|<s1>F}}"];
	Node0x56defe0:s0 -> Node0x56df950;
	Node0x56defe0:s1 -> Node0x56df560;
	Node0x56df950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%38:\l38:                                               \l  %39 = mul nsw i32 %36, %6\l  br label %43\l}"];
	Node0x56df950 -> Node0x56dfae0;
	Node0x56df560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%40:\l40:                                               \l  %41 = ashr i32 %36, 1\l  %42 = icmp sgt i32 %36, 1\l  br i1 %42, label %35, label %34, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56df560:s0 -> Node0x56defe0;
	Node0x56df560:s1 -> Node0x56df070;
	Node0x56dfae0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %18, %38 ], [ %65, %43 ]\l  %45 = mul nsw i32 %44, %6\l  %46 = add nsw i32 %45, %33\l  %47 = add nsw i32 %46, %39\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %3, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !17\l  %51 = sext i32 %46 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %3, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !17\l  %54 = fadd contract float %50, %53\l  store float %54, float addrspace(1)* %52, align 4, !tbaa !17\l  %55 = getelementptr inbounds float, float addrspace(1)* %4, i64 %48\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !17\l  %57 = getelementptr inbounds float, float addrspace(1)* %4, i64 %51\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !17\l  %59 = fadd contract float %56, %58\l  store float %59, float addrspace(1)* %57, align 4, !tbaa !17\l  %60 = getelementptr inbounds float, float addrspace(1)* %5, i64 %48\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !17\l  %62 = getelementptr inbounds float, float addrspace(1)* %5, i64 %51\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !17\l  %64 = fadd contract float %61, %63\l  store float %64, float addrspace(1)* %62, align 4, !tbaa !17\l  %65 = add nsw i32 %44, %27\l  %66 = icmp slt i32 %65, %36\l  br i1 %66, label %43, label %40, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x56dfae0:s0 -> Node0x56dfae0;
	Node0x56dfae0:s1 -> Node0x56df560;
	Node0x56df460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%67:\l67:                                               \l  %68 = sext i32 %33 to i64\l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %68\l  %70 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !22\l  %71 = icmp eq i32 %70, 0\l  br i1 %71, label %91, label %72\l|{<s0>T|<s1>F}}"];
	Node0x56df460:s0 -> Node0x56dd1a0;
	Node0x56df460:s1 -> Node0x56e1a80;
	Node0x56e1a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%72:\l72:                                               \l  %73 = getelementptr inbounds float, float addrspace(1)* %3, i64 %68\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !17\l  %75 = fmul contract float %74, %9\l  %76 = mul nsw i32 %33, 3\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  store float %75, float addrspace(1)* %78, align 4, !tbaa !17\l  %79 = getelementptr inbounds float, float addrspace(1)* %4, i64 %68\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !17\l  %81 = fmul contract float %80, %9\l  %82 = add nsw i32 %76, 1\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  store float %81, float addrspace(1)* %84, align 4, !tbaa !17\l  %85 = getelementptr inbounds float, float addrspace(1)* %5, i64 %68\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !17\l  %87 = fmul contract float %86, %9\l  %88 = add nsw i32 %76, 2\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  store float %87, float addrspace(1)* %90, align 4, !tbaa !17\l  br label %91\l}"];
	Node0x56e1a80 -> Node0x56dd1a0;
	Node0x56dd1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%91:\l91:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %92 = add i32 %28, %33\l  %93 = add i32 %92, %31\l  %94 = icmp slt i32 %93, %1\l  br i1 %94, label %32, label %95, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x56dd1a0:s0 -> Node0x56dec70;
	Node0x56dd1a0:s1 -> Node0x56dc9c0;
	Node0x56dc9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%95:\l95:                                               \l  ret void\l}"];
}
