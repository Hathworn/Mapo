digraph "CFG for '_Z16kernelBFRSsharedPKfS0_Piiiiif' function" {
	label="CFG for '_Z16kernelBFRSsharedPKfS0_Piiiiif' function";

	Node0x5153d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = mul i32 %15, %14\l  %17 = add i32 %16, %9\l  %18 = freeze i32 %17\l  %19 = icmp ult i32 %18, %5\l  br i1 %19, label %20, label %191\l|{<s0>T|<s1>F}}"];
	Node0x5153d20:s0 -> Node0x5155cd0;
	Node0x5153d20:s1 -> Node0x5155d60;
	Node0x5155cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%20:\l20:                                               \l  %21 = getelementptr inbounds i32, i32 addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @array to i32 addrspace(3)*), i32 %9\l  store i32 0, i32 addrspace(3)* %21, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %22 = urem i32 %18, %4\l  %23 = sub nuw i32 %18, %22\l  %24 = icmp sgt i32 %4, 0\l  br i1 %24, label %25, label %35\l|{<s0>T|<s1>F}}"];
	Node0x5155cd0:s0 -> Node0x5156810;
	Node0x5155cd0:s1 -> Node0x51568a0;
	Node0x5156810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%25:\l25:                                               \l  %26 = sub i32 %22, %6\l  %27 = add i32 %22, %6\l  %28 = sext i32 %18 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = icmp sgt i32 %3, 0\l  %31 = and i32 %3, 7\l  %32 = icmp ult i32 %3, 8\l  %33 = and i32 %3, -8\l  %34 = icmp eq i32 %31, 0\l  br label %39\l}"];
	Node0x5156810 -> Node0x5155b80;
	Node0x51568a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%35:\l35:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %36 = load i32, i32 addrspace(3)* %21, align 4, !tbaa !7\l  %37 = zext i32 %18 to i64\l  %38 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %37\l  store i32 %36, i32 addrspace(1)* %38, align 4, !tbaa !7\l  br label %191\l}"];
	Node0x51568a0 -> Node0x5155d60;
	Node0x5155b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%39:\l39:                                               \l  %40 = phi i32 [ 0, %25 ], [ %189, %188 ]\l  %41 = icmp slt i32 %40, %26\l  %42 = icmp sgt i32 %40, %27\l  %43 = or i1 %41, %42\l  br i1 %43, label %44, label %188\l|{<s0>T|<s1>F}}"];
	Node0x5155b80:s0 -> Node0x5157e20;
	Node0x5155b80:s1 -> Node0x5157b70;
	Node0x5157e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%44:\l44:                                               \l  %45 = add i32 %23, %40\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  br i1 %30, label %48, label %182\l|{<s0>T|<s1>F}}"];
	Node0x5157e20:s0 -> Node0x5158100;
	Node0x5157e20:s1 -> Node0x5158150;
	Node0x5158100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%48:\l48:                                               \l  br i1 %32, label %159, label %49\l|{<s0>T|<s1>F}}"];
	Node0x5158100:s0 -> Node0x5158290;
	Node0x5158100:s1 -> Node0x51582e0;
	Node0x51582e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%49:\l49:                                               \l  %50 = phi i32 [ %156, %49 ], [ 0, %48 ]\l  %51 = phi float [ %155, %49 ], [ 0.000000e+00, %48 ]\l  %52 = phi i32 [ %157, %49 ], [ 0, %48 ]\l  %53 = mul nsw i32 %50, %5\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %29, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %57 = getelementptr inbounds float, float addrspace(1)* %47, i64 %54\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %59 = fsub contract float %58, %56\l  %60 = fcmp contract olt float %59, 0.000000e+00\l  %61 = fneg contract float %59\l  %62 = select contract i1 %60, float %61, float %59\l  %63 = fcmp contract olt float %51, %62\l  %64 = select contract i1 %63, float %62, float %51\l  %65 = or i32 %50, 1\l  %66 = mul nsw i32 %65, %5\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %29, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %70 = getelementptr inbounds float, float addrspace(1)* %47, i64 %67\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %72 = fsub contract float %71, %69\l  %73 = fcmp contract olt float %72, 0.000000e+00\l  %74 = fneg contract float %72\l  %75 = select contract i1 %73, float %74, float %72\l  %76 = fcmp contract olt float %64, %75\l  %77 = select contract i1 %76, float %75, float %64\l  %78 = or i32 %50, 2\l  %79 = mul nsw i32 %78, %5\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %29, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %83 = getelementptr inbounds float, float addrspace(1)* %47, i64 %80\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %85 = fsub contract float %84, %82\l  %86 = fcmp contract olt float %85, 0.000000e+00\l  %87 = fneg contract float %85\l  %88 = select contract i1 %86, float %87, float %85\l  %89 = fcmp contract olt float %77, %88\l  %90 = select contract i1 %89, float %88, float %77\l  %91 = or i32 %50, 3\l  %92 = mul nsw i32 %91, %5\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %29, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %96 = getelementptr inbounds float, float addrspace(1)* %47, i64 %93\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %98 = fsub contract float %97, %95\l  %99 = fcmp contract olt float %98, 0.000000e+00\l  %100 = fneg contract float %98\l  %101 = select contract i1 %99, float %100, float %98\l  %102 = fcmp contract olt float %90, %101\l  %103 = select contract i1 %102, float %101, float %90\l  %104 = or i32 %50, 4\l  %105 = mul nsw i32 %104, %5\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %29, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %109 = getelementptr inbounds float, float addrspace(1)* %47, i64 %106\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %111 = fsub contract float %110, %108\l  %112 = fcmp contract olt float %111, 0.000000e+00\l  %113 = fneg contract float %111\l  %114 = select contract i1 %112, float %113, float %111\l  %115 = fcmp contract olt float %103, %114\l  %116 = select contract i1 %115, float %114, float %103\l  %117 = or i32 %50, 5\l  %118 = mul nsw i32 %117, %5\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %29, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %122 = getelementptr inbounds float, float addrspace(1)* %47, i64 %119\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %124 = fsub contract float %123, %121\l  %125 = fcmp contract olt float %124, 0.000000e+00\l  %126 = fneg contract float %124\l  %127 = select contract i1 %125, float %126, float %124\l  %128 = fcmp contract olt float %116, %127\l  %129 = select contract i1 %128, float %127, float %116\l  %130 = or i32 %50, 6\l  %131 = mul nsw i32 %130, %5\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %29, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %135 = getelementptr inbounds float, float addrspace(1)* %47, i64 %132\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %137 = fsub contract float %136, %134\l  %138 = fcmp contract olt float %137, 0.000000e+00\l  %139 = fneg contract float %137\l  %140 = select contract i1 %138, float %139, float %137\l  %141 = fcmp contract olt float %129, %140\l  %142 = select contract i1 %141, float %140, float %129\l  %143 = or i32 %50, 7\l  %144 = mul nsw i32 %143, %5\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %29, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %148 = getelementptr inbounds float, float addrspace(1)* %47, i64 %145\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %150 = fsub contract float %149, %147\l  %151 = fcmp contract olt float %150, 0.000000e+00\l  %152 = fneg contract float %150\l  %153 = select contract i1 %151, float %152, float %150\l  %154 = fcmp contract olt float %142, %153\l  %155 = select contract i1 %154, float %153, float %142\l  %156 = add nuw nsw i32 %50, 8\l  %157 = add i32 %52, 8\l  %158 = icmp eq i32 %157, %33\l  br i1 %158, label %159, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x51582e0:s0 -> Node0x5158290;
	Node0x51582e0:s1 -> Node0x51582e0;
	Node0x5158290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%159:\l159:                                              \l  %160 = phi float [ undef, %48 ], [ %155, %49 ]\l  %161 = phi i32 [ 0, %48 ], [ %156, %49 ]\l  %162 = phi float [ 0.000000e+00, %48 ], [ %155, %49 ]\l  br i1 %34, label %182, label %163\l|{<s0>T|<s1>F}}"];
	Node0x5158290:s0 -> Node0x5158150;
	Node0x5158290:s1 -> Node0x515ec50;
	Node0x515ec50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%163:\l163:                                              \l  %164 = phi i32 [ %179, %163 ], [ %161, %159 ]\l  %165 = phi float [ %178, %163 ], [ %162, %159 ]\l  %166 = phi i32 [ %180, %163 ], [ 0, %159 ]\l  %167 = mul nsw i32 %164, %5\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %29, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %171 = getelementptr inbounds float, float addrspace(1)* %47, i64 %168\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %173 = fsub contract float %172, %170\l  %174 = fcmp contract olt float %173, 0.000000e+00\l  %175 = fneg contract float %173\l  %176 = select contract i1 %174, float %175, float %173\l  %177 = fcmp contract olt float %165, %176\l  %178 = select contract i1 %177, float %176, float %165\l  %179 = add nuw nsw i32 %164, 1\l  %180 = add i32 %166, 1\l  %181 = icmp eq i32 %180, %31\l  br i1 %181, label %182, label %163, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x515ec50:s0 -> Node0x5158150;
	Node0x515ec50:s1 -> Node0x515ec50;
	Node0x5158150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%182:\l182:                                              \l  %183 = phi float [ 0.000000e+00, %44 ], [ %160, %159 ], [ %178, %163 ]\l  %184 = fcmp contract ugt float %183, %7\l  br i1 %184, label %188, label %185\l|{<s0>T|<s1>F}}"];
	Node0x5158150:s0 -> Node0x5157b70;
	Node0x5158150:s1 -> Node0x515fb40;
	Node0x515fb40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%185:\l185:                                              \l  %186 = load i32, i32 addrspace(3)* %21, align 4, !tbaa !7\l  %187 = add nsw i32 %186, 1\l  store i32 %187, i32 addrspace(3)* %21, align 4, !tbaa !7\l  br label %188\l}"];
	Node0x515fb40 -> Node0x5157b70;
	Node0x5157b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%188:\l188:                                              \l  %189 = add nuw nsw i32 %40, 1\l  %190 = icmp eq i32 %189, %4\l  br i1 %190, label %35, label %39, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5157b70:s0 -> Node0x51568a0;
	Node0x5157b70:s1 -> Node0x5155b80;
	Node0x5155d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%191:\l191:                                              \l  ret void\l}"];
}
