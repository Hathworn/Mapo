digraph "CFG for '_Z9kernelKNNPKfS0_PiPfiiiii' function" {
	label="CFG for '_Z9kernelKNNPKfS0_PiPfiiiii' function";

	Node0x4b17bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%9:\l  %10 = alloca [10 x i32], align 16, addrspace(5)\l  %11 = alloca [10 x float], align 16, addrspace(5)\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = mul i32 %18, %17\l  %20 = add i32 %19, %12\l  %21 = freeze i32 %20\l  %22 = bitcast [10 x i32] addrspace(5)* %10 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 40, i8 addrspace(5)* %22) #6\l  call void @llvm.memset.p5i8.i64(i8 addrspace(5)* noundef align 16\l... dereferenceable(40) %22, i8 0, i64 40, i1 false)\l  %23 = bitcast [10 x float] addrspace(5)* %11 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 40, i8 addrspace(5)* %23) #6\l  call void @llvm.memcpy.p5i8.p4i8.i64(i8 addrspace(5)* noundef align 16\l... dereferenceable(40) %23, i8 addrspace(4)* noundef align 16\l... dereferenceable(40) bitcast ([10 x float] addrspace(4)*\l... @__const._Z9kernelKNNPKfS0_PiPfiiiii.kdistances to i8 addrspace(4)*), i64 40,\l... i1 false)\l  %24 = icmp ult i32 %21, %6\l  br i1 %24, label %25, label %325\l|{<s0>T|<s1>F}}"];
	Node0x4b17bc0:s0 -> Node0x4b1a8e0;
	Node0x4b17bc0:s1 -> Node0x4b1a970;
	Node0x4b1a8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%25:\l25:                                               \l  %26 = urem i32 %21, %5\l  %27 = sub nuw i32 %21, %26\l  %28 = icmp sgt i32 %5, 0\l  br i1 %28, label %29, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4b1a8e0:s0 -> Node0x4b1ac60;
	Node0x4b1a8e0:s1 -> Node0x4b1acb0;
	Node0x4b1ac60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%29:\l29:                                               \l  %30 = sub nsw i32 %26, %8\l  %31 = add nsw i32 %26, %8\l  %32 = sext i32 %21 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = icmp sgt i32 %4, 0\l  %35 = add nsw i32 %7, -1\l  %36 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %7\l  %37 = getelementptr inbounds float, float addrspace(5)* %36, i32 -1\l  %38 = and i32 %4, 7\l  %39 = icmp ult i32 %4, 8\l  %40 = and i32 %4, -8\l  %41 = icmp eq i32 %38, 0\l  br label %49\l}"];
	Node0x4b1ac60 -> Node0x4b1b6b0;
	Node0x4b1acb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%42:\l42:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %43 = icmp sgt i32 %7, 0\l  br i1 %43, label %44, label %325\l|{<s0>T|<s1>F}}"];
	Node0x4b1acb0:s0 -> Node0x4b1bac0;
	Node0x4b1acb0:s1 -> Node0x4b1a970;
	Node0x4b1bac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%44:\l44:                                               \l  %45 = and i32 %7, 7\l  %46 = icmp ult i32 %7, 8\l  br i1 %46, label %307, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4b1bac0:s0 -> Node0x4b1bd20;
	Node0x4b1bac0:s1 -> Node0x4b1bd70;
	Node0x4b1bd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%47:\l47:                                               \l  %48 = and i32 %7, -8\l  br label %222\l}"];
	Node0x4b1bd70 -> Node0x4b1bf40;
	Node0x4b1b6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%49:\l49:                                               \l  %50 = phi float [ 0x7FF0000000000000, %29 ], [ %219, %218 ]\l  %51 = phi i32 [ 0, %29 ], [ %220, %218 ]\l  %52 = icmp slt i32 %51, %30\l  %53 = icmp sgt i32 %51, %31\l  %54 = select i1 %52, i1 true, i1 %53\l  br i1 %54, label %55, label %218\l|{<s0>T|<s1>F}}"];
	Node0x4b1b6b0:s0 -> Node0x4b1c460;
	Node0x4b1b6b0:s1 -> Node0x4b1c000;
	Node0x4b1c460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%55:\l55:                                               \l  %56 = add i32 %27, %51\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  br i1 %34, label %59, label %193\l|{<s0>T|<s1>F}}"];
	Node0x4b1c460:s0 -> Node0x4b1c740;
	Node0x4b1c460:s1 -> Node0x4b1c790;
	Node0x4b1c740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%59:\l59:                                               \l  br i1 %39, label %170, label %60\l|{<s0>T|<s1>F}}"];
	Node0x4b1c740:s0 -> Node0x4b1c8d0;
	Node0x4b1c740:s1 -> Node0x4b1c920;
	Node0x4b1c920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%60:\l60:                                               \l  %61 = phi i32 [ %167, %60 ], [ 0, %59 ]\l  %62 = phi float [ %166, %60 ], [ 0.000000e+00, %59 ]\l  %63 = phi i32 [ %168, %60 ], [ 0, %59 ]\l  %64 = mul nsw i32 %61, %6\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %33, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %68 = getelementptr inbounds float, float addrspace(1)* %58, i64 %65\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %70 = fsub contract float %69, %67\l  %71 = fcmp contract olt float %70, 0.000000e+00\l  %72 = fneg contract float %70\l  %73 = select contract i1 %71, float %72, float %70\l  %74 = fcmp contract olt float %62, %73\l  %75 = select contract i1 %74, float %73, float %62\l  %76 = or i32 %61, 1\l  %77 = mul nsw i32 %76, %6\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %33, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %81 = getelementptr inbounds float, float addrspace(1)* %58, i64 %78\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %83 = fsub contract float %82, %80\l  %84 = fcmp contract olt float %83, 0.000000e+00\l  %85 = fneg contract float %83\l  %86 = select contract i1 %84, float %85, float %83\l  %87 = fcmp contract olt float %75, %86\l  %88 = select contract i1 %87, float %86, float %75\l  %89 = or i32 %61, 2\l  %90 = mul nsw i32 %89, %6\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %33, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %94 = getelementptr inbounds float, float addrspace(1)* %58, i64 %91\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %96 = fsub contract float %95, %93\l  %97 = fcmp contract olt float %96, 0.000000e+00\l  %98 = fneg contract float %96\l  %99 = select contract i1 %97, float %98, float %96\l  %100 = fcmp contract olt float %88, %99\l  %101 = select contract i1 %100, float %99, float %88\l  %102 = or i32 %61, 3\l  %103 = mul nsw i32 %102, %6\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %33, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %107 = getelementptr inbounds float, float addrspace(1)* %58, i64 %104\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %109 = fsub contract float %108, %106\l  %110 = fcmp contract olt float %109, 0.000000e+00\l  %111 = fneg contract float %109\l  %112 = select contract i1 %110, float %111, float %109\l  %113 = fcmp contract olt float %101, %112\l  %114 = select contract i1 %113, float %112, float %101\l  %115 = or i32 %61, 4\l  %116 = mul nsw i32 %115, %6\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %33, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %120 = getelementptr inbounds float, float addrspace(1)* %58, i64 %117\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %122 = fsub contract float %121, %119\l  %123 = fcmp contract olt float %122, 0.000000e+00\l  %124 = fneg contract float %122\l  %125 = select contract i1 %123, float %124, float %122\l  %126 = fcmp contract olt float %114, %125\l  %127 = select contract i1 %126, float %125, float %114\l  %128 = or i32 %61, 5\l  %129 = mul nsw i32 %128, %6\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %33, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %133 = getelementptr inbounds float, float addrspace(1)* %58, i64 %130\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %135 = fsub contract float %134, %132\l  %136 = fcmp contract olt float %135, 0.000000e+00\l  %137 = fneg contract float %135\l  %138 = select contract i1 %136, float %137, float %135\l  %139 = fcmp contract olt float %127, %138\l  %140 = select contract i1 %139, float %138, float %127\l  %141 = or i32 %61, 6\l  %142 = mul nsw i32 %141, %6\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %33, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %146 = getelementptr inbounds float, float addrspace(1)* %58, i64 %143\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %148 = fsub contract float %147, %145\l  %149 = fcmp contract olt float %148, 0.000000e+00\l  %150 = fneg contract float %148\l  %151 = select contract i1 %149, float %150, float %148\l  %152 = fcmp contract olt float %140, %151\l  %153 = select contract i1 %152, float %151, float %140\l  %154 = or i32 %61, 7\l  %155 = mul nsw i32 %154, %6\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %33, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %159 = getelementptr inbounds float, float addrspace(1)* %58, i64 %156\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %161 = fsub contract float %160, %158\l  %162 = fcmp contract olt float %161, 0.000000e+00\l  %163 = fneg contract float %161\l  %164 = select contract i1 %162, float %163, float %161\l  %165 = fcmp contract olt float %153, %164\l  %166 = select contract i1 %165, float %164, float %153\l  %167 = add nuw nsw i32 %61, 8\l  %168 = add i32 %63, 8\l  %169 = icmp eq i32 %168, %40\l  br i1 %169, label %170, label %60, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4b1c920:s0 -> Node0x4b1c8d0;
	Node0x4b1c920:s1 -> Node0x4b1c920;
	Node0x4b1c8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%170:\l170:                                              \l  %171 = phi float [ undef, %59 ], [ %166, %60 ]\l  %172 = phi i32 [ 0, %59 ], [ %167, %60 ]\l  %173 = phi float [ 0.000000e+00, %59 ], [ %166, %60 ]\l  br i1 %41, label %193, label %174\l|{<s0>T|<s1>F}}"];
	Node0x4b1c8d0:s0 -> Node0x4b1c790;
	Node0x4b1c8d0:s1 -> Node0x4b22890;
	Node0x4b22890 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%174:\l174:                                              \l  %175 = phi i32 [ %190, %174 ], [ %172, %170 ]\l  %176 = phi float [ %189, %174 ], [ %173, %170 ]\l  %177 = phi i32 [ %191, %174 ], [ 0, %170 ]\l  %178 = mul nsw i32 %175, %6\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %33, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %182 = getelementptr inbounds float, float addrspace(1)* %58, i64 %179\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %184 = fsub contract float %183, %181\l  %185 = fcmp contract olt float %184, 0.000000e+00\l  %186 = fneg contract float %184\l  %187 = select contract i1 %185, float %186, float %184\l  %188 = fcmp contract olt float %176, %187\l  %189 = select contract i1 %188, float %187, float %176\l  %190 = add nuw nsw i32 %175, 1\l  %191 = add i32 %177, 1\l  %192 = icmp eq i32 %191, %38\l  br i1 %192, label %193, label %174, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b22890:s0 -> Node0x4b1c790;
	Node0x4b22890:s1 -> Node0x4b22890;
	Node0x4b1c790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%193:\l193:                                              \l  %194 = phi float [ 0.000000e+00, %55 ], [ %171, %170 ], [ %189, %174 ]\l  %195 = fcmp contract ugt float %194, %50\l  br i1 %195, label %218, label %196\l|{<s0>T|<s1>F}}"];
	Node0x4b1c790:s0 -> Node0x4b1c000;
	Node0x4b1c790:s1 -> Node0x4b23780;
	Node0x4b23780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%196:\l196:                                              \l  %197 = phi i32 [ %203, %196 ], [ 0, %193 ]\l  %198 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %197\l  %199 = load float, float addrspace(5)* %198, align 4, !tbaa !7\l  %200 = fcmp contract olt float %199, %194\l  %201 = icmp slt i32 %197, %35\l  %202 = select i1 %200, i1 %201, i1 false\l  %203 = add nuw nsw i32 %197, 1\l  br i1 %202, label %196, label %204, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4b23780:s0 -> Node0x4b23780;
	Node0x4b23780:s1 -> Node0x4b23cc0;
	Node0x4b23cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%204:\l204:                                              \l  br i1 %201, label %205, label %215\l|{<s0>T|<s1>F}}"];
	Node0x4b23cc0:s0 -> Node0x4b23f00;
	Node0x4b23cc0:s1 -> Node0x4b23f50;
	Node0x4b23f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%205:\l205:                                              \l  %206 = phi i32 [ %213, %205 ], [ %35, %204 ]\l  %207 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %206\l  %208 = getelementptr inbounds float, float addrspace(5)* %207, i32 -1\l  %209 = load float, float addrspace(5)* %208, align 4, !tbaa !7\l  store float %209, float addrspace(5)* %207, align 4, !tbaa !7\l  %210 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %206\l  %211 = getelementptr inbounds i32, i32 addrspace(5)* %210, i32 -1\l  %212 = load i32, i32 addrspace(5)* %211, align 4, !tbaa !16\l  store i32 %212, i32 addrspace(5)* %210, align 4, !tbaa !16\l  %213 = add nsw i32 %206, -1\l  %214 = icmp sgt i32 %213, %197\l  br i1 %214, label %205, label %215, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4b23f00:s0 -> Node0x4b23f00;
	Node0x4b23f00:s1 -> Node0x4b23f50;
	Node0x4b23f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%215:\l215:                                              \l  store float %194, float addrspace(5)* %198, align 4, !tbaa !7\l  %216 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %197\l  store i32 %51, i32 addrspace(5)* %216, align 4, !tbaa !16\l  %217 = load float, float addrspace(5)* %37, align 4, !tbaa !7\l  br label %218\l}"];
	Node0x4b23f50 -> Node0x4b1c000;
	Node0x4b1c000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%218:\l218:                                              \l  %219 = phi float [ %50, %49 ], [ %217, %215 ], [ %50, %193 ]\l  %220 = add nuw nsw i32 %51, 1\l  %221 = icmp eq i32 %220, %5\l  br i1 %221, label %42, label %49, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4b1c000:s0 -> Node0x4b1acb0;
	Node0x4b1c000:s1 -> Node0x4b1b6b0;
	Node0x4b1bf40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%222:\l222:                                              \l  %223 = phi i32 [ 0, %47 ], [ %304, %222 ]\l  %224 = phi i32 [ 0, %47 ], [ %305, %222 ]\l  %225 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %223\l  %226 = load i32, i32 addrspace(5)* %225, align 16, !tbaa !16\l  %227 = mul nsw i32 %223, %6\l  %228 = add i32 %227, %21\l  %229 = zext i32 %228 to i64\l  %230 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %229\l  store i32 %226, i32 addrspace(1)* %230, align 4, !tbaa !16\l  %231 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %223\l  %232 = load float, float addrspace(5)* %231, align 16, !tbaa !7\l  %233 = getelementptr inbounds float, float addrspace(1)* %3, i64 %229\l  store float %232, float addrspace(1)* %233, align 4, !tbaa !7\l  %234 = or i32 %223, 1\l  %235 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %234\l  %236 = load i32, i32 addrspace(5)* %235, align 4, !tbaa !16\l  %237 = mul nsw i32 %234, %6\l  %238 = add i32 %237, %21\l  %239 = zext i32 %238 to i64\l  %240 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %239\l  store i32 %236, i32 addrspace(1)* %240, align 4, !tbaa !16\l  %241 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %234\l  %242 = load float, float addrspace(5)* %241, align 4, !tbaa !7\l  %243 = getelementptr inbounds float, float addrspace(1)* %3, i64 %239\l  store float %242, float addrspace(1)* %243, align 4, !tbaa !7\l  %244 = or i32 %223, 2\l  %245 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %244\l  %246 = load i32, i32 addrspace(5)* %245, align 8, !tbaa !16\l  %247 = mul nsw i32 %244, %6\l  %248 = add i32 %247, %21\l  %249 = zext i32 %248 to i64\l  %250 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %249\l  store i32 %246, i32 addrspace(1)* %250, align 4, !tbaa !16\l  %251 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %244\l  %252 = load float, float addrspace(5)* %251, align 8, !tbaa !7\l  %253 = getelementptr inbounds float, float addrspace(1)* %3, i64 %249\l  store float %252, float addrspace(1)* %253, align 4, !tbaa !7\l  %254 = or i32 %223, 3\l  %255 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %254\l  %256 = load i32, i32 addrspace(5)* %255, align 4, !tbaa !16\l  %257 = mul nsw i32 %254, %6\l  %258 = add i32 %257, %21\l  %259 = zext i32 %258 to i64\l  %260 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %259\l  store i32 %256, i32 addrspace(1)* %260, align 4, !tbaa !16\l  %261 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %254\l  %262 = load float, float addrspace(5)* %261, align 4, !tbaa !7\l  %263 = getelementptr inbounds float, float addrspace(1)* %3, i64 %259\l  store float %262, float addrspace(1)* %263, align 4, !tbaa !7\l  %264 = or i32 %223, 4\l  %265 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %264\l  %266 = load i32, i32 addrspace(5)* %265, align 16, !tbaa !16\l  %267 = mul nsw i32 %264, %6\l  %268 = add i32 %267, %21\l  %269 = zext i32 %268 to i64\l  %270 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %269\l  store i32 %266, i32 addrspace(1)* %270, align 4, !tbaa !16\l  %271 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %264\l  %272 = load float, float addrspace(5)* %271, align 16, !tbaa !7\l  %273 = getelementptr inbounds float, float addrspace(1)* %3, i64 %269\l  store float %272, float addrspace(1)* %273, align 4, !tbaa !7\l  %274 = or i32 %223, 5\l  %275 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %274\l  %276 = load i32, i32 addrspace(5)* %275, align 4, !tbaa !16\l  %277 = mul nsw i32 %274, %6\l  %278 = add i32 %277, %21\l  %279 = zext i32 %278 to i64\l  %280 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %279\l  store i32 %276, i32 addrspace(1)* %280, align 4, !tbaa !16\l  %281 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %274\l  %282 = load float, float addrspace(5)* %281, align 4, !tbaa !7\l  %283 = getelementptr inbounds float, float addrspace(1)* %3, i64 %279\l  store float %282, float addrspace(1)* %283, align 4, !tbaa !7\l  %284 = or i32 %223, 6\l  %285 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %284\l  %286 = load i32, i32 addrspace(5)* %285, align 8, !tbaa !16\l  %287 = mul nsw i32 %284, %6\l  %288 = add i32 %287, %21\l  %289 = zext i32 %288 to i64\l  %290 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %289\l  store i32 %286, i32 addrspace(1)* %290, align 4, !tbaa !16\l  %291 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %284\l  %292 = load float, float addrspace(5)* %291, align 8, !tbaa !7\l  %293 = getelementptr inbounds float, float addrspace(1)* %3, i64 %289\l  store float %292, float addrspace(1)* %293, align 4, !tbaa !7\l  %294 = or i32 %223, 7\l  %295 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %294\l  %296 = load i32, i32 addrspace(5)* %295, align 4, !tbaa !16\l  %297 = mul nsw i32 %294, %6\l  %298 = add i32 %297, %21\l  %299 = zext i32 %298 to i64\l  %300 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %299\l  store i32 %296, i32 addrspace(1)* %300, align 4, !tbaa !16\l  %301 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %294\l  %302 = load float, float addrspace(5)* %301, align 4, !tbaa !7\l  %303 = getelementptr inbounds float, float addrspace(1)* %3, i64 %299\l  store float %302, float addrspace(1)* %303, align 4, !tbaa !7\l  %304 = add nuw nsw i32 %223, 8\l  %305 = add i32 %224, 8\l  %306 = icmp eq i32 %305, %48\l  br i1 %306, label %307, label %222, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4b1bf40:s0 -> Node0x4b1bd20;
	Node0x4b1bf40:s1 -> Node0x4b1bf40;
	Node0x4b1bd20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%307:\l307:                                              \l  %308 = phi i32 [ 0, %44 ], [ %304, %222 ]\l  %309 = icmp eq i32 %45, 0\l  br i1 %309, label %325, label %310\l|{<s0>T|<s1>F}}"];
	Node0x4b1bd20:s0 -> Node0x4b1a970;
	Node0x4b1bd20:s1 -> Node0x4b2a460;
	Node0x4b2a460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%310:\l310:                                              \l  %311 = phi i32 [ %322, %310 ], [ %308, %307 ]\l  %312 = phi i32 [ %323, %310 ], [ 0, %307 ]\l  %313 = getelementptr inbounds [10 x i32], [10 x i32] addrspace(5)* %10, i32\l... 0, i32 %311\l  %314 = load i32, i32 addrspace(5)* %313, align 4, !tbaa !16\l  %315 = mul nsw i32 %311, %6\l  %316 = add i32 %315, %21\l  %317 = zext i32 %316 to i64\l  %318 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %317\l  store i32 %314, i32 addrspace(1)* %318, align 4, !tbaa !16\l  %319 = getelementptr inbounds [10 x float], [10 x float] addrspace(5)* %11,\l... i32 0, i32 %311\l  %320 = load float, float addrspace(5)* %319, align 4, !tbaa !7\l  %321 = getelementptr inbounds float, float addrspace(1)* %3, i64 %317\l  store float %320, float addrspace(1)* %321, align 4, !tbaa !7\l  %322 = add nuw nsw i32 %311, 1\l  %323 = add i32 %312, 1\l  %324 = icmp eq i32 %323, %45\l  br i1 %324, label %325, label %310, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4b2a460:s0 -> Node0x4b1a970;
	Node0x4b2a460:s1 -> Node0x4b2a460;
	Node0x4b1a970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%325:\l325:                                              \l  call void @llvm.lifetime.end.p5i8(i64 40, i8 addrspace(5)* %23) #6\l  call void @llvm.lifetime.end.p5i8(i64 40, i8 addrspace(5)* %22) #6\l  ret void\l}"];
}
