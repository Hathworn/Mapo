digraph "CFG for '_Z19kernelBFRSAllsharedPKfS0_PiiiiiS0_' function" {
	label="CFG for '_Z19kernelBFRSAllsharedPKfS0_PiiiiiS0_' function";

	Node0x5354de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = mul i32 %15, %14\l  %17 = add i32 %16, %9\l  %18 = freeze i32 %17\l  %19 = icmp ult i32 %18, %5\l  br i1 %19, label %20, label %193\l|{<s0>T|<s1>F}}"];
	Node0x5354de0:s0 -> Node0x5356d90;
	Node0x5354de0:s1 -> Node0x5356e20;
	Node0x5356d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%20:\l20:                                               \l  %21 = getelementptr inbounds i32, i32 addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @array to i32 addrspace(3)*), i32 %9\l  store i32 0, i32 addrspace(3)* %21, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %22 = zext i32 %18 to i64\l  %23 = getelementptr inbounds float, float addrspace(1)* %7, i64 %22\l  %24 = load float, float addrspace(1)* %23, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %25 = urem i32 %18, %4\l  %26 = sub nuw i32 %18, %25\l  %27 = icmp sgt i32 %4, 0\l  br i1 %27, label %28, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5356d90:s0 -> Node0x5358220;
	Node0x5356d90:s1 -> Node0x53582b0;
	Node0x5358220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%28:\l28:                                               \l  %29 = sub i32 %25, %6\l  %30 = add i32 %25, %6\l  %31 = sext i32 %18 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %33 = icmp sgt i32 %3, 0\l  %34 = and i32 %3, 7\l  %35 = icmp ult i32 %3, 8\l  %36 = and i32 %3, -8\l  %37 = icmp eq i32 %34, 0\l  br label %41\l}"];
	Node0x5358220 -> Node0x5358a70;
	Node0x53582b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%38:\l38:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %39 = load i32, i32 addrspace(3)* %21, align 4, !tbaa !7\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %22\l  store i32 %39, i32 addrspace(1)* %40, align 4, !tbaa !7\l  br label %193\l}"];
	Node0x53582b0 -> Node0x5356e20;
	Node0x5358a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%41:\l41:                                               \l  %42 = phi i32 [ 0, %28 ], [ %191, %190 ]\l  %43 = icmp slt i32 %42, %29\l  %44 = icmp sgt i32 %42, %30\l  %45 = or i1 %43, %44\l  br i1 %45, label %46, label %190\l|{<s0>T|<s1>F}}"];
	Node0x5358a70:s0 -> Node0x53597f0;
	Node0x5358a70:s1 -> Node0x5359540;
	Node0x53597f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%46:\l46:                                               \l  %47 = add i32 %26, %42\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  br i1 %33, label %50, label %184\l|{<s0>T|<s1>F}}"];
	Node0x53597f0:s0 -> Node0x5359a90;
	Node0x53597f0:s1 -> Node0x5359ae0;
	Node0x5359a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%50:\l50:                                               \l  br i1 %35, label %161, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5359a90:s0 -> Node0x5359c20;
	Node0x5359a90:s1 -> Node0x5359c70;
	Node0x5359c70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%51:\l51:                                               \l  %52 = phi i32 [ %158, %51 ], [ 0, %50 ]\l  %53 = phi float [ %157, %51 ], [ 0.000000e+00, %50 ]\l  %54 = phi i32 [ %159, %51 ], [ 0, %50 ]\l  %55 = mul nsw i32 %52, %5\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %32, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %59 = getelementptr inbounds float, float addrspace(1)* %49, i64 %56\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %61 = fsub contract float %60, %58\l  %62 = fcmp contract olt float %61, 0.000000e+00\l  %63 = fneg contract float %61\l  %64 = select contract i1 %62, float %63, float %61\l  %65 = fcmp contract olt float %53, %64\l  %66 = select contract i1 %65, float %64, float %53\l  %67 = or i32 %52, 1\l  %68 = mul nsw i32 %67, %5\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %32, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %72 = getelementptr inbounds float, float addrspace(1)* %49, i64 %69\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %74 = fsub contract float %73, %71\l  %75 = fcmp contract olt float %74, 0.000000e+00\l  %76 = fneg contract float %74\l  %77 = select contract i1 %75, float %76, float %74\l  %78 = fcmp contract olt float %66, %77\l  %79 = select contract i1 %78, float %77, float %66\l  %80 = or i32 %52, 2\l  %81 = mul nsw i32 %80, %5\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %32, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %85 = getelementptr inbounds float, float addrspace(1)* %49, i64 %82\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %87 = fsub contract float %86, %84\l  %88 = fcmp contract olt float %87, 0.000000e+00\l  %89 = fneg contract float %87\l  %90 = select contract i1 %88, float %89, float %87\l  %91 = fcmp contract olt float %79, %90\l  %92 = select contract i1 %91, float %90, float %79\l  %93 = or i32 %52, 3\l  %94 = mul nsw i32 %93, %5\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %32, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %98 = getelementptr inbounds float, float addrspace(1)* %49, i64 %95\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %100 = fsub contract float %99, %97\l  %101 = fcmp contract olt float %100, 0.000000e+00\l  %102 = fneg contract float %100\l  %103 = select contract i1 %101, float %102, float %100\l  %104 = fcmp contract olt float %92, %103\l  %105 = select contract i1 %104, float %103, float %92\l  %106 = or i32 %52, 4\l  %107 = mul nsw i32 %106, %5\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %32, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %111 = getelementptr inbounds float, float addrspace(1)* %49, i64 %108\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %113 = fsub contract float %112, %110\l  %114 = fcmp contract olt float %113, 0.000000e+00\l  %115 = fneg contract float %113\l  %116 = select contract i1 %114, float %115, float %113\l  %117 = fcmp contract olt float %105, %116\l  %118 = select contract i1 %117, float %116, float %105\l  %119 = or i32 %52, 5\l  %120 = mul nsw i32 %119, %5\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %32, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %124 = getelementptr inbounds float, float addrspace(1)* %49, i64 %121\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %126 = fsub contract float %125, %123\l  %127 = fcmp contract olt float %126, 0.000000e+00\l  %128 = fneg contract float %126\l  %129 = select contract i1 %127, float %128, float %126\l  %130 = fcmp contract olt float %118, %129\l  %131 = select contract i1 %130, float %129, float %118\l  %132 = or i32 %52, 6\l  %133 = mul nsw i32 %132, %5\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %32, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %137 = getelementptr inbounds float, float addrspace(1)* %49, i64 %134\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %139 = fsub contract float %138, %136\l  %140 = fcmp contract olt float %139, 0.000000e+00\l  %141 = fneg contract float %139\l  %142 = select contract i1 %140, float %141, float %139\l  %143 = fcmp contract olt float %131, %142\l  %144 = select contract i1 %143, float %142, float %131\l  %145 = or i32 %52, 7\l  %146 = mul nsw i32 %145, %5\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %32, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %150 = getelementptr inbounds float, float addrspace(1)* %49, i64 %147\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %152 = fsub contract float %151, %149\l  %153 = fcmp contract olt float %152, 0.000000e+00\l  %154 = fneg contract float %152\l  %155 = select contract i1 %153, float %154, float %152\l  %156 = fcmp contract olt float %144, %155\l  %157 = select contract i1 %156, float %155, float %144\l  %158 = add nuw nsw i32 %52, 8\l  %159 = add i32 %54, 8\l  %160 = icmp eq i32 %159, %36\l  br i1 %160, label %161, label %51, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5359c70:s0 -> Node0x5359c20;
	Node0x5359c70:s1 -> Node0x5359c70;
	Node0x5359c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%161:\l161:                                              \l  %162 = phi float [ undef, %50 ], [ %157, %51 ]\l  %163 = phi i32 [ 0, %50 ], [ %158, %51 ]\l  %164 = phi float [ 0.000000e+00, %50 ], [ %157, %51 ]\l  br i1 %37, label %184, label %165\l|{<s0>T|<s1>F}}"];
	Node0x5359c20:s0 -> Node0x5359ae0;
	Node0x5359c20:s1 -> Node0x535fe90;
	Node0x535fe90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%165:\l165:                                              \l  %166 = phi i32 [ %181, %165 ], [ %163, %161 ]\l  %167 = phi float [ %180, %165 ], [ %164, %161 ]\l  %168 = phi i32 [ %182, %165 ], [ 0, %161 ]\l  %169 = mul nsw i32 %166, %5\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %32, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %173 = getelementptr inbounds float, float addrspace(1)* %49, i64 %170\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %175 = fsub contract float %174, %172\l  %176 = fcmp contract olt float %175, 0.000000e+00\l  %177 = fneg contract float %175\l  %178 = select contract i1 %176, float %177, float %175\l  %179 = fcmp contract olt float %167, %178\l  %180 = select contract i1 %179, float %178, float %167\l  %181 = add nuw nsw i32 %166, 1\l  %182 = add i32 %168, 1\l  %183 = icmp eq i32 %182, %34\l  br i1 %183, label %184, label %165, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x535fe90:s0 -> Node0x5359ae0;
	Node0x535fe90:s1 -> Node0x535fe90;
	Node0x5359ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%184:\l184:                                              \l  %185 = phi float [ 0.000000e+00, %46 ], [ %162, %161 ], [ %180, %165 ]\l  %186 = fcmp contract ugt float %185, %24\l  br i1 %186, label %190, label %187\l|{<s0>T|<s1>F}}"];
	Node0x5359ae0:s0 -> Node0x5359540;
	Node0x5359ae0:s1 -> Node0x5360d80;
	Node0x5360d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%187:\l187:                                              \l  %188 = load i32, i32 addrspace(3)* %21, align 4, !tbaa !7\l  %189 = add nsw i32 %188, 1\l  store i32 %189, i32 addrspace(3)* %21, align 4, !tbaa !7\l  br label %190\l}"];
	Node0x5360d80 -> Node0x5359540;
	Node0x5359540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%190:\l190:                                              \l  %191 = add nuw nsw i32 %42, 1\l  %192 = icmp eq i32 %191, %4\l  br i1 %192, label %38, label %41, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5359540:s0 -> Node0x53582b0;
	Node0x5359540:s1 -> Node0x5358a70;
	Node0x5356e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%193:\l193:                                              \l  ret void\l}"];
}
