digraph "CFG for '_Z21kernelBFRSMultisharedPKfS0_PiiiiiS0_' function" {
	label="CFG for '_Z21kernelBFRSMultisharedPKfS0_PiiiiiS0_' function";

	Node0x531be10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = mul i32 %15, %14\l  %17 = add i32 %16, %9\l  %18 = udiv i32 %17, %4\l  %19 = icmp ult i32 %17, %5\l  br i1 %19, label %20, label %194\l|{<s0>T|<s1>F}}"];
	Node0x531be10:s0 -> Node0x531dde0;
	Node0x531be10:s1 -> Node0x531de70;
	Node0x531dde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%20:\l20:                                               \l  %21 = getelementptr inbounds i32, i32 addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @array to i32 addrspace(3)*), i32 %9\l  store i32 0, i32 addrspace(3)* %21, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %22 = zext i32 %18 to i64\l  %23 = getelementptr inbounds float, float addrspace(1)* %7, i64 %22\l  %24 = load float, float addrspace(1)* %23, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %25 = mul i32 %18, %4\l  %26 = sub i32 %17, %25\l  %27 = icmp sgt i32 %4, 0\l  br i1 %27, label %28, label %38\l|{<s0>T|<s1>F}}"];
	Node0x531dde0:s0 -> Node0x531f270;
	Node0x531dde0:s1 -> Node0x531f300;
	Node0x531f270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%28:\l28:                                               \l  %29 = sub i32 %26, %6\l  %30 = add i32 %26, %6\l  %31 = sext i32 %17 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %33 = icmp sgt i32 %3, 0\l  %34 = and i32 %3, 7\l  %35 = icmp ult i32 %3, 8\l  %36 = and i32 %3, -8\l  %37 = icmp eq i32 %34, 0\l  br label %42\l}"];
	Node0x531f270 -> Node0x531fac0;
	Node0x531f300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%38:\l38:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %39 = load i32, i32 addrspace(3)* %21, align 4, !tbaa !7\l  %40 = zext i32 %17 to i64\l  %41 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %40\l  store i32 %39, i32 addrspace(1)* %41, align 4, !tbaa !7\l  br label %194\l}"];
	Node0x531f300 -> Node0x531de70;
	Node0x531fac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%42:\l42:                                               \l  %43 = phi i32 [ 0, %28 ], [ %192, %191 ]\l  %44 = icmp slt i32 %43, %29\l  %45 = icmp sgt i32 %43, %30\l  %46 = or i1 %44, %45\l  br i1 %46, label %47, label %191\l|{<s0>T|<s1>F}}"];
	Node0x531fac0:s0 -> Node0x53208b0;
	Node0x531fac0:s1 -> Node0x5320600;
	Node0x53208b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%47:\l47:                                               \l  %48 = add i32 %43, %25\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  br i1 %33, label %51, label %185\l|{<s0>T|<s1>F}}"];
	Node0x53208b0:s0 -> Node0x5320b50;
	Node0x53208b0:s1 -> Node0x5320ba0;
	Node0x5320b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%51:\l51:                                               \l  br i1 %35, label %162, label %52\l|{<s0>T|<s1>F}}"];
	Node0x5320b50:s0 -> Node0x5320ce0;
	Node0x5320b50:s1 -> Node0x5320d30;
	Node0x5320d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%52:\l52:                                               \l  %53 = phi i32 [ %159, %52 ], [ 0, %51 ]\l  %54 = phi float [ %158, %52 ], [ 0.000000e+00, %51 ]\l  %55 = phi i32 [ %160, %52 ], [ 0, %51 ]\l  %56 = mul nsw i32 %53, %5\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %32, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %60 = getelementptr inbounds float, float addrspace(1)* %50, i64 %57\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %62 = fsub contract float %61, %59\l  %63 = fcmp contract olt float %62, 0.000000e+00\l  %64 = fneg contract float %62\l  %65 = select contract i1 %63, float %64, float %62\l  %66 = fcmp contract olt float %54, %65\l  %67 = select contract i1 %66, float %65, float %54\l  %68 = or i32 %53, 1\l  %69 = mul nsw i32 %68, %5\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %32, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %73 = getelementptr inbounds float, float addrspace(1)* %50, i64 %70\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %75 = fsub contract float %74, %72\l  %76 = fcmp contract olt float %75, 0.000000e+00\l  %77 = fneg contract float %75\l  %78 = select contract i1 %76, float %77, float %75\l  %79 = fcmp contract olt float %67, %78\l  %80 = select contract i1 %79, float %78, float %67\l  %81 = or i32 %53, 2\l  %82 = mul nsw i32 %81, %5\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %32, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %86 = getelementptr inbounds float, float addrspace(1)* %50, i64 %83\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %88 = fsub contract float %87, %85\l  %89 = fcmp contract olt float %88, 0.000000e+00\l  %90 = fneg contract float %88\l  %91 = select contract i1 %89, float %90, float %88\l  %92 = fcmp contract olt float %80, %91\l  %93 = select contract i1 %92, float %91, float %80\l  %94 = or i32 %53, 3\l  %95 = mul nsw i32 %94, %5\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %32, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %99 = getelementptr inbounds float, float addrspace(1)* %50, i64 %96\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %101 = fsub contract float %100, %98\l  %102 = fcmp contract olt float %101, 0.000000e+00\l  %103 = fneg contract float %101\l  %104 = select contract i1 %102, float %103, float %101\l  %105 = fcmp contract olt float %93, %104\l  %106 = select contract i1 %105, float %104, float %93\l  %107 = or i32 %53, 4\l  %108 = mul nsw i32 %107, %5\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %32, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %112 = getelementptr inbounds float, float addrspace(1)* %50, i64 %109\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %114 = fsub contract float %113, %111\l  %115 = fcmp contract olt float %114, 0.000000e+00\l  %116 = fneg contract float %114\l  %117 = select contract i1 %115, float %116, float %114\l  %118 = fcmp contract olt float %106, %117\l  %119 = select contract i1 %118, float %117, float %106\l  %120 = or i32 %53, 5\l  %121 = mul nsw i32 %120, %5\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %32, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %125 = getelementptr inbounds float, float addrspace(1)* %50, i64 %122\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %127 = fsub contract float %126, %124\l  %128 = fcmp contract olt float %127, 0.000000e+00\l  %129 = fneg contract float %127\l  %130 = select contract i1 %128, float %129, float %127\l  %131 = fcmp contract olt float %119, %130\l  %132 = select contract i1 %131, float %130, float %119\l  %133 = or i32 %53, 6\l  %134 = mul nsw i32 %133, %5\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %32, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %138 = getelementptr inbounds float, float addrspace(1)* %50, i64 %135\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %140 = fsub contract float %139, %137\l  %141 = fcmp contract olt float %140, 0.000000e+00\l  %142 = fneg contract float %140\l  %143 = select contract i1 %141, float %142, float %140\l  %144 = fcmp contract olt float %132, %143\l  %145 = select contract i1 %144, float %143, float %132\l  %146 = or i32 %53, 7\l  %147 = mul nsw i32 %146, %5\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %32, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %151 = getelementptr inbounds float, float addrspace(1)* %50, i64 %148\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %153 = fsub contract float %152, %150\l  %154 = fcmp contract olt float %153, 0.000000e+00\l  %155 = fneg contract float %153\l  %156 = select contract i1 %154, float %155, float %153\l  %157 = fcmp contract olt float %145, %156\l  %158 = select contract i1 %157, float %156, float %145\l  %159 = add nuw nsw i32 %53, 8\l  %160 = add i32 %55, 8\l  %161 = icmp eq i32 %160, %36\l  br i1 %161, label %162, label %52, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5320d30:s0 -> Node0x5320ce0;
	Node0x5320d30:s1 -> Node0x5320d30;
	Node0x5320ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%162:\l162:                                              \l  %163 = phi float [ undef, %51 ], [ %158, %52 ]\l  %164 = phi i32 [ 0, %51 ], [ %159, %52 ]\l  %165 = phi float [ 0.000000e+00, %51 ], [ %158, %52 ]\l  br i1 %37, label %185, label %166\l|{<s0>T|<s1>F}}"];
	Node0x5320ce0:s0 -> Node0x5320ba0;
	Node0x5320ce0:s1 -> Node0x5326f70;
	Node0x5326f70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%166:\l166:                                              \l  %167 = phi i32 [ %182, %166 ], [ %164, %162 ]\l  %168 = phi float [ %181, %166 ], [ %165, %162 ]\l  %169 = phi i32 [ %183, %166 ], [ 0, %162 ]\l  %170 = mul nsw i32 %167, %5\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %32, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %174 = getelementptr inbounds float, float addrspace(1)* %50, i64 %171\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %176 = fsub contract float %175, %173\l  %177 = fcmp contract olt float %176, 0.000000e+00\l  %178 = fneg contract float %176\l  %179 = select contract i1 %177, float %178, float %176\l  %180 = fcmp contract olt float %168, %179\l  %181 = select contract i1 %180, float %179, float %168\l  %182 = add nuw nsw i32 %167, 1\l  %183 = add i32 %169, 1\l  %184 = icmp eq i32 %183, %34\l  br i1 %184, label %185, label %166, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5326f70:s0 -> Node0x5320ba0;
	Node0x5326f70:s1 -> Node0x5326f70;
	Node0x5320ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%185:\l185:                                              \l  %186 = phi float [ 0.000000e+00, %47 ], [ %163, %162 ], [ %181, %166 ]\l  %187 = fcmp contract ugt float %186, %24\l  br i1 %187, label %191, label %188\l|{<s0>T|<s1>F}}"];
	Node0x5320ba0:s0 -> Node0x5320600;
	Node0x5320ba0:s1 -> Node0x5327e60;
	Node0x5327e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%188:\l188:                                              \l  %189 = load i32, i32 addrspace(3)* %21, align 4, !tbaa !7\l  %190 = add nsw i32 %189, 1\l  store i32 %190, i32 addrspace(3)* %21, align 4, !tbaa !7\l  br label %191\l}"];
	Node0x5327e60 -> Node0x5320600;
	Node0x5320600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%191:\l191:                                              \l  %192 = add nuw nsw i32 %43, 1\l  %193 = icmp eq i32 %192, %4\l  br i1 %193, label %38, label %42, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5320600:s0 -> Node0x531f300;
	Node0x5320600:s1 -> Node0x531fac0;
	Node0x531de70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%194:\l194:                                              \l  ret void\l}"];
}
