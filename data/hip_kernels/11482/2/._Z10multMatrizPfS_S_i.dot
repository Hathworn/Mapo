digraph "CFG for '_Z10multMatrizPfS_S_i' function" {
	label="CFG for '_Z10multMatrizPfS_S_i' function";

	Node0x4928200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = mul i32 %6, %11\l  %16 = add i32 %15, %5\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 16\l  %24 = bitcast i8 addrspace(4)* %23 to i32 addrspace(4)*\l  %25 = load i32, i32 addrspace(4)* %24, align 8, !tbaa !16\l  %26 = mul i32 %18, %22\l  %27 = add i32 %26, %17\l  %28 = icmp slt i32 %16, %3\l  br i1 %28, label %29, label %193\l|{<s0>T|<s1>F}}"];
	Node0x4928200:s0 -> Node0x492c140;
	Node0x4928200:s1 -> Node0x492c1d0;
	Node0x492c140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%29:\l29:                                               \l  %30 = icmp slt i32 %27, %3\l  %31 = icmp eq i32 %3, 0\l  %32 = udiv i32 %14, %11\l  %33 = mul i32 %32, %11\l  %34 = icmp ugt i32 %14, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %11\l  %38 = and i32 %3, 7\l  %39 = icmp ult i32 %3, 8\l  %40 = and i32 %3, -8\l  %41 = icmp eq i32 %38, 0\l  br label %42\l}"];
	Node0x492c140 -> Node0x492cb50;
	Node0x492cb50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %16, %29 ], [ %191, %189 ]\l  %44 = phi float [ 0.000000e+00, %29 ], [ %190, %189 ]\l  br i1 %30, label %45, label %189\l|{<s0>T|<s1>F}}"];
	Node0x492cb50:s0 -> Node0x492d8f0;
	Node0x492cb50:s1 -> Node0x492cc40;
	Node0x492d8f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%45:\l45:                                               \l  %46 = udiv i32 %25, %22\l  %47 = mul i32 %46, %22\l  %48 = icmp ugt i32 %25, %47\l  %49 = zext i1 %48 to i32\l  %50 = add i32 %46, %49\l  %51 = mul i32 %50, %22\l  br label %52\l}"];
	Node0x492d8f0 -> Node0x492dd70;
	Node0x492dd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%52:\l52:                                               \l  %53 = phi i32 [ %27, %45 ], [ %85, %79 ]\l  %54 = phi float [ %44, %45 ], [ %81, %79 ]\l  br i1 %31, label %79, label %55\l|{<s0>T|<s1>F}}"];
	Node0x492dd70:s0 -> Node0x492de60;
	Node0x492dd70:s1 -> Node0x492e0c0;
	Node0x492e0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%55:\l55:                                               \l  %56 = mul nsw i32 %53, %3\l  br i1 %39, label %57, label %87\l|{<s0>T|<s1>F}}"];
	Node0x492e0c0:s0 -> Node0x492e290;
	Node0x492e0c0:s1 -> Node0x492e2e0;
	Node0x492e290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%57:\l57:                                               \l  %58 = phi float [ undef, %55 ], [ %185, %87 ]\l  %59 = phi i32 [ 0, %55 ], [ %186, %87 ]\l  %60 = phi float [ %54, %55 ], [ %185, %87 ]\l  br i1 %41, label %79, label %61\l|{<s0>T|<s1>F}}"];
	Node0x492e290:s0 -> Node0x492de60;
	Node0x492e290:s1 -> Node0x492eaf0;
	Node0x492eaf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = phi i32 [ %76, %61 ], [ %59, %57 ]\l  %63 = phi float [ %75, %61 ], [ %60, %57 ]\l  %64 = phi i32 [ %77, %61 ], [ 0, %57 ]\l  %65 = add i32 %62, %56\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !17\l  %69 = mul i32 %62, %3\l  %70 = add i32 %69, %43\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !17\l  %74 = fmul contract float %68, %73\l  %75 = fadd contract float %63, %74\l  %76 = add nuw i32 %62, 1\l  %77 = add i32 %64, 1\l  %78 = icmp eq i32 %77, %38\l  br i1 %78, label %79, label %61, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x492eaf0:s0 -> Node0x492de60;
	Node0x492eaf0:s1 -> Node0x492eaf0;
	Node0x492de60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%79:\l79:                                               \l  %80 = phi i32 [ 0, %52 ], [ %56, %61 ], [ %56, %57 ]\l  %81 = phi float [ %54, %52 ], [ %58, %57 ], [ %75, %61 ]\l  %82 = add nsw i32 %80, %43\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %2, i64 %83\l  store float %81, float addrspace(1)* %84, align 4, !tbaa !17\l  %85 = add i32 %51, %53\l  %86 = icmp slt i32 %85, %3\l  br i1 %86, label %52, label %189, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x492de60:s0 -> Node0x492dd70;
	Node0x492de60:s1 -> Node0x492cc40;
	Node0x492e2e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%87:\l87:                                               \l  %88 = phi i32 [ %186, %87 ], [ 0, %55 ]\l  %89 = phi float [ %185, %87 ], [ %54, %55 ]\l  %90 = phi i32 [ %187, %87 ], [ 0, %55 ]\l  %91 = add i32 %88, %56\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !17\l  %95 = mul i32 %88, %3\l  %96 = add i32 %95, %43\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !17\l  %100 = fmul contract float %94, %99\l  %101 = fadd contract float %89, %100\l  %102 = or i32 %88, 1\l  %103 = add i32 %102, %56\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !17\l  %107 = mul i32 %102, %3\l  %108 = add i32 %107, %43\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !17\l  %112 = fmul contract float %106, %111\l  %113 = fadd contract float %101, %112\l  %114 = or i32 %88, 2\l  %115 = add i32 %114, %56\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !17\l  %119 = mul i32 %114, %3\l  %120 = add i32 %119, %43\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !17\l  %124 = fmul contract float %118, %123\l  %125 = fadd contract float %113, %124\l  %126 = or i32 %88, 3\l  %127 = add i32 %126, %56\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !17\l  %131 = mul i32 %126, %3\l  %132 = add i32 %131, %43\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %1, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !17\l  %136 = fmul contract float %130, %135\l  %137 = fadd contract float %125, %136\l  %138 = or i32 %88, 4\l  %139 = add i32 %138, %56\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !17\l  %143 = mul i32 %138, %3\l  %144 = add i32 %143, %43\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %1, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !17\l  %148 = fmul contract float %142, %147\l  %149 = fadd contract float %137, %148\l  %150 = or i32 %88, 5\l  %151 = add i32 %150, %56\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %0, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !17\l  %155 = mul i32 %150, %3\l  %156 = add i32 %155, %43\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %1, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !17\l  %160 = fmul contract float %154, %159\l  %161 = fadd contract float %149, %160\l  %162 = or i32 %88, 6\l  %163 = add i32 %162, %56\l  %164 = zext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %0, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !17\l  %167 = mul i32 %162, %3\l  %168 = add i32 %167, %43\l  %169 = zext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %1, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !17\l  %172 = fmul contract float %166, %171\l  %173 = fadd contract float %161, %172\l  %174 = or i32 %88, 7\l  %175 = add i32 %174, %56\l  %176 = zext i32 %175 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %0, i64 %176\l  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !17\l  %179 = mul i32 %174, %3\l  %180 = add i32 %179, %43\l  %181 = zext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %1, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !17\l  %184 = fmul contract float %178, %183\l  %185 = fadd contract float %173, %184\l  %186 = add nuw i32 %88, 8\l  %187 = add i32 %90, 8\l  %188 = icmp eq i32 %187, %40\l  br i1 %188, label %57, label %87, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x492e2e0:s0 -> Node0x492e290;
	Node0x492e2e0:s1 -> Node0x492e2e0;
	Node0x492cc40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%189:\l189:                                              \l  %190 = phi float [ %44, %42 ], [ %81, %79 ]\l  %191 = add i32 %37, %43\l  %192 = icmp slt i32 %191, %3\l  br i1 %192, label %42, label %193, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x492cc40:s0 -> Node0x492cb50;
	Node0x492cc40:s1 -> Node0x492c1d0;
	Node0x492c1d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%193:\l193:                                              \l  ret void\l}"];
}
