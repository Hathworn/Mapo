digraph "CFG for '_Z21cross_entropy_forwardjjPKfS0_Pf' function" {
	label="CFG for '_Z21cross_entropy_forwardjjPKfS0_Pf' function";

	Node0x4be3470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp ult i32 %14, %0\l  br i1 %15, label %16, label %421\l|{<s0>T|<s1>F}}"];
	Node0x4be3470:s0 -> Node0x4be5370;
	Node0x4be3470:s1 -> Node0x4be5400;
	Node0x4be5370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%16:\l16:                                               \l  %17 = mul i32 %14, %1\l  %18 = zext i32 %17 to i64\l  %19 = getelementptr inbounds float, float addrspace(1)* %2, i64 %18\l  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %21 = icmp ugt i32 %1, 1\l  br i1 %21, label %22, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4be5370:s0 -> Node0x4be5ff0;
	Node0x4be5370:s1 -> Node0x4be6080;
	Node0x4be5ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = add i32 %1, -1\l  %24 = add i32 %1, -2\l  %25 = and i32 %23, 7\l  %26 = icmp ult i32 %24, 7\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4be5ff0:s0 -> Node0x4be6490;
	Node0x4be5ff0:s1 -> Node0x4be64e0;
	Node0x4be64e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%27:\l27:                                               \l  %28 = and i32 %23, -8\l  br label %54\l}"];
	Node0x4be64e0 -> Node0x4be66e0;
	Node0x4be6490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %22 ], [ %104, %54 ]\l  %31 = phi float [ %20, %22 ], [ %104, %54 ]\l  %32 = phi i32 [ 1, %22 ], [ %105, %54 ]\l  %33 = icmp eq i32 %25, 0\l  br i1 %33, label %46, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4be6490:s0 -> Node0x4be6080;
	Node0x4be6490:s1 -> Node0x4be5600;
	Node0x4be5600 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%34:\l34:                                               \l  %35 = phi float [ %42, %34 ], [ %31, %29 ]\l  %36 = phi i32 [ %43, %34 ], [ %32, %29 ]\l  %37 = phi i32 [ %44, %34 ], [ 0, %29 ]\l  %38 = add i32 %36, %17\l  %39 = zext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %2, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = tail call float @llvm.maxnum.f32(float %41, float %35)\l  %43 = add nuw nsw i32 %36, 1\l  %44 = add i32 %37, 1\l  %45 = icmp eq i32 %44, %25\l  br i1 %45, label %46, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4be5600:s0 -> Node0x4be6080;
	Node0x4be5600:s1 -> Node0x4be5600;
	Node0x4be6080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%46:\l46:                                               \l  %47 = phi float [ %20, %16 ], [ %30, %29 ], [ %42, %34 ]\l  %48 = icmp eq i32 %1, 0\l  br i1 %48, label %221, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4be6080:s0 -> Node0x4be8360;
	Node0x4be6080:s1 -> Node0x4be83b0;
	Node0x4be83b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%49:\l49:                                               \l  %50 = and i32 %1, 7\l  %51 = icmp ult i32 %1, 8\l  br i1 %51, label %108, label %52\l|{<s0>T|<s1>F}}"];
	Node0x4be83b0:s0 -> Node0x4be8610;
	Node0x4be83b0:s1 -> Node0x4be8660;
	Node0x4be8660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%52:\l52:                                               \l  %53 = and i32 %1, -8\l  br label %129\l}"];
	Node0x4be8660 -> Node0x4be8830;
	Node0x4be66e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%54:\l54:                                               \l  %55 = phi float [ %20, %27 ], [ %104, %54 ]\l  %56 = phi i32 [ 1, %27 ], [ %105, %54 ]\l  %57 = phi i32 [ 0, %27 ], [ %106, %54 ]\l  %58 = add i32 %56, %17\l  %59 = zext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %2, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %62 = tail call float @llvm.maxnum.f32(float %61, float %55)\l  %63 = add nuw nsw i32 %56, 1\l  %64 = add i32 %63, %17\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = tail call float @llvm.maxnum.f32(float %67, float %62)\l  %69 = add nuw nsw i32 %56, 2\l  %70 = add i32 %69, %17\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %2, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = tail call float @llvm.maxnum.f32(float %73, float %68)\l  %75 = add nuw nsw i32 %56, 3\l  %76 = add i32 %75, %17\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %2, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = tail call float @llvm.maxnum.f32(float %79, float %74)\l  %81 = add nuw nsw i32 %56, 4\l  %82 = add i32 %81, %17\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %2, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = tail call float @llvm.maxnum.f32(float %85, float %80)\l  %87 = add nuw nsw i32 %56, 5\l  %88 = add i32 %87, %17\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %2, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = tail call float @llvm.maxnum.f32(float %91, float %86)\l  %93 = add nuw nsw i32 %56, 6\l  %94 = add i32 %93, %17\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %2, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = tail call float @llvm.maxnum.f32(float %97, float %92)\l  %99 = add nuw nsw i32 %56, 7\l  %100 = add i32 %99, %17\l  %101 = zext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %2, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = tail call float @llvm.maxnum.f32(float %103, float %98)\l  %105 = add nuw nsw i32 %56, 8\l  %106 = add i32 %57, 8\l  %107 = icmp eq i32 %106, %28\l  br i1 %107, label %29, label %54, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4be66e0:s0 -> Node0x4be6490;
	Node0x4be66e0:s1 -> Node0x4be66e0;
	Node0x4be8610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%108:\l108:                                              \l  %109 = phi i32 [ 0, %49 ], [ %187, %129 ]\l  %110 = icmp eq i32 %50, 0\l  br i1 %110, label %123, label %111\l|{<s0>T|<s1>F}}"];
	Node0x4be8610:s0 -> Node0x4beb180;
	Node0x4be8610:s1 -> Node0x4beb1d0;
	Node0x4beb1d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%111:\l111:                                              \l  %112 = phi i32 [ %120, %111 ], [ %109, %108 ]\l  %113 = phi i32 [ %121, %111 ], [ 0, %108 ]\l  %114 = add i32 %112, %17\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %2, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7\l  %118 = fsub contract float %117, %47\l  %119 = getelementptr inbounds float, float addrspace(1)* %4, i64 %115\l  store float %118, float addrspace(1)* %119, align 4, !tbaa !7\l  %120 = add nuw nsw i32 %112, 1\l  %121 = add i32 %113, 1\l  %122 = icmp eq i32 %121, %50\l  br i1 %122, label %123, label %111, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4beb1d0:s0 -> Node0x4beb180;
	Node0x4beb1d0:s1 -> Node0x4beb1d0;
	Node0x4beb180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%123:\l123:                                              \l  br i1 %48, label %221, label %124\l|{<s0>T|<s1>F}}"];
	Node0x4beb180:s0 -> Node0x4be8360;
	Node0x4beb180:s1 -> Node0x4bebb90;
	Node0x4bebb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%124:\l124:                                              \l  %125 = and i32 %1, 3\l  %126 = icmp ult i32 %1, 4\l  br i1 %126, label %190, label %127\l|{<s0>T|<s1>F}}"];
	Node0x4bebb90:s0 -> Node0x4bebdb0;
	Node0x4bebb90:s1 -> Node0x4bebe00;
	Node0x4bebe00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%127:\l127:                                              \l  %128 = and i32 %1, -4\l  br label %241\l}"];
	Node0x4bebe00 -> Node0x4be9030;
	Node0x4be8830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%129:\l129:                                              \l  %130 = phi i32 [ 0, %52 ], [ %187, %129 ]\l  %131 = phi i32 [ 0, %52 ], [ %188, %129 ]\l  %132 = add i32 %130, %17\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %2, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7\l  %136 = fsub contract float %135, %47\l  %137 = getelementptr inbounds float, float addrspace(1)* %4, i64 %133\l  store float %136, float addrspace(1)* %137, align 4, !tbaa !7\l  %138 = or i32 %130, 1\l  %139 = add i32 %138, %17\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %2, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !7\l  %143 = fsub contract float %142, %47\l  %144 = getelementptr inbounds float, float addrspace(1)* %4, i64 %140\l  store float %143, float addrspace(1)* %144, align 4, !tbaa !7\l  %145 = or i32 %130, 2\l  %146 = add i32 %145, %17\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %2, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7\l  %150 = fsub contract float %149, %47\l  %151 = getelementptr inbounds float, float addrspace(1)* %4, i64 %147\l  store float %150, float addrspace(1)* %151, align 4, !tbaa !7\l  %152 = or i32 %130, 3\l  %153 = add i32 %152, %17\l  %154 = zext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %2, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7\l  %157 = fsub contract float %156, %47\l  %158 = getelementptr inbounds float, float addrspace(1)* %4, i64 %154\l  store float %157, float addrspace(1)* %158, align 4, !tbaa !7\l  %159 = or i32 %130, 4\l  %160 = add i32 %159, %17\l  %161 = zext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %2, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7\l  %164 = fsub contract float %163, %47\l  %165 = getelementptr inbounds float, float addrspace(1)* %4, i64 %161\l  store float %164, float addrspace(1)* %165, align 4, !tbaa !7\l  %166 = or i32 %130, 5\l  %167 = add i32 %166, %17\l  %168 = zext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %2, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !7\l  %171 = fsub contract float %170, %47\l  %172 = getelementptr inbounds float, float addrspace(1)* %4, i64 %168\l  store float %171, float addrspace(1)* %172, align 4, !tbaa !7\l  %173 = or i32 %130, 6\l  %174 = add i32 %173, %17\l  %175 = zext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %2, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !7\l  %178 = fsub contract float %177, %47\l  %179 = getelementptr inbounds float, float addrspace(1)* %4, i64 %175\l  store float %178, float addrspace(1)* %179, align 4, !tbaa !7\l  %180 = or i32 %130, 7\l  %181 = add i32 %180, %17\l  %182 = zext i32 %181 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %2, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !7\l  %185 = fsub contract float %184, %47\l  %186 = getelementptr inbounds float, float addrspace(1)* %4, i64 %182\l  store float %185, float addrspace(1)* %186, align 4, !tbaa !7\l  %187 = add nuw nsw i32 %130, 8\l  %188 = add i32 %131, 8\l  %189 = icmp eq i32 %188, %53\l  br i1 %189, label %108, label %129, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4be8830:s0 -> Node0x4be8610;
	Node0x4be8830:s1 -> Node0x4be8830;
	Node0x4bebdb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%190:\l190:                                              \l  %191 = phi float [ undef, %124 ], [ %323, %241 ]\l  %192 = phi i32 [ 0, %124 ], [ %324, %241 ]\l  %193 = phi float [ 0.000000e+00, %124 ], [ %323, %241 ]\l  %194 = icmp eq i32 %125, 0\l  br i1 %194, label %221, label %195\l|{<s0>T|<s1>F}}"];
	Node0x4bebdb0:s0 -> Node0x4be8360;
	Node0x4bebdb0:s1 -> Node0x4bef8c0;
	Node0x4bef8c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%195:\l195:                                              \l  %196 = phi i32 [ %218, %195 ], [ %192, %190 ]\l  %197 = phi float [ %217, %195 ], [ %193, %190 ]\l  %198 = phi i32 [ %219, %195 ], [ 0, %190 ]\l  %199 = add i32 %196, %17\l  %200 = zext i32 %199 to i64\l  %201 = getelementptr inbounds float, float addrspace(1)* %4, i64 %200\l  %202 = load float, float addrspace(1)* %201, align 4, !tbaa !7\l  %203 = fmul float %202, 0x3FF7154760000000\l  %204 = tail call float @llvm.rint.f32(float %203)\l  %205 = fcmp ogt float %202, 0x40562E4300000000\l  %206 = fcmp olt float %202, 0xC059D1DA00000000\l  %207 = fneg float %203\l  %208 = tail call float @llvm.fma.f32(float %202, float 0x3FF7154760000000,\l... float %207)\l  %209 = tail call float @llvm.fma.f32(float %202, float 0x3E54AE0BE0000000,\l... float %208)\l  %210 = fsub float %203, %204\l  %211 = fadd float %209, %210\l  %212 = tail call float @llvm.exp2.f32(float %211)\l  %213 = fptosi float %204 to i32\l  %214 = tail call float @llvm.amdgcn.ldexp.f32(float %212, i32 %213)\l  %215 = select i1 %206, float 0.000000e+00, float %214\l  %216 = select i1 %205, float 0x7FF0000000000000, float %215\l  %217 = fadd contract float %197, %216\l  %218 = add nuw nsw i32 %196, 1\l  %219 = add i32 %198, 1\l  %220 = icmp eq i32 %219, %125\l  br i1 %220, label %221, label %195, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4bef8c0:s0 -> Node0x4be8360;
	Node0x4bef8c0:s1 -> Node0x4bef8c0;
	Node0x4be8360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%221:\l221:                                              \l  %222 = phi float [ 0.000000e+00, %123 ], [ 0.000000e+00, %46 ], [ %191, %190\l... ], [ %217, %195 ]\l  %223 = tail call i1 @llvm.amdgcn.class.f32(float %222, i32 144)\l  %224 = select i1 %223, float 0x41F0000000000000, float 1.000000e+00\l  %225 = fmul float %222, %224\l  %226 = tail call float @llvm.log2.f32(float %225)\l  %227 = fmul float %226, 0x3FE62E42E0000000\l  %228 = tail call i1 @llvm.amdgcn.class.f32(float %226, i32 519)\l  %229 = fneg float %227\l  %230 = tail call float @llvm.fma.f32(float %226, float 0x3FE62E42E0000000,\l... float %229)\l  %231 = tail call float @llvm.fma.f32(float %226, float 0x3E6EFA39E0000000,\l... float %230)\l  %232 = fadd float %227, %231\l  %233 = select i1 %228, float %226, float %232\l  %234 = select i1 %223, float 0x40362E4300000000, float 0.000000e+00\l  %235 = fsub float %233, %234\l  br i1 %48, label %421, label %236\l|{<s0>T|<s1>F}}"];
	Node0x4be8360:s0 -> Node0x4be5400;
	Node0x4be8360:s1 -> Node0x4bf21a0;
	Node0x4bf21a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%236:\l236:                                              \l  %237 = and i32 %1, 7\l  %238 = icmp ult i32 %1, 8\l  br i1 %238, label %404, label %239\l|{<s0>T|<s1>F}}"];
	Node0x4bf21a0:s0 -> Node0x4bf2400;
	Node0x4bf21a0:s1 -> Node0x4bf2450;
	Node0x4bf2450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%239:\l239:                                              \l  %240 = and i32 %1, -8\l  br label %327\l}"];
	Node0x4bf2450 -> Node0x4bf2620;
	Node0x4be9030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%241:\l241:                                              \l  %242 = phi i32 [ 0, %127 ], [ %324, %241 ]\l  %243 = phi float [ 0.000000e+00, %127 ], [ %323, %241 ]\l  %244 = phi i32 [ 0, %127 ], [ %325, %241 ]\l  %245 = add i32 %242, %17\l  %246 = zext i32 %245 to i64\l  %247 = getelementptr inbounds float, float addrspace(1)* %4, i64 %246\l  %248 = load float, float addrspace(1)* %247, align 4, !tbaa !7\l  %249 = fmul float %248, 0x3FF7154760000000\l  %250 = tail call float @llvm.rint.f32(float %249)\l  %251 = fcmp ogt float %248, 0x40562E4300000000\l  %252 = fcmp olt float %248, 0xC059D1DA00000000\l  %253 = fneg float %249\l  %254 = tail call float @llvm.fma.f32(float %248, float 0x3FF7154760000000,\l... float %253)\l  %255 = tail call float @llvm.fma.f32(float %248, float 0x3E54AE0BE0000000,\l... float %254)\l  %256 = fsub float %249, %250\l  %257 = fadd float %255, %256\l  %258 = tail call float @llvm.exp2.f32(float %257)\l  %259 = fptosi float %250 to i32\l  %260 = tail call float @llvm.amdgcn.ldexp.f32(float %258, i32 %259)\l  %261 = select i1 %252, float 0.000000e+00, float %260\l  %262 = select i1 %251, float 0x7FF0000000000000, float %261\l  %263 = fadd contract float %243, %262\l  %264 = or i32 %242, 1\l  %265 = add i32 %264, %17\l  %266 = zext i32 %265 to i64\l  %267 = getelementptr inbounds float, float addrspace(1)* %4, i64 %266\l  %268 = load float, float addrspace(1)* %267, align 4, !tbaa !7\l  %269 = fmul float %268, 0x3FF7154760000000\l  %270 = tail call float @llvm.rint.f32(float %269)\l  %271 = fcmp ogt float %268, 0x40562E4300000000\l  %272 = fcmp olt float %268, 0xC059D1DA00000000\l  %273 = fneg float %269\l  %274 = tail call float @llvm.fma.f32(float %268, float 0x3FF7154760000000,\l... float %273)\l  %275 = tail call float @llvm.fma.f32(float %268, float 0x3E54AE0BE0000000,\l... float %274)\l  %276 = fsub float %269, %270\l  %277 = fadd float %275, %276\l  %278 = tail call float @llvm.exp2.f32(float %277)\l  %279 = fptosi float %270 to i32\l  %280 = tail call float @llvm.amdgcn.ldexp.f32(float %278, i32 %279)\l  %281 = select i1 %272, float 0.000000e+00, float %280\l  %282 = select i1 %271, float 0x7FF0000000000000, float %281\l  %283 = fadd contract float %263, %282\l  %284 = or i32 %242, 2\l  %285 = add i32 %284, %17\l  %286 = zext i32 %285 to i64\l  %287 = getelementptr inbounds float, float addrspace(1)* %4, i64 %286\l  %288 = load float, float addrspace(1)* %287, align 4, !tbaa !7\l  %289 = fmul float %288, 0x3FF7154760000000\l  %290 = tail call float @llvm.rint.f32(float %289)\l  %291 = fcmp ogt float %288, 0x40562E4300000000\l  %292 = fcmp olt float %288, 0xC059D1DA00000000\l  %293 = fneg float %289\l  %294 = tail call float @llvm.fma.f32(float %288, float 0x3FF7154760000000,\l... float %293)\l  %295 = tail call float @llvm.fma.f32(float %288, float 0x3E54AE0BE0000000,\l... float %294)\l  %296 = fsub float %289, %290\l  %297 = fadd float %295, %296\l  %298 = tail call float @llvm.exp2.f32(float %297)\l  %299 = fptosi float %290 to i32\l  %300 = tail call float @llvm.amdgcn.ldexp.f32(float %298, i32 %299)\l  %301 = select i1 %292, float 0.000000e+00, float %300\l  %302 = select i1 %291, float 0x7FF0000000000000, float %301\l  %303 = fadd contract float %283, %302\l  %304 = or i32 %242, 3\l  %305 = add i32 %304, %17\l  %306 = zext i32 %305 to i64\l  %307 = getelementptr inbounds float, float addrspace(1)* %4, i64 %306\l  %308 = load float, float addrspace(1)* %307, align 4, !tbaa !7\l  %309 = fmul float %308, 0x3FF7154760000000\l  %310 = tail call float @llvm.rint.f32(float %309)\l  %311 = fcmp ogt float %308, 0x40562E4300000000\l  %312 = fcmp olt float %308, 0xC059D1DA00000000\l  %313 = fneg float %309\l  %314 = tail call float @llvm.fma.f32(float %308, float 0x3FF7154760000000,\l... float %313)\l  %315 = tail call float @llvm.fma.f32(float %308, float 0x3E54AE0BE0000000,\l... float %314)\l  %316 = fsub float %309, %310\l  %317 = fadd float %315, %316\l  %318 = tail call float @llvm.exp2.f32(float %317)\l  %319 = fptosi float %310 to i32\l  %320 = tail call float @llvm.amdgcn.ldexp.f32(float %318, i32 %319)\l  %321 = select i1 %312, float 0.000000e+00, float %320\l  %322 = select i1 %311, float 0x7FF0000000000000, float %321\l  %323 = fadd contract float %303, %322\l  %324 = add nuw nsw i32 %242, 4\l  %325 = add i32 %244, 4\l  %326 = icmp eq i32 %325, %128\l  br i1 %326, label %190, label %241, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4be9030:s0 -> Node0x4bebdb0;
	Node0x4be9030:s1 -> Node0x4be9030;
	Node0x4bf2620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%327:\l327:                                              \l  %328 = phi i32 [ 0, %239 ], [ %401, %327 ]\l  %329 = phi i32 [ 0, %239 ], [ %402, %327 ]\l  %330 = add i32 %328, %17\l  %331 = zext i32 %330 to i64\l  %332 = getelementptr inbounds float, float addrspace(1)* %4, i64 %331\l  %333 = load float, float addrspace(1)* %332, align 4, !tbaa !7\l  %334 = fsub contract float %235, %333\l  %335 = getelementptr inbounds float, float addrspace(1)* %3, i64 %331\l  %336 = load float, float addrspace(1)* %335, align 4, !tbaa !7\l  %337 = fmul contract float %334, %336\l  store float %337, float addrspace(1)* %332, align 4, !tbaa !7\l  %338 = or i32 %328, 1\l  %339 = add i32 %338, %17\l  %340 = zext i32 %339 to i64\l  %341 = getelementptr inbounds float, float addrspace(1)* %4, i64 %340\l  %342 = load float, float addrspace(1)* %341, align 4, !tbaa !7\l  %343 = fsub contract float %235, %342\l  %344 = getelementptr inbounds float, float addrspace(1)* %3, i64 %340\l  %345 = load float, float addrspace(1)* %344, align 4, !tbaa !7\l  %346 = fmul contract float %343, %345\l  store float %346, float addrspace(1)* %341, align 4, !tbaa !7\l  %347 = or i32 %328, 2\l  %348 = add i32 %347, %17\l  %349 = zext i32 %348 to i64\l  %350 = getelementptr inbounds float, float addrspace(1)* %4, i64 %349\l  %351 = load float, float addrspace(1)* %350, align 4, !tbaa !7\l  %352 = fsub contract float %235, %351\l  %353 = getelementptr inbounds float, float addrspace(1)* %3, i64 %349\l  %354 = load float, float addrspace(1)* %353, align 4, !tbaa !7\l  %355 = fmul contract float %352, %354\l  store float %355, float addrspace(1)* %350, align 4, !tbaa !7\l  %356 = or i32 %328, 3\l  %357 = add i32 %356, %17\l  %358 = zext i32 %357 to i64\l  %359 = getelementptr inbounds float, float addrspace(1)* %4, i64 %358\l  %360 = load float, float addrspace(1)* %359, align 4, !tbaa !7\l  %361 = fsub contract float %235, %360\l  %362 = getelementptr inbounds float, float addrspace(1)* %3, i64 %358\l  %363 = load float, float addrspace(1)* %362, align 4, !tbaa !7\l  %364 = fmul contract float %361, %363\l  store float %364, float addrspace(1)* %359, align 4, !tbaa !7\l  %365 = or i32 %328, 4\l  %366 = add i32 %365, %17\l  %367 = zext i32 %366 to i64\l  %368 = getelementptr inbounds float, float addrspace(1)* %4, i64 %367\l  %369 = load float, float addrspace(1)* %368, align 4, !tbaa !7\l  %370 = fsub contract float %235, %369\l  %371 = getelementptr inbounds float, float addrspace(1)* %3, i64 %367\l  %372 = load float, float addrspace(1)* %371, align 4, !tbaa !7\l  %373 = fmul contract float %370, %372\l  store float %373, float addrspace(1)* %368, align 4, !tbaa !7\l  %374 = or i32 %328, 5\l  %375 = add i32 %374, %17\l  %376 = zext i32 %375 to i64\l  %377 = getelementptr inbounds float, float addrspace(1)* %4, i64 %376\l  %378 = load float, float addrspace(1)* %377, align 4, !tbaa !7\l  %379 = fsub contract float %235, %378\l  %380 = getelementptr inbounds float, float addrspace(1)* %3, i64 %376\l  %381 = load float, float addrspace(1)* %380, align 4, !tbaa !7\l  %382 = fmul contract float %379, %381\l  store float %382, float addrspace(1)* %377, align 4, !tbaa !7\l  %383 = or i32 %328, 6\l  %384 = add i32 %383, %17\l  %385 = zext i32 %384 to i64\l  %386 = getelementptr inbounds float, float addrspace(1)* %4, i64 %385\l  %387 = load float, float addrspace(1)* %386, align 4, !tbaa !7\l  %388 = fsub contract float %235, %387\l  %389 = getelementptr inbounds float, float addrspace(1)* %3, i64 %385\l  %390 = load float, float addrspace(1)* %389, align 4, !tbaa !7\l  %391 = fmul contract float %388, %390\l  store float %391, float addrspace(1)* %386, align 4, !tbaa !7\l  %392 = or i32 %328, 7\l  %393 = add i32 %392, %17\l  %394 = zext i32 %393 to i64\l  %395 = getelementptr inbounds float, float addrspace(1)* %4, i64 %394\l  %396 = load float, float addrspace(1)* %395, align 4, !tbaa !7\l  %397 = fsub contract float %235, %396\l  %398 = getelementptr inbounds float, float addrspace(1)* %3, i64 %394\l  %399 = load float, float addrspace(1)* %398, align 4, !tbaa !7\l  %400 = fmul contract float %397, %399\l  store float %400, float addrspace(1)* %395, align 4, !tbaa !7\l  %401 = add nuw nsw i32 %328, 8\l  %402 = add i32 %329, 8\l  %403 = icmp eq i32 %402, %240\l  br i1 %403, label %404, label %327, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4bf2620:s0 -> Node0x4bf2400;
	Node0x4bf2620:s1 -> Node0x4bf2620;
	Node0x4bf2400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%404:\l404:                                              \l  %405 = phi i32 [ 0, %236 ], [ %401, %327 ]\l  %406 = icmp eq i32 %237, 0\l  br i1 %406, label %421, label %407\l|{<s0>T|<s1>F}}"];
	Node0x4bf2400:s0 -> Node0x4be5400;
	Node0x4bf2400:s1 -> Node0x4bfaa80;
	Node0x4bfaa80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%407:\l407:                                              \l  %408 = phi i32 [ %418, %407 ], [ %405, %404 ]\l  %409 = phi i32 [ %419, %407 ], [ 0, %404 ]\l  %410 = add i32 %408, %17\l  %411 = zext i32 %410 to i64\l  %412 = getelementptr inbounds float, float addrspace(1)* %4, i64 %411\l  %413 = load float, float addrspace(1)* %412, align 4, !tbaa !7\l  %414 = fsub contract float %235, %413\l  %415 = getelementptr inbounds float, float addrspace(1)* %3, i64 %411\l  %416 = load float, float addrspace(1)* %415, align 4, !tbaa !7\l  %417 = fmul contract float %414, %416\l  store float %417, float addrspace(1)* %412, align 4, !tbaa !7\l  %418 = add nuw nsw i32 %408, 1\l  %419 = add i32 %409, 1\l  %420 = icmp eq i32 %419, %237\l  br i1 %420, label %421, label %407, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4bfaa80:s0 -> Node0x4be5400;
	Node0x4bfaa80:s1 -> Node0x4bfaa80;
	Node0x4be5400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%421:\l421:                                              \l  ret void\l}"];
}
