digraph "CFG for '_Z17GPUKernelFunctionyfP8atomdescPyi' function" {
	label="CFG for '_Z17GPUKernelFunctionyfP8atomdescPyi' function";

	Node0x5de4c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = mul i32 %6, %11\l  %16 = zext i32 %15 to i64\l  %17 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %2, i64 %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = zext i32 %18 to i64\l  %20 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %17, i64 %19\l  %21 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %20, i64 0, i32 0\l  %22 = load float, float addrspace(1)* %21, align 4, !tbaa.struct !16,\l... !amdgpu.noclobber !5\l  %23 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %20, i64 0, i32 1\l  %24 = load float, float addrspace(1)* %23, align 4, !tbaa.struct !21,\l... !amdgpu.noclobber !5\l  %25 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %20, i64 0, i32 2\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa.struct !22,\l... !amdgpu.noclobber !5\l  %27 = icmp slt i32 %18, %4\l  br i1 %27, label %28, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5de4c60:s0 -> Node0x5de7f40;
	Node0x5de4c60:s1 -> Node0x5de7fd0;
	Node0x5de7f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%28:\l28:                                               \l  %29 = phi i32 [ %31, %28 ], [ %18, %5 ]\l  %30 = getelementptr inbounds [0 x i64], [0 x i64] addrspace(3)* @SHist, i32\l... 0, i32 %29\l  store i64 0, i64 addrspace(3)* %30, align 8, !tbaa !23\l  %31 = add i32 %29, %11\l  %32 = icmp slt i32 %31, %4\l  br i1 %32, label %28, label %33, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5de7f40:s0 -> Node0x5de7f40;
	Node0x5de7f40:s1 -> Node0x5de7fd0;
	Node0x5de7fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%33:\l33:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %34 = add nuw nsw i32 %18, 1\l  %35 = icmp ult i32 %34, %11\l  %36 = add i32 %34, %15\l  %37 = zext i32 %36 to i64\l  %38 = icmp ult i64 %37, %0\l  %39 = select i1 %35, i1 %38, i1 false\l  br i1 %39, label %40, label %89\l|{<s0>T|<s1>F}}"];
	Node0x5de7fd0:s0 -> Node0x5de8e30;
	Node0x5de7fd0:s1 -> Node0x5de8ec0;
	Node0x5de8e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%40:\l40:                                               \l  %41 = phi i32 [ %83, %40 ], [ %34, %33 ]\l  %42 = zext i32 %41 to i64\l  %43 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %17, i64 %42\l  %44 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %43, i64 0, i32 0\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa.struct !16,\l... !amdgpu.noclobber !5\l  %46 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %43, i64 0, i32 1\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa.struct !21,\l... !amdgpu.noclobber !5\l  %48 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %43, i64 0, i32 2\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa.struct !22,\l... !amdgpu.noclobber !5\l  %50 = fsub contract float %22, %45\l  %51 = fmul contract float %50, %50\l  %52 = fsub contract float %24, %47\l  %53 = fmul contract float %52, %52\l  %54 = fadd contract float %51, %53\l  %55 = fsub contract float %26, %49\l  %56 = fmul contract float %55, %55\l  %57 = fadd contract float %54, %56\l  %58 = fcmp olt float %57, 0x39F0000000000000\l  %59 = select i1 %58, float 0x41F0000000000000, float 1.000000e+00\l  %60 = fmul float %57, %59\l  %61 = tail call float @llvm.sqrt.f32(float %60)\l  %62 = bitcast float %61 to i32\l  %63 = add nsw i32 %62, -1\l  %64 = bitcast i32 %63 to float\l  %65 = add nsw i32 %62, 1\l  %66 = bitcast i32 %65 to float\l  %67 = tail call i1 @llvm.amdgcn.class.f32(float %60, i32 608)\l  %68 = select i1 %58, float 0x3EF0000000000000, float 1.000000e+00\l  %69 = fneg float %66\l  %70 = tail call float @llvm.fma.f32(float %69, float %61, float %60)\l  %71 = fcmp ogt float %70, 0.000000e+00\l  %72 = fneg float %64\l  %73 = tail call float @llvm.fma.f32(float %72, float %61, float %60)\l  %74 = fcmp ole float %73, 0.000000e+00\l  %75 = select i1 %74, float %64, float %61\l  %76 = select i1 %71, float %66, float %75\l  %77 = fmul float %68, %76\l  %78 = select i1 %67, float %60, float %77\l  %79 = fdiv contract float %78, %1\l  %80 = fptosi float %79 to i32\l  %81 = getelementptr inbounds [0 x i64], [0 x i64] addrspace(3)* @SHist, i32\l... 0, i32 %80\l  %82 = atomicrmw add i64 addrspace(3)* %81, i64 1 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %83 = add nuw nsw i32 %41, 1\l  %84 = icmp ult i32 %83, %11\l  %85 = add i32 %83, %15\l  %86 = zext i32 %85 to i64\l  %87 = icmp ult i64 %86, %0\l  %88 = select i1 %84, i1 %87, i1 false\l  br i1 %88, label %40, label %89, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x5de8e30:s0 -> Node0x5de8e30;
	Node0x5de8e30:s1 -> Node0x5de8ec0;
	Node0x5de8ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%89:\l89:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %90 = udiv i32 %14, %11\l  %91 = mul i32 %90, %11\l  %92 = icmp ugt i32 %14, %91\l  %93 = zext i1 %92 to i32\l  %94 = add i32 %90, -1\l  %95 = add i32 %94, %93\l  %96 = add i32 %6, 1\l  %97 = icmp ult i32 %96, %95\l  %98 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %17, i64 %19, i32 0\l  %99 = load float, float addrspace(1)* %98, align 4\l  %100 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %17, i64 %19, i32 1\l  %101 = load float, float addrspace(1)* %100, align 4\l  %102 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %17, i64 %19, i32 2\l  %103 = load float, float addrspace(1)* %102, align 4\l  br i1 %97, label %104, label %156\l|{<s0>T|<s1>F}}"];
	Node0x5de8ec0:s0 -> Node0x5dedde0;
	Node0x5de8ec0:s1 -> Node0x5dede30;
	Node0x5dedde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%104:\l104:                                              \l  %105 = phi i32 [ %154, %153 ], [ %96, %89 ]\l  %106 = mul i32 %105, %11\l  %107 = zext i32 %106 to i64\l  %108 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %2, i64 %107\l  br label %109\l}"];
	Node0x5dedde0 -> Node0x5dee250;
	Node0x5dee250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%109:\l109:                                              \l  %110 = phi i32 [ %151, %109 ], [ 0, %104 ]\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %108, i64 %111, i32 0\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !28,\l... !amdgpu.noclobber !5\l  %114 = fsub contract float %99, %113\l  %115 = fmul contract float %114, %114\l  %116 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %108, i64 %111, i32 1\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !30,\l... !amdgpu.noclobber !5\l  %118 = fsub contract float %101, %117\l  %119 = fmul contract float %118, %118\l  %120 = fadd contract float %115, %119\l  %121 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %108, i64 %111, i32 2\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !31,\l... !amdgpu.noclobber !5\l  %123 = fsub contract float %103, %122\l  %124 = fmul contract float %123, %123\l  %125 = fadd contract float %120, %124\l  %126 = fcmp olt float %125, 0x39F0000000000000\l  %127 = select i1 %126, float 0x41F0000000000000, float 1.000000e+00\l  %128 = fmul float %125, %127\l  %129 = tail call float @llvm.sqrt.f32(float %128)\l  %130 = bitcast float %129 to i32\l  %131 = add nsw i32 %130, -1\l  %132 = bitcast i32 %131 to float\l  %133 = add nsw i32 %130, 1\l  %134 = bitcast i32 %133 to float\l  %135 = tail call i1 @llvm.amdgcn.class.f32(float %128, i32 608)\l  %136 = select i1 %126, float 0x3EF0000000000000, float 1.000000e+00\l  %137 = fneg float %134\l  %138 = tail call float @llvm.fma.f32(float %137, float %129, float %128)\l  %139 = fcmp ogt float %138, 0.000000e+00\l  %140 = fneg float %132\l  %141 = tail call float @llvm.fma.f32(float %140, float %129, float %128)\l  %142 = fcmp ole float %141, 0.000000e+00\l  %143 = select i1 %142, float %132, float %129\l  %144 = select i1 %139, float %134, float %143\l  %145 = fmul float %136, %144\l  %146 = select i1 %135, float %128, float %145\l  %147 = fdiv contract float %146, %1\l  %148 = fptosi float %147 to i32\l  %149 = getelementptr inbounds [0 x i64], [0 x i64] addrspace(3)* @SHist, i32\l... 0, i32 %148\l  %150 = atomicrmw add i64 addrspace(3)* %149, i64 1 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %151 = add nuw nsw i32 %110, 1\l  %152 = icmp eq i32 %151, %11\l  br i1 %152, label %153, label %109, !llvm.loop !32\l|{<s0>T|<s1>F}}"];
	Node0x5dee250:s0 -> Node0x5dedf70;
	Node0x5dee250:s1 -> Node0x5dee250;
	Node0x5dedf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%153:\l153:                                              \l  %154 = add i32 %105, 1\l  %155 = icmp ult i32 %154, %95\l  br i1 %155, label %104, label %156, !llvm.loop !33\l|{<s0>T|<s1>F}}"];
	Node0x5dedf70:s0 -> Node0x5dedde0;
	Node0x5dedf70:s1 -> Node0x5dede30;
	Node0x5dede30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%156:\l156:                                              \l  %157 = phi i32 [ %96, %89 ], [ %154, %153 ]\l  %158 = mul i32 %157, %11\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %2, i64 %159\l  %161 = trunc i64 %0 to i32\l  %162 = sub i32 %161, %158\l  %163 = icmp sgt i32 %162, 0\l  br i1 %163, label %164, label %208\l|{<s0>T|<s1>F}}"];
	Node0x5dede30:s0 -> Node0x5df0ea0;
	Node0x5dede30:s1 -> Node0x5df0ef0;
	Node0x5df0ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%164:\l164:                                              \l  %165 = phi i32 [ %206, %164 ], [ 0, %156 ]\l  %166 = zext i32 %165 to i64\l  %167 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %160, i64 %166, i32 0\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !28,\l... !amdgpu.noclobber !5\l  %169 = fsub contract float %99, %168\l  %170 = fmul contract float %169, %169\l  %171 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %160, i64 %166, i32 1\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !30,\l... !amdgpu.noclobber !5\l  %173 = fsub contract float %101, %172\l  %174 = fmul contract float %173, %173\l  %175 = fadd contract float %170, %174\l  %176 = getelementptr inbounds %struct.atomdesc, %struct.atomdesc\l... addrspace(1)* %160, i64 %166, i32 2\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !31,\l... !amdgpu.noclobber !5\l  %178 = fsub contract float %103, %177\l  %179 = fmul contract float %178, %178\l  %180 = fadd contract float %175, %179\l  %181 = fcmp olt float %180, 0x39F0000000000000\l  %182 = select i1 %181, float 0x41F0000000000000, float 1.000000e+00\l  %183 = fmul float %180, %182\l  %184 = tail call float @llvm.sqrt.f32(float %183)\l  %185 = bitcast float %184 to i32\l  %186 = add nsw i32 %185, -1\l  %187 = bitcast i32 %186 to float\l  %188 = add nsw i32 %185, 1\l  %189 = bitcast i32 %188 to float\l  %190 = tail call i1 @llvm.amdgcn.class.f32(float %183, i32 608)\l  %191 = select i1 %181, float 0x3EF0000000000000, float 1.000000e+00\l  %192 = fneg float %189\l  %193 = tail call float @llvm.fma.f32(float %192, float %184, float %183)\l  %194 = fcmp ogt float %193, 0.000000e+00\l  %195 = fneg float %187\l  %196 = tail call float @llvm.fma.f32(float %195, float %184, float %183)\l  %197 = fcmp ole float %196, 0.000000e+00\l  %198 = select i1 %197, float %187, float %184\l  %199 = select i1 %194, float %189, float %198\l  %200 = fmul float %191, %199\l  %201 = select i1 %190, float %183, float %200\l  %202 = fdiv contract float %201, %1\l  %203 = fptosi float %202 to i32\l  %204 = getelementptr inbounds [0 x i64], [0 x i64] addrspace(3)* @SHist, i32\l... 0, i32 %203\l  %205 = atomicrmw add i64 addrspace(3)* %204, i64 1 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  %206 = add nuw nsw i32 %165, 1\l  %207 = icmp eq i32 %206, %162\l  br i1 %207, label %208, label %164, !llvm.loop !32\l|{<s0>T|<s1>F}}"];
	Node0x5df0ea0:s0 -> Node0x5df0ef0;
	Node0x5df0ea0:s1 -> Node0x5df0ea0;
	Node0x5df0ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%208:\l208:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %27, label %209, label %223\l|{<s0>T|<s1>F}}"];
	Node0x5df0ef0:s0 -> Node0x5df4620;
	Node0x5df0ef0:s1 -> Node0x5df4670;
	Node0x5df4620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%209:\l209:                                              \l  %210 = mul i32 %6, %4\l  %211 = zext i32 %210 to i64\l  %212 = getelementptr inbounds i64, i64 addrspace(1)* %3, i64 %211\l  br label %213\l}"];
	Node0x5df4620 -> Node0x5df4910;
	Node0x5df4910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%213:\l213:                                              \l  %214 = phi i32 [ %18, %209 ], [ %221, %213 ]\l  %215 = sext i32 %214 to i64\l  %216 = getelementptr inbounds [0 x i64], [0 x i64] addrspace(3)* @SHist, i32\l... 0, i32 %214\l  %217 = load i64, i64 addrspace(3)* %216, align 8, !tbaa !23\l  %218 = getelementptr inbounds i64, i64 addrspace(1)* %212, i64 %215\l  %219 = load i64, i64 addrspace(1)* %218, align 8, !tbaa !23\l  %220 = add i64 %219, %217\l  store i64 %220, i64 addrspace(1)* %218, align 8, !tbaa !23\l  %221 = add i32 %214, %11\l  %222 = icmp slt i32 %221, %4\l  br i1 %222, label %213, label %223, !llvm.loop !34\l|{<s0>T|<s1>F}}"];
	Node0x5df4910:s0 -> Node0x5df4910;
	Node0x5df4910:s1 -> Node0x5df4670;
	Node0x5df4670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%223:\l223:                                              \l  ret void\l}"];
}
