digraph "CFG for '_Z26conv_vertical_naive_outputiPfPKfS1_iii' function" {
	label="CFG for '_Z26conv_vertical_naive_outputiPfPKfS1_iii' function";

	Node0x48c1640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = mul i32 %8, %13\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %36\l|{<s0>T|<s1>F}}"];
	Node0x48c1640:s0 -> Node0x48c38a0;
	Node0x48c1640:s1 -> Node0x48c3930;
	Node0x48c38a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%21:\l21:                                               \l  %22 = add i32 %4, 1\l  %23 = sub i32 %22, %6\l  %24 = mul nsw i32 %23, %5\l  %25 = icmp sgt i32 %6, 0\l  %26 = udiv i32 %16, %13\l  %27 = mul i32 %26, %13\l  %28 = icmp ugt i32 %16, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = mul i32 %30, %13\l  %32 = and i32 %6, 3\l  %33 = icmp ult i32 %6, 4\l  %34 = and i32 %6, -4\l  %35 = icmp eq i32 %32, 0\l  br label %37\l}"];
	Node0x48c38a0 -> Node0x48c4410;
	Node0x48c3930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%36:\l36:                                               \l  ret void\l}"];
	Node0x48c4410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%37:\l37:                                               \l  %38 = phi i32 [ %19, %21 ], [ %73, %72 ]\l  %39 = freeze i32 %38\l  %40 = freeze i32 %24\l  %41 = sdiv i32 %39, %40\l  %42 = mul i32 %41, %4\l  %43 = mul i32 %41, %40\l  %44 = sub i32 %39, %43\l  %45 = mul nsw i32 %41, %6\l  br i1 %25, label %46, label %72\l|{<s0>T|<s1>F}}"];
	Node0x48c4410:s0 -> Node0x48c4a00;
	Node0x48c4410:s1 -> Node0x48c4550;
	Node0x48c4a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%46:\l46:                                               \l  %47 = sext i32 %38 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %1, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !16\l  br i1 %33, label %50, label %75\l|{<s0>T|<s1>F}}"];
	Node0x48c4a00:s0 -> Node0x48c4df0;
	Node0x48c4a00:s1 -> Node0x48c4e80;
	Node0x48c4df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%50:\l50:                                               \l  %51 = phi float [ %49, %46 ], [ %129, %75 ]\l  %52 = phi i32 [ 0, %46 ], [ %130, %75 ]\l  br i1 %35, label %72, label %53\l|{<s0>T|<s1>F}}"];
	Node0x48c4df0:s0 -> Node0x48c4550;
	Node0x48c4df0:s1 -> Node0x48c5190;
	Node0x48c5190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = phi float [ %68, %53 ], [ %51, %50 ]\l  %55 = phi i32 [ %69, %53 ], [ %52, %50 ]\l  %56 = phi i32 [ %70, %53 ], [ 0, %50 ]\l  %57 = add nsw i32 %55, %45\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %3, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !16\l  %61 = add i32 %55, %42\l  %62 = mul i32 %61, %5\l  %63 = add i32 %62, %44\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16\l  %67 = fmul contract float %60, %66\l  %68 = fadd contract float %54, %67\l  store float %68, float addrspace(1)* %48, align 4, !tbaa !16\l  %69 = add nuw nsw i32 %55, 1\l  %70 = add i32 %56, 1\l  %71 = icmp eq i32 %70, %32\l  br i1 %71, label %72, label %53, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x48c5190:s0 -> Node0x48c4550;
	Node0x48c5190:s1 -> Node0x48c5190;
	Node0x48c4550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%72:\l72:                                               \l  %73 = add i32 %31, %38\l  %74 = icmp slt i32 %73, %0\l  br i1 %74, label %37, label %36, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x48c4550:s0 -> Node0x48c4410;
	Node0x48c4550:s1 -> Node0x48c3930;
	Node0x48c4e80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%75:\l75:                                               \l  %76 = phi float [ %129, %75 ], [ %49, %46 ]\l  %77 = phi i32 [ %130, %75 ], [ 0, %46 ]\l  %78 = phi i32 [ %131, %75 ], [ 0, %46 ]\l  %79 = add nsw i32 %77, %45\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %3, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = add i32 %77, %42\l  %84 = mul i32 %83, %5\l  %85 = add i32 %84, %44\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %2, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = fmul contract float %82, %88\l  %90 = fadd contract float %76, %89\l  store float %90, float addrspace(1)* %48, align 4, !tbaa !16\l  %91 = or i32 %77, 1\l  %92 = add nsw i32 %91, %45\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %3, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16\l  %96 = add i32 %91, %42\l  %97 = mul i32 %96, %5\l  %98 = add i32 %97, %44\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %2, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16\l  %102 = fmul contract float %95, %101\l  %103 = fadd contract float %90, %102\l  store float %103, float addrspace(1)* %48, align 4, !tbaa !16\l  %104 = or i32 %77, 2\l  %105 = add nsw i32 %104, %45\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %3, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16\l  %109 = add i32 %104, %42\l  %110 = mul i32 %109, %5\l  %111 = add i32 %110, %44\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %2, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = fmul contract float %108, %114\l  %116 = fadd contract float %103, %115\l  store float %116, float addrspace(1)* %48, align 4, !tbaa !16\l  %117 = or i32 %77, 3\l  %118 = add nsw i32 %117, %45\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %3, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !16\l  %122 = add i32 %117, %42\l  %123 = mul i32 %122, %5\l  %124 = add i32 %123, %44\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %2, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !16\l  %128 = fmul contract float %121, %127\l  %129 = fadd contract float %116, %128\l  store float %129, float addrspace(1)* %48, align 4, !tbaa !16\l  %130 = add nuw nsw i32 %77, 4\l  %131 = add i32 %78, 4\l  %132 = icmp eq i32 %131, %34\l  br i1 %132, label %50, label %75, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x48c4e80:s0 -> Node0x48c4df0;
	Node0x48c4e80:s1 -> Node0x48c4e80;
}
