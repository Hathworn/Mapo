digraph "CFG for '_Z31conv_horizontal_naive_gradParamiPfPKfS1_iii' function" {
	label="CFG for '_Z31conv_horizontal_naive_gradParamiPfPKfS1_iii' function";

	Node0x4a2b1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = mul i32 %8, %13\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %37\l|{<s0>T|<s1>F}}"];
	Node0x4a2b1c0:s0 -> Node0x4a2d420;
	Node0x4a2b1c0:s1 -> Node0x4a2d4b0;
	Node0x4a2d420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%21:\l21:                                               \l  %22 = add nsw i32 %4, -1\l  %23 = add i32 %22, %6\l  %24 = mul i32 %6, %5\l  %25 = icmp sgt i32 %5, 0\l  %26 = icmp sgt i32 %6, 0\l  %27 = udiv i32 %16, %13\l  %28 = mul i32 %27, %13\l  %29 = icmp ugt i32 %16, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %13\l  %33 = and i32 %6, 7\l  %34 = icmp ult i32 %6, 8\l  %35 = and i32 %6, -8\l  %36 = icmp eq i32 %33, 0\l  br label %38\l}"];
	Node0x4a2d420 -> Node0x4a2e020;
	Node0x4a2d4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%37:\l37:                                               \l  ret void\l}"];
	Node0x4a2e020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%38:\l38:                                               \l  %39 = phi i32 [ %19, %21 ], [ %56, %55 ]\l  %40 = freeze i32 %39\l  %41 = freeze i32 %4\l  %42 = sdiv i32 %40, %41\l  %43 = mul i32 %24, %42\l  %44 = mul i32 %42, %41\l  %45 = sub i32 %40, %44\l  br i1 %25, label %46, label %55\l|{<s0>T|<s1>F}}"];
	Node0x4a2e020:s0 -> Node0x4a2e580;
	Node0x4a2e020:s1 -> Node0x4a2e160;
	Node0x4a2e580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%46:\l46:                                               \l  %47 = sext i32 %39 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %1, i64 %47\l  br label %49\l}"];
	Node0x4a2e580 -> Node0x4a2e7d0;
	Node0x4a2e7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%49:\l49:                                               \l  %50 = phi i32 [ 0, %46 ], [ %81, %80 ]\l  br i1 %26, label %51, label %80\l|{<s0>T|<s1>F}}"];
	Node0x4a2e7d0:s0 -> Node0x4a2ea00;
	Node0x4a2e7d0:s1 -> Node0x4a2e8c0;
	Node0x4a2ea00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%51:\l51:                                               \l  %52 = mul nsw i32 %50, %6\l  %53 = mul nsw i32 %50, %23\l  %54 = load float, float addrspace(1)* %48, align 4, !tbaa !16\l  br i1 %34, label %58, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4a2ea00:s0 -> Node0x4a2ee00;
	Node0x4a2ea00:s1 -> Node0x4a2ee90;
	Node0x4a2e160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%55:\l55:                                               \l  %56 = add i32 %32, %39\l  %57 = icmp slt i32 %56, %0\l  br i1 %57, label %38, label %37, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4a2e160:s0 -> Node0x4a2e020;
	Node0x4a2e160:s1 -> Node0x4a2d4b0;
	Node0x4a2ee00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%58:\l58:                                               \l  %59 = phi float [ %54, %51 ], [ %189, %83 ]\l  %60 = phi i32 [ 0, %51 ], [ %190, %83 ]\l  br i1 %36, label %80, label %61\l|{<s0>T|<s1>F}}"];
	Node0x4a2ee00:s0 -> Node0x4a2e8c0;
	Node0x4a2ee00:s1 -> Node0x4a2f400;
	Node0x4a2f400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = phi float [ %76, %61 ], [ %59, %58 ]\l  %63 = phi i32 [ %77, %61 ], [ %60, %58 ]\l  %64 = phi i32 [ %78, %61 ], [ 0, %58 ]\l  %65 = add i32 %63, %43\l  %66 = add i32 %65, %52\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %3, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16\l  %70 = add i32 %65, %45\l  %71 = add i32 %70, %53\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %2, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16\l  %75 = fmul contract float %69, %74\l  %76 = fadd contract float %62, %75\l  store float %76, float addrspace(1)* %48, align 4, !tbaa !16\l  %77 = add nuw nsw i32 %63, 1\l  %78 = add i32 %64, 1\l  %79 = icmp eq i32 %78, %33\l  br i1 %79, label %80, label %61, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4a2f400:s0 -> Node0x4a2e8c0;
	Node0x4a2f400:s1 -> Node0x4a2f400;
	Node0x4a2e8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%80:\l80:                                               \l  %81 = add nuw nsw i32 %50, 1\l  %82 = icmp eq i32 %81, %5\l  br i1 %82, label %55, label %49, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4a2e8c0:s0 -> Node0x4a2e160;
	Node0x4a2e8c0:s1 -> Node0x4a2e7d0;
	Node0x4a2ee90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%83:\l83:                                               \l  %84 = phi float [ %189, %83 ], [ %54, %51 ]\l  %85 = phi i32 [ %190, %83 ], [ 0, %51 ]\l  %86 = phi i32 [ %191, %83 ], [ 0, %51 ]\l  %87 = add i32 %85, %43\l  %88 = add i32 %87, %52\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %3, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !16\l  %92 = add i32 %87, %45\l  %93 = add i32 %92, %53\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %2, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16\l  %97 = fmul contract float %91, %96\l  %98 = fadd contract float %84, %97\l  store float %98, float addrspace(1)* %48, align 4, !tbaa !16\l  %99 = or i32 %85, 1\l  %100 = add i32 %99, %43\l  %101 = add i32 %100, %52\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %3, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16\l  %105 = add i32 %100, %45\l  %106 = add i32 %105, %53\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %2, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !16\l  %110 = fmul contract float %104, %109\l  %111 = fadd contract float %98, %110\l  store float %111, float addrspace(1)* %48, align 4, !tbaa !16\l  %112 = or i32 %85, 2\l  %113 = add i32 %112, %43\l  %114 = add i32 %113, %52\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %3, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16\l  %118 = add i32 %113, %45\l  %119 = add i32 %118, %53\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %111, %123\l  store float %124, float addrspace(1)* %48, align 4, !tbaa !16\l  %125 = or i32 %85, 3\l  %126 = add i32 %125, %43\l  %127 = add i32 %126, %52\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %3, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16\l  %131 = add i32 %126, %45\l  %132 = add i32 %131, %53\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %2, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !16\l  %136 = fmul contract float %130, %135\l  %137 = fadd contract float %124, %136\l  store float %137, float addrspace(1)* %48, align 4, !tbaa !16\l  %138 = or i32 %85, 4\l  %139 = add i32 %138, %43\l  %140 = add i32 %139, %52\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %3, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !16\l  %144 = add i32 %139, %45\l  %145 = add i32 %144, %53\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %2, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16\l  %149 = fmul contract float %143, %148\l  %150 = fadd contract float %137, %149\l  store float %150, float addrspace(1)* %48, align 4, !tbaa !16\l  %151 = or i32 %85, 5\l  %152 = add i32 %151, %43\l  %153 = add i32 %152, %52\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %3, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !16\l  %157 = add i32 %152, %45\l  %158 = add i32 %157, %53\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %2, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !16\l  %162 = fmul contract float %156, %161\l  %163 = fadd contract float %150, %162\l  store float %163, float addrspace(1)* %48, align 4, !tbaa !16\l  %164 = or i32 %85, 6\l  %165 = add i32 %164, %43\l  %166 = add i32 %165, %52\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %3, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !16\l  %170 = add i32 %165, %45\l  %171 = add i32 %170, %53\l  %172 = sext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %2, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !16\l  %175 = fmul contract float %169, %174\l  %176 = fadd contract float %163, %175\l  store float %176, float addrspace(1)* %48, align 4, !tbaa !16\l  %177 = or i32 %85, 7\l  %178 = add i32 %177, %43\l  %179 = add i32 %178, %52\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %3, i64 %180\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !16\l  %183 = add i32 %178, %45\l  %184 = add i32 %183, %53\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds float, float addrspace(1)* %2, i64 %185\l  %187 = load float, float addrspace(1)* %186, align 4, !tbaa !16\l  %188 = fmul contract float %182, %187\l  %189 = fadd contract float %176, %188\l  store float %189, float addrspace(1)* %48, align 4, !tbaa !16\l  %190 = add nuw nsw i32 %85, 8\l  %191 = add i32 %86, 8\l  %192 = icmp eq i32 %191, %35\l  br i1 %192, label %58, label %83, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x4a2ee90:s0 -> Node0x4a2ee00;
	Node0x4a2ee90:s1 -> Node0x4a2ee90;
}
