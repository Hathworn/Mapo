digraph "CFG for '_Z29conv_vertical_naive_gradParamiPfPKfS1_iii' function" {
	label="CFG for '_Z29conv_vertical_naive_gradParamiPfPKfS1_iii' function";

	Node0x5034da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = mul i32 %8, %13\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5034da0:s0 -> Node0x5037000;
	Node0x5034da0:s1 -> Node0x5037090;
	Node0x5037000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%21:\l21:                                               \l  %22 = mul i32 %6, %5\l  %23 = icmp sgt i32 %22, 0\l  %24 = udiv i32 %16, %13\l  %25 = mul i32 %24, %13\l  %26 = icmp ugt i32 %16, %25\l  %27 = zext i1 %26 to i32\l  %28 = add i32 %24, %27\l  %29 = mul i32 %28, %13\l  %30 = and i32 %22, 7\l  %31 = icmp ult i32 %22, 8\l  %32 = and i32 %22, -8\l  %33 = icmp eq i32 %30, 0\l  br label %35\l}"];
	Node0x5037000 -> Node0x5036b10;
	Node0x5037090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%34:\l34:                                               \l  ret void\l}"];
	Node0x5036b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%35:\l35:                                               \l  %36 = phi i32 [ %19, %21 ], [ %69, %68 ]\l  %37 = freeze i32 %36\l  %38 = freeze i32 %4\l  %39 = sdiv i32 %37, %38\l  %40 = mul i32 %22, %39\l  %41 = mul i32 %39, %38\l  %42 = sub i32 %37, %41\l  %43 = mul nsw i32 %42, %6\l  br i1 %23, label %44, label %68\l|{<s0>T|<s1>F}}"];
	Node0x5036b10:s0 -> Node0x5037ff0;
	Node0x5036b10:s1 -> Node0x5037b40;
	Node0x5037ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = sext i32 %36 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16\l  br i1 %31, label %48, label %71\l|{<s0>T|<s1>F}}"];
	Node0x5037ff0:s0 -> Node0x50383e0;
	Node0x5037ff0:s1 -> Node0x5038470;
	Node0x50383e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%48:\l48:                                               \l  %49 = phi float [ %47, %44 ], [ %161, %71 ]\l  %50 = phi i32 [ 0, %44 ], [ %162, %71 ]\l  br i1 %33, label %68, label %51\l|{<s0>T|<s1>F}}"];
	Node0x50383e0:s0 -> Node0x5037b40;
	Node0x50383e0:s1 -> Node0x5038780;
	Node0x5038780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi float [ %64, %51 ], [ %49, %48 ]\l  %53 = phi i32 [ %65, %51 ], [ %50, %48 ]\l  %54 = phi i32 [ %66, %51 ], [ 0, %48 ]\l  %55 = add i32 %53, %40\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %3, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !16\l  %59 = add i32 %55, %43\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = fmul contract float %58, %62\l  %64 = fadd contract float %52, %63\l  store float %64, float addrspace(1)* %46, align 4, !tbaa !16\l  %65 = add nuw nsw i32 %53, 1\l  %66 = add i32 %54, 1\l  %67 = icmp eq i32 %66, %30\l  br i1 %67, label %68, label %51, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5038780:s0 -> Node0x5037b40;
	Node0x5038780:s1 -> Node0x5038780;
	Node0x5037b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%68:\l68:                                               \l  %69 = add i32 %29, %36\l  %70 = icmp slt i32 %69, %0\l  br i1 %70, label %35, label %34, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5037b40:s0 -> Node0x5036b10;
	Node0x5037b40:s1 -> Node0x5037090;
	Node0x5038470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%71:\l71:                                               \l  %72 = phi float [ %161, %71 ], [ %47, %44 ]\l  %73 = phi i32 [ %162, %71 ], [ 0, %44 ]\l  %74 = phi i32 [ %163, %71 ], [ 0, %44 ]\l  %75 = add i32 %73, %40\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %3, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = add i32 %75, %43\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = fmul contract float %78, %82\l  %84 = fadd contract float %72, %83\l  store float %84, float addrspace(1)* %46, align 4, !tbaa !16\l  %85 = or i32 %73, 1\l  %86 = add i32 %85, %40\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %3, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16\l  %90 = add i32 %86, %43\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %2, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16\l  %94 = fmul contract float %89, %93\l  %95 = fadd contract float %84, %94\l  store float %95, float addrspace(1)* %46, align 4, !tbaa !16\l  %96 = or i32 %73, 2\l  %97 = add i32 %96, %40\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %3, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = add i32 %97, %43\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %2, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16\l  %105 = fmul contract float %100, %104\l  %106 = fadd contract float %95, %105\l  store float %106, float addrspace(1)* %46, align 4, !tbaa !16\l  %107 = or i32 %73, 3\l  %108 = add i32 %107, %40\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %3, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !16\l  %112 = add i32 %108, %43\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %2, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16\l  %116 = fmul contract float %111, %115\l  %117 = fadd contract float %106, %116\l  store float %117, float addrspace(1)* %46, align 4, !tbaa !16\l  %118 = or i32 %73, 4\l  %119 = add i32 %118, %40\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %3, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = add i32 %119, %43\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %2, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = fmul contract float %122, %126\l  %128 = fadd contract float %117, %127\l  store float %128, float addrspace(1)* %46, align 4, !tbaa !16\l  %129 = or i32 %73, 5\l  %130 = add i32 %129, %40\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %3, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !16\l  %134 = add i32 %130, %43\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %2, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !16\l  %138 = fmul contract float %133, %137\l  %139 = fadd contract float %128, %138\l  store float %139, float addrspace(1)* %46, align 4, !tbaa !16\l  %140 = or i32 %73, 6\l  %141 = add i32 %140, %40\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %3, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !16\l  %145 = add i32 %141, %43\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %2, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16\l  %149 = fmul contract float %144, %148\l  %150 = fadd contract float %139, %149\l  store float %150, float addrspace(1)* %46, align 4, !tbaa !16\l  %151 = or i32 %73, 7\l  %152 = add i32 %151, %40\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %3, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16\l  %156 = add i32 %152, %43\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %2, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !16\l  %160 = fmul contract float %155, %159\l  %161 = fadd contract float %150, %160\l  store float %161, float addrspace(1)* %46, align 4, !tbaa !16\l  %162 = add nuw nsw i32 %73, 8\l  %163 = add i32 %74, 8\l  %164 = icmp eq i32 %163, %32\l  br i1 %164, label %48, label %71, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5038470:s0 -> Node0x50383e0;
	Node0x5038470:s1 -> Node0x5038470;
}
