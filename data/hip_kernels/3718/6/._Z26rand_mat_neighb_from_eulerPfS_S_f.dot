digraph "CFG for '_Z26rand_mat_neighb_from_eulerPfS_S_f' function" {
	label="CFG for '_Z26rand_mat_neighb_from_eulerPfS_S_f' function";

	Node0x5a94370 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = mul nuw nsw i32 %5, 3\l  %7 = zext i32 %6 to i64\l  %8 = getelementptr inbounds float, float addrspace(1)* %0, i64 %7\l  %9 = load float, float addrspace(1)* %8, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !10, !invariant.load\l... !9\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = add i32 %16, %5\l  %18 = mul i32 %17, 3\l  %19 = zext i32 %18 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %2, i64 %19\l  %21 = load float, float addrspace(1)* %20, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %22 = fmul contract float %21, 2.000000e+00\l  %23 = fadd contract float %22, -1.000000e+00\l  %24 = fmul contract float %23, %3\l  %25 = fadd contract float %9, %24\l  %26 = add nuw nsw i32 %6, 2\l  %27 = zext i32 %26 to i64\l  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %30 = add i32 %18, 2\l  %31 = zext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %34 = fmul contract float %33, 2.000000e+00\l  %35 = fadd contract float %34, -1.000000e+00\l  %36 = fmul contract float %35, %3\l  %37 = fadd contract float %29, %36\l  %38 = add nuw nsw i32 %6, 1\l  %39 = zext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %42 = tail call float @llvm.fabs.f32(float %41)\l  %43 = fcmp olt float %42, 1.310720e+05\l  br i1 %43, label %44, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5a94370:s0 -> Node0x5a98ef0;
	Node0x5a94370:s1 -> Node0x5a98f80;
	Node0x5a98ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%44:\l44:                                               \l  %45 = fmul float %42, 0x3FE45F3060000000\l  %46 = tail call float @llvm.rint.f32(float %45)\l  %47 = tail call float @llvm.fma.f32(float %46, float 0xBFF921FB40000000,\l... float %42)\l  %48 = tail call float @llvm.fma.f32(float %46, float 0xBE74442D00000000,\l... float %47)\l  %49 = tail call float @llvm.fma.f32(float %46, float 0xBCF8469880000000,\l... float %48)\l  %50 = fptosi float %46 to i32\l  br label %157\l}"];
	Node0x5a98ef0 -> Node0x5a999e0;
	Node0x5a98f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%51:\l51:                                               \l  %52 = bitcast float %42 to i32\l  %53 = lshr i32 %52, 23\l  %54 = and i32 %52, 8388607\l  %55 = or i32 %54, 8388608\l  %56 = zext i32 %55 to i64\l  %57 = mul nuw nsw i64 %56, 4266746795\l  %58 = trunc i64 %57 to i32\l  %59 = lshr i64 %57, 32\l  %60 = mul nuw nsw i64 %56, 1011060801\l  %61 = add nuw nsw i64 %59, %60\l  %62 = trunc i64 %61 to i32\l  %63 = lshr i64 %61, 32\l  %64 = mul nuw nsw i64 %56, 3680671129\l  %65 = add nuw nsw i64 %63, %64\l  %66 = trunc i64 %65 to i32\l  %67 = lshr i64 %65, 32\l  %68 = mul nuw nsw i64 %56, 4113882560\l  %69 = add nuw nsw i64 %67, %68\l  %70 = trunc i64 %69 to i32\l  %71 = lshr i64 %69, 32\l  %72 = mul nuw nsw i64 %56, 4230436817\l  %73 = add nuw nsw i64 %71, %72\l  %74 = trunc i64 %73 to i32\l  %75 = lshr i64 %73, 32\l  %76 = mul nuw nsw i64 %56, 1313084713\l  %77 = add nuw nsw i64 %75, %76\l  %78 = trunc i64 %77 to i32\l  %79 = lshr i64 %77, 32\l  %80 = mul nuw nsw i64 %56, 2734261102\l  %81 = add nuw nsw i64 %79, %80\l  %82 = trunc i64 %81 to i32\l  %83 = lshr i64 %81, 32\l  %84 = trunc i64 %83 to i32\l  %85 = add nsw i32 %53, -120\l  %86 = icmp ugt i32 %85, 63\l  %87 = select i1 %86, i32 %78, i32 %84\l  %88 = select i1 %86, i32 %74, i32 %82\l  %89 = select i1 %86, i32 %70, i32 %78\l  %90 = select i1 %86, i32 %66, i32 %74\l  %91 = select i1 %86, i32 %62, i32 %70\l  %92 = select i1 %86, i32 %58, i32 %66\l  %93 = select i1 %86, i32 -64, i32 0\l  %94 = add nsw i32 %93, %85\l  %95 = icmp ugt i32 %94, 31\l  %96 = select i1 %95, i32 %88, i32 %87\l  %97 = select i1 %95, i32 %89, i32 %88\l  %98 = select i1 %95, i32 %90, i32 %89\l  %99 = select i1 %95, i32 %91, i32 %90\l  %100 = select i1 %95, i32 %92, i32 %91\l  %101 = select i1 %95, i32 -32, i32 0\l  %102 = add nsw i32 %101, %94\l  %103 = icmp ugt i32 %102, 31\l  %104 = select i1 %103, i32 %97, i32 %96\l  %105 = select i1 %103, i32 %98, i32 %97\l  %106 = select i1 %103, i32 %99, i32 %98\l  %107 = select i1 %103, i32 %100, i32 %99\l  %108 = select i1 %103, i32 -32, i32 0\l  %109 = add nsw i32 %108, %102\l  %110 = icmp eq i32 %109, 0\l  %111 = sub nsw i32 32, %109\l  %112 = tail call i32 @llvm.fshr.i32(i32 %104, i32 %105, i32 %111)\l  %113 = tail call i32 @llvm.fshr.i32(i32 %105, i32 %106, i32 %111)\l  %114 = tail call i32 @llvm.fshr.i32(i32 %106, i32 %107, i32 %111)\l  %115 = select i1 %110, i32 %104, i32 %112\l  %116 = select i1 %110, i32 %105, i32 %113\l  %117 = select i1 %110, i32 %106, i32 %114\l  %118 = lshr i32 %115, 29\l  %119 = tail call i32 @llvm.fshl.i32(i32 %115, i32 %116, i32 2)\l  %120 = tail call i32 @llvm.fshl.i32(i32 %116, i32 %117, i32 2)\l  %121 = tail call i32 @llvm.fshl.i32(i32 %117, i32 %107, i32 2)\l  %122 = and i32 %118, 1\l  %123 = sub nsw i32 0, %122\l  %124 = shl i32 %118, 31\l  %125 = xor i32 %119, %123\l  %126 = xor i32 %120, %123\l  %127 = xor i32 %121, %123\l  %128 = tail call i32 @llvm.ctlz.i32(i32 %125, i1 false), !range !11\l  %129 = sub nsw i32 31, %128\l  %130 = tail call i32 @llvm.fshr.i32(i32 %125, i32 %126, i32 %129)\l  %131 = tail call i32 @llvm.fshr.i32(i32 %126, i32 %127, i32 %129)\l  %132 = shl nuw nsw i32 %128, 23\l  %133 = sub nuw nsw i32 1056964608, %132\l  %134 = lshr i32 %130, 9\l  %135 = or i32 %134, %133\l  %136 = or i32 %135, %124\l  %137 = bitcast i32 %136 to float\l  %138 = tail call i32 @llvm.fshl.i32(i32 %130, i32 %131, i32 23)\l  %139 = tail call i32 @llvm.ctlz.i32(i32 %138, i1 false), !range !11\l  %140 = fmul float %137, 0x3FF921FB40000000\l  %141 = add nuw nsw i32 %139, %128\l  %142 = shl nuw nsw i32 %141, 23\l  %143 = sub nuw nsw i32 855638016, %142\l  %144 = sub nsw i32 31, %139\l  %145 = tail call i32 @llvm.fshr.i32(i32 %138, i32 %131, i32 %144)\l  %146 = lshr i32 %145, 9\l  %147 = or i32 %143, %146\l  %148 = or i32 %147, %124\l  %149 = bitcast i32 %148 to float\l  %150 = fneg float %140\l  %151 = tail call float @llvm.fma.f32(float %137, float 0x3FF921FB40000000,\l... float %150)\l  %152 = tail call float @llvm.fma.f32(float %137, float 0x3E74442D00000000,\l... float %151)\l  %153 = tail call float @llvm.fma.f32(float %149, float 0x3FF921FB40000000,\l... float %152)\l  %154 = fadd float %140, %153\l  %155 = lshr i32 %115, 30\l  %156 = add nuw nsw i32 %122, %155\l  br label %157\l}"];
	Node0x5a98f80 -> Node0x5a999e0;
	Node0x5a999e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%157:\l157:                                              \l  %158 = phi float [ %49, %44 ], [ %154, %51 ]\l  %159 = phi i32 [ %50, %44 ], [ %156, %51 ]\l  %160 = fmul float %158, %158\l  %161 = tail call float @llvm.fmuladd.f32(float %160, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %162 = tail call float @llvm.fmuladd.f32(float %160, float %161, float\l... 0xBFC55553A0000000)\l  %163 = fmul float %160, %162\l  %164 = tail call float @llvm.fmuladd.f32(float %158, float %163, float %158)\l  %165 = tail call float @llvm.fmuladd.f32(float %160, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %166 = tail call float @llvm.fmuladd.f32(float %160, float %165, float\l... 0x3FA5557EE0000000)\l  %167 = tail call float @llvm.fmuladd.f32(float %160, float %166, float\l... 0xBFE0000080000000)\l  %168 = tail call float @llvm.fmuladd.f32(float %160, float %167, float\l... 1.000000e+00)\l  %169 = fneg float %164\l  %170 = and i32 %159, 1\l  %171 = icmp eq i32 %170, 0\l  %172 = select i1 %171, float %168, float %169\l  %173 = bitcast float %172 to i32\l  %174 = shl i32 %159, 30\l  %175 = and i32 %174, -2147483648\l  %176 = xor i32 %175, %173\l  %177 = bitcast i32 %176 to float\l  %178 = tail call i1 @llvm.amdgcn.class.f32(float %42, i32 504)\l  %179 = select i1 %178, float %177, float 0x7FF8000000000000\l  %180 = add i32 %18, 1\l  %181 = zext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %2, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %184 = fmul contract float %183, 2.000000e+00\l  %185 = fadd contract float %184, -1.000000e+00\l  %186 = fmul contract float %41, %3\l  %187 = tail call float @llvm.fabs.f32(float %186)\l  %188 = fcmp olt float %187, 1.310720e+05\l  br i1 %188, label %189, label %197\l|{<s0>T|<s1>F}}"];
	Node0x5a999e0:s0 -> Node0x5aa1270;
	Node0x5a999e0:s1 -> Node0x5aa1300;
	Node0x5aa1270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%189:\l189:                                              \l  %190 = fmul float %187, 0x3FE45F3060000000\l  %191 = tail call float @llvm.rint.f32(float %190)\l  %192 = tail call float @llvm.fma.f32(float %191, float 0xBFF921FB40000000,\l... float %187)\l  %193 = tail call float @llvm.fma.f32(float %191, float 0xBE74442D00000000,\l... float %192)\l  %194 = tail call float @llvm.fma.f32(float %191, float 0xBCF8469880000000,\l... float %193)\l  %195 = fptosi float %191 to i32\l  %196 = bitcast float %187 to i32\l  br label %303\l}"];
	Node0x5aa1270 -> Node0x5aa1a30;
	Node0x5aa1300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%197:\l197:                                              \l  %198 = bitcast float %187 to i32\l  %199 = lshr i32 %198, 23\l  %200 = and i32 %198, 8388607\l  %201 = or i32 %200, 8388608\l  %202 = zext i32 %201 to i64\l  %203 = mul nuw nsw i64 %202, 4266746795\l  %204 = trunc i64 %203 to i32\l  %205 = lshr i64 %203, 32\l  %206 = mul nuw nsw i64 %202, 1011060801\l  %207 = add nuw nsw i64 %205, %206\l  %208 = trunc i64 %207 to i32\l  %209 = lshr i64 %207, 32\l  %210 = mul nuw nsw i64 %202, 3680671129\l  %211 = add nuw nsw i64 %209, %210\l  %212 = trunc i64 %211 to i32\l  %213 = lshr i64 %211, 32\l  %214 = mul nuw nsw i64 %202, 4113882560\l  %215 = add nuw nsw i64 %213, %214\l  %216 = trunc i64 %215 to i32\l  %217 = lshr i64 %215, 32\l  %218 = mul nuw nsw i64 %202, 4230436817\l  %219 = add nuw nsw i64 %217, %218\l  %220 = trunc i64 %219 to i32\l  %221 = lshr i64 %219, 32\l  %222 = mul nuw nsw i64 %202, 1313084713\l  %223 = add nuw nsw i64 %221, %222\l  %224 = trunc i64 %223 to i32\l  %225 = lshr i64 %223, 32\l  %226 = mul nuw nsw i64 %202, 2734261102\l  %227 = add nuw nsw i64 %225, %226\l  %228 = trunc i64 %227 to i32\l  %229 = lshr i64 %227, 32\l  %230 = trunc i64 %229 to i32\l  %231 = add nsw i32 %199, -120\l  %232 = icmp ugt i32 %231, 63\l  %233 = select i1 %232, i32 %224, i32 %230\l  %234 = select i1 %232, i32 %220, i32 %228\l  %235 = select i1 %232, i32 %216, i32 %224\l  %236 = select i1 %232, i32 %212, i32 %220\l  %237 = select i1 %232, i32 %208, i32 %216\l  %238 = select i1 %232, i32 %204, i32 %212\l  %239 = select i1 %232, i32 -64, i32 0\l  %240 = add nsw i32 %239, %231\l  %241 = icmp ugt i32 %240, 31\l  %242 = select i1 %241, i32 %234, i32 %233\l  %243 = select i1 %241, i32 %235, i32 %234\l  %244 = select i1 %241, i32 %236, i32 %235\l  %245 = select i1 %241, i32 %237, i32 %236\l  %246 = select i1 %241, i32 %238, i32 %237\l  %247 = select i1 %241, i32 -32, i32 0\l  %248 = add nsw i32 %247, %240\l  %249 = icmp ugt i32 %248, 31\l  %250 = select i1 %249, i32 %243, i32 %242\l  %251 = select i1 %249, i32 %244, i32 %243\l  %252 = select i1 %249, i32 %245, i32 %244\l  %253 = select i1 %249, i32 %246, i32 %245\l  %254 = select i1 %249, i32 -32, i32 0\l  %255 = add nsw i32 %254, %248\l  %256 = icmp eq i32 %255, 0\l  %257 = sub nsw i32 32, %255\l  %258 = tail call i32 @llvm.fshr.i32(i32 %250, i32 %251, i32 %257)\l  %259 = tail call i32 @llvm.fshr.i32(i32 %251, i32 %252, i32 %257)\l  %260 = tail call i32 @llvm.fshr.i32(i32 %252, i32 %253, i32 %257)\l  %261 = select i1 %256, i32 %250, i32 %258\l  %262 = select i1 %256, i32 %251, i32 %259\l  %263 = select i1 %256, i32 %252, i32 %260\l  %264 = lshr i32 %261, 29\l  %265 = tail call i32 @llvm.fshl.i32(i32 %261, i32 %262, i32 2)\l  %266 = tail call i32 @llvm.fshl.i32(i32 %262, i32 %263, i32 2)\l  %267 = tail call i32 @llvm.fshl.i32(i32 %263, i32 %253, i32 2)\l  %268 = and i32 %264, 1\l  %269 = sub nsw i32 0, %268\l  %270 = shl i32 %264, 31\l  %271 = xor i32 %265, %269\l  %272 = xor i32 %266, %269\l  %273 = xor i32 %267, %269\l  %274 = tail call i32 @llvm.ctlz.i32(i32 %271, i1 false), !range !11\l  %275 = sub nsw i32 31, %274\l  %276 = tail call i32 @llvm.fshr.i32(i32 %271, i32 %272, i32 %275)\l  %277 = tail call i32 @llvm.fshr.i32(i32 %272, i32 %273, i32 %275)\l  %278 = shl nuw nsw i32 %274, 23\l  %279 = sub nuw nsw i32 1056964608, %278\l  %280 = lshr i32 %276, 9\l  %281 = or i32 %280, %279\l  %282 = or i32 %281, %270\l  %283 = bitcast i32 %282 to float\l  %284 = tail call i32 @llvm.fshl.i32(i32 %276, i32 %277, i32 23)\l  %285 = tail call i32 @llvm.ctlz.i32(i32 %284, i1 false), !range !11\l  %286 = fmul float %283, 0x3FF921FB40000000\l  %287 = add nuw nsw i32 %285, %274\l  %288 = shl nuw nsw i32 %287, 23\l  %289 = sub nuw nsw i32 855638016, %288\l  %290 = sub nsw i32 31, %285\l  %291 = tail call i32 @llvm.fshr.i32(i32 %284, i32 %277, i32 %290)\l  %292 = lshr i32 %291, 9\l  %293 = or i32 %289, %292\l  %294 = or i32 %293, %270\l  %295 = bitcast i32 %294 to float\l  %296 = fneg float %286\l  %297 = tail call float @llvm.fma.f32(float %283, float 0x3FF921FB40000000,\l... float %296)\l  %298 = tail call float @llvm.fma.f32(float %283, float 0x3E74442D00000000,\l... float %297)\l  %299 = tail call float @llvm.fma.f32(float %295, float 0x3FF921FB40000000,\l... float %298)\l  %300 = fadd float %286, %299\l  %301 = lshr i32 %261, 30\l  %302 = add nuw nsw i32 %268, %301\l  br label %303\l}"];
	Node0x5aa1300 -> Node0x5aa1a30;
	Node0x5aa1a30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%303:\l303:                                              \l  %304 = phi i32 [ %196, %189 ], [ %198, %197 ]\l  %305 = phi float [ %194, %189 ], [ %300, %197 ]\l  %306 = phi i32 [ %195, %189 ], [ %302, %197 ]\l  %307 = fmul float %305, %305\l  %308 = tail call float @llvm.fmuladd.f32(float %307, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %309 = tail call float @llvm.fmuladd.f32(float %307, float %308, float\l... 0xBFC55553A0000000)\l  %310 = fmul float %307, %309\l  %311 = tail call float @llvm.fmuladd.f32(float %305, float %310, float %305)\l  %312 = tail call float @llvm.fmuladd.f32(float %307, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %313 = tail call float @llvm.fmuladd.f32(float %307, float %312, float\l... 0x3FA5557EE0000000)\l  %314 = tail call float @llvm.fmuladd.f32(float %307, float %313, float\l... 0xBFE0000080000000)\l  %315 = tail call float @llvm.fmuladd.f32(float %307, float %314, float\l... 1.000000e+00)\l  %316 = and i32 %306, 1\l  %317 = icmp eq i32 %316, 0\l  %318 = select i1 %317, float %311, float %315\l  %319 = bitcast float %318 to i32\l  %320 = shl i32 %306, 30\l  %321 = and i32 %320, -2147483648\l  %322 = bitcast float %186 to i32\l  %323 = xor i32 %304, %322\l  %324 = xor i32 %323, %321\l  %325 = xor i32 %324, %319\l  %326 = bitcast i32 %325 to float\l  %327 = tail call i1 @llvm.amdgcn.class.f32(float %187, i32 504)\l  %328 = select i1 %327, float %326, float 0x7FF8000000000000\l  %329 = fmul contract float %185, %328\l  %330 = fadd contract float %179, %329\l  %331 = fcmp contract ogt float %330, 1.000000e+00\l  %332 = fcmp contract olt float %330, -1.000000e+00\l  %333 = select i1 %332, float -1.000000e+00, float %330\l  %334 = select i1 %331, float 1.000000e+00, float %333\l  %335 = tail call float @llvm.fabs.f32(float %334)\l  %336 = tail call float @llvm.fmuladd.f32(float %335, float -5.000000e-01,\l... float 5.000000e-01)\l  %337 = fmul float %334, %334\l  %338 = fcmp ogt float %335, 5.000000e-01\l  %339 = select i1 %338, float %336, float %337\l  %340 = tail call float @llvm.fmuladd.f32(float %339, float\l... 0x3FA38434E0000000, float 0x3F8BF8BB40000000)\l  %341 = tail call float @llvm.fmuladd.f32(float %339, float %340, float\l... 0x3FA0698780000000)\l  %342 = tail call float @llvm.fmuladd.f32(float %339, float %341, float\l... 0x3FA6C83620000000)\l  %343 = tail call float @llvm.fmuladd.f32(float %339, float %342, float\l... 0x3FB3337900000000)\l  %344 = tail call float @llvm.fmuladd.f32(float %339, float %343, float\l... 0x3FC5555580000000)\l  %345 = fmul float %339, %344\l  %346 = tail call float @llvm.sqrt.f32(float %339)\l  %347 = tail call float @llvm.fmuladd.f32(float %346, float %345, float %346)\l  %348 = fmul float %347, 2.000000e+00\l  %349 = fsub float 0x400921FB60000000, %348\l  %350 = fcmp olt float %334, 0.000000e+00\l  %351 = select i1 %350, float %349, float %348\l  %352 = tail call float @llvm.fmuladd.f32(float %334, float %345, float %334)\l  %353 = fsub float 0x3FF921FB60000000, %352\l  %354 = select i1 %338, float %351, float %353\l  %355 = icmp eq i32 %10, 0\l  %356 = mul i32 %16, 9\l  %357 = zext i32 %356 to i64\l  %358 = getelementptr inbounds float, float addrspace(1)* %1, i64 %357\l  %359 = mul nuw nsw i32 %5, 9\l  %360 = zext i32 %359 to i64\l  %361 = getelementptr inbounds float, float addrspace(1)* %358, i64 %360\l  br i1 %355, label %1220, label %362\l|{<s0>T|<s1>F}}"];
	Node0x5aa1a30:s0 -> Node0x5aa9810;
	Node0x5aa1a30:s1 -> Node0x5aa98a0;
	Node0x5aa98a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%362:\l362:                                              \l  %363 = tail call float @llvm.fabs.f32(float %25)\l  %364 = fcmp olt float %363, 1.310720e+05\l  br i1 %364, label %365, label %373\l|{<s0>T|<s1>F}}"];
	Node0x5aa98a0:s0 -> Node0x5aa9b60;
	Node0x5aa98a0:s1 -> Node0x5aa9bb0;
	Node0x5aa9b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%365:\l365:                                              \l  %366 = fmul float %363, 0x3FE45F3060000000\l  %367 = tail call float @llvm.rint.f32(float %366)\l  %368 = tail call float @llvm.fma.f32(float %367, float 0xBFF921FB40000000,\l... float %363)\l  %369 = tail call float @llvm.fma.f32(float %367, float 0xBE74442D00000000,\l... float %368)\l  %370 = tail call float @llvm.fma.f32(float %367, float 0xBCF8469880000000,\l... float %369)\l  %371 = fptosi float %367 to i32\l  %372 = bitcast float %363 to i32\l  br label %479\l}"];
	Node0x5aa9b60 -> Node0x5aaa2e0;
	Node0x5aa9bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%373:\l373:                                              \l  %374 = bitcast float %363 to i32\l  %375 = lshr i32 %374, 23\l  %376 = and i32 %374, 8388607\l  %377 = or i32 %376, 8388608\l  %378 = zext i32 %377 to i64\l  %379 = mul nuw nsw i64 %378, 4266746795\l  %380 = trunc i64 %379 to i32\l  %381 = lshr i64 %379, 32\l  %382 = mul nuw nsw i64 %378, 1011060801\l  %383 = add nuw nsw i64 %381, %382\l  %384 = trunc i64 %383 to i32\l  %385 = lshr i64 %383, 32\l  %386 = mul nuw nsw i64 %378, 3680671129\l  %387 = add nuw nsw i64 %385, %386\l  %388 = trunc i64 %387 to i32\l  %389 = lshr i64 %387, 32\l  %390 = mul nuw nsw i64 %378, 4113882560\l  %391 = add nuw nsw i64 %389, %390\l  %392 = trunc i64 %391 to i32\l  %393 = lshr i64 %391, 32\l  %394 = mul nuw nsw i64 %378, 4230436817\l  %395 = add nuw nsw i64 %393, %394\l  %396 = trunc i64 %395 to i32\l  %397 = lshr i64 %395, 32\l  %398 = mul nuw nsw i64 %378, 1313084713\l  %399 = add nuw nsw i64 %397, %398\l  %400 = trunc i64 %399 to i32\l  %401 = lshr i64 %399, 32\l  %402 = mul nuw nsw i64 %378, 2734261102\l  %403 = add nuw nsw i64 %401, %402\l  %404 = trunc i64 %403 to i32\l  %405 = lshr i64 %403, 32\l  %406 = trunc i64 %405 to i32\l  %407 = add nsw i32 %375, -120\l  %408 = icmp ugt i32 %407, 63\l  %409 = select i1 %408, i32 %400, i32 %406\l  %410 = select i1 %408, i32 %396, i32 %404\l  %411 = select i1 %408, i32 %392, i32 %400\l  %412 = select i1 %408, i32 %388, i32 %396\l  %413 = select i1 %408, i32 %384, i32 %392\l  %414 = select i1 %408, i32 %380, i32 %388\l  %415 = select i1 %408, i32 -64, i32 0\l  %416 = add nsw i32 %415, %407\l  %417 = icmp ugt i32 %416, 31\l  %418 = select i1 %417, i32 %410, i32 %409\l  %419 = select i1 %417, i32 %411, i32 %410\l  %420 = select i1 %417, i32 %412, i32 %411\l  %421 = select i1 %417, i32 %413, i32 %412\l  %422 = select i1 %417, i32 %414, i32 %413\l  %423 = select i1 %417, i32 -32, i32 0\l  %424 = add nsw i32 %423, %416\l  %425 = icmp ugt i32 %424, 31\l  %426 = select i1 %425, i32 %419, i32 %418\l  %427 = select i1 %425, i32 %420, i32 %419\l  %428 = select i1 %425, i32 %421, i32 %420\l  %429 = select i1 %425, i32 %422, i32 %421\l  %430 = select i1 %425, i32 -32, i32 0\l  %431 = add nsw i32 %430, %424\l  %432 = icmp eq i32 %431, 0\l  %433 = sub nsw i32 32, %431\l  %434 = tail call i32 @llvm.fshr.i32(i32 %426, i32 %427, i32 %433)\l  %435 = tail call i32 @llvm.fshr.i32(i32 %427, i32 %428, i32 %433)\l  %436 = tail call i32 @llvm.fshr.i32(i32 %428, i32 %429, i32 %433)\l  %437 = select i1 %432, i32 %426, i32 %434\l  %438 = select i1 %432, i32 %427, i32 %435\l  %439 = select i1 %432, i32 %428, i32 %436\l  %440 = lshr i32 %437, 29\l  %441 = tail call i32 @llvm.fshl.i32(i32 %437, i32 %438, i32 2)\l  %442 = tail call i32 @llvm.fshl.i32(i32 %438, i32 %439, i32 2)\l  %443 = tail call i32 @llvm.fshl.i32(i32 %439, i32 %429, i32 2)\l  %444 = and i32 %440, 1\l  %445 = sub nsw i32 0, %444\l  %446 = shl i32 %440, 31\l  %447 = xor i32 %441, %445\l  %448 = xor i32 %442, %445\l  %449 = xor i32 %443, %445\l  %450 = tail call i32 @llvm.ctlz.i32(i32 %447, i1 false), !range !11\l  %451 = sub nsw i32 31, %450\l  %452 = tail call i32 @llvm.fshr.i32(i32 %447, i32 %448, i32 %451)\l  %453 = tail call i32 @llvm.fshr.i32(i32 %448, i32 %449, i32 %451)\l  %454 = shl nuw nsw i32 %450, 23\l  %455 = sub nuw nsw i32 1056964608, %454\l  %456 = lshr i32 %452, 9\l  %457 = or i32 %456, %455\l  %458 = or i32 %457, %446\l  %459 = bitcast i32 %458 to float\l  %460 = tail call i32 @llvm.fshl.i32(i32 %452, i32 %453, i32 23)\l  %461 = tail call i32 @llvm.ctlz.i32(i32 %460, i1 false), !range !11\l  %462 = fmul float %459, 0x3FF921FB40000000\l  %463 = add nuw nsw i32 %461, %450\l  %464 = shl nuw nsw i32 %463, 23\l  %465 = sub nuw nsw i32 855638016, %464\l  %466 = sub nsw i32 31, %461\l  %467 = tail call i32 @llvm.fshr.i32(i32 %460, i32 %453, i32 %466)\l  %468 = lshr i32 %467, 9\l  %469 = or i32 %465, %468\l  %470 = or i32 %469, %446\l  %471 = bitcast i32 %470 to float\l  %472 = fneg float %462\l  %473 = tail call float @llvm.fma.f32(float %459, float 0x3FF921FB40000000,\l... float %472)\l  %474 = tail call float @llvm.fma.f32(float %459, float 0x3E74442D00000000,\l... float %473)\l  %475 = tail call float @llvm.fma.f32(float %471, float 0x3FF921FB40000000,\l... float %474)\l  %476 = fadd float %462, %475\l  %477 = lshr i32 %437, 30\l  %478 = add nuw nsw i32 %444, %477\l  br label %479\l}"];
	Node0x5aa9bb0 -> Node0x5aaa2e0;
	Node0x5aaa2e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%479:\l479:                                              \l  %480 = phi i32 [ %372, %365 ], [ %374, %373 ]\l  %481 = phi float [ %370, %365 ], [ %476, %373 ]\l  %482 = phi i32 [ %371, %365 ], [ %478, %373 ]\l  %483 = fmul float %481, %481\l  %484 = tail call float @llvm.fmuladd.f32(float %483, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %485 = tail call float @llvm.fmuladd.f32(float %483, float %484, float\l... 0xBFC55553A0000000)\l  %486 = fmul float %483, %485\l  %487 = tail call float @llvm.fmuladd.f32(float %481, float %486, float %481)\l  %488 = tail call float @llvm.fmuladd.f32(float %483, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %489 = tail call float @llvm.fmuladd.f32(float %483, float %488, float\l... 0x3FA5557EE0000000)\l  %490 = tail call float @llvm.fmuladd.f32(float %483, float %489, float\l... 0xBFE0000080000000)\l  %491 = tail call float @llvm.fmuladd.f32(float %483, float %490, float\l... 1.000000e+00)\l  %492 = and i32 %482, 1\l  %493 = icmp eq i32 %492, 0\l  %494 = select i1 %493, float %487, float %491\l  %495 = bitcast float %494 to i32\l  %496 = shl i32 %482, 30\l  %497 = and i32 %496, -2147483648\l  %498 = bitcast float %25 to i32\l  %499 = xor i32 %480, %498\l  %500 = xor i32 %499, %497\l  %501 = xor i32 %500, %495\l  %502 = bitcast i32 %501 to float\l  %503 = tail call i1 @llvm.amdgcn.class.f32(float %363, i32 504)\l  %504 = select i1 %503, float %502, float 0x7FF8000000000000\l  %505 = tail call float @llvm.fabs.f32(float %354)\l  %506 = fcmp olt float %505, 1.310720e+05\l  br i1 %506, label %507, label %515\l|{<s0>T|<s1>F}}"];
	Node0x5aaa2e0:s0 -> Node0x5aafe40;
	Node0x5aaa2e0:s1 -> Node0x5aafe90;
	Node0x5aafe40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%507:\l507:                                              \l  %508 = fmul float %505, 0x3FE45F3060000000\l  %509 = tail call float @llvm.rint.f32(float %508)\l  %510 = tail call float @llvm.fma.f32(float %509, float 0xBFF921FB40000000,\l... float %505)\l  %511 = tail call float @llvm.fma.f32(float %509, float 0xBE74442D00000000,\l... float %510)\l  %512 = tail call float @llvm.fma.f32(float %509, float 0xBCF8469880000000,\l... float %511)\l  %513 = fptosi float %509 to i32\l  %514 = bitcast float %505 to i32\l  br label %621\l}"];
	Node0x5aafe40 -> Node0x5aa3e00;
	Node0x5aafe90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%515:\l515:                                              \l  %516 = bitcast float %505 to i32\l  %517 = lshr i32 %516, 23\l  %518 = and i32 %516, 8388607\l  %519 = or i32 %518, 8388608\l  %520 = zext i32 %519 to i64\l  %521 = mul nuw nsw i64 %520, 4266746795\l  %522 = trunc i64 %521 to i32\l  %523 = lshr i64 %521, 32\l  %524 = mul nuw nsw i64 %520, 1011060801\l  %525 = add nuw nsw i64 %523, %524\l  %526 = trunc i64 %525 to i32\l  %527 = lshr i64 %525, 32\l  %528 = mul nuw nsw i64 %520, 3680671129\l  %529 = add nuw nsw i64 %527, %528\l  %530 = trunc i64 %529 to i32\l  %531 = lshr i64 %529, 32\l  %532 = mul nuw nsw i64 %520, 4113882560\l  %533 = add nuw nsw i64 %531, %532\l  %534 = trunc i64 %533 to i32\l  %535 = lshr i64 %533, 32\l  %536 = mul nuw nsw i64 %520, 4230436817\l  %537 = add nuw nsw i64 %535, %536\l  %538 = trunc i64 %537 to i32\l  %539 = lshr i64 %537, 32\l  %540 = mul nuw nsw i64 %520, 1313084713\l  %541 = add nuw nsw i64 %539, %540\l  %542 = trunc i64 %541 to i32\l  %543 = lshr i64 %541, 32\l  %544 = mul nuw nsw i64 %520, 2734261102\l  %545 = add nuw nsw i64 %543, %544\l  %546 = trunc i64 %545 to i32\l  %547 = lshr i64 %545, 32\l  %548 = trunc i64 %547 to i32\l  %549 = add nsw i32 %517, -120\l  %550 = icmp ugt i32 %549, 63\l  %551 = select i1 %550, i32 %542, i32 %548\l  %552 = select i1 %550, i32 %538, i32 %546\l  %553 = select i1 %550, i32 %534, i32 %542\l  %554 = select i1 %550, i32 %530, i32 %538\l  %555 = select i1 %550, i32 %526, i32 %534\l  %556 = select i1 %550, i32 %522, i32 %530\l  %557 = select i1 %550, i32 -64, i32 0\l  %558 = add nsw i32 %557, %549\l  %559 = icmp ugt i32 %558, 31\l  %560 = select i1 %559, i32 %552, i32 %551\l  %561 = select i1 %559, i32 %553, i32 %552\l  %562 = select i1 %559, i32 %554, i32 %553\l  %563 = select i1 %559, i32 %555, i32 %554\l  %564 = select i1 %559, i32 %556, i32 %555\l  %565 = select i1 %559, i32 -32, i32 0\l  %566 = add nsw i32 %565, %558\l  %567 = icmp ugt i32 %566, 31\l  %568 = select i1 %567, i32 %561, i32 %560\l  %569 = select i1 %567, i32 %562, i32 %561\l  %570 = select i1 %567, i32 %563, i32 %562\l  %571 = select i1 %567, i32 %564, i32 %563\l  %572 = select i1 %567, i32 -32, i32 0\l  %573 = add nsw i32 %572, %566\l  %574 = icmp eq i32 %573, 0\l  %575 = sub nsw i32 32, %573\l  %576 = tail call i32 @llvm.fshr.i32(i32 %568, i32 %569, i32 %575)\l  %577 = tail call i32 @llvm.fshr.i32(i32 %569, i32 %570, i32 %575)\l  %578 = tail call i32 @llvm.fshr.i32(i32 %570, i32 %571, i32 %575)\l  %579 = select i1 %574, i32 %568, i32 %576\l  %580 = select i1 %574, i32 %569, i32 %577\l  %581 = select i1 %574, i32 %570, i32 %578\l  %582 = lshr i32 %579, 29\l  %583 = tail call i32 @llvm.fshl.i32(i32 %579, i32 %580, i32 2)\l  %584 = tail call i32 @llvm.fshl.i32(i32 %580, i32 %581, i32 2)\l  %585 = tail call i32 @llvm.fshl.i32(i32 %581, i32 %571, i32 2)\l  %586 = and i32 %582, 1\l  %587 = sub nsw i32 0, %586\l  %588 = shl i32 %582, 31\l  %589 = xor i32 %583, %587\l  %590 = xor i32 %584, %587\l  %591 = xor i32 %585, %587\l  %592 = tail call i32 @llvm.ctlz.i32(i32 %589, i1 false), !range !11\l  %593 = sub nsw i32 31, %592\l  %594 = tail call i32 @llvm.fshr.i32(i32 %589, i32 %590, i32 %593)\l  %595 = tail call i32 @llvm.fshr.i32(i32 %590, i32 %591, i32 %593)\l  %596 = shl nuw nsw i32 %592, 23\l  %597 = sub nuw nsw i32 1056964608, %596\l  %598 = lshr i32 %594, 9\l  %599 = or i32 %598, %597\l  %600 = or i32 %599, %588\l  %601 = bitcast i32 %600 to float\l  %602 = tail call i32 @llvm.fshl.i32(i32 %594, i32 %595, i32 23)\l  %603 = tail call i32 @llvm.ctlz.i32(i32 %602, i1 false), !range !11\l  %604 = fmul float %601, 0x3FF921FB40000000\l  %605 = add nuw nsw i32 %603, %592\l  %606 = shl nuw nsw i32 %605, 23\l  %607 = sub nuw nsw i32 855638016, %606\l  %608 = sub nsw i32 31, %603\l  %609 = tail call i32 @llvm.fshr.i32(i32 %602, i32 %595, i32 %608)\l  %610 = lshr i32 %609, 9\l  %611 = or i32 %607, %610\l  %612 = or i32 %611, %588\l  %613 = bitcast i32 %612 to float\l  %614 = fneg float %604\l  %615 = tail call float @llvm.fma.f32(float %601, float 0x3FF921FB40000000,\l... float %614)\l  %616 = tail call float @llvm.fma.f32(float %601, float 0x3E74442D00000000,\l... float %615)\l  %617 = tail call float @llvm.fma.f32(float %613, float 0x3FF921FB40000000,\l... float %616)\l  %618 = fadd float %604, %617\l  %619 = lshr i32 %579, 30\l  %620 = add nuw nsw i32 %586, %619\l  br label %621\l}"];
	Node0x5aafe90 -> Node0x5aa3e00;
	Node0x5aa3e00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%621:\l621:                                              \l  %622 = phi i32 [ %514, %507 ], [ %516, %515 ]\l  %623 = phi float [ %512, %507 ], [ %618, %515 ]\l  %624 = phi i32 [ %513, %507 ], [ %620, %515 ]\l  %625 = fmul float %623, %623\l  %626 = tail call float @llvm.fmuladd.f32(float %625, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %627 = tail call float @llvm.fmuladd.f32(float %625, float %626, float\l... 0xBFC55553A0000000)\l  %628 = fmul float %625, %627\l  %629 = tail call float @llvm.fmuladd.f32(float %623, float %628, float %623)\l  %630 = tail call float @llvm.fmuladd.f32(float %625, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %631 = tail call float @llvm.fmuladd.f32(float %625, float %630, float\l... 0x3FA5557EE0000000)\l  %632 = tail call float @llvm.fmuladd.f32(float %625, float %631, float\l... 0xBFE0000080000000)\l  %633 = tail call float @llvm.fmuladd.f32(float %625, float %632, float\l... 1.000000e+00)\l  %634 = and i32 %624, 1\l  %635 = icmp eq i32 %634, 0\l  %636 = select i1 %635, float %629, float %633\l  %637 = bitcast float %636 to i32\l  %638 = shl i32 %624, 30\l  %639 = and i32 %638, -2147483648\l  %640 = bitcast float %354 to i32\l  %641 = xor i32 %622, %640\l  %642 = xor i32 %641, %639\l  %643 = xor i32 %642, %637\l  %644 = bitcast i32 %643 to float\l  %645 = tail call i1 @llvm.amdgcn.class.f32(float %505, i32 504)\l  %646 = select i1 %645, float %644, float 0x7FF8000000000000\l  %647 = tail call float @llvm.fabs.f32(float %37)\l  %648 = fcmp olt float %647, 1.310720e+05\l  br i1 %648, label %649, label %657\l|{<s0>T|<s1>F}}"];
	Node0x5aa3e00:s0 -> Node0x5ab70d0;
	Node0x5aa3e00:s1 -> Node0x5ab7120;
	Node0x5ab70d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%649:\l649:                                              \l  %650 = fmul float %647, 0x3FE45F3060000000\l  %651 = tail call float @llvm.rint.f32(float %650)\l  %652 = tail call float @llvm.fma.f32(float %651, float 0xBFF921FB40000000,\l... float %647)\l  %653 = tail call float @llvm.fma.f32(float %651, float 0xBE74442D00000000,\l... float %652)\l  %654 = tail call float @llvm.fma.f32(float %651, float 0xBCF8469880000000,\l... float %653)\l  %655 = fptosi float %651 to i32\l  %656 = bitcast float %647 to i32\l  br label %763\l}"];
	Node0x5ab70d0 -> Node0x5ab7810;
	Node0x5ab7120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%657:\l657:                                              \l  %658 = bitcast float %647 to i32\l  %659 = lshr i32 %658, 23\l  %660 = and i32 %658, 8388607\l  %661 = or i32 %660, 8388608\l  %662 = zext i32 %661 to i64\l  %663 = mul nuw nsw i64 %662, 4266746795\l  %664 = trunc i64 %663 to i32\l  %665 = lshr i64 %663, 32\l  %666 = mul nuw nsw i64 %662, 1011060801\l  %667 = add nuw nsw i64 %665, %666\l  %668 = trunc i64 %667 to i32\l  %669 = lshr i64 %667, 32\l  %670 = mul nuw nsw i64 %662, 3680671129\l  %671 = add nuw nsw i64 %669, %670\l  %672 = trunc i64 %671 to i32\l  %673 = lshr i64 %671, 32\l  %674 = mul nuw nsw i64 %662, 4113882560\l  %675 = add nuw nsw i64 %673, %674\l  %676 = trunc i64 %675 to i32\l  %677 = lshr i64 %675, 32\l  %678 = mul nuw nsw i64 %662, 4230436817\l  %679 = add nuw nsw i64 %677, %678\l  %680 = trunc i64 %679 to i32\l  %681 = lshr i64 %679, 32\l  %682 = mul nuw nsw i64 %662, 1313084713\l  %683 = add nuw nsw i64 %681, %682\l  %684 = trunc i64 %683 to i32\l  %685 = lshr i64 %683, 32\l  %686 = mul nuw nsw i64 %662, 2734261102\l  %687 = add nuw nsw i64 %685, %686\l  %688 = trunc i64 %687 to i32\l  %689 = lshr i64 %687, 32\l  %690 = trunc i64 %689 to i32\l  %691 = add nsw i32 %659, -120\l  %692 = icmp ugt i32 %691, 63\l  %693 = select i1 %692, i32 %684, i32 %690\l  %694 = select i1 %692, i32 %680, i32 %688\l  %695 = select i1 %692, i32 %676, i32 %684\l  %696 = select i1 %692, i32 %672, i32 %680\l  %697 = select i1 %692, i32 %668, i32 %676\l  %698 = select i1 %692, i32 %664, i32 %672\l  %699 = select i1 %692, i32 -64, i32 0\l  %700 = add nsw i32 %699, %691\l  %701 = icmp ugt i32 %700, 31\l  %702 = select i1 %701, i32 %694, i32 %693\l  %703 = select i1 %701, i32 %695, i32 %694\l  %704 = select i1 %701, i32 %696, i32 %695\l  %705 = select i1 %701, i32 %697, i32 %696\l  %706 = select i1 %701, i32 %698, i32 %697\l  %707 = select i1 %701, i32 -32, i32 0\l  %708 = add nsw i32 %707, %700\l  %709 = icmp ugt i32 %708, 31\l  %710 = select i1 %709, i32 %703, i32 %702\l  %711 = select i1 %709, i32 %704, i32 %703\l  %712 = select i1 %709, i32 %705, i32 %704\l  %713 = select i1 %709, i32 %706, i32 %705\l  %714 = select i1 %709, i32 -32, i32 0\l  %715 = add nsw i32 %714, %708\l  %716 = icmp eq i32 %715, 0\l  %717 = sub nsw i32 32, %715\l  %718 = tail call i32 @llvm.fshr.i32(i32 %710, i32 %711, i32 %717)\l  %719 = tail call i32 @llvm.fshr.i32(i32 %711, i32 %712, i32 %717)\l  %720 = tail call i32 @llvm.fshr.i32(i32 %712, i32 %713, i32 %717)\l  %721 = select i1 %716, i32 %710, i32 %718\l  %722 = select i1 %716, i32 %711, i32 %719\l  %723 = select i1 %716, i32 %712, i32 %720\l  %724 = lshr i32 %721, 29\l  %725 = tail call i32 @llvm.fshl.i32(i32 %721, i32 %722, i32 2)\l  %726 = tail call i32 @llvm.fshl.i32(i32 %722, i32 %723, i32 2)\l  %727 = tail call i32 @llvm.fshl.i32(i32 %723, i32 %713, i32 2)\l  %728 = and i32 %724, 1\l  %729 = sub nsw i32 0, %728\l  %730 = shl i32 %724, 31\l  %731 = xor i32 %725, %729\l  %732 = xor i32 %726, %729\l  %733 = xor i32 %727, %729\l  %734 = tail call i32 @llvm.ctlz.i32(i32 %731, i1 false), !range !11\l  %735 = sub nsw i32 31, %734\l  %736 = tail call i32 @llvm.fshr.i32(i32 %731, i32 %732, i32 %735)\l  %737 = tail call i32 @llvm.fshr.i32(i32 %732, i32 %733, i32 %735)\l  %738 = shl nuw nsw i32 %734, 23\l  %739 = sub nuw nsw i32 1056964608, %738\l  %740 = lshr i32 %736, 9\l  %741 = or i32 %740, %739\l  %742 = or i32 %741, %730\l  %743 = bitcast i32 %742 to float\l  %744 = tail call i32 @llvm.fshl.i32(i32 %736, i32 %737, i32 23)\l  %745 = tail call i32 @llvm.ctlz.i32(i32 %744, i1 false), !range !11\l  %746 = fmul float %743, 0x3FF921FB40000000\l  %747 = add nuw nsw i32 %745, %734\l  %748 = shl nuw nsw i32 %747, 23\l  %749 = sub nuw nsw i32 855638016, %748\l  %750 = sub nsw i32 31, %745\l  %751 = tail call i32 @llvm.fshr.i32(i32 %744, i32 %737, i32 %750)\l  %752 = lshr i32 %751, 9\l  %753 = or i32 %749, %752\l  %754 = or i32 %753, %730\l  %755 = bitcast i32 %754 to float\l  %756 = fneg float %746\l  %757 = tail call float @llvm.fma.f32(float %743, float 0x3FF921FB40000000,\l... float %756)\l  %758 = tail call float @llvm.fma.f32(float %743, float 0x3E74442D00000000,\l... float %757)\l  %759 = tail call float @llvm.fma.f32(float %755, float 0x3FF921FB40000000,\l... float %758)\l  %760 = fadd float %746, %759\l  %761 = lshr i32 %721, 30\l  %762 = add nuw nsw i32 %728, %761\l  br label %763\l}"];
	Node0x5ab7120 -> Node0x5ab7810;
	Node0x5ab7810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%763:\l763:                                              \l  %764 = phi i32 [ %656, %649 ], [ %658, %657 ]\l  %765 = phi float [ %654, %649 ], [ %760, %657 ]\l  %766 = phi i32 [ %655, %649 ], [ %762, %657 ]\l  %767 = fmul float %765, %765\l  %768 = tail call float @llvm.fmuladd.f32(float %767, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %769 = tail call float @llvm.fmuladd.f32(float %767, float %768, float\l... 0xBFC55553A0000000)\l  %770 = fmul float %767, %769\l  %771 = tail call float @llvm.fmuladd.f32(float %765, float %770, float %765)\l  %772 = tail call float @llvm.fmuladd.f32(float %767, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %773 = tail call float @llvm.fmuladd.f32(float %767, float %772, float\l... 0x3FA5557EE0000000)\l  %774 = tail call float @llvm.fmuladd.f32(float %767, float %773, float\l... 0xBFE0000080000000)\l  %775 = tail call float @llvm.fmuladd.f32(float %767, float %774, float\l... 1.000000e+00)\l  %776 = and i32 %766, 1\l  %777 = icmp eq i32 %776, 0\l  %778 = select i1 %777, float %771, float %775\l  %779 = bitcast float %778 to i32\l  %780 = shl i32 %766, 30\l  %781 = and i32 %780, -2147483648\l  %782 = bitcast float %37 to i32\l  %783 = xor i32 %764, %782\l  %784 = xor i32 %783, %781\l  %785 = xor i32 %784, %779\l  %786 = bitcast i32 %785 to float\l  %787 = tail call i1 @llvm.amdgcn.class.f32(float %647, i32 504)\l  %788 = select i1 %787, float %786, float 0x7FF8000000000000\l  br i1 %364, label %789, label %796\l|{<s0>T|<s1>F}}"];
	Node0x5ab7810:s0 -> Node0x5abd1a0;
	Node0x5ab7810:s1 -> Node0x5abd1f0;
	Node0x5abd1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%789:\l789:                                              \l  %790 = fmul float %363, 0x3FE45F3060000000\l  %791 = tail call float @llvm.rint.f32(float %790)\l  %792 = tail call float @llvm.fma.f32(float %791, float 0xBFF921FB40000000,\l... float %363)\l  %793 = tail call float @llvm.fma.f32(float %791, float 0xBE74442D00000000,\l... float %792)\l  %794 = tail call float @llvm.fma.f32(float %791, float 0xBCF8469880000000,\l... float %793)\l  %795 = fptosi float %791 to i32\l  br label %902\l}"];
	Node0x5abd1a0 -> Node0x5abd870;
	Node0x5abd1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%796:\l796:                                              \l  %797 = bitcast float %363 to i32\l  %798 = lshr i32 %797, 23\l  %799 = and i32 %797, 8388607\l  %800 = or i32 %799, 8388608\l  %801 = zext i32 %800 to i64\l  %802 = mul nuw nsw i64 %801, 4266746795\l  %803 = trunc i64 %802 to i32\l  %804 = lshr i64 %802, 32\l  %805 = mul nuw nsw i64 %801, 1011060801\l  %806 = add nuw nsw i64 %804, %805\l  %807 = trunc i64 %806 to i32\l  %808 = lshr i64 %806, 32\l  %809 = mul nuw nsw i64 %801, 3680671129\l  %810 = add nuw nsw i64 %808, %809\l  %811 = trunc i64 %810 to i32\l  %812 = lshr i64 %810, 32\l  %813 = mul nuw nsw i64 %801, 4113882560\l  %814 = add nuw nsw i64 %812, %813\l  %815 = trunc i64 %814 to i32\l  %816 = lshr i64 %814, 32\l  %817 = mul nuw nsw i64 %801, 4230436817\l  %818 = add nuw nsw i64 %816, %817\l  %819 = trunc i64 %818 to i32\l  %820 = lshr i64 %818, 32\l  %821 = mul nuw nsw i64 %801, 1313084713\l  %822 = add nuw nsw i64 %820, %821\l  %823 = trunc i64 %822 to i32\l  %824 = lshr i64 %822, 32\l  %825 = mul nuw nsw i64 %801, 2734261102\l  %826 = add nuw nsw i64 %824, %825\l  %827 = trunc i64 %826 to i32\l  %828 = lshr i64 %826, 32\l  %829 = trunc i64 %828 to i32\l  %830 = add nsw i32 %798, -120\l  %831 = icmp ugt i32 %830, 63\l  %832 = select i1 %831, i32 %823, i32 %829\l  %833 = select i1 %831, i32 %819, i32 %827\l  %834 = select i1 %831, i32 %815, i32 %823\l  %835 = select i1 %831, i32 %811, i32 %819\l  %836 = select i1 %831, i32 %807, i32 %815\l  %837 = select i1 %831, i32 %803, i32 %811\l  %838 = select i1 %831, i32 -64, i32 0\l  %839 = add nsw i32 %838, %830\l  %840 = icmp ugt i32 %839, 31\l  %841 = select i1 %840, i32 %833, i32 %832\l  %842 = select i1 %840, i32 %834, i32 %833\l  %843 = select i1 %840, i32 %835, i32 %834\l  %844 = select i1 %840, i32 %836, i32 %835\l  %845 = select i1 %840, i32 %837, i32 %836\l  %846 = select i1 %840, i32 -32, i32 0\l  %847 = add nsw i32 %846, %839\l  %848 = icmp ugt i32 %847, 31\l  %849 = select i1 %848, i32 %842, i32 %841\l  %850 = select i1 %848, i32 %843, i32 %842\l  %851 = select i1 %848, i32 %844, i32 %843\l  %852 = select i1 %848, i32 %845, i32 %844\l  %853 = select i1 %848, i32 -32, i32 0\l  %854 = add nsw i32 %853, %847\l  %855 = icmp eq i32 %854, 0\l  %856 = sub nsw i32 32, %854\l  %857 = tail call i32 @llvm.fshr.i32(i32 %849, i32 %850, i32 %856)\l  %858 = tail call i32 @llvm.fshr.i32(i32 %850, i32 %851, i32 %856)\l  %859 = tail call i32 @llvm.fshr.i32(i32 %851, i32 %852, i32 %856)\l  %860 = select i1 %855, i32 %849, i32 %857\l  %861 = select i1 %855, i32 %850, i32 %858\l  %862 = select i1 %855, i32 %851, i32 %859\l  %863 = lshr i32 %860, 29\l  %864 = tail call i32 @llvm.fshl.i32(i32 %860, i32 %861, i32 2)\l  %865 = tail call i32 @llvm.fshl.i32(i32 %861, i32 %862, i32 2)\l  %866 = tail call i32 @llvm.fshl.i32(i32 %862, i32 %852, i32 2)\l  %867 = and i32 %863, 1\l  %868 = sub nsw i32 0, %867\l  %869 = shl i32 %863, 31\l  %870 = xor i32 %864, %868\l  %871 = xor i32 %865, %868\l  %872 = xor i32 %866, %868\l  %873 = tail call i32 @llvm.ctlz.i32(i32 %870, i1 false), !range !11\l  %874 = sub nsw i32 31, %873\l  %875 = tail call i32 @llvm.fshr.i32(i32 %870, i32 %871, i32 %874)\l  %876 = tail call i32 @llvm.fshr.i32(i32 %871, i32 %872, i32 %874)\l  %877 = shl nuw nsw i32 %873, 23\l  %878 = sub nuw nsw i32 1056964608, %877\l  %879 = lshr i32 %875, 9\l  %880 = or i32 %879, %878\l  %881 = or i32 %880, %869\l  %882 = bitcast i32 %881 to float\l  %883 = tail call i32 @llvm.fshl.i32(i32 %875, i32 %876, i32 23)\l  %884 = tail call i32 @llvm.ctlz.i32(i32 %883, i1 false), !range !11\l  %885 = fmul float %882, 0x3FF921FB40000000\l  %886 = add nuw nsw i32 %884, %873\l  %887 = shl nuw nsw i32 %886, 23\l  %888 = sub nuw nsw i32 855638016, %887\l  %889 = sub nsw i32 31, %884\l  %890 = tail call i32 @llvm.fshr.i32(i32 %883, i32 %876, i32 %889)\l  %891 = lshr i32 %890, 9\l  %892 = or i32 %888, %891\l  %893 = or i32 %892, %869\l  %894 = bitcast i32 %893 to float\l  %895 = fneg float %885\l  %896 = tail call float @llvm.fma.f32(float %882, float 0x3FF921FB40000000,\l... float %895)\l  %897 = tail call float @llvm.fma.f32(float %882, float 0x3E74442D00000000,\l... float %896)\l  %898 = tail call float @llvm.fma.f32(float %894, float 0x3FF921FB40000000,\l... float %897)\l  %899 = fadd float %885, %898\l  %900 = lshr i32 %860, 30\l  %901 = add nuw nsw i32 %867, %900\l  br label %902\l}"];
	Node0x5abd1f0 -> Node0x5abd870;
	Node0x5abd870 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%902:\l902:                                              \l  %903 = phi float [ %794, %789 ], [ %899, %796 ]\l  %904 = phi i32 [ %795, %789 ], [ %901, %796 ]\l  %905 = fmul float %903, %903\l  %906 = tail call float @llvm.fmuladd.f32(float %905, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %907 = tail call float @llvm.fmuladd.f32(float %905, float %906, float\l... 0xBFC55553A0000000)\l  %908 = fmul float %905, %907\l  %909 = tail call float @llvm.fmuladd.f32(float %903, float %908, float %903)\l  %910 = tail call float @llvm.fmuladd.f32(float %905, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %911 = tail call float @llvm.fmuladd.f32(float %905, float %910, float\l... 0x3FA5557EE0000000)\l  %912 = tail call float @llvm.fmuladd.f32(float %905, float %911, float\l... 0xBFE0000080000000)\l  %913 = tail call float @llvm.fmuladd.f32(float %905, float %912, float\l... 1.000000e+00)\l  %914 = fneg float %909\l  %915 = and i32 %904, 1\l  %916 = icmp eq i32 %915, 0\l  %917 = select i1 %916, float %913, float %914\l  %918 = bitcast float %917 to i32\l  %919 = shl i32 %904, 30\l  %920 = and i32 %919, -2147483648\l  %921 = xor i32 %920, %918\l  %922 = bitcast i32 %921 to float\l  %923 = select i1 %503, float %922, float 0x7FF8000000000000\l  br i1 %506, label %924, label %931\l|{<s0>T|<s1>F}}"];
	Node0x5abd870:s0 -> Node0x5ac2f20;
	Node0x5abd870:s1 -> Node0x5ac2f70;
	Node0x5ac2f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%924:\l924:                                              \l  %925 = fmul float %505, 0x3FE45F3060000000\l  %926 = tail call float @llvm.rint.f32(float %925)\l  %927 = tail call float @llvm.fma.f32(float %926, float 0xBFF921FB40000000,\l... float %505)\l  %928 = tail call float @llvm.fma.f32(float %926, float 0xBE74442D00000000,\l... float %927)\l  %929 = tail call float @llvm.fma.f32(float %926, float 0xBCF8469880000000,\l... float %928)\l  %930 = fptosi float %926 to i32\l  br label %1037\l}"];
	Node0x5ac2f20 -> Node0x5ac35f0;
	Node0x5ac2f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%931:\l931:                                              \l  %932 = bitcast float %505 to i32\l  %933 = lshr i32 %932, 23\l  %934 = and i32 %932, 8388607\l  %935 = or i32 %934, 8388608\l  %936 = zext i32 %935 to i64\l  %937 = mul nuw nsw i64 %936, 4266746795\l  %938 = trunc i64 %937 to i32\l  %939 = lshr i64 %937, 32\l  %940 = mul nuw nsw i64 %936, 1011060801\l  %941 = add nuw nsw i64 %939, %940\l  %942 = trunc i64 %941 to i32\l  %943 = lshr i64 %941, 32\l  %944 = mul nuw nsw i64 %936, 3680671129\l  %945 = add nuw nsw i64 %943, %944\l  %946 = trunc i64 %945 to i32\l  %947 = lshr i64 %945, 32\l  %948 = mul nuw nsw i64 %936, 4113882560\l  %949 = add nuw nsw i64 %947, %948\l  %950 = trunc i64 %949 to i32\l  %951 = lshr i64 %949, 32\l  %952 = mul nuw nsw i64 %936, 4230436817\l  %953 = add nuw nsw i64 %951, %952\l  %954 = trunc i64 %953 to i32\l  %955 = lshr i64 %953, 32\l  %956 = mul nuw nsw i64 %936, 1313084713\l  %957 = add nuw nsw i64 %955, %956\l  %958 = trunc i64 %957 to i32\l  %959 = lshr i64 %957, 32\l  %960 = mul nuw nsw i64 %936, 2734261102\l  %961 = add nuw nsw i64 %959, %960\l  %962 = trunc i64 %961 to i32\l  %963 = lshr i64 %961, 32\l  %964 = trunc i64 %963 to i32\l  %965 = add nsw i32 %933, -120\l  %966 = icmp ugt i32 %965, 63\l  %967 = select i1 %966, i32 %958, i32 %964\l  %968 = select i1 %966, i32 %954, i32 %962\l  %969 = select i1 %966, i32 %950, i32 %958\l  %970 = select i1 %966, i32 %946, i32 %954\l  %971 = select i1 %966, i32 %942, i32 %950\l  %972 = select i1 %966, i32 %938, i32 %946\l  %973 = select i1 %966, i32 -64, i32 0\l  %974 = add nsw i32 %973, %965\l  %975 = icmp ugt i32 %974, 31\l  %976 = select i1 %975, i32 %968, i32 %967\l  %977 = select i1 %975, i32 %969, i32 %968\l  %978 = select i1 %975, i32 %970, i32 %969\l  %979 = select i1 %975, i32 %971, i32 %970\l  %980 = select i1 %975, i32 %972, i32 %971\l  %981 = select i1 %975, i32 -32, i32 0\l  %982 = add nsw i32 %981, %974\l  %983 = icmp ugt i32 %982, 31\l  %984 = select i1 %983, i32 %977, i32 %976\l  %985 = select i1 %983, i32 %978, i32 %977\l  %986 = select i1 %983, i32 %979, i32 %978\l  %987 = select i1 %983, i32 %980, i32 %979\l  %988 = select i1 %983, i32 -32, i32 0\l  %989 = add nsw i32 %988, %982\l  %990 = icmp eq i32 %989, 0\l  %991 = sub nsw i32 32, %989\l  %992 = tail call i32 @llvm.fshr.i32(i32 %984, i32 %985, i32 %991)\l  %993 = tail call i32 @llvm.fshr.i32(i32 %985, i32 %986, i32 %991)\l  %994 = tail call i32 @llvm.fshr.i32(i32 %986, i32 %987, i32 %991)\l  %995 = select i1 %990, i32 %984, i32 %992\l  %996 = select i1 %990, i32 %985, i32 %993\l  %997 = select i1 %990, i32 %986, i32 %994\l  %998 = lshr i32 %995, 29\l  %999 = tail call i32 @llvm.fshl.i32(i32 %995, i32 %996, i32 2)\l  %1000 = tail call i32 @llvm.fshl.i32(i32 %996, i32 %997, i32 2)\l  %1001 = tail call i32 @llvm.fshl.i32(i32 %997, i32 %987, i32 2)\l  %1002 = and i32 %998, 1\l  %1003 = sub nsw i32 0, %1002\l  %1004 = shl i32 %998, 31\l  %1005 = xor i32 %999, %1003\l  %1006 = xor i32 %1000, %1003\l  %1007 = xor i32 %1001, %1003\l  %1008 = tail call i32 @llvm.ctlz.i32(i32 %1005, i1 false), !range !11\l  %1009 = sub nsw i32 31, %1008\l  %1010 = tail call i32 @llvm.fshr.i32(i32 %1005, i32 %1006, i32 %1009)\l  %1011 = tail call i32 @llvm.fshr.i32(i32 %1006, i32 %1007, i32 %1009)\l  %1012 = shl nuw nsw i32 %1008, 23\l  %1013 = sub nuw nsw i32 1056964608, %1012\l  %1014 = lshr i32 %1010, 9\l  %1015 = or i32 %1014, %1013\l  %1016 = or i32 %1015, %1004\l  %1017 = bitcast i32 %1016 to float\l  %1018 = tail call i32 @llvm.fshl.i32(i32 %1010, i32 %1011, i32 23)\l  %1019 = tail call i32 @llvm.ctlz.i32(i32 %1018, i1 false), !range !11\l  %1020 = fmul float %1017, 0x3FF921FB40000000\l  %1021 = add nuw nsw i32 %1019, %1008\l  %1022 = shl nuw nsw i32 %1021, 23\l  %1023 = sub nuw nsw i32 855638016, %1022\l  %1024 = sub nsw i32 31, %1019\l  %1025 = tail call i32 @llvm.fshr.i32(i32 %1018, i32 %1011, i32 %1024)\l  %1026 = lshr i32 %1025, 9\l  %1027 = or i32 %1023, %1026\l  %1028 = or i32 %1027, %1004\l  %1029 = bitcast i32 %1028 to float\l  %1030 = fneg float %1020\l  %1031 = tail call float @llvm.fma.f32(float %1017, float 0x3FF921FB40000000,\l... float %1030)\l  %1032 = tail call float @llvm.fma.f32(float %1017, float 0x3E74442D00000000,\l... float %1031)\l  %1033 = tail call float @llvm.fma.f32(float %1029, float 0x3FF921FB40000000,\l... float %1032)\l  %1034 = fadd float %1020, %1033\l  %1035 = lshr i32 %995, 30\l  %1036 = add nuw nsw i32 %1002, %1035\l  br label %1037\l}"];
	Node0x5ac2f70 -> Node0x5ac35f0;
	Node0x5ac35f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%1037:\l1037:                                             \l  %1038 = phi float [ %929, %924 ], [ %1034, %931 ]\l  %1039 = phi i32 [ %930, %924 ], [ %1036, %931 ]\l  %1040 = fmul float %1038, %1038\l  %1041 = tail call float @llvm.fmuladd.f32(float %1040, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1042 = tail call float @llvm.fmuladd.f32(float %1040, float %1041, float\l... 0xBFC55553A0000000)\l  %1043 = fmul float %1040, %1042\l  %1044 = tail call float @llvm.fmuladd.f32(float %1038, float %1043, float\l... %1038)\l  %1045 = tail call float @llvm.fmuladd.f32(float %1040, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1046 = tail call float @llvm.fmuladd.f32(float %1040, float %1045, float\l... 0x3FA5557EE0000000)\l  %1047 = tail call float @llvm.fmuladd.f32(float %1040, float %1046, float\l... 0xBFE0000080000000)\l  %1048 = tail call float @llvm.fmuladd.f32(float %1040, float %1047, float\l... 1.000000e+00)\l  %1049 = fneg float %1044\l  %1050 = and i32 %1039, 1\l  %1051 = icmp eq i32 %1050, 0\l  %1052 = select i1 %1051, float %1048, float %1049\l  %1053 = bitcast float %1052 to i32\l  %1054 = shl i32 %1039, 30\l  %1055 = and i32 %1054, -2147483648\l  %1056 = xor i32 %1055, %1053\l  %1057 = bitcast i32 %1056 to float\l  %1058 = select i1 %645, float %1057, float 0x7FF8000000000000\l  br i1 %648, label %1059, label %1066\l|{<s0>T|<s1>F}}"];
	Node0x5ac35f0:s0 -> Node0x5ab1e60;
	Node0x5ac35f0:s1 -> Node0x5ab1eb0;
	Node0x5ab1e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%1059:\l1059:                                             \l  %1060 = fmul float %647, 0x3FE45F3060000000\l  %1061 = tail call float @llvm.rint.f32(float %1060)\l  %1062 = tail call float @llvm.fma.f32(float %1061, float 0xBFF921FB40000000,\l... float %647)\l  %1063 = tail call float @llvm.fma.f32(float %1061, float 0xBE74442D00000000,\l... float %1062)\l  %1064 = tail call float @llvm.fma.f32(float %1061, float 0xBCF8469880000000,\l... float %1063)\l  %1065 = fptosi float %1061 to i32\l  br label %1172\l}"];
	Node0x5ab1e60 -> Node0x5acb3b0;
	Node0x5ab1eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%1066:\l1066:                                             \l  %1067 = bitcast float %647 to i32\l  %1068 = lshr i32 %1067, 23\l  %1069 = and i32 %1067, 8388607\l  %1070 = or i32 %1069, 8388608\l  %1071 = zext i32 %1070 to i64\l  %1072 = mul nuw nsw i64 %1071, 4266746795\l  %1073 = trunc i64 %1072 to i32\l  %1074 = lshr i64 %1072, 32\l  %1075 = mul nuw nsw i64 %1071, 1011060801\l  %1076 = add nuw nsw i64 %1074, %1075\l  %1077 = trunc i64 %1076 to i32\l  %1078 = lshr i64 %1076, 32\l  %1079 = mul nuw nsw i64 %1071, 3680671129\l  %1080 = add nuw nsw i64 %1078, %1079\l  %1081 = trunc i64 %1080 to i32\l  %1082 = lshr i64 %1080, 32\l  %1083 = mul nuw nsw i64 %1071, 4113882560\l  %1084 = add nuw nsw i64 %1082, %1083\l  %1085 = trunc i64 %1084 to i32\l  %1086 = lshr i64 %1084, 32\l  %1087 = mul nuw nsw i64 %1071, 4230436817\l  %1088 = add nuw nsw i64 %1086, %1087\l  %1089 = trunc i64 %1088 to i32\l  %1090 = lshr i64 %1088, 32\l  %1091 = mul nuw nsw i64 %1071, 1313084713\l  %1092 = add nuw nsw i64 %1090, %1091\l  %1093 = trunc i64 %1092 to i32\l  %1094 = lshr i64 %1092, 32\l  %1095 = mul nuw nsw i64 %1071, 2734261102\l  %1096 = add nuw nsw i64 %1094, %1095\l  %1097 = trunc i64 %1096 to i32\l  %1098 = lshr i64 %1096, 32\l  %1099 = trunc i64 %1098 to i32\l  %1100 = add nsw i32 %1068, -120\l  %1101 = icmp ugt i32 %1100, 63\l  %1102 = select i1 %1101, i32 %1093, i32 %1099\l  %1103 = select i1 %1101, i32 %1089, i32 %1097\l  %1104 = select i1 %1101, i32 %1085, i32 %1093\l  %1105 = select i1 %1101, i32 %1081, i32 %1089\l  %1106 = select i1 %1101, i32 %1077, i32 %1085\l  %1107 = select i1 %1101, i32 %1073, i32 %1081\l  %1108 = select i1 %1101, i32 -64, i32 0\l  %1109 = add nsw i32 %1108, %1100\l  %1110 = icmp ugt i32 %1109, 31\l  %1111 = select i1 %1110, i32 %1103, i32 %1102\l  %1112 = select i1 %1110, i32 %1104, i32 %1103\l  %1113 = select i1 %1110, i32 %1105, i32 %1104\l  %1114 = select i1 %1110, i32 %1106, i32 %1105\l  %1115 = select i1 %1110, i32 %1107, i32 %1106\l  %1116 = select i1 %1110, i32 -32, i32 0\l  %1117 = add nsw i32 %1116, %1109\l  %1118 = icmp ugt i32 %1117, 31\l  %1119 = select i1 %1118, i32 %1112, i32 %1111\l  %1120 = select i1 %1118, i32 %1113, i32 %1112\l  %1121 = select i1 %1118, i32 %1114, i32 %1113\l  %1122 = select i1 %1118, i32 %1115, i32 %1114\l  %1123 = select i1 %1118, i32 -32, i32 0\l  %1124 = add nsw i32 %1123, %1117\l  %1125 = icmp eq i32 %1124, 0\l  %1126 = sub nsw i32 32, %1124\l  %1127 = tail call i32 @llvm.fshr.i32(i32 %1119, i32 %1120, i32 %1126)\l  %1128 = tail call i32 @llvm.fshr.i32(i32 %1120, i32 %1121, i32 %1126)\l  %1129 = tail call i32 @llvm.fshr.i32(i32 %1121, i32 %1122, i32 %1126)\l  %1130 = select i1 %1125, i32 %1119, i32 %1127\l  %1131 = select i1 %1125, i32 %1120, i32 %1128\l  %1132 = select i1 %1125, i32 %1121, i32 %1129\l  %1133 = lshr i32 %1130, 29\l  %1134 = tail call i32 @llvm.fshl.i32(i32 %1130, i32 %1131, i32 2)\l  %1135 = tail call i32 @llvm.fshl.i32(i32 %1131, i32 %1132, i32 2)\l  %1136 = tail call i32 @llvm.fshl.i32(i32 %1132, i32 %1122, i32 2)\l  %1137 = and i32 %1133, 1\l  %1138 = sub nsw i32 0, %1137\l  %1139 = shl i32 %1133, 31\l  %1140 = xor i32 %1134, %1138\l  %1141 = xor i32 %1135, %1138\l  %1142 = xor i32 %1136, %1138\l  %1143 = tail call i32 @llvm.ctlz.i32(i32 %1140, i1 false), !range !11\l  %1144 = sub nsw i32 31, %1143\l  %1145 = tail call i32 @llvm.fshr.i32(i32 %1140, i32 %1141, i32 %1144)\l  %1146 = tail call i32 @llvm.fshr.i32(i32 %1141, i32 %1142, i32 %1144)\l  %1147 = shl nuw nsw i32 %1143, 23\l  %1148 = sub nuw nsw i32 1056964608, %1147\l  %1149 = lshr i32 %1145, 9\l  %1150 = or i32 %1149, %1148\l  %1151 = or i32 %1150, %1139\l  %1152 = bitcast i32 %1151 to float\l  %1153 = tail call i32 @llvm.fshl.i32(i32 %1145, i32 %1146, i32 23)\l  %1154 = tail call i32 @llvm.ctlz.i32(i32 %1153, i1 false), !range !11\l  %1155 = fmul float %1152, 0x3FF921FB40000000\l  %1156 = add nuw nsw i32 %1154, %1143\l  %1157 = shl nuw nsw i32 %1156, 23\l  %1158 = sub nuw nsw i32 855638016, %1157\l  %1159 = sub nsw i32 31, %1154\l  %1160 = tail call i32 @llvm.fshr.i32(i32 %1153, i32 %1146, i32 %1159)\l  %1161 = lshr i32 %1160, 9\l  %1162 = or i32 %1158, %1161\l  %1163 = or i32 %1162, %1139\l  %1164 = bitcast i32 %1163 to float\l  %1165 = fneg float %1155\l  %1166 = tail call float @llvm.fma.f32(float %1152, float 0x3FF921FB40000000,\l... float %1165)\l  %1167 = tail call float @llvm.fma.f32(float %1152, float 0x3E74442D00000000,\l... float %1166)\l  %1168 = tail call float @llvm.fma.f32(float %1164, float 0x3FF921FB40000000,\l... float %1167)\l  %1169 = fadd float %1155, %1168\l  %1170 = lshr i32 %1130, 30\l  %1171 = add nuw nsw i32 %1137, %1170\l  br label %1172\l}"];
	Node0x5ab1eb0 -> Node0x5acb3b0;
	Node0x5acb3b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%1172:\l1172:                                             \l  %1173 = phi float [ %1064, %1059 ], [ %1169, %1066 ]\l  %1174 = phi i32 [ %1065, %1059 ], [ %1171, %1066 ]\l  %1175 = fmul float %1173, %1173\l  %1176 = tail call float @llvm.fmuladd.f32(float %1175, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1177 = tail call float @llvm.fmuladd.f32(float %1175, float %1176, float\l... 0xBFC55553A0000000)\l  %1178 = fmul float %1175, %1177\l  %1179 = tail call float @llvm.fmuladd.f32(float %1173, float %1178, float\l... %1173)\l  %1180 = tail call float @llvm.fmuladd.f32(float %1175, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1181 = tail call float @llvm.fmuladd.f32(float %1175, float %1180, float\l... 0x3FA5557EE0000000)\l  %1182 = tail call float @llvm.fmuladd.f32(float %1175, float %1181, float\l... 0xBFE0000080000000)\l  %1183 = tail call float @llvm.fmuladd.f32(float %1175, float %1182, float\l... 1.000000e+00)\l  %1184 = fneg float %1179\l  %1185 = and i32 %1174, 1\l  %1186 = icmp eq i32 %1185, 0\l  %1187 = select i1 %1186, float %1183, float %1184\l  %1188 = bitcast float %1187 to i32\l  %1189 = shl i32 %1174, 30\l  %1190 = and i32 %1189, -2147483648\l  %1191 = xor i32 %1190, %1188\l  %1192 = bitcast i32 %1191 to float\l  %1193 = select i1 %787, float %1192, float 0x7FF8000000000000\l  %1194 = fmul contract float %923, %1193\l  %1195 = fmul contract float %504, %1058\l  %1196 = fmul contract float %788, %1195\l  %1197 = fsub contract float %1194, %1196\l  store float %1197, float addrspace(1)* %361, align 4, !tbaa !5\l  %1198 = fneg contract float %923\l  %1199 = fmul contract float %788, %1198\l  %1200 = fmul contract float %1058, %1193\l  %1201 = fmul contract float %504, %1200\l  %1202 = fsub contract float %1199, %1201\l  %1203 = getelementptr inbounds float, float addrspace(1)* %361, i64 1\l  store float %1202, float addrspace(1)* %1203, align 4, !tbaa !5\l  %1204 = fmul contract float %504, %646\l  %1205 = getelementptr inbounds float, float addrspace(1)* %361, i64 2\l  store float %1204, float addrspace(1)* %1205, align 4, !tbaa !5\l  %1206 = fmul contract float %504, %1193\l  %1207 = fmul contract float %923, %1058\l  %1208 = fmul contract float %788, %1207\l  %1209 = fadd contract float %1208, %1206\l  %1210 = getelementptr inbounds float, float addrspace(1)* %361, i64 3\l  store float %1209, float addrspace(1)* %1210, align 4, !tbaa !5\l  %1211 = fmul contract float %1207, %1193\l  %1212 = fmul contract float %504, %788\l  %1213 = fsub contract float %1211, %1212\l  %1214 = getelementptr inbounds float, float addrspace(1)* %361, i64 4\l  store float %1213, float addrspace(1)* %1214, align 4, !tbaa !5\l  %1215 = fmul contract float %646, %1198\l  %1216 = getelementptr inbounds float, float addrspace(1)* %361, i64 5\l  store float %1215, float addrspace(1)* %1216, align 4, !tbaa !5\l  %1217 = fmul contract float %646, %788\l  %1218 = getelementptr inbounds float, float addrspace(1)* %361, i64 6\l  store float %1217, float addrspace(1)* %1218, align 4, !tbaa !5\l  %1219 = fmul contract float %646, %1193\l  br label %2082\l}"];
	Node0x5acb3b0 -> Node0x5ad1dc0;
	Node0x5aa9810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1220:\l1220:                                             \l  %1221 = tail call float @llvm.fabs.f32(float %9)\l  %1222 = fcmp olt float %1221, 1.310720e+05\l  br i1 %1222, label %1223, label %1231\l|{<s0>T|<s1>F}}"];
	Node0x5aa9810:s0 -> Node0x5ad2000;
	Node0x5aa9810:s1 -> Node0x5ad2050;
	Node0x5ad2000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1223:\l1223:                                             \l  %1224 = fmul float %1221, 0x3FE45F3060000000\l  %1225 = tail call float @llvm.rint.f32(float %1224)\l  %1226 = tail call float @llvm.fma.f32(float %1225, float 0xBFF921FB40000000,\l... float %1221)\l  %1227 = tail call float @llvm.fma.f32(float %1225, float 0xBE74442D00000000,\l... float %1226)\l  %1228 = tail call float @llvm.fma.f32(float %1225, float 0xBCF8469880000000,\l... float %1227)\l  %1229 = fptosi float %1225 to i32\l  %1230 = bitcast float %1221 to i32\l  br label %1337\l}"];
	Node0x5ad2000 -> Node0x5ad2740;
	Node0x5ad2050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1231:\l1231:                                             \l  %1232 = bitcast float %1221 to i32\l  %1233 = lshr i32 %1232, 23\l  %1234 = and i32 %1232, 8388607\l  %1235 = or i32 %1234, 8388608\l  %1236 = zext i32 %1235 to i64\l  %1237 = mul nuw nsw i64 %1236, 4266746795\l  %1238 = trunc i64 %1237 to i32\l  %1239 = lshr i64 %1237, 32\l  %1240 = mul nuw nsw i64 %1236, 1011060801\l  %1241 = add nuw nsw i64 %1239, %1240\l  %1242 = trunc i64 %1241 to i32\l  %1243 = lshr i64 %1241, 32\l  %1244 = mul nuw nsw i64 %1236, 3680671129\l  %1245 = add nuw nsw i64 %1243, %1244\l  %1246 = trunc i64 %1245 to i32\l  %1247 = lshr i64 %1245, 32\l  %1248 = mul nuw nsw i64 %1236, 4113882560\l  %1249 = add nuw nsw i64 %1247, %1248\l  %1250 = trunc i64 %1249 to i32\l  %1251 = lshr i64 %1249, 32\l  %1252 = mul nuw nsw i64 %1236, 4230436817\l  %1253 = add nuw nsw i64 %1251, %1252\l  %1254 = trunc i64 %1253 to i32\l  %1255 = lshr i64 %1253, 32\l  %1256 = mul nuw nsw i64 %1236, 1313084713\l  %1257 = add nuw nsw i64 %1255, %1256\l  %1258 = trunc i64 %1257 to i32\l  %1259 = lshr i64 %1257, 32\l  %1260 = mul nuw nsw i64 %1236, 2734261102\l  %1261 = add nuw nsw i64 %1259, %1260\l  %1262 = trunc i64 %1261 to i32\l  %1263 = lshr i64 %1261, 32\l  %1264 = trunc i64 %1263 to i32\l  %1265 = add nsw i32 %1233, -120\l  %1266 = icmp ugt i32 %1265, 63\l  %1267 = select i1 %1266, i32 %1258, i32 %1264\l  %1268 = select i1 %1266, i32 %1254, i32 %1262\l  %1269 = select i1 %1266, i32 %1250, i32 %1258\l  %1270 = select i1 %1266, i32 %1246, i32 %1254\l  %1271 = select i1 %1266, i32 %1242, i32 %1250\l  %1272 = select i1 %1266, i32 %1238, i32 %1246\l  %1273 = select i1 %1266, i32 -64, i32 0\l  %1274 = add nsw i32 %1273, %1265\l  %1275 = icmp ugt i32 %1274, 31\l  %1276 = select i1 %1275, i32 %1268, i32 %1267\l  %1277 = select i1 %1275, i32 %1269, i32 %1268\l  %1278 = select i1 %1275, i32 %1270, i32 %1269\l  %1279 = select i1 %1275, i32 %1271, i32 %1270\l  %1280 = select i1 %1275, i32 %1272, i32 %1271\l  %1281 = select i1 %1275, i32 -32, i32 0\l  %1282 = add nsw i32 %1281, %1274\l  %1283 = icmp ugt i32 %1282, 31\l  %1284 = select i1 %1283, i32 %1277, i32 %1276\l  %1285 = select i1 %1283, i32 %1278, i32 %1277\l  %1286 = select i1 %1283, i32 %1279, i32 %1278\l  %1287 = select i1 %1283, i32 %1280, i32 %1279\l  %1288 = select i1 %1283, i32 -32, i32 0\l  %1289 = add nsw i32 %1288, %1282\l  %1290 = icmp eq i32 %1289, 0\l  %1291 = sub nsw i32 32, %1289\l  %1292 = tail call i32 @llvm.fshr.i32(i32 %1284, i32 %1285, i32 %1291)\l  %1293 = tail call i32 @llvm.fshr.i32(i32 %1285, i32 %1286, i32 %1291)\l  %1294 = tail call i32 @llvm.fshr.i32(i32 %1286, i32 %1287, i32 %1291)\l  %1295 = select i1 %1290, i32 %1284, i32 %1292\l  %1296 = select i1 %1290, i32 %1285, i32 %1293\l  %1297 = select i1 %1290, i32 %1286, i32 %1294\l  %1298 = lshr i32 %1295, 29\l  %1299 = tail call i32 @llvm.fshl.i32(i32 %1295, i32 %1296, i32 2)\l  %1300 = tail call i32 @llvm.fshl.i32(i32 %1296, i32 %1297, i32 2)\l  %1301 = tail call i32 @llvm.fshl.i32(i32 %1297, i32 %1287, i32 2)\l  %1302 = and i32 %1298, 1\l  %1303 = sub nsw i32 0, %1302\l  %1304 = shl i32 %1298, 31\l  %1305 = xor i32 %1299, %1303\l  %1306 = xor i32 %1300, %1303\l  %1307 = xor i32 %1301, %1303\l  %1308 = tail call i32 @llvm.ctlz.i32(i32 %1305, i1 false), !range !11\l  %1309 = sub nsw i32 31, %1308\l  %1310 = tail call i32 @llvm.fshr.i32(i32 %1305, i32 %1306, i32 %1309)\l  %1311 = tail call i32 @llvm.fshr.i32(i32 %1306, i32 %1307, i32 %1309)\l  %1312 = shl nuw nsw i32 %1308, 23\l  %1313 = sub nuw nsw i32 1056964608, %1312\l  %1314 = lshr i32 %1310, 9\l  %1315 = or i32 %1314, %1313\l  %1316 = or i32 %1315, %1304\l  %1317 = bitcast i32 %1316 to float\l  %1318 = tail call i32 @llvm.fshl.i32(i32 %1310, i32 %1311, i32 23)\l  %1319 = tail call i32 @llvm.ctlz.i32(i32 %1318, i1 false), !range !11\l  %1320 = fmul float %1317, 0x3FF921FB40000000\l  %1321 = add nuw nsw i32 %1319, %1308\l  %1322 = shl nuw nsw i32 %1321, 23\l  %1323 = sub nuw nsw i32 855638016, %1322\l  %1324 = sub nsw i32 31, %1319\l  %1325 = tail call i32 @llvm.fshr.i32(i32 %1318, i32 %1311, i32 %1324)\l  %1326 = lshr i32 %1325, 9\l  %1327 = or i32 %1323, %1326\l  %1328 = or i32 %1327, %1304\l  %1329 = bitcast i32 %1328 to float\l  %1330 = fneg float %1320\l  %1331 = tail call float @llvm.fma.f32(float %1317, float 0x3FF921FB40000000,\l... float %1330)\l  %1332 = tail call float @llvm.fma.f32(float %1317, float 0x3E74442D00000000,\l... float %1331)\l  %1333 = tail call float @llvm.fma.f32(float %1329, float 0x3FF921FB40000000,\l... float %1332)\l  %1334 = fadd float %1320, %1333\l  %1335 = lshr i32 %1295, 30\l  %1336 = add nuw nsw i32 %1302, %1335\l  br label %1337\l}"];
	Node0x5ad2050 -> Node0x5ad2740;
	Node0x5ad2740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1337:\l1337:                                             \l  %1338 = phi i32 [ %1230, %1223 ], [ %1232, %1231 ]\l  %1339 = phi float [ %1228, %1223 ], [ %1334, %1231 ]\l  %1340 = phi i32 [ %1229, %1223 ], [ %1336, %1231 ]\l  %1341 = fmul float %1339, %1339\l  %1342 = tail call float @llvm.fmuladd.f32(float %1341, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1343 = tail call float @llvm.fmuladd.f32(float %1341, float %1342, float\l... 0xBFC55553A0000000)\l  %1344 = fmul float %1341, %1343\l  %1345 = tail call float @llvm.fmuladd.f32(float %1339, float %1344, float\l... %1339)\l  %1346 = tail call float @llvm.fmuladd.f32(float %1341, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1347 = tail call float @llvm.fmuladd.f32(float %1341, float %1346, float\l... 0x3FA5557EE0000000)\l  %1348 = tail call float @llvm.fmuladd.f32(float %1341, float %1347, float\l... 0xBFE0000080000000)\l  %1349 = tail call float @llvm.fmuladd.f32(float %1341, float %1348, float\l... 1.000000e+00)\l  %1350 = and i32 %1340, 1\l  %1351 = icmp eq i32 %1350, 0\l  %1352 = select i1 %1351, float %1345, float %1349\l  %1353 = bitcast float %1352 to i32\l  %1354 = shl i32 %1340, 30\l  %1355 = and i32 %1354, -2147483648\l  %1356 = bitcast float %9 to i32\l  %1357 = xor i32 %1338, %1356\l  %1358 = xor i32 %1357, %1355\l  %1359 = xor i32 %1358, %1353\l  %1360 = bitcast i32 %1359 to float\l  %1361 = tail call i1 @llvm.amdgcn.class.f32(float %1221, i32 504)\l  %1362 = select i1 %1361, float %1360, float 0x7FF8000000000000\l  %1363 = getelementptr inbounds float, float addrspace(1)* %8, i64 1\l  %1364 = load float, float addrspace(1)* %1363, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %1365 = tail call float @llvm.fabs.f32(float %1364)\l  %1366 = fcmp olt float %1365, 1.310720e+05\l  br i1 %1366, label %1367, label %1375\l|{<s0>T|<s1>F}}"];
	Node0x5ad2740:s0 -> Node0x5ad8360;
	Node0x5ad2740:s1 -> Node0x5ad83b0;
	Node0x5ad8360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1367:\l1367:                                             \l  %1368 = fmul float %1365, 0x3FE45F3060000000\l  %1369 = tail call float @llvm.rint.f32(float %1368)\l  %1370 = tail call float @llvm.fma.f32(float %1369, float 0xBFF921FB40000000,\l... float %1365)\l  %1371 = tail call float @llvm.fma.f32(float %1369, float 0xBE74442D00000000,\l... float %1370)\l  %1372 = tail call float @llvm.fma.f32(float %1369, float 0xBCF8469880000000,\l... float %1371)\l  %1373 = fptosi float %1369 to i32\l  %1374 = bitcast float %1365 to i32\l  br label %1481\l}"];
	Node0x5ad8360 -> Node0x5ad8aa0;
	Node0x5ad83b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1375:\l1375:                                             \l  %1376 = bitcast float %1365 to i32\l  %1377 = lshr i32 %1376, 23\l  %1378 = and i32 %1376, 8388607\l  %1379 = or i32 %1378, 8388608\l  %1380 = zext i32 %1379 to i64\l  %1381 = mul nuw nsw i64 %1380, 4266746795\l  %1382 = trunc i64 %1381 to i32\l  %1383 = lshr i64 %1381, 32\l  %1384 = mul nuw nsw i64 %1380, 1011060801\l  %1385 = add nuw nsw i64 %1383, %1384\l  %1386 = trunc i64 %1385 to i32\l  %1387 = lshr i64 %1385, 32\l  %1388 = mul nuw nsw i64 %1380, 3680671129\l  %1389 = add nuw nsw i64 %1387, %1388\l  %1390 = trunc i64 %1389 to i32\l  %1391 = lshr i64 %1389, 32\l  %1392 = mul nuw nsw i64 %1380, 4113882560\l  %1393 = add nuw nsw i64 %1391, %1392\l  %1394 = trunc i64 %1393 to i32\l  %1395 = lshr i64 %1393, 32\l  %1396 = mul nuw nsw i64 %1380, 4230436817\l  %1397 = add nuw nsw i64 %1395, %1396\l  %1398 = trunc i64 %1397 to i32\l  %1399 = lshr i64 %1397, 32\l  %1400 = mul nuw nsw i64 %1380, 1313084713\l  %1401 = add nuw nsw i64 %1399, %1400\l  %1402 = trunc i64 %1401 to i32\l  %1403 = lshr i64 %1401, 32\l  %1404 = mul nuw nsw i64 %1380, 2734261102\l  %1405 = add nuw nsw i64 %1403, %1404\l  %1406 = trunc i64 %1405 to i32\l  %1407 = lshr i64 %1405, 32\l  %1408 = trunc i64 %1407 to i32\l  %1409 = add nsw i32 %1377, -120\l  %1410 = icmp ugt i32 %1409, 63\l  %1411 = select i1 %1410, i32 %1402, i32 %1408\l  %1412 = select i1 %1410, i32 %1398, i32 %1406\l  %1413 = select i1 %1410, i32 %1394, i32 %1402\l  %1414 = select i1 %1410, i32 %1390, i32 %1398\l  %1415 = select i1 %1410, i32 %1386, i32 %1394\l  %1416 = select i1 %1410, i32 %1382, i32 %1390\l  %1417 = select i1 %1410, i32 -64, i32 0\l  %1418 = add nsw i32 %1417, %1409\l  %1419 = icmp ugt i32 %1418, 31\l  %1420 = select i1 %1419, i32 %1412, i32 %1411\l  %1421 = select i1 %1419, i32 %1413, i32 %1412\l  %1422 = select i1 %1419, i32 %1414, i32 %1413\l  %1423 = select i1 %1419, i32 %1415, i32 %1414\l  %1424 = select i1 %1419, i32 %1416, i32 %1415\l  %1425 = select i1 %1419, i32 -32, i32 0\l  %1426 = add nsw i32 %1425, %1418\l  %1427 = icmp ugt i32 %1426, 31\l  %1428 = select i1 %1427, i32 %1421, i32 %1420\l  %1429 = select i1 %1427, i32 %1422, i32 %1421\l  %1430 = select i1 %1427, i32 %1423, i32 %1422\l  %1431 = select i1 %1427, i32 %1424, i32 %1423\l  %1432 = select i1 %1427, i32 -32, i32 0\l  %1433 = add nsw i32 %1432, %1426\l  %1434 = icmp eq i32 %1433, 0\l  %1435 = sub nsw i32 32, %1433\l  %1436 = tail call i32 @llvm.fshr.i32(i32 %1428, i32 %1429, i32 %1435)\l  %1437 = tail call i32 @llvm.fshr.i32(i32 %1429, i32 %1430, i32 %1435)\l  %1438 = tail call i32 @llvm.fshr.i32(i32 %1430, i32 %1431, i32 %1435)\l  %1439 = select i1 %1434, i32 %1428, i32 %1436\l  %1440 = select i1 %1434, i32 %1429, i32 %1437\l  %1441 = select i1 %1434, i32 %1430, i32 %1438\l  %1442 = lshr i32 %1439, 29\l  %1443 = tail call i32 @llvm.fshl.i32(i32 %1439, i32 %1440, i32 2)\l  %1444 = tail call i32 @llvm.fshl.i32(i32 %1440, i32 %1441, i32 2)\l  %1445 = tail call i32 @llvm.fshl.i32(i32 %1441, i32 %1431, i32 2)\l  %1446 = and i32 %1442, 1\l  %1447 = sub nsw i32 0, %1446\l  %1448 = shl i32 %1442, 31\l  %1449 = xor i32 %1443, %1447\l  %1450 = xor i32 %1444, %1447\l  %1451 = xor i32 %1445, %1447\l  %1452 = tail call i32 @llvm.ctlz.i32(i32 %1449, i1 false), !range !11\l  %1453 = sub nsw i32 31, %1452\l  %1454 = tail call i32 @llvm.fshr.i32(i32 %1449, i32 %1450, i32 %1453)\l  %1455 = tail call i32 @llvm.fshr.i32(i32 %1450, i32 %1451, i32 %1453)\l  %1456 = shl nuw nsw i32 %1452, 23\l  %1457 = sub nuw nsw i32 1056964608, %1456\l  %1458 = lshr i32 %1454, 9\l  %1459 = or i32 %1458, %1457\l  %1460 = or i32 %1459, %1448\l  %1461 = bitcast i32 %1460 to float\l  %1462 = tail call i32 @llvm.fshl.i32(i32 %1454, i32 %1455, i32 23)\l  %1463 = tail call i32 @llvm.ctlz.i32(i32 %1462, i1 false), !range !11\l  %1464 = fmul float %1461, 0x3FF921FB40000000\l  %1465 = add nuw nsw i32 %1463, %1452\l  %1466 = shl nuw nsw i32 %1465, 23\l  %1467 = sub nuw nsw i32 855638016, %1466\l  %1468 = sub nsw i32 31, %1463\l  %1469 = tail call i32 @llvm.fshr.i32(i32 %1462, i32 %1455, i32 %1468)\l  %1470 = lshr i32 %1469, 9\l  %1471 = or i32 %1467, %1470\l  %1472 = or i32 %1471, %1448\l  %1473 = bitcast i32 %1472 to float\l  %1474 = fneg float %1464\l  %1475 = tail call float @llvm.fma.f32(float %1461, float 0x3FF921FB40000000,\l... float %1474)\l  %1476 = tail call float @llvm.fma.f32(float %1461, float 0x3E74442D00000000,\l... float %1475)\l  %1477 = tail call float @llvm.fma.f32(float %1473, float 0x3FF921FB40000000,\l... float %1476)\l  %1478 = fadd float %1464, %1477\l  %1479 = lshr i32 %1439, 30\l  %1480 = add nuw nsw i32 %1446, %1479\l  br label %1481\l}"];
	Node0x5ad83b0 -> Node0x5ad8aa0;
	Node0x5ad8aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1481:\l1481:                                             \l  %1482 = phi i32 [ %1374, %1367 ], [ %1376, %1375 ]\l  %1483 = phi float [ %1372, %1367 ], [ %1478, %1375 ]\l  %1484 = phi i32 [ %1373, %1367 ], [ %1480, %1375 ]\l  %1485 = fmul float %1483, %1483\l  %1486 = tail call float @llvm.fmuladd.f32(float %1485, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1487 = tail call float @llvm.fmuladd.f32(float %1485, float %1486, float\l... 0xBFC55553A0000000)\l  %1488 = fmul float %1485, %1487\l  %1489 = tail call float @llvm.fmuladd.f32(float %1483, float %1488, float\l... %1483)\l  %1490 = tail call float @llvm.fmuladd.f32(float %1485, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1491 = tail call float @llvm.fmuladd.f32(float %1485, float %1490, float\l... 0x3FA5557EE0000000)\l  %1492 = tail call float @llvm.fmuladd.f32(float %1485, float %1491, float\l... 0xBFE0000080000000)\l  %1493 = tail call float @llvm.fmuladd.f32(float %1485, float %1492, float\l... 1.000000e+00)\l  %1494 = and i32 %1484, 1\l  %1495 = icmp eq i32 %1494, 0\l  %1496 = select i1 %1495, float %1489, float %1493\l  %1497 = bitcast float %1496 to i32\l  %1498 = shl i32 %1484, 30\l  %1499 = and i32 %1498, -2147483648\l  %1500 = bitcast float %1364 to i32\l  %1501 = xor i32 %1482, %1500\l  %1502 = xor i32 %1501, %1499\l  %1503 = xor i32 %1502, %1497\l  %1504 = bitcast i32 %1503 to float\l  %1505 = tail call i1 @llvm.amdgcn.class.f32(float %1365, i32 504)\l  %1506 = select i1 %1505, float %1504, float 0x7FF8000000000000\l  %1507 = getelementptr inbounds float, float addrspace(1)* %8, i64 2\l  %1508 = load float, float addrspace(1)* %1507, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %1509 = tail call float @llvm.fabs.f32(float %1508)\l  %1510 = fcmp olt float %1509, 1.310720e+05\l  br i1 %1510, label %1511, label %1519\l|{<s0>T|<s1>F}}"];
	Node0x5ad8aa0:s0 -> Node0x5ade6c0;
	Node0x5ad8aa0:s1 -> Node0x5ade710;
	Node0x5ade6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1511:\l1511:                                             \l  %1512 = fmul float %1509, 0x3FE45F3060000000\l  %1513 = tail call float @llvm.rint.f32(float %1512)\l  %1514 = tail call float @llvm.fma.f32(float %1513, float 0xBFF921FB40000000,\l... float %1509)\l  %1515 = tail call float @llvm.fma.f32(float %1513, float 0xBE74442D00000000,\l... float %1514)\l  %1516 = tail call float @llvm.fma.f32(float %1513, float 0xBCF8469880000000,\l... float %1515)\l  %1517 = fptosi float %1513 to i32\l  %1518 = bitcast float %1509 to i32\l  br label %1625\l}"];
	Node0x5ade6c0 -> Node0x5adee40;
	Node0x5ade710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1519:\l1519:                                             \l  %1520 = bitcast float %1509 to i32\l  %1521 = lshr i32 %1520, 23\l  %1522 = and i32 %1520, 8388607\l  %1523 = or i32 %1522, 8388608\l  %1524 = zext i32 %1523 to i64\l  %1525 = mul nuw nsw i64 %1524, 4266746795\l  %1526 = trunc i64 %1525 to i32\l  %1527 = lshr i64 %1525, 32\l  %1528 = mul nuw nsw i64 %1524, 1011060801\l  %1529 = add nuw nsw i64 %1527, %1528\l  %1530 = trunc i64 %1529 to i32\l  %1531 = lshr i64 %1529, 32\l  %1532 = mul nuw nsw i64 %1524, 3680671129\l  %1533 = add nuw nsw i64 %1531, %1532\l  %1534 = trunc i64 %1533 to i32\l  %1535 = lshr i64 %1533, 32\l  %1536 = mul nuw nsw i64 %1524, 4113882560\l  %1537 = add nuw nsw i64 %1535, %1536\l  %1538 = trunc i64 %1537 to i32\l  %1539 = lshr i64 %1537, 32\l  %1540 = mul nuw nsw i64 %1524, 4230436817\l  %1541 = add nuw nsw i64 %1539, %1540\l  %1542 = trunc i64 %1541 to i32\l  %1543 = lshr i64 %1541, 32\l  %1544 = mul nuw nsw i64 %1524, 1313084713\l  %1545 = add nuw nsw i64 %1543, %1544\l  %1546 = trunc i64 %1545 to i32\l  %1547 = lshr i64 %1545, 32\l  %1548 = mul nuw nsw i64 %1524, 2734261102\l  %1549 = add nuw nsw i64 %1547, %1548\l  %1550 = trunc i64 %1549 to i32\l  %1551 = lshr i64 %1549, 32\l  %1552 = trunc i64 %1551 to i32\l  %1553 = add nsw i32 %1521, -120\l  %1554 = icmp ugt i32 %1553, 63\l  %1555 = select i1 %1554, i32 %1546, i32 %1552\l  %1556 = select i1 %1554, i32 %1542, i32 %1550\l  %1557 = select i1 %1554, i32 %1538, i32 %1546\l  %1558 = select i1 %1554, i32 %1534, i32 %1542\l  %1559 = select i1 %1554, i32 %1530, i32 %1538\l  %1560 = select i1 %1554, i32 %1526, i32 %1534\l  %1561 = select i1 %1554, i32 -64, i32 0\l  %1562 = add nsw i32 %1561, %1553\l  %1563 = icmp ugt i32 %1562, 31\l  %1564 = select i1 %1563, i32 %1556, i32 %1555\l  %1565 = select i1 %1563, i32 %1557, i32 %1556\l  %1566 = select i1 %1563, i32 %1558, i32 %1557\l  %1567 = select i1 %1563, i32 %1559, i32 %1558\l  %1568 = select i1 %1563, i32 %1560, i32 %1559\l  %1569 = select i1 %1563, i32 -32, i32 0\l  %1570 = add nsw i32 %1569, %1562\l  %1571 = icmp ugt i32 %1570, 31\l  %1572 = select i1 %1571, i32 %1565, i32 %1564\l  %1573 = select i1 %1571, i32 %1566, i32 %1565\l  %1574 = select i1 %1571, i32 %1567, i32 %1566\l  %1575 = select i1 %1571, i32 %1568, i32 %1567\l  %1576 = select i1 %1571, i32 -32, i32 0\l  %1577 = add nsw i32 %1576, %1570\l  %1578 = icmp eq i32 %1577, 0\l  %1579 = sub nsw i32 32, %1577\l  %1580 = tail call i32 @llvm.fshr.i32(i32 %1572, i32 %1573, i32 %1579)\l  %1581 = tail call i32 @llvm.fshr.i32(i32 %1573, i32 %1574, i32 %1579)\l  %1582 = tail call i32 @llvm.fshr.i32(i32 %1574, i32 %1575, i32 %1579)\l  %1583 = select i1 %1578, i32 %1572, i32 %1580\l  %1584 = select i1 %1578, i32 %1573, i32 %1581\l  %1585 = select i1 %1578, i32 %1574, i32 %1582\l  %1586 = lshr i32 %1583, 29\l  %1587 = tail call i32 @llvm.fshl.i32(i32 %1583, i32 %1584, i32 2)\l  %1588 = tail call i32 @llvm.fshl.i32(i32 %1584, i32 %1585, i32 2)\l  %1589 = tail call i32 @llvm.fshl.i32(i32 %1585, i32 %1575, i32 2)\l  %1590 = and i32 %1586, 1\l  %1591 = sub nsw i32 0, %1590\l  %1592 = shl i32 %1586, 31\l  %1593 = xor i32 %1587, %1591\l  %1594 = xor i32 %1588, %1591\l  %1595 = xor i32 %1589, %1591\l  %1596 = tail call i32 @llvm.ctlz.i32(i32 %1593, i1 false), !range !11\l  %1597 = sub nsw i32 31, %1596\l  %1598 = tail call i32 @llvm.fshr.i32(i32 %1593, i32 %1594, i32 %1597)\l  %1599 = tail call i32 @llvm.fshr.i32(i32 %1594, i32 %1595, i32 %1597)\l  %1600 = shl nuw nsw i32 %1596, 23\l  %1601 = sub nuw nsw i32 1056964608, %1600\l  %1602 = lshr i32 %1598, 9\l  %1603 = or i32 %1602, %1601\l  %1604 = or i32 %1603, %1592\l  %1605 = bitcast i32 %1604 to float\l  %1606 = tail call i32 @llvm.fshl.i32(i32 %1598, i32 %1599, i32 23)\l  %1607 = tail call i32 @llvm.ctlz.i32(i32 %1606, i1 false), !range !11\l  %1608 = fmul float %1605, 0x3FF921FB40000000\l  %1609 = add nuw nsw i32 %1607, %1596\l  %1610 = shl nuw nsw i32 %1609, 23\l  %1611 = sub nuw nsw i32 855638016, %1610\l  %1612 = sub nsw i32 31, %1607\l  %1613 = tail call i32 @llvm.fshr.i32(i32 %1606, i32 %1599, i32 %1612)\l  %1614 = lshr i32 %1613, 9\l  %1615 = or i32 %1611, %1614\l  %1616 = or i32 %1615, %1592\l  %1617 = bitcast i32 %1616 to float\l  %1618 = fneg float %1608\l  %1619 = tail call float @llvm.fma.f32(float %1605, float 0x3FF921FB40000000,\l... float %1618)\l  %1620 = tail call float @llvm.fma.f32(float %1605, float 0x3E74442D00000000,\l... float %1619)\l  %1621 = tail call float @llvm.fma.f32(float %1617, float 0x3FF921FB40000000,\l... float %1620)\l  %1622 = fadd float %1608, %1621\l  %1623 = lshr i32 %1583, 30\l  %1624 = add nuw nsw i32 %1590, %1623\l  br label %1625\l}"];
	Node0x5ade710 -> Node0x5adee40;
	Node0x5adee40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1625:\l1625:                                             \l  %1626 = phi i32 [ %1518, %1511 ], [ %1520, %1519 ]\l  %1627 = phi float [ %1516, %1511 ], [ %1622, %1519 ]\l  %1628 = phi i32 [ %1517, %1511 ], [ %1624, %1519 ]\l  %1629 = fmul float %1627, %1627\l  %1630 = tail call float @llvm.fmuladd.f32(float %1629, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1631 = tail call float @llvm.fmuladd.f32(float %1629, float %1630, float\l... 0xBFC55553A0000000)\l  %1632 = fmul float %1629, %1631\l  %1633 = tail call float @llvm.fmuladd.f32(float %1627, float %1632, float\l... %1627)\l  %1634 = tail call float @llvm.fmuladd.f32(float %1629, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1635 = tail call float @llvm.fmuladd.f32(float %1629, float %1634, float\l... 0x3FA5557EE0000000)\l  %1636 = tail call float @llvm.fmuladd.f32(float %1629, float %1635, float\l... 0xBFE0000080000000)\l  %1637 = tail call float @llvm.fmuladd.f32(float %1629, float %1636, float\l... 1.000000e+00)\l  %1638 = and i32 %1628, 1\l  %1639 = icmp eq i32 %1638, 0\l  %1640 = select i1 %1639, float %1633, float %1637\l  %1641 = bitcast float %1640 to i32\l  %1642 = shl i32 %1628, 30\l  %1643 = and i32 %1642, -2147483648\l  %1644 = bitcast float %1508 to i32\l  %1645 = xor i32 %1626, %1644\l  %1646 = xor i32 %1645, %1643\l  %1647 = xor i32 %1646, %1641\l  %1648 = bitcast i32 %1647 to float\l  %1649 = tail call i1 @llvm.amdgcn.class.f32(float %1509, i32 504)\l  %1650 = select i1 %1649, float %1648, float 0x7FF8000000000000\l  br i1 %1222, label %1651, label %1658\l|{<s0>T|<s1>F}}"];
	Node0x5adee40:s0 -> Node0x5ae47d0;
	Node0x5adee40:s1 -> Node0x5ae4820;
	Node0x5ae47d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1651:\l1651:                                             \l  %1652 = fmul float %1221, 0x3FE45F3060000000\l  %1653 = tail call float @llvm.rint.f32(float %1652)\l  %1654 = tail call float @llvm.fma.f32(float %1653, float 0xBFF921FB40000000,\l... float %1221)\l  %1655 = tail call float @llvm.fma.f32(float %1653, float 0xBE74442D00000000,\l... float %1654)\l  %1656 = tail call float @llvm.fma.f32(float %1653, float 0xBCF8469880000000,\l... float %1655)\l  %1657 = fptosi float %1653 to i32\l  br label %1764\l}"];
	Node0x5ae47d0 -> Node0x5ae4ea0;
	Node0x5ae4820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1658:\l1658:                                             \l  %1659 = bitcast float %1221 to i32\l  %1660 = lshr i32 %1659, 23\l  %1661 = and i32 %1659, 8388607\l  %1662 = or i32 %1661, 8388608\l  %1663 = zext i32 %1662 to i64\l  %1664 = mul nuw nsw i64 %1663, 4266746795\l  %1665 = trunc i64 %1664 to i32\l  %1666 = lshr i64 %1664, 32\l  %1667 = mul nuw nsw i64 %1663, 1011060801\l  %1668 = add nuw nsw i64 %1666, %1667\l  %1669 = trunc i64 %1668 to i32\l  %1670 = lshr i64 %1668, 32\l  %1671 = mul nuw nsw i64 %1663, 3680671129\l  %1672 = add nuw nsw i64 %1670, %1671\l  %1673 = trunc i64 %1672 to i32\l  %1674 = lshr i64 %1672, 32\l  %1675 = mul nuw nsw i64 %1663, 4113882560\l  %1676 = add nuw nsw i64 %1674, %1675\l  %1677 = trunc i64 %1676 to i32\l  %1678 = lshr i64 %1676, 32\l  %1679 = mul nuw nsw i64 %1663, 4230436817\l  %1680 = add nuw nsw i64 %1678, %1679\l  %1681 = trunc i64 %1680 to i32\l  %1682 = lshr i64 %1680, 32\l  %1683 = mul nuw nsw i64 %1663, 1313084713\l  %1684 = add nuw nsw i64 %1682, %1683\l  %1685 = trunc i64 %1684 to i32\l  %1686 = lshr i64 %1684, 32\l  %1687 = mul nuw nsw i64 %1663, 2734261102\l  %1688 = add nuw nsw i64 %1686, %1687\l  %1689 = trunc i64 %1688 to i32\l  %1690 = lshr i64 %1688, 32\l  %1691 = trunc i64 %1690 to i32\l  %1692 = add nsw i32 %1660, -120\l  %1693 = icmp ugt i32 %1692, 63\l  %1694 = select i1 %1693, i32 %1685, i32 %1691\l  %1695 = select i1 %1693, i32 %1681, i32 %1689\l  %1696 = select i1 %1693, i32 %1677, i32 %1685\l  %1697 = select i1 %1693, i32 %1673, i32 %1681\l  %1698 = select i1 %1693, i32 %1669, i32 %1677\l  %1699 = select i1 %1693, i32 %1665, i32 %1673\l  %1700 = select i1 %1693, i32 -64, i32 0\l  %1701 = add nsw i32 %1700, %1692\l  %1702 = icmp ugt i32 %1701, 31\l  %1703 = select i1 %1702, i32 %1695, i32 %1694\l  %1704 = select i1 %1702, i32 %1696, i32 %1695\l  %1705 = select i1 %1702, i32 %1697, i32 %1696\l  %1706 = select i1 %1702, i32 %1698, i32 %1697\l  %1707 = select i1 %1702, i32 %1699, i32 %1698\l  %1708 = select i1 %1702, i32 -32, i32 0\l  %1709 = add nsw i32 %1708, %1701\l  %1710 = icmp ugt i32 %1709, 31\l  %1711 = select i1 %1710, i32 %1704, i32 %1703\l  %1712 = select i1 %1710, i32 %1705, i32 %1704\l  %1713 = select i1 %1710, i32 %1706, i32 %1705\l  %1714 = select i1 %1710, i32 %1707, i32 %1706\l  %1715 = select i1 %1710, i32 -32, i32 0\l  %1716 = add nsw i32 %1715, %1709\l  %1717 = icmp eq i32 %1716, 0\l  %1718 = sub nsw i32 32, %1716\l  %1719 = tail call i32 @llvm.fshr.i32(i32 %1711, i32 %1712, i32 %1718)\l  %1720 = tail call i32 @llvm.fshr.i32(i32 %1712, i32 %1713, i32 %1718)\l  %1721 = tail call i32 @llvm.fshr.i32(i32 %1713, i32 %1714, i32 %1718)\l  %1722 = select i1 %1717, i32 %1711, i32 %1719\l  %1723 = select i1 %1717, i32 %1712, i32 %1720\l  %1724 = select i1 %1717, i32 %1713, i32 %1721\l  %1725 = lshr i32 %1722, 29\l  %1726 = tail call i32 @llvm.fshl.i32(i32 %1722, i32 %1723, i32 2)\l  %1727 = tail call i32 @llvm.fshl.i32(i32 %1723, i32 %1724, i32 2)\l  %1728 = tail call i32 @llvm.fshl.i32(i32 %1724, i32 %1714, i32 2)\l  %1729 = and i32 %1725, 1\l  %1730 = sub nsw i32 0, %1729\l  %1731 = shl i32 %1725, 31\l  %1732 = xor i32 %1726, %1730\l  %1733 = xor i32 %1727, %1730\l  %1734 = xor i32 %1728, %1730\l  %1735 = tail call i32 @llvm.ctlz.i32(i32 %1732, i1 false), !range !11\l  %1736 = sub nsw i32 31, %1735\l  %1737 = tail call i32 @llvm.fshr.i32(i32 %1732, i32 %1733, i32 %1736)\l  %1738 = tail call i32 @llvm.fshr.i32(i32 %1733, i32 %1734, i32 %1736)\l  %1739 = shl nuw nsw i32 %1735, 23\l  %1740 = sub nuw nsw i32 1056964608, %1739\l  %1741 = lshr i32 %1737, 9\l  %1742 = or i32 %1741, %1740\l  %1743 = or i32 %1742, %1731\l  %1744 = bitcast i32 %1743 to float\l  %1745 = tail call i32 @llvm.fshl.i32(i32 %1737, i32 %1738, i32 23)\l  %1746 = tail call i32 @llvm.ctlz.i32(i32 %1745, i1 false), !range !11\l  %1747 = fmul float %1744, 0x3FF921FB40000000\l  %1748 = add nuw nsw i32 %1746, %1735\l  %1749 = shl nuw nsw i32 %1748, 23\l  %1750 = sub nuw nsw i32 855638016, %1749\l  %1751 = sub nsw i32 31, %1746\l  %1752 = tail call i32 @llvm.fshr.i32(i32 %1745, i32 %1738, i32 %1751)\l  %1753 = lshr i32 %1752, 9\l  %1754 = or i32 %1750, %1753\l  %1755 = or i32 %1754, %1731\l  %1756 = bitcast i32 %1755 to float\l  %1757 = fneg float %1747\l  %1758 = tail call float @llvm.fma.f32(float %1744, float 0x3FF921FB40000000,\l... float %1757)\l  %1759 = tail call float @llvm.fma.f32(float %1744, float 0x3E74442D00000000,\l... float %1758)\l  %1760 = tail call float @llvm.fma.f32(float %1756, float 0x3FF921FB40000000,\l... float %1759)\l  %1761 = fadd float %1747, %1760\l  %1762 = lshr i32 %1722, 30\l  %1763 = add nuw nsw i32 %1729, %1762\l  br label %1764\l}"];
	Node0x5ae4820 -> Node0x5ae4ea0;
	Node0x5ae4ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1764:\l1764:                                             \l  %1765 = phi float [ %1656, %1651 ], [ %1761, %1658 ]\l  %1766 = phi i32 [ %1657, %1651 ], [ %1763, %1658 ]\l  %1767 = fmul float %1765, %1765\l  %1768 = tail call float @llvm.fmuladd.f32(float %1767, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1769 = tail call float @llvm.fmuladd.f32(float %1767, float %1768, float\l... 0xBFC55553A0000000)\l  %1770 = fmul float %1767, %1769\l  %1771 = tail call float @llvm.fmuladd.f32(float %1765, float %1770, float\l... %1765)\l  %1772 = tail call float @llvm.fmuladd.f32(float %1767, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1773 = tail call float @llvm.fmuladd.f32(float %1767, float %1772, float\l... 0x3FA5557EE0000000)\l  %1774 = tail call float @llvm.fmuladd.f32(float %1767, float %1773, float\l... 0xBFE0000080000000)\l  %1775 = tail call float @llvm.fmuladd.f32(float %1767, float %1774, float\l... 1.000000e+00)\l  %1776 = fneg float %1771\l  %1777 = and i32 %1766, 1\l  %1778 = icmp eq i32 %1777, 0\l  %1779 = select i1 %1778, float %1775, float %1776\l  %1780 = bitcast float %1779 to i32\l  %1781 = shl i32 %1766, 30\l  %1782 = and i32 %1781, -2147483648\l  %1783 = xor i32 %1782, %1780\l  %1784 = bitcast i32 %1783 to float\l  %1785 = select i1 %1361, float %1784, float 0x7FF8000000000000\l  br i1 %1366, label %1786, label %1793\l|{<s0>T|<s1>F}}"];
	Node0x5ae4ea0:s0 -> Node0x5aea550;
	Node0x5ae4ea0:s1 -> Node0x5aea5a0;
	Node0x5aea550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1786:\l1786:                                             \l  %1787 = fmul float %1365, 0x3FE45F3060000000\l  %1788 = tail call float @llvm.rint.f32(float %1787)\l  %1789 = tail call float @llvm.fma.f32(float %1788, float 0xBFF921FB40000000,\l... float %1365)\l  %1790 = tail call float @llvm.fma.f32(float %1788, float 0xBE74442D00000000,\l... float %1789)\l  %1791 = tail call float @llvm.fma.f32(float %1788, float 0xBCF8469880000000,\l... float %1790)\l  %1792 = fptosi float %1788 to i32\l  br label %1899\l}"];
	Node0x5aea550 -> Node0x5aeac20;
	Node0x5aea5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1793:\l1793:                                             \l  %1794 = bitcast float %1365 to i32\l  %1795 = lshr i32 %1794, 23\l  %1796 = and i32 %1794, 8388607\l  %1797 = or i32 %1796, 8388608\l  %1798 = zext i32 %1797 to i64\l  %1799 = mul nuw nsw i64 %1798, 4266746795\l  %1800 = trunc i64 %1799 to i32\l  %1801 = lshr i64 %1799, 32\l  %1802 = mul nuw nsw i64 %1798, 1011060801\l  %1803 = add nuw nsw i64 %1801, %1802\l  %1804 = trunc i64 %1803 to i32\l  %1805 = lshr i64 %1803, 32\l  %1806 = mul nuw nsw i64 %1798, 3680671129\l  %1807 = add nuw nsw i64 %1805, %1806\l  %1808 = trunc i64 %1807 to i32\l  %1809 = lshr i64 %1807, 32\l  %1810 = mul nuw nsw i64 %1798, 4113882560\l  %1811 = add nuw nsw i64 %1809, %1810\l  %1812 = trunc i64 %1811 to i32\l  %1813 = lshr i64 %1811, 32\l  %1814 = mul nuw nsw i64 %1798, 4230436817\l  %1815 = add nuw nsw i64 %1813, %1814\l  %1816 = trunc i64 %1815 to i32\l  %1817 = lshr i64 %1815, 32\l  %1818 = mul nuw nsw i64 %1798, 1313084713\l  %1819 = add nuw nsw i64 %1817, %1818\l  %1820 = trunc i64 %1819 to i32\l  %1821 = lshr i64 %1819, 32\l  %1822 = mul nuw nsw i64 %1798, 2734261102\l  %1823 = add nuw nsw i64 %1821, %1822\l  %1824 = trunc i64 %1823 to i32\l  %1825 = lshr i64 %1823, 32\l  %1826 = trunc i64 %1825 to i32\l  %1827 = add nsw i32 %1795, -120\l  %1828 = icmp ugt i32 %1827, 63\l  %1829 = select i1 %1828, i32 %1820, i32 %1826\l  %1830 = select i1 %1828, i32 %1816, i32 %1824\l  %1831 = select i1 %1828, i32 %1812, i32 %1820\l  %1832 = select i1 %1828, i32 %1808, i32 %1816\l  %1833 = select i1 %1828, i32 %1804, i32 %1812\l  %1834 = select i1 %1828, i32 %1800, i32 %1808\l  %1835 = select i1 %1828, i32 -64, i32 0\l  %1836 = add nsw i32 %1835, %1827\l  %1837 = icmp ugt i32 %1836, 31\l  %1838 = select i1 %1837, i32 %1830, i32 %1829\l  %1839 = select i1 %1837, i32 %1831, i32 %1830\l  %1840 = select i1 %1837, i32 %1832, i32 %1831\l  %1841 = select i1 %1837, i32 %1833, i32 %1832\l  %1842 = select i1 %1837, i32 %1834, i32 %1833\l  %1843 = select i1 %1837, i32 -32, i32 0\l  %1844 = add nsw i32 %1843, %1836\l  %1845 = icmp ugt i32 %1844, 31\l  %1846 = select i1 %1845, i32 %1839, i32 %1838\l  %1847 = select i1 %1845, i32 %1840, i32 %1839\l  %1848 = select i1 %1845, i32 %1841, i32 %1840\l  %1849 = select i1 %1845, i32 %1842, i32 %1841\l  %1850 = select i1 %1845, i32 -32, i32 0\l  %1851 = add nsw i32 %1850, %1844\l  %1852 = icmp eq i32 %1851, 0\l  %1853 = sub nsw i32 32, %1851\l  %1854 = tail call i32 @llvm.fshr.i32(i32 %1846, i32 %1847, i32 %1853)\l  %1855 = tail call i32 @llvm.fshr.i32(i32 %1847, i32 %1848, i32 %1853)\l  %1856 = tail call i32 @llvm.fshr.i32(i32 %1848, i32 %1849, i32 %1853)\l  %1857 = select i1 %1852, i32 %1846, i32 %1854\l  %1858 = select i1 %1852, i32 %1847, i32 %1855\l  %1859 = select i1 %1852, i32 %1848, i32 %1856\l  %1860 = lshr i32 %1857, 29\l  %1861 = tail call i32 @llvm.fshl.i32(i32 %1857, i32 %1858, i32 2)\l  %1862 = tail call i32 @llvm.fshl.i32(i32 %1858, i32 %1859, i32 2)\l  %1863 = tail call i32 @llvm.fshl.i32(i32 %1859, i32 %1849, i32 2)\l  %1864 = and i32 %1860, 1\l  %1865 = sub nsw i32 0, %1864\l  %1866 = shl i32 %1860, 31\l  %1867 = xor i32 %1861, %1865\l  %1868 = xor i32 %1862, %1865\l  %1869 = xor i32 %1863, %1865\l  %1870 = tail call i32 @llvm.ctlz.i32(i32 %1867, i1 false), !range !11\l  %1871 = sub nsw i32 31, %1870\l  %1872 = tail call i32 @llvm.fshr.i32(i32 %1867, i32 %1868, i32 %1871)\l  %1873 = tail call i32 @llvm.fshr.i32(i32 %1868, i32 %1869, i32 %1871)\l  %1874 = shl nuw nsw i32 %1870, 23\l  %1875 = sub nuw nsw i32 1056964608, %1874\l  %1876 = lshr i32 %1872, 9\l  %1877 = or i32 %1876, %1875\l  %1878 = or i32 %1877, %1866\l  %1879 = bitcast i32 %1878 to float\l  %1880 = tail call i32 @llvm.fshl.i32(i32 %1872, i32 %1873, i32 23)\l  %1881 = tail call i32 @llvm.ctlz.i32(i32 %1880, i1 false), !range !11\l  %1882 = fmul float %1879, 0x3FF921FB40000000\l  %1883 = add nuw nsw i32 %1881, %1870\l  %1884 = shl nuw nsw i32 %1883, 23\l  %1885 = sub nuw nsw i32 855638016, %1884\l  %1886 = sub nsw i32 31, %1881\l  %1887 = tail call i32 @llvm.fshr.i32(i32 %1880, i32 %1873, i32 %1886)\l  %1888 = lshr i32 %1887, 9\l  %1889 = or i32 %1885, %1888\l  %1890 = or i32 %1889, %1866\l  %1891 = bitcast i32 %1890 to float\l  %1892 = fneg float %1882\l  %1893 = tail call float @llvm.fma.f32(float %1879, float 0x3FF921FB40000000,\l... float %1892)\l  %1894 = tail call float @llvm.fma.f32(float %1879, float 0x3E74442D00000000,\l... float %1893)\l  %1895 = tail call float @llvm.fma.f32(float %1891, float 0x3FF921FB40000000,\l... float %1894)\l  %1896 = fadd float %1882, %1895\l  %1897 = lshr i32 %1857, 30\l  %1898 = add nuw nsw i32 %1864, %1897\l  br label %1899\l}"];
	Node0x5aea5a0 -> Node0x5aeac20;
	Node0x5aeac20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%1899:\l1899:                                             \l  %1900 = phi float [ %1791, %1786 ], [ %1896, %1793 ]\l  %1901 = phi i32 [ %1792, %1786 ], [ %1898, %1793 ]\l  %1902 = fmul float %1900, %1900\l  %1903 = tail call float @llvm.fmuladd.f32(float %1902, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %1904 = tail call float @llvm.fmuladd.f32(float %1902, float %1903, float\l... 0xBFC55553A0000000)\l  %1905 = fmul float %1902, %1904\l  %1906 = tail call float @llvm.fmuladd.f32(float %1900, float %1905, float\l... %1900)\l  %1907 = tail call float @llvm.fmuladd.f32(float %1902, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %1908 = tail call float @llvm.fmuladd.f32(float %1902, float %1907, float\l... 0x3FA5557EE0000000)\l  %1909 = tail call float @llvm.fmuladd.f32(float %1902, float %1908, float\l... 0xBFE0000080000000)\l  %1910 = tail call float @llvm.fmuladd.f32(float %1902, float %1909, float\l... 1.000000e+00)\l  %1911 = fneg float %1906\l  %1912 = and i32 %1901, 1\l  %1913 = icmp eq i32 %1912, 0\l  %1914 = select i1 %1913, float %1910, float %1911\l  %1915 = bitcast float %1914 to i32\l  %1916 = shl i32 %1901, 30\l  %1917 = and i32 %1916, -2147483648\l  %1918 = xor i32 %1917, %1915\l  %1919 = bitcast i32 %1918 to float\l  %1920 = select i1 %1505, float %1919, float 0x7FF8000000000000\l  br i1 %1510, label %1921, label %1928\l|{<s0>T|<s1>F}}"];
	Node0x5aeac20:s0 -> Node0x5af02d0;
	Node0x5aeac20:s1 -> Node0x5af0320;
	Node0x5af02d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1921:\l1921:                                             \l  %1922 = fmul float %1509, 0x3FE45F3060000000\l  %1923 = tail call float @llvm.rint.f32(float %1922)\l  %1924 = tail call float @llvm.fma.f32(float %1923, float 0xBFF921FB40000000,\l... float %1509)\l  %1925 = tail call float @llvm.fma.f32(float %1923, float 0xBE74442D00000000,\l... float %1924)\l  %1926 = tail call float @llvm.fma.f32(float %1923, float 0xBCF8469880000000,\l... float %1925)\l  %1927 = fptosi float %1923 to i32\l  br label %2034\l}"];
	Node0x5af02d0 -> Node0x5af09a0;
	Node0x5af0320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1928:\l1928:                                             \l  %1929 = bitcast float %1509 to i32\l  %1930 = lshr i32 %1929, 23\l  %1931 = and i32 %1929, 8388607\l  %1932 = or i32 %1931, 8388608\l  %1933 = zext i32 %1932 to i64\l  %1934 = mul nuw nsw i64 %1933, 4266746795\l  %1935 = trunc i64 %1934 to i32\l  %1936 = lshr i64 %1934, 32\l  %1937 = mul nuw nsw i64 %1933, 1011060801\l  %1938 = add nuw nsw i64 %1936, %1937\l  %1939 = trunc i64 %1938 to i32\l  %1940 = lshr i64 %1938, 32\l  %1941 = mul nuw nsw i64 %1933, 3680671129\l  %1942 = add nuw nsw i64 %1940, %1941\l  %1943 = trunc i64 %1942 to i32\l  %1944 = lshr i64 %1942, 32\l  %1945 = mul nuw nsw i64 %1933, 4113882560\l  %1946 = add nuw nsw i64 %1944, %1945\l  %1947 = trunc i64 %1946 to i32\l  %1948 = lshr i64 %1946, 32\l  %1949 = mul nuw nsw i64 %1933, 4230436817\l  %1950 = add nuw nsw i64 %1948, %1949\l  %1951 = trunc i64 %1950 to i32\l  %1952 = lshr i64 %1950, 32\l  %1953 = mul nuw nsw i64 %1933, 1313084713\l  %1954 = add nuw nsw i64 %1952, %1953\l  %1955 = trunc i64 %1954 to i32\l  %1956 = lshr i64 %1954, 32\l  %1957 = mul nuw nsw i64 %1933, 2734261102\l  %1958 = add nuw nsw i64 %1956, %1957\l  %1959 = trunc i64 %1958 to i32\l  %1960 = lshr i64 %1958, 32\l  %1961 = trunc i64 %1960 to i32\l  %1962 = add nsw i32 %1930, -120\l  %1963 = icmp ugt i32 %1962, 63\l  %1964 = select i1 %1963, i32 %1955, i32 %1961\l  %1965 = select i1 %1963, i32 %1951, i32 %1959\l  %1966 = select i1 %1963, i32 %1947, i32 %1955\l  %1967 = select i1 %1963, i32 %1943, i32 %1951\l  %1968 = select i1 %1963, i32 %1939, i32 %1947\l  %1969 = select i1 %1963, i32 %1935, i32 %1943\l  %1970 = select i1 %1963, i32 -64, i32 0\l  %1971 = add nsw i32 %1970, %1962\l  %1972 = icmp ugt i32 %1971, 31\l  %1973 = select i1 %1972, i32 %1965, i32 %1964\l  %1974 = select i1 %1972, i32 %1966, i32 %1965\l  %1975 = select i1 %1972, i32 %1967, i32 %1966\l  %1976 = select i1 %1972, i32 %1968, i32 %1967\l  %1977 = select i1 %1972, i32 %1969, i32 %1968\l  %1978 = select i1 %1972, i32 -32, i32 0\l  %1979 = add nsw i32 %1978, %1971\l  %1980 = icmp ugt i32 %1979, 31\l  %1981 = select i1 %1980, i32 %1974, i32 %1973\l  %1982 = select i1 %1980, i32 %1975, i32 %1974\l  %1983 = select i1 %1980, i32 %1976, i32 %1975\l  %1984 = select i1 %1980, i32 %1977, i32 %1976\l  %1985 = select i1 %1980, i32 -32, i32 0\l  %1986 = add nsw i32 %1985, %1979\l  %1987 = icmp eq i32 %1986, 0\l  %1988 = sub nsw i32 32, %1986\l  %1989 = tail call i32 @llvm.fshr.i32(i32 %1981, i32 %1982, i32 %1988)\l  %1990 = tail call i32 @llvm.fshr.i32(i32 %1982, i32 %1983, i32 %1988)\l  %1991 = tail call i32 @llvm.fshr.i32(i32 %1983, i32 %1984, i32 %1988)\l  %1992 = select i1 %1987, i32 %1981, i32 %1989\l  %1993 = select i1 %1987, i32 %1982, i32 %1990\l  %1994 = select i1 %1987, i32 %1983, i32 %1991\l  %1995 = lshr i32 %1992, 29\l  %1996 = tail call i32 @llvm.fshl.i32(i32 %1992, i32 %1993, i32 2)\l  %1997 = tail call i32 @llvm.fshl.i32(i32 %1993, i32 %1994, i32 2)\l  %1998 = tail call i32 @llvm.fshl.i32(i32 %1994, i32 %1984, i32 2)\l  %1999 = and i32 %1995, 1\l  %2000 = sub nsw i32 0, %1999\l  %2001 = shl i32 %1995, 31\l  %2002 = xor i32 %1996, %2000\l  %2003 = xor i32 %1997, %2000\l  %2004 = xor i32 %1998, %2000\l  %2005 = tail call i32 @llvm.ctlz.i32(i32 %2002, i1 false), !range !11\l  %2006 = sub nsw i32 31, %2005\l  %2007 = tail call i32 @llvm.fshr.i32(i32 %2002, i32 %2003, i32 %2006)\l  %2008 = tail call i32 @llvm.fshr.i32(i32 %2003, i32 %2004, i32 %2006)\l  %2009 = shl nuw nsw i32 %2005, 23\l  %2010 = sub nuw nsw i32 1056964608, %2009\l  %2011 = lshr i32 %2007, 9\l  %2012 = or i32 %2011, %2010\l  %2013 = or i32 %2012, %2001\l  %2014 = bitcast i32 %2013 to float\l  %2015 = tail call i32 @llvm.fshl.i32(i32 %2007, i32 %2008, i32 23)\l  %2016 = tail call i32 @llvm.ctlz.i32(i32 %2015, i1 false), !range !11\l  %2017 = fmul float %2014, 0x3FF921FB40000000\l  %2018 = add nuw nsw i32 %2016, %2005\l  %2019 = shl nuw nsw i32 %2018, 23\l  %2020 = sub nuw nsw i32 855638016, %2019\l  %2021 = sub nsw i32 31, %2016\l  %2022 = tail call i32 @llvm.fshr.i32(i32 %2015, i32 %2008, i32 %2021)\l  %2023 = lshr i32 %2022, 9\l  %2024 = or i32 %2020, %2023\l  %2025 = or i32 %2024, %2001\l  %2026 = bitcast i32 %2025 to float\l  %2027 = fneg float %2017\l  %2028 = tail call float @llvm.fma.f32(float %2014, float 0x3FF921FB40000000,\l... float %2027)\l  %2029 = tail call float @llvm.fma.f32(float %2014, float 0x3E74442D00000000,\l... float %2028)\l  %2030 = tail call float @llvm.fma.f32(float %2026, float 0x3FF921FB40000000,\l... float %2029)\l  %2031 = fadd float %2017, %2030\l  %2032 = lshr i32 %1992, 30\l  %2033 = add nuw nsw i32 %1999, %2032\l  br label %2034\l}"];
	Node0x5af0320 -> Node0x5af09a0;
	Node0x5af09a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%2034:\l2034:                                             \l  %2035 = phi float [ %1926, %1921 ], [ %2031, %1928 ]\l  %2036 = phi i32 [ %1927, %1921 ], [ %2033, %1928 ]\l  %2037 = fmul float %2035, %2035\l  %2038 = tail call float @llvm.fmuladd.f32(float %2037, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %2039 = tail call float @llvm.fmuladd.f32(float %2037, float %2038, float\l... 0xBFC55553A0000000)\l  %2040 = fmul float %2037, %2039\l  %2041 = tail call float @llvm.fmuladd.f32(float %2035, float %2040, float\l... %2035)\l  %2042 = tail call float @llvm.fmuladd.f32(float %2037, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %2043 = tail call float @llvm.fmuladd.f32(float %2037, float %2042, float\l... 0x3FA5557EE0000000)\l  %2044 = tail call float @llvm.fmuladd.f32(float %2037, float %2043, float\l... 0xBFE0000080000000)\l  %2045 = tail call float @llvm.fmuladd.f32(float %2037, float %2044, float\l... 1.000000e+00)\l  %2046 = fneg float %2041\l  %2047 = and i32 %2036, 1\l  %2048 = icmp eq i32 %2047, 0\l  %2049 = select i1 %2048, float %2045, float %2046\l  %2050 = bitcast float %2049 to i32\l  %2051 = shl i32 %2036, 30\l  %2052 = and i32 %2051, -2147483648\l  %2053 = xor i32 %2052, %2050\l  %2054 = bitcast i32 %2053 to float\l  %2055 = select i1 %1649, float %2054, float 0x7FF8000000000000\l  %2056 = fmul contract float %1785, %2055\l  %2057 = fmul contract float %1362, %1920\l  %2058 = fmul contract float %1650, %2057\l  %2059 = fsub contract float %2056, %2058\l  store float %2059, float addrspace(1)* %361, align 4, !tbaa !5\l  %2060 = fneg contract float %1785\l  %2061 = fmul contract float %1650, %2060\l  %2062 = fmul contract float %1920, %2055\l  %2063 = fmul contract float %1362, %2062\l  %2064 = fsub contract float %2061, %2063\l  %2065 = getelementptr inbounds float, float addrspace(1)* %361, i64 1\l  store float %2064, float addrspace(1)* %2065, align 4, !tbaa !5\l  %2066 = fmul contract float %1362, %1506\l  %2067 = getelementptr inbounds float, float addrspace(1)* %361, i64 2\l  store float %2066, float addrspace(1)* %2067, align 4, !tbaa !5\l  %2068 = fmul contract float %1362, %2055\l  %2069 = fmul contract float %1785, %1920\l  %2070 = fmul contract float %1650, %2069\l  %2071 = fadd contract float %2070, %2068\l  %2072 = getelementptr inbounds float, float addrspace(1)* %361, i64 3\l  store float %2071, float addrspace(1)* %2072, align 4, !tbaa !5\l  %2073 = fmul contract float %2069, %2055\l  %2074 = fmul contract float %1362, %1650\l  %2075 = fsub contract float %2073, %2074\l  %2076 = getelementptr inbounds float, float addrspace(1)* %361, i64 4\l  store float %2075, float addrspace(1)* %2076, align 4, !tbaa !5\l  %2077 = fmul contract float %1506, %2060\l  %2078 = getelementptr inbounds float, float addrspace(1)* %361, i64 5\l  store float %2077, float addrspace(1)* %2078, align 4, !tbaa !5\l  %2079 = fmul contract float %1506, %1650\l  %2080 = getelementptr inbounds float, float addrspace(1)* %361, i64 6\l  store float %2079, float addrspace(1)* %2080, align 4, !tbaa !5\l  %2081 = fmul contract float %1506, %2055\l  br label %2082\l}"];
	Node0x5af09a0 -> Node0x5ad1dc0;
	Node0x5ad1dc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2082:\l2082:                                             \l  %2083 = phi float [ %2081, %2034 ], [ %1219, %1172 ]\l  %2084 = phi float [ %1920, %2034 ], [ %1058, %1172 ]\l  %2085 = getelementptr inbounds float, float addrspace(1)* %361, i64 7\l  store float %2083, float addrspace(1)* %2085, align 4, !tbaa !5\l  %2086 = getelementptr inbounds float, float addrspace(1)* %361, i64 8\l  store float %2084, float addrspace(1)* %2086, align 4, !tbaa !5\l  ret void\l}"];
}
