; ModuleID = '../data/hip_kernels/3718/6/main.cu'
source_filename = "../data/hip_kernels/3718/6/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.texture = type { %struct.textureReference }
%struct.textureReference = type { i32, i32, i32, [3 x i32], %struct.hipChannelFormatDesc, i32, i32, i32, float, float, float, %struct.__hip_texture*, i32, i32, [7 x i32], i32 }
%struct.hipChannelFormatDesc = type { i32, i32, i32, i32, i32 }
%struct.__hip_texture = type opaque
%struct.texture.0 = type { %struct.textureReference }

@tcExpData = protected local_unnamed_addr addrspace(1) externally_initialized global %struct.texture undef, align 8
@tfG = protected local_unnamed_addr addrspace(1) externally_initialized global %struct.texture.0 undef, align 8

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z26rand_mat_neighb_from_eulerPfS_S_f(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture writeonly %1, float addrspace(1)* nocapture readonly %2, float %3) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %6 = mul nuw nsw i32 %5, 3
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds float, float addrspace(1)* %0, i64 %7
  %9 = load float, float addrspace(1)* %8, align 4, !tbaa !5, !amdgpu.noclobber !9
  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4
  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*
  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !10, !invariant.load !9
  %15 = zext i16 %14 to i32
  %16 = mul i32 %10, %15
  %17 = add i32 %16, %5
  %18 = mul i32 %17, 3
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds float, float addrspace(1)* %2, i64 %19
  %21 = load float, float addrspace(1)* %20, align 4, !tbaa !5, !amdgpu.noclobber !9
  %22 = fmul contract float %21, 2.000000e+00
  %23 = fadd contract float %22, -1.000000e+00
  %24 = fmul contract float %23, %3
  %25 = fadd contract float %9, %24
  %26 = add nuw nsw i32 %6, 2
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !5, !amdgpu.noclobber !9
  %30 = add i32 %18, 2
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5, !amdgpu.noclobber !9
  %34 = fmul contract float %33, 2.000000e+00
  %35 = fadd contract float %34, -1.000000e+00
  %36 = fmul contract float %35, %3
  %37 = fadd contract float %29, %36
  %38 = add nuw nsw i32 %6, 1
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39
  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !5, !amdgpu.noclobber !9
  %42 = tail call float @llvm.fabs.f32(float %41)
  %43 = fcmp olt float %42, 1.310720e+05
  br i1 %43, label %44, label %51

44:                                               ; preds = %4
  %45 = fmul float %42, 0x3FE45F3060000000
  %46 = tail call float @llvm.rint.f32(float %45)
  %47 = tail call float @llvm.fma.f32(float %46, float 0xBFF921FB40000000, float %42)
  %48 = tail call float @llvm.fma.f32(float %46, float 0xBE74442D00000000, float %47)
  %49 = tail call float @llvm.fma.f32(float %46, float 0xBCF8469880000000, float %48)
  %50 = fptosi float %46 to i32
  br label %157

51:                                               ; preds = %4
  %52 = bitcast float %42 to i32
  %53 = lshr i32 %52, 23
  %54 = and i32 %52, 8388607
  %55 = or i32 %54, 8388608
  %56 = zext i32 %55 to i64
  %57 = mul nuw nsw i64 %56, 4266746795
  %58 = trunc i64 %57 to i32
  %59 = lshr i64 %57, 32
  %60 = mul nuw nsw i64 %56, 1011060801
  %61 = add nuw nsw i64 %59, %60
  %62 = trunc i64 %61 to i32
  %63 = lshr i64 %61, 32
  %64 = mul nuw nsw i64 %56, 3680671129
  %65 = add nuw nsw i64 %63, %64
  %66 = trunc i64 %65 to i32
  %67 = lshr i64 %65, 32
  %68 = mul nuw nsw i64 %56, 4113882560
  %69 = add nuw nsw i64 %67, %68
  %70 = trunc i64 %69 to i32
  %71 = lshr i64 %69, 32
  %72 = mul nuw nsw i64 %56, 4230436817
  %73 = add nuw nsw i64 %71, %72
  %74 = trunc i64 %73 to i32
  %75 = lshr i64 %73, 32
  %76 = mul nuw nsw i64 %56, 1313084713
  %77 = add nuw nsw i64 %75, %76
  %78 = trunc i64 %77 to i32
  %79 = lshr i64 %77, 32
  %80 = mul nuw nsw i64 %56, 2734261102
  %81 = add nuw nsw i64 %79, %80
  %82 = trunc i64 %81 to i32
  %83 = lshr i64 %81, 32
  %84 = trunc i64 %83 to i32
  %85 = add nsw i32 %53, -120
  %86 = icmp ugt i32 %85, 63
  %87 = select i1 %86, i32 %78, i32 %84
  %88 = select i1 %86, i32 %74, i32 %82
  %89 = select i1 %86, i32 %70, i32 %78
  %90 = select i1 %86, i32 %66, i32 %74
  %91 = select i1 %86, i32 %62, i32 %70
  %92 = select i1 %86, i32 %58, i32 %66
  %93 = select i1 %86, i32 -64, i32 0
  %94 = add nsw i32 %93, %85
  %95 = icmp ugt i32 %94, 31
  %96 = select i1 %95, i32 %88, i32 %87
  %97 = select i1 %95, i32 %89, i32 %88
  %98 = select i1 %95, i32 %90, i32 %89
  %99 = select i1 %95, i32 %91, i32 %90
  %100 = select i1 %95, i32 %92, i32 %91
  %101 = select i1 %95, i32 -32, i32 0
  %102 = add nsw i32 %101, %94
  %103 = icmp ugt i32 %102, 31
  %104 = select i1 %103, i32 %97, i32 %96
  %105 = select i1 %103, i32 %98, i32 %97
  %106 = select i1 %103, i32 %99, i32 %98
  %107 = select i1 %103, i32 %100, i32 %99
  %108 = select i1 %103, i32 -32, i32 0
  %109 = add nsw i32 %108, %102
  %110 = icmp eq i32 %109, 0
  %111 = sub nsw i32 32, %109
  %112 = tail call i32 @llvm.fshr.i32(i32 %104, i32 %105, i32 %111)
  %113 = tail call i32 @llvm.fshr.i32(i32 %105, i32 %106, i32 %111)
  %114 = tail call i32 @llvm.fshr.i32(i32 %106, i32 %107, i32 %111)
  %115 = select i1 %110, i32 %104, i32 %112
  %116 = select i1 %110, i32 %105, i32 %113
  %117 = select i1 %110, i32 %106, i32 %114
  %118 = lshr i32 %115, 29
  %119 = tail call i32 @llvm.fshl.i32(i32 %115, i32 %116, i32 2)
  %120 = tail call i32 @llvm.fshl.i32(i32 %116, i32 %117, i32 2)
  %121 = tail call i32 @llvm.fshl.i32(i32 %117, i32 %107, i32 2)
  %122 = and i32 %118, 1
  %123 = sub nsw i32 0, %122
  %124 = shl i32 %118, 31
  %125 = xor i32 %119, %123
  %126 = xor i32 %120, %123
  %127 = xor i32 %121, %123
  %128 = tail call i32 @llvm.ctlz.i32(i32 %125, i1 false), !range !11
  %129 = sub nsw i32 31, %128
  %130 = tail call i32 @llvm.fshr.i32(i32 %125, i32 %126, i32 %129)
  %131 = tail call i32 @llvm.fshr.i32(i32 %126, i32 %127, i32 %129)
  %132 = shl nuw nsw i32 %128, 23
  %133 = sub nuw nsw i32 1056964608, %132
  %134 = lshr i32 %130, 9
  %135 = or i32 %134, %133
  %136 = or i32 %135, %124
  %137 = bitcast i32 %136 to float
  %138 = tail call i32 @llvm.fshl.i32(i32 %130, i32 %131, i32 23)
  %139 = tail call i32 @llvm.ctlz.i32(i32 %138, i1 false), !range !11
  %140 = fmul float %137, 0x3FF921FB40000000
  %141 = add nuw nsw i32 %139, %128
  %142 = shl nuw nsw i32 %141, 23
  %143 = sub nuw nsw i32 855638016, %142
  %144 = sub nsw i32 31, %139
  %145 = tail call i32 @llvm.fshr.i32(i32 %138, i32 %131, i32 %144)
  %146 = lshr i32 %145, 9
  %147 = or i32 %143, %146
  %148 = or i32 %147, %124
  %149 = bitcast i32 %148 to float
  %150 = fneg float %140
  %151 = tail call float @llvm.fma.f32(float %137, float 0x3FF921FB40000000, float %150)
  %152 = tail call float @llvm.fma.f32(float %137, float 0x3E74442D00000000, float %151)
  %153 = tail call float @llvm.fma.f32(float %149, float 0x3FF921FB40000000, float %152)
  %154 = fadd float %140, %153
  %155 = lshr i32 %115, 30
  %156 = add nuw nsw i32 %122, %155
  br label %157

157:                                              ; preds = %44, %51
  %158 = phi float [ %49, %44 ], [ %154, %51 ]
  %159 = phi i32 [ %50, %44 ], [ %156, %51 ]
  %160 = fmul float %158, %158
  %161 = tail call float @llvm.fmuladd.f32(float %160, float 0xBF29833040000000, float 0x3F81103880000000)
  %162 = tail call float @llvm.fmuladd.f32(float %160, float %161, float 0xBFC55553A0000000)
  %163 = fmul float %160, %162
  %164 = tail call float @llvm.fmuladd.f32(float %158, float %163, float %158)
  %165 = tail call float @llvm.fmuladd.f32(float %160, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %166 = tail call float @llvm.fmuladd.f32(float %160, float %165, float 0x3FA5557EE0000000)
  %167 = tail call float @llvm.fmuladd.f32(float %160, float %166, float 0xBFE0000080000000)
  %168 = tail call float @llvm.fmuladd.f32(float %160, float %167, float 1.000000e+00)
  %169 = fneg float %164
  %170 = and i32 %159, 1
  %171 = icmp eq i32 %170, 0
  %172 = select i1 %171, float %168, float %169
  %173 = bitcast float %172 to i32
  %174 = shl i32 %159, 30
  %175 = and i32 %174, -2147483648
  %176 = xor i32 %175, %173
  %177 = bitcast i32 %176 to float
  %178 = tail call i1 @llvm.amdgcn.class.f32(float %42, i32 504)
  %179 = select i1 %178, float %177, float 0x7FF8000000000000
  %180 = add i32 %18, 1
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds float, float addrspace(1)* %2, i64 %181
  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !5, !amdgpu.noclobber !9
  %184 = fmul contract float %183, 2.000000e+00
  %185 = fadd contract float %184, -1.000000e+00
  %186 = fmul contract float %41, %3
  %187 = tail call float @llvm.fabs.f32(float %186)
  %188 = fcmp olt float %187, 1.310720e+05
  br i1 %188, label %189, label %197

189:                                              ; preds = %157
  %190 = fmul float %187, 0x3FE45F3060000000
  %191 = tail call float @llvm.rint.f32(float %190)
  %192 = tail call float @llvm.fma.f32(float %191, float 0xBFF921FB40000000, float %187)
  %193 = tail call float @llvm.fma.f32(float %191, float 0xBE74442D00000000, float %192)
  %194 = tail call float @llvm.fma.f32(float %191, float 0xBCF8469880000000, float %193)
  %195 = fptosi float %191 to i32
  %196 = bitcast float %187 to i32
  br label %303

197:                                              ; preds = %157
  %198 = bitcast float %187 to i32
  %199 = lshr i32 %198, 23
  %200 = and i32 %198, 8388607
  %201 = or i32 %200, 8388608
  %202 = zext i32 %201 to i64
  %203 = mul nuw nsw i64 %202, 4266746795
  %204 = trunc i64 %203 to i32
  %205 = lshr i64 %203, 32
  %206 = mul nuw nsw i64 %202, 1011060801
  %207 = add nuw nsw i64 %205, %206
  %208 = trunc i64 %207 to i32
  %209 = lshr i64 %207, 32
  %210 = mul nuw nsw i64 %202, 3680671129
  %211 = add nuw nsw i64 %209, %210
  %212 = trunc i64 %211 to i32
  %213 = lshr i64 %211, 32
  %214 = mul nuw nsw i64 %202, 4113882560
  %215 = add nuw nsw i64 %213, %214
  %216 = trunc i64 %215 to i32
  %217 = lshr i64 %215, 32
  %218 = mul nuw nsw i64 %202, 4230436817
  %219 = add nuw nsw i64 %217, %218
  %220 = trunc i64 %219 to i32
  %221 = lshr i64 %219, 32
  %222 = mul nuw nsw i64 %202, 1313084713
  %223 = add nuw nsw i64 %221, %222
  %224 = trunc i64 %223 to i32
  %225 = lshr i64 %223, 32
  %226 = mul nuw nsw i64 %202, 2734261102
  %227 = add nuw nsw i64 %225, %226
  %228 = trunc i64 %227 to i32
  %229 = lshr i64 %227, 32
  %230 = trunc i64 %229 to i32
  %231 = add nsw i32 %199, -120
  %232 = icmp ugt i32 %231, 63
  %233 = select i1 %232, i32 %224, i32 %230
  %234 = select i1 %232, i32 %220, i32 %228
  %235 = select i1 %232, i32 %216, i32 %224
  %236 = select i1 %232, i32 %212, i32 %220
  %237 = select i1 %232, i32 %208, i32 %216
  %238 = select i1 %232, i32 %204, i32 %212
  %239 = select i1 %232, i32 -64, i32 0
  %240 = add nsw i32 %239, %231
  %241 = icmp ugt i32 %240, 31
  %242 = select i1 %241, i32 %234, i32 %233
  %243 = select i1 %241, i32 %235, i32 %234
  %244 = select i1 %241, i32 %236, i32 %235
  %245 = select i1 %241, i32 %237, i32 %236
  %246 = select i1 %241, i32 %238, i32 %237
  %247 = select i1 %241, i32 -32, i32 0
  %248 = add nsw i32 %247, %240
  %249 = icmp ugt i32 %248, 31
  %250 = select i1 %249, i32 %243, i32 %242
  %251 = select i1 %249, i32 %244, i32 %243
  %252 = select i1 %249, i32 %245, i32 %244
  %253 = select i1 %249, i32 %246, i32 %245
  %254 = select i1 %249, i32 -32, i32 0
  %255 = add nsw i32 %254, %248
  %256 = icmp eq i32 %255, 0
  %257 = sub nsw i32 32, %255
  %258 = tail call i32 @llvm.fshr.i32(i32 %250, i32 %251, i32 %257)
  %259 = tail call i32 @llvm.fshr.i32(i32 %251, i32 %252, i32 %257)
  %260 = tail call i32 @llvm.fshr.i32(i32 %252, i32 %253, i32 %257)
  %261 = select i1 %256, i32 %250, i32 %258
  %262 = select i1 %256, i32 %251, i32 %259
  %263 = select i1 %256, i32 %252, i32 %260
  %264 = lshr i32 %261, 29
  %265 = tail call i32 @llvm.fshl.i32(i32 %261, i32 %262, i32 2)
  %266 = tail call i32 @llvm.fshl.i32(i32 %262, i32 %263, i32 2)
  %267 = tail call i32 @llvm.fshl.i32(i32 %263, i32 %253, i32 2)
  %268 = and i32 %264, 1
  %269 = sub nsw i32 0, %268
  %270 = shl i32 %264, 31
  %271 = xor i32 %265, %269
  %272 = xor i32 %266, %269
  %273 = xor i32 %267, %269
  %274 = tail call i32 @llvm.ctlz.i32(i32 %271, i1 false), !range !11
  %275 = sub nsw i32 31, %274
  %276 = tail call i32 @llvm.fshr.i32(i32 %271, i32 %272, i32 %275)
  %277 = tail call i32 @llvm.fshr.i32(i32 %272, i32 %273, i32 %275)
  %278 = shl nuw nsw i32 %274, 23
  %279 = sub nuw nsw i32 1056964608, %278
  %280 = lshr i32 %276, 9
  %281 = or i32 %280, %279
  %282 = or i32 %281, %270
  %283 = bitcast i32 %282 to float
  %284 = tail call i32 @llvm.fshl.i32(i32 %276, i32 %277, i32 23)
  %285 = tail call i32 @llvm.ctlz.i32(i32 %284, i1 false), !range !11
  %286 = fmul float %283, 0x3FF921FB40000000
  %287 = add nuw nsw i32 %285, %274
  %288 = shl nuw nsw i32 %287, 23
  %289 = sub nuw nsw i32 855638016, %288
  %290 = sub nsw i32 31, %285
  %291 = tail call i32 @llvm.fshr.i32(i32 %284, i32 %277, i32 %290)
  %292 = lshr i32 %291, 9
  %293 = or i32 %289, %292
  %294 = or i32 %293, %270
  %295 = bitcast i32 %294 to float
  %296 = fneg float %286
  %297 = tail call float @llvm.fma.f32(float %283, float 0x3FF921FB40000000, float %296)
  %298 = tail call float @llvm.fma.f32(float %283, float 0x3E74442D00000000, float %297)
  %299 = tail call float @llvm.fma.f32(float %295, float 0x3FF921FB40000000, float %298)
  %300 = fadd float %286, %299
  %301 = lshr i32 %261, 30
  %302 = add nuw nsw i32 %268, %301
  br label %303

303:                                              ; preds = %189, %197
  %304 = phi i32 [ %196, %189 ], [ %198, %197 ]
  %305 = phi float [ %194, %189 ], [ %300, %197 ]
  %306 = phi i32 [ %195, %189 ], [ %302, %197 ]
  %307 = fmul float %305, %305
  %308 = tail call float @llvm.fmuladd.f32(float %307, float 0xBF29833040000000, float 0x3F81103880000000)
  %309 = tail call float @llvm.fmuladd.f32(float %307, float %308, float 0xBFC55553A0000000)
  %310 = fmul float %307, %309
  %311 = tail call float @llvm.fmuladd.f32(float %305, float %310, float %305)
  %312 = tail call float @llvm.fmuladd.f32(float %307, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %313 = tail call float @llvm.fmuladd.f32(float %307, float %312, float 0x3FA5557EE0000000)
  %314 = tail call float @llvm.fmuladd.f32(float %307, float %313, float 0xBFE0000080000000)
  %315 = tail call float @llvm.fmuladd.f32(float %307, float %314, float 1.000000e+00)
  %316 = and i32 %306, 1
  %317 = icmp eq i32 %316, 0
  %318 = select i1 %317, float %311, float %315
  %319 = bitcast float %318 to i32
  %320 = shl i32 %306, 30
  %321 = and i32 %320, -2147483648
  %322 = bitcast float %186 to i32
  %323 = xor i32 %304, %322
  %324 = xor i32 %323, %321
  %325 = xor i32 %324, %319
  %326 = bitcast i32 %325 to float
  %327 = tail call i1 @llvm.amdgcn.class.f32(float %187, i32 504)
  %328 = select i1 %327, float %326, float 0x7FF8000000000000
  %329 = fmul contract float %185, %328
  %330 = fadd contract float %179, %329
  %331 = fcmp contract ogt float %330, 1.000000e+00
  %332 = fcmp contract olt float %330, -1.000000e+00
  %333 = select i1 %332, float -1.000000e+00, float %330
  %334 = select i1 %331, float 1.000000e+00, float %333
  %335 = tail call float @llvm.fabs.f32(float %334)
  %336 = tail call float @llvm.fmuladd.f32(float %335, float -5.000000e-01, float 5.000000e-01)
  %337 = fmul float %334, %334
  %338 = fcmp ogt float %335, 5.000000e-01
  %339 = select i1 %338, float %336, float %337
  %340 = tail call float @llvm.fmuladd.f32(float %339, float 0x3FA38434E0000000, float 0x3F8BF8BB40000000)
  %341 = tail call float @llvm.fmuladd.f32(float %339, float %340, float 0x3FA0698780000000)
  %342 = tail call float @llvm.fmuladd.f32(float %339, float %341, float 0x3FA6C83620000000)
  %343 = tail call float @llvm.fmuladd.f32(float %339, float %342, float 0x3FB3337900000000)
  %344 = tail call float @llvm.fmuladd.f32(float %339, float %343, float 0x3FC5555580000000)
  %345 = fmul float %339, %344
  %346 = tail call float @llvm.sqrt.f32(float %339)
  %347 = tail call float @llvm.fmuladd.f32(float %346, float %345, float %346)
  %348 = fmul float %347, 2.000000e+00
  %349 = fsub float 0x400921FB60000000, %348
  %350 = fcmp olt float %334, 0.000000e+00
  %351 = select i1 %350, float %349, float %348
  %352 = tail call float @llvm.fmuladd.f32(float %334, float %345, float %334)
  %353 = fsub float 0x3FF921FB60000000, %352
  %354 = select i1 %338, float %351, float %353
  %355 = icmp eq i32 %10, 0
  %356 = mul i32 %16, 9
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds float, float addrspace(1)* %1, i64 %357
  %359 = mul nuw nsw i32 %5, 9
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds float, float addrspace(1)* %358, i64 %360
  br i1 %355, label %1220, label %362

362:                                              ; preds = %303
  %363 = tail call float @llvm.fabs.f32(float %25)
  %364 = fcmp olt float %363, 1.310720e+05
  br i1 %364, label %365, label %373

365:                                              ; preds = %362
  %366 = fmul float %363, 0x3FE45F3060000000
  %367 = tail call float @llvm.rint.f32(float %366)
  %368 = tail call float @llvm.fma.f32(float %367, float 0xBFF921FB40000000, float %363)
  %369 = tail call float @llvm.fma.f32(float %367, float 0xBE74442D00000000, float %368)
  %370 = tail call float @llvm.fma.f32(float %367, float 0xBCF8469880000000, float %369)
  %371 = fptosi float %367 to i32
  %372 = bitcast float %363 to i32
  br label %479

373:                                              ; preds = %362
  %374 = bitcast float %363 to i32
  %375 = lshr i32 %374, 23
  %376 = and i32 %374, 8388607
  %377 = or i32 %376, 8388608
  %378 = zext i32 %377 to i64
  %379 = mul nuw nsw i64 %378, 4266746795
  %380 = trunc i64 %379 to i32
  %381 = lshr i64 %379, 32
  %382 = mul nuw nsw i64 %378, 1011060801
  %383 = add nuw nsw i64 %381, %382
  %384 = trunc i64 %383 to i32
  %385 = lshr i64 %383, 32
  %386 = mul nuw nsw i64 %378, 3680671129
  %387 = add nuw nsw i64 %385, %386
  %388 = trunc i64 %387 to i32
  %389 = lshr i64 %387, 32
  %390 = mul nuw nsw i64 %378, 4113882560
  %391 = add nuw nsw i64 %389, %390
  %392 = trunc i64 %391 to i32
  %393 = lshr i64 %391, 32
  %394 = mul nuw nsw i64 %378, 4230436817
  %395 = add nuw nsw i64 %393, %394
  %396 = trunc i64 %395 to i32
  %397 = lshr i64 %395, 32
  %398 = mul nuw nsw i64 %378, 1313084713
  %399 = add nuw nsw i64 %397, %398
  %400 = trunc i64 %399 to i32
  %401 = lshr i64 %399, 32
  %402 = mul nuw nsw i64 %378, 2734261102
  %403 = add nuw nsw i64 %401, %402
  %404 = trunc i64 %403 to i32
  %405 = lshr i64 %403, 32
  %406 = trunc i64 %405 to i32
  %407 = add nsw i32 %375, -120
  %408 = icmp ugt i32 %407, 63
  %409 = select i1 %408, i32 %400, i32 %406
  %410 = select i1 %408, i32 %396, i32 %404
  %411 = select i1 %408, i32 %392, i32 %400
  %412 = select i1 %408, i32 %388, i32 %396
  %413 = select i1 %408, i32 %384, i32 %392
  %414 = select i1 %408, i32 %380, i32 %388
  %415 = select i1 %408, i32 -64, i32 0
  %416 = add nsw i32 %415, %407
  %417 = icmp ugt i32 %416, 31
  %418 = select i1 %417, i32 %410, i32 %409
  %419 = select i1 %417, i32 %411, i32 %410
  %420 = select i1 %417, i32 %412, i32 %411
  %421 = select i1 %417, i32 %413, i32 %412
  %422 = select i1 %417, i32 %414, i32 %413
  %423 = select i1 %417, i32 -32, i32 0
  %424 = add nsw i32 %423, %416
  %425 = icmp ugt i32 %424, 31
  %426 = select i1 %425, i32 %419, i32 %418
  %427 = select i1 %425, i32 %420, i32 %419
  %428 = select i1 %425, i32 %421, i32 %420
  %429 = select i1 %425, i32 %422, i32 %421
  %430 = select i1 %425, i32 -32, i32 0
  %431 = add nsw i32 %430, %424
  %432 = icmp eq i32 %431, 0
  %433 = sub nsw i32 32, %431
  %434 = tail call i32 @llvm.fshr.i32(i32 %426, i32 %427, i32 %433)
  %435 = tail call i32 @llvm.fshr.i32(i32 %427, i32 %428, i32 %433)
  %436 = tail call i32 @llvm.fshr.i32(i32 %428, i32 %429, i32 %433)
  %437 = select i1 %432, i32 %426, i32 %434
  %438 = select i1 %432, i32 %427, i32 %435
  %439 = select i1 %432, i32 %428, i32 %436
  %440 = lshr i32 %437, 29
  %441 = tail call i32 @llvm.fshl.i32(i32 %437, i32 %438, i32 2)
  %442 = tail call i32 @llvm.fshl.i32(i32 %438, i32 %439, i32 2)
  %443 = tail call i32 @llvm.fshl.i32(i32 %439, i32 %429, i32 2)
  %444 = and i32 %440, 1
  %445 = sub nsw i32 0, %444
  %446 = shl i32 %440, 31
  %447 = xor i32 %441, %445
  %448 = xor i32 %442, %445
  %449 = xor i32 %443, %445
  %450 = tail call i32 @llvm.ctlz.i32(i32 %447, i1 false), !range !11
  %451 = sub nsw i32 31, %450
  %452 = tail call i32 @llvm.fshr.i32(i32 %447, i32 %448, i32 %451)
  %453 = tail call i32 @llvm.fshr.i32(i32 %448, i32 %449, i32 %451)
  %454 = shl nuw nsw i32 %450, 23
  %455 = sub nuw nsw i32 1056964608, %454
  %456 = lshr i32 %452, 9
  %457 = or i32 %456, %455
  %458 = or i32 %457, %446
  %459 = bitcast i32 %458 to float
  %460 = tail call i32 @llvm.fshl.i32(i32 %452, i32 %453, i32 23)
  %461 = tail call i32 @llvm.ctlz.i32(i32 %460, i1 false), !range !11
  %462 = fmul float %459, 0x3FF921FB40000000
  %463 = add nuw nsw i32 %461, %450
  %464 = shl nuw nsw i32 %463, 23
  %465 = sub nuw nsw i32 855638016, %464
  %466 = sub nsw i32 31, %461
  %467 = tail call i32 @llvm.fshr.i32(i32 %460, i32 %453, i32 %466)
  %468 = lshr i32 %467, 9
  %469 = or i32 %465, %468
  %470 = or i32 %469, %446
  %471 = bitcast i32 %470 to float
  %472 = fneg float %462
  %473 = tail call float @llvm.fma.f32(float %459, float 0x3FF921FB40000000, float %472)
  %474 = tail call float @llvm.fma.f32(float %459, float 0x3E74442D00000000, float %473)
  %475 = tail call float @llvm.fma.f32(float %471, float 0x3FF921FB40000000, float %474)
  %476 = fadd float %462, %475
  %477 = lshr i32 %437, 30
  %478 = add nuw nsw i32 %444, %477
  br label %479

479:                                              ; preds = %373, %365
  %480 = phi i32 [ %372, %365 ], [ %374, %373 ]
  %481 = phi float [ %370, %365 ], [ %476, %373 ]
  %482 = phi i32 [ %371, %365 ], [ %478, %373 ]
  %483 = fmul float %481, %481
  %484 = tail call float @llvm.fmuladd.f32(float %483, float 0xBF29833040000000, float 0x3F81103880000000)
  %485 = tail call float @llvm.fmuladd.f32(float %483, float %484, float 0xBFC55553A0000000)
  %486 = fmul float %483, %485
  %487 = tail call float @llvm.fmuladd.f32(float %481, float %486, float %481)
  %488 = tail call float @llvm.fmuladd.f32(float %483, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %489 = tail call float @llvm.fmuladd.f32(float %483, float %488, float 0x3FA5557EE0000000)
  %490 = tail call float @llvm.fmuladd.f32(float %483, float %489, float 0xBFE0000080000000)
  %491 = tail call float @llvm.fmuladd.f32(float %483, float %490, float 1.000000e+00)
  %492 = and i32 %482, 1
  %493 = icmp eq i32 %492, 0
  %494 = select i1 %493, float %487, float %491
  %495 = bitcast float %494 to i32
  %496 = shl i32 %482, 30
  %497 = and i32 %496, -2147483648
  %498 = bitcast float %25 to i32
  %499 = xor i32 %480, %498
  %500 = xor i32 %499, %497
  %501 = xor i32 %500, %495
  %502 = bitcast i32 %501 to float
  %503 = tail call i1 @llvm.amdgcn.class.f32(float %363, i32 504)
  %504 = select i1 %503, float %502, float 0x7FF8000000000000
  %505 = tail call float @llvm.fabs.f32(float %354)
  %506 = fcmp olt float %505, 1.310720e+05
  br i1 %506, label %507, label %515

507:                                              ; preds = %479
  %508 = fmul float %505, 0x3FE45F3060000000
  %509 = tail call float @llvm.rint.f32(float %508)
  %510 = tail call float @llvm.fma.f32(float %509, float 0xBFF921FB40000000, float %505)
  %511 = tail call float @llvm.fma.f32(float %509, float 0xBE74442D00000000, float %510)
  %512 = tail call float @llvm.fma.f32(float %509, float 0xBCF8469880000000, float %511)
  %513 = fptosi float %509 to i32
  %514 = bitcast float %505 to i32
  br label %621

515:                                              ; preds = %479
  %516 = bitcast float %505 to i32
  %517 = lshr i32 %516, 23
  %518 = and i32 %516, 8388607
  %519 = or i32 %518, 8388608
  %520 = zext i32 %519 to i64
  %521 = mul nuw nsw i64 %520, 4266746795
  %522 = trunc i64 %521 to i32
  %523 = lshr i64 %521, 32
  %524 = mul nuw nsw i64 %520, 1011060801
  %525 = add nuw nsw i64 %523, %524
  %526 = trunc i64 %525 to i32
  %527 = lshr i64 %525, 32
  %528 = mul nuw nsw i64 %520, 3680671129
  %529 = add nuw nsw i64 %527, %528
  %530 = trunc i64 %529 to i32
  %531 = lshr i64 %529, 32
  %532 = mul nuw nsw i64 %520, 4113882560
  %533 = add nuw nsw i64 %531, %532
  %534 = trunc i64 %533 to i32
  %535 = lshr i64 %533, 32
  %536 = mul nuw nsw i64 %520, 4230436817
  %537 = add nuw nsw i64 %535, %536
  %538 = trunc i64 %537 to i32
  %539 = lshr i64 %537, 32
  %540 = mul nuw nsw i64 %520, 1313084713
  %541 = add nuw nsw i64 %539, %540
  %542 = trunc i64 %541 to i32
  %543 = lshr i64 %541, 32
  %544 = mul nuw nsw i64 %520, 2734261102
  %545 = add nuw nsw i64 %543, %544
  %546 = trunc i64 %545 to i32
  %547 = lshr i64 %545, 32
  %548 = trunc i64 %547 to i32
  %549 = add nsw i32 %517, -120
  %550 = icmp ugt i32 %549, 63
  %551 = select i1 %550, i32 %542, i32 %548
  %552 = select i1 %550, i32 %538, i32 %546
  %553 = select i1 %550, i32 %534, i32 %542
  %554 = select i1 %550, i32 %530, i32 %538
  %555 = select i1 %550, i32 %526, i32 %534
  %556 = select i1 %550, i32 %522, i32 %530
  %557 = select i1 %550, i32 -64, i32 0
  %558 = add nsw i32 %557, %549
  %559 = icmp ugt i32 %558, 31
  %560 = select i1 %559, i32 %552, i32 %551
  %561 = select i1 %559, i32 %553, i32 %552
  %562 = select i1 %559, i32 %554, i32 %553
  %563 = select i1 %559, i32 %555, i32 %554
  %564 = select i1 %559, i32 %556, i32 %555
  %565 = select i1 %559, i32 -32, i32 0
  %566 = add nsw i32 %565, %558
  %567 = icmp ugt i32 %566, 31
  %568 = select i1 %567, i32 %561, i32 %560
  %569 = select i1 %567, i32 %562, i32 %561
  %570 = select i1 %567, i32 %563, i32 %562
  %571 = select i1 %567, i32 %564, i32 %563
  %572 = select i1 %567, i32 -32, i32 0
  %573 = add nsw i32 %572, %566
  %574 = icmp eq i32 %573, 0
  %575 = sub nsw i32 32, %573
  %576 = tail call i32 @llvm.fshr.i32(i32 %568, i32 %569, i32 %575)
  %577 = tail call i32 @llvm.fshr.i32(i32 %569, i32 %570, i32 %575)
  %578 = tail call i32 @llvm.fshr.i32(i32 %570, i32 %571, i32 %575)
  %579 = select i1 %574, i32 %568, i32 %576
  %580 = select i1 %574, i32 %569, i32 %577
  %581 = select i1 %574, i32 %570, i32 %578
  %582 = lshr i32 %579, 29
  %583 = tail call i32 @llvm.fshl.i32(i32 %579, i32 %580, i32 2)
  %584 = tail call i32 @llvm.fshl.i32(i32 %580, i32 %581, i32 2)
  %585 = tail call i32 @llvm.fshl.i32(i32 %581, i32 %571, i32 2)
  %586 = and i32 %582, 1
  %587 = sub nsw i32 0, %586
  %588 = shl i32 %582, 31
  %589 = xor i32 %583, %587
  %590 = xor i32 %584, %587
  %591 = xor i32 %585, %587
  %592 = tail call i32 @llvm.ctlz.i32(i32 %589, i1 false), !range !11
  %593 = sub nsw i32 31, %592
  %594 = tail call i32 @llvm.fshr.i32(i32 %589, i32 %590, i32 %593)
  %595 = tail call i32 @llvm.fshr.i32(i32 %590, i32 %591, i32 %593)
  %596 = shl nuw nsw i32 %592, 23
  %597 = sub nuw nsw i32 1056964608, %596
  %598 = lshr i32 %594, 9
  %599 = or i32 %598, %597
  %600 = or i32 %599, %588
  %601 = bitcast i32 %600 to float
  %602 = tail call i32 @llvm.fshl.i32(i32 %594, i32 %595, i32 23)
  %603 = tail call i32 @llvm.ctlz.i32(i32 %602, i1 false), !range !11
  %604 = fmul float %601, 0x3FF921FB40000000
  %605 = add nuw nsw i32 %603, %592
  %606 = shl nuw nsw i32 %605, 23
  %607 = sub nuw nsw i32 855638016, %606
  %608 = sub nsw i32 31, %603
  %609 = tail call i32 @llvm.fshr.i32(i32 %602, i32 %595, i32 %608)
  %610 = lshr i32 %609, 9
  %611 = or i32 %607, %610
  %612 = or i32 %611, %588
  %613 = bitcast i32 %612 to float
  %614 = fneg float %604
  %615 = tail call float @llvm.fma.f32(float %601, float 0x3FF921FB40000000, float %614)
  %616 = tail call float @llvm.fma.f32(float %601, float 0x3E74442D00000000, float %615)
  %617 = tail call float @llvm.fma.f32(float %613, float 0x3FF921FB40000000, float %616)
  %618 = fadd float %604, %617
  %619 = lshr i32 %579, 30
  %620 = add nuw nsw i32 %586, %619
  br label %621

621:                                              ; preds = %515, %507
  %622 = phi i32 [ %514, %507 ], [ %516, %515 ]
  %623 = phi float [ %512, %507 ], [ %618, %515 ]
  %624 = phi i32 [ %513, %507 ], [ %620, %515 ]
  %625 = fmul float %623, %623
  %626 = tail call float @llvm.fmuladd.f32(float %625, float 0xBF29833040000000, float 0x3F81103880000000)
  %627 = tail call float @llvm.fmuladd.f32(float %625, float %626, float 0xBFC55553A0000000)
  %628 = fmul float %625, %627
  %629 = tail call float @llvm.fmuladd.f32(float %623, float %628, float %623)
  %630 = tail call float @llvm.fmuladd.f32(float %625, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %631 = tail call float @llvm.fmuladd.f32(float %625, float %630, float 0x3FA5557EE0000000)
  %632 = tail call float @llvm.fmuladd.f32(float %625, float %631, float 0xBFE0000080000000)
  %633 = tail call float @llvm.fmuladd.f32(float %625, float %632, float 1.000000e+00)
  %634 = and i32 %624, 1
  %635 = icmp eq i32 %634, 0
  %636 = select i1 %635, float %629, float %633
  %637 = bitcast float %636 to i32
  %638 = shl i32 %624, 30
  %639 = and i32 %638, -2147483648
  %640 = bitcast float %354 to i32
  %641 = xor i32 %622, %640
  %642 = xor i32 %641, %639
  %643 = xor i32 %642, %637
  %644 = bitcast i32 %643 to float
  %645 = tail call i1 @llvm.amdgcn.class.f32(float %505, i32 504)
  %646 = select i1 %645, float %644, float 0x7FF8000000000000
  %647 = tail call float @llvm.fabs.f32(float %37)
  %648 = fcmp olt float %647, 1.310720e+05
  br i1 %648, label %649, label %657

649:                                              ; preds = %621
  %650 = fmul float %647, 0x3FE45F3060000000
  %651 = tail call float @llvm.rint.f32(float %650)
  %652 = tail call float @llvm.fma.f32(float %651, float 0xBFF921FB40000000, float %647)
  %653 = tail call float @llvm.fma.f32(float %651, float 0xBE74442D00000000, float %652)
  %654 = tail call float @llvm.fma.f32(float %651, float 0xBCF8469880000000, float %653)
  %655 = fptosi float %651 to i32
  %656 = bitcast float %647 to i32
  br label %763

657:                                              ; preds = %621
  %658 = bitcast float %647 to i32
  %659 = lshr i32 %658, 23
  %660 = and i32 %658, 8388607
  %661 = or i32 %660, 8388608
  %662 = zext i32 %661 to i64
  %663 = mul nuw nsw i64 %662, 4266746795
  %664 = trunc i64 %663 to i32
  %665 = lshr i64 %663, 32
  %666 = mul nuw nsw i64 %662, 1011060801
  %667 = add nuw nsw i64 %665, %666
  %668 = trunc i64 %667 to i32
  %669 = lshr i64 %667, 32
  %670 = mul nuw nsw i64 %662, 3680671129
  %671 = add nuw nsw i64 %669, %670
  %672 = trunc i64 %671 to i32
  %673 = lshr i64 %671, 32
  %674 = mul nuw nsw i64 %662, 4113882560
  %675 = add nuw nsw i64 %673, %674
  %676 = trunc i64 %675 to i32
  %677 = lshr i64 %675, 32
  %678 = mul nuw nsw i64 %662, 4230436817
  %679 = add nuw nsw i64 %677, %678
  %680 = trunc i64 %679 to i32
  %681 = lshr i64 %679, 32
  %682 = mul nuw nsw i64 %662, 1313084713
  %683 = add nuw nsw i64 %681, %682
  %684 = trunc i64 %683 to i32
  %685 = lshr i64 %683, 32
  %686 = mul nuw nsw i64 %662, 2734261102
  %687 = add nuw nsw i64 %685, %686
  %688 = trunc i64 %687 to i32
  %689 = lshr i64 %687, 32
  %690 = trunc i64 %689 to i32
  %691 = add nsw i32 %659, -120
  %692 = icmp ugt i32 %691, 63
  %693 = select i1 %692, i32 %684, i32 %690
  %694 = select i1 %692, i32 %680, i32 %688
  %695 = select i1 %692, i32 %676, i32 %684
  %696 = select i1 %692, i32 %672, i32 %680
  %697 = select i1 %692, i32 %668, i32 %676
  %698 = select i1 %692, i32 %664, i32 %672
  %699 = select i1 %692, i32 -64, i32 0
  %700 = add nsw i32 %699, %691
  %701 = icmp ugt i32 %700, 31
  %702 = select i1 %701, i32 %694, i32 %693
  %703 = select i1 %701, i32 %695, i32 %694
  %704 = select i1 %701, i32 %696, i32 %695
  %705 = select i1 %701, i32 %697, i32 %696
  %706 = select i1 %701, i32 %698, i32 %697
  %707 = select i1 %701, i32 -32, i32 0
  %708 = add nsw i32 %707, %700
  %709 = icmp ugt i32 %708, 31
  %710 = select i1 %709, i32 %703, i32 %702
  %711 = select i1 %709, i32 %704, i32 %703
  %712 = select i1 %709, i32 %705, i32 %704
  %713 = select i1 %709, i32 %706, i32 %705
  %714 = select i1 %709, i32 -32, i32 0
  %715 = add nsw i32 %714, %708
  %716 = icmp eq i32 %715, 0
  %717 = sub nsw i32 32, %715
  %718 = tail call i32 @llvm.fshr.i32(i32 %710, i32 %711, i32 %717)
  %719 = tail call i32 @llvm.fshr.i32(i32 %711, i32 %712, i32 %717)
  %720 = tail call i32 @llvm.fshr.i32(i32 %712, i32 %713, i32 %717)
  %721 = select i1 %716, i32 %710, i32 %718
  %722 = select i1 %716, i32 %711, i32 %719
  %723 = select i1 %716, i32 %712, i32 %720
  %724 = lshr i32 %721, 29
  %725 = tail call i32 @llvm.fshl.i32(i32 %721, i32 %722, i32 2)
  %726 = tail call i32 @llvm.fshl.i32(i32 %722, i32 %723, i32 2)
  %727 = tail call i32 @llvm.fshl.i32(i32 %723, i32 %713, i32 2)
  %728 = and i32 %724, 1
  %729 = sub nsw i32 0, %728
  %730 = shl i32 %724, 31
  %731 = xor i32 %725, %729
  %732 = xor i32 %726, %729
  %733 = xor i32 %727, %729
  %734 = tail call i32 @llvm.ctlz.i32(i32 %731, i1 false), !range !11
  %735 = sub nsw i32 31, %734
  %736 = tail call i32 @llvm.fshr.i32(i32 %731, i32 %732, i32 %735)
  %737 = tail call i32 @llvm.fshr.i32(i32 %732, i32 %733, i32 %735)
  %738 = shl nuw nsw i32 %734, 23
  %739 = sub nuw nsw i32 1056964608, %738
  %740 = lshr i32 %736, 9
  %741 = or i32 %740, %739
  %742 = or i32 %741, %730
  %743 = bitcast i32 %742 to float
  %744 = tail call i32 @llvm.fshl.i32(i32 %736, i32 %737, i32 23)
  %745 = tail call i32 @llvm.ctlz.i32(i32 %744, i1 false), !range !11
  %746 = fmul float %743, 0x3FF921FB40000000
  %747 = add nuw nsw i32 %745, %734
  %748 = shl nuw nsw i32 %747, 23
  %749 = sub nuw nsw i32 855638016, %748
  %750 = sub nsw i32 31, %745
  %751 = tail call i32 @llvm.fshr.i32(i32 %744, i32 %737, i32 %750)
  %752 = lshr i32 %751, 9
  %753 = or i32 %749, %752
  %754 = or i32 %753, %730
  %755 = bitcast i32 %754 to float
  %756 = fneg float %746
  %757 = tail call float @llvm.fma.f32(float %743, float 0x3FF921FB40000000, float %756)
  %758 = tail call float @llvm.fma.f32(float %743, float 0x3E74442D00000000, float %757)
  %759 = tail call float @llvm.fma.f32(float %755, float 0x3FF921FB40000000, float %758)
  %760 = fadd float %746, %759
  %761 = lshr i32 %721, 30
  %762 = add nuw nsw i32 %728, %761
  br label %763

763:                                              ; preds = %657, %649
  %764 = phi i32 [ %656, %649 ], [ %658, %657 ]
  %765 = phi float [ %654, %649 ], [ %760, %657 ]
  %766 = phi i32 [ %655, %649 ], [ %762, %657 ]
  %767 = fmul float %765, %765
  %768 = tail call float @llvm.fmuladd.f32(float %767, float 0xBF29833040000000, float 0x3F81103880000000)
  %769 = tail call float @llvm.fmuladd.f32(float %767, float %768, float 0xBFC55553A0000000)
  %770 = fmul float %767, %769
  %771 = tail call float @llvm.fmuladd.f32(float %765, float %770, float %765)
  %772 = tail call float @llvm.fmuladd.f32(float %767, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %773 = tail call float @llvm.fmuladd.f32(float %767, float %772, float 0x3FA5557EE0000000)
  %774 = tail call float @llvm.fmuladd.f32(float %767, float %773, float 0xBFE0000080000000)
  %775 = tail call float @llvm.fmuladd.f32(float %767, float %774, float 1.000000e+00)
  %776 = and i32 %766, 1
  %777 = icmp eq i32 %776, 0
  %778 = select i1 %777, float %771, float %775
  %779 = bitcast float %778 to i32
  %780 = shl i32 %766, 30
  %781 = and i32 %780, -2147483648
  %782 = bitcast float %37 to i32
  %783 = xor i32 %764, %782
  %784 = xor i32 %783, %781
  %785 = xor i32 %784, %779
  %786 = bitcast i32 %785 to float
  %787 = tail call i1 @llvm.amdgcn.class.f32(float %647, i32 504)
  %788 = select i1 %787, float %786, float 0x7FF8000000000000
  br i1 %364, label %789, label %796

789:                                              ; preds = %763
  %790 = fmul float %363, 0x3FE45F3060000000
  %791 = tail call float @llvm.rint.f32(float %790)
  %792 = tail call float @llvm.fma.f32(float %791, float 0xBFF921FB40000000, float %363)
  %793 = tail call float @llvm.fma.f32(float %791, float 0xBE74442D00000000, float %792)
  %794 = tail call float @llvm.fma.f32(float %791, float 0xBCF8469880000000, float %793)
  %795 = fptosi float %791 to i32
  br label %902

796:                                              ; preds = %763
  %797 = bitcast float %363 to i32
  %798 = lshr i32 %797, 23
  %799 = and i32 %797, 8388607
  %800 = or i32 %799, 8388608
  %801 = zext i32 %800 to i64
  %802 = mul nuw nsw i64 %801, 4266746795
  %803 = trunc i64 %802 to i32
  %804 = lshr i64 %802, 32
  %805 = mul nuw nsw i64 %801, 1011060801
  %806 = add nuw nsw i64 %804, %805
  %807 = trunc i64 %806 to i32
  %808 = lshr i64 %806, 32
  %809 = mul nuw nsw i64 %801, 3680671129
  %810 = add nuw nsw i64 %808, %809
  %811 = trunc i64 %810 to i32
  %812 = lshr i64 %810, 32
  %813 = mul nuw nsw i64 %801, 4113882560
  %814 = add nuw nsw i64 %812, %813
  %815 = trunc i64 %814 to i32
  %816 = lshr i64 %814, 32
  %817 = mul nuw nsw i64 %801, 4230436817
  %818 = add nuw nsw i64 %816, %817
  %819 = trunc i64 %818 to i32
  %820 = lshr i64 %818, 32
  %821 = mul nuw nsw i64 %801, 1313084713
  %822 = add nuw nsw i64 %820, %821
  %823 = trunc i64 %822 to i32
  %824 = lshr i64 %822, 32
  %825 = mul nuw nsw i64 %801, 2734261102
  %826 = add nuw nsw i64 %824, %825
  %827 = trunc i64 %826 to i32
  %828 = lshr i64 %826, 32
  %829 = trunc i64 %828 to i32
  %830 = add nsw i32 %798, -120
  %831 = icmp ugt i32 %830, 63
  %832 = select i1 %831, i32 %823, i32 %829
  %833 = select i1 %831, i32 %819, i32 %827
  %834 = select i1 %831, i32 %815, i32 %823
  %835 = select i1 %831, i32 %811, i32 %819
  %836 = select i1 %831, i32 %807, i32 %815
  %837 = select i1 %831, i32 %803, i32 %811
  %838 = select i1 %831, i32 -64, i32 0
  %839 = add nsw i32 %838, %830
  %840 = icmp ugt i32 %839, 31
  %841 = select i1 %840, i32 %833, i32 %832
  %842 = select i1 %840, i32 %834, i32 %833
  %843 = select i1 %840, i32 %835, i32 %834
  %844 = select i1 %840, i32 %836, i32 %835
  %845 = select i1 %840, i32 %837, i32 %836
  %846 = select i1 %840, i32 -32, i32 0
  %847 = add nsw i32 %846, %839
  %848 = icmp ugt i32 %847, 31
  %849 = select i1 %848, i32 %842, i32 %841
  %850 = select i1 %848, i32 %843, i32 %842
  %851 = select i1 %848, i32 %844, i32 %843
  %852 = select i1 %848, i32 %845, i32 %844
  %853 = select i1 %848, i32 -32, i32 0
  %854 = add nsw i32 %853, %847
  %855 = icmp eq i32 %854, 0
  %856 = sub nsw i32 32, %854
  %857 = tail call i32 @llvm.fshr.i32(i32 %849, i32 %850, i32 %856)
  %858 = tail call i32 @llvm.fshr.i32(i32 %850, i32 %851, i32 %856)
  %859 = tail call i32 @llvm.fshr.i32(i32 %851, i32 %852, i32 %856)
  %860 = select i1 %855, i32 %849, i32 %857
  %861 = select i1 %855, i32 %850, i32 %858
  %862 = select i1 %855, i32 %851, i32 %859
  %863 = lshr i32 %860, 29
  %864 = tail call i32 @llvm.fshl.i32(i32 %860, i32 %861, i32 2)
  %865 = tail call i32 @llvm.fshl.i32(i32 %861, i32 %862, i32 2)
  %866 = tail call i32 @llvm.fshl.i32(i32 %862, i32 %852, i32 2)
  %867 = and i32 %863, 1
  %868 = sub nsw i32 0, %867
  %869 = shl i32 %863, 31
  %870 = xor i32 %864, %868
  %871 = xor i32 %865, %868
  %872 = xor i32 %866, %868
  %873 = tail call i32 @llvm.ctlz.i32(i32 %870, i1 false), !range !11
  %874 = sub nsw i32 31, %873
  %875 = tail call i32 @llvm.fshr.i32(i32 %870, i32 %871, i32 %874)
  %876 = tail call i32 @llvm.fshr.i32(i32 %871, i32 %872, i32 %874)
  %877 = shl nuw nsw i32 %873, 23
  %878 = sub nuw nsw i32 1056964608, %877
  %879 = lshr i32 %875, 9
  %880 = or i32 %879, %878
  %881 = or i32 %880, %869
  %882 = bitcast i32 %881 to float
  %883 = tail call i32 @llvm.fshl.i32(i32 %875, i32 %876, i32 23)
  %884 = tail call i32 @llvm.ctlz.i32(i32 %883, i1 false), !range !11
  %885 = fmul float %882, 0x3FF921FB40000000
  %886 = add nuw nsw i32 %884, %873
  %887 = shl nuw nsw i32 %886, 23
  %888 = sub nuw nsw i32 855638016, %887
  %889 = sub nsw i32 31, %884
  %890 = tail call i32 @llvm.fshr.i32(i32 %883, i32 %876, i32 %889)
  %891 = lshr i32 %890, 9
  %892 = or i32 %888, %891
  %893 = or i32 %892, %869
  %894 = bitcast i32 %893 to float
  %895 = fneg float %885
  %896 = tail call float @llvm.fma.f32(float %882, float 0x3FF921FB40000000, float %895)
  %897 = tail call float @llvm.fma.f32(float %882, float 0x3E74442D00000000, float %896)
  %898 = tail call float @llvm.fma.f32(float %894, float 0x3FF921FB40000000, float %897)
  %899 = fadd float %885, %898
  %900 = lshr i32 %860, 30
  %901 = add nuw nsw i32 %867, %900
  br label %902

902:                                              ; preds = %796, %789
  %903 = phi float [ %794, %789 ], [ %899, %796 ]
  %904 = phi i32 [ %795, %789 ], [ %901, %796 ]
  %905 = fmul float %903, %903
  %906 = tail call float @llvm.fmuladd.f32(float %905, float 0xBF29833040000000, float 0x3F81103880000000)
  %907 = tail call float @llvm.fmuladd.f32(float %905, float %906, float 0xBFC55553A0000000)
  %908 = fmul float %905, %907
  %909 = tail call float @llvm.fmuladd.f32(float %903, float %908, float %903)
  %910 = tail call float @llvm.fmuladd.f32(float %905, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %911 = tail call float @llvm.fmuladd.f32(float %905, float %910, float 0x3FA5557EE0000000)
  %912 = tail call float @llvm.fmuladd.f32(float %905, float %911, float 0xBFE0000080000000)
  %913 = tail call float @llvm.fmuladd.f32(float %905, float %912, float 1.000000e+00)
  %914 = fneg float %909
  %915 = and i32 %904, 1
  %916 = icmp eq i32 %915, 0
  %917 = select i1 %916, float %913, float %914
  %918 = bitcast float %917 to i32
  %919 = shl i32 %904, 30
  %920 = and i32 %919, -2147483648
  %921 = xor i32 %920, %918
  %922 = bitcast i32 %921 to float
  %923 = select i1 %503, float %922, float 0x7FF8000000000000
  br i1 %506, label %924, label %931

924:                                              ; preds = %902
  %925 = fmul float %505, 0x3FE45F3060000000
  %926 = tail call float @llvm.rint.f32(float %925)
  %927 = tail call float @llvm.fma.f32(float %926, float 0xBFF921FB40000000, float %505)
  %928 = tail call float @llvm.fma.f32(float %926, float 0xBE74442D00000000, float %927)
  %929 = tail call float @llvm.fma.f32(float %926, float 0xBCF8469880000000, float %928)
  %930 = fptosi float %926 to i32
  br label %1037

931:                                              ; preds = %902
  %932 = bitcast float %505 to i32
  %933 = lshr i32 %932, 23
  %934 = and i32 %932, 8388607
  %935 = or i32 %934, 8388608
  %936 = zext i32 %935 to i64
  %937 = mul nuw nsw i64 %936, 4266746795
  %938 = trunc i64 %937 to i32
  %939 = lshr i64 %937, 32
  %940 = mul nuw nsw i64 %936, 1011060801
  %941 = add nuw nsw i64 %939, %940
  %942 = trunc i64 %941 to i32
  %943 = lshr i64 %941, 32
  %944 = mul nuw nsw i64 %936, 3680671129
  %945 = add nuw nsw i64 %943, %944
  %946 = trunc i64 %945 to i32
  %947 = lshr i64 %945, 32
  %948 = mul nuw nsw i64 %936, 4113882560
  %949 = add nuw nsw i64 %947, %948
  %950 = trunc i64 %949 to i32
  %951 = lshr i64 %949, 32
  %952 = mul nuw nsw i64 %936, 4230436817
  %953 = add nuw nsw i64 %951, %952
  %954 = trunc i64 %953 to i32
  %955 = lshr i64 %953, 32
  %956 = mul nuw nsw i64 %936, 1313084713
  %957 = add nuw nsw i64 %955, %956
  %958 = trunc i64 %957 to i32
  %959 = lshr i64 %957, 32
  %960 = mul nuw nsw i64 %936, 2734261102
  %961 = add nuw nsw i64 %959, %960
  %962 = trunc i64 %961 to i32
  %963 = lshr i64 %961, 32
  %964 = trunc i64 %963 to i32
  %965 = add nsw i32 %933, -120
  %966 = icmp ugt i32 %965, 63
  %967 = select i1 %966, i32 %958, i32 %964
  %968 = select i1 %966, i32 %954, i32 %962
  %969 = select i1 %966, i32 %950, i32 %958
  %970 = select i1 %966, i32 %946, i32 %954
  %971 = select i1 %966, i32 %942, i32 %950
  %972 = select i1 %966, i32 %938, i32 %946
  %973 = select i1 %966, i32 -64, i32 0
  %974 = add nsw i32 %973, %965
  %975 = icmp ugt i32 %974, 31
  %976 = select i1 %975, i32 %968, i32 %967
  %977 = select i1 %975, i32 %969, i32 %968
  %978 = select i1 %975, i32 %970, i32 %969
  %979 = select i1 %975, i32 %971, i32 %970
  %980 = select i1 %975, i32 %972, i32 %971
  %981 = select i1 %975, i32 -32, i32 0
  %982 = add nsw i32 %981, %974
  %983 = icmp ugt i32 %982, 31
  %984 = select i1 %983, i32 %977, i32 %976
  %985 = select i1 %983, i32 %978, i32 %977
  %986 = select i1 %983, i32 %979, i32 %978
  %987 = select i1 %983, i32 %980, i32 %979
  %988 = select i1 %983, i32 -32, i32 0
  %989 = add nsw i32 %988, %982
  %990 = icmp eq i32 %989, 0
  %991 = sub nsw i32 32, %989
  %992 = tail call i32 @llvm.fshr.i32(i32 %984, i32 %985, i32 %991)
  %993 = tail call i32 @llvm.fshr.i32(i32 %985, i32 %986, i32 %991)
  %994 = tail call i32 @llvm.fshr.i32(i32 %986, i32 %987, i32 %991)
  %995 = select i1 %990, i32 %984, i32 %992
  %996 = select i1 %990, i32 %985, i32 %993
  %997 = select i1 %990, i32 %986, i32 %994
  %998 = lshr i32 %995, 29
  %999 = tail call i32 @llvm.fshl.i32(i32 %995, i32 %996, i32 2)
  %1000 = tail call i32 @llvm.fshl.i32(i32 %996, i32 %997, i32 2)
  %1001 = tail call i32 @llvm.fshl.i32(i32 %997, i32 %987, i32 2)
  %1002 = and i32 %998, 1
  %1003 = sub nsw i32 0, %1002
  %1004 = shl i32 %998, 31
  %1005 = xor i32 %999, %1003
  %1006 = xor i32 %1000, %1003
  %1007 = xor i32 %1001, %1003
  %1008 = tail call i32 @llvm.ctlz.i32(i32 %1005, i1 false), !range !11
  %1009 = sub nsw i32 31, %1008
  %1010 = tail call i32 @llvm.fshr.i32(i32 %1005, i32 %1006, i32 %1009)
  %1011 = tail call i32 @llvm.fshr.i32(i32 %1006, i32 %1007, i32 %1009)
  %1012 = shl nuw nsw i32 %1008, 23
  %1013 = sub nuw nsw i32 1056964608, %1012
  %1014 = lshr i32 %1010, 9
  %1015 = or i32 %1014, %1013
  %1016 = or i32 %1015, %1004
  %1017 = bitcast i32 %1016 to float
  %1018 = tail call i32 @llvm.fshl.i32(i32 %1010, i32 %1011, i32 23)
  %1019 = tail call i32 @llvm.ctlz.i32(i32 %1018, i1 false), !range !11
  %1020 = fmul float %1017, 0x3FF921FB40000000
  %1021 = add nuw nsw i32 %1019, %1008
  %1022 = shl nuw nsw i32 %1021, 23
  %1023 = sub nuw nsw i32 855638016, %1022
  %1024 = sub nsw i32 31, %1019
  %1025 = tail call i32 @llvm.fshr.i32(i32 %1018, i32 %1011, i32 %1024)
  %1026 = lshr i32 %1025, 9
  %1027 = or i32 %1023, %1026
  %1028 = or i32 %1027, %1004
  %1029 = bitcast i32 %1028 to float
  %1030 = fneg float %1020
  %1031 = tail call float @llvm.fma.f32(float %1017, float 0x3FF921FB40000000, float %1030)
  %1032 = tail call float @llvm.fma.f32(float %1017, float 0x3E74442D00000000, float %1031)
  %1033 = tail call float @llvm.fma.f32(float %1029, float 0x3FF921FB40000000, float %1032)
  %1034 = fadd float %1020, %1033
  %1035 = lshr i32 %995, 30
  %1036 = add nuw nsw i32 %1002, %1035
  br label %1037

1037:                                             ; preds = %931, %924
  %1038 = phi float [ %929, %924 ], [ %1034, %931 ]
  %1039 = phi i32 [ %930, %924 ], [ %1036, %931 ]
  %1040 = fmul float %1038, %1038
  %1041 = tail call float @llvm.fmuladd.f32(float %1040, float 0xBF29833040000000, float 0x3F81103880000000)
  %1042 = tail call float @llvm.fmuladd.f32(float %1040, float %1041, float 0xBFC55553A0000000)
  %1043 = fmul float %1040, %1042
  %1044 = tail call float @llvm.fmuladd.f32(float %1038, float %1043, float %1038)
  %1045 = tail call float @llvm.fmuladd.f32(float %1040, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1046 = tail call float @llvm.fmuladd.f32(float %1040, float %1045, float 0x3FA5557EE0000000)
  %1047 = tail call float @llvm.fmuladd.f32(float %1040, float %1046, float 0xBFE0000080000000)
  %1048 = tail call float @llvm.fmuladd.f32(float %1040, float %1047, float 1.000000e+00)
  %1049 = fneg float %1044
  %1050 = and i32 %1039, 1
  %1051 = icmp eq i32 %1050, 0
  %1052 = select i1 %1051, float %1048, float %1049
  %1053 = bitcast float %1052 to i32
  %1054 = shl i32 %1039, 30
  %1055 = and i32 %1054, -2147483648
  %1056 = xor i32 %1055, %1053
  %1057 = bitcast i32 %1056 to float
  %1058 = select i1 %645, float %1057, float 0x7FF8000000000000
  br i1 %648, label %1059, label %1066

1059:                                             ; preds = %1037
  %1060 = fmul float %647, 0x3FE45F3060000000
  %1061 = tail call float @llvm.rint.f32(float %1060)
  %1062 = tail call float @llvm.fma.f32(float %1061, float 0xBFF921FB40000000, float %647)
  %1063 = tail call float @llvm.fma.f32(float %1061, float 0xBE74442D00000000, float %1062)
  %1064 = tail call float @llvm.fma.f32(float %1061, float 0xBCF8469880000000, float %1063)
  %1065 = fptosi float %1061 to i32
  br label %1172

1066:                                             ; preds = %1037
  %1067 = bitcast float %647 to i32
  %1068 = lshr i32 %1067, 23
  %1069 = and i32 %1067, 8388607
  %1070 = or i32 %1069, 8388608
  %1071 = zext i32 %1070 to i64
  %1072 = mul nuw nsw i64 %1071, 4266746795
  %1073 = trunc i64 %1072 to i32
  %1074 = lshr i64 %1072, 32
  %1075 = mul nuw nsw i64 %1071, 1011060801
  %1076 = add nuw nsw i64 %1074, %1075
  %1077 = trunc i64 %1076 to i32
  %1078 = lshr i64 %1076, 32
  %1079 = mul nuw nsw i64 %1071, 3680671129
  %1080 = add nuw nsw i64 %1078, %1079
  %1081 = trunc i64 %1080 to i32
  %1082 = lshr i64 %1080, 32
  %1083 = mul nuw nsw i64 %1071, 4113882560
  %1084 = add nuw nsw i64 %1082, %1083
  %1085 = trunc i64 %1084 to i32
  %1086 = lshr i64 %1084, 32
  %1087 = mul nuw nsw i64 %1071, 4230436817
  %1088 = add nuw nsw i64 %1086, %1087
  %1089 = trunc i64 %1088 to i32
  %1090 = lshr i64 %1088, 32
  %1091 = mul nuw nsw i64 %1071, 1313084713
  %1092 = add nuw nsw i64 %1090, %1091
  %1093 = trunc i64 %1092 to i32
  %1094 = lshr i64 %1092, 32
  %1095 = mul nuw nsw i64 %1071, 2734261102
  %1096 = add nuw nsw i64 %1094, %1095
  %1097 = trunc i64 %1096 to i32
  %1098 = lshr i64 %1096, 32
  %1099 = trunc i64 %1098 to i32
  %1100 = add nsw i32 %1068, -120
  %1101 = icmp ugt i32 %1100, 63
  %1102 = select i1 %1101, i32 %1093, i32 %1099
  %1103 = select i1 %1101, i32 %1089, i32 %1097
  %1104 = select i1 %1101, i32 %1085, i32 %1093
  %1105 = select i1 %1101, i32 %1081, i32 %1089
  %1106 = select i1 %1101, i32 %1077, i32 %1085
  %1107 = select i1 %1101, i32 %1073, i32 %1081
  %1108 = select i1 %1101, i32 -64, i32 0
  %1109 = add nsw i32 %1108, %1100
  %1110 = icmp ugt i32 %1109, 31
  %1111 = select i1 %1110, i32 %1103, i32 %1102
  %1112 = select i1 %1110, i32 %1104, i32 %1103
  %1113 = select i1 %1110, i32 %1105, i32 %1104
  %1114 = select i1 %1110, i32 %1106, i32 %1105
  %1115 = select i1 %1110, i32 %1107, i32 %1106
  %1116 = select i1 %1110, i32 -32, i32 0
  %1117 = add nsw i32 %1116, %1109
  %1118 = icmp ugt i32 %1117, 31
  %1119 = select i1 %1118, i32 %1112, i32 %1111
  %1120 = select i1 %1118, i32 %1113, i32 %1112
  %1121 = select i1 %1118, i32 %1114, i32 %1113
  %1122 = select i1 %1118, i32 %1115, i32 %1114
  %1123 = select i1 %1118, i32 -32, i32 0
  %1124 = add nsw i32 %1123, %1117
  %1125 = icmp eq i32 %1124, 0
  %1126 = sub nsw i32 32, %1124
  %1127 = tail call i32 @llvm.fshr.i32(i32 %1119, i32 %1120, i32 %1126)
  %1128 = tail call i32 @llvm.fshr.i32(i32 %1120, i32 %1121, i32 %1126)
  %1129 = tail call i32 @llvm.fshr.i32(i32 %1121, i32 %1122, i32 %1126)
  %1130 = select i1 %1125, i32 %1119, i32 %1127
  %1131 = select i1 %1125, i32 %1120, i32 %1128
  %1132 = select i1 %1125, i32 %1121, i32 %1129
  %1133 = lshr i32 %1130, 29
  %1134 = tail call i32 @llvm.fshl.i32(i32 %1130, i32 %1131, i32 2)
  %1135 = tail call i32 @llvm.fshl.i32(i32 %1131, i32 %1132, i32 2)
  %1136 = tail call i32 @llvm.fshl.i32(i32 %1132, i32 %1122, i32 2)
  %1137 = and i32 %1133, 1
  %1138 = sub nsw i32 0, %1137
  %1139 = shl i32 %1133, 31
  %1140 = xor i32 %1134, %1138
  %1141 = xor i32 %1135, %1138
  %1142 = xor i32 %1136, %1138
  %1143 = tail call i32 @llvm.ctlz.i32(i32 %1140, i1 false), !range !11
  %1144 = sub nsw i32 31, %1143
  %1145 = tail call i32 @llvm.fshr.i32(i32 %1140, i32 %1141, i32 %1144)
  %1146 = tail call i32 @llvm.fshr.i32(i32 %1141, i32 %1142, i32 %1144)
  %1147 = shl nuw nsw i32 %1143, 23
  %1148 = sub nuw nsw i32 1056964608, %1147
  %1149 = lshr i32 %1145, 9
  %1150 = or i32 %1149, %1148
  %1151 = or i32 %1150, %1139
  %1152 = bitcast i32 %1151 to float
  %1153 = tail call i32 @llvm.fshl.i32(i32 %1145, i32 %1146, i32 23)
  %1154 = tail call i32 @llvm.ctlz.i32(i32 %1153, i1 false), !range !11
  %1155 = fmul float %1152, 0x3FF921FB40000000
  %1156 = add nuw nsw i32 %1154, %1143
  %1157 = shl nuw nsw i32 %1156, 23
  %1158 = sub nuw nsw i32 855638016, %1157
  %1159 = sub nsw i32 31, %1154
  %1160 = tail call i32 @llvm.fshr.i32(i32 %1153, i32 %1146, i32 %1159)
  %1161 = lshr i32 %1160, 9
  %1162 = or i32 %1158, %1161
  %1163 = or i32 %1162, %1139
  %1164 = bitcast i32 %1163 to float
  %1165 = fneg float %1155
  %1166 = tail call float @llvm.fma.f32(float %1152, float 0x3FF921FB40000000, float %1165)
  %1167 = tail call float @llvm.fma.f32(float %1152, float 0x3E74442D00000000, float %1166)
  %1168 = tail call float @llvm.fma.f32(float %1164, float 0x3FF921FB40000000, float %1167)
  %1169 = fadd float %1155, %1168
  %1170 = lshr i32 %1130, 30
  %1171 = add nuw nsw i32 %1137, %1170
  br label %1172

1172:                                             ; preds = %1059, %1066
  %1173 = phi float [ %1064, %1059 ], [ %1169, %1066 ]
  %1174 = phi i32 [ %1065, %1059 ], [ %1171, %1066 ]
  %1175 = fmul float %1173, %1173
  %1176 = tail call float @llvm.fmuladd.f32(float %1175, float 0xBF29833040000000, float 0x3F81103880000000)
  %1177 = tail call float @llvm.fmuladd.f32(float %1175, float %1176, float 0xBFC55553A0000000)
  %1178 = fmul float %1175, %1177
  %1179 = tail call float @llvm.fmuladd.f32(float %1173, float %1178, float %1173)
  %1180 = tail call float @llvm.fmuladd.f32(float %1175, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1181 = tail call float @llvm.fmuladd.f32(float %1175, float %1180, float 0x3FA5557EE0000000)
  %1182 = tail call float @llvm.fmuladd.f32(float %1175, float %1181, float 0xBFE0000080000000)
  %1183 = tail call float @llvm.fmuladd.f32(float %1175, float %1182, float 1.000000e+00)
  %1184 = fneg float %1179
  %1185 = and i32 %1174, 1
  %1186 = icmp eq i32 %1185, 0
  %1187 = select i1 %1186, float %1183, float %1184
  %1188 = bitcast float %1187 to i32
  %1189 = shl i32 %1174, 30
  %1190 = and i32 %1189, -2147483648
  %1191 = xor i32 %1190, %1188
  %1192 = bitcast i32 %1191 to float
  %1193 = select i1 %787, float %1192, float 0x7FF8000000000000
  %1194 = fmul contract float %923, %1193
  %1195 = fmul contract float %504, %1058
  %1196 = fmul contract float %788, %1195
  %1197 = fsub contract float %1194, %1196
  store float %1197, float addrspace(1)* %361, align 4, !tbaa !5
  %1198 = fneg contract float %923
  %1199 = fmul contract float %788, %1198
  %1200 = fmul contract float %1058, %1193
  %1201 = fmul contract float %504, %1200
  %1202 = fsub contract float %1199, %1201
  %1203 = getelementptr inbounds float, float addrspace(1)* %361, i64 1
  store float %1202, float addrspace(1)* %1203, align 4, !tbaa !5
  %1204 = fmul contract float %504, %646
  %1205 = getelementptr inbounds float, float addrspace(1)* %361, i64 2
  store float %1204, float addrspace(1)* %1205, align 4, !tbaa !5
  %1206 = fmul contract float %504, %1193
  %1207 = fmul contract float %923, %1058
  %1208 = fmul contract float %788, %1207
  %1209 = fadd contract float %1208, %1206
  %1210 = getelementptr inbounds float, float addrspace(1)* %361, i64 3
  store float %1209, float addrspace(1)* %1210, align 4, !tbaa !5
  %1211 = fmul contract float %1207, %1193
  %1212 = fmul contract float %504, %788
  %1213 = fsub contract float %1211, %1212
  %1214 = getelementptr inbounds float, float addrspace(1)* %361, i64 4
  store float %1213, float addrspace(1)* %1214, align 4, !tbaa !5
  %1215 = fmul contract float %646, %1198
  %1216 = getelementptr inbounds float, float addrspace(1)* %361, i64 5
  store float %1215, float addrspace(1)* %1216, align 4, !tbaa !5
  %1217 = fmul contract float %646, %788
  %1218 = getelementptr inbounds float, float addrspace(1)* %361, i64 6
  store float %1217, float addrspace(1)* %1218, align 4, !tbaa !5
  %1219 = fmul contract float %646, %1193
  br label %2082

1220:                                             ; preds = %303
  %1221 = tail call float @llvm.fabs.f32(float %9)
  %1222 = fcmp olt float %1221, 1.310720e+05
  br i1 %1222, label %1223, label %1231

1223:                                             ; preds = %1220
  %1224 = fmul float %1221, 0x3FE45F3060000000
  %1225 = tail call float @llvm.rint.f32(float %1224)
  %1226 = tail call float @llvm.fma.f32(float %1225, float 0xBFF921FB40000000, float %1221)
  %1227 = tail call float @llvm.fma.f32(float %1225, float 0xBE74442D00000000, float %1226)
  %1228 = tail call float @llvm.fma.f32(float %1225, float 0xBCF8469880000000, float %1227)
  %1229 = fptosi float %1225 to i32
  %1230 = bitcast float %1221 to i32
  br label %1337

1231:                                             ; preds = %1220
  %1232 = bitcast float %1221 to i32
  %1233 = lshr i32 %1232, 23
  %1234 = and i32 %1232, 8388607
  %1235 = or i32 %1234, 8388608
  %1236 = zext i32 %1235 to i64
  %1237 = mul nuw nsw i64 %1236, 4266746795
  %1238 = trunc i64 %1237 to i32
  %1239 = lshr i64 %1237, 32
  %1240 = mul nuw nsw i64 %1236, 1011060801
  %1241 = add nuw nsw i64 %1239, %1240
  %1242 = trunc i64 %1241 to i32
  %1243 = lshr i64 %1241, 32
  %1244 = mul nuw nsw i64 %1236, 3680671129
  %1245 = add nuw nsw i64 %1243, %1244
  %1246 = trunc i64 %1245 to i32
  %1247 = lshr i64 %1245, 32
  %1248 = mul nuw nsw i64 %1236, 4113882560
  %1249 = add nuw nsw i64 %1247, %1248
  %1250 = trunc i64 %1249 to i32
  %1251 = lshr i64 %1249, 32
  %1252 = mul nuw nsw i64 %1236, 4230436817
  %1253 = add nuw nsw i64 %1251, %1252
  %1254 = trunc i64 %1253 to i32
  %1255 = lshr i64 %1253, 32
  %1256 = mul nuw nsw i64 %1236, 1313084713
  %1257 = add nuw nsw i64 %1255, %1256
  %1258 = trunc i64 %1257 to i32
  %1259 = lshr i64 %1257, 32
  %1260 = mul nuw nsw i64 %1236, 2734261102
  %1261 = add nuw nsw i64 %1259, %1260
  %1262 = trunc i64 %1261 to i32
  %1263 = lshr i64 %1261, 32
  %1264 = trunc i64 %1263 to i32
  %1265 = add nsw i32 %1233, -120
  %1266 = icmp ugt i32 %1265, 63
  %1267 = select i1 %1266, i32 %1258, i32 %1264
  %1268 = select i1 %1266, i32 %1254, i32 %1262
  %1269 = select i1 %1266, i32 %1250, i32 %1258
  %1270 = select i1 %1266, i32 %1246, i32 %1254
  %1271 = select i1 %1266, i32 %1242, i32 %1250
  %1272 = select i1 %1266, i32 %1238, i32 %1246
  %1273 = select i1 %1266, i32 -64, i32 0
  %1274 = add nsw i32 %1273, %1265
  %1275 = icmp ugt i32 %1274, 31
  %1276 = select i1 %1275, i32 %1268, i32 %1267
  %1277 = select i1 %1275, i32 %1269, i32 %1268
  %1278 = select i1 %1275, i32 %1270, i32 %1269
  %1279 = select i1 %1275, i32 %1271, i32 %1270
  %1280 = select i1 %1275, i32 %1272, i32 %1271
  %1281 = select i1 %1275, i32 -32, i32 0
  %1282 = add nsw i32 %1281, %1274
  %1283 = icmp ugt i32 %1282, 31
  %1284 = select i1 %1283, i32 %1277, i32 %1276
  %1285 = select i1 %1283, i32 %1278, i32 %1277
  %1286 = select i1 %1283, i32 %1279, i32 %1278
  %1287 = select i1 %1283, i32 %1280, i32 %1279
  %1288 = select i1 %1283, i32 -32, i32 0
  %1289 = add nsw i32 %1288, %1282
  %1290 = icmp eq i32 %1289, 0
  %1291 = sub nsw i32 32, %1289
  %1292 = tail call i32 @llvm.fshr.i32(i32 %1284, i32 %1285, i32 %1291)
  %1293 = tail call i32 @llvm.fshr.i32(i32 %1285, i32 %1286, i32 %1291)
  %1294 = tail call i32 @llvm.fshr.i32(i32 %1286, i32 %1287, i32 %1291)
  %1295 = select i1 %1290, i32 %1284, i32 %1292
  %1296 = select i1 %1290, i32 %1285, i32 %1293
  %1297 = select i1 %1290, i32 %1286, i32 %1294
  %1298 = lshr i32 %1295, 29
  %1299 = tail call i32 @llvm.fshl.i32(i32 %1295, i32 %1296, i32 2)
  %1300 = tail call i32 @llvm.fshl.i32(i32 %1296, i32 %1297, i32 2)
  %1301 = tail call i32 @llvm.fshl.i32(i32 %1297, i32 %1287, i32 2)
  %1302 = and i32 %1298, 1
  %1303 = sub nsw i32 0, %1302
  %1304 = shl i32 %1298, 31
  %1305 = xor i32 %1299, %1303
  %1306 = xor i32 %1300, %1303
  %1307 = xor i32 %1301, %1303
  %1308 = tail call i32 @llvm.ctlz.i32(i32 %1305, i1 false), !range !11
  %1309 = sub nsw i32 31, %1308
  %1310 = tail call i32 @llvm.fshr.i32(i32 %1305, i32 %1306, i32 %1309)
  %1311 = tail call i32 @llvm.fshr.i32(i32 %1306, i32 %1307, i32 %1309)
  %1312 = shl nuw nsw i32 %1308, 23
  %1313 = sub nuw nsw i32 1056964608, %1312
  %1314 = lshr i32 %1310, 9
  %1315 = or i32 %1314, %1313
  %1316 = or i32 %1315, %1304
  %1317 = bitcast i32 %1316 to float
  %1318 = tail call i32 @llvm.fshl.i32(i32 %1310, i32 %1311, i32 23)
  %1319 = tail call i32 @llvm.ctlz.i32(i32 %1318, i1 false), !range !11
  %1320 = fmul float %1317, 0x3FF921FB40000000
  %1321 = add nuw nsw i32 %1319, %1308
  %1322 = shl nuw nsw i32 %1321, 23
  %1323 = sub nuw nsw i32 855638016, %1322
  %1324 = sub nsw i32 31, %1319
  %1325 = tail call i32 @llvm.fshr.i32(i32 %1318, i32 %1311, i32 %1324)
  %1326 = lshr i32 %1325, 9
  %1327 = or i32 %1323, %1326
  %1328 = or i32 %1327, %1304
  %1329 = bitcast i32 %1328 to float
  %1330 = fneg float %1320
  %1331 = tail call float @llvm.fma.f32(float %1317, float 0x3FF921FB40000000, float %1330)
  %1332 = tail call float @llvm.fma.f32(float %1317, float 0x3E74442D00000000, float %1331)
  %1333 = tail call float @llvm.fma.f32(float %1329, float 0x3FF921FB40000000, float %1332)
  %1334 = fadd float %1320, %1333
  %1335 = lshr i32 %1295, 30
  %1336 = add nuw nsw i32 %1302, %1335
  br label %1337

1337:                                             ; preds = %1231, %1223
  %1338 = phi i32 [ %1230, %1223 ], [ %1232, %1231 ]
  %1339 = phi float [ %1228, %1223 ], [ %1334, %1231 ]
  %1340 = phi i32 [ %1229, %1223 ], [ %1336, %1231 ]
  %1341 = fmul float %1339, %1339
  %1342 = tail call float @llvm.fmuladd.f32(float %1341, float 0xBF29833040000000, float 0x3F81103880000000)
  %1343 = tail call float @llvm.fmuladd.f32(float %1341, float %1342, float 0xBFC55553A0000000)
  %1344 = fmul float %1341, %1343
  %1345 = tail call float @llvm.fmuladd.f32(float %1339, float %1344, float %1339)
  %1346 = tail call float @llvm.fmuladd.f32(float %1341, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1347 = tail call float @llvm.fmuladd.f32(float %1341, float %1346, float 0x3FA5557EE0000000)
  %1348 = tail call float @llvm.fmuladd.f32(float %1341, float %1347, float 0xBFE0000080000000)
  %1349 = tail call float @llvm.fmuladd.f32(float %1341, float %1348, float 1.000000e+00)
  %1350 = and i32 %1340, 1
  %1351 = icmp eq i32 %1350, 0
  %1352 = select i1 %1351, float %1345, float %1349
  %1353 = bitcast float %1352 to i32
  %1354 = shl i32 %1340, 30
  %1355 = and i32 %1354, -2147483648
  %1356 = bitcast float %9 to i32
  %1357 = xor i32 %1338, %1356
  %1358 = xor i32 %1357, %1355
  %1359 = xor i32 %1358, %1353
  %1360 = bitcast i32 %1359 to float
  %1361 = tail call i1 @llvm.amdgcn.class.f32(float %1221, i32 504)
  %1362 = select i1 %1361, float %1360, float 0x7FF8000000000000
  %1363 = getelementptr inbounds float, float addrspace(1)* %8, i64 1
  %1364 = load float, float addrspace(1)* %1363, align 4, !tbaa !5, !amdgpu.noclobber !9
  %1365 = tail call float @llvm.fabs.f32(float %1364)
  %1366 = fcmp olt float %1365, 1.310720e+05
  br i1 %1366, label %1367, label %1375

1367:                                             ; preds = %1337
  %1368 = fmul float %1365, 0x3FE45F3060000000
  %1369 = tail call float @llvm.rint.f32(float %1368)
  %1370 = tail call float @llvm.fma.f32(float %1369, float 0xBFF921FB40000000, float %1365)
  %1371 = tail call float @llvm.fma.f32(float %1369, float 0xBE74442D00000000, float %1370)
  %1372 = tail call float @llvm.fma.f32(float %1369, float 0xBCF8469880000000, float %1371)
  %1373 = fptosi float %1369 to i32
  %1374 = bitcast float %1365 to i32
  br label %1481

1375:                                             ; preds = %1337
  %1376 = bitcast float %1365 to i32
  %1377 = lshr i32 %1376, 23
  %1378 = and i32 %1376, 8388607
  %1379 = or i32 %1378, 8388608
  %1380 = zext i32 %1379 to i64
  %1381 = mul nuw nsw i64 %1380, 4266746795
  %1382 = trunc i64 %1381 to i32
  %1383 = lshr i64 %1381, 32
  %1384 = mul nuw nsw i64 %1380, 1011060801
  %1385 = add nuw nsw i64 %1383, %1384
  %1386 = trunc i64 %1385 to i32
  %1387 = lshr i64 %1385, 32
  %1388 = mul nuw nsw i64 %1380, 3680671129
  %1389 = add nuw nsw i64 %1387, %1388
  %1390 = trunc i64 %1389 to i32
  %1391 = lshr i64 %1389, 32
  %1392 = mul nuw nsw i64 %1380, 4113882560
  %1393 = add nuw nsw i64 %1391, %1392
  %1394 = trunc i64 %1393 to i32
  %1395 = lshr i64 %1393, 32
  %1396 = mul nuw nsw i64 %1380, 4230436817
  %1397 = add nuw nsw i64 %1395, %1396
  %1398 = trunc i64 %1397 to i32
  %1399 = lshr i64 %1397, 32
  %1400 = mul nuw nsw i64 %1380, 1313084713
  %1401 = add nuw nsw i64 %1399, %1400
  %1402 = trunc i64 %1401 to i32
  %1403 = lshr i64 %1401, 32
  %1404 = mul nuw nsw i64 %1380, 2734261102
  %1405 = add nuw nsw i64 %1403, %1404
  %1406 = trunc i64 %1405 to i32
  %1407 = lshr i64 %1405, 32
  %1408 = trunc i64 %1407 to i32
  %1409 = add nsw i32 %1377, -120
  %1410 = icmp ugt i32 %1409, 63
  %1411 = select i1 %1410, i32 %1402, i32 %1408
  %1412 = select i1 %1410, i32 %1398, i32 %1406
  %1413 = select i1 %1410, i32 %1394, i32 %1402
  %1414 = select i1 %1410, i32 %1390, i32 %1398
  %1415 = select i1 %1410, i32 %1386, i32 %1394
  %1416 = select i1 %1410, i32 %1382, i32 %1390
  %1417 = select i1 %1410, i32 -64, i32 0
  %1418 = add nsw i32 %1417, %1409
  %1419 = icmp ugt i32 %1418, 31
  %1420 = select i1 %1419, i32 %1412, i32 %1411
  %1421 = select i1 %1419, i32 %1413, i32 %1412
  %1422 = select i1 %1419, i32 %1414, i32 %1413
  %1423 = select i1 %1419, i32 %1415, i32 %1414
  %1424 = select i1 %1419, i32 %1416, i32 %1415
  %1425 = select i1 %1419, i32 -32, i32 0
  %1426 = add nsw i32 %1425, %1418
  %1427 = icmp ugt i32 %1426, 31
  %1428 = select i1 %1427, i32 %1421, i32 %1420
  %1429 = select i1 %1427, i32 %1422, i32 %1421
  %1430 = select i1 %1427, i32 %1423, i32 %1422
  %1431 = select i1 %1427, i32 %1424, i32 %1423
  %1432 = select i1 %1427, i32 -32, i32 0
  %1433 = add nsw i32 %1432, %1426
  %1434 = icmp eq i32 %1433, 0
  %1435 = sub nsw i32 32, %1433
  %1436 = tail call i32 @llvm.fshr.i32(i32 %1428, i32 %1429, i32 %1435)
  %1437 = tail call i32 @llvm.fshr.i32(i32 %1429, i32 %1430, i32 %1435)
  %1438 = tail call i32 @llvm.fshr.i32(i32 %1430, i32 %1431, i32 %1435)
  %1439 = select i1 %1434, i32 %1428, i32 %1436
  %1440 = select i1 %1434, i32 %1429, i32 %1437
  %1441 = select i1 %1434, i32 %1430, i32 %1438
  %1442 = lshr i32 %1439, 29
  %1443 = tail call i32 @llvm.fshl.i32(i32 %1439, i32 %1440, i32 2)
  %1444 = tail call i32 @llvm.fshl.i32(i32 %1440, i32 %1441, i32 2)
  %1445 = tail call i32 @llvm.fshl.i32(i32 %1441, i32 %1431, i32 2)
  %1446 = and i32 %1442, 1
  %1447 = sub nsw i32 0, %1446
  %1448 = shl i32 %1442, 31
  %1449 = xor i32 %1443, %1447
  %1450 = xor i32 %1444, %1447
  %1451 = xor i32 %1445, %1447
  %1452 = tail call i32 @llvm.ctlz.i32(i32 %1449, i1 false), !range !11
  %1453 = sub nsw i32 31, %1452
  %1454 = tail call i32 @llvm.fshr.i32(i32 %1449, i32 %1450, i32 %1453)
  %1455 = tail call i32 @llvm.fshr.i32(i32 %1450, i32 %1451, i32 %1453)
  %1456 = shl nuw nsw i32 %1452, 23
  %1457 = sub nuw nsw i32 1056964608, %1456
  %1458 = lshr i32 %1454, 9
  %1459 = or i32 %1458, %1457
  %1460 = or i32 %1459, %1448
  %1461 = bitcast i32 %1460 to float
  %1462 = tail call i32 @llvm.fshl.i32(i32 %1454, i32 %1455, i32 23)
  %1463 = tail call i32 @llvm.ctlz.i32(i32 %1462, i1 false), !range !11
  %1464 = fmul float %1461, 0x3FF921FB40000000
  %1465 = add nuw nsw i32 %1463, %1452
  %1466 = shl nuw nsw i32 %1465, 23
  %1467 = sub nuw nsw i32 855638016, %1466
  %1468 = sub nsw i32 31, %1463
  %1469 = tail call i32 @llvm.fshr.i32(i32 %1462, i32 %1455, i32 %1468)
  %1470 = lshr i32 %1469, 9
  %1471 = or i32 %1467, %1470
  %1472 = or i32 %1471, %1448
  %1473 = bitcast i32 %1472 to float
  %1474 = fneg float %1464
  %1475 = tail call float @llvm.fma.f32(float %1461, float 0x3FF921FB40000000, float %1474)
  %1476 = tail call float @llvm.fma.f32(float %1461, float 0x3E74442D00000000, float %1475)
  %1477 = tail call float @llvm.fma.f32(float %1473, float 0x3FF921FB40000000, float %1476)
  %1478 = fadd float %1464, %1477
  %1479 = lshr i32 %1439, 30
  %1480 = add nuw nsw i32 %1446, %1479
  br label %1481

1481:                                             ; preds = %1375, %1367
  %1482 = phi i32 [ %1374, %1367 ], [ %1376, %1375 ]
  %1483 = phi float [ %1372, %1367 ], [ %1478, %1375 ]
  %1484 = phi i32 [ %1373, %1367 ], [ %1480, %1375 ]
  %1485 = fmul float %1483, %1483
  %1486 = tail call float @llvm.fmuladd.f32(float %1485, float 0xBF29833040000000, float 0x3F81103880000000)
  %1487 = tail call float @llvm.fmuladd.f32(float %1485, float %1486, float 0xBFC55553A0000000)
  %1488 = fmul float %1485, %1487
  %1489 = tail call float @llvm.fmuladd.f32(float %1483, float %1488, float %1483)
  %1490 = tail call float @llvm.fmuladd.f32(float %1485, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1491 = tail call float @llvm.fmuladd.f32(float %1485, float %1490, float 0x3FA5557EE0000000)
  %1492 = tail call float @llvm.fmuladd.f32(float %1485, float %1491, float 0xBFE0000080000000)
  %1493 = tail call float @llvm.fmuladd.f32(float %1485, float %1492, float 1.000000e+00)
  %1494 = and i32 %1484, 1
  %1495 = icmp eq i32 %1494, 0
  %1496 = select i1 %1495, float %1489, float %1493
  %1497 = bitcast float %1496 to i32
  %1498 = shl i32 %1484, 30
  %1499 = and i32 %1498, -2147483648
  %1500 = bitcast float %1364 to i32
  %1501 = xor i32 %1482, %1500
  %1502 = xor i32 %1501, %1499
  %1503 = xor i32 %1502, %1497
  %1504 = bitcast i32 %1503 to float
  %1505 = tail call i1 @llvm.amdgcn.class.f32(float %1365, i32 504)
  %1506 = select i1 %1505, float %1504, float 0x7FF8000000000000
  %1507 = getelementptr inbounds float, float addrspace(1)* %8, i64 2
  %1508 = load float, float addrspace(1)* %1507, align 4, !tbaa !5, !amdgpu.noclobber !9
  %1509 = tail call float @llvm.fabs.f32(float %1508)
  %1510 = fcmp olt float %1509, 1.310720e+05
  br i1 %1510, label %1511, label %1519

1511:                                             ; preds = %1481
  %1512 = fmul float %1509, 0x3FE45F3060000000
  %1513 = tail call float @llvm.rint.f32(float %1512)
  %1514 = tail call float @llvm.fma.f32(float %1513, float 0xBFF921FB40000000, float %1509)
  %1515 = tail call float @llvm.fma.f32(float %1513, float 0xBE74442D00000000, float %1514)
  %1516 = tail call float @llvm.fma.f32(float %1513, float 0xBCF8469880000000, float %1515)
  %1517 = fptosi float %1513 to i32
  %1518 = bitcast float %1509 to i32
  br label %1625

1519:                                             ; preds = %1481
  %1520 = bitcast float %1509 to i32
  %1521 = lshr i32 %1520, 23
  %1522 = and i32 %1520, 8388607
  %1523 = or i32 %1522, 8388608
  %1524 = zext i32 %1523 to i64
  %1525 = mul nuw nsw i64 %1524, 4266746795
  %1526 = trunc i64 %1525 to i32
  %1527 = lshr i64 %1525, 32
  %1528 = mul nuw nsw i64 %1524, 1011060801
  %1529 = add nuw nsw i64 %1527, %1528
  %1530 = trunc i64 %1529 to i32
  %1531 = lshr i64 %1529, 32
  %1532 = mul nuw nsw i64 %1524, 3680671129
  %1533 = add nuw nsw i64 %1531, %1532
  %1534 = trunc i64 %1533 to i32
  %1535 = lshr i64 %1533, 32
  %1536 = mul nuw nsw i64 %1524, 4113882560
  %1537 = add nuw nsw i64 %1535, %1536
  %1538 = trunc i64 %1537 to i32
  %1539 = lshr i64 %1537, 32
  %1540 = mul nuw nsw i64 %1524, 4230436817
  %1541 = add nuw nsw i64 %1539, %1540
  %1542 = trunc i64 %1541 to i32
  %1543 = lshr i64 %1541, 32
  %1544 = mul nuw nsw i64 %1524, 1313084713
  %1545 = add nuw nsw i64 %1543, %1544
  %1546 = trunc i64 %1545 to i32
  %1547 = lshr i64 %1545, 32
  %1548 = mul nuw nsw i64 %1524, 2734261102
  %1549 = add nuw nsw i64 %1547, %1548
  %1550 = trunc i64 %1549 to i32
  %1551 = lshr i64 %1549, 32
  %1552 = trunc i64 %1551 to i32
  %1553 = add nsw i32 %1521, -120
  %1554 = icmp ugt i32 %1553, 63
  %1555 = select i1 %1554, i32 %1546, i32 %1552
  %1556 = select i1 %1554, i32 %1542, i32 %1550
  %1557 = select i1 %1554, i32 %1538, i32 %1546
  %1558 = select i1 %1554, i32 %1534, i32 %1542
  %1559 = select i1 %1554, i32 %1530, i32 %1538
  %1560 = select i1 %1554, i32 %1526, i32 %1534
  %1561 = select i1 %1554, i32 -64, i32 0
  %1562 = add nsw i32 %1561, %1553
  %1563 = icmp ugt i32 %1562, 31
  %1564 = select i1 %1563, i32 %1556, i32 %1555
  %1565 = select i1 %1563, i32 %1557, i32 %1556
  %1566 = select i1 %1563, i32 %1558, i32 %1557
  %1567 = select i1 %1563, i32 %1559, i32 %1558
  %1568 = select i1 %1563, i32 %1560, i32 %1559
  %1569 = select i1 %1563, i32 -32, i32 0
  %1570 = add nsw i32 %1569, %1562
  %1571 = icmp ugt i32 %1570, 31
  %1572 = select i1 %1571, i32 %1565, i32 %1564
  %1573 = select i1 %1571, i32 %1566, i32 %1565
  %1574 = select i1 %1571, i32 %1567, i32 %1566
  %1575 = select i1 %1571, i32 %1568, i32 %1567
  %1576 = select i1 %1571, i32 -32, i32 0
  %1577 = add nsw i32 %1576, %1570
  %1578 = icmp eq i32 %1577, 0
  %1579 = sub nsw i32 32, %1577
  %1580 = tail call i32 @llvm.fshr.i32(i32 %1572, i32 %1573, i32 %1579)
  %1581 = tail call i32 @llvm.fshr.i32(i32 %1573, i32 %1574, i32 %1579)
  %1582 = tail call i32 @llvm.fshr.i32(i32 %1574, i32 %1575, i32 %1579)
  %1583 = select i1 %1578, i32 %1572, i32 %1580
  %1584 = select i1 %1578, i32 %1573, i32 %1581
  %1585 = select i1 %1578, i32 %1574, i32 %1582
  %1586 = lshr i32 %1583, 29
  %1587 = tail call i32 @llvm.fshl.i32(i32 %1583, i32 %1584, i32 2)
  %1588 = tail call i32 @llvm.fshl.i32(i32 %1584, i32 %1585, i32 2)
  %1589 = tail call i32 @llvm.fshl.i32(i32 %1585, i32 %1575, i32 2)
  %1590 = and i32 %1586, 1
  %1591 = sub nsw i32 0, %1590
  %1592 = shl i32 %1586, 31
  %1593 = xor i32 %1587, %1591
  %1594 = xor i32 %1588, %1591
  %1595 = xor i32 %1589, %1591
  %1596 = tail call i32 @llvm.ctlz.i32(i32 %1593, i1 false), !range !11
  %1597 = sub nsw i32 31, %1596
  %1598 = tail call i32 @llvm.fshr.i32(i32 %1593, i32 %1594, i32 %1597)
  %1599 = tail call i32 @llvm.fshr.i32(i32 %1594, i32 %1595, i32 %1597)
  %1600 = shl nuw nsw i32 %1596, 23
  %1601 = sub nuw nsw i32 1056964608, %1600
  %1602 = lshr i32 %1598, 9
  %1603 = or i32 %1602, %1601
  %1604 = or i32 %1603, %1592
  %1605 = bitcast i32 %1604 to float
  %1606 = tail call i32 @llvm.fshl.i32(i32 %1598, i32 %1599, i32 23)
  %1607 = tail call i32 @llvm.ctlz.i32(i32 %1606, i1 false), !range !11
  %1608 = fmul float %1605, 0x3FF921FB40000000
  %1609 = add nuw nsw i32 %1607, %1596
  %1610 = shl nuw nsw i32 %1609, 23
  %1611 = sub nuw nsw i32 855638016, %1610
  %1612 = sub nsw i32 31, %1607
  %1613 = tail call i32 @llvm.fshr.i32(i32 %1606, i32 %1599, i32 %1612)
  %1614 = lshr i32 %1613, 9
  %1615 = or i32 %1611, %1614
  %1616 = or i32 %1615, %1592
  %1617 = bitcast i32 %1616 to float
  %1618 = fneg float %1608
  %1619 = tail call float @llvm.fma.f32(float %1605, float 0x3FF921FB40000000, float %1618)
  %1620 = tail call float @llvm.fma.f32(float %1605, float 0x3E74442D00000000, float %1619)
  %1621 = tail call float @llvm.fma.f32(float %1617, float 0x3FF921FB40000000, float %1620)
  %1622 = fadd float %1608, %1621
  %1623 = lshr i32 %1583, 30
  %1624 = add nuw nsw i32 %1590, %1623
  br label %1625

1625:                                             ; preds = %1519, %1511
  %1626 = phi i32 [ %1518, %1511 ], [ %1520, %1519 ]
  %1627 = phi float [ %1516, %1511 ], [ %1622, %1519 ]
  %1628 = phi i32 [ %1517, %1511 ], [ %1624, %1519 ]
  %1629 = fmul float %1627, %1627
  %1630 = tail call float @llvm.fmuladd.f32(float %1629, float 0xBF29833040000000, float 0x3F81103880000000)
  %1631 = tail call float @llvm.fmuladd.f32(float %1629, float %1630, float 0xBFC55553A0000000)
  %1632 = fmul float %1629, %1631
  %1633 = tail call float @llvm.fmuladd.f32(float %1627, float %1632, float %1627)
  %1634 = tail call float @llvm.fmuladd.f32(float %1629, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1635 = tail call float @llvm.fmuladd.f32(float %1629, float %1634, float 0x3FA5557EE0000000)
  %1636 = tail call float @llvm.fmuladd.f32(float %1629, float %1635, float 0xBFE0000080000000)
  %1637 = tail call float @llvm.fmuladd.f32(float %1629, float %1636, float 1.000000e+00)
  %1638 = and i32 %1628, 1
  %1639 = icmp eq i32 %1638, 0
  %1640 = select i1 %1639, float %1633, float %1637
  %1641 = bitcast float %1640 to i32
  %1642 = shl i32 %1628, 30
  %1643 = and i32 %1642, -2147483648
  %1644 = bitcast float %1508 to i32
  %1645 = xor i32 %1626, %1644
  %1646 = xor i32 %1645, %1643
  %1647 = xor i32 %1646, %1641
  %1648 = bitcast i32 %1647 to float
  %1649 = tail call i1 @llvm.amdgcn.class.f32(float %1509, i32 504)
  %1650 = select i1 %1649, float %1648, float 0x7FF8000000000000
  br i1 %1222, label %1651, label %1658

1651:                                             ; preds = %1625
  %1652 = fmul float %1221, 0x3FE45F3060000000
  %1653 = tail call float @llvm.rint.f32(float %1652)
  %1654 = tail call float @llvm.fma.f32(float %1653, float 0xBFF921FB40000000, float %1221)
  %1655 = tail call float @llvm.fma.f32(float %1653, float 0xBE74442D00000000, float %1654)
  %1656 = tail call float @llvm.fma.f32(float %1653, float 0xBCF8469880000000, float %1655)
  %1657 = fptosi float %1653 to i32
  br label %1764

1658:                                             ; preds = %1625
  %1659 = bitcast float %1221 to i32
  %1660 = lshr i32 %1659, 23
  %1661 = and i32 %1659, 8388607
  %1662 = or i32 %1661, 8388608
  %1663 = zext i32 %1662 to i64
  %1664 = mul nuw nsw i64 %1663, 4266746795
  %1665 = trunc i64 %1664 to i32
  %1666 = lshr i64 %1664, 32
  %1667 = mul nuw nsw i64 %1663, 1011060801
  %1668 = add nuw nsw i64 %1666, %1667
  %1669 = trunc i64 %1668 to i32
  %1670 = lshr i64 %1668, 32
  %1671 = mul nuw nsw i64 %1663, 3680671129
  %1672 = add nuw nsw i64 %1670, %1671
  %1673 = trunc i64 %1672 to i32
  %1674 = lshr i64 %1672, 32
  %1675 = mul nuw nsw i64 %1663, 4113882560
  %1676 = add nuw nsw i64 %1674, %1675
  %1677 = trunc i64 %1676 to i32
  %1678 = lshr i64 %1676, 32
  %1679 = mul nuw nsw i64 %1663, 4230436817
  %1680 = add nuw nsw i64 %1678, %1679
  %1681 = trunc i64 %1680 to i32
  %1682 = lshr i64 %1680, 32
  %1683 = mul nuw nsw i64 %1663, 1313084713
  %1684 = add nuw nsw i64 %1682, %1683
  %1685 = trunc i64 %1684 to i32
  %1686 = lshr i64 %1684, 32
  %1687 = mul nuw nsw i64 %1663, 2734261102
  %1688 = add nuw nsw i64 %1686, %1687
  %1689 = trunc i64 %1688 to i32
  %1690 = lshr i64 %1688, 32
  %1691 = trunc i64 %1690 to i32
  %1692 = add nsw i32 %1660, -120
  %1693 = icmp ugt i32 %1692, 63
  %1694 = select i1 %1693, i32 %1685, i32 %1691
  %1695 = select i1 %1693, i32 %1681, i32 %1689
  %1696 = select i1 %1693, i32 %1677, i32 %1685
  %1697 = select i1 %1693, i32 %1673, i32 %1681
  %1698 = select i1 %1693, i32 %1669, i32 %1677
  %1699 = select i1 %1693, i32 %1665, i32 %1673
  %1700 = select i1 %1693, i32 -64, i32 0
  %1701 = add nsw i32 %1700, %1692
  %1702 = icmp ugt i32 %1701, 31
  %1703 = select i1 %1702, i32 %1695, i32 %1694
  %1704 = select i1 %1702, i32 %1696, i32 %1695
  %1705 = select i1 %1702, i32 %1697, i32 %1696
  %1706 = select i1 %1702, i32 %1698, i32 %1697
  %1707 = select i1 %1702, i32 %1699, i32 %1698
  %1708 = select i1 %1702, i32 -32, i32 0
  %1709 = add nsw i32 %1708, %1701
  %1710 = icmp ugt i32 %1709, 31
  %1711 = select i1 %1710, i32 %1704, i32 %1703
  %1712 = select i1 %1710, i32 %1705, i32 %1704
  %1713 = select i1 %1710, i32 %1706, i32 %1705
  %1714 = select i1 %1710, i32 %1707, i32 %1706
  %1715 = select i1 %1710, i32 -32, i32 0
  %1716 = add nsw i32 %1715, %1709
  %1717 = icmp eq i32 %1716, 0
  %1718 = sub nsw i32 32, %1716
  %1719 = tail call i32 @llvm.fshr.i32(i32 %1711, i32 %1712, i32 %1718)
  %1720 = tail call i32 @llvm.fshr.i32(i32 %1712, i32 %1713, i32 %1718)
  %1721 = tail call i32 @llvm.fshr.i32(i32 %1713, i32 %1714, i32 %1718)
  %1722 = select i1 %1717, i32 %1711, i32 %1719
  %1723 = select i1 %1717, i32 %1712, i32 %1720
  %1724 = select i1 %1717, i32 %1713, i32 %1721
  %1725 = lshr i32 %1722, 29
  %1726 = tail call i32 @llvm.fshl.i32(i32 %1722, i32 %1723, i32 2)
  %1727 = tail call i32 @llvm.fshl.i32(i32 %1723, i32 %1724, i32 2)
  %1728 = tail call i32 @llvm.fshl.i32(i32 %1724, i32 %1714, i32 2)
  %1729 = and i32 %1725, 1
  %1730 = sub nsw i32 0, %1729
  %1731 = shl i32 %1725, 31
  %1732 = xor i32 %1726, %1730
  %1733 = xor i32 %1727, %1730
  %1734 = xor i32 %1728, %1730
  %1735 = tail call i32 @llvm.ctlz.i32(i32 %1732, i1 false), !range !11
  %1736 = sub nsw i32 31, %1735
  %1737 = tail call i32 @llvm.fshr.i32(i32 %1732, i32 %1733, i32 %1736)
  %1738 = tail call i32 @llvm.fshr.i32(i32 %1733, i32 %1734, i32 %1736)
  %1739 = shl nuw nsw i32 %1735, 23
  %1740 = sub nuw nsw i32 1056964608, %1739
  %1741 = lshr i32 %1737, 9
  %1742 = or i32 %1741, %1740
  %1743 = or i32 %1742, %1731
  %1744 = bitcast i32 %1743 to float
  %1745 = tail call i32 @llvm.fshl.i32(i32 %1737, i32 %1738, i32 23)
  %1746 = tail call i32 @llvm.ctlz.i32(i32 %1745, i1 false), !range !11
  %1747 = fmul float %1744, 0x3FF921FB40000000
  %1748 = add nuw nsw i32 %1746, %1735
  %1749 = shl nuw nsw i32 %1748, 23
  %1750 = sub nuw nsw i32 855638016, %1749
  %1751 = sub nsw i32 31, %1746
  %1752 = tail call i32 @llvm.fshr.i32(i32 %1745, i32 %1738, i32 %1751)
  %1753 = lshr i32 %1752, 9
  %1754 = or i32 %1750, %1753
  %1755 = or i32 %1754, %1731
  %1756 = bitcast i32 %1755 to float
  %1757 = fneg float %1747
  %1758 = tail call float @llvm.fma.f32(float %1744, float 0x3FF921FB40000000, float %1757)
  %1759 = tail call float @llvm.fma.f32(float %1744, float 0x3E74442D00000000, float %1758)
  %1760 = tail call float @llvm.fma.f32(float %1756, float 0x3FF921FB40000000, float %1759)
  %1761 = fadd float %1747, %1760
  %1762 = lshr i32 %1722, 30
  %1763 = add nuw nsw i32 %1729, %1762
  br label %1764

1764:                                             ; preds = %1658, %1651
  %1765 = phi float [ %1656, %1651 ], [ %1761, %1658 ]
  %1766 = phi i32 [ %1657, %1651 ], [ %1763, %1658 ]
  %1767 = fmul float %1765, %1765
  %1768 = tail call float @llvm.fmuladd.f32(float %1767, float 0xBF29833040000000, float 0x3F81103880000000)
  %1769 = tail call float @llvm.fmuladd.f32(float %1767, float %1768, float 0xBFC55553A0000000)
  %1770 = fmul float %1767, %1769
  %1771 = tail call float @llvm.fmuladd.f32(float %1765, float %1770, float %1765)
  %1772 = tail call float @llvm.fmuladd.f32(float %1767, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1773 = tail call float @llvm.fmuladd.f32(float %1767, float %1772, float 0x3FA5557EE0000000)
  %1774 = tail call float @llvm.fmuladd.f32(float %1767, float %1773, float 0xBFE0000080000000)
  %1775 = tail call float @llvm.fmuladd.f32(float %1767, float %1774, float 1.000000e+00)
  %1776 = fneg float %1771
  %1777 = and i32 %1766, 1
  %1778 = icmp eq i32 %1777, 0
  %1779 = select i1 %1778, float %1775, float %1776
  %1780 = bitcast float %1779 to i32
  %1781 = shl i32 %1766, 30
  %1782 = and i32 %1781, -2147483648
  %1783 = xor i32 %1782, %1780
  %1784 = bitcast i32 %1783 to float
  %1785 = select i1 %1361, float %1784, float 0x7FF8000000000000
  br i1 %1366, label %1786, label %1793

1786:                                             ; preds = %1764
  %1787 = fmul float %1365, 0x3FE45F3060000000
  %1788 = tail call float @llvm.rint.f32(float %1787)
  %1789 = tail call float @llvm.fma.f32(float %1788, float 0xBFF921FB40000000, float %1365)
  %1790 = tail call float @llvm.fma.f32(float %1788, float 0xBE74442D00000000, float %1789)
  %1791 = tail call float @llvm.fma.f32(float %1788, float 0xBCF8469880000000, float %1790)
  %1792 = fptosi float %1788 to i32
  br label %1899

1793:                                             ; preds = %1764
  %1794 = bitcast float %1365 to i32
  %1795 = lshr i32 %1794, 23
  %1796 = and i32 %1794, 8388607
  %1797 = or i32 %1796, 8388608
  %1798 = zext i32 %1797 to i64
  %1799 = mul nuw nsw i64 %1798, 4266746795
  %1800 = trunc i64 %1799 to i32
  %1801 = lshr i64 %1799, 32
  %1802 = mul nuw nsw i64 %1798, 1011060801
  %1803 = add nuw nsw i64 %1801, %1802
  %1804 = trunc i64 %1803 to i32
  %1805 = lshr i64 %1803, 32
  %1806 = mul nuw nsw i64 %1798, 3680671129
  %1807 = add nuw nsw i64 %1805, %1806
  %1808 = trunc i64 %1807 to i32
  %1809 = lshr i64 %1807, 32
  %1810 = mul nuw nsw i64 %1798, 4113882560
  %1811 = add nuw nsw i64 %1809, %1810
  %1812 = trunc i64 %1811 to i32
  %1813 = lshr i64 %1811, 32
  %1814 = mul nuw nsw i64 %1798, 4230436817
  %1815 = add nuw nsw i64 %1813, %1814
  %1816 = trunc i64 %1815 to i32
  %1817 = lshr i64 %1815, 32
  %1818 = mul nuw nsw i64 %1798, 1313084713
  %1819 = add nuw nsw i64 %1817, %1818
  %1820 = trunc i64 %1819 to i32
  %1821 = lshr i64 %1819, 32
  %1822 = mul nuw nsw i64 %1798, 2734261102
  %1823 = add nuw nsw i64 %1821, %1822
  %1824 = trunc i64 %1823 to i32
  %1825 = lshr i64 %1823, 32
  %1826 = trunc i64 %1825 to i32
  %1827 = add nsw i32 %1795, -120
  %1828 = icmp ugt i32 %1827, 63
  %1829 = select i1 %1828, i32 %1820, i32 %1826
  %1830 = select i1 %1828, i32 %1816, i32 %1824
  %1831 = select i1 %1828, i32 %1812, i32 %1820
  %1832 = select i1 %1828, i32 %1808, i32 %1816
  %1833 = select i1 %1828, i32 %1804, i32 %1812
  %1834 = select i1 %1828, i32 %1800, i32 %1808
  %1835 = select i1 %1828, i32 -64, i32 0
  %1836 = add nsw i32 %1835, %1827
  %1837 = icmp ugt i32 %1836, 31
  %1838 = select i1 %1837, i32 %1830, i32 %1829
  %1839 = select i1 %1837, i32 %1831, i32 %1830
  %1840 = select i1 %1837, i32 %1832, i32 %1831
  %1841 = select i1 %1837, i32 %1833, i32 %1832
  %1842 = select i1 %1837, i32 %1834, i32 %1833
  %1843 = select i1 %1837, i32 -32, i32 0
  %1844 = add nsw i32 %1843, %1836
  %1845 = icmp ugt i32 %1844, 31
  %1846 = select i1 %1845, i32 %1839, i32 %1838
  %1847 = select i1 %1845, i32 %1840, i32 %1839
  %1848 = select i1 %1845, i32 %1841, i32 %1840
  %1849 = select i1 %1845, i32 %1842, i32 %1841
  %1850 = select i1 %1845, i32 -32, i32 0
  %1851 = add nsw i32 %1850, %1844
  %1852 = icmp eq i32 %1851, 0
  %1853 = sub nsw i32 32, %1851
  %1854 = tail call i32 @llvm.fshr.i32(i32 %1846, i32 %1847, i32 %1853)
  %1855 = tail call i32 @llvm.fshr.i32(i32 %1847, i32 %1848, i32 %1853)
  %1856 = tail call i32 @llvm.fshr.i32(i32 %1848, i32 %1849, i32 %1853)
  %1857 = select i1 %1852, i32 %1846, i32 %1854
  %1858 = select i1 %1852, i32 %1847, i32 %1855
  %1859 = select i1 %1852, i32 %1848, i32 %1856
  %1860 = lshr i32 %1857, 29
  %1861 = tail call i32 @llvm.fshl.i32(i32 %1857, i32 %1858, i32 2)
  %1862 = tail call i32 @llvm.fshl.i32(i32 %1858, i32 %1859, i32 2)
  %1863 = tail call i32 @llvm.fshl.i32(i32 %1859, i32 %1849, i32 2)
  %1864 = and i32 %1860, 1
  %1865 = sub nsw i32 0, %1864
  %1866 = shl i32 %1860, 31
  %1867 = xor i32 %1861, %1865
  %1868 = xor i32 %1862, %1865
  %1869 = xor i32 %1863, %1865
  %1870 = tail call i32 @llvm.ctlz.i32(i32 %1867, i1 false), !range !11
  %1871 = sub nsw i32 31, %1870
  %1872 = tail call i32 @llvm.fshr.i32(i32 %1867, i32 %1868, i32 %1871)
  %1873 = tail call i32 @llvm.fshr.i32(i32 %1868, i32 %1869, i32 %1871)
  %1874 = shl nuw nsw i32 %1870, 23
  %1875 = sub nuw nsw i32 1056964608, %1874
  %1876 = lshr i32 %1872, 9
  %1877 = or i32 %1876, %1875
  %1878 = or i32 %1877, %1866
  %1879 = bitcast i32 %1878 to float
  %1880 = tail call i32 @llvm.fshl.i32(i32 %1872, i32 %1873, i32 23)
  %1881 = tail call i32 @llvm.ctlz.i32(i32 %1880, i1 false), !range !11
  %1882 = fmul float %1879, 0x3FF921FB40000000
  %1883 = add nuw nsw i32 %1881, %1870
  %1884 = shl nuw nsw i32 %1883, 23
  %1885 = sub nuw nsw i32 855638016, %1884
  %1886 = sub nsw i32 31, %1881
  %1887 = tail call i32 @llvm.fshr.i32(i32 %1880, i32 %1873, i32 %1886)
  %1888 = lshr i32 %1887, 9
  %1889 = or i32 %1885, %1888
  %1890 = or i32 %1889, %1866
  %1891 = bitcast i32 %1890 to float
  %1892 = fneg float %1882
  %1893 = tail call float @llvm.fma.f32(float %1879, float 0x3FF921FB40000000, float %1892)
  %1894 = tail call float @llvm.fma.f32(float %1879, float 0x3E74442D00000000, float %1893)
  %1895 = tail call float @llvm.fma.f32(float %1891, float 0x3FF921FB40000000, float %1894)
  %1896 = fadd float %1882, %1895
  %1897 = lshr i32 %1857, 30
  %1898 = add nuw nsw i32 %1864, %1897
  br label %1899

1899:                                             ; preds = %1793, %1786
  %1900 = phi float [ %1791, %1786 ], [ %1896, %1793 ]
  %1901 = phi i32 [ %1792, %1786 ], [ %1898, %1793 ]
  %1902 = fmul float %1900, %1900
  %1903 = tail call float @llvm.fmuladd.f32(float %1902, float 0xBF29833040000000, float 0x3F81103880000000)
  %1904 = tail call float @llvm.fmuladd.f32(float %1902, float %1903, float 0xBFC55553A0000000)
  %1905 = fmul float %1902, %1904
  %1906 = tail call float @llvm.fmuladd.f32(float %1900, float %1905, float %1900)
  %1907 = tail call float @llvm.fmuladd.f32(float %1902, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %1908 = tail call float @llvm.fmuladd.f32(float %1902, float %1907, float 0x3FA5557EE0000000)
  %1909 = tail call float @llvm.fmuladd.f32(float %1902, float %1908, float 0xBFE0000080000000)
  %1910 = tail call float @llvm.fmuladd.f32(float %1902, float %1909, float 1.000000e+00)
  %1911 = fneg float %1906
  %1912 = and i32 %1901, 1
  %1913 = icmp eq i32 %1912, 0
  %1914 = select i1 %1913, float %1910, float %1911
  %1915 = bitcast float %1914 to i32
  %1916 = shl i32 %1901, 30
  %1917 = and i32 %1916, -2147483648
  %1918 = xor i32 %1917, %1915
  %1919 = bitcast i32 %1918 to float
  %1920 = select i1 %1505, float %1919, float 0x7FF8000000000000
  br i1 %1510, label %1921, label %1928

1921:                                             ; preds = %1899
  %1922 = fmul float %1509, 0x3FE45F3060000000
  %1923 = tail call float @llvm.rint.f32(float %1922)
  %1924 = tail call float @llvm.fma.f32(float %1923, float 0xBFF921FB40000000, float %1509)
  %1925 = tail call float @llvm.fma.f32(float %1923, float 0xBE74442D00000000, float %1924)
  %1926 = tail call float @llvm.fma.f32(float %1923, float 0xBCF8469880000000, float %1925)
  %1927 = fptosi float %1923 to i32
  br label %2034

1928:                                             ; preds = %1899
  %1929 = bitcast float %1509 to i32
  %1930 = lshr i32 %1929, 23
  %1931 = and i32 %1929, 8388607
  %1932 = or i32 %1931, 8388608
  %1933 = zext i32 %1932 to i64
  %1934 = mul nuw nsw i64 %1933, 4266746795
  %1935 = trunc i64 %1934 to i32
  %1936 = lshr i64 %1934, 32
  %1937 = mul nuw nsw i64 %1933, 1011060801
  %1938 = add nuw nsw i64 %1936, %1937
  %1939 = trunc i64 %1938 to i32
  %1940 = lshr i64 %1938, 32
  %1941 = mul nuw nsw i64 %1933, 3680671129
  %1942 = add nuw nsw i64 %1940, %1941
  %1943 = trunc i64 %1942 to i32
  %1944 = lshr i64 %1942, 32
  %1945 = mul nuw nsw i64 %1933, 4113882560
  %1946 = add nuw nsw i64 %1944, %1945
  %1947 = trunc i64 %1946 to i32
  %1948 = lshr i64 %1946, 32
  %1949 = mul nuw nsw i64 %1933, 4230436817
  %1950 = add nuw nsw i64 %1948, %1949
  %1951 = trunc i64 %1950 to i32
  %1952 = lshr i64 %1950, 32
  %1953 = mul nuw nsw i64 %1933, 1313084713
  %1954 = add nuw nsw i64 %1952, %1953
  %1955 = trunc i64 %1954 to i32
  %1956 = lshr i64 %1954, 32
  %1957 = mul nuw nsw i64 %1933, 2734261102
  %1958 = add nuw nsw i64 %1956, %1957
  %1959 = trunc i64 %1958 to i32
  %1960 = lshr i64 %1958, 32
  %1961 = trunc i64 %1960 to i32
  %1962 = add nsw i32 %1930, -120
  %1963 = icmp ugt i32 %1962, 63
  %1964 = select i1 %1963, i32 %1955, i32 %1961
  %1965 = select i1 %1963, i32 %1951, i32 %1959
  %1966 = select i1 %1963, i32 %1947, i32 %1955
  %1967 = select i1 %1963, i32 %1943, i32 %1951
  %1968 = select i1 %1963, i32 %1939, i32 %1947
  %1969 = select i1 %1963, i32 %1935, i32 %1943
  %1970 = select i1 %1963, i32 -64, i32 0
  %1971 = add nsw i32 %1970, %1962
  %1972 = icmp ugt i32 %1971, 31
  %1973 = select i1 %1972, i32 %1965, i32 %1964
  %1974 = select i1 %1972, i32 %1966, i32 %1965
  %1975 = select i1 %1972, i32 %1967, i32 %1966
  %1976 = select i1 %1972, i32 %1968, i32 %1967
  %1977 = select i1 %1972, i32 %1969, i32 %1968
  %1978 = select i1 %1972, i32 -32, i32 0
  %1979 = add nsw i32 %1978, %1971
  %1980 = icmp ugt i32 %1979, 31
  %1981 = select i1 %1980, i32 %1974, i32 %1973
  %1982 = select i1 %1980, i32 %1975, i32 %1974
  %1983 = select i1 %1980, i32 %1976, i32 %1975
  %1984 = select i1 %1980, i32 %1977, i32 %1976
  %1985 = select i1 %1980, i32 -32, i32 0
  %1986 = add nsw i32 %1985, %1979
  %1987 = icmp eq i32 %1986, 0
  %1988 = sub nsw i32 32, %1986
  %1989 = tail call i32 @llvm.fshr.i32(i32 %1981, i32 %1982, i32 %1988)
  %1990 = tail call i32 @llvm.fshr.i32(i32 %1982, i32 %1983, i32 %1988)
  %1991 = tail call i32 @llvm.fshr.i32(i32 %1983, i32 %1984, i32 %1988)
  %1992 = select i1 %1987, i32 %1981, i32 %1989
  %1993 = select i1 %1987, i32 %1982, i32 %1990
  %1994 = select i1 %1987, i32 %1983, i32 %1991
  %1995 = lshr i32 %1992, 29
  %1996 = tail call i32 @llvm.fshl.i32(i32 %1992, i32 %1993, i32 2)
  %1997 = tail call i32 @llvm.fshl.i32(i32 %1993, i32 %1994, i32 2)
  %1998 = tail call i32 @llvm.fshl.i32(i32 %1994, i32 %1984, i32 2)
  %1999 = and i32 %1995, 1
  %2000 = sub nsw i32 0, %1999
  %2001 = shl i32 %1995, 31
  %2002 = xor i32 %1996, %2000
  %2003 = xor i32 %1997, %2000
  %2004 = xor i32 %1998, %2000
  %2005 = tail call i32 @llvm.ctlz.i32(i32 %2002, i1 false), !range !11
  %2006 = sub nsw i32 31, %2005
  %2007 = tail call i32 @llvm.fshr.i32(i32 %2002, i32 %2003, i32 %2006)
  %2008 = tail call i32 @llvm.fshr.i32(i32 %2003, i32 %2004, i32 %2006)
  %2009 = shl nuw nsw i32 %2005, 23
  %2010 = sub nuw nsw i32 1056964608, %2009
  %2011 = lshr i32 %2007, 9
  %2012 = or i32 %2011, %2010
  %2013 = or i32 %2012, %2001
  %2014 = bitcast i32 %2013 to float
  %2015 = tail call i32 @llvm.fshl.i32(i32 %2007, i32 %2008, i32 23)
  %2016 = tail call i32 @llvm.ctlz.i32(i32 %2015, i1 false), !range !11
  %2017 = fmul float %2014, 0x3FF921FB40000000
  %2018 = add nuw nsw i32 %2016, %2005
  %2019 = shl nuw nsw i32 %2018, 23
  %2020 = sub nuw nsw i32 855638016, %2019
  %2021 = sub nsw i32 31, %2016
  %2022 = tail call i32 @llvm.fshr.i32(i32 %2015, i32 %2008, i32 %2021)
  %2023 = lshr i32 %2022, 9
  %2024 = or i32 %2020, %2023
  %2025 = or i32 %2024, %2001
  %2026 = bitcast i32 %2025 to float
  %2027 = fneg float %2017
  %2028 = tail call float @llvm.fma.f32(float %2014, float 0x3FF921FB40000000, float %2027)
  %2029 = tail call float @llvm.fma.f32(float %2014, float 0x3E74442D00000000, float %2028)
  %2030 = tail call float @llvm.fma.f32(float %2026, float 0x3FF921FB40000000, float %2029)
  %2031 = fadd float %2017, %2030
  %2032 = lshr i32 %1992, 30
  %2033 = add nuw nsw i32 %1999, %2032
  br label %2034

2034:                                             ; preds = %1921, %1928
  %2035 = phi float [ %1926, %1921 ], [ %2031, %1928 ]
  %2036 = phi i32 [ %1927, %1921 ], [ %2033, %1928 ]
  %2037 = fmul float %2035, %2035
  %2038 = tail call float @llvm.fmuladd.f32(float %2037, float 0xBF29833040000000, float 0x3F81103880000000)
  %2039 = tail call float @llvm.fmuladd.f32(float %2037, float %2038, float 0xBFC55553A0000000)
  %2040 = fmul float %2037, %2039
  %2041 = tail call float @llvm.fmuladd.f32(float %2035, float %2040, float %2035)
  %2042 = tail call float @llvm.fmuladd.f32(float %2037, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %2043 = tail call float @llvm.fmuladd.f32(float %2037, float %2042, float 0x3FA5557EE0000000)
  %2044 = tail call float @llvm.fmuladd.f32(float %2037, float %2043, float 0xBFE0000080000000)
  %2045 = tail call float @llvm.fmuladd.f32(float %2037, float %2044, float 1.000000e+00)
  %2046 = fneg float %2041
  %2047 = and i32 %2036, 1
  %2048 = icmp eq i32 %2047, 0
  %2049 = select i1 %2048, float %2045, float %2046
  %2050 = bitcast float %2049 to i32
  %2051 = shl i32 %2036, 30
  %2052 = and i32 %2051, -2147483648
  %2053 = xor i32 %2052, %2050
  %2054 = bitcast i32 %2053 to float
  %2055 = select i1 %1649, float %2054, float 0x7FF8000000000000
  %2056 = fmul contract float %1785, %2055
  %2057 = fmul contract float %1362, %1920
  %2058 = fmul contract float %1650, %2057
  %2059 = fsub contract float %2056, %2058
  store float %2059, float addrspace(1)* %361, align 4, !tbaa !5
  %2060 = fneg contract float %1785
  %2061 = fmul contract float %1650, %2060
  %2062 = fmul contract float %1920, %2055
  %2063 = fmul contract float %1362, %2062
  %2064 = fsub contract float %2061, %2063
  %2065 = getelementptr inbounds float, float addrspace(1)* %361, i64 1
  store float %2064, float addrspace(1)* %2065, align 4, !tbaa !5
  %2066 = fmul contract float %1362, %1506
  %2067 = getelementptr inbounds float, float addrspace(1)* %361, i64 2
  store float %2066, float addrspace(1)* %2067, align 4, !tbaa !5
  %2068 = fmul contract float %1362, %2055
  %2069 = fmul contract float %1785, %1920
  %2070 = fmul contract float %1650, %2069
  %2071 = fadd contract float %2070, %2068
  %2072 = getelementptr inbounds float, float addrspace(1)* %361, i64 3
  store float %2071, float addrspace(1)* %2072, align 4, !tbaa !5
  %2073 = fmul contract float %2069, %2055
  %2074 = fmul contract float %1362, %1650
  %2075 = fsub contract float %2073, %2074
  %2076 = getelementptr inbounds float, float addrspace(1)* %361, i64 4
  store float %2075, float addrspace(1)* %2076, align 4, !tbaa !5
  %2077 = fmul contract float %1506, %2060
  %2078 = getelementptr inbounds float, float addrspace(1)* %361, i64 5
  store float %2077, float addrspace(1)* %2078, align 4, !tbaa !5
  %2079 = fmul contract float %1506, %1650
  %2080 = getelementptr inbounds float, float addrspace(1)* %361, i64 6
  store float %2079, float addrspace(1)* %2080, align 4, !tbaa !5
  %2081 = fmul contract float %1506, %2055
  br label %2082

2082:                                             ; preds = %2034, %1172
  %2083 = phi float [ %2081, %2034 ], [ %1219, %1172 ]
  %2084 = phi float [ %1920, %2034 ], [ %1058, %1172 ]
  %2085 = getelementptr inbounds float, float addrspace(1)* %361, i64 7
  store float %2083, float addrspace(1)* %2085, align 4, !tbaa !5
  %2086 = getelementptr inbounds float, float addrspace(1)* %361, i64 8
  store float %2084, float addrspace(1)* %2086, align 4, !tbaa !5
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{}
!10 = !{i16 1, i16 1025}
!11 = !{i32 0, i32 33}
