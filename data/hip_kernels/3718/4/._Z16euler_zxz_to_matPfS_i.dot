digraph "CFG for '_Z16euler_zxz_to_matPfS_i' function" {
	label="CFG for '_Z16euler_zxz_to_matPfS_i' function";

	Node0x5791340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %905\l|{<s0>T|<s1>F}}"];
	Node0x5791340:s0 -> Node0x5793210;
	Node0x5791340:s1 -> Node0x57932a0;
	Node0x5793210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%14:\l14:                                               \l  %15 = mul nsw i32 %12, 3\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds float, float addrspace(1)* %0, i64 %16\l  %18 = load float, float addrspace(1)* %17, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %19 = tail call float @llvm.fabs.f32(float %18)\l  %20 = fcmp olt float %19, 1.310720e+05\l  br i1 %20, label %21, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5793210:s0 -> Node0x5794af0;
	Node0x5793210:s1 -> Node0x5794b80;
	Node0x5794af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%21:\l21:                                               \l  %22 = fmul float %19, 0x3FE45F3060000000\l  %23 = tail call float @llvm.rint.f32(float %22)\l  %24 = tail call float @llvm.fma.f32(float %23, float 0xBFF921FB40000000,\l... float %19)\l  %25 = tail call float @llvm.fma.f32(float %23, float 0xBE74442D00000000,\l... float %24)\l  %26 = tail call float @llvm.fma.f32(float %23, float 0xBCF8469880000000,\l... float %25)\l  %27 = fptosi float %23 to i32\l  %28 = bitcast float %19 to i32\l  br label %135\l}"];
	Node0x5794af0 -> Node0x5795650;
	Node0x5794b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%29:\l29:                                               \l  %30 = bitcast float %19 to i32\l  %31 = lshr i32 %30, 23\l  %32 = and i32 %30, 8388607\l  %33 = or i32 %32, 8388608\l  %34 = zext i32 %33 to i64\l  %35 = mul nuw nsw i64 %34, 4266746795\l  %36 = trunc i64 %35 to i32\l  %37 = lshr i64 %35, 32\l  %38 = mul nuw nsw i64 %34, 1011060801\l  %39 = add nuw nsw i64 %37, %38\l  %40 = trunc i64 %39 to i32\l  %41 = lshr i64 %39, 32\l  %42 = mul nuw nsw i64 %34, 3680671129\l  %43 = add nuw nsw i64 %41, %42\l  %44 = trunc i64 %43 to i32\l  %45 = lshr i64 %43, 32\l  %46 = mul nuw nsw i64 %34, 4113882560\l  %47 = add nuw nsw i64 %45, %46\l  %48 = trunc i64 %47 to i32\l  %49 = lshr i64 %47, 32\l  %50 = mul nuw nsw i64 %34, 4230436817\l  %51 = add nuw nsw i64 %49, %50\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %34, 1313084713\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = mul nuw nsw i64 %34, 2734261102\l  %59 = add nuw nsw i64 %57, %58\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = trunc i64 %61 to i32\l  %63 = add nsw i32 %31, -120\l  %64 = icmp ugt i32 %63, 63\l  %65 = select i1 %64, i32 %56, i32 %62\l  %66 = select i1 %64, i32 %52, i32 %60\l  %67 = select i1 %64, i32 %48, i32 %56\l  %68 = select i1 %64, i32 %44, i32 %52\l  %69 = select i1 %64, i32 %40, i32 %48\l  %70 = select i1 %64, i32 %36, i32 %44\l  %71 = select i1 %64, i32 -64, i32 0\l  %72 = add nsw i32 %71, %63\l  %73 = icmp ugt i32 %72, 31\l  %74 = select i1 %73, i32 %66, i32 %65\l  %75 = select i1 %73, i32 %67, i32 %66\l  %76 = select i1 %73, i32 %68, i32 %67\l  %77 = select i1 %73, i32 %69, i32 %68\l  %78 = select i1 %73, i32 %70, i32 %69\l  %79 = select i1 %73, i32 -32, i32 0\l  %80 = add nsw i32 %79, %72\l  %81 = icmp ugt i32 %80, 31\l  %82 = select i1 %81, i32 %75, i32 %74\l  %83 = select i1 %81, i32 %76, i32 %75\l  %84 = select i1 %81, i32 %77, i32 %76\l  %85 = select i1 %81, i32 %78, i32 %77\l  %86 = select i1 %81, i32 -32, i32 0\l  %87 = add nsw i32 %86, %80\l  %88 = icmp eq i32 %87, 0\l  %89 = sub nsw i32 32, %87\l  %90 = tail call i32 @llvm.fshr.i32(i32 %82, i32 %83, i32 %89)\l  %91 = tail call i32 @llvm.fshr.i32(i32 %83, i32 %84, i32 %89)\l  %92 = tail call i32 @llvm.fshr.i32(i32 %84, i32 %85, i32 %89)\l  %93 = select i1 %88, i32 %82, i32 %90\l  %94 = select i1 %88, i32 %83, i32 %91\l  %95 = select i1 %88, i32 %84, i32 %92\l  %96 = lshr i32 %93, 29\l  %97 = tail call i32 @llvm.fshl.i32(i32 %93, i32 %94, i32 2)\l  %98 = tail call i32 @llvm.fshl.i32(i32 %94, i32 %95, i32 2)\l  %99 = tail call i32 @llvm.fshl.i32(i32 %95, i32 %85, i32 2)\l  %100 = and i32 %96, 1\l  %101 = sub nsw i32 0, %100\l  %102 = shl i32 %96, 31\l  %103 = xor i32 %97, %101\l  %104 = xor i32 %98, %101\l  %105 = xor i32 %99, %101\l  %106 = tail call i32 @llvm.ctlz.i32(i32 %103, i1 false), !range !11\l  %107 = sub nsw i32 31, %106\l  %108 = tail call i32 @llvm.fshr.i32(i32 %103, i32 %104, i32 %107)\l  %109 = tail call i32 @llvm.fshr.i32(i32 %104, i32 %105, i32 %107)\l  %110 = shl nuw nsw i32 %106, 23\l  %111 = sub nuw nsw i32 1056964608, %110\l  %112 = lshr i32 %108, 9\l  %113 = or i32 %112, %111\l  %114 = or i32 %113, %102\l  %115 = bitcast i32 %114 to float\l  %116 = tail call i32 @llvm.fshl.i32(i32 %108, i32 %109, i32 23)\l  %117 = tail call i32 @llvm.ctlz.i32(i32 %116, i1 false), !range !11\l  %118 = fmul float %115, 0x3FF921FB40000000\l  %119 = add nuw nsw i32 %117, %106\l  %120 = shl nuw nsw i32 %119, 23\l  %121 = sub nuw nsw i32 855638016, %120\l  %122 = sub nsw i32 31, %117\l  %123 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %109, i32 %122)\l  %124 = lshr i32 %123, 9\l  %125 = or i32 %121, %124\l  %126 = or i32 %125, %102\l  %127 = bitcast i32 %126 to float\l  %128 = fneg float %118\l  %129 = tail call float @llvm.fma.f32(float %115, float 0x3FF921FB40000000,\l... float %128)\l  %130 = tail call float @llvm.fma.f32(float %115, float 0x3E74442D00000000,\l... float %129)\l  %131 = tail call float @llvm.fma.f32(float %127, float 0x3FF921FB40000000,\l... float %130)\l  %132 = fadd float %118, %131\l  %133 = lshr i32 %93, 30\l  %134 = add nuw nsw i32 %100, %133\l  br label %135\l}"];
	Node0x5794b80 -> Node0x5795650;
	Node0x5795650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%135:\l135:                                              \l  %136 = phi i32 [ %28, %21 ], [ %30, %29 ]\l  %137 = phi float [ %26, %21 ], [ %132, %29 ]\l  %138 = phi i32 [ %27, %21 ], [ %134, %29 ]\l  %139 = fmul float %137, %137\l  %140 = tail call float @llvm.fmuladd.f32(float %139, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %141 = tail call float @llvm.fmuladd.f32(float %139, float %140, float\l... 0xBFC55553A0000000)\l  %142 = fmul float %139, %141\l  %143 = tail call float @llvm.fmuladd.f32(float %137, float %142, float %137)\l  %144 = tail call float @llvm.fmuladd.f32(float %139, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %145 = tail call float @llvm.fmuladd.f32(float %139, float %144, float\l... 0x3FA5557EE0000000)\l  %146 = tail call float @llvm.fmuladd.f32(float %139, float %145, float\l... 0xBFE0000080000000)\l  %147 = tail call float @llvm.fmuladd.f32(float %139, float %146, float\l... 1.000000e+00)\l  %148 = and i32 %138, 1\l  %149 = icmp eq i32 %148, 0\l  %150 = select i1 %149, float %143, float %147\l  %151 = bitcast float %150 to i32\l  %152 = shl i32 %138, 30\l  %153 = and i32 %152, -2147483648\l  %154 = bitcast float %18 to i32\l  %155 = xor i32 %136, %154\l  %156 = xor i32 %155, %153\l  %157 = xor i32 %156, %151\l  %158 = bitcast i32 %157 to float\l  %159 = tail call i1 @llvm.amdgcn.class.f32(float %19, i32 504)\l  %160 = select i1 %159, float %158, float 0x7FF8000000000000\l  %161 = add nsw i32 %15, 1\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %165 = tail call float @llvm.fabs.f32(float %164)\l  %166 = fcmp olt float %165, 1.310720e+05\l  br i1 %166, label %167, label %175\l|{<s0>T|<s1>F}}"];
	Node0x5795650:s0 -> Node0x579d640;
	Node0x5795650:s1 -> Node0x579d6d0;
	Node0x579d640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%167:\l167:                                              \l  %168 = fmul float %165, 0x3FE45F3060000000\l  %169 = tail call float @llvm.rint.f32(float %168)\l  %170 = tail call float @llvm.fma.f32(float %169, float 0xBFF921FB40000000,\l... float %165)\l  %171 = tail call float @llvm.fma.f32(float %169, float 0xBE74442D00000000,\l... float %170)\l  %172 = tail call float @llvm.fma.f32(float %169, float 0xBCF8469880000000,\l... float %171)\l  %173 = fptosi float %169 to i32\l  %174 = bitcast float %165 to i32\l  br label %281\l}"];
	Node0x579d640 -> Node0x579de00;
	Node0x579d6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%175:\l175:                                              \l  %176 = bitcast float %165 to i32\l  %177 = lshr i32 %176, 23\l  %178 = and i32 %176, 8388607\l  %179 = or i32 %178, 8388608\l  %180 = zext i32 %179 to i64\l  %181 = mul nuw nsw i64 %180, 4266746795\l  %182 = trunc i64 %181 to i32\l  %183 = lshr i64 %181, 32\l  %184 = mul nuw nsw i64 %180, 1011060801\l  %185 = add nuw nsw i64 %183, %184\l  %186 = trunc i64 %185 to i32\l  %187 = lshr i64 %185, 32\l  %188 = mul nuw nsw i64 %180, 3680671129\l  %189 = add nuw nsw i64 %187, %188\l  %190 = trunc i64 %189 to i32\l  %191 = lshr i64 %189, 32\l  %192 = mul nuw nsw i64 %180, 4113882560\l  %193 = add nuw nsw i64 %191, %192\l  %194 = trunc i64 %193 to i32\l  %195 = lshr i64 %193, 32\l  %196 = mul nuw nsw i64 %180, 4230436817\l  %197 = add nuw nsw i64 %195, %196\l  %198 = trunc i64 %197 to i32\l  %199 = lshr i64 %197, 32\l  %200 = mul nuw nsw i64 %180, 1313084713\l  %201 = add nuw nsw i64 %199, %200\l  %202 = trunc i64 %201 to i32\l  %203 = lshr i64 %201, 32\l  %204 = mul nuw nsw i64 %180, 2734261102\l  %205 = add nuw nsw i64 %203, %204\l  %206 = trunc i64 %205 to i32\l  %207 = lshr i64 %205, 32\l  %208 = trunc i64 %207 to i32\l  %209 = add nsw i32 %177, -120\l  %210 = icmp ugt i32 %209, 63\l  %211 = select i1 %210, i32 %202, i32 %208\l  %212 = select i1 %210, i32 %198, i32 %206\l  %213 = select i1 %210, i32 %194, i32 %202\l  %214 = select i1 %210, i32 %190, i32 %198\l  %215 = select i1 %210, i32 %186, i32 %194\l  %216 = select i1 %210, i32 %182, i32 %190\l  %217 = select i1 %210, i32 -64, i32 0\l  %218 = add nsw i32 %217, %209\l  %219 = icmp ugt i32 %218, 31\l  %220 = select i1 %219, i32 %212, i32 %211\l  %221 = select i1 %219, i32 %213, i32 %212\l  %222 = select i1 %219, i32 %214, i32 %213\l  %223 = select i1 %219, i32 %215, i32 %214\l  %224 = select i1 %219, i32 %216, i32 %215\l  %225 = select i1 %219, i32 -32, i32 0\l  %226 = add nsw i32 %225, %218\l  %227 = icmp ugt i32 %226, 31\l  %228 = select i1 %227, i32 %221, i32 %220\l  %229 = select i1 %227, i32 %222, i32 %221\l  %230 = select i1 %227, i32 %223, i32 %222\l  %231 = select i1 %227, i32 %224, i32 %223\l  %232 = select i1 %227, i32 -32, i32 0\l  %233 = add nsw i32 %232, %226\l  %234 = icmp eq i32 %233, 0\l  %235 = sub nsw i32 32, %233\l  %236 = tail call i32 @llvm.fshr.i32(i32 %228, i32 %229, i32 %235)\l  %237 = tail call i32 @llvm.fshr.i32(i32 %229, i32 %230, i32 %235)\l  %238 = tail call i32 @llvm.fshr.i32(i32 %230, i32 %231, i32 %235)\l  %239 = select i1 %234, i32 %228, i32 %236\l  %240 = select i1 %234, i32 %229, i32 %237\l  %241 = select i1 %234, i32 %230, i32 %238\l  %242 = lshr i32 %239, 29\l  %243 = tail call i32 @llvm.fshl.i32(i32 %239, i32 %240, i32 2)\l  %244 = tail call i32 @llvm.fshl.i32(i32 %240, i32 %241, i32 2)\l  %245 = tail call i32 @llvm.fshl.i32(i32 %241, i32 %231, i32 2)\l  %246 = and i32 %242, 1\l  %247 = sub nsw i32 0, %246\l  %248 = shl i32 %242, 31\l  %249 = xor i32 %243, %247\l  %250 = xor i32 %244, %247\l  %251 = xor i32 %245, %247\l  %252 = tail call i32 @llvm.ctlz.i32(i32 %249, i1 false), !range !11\l  %253 = sub nsw i32 31, %252\l  %254 = tail call i32 @llvm.fshr.i32(i32 %249, i32 %250, i32 %253)\l  %255 = tail call i32 @llvm.fshr.i32(i32 %250, i32 %251, i32 %253)\l  %256 = shl nuw nsw i32 %252, 23\l  %257 = sub nuw nsw i32 1056964608, %256\l  %258 = lshr i32 %254, 9\l  %259 = or i32 %258, %257\l  %260 = or i32 %259, %248\l  %261 = bitcast i32 %260 to float\l  %262 = tail call i32 @llvm.fshl.i32(i32 %254, i32 %255, i32 23)\l  %263 = tail call i32 @llvm.ctlz.i32(i32 %262, i1 false), !range !11\l  %264 = fmul float %261, 0x3FF921FB40000000\l  %265 = add nuw nsw i32 %263, %252\l  %266 = shl nuw nsw i32 %265, 23\l  %267 = sub nuw nsw i32 855638016, %266\l  %268 = sub nsw i32 31, %263\l  %269 = tail call i32 @llvm.fshr.i32(i32 %262, i32 %255, i32 %268)\l  %270 = lshr i32 %269, 9\l  %271 = or i32 %267, %270\l  %272 = or i32 %271, %248\l  %273 = bitcast i32 %272 to float\l  %274 = fneg float %264\l  %275 = tail call float @llvm.fma.f32(float %261, float 0x3FF921FB40000000,\l... float %274)\l  %276 = tail call float @llvm.fma.f32(float %261, float 0x3E74442D00000000,\l... float %275)\l  %277 = tail call float @llvm.fma.f32(float %273, float 0x3FF921FB40000000,\l... float %276)\l  %278 = fadd float %264, %277\l  %279 = lshr i32 %239, 30\l  %280 = add nuw nsw i32 %246, %279\l  br label %281\l}"];
	Node0x579d6d0 -> Node0x579de00;
	Node0x579de00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%281:\l281:                                              \l  %282 = phi i32 [ %174, %167 ], [ %176, %175 ]\l  %283 = phi float [ %172, %167 ], [ %278, %175 ]\l  %284 = phi i32 [ %173, %167 ], [ %280, %175 ]\l  %285 = fmul float %283, %283\l  %286 = tail call float @llvm.fmuladd.f32(float %285, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %287 = tail call float @llvm.fmuladd.f32(float %285, float %286, float\l... 0xBFC55553A0000000)\l  %288 = fmul float %285, %287\l  %289 = tail call float @llvm.fmuladd.f32(float %283, float %288, float %283)\l  %290 = tail call float @llvm.fmuladd.f32(float %285, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %291 = tail call float @llvm.fmuladd.f32(float %285, float %290, float\l... 0x3FA5557EE0000000)\l  %292 = tail call float @llvm.fmuladd.f32(float %285, float %291, float\l... 0xBFE0000080000000)\l  %293 = tail call float @llvm.fmuladd.f32(float %285, float %292, float\l... 1.000000e+00)\l  %294 = and i32 %284, 1\l  %295 = icmp eq i32 %294, 0\l  %296 = select i1 %295, float %289, float %293\l  %297 = bitcast float %296 to i32\l  %298 = shl i32 %284, 30\l  %299 = and i32 %298, -2147483648\l  %300 = bitcast float %164 to i32\l  %301 = xor i32 %282, %300\l  %302 = xor i32 %301, %299\l  %303 = xor i32 %302, %297\l  %304 = bitcast i32 %303 to float\l  %305 = tail call i1 @llvm.amdgcn.class.f32(float %165, i32 504)\l  %306 = select i1 %305, float %304, float 0x7FF8000000000000\l  %307 = add nsw i32 %15, 2\l  %308 = sext i32 %307 to i64\l  %309 = getelementptr inbounds float, float addrspace(1)* %0, i64 %308\l  %310 = load float, float addrspace(1)* %309, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %311 = tail call float @llvm.fabs.f32(float %310)\l  %312 = fcmp olt float %311, 1.310720e+05\l  br i1 %312, label %313, label %321\l|{<s0>T|<s1>F}}"];
	Node0x579de00:s0 -> Node0x57a4370;
	Node0x579de00:s1 -> Node0x57a43c0;
	Node0x57a4370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%313:\l313:                                              \l  %314 = fmul float %311, 0x3FE45F3060000000\l  %315 = tail call float @llvm.rint.f32(float %314)\l  %316 = tail call float @llvm.fma.f32(float %315, float 0xBFF921FB40000000,\l... float %311)\l  %317 = tail call float @llvm.fma.f32(float %315, float 0xBE74442D00000000,\l... float %316)\l  %318 = tail call float @llvm.fma.f32(float %315, float 0xBCF8469880000000,\l... float %317)\l  %319 = fptosi float %315 to i32\l  %320 = bitcast float %311 to i32\l  br label %427\l}"];
	Node0x57a4370 -> Node0x57a4ab0;
	Node0x57a43c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%321:\l321:                                              \l  %322 = bitcast float %311 to i32\l  %323 = lshr i32 %322, 23\l  %324 = and i32 %322, 8388607\l  %325 = or i32 %324, 8388608\l  %326 = zext i32 %325 to i64\l  %327 = mul nuw nsw i64 %326, 4266746795\l  %328 = trunc i64 %327 to i32\l  %329 = lshr i64 %327, 32\l  %330 = mul nuw nsw i64 %326, 1011060801\l  %331 = add nuw nsw i64 %329, %330\l  %332 = trunc i64 %331 to i32\l  %333 = lshr i64 %331, 32\l  %334 = mul nuw nsw i64 %326, 3680671129\l  %335 = add nuw nsw i64 %333, %334\l  %336 = trunc i64 %335 to i32\l  %337 = lshr i64 %335, 32\l  %338 = mul nuw nsw i64 %326, 4113882560\l  %339 = add nuw nsw i64 %337, %338\l  %340 = trunc i64 %339 to i32\l  %341 = lshr i64 %339, 32\l  %342 = mul nuw nsw i64 %326, 4230436817\l  %343 = add nuw nsw i64 %341, %342\l  %344 = trunc i64 %343 to i32\l  %345 = lshr i64 %343, 32\l  %346 = mul nuw nsw i64 %326, 1313084713\l  %347 = add nuw nsw i64 %345, %346\l  %348 = trunc i64 %347 to i32\l  %349 = lshr i64 %347, 32\l  %350 = mul nuw nsw i64 %326, 2734261102\l  %351 = add nuw nsw i64 %349, %350\l  %352 = trunc i64 %351 to i32\l  %353 = lshr i64 %351, 32\l  %354 = trunc i64 %353 to i32\l  %355 = add nsw i32 %323, -120\l  %356 = icmp ugt i32 %355, 63\l  %357 = select i1 %356, i32 %348, i32 %354\l  %358 = select i1 %356, i32 %344, i32 %352\l  %359 = select i1 %356, i32 %340, i32 %348\l  %360 = select i1 %356, i32 %336, i32 %344\l  %361 = select i1 %356, i32 %332, i32 %340\l  %362 = select i1 %356, i32 %328, i32 %336\l  %363 = select i1 %356, i32 -64, i32 0\l  %364 = add nsw i32 %363, %355\l  %365 = icmp ugt i32 %364, 31\l  %366 = select i1 %365, i32 %358, i32 %357\l  %367 = select i1 %365, i32 %359, i32 %358\l  %368 = select i1 %365, i32 %360, i32 %359\l  %369 = select i1 %365, i32 %361, i32 %360\l  %370 = select i1 %365, i32 %362, i32 %361\l  %371 = select i1 %365, i32 -32, i32 0\l  %372 = add nsw i32 %371, %364\l  %373 = icmp ugt i32 %372, 31\l  %374 = select i1 %373, i32 %367, i32 %366\l  %375 = select i1 %373, i32 %368, i32 %367\l  %376 = select i1 %373, i32 %369, i32 %368\l  %377 = select i1 %373, i32 %370, i32 %369\l  %378 = select i1 %373, i32 -32, i32 0\l  %379 = add nsw i32 %378, %372\l  %380 = icmp eq i32 %379, 0\l  %381 = sub nsw i32 32, %379\l  %382 = tail call i32 @llvm.fshr.i32(i32 %374, i32 %375, i32 %381)\l  %383 = tail call i32 @llvm.fshr.i32(i32 %375, i32 %376, i32 %381)\l  %384 = tail call i32 @llvm.fshr.i32(i32 %376, i32 %377, i32 %381)\l  %385 = select i1 %380, i32 %374, i32 %382\l  %386 = select i1 %380, i32 %375, i32 %383\l  %387 = select i1 %380, i32 %376, i32 %384\l  %388 = lshr i32 %385, 29\l  %389 = tail call i32 @llvm.fshl.i32(i32 %385, i32 %386, i32 2)\l  %390 = tail call i32 @llvm.fshl.i32(i32 %386, i32 %387, i32 2)\l  %391 = tail call i32 @llvm.fshl.i32(i32 %387, i32 %377, i32 2)\l  %392 = and i32 %388, 1\l  %393 = sub nsw i32 0, %392\l  %394 = shl i32 %388, 31\l  %395 = xor i32 %389, %393\l  %396 = xor i32 %390, %393\l  %397 = xor i32 %391, %393\l  %398 = tail call i32 @llvm.ctlz.i32(i32 %395, i1 false), !range !11\l  %399 = sub nsw i32 31, %398\l  %400 = tail call i32 @llvm.fshr.i32(i32 %395, i32 %396, i32 %399)\l  %401 = tail call i32 @llvm.fshr.i32(i32 %396, i32 %397, i32 %399)\l  %402 = shl nuw nsw i32 %398, 23\l  %403 = sub nuw nsw i32 1056964608, %402\l  %404 = lshr i32 %400, 9\l  %405 = or i32 %404, %403\l  %406 = or i32 %405, %394\l  %407 = bitcast i32 %406 to float\l  %408 = tail call i32 @llvm.fshl.i32(i32 %400, i32 %401, i32 23)\l  %409 = tail call i32 @llvm.ctlz.i32(i32 %408, i1 false), !range !11\l  %410 = fmul float %407, 0x3FF921FB40000000\l  %411 = add nuw nsw i32 %409, %398\l  %412 = shl nuw nsw i32 %411, 23\l  %413 = sub nuw nsw i32 855638016, %412\l  %414 = sub nsw i32 31, %409\l  %415 = tail call i32 @llvm.fshr.i32(i32 %408, i32 %401, i32 %414)\l  %416 = lshr i32 %415, 9\l  %417 = or i32 %413, %416\l  %418 = or i32 %417, %394\l  %419 = bitcast i32 %418 to float\l  %420 = fneg float %410\l  %421 = tail call float @llvm.fma.f32(float %407, float 0x3FF921FB40000000,\l... float %420)\l  %422 = tail call float @llvm.fma.f32(float %407, float 0x3E74442D00000000,\l... float %421)\l  %423 = tail call float @llvm.fma.f32(float %419, float 0x3FF921FB40000000,\l... float %422)\l  %424 = fadd float %410, %423\l  %425 = lshr i32 %385, 30\l  %426 = add nuw nsw i32 %392, %425\l  br label %427\l}"];
	Node0x57a43c0 -> Node0x57a4ab0;
	Node0x57a4ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%427:\l427:                                              \l  %428 = phi i32 [ %320, %313 ], [ %322, %321 ]\l  %429 = phi float [ %318, %313 ], [ %424, %321 ]\l  %430 = phi i32 [ %319, %313 ], [ %426, %321 ]\l  %431 = fmul float %429, %429\l  %432 = tail call float @llvm.fmuladd.f32(float %431, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %433 = tail call float @llvm.fmuladd.f32(float %431, float %432, float\l... 0xBFC55553A0000000)\l  %434 = fmul float %431, %433\l  %435 = tail call float @llvm.fmuladd.f32(float %429, float %434, float %429)\l  %436 = tail call float @llvm.fmuladd.f32(float %431, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %437 = tail call float @llvm.fmuladd.f32(float %431, float %436, float\l... 0x3FA5557EE0000000)\l  %438 = tail call float @llvm.fmuladd.f32(float %431, float %437, float\l... 0xBFE0000080000000)\l  %439 = tail call float @llvm.fmuladd.f32(float %431, float %438, float\l... 1.000000e+00)\l  %440 = and i32 %430, 1\l  %441 = icmp eq i32 %440, 0\l  %442 = select i1 %441, float %435, float %439\l  %443 = bitcast float %442 to i32\l  %444 = shl i32 %430, 30\l  %445 = and i32 %444, -2147483648\l  %446 = bitcast float %310 to i32\l  %447 = xor i32 %428, %446\l  %448 = xor i32 %447, %445\l  %449 = xor i32 %448, %443\l  %450 = bitcast i32 %449 to float\l  %451 = tail call i1 @llvm.amdgcn.class.f32(float %311, i32 504)\l  %452 = select i1 %451, float %450, float 0x7FF8000000000000\l  br i1 %20, label %453, label %460\l|{<s0>T|<s1>F}}"];
	Node0x57a4ab0:s0 -> Node0x57aa440;
	Node0x57a4ab0:s1 -> Node0x57aa490;
	Node0x57aa440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%453:\l453:                                              \l  %454 = fmul float %19, 0x3FE45F3060000000\l  %455 = tail call float @llvm.rint.f32(float %454)\l  %456 = tail call float @llvm.fma.f32(float %455, float 0xBFF921FB40000000,\l... float %19)\l  %457 = tail call float @llvm.fma.f32(float %455, float 0xBE74442D00000000,\l... float %456)\l  %458 = tail call float @llvm.fma.f32(float %455, float 0xBCF8469880000000,\l... float %457)\l  %459 = fptosi float %455 to i32\l  br label %566\l}"];
	Node0x57aa440 -> Node0x57aab10;
	Node0x57aa490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%460:\l460:                                              \l  %461 = bitcast float %19 to i32\l  %462 = lshr i32 %461, 23\l  %463 = and i32 %461, 8388607\l  %464 = or i32 %463, 8388608\l  %465 = zext i32 %464 to i64\l  %466 = mul nuw nsw i64 %465, 4266746795\l  %467 = trunc i64 %466 to i32\l  %468 = lshr i64 %466, 32\l  %469 = mul nuw nsw i64 %465, 1011060801\l  %470 = add nuw nsw i64 %468, %469\l  %471 = trunc i64 %470 to i32\l  %472 = lshr i64 %470, 32\l  %473 = mul nuw nsw i64 %465, 3680671129\l  %474 = add nuw nsw i64 %472, %473\l  %475 = trunc i64 %474 to i32\l  %476 = lshr i64 %474, 32\l  %477 = mul nuw nsw i64 %465, 4113882560\l  %478 = add nuw nsw i64 %476, %477\l  %479 = trunc i64 %478 to i32\l  %480 = lshr i64 %478, 32\l  %481 = mul nuw nsw i64 %465, 4230436817\l  %482 = add nuw nsw i64 %480, %481\l  %483 = trunc i64 %482 to i32\l  %484 = lshr i64 %482, 32\l  %485 = mul nuw nsw i64 %465, 1313084713\l  %486 = add nuw nsw i64 %484, %485\l  %487 = trunc i64 %486 to i32\l  %488 = lshr i64 %486, 32\l  %489 = mul nuw nsw i64 %465, 2734261102\l  %490 = add nuw nsw i64 %488, %489\l  %491 = trunc i64 %490 to i32\l  %492 = lshr i64 %490, 32\l  %493 = trunc i64 %492 to i32\l  %494 = add nsw i32 %462, -120\l  %495 = icmp ugt i32 %494, 63\l  %496 = select i1 %495, i32 %487, i32 %493\l  %497 = select i1 %495, i32 %483, i32 %491\l  %498 = select i1 %495, i32 %479, i32 %487\l  %499 = select i1 %495, i32 %475, i32 %483\l  %500 = select i1 %495, i32 %471, i32 %479\l  %501 = select i1 %495, i32 %467, i32 %475\l  %502 = select i1 %495, i32 -64, i32 0\l  %503 = add nsw i32 %502, %494\l  %504 = icmp ugt i32 %503, 31\l  %505 = select i1 %504, i32 %497, i32 %496\l  %506 = select i1 %504, i32 %498, i32 %497\l  %507 = select i1 %504, i32 %499, i32 %498\l  %508 = select i1 %504, i32 %500, i32 %499\l  %509 = select i1 %504, i32 %501, i32 %500\l  %510 = select i1 %504, i32 -32, i32 0\l  %511 = add nsw i32 %510, %503\l  %512 = icmp ugt i32 %511, 31\l  %513 = select i1 %512, i32 %506, i32 %505\l  %514 = select i1 %512, i32 %507, i32 %506\l  %515 = select i1 %512, i32 %508, i32 %507\l  %516 = select i1 %512, i32 %509, i32 %508\l  %517 = select i1 %512, i32 -32, i32 0\l  %518 = add nsw i32 %517, %511\l  %519 = icmp eq i32 %518, 0\l  %520 = sub nsw i32 32, %518\l  %521 = tail call i32 @llvm.fshr.i32(i32 %513, i32 %514, i32 %520)\l  %522 = tail call i32 @llvm.fshr.i32(i32 %514, i32 %515, i32 %520)\l  %523 = tail call i32 @llvm.fshr.i32(i32 %515, i32 %516, i32 %520)\l  %524 = select i1 %519, i32 %513, i32 %521\l  %525 = select i1 %519, i32 %514, i32 %522\l  %526 = select i1 %519, i32 %515, i32 %523\l  %527 = lshr i32 %524, 29\l  %528 = tail call i32 @llvm.fshl.i32(i32 %524, i32 %525, i32 2)\l  %529 = tail call i32 @llvm.fshl.i32(i32 %525, i32 %526, i32 2)\l  %530 = tail call i32 @llvm.fshl.i32(i32 %526, i32 %516, i32 2)\l  %531 = and i32 %527, 1\l  %532 = sub nsw i32 0, %531\l  %533 = shl i32 %527, 31\l  %534 = xor i32 %528, %532\l  %535 = xor i32 %529, %532\l  %536 = xor i32 %530, %532\l  %537 = tail call i32 @llvm.ctlz.i32(i32 %534, i1 false), !range !11\l  %538 = sub nsw i32 31, %537\l  %539 = tail call i32 @llvm.fshr.i32(i32 %534, i32 %535, i32 %538)\l  %540 = tail call i32 @llvm.fshr.i32(i32 %535, i32 %536, i32 %538)\l  %541 = shl nuw nsw i32 %537, 23\l  %542 = sub nuw nsw i32 1056964608, %541\l  %543 = lshr i32 %539, 9\l  %544 = or i32 %543, %542\l  %545 = or i32 %544, %533\l  %546 = bitcast i32 %545 to float\l  %547 = tail call i32 @llvm.fshl.i32(i32 %539, i32 %540, i32 23)\l  %548 = tail call i32 @llvm.ctlz.i32(i32 %547, i1 false), !range !11\l  %549 = fmul float %546, 0x3FF921FB40000000\l  %550 = add nuw nsw i32 %548, %537\l  %551 = shl nuw nsw i32 %550, 23\l  %552 = sub nuw nsw i32 855638016, %551\l  %553 = sub nsw i32 31, %548\l  %554 = tail call i32 @llvm.fshr.i32(i32 %547, i32 %540, i32 %553)\l  %555 = lshr i32 %554, 9\l  %556 = or i32 %552, %555\l  %557 = or i32 %556, %533\l  %558 = bitcast i32 %557 to float\l  %559 = fneg float %549\l  %560 = tail call float @llvm.fma.f32(float %546, float 0x3FF921FB40000000,\l... float %559)\l  %561 = tail call float @llvm.fma.f32(float %546, float 0x3E74442D00000000,\l... float %560)\l  %562 = tail call float @llvm.fma.f32(float %558, float 0x3FF921FB40000000,\l... float %561)\l  %563 = fadd float %549, %562\l  %564 = lshr i32 %524, 30\l  %565 = add nuw nsw i32 %531, %564\l  br label %566\l}"];
	Node0x57aa490 -> Node0x57aab10;
	Node0x57aab10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%566:\l566:                                              \l  %567 = phi float [ %458, %453 ], [ %563, %460 ]\l  %568 = phi i32 [ %459, %453 ], [ %565, %460 ]\l  %569 = fmul float %567, %567\l  %570 = tail call float @llvm.fmuladd.f32(float %569, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %571 = tail call float @llvm.fmuladd.f32(float %569, float %570, float\l... 0xBFC55553A0000000)\l  %572 = fmul float %569, %571\l  %573 = tail call float @llvm.fmuladd.f32(float %567, float %572, float %567)\l  %574 = tail call float @llvm.fmuladd.f32(float %569, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %575 = tail call float @llvm.fmuladd.f32(float %569, float %574, float\l... 0x3FA5557EE0000000)\l  %576 = tail call float @llvm.fmuladd.f32(float %569, float %575, float\l... 0xBFE0000080000000)\l  %577 = tail call float @llvm.fmuladd.f32(float %569, float %576, float\l... 1.000000e+00)\l  %578 = fneg float %573\l  %579 = and i32 %568, 1\l  %580 = icmp eq i32 %579, 0\l  %581 = select i1 %580, float %577, float %578\l  %582 = bitcast float %581 to i32\l  %583 = shl i32 %568, 30\l  %584 = and i32 %583, -2147483648\l  %585 = xor i32 %584, %582\l  %586 = bitcast i32 %585 to float\l  %587 = select i1 %159, float %586, float 0x7FF8000000000000\l  br i1 %166, label %588, label %595\l|{<s0>T|<s1>F}}"];
	Node0x57aab10:s0 -> Node0x57b11d0;
	Node0x57aab10:s1 -> Node0x57b1220;
	Node0x57b11d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%588:\l588:                                              \l  %589 = fmul float %165, 0x3FE45F3060000000\l  %590 = tail call float @llvm.rint.f32(float %589)\l  %591 = tail call float @llvm.fma.f32(float %590, float 0xBFF921FB40000000,\l... float %165)\l  %592 = tail call float @llvm.fma.f32(float %590, float 0xBE74442D00000000,\l... float %591)\l  %593 = tail call float @llvm.fma.f32(float %590, float 0xBCF8469880000000,\l... float %592)\l  %594 = fptosi float %590 to i32\l  br label %701\l}"];
	Node0x57b11d0 -> Node0x57b18a0;
	Node0x57b1220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%595:\l595:                                              \l  %596 = bitcast float %165 to i32\l  %597 = lshr i32 %596, 23\l  %598 = and i32 %596, 8388607\l  %599 = or i32 %598, 8388608\l  %600 = zext i32 %599 to i64\l  %601 = mul nuw nsw i64 %600, 4266746795\l  %602 = trunc i64 %601 to i32\l  %603 = lshr i64 %601, 32\l  %604 = mul nuw nsw i64 %600, 1011060801\l  %605 = add nuw nsw i64 %603, %604\l  %606 = trunc i64 %605 to i32\l  %607 = lshr i64 %605, 32\l  %608 = mul nuw nsw i64 %600, 3680671129\l  %609 = add nuw nsw i64 %607, %608\l  %610 = trunc i64 %609 to i32\l  %611 = lshr i64 %609, 32\l  %612 = mul nuw nsw i64 %600, 4113882560\l  %613 = add nuw nsw i64 %611, %612\l  %614 = trunc i64 %613 to i32\l  %615 = lshr i64 %613, 32\l  %616 = mul nuw nsw i64 %600, 4230436817\l  %617 = add nuw nsw i64 %615, %616\l  %618 = trunc i64 %617 to i32\l  %619 = lshr i64 %617, 32\l  %620 = mul nuw nsw i64 %600, 1313084713\l  %621 = add nuw nsw i64 %619, %620\l  %622 = trunc i64 %621 to i32\l  %623 = lshr i64 %621, 32\l  %624 = mul nuw nsw i64 %600, 2734261102\l  %625 = add nuw nsw i64 %623, %624\l  %626 = trunc i64 %625 to i32\l  %627 = lshr i64 %625, 32\l  %628 = trunc i64 %627 to i32\l  %629 = add nsw i32 %597, -120\l  %630 = icmp ugt i32 %629, 63\l  %631 = select i1 %630, i32 %622, i32 %628\l  %632 = select i1 %630, i32 %618, i32 %626\l  %633 = select i1 %630, i32 %614, i32 %622\l  %634 = select i1 %630, i32 %610, i32 %618\l  %635 = select i1 %630, i32 %606, i32 %614\l  %636 = select i1 %630, i32 %602, i32 %610\l  %637 = select i1 %630, i32 -64, i32 0\l  %638 = add nsw i32 %637, %629\l  %639 = icmp ugt i32 %638, 31\l  %640 = select i1 %639, i32 %632, i32 %631\l  %641 = select i1 %639, i32 %633, i32 %632\l  %642 = select i1 %639, i32 %634, i32 %633\l  %643 = select i1 %639, i32 %635, i32 %634\l  %644 = select i1 %639, i32 %636, i32 %635\l  %645 = select i1 %639, i32 -32, i32 0\l  %646 = add nsw i32 %645, %638\l  %647 = icmp ugt i32 %646, 31\l  %648 = select i1 %647, i32 %641, i32 %640\l  %649 = select i1 %647, i32 %642, i32 %641\l  %650 = select i1 %647, i32 %643, i32 %642\l  %651 = select i1 %647, i32 %644, i32 %643\l  %652 = select i1 %647, i32 -32, i32 0\l  %653 = add nsw i32 %652, %646\l  %654 = icmp eq i32 %653, 0\l  %655 = sub nsw i32 32, %653\l  %656 = tail call i32 @llvm.fshr.i32(i32 %648, i32 %649, i32 %655)\l  %657 = tail call i32 @llvm.fshr.i32(i32 %649, i32 %650, i32 %655)\l  %658 = tail call i32 @llvm.fshr.i32(i32 %650, i32 %651, i32 %655)\l  %659 = select i1 %654, i32 %648, i32 %656\l  %660 = select i1 %654, i32 %649, i32 %657\l  %661 = select i1 %654, i32 %650, i32 %658\l  %662 = lshr i32 %659, 29\l  %663 = tail call i32 @llvm.fshl.i32(i32 %659, i32 %660, i32 2)\l  %664 = tail call i32 @llvm.fshl.i32(i32 %660, i32 %661, i32 2)\l  %665 = tail call i32 @llvm.fshl.i32(i32 %661, i32 %651, i32 2)\l  %666 = and i32 %662, 1\l  %667 = sub nsw i32 0, %666\l  %668 = shl i32 %662, 31\l  %669 = xor i32 %663, %667\l  %670 = xor i32 %664, %667\l  %671 = xor i32 %665, %667\l  %672 = tail call i32 @llvm.ctlz.i32(i32 %669, i1 false), !range !11\l  %673 = sub nsw i32 31, %672\l  %674 = tail call i32 @llvm.fshr.i32(i32 %669, i32 %670, i32 %673)\l  %675 = tail call i32 @llvm.fshr.i32(i32 %670, i32 %671, i32 %673)\l  %676 = shl nuw nsw i32 %672, 23\l  %677 = sub nuw nsw i32 1056964608, %676\l  %678 = lshr i32 %674, 9\l  %679 = or i32 %678, %677\l  %680 = or i32 %679, %668\l  %681 = bitcast i32 %680 to float\l  %682 = tail call i32 @llvm.fshl.i32(i32 %674, i32 %675, i32 23)\l  %683 = tail call i32 @llvm.ctlz.i32(i32 %682, i1 false), !range !11\l  %684 = fmul float %681, 0x3FF921FB40000000\l  %685 = add nuw nsw i32 %683, %672\l  %686 = shl nuw nsw i32 %685, 23\l  %687 = sub nuw nsw i32 855638016, %686\l  %688 = sub nsw i32 31, %683\l  %689 = tail call i32 @llvm.fshr.i32(i32 %682, i32 %675, i32 %688)\l  %690 = lshr i32 %689, 9\l  %691 = or i32 %687, %690\l  %692 = or i32 %691, %668\l  %693 = bitcast i32 %692 to float\l  %694 = fneg float %684\l  %695 = tail call float @llvm.fma.f32(float %681, float 0x3FF921FB40000000,\l... float %694)\l  %696 = tail call float @llvm.fma.f32(float %681, float 0x3E74442D00000000,\l... float %695)\l  %697 = tail call float @llvm.fma.f32(float %693, float 0x3FF921FB40000000,\l... float %696)\l  %698 = fadd float %684, %697\l  %699 = lshr i32 %659, 30\l  %700 = add nuw nsw i32 %666, %699\l  br label %701\l}"];
	Node0x57b1220 -> Node0x57b18a0;
	Node0x57b18a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%701:\l701:                                              \l  %702 = phi float [ %593, %588 ], [ %698, %595 ]\l  %703 = phi i32 [ %594, %588 ], [ %700, %595 ]\l  %704 = fmul float %702, %702\l  %705 = tail call float @llvm.fmuladd.f32(float %704, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %706 = tail call float @llvm.fmuladd.f32(float %704, float %705, float\l... 0xBFC55553A0000000)\l  %707 = fmul float %704, %706\l  %708 = tail call float @llvm.fmuladd.f32(float %702, float %707, float %702)\l  %709 = tail call float @llvm.fmuladd.f32(float %704, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %710 = tail call float @llvm.fmuladd.f32(float %704, float %709, float\l... 0x3FA5557EE0000000)\l  %711 = tail call float @llvm.fmuladd.f32(float %704, float %710, float\l... 0xBFE0000080000000)\l  %712 = tail call float @llvm.fmuladd.f32(float %704, float %711, float\l... 1.000000e+00)\l  %713 = fneg float %708\l  %714 = and i32 %703, 1\l  %715 = icmp eq i32 %714, 0\l  %716 = select i1 %715, float %712, float %713\l  %717 = bitcast float %716 to i32\l  %718 = shl i32 %703, 30\l  %719 = and i32 %718, -2147483648\l  %720 = xor i32 %719, %717\l  %721 = bitcast i32 %720 to float\l  %722 = select i1 %305, float %721, float 0x7FF8000000000000\l  br i1 %312, label %723, label %730\l|{<s0>T|<s1>F}}"];
	Node0x57b18a0:s0 -> Node0x57b6f50;
	Node0x57b18a0:s1 -> Node0x57b6fa0;
	Node0x57b6f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%723:\l723:                                              \l  %724 = fmul float %311, 0x3FE45F3060000000\l  %725 = tail call float @llvm.rint.f32(float %724)\l  %726 = tail call float @llvm.fma.f32(float %725, float 0xBFF921FB40000000,\l... float %311)\l  %727 = tail call float @llvm.fma.f32(float %725, float 0xBE74442D00000000,\l... float %726)\l  %728 = tail call float @llvm.fma.f32(float %725, float 0xBCF8469880000000,\l... float %727)\l  %729 = fptosi float %725 to i32\l  br label %836\l}"];
	Node0x57b6f50 -> Node0x57b7620;
	Node0x57b6fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%730:\l730:                                              \l  %731 = bitcast float %311 to i32\l  %732 = lshr i32 %731, 23\l  %733 = and i32 %731, 8388607\l  %734 = or i32 %733, 8388608\l  %735 = zext i32 %734 to i64\l  %736 = mul nuw nsw i64 %735, 4266746795\l  %737 = trunc i64 %736 to i32\l  %738 = lshr i64 %736, 32\l  %739 = mul nuw nsw i64 %735, 1011060801\l  %740 = add nuw nsw i64 %738, %739\l  %741 = trunc i64 %740 to i32\l  %742 = lshr i64 %740, 32\l  %743 = mul nuw nsw i64 %735, 3680671129\l  %744 = add nuw nsw i64 %742, %743\l  %745 = trunc i64 %744 to i32\l  %746 = lshr i64 %744, 32\l  %747 = mul nuw nsw i64 %735, 4113882560\l  %748 = add nuw nsw i64 %746, %747\l  %749 = trunc i64 %748 to i32\l  %750 = lshr i64 %748, 32\l  %751 = mul nuw nsw i64 %735, 4230436817\l  %752 = add nuw nsw i64 %750, %751\l  %753 = trunc i64 %752 to i32\l  %754 = lshr i64 %752, 32\l  %755 = mul nuw nsw i64 %735, 1313084713\l  %756 = add nuw nsw i64 %754, %755\l  %757 = trunc i64 %756 to i32\l  %758 = lshr i64 %756, 32\l  %759 = mul nuw nsw i64 %735, 2734261102\l  %760 = add nuw nsw i64 %758, %759\l  %761 = trunc i64 %760 to i32\l  %762 = lshr i64 %760, 32\l  %763 = trunc i64 %762 to i32\l  %764 = add nsw i32 %732, -120\l  %765 = icmp ugt i32 %764, 63\l  %766 = select i1 %765, i32 %757, i32 %763\l  %767 = select i1 %765, i32 %753, i32 %761\l  %768 = select i1 %765, i32 %749, i32 %757\l  %769 = select i1 %765, i32 %745, i32 %753\l  %770 = select i1 %765, i32 %741, i32 %749\l  %771 = select i1 %765, i32 %737, i32 %745\l  %772 = select i1 %765, i32 -64, i32 0\l  %773 = add nsw i32 %772, %764\l  %774 = icmp ugt i32 %773, 31\l  %775 = select i1 %774, i32 %767, i32 %766\l  %776 = select i1 %774, i32 %768, i32 %767\l  %777 = select i1 %774, i32 %769, i32 %768\l  %778 = select i1 %774, i32 %770, i32 %769\l  %779 = select i1 %774, i32 %771, i32 %770\l  %780 = select i1 %774, i32 -32, i32 0\l  %781 = add nsw i32 %780, %773\l  %782 = icmp ugt i32 %781, 31\l  %783 = select i1 %782, i32 %776, i32 %775\l  %784 = select i1 %782, i32 %777, i32 %776\l  %785 = select i1 %782, i32 %778, i32 %777\l  %786 = select i1 %782, i32 %779, i32 %778\l  %787 = select i1 %782, i32 -32, i32 0\l  %788 = add nsw i32 %787, %781\l  %789 = icmp eq i32 %788, 0\l  %790 = sub nsw i32 32, %788\l  %791 = tail call i32 @llvm.fshr.i32(i32 %783, i32 %784, i32 %790)\l  %792 = tail call i32 @llvm.fshr.i32(i32 %784, i32 %785, i32 %790)\l  %793 = tail call i32 @llvm.fshr.i32(i32 %785, i32 %786, i32 %790)\l  %794 = select i1 %789, i32 %783, i32 %791\l  %795 = select i1 %789, i32 %784, i32 %792\l  %796 = select i1 %789, i32 %785, i32 %793\l  %797 = lshr i32 %794, 29\l  %798 = tail call i32 @llvm.fshl.i32(i32 %794, i32 %795, i32 2)\l  %799 = tail call i32 @llvm.fshl.i32(i32 %795, i32 %796, i32 2)\l  %800 = tail call i32 @llvm.fshl.i32(i32 %796, i32 %786, i32 2)\l  %801 = and i32 %797, 1\l  %802 = sub nsw i32 0, %801\l  %803 = shl i32 %797, 31\l  %804 = xor i32 %798, %802\l  %805 = xor i32 %799, %802\l  %806 = xor i32 %800, %802\l  %807 = tail call i32 @llvm.ctlz.i32(i32 %804, i1 false), !range !11\l  %808 = sub nsw i32 31, %807\l  %809 = tail call i32 @llvm.fshr.i32(i32 %804, i32 %805, i32 %808)\l  %810 = tail call i32 @llvm.fshr.i32(i32 %805, i32 %806, i32 %808)\l  %811 = shl nuw nsw i32 %807, 23\l  %812 = sub nuw nsw i32 1056964608, %811\l  %813 = lshr i32 %809, 9\l  %814 = or i32 %813, %812\l  %815 = or i32 %814, %803\l  %816 = bitcast i32 %815 to float\l  %817 = tail call i32 @llvm.fshl.i32(i32 %809, i32 %810, i32 23)\l  %818 = tail call i32 @llvm.ctlz.i32(i32 %817, i1 false), !range !11\l  %819 = fmul float %816, 0x3FF921FB40000000\l  %820 = add nuw nsw i32 %818, %807\l  %821 = shl nuw nsw i32 %820, 23\l  %822 = sub nuw nsw i32 855638016, %821\l  %823 = sub nsw i32 31, %818\l  %824 = tail call i32 @llvm.fshr.i32(i32 %817, i32 %810, i32 %823)\l  %825 = lshr i32 %824, 9\l  %826 = or i32 %822, %825\l  %827 = or i32 %826, %803\l  %828 = bitcast i32 %827 to float\l  %829 = fneg float %819\l  %830 = tail call float @llvm.fma.f32(float %816, float 0x3FF921FB40000000,\l... float %829)\l  %831 = tail call float @llvm.fma.f32(float %816, float 0x3E74442D00000000,\l... float %830)\l  %832 = tail call float @llvm.fma.f32(float %828, float 0x3FF921FB40000000,\l... float %831)\l  %833 = fadd float %819, %832\l  %834 = lshr i32 %794, 30\l  %835 = add nuw nsw i32 %801, %834\l  br label %836\l}"];
	Node0x57b6fa0 -> Node0x57b7620;
	Node0x57b7620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%836:\l836:                                              \l  %837 = phi float [ %728, %723 ], [ %833, %730 ]\l  %838 = phi i32 [ %729, %723 ], [ %835, %730 ]\l  %839 = fmul float %837, %837\l  %840 = tail call float @llvm.fmuladd.f32(float %839, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %841 = tail call float @llvm.fmuladd.f32(float %839, float %840, float\l... 0xBFC55553A0000000)\l  %842 = fmul float %839, %841\l  %843 = tail call float @llvm.fmuladd.f32(float %837, float %842, float %837)\l  %844 = tail call float @llvm.fmuladd.f32(float %839, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %845 = tail call float @llvm.fmuladd.f32(float %839, float %844, float\l... 0x3FA5557EE0000000)\l  %846 = tail call float @llvm.fmuladd.f32(float %839, float %845, float\l... 0xBFE0000080000000)\l  %847 = tail call float @llvm.fmuladd.f32(float %839, float %846, float\l... 1.000000e+00)\l  %848 = fneg float %843\l  %849 = and i32 %838, 1\l  %850 = icmp eq i32 %849, 0\l  %851 = select i1 %850, float %847, float %848\l  %852 = bitcast float %851 to i32\l  %853 = shl i32 %838, 30\l  %854 = and i32 %853, -2147483648\l  %855 = xor i32 %854, %852\l  %856 = bitcast i32 %855 to float\l  %857 = select i1 %451, float %856, float 0x7FF8000000000000\l  %858 = fmul contract float %587, %857\l  %859 = fmul contract float %160, %722\l  %860 = fmul contract float %452, %859\l  %861 = fsub contract float %858, %860\l  %862 = mul nsw i32 %12, 9\l  %863 = sext i32 %862 to i64\l  %864 = getelementptr inbounds float, float addrspace(1)* %1, i64 %863\l  store float %861, float addrspace(1)* %864, align 4, !tbaa !7\l  %865 = fneg contract float %587\l  %866 = fmul contract float %452, %865\l  %867 = fmul contract float %722, %857\l  %868 = fmul contract float %160, %867\l  %869 = fsub contract float %866, %868\l  %870 = add nsw i32 %862, 1\l  %871 = sext i32 %870 to i64\l  %872 = getelementptr inbounds float, float addrspace(1)* %1, i64 %871\l  store float %869, float addrspace(1)* %872, align 4, !tbaa !7\l  %873 = fmul contract float %160, %306\l  %874 = add nsw i32 %862, 2\l  %875 = sext i32 %874 to i64\l  %876 = getelementptr inbounds float, float addrspace(1)* %1, i64 %875\l  store float %873, float addrspace(1)* %876, align 4, !tbaa !7\l  %877 = fmul contract float %160, %857\l  %878 = fmul contract float %587, %722\l  %879 = fmul contract float %452, %878\l  %880 = fadd contract float %879, %877\l  %881 = add nsw i32 %862, 3\l  %882 = sext i32 %881 to i64\l  %883 = getelementptr inbounds float, float addrspace(1)* %1, i64 %882\l  store float %880, float addrspace(1)* %883, align 4, !tbaa !7\l  %884 = fmul contract float %878, %857\l  %885 = fmul contract float %160, %452\l  %886 = fsub contract float %884, %885\l  %887 = add nsw i32 %862, 4\l  %888 = sext i32 %887 to i64\l  %889 = getelementptr inbounds float, float addrspace(1)* %1, i64 %888\l  store float %886, float addrspace(1)* %889, align 4, !tbaa !7\l  %890 = fmul contract float %306, %865\l  %891 = add nsw i32 %862, 5\l  %892 = sext i32 %891 to i64\l  %893 = getelementptr inbounds float, float addrspace(1)* %1, i64 %892\l  store float %890, float addrspace(1)* %893, align 4, !tbaa !7\l  %894 = fmul contract float %306, %452\l  %895 = add nsw i32 %862, 6\l  %896 = sext i32 %895 to i64\l  %897 = getelementptr inbounds float, float addrspace(1)* %1, i64 %896\l  store float %894, float addrspace(1)* %897, align 4, !tbaa !7\l  %898 = fmul contract float %306, %857\l  %899 = add nsw i32 %862, 7\l  %900 = sext i32 %899 to i64\l  %901 = getelementptr inbounds float, float addrspace(1)* %1, i64 %900\l  store float %898, float addrspace(1)* %901, align 4, !tbaa !7\l  %902 = add nsw i32 %862, 8\l  %903 = sext i32 %902 to i64\l  %904 = getelementptr inbounds float, float addrspace(1)* %1, i64 %903\l  store float %722, float addrspace(1)* %904, align 4, !tbaa !7\l  br label %905\l}"];
	Node0x57b7620 -> Node0x57932a0;
	Node0x57932a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%905:\l905:                                              \l  ret void\l}"];
}
