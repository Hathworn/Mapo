digraph "CFG for '_Z7takeLogPfS_i' function" {
	label="CFG for '_Z7takeLogPfS_i' function";

	Node0x584a300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = add i32 %11, %4\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %109\l|{<s0>T|<s1>F}}"];
	Node0x584a300:s0 -> Node0x584c1e0;
	Node0x584a300:s1 -> Node0x584c270;
	Node0x584c1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%14:\l14:                                               \l  %15 = shl i32 %12, 1\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds float, float addrspace(1)* %0, i64 %16\l  %18 = load float, float addrspace(1)* %17, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %19 = fcmp contract ogt float %18, 0.000000e+00\l  %20 = fpext float %18 to double\l  %21 = select contract i1 %19, double %20, double 0x3BC79CA10C924223\l  %22 = tail call double @llvm.amdgcn.frexp.mant.f64(double %21)\l  %23 = fcmp olt double %22, 0x3FE5555555555555\l  %24 = zext i1 %23 to i32\l  %25 = tail call double @llvm.amdgcn.ldexp.f64(double %22, i32 %24)\l  %26 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %21)\l  %27 = sub nsw i32 %26, %24\l  %28 = fadd double %25, -1.000000e+00\l  %29 = fadd double %25, 1.000000e+00\l  %30 = fadd double %29, -1.000000e+00\l  %31 = fsub double %25, %30\l  %32 = tail call double @llvm.amdgcn.rcp.f64(double %29)\l  %33 = fneg double %29\l  %34 = tail call double @llvm.fma.f64(double %33, double %32, double\l... 1.000000e+00)\l  %35 = tail call double @llvm.fma.f64(double %34, double %32, double %32)\l  %36 = tail call double @llvm.fma.f64(double %33, double %35, double\l... 1.000000e+00)\l  %37 = tail call double @llvm.fma.f64(double %36, double %35, double %35)\l  %38 = fmul double %28, %37\l  %39 = fmul double %29, %38\l  %40 = fneg double %39\l  %41 = tail call double @llvm.fma.f64(double %38, double %29, double %40)\l  %42 = tail call double @llvm.fma.f64(double %38, double %31, double %41)\l  %43 = fadd double %39, %42\l  %44 = fsub double %43, %39\l  %45 = fsub double %42, %44\l  %46 = fsub double %28, %43\l  %47 = fsub double %28, %46\l  %48 = fsub double %47, %43\l  %49 = fsub double %48, %45\l  %50 = fadd double %46, %49\l  %51 = fmul double %37, %50\l  %52 = fadd double %38, %51\l  %53 = fsub double %52, %38\l  %54 = fsub double %51, %53\l  %55 = fmul double %52, %52\l  %56 = tail call double @llvm.fma.f64(double %55, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %57 = tail call double @llvm.fma.f64(double %55, double %56, double\l... 0x3FC7474DD7F4DF2E)\l  %58 = tail call double @llvm.fma.f64(double %55, double %57, double\l... 0x3FCC71C016291751)\l  %59 = tail call double @llvm.fma.f64(double %55, double %58, double\l... 0x3FD249249B27ACF1)\l  %60 = tail call double @llvm.fma.f64(double %55, double %59, double\l... 0x3FD99999998EF7B6)\l  %61 = tail call double @llvm.fma.f64(double %55, double %60, double\l... 0x3FE5555555555780)\l  %62 = tail call double @llvm.amdgcn.ldexp.f64(double %52, i32 1)\l  %63 = tail call double @llvm.amdgcn.ldexp.f64(double %54, i32 1)\l  %64 = fmul double %52, %55\l  %65 = fmul double %64, %61\l  %66 = fadd double %62, %65\l  %67 = fsub double %66, %62\l  %68 = fsub double %65, %67\l  %69 = fadd double %63, %68\l  %70 = fadd double %66, %69\l  %71 = fsub double %70, %66\l  %72 = fsub double %69, %71\l  %73 = sitofp i32 %27 to double\l  %74 = fmul double %73, 0x3FE62E42FEFA39EF\l  %75 = fneg double %74\l  %76 = tail call double @llvm.fma.f64(double %73, double 0x3FE62E42FEFA39EF,\l... double %75)\l  %77 = tail call double @llvm.fma.f64(double %73, double 0x3C7ABC9E3B39803F,\l... double %76)\l  %78 = fadd double %74, %77\l  %79 = fsub double %78, %74\l  %80 = fsub double %77, %79\l  %81 = fadd double %78, %70\l  %82 = fsub double %81, %78\l  %83 = fsub double %81, %82\l  %84 = fsub double %78, %83\l  %85 = fsub double %70, %82\l  %86 = fadd double %85, %84\l  %87 = fadd double %80, %72\l  %88 = fsub double %87, %80\l  %89 = fsub double %87, %88\l  %90 = fsub double %80, %89\l  %91 = fsub double %72, %88\l  %92 = fadd double %91, %90\l  %93 = fadd double %87, %86\l  %94 = fadd double %81, %93\l  %95 = fsub double %94, %81\l  %96 = fsub double %93, %95\l  %97 = fadd double %92, %96\l  %98 = fadd double %94, %97\l  %99 = tail call double @llvm.fabs.f64(double %21) #3\l  %100 = fcmp oeq double %99, 0x7FF0000000000000\l  %101 = select i1 %100, double %21, double %98\l  %102 = fcmp olt double %21, 0.000000e+00\l  %103 = select i1 %102, double 0x7FF8000000000000, double %101\l  %104 = fcmp oeq double %21, 0.000000e+00\l  %105 = select i1 %104, double 0xFFF0000000000000, double %103\l  %106 = fptrunc double %105 to float\l  %107 = sext i32 %12 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107\l  store float %106, float addrspace(1)* %108, align 4, !tbaa !7\l  br label %109\l}"];
	Node0x584c1e0 -> Node0x584c270;
	Node0x584c270 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%109:\l109:                                              \l  ret void\l}"];
}
