digraph "CFG for '_Z15gpu_update_signPiPdS_iiS_S_ii' function" {
	label="CFG for '_Z15gpu_update_signPiPdS_iiS_S_ii' function";

	Node0x536e300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !4\l  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !13, !invariant.load\l... !14\l  %18 = zext i16 %17 to i32\l  %19 = udiv i32 %14, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %14, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %7\l  %25 = add i32 %24, %10\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %27 = mul i32 %18, %8\l  %28 = add i32 %27, %26\l  %29 = icmp ult i32 %25, %4\l  %30 = icmp ult i32 %28, %4\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %242\l|{<s0>T|<s1>F}}"];
	Node0x536e300:s0 -> Node0x53715e0;
	Node0x536e300:s1 -> Node0x5371670;
	Node0x53715e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = icmp sgt i32 %3, 0\l  br i1 %33, label %34, label %47\l|{<s0>T|<s1>F}}"];
	Node0x53715e0:s0 -> Node0x5370810;
	Node0x53715e0:s1 -> Node0x53719c0;
	Node0x5370810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%34:\l34:                                               \l  %35 = mul nsw i32 %25, %4\l  %36 = add i32 %35, %28\l  %37 = mul i32 %3, %3\l  %38 = mul i32 %37, %36\l  %39 = and i32 %3, 7\l  %40 = icmp ult i32 %3, 8\l  %41 = and i32 %3, -8\l  %42 = icmp eq i32 %39, 0\l  br label %43\l}"];
	Node0x5370810 -> Node0x5372010;
	Node0x5372010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %34 ], [ %77, %75 ]\l  %45 = phi double [ 0.000000e+00, %34 ], [ %76, %75 ]\l  %46 = mul nsw i32 %44, %3\l  br i1 %40, label %50, label %79\l|{<s0>T|<s1>F}}"];
	Node0x5372010:s0 -> Node0x5372e40;
	Node0x5372010:s1 -> Node0x5372ed0;
	Node0x53719c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%47:\l47:                                               \l  %48 = phi double [ 0.000000e+00, %32 ], [ %76, %75 ]\l  %49 = fcmp contract ogt double %48, 0x3EB0C6F7A0B5ED8D\l  br i1 %49, label %205, label %218\l|{<s0>T|<s1>F}}"];
	Node0x53719c0:s0 -> Node0x5373150;
	Node0x53719c0:s1 -> Node0x53731e0;
	Node0x5372e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%50:\l50:                                               \l  %51 = phi double [ undef, %43 ], [ %201, %79 ]\l  %52 = phi i32 [ 0, %43 ], [ %202, %79 ]\l  %53 = phi double [ %45, %43 ], [ %201, %79 ]\l  br i1 %42, label %75, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5372e40:s0 -> Node0x5372100;
	Node0x5372e40:s1 -> Node0x53739f0;
	Node0x53739f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%54:\l54:                                               \l  %55 = phi i32 [ %72, %54 ], [ %52, %50 ]\l  %56 = phi double [ %71, %54 ], [ %53, %50 ]\l  %57 = phi i32 [ %73, %54 ], [ 0, %50 ]\l  %58 = add i32 %55, %46\l  %59 = add i32 %58, %38\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %60\l  %62 = load i32, i32 addrspace(1)* %61, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %63\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %66 = sitofp i32 %65 to double\l  %67 = sext i32 %58 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %1, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %70 = fmul contract double %69, %66\l  %71 = fadd contract double %56, %70\l  %72 = add nuw nsw i32 %55, 1\l  %73 = add i32 %57, 1\l  %74 = icmp eq i32 %73, %39\l  br i1 %74, label %75, label %54, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x53739f0:s0 -> Node0x5372100;
	Node0x53739f0:s1 -> Node0x53739f0;
	Node0x5372100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%75:\l75:                                               \l  %76 = phi double [ %51, %50 ], [ %71, %54 ]\l  %77 = add nuw nsw i32 %44, 1\l  %78 = icmp eq i32 %77, %3\l  br i1 %78, label %47, label %43, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5372100:s0 -> Node0x53719c0;
	Node0x5372100:s1 -> Node0x5372010;
	Node0x5372ed0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%79:\l79:                                               \l  %80 = phi i32 [ %202, %79 ], [ 0, %43 ]\l  %81 = phi double [ %201, %79 ], [ %45, %43 ]\l  %82 = phi i32 [ %203, %79 ], [ 0, %43 ]\l  %83 = add i32 %80, %46\l  %84 = add i32 %83, %38\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %85\l  %87 = load i32, i32 addrspace(1)* %86, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %88\l  %90 = load i32, i32 addrspace(1)* %89, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %91 = sitofp i32 %90 to double\l  %92 = sext i32 %83 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %1, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %95 = fmul contract double %94, %91\l  %96 = fadd contract double %81, %95\l  %97 = or i32 %80, 1\l  %98 = add i32 %97, %46\l  %99 = add i32 %98, %38\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %100\l  %102 = load i32, i32 addrspace(1)* %101, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %103\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %106 = sitofp i32 %105 to double\l  %107 = sext i32 %98 to i64\l  %108 = getelementptr inbounds double, double addrspace(1)* %1, i64 %107\l  %109 = load double, double addrspace(1)* %108, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %110 = fmul contract double %109, %106\l  %111 = fadd contract double %96, %110\l  %112 = or i32 %80, 2\l  %113 = add i32 %112, %46\l  %114 = add i32 %113, %38\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %115\l  %117 = load i32, i32 addrspace(1)* %116, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %118\l  %120 = load i32, i32 addrspace(1)* %119, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %121 = sitofp i32 %120 to double\l  %122 = sext i32 %113 to i64\l  %123 = getelementptr inbounds double, double addrspace(1)* %1, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %125 = fmul contract double %124, %121\l  %126 = fadd contract double %111, %125\l  %127 = or i32 %80, 3\l  %128 = add i32 %127, %46\l  %129 = add i32 %128, %38\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %130\l  %132 = load i32, i32 addrspace(1)* %131, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %133\l  %135 = load i32, i32 addrspace(1)* %134, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %136 = sitofp i32 %135 to double\l  %137 = sext i32 %128 to i64\l  %138 = getelementptr inbounds double, double addrspace(1)* %1, i64 %137\l  %139 = load double, double addrspace(1)* %138, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %140 = fmul contract double %139, %136\l  %141 = fadd contract double %126, %140\l  %142 = or i32 %80, 4\l  %143 = add i32 %142, %46\l  %144 = add i32 %143, %38\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %145\l  %147 = load i32, i32 addrspace(1)* %146, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %148\l  %150 = load i32, i32 addrspace(1)* %149, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %151 = sitofp i32 %150 to double\l  %152 = sext i32 %143 to i64\l  %153 = getelementptr inbounds double, double addrspace(1)* %1, i64 %152\l  %154 = load double, double addrspace(1)* %153, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %155 = fmul contract double %154, %151\l  %156 = fadd contract double %141, %155\l  %157 = or i32 %80, 5\l  %158 = add i32 %157, %46\l  %159 = add i32 %158, %38\l  %160 = sext i32 %159 to i64\l  %161 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %160\l  %162 = load i32, i32 addrspace(1)* %161, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %163\l  %165 = load i32, i32 addrspace(1)* %164, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %166 = sitofp i32 %165 to double\l  %167 = sext i32 %158 to i64\l  %168 = getelementptr inbounds double, double addrspace(1)* %1, i64 %167\l  %169 = load double, double addrspace(1)* %168, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %170 = fmul contract double %169, %166\l  %171 = fadd contract double %156, %170\l  %172 = or i32 %80, 6\l  %173 = add i32 %172, %46\l  %174 = add i32 %173, %38\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %175\l  %177 = load i32, i32 addrspace(1)* %176, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %178\l  %180 = load i32, i32 addrspace(1)* %179, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %181 = sitofp i32 %180 to double\l  %182 = sext i32 %173 to i64\l  %183 = getelementptr inbounds double, double addrspace(1)* %1, i64 %182\l  %184 = load double, double addrspace(1)* %183, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %185 = fmul contract double %184, %181\l  %186 = fadd contract double %171, %185\l  %187 = or i32 %80, 7\l  %188 = add i32 %187, %46\l  %189 = add i32 %188, %38\l  %190 = sext i32 %189 to i64\l  %191 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %190\l  %192 = load i32, i32 addrspace(1)* %191, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %193\l  %195 = load i32, i32 addrspace(1)* %194, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %196 = sitofp i32 %195 to double\l  %197 = sext i32 %188 to i64\l  %198 = getelementptr inbounds double, double addrspace(1)* %1, i64 %197\l  %199 = load double, double addrspace(1)* %198, align 8, !tbaa !20,\l... !amdgpu.noclobber !14\l  %200 = fmul contract double %199, %196\l  %201 = fadd contract double %186, %200\l  %202 = add nuw nsw i32 %80, 8\l  %203 = add i32 %82, 8\l  %204 = icmp eq i32 %203, %41\l  br i1 %204, label %50, label %79, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5372ed0:s0 -> Node0x5372e40;
	Node0x5372ed0:s1 -> Node0x5372ed0;
	Node0x5373150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%205:\l205:                                              \l  %206 = mul nsw i32 %25, %4\l  %207 = add i32 %206, %28\l  %208 = mul i32 %3, %3\l  %209 = mul i32 %208, %207\l  %210 = add nsw i32 %209, 12\l  %211 = sext i32 %210 to i64\l  %212 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %211\l  %213 = load i32, i32 addrspace(1)* %212, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %214 = sext i32 %213 to i64\l  %215 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %214\l  %216 = load i32, i32 addrspace(1)* %215, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %217 = icmp ne i32 %216, 1\l  br label %233\l}"];
	Node0x5373150 -> Node0x537b670;
	Node0x53731e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%218:\l218:                                              \l  %219 = fcmp contract olt double %48, 0xBEB0C6F7A0B5ED8D\l  %220 = mul nsw i32 %25, %4\l  %221 = add i32 %220, %28\l  %222 = mul i32 %3, %3\l  %223 = mul i32 %222, %221\l  %224 = add nsw i32 %223, 12\l  %225 = sext i32 %224 to i64\l  %226 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %225\l  %227 = load i32, i32 addrspace(1)* %226, align 4, !tbaa !16\l  %228 = sext i32 %227 to i64\l  %229 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %228\l  %230 = load i32, i32 addrspace(1)* %229, align 4, !tbaa !16\l  br i1 %219, label %231, label %233\l|{<s0>T|<s1>F}}"];
	Node0x53731e0:s0 -> Node0x537bdd0;
	Node0x53731e0:s1 -> Node0x537b670;
	Node0x537bdd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%231:\l231:                                              \l  %232 = icmp ne i32 %230, -1\l  br label %233\l}"];
	Node0x537bdd0 -> Node0x537b670;
	Node0x537b670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%233:\l233:                                              \l  %234 = phi i32 [ %221, %231 ], [ %207, %205 ], [ %221, %218 ]\l  %235 = phi i1 [ %232, %231 ], [ %217, %205 ], [ false, %218 ]\l  %236 = phi i32 [ -1, %231 ], [ 1, %205 ], [ %230, %218 ]\l  %237 = zext i1 %235 to i32\l  %238 = load i32, i32 addrspace(1)* %6, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %239 = add nsw i32 %238, %237\l  store i32 %239, i32 addrspace(1)* %6, align 4, !tbaa !16\l  %240 = sext i32 %234 to i64\l  %241 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %240\l  store i32 %236, i32 addrspace(1)* %241, align 4, !tbaa !16\l  br label %242\l}"];
	Node0x537b670 -> Node0x5371670;
	Node0x5371670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%242:\l242:                                              \l  ret void\l}"];
}
