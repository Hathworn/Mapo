digraph "CFG for '_Z15gpu_update_signPiPdS_iiS_S_ii' function" {
	label="CFG for '_Z15gpu_update_signPiPdS_iiS_S_ii' function";

	Node0x48b0670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%9:\l  %10 = icmp sgt i32 %7, 0\l  br i1 %10, label %11, label %42\l|{<s0>T|<s1>F}}"];
	Node0x48b0670:s0 -> Node0x48b0410;
	Node0x48b0670:s1 -> Node0x48b0460;
	Node0x48b0410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6c8ff170",label="{%11:\l11:                                               \l  %12 = icmp sgt i32 %8, 0\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x()\l  %20 = icmp sgt i32 %3, 0\l  %21 = mul i32 %3, %3\l  %22 = and i32 %3, 7\l  %23 = icmp ult i32 %3, 8\l  %24 = and i32 %3, -8\l  %25 = icmp eq i32 %22, 0\l  br label %26\l}"];
	Node0x48b0410 -> Node0x48b2820;
	Node0x48b2820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%26:\l26:                                               \l  %27 = phi i32 [ 0, %11 ], [ %47, %46 ]\l  %28 = phi i32 [ 0, %11 ], [ %48, %46 ]\l  br i1 %12, label %29, label %46\l|{<s0>T|<s1>F}}"];
	Node0x48b2820:s0 -> Node0x48b2bb0;
	Node0x48b2820:s1 -> Node0x48b2950;
	Node0x48b2bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%29:\l29:                                               \l  %30 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !4\l  %31 = load i16, i16 addrspace(4)* %18, align 4, !range !13, !invariant.load\l... !14\l  %32 = zext i16 %31 to i32\l  %33 = udiv i32 %30, %32\l  %34 = mul i32 %33, %32\l  %35 = icmp ugt i32 %30, %34\l  %36 = zext i1 %35 to i32\l  %37 = add i32 %33, %36\l  %38 = mul i32 %37, %28\l  %39 = add i32 %38, %13\l  %40 = icmp slt i32 %39, %4\l  %41 = mul nsw i32 %39, %4\l  br label %50\l}"];
	Node0x48b2bb0 -> Node0x48b42b0;
	Node0x48b0460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%42:\l42:                                               \l  %43 = phi i32 [ 0, %9 ], [ %47, %46 ]\l  %44 = load i32, i32 addrspace(1)* %6, align 4, !tbaa !15\l  %45 = add nsw i32 %44, %43\l  store i32 %45, i32 addrspace(1)* %6, align 4, !tbaa !15\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
	Node0x48b2950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%46:\l46:                                               \l  %47 = phi i32 [ %27, %26 ], [ %258, %257 ]\l  %48 = add nuw nsw i32 %28, 1\l  %49 = icmp eq i32 %48, %7\l  br i1 %49, label %42, label %26, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x48b2950:s0 -> Node0x48b0460;
	Node0x48b2950:s1 -> Node0x48b2820;
	Node0x48b42b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%50:\l50:                                               \l  %51 = phi i32 [ %27, %29 ], [ %258, %257 ]\l  %52 = phi i32 [ 0, %29 ], [ %259, %257 ]\l  %53 = mul i32 %52, %32\l  %54 = add i32 %53, %19\l  %55 = icmp slt i32 %54, %4\l  %56 = select i1 %40, i1 %55, i1 false\l  br i1 %56, label %57, label %257\l|{<s0>T|<s1>F}}"];
	Node0x48b42b0:s0 -> Node0x48b57c0;
	Node0x48b42b0:s1 -> Node0x48b5000;
	Node0x48b57c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%57:\l57:                                               \l  br i1 %20, label %58, label %65\l|{<s0>T|<s1>F}}"];
	Node0x48b57c0:s0 -> Node0x48b5900;
	Node0x48b57c0:s1 -> Node0x48b5950;
	Node0x48b5900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%58:\l58:                                               \l  %59 = add i32 %41, %54\l  %60 = mul i32 %21, %59\l  br label %61\l}"];
	Node0x48b5900 -> Node0x48b5bb0;
	Node0x48b5bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%61:\l61:                                               \l  %62 = phi i32 [ 0, %58 ], [ %95, %93 ]\l  %63 = phi double [ 0.000000e+00, %58 ], [ %94, %93 ]\l  %64 = mul nsw i32 %62, %3\l  br i1 %23, label %68, label %97\l|{<s0>T|<s1>F}}"];
	Node0x48b5bb0:s0 -> Node0x48b3cb0;
	Node0x48b5bb0:s1 -> Node0x48b3d40;
	Node0x48b5950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%65:\l65:                                               \l  %66 = phi double [ 0.000000e+00, %57 ], [ %94, %93 ]\l  %67 = fcmp contract ogt double %66, 0x3EB0C6F7A0B5ED8D\l  br i1 %67, label %223, label %236\l|{<s0>T|<s1>F}}"];
	Node0x48b5950:s0 -> Node0x48b6f30;
	Node0x48b5950:s1 -> Node0x48b6f80;
	Node0x48b3cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%68:\l68:                                               \l  %69 = phi double [ undef, %61 ], [ %219, %97 ]\l  %70 = phi i32 [ 0, %61 ], [ %220, %97 ]\l  %71 = phi double [ %63, %61 ], [ %219, %97 ]\l  br i1 %25, label %93, label %72\l|{<s0>T|<s1>F}}"];
	Node0x48b3cb0:s0 -> Node0x48b5ca0;
	Node0x48b3cb0:s1 -> Node0x48b77c0;
	Node0x48b77c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%72:\l72:                                               \l  %73 = phi i32 [ %90, %72 ], [ %70, %68 ]\l  %74 = phi double [ %89, %72 ], [ %71, %68 ]\l  %75 = phi i32 [ %91, %72 ], [ 0, %68 ]\l  %76 = add i32 %73, %64\l  %77 = add i32 %76, %60\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %78\l  %80 = load i32, i32 addrspace(1)* %79, align 4, !tbaa !15\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %81\l  %83 = load i32, i32 addrspace(1)* %82, align 4, !tbaa !15\l  %84 = sitofp i32 %83 to double\l  %85 = sext i32 %76 to i64\l  %86 = getelementptr inbounds double, double addrspace(1)* %1, i64 %85\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %88 = fmul contract double %87, %84\l  %89 = fadd contract double %74, %88\l  %90 = add nuw nsw i32 %73, 1\l  %91 = add i32 %75, 1\l  %92 = icmp eq i32 %91, %22\l  br i1 %92, label %93, label %72, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x48b77c0:s0 -> Node0x48b5ca0;
	Node0x48b77c0:s1 -> Node0x48b77c0;
	Node0x48b5ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%93:\l93:                                               \l  %94 = phi double [ %69, %68 ], [ %89, %72 ]\l  %95 = add nuw nsw i32 %62, 1\l  %96 = icmp eq i32 %95, %3\l  br i1 %96, label %65, label %61, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x48b5ca0:s0 -> Node0x48b5950;
	Node0x48b5ca0:s1 -> Node0x48b5bb0;
	Node0x48b3d40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%97:\l97:                                               \l  %98 = phi i32 [ %220, %97 ], [ 0, %61 ]\l  %99 = phi double [ %219, %97 ], [ %63, %61 ]\l  %100 = phi i32 [ %221, %97 ], [ 0, %61 ]\l  %101 = add i32 %98, %64\l  %102 = add i32 %101, %60\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %103\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !tbaa !15\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %106\l  %108 = load i32, i32 addrspace(1)* %107, align 4, !tbaa !15\l  %109 = sitofp i32 %108 to double\l  %110 = sext i32 %101 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %1, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %113 = fmul contract double %112, %109\l  %114 = fadd contract double %99, %113\l  %115 = or i32 %98, 1\l  %116 = add i32 %115, %64\l  %117 = add i32 %116, %60\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %118\l  %120 = load i32, i32 addrspace(1)* %119, align 4, !tbaa !15\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %121\l  %123 = load i32, i32 addrspace(1)* %122, align 4, !tbaa !15\l  %124 = sitofp i32 %123 to double\l  %125 = sext i32 %116 to i64\l  %126 = getelementptr inbounds double, double addrspace(1)* %1, i64 %125\l  %127 = load double, double addrspace(1)* %126, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %128 = fmul contract double %127, %124\l  %129 = fadd contract double %114, %128\l  %130 = or i32 %98, 2\l  %131 = add i32 %130, %64\l  %132 = add i32 %131, %60\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %133\l  %135 = load i32, i32 addrspace(1)* %134, align 4, !tbaa !15\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %136\l  %138 = load i32, i32 addrspace(1)* %137, align 4, !tbaa !15\l  %139 = sitofp i32 %138 to double\l  %140 = sext i32 %131 to i64\l  %141 = getelementptr inbounds double, double addrspace(1)* %1, i64 %140\l  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %143 = fmul contract double %142, %139\l  %144 = fadd contract double %129, %143\l  %145 = or i32 %98, 3\l  %146 = add i32 %145, %64\l  %147 = add i32 %146, %60\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %148\l  %150 = load i32, i32 addrspace(1)* %149, align 4, !tbaa !15\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %151\l  %153 = load i32, i32 addrspace(1)* %152, align 4, !tbaa !15\l  %154 = sitofp i32 %153 to double\l  %155 = sext i32 %146 to i64\l  %156 = getelementptr inbounds double, double addrspace(1)* %1, i64 %155\l  %157 = load double, double addrspace(1)* %156, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %158 = fmul contract double %157, %154\l  %159 = fadd contract double %144, %158\l  %160 = or i32 %98, 4\l  %161 = add i32 %160, %64\l  %162 = add i32 %161, %60\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %163\l  %165 = load i32, i32 addrspace(1)* %164, align 4, !tbaa !15\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %166\l  %168 = load i32, i32 addrspace(1)* %167, align 4, !tbaa !15\l  %169 = sitofp i32 %168 to double\l  %170 = sext i32 %161 to i64\l  %171 = getelementptr inbounds double, double addrspace(1)* %1, i64 %170\l  %172 = load double, double addrspace(1)* %171, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %173 = fmul contract double %172, %169\l  %174 = fadd contract double %159, %173\l  %175 = or i32 %98, 5\l  %176 = add i32 %175, %64\l  %177 = add i32 %176, %60\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %178\l  %180 = load i32, i32 addrspace(1)* %179, align 4, !tbaa !15\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %181\l  %183 = load i32, i32 addrspace(1)* %182, align 4, !tbaa !15\l  %184 = sitofp i32 %183 to double\l  %185 = sext i32 %176 to i64\l  %186 = getelementptr inbounds double, double addrspace(1)* %1, i64 %185\l  %187 = load double, double addrspace(1)* %186, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %188 = fmul contract double %187, %184\l  %189 = fadd contract double %174, %188\l  %190 = or i32 %98, 6\l  %191 = add i32 %190, %64\l  %192 = add i32 %191, %60\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %193\l  %195 = load i32, i32 addrspace(1)* %194, align 4, !tbaa !15\l  %196 = sext i32 %195 to i64\l  %197 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %196\l  %198 = load i32, i32 addrspace(1)* %197, align 4, !tbaa !15\l  %199 = sitofp i32 %198 to double\l  %200 = sext i32 %191 to i64\l  %201 = getelementptr inbounds double, double addrspace(1)* %1, i64 %200\l  %202 = load double, double addrspace(1)* %201, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %203 = fmul contract double %202, %199\l  %204 = fadd contract double %189, %203\l  %205 = or i32 %98, 7\l  %206 = add i32 %205, %64\l  %207 = add i32 %206, %60\l  %208 = sext i32 %207 to i64\l  %209 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %208\l  %210 = load i32, i32 addrspace(1)* %209, align 4, !tbaa !15\l  %211 = sext i32 %210 to i64\l  %212 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %211\l  %213 = load i32, i32 addrspace(1)* %212, align 4, !tbaa !15\l  %214 = sitofp i32 %213 to double\l  %215 = sext i32 %206 to i64\l  %216 = getelementptr inbounds double, double addrspace(1)* %1, i64 %215\l  %217 = load double, double addrspace(1)* %216, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %218 = fmul contract double %217, %214\l  %219 = fadd contract double %204, %218\l  %220 = add nuw nsw i32 %98, 8\l  %221 = add i32 %100, 8\l  %222 = icmp eq i32 %221, %24\l  br i1 %222, label %68, label %97, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x48b3d40:s0 -> Node0x48b3cb0;
	Node0x48b3d40:s1 -> Node0x48b3d40;
	Node0x48b6f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%223:\l223:                                              \l  %224 = add i32 %41, %54\l  %225 = mul i32 %21, %224\l  %226 = add nsw i32 %225, 12\l  %227 = sext i32 %226 to i64\l  %228 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %227\l  %229 = load i32, i32 addrspace(1)* %228, align 4, !tbaa !15\l  %230 = sext i32 %229 to i64\l  %231 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %230\l  %232 = load i32, i32 addrspace(1)* %231, align 4, !tbaa !15\l  %233 = icmp ne i32 %232, 1\l  %234 = zext i1 %233 to i32\l  %235 = add nsw i32 %51, %234\l  br label %251\l}"];
	Node0x48b6f30 -> Node0x48b6da0;
	Node0x48b6f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%236:\l236:                                              \l  %237 = fcmp contract olt double %66, 0xBEB0C6F7A0B5ED8D\l  %238 = add i32 %41, %54\l  %239 = mul i32 %21, %238\l  %240 = add nsw i32 %239, 12\l  %241 = sext i32 %240 to i64\l  %242 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %241\l  %243 = load i32, i32 addrspace(1)* %242, align 4, !tbaa !15\l  %244 = sext i32 %243 to i64\l  %245 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %244\l  %246 = load i32, i32 addrspace(1)* %245, align 4, !tbaa !15\l  br i1 %237, label %247, label %251\l|{<s0>T|<s1>F}}"];
	Node0x48b6f80:s0 -> Node0x48bec10;
	Node0x48b6f80:s1 -> Node0x48b6da0;
	Node0x48bec10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%247:\l247:                                              \l  %248 = icmp ne i32 %246, -1\l  %249 = zext i1 %248 to i32\l  %250 = add nsw i32 %51, %249\l  br label %251\l}"];
	Node0x48bec10 -> Node0x48b6da0;
	Node0x48b6da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%251:\l251:                                              \l  %252 = phi i32 [ %238, %247 ], [ %224, %223 ], [ %238, %236 ]\l  %253 = phi i32 [ -1, %247 ], [ 1, %223 ], [ %246, %236 ]\l  %254 = phi i32 [ %250, %247 ], [ %235, %223 ], [ %51, %236 ]\l  %255 = sext i32 %252 to i64\l  %256 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %255\l  store i32 %253, i32 addrspace(1)* %256, align 4, !tbaa !15\l  br label %257\l}"];
	Node0x48b6da0 -> Node0x48b5000;
	Node0x48b5000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%257:\l257:                                              \l  %258 = phi i32 [ %254, %251 ], [ %51, %50 ]\l  %259 = add nuw nsw i32 %52, 1\l  %260 = icmp eq i32 %259, %8\l  br i1 %260, label %46, label %50, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x48b5000:s0 -> Node0x48b2950;
	Node0x48b5000:s1 -> Node0x48b42b0;
}
