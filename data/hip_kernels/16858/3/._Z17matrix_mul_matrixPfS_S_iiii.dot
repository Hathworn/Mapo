digraph "CFG for '_Z17matrix_mul_matrixPfS_S_iiii' function" {
	label="CFG for '_Z17matrix_mul_matrixPfS_S_iiii' function";

	Node0x4f61d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 2, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %16, %5\l  %26 = icmp slt i32 %24, %6\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %167\l|{<s0>T|<s1>F}}"];
	Node0x4f61d60:s0 -> Node0x4f657b0;
	Node0x4f61d60:s1 -> Node0x4f65840;
	Node0x4f657b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%28:\l28:                                               \l  %29 = icmp sgt i32 %3, 0\l  br i1 %29, label %30, label %59\l|{<s0>T|<s1>F}}"];
	Node0x4f657b0:s0 -> Node0x4f65a40;
	Node0x4f657b0:s1 -> Node0x4f65a90;
	Node0x4f65a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %16, %3\l  %32 = and i32 %3, 7\l  %33 = icmp ult i32 %3, 8\l  br i1 %33, label %36, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4f65a40:s0 -> Node0x4f63c40;
	Node0x4f65a40:s1 -> Node0x4f65f30;
	Node0x4f65f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%34:\l34:                                               \l  %35 = and i32 %3, -8\l  br label %65\l}"];
	Node0x4f65f30 -> Node0x4f66130;
	Node0x4f63c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%36:\l36:                                               \l  %37 = phi float [ undef, %30 ], [ %163, %65 ]\l  %38 = phi i32 [ 0, %30 ], [ %164, %65 ]\l  %39 = phi float [ 0.000000e+00, %30 ], [ %163, %65 ]\l  %40 = icmp eq i32 %32, 0\l  br i1 %40, label %59, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4f63c40:s0 -> Node0x4f65a90;
	Node0x4f63c40:s1 -> Node0x4f673a0;
	Node0x4f673a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%41:\l41:                                               \l  %42 = phi i32 [ %56, %41 ], [ %38, %36 ]\l  %43 = phi float [ %55, %41 ], [ %39, %36 ]\l  %44 = phi i32 [ %57, %41 ], [ 0, %36 ]\l  %45 = add nsw i32 %42, %31\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = mul nsw i32 %42, %4\l  %50 = add nsw i32 %49, %24\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = fmul contract float %48, %53\l  %55 = fadd contract float %43, %54\l  %56 = add nuw nsw i32 %42, 1\l  %57 = add i32 %44, 1\l  %58 = icmp eq i32 %57, %32\l  br i1 %58, label %59, label %41, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4f673a0:s0 -> Node0x4f65a90;
	Node0x4f673a0:s1 -> Node0x4f673a0;
	Node0x4f65a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%59:\l59:                                               \l  %60 = phi float [ 0.000000e+00, %28 ], [ %37, %36 ], [ %55, %41 ]\l  %61 = mul nsw i32 %16, %4\l  %62 = add nsw i32 %61, %24\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %2, i64 %63\l  store float %60, float addrspace(1)* %64, align 4, !tbaa !7\l  br label %167\l}"];
	Node0x4f65a90 -> Node0x4f65840;
	Node0x4f66130 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%65:\l65:                                               \l  %66 = phi i32 [ 0, %34 ], [ %164, %65 ]\l  %67 = phi float [ 0.000000e+00, %34 ], [ %163, %65 ]\l  %68 = phi i32 [ 0, %34 ], [ %165, %65 ]\l  %69 = add nsw i32 %66, %31\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = mul nsw i32 %66, %4\l  %74 = add nsw i32 %73, %24\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fmul contract float %72, %77\l  %79 = fadd contract float %67, %78\l  %80 = or i32 %66, 1\l  %81 = add nsw i32 %80, %31\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = mul nsw i32 %80, %4\l  %86 = add nsw i32 %85, %24\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = fmul contract float %84, %89\l  %91 = fadd contract float %79, %90\l  %92 = or i32 %66, 2\l  %93 = add nsw i32 %92, %31\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = mul nsw i32 %92, %4\l  %98 = add nsw i32 %97, %24\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fmul contract float %96, %101\l  %103 = fadd contract float %91, %102\l  %104 = or i32 %66, 3\l  %105 = add nsw i32 %104, %31\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = mul nsw i32 %104, %4\l  %110 = add nsw i32 %109, %24\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %114 = fmul contract float %108, %113\l  %115 = fadd contract float %103, %114\l  %116 = or i32 %66, 4\l  %117 = add nsw i32 %116, %31\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %121 = mul nsw i32 %116, %4\l  %122 = add nsw i32 %121, %24\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %120, %125\l  %127 = fadd contract float %115, %126\l  %128 = or i32 %66, 5\l  %129 = add nsw i32 %128, %31\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = mul nsw i32 %128, %4\l  %134 = add nsw i32 %133, %24\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = fmul contract float %132, %137\l  %139 = fadd contract float %127, %138\l  %140 = or i32 %66, 6\l  %141 = add nsw i32 %140, %31\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = mul nsw i32 %140, %4\l  %146 = add nsw i32 %145, %24\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %150 = fmul contract float %144, %149\l  %151 = fadd contract float %139, %150\l  %152 = or i32 %66, 7\l  %153 = add nsw i32 %152, %31\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %157 = mul nsw i32 %152, %4\l  %158 = add nsw i32 %157, %24\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %162 = fmul contract float %156, %161\l  %163 = fadd contract float %151, %162\l  %164 = add nuw nsw i32 %66, 8\l  %165 = add i32 %68, 8\l  %166 = icmp eq i32 %165, %35\l  br i1 %166, label %36, label %65, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f66130:s0 -> Node0x4f63c40;
	Node0x4f66130:s1 -> Node0x4f66130;
	Node0x4f65840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%167:\l167:                                              \l  ret void\l}"];
}
