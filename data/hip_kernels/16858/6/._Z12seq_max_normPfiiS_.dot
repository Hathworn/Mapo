digraph "CFG for '_Z12seq_max_normPfiiS_' function" {
	label="CFG for '_Z12seq_max_normPfiiS_' function";

	Node0x4940090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%4:\l  store float 0.000000e+00, float addrspace(1)* %3, align 4, !tbaa !4\l  %5 = icmp sgt i32 %1, 0\l  br i1 %5, label %6, label %17\l|{<s0>T|<s1>F}}"];
	Node0x4940090:s0 -> Node0x4941dc0;
	Node0x4940090:s1 -> Node0x4941e50;
	Node0x4941dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%6:\l6:                                                \l  %7 = icmp sgt i32 %2, 0\l  %8 = and i32 %2, 7\l  %9 = icmp ult i32 %2, 8\l  %10 = and i32 %2, -8\l  %11 = icmp eq i32 %8, 0\l  br label %12\l}"];
	Node0x4941dc0 -> Node0x49400e0;
	Node0x49400e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%12:\l12:                                               \l  %13 = phi float [ 0.000000e+00, %6 ], [ %36, %35 ]\l  %14 = phi i32 [ 0, %6 ], [ %37, %35 ]\l  br i1 %7, label %15, label %35\l|{<s0>T|<s1>F}}"];
	Node0x49400e0:s0 -> Node0x4942680;
	Node0x49400e0:s1 -> Node0x4942420;
	Node0x4942680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%15:\l15:                                               \l  %16 = mul nsw i32 %14, %2\l  br i1 %9, label %18, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4942680:s0 -> Node0x49420e0;
	Node0x4942680:s1 -> Node0x4942960;
	Node0x4941e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%17:\l17:                                               \l  ret void\l}"];
	Node0x49420e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%18:\l18:                                               \l  %19 = phi float [ undef, %15 ], [ %97, %39 ]\l  %20 = phi float [ %13, %15 ], [ %97, %39 ]\l  %21 = phi i32 [ 0, %15 ], [ %98, %39 ]\l  br i1 %11, label %35, label %22\l|{<s0>T|<s1>F}}"];
	Node0x49420e0:s0 -> Node0x4942420;
	Node0x49420e0:s1 -> Node0x4943140;
	Node0x4943140 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = phi float [ %31, %22 ], [ %20, %18 ]\l  %24 = phi i32 [ %32, %22 ], [ %21, %18 ]\l  %25 = phi i32 [ %33, %22 ], [ 0, %18 ]\l  %26 = add nsw i32 %24, %16\l  %27 = sext i32 %26 to i64\l  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4\l  %30 = tail call float @llvm.fabs.f32(float %29)\l  %31 = tail call float @llvm.maxnum.f32(float %30, float %23)\l  store float %31, float addrspace(1)* %3, align 4, !tbaa !4\l  %32 = add nuw nsw i32 %24, 1\l  %33 = add i32 %25, 1\l  %34 = icmp eq i32 %33, %8\l  br i1 %34, label %35, label %22, !llvm.loop !8\l|{<s0>T|<s1>F}}"];
	Node0x4943140:s0 -> Node0x4942420;
	Node0x4943140:s1 -> Node0x4943140;
	Node0x4942420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%35:\l35:                                               \l  %36 = phi float [ %13, %12 ], [ %19, %18 ], [ %31, %22 ]\l  %37 = add nuw nsw i32 %14, 1\l  %38 = icmp eq i32 %37, %1\l  br i1 %38, label %17, label %12, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4942420:s0 -> Node0x4941e50;
	Node0x4942420:s1 -> Node0x49400e0;
	Node0x4942960 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%39:\l39:                                               \l  %40 = phi float [ %97, %39 ], [ %13, %15 ]\l  %41 = phi i32 [ %98, %39 ], [ 0, %15 ]\l  %42 = phi i32 [ %99, %39 ], [ 0, %15 ]\l  %43 = add nsw i32 %41, %16\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !4\l  %47 = tail call float @llvm.fabs.f32(float %46)\l  %48 = tail call float @llvm.maxnum.f32(float %47, float %40)\l  store float %48, float addrspace(1)* %3, align 4, !tbaa !4\l  %49 = or i32 %41, 1\l  %50 = add nsw i32 %49, %16\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !4\l  %54 = tail call float @llvm.fabs.f32(float %53)\l  %55 = tail call float @llvm.maxnum.f32(float %54, float %48)\l  store float %55, float addrspace(1)* %3, align 4, !tbaa !4\l  %56 = or i32 %41, 2\l  %57 = add nsw i32 %56, %16\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !4\l  %61 = tail call float @llvm.fabs.f32(float %60)\l  %62 = tail call float @llvm.maxnum.f32(float %61, float %55)\l  store float %62, float addrspace(1)* %3, align 4, !tbaa !4\l  %63 = or i32 %41, 3\l  %64 = add nsw i32 %63, %16\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !4\l  %68 = tail call float @llvm.fabs.f32(float %67)\l  %69 = tail call float @llvm.maxnum.f32(float %68, float %62)\l  store float %69, float addrspace(1)* %3, align 4, !tbaa !4\l  %70 = or i32 %41, 4\l  %71 = add nsw i32 %70, %16\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4\l  %75 = tail call float @llvm.fabs.f32(float %74)\l  %76 = tail call float @llvm.maxnum.f32(float %75, float %69)\l  store float %76, float addrspace(1)* %3, align 4, !tbaa !4\l  %77 = or i32 %41, 5\l  %78 = add nsw i32 %77, %16\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !4\l  %82 = tail call float @llvm.fabs.f32(float %81)\l  %83 = tail call float @llvm.maxnum.f32(float %82, float %76)\l  store float %83, float addrspace(1)* %3, align 4, !tbaa !4\l  %84 = or i32 %41, 6\l  %85 = add nsw i32 %84, %16\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !4\l  %89 = tail call float @llvm.fabs.f32(float %88)\l  %90 = tail call float @llvm.maxnum.f32(float %89, float %83)\l  store float %90, float addrspace(1)* %3, align 4, !tbaa !4\l  %91 = or i32 %41, 7\l  %92 = add nsw i32 %91, %16\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !4\l  %96 = tail call float @llvm.fabs.f32(float %95)\l  %97 = tail call float @llvm.maxnum.f32(float %96, float %90)\l  store float %97, float addrspace(1)* %3, align 4, !tbaa !4\l  %98 = add nuw nsw i32 %41, 8\l  %99 = add i32 %42, 8\l  %100 = icmp eq i32 %99, %10\l  br i1 %100, label %18, label %39, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4942960:s0 -> Node0x49420e0;
	Node0x4942960:s1 -> Node0x4942960;
}
