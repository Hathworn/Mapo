digraph "CFG for '_Z23mat_vec_mult_fixed_dimsPiS_S_' function" {
	label="CFG for '_Z23mat_vec_mult_fixed_dimsPiS_S_' function";

	Node0x5539a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12\l  %6 = bitcast i8 addrspace(4)* %5 to i32 addrspace(4)*\l  %7 = load i32, i32 addrspace(4)* %6, align 4, !tbaa !4\l  %8 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !13, !invariant.load\l... !14\l  %11 = zext i16 %10 to i32\l  %12 = udiv i32 %7, %11\l  %13 = mul i32 %12, %11\l  %14 = icmp ugt i32 %7, %13\l  %15 = zext i1 %14 to i32\l  %16 = add i32 %12, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = getelementptr inbounds [128 x i32], [128 x i32] addrspace(3)*\l... @_ZZ23mat_vec_mult_fixed_dimsPiS_S_E4smem, i32 0, i32 %18\l  %20 = icmp ult i16 %10, 2\l  %21 = icmp eq i32 %18, 0\l  %22 = udiv i16 511, %10\l  %23 = zext i16 %22 to i32\l  br label %25\l}"];
	Node0x5539a40 -> Node0x553be50;
	Node0x553c260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%24:\l24:                                               \l  ret void\l}"];
	Node0x553be50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%25:\l25:                                               \l  %26 = phi i32 [ 0, %3 ], [ %70, %68 ]\l  %27 = phi i32 [ 0, %3 ], [ %69, %68 ]\l  %28 = add i32 %26, %17\l  %29 = shl nsw i32 %28, 9\l  br label %31\l}"];
	Node0x553be50 -> Node0x553c6e0;
	Node0x553c7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%30:\l30:                                               \l  br i1 %21, label %65, label %68\l|{<s0>T|<s1>F}}"];
	Node0x553c7e0:s0 -> Node0x553c870;
	Node0x553c7e0:s1 -> Node0x553c370;
	Node0x553c6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%31:\l31:                                               \l  %32 = phi i32 [ 0, %25 ], [ %63, %60 ]\l  %33 = phi i32 [ 0, %25 ], [ %62, %60 ]\l  %34 = phi i32 [ 0, %25 ], [ %61, %60 ]\l  %35 = add nuw nsw i32 %32, %18\l  %36 = add nsw i32 %35, %29\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %37\l  %39 = load i32, i32 addrspace(1)* %38, align 4, !tbaa !16\l  %40 = zext i32 %35 to i64\l  %41 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %40\l  %42 = load i32, i32 addrspace(1)* %41, align 4, !tbaa !16\l  %43 = mul nsw i32 %42, %39\l  store i32 %43, i32 addrspace(3)* %19, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %20, label %44, label %45\l|{<s0>T|<s1>F}}"];
	Node0x553c6e0:s0 -> Node0x553ddd0;
	Node0x553c6e0:s1 -> Node0x553de60;
	Node0x553ddd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%44:\l44:                                               \l  br i1 %21, label %57, label %60\l|{<s0>T|<s1>F}}"];
	Node0x553ddd0:s0 -> Node0x553dfa0;
	Node0x553ddd0:s1 -> Node0x553c9a0;
	Node0x553de60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi i32 [ %47, %55 ], [ %11, %31 ]\l  %47 = lshr i32 %46, 1\l  %48 = icmp ult i32 %18, %47\l  br i1 %48, label %49, label %55\l|{<s0>T|<s1>F}}"];
	Node0x553de60:s0 -> Node0x553e330;
	Node0x553de60:s1 -> Node0x553e0a0;
	Node0x553e330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%49:\l49:                                               \l  %50 = load i32, i32 addrspace(3)* %19, align 4, !tbaa !16\l  %51 = add nuw nsw i32 %47, %18\l  %52 = getelementptr inbounds [128 x i32], [128 x i32] addrspace(3)*\l... @_ZZ23mat_vec_mult_fixed_dimsPiS_S_E4smem, i32 0, i32 %51\l  %53 = load i32, i32 addrspace(3)* %52, align 4, !tbaa !16\l  %54 = add nsw i32 %53, %50\l  store i32 %54, i32 addrspace(3)* %19, align 4, !tbaa !16\l  br label %55\l}"];
	Node0x553e330 -> Node0x553e0a0;
	Node0x553e0a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %56 = icmp ult i32 %46, 4\l  br i1 %56, label %44, label %45, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x553e0a0:s0 -> Node0x553ddd0;
	Node0x553e0a0:s1 -> Node0x553de60;
	Node0x553dfa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%57:\l57:                                               \l  %58 = load i32, i32 addrspace(3)* %19, align 4, !tbaa !16\l  %59 = add nsw i32 %58, %34\l  br label %60\l}"];
	Node0x553dfa0 -> Node0x553c9a0;
	Node0x553c9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%60:\l60:                                               \l  %61 = phi i32 [ %59, %57 ], [ %34, %44 ]\l  %62 = add nuw nsw i32 %33, 1\l  %63 = mul nuw nsw i32 %62, %11\l  %64 = icmp eq i32 %33, %23\l  br i1 %64, label %30, label %31, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x553c9a0:s0 -> Node0x553c7e0;
	Node0x553c9a0:s1 -> Node0x553c6e0;
	Node0x553c870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%65:\l65:                                               \l  %66 = sext i32 %28 to i64\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %66\l  store i32 %61, i32 addrspace(1)* %67, align 4, !tbaa !16\l  br label %68\l}"];
	Node0x553c870 -> Node0x553c370;
	Node0x553c370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%68:\l68:                                               \l  %69 = add nuw nsw i32 %27, 1\l  %70 = mul i32 %16, %69\l  %71 = icmp ult i32 %70, 1024\l  br i1 %71, label %25, label %24, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x553c370:s0 -> Node0x553be50;
	Node0x553c370:s1 -> Node0x553c260;
}
