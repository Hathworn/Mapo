digraph "CFG for '_Z14testWithGlobaliiPfS_' function" {
	label="CFG for '_Z14testWithGlobaliiPfS_' function";

	Node0x4c95340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = add i32 %12, %5\l  %14 = icmp slt i32 %13, %0\l  br i1 %14, label %15, label %259\l|{<s0>T|<s1>F}}"];
	Node0x4c95340:s0 -> Node0x4c95390;
	Node0x4c95340:s1 -> Node0x4c972d0;
	Node0x4c95390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%15:\l15:                                               \l  %16 = mul nsw i32 %13, %1\l  %17 = sext i32 %16 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %3, i64 %17\l  %19 = icmp sgt i32 %1, 0\l  br i1 %19, label %20, label %22\l|{<s0>T|<s1>F}}"];
	Node0x4c95390:s0 -> Node0x4c976e0;
	Node0x4c95390:s1 -> Node0x4c97730;
	Node0x4c976e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%20:\l20:                                               \l  %21 = sitofp i32 %13 to float\l  br label %31\l}"];
	Node0x4c976e0 -> Node0x4c978e0;
	Node0x4c97730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%22:\l22:                                               \l  %23 = sdiv i32 %1, 2\l  %24 = icmp sgt i32 %1, 1\l  br i1 %24, label %25, label %255\l|{<s0>T|<s1>F}}"];
	Node0x4c97730:s0 -> Node0x4c97b20;
	Node0x4c97730:s1 -> Node0x4c97b70;
	Node0x4c97b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%25:\l25:                                               \l  %26 = add nsw i32 %23, -1\l  %27 = and i32 %23, 7\l  %28 = icmp ult i32 %26, 7\l  br i1 %28, label %225, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4c97b20:s0 -> Node0x4c97ec0;
	Node0x4c97b20:s1 -> Node0x4c97f10;
	Node0x4c97f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%29:\l29:                                               \l  %30 = and i32 %23, -8\l  br label %180\l}"];
	Node0x4c97f10 -> Node0x4c98110;
	Node0x4c978e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ 0, %20 ], [ %178, %152 ]\l  %33 = phi float [ 0.000000e+00, %20 ], [ %175, %152 ]\l  %34 = sitofp i32 %32 to float\l  %35 = fmul contract float %34, 0x3FB99999A0000000\l  %36 = fmul contract float %35, %21\l  %37 = tail call float @llvm.fabs.f32(float %36)\l  %38 = fcmp olt float %37, 1.310720e+05\l  br i1 %38, label %39, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4c978e0:s0 -> Node0x4c99450;
	Node0x4c978e0:s1 -> Node0x4c994e0;
	Node0x4c99450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%39:\l39:                                               \l  %40 = fmul float %37, 0x3FE45F3060000000\l  %41 = tail call float @llvm.rint.f32(float %40)\l  %42 = tail call float @llvm.fma.f32(float %41, float 0xBFF921FB40000000,\l... float %37)\l  %43 = tail call float @llvm.fma.f32(float %41, float 0xBE74442D00000000,\l... float %42)\l  %44 = tail call float @llvm.fma.f32(float %41, float 0xBCF8469880000000,\l... float %43)\l  %45 = fptosi float %41 to i32\l  br label %152\l}"];
	Node0x4c99450 -> Node0x4c98200;
	Node0x4c994e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%46:\l46:                                               \l  %47 = bitcast float %37 to i32\l  %48 = lshr i32 %47, 23\l  %49 = and i32 %47, 8388607\l  %50 = or i32 %49, 8388608\l  %51 = zext i32 %50 to i64\l  %52 = mul nuw nsw i64 %51, 4266746795\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = mul nuw nsw i64 %51, 1011060801\l  %56 = add nuw nsw i64 %54, %55\l  %57 = trunc i64 %56 to i32\l  %58 = lshr i64 %56, 32\l  %59 = mul nuw nsw i64 %51, 3680671129\l  %60 = add nuw nsw i64 %58, %59\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %51, 4113882560\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %51, 4230436817\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %51, 1313084713\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = mul nuw nsw i64 %51, 2734261102\l  %76 = add nuw nsw i64 %74, %75\l  %77 = trunc i64 %76 to i32\l  %78 = lshr i64 %76, 32\l  %79 = trunc i64 %78 to i32\l  %80 = add nsw i32 %48, -120\l  %81 = icmp ugt i32 %80, 63\l  %82 = select i1 %81, i32 %73, i32 %79\l  %83 = select i1 %81, i32 %69, i32 %77\l  %84 = select i1 %81, i32 %65, i32 %73\l  %85 = select i1 %81, i32 %61, i32 %69\l  %86 = select i1 %81, i32 %57, i32 %65\l  %87 = select i1 %81, i32 %53, i32 %61\l  %88 = select i1 %81, i32 -64, i32 0\l  %89 = add nsw i32 %88, %80\l  %90 = icmp ugt i32 %89, 31\l  %91 = select i1 %90, i32 %83, i32 %82\l  %92 = select i1 %90, i32 %84, i32 %83\l  %93 = select i1 %90, i32 %85, i32 %84\l  %94 = select i1 %90, i32 %86, i32 %85\l  %95 = select i1 %90, i32 %87, i32 %86\l  %96 = select i1 %90, i32 -32, i32 0\l  %97 = add nsw i32 %96, %89\l  %98 = icmp ugt i32 %97, 31\l  %99 = select i1 %98, i32 %92, i32 %91\l  %100 = select i1 %98, i32 %93, i32 %92\l  %101 = select i1 %98, i32 %94, i32 %93\l  %102 = select i1 %98, i32 %95, i32 %94\l  %103 = select i1 %98, i32 -32, i32 0\l  %104 = add nsw i32 %103, %97\l  %105 = icmp eq i32 %104, 0\l  %106 = sub nsw i32 32, %104\l  %107 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %106)\l  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %106)\l  %109 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %106)\l  %110 = select i1 %105, i32 %99, i32 %107\l  %111 = select i1 %105, i32 %100, i32 %108\l  %112 = select i1 %105, i32 %101, i32 %109\l  %113 = lshr i32 %110, 29\l  %114 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %111, i32 2)\l  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 2)\l  %116 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %102, i32 2)\l  %117 = and i32 %113, 1\l  %118 = sub nsw i32 0, %117\l  %119 = shl i32 %113, 31\l  %120 = xor i32 %114, %118\l  %121 = xor i32 %115, %118\l  %122 = xor i32 %116, %118\l  %123 = tail call i32 @llvm.ctlz.i32(i32 %120, i1 false), !range !7\l  %124 = sub nsw i32 31, %123\l  %125 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %124)\l  %126 = tail call i32 @llvm.fshr.i32(i32 %121, i32 %122, i32 %124)\l  %127 = shl nuw nsw i32 %123, 23\l  %128 = sub nuw nsw i32 1056964608, %127\l  %129 = lshr i32 %125, 9\l  %130 = or i32 %129, %128\l  %131 = or i32 %130, %119\l  %132 = bitcast i32 %131 to float\l  %133 = tail call i32 @llvm.fshl.i32(i32 %125, i32 %126, i32 23)\l  %134 = tail call i32 @llvm.ctlz.i32(i32 %133, i1 false), !range !7\l  %135 = fmul float %132, 0x3FF921FB40000000\l  %136 = add nuw nsw i32 %134, %123\l  %137 = shl nuw nsw i32 %136, 23\l  %138 = sub nuw nsw i32 855638016, %137\l  %139 = sub nsw i32 31, %134\l  %140 = tail call i32 @llvm.fshr.i32(i32 %133, i32 %126, i32 %139)\l  %141 = lshr i32 %140, 9\l  %142 = or i32 %138, %141\l  %143 = or i32 %142, %119\l  %144 = bitcast i32 %143 to float\l  %145 = fneg float %135\l  %146 = tail call float @llvm.fma.f32(float %132, float 0x3FF921FB40000000,\l... float %145)\l  %147 = tail call float @llvm.fma.f32(float %132, float 0x3E74442D00000000,\l... float %146)\l  %148 = tail call float @llvm.fma.f32(float %144, float 0x3FF921FB40000000,\l... float %147)\l  %149 = fadd float %135, %148\l  %150 = lshr i32 %110, 30\l  %151 = add nuw nsw i32 %117, %150\l  br label %152\l}"];
	Node0x4c994e0 -> Node0x4c98200;
	Node0x4c98200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%152:\l152:                                              \l  %153 = phi float [ %44, %39 ], [ %149, %46 ]\l  %154 = phi i32 [ %45, %39 ], [ %151, %46 ]\l  %155 = fmul float %153, %153\l  %156 = tail call float @llvm.fmuladd.f32(float %155, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %157 = tail call float @llvm.fmuladd.f32(float %155, float %156, float\l... 0xBFC55553A0000000)\l  %158 = fmul float %155, %157\l  %159 = tail call float @llvm.fmuladd.f32(float %153, float %158, float %153)\l  %160 = tail call float @llvm.fmuladd.f32(float %155, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %161 = tail call float @llvm.fmuladd.f32(float %155, float %160, float\l... 0x3FA5557EE0000000)\l  %162 = tail call float @llvm.fmuladd.f32(float %155, float %161, float\l... 0xBFE0000080000000)\l  %163 = tail call float @llvm.fmuladd.f32(float %155, float %162, float\l... 1.000000e+00)\l  %164 = fneg float %159\l  %165 = and i32 %154, 1\l  %166 = icmp eq i32 %165, 0\l  %167 = select i1 %166, float %163, float %164\l  %168 = bitcast float %167 to i32\l  %169 = shl i32 %154, 30\l  %170 = and i32 %169, -2147483648\l  %171 = xor i32 %170, %168\l  %172 = bitcast i32 %171 to float\l  %173 = tail call i1 @llvm.amdgcn.class.f32(float %37, i32 504)\l  %174 = select i1 %173, float %172, float 0x7FF8000000000000\l  %175 = fadd contract float %33, %174\l  %176 = zext i32 %32 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %18, i64 %176\l  store float %175, float addrspace(1)* %177, align 4, !tbaa !8\l  %178 = add nuw nsw i32 %32, 1\l  %179 = icmp eq i32 %178, %1\l  br i1 %179, label %22, label %31, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4c98200:s0 -> Node0x4c97730;
	Node0x4c98200:s1 -> Node0x4c978e0;
	Node0x4c98110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%180:\l180:                                              \l  %181 = phi i32 [ 0, %29 ], [ %222, %180 ]\l  %182 = phi i32 [ 0, %29 ], [ %223, %180 ]\l  %183 = zext i32 %181 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %18, i64 %183\l  %185 = load float, float addrspace(1)* %184, align 4, !tbaa !8\l  %186 = fmul contract float %185, %185\l  store float %186, float addrspace(1)* %184, align 4, !tbaa !8\l  %187 = or i32 %181, 1\l  %188 = zext i32 %187 to i64\l  %189 = getelementptr inbounds float, float addrspace(1)* %18, i64 %188\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !8\l  %191 = fmul contract float %190, %190\l  store float %191, float addrspace(1)* %189, align 4, !tbaa !8\l  %192 = or i32 %181, 2\l  %193 = zext i32 %192 to i64\l  %194 = getelementptr inbounds float, float addrspace(1)* %18, i64 %193\l  %195 = load float, float addrspace(1)* %194, align 4, !tbaa !8\l  %196 = fmul contract float %195, %195\l  store float %196, float addrspace(1)* %194, align 4, !tbaa !8\l  %197 = or i32 %181, 3\l  %198 = zext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %18, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !8\l  %201 = fmul contract float %200, %200\l  store float %201, float addrspace(1)* %199, align 4, !tbaa !8\l  %202 = or i32 %181, 4\l  %203 = zext i32 %202 to i64\l  %204 = getelementptr inbounds float, float addrspace(1)* %18, i64 %203\l  %205 = load float, float addrspace(1)* %204, align 4, !tbaa !8\l  %206 = fmul contract float %205, %205\l  store float %206, float addrspace(1)* %204, align 4, !tbaa !8\l  %207 = or i32 %181, 5\l  %208 = zext i32 %207 to i64\l  %209 = getelementptr inbounds float, float addrspace(1)* %18, i64 %208\l  %210 = load float, float addrspace(1)* %209, align 4, !tbaa !8\l  %211 = fmul contract float %210, %210\l  store float %211, float addrspace(1)* %209, align 4, !tbaa !8\l  %212 = or i32 %181, 6\l  %213 = zext i32 %212 to i64\l  %214 = getelementptr inbounds float, float addrspace(1)* %18, i64 %213\l  %215 = load float, float addrspace(1)* %214, align 4, !tbaa !8\l  %216 = fmul contract float %215, %215\l  store float %216, float addrspace(1)* %214, align 4, !tbaa !8\l  %217 = or i32 %181, 7\l  %218 = zext i32 %217 to i64\l  %219 = getelementptr inbounds float, float addrspace(1)* %18, i64 %218\l  %220 = load float, float addrspace(1)* %219, align 4, !tbaa !8\l  %221 = fmul contract float %220, %220\l  store float %221, float addrspace(1)* %219, align 4, !tbaa !8\l  %222 = add nuw nsw i32 %181, 8\l  %223 = add i32 %182, 8\l  %224 = icmp eq i32 %223, %30\l  br i1 %224, label %225, label %180, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4c98110:s0 -> Node0x4c97ec0;
	Node0x4c98110:s1 -> Node0x4c98110;
	Node0x4c97ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%225:\l225:                                              \l  %226 = phi i32 [ 0, %25 ], [ %222, %180 ]\l  %227 = icmp eq i32 %27, 0\l  br i1 %227, label %238, label %228\l|{<s0>T|<s1>F}}"];
	Node0x4c97ec0:s0 -> Node0x4ca3d00;
	Node0x4c97ec0:s1 -> Node0x4ca3d50;
	Node0x4ca3d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%228:\l228:                                              \l  %229 = phi i32 [ %235, %228 ], [ %226, %225 ]\l  %230 = phi i32 [ %236, %228 ], [ 0, %225 ]\l  %231 = zext i32 %229 to i64\l  %232 = getelementptr inbounds float, float addrspace(1)* %18, i64 %231\l  %233 = load float, float addrspace(1)* %232, align 4, !tbaa !8\l  %234 = fmul contract float %233, %233\l  store float %234, float addrspace(1)* %232, align 4, !tbaa !8\l  %235 = add nuw nsw i32 %229, 1\l  %236 = add i32 %230, 1\l  %237 = icmp eq i32 %236, %27\l  br i1 %237, label %238, label %228, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4ca3d50:s0 -> Node0x4ca3d00;
	Node0x4ca3d50:s1 -> Node0x4ca3d50;
	Node0x4ca3d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%238:\l238:                                              \l  br label %239\l}"];
	Node0x4ca3d00 -> Node0x4ca4620;
	Node0x4ca4620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%239:\l239:                                              \l  %240 = phi i32 [ %242, %239 ], [ %1, %238 ]\l  %241 = phi float [ %253, %239 ], [ 0.000000e+00, %238 ]\l  %242 = add nsw i32 %240, -1\l  %243 = add nsw i32 %240, -2\l  %244 = zext i32 %243 to i64\l  %245 = getelementptr inbounds float, float addrspace(1)* %18, i64 %244\l  %246 = load float, float addrspace(1)* %245, align 4, !tbaa !8\l  %247 = zext i32 %242 to i64\l  %248 = getelementptr inbounds float, float addrspace(1)* %18, i64 %247\l  %249 = load float, float addrspace(1)* %248, align 4, !tbaa !8\l  %250 = tail call float @llvm.fabs.f32(float %249)\l  %251 = fadd contract float %250, 0x3FB99999A0000000\l  %252 = fdiv contract float %246, %251\l  %253 = fadd contract float %241, %252\l  %254 = icmp ugt i32 %240, 2\l  br i1 %254, label %239, label %255, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4ca4620:s0 -> Node0x4ca4620;
	Node0x4ca4620:s1 -> Node0x4c97b70;
	Node0x4c97b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%255:\l255:                                              \l  %256 = phi float [ 0.000000e+00, %22 ], [ %253, %239 ]\l  %257 = sext i32 %13 to i64\l  %258 = getelementptr inbounds float, float addrspace(1)* %2, i64 %257\l  store float %256, float addrspace(1)* %258, align 4, !tbaa !8\l  br label %259\l}"];
	Node0x4c97b70 -> Node0x4c972d0;
	Node0x4c972d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%259:\l259:                                              \l  ret void\l}"];
}
