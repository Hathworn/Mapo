digraph "CFG for '_Z35matrix_softmax_cross_entropy_kerneliiPKfS0_Pf' function" {
	label="CFG for '_Z35matrix_softmax_cross_entropy_kerneliiPKfS0_Pf' function";

	Node0x4c8ec00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 2, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %6, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %16, %17\l  %20 = mul i32 %19, %11\l  %21 = add i32 %20, %18\l  %22 = icmp slt i32 %21, %0\l  br i1 %22, label %23, label %337\l|{<s0>T|<s1>F}}"];
	Node0x4c8ec00:s0 -> Node0x4c922c0;
	Node0x4c8ec00:s1 -> Node0x4c92350;
	Node0x4c922c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%23:\l23:                                               \l  %24 = mul nsw i32 %21, %1\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %2, i64 %25\l  %27 = getelementptr inbounds float, float addrspace(1)* %3, i64 %25\l  %28 = load float, float addrspace(1)* %26, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %29 = icmp sgt i32 %1, 1\l  br i1 %29, label %30, label %53\l|{<s0>T|<s1>F}}"];
	Node0x4c922c0:s0 -> Node0x4c92980;
	Node0x4c922c0:s1 -> Node0x4c92a10;
	Node0x4c92980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%30:\l30:                                               \l  %31 = add i32 %1, -1\l  %32 = add i32 %1, -2\l  %33 = and i32 %31, 7\l  %34 = icmp ult i32 %32, 7\l  br i1 %34, label %37, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4c92980:s0 -> Node0x4c91540;
	Node0x4c92980:s1 -> Node0x4c92f70;
	Node0x4c92f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%35:\l35:                                               \l  %36 = and i32 %31, -8\l  br label %61\l}"];
	Node0x4c92f70 -> Node0x4c93170;
	Node0x4c91540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%37:\l37:                                               \l  %38 = phi float [ undef, %30 ], [ %103, %61 ]\l  %39 = phi i32 [ 1, %30 ], [ %104, %61 ]\l  %40 = phi float [ %28, %30 ], [ %103, %61 ]\l  %41 = icmp eq i32 %33, 0\l  br i1 %41, label %53, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4c91540:s0 -> Node0x4c92a10;
	Node0x4c91540:s1 -> Node0x4c939c0;
	Node0x4c939c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%42:\l42:                                               \l  %43 = phi i32 [ %50, %42 ], [ %39, %37 ]\l  %44 = phi float [ %49, %42 ], [ %40, %37 ]\l  %45 = phi i32 [ %51, %42 ], [ 0, %37 ]\l  %46 = zext i32 %43 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %26, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = tail call float @llvm.maxnum.f32(float %44, float %48)\l  %50 = add nuw nsw i32 %43, 1\l  %51 = add i32 %45, 1\l  %52 = icmp eq i32 %51, %33\l  br i1 %52, label %53, label %42, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4c939c0:s0 -> Node0x4c92a10;
	Node0x4c939c0:s1 -> Node0x4c939c0;
	Node0x4c92a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%53:\l53:                                               \l  %54 = phi float [ %28, %23 ], [ %38, %37 ], [ %49, %42 ]\l  %55 = icmp sgt i32 %1, 0\l  br i1 %55, label %56, label %138\l|{<s0>T|<s1>F}}"];
	Node0x4c92a10:s0 -> Node0x4c94c60;
	Node0x4c92a10:s1 -> Node0x4c94cb0;
	Node0x4c94c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%56:\l56:                                               \l  %57 = and i32 %1, 3\l  %58 = icmp ult i32 %1, 4\l  br i1 %58, label %107, label %59\l|{<s0>T|<s1>F}}"];
	Node0x4c94c60:s0 -> Node0x4c94f10;
	Node0x4c94c60:s1 -> Node0x4c94f60;
	Node0x4c94f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%59:\l59:                                               \l  %60 = and i32 %1, -4\l  br label %140\l}"];
	Node0x4c94f60 -> Node0x4c95160;
	Node0x4c93170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%61:\l61:                                               \l  %62 = phi i32 [ 1, %35 ], [ %104, %61 ]\l  %63 = phi float [ %28, %35 ], [ %103, %61 ]\l  %64 = phi i32 [ 0, %35 ], [ %105, %61 ]\l  %65 = zext i32 %62 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %26, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = tail call float @llvm.maxnum.f32(float %63, float %67)\l  %69 = add nuw nsw i32 %62, 1\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %26, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = tail call float @llvm.maxnum.f32(float %68, float %72)\l  %74 = add nuw nsw i32 %62, 2\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %26, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = tail call float @llvm.maxnum.f32(float %73, float %77)\l  %79 = add nuw nsw i32 %62, 3\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %26, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = tail call float @llvm.maxnum.f32(float %78, float %82)\l  %84 = add nuw nsw i32 %62, 4\l  %85 = zext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %26, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = tail call float @llvm.maxnum.f32(float %83, float %87)\l  %89 = add nuw nsw i32 %62, 5\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %26, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = tail call float @llvm.maxnum.f32(float %88, float %92)\l  %94 = add nuw nsw i32 %62, 6\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %26, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = tail call float @llvm.maxnum.f32(float %93, float %97)\l  %99 = add nuw nsw i32 %62, 7\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %26, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = tail call float @llvm.maxnum.f32(float %98, float %102)\l  %104 = add nuw nsw i32 %62, 8\l  %105 = add i32 %64, 8\l  %106 = icmp eq i32 %105, %36\l  br i1 %106, label %37, label %61, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4c93170:s0 -> Node0x4c91540;
	Node0x4c93170:s1 -> Node0x4c93170;
	Node0x4c94f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%107:\l107:                                              \l  %108 = phi float [ undef, %56 ], [ %222, %140 ]\l  %109 = phi i32 [ 0, %56 ], [ %223, %140 ]\l  %110 = phi float [ 0.000000e+00, %56 ], [ %222, %140 ]\l  %111 = icmp eq i32 %57, 0\l  br i1 %111, label %138, label %112\l|{<s0>T|<s1>F}}"];
	Node0x4c94f10:s0 -> Node0x4c94cb0;
	Node0x4c94f10:s1 -> Node0x4c98190;
	Node0x4c98190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%112:\l112:                                              \l  %113 = phi i32 [ %135, %112 ], [ %109, %107 ]\l  %114 = phi float [ %134, %112 ], [ %110, %107 ]\l  %115 = phi i32 [ %136, %112 ], [ 0, %107 ]\l  %116 = zext i32 %113 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %26, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = fsub contract float %118, %54\l  %120 = fmul float %119, 0x3FF7154760000000\l  %121 = tail call float @llvm.rint.f32(float %120)\l  %122 = fcmp ogt float %119, 0x40562E4300000000\l  %123 = fcmp olt float %119, 0xC059D1DA00000000\l  %124 = fneg float %120\l  %125 = tail call float @llvm.fma.f32(float %119, float 0x3FF7154760000000,\l... float %124)\l  %126 = tail call float @llvm.fma.f32(float %119, float 0x3E54AE0BE0000000,\l... float %125)\l  %127 = fsub float %120, %121\l  %128 = fadd float %126, %127\l  %129 = tail call float @llvm.exp2.f32(float %128)\l  %130 = fptosi float %121 to i32\l  %131 = tail call float @llvm.amdgcn.ldexp.f32(float %129, i32 %130)\l  %132 = select i1 %123, float 0.000000e+00, float %131\l  %133 = select i1 %122, float 0x7FF0000000000000, float %132\l  %134 = fadd contract float %114, %133\l  %135 = add nuw nsw i32 %113, 1\l  %136 = add i32 %115, 1\l  %137 = icmp eq i32 %136, %57\l  br i1 %137, label %138, label %112, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4c98190:s0 -> Node0x4c94cb0;
	Node0x4c98190:s1 -> Node0x4c98190;
	Node0x4c94cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%138:\l138:                                              \l  %139 = phi float [ 0.000000e+00, %53 ], [ %108, %107 ], [ %134, %112 ]\l  br i1 %55, label %239, label %226\l|{<s0>T|<s1>F}}"];
	Node0x4c94cb0:s0 -> Node0x4c9a0d0;
	Node0x4c94cb0:s1 -> Node0x4c9a120;
	Node0x4c95160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%140:\l140:                                              \l  %141 = phi i32 [ 0, %59 ], [ %223, %140 ]\l  %142 = phi float [ 0.000000e+00, %59 ], [ %222, %140 ]\l  %143 = phi i32 [ 0, %59 ], [ %224, %140 ]\l  %144 = zext i32 %141 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %26, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = fsub contract float %146, %54\l  %148 = fmul float %147, 0x3FF7154760000000\l  %149 = tail call float @llvm.rint.f32(float %148)\l  %150 = fcmp ogt float %147, 0x40562E4300000000\l  %151 = fcmp olt float %147, 0xC059D1DA00000000\l  %152 = fneg float %148\l  %153 = tail call float @llvm.fma.f32(float %147, float 0x3FF7154760000000,\l... float %152)\l  %154 = tail call float @llvm.fma.f32(float %147, float 0x3E54AE0BE0000000,\l... float %153)\l  %155 = fsub float %148, %149\l  %156 = fadd float %154, %155\l  %157 = tail call float @llvm.exp2.f32(float %156)\l  %158 = fptosi float %149 to i32\l  %159 = tail call float @llvm.amdgcn.ldexp.f32(float %157, i32 %158)\l  %160 = select i1 %151, float 0.000000e+00, float %159\l  %161 = select i1 %150, float 0x7FF0000000000000, float %160\l  %162 = fadd contract float %142, %161\l  %163 = or i32 %141, 1\l  %164 = zext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %26, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %167 = fsub contract float %166, %54\l  %168 = fmul float %167, 0x3FF7154760000000\l  %169 = tail call float @llvm.rint.f32(float %168)\l  %170 = fcmp ogt float %167, 0x40562E4300000000\l  %171 = fcmp olt float %167, 0xC059D1DA00000000\l  %172 = fneg float %168\l  %173 = tail call float @llvm.fma.f32(float %167, float 0x3FF7154760000000,\l... float %172)\l  %174 = tail call float @llvm.fma.f32(float %167, float 0x3E54AE0BE0000000,\l... float %173)\l  %175 = fsub float %168, %169\l  %176 = fadd float %174, %175\l  %177 = tail call float @llvm.exp2.f32(float %176)\l  %178 = fptosi float %169 to i32\l  %179 = tail call float @llvm.amdgcn.ldexp.f32(float %177, i32 %178)\l  %180 = select i1 %171, float 0.000000e+00, float %179\l  %181 = select i1 %170, float 0x7FF0000000000000, float %180\l  %182 = fadd contract float %162, %181\l  %183 = or i32 %141, 2\l  %184 = zext i32 %183 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %26, i64 %184\l  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %187 = fsub contract float %186, %54\l  %188 = fmul float %187, 0x3FF7154760000000\l  %189 = tail call float @llvm.rint.f32(float %188)\l  %190 = fcmp ogt float %187, 0x40562E4300000000\l  %191 = fcmp olt float %187, 0xC059D1DA00000000\l  %192 = fneg float %188\l  %193 = tail call float @llvm.fma.f32(float %187, float 0x3FF7154760000000,\l... float %192)\l  %194 = tail call float @llvm.fma.f32(float %187, float 0x3E54AE0BE0000000,\l... float %193)\l  %195 = fsub float %188, %189\l  %196 = fadd float %194, %195\l  %197 = tail call float @llvm.exp2.f32(float %196)\l  %198 = fptosi float %189 to i32\l  %199 = tail call float @llvm.amdgcn.ldexp.f32(float %197, i32 %198)\l  %200 = select i1 %191, float 0.000000e+00, float %199\l  %201 = select i1 %190, float 0x7FF0000000000000, float %200\l  %202 = fadd contract float %182, %201\l  %203 = or i32 %141, 3\l  %204 = zext i32 %203 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %26, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %207 = fsub contract float %206, %54\l  %208 = fmul float %207, 0x3FF7154760000000\l  %209 = tail call float @llvm.rint.f32(float %208)\l  %210 = fcmp ogt float %207, 0x40562E4300000000\l  %211 = fcmp olt float %207, 0xC059D1DA00000000\l  %212 = fneg float %208\l  %213 = tail call float @llvm.fma.f32(float %207, float 0x3FF7154760000000,\l... float %212)\l  %214 = tail call float @llvm.fma.f32(float %207, float 0x3E54AE0BE0000000,\l... float %213)\l  %215 = fsub float %208, %209\l  %216 = fadd float %214, %215\l  %217 = tail call float @llvm.exp2.f32(float %216)\l  %218 = fptosi float %209 to i32\l  %219 = tail call float @llvm.amdgcn.ldexp.f32(float %217, i32 %218)\l  %220 = select i1 %211, float 0.000000e+00, float %219\l  %221 = select i1 %210, float 0x7FF0000000000000, float %220\l  %222 = fadd contract float %202, %221\l  %223 = add nuw nsw i32 %141, 4\l  %224 = add i32 %143, 4\l  %225 = icmp eq i32 %224, %60\l  br i1 %225, label %107, label %140, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4c95160:s0 -> Node0x4c94f10;
	Node0x4c95160:s1 -> Node0x4c95160;
	Node0x4c9a120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%226:\l226:                                              \l  %227 = phi float [ 0.000000e+00, %138 ], [ %277, %239 ]\l  %228 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %21\l  store float %227, float addrspace(3)* %228, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %229 = icmp eq i32 %18, 0\l  %230 = icmp eq i32 %17, 0\l  %231 = select i1 %229, i1 %230, i1 false\l  br i1 %231, label %232, label %337\l|{<s0>T|<s1>F}}"];
	Node0x4c9a120:s0 -> Node0x4c9e460;
	Node0x4c9a120:s1 -> Node0x4c92350;
	Node0x4c9e460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%232:\l232:                                              \l  %233 = icmp sgt i32 %0, 0\l  br i1 %233, label %234, label %295\l|{<s0>T|<s1>F}}"];
	Node0x4c9e460:s0 -> Node0x4c9e630;
	Node0x4c9e460:s1 -> Node0x4c9e680;
	Node0x4c9e630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%234:\l234:                                              \l  %235 = and i32 %0, 7\l  %236 = icmp ult i32 %0, 8\l  br i1 %236, label %280, label %237\l|{<s0>T|<s1>F}}"];
	Node0x4c9e630:s0 -> Node0x4c9e8e0;
	Node0x4c9e630:s1 -> Node0x4c9e930;
	Node0x4c9e930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%237:\l237:                                              \l  %238 = and i32 %0, -8\l  br label %299\l}"];
	Node0x4c9e930 -> Node0x4c9eb00;
	Node0x4c9a0d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%239:\l239:                                              \l  %240 = phi i32 [ %278, %239 ], [ 0, %138 ]\l  %241 = phi float [ %277, %239 ], [ 0.000000e+00, %138 ]\l  %242 = zext i32 %240 to i64\l  %243 = getelementptr inbounds float, float addrspace(1)* %27, i64 %242\l  %244 = load float, float addrspace(1)* %243, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %245 = getelementptr inbounds float, float addrspace(1)* %26, i64 %242\l  %246 = load float, float addrspace(1)* %245, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %247 = fsub contract float %246, %54\l  %248 = fmul float %247, 0x3FF7154760000000\l  %249 = tail call float @llvm.rint.f32(float %248)\l  %250 = fcmp ogt float %247, 0x40562E4300000000\l  %251 = fcmp olt float %247, 0xC059D1DA00000000\l  %252 = fneg float %248\l  %253 = tail call float @llvm.fma.f32(float %247, float 0x3FF7154760000000,\l... float %252)\l  %254 = tail call float @llvm.fma.f32(float %247, float 0x3E54AE0BE0000000,\l... float %253)\l  %255 = fsub float %248, %249\l  %256 = fadd float %254, %255\l  %257 = tail call float @llvm.exp2.f32(float %256)\l  %258 = fptosi float %249 to i32\l  %259 = tail call float @llvm.amdgcn.ldexp.f32(float %257, i32 %258)\l  %260 = select i1 %251, float 0.000000e+00, float %259\l  %261 = select i1 %250, float 0x7FF0000000000000, float %260\l  %262 = fdiv contract float %261, %139\l  %263 = tail call i1 @llvm.amdgcn.class.f32(float %262, i32 144)\l  %264 = select i1 %263, float 0x41F0000000000000, float 1.000000e+00\l  %265 = fmul float %262, %264\l  %266 = tail call float @llvm.log2.f32(float %265)\l  %267 = fmul float %266, 0x3FE62E42E0000000\l  %268 = tail call i1 @llvm.amdgcn.class.f32(float %266, i32 519)\l  %269 = fneg float %267\l  %270 = tail call float @llvm.fma.f32(float %266, float 0x3FE62E42E0000000,\l... float %269)\l  %271 = tail call float @llvm.fma.f32(float %266, float 0x3E6EFA39E0000000,\l... float %270)\l  %272 = fadd float %267, %271\l  %273 = select i1 %268, float %266, float %272\l  %274 = select i1 %263, float 0x40362E4300000000, float 0.000000e+00\l  %275 = fsub float %273, %274\l  %276 = fmul contract float %244, %275\l  %277 = fsub contract float %241, %276\l  %278 = add nuw nsw i32 %240, 1\l  %279 = icmp eq i32 %278, %1\l  br i1 %279, label %226, label %239, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4c9a0d0:s0 -> Node0x4c9a120;
	Node0x4c9a0d0:s1 -> Node0x4c9a0d0;
	Node0x4c9e8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%280:\l280:                                              \l  %281 = phi float [ undef, %234 ], [ %333, %299 ]\l  %282 = phi i32 [ 0, %234 ], [ %334, %299 ]\l  %283 = phi float [ 0.000000e+00, %234 ], [ %333, %299 ]\l  %284 = icmp eq i32 %235, 0\l  br i1 %284, label %295, label %285\l|{<s0>T|<s1>F}}"];
	Node0x4c9e8e0:s0 -> Node0x4c9e680;
	Node0x4c9e8e0:s1 -> Node0x4ca1900;
	Node0x4ca1900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%285:\l285:                                              \l  %286 = phi i32 [ %292, %285 ], [ %282, %280 ]\l  %287 = phi float [ %291, %285 ], [ %283, %280 ]\l  %288 = phi i32 [ %293, %285 ], [ 0, %280 ]\l  %289 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %286\l  %290 = load float, float addrspace(3)* %289, align 4, !tbaa !7\l  %291 = fadd contract float %287, %290\l  %292 = add nuw nsw i32 %286, 1\l  %293 = add i32 %288, 1\l  %294 = icmp eq i32 %293, %235\l  br i1 %294, label %295, label %285, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4ca1900:s0 -> Node0x4c9e680;
	Node0x4ca1900:s1 -> Node0x4ca1900;
	Node0x4c9e680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%295:\l295:                                              \l  %296 = phi float [ 0.000000e+00, %232 ], [ %281, %280 ], [ %291, %285 ]\l  %297 = sitofp i32 %0 to float\l  %298 = fdiv contract float %296, %297\l  store float %298, float addrspace(1)* %4, align 4, !tbaa !7\l  br label %337\l}"];
	Node0x4c9e680 -> Node0x4c92350;
	Node0x4c9eb00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%299:\l299:                                              \l  %300 = phi i32 [ 0, %237 ], [ %334, %299 ]\l  %301 = phi float [ 0.000000e+00, %237 ], [ %333, %299 ]\l  %302 = phi i32 [ 0, %237 ], [ %335, %299 ]\l  %303 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %300\l  %304 = load float, float addrspace(3)* %303, align 4, !tbaa !7\l  %305 = fadd contract float %301, %304\l  %306 = or i32 %300, 1\l  %307 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %306\l  %308 = load float, float addrspace(3)* %307, align 4, !tbaa !7\l  %309 = fadd contract float %305, %308\l  %310 = or i32 %300, 2\l  %311 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %310\l  %312 = load float, float addrspace(3)* %311, align 4, !tbaa !7\l  %313 = fadd contract float %309, %312\l  %314 = or i32 %300, 3\l  %315 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %314\l  %316 = load float, float addrspace(3)* %315, align 4, !tbaa !7\l  %317 = fadd contract float %313, %316\l  %318 = or i32 %300, 4\l  %319 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %318\l  %320 = load float, float addrspace(3)* %319, align 4, !tbaa !7\l  %321 = fadd contract float %317, %320\l  %322 = or i32 %300, 5\l  %323 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %322\l  %324 = load float, float addrspace(3)* %323, align 4, !tbaa !7\l  %325 = fadd contract float %321, %324\l  %326 = or i32 %300, 6\l  %327 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %326\l  %328 = load float, float addrspace(3)* %327, align 4, !tbaa !7\l  %329 = fadd contract float %325, %328\l  %330 = or i32 %300, 7\l  %331 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @loss_per_row, i32 0, i32 %330\l  %332 = load float, float addrspace(3)* %331, align 4, !tbaa !7\l  %333 = fadd contract float %329, %332\l  %334 = add nuw nsw i32 %300, 8\l  %335 = add i32 %302, 8\l  %336 = icmp eq i32 %335, %238\l  br i1 %336, label %280, label %299, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4c9eb00:s0 -> Node0x4c9e8e0;
	Node0x4c9eb00:s1 -> Node0x4c9eb00;
	Node0x4c92350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%337:\l337:                                              \l  ret void\l}"];
}
