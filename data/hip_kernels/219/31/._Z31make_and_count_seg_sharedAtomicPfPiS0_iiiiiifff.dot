digraph "CFG for '_Z31make_and_count_seg_sharedAtomicPfPiS0_iiiiiifff' function" {
	label="CFG for '_Z31make_and_count_seg_sharedAtomicPfPiS0_iiiiiifff' function";

	Node0x4b96360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%12:\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = mul i32 %18, %17\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = mul nsw i32 %21, %6\l  %23 = icmp sgt i32 %22, %5\l  %24 = sub nsw i32 %21, %7\l  %25 = add nsw i32 %24, 1\l  %26 = mul nsw i32 %25, %8\l  %27 = add nsw i32 %26, %5\l  %28 = icmp slt i32 %27, %3\l  %29 = and i1 %23, %28\l  %30 = mul nsw i32 %24, %8\l  %31 = add nsw i32 %30, %5\l  %32 = select i1 %29, i32 %8, i32 %6\l  %33 = select i1 %29, i32 %31, i32 %22\l  %34 = mul nsw i32 %21, %4\l  %35 = sext i32 %33 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %35\l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %35\l  %38 = sext i32 %34 to i64\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %38\l  %40 = icmp sgt i32 %32, 0\l  br i1 %40, label %41, label %77\l|{<s0>T|<s1>F}}"];
	Node0x4b96360:s0 -> Node0x4b99580;
	Node0x4b96360:s1 -> Node0x4b99610;
	Node0x4b99580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = add nsw i32 %4, -1\l  %43 = and i32 %32, 3\l  %44 = icmp ult i32 %32, 4\l  br i1 %44, label %47, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4b99580:s0 -> Node0x4b99960;
	Node0x4b99580:s1 -> Node0x4b999b0;
	Node0x4b999b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%45:\l45:                                               \l  %46 = and i32 %32, -4\l  br label %84\l}"];
	Node0x4b999b0 -> Node0x4b99bb0;
	Node0x4b99960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%47:\l47:                                               \l  %48 = phi i32 [ 0, %41 ], [ %174, %169 ]\l  %49 = icmp eq i32 %43, 0\l  br i1 %49, label %77, label %50\l|{<s0>T|<s1>F}}"];
	Node0x4b99960:s0 -> Node0x4b99610;
	Node0x4b99960:s1 -> Node0x4b99e70;
	Node0x4b99e70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%50:\l50:                                               \l  %51 = phi i32 [ %74, %69 ], [ %48, %47 ]\l  %52 = phi i32 [ %75, %69 ], [ 0, %47 ]\l  %53 = zext i32 %51 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %36, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %56 = tail call float @llvm.fabs.f32(float %55)\l  %57 = fcmp contract ogt float %56, %9\l  %58 = fcmp contract olt float %56, %10\l  %59 = and i1 %57, %58\l  br i1 %59, label %63, label %60\l|{<s0>T|<s1>F}}"];
	Node0x4b99e70:s0 -> Node0x4b9af30;
	Node0x4b99e70:s1 -> Node0x4b9afc0;
	Node0x4b9afc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%60:\l60:                                               \l  %61 = fcmp contract ult float %56, %10\l  %62 = select i1 %61, i32 %42, i32 0\l  br label %69\l}"];
	Node0x4b9afc0 -> Node0x4b99fe0;
	Node0x4b9af30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%63:\l63:                                               \l  %64 = fsub contract float %10, %56\l  %65 = tail call float @llvm.fabs.f32(float %64)\l  %66 = fmul contract float %65, %11\l  %67 = tail call float @llvm.ceil.f32(float %66)\l  %68 = fptosi float %67 to i32\l  br label %69\l}"];
	Node0x4b9af30 -> Node0x4b99fe0;
	Node0x4b99fe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%69:\l69:                                               \l  %70 = phi i32 [ %68, %63 ], [ %62, %60 ]\l  %71 = getelementptr inbounds i32, i32 addrspace(1)* %37, i64 %53\l  store i32 %70, i32 addrspace(1)* %71, align 4, !tbaa !11\l  %72 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %70\l  %73 = atomicrmw add i32 addrspace(3)* %72, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %74 = add nuw nsw i32 %51, 1\l  %75 = add i32 %52, 1\l  %76 = icmp eq i32 %75, %43\l  br i1 %76, label %77, label %50, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b99fe0:s0 -> Node0x4b99610;
	Node0x4b99fe0:s1 -> Node0x4b99e70;
	Node0x4b99610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%77:\l77:                                               \l  %78 = icmp sgt i32 %4, 0\l  br i1 %78, label %79, label %235\l|{<s0>T|<s1>F}}"];
	Node0x4b99610:s0 -> Node0x4b9c1d0;
	Node0x4b99610:s1 -> Node0x4b9c220;
	Node0x4b9c1d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%79:\l79:                                               \l  %80 = and i32 %4, 7\l  %81 = icmp ult i32 %4, 8\l  br i1 %81, label %222, label %82\l|{<s0>T|<s1>F}}"];
	Node0x4b9c1d0:s0 -> Node0x4b9c480;
	Node0x4b9c1d0:s1 -> Node0x4b9c4d0;
	Node0x4b9c4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%82:\l82:                                               \l  %83 = and i32 %4, -8\l  br label %177\l}"];
	Node0x4b9c4d0 -> Node0x4b9c6a0;
	Node0x4b99bb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%84:\l84:                                               \l  %85 = phi i32 [ 0, %45 ], [ %174, %169 ]\l  %86 = phi i32 [ 0, %45 ], [ %175, %169 ]\l  %87 = zext i32 %85 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %36, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = tail call float @llvm.fabs.f32(float %89)\l  %91 = fcmp contract ogt float %90, %9\l  %92 = fcmp contract olt float %90, %10\l  %93 = and i1 %91, %92\l  br i1 %93, label %94, label %100\l|{<s0>T|<s1>F}}"];
	Node0x4b99bb0:s0 -> Node0x4b9d390;
	Node0x4b99bb0:s1 -> Node0x4b9d420;
	Node0x4b9d390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%94:\l94:                                               \l  %95 = fsub contract float %10, %90\l  %96 = tail call float @llvm.fabs.f32(float %95)\l  %97 = fmul contract float %96, %11\l  %98 = tail call float @llvm.ceil.f32(float %97)\l  %99 = fptosi float %98 to i32\l  br label %103\l}"];
	Node0x4b9d390 -> Node0x4b9d8d0;
	Node0x4b9d420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%100:\l100:                                              \l  %101 = fcmp contract ult float %90, %10\l  %102 = select i1 %101, i32 %42, i32 0\l  br label %103\l}"];
	Node0x4b9d420 -> Node0x4b9d8d0;
	Node0x4b9d8d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%103:\l103:                                              \l  %104 = phi i32 [ %99, %94 ], [ %102, %100 ]\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %37, i64 %87\l  store i32 %104, i32 addrspace(1)* %105, align 4, !tbaa !11\l  %106 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %104\l  %107 = atomicrmw add i32 addrspace(3)* %106, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %108 = or i32 %85, 1\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %36, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = tail call float @llvm.fabs.f32(float %111)\l  %113 = fcmp contract ogt float %112, %9\l  %114 = fcmp contract olt float %112, %10\l  %115 = and i1 %113, %114\l  br i1 %115, label %119, label %116\l|{<s0>T|<s1>F}}"];
	Node0x4b9d8d0:s0 -> Node0x4b9e930;
	Node0x4b9d8d0:s1 -> Node0x4b9e980;
	Node0x4b9e980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%116:\l116:                                              \l  %117 = fcmp contract ult float %112, %10\l  %118 = select i1 %117, i32 %42, i32 0\l  br label %125\l}"];
	Node0x4b9e980 -> Node0x4b9ec00;
	Node0x4b9e930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%119:\l119:                                              \l  %120 = fsub contract float %10, %112\l  %121 = tail call float @llvm.fabs.f32(float %120)\l  %122 = fmul contract float %121, %11\l  %123 = tail call float @llvm.ceil.f32(float %122)\l  %124 = fptosi float %123 to i32\l  br label %125\l}"];
	Node0x4b9e930 -> Node0x4b9ec00;
	Node0x4b9ec00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%125:\l125:                                              \l  %126 = phi i32 [ %124, %119 ], [ %118, %116 ]\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %37, i64 %109\l  store i32 %126, i32 addrspace(1)* %127, align 4, !tbaa !11\l  %128 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %126\l  %129 = atomicrmw add i32 addrspace(3)* %128, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %130 = or i32 %85, 2\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %36, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = tail call float @llvm.fabs.f32(float %133)\l  %135 = fcmp contract ogt float %134, %9\l  %136 = fcmp contract olt float %134, %10\l  %137 = and i1 %135, %136\l  br i1 %137, label %141, label %138\l|{<s0>T|<s1>F}}"];
	Node0x4b9ec00:s0 -> Node0x4b9b700;
	Node0x4b9ec00:s1 -> Node0x4b9fd00;
	Node0x4b9fd00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%138:\l138:                                              \l  %139 = fcmp contract ult float %134, %10\l  %140 = select i1 %139, i32 %42, i32 0\l  br label %147\l}"];
	Node0x4b9fd00 -> Node0x4b9ff80;
	Node0x4b9b700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%141:\l141:                                              \l  %142 = fsub contract float %10, %134\l  %143 = tail call float @llvm.fabs.f32(float %142)\l  %144 = fmul contract float %143, %11\l  %145 = tail call float @llvm.ceil.f32(float %144)\l  %146 = fptosi float %145 to i32\l  br label %147\l}"];
	Node0x4b9b700 -> Node0x4b9ff80;
	Node0x4b9ff80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%147:\l147:                                              \l  %148 = phi i32 [ %146, %141 ], [ %140, %138 ]\l  %149 = getelementptr inbounds i32, i32 addrspace(1)* %37, i64 %131\l  store i32 %148, i32 addrspace(1)* %149, align 4, !tbaa !11\l  %150 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %148\l  %151 = atomicrmw add i32 addrspace(3)* %150, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %152 = or i32 %85, 3\l  %153 = zext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %36, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = tail call float @llvm.fabs.f32(float %155)\l  %157 = fcmp contract ogt float %156, %9\l  %158 = fcmp contract olt float %156, %10\l  %159 = and i1 %157, %158\l  br i1 %159, label %163, label %160\l|{<s0>T|<s1>F}}"];
	Node0x4b9ff80:s0 -> Node0x4ba0c00;
	Node0x4b9ff80:s1 -> Node0x4ba0c50;
	Node0x4ba0c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%160:\l160:                                              \l  %161 = fcmp contract ult float %156, %10\l  %162 = select i1 %161, i32 %42, i32 0\l  br label %169\l}"];
	Node0x4ba0c50 -> Node0x4b99ca0;
	Node0x4ba0c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%163:\l163:                                              \l  %164 = fsub contract float %10, %156\l  %165 = tail call float @llvm.fabs.f32(float %164)\l  %166 = fmul contract float %165, %11\l  %167 = tail call float @llvm.ceil.f32(float %166)\l  %168 = fptosi float %167 to i32\l  br label %169\l}"];
	Node0x4ba0c00 -> Node0x4b99ca0;
	Node0x4b99ca0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%169:\l169:                                              \l  %170 = phi i32 [ %168, %163 ], [ %162, %160 ]\l  %171 = getelementptr inbounds i32, i32 addrspace(1)* %37, i64 %153\l  store i32 %170, i32 addrspace(1)* %171, align 4, !tbaa !11\l  %172 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %170\l  %173 = atomicrmw add i32 addrspace(3)* %172, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %174 = add nuw nsw i32 %85, 4\l  %175 = add i32 %86, 4\l  %176 = icmp eq i32 %175, %46\l  br i1 %176, label %47, label %84, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4b99ca0:s0 -> Node0x4b99960;
	Node0x4b99ca0:s1 -> Node0x4b99bb0;
	Node0x4b9c6a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%177:\l177:                                              \l  %178 = phi i32 [ 0, %82 ], [ %219, %177 ]\l  %179 = phi i32 [ 0, %82 ], [ %220, %177 ]\l  %180 = zext i32 %178 to i64\l  %181 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %178\l  %182 = load i32, i32 addrspace(3)* %181, align 4, !tbaa !11\l  %183 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %180\l  store i32 %182, i32 addrspace(1)* %183, align 4, !tbaa !11\l  %184 = or i32 %178, 1\l  %185 = zext i32 %184 to i64\l  %186 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %184\l  %187 = load i32, i32 addrspace(3)* %186, align 4, !tbaa !11\l  %188 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %185\l  store i32 %187, i32 addrspace(1)* %188, align 4, !tbaa !11\l  %189 = or i32 %178, 2\l  %190 = zext i32 %189 to i64\l  %191 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %189\l  %192 = load i32, i32 addrspace(3)* %191, align 4, !tbaa !11\l  %193 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %190\l  store i32 %192, i32 addrspace(1)* %193, align 4, !tbaa !11\l  %194 = or i32 %178, 3\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %194\l  %197 = load i32, i32 addrspace(3)* %196, align 4, !tbaa !11\l  %198 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %195\l  store i32 %197, i32 addrspace(1)* %198, align 4, !tbaa !11\l  %199 = or i32 %178, 4\l  %200 = zext i32 %199 to i64\l  %201 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %199\l  %202 = load i32, i32 addrspace(3)* %201, align 4, !tbaa !11\l  %203 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %200\l  store i32 %202, i32 addrspace(1)* %203, align 4, !tbaa !11\l  %204 = or i32 %178, 5\l  %205 = zext i32 %204 to i64\l  %206 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %204\l  %207 = load i32, i32 addrspace(3)* %206, align 4, !tbaa !11\l  %208 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %205\l  store i32 %207, i32 addrspace(1)* %208, align 4, !tbaa !11\l  %209 = or i32 %178, 6\l  %210 = zext i32 %209 to i64\l  %211 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %209\l  %212 = load i32, i32 addrspace(3)* %211, align 4, !tbaa !11\l  %213 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %210\l  store i32 %212, i32 addrspace(1)* %213, align 4, !tbaa !11\l  %214 = or i32 %178, 7\l  %215 = zext i32 %214 to i64\l  %216 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %214\l  %217 = load i32, i32 addrspace(3)* %216, align 4, !tbaa !11\l  %218 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %215\l  store i32 %217, i32 addrspace(1)* %218, align 4, !tbaa !11\l  %219 = add nuw nsw i32 %178, 8\l  %220 = add i32 %179, 8\l  %221 = icmp eq i32 %220, %83\l  br i1 %221, label %222, label %177, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4b9c6a0:s0 -> Node0x4b9c480;
	Node0x4b9c6a0:s1 -> Node0x4b9c6a0;
	Node0x4b9c480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%222:\l222:                                              \l  %223 = phi i32 [ 0, %79 ], [ %219, %177 ]\l  %224 = icmp eq i32 %80, 0\l  br i1 %224, label %235, label %225\l|{<s0>T|<s1>F}}"];
	Node0x4b9c480:s0 -> Node0x4b9c220;
	Node0x4b9c480:s1 -> Node0x4ba3980;
	Node0x4ba3980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%225:\l225:                                              \l  %226 = phi i32 [ %232, %225 ], [ %223, %222 ]\l  %227 = phi i32 [ %233, %225 ], [ 0, %222 ]\l  %228 = zext i32 %226 to i64\l  %229 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @s_counter,\l... i32 0, i32 %226\l  %230 = load i32, i32 addrspace(3)* %229, align 4, !tbaa !11\l  %231 = getelementptr inbounds i32, i32 addrspace(1)* %39, i64 %228\l  store i32 %230, i32 addrspace(1)* %231, align 4, !tbaa !11\l  %232 = add nuw nsw i32 %226, 1\l  %233 = add i32 %227, 1\l  %234 = icmp eq i32 %233, %80\l  br i1 %234, label %235, label %225, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4ba3980:s0 -> Node0x4b9c220;
	Node0x4ba3980:s1 -> Node0x4ba3980;
	Node0x4b9c220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%235:\l235:                                              \l  ret void\l}"];
}
