digraph "CFG for '_Z10segmentMaxPfS_iiiii' function" {
	label="CFG for '_Z10segmentMaxPfS_iiiii' function";

	Node0x5794400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = mul i32 %13, %12\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = mul i32 %16, %4\l  %18 = icmp ugt i32 %17, %3\l  %19 = sub i32 %16, %5\l  %20 = add i32 %19, 1\l  %21 = mul i32 %20, %6\l  %22 = add i32 %21, %3\l  %23 = icmp ult i32 %22, %2\l  %24 = and i1 %18, %23\l  %25 = mul i32 %19, %6\l  %26 = add i32 %25, %3\l  %27 = select i1 %24, i32 %26, i32 %17\l  %28 = select i1 %24, i32 %6, i32 %4\l  %29 = zext i32 %27 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = icmp sgt i32 %28, 0\l  br i1 %31, label %32, label %117\l|{<s0>T|<s1>F}}"];
	Node0x5794400:s0 -> Node0x5796b90;
	Node0x5794400:s1 -> Node0x5796c20;
	Node0x5796b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%32:\l32:                                               \l  %33 = and i32 %28, 7\l  %34 = icmp ult i32 %28, 8\l  br i1 %34, label %99, label %35\l|{<s0>T|<s1>F}}"];
	Node0x5796b90:s0 -> Node0x5797000;
	Node0x5796b90:s1 -> Node0x5797050;
	Node0x5797050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%35:\l35:                                               \l  %36 = and i32 %28, -8\l  br label %37\l}"];
	Node0x5797050 -> Node0x5797250;
	Node0x5797250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%37:\l37:                                               \l  %38 = phi float [ 0.000000e+00, %35 ], [ %95, %37 ]\l  %39 = phi i32 [ 0, %35 ], [ %96, %37 ]\l  %40 = phi i32 [ 0, %35 ], [ %97, %37 ]\l  %41 = zext i32 %39 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %30, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = tail call float @llvm.fabs.f32(float %43)\l  %45 = fcmp contract olt float %38, %44\l  %46 = select i1 %45, float %44, float %38\l  %47 = or i32 %39, 1\l  %48 = zext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %30, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = tail call float @llvm.fabs.f32(float %50)\l  %52 = fcmp contract olt float %46, %51\l  %53 = select i1 %52, float %51, float %46\l  %54 = or i32 %39, 2\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %30, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = tail call float @llvm.fabs.f32(float %57)\l  %59 = fcmp contract olt float %53, %58\l  %60 = select i1 %59, float %58, float %53\l  %61 = or i32 %39, 3\l  %62 = zext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %30, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = tail call float @llvm.fabs.f32(float %64)\l  %66 = fcmp contract olt float %60, %65\l  %67 = select i1 %66, float %65, float %60\l  %68 = or i32 %39, 4\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %30, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = tail call float @llvm.fabs.f32(float %71)\l  %73 = fcmp contract olt float %67, %72\l  %74 = select i1 %73, float %72, float %67\l  %75 = or i32 %39, 5\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %30, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = tail call float @llvm.fabs.f32(float %78)\l  %80 = fcmp contract olt float %74, %79\l  %81 = select i1 %80, float %79, float %74\l  %82 = or i32 %39, 6\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %30, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = tail call float @llvm.fabs.f32(float %85)\l  %87 = fcmp contract olt float %81, %86\l  %88 = select i1 %87, float %86, float %81\l  %89 = or i32 %39, 7\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %30, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = tail call float @llvm.fabs.f32(float %92)\l  %94 = fcmp contract olt float %88, %93\l  %95 = select i1 %94, float %93, float %88\l  %96 = add nuw nsw i32 %39, 8\l  %97 = add i32 %40, 8\l  %98 = icmp eq i32 %97, %36\l  br i1 %98, label %99, label %37, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5797250:s0 -> Node0x5797000;
	Node0x5797250:s1 -> Node0x5797250;
	Node0x5797000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%99:\l99:                                               \l  %100 = phi float [ undef, %32 ], [ %95, %37 ]\l  %101 = phi float [ 0.000000e+00, %32 ], [ %95, %37 ]\l  %102 = phi i32 [ 0, %32 ], [ %96, %37 ]\l  %103 = icmp eq i32 %33, 0\l  br i1 %103, label %117, label %104\l|{<s0>T|<s1>F}}"];
	Node0x5797000:s0 -> Node0x5796c20;
	Node0x5797000:s1 -> Node0x579bf80;
	Node0x579bf80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%104:\l104:                                              \l  %105 = phi float [ %113, %104 ], [ %101, %99 ]\l  %106 = phi i32 [ %114, %104 ], [ %102, %99 ]\l  %107 = phi i32 [ %115, %104 ], [ 0, %99 ]\l  %108 = zext i32 %106 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %30, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = tail call float @llvm.fabs.f32(float %110)\l  %112 = fcmp contract olt float %105, %111\l  %113 = select i1 %112, float %111, float %105\l  %114 = add nuw nsw i32 %106, 1\l  %115 = add i32 %107, 1\l  %116 = icmp eq i32 %115, %33\l  br i1 %116, label %117, label %104, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x579bf80:s0 -> Node0x5796c20;
	Node0x579bf80:s1 -> Node0x579bf80;
	Node0x5796c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%117:\l117:                                              \l  %118 = phi float [ 0.000000e+00, %7 ], [ %100, %99 ], [ %113, %104 ]\l  %119 = zext i32 %16 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %1, i64 %119\l  store float %118, float addrspace(1)* %120, align 4, !tbaa !7\l  ret void\l}"];
}
