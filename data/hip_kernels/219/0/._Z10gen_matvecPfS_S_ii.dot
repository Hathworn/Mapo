digraph "CFG for '_Z10gen_matvecPfS_S_ii' function" {
	label="CFG for '_Z10gen_matvecPfS_S_ii' function";

	Node0x52f4840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp ult i32 %14, %3\l  br i1 %15, label %16, label %143\l|{<s0>T|<s1>F}}"];
	Node0x52f4840:s0 -> Node0x52f6700;
	Node0x52f4840:s1 -> Node0x52f6790;
	Node0x52f6700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %4, 0\l  br i1 %17, label %18, label %45\l|{<s0>T|<s1>F}}"];
	Node0x52f6700:s0 -> Node0x52f69e0;
	Node0x52f6700:s1 -> Node0x52f6a30;
	Node0x52f69e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = and i32 %4, 7\l  %20 = icmp ult i32 %4, 8\l  br i1 %20, label %23, label %21\l|{<s0>T|<s1>F}}"];
	Node0x52f69e0:s0 -> Node0x52f6cf0;
	Node0x52f69e0:s1 -> Node0x52f6d40;
	Node0x52f6d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %4, -8\l  br label %49\l}"];
	Node0x52f6d40 -> Node0x52f6f40;
	Node0x52f6cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = phi float [ undef, %18 ], [ %139, %49 ]\l  %25 = phi i32 [ 0, %18 ], [ %140, %49 ]\l  %26 = phi float [ 0.000000e+00, %18 ], [ %139, %49 ]\l  %27 = icmp eq i32 %19, 0\l  br i1 %27, label %45, label %28\l|{<s0>T|<s1>F}}"];
	Node0x52f6cf0:s0 -> Node0x52f6a30;
	Node0x52f6cf0:s1 -> Node0x52f81b0;
	Node0x52f81b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi i32 [ %42, %28 ], [ %25, %23 ]\l  %30 = phi float [ %41, %28 ], [ %26, %23 ]\l  %31 = phi i32 [ %43, %28 ], [ 0, %23 ]\l  %32 = zext i32 %29 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %35 = mul nsw i32 %29, %3\l  %36 = add i32 %35, %14\l  %37 = zext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fmul contract float %34, %39\l  %41 = fadd contract float %30, %40\l  %42 = add nuw nsw i32 %29, 1\l  %43 = add i32 %31, 1\l  %44 = icmp eq i32 %43, %19\l  br i1 %44, label %45, label %28, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x52f81b0:s0 -> Node0x52f6a30;
	Node0x52f81b0:s1 -> Node0x52f81b0;
	Node0x52f6a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%45:\l45:                                               \l  %46 = phi float [ 0.000000e+00, %16 ], [ %24, %23 ], [ %41, %28 ]\l  %47 = zext i32 %14 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %2, i64 %47\l  store float %46, float addrspace(1)* %48, align 4, !tbaa !7\l  br label %143\l}"];
	Node0x52f6a30 -> Node0x52f6790;
	Node0x52f6f40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%49:\l49:                                               \l  %50 = phi i32 [ 0, %21 ], [ %140, %49 ]\l  %51 = phi float [ 0.000000e+00, %21 ], [ %139, %49 ]\l  %52 = phi i32 [ 0, %21 ], [ %141, %49 ]\l  %53 = zext i32 %50 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %56 = mul nsw i32 %50, %3\l  %57 = add i32 %56, %14\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = fmul contract float %55, %60\l  %62 = fadd contract float %51, %61\l  %63 = or i32 %50, 1\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = mul nsw i32 %63, %3\l  %68 = add i32 %67, %14\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = fmul contract float %66, %71\l  %73 = fadd contract float %62, %72\l  %74 = or i32 %50, 2\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = mul nsw i32 %74, %3\l  %79 = add i32 %78, %14\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fmul contract float %77, %82\l  %84 = fadd contract float %73, %83\l  %85 = or i32 %50, 3\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = mul nsw i32 %85, %3\l  %90 = add i32 %89, %14\l  %91 = zext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %88, %93\l  %95 = fadd contract float %84, %94\l  %96 = or i32 %50, 4\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = mul nsw i32 %96, %3\l  %101 = add i32 %100, %14\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fmul contract float %99, %104\l  %106 = fadd contract float %95, %105\l  %107 = or i32 %50, 5\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = mul nsw i32 %107, %3\l  %112 = add i32 %111, %14\l  %113 = zext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %110, %115\l  %117 = fadd contract float %106, %116\l  %118 = or i32 %50, 6\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %1, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %122 = mul nsw i32 %118, %3\l  %123 = add i32 %122, %14\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fmul contract float %121, %126\l  %128 = fadd contract float %117, %127\l  %129 = or i32 %50, 7\l  %130 = zext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %1, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = mul nsw i32 %129, %3\l  %134 = add i32 %133, %14\l  %135 = zext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %0, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = fmul contract float %132, %137\l  %139 = fadd contract float %128, %138\l  %140 = add nuw nsw i32 %50, 8\l  %141 = add i32 %52, 8\l  %142 = icmp eq i32 %141, %22\l  br i1 %142, label %23, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x52f6f40:s0 -> Node0x52f6cf0;
	Node0x52f6f40:s1 -> Node0x52f6f40;
	Node0x52f6790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%143:\l143:                                              \l  ret void\l}"];
}
