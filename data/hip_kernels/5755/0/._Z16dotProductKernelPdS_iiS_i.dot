digraph "CFG for '_Z16dotProductKernelPdS_iiS_i' function" {
	label="CFG for '_Z16dotProductKernelPdS_iiS_i' function";

	Node0x4d52f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = freeze i32 %2\l  %21 = freeze i32 %19\l  %22 = sdiv i32 %20, %21\l  %23 = mul i32 %22, %21\l  %24 = sub i32 %20, %23\l  %25 = icmp ne i32 %24, 0\l  %26 = zext i1 %25 to i32\l  %27 = add nsw i32 %22, %26\l  %28 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %29 = freeze i32 %3\l  %30 = freeze i32 %14\l  %31 = sdiv i32 %29, %30\l  %32 = mul i32 %31, %30\l  %33 = sub i32 %29, %32\l  %34 = icmp ne i32 %33, 0\l  %35 = zext i1 %34 to i32\l  %36 = add nsw i32 %31, %35\l  %37 = mul i32 %27, %28\l  %38 = add nsw i32 %37, %27\l  %39 = tail call i32 @llvm.smin.i32(i32 %38, i32 %2)\l  %40 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %41 = mul i32 %36, %40\l  %42 = add nsw i32 %41, %36\l  %43 = tail call i32 @llvm.smin.i32(i32 %42, i32 %3)\l  %44 = icmp slt i32 %37, %2\l  %45 = icmp slt i32 %41, %3\l  %46 = select i1 %44, i1 %45, i1 false\l  %47 = icmp slt i32 %37, %39\l  %48 = select i1 %46, i1 %47, i1 false\l  br i1 %48, label %49, label %167\l|{<s0>T|<s1>F}}"];
	Node0x4d52f80:s0 -> Node0x4d564f0;
	Node0x4d52f80:s1 -> Node0x4d56580;
	Node0x4d564f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%49:\l49:                                               \l  %50 = icmp slt i32 %41, %43\l  %51 = icmp sgt i32 %5, 0\l  %52 = and i32 %5, 7\l  %53 = icmp ult i32 %5, 8\l  %54 = and i32 %5, -8\l  %55 = icmp eq i32 %52, 0\l  br label %56\l}"];
	Node0x4d564f0 -> Node0x4d56ab0;
	Node0x4d56ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%56:\l56:                                               \l  %57 = phi i32 [ %37, %49 ], [ %64, %63 ]\l  br i1 %50, label %58, label %63\l|{<s0>T|<s1>F}}"];
	Node0x4d56ab0:s0 -> Node0x4d56ce0;
	Node0x4d56ab0:s1 -> Node0x4d56ba0;
	Node0x4d56ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%58:\l58:                                               \l  %59 = mul nsw i32 %57, %5\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %0, i64 %60\l  %62 = mul nsw i32 %57, %3\l  br label %66\l}"];
	Node0x4d56ce0 -> Node0x4d57050;
	Node0x4d56ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%63:\l63:                                               \l  %64 = add nsw i32 %57, 1\l  %65 = icmp slt i32 %64, %39\l  br i1 %65, label %56, label %167, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4d56ba0:s0 -> Node0x4d56ab0;
	Node0x4d56ba0:s1 -> Node0x4d56580;
	Node0x4d57050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%66:\l66:                                               \l  %67 = phi i32 [ %41, %58 ], [ %165, %160 ]\l  %68 = mul nsw i32 %67, %5\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %1, i64 %69\l  br i1 %51, label %71, label %160\l|{<s0>T|<s1>F}}"];
	Node0x4d57050:s0 -> Node0x4d578c0;
	Node0x4d57050:s1 -> Node0x4d575e0;
	Node0x4d578c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%71:\l71:                                               \l  br i1 %53, label %142, label %72\l|{<s0>T|<s1>F}}"];
	Node0x4d578c0:s0 -> Node0x4d57a00;
	Node0x4d578c0:s1 -> Node0x4d57a50;
	Node0x4d57a50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%72:\l72:                                               \l  %73 = phi i32 [ %139, %72 ], [ 0, %71 ]\l  %74 = phi double [ %138, %72 ], [ 0.000000e+00, %71 ]\l  %75 = phi i32 [ %140, %72 ], [ 0, %71 ]\l  %76 = zext i32 %73 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %61, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !18\l  %79 = getelementptr inbounds double, double addrspace(1)* %70, i64 %76\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !18\l  %81 = fmul contract double %78, %80\l  %82 = fadd contract double %74, %81\l  %83 = or i32 %73, 1\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds double, double addrspace(1)* %61, i64 %84\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !18\l  %87 = getelementptr inbounds double, double addrspace(1)* %70, i64 %84\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !18\l  %89 = fmul contract double %86, %88\l  %90 = fadd contract double %82, %89\l  %91 = or i32 %73, 2\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %61, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !18\l  %95 = getelementptr inbounds double, double addrspace(1)* %70, i64 %92\l  %96 = load double, double addrspace(1)* %95, align 8, !tbaa !18\l  %97 = fmul contract double %94, %96\l  %98 = fadd contract double %90, %97\l  %99 = or i32 %73, 3\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds double, double addrspace(1)* %61, i64 %100\l  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !18\l  %103 = getelementptr inbounds double, double addrspace(1)* %70, i64 %100\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !18\l  %105 = fmul contract double %102, %104\l  %106 = fadd contract double %98, %105\l  %107 = or i32 %73, 4\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds double, double addrspace(1)* %61, i64 %108\l  %110 = load double, double addrspace(1)* %109, align 8, !tbaa !18\l  %111 = getelementptr inbounds double, double addrspace(1)* %70, i64 %108\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !18\l  %113 = fmul contract double %110, %112\l  %114 = fadd contract double %106, %113\l  %115 = or i32 %73, 5\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds double, double addrspace(1)* %61, i64 %116\l  %118 = load double, double addrspace(1)* %117, align 8, !tbaa !18\l  %119 = getelementptr inbounds double, double addrspace(1)* %70, i64 %116\l  %120 = load double, double addrspace(1)* %119, align 8, !tbaa !18\l  %121 = fmul contract double %118, %120\l  %122 = fadd contract double %114, %121\l  %123 = or i32 %73, 6\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds double, double addrspace(1)* %61, i64 %124\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !18\l  %127 = getelementptr inbounds double, double addrspace(1)* %70, i64 %124\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !18\l  %129 = fmul contract double %126, %128\l  %130 = fadd contract double %122, %129\l  %131 = or i32 %73, 7\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds double, double addrspace(1)* %61, i64 %132\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !18\l  %135 = getelementptr inbounds double, double addrspace(1)* %70, i64 %132\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !18\l  %137 = fmul contract double %134, %136\l  %138 = fadd contract double %130, %137\l  %139 = add nuw nsw i32 %73, 8\l  %140 = add i32 %75, 8\l  %141 = icmp eq i32 %140, %54\l  br i1 %141, label %142, label %72, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4d57a50:s0 -> Node0x4d57a00;
	Node0x4d57a50:s1 -> Node0x4d57a50;
	Node0x4d57a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%142:\l142:                                              \l  %143 = phi double [ undef, %71 ], [ %138, %72 ]\l  %144 = phi i32 [ 0, %71 ], [ %139, %72 ]\l  %145 = phi double [ 0.000000e+00, %71 ], [ %138, %72 ]\l  br i1 %55, label %160, label %146\l|{<s0>T|<s1>F}}"];
	Node0x4d57a00:s0 -> Node0x4d575e0;
	Node0x4d57a00:s1 -> Node0x4d5c020;
	Node0x4d5c020 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%146:\l146:                                              \l  %147 = phi i32 [ %157, %146 ], [ %144, %142 ]\l  %148 = phi double [ %156, %146 ], [ %145, %142 ]\l  %149 = phi i32 [ %158, %146 ], [ 0, %142 ]\l  %150 = zext i32 %147 to i64\l  %151 = getelementptr inbounds double, double addrspace(1)* %61, i64 %150\l  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !18\l  %153 = getelementptr inbounds double, double addrspace(1)* %70, i64 %150\l  %154 = load double, double addrspace(1)* %153, align 8, !tbaa !18\l  %155 = fmul contract double %152, %154\l  %156 = fadd contract double %148, %155\l  %157 = add nuw nsw i32 %147, 1\l  %158 = add i32 %149, 1\l  %159 = icmp eq i32 %158, %52\l  br i1 %159, label %160, label %146, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4d5c020:s0 -> Node0x4d575e0;
	Node0x4d5c020:s1 -> Node0x4d5c020;
	Node0x4d575e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%160:\l160:                                              \l  %161 = phi double [ 0.000000e+00, %66 ], [ %143, %142 ], [ %156, %146 ]\l  %162 = add nsw i32 %67, %62\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds double, double addrspace(1)* %4, i64 %163\l  store double %161, double addrspace(1)* %164, align 8, !tbaa !18\l  %165 = add nsw i32 %67, 1\l  %166 = icmp slt i32 %165, %43\l  br i1 %166, label %66, label %63, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x4d575e0:s0 -> Node0x4d57050;
	Node0x4d575e0:s1 -> Node0x4d56ba0;
	Node0x4d56580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%167:\l167:                                              \l  ret void\l}"];
}
