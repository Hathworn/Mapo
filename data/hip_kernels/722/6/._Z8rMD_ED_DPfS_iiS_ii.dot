digraph "CFG for '_Z8rMD_ED_DPfS_iiS_ii' function" {
	label="CFG for '_Z8rMD_ED_DPfS_iiS_ii' function";

	Node0x56f5b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp eq i32 %6, 0\l  %18 = freeze i32 %16\l  %19 = freeze i32 %2\l  %20 = sdiv i32 %18, %19\l  %21 = shl i32 %2, 1\l  %22 = mul i32 %21, %3\l  %23 = mul i32 %22, %20\l  %24 = mul i32 %20, %19\l  %25 = sub i32 %18, %24\l  %26 = add nsw i32 %23, %25\l  %27 = mul nsw i32 %5, %2\l  %28 = icmp slt i32 %16, %27\l  br i1 %17, label %29, label %209\l|{<s0>T|<s1>F}}"];
	Node0x56f5b70:s0 -> Node0x56f80c0;
	Node0x56f5b70:s1 -> Node0x56f8150;
	Node0x56f80c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%29:\l29:                                               \l  br i1 %28, label %30, label %305\l|{<s0>T|<s1>F}}"];
	Node0x56f80c0:s0 -> Node0x56f8290;
	Node0x56f80c0:s1 -> Node0x56f82e0;
	Node0x56f8290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%30:\l30:                                               \l  %31 = icmp eq i32 %15, 0\l  br i1 %31, label %32, label %115\l|{<s0>T|<s1>F}}"];
	Node0x56f8290:s0 -> Node0x56f84b0;
	Node0x56f8290:s1 -> Node0x56f8500;
	Node0x56f84b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%32:\l32:                                               \l  %33 = sext i32 %3 to i64\l  %34 = icmp sgt i32 %3, 0\l  br i1 %34, label %35, label %115\l|{<s0>T|<s1>F}}"];
	Node0x56f84b0:s0 -> Node0x56f8850;
	Node0x56f84b0:s1 -> Node0x56f8500;
	Node0x56f8850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%35:\l35:                                               \l  %36 = sext i32 %2 to i64\l  %37 = icmp sgt i32 %2, 0\l  %38 = and i64 %36, 7\l  %39 = icmp ult i32 %2, 8\l  %40 = and i64 %36, -8\l  %41 = icmp eq i64 %38, 0\l  br label %42\l}"];
	Node0x56f8850 -> Node0x56f8d50;
	Node0x56f8d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%42:\l42:                                               \l  %43 = phi i64 [ 0, %35 ], [ %113, %112 ]\l  br i1 %37, label %44, label %112\l|{<s0>T|<s1>F}}"];
	Node0x56f8d50:s0 -> Node0x56f8f80;
	Node0x56f8d50:s1 -> Node0x56f8e40;
	Node0x56f8f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%44:\l44:                                               \l  %45 = mul nsw i64 %43, %36\l  br i1 %39, label %99, label %46\l|{<s0>T|<s1>F}}"];
	Node0x56f8f80:s0 -> Node0x56f9150;
	Node0x56f8f80:s1 -> Node0x56f91a0;
	Node0x56f91a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%46:\l46:                                               \l  %47 = phi i64 [ %96, %46 ], [ 0, %44 ]\l  %48 = phi i64 [ %97, %46 ], [ 0, %44 ]\l  %49 = add nsw i64 %47, %45\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = trunc i64 %49 to i32\l  %53 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %52\l  store float %51, float addrspace(3)* %53, align 4, !tbaa !7\l  %54 = or i64 %47, 1\l  %55 = add nsw i64 %54, %45\l  %56 = getelementptr inbounds float, float addrspace(1)* %1, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = trunc i64 %55 to i32\l  %59 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %58\l  store float %57, float addrspace(3)* %59, align 4, !tbaa !7\l  %60 = or i64 %47, 2\l  %61 = add nsw i64 %60, %45\l  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = trunc i64 %61 to i32\l  %65 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %64\l  store float %63, float addrspace(3)* %65, align 4, !tbaa !7\l  %66 = or i64 %47, 3\l  %67 = add nsw i64 %66, %45\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = trunc i64 %67 to i32\l  %71 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %70\l  store float %69, float addrspace(3)* %71, align 4, !tbaa !7\l  %72 = or i64 %47, 4\l  %73 = add nsw i64 %72, %45\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = trunc i64 %73 to i32\l  %77 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %76\l  store float %75, float addrspace(3)* %77, align 4, !tbaa !7\l  %78 = or i64 %47, 5\l  %79 = add nsw i64 %78, %45\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = trunc i64 %79 to i32\l  %83 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %82\l  store float %81, float addrspace(3)* %83, align 4, !tbaa !7\l  %84 = or i64 %47, 6\l  %85 = add nsw i64 %84, %45\l  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = trunc i64 %85 to i32\l  %89 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %88\l  store float %87, float addrspace(3)* %89, align 4, !tbaa !7\l  %90 = or i64 %47, 7\l  %91 = add nsw i64 %90, %45\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = trunc i64 %91 to i32\l  %95 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %94\l  store float %93, float addrspace(3)* %95, align 4, !tbaa !7\l  %96 = add nuw nsw i64 %47, 8\l  %97 = add i64 %48, 8\l  %98 = icmp eq i64 %97, %40\l  br i1 %98, label %99, label %46, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x56f91a0:s0 -> Node0x56f9150;
	Node0x56f91a0:s1 -> Node0x56f91a0;
	Node0x56f9150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%99:\l99:                                               \l  %100 = phi i64 [ 0, %44 ], [ %96, %46 ]\l  br i1 %41, label %112, label %101\l|{<s0>T|<s1>F}}"];
	Node0x56f9150:s0 -> Node0x56f8e40;
	Node0x56f9150:s1 -> Node0x56fca60;
	Node0x56fca60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%101:\l101:                                              \l  %102 = phi i64 [ %109, %101 ], [ %100, %99 ]\l  %103 = phi i64 [ %110, %101 ], [ 0, %99 ]\l  %104 = add nsw i64 %102, %45\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = trunc i64 %104 to i32\l  %108 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %107\l  store float %106, float addrspace(3)* %108, align 4, !tbaa !7\l  %109 = add nuw nsw i64 %102, 1\l  %110 = add i64 %103, 1\l  %111 = icmp eq i64 %110, %38\l  br i1 %111, label %112, label %101, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x56fca60:s0 -> Node0x56f8e40;
	Node0x56fca60:s1 -> Node0x56fca60;
	Node0x56f8e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%112:\l112:                                              \l  %113 = add nuw nsw i64 %43, 1\l  %114 = icmp eq i64 %113, %33\l  br i1 %114, label %115, label %42, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56f8e40:s0 -> Node0x56f8500;
	Node0x56f8e40:s1 -> Node0x56f8d50;
	Node0x56f8500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%115:\l115:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %116 = sext i32 %2 to i64\l  %117 = icmp sgt i32 %2, 0\l  br i1 %117, label %118, label %186\l|{<s0>T|<s1>F}}"];
	Node0x56f8500:s0 -> Node0x56fd9d0;
	Node0x56f8500:s1 -> Node0x56fda20;
	Node0x56fd9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%118:\l118:                                              \l  %119 = sext i32 %3 to i64\l  %120 = icmp sgt i32 %3, 0\l  %121 = sext i32 %26 to i64\l  %122 = shl nsw i64 %116, 1\l  %123 = and i64 %119, 1\l  %124 = icmp eq i32 %3, 1\l  %125 = and i64 %119, -2\l  %126 = icmp eq i64 %123, 0\l  br label %127\l}"];
	Node0x56fd9d0 -> Node0x56fdfa0;
	Node0x56fdfa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%127:\l127:                                              \l  %128 = phi i64 [ 0, %118 ], [ %184, %181 ]\l  %129 = phi float [ 0.000000e+00, %118 ], [ %183, %181 ]\l  br i1 %120, label %130, label %181\l|{<s0>T|<s1>F}}"];
	Node0x56fdfa0:s0 -> Node0x56faf20;
	Node0x56fdfa0:s1 -> Node0x56fe090;
	Node0x56faf20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%130:\l130:                                              \l  %131 = add nsw i64 %128, %121\l  br i1 %124, label %164, label %132\l|{<s0>T|<s1>F}}"];
	Node0x56faf20:s0 -> Node0x56fb0f0;
	Node0x56faf20:s1 -> Node0x56fb140;
	Node0x56fb140 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%132:\l132:                                              \l  %133 = phi i64 [ %161, %132 ], [ 0, %130 ]\l  %134 = phi float [ %160, %132 ], [ 0.000000e+00, %130 ]\l  %135 = phi i64 [ %162, %132 ], [ 0, %130 ]\l  %136 = mul nsw i64 %122, %133\l  %137 = add nsw i64 %131, %136\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = mul nsw i64 %133, %116\l  %141 = add nsw i64 %140, %128\l  %142 = trunc i64 %141 to i32\l  %143 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %142\l  %144 = load float, float addrspace(3)* %143, align 4, !tbaa !7\l  %145 = fsub contract float %139, %144\l  %146 = fmul contract float %145, %145\l  %147 = fadd contract float %134, %146\l  %148 = or i64 %133, 1\l  %149 = mul nsw i64 %122, %148\l  %150 = add nsw i64 %131, %149\l  %151 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %153 = mul nsw i64 %148, %116\l  %154 = add nsw i64 %153, %128\l  %155 = trunc i64 %154 to i32\l  %156 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %155\l  %157 = load float, float addrspace(3)* %156, align 4, !tbaa !7\l  %158 = fsub contract float %152, %157\l  %159 = fmul contract float %158, %158\l  %160 = fadd contract float %147, %159\l  %161 = add nuw nsw i64 %133, 2\l  %162 = add i64 %135, 2\l  %163 = icmp eq i64 %162, %125\l  br i1 %163, label %164, label %132, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x56fb140:s0 -> Node0x56fb0f0;
	Node0x56fb140:s1 -> Node0x56fb140;
	Node0x56fb0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%164:\l164:                                              \l  %165 = phi float [ undef, %130 ], [ %160, %132 ]\l  %166 = phi i64 [ 0, %130 ], [ %161, %132 ]\l  %167 = phi float [ 0.000000e+00, %130 ], [ %160, %132 ]\l  br i1 %126, label %181, label %168\l|{<s0>T|<s1>F}}"];
	Node0x56fb0f0:s0 -> Node0x56fe090;
	Node0x56fb0f0:s1 -> Node0x5700f80;
	Node0x5700f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%168:\l168:                                              \l  %169 = mul nsw i64 %122, %166\l  %170 = add nsw i64 %131, %169\l  %171 = getelementptr inbounds float, float addrspace(1)* %0, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %173 = mul nsw i64 %166, %116\l  %174 = add nsw i64 %173, %128\l  %175 = trunc i64 %174 to i32\l  %176 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %175\l  %177 = load float, float addrspace(3)* %176, align 4, !tbaa !7\l  %178 = fsub contract float %172, %177\l  %179 = fmul contract float %178, %178\l  %180 = fadd contract float %167, %179\l  br label %181\l}"];
	Node0x5700f80 -> Node0x56fe090;
	Node0x56fe090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%181:\l181:                                              \l  %182 = phi float [ 0.000000e+00, %127 ], [ %165, %164 ], [ %180, %168 ]\l  %183 = fadd contract float %129, %182\l  %184 = add nuw nsw i64 %128, 1\l  %185 = icmp eq i64 %184, %116\l  br i1 %185, label %186, label %127, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x56fe090:s0 -> Node0x56fda20;
	Node0x56fe090:s1 -> Node0x56fdfa0;
	Node0x56fda20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%186:\l186:                                              \l  %187 = phi float [ 0.000000e+00, %115 ], [ %183, %181 ]\l  %188 = fcmp olt float %187, 0x39F0000000000000\l  %189 = select i1 %188, float 0x41F0000000000000, float 1.000000e+00\l  %190 = fmul float %187, %189\l  %191 = tail call float @llvm.sqrt.f32(float %190)\l  %192 = bitcast float %191 to i32\l  %193 = add nsw i32 %192, -1\l  %194 = bitcast i32 %193 to float\l  %195 = add nsw i32 %192, 1\l  %196 = bitcast i32 %195 to float\l  %197 = tail call i1 @llvm.amdgcn.class.f32(float %190, i32 608)\l  %198 = select i1 %188, float 0x3EF0000000000000, float 1.000000e+00\l  %199 = fneg float %196\l  %200 = tail call float @llvm.fma.f32(float %199, float %191, float %190)\l  %201 = fcmp ogt float %200, 0.000000e+00\l  %202 = fneg float %194\l  %203 = tail call float @llvm.fma.f32(float %202, float %191, float %190)\l  %204 = fcmp ole float %203, 0.000000e+00\l  %205 = select i1 %204, float %194, float %191\l  %206 = select i1 %201, float %196, float %205\l  %207 = fmul float %198, %206\l  %208 = select i1 %197, float %190, float %207\l  br label %301\l}"];
	Node0x56fda20 -> Node0x5702db0;
	Node0x56f8150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%209:\l209:                                              \l  br i1 %28, label %210, label %305\l|{<s0>T|<s1>F}}"];
	Node0x56f8150:s0 -> Node0x5702eb0;
	Node0x56f8150:s1 -> Node0x56f82e0;
	Node0x5702eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%210:\l210:                                              \l  %211 = sext i32 %2 to i64\l  %212 = icmp sgt i32 %2, 0\l  br i1 %212, label %213, label %278\l|{<s0>T|<s1>F}}"];
	Node0x5702eb0:s0 -> Node0x57030b0;
	Node0x5702eb0:s1 -> Node0x5703100;
	Node0x57030b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%213:\l213:                                              \l  %214 = sext i32 %3 to i64\l  %215 = icmp sgt i32 %3, 0\l  %216 = sext i32 %26 to i64\l  %217 = shl nsw i64 %211, 1\l  %218 = and i64 %214, 1\l  %219 = icmp eq i32 %3, 1\l  %220 = and i64 %214, -2\l  %221 = icmp eq i64 %218, 0\l  br label %222\l}"];
	Node0x57030b0 -> Node0x5703680;
	Node0x5703680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%222:\l222:                                              \l  %223 = phi i64 [ 0, %213 ], [ %276, %273 ]\l  %224 = phi float [ 0.000000e+00, %213 ], [ %275, %273 ]\l  br i1 %215, label %225, label %273\l|{<s0>T|<s1>F}}"];
	Node0x5703680:s0 -> Node0x57039a0;
	Node0x5703680:s1 -> Node0x5703740;
	Node0x57039a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%225:\l225:                                              \l  %226 = add nsw i64 %223, %216\l  br i1 %219, label %257, label %227\l|{<s0>T|<s1>F}}"];
	Node0x57039a0:s0 -> Node0x5703b70;
	Node0x57039a0:s1 -> Node0x5703bc0;
	Node0x5703bc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%227:\l227:                                              \l  %228 = phi i64 [ %254, %227 ], [ 0, %225 ]\l  %229 = phi float [ %253, %227 ], [ 0.000000e+00, %225 ]\l  %230 = phi i64 [ %255, %227 ], [ 0, %225 ]\l  %231 = mul nsw i64 %217, %228\l  %232 = add nsw i64 %226, %231\l  %233 = getelementptr inbounds float, float addrspace(1)* %0, i64 %232\l  %234 = load float, float addrspace(1)* %233, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %235 = mul nsw i64 %228, %211\l  %236 = add nsw i64 %235, %223\l  %237 = getelementptr inbounds float, float addrspace(1)* %1, i64 %236\l  %238 = load float, float addrspace(1)* %237, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %239 = fsub contract float %234, %238\l  %240 = fmul contract float %239, %239\l  %241 = fadd contract float %229, %240\l  %242 = or i64 %228, 1\l  %243 = mul nsw i64 %217, %242\l  %244 = add nsw i64 %226, %243\l  %245 = getelementptr inbounds float, float addrspace(1)* %0, i64 %244\l  %246 = load float, float addrspace(1)* %245, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %247 = mul nsw i64 %242, %211\l  %248 = add nsw i64 %247, %223\l  %249 = getelementptr inbounds float, float addrspace(1)* %1, i64 %248\l  %250 = load float, float addrspace(1)* %249, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %251 = fsub contract float %246, %250\l  %252 = fmul contract float %251, %251\l  %253 = fadd contract float %241, %252\l  %254 = add nuw nsw i64 %228, 2\l  %255 = add i64 %230, 2\l  %256 = icmp eq i64 %255, %220\l  br i1 %256, label %257, label %227, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5703bc0:s0 -> Node0x5703b70;
	Node0x5703bc0:s1 -> Node0x5703bc0;
	Node0x5703b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%257:\l257:                                              \l  %258 = phi float [ undef, %225 ], [ %253, %227 ]\l  %259 = phi i64 [ 0, %225 ], [ %254, %227 ]\l  %260 = phi float [ 0.000000e+00, %225 ], [ %253, %227 ]\l  br i1 %221, label %273, label %261\l|{<s0>T|<s1>F}}"];
	Node0x5703b70:s0 -> Node0x5703740;
	Node0x5703b70:s1 -> Node0x56fe590;
	Node0x56fe590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%261:\l261:                                              \l  %262 = mul nsw i64 %217, %259\l  %263 = add nsw i64 %226, %262\l  %264 = getelementptr inbounds float, float addrspace(1)* %0, i64 %263\l  %265 = load float, float addrspace(1)* %264, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %266 = mul nsw i64 %259, %211\l  %267 = add nsw i64 %266, %223\l  %268 = getelementptr inbounds float, float addrspace(1)* %1, i64 %267\l  %269 = load float, float addrspace(1)* %268, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %270 = fsub contract float %265, %269\l  %271 = fmul contract float %270, %270\l  %272 = fadd contract float %260, %271\l  br label %273\l}"];
	Node0x56fe590 -> Node0x5703740;
	Node0x5703740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%273:\l273:                                              \l  %274 = phi float [ 0.000000e+00, %222 ], [ %258, %257 ], [ %272, %261 ]\l  %275 = fadd contract float %224, %274\l  %276 = add nuw nsw i64 %223, 1\l  %277 = icmp eq i64 %276, %211\l  br i1 %277, label %278, label %222, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5703740:s0 -> Node0x5703100;
	Node0x5703740:s1 -> Node0x5703680;
	Node0x5703100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%278:\l278:                                              \l  %279 = phi float [ 0.000000e+00, %210 ], [ %275, %273 ]\l  %280 = fcmp olt float %279, 0x39F0000000000000\l  %281 = select i1 %280, float 0x41F0000000000000, float 1.000000e+00\l  %282 = fmul float %279, %281\l  %283 = tail call float @llvm.sqrt.f32(float %282)\l  %284 = bitcast float %283 to i32\l  %285 = add nsw i32 %284, -1\l  %286 = bitcast i32 %285 to float\l  %287 = add nsw i32 %284, 1\l  %288 = bitcast i32 %287 to float\l  %289 = tail call i1 @llvm.amdgcn.class.f32(float %282, i32 608)\l  %290 = select i1 %280, float 0x3EF0000000000000, float 1.000000e+00\l  %291 = fneg float %288\l  %292 = tail call float @llvm.fma.f32(float %291, float %283, float %282)\l  %293 = fcmp ogt float %292, 0.000000e+00\l  %294 = fneg float %286\l  %295 = tail call float @llvm.fma.f32(float %294, float %283, float %282)\l  %296 = fcmp ole float %295, 0.000000e+00\l  %297 = select i1 %296, float %286, float %283\l  %298 = select i1 %293, float %288, float %297\l  %299 = fmul float %290, %298\l  %300 = select i1 %289, float %282, float %299\l  br label %301\l}"];
	Node0x5703100 -> Node0x5702db0;
	Node0x5702db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%301:\l301:                                              \l  %302 = phi float [ %300, %278 ], [ %208, %186 ]\l  %303 = sext i32 %16 to i64\l  %304 = getelementptr inbounds float, float addrspace(1)* %4, i64 %303\l  store float %302, float addrspace(1)* %304, align 4, !tbaa !7\l  br label %305\l}"];
	Node0x5702db0 -> Node0x56f82e0;
	Node0x56f82e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%305:\l305:                                              \l  ret void\l}"];
}
