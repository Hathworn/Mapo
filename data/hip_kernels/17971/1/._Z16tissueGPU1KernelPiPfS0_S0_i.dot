digraph "CFG for '_Z16tissueGPU1KernelPiPfS0_S0_i' function" {
	label="CFG for '_Z16tissueGPU1KernelPiPfS0_S0_i' function";

	Node0x4eb7820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = shl nsw i32 %4, 1\l  %16 = icmp slt i32 %14, %4\l  br i1 %16, label %17, label %130\l|{<s0>T|<s1>F}}"];
	Node0x4eb7820:s0 -> Node0x4eb8170;
	Node0x4eb7820:s1 -> Node0x4eb9880;
	Node0x4eb8170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%17:\l17:                                               \l  %18 = sext i32 %14 to i64\l  %19 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %18\l  %20 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %21 = add nsw i32 %14, %4\l  %22 = sext i32 %21 to i64\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %22\l  %24 = load i32, i32 addrspace(1)* %23, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %25 = add nsw i32 %14, %15\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %26\l  %28 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %29 = icmp sgt i32 %4, 0\l  br i1 %29, label %30, label %127\l|{<s0>T|<s1>F}}"];
	Node0x4eb8170:s0 -> Node0x4ebae40;
	Node0x4eb8170:s1 -> Node0x4ebaed0;
	Node0x4ebae40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%30:\l30:                                               \l  %31 = and i32 %4, 1\l  %32 = icmp eq i32 %4, 1\l  br i1 %32, label %95, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4ebae40:s0 -> Node0x4eb9770;
	Node0x4ebae40:s1 -> Node0x4eb97c0;
	Node0x4eb97c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%33:\l33:                                               \l  %34 = and i32 %4, -2\l  br label %35\l}"];
	Node0x4eb97c0 -> Node0x4ebb480;
	Node0x4ebb480 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%35:\l35:                                               \l  %36 = phi float [ 0.000000e+00, %33 ], [ %91, %35 ]\l  %37 = phi i32 [ 0, %33 ], [ %92, %35 ]\l  %38 = phi i32 [ 0, %33 ], [ %93, %35 ]\l  %39 = zext i32 %37 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %42 = add nsw i32 %37, %4\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %46 = add nsw i32 %37, %15\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %47\l  %49 = load i32, i32 addrspace(1)* %48, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %50 = sub nsw i32 %41, %20\l  %51 = tail call i32 @llvm.abs.i32(i32 %50, i1 true)\l  %52 = sub nsw i32 %45, %24\l  %53 = tail call i32 @llvm.abs.i32(i32 %52, i1 true)\l  %54 = add nuw nsw i32 %53, %51\l  %55 = sub nsw i32 %49, %28\l  %56 = tail call i32 @llvm.abs.i32(i32 %55, i1 true)\l  %57 = add nuw nsw i32 %54, %56\l  %58 = getelementptr inbounds float, float addrspace(1)* %3, i64 %39\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %60 = zext i32 %57 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %63 = fmul contract float %59, %62\l  %64 = fadd contract float %36, %63\l  %65 = or i32 %37, 1\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %66\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %69 = add nsw i32 %65, %4\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %70\l  %72 = load i32, i32 addrspace(1)* %71, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %73 = add nsw i32 %65, %15\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %74\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %77 = sub nsw i32 %68, %20\l  %78 = tail call i32 @llvm.abs.i32(i32 %77, i1 true)\l  %79 = sub nsw i32 %72, %24\l  %80 = tail call i32 @llvm.abs.i32(i32 %79, i1 true)\l  %81 = add nuw nsw i32 %80, %78\l  %82 = sub nsw i32 %76, %28\l  %83 = tail call i32 @llvm.abs.i32(i32 %82, i1 true)\l  %84 = add nuw nsw i32 %81, %83\l  %85 = getelementptr inbounds float, float addrspace(1)* %3, i64 %66\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %87 = zext i32 %84 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %90 = fmul contract float %86, %89\l  %91 = fadd contract float %64, %90\l  %92 = add nuw nsw i32 %37, 2\l  %93 = add i32 %38, 2\l  %94 = icmp eq i32 %93, %34\l  br i1 %94, label %95, label %35, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4ebb480:s0 -> Node0x4eb9770;
	Node0x4ebb480:s1 -> Node0x4ebb480;
	Node0x4eb9770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%95:\l95:                                               \l  %96 = phi float [ undef, %30 ], [ %91, %35 ]\l  %97 = phi float [ 0.000000e+00, %30 ], [ %91, %35 ]\l  %98 = phi i32 [ 0, %30 ], [ %92, %35 ]\l  %99 = icmp eq i32 %31, 0\l  br i1 %99, label %127, label %100\l|{<s0>T|<s1>F}}"];
	Node0x4eb9770:s0 -> Node0x4ebaed0;
	Node0x4eb9770:s1 -> Node0x4ebf900;
	Node0x4ebf900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%100:\l100:                                              \l  %101 = zext i32 %98 to i64\l  %102 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %101\l  %103 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = add nsw i32 %98, %4\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %105\l  %107 = load i32, i32 addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = add nsw i32 %98, %15\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %109\l  %111 = load i32, i32 addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = sub nsw i32 %103, %20\l  %113 = tail call i32 @llvm.abs.i32(i32 %112, i1 true)\l  %114 = sub nsw i32 %107, %24\l  %115 = tail call i32 @llvm.abs.i32(i32 %114, i1 true)\l  %116 = add nuw nsw i32 %115, %113\l  %117 = sub nsw i32 %111, %28\l  %118 = tail call i32 @llvm.abs.i32(i32 %117, i1 true)\l  %119 = add nuw nsw i32 %116, %118\l  %120 = getelementptr inbounds float, float addrspace(1)* %3, i64 %101\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %122 = zext i32 %119 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %125 = fmul contract float %121, %124\l  %126 = fadd contract float %97, %125\l  br label %127\l}"];
	Node0x4ebf900 -> Node0x4ebaed0;
	Node0x4ebaed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%127:\l127:                                              \l  %128 = phi float [ 0.000000e+00, %17 ], [ %96, %95 ], [ %126, %100 ]\l  %129 = getelementptr inbounds float, float addrspace(1)* %2, i64 %18\l  store float %128, float addrspace(1)* %129, align 4, !tbaa !11\l  br label %130\l}"];
	Node0x4ebaed0 -> Node0x4eb9880;
	Node0x4eb9880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%130:\l130:                                              \l  ret void\l}"];
}
