digraph "CFG for '_Z15shMatMul_KerneliPfS_S_' function" {
	label="CFG for '_Z15shMatMul_KerneliPfS_S_' function";

	Node0x4ffb7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %6, %10\l  %12 = mul nuw nsw i32 %10, %10\l  %13 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_Mem,\l... i32 0, i32 %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %11, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = mul nsw i32 %23, %0\l  %25 = add nsw i32 %24, %15\l  %26 = icmp slt i32 %15, %0\l  %27 = icmp slt i32 %23, %0\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %170\l|{<s0>T|<s1>F}}"];
	Node0x4ffb7e0:s0 -> Node0x4fff510;
	Node0x4ffb7e0:s1 -> Node0x4fff5a0;
	Node0x4fff510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%29:\l29:                                               \l  %30 = sdiv i32 %0, %10\l  %31 = icmp sgt i32 %30, 0\l  br i1 %31, label %32, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4fff510:s0 -> Node0x4fff800;
	Node0x4fff510:s1 -> Node0x4fff850;
	Node0x4fff800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%32:\l32:                                               \l  %33 = add i32 %24, %14\l  %34 = mul nuw nsw i32 %22, %10\l  %35 = add nuw nsw i32 %34, %14\l  %36 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_Mem,\l... i32 0, i32 %35\l  %37 = getelementptr inbounds float, float addrspace(3)* %13, i32 %35\l  %38 = and i32 %10, 7\l  %39 = icmp ult i16 %9, 8\l  %40 = and i32 %10, 2040\l  %41 = icmp eq i32 %38, 0\l  br label %46\l}"];
	Node0x4fff800 -> Node0x5000090;
	Node0x4fff850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%42:\l42:                                               \l  %43 = phi float [ 0.000000e+00, %29 ], [ %81, %80 ]\l  %44 = sext i32 %25 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %3, i64 %44\l  store float %43, float addrspace(1)* %45, align 4, !tbaa !7\l  br label %170\l}"];
	Node0x4fff850 -> Node0x4fff5a0;
	Node0x5000090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%46:\l46:                                               \l  %47 = phi i32 [ 0, %32 ], [ %82, %80 ]\l  %48 = phi float [ 0.000000e+00, %32 ], [ %81, %80 ]\l  %49 = mul nuw nsw i32 %47, %10\l  %50 = add i32 %33, %49\l  %51 = zext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  store float %53, float addrspace(3)* %36, align 4, !tbaa !7\l  %54 = add nuw i32 %49, %22\l  %55 = mul i32 %54, %0\l  %56 = add i32 %55, %15\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  store float %59, float addrspace(3)* %37, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %39, label %60, label %84\l|{<s0>T|<s1>F}}"];
	Node0x5000090:s0 -> Node0x50022c0;
	Node0x5000090:s1 -> Node0x5002350;
	Node0x50022c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%60:\l60:                                               \l  %61 = phi float [ undef, %46 ], [ %166, %84 ]\l  %62 = phi i32 [ 0, %46 ], [ %167, %84 ]\l  %63 = phi float [ %48, %46 ], [ %166, %84 ]\l  br i1 %41, label %80, label %64\l|{<s0>T|<s1>F}}"];
	Node0x50022c0:s0 -> Node0x5000bd0;
	Node0x50022c0:s1 -> Node0x5002b20;
	Node0x5002b20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%64:\l64:                                               \l  %65 = phi i32 [ %77, %64 ], [ %62, %60 ]\l  %66 = phi float [ %76, %64 ], [ %63, %60 ]\l  %67 = phi i32 [ %78, %64 ], [ 0, %60 ]\l  %68 = add nuw nsw i32 %65, %34\l  %69 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_Mem,\l... i32 0, i32 %68\l  %70 = load float, float addrspace(3)* %69, align 4, !tbaa !7\l  %71 = mul nuw nsw i32 %65, %10\l  %72 = add nuw nsw i32 %71, %14\l  %73 = getelementptr inbounds float, float addrspace(3)* %13, i32 %72\l  %74 = load float, float addrspace(3)* %73, align 4, !tbaa !7\l  %75 = fmul contract float %70, %74\l  %76 = fadd contract float %66, %75\l  %77 = add nuw nsw i32 %65, 1\l  %78 = add i32 %67, 1\l  %79 = icmp eq i32 %78, %38\l  br i1 %79, label %80, label %64, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5002b20:s0 -> Node0x5000bd0;
	Node0x5002b20:s1 -> Node0x5002b20;
	Node0x5000bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%80:\l80:                                               \l  %81 = phi float [ %61, %60 ], [ %76, %64 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %82 = add nuw nsw i32 %47, 1\l  %83 = icmp eq i32 %82, %30\l  br i1 %83, label %42, label %46, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5000bd0:s0 -> Node0x4fff850;
	Node0x5000bd0:s1 -> Node0x5000090;
	Node0x5002350 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%84:\l84:                                               \l  %85 = phi i32 [ %167, %84 ], [ 0, %46 ]\l  %86 = phi float [ %166, %84 ], [ %48, %46 ]\l  %87 = phi i32 [ %168, %84 ], [ 0, %46 ]\l  %88 = add nuw nsw i32 %85, %34\l  %89 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_Mem,\l... i32 0, i32 %88\l  %90 = load float, float addrspace(3)* %89, align 4, !tbaa !7\l  %91 = mul nuw nsw i32 %85, %10\l  %92 = add nuw nsw i32 %91, %14\l  %93 = getelementptr inbounds float, float addrspace(3)* %13, i32 %92\l  %94 = load float, float addrspace(3)* %93, align 4, !tbaa !7\l  %95 = fmul contract float %90, %94\l  %96 = fadd contract float %86, %95\l  %97 = or i32 %85, 1\l  %98 = add nuw nsw i32 %97, %34\l  %99 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_Mem,\l... i32 0, i32 %98\l  %100 = load float, float addrspace(3)* %99, align 4, !tbaa !7\l  %101 = mul nuw nsw i32 %97, %10\l  %102 = add nuw nsw i32 %101, %14\l  %103 = getelementptr inbounds float, float addrspace(3)* %13, i32 %102\l  %104 = load float, float addrspace(3)* %103, align 4, !tbaa !7\l  %105 = fmul contract float %100, %104\l  %106 = fadd contract float %96, %105\l  %107 = or i32 %85, 2\l  %108 = add nuw nsw i32 %107, %34\l  %109 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_Mem, i32 0, i32 %108\l  %110 = load float, float addrspace(3)* %109, align 4, !tbaa !7\l  %111 = mul nuw nsw i32 %107, %10\l  %112 = add nuw nsw i32 %111, %14\l  %113 = getelementptr inbounds float, float addrspace(3)* %13, i32 %112\l  %114 = load float, float addrspace(3)* %113, align 4, !tbaa !7\l  %115 = fmul contract float %110, %114\l  %116 = fadd contract float %106, %115\l  %117 = or i32 %85, 3\l  %118 = add nuw nsw i32 %117, %34\l  %119 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_Mem, i32 0, i32 %118\l  %120 = load float, float addrspace(3)* %119, align 4, !tbaa !7\l  %121 = mul nuw nsw i32 %117, %10\l  %122 = add nuw nsw i32 %121, %14\l  %123 = getelementptr inbounds float, float addrspace(3)* %13, i32 %122\l  %124 = load float, float addrspace(3)* %123, align 4, !tbaa !7\l  %125 = fmul contract float %120, %124\l  %126 = fadd contract float %116, %125\l  %127 = or i32 %85, 4\l  %128 = add nuw nsw i32 %127, %34\l  %129 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_Mem, i32 0, i32 %128\l  %130 = load float, float addrspace(3)* %129, align 4, !tbaa !7\l  %131 = mul nuw nsw i32 %127, %10\l  %132 = add nuw nsw i32 %131, %14\l  %133 = getelementptr inbounds float, float addrspace(3)* %13, i32 %132\l  %134 = load float, float addrspace(3)* %133, align 4, !tbaa !7\l  %135 = fmul contract float %130, %134\l  %136 = fadd contract float %126, %135\l  %137 = or i32 %85, 5\l  %138 = add nuw nsw i32 %137, %34\l  %139 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_Mem, i32 0, i32 %138\l  %140 = load float, float addrspace(3)* %139, align 4, !tbaa !7\l  %141 = mul nuw nsw i32 %137, %10\l  %142 = add nuw nsw i32 %141, %14\l  %143 = getelementptr inbounds float, float addrspace(3)* %13, i32 %142\l  %144 = load float, float addrspace(3)* %143, align 4, !tbaa !7\l  %145 = fmul contract float %140, %144\l  %146 = fadd contract float %136, %145\l  %147 = or i32 %85, 6\l  %148 = add nuw nsw i32 %147, %34\l  %149 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_Mem, i32 0, i32 %148\l  %150 = load float, float addrspace(3)* %149, align 4, !tbaa !7\l  %151 = mul nuw nsw i32 %147, %10\l  %152 = add nuw nsw i32 %151, %14\l  %153 = getelementptr inbounds float, float addrspace(3)* %13, i32 %152\l  %154 = load float, float addrspace(3)* %153, align 4, !tbaa !7\l  %155 = fmul contract float %150, %154\l  %156 = fadd contract float %146, %155\l  %157 = or i32 %85, 7\l  %158 = add nuw nsw i32 %157, %34\l  %159 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_Mem, i32 0, i32 %158\l  %160 = load float, float addrspace(3)* %159, align 4, !tbaa !7\l  %161 = mul nuw nsw i32 %157, %10\l  %162 = add nuw nsw i32 %161, %14\l  %163 = getelementptr inbounds float, float addrspace(3)* %13, i32 %162\l  %164 = load float, float addrspace(3)* %163, align 4, !tbaa !7\l  %165 = fmul contract float %160, %164\l  %166 = fadd contract float %156, %165\l  %167 = add nuw nsw i32 %85, 8\l  %168 = add i32 %87, 8\l  %169 = icmp eq i32 %168, %40\l  br i1 %169, label %60, label %84, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5002350:s0 -> Node0x50022c0;
	Node0x5002350:s1 -> Node0x5002350;
	Node0x4fff5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%170:\l170:                                              \l  ret void\l}"];
}
