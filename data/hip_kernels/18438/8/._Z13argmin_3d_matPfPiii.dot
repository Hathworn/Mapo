digraph "CFG for '_Z13argmin_3d_matPfPiii' function" {
	label="CFG for '_Z13argmin_3d_matPfPiii' function";

	Node0x51d7b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %6, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = mul i32 %3, %2\l  %15 = mul i32 %14, 51\l  %16 = icmp slt i32 %13, %3\l  br i1 %16, label %17, label %156\l|{<s0>T|<s1>F}}"];
	Node0x51d7b40:s0 -> Node0x51d86f0;
	Node0x51d7b40:s1 -> Node0x51d9c80;
	Node0x51d86f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%17:\l17:                                               \l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp slt i32 %25, %2\l  %27 = icmp sgt i32 %15, 0\l  %28 = tail call i32 @llvm.smax.i32(i32 %15, i32 %14)\l  %29 = add i32 %28, -1\l  br label %30\l}"];
	Node0x51d86f0 -> Node0x51dbb70;
	Node0x51dbb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%30:\l30:                                               \l  %31 = phi i32 [ %13, %17 ], [ %154, %153 ]\l  br i1 %26, label %32, label %153\l|{<s0>T|<s1>F}}"];
	Node0x51dbb70:s0 -> Node0x51dbde0;
	Node0x51dbb70:s1 -> Node0x51dbca0;
	Node0x51dbde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%32:\l32:                                               \l  %33 = phi i32 [ %71, %67 ], [ %25, %30 ]\l  %34 = mul nsw i32 %33, %3\l  %35 = add nsw i32 %34, %31\l  br i1 %27, label %36, label %67\l|{<s0>T|<s1>F}}"];
	Node0x51dbde0:s0 -> Node0x51dc2b0;
	Node0x51dbde0:s1 -> Node0x51d9ba0;
	Node0x51dc2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%36:\l36:                                               \l  %37 = udiv i32 %29, %14\l  %38 = add i32 %37, 1\l  %39 = and i32 %38, 7\l  %40 = icmp ult i32 %37, 7\l  br i1 %40, label %43, label %41\l|{<s0>T|<s1>F}}"];
	Node0x51dc2b0:s0 -> Node0x51dc690;
	Node0x51dc2b0:s1 -> Node0x51dc6e0;
	Node0x51dc6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%41:\l41:                                               \l  %42 = and i32 %38, -8\l  br label %73\l}"];
	Node0x51dc6e0 -> Node0x51dc8e0;
	Node0x51dc690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%43:\l43:                                               \l  %44 = phi i32 [ undef, %36 ], [ %147, %73 ]\l  %45 = phi i32 [ 0, %36 ], [ %150, %73 ]\l  %46 = phi i32 [ 0, %36 ], [ %149, %73 ]\l  %47 = phi float [ 1.000000e+08, %36 ], [ %148, %73 ]\l  %48 = phi i32 [ -1, %36 ], [ %147, %73 ]\l  %49 = icmp eq i32 %39, 0\l  br i1 %49, label %67, label %50\l|{<s0>T|<s1>F}}"];
	Node0x51dc690:s0 -> Node0x51d9ba0;
	Node0x51dc690:s1 -> Node0x51ddd90;
	Node0x51ddd90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%50:\l50:                                               \l  %51 = phi i32 [ %64, %50 ], [ %45, %43 ]\l  %52 = phi i32 [ %63, %50 ], [ %46, %43 ]\l  %53 = phi float [ %62, %50 ], [ %47, %43 ]\l  %54 = phi i32 [ %61, %50 ], [ %48, %43 ]\l  %55 = phi i32 [ %65, %50 ], [ 0, %43 ]\l  %56 = add nsw i32 %51, %35\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fcmp contract olt float %59, %53\l  %61 = select i1 %60, i32 %52, i32 %54\l  %62 = select i1 %60, float %59, float %53\l  %63 = add nuw i32 %52, 1\l  %64 = add nsw i32 %51, %14\l  %65 = add i32 %55, 1\l  %66 = icmp eq i32 %65, %39\l  br i1 %66, label %67, label %50, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x51ddd90:s0 -> Node0x51d9ba0;
	Node0x51ddd90:s1 -> Node0x51ddd90;
	Node0x51d9ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%67:\l67:                                               \l  %68 = phi i32 [ -1, %32 ], [ %44, %43 ], [ %61, %50 ]\l  %69 = sext i32 %35 to i64\l  %70 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %69\l  store i32 %68, i32 addrspace(1)* %70, align 4, !tbaa !13\l  %71 = add i32 %33, %22\l  %72 = icmp slt i32 %71, %2\l  br i1 %72, label %32, label %153, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x51d9ba0:s0 -> Node0x51dbde0;
	Node0x51d9ba0:s1 -> Node0x51dbca0;
	Node0x51dc8e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%73:\l73:                                               \l  %74 = phi i32 [ 0, %41 ], [ %150, %73 ]\l  %75 = phi i32 [ 0, %41 ], [ %149, %73 ]\l  %76 = phi float [ 1.000000e+08, %41 ], [ %148, %73 ]\l  %77 = phi i32 [ -1, %41 ], [ %147, %73 ]\l  %78 = phi i32 [ 0, %41 ], [ %151, %73 ]\l  %79 = add nsw i32 %74, %35\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fcmp contract olt float %82, %76\l  %84 = select i1 %83, i32 %75, i32 %77\l  %85 = select i1 %83, float %82, float %76\l  %86 = or i32 %75, 1\l  %87 = add nsw i32 %74, %14\l  %88 = add nsw i32 %87, %35\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = fcmp contract olt float %91, %85\l  %93 = select i1 %92, i32 %86, i32 %84\l  %94 = select i1 %92, float %91, float %85\l  %95 = or i32 %75, 2\l  %96 = add nsw i32 %87, %14\l  %97 = add nsw i32 %96, %35\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = fcmp contract olt float %100, %94\l  %102 = select i1 %101, i32 %95, i32 %93\l  %103 = select i1 %101, float %100, float %94\l  %104 = or i32 %75, 3\l  %105 = add nsw i32 %96, %14\l  %106 = add nsw i32 %105, %35\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %110 = fcmp contract olt float %109, %103\l  %111 = select i1 %110, i32 %104, i32 %102\l  %112 = select i1 %110, float %109, float %103\l  %113 = or i32 %75, 4\l  %114 = add nsw i32 %105, %14\l  %115 = add nsw i32 %114, %35\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = fcmp contract olt float %118, %112\l  %120 = select i1 %119, i32 %113, i32 %111\l  %121 = select i1 %119, float %118, float %112\l  %122 = or i32 %75, 5\l  %123 = add nsw i32 %114, %14\l  %124 = add nsw i32 %123, %35\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = fcmp contract olt float %127, %121\l  %129 = select i1 %128, i32 %122, i32 %120\l  %130 = select i1 %128, float %127, float %121\l  %131 = or i32 %75, 6\l  %132 = add nsw i32 %123, %14\l  %133 = add nsw i32 %132, %35\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %0, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %137 = fcmp contract olt float %136, %130\l  %138 = select i1 %137, i32 %131, i32 %129\l  %139 = select i1 %137, float %136, float %130\l  %140 = or i32 %75, 7\l  %141 = add nsw i32 %132, %14\l  %142 = add nsw i32 %141, %35\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = fcmp contract olt float %145, %139\l  %147 = select i1 %146, i32 %140, i32 %138\l  %148 = select i1 %146, float %145, float %139\l  %149 = add nuw i32 %75, 8\l  %150 = add nsw i32 %141, %14\l  %151 = add i32 %78, 8\l  %152 = icmp eq i32 %151, %42\l  br i1 %152, label %43, label %73, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x51dc8e0:s0 -> Node0x51dc690;
	Node0x51dc8e0:s1 -> Node0x51dc8e0;
	Node0x51dbca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%153:\l153:                                              \l  %154 = add i32 %31, %10\l  %155 = icmp slt i32 %154, %3\l  br i1 %155, label %30, label %156, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x51dbca0:s0 -> Node0x51dbb70;
	Node0x51dbca0:s1 -> Node0x51d9c80;
	Node0x51d9c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%156:\l156:                                              \l  ret void\l}"];
}
