digraph "CFG for '_Z8spoc_maxPKdPdi' function" {
	label="CFG for '_Z8spoc_maxPKdPdi' function";

	Node0x4f3a2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = mul i32 %9, %8\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp sgt i32 %12, 0\l  br i1 %13, label %107, label %14\l|{<s0>T|<s1>F}}"];
	Node0x4f3a2d0:s0 -> Node0x4f3c1d0;
	Node0x4f3a2d0:s1 -> Node0x4f3c260;
	Node0x4f3c260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%14:\l14:                                               \l  %15 = load double, double addrspace(1)* %0, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %16 = tail call double @llvm.fabs.f64(double %15)\l  %17 = icmp sgt i32 %2, 1\l  br i1 %17, label %18, label %43\l|{<s0>T|<s1>F}}"];
	Node0x4f3c260:s0 -> Node0x4f3bab0;
	Node0x4f3c260:s1 -> Node0x4f3cf70;
	Node0x4f3bab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = add i32 %2, -1\l  %20 = add i32 %2, -2\l  %21 = and i32 %19, 7\l  %22 = icmp ult i32 %20, 7\l  br i1 %22, label %25, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4f3bab0:s0 -> Node0x4f3d380;
	Node0x4f3bab0:s1 -> Node0x4f3d3d0;
	Node0x4f3d3d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %19, -8\l  br label %45\l}"];
	Node0x4f3d3d0 -> Node0x4f3d5d0;
	Node0x4f3d380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%25:\l25:                                               \l  %26 = phi double [ undef, %18 ], [ %103, %45 ]\l  %27 = phi i32 [ 1, %18 ], [ %104, %45 ]\l  %28 = phi double [ %16, %18 ], [ %103, %45 ]\l  %29 = icmp eq i32 %21, 0\l  br i1 %29, label %43, label %30\l|{<s0>T|<s1>F}}"];
	Node0x4f3d380:s0 -> Node0x4f3cf70;
	Node0x4f3d380:s1 -> Node0x4f3ddf0;
	Node0x4f3ddf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%30:\l30:                                               \l  %31 = phi i32 [ %40, %30 ], [ %27, %25 ]\l  %32 = phi double [ %39, %30 ], [ %28, %25 ]\l  %33 = phi i32 [ %41, %30 ], [ 0, %25 ]\l  %34 = zext i32 %31 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %0, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = tail call double @llvm.fabs.f64(double %36)\l  %38 = fcmp contract olt double %32, %37\l  %39 = select i1 %38, double %37, double %32\l  %40 = add nuw nsw i32 %31, 1\l  %41 = add i32 %33, 1\l  %42 = icmp eq i32 %41, %21\l  br i1 %42, label %43, label %30, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4f3ddf0:s0 -> Node0x4f3cf70;
	Node0x4f3ddf0:s1 -> Node0x4f3ddf0;
	Node0x4f3cf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%43:\l43:                                               \l  %44 = phi double [ %16, %14 ], [ %26, %25 ], [ %39, %30 ]\l  store double %44, double addrspace(1)* %1, align 8, !tbaa !7\l  br label %107\l}"];
	Node0x4f3cf70 -> Node0x4f3c1d0;
	Node0x4f3d5d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%45:\l45:                                               \l  %46 = phi i32 [ 1, %23 ], [ %104, %45 ]\l  %47 = phi double [ %16, %23 ], [ %103, %45 ]\l  %48 = phi i32 [ 0, %23 ], [ %105, %45 ]\l  %49 = zext i32 %46 to i64\l  %50 = getelementptr inbounds double, double addrspace(1)* %0, i64 %49\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = tail call double @llvm.fabs.f64(double %51)\l  %53 = fcmp contract olt double %47, %52\l  %54 = select i1 %53, double %52, double %47\l  %55 = add nuw nsw i32 %46, 1\l  %56 = zext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %0, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %59 = tail call double @llvm.fabs.f64(double %58)\l  %60 = fcmp contract olt double %54, %59\l  %61 = select i1 %60, double %59, double %54\l  %62 = add nuw nsw i32 %46, 2\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds double, double addrspace(1)* %0, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = tail call double @llvm.fabs.f64(double %65)\l  %67 = fcmp contract olt double %61, %66\l  %68 = select i1 %67, double %66, double %61\l  %69 = add nuw nsw i32 %46, 3\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %0, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = tail call double @llvm.fabs.f64(double %72)\l  %74 = fcmp contract olt double %68, %73\l  %75 = select i1 %74, double %73, double %68\l  %76 = add nuw nsw i32 %46, 4\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds double, double addrspace(1)* %0, i64 %77\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = tail call double @llvm.fabs.f64(double %79)\l  %81 = fcmp contract olt double %75, %80\l  %82 = select i1 %81, double %80, double %75\l  %83 = add nuw nsw i32 %46, 5\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds double, double addrspace(1)* %0, i64 %84\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = tail call double @llvm.fabs.f64(double %86)\l  %88 = fcmp contract olt double %82, %87\l  %89 = select i1 %88, double %87, double %82\l  %90 = add nuw nsw i32 %46, 6\l  %91 = zext i32 %90 to i64\l  %92 = getelementptr inbounds double, double addrspace(1)* %0, i64 %91\l  %93 = load double, double addrspace(1)* %92, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = tail call double @llvm.fabs.f64(double %93)\l  %95 = fcmp contract olt double %89, %94\l  %96 = select i1 %95, double %94, double %89\l  %97 = add nuw nsw i32 %46, 7\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %0, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = tail call double @llvm.fabs.f64(double %100)\l  %102 = fcmp contract olt double %96, %101\l  %103 = select i1 %102, double %101, double %96\l  %104 = add nuw nsw i32 %46, 8\l  %105 = add i32 %48, 8\l  %106 = icmp eq i32 %105, %24\l  br i1 %106, label %25, label %45, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f3d5d0:s0 -> Node0x4f3d380;
	Node0x4f3d5d0:s1 -> Node0x4f3d5d0;
	Node0x4f3c1d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%107:\l107:                                              \l  ret void\l}"];
}
