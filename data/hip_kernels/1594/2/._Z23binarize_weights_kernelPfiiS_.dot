digraph "CFG for '_Z23binarize_weights_kernelPfiiS_' function" {
	label="CFG for '_Z23binarize_weights_kernelPfiiS_' function";

	Node0x60b4a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = mul i32 %21, %14\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %1\l  br i1 %25, label %26, label %210\l|{<s0>T|<s1>F}}"];
	Node0x60b4a60:s0 -> Node0x60b7320;
	Node0x60b4a60:s1 -> Node0x60b73b0;
	Node0x60b7320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %2, 0\l  br i1 %27, label %28, label %114\l|{<s0>T|<s1>F}}"];
	Node0x60b7320:s0 -> Node0x60b7580;
	Node0x60b7320:s1 -> Node0x60b75d0;
	Node0x60b7580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = mul nsw i32 %24, %2\l  %30 = and i32 %2, 7\l  %31 = icmp ult i32 %2, 8\l  br i1 %31, label %96, label %32\l|{<s0>T|<s1>F}}"];
	Node0x60b7580:s0 -> Node0x60b7920;
	Node0x60b7580:s1 -> Node0x60b7970;
	Node0x60b7970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %2, -8\l  br label %34\l}"];
	Node0x60b7970 -> Node0x60b6be0;
	Node0x60b6be0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%34:\l34:                                               \l  %35 = phi float [ 0.000000e+00, %32 ], [ %92, %34 ]\l  %36 = phi i32 [ 0, %32 ], [ %93, %34 ]\l  %37 = phi i32 [ 0, %32 ], [ %94, %34 ]\l  %38 = add nsw i32 %36, %29\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %42 = tail call float @llvm.fabs.f32(float %41)\l  %43 = fadd contract float %35, %42\l  %44 = or i32 %36, 1\l  %45 = add nsw i32 %44, %29\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %49 = tail call float @llvm.fabs.f32(float %48)\l  %50 = fadd contract float %43, %49\l  %51 = or i32 %36, 2\l  %52 = add nsw i32 %51, %29\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %56 = tail call float @llvm.fabs.f32(float %55)\l  %57 = fadd contract float %50, %56\l  %58 = or i32 %36, 3\l  %59 = add nsw i32 %58, %29\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %63 = tail call float @llvm.fabs.f32(float %62)\l  %64 = fadd contract float %57, %63\l  %65 = or i32 %36, 4\l  %66 = add nsw i32 %65, %29\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %70 = tail call float @llvm.fabs.f32(float %69)\l  %71 = fadd contract float %64, %70\l  %72 = or i32 %36, 5\l  %73 = add nsw i32 %72, %29\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %77 = tail call float @llvm.fabs.f32(float %76)\l  %78 = fadd contract float %71, %77\l  %79 = or i32 %36, 6\l  %80 = add nsw i32 %79, %29\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %84 = tail call float @llvm.fabs.f32(float %83)\l  %85 = fadd contract float %78, %84\l  %86 = or i32 %36, 7\l  %87 = add nsw i32 %86, %29\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %91 = tail call float @llvm.fabs.f32(float %90)\l  %92 = fadd contract float %85, %91\l  %93 = add nuw nsw i32 %36, 8\l  %94 = add i32 %37, 8\l  %95 = icmp eq i32 %94, %33\l  br i1 %95, label %96, label %34, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x60b6be0:s0 -> Node0x60b7920;
	Node0x60b6be0:s1 -> Node0x60b6be0;
	Node0x60b7920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%96:\l96:                                               \l  %97 = phi float [ undef, %28 ], [ %92, %34 ]\l  %98 = phi float [ 0.000000e+00, %28 ], [ %92, %34 ]\l  %99 = phi i32 [ 0, %28 ], [ %93, %34 ]\l  %100 = icmp eq i32 %30, 0\l  br i1 %100, label %114, label %101\l|{<s0>T|<s1>F}}"];
	Node0x60b7920:s0 -> Node0x60b75d0;
	Node0x60b7920:s1 -> Node0x60bc8e0;
	Node0x60bc8e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%101:\l101:                                              \l  %102 = phi float [ %110, %101 ], [ %98, %96 ]\l  %103 = phi i32 [ %111, %101 ], [ %99, %96 ]\l  %104 = phi i32 [ %112, %101 ], [ 0, %96 ]\l  %105 = add nsw i32 %103, %29\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %109 = tail call float @llvm.fabs.f32(float %108)\l  %110 = fadd contract float %102, %109\l  %111 = add nuw nsw i32 %103, 1\l  %112 = add i32 %104, 1\l  %113 = icmp eq i32 %112, %30\l  br i1 %113, label %114, label %101, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x60bc8e0:s0 -> Node0x60b75d0;
	Node0x60bc8e0:s1 -> Node0x60bc8e0;
	Node0x60b75d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%114:\l114:                                              \l  %115 = phi float [ 0.000000e+00, %26 ], [ %97, %96 ], [ %110, %101 ]\l  %116 = sitofp i32 %2 to float\l  %117 = fdiv contract float %115, %116\l  br i1 %27, label %118, label %210\l|{<s0>T|<s1>F}}"];
	Node0x60b75d0:s0 -> Node0x60bd4f0;
	Node0x60b75d0:s1 -> Node0x60b73b0;
	Node0x60bd4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%118:\l118:                                              \l  %119 = mul nsw i32 %24, %2\l  %120 = fneg contract float %117\l  %121 = and i32 %2, 7\l  %122 = icmp ult i32 %2, 8\l  br i1 %122, label %194, label %123\l|{<s0>T|<s1>F}}"];
	Node0x60bd4f0:s0 -> Node0x60bd810;
	Node0x60bd4f0:s1 -> Node0x60bd860;
	Node0x60bd860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%123:\l123:                                              \l  %124 = and i32 %2, -8\l  br label %125\l}"];
	Node0x60bd860 -> Node0x60bda30;
	Node0x60bda30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%125:\l125:                                              \l  %126 = phi i32 [ 0, %123 ], [ %191, %125 ]\l  %127 = phi i32 [ 0, %123 ], [ %192, %125 ]\l  %128 = add nsw i32 %126, %119\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %132 = fcmp contract ogt float %131, 0.000000e+00\l  %133 = select contract i1 %132, float %117, float %120\l  %134 = getelementptr inbounds float, float addrspace(1)* %3, i64 %129\l  store float %133, float addrspace(1)* %134, align 4, !tbaa !16\l  %135 = or i32 %126, 1\l  %136 = add nsw i32 %135, %119\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = fcmp contract ogt float %139, 0.000000e+00\l  %141 = select contract i1 %140, float %117, float %120\l  %142 = getelementptr inbounds float, float addrspace(1)* %3, i64 %137\l  store float %141, float addrspace(1)* %142, align 4, !tbaa !16\l  %143 = or i32 %126, 2\l  %144 = add nsw i32 %143, %119\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16\l  %148 = fcmp contract ogt float %147, 0.000000e+00\l  %149 = select contract i1 %148, float %117, float %120\l  %150 = getelementptr inbounds float, float addrspace(1)* %3, i64 %145\l  store float %149, float addrspace(1)* %150, align 4, !tbaa !16\l  %151 = or i32 %126, 3\l  %152 = add nsw i32 %151, %119\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16\l  %156 = fcmp contract ogt float %155, 0.000000e+00\l  %157 = select contract i1 %156, float %117, float %120\l  %158 = getelementptr inbounds float, float addrspace(1)* %3, i64 %153\l  store float %157, float addrspace(1)* %158, align 4, !tbaa !16\l  %159 = or i32 %126, 4\l  %160 = add nsw i32 %159, %119\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %0, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !16\l  %164 = fcmp contract ogt float %163, 0.000000e+00\l  %165 = select contract i1 %164, float %117, float %120\l  %166 = getelementptr inbounds float, float addrspace(1)* %3, i64 %161\l  store float %165, float addrspace(1)* %166, align 4, !tbaa !16\l  %167 = or i32 %126, 5\l  %168 = add nsw i32 %167, %119\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %0, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !16\l  %172 = fcmp contract ogt float %171, 0.000000e+00\l  %173 = select contract i1 %172, float %117, float %120\l  %174 = getelementptr inbounds float, float addrspace(1)* %3, i64 %169\l  store float %173, float addrspace(1)* %174, align 4, !tbaa !16\l  %175 = or i32 %126, 6\l  %176 = add nsw i32 %175, %119\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %0, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !16\l  %180 = fcmp contract ogt float %179, 0.000000e+00\l  %181 = select contract i1 %180, float %117, float %120\l  %182 = getelementptr inbounds float, float addrspace(1)* %3, i64 %177\l  store float %181, float addrspace(1)* %182, align 4, !tbaa !16\l  %183 = or i32 %126, 7\l  %184 = add nsw i32 %183, %119\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds float, float addrspace(1)* %0, i64 %185\l  %187 = load float, float addrspace(1)* %186, align 4, !tbaa !16\l  %188 = fcmp contract ogt float %187, 0.000000e+00\l  %189 = select contract i1 %188, float %117, float %120\l  %190 = getelementptr inbounds float, float addrspace(1)* %3, i64 %185\l  store float %189, float addrspace(1)* %190, align 4, !tbaa !16\l  %191 = add nuw nsw i32 %126, 8\l  %192 = add i32 %127, 8\l  %193 = icmp eq i32 %192, %124\l  br i1 %193, label %194, label %125, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x60bda30:s0 -> Node0x60bd810;
	Node0x60bda30:s1 -> Node0x60bda30;
	Node0x60bd810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%194:\l194:                                              \l  %195 = phi i32 [ 0, %118 ], [ %191, %125 ]\l  %196 = icmp eq i32 %121, 0\l  br i1 %196, label %210, label %197\l|{<s0>T|<s1>F}}"];
	Node0x60bd810:s0 -> Node0x60b73b0;
	Node0x60bd810:s1 -> Node0x60c0d00;
	Node0x60c0d00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%197:\l197:                                              \l  %198 = phi i32 [ %207, %197 ], [ %195, %194 ]\l  %199 = phi i32 [ %208, %197 ], [ 0, %194 ]\l  %200 = add nsw i32 %198, %119\l  %201 = sext i32 %200 to i64\l  %202 = getelementptr inbounds float, float addrspace(1)* %0, i64 %201\l  %203 = load float, float addrspace(1)* %202, align 4, !tbaa !16\l  %204 = fcmp contract ogt float %203, 0.000000e+00\l  %205 = select contract i1 %204, float %117, float %120\l  %206 = getelementptr inbounds float, float addrspace(1)* %3, i64 %201\l  store float %205, float addrspace(1)* %206, align 4, !tbaa !16\l  %207 = add nuw nsw i32 %198, 1\l  %208 = add i32 %199, 1\l  %209 = icmp eq i32 %208, %121\l  br i1 %209, label %210, label %197, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x60c0d00:s0 -> Node0x60b73b0;
	Node0x60c0d00:s1 -> Node0x60c0d00;
	Node0x60b73b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%210:\l210:                                              \l  ret void\l}"];
}
