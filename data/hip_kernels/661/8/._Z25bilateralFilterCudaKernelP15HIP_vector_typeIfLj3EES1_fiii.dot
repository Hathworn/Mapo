digraph "CFG for '_Z25bilateralFilterCudaKernelP15HIP_vector_typeIfLj3EES1_fiii' function" {
	label="CFG for '_Z25bilateralFilterCudaKernelP15HIP_vector_typeIfLj3EES1_fiii' function";

	Node0x5948390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp slt i32 %15, %3\l  %25 = icmp slt i32 %23, %4\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %133\l|{<s0>T|<s1>F}}"];
	Node0x5948390:s0 -> Node0x594b7c0;
	Node0x5948390:s1 -> Node0x594b850;
	Node0x594b7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%27:\l27:                                               \l  %28 = mul nsw i32 %23, %3\l  %29 = add nsw i32 %28, %15\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %30, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %32 = load float, float addrspace(1)* %31, align 4, !amdgpu.noclobber !5\l  %33 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %30, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %34 = load float, float addrspace(1)* %33, align 4, !amdgpu.noclobber !5\l  %35 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %30, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %36 = load float, float addrspace(1)* %35, align 4, !amdgpu.noclobber !5\l  %37 = sub i32 0, %5\l  %38 = icmp slt i32 %5, 0\l  br i1 %38, label %44, label %39\l|{<s0>T|<s1>F}}"];
	Node0x594b7c0:s0 -> Node0x594c360;
	Node0x594b7c0:s1 -> Node0x594c3b0;
	Node0x594c3b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%39:\l39:                                               \l  %40 = add nsw i32 %4, -1\l  %41 = add nsw i32 %3, -1\l  %42 = fmul contract float %2, 2.000000e+00\l  %43 = fmul contract float %42, %2\l  br label %56\l}"];
	Node0x594c3b0 -> Node0x594d130;
	Node0x594c360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%44:\l44:                                               \l  %45 = phi float [ 0.000000e+00, %27 ], [ %130, %72 ]\l  %46 = phi float [ 0.000000e+00, %27 ], [ %129, %72 ]\l  %47 = phi float [ 0.000000e+00, %27 ], [ %128, %72 ]\l  %48 = phi float [ 0.000000e+00, %27 ], [ %124, %72 ]\l  %49 = fdiv contract float 1.000000e+00, %48\l  %50 = fmul contract float %47, %49\l  %51 = fmul contract float %46, %49\l  %52 = fmul contract float %45, %49\l  %53 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %30, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  store float %50, float addrspace(1)* %53, align 4\l  %54 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %30, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  store float %51, float addrspace(1)* %54, align 4\l  %55 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %30, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  store float %52, float addrspace(1)* %55, align 4\l  br label %133\l}"];
	Node0x594c360 -> Node0x594b850;
	Node0x594d130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%56:\l56:                                               \l  %57 = phi float [ 0.000000e+00, %39 ], [ %124, %72 ]\l  %58 = phi float [ 0.000000e+00, %39 ], [ %128, %72 ]\l  %59 = phi float [ 0.000000e+00, %39 ], [ %129, %72 ]\l  %60 = phi float [ 0.000000e+00, %39 ], [ %130, %72 ]\l  %61 = phi i32 [ %37, %39 ], [ %73, %72 ]\l  %62 = add nsw i32 %61, %23\l  %63 = icmp slt i32 %62, 0\l  %64 = icmp slt i32 %62, %4\l  %65 = select i1 %64, i32 %62, i32 %40\l  %66 = select i1 %63, i32 0, i32 %65\l  %67 = mul nsw i32 %66, %3\l  %68 = add nsw i32 %61, %5\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds [64 x float], [64 x float] addrspace(4)*\l... @c_gaussian, i64 0, i64 %69\l  %71 = load float, float addrspace(4)* %70, align 4, !tbaa !7\l  br label %75\l}"];
	Node0x594d130 -> Node0x594eca0;
	Node0x594d2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%72:\l72:                                               \l  %73 = add i32 %61, 1\l  %74 = icmp eq i32 %61, %5\l  br i1 %74, label %44, label %56, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x594d2a0:s0 -> Node0x594c360;
	Node0x594d2a0:s1 -> Node0x594d130;
	Node0x594eca0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  %76 = phi float [ %57, %56 ], [ %124, %75 ]\l  %77 = phi float [ %58, %56 ], [ %128, %75 ]\l  %78 = phi float [ %59, %56 ], [ %129, %75 ]\l  %79 = phi float [ %60, %56 ], [ %130, %75 ]\l  %80 = phi i32 [ %37, %56 ], [ %131, %75 ]\l  %81 = add nsw i32 %80, %15\l  %82 = icmp slt i32 %81, 0\l  %83 = icmp slt i32 %81, %3\l  %84 = select i1 %83, i32 %81, i32 %41\l  %85 = select i1 %82, i32 0, i32 %84\l  %86 = add nsw i32 %85, %67\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %87, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %89 = load float, float addrspace(1)* %88, align 4, !amdgpu.noclobber !5\l  %90 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %87, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %91 = load float, float addrspace(1)* %90, align 4, !amdgpu.noclobber !5\l  %92 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %87, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %93 = load float, float addrspace(1)* %92, align 4, !amdgpu.noclobber !5\l  %94 = add nsw i32 %80, %5\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds [64 x float], [64 x float] addrspace(4)*\l... @c_gaussian, i64 0, i64 %95\l  %97 = load float, float addrspace(4)* %96, align 4, !tbaa !7\l  %98 = fmul contract float %71, %97\l  %99 = fsub contract float %32, %89\l  %100 = fmul contract float %99, %99\l  %101 = fsub contract float %34, %91\l  %102 = fmul contract float %101, %101\l  %103 = fadd contract float %100, %102\l  %104 = fsub contract float %36, %93\l  %105 = fmul contract float %104, %104\l  %106 = fadd contract float %105, %103\l  %107 = fneg contract float %106\l  %108 = fdiv contract float %107, %43\l  %109 = fmul float %108, 0x3FF7154760000000\l  %110 = tail call float @llvm.rint.f32(float %109)\l  %111 = fcmp ogt float %108, 0x40562E4300000000\l  %112 = fcmp olt float %108, 0xC059D1DA00000000\l  %113 = fneg float %109\l  %114 = tail call float @llvm.fma.f32(float %108, float 0x3FF7154760000000,\l... float %113)\l  %115 = tail call float @llvm.fma.f32(float %108, float 0x3E54AE0BE0000000,\l... float %114)\l  %116 = fsub float %109, %110\l  %117 = fadd float %115, %116\l  %118 = tail call float @llvm.exp2.f32(float %117)\l  %119 = fptosi float %110 to i32\l  %120 = tail call float @llvm.amdgcn.ldexp.f32(float %118, i32 %119)\l  %121 = select i1 %112, float 0.000000e+00, float %120\l  %122 = select i1 %111, float 0x7FF0000000000000, float %121\l  %123 = fmul contract float %98, %122\l  %124 = fadd contract float %76, %123\l  %125 = fmul contract float %89, %123\l  %126 = fmul contract float %91, %123\l  %127 = fmul contract float %93, %123\l  %128 = fadd contract float %77, %125\l  %129 = fadd contract float %78, %126\l  %130 = fadd contract float %79, %127\l  %131 = add i32 %80, 1\l  %132 = icmp eq i32 %80, %5\l  br i1 %132, label %72, label %75, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x594eca0:s0 -> Node0x594d2a0;
	Node0x594eca0:s1 -> Node0x594eca0;
	Node0x594b850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%133:\l133:                                              \l  ret void\l}"];
}
