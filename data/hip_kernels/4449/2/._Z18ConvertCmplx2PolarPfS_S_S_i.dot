digraph "CFG for '_Z18ConvertCmplx2PolarPfS_S_S_i' function" {
	label="CFG for '_Z18ConvertCmplx2PolarPfS_S_S_i' function";

	Node0x5e15930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = mul i32 %14, %10\l  %16 = udiv i32 %13, %10\l  %17 = mul i32 %16, %10\l  %18 = icmp ugt i32 %13, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %10\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %15, %22\l  %24 = icmp slt i32 %23, %4\l  br i1 %24, label %26, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5e15930:s0 -> Node0x5e17ea0;
	Node0x5e15930:s1 -> Node0x5e17f30;
	Node0x5e17f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%25:\l25:                                               \l  ret void\l}"];
	Node0x5e17ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %108, %26 ], [ %23, %5 ]\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %1, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !16\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !16\l  %33 = tail call float @llvm.fabs.f32(float %32)\l  %34 = tail call float @llvm.fabs.f32(float %30)\l  %35 = tail call float @llvm.minnum.f32(float %33, float %34)\l  %36 = tail call float @llvm.maxnum.f32(float %33, float %34)\l  %37 = fdiv float %35, %36, !fpmath !20\l  %38 = fmul float %37, %37\l  %39 = tail call float @llvm.fmuladd.f32(float %38, float 0x3F65A54B00000000,\l... float 0xBF8F4B2180000000)\l  %40 = tail call float @llvm.fmuladd.f32(float %38, float %39, float\l... 0x3FA53F67E0000000)\l  %41 = tail call float @llvm.fmuladd.f32(float %38, float %40, float\l... 0xBFB2FA9AE0000000)\l  %42 = tail call float @llvm.fmuladd.f32(float %38, float %41, float\l... 0x3FBB263640000000)\l  %43 = tail call float @llvm.fmuladd.f32(float %38, float %42, float\l... 0xBFC22C1CC0000000)\l  %44 = tail call float @llvm.fmuladd.f32(float %38, float %43, float\l... 0x3FC99717E0000000)\l  %45 = tail call float @llvm.fmuladd.f32(float %38, float %44, float\l... 0xBFD5554C40000000)\l  %46 = fmul float %38, %45\l  %47 = tail call float @llvm.fmuladd.f32(float %37, float %46, float %37)\l  %48 = fsub float 0x3FF921FB60000000, %47\l  %49 = fcmp ogt float %34, %33\l  %50 = select i1 %49, float %48, float %47\l  %51 = fsub float 0x400921FB60000000, %50\l  %52 = fcmp olt float %32, 0.000000e+00\l  %53 = select i1 %52, float %51, float %50\l  %54 = bitcast float %32 to i32\l  %55 = icmp slt i32 %54, 0\l  %56 = select i1 %55, float 0x400921FB60000000, float 0.000000e+00\l  %57 = fcmp oeq float %30, 0.000000e+00\l  %58 = select i1 %57, float %56, float %53\l  %59 = select i1 %52, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %60 = fcmp oeq float %33, 0x7FF0000000000000\l  %61 = fcmp oeq float %34, 0x7FF0000000000000\l  %62 = and i1 %61, %60\l  %63 = select i1 %62, float %59, float %58\l  %64 = fcmp uno float %32, %30\l  %65 = select i1 %64, float 0x7FF8000000000000, float %63\l  %66 = tail call float @llvm.copysign.f32(float %65, float %30)\l  %67 = getelementptr inbounds float, float addrspace(1)* %3, i64 %28\l  store float %66, float addrspace(1)* %67, align 4, !tbaa !16\l  %68 = load float, float addrspace(1)* %29, align 4, !tbaa !16\l  %69 = load float, float addrspace(1)* %31, align 4, !tbaa !16\l  %70 = tail call float @llvm.fabs.f32(float %68)\l  %71 = tail call float @llvm.fabs.f32(float %69)\l  %72 = fcmp contract ogt float %70, %71\l  %73 = select i1 %72, float %70, float %71\l  %74 = select i1 %72, float %71, float %70\l  %75 = fdiv contract float %74, %73\l  %76 = fmul contract float %75, %75\l  %77 = fadd contract float %76, 1.000000e+00\l  %78 = fcmp olt float %77, 0x39F0000000000000\l  %79 = select i1 %78, float 0x41F0000000000000, float 1.000000e+00\l  %80 = fmul float %77, %79\l  %81 = tail call float @llvm.sqrt.f32(float %80)\l  %82 = bitcast float %81 to i32\l  %83 = add nsw i32 %82, -1\l  %84 = bitcast i32 %83 to float\l  %85 = add nsw i32 %82, 1\l  %86 = bitcast i32 %85 to float\l  %87 = tail call i1 @llvm.amdgcn.class.f32(float %80, i32 608)\l  %88 = select i1 %78, float 0x3EF0000000000000, float 1.000000e+00\l  %89 = fneg float %86\l  %90 = tail call float @llvm.fma.f32(float %89, float %81, float %80)\l  %91 = fcmp ogt float %90, 0.000000e+00\l  %92 = fneg float %84\l  %93 = tail call float @llvm.fma.f32(float %92, float %81, float %80)\l  %94 = fcmp ole float %93, 0.000000e+00\l  %95 = select i1 %94, float %84, float %81\l  %96 = select i1 %91, float %86, float %95\l  %97 = fmul float %88, %96\l  %98 = select i1 %87, float %80, float %97\l  %99 = fmul contract float %73, %98\l  %100 = fcmp contract oeq float %73, 0.000000e+00\l  %101 = fcmp contract ogt float %73, 0x47EFFFFFE0000000\l  %102 = or i1 %100, %101\l  %103 = fcmp contract ogt float %74, 0x47EFFFFFE0000000\l  %104 = select i1 %102, i1 true, i1 %103\l  %105 = fadd contract float %73, %74\l  %106 = select i1 %104, float %105, float %99\l  %107 = getelementptr inbounds float, float addrspace(1)* %2, i64 %28\l  store float %106, float addrspace(1)* %107, align 4, !tbaa !16\l  %108 = add nsw i32 %27, %21\l  %109 = icmp slt i32 %108, %4\l  br i1 %109, label %26, label %25, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5e17ea0:s0 -> Node0x5e17ea0;
	Node0x5e17ea0:s1 -> Node0x5e17f30;
}
