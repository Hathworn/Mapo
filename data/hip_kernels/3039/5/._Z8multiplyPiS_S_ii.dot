digraph "CFG for '_Z8multiplyPiS_S_ii' function" {
	label="CFG for '_Z8multiplyPiS_S_ii' function";

	Node0x5481ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 2, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %22 = add i32 %20, %21\l  %23 = icmp slt i32 %14, %3\l  %24 = icmp slt i32 %22, %3\l  %25 = select i1 %23, i1 %24, i1 false\l  %26 = icmp sgt i32 %4, 0\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %159\l|{<s0>T|<s1>F}}"];
	Node0x5481ae0:s0 -> Node0x54856c0;
	Node0x5481ae0:s1 -> Node0x5485750;
	Node0x54856c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = mul nsw i32 %14, %4\l  %30 = and i32 %4, 7\l  %31 = icmp ult i32 %4, 8\l  br i1 %31, label %136, label %32\l|{<s0>T|<s1>F}}"];
	Node0x54856c0:s0 -> Node0x5485aa0;
	Node0x54856c0:s1 -> Node0x5485af0;
	Node0x5485af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %4, -8\l  br label %34\l}"];
	Node0x5485af0 -> Node0x5483c50;
	Node0x5483c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%34:\l34:                                               \l  %35 = phi i32 [ 0, %32 ], [ %133, %34 ]\l  %36 = phi i32 [ 0, %32 ], [ %132, %34 ]\l  %37 = phi i32 [ 0, %32 ], [ %134, %34 ]\l  %38 = add nsw i32 %35, %29\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %42 = mul nsw i32 %35, %3\l  %43 = add nsw i32 %42, %22\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %44\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %47 = mul nsw i32 %46, %41\l  %48 = add nsw i32 %47, %36\l  %49 = or i32 %35, 1\l  %50 = add nsw i32 %49, %29\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %51\l  %53 = load i32, i32 addrspace(1)* %52, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %54 = mul nsw i32 %49, %3\l  %55 = add nsw i32 %54, %22\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %56\l  %58 = load i32, i32 addrspace(1)* %57, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %59 = mul nsw i32 %58, %53\l  %60 = add nsw i32 %59, %48\l  %61 = or i32 %35, 2\l  %62 = add nsw i32 %61, %29\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %63\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %66 = mul nsw i32 %61, %3\l  %67 = add nsw i32 %66, %22\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %68\l  %70 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %71 = mul nsw i32 %70, %65\l  %72 = add nsw i32 %71, %60\l  %73 = or i32 %35, 3\l  %74 = add nsw i32 %73, %29\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %75\l  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %78 = mul nsw i32 %73, %3\l  %79 = add nsw i32 %78, %22\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %80\l  %82 = load i32, i32 addrspace(1)* %81, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %83 = mul nsw i32 %82, %77\l  %84 = add nsw i32 %83, %72\l  %85 = or i32 %35, 4\l  %86 = add nsw i32 %85, %29\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %87\l  %89 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %90 = mul nsw i32 %85, %3\l  %91 = add nsw i32 %90, %22\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %92\l  %94 = load i32, i32 addrspace(1)* %93, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %95 = mul nsw i32 %94, %89\l  %96 = add nsw i32 %95, %84\l  %97 = or i32 %35, 5\l  %98 = add nsw i32 %97, %29\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %99\l  %101 = load i32, i32 addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = mul nsw i32 %97, %3\l  %103 = add nsw i32 %102, %22\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %104\l  %106 = load i32, i32 addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = mul nsw i32 %106, %101\l  %108 = add nsw i32 %107, %96\l  %109 = or i32 %35, 6\l  %110 = add nsw i32 %109, %29\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %111\l  %113 = load i32, i32 addrspace(1)* %112, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %114 = mul nsw i32 %109, %3\l  %115 = add nsw i32 %114, %22\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %116\l  %118 = load i32, i32 addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = mul nsw i32 %118, %113\l  %120 = add nsw i32 %119, %108\l  %121 = or i32 %35, 7\l  %122 = add nsw i32 %121, %29\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %123\l  %125 = load i32, i32 addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = mul nsw i32 %121, %3\l  %127 = add nsw i32 %126, %22\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %128\l  %130 = load i32, i32 addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = mul nsw i32 %130, %125\l  %132 = add nsw i32 %131, %120\l  %133 = add nuw nsw i32 %35, 8\l  %134 = add i32 %37, 8\l  %135 = icmp eq i32 %134, %33\l  br i1 %135, label %136, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5483c50:s0 -> Node0x5485aa0;
	Node0x5483c50:s1 -> Node0x5483c50;
	Node0x5485aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%136:\l136:                                              \l  %137 = phi i32 [ undef, %28 ], [ %132, %34 ]\l  %138 = phi i32 [ 0, %28 ], [ %133, %34 ]\l  %139 = phi i32 [ 0, %28 ], [ %132, %34 ]\l  %140 = icmp eq i32 %30, 0\l  br i1 %140, label %159, label %141\l|{<s0>T|<s1>F}}"];
	Node0x5485aa0:s0 -> Node0x5485750;
	Node0x5485aa0:s1 -> Node0x548b0c0;
	Node0x548b0c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%141:\l141:                                              \l  %142 = phi i32 [ %156, %141 ], [ %138, %136 ]\l  %143 = phi i32 [ %155, %141 ], [ %139, %136 ]\l  %144 = phi i32 [ %157, %141 ], [ 0, %136 ]\l  %145 = add nsw i32 %142, %29\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %146\l  %148 = load i32, i32 addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = mul nsw i32 %142, %3\l  %150 = add nsw i32 %149, %22\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %151\l  %153 = load i32, i32 addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = mul nsw i32 %153, %148\l  %155 = add nsw i32 %154, %143\l  %156 = add nuw nsw i32 %142, 1\l  %157 = add i32 %144, 1\l  %158 = icmp eq i32 %157, %30\l  br i1 %158, label %159, label %141, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x548b0c0:s0 -> Node0x5485750;
	Node0x548b0c0:s1 -> Node0x548b0c0;
	Node0x5485750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%159:\l159:                                              \l  %160 = phi i32 [ 0, %5 ], [ %137, %136 ], [ %155, %141 ]\l  %161 = mul nsw i32 %14, %3\l  %162 = add nsw i32 %161, %22\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %163\l  store i32 %160, i32 addrspace(1)* %164, align 4, !tbaa !7\l  ret void\l}"];
}
