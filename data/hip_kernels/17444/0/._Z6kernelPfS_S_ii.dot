digraph "CFG for '_Z6kernelPfS_S_ii' function" {
	label="CFG for '_Z6kernelPfS_S_ii' function";

	Node0x4614750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = icmp sgt i32 %4, 0\l  br i1 %15, label %16, label %137\l|{<s0>T|<s1>F}}"];
	Node0x4614750:s0 -> Node0x4616620;
	Node0x4614750:s1 -> Node0x46166b0;
	Node0x4616620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%16:\l16:                                               \l  %17 = and i32 %4, 7\l  %18 = icmp ult i32 %4, 8\l  br i1 %18, label %115, label %19\l|{<s0>T|<s1>F}}"];
	Node0x4616620:s0 -> Node0x4616a20;
	Node0x4616620:s1 -> Node0x4616a70;
	Node0x4616a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %4, -8\l  br label %21\l}"];
	Node0x4616a70 -> Node0x4616c40;
	Node0x4616c40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%21:\l21:                                               \l  %22 = phi float [ 0.000000e+00, %19 ], [ %111, %21 ]\l  %23 = phi i32 [ 0, %19 ], [ %112, %21 ]\l  %24 = phi i32 [ 0, %19 ], [ %113, %21 ]\l  %25 = zext i32 %23 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %0, i64 %25\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %28 = mul nsw i32 %23, %3\l  %29 = add nsw i32 %28, %14\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %33 = fmul contract float %27, %32\l  %34 = fadd contract float %22, %33\l  %35 = or i32 %23, 1\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %39 = mul nsw i32 %35, %3\l  %40 = add nsw i32 %39, %14\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %44 = fmul contract float %38, %43\l  %45 = fadd contract float %34, %44\l  %46 = or i32 %23, 2\l  %47 = zext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %50 = mul nsw i32 %46, %3\l  %51 = add nsw i32 %50, %14\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %55 = fmul contract float %49, %54\l  %56 = fadd contract float %45, %55\l  %57 = or i32 %23, 3\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %61 = mul nsw i32 %57, %3\l  %62 = add nsw i32 %61, %14\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %66 = fmul contract float %60, %65\l  %67 = fadd contract float %56, %66\l  %68 = or i32 %23, 4\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %72 = mul nsw i32 %68, %3\l  %73 = add nsw i32 %72, %14\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %77 = fmul contract float %71, %76\l  %78 = fadd contract float %67, %77\l  %79 = or i32 %23, 5\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %83 = mul nsw i32 %79, %3\l  %84 = add nsw i32 %83, %14\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %88 = fmul contract float %82, %87\l  %89 = fadd contract float %78, %88\l  %90 = or i32 %23, 6\l  %91 = zext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %94 = mul nsw i32 %90, %3\l  %95 = add nsw i32 %94, %14\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %89, %99\l  %101 = or i32 %23, 7\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %105 = mul nsw i32 %101, %3\l  %106 = add nsw i32 %105, %14\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %110 = fmul contract float %104, %109\l  %111 = fadd contract float %100, %110\l  %112 = add nuw nsw i32 %23, 8\l  %113 = add i32 %24, 8\l  %114 = icmp eq i32 %113, %20\l  br i1 %114, label %115, label %21, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4616c40:s0 -> Node0x4616a20;
	Node0x4616c40:s1 -> Node0x4616c40;
	Node0x4616a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%115:\l115:                                              \l  %116 = phi float [ undef, %16 ], [ %111, %21 ]\l  %117 = phi float [ 0.000000e+00, %16 ], [ %111, %21 ]\l  %118 = phi i32 [ 0, %16 ], [ %112, %21 ]\l  %119 = icmp eq i32 %17, 0\l  br i1 %119, label %137, label %120\l|{<s0>T|<s1>F}}"];
	Node0x4616a20:s0 -> Node0x46166b0;
	Node0x4616a20:s1 -> Node0x461c7f0;
	Node0x461c7f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%120:\l120:                                              \l  %121 = phi float [ %133, %120 ], [ %117, %115 ]\l  %122 = phi i32 [ %134, %120 ], [ %118, %115 ]\l  %123 = phi i32 [ %135, %120 ], [ 0, %115 ]\l  %124 = zext i32 %122 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %127 = mul nsw i32 %122, %3\l  %128 = add nsw i32 %127, %14\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %1, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %132 = fmul contract float %126, %131\l  %133 = fadd contract float %121, %132\l  %134 = add nuw nsw i32 %122, 1\l  %135 = add i32 %123, 1\l  %136 = icmp eq i32 %135, %17\l  br i1 %136, label %137, label %120, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x461c7f0:s0 -> Node0x46166b0;
	Node0x461c7f0:s1 -> Node0x461c7f0;
	Node0x46166b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%137:\l137:                                              \l  %138 = phi float [ 0.000000e+00, %5 ], [ %116, %115 ], [ %133, %120 ]\l  %139 = sext i32 %14 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %2, i64 %139\l  store float %138, float addrspace(1)* %140, align 4, !tbaa !7\l  ret void\l}"];
}
