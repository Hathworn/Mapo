digraph "CFG for '_Z7MD_ED_DPfS_iiiS_ii' function" {
	label="CFG for '_Z7MD_ED_DPfS_iiiS_ii' function";

	Node0x54e2ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = icmp eq i32 %7, 0\l  %19 = icmp eq i32 %6, 0\l  br i1 %18, label %20, label %298\l|{<s0>T|<s1>F}}"];
	Node0x54e2ba0:s0 -> Node0x54e4b60;
	Node0x54e2ba0:s1 -> Node0x54e4bf0;
	Node0x54e4b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%20:\l20:                                               \l  br i1 %19, label %21, label %113\l|{<s0>T|<s1>F}}"];
	Node0x54e4b60:s0 -> Node0x54e4d30;
	Node0x54e4b60:s1 -> Node0x54e4d80;
	Node0x54e4d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%21:\l21:                                               \l  %22 = mul nsw i32 %4, %3\l  %23 = mul nsw i32 %17, %22\l  %24 = add nsw i32 %23, %22\l  %25 = mul nsw i32 %22, %2\l  %26 = icmp sgt i32 %24, %25\l  br i1 %26, label %405, label %27\l|{<s0>T|<s1>F}}"];
	Node0x54e4d30:s0 -> Node0x54e5190;
	Node0x54e4d30:s1 -> Node0x54e51e0;
	Node0x54e51e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%27:\l27:                                               \l  %28 = icmp eq i32 %16, 0\l  br i1 %28, label %29, label %112\l|{<s0>T|<s1>F}}"];
	Node0x54e51e0:s0 -> Node0x54e53b0;
	Node0x54e51e0:s1 -> Node0x54e5400;
	Node0x54e53b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%29:\l29:                                               \l  %30 = sext i32 %4 to i64\l  %31 = icmp sgt i32 %4, 0\l  br i1 %31, label %32, label %112\l|{<s0>T|<s1>F}}"];
	Node0x54e53b0:s0 -> Node0x54e5640;
	Node0x54e53b0:s1 -> Node0x54e5400;
	Node0x54e5640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%32:\l32:                                               \l  %33 = sext i32 %3 to i64\l  %34 = icmp sgt i32 %3, 0\l  %35 = and i64 %33, 7\l  %36 = icmp ult i32 %3, 8\l  %37 = and i64 %33, -8\l  %38 = icmp eq i64 %35, 0\l  br label %39\l}"];
	Node0x54e5640 -> Node0x54e5c50;
	Node0x54e5c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%39:\l39:                                               \l  %40 = phi i64 [ 0, %32 ], [ %110, %109 ]\l  br i1 %34, label %41, label %109\l|{<s0>T|<s1>F}}"];
	Node0x54e5c50:s0 -> Node0x54e5e80;
	Node0x54e5c50:s1 -> Node0x54e5d40;
	Node0x54e5e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%41:\l41:                                               \l  %42 = mul nsw i64 %40, %33\l  br i1 %36, label %96, label %43\l|{<s0>T|<s1>F}}"];
	Node0x54e5e80:s0 -> Node0x54e6050;
	Node0x54e5e80:s1 -> Node0x54e60a0;
	Node0x54e60a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%43:\l43:                                               \l  %44 = phi i64 [ %93, %43 ], [ 0, %41 ]\l  %45 = phi i64 [ %94, %43 ], [ 0, %41 ]\l  %46 = add nsw i64 %44, %42\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = trunc i64 %46 to i32\l  %50 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %49\l  store float %48, float addrspace(3)* %50, align 4, !tbaa !7\l  %51 = or i64 %44, 1\l  %52 = add nsw i64 %51, %42\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = trunc i64 %52 to i32\l  %56 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %55\l  store float %54, float addrspace(3)* %56, align 4, !tbaa !7\l  %57 = or i64 %44, 2\l  %58 = add nsw i64 %57, %42\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = trunc i64 %58 to i32\l  %62 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %61\l  store float %60, float addrspace(3)* %62, align 4, !tbaa !7\l  %63 = or i64 %44, 3\l  %64 = add nsw i64 %63, %42\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = trunc i64 %64 to i32\l  %68 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %67\l  store float %66, float addrspace(3)* %68, align 4, !tbaa !7\l  %69 = or i64 %44, 4\l  %70 = add nsw i64 %69, %42\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = trunc i64 %70 to i32\l  %74 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %73\l  store float %72, float addrspace(3)* %74, align 4, !tbaa !7\l  %75 = or i64 %44, 5\l  %76 = add nsw i64 %75, %42\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = trunc i64 %76 to i32\l  %80 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %79\l  store float %78, float addrspace(3)* %80, align 4, !tbaa !7\l  %81 = or i64 %44, 6\l  %82 = add nsw i64 %81, %42\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = trunc i64 %82 to i32\l  %86 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %85\l  store float %84, float addrspace(3)* %86, align 4, !tbaa !7\l  %87 = or i64 %44, 7\l  %88 = add nsw i64 %87, %42\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = trunc i64 %88 to i32\l  %92 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2, i32\l... 0, i32 %91\l  store float %90, float addrspace(3)* %92, align 4, !tbaa !7\l  %93 = add nuw nsw i64 %44, 8\l  %94 = add i64 %45, 8\l  %95 = icmp eq i64 %94, %37\l  br i1 %95, label %96, label %43, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x54e60a0:s0 -> Node0x54e6050;
	Node0x54e60a0:s1 -> Node0x54e60a0;
	Node0x54e6050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%96:\l96:                                               \l  %97 = phi i64 [ 0, %41 ], [ %93, %43 ]\l  br i1 %38, label %109, label %98\l|{<s0>T|<s1>F}}"];
	Node0x54e6050:s0 -> Node0x54e5d40;
	Node0x54e6050:s1 -> Node0x54e9980;
	Node0x54e9980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%98:\l98:                                               \l  %99 = phi i64 [ %106, %98 ], [ %97, %96 ]\l  %100 = phi i64 [ %107, %98 ], [ 0, %96 ]\l  %101 = add nsw i64 %99, %42\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = trunc i64 %101 to i32\l  %105 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %104\l  store float %103, float addrspace(3)* %105, align 4, !tbaa !7\l  %106 = add nuw nsw i64 %99, 1\l  %107 = add i64 %100, 1\l  %108 = icmp eq i64 %107, %35\l  br i1 %108, label %109, label %98, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x54e9980:s0 -> Node0x54e5d40;
	Node0x54e9980:s1 -> Node0x54e9980;
	Node0x54e5d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%109:\l109:                                              \l  %110 = add nuw nsw i64 %40, 1\l  %111 = icmp eq i64 %110, %30\l  br i1 %111, label %112, label %39, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x54e5d40:s0 -> Node0x54e5400;
	Node0x54e5d40:s1 -> Node0x54e5c50;
	Node0x54e5400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%112:\l112:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  br label %202\l}"];
	Node0x54e5400 -> Node0x54ea7a0;
	Node0x54e4d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%113:\l113:                                              \l  %114 = add nsw i32 %17, %3\l  %115 = icmp sgt i32 %114, %2\l  br i1 %115, label %405, label %116\l|{<s0>T|<s1>F}}"];
	Node0x54e4d80:s0 -> Node0x54e5190;
	Node0x54e4d80:s1 -> Node0x54ea980;
	Node0x54ea980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%116:\l116:                                              \l  %117 = icmp eq i32 %16, 0\l  br i1 %117, label %118, label %201\l|{<s0>T|<s1>F}}"];
	Node0x54ea980:s0 -> Node0x54eab10;
	Node0x54ea980:s1 -> Node0x54eab60;
	Node0x54eab10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%118:\l118:                                              \l  %119 = sext i32 %4 to i64\l  %120 = icmp sgt i32 %4, 0\l  br i1 %120, label %121, label %201\l|{<s0>T|<s1>F}}"];
	Node0x54eab10:s0 -> Node0x54eada0;
	Node0x54eab10:s1 -> Node0x54eab60;
	Node0x54eada0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%121:\l121:                                              \l  %122 = sext i32 %3 to i64\l  %123 = icmp sgt i32 %3, 0\l  %124 = and i64 %122, 7\l  %125 = icmp ult i32 %3, 8\l  %126 = and i64 %122, -8\l  %127 = icmp eq i64 %124, 0\l  br label %128\l}"];
	Node0x54eada0 -> Node0x54eb1e0;
	Node0x54eb1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%128:\l128:                                              \l  %129 = phi i64 [ 0, %121 ], [ %199, %198 ]\l  br i1 %123, label %130, label %198\l|{<s0>T|<s1>F}}"];
	Node0x54eb1e0:s0 -> Node0x54e8070;
	Node0x54eb1e0:s1 -> Node0x54e7f30;
	Node0x54e8070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%130:\l130:                                              \l  %131 = mul nsw i64 %129, %122\l  br i1 %125, label %185, label %132\l|{<s0>T|<s1>F}}"];
	Node0x54e8070:s0 -> Node0x54e8240;
	Node0x54e8070:s1 -> Node0x54e8290;
	Node0x54e8290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%132:\l132:                                              \l  %133 = phi i64 [ %182, %132 ], [ 0, %130 ]\l  %134 = phi i64 [ %183, %132 ], [ 0, %130 ]\l  %135 = add nsw i64 %133, %131\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = trunc i64 %135 to i32\l  %139 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %138\l  store float %137, float addrspace(3)* %139, align 4, !tbaa !7\l  %140 = or i64 %133, 1\l  %141 = add nsw i64 %140, %131\l  %142 = getelementptr inbounds float, float addrspace(1)* %1, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = trunc i64 %141 to i32\l  %145 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %144\l  store float %143, float addrspace(3)* %145, align 4, !tbaa !7\l  %146 = or i64 %133, 2\l  %147 = add nsw i64 %146, %131\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %150 = trunc i64 %147 to i32\l  %151 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %150\l  store float %149, float addrspace(3)* %151, align 4, !tbaa !7\l  %152 = or i64 %133, 3\l  %153 = add nsw i64 %152, %131\l  %154 = getelementptr inbounds float, float addrspace(1)* %1, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = trunc i64 %153 to i32\l  %157 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %156\l  store float %155, float addrspace(3)* %157, align 4, !tbaa !7\l  %158 = or i64 %133, 4\l  %159 = add nsw i64 %158, %131\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %162 = trunc i64 %159 to i32\l  %163 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %162\l  store float %161, float addrspace(3)* %163, align 4, !tbaa !7\l  %164 = or i64 %133, 5\l  %165 = add nsw i64 %164, %131\l  %166 = getelementptr inbounds float, float addrspace(1)* %1, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %168 = trunc i64 %165 to i32\l  %169 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %168\l  store float %167, float addrspace(3)* %169, align 4, !tbaa !7\l  %170 = or i64 %133, 6\l  %171 = add nsw i64 %170, %131\l  %172 = getelementptr inbounds float, float addrspace(1)* %1, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %174 = trunc i64 %171 to i32\l  %175 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %174\l  store float %173, float addrspace(3)* %175, align 4, !tbaa !7\l  %176 = or i64 %133, 7\l  %177 = add nsw i64 %176, %131\l  %178 = getelementptr inbounds float, float addrspace(1)* %1, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %180 = trunc i64 %177 to i32\l  %181 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %180\l  store float %179, float addrspace(3)* %181, align 4, !tbaa !7\l  %182 = add nuw nsw i64 %133, 8\l  %183 = add i64 %134, 8\l  %184 = icmp eq i64 %183, %126\l  br i1 %184, label %185, label %132, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x54e8290:s0 -> Node0x54e8240;
	Node0x54e8290:s1 -> Node0x54e8290;
	Node0x54e8240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%185:\l185:                                              \l  %186 = phi i64 [ 0, %130 ], [ %182, %132 ]\l  br i1 %127, label %198, label %187\l|{<s0>T|<s1>F}}"];
	Node0x54e8240:s0 -> Node0x54e7f30;
	Node0x54e8240:s1 -> Node0x54ee290;
	Node0x54ee290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%187:\l187:                                              \l  %188 = phi i64 [ %195, %187 ], [ %186, %185 ]\l  %189 = phi i64 [ %196, %187 ], [ 0, %185 ]\l  %190 = add nsw i64 %188, %131\l  %191 = getelementptr inbounds float, float addrspace(1)* %1, i64 %190\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %193 = trunc i64 %190 to i32\l  %194 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %193\l  store float %192, float addrspace(3)* %194, align 4, !tbaa !7\l  %195 = add nuw nsw i64 %188, 1\l  %196 = add i64 %189, 1\l  %197 = icmp eq i64 %196, %124\l  br i1 %197, label %198, label %187, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x54ee290:s0 -> Node0x54e7f30;
	Node0x54ee290:s1 -> Node0x54ee290;
	Node0x54e7f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%198:\l198:                                              \l  %199 = add nuw nsw i64 %129, 1\l  %200 = icmp eq i64 %199, %119\l  br i1 %200, label %201, label %128, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x54e7f30:s0 -> Node0x54eab60;
	Node0x54e7f30:s1 -> Node0x54eb1e0;
	Node0x54eab60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%201:\l201:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  br label %202\l}"];
	Node0x54eab60 -> Node0x54ea7a0;
	Node0x54ea7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%202:\l202:                                              \l  %203 = phi i32 [ %23, %112 ], [ %17, %201 ]\l  %204 = phi i32 [ %3, %112 ], [ %2, %201 ]\l  fence syncscope(\"workgroup\") acquire\l  %205 = sext i32 %3 to i64\l  %206 = icmp sgt i32 %3, 0\l  br i1 %206, label %207, label %275\l|{<s0>T|<s1>F}}"];
	Node0x54ea7a0:s0 -> Node0x54ef310;
	Node0x54ea7a0:s1 -> Node0x54ef360;
	Node0x54ef310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%207:\l207:                                              \l  %208 = sext i32 %4 to i64\l  %209 = icmp sgt i32 %4, 0\l  %210 = sext i32 %203 to i64\l  %211 = sext i32 %204 to i64\l  %212 = and i64 %208, 1\l  %213 = icmp eq i32 %4, 1\l  %214 = and i64 %208, -2\l  %215 = icmp eq i64 %212, 0\l  br label %216\l}"];
	Node0x54ef310 -> Node0x54ef880;
	Node0x54ef880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%216:\l216:                                              \l  %217 = phi i64 [ 0, %207 ], [ %273, %270 ]\l  %218 = phi float [ 0.000000e+00, %207 ], [ %272, %270 ]\l  br i1 %209, label %219, label %270\l|{<s0>T|<s1>F}}"];
	Node0x54ef880:s0 -> Node0x54f0580;
	Node0x54ef880:s1 -> Node0x54ef940;
	Node0x54f0580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%219:\l219:                                              \l  %220 = add nsw i64 %217, %210\l  br i1 %213, label %253, label %221\l|{<s0>T|<s1>F}}"];
	Node0x54f0580:s0 -> Node0x54f0750;
	Node0x54f0580:s1 -> Node0x54f07a0;
	Node0x54f07a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%221:\l221:                                              \l  %222 = phi i64 [ %250, %221 ], [ 0, %219 ]\l  %223 = phi float [ %249, %221 ], [ 0.000000e+00, %219 ]\l  %224 = phi i64 [ %251, %221 ], [ 0, %219 ]\l  %225 = mul nsw i64 %222, %211\l  %226 = add nsw i64 %220, %225\l  %227 = getelementptr inbounds float, float addrspace(1)* %0, i64 %226\l  %228 = load float, float addrspace(1)* %227, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %229 = mul nsw i64 %222, %205\l  %230 = add nsw i64 %229, %217\l  %231 = trunc i64 %230 to i32\l  %232 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %231\l  %233 = load float, float addrspace(3)* %232, align 4, !tbaa !7\l  %234 = fsub contract float %228, %233\l  %235 = fmul contract float %234, %234\l  %236 = fadd contract float %223, %235\l  %237 = or i64 %222, 1\l  %238 = mul nsw i64 %237, %211\l  %239 = add nsw i64 %220, %238\l  %240 = getelementptr inbounds float, float addrspace(1)* %0, i64 %239\l  %241 = load float, float addrspace(1)* %240, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %242 = mul nsw i64 %237, %205\l  %243 = add nsw i64 %242, %217\l  %244 = trunc i64 %243 to i32\l  %245 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %244\l  %246 = load float, float addrspace(3)* %245, align 4, !tbaa !7\l  %247 = fsub contract float %241, %246\l  %248 = fmul contract float %247, %247\l  %249 = fadd contract float %236, %248\l  %250 = add nuw nsw i64 %222, 2\l  %251 = add i64 %224, 2\l  %252 = icmp eq i64 %251, %214\l  br i1 %252, label %253, label %221, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x54f07a0:s0 -> Node0x54f0750;
	Node0x54f07a0:s1 -> Node0x54f07a0;
	Node0x54f0750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%253:\l253:                                              \l  %254 = phi float [ undef, %219 ], [ %249, %221 ]\l  %255 = phi i64 [ 0, %219 ], [ %250, %221 ]\l  %256 = phi float [ 0.000000e+00, %219 ], [ %249, %221 ]\l  br i1 %215, label %270, label %257\l|{<s0>T|<s1>F}}"];
	Node0x54f0750:s0 -> Node0x54ef940;
	Node0x54f0750:s1 -> Node0x54e3e10;
	Node0x54e3e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%257:\l257:                                              \l  %258 = mul nsw i64 %255, %211\l  %259 = add nsw i64 %220, %258\l  %260 = getelementptr inbounds float, float addrspace(1)* %0, i64 %259\l  %261 = load float, float addrspace(1)* %260, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %262 = mul nsw i64 %255, %205\l  %263 = add nsw i64 %262, %217\l  %264 = trunc i64 %263 to i32\l  %265 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @T2,\l... i32 0, i32 %264\l  %266 = load float, float addrspace(3)* %265, align 4, !tbaa !7\l  %267 = fsub contract float %261, %266\l  %268 = fmul contract float %267, %267\l  %269 = fadd contract float %256, %268\l  br label %270\l}"];
	Node0x54e3e10 -> Node0x54ef940;
	Node0x54ef940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%270:\l270:                                              \l  %271 = phi float [ 0.000000e+00, %216 ], [ %254, %253 ], [ %269, %257 ]\l  %272 = fadd contract float %218, %271\l  %273 = add nuw nsw i64 %217, 1\l  %274 = icmp eq i64 %273, %205\l  br i1 %274, label %275, label %216, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x54ef940:s0 -> Node0x54ef360;
	Node0x54ef940:s1 -> Node0x54ef880;
	Node0x54ef360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%275:\l275:                                              \l  %276 = phi float [ 0.000000e+00, %202 ], [ %272, %270 ]\l  %277 = fcmp olt float %276, 0x39F0000000000000\l  %278 = select i1 %277, float 0x41F0000000000000, float 1.000000e+00\l  %279 = fmul float %276, %278\l  %280 = tail call float @llvm.sqrt.f32(float %279)\l  %281 = bitcast float %280 to i32\l  %282 = add nsw i32 %281, -1\l  %283 = bitcast i32 %282 to float\l  %284 = add nsw i32 %281, 1\l  %285 = bitcast i32 %284 to float\l  %286 = tail call i1 @llvm.amdgcn.class.f32(float %279, i32 608)\l  %287 = select i1 %277, float 0x3EF0000000000000, float 1.000000e+00\l  %288 = fneg float %285\l  %289 = tail call float @llvm.fma.f32(float %288, float %280, float %279)\l  %290 = fcmp ogt float %289, 0.000000e+00\l  %291 = fneg float %283\l  %292 = tail call float @llvm.fma.f32(float %291, float %280, float %279)\l  %293 = fcmp ole float %292, 0.000000e+00\l  %294 = select i1 %293, float %283, float %280\l  %295 = select i1 %290, float %285, float %294\l  %296 = fmul float %287, %295\l  %297 = select i1 %286, float %279, float %296\l  br label %401\l}"];
	Node0x54ef360 -> Node0x54f53c0;
	Node0x54e4bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%298:\l298:                                              \l  br i1 %19, label %299, label %305\l|{<s0>T|<s1>F}}"];
	Node0x54e4bf0:s0 -> Node0x54f54c0;
	Node0x54e4bf0:s1 -> Node0x54f5510;
	Node0x54f54c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%299:\l299:                                              \l  %300 = mul nsw i32 %4, %3\l  %301 = mul nsw i32 %17, %300\l  %302 = add nsw i32 %301, %300\l  %303 = mul nsw i32 %300, %2\l  %304 = icmp sgt i32 %302, %303\l  br i1 %304, label %405, label %308\l|{<s0>T|<s1>F}}"];
	Node0x54f54c0:s0 -> Node0x54e5190;
	Node0x54f54c0:s1 -> Node0x54f5920;
	Node0x54f5510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%305:\l305:                                              \l  %306 = add nsw i32 %17, %3\l  %307 = icmp sgt i32 %306, %2\l  br i1 %307, label %405, label %308\l|{<s0>T|<s1>F}}"];
	Node0x54f5510:s0 -> Node0x54e5190;
	Node0x54f5510:s1 -> Node0x54f5920;
	Node0x54f5920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%308:\l308:                                              \l  %309 = phi i32 [ %301, %299 ], [ %17, %305 ]\l  %310 = phi i32 [ %3, %299 ], [ %2, %305 ]\l  %311 = sext i32 %3 to i64\l  %312 = icmp sgt i32 %3, 0\l  br i1 %312, label %313, label %378\l|{<s0>T|<s1>F}}"];
	Node0x54f5920:s0 -> Node0x54f5e50;
	Node0x54f5920:s1 -> Node0x54f5ea0;
	Node0x54f5e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%313:\l313:                                              \l  %314 = sext i32 %4 to i64\l  %315 = icmp sgt i32 %4, 0\l  %316 = sext i32 %309 to i64\l  %317 = sext i32 %310 to i64\l  %318 = and i64 %314, 1\l  %319 = icmp eq i32 %4, 1\l  %320 = and i64 %314, -2\l  %321 = icmp eq i64 %318, 0\l  br label %322\l}"];
	Node0x54f5e50 -> Node0x54f63c0;
	Node0x54f63c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%322:\l322:                                              \l  %323 = phi i64 [ 0, %313 ], [ %376, %373 ]\l  %324 = phi float [ 0.000000e+00, %313 ], [ %375, %373 ]\l  br i1 %315, label %325, label %373\l|{<s0>T|<s1>F}}"];
	Node0x54f63c0:s0 -> Node0x54f66e0;
	Node0x54f63c0:s1 -> Node0x54f6480;
	Node0x54f66e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%325:\l325:                                              \l  %326 = add nsw i64 %323, %316\l  br i1 %319, label %357, label %327\l|{<s0>T|<s1>F}}"];
	Node0x54f66e0:s0 -> Node0x54f68b0;
	Node0x54f66e0:s1 -> Node0x54f6900;
	Node0x54f6900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%327:\l327:                                              \l  %328 = phi i64 [ %354, %327 ], [ 0, %325 ]\l  %329 = phi float [ %353, %327 ], [ 0.000000e+00, %325 ]\l  %330 = phi i64 [ %355, %327 ], [ 0, %325 ]\l  %331 = mul nsw i64 %328, %317\l  %332 = add nsw i64 %326, %331\l  %333 = getelementptr inbounds float, float addrspace(1)* %0, i64 %332\l  %334 = load float, float addrspace(1)* %333, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %335 = mul nsw i64 %328, %311\l  %336 = add nsw i64 %335, %323\l  %337 = getelementptr inbounds float, float addrspace(1)* %1, i64 %336\l  %338 = load float, float addrspace(1)* %337, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %339 = fsub contract float %334, %338\l  %340 = fmul contract float %339, %339\l  %341 = fadd contract float %329, %340\l  %342 = or i64 %328, 1\l  %343 = mul nsw i64 %342, %317\l  %344 = add nsw i64 %326, %343\l  %345 = getelementptr inbounds float, float addrspace(1)* %0, i64 %344\l  %346 = load float, float addrspace(1)* %345, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %347 = mul nsw i64 %342, %311\l  %348 = add nsw i64 %347, %323\l  %349 = getelementptr inbounds float, float addrspace(1)* %1, i64 %348\l  %350 = load float, float addrspace(1)* %349, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %351 = fsub contract float %346, %350\l  %352 = fmul contract float %351, %351\l  %353 = fadd contract float %341, %352\l  %354 = add nuw nsw i64 %328, 2\l  %355 = add i64 %330, 2\l  %356 = icmp eq i64 %355, %320\l  br i1 %356, label %357, label %327, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x54f6900:s0 -> Node0x54f68b0;
	Node0x54f6900:s1 -> Node0x54f6900;
	Node0x54f68b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%357:\l357:                                              \l  %358 = phi float [ undef, %325 ], [ %353, %327 ]\l  %359 = phi i64 [ 0, %325 ], [ %354, %327 ]\l  %360 = phi float [ 0.000000e+00, %325 ], [ %353, %327 ]\l  br i1 %321, label %373, label %361\l|{<s0>T|<s1>F}}"];
	Node0x54f68b0:s0 -> Node0x54f6480;
	Node0x54f68b0:s1 -> Node0x54f8070;
	Node0x54f8070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%361:\l361:                                              \l  %362 = mul nsw i64 %359, %317\l  %363 = add nsw i64 %326, %362\l  %364 = getelementptr inbounds float, float addrspace(1)* %0, i64 %363\l  %365 = load float, float addrspace(1)* %364, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %366 = mul nsw i64 %359, %311\l  %367 = add nsw i64 %366, %323\l  %368 = getelementptr inbounds float, float addrspace(1)* %1, i64 %367\l  %369 = load float, float addrspace(1)* %368, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %370 = fsub contract float %365, %369\l  %371 = fmul contract float %370, %370\l  %372 = fadd contract float %360, %371\l  br label %373\l}"];
	Node0x54f8070 -> Node0x54f6480;
	Node0x54f6480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%373:\l373:                                              \l  %374 = phi float [ 0.000000e+00, %322 ], [ %358, %357 ], [ %372, %361 ]\l  %375 = fadd contract float %324, %374\l  %376 = add nuw nsw i64 %323, 1\l  %377 = icmp eq i64 %376, %311\l  br i1 %377, label %378, label %322, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x54f6480:s0 -> Node0x54f5ea0;
	Node0x54f6480:s1 -> Node0x54f63c0;
	Node0x54f5ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%378:\l378:                                              \l  %379 = phi float [ 0.000000e+00, %308 ], [ %375, %373 ]\l  %380 = fcmp olt float %379, 0x39F0000000000000\l  %381 = select i1 %380, float 0x41F0000000000000, float 1.000000e+00\l  %382 = fmul float %379, %381\l  %383 = tail call float @llvm.sqrt.f32(float %382)\l  %384 = bitcast float %383 to i32\l  %385 = add nsw i32 %384, -1\l  %386 = bitcast i32 %385 to float\l  %387 = add nsw i32 %384, 1\l  %388 = bitcast i32 %387 to float\l  %389 = tail call i1 @llvm.amdgcn.class.f32(float %382, i32 608)\l  %390 = select i1 %380, float 0x3EF0000000000000, float 1.000000e+00\l  %391 = fneg float %388\l  %392 = tail call float @llvm.fma.f32(float %391, float %383, float %382)\l  %393 = fcmp ogt float %392, 0.000000e+00\l  %394 = fneg float %386\l  %395 = tail call float @llvm.fma.f32(float %394, float %383, float %382)\l  %396 = fcmp ole float %395, 0.000000e+00\l  %397 = select i1 %396, float %386, float %383\l  %398 = select i1 %393, float %388, float %397\l  %399 = fmul float %390, %398\l  %400 = select i1 %389, float %382, float %399\l  br label %401\l}"];
	Node0x54f5ea0 -> Node0x54f53c0;
	Node0x54f53c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%401:\l401:                                              \l  %402 = phi float [ %297, %275 ], [ %400, %378 ]\l  %403 = sext i32 %17 to i64\l  %404 = getelementptr inbounds float, float addrspace(1)* %5, i64 %403\l  store float %402, float addrspace(1)* %404, align 4, !tbaa !7\l  br label %405\l}"];
	Node0x54f53c0 -> Node0x54e5190;
	Node0x54e5190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%405:\l405:                                              \l  ret void\l}"];
}
