digraph "CFG for '_Z7MD_ED_IPfS_iiiS_ii' function" {
	label="CFG for '_Z7MD_ED_IPfS_iiiS_ii' function";

	Node0x5144b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%8:\l  %9 = icmp eq i32 %7, 0\l  br i1 %9, label %10, label %377\l|{<s0>T|<s1>F}}"];
	Node0x5144b80:s0 -> Node0x5145270;
	Node0x5144b80:s1 -> Node0x5145300;
	Node0x5145270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%10:\l10:                                               \l  %11 = mul nsw i32 %4, %3\l  %12 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %11\l  %13 = icmp eq i32 %6, 0\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %15 = mul i32 %14, %4\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %17 = add i32 %15, %16\l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = getelementptr i8, i8 addrspace(4)* %18, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  br i1 %13, label %24, label %35\l|{<s0>T|<s1>F}}"];
	Node0x5145270:s0 -> Node0x5147690;
	Node0x5145270:s1 -> Node0x5147720;
	Node0x5147690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%24:\l24:                                               \l  %25 = getelementptr i8, i8 addrspace(4)* %18, i64 6\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 2, !range !5, !invariant.load !6\l  %28 = zext i16 %27 to i32\l  %29 = mul nuw nsw i32 %28, %23\l  %30 = mul i32 %29, %19\l  %31 = add i32 %30, %17\l  %32 = mul i32 %31, %3\l  %33 = mul nsw i32 %4, %2\l  %34 = icmp ult i32 %31, %33\l  br i1 %34, label %42, label %650\l|{<s0>T|<s1>F}}"];
	Node0x5147690:s0 -> Node0x5146c70;
	Node0x5147690:s1 -> Node0x5148b90;
	Node0x5147720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%35:\l35:                                               \l  %36 = mul i32 %19, %23\l  %37 = mul i32 %16, %2\l  %38 = add i32 %37, %14\l  %39 = add i32 %38, %36\l  %40 = add nsw i32 %17, %3\l  %41 = icmp sgt i32 %40, %2\l  br i1 %41, label %650, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5147720:s0 -> Node0x5148b90;
	Node0x5147720:s1 -> Node0x5146c70;
	Node0x5146c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%42:\l42:                                               \l  %43 = phi i32 [ %32, %24 ], [ %39, %35 ]\l  %44 = icmp eq i32 %17, 0\l  br i1 %44, label %45, label %128\l|{<s0>T|<s1>F}}"];
	Node0x5146c70:s0 -> Node0x5149220;
	Node0x5146c70:s1 -> Node0x5149270;
	Node0x5149220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%45:\l45:                                               \l  %46 = sext i32 %4 to i64\l  %47 = icmp sgt i32 %4, 0\l  br i1 %47, label %48, label %128\l|{<s0>T|<s1>F}}"];
	Node0x5149220:s0 -> Node0x5149470;
	Node0x5149220:s1 -> Node0x5149270;
	Node0x5149470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%48:\l48:                                               \l  %49 = sext i32 %3 to i64\l  %50 = icmp sgt i32 %3, 0\l  %51 = and i64 %49, 7\l  %52 = icmp ult i32 %3, 8\l  %53 = and i64 %49, -8\l  %54 = icmp eq i64 %51, 0\l  br label %55\l}"];
	Node0x5149470 -> Node0x5149940;
	Node0x5149940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%55:\l55:                                               \l  %56 = phi i64 [ 0, %48 ], [ %126, %125 ]\l  br i1 %50, label %57, label %125\l|{<s0>T|<s1>F}}"];
	Node0x5149940:s0 -> Node0x5149b70;
	Node0x5149940:s1 -> Node0x5149a30;
	Node0x5149b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%57:\l57:                                               \l  %58 = mul nsw i64 %56, %49\l  br i1 %52, label %112, label %59\l|{<s0>T|<s1>F}}"];
	Node0x5149b70:s0 -> Node0x5149d40;
	Node0x5149b70:s1 -> Node0x5149d90;
	Node0x5149d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%59:\l59:                                               \l  %60 = phi i64 [ %109, %59 ], [ 0, %57 ]\l  %61 = phi i64 [ %110, %59 ], [ 0, %57 ]\l  %62 = add nsw i64 %60, %58\l  %63 = getelementptr inbounds float, float addrspace(1)* %1, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %65 = trunc i64 %62 to i32\l  %66 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %65\l  store float %64, float addrspace(3)* %66, align 4, !tbaa !7\l  %67 = or i64 %60, 1\l  %68 = add nsw i64 %67, %58\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = trunc i64 %68 to i32\l  %72 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %71\l  store float %70, float addrspace(3)* %72, align 4, !tbaa !7\l  %73 = or i64 %60, 2\l  %74 = add nsw i64 %73, %58\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %77 = trunc i64 %74 to i32\l  %78 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %77\l  store float %76, float addrspace(3)* %78, align 4, !tbaa !7\l  %79 = or i64 %60, 3\l  %80 = add nsw i64 %79, %58\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %83 = trunc i64 %80 to i32\l  %84 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %83\l  store float %82, float addrspace(3)* %84, align 4, !tbaa !7\l  %85 = or i64 %60, 4\l  %86 = add nsw i64 %85, %58\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %89 = trunc i64 %86 to i32\l  %90 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %89\l  store float %88, float addrspace(3)* %90, align 4, !tbaa !7\l  %91 = or i64 %60, 5\l  %92 = add nsw i64 %91, %58\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %95 = trunc i64 %92 to i32\l  %96 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sh_mem,\l... i32 0, i32 %95\l  store float %94, float addrspace(3)* %96, align 4, !tbaa !7\l  %97 = or i64 %60, 6\l  %98 = add nsw i64 %97, %58\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %101 = trunc i64 %98 to i32\l  %102 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %101\l  store float %100, float addrspace(3)* %102, align 4, !tbaa !7\l  %103 = or i64 %60, 7\l  %104 = add nsw i64 %103, %58\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %107 = trunc i64 %104 to i32\l  %108 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %107\l  store float %106, float addrspace(3)* %108, align 4, !tbaa !7\l  %109 = add nuw nsw i64 %60, 8\l  %110 = add i64 %61, 8\l  %111 = icmp eq i64 %110, %53\l  br i1 %111, label %112, label %59, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5149d90:s0 -> Node0x5149d40;
	Node0x5149d90:s1 -> Node0x5149d90;
	Node0x5149d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%112:\l112:                                              \l  %113 = phi i64 [ 0, %57 ], [ %109, %59 ]\l  br i1 %54, label %125, label %114\l|{<s0>T|<s1>F}}"];
	Node0x5149d40:s0 -> Node0x5149a30;
	Node0x5149d40:s1 -> Node0x514d030;
	Node0x514d030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%114:\l114:                                              \l  %115 = phi i64 [ %122, %114 ], [ %113, %112 ]\l  %116 = phi i64 [ %123, %114 ], [ 0, %112 ]\l  %117 = add nsw i64 %115, %58\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %120 = trunc i64 %117 to i32\l  %121 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %120\l  store float %119, float addrspace(3)* %121, align 4, !tbaa !7\l  %122 = add nuw nsw i64 %115, 1\l  %123 = add i64 %116, 1\l  %124 = icmp eq i64 %123, %51\l  br i1 %124, label %125, label %114, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x514d030:s0 -> Node0x5149a30;
	Node0x514d030:s1 -> Node0x514d030;
	Node0x5149a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%125:\l125:                                              \l  %126 = add nuw nsw i64 %56, 1\l  %127 = icmp eq i64 %126, %46\l  br i1 %127, label %128, label %55, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5149a30:s0 -> Node0x5149270;
	Node0x5149a30:s1 -> Node0x5149940;
	Node0x5149270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%128:\l128:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %129 = sext i32 %3 to i64\l  %130 = icmp sgt i32 %3, 0\l  br i1 %130, label %131, label %255\l|{<s0>T|<s1>F}}"];
	Node0x5149270:s0 -> Node0x514a760;
	Node0x5149270:s1 -> Node0x514a7f0;
	Node0x514a760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%131:\l131:                                              \l  %132 = sext i32 %43 to i64\l  %133 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %134 = mul i32 %133, %3\l  %135 = and i64 %129, 7\l  %136 = icmp ult i32 %3, 8\l  br i1 %136, label %233, label %137\l|{<s0>T|<s1>F}}"];
	Node0x514a760:s0 -> Node0x514e880;
	Node0x514a760:s1 -> Node0x514e8d0;
	Node0x514e8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%137:\l137:                                              \l  %138 = and i64 %129, -8\l  br label %139\l}"];
	Node0x514e8d0 -> Node0x514eaa0;
	Node0x514eaa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%139:\l139:                                              \l  %140 = phi i64 [ 0, %137 ], [ %230, %139 ]\l  %141 = phi float [ 0.000000e+00, %137 ], [ %229, %139 ]\l  %142 = phi i64 [ 0, %137 ], [ %231, %139 ]\l  %143 = add nsw i64 %140, %132\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %146 = trunc i64 %140 to i32\l  %147 = add i32 %134, %146\l  %148 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %147\l  %149 = load float, float addrspace(3)* %148, align 4, !tbaa !7\l  %150 = fsub contract float %145, %149\l  %151 = fmul contract float %150, %150\l  %152 = fadd contract float %141, %151\l  %153 = or i64 %140, 1\l  %154 = add nsw i64 %153, %132\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %157 = trunc i64 %153 to i32\l  %158 = add i32 %134, %157\l  %159 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %158\l  %160 = load float, float addrspace(3)* %159, align 4, !tbaa !7\l  %161 = fsub contract float %156, %160\l  %162 = fmul contract float %161, %161\l  %163 = fadd contract float %152, %162\l  %164 = or i64 %140, 2\l  %165 = add nsw i64 %164, %132\l  %166 = getelementptr inbounds float, float addrspace(1)* %0, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %168 = trunc i64 %164 to i32\l  %169 = add i32 %134, %168\l  %170 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %169\l  %171 = load float, float addrspace(3)* %170, align 4, !tbaa !7\l  %172 = fsub contract float %167, %171\l  %173 = fmul contract float %172, %172\l  %174 = fadd contract float %163, %173\l  %175 = or i64 %140, 3\l  %176 = add nsw i64 %175, %132\l  %177 = getelementptr inbounds float, float addrspace(1)* %0, i64 %176\l  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %179 = trunc i64 %175 to i32\l  %180 = add i32 %134, %179\l  %181 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %180\l  %182 = load float, float addrspace(3)* %181, align 4, !tbaa !7\l  %183 = fsub contract float %178, %182\l  %184 = fmul contract float %183, %183\l  %185 = fadd contract float %174, %184\l  %186 = or i64 %140, 4\l  %187 = add nsw i64 %186, %132\l  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %190 = trunc i64 %186 to i32\l  %191 = add i32 %134, %190\l  %192 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %191\l  %193 = load float, float addrspace(3)* %192, align 4, !tbaa !7\l  %194 = fsub contract float %189, %193\l  %195 = fmul contract float %194, %194\l  %196 = fadd contract float %185, %195\l  %197 = or i64 %140, 5\l  %198 = add nsw i64 %197, %132\l  %199 = getelementptr inbounds float, float addrspace(1)* %0, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %201 = trunc i64 %197 to i32\l  %202 = add i32 %134, %201\l  %203 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %202\l  %204 = load float, float addrspace(3)* %203, align 4, !tbaa !7\l  %205 = fsub contract float %200, %204\l  %206 = fmul contract float %205, %205\l  %207 = fadd contract float %196, %206\l  %208 = or i64 %140, 6\l  %209 = add nsw i64 %208, %132\l  %210 = getelementptr inbounds float, float addrspace(1)* %0, i64 %209\l  %211 = load float, float addrspace(1)* %210, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %212 = trunc i64 %208 to i32\l  %213 = add i32 %134, %212\l  %214 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %213\l  %215 = load float, float addrspace(3)* %214, align 4, !tbaa !7\l  %216 = fsub contract float %211, %215\l  %217 = fmul contract float %216, %216\l  %218 = fadd contract float %207, %217\l  %219 = or i64 %140, 7\l  %220 = add nsw i64 %219, %132\l  %221 = getelementptr inbounds float, float addrspace(1)* %0, i64 %220\l  %222 = load float, float addrspace(1)* %221, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %223 = trunc i64 %219 to i32\l  %224 = add i32 %134, %223\l  %225 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %224\l  %226 = load float, float addrspace(3)* %225, align 4, !tbaa !7\l  %227 = fsub contract float %222, %226\l  %228 = fmul contract float %227, %227\l  %229 = fadd contract float %218, %228\l  %230 = add nuw nsw i64 %140, 8\l  %231 = add i64 %142, 8\l  %232 = icmp eq i64 %231, %138\l  br i1 %232, label %233, label %139, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x514eaa0:s0 -> Node0x514e880;
	Node0x514eaa0:s1 -> Node0x514eaa0;
	Node0x514e880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%233:\l233:                                              \l  %234 = phi float [ undef, %131 ], [ %229, %139 ]\l  %235 = phi i64 [ 0, %131 ], [ %230, %139 ]\l  %236 = phi float [ 0.000000e+00, %131 ], [ %229, %139 ]\l  %237 = icmp eq i64 %135, 0\l  br i1 %237, label %255, label %238\l|{<s0>T|<s1>F}}"];
	Node0x514e880:s0 -> Node0x514a7f0;
	Node0x514e880:s1 -> Node0x51533f0;
	Node0x51533f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%238:\l238:                                              \l  %239 = phi i64 [ %252, %238 ], [ %235, %233 ]\l  %240 = phi float [ %251, %238 ], [ %236, %233 ]\l  %241 = phi i64 [ %253, %238 ], [ 0, %233 ]\l  %242 = add nsw i64 %239, %132\l  %243 = getelementptr inbounds float, float addrspace(1)* %0, i64 %242\l  %244 = load float, float addrspace(1)* %243, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %245 = trunc i64 %239 to i32\l  %246 = add i32 %134, %245\l  %247 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @sh_mem, i32 0, i32 %246\l  %248 = load float, float addrspace(3)* %247, align 4, !tbaa !7\l  %249 = fsub contract float %244, %248\l  %250 = fmul contract float %249, %249\l  %251 = fadd contract float %240, %250\l  %252 = add nuw nsw i64 %239, 1\l  %253 = add i64 %241, 1\l  %254 = icmp eq i64 %253, %135\l  br i1 %254, label %255, label %238, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x51533f0:s0 -> Node0x514a7f0;
	Node0x51533f0:s1 -> Node0x51533f0;
	Node0x514a7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%255:\l255:                                              \l  %256 = phi float [ 0.000000e+00, %128 ], [ %234, %233 ], [ %251, %238 ]\l  %257 = fcmp olt float %256, 0x39F0000000000000\l  %258 = select i1 %257, float 0x41F0000000000000, float 1.000000e+00\l  %259 = fmul float %256, %258\l  %260 = tail call float @llvm.sqrt.f32(float %259)\l  %261 = bitcast float %260 to i32\l  %262 = add nsw i32 %261, -1\l  %263 = bitcast i32 %262 to float\l  %264 = add nsw i32 %261, 1\l  %265 = bitcast i32 %264 to float\l  %266 = tail call i1 @llvm.amdgcn.class.f32(float %259, i32 608)\l  %267 = select i1 %257, float 0x3EF0000000000000, float 1.000000e+00\l  %268 = fneg float %265\l  %269 = tail call float @llvm.fma.f32(float %268, float %260, float %259)\l  %270 = fcmp ogt float %269, 0.000000e+00\l  %271 = fneg float %263\l  %272 = tail call float @llvm.fma.f32(float %271, float %260, float %259)\l  %273 = fcmp ole float %272, 0.000000e+00\l  %274 = select i1 %273, float %263, float %260\l  %275 = select i1 %270, float %265, float %274\l  %276 = fmul float %267, %275\l  %277 = select i1 %266, float %259, float %276\l  %278 = getelementptr inbounds float, float addrspace(3)* %12, i32 %17\l  store float %277, float addrspace(3)* %278, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %44, label %279, label %650\l|{<s0>T|<s1>F}}"];
	Node0x514a7f0:s0 -> Node0x5155e60;
	Node0x514a7f0:s1 -> Node0x5148b90;
	Node0x5155e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%279:\l279:                                              \l  %280 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %281 = getelementptr i8, i8 addrspace(4)* %280, i64 4\l  %282 = bitcast i8 addrspace(4)* %281 to i16 addrspace(4)*\l  %283 = load i16, i16 addrspace(4)* %282, align 4, !range !5, !invariant.load\l... !6\l  %284 = zext i16 %283 to i64\l  %285 = zext i16 %283 to i32\l  %286 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %287 = mul i32 %286, %285\l  %288 = zext i32 %287 to i64\l  %289 = getelementptr i8, i8 addrspace(4)* %280, i64 6\l  %290 = bitcast i8 addrspace(4)* %289 to i16 addrspace(4)*\l  %291 = load i16, i16 addrspace(4)* %290, align 2, !range !5, !invariant.load\l... !6\l  %292 = zext i16 %291 to i64\l  %293 = zext i32 %4 to i64\l  %294 = and i64 %292, 7\l  %295 = icmp ult i16 %291, 8\l  %296 = and i64 %292, 2040\l  %297 = icmp eq i64 %294, 0\l  br label %298\l}"];
	Node0x5155e60 -> Node0x5145b30;
	Node0x5145b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%298:\l298:                                              \l  %299 = phi i64 [ 0, %279 ], [ %375, %373 ]\l  %300 = add nuw nsw i64 %299, %288\l  %301 = getelementptr inbounds float, float addrspace(1)* %5, i64 %300\l  %302 = mul nuw nsw i64 %299, %293\l  br i1 %295, label %357, label %303\l|{<s0>T|<s1>F}}"];
	Node0x5145b30:s0 -> Node0x5145f20;
	Node0x5145b30:s1 -> Node0x5145fb0;
	Node0x5145fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%303:\l303:                                              \l  %304 = phi i64 [ %354, %303 ], [ 0, %298 ]\l  %305 = phi float [ %353, %303 ], [ 0.000000e+00, %298 ]\l  %306 = phi i64 [ %355, %303 ], [ 0, %298 ]\l  %307 = add nuw nsw i64 %304, %302\l  %308 = trunc i64 %307 to i32\l  %309 = getelementptr inbounds float, float addrspace(3)* %12, i32 %308\l  %310 = load float, float addrspace(3)* %309, align 4, !tbaa !7\l  %311 = fadd contract float %310, %305\l  %312 = or i64 %304, 1\l  %313 = add nuw nsw i64 %312, %302\l  %314 = trunc i64 %313 to i32\l  %315 = getelementptr inbounds float, float addrspace(3)* %12, i32 %314\l  %316 = load float, float addrspace(3)* %315, align 4, !tbaa !7\l  %317 = fadd contract float %316, %311\l  %318 = or i64 %304, 2\l  %319 = add nuw nsw i64 %318, %302\l  %320 = trunc i64 %319 to i32\l  %321 = getelementptr inbounds float, float addrspace(3)* %12, i32 %320\l  %322 = load float, float addrspace(3)* %321, align 4, !tbaa !7\l  %323 = fadd contract float %322, %317\l  %324 = or i64 %304, 3\l  %325 = add nuw nsw i64 %324, %302\l  %326 = trunc i64 %325 to i32\l  %327 = getelementptr inbounds float, float addrspace(3)* %12, i32 %326\l  %328 = load float, float addrspace(3)* %327, align 4, !tbaa !7\l  %329 = fadd contract float %328, %323\l  %330 = or i64 %304, 4\l  %331 = add nuw nsw i64 %330, %302\l  %332 = trunc i64 %331 to i32\l  %333 = getelementptr inbounds float, float addrspace(3)* %12, i32 %332\l  %334 = load float, float addrspace(3)* %333, align 4, !tbaa !7\l  %335 = fadd contract float %334, %329\l  %336 = or i64 %304, 5\l  %337 = add nuw nsw i64 %336, %302\l  %338 = trunc i64 %337 to i32\l  %339 = getelementptr inbounds float, float addrspace(3)* %12, i32 %338\l  %340 = load float, float addrspace(3)* %339, align 4, !tbaa !7\l  %341 = fadd contract float %340, %335\l  %342 = or i64 %304, 6\l  %343 = add nuw nsw i64 %342, %302\l  %344 = trunc i64 %343 to i32\l  %345 = getelementptr inbounds float, float addrspace(3)* %12, i32 %344\l  %346 = load float, float addrspace(3)* %345, align 4, !tbaa !7\l  %347 = fadd contract float %346, %341\l  %348 = or i64 %304, 7\l  %349 = add nuw nsw i64 %348, %302\l  %350 = trunc i64 %349 to i32\l  %351 = getelementptr inbounds float, float addrspace(3)* %12, i32 %350\l  %352 = load float, float addrspace(3)* %351, align 4, !tbaa !7\l  %353 = fadd contract float %352, %347\l  %354 = add nuw nsw i64 %304, 8\l  %355 = add i64 %306, 8\l  %356 = icmp eq i64 %355, %296\l  br i1 %356, label %357, label %303, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5145fb0:s0 -> Node0x5145f20;
	Node0x5145fb0:s1 -> Node0x5145fb0;
	Node0x5145f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%357:\l357:                                              \l  %358 = phi float [ undef, %298 ], [ %353, %303 ]\l  %359 = phi i64 [ 0, %298 ], [ %354, %303 ]\l  %360 = phi float [ 0.000000e+00, %298 ], [ %353, %303 ]\l  br i1 %297, label %373, label %361\l|{<s0>T|<s1>F}}"];
	Node0x5145f20:s0 -> Node0x5145c20;
	Node0x5145f20:s1 -> Node0x5159a90;
	Node0x5159a90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%361:\l361:                                              \l  %362 = phi i64 [ %370, %361 ], [ %359, %357 ]\l  %363 = phi float [ %369, %361 ], [ %360, %357 ]\l  %364 = phi i64 [ %371, %361 ], [ 0, %357 ]\l  %365 = add nuw nsw i64 %362, %302\l  %366 = trunc i64 %365 to i32\l  %367 = getelementptr inbounds float, float addrspace(3)* %12, i32 %366\l  %368 = load float, float addrspace(3)* %367, align 4, !tbaa !7\l  %369 = fadd contract float %368, %363\l  %370 = add nuw nsw i64 %362, 1\l  %371 = add i64 %364, 1\l  %372 = icmp eq i64 %371, %294\l  br i1 %372, label %373, label %361, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5159a90:s0 -> Node0x5145c20;
	Node0x5159a90:s1 -> Node0x5159a90;
	Node0x5145c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%373:\l373:                                              \l  %374 = phi float [ %358, %357 ], [ %369, %361 ]\l  store float %374, float addrspace(1)* %301, align 4, !tbaa !7\l  %375 = add nuw nsw i64 %299, 1\l  %376 = icmp eq i64 %375, %284\l  br i1 %376, label %650, label %298, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5145c20:s0 -> Node0x5148b90;
	Node0x5145c20:s1 -> Node0x5145b30;
	Node0x5145300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%377:\l377:                                              \l  %378 = icmp eq i32 %6, 0\l  %379 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %380 = mul i32 %379, %4\l  %381 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %382 = add i32 %380, %381\l  %383 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %384 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %385 = getelementptr i8, i8 addrspace(4)* %383, i64 4\l  %386 = bitcast i8 addrspace(4)* %385 to i16 addrspace(4)*\l  %387 = load i16, i16 addrspace(4)* %386, align 4, !range !5, !invariant.load\l... !6\l  %388 = zext i16 %387 to i32\l  br i1 %378, label %389, label %400\l|{<s0>T|<s1>F}}"];
	Node0x5145300:s0 -> Node0x515b480;
	Node0x5145300:s1 -> Node0x515b510;
	Node0x515b480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%389:\l389:                                              \l  %390 = getelementptr i8, i8 addrspace(4)* %383, i64 6\l  %391 = bitcast i8 addrspace(4)* %390 to i16 addrspace(4)*\l  %392 = load i16, i16 addrspace(4)* %391, align 2, !range !5, !invariant.load\l... !6\l  %393 = zext i16 %392 to i32\l  %394 = mul nuw nsw i32 %393, %388\l  %395 = mul i32 %394, %384\l  %396 = add i32 %395, %382\l  %397 = mul i32 %396, %3\l  %398 = mul nsw i32 %4, %2\l  %399 = icmp ult i32 %396, %398\l  br i1 %399, label %407, label %650\l|{<s0>T|<s1>F}}"];
	Node0x515b480:s0 -> Node0x515bba0;
	Node0x515b480:s1 -> Node0x5148b90;
	Node0x515b510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%400:\l400:                                              \l  %401 = mul i32 %384, %388\l  %402 = mul i32 %381, %2\l  %403 = add i32 %402, %379\l  %404 = add i32 %403, %401\l  %405 = add nsw i32 %382, %3\l  %406 = icmp sgt i32 %405, %2\l  br i1 %406, label %650, label %407\l|{<s0>T|<s1>F}}"];
	Node0x515b510:s0 -> Node0x5148b90;
	Node0x515b510:s1 -> Node0x515bba0;
	Node0x515bba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%407:\l407:                                              \l  %408 = phi i32 [ %397, %389 ], [ %404, %400 ]\l  %409 = sext i32 %3 to i64\l  %410 = icmp sgt i32 %3, 0\l  br i1 %410, label %411, label %527\l|{<s0>T|<s1>F}}"];
	Node0x515bba0:s0 -> Node0x515c2a0;
	Node0x515bba0:s1 -> Node0x515c2f0;
	Node0x515c2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%411:\l411:                                              \l  %412 = sext i32 %408 to i64\l  %413 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %414 = mul i32 %413, %3\l  %415 = zext i32 %414 to i64\l  %416 = and i64 %409, 7\l  %417 = icmp ult i32 %3, 8\l  br i1 %417, label %506, label %418\l|{<s0>T|<s1>F}}"];
	Node0x515c2a0:s0 -> Node0x515c750;
	Node0x515c2a0:s1 -> Node0x515c7a0;
	Node0x515c7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%418:\l418:                                              \l  %419 = and i64 %409, -8\l  br label %420\l}"];
	Node0x515c7a0 -> Node0x515c970;
	Node0x515c970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%420:\l420:                                              \l  %421 = phi i64 [ 0, %418 ], [ %503, %420 ]\l  %422 = phi float [ 0.000000e+00, %418 ], [ %502, %420 ]\l  %423 = phi i64 [ 0, %418 ], [ %504, %420 ]\l  %424 = add nsw i64 %421, %412\l  %425 = getelementptr inbounds float, float addrspace(1)* %0, i64 %424\l  %426 = load float, float addrspace(1)* %425, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %427 = add nuw nsw i64 %421, %415\l  %428 = getelementptr inbounds float, float addrspace(1)* %1, i64 %427\l  %429 = load float, float addrspace(1)* %428, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %430 = fsub contract float %426, %429\l  %431 = fmul contract float %430, %430\l  %432 = fadd contract float %422, %431\l  %433 = or i64 %421, 1\l  %434 = add nsw i64 %433, %412\l  %435 = getelementptr inbounds float, float addrspace(1)* %0, i64 %434\l  %436 = load float, float addrspace(1)* %435, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %437 = add nuw nsw i64 %433, %415\l  %438 = getelementptr inbounds float, float addrspace(1)* %1, i64 %437\l  %439 = load float, float addrspace(1)* %438, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %440 = fsub contract float %436, %439\l  %441 = fmul contract float %440, %440\l  %442 = fadd contract float %432, %441\l  %443 = or i64 %421, 2\l  %444 = add nsw i64 %443, %412\l  %445 = getelementptr inbounds float, float addrspace(1)* %0, i64 %444\l  %446 = load float, float addrspace(1)* %445, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %447 = add nuw nsw i64 %443, %415\l  %448 = getelementptr inbounds float, float addrspace(1)* %1, i64 %447\l  %449 = load float, float addrspace(1)* %448, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %450 = fsub contract float %446, %449\l  %451 = fmul contract float %450, %450\l  %452 = fadd contract float %442, %451\l  %453 = or i64 %421, 3\l  %454 = add nsw i64 %453, %412\l  %455 = getelementptr inbounds float, float addrspace(1)* %0, i64 %454\l  %456 = load float, float addrspace(1)* %455, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %457 = add nuw nsw i64 %453, %415\l  %458 = getelementptr inbounds float, float addrspace(1)* %1, i64 %457\l  %459 = load float, float addrspace(1)* %458, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %460 = fsub contract float %456, %459\l  %461 = fmul contract float %460, %460\l  %462 = fadd contract float %452, %461\l  %463 = or i64 %421, 4\l  %464 = add nsw i64 %463, %412\l  %465 = getelementptr inbounds float, float addrspace(1)* %0, i64 %464\l  %466 = load float, float addrspace(1)* %465, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %467 = add nuw nsw i64 %463, %415\l  %468 = getelementptr inbounds float, float addrspace(1)* %1, i64 %467\l  %469 = load float, float addrspace(1)* %468, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %470 = fsub contract float %466, %469\l  %471 = fmul contract float %470, %470\l  %472 = fadd contract float %462, %471\l  %473 = or i64 %421, 5\l  %474 = add nsw i64 %473, %412\l  %475 = getelementptr inbounds float, float addrspace(1)* %0, i64 %474\l  %476 = load float, float addrspace(1)* %475, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %477 = add nuw nsw i64 %473, %415\l  %478 = getelementptr inbounds float, float addrspace(1)* %1, i64 %477\l  %479 = load float, float addrspace(1)* %478, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %480 = fsub contract float %476, %479\l  %481 = fmul contract float %480, %480\l  %482 = fadd contract float %472, %481\l  %483 = or i64 %421, 6\l  %484 = add nsw i64 %483, %412\l  %485 = getelementptr inbounds float, float addrspace(1)* %0, i64 %484\l  %486 = load float, float addrspace(1)* %485, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %487 = add nuw nsw i64 %483, %415\l  %488 = getelementptr inbounds float, float addrspace(1)* %1, i64 %487\l  %489 = load float, float addrspace(1)* %488, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %490 = fsub contract float %486, %489\l  %491 = fmul contract float %490, %490\l  %492 = fadd contract float %482, %491\l  %493 = or i64 %421, 7\l  %494 = add nsw i64 %493, %412\l  %495 = getelementptr inbounds float, float addrspace(1)* %0, i64 %494\l  %496 = load float, float addrspace(1)* %495, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %497 = add nuw nsw i64 %493, %415\l  %498 = getelementptr inbounds float, float addrspace(1)* %1, i64 %497\l  %499 = load float, float addrspace(1)* %498, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %500 = fsub contract float %496, %499\l  %501 = fmul contract float %500, %500\l  %502 = fadd contract float %492, %501\l  %503 = add nuw nsw i64 %421, 8\l  %504 = add i64 %423, 8\l  %505 = icmp eq i64 %504, %419\l  br i1 %505, label %506, label %420, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x515c970:s0 -> Node0x515c750;
	Node0x515c970:s1 -> Node0x515c970;
	Node0x515c750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%506:\l506:                                              \l  %507 = phi float [ undef, %411 ], [ %502, %420 ]\l  %508 = phi i64 [ 0, %411 ], [ %503, %420 ]\l  %509 = phi float [ 0.000000e+00, %411 ], [ %502, %420 ]\l  %510 = icmp eq i64 %416, 0\l  br i1 %510, label %527, label %511\l|{<s0>T|<s1>F}}"];
	Node0x515c750:s0 -> Node0x515c2f0;
	Node0x515c750:s1 -> Node0x51601b0;
	Node0x51601b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%511:\l511:                                              \l  %512 = phi i64 [ %524, %511 ], [ %508, %506 ]\l  %513 = phi float [ %523, %511 ], [ %509, %506 ]\l  %514 = phi i64 [ %525, %511 ], [ 0, %506 ]\l  %515 = add nsw i64 %512, %412\l  %516 = getelementptr inbounds float, float addrspace(1)* %0, i64 %515\l  %517 = load float, float addrspace(1)* %516, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %518 = add nuw nsw i64 %512, %415\l  %519 = getelementptr inbounds float, float addrspace(1)* %1, i64 %518\l  %520 = load float, float addrspace(1)* %519, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %521 = fsub contract float %517, %520\l  %522 = fmul contract float %521, %521\l  %523 = fadd contract float %513, %522\l  %524 = add nuw nsw i64 %512, 1\l  %525 = add i64 %514, 1\l  %526 = icmp eq i64 %525, %416\l  br i1 %526, label %527, label %511, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x51601b0:s0 -> Node0x515c2f0;
	Node0x51601b0:s1 -> Node0x51601b0;
	Node0x515c2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%527:\l527:                                              \l  %528 = phi float [ 0.000000e+00, %407 ], [ %507, %506 ], [ %523, %511 ]\l  %529 = fcmp olt float %528, 0x39F0000000000000\l  %530 = select i1 %529, float 0x41F0000000000000, float 1.000000e+00\l  %531 = fmul float %528, %530\l  %532 = tail call float @llvm.sqrt.f32(float %531)\l  %533 = bitcast float %532 to i32\l  %534 = add nsw i32 %533, -1\l  %535 = bitcast i32 %534 to float\l  %536 = add nsw i32 %533, 1\l  %537 = bitcast i32 %536 to float\l  %538 = tail call i1 @llvm.amdgcn.class.f32(float %531, i32 608)\l  %539 = select i1 %529, float 0x3EF0000000000000, float 1.000000e+00\l  %540 = fneg float %537\l  %541 = tail call float @llvm.fma.f32(float %540, float %532, float %531)\l  %542 = fcmp ogt float %541, 0.000000e+00\l  %543 = fneg float %535\l  %544 = tail call float @llvm.fma.f32(float %543, float %532, float %531)\l  %545 = fcmp ole float %544, 0.000000e+00\l  %546 = select i1 %545, float %535, float %532\l  %547 = select i1 %542, float %537, float %546\l  %548 = fmul float %539, %547\l  %549 = select i1 %538, float %531, float %548\l  %550 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %382\l  store float %549, float addrspace(3)* %550, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %551 = icmp eq i32 %382, 0\l  br i1 %551, label %552, label %650\l|{<s0>T|<s1>F}}"];
	Node0x515c2f0:s0 -> Node0x51633d0;
	Node0x515c2f0:s1 -> Node0x5148b90;
	Node0x51633d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%552:\l552:                                              \l  %553 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %554 = getelementptr i8, i8 addrspace(4)* %553, i64 4\l  %555 = bitcast i8 addrspace(4)* %554 to i16 addrspace(4)*\l  %556 = load i16, i16 addrspace(4)* %555, align 4, !range !5, !invariant.load\l... !6\l  %557 = zext i16 %556 to i64\l  %558 = zext i16 %556 to i32\l  %559 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %560 = mul i32 %559, %558\l  %561 = zext i32 %560 to i64\l  %562 = getelementptr i8, i8 addrspace(4)* %553, i64 6\l  %563 = bitcast i8 addrspace(4)* %562 to i16 addrspace(4)*\l  %564 = load i16, i16 addrspace(4)* %563, align 2, !range !5, !invariant.load\l... !6\l  %565 = zext i16 %564 to i64\l  %566 = zext i32 %4 to i64\l  %567 = and i64 %565, 7\l  %568 = icmp ult i16 %564, 8\l  %569 = and i64 %565, 2040\l  %570 = icmp eq i64 %567, 0\l  br label %571\l}"];
	Node0x51633d0 -> Node0x5163eb0;
	Node0x5163eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%571:\l571:                                              \l  %572 = phi i64 [ 0, %552 ], [ %648, %646 ]\l  %573 = add nuw nsw i64 %572, %561\l  %574 = getelementptr inbounds float, float addrspace(1)* %5, i64 %573\l  %575 = mul nuw nsw i64 %572, %566\l  br i1 %568, label %630, label %576\l|{<s0>T|<s1>F}}"];
	Node0x5163eb0:s0 -> Node0x51642b0;
	Node0x5163eb0:s1 -> Node0x5164340;
	Node0x5164340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%576:\l576:                                              \l  %577 = phi i64 [ %627, %576 ], [ 0, %571 ]\l  %578 = phi float [ %626, %576 ], [ 0.000000e+00, %571 ]\l  %579 = phi i64 [ %628, %576 ], [ 0, %571 ]\l  %580 = add nuw nsw i64 %577, %575\l  %581 = trunc i64 %580 to i32\l  %582 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %581\l  %583 = load float, float addrspace(3)* %582, align 4, !tbaa !7\l  %584 = fadd contract float %583, %578\l  %585 = or i64 %577, 1\l  %586 = add nuw nsw i64 %585, %575\l  %587 = trunc i64 %586 to i32\l  %588 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %587\l  %589 = load float, float addrspace(3)* %588, align 4, !tbaa !7\l  %590 = fadd contract float %589, %584\l  %591 = or i64 %577, 2\l  %592 = add nuw nsw i64 %591, %575\l  %593 = trunc i64 %592 to i32\l  %594 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %593\l  %595 = load float, float addrspace(3)* %594, align 4, !tbaa !7\l  %596 = fadd contract float %595, %590\l  %597 = or i64 %577, 3\l  %598 = add nuw nsw i64 %597, %575\l  %599 = trunc i64 %598 to i32\l  %600 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %599\l  %601 = load float, float addrspace(3)* %600, align 4, !tbaa !7\l  %602 = fadd contract float %601, %596\l  %603 = or i64 %577, 4\l  %604 = add nuw nsw i64 %603, %575\l  %605 = trunc i64 %604 to i32\l  %606 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %605\l  %607 = load float, float addrspace(3)* %606, align 4, !tbaa !7\l  %608 = fadd contract float %607, %602\l  %609 = or i64 %577, 5\l  %610 = add nuw nsw i64 %609, %575\l  %611 = trunc i64 %610 to i32\l  %612 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %611\l  %613 = load float, float addrspace(3)* %612, align 4, !tbaa !7\l  %614 = fadd contract float %613, %608\l  %615 = or i64 %577, 6\l  %616 = add nuw nsw i64 %615, %575\l  %617 = trunc i64 %616 to i32\l  %618 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %617\l  %619 = load float, float addrspace(3)* %618, align 4, !tbaa !7\l  %620 = fadd contract float %619, %614\l  %621 = or i64 %577, 7\l  %622 = add nuw nsw i64 %621, %575\l  %623 = trunc i64 %622 to i32\l  %624 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %623\l  %625 = load float, float addrspace(3)* %624, align 4, !tbaa !7\l  %626 = fadd contract float %625, %620\l  %627 = add nuw nsw i64 %577, 8\l  %628 = add i64 %579, 8\l  %629 = icmp eq i64 %628, %569\l  br i1 %629, label %630, label %576, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5164340:s0 -> Node0x51642b0;
	Node0x5164340:s1 -> Node0x5164340;
	Node0x51642b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%630:\l630:                                              \l  %631 = phi float [ undef, %571 ], [ %626, %576 ]\l  %632 = phi i64 [ 0, %571 ], [ %627, %576 ]\l  %633 = phi float [ 0.000000e+00, %571 ], [ %626, %576 ]\l  br i1 %570, label %646, label %634\l|{<s0>T|<s1>F}}"];
	Node0x51642b0:s0 -> Node0x5163fb0;
	Node0x51642b0:s1 -> Node0x5156dd0;
	Node0x5156dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%634:\l634:                                              \l  %635 = phi i64 [ %643, %634 ], [ %632, %630 ]\l  %636 = phi float [ %642, %634 ], [ %633, %630 ]\l  %637 = phi i64 [ %644, %634 ], [ 0, %630 ]\l  %638 = add nuw nsw i64 %635, %575\l  %639 = trunc i64 %638 to i32\l  %640 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @DTW_single_dim, i32 0, i32 %639\l  %641 = load float, float addrspace(3)* %640, align 4, !tbaa !7\l  %642 = fadd contract float %641, %636\l  %643 = add nuw nsw i64 %635, 1\l  %644 = add i64 %637, 1\l  %645 = icmp eq i64 %644, %567\l  br i1 %645, label %646, label %634, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5156dd0:s0 -> Node0x5163fb0;
	Node0x5156dd0:s1 -> Node0x5156dd0;
	Node0x5163fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%646:\l646:                                              \l  %647 = phi float [ %631, %630 ], [ %642, %634 ]\l  store float %647, float addrspace(1)* %574, align 4, !tbaa !7\l  %648 = add nuw nsw i64 %572, 1\l  %649 = icmp eq i64 %648, %557\l  br i1 %649, label %650, label %571, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5163fb0:s0 -> Node0x5148b90;
	Node0x5163fb0:s1 -> Node0x5163eb0;
	Node0x5148b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%650:\l650:                                              \l  ret void\l}"];
}
