digraph "CFG for '_Z13vertical_convP5pixelS0_iiPfi' function" {
	label="CFG for '_Z13vertical_convP5pixelS0_iiPfi' function";

	Node0x4ef3ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = zext i32 %15 to i64\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = zext i32 %24 to i64\l  %26 = sext i32 %2 to i64\l  %27 = mul nsw i64 %25, %26\l  %28 = add nsw i64 %27, %16\l  %29 = sext i32 %3 to i64\l  %30 = icmp ult i64 %25, %29\l  %31 = icmp ult i64 %16, %26\l  %32 = select i1 %30, i1 %31, i1 false\l  br i1 %32, label %33, label %197\l|{<s0>T|<s1>F}}"];
	Node0x4ef3ea0:s0 -> Node0x4ef8610;
	Node0x4ef3ea0:s1 -> Node0x4ef86a0;
	Node0x4ef8610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%33:\l33:                                               \l  %34 = icmp sgt i32 %5, 0\l  br i1 %34, label %35, label %100\l|{<s0>T|<s1>F}}"];
	Node0x4ef8610:s0 -> Node0x4efa840;
	Node0x4ef8610:s1 -> Node0x4efa890;
	Node0x4efa840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%35:\l35:                                               \l  %36 = add i32 %5, -1\l  %37 = lshr i32 %36, 1\l  %38 = sub i32 %24, %37\l  %39 = icmp slt i32 %15, %2\l  %40 = and i32 %5, 1\l  %41 = icmp eq i32 %36, 0\l  br i1 %41, label %44, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4efa840:s0 -> Node0x4efad90;
	Node0x4efa840:s1 -> Node0x4efade0;
	Node0x4efade0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%42:\l42:                                               \l  %43 = and i32 %5, -2\l  br label %107\l}"];
	Node0x4efade0 -> Node0x4efafe0;
	Node0x4efad90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%44:\l44:                                               \l  %45 = phi float [ undef, %35 ], [ %187, %176 ]\l  %46 = phi float [ undef, %35 ], [ %190, %176 ]\l  %47 = phi float [ undef, %35 ], [ %193, %176 ]\l  %48 = phi float [ 0.000000e+00, %35 ], [ %187, %176 ]\l  %49 = phi float [ 0.000000e+00, %35 ], [ %193, %176 ]\l  %50 = phi float [ 0.000000e+00, %35 ], [ %190, %176 ]\l  %51 = phi i32 [ 0, %35 ], [ %194, %176 ]\l  %52 = icmp eq i32 %40, 0\l  br i1 %52, label %93, label %53\l|{<s0>T|<s1>F}}"];
	Node0x4efad90:s0 -> Node0x4efc680;
	Node0x4efad90:s1 -> Node0x4efc710;
	Node0x4efc710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%53:\l53:                                               \l  %54 = zext i32 %51 to i64\l  %55 = add i32 %38, %51\l  br i1 %39, label %56, label %76\l|{<s0>T|<s1>F}}"];
	Node0x4efc710:s0 -> Node0x4efc950;
	Node0x4efc710:s1 -> Node0x4efc9a0;
	Node0x4efc950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%56:\l56:                                               \l  %57 = icmp slt i32 %55, %3\l  %58 = or i32 %55, %15\l  %59 = icmp sgt i32 %58, -1\l  %60 = select i1 %57, i1 %59, i1 false\l  br i1 %60, label %61, label %76\l|{<s0>T|<s1>F}}"];
	Node0x4efc950:s0 -> Node0x4efcd40;
	Node0x4efc950:s1 -> Node0x4efc9a0;
	Node0x4efcd40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%61:\l61:                                               \l  %62 = mul nsw i32 %55, %2\l  %63 = add nsw i32 %62, %15\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %64, i32 0\l  %66 = load i8, i8 addrspace(1)* %65, align 1, !tbaa.struct !7,\l... !amdgpu.noclobber !5\l  %67 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %64, i32 1\l  %68 = load i8, i8 addrspace(1)* %67, align 1, !tbaa.struct !11,\l... !amdgpu.noclobber !5\l  %69 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %64, i32 2\l  %70 = load i8, i8 addrspace(1)* %69, align 1, !tbaa.struct !12,\l... !amdgpu.noclobber !5\l  %71 = zext i8 %70 to i32\l  %72 = shl nuw nsw i32 %71, 16\l  %73 = zext i8 %68 to i32\l  %74 = shl nuw nsw i32 %73, 8\l  %75 = uitofp i8 %66 to float\l  br label %76\l}"];
	Node0x4efcd40 -> Node0x4efc9a0;
	Node0x4efc9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%76:\l76:                                               \l  %77 = phi float [ %75, %61 ], [ 0.000000e+00, %56 ], [ 0.000000e+00, %53 ]\l  %78 = phi i32 [ %74, %61 ], [ 0, %56 ], [ 0, %53 ]\l  %79 = phi i32 [ %72, %61 ], [ 0, %56 ], [ 0, %53 ]\l  %80 = or i32 %79, %78\l  %81 = lshr exact i32 %78, 8\l  %82 = lshr i32 %80, 16\l  %83 = getelementptr inbounds float, float addrspace(1)* %4, i64 %54\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %85 = fmul contract float %84, %77\l  %86 = fadd contract float %48, %85\l  %87 = sitofp i32 %82 to float\l  %88 = fmul contract float %84, %87\l  %89 = fadd contract float %50, %88\l  %90 = sitofp i32 %81 to float\l  %91 = fmul contract float %84, %90\l  %92 = fadd contract float %49, %91\l  br label %93\l}"];
	Node0x4efc9a0 -> Node0x4efc680;
	Node0x4efc680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%93:\l93:                                               \l  %94 = phi float [ %45, %44 ], [ %86, %76 ]\l  %95 = phi float [ %46, %44 ], [ %89, %76 ]\l  %96 = phi float [ %47, %44 ], [ %92, %76 ]\l  %97 = fptoui float %94 to i8\l  %98 = fptoui float %96 to i8\l  %99 = fptoui float %95 to i8\l  br label %100\l}"];
	Node0x4efc680 -> Node0x4efa890;
	Node0x4efa890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%100:\l100:                                              \l  %101 = phi i8 [ 0, %33 ], [ %99, %93 ]\l  %102 = phi i8 [ 0, %33 ], [ %98, %93 ]\l  %103 = phi i8 [ 0, %33 ], [ %97, %93 ]\l  %104 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %1,\l... i64 %28, i32 0\l  store i8 %103, i8 addrspace(1)* %104, align 1, !tbaa !15\l  %105 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %1,\l... i64 %28, i32 1\l  store i8 %102, i8 addrspace(1)* %105, align 1, !tbaa !17\l  %106 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %1,\l... i64 %28, i32 2\l  store i8 %101, i8 addrspace(1)* %106, align 1, !tbaa !18\l  br label %197\l}"];
	Node0x4efa890 -> Node0x4ef86a0;
	Node0x4efafe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%107:\l107:                                              \l  %108 = phi float [ 0.000000e+00, %42 ], [ %187, %176 ]\l  %109 = phi float [ 0.000000e+00, %42 ], [ %193, %176 ]\l  %110 = phi float [ 0.000000e+00, %42 ], [ %190, %176 ]\l  %111 = phi i32 [ 0, %42 ], [ %194, %176 ]\l  %112 = phi i32 [ 0, %42 ], [ %195, %176 ]\l  %113 = zext i32 %111 to i64\l  %114 = add i32 %38, %111\l  br i1 %39, label %115, label %135\l|{<s0>T|<s1>F}}"];
	Node0x4efafe0:s0 -> Node0x4effae0;
	Node0x4efafe0:s1 -> Node0x4effb70;
	Node0x4effae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%115:\l115:                                              \l  %116 = icmp slt i32 %114, %3\l  %117 = or i32 %114, %15\l  %118 = icmp sgt i32 %117, -1\l  %119 = select i1 %116, i1 %118, i1 false\l  br i1 %119, label %120, label %135\l|{<s0>T|<s1>F}}"];
	Node0x4effae0:s0 -> Node0x4efff10;
	Node0x4effae0:s1 -> Node0x4effb70;
	Node0x4efff10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%120:\l120:                                              \l  %121 = mul nsw i32 %114, %2\l  %122 = add nsw i32 %121, %15\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %123, i32 0\l  %125 = load i8, i8 addrspace(1)* %124, align 1, !tbaa.struct !7,\l... !amdgpu.noclobber !5\l  %126 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %123, i32 1\l  %127 = load i8, i8 addrspace(1)* %126, align 1, !tbaa.struct !11,\l... !amdgpu.noclobber !5\l  %128 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %123, i32 2\l  %129 = load i8, i8 addrspace(1)* %128, align 1, !tbaa.struct !12,\l... !amdgpu.noclobber !5\l  %130 = zext i8 %129 to i32\l  %131 = shl nuw nsw i32 %130, 16\l  %132 = zext i8 %127 to i32\l  %133 = shl nuw nsw i32 %132, 8\l  %134 = zext i8 %125 to i32\l  br label %135\l}"];
	Node0x4efff10 -> Node0x4effb70;
	Node0x4effb70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%135:\l135:                                              \l  %136 = phi i32 [ %134, %120 ], [ 0, %115 ], [ 0, %107 ]\l  %137 = phi i32 [ %133, %120 ], [ 0, %115 ], [ 0, %107 ]\l  %138 = phi i32 [ %131, %120 ], [ 0, %115 ], [ 0, %107 ]\l  %139 = or i32 %138, %137\l  %140 = lshr exact i32 %137, 8\l  %141 = lshr i32 %139, 16\l  %142 = sitofp i32 %136 to float\l  %143 = getelementptr inbounds float, float addrspace(1)* %4, i64 %113\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %145 = fmul contract float %144, %142\l  %146 = fadd contract float %108, %145\l  %147 = sitofp i32 %141 to float\l  %148 = fmul contract float %144, %147\l  %149 = fadd contract float %110, %148\l  %150 = sitofp i32 %140 to float\l  %151 = fmul contract float %144, %150\l  %152 = fadd contract float %109, %151\l  %153 = or i32 %111, 1\l  %154 = zext i32 %153 to i64\l  %155 = add i32 %38, %153\l  br i1 %39, label %156, label %176\l|{<s0>T|<s1>F}}"];
	Node0x4effb70:s0 -> Node0x4f03070;
	Node0x4effb70:s1 -> Node0x4efb4f0;
	Node0x4f03070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%156:\l156:                                              \l  %157 = icmp slt i32 %155, %3\l  %158 = or i32 %155, %15\l  %159 = icmp sgt i32 %158, -1\l  %160 = select i1 %157, i1 %159, i1 false\l  br i1 %160, label %161, label %176\l|{<s0>T|<s1>F}}"];
	Node0x4f03070:s0 -> Node0x4f03410;
	Node0x4f03070:s1 -> Node0x4efb4f0;
	Node0x4f03410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%161:\l161:                                              \l  %162 = mul nsw i32 %155, %2\l  %163 = add nsw i32 %162, %15\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %164, i32 0\l  %166 = load i8, i8 addrspace(1)* %165, align 1, !tbaa.struct !7,\l... !amdgpu.noclobber !5\l  %167 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %164, i32 1\l  %168 = load i8, i8 addrspace(1)* %167, align 1, !tbaa.struct !11,\l... !amdgpu.noclobber !5\l  %169 = getelementptr inbounds %struct.pixel, %struct.pixel addrspace(1)* %0,\l... i64 %164, i32 2\l  %170 = load i8, i8 addrspace(1)* %169, align 1, !tbaa.struct !12,\l... !amdgpu.noclobber !5\l  %171 = zext i8 %170 to i32\l  %172 = shl nuw nsw i32 %171, 16\l  %173 = zext i8 %168 to i32\l  %174 = shl nuw nsw i32 %173, 8\l  %175 = zext i8 %166 to i32\l  br label %176\l}"];
	Node0x4f03410 -> Node0x4efb4f0;
	Node0x4efb4f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%176:\l176:                                              \l  %177 = phi i32 [ %175, %161 ], [ 0, %156 ], [ 0, %135 ]\l  %178 = phi i32 [ %174, %161 ], [ 0, %156 ], [ 0, %135 ]\l  %179 = phi i32 [ %172, %161 ], [ 0, %156 ], [ 0, %135 ]\l  %180 = or i32 %179, %178\l  %181 = lshr exact i32 %178, 8\l  %182 = lshr i32 %180, 16\l  %183 = sitofp i32 %177 to float\l  %184 = getelementptr inbounds float, float addrspace(1)* %4, i64 %154\l  %185 = load float, float addrspace(1)* %184, align 4, !tbaa !13,\l... !amdgpu.noclobber !5\l  %186 = fmul contract float %185, %183\l  %187 = fadd contract float %146, %186\l  %188 = sitofp i32 %182 to float\l  %189 = fmul contract float %185, %188\l  %190 = fadd contract float %149, %189\l  %191 = sitofp i32 %181 to float\l  %192 = fmul contract float %185, %191\l  %193 = fadd contract float %152, %192\l  %194 = add nuw nsw i32 %111, 2\l  %195 = add i32 %112, 2\l  %196 = icmp eq i32 %195, %43\l  br i1 %196, label %44, label %107, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4efb4f0:s0 -> Node0x4efad90;
	Node0x4efb4f0:s1 -> Node0x4efafe0;
	Node0x4ef86a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%197:\l197:                                              \l  ret void\l}"];
}
