digraph "CFG for '_Z8count_inPyllldl' function" {
	label="CFG for '_Z8count_inPyllldl' function";

	Node0x599ae40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !4\l  %12 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !13, !invariant.load\l... !14\l  %15 = zext i16 %14 to i32\l  %16 = udiv i32 %11, %15\l  %17 = mul i32 %16, %15\l  %18 = icmp ugt i32 %11, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %7\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = add i32 %21, %22\l  %24 = zext i32 %23 to i64\l  %25 = zext i16 %14 to i64\l  %26 = mul nuw nsw i64 %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = zext i32 %27 to i64\l  %29 = add nuw nsw i64 %26, %28\l  %30 = icmp ult i64 %29, %1\l  br i1 %30, label %31, label %188\l|{<s0>T|<s1>F}}"];
	Node0x599ae40:s0 -> Node0x599d790;
	Node0x599ae40:s1 -> Node0x599d820;
	Node0x599d790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%31:\l31:                                               \l  %32 = icmp sgt i64 %2, 0\l  br i1 %32, label %33, label %51\l|{<s0>T|<s1>F}}"];
	Node0x599d790:s0 -> Node0x599cba0;
	Node0x599d790:s1 -> Node0x599cbf0;
	Node0x599cba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%33:\l33:                                               \l  %34 = and i64 %2, 7\l  %35 = icmp ult i64 %2, 8\l  br i1 %35, label %38, label %36\l|{<s0>T|<s1>F}}"];
	Node0x599cba0:s0 -> Node0x599de00;
	Node0x599cba0:s1 -> Node0x599de50;
	Node0x599de50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%36:\l36:                                               \l  %37 = and i64 %2, -8\l  br label %54\l}"];
	Node0x599de50 -> Node0x599e050;
	Node0x599de00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%38:\l38:                                               \l  %39 = phi i64 [ 0, %33 ], [ %81, %54 ]\l  %40 = phi \<11 x i64\> [ undef, %33 ], [ %80, %54 ]\l  %41 = icmp eq i64 %34, 0\l  br i1 %41, label %51, label %42\l|{<s0>T|<s1>F}}"];
	Node0x599de00:s0 -> Node0x599cbf0;
	Node0x599de00:s1 -> Node0x599edc0;
	Node0x599edc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%42:\l42:                                               \l  %43 = phi i64 [ %48, %42 ], [ %39, %38 ]\l  %44 = phi \<11 x i64\> [ %47, %42 ], [ %40, %38 ]\l  %45 = phi i64 [ %49, %42 ], [ 0, %38 ]\l  %46 = trunc i64 %43 to i32\l  %47 = insertelement \<11 x i64\> %44, i64 0, i32 %46\l  %48 = add nuw nsw i64 %43, 1\l  %49 = add i64 %45, 1\l  %50 = icmp eq i64 %49, %34\l  br i1 %50, label %51, label %42, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x599edc0:s0 -> Node0x599cbf0;
	Node0x599edc0:s1 -> Node0x599edc0;
	Node0x599cbf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%51:\l51:                                               \l  %52 = phi \<11 x i64\> [ undef, %31 ], [ %40, %38 ], [ %47, %42 ]\l  %53 = icmp eq i64 %29, 0\l  br i1 %53, label %84, label %91\l|{<s0>T|<s1>F}}"];
	Node0x599cbf0:s0 -> Node0x599f780;
	Node0x599cbf0:s1 -> Node0x599f7d0;
	Node0x599e050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%54:\l54:                                               \l  %55 = phi i64 [ 0, %36 ], [ %81, %54 ]\l  %56 = phi \<11 x i64\> [ undef, %36 ], [ %80, %54 ]\l  %57 = phi i64 [ 0, %36 ], [ %82, %54 ]\l  %58 = trunc i64 %55 to i32\l  %59 = insertelement \<11 x i64\> %56, i64 0, i32 %58\l  %60 = trunc i64 %55 to i32\l  %61 = or i32 %60, 1\l  %62 = insertelement \<11 x i64\> %59, i64 0, i32 %61\l  %63 = trunc i64 %55 to i32\l  %64 = or i32 %63, 2\l  %65 = insertelement \<11 x i64\> %62, i64 0, i32 %64\l  %66 = trunc i64 %55 to i32\l  %67 = or i32 %66, 3\l  %68 = insertelement \<11 x i64\> %65, i64 0, i32 %67\l  %69 = trunc i64 %55 to i32\l  %70 = or i32 %69, 4\l  %71 = insertelement \<11 x i64\> %68, i64 0, i32 %70\l  %72 = trunc i64 %55 to i32\l  %73 = or i32 %72, 5\l  %74 = insertelement \<11 x i64\> %71, i64 0, i32 %73\l  %75 = trunc i64 %55 to i32\l  %76 = or i32 %75, 6\l  %77 = insertelement \<11 x i64\> %74, i64 0, i32 %76\l  %78 = trunc i64 %55 to i32\l  %79 = or i32 %78, 7\l  %80 = insertelement \<11 x i64\> %77, i64 0, i32 %79\l  %81 = add nuw nsw i64 %55, 8\l  %82 = add i64 %57, 8\l  %83 = icmp eq i64 %82, %37\l  br i1 %83, label %38, label %54, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x599e050:s0 -> Node0x599de00;
	Node0x599e050:s1 -> Node0x599e050;
	Node0x599f780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%84:\l84:                                               \l  %85 = phi \<11 x i64\> [ %52, %51 ], [ %100, %91 ]\l  br i1 %32, label %86, label %121\l|{<s0>T|<s1>F}}"];
	Node0x599f780:s0 -> Node0x59a0ec0;
	Node0x599f780:s1 -> Node0x59a0f50;
	Node0x59a0ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%86:\l86:                                               \l  %87 = and i64 %2, 7\l  %88 = icmp ult i64 %2, 8\l  br i1 %88, label %103, label %89\l|{<s0>T|<s1>F}}"];
	Node0x59a0ec0:s0 -> Node0x59a11b0;
	Node0x59a0ec0:s1 -> Node0x59a1200;
	Node0x59a1200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%89:\l89:                                               \l  %90 = and i64 %2, -8\l  br label %124\l}"];
	Node0x59a1200 -> Node0x59a13d0;
	Node0x599f7d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%91:\l91:                                               \l  %92 = phi i64 [ %97, %91 ], [ %29, %51 ]\l  %93 = phi i32 [ %101, %91 ], [ 0, %51 ]\l  %94 = phi \<11 x i64\> [ %100, %91 ], [ %52, %51 ]\l  %95 = freeze i64 %92\l  %96 = freeze i64 %5\l  %97 = udiv i64 %95, %96\l  %98 = mul i64 %97, %96\l  %99 = sub i64 %95, %98\l  %100 = insertelement \<11 x i64\> %94, i64 %99, i32 %93\l  %101 = add i32 %93, 1\l  %102 = icmp ult i64 %92, %5\l  br i1 %102, label %84, label %91, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x599f7d0:s0 -> Node0x599f780;
	Node0x599f7d0:s1 -> Node0x599f7d0;
	Node0x59a11b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%103:\l103:                                              \l  %104 = phi double [ undef, %86 ], [ %182, %124 ]\l  %105 = phi i64 [ 0, %86 ], [ %183, %124 ]\l  %106 = phi double [ 0.000000e+00, %86 ], [ %182, %124 ]\l  %107 = icmp eq i64 %87, 0\l  br i1 %107, label %121, label %108\l|{<s0>T|<s1>F}}"];
	Node0x59a11b0:s0 -> Node0x59a0f50;
	Node0x59a11b0:s1 -> Node0x59a29f0;
	Node0x59a29f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%108:\l108:                                              \l  %109 = phi i64 [ %118, %108 ], [ %105, %103 ]\l  %110 = phi double [ %117, %108 ], [ %106, %103 ]\l  %111 = phi i64 [ %119, %108 ], [ 0, %103 ]\l  %112 = trunc i64 %109 to i32\l  %113 = extractelement \<11 x i64\> %85, i32 %112\l  %114 = sub nsw i64 %113, %3\l  %115 = sitofp i64 %114 to double\l  %116 = fmul contract double %115, %115\l  %117 = fadd contract double %110, %116\l  %118 = add nuw nsw i64 %109, 1\l  %119 = add i64 %111, 1\l  %120 = icmp eq i64 %119, %87\l  br i1 %120, label %121, label %108, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x59a29f0:s0 -> Node0x59a0f50;
	Node0x59a29f0:s1 -> Node0x59a29f0;
	Node0x59a0f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%121:\l121:                                              \l  %122 = phi double [ 0.000000e+00, %84 ], [ %104, %103 ], [ %117, %108 ]\l  %123 = fcmp contract olt double %122, %4\l  br i1 %123, label %186, label %188\l|{<s0>T|<s1>F}}"];
	Node0x59a0f50:s0 -> Node0x59a3580;
	Node0x59a0f50:s1 -> Node0x599d820;
	Node0x59a13d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%124:\l124:                                              \l  %125 = phi i64 [ 0, %89 ], [ %183, %124 ]\l  %126 = phi double [ 0.000000e+00, %89 ], [ %182, %124 ]\l  %127 = phi i64 [ 0, %89 ], [ %184, %124 ]\l  %128 = trunc i64 %125 to i32\l  %129 = extractelement \<11 x i64\> %85, i32 %128\l  %130 = sub nsw i64 %129, %3\l  %131 = sitofp i64 %130 to double\l  %132 = fmul contract double %131, %131\l  %133 = fadd contract double %126, %132\l  %134 = trunc i64 %125 to i32\l  %135 = or i32 %134, 1\l  %136 = extractelement \<11 x i64\> %85, i32 %135\l  %137 = sub nsw i64 %136, %3\l  %138 = sitofp i64 %137 to double\l  %139 = fmul contract double %138, %138\l  %140 = fadd contract double %133, %139\l  %141 = trunc i64 %125 to i32\l  %142 = or i32 %141, 2\l  %143 = extractelement \<11 x i64\> %85, i32 %142\l  %144 = sub nsw i64 %143, %3\l  %145 = sitofp i64 %144 to double\l  %146 = fmul contract double %145, %145\l  %147 = fadd contract double %140, %146\l  %148 = trunc i64 %125 to i32\l  %149 = or i32 %148, 3\l  %150 = extractelement \<11 x i64\> %85, i32 %149\l  %151 = sub nsw i64 %150, %3\l  %152 = sitofp i64 %151 to double\l  %153 = fmul contract double %152, %152\l  %154 = fadd contract double %147, %153\l  %155 = trunc i64 %125 to i32\l  %156 = or i32 %155, 4\l  %157 = extractelement \<11 x i64\> %85, i32 %156\l  %158 = sub nsw i64 %157, %3\l  %159 = sitofp i64 %158 to double\l  %160 = fmul contract double %159, %159\l  %161 = fadd contract double %154, %160\l  %162 = trunc i64 %125 to i32\l  %163 = or i32 %162, 5\l  %164 = extractelement \<11 x i64\> %85, i32 %163\l  %165 = sub nsw i64 %164, %3\l  %166 = sitofp i64 %165 to double\l  %167 = fmul contract double %166, %166\l  %168 = fadd contract double %161, %167\l  %169 = trunc i64 %125 to i32\l  %170 = or i32 %169, 6\l  %171 = extractelement \<11 x i64\> %85, i32 %170\l  %172 = sub nsw i64 %171, %3\l  %173 = sitofp i64 %172 to double\l  %174 = fmul contract double %173, %173\l  %175 = fadd contract double %168, %174\l  %176 = trunc i64 %125 to i32\l  %177 = or i32 %176, 7\l  %178 = extractelement \<11 x i64\> %85, i32 %177\l  %179 = sub nsw i64 %178, %3\l  %180 = sitofp i64 %179 to double\l  %181 = fmul contract double %180, %180\l  %182 = fadd contract double %175, %181\l  %183 = add nuw nsw i64 %125, 8\l  %184 = add i64 %127, 8\l  %185 = icmp eq i64 %184, %90\l  br i1 %185, label %103, label %124, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x59a13d0:s0 -> Node0x59a11b0;
	Node0x59a13d0:s1 -> Node0x59a13d0;
	Node0x59a3580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%186:\l186:                                              \l  %187 = atomicrmw add i64 addrspace(1)* %0, i64 1 syncscope(\"agent-one-as\")\l... monotonic, align 8\l  br label %188\l}"];
	Node0x59a3580 -> Node0x599d820;
	Node0x599d820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%188:\l188:                                              \l  ret void\l}"];
}
