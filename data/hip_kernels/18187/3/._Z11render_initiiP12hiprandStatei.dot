digraph "CFG for '_Z11render_initiiP12hiprandStatei' function" {
	label="CFG for '_Z11render_initiiP12hiprandStatei' function";

	Node0x61c1a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%4:\l  %5 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = icmp eq i32 %6, 0\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.y()\l  %9 = icmp eq i32 %8, 0\l  %10 = select i1 %7, i1 %9, i1 false\l  br i1 %10, label %11, label %31\l|{<s0>T|<s1>F}}"];
	Node0x61c1a70:s0 -> Node0x61c1b00;
	Node0x61c1a70:s1 -> Node0x61c2d50;
	Node0x61c1b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%11:\l11:                                               \l  %12 = xor i32 %3, 746559103\l  %13 = icmp sgt i32 %3, -1\l  %14 = mul i32 %12, 1228688033\l  %15 = select i1 %13, i32 -1973591729, i32 -100066652\l  %16 = add i32 %14, 123456789\l  %17 = xor i32 %14, 362436069\l  %18 = add nsw i32 %15, 521288629\l  %19 = xor i32 %15, 88675123\l  %20 = add i32 %14, 5783321\l  %21 = add i32 %14, 6615241\l  %22 = add i32 %21, %15\l  %23 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 0\l  store i32 %22, i32 addrspace(1)* %23, align 8, !tbaa.struct !5\l  %24 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(1)* %24, align 4, !tbaa.struct !15\l  %25 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(1)* %25, align 8, !tbaa.struct !16\l  %26 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 0\l  store i32 %16, i32 addrspace(1)* %26, align 8, !tbaa.struct !17\l  %27 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 1\l  store i32 %17, i32 addrspace(1)* %27, align 4, !tbaa.struct !18\l  %28 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 2\l  store i32 %18, i32 addrspace(1)* %28, align 8, !tbaa.struct !19\l  %29 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 3\l  store i32 %19, i32 addrspace(1)* %29, align 4, !tbaa.struct !20\l  %30 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 4\l  store i32 %20, i32 addrspace(1)* %30, align 8, !tbaa.struct !21\l  br label %31\l}"];
	Node0x61c1b00 -> Node0x61c2d50;
	Node0x61c2d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%31:\l31:                                               \l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %33 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %34 = getelementptr i8, i8 addrspace(4)* %33, i64 4\l  %35 = bitcast i8 addrspace(4)* %34 to i16 addrspace(4)*\l  %36 = load i16, i16 addrspace(4)* %35, align 4, !range !22, !invariant.load\l... !23\l  %37 = zext i16 %36 to i32\l  %38 = mul i32 %32, %37\l  %39 = add i32 %38, %6\l  %40 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %41 = getelementptr i8, i8 addrspace(4)* %33, i64 6\l  %42 = bitcast i8 addrspace(4)* %41 to i16 addrspace(4)*\l  %43 = load i16, i16 addrspace(4)* %42, align 2, !range !22, !invariant.load\l... !23\l  %44 = zext i16 %43 to i32\l  %45 = mul i32 %40, %44\l  %46 = add i32 %45, %8\l  %47 = icmp slt i32 %39, %0\l  %48 = icmp slt i32 %46, %1\l  %49 = select i1 %47, i1 %48, i1 false\l  br i1 %49, label %50, label %255\l|{<s0>T|<s1>F}}"];
	Node0x61c2d50:s0 -> Node0x61ca870;
	Node0x61c2d50:s1 -> Node0x61ca900;
	Node0x61ca870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%50:\l50:                                               \l  %51 = mul nsw i32 %46, %0\l  %52 = add nsw i32 %51, %39\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 %53\l  %55 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %55) #4\l  %56 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 0\l  %57 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 1\l  %58 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 2\l  %59 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 3\l  %60 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 4\l  %61 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 0\l  %62 = xor i32 %3, 746559103\l  %63 = icmp sgt i32 %3, -1\l  %64 = mul i32 %62, 1228688033\l  %65 = select i1 %63, i32 -1973591729, i32 -100066652\l  %66 = add i32 %64, 123456789\l  store i32 %66, i32 addrspace(5)* %56, align 8, !tbaa !6\l  %67 = xor i32 %64, 362436069\l  store i32 %67, i32 addrspace(5)* %57, align 4, !tbaa !6\l  %68 = add nsw i32 %65, 521288629\l  store i32 %68, i32 addrspace(5)* %58, align 8, !tbaa !6\l  %69 = xor i32 %65, 88675123\l  store i32 %69, i32 addrspace(5)* %59, align 4, !tbaa !6\l  %70 = add i32 %64, 5783321\l  store i32 %70, i32 addrspace(5)* %60, align 8, !tbaa !6\l  %71 = add i32 %64, 6615241\l  %72 = add i32 %71, %65\l  store i32 %72, i32 addrspace(5)* %61, align 8, !tbaa !24\l  %73 = icmp eq i32 %52, 0\l  br i1 %73, label %251, label %74\l|{<s0>T|<s1>F}}"];
	Node0x61ca870:s0 -> Node0x61cc920;
	Node0x61ca870:s1 -> Node0x61cc9b0;
	Node0x61cc9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%74:\l74:                                               \l  %75 = phi i64 [ %84, %82 ], [ %53, %50 ]\l  %76 = phi i32 [ %83, %82 ], [ 0, %50 ]\l  %77 = trunc i64 %75 to i32\l  %78 = and i32 %77, 3\l  %79 = icmp eq i32 %78, 0\l  br i1 %79, label %82, label %80\l|{<s0>T|<s1>F}}"];
	Node0x61cc9b0:s0 -> Node0x61ccaf0;
	Node0x61cc9b0:s1 -> Node0x61ccee0;
	Node0x61ccee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%80:\l80:                                               \l  %81 = zext i32 %76 to i64\l  br label %86\l}"];
	Node0x61ccee0 -> Node0x61cd090;
	Node0x61ccaf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%82:\l82:                                               \l  %83 = add nuw nsw i32 %76, 1\l  %84 = lshr i64 %75, 2\l  %85 = icmp ult i64 %75, 4\l  br i1 %85, label %251, label %74, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x61ccaf0:s0 -> Node0x61cc920;
	Node0x61ccaf0:s1 -> Node0x61cc9b0;
	Node0x61cd090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%86:\l86:                                               \l  %87 = phi i32 [ 0, %80 ], [ %249, %248 ]\l  br label %88\l}"];
	Node0x61cd090 -> Node0x61cd570;
	Node0x61cd570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%88:\l88:                                               \l  %89 = phi i32 [ 0, %86 ], [ %221, %88 ]\l  %90 = phi i32 [ 0, %86 ], [ %227, %88 ]\l  %91 = phi i32 [ 0, %86 ], [ %233, %88 ]\l  %92 = phi i32 [ 0, %86 ], [ %239, %88 ]\l  %93 = phi i32 [ 0, %86 ], [ %245, %88 ]\l  %94 = phi i32 [ 0, %86 ], [ %246, %88 ]\l  %95 = lshr i32 %94, 5\l  %96 = and i32 %94, 28\l  %97 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %95\l  %98 = load i32, i32 addrspace(5)* %97, align 4, !tbaa !6\l  %99 = shl nuw i32 1, %96\l  %100 = and i32 %99, %98\l  %101 = icmp eq i32 %100, 0\l  %102 = mul nuw nsw i32 %94, 5\l  %103 = zext i32 %102 to i64\l  %104 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %103\l  %105 = load i32, i32 addrspace(4)* %104, align 16, !tbaa !6\l  %106 = select i1 %101, i32 0, i32 %105\l  %107 = xor i32 %106, %89\l  %108 = or i32 %102, 1\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %109\l  %111 = load i32, i32 addrspace(4)* %110, align 4, !tbaa !6\l  %112 = select i1 %101, i32 0, i32 %111\l  %113 = xor i32 %112, %90\l  %114 = or i32 %102, 2\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %115\l  %117 = load i32, i32 addrspace(4)* %116, align 8, !tbaa !6\l  %118 = select i1 %101, i32 0, i32 %117\l  %119 = xor i32 %118, %91\l  %120 = or i32 %102, 3\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %121\l  %123 = load i32, i32 addrspace(4)* %122, align 4, !tbaa !6\l  %124 = select i1 %101, i32 0, i32 %123\l  %125 = xor i32 %124, %92\l  %126 = add nuw nsw i32 %102, 4\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %127\l  %129 = load i32, i32 addrspace(4)* %128, align 16, !tbaa !6\l  %130 = select i1 %101, i32 0, i32 %129\l  %131 = xor i32 %130, %93\l  %132 = or i32 %94, 1\l  %133 = lshr i32 %94, 5\l  %134 = and i32 %132, 29\l  %135 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %133\l  %136 = load i32, i32 addrspace(5)* %135, align 4, !tbaa !6\l  %137 = shl nuw i32 1, %134\l  %138 = and i32 %137, %136\l  %139 = icmp eq i32 %138, 0\l  %140 = mul nuw nsw i32 %132, 5\l  %141 = zext i32 %140 to i64\l  %142 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %141\l  %143 = load i32, i32 addrspace(4)* %142, align 4, !tbaa !6\l  %144 = select i1 %139, i32 0, i32 %143\l  %145 = xor i32 %144, %107\l  %146 = add nuw nsw i32 %140, 1\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %147\l  %149 = load i32, i32 addrspace(4)* %148, align 8, !tbaa !6\l  %150 = select i1 %139, i32 0, i32 %149\l  %151 = xor i32 %150, %113\l  %152 = or i32 %140, 2\l  %153 = zext i32 %152 to i64\l  %154 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %153\l  %155 = load i32, i32 addrspace(4)* %154, align 4, !tbaa !6\l  %156 = select i1 %139, i32 0, i32 %155\l  %157 = xor i32 %156, %119\l  %158 = add nuw nsw i32 %140, 3\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %159\l  %161 = load i32, i32 addrspace(4)* %160, align 16, !tbaa !6\l  %162 = select i1 %139, i32 0, i32 %161\l  %163 = xor i32 %162, %125\l  %164 = add nuw nsw i32 %140, 4\l  %165 = zext i32 %164 to i64\l  %166 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %165\l  %167 = load i32, i32 addrspace(4)* %166, align 4, !tbaa !6\l  %168 = select i1 %139, i32 0, i32 %167\l  %169 = xor i32 %168, %131\l  %170 = or i32 %94, 2\l  %171 = lshr i32 %94, 5\l  %172 = and i32 %170, 30\l  %173 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %171\l  %174 = load i32, i32 addrspace(5)* %173, align 4, !tbaa !6\l  %175 = shl nuw i32 1, %172\l  %176 = and i32 %175, %174\l  %177 = icmp eq i32 %176, 0\l  %178 = mul nuw nsw i32 %170, 5\l  %179 = zext i32 %178 to i64\l  %180 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %179\l  %181 = load i32, i32 addrspace(4)* %180, align 8, !tbaa !6\l  %182 = select i1 %177, i32 0, i32 %181\l  %183 = xor i32 %182, %145\l  %184 = or i32 %178, 1\l  %185 = zext i32 %184 to i64\l  %186 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %185\l  %187 = load i32, i32 addrspace(4)* %186, align 4, !tbaa !6\l  %188 = select i1 %177, i32 0, i32 %187\l  %189 = xor i32 %188, %151\l  %190 = add nuw nsw i32 %178, 2\l  %191 = zext i32 %190 to i64\l  %192 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %191\l  %193 = load i32, i32 addrspace(4)* %192, align 16, !tbaa !6\l  %194 = select i1 %177, i32 0, i32 %193\l  %195 = xor i32 %194, %157\l  %196 = add nuw nsw i32 %178, 3\l  %197 = zext i32 %196 to i64\l  %198 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %197\l  %199 = load i32, i32 addrspace(4)* %198, align 4, !tbaa !6\l  %200 = select i1 %177, i32 0, i32 %199\l  %201 = xor i32 %200, %163\l  %202 = add nuw nsw i32 %178, 4\l  %203 = zext i32 %202 to i64\l  %204 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %203\l  %205 = load i32, i32 addrspace(4)* %204, align 8, !tbaa !6\l  %206 = select i1 %177, i32 0, i32 %205\l  %207 = xor i32 %206, %169\l  %208 = or i32 %94, 3\l  %209 = lshr i32 %94, 5\l  %210 = and i32 %208, 31\l  %211 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %209\l  %212 = load i32, i32 addrspace(5)* %211, align 4, !tbaa !6\l  %213 = shl nuw i32 1, %210\l  %214 = and i32 %213, %212\l  %215 = icmp eq i32 %214, 0\l  %216 = mul nuw nsw i32 %208, 5\l  %217 = zext i32 %216 to i64\l  %218 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %217\l  %219 = load i32, i32 addrspace(4)* %218, align 4, !tbaa !6\l  %220 = select i1 %215, i32 0, i32 %219\l  %221 = xor i32 %220, %183\l  %222 = add nuw nsw i32 %216, 1\l  %223 = zext i32 %222 to i64\l  %224 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %223\l  %225 = load i32, i32 addrspace(4)* %224, align 16, !tbaa !6\l  %226 = select i1 %215, i32 0, i32 %225\l  %227 = xor i32 %226, %189\l  %228 = add nuw nsw i32 %216, 2\l  %229 = zext i32 %228 to i64\l  %230 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %229\l  %231 = load i32, i32 addrspace(4)* %230, align 4, !tbaa !6\l  %232 = select i1 %215, i32 0, i32 %231\l  %233 = xor i32 %232, %195\l  %234 = add nuw nsw i32 %216, 3\l  %235 = zext i32 %234 to i64\l  %236 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %235\l  %237 = load i32, i32 addrspace(4)* %236, align 8, !tbaa !6\l  %238 = select i1 %215, i32 0, i32 %237\l  %239 = xor i32 %238, %201\l  %240 = add nuw nsw i32 %216, 4\l  %241 = zext i32 %240 to i64\l  %242 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %81, i64 %241\l  %243 = load i32, i32 addrspace(4)* %242, align 4, !tbaa !6\l  %244 = select i1 %215, i32 0, i32 %243\l  %245 = xor i32 %244, %207\l  %246 = add nuw nsw i32 %94, 4\l  %247 = icmp eq i32 %246, 160\l  br i1 %247, label %248, label %88, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x61cd570:s0 -> Node0x61cd430;
	Node0x61cd570:s1 -> Node0x61cd570;
	Node0x61cd430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%248:\l248:                                              \l  store i32 %221, i32 addrspace(5)* %56, align 8, !tbaa !6\l  store i32 %227, i32 addrspace(5)* %57, align 4, !tbaa !6\l  store i32 %233, i32 addrspace(5)* %58, align 8, !tbaa !6\l  store i32 %239, i32 addrspace(5)* %59, align 4, !tbaa !6\l  store i32 %245, i32 addrspace(5)* %60, align 8, !tbaa !6\l  %249 = add nuw nsw i32 %87, 1\l  %250 = icmp eq i32 %249, %78\l  br i1 %250, label %82, label %86, !llvm.loop !30\l|{<s0>T|<s1>F}}"];
	Node0x61cd430:s0 -> Node0x61ccaf0;
	Node0x61cd430:s1 -> Node0x61cd090;
	Node0x61cc920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%251:\l251:                                              \l  %252 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %252, align 4, !tbaa !31\l  %253 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %253, align 8, !tbaa !32\l  %254 = bitcast %struct.hiprandState addrspace(1)* %54 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %254, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %55, i64 48, i1 false), !tbaa.struct !5\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %55) #4\l  br label %255\l}"];
	Node0x61cc920 -> Node0x61ca900;
	Node0x61ca900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%255:\l255:                                              \l  ret void\l}"];
}
