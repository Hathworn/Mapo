digraph "CFG for '_Z11render_initiiP12hiprandStatei' function" {
	label="CFG for '_Z11render_initiiP12hiprandStatei' function";

	Node0x5bf0a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%4:\l  %5 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = icmp eq i32 %6, 0\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.y()\l  %9 = icmp eq i32 %8, 0\l  %10 = select i1 %7, i1 %9, i1 false\l  br i1 %10, label %11, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5bf0a70:s0 -> Node0x5bf0b00;
	Node0x5bf0a70:s1 -> Node0x5bf1d50;
	Node0x5bf0b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%11:\l11:                                               \l  %12 = xor i32 %3, 746559103\l  %13 = icmp sgt i32 %3, -1\l  %14 = mul i32 %12, 1228688033\l  %15 = select i1 %13, i32 -1973591729, i32 -100066652\l  %16 = add i32 %14, 123456789\l  %17 = xor i32 %14, 362436069\l  %18 = add nsw i32 %15, 521288629\l  %19 = xor i32 %15, 88675123\l  %20 = add i32 %14, 5783321\l  %21 = add i32 %14, 6615241\l  %22 = add i32 %21, %15\l  %23 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 0\l  store i32 %22, i32 addrspace(1)* %23, align 8, !tbaa.struct !5\l  %24 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(1)* %24, align 4, !tbaa.struct !15\l  %25 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(1)* %25, align 8, !tbaa.struct !16\l  %26 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 0\l  store i32 %16, i32 addrspace(1)* %26, align 8, !tbaa.struct !17\l  %27 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 1\l  store i32 %17, i32 addrspace(1)* %27, align 4, !tbaa.struct !18\l  %28 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 2\l  store i32 %18, i32 addrspace(1)* %28, align 8, !tbaa.struct !19\l  %29 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 3\l  store i32 %19, i32 addrspace(1)* %29, align 4, !tbaa.struct !20\l  %30 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 0, i32 0, i32 0, i32 5, i64 4\l  store i32 %20, i32 addrspace(1)* %30, align 8, !tbaa.struct !21\l  br label %31\l}"];
	Node0x5bf0b00 -> Node0x5bf1d50;
	Node0x5bf1d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%31:\l31:                                               \l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %33 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %34 = getelementptr i8, i8 addrspace(4)* %33, i64 4\l  %35 = bitcast i8 addrspace(4)* %34 to i16 addrspace(4)*\l  %36 = load i16, i16 addrspace(4)* %35, align 4, !range !22, !invariant.load\l... !23\l  %37 = zext i16 %36 to i32\l  %38 = mul i32 %32, %37\l  %39 = add i32 %38, %6\l  %40 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %41 = getelementptr i8, i8 addrspace(4)* %33, i64 6\l  %42 = bitcast i8 addrspace(4)* %41 to i16 addrspace(4)*\l  %43 = load i16, i16 addrspace(4)* %42, align 2, !range !22, !invariant.load\l... !23\l  %44 = zext i16 %43 to i32\l  %45 = mul i32 %40, %44\l  %46 = add i32 %45, %8\l  %47 = icmp slt i32 %39, %0\l  %48 = icmp slt i32 %46, %1\l  %49 = select i1 %47, i1 %48, i1 false\l  br i1 %49, label %50, label %256\l|{<s0>T|<s1>F}}"];
	Node0x5bf1d50:s0 -> Node0x5bf9870;
	Node0x5bf1d50:s1 -> Node0x5bf9900;
	Node0x5bf9870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%50:\l50:                                               \l  %51 = mul nsw i32 %46, %0\l  %52 = add nsw i32 %51, %39\l  %53 = add nsw i32 %52, %3\l  %54 = sext i32 %52 to i64\l  %55 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 %54\l  %56 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %56) #4\l  %57 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 0\l  %58 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 1\l  %59 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 2\l  %60 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 3\l  %61 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 4\l  %62 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 0\l  %63 = xor i32 %53, 746559103\l  %64 = icmp sgt i32 %53, -1\l  %65 = mul i32 %63, 1228688033\l  %66 = select i1 %64, i32 -1973591729, i32 -100066652\l  %67 = add i32 %65, 123456789\l  store i32 %67, i32 addrspace(5)* %57, align 8, !tbaa !6\l  %68 = xor i32 %65, 362436069\l  store i32 %68, i32 addrspace(5)* %58, align 4, !tbaa !6\l  %69 = add nsw i32 %66, 521288629\l  store i32 %69, i32 addrspace(5)* %59, align 8, !tbaa !6\l  %70 = xor i32 %66, 88675123\l  store i32 %70, i32 addrspace(5)* %60, align 4, !tbaa !6\l  %71 = add i32 %65, 5783321\l  store i32 %71, i32 addrspace(5)* %61, align 8, !tbaa !6\l  %72 = add i32 %65, 6615241\l  %73 = add i32 %72, %66\l  store i32 %73, i32 addrspace(5)* %62, align 8, !tbaa !24\l  %74 = icmp eq i32 %52, 0\l  br i1 %74, label %252, label %75\l|{<s0>T|<s1>F}}"];
	Node0x5bf9870:s0 -> Node0x5bfb9b0;
	Node0x5bf9870:s1 -> Node0x5bfba40;
	Node0x5bfba40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%75:\l75:                                               \l  %76 = phi i64 [ %85, %83 ], [ %54, %50 ]\l  %77 = phi i32 [ %84, %83 ], [ 0, %50 ]\l  %78 = trunc i64 %76 to i32\l  %79 = and i32 %78, 3\l  %80 = icmp eq i32 %79, 0\l  br i1 %80, label %83, label %81\l|{<s0>T|<s1>F}}"];
	Node0x5bfba40:s0 -> Node0x5bfbb80;
	Node0x5bfba40:s1 -> Node0x5bfbf70;
	Node0x5bfbf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%81:\l81:                                               \l  %82 = zext i32 %77 to i64\l  br label %87\l}"];
	Node0x5bfbf70 -> Node0x5bfc120;
	Node0x5bfbb80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%83:\l83:                                               \l  %84 = add nuw nsw i32 %77, 1\l  %85 = lshr i64 %76, 2\l  %86 = icmp ult i64 %76, 4\l  br i1 %86, label %252, label %75, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x5bfbb80:s0 -> Node0x5bfb9b0;
	Node0x5bfbb80:s1 -> Node0x5bfba40;
	Node0x5bfc120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%87:\l87:                                               \l  %88 = phi i32 [ 0, %81 ], [ %250, %249 ]\l  br label %89\l}"];
	Node0x5bfc120 -> Node0x5bfc600;
	Node0x5bfc600 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%89:\l89:                                               \l  %90 = phi i32 [ 0, %87 ], [ %222, %89 ]\l  %91 = phi i32 [ 0, %87 ], [ %228, %89 ]\l  %92 = phi i32 [ 0, %87 ], [ %234, %89 ]\l  %93 = phi i32 [ 0, %87 ], [ %240, %89 ]\l  %94 = phi i32 [ 0, %87 ], [ %246, %89 ]\l  %95 = phi i32 [ 0, %87 ], [ %247, %89 ]\l  %96 = lshr i32 %95, 5\l  %97 = and i32 %95, 28\l  %98 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %96\l  %99 = load i32, i32 addrspace(5)* %98, align 4, !tbaa !6\l  %100 = shl nuw i32 1, %97\l  %101 = and i32 %100, %99\l  %102 = icmp eq i32 %101, 0\l  %103 = mul nuw nsw i32 %95, 5\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %104\l  %106 = load i32, i32 addrspace(4)* %105, align 16, !tbaa !6\l  %107 = select i1 %102, i32 0, i32 %106\l  %108 = xor i32 %107, %90\l  %109 = or i32 %103, 1\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %110\l  %112 = load i32, i32 addrspace(4)* %111, align 4, !tbaa !6\l  %113 = select i1 %102, i32 0, i32 %112\l  %114 = xor i32 %113, %91\l  %115 = or i32 %103, 2\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %116\l  %118 = load i32, i32 addrspace(4)* %117, align 8, !tbaa !6\l  %119 = select i1 %102, i32 0, i32 %118\l  %120 = xor i32 %119, %92\l  %121 = or i32 %103, 3\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %122\l  %124 = load i32, i32 addrspace(4)* %123, align 4, !tbaa !6\l  %125 = select i1 %102, i32 0, i32 %124\l  %126 = xor i32 %125, %93\l  %127 = add nuw nsw i32 %103, 4\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %128\l  %130 = load i32, i32 addrspace(4)* %129, align 16, !tbaa !6\l  %131 = select i1 %102, i32 0, i32 %130\l  %132 = xor i32 %131, %94\l  %133 = or i32 %95, 1\l  %134 = lshr i32 %95, 5\l  %135 = and i32 %133, 29\l  %136 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %134\l  %137 = load i32, i32 addrspace(5)* %136, align 4, !tbaa !6\l  %138 = shl nuw i32 1, %135\l  %139 = and i32 %138, %137\l  %140 = icmp eq i32 %139, 0\l  %141 = mul nuw nsw i32 %133, 5\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %142\l  %144 = load i32, i32 addrspace(4)* %143, align 4, !tbaa !6\l  %145 = select i1 %140, i32 0, i32 %144\l  %146 = xor i32 %145, %108\l  %147 = add nuw nsw i32 %141, 1\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %148\l  %150 = load i32, i32 addrspace(4)* %149, align 8, !tbaa !6\l  %151 = select i1 %140, i32 0, i32 %150\l  %152 = xor i32 %151, %114\l  %153 = or i32 %141, 2\l  %154 = zext i32 %153 to i64\l  %155 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %154\l  %156 = load i32, i32 addrspace(4)* %155, align 4, !tbaa !6\l  %157 = select i1 %140, i32 0, i32 %156\l  %158 = xor i32 %157, %120\l  %159 = add nuw nsw i32 %141, 3\l  %160 = zext i32 %159 to i64\l  %161 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %160\l  %162 = load i32, i32 addrspace(4)* %161, align 16, !tbaa !6\l  %163 = select i1 %140, i32 0, i32 %162\l  %164 = xor i32 %163, %126\l  %165 = add nuw nsw i32 %141, 4\l  %166 = zext i32 %165 to i64\l  %167 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %166\l  %168 = load i32, i32 addrspace(4)* %167, align 4, !tbaa !6\l  %169 = select i1 %140, i32 0, i32 %168\l  %170 = xor i32 %169, %132\l  %171 = or i32 %95, 2\l  %172 = lshr i32 %95, 5\l  %173 = and i32 %171, 30\l  %174 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %172\l  %175 = load i32, i32 addrspace(5)* %174, align 4, !tbaa !6\l  %176 = shl nuw i32 1, %173\l  %177 = and i32 %176, %175\l  %178 = icmp eq i32 %177, 0\l  %179 = mul nuw nsw i32 %171, 5\l  %180 = zext i32 %179 to i64\l  %181 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %180\l  %182 = load i32, i32 addrspace(4)* %181, align 8, !tbaa !6\l  %183 = select i1 %178, i32 0, i32 %182\l  %184 = xor i32 %183, %146\l  %185 = or i32 %179, 1\l  %186 = zext i32 %185 to i64\l  %187 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %186\l  %188 = load i32, i32 addrspace(4)* %187, align 4, !tbaa !6\l  %189 = select i1 %178, i32 0, i32 %188\l  %190 = xor i32 %189, %152\l  %191 = add nuw nsw i32 %179, 2\l  %192 = zext i32 %191 to i64\l  %193 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %192\l  %194 = load i32, i32 addrspace(4)* %193, align 16, !tbaa !6\l  %195 = select i1 %178, i32 0, i32 %194\l  %196 = xor i32 %195, %158\l  %197 = add nuw nsw i32 %179, 3\l  %198 = zext i32 %197 to i64\l  %199 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %198\l  %200 = load i32, i32 addrspace(4)* %199, align 4, !tbaa !6\l  %201 = select i1 %178, i32 0, i32 %200\l  %202 = xor i32 %201, %164\l  %203 = add nuw nsw i32 %179, 4\l  %204 = zext i32 %203 to i64\l  %205 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %204\l  %206 = load i32, i32 addrspace(4)* %205, align 8, !tbaa !6\l  %207 = select i1 %178, i32 0, i32 %206\l  %208 = xor i32 %207, %170\l  %209 = or i32 %95, 3\l  %210 = lshr i32 %95, 5\l  %211 = and i32 %209, 31\l  %212 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %210\l  %213 = load i32, i32 addrspace(5)* %212, align 4, !tbaa !6\l  %214 = shl nuw i32 1, %211\l  %215 = and i32 %214, %213\l  %216 = icmp eq i32 %215, 0\l  %217 = mul nuw nsw i32 %209, 5\l  %218 = zext i32 %217 to i64\l  %219 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %218\l  %220 = load i32, i32 addrspace(4)* %219, align 4, !tbaa !6\l  %221 = select i1 %216, i32 0, i32 %220\l  %222 = xor i32 %221, %184\l  %223 = add nuw nsw i32 %217, 1\l  %224 = zext i32 %223 to i64\l  %225 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %224\l  %226 = load i32, i32 addrspace(4)* %225, align 16, !tbaa !6\l  %227 = select i1 %216, i32 0, i32 %226\l  %228 = xor i32 %227, %190\l  %229 = add nuw nsw i32 %217, 2\l  %230 = zext i32 %229 to i64\l  %231 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %230\l  %232 = load i32, i32 addrspace(4)* %231, align 4, !tbaa !6\l  %233 = select i1 %216, i32 0, i32 %232\l  %234 = xor i32 %233, %196\l  %235 = add nuw nsw i32 %217, 3\l  %236 = zext i32 %235 to i64\l  %237 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %236\l  %238 = load i32, i32 addrspace(4)* %237, align 8, !tbaa !6\l  %239 = select i1 %216, i32 0, i32 %238\l  %240 = xor i32 %239, %202\l  %241 = add nuw nsw i32 %217, 4\l  %242 = zext i32 %241 to i64\l  %243 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %82, i64 %242\l  %244 = load i32, i32 addrspace(4)* %243, align 4, !tbaa !6\l  %245 = select i1 %216, i32 0, i32 %244\l  %246 = xor i32 %245, %208\l  %247 = add nuw nsw i32 %95, 4\l  %248 = icmp eq i32 %247, 160\l  br i1 %248, label %249, label %89, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x5bfc600:s0 -> Node0x5bfc4c0;
	Node0x5bfc600:s1 -> Node0x5bfc600;
	Node0x5bfc4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%249:\l249:                                              \l  store i32 %222, i32 addrspace(5)* %57, align 8, !tbaa !6\l  store i32 %228, i32 addrspace(5)* %58, align 4, !tbaa !6\l  store i32 %234, i32 addrspace(5)* %59, align 8, !tbaa !6\l  store i32 %240, i32 addrspace(5)* %60, align 4, !tbaa !6\l  store i32 %246, i32 addrspace(5)* %61, align 8, !tbaa !6\l  %250 = add nuw nsw i32 %88, 1\l  %251 = icmp eq i32 %250, %79\l  br i1 %251, label %83, label %87, !llvm.loop !30\l|{<s0>T|<s1>F}}"];
	Node0x5bfc4c0:s0 -> Node0x5bfbb80;
	Node0x5bfc4c0:s1 -> Node0x5bfc120;
	Node0x5bfb9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%252:\l252:                                              \l  %253 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %253, align 4, !tbaa !31\l  %254 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %254, align 8, !tbaa !32\l  %255 = bitcast %struct.hiprandState addrspace(1)* %55 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %255, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %56, i64 48, i1 false), !tbaa.struct !5\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %56) #4\l  br label %256\l}"];
	Node0x5bfb9b0 -> Node0x5bf9900;
	Node0x5bf9900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%256:\l256:                                              \l  ret void\l}"];
}
