digraph "CFG for '_Z13fc_gpu_kernelPfS_S_iii' function" {
	label="CFG for '_Z13fc_gpu_kernelPfS_S_iii' function";

	Node0x5dfdcb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 2, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp slt i32 %15, %5\l  %25 = icmp slt i32 %23, %4\l  %26 = select i1 %24, i1 %25, i1 false\l  %27 = icmp sgt i32 %3, 0\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %164\l|{<s0>T|<s1>F}}"];
	Node0x5dfdcb0:s0 -> Node0x5e018a0;
	Node0x5dfdcb0:s1 -> Node0x5e01930;
	Node0x5e018a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %15, %3\l  %31 = mul nsw i32 %15, %4\l  %32 = add nsw i32 %31, %23\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = and i32 %3, 7\l  %37 = icmp ult i32 %3, 8\l  br i1 %37, label %142, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5e018a0:s0 -> Node0x5e02120;
	Node0x5e018a0:s1 -> Node0x5e021b0;
	Node0x5e021b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%38:\l38:                                               \l  %39 = and i32 %3, -8\l  br label %40\l}"];
	Node0x5e021b0 -> Node0x5e023b0;
	Node0x5e023b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%40:\l40:                                               \l  %41 = phi float [ %35, %38 ], [ %138, %40 ]\l  %42 = phi i32 [ 0, %38 ], [ %139, %40 ]\l  %43 = phi i32 [ 0, %38 ], [ %140, %40 ]\l  %44 = add nsw i32 %42, %30\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7\l  %48 = mul nsw i32 %42, %4\l  %49 = add nsw i32 %48, %23\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7\l  %53 = fmul contract float %47, %52\l  %54 = fadd contract float %41, %53\l  store float %54, float addrspace(1)* %34, align 4, !tbaa !7\l  %55 = or i32 %42, 1\l  %56 = add nsw i32 %55, %30\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = mul nsw i32 %55, %4\l  %61 = add nsw i32 %60, %23\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %2, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7\l  %65 = fmul contract float %59, %64\l  %66 = fadd contract float %54, %65\l  store float %66, float addrspace(1)* %34, align 4, !tbaa !7\l  %67 = or i32 %42, 2\l  %68 = add nsw i32 %67, %30\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7\l  %72 = mul nsw i32 %67, %4\l  %73 = add nsw i32 %72, %23\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %2, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7\l  %77 = fmul contract float %71, %76\l  %78 = fadd contract float %66, %77\l  store float %78, float addrspace(1)* %34, align 4, !tbaa !7\l  %79 = or i32 %42, 3\l  %80 = add nsw i32 %79, %30\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7\l  %84 = mul nsw i32 %79, %4\l  %85 = add nsw i32 %84, %23\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %2, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = fmul contract float %83, %88\l  %90 = fadd contract float %78, %89\l  store float %90, float addrspace(1)* %34, align 4, !tbaa !7\l  %91 = or i32 %42, 4\l  %92 = add nsw i32 %91, %30\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = mul nsw i32 %91, %4\l  %97 = add nsw i32 %96, %23\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7\l  %101 = fmul contract float %95, %100\l  %102 = fadd contract float %90, %101\l  store float %102, float addrspace(1)* %34, align 4, !tbaa !7\l  %103 = or i32 %42, 5\l  %104 = add nsw i32 %103, %30\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7\l  %108 = mul nsw i32 %103, %4\l  %109 = add nsw i32 %108, %23\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = fmul contract float %107, %112\l  %114 = fadd contract float %102, %113\l  store float %114, float addrspace(1)* %34, align 4, !tbaa !7\l  %115 = or i32 %42, 6\l  %116 = add nsw i32 %115, %30\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7\l  %120 = mul nsw i32 %115, %4\l  %121 = add nsw i32 %120, %23\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %2, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7\l  %125 = fmul contract float %119, %124\l  %126 = fadd contract float %114, %125\l  store float %126, float addrspace(1)* %34, align 4, !tbaa !7\l  %127 = or i32 %42, 7\l  %128 = add nsw i32 %127, %30\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %1, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7\l  %132 = mul nsw i32 %127, %4\l  %133 = add nsw i32 %132, %23\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %2, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7\l  %137 = fmul contract float %131, %136\l  %138 = fadd contract float %126, %137\l  store float %138, float addrspace(1)* %34, align 4, !tbaa !7\l  %139 = add nuw nsw i32 %42, 8\l  %140 = add i32 %43, 8\l  %141 = icmp eq i32 %140, %39\l  br i1 %141, label %142, label %40, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5e023b0:s0 -> Node0x5e02120;
	Node0x5e023b0:s1 -> Node0x5e023b0;
	Node0x5e02120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%142:\l142:                                              \l  %143 = phi float [ %35, %29 ], [ %138, %40 ]\l  %144 = phi i32 [ 0, %29 ], [ %139, %40 ]\l  %145 = icmp eq i32 %36, 0\l  br i1 %145, label %164, label %146\l|{<s0>T|<s1>F}}"];
	Node0x5e02120:s0 -> Node0x5e01930;
	Node0x5e02120:s1 -> Node0x5e070c0;
	Node0x5e070c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%146:\l146:                                              \l  %147 = phi float [ %160, %146 ], [ %143, %142 ]\l  %148 = phi i32 [ %161, %146 ], [ %144, %142 ]\l  %149 = phi i32 [ %162, %146 ], [ 0, %142 ]\l  %150 = add nsw i32 %148, %30\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %1, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7\l  %154 = mul nsw i32 %148, %4\l  %155 = add nsw i32 %154, %23\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %2, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7\l  %159 = fmul contract float %153, %158\l  %160 = fadd contract float %147, %159\l  store float %160, float addrspace(1)* %34, align 4, !tbaa !7\l  %161 = add nuw nsw i32 %148, 1\l  %162 = add i32 %149, 1\l  %163 = icmp eq i32 %162, %36\l  br i1 %163, label %164, label %146, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5e070c0:s0 -> Node0x5e01930;
	Node0x5e070c0:s1 -> Node0x5e070c0;
	Node0x5e01930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%164:\l164:                                              \l  ret void\l}"];
}
