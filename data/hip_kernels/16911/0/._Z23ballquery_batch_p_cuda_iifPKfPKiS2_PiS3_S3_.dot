digraph "CFG for '_Z23ballquery_batch_p_cuda_iifPKfPKiS2_PiS3_S3_' function" {
	label="CFG for '_Z23ballquery_batch_p_cuda_iifPKfPKiS2_PiS3_S3_' function";

	Node0x627a9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%9:\l  %10 = alloca [1000 x i32], align 16, addrspace(5)\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %165\l|{<s0>T|<s1>F}}"];
	Node0x627a9d0:s0 -> Node0x627d080;
	Node0x627a9d0:s1 -> Node0x627d110;
	Node0x627d080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%21:\l21:                                               \l  %22 = shl nsw i32 %19, 1\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %23\l  %25 = bitcast [1000 x i32] addrspace(5)* %10 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 4000, i8 addrspace(5)* %25) #4\l  %26 = fmul contract float %2, %2\l  %27 = mul nsw i32 %19, 3\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %3, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %31 = add nsw i32 %27, 1\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %3, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %35 = add nsw i32 %27, 2\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %3, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %39 = sext i32 %19 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !11, !amdgpu.noclobber\l... !5\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %42\l  %44 = bitcast i32 addrspace(1)* %43 to \<2 x i32\> addrspace(1)*\l  %45 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %44, align 4, !tbaa !11\l  %46 = extractelement \<2 x i32\> %45, i64 0\l  %47 = extractelement \<2 x i32\> %45, i64 1\l  %48 = icmp slt i32 %46, %47\l  br i1 %48, label %49, label %84\l|{<s0>T|<s1>F}}"];
	Node0x627d080:s0 -> Node0x627fed0;
	Node0x627d080:s1 -> Node0x627ff60;
	Node0x627fed0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  %50 = phi i32 [ %79, %78 ], [ 0, %21 ]\l  %51 = phi i32 [ %81, %78 ], [ %46, %21 ]\l  %52 = mul nsw i32 %51, 3\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %3, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %56 = add nsw i32 %52, 1\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %3, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = add nsw i32 %52, 2\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %3, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = fsub contract float %30, %55\l  %65 = fmul contract float %64, %64\l  %66 = fsub contract float %34, %59\l  %67 = fmul contract float %66, %66\l  %68 = fadd contract float %65, %67\l  %69 = fsub contract float %38, %63\l  %70 = fmul contract float %69, %69\l  %71 = fadd contract float %68, %70\l  %72 = fcmp contract olt float %71, %26\l  br i1 %72, label %73, label %78\l|{<s0>T|<s1>F}}"];
	Node0x627fed0:s0 -> Node0x627e280;
	Node0x627fed0:s1 -> Node0x62800d0;
	Node0x627e280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%73:\l73:                                               \l  %74 = icmp slt i32 %50, 1000\l  br i1 %74, label %75, label %78\l|{<s0>T|<s1>F}}"];
	Node0x627e280:s0 -> Node0x6281370;
	Node0x627e280:s1 -> Node0x62800d0;
	Node0x6281370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%75:\l75:                                               \l  %76 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %50\l  store i32 %51, i32 addrspace(5)* %76, align 4, !tbaa !11\l  %77 = add nsw i32 %50, 1\l  br label %78\l}"];
	Node0x6281370 -> Node0x62800d0;
	Node0x62800d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = phi i32 [ %50, %73 ], [ %77, %75 ], [ %50, %49 ]\l  %80 = phi i1 [ false, %73 ], [ true, %75 ], [ true, %49 ]\l  %81 = add nsw i32 %51, 1\l  %82 = icmp slt i32 %81, %47\l  %83 = select i1 %80, i1 %82, i1 false\l  br i1 %83, label %49, label %84, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x62800d0:s0 -> Node0x627fed0;
	Node0x62800d0:s1 -> Node0x627ff60;
	Node0x627ff60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%84:\l84:                                               \l  %85 = phi i32 [ 0, %21 ], [ %79, %78 ]\l  %86 = atomicrmw add i32 addrspace(1)* %8, i32 %85 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  store i32 %86, i32 addrspace(1)* %24, align 4, !tbaa !11\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 1\l  store i32 %85, i32 addrspace(1)* %87, align 4, !tbaa !11\l  %88 = mul nsw i32 %1, %0\l  %89 = icmp sgt i32 %88, %86\l  br i1 %89, label %90, label %164\l|{<s0>T|<s1>F}}"];
	Node0x627ff60:s0 -> Node0x6281fe0;
	Node0x627ff60:s1 -> Node0x6282030;
	Node0x6281fe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%90:\l90:                                               \l  %91 = sext i32 %86 to i64\l  %92 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %91\l  %93 = add i32 %86, %85\l  %94 = icmp slt i32 %93, %88\l  %95 = sub nsw i32 %88, %86\l  %96 = select i1 %94, i32 %85, i32 %95\l  %97 = icmp sgt i32 %96, 0\l  br i1 %97, label %98, label %164\l|{<s0>T|<s1>F}}"];
	Node0x6281fe0:s0 -> Node0x6282530;
	Node0x6281fe0:s1 -> Node0x6282030;
	Node0x6282530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%98:\l98:                                               \l  %99 = tail call i32 @llvm.smin.i32(i32 %88, i32 %93)\l  %100 = xor i32 %86, -1\l  %101 = add i32 %99, %100\l  %102 = and i32 %96, 7\l  %103 = icmp ult i32 %101, 7\l  br i1 %103, label %151, label %104\l|{<s0>T|<s1>F}}"];
	Node0x6282530:s0 -> Node0x6282a70;
	Node0x6282530:s1 -> Node0x6282b00;
	Node0x6282b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%104:\l104:                                              \l  %105 = and i32 %96, -8\l  br label %106\l}"];
	Node0x6282b00 -> Node0x6282d00;
	Node0x6282d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%106:\l106:                                              \l  %107 = phi i32 [ 0, %104 ], [ %148, %106 ]\l  %108 = phi i32 [ 0, %104 ], [ %149, %106 ]\l  %109 = zext i32 %107 to i64\l  %110 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %107\l  %111 = load i32, i32 addrspace(5)* %110, align 16, !tbaa !11\l  %112 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %109\l  store i32 %111, i32 addrspace(1)* %112, align 4, !tbaa !11\l  %113 = or i32 %107, 1\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %113\l  %116 = load i32, i32 addrspace(5)* %115, align 4, !tbaa !11\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %114\l  store i32 %116, i32 addrspace(1)* %117, align 4, !tbaa !11\l  %118 = or i32 %107, 2\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %118\l  %121 = load i32, i32 addrspace(5)* %120, align 8, !tbaa !11\l  %122 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %119\l  store i32 %121, i32 addrspace(1)* %122, align 4, !tbaa !11\l  %123 = or i32 %107, 3\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %123\l  %126 = load i32, i32 addrspace(5)* %125, align 4, !tbaa !11\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %124\l  store i32 %126, i32 addrspace(1)* %127, align 4, !tbaa !11\l  %128 = or i32 %107, 4\l  %129 = zext i32 %128 to i64\l  %130 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %128\l  %131 = load i32, i32 addrspace(5)* %130, align 16, !tbaa !11\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %129\l  store i32 %131, i32 addrspace(1)* %132, align 4, !tbaa !11\l  %133 = or i32 %107, 5\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %133\l  %136 = load i32, i32 addrspace(5)* %135, align 4, !tbaa !11\l  %137 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %134\l  store i32 %136, i32 addrspace(1)* %137, align 4, !tbaa !11\l  %138 = or i32 %107, 6\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %138\l  %141 = load i32, i32 addrspace(5)* %140, align 8, !tbaa !11\l  %142 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %139\l  store i32 %141, i32 addrspace(1)* %142, align 4, !tbaa !11\l  %143 = or i32 %107, 7\l  %144 = zext i32 %143 to i64\l  %145 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %143\l  %146 = load i32, i32 addrspace(5)* %145, align 4, !tbaa !11\l  %147 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %144\l  store i32 %146, i32 addrspace(1)* %147, align 4, !tbaa !11\l  %148 = add nuw nsw i32 %107, 8\l  %149 = add i32 %108, 8\l  %150 = icmp eq i32 %149, %105\l  br i1 %150, label %151, label %106, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x6282d00:s0 -> Node0x6282a70;
	Node0x6282d00:s1 -> Node0x6282d00;
	Node0x6282a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%151:\l151:                                              \l  %152 = phi i32 [ 0, %98 ], [ %148, %106 ]\l  %153 = icmp eq i32 %102, 0\l  br i1 %153, label %164, label %154\l|{<s0>T|<s1>F}}"];
	Node0x6282a70:s0 -> Node0x6282030;
	Node0x6282a70:s1 -> Node0x6285390;
	Node0x6285390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%154:\l154:                                              \l  %155 = phi i32 [ %161, %154 ], [ %152, %151 ]\l  %156 = phi i32 [ %162, %154 ], [ 0, %151 ]\l  %157 = zext i32 %155 to i64\l  %158 = getelementptr inbounds [1000 x i32], [1000 x i32] addrspace(5)* %10,\l... i32 0, i32 %155\l  %159 = load i32, i32 addrspace(5)* %158, align 4, !tbaa !11\l  %160 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %157\l  store i32 %159, i32 addrspace(1)* %160, align 4, !tbaa !11\l  %161 = add nuw nsw i32 %155, 1\l  %162 = add i32 %156, 1\l  %163 = icmp eq i32 %162, %102\l  br i1 %163, label %164, label %154, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x6285390:s0 -> Node0x6282030;
	Node0x6285390:s1 -> Node0x6285390;
	Node0x6282030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%164:\l164:                                              \l  call void @llvm.lifetime.end.p5i8(i64 4000, i8 addrspace(5)* %25) #4\l  br label %165\l}"];
	Node0x6282030 -> Node0x627d110;
	Node0x627d110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%165:\l165:                                              \l  ret void\l}"];
}
