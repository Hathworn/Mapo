digraph "CFG for '_Z15cuda_neural_netPfiiiiiifS_S_' function" {
	label="CFG for '_Z15cuda_neural_netPfiiiiiifS_S_' function";

	Node0x5d00590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %5\l  %13 = mul nsw i32 %3, %2\l  %14 = add nsw i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %16 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @buffer,\l... i32 0, i32 %15\l  %17 = icmp sgt i32 %3, 0\l  br i1 %17, label %18, label %48\l|{<s0>T|<s1>F}}"];
	Node0x5d00590:s0 -> Node0x5d025b0;
	Node0x5d00590:s1 -> Node0x5d02640;
	Node0x5d025b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%18:\l18:                                               \l  %19 = mul i32 %11, %3\l  %20 = mul i32 %15, %3\l  %21 = add i32 %12, %20\l  %22 = and i32 %3, 7\l  %23 = icmp ult i32 %3, 8\l  br i1 %23, label %26, label %24\l|{<s0>T|<s1>F}}"];
	Node0x5d025b0:s0 -> Node0x5d02ab0;
	Node0x5d025b0:s1 -> Node0x5d02b00;
	Node0x5d02b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%24:\l24:                                               \l  %25 = and i32 %3, -8\l  br label %77\l}"];
	Node0x5d02b00 -> Node0x5d02d00;
	Node0x5d02ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%26:\l26:                                               \l  %27 = phi float [ undef, %18 ], [ %167, %77 ]\l  %28 = phi float [ 0.000000e+00, %18 ], [ %167, %77 ]\l  %29 = phi i32 [ 0, %18 ], [ %168, %77 ]\l  %30 = icmp eq i32 %22, 0\l  br i1 %30, label %48, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5d02ab0:s0 -> Node0x5d02640;
	Node0x5d02ab0:s1 -> Node0x5d03f70;
	Node0x5d03f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%31:\l31:                                               \l  %32 = phi float [ %44, %31 ], [ %28, %26 ]\l  %33 = phi i32 [ %45, %31 ], [ %29, %26 ]\l  %34 = phi i32 [ %46, %31 ], [ 0, %26 ]\l  %35 = add i32 %33, %19\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %8, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %39 = add i32 %21, %33\l  %40 = zext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %43 = fmul contract float %38, %42\l  %44 = fadd contract float %32, %43\l  %45 = add nuw nsw i32 %33, 1\l  %46 = add i32 %34, 1\l  %47 = icmp eq i32 %46, %22\l  br i1 %47, label %48, label %31, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5d03f70:s0 -> Node0x5d02640;
	Node0x5d03f70:s1 -> Node0x5d03f70;
	Node0x5d02640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%48:\l48:                                               \l  %49 = phi float [ 0.000000e+00, %10 ], [ %27, %26 ], [ %44, %31 ]\l  %50 = fneg contract float %49\l  %51 = fdiv contract float %50, %7\l  %52 = fmul float %51, 0x3FF7154760000000\l  %53 = tail call float @llvm.rint.f32(float %52)\l  %54 = fcmp ogt float %51, 0x40562E4300000000\l  %55 = fcmp olt float %51, 0xC059D1DA00000000\l  %56 = fneg float %52\l  %57 = tail call float @llvm.fma.f32(float %51, float 0x3FF7154760000000,\l... float %56)\l  %58 = tail call float @llvm.fma.f32(float %51, float 0x3E54AE0BE0000000,\l... float %57)\l  %59 = fsub float %52, %53\l  %60 = fadd float %58, %59\l  %61 = tail call float @llvm.exp2.f32(float %60)\l  %62 = fptosi float %53 to i32\l  %63 = tail call float @llvm.amdgcn.ldexp.f32(float %61, i32 %62)\l  %64 = select i1 %55, float 0.000000e+00, float %63\l  %65 = select i1 %54, float 0x7FF0000000000000, float %64\l  %66 = fpext float %65 to double\l  %67 = fadd contract double %66, 1.000000e+00\l  %68 = fdiv contract double 1.000000e+00, %67\l  %69 = fptrunc double %68 to float\l  store float %69, float addrspace(3)* %16, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %70 = icmp sgt i32 %6, 0\l  br i1 %70, label %71, label %178\l|{<s0>T|<s1>F}}"];
	Node0x5d02640:s0 -> Node0x5d07690;
	Node0x5d02640:s1 -> Node0x5d07720;
	Node0x5d07690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%71:\l71:                                               \l  %72 = icmp sgt i32 %2, 0\l  %73 = and i32 %2, 7\l  %74 = icmp ult i32 %2, 8\l  %75 = and i32 %2, -8\l  %76 = icmp eq i32 %73, 0\l  br label %171\l}"];
	Node0x5d07690 -> Node0x5d07b30;
	Node0x5d02d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%77:\l77:                                               \l  %78 = phi float [ 0.000000e+00, %24 ], [ %167, %77 ]\l  %79 = phi i32 [ 0, %24 ], [ %168, %77 ]\l  %80 = phi i32 [ 0, %24 ], [ %169, %77 ]\l  %81 = add i32 %79, %19\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %8, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %85 = add i32 %21, %79\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %89 = fmul contract float %84, %88\l  %90 = fadd contract float %78, %89\l  %91 = or i32 %79, 1\l  %92 = add i32 %91, %19\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %8, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %96 = add i32 %21, %91\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %100 = fmul contract float %95, %99\l  %101 = fadd contract float %90, %100\l  %102 = or i32 %79, 2\l  %103 = add i32 %102, %19\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %8, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %107 = add i32 %21, %102\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %111 = fmul contract float %106, %110\l  %112 = fadd contract float %101, %111\l  %113 = or i32 %79, 3\l  %114 = add i32 %113, %19\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %8, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %118 = add i32 %21, %113\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %122 = fmul contract float %117, %121\l  %123 = fadd contract float %112, %122\l  %124 = or i32 %79, 4\l  %125 = add i32 %124, %19\l  %126 = zext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %8, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %129 = add i32 %21, %124\l  %130 = zext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %133 = fmul contract float %128, %132\l  %134 = fadd contract float %123, %133\l  %135 = or i32 %79, 5\l  %136 = add i32 %135, %19\l  %137 = zext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %8, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %140 = add i32 %21, %135\l  %141 = zext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %144 = fmul contract float %139, %143\l  %145 = fadd contract float %134, %144\l  %146 = or i32 %79, 6\l  %147 = add i32 %146, %19\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %8, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %151 = add i32 %21, %146\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %0, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %155 = fmul contract float %150, %154\l  %156 = fadd contract float %145, %155\l  %157 = or i32 %79, 7\l  %158 = add i32 %157, %19\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %8, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %162 = add i32 %21, %157\l  %163 = zext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %0, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %166 = fmul contract float %161, %165\l  %167 = fadd contract float %156, %166\l  %168 = add nuw nsw i32 %79, 8\l  %169 = add i32 %80, 8\l  %170 = icmp eq i32 %169, %25\l  br i1 %170, label %26, label %77, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5d02d00:s0 -> Node0x5d02ab0;
	Node0x5d02d00:s1 -> Node0x5d02d00;
	Node0x5d07b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%171:\l171:                                              \l  %172 = phi i32 [ 0, %71 ], [ %232, %210 ]\l  br i1 %72, label %173, label %210\l|{<s0>T|<s1>F}}"];
	Node0x5d07b30:s0 -> Node0x5d0b910;
	Node0x5d07b30:s1 -> Node0x5d0b810;
	Node0x5d0b910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%173:\l173:                                              \l  %174 = mul i32 %172, %2\l  %175 = add i32 %174, %15\l  %176 = mul i32 %175, %2\l  %177 = add i32 %176, %14\l  br i1 %74, label %191, label %234\l|{<s0>T|<s1>F}}"];
	Node0x5d0b910:s0 -> Node0x5d0bc90;
	Node0x5d0b910:s1 -> Node0x5d0bce0;
	Node0x5d07720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%178:\l178:                                              \l  %179 = icmp ult i32 %15, %4\l  br i1 %179, label %180, label %436\l|{<s0>T|<s1>F}}"];
	Node0x5d07720:s0 -> Node0x5d0beb0;
	Node0x5d07720:s1 -> Node0x5d0bf00;
	Node0x5d0beb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%180:\l180:                                              \l  %181 = icmp sgt i32 %2, 0\l  br i1 %181, label %182, label %332\l|{<s0>T|<s1>F}}"];
	Node0x5d0beb0:s0 -> Node0x5d0c0d0;
	Node0x5d0beb0:s1 -> Node0x5d0c120;
	Node0x5d0c0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%182:\l182:                                              \l  %183 = mul i32 %6, %2\l  %184 = add i32 %183, %15\l  %185 = mul i32 %184, %2\l  %186 = add i32 %185, %14\l  %187 = and i32 %2, 7\l  %188 = icmp ult i32 %2, 8\l  br i1 %188, label %312, label %189\l|{<s0>T|<s1>F}}"];
	Node0x5d0c0d0:s0 -> Node0x5d0c5c0;
	Node0x5d0c0d0:s1 -> Node0x5d0c610;
	Node0x5d0c610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%189:\l189:                                              \l  %190 = and i32 %2, -8\l  br label %358\l}"];
	Node0x5d0c610 -> Node0x5d0c7e0;
	Node0x5d0bc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%191:\l191:                                              \l  %192 = phi float [ undef, %173 ], [ %308, %234 ]\l  %193 = phi i32 [ 0, %173 ], [ %309, %234 ]\l  %194 = phi float [ 0.000000e+00, %173 ], [ %308, %234 ]\l  br i1 %76, label %210, label %195\l|{<s0>T|<s1>F}}"];
	Node0x5d0bc90:s0 -> Node0x5d0b810;
	Node0x5d0bc90:s1 -> Node0x5d0caf0;
	Node0x5d0caf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%195:\l195:                                              \l  %196 = phi i32 [ %207, %195 ], [ %193, %191 ]\l  %197 = phi float [ %206, %195 ], [ %194, %191 ]\l  %198 = phi i32 [ %208, %195 ], [ 0, %191 ]\l  %199 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %196\l  %200 = load float, float addrspace(3)* %199, align 4, !tbaa !5\l  %201 = add i32 %177, %196\l  %202 = zext i32 %201 to i64\l  %203 = getelementptr inbounds float, float addrspace(1)* %0, i64 %202\l  %204 = load float, float addrspace(1)* %203, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %205 = fmul contract float %200, %204\l  %206 = fadd contract float %197, %205\l  %207 = add nuw nsw i32 %196, 1\l  %208 = add i32 %198, 1\l  %209 = icmp eq i32 %208, %73\l  br i1 %209, label %210, label %195, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5d0caf0:s0 -> Node0x5d0b810;
	Node0x5d0caf0:s1 -> Node0x5d0caf0;
	Node0x5d0b810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%210:\l210:                                              \l  %211 = phi float [ 0.000000e+00, %171 ], [ %192, %191 ], [ %206, %195 ]\l  %212 = fneg contract float %211\l  %213 = fdiv contract float %212, %7\l  %214 = fmul float %213, 0x3FF7154760000000\l  %215 = tail call float @llvm.rint.f32(float %214)\l  %216 = fcmp ogt float %213, 0x40562E4300000000\l  %217 = fcmp olt float %213, 0xC059D1DA00000000\l  %218 = fneg float %214\l  %219 = tail call float @llvm.fma.f32(float %213, float 0x3FF7154760000000,\l... float %218)\l  %220 = tail call float @llvm.fma.f32(float %213, float 0x3E54AE0BE0000000,\l... float %219)\l  %221 = fsub float %214, %215\l  %222 = fadd float %220, %221\l  %223 = tail call float @llvm.exp2.f32(float %222)\l  %224 = fptosi float %215 to i32\l  %225 = tail call float @llvm.amdgcn.ldexp.f32(float %223, i32 %224)\l  %226 = select i1 %217, float 0.000000e+00, float %225\l  %227 = select i1 %216, float 0x7FF0000000000000, float %226\l  %228 = fpext float %227 to double\l  %229 = fadd contract double %228, 1.000000e+00\l  %230 = fdiv contract double 1.000000e+00, %229\l  %231 = fptrunc double %230 to float\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  store float %231, float addrspace(3)* %16, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %232 = add nuw nsw i32 %172, 1\l  %233 = icmp eq i32 %232, %6\l  br i1 %233, label %178, label %171, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5d0b810:s0 -> Node0x5d07720;
	Node0x5d0b810:s1 -> Node0x5d07b30;
	Node0x5d0bce0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%234:\l234:                                              \l  %235 = phi i32 [ %309, %234 ], [ 0, %173 ]\l  %236 = phi float [ %308, %234 ], [ 0.000000e+00, %173 ]\l  %237 = phi i32 [ %310, %234 ], [ 0, %173 ]\l  %238 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %235\l  %239 = load float, float addrspace(3)* %238, align 4, !tbaa !5\l  %240 = add i32 %177, %235\l  %241 = zext i32 %240 to i64\l  %242 = getelementptr inbounds float, float addrspace(1)* %0, i64 %241\l  %243 = load float, float addrspace(1)* %242, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %244 = fmul contract float %239, %243\l  %245 = fadd contract float %236, %244\l  %246 = or i32 %235, 1\l  %247 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %246\l  %248 = load float, float addrspace(3)* %247, align 4, !tbaa !5\l  %249 = add i32 %177, %246\l  %250 = zext i32 %249 to i64\l  %251 = getelementptr inbounds float, float addrspace(1)* %0, i64 %250\l  %252 = load float, float addrspace(1)* %251, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %253 = fmul contract float %248, %252\l  %254 = fadd contract float %245, %253\l  %255 = or i32 %235, 2\l  %256 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %255\l  %257 = load float, float addrspace(3)* %256, align 4, !tbaa !5\l  %258 = add i32 %177, %255\l  %259 = zext i32 %258 to i64\l  %260 = getelementptr inbounds float, float addrspace(1)* %0, i64 %259\l  %261 = load float, float addrspace(1)* %260, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %262 = fmul contract float %257, %261\l  %263 = fadd contract float %254, %262\l  %264 = or i32 %235, 3\l  %265 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %264\l  %266 = load float, float addrspace(3)* %265, align 4, !tbaa !5\l  %267 = add i32 %177, %264\l  %268 = zext i32 %267 to i64\l  %269 = getelementptr inbounds float, float addrspace(1)* %0, i64 %268\l  %270 = load float, float addrspace(1)* %269, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %271 = fmul contract float %266, %270\l  %272 = fadd contract float %263, %271\l  %273 = or i32 %235, 4\l  %274 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %273\l  %275 = load float, float addrspace(3)* %274, align 4, !tbaa !5\l  %276 = add i32 %177, %273\l  %277 = zext i32 %276 to i64\l  %278 = getelementptr inbounds float, float addrspace(1)* %0, i64 %277\l  %279 = load float, float addrspace(1)* %278, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %280 = fmul contract float %275, %279\l  %281 = fadd contract float %272, %280\l  %282 = or i32 %235, 5\l  %283 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %282\l  %284 = load float, float addrspace(3)* %283, align 4, !tbaa !5\l  %285 = add i32 %177, %282\l  %286 = zext i32 %285 to i64\l  %287 = getelementptr inbounds float, float addrspace(1)* %0, i64 %286\l  %288 = load float, float addrspace(1)* %287, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %289 = fmul contract float %284, %288\l  %290 = fadd contract float %281, %289\l  %291 = or i32 %235, 6\l  %292 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %291\l  %293 = load float, float addrspace(3)* %292, align 4, !tbaa !5\l  %294 = add i32 %177, %291\l  %295 = zext i32 %294 to i64\l  %296 = getelementptr inbounds float, float addrspace(1)* %0, i64 %295\l  %297 = load float, float addrspace(1)* %296, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %298 = fmul contract float %293, %297\l  %299 = fadd contract float %290, %298\l  %300 = or i32 %235, 7\l  %301 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %300\l  %302 = load float, float addrspace(3)* %301, align 4, !tbaa !5\l  %303 = add i32 %177, %300\l  %304 = zext i32 %303 to i64\l  %305 = getelementptr inbounds float, float addrspace(1)* %0, i64 %304\l  %306 = load float, float addrspace(1)* %305, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %307 = fmul contract float %302, %306\l  %308 = fadd contract float %299, %307\l  %309 = add nuw nsw i32 %235, 8\l  %310 = add i32 %237, 8\l  %311 = icmp eq i32 %310, %75\l  br i1 %311, label %191, label %234, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5d0bce0:s0 -> Node0x5d0bc90;
	Node0x5d0bce0:s1 -> Node0x5d0bce0;
	Node0x5d0c5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%312:\l312:                                              \l  %313 = phi float [ undef, %182 ], [ %432, %358 ]\l  %314 = phi i32 [ 0, %182 ], [ %433, %358 ]\l  %315 = phi float [ 0.000000e+00, %182 ], [ %432, %358 ]\l  %316 = icmp eq i32 %187, 0\l  br i1 %316, label %332, label %317\l|{<s0>T|<s1>F}}"];
	Node0x5d0c5c0:s0 -> Node0x5d0c120;
	Node0x5d0c5c0:s1 -> Node0x5d12420;
	Node0x5d12420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%317:\l317:                                              \l  %318 = phi i32 [ %329, %317 ], [ %314, %312 ]\l  %319 = phi float [ %328, %317 ], [ %315, %312 ]\l  %320 = phi i32 [ %330, %317 ], [ 0, %312 ]\l  %321 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %318\l  %322 = load float, float addrspace(3)* %321, align 4, !tbaa !5\l  %323 = add i32 %186, %318\l  %324 = zext i32 %323 to i64\l  %325 = getelementptr inbounds float, float addrspace(1)* %0, i64 %324\l  %326 = load float, float addrspace(1)* %325, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %327 = fmul contract float %322, %326\l  %328 = fadd contract float %319, %327\l  %329 = add nuw nsw i32 %318, 1\l  %330 = add i32 %320, 1\l  %331 = icmp eq i32 %330, %187\l  br i1 %331, label %332, label %317, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5d12420:s0 -> Node0x5d0c120;
	Node0x5d12420:s1 -> Node0x5d12420;
	Node0x5d0c120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%332:\l332:                                              \l  %333 = phi float [ 0.000000e+00, %180 ], [ %313, %312 ], [ %328, %317 ]\l  %334 = fneg contract float %333\l  %335 = fdiv contract float %334, %7\l  %336 = fmul float %335, 0x3FF7154760000000\l  %337 = tail call float @llvm.rint.f32(float %336)\l  %338 = fcmp ogt float %335, 0x40562E4300000000\l  %339 = fcmp olt float %335, 0xC059D1DA00000000\l  %340 = fneg float %336\l  %341 = tail call float @llvm.fma.f32(float %335, float 0x3FF7154760000000,\l... float %340)\l  %342 = tail call float @llvm.fma.f32(float %335, float 0x3E54AE0BE0000000,\l... float %341)\l  %343 = fsub float %336, %337\l  %344 = fadd float %342, %343\l  %345 = tail call float @llvm.exp2.f32(float %344)\l  %346 = fptosi float %337 to i32\l  %347 = tail call float @llvm.amdgcn.ldexp.f32(float %345, i32 %346)\l  %348 = select i1 %339, float 0.000000e+00, float %347\l  %349 = select i1 %338, float 0x7FF0000000000000, float %348\l  %350 = fpext float %349 to double\l  %351 = fadd contract double %350, 1.000000e+00\l  %352 = fdiv contract double 1.000000e+00, %351\l  %353 = fptrunc double %352 to float\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %354 = mul i32 %11, %4\l  %355 = add i32 %354, %15\l  %356 = zext i32 %355 to i64\l  %357 = getelementptr inbounds float, float addrspace(1)* %9, i64 %356\l  store float %353, float addrspace(1)* %357, align 4, !tbaa !5\l  br label %436\l}"];
	Node0x5d0c120 -> Node0x5d0bf00;
	Node0x5d0c7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%358:\l358:                                              \l  %359 = phi i32 [ 0, %189 ], [ %433, %358 ]\l  %360 = phi float [ 0.000000e+00, %189 ], [ %432, %358 ]\l  %361 = phi i32 [ 0, %189 ], [ %434, %358 ]\l  %362 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %359\l  %363 = load float, float addrspace(3)* %362, align 4, !tbaa !5\l  %364 = add i32 %186, %359\l  %365 = zext i32 %364 to i64\l  %366 = getelementptr inbounds float, float addrspace(1)* %0, i64 %365\l  %367 = load float, float addrspace(1)* %366, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %368 = fmul contract float %363, %367\l  %369 = fadd contract float %360, %368\l  %370 = or i32 %359, 1\l  %371 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %370\l  %372 = load float, float addrspace(3)* %371, align 4, !tbaa !5\l  %373 = add i32 %186, %370\l  %374 = zext i32 %373 to i64\l  %375 = getelementptr inbounds float, float addrspace(1)* %0, i64 %374\l  %376 = load float, float addrspace(1)* %375, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %377 = fmul contract float %372, %376\l  %378 = fadd contract float %369, %377\l  %379 = or i32 %359, 2\l  %380 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %379\l  %381 = load float, float addrspace(3)* %380, align 4, !tbaa !5\l  %382 = add i32 %186, %379\l  %383 = zext i32 %382 to i64\l  %384 = getelementptr inbounds float, float addrspace(1)* %0, i64 %383\l  %385 = load float, float addrspace(1)* %384, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %386 = fmul contract float %381, %385\l  %387 = fadd contract float %378, %386\l  %388 = or i32 %359, 3\l  %389 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %388\l  %390 = load float, float addrspace(3)* %389, align 4, !tbaa !5\l  %391 = add i32 %186, %388\l  %392 = zext i32 %391 to i64\l  %393 = getelementptr inbounds float, float addrspace(1)* %0, i64 %392\l  %394 = load float, float addrspace(1)* %393, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %395 = fmul contract float %390, %394\l  %396 = fadd contract float %387, %395\l  %397 = or i32 %359, 4\l  %398 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %397\l  %399 = load float, float addrspace(3)* %398, align 4, !tbaa !5\l  %400 = add i32 %186, %397\l  %401 = zext i32 %400 to i64\l  %402 = getelementptr inbounds float, float addrspace(1)* %0, i64 %401\l  %403 = load float, float addrspace(1)* %402, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %404 = fmul contract float %399, %403\l  %405 = fadd contract float %396, %404\l  %406 = or i32 %359, 5\l  %407 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %406\l  %408 = load float, float addrspace(3)* %407, align 4, !tbaa !5\l  %409 = add i32 %186, %406\l  %410 = zext i32 %409 to i64\l  %411 = getelementptr inbounds float, float addrspace(1)* %0, i64 %410\l  %412 = load float, float addrspace(1)* %411, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %413 = fmul contract float %408, %412\l  %414 = fadd contract float %405, %413\l  %415 = or i32 %359, 6\l  %416 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %415\l  %417 = load float, float addrspace(3)* %416, align 4, !tbaa !5\l  %418 = add i32 %186, %415\l  %419 = zext i32 %418 to i64\l  %420 = getelementptr inbounds float, float addrspace(1)* %0, i64 %419\l  %421 = load float, float addrspace(1)* %420, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %422 = fmul contract float %417, %421\l  %423 = fadd contract float %414, %422\l  %424 = or i32 %359, 7\l  %425 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @buffer, i32 0, i32 %424\l  %426 = load float, float addrspace(3)* %425, align 4, !tbaa !5\l  %427 = add i32 %186, %424\l  %428 = zext i32 %427 to i64\l  %429 = getelementptr inbounds float, float addrspace(1)* %0, i64 %428\l  %430 = load float, float addrspace(1)* %429, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %431 = fmul contract float %426, %430\l  %432 = fadd contract float %423, %431\l  %433 = add nuw nsw i32 %359, 8\l  %434 = add i32 %361, 8\l  %435 = icmp eq i32 %434, %190\l  br i1 %435, label %312, label %358, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5d0c7e0:s0 -> Node0x5d0c5c0;
	Node0x5d0c7e0:s1 -> Node0x5d0c7e0;
	Node0x5d0bf00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%436:\l436:                                              \l  ret void\l}"];
}
