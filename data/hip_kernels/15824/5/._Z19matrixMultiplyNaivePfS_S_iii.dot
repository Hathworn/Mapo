digraph "CFG for '_Z19matrixMultiplyNaivePfS_S_iii' function" {
	label="CFG for '_Z19matrixMultiplyNaivePfS_S_iii' function";

	Node0x47c3d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 2, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %8, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp slt i32 %15, %3\l  %25 = icmp slt i32 %23, %5\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %166\l|{<s0>T|<s1>F}}"];
	Node0x47c3d00:s0 -> Node0x47c77c0;
	Node0x47c3d00:s1 -> Node0x47c7850;
	Node0x47c77c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%27:\l27:                                               \l  %28 = icmp sgt i32 %4, 0\l  br i1 %28, label %29, label %160\l|{<s0>T|<s1>F}}"];
	Node0x47c77c0:s0 -> Node0x47c7a50;
	Node0x47c77c0:s1 -> Node0x47c7aa0;
	Node0x47c7a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %15, %4\l  %31 = and i32 %4, 7\l  %32 = icmp ult i32 %4, 8\l  br i1 %32, label %137, label %33\l|{<s0>T|<s1>F}}"];
	Node0x47c7a50:s0 -> Node0x47c5d60;
	Node0x47c7a50:s1 -> Node0x47c5db0;
	Node0x47c5db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %4, -8\l  br label %35\l}"];
	Node0x47c5db0 -> Node0x47c8140;
	Node0x47c8140 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%35:\l35:                                               \l  %36 = phi i32 [ 0, %33 ], [ %134, %35 ]\l  %37 = phi float [ 0.000000e+00, %33 ], [ %133, %35 ]\l  %38 = phi i32 [ 0, %33 ], [ %135, %35 ]\l  %39 = add nsw i32 %36, %30\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %43 = mul nsw i32 %36, %5\l  %44 = add nsw i32 %43, %23\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %48 = fmul contract float %42, %47\l  %49 = fadd contract float %37, %48\l  %50 = or i32 %36, 1\l  %51 = add nsw i32 %50, %30\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = mul nsw i32 %50, %5\l  %56 = add nsw i32 %55, %23\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fmul contract float %54, %59\l  %61 = fadd contract float %49, %60\l  %62 = or i32 %36, 2\l  %63 = add nsw i32 %62, %30\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = mul nsw i32 %62, %5\l  %68 = add nsw i32 %67, %23\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = fmul contract float %66, %71\l  %73 = fadd contract float %61, %72\l  %74 = or i32 %36, 3\l  %75 = add nsw i32 %74, %30\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = mul nsw i32 %74, %5\l  %80 = add nsw i32 %79, %23\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %84 = fmul contract float %78, %83\l  %85 = fadd contract float %73, %84\l  %86 = or i32 %36, 4\l  %87 = add nsw i32 %86, %30\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = mul nsw i32 %86, %5\l  %92 = add nsw i32 %91, %23\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = fmul contract float %90, %95\l  %97 = fadd contract float %85, %96\l  %98 = or i32 %36, 5\l  %99 = add nsw i32 %98, %30\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = mul nsw i32 %98, %5\l  %104 = add nsw i32 %103, %23\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = fmul contract float %102, %107\l  %109 = fadd contract float %97, %108\l  %110 = or i32 %36, 6\l  %111 = add nsw i32 %110, %30\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %115 = mul nsw i32 %110, %5\l  %116 = add nsw i32 %115, %23\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = fmul contract float %114, %119\l  %121 = fadd contract float %109, %120\l  %122 = or i32 %36, 7\l  %123 = add nsw i32 %122, %30\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = mul nsw i32 %122, %5\l  %128 = add nsw i32 %127, %23\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %1, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %132 = fmul contract float %126, %131\l  %133 = fadd contract float %121, %132\l  %134 = add nuw nsw i32 %36, 8\l  %135 = add i32 %38, 8\l  %136 = icmp eq i32 %135, %34\l  br i1 %136, label %137, label %35, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x47c8140:s0 -> Node0x47c5d60;
	Node0x47c8140:s1 -> Node0x47c8140;
	Node0x47c5d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%137:\l137:                                              \l  %138 = phi float [ undef, %29 ], [ %133, %35 ]\l  %139 = phi i32 [ 0, %29 ], [ %134, %35 ]\l  %140 = phi float [ 0.000000e+00, %29 ], [ %133, %35 ]\l  %141 = icmp eq i32 %31, 0\l  br i1 %141, label %160, label %142\l|{<s0>T|<s1>F}}"];
	Node0x47c5d60:s0 -> Node0x47c7aa0;
	Node0x47c5d60:s1 -> Node0x47cde60;
	Node0x47cde60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%142:\l142:                                              \l  %143 = phi i32 [ %157, %142 ], [ %139, %137 ]\l  %144 = phi float [ %156, %142 ], [ %140, %137 ]\l  %145 = phi i32 [ %158, %142 ], [ 0, %137 ]\l  %146 = add nsw i32 %143, %30\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %0, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %150 = mul nsw i32 %143, %5\l  %151 = add nsw i32 %150, %23\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %1, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %155 = fmul contract float %149, %154\l  %156 = fadd contract float %144, %155\l  %157 = add nuw nsw i32 %143, 1\l  %158 = add i32 %145, 1\l  %159 = icmp eq i32 %158, %31\l  br i1 %159, label %160, label %142, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x47cde60:s0 -> Node0x47c7aa0;
	Node0x47cde60:s1 -> Node0x47cde60;
	Node0x47c7aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%160:\l160:                                              \l  %161 = phi float [ 0.000000e+00, %27 ], [ %138, %137 ], [ %156, %142 ]\l  %162 = mul nsw i32 %15, %5\l  %163 = add nsw i32 %162, %23\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %2, i64 %164\l  store float %161, float addrspace(1)* %165, align 4, !tbaa !7\l  br label %166\l}"];
	Node0x47c7aa0 -> Node0x47c7850;
	Node0x47c7850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%166:\l166:                                              \l  ret void\l}"];
}
