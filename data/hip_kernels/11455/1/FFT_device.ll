; ModuleID = '../data/hip_kernels/11455/1/main.cu'
source_filename = "../data/hip_kernels/11455/1/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z3FFTPfS_S_S_(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture writeonly %2, float addrspace(1)* nocapture writeonly %3) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4
  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*
  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6
  %11 = zext i16 %10 to i32
  %12 = mul i32 %6, %11
  %13 = add i32 %12, %5
  %14 = sitofp i32 %13 to double
  %15 = fmul contract double %14, 6.280000e+00
  br label %20

16:                                               ; preds = %1135
  %17 = sext i32 %13 to i64
  %18 = getelementptr inbounds float, float addrspace(1)* %2, i64 %17
  store float %900, float addrspace(1)* %18, align 4, !tbaa !7
  %19 = getelementptr inbounds float, float addrspace(1)* %3, i64 %17
  store float %1182, float addrspace(1)* %19, align 4, !tbaa !7
  ret void

20:                                               ; preds = %4, %1135
  %21 = phi i32 [ 0, %4 ], [ %1183, %1135 ]
  %22 = phi float [ 0.000000e+00, %4 ], [ %1182, %1135 ]
  %23 = phi float [ 0.000000e+00, %4 ], [ %900, %1135 ]
  %24 = zext i32 %21 to i64
  %25 = getelementptr inbounds float, float addrspace(1)* %0, i64 %24
  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !7, !amdgpu.noclobber !6
  %27 = fpext float %26 to double
  %28 = shl nuw nsw i32 %21, 1
  %29 = sitofp i32 %28 to double
  %30 = fmul contract double %29, 6.280000e+00
  %31 = fmul contract double %30, 0x3F10000000000000
  %32 = tail call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x41D0000000000000
  br i1 %33, label %34, label %53

34:                                               ; preds = %20
  %35 = fmul double %32, 0x3FE45F306DC9C883
  %36 = tail call double @llvm.rint.f64(double %35)
  %37 = tail call double @llvm.fma.f64(double %36, double 0xBFF921FB54442D18, double %32)
  %38 = tail call double @llvm.fma.f64(double %36, double 0xBC91A62633145C00, double %37)
  %39 = fmul double %36, 0x3C91A62633145C00
  %40 = fneg double %39
  %41 = tail call double @llvm.fma.f64(double %36, double 0x3C91A62633145C00, double %40)
  %42 = fsub double %37, %39
  %43 = fsub double %37, %42
  %44 = fsub double %43, %39
  %45 = fsub double %42, %38
  %46 = fadd double %45, %44
  %47 = fsub double %46, %41
  %48 = tail call double @llvm.fma.f64(double %36, double 0xB97B839A252049C0, double %47)
  %49 = fadd double %38, %48
  %50 = fsub double %49, %38
  %51 = fsub double %48, %50
  %52 = fptosi double %36 to i32
  br label %129

53:                                               ; preds = %20
  %54 = tail call double @llvm.amdgcn.trig.preop.f64(double %32, i32 0)
  %55 = tail call double @llvm.amdgcn.trig.preop.f64(double %32, i32 1)
  %56 = tail call double @llvm.amdgcn.trig.preop.f64(double %32, i32 2)
  %57 = fcmp oge double %32, 0x7B00000000000000
  %58 = tail call double @llvm.amdgcn.ldexp.f64(double %32, i32 -128)
  %59 = select i1 %57, double %58, double %32
  %60 = fmul double %56, %59
  %61 = fneg double %60
  %62 = tail call double @llvm.fma.f64(double %56, double %59, double %61)
  %63 = fmul double %55, %59
  %64 = fneg double %63
  %65 = tail call double @llvm.fma.f64(double %55, double %59, double %64)
  %66 = fmul double %54, %59
  %67 = fneg double %66
  %68 = tail call double @llvm.fma.f64(double %54, double %59, double %67)
  %69 = fadd double %63, %68
  %70 = fsub double %69, %63
  %71 = fsub double %69, %70
  %72 = fsub double %68, %70
  %73 = fsub double %63, %71
  %74 = fadd double %72, %73
  %75 = fadd double %60, %65
  %76 = fsub double %75, %60
  %77 = fsub double %75, %76
  %78 = fsub double %65, %76
  %79 = fsub double %60, %77
  %80 = fadd double %78, %79
  %81 = fadd double %75, %74
  %82 = fsub double %81, %75
  %83 = fsub double %81, %82
  %84 = fsub double %74, %82
  %85 = fsub double %75, %83
  %86 = fadd double %84, %85
  %87 = fadd double %80, %86
  %88 = fadd double %62, %87
  %89 = fadd double %66, %69
  %90 = fsub double %89, %66
  %91 = fsub double %69, %90
  %92 = fadd double %91, %81
  %93 = fsub double %92, %91
  %94 = fsub double %81, %93
  %95 = fadd double %94, %88
  %96 = tail call double @llvm.amdgcn.ldexp.f64(double %89, i32 -2)
  %97 = tail call double @llvm.amdgcn.fract.f64(double %96)
  %98 = tail call i1 @llvm.amdgcn.class.f64(double %96, i32 516)
  %99 = select i1 %98, double 0.000000e+00, double %97
  %100 = tail call double @llvm.amdgcn.ldexp.f64(double %99, i32 2)
  %101 = fadd double %100, %92
  %102 = fcmp olt double %101, 0.000000e+00
  %103 = select i1 %102, double 4.000000e+00, double 0.000000e+00
  %104 = fadd double %100, %103
  %105 = fadd double %92, %104
  %106 = fptosi double %105 to i32
  %107 = sitofp i32 %106 to double
  %108 = fsub double %104, %107
  %109 = fadd double %92, %108
  %110 = fsub double %109, %108
  %111 = fsub double %92, %110
  %112 = fadd double %95, %111
  %113 = fcmp oge double %109, 5.000000e-01
  %114 = zext i1 %113 to i32
  %115 = add nsw i32 %114, %106
  %116 = select i1 %113, double 1.000000e+00, double 0.000000e+00
  %117 = fsub double %109, %116
  %118 = fadd double %117, %112
  %119 = fsub double %118, %117
  %120 = fsub double %112, %119
  %121 = fmul double %118, 0x3FF921FB54442D18
  %122 = fneg double %121
  %123 = tail call double @llvm.fma.f64(double %118, double 0x3FF921FB54442D18, double %122)
  %124 = tail call double @llvm.fma.f64(double %118, double 0x3C91A62633145C07, double %123)
  %125 = tail call double @llvm.fma.f64(double %120, double 0x3FF921FB54442D18, double %124)
  %126 = fadd double %121, %125
  %127 = fsub double %126, %121
  %128 = fsub double %125, %127
  br label %129

129:                                              ; preds = %34, %53
  %130 = phi double [ %51, %34 ], [ %128, %53 ]
  %131 = phi double [ %49, %34 ], [ %126, %53 ]
  %132 = phi i32 [ %52, %34 ], [ %115, %53 ]
  %133 = fmul double %131, %131
  %134 = fmul double %133, 5.000000e-01
  %135 = fsub double 1.000000e+00, %134
  %136 = fsub double 1.000000e+00, %135
  %137 = fsub double %136, %134
  %138 = fmul double %133, %133
  %139 = tail call double @llvm.fma.f64(double %133, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %140 = tail call double @llvm.fma.f64(double %133, double %139, double 0xBE927E4FA17F65F6)
  %141 = tail call double @llvm.fma.f64(double %133, double %140, double 0x3EFA01A019F4EC90)
  %142 = tail call double @llvm.fma.f64(double %133, double %141, double 0xBF56C16C16C16967)
  %143 = tail call double @llvm.fma.f64(double %133, double %142, double 0x3FA5555555555555)
  %144 = fneg double %130
  %145 = tail call double @llvm.fma.f64(double %131, double %144, double %137)
  %146 = tail call double @llvm.fma.f64(double %138, double %143, double %145)
  %147 = fadd double %135, %146
  %148 = tail call double @llvm.fma.f64(double %133, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %149 = tail call double @llvm.fma.f64(double %133, double %148, double 0x3EC71DE3796CDE01)
  %150 = tail call double @llvm.fma.f64(double %133, double %149, double 0xBF2A01A019E83E5C)
  %151 = tail call double @llvm.fma.f64(double %133, double %150, double 0x3F81111111110BB3)
  %152 = fneg double %133
  %153 = fmul double %131, %152
  %154 = fmul double %130, 5.000000e-01
  %155 = tail call double @llvm.fma.f64(double %153, double %151, double %154)
  %156 = tail call double @llvm.fma.f64(double %133, double %155, double %144)
  %157 = tail call double @llvm.fma.f64(double %153, double 0xBFC5555555555555, double %156)
  %158 = fsub double %131, %157
  %159 = fneg double %158
  %160 = and i32 %132, 1
  %161 = icmp eq i32 %160, 0
  %162 = select i1 %161, double %147, double %159
  %163 = bitcast double %162 to <2 x i32>
  %164 = shl i32 %132, 30
  %165 = and i32 %164, -2147483648
  %166 = extractelement <2 x i32> %163, i64 1
  %167 = xor i32 %166, %165
  %168 = insertelement <2 x i32> %163, i32 %167, i64 1
  %169 = tail call i1 @llvm.amdgcn.class.f64(double %32, i32 504)
  %170 = select i1 %169, <2 x i32> %168, <2 x i32> <i32 0, i32 2146959360>
  %171 = bitcast <2 x i32> %170 to double
  %172 = fmul contract double %27, %171
  %173 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24
  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !7, !amdgpu.noclobber !6
  %175 = fpext float %174 to double
  %176 = fmul contract double %15, %29
  %177 = fmul contract double %176, 0x3F10000000000000
  %178 = tail call double @llvm.fabs.f64(double %177)
  %179 = fcmp olt double %178, 0x41D0000000000000
  br i1 %179, label %180, label %199

180:                                              ; preds = %129
  %181 = fmul double %178, 0x3FE45F306DC9C883
  %182 = tail call double @llvm.rint.f64(double %181)
  %183 = tail call double @llvm.fma.f64(double %182, double 0xBFF921FB54442D18, double %178)
  %184 = tail call double @llvm.fma.f64(double %182, double 0xBC91A62633145C00, double %183)
  %185 = fmul double %182, 0x3C91A62633145C00
  %186 = fneg double %185
  %187 = tail call double @llvm.fma.f64(double %182, double 0x3C91A62633145C00, double %186)
  %188 = fsub double %183, %185
  %189 = fsub double %183, %188
  %190 = fsub double %189, %185
  %191 = fsub double %188, %184
  %192 = fadd double %191, %190
  %193 = fsub double %192, %187
  %194 = tail call double @llvm.fma.f64(double %182, double 0xB97B839A252049C0, double %193)
  %195 = fadd double %184, %194
  %196 = fsub double %195, %184
  %197 = fsub double %194, %196
  %198 = fptosi double %182 to i32
  br label %275

199:                                              ; preds = %129
  %200 = tail call double @llvm.amdgcn.trig.preop.f64(double %178, i32 0)
  %201 = tail call double @llvm.amdgcn.trig.preop.f64(double %178, i32 1)
  %202 = tail call double @llvm.amdgcn.trig.preop.f64(double %178, i32 2)
  %203 = fcmp oge double %178, 0x7B00000000000000
  %204 = tail call double @llvm.amdgcn.ldexp.f64(double %178, i32 -128)
  %205 = select i1 %203, double %204, double %178
  %206 = fmul double %202, %205
  %207 = fneg double %206
  %208 = tail call double @llvm.fma.f64(double %202, double %205, double %207)
  %209 = fmul double %201, %205
  %210 = fneg double %209
  %211 = tail call double @llvm.fma.f64(double %201, double %205, double %210)
  %212 = fmul double %200, %205
  %213 = fneg double %212
  %214 = tail call double @llvm.fma.f64(double %200, double %205, double %213)
  %215 = fadd double %209, %214
  %216 = fsub double %215, %209
  %217 = fsub double %215, %216
  %218 = fsub double %214, %216
  %219 = fsub double %209, %217
  %220 = fadd double %218, %219
  %221 = fadd double %206, %211
  %222 = fsub double %221, %206
  %223 = fsub double %221, %222
  %224 = fsub double %211, %222
  %225 = fsub double %206, %223
  %226 = fadd double %224, %225
  %227 = fadd double %221, %220
  %228 = fsub double %227, %221
  %229 = fsub double %227, %228
  %230 = fsub double %220, %228
  %231 = fsub double %221, %229
  %232 = fadd double %230, %231
  %233 = fadd double %226, %232
  %234 = fadd double %208, %233
  %235 = fadd double %212, %215
  %236 = fsub double %235, %212
  %237 = fsub double %215, %236
  %238 = fadd double %237, %227
  %239 = fsub double %238, %237
  %240 = fsub double %227, %239
  %241 = fadd double %240, %234
  %242 = tail call double @llvm.amdgcn.ldexp.f64(double %235, i32 -2)
  %243 = tail call double @llvm.amdgcn.fract.f64(double %242)
  %244 = tail call i1 @llvm.amdgcn.class.f64(double %242, i32 516)
  %245 = select i1 %244, double 0.000000e+00, double %243
  %246 = tail call double @llvm.amdgcn.ldexp.f64(double %245, i32 2)
  %247 = fadd double %246, %238
  %248 = fcmp olt double %247, 0.000000e+00
  %249 = select i1 %248, double 4.000000e+00, double 0.000000e+00
  %250 = fadd double %246, %249
  %251 = fadd double %238, %250
  %252 = fptosi double %251 to i32
  %253 = sitofp i32 %252 to double
  %254 = fsub double %250, %253
  %255 = fadd double %238, %254
  %256 = fsub double %255, %254
  %257 = fsub double %238, %256
  %258 = fadd double %241, %257
  %259 = fcmp oge double %255, 5.000000e-01
  %260 = zext i1 %259 to i32
  %261 = add nsw i32 %260, %252
  %262 = select i1 %259, double 1.000000e+00, double 0.000000e+00
  %263 = fsub double %255, %262
  %264 = fadd double %263, %258
  %265 = fsub double %264, %263
  %266 = fsub double %258, %265
  %267 = fmul double %264, 0x3FF921FB54442D18
  %268 = fneg double %267
  %269 = tail call double @llvm.fma.f64(double %264, double 0x3FF921FB54442D18, double %268)
  %270 = tail call double @llvm.fma.f64(double %264, double 0x3C91A62633145C07, double %269)
  %271 = tail call double @llvm.fma.f64(double %266, double 0x3FF921FB54442D18, double %270)
  %272 = fadd double %267, %271
  %273 = fsub double %272, %267
  %274 = fsub double %271, %273
  br label %275

275:                                              ; preds = %180, %199
  %276 = phi double [ %197, %180 ], [ %274, %199 ]
  %277 = phi double [ %195, %180 ], [ %272, %199 ]
  %278 = phi i32 [ %198, %180 ], [ %261, %199 ]
  %279 = fmul double %277, %277
  %280 = fmul double %279, 5.000000e-01
  %281 = fsub double 1.000000e+00, %280
  %282 = fsub double 1.000000e+00, %281
  %283 = fsub double %282, %280
  %284 = fmul double %279, %279
  %285 = tail call double @llvm.fma.f64(double %279, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %286 = tail call double @llvm.fma.f64(double %279, double %285, double 0xBE927E4FA17F65F6)
  %287 = tail call double @llvm.fma.f64(double %279, double %286, double 0x3EFA01A019F4EC90)
  %288 = tail call double @llvm.fma.f64(double %279, double %287, double 0xBF56C16C16C16967)
  %289 = tail call double @llvm.fma.f64(double %279, double %288, double 0x3FA5555555555555)
  %290 = fneg double %276
  %291 = tail call double @llvm.fma.f64(double %277, double %290, double %283)
  %292 = tail call double @llvm.fma.f64(double %284, double %289, double %291)
  %293 = fadd double %281, %292
  %294 = tail call double @llvm.fma.f64(double %279, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %295 = tail call double @llvm.fma.f64(double %279, double %294, double 0x3EC71DE3796CDE01)
  %296 = tail call double @llvm.fma.f64(double %279, double %295, double 0xBF2A01A019E83E5C)
  %297 = tail call double @llvm.fma.f64(double %279, double %296, double 0x3F81111111110BB3)
  %298 = fneg double %279
  %299 = fmul double %277, %298
  %300 = fmul double %276, 5.000000e-01
  %301 = tail call double @llvm.fma.f64(double %299, double %297, double %300)
  %302 = tail call double @llvm.fma.f64(double %279, double %301, double %290)
  %303 = tail call double @llvm.fma.f64(double %299, double 0xBFC5555555555555, double %302)
  %304 = fsub double %277, %303
  %305 = and i32 %278, 1
  %306 = icmp eq i32 %305, 0
  %307 = select i1 %306, double %304, double %293
  %308 = bitcast double %307 to <2 x i32>
  %309 = shl i32 %278, 30
  %310 = bitcast double %177 to <2 x i32>
  %311 = extractelement <2 x i32> %310, i64 1
  %312 = xor i32 %309, %311
  %313 = and i32 %312, -2147483648
  %314 = extractelement <2 x i32> %308, i64 1
  %315 = xor i32 %314, %313
  %316 = insertelement <2 x i32> %308, i32 %315, i64 1
  %317 = tail call i1 @llvm.amdgcn.class.f64(double %178, i32 504)
  %318 = select i1 %317, <2 x i32> %316, <2 x i32> <i32 0, i32 2146959360>
  %319 = bitcast <2 x i32> %318 to double
  %320 = fmul contract double %175, %319
  %321 = fsub contract double %172, %320
  %322 = fpext float %23 to double
  %323 = fadd contract double %321, %322
  %324 = fptrunc double %323 to float
  br i1 %33, label %325, label %344

325:                                              ; preds = %275
  %326 = fmul double %32, 0x3FE45F306DC9C883
  %327 = tail call double @llvm.rint.f64(double %326)
  %328 = tail call double @llvm.fma.f64(double %327, double 0xBFF921FB54442D18, double %32)
  %329 = tail call double @llvm.fma.f64(double %327, double 0xBC91A62633145C00, double %328)
  %330 = fmul double %327, 0x3C91A62633145C00
  %331 = fneg double %330
  %332 = tail call double @llvm.fma.f64(double %327, double 0x3C91A62633145C00, double %331)
  %333 = fsub double %328, %330
  %334 = fsub double %328, %333
  %335 = fsub double %334, %330
  %336 = fsub double %333, %329
  %337 = fadd double %336, %335
  %338 = fsub double %337, %332
  %339 = tail call double @llvm.fma.f64(double %327, double 0xB97B839A252049C0, double %338)
  %340 = fadd double %329, %339
  %341 = fsub double %340, %329
  %342 = fsub double %339, %341
  %343 = fptosi double %327 to i32
  br label %420

344:                                              ; preds = %275
  %345 = tail call double @llvm.amdgcn.trig.preop.f64(double %32, i32 0)
  %346 = tail call double @llvm.amdgcn.trig.preop.f64(double %32, i32 1)
  %347 = tail call double @llvm.amdgcn.trig.preop.f64(double %32, i32 2)
  %348 = fcmp oge double %32, 0x7B00000000000000
  %349 = tail call double @llvm.amdgcn.ldexp.f64(double %32, i32 -128)
  %350 = select i1 %348, double %349, double %32
  %351 = fmul double %347, %350
  %352 = fneg double %351
  %353 = tail call double @llvm.fma.f64(double %347, double %350, double %352)
  %354 = fmul double %346, %350
  %355 = fneg double %354
  %356 = tail call double @llvm.fma.f64(double %346, double %350, double %355)
  %357 = fmul double %345, %350
  %358 = fneg double %357
  %359 = tail call double @llvm.fma.f64(double %345, double %350, double %358)
  %360 = fadd double %354, %359
  %361 = fsub double %360, %354
  %362 = fsub double %360, %361
  %363 = fsub double %359, %361
  %364 = fsub double %354, %362
  %365 = fadd double %363, %364
  %366 = fadd double %351, %356
  %367 = fsub double %366, %351
  %368 = fsub double %366, %367
  %369 = fsub double %356, %367
  %370 = fsub double %351, %368
  %371 = fadd double %369, %370
  %372 = fadd double %366, %365
  %373 = fsub double %372, %366
  %374 = fsub double %372, %373
  %375 = fsub double %365, %373
  %376 = fsub double %366, %374
  %377 = fadd double %375, %376
  %378 = fadd double %371, %377
  %379 = fadd double %353, %378
  %380 = fadd double %357, %360
  %381 = fsub double %380, %357
  %382 = fsub double %360, %381
  %383 = fadd double %382, %372
  %384 = fsub double %383, %382
  %385 = fsub double %372, %384
  %386 = fadd double %385, %379
  %387 = tail call double @llvm.amdgcn.ldexp.f64(double %380, i32 -2)
  %388 = tail call double @llvm.amdgcn.fract.f64(double %387)
  %389 = tail call i1 @llvm.amdgcn.class.f64(double %387, i32 516)
  %390 = select i1 %389, double 0.000000e+00, double %388
  %391 = tail call double @llvm.amdgcn.ldexp.f64(double %390, i32 2)
  %392 = fadd double %391, %383
  %393 = fcmp olt double %392, 0.000000e+00
  %394 = select i1 %393, double 4.000000e+00, double 0.000000e+00
  %395 = fadd double %391, %394
  %396 = fadd double %383, %395
  %397 = fptosi double %396 to i32
  %398 = sitofp i32 %397 to double
  %399 = fsub double %395, %398
  %400 = fadd double %383, %399
  %401 = fsub double %400, %399
  %402 = fsub double %383, %401
  %403 = fadd double %386, %402
  %404 = fcmp oge double %400, 5.000000e-01
  %405 = zext i1 %404 to i32
  %406 = add nsw i32 %405, %397
  %407 = select i1 %404, double 1.000000e+00, double 0.000000e+00
  %408 = fsub double %400, %407
  %409 = fadd double %408, %403
  %410 = fsub double %409, %408
  %411 = fsub double %403, %410
  %412 = fmul double %409, 0x3FF921FB54442D18
  %413 = fneg double %412
  %414 = tail call double @llvm.fma.f64(double %409, double 0x3FF921FB54442D18, double %413)
  %415 = tail call double @llvm.fma.f64(double %409, double 0x3C91A62633145C07, double %414)
  %416 = tail call double @llvm.fma.f64(double %411, double 0x3FF921FB54442D18, double %415)
  %417 = fadd double %412, %416
  %418 = fsub double %417, %412
  %419 = fsub double %416, %418
  br label %420

420:                                              ; preds = %325, %344
  %421 = phi double [ %342, %325 ], [ %419, %344 ]
  %422 = phi double [ %340, %325 ], [ %417, %344 ]
  %423 = phi i32 [ %343, %325 ], [ %406, %344 ]
  %424 = fmul double %422, %422
  %425 = fmul double %424, 5.000000e-01
  %426 = fsub double 1.000000e+00, %425
  %427 = fsub double 1.000000e+00, %426
  %428 = fsub double %427, %425
  %429 = fmul double %424, %424
  %430 = tail call double @llvm.fma.f64(double %424, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %431 = tail call double @llvm.fma.f64(double %424, double %430, double 0xBE927E4FA17F65F6)
  %432 = tail call double @llvm.fma.f64(double %424, double %431, double 0x3EFA01A019F4EC90)
  %433 = tail call double @llvm.fma.f64(double %424, double %432, double 0xBF56C16C16C16967)
  %434 = tail call double @llvm.fma.f64(double %424, double %433, double 0x3FA5555555555555)
  %435 = fneg double %421
  %436 = tail call double @llvm.fma.f64(double %422, double %435, double %428)
  %437 = tail call double @llvm.fma.f64(double %429, double %434, double %436)
  %438 = fadd double %426, %437
  %439 = tail call double @llvm.fma.f64(double %424, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %440 = tail call double @llvm.fma.f64(double %424, double %439, double 0x3EC71DE3796CDE01)
  %441 = tail call double @llvm.fma.f64(double %424, double %440, double 0xBF2A01A019E83E5C)
  %442 = tail call double @llvm.fma.f64(double %424, double %441, double 0x3F81111111110BB3)
  %443 = fneg double %424
  %444 = fmul double %422, %443
  %445 = fmul double %421, 5.000000e-01
  %446 = tail call double @llvm.fma.f64(double %444, double %442, double %445)
  %447 = tail call double @llvm.fma.f64(double %424, double %446, double %435)
  %448 = tail call double @llvm.fma.f64(double %444, double 0xBFC5555555555555, double %447)
  %449 = fsub double %422, %448
  %450 = and i32 %423, 1
  %451 = icmp eq i32 %450, 0
  %452 = select i1 %451, double %449, double %438
  %453 = bitcast double %452 to <2 x i32>
  %454 = shl i32 %423, 30
  %455 = bitcast double %31 to <2 x i32>
  %456 = extractelement <2 x i32> %455, i64 1
  %457 = xor i32 %454, %456
  %458 = and i32 %457, -2147483648
  %459 = extractelement <2 x i32> %453, i64 1
  %460 = xor i32 %459, %458
  %461 = insertelement <2 x i32> %453, i32 %460, i64 1
  %462 = select i1 %169, <2 x i32> %461, <2 x i32> <i32 0, i32 2146959360>
  %463 = bitcast <2 x i32> %462 to double
  br i1 %179, label %464, label %483

464:                                              ; preds = %420
  %465 = fmul double %178, 0x3FE45F306DC9C883
  %466 = tail call double @llvm.rint.f64(double %465)
  %467 = tail call double @llvm.fma.f64(double %466, double 0xBFF921FB54442D18, double %178)
  %468 = tail call double @llvm.fma.f64(double %466, double 0xBC91A62633145C00, double %467)
  %469 = fmul double %466, 0x3C91A62633145C00
  %470 = fneg double %469
  %471 = tail call double @llvm.fma.f64(double %466, double 0x3C91A62633145C00, double %470)
  %472 = fsub double %467, %469
  %473 = fsub double %467, %472
  %474 = fsub double %473, %469
  %475 = fsub double %472, %468
  %476 = fadd double %475, %474
  %477 = fsub double %476, %471
  %478 = tail call double @llvm.fma.f64(double %466, double 0xB97B839A252049C0, double %477)
  %479 = fadd double %468, %478
  %480 = fsub double %479, %468
  %481 = fsub double %478, %480
  %482 = fptosi double %466 to i32
  br label %559

483:                                              ; preds = %420
  %484 = tail call double @llvm.amdgcn.trig.preop.f64(double %178, i32 0)
  %485 = tail call double @llvm.amdgcn.trig.preop.f64(double %178, i32 1)
  %486 = tail call double @llvm.amdgcn.trig.preop.f64(double %178, i32 2)
  %487 = fcmp oge double %178, 0x7B00000000000000
  %488 = tail call double @llvm.amdgcn.ldexp.f64(double %178, i32 -128)
  %489 = select i1 %487, double %488, double %178
  %490 = fmul double %486, %489
  %491 = fneg double %490
  %492 = tail call double @llvm.fma.f64(double %486, double %489, double %491)
  %493 = fmul double %485, %489
  %494 = fneg double %493
  %495 = tail call double @llvm.fma.f64(double %485, double %489, double %494)
  %496 = fmul double %484, %489
  %497 = fneg double %496
  %498 = tail call double @llvm.fma.f64(double %484, double %489, double %497)
  %499 = fadd double %493, %498
  %500 = fsub double %499, %493
  %501 = fsub double %499, %500
  %502 = fsub double %498, %500
  %503 = fsub double %493, %501
  %504 = fadd double %502, %503
  %505 = fadd double %490, %495
  %506 = fsub double %505, %490
  %507 = fsub double %505, %506
  %508 = fsub double %495, %506
  %509 = fsub double %490, %507
  %510 = fadd double %508, %509
  %511 = fadd double %505, %504
  %512 = fsub double %511, %505
  %513 = fsub double %511, %512
  %514 = fsub double %504, %512
  %515 = fsub double %505, %513
  %516 = fadd double %514, %515
  %517 = fadd double %510, %516
  %518 = fadd double %492, %517
  %519 = fadd double %496, %499
  %520 = fsub double %519, %496
  %521 = fsub double %499, %520
  %522 = fadd double %521, %511
  %523 = fsub double %522, %521
  %524 = fsub double %511, %523
  %525 = fadd double %524, %518
  %526 = tail call double @llvm.amdgcn.ldexp.f64(double %519, i32 -2)
  %527 = tail call double @llvm.amdgcn.fract.f64(double %526)
  %528 = tail call i1 @llvm.amdgcn.class.f64(double %526, i32 516)
  %529 = select i1 %528, double 0.000000e+00, double %527
  %530 = tail call double @llvm.amdgcn.ldexp.f64(double %529, i32 2)
  %531 = fadd double %530, %522
  %532 = fcmp olt double %531, 0.000000e+00
  %533 = select i1 %532, double 4.000000e+00, double 0.000000e+00
  %534 = fadd double %530, %533
  %535 = fadd double %522, %534
  %536 = fptosi double %535 to i32
  %537 = sitofp i32 %536 to double
  %538 = fsub double %534, %537
  %539 = fadd double %522, %538
  %540 = fsub double %539, %538
  %541 = fsub double %522, %540
  %542 = fadd double %525, %541
  %543 = fcmp oge double %539, 5.000000e-01
  %544 = zext i1 %543 to i32
  %545 = add nsw i32 %544, %536
  %546 = select i1 %543, double 1.000000e+00, double 0.000000e+00
  %547 = fsub double %539, %546
  %548 = fadd double %547, %542
  %549 = fsub double %548, %547
  %550 = fsub double %542, %549
  %551 = fmul double %548, 0x3FF921FB54442D18
  %552 = fneg double %551
  %553 = tail call double @llvm.fma.f64(double %548, double 0x3FF921FB54442D18, double %552)
  %554 = tail call double @llvm.fma.f64(double %548, double 0x3C91A62633145C07, double %553)
  %555 = tail call double @llvm.fma.f64(double %550, double 0x3FF921FB54442D18, double %554)
  %556 = fadd double %551, %555
  %557 = fsub double %556, %551
  %558 = fsub double %555, %557
  br label %559

559:                                              ; preds = %464, %483
  %560 = phi double [ %481, %464 ], [ %558, %483 ]
  %561 = phi double [ %479, %464 ], [ %556, %483 ]
  %562 = phi i32 [ %482, %464 ], [ %545, %483 ]
  %563 = fmul double %561, %561
  %564 = fmul double %563, 5.000000e-01
  %565 = fsub double 1.000000e+00, %564
  %566 = fsub double 1.000000e+00, %565
  %567 = fsub double %566, %564
  %568 = fmul double %563, %563
  %569 = tail call double @llvm.fma.f64(double %563, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %570 = tail call double @llvm.fma.f64(double %563, double %569, double 0xBE927E4FA17F65F6)
  %571 = tail call double @llvm.fma.f64(double %563, double %570, double 0x3EFA01A019F4EC90)
  %572 = tail call double @llvm.fma.f64(double %563, double %571, double 0xBF56C16C16C16967)
  %573 = tail call double @llvm.fma.f64(double %563, double %572, double 0x3FA5555555555555)
  %574 = fneg double %560
  %575 = tail call double @llvm.fma.f64(double %561, double %574, double %567)
  %576 = tail call double @llvm.fma.f64(double %568, double %573, double %575)
  %577 = fadd double %565, %576
  %578 = tail call double @llvm.fma.f64(double %563, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %579 = tail call double @llvm.fma.f64(double %563, double %578, double 0x3EC71DE3796CDE01)
  %580 = tail call double @llvm.fma.f64(double %563, double %579, double 0xBF2A01A019E83E5C)
  %581 = tail call double @llvm.fma.f64(double %563, double %580, double 0x3F81111111110BB3)
  %582 = fneg double %563
  %583 = fmul double %561, %582
  %584 = fmul double %560, 5.000000e-01
  %585 = tail call double @llvm.fma.f64(double %583, double %581, double %584)
  %586 = tail call double @llvm.fma.f64(double %563, double %585, double %574)
  %587 = tail call double @llvm.fma.f64(double %583, double 0xBFC5555555555555, double %586)
  %588 = fsub double %561, %587
  %589 = fneg double %588
  %590 = and i32 %562, 1
  %591 = icmp eq i32 %590, 0
  %592 = select i1 %591, double %577, double %589
  %593 = bitcast double %592 to <2 x i32>
  %594 = shl i32 %562, 30
  %595 = and i32 %594, -2147483648
  %596 = extractelement <2 x i32> %593, i64 1
  %597 = xor i32 %596, %595
  %598 = insertelement <2 x i32> %593, i32 %597, i64 1
  %599 = select i1 %317, <2 x i32> %598, <2 x i32> <i32 0, i32 2146959360>
  %600 = bitcast <2 x i32> %599 to double
  %601 = fmul contract double %175, %600
  %602 = fmul contract double %27, %463
  %603 = fsub contract double %601, %602
  %604 = fpext float %22 to double
  %605 = fadd contract double %603, %604
  %606 = fptrunc double %605 to float
  %607 = add nuw nsw i32 %28, 1
  %608 = sitofp i32 %607 to double
  %609 = fmul contract double %608, 6.280000e+00
  %610 = fmul contract double %609, 0x3F10000000000000
  %611 = tail call double @llvm.fabs.f64(double %610)
  %612 = fcmp olt double %611, 0x41D0000000000000
  br i1 %612, label %613, label %632

613:                                              ; preds = %559
  %614 = fmul double %611, 0x3FE45F306DC9C883
  %615 = tail call double @llvm.rint.f64(double %614)
  %616 = tail call double @llvm.fma.f64(double %615, double 0xBFF921FB54442D18, double %611)
  %617 = tail call double @llvm.fma.f64(double %615, double 0xBC91A62633145C00, double %616)
  %618 = fmul double %615, 0x3C91A62633145C00
  %619 = fneg double %618
  %620 = tail call double @llvm.fma.f64(double %615, double 0x3C91A62633145C00, double %619)
  %621 = fsub double %616, %618
  %622 = fsub double %616, %621
  %623 = fsub double %622, %618
  %624 = fsub double %621, %617
  %625 = fadd double %624, %623
  %626 = fsub double %625, %620
  %627 = tail call double @llvm.fma.f64(double %615, double 0xB97B839A252049C0, double %626)
  %628 = fadd double %617, %627
  %629 = fsub double %628, %617
  %630 = fsub double %627, %629
  %631 = fptosi double %615 to i32
  br label %708

632:                                              ; preds = %559
  %633 = tail call double @llvm.amdgcn.trig.preop.f64(double %611, i32 0)
  %634 = tail call double @llvm.amdgcn.trig.preop.f64(double %611, i32 1)
  %635 = tail call double @llvm.amdgcn.trig.preop.f64(double %611, i32 2)
  %636 = fcmp oge double %611, 0x7B00000000000000
  %637 = tail call double @llvm.amdgcn.ldexp.f64(double %611, i32 -128)
  %638 = select i1 %636, double %637, double %611
  %639 = fmul double %635, %638
  %640 = fneg double %639
  %641 = tail call double @llvm.fma.f64(double %635, double %638, double %640)
  %642 = fmul double %634, %638
  %643 = fneg double %642
  %644 = tail call double @llvm.fma.f64(double %634, double %638, double %643)
  %645 = fmul double %633, %638
  %646 = fneg double %645
  %647 = tail call double @llvm.fma.f64(double %633, double %638, double %646)
  %648 = fadd double %642, %647
  %649 = fsub double %648, %642
  %650 = fsub double %648, %649
  %651 = fsub double %647, %649
  %652 = fsub double %642, %650
  %653 = fadd double %651, %652
  %654 = fadd double %639, %644
  %655 = fsub double %654, %639
  %656 = fsub double %654, %655
  %657 = fsub double %644, %655
  %658 = fsub double %639, %656
  %659 = fadd double %657, %658
  %660 = fadd double %654, %653
  %661 = fsub double %660, %654
  %662 = fsub double %660, %661
  %663 = fsub double %653, %661
  %664 = fsub double %654, %662
  %665 = fadd double %663, %664
  %666 = fadd double %659, %665
  %667 = fadd double %641, %666
  %668 = fadd double %645, %648
  %669 = fsub double %668, %645
  %670 = fsub double %648, %669
  %671 = fadd double %670, %660
  %672 = fsub double %671, %670
  %673 = fsub double %660, %672
  %674 = fadd double %673, %667
  %675 = tail call double @llvm.amdgcn.ldexp.f64(double %668, i32 -2)
  %676 = tail call double @llvm.amdgcn.fract.f64(double %675)
  %677 = tail call i1 @llvm.amdgcn.class.f64(double %675, i32 516)
  %678 = select i1 %677, double 0.000000e+00, double %676
  %679 = tail call double @llvm.amdgcn.ldexp.f64(double %678, i32 2)
  %680 = fadd double %679, %671
  %681 = fcmp olt double %680, 0.000000e+00
  %682 = select i1 %681, double 4.000000e+00, double 0.000000e+00
  %683 = fadd double %679, %682
  %684 = fadd double %671, %683
  %685 = fptosi double %684 to i32
  %686 = sitofp i32 %685 to double
  %687 = fsub double %683, %686
  %688 = fadd double %671, %687
  %689 = fsub double %688, %687
  %690 = fsub double %671, %689
  %691 = fadd double %674, %690
  %692 = fcmp oge double %688, 5.000000e-01
  %693 = zext i1 %692 to i32
  %694 = add nsw i32 %693, %685
  %695 = select i1 %692, double 1.000000e+00, double 0.000000e+00
  %696 = fsub double %688, %695
  %697 = fadd double %696, %691
  %698 = fsub double %697, %696
  %699 = fsub double %691, %698
  %700 = fmul double %697, 0x3FF921FB54442D18
  %701 = fneg double %700
  %702 = tail call double @llvm.fma.f64(double %697, double 0x3FF921FB54442D18, double %701)
  %703 = tail call double @llvm.fma.f64(double %697, double 0x3C91A62633145C07, double %702)
  %704 = tail call double @llvm.fma.f64(double %699, double 0x3FF921FB54442D18, double %703)
  %705 = fadd double %700, %704
  %706 = fsub double %705, %700
  %707 = fsub double %704, %706
  br label %708

708:                                              ; preds = %613, %632
  %709 = phi double [ %630, %613 ], [ %707, %632 ]
  %710 = phi double [ %628, %613 ], [ %705, %632 ]
  %711 = phi i32 [ %631, %613 ], [ %694, %632 ]
  %712 = fmul double %710, %710
  %713 = fmul double %712, 5.000000e-01
  %714 = fsub double 1.000000e+00, %713
  %715 = fsub double 1.000000e+00, %714
  %716 = fsub double %715, %713
  %717 = fmul double %712, %712
  %718 = tail call double @llvm.fma.f64(double %712, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %719 = tail call double @llvm.fma.f64(double %712, double %718, double 0xBE927E4FA17F65F6)
  %720 = tail call double @llvm.fma.f64(double %712, double %719, double 0x3EFA01A019F4EC90)
  %721 = tail call double @llvm.fma.f64(double %712, double %720, double 0xBF56C16C16C16967)
  %722 = tail call double @llvm.fma.f64(double %712, double %721, double 0x3FA5555555555555)
  %723 = fneg double %709
  %724 = tail call double @llvm.fma.f64(double %710, double %723, double %716)
  %725 = tail call double @llvm.fma.f64(double %717, double %722, double %724)
  %726 = fadd double %714, %725
  %727 = tail call double @llvm.fma.f64(double %712, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %728 = tail call double @llvm.fma.f64(double %712, double %727, double 0x3EC71DE3796CDE01)
  %729 = tail call double @llvm.fma.f64(double %712, double %728, double 0xBF2A01A019E83E5C)
  %730 = tail call double @llvm.fma.f64(double %712, double %729, double 0x3F81111111110BB3)
  %731 = fneg double %712
  %732 = fmul double %710, %731
  %733 = fmul double %709, 5.000000e-01
  %734 = tail call double @llvm.fma.f64(double %732, double %730, double %733)
  %735 = tail call double @llvm.fma.f64(double %712, double %734, double %723)
  %736 = tail call double @llvm.fma.f64(double %732, double 0xBFC5555555555555, double %735)
  %737 = fsub double %710, %736
  %738 = fneg double %737
  %739 = and i32 %711, 1
  %740 = icmp eq i32 %739, 0
  %741 = select i1 %740, double %726, double %738
  %742 = bitcast double %741 to <2 x i32>
  %743 = shl i32 %711, 30
  %744 = and i32 %743, -2147483648
  %745 = extractelement <2 x i32> %742, i64 1
  %746 = xor i32 %745, %744
  %747 = insertelement <2 x i32> %742, i32 %746, i64 1
  %748 = tail call i1 @llvm.amdgcn.class.f64(double %611, i32 504)
  %749 = select i1 %748, <2 x i32> %747, <2 x i32> <i32 0, i32 2146959360>
  %750 = bitcast <2 x i32> %749 to double
  %751 = fmul contract double %27, %750
  %752 = fmul contract double %15, %608
  %753 = fmul contract double %752, 0x3F10000000000000
  %754 = tail call double @llvm.fabs.f64(double %753)
  %755 = fcmp olt double %754, 0x41D0000000000000
  br i1 %755, label %756, label %775

756:                                              ; preds = %708
  %757 = fmul double %754, 0x3FE45F306DC9C883
  %758 = tail call double @llvm.rint.f64(double %757)
  %759 = tail call double @llvm.fma.f64(double %758, double 0xBFF921FB54442D18, double %754)
  %760 = tail call double @llvm.fma.f64(double %758, double 0xBC91A62633145C00, double %759)
  %761 = fmul double %758, 0x3C91A62633145C00
  %762 = fneg double %761
  %763 = tail call double @llvm.fma.f64(double %758, double 0x3C91A62633145C00, double %762)
  %764 = fsub double %759, %761
  %765 = fsub double %759, %764
  %766 = fsub double %765, %761
  %767 = fsub double %764, %760
  %768 = fadd double %767, %766
  %769 = fsub double %768, %763
  %770 = tail call double @llvm.fma.f64(double %758, double 0xB97B839A252049C0, double %769)
  %771 = fadd double %760, %770
  %772 = fsub double %771, %760
  %773 = fsub double %770, %772
  %774 = fptosi double %758 to i32
  br label %851

775:                                              ; preds = %708
  %776 = tail call double @llvm.amdgcn.trig.preop.f64(double %754, i32 0)
  %777 = tail call double @llvm.amdgcn.trig.preop.f64(double %754, i32 1)
  %778 = tail call double @llvm.amdgcn.trig.preop.f64(double %754, i32 2)
  %779 = fcmp oge double %754, 0x7B00000000000000
  %780 = tail call double @llvm.amdgcn.ldexp.f64(double %754, i32 -128)
  %781 = select i1 %779, double %780, double %754
  %782 = fmul double %778, %781
  %783 = fneg double %782
  %784 = tail call double @llvm.fma.f64(double %778, double %781, double %783)
  %785 = fmul double %777, %781
  %786 = fneg double %785
  %787 = tail call double @llvm.fma.f64(double %777, double %781, double %786)
  %788 = fmul double %776, %781
  %789 = fneg double %788
  %790 = tail call double @llvm.fma.f64(double %776, double %781, double %789)
  %791 = fadd double %785, %790
  %792 = fsub double %791, %785
  %793 = fsub double %791, %792
  %794 = fsub double %790, %792
  %795 = fsub double %785, %793
  %796 = fadd double %794, %795
  %797 = fadd double %782, %787
  %798 = fsub double %797, %782
  %799 = fsub double %797, %798
  %800 = fsub double %787, %798
  %801 = fsub double %782, %799
  %802 = fadd double %800, %801
  %803 = fadd double %797, %796
  %804 = fsub double %803, %797
  %805 = fsub double %803, %804
  %806 = fsub double %796, %804
  %807 = fsub double %797, %805
  %808 = fadd double %806, %807
  %809 = fadd double %802, %808
  %810 = fadd double %784, %809
  %811 = fadd double %788, %791
  %812 = fsub double %811, %788
  %813 = fsub double %791, %812
  %814 = fadd double %813, %803
  %815 = fsub double %814, %813
  %816 = fsub double %803, %815
  %817 = fadd double %816, %810
  %818 = tail call double @llvm.amdgcn.ldexp.f64(double %811, i32 -2)
  %819 = tail call double @llvm.amdgcn.fract.f64(double %818)
  %820 = tail call i1 @llvm.amdgcn.class.f64(double %818, i32 516)
  %821 = select i1 %820, double 0.000000e+00, double %819
  %822 = tail call double @llvm.amdgcn.ldexp.f64(double %821, i32 2)
  %823 = fadd double %822, %814
  %824 = fcmp olt double %823, 0.000000e+00
  %825 = select i1 %824, double 4.000000e+00, double 0.000000e+00
  %826 = fadd double %822, %825
  %827 = fadd double %814, %826
  %828 = fptosi double %827 to i32
  %829 = sitofp i32 %828 to double
  %830 = fsub double %826, %829
  %831 = fadd double %814, %830
  %832 = fsub double %831, %830
  %833 = fsub double %814, %832
  %834 = fadd double %817, %833
  %835 = fcmp oge double %831, 5.000000e-01
  %836 = zext i1 %835 to i32
  %837 = add nsw i32 %836, %828
  %838 = select i1 %835, double 1.000000e+00, double 0.000000e+00
  %839 = fsub double %831, %838
  %840 = fadd double %839, %834
  %841 = fsub double %840, %839
  %842 = fsub double %834, %841
  %843 = fmul double %840, 0x3FF921FB54442D18
  %844 = fneg double %843
  %845 = tail call double @llvm.fma.f64(double %840, double 0x3FF921FB54442D18, double %844)
  %846 = tail call double @llvm.fma.f64(double %840, double 0x3C91A62633145C07, double %845)
  %847 = tail call double @llvm.fma.f64(double %842, double 0x3FF921FB54442D18, double %846)
  %848 = fadd double %843, %847
  %849 = fsub double %848, %843
  %850 = fsub double %847, %849
  br label %851

851:                                              ; preds = %756, %775
  %852 = phi double [ %773, %756 ], [ %850, %775 ]
  %853 = phi double [ %771, %756 ], [ %848, %775 ]
  %854 = phi i32 [ %774, %756 ], [ %837, %775 ]
  %855 = fmul double %853, %853
  %856 = fmul double %855, 5.000000e-01
  %857 = fsub double 1.000000e+00, %856
  %858 = fsub double 1.000000e+00, %857
  %859 = fsub double %858, %856
  %860 = fmul double %855, %855
  %861 = tail call double @llvm.fma.f64(double %855, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %862 = tail call double @llvm.fma.f64(double %855, double %861, double 0xBE927E4FA17F65F6)
  %863 = tail call double @llvm.fma.f64(double %855, double %862, double 0x3EFA01A019F4EC90)
  %864 = tail call double @llvm.fma.f64(double %855, double %863, double 0xBF56C16C16C16967)
  %865 = tail call double @llvm.fma.f64(double %855, double %864, double 0x3FA5555555555555)
  %866 = fneg double %852
  %867 = tail call double @llvm.fma.f64(double %853, double %866, double %859)
  %868 = tail call double @llvm.fma.f64(double %860, double %865, double %867)
  %869 = fadd double %857, %868
  %870 = tail call double @llvm.fma.f64(double %855, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %871 = tail call double @llvm.fma.f64(double %855, double %870, double 0x3EC71DE3796CDE01)
  %872 = tail call double @llvm.fma.f64(double %855, double %871, double 0xBF2A01A019E83E5C)
  %873 = tail call double @llvm.fma.f64(double %855, double %872, double 0x3F81111111110BB3)
  %874 = fneg double %855
  %875 = fmul double %853, %874
  %876 = fmul double %852, 5.000000e-01
  %877 = tail call double @llvm.fma.f64(double %875, double %873, double %876)
  %878 = tail call double @llvm.fma.f64(double %855, double %877, double %866)
  %879 = tail call double @llvm.fma.f64(double %875, double 0xBFC5555555555555, double %878)
  %880 = fsub double %853, %879
  %881 = and i32 %854, 1
  %882 = icmp eq i32 %881, 0
  %883 = select i1 %882, double %880, double %869
  %884 = bitcast double %883 to <2 x i32>
  %885 = shl i32 %854, 30
  %886 = bitcast double %753 to <2 x i32>
  %887 = extractelement <2 x i32> %886, i64 1
  %888 = xor i32 %885, %887
  %889 = and i32 %888, -2147483648
  %890 = extractelement <2 x i32> %884, i64 1
  %891 = xor i32 %890, %889
  %892 = insertelement <2 x i32> %884, i32 %891, i64 1
  %893 = tail call i1 @llvm.amdgcn.class.f64(double %754, i32 504)
  %894 = select i1 %893, <2 x i32> %892, <2 x i32> <i32 0, i32 2146959360>
  %895 = bitcast <2 x i32> %894 to double
  %896 = fmul contract double %175, %895
  %897 = fsub contract double %751, %896
  %898 = fpext float %324 to double
  %899 = fadd contract double %897, %898
  %900 = fptrunc double %899 to float
  br i1 %612, label %901, label %920

901:                                              ; preds = %851
  %902 = fmul double %611, 0x3FE45F306DC9C883
  %903 = tail call double @llvm.rint.f64(double %902)
  %904 = tail call double @llvm.fma.f64(double %903, double 0xBFF921FB54442D18, double %611)
  %905 = tail call double @llvm.fma.f64(double %903, double 0xBC91A62633145C00, double %904)
  %906 = fmul double %903, 0x3C91A62633145C00
  %907 = fneg double %906
  %908 = tail call double @llvm.fma.f64(double %903, double 0x3C91A62633145C00, double %907)
  %909 = fsub double %904, %906
  %910 = fsub double %904, %909
  %911 = fsub double %910, %906
  %912 = fsub double %909, %905
  %913 = fadd double %912, %911
  %914 = fsub double %913, %908
  %915 = tail call double @llvm.fma.f64(double %903, double 0xB97B839A252049C0, double %914)
  %916 = fadd double %905, %915
  %917 = fsub double %916, %905
  %918 = fsub double %915, %917
  %919 = fptosi double %903 to i32
  br label %996

920:                                              ; preds = %851
  %921 = tail call double @llvm.amdgcn.trig.preop.f64(double %611, i32 0)
  %922 = tail call double @llvm.amdgcn.trig.preop.f64(double %611, i32 1)
  %923 = tail call double @llvm.amdgcn.trig.preop.f64(double %611, i32 2)
  %924 = fcmp oge double %611, 0x7B00000000000000
  %925 = tail call double @llvm.amdgcn.ldexp.f64(double %611, i32 -128)
  %926 = select i1 %924, double %925, double %611
  %927 = fmul double %923, %926
  %928 = fneg double %927
  %929 = tail call double @llvm.fma.f64(double %923, double %926, double %928)
  %930 = fmul double %922, %926
  %931 = fneg double %930
  %932 = tail call double @llvm.fma.f64(double %922, double %926, double %931)
  %933 = fmul double %921, %926
  %934 = fneg double %933
  %935 = tail call double @llvm.fma.f64(double %921, double %926, double %934)
  %936 = fadd double %930, %935
  %937 = fsub double %936, %930
  %938 = fsub double %936, %937
  %939 = fsub double %935, %937
  %940 = fsub double %930, %938
  %941 = fadd double %939, %940
  %942 = fadd double %927, %932
  %943 = fsub double %942, %927
  %944 = fsub double %942, %943
  %945 = fsub double %932, %943
  %946 = fsub double %927, %944
  %947 = fadd double %945, %946
  %948 = fadd double %942, %941
  %949 = fsub double %948, %942
  %950 = fsub double %948, %949
  %951 = fsub double %941, %949
  %952 = fsub double %942, %950
  %953 = fadd double %951, %952
  %954 = fadd double %947, %953
  %955 = fadd double %929, %954
  %956 = fadd double %933, %936
  %957 = fsub double %956, %933
  %958 = fsub double %936, %957
  %959 = fadd double %958, %948
  %960 = fsub double %959, %958
  %961 = fsub double %948, %960
  %962 = fadd double %961, %955
  %963 = tail call double @llvm.amdgcn.ldexp.f64(double %956, i32 -2)
  %964 = tail call double @llvm.amdgcn.fract.f64(double %963)
  %965 = tail call i1 @llvm.amdgcn.class.f64(double %963, i32 516)
  %966 = select i1 %965, double 0.000000e+00, double %964
  %967 = tail call double @llvm.amdgcn.ldexp.f64(double %966, i32 2)
  %968 = fadd double %967, %959
  %969 = fcmp olt double %968, 0.000000e+00
  %970 = select i1 %969, double 4.000000e+00, double 0.000000e+00
  %971 = fadd double %967, %970
  %972 = fadd double %959, %971
  %973 = fptosi double %972 to i32
  %974 = sitofp i32 %973 to double
  %975 = fsub double %971, %974
  %976 = fadd double %959, %975
  %977 = fsub double %976, %975
  %978 = fsub double %959, %977
  %979 = fadd double %962, %978
  %980 = fcmp oge double %976, 5.000000e-01
  %981 = zext i1 %980 to i32
  %982 = add nsw i32 %981, %973
  %983 = select i1 %980, double 1.000000e+00, double 0.000000e+00
  %984 = fsub double %976, %983
  %985 = fadd double %984, %979
  %986 = fsub double %985, %984
  %987 = fsub double %979, %986
  %988 = fmul double %985, 0x3FF921FB54442D18
  %989 = fneg double %988
  %990 = tail call double @llvm.fma.f64(double %985, double 0x3FF921FB54442D18, double %989)
  %991 = tail call double @llvm.fma.f64(double %985, double 0x3C91A62633145C07, double %990)
  %992 = tail call double @llvm.fma.f64(double %987, double 0x3FF921FB54442D18, double %991)
  %993 = fadd double %988, %992
  %994 = fsub double %993, %988
  %995 = fsub double %992, %994
  br label %996

996:                                              ; preds = %901, %920
  %997 = phi double [ %918, %901 ], [ %995, %920 ]
  %998 = phi double [ %916, %901 ], [ %993, %920 ]
  %999 = phi i32 [ %919, %901 ], [ %982, %920 ]
  %1000 = fmul double %998, %998
  %1001 = fmul double %1000, 5.000000e-01
  %1002 = fsub double 1.000000e+00, %1001
  %1003 = fsub double 1.000000e+00, %1002
  %1004 = fsub double %1003, %1001
  %1005 = fmul double %1000, %1000
  %1006 = tail call double @llvm.fma.f64(double %1000, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1007 = tail call double @llvm.fma.f64(double %1000, double %1006, double 0xBE927E4FA17F65F6)
  %1008 = tail call double @llvm.fma.f64(double %1000, double %1007, double 0x3EFA01A019F4EC90)
  %1009 = tail call double @llvm.fma.f64(double %1000, double %1008, double 0xBF56C16C16C16967)
  %1010 = tail call double @llvm.fma.f64(double %1000, double %1009, double 0x3FA5555555555555)
  %1011 = fneg double %997
  %1012 = tail call double @llvm.fma.f64(double %998, double %1011, double %1004)
  %1013 = tail call double @llvm.fma.f64(double %1005, double %1010, double %1012)
  %1014 = fadd double %1002, %1013
  %1015 = tail call double @llvm.fma.f64(double %1000, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1016 = tail call double @llvm.fma.f64(double %1000, double %1015, double 0x3EC71DE3796CDE01)
  %1017 = tail call double @llvm.fma.f64(double %1000, double %1016, double 0xBF2A01A019E83E5C)
  %1018 = tail call double @llvm.fma.f64(double %1000, double %1017, double 0x3F81111111110BB3)
  %1019 = fneg double %1000
  %1020 = fmul double %998, %1019
  %1021 = fmul double %997, 5.000000e-01
  %1022 = tail call double @llvm.fma.f64(double %1020, double %1018, double %1021)
  %1023 = tail call double @llvm.fma.f64(double %1000, double %1022, double %1011)
  %1024 = tail call double @llvm.fma.f64(double %1020, double 0xBFC5555555555555, double %1023)
  %1025 = fsub double %998, %1024
  %1026 = and i32 %999, 1
  %1027 = icmp eq i32 %1026, 0
  %1028 = select i1 %1027, double %1025, double %1014
  %1029 = bitcast double %1028 to <2 x i32>
  %1030 = shl i32 %999, 30
  %1031 = bitcast double %610 to <2 x i32>
  %1032 = extractelement <2 x i32> %1031, i64 1
  %1033 = xor i32 %1030, %1032
  %1034 = and i32 %1033, -2147483648
  %1035 = extractelement <2 x i32> %1029, i64 1
  %1036 = xor i32 %1035, %1034
  %1037 = insertelement <2 x i32> %1029, i32 %1036, i64 1
  %1038 = select i1 %748, <2 x i32> %1037, <2 x i32> <i32 0, i32 2146959360>
  %1039 = bitcast <2 x i32> %1038 to double
  br i1 %755, label %1040, label %1059

1040:                                             ; preds = %996
  %1041 = fmul double %754, 0x3FE45F306DC9C883
  %1042 = tail call double @llvm.rint.f64(double %1041)
  %1043 = tail call double @llvm.fma.f64(double %1042, double 0xBFF921FB54442D18, double %754)
  %1044 = tail call double @llvm.fma.f64(double %1042, double 0xBC91A62633145C00, double %1043)
  %1045 = fmul double %1042, 0x3C91A62633145C00
  %1046 = fneg double %1045
  %1047 = tail call double @llvm.fma.f64(double %1042, double 0x3C91A62633145C00, double %1046)
  %1048 = fsub double %1043, %1045
  %1049 = fsub double %1043, %1048
  %1050 = fsub double %1049, %1045
  %1051 = fsub double %1048, %1044
  %1052 = fadd double %1051, %1050
  %1053 = fsub double %1052, %1047
  %1054 = tail call double @llvm.fma.f64(double %1042, double 0xB97B839A252049C0, double %1053)
  %1055 = fadd double %1044, %1054
  %1056 = fsub double %1055, %1044
  %1057 = fsub double %1054, %1056
  %1058 = fptosi double %1042 to i32
  br label %1135

1059:                                             ; preds = %996
  %1060 = tail call double @llvm.amdgcn.trig.preop.f64(double %754, i32 0)
  %1061 = tail call double @llvm.amdgcn.trig.preop.f64(double %754, i32 1)
  %1062 = tail call double @llvm.amdgcn.trig.preop.f64(double %754, i32 2)
  %1063 = fcmp oge double %754, 0x7B00000000000000
  %1064 = tail call double @llvm.amdgcn.ldexp.f64(double %754, i32 -128)
  %1065 = select i1 %1063, double %1064, double %754
  %1066 = fmul double %1062, %1065
  %1067 = fneg double %1066
  %1068 = tail call double @llvm.fma.f64(double %1062, double %1065, double %1067)
  %1069 = fmul double %1061, %1065
  %1070 = fneg double %1069
  %1071 = tail call double @llvm.fma.f64(double %1061, double %1065, double %1070)
  %1072 = fmul double %1060, %1065
  %1073 = fneg double %1072
  %1074 = tail call double @llvm.fma.f64(double %1060, double %1065, double %1073)
  %1075 = fadd double %1069, %1074
  %1076 = fsub double %1075, %1069
  %1077 = fsub double %1075, %1076
  %1078 = fsub double %1074, %1076
  %1079 = fsub double %1069, %1077
  %1080 = fadd double %1078, %1079
  %1081 = fadd double %1066, %1071
  %1082 = fsub double %1081, %1066
  %1083 = fsub double %1081, %1082
  %1084 = fsub double %1071, %1082
  %1085 = fsub double %1066, %1083
  %1086 = fadd double %1084, %1085
  %1087 = fadd double %1081, %1080
  %1088 = fsub double %1087, %1081
  %1089 = fsub double %1087, %1088
  %1090 = fsub double %1080, %1088
  %1091 = fsub double %1081, %1089
  %1092 = fadd double %1090, %1091
  %1093 = fadd double %1086, %1092
  %1094 = fadd double %1068, %1093
  %1095 = fadd double %1072, %1075
  %1096 = fsub double %1095, %1072
  %1097 = fsub double %1075, %1096
  %1098 = fadd double %1097, %1087
  %1099 = fsub double %1098, %1097
  %1100 = fsub double %1087, %1099
  %1101 = fadd double %1100, %1094
  %1102 = tail call double @llvm.amdgcn.ldexp.f64(double %1095, i32 -2)
  %1103 = tail call double @llvm.amdgcn.fract.f64(double %1102)
  %1104 = tail call i1 @llvm.amdgcn.class.f64(double %1102, i32 516)
  %1105 = select i1 %1104, double 0.000000e+00, double %1103
  %1106 = tail call double @llvm.amdgcn.ldexp.f64(double %1105, i32 2)
  %1107 = fadd double %1106, %1098
  %1108 = fcmp olt double %1107, 0.000000e+00
  %1109 = select i1 %1108, double 4.000000e+00, double 0.000000e+00
  %1110 = fadd double %1106, %1109
  %1111 = fadd double %1098, %1110
  %1112 = fptosi double %1111 to i32
  %1113 = sitofp i32 %1112 to double
  %1114 = fsub double %1110, %1113
  %1115 = fadd double %1098, %1114
  %1116 = fsub double %1115, %1114
  %1117 = fsub double %1098, %1116
  %1118 = fadd double %1101, %1117
  %1119 = fcmp oge double %1115, 5.000000e-01
  %1120 = zext i1 %1119 to i32
  %1121 = add nsw i32 %1120, %1112
  %1122 = select i1 %1119, double 1.000000e+00, double 0.000000e+00
  %1123 = fsub double %1115, %1122
  %1124 = fadd double %1123, %1118
  %1125 = fsub double %1124, %1123
  %1126 = fsub double %1118, %1125
  %1127 = fmul double %1124, 0x3FF921FB54442D18
  %1128 = fneg double %1127
  %1129 = tail call double @llvm.fma.f64(double %1124, double 0x3FF921FB54442D18, double %1128)
  %1130 = tail call double @llvm.fma.f64(double %1124, double 0x3C91A62633145C07, double %1129)
  %1131 = tail call double @llvm.fma.f64(double %1126, double 0x3FF921FB54442D18, double %1130)
  %1132 = fadd double %1127, %1131
  %1133 = fsub double %1132, %1127
  %1134 = fsub double %1131, %1133
  br label %1135

1135:                                             ; preds = %1040, %1059
  %1136 = phi double [ %1057, %1040 ], [ %1134, %1059 ]
  %1137 = phi double [ %1055, %1040 ], [ %1132, %1059 ]
  %1138 = phi i32 [ %1058, %1040 ], [ %1121, %1059 ]
  %1139 = fmul double %1137, %1137
  %1140 = fmul double %1139, 5.000000e-01
  %1141 = fsub double 1.000000e+00, %1140
  %1142 = fsub double 1.000000e+00, %1141
  %1143 = fsub double %1142, %1140
  %1144 = fmul double %1139, %1139
  %1145 = tail call double @llvm.fma.f64(double %1139, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1146 = tail call double @llvm.fma.f64(double %1139, double %1145, double 0xBE927E4FA17F65F6)
  %1147 = tail call double @llvm.fma.f64(double %1139, double %1146, double 0x3EFA01A019F4EC90)
  %1148 = tail call double @llvm.fma.f64(double %1139, double %1147, double 0xBF56C16C16C16967)
  %1149 = tail call double @llvm.fma.f64(double %1139, double %1148, double 0x3FA5555555555555)
  %1150 = fneg double %1136
  %1151 = tail call double @llvm.fma.f64(double %1137, double %1150, double %1143)
  %1152 = tail call double @llvm.fma.f64(double %1144, double %1149, double %1151)
  %1153 = fadd double %1141, %1152
  %1154 = tail call double @llvm.fma.f64(double %1139, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1155 = tail call double @llvm.fma.f64(double %1139, double %1154, double 0x3EC71DE3796CDE01)
  %1156 = tail call double @llvm.fma.f64(double %1139, double %1155, double 0xBF2A01A019E83E5C)
  %1157 = tail call double @llvm.fma.f64(double %1139, double %1156, double 0x3F81111111110BB3)
  %1158 = fneg double %1139
  %1159 = fmul double %1137, %1158
  %1160 = fmul double %1136, 5.000000e-01
  %1161 = tail call double @llvm.fma.f64(double %1159, double %1157, double %1160)
  %1162 = tail call double @llvm.fma.f64(double %1139, double %1161, double %1150)
  %1163 = tail call double @llvm.fma.f64(double %1159, double 0xBFC5555555555555, double %1162)
  %1164 = fsub double %1137, %1163
  %1165 = fneg double %1164
  %1166 = and i32 %1138, 1
  %1167 = icmp eq i32 %1166, 0
  %1168 = select i1 %1167, double %1153, double %1165
  %1169 = bitcast double %1168 to <2 x i32>
  %1170 = shl i32 %1138, 30
  %1171 = and i32 %1170, -2147483648
  %1172 = extractelement <2 x i32> %1169, i64 1
  %1173 = xor i32 %1172, %1171
  %1174 = insertelement <2 x i32> %1169, i32 %1173, i64 1
  %1175 = select i1 %893, <2 x i32> %1174, <2 x i32> <i32 0, i32 2146959360>
  %1176 = bitcast <2 x i32> %1175 to double
  %1177 = fmul contract double %175, %1176
  %1178 = fmul contract double %27, %1039
  %1179 = fsub contract double %1177, %1178
  %1180 = fpext float %606 to double
  %1181 = fadd contract double %1179, %1180
  %1182 = fptrunc double %1181 to float
  %1183 = add nuw nsw i32 %21, 1
  %1184 = icmp eq i32 %1183, 8192
  br i1 %1184, label %16, label %20, !llvm.loop !11
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{i16 1, i16 1025}
!6 = !{}
!7 = !{!8, !8, i64 0}
!8 = !{!"float", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
