digraph "CFG for '_Z11convolvePSFiiiPsS_Pfii' function" {
	label="CFG for '_Z11convolvePSFiiiPsS_Pfii' function";

	Node0x53db360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%8:\l  %9 = alloca [13 x [13 x float]], align 16, addrspace(5)\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = shl i32 %10, 5\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = shl i32 %14, 5\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %17 = add i32 %15, %16\l  %18 = sub nsw i32 %13, %6\l  %19 = tail call i32 @llvm.smax.i32(i32 %18, i32 0)\l  %20 = sub nsw i32 %17, %6\l  %21 = tail call i32 @llvm.smax.i32(i32 %20, i32 0)\l  %22 = add nsw i32 %13, %6\l  %23 = tail call i32 @llvm.smin.i32(i32 %22, i32 %0)\l  %24 = add nsw i32 %17, %6\l  %25 = tail call i32 @llvm.smin.i32(i32 %24, i32 %1)\l  %26 = sub nsw i32 %23, %19\l  %27 = sub i32 %25, %21\l  %28 = icmp slt i32 %26, 1\l  %29 = icmp slt i32 %27, 1\l  %30 = select i1 %28, i1 true, i1 %29\l  br i1 %30, label %215, label %31\l|{<s0>T|<s1>F}}"];
	Node0x53db360:s0 -> Node0x53de910;
	Node0x53db360:s1 -> Node0x53de9a0;
	Node0x53de9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%31:\l31:                                               \l  %32 = bitcast [13 x [13 x float]] addrspace(5)* %9 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 676, i8 addrspace(5)* %32) #4\l  %33 = icmp slt i32 %18, 0\l  %34 = sub nsw i32 %7, %26\l  %35 = select i1 %33, i32 0, i32 %34\l  %36 = icmp slt i32 %20, 0\l  %37 = sub nsw i32 %7, %27\l  %38 = select i1 %36, i32 0, i32 %37\l  %39 = xor i32 %21, -1\l  %40 = add i32 %25, %39\l  %41 = and i32 %27, 7\l  %42 = icmp ult i32 %40, 7\l  %43 = and i32 %27, -8\l  %44 = icmp eq i32 %41, 0\l  br label %45\l}"];
	Node0x53de9a0 -> Node0x53df540;
	Node0x53df540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%45:\l45:                                               \l  %46 = phi i32 [ 0, %31 ], [ %79, %77 ]\l  %47 = phi float [ 0.000000e+00, %31 ], [ %78, %77 ]\l  %48 = add nuw nsw i32 %46, %19\l  %49 = mul nsw i32 %48, %1\l  %50 = add nsw i32 %49, %21\l  br i1 %42, label %59, label %81\l|{<s0>T|<s1>F}}"];
	Node0x53df540:s0 -> Node0x53e0490;
	Node0x53df540:s1 -> Node0x53e0520;
	Node0x53e0660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%51:\l51:                                               \l  %52 = icmp sgt i32 %26, 0\l  br i1 %52, label %53, label %158\l|{<s0>T|<s1>F}}"];
	Node0x53e0660:s0 -> Node0x53e0780;
	Node0x53e0660:s1 -> Node0x53e07d0;
	Node0x53e0780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%53:\l53:                                               \l  %54 = icmp sgt i32 %27, 0\l  %55 = and i32 %27, 1\l  %56 = icmp eq i32 %40, 0\l  %57 = and i32 %27, -2\l  %58 = icmp eq i32 %55, 0\l  br label %151\l}"];
	Node0x53e0780 -> Node0x53e0c10;
	Node0x53e0490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%59:\l59:                                               \l  %60 = phi float [ undef, %45 ], [ %146, %81 ]\l  %61 = phi i32 [ 0, %45 ], [ %148, %81 ]\l  %62 = phi float [ %47, %45 ], [ %146, %81 ]\l  br i1 %44, label %77, label %63\l|{<s0>T|<s1>F}}"];
	Node0x53e0490:s0 -> Node0x53df630;
	Node0x53e0490:s1 -> Node0x53e13a0;
	Node0x53e13a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%63:\l63:                                               \l  %64 = phi i32 [ %74, %63 ], [ %61, %59 ]\l  %65 = phi float [ %72, %63 ], [ %62, %59 ]\l  %66 = phi i32 [ %75, %63 ], [ 0, %59 ]\l  %67 = add nsw i32 %50, %64\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %68\l  %70 = load i16, i16 addrspace(1)* %69, align 2, !tbaa !5, !amdgpu.noclobber\l... !9\l  %71 = sitofp i16 %70 to float\l  %72 = fadd contract float %65, %71\l  %73 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %64\l  store float %71, float addrspace(5)* %73, align 4, !tbaa !10\l  %74 = add nuw nsw i32 %64, 1\l  %75 = add i32 %66, 1\l  %76 = icmp eq i32 %75, %41\l  br i1 %76, label %77, label %63, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x53e13a0:s0 -> Node0x53df630;
	Node0x53e13a0:s1 -> Node0x53e13a0;
	Node0x53df630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%77:\l77:                                               \l  %78 = phi float [ %60, %59 ], [ %72, %63 ]\l  %79 = add nuw nsw i32 %46, 1\l  %80 = icmp slt i32 %79, %26\l  br i1 %80, label %45, label %51, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x53df630:s0 -> Node0x53df540;
	Node0x53df630:s1 -> Node0x53e0660;
	Node0x53e0520 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%81:\l81:                                               \l  %82 = phi i32 [ %148, %81 ], [ 0, %45 ]\l  %83 = phi float [ %146, %81 ], [ %47, %45 ]\l  %84 = phi i32 [ %149, %81 ], [ 0, %45 ]\l  %85 = add nsw i32 %50, %82\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %86\l  %88 = load i16, i16 addrspace(1)* %87, align 2, !tbaa !5, !amdgpu.noclobber\l... !9\l  %89 = sitofp i16 %88 to float\l  %90 = fadd contract float %83, %89\l  %91 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %82\l  store float %89, float addrspace(5)* %91, align 4, !tbaa !10\l  %92 = or i32 %82, 1\l  %93 = add nsw i32 %50, %92\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %94\l  %96 = load i16, i16 addrspace(1)* %95, align 2, !tbaa !5, !amdgpu.noclobber\l... !9\l  %97 = sitofp i16 %96 to float\l  %98 = fadd contract float %90, %97\l  %99 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %92\l  store float %97, float addrspace(5)* %99, align 4, !tbaa !10\l  %100 = or i32 %82, 2\l  %101 = add nsw i32 %50, %100\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %102\l  %104 = load i16, i16 addrspace(1)* %103, align 2, !tbaa !5,\l... !amdgpu.noclobber !9\l  %105 = sitofp i16 %104 to float\l  %106 = fadd contract float %98, %105\l  %107 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %100\l  store float %105, float addrspace(5)* %107, align 4, !tbaa !10\l  %108 = or i32 %82, 3\l  %109 = add nsw i32 %50, %108\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %110\l  %112 = load i16, i16 addrspace(1)* %111, align 2, !tbaa !5,\l... !amdgpu.noclobber !9\l  %113 = sitofp i16 %112 to float\l  %114 = fadd contract float %106, %113\l  %115 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %108\l  store float %113, float addrspace(5)* %115, align 4, !tbaa !10\l  %116 = or i32 %82, 4\l  %117 = add nsw i32 %50, %116\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %118\l  %120 = load i16, i16 addrspace(1)* %119, align 2, !tbaa !5,\l... !amdgpu.noclobber !9\l  %121 = sitofp i16 %120 to float\l  %122 = fadd contract float %114, %121\l  %123 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %116\l  store float %121, float addrspace(5)* %123, align 4, !tbaa !10\l  %124 = or i32 %82, 5\l  %125 = add nsw i32 %50, %124\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %126\l  %128 = load i16, i16 addrspace(1)* %127, align 2, !tbaa !5,\l... !amdgpu.noclobber !9\l  %129 = sitofp i16 %128 to float\l  %130 = fadd contract float %122, %129\l  %131 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %124\l  store float %129, float addrspace(5)* %131, align 4, !tbaa !10\l  %132 = or i32 %82, 6\l  %133 = add nsw i32 %50, %132\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %134\l  %136 = load i16, i16 addrspace(1)* %135, align 2, !tbaa !5,\l... !amdgpu.noclobber !9\l  %137 = sitofp i16 %136 to float\l  %138 = fadd contract float %130, %137\l  %139 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %132\l  store float %137, float addrspace(5)* %139, align 4, !tbaa !10\l  %140 = or i32 %82, 7\l  %141 = add nsw i32 %50, %140\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %142\l  %144 = load i16, i16 addrspace(1)* %143, align 2, !tbaa !5,\l... !amdgpu.noclobber !9\l  %145 = sitofp i16 %144 to float\l  %146 = fadd contract float %138, %145\l  %147 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %46, i32 %140\l  store float %145, float addrspace(5)* %147, align 4, !tbaa !10\l  %148 = add nuw nsw i32 %82, 8\l  %149 = add i32 %84, 8\l  %150 = icmp eq i32 %149, %43\l  br i1 %150, label %59, label %81, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x53e0520:s0 -> Node0x53e0490;
	Node0x53e0520:s1 -> Node0x53e0520;
	Node0x53e0c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%151:\l151:                                              \l  %152 = phi i32 [ 0, %53 ], [ %185, %183 ]\l  %153 = phi float [ 0.000000e+00, %53 ], [ %184, %183 ]\l  br i1 %54, label %154, label %183\l|{<s0>T|<s1>F}}"];
	Node0x53e0c10:s0 -> Node0x53e6fd0;
	Node0x53e0c10:s1 -> Node0x53e6de0;
	Node0x53e6fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%154:\l154:                                              \l  %155 = add nsw i32 %152, %35\l  %156 = mul nsw i32 %155, %7\l  %157 = add i32 %156, %38\l  br i1 %56, label %168, label %187\l|{<s0>T|<s1>F}}"];
	Node0x53e6fd0:s0 -> Node0x53e72c0;
	Node0x53e6fd0:s1 -> Node0x53e7310;
	Node0x53e07d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%158:\l158:                                              \l  %159 = phi float [ 0.000000e+00, %51 ], [ %184, %183 ]\l  %160 = fpext float %159 to double\l  %161 = fmul contract double %160, 1.000000e+03\l  %162 = fptosi double %161 to i32\l  %163 = trunc i32 %162 to i16\l  %164 = mul nsw i32 %13, %1\l  %165 = add nsw i32 %164, %17\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds i16, i16 addrspace(1)* %4, i64 %166\l  store i16 %163, i16 addrspace(1)* %167, align 2, !tbaa !5\l  call void @llvm.lifetime.end.p5i8(i64 676, i8 addrspace(5)* %32) #4\l  br label %215\l}"];
	Node0x53e07d0 -> Node0x53de910;
	Node0x53e72c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%168:\l168:                                              \l  %169 = phi float [ undef, %154 ], [ %211, %187 ]\l  %170 = phi i32 [ 0, %154 ], [ %212, %187 ]\l  %171 = phi float [ %153, %154 ], [ %211, %187 ]\l  br i1 %58, label %183, label %172\l|{<s0>T|<s1>F}}"];
	Node0x53e72c0:s0 -> Node0x53e6de0;
	Node0x53e72c0:s1 -> Node0x53e7e10;
	Node0x53e7e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%172:\l172:                                              \l  %173 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %152, i32 %170\l  %174 = load float, float addrspace(5)* %173, align 4, !tbaa !10\l  %175 = fdiv contract float %174, %78\l  %176 = add i32 %157, %170\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %5, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !10,\l... !amdgpu.noclobber !9\l  %180 = fsub contract float %175, %179\l  %181 = tail call float @llvm.fabs.f32(float %180)\l  %182 = fadd contract float %171, %181\l  br label %183\l}"];
	Node0x53e7e10 -> Node0x53e6de0;
	Node0x53e6de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%183:\l183:                                              \l  %184 = phi float [ %153, %151 ], [ %169, %168 ], [ %182, %172 ]\l  %185 = add nuw nsw i32 %152, 1\l  %186 = icmp slt i32 %185, %26\l  br i1 %186, label %151, label %158, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x53e6de0:s0 -> Node0x53e0c10;
	Node0x53e6de0:s1 -> Node0x53e07d0;
	Node0x53e7310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%187:\l187:                                              \l  %188 = phi i32 [ %212, %187 ], [ 0, %154 ]\l  %189 = phi float [ %211, %187 ], [ %153, %154 ]\l  %190 = phi i32 [ %213, %187 ], [ 0, %154 ]\l  %191 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %152, i32 %188\l  %192 = load float, float addrspace(5)* %191, align 4, !tbaa !10\l  %193 = fdiv contract float %192, %78\l  %194 = add i32 %157, %188\l  %195 = sext i32 %194 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %5, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !10,\l... !amdgpu.noclobber !9\l  %198 = fsub contract float %193, %197\l  %199 = tail call float @llvm.fabs.f32(float %198)\l  %200 = fadd contract float %189, %199\l  %201 = or i32 %188, 1\l  %202 = getelementptr inbounds [13 x [13 x float]], [13 x [13 x float]]\l... addrspace(5)* %9, i32 0, i32 %152, i32 %201\l  %203 = load float, float addrspace(5)* %202, align 4, !tbaa !10\l  %204 = fdiv contract float %203, %78\l  %205 = add i32 %157, %201\l  %206 = sext i32 %205 to i64\l  %207 = getelementptr inbounds float, float addrspace(1)* %5, i64 %206\l  %208 = load float, float addrspace(1)* %207, align 4, !tbaa !10,\l... !amdgpu.noclobber !9\l  %209 = fsub contract float %204, %208\l  %210 = tail call float @llvm.fabs.f32(float %209)\l  %211 = fadd contract float %200, %210\l  %212 = add nuw nsw i32 %188, 2\l  %213 = add i32 %190, 2\l  %214 = icmp eq i32 %213, %57\l  br i1 %214, label %168, label %187, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x53e7310:s0 -> Node0x53e72c0;
	Node0x53e7310:s1 -> Node0x53e7310;
	Node0x53de910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%215:\l215:                                              \l  ret void\l}"];
}
