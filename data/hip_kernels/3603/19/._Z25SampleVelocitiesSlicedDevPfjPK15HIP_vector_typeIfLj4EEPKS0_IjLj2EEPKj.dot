digraph "CFG for '_Z25SampleVelocitiesSlicedDevPfjPK15HIP_vector_typeIfLj4EEPKS0_IjLj2EEPKj' function" {
	label="CFG for '_Z25SampleVelocitiesSlicedDevPfjPK15HIP_vector_typeIfLj4EEPKS0_IjLj2EEPKj' function";

	Node0x4b000f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 4, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = mul i32 %13, %1\l  %21 = mul i32 %20, %18\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = mul i32 %18, %22\l  %24 = add i32 %23, %19\l  %25 = add i32 %24, %21\l  %26 = zext i32 %25 to i64\l  %27 = getelementptr inbounds %struct.HIP_vector_type.4,\l... %struct.HIP_vector_type.4 addrspace(1)* %3, i64 %26, i32 0, i32 0, i32 0, i64\l... 0\l  %28 = bitcast i32 addrspace(1)* %27 to \<2 x i32\> addrspace(1)*\l  %29 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %28, align 8\l  %30 = extractelement \<2 x i32\> %29, i64 0\l  %31 = extractelement \<2 x i32\> %29, i64 1\l  %32 = sub i32 %31, %30\l  %33 = icmp eq i32 %31, %30\l  br i1 %33, label %97, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4b000f0:s0 -> Node0x4b01df0;
	Node0x4b000f0:s1 -> Node0x4b02de0;
	Node0x4b02de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%34:\l34:                                               \l  %35 = icmp ugt i32 %31, %30\l  br i1 %35, label %73, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4b02de0:s0 -> Node0x4b02fb0;
	Node0x4b02de0:s1 -> Node0x4b03000;
	Node0x4b03140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%36:\l36:                                               \l  %37 = insertelement \<4 x float\> %74, float %87, i64 0\l  %38 = insertelement \<4 x float\> %37, float %90, i64 1\l  %39 = insertelement \<4 x float\> %38, float %93, i64 2\l  br label %40\l}"];
	Node0x4b03140 -> Node0x4b03000;
	Node0x4b03000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%40:\l40:                                               \l  %41 = phi \<4 x float\> [ %39, %36 ], [ zeroinitializer, %34 ]\l  %42 = extractelement \<4 x float\> %41, i64 0\l  %43 = fmul contract float %42, %42\l  %44 = extractelement \<4 x float\> %41, i64 1\l  %45 = fmul contract float %44, %44\l  %46 = fadd contract float %43, %45\l  %47 = extractelement \<4 x float\> %41, i64 2\l  %48 = fmul contract float %47, %47\l  %49 = fadd contract float %48, %46\l  %50 = fcmp olt float %49, 0x39F0000000000000\l  %51 = select i1 %50, float 0x41F0000000000000, float 1.000000e+00\l  %52 = fmul float %49, %51\l  %53 = tail call float @llvm.sqrt.f32(float %52)\l  %54 = bitcast float %53 to i32\l  %55 = add nsw i32 %54, -1\l  %56 = bitcast i32 %55 to float\l  %57 = add nsw i32 %54, 1\l  %58 = bitcast i32 %57 to float\l  %59 = tail call i1 @llvm.amdgcn.class.f32(float %52, i32 608)\l  %60 = select i1 %50, float 0x3EF0000000000000, float 1.000000e+00\l  %61 = fneg float %58\l  %62 = tail call float @llvm.fma.f32(float %61, float %53, float %52)\l  %63 = fcmp ogt float %62, 0.000000e+00\l  %64 = fneg float %56\l  %65 = tail call float @llvm.fma.f32(float %64, float %53, float %52)\l  %66 = fcmp ole float %65, 0.000000e+00\l  %67 = select i1 %66, float %56, float %53\l  %68 = select i1 %63, float %58, float %67\l  %69 = fmul float %60, %68\l  %70 = select i1 %59, float %52, float %69\l  %71 = uitofp i32 %32 to float\l  %72 = fdiv contract float %70, %71\l  br label %97\l}"];
	Node0x4b03000 -> Node0x4b01df0;
	Node0x4b02fb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi \<4 x float\> [ %94, %73 ], [ zeroinitializer, %34 ]\l  %75 = phi i32 [ %95, %73 ], [ %30, %34 ]\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %76\l  %78 = load i32, i32 addrspace(1)* %77, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %2, i64 %79, i32 0, i32 0, i32 0, i64\l... 0\l  %81 = load float, float addrspace(1)* %80, align 16, !amdgpu.noclobber !14\l  %82 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %2, i64 %79, i32 0, i32 0, i32 0, i64\l... 1\l  %83 = load float, float addrspace(1)* %82, align 4, !amdgpu.noclobber !14\l  %84 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %2, i64 %79, i32 0, i32 0, i32 0, i64\l... 2\l  %85 = load float, float addrspace(1)* %84, align 8, !amdgpu.noclobber !14\l  %86 = extractelement \<4 x float\> %74, i64 0\l  %87 = fadd contract float %86, %81\l  %88 = insertelement \<4 x float\> %74, float %87, i64 0\l  %89 = extractelement \<4 x float\> %74, i64 1\l  %90 = fadd contract float %89, %83\l  %91 = insertelement \<4 x float\> %88, float %90, i64 1\l  %92 = extractelement \<4 x float\> %74, i64 2\l  %93 = fadd contract float %92, %85\l  %94 = insertelement \<4 x float\> %91, float %93, i64 2\l  %95 = add nuw i32 %75, 1\l  %96 = icmp ult i32 %95, %31\l  br i1 %96, label %73, label %36, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4b02fb0:s0 -> Node0x4b02fb0;
	Node0x4b02fb0:s1 -> Node0x4b03140;
	Node0x4b01df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%97:\l97:                                               \l  %98 = phi float [ %72, %40 ], [ 0.000000e+00, %5 ]\l  %99 = zext i32 %24 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  store float %98, float addrspace(1)* %100, align 4, !tbaa !22\l  ret void\l}"];
}
