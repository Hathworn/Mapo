digraph "CFG for 'matrix_tan' function" {
	label="CFG for 'matrix_tan' function";

	Node0x496f380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp ult i32 %12, %2\l  br i1 %13, label %14, label %185\l|{<s0>T|<s1>F}}"];
	Node0x496f380:s0 -> Node0x4971290;
	Node0x496f380:s1 -> Node0x4971320;
	Node0x4971290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%14:\l14:                                               \l  %15 = sext i32 %12 to i64\l  %16 = getelementptr inbounds double, double addrspace(1)* %0, i64 %15\l  %17 = load double, double addrspace(1)* %16, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %18 = tail call double @llvm.fabs.f64(double %17)\l  %19 = fcmp olt double %18, 0x41D0000000000000\l  br i1 %19, label %20, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4971290:s0 -> Node0x4972ab0;
	Node0x4971290:s1 -> Node0x4972b40;
	Node0x4972ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%20:\l20:                                               \l  %21 = fmul double %18, 0x3FE45F306DC9C883\l  %22 = tail call double @llvm.rint.f64(double %21)\l  %23 = tail call double @llvm.fma.f64(double %22, double 0xBFF921FB54442D18,\l... double %18)\l  %24 = tail call double @llvm.fma.f64(double %22, double 0xBC91A62633145C00,\l... double %23)\l  %25 = fmul double %22, 0x3C91A62633145C00\l  %26 = fneg double %25\l  %27 = tail call double @llvm.fma.f64(double %22, double 0x3C91A62633145C00,\l... double %26)\l  %28 = fsub double %23, %25\l  %29 = fsub double %23, %28\l  %30 = fsub double %29, %25\l  %31 = fsub double %28, %24\l  %32 = fadd double %31, %30\l  %33 = fsub double %32, %27\l  %34 = tail call double @llvm.fma.f64(double %22, double 0xB97B839A252049C0,\l... double %33)\l  %35 = fadd double %24, %34\l  %36 = fsub double %35, %24\l  %37 = fsub double %34, %36\l  %38 = fptosi double %22 to i32\l  br label %115\l}"];
	Node0x4972ab0 -> Node0x4973e40;
	Node0x4972b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%39:\l39:                                               \l  %40 = tail call double @llvm.amdgcn.trig.preop.f64(double %18, i32 0)\l  %41 = tail call double @llvm.amdgcn.trig.preop.f64(double %18, i32 1)\l  %42 = tail call double @llvm.amdgcn.trig.preop.f64(double %18, i32 2)\l  %43 = fcmp oge double %18, 0x7B00000000000000\l  %44 = tail call double @llvm.amdgcn.ldexp.f64(double %18, i32 -128)\l  %45 = select i1 %43, double %44, double %18\l  %46 = fmul double %42, %45\l  %47 = fneg double %46\l  %48 = tail call double @llvm.fma.f64(double %42, double %45, double %47)\l  %49 = fmul double %41, %45\l  %50 = fneg double %49\l  %51 = tail call double @llvm.fma.f64(double %41, double %45, double %50)\l  %52 = fmul double %40, %45\l  %53 = fneg double %52\l  %54 = tail call double @llvm.fma.f64(double %40, double %45, double %53)\l  %55 = fadd double %49, %54\l  %56 = fsub double %55, %49\l  %57 = fsub double %55, %56\l  %58 = fsub double %54, %56\l  %59 = fsub double %49, %57\l  %60 = fadd double %58, %59\l  %61 = fadd double %46, %51\l  %62 = fsub double %61, %46\l  %63 = fsub double %61, %62\l  %64 = fsub double %51, %62\l  %65 = fsub double %46, %63\l  %66 = fadd double %64, %65\l  %67 = fadd double %61, %60\l  %68 = fsub double %67, %61\l  %69 = fsub double %67, %68\l  %70 = fsub double %60, %68\l  %71 = fsub double %61, %69\l  %72 = fadd double %70, %71\l  %73 = fadd double %66, %72\l  %74 = fadd double %48, %73\l  %75 = fadd double %52, %55\l  %76 = fsub double %75, %52\l  %77 = fsub double %55, %76\l  %78 = fadd double %77, %67\l  %79 = fsub double %78, %77\l  %80 = fsub double %67, %79\l  %81 = fadd double %80, %74\l  %82 = tail call double @llvm.amdgcn.ldexp.f64(double %75, i32 -2)\l  %83 = tail call double @llvm.amdgcn.fract.f64(double %82)\l  %84 = tail call i1 @llvm.amdgcn.class.f64(double %82, i32 516)\l  %85 = select i1 %84, double 0.000000e+00, double %83\l  %86 = tail call double @llvm.amdgcn.ldexp.f64(double %85, i32 2)\l  %87 = fadd double %86, %78\l  %88 = fcmp olt double %87, 0.000000e+00\l  %89 = select i1 %88, double 4.000000e+00, double 0.000000e+00\l  %90 = fadd double %86, %89\l  %91 = fadd double %78, %90\l  %92 = fptosi double %91 to i32\l  %93 = sitofp i32 %92 to double\l  %94 = fsub double %90, %93\l  %95 = fadd double %78, %94\l  %96 = fsub double %95, %94\l  %97 = fsub double %78, %96\l  %98 = fadd double %81, %97\l  %99 = fcmp oge double %95, 5.000000e-01\l  %100 = zext i1 %99 to i32\l  %101 = add nsw i32 %100, %92\l  %102 = select i1 %99, double 1.000000e+00, double 0.000000e+00\l  %103 = fsub double %95, %102\l  %104 = fadd double %103, %98\l  %105 = fsub double %104, %103\l  %106 = fsub double %98, %105\l  %107 = fmul double %104, 0x3FF921FB54442D18\l  %108 = fneg double %107\l  %109 = tail call double @llvm.fma.f64(double %104, double\l... 0x3FF921FB54442D18, double %108)\l  %110 = tail call double @llvm.fma.f64(double %104, double\l... 0x3C91A62633145C07, double %109)\l  %111 = tail call double @llvm.fma.f64(double %106, double\l... 0x3FF921FB54442D18, double %110)\l  %112 = fadd double %107, %111\l  %113 = fsub double %112, %107\l  %114 = fsub double %111, %113\l  br label %115\l}"];
	Node0x4972b40 -> Node0x4973e40;
	Node0x4973e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%115:\l115:                                              \l  %116 = phi double [ %37, %20 ], [ %114, %39 ]\l  %117 = phi double [ %35, %20 ], [ %112, %39 ]\l  %118 = phi i32 [ %38, %20 ], [ %101, %39 ]\l  %119 = and i32 %118, 1\l  %120 = fmul double %117, %117\l  %121 = fneg double %120\l  %122 = tail call double @llvm.fma.f64(double %117, double %117, double %121)\l  %123 = fmul double %116, 2.000000e+00\l  %124 = tail call double @llvm.fma.f64(double %117, double %123, double %122)\l  %125 = fadd double %120, %124\l  %126 = tail call double @llvm.fma.f64(double %125, double\l... 0x3EF5E089C751C08C, double 0xBF078809A9A29F71)\l  %127 = tail call double @llvm.fma.f64(double %125, double %126, double\l... 0x3F17746F90A8AAE0)\l  %128 = tail call double @llvm.fma.f64(double %125, double %127, double\l... 0xBEFBB44DA6FBF144)\l  %129 = tail call double @llvm.fma.f64(double %125, double %128, double\l... 0x3F21E634A7943ACF)\l  %130 = tail call double @llvm.fma.f64(double %125, double %129, double\l... 0x3F2D250FDEB68FEB)\l  %131 = tail call double @llvm.fma.f64(double %125, double %130, double\l... 0x3F437FD9B58C4D95)\l  %132 = tail call double @llvm.fma.f64(double %125, double %131, double\l... 0x3F57D5AF15120E2C)\l  %133 = tail call double @llvm.fma.f64(double %125, double %132, double\l... 0x3F6D6D93E09491DF)\l  %134 = tail call double @llvm.fma.f64(double %125, double %133, double\l... 0x3F8226E12033784D)\l  %135 = tail call double @llvm.fma.f64(double %125, double %134, double\l... 0x3F9664F49AC36AE2)\l  %136 = tail call double @llvm.fma.f64(double %125, double %135, double\l... 0x3FABA1BA1B451C21)\l  %137 = tail call double @llvm.fma.f64(double %125, double %136, double\l... 0x3FC11111111185B7)\l  %138 = tail call double @llvm.fma.f64(double %125, double %137, double\l... 0x3FD55555555554EE)\l  %139 = fmul double %125, %138\l  %140 = fmul double %117, %139\l  %141 = fneg double %140\l  %142 = tail call double @llvm.fma.f64(double %117, double %139, double %141)\l  %143 = fadd double %117, %140\l  %144 = fsub double %143, %117\l  %145 = fsub double %140, %144\l  %146 = fadd double %116, %142\l  %147 = fadd double %146, %145\l  %148 = fadd double %143, %147\l  %149 = fsub double %148, %143\l  %150 = fsub double %147, %149\l  %151 = tail call double @llvm.amdgcn.rcp.f64(double %148)\l  %152 = fneg double %148\l  %153 = tail call double @llvm.fma.f64(double %152, double %151, double\l... 1.000000e+00)\l  %154 = tail call double @llvm.fma.f64(double %153, double %151, double %151)\l  %155 = tail call double @llvm.fma.f64(double %152, double %154, double\l... 1.000000e+00)\l  %156 = tail call double @llvm.fma.f64(double %155, double %154, double %154)\l  %157 = fmul double %148, %156\l  %158 = fneg double %157\l  %159 = tail call double @llvm.fma.f64(double %156, double %148, double %158)\l  %160 = tail call double @llvm.fma.f64(double %156, double %150, double %159)\l  %161 = fadd double %157, %160\l  %162 = fsub double %161, %157\l  %163 = fsub double %160, %162\l  %164 = fsub double 1.000000e+00, %161\l  %165 = fsub double 1.000000e+00, %164\l  %166 = fsub double %165, %161\l  %167 = fsub double %166, %163\l  %168 = fadd double %164, %167\l  %169 = fmul double %156, %168\l  %170 = fadd double %156, %169\l  %171 = icmp eq i32 %119, 0\l  %172 = fneg double %170\l  %173 = select i1 %171, double %148, double %172\l  %174 = bitcast double %173 to \<2 x i32\>\l  %175 = bitcast double %17 to \<2 x i32\>\l  %176 = extractelement \<2 x i32\> %175, i64 1\l  %177 = and i32 %176, -2147483648\l  %178 = extractelement \<2 x i32\> %174, i64 1\l  %179 = xor i32 %178, %177\l  %180 = insertelement \<2 x i32\> %174, i32 %179, i64 1\l  %181 = tail call i1 @llvm.amdgcn.class.f64(double %18, i32 504)\l  %182 = select i1 %181, \<2 x i32\> %180, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %183 = getelementptr inbounds double, double addrspace(1)* %1, i64 %15\l  %184 = bitcast double addrspace(1)* %183 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %182, \<2 x i32\> addrspace(1)* %184, align 8, !tbaa !7\l  br label %185\l}"];
	Node0x4973e40 -> Node0x4971320;
	Node0x4971320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%185:\l185:                                              \l  ret void\l}"];
}
