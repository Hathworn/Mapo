digraph "CFG for '_Z14GPUKernel_VpVmiiPdS_S_' function" {
	label="CFG for '_Z14GPUKernel_VpVmiiPdS_S_' function";

	Node0x5c24bc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 16\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 8, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 2, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %22 = add i32 %20, %21\l  %23 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 4, !range !13, !invariant.load\l... !14\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %22, %26\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = mul nsw i32 %1, %1\l  %31 = mul nsw i32 %30, %1\l  %32 = icmp slt i32 %29, %31\l  br i1 %32, label %33, label %75\l|{<s0>T|<s1>F}}"];
	Node0x5c24bc0:s0 -> Node0x5c269e0;
	Node0x5c24bc0:s1 -> Node0x5c26a70;
	Node0x5c269e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%33:\l33:                                               \l  %34 = srem i32 %29, %1\l  %35 = sub nsw i32 %29, %34\l  %36 = srem i32 %35, %30\l  %37 = sdiv i32 %36, %1\l  %38 = icmp slt i32 %37, %0\l  br i1 %38, label %75, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5c269e0:s0 -> Node0x5c26a70;
	Node0x5c269e0:s1 -> Node0x5c28960;
	Node0x5c28960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%39:\l39:                                               \l  %40 = sub nsw i32 %37, %0\l  %41 = mul nsw i32 %37, %1\l  %42 = sub nsw i32 %35, %41\l  %43 = sdiv i32 %42, %30\l  %44 = icmp sgt i32 %34, %43\l  br i1 %44, label %75, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5c28960:s0 -> Node0x5c26a70;
	Node0x5c28960:s1 -> Node0x5c28d30;
	Node0x5c28d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%45:\l45:                                               \l  %46 = add nsw i32 %43, 1\l  %47 = mul nsw i32 %46, %43\l  %48 = sdiv i32 %47, 2\l  %49 = add nsw i32 %1, 1\l  %50 = mul nsw i32 %49, %1\l  %51 = sdiv i32 %50, 2\l  %52 = mul nsw i32 %40, %30\l  %53 = mul nsw i32 %34, %1\l  %54 = add nsw i32 %52, %53\l  %55 = add nsw i32 %54, %43\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %2, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %59 = mul nsw i32 %43, %1\l  %60 = add i32 %52, %34\l  %61 = add i32 %60, %59\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %2, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %65 = fadd contract double %58, %64\l  %66 = mul nsw i32 %40, %51\l  %67 = add i32 %66, %34\l  %68 = add i32 %67, %48\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %3, i64 %69\l  store double %65, double addrspace(1)* %70, align 8, !tbaa !16\l  %71 = load double, double addrspace(1)* %57, align 8, !tbaa !16\l  %72 = load double, double addrspace(1)* %63, align 8, !tbaa !16\l  %73 = fsub contract double %71, %72\l  %74 = getelementptr inbounds double, double addrspace(1)* %4, i64 %69\l  store double %73, double addrspace(1)* %74, align 8, !tbaa !16\l  br label %75\l}"];
	Node0x5c28d30 -> Node0x5c26a70;
	Node0x5c26a70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  ret void\l}"];
}
