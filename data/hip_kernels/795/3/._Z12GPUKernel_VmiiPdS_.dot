digraph "CFG for '_Z12GPUKernel_VmiiPdS_' function" {
	label="CFG for '_Z12GPUKernel_VmiiPdS_' function";

	Node0x4a09980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 16\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 8, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 2, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = mul i32 %18, %5\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = add i32 %19, %20\l  %22 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 4, !range !13, !invariant.load\l... !14\l  %25 = zext i16 %24 to i32\l  %26 = mul i32 %21, %25\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = add i32 %26, %27\l  %29 = mul i32 %1, %1\l  %30 = mul nsw i32 %29, %1\l  %31 = icmp slt i32 %28, %30\l  br i1 %31, label %32, label %70\l|{<s0>T|<s1>F}}"];
	Node0x4a09980:s0 -> Node0x4a0d1c0;
	Node0x4a09980:s1 -> Node0x4a0d250;
	Node0x4a0d1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%32:\l32:                                               \l  %33 = srem i32 %28, %1\l  %34 = sub nsw i32 %28, %33\l  %35 = srem i32 %34, %29\l  %36 = sdiv i32 %35, %1\l  %37 = mul nsw i32 %36, %1\l  %38 = sub nsw i32 %34, %37\l  %39 = sdiv i32 %38, %29\l  %40 = icmp slt i32 %36, %0\l  %41 = icmp sgt i32 %33, %39\l  %42 = select i1 %40, i1 true, i1 %41\l  br i1 %42, label %70, label %43\l|{<s0>T|<s1>F}}"];
	Node0x4a0d1c0:s0 -> Node0x4a0d250;
	Node0x4a0d1c0:s1 -> Node0x4a0b910;
	Node0x4a0b910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%43:\l43:                                               \l  %44 = add nsw i32 %39, 1\l  %45 = mul nsw i32 %44, %39\l  %46 = sdiv i32 %45, 2\l  %47 = add nsw i32 %1, 1\l  %48 = mul nsw i32 %47, %1\l  %49 = sdiv i32 %48, 2\l  %50 = sub nsw i32 %36, %0\l  %51 = mul i32 %29, %50\l  %52 = mul nsw i32 %33, %1\l  %53 = add i32 %39, %52\l  %54 = add i32 %53, %51\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %2, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %58 = mul nsw i32 %39, %1\l  %59 = add i32 %58, %33\l  %60 = add i32 %59, %51\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds double, double addrspace(1)* %2, i64 %61\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %64 = fsub contract double %57, %63\l  %65 = mul nsw i32 %50, %49\l  %66 = add i32 %65, %33\l  %67 = add i32 %66, %46\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %3, i64 %68\l  store double %64, double addrspace(1)* %69, align 8, !tbaa !16\l  br label %70\l}"];
	Node0x4a0b910 -> Node0x4a0d250;
	Node0x4a0d250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  ret void\l}"];
}
