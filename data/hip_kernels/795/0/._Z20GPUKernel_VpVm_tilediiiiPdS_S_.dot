digraph "CFG for '_Z20GPUKernel_VpVm_tilediiiiPdS_S_' function" {
	label="CFG for '_Z20GPUKernel_VpVm_tilediiiiPdS_S_' function";

	Node0x4ca6bb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 16\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 8, !tbaa !4\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 2, !range !13, !invariant.load\l... !14\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %8\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %24 = add i32 %22, %23\l  %25 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 4, !range !13, !invariant.load\l... !14\l  %28 = zext i16 %27 to i32\l  %29 = mul i32 %24, %28\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %31 = add i32 %29, %30\l  %32 = mul nsw i32 %3, %3\l  %33 = mul nsw i32 %32, %2\l  %34 = icmp slt i32 %31, %33\l  br i1 %34, label %35, label %74\l|{<s0>T|<s1>F}}"];
	Node0x4ca6bb0:s0 -> Node0x4ca8960;
	Node0x4ca6bb0:s1 -> Node0x4caa560;
	Node0x4ca8960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%35:\l35:                                               \l  %36 = srem i32 %31, %3\l  %37 = sub nsw i32 %31, %36\l  %38 = srem i32 %37, %32\l  %39 = sdiv i32 %38, %3\l  %40 = icmp sgt i32 %36, %39\l  br i1 %40, label %74, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4ca8960:s0 -> Node0x4caa560;
	Node0x4ca8960:s1 -> Node0x4caa970;
	Node0x4caa970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%41:\l41:                                               \l  %42 = mul nsw i32 %39, %3\l  %43 = sub nsw i32 %37, %42\l  %44 = sdiv i32 %43, %32\l  %45 = add nsw i32 %44, %1\l  %46 = icmp slt i32 %45, %0\l  br i1 %46, label %74, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4caa970:s0 -> Node0x4caa560;
	Node0x4caa970:s1 -> Node0x4caad40;
	Node0x4caad40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%47:\l47:                                               \l  %48 = add nsw i32 %39, 1\l  %49 = mul nsw i32 %48, %39\l  %50 = sdiv i32 %49, 2\l  %51 = add nsw i32 %50, %36\l  %52 = add nsw i32 %3, 1\l  %53 = mul nsw i32 %52, %3\l  %54 = sdiv i32 %53, 2\l  %55 = mul nsw i32 %44, %32\l  %56 = mul nsw i32 %36, %3\l  %57 = add i32 %39, %56\l  %58 = add i32 %57, %55\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %4, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %62 = sext i32 %31 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %4, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !16,\l... !amdgpu.noclobber !14\l  %65 = fadd contract double %61, %64\l  %66 = mul nsw i32 %44, %54\l  %67 = add nsw i32 %51, %66\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %5, i64 %68\l  store double %65, double addrspace(1)* %69, align 8, !tbaa !16\l  %70 = load double, double addrspace(1)* %60, align 8, !tbaa !16\l  %71 = load double, double addrspace(1)* %63, align 8, !tbaa !16\l  %72 = fsub contract double %70, %71\l  %73 = getelementptr inbounds double, double addrspace(1)* %6, i64 %68\l  store double %72, double addrspace(1)* %73, align 8, !tbaa !16\l  br label %74\l}"];
	Node0x4caad40 -> Node0x4caa560;
	Node0x4caa560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%74:\l74:                                               \l  ret void\l}"];
}
