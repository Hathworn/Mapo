digraph "CFG for '_Z11convolutionPhS_iiPfiif' function" {
	label="CFG for '_Z11convolutionPhS_iiPfiif' function";

	Node0x463fa00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp slt i32 %17, %2\l  %27 = icmp slt i32 %25, %3\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %212\l|{<s0>T|<s1>F}}"];
	Node0x463fa00:s0 -> Node0x4643440;
	Node0x463fa00:s1 -> Node0x46434d0;
	Node0x4643440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%29:\l29:                                               \l  %30 = icmp sgt i32 %6, 0\l  br i1 %30, label %31, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4643440:s0 -> Node0x46436d0;
	Node0x4643440:s1 -> Node0x4643720;
	Node0x46436d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%31:\l31:                                               \l  %32 = add nsw i32 %6, -1\l  %33 = lshr i32 %32, 1\l  %34 = add i32 %5, -1\l  %35 = sdiv i32 %34, -2\l  %36 = add nsw i32 %3, -1\l  %37 = sub i32 %25, %33\l  %38 = icmp sgt i32 %5, 0\l  %39 = add nsw i32 %2, -1\l  %40 = add i32 %17, %35\l  %41 = and i32 %5, 7\l  %42 = icmp ult i32 %5, 8\l  %43 = and i32 %5, -8\l  %44 = icmp eq i32 %41, 0\l  br label %57\l}"];
	Node0x46436d0 -> Node0x46441f0;
	Node0x4643720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%45:\l45:                                               \l  %46 = phi float [ 0.000000e+00, %29 ], [ %91, %90 ]\l  %47 = fpext float %46 to double\l  %48 = tail call double @llvm.minnum.f64(double %47, double 2.550000e+02)\l  %49 = tail call double @llvm.maxnum.f64(double %48, double 0.000000e+00)\l  %50 = fptrunc double %49 to float\l  %51 = fdiv contract float %50, %7\l  %52 = fptoui float %51 to i8\l  %53 = mul nsw i32 %25, %2\l  %54 = add nsw i32 %53, %17\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %55\l  store i8 %52, i8 addrspace(1)* %56, align 1, !tbaa !7\l  br label %212\l}"];
	Node0x4643720 -> Node0x46434d0;
	Node0x46441f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %31 ], [ %91, %90 ]\l  %59 = phi i32 [ 0, %31 ], [ %92, %90 ]\l  br i1 %38, label %60, label %90\l|{<s0>T|<s1>F}}"];
	Node0x46441f0:s0 -> Node0x4645b50;
	Node0x46441f0:s1 -> Node0x4644d30;
	Node0x4645b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%60:\l60:                                               \l  %61 = add i32 %37, %59\l  %62 = tail call i32 @llvm.smin.i32(i32 %36, i32 %61)\l  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 0)\l  %64 = mul nsw i32 %63, %2\l  %65 = mul nsw i32 %59, %5\l  br i1 %42, label %66, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4645b50:s0 -> Node0x46439b0;
	Node0x4645b50:s1 -> Node0x4643a40;
	Node0x46439b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%66:\l66:                                               \l  %67 = phi float [ undef, %60 ], [ %208, %94 ]\l  %68 = phi float [ %58, %60 ], [ %208, %94 ]\l  %69 = phi i32 [ 0, %60 ], [ %209, %94 ]\l  br i1 %44, label %90, label %70\l|{<s0>T|<s1>F}}"];
	Node0x46439b0:s0 -> Node0x4644d30;
	Node0x46439b0:s1 -> Node0x4646d10;
	Node0x4646d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  %71 = phi float [ %86, %70 ], [ %68, %66 ]\l  %72 = phi i32 [ %87, %70 ], [ %69, %66 ]\l  %73 = phi i32 [ %88, %70 ], [ 0, %66 ]\l  %74 = add i32 %40, %72\l  %75 = tail call i32 @llvm.smin.i32(i32 %39, i32 %74)\l  %76 = tail call i32 @llvm.smax.i32(i32 %75, i32 0)\l  %77 = add nsw i32 %76, %64\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %78\l  %80 = load i8, i8 addrspace(1)* %79, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %81 = uitofp i8 %80 to float\l  %82 = add nsw i32 %72, %65\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %4, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %86 = tail call float @llvm.fma.f32(float %81, float %85, float %71)\l  %87 = add nuw nsw i32 %72, 1\l  %88 = add i32 %73, 1\l  %89 = icmp eq i32 %88, %41\l  br i1 %89, label %90, label %70, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4646d10:s0 -> Node0x4644d30;
	Node0x4646d10:s1 -> Node0x4646d10;
	Node0x4644d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%90:\l90:                                               \l  %91 = phi float [ %58, %57 ], [ %67, %66 ], [ %86, %70 ]\l  %92 = add nuw nsw i32 %59, 1\l  %93 = icmp eq i32 %92, %6\l  br i1 %93, label %45, label %57, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4644d30:s0 -> Node0x4643720;
	Node0x4644d30:s1 -> Node0x46441f0;
	Node0x4643a40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%94:\l94:                                               \l  %95 = phi float [ %208, %94 ], [ %58, %60 ]\l  %96 = phi i32 [ %209, %94 ], [ 0, %60 ]\l  %97 = phi i32 [ %210, %94 ], [ 0, %60 ]\l  %98 = add i32 %40, %96\l  %99 = tail call i32 @llvm.smin.i32(i32 %39, i32 %98)\l  %100 = tail call i32 @llvm.smax.i32(i32 %99, i32 0)\l  %101 = add nsw i32 %100, %64\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %102\l  %104 = load i8, i8 addrspace(1)* %103, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %105 = uitofp i8 %104 to float\l  %106 = add nsw i32 %96, %65\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %4, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %110 = tail call float @llvm.fma.f32(float %105, float %109, float %95)\l  %111 = or i32 %96, 1\l  %112 = add i32 %40, %111\l  %113 = tail call i32 @llvm.smin.i32(i32 %39, i32 %112)\l  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 0)\l  %115 = add nsw i32 %114, %64\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %116\l  %118 = load i8, i8 addrspace(1)* %117, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %119 = uitofp i8 %118 to float\l  %120 = add nsw i32 %111, %65\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %4, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %124 = tail call float @llvm.fma.f32(float %119, float %123, float %110)\l  %125 = or i32 %96, 2\l  %126 = add i32 %40, %125\l  %127 = tail call i32 @llvm.smin.i32(i32 %39, i32 %126)\l  %128 = tail call i32 @llvm.smax.i32(i32 %127, i32 0)\l  %129 = add nsw i32 %128, %64\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %130\l  %132 = load i8, i8 addrspace(1)* %131, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %133 = uitofp i8 %132 to float\l  %134 = add nsw i32 %125, %65\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %4, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %138 = tail call float @llvm.fma.f32(float %133, float %137, float %124)\l  %139 = or i32 %96, 3\l  %140 = add i32 %40, %139\l  %141 = tail call i32 @llvm.smin.i32(i32 %39, i32 %140)\l  %142 = tail call i32 @llvm.smax.i32(i32 %141, i32 0)\l  %143 = add nsw i32 %142, %64\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %144\l  %146 = load i8, i8 addrspace(1)* %145, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %147 = uitofp i8 %146 to float\l  %148 = add nsw i32 %139, %65\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %4, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %152 = tail call float @llvm.fma.f32(float %147, float %151, float %138)\l  %153 = or i32 %96, 4\l  %154 = add i32 %40, %153\l  %155 = tail call i32 @llvm.smin.i32(i32 %39, i32 %154)\l  %156 = tail call i32 @llvm.smax.i32(i32 %155, i32 0)\l  %157 = add nsw i32 %156, %64\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %158\l  %160 = load i8, i8 addrspace(1)* %159, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %161 = uitofp i8 %160 to float\l  %162 = add nsw i32 %153, %65\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %4, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %166 = tail call float @llvm.fma.f32(float %161, float %165, float %152)\l  %167 = or i32 %96, 5\l  %168 = add i32 %40, %167\l  %169 = tail call i32 @llvm.smin.i32(i32 %39, i32 %168)\l  %170 = tail call i32 @llvm.smax.i32(i32 %169, i32 0)\l  %171 = add nsw i32 %170, %64\l  %172 = sext i32 %171 to i64\l  %173 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %172\l  %174 = load i8, i8 addrspace(1)* %173, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %175 = uitofp i8 %174 to float\l  %176 = add nsw i32 %167, %65\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %4, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %180 = tail call float @llvm.fma.f32(float %175, float %179, float %166)\l  %181 = or i32 %96, 6\l  %182 = add i32 %40, %181\l  %183 = tail call i32 @llvm.smin.i32(i32 %39, i32 %182)\l  %184 = tail call i32 @llvm.smax.i32(i32 %183, i32 0)\l  %185 = add nsw i32 %184, %64\l  %186 = sext i32 %185 to i64\l  %187 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %186\l  %188 = load i8, i8 addrspace(1)* %187, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %189 = uitofp i8 %188 to float\l  %190 = add nsw i32 %181, %65\l  %191 = sext i32 %190 to i64\l  %192 = getelementptr inbounds float, float addrspace(1)* %4, i64 %191\l  %193 = load float, float addrspace(1)* %192, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %194 = tail call float @llvm.fma.f32(float %189, float %193, float %180)\l  %195 = or i32 %96, 7\l  %196 = add i32 %40, %195\l  %197 = tail call i32 @llvm.smin.i32(i32 %39, i32 %196)\l  %198 = tail call i32 @llvm.smax.i32(i32 %197, i32 0)\l  %199 = add nsw i32 %198, %64\l  %200 = sext i32 %199 to i64\l  %201 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %200\l  %202 = load i8, i8 addrspace(1)* %201, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %203 = uitofp i8 %202 to float\l  %204 = add nsw i32 %195, %65\l  %205 = sext i32 %204 to i64\l  %206 = getelementptr inbounds float, float addrspace(1)* %4, i64 %205\l  %207 = load float, float addrspace(1)* %206, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %208 = tail call float @llvm.fma.f32(float %203, float %207, float %194)\l  %209 = add nuw nsw i32 %96, 8\l  %210 = add i32 %97, 8\l  %211 = icmp eq i32 %210, %43\l  br i1 %211, label %66, label %94, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4643a40:s0 -> Node0x46439b0;
	Node0x4643a40:s1 -> Node0x4643a40;
	Node0x46434d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%212:\l212:                                              \l  ret void\l}"];
}
