digraph "CFG for '_Z15histo_MonoBlockPhlPj' function" {
	label="CFG for '_Z15histo_MonoBlockPhlPj' function";

	Node0x5cdeee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(3)*\l... @_ZZ15histo_MonoBlockPhlPjE4temp, i32 0, i32 %4\l  store i32 0, i32 addrspace(3)* %5, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !9, !invariant.load !10\l  %10 = zext i16 %9 to i64\l  %11 = zext i32 %4 to i64\l  %12 = icmp slt i64 %11, %1\l  br i1 %12, label %13, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5cdeee0:s0 -> Node0x5cdfc70;
	Node0x5cdeee0:s1 -> Node0x5ce1150;
	Node0x5cdfc70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%13:\l13:                                               \l  %14 = phi i64 [ %21, %13 ], [ %11, %3 ]\l  %15 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %14\l  %16 = load i8, i8 addrspace(1)* %15, align 1, !tbaa !11, !amdgpu.noclobber\l... !10\l  %17 = zext i8 %16 to i32\l  %18 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(3)*\l... @_ZZ15histo_MonoBlockPhlPjE4temp, i32 0, i32 %17\l  %19 = atomicrmw add i32 addrspace(3)* %18, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %20 = add nuw nsw i64 %14, %10\l  %21 = and i64 %20, 4294967295\l  %22 = icmp slt i64 %21, %1\l  br i1 %22, label %13, label %23, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5cdfc70:s0 -> Node0x5cdfc70;
	Node0x5cdfc70:s1 -> Node0x5ce1150;
	Node0x5ce1150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%23:\l23:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %24 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %11\l  %25 = load i32, i32 addrspace(3)* %5, align 4, !tbaa !5\l  %26 = atomicrmw add i32 addrspace(1)* %24, i32 %25 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  ret void\l}"];
}
