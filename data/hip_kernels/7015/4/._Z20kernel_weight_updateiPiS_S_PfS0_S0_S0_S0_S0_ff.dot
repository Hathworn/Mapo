digraph "CFG for '_Z20kernel_weight_updateiPiS_S_PfS0_S0_S0_S0_S0_ff' function" {
	label="CFG for '_Z20kernel_weight_updateiPiS_S_PfS0_S0_S0_S0_S0_ff' function";

	Node0x5520370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%12:\l  %13 = alloca i32, align 4, addrspace(5)\l  %14 = addrspacecast i32 addrspace(5)* %13 to i32*\l  %15 = bitcast i32 addrspace(5)* %13 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %15) #3\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %17 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %18 = getelementptr i8, i8 addrspace(4)* %17, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !5, !invariant.load !6\l  %21 = zext i16 %20 to i32\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = mul i32 %22, %21\l  %24 = add i32 %23, %16\l  store volatile i32 %24, i32* %14, align 4, !tbaa !7\l  %25 = sext i32 %0 to i64\l  %26 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %25\l  %27 = load i32, i32 addrspace(1)* %26, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %28 = add nsw i32 %0, 1\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %29\l  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %32 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %33 = icmp slt i32 %32, %27\l  br i1 %33, label %34, label %163\l|{<s0>T|<s1>F}}"];
	Node0x5520370:s0 -> Node0x5521bc0;
	Node0x5520370:s1 -> Node0x5523b00;
	Node0x5521bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%34:\l34:                                               \l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %25\l  %36 = load i32, i32 addrspace(1)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %37 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %38 = add nsw i32 %37, %36\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %5, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %42 = add i32 %31, -1\l  %43 = icmp sgt i32 %31, 1\l  br i1 %43, label %44, label %163\l|{<s0>T|<s1>F}}"];
	Node0x5521bc0:s0 -> Node0x5524270;
	Node0x5521bc0:s1 -> Node0x5523b00;
	Node0x5524270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%44:\l44:                                               \l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %29\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %25\l  %48 = load i32, i32 addrspace(1)* %47, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %49 = and i32 %42, 1\l  %50 = icmp eq i32 %31, 2\l  br i1 %50, label %126, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5524270:s0 -> Node0x5524730;
	Node0x5524270:s1 -> Node0x55247c0;
	Node0x55247c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%51:\l51:                                               \l  %52 = and i32 %42, -2\l  br label %53\l}"];
	Node0x55247c0 -> Node0x55249c0;
	Node0x55249c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = phi i32 [ 0, %51 ], [ %123, %53 ]\l  %55 = phi i32 [ 0, %51 ], [ %124, %53 ]\l  %56 = add nsw i32 %46, %54\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %7, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !11\l  %60 = fmul contract float %41, %59\l  %61 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %62 = mul nsw i32 %61, %42\l  %63 = add i32 %48, %54\l  %64 = add i32 %63, %62\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %9, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !11\l  %68 = fmul contract float %67, %11\l  %69 = fmul contract float %60, %10\l  %70 = fsub contract float %68, %69\l  %71 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %72 = mul nsw i32 %71, %42\l  %73 = add i32 %63, %72\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %9, i64 %74\l  store float %70, float addrspace(1)* %75, align 4, !tbaa !11\l  %76 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %77 = mul nsw i32 %76, %42\l  %78 = add i32 %63, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %9, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !11\l  %82 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %83 = mul nsw i32 %82, %42\l  %84 = add i32 %63, %83\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %8, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !11\l  %88 = fadd contract float %81, %87\l  store float %88, float addrspace(1)* %86, align 4, !tbaa !11\l  %89 = or i32 %54, 1\l  %90 = add nsw i32 %46, %89\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %7, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !11\l  %94 = fmul contract float %41, %93\l  %95 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %96 = mul nsw i32 %95, %42\l  %97 = add i32 %48, %89\l  %98 = add i32 %97, %96\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %9, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !11\l  %102 = fmul contract float %101, %11\l  %103 = fmul contract float %94, %10\l  %104 = fsub contract float %102, %103\l  %105 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %106 = mul nsw i32 %105, %42\l  %107 = add i32 %97, %106\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %9, i64 %108\l  store float %104, float addrspace(1)* %109, align 4, !tbaa !11\l  %110 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %111 = mul nsw i32 %110, %42\l  %112 = add i32 %97, %111\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %9, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !11\l  %116 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %117 = mul nsw i32 %116, %42\l  %118 = add i32 %97, %117\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %8, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !11\l  %122 = fadd contract float %115, %121\l  store float %122, float addrspace(1)* %120, align 4, !tbaa !11\l  %123 = add nuw nsw i32 %54, 2\l  %124 = add i32 %55, 2\l  %125 = icmp eq i32 %124, %52\l  br i1 %125, label %126, label %53, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x55249c0:s0 -> Node0x5524730;
	Node0x55249c0:s1 -> Node0x55249c0;
	Node0x5524730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%126:\l126:                                              \l  %127 = phi i32 [ 0, %44 ], [ %123, %53 ]\l  %128 = icmp eq i32 %49, 0\l  br i1 %128, label %163, label %129\l|{<s0>T|<s1>F}}"];
	Node0x5524730:s0 -> Node0x5523b00;
	Node0x5524730:s1 -> Node0x55257b0;
	Node0x55257b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%129:\l129:                                              \l  %130 = add nsw i32 %46, %127\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %7, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !11\l  %134 = fmul contract float %41, %133\l  %135 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %136 = mul nsw i32 %135, %42\l  %137 = add i32 %48, %127\l  %138 = add i32 %137, %136\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %9, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !11\l  %142 = fmul contract float %141, %11\l  %143 = fmul contract float %134, %10\l  %144 = fsub contract float %142, %143\l  %145 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %146 = mul nsw i32 %145, %42\l  %147 = add i32 %137, %146\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %9, i64 %148\l  store float %144, float addrspace(1)* %149, align 4, !tbaa !11\l  %150 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %151 = mul nsw i32 %150, %42\l  %152 = add i32 %137, %151\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %9, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !11\l  %156 = load volatile i32, i32* %14, align 4, !tbaa !7\l  %157 = mul nsw i32 %156, %42\l  %158 = add i32 %137, %157\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %8, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !11\l  %162 = fadd contract float %155, %161\l  store float %162, float addrspace(1)* %160, align 4, !tbaa !11\l  br label %163\l}"];
	Node0x55257b0 -> Node0x5523b00;
	Node0x5523b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%163:\l163:                                              \l  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %15) #3\l  ret void\l}"];
}
