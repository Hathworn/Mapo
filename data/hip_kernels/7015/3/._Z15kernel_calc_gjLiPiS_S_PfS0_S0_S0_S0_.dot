digraph "CFG for '_Z15kernel_calc_gjLiPiS_S_PfS0_S0_S0_S0_' function" {
	label="CFG for '_Z15kernel_calc_gjLiPiS_S_PfS0_S0_S0_S0_' function";

	Node0x49f20f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%9:\l  %10 = alloca i32, align 4, addrspace(5)\l  %11 = addrspacecast i32 addrspace(5)* %10 to i32*\l  %12 = bitcast i32 addrspace(5)* %10 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %12) #4\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = mul i32 %19, %18\l  %21 = add i32 %20, %13\l  store volatile i32 %21, i32* %11, align 4, !tbaa !7\l  %22 = sext i32 %0 to i64\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %22\l  %24 = load i32, i32 addrspace(1)* %23, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %25 = add nsw i32 %0, 1\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %26\l  %28 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %29 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %30 = add nsw i32 %24, -1\l  %31 = icmp slt i32 %29, %30\l  br i1 %31, label %32, label %220\l|{<s0>T|<s1>F}}"];
	Node0x49f20f0:s0 -> Node0x49f56d0;
	Node0x49f20f0:s1 -> Node0x49f5760;
	Node0x49f56d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%32:\l32:                                               \l  %33 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %22\l  %34 = load i32, i32 addrspace(1)* %33, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %35 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %36 = add nsw i32 %35, %34\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %4, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %40 = fneg contract float %39\l  %41 = fmul float %39, 0xBFF7154760000000\l  %42 = tail call float @llvm.rint.f32(float %41)\l  %43 = fcmp olt float %39, 0xC0562E4300000000\l  %44 = fcmp ogt float %39, 0x4059D1DA00000000\l  %45 = fneg float %41\l  %46 = tail call float @llvm.fma.f32(float %40, float 0x3FF7154760000000,\l... float %45)\l  %47 = tail call float @llvm.fma.f32(float %40, float 0x3E54AE0BE0000000,\l... float %46)\l  %48 = fsub float %41, %42\l  %49 = fadd float %47, %48\l  %50 = tail call float @llvm.exp2.f32(float %49)\l  %51 = fptosi float %42 to i32\l  %52 = tail call float @llvm.amdgcn.ldexp.f32(float %50, i32 %51)\l  %53 = select i1 %44, float 0.000000e+00, float %52\l  %54 = select i1 %43, float 0x7FF0000000000000, float %53\l  %55 = fadd contract float %54, 1.000000e+00\l  %56 = fmul contract float %55, %55\l  %57 = fdiv contract float %54, %56\l  %58 = add i32 %28, -1\l  %59 = icmp sgt i32 %28, 1\l  br i1 %59, label %60, label %95\l|{<s0>T|<s1>F}}"];
	Node0x49f56d0:s0 -> Node0x49f7d10;
	Node0x49f56d0:s1 -> Node0x49f7da0;
	Node0x49f7d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%60:\l60:                                               \l  %61 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %22\l  %62 = load i32, i32 addrspace(1)* %61, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %63 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %26\l  %64 = load i32, i32 addrspace(1)* %63, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %65 = add i32 %28, -2\l  %66 = and i32 %58, 7\l  %67 = icmp ult i32 %65, 7\l  br i1 %67, label %70, label %68\l|{<s0>T|<s1>F}}"];
	Node0x49f7d10:s0 -> Node0x49f5a50;
	Node0x49f7d10:s1 -> Node0x49f8630;
	Node0x49f8630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%68:\l68:                                               \l  %69 = and i32 %58, -8\l  br label %102\l}"];
	Node0x49f8630 -> Node0x49f8830;
	Node0x49f5a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%70:\l70:                                               \l  %71 = phi float [ undef, %60 ], [ %216, %102 ]\l  %72 = phi i32 [ 0, %60 ], [ %217, %102 ]\l  %73 = phi float [ 0.000000e+00, %60 ], [ %216, %102 ]\l  %74 = icmp eq i32 %66, 0\l  br i1 %74, label %95, label %75\l|{<s0>T|<s1>F}}"];
	Node0x49f5a50:s0 -> Node0x49f7da0;
	Node0x49f5a50:s1 -> Node0x49f9080;
	Node0x49f9080 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  %76 = phi i32 [ %92, %75 ], [ %72, %70 ]\l  %77 = phi float [ %91, %75 ], [ %73, %70 ]\l  %78 = phi i32 [ %93, %75 ], [ 0, %70 ]\l  %79 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %80 = mul nsw i32 %79, %58\l  %81 = add i32 %62, %76\l  %82 = add i32 %81, %80\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %8, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %86 = add nsw i32 %64, %76\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %7, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %90 = fmul contract float %85, %89\l  %91 = fadd contract float %77, %90\l  %92 = add nuw nsw i32 %76, 1\l  %93 = add i32 %78, 1\l  %94 = icmp eq i32 %93, %66\l  br i1 %94, label %95, label %75, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x49f9080:s0 -> Node0x49f7da0;
	Node0x49f9080:s1 -> Node0x49f9080;
	Node0x49f7da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%95:\l95:                                               \l  %96 = phi float [ 0.000000e+00, %32 ], [ %71, %70 ], [ %91, %75 ]\l  %97 = fmul contract float %57, %96\l  %98 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %99 = add nsw i32 %98, %34\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %7, i64 %100\l  store float %97, float addrspace(1)* %101, align 4, !tbaa !11\l  br label %220\l}"];
	Node0x49f7da0 -> Node0x49f5760;
	Node0x49f8830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%102:\l102:                                              \l  %103 = phi i32 [ 0, %68 ], [ %217, %102 ]\l  %104 = phi float [ 0.000000e+00, %68 ], [ %216, %102 ]\l  %105 = phi i32 [ 0, %68 ], [ %218, %102 ]\l  %106 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %107 = mul nsw i32 %106, %58\l  %108 = add i32 %62, %103\l  %109 = add i32 %108, %107\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %8, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %113 = add nsw i32 %64, %103\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %7, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %117 = fmul contract float %112, %116\l  %118 = fadd contract float %104, %117\l  %119 = or i32 %103, 1\l  %120 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %121 = mul nsw i32 %120, %58\l  %122 = add i32 %62, %119\l  %123 = add i32 %122, %121\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %8, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %127 = add nsw i32 %64, %119\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %7, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %131 = fmul contract float %126, %130\l  %132 = fadd contract float %118, %131\l  %133 = or i32 %103, 2\l  %134 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %135 = mul nsw i32 %134, %58\l  %136 = add i32 %62, %133\l  %137 = add i32 %136, %135\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %8, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %141 = add nsw i32 %64, %133\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %7, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %145 = fmul contract float %140, %144\l  %146 = fadd contract float %132, %145\l  %147 = or i32 %103, 3\l  %148 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %149 = mul nsw i32 %148, %58\l  %150 = add i32 %62, %147\l  %151 = add i32 %150, %149\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %8, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %155 = add nsw i32 %64, %147\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %7, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %159 = fmul contract float %154, %158\l  %160 = fadd contract float %146, %159\l  %161 = or i32 %103, 4\l  %162 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %163 = mul nsw i32 %162, %58\l  %164 = add i32 %62, %161\l  %165 = add i32 %164, %163\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %8, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %169 = add nsw i32 %64, %161\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %7, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %173 = fmul contract float %168, %172\l  %174 = fadd contract float %160, %173\l  %175 = or i32 %103, 5\l  %176 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %177 = mul nsw i32 %176, %58\l  %178 = add i32 %62, %175\l  %179 = add i32 %178, %177\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %8, i64 %180\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %183 = add nsw i32 %64, %175\l  %184 = sext i32 %183 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %7, i64 %184\l  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %187 = fmul contract float %182, %186\l  %188 = fadd contract float %174, %187\l  %189 = or i32 %103, 6\l  %190 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %191 = mul nsw i32 %190, %58\l  %192 = add i32 %62, %189\l  %193 = add i32 %192, %191\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %8, i64 %194\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %197 = add nsw i32 %64, %189\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %7, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %201 = fmul contract float %196, %200\l  %202 = fadd contract float %188, %201\l  %203 = or i32 %103, 7\l  %204 = load volatile i32, i32* %11, align 4, !tbaa !7\l  %205 = mul nsw i32 %204, %58\l  %206 = add i32 %62, %203\l  %207 = add i32 %206, %205\l  %208 = sext i32 %207 to i64\l  %209 = getelementptr inbounds float, float addrspace(1)* %8, i64 %208\l  %210 = load float, float addrspace(1)* %209, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %211 = add nsw i32 %64, %203\l  %212 = sext i32 %211 to i64\l  %213 = getelementptr inbounds float, float addrspace(1)* %7, i64 %212\l  %214 = load float, float addrspace(1)* %213, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %215 = fmul contract float %210, %214\l  %216 = fadd contract float %202, %215\l  %217 = add nuw nsw i32 %103, 8\l  %218 = add i32 %105, 8\l  %219 = icmp eq i32 %218, %69\l  br i1 %219, label %70, label %102, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x49f8830:s0 -> Node0x49f5a50;
	Node0x49f8830:s1 -> Node0x49f8830;
	Node0x49f5760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%220:\l220:                                              \l  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %12) #4\l  ret void\l}"];
}
