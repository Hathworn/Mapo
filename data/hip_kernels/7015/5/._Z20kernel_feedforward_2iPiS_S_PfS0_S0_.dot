digraph "CFG for '_Z20kernel_feedforward_2iPiS_S_PfS0_S0_' function" {
	label="CFG for '_Z20kernel_feedforward_2iPiS_S_PfS0_S0_' function";

	Node0x4debca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %9, %13\l  %15 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %14, %19\l  %22 = sext i32 %0 to i64\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %22\l  %24 = load i32, i32 addrspace(1)* %23, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %25 = add nsw i32 %0, -1\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %26\l  %28 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %29 = add nsw i32 %24, -1\l  %30 = icmp slt i32 %21, %29\l  br i1 %30, label %31, label %174\l|{<s0>T|<s1>F}}"];
	Node0x4debca0:s0 -> Node0x4deff00;
	Node0x4debca0:s1 -> Node0x4deff90;
	Node0x4deff00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%31:\l31:                                               \l  %32 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %26\l  %33 = load i32, i32 addrspace(1)* %32, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %34 = icmp slt i32 %20, %28\l  br i1 %34, label %35, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4deff00:s0 -> Node0x4ded8d0;
	Node0x4deff00:s1 -> Node0x4df0450;
	Node0x4ded8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%35:\l35:                                               \l  %36 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %26\l  %37 = load i32, i32 addrspace(1)* %36, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %38 = add i32 %37, %21\l  br label %51\l}"];
	Node0x4ded8d0 -> Node0x4df0730;
	Node0x4df0450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%39:\l39:                                               \l  %40 = phi float [ 0.000000e+00, %31 ], [ %64, %51 ]\l  %41 = mul nuw nsw i32 %20, %13\l  %42 = add nuw nsw i32 %41, %19\l  %43 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %42\l  %44 = bitcast i32 addrspace(3)* %43 to float addrspace(3)*\l  store float %40, float addrspace(3)* %44, align 4, !tbaa !11\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %45 = icmp eq i32 %20, 0\l  br i1 %45, label %46, label %174\l|{<s0>T|<s1>F}}"];
	Node0x4df0450:s0 -> Node0x4df1b20;
	Node0x4df0450:s1 -> Node0x4deff90;
	Node0x4df1b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%46:\l46:                                               \l  %47 = and i32 %18, 7\l  %48 = icmp ult i16 %17, 8\l  br i1 %48, label %67, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4df1b20:s0 -> Node0x4df1db0;
	Node0x4df1b20:s1 -> Node0x4df1e00;
	Node0x4df1e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%49:\l49:                                               \l  %50 = and i32 %18, 2040\l  br label %112\l}"];
	Node0x4df1e00 -> Node0x4df2000;
	Node0x4df0730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi i32 [ %20, %35 ], [ %65, %51 ]\l  %53 = phi float [ 0.000000e+00, %35 ], [ %64, %51 ]\l  %54 = mul nsw i32 %52, %29\l  %55 = add i32 %38, %54\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %6, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %59 = add nsw i32 %52, %33\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %5, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %63 = fmul contract float %58, %62\l  %64 = fadd contract float %53, %63\l  %65 = add nuw nsw i32 %52, %18\l  %66 = icmp slt i32 %65, %28\l  br i1 %66, label %51, label %39, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4df0730:s0 -> Node0x4df0730;
	Node0x4df0730:s1 -> Node0x4df0450;
	Node0x4df1db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%67:\l67:                                               \l  %68 = phi float [ undef, %46 ], [ %170, %112 ]\l  %69 = phi i32 [ 0, %46 ], [ %171, %112 ]\l  %70 = phi float [ 0.000000e+00, %46 ], [ %170, %112 ]\l  %71 = icmp eq i32 %47, 0\l  br i1 %71, label %85, label %72\l|{<s0>T|<s1>F}}"];
	Node0x4df1db0:s0 -> Node0x4df3a70;
	Node0x4df1db0:s1 -> Node0x4df3b00;
	Node0x4df3b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%72:\l72:                                               \l  %73 = phi i32 [ %82, %72 ], [ %69, %67 ]\l  %74 = phi float [ %81, %72 ], [ %70, %67 ]\l  %75 = phi i32 [ %83, %72 ], [ 0, %67 ]\l  %76 = mul nuw nsw i32 %73, %13\l  %77 = add nuw nsw i32 %76, %19\l  %78 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %77\l  %79 = bitcast i32 addrspace(3)* %78 to float addrspace(3)*\l  %80 = load float, float addrspace(3)* %79, align 4, !tbaa !11\l  %81 = fadd contract float %74, %80\l  %82 = add nuw nsw i32 %73, 1\l  %83 = add i32 %75, 1\l  %84 = icmp eq i32 %83, %47\l  br i1 %84, label %85, label %72, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4df3b00:s0 -> Node0x4df3a70;
	Node0x4df3b00:s1 -> Node0x4df3b00;
	Node0x4df3a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%85:\l85:                                               \l  %86 = phi float [ %68, %67 ], [ %81, %72 ]\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %22\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %89 = add nsw i32 %88, %21\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %4, i64 %90\l  store float %86, float addrspace(1)* %91, align 4, !tbaa !11\l  %92 = fneg contract float %86\l  %93 = fmul float %86, 0xBFF7154760000000\l  %94 = tail call float @llvm.rint.f32(float %93)\l  %95 = fcmp olt float %86, 0xC0562E4300000000\l  %96 = fcmp ogt float %86, 0x4059D1DA00000000\l  %97 = fneg float %93\l  %98 = tail call float @llvm.fma.f32(float %92, float 0x3FF7154760000000,\l... float %97)\l  %99 = tail call float @llvm.fma.f32(float %92, float 0x3E54AE0BE0000000,\l... float %98)\l  %100 = fsub float %93, %94\l  %101 = fadd float %99, %100\l  %102 = tail call float @llvm.exp2.f32(float %101)\l  %103 = fptosi float %94 to i32\l  %104 = tail call float @llvm.amdgcn.ldexp.f32(float %102, i32 %103)\l  %105 = select i1 %96, float 0.000000e+00, float %104\l  %106 = select i1 %95, float 0x7FF0000000000000, float %105\l  %107 = fpext float %106 to double\l  %108 = fadd contract double %107, 1.000000e+00\l  %109 = fdiv contract double 1.000000e+00, %108\l  %110 = fptrunc double %109 to float\l  %111 = getelementptr inbounds float, float addrspace(1)* %5, i64 %90\l  store float %110, float addrspace(1)* %111, align 4, !tbaa !11\l  br label %174\l}"];
	Node0x4df3a70 -> Node0x4deff90;
	Node0x4df2000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%112:\l112:                                              \l  %113 = phi i32 [ 0, %49 ], [ %171, %112 ]\l  %114 = phi float [ 0.000000e+00, %49 ], [ %170, %112 ]\l  %115 = phi i32 [ 0, %49 ], [ %172, %112 ]\l  %116 = mul nuw nsw i32 %113, %13\l  %117 = add nuw nsw i32 %116, %19\l  %118 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %117\l  %119 = bitcast i32 addrspace(3)* %118 to float addrspace(3)*\l  %120 = load float, float addrspace(3)* %119, align 4, !tbaa !11\l  %121 = fadd contract float %114, %120\l  %122 = or i32 %113, 1\l  %123 = mul nuw nsw i32 %122, %13\l  %124 = add nuw nsw i32 %123, %19\l  %125 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %124\l  %126 = bitcast i32 addrspace(3)* %125 to float addrspace(3)*\l  %127 = load float, float addrspace(3)* %126, align 4, !tbaa !11\l  %128 = fadd contract float %121, %127\l  %129 = or i32 %113, 2\l  %130 = mul nuw nsw i32 %129, %13\l  %131 = add nuw nsw i32 %130, %19\l  %132 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %131\l  %133 = bitcast i32 addrspace(3)* %132 to float addrspace(3)*\l  %134 = load float, float addrspace(3)* %133, align 4, !tbaa !11\l  %135 = fadd contract float %128, %134\l  %136 = or i32 %113, 3\l  %137 = mul nuw nsw i32 %136, %13\l  %138 = add nuw nsw i32 %137, %19\l  %139 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %138\l  %140 = bitcast i32 addrspace(3)* %139 to float addrspace(3)*\l  %141 = load float, float addrspace(3)* %140, align 4, !tbaa !11\l  %142 = fadd contract float %135, %141\l  %143 = or i32 %113, 4\l  %144 = mul nuw nsw i32 %143, %13\l  %145 = add nuw nsw i32 %144, %19\l  %146 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %145\l  %147 = bitcast i32 addrspace(3)* %146 to float addrspace(3)*\l  %148 = load float, float addrspace(3)* %147, align 4, !tbaa !11\l  %149 = fadd contract float %142, %148\l  %150 = or i32 %113, 5\l  %151 = mul nuw nsw i32 %150, %13\l  %152 = add nuw nsw i32 %151, %19\l  %153 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %152\l  %154 = bitcast i32 addrspace(3)* %153 to float addrspace(3)*\l  %155 = load float, float addrspace(3)* %154, align 4, !tbaa !11\l  %156 = fadd contract float %149, %155\l  %157 = or i32 %113, 6\l  %158 = mul nuw nsw i32 %157, %13\l  %159 = add nuw nsw i32 %158, %19\l  %160 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %159\l  %161 = bitcast i32 addrspace(3)* %160 to float addrspace(3)*\l  %162 = load float, float addrspace(3)* %161, align 4, !tbaa !11\l  %163 = fadd contract float %156, %162\l  %164 = or i32 %113, 7\l  %165 = mul nuw nsw i32 %164, %13\l  %166 = add nuw nsw i32 %165, %19\l  %167 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %166\l  %168 = bitcast i32 addrspace(3)* %167 to float addrspace(3)*\l  %169 = load float, float addrspace(3)* %168, align 4, !tbaa !11\l  %170 = fadd contract float %163, %169\l  %171 = add nuw nsw i32 %113, 8\l  %172 = add i32 %115, 8\l  %173 = icmp eq i32 %172, %50\l  br i1 %173, label %67, label %112, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4df2000:s0 -> Node0x4df1db0;
	Node0x4df2000:s1 -> Node0x4df2000;
	Node0x4deff90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%174:\l174:                                              \l  ret void\l}"];
}
