digraph "CFG for '_Z17kernel_calc_gjL_2iPiS_S_PfS0_S0_S0_S0_' function" {
	label="CFG for '_Z17kernel_calc_gjL_2iPiS_S_PfS0_S0_S0_S0_' function";

	Node0x63b35e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %13 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 2, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %12, %16\l  %18 = add i32 %17, %10\l  %19 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %24 = sext i32 %0 to i64\l  %25 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %24\l  %26 = load i32, i32 addrspace(1)* %25, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %27 = add nsw i32 %0, 1\l  %28 = sext i32 %27 to i64\l  %29 = add nsw i32 %26, -1\l  %30 = icmp slt i32 %18, %29\l  br i1 %30, label %31, label %169\l|{<s0>T|<s1>F}}"];
	Node0x63b35e0:s0 -> Node0x63b7760;
	Node0x63b35e0:s1 -> Node0x63b77f0;
	Node0x63b7760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%31:\l31:                                               \l  %32 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %28\l  %33 = load i32, i32 addrspace(1)* %32, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %34 = add nsw i32 %33, -1\l  %35 = icmp slt i32 %23, %34\l  br i1 %35, label %36, label %42\l|{<s0>T|<s1>F}}"];
	Node0x63b7760:s0 -> Node0x63b8280;
	Node0x63b7760:s1 -> Node0x63b8310;
	Node0x63b8280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%36:\l36:                                               \l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %24\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %39 = mul nsw i32 %34, %18\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %28\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  br label %49\l}"];
	Node0x63b8280 -> Node0x63b8770;
	Node0x63b8310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%42:\l42:                                               \l  %43 = phi float [ 0.000000e+00, %31 ], [ %62, %49 ]\l  %44 = mul nuw nsw i32 %10, %22\l  %45 = add nuw nsw i32 %44, %23\l  %46 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %45\l  %47 = bitcast i32 addrspace(3)* %46 to float addrspace(3)*\l  store float %43, float addrspace(3)* %47, align 4, !tbaa !11\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %48 = icmp eq i32 %23, 0\l  br i1 %48, label %65, label %169\l|{<s0>T|<s1>F}}"];
	Node0x63b8310:s0 -> Node0x63b9b60;
	Node0x63b8310:s1 -> Node0x63b77f0;
	Node0x63b8770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  %50 = phi float [ 0.000000e+00, %36 ], [ %62, %49 ]\l  %51 = phi i32 [ %23, %36 ], [ %63, %49 ]\l  %52 = add i32 %51, %39\l  %53 = add i32 %52, %38\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %8, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %57 = add nsw i32 %41, %51\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %7, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %61 = fmul contract float %56, %60\l  %62 = fadd contract float %50, %61\l  %63 = add nuw nsw i32 %51, %22\l  %64 = icmp slt i32 %63, %34\l  br i1 %64, label %49, label %42, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x63b8770:s0 -> Node0x63b8770;
	Node0x63b8770:s1 -> Node0x63b8310;
	Node0x63b9b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%65:\l65:                                               \l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %24\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %68 = add nsw i32 %67, %18\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %4, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %72 = fneg contract float %71\l  %73 = fmul float %71, 0xBFF7154760000000\l  %74 = tail call float @llvm.rint.f32(float %73)\l  %75 = fcmp olt float %71, 0xC0562E4300000000\l  %76 = fcmp ogt float %71, 0x4059D1DA00000000\l  %77 = fneg float %73\l  %78 = tail call float @llvm.fma.f32(float %72, float 0x3FF7154760000000,\l... float %77)\l  %79 = tail call float @llvm.fma.f32(float %72, float 0x3E54AE0BE0000000,\l... float %78)\l  %80 = fsub float %73, %74\l  %81 = fadd float %79, %80\l  %82 = tail call float @llvm.exp2.f32(float %81)\l  %83 = fptosi float %74 to i32\l  %84 = tail call float @llvm.amdgcn.ldexp.f32(float %82, i32 %83)\l  %85 = select i1 %76, float 0.000000e+00, float %84\l  %86 = select i1 %75, float 0x7FF0000000000000, float %85\l  %87 = fadd contract float %86, 1.000000e+00\l  %88 = fmul contract float %87, %87\l  %89 = and i32 %22, 7\l  %90 = icmp ult i16 %21, 8\l  br i1 %90, label %93, label %91\l|{<s0>T|<s1>F}}"];
	Node0x63b9b60:s0 -> Node0x63bc600;
	Node0x63b9b60:s1 -> Node0x63bc690;
	Node0x63bc690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%91:\l91:                                               \l  %92 = and i32 %22, 2040\l  br label %115\l}"];
	Node0x63bc690 -> Node0x63bc890;
	Node0x63bc600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%93:\l93:                                               \l  %94 = phi float [ undef, %65 ], [ %165, %115 ]\l  %95 = phi i32 [ 0, %65 ], [ %166, %115 ]\l  %96 = phi float [ 0.000000e+00, %65 ], [ %165, %115 ]\l  %97 = icmp eq i32 %89, 0\l  br i1 %97, label %110, label %98\l|{<s0>T|<s1>F}}"];
	Node0x63bc600:s0 -> Node0x63bd0b0;
	Node0x63bc600:s1 -> Node0x63bd140;
	Node0x63bd140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%98:\l98:                                               \l  %99 = phi i32 [ %107, %98 ], [ %95, %93 ]\l  %100 = phi float [ %106, %98 ], [ %96, %93 ]\l  %101 = phi i32 [ %108, %98 ], [ 0, %93 ]\l  %102 = add nuw nsw i32 %99, %44\l  %103 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %102\l  %104 = bitcast i32 addrspace(3)* %103 to float addrspace(3)*\l  %105 = load float, float addrspace(3)* %104, align 4, !tbaa !11\l  %106 = fadd contract float %100, %105\l  %107 = add nuw nsw i32 %99, 1\l  %108 = add i32 %101, 1\l  %109 = icmp eq i32 %108, %89\l  br i1 %109, label %110, label %98, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x63bd140:s0 -> Node0x63bd0b0;
	Node0x63bd140:s1 -> Node0x63bd140;
	Node0x63bd0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%110:\l110:                                              \l  %111 = phi float [ %94, %93 ], [ %106, %98 ]\l  %112 = fdiv contract float %86, %88\l  %113 = fmul contract float %112, %111\l  %114 = getelementptr inbounds float, float addrspace(1)* %7, i64 %69\l  store float %113, float addrspace(1)* %114, align 4, !tbaa !11\l  br label %169\l}"];
	Node0x63bd0b0 -> Node0x63b77f0;
	Node0x63bc890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%115:\l115:                                              \l  %116 = phi i32 [ 0, %91 ], [ %166, %115 ]\l  %117 = phi float [ 0.000000e+00, %91 ], [ %165, %115 ]\l  %118 = phi i32 [ 0, %91 ], [ %167, %115 ]\l  %119 = add nuw nsw i32 %116, %44\l  %120 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %119\l  %121 = bitcast i32 addrspace(3)* %120 to float addrspace(3)*\l  %122 = load float, float addrspace(3)* %121, align 4, !tbaa !11\l  %123 = fadd contract float %117, %122\l  %124 = or i32 %116, 1\l  %125 = add nuw nsw i32 %124, %44\l  %126 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %125\l  %127 = bitcast i32 addrspace(3)* %126 to float addrspace(3)*\l  %128 = load float, float addrspace(3)* %127, align 4, !tbaa !11\l  %129 = fadd contract float %123, %128\l  %130 = or i32 %116, 2\l  %131 = add nuw nsw i32 %130, %44\l  %132 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %131\l  %133 = bitcast i32 addrspace(3)* %132 to float addrspace(3)*\l  %134 = load float, float addrspace(3)* %133, align 4, !tbaa !11\l  %135 = fadd contract float %129, %134\l  %136 = or i32 %116, 3\l  %137 = add nuw nsw i32 %136, %44\l  %138 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %137\l  %139 = bitcast i32 addrspace(3)* %138 to float addrspace(3)*\l  %140 = load float, float addrspace(3)* %139, align 4, !tbaa !11\l  %141 = fadd contract float %135, %140\l  %142 = or i32 %116, 4\l  %143 = add nuw nsw i32 %142, %44\l  %144 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %143\l  %145 = bitcast i32 addrspace(3)* %144 to float addrspace(3)*\l  %146 = load float, float addrspace(3)* %145, align 4, !tbaa !11\l  %147 = fadd contract float %141, %146\l  %148 = or i32 %116, 5\l  %149 = add nuw nsw i32 %148, %44\l  %150 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %149\l  %151 = bitcast i32 addrspace(3)* %150 to float addrspace(3)*\l  %152 = load float, float addrspace(3)* %151, align 4, !tbaa !11\l  %153 = fadd contract float %147, %152\l  %154 = or i32 %116, 6\l  %155 = add nuw nsw i32 %154, %44\l  %156 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %155\l  %157 = bitcast i32 addrspace(3)* %156 to float addrspace(3)*\l  %158 = load float, float addrspace(3)* %157, align 4, !tbaa !11\l  %159 = fadd contract float %153, %158\l  %160 = or i32 %116, 7\l  %161 = add nuw nsw i32 %160, %44\l  %162 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sm, i32 0,\l... i32 %161\l  %163 = bitcast i32 addrspace(3)* %162 to float addrspace(3)*\l  %164 = load float, float addrspace(3)* %163, align 4, !tbaa !11\l  %165 = fadd contract float %159, %164\l  %166 = add nuw nsw i32 %116, 8\l  %167 = add i32 %118, 8\l  %168 = icmp eq i32 %167, %92\l  br i1 %168, label %93, label %115, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x63bc890:s0 -> Node0x63bc600;
	Node0x63bc890:s1 -> Node0x63bc890;
	Node0x63b77f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%169:\l169:                                              \l  ret void\l}"];
}
