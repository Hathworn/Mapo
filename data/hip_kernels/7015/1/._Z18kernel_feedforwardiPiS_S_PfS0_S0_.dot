digraph "CFG for '_Z18kernel_feedforwardiPiS_S_PfS0_S0_' function" {
	label="CFG for '_Z18kernel_feedforwardiPiS_S_PfS0_S0_' function";

	Node0x4f56080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = alloca i32, align 4, addrspace(5)\l  %9 = addrspacecast i32 addrspace(5)* %8 to i32*\l  %10 = bitcast i32 addrspace(5)* %8 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %10) #4\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = mul i32 %17, %16\l  %19 = add i32 %18, %11\l  store volatile i32 %19, i32* %9, align 4, !tbaa !7\l  %20 = sext i32 %0 to i64\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %20\l  %22 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %23 = add nsw i32 %0, -1\l  %24 = sext i32 %23 to i64\l  %25 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %24\l  %26 = load i32, i32 addrspace(1)* %25, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %27 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %28 = add nsw i32 %22, -1\l  %29 = icmp slt i32 %27, %28\l  br i1 %29, label %30, label %215\l|{<s0>T|<s1>F}}"];
	Node0x4f56080:s0 -> Node0x4f59630;
	Node0x4f56080:s1 -> Node0x4f596c0;
	Node0x4f59630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%30:\l30:                                               \l  %31 = icmp sgt i32 %26, 0\l  br i1 %31, label %32, label %66\l|{<s0>T|<s1>F}}"];
	Node0x4f59630:s0 -> Node0x4f59890;
	Node0x4f59630:s1 -> Node0x4f598e0;
	Node0x4f59890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%32:\l32:                                               \l  %33 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %24\l  %34 = load i32, i32 addrspace(1)* %33, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %24\l  %36 = load i32, i32 addrspace(1)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %37 = and i32 %26, 7\l  %38 = icmp ult i32 %26, 8\l  br i1 %38, label %41, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4f59890:s0 -> Node0x4f59f00;
	Node0x4f59890:s1 -> Node0x4f59f90;
	Node0x4f59f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%39:\l39:                                               \l  %40 = and i32 %26, -8\l  br label %97\l}"];
	Node0x4f59f90 -> Node0x4f5a190;
	Node0x4f59f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = phi float [ undef, %32 ], [ %211, %97 ]\l  %43 = phi i32 [ 0, %32 ], [ %212, %97 ]\l  %44 = phi float [ 0.000000e+00, %32 ], [ %211, %97 ]\l  %45 = icmp eq i32 %37, 0\l  br i1 %45, label %66, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4f59f00:s0 -> Node0x4f598e0;
	Node0x4f59f00:s1 -> Node0x4f5b400;
	Node0x4f5b400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi i32 [ %63, %46 ], [ %43, %41 ]\l  %48 = phi float [ %62, %46 ], [ %44, %41 ]\l  %49 = phi i32 [ %64, %46 ], [ 0, %41 ]\l  %50 = mul nsw i32 %47, %28\l  %51 = add nsw i32 %34, %50\l  %52 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %53 = add nsw i32 %51, %52\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %6, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %57 = add nsw i32 %36, %47\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %5, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %61 = fmul contract float %56, %60\l  %62 = fadd contract float %48, %61\l  %63 = add nuw nsw i32 %47, 1\l  %64 = add i32 %49, 1\l  %65 = icmp eq i32 %64, %37\l  br i1 %65, label %66, label %46, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f5b400:s0 -> Node0x4f598e0;
	Node0x4f5b400:s1 -> Node0x4f5b400;
	Node0x4f598e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%66:\l66:                                               \l  %67 = phi float [ 0.000000e+00, %30 ], [ %42, %41 ], [ %62, %46 ]\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %20\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %70 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %71 = add nsw i32 %70, %69\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %4, i64 %72\l  store float %67, float addrspace(1)* %73, align 4, !tbaa !11\l  %74 = fneg contract float %67\l  %75 = fmul float %67, 0xBFF7154760000000\l  %76 = tail call float @llvm.rint.f32(float %75)\l  %77 = fcmp olt float %67, 0xC0562E4300000000\l  %78 = fcmp ogt float %67, 0x4059D1DA00000000\l  %79 = fneg float %75\l  %80 = tail call float @llvm.fma.f32(float %74, float 0x3FF7154760000000,\l... float %79)\l  %81 = tail call float @llvm.fma.f32(float %74, float 0x3E54AE0BE0000000,\l... float %80)\l  %82 = fsub float %75, %76\l  %83 = fadd float %81, %82\l  %84 = tail call float @llvm.exp2.f32(float %83)\l  %85 = fptosi float %76 to i32\l  %86 = tail call float @llvm.amdgcn.ldexp.f32(float %84, i32 %85)\l  %87 = select i1 %78, float 0.000000e+00, float %86\l  %88 = select i1 %77, float 0x7FF0000000000000, float %87\l  %89 = fpext float %88 to double\l  %90 = fadd contract double %89, 1.000000e+00\l  %91 = fdiv contract double 1.000000e+00, %90\l  %92 = fptrunc double %91 to float\l  %93 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %94 = add nsw i32 %93, %69\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %5, i64 %95\l  store float %92, float addrspace(1)* %96, align 4, !tbaa !11\l  br label %215\l}"];
	Node0x4f598e0 -> Node0x4f596c0;
	Node0x4f5a190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%97:\l97:                                               \l  %98 = phi i32 [ 0, %39 ], [ %212, %97 ]\l  %99 = phi float [ 0.000000e+00, %39 ], [ %211, %97 ]\l  %100 = phi i32 [ 0, %39 ], [ %213, %97 ]\l  %101 = mul nsw i32 %98, %28\l  %102 = add nsw i32 %34, %101\l  %103 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %104 = add nsw i32 %102, %103\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %6, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %108 = add nsw i32 %36, %98\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %5, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %112 = fmul contract float %107, %111\l  %113 = fadd contract float %99, %112\l  %114 = or i32 %98, 1\l  %115 = mul nsw i32 %114, %28\l  %116 = add nsw i32 %34, %115\l  %117 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %118 = add nsw i32 %116, %117\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %6, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %122 = add nsw i32 %36, %114\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %5, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %126 = fmul contract float %121, %125\l  %127 = fadd contract float %113, %126\l  %128 = or i32 %98, 2\l  %129 = mul nsw i32 %128, %28\l  %130 = add nsw i32 %34, %129\l  %131 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %132 = add nsw i32 %130, %131\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %6, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %136 = add nsw i32 %36, %128\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %5, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %140 = fmul contract float %135, %139\l  %141 = fadd contract float %127, %140\l  %142 = or i32 %98, 3\l  %143 = mul nsw i32 %142, %28\l  %144 = add nsw i32 %34, %143\l  %145 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %146 = add nsw i32 %144, %145\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %6, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %150 = add nsw i32 %36, %142\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %5, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %154 = fmul contract float %149, %153\l  %155 = fadd contract float %141, %154\l  %156 = or i32 %98, 4\l  %157 = mul nsw i32 %156, %28\l  %158 = add nsw i32 %34, %157\l  %159 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %160 = add nsw i32 %158, %159\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %6, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %164 = add nsw i32 %36, %156\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %5, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %168 = fmul contract float %163, %167\l  %169 = fadd contract float %155, %168\l  %170 = or i32 %98, 5\l  %171 = mul nsw i32 %170, %28\l  %172 = add nsw i32 %34, %171\l  %173 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %174 = add nsw i32 %172, %173\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %6, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %178 = add nsw i32 %36, %170\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %5, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %182 = fmul contract float %177, %181\l  %183 = fadd contract float %169, %182\l  %184 = or i32 %98, 6\l  %185 = mul nsw i32 %184, %28\l  %186 = add nsw i32 %34, %185\l  %187 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %188 = add nsw i32 %186, %187\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %6, i64 %189\l  %191 = load float, float addrspace(1)* %190, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %192 = add nsw i32 %36, %184\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds float, float addrspace(1)* %5, i64 %193\l  %195 = load float, float addrspace(1)* %194, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %196 = fmul contract float %191, %195\l  %197 = fadd contract float %183, %196\l  %198 = or i32 %98, 7\l  %199 = mul nsw i32 %198, %28\l  %200 = add nsw i32 %34, %199\l  %201 = load volatile i32, i32* %9, align 4, !tbaa !7\l  %202 = add nsw i32 %200, %201\l  %203 = sext i32 %202 to i64\l  %204 = getelementptr inbounds float, float addrspace(1)* %6, i64 %203\l  %205 = load float, float addrspace(1)* %204, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %206 = add nsw i32 %36, %198\l  %207 = sext i32 %206 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %5, i64 %207\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %210 = fmul contract float %205, %209\l  %211 = fadd contract float %197, %210\l  %212 = add nuw nsw i32 %98, 8\l  %213 = add i32 %100, 8\l  %214 = icmp eq i32 %213, %40\l  br i1 %214, label %41, label %97, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4f5a190:s0 -> Node0x4f59f00;
	Node0x4f5a190:s1 -> Node0x4f5a190;
	Node0x4f596c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%215:\l215:                                              \l  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %10) #4\l  ret void\l}"];
}
