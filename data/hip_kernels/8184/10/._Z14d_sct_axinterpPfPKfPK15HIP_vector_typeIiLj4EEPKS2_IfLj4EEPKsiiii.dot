digraph "CFG for '_Z14d_sct_axinterpPfPKfPK15HIP_vector_typeIiLj4EEPKS2_IfLj4EEPKsiiii' function" {
	label="CFG for '_Z14d_sct_axinterpPfPKfPK15HIP_vector_typeIiLj4EEPKS2_IfLj4EEPKsiiii' function";

	Node0x5282aa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %12 = trunc i32 %11 to i8\l  %13 = shl i8 %12, 1\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = zext i32 %14 to i64\l  %16 = shl i64 %15, 48\l  %17 = ashr exact i64 %16, 48\l  %18 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %3, i64 %17, i32 0, i32 0, i32 0, i64\l... 0\l  %19 = load float, float addrspace(1)* %18, align 16, !tbaa !5,\l... !amdgpu.noclobber !8\l  %20 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %17, i32 0, i32 0, i32 0, i64 0\l  %21 = load i32, i32 addrspace(1)* %20, align 16, !tbaa !5, !amdgpu.noclobber\l... !8\l  %22 = mul nsw i32 %21, %5\l  %23 = sext i8 %13 to i32\l  %24 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %25 = getelementptr i8, i8 addrspace(4)* %24, i64 4\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 4, !range !9, !invariant.load !8\l  %28 = zext i16 %27 to i32\l  %29 = mul nsw i32 %28, %23\l  %30 = shl i32 %10, 24\l  %31 = ashr exact i32 %30, 24\l  %32 = add nsw i32 %29, %31\l  %33 = add i32 %32, %22\l  %34 = zext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %1, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %37 = fmul contract float %19, %36\l  %38 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %3, i64 %17, i32 0, i32 0, i32 0, i64\l... 1\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !5,\l... !amdgpu.noclobber !8\l  %40 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %17, i32 0, i32 0, i32 0, i64 1\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !5, !amdgpu.noclobber\l... !8\l  %42 = mul nsw i32 %41, %5\l  %43 = add i32 %32, %42\l  %44 = zext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %47 = fmul contract float %39, %46\l  %48 = fadd contract float %37, %47\l  %49 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %3, i64 %17, i32 0, i32 0, i32 0, i64\l... 2\l  %50 = load float, float addrspace(1)* %49, align 8, !tbaa !5,\l... !amdgpu.noclobber !8\l  %51 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %17, i32 0, i32 0, i32 0, i64 2\l  %52 = load i32, i32 addrspace(1)* %51, align 8, !tbaa !5, !amdgpu.noclobber\l... !8\l  %53 = mul nsw i32 %52, %5\l  %54 = add i32 %32, %53\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %1, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %58 = fmul contract float %50, %57\l  %59 = fadd contract float %48, %58\l  %60 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %3, i64 %17, i32 0, i32 0, i32 0, i64\l... 3\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !5,\l... !amdgpu.noclobber !8\l  %62 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %17, i32 0, i32 0, i32 0, i64 3\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !5, !amdgpu.noclobber\l... !8\l  %64 = mul nsw i32 %63, %5\l  %65 = add i32 %32, %64\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %69 = fmul contract float %61, %68\l  %70 = fadd contract float %59, %69\l  %71 = or i8 %13, 1\l  %72 = sext i8 %71 to i32\l  %73 = mul nsw i32 %28, %72\l  %74 = add nsw i32 %73, %31\l  %75 = add i32 %74, %22\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %79 = fmul contract float %19, %78\l  %80 = add i32 %74, %42\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %84 = fmul contract float %39, %83\l  %85 = fadd contract float %79, %84\l  %86 = add i32 %74, %53\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %90 = fmul contract float %50, %89\l  %91 = fadd contract float %85, %90\l  %92 = add i32 %74, %64\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !10,\l... !amdgpu.noclobber !8\l  %96 = fmul contract float %61, %95\l  %97 = fadd contract float %91, %96\l  switch i32 %7, label %136 [\l    i32 1, label %98\l    i32 11, label %112\l  ]\l|{<s0>def|<s1>1|<s2>11}}"];
	Node0x5282aa0:s0 -> Node0x528a7a0;
	Node0x5282aa0:s1 -> Node0x528a830;
	Node0x5282aa0:s2 -> Node0x528a8f0;
	Node0x528a830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%98:\l98:                                               \l  %99 = shl i32 %14, 16\l  %100 = ashr exact i32 %99, 16\l  %101 = mul nsw i32 %100, %5\l  %102 = add nsw i32 %101, %8\l  %103 = add nsw i32 %72, -1\l  %104 = mul nsw i32 %103, %28\l  %105 = add i32 %102, %31\l  %106 = add i32 %105, %104\l  %107 = zext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  store float %70, float addrspace(1)* %108, align 4, !tbaa !10\l  %109 = add i32 %74, %102\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  store float %97, float addrspace(1)* %111, align 4, !tbaa !10\l  br label %136\l}"];
	Node0x528a830 -> Node0x528a7a0;
	Node0x528a8f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%112:\l112:                                              \l  %113 = shl i32 %14, 16\l  %114 = ashr exact i32 %113, 16\l  %115 = icmp slt i32 %114, %6\l  br i1 %115, label %116, label %136\l|{<s0>T|<s1>F}}"];
	Node0x528a8f0:s0 -> Node0x528b5a0;
	Node0x528a8f0:s1 -> Node0x528a7a0;
	Node0x528b5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%116:\l116:                                              \l  %117 = getelementptr inbounds i16, i16 addrspace(1)* %4, i64 %17\l  %118 = load i16, i16 addrspace(1)* %117, align 2, !tbaa !12,\l... !amdgpu.noclobber !8\l  %119 = sext i32 %8 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = sext i16 %118 to i32\l  %122 = mul nsw i32 %121, %5\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %120, i64 %123\l  %125 = add nsw i32 %72, -1\l  %126 = mul nsw i32 %125, %28\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %124, i64 %127\l  %129 = sext i32 %31 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %128, i64 %129\l  %131 = atomicrmw fadd float addrspace(1)* %130, float %70\l... syncscope(\"agent-one-as\") monotonic, align 4\l  %132 = zext i32 %73 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %124, i64 %132\l  %134 = getelementptr inbounds float, float addrspace(1)* %133, i64 %129\l  %135 = atomicrmw fadd float addrspace(1)* %134, float %97\l... syncscope(\"agent-one-as\") monotonic, align 4\l  br label %136\l}"];
	Node0x528b5a0 -> Node0x528a7a0;
	Node0x528a7a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%136:\l136:                                              \l  ret void\l}"];
}
