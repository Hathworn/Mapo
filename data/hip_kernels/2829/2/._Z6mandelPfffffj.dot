digraph "CFG for '_Z6mandelPfffffj' function" {
	label="CFG for '_Z6mandelPfffffj' function";

	Node0x58074e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = udiv i32 %14, %11\l  %17 = mul i32 %16, %11\l  %18 = icmp ugt i32 %14, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = fsub contract float %2, %1\l  %22 = uitofp i16 %10 to float\l  %23 = fdiv contract float %21, %22\l  %24 = fsub contract float %4, %3\l  %25 = sitofp i32 %20 to float\l  %26 = fdiv contract float %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = uitofp i32 %27 to float\l  %29 = fadd contract float %28, 5.000000e-01\l  %30 = fmul contract float %29, %23\l  %31 = fadd contract float %30, %1\l  %32 = uitofp i32 %15 to float\l  %33 = fadd contract float %32, 5.000000e-01\l  %34 = fmul contract float %33, %26\l  %35 = fadd contract float %34, %3\l  %36 = icmp eq i32 %5, 0\l  br i1 %36, label %55, label %37\l|{<s0>T|<s1>F}}"];
	Node0x58074e0:s0 -> Node0x5809280;
	Node0x58074e0:s1 -> Node0x580ac10;
	Node0x580ac10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi i32 [ %53, %52 ], [ 0, %6 ]\l  %39 = phi float [ %49, %52 ], [ 0.000000e+00, %6 ]\l  %40 = phi float [ %48, %52 ], [ 0.000000e+00, %6 ]\l  %41 = phi float [ %45, %52 ], [ 0.000000e+00, %6 ]\l  %42 = phi float [ %47, %52 ], [ 0.000000e+00, %6 ]\l  %43 = fmul contract float %41, %42\l  %44 = fadd contract float %35, %43\l  %45 = fadd contract float %43, %44\l  %46 = fsub contract float %40, %39\l  %47 = fadd contract float %31, %46\l  %48 = fmul contract float %47, %47\l  %49 = fmul contract float %45, %45\l  %50 = fadd contract float %48, %49\l  %51 = fcmp contract ogt float %50, 4.000000e+00\l  br i1 %51, label %55, label %52\l|{<s0>T|<s1>F}}"];
	Node0x580ac10:s0 -> Node0x5809280;
	Node0x580ac10:s1 -> Node0x580ad50;
	Node0x580ad50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%52:\l52:                                               \l  %53 = add nuw i32 %38, 1\l  %54 = icmp eq i32 %53, %5\l  br i1 %54, label %55, label %37, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x580ad50:s0 -> Node0x5809280;
	Node0x580ad50:s1 -> Node0x580ac10;
	Node0x5809280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%55:\l55:                                               \l  %56 = phi i32 [ 0, %6 ], [ %5, %52 ], [ %38, %37 ]\l  %57 = mul i32 %15, %11\l  %58 = icmp eq i32 %56, %5\l  %59 = select i1 %58, %struct.HIP_vector_base zeroinitializer,\l... %struct.HIP_vector_base \{ %union.anon \{ %\"struct.HIP_vector_base\<float,\l... 3\>::Native_vec_\" \{ [3 x float] [float 1.000000e+00, float 1.000000e+00, float\l... 1.000000e+00] \} \} \}\l  %60 = extractvalue %struct.HIP_vector_base %59, 0, 0, 0, 0\l  %61 = extractvalue %struct.HIP_vector_base %59, 0, 0, 0, 1\l  %62 = extractvalue %struct.HIP_vector_base %59, 0, 0, 0, 2\l  %63 = add i32 %57, %27\l  %64 = mul nsw i32 %63, 3\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  store float %60, float addrspace(1)* %66, align 4, !tbaa !18\l  %67 = add nsw i32 %64, 1\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  store float %61, float addrspace(1)* %69, align 4, !tbaa !18\l  %70 = add nsw i32 %64, 2\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  store float %62, float addrspace(1)* %72, align 4, !tbaa !18\l  ret void\l}"];
}
