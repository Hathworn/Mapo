digraph "CFG for '_Z32DeformablePSROIPoolForwardKerneliPKddiiiiiS0_S0_idiiiiiiPdS1_' function" {
	label="CFG for '_Z32DeformablePSROIPoolForwardKerneliPKddiiiiiS0_S0_idiiiiiiPdS1_' function";

	Node0x4f0d580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%20:\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %22 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %23 = getelementptr i8, i8 addrspace(4)* %22, i64 4\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 4, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = getelementptr inbounds i8, i8 addrspace(4)* %22, i64 12\l  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*\l  %29 = load i32, i32 addrspace(4)* %28, align 4, !tbaa !6\l  %30 = mul i32 %21, %26\l  %31 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %32 = add i32 %30, %31\l  %33 = icmp slt i32 %32, %0\l  br i1 %33, label %34, label %58\l|{<s0>T|<s1>F}}"];
	Node0x4f0d580:s0 -> Node0x4f0d730;
	Node0x4f0d580:s1 -> Node0x4f10860;
	Node0x4f0d730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%34:\l34:                                               \l  %35 = sitofp i32 %6 to double\l  %36 = sitofp i32 %7 to double\l  %37 = sitofp i32 %12 to double\l  %38 = sitofp i32 %15 to double\l  %39 = icmp eq i32 %10, 0\l  %40 = shl i32 %15, 1\l  %41 = sitofp i32 %14 to double\l  %42 = add nsw i32 %14, -1\l  %43 = mul i32 %5, %4\l  %44 = mul i32 %43, %3\l  %45 = icmp sgt i32 %12, 0\l  %46 = sitofp i32 %5 to double\l  %47 = fadd contract double %46, -5.000000e-01\l  %48 = sitofp i32 %4 to double\l  %49 = fadd contract double %48, -5.000000e-01\l  %50 = fadd contract double %46, -1.000000e+00\l  %51 = fadd contract double %48, -1.000000e+00\l  %52 = udiv i32 %29, %26\l  %53 = mul i32 %52, %26\l  %54 = icmp ugt i32 %29, %53\l  %55 = zext i1 %54 to i32\l  %56 = add i32 %52, %55\l  %57 = mul i32 %56, %26\l  br label %59\l}"];
	Node0x4f0d730 -> Node0x4f12010;
	Node0x4f10860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%58:\l58:                                               \l  ret void\l}"];
	Node0x4f12010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%59:\l59:                                               \l  %60 = phi i32 [ %32, %34 ], [ %207, %197 ]\l  %61 = freeze i32 %60\l  %62 = freeze i32 %7\l  %63 = sdiv i32 %61, %62\l  %64 = mul i32 %63, %62\l  %65 = sub i32 %61, %64\l  %66 = freeze i32 %6\l  %67 = sdiv i32 %63, %66\l  %68 = mul i32 %67, %66\l  %69 = sub i32 %63, %68\l  %70 = freeze i32 %13\l  %71 = sdiv i32 %67, %70\l  %72 = mul i32 %71, %70\l  %73 = sub i32 %67, %72\l  %74 = mul nsw i32 %71, 5\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %8, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !16\l  %78 = fptosi double %77 to i32\l  %79 = getelementptr inbounds double, double addrspace(1)* %76, i64 1\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !16\l  %81 = tail call double @llvm.round.f64(double %80)\l  %82 = fmul contract double %81, %2\l  %83 = fadd contract double %82, -5.000000e-01\l  %84 = getelementptr inbounds double, double addrspace(1)* %76, i64 2\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !16\l  %86 = tail call double @llvm.round.f64(double %85)\l  %87 = fmul contract double %86, %2\l  %88 = fadd contract double %87, -5.000000e-01\l  %89 = getelementptr inbounds double, double addrspace(1)* %76, i64 3\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %91 = tail call double @llvm.round.f64(double %90)\l  %92 = fadd contract double %91, 1.000000e+00\l  %93 = fmul contract double %92, %2\l  %94 = fadd contract double %93, -5.000000e-01\l  %95 = getelementptr inbounds double, double addrspace(1)* %76, i64 4\l  %96 = load double, double addrspace(1)* %95, align 8, !tbaa !16\l  %97 = tail call double @llvm.round.f64(double %96)\l  %98 = fadd contract double %97, 1.000000e+00\l  %99 = fmul contract double %98, %2\l  %100 = fadd contract double %99, -5.000000e-01\l  %101 = fsub contract double %94, %83\l  %102 = tail call double @llvm.maxnum.f64(double %101, double 1.000000e-01)\l  %103 = fsub contract double %100, %88\l  %104 = tail call double @llvm.maxnum.f64(double %103, double 1.000000e-01)\l  %105 = fdiv contract double %104, %35\l  %106 = fdiv contract double %102, %36\l  %107 = fdiv contract double %105, %37\l  %108 = fdiv contract double %106, %37\l  %109 = sitofp i32 %69 to double\l  %110 = fdiv contract double %109, %35\l  %111 = fmul contract double %110, %38\l  %112 = tail call double @llvm.floor.f64(double %111)\l  %113 = fptosi double %112 to i32\l  %114 = sitofp i32 %65 to double\l  %115 = fdiv contract double %114, %36\l  %116 = fmul contract double %115, %38\l  %117 = tail call double @llvm.floor.f64(double %116)\l  %118 = fptosi double %117 to i32\l  %119 = sdiv i32 %73, %17\l  br i1 %39, label %120, label %143\l|{<s0>T|<s1>F}}"];
	Node0x4f12010:s0 -> Node0x4f153e0;
	Node0x4f12010:s1 -> Node0x4f15470;
	Node0x4f153e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%120:\l120:                                              \l  %121 = mul nsw i32 %71, %16\l  %122 = add nsw i32 %119, %121\l  %123 = mul i32 %40, %122\l  %124 = add nsw i32 %123, %113\l  %125 = mul nsw i32 %124, %15\l  %126 = add nsw i32 %125, %118\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds double, double addrspace(1)* %9, i64 %127\l  %129 = load double, double addrspace(1)* %128, align 8, !tbaa !16\l  %130 = fmul contract double %129, %11\l  %131 = mul nsw i32 %71, %16\l  %132 = add nsw i32 %119, %131\l  %133 = shl nsw i32 %132, 1\l  %134 = add nuw nsw i32 %133, 1\l  %135 = mul nsw i32 %134, %15\l  %136 = add nsw i32 %135, %113\l  %137 = mul nsw i32 %136, %15\l  %138 = add nsw i32 %137, %118\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds double, double addrspace(1)* %9, i64 %139\l  %141 = load double, double addrspace(1)* %140, align 8, !tbaa !16\l  %142 = fmul contract double %141, %11\l  br label %143\l}"];
	Node0x4f153e0 -> Node0x4f15470;
	Node0x4f15470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%143:\l143:                                              \l  %144 = phi double [ %130, %120 ], [ 0.000000e+00, %59 ]\l  %145 = phi contract double [ %142, %120 ], [ 0.000000e+00, %59 ]\l  %146 = fmul contract double %106, %114\l  %147 = fadd contract double %83, %146\l  %148 = fmul contract double %102, %144\l  %149 = fadd contract double %147, %148\l  %150 = fmul contract double %105, %109\l  %151 = fadd contract double %88, %150\l  %152 = fmul contract double %104, %145\l  %153 = fadd contract double %151, %152\l  br i1 %45, label %154, label %197\l|{<s0>T|<s1>F}}"];
	Node0x4f15470:s0 -> Node0x4f16c40;
	Node0x4f15470:s1 -> Node0x4f12190;
	Node0x4f16c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%154:\l154:                                              \l  %155 = mul i32 %44, %78\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds double, double addrspace(1)* %1, i64 %156\l  %158 = fmul contract double %41, %109\l  %159 = fdiv contract double %158, %35\l  %160 = tail call double @llvm.floor.f64(double %159)\l  %161 = fptosi double %160 to i32\l  %162 = tail call i32 @llvm.smax.i32(i32 %161, i32 0)\l  %163 = tail call i32 @llvm.smin.i32(i32 %162, i32 %42)\l  %164 = fmul contract double %41, %114\l  %165 = fdiv contract double %164, %36\l  %166 = tail call double @llvm.floor.f64(double %165)\l  %167 = fptosi double %166 to i32\l  %168 = tail call i32 @llvm.smax.i32(i32 %167, i32 0)\l  %169 = tail call i32 @llvm.smin.i32(i32 %168, i32 %42)\l  %170 = mul nsw i32 %73, %14\l  %171 = add nsw i32 %163, %170\l  %172 = mul nsw i32 %171, %14\l  %173 = add nsw i32 %172, %169\l  %174 = mul i32 %43, %173\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds double, double addrspace(1)* %157, i64 %175\l  br label %177\l}"];
	Node0x4f16c40 -> Node0x4f17e00;
	Node0x4f17e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%177:\l177:                                              \l  %178 = phi i32 [ 0, %154 ], [ %210, %209 ]\l  %179 = phi i32 [ 0, %154 ], [ %265, %209 ]\l  %180 = phi double [ 0.000000e+00, %154 ], [ %264, %209 ]\l  %181 = sitofp i32 %178 to double\l  %182 = fmul contract double %107, %181\l  %183 = fadd contract double %153, %182\l  %184 = fcmp contract olt double %183, -5.000000e-01\l  %185 = fcmp contract ogt double %183, %49\l  %186 = tail call double @llvm.maxnum.f64(double %183, double 0.000000e+00)\l  %187 = tail call double @llvm.minnum.f64(double %186, double %51)\l  %188 = tail call double @llvm.floor.f64(double %187)\l  %189 = fptosi double %188 to i32\l  %190 = tail call double @llvm.ceil.f64(double %187)\l  %191 = fptosi double %190 to i32\l  %192 = sitofp i32 %189 to double\l  %193 = fsub contract double %187, %192\l  %194 = mul nsw i32 %189, %5\l  %195 = mul nsw i32 %191, %5\l  %196 = fsub contract double 1.000000e+00, %193\l  br label %212\l}"];
	Node0x4f17e00 -> Node0x4f18ef0;
	Node0x4f12190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%197:\l197:                                              \l  %198 = phi double [ 0.000000e+00, %143 ], [ %264, %209 ]\l  %199 = phi i32 [ 0, %143 ], [ %265, %209 ]\l  %200 = icmp eq i32 %199, 0\l  %201 = sitofp i32 %199 to double\l  %202 = fdiv contract double %198, %201\l  %203 = select contract i1 %200, double 0.000000e+00, double %202\l  %204 = sext i32 %60 to i64\l  %205 = getelementptr inbounds double, double addrspace(1)* %18, i64 %204\l  store double %203, double addrspace(1)* %205, align 8, !tbaa !16\l  %206 = getelementptr inbounds double, double addrspace(1)* %19, i64 %204\l  store double %201, double addrspace(1)* %206, align 8, !tbaa !16\l  %207 = add i32 %57, %60\l  %208 = icmp slt i32 %207, %0\l  br i1 %208, label %59, label %58, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4f12190:s0 -> Node0x4f12010;
	Node0x4f12190:s1 -> Node0x4f10860;
	Node0x4f17f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%209:\l209:                                              \l  %210 = add nuw nsw i32 %178, 1\l  %211 = icmp eq i32 %210, %12\l  br i1 %211, label %197, label %177, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4f17f00:s0 -> Node0x4f12190;
	Node0x4f17f00:s1 -> Node0x4f17e00;
	Node0x4f18ef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%212:\l212:                                              \l  %213 = phi i32 [ 0, %177 ], [ %266, %263 ]\l  %214 = phi i32 [ %179, %177 ], [ %265, %263 ]\l  %215 = phi double [ %180, %177 ], [ %264, %263 ]\l  %216 = sitofp i32 %213 to double\l  %217 = fmul contract double %108, %216\l  %218 = fadd contract double %149, %217\l  %219 = fcmp contract olt double %218, -5.000000e-01\l  %220 = fcmp contract ogt double %218, %47\l  %221 = select i1 %219, i1 true, i1 %220\l  %222 = select i1 %221, i1 true, i1 %184\l  %223 = select i1 %222, i1 true, i1 %185\l  br i1 %223, label %263, label %224\l|{<s0>T|<s1>F}}"];
	Node0x4f18ef0:s0 -> Node0x4f19be0;
	Node0x4f18ef0:s1 -> Node0x4f1a340;
	Node0x4f1a340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%224:\l224:                                              \l  %225 = tail call double @llvm.maxnum.f64(double %218, double 0.000000e+00)\l  %226 = tail call double @llvm.minnum.f64(double %225, double %50)\l  %227 = tail call double @llvm.floor.f64(double %226)\l  %228 = fptosi double %227 to i32\l  %229 = tail call double @llvm.ceil.f64(double %226)\l  %230 = fptosi double %229 to i32\l  %231 = sitofp i32 %228 to double\l  %232 = fsub contract double %226, %231\l  %233 = add nsw i32 %194, %228\l  %234 = sext i32 %233 to i64\l  %235 = getelementptr inbounds double, double addrspace(1)* %176, i64 %234\l  %236 = load double, double addrspace(1)* %235, align 8, !tbaa !16\l  %237 = add nsw i32 %195, %228\l  %238 = sext i32 %237 to i64\l  %239 = getelementptr inbounds double, double addrspace(1)* %176, i64 %238\l  %240 = load double, double addrspace(1)* %239, align 8, !tbaa !16\l  %241 = add nsw i32 %194, %230\l  %242 = sext i32 %241 to i64\l  %243 = getelementptr inbounds double, double addrspace(1)* %176, i64 %242\l  %244 = load double, double addrspace(1)* %243, align 8, !tbaa !16\l  %245 = add nsw i32 %195, %230\l  %246 = sext i32 %245 to i64\l  %247 = getelementptr inbounds double, double addrspace(1)* %176, i64 %246\l  %248 = load double, double addrspace(1)* %247, align 8, !tbaa !16\l  %249 = fsub contract double 1.000000e+00, %232\l  %250 = fmul contract double %196, %249\l  %251 = fmul contract double %250, %236\l  %252 = fmul contract double %193, %249\l  %253 = fmul contract double %252, %240\l  %254 = fadd contract double %251, %253\l  %255 = fmul contract double %196, %232\l  %256 = fmul contract double %255, %244\l  %257 = fadd contract double %254, %256\l  %258 = fmul contract double %193, %232\l  %259 = fmul contract double %258, %248\l  %260 = fadd contract double %257, %259\l  %261 = fadd contract double %215, %260\l  %262 = add nsw i32 %214, 1\l  br label %263\l}"];
	Node0x4f1a340 -> Node0x4f19be0;
	Node0x4f19be0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%263:\l263:                                              \l  %264 = phi double [ %261, %224 ], [ %215, %212 ]\l  %265 = phi i32 [ %262, %224 ], [ %214, %212 ]\l  %266 = add nuw nsw i32 %213, 1\l  %267 = icmp eq i32 %266, %12\l  br i1 %267, label %209, label %212, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4f19be0:s0 -> Node0x4f17f00;
	Node0x4f19be0:s1 -> Node0x4f18ef0;
}
