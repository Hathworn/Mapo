digraph "CFG for '_Z19Normalize_get_norm_PfS_iii' function" {
	label="CFG for '_Z19Normalize_get_norm_PfS_iii' function";

	Node0x623b4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp slt i32 %14, %4\l  br i1 %15, label %16, label %138\l|{<s0>T|<s1>F}}"];
	Node0x623b4d0:s0 -> Node0x623d390;
	Node0x623b4d0:s1 -> Node0x623d420;
	Node0x623d390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = freeze i32 %14\l  %18 = freeze i32 %3\l  %19 = sdiv i32 %17, %18\l  %20 = mul i32 %19, %18\l  %21 = sub i32 %17, %20\l  %22 = icmp sgt i32 %2, 0\l  br i1 %22, label %23, label %54\l|{<s0>T|<s1>F}}"];
	Node0x623d390:s0 -> Node0x623d920;
	Node0x623d390:s1 -> Node0x623d970;
	Node0x623d920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = mul nsw i32 %19, %2\l  %25 = and i32 %2, 7\l  %26 = icmp ult i32 %2, 8\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x623d920:s0 -> Node0x623dcc0;
	Node0x623d920:s1 -> Node0x623dd10;
	Node0x623dd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %2, -8\l  br label %60\l}"];
	Node0x623dd10 -> Node0x623df10;
	Node0x623dcc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %23 ], [ %134, %60 ]\l  %31 = phi float [ 0.000000e+00, %23 ], [ %134, %60 ]\l  %32 = phi i32 [ 0, %23 ], [ %135, %60 ]\l  %33 = icmp eq i32 %25, 0\l  br i1 %33, label %49, label %34\l|{<s0>T|<s1>F}}"];
	Node0x623dcc0:s0 -> Node0x623d5f0;
	Node0x623dcc0:s1 -> Node0x623f340;
	Node0x623f340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi float [ %45, %34 ], [ %31, %29 ]\l  %36 = phi i32 [ %46, %34 ], [ %32, %29 ]\l  %37 = phi i32 [ %47, %34 ], [ 0, %29 ]\l  %38 = add nsw i32 %36, %24\l  %39 = mul nsw i32 %38, %3\l  %40 = add nsw i32 %39, %21\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = fmul contract float %43, %43\l  %45 = fadd contract float %35, %44\l  %46 = add nuw nsw i32 %36, 1\l  %47 = add i32 %37, 1\l  %48 = icmp eq i32 %47, %25\l  br i1 %48, label %49, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x623f340:s0 -> Node0x623d5f0;
	Node0x623f340:s1 -> Node0x623f340;
	Node0x623d5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%49:\l49:                                               \l  %50 = phi float [ %30, %29 ], [ %45, %34 ]\l  %51 = fpext float %50 to double\l  %52 = fadd contract double %51, 1.000000e-05\l  %53 = fptrunc double %52 to float\l  br label %54\l}"];
	Node0x623d5f0 -> Node0x623d970;
	Node0x623d970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%54:\l54:                                               \l  %55 = phi float [ 0x3EE4F8B580000000, %16 ], [ %53, %49 ]\l  %56 = mul nsw i32 %19, %3\l  %57 = add nsw i32 %56, %21\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  store float %55, float addrspace(1)* %59, align 4, !tbaa !7\l  br label %138\l}"];
	Node0x623d970 -> Node0x623d420;
	Node0x623df10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %27 ], [ %134, %60 ]\l  %62 = phi i32 [ 0, %27 ], [ %135, %60 ]\l  %63 = phi i32 [ 0, %27 ], [ %136, %60 ]\l  %64 = add nsw i32 %62, %24\l  %65 = mul nsw i32 %64, %3\l  %66 = add nsw i32 %65, %21\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = fmul contract float %69, %69\l  %71 = fadd contract float %61, %70\l  %72 = or i32 %62, 1\l  %73 = add nsw i32 %72, %24\l  %74 = mul nsw i32 %73, %3\l  %75 = add nsw i32 %74, %21\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fmul contract float %78, %78\l  %80 = fadd contract float %71, %79\l  %81 = or i32 %62, 2\l  %82 = add nsw i32 %81, %24\l  %83 = mul nsw i32 %82, %3\l  %84 = add nsw i32 %83, %21\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = fmul contract float %87, %87\l  %89 = fadd contract float %80, %88\l  %90 = or i32 %62, 3\l  %91 = add nsw i32 %90, %24\l  %92 = mul nsw i32 %91, %3\l  %93 = add nsw i32 %92, %21\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fmul contract float %96, %96\l  %98 = fadd contract float %89, %97\l  %99 = or i32 %62, 4\l  %100 = add nsw i32 %99, %24\l  %101 = mul nsw i32 %100, %3\l  %102 = add nsw i32 %101, %21\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %105, %105\l  %107 = fadd contract float %98, %106\l  %108 = or i32 %62, 5\l  %109 = add nsw i32 %108, %24\l  %110 = mul nsw i32 %109, %3\l  %111 = add nsw i32 %110, %21\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %115 = fmul contract float %114, %114\l  %116 = fadd contract float %107, %115\l  %117 = or i32 %62, 6\l  %118 = add nsw i32 %117, %24\l  %119 = mul nsw i32 %118, %3\l  %120 = add nsw i32 %119, %21\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %124 = fmul contract float %123, %123\l  %125 = fadd contract float %116, %124\l  %126 = or i32 %62, 7\l  %127 = add nsw i32 %126, %24\l  %128 = mul nsw i32 %127, %3\l  %129 = add nsw i32 %128, %21\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fmul contract float %132, %132\l  %134 = fadd contract float %125, %133\l  %135 = add nuw nsw i32 %62, 8\l  %136 = add i32 %63, 8\l  %137 = icmp eq i32 %136, %28\l  br i1 %137, label %29, label %60, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x623df10:s0 -> Node0x623dcc0;
	Node0x623df10:s1 -> Node0x623df10;
	Node0x623d420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%138:\l138:                                              \l  ret void\l}"];
}
