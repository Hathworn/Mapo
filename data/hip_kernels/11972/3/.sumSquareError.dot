digraph "CFG for 'sumSquareError' function" {
	label="CFG for 'sumSquareError' function";

	Node0x4a16bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = icmp slt i32 %17, %0\l  br i1 %18, label %19, label %173\l|{<s0>T|<s1>F}}"];
	Node0x4a16bc0:s0 -> Node0x4a18b30;
	Node0x4a16bc0:s1 -> Node0x4a18bc0;
	Node0x4a18b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%19:\l19:                                               \l  %20 = mul i32 %2, %1\l  %21 = mul i32 %20, %17\l  %22 = mul nsw i32 %21, %3\l  %23 = mul nsw i32 %17, %3\l  %24 = sext i32 %17 to i64\l  %25 = getelementptr inbounds float, float addrspace(1)* %7, i64 %24\l  store float 0.000000e+00, float addrspace(1)* %25, align 4, !tbaa !7\l  %26 = icmp sgt i32 %20, 0\l  br i1 %26, label %27, label %173\l|{<s0>T|<s1>F}}"];
	Node0x4a18b30:s0 -> Node0x4a19cc0;
	Node0x4a18b30:s1 -> Node0x4a18bc0;
	Node0x4a19cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%27:\l27:                                               \l  %28 = icmp sgt i32 %3, 0\l  %29 = and i32 %3, 7\l  %30 = icmp ult i32 %3, 8\l  %31 = and i32 %3, -8\l  %32 = icmp eq i32 %29, 0\l  br label %33\l}"];
	Node0x4a19cc0 -> Node0x4a18990;
	Node0x4a18990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %27 ], [ %68, %60 ]\l  %35 = phi i32 [ 0, %27 ], [ %69, %60 ]\l  br i1 %28, label %36, label %60\l|{<s0>T|<s1>F}}"];
	Node0x4a18990:s0 -> Node0x4a1a5d0;
	Node0x4a18990:s1 -> Node0x4a1a370;
	Node0x4a1a5d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%36:\l36:                                               \l  %37 = add i32 %35, %22\l  br i1 %30, label %38, label %71\l|{<s0>T|<s1>F}}"];
	Node0x4a1a5d0:s0 -> Node0x4a1a7a0;
	Node0x4a1a5d0:s1 -> Node0x4a1a7f0;
	Node0x4a1a7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%38:\l38:                                               \l  %39 = phi float [ undef, %36 ], [ %169, %71 ]\l  %40 = phi i32 [ 0, %36 ], [ %170, %71 ]\l  %41 = phi float [ 0.000000e+00, %36 ], [ %169, %71 ]\l  br i1 %32, label %60, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4a1a7a0:s0 -> Node0x4a1a370;
	Node0x4a1a7a0:s1 -> Node0x4a1b000;
	Node0x4a1b000 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %57, %42 ], [ %40, %38 ]\l  %44 = phi float [ %56, %42 ], [ %41, %38 ]\l  %45 = phi i32 [ %58, %42 ], [ 0, %38 ]\l  %46 = mul nsw i32 %43, %20\l  %47 = add i32 %37, %46\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %4, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7\l  %51 = add nsw i32 %43, %23\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %5, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7\l  %55 = fmul contract float %50, %54\l  %56 = fadd contract float %44, %55\l  %57 = add nuw nsw i32 %43, 1\l  %58 = add i32 %45, 1\l  %59 = icmp eq i32 %58, %29\l  br i1 %59, label %60, label %42, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4a1b000:s0 -> Node0x4a1a370;
	Node0x4a1b000:s1 -> Node0x4a1b000;
	Node0x4a1a370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %33 ], [ %39, %38 ], [ %56, %42 ]\l  %62 = add nsw i32 %35, %21\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %6, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7\l  %66 = fsub contract float %65, %61\l  %67 = fmul contract float %66, %66\l  %68 = fadd contract float %34, %67\l  store float %68, float addrspace(1)* %25, align 4, !tbaa !7\l  %69 = add nuw nsw i32 %35, 1\l  %70 = icmp eq i32 %69, %20\l  br i1 %70, label %173, label %33, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4a1a370:s0 -> Node0x4a18bc0;
	Node0x4a1a370:s1 -> Node0x4a18990;
	Node0x4a1a7f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%71:\l71:                                               \l  %72 = phi i32 [ %170, %71 ], [ 0, %36 ]\l  %73 = phi float [ %169, %71 ], [ 0.000000e+00, %36 ]\l  %74 = phi i32 [ %171, %71 ], [ 0, %36 ]\l  %75 = mul nsw i32 %72, %20\l  %76 = add i32 %37, %75\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %4, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7\l  %80 = add nsw i32 %72, %23\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %5, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7\l  %84 = fmul contract float %79, %83\l  %85 = fadd contract float %73, %84\l  %86 = or i32 %72, 1\l  %87 = mul nsw i32 %86, %20\l  %88 = add i32 %37, %87\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %4, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7\l  %92 = add nsw i32 %86, %23\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %5, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = fmul contract float %91, %95\l  %97 = fadd contract float %85, %96\l  %98 = or i32 %72, 2\l  %99 = mul nsw i32 %98, %20\l  %100 = add i32 %37, %99\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %4, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7\l  %104 = add nsw i32 %98, %23\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %5, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7\l  %108 = fmul contract float %103, %107\l  %109 = fadd contract float %97, %108\l  %110 = or i32 %72, 3\l  %111 = mul nsw i32 %110, %20\l  %112 = add i32 %37, %111\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %4, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7\l  %116 = add nsw i32 %110, %23\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %5, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7\l  %120 = fmul contract float %115, %119\l  %121 = fadd contract float %109, %120\l  %122 = or i32 %72, 4\l  %123 = mul nsw i32 %122, %20\l  %124 = add i32 %37, %123\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %4, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7\l  %128 = add nsw i32 %122, %23\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %5, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7\l  %132 = fmul contract float %127, %131\l  %133 = fadd contract float %121, %132\l  %134 = or i32 %72, 5\l  %135 = mul nsw i32 %134, %20\l  %136 = add i32 %37, %135\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %4, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7\l  %140 = add nsw i32 %134, %23\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %5, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7\l  %144 = fmul contract float %139, %143\l  %145 = fadd contract float %133, %144\l  %146 = or i32 %72, 6\l  %147 = mul nsw i32 %146, %20\l  %148 = add i32 %37, %147\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %4, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7\l  %152 = add nsw i32 %146, %23\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %5, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7\l  %156 = fmul contract float %151, %155\l  %157 = fadd contract float %145, %156\l  %158 = or i32 %72, 7\l  %159 = mul nsw i32 %158, %20\l  %160 = add i32 %37, %159\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %4, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7\l  %164 = add nsw i32 %158, %23\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %5, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !7\l  %168 = fmul contract float %163, %167\l  %169 = fadd contract float %157, %168\l  %170 = add nuw nsw i32 %72, 8\l  %171 = add i32 %74, 8\l  %172 = icmp eq i32 %171, %31\l  br i1 %172, label %38, label %71, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4a1a7f0:s0 -> Node0x4a1a7a0;
	Node0x4a1a7f0:s1 -> Node0x4a1a7f0;
	Node0x4a18bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%173:\l173:                                              \l  ret void\l}"];
}
