digraph "CFG for 'limitCoeff' function" {
	label="CFG for 'limitCoeff' function";

	Node0x5b21c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp slt i32 %16, %0\l  br i1 %17, label %18, label %173\l|{<s0>T|<s1>F}}"];
	Node0x5b21c70:s0 -> Node0x5b23be0;
	Node0x5b21c70:s1 -> Node0x5b23c70;
	Node0x5b23be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%18:\l18:                                               \l  %19 = mul i32 %2, %1\l  %20 = mul i32 %19, %16\l  %21 = shl nsw i32 %20, 1\l  %22 = shl nsw i32 %16, 1\l  %23 = add nuw nsw i32 %22, 1\l  %24 = sext i32 %23 to i64\l  %25 = getelementptr inbounds float, float addrspace(1)* %6, i64 %24\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %27 = fcmp contract ogt float %26, %3\l  %28 = fneg contract float %3\l  %29 = fcmp contract olt float %26, %28\l  %30 = or i1 %27, %29\l  br i1 %30, label %31, label %173\l|{<s0>T|<s1>F}}"];
	Node0x5b23be0:s0 -> Node0x5b24be0;
	Node0x5b23be0:s1 -> Node0x5b23c70;
	Node0x5b24be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%31:\l31:                                               \l  %32 = or i1 %27, %29\l  %33 = select i1 %27, float %3, float %28\l  br i1 %32, label %34, label %35\l|{<s0>T|<s1>F}}"];
	Node0x5b24be0:s0 -> Node0x5b23b80;
	Node0x5b24be0:s1 -> Node0x5b24fc0;
	Node0x5b23b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%34:\l34:                                               \l  store float %33, float addrspace(1)* %25, align 4, !tbaa !7\l  br label %35\l}"];
	Node0x5b23b80 -> Node0x5b24fc0;
	Node0x5b24fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%35:\l35:                                               \l  %36 = phi float [ %33, %34 ], [ %26, %31 ]\l  %37 = icmp sgt i32 %19, 0\l  br i1 %37, label %38, label %69\l|{<s0>T|<s1>F}}"];
	Node0x5b24fc0:s0 -> Node0x5b25950;
	Node0x5b24fc0:s1 -> Node0x5b259a0;
	Node0x5b25950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%38:\l38:                                               \l  %39 = add nsw i32 %21, %19\l  %40 = and i32 %19, 7\l  %41 = icmp ult i32 %19, 8\l  br i1 %41, label %44, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5b25950:s0 -> Node0x5b25cb0;
	Node0x5b25950:s1 -> Node0x5b25d00;
	Node0x5b25d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%42:\l42:                                               \l  %43 = and i32 %19, -8\l  br label %78\l}"];
	Node0x5b25d00 -> Node0x5b25f00;
	Node0x5b25cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%44:\l44:                                               \l  %45 = phi float [ undef, %38 ], [ %164, %78 ]\l  %46 = phi float [ undef, %38 ], [ %169, %78 ]\l  %47 = phi i32 [ 0, %38 ], [ %170, %78 ]\l  %48 = phi float [ 0.000000e+00, %38 ], [ %169, %78 ]\l  %49 = phi float [ 0.000000e+00, %38 ], [ %164, %78 ]\l  %50 = icmp eq i32 %40, 0\l  br i1 %50, label %69, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5b25cb0:s0 -> Node0x5b259a0;
	Node0x5b25cb0:s1 -> Node0x5b27340;
	Node0x5b27340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi i32 [ %66, %51 ], [ %47, %44 ]\l  %53 = phi float [ %65, %51 ], [ %48, %44 ]\l  %54 = phi float [ %60, %51 ], [ %49, %44 ]\l  %55 = phi i32 [ %67, %51 ], [ 0, %44 ]\l  %56 = add nsw i32 %39, %52\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = fadd contract float %54, %59\l  %61 = add nsw i32 %52, %20\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %5, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7\l  %65 = fadd contract float %53, %64\l  %66 = add nuw nsw i32 %52, 1\l  %67 = add i32 %55, 1\l  %68 = icmp eq i32 %67, %40\l  br i1 %68, label %69, label %51, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5b27340:s0 -> Node0x5b259a0;
	Node0x5b27340:s1 -> Node0x5b27340;
	Node0x5b259a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%69:\l69:                                               \l  %70 = phi float [ 0.000000e+00, %35 ], [ %45, %44 ], [ %60, %51 ]\l  %71 = phi float [ 0.000000e+00, %35 ], [ %46, %44 ], [ %65, %51 ]\l  %72 = fmul contract float %70, %36\l  %73 = fsub contract float %71, %72\l  %74 = sitofp i32 %19 to float\l  %75 = fdiv contract float %73, %74\l  %76 = sext i32 %22 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %6, i64 %76\l  store float %75, float addrspace(1)* %77, align 4, !tbaa !7\l  br label %173\l}"];
	Node0x5b259a0 -> Node0x5b23c70;
	Node0x5b25f00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %42 ], [ %170, %78 ]\l  %80 = phi float [ 0.000000e+00, %42 ], [ %169, %78 ]\l  %81 = phi float [ 0.000000e+00, %42 ], [ %164, %78 ]\l  %82 = phi i32 [ 0, %42 ], [ %171, %78 ]\l  %83 = add nsw i32 %39, %79\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %4, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7\l  %87 = fadd contract float %81, %86\l  %88 = add nsw i32 %79, %20\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %5, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7\l  %92 = fadd contract float %80, %91\l  %93 = or i32 %79, 1\l  %94 = add nsw i32 %39, %93\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %4, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7\l  %98 = fadd contract float %87, %97\l  %99 = add nsw i32 %93, %20\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %5, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = fadd contract float %92, %102\l  %104 = or i32 %79, 2\l  %105 = add nsw i32 %39, %104\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %4, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7\l  %109 = fadd contract float %98, %108\l  %110 = add nsw i32 %104, %20\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %5, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7\l  %114 = fadd contract float %103, %113\l  %115 = or i32 %79, 3\l  %116 = add nsw i32 %39, %115\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %4, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7\l  %120 = fadd contract float %109, %119\l  %121 = add nsw i32 %115, %20\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %5, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7\l  %125 = fadd contract float %114, %124\l  %126 = or i32 %79, 4\l  %127 = add nsw i32 %39, %126\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %4, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7\l  %131 = fadd contract float %120, %130\l  %132 = add nsw i32 %126, %20\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %5, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7\l  %136 = fadd contract float %125, %135\l  %137 = or i32 %79, 5\l  %138 = add nsw i32 %39, %137\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %4, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7\l  %142 = fadd contract float %131, %141\l  %143 = add nsw i32 %137, %20\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %5, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7\l  %147 = fadd contract float %136, %146\l  %148 = or i32 %79, 6\l  %149 = add nsw i32 %39, %148\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %4, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !7\l  %153 = fadd contract float %142, %152\l  %154 = add nsw i32 %148, %20\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %5, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !7\l  %158 = fadd contract float %147, %157\l  %159 = or i32 %79, 7\l  %160 = add nsw i32 %39, %159\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %4, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7\l  %164 = fadd contract float %153, %163\l  %165 = add nsw i32 %159, %20\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %5, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !7\l  %169 = fadd contract float %158, %168\l  %170 = add nuw nsw i32 %79, 8\l  %171 = add i32 %82, 8\l  %172 = icmp eq i32 %171, %43\l  br i1 %172, label %44, label %78, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5b25f00:s0 -> Node0x5b25cb0;
	Node0x5b25f00:s1 -> Node0x5b25f00;
	Node0x5b23c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%173:\l173:                                              \l  ret void\l}"];
}
