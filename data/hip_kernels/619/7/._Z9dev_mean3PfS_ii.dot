digraph "CFG for '_Z9dev_mean3PfS_ii' function" {
	label="CFG for '_Z9dev_mean3PfS_ii' function";

	Node0x55d7660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = shl i32 %13, 8\l  %15 = ashr exact i32 %14, 8\l  %16 = mul nsw i32 %15, %9\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %18 = add i32 %16, %17\l  %19 = udiv i32 %12, %9\l  %20 = mul i32 %19, %9\l  %21 = icmp ugt i32 %12, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = shl i32 %23, 8\l  %25 = ashr exact i32 %24, 8\l  %26 = mul nsw i32 %25, %9\l  %27 = icmp slt i32 %18, %2\l  br i1 %27, label %28, label %38\l|{<s0>T|<s1>F}}"];
	Node0x55d7660:s0 -> Node0x55d9ee0;
	Node0x55d7660:s1 -> Node0x55d9f70;
	Node0x55d9ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%28:\l28:                                               \l  %29 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %30 = mul i32 %29, %3\l  %31 = icmp sgt i32 %3, 0\l  %32 = sitofp i32 %3 to float\l  %33 = mul i32 %29, %2\l  %34 = and i32 %3, 7\l  %35 = icmp ult i32 %3, 8\l  %36 = and i32 %3, -8\l  %37 = icmp eq i32 %34, 0\l  br label %39\l}"];
	Node0x55d9ee0 -> Node0x55da830;
	Node0x55d9f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%38:\l38:                                               \l  ret void\l}"];
	Node0x55da830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%39:\l39:                                               \l  %40 = phi i32 [ %18, %28 ], [ %66, %60 ]\l  br i1 %31, label %41, label %60\l|{<s0>T|<s1>F}}"];
	Node0x55da830:s0 -> Node0x55daab0;
	Node0x55da830:s1 -> Node0x55da9b0;
	Node0x55daab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%41:\l41:                                               \l  br i1 %35, label %42, label %68\l|{<s0>T|<s1>F}}"];
	Node0x55daab0:s0 -> Node0x55dabf0;
	Node0x55daab0:s1 -> Node0x55dac40;
	Node0x55dabf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%42:\l42:                                               \l  %43 = phi float [ undef, %41 ], [ %134, %68 ]\l  %44 = phi i32 [ 0, %41 ], [ %135, %68 ]\l  %45 = phi float [ 0.000000e+00, %41 ], [ %134, %68 ]\l  br i1 %37, label %60, label %46\l|{<s0>T|<s1>F}}"];
	Node0x55dabf0:s0 -> Node0x55da9b0;
	Node0x55dabf0:s1 -> Node0x55db450;
	Node0x55db450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi i32 [ %57, %46 ], [ %44, %42 ]\l  %48 = phi float [ %56, %46 ], [ %45, %42 ]\l  %49 = phi i32 [ %58, %46 ], [ 0, %42 ]\l  %50 = add i32 %47, %30\l  %51 = mul i32 %50, %2\l  %52 = add i32 %51, %40\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = fadd contract float %48, %55\l  %57 = add nuw nsw i32 %47, 1\l  %58 = add i32 %49, 1\l  %59 = icmp eq i32 %58, %34\l  br i1 %59, label %60, label %46, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x55db450:s0 -> Node0x55da9b0;
	Node0x55db450:s1 -> Node0x55db450;
	Node0x55da9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %39 ], [ %43, %42 ], [ %56, %46 ]\l  %62 = fdiv contract float %61, %32\l  %63 = add i32 %40, %33\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  store float %62, float addrspace(1)* %65, align 4, !tbaa !16\l  %66 = add nsw i32 %40, %26\l  %67 = icmp slt i32 %66, %2\l  br i1 %67, label %39, label %38, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x55da9b0:s0 -> Node0x55da830;
	Node0x55da9b0:s1 -> Node0x55d9f70;
	Node0x55dac40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%68:\l68:                                               \l  %69 = phi i32 [ %135, %68 ], [ 0, %41 ]\l  %70 = phi float [ %134, %68 ], [ 0.000000e+00, %41 ]\l  %71 = phi i32 [ %136, %68 ], [ 0, %41 ]\l  %72 = add i32 %69, %30\l  %73 = mul i32 %72, %2\l  %74 = add i32 %73, %40\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16\l  %78 = fadd contract float %70, %77\l  %79 = or i32 %69, 1\l  %80 = add i32 %79, %30\l  %81 = mul i32 %80, %2\l  %82 = add i32 %81, %40\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16\l  %86 = fadd contract float %78, %85\l  %87 = or i32 %69, 2\l  %88 = add i32 %87, %30\l  %89 = mul i32 %88, %2\l  %90 = add i32 %89, %40\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16\l  %94 = fadd contract float %86, %93\l  %95 = or i32 %69, 3\l  %96 = add i32 %95, %30\l  %97 = mul i32 %96, %2\l  %98 = add i32 %97, %40\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16\l  %102 = fadd contract float %94, %101\l  %103 = or i32 %69, 4\l  %104 = add i32 %103, %30\l  %105 = mul i32 %104, %2\l  %106 = add i32 %105, %40\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !16\l  %110 = fadd contract float %102, %109\l  %111 = or i32 %69, 5\l  %112 = add i32 %111, %30\l  %113 = mul i32 %112, %2\l  %114 = add i32 %113, %40\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16\l  %118 = fadd contract float %110, %117\l  %119 = or i32 %69, 6\l  %120 = add i32 %119, %30\l  %121 = mul i32 %120, %2\l  %122 = add i32 %121, %40\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16\l  %126 = fadd contract float %118, %125\l  %127 = or i32 %69, 7\l  %128 = add i32 %127, %30\l  %129 = mul i32 %128, %2\l  %130 = add i32 %129, %40\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !16\l  %134 = fadd contract float %126, %133\l  %135 = add nuw nsw i32 %69, 8\l  %136 = add i32 %71, 8\l  %137 = icmp eq i32 %136, %36\l  br i1 %137, label %42, label %68, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x55dac40:s0 -> Node0x55dabf0;
	Node0x55dac40:s1 -> Node0x55dac40;
}
