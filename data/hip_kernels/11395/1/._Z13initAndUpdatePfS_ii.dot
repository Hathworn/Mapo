digraph "CFG for '_Z13initAndUpdatePfS_ii' function" {
	label="CFG for '_Z13initAndUpdatePfS_ii' function";

	Node0x543b410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %2\l  br i1 %14, label %15, label %264\l|{<s0>T|<s1>F}}"];
	Node0x543b410:s0 -> Node0x543d2e0;
	Node0x543b410:s1 -> Node0x543d370;
	Node0x543d2e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%15:\l15:                                               \l  %16 = add nsw i32 %13, 1\l  %17 = sitofp i32 %13 to float\l  %18 = add nsw i32 %2, -1\l  %19 = sitofp i32 %18 to float\l  %20 = fdiv contract float %17, %19\l  %21 = fmul contract float %20, 0x401921FB60000000\l  %22 = tail call float @llvm.fabs.f32(float %21)\l  %23 = fcmp olt float %22, 1.310720e+05\l  br i1 %23, label %24, label %32\l|{<s0>T|<s1>F}}"];
	Node0x543d2e0:s0 -> Node0x543e570;
	Node0x543d2e0:s1 -> Node0x543e600;
	Node0x543e570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%24:\l24:                                               \l  %25 = fmul float %22, 0x3FE45F3060000000\l  %26 = tail call float @llvm.rint.f32(float %25)\l  %27 = tail call float @llvm.fma.f32(float %26, float 0xBFF921FB40000000,\l... float %22)\l  %28 = tail call float @llvm.fma.f32(float %26, float 0xBE74442D00000000,\l... float %27)\l  %29 = tail call float @llvm.fma.f32(float %26, float 0xBCF8469880000000,\l... float %28)\l  %30 = fptosi float %26 to i32\l  %31 = bitcast float %22 to i32\l  br label %138\l}"];
	Node0x543e570 -> Node0x543f0b0;
	Node0x543e600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = bitcast float %22 to i32\l  %34 = lshr i32 %33, 23\l  %35 = and i32 %33, 8388607\l  %36 = or i32 %35, 8388608\l  %37 = zext i32 %36 to i64\l  %38 = mul nuw nsw i64 %37, 4266746795\l  %39 = trunc i64 %38 to i32\l  %40 = lshr i64 %38, 32\l  %41 = mul nuw nsw i64 %37, 1011060801\l  %42 = add nuw nsw i64 %40, %41\l  %43 = trunc i64 %42 to i32\l  %44 = lshr i64 %42, 32\l  %45 = mul nuw nsw i64 %37, 3680671129\l  %46 = add nuw nsw i64 %44, %45\l  %47 = trunc i64 %46 to i32\l  %48 = lshr i64 %46, 32\l  %49 = mul nuw nsw i64 %37, 4113882560\l  %50 = add nuw nsw i64 %48, %49\l  %51 = trunc i64 %50 to i32\l  %52 = lshr i64 %50, 32\l  %53 = mul nuw nsw i64 %37, 4230436817\l  %54 = add nuw nsw i64 %52, %53\l  %55 = trunc i64 %54 to i32\l  %56 = lshr i64 %54, 32\l  %57 = mul nuw nsw i64 %37, 1313084713\l  %58 = add nuw nsw i64 %56, %57\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = mul nuw nsw i64 %37, 2734261102\l  %62 = add nuw nsw i64 %60, %61\l  %63 = trunc i64 %62 to i32\l  %64 = lshr i64 %62, 32\l  %65 = trunc i64 %64 to i32\l  %66 = add nsw i32 %34, -120\l  %67 = icmp ugt i32 %66, 63\l  %68 = select i1 %67, i32 %59, i32 %65\l  %69 = select i1 %67, i32 %55, i32 %63\l  %70 = select i1 %67, i32 %51, i32 %59\l  %71 = select i1 %67, i32 %47, i32 %55\l  %72 = select i1 %67, i32 %43, i32 %51\l  %73 = select i1 %67, i32 %39, i32 %47\l  %74 = select i1 %67, i32 -64, i32 0\l  %75 = add nsw i32 %74, %66\l  %76 = icmp ugt i32 %75, 31\l  %77 = select i1 %76, i32 %69, i32 %68\l  %78 = select i1 %76, i32 %70, i32 %69\l  %79 = select i1 %76, i32 %71, i32 %70\l  %80 = select i1 %76, i32 %72, i32 %71\l  %81 = select i1 %76, i32 %73, i32 %72\l  %82 = select i1 %76, i32 -32, i32 0\l  %83 = add nsw i32 %82, %75\l  %84 = icmp ugt i32 %83, 31\l  %85 = select i1 %84, i32 %78, i32 %77\l  %86 = select i1 %84, i32 %79, i32 %78\l  %87 = select i1 %84, i32 %80, i32 %79\l  %88 = select i1 %84, i32 %81, i32 %80\l  %89 = select i1 %84, i32 -32, i32 0\l  %90 = add nsw i32 %89, %83\l  %91 = icmp eq i32 %90, 0\l  %92 = sub nsw i32 32, %90\l  %93 = tail call i32 @llvm.fshr.i32(i32 %85, i32 %86, i32 %92)\l  %94 = tail call i32 @llvm.fshr.i32(i32 %86, i32 %87, i32 %92)\l  %95 = tail call i32 @llvm.fshr.i32(i32 %87, i32 %88, i32 %92)\l  %96 = select i1 %91, i32 %85, i32 %93\l  %97 = select i1 %91, i32 %86, i32 %94\l  %98 = select i1 %91, i32 %87, i32 %95\l  %99 = lshr i32 %96, 29\l  %100 = tail call i32 @llvm.fshl.i32(i32 %96, i32 %97, i32 2)\l  %101 = tail call i32 @llvm.fshl.i32(i32 %97, i32 %98, i32 2)\l  %102 = tail call i32 @llvm.fshl.i32(i32 %98, i32 %88, i32 2)\l  %103 = and i32 %99, 1\l  %104 = sub nsw i32 0, %103\l  %105 = shl i32 %99, 31\l  %106 = xor i32 %100, %104\l  %107 = xor i32 %101, %104\l  %108 = xor i32 %102, %104\l  %109 = tail call i32 @llvm.ctlz.i32(i32 %106, i1 false), !range !7\l  %110 = sub nsw i32 31, %109\l  %111 = tail call i32 @llvm.fshr.i32(i32 %106, i32 %107, i32 %110)\l  %112 = tail call i32 @llvm.fshr.i32(i32 %107, i32 %108, i32 %110)\l  %113 = shl nuw nsw i32 %109, 23\l  %114 = sub nuw nsw i32 1056964608, %113\l  %115 = lshr i32 %111, 9\l  %116 = or i32 %115, %114\l  %117 = or i32 %116, %105\l  %118 = bitcast i32 %117 to float\l  %119 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 23)\l  %120 = tail call i32 @llvm.ctlz.i32(i32 %119, i1 false), !range !7\l  %121 = fmul float %118, 0x3FF921FB40000000\l  %122 = add nuw nsw i32 %120, %109\l  %123 = shl nuw nsw i32 %122, 23\l  %124 = sub nuw nsw i32 855638016, %123\l  %125 = sub nsw i32 31, %120\l  %126 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %112, i32 %125)\l  %127 = lshr i32 %126, 9\l  %128 = or i32 %124, %127\l  %129 = or i32 %128, %105\l  %130 = bitcast i32 %129 to float\l  %131 = fneg float %121\l  %132 = tail call float @llvm.fma.f32(float %118, float 0x3FF921FB40000000,\l... float %131)\l  %133 = tail call float @llvm.fma.f32(float %118, float 0x3E74442D00000000,\l... float %132)\l  %134 = tail call float @llvm.fma.f32(float %130, float 0x3FF921FB40000000,\l... float %133)\l  %135 = fadd float %121, %134\l  %136 = lshr i32 %96, 30\l  %137 = add nuw nsw i32 %103, %136\l  br label %138\l}"];
	Node0x543e600 -> Node0x543f0b0;
	Node0x543f0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%138:\l138:                                              \l  %139 = phi i32 [ %31, %24 ], [ %33, %32 ]\l  %140 = phi float [ %29, %24 ], [ %135, %32 ]\l  %141 = phi i32 [ %30, %24 ], [ %137, %32 ]\l  %142 = fmul float %140, %140\l  %143 = tail call float @llvm.fmuladd.f32(float %142, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %144 = tail call float @llvm.fmuladd.f32(float %142, float %143, float\l... 0xBFC55553A0000000)\l  %145 = fmul float %142, %144\l  %146 = tail call float @llvm.fmuladd.f32(float %140, float %145, float %140)\l  %147 = tail call float @llvm.fmuladd.f32(float %142, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %148 = tail call float @llvm.fmuladd.f32(float %142, float %147, float\l... 0x3FA5557EE0000000)\l  %149 = tail call float @llvm.fmuladd.f32(float %142, float %148, float\l... 0xBFE0000080000000)\l  %150 = tail call float @llvm.fmuladd.f32(float %142, float %149, float\l... 1.000000e+00)\l  %151 = and i32 %141, 1\l  %152 = icmp eq i32 %151, 0\l  %153 = select i1 %152, float %146, float %150\l  %154 = bitcast float %153 to i32\l  %155 = shl i32 %141, 30\l  %156 = and i32 %155, -2147483648\l  %157 = bitcast float %21 to i32\l  %158 = xor i32 %139, %157\l  %159 = xor i32 %158, %156\l  %160 = xor i32 %159, %154\l  %161 = bitcast i32 %160 to float\l  %162 = tail call i1 @llvm.amdgcn.class.f32(float %22, i32 504)\l  %163 = select i1 %162, float %161, float 0x7FF8000000000000\l  %164 = sext i32 %16 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %1, i64 %164\l  store float %163, float addrspace(1)* %165, align 4, !tbaa !8\l  %166 = getelementptr inbounds float, float addrspace(1)* %0, i64 %164\l  store float %163, float addrspace(1)* %166, align 4, !tbaa !8\l  %167 = icmp eq i32 %13, 0\l  %168 = icmp eq i32 %16, %2\l  %169 = select i1 %167, i1 true, i1 %168\l  br i1 %169, label %178, label %170\l|{<s0>T|<s1>F}}"];
	Node0x543f0b0:s0 -> Node0x5447280;
	Node0x543f0b0:s1 -> Node0x5447310;
	Node0x5447310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%170:\l170:                                              \l  %171 = icmp slt i32 %3, 1\l  br i1 %171, label %264, label %172\l|{<s0>T|<s1>F}}"];
	Node0x5447310:s0 -> Node0x543d370;
	Node0x5447310:s1 -> Node0x54474e0;
	Node0x54474e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%172:\l172:                                              \l  %173 = load float, float addrspace(1)* %165, align 4, !tbaa !8\l  %174 = and i32 %3, 7\l  %175 = icmp ult i32 %3, 8\l  br i1 %175, label %248, label %176\l|{<s0>T|<s1>F}}"];
	Node0x54474e0:s0 -> Node0x54477d0;
	Node0x54474e0:s1 -> Node0x5447820;
	Node0x5447820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%176:\l176:                                              \l  %177 = and i32 %3, -8\l  br label %179\l}"];
	Node0x5447820 -> Node0x5447a20;
	Node0x5447280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%178:\l178:                                              \l  store float 0.000000e+00, float addrspace(1)* %165, align 4, !tbaa !8\l  br label %264\l}"];
	Node0x5447280 -> Node0x543d370;
	Node0x5447a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%179:\l179:                                              \l  %180 = phi float [ %173, %176 ], [ %245, %179 ]\l  %181 = phi i32 [ 0, %176 ], [ %246, %179 ]\l  %182 = fpext float %180 to double\l  %183 = fmul contract double %182, 2.000000e+00\l  %184 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %185 = fpext float %184 to double\l  %186 = fsub contract double %183, %185\l  %187 = fmul contract double %182, 0x3FC70A3D80000000\l  %188 = fsub contract double %186, %187\l  %189 = fptrunc double %188 to float\l  store float %180, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %189, float addrspace(1)* %165, align 4, !tbaa !8\l  %190 = fpext float %189 to double\l  %191 = fmul contract double %190, 2.000000e+00\l  %192 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %193 = fpext float %192 to double\l  %194 = fsub contract double %191, %193\l  %195 = fmul contract double %190, 0x3FC70A3D80000000\l  %196 = fsub contract double %194, %195\l  %197 = fptrunc double %196 to float\l  store float %189, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %197, float addrspace(1)* %165, align 4, !tbaa !8\l  %198 = fpext float %197 to double\l  %199 = fmul contract double %198, 2.000000e+00\l  %200 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %201 = fpext float %200 to double\l  %202 = fsub contract double %199, %201\l  %203 = fmul contract double %198, 0x3FC70A3D80000000\l  %204 = fsub contract double %202, %203\l  %205 = fptrunc double %204 to float\l  store float %197, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %205, float addrspace(1)* %165, align 4, !tbaa !8\l  %206 = fpext float %205 to double\l  %207 = fmul contract double %206, 2.000000e+00\l  %208 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %209 = fpext float %208 to double\l  %210 = fsub contract double %207, %209\l  %211 = fmul contract double %206, 0x3FC70A3D80000000\l  %212 = fsub contract double %210, %211\l  %213 = fptrunc double %212 to float\l  store float %205, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %213, float addrspace(1)* %165, align 4, !tbaa !8\l  %214 = fpext float %213 to double\l  %215 = fmul contract double %214, 2.000000e+00\l  %216 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %217 = fpext float %216 to double\l  %218 = fsub contract double %215, %217\l  %219 = fmul contract double %214, 0x3FC70A3D80000000\l  %220 = fsub contract double %218, %219\l  %221 = fptrunc double %220 to float\l  store float %213, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %221, float addrspace(1)* %165, align 4, !tbaa !8\l  %222 = fpext float %221 to double\l  %223 = fmul contract double %222, 2.000000e+00\l  %224 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %225 = fpext float %224 to double\l  %226 = fsub contract double %223, %225\l  %227 = fmul contract double %222, 0x3FC70A3D80000000\l  %228 = fsub contract double %226, %227\l  %229 = fptrunc double %228 to float\l  store float %221, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %229, float addrspace(1)* %165, align 4, !tbaa !8\l  %230 = fpext float %229 to double\l  %231 = fmul contract double %230, 2.000000e+00\l  %232 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %233 = fpext float %232 to double\l  %234 = fsub contract double %231, %233\l  %235 = fmul contract double %230, 0x3FC70A3D80000000\l  %236 = fsub contract double %234, %235\l  %237 = fptrunc double %236 to float\l  store float %229, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %237, float addrspace(1)* %165, align 4, !tbaa !8\l  %238 = fpext float %237 to double\l  %239 = fmul contract double %238, 2.000000e+00\l  %240 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %241 = fpext float %240 to double\l  %242 = fsub contract double %239, %241\l  %243 = fmul contract double %238, 0x3FC70A3D80000000\l  %244 = fsub contract double %242, %243\l  %245 = fptrunc double %244 to float\l  store float %237, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %245, float addrspace(1)* %165, align 4, !tbaa !8\l  %246 = add i32 %181, 8\l  %247 = icmp eq i32 %246, %177\l  br i1 %247, label %248, label %179, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5447a20:s0 -> Node0x54477d0;
	Node0x5447a20:s1 -> Node0x5447a20;
	Node0x54477d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%248:\l248:                                              \l  %249 = phi float [ %173, %172 ], [ %245, %179 ]\l  %250 = icmp eq i32 %174, 0\l  br i1 %250, label %264, label %251\l|{<s0>T|<s1>F}}"];
	Node0x54477d0:s0 -> Node0x543d370;
	Node0x54477d0:s1 -> Node0x544ab60;
	Node0x544ab60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%251:\l251:                                              \l  %252 = phi float [ %261, %251 ], [ %249, %248 ]\l  %253 = phi i32 [ %262, %251 ], [ 0, %248 ]\l  %254 = fpext float %252 to double\l  %255 = fmul contract double %254, 2.000000e+00\l  %256 = load float, float addrspace(1)* %166, align 4, !tbaa !8\l  %257 = fpext float %256 to double\l  %258 = fsub contract double %255, %257\l  %259 = fmul contract double %254, 0x3FC70A3D80000000\l  %260 = fsub contract double %258, %259\l  %261 = fptrunc double %260 to float\l  store float %252, float addrspace(1)* %166, align 4, !tbaa !8\l  store float %261, float addrspace(1)* %165, align 4, !tbaa !8\l  %262 = add i32 %253, 1\l  %263 = icmp eq i32 %262, %174\l  br i1 %263, label %264, label %251, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x544ab60:s0 -> Node0x543d370;
	Node0x544ab60:s1 -> Node0x544ab60;
	Node0x543d370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%264:\l264:                                              \l  ret void\l}"];
}
