digraph "CFG for '_Z10k_ExposurePfiif' function" {
	label="CFG for '_Z10k_ExposurePfiif' function";

	Node0x5e2b750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp slt i32 %13, %1\l  %23 = icmp slt i32 %21, %2\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %49\l|{<s0>T|<s1>F}}"];
	Node0x5e2b750:s0 -> Node0x5e2f1c0;
	Node0x5e2b750:s1 -> Node0x5e2f250;
	Node0x5e2f1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%25:\l25:                                               \l  %26 = mul nsw i32 %21, %1\l  %27 = add nsw i32 %26, %13\l  %28 = shl nsw i32 %27, 2\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %32 = fcmp olt float %3, -1.260000e+02\l  %33 = select i1 %32, float 0x3BF0000000000000, float 1.000000e+00\l  %34 = select i1 %32, float 6.400000e+01, float 0.000000e+00\l  %35 = fadd float %34, %3\l  %36 = tail call float @llvm.exp2.f32(float %35)\l  %37 = fmul float %33, %36\l  %38 = fmul contract float %37, %31\l  store float %38, float addrspace(1)* %30, align 4, !tbaa !7\l  %39 = add nuw nsw i32 %28, 1\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %43 = fmul contract float %37, %42\l  store float %43, float addrspace(1)* %41, align 4, !tbaa !7\l  %44 = add nuw nsw i32 %28, 2\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %48 = fmul contract float %37, %47\l  store float %48, float addrspace(1)* %46, align 4, !tbaa !7\l  br label %49\l}"];
	Node0x5e2f1c0 -> Node0x5e2f250;
	Node0x5e2f250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  ret void\l}"];
}
