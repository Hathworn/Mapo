digraph "CFG for '_Z17ChannelBoxKernelBPKfPfiii' function" {
	label="CFG for '_Z17ChannelBoxKernelBPKfPfiii' function";

	Node0x573ae70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = add i32 %20, %21\l  %23 = icmp slt i32 %14, %2\l  %24 = icmp slt i32 %22, %3\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %82\l|{<s0>T|<s1>F}}"];
	Node0x573ae70:s0 -> Node0x573e8e0;
	Node0x573ae70:s1 -> Node0x573e970;
	Node0x573e8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %22, %2\l  %28 = add nsw i32 %27, %14\l  %29 = shl nsw i32 %28, 2\l  %30 = icmp eq i32 %4, 1\l  br i1 %30, label %31, label %43\l|{<s0>T|<s1>F}}"];
	Node0x573e8e0:s0 -> Node0x573ed50;
	Node0x573e8e0:s1 -> Node0x573eda0;
	Node0x573ed50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%31:\l31:                                               \l  %32 = add nuw nsw i32 %29, 3\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %1, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = sext i32 %29 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36\l  store float %35, float addrspace(1)* %37, align 4, !tbaa !7\l  %38 = add nuw nsw i32 %29, 1\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  store float %35, float addrspace(1)* %40, align 4, !tbaa !7\l  %41 = add nuw nsw i32 %29, 2\l  %42 = sext i32 %41 to i64\l  br label %76\l}"];
	Node0x573ed50 -> Node0x573fe30;
	Node0x573eda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%43:\l43:                                               \l  %44 = sext i32 %29 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = add nuw nsw i32 %29, 3\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = add nuw nsw i32 %29, 1\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %56 = add nuw nsw i32 %29, 2\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = bitcast float addrspace(1)* %58 to \<2 x float\> addrspace(1)*\l  %60 = load \<2 x float\>, \<2 x float\> addrspace(1)* %59, align 4, !tbaa !7\l  %61 = extractelement \<2 x float\> %60, i64 1\l  %62 = fmul contract float %46, %61\l  %63 = fsub contract float 1.000000e+00, %61\l  %64 = fmul contract float %50, %63\l  %65 = fadd contract float %62, %64\l  store float %65, float addrspace(1)* %45, align 4, !tbaa !7\l  %66 = fmul contract float %54, %61\l  %67 = load float, float addrspace(1)* %55, align 4, !tbaa !7\l  %68 = fmul contract float %67, %63\l  %69 = fadd contract float %66, %68\l  store float %69, float addrspace(1)* %53, align 4, !tbaa !7\l  %70 = extractelement \<2 x float\> %60, i64 0\l  %71 = fmul contract float %70, %61\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7\l  %74 = fmul contract float %73, %63\l  %75 = fadd contract float %71, %74\l  br label %76\l}"];
	Node0x573eda0 -> Node0x573fe30;
	Node0x573fe30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%76:\l76:                                               \l  %77 = phi i64 [ %48, %43 ], [ %33, %31 ]\l  %78 = phi i64 [ %57, %43 ], [ %42, %31 ]\l  %79 = phi contract float [ %75, %43 ], [ %35, %31 ]\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  store float %79, float addrspace(1)* %80, align 4, !tbaa !7\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  store float 1.000000e+00, float addrspace(1)* %81, align 4, !tbaa !7\l  br label %82\l}"];
	Node0x573fe30 -> Node0x573e970;
	Node0x573e970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%82:\l82:                                               \l  ret void\l}"];
}
