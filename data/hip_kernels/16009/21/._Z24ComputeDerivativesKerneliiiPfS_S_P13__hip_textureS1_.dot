digraph "CFG for '_Z24ComputeDerivativesKerneliiiPfS_S_P13__hip_textureS1_' function" {
	label="CFG for '_Z24ComputeDerivativesKerneliiiPfS_S_P13__hip_textureS1_' function";

	Node0x522a790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = add i32 %16, %9\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !5, !invariant.load !6\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = add i32 %24, %18\l  %26 = icmp slt i32 %17, %0\l  %27 = icmp slt i32 %25, %1\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %248\l|{<s0>T|<s1>F}}"];
	Node0x522a790:s0 -> Node0x522e1b0;
	Node0x522a790:s1 -> Node0x522e240;
	Node0x522e1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%29:\l29:                                               \l  %30 = sitofp i32 %0 to float\l  %31 = fdiv contract float 1.000000e+00, %30\l  %32 = sitofp i32 %1 to float\l  %33 = fdiv contract float 1.000000e+00, %32\l  %34 = sitofp i32 %17 to float\l  %35 = fadd contract float %34, 5.000000e-01\l  %36 = fmul contract float %31, %35\l  %37 = sitofp i32 %25 to float\l  %38 = fadd contract float %37, 5.000000e-01\l  %39 = fmul contract float %33, %38\l  %40 = fmul contract float %31, 2.000000e+00\l  %41 = fadd contract float %40, %36\l  %42 = bitcast %struct.__hip_texture addrspace(1)* %6 to i32 addrspace(1)*\l  %43 = addrspacecast i32 addrspace(1)* %42 to i32 addrspace(4)*\l  %44 = getelementptr inbounds i32, i32 addrspace(4)* %43, i64 12\l  %45 = getelementptr inbounds i32, i32 addrspace(4)* %43, i64 10\l  %46 = load i32, i32 addrspace(4)* %45, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %47 = uitofp i32 %46 to float\l  %48 = getelementptr inbounds i32, i32 addrspace(4)* %43, i64 2\l  %49 = load i32, i32 addrspace(4)* %48, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %50 = lshr i32 %49, 14\l  %51 = and i32 %50, 16383\l  %52 = add nuw nsw i32 %51, 1\l  %53 = uitofp i32 %52 to float\l  %54 = load i32, i32 addrspace(4)* %44, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %55 = and i32 %54, 32768\l  %56 = icmp eq i32 %55, 0\l  %57 = select i1 %56, float %47, float 1.000000e+00\l  %58 = select i1 %56, float %53, float 1.000000e+00\l  %59 = getelementptr inbounds i32, i32 addrspace(4)* %43, i64 14\l  %60 = load i32, i32 addrspace(4)* %59, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %61 = and i32 %60, 1048576\l  %62 = icmp eq i32 %61, 0\l  %63 = bitcast i32 addrspace(4)* %44 to \<4 x i32\> addrspace(4)*\l  %64 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %63, align 16, !tbaa !11,\l... !amdgpu.noclobber !6\l  %65 = bitcast %struct.__hip_texture addrspace(1)* %6 to \<8 x i32\>\l... addrspace(1)*\l  %66 = addrspacecast \<8 x i32\> addrspace(1)* %65 to \<8 x i32\> addrspace(4)*\l  %67 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %66, align 32, !tbaa !11,\l... !amdgpu.noclobber !6\l  %68 = tail call float @llvm.amdgcn.rcp.f32(float %58)\l  %69 = fmul float %39, %58\l  %70 = tail call float @llvm.floor.f32(float %69)\l  %71 = fmul float %68, %70\l  %72 = select i1 %62, float %71, float %39\l  %73 = tail call float @llvm.amdgcn.rcp.f32(float %57)\l  %74 = fmul float %41, %57\l  %75 = tail call float @llvm.floor.f32(float %74)\l  %76 = fmul float %73, %75\l  %77 = select i1 %62, float %76, float %41\l  %78 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %77, float %72, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %79 = fadd contract float %31, %36\l  %80 = fmul float %79, %57\l  %81 = tail call float @llvm.floor.f32(float %80)\l  %82 = fmul float %73, %81\l  %83 = select i1 %62, float %82, float %79\l  %84 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %83, float %72, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %85 = fmul contract float %84, 8.000000e+00\l  %86 = fsub contract float %78, %85\l  %87 = fsub contract float %36, %31\l  %88 = fmul float %87, %57\l  %89 = tail call float @llvm.floor.f32(float %88)\l  %90 = fmul float %73, %89\l  %91 = select i1 %62, float %90, float %87\l  %92 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %91, float %72, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %93 = fmul contract float %92, 8.000000e+00\l  %94 = fadd contract float %86, %93\l  %95 = fsub contract float %36, %40\l  %96 = fmul float %95, %57\l  %97 = tail call float @llvm.floor.f32(float %96)\l  %98 = fmul float %73, %97\l  %99 = select i1 %62, float %98, float %95\l  %100 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %99, float %72, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %101 = fsub contract float %94, %100\l  %102 = fdiv contract float %101, 1.200000e+01\l  %103 = bitcast %struct.__hip_texture addrspace(1)* %7 to i32 addrspace(1)*\l  %104 = addrspacecast i32 addrspace(1)* %103 to i32 addrspace(4)*\l  %105 = getelementptr inbounds i32, i32 addrspace(4)* %104, i64 12\l  %106 = getelementptr inbounds i32, i32 addrspace(4)* %104, i64 10\l  %107 = load i32, i32 addrspace(4)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %108 = uitofp i32 %107 to float\l  %109 = getelementptr inbounds i32, i32 addrspace(4)* %104, i64 2\l  %110 = load i32, i32 addrspace(4)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %111 = lshr i32 %110, 14\l  %112 = and i32 %111, 16383\l  %113 = add nuw nsw i32 %112, 1\l  %114 = uitofp i32 %113 to float\l  %115 = load i32, i32 addrspace(4)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %116 = and i32 %115, 32768\l  %117 = icmp eq i32 %116, 0\l  %118 = select i1 %117, float %108, float 1.000000e+00\l  %119 = select i1 %117, float %114, float 1.000000e+00\l  %120 = getelementptr inbounds i32, i32 addrspace(4)* %104, i64 14\l  %121 = load i32, i32 addrspace(4)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %122 = and i32 %121, 1048576\l  %123 = icmp eq i32 %122, 0\l  %124 = bitcast i32 addrspace(4)* %105 to \<4 x i32\> addrspace(4)*\l  %125 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %124, align 16, !tbaa !11,\l... !amdgpu.noclobber !6\l  %126 = bitcast %struct.__hip_texture addrspace(1)* %7 to \<8 x i32\>\l... addrspace(1)*\l  %127 = addrspacecast \<8 x i32\> addrspace(1)* %126 to \<8 x i32\> addrspace(4)*\l  %128 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %127, align 32, !tbaa !11,\l... !amdgpu.noclobber !6\l  %129 = tail call float @llvm.amdgcn.rcp.f32(float %119)\l  %130 = fmul float %39, %119\l  %131 = tail call float @llvm.floor.f32(float %130)\l  %132 = fmul float %129, %131\l  %133 = select i1 %123, float %132, float %39\l  %134 = tail call float @llvm.amdgcn.rcp.f32(float %118)\l  %135 = fmul float %41, %118\l  %136 = tail call float @llvm.floor.f32(float %135)\l  %137 = fmul float %134, %136\l  %138 = select i1 %123, float %137, float %41\l  %139 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %138, float %133, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %140 = fmul float %79, %118\l  %141 = tail call float @llvm.floor.f32(float %140)\l  %142 = fmul float %134, %141\l  %143 = select i1 %123, float %142, float %79\l  %144 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %143, float %133, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %145 = fmul contract float %144, 8.000000e+00\l  %146 = fsub contract float %139, %145\l  %147 = fmul float %87, %118\l  %148 = tail call float @llvm.floor.f32(float %147)\l  %149 = fmul float %134, %148\l  %150 = select i1 %123, float %149, float %87\l  %151 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %150, float %133, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %152 = fmul contract float %151, 8.000000e+00\l  %153 = fadd contract float %146, %152\l  %154 = fmul float %95, %118\l  %155 = tail call float @llvm.floor.f32(float %154)\l  %156 = fmul float %134, %155\l  %157 = select i1 %123, float %156, float %95\l  %158 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %157, float %133, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %159 = fsub contract float %153, %158\l  %160 = fdiv contract float %159, 1.200000e+01\l  %161 = fadd contract float %102, %160\l  %162 = fmul contract float %161, 5.000000e-01\l  %163 = bitcast float addrspace(1)* %3 to i8 addrspace(1)*\l  %164 = mul nsw i32 %25, %2\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds i8, i8 addrspace(1)* %163, i64 %165\l  %167 = bitcast i8 addrspace(1)* %166 to float addrspace(1)*\l  %168 = sext i32 %17 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %167, i64 %168\l  store float %162, float addrspace(1)* %169, align 4, !tbaa !12\l  %170 = fmul float %36, %57\l  %171 = tail call float @llvm.floor.f32(float %170)\l  %172 = fmul float %73, %171\l  %173 = select i1 %62, float %172, float %36\l  %174 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %173, float %72, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %175 = fmul float %36, %118\l  %176 = tail call float @llvm.floor.f32(float %175)\l  %177 = fmul float %134, %176\l  %178 = select i1 %123, float %177, float %36\l  %179 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %178, float %133, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %180 = fsub contract float %174, %179\l  %181 = bitcast float addrspace(1)* %5 to i8 addrspace(1)*\l  %182 = getelementptr inbounds i8, i8 addrspace(1)* %181, i64 %165\l  %183 = bitcast i8 addrspace(1)* %182 to float addrspace(1)*\l  %184 = getelementptr inbounds float, float addrspace(1)* %183, i64 %168\l  store float %180, float addrspace(1)* %184, align 4, !tbaa !12\l  %185 = fmul contract float %33, 2.000000e+00\l  %186 = fadd contract float %185, %39\l  %187 = fmul float %186, %58\l  %188 = tail call float @llvm.floor.f32(float %187)\l  %189 = fmul float %68, %188\l  %190 = select i1 %62, float %189, float %186\l  %191 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %173, float %190, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %192 = fadd contract float %33, %39\l  %193 = fmul float %192, %58\l  %194 = tail call float @llvm.floor.f32(float %193)\l  %195 = fmul float %68, %194\l  %196 = select i1 %62, float %195, float %192\l  %197 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %173, float %196, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %198 = fmul contract float %197, 8.000000e+00\l  %199 = fsub contract float %191, %198\l  %200 = fsub contract float %39, %33\l  %201 = fmul float %200, %58\l  %202 = tail call float @llvm.floor.f32(float %201)\l  %203 = fmul float %68, %202\l  %204 = select i1 %62, float %203, float %200\l  %205 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %173, float %204, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %206 = fmul contract float %205, 8.000000e+00\l  %207 = fadd contract float %199, %206\l  %208 = fsub contract float %39, %185\l  %209 = fmul float %208, %58\l  %210 = tail call float @llvm.floor.f32(float %209)\l  %211 = fmul float %68, %210\l  %212 = select i1 %62, float %211, float %208\l  %213 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %173, float %212, \<8 x i32\> %67, \<4 x i32\> %64, i1 false, i32 0, i32 0)\l  %214 = fsub contract float %207, %213\l  %215 = fdiv contract float %214, 1.200000e+01\l  %216 = fmul float %186, %119\l  %217 = tail call float @llvm.floor.f32(float %216)\l  %218 = fmul float %129, %217\l  %219 = select i1 %123, float %218, float %186\l  %220 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %178, float %219, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %221 = fmul float %192, %119\l  %222 = tail call float @llvm.floor.f32(float %221)\l  %223 = fmul float %129, %222\l  %224 = select i1 %123, float %223, float %192\l  %225 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %178, float %224, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %226 = fmul contract float %225, 8.000000e+00\l  %227 = fsub contract float %220, %226\l  %228 = fmul float %200, %119\l  %229 = tail call float @llvm.floor.f32(float %228)\l  %230 = fmul float %129, %229\l  %231 = select i1 %123, float %230, float %200\l  %232 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %178, float %231, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %233 = fmul contract float %232, 8.000000e+00\l  %234 = fadd contract float %227, %233\l  %235 = fmul float %208, %119\l  %236 = tail call float @llvm.floor.f32(float %235)\l  %237 = fmul float %129, %236\l  %238 = select i1 %123, float %237, float %208\l  %239 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %178, float %238, \<8 x i32\> %128, \<4 x i32\> %125, i1 false, i32 0, i32 0)\l  %240 = fsub contract float %234, %239\l  %241 = fdiv contract float %240, 1.200000e+01\l  %242 = fadd contract float %215, %241\l  %243 = fmul contract float %242, 5.000000e-01\l  %244 = bitcast float addrspace(1)* %4 to i8 addrspace(1)*\l  %245 = getelementptr inbounds i8, i8 addrspace(1)* %244, i64 %165\l  %246 = bitcast i8 addrspace(1)* %245 to float addrspace(1)*\l  %247 = getelementptr inbounds float, float addrspace(1)* %246, i64 %168\l  store float %243, float addrspace(1)* %247, align 4, !tbaa !12\l  br label %248\l}"];
	Node0x522e1b0 -> Node0x522e240;
	Node0x522e240 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%248:\l248:                                              \l  ret void\l}"];
}
