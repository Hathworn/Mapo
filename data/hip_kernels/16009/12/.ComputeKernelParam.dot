digraph "CFG for 'ComputeKernelParam' function" {
	label="CFG for 'ComputeKernelParam' function";

	Node0x5e6a450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !4, !invariant.load !5\l  %24 = zext i16 %23 to i32\l  %25 = mul i32 %20, %24\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %27 = add i32 %25, %26\l  %28 = icmp slt i32 %19, %1\l  %29 = icmp slt i32 %27, %2\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %199\l|{<s0>T|<s1>F}}"];
	Node0x5e6a450:s0 -> Node0x5e6e940;
	Node0x5e6a450:s1 -> Node0x5e6e9d0;
	Node0x5e6e940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%31:\l31:                                               \l  %32 = bitcast %struct.HIP_vector_type addrspace(1)* %0 to i8 addrspace(1)*\l  %33 = mul nsw i32 %27, %3\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds i8, i8 addrspace(1)* %32, i64 %34\l  %36 = bitcast i8 addrspace(1)* %35 to %struct.HIP_vector_type addrspace(1)*\l  %37 = sext i32 %19 to i64\l  %38 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %36, i64 %37, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %39 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %36, i64 %37, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %40 = bitcast float addrspace(1)* %38 to \<2 x float\> addrspace(1)*\l  %41 = load \<2 x float\>, \<2 x float\> addrspace(1)* %40, align 4\l  %42 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %36, i64 %37, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %43 = load float, float addrspace(1)* %42, align 4, !amdgpu.noclobber !5\l  %44 = extractelement \<2 x float\> %41, i64 0\l  %45 = extractelement \<2 x float\> %41, i64 1\l  %46 = fsub contract float %45, %44\l  %47 = fmul contract float %46, %46\l  %48 = fmul contract float %43, 4.000000e+00\l  %49 = fmul contract float %43, %48\l  %50 = fadd contract float %47, %49\l  %51 = fcmp olt float %50, 0x39F0000000000000\l  %52 = select i1 %51, float 0x41F0000000000000, float 1.000000e+00\l  %53 = fmul float %50, %52\l  %54 = tail call float @llvm.sqrt.f32(float %53)\l  %55 = bitcast float %54 to i32\l  %56 = add nsw i32 %55, -1\l  %57 = bitcast i32 %56 to float\l  %58 = add nsw i32 %55, 1\l  %59 = bitcast i32 %58 to float\l  %60 = tail call i1 @llvm.amdgcn.class.f32(float %53, i32 608)\l  %61 = select i1 %51, float 0x3EF0000000000000, float 1.000000e+00\l  %62 = fneg float %59\l  %63 = tail call float @llvm.fma.f32(float %62, float %54, float %53)\l  %64 = fcmp ogt float %63, 0.000000e+00\l  %65 = fneg float %57\l  %66 = tail call float @llvm.fma.f32(float %65, float %54, float %53)\l  %67 = fcmp ole float %66, 0.000000e+00\l  %68 = select i1 %67, float %57, float %54\l  %69 = select i1 %64, float %59, float %68\l  %70 = fmul float %61, %69\l  %71 = select i1 %60, float %53, float %70\l  %72 = fmul contract float %43, 2.000000e+00\l  %73 = fadd contract float %46, %71\l  %74 = fmul contract float %72, %72\l  %75 = fmul contract float %73, %73\l  %76 = fadd contract float %74, %75\l  %77 = fcmp olt float %76, 0x39F0000000000000\l  %78 = select i1 %77, float 0x41F0000000000000, float 1.000000e+00\l  %79 = fmul float %76, %78\l  %80 = tail call float @llvm.sqrt.f32(float %79)\l  %81 = bitcast float %80 to i32\l  %82 = add nsw i32 %81, -1\l  %83 = bitcast i32 %82 to float\l  %84 = add nsw i32 %81, 1\l  %85 = bitcast i32 %84 to float\l  %86 = tail call i1 @llvm.amdgcn.class.f32(float %79, i32 608)\l  %87 = select i1 %77, float 0x3EF0000000000000, float 1.000000e+00\l  %88 = fneg float %85\l  %89 = tail call float @llvm.fma.f32(float %88, float %80, float %79)\l  %90 = fcmp ogt float %89, 0.000000e+00\l  %91 = fneg float %83\l  %92 = tail call float @llvm.fma.f32(float %91, float %80, float %79)\l  %93 = fcmp ole float %92, 0.000000e+00\l  %94 = select i1 %93, float %83, float %80\l  %95 = select i1 %90, float %85, float %94\l  %96 = fmul float %87, %95\l  %97 = select i1 %86, float %79, float %96\l  %98 = fcmp contract ogt float %97, 0.000000e+00\l  br i1 %98, label %99, label %102\l|{<s0>T|<s1>F}}"];
	Node0x5e6e940:s0 -> Node0x5e73120;
	Node0x5e6e940:s1 -> Node0x5e73170;
	Node0x5e73120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%99:\l99:                                               \l  %100 = fdiv contract float %72, %97\l  %101 = fdiv contract float %73, %97\l  br label %102\l}"];
	Node0x5e73120 -> Node0x5e73170;
	Node0x5e73170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%102:\l102:                                              \l  %103 = phi float [ %101, %99 ], [ 0.000000e+00, %31 ]\l  %104 = phi float [ %100, %99 ], [ 1.000000e+00, %31 ]\l  %105 = fadd contract float %44, %45\l  %106 = fadd contract float %105, %71\l  %107 = fmul contract float %106, 5.000000e-01\l  %108 = fsub contract float %105, %71\l  %109 = fmul contract float %108, 5.000000e-01\l  %110 = fsub contract float %107, %109\l  %111 = fmul contract float %110, %110\l  %112 = fadd contract float %107, %109\l  %113 = fmul contract float %112, %112\l  %114 = fdiv contract float %111, %113\l  %115 = fcmp olt float %114, 0x39F0000000000000\l  %116 = select i1 %115, float 0x41F0000000000000, float 1.000000e+00\l  %117 = fmul float %114, %116\l  %118 = tail call float @llvm.sqrt.f32(float %117)\l  %119 = bitcast float %118 to i32\l  %120 = add nsw i32 %119, -1\l  %121 = bitcast i32 %120 to float\l  %122 = add nsw i32 %119, 1\l  %123 = bitcast i32 %122 to float\l  %124 = tail call i1 @llvm.amdgcn.class.f32(float %117, i32 608)\l  %125 = select i1 %115, float 0x3EF0000000000000, float 1.000000e+00\l  %126 = fneg float %123\l  %127 = tail call float @llvm.fma.f32(float %126, float %118, float %117)\l  %128 = fcmp ogt float %127, 0.000000e+00\l  %129 = fneg float %121\l  %130 = tail call float @llvm.fma.f32(float %129, float %118, float %117)\l  %131 = fcmp ole float %130, 0.000000e+00\l  %132 = select i1 %131, float %121, float %118\l  %133 = select i1 %128, float %123, float %132\l  %134 = fmul float %125, %133\l  %135 = select i1 %124, float %117, float %134\l  %136 = fadd contract float %135, 1.000000e+00\l  %137 = fcmp olt float %107, 0x39F0000000000000\l  %138 = select i1 %137, float 0x41F0000000000000, float 1.000000e+00\l  %139 = fmul float %107, %138\l  %140 = tail call float @llvm.sqrt.f32(float %139)\l  %141 = bitcast float %140 to i32\l  %142 = add nsw i32 %141, -1\l  %143 = bitcast i32 %142 to float\l  %144 = add nsw i32 %141, 1\l  %145 = bitcast i32 %144 to float\l  %146 = tail call i1 @llvm.amdgcn.class.f32(float %139, i32 608)\l  %147 = select i1 %137, float 0x3EF0000000000000, float 1.000000e+00\l  %148 = fneg float %145\l  %149 = tail call float @llvm.fma.f32(float %148, float %140, float %139)\l  %150 = fcmp ogt float %149, 0.000000e+00\l  %151 = fneg float %143\l  %152 = tail call float @llvm.fma.f32(float %151, float %140, float %139)\l  %153 = fcmp ole float %152, 0.000000e+00\l  %154 = select i1 %153, float %143, float %140\l  %155 = select i1 %150, float %145, float %154\l  %156 = fmul float %147, %155\l  %157 = select i1 %146, float %139, float %156\l  %158 = fdiv contract float %157, %5\l  %159 = fsub contract float 1.000000e+00, %158\l  %160 = fadd contract float %159, %4\l  %161 = tail call float @llvm.minnum.f32(float %160, float 1.000000e+00)\l  %162 = tail call float @llvm.maxnum.f32(float %161, float 0.000000e+00)\l  %163 = fmul contract float %6, %8\l  %164 = fmul contract float %163, %136\l  %165 = fdiv contract float %6, %9\l  %166 = fmul contract float %165, %136\l  %167 = fsub contract float 1.000000e+00, %162\l  %168 = fmul contract float %164, %167\l  %169 = fmul contract float %162, %6\l  %170 = fmul contract float %169, %7\l  %171 = fadd contract float %168, %170\l  %172 = fmul contract float %166, %167\l  %173 = fadd contract float %172, %170\l  %174 = fmul contract float %171, %171\l  %175 = fmul contract float %173, %173\l  %176 = fneg contract float %104\l  %177 = fmul contract float %174, %103\l  %178 = fmul contract float %103, %177\l  %179 = fmul contract float %104, %104\l  %180 = fmul contract float %175, %179\l  %181 = fadd contract float %178, %180\l  %182 = fmul contract float %103, %104\l  %183 = fmul contract float %175, %182\l  %184 = fmul contract float %104, %177\l  %185 = fsub contract float %183, %184\l  %186 = fmul contract float %174, %176\l  %187 = fmul contract float %103, %103\l  %188 = fmul contract float %175, %187\l  %189 = fmul contract float %104, %186\l  %190 = fsub contract float %188, %189\l  %191 = fmul contract float %181, %190\l  %192 = fmul contract float %185, %185\l  %193 = fsub contract float %191, %192\l  %194 = fadd contract float %193, 0x3DDB7CDFE0000000\l  %195 = fdiv contract float %190, %194\l  %196 = fdiv contract float %181, %194\l  %197 = fneg contract float %185\l  %198 = fdiv contract float %197, %194\l  store float %195, float addrspace(1)* %38, align 4\l  store float %196, float addrspace(1)* %39, align 4\l  store float %198, float addrspace(1)* %42, align 4\l  br label %199\l}"];
	Node0x5e73170 -> Node0x5e6e9d0;
	Node0x5e6e9d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%199:\l199:                                              \l  ret void\l}"];
}
