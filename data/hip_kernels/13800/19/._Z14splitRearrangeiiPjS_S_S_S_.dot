digraph "CFG for '_Z14splitRearrangeiiPjS_S_S_S_' function" {
	label="CFG for '_Z14splitRearrangeiiPjS_S_S_S_' function";

	Node0x5a65500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = shl i32 %8, 10\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = shl nuw nsw i32 %10, 2\l  %12 = add i32 %9, %11\l  %13 = icmp ult i32 %10, 16\l  br i1 %13, label %14, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5a65500:s0 -> Node0x5a66d80;
	Node0x5a65500:s1 -> Node0x5a66e10;
	Node0x5a66d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%14:\l14:                                               \l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %15, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !5\l  %19 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !14, !invariant.load\l... !15\l  %22 = zext i16 %21 to i32\l  %23 = udiv i32 %18, %22\l  %24 = mul i32 %23, %22\l  %25 = icmp ugt i32 %18, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %10\l  %29 = add i32 %28, %8\l  %30 = zext i32 %29 to i64\l  %31 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %30\l  %32 = load i32, i32 addrspace(1)* %31, align 4, !tbaa !16, !amdgpu.noclobber\l... !15\l  %33 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7histo_s, i32 0, i32 %10\l  store i32 %32, i32 addrspace(3)* %33, align 4, !tbaa !16\l  br label %34\l}"];
	Node0x5a66d80 -> Node0x5a66e10;
	Node0x5a66e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%34:\l34:                                               \l  %35 = icmp slt i32 %12, %0\l  br i1 %35, label %36, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5a66e10:s0 -> Node0x5a67260;
	Node0x5a66e10:s1 -> Node0x5a69130;
	Node0x5a67260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%36:\l36:                                               \l  %37 = sext i32 %12 to i64\l  %38 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %37\l  %39 = load i32, i32 addrspace(1)* %38, align 16, !amdgpu.noclobber !15\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %38, i64 1\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !amdgpu.noclobber !15\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %38, i64 2\l  %43 = load i32, i32 addrspace(1)* %42, align 8, !amdgpu.noclobber !15\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %38, i64 3\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !amdgpu.noclobber !15\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %37\l  %47 = load i32, i32 addrspace(1)* %46, align 16, !amdgpu.noclobber !15\l  %48 = getelementptr inbounds i32, i32 addrspace(1)* %46, i64 1\l  %49 = load i32, i32 addrspace(1)* %48, align 4, !amdgpu.noclobber !15\l  %50 = getelementptr inbounds i32, i32 addrspace(1)* %46, i64 2\l  %51 = load i32, i32 addrspace(1)* %50, align 8, !amdgpu.noclobber !15\l  %52 = getelementptr inbounds i32, i32 addrspace(1)* %46, i64 3\l  %53 = load i32, i32 addrspace(1)* %52, align 4, !amdgpu.noclobber !15\l  br label %54\l}"];
	Node0x5a67260 -> Node0x5a69130;
	Node0x5a69130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%54:\l54:                                               \l  %55 = phi i32 [ %45, %36 ], [ -1, %34 ]\l  %56 = phi i32 [ %43, %36 ], [ -1, %34 ]\l  %57 = phi i32 [ %41, %36 ], [ -1, %34 ]\l  %58 = phi i32 [ %39, %36 ], [ -1, %34 ]\l  %59 = phi i32 [ %53, %36 ], [ undef, %34 ]\l  %60 = phi i32 [ %51, %36 ], [ undef, %34 ]\l  %61 = phi i32 [ %49, %36 ], [ undef, %34 ]\l  %62 = phi i32 [ %47, %36 ], [ undef, %34 ]\l  %63 = shl i32 %1, 2\l  %64 = add i32 %63, 4\l  %65 = shl nsw i32 -1, %64\l  %66 = xor i32 %65, -1\l  %67 = and i32 %58, %66\l  %68 = lshr i32 %67, %63\l  %69 = and i32 %57, %66\l  %70 = lshr i32 %69, %63\l  %71 = and i32 %56, %66\l  %72 = lshr i32 %71, %63\l  %73 = and i32 %55, %66\l  %74 = lshr i32 %73, %63\l  %75 = insertelement \<4 x i32\> undef, i32 %68, i64 0\l  %76 = insertelement \<4 x i32\> %75, i32 %70, i64 1\l  %77 = insertelement \<4 x i32\> %76, i32 %72, i64 2\l  %78 = insertelement \<4 x i32\> %77, i32 %74, i64 3\l  %79 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(3)* bitcast ([1024 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7array_s to %struct.HIP_vector_type\l... addrspace(3)*), i32 %10, i32 0, i32 0, i32 0\l  store \<4 x i32\> %78, \<4 x i32\> addrspace(3)* %79, align 16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %80 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7histo_s, i32 0, i32 %68\l  %81 = load i32, i32 addrspace(3)* %80, align 4, !tbaa !16\l  %82 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7histo_s, i32 0, i32 %70\l  %83 = load i32, i32 addrspace(3)* %82, align 4, !tbaa !16\l  %84 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7histo_s, i32 0, i32 %72\l  %85 = load i32, i32 addrspace(3)* %84, align 4, !tbaa !16\l  %86 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7histo_s, i32 0, i32 %74\l  %87 = load i32, i32 addrspace(3)* %86, align 4, !tbaa !16\l  %88 = insertelement \<4 x i32\> undef, i32 %81, i64 0\l  %89 = insertelement \<4 x i32\> %88, i32 %83, i64 1\l  %90 = insertelement \<4 x i32\> %89, i32 %85, i64 2\l  %91 = insertelement \<4 x i32\> %90, i32 %87, i64 3\l  %92 = icmp eq i32 %10, 0\l  br i1 %92, label %107, label %93\l|{<s0>T|<s1>F}}"];
	Node0x5a69130:s0 -> Node0x5a6b4d0;
	Node0x5a69130:s1 -> Node0x5a6bd70;
	Node0x5a6bd70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%93:\l93:                                               \l  %94 = phi i32 [ %96, %100 ], [ %11, %54 ]\l  %95 = phi \<4 x i32\> [ %103, %100 ], [ %91, %54 ]\l  %96 = add nsw i32 %94, -1\l  %97 = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(3)*\l... @_ZZ14splitRearrangeiiPjS_S_S_S_E7array_s, i32 0, i32 %96\l  %98 = load i32, i32 addrspace(3)* %97, align 4, !tbaa !16\l  %99 = icmp eq i32 %98, %68\l  br i1 %99, label %100, label %107\l|{<s0>T|<s1>F}}"];
	Node0x5a6bd70:s0 -> Node0x5a6beb0;
	Node0x5a6bd70:s1 -> Node0x5a6b4d0;
	Node0x5a6beb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%100:\l100:                                              \l  %101 = extractelement \<4 x i32\> %95, i64 0\l  %102 = add i32 %101, 1\l  %103 = insertelement \<4 x i32\> %95, i32 %102, i64 0\l  %104 = icmp ugt i32 %94, 1\l  br i1 %104, label %93, label %105, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5a6beb0:s0 -> Node0x5a6bd70;
	Node0x5a6beb0:s1 -> Node0x5a6c110;
	Node0x5a6c110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%105:\l105:                                              \l  %106 = insertelement \<4 x i32\> %95, i32 %102, i64 0\l  br label %107\l}"];
	Node0x5a6c110 -> Node0x5a6b4d0;
	Node0x5a6b4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%107:\l107:                                              \l  %108 = phi \<4 x i32\> [ %106, %105 ], [ %91, %54 ], [ %95, %93 ]\l  %109 = icmp eq i32 %70, %68\l  %110 = extractelement \<4 x i32\> %108, i64 0\l  %111 = add i32 %110, 1\l  %112 = extractelement \<4 x i32\> %108, i64 1\l  %113 = select i1 %109, i32 %111, i32 %112\l  %114 = icmp eq i32 %72, %70\l  %115 = add i32 %113, 1\l  %116 = extractelement \<4 x i32\> %108, i64 2\l  %117 = select i1 %114, i32 %115, i32 %116\l  br i1 %35, label %118, label %135\l|{<s0>T|<s1>F}}"];
	Node0x5a6b4d0:s0 -> Node0x5a6cee0;
	Node0x5a6b4d0:s1 -> Node0x5a6cf30;
	Node0x5a6cee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%118:\l118:                                              \l  %119 = icmp eq i32 %74, %72\l  %120 = add i32 %117, 1\l  %121 = extractelement \<4 x i32\> %108, i64 3\l  %122 = select i1 %119, i32 %120, i32 %121\l  %123 = zext i32 %110 to i64\l  %124 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %123\l  store i32 %58, i32 addrspace(1)* %124, align 4, !tbaa !16\l  %125 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %123\l  store i32 %62, i32 addrspace(1)* %125, align 4, !tbaa !16\l  %126 = zext i32 %113 to i64\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %126\l  store i32 %57, i32 addrspace(1)* %127, align 4, !tbaa !16\l  %128 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %126\l  store i32 %61, i32 addrspace(1)* %128, align 4, !tbaa !16\l  %129 = zext i32 %117 to i64\l  %130 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %129\l  store i32 %56, i32 addrspace(1)* %130, align 4, !tbaa !16\l  %131 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %129\l  store i32 %60, i32 addrspace(1)* %131, align 4, !tbaa !16\l  %132 = zext i32 %122 to i64\l  %133 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %132\l  store i32 %55, i32 addrspace(1)* %133, align 4, !tbaa !16\l  %134 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %132\l  store i32 %59, i32 addrspace(1)* %134, align 4, !tbaa !16\l  br label %135\l}"];
	Node0x5a6cee0 -> Node0x5a6cf30;
	Node0x5a6cf30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%135:\l135:                                              \l  ret void\l}"];
}
