digraph "CFG for '_Z9mysgemmNTPKfiS0_iPfiiff' function" {
	label="CFG for '_Z9mysgemmNTPKfiS0_iPfiiff' function";

	Node0x5f4c2c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %26 = add i32 %24, %25\l  %27 = icmp sgt i32 %6, 0\l  br i1 %27, label %28, label %57\l|{<s0>T|<s1>F}}"];
	Node0x5f4c2c0:s0 -> Node0x5f50740;
	Node0x5f4c2c0:s1 -> Node0x5f507d0;
	Node0x5f50740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = and i32 %6, 7\l  %30 = icmp ult i32 %6, 8\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5f50740:s0 -> Node0x5f50a90;
	Node0x5f50740:s1 -> Node0x5f50ae0;
	Node0x5f50ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %6, -8\l  br label %67\l}"];
	Node0x5f50ae0 -> Node0x5f4e870;
	Node0x5f50a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi float [ undef, %28 ], [ %173, %67 ]\l  %35 = phi float [ 0.000000e+00, %28 ], [ %173, %67 ]\l  %36 = phi i32 [ 0, %28 ], [ %174, %67 ]\l  %37 = icmp eq i32 %29, 0\l  br i1 %37, label %57, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5f50a90:s0 -> Node0x5f507d0;
	Node0x5f50a90:s1 -> Node0x5f52060;
	Node0x5f52060 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi float [ %53, %38 ], [ %35, %33 ]\l  %40 = phi i32 [ %54, %38 ], [ %36, %33 ]\l  %41 = phi i32 [ %55, %38 ], [ 0, %33 ]\l  %42 = mul nsw i32 %40, %1\l  %43 = add nsw i32 %42, %18\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = mul nsw i32 %40, %3\l  %48 = add nsw i32 %47, %26\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %2, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fmul contract float %46, %51\l  %53 = fadd contract float %39, %52\l  %54 = add nuw nsw i32 %40, 1\l  %55 = add i32 %41, 1\l  %56 = icmp eq i32 %55, %29\l  br i1 %56, label %57, label %38, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5f52060:s0 -> Node0x5f507d0;
	Node0x5f52060:s1 -> Node0x5f52060;
	Node0x5f507d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %9 ], [ %34, %33 ], [ %53, %38 ]\l  %59 = mul nsw i32 %26, %5\l  %60 = add nsw i32 %59, %18\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %4, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = fmul contract float %63, %8\l  %65 = fmul contract float %58, %7\l  %66 = fadd contract float %65, %64\l  store float %66, float addrspace(1)* %62, align 4, !tbaa !7\l  ret void\l}"];
	Node0x5f4e870 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%67:\l67:                                               \l  %68 = phi float [ 0.000000e+00, %31 ], [ %173, %67 ]\l  %69 = phi i32 [ 0, %31 ], [ %174, %67 ]\l  %70 = phi i32 [ 0, %31 ], [ %175, %67 ]\l  %71 = mul nsw i32 %69, %1\l  %72 = add nsw i32 %71, %18\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = mul nsw i32 %69, %3\l  %77 = add nsw i32 %76, %26\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %2, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = fmul contract float %75, %80\l  %82 = fadd contract float %68, %81\l  %83 = or i32 %69, 1\l  %84 = mul nsw i32 %83, %1\l  %85 = add nsw i32 %84, %18\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = mul nsw i32 %83, %3\l  %90 = add nsw i32 %89, %26\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %2, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %88, %93\l  %95 = fadd contract float %82, %94\l  %96 = or i32 %69, 2\l  %97 = mul nsw i32 %96, %1\l  %98 = add nsw i32 %97, %18\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = mul nsw i32 %96, %3\l  %103 = add nsw i32 %102, %26\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %2, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = fmul contract float %101, %106\l  %108 = fadd contract float %95, %107\l  %109 = or i32 %69, 3\l  %110 = mul nsw i32 %109, %1\l  %111 = add nsw i32 %110, %18\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %115 = mul nsw i32 %109, %3\l  %116 = add nsw i32 %115, %26\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %2, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = fmul contract float %114, %119\l  %121 = fadd contract float %108, %120\l  %122 = or i32 %69, 4\l  %123 = mul nsw i32 %122, %1\l  %124 = add nsw i32 %123, %18\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = mul nsw i32 %122, %3\l  %129 = add nsw i32 %128, %26\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %2, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fmul contract float %127, %132\l  %134 = fadd contract float %121, %133\l  %135 = or i32 %69, 5\l  %136 = mul nsw i32 %135, %1\l  %137 = add nsw i32 %136, %18\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %0, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %141 = mul nsw i32 %135, %3\l  %142 = add nsw i32 %141, %26\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %2, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = fmul contract float %140, %145\l  %147 = fadd contract float %134, %146\l  %148 = or i32 %69, 6\l  %149 = mul nsw i32 %148, %1\l  %150 = add nsw i32 %149, %18\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = mul nsw i32 %148, %3\l  %155 = add nsw i32 %154, %26\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %2, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %153, %158\l  %160 = fadd contract float %147, %159\l  %161 = or i32 %69, 7\l  %162 = mul nsw i32 %161, %1\l  %163 = add nsw i32 %162, %18\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %0, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %167 = mul nsw i32 %161, %3\l  %168 = add nsw i32 %167, %26\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %2, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %172 = fmul contract float %166, %171\l  %173 = fadd contract float %160, %172\l  %174 = add nuw nsw i32 %69, 8\l  %175 = add i32 %70, 8\l  %176 = icmp eq i32 %175, %32\l  br i1 %176, label %33, label %67, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f4e870:s0 -> Node0x5f50a90;
	Node0x5f4e870:s1 -> Node0x5f4e870;
}
