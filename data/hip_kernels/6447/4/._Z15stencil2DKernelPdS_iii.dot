digraph "CFG for '_Z15stencil2DKernelPdS_iii' function" {
	label="CFG for '_Z15stencil2DKernelPdS_iii' function";

	Node0x4ae5c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %7, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = mul i32 %14, %4\l  %16 = add i32 %15, %4\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = mul i32 %24, %4\l  %26 = add i32 %25, %4\l  %27 = add i32 %15, 1\l  %28 = icmp sgt i32 %27, %16\l  br i1 %28, label %41, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4ae5c60:s0 -> Node0x4ae9850;
	Node0x4ae5c60:s1 -> Node0x4ae98e0;
	Node0x4ae98e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%29:\l29:                                               \l  %30 = add i32 %25, 1\l  %31 = icmp sgt i32 %30, %26\l  %32 = add nsw i32 %2, 2\l  br label %36\l}"];
	Node0x4ae98e0 -> Node0x4ae7bb0;
	Node0x4ae7c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%33:\l33:                                               \l  %34 = add i32 %37, 1\l  %35 = icmp sgt i32 %34, %16\l  br i1 %35, label %41, label %36, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x4ae7c70:s0 -> Node0x4ae9850;
	Node0x4ae7c70:s1 -> Node0x4ae7bb0;
	Node0x4ae7bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%36:\l36:                                               \l  %37 = phi i32 [ %27, %29 ], [ %34, %33 ]\l  %38 = phi i32 [ %15, %29 ], [ %37, %33 ]\l  br i1 %31, label %33, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4ae7bb0:s0 -> Node0x4ae7c70;
	Node0x4ae7bb0:s1 -> Node0x4aea320;
	Node0x4aea320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%39:\l39:                                               \l  %40 = icmp sgt i32 %37, %2\l  br label %42\l}"];
	Node0x4aea320 -> Node0x4aea4b0;
	Node0x4ae9850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%41:\l41:                                               \l  ret void\l}"];
	Node0x4aea4b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %30, %39 ], [ %79, %78 ]\l  %44 = phi i32 [ %25, %39 ], [ %43, %78 ]\l  %45 = icmp sgt i32 %43, %3\l  %46 = select i1 %40, i1 true, i1 %45\l  br i1 %46, label %78, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4aea4b0:s0 -> Node0x4aea5c0;
	Node0x4aea4b0:s1 -> Node0x4aea8b0;
	Node0x4aea8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%47:\l47:                                               \l  %48 = mul nsw i32 %43, %32\l  %49 = add i32 %48, %38\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %0, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !9\l  %53 = add i32 %49, 2\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %0, i64 %54\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !9\l  %57 = fadd contract double %52, %56\l  %58 = mul nsw i32 %44, %32\l  %59 = add nsw i32 %58, %37\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %0, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !9\l  %63 = fadd contract double %57, %62\l  %64 = add i32 %44, 2\l  %65 = mul nsw i32 %64, %32\l  %66 = add nsw i32 %65, %37\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %0, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !9\l  %70 = fadd contract double %63, %69\l  %71 = add nsw i32 %48, %37\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds double, double addrspace(1)* %0, i64 %72\l  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !9\l  %75 = fadd contract double %70, %74\l  %76 = fmul contract double %75, 2.000000e-01\l  %77 = getelementptr inbounds double, double addrspace(1)* %1, i64 %72\l  store double %76, double addrspace(1)* %77, align 8, !tbaa !9\l  br label %78\l}"];
	Node0x4aea8b0 -> Node0x4aea5c0;
	Node0x4aea5c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = add i32 %43, 1\l  %80 = icmp sgt i32 %79, %26\l  br i1 %80, label %33, label %42, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4aea5c0:s0 -> Node0x4ae7c70;
	Node0x4aea5c0:s1 -> Node0x4aea4b0;
}
