digraph "CFG for '_Z9sumKernelPfS_iii' function" {
	label="CFG for '_Z9sumKernelPfS_iii' function";

	Node0x4aaa170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = mul i32 %14, %4\l  %16 = add nsw i32 %15, %4\l  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 %3)\l  %18 = icmp slt i32 %15, %17\l  br i1 %18, label %19, label %28\l|{<s0>T|<s1>F}}"];
	Node0x4aaa170:s0 -> Node0x4aac3b0;
	Node0x4aaa170:s1 -> Node0x4aac440;
	Node0x4aac3b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%19:\l19:                                               \l  %20 = icmp sgt i32 %2, 0\l  %21 = and i32 %2, 7\l  %22 = icmp ult i32 %2, 8\l  %23 = and i32 %2, -8\l  %24 = icmp eq i32 %21, 0\l  br label %25\l}"];
	Node0x4aac3b0 -> Node0x4aac910;
	Node0x4aac910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%25:\l25:                                               \l  %26 = phi i32 [ %15, %19 ], [ %50, %46 ]\l  br i1 %20, label %27, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4aac910:s0 -> Node0x4aacb40;
	Node0x4aac910:s1 -> Node0x4aaca00;
	Node0x4aacb40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%27:\l27:                                               \l  br i1 %22, label %29, label %52\l|{<s0>T|<s1>F}}"];
	Node0x4aacb40:s0 -> Node0x4aacc80;
	Node0x4aacb40:s1 -> Node0x4aaccd0;
	Node0x4aac440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%28:\l28:                                               \l  ret void\l}"];
	Node0x4aacc80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %27 ], [ %110, %52 ]\l  %31 = phi i32 [ 0, %27 ], [ %111, %52 ]\l  %32 = phi float [ 0.000000e+00, %27 ], [ %110, %52 ]\l  br i1 %24, label %46, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4aacc80:s0 -> Node0x4aaca00;
	Node0x4aacc80:s1 -> Node0x4aac0c0;
	Node0x4aac0c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  %34 = phi i32 [ %43, %33 ], [ %31, %29 ]\l  %35 = phi float [ %42, %33 ], [ %32, %29 ]\l  %36 = phi i32 [ %44, %33 ], [ 0, %29 ]\l  %37 = mul nsw i32 %34, %3\l  %38 = add nsw i32 %37, %26\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7\l  %42 = fadd contract float %35, %41\l  %43 = add nuw nsw i32 %34, 1\l  %44 = add i32 %36, 1\l  %45 = icmp eq i32 %44, %21\l  br i1 %45, label %46, label %33, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4aac0c0:s0 -> Node0x4aaca00;
	Node0x4aac0c0:s1 -> Node0x4aac0c0;
	Node0x4aaca00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %25 ], [ %30, %29 ], [ %42, %33 ]\l  %48 = sext i32 %26 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  store float %47, float addrspace(1)* %49, align 4, !tbaa !7\l  %50 = add nsw i32 %26, 1\l  %51 = icmp slt i32 %50, %17\l  br i1 %51, label %25, label %28, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4aaca00:s0 -> Node0x4aac910;
	Node0x4aaca00:s1 -> Node0x4aac440;
	Node0x4aaccd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%52:\l52:                                               \l  %53 = phi i32 [ %111, %52 ], [ 0, %27 ]\l  %54 = phi float [ %110, %52 ], [ 0.000000e+00, %27 ]\l  %55 = phi i32 [ %112, %52 ], [ 0, %27 ]\l  %56 = mul nsw i32 %53, %3\l  %57 = add nsw i32 %56, %26\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7\l  %61 = fadd contract float %54, %60\l  %62 = or i32 %53, 1\l  %63 = mul nsw i32 %62, %3\l  %64 = add nsw i32 %63, %26\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7\l  %68 = fadd contract float %61, %67\l  %69 = or i32 %53, 2\l  %70 = mul nsw i32 %69, %3\l  %71 = add nsw i32 %70, %26\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = fadd contract float %68, %74\l  %76 = or i32 %53, 3\l  %77 = mul nsw i32 %76, %3\l  %78 = add nsw i32 %77, %26\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7\l  %82 = fadd contract float %75, %81\l  %83 = or i32 %53, 4\l  %84 = mul nsw i32 %83, %3\l  %85 = add nsw i32 %84, %26\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = fadd contract float %82, %88\l  %90 = or i32 %53, 5\l  %91 = mul nsw i32 %90, %3\l  %92 = add nsw i32 %91, %26\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = fadd contract float %89, %95\l  %97 = or i32 %53, 6\l  %98 = mul nsw i32 %97, %3\l  %99 = add nsw i32 %98, %26\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = fadd contract float %96, %102\l  %104 = or i32 %53, 7\l  %105 = mul nsw i32 %104, %3\l  %106 = add nsw i32 %105, %26\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7\l  %110 = fadd contract float %103, %109\l  %111 = add nuw nsw i32 %53, 8\l  %112 = add i32 %55, 8\l  %113 = icmp eq i32 %112, %23\l  br i1 %113, label %29, label %52, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4aaccd0:s0 -> Node0x4aacc80;
	Node0x4aaccd0:s1 -> Node0x4aaccd0;
}
