digraph "CFG for '_Z13complexAbsSumP15HIP_vector_typeIdLj2EES1_Pd' function" {
	label="CFG for '_Z13complexAbsSumP15HIP_vector_typeIdLj2EES1_Pd' function";

	Node0x6385d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 4, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 16\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 8, !tbaa !15\l  %22 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !13, !invariant.load\l... !14\l  %25 = zext i16 %24 to i32\l  %26 = udiv i32 %21, %25\l  %27 = mul i32 %26, %25\l  %28 = icmp ugt i32 %21, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %32 = mul i32 %30, %31\l  %33 = add i32 %32, %5\l  %34 = mul i32 %33, %18\l  %35 = add i32 %34, %4\l  %36 = getelementptr i8, i8 addrspace(4)* %6, i64 8\l  %37 = bitcast i8 addrspace(4)* %36 to i16 addrspace(4)*\l  %38 = load i16, i16 addrspace(4)* %37, align 4, !range !13, !invariant.load\l... !14\l  %39 = zext i16 %38 to i32\l  %40 = mul i32 %35, %39\l  %41 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %43 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %44 = add i32 %40, %42\l  %45 = mul i32 %44, %25\l  %46 = add i32 %45, %41\l  %47 = mul i32 %46, %13\l  %48 = add i32 %47, %43\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %49, i32 0, i32 0, i32 0, i64 0\l  %51 = load double, double addrspace(1)* %50, align 16, !tbaa !17,\l... !amdgpu.noclobber !14\l  %52 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %49, i32 0, i32 0, i32 0, i64 0\l  %53 = load double, double addrspace(1)* %52, align 16, !tbaa !17,\l... !amdgpu.noclobber !14\l  %54 = fadd contract double %51, %53\l  %55 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %49, i32 0, i32 0, i32 0, i64 1\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %57 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %49, i32 0, i32 0, i32 0, i64 1\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %59 = fadd contract double %56, %58\l  %60 = fmul contract double %54, %54\l  %61 = fmul contract double %59, %59\l  %62 = fadd contract double %60, %61\l  %63 = fcmp olt double %62, 0x1000000000000000\l  %64 = select i1 %63, double 0x4FF0000000000000, double 1.000000e+00\l  %65 = fmul double %62, %64\l  %66 = tail call double @llvm.amdgcn.rsq.f64(double %65)\l  %67 = fmul double %65, %66\l  %68 = fmul double %66, 5.000000e-01\l  %69 = fneg double %68\l  %70 = tail call double @llvm.fma.f64(double %69, double %67, double\l... 5.000000e-01)\l  %71 = tail call double @llvm.fma.f64(double %68, double %70, double %68)\l  %72 = tail call double @llvm.fma.f64(double %67, double %70, double %67)\l  %73 = fneg double %72\l  %74 = tail call double @llvm.fma.f64(double %73, double %72, double %65)\l  %75 = tail call double @llvm.fma.f64(double %74, double %71, double %72)\l  %76 = fneg double %75\l  %77 = tail call double @llvm.fma.f64(double %76, double %75, double %65)\l  %78 = tail call double @llvm.fma.f64(double %77, double %71, double %75)\l  %79 = select i1 %63, double 0x37F0000000000000, double 1.000000e+00\l  %80 = fmul double %79, %78\l  %81 = fcmp oeq double %65, 0.000000e+00\l  %82 = fcmp oeq double %65, 0x7FF0000000000000\l  %83 = or i1 %81, %82\l  %84 = select i1 %83, double %65, double %80\l  %85 = getelementptr inbounds double, double addrspace(1)* %2, i64 %49\l  store double %84, double addrspace(1)* %85, align 8, !tbaa !20\l  ret void\l}"];
}
