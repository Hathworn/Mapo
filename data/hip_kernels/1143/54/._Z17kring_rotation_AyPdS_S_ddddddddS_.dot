digraph "CFG for '_Z17kring_rotation_AyPdS_S_ddddddddS_' function" {
	label="CFG for '_Z17kring_rotation_AyPdS_S_ddddddddS_' function";

	Node0x54b4a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %15, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !4\l  %19 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !13, !invariant.load\l... !14\l  %22 = zext i16 %21 to i32\l  %23 = udiv i32 %18, %22\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %15, i64 16\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 8, !tbaa !15\l  %27 = getelementptr i8, i8 addrspace(4)* %15, i64 6\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 2, !range !13, !invariant.load\l... !14\l  %30 = zext i16 %29 to i32\l  %31 = udiv i32 %26, %30\l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %33 = mul i32 %13, %22\l  %34 = mul i32 %14, %30\l  %35 = getelementptr i8, i8 addrspace(4)* %15, i64 8\l  %36 = bitcast i8 addrspace(4)* %35 to i16 addrspace(4)*\l  %37 = load i16, i16 addrspace(4)* %36, align 4, !range !13, !invariant.load\l... !14\l  %38 = zext i16 %37 to i32\l  %39 = mul i32 %32, %38\l  %40 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %41 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %43 = add i32 %33, %42\l  %44 = add i32 %34, %40\l  %45 = add i32 %39, %41\l  %46 = sext i32 %44 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %1, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %49 = sext i32 %43 to i64\l  %50 = getelementptr inbounds double, double addrspace(1)* %0, i64 %49\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %52 = tail call double @llvm.fabs.f64(double %48)\l  %53 = tail call double @llvm.fabs.f64(double %51)\l  %54 = tail call double @llvm.maxnum.f64(double %53, double %52)\l  %55 = tail call double @llvm.minnum.f64(double %53, double %52)\l  %56 = fdiv double %55, %54\l  %57 = fmul double %56, %56\l  %58 = tail call double @llvm.fma.f64(double %57, double 0x3EEBA404B5E68A13,\l... double 0xBF23E260BD3237F4)\l  %59 = tail call double @llvm.fma.f64(double %57, double %58, double\l... 0x3F4B2BB069EFB384)\l  %60 = tail call double @llvm.fma.f64(double %57, double %59, double\l... 0xBF67952DAF56DE9B)\l  %61 = tail call double @llvm.fma.f64(double %57, double %60, double\l... 0x3F7D6D43A595C56F)\l  %62 = tail call double @llvm.fma.f64(double %57, double %61, double\l... 0xBF8C6EA4A57D9582)\l  %63 = tail call double @llvm.fma.f64(double %57, double %62, double\l... 0x3F967E295F08B19F)\l  %64 = tail call double @llvm.fma.f64(double %57, double %63, double\l... 0xBF9E9AE6FC27006A)\l  %65 = tail call double @llvm.fma.f64(double %57, double %64, double\l... 0x3FA2C15B5711927A)\l  %66 = tail call double @llvm.fma.f64(double %57, double %65, double\l... 0xBFA59976E82D3FF0)\l  %67 = tail call double @llvm.fma.f64(double %57, double %66, double\l... 0x3FA82D5D6EF28734)\l  %68 = tail call double @llvm.fma.f64(double %57, double %67, double\l... 0xBFAAE5CE6A214619)\l  %69 = tail call double @llvm.fma.f64(double %57, double %68, double\l... 0x3FAE1BB48427B883)\l  %70 = tail call double @llvm.fma.f64(double %57, double %69, double\l... 0xBFB110E48B207F05)\l  %71 = tail call double @llvm.fma.f64(double %57, double %70, double\l... 0x3FB3B13657B87036)\l  %72 = tail call double @llvm.fma.f64(double %57, double %71, double\l... 0xBFB745D119378E4F)\l  %73 = tail call double @llvm.fma.f64(double %57, double %72, double\l... 0x3FBC71C717E1913C)\l  %74 = tail call double @llvm.fma.f64(double %57, double %73, double\l... 0xBFC2492492376B7D)\l  %75 = tail call double @llvm.fma.f64(double %57, double %74, double\l... 0x3FC99999999952CC)\l  %76 = tail call double @llvm.fma.f64(double %57, double %75, double\l... 0xBFD5555555555523)\l  %77 = fmul double %57, %76\l  %78 = tail call double @llvm.fma.f64(double %56, double %77, double %56)\l  %79 = bitcast double %51 to \<2 x i32\>\l  %80 = extractelement \<2 x i32\> %79, i64 1\l  %81 = icmp slt i32 %80, 0\l  %82 = fsub double 0x3FF921FB54442D18, %78\l  %83 = fcmp olt double %53, %52\l  %84 = select i1 %83, double %82, double %78\l  %85 = fcmp uno double %51, %48\l  %86 = fcmp oeq double %52, 0x7FF0000000000000\l  %87 = fcmp oeq double %53, 0x7FF0000000000000\l  %88 = and i1 %86, %87\l  %89 = select i1 %81, double 0x4002D97C7F3321D2, double 0x3FE921FB54442D18\l  %90 = tail call double @llvm.copysign.f64(double %89, double %48)\l  %91 = fcmp oeq double %48, 0.000000e+00\l  %92 = select i1 %81, double 0x400921FB54442D18, double 0.000000e+00\l  %93 = fsub double 0x400921FB54442D18, %84\l  %94 = select i1 %81, double %93, double %84\l  %95 = select i1 %91, double %92, double %94\l  %96 = select i1 %88, double %90, double %95\l  %97 = select i1 %85, double 0x7FF8000000000000, double %96\l  %98 = sext i32 %45 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %2, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %101 = tail call double @llvm.fabs.f64(double %97)\l  %102 = fcmp olt double %101, 0x41D0000000000000\l  br i1 %102, label %103, label %122\l|{<s0>T|<s1>F}}"];
	Node0x54b4a00:s0 -> Node0x54bf5f0;
	Node0x54b4a00:s1 -> Node0x54bf680;
	Node0x54bf5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%103:\l103:                                              \l  %104 = fmul double %101, 0x3FE45F306DC9C883\l  %105 = tail call double @llvm.rint.f64(double %104)\l  %106 = tail call double @llvm.fma.f64(double %105, double\l... 0xBFF921FB54442D18, double %101)\l  %107 = tail call double @llvm.fma.f64(double %105, double\l... 0xBC91A62633145C00, double %106)\l  %108 = fmul double %105, 0x3C91A62633145C00\l  %109 = fneg double %108\l  %110 = tail call double @llvm.fma.f64(double %105, double\l... 0x3C91A62633145C00, double %109)\l  %111 = fsub double %106, %108\l  %112 = fsub double %106, %111\l  %113 = fsub double %112, %108\l  %114 = fsub double %111, %107\l  %115 = fadd double %114, %113\l  %116 = fsub double %115, %110\l  %117 = tail call double @llvm.fma.f64(double %105, double\l... 0xB97B839A252049C0, double %116)\l  %118 = fadd double %107, %117\l  %119 = fsub double %118, %107\l  %120 = fsub double %117, %119\l  %121 = fptosi double %105 to i32\l  br label %198\l}"];
	Node0x54bf5f0 -> Node0x54c0680;
	Node0x54bf680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%122:\l122:                                              \l  %123 = tail call double @llvm.amdgcn.trig.preop.f64(double %101, i32 0)\l  %124 = tail call double @llvm.amdgcn.trig.preop.f64(double %101, i32 1)\l  %125 = tail call double @llvm.amdgcn.trig.preop.f64(double %101, i32 2)\l  %126 = fcmp oge double %101, 0x7B00000000000000\l  %127 = tail call double @llvm.amdgcn.ldexp.f64(double %101, i32 -128)\l  %128 = select i1 %126, double %127, double %101\l  %129 = fmul double %125, %128\l  %130 = fneg double %129\l  %131 = tail call double @llvm.fma.f64(double %125, double %128, double %130)\l  %132 = fmul double %124, %128\l  %133 = fneg double %132\l  %134 = tail call double @llvm.fma.f64(double %124, double %128, double %133)\l  %135 = fmul double %123, %128\l  %136 = fneg double %135\l  %137 = tail call double @llvm.fma.f64(double %123, double %128, double %136)\l  %138 = fadd double %132, %137\l  %139 = fsub double %138, %132\l  %140 = fsub double %138, %139\l  %141 = fsub double %137, %139\l  %142 = fsub double %132, %140\l  %143 = fadd double %141, %142\l  %144 = fadd double %129, %134\l  %145 = fsub double %144, %129\l  %146 = fsub double %144, %145\l  %147 = fsub double %134, %145\l  %148 = fsub double %129, %146\l  %149 = fadd double %147, %148\l  %150 = fadd double %144, %143\l  %151 = fsub double %150, %144\l  %152 = fsub double %150, %151\l  %153 = fsub double %143, %151\l  %154 = fsub double %144, %152\l  %155 = fadd double %153, %154\l  %156 = fadd double %149, %155\l  %157 = fadd double %131, %156\l  %158 = fadd double %135, %138\l  %159 = fsub double %158, %135\l  %160 = fsub double %138, %159\l  %161 = fadd double %160, %150\l  %162 = fsub double %161, %160\l  %163 = fsub double %150, %162\l  %164 = fadd double %163, %157\l  %165 = tail call double @llvm.amdgcn.ldexp.f64(double %158, i32 -2)\l  %166 = tail call double @llvm.amdgcn.fract.f64(double %165)\l  %167 = tail call i1 @llvm.amdgcn.class.f64(double %165, i32 516)\l  %168 = select i1 %167, double 0.000000e+00, double %166\l  %169 = tail call double @llvm.amdgcn.ldexp.f64(double %168, i32 2)\l  %170 = fadd double %169, %161\l  %171 = fcmp olt double %170, 0.000000e+00\l  %172 = select i1 %171, double 4.000000e+00, double 0.000000e+00\l  %173 = fadd double %169, %172\l  %174 = fadd double %161, %173\l  %175 = fptosi double %174 to i32\l  %176 = sitofp i32 %175 to double\l  %177 = fsub double %173, %176\l  %178 = fadd double %161, %177\l  %179 = fsub double %178, %177\l  %180 = fsub double %161, %179\l  %181 = fadd double %164, %180\l  %182 = fcmp oge double %178, 5.000000e-01\l  %183 = zext i1 %182 to i32\l  %184 = add nsw i32 %183, %175\l  %185 = select i1 %182, double 1.000000e+00, double 0.000000e+00\l  %186 = fsub double %178, %185\l  %187 = fadd double %186, %181\l  %188 = fsub double %187, %186\l  %189 = fsub double %181, %188\l  %190 = fmul double %187, 0x3FF921FB54442D18\l  %191 = fneg double %190\l  %192 = tail call double @llvm.fma.f64(double %187, double\l... 0x3FF921FB54442D18, double %191)\l  %193 = tail call double @llvm.fma.f64(double %187, double\l... 0x3C91A62633145C07, double %192)\l  %194 = tail call double @llvm.fma.f64(double %189, double\l... 0x3FF921FB54442D18, double %193)\l  %195 = fadd double %190, %194\l  %196 = fsub double %195, %190\l  %197 = fsub double %194, %196\l  br label %198\l}"];
	Node0x54bf680 -> Node0x54c0680;
	Node0x54c0680 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%198:\l198:                                              \l  %199 = phi double [ %120, %103 ], [ %197, %122 ]\l  %200 = phi double [ %118, %103 ], [ %195, %122 ]\l  %201 = phi i32 [ %121, %103 ], [ %184, %122 ]\l  %202 = tail call double @llvm.copysign.f64(double %97, double %48)\l  %203 = fadd contract double %100, %5\l  %204 = mul i32 %31, %30\l  %205 = icmp ugt i32 %26, %204\l  %206 = zext i1 %205 to i32\l  %207 = add i32 %31, %206\l  %208 = mul i32 %207, %32\l  %209 = add i32 %208, %14\l  %210 = mul i32 %23, %22\l  %211 = icmp ugt i32 %18, %210\l  %212 = zext i1 %211 to i32\l  %213 = add i32 %23, %212\l  %214 = mul i32 %209, %213\l  %215 = add i32 %214, %13\l  %216 = mul i32 %215, %38\l  %217 = add i32 %216, %41\l  %218 = mul i32 %217, %30\l  %219 = add i32 %218, %40\l  %220 = mul i32 %219, %22\l  %221 = add i32 %220, %42\l  %222 = fmul double %200, %200\l  %223 = fmul double %222, 5.000000e-01\l  %224 = fsub double 1.000000e+00, %223\l  %225 = fsub double 1.000000e+00, %224\l  %226 = fsub double %225, %223\l  %227 = fmul double %222, %222\l  %228 = tail call double @llvm.fma.f64(double %222, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %229 = tail call double @llvm.fma.f64(double %222, double %228, double\l... 0xBE927E4FA17F65F6)\l  %230 = tail call double @llvm.fma.f64(double %222, double %229, double\l... 0x3EFA01A019F4EC90)\l  %231 = tail call double @llvm.fma.f64(double %222, double %230, double\l... 0xBF56C16C16C16967)\l  %232 = tail call double @llvm.fma.f64(double %222, double %231, double\l... 0x3FA5555555555555)\l  %233 = fneg double %199\l  %234 = tail call double @llvm.fma.f64(double %200, double %233, double %226)\l  %235 = tail call double @llvm.fma.f64(double %227, double %232, double %234)\l  %236 = fadd double %224, %235\l  %237 = tail call double @llvm.fma.f64(double %222, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %238 = tail call double @llvm.fma.f64(double %222, double %237, double\l... 0x3EC71DE3796CDE01)\l  %239 = tail call double @llvm.fma.f64(double %222, double %238, double\l... 0xBF2A01A019E83E5C)\l  %240 = tail call double @llvm.fma.f64(double %222, double %239, double\l... 0x3F81111111110BB3)\l  %241 = fneg double %222\l  %242 = fmul double %200, %241\l  %243 = fmul double %199, 5.000000e-01\l  %244 = tail call double @llvm.fma.f64(double %242, double %240, double %243)\l  %245 = tail call double @llvm.fma.f64(double %222, double %244, double %233)\l  %246 = tail call double @llvm.fma.f64(double %242, double\l... 0xBFC5555555555555, double %245)\l  %247 = fsub double %200, %246\l  %248 = and i32 %201, 1\l  %249 = icmp eq i32 %248, 0\l  %250 = select i1 %249, double %247, double %236\l  %251 = bitcast double %250 to \<2 x i32\>\l  %252 = shl i32 %201, 30\l  %253 = bitcast double %202 to \<2 x i32\>\l  %254 = extractelement \<2 x i32\> %253, i64 1\l  %255 = xor i32 %252, %254\l  %256 = and i32 %255, -2147483648\l  %257 = extractelement \<2 x i32\> %251, i64 1\l  %258 = xor i32 %257, %256\l  %259 = insertelement \<2 x i32\> %251, i32 %258, i64 1\l  %260 = tail call i1 @llvm.amdgcn.class.f64(double %101, i32 504)\l  %261 = select i1 %260, \<2 x i32\> %259, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %262 = bitcast \<2 x i32\> %261 to double\l  %263 = fmul contract double %203, %262\l  %264 = fmul contract double %263, %9\l  %265 = fmul contract double %264, %6\l  %266 = sext i32 %221 to i64\l  %267 = getelementptr inbounds double, double addrspace(1)* %11, i64 %266\l  store double %265, double addrspace(1)* %267, align 8, !tbaa !17\l  ret void\l}"];
}
