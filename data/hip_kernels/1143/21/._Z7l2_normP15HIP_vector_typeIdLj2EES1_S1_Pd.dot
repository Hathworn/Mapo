digraph "CFG for '_Z7l2_normP15HIP_vector_typeIdLj2EES1_S1_Pd' function" {
	label="CFG for '_Z7l2_normP15HIP_vector_typeIdLj2EES1_S1_Pd' function";

	Node0x6372050 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 16\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 8, !tbaa !15\l  %23 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !13, !invariant.load\l... !14\l  %26 = zext i16 %25 to i32\l  %27 = udiv i32 %22, %26\l  %28 = mul i32 %27, %26\l  %29 = icmp ugt i32 %22, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %33 = mul i32 %31, %32\l  %34 = add i32 %33, %6\l  %35 = mul i32 %34, %19\l  %36 = add i32 %35, %5\l  %37 = getelementptr i8, i8 addrspace(4)* %7, i64 8\l  %38 = bitcast i8 addrspace(4)* %37 to i16 addrspace(4)*\l  %39 = load i16, i16 addrspace(4)* %38, align 4, !range !13, !invariant.load\l... !14\l  %40 = zext i16 %39 to i32\l  %41 = mul i32 %36, %40\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %43 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %44 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %45 = add i32 %41, %43\l  %46 = mul i32 %45, %26\l  %47 = add i32 %46, %42\l  %48 = mul i32 %47, %14\l  %49 = add i32 %48, %44\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %50, i32 0, i32 0, i32 0, i64 0\l  %52 = load double, double addrspace(1)* %51, align 16, !tbaa !17,\l... !amdgpu.noclobber !14\l  %53 = fmul contract double %52, %52\l  %54 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %50, i32 0, i32 0, i32 0, i64 1\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %56 = fmul contract double %55, %55\l  %57 = fadd contract double %53, %56\l  %58 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %50, i32 0, i32 0, i32 0, i64 0\l  %59 = load double, double addrspace(1)* %58, align 16, !tbaa !17,\l... !amdgpu.noclobber !14\l  %60 = fmul contract double %59, %59\l  %61 = fadd contract double %57, %60\l  %62 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %50, i32 0, i32 0, i32 0, i64 1\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %64 = fmul contract double %63, %63\l  %65 = fadd contract double %61, %64\l  %66 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %50, i32 0, i32 0, i32 0, i64 0\l  %67 = load double, double addrspace(1)* %66, align 16, !tbaa !17,\l... !amdgpu.noclobber !14\l  %68 = fmul contract double %67, %67\l  %69 = fadd contract double %65, %68\l  %70 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %50, i32 0, i32 0, i32 0, i64 1\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %72 = fmul contract double %71, %71\l  %73 = fadd contract double %69, %72\l  %74 = fcmp olt double %73, 0x1000000000000000\l  %75 = select i1 %74, double 0x4FF0000000000000, double 1.000000e+00\l  %76 = fmul double %73, %75\l  %77 = tail call double @llvm.amdgcn.rsq.f64(double %76)\l  %78 = fmul double %76, %77\l  %79 = fmul double %77, 5.000000e-01\l  %80 = fneg double %79\l  %81 = tail call double @llvm.fma.f64(double %80, double %78, double\l... 5.000000e-01)\l  %82 = tail call double @llvm.fma.f64(double %79, double %81, double %79)\l  %83 = tail call double @llvm.fma.f64(double %78, double %81, double %78)\l  %84 = fneg double %83\l  %85 = tail call double @llvm.fma.f64(double %84, double %83, double %76)\l  %86 = tail call double @llvm.fma.f64(double %85, double %82, double %83)\l  %87 = fneg double %86\l  %88 = tail call double @llvm.fma.f64(double %87, double %86, double %76)\l  %89 = tail call double @llvm.fma.f64(double %88, double %82, double %86)\l  %90 = select i1 %74, double 0x37F0000000000000, double 1.000000e+00\l  %91 = fmul double %90, %89\l  %92 = fcmp oeq double %76, 0.000000e+00\l  %93 = fcmp oeq double %76, 0x7FF0000000000000\l  %94 = or i1 %92, %93\l  %95 = select i1 %94, double %76, double %91\l  %96 = getelementptr inbounds double, double addrspace(1)* %3, i64 %50\l  store double %95, double addrspace(1)* %96, align 8, !tbaa !20\l  ret void\l}"];
}
