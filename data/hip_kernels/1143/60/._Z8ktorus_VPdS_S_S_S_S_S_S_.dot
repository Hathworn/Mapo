digraph "CFG for '_Z8ktorus_VPdS_S_S_S_S_S_S_' function" {
	label="CFG for '_Z8ktorus_VPdS_S_S_S_S_S_S_' function";

	Node0x496cf70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !4\l  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !13, !invariant.load\l... !14\l  %18 = zext i16 %17 to i32\l  %19 = udiv i32 %14, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %14, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 16\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 8, !tbaa !15\l  %27 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 2, !range !13, !invariant.load\l... !14\l  %30 = zext i16 %29 to i32\l  %31 = udiv i32 %26, %30\l  %32 = mul i32 %31, %30\l  %33 = icmp ugt i32 %26, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %37 = mul i32 %35, %36\l  %38 = add i32 %37, %10\l  %39 = mul i32 %38, %23\l  %40 = add i32 %39, %9\l  %41 = mul i32 %9, %18\l  %42 = mul i32 %10, %30\l  %43 = getelementptr i8, i8 addrspace(4)* %11, i64 8\l  %44 = bitcast i8 addrspace(4)* %43 to i16 addrspace(4)*\l  %45 = load i16, i16 addrspace(4)* %44, align 4, !range !13, !invariant.load\l... !14\l  %46 = zext i16 %45 to i32\l  %47 = mul i32 %36, %46\l  %48 = mul i32 %40, %46\l  %49 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %50 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %51 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %52 = add i32 %48, %50\l  %53 = mul i32 %52, %30\l  %54 = add i32 %53, %49\l  %55 = mul i32 %54, %18\l  %56 = add i32 %55, %51\l  %57 = add i32 %41, %51\l  %58 = add i32 %42, %49\l  %59 = add i32 %47, %50\l  %60 = sext i32 %57 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %0, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %63 = getelementptr inbounds double, double addrspace(1)* %3, i64 6\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %65 = fsub contract double %62, %64\l  %66 = fmul contract double %65, %65\l  %67 = sext i32 %58 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %1, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %70 = getelementptr inbounds double, double addrspace(1)* %3, i64 7\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %72 = fsub contract double %69, %71\l  %73 = fmul contract double %72, %72\l  %74 = fadd contract double %66, %73\l  %75 = fcmp olt double %74, 0x1000000000000000\l  %76 = select i1 %75, double 0x4FF0000000000000, double 1.000000e+00\l  %77 = fmul double %74, %76\l  %78 = tail call double @llvm.amdgcn.rsq.f64(double %77)\l  %79 = fmul double %77, %78\l  %80 = fmul double %78, 5.000000e-01\l  %81 = fneg double %80\l  %82 = tail call double @llvm.fma.f64(double %81, double %79, double\l... 5.000000e-01)\l  %83 = tail call double @llvm.fma.f64(double %80, double %82, double %80)\l  %84 = tail call double @llvm.fma.f64(double %79, double %82, double %79)\l  %85 = fneg double %84\l  %86 = tail call double @llvm.fma.f64(double %85, double %84, double %77)\l  %87 = tail call double @llvm.fma.f64(double %86, double %83, double %84)\l  %88 = fneg double %87\l  %89 = tail call double @llvm.fma.f64(double %88, double %87, double %77)\l  %90 = tail call double @llvm.fma.f64(double %89, double %83, double %87)\l  %91 = select i1 %75, double 0x37F0000000000000, double 1.000000e+00\l  %92 = fmul double %91, %90\l  %93 = fcmp oeq double %77, 0.000000e+00\l  %94 = fcmp oeq double %77, 0x7FF0000000000000\l  %95 = or i1 %93, %94\l  %96 = select i1 %95, double %77, double %92\l  %97 = load double, double addrspace(1)* %3, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %98 = fmul contract double %97, 5.000000e-01\l  %99 = fsub contract double %96, %98\l  %100 = getelementptr inbounds double, double addrspace(1)* %3, i64 3\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %102 = fmul contract double %101, %101\l  %103 = getelementptr inbounds double, double addrspace(1)* %3, i64 4\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %105 = fmul contract double %104, %104\l  %106 = fadd contract double %102, %105\l  %107 = getelementptr inbounds double, double addrspace(1)* %3, i64 5\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %109 = fmul contract double %108, 2.000000e+00\l  %110 = fmul contract double %108, %109\l  %111 = sext i32 %59 to i64\l  %112 = getelementptr inbounds double, double addrspace(1)* %2, i64 %111\l  %113 = load double, double addrspace(1)* %112, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %114 = getelementptr inbounds double, double addrspace(1)* %3, i64 8\l  %115 = load double, double addrspace(1)* %114, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %116 = fsub contract double %113, %115\l  %117 = fmul contract double %110, %116\l  %118 = fmul contract double %116, %117\l  %119 = fmul contract double %99, %99\l  %120 = getelementptr inbounds double, double addrspace(1)* %3, i64 12\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %122 = fmul contract double %121, %99\l  %123 = fmul contract double %113, %122\l  %124 = fadd contract double %119, %123\l  %125 = fmul contract double %106, %124\l  %126 = fadd contract double %118, %125\l  %127 = getelementptr inbounds double, double addrspace(1)* %3, i64 9\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %129 = fmul contract double %128, 5.000000e-01\l  %130 = sext i32 %56 to i64\l  %131 = getelementptr inbounds double, double addrspace(1)* %4, i64 %130\l  %132 = load double, double addrspace(1)* %131, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %133 = fmul contract double %132, %132\l  %134 = fadd contract double %133, %126\l  %135 = getelementptr inbounds double, double addrspace(1)* %5, i64 %130\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %137 = fmul contract double %136, %136\l  %138 = fadd contract double %137, %134\l  %139 = getelementptr inbounds double, double addrspace(1)* %6, i64 %130\l  %140 = load double, double addrspace(1)* %139, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %141 = fmul contract double %140, %140\l  %142 = fadd contract double %141, %138\l  %143 = fmul contract double %129, %142\l  %144 = getelementptr inbounds double, double addrspace(1)* %7, i64 %130\l  store double %143, double addrspace(1)* %144, align 8, !tbaa !17\l  ret void\l}"];
}
