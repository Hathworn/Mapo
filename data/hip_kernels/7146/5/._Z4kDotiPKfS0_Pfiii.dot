digraph "CFG for '_Z4kDotiPKfS0_Pfiii' function" {
	label="CFG for '_Z4kDotiPKfS0_Pfiii' function";

	Node0x46e6cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = mul i32 %8, %13\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %33\l|{<s0>T|<s1>F}}"];
	Node0x46e6cb0:s0 -> Node0x46e8ed0;
	Node0x46e6cb0:s1 -> Node0x46e8f60;
	Node0x46e8ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%21:\l21:                                               \l  %22 = icmp sgt i32 %5, 0\l  %23 = udiv i32 %16, %13\l  %24 = mul i32 %23, %13\l  %25 = icmp ugt i32 %16, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %13\l  %29 = and i32 %5, 7\l  %30 = icmp ult i32 %5, 8\l  %31 = and i32 %5, -8\l  %32 = icmp eq i32 %29, 0\l  br label %34\l}"];
	Node0x46e8ed0 -> Node0x46e8950;
	Node0x46e8f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%33:\l33:                                               \l  ret void\l}"];
	Node0x46e8950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%34:\l34:                                               \l  %35 = phi i32 [ %19, %21 ], [ %69, %65 ]\l  %36 = freeze i32 %35\l  %37 = freeze i32 %6\l  %38 = sdiv i32 %36, %37\l  %39 = mul i32 %38, %37\l  %40 = sub i32 %36, %39\l  br i1 %22, label %41, label %65\l|{<s0>T|<s1>F}}"];
	Node0x46e8950:s0 -> Node0x46e9d10;
	Node0x46e8950:s1 -> Node0x46e9980;
	Node0x46e9d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%41:\l41:                                               \l  %42 = mul nsw i32 %38, %5\l  br i1 %30, label %43, label %71\l|{<s0>T|<s1>F}}"];
	Node0x46e9d10:s0 -> Node0x46e9ee0;
	Node0x46e9d10:s1 -> Node0x46e9f30;
	Node0x46e9ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%43:\l43:                                               \l  %44 = phi float [ undef, %41 ], [ %169, %71 ]\l  %45 = phi i32 [ 0, %41 ], [ %170, %71 ]\l  %46 = phi float [ 0.000000e+00, %41 ], [ %169, %71 ]\l  br i1 %32, label %65, label %47\l|{<s0>T|<s1>F}}"];
	Node0x46e9ee0:s0 -> Node0x46e9980;
	Node0x46e9ee0:s1 -> Node0x46eb190;
	Node0x46eb190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi i32 [ %62, %47 ], [ %45, %43 ]\l  %49 = phi float [ %61, %47 ], [ %46, %43 ]\l  %50 = phi i32 [ %63, %47 ], [ 0, %43 ]\l  %51 = add nsw i32 %48, %42\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %55 = mul nsw i32 %48, %6\l  %56 = add nsw i32 %55, %40\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16\l  %60 = fmul contract float %54, %59\l  %61 = fadd contract float %49, %60\l  %62 = add nuw nsw i32 %48, 1\l  %63 = add i32 %50, 1\l  %64 = icmp eq i32 %63, %29\l  br i1 %64, label %65, label %47, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x46eb190:s0 -> Node0x46e9980;
	Node0x46eb190:s1 -> Node0x46eb190;
	Node0x46e9980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%65:\l65:                                               \l  %66 = phi float [ 0.000000e+00, %34 ], [ %44, %43 ], [ %61, %47 ]\l  %67 = sext i32 %35 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %3, i64 %67\l  store float %66, float addrspace(1)* %68, align 4, !tbaa !16\l  %69 = add i32 %28, %35\l  %70 = icmp slt i32 %69, %0\l  br i1 %70, label %34, label %33, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x46e9980:s0 -> Node0x46e8950;
	Node0x46e9980:s1 -> Node0x46e8f60;
	Node0x46e9f30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%71:\l71:                                               \l  %72 = phi i32 [ %170, %71 ], [ 0, %41 ]\l  %73 = phi float [ %169, %71 ], [ 0.000000e+00, %41 ]\l  %74 = phi i32 [ %171, %71 ], [ 0, %41 ]\l  %75 = add nsw i32 %72, %42\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = mul nsw i32 %72, %6\l  %80 = add nsw i32 %79, %40\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %2, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16\l  %84 = fmul contract float %78, %83\l  %85 = fadd contract float %73, %84\l  %86 = or i32 %72, 1\l  %87 = add nsw i32 %86, %42\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = mul nsw i32 %86, %6\l  %92 = add nsw i32 %91, %40\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16\l  %96 = fmul contract float %90, %95\l  %97 = fadd contract float %85, %96\l  %98 = or i32 %72, 2\l  %99 = add nsw i32 %98, %42\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !16\l  %103 = mul nsw i32 %98, %6\l  %104 = add nsw i32 %103, %40\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %2, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = fmul contract float %102, %107\l  %109 = fadd contract float %97, %108\l  %110 = or i32 %72, 3\l  %111 = add nsw i32 %110, %42\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = mul nsw i32 %110, %6\l  %116 = add nsw i32 %115, %40\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %2, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = fmul contract float %114, %119\l  %121 = fadd contract float %109, %120\l  %122 = or i32 %72, 4\l  %123 = add nsw i32 %122, %42\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = mul nsw i32 %122, %6\l  %128 = add nsw i32 %127, %40\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %2, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %132 = fmul contract float %126, %131\l  %133 = fadd contract float %121, %132\l  %134 = or i32 %72, 5\l  %135 = add nsw i32 %134, %42\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !16\l  %139 = mul nsw i32 %134, %6\l  %140 = add nsw i32 %139, %40\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %2, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !16\l  %144 = fmul contract float %138, %143\l  %145 = fadd contract float %133, %144\l  %146 = or i32 %72, 6\l  %147 = add nsw i32 %146, %42\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16\l  %151 = mul nsw i32 %146, %6\l  %152 = add nsw i32 %151, %40\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %2, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16\l  %156 = fmul contract float %150, %155\l  %157 = fadd contract float %145, %156\l  %158 = or i32 %72, 7\l  %159 = add nsw i32 %158, %42\l  %160 = sext i32 %159 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %1, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !16\l  %163 = mul nsw i32 %158, %6\l  %164 = add nsw i32 %163, %40\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %2, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !16\l  %168 = fmul contract float %162, %167\l  %169 = fadd contract float %157, %168\l  %170 = add nuw nsw i32 %72, 8\l  %171 = add i32 %74, 8\l  %172 = icmp eq i32 %171, %31\l  br i1 %172, label %43, label %71, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x46e9f30:s0 -> Node0x46e9ee0;
	Node0x46e9f30:s1 -> Node0x46e9f30;
}
