digraph "CFG for '_Z11kDot_m1T_m2iPKfS0_Pfiii' function" {
	label="CFG for '_Z11kDot_m1T_m2iPKfS0_Pfiii' function";

	Node0x4b0ae50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = mul i32 %8, %13\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4b0ae50:s0 -> Node0x4b0d070;
	Node0x4b0ae50:s1 -> Node0x4b0d100;
	Node0x4b0d070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%21:\l21:                                               \l  %22 = icmp sgt i32 %4, 0\l  %23 = udiv i32 %16, %13\l  %24 = mul i32 %23, %13\l  %25 = icmp ugt i32 %16, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %13\l  %29 = and i32 %4, 7\l  %30 = icmp ult i32 %4, 8\l  %31 = and i32 %4, -8\l  %32 = icmp eq i32 %29, 0\l  br label %34\l}"];
	Node0x4b0d070 -> Node0x4b0caf0;
	Node0x4b0d100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%33:\l33:                                               \l  ret void\l}"];
	Node0x4b0caf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%34:\l34:                                               \l  %35 = phi i32 [ %19, %21 ], [ %71, %65 ]\l  %36 = freeze i32 %35\l  %37 = freeze i32 %6\l  %38 = sdiv i32 %36, %37\l  %39 = mul i32 %38, %37\l  %40 = sub i32 %36, %39\l  br i1 %22, label %41, label %65\l|{<s0>T|<s1>F}}"];
	Node0x4b0caf0:s0 -> Node0x4b0deb0;
	Node0x4b0caf0:s1 -> Node0x4b0db20;
	Node0x4b0deb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%41:\l41:                                               \l  br i1 %30, label %42, label %73\l|{<s0>T|<s1>F}}"];
	Node0x4b0deb0:s0 -> Node0x4b0dff0;
	Node0x4b0deb0:s1 -> Node0x4b0e040;
	Node0x4b0dff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%42:\l42:                                               \l  %43 = phi float [ undef, %41 ], [ %179, %73 ]\l  %44 = phi i32 [ 0, %41 ], [ %180, %73 ]\l  %45 = phi float [ 0.000000e+00, %41 ], [ %179, %73 ]\l  br i1 %32, label %65, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4b0dff0:s0 -> Node0x4b0db20;
	Node0x4b0dff0:s1 -> Node0x4b0f2a0;
	Node0x4b0f2a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi i32 [ %62, %46 ], [ %44, %42 ]\l  %48 = phi float [ %61, %46 ], [ %45, %42 ]\l  %49 = phi i32 [ %63, %46 ], [ 0, %42 ]\l  %50 = mul nsw i32 %47, %5\l  %51 = add nsw i32 %50, %38\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %55 = mul nsw i32 %47, %6\l  %56 = add nsw i32 %55, %40\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16\l  %60 = fmul contract float %54, %59\l  %61 = fadd contract float %48, %60\l  %62 = add nuw nsw i32 %47, 1\l  %63 = add i32 %49, 1\l  %64 = icmp eq i32 %63, %29\l  br i1 %64, label %65, label %46, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4b0f2a0:s0 -> Node0x4b0db20;
	Node0x4b0f2a0:s1 -> Node0x4b0f2a0;
	Node0x4b0db20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%65:\l65:                                               \l  %66 = phi float [ 0.000000e+00, %34 ], [ %43, %42 ], [ %61, %46 ]\l  %67 = sext i32 %35 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %3, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16\l  %70 = fadd contract float %66, %69\l  store float %70, float addrspace(1)* %68, align 4, !tbaa !16\l  %71 = add i32 %28, %35\l  %72 = icmp slt i32 %71, %0\l  br i1 %72, label %34, label %33, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4b0db20:s0 -> Node0x4b0caf0;
	Node0x4b0db20:s1 -> Node0x4b0d100;
	Node0x4b0e040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%73:\l73:                                               \l  %74 = phi i32 [ %180, %73 ], [ 0, %41 ]\l  %75 = phi float [ %179, %73 ], [ 0.000000e+00, %41 ]\l  %76 = phi i32 [ %181, %73 ], [ 0, %41 ]\l  %77 = mul nsw i32 %74, %5\l  %78 = add nsw i32 %77, %38\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !16\l  %82 = mul nsw i32 %74, %6\l  %83 = add nsw i32 %82, %40\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %2, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = fmul contract float %81, %86\l  %88 = fadd contract float %75, %87\l  %89 = or i32 %74, 1\l  %90 = mul nsw i32 %89, %5\l  %91 = add nsw i32 %90, %38\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !16\l  %95 = mul nsw i32 %89, %6\l  %96 = add nsw i32 %95, %40\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %2, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16\l  %100 = fmul contract float %94, %99\l  %101 = fadd contract float %88, %100\l  %102 = or i32 %74, 2\l  %103 = mul nsw i32 %102, %5\l  %104 = add nsw i32 %103, %38\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = mul nsw i32 %102, %6\l  %109 = add nsw i32 %108, %40\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = fmul contract float %107, %112\l  %114 = fadd contract float %101, %113\l  %115 = or i32 %74, 3\l  %116 = mul nsw i32 %115, %5\l  %117 = add nsw i32 %116, %38\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !16\l  %121 = mul nsw i32 %115, %6\l  %122 = add nsw i32 %121, %40\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16\l  %126 = fmul contract float %120, %125\l  %127 = fadd contract float %114, %126\l  %128 = or i32 %74, 4\l  %129 = mul nsw i32 %128, %5\l  %130 = add nsw i32 %129, %38\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %1, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !16\l  %134 = mul nsw i32 %128, %6\l  %135 = add nsw i32 %134, %40\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %2, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !16\l  %139 = fmul contract float %133, %138\l  %140 = fadd contract float %127, %139\l  %141 = or i32 %74, 5\l  %142 = mul nsw i32 %141, %5\l  %143 = add nsw i32 %142, %38\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16\l  %147 = mul nsw i32 %141, %6\l  %148 = add nsw i32 %147, %40\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %2, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !16\l  %152 = fmul contract float %146, %151\l  %153 = fadd contract float %140, %152\l  %154 = or i32 %74, 6\l  %155 = mul nsw i32 %154, %5\l  %156 = add nsw i32 %155, %38\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %1, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !16\l  %160 = mul nsw i32 %154, %6\l  %161 = add nsw i32 %160, %40\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %2, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !16\l  %165 = fmul contract float %159, %164\l  %166 = fadd contract float %153, %165\l  %167 = or i32 %74, 7\l  %168 = mul nsw i32 %167, %5\l  %169 = add nsw i32 %168, %38\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %1, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !16\l  %173 = mul nsw i32 %167, %6\l  %174 = add nsw i32 %173, %40\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %2, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !16\l  %178 = fmul contract float %172, %177\l  %179 = fadd contract float %166, %178\l  %180 = add nuw nsw i32 %74, 8\l  %181 = add i32 %76, 8\l  %182 = icmp eq i32 %181, %31\l  br i1 %182, label %42, label %73, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4b0e040:s0 -> Node0x4b0dff0;
	Node0x4b0e040:s1 -> Node0x4b0e040;
}
