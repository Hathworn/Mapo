digraph "CFG for '_Z11kDot_m1_m2TiPKfS0_Pfii' function" {
	label="CFG for '_Z11kDot_m1_m2TiPKfS0_Pfii' function";

	Node0x4a3ac10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !6\l  %16 = mul i32 %7, %12\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %18 = add i32 %16, %17\l  %19 = icmp slt i32 %18, %0\l  br i1 %19, label %20, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4a3ac10:s0 -> Node0x4a3ce60;
	Node0x4a3ac10:s1 -> Node0x4a3cef0;
	Node0x4a3ce60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%20:\l20:                                               \l  %21 = icmp sgt i32 %4, 0\l  %22 = udiv i32 %15, %12\l  %23 = mul i32 %22, %12\l  %24 = icmp ugt i32 %15, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %12\l  %28 = and i32 %4, 7\l  %29 = icmp ult i32 %4, 8\l  %30 = and i32 %4, -8\l  %31 = icmp eq i32 %28, 0\l  br label %33\l}"];
	Node0x4a3ce60 -> Node0x4a3d6d0;
	Node0x4a3cef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%32:\l32:                                               \l  ret void\l}"];
	Node0x4a3d6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%33:\l33:                                               \l  %34 = phi i32 [ %18, %20 ], [ %68, %64 ]\l  br i1 %21, label %35, label %64\l|{<s0>T|<s1>F}}"];
	Node0x4a3d6d0:s0 -> Node0x4a3da50;
	Node0x4a3d6d0:s1 -> Node0x4a3c9e0;
	Node0x4a3da50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%35:\l35:                                               \l  %36 = freeze i32 %34\l  %37 = freeze i32 %5\l  %38 = sdiv i32 %36, %37\l  %39 = mul i32 %38, %37\l  %40 = sub i32 %36, %39\l  %41 = mul nsw i32 %40, %4\l  %42 = mul nsw i32 %38, %4\l  br i1 %29, label %43, label %70\l|{<s0>T|<s1>F}}"];
	Node0x4a3da50:s0 -> Node0x4a3df00;
	Node0x4a3da50:s1 -> Node0x4a3df50;
	Node0x4a3df00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%43:\l43:                                               \l  %44 = phi float [ undef, %35 ], [ %160, %70 ]\l  %45 = phi i32 [ 0, %35 ], [ %161, %70 ]\l  %46 = phi float [ 0.000000e+00, %35 ], [ %160, %70 ]\l  br i1 %31, label %64, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4a3df00:s0 -> Node0x4a3c9e0;
	Node0x4a3df00:s1 -> Node0x4a3f1b0;
	Node0x4a3f1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi i32 [ %61, %47 ], [ %45, %43 ]\l  %49 = phi float [ %60, %47 ], [ %46, %43 ]\l  %50 = phi i32 [ %62, %47 ], [ 0, %43 ]\l  %51 = add nsw i32 %48, %41\l  %52 = add nsw i32 %48, %42\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = sext i32 %51 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %2, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !16\l  %59 = fmul contract float %55, %58\l  %60 = fadd contract float %49, %59\l  %61 = add nuw nsw i32 %48, 1\l  %62 = add i32 %50, 1\l  %63 = icmp eq i32 %62, %28\l  br i1 %63, label %64, label %47, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4a3f1b0:s0 -> Node0x4a3c9e0;
	Node0x4a3f1b0:s1 -> Node0x4a3f1b0;
	Node0x4a3c9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%64:\l64:                                               \l  %65 = phi float [ 0.000000e+00, %33 ], [ %44, %43 ], [ %60, %47 ]\l  %66 = sext i32 %34 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %3, i64 %66\l  store float %65, float addrspace(1)* %67, align 4, !tbaa !16\l  %68 = add i32 %27, %34\l  %69 = icmp slt i32 %68, %0\l  br i1 %69, label %33, label %32, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4a3c9e0:s0 -> Node0x4a3d6d0;
	Node0x4a3c9e0:s1 -> Node0x4a3cef0;
	Node0x4a3df50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%70:\l70:                                               \l  %71 = phi i32 [ %161, %70 ], [ 0, %35 ]\l  %72 = phi float [ %160, %70 ], [ 0.000000e+00, %35 ]\l  %73 = phi i32 [ %162, %70 ], [ 0, %35 ]\l  %74 = add nsw i32 %71, %41\l  %75 = add nsw i32 %71, %42\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = sext i32 %74 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %2, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !16\l  %82 = fmul contract float %78, %81\l  %83 = fadd contract float %72, %82\l  %84 = or i32 %71, 1\l  %85 = add nsw i32 %84, %41\l  %86 = add nsw i32 %84, %42\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16\l  %90 = sext i32 %85 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16\l  %93 = fmul contract float %89, %92\l  %94 = fadd contract float %83, %93\l  %95 = or i32 %71, 2\l  %96 = add nsw i32 %95, %41\l  %97 = add nsw i32 %95, %42\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = sext i32 %96 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %2, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !16\l  %104 = fmul contract float %100, %103\l  %105 = fadd contract float %94, %104\l  %106 = or i32 %71, 3\l  %107 = add nsw i32 %106, %41\l  %108 = add nsw i32 %106, %42\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !16\l  %112 = sext i32 %107 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %2, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = fmul contract float %111, %114\l  %116 = fadd contract float %105, %115\l  %117 = or i32 %71, 4\l  %118 = add nsw i32 %117, %41\l  %119 = add nsw i32 %117, %42\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = sext i32 %118 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16\l  %126 = fmul contract float %122, %125\l  %127 = fadd contract float %116, %126\l  %128 = or i32 %71, 5\l  %129 = add nsw i32 %128, %41\l  %130 = add nsw i32 %128, %42\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %1, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !16\l  %134 = sext i32 %129 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %2, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16\l  %137 = fmul contract float %133, %136\l  %138 = fadd contract float %127, %137\l  %139 = or i32 %71, 6\l  %140 = add nsw i32 %139, %41\l  %141 = add nsw i32 %139, %42\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %1, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !16\l  %145 = sext i32 %140 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %2, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16\l  %148 = fmul contract float %144, %147\l  %149 = fadd contract float %138, %148\l  %150 = or i32 %71, 7\l  %151 = add nsw i32 %150, %41\l  %152 = add nsw i32 %150, %42\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %1, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16\l  %156 = sext i32 %151 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %2, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !16\l  %159 = fmul contract float %155, %158\l  %160 = fadd contract float %149, %159\l  %161 = add nuw nsw i32 %71, 8\l  %162 = add i32 %73, 8\l  %163 = icmp eq i32 %162, %30\l  br i1 %163, label %43, label %70, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4a3df50:s0 -> Node0x4a3df00;
	Node0x4a3df50:s1 -> Node0x4a3df50;
}
