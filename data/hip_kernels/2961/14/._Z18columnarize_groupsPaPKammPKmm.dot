digraph "CFG for '_Z18columnarize_groupsPaPKammPKmm' function" {
	label="CFG for '_Z18columnarize_groupsPaPKammPKmm' function";

	Node0x4cb3660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !7\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = udiv i32 %16, %13\l  %19 = mul i32 %18, %13\l  %20 = icmp ugt i32 %16, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %22, %17\l  %24 = add i32 %23, %8\l  %25 = mul i32 %24, %13\l  %26 = add i32 %25, %7\l  %27 = zext i32 %26 to i64\l  %28 = icmp uge i64 %27, %2\l  %29 = icmp eq i64 %3, 0\l  %30 = select i1 %28, i1 true, i1 %29\l  br i1 %30, label %101, label %31\l|{<s0>T|<s1>F}}"];
	Node0x4cb3660:s0 -> Node0x4cb6060;
	Node0x4cb3660:s1 -> Node0x4cb60f0;
	Node0x4cb60f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%31:\l31:                                               \l  %32 = mul i64 %27, %5\l  %33 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %32\l  %34 = and i64 %3, 1\l  %35 = icmp eq i64 %3, 1\l  br i1 %35, label %83, label %36\l|{<s0>T|<s1>F}}"];
	Node0x4cb60f0:s0 -> Node0x4cb65f0;
	Node0x4cb60f0:s1 -> Node0x4cb6640;
	Node0x4cb6640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%36:\l36:                                               \l  %37 = and i64 %3, -2\l  br label %38\l}"];
	Node0x4cb6640 -> Node0x4cb6800;
	Node0x4cb6800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i8 addrspace(1)* [ %33, %36 ], [ %79, %75 ]\l  %40 = phi i64 [ 0, %36 ], [ %80, %75 ]\l  %41 = phi i8 addrspace(1)* [ %0, %36 ], [ %78, %75 ]\l  %42 = phi i64 [ 0, %36 ], [ %81, %75 ]\l  %43 = getelementptr inbounds i64, i64 addrspace(1)* %4, i64 %40\l  %44 = load i64, i64 addrspace(1)* %43, align 8, !tbaa !16\l  switch i64 %44, label %56 [\l    i64 8, label %45\l    i64 4, label %51\l  ]\l|{<s0>def|<s1>8|<s2>4}}"];
	Node0x4cb6800:s0 -> Node0x4cb7040;
	Node0x4cb6800:s1 -> Node0x4cb70d0;
	Node0x4cb6800:s2 -> Node0x4cb7160;
	Node0x4cb70d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%45:\l45:                                               \l  %46 = bitcast i8 addrspace(1)* %41 to i64 addrspace(1)*\l  %47 = getelementptr inbounds i64, i64 addrspace(1)* %46, i64 %27\l  %48 = bitcast i8 addrspace(1)* %39 to i64 addrspace(1)*\l  %49 = load i64, i64 addrspace(1)* %48, align 8, !tbaa !16\l  store i64 %49, i64 addrspace(1)* %47, align 8, !tbaa !16\l  %50 = load i64, i64 addrspace(1)* %43, align 8, !tbaa !16\l  br label %56\l}"];
	Node0x4cb70d0 -> Node0x4cb7040;
	Node0x4cb7160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%51:\l51:                                               \l  %52 = bitcast i8 addrspace(1)* %41 to i32 addrspace(1)*\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %52, i64 %27\l  %54 = bitcast i8 addrspace(1)* %39 to i32 addrspace(1)*\l  %55 = load i32, i32 addrspace(1)* %54, align 4, !tbaa !20\l  store i32 %55, i32 addrspace(1)* %53, align 4, !tbaa !20\l  br label %56\l}"];
	Node0x4cb7160 -> Node0x4cb7040;
	Node0x4cb7040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%56:\l56:                                               \l  %57 = phi i64 [ %44, %38 ], [ 4, %51 ], [ %50, %45 ]\l  %58 = mul i64 %57, %2\l  %59 = getelementptr inbounds i8, i8 addrspace(1)* %41, i64 %58\l  %60 = getelementptr inbounds i8, i8 addrspace(1)* %39, i64 %57\l  %61 = or i64 %40, 1\l  %62 = getelementptr inbounds i64, i64 addrspace(1)* %4, i64 %61\l  %63 = load i64, i64 addrspace(1)* %62, align 8, !tbaa !16\l  switch i64 %63, label %75 [\l    i64 8, label %69\l    i64 4, label %64\l  ]\l|{<s0>def|<s1>8|<s2>4}}"];
	Node0x4cb7040:s0 -> Node0x4cb68f0;
	Node0x4cb7040:s1 -> Node0x4cb8ab0;
	Node0x4cb7040:s2 -> Node0x4cb8b00;
	Node0x4cb8b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%64:\l64:                                               \l  %65 = bitcast i8 addrspace(1)* %59 to i32 addrspace(1)*\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %65, i64 %27\l  %67 = bitcast i8 addrspace(1)* %60 to i32 addrspace(1)*\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !20\l  store i32 %68, i32 addrspace(1)* %66, align 4, !tbaa !20\l  br label %75\l}"];
	Node0x4cb8b00 -> Node0x4cb68f0;
	Node0x4cb8ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%69:\l69:                                               \l  %70 = bitcast i8 addrspace(1)* %59 to i64 addrspace(1)*\l  %71 = getelementptr inbounds i64, i64 addrspace(1)* %70, i64 %27\l  %72 = bitcast i8 addrspace(1)* %60 to i64 addrspace(1)*\l  %73 = load i64, i64 addrspace(1)* %72, align 8, !tbaa !16\l  store i64 %73, i64 addrspace(1)* %71, align 8, !tbaa !16\l  %74 = load i64, i64 addrspace(1)* %62, align 8, !tbaa !16\l  br label %75\l}"];
	Node0x4cb8ab0 -> Node0x4cb68f0;
	Node0x4cb68f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  %76 = phi i64 [ %63, %56 ], [ 4, %64 ], [ %74, %69 ]\l  %77 = mul i64 %76, %2\l  %78 = getelementptr inbounds i8, i8 addrspace(1)* %59, i64 %77\l  %79 = getelementptr inbounds i8, i8 addrspace(1)* %60, i64 %76\l  %80 = add nuw i64 %40, 2\l  %81 = add i64 %42, 2\l  %82 = icmp eq i64 %81, %37\l  br i1 %82, label %83, label %38, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4cb68f0:s0 -> Node0x4cb65f0;
	Node0x4cb68f0:s1 -> Node0x4cb6800;
	Node0x4cb65f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%83:\l83:                                               \l  %84 = phi i8 addrspace(1)* [ %33, %31 ], [ %79, %75 ]\l  %85 = phi i64 [ 0, %31 ], [ %80, %75 ]\l  %86 = phi i8 addrspace(1)* [ %0, %31 ], [ %78, %75 ]\l  %87 = icmp eq i64 %34, 0\l  br i1 %87, label %101, label %88\l|{<s0>T|<s1>F}}"];
	Node0x4cb65f0:s0 -> Node0x4cb6060;
	Node0x4cb65f0:s1 -> Node0x4cb9d40;
	Node0x4cb9d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%88:\l88:                                               \l  %89 = getelementptr inbounds i64, i64 addrspace(1)* %4, i64 %85\l  %90 = load i64, i64 addrspace(1)* %89, align 8, !tbaa !16\l  switch i64 %90, label %101 [\l    i64 8, label %96\l    i64 4, label %91\l  ]\l|{<s0>def|<s1>8|<s2>4}}"];
	Node0x4cb9d40:s0 -> Node0x4cb6060;
	Node0x4cb9d40:s1 -> Node0x4cb9f50;
	Node0x4cb9d40:s2 -> Node0x4cb9fa0;
	Node0x4cb9fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%91:\l91:                                               \l  %92 = bitcast i8 addrspace(1)* %86 to i32 addrspace(1)*\l  %93 = getelementptr inbounds i32, i32 addrspace(1)* %92, i64 %27\l  %94 = bitcast i8 addrspace(1)* %84 to i32 addrspace(1)*\l  %95 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !20\l  store i32 %95, i32 addrspace(1)* %93, align 4, !tbaa !20\l  br label %101\l}"];
	Node0x4cb9fa0 -> Node0x4cb6060;
	Node0x4cb9f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%96:\l96:                                               \l  %97 = bitcast i8 addrspace(1)* %86 to i64 addrspace(1)*\l  %98 = getelementptr inbounds i64, i64 addrspace(1)* %97, i64 %27\l  %99 = bitcast i8 addrspace(1)* %84 to i64 addrspace(1)*\l  %100 = load i64, i64 addrspace(1)* %99, align 8, !tbaa !16\l  store i64 %100, i64 addrspace(1)* %98, align 8, !tbaa !16\l  br label %101\l}"];
	Node0x4cb9f50 -> Node0x4cb6060;
	Node0x4cb6060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%101:\l101:                                              \l  ret void\l}"];
}
