digraph "CFG for '_Z11randInitGpuP12hiprandStatejjj' function" {
	label="CFG for '_Z11randInitGpuP12hiprandStatejjj' function";

	Node0x56e5a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%4:\l  %5 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = mul i32 %19, %20\l  %22 = add i32 %21, %6\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 16\l  %25 = bitcast i8 addrspace(4)* %24 to i32 addrspace(4)*\l  %26 = load i32, i32 addrspace(4)* %25, align 8, !tbaa !16\l  %27 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 2, !range !13, !invariant.load\l... !14\l  %30 = zext i16 %29 to i32\l  %31 = udiv i32 %26, %30\l  %32 = mul i32 %31, %30\l  %33 = icmp ugt i32 %26, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = mul i32 %3, %2\l  %37 = add i32 %36, %1\l  %38 = mul i32 %19, %37\l  %39 = mul i32 %38, %35\l  %40 = add i32 %39, %22\l  %41 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %41) #4\l  %42 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 0\l  %43 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 1\l  %44 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 2\l  %45 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 3\l  %46 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 4\l  %47 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 0\l  %48 = xor i32 %40, 746559103\l  %49 = mul i32 %48, 1228688033\l  %50 = add i32 %49, 123456789\l  store i32 %50, i32 addrspace(5)* %42, align 8, !tbaa !17\l  %51 = xor i32 %49, 362436069\l  store i32 %51, i32 addrspace(5)* %43, align 4, !tbaa !17\l  store i32 -1452303100, i32 addrspace(5)* %44, align 8, !tbaa !17\l  store i32 -1894485380, i32 addrspace(5)* %45, align 4, !tbaa !17\l  %52 = add i32 %49, 5783321\l  store i32 %52, i32 addrspace(5)* %46, align 8, !tbaa !17\l  %53 = add i32 %49, -1966976488\l  store i32 %53, i32 addrspace(5)* %47, align 8, !tbaa !21\l  %54 = icmp eq i32 %23, 0\l  br i1 %54, label %234, label %55\l|{<s0>T|<s1>F}}"];
	Node0x56e5a70:s0 -> Node0x56ee6e0;
	Node0x56e5a70:s1 -> Node0x56ee770;
	Node0x56ee770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%55:\l55:                                               \l  %56 = zext i32 %23 to i64\l  br label %57\l}"];
	Node0x56ee770 -> Node0x56ee920;
	Node0x56ee920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%57:\l57:                                               \l  %58 = phi i64 [ %67, %65 ], [ %56, %55 ]\l  %59 = phi i32 [ %66, %65 ], [ 0, %55 ]\l  %60 = trunc i64 %58 to i32\l  %61 = and i32 %60, 3\l  %62 = icmp eq i32 %61, 0\l  br i1 %62, label %65, label %63\l|{<s0>T|<s1>F}}"];
	Node0x56ee920:s0 -> Node0x56ee9e0;
	Node0x56ee920:s1 -> Node0x56eedd0;
	Node0x56eedd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%63:\l63:                                               \l  %64 = zext i32 %59 to i64\l  br label %69\l}"];
	Node0x56eedd0 -> Node0x56ec770;
	Node0x56ee9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%65:\l65:                                               \l  %66 = add nuw nsw i32 %59, 1\l  %67 = lshr i64 %58, 2\l  %68 = icmp ult i64 %58, 4\l  br i1 %68, label %234, label %57, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x56ee9e0:s0 -> Node0x56ee6e0;
	Node0x56ee9e0:s1 -> Node0x56ee920;
	Node0x56ec770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%69:\l69:                                               \l  %70 = phi i32 [ 0, %63 ], [ %232, %231 ]\l  br label %71\l}"];
	Node0x56ec770 -> Node0x56ef690;
	Node0x56ef690 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%71:\l71:                                               \l  %72 = phi i32 [ 0, %69 ], [ %204, %71 ]\l  %73 = phi i32 [ 0, %69 ], [ %210, %71 ]\l  %74 = phi i32 [ 0, %69 ], [ %216, %71 ]\l  %75 = phi i32 [ 0, %69 ], [ %222, %71 ]\l  %76 = phi i32 [ 0, %69 ], [ %228, %71 ]\l  %77 = phi i32 [ 0, %69 ], [ %229, %71 ]\l  %78 = lshr i32 %77, 5\l  %79 = and i32 %77, 28\l  %80 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %78\l  %81 = load i32, i32 addrspace(5)* %80, align 4, !tbaa !17\l  %82 = shl nuw i32 1, %79\l  %83 = and i32 %82, %81\l  %84 = icmp eq i32 %83, 0\l  %85 = mul nuw nsw i32 %77, 5\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %86\l  %88 = load i32, i32 addrspace(4)* %87, align 16, !tbaa !17\l  %89 = select i1 %84, i32 0, i32 %88\l  %90 = xor i32 %89, %72\l  %91 = or i32 %85, 1\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %92\l  %94 = load i32, i32 addrspace(4)* %93, align 4, !tbaa !17\l  %95 = select i1 %84, i32 0, i32 %94\l  %96 = xor i32 %95, %73\l  %97 = or i32 %85, 2\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %98\l  %100 = load i32, i32 addrspace(4)* %99, align 8, !tbaa !17\l  %101 = select i1 %84, i32 0, i32 %100\l  %102 = xor i32 %101, %74\l  %103 = or i32 %85, 3\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %104\l  %106 = load i32, i32 addrspace(4)* %105, align 4, !tbaa !17\l  %107 = select i1 %84, i32 0, i32 %106\l  %108 = xor i32 %107, %75\l  %109 = add nuw nsw i32 %85, 4\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %110\l  %112 = load i32, i32 addrspace(4)* %111, align 16, !tbaa !17\l  %113 = select i1 %84, i32 0, i32 %112\l  %114 = xor i32 %113, %76\l  %115 = or i32 %77, 1\l  %116 = lshr i32 %77, 5\l  %117 = and i32 %115, 29\l  %118 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %116\l  %119 = load i32, i32 addrspace(5)* %118, align 4, !tbaa !17\l  %120 = shl nuw i32 1, %117\l  %121 = and i32 %120, %119\l  %122 = icmp eq i32 %121, 0\l  %123 = mul nuw nsw i32 %115, 5\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %124\l  %126 = load i32, i32 addrspace(4)* %125, align 4, !tbaa !17\l  %127 = select i1 %122, i32 0, i32 %126\l  %128 = xor i32 %127, %90\l  %129 = add nuw nsw i32 %123, 1\l  %130 = zext i32 %129 to i64\l  %131 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %130\l  %132 = load i32, i32 addrspace(4)* %131, align 8, !tbaa !17\l  %133 = select i1 %122, i32 0, i32 %132\l  %134 = xor i32 %133, %96\l  %135 = or i32 %123, 2\l  %136 = zext i32 %135 to i64\l  %137 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %136\l  %138 = load i32, i32 addrspace(4)* %137, align 4, !tbaa !17\l  %139 = select i1 %122, i32 0, i32 %138\l  %140 = xor i32 %139, %102\l  %141 = add nuw nsw i32 %123, 3\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %142\l  %144 = load i32, i32 addrspace(4)* %143, align 16, !tbaa !17\l  %145 = select i1 %122, i32 0, i32 %144\l  %146 = xor i32 %145, %108\l  %147 = add nuw nsw i32 %123, 4\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %148\l  %150 = load i32, i32 addrspace(4)* %149, align 4, !tbaa !17\l  %151 = select i1 %122, i32 0, i32 %150\l  %152 = xor i32 %151, %114\l  %153 = or i32 %77, 2\l  %154 = lshr i32 %77, 5\l  %155 = and i32 %153, 30\l  %156 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %154\l  %157 = load i32, i32 addrspace(5)* %156, align 4, !tbaa !17\l  %158 = shl nuw i32 1, %155\l  %159 = and i32 %158, %157\l  %160 = icmp eq i32 %159, 0\l  %161 = mul nuw nsw i32 %153, 5\l  %162 = zext i32 %161 to i64\l  %163 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %162\l  %164 = load i32, i32 addrspace(4)* %163, align 8, !tbaa !17\l  %165 = select i1 %160, i32 0, i32 %164\l  %166 = xor i32 %165, %128\l  %167 = or i32 %161, 1\l  %168 = zext i32 %167 to i64\l  %169 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %168\l  %170 = load i32, i32 addrspace(4)* %169, align 4, !tbaa !17\l  %171 = select i1 %160, i32 0, i32 %170\l  %172 = xor i32 %171, %134\l  %173 = add nuw nsw i32 %161, 2\l  %174 = zext i32 %173 to i64\l  %175 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %174\l  %176 = load i32, i32 addrspace(4)* %175, align 16, !tbaa !17\l  %177 = select i1 %160, i32 0, i32 %176\l  %178 = xor i32 %177, %140\l  %179 = add nuw nsw i32 %161, 3\l  %180 = zext i32 %179 to i64\l  %181 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %180\l  %182 = load i32, i32 addrspace(4)* %181, align 4, !tbaa !17\l  %183 = select i1 %160, i32 0, i32 %182\l  %184 = xor i32 %183, %146\l  %185 = add nuw nsw i32 %161, 4\l  %186 = zext i32 %185 to i64\l  %187 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %186\l  %188 = load i32, i32 addrspace(4)* %187, align 8, !tbaa !17\l  %189 = select i1 %160, i32 0, i32 %188\l  %190 = xor i32 %189, %152\l  %191 = or i32 %77, 3\l  %192 = lshr i32 %77, 5\l  %193 = and i32 %191, 31\l  %194 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %192\l  %195 = load i32, i32 addrspace(5)* %194, align 4, !tbaa !17\l  %196 = shl nuw i32 1, %193\l  %197 = and i32 %196, %195\l  %198 = icmp eq i32 %197, 0\l  %199 = mul nuw nsw i32 %191, 5\l  %200 = zext i32 %199 to i64\l  %201 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %200\l  %202 = load i32, i32 addrspace(4)* %201, align 4, !tbaa !17\l  %203 = select i1 %198, i32 0, i32 %202\l  %204 = xor i32 %203, %166\l  %205 = add nuw nsw i32 %199, 1\l  %206 = zext i32 %205 to i64\l  %207 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %206\l  %208 = load i32, i32 addrspace(4)* %207, align 16, !tbaa !17\l  %209 = select i1 %198, i32 0, i32 %208\l  %210 = xor i32 %209, %172\l  %211 = add nuw nsw i32 %199, 2\l  %212 = zext i32 %211 to i64\l  %213 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %212\l  %214 = load i32, i32 addrspace(4)* %213, align 4, !tbaa !17\l  %215 = select i1 %198, i32 0, i32 %214\l  %216 = xor i32 %215, %178\l  %217 = add nuw nsw i32 %199, 3\l  %218 = zext i32 %217 to i64\l  %219 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %218\l  %220 = load i32, i32 addrspace(4)* %219, align 8, !tbaa !17\l  %221 = select i1 %198, i32 0, i32 %220\l  %222 = xor i32 %221, %184\l  %223 = add nuw nsw i32 %199, 4\l  %224 = zext i32 %223 to i64\l  %225 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %64, i64 %224\l  %226 = load i32, i32 addrspace(4)* %225, align 4, !tbaa !17\l  %227 = select i1 %198, i32 0, i32 %226\l  %228 = xor i32 %227, %190\l  %229 = add nuw nsw i32 %77, 4\l  %230 = icmp eq i32 %229, 160\l  br i1 %230, label %231, label %71, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x56ef690:s0 -> Node0x56ef550;
	Node0x56ef690:s1 -> Node0x56ef690;
	Node0x56ef550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%231:\l231:                                              \l  store i32 %204, i32 addrspace(5)* %42, align 8, !tbaa !17\l  store i32 %210, i32 addrspace(5)* %43, align 4, !tbaa !17\l  store i32 %216, i32 addrspace(5)* %44, align 8, !tbaa !17\l  store i32 %222, i32 addrspace(5)* %45, align 4, !tbaa !17\l  store i32 %228, i32 addrspace(5)* %46, align 8, !tbaa !17\l  %232 = add nuw nsw i32 %70, 1\l  %233 = icmp eq i32 %232, %61\l  br i1 %233, label %65, label %69, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x56ef550:s0 -> Node0x56ee9e0;
	Node0x56ef550:s1 -> Node0x56ec770;
	Node0x56ee6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%234:\l234:                                              \l  %235 = mul i32 %22, %14\l  %236 = add i32 %235, %23\l  %237 = zext i32 %236 to i64\l  %238 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %237\l  %239 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %239, align 4, !tbaa !30\l  %240 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %240, align 8, !tbaa !31\l  %241 = bitcast %struct.hiprandState addrspace(1)* %238 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %241, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %41, i64 48, i1 false), !tbaa.struct !32\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %41) #4\l  ret void\l}"];
}
