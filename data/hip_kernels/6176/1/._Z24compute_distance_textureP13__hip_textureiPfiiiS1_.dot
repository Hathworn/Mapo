digraph "CFG for '_Z24compute_distance_textureP13__hip_textureiPfiiiS1_' function" {
	label="CFG for '_Z24compute_distance_textureP13__hip_textureiPfiiiS1_' function";

	Node0x4edbfb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp ult i32 %16, %3\l  %26 = icmp ult i32 %24, %1\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %226\l|{<s0>T|<s1>F}}"];
	Node0x4edbfb0:s0 -> Node0x4edf9c0;
	Node0x4edbfb0:s1 -> Node0x4edfa50;
	Node0x4edf9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%28:\l28:                                               \l  %29 = icmp sgt i32 %5, 0\l  br i1 %29, label %30, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4edf9c0:s0 -> Node0x4edfc50;
	Node0x4edf9c0:s1 -> Node0x4edfca0;
	Node0x4edfc50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = uitofp i32 %24 to float\l  %32 = bitcast %struct.__hip_texture addrspace(1)* %0 to i32 addrspace(1)*\l  %33 = addrspacecast i32 addrspace(1)* %32 to i32 addrspace(4)*\l  %34 = getelementptr inbounds i32, i32 addrspace(4)* %33, i64 12\l  %35 = getelementptr inbounds i32, i32 addrspace(4)* %33, i64 10\l  %36 = load i32, i32 addrspace(4)* %35, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %37 = uitofp i32 %36 to float\l  %38 = getelementptr inbounds i32, i32 addrspace(4)* %33, i64 2\l  %39 = load i32, i32 addrspace(4)* %38, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %40 = lshr i32 %39, 14\l  %41 = and i32 %40, 16383\l  %42 = add nuw nsw i32 %41, 1\l  %43 = uitofp i32 %42 to float\l  %44 = load i32, i32 addrspace(4)* %34, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %45 = and i32 %44, 32768\l  %46 = icmp eq i32 %45, 0\l  %47 = select i1 %46, float %37, float 1.000000e+00\l  %48 = select i1 %46, float %43, float 1.000000e+00\l  %49 = getelementptr inbounds i32, i32 addrspace(4)* %33, i64 14\l  %50 = load i32, i32 addrspace(4)* %49, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %51 = and i32 %50, 1048576\l  %52 = icmp eq i32 %51, 0\l  %53 = bitcast i32 addrspace(4)* %34 to \<4 x i32\> addrspace(4)*\l  %54 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %53, align 16, !tbaa !11,\l... !amdgpu.noclobber !5\l  %55 = bitcast %struct.__hip_texture addrspace(1)* %0 to \<8 x i32\>\l... addrspace(1)*\l  %56 = addrspacecast \<8 x i32\> addrspace(1)* %55 to \<8 x i32\> addrspace(4)*\l  %57 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %56, align 32, !tbaa !11,\l... !amdgpu.noclobber !5\l  %58 = tail call float @llvm.amdgcn.rcp.f32(float %48)\l  %59 = tail call float @llvm.amdgcn.rcp.f32(float %47)\l  %60 = fmul float %47, %31\l  %61 = tail call float @llvm.floor.f32(float %60)\l  %62 = fmul float %59, %61\l  %63 = select i1 %52, float %62, float %31\l  %64 = and i32 %5, 7\l  %65 = icmp ult i32 %5, 8\l  br i1 %65, label %68, label %66\l|{<s0>T|<s1>F}}"];
	Node0x4edfc50:s0 -> Node0x4edff80;
	Node0x4edfc50:s1 -> Node0x4ee0010;
	Node0x4ee0010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%66:\l66:                                               \l  %67 = and i32 %5, -8\l  br label %100\l}"];
	Node0x4ee0010 -> Node0x4ee3bf0;
	Node0x4edff80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%68:\l68:                                               \l  %69 = phi float [ undef, %30 ], [ %222, %100 ]\l  %70 = phi float [ 0.000000e+00, %30 ], [ %222, %100 ]\l  %71 = phi i32 [ 0, %30 ], [ %223, %100 ]\l  %72 = icmp eq i32 %64, 0\l  br i1 %72, label %94, label %73\l|{<s0>T|<s1>F}}"];
	Node0x4edff80:s0 -> Node0x4edfca0;
	Node0x4edff80:s1 -> Node0x4ee4450;
	Node0x4ee4450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi float [ %90, %73 ], [ %70, %68 ]\l  %75 = phi i32 [ %91, %73 ], [ %71, %68 ]\l  %76 = phi i32 [ %92, %73 ], [ 0, %68 ]\l  %77 = sitofp i32 %75 to float\l  %78 = fmul float %48, %77\l  %79 = tail call float @llvm.floor.f32(float %78)\l  %80 = fmul float %58, %79\l  %81 = select i1 %52, float %80, float %77\l  %82 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %81, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %83 = mul nsw i32 %75, %4\l  %84 = add i32 %83, %16\l  %85 = zext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %2, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %88 = fsub contract float %82, %87\l  %89 = fmul contract float %88, %88\l  %90 = fadd contract float %74, %89\l  %91 = add nuw nsw i32 %75, 1\l  %92 = add i32 %76, 1\l  %93 = icmp eq i32 %92, %64\l  br i1 %93, label %94, label %73, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4ee4450:s0 -> Node0x4edfca0;
	Node0x4ee4450:s1 -> Node0x4ee4450;
	Node0x4edfca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%94:\l94:                                               \l  %95 = phi float [ 0.000000e+00, %28 ], [ %69, %68 ], [ %90, %73 ]\l  %96 = mul i32 %24, %4\l  %97 = add i32 %96, %16\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %6, i64 %98\l  store float %95, float addrspace(1)* %99, align 4, !tbaa !12\l  br label %226\l}"];
	Node0x4edfca0 -> Node0x4edfa50;
	Node0x4ee3bf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%100:\l100:                                              \l  %101 = phi float [ 0.000000e+00, %66 ], [ %222, %100 ]\l  %102 = phi i32 [ 0, %66 ], [ %223, %100 ]\l  %103 = phi i32 [ 0, %66 ], [ %224, %100 ]\l  %104 = sitofp i32 %102 to float\l  %105 = fmul float %48, %104\l  %106 = tail call float @llvm.floor.f32(float %105)\l  %107 = fmul float %58, %106\l  %108 = select i1 %52, float %107, float %104\l  %109 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %108, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %110 = mul nsw i32 %102, %4\l  %111 = add i32 %110, %16\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %2, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %115 = fsub contract float %109, %114\l  %116 = fmul contract float %115, %115\l  %117 = fadd contract float %101, %116\l  %118 = or i32 %102, 1\l  %119 = sitofp i32 %118 to float\l  %120 = fmul float %48, %119\l  %121 = tail call float @llvm.floor.f32(float %120)\l  %122 = fmul float %58, %121\l  %123 = select i1 %52, float %122, float %119\l  %124 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %123, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %125 = mul nsw i32 %118, %4\l  %126 = add i32 %125, %16\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %2, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %130 = fsub contract float %124, %129\l  %131 = fmul contract float %130, %130\l  %132 = fadd contract float %117, %131\l  %133 = or i32 %102, 2\l  %134 = sitofp i32 %133 to float\l  %135 = fmul float %48, %134\l  %136 = tail call float @llvm.floor.f32(float %135)\l  %137 = fmul float %58, %136\l  %138 = select i1 %52, float %137, float %134\l  %139 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %138, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %140 = mul nsw i32 %133, %4\l  %141 = add i32 %140, %16\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %2, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %145 = fsub contract float %139, %144\l  %146 = fmul contract float %145, %145\l  %147 = fadd contract float %132, %146\l  %148 = or i32 %102, 3\l  %149 = sitofp i32 %148 to float\l  %150 = fmul float %48, %149\l  %151 = tail call float @llvm.floor.f32(float %150)\l  %152 = fmul float %58, %151\l  %153 = select i1 %52, float %152, float %149\l  %154 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %153, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %155 = mul nsw i32 %148, %4\l  %156 = add i32 %155, %16\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %2, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %160 = fsub contract float %154, %159\l  %161 = fmul contract float %160, %160\l  %162 = fadd contract float %147, %161\l  %163 = or i32 %102, 4\l  %164 = sitofp i32 %163 to float\l  %165 = fmul float %48, %164\l  %166 = tail call float @llvm.floor.f32(float %165)\l  %167 = fmul float %58, %166\l  %168 = select i1 %52, float %167, float %164\l  %169 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %168, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %170 = mul nsw i32 %163, %4\l  %171 = add i32 %170, %16\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %2, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %175 = fsub contract float %169, %174\l  %176 = fmul contract float %175, %175\l  %177 = fadd contract float %162, %176\l  %178 = or i32 %102, 5\l  %179 = sitofp i32 %178 to float\l  %180 = fmul float %48, %179\l  %181 = tail call float @llvm.floor.f32(float %180)\l  %182 = fmul float %58, %181\l  %183 = select i1 %52, float %182, float %179\l  %184 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %183, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %185 = mul nsw i32 %178, %4\l  %186 = add i32 %185, %16\l  %187 = zext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %2, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %190 = fsub contract float %184, %189\l  %191 = fmul contract float %190, %190\l  %192 = fadd contract float %177, %191\l  %193 = or i32 %102, 6\l  %194 = sitofp i32 %193 to float\l  %195 = fmul float %48, %194\l  %196 = tail call float @llvm.floor.f32(float %195)\l  %197 = fmul float %58, %196\l  %198 = select i1 %52, float %197, float %194\l  %199 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %198, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %200 = mul nsw i32 %193, %4\l  %201 = add i32 %200, %16\l  %202 = zext i32 %201 to i64\l  %203 = getelementptr inbounds float, float addrspace(1)* %2, i64 %202\l  %204 = load float, float addrspace(1)* %203, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %205 = fsub contract float %199, %204\l  %206 = fmul contract float %205, %205\l  %207 = fadd contract float %192, %206\l  %208 = or i32 %102, 7\l  %209 = sitofp i32 %208 to float\l  %210 = fmul float %48, %209\l  %211 = tail call float @llvm.floor.f32(float %210)\l  %212 = fmul float %58, %211\l  %213 = select i1 %52, float %212, float %209\l  %214 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float\l... %63, float %213, \<8 x i32\> %57, \<4 x i32\> %54, i1 false, i32 0, i32 0)\l  %215 = mul nsw i32 %208, %4\l  %216 = add i32 %215, %16\l  %217 = zext i32 %216 to i64\l  %218 = getelementptr inbounds float, float addrspace(1)* %2, i64 %217\l  %219 = load float, float addrspace(1)* %218, align 4, !tbaa !12,\l... !amdgpu.noclobber !5\l  %220 = fsub contract float %214, %219\l  %221 = fmul contract float %220, %220\l  %222 = fadd contract float %207, %221\l  %223 = add nuw nsw i32 %102, 8\l  %224 = add i32 %103, 8\l  %225 = icmp eq i32 %224, %67\l  br i1 %225, label %68, label %100, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4ee3bf0:s0 -> Node0x4edff80;
	Node0x4ee3bf0:s1 -> Node0x4ee3bf0;
	Node0x4edfa50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%226:\l226:                                              \l  ret void\l}"];
}
