digraph "CFG for '_Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf' function" {
	label="CFG for '_Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf' function";

	Node0x48d53d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 2, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %16, %3\l  %26 = icmp slt i32 %24, %2\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %161\l|{<s0>T|<s1>F}}"];
	Node0x48d53d0:s0 -> Node0x48d8d70;
	Node0x48d53d0:s1 -> Node0x48d8e00;
	Node0x48d8d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%28:\l28:                                               \l  %29 = mul nsw i32 %16, %4\l  %30 = add nsw i32 %24, %29\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %34 = fdiv contract float %33, %6\l  %35 = getelementptr inbounds float, float addrspace(1)* %1, i64 %31\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = fdiv contract float %36, %6\l  %38 = fmul contract float %34, %34\l  %39 = fmul contract float %37, %37\l  %40 = fadd contract float %38, %39\l  %41 = fcmp olt float %40, 0x39F0000000000000\l  %42 = select i1 %41, float 0x41F0000000000000, float 1.000000e+00\l  %43 = fmul float %40, %42\l  %44 = tail call float @llvm.sqrt.f32(float %43)\l  %45 = bitcast float %44 to i32\l  %46 = add nsw i32 %45, -1\l  %47 = bitcast i32 %46 to float\l  %48 = add nsw i32 %45, 1\l  %49 = bitcast i32 %48 to float\l  %50 = tail call i1 @llvm.amdgcn.class.f32(float %43, i32 608)\l  %51 = select i1 %41, float 0x3EF0000000000000, float 1.000000e+00\l  %52 = fneg float %49\l  %53 = tail call float @llvm.fma.f32(float %52, float %44, float %43)\l  %54 = fcmp ogt float %53, 0.000000e+00\l  %55 = fneg float %47\l  %56 = tail call float @llvm.fma.f32(float %55, float %44, float %43)\l  %57 = fcmp ole float %56, 0.000000e+00\l  %58 = select i1 %57, float %47, float %44\l  %59 = select i1 %54, float %49, float %58\l  %60 = fmul float %51, %59\l  %61 = select i1 %50, float %43, float %60\l  %62 = fneg contract float %37\l  %63 = fneg contract float %34\l  %64 = tail call float @llvm.fabs.f32(float %63)\l  %65 = tail call float @llvm.fabs.f32(float %62)\l  %66 = tail call float @llvm.minnum.f32(float %64, float %65)\l  %67 = tail call float @llvm.maxnum.f32(float %64, float %65)\l  %68 = fdiv float %66, %67, !fpmath !11\l  %69 = fmul float %68, %68\l  %70 = tail call float @llvm.fmuladd.f32(float %69, float 0x3F65A54B00000000,\l... float 0xBF8F4B2180000000)\l  %71 = tail call float @llvm.fmuladd.f32(float %69, float %70, float\l... 0x3FA53F67E0000000)\l  %72 = tail call float @llvm.fmuladd.f32(float %69, float %71, float\l... 0xBFB2FA9AE0000000)\l  %73 = tail call float @llvm.fmuladd.f32(float %69, float %72, float\l... 0x3FBB263640000000)\l  %74 = tail call float @llvm.fmuladd.f32(float %69, float %73, float\l... 0xBFC22C1CC0000000)\l  %75 = tail call float @llvm.fmuladd.f32(float %69, float %74, float\l... 0x3FC99717E0000000)\l  %76 = tail call float @llvm.fmuladd.f32(float %69, float %75, float\l... 0xBFD5554C40000000)\l  %77 = fmul float %69, %76\l  %78 = tail call float @llvm.fmuladd.f32(float %68, float %77, float %68)\l  %79 = fsub float 0x3FF921FB60000000, %78\l  %80 = fcmp ogt float %65, %64\l  %81 = select i1 %80, float %79, float %78\l  %82 = fsub float 0x400921FB60000000, %81\l  %83 = fcmp ogt float %34, 0.000000e+00\l  %84 = select i1 %83, float %82, float %81\l  %85 = bitcast float %63 to i32\l  %86 = icmp slt i32 %85, 0\l  %87 = select i1 %86, float 0x400921FB60000000, float 0.000000e+00\l  %88 = fcmp oeq float %37, 0.000000e+00\l  %89 = select i1 %88, float %87, float %84\l  %90 = select i1 %83, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %91 = fcmp oeq float %64, 0x7FF0000000000000\l  %92 = fcmp oeq float %65, 0x7FF0000000000000\l  %93 = and i1 %91, %92\l  %94 = select i1 %93, float %90, float %89\l  %95 = fcmp uno float %34, %37\l  %96 = select i1 %95, float 0x7FF8000000000000, float %94\l  %97 = tail call float @llvm.copysign.f32(float %96, float %62)\l  %98 = fdiv contract float %97, 0x400921FA00000000\l  %99 = fadd contract float %98, 1.000000e+00\l  %100 = fmul contract float %99, 5.000000e-01\l  %101 = fmul contract float %100, 5.400000e+01\l  %102 = tail call float @llvm.floor.f32(float %101)\l  %103 = fptosi float %102 to i32\l  %104 = add nsw i32 %103, 1\l  %105 = icmp eq i32 %104, 55\l  %106 = select i1 %105, i32 1, i32 %104\l  %107 = sitofp i32 %103 to float\l  %108 = fsub contract float %101, %107\l  %109 = fsub contract float 1.000000e+00, %108\l  %110 = sext i32 %103 to i64\l  %111 = getelementptr [55 x float], [55 x float] addrspace(4)*\l... @__const._Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf.colorwheelR,\l... i64 0, i64 %110\l  %112 = load float, float addrspace(4)* %111, align 4, !tbaa !7\l  %113 = fdiv contract float %112, 2.550000e+02\l  %114 = fmul contract float %113, %109\l  %115 = sext i32 %106 to i64\l  %116 = getelementptr [55 x float], [55 x float] addrspace(4)*\l... @__const._Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf.colorwheelR,\l... i64 0, i64 %115\l  %117 = load float, float addrspace(4)* %116, align 4, !tbaa !7\l  %118 = fdiv contract float %117, 2.550000e+02\l  %119 = fmul contract float %118, %108\l  %120 = fadd contract float %119, %114\l  %121 = getelementptr [55 x float], [55 x float] addrspace(4)* bitcast (\<\{\l... [36 x float], [19 x float] \}\> addrspace(4)*\l... @__const._Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf.colorwheelG\l... to [55 x float] addrspace(4)*), i64 0, i64 %110\l  %122 = load float, float addrspace(4)* %121, align 4, !tbaa !7\l  %123 = fdiv contract float %122, 2.550000e+02\l  %124 = fmul contract float %123, %109\l  %125 = getelementptr [55 x float], [55 x float] addrspace(4)* bitcast (\<\{\l... [36 x float], [19 x float] \}\> addrspace(4)*\l... @__const._Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf.colorwheelG\l... to [55 x float] addrspace(4)*), i64 0, i64 %115\l  %126 = load float, float addrspace(4)* %125, align 4, !tbaa !7\l  %127 = fdiv contract float %126, 2.550000e+02\l  %128 = fmul contract float %127, %108\l  %129 = fadd contract float %128, %124\l  %130 = getelementptr [55 x float], [55 x float] addrspace(4)*\l... @__const._Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf.colorwheelB,\l... i64 0, i64 %110\l  %131 = load float, float addrspace(4)* %130, align 4, !tbaa !7\l  %132 = fdiv contract float %131, 2.550000e+02\l  %133 = fmul contract float %132, %109\l  %134 = getelementptr [55 x float], [55 x float] addrspace(4)*\l... @__const._Z18ComputeColorKernelPfS_iiiP15HIP_vector_typeIfLj3EEf.colorwheelB,\l... i64 0, i64 %115\l  %135 = load float, float addrspace(4)* %134, align 4, !tbaa !7\l  %136 = fdiv contract float %135, 2.550000e+02\l  %137 = fmul contract float %136, %108\l  %138 = fadd contract float %137, %133\l  %139 = fcmp contract ugt float %61, 1.000000e+00\l  br i1 %139, label %150, label %140\l|{<s0>T|<s1>F}}"];
	Node0x48d8d70:s0 -> Node0x48e0660;
	Node0x48d8d70:s1 -> Node0x48e06f0;
	Node0x48e06f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%140:\l140:                                              \l  %141 = fsub contract float 1.000000e+00, %120\l  %142 = fmul contract float %61, %141\l  %143 = fsub contract float 1.000000e+00, %142\l  %144 = fsub contract float 1.000000e+00, %129\l  %145 = fmul contract float %61, %144\l  %146 = fsub contract float 1.000000e+00, %145\l  %147 = fsub contract float 1.000000e+00, %138\l  %148 = fmul contract float %61, %147\l  %149 = fsub contract float 1.000000e+00, %148\l  br label %154\l}"];
	Node0x48e06f0 -> Node0x48e0d40;
	Node0x48e0660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%150:\l150:                                              \l  %151 = fmul contract float %120, 7.500000e-01\l  %152 = fmul contract float %129, 7.500000e-01\l  %153 = fmul contract float %138, 7.500000e-01\l  br label %154\l}"];
	Node0x48e0660 -> Node0x48e0d40;
	Node0x48e0d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%154:\l154:                                              \l  %155 = phi float [ %143, %140 ], [ %151, %150 ]\l  %156 = phi float [ %146, %140 ], [ %152, %150 ]\l  %157 = phi float [ %149, %140 ], [ %153, %150 ]\l  %158 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %31, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  store float %155, float addrspace(1)* %158, align 4, !tbaa !12\l  %159 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %31, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  store float %156, float addrspace(1)* %159, align 4, !tbaa !12\l  %160 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %5, i64 %31, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  store float %157, float addrspace(1)* %160, align 4, !tbaa !12\l  br label %161\l}"];
	Node0x48e0d40 -> Node0x48d8e00;
	Node0x48d8e00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%161:\l161:                                              \l  ret void\l}"];
}
