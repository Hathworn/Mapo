digraph "CFG for '_Z25cuda_conv2D_backPropErrorPdPKdS1_mmmmmmmmmm' function" {
	label="CFG for '_Z25cuda_conv2D_backPropErrorPdPKdS1_mmmmmmmmmm' function";

	Node0x64d7a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%13:\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %14, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %22 = add i32 %20, %21\l  %23 = sext i32 %22 to i64\l  %24 = freeze i64 %23\l  %25 = freeze i64 %8\l  %26 = udiv i64 %24, %25\l  %27 = mul i64 %26, %25\l  %28 = sub i64 %24, %27\l  %29 = shl i64 %26, 32\l  %30 = ashr exact i64 %29, 32\l  %31 = freeze i64 %30\l  %32 = freeze i64 %6\l  %33 = udiv i64 %31, %32\l  %34 = mul i64 %33, %32\l  %35 = sub i64 %31, %34\l  %36 = shl i64 %33, 32\l  %37 = ashr exact i64 %36, 32\l  %38 = icmp ult i64 %37, %3\l  br i1 %38, label %39, label %149\l|{<s0>T|<s1>F}}"];
	Node0x64d7a10:s0 -> Node0x64d9450;
	Node0x64d7a10:s1 -> Node0x64db170;
	Node0x64d9450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%39:\l39:                                               \l  %40 = mul i64 %35, %12\l  %41 = sub i64 %40, %11\l  %42 = mul i64 %37, %8\l  %43 = mul i64 %28, %12\l  %44 = sub i64 %43, %11\l  %45 = icmp eq i64 %8, 0\l  br i1 %45, label %149, label %46\l|{<s0>T|<s1>F}}"];
	Node0x64d9450:s0 -> Node0x64db170;
	Node0x64d9450:s1 -> Node0x64db610;
	Node0x64db610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%46:\l46:                                               \l  %47 = mul i64 %37, %6\l  %48 = add i64 %47, %35\l  %49 = mul i64 %48, %7\l  %50 = add i64 %49, %28\l  %51 = icmp eq i64 %4, 0\l  %52 = icmp eq i64 %5, 0\l  %53 = trunc i64 %9 to i32\l  %54 = getelementptr inbounds double, double addrspace(1)* %1, i64 %50\l  %55 = and i64 %5, 1\l  %56 = icmp eq i64 %5, 1\l  %57 = and i64 %5, -2\l  %58 = icmp eq i64 %55, 0\l  br label %59\l}"];
	Node0x64db610 -> Node0x64dbe20;
	Node0x64dbe20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%59:\l59:                                               \l  %60 = phi i64 [ 0, %46 ], [ %66, %65 ]\l  %61 = mul i64 %60, %9\l  br i1 %51, label %65, label %62\l|{<s0>T|<s1>F}}"];
	Node0x64dbe20:s0 -> Node0x64dbf10;
	Node0x64dbe20:s1 -> Node0x64dc0e0;
	Node0x64dc0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%62:\l62:                                               \l  %63 = add i64 %60, %42\l  %64 = mul i64 %63, %4\l  br label %68\l}"];
	Node0x64dc0e0 -> Node0x64dac50;
	Node0x64dbf10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%65:\l65:                                               \l  %66 = add nuw i64 %60, 1\l  %67 = icmp eq i64 %66, %8\l  br i1 %67, label %149, label %59, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x64dbf10:s0 -> Node0x64db170;
	Node0x64dbf10:s1 -> Node0x64dbe20;
	Node0x64dac50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%68:\l68:                                               \l  %69 = phi i64 [ 0, %62 ], [ %102, %101 ]\l  %70 = add i64 %69, %41\l  %71 = trunc i64 %70 to i32\l  br i1 %52, label %101, label %72\l|{<s0>T|<s1>F}}"];
	Node0x64dac50:s0 -> Node0x64dc8c0;
	Node0x64dac50:s1 -> Node0x64dcb00;
	Node0x64dcb00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%72:\l72:                                               \l  %73 = icmp sgt i32 %71, -1\l  %74 = icmp slt i32 %71, %53\l  %75 = and i64 %70, 4294967295\l  %76 = add i64 %75, %61\l  %77 = mul i64 %76, %10\l  %78 = add i64 %69, %64\l  %79 = mul i64 %78, %5\l  br i1 %56, label %80, label %104\l|{<s0>T|<s1>F}}"];
	Node0x64dcb00:s0 -> Node0x64dd060;
	Node0x64dcb00:s1 -> Node0x64dd0b0;
	Node0x64dd060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%80:\l80:                                               \l  %81 = phi i64 [ 0, %72 ], [ %146, %145 ]\l  br i1 %58, label %101, label %82\l|{<s0>T|<s1>F}}"];
	Node0x64dd060:s0 -> Node0x64dc8c0;
	Node0x64dd060:s1 -> Node0x64dd360;
	Node0x64dd360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%82:\l82:                                               \l  %83 = add i64 %81, %44\l  %84 = trunc i64 %83 to i32\l  br i1 %73, label %85, label %101\l|{<s0>T|<s1>F}}"];
	Node0x64dd360:s0 -> Node0x64dd5a0;
	Node0x64dd360:s1 -> Node0x64dc8c0;
	Node0x64dd5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%85:\l85:                                               \l  %86 = icmp sgt i32 %84, -1\l  %87 = select i1 %74, i1 %86, i1 false\l  %88 = icmp slt i32 %84, %53\l  %89 = select i1 %87, i1 %88, i1 false\l  br i1 %89, label %90, label %101\l|{<s0>T|<s1>F}}"];
	Node0x64dd5a0:s0 -> Node0x64dd950;
	Node0x64dd5a0:s1 -> Node0x64dc8c0;
	Node0x64dd950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%90:\l90:                                               \l  %91 = and i64 %83, 4294967295\l  %92 = add i64 %91, %77\l  %93 = add i64 %81, %79\l  %94 = getelementptr inbounds double, double addrspace(1)* %2, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !9\l  %96 = load double, double addrspace(1)* %54, align 8, !tbaa !9\l  %97 = fmul contract double %95, %96\l  %98 = getelementptr inbounds double, double addrspace(1)* %0, i64 %92\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !9\l  %100 = fadd contract double %99, %97\l  store double %100, double addrspace(1)* %98, align 8, !tbaa !9\l  br label %101\l}"];
	Node0x64dd950 -> Node0x64dc8c0;
	Node0x64dc8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%101:\l101:                                              \l  %102 = add nuw i64 %69, 1\l  %103 = icmp eq i64 %102, %4\l  br i1 %103, label %65, label %68, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x64dc8c0:s0 -> Node0x64dbf10;
	Node0x64dc8c0:s1 -> Node0x64dac50;
	Node0x64dd0b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%104:\l104:                                              \l  %105 = phi i64 [ %146, %145 ], [ 0, %72 ]\l  %106 = phi i64 [ %147, %145 ], [ 0, %72 ]\l  %107 = add i64 %105, %44\l  %108 = trunc i64 %107 to i32\l  br i1 %73, label %109, label %125\l|{<s0>T|<s1>F}}"];
	Node0x64dd0b0:s0 -> Node0x64dece0;
	Node0x64dd0b0:s1 -> Node0x64ded70;
	Node0x64dece0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%109:\l109:                                              \l  %110 = icmp sgt i32 %108, -1\l  %111 = select i1 %74, i1 %110, i1 false\l  %112 = icmp slt i32 %108, %53\l  %113 = select i1 %111, i1 %112, i1 false\l  br i1 %113, label %114, label %125\l|{<s0>T|<s1>F}}"];
	Node0x64dece0:s0 -> Node0x64df130;
	Node0x64dece0:s1 -> Node0x64ded70;
	Node0x64df130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%114:\l114:                                              \l  %115 = and i64 %107, 4294967295\l  %116 = add i64 %115, %77\l  %117 = add i64 %105, %79\l  %118 = getelementptr inbounds double, double addrspace(1)* %2, i64 %117\l  %119 = load double, double addrspace(1)* %118, align 8, !tbaa !9\l  %120 = load double, double addrspace(1)* %54, align 8, !tbaa !9\l  %121 = fmul contract double %119, %120\l  %122 = getelementptr inbounds double, double addrspace(1)* %0, i64 %116\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !9\l  %124 = fadd contract double %123, %121\l  store double %124, double addrspace(1)* %122, align 8, !tbaa !9\l  br label %125\l}"];
	Node0x64df130 -> Node0x64ded70;
	Node0x64ded70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%125:\l125:                                              \l  %126 = or i64 %105, 1\l  %127 = add i64 %126, %44\l  %128 = trunc i64 %127 to i32\l  br i1 %73, label %129, label %145\l|{<s0>T|<s1>F}}"];
	Node0x64ded70:s0 -> Node0x64dc340;
	Node0x64ded70:s1 -> Node0x64dd220;
	Node0x64dc340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%129:\l129:                                              \l  %130 = icmp sgt i32 %128, -1\l  %131 = select i1 %74, i1 %130, i1 false\l  %132 = icmp slt i32 %128, %53\l  %133 = select i1 %131, i1 %132, i1 false\l  br i1 %133, label %134, label %145\l|{<s0>T|<s1>F}}"];
	Node0x64dc340:s0 -> Node0x64dc6c0;
	Node0x64dc340:s1 -> Node0x64dd220;
	Node0x64dc6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%134:\l134:                                              \l  %135 = and i64 %127, 4294967295\l  %136 = add i64 %135, %77\l  %137 = add i64 %126, %79\l  %138 = getelementptr inbounds double, double addrspace(1)* %2, i64 %137\l  %139 = load double, double addrspace(1)* %138, align 8, !tbaa !9\l  %140 = load double, double addrspace(1)* %54, align 8, !tbaa !9\l  %141 = fmul contract double %139, %140\l  %142 = getelementptr inbounds double, double addrspace(1)* %0, i64 %136\l  %143 = load double, double addrspace(1)* %142, align 8, !tbaa !9\l  %144 = fadd contract double %143, %141\l  store double %144, double addrspace(1)* %142, align 8, !tbaa !9\l  br label %145\l}"];
	Node0x64dc6c0 -> Node0x64dd220;
	Node0x64dd220 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%145:\l145:                                              \l  %146 = add nuw i64 %105, 2\l  %147 = add i64 %106, 2\l  %148 = icmp eq i64 %147, %57\l  br i1 %148, label %80, label %104, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x64dd220:s0 -> Node0x64dd060;
	Node0x64dd220:s1 -> Node0x64dd0b0;
	Node0x64db170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%149:\l149:                                              \l  ret void\l}"];
}
