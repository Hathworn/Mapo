digraph "CFG for '_Z22resampleFeaturesKernelPdS_S_S_S_S_S_S_iS_S_S_S_S_S_' function" {
	label="CFG for '_Z22resampleFeaturesKernelPdS_S_S_S_S_S_S_iS_S_S_S_S_S_' function";

	Node0x64446b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%15:\l  %16 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %17 = getelementptr i8, i8 addrspace(4)* %16, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = getelementptr inbounds i8, i8 addrspace(4)* %16, i64 12\l  %22 = bitcast i8 addrspace(4)* %21 to i32 addrspace(4)*\l  %23 = load i32, i32 addrspace(4)* %22, align 4, !tbaa !6\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %25 = icmp slt i32 %24, %8\l  br i1 %25, label %26, label %36\l|{<s0>T|<s1>F}}"];
	Node0x64446b0:s0 -> Node0x64470d0;
	Node0x64446b0:s1 -> Node0x6447160;
	Node0x64470d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%26:\l26:                                               \l  %27 = uitofp i16 %19 to double\l  %28 = fdiv contract double 1.000000e+00, %27\l  %29 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %30 = uitofp i32 %29 to double\l  %31 = fmul contract double %28, %30\l  %32 = udiv i32 %23, %20\l  %33 = mul i32 %32, %20\l  %34 = icmp ugt i32 %23, %33\l  %35 = zext i1 %34 to i32\l  br label %37\l}"];
	Node0x64470d0 -> Node0x6448560;
	Node0x6447160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%36:\l36:                                               \l  ret void\l}"];
	Node0x6448560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%37:\l37:                                               \l  %38 = phi i32 [ %24, %26 ], [ %82, %59 ]\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %7, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !16\l  %42 = fadd contract double %31, %41\l  %43 = mul i32 %38, %20\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds double, double addrspace(1)* %6, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !16\l  %47 = add nsw i32 %43, %20\l  br label %48\l}"];
	Node0x6448560 -> Node0x64493e0;
	Node0x64493e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  %49 = phi double [ %46, %37 ], [ %57, %52 ]\l  %50 = phi i32 [ %43, %37 ], [ %53, %52 ]\l  %51 = fcmp contract ogt double %42, %49\l  br i1 %51, label %52, label %59\l|{<s0>T|<s1>F}}"];
	Node0x64493e0:s0 -> Node0x64494e0;
	Node0x64493e0:s1 -> Node0x64486b0;
	Node0x64494e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%52:\l52:                                               \l  %53 = add nsw i32 %50, 1\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %6, i64 %54\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !16\l  %57 = fadd contract double %49, %56\l  %58 = icmp eq i32 %53, %47\l  br i1 %58, label %59, label %48, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x64494e0:s0 -> Node0x64486b0;
	Node0x64494e0:s1 -> Node0x64493e0;
	Node0x64486b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%59:\l59:                                               \l  %60 = add i32 %43, %29\l  %61 = sext i32 %50 to i64\l  %62 = getelementptr inbounds double, double addrspace(1)* %0, i64 %61\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !16\l  %64 = sext i32 %60 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %9, i64 %64\l  store double %63, double addrspace(1)* %65, align 8, !tbaa !16\l  %66 = getelementptr inbounds double, double addrspace(1)* %1, i64 %61\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !16\l  %68 = getelementptr inbounds double, double addrspace(1)* %10, i64 %64\l  store double %67, double addrspace(1)* %68, align 8, !tbaa !16\l  %69 = getelementptr inbounds double, double addrspace(1)* %2, i64 %61\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !16\l  %71 = getelementptr inbounds double, double addrspace(1)* %11, i64 %64\l  store double %70, double addrspace(1)* %71, align 8, !tbaa !16\l  %72 = getelementptr inbounds double, double addrspace(1)* %3, i64 %61\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !16\l  %74 = getelementptr inbounds double, double addrspace(1)* %12, i64 %64\l  store double %73, double addrspace(1)* %74, align 8, !tbaa !16\l  %75 = getelementptr inbounds double, double addrspace(1)* %4, i64 %61\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !16\l  %77 = getelementptr inbounds double, double addrspace(1)* %13, i64 %64\l  store double %76, double addrspace(1)* %77, align 8, !tbaa !16\l  %78 = getelementptr inbounds double, double addrspace(1)* %5, i64 %61\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !16\l  %80 = getelementptr inbounds double, double addrspace(1)* %14, i64 %64\l  store double %79, double addrspace(1)* %80, align 8, !tbaa !16\l  %81 = add i32 %32, %38\l  %82 = add i32 %81, %35\l  %83 = icmp slt i32 %82, %8\l  br i1 %83, label %37, label %36, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x64486b0:s0 -> Node0x6448560;
	Node0x64486b0:s1 -> Node0x6447160;
}
