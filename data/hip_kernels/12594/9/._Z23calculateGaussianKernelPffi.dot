digraph "CFG for '_Z23calculateGaussianKernelPffi' function" {
	label="CFG for '_Z23calculateGaussianKernelPffi' function";

	Node0x5a94640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = sub i32 %4, %2\l  %6 = fpext float %1 to double\l  %7 = fmul contract double %6, 0x401921FB54442D18\l  %8 = fptrunc double %7 to float\l  %9 = fcmp olt float %8, 0x39F0000000000000\l  %10 = select i1 %9, float 0x41F0000000000000, float 1.000000e+00\l  %11 = fmul float %10, %8\l  %12 = tail call float @llvm.sqrt.f32(float %11)\l  %13 = bitcast float %12 to i32\l  %14 = add nsw i32 %13, -1\l  %15 = bitcast i32 %14 to float\l  %16 = add nsw i32 %13, 1\l  %17 = bitcast i32 %16 to float\l  %18 = tail call i1 @llvm.amdgcn.class.f32(float %11, i32 608)\l  %19 = select i1 %9, float 0x3EF0000000000000, float 1.000000e+00\l  %20 = fneg float %17\l  %21 = tail call float @llvm.fma.f32(float %20, float %12, float %11)\l  %22 = fcmp ogt float %21, 0.000000e+00\l  %23 = fneg float %15\l  %24 = tail call float @llvm.fma.f32(float %23, float %12, float %11)\l  %25 = fcmp ole float %24, 0.000000e+00\l  %26 = select i1 %25, float %15, float %12\l  %27 = select i1 %22, float %17, float %26\l  %28 = fmul float %19, %27\l  %29 = select i1 %18, float %11, float %28\l  %30 = fdiv contract float 1.000000e+00, %29\l  %31 = mul nsw i32 %5, %5\l  %32 = sitofp i32 %31 to float\l  %33 = fmul contract float %1, 2.000000e+00\l  %34 = fmul contract float %33, %1\l  %35 = fneg contract float %32\l  %36 = fdiv contract float %35, %34\l  %37 = fmul float %36, 0x3FF7154760000000\l  %38 = tail call float @llvm.rint.f32(float %37)\l  %39 = fcmp ogt float %36, 0x40562E4300000000\l  %40 = fcmp olt float %36, 0xC059D1DA00000000\l  %41 = fneg float %37\l  %42 = tail call float @llvm.fma.f32(float %36, float 0x3FF7154760000000,\l... float %41)\l  %43 = tail call float @llvm.fma.f32(float %36, float 0x3E54AE0BE0000000,\l... float %42)\l  %44 = fsub float %37, %38\l  %45 = fadd float %43, %44\l  %46 = tail call float @llvm.exp2.f32(float %45)\l  %47 = fptosi float %38 to i32\l  %48 = tail call float @llvm.amdgcn.ldexp.f32(float %46, i32 %47)\l  %49 = select i1 %40, float 0.000000e+00, float %48\l  %50 = select i1 %39, float 0x7FF0000000000000, float %49\l  %51 = fmul contract float %50, %30\l  %52 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %4\l  store float %51, float addrspace(3)* %52, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %53 = icmp eq i32 %4, 0\l  br i1 %53, label %54, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5a94640:s0 -> Node0x5a995a0;
	Node0x5a94640:s1 -> Node0x5a99630;
	Node0x5a995a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%54:\l54:                                               \l  %55 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %56 = getelementptr i8, i8 addrspace(4)* %55, i64 4\l  %57 = bitcast i8 addrspace(4)* %56 to i16 addrspace(4)*\l  %58 = load i16, i16 addrspace(4)* %57, align 4, !range !9, !invariant.load\l... !10\l  %59 = zext i16 %58 to i32\l  %60 = and i32 %59, 7\l  %61 = icmp ult i16 %58, 8\l  br i1 %61, label %102, label %62\l|{<s0>T|<s1>F}}"];
	Node0x5a995a0:s0 -> Node0x5a99fc0;
	Node0x5a995a0:s1 -> Node0x5a9a050;
	Node0x5a9a050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%62:\l62:                                               \l  %63 = and i32 %59, 2040\l  br label %64\l}"];
	Node0x5a9a050 -> Node0x5a9a250;
	Node0x5a9a250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%64:\l64:                                               \l  %65 = phi i32 [ 0, %62 ], [ %99, %64 ]\l  %66 = phi float [ 0.000000e+00, %62 ], [ %98, %64 ]\l  %67 = phi i32 [ 0, %62 ], [ %100, %64 ]\l  %68 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %65\l  %69 = load float, float addrspace(3)* %68, align 4, !tbaa !5\l  %70 = fadd contract float %69, %66\l  %71 = or i32 %65, 1\l  %72 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %71\l  %73 = load float, float addrspace(3)* %72, align 4, !tbaa !5\l  %74 = fadd contract float %73, %70\l  %75 = or i32 %65, 2\l  %76 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %75\l  %77 = load float, float addrspace(3)* %76, align 4, !tbaa !5\l  %78 = fadd contract float %77, %74\l  %79 = or i32 %65, 3\l  %80 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %79\l  %81 = load float, float addrspace(3)* %80, align 4, !tbaa !5\l  %82 = fadd contract float %81, %78\l  %83 = or i32 %65, 4\l  %84 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %83\l  %85 = load float, float addrspace(3)* %84, align 4, !tbaa !5\l  %86 = fadd contract float %85, %82\l  %87 = or i32 %65, 5\l  %88 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %87\l  %89 = load float, float addrspace(3)* %88, align 4, !tbaa !5\l  %90 = fadd contract float %89, %86\l  %91 = or i32 %65, 6\l  %92 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %91\l  %93 = load float, float addrspace(3)* %92, align 4, !tbaa !5\l  %94 = fadd contract float %93, %90\l  %95 = or i32 %65, 7\l  %96 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %95\l  %97 = load float, float addrspace(3)* %96, align 4, !tbaa !5\l  %98 = fadd contract float %97, %94\l  %99 = add nuw nsw i32 %65, 8\l  %100 = add i32 %67, 8\l  %101 = icmp eq i32 %100, %63\l  br i1 %101, label %102, label %64, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5a9a250:s0 -> Node0x5a99fc0;
	Node0x5a9a250:s1 -> Node0x5a9a250;
	Node0x5a99fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%102:\l102:                                              \l  %103 = phi float [ undef, %54 ], [ %98, %64 ]\l  %104 = phi i32 [ 0, %54 ], [ %99, %64 ]\l  %105 = phi float [ 0.000000e+00, %54 ], [ %98, %64 ]\l  %106 = icmp eq i32 %60, 0\l  br i1 %106, label %117, label %107\l|{<s0>T|<s1>F}}"];
	Node0x5a99fc0:s0 -> Node0x5a9c6e0;
	Node0x5a99fc0:s1 -> Node0x5a9c730;
	Node0x5a9c730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%107:\l107:                                              \l  %108 = phi i32 [ %114, %107 ], [ %104, %102 ]\l  %109 = phi float [ %113, %107 ], [ %105, %102 ]\l  %110 = phi i32 [ %115, %107 ], [ 0, %102 ]\l  %111 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_gaussKernel, i32 0, i32 %108\l  %112 = load float, float addrspace(3)* %111, align 4, !tbaa !5\l  %113 = fadd contract float %112, %109\l  %114 = add nuw nsw i32 %108, 1\l  %115 = add i32 %110, 1\l  %116 = icmp eq i32 %115, %60\l  br i1 %116, label %117, label %107, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5a9c730:s0 -> Node0x5a9c6e0;
	Node0x5a9c730:s1 -> Node0x5a9c730;
	Node0x5a9c6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%117:\l117:                                              \l  %118 = phi float [ %103, %102 ], [ %113, %107 ]\l  store float %118, float addrspace(3)*\l... @_ZZ23calculateGaussianKernelPffiE3sum, align 4, !tbaa !5\l  br label %119\l}"];
	Node0x5a9c6e0 -> Node0x5a99630;
	Node0x5a99630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%119:\l119:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %120 = load float, float addrspace(3)* %52, align 4, !tbaa !5\l  %121 = load float, float addrspace(3)*\l... @_ZZ23calculateGaussianKernelPffiE3sum, align 4, !tbaa !5\l  %122 = fdiv contract float %120, %121\l  %123 = zext i32 %4 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  store float %122, float addrspace(1)* %124, align 4, !tbaa !5\l  ret void\l}"];
}
