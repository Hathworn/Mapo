digraph "CFG for '_Z18convn_valid_kernelPfS_S_iiii' function" {
	label="CFG for '_Z18convn_valid_kernelPfS_S_iiii' function";

	Node0x454eef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = sub nsw i32 %3, %5\l  %26 = add nsw i32 %25, 1\l  %27 = icmp sgt i32 %16, %25\l  %28 = sub nsw i32 %4, %6\l  %29 = icmp sgt i32 %24, %28\l  %30 = select i1 %27, i1 true, i1 %29\l  br i1 %30, label %176, label %31\l|{<s0>T|<s1>F}}"];
	Node0x454eef0:s0 -> Node0x4552b60;
	Node0x454eef0:s1 -> Node0x4552bf0;
	Node0x4552bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%31:\l31:                                               \l  %32 = add nsw i32 %5, -1\l  %33 = add nsw i32 %32, %16\l  %34 = add nsw i32 %6, -1\l  %35 = add nsw i32 %34, %24\l  %36 = icmp sgt i32 %6, 0\l  br i1 %36, label %37, label %51\l|{<s0>T|<s1>F}}"];
	Node0x4552bf0:s0 -> Node0x4550e10;
	Node0x4552bf0:s1 -> Node0x45531b0;
	Node0x4550e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%37:\l37:                                               \l  %38 = icmp sgt i32 %5, 0\l  %39 = and i32 %5, 7\l  %40 = icmp ult i32 %5, 8\l  %41 = and i32 %5, -8\l  %42 = icmp eq i32 %39, 0\l  br label %43\l}"];
	Node0x4550e10 -> Node0x4553650;
	Node0x4553650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %37 ], [ %80, %78 ]\l  %45 = phi float [ 0.000000e+00, %37 ], [ %79, %78 ]\l  br i1 %38, label %46, label %78\l|{<s0>T|<s1>F}}"];
	Node0x4553650:s0 -> Node0x45543f0;
	Node0x4553650:s1 -> Node0x4553740;
	Node0x45543f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%46:\l46:                                               \l  %47 = mul nsw i32 %44, %5\l  %48 = sub i32 %35, %44\l  %49 = mul nsw i32 %48, %3\l  %50 = add i32 %33, %49\l  br i1 %40, label %57, label %82\l|{<s0>T|<s1>F}}"];
	Node0x45543f0:s0 -> Node0x4554770;
	Node0x45543f0:s1 -> Node0x45547c0;
	Node0x45531b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %31 ], [ %79, %78 ]\l  %53 = mul nsw i32 %24, %26\l  %54 = add nsw i32 %53, %16\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  store float %52, float addrspace(1)* %56, align 4, !tbaa !7\l  br label %176\l}"];
	Node0x45531b0 -> Node0x4552b60;
	Node0x4554770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%57:\l57:                                               \l  %58 = phi float [ undef, %46 ], [ %172, %82 ]\l  %59 = phi i32 [ 0, %46 ], [ %173, %82 ]\l  %60 = phi float [ %45, %46 ], [ %172, %82 ]\l  br i1 %42, label %78, label %61\l|{<s0>T|<s1>F}}"];
	Node0x4554770:s0 -> Node0x4553740;
	Node0x4554770:s1 -> Node0x45554a0;
	Node0x45554a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = phi i32 [ %75, %61 ], [ %59, %57 ]\l  %63 = phi float [ %74, %61 ], [ %60, %57 ]\l  %64 = phi i32 [ %76, %61 ], [ 0, %57 ]\l  %65 = add nsw i32 %62, %47\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %2, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = sub i32 %50, %62\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = fmul contract float %68, %72\l  %74 = fadd contract float %63, %73\l  %75 = add nuw nsw i32 %62, 1\l  %76 = add i32 %64, 1\l  %77 = icmp eq i32 %76, %39\l  br i1 %77, label %78, label %61, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x45554a0:s0 -> Node0x4553740;
	Node0x45554a0:s1 -> Node0x45554a0;
	Node0x4553740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%78:\l78:                                               \l  %79 = phi float [ %45, %43 ], [ %58, %57 ], [ %74, %61 ]\l  %80 = add nuw nsw i32 %44, 1\l  %81 = icmp eq i32 %80, %6\l  br i1 %81, label %51, label %43, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4553740:s0 -> Node0x45531b0;
	Node0x4553740:s1 -> Node0x4553650;
	Node0x45547c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%82:\l82:                                               \l  %83 = phi i32 [ %173, %82 ], [ 0, %46 ]\l  %84 = phi float [ %172, %82 ], [ %45, %46 ]\l  %85 = phi i32 [ %174, %82 ], [ 0, %46 ]\l  %86 = add nsw i32 %83, %47\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %2, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = sub i32 %50, %83\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %89, %93\l  %95 = fadd contract float %84, %94\l  %96 = or i32 %83, 1\l  %97 = add nsw i32 %96, %47\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = sub i32 %50, %96\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fmul contract float %100, %104\l  %106 = fadd contract float %95, %105\l  %107 = or i32 %83, 2\l  %108 = add nsw i32 %107, %47\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %2, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = sub i32 %50, %107\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %111, %115\l  %117 = fadd contract float %106, %116\l  %118 = or i32 %83, 3\l  %119 = add nsw i32 %118, %47\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = sub i32 %50, %118\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fmul contract float %122, %126\l  %128 = fadd contract float %117, %127\l  %129 = or i32 %83, 4\l  %130 = add nsw i32 %129, %47\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %2, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = sub i32 %50, %129\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = fmul contract float %133, %137\l  %139 = fadd contract float %128, %138\l  %140 = or i32 %83, 5\l  %141 = add nsw i32 %140, %47\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %2, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = sub i32 %50, %140\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %1, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = fmul contract float %144, %148\l  %150 = fadd contract float %139, %149\l  %151 = or i32 %83, 6\l  %152 = add nsw i32 %151, %47\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %2, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = sub i32 %50, %151\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %1, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %160 = fmul contract float %155, %159\l  %161 = fadd contract float %150, %160\l  %162 = or i32 %83, 7\l  %163 = add nsw i32 %162, %47\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %2, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %167 = sub i32 %50, %162\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %1, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %171 = fmul contract float %166, %170\l  %172 = fadd contract float %161, %171\l  %173 = add nuw nsw i32 %83, 8\l  %174 = add i32 %85, 8\l  %175 = icmp eq i32 %174, %41\l  br i1 %175, label %57, label %82, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x45547c0:s0 -> Node0x4554770;
	Node0x45547c0:s1 -> Node0x45547c0;
	Node0x4552b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%176:\l176:                                              \l  ret void\l}"];
}
