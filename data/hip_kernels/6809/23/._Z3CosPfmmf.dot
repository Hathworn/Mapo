digraph "CFG for '_Z3CosPfmmf' function" {
	label="CFG for '_Z3CosPfmmf' function";

	Node0x500f020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = mul i32 %5, %10\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %16 = add i32 %14, %15\l  %17 = sext i32 %16 to i64\l  %18 = icmp ult i64 %17, %2\l  br i1 %18, label %19, label %28\l|{<s0>T|<s1>F}}"];
	Node0x500f020:s0 -> Node0x5011340;
	Node0x500f020:s1 -> Node0x50113d0;
	Node0x5011340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%19:\l19:                                               \l  %20 = add i64 %1, -1\l  %21 = mul i64 %20, %2\l  %22 = udiv i32 %13, %10\l  %23 = mul i32 %22, %10\l  %24 = icmp ugt i32 %13, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %10\l  br label %29\l}"];
	Node0x5011340 -> Node0x5011970;
	Node0x50113d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%28:\l28:                                               \l  ret void\l}"];
	Node0x5011970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i64 [ %17, %19 ], [ %175, %151 ]\l  %31 = trunc i64 %30 to i32\l  %32 = add i64 %30, %21\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %35 = fmul contract float %34, %3\l  %36 = tail call float @llvm.fabs.f32(float %35)\l  %37 = fcmp olt float %36, 1.310720e+05\l  br i1 %37, label %38, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5011970:s0 -> Node0x5012d60;
	Node0x5011970:s1 -> Node0x5012df0;
	Node0x5012d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%38:\l38:                                               \l  %39 = fmul float %36, 0x3FE45F3060000000\l  %40 = tail call float @llvm.rint.f32(float %39)\l  %41 = tail call float @llvm.fma.f32(float %40, float 0xBFF921FB40000000,\l... float %36)\l  %42 = tail call float @llvm.fma.f32(float %40, float 0xBE74442D00000000,\l... float %41)\l  %43 = tail call float @llvm.fma.f32(float %40, float 0xBCF8469880000000,\l... float %42)\l  %44 = fptosi float %40 to i32\l  br label %151\l}"];
	Node0x5012d60 -> Node0x5011ab0;
	Node0x5012df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%45:\l45:                                               \l  %46 = bitcast float %36 to i32\l  %47 = lshr i32 %46, 23\l  %48 = and i32 %46, 8388607\l  %49 = or i32 %48, 8388608\l  %50 = zext i32 %49 to i64\l  %51 = mul nuw nsw i64 %50, 4266746795\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %50, 1011060801\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = mul nuw nsw i64 %50, 3680671129\l  %59 = add nuw nsw i64 %57, %58\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = mul nuw nsw i64 %50, 4113882560\l  %63 = add nuw nsw i64 %61, %62\l  %64 = trunc i64 %63 to i32\l  %65 = lshr i64 %63, 32\l  %66 = mul nuw nsw i64 %50, 4230436817\l  %67 = add nuw nsw i64 %65, %66\l  %68 = trunc i64 %67 to i32\l  %69 = lshr i64 %67, 32\l  %70 = mul nuw nsw i64 %50, 1313084713\l  %71 = add nuw nsw i64 %69, %70\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = mul nuw nsw i64 %50, 2734261102\l  %75 = add nuw nsw i64 %73, %74\l  %76 = trunc i64 %75 to i32\l  %77 = lshr i64 %75, 32\l  %78 = trunc i64 %77 to i32\l  %79 = add nsw i32 %47, -120\l  %80 = icmp ugt i32 %79, 63\l  %81 = select i1 %80, i32 %72, i32 %78\l  %82 = select i1 %80, i32 %68, i32 %76\l  %83 = select i1 %80, i32 %64, i32 %72\l  %84 = select i1 %80, i32 %60, i32 %68\l  %85 = select i1 %80, i32 %56, i32 %64\l  %86 = select i1 %80, i32 %52, i32 %60\l  %87 = select i1 %80, i32 -64, i32 0\l  %88 = add nsw i32 %87, %79\l  %89 = icmp ugt i32 %88, 31\l  %90 = select i1 %89, i32 %82, i32 %81\l  %91 = select i1 %89, i32 %83, i32 %82\l  %92 = select i1 %89, i32 %84, i32 %83\l  %93 = select i1 %89, i32 %85, i32 %84\l  %94 = select i1 %89, i32 %86, i32 %85\l  %95 = select i1 %89, i32 -32, i32 0\l  %96 = add nsw i32 %95, %88\l  %97 = icmp ugt i32 %96, 31\l  %98 = select i1 %97, i32 %91, i32 %90\l  %99 = select i1 %97, i32 %92, i32 %91\l  %100 = select i1 %97, i32 %93, i32 %92\l  %101 = select i1 %97, i32 %94, i32 %93\l  %102 = select i1 %97, i32 -32, i32 0\l  %103 = add nsw i32 %102, %96\l  %104 = icmp eq i32 %103, 0\l  %105 = sub nsw i32 32, %103\l  %106 = tail call i32 @llvm.fshr.i32(i32 %98, i32 %99, i32 %105)\l  %107 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %105)\l  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %105)\l  %109 = select i1 %104, i32 %98, i32 %106\l  %110 = select i1 %104, i32 %99, i32 %107\l  %111 = select i1 %104, i32 %100, i32 %108\l  %112 = lshr i32 %109, 29\l  %113 = tail call i32 @llvm.fshl.i32(i32 %109, i32 %110, i32 2)\l  %114 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %111, i32 2)\l  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %101, i32 2)\l  %116 = and i32 %112, 1\l  %117 = sub nsw i32 0, %116\l  %118 = shl i32 %112, 31\l  %119 = xor i32 %113, %117\l  %120 = xor i32 %114, %117\l  %121 = xor i32 %115, %117\l  %122 = tail call i32 @llvm.ctlz.i32(i32 %119, i1 false), !range !20\l  %123 = sub nsw i32 31, %122\l  %124 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %120, i32 %123)\l  %125 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %123)\l  %126 = shl nuw nsw i32 %122, 23\l  %127 = sub nuw nsw i32 1056964608, %126\l  %128 = lshr i32 %124, 9\l  %129 = or i32 %128, %127\l  %130 = or i32 %129, %118\l  %131 = bitcast i32 %130 to float\l  %132 = tail call i32 @llvm.fshl.i32(i32 %124, i32 %125, i32 23)\l  %133 = tail call i32 @llvm.ctlz.i32(i32 %132, i1 false), !range !20\l  %134 = fmul float %131, 0x3FF921FB40000000\l  %135 = add nuw nsw i32 %133, %122\l  %136 = shl nuw nsw i32 %135, 23\l  %137 = sub nuw nsw i32 855638016, %136\l  %138 = sub nsw i32 31, %133\l  %139 = tail call i32 @llvm.fshr.i32(i32 %132, i32 %125, i32 %138)\l  %140 = lshr i32 %139, 9\l  %141 = or i32 %137, %140\l  %142 = or i32 %141, %118\l  %143 = bitcast i32 %142 to float\l  %144 = fneg float %134\l  %145 = tail call float @llvm.fma.f32(float %131, float 0x3FF921FB40000000,\l... float %144)\l  %146 = tail call float @llvm.fma.f32(float %131, float 0x3E74442D00000000,\l... float %145)\l  %147 = tail call float @llvm.fma.f32(float %143, float 0x3FF921FB40000000,\l... float %146)\l  %148 = fadd float %134, %147\l  %149 = lshr i32 %109, 30\l  %150 = add nuw nsw i32 %116, %149\l  br label %151\l}"];
	Node0x5012df0 -> Node0x5011ab0;
	Node0x5011ab0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%151:\l151:                                              \l  %152 = phi float [ %43, %38 ], [ %148, %45 ]\l  %153 = phi i32 [ %44, %38 ], [ %150, %45 ]\l  %154 = fmul float %152, %152\l  %155 = tail call float @llvm.fmuladd.f32(float %154, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %156 = tail call float @llvm.fmuladd.f32(float %154, float %155, float\l... 0xBFC55553A0000000)\l  %157 = fmul float %154, %156\l  %158 = tail call float @llvm.fmuladd.f32(float %152, float %157, float %152)\l  %159 = tail call float @llvm.fmuladd.f32(float %154, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %160 = tail call float @llvm.fmuladd.f32(float %154, float %159, float\l... 0x3FA5557EE0000000)\l  %161 = tail call float @llvm.fmuladd.f32(float %154, float %160, float\l... 0xBFE0000080000000)\l  %162 = tail call float @llvm.fmuladd.f32(float %154, float %161, float\l... 1.000000e+00)\l  %163 = fneg float %158\l  %164 = and i32 %153, 1\l  %165 = icmp eq i32 %164, 0\l  %166 = select i1 %165, float %162, float %163\l  %167 = bitcast float %166 to i32\l  %168 = shl i32 %153, 30\l  %169 = and i32 %168, -2147483648\l  %170 = xor i32 %169, %167\l  %171 = bitcast i32 %170 to float\l  %172 = tail call i1 @llvm.amdgcn.class.f32(float %36, i32 504)\l  %173 = select i1 %172, float %171, float 0x7FF8000000000000\l  store float %173, float addrspace(1)* %33, align 4, !tbaa !16\l  %174 = add i32 %27, %31\l  %175 = sext i32 %174 to i64\l  %176 = icmp ult i64 %175, %2\l  br i1 %176, label %29, label %28, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5011ab0:s0 -> Node0x5011970;
	Node0x5011ab0:s1 -> Node0x50113d0;
}
