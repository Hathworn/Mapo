digraph "CFG for '_Z2OrPbmm' function" {
	label="CFG for '_Z2OrPbmm' function";

	Node0x4ec15a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = mul i32 %4, %9\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %15 = add i32 %13, %14\l  %16 = sext i32 %15 to i64\l  %17 = icmp ult i64 %16, %2\l  br i1 %17, label %18, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4ec15a0:s0 -> Node0x4ec3890;
	Node0x4ec15a0:s1 -> Node0x4ec3920;
	Node0x4ec3890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%18:\l18:                                               \l  %19 = add i64 %1, -1\l  %20 = mul i64 %19, %2\l  %21 = add i64 %1, -2\l  %22 = mul i64 %21, %2\l  %23 = udiv i32 %12, %9\l  %24 = mul i32 %23, %9\l  %25 = icmp ugt i32 %12, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %9\l  br label %30\l}"];
	Node0x4ec3890 -> Node0x4ec4010;
	Node0x4ec3920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%29:\l29:                                               \l  ret void\l}"];
	Node0x4ec4010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%30:\l30:                                               \l  %31 = phi i64 [ %16, %18 ], [ %47, %42 ]\l  %32 = trunc i64 %31 to i32\l  %33 = add i64 %31, %20\l  %34 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %33\l  %35 = load i8, i8 addrspace(1)* %34, align 1, !tbaa !16, !range !20\l  %36 = icmp eq i8 %35, 0\l  %37 = add i64 %31, %22\l  br i1 %36, label %38, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4ec4010:s0 -> Node0x4ec4980;
	Node0x4ec4010:s1 -> Node0x4ec4150;
	Node0x4ec4980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%38:\l38:                                               \l  %39 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %37\l  %40 = load i8, i8 addrspace(1)* %39, align 1, !tbaa !16, !range !20\l  %41 = icmp ne i8 %40, 0\l  br label %42\l}"];
	Node0x4ec4980 -> Node0x4ec4150;
	Node0x4ec4150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i1 [ %41, %38 ], [ true, %30 ]\l  %44 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %37\l  %45 = zext i1 %43 to i8\l  store i8 %45, i8 addrspace(1)* %44, align 1, !tbaa !16\l  %46 = add i32 %28, %32\l  %47 = sext i32 %46 to i64\l  %48 = icmp ult i64 %47, %2\l  br i1 %48, label %30, label %29, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4ec4150:s0 -> Node0x4ec4010;
	Node0x4ec4150:s1 -> Node0x4ec3920;
}
