digraph "CFG for '_Z19Multiply_Matrix_GPUPfS_S_ii' function" {
	label="CFG for '_Z19Multiply_Matrix_GPUPfS_S_ii' function";

	Node0x4e1c910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %10 = mul i32 %7, %3\l  %11 = mul i32 %10, %4\l  %12 = mul nsw i32 %9, %4\l  %13 = add nsw i32 %11, %12\l  %14 = mul nsw i32 %6, %3\l  %15 = add i32 %14, %8\l  %16 = icmp sgt i32 %4, 0\l  br i1 %16, label %17, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4e1c910:s0 -> Node0x4e1da90;
	Node0x4e1c910:s1 -> Node0x4e1ee00;
	Node0x4e1da90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = and i32 %4, 7\l  %19 = icmp ult i32 %4, 8\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x4e1da90:s0 -> Node0x4e1f0c0;
	Node0x4e1da90:s1 -> Node0x4e1f110;
	Node0x4e1f110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%20:\l20:                                               \l  %21 = and i32 %4, -8\l  br label %51\l}"];
	Node0x4e1f110 -> Node0x4e1f310;
	Node0x4e1f0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = phi float [ undef, %17 ], [ %149, %51 ]\l  %24 = phi float [ 0.000000e+00, %17 ], [ %149, %51 ]\l  %25 = phi i32 [ 0, %17 ], [ %150, %51 ]\l  %26 = icmp eq i32 %18, 0\l  br i1 %26, label %45, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4e1f0c0:s0 -> Node0x4e1ee00;
	Node0x4e1f0c0:s1 -> Node0x4e20580;
	Node0x4e20580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi float [ %41, %27 ], [ %24, %22 ]\l  %29 = phi i32 [ %42, %27 ], [ %25, %22 ]\l  %30 = phi i32 [ %43, %27 ], [ 0, %22 ]\l  %31 = add nsw i32 %13, %29\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %35 = mul nsw i32 %29, %4\l  %36 = add nsw i32 %15, %35\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %40 = fmul contract float %34, %39\l  %41 = fadd contract float %28, %40\l  %42 = add nuw nsw i32 %29, 1\l  %43 = add i32 %30, 1\l  %44 = icmp eq i32 %43, %18\l  br i1 %44, label %45, label %27, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4e20580:s0 -> Node0x4e1ee00;
	Node0x4e20580:s1 -> Node0x4e20580;
	Node0x4e1ee00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%45:\l45:                                               \l  %46 = phi float [ 0.000000e+00, %5 ], [ %23, %22 ], [ %41, %27 ]\l  %47 = add i32 %15, %12\l  %48 = add i32 %47, %11\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %2, i64 %49\l  store float %46, float addrspace(1)* %50, align 4, !tbaa !5\l  ret void\l}"];
	Node0x4e1f310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %20 ], [ %149, %51 ]\l  %53 = phi i32 [ 0, %20 ], [ %150, %51 ]\l  %54 = phi i32 [ 0, %20 ], [ %151, %51 ]\l  %55 = add nsw i32 %13, %53\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %59 = mul nsw i32 %53, %4\l  %60 = add nsw i32 %15, %59\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %64 = fmul contract float %58, %63\l  %65 = fadd contract float %52, %64\l  %66 = or i32 %53, 1\l  %67 = add nsw i32 %13, %66\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %71 = mul nsw i32 %66, %4\l  %72 = add nsw i32 %15, %71\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %76 = fmul contract float %70, %75\l  %77 = fadd contract float %65, %76\l  %78 = or i32 %53, 2\l  %79 = add nsw i32 %13, %78\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %83 = mul nsw i32 %78, %4\l  %84 = add nsw i32 %15, %83\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %88 = fmul contract float %82, %87\l  %89 = fadd contract float %77, %88\l  %90 = or i32 %53, 3\l  %91 = add nsw i32 %13, %90\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %95 = mul nsw i32 %90, %4\l  %96 = add nsw i32 %15, %95\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %100 = fmul contract float %94, %99\l  %101 = fadd contract float %89, %100\l  %102 = or i32 %53, 4\l  %103 = add nsw i32 %13, %102\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %107 = mul nsw i32 %102, %4\l  %108 = add nsw i32 %15, %107\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %112 = fmul contract float %106, %111\l  %113 = fadd contract float %101, %112\l  %114 = or i32 %53, 5\l  %115 = add nsw i32 %13, %114\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %119 = mul nsw i32 %114, %4\l  %120 = add nsw i32 %15, %119\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %124 = fmul contract float %118, %123\l  %125 = fadd contract float %113, %124\l  %126 = or i32 %53, 6\l  %127 = add nsw i32 %13, %126\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %131 = mul nsw i32 %126, %4\l  %132 = add nsw i32 %15, %131\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %1, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %136 = fmul contract float %130, %135\l  %137 = fadd contract float %125, %136\l  %138 = or i32 %53, 7\l  %139 = add nsw i32 %13, %138\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %143 = mul nsw i32 %138, %4\l  %144 = add nsw i32 %15, %143\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %1, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %148 = fmul contract float %142, %147\l  %149 = fadd contract float %137, %148\l  %150 = add nuw nsw i32 %53, 8\l  %151 = add i32 %54, 8\l  %152 = icmp eq i32 %151, %21\l  br i1 %152, label %22, label %51, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4e1f310:s0 -> Node0x4e1f0c0;
	Node0x4e1f310:s1 -> Node0x4e1f310;
}
