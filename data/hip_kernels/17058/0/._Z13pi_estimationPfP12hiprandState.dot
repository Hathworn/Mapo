digraph "CFG for '_Z13pi_estimationPfP12hiprandState' function" {
	label="CFG for '_Z13pi_estimationPfP12hiprandState' function";

	Node0x5adc980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%2:\l  %3 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = add i32 %11, %4\l  %13 = zext i32 %12 to i64\l  %14 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13\l  %15 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %15) #4\l  %16 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 0\l  %17 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 1\l  %18 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 2\l  %19 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 3\l  %20 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 4\l  store i32 1641949428, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 1326976570, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 -1452303100, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 -1894485380, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 1524275960, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %21 = icmp eq i32 %12, 0\l  br i1 %21, label %22, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5adc980:s0 -> Node0x5ade1c0;
	Node0x5adc980:s1 -> Node0x5ade250;
	Node0x5ade1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%22:\l22:                                               \l  br label %200\l}"];
	Node0x5ade1c0 -> Node0x5ade390;
	Node0x5ade250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%23:\l23:                                               \l  %24 = phi i64 [ %33, %31 ], [ %13, %2 ]\l  %25 = phi i32 [ %32, %31 ], [ 0, %2 ]\l  %26 = trunc i64 %24 to i32\l  %27 = and i32 %26, 3\l  %28 = icmp eq i32 %27, 0\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5ade250:s0 -> Node0x5ade450;
	Node0x5ade250:s1 -> Node0x5ade840;
	Node0x5ade840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%29:\l29:                                               \l  %30 = zext i32 %25 to i64\l  br label %35\l}"];
	Node0x5ade840 -> Node0x5ade9f0;
	Node0x5ade450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%31:\l31:                                               \l  %32 = add nuw nsw i32 %25, 1\l  %33 = lshr i64 %24, 2\l  %34 = icmp ult i64 %24, 4\l  br i1 %34, label %22, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5ade450:s0 -> Node0x5ade1c0;
	Node0x5ade450:s1 -> Node0x5ade250;
	Node0x5ade9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%35:\l35:                                               \l  %36 = phi i32 [ 0, %29 ], [ %198, %197 ]\l  br label %37\l}"];
	Node0x5ade9f0 -> Node0x5adefd0;
	Node0x5adefd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi i32 [ 0, %35 ], [ %170, %37 ]\l  %39 = phi i32 [ 0, %35 ], [ %176, %37 ]\l  %40 = phi i32 [ 0, %35 ], [ %182, %37 ]\l  %41 = phi i32 [ 0, %35 ], [ %188, %37 ]\l  %42 = phi i32 [ 0, %35 ], [ %194, %37 ]\l  %43 = phi i32 [ 0, %35 ], [ %195, %37 ]\l  %44 = lshr i32 %43, 5\l  %45 = and i32 %43, 28\l  %46 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %44\l  %47 = load i32, i32 addrspace(5)* %46, align 4, !tbaa !7\l  %48 = shl nuw i32 1, %45\l  %49 = and i32 %48, %47\l  %50 = icmp eq i32 %49, 0\l  %51 = mul nuw nsw i32 %43, 5\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %52\l  %54 = load i32, i32 addrspace(4)* %53, align 16, !tbaa !7\l  %55 = select i1 %50, i32 0, i32 %54\l  %56 = xor i32 %55, %38\l  %57 = or i32 %51, 1\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %58\l  %60 = load i32, i32 addrspace(4)* %59, align 4, !tbaa !7\l  %61 = select i1 %50, i32 0, i32 %60\l  %62 = xor i32 %61, %39\l  %63 = or i32 %51, 2\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %64\l  %66 = load i32, i32 addrspace(4)* %65, align 8, !tbaa !7\l  %67 = select i1 %50, i32 0, i32 %66\l  %68 = xor i32 %67, %40\l  %69 = or i32 %51, 3\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %70\l  %72 = load i32, i32 addrspace(4)* %71, align 4, !tbaa !7\l  %73 = select i1 %50, i32 0, i32 %72\l  %74 = xor i32 %73, %41\l  %75 = add nuw nsw i32 %51, 4\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %76\l  %78 = load i32, i32 addrspace(4)* %77, align 16, !tbaa !7\l  %79 = select i1 %50, i32 0, i32 %78\l  %80 = xor i32 %79, %42\l  %81 = or i32 %43, 1\l  %82 = lshr i32 %43, 5\l  %83 = and i32 %81, 29\l  %84 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %82\l  %85 = load i32, i32 addrspace(5)* %84, align 4, !tbaa !7\l  %86 = shl nuw i32 1, %83\l  %87 = and i32 %86, %85\l  %88 = icmp eq i32 %87, 0\l  %89 = mul nuw nsw i32 %81, 5\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %90\l  %92 = load i32, i32 addrspace(4)* %91, align 4, !tbaa !7\l  %93 = select i1 %88, i32 0, i32 %92\l  %94 = xor i32 %93, %56\l  %95 = add nuw nsw i32 %89, 1\l  %96 = zext i32 %95 to i64\l  %97 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %96\l  %98 = load i32, i32 addrspace(4)* %97, align 8, !tbaa !7\l  %99 = select i1 %88, i32 0, i32 %98\l  %100 = xor i32 %99, %62\l  %101 = or i32 %89, 2\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %102\l  %104 = load i32, i32 addrspace(4)* %103, align 4, !tbaa !7\l  %105 = select i1 %88, i32 0, i32 %104\l  %106 = xor i32 %105, %68\l  %107 = add nuw nsw i32 %89, 3\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %108\l  %110 = load i32, i32 addrspace(4)* %109, align 16, !tbaa !7\l  %111 = select i1 %88, i32 0, i32 %110\l  %112 = xor i32 %111, %74\l  %113 = add nuw nsw i32 %89, 4\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %114\l  %116 = load i32, i32 addrspace(4)* %115, align 4, !tbaa !7\l  %117 = select i1 %88, i32 0, i32 %116\l  %118 = xor i32 %117, %80\l  %119 = or i32 %43, 2\l  %120 = lshr i32 %43, 5\l  %121 = and i32 %119, 30\l  %122 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %120\l  %123 = load i32, i32 addrspace(5)* %122, align 4, !tbaa !7\l  %124 = shl nuw i32 1, %121\l  %125 = and i32 %124, %123\l  %126 = icmp eq i32 %125, 0\l  %127 = mul nuw nsw i32 %119, 5\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %128\l  %130 = load i32, i32 addrspace(4)* %129, align 8, !tbaa !7\l  %131 = select i1 %126, i32 0, i32 %130\l  %132 = xor i32 %131, %94\l  %133 = or i32 %127, 1\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %134\l  %136 = load i32, i32 addrspace(4)* %135, align 4, !tbaa !7\l  %137 = select i1 %126, i32 0, i32 %136\l  %138 = xor i32 %137, %100\l  %139 = add nuw nsw i32 %127, 2\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %140\l  %142 = load i32, i32 addrspace(4)* %141, align 16, !tbaa !7\l  %143 = select i1 %126, i32 0, i32 %142\l  %144 = xor i32 %143, %106\l  %145 = add nuw nsw i32 %127, 3\l  %146 = zext i32 %145 to i64\l  %147 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %146\l  %148 = load i32, i32 addrspace(4)* %147, align 4, !tbaa !7\l  %149 = select i1 %126, i32 0, i32 %148\l  %150 = xor i32 %149, %112\l  %151 = add nuw nsw i32 %127, 4\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %152\l  %154 = load i32, i32 addrspace(4)* %153, align 8, !tbaa !7\l  %155 = select i1 %126, i32 0, i32 %154\l  %156 = xor i32 %155, %118\l  %157 = or i32 %43, 3\l  %158 = lshr i32 %43, 5\l  %159 = and i32 %157, 31\l  %160 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %158\l  %161 = load i32, i32 addrspace(5)* %160, align 4, !tbaa !7\l  %162 = shl nuw i32 1, %159\l  %163 = and i32 %162, %161\l  %164 = icmp eq i32 %163, 0\l  %165 = mul nuw nsw i32 %157, 5\l  %166 = zext i32 %165 to i64\l  %167 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %166\l  %168 = load i32, i32 addrspace(4)* %167, align 4, !tbaa !7\l  %169 = select i1 %164, i32 0, i32 %168\l  %170 = xor i32 %169, %132\l  %171 = add nuw nsw i32 %165, 1\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %172\l  %174 = load i32, i32 addrspace(4)* %173, align 16, !tbaa !7\l  %175 = select i1 %164, i32 0, i32 %174\l  %176 = xor i32 %175, %138\l  %177 = add nuw nsw i32 %165, 2\l  %178 = zext i32 %177 to i64\l  %179 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %178\l  %180 = load i32, i32 addrspace(4)* %179, align 4, !tbaa !7\l  %181 = select i1 %164, i32 0, i32 %180\l  %182 = xor i32 %181, %144\l  %183 = add nuw nsw i32 %165, 3\l  %184 = zext i32 %183 to i64\l  %185 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %184\l  %186 = load i32, i32 addrspace(4)* %185, align 8, !tbaa !7\l  %187 = select i1 %164, i32 0, i32 %186\l  %188 = xor i32 %187, %150\l  %189 = add nuw nsw i32 %165, 4\l  %190 = zext i32 %189 to i64\l  %191 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %190\l  %192 = load i32, i32 addrspace(4)* %191, align 4, !tbaa !7\l  %193 = select i1 %164, i32 0, i32 %192\l  %194 = xor i32 %193, %156\l  %195 = add nuw nsw i32 %43, 4\l  %196 = icmp eq i32 %195, 160\l  br i1 %196, label %197, label %37, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5adefd0:s0 -> Node0x5adee90;
	Node0x5adefd0:s1 -> Node0x5adefd0;
	Node0x5adee90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%197:\l197:                                              \l  store i32 %170, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 %176, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 %182, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 %188, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 %194, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %198 = add nuw nsw i32 %36, 1\l  %199 = icmp eq i32 %198, %27\l  br i1 %199, label %31, label %35, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5adee90:s0 -> Node0x5ade450;
	Node0x5adee90:s1 -> Node0x5ade9f0;
	Node0x5ade390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%200:\l200:                                              \l  %201 = phi i32 [ 0, %22 ], [ %333, %200 ]\l  %202 = phi i32 [ 0, %22 ], [ %339, %200 ]\l  %203 = phi i32 [ 0, %22 ], [ %345, %200 ]\l  %204 = phi i32 [ 0, %22 ], [ %351, %200 ]\l  %205 = phi i32 [ 0, %22 ], [ %357, %200 ]\l  %206 = phi i32 [ 0, %22 ], [ %358, %200 ]\l  %207 = lshr i32 %206, 5\l  %208 = and i32 %206, 28\l  %209 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %207\l  %210 = load i32, i32 addrspace(5)* %209, align 4, !tbaa !7\l  %211 = shl nuw i32 1, %208\l  %212 = and i32 %211, %210\l  %213 = icmp eq i32 %212, 0\l  %214 = mul nuw nsw i32 %206, 5\l  %215 = zext i32 %214 to i64\l  %216 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %215\l  %217 = load i32, i32 addrspace(4)* %216, align 16, !tbaa !7\l  %218 = select i1 %213, i32 0, i32 %217\l  %219 = xor i32 %218, %201\l  %220 = or i32 %214, 1\l  %221 = zext i32 %220 to i64\l  %222 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %221\l  %223 = load i32, i32 addrspace(4)* %222, align 4, !tbaa !7\l  %224 = select i1 %213, i32 0, i32 %223\l  %225 = xor i32 %224, %202\l  %226 = or i32 %214, 2\l  %227 = zext i32 %226 to i64\l  %228 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %227\l  %229 = load i32, i32 addrspace(4)* %228, align 8, !tbaa !7\l  %230 = select i1 %213, i32 0, i32 %229\l  %231 = xor i32 %230, %203\l  %232 = or i32 %214, 3\l  %233 = zext i32 %232 to i64\l  %234 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %233\l  %235 = load i32, i32 addrspace(4)* %234, align 4, !tbaa !7\l  %236 = select i1 %213, i32 0, i32 %235\l  %237 = xor i32 %236, %204\l  %238 = add nuw nsw i32 %214, 4\l  %239 = zext i32 %238 to i64\l  %240 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %239\l  %241 = load i32, i32 addrspace(4)* %240, align 16, !tbaa !7\l  %242 = select i1 %213, i32 0, i32 %241\l  %243 = xor i32 %242, %205\l  %244 = or i32 %206, 1\l  %245 = lshr i32 %206, 5\l  %246 = and i32 %244, 29\l  %247 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %245\l  %248 = load i32, i32 addrspace(5)* %247, align 4, !tbaa !7\l  %249 = shl nuw i32 1, %246\l  %250 = and i32 %249, %248\l  %251 = icmp eq i32 %250, 0\l  %252 = mul nuw nsw i32 %244, 5\l  %253 = zext i32 %252 to i64\l  %254 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %253\l  %255 = load i32, i32 addrspace(4)* %254, align 4, !tbaa !7\l  %256 = select i1 %251, i32 0, i32 %255\l  %257 = xor i32 %256, %219\l  %258 = add nuw nsw i32 %252, 1\l  %259 = zext i32 %258 to i64\l  %260 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %259\l  %261 = load i32, i32 addrspace(4)* %260, align 8, !tbaa !7\l  %262 = select i1 %251, i32 0, i32 %261\l  %263 = xor i32 %262, %225\l  %264 = or i32 %252, 2\l  %265 = zext i32 %264 to i64\l  %266 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %265\l  %267 = load i32, i32 addrspace(4)* %266, align 4, !tbaa !7\l  %268 = select i1 %251, i32 0, i32 %267\l  %269 = xor i32 %268, %231\l  %270 = add nuw nsw i32 %252, 3\l  %271 = zext i32 %270 to i64\l  %272 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %271\l  %273 = load i32, i32 addrspace(4)* %272, align 16, !tbaa !7\l  %274 = select i1 %251, i32 0, i32 %273\l  %275 = xor i32 %274, %237\l  %276 = add nuw nsw i32 %252, 4\l  %277 = zext i32 %276 to i64\l  %278 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %277\l  %279 = load i32, i32 addrspace(4)* %278, align 4, !tbaa !7\l  %280 = select i1 %251, i32 0, i32 %279\l  %281 = xor i32 %280, %243\l  %282 = or i32 %206, 2\l  %283 = lshr i32 %206, 5\l  %284 = and i32 %282, 30\l  %285 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %283\l  %286 = load i32, i32 addrspace(5)* %285, align 4, !tbaa !7\l  %287 = shl nuw i32 1, %284\l  %288 = and i32 %287, %286\l  %289 = icmp eq i32 %288, 0\l  %290 = mul nuw nsw i32 %282, 5\l  %291 = zext i32 %290 to i64\l  %292 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %291\l  %293 = load i32, i32 addrspace(4)* %292, align 8, !tbaa !7\l  %294 = select i1 %289, i32 0, i32 %293\l  %295 = xor i32 %294, %257\l  %296 = or i32 %290, 1\l  %297 = zext i32 %296 to i64\l  %298 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %297\l  %299 = load i32, i32 addrspace(4)* %298, align 4, !tbaa !7\l  %300 = select i1 %289, i32 0, i32 %299\l  %301 = xor i32 %300, %263\l  %302 = add nuw nsw i32 %290, 2\l  %303 = zext i32 %302 to i64\l  %304 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %303\l  %305 = load i32, i32 addrspace(4)* %304, align 16, !tbaa !7\l  %306 = select i1 %289, i32 0, i32 %305\l  %307 = xor i32 %306, %269\l  %308 = add nuw nsw i32 %290, 3\l  %309 = zext i32 %308 to i64\l  %310 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %309\l  %311 = load i32, i32 addrspace(4)* %310, align 4, !tbaa !7\l  %312 = select i1 %289, i32 0, i32 %311\l  %313 = xor i32 %312, %275\l  %314 = add nuw nsw i32 %290, 4\l  %315 = zext i32 %314 to i64\l  %316 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %315\l  %317 = load i32, i32 addrspace(4)* %316, align 8, !tbaa !7\l  %318 = select i1 %289, i32 0, i32 %317\l  %319 = xor i32 %318, %281\l  %320 = or i32 %206, 3\l  %321 = lshr i32 %206, 5\l  %322 = and i32 %320, 31\l  %323 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %321\l  %324 = load i32, i32 addrspace(5)* %323, align 4, !tbaa !7\l  %325 = shl nuw i32 1, %322\l  %326 = and i32 %325, %324\l  %327 = icmp eq i32 %326, 0\l  %328 = mul nuw nsw i32 %320, 5\l  %329 = zext i32 %328 to i64\l  %330 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %329\l  %331 = load i32, i32 addrspace(4)* %330, align 4, !tbaa !7\l  %332 = select i1 %327, i32 0, i32 %331\l  %333 = xor i32 %332, %295\l  %334 = add nuw nsw i32 %328, 1\l  %335 = zext i32 %334 to i64\l  %336 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %335\l  %337 = load i32, i32 addrspace(4)* %336, align 16, !tbaa !7\l  %338 = select i1 %327, i32 0, i32 %337\l  %339 = xor i32 %338, %301\l  %340 = add nuw nsw i32 %328, 2\l  %341 = zext i32 %340 to i64\l  %342 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %341\l  %343 = load i32, i32 addrspace(4)* %342, align 4, !tbaa !7\l  %344 = select i1 %327, i32 0, i32 %343\l  %345 = xor i32 %344, %307\l  %346 = add nuw nsw i32 %328, 3\l  %347 = zext i32 %346 to i64\l  %348 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %347\l  %349 = load i32, i32 addrspace(4)* %348, align 8, !tbaa !7\l  %350 = select i1 %327, i32 0, i32 %349\l  %351 = xor i32 %350, %313\l  %352 = add nuw nsw i32 %328, 4\l  %353 = zext i32 %352 to i64\l  %354 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 0, i64 %353\l  %355 = load i32, i32 addrspace(4)* %354, align 4, !tbaa !7\l  %356 = select i1 %327, i32 0, i32 %355\l  %357 = xor i32 %356, %319\l  %358 = add nuw nsw i32 %206, 4\l  %359 = icmp eq i32 %358, 160\l  br i1 %359, label %360, label %200, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5ade390:s0 -> Node0x5ae34a0;
	Node0x5ade390:s1 -> Node0x5ade390;
	Node0x5ae34a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%360:\l360:                                              \l  %361 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 0\l  store i32 %333, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 %339, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 %345, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 %351, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 %357, i32 addrspace(5)* %20, align 8, !tbaa !7\l  store i32 -448121412, i32 addrspace(5)* %361, align 8, !tbaa !15\l  %362 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %362, align 4, !tbaa !20\l  %363 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %363, align 8, !tbaa !21\l  %364 = bitcast %struct.hiprandState addrspace(1)* %14 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %364, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %15, i64 48, i1 false), !tbaa.struct !22\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %15) #4\l  %365 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 0\l  %366 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 1\l  %367 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 2\l  %368 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 3\l  %369 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 4\l  %370 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %14, i64 0, i32 0, i32 0, i32 0\l  %371 = load i32, i32 addrspace(1)* %365, align 8, !tbaa !7\l  %372 = load i32, i32 addrspace(1)* %366, align 4, !tbaa !7\l  %373 = load i32, i32 addrspace(1)* %367, align 8, !tbaa !7\l  %374 = load i32, i32 addrspace(1)* %368, align 4, !tbaa !7\l  %375 = load i32, i32 addrspace(1)* %369, align 8, !tbaa !7\l  %376 = load i32, i32 addrspace(1)* %370, align 8, !tbaa !15\l  br label %383\l}"];
	Node0x5ae34a0 -> Node0x5af0140;
	Node0x5af0200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%377:\l377:                                              \l  %378 = add i32 %376, 742270976\l  store i32 %440, i32 addrspace(1)* %365, align 8, !tbaa !7\l  store i32 %458, i32 addrspace(1)* %366, align 4, !tbaa !7\l  store i32 %470, i32 addrspace(1)* %367, align 8, !tbaa !7\l  store i32 %488, i32 addrspace(1)* %368, align 4, !tbaa !7\l  store i32 %500, i32 addrspace(1)* %369, align 8, !tbaa !7\l  store i32 %378, i32 addrspace(1)* %370, align 8, !tbaa !15\l  %379 = sitofp i32 %511 to float\l  %380 = fmul contract float %379, 4.000000e+00\l  %381 = fmul contract float %380, 0x3F50000000000000\l  %382 = getelementptr inbounds float, float addrspace(1)* %0, i64 %13\l  store float %381, float addrspace(1)* %382, align 4, !tbaa !23\l  ret void\l}"];
	Node0x5af0140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%383:\l383:                                              \l  %384 = phi i32 [ 0, %360 ], [ %512, %383 ]\l  %385 = phi i32 [ 0, %360 ], [ %511, %383 ]\l  %386 = phi i32 [ %371, %360 ], [ %440, %383 ]\l  %387 = phi i32 [ %372, %360 ], [ %458, %383 ]\l  %388 = phi i32 [ %373, %360 ], [ %470, %383 ]\l  %389 = phi i32 [ %374, %360 ], [ %488, %383 ]\l  %390 = phi i32 [ %375, %360 ], [ %500, %383 ]\l  %391 = phi i32 [ %376, %360 ], [ %501, %383 ]\l  %392 = lshr i32 %386, 2\l  %393 = xor i32 %392, %386\l  %394 = shl i32 %390, 4\l  %395 = shl i32 %393, 1\l  %396 = xor i32 %395, %394\l  %397 = xor i32 %396, %393\l  %398 = xor i32 %397, %390\l  %399 = add i32 %391, 362437\l  %400 = add i32 %399, %398\l  %401 = uitofp i32 %400 to float\l  %402 = fmul contract float %401, 0x3DF0000000000000\l  %403 = fadd contract float %402, 0x3DF0000000000000\l  %404 = lshr i32 %387, 2\l  %405 = xor i32 %404, %387\l  %406 = shl i32 %398, 4\l  %407 = shl i32 %405, 1\l  %408 = xor i32 %407, %406\l  %409 = xor i32 %408, %405\l  %410 = xor i32 %409, %398\l  %411 = add i32 %391, 724874\l  %412 = add i32 %410, %411\l  %413 = uitofp i32 %412 to float\l  %414 = fmul contract float %413, 0x3DF0000000000000\l  %415 = fadd contract float %414, 0x3DF0000000000000\l  %416 = fmul contract float %403, %403\l  %417 = fmul contract float %415, %415\l  %418 = fadd contract float %416, %417\l  %419 = fcmp contract ole float %418, 1.000000e+00\l  %420 = zext i1 %419 to i32\l  %421 = add nuw nsw i32 %385, %420\l  %422 = lshr i32 %388, 2\l  %423 = xor i32 %422, %388\l  %424 = shl i32 %410, 4\l  %425 = shl i32 %423, 1\l  %426 = xor i32 %425, %424\l  %427 = xor i32 %426, %423\l  %428 = xor i32 %427, %410\l  %429 = add i32 %391, 1087311\l  %430 = add i32 %429, %428\l  %431 = uitofp i32 %430 to float\l  %432 = fmul contract float %431, 0x3DF0000000000000\l  %433 = fadd contract float %432, 0x3DF0000000000000\l  %434 = lshr i32 %389, 2\l  %435 = xor i32 %434, %389\l  %436 = shl i32 %428, 4\l  %437 = shl i32 %435, 1\l  %438 = xor i32 %437, %436\l  %439 = xor i32 %438, %435\l  %440 = xor i32 %439, %428\l  %441 = add i32 %391, 1449748\l  %442 = add i32 %440, %441\l  %443 = uitofp i32 %442 to float\l  %444 = fmul contract float %443, 0x3DF0000000000000\l  %445 = fadd contract float %444, 0x3DF0000000000000\l  %446 = fmul contract float %433, %433\l  %447 = fmul contract float %445, %445\l  %448 = fadd contract float %446, %447\l  %449 = fcmp contract ole float %448, 1.000000e+00\l  %450 = zext i1 %449 to i32\l  %451 = add nuw nsw i32 %421, %450\l  %452 = lshr i32 %390, 2\l  %453 = xor i32 %452, %390\l  %454 = shl i32 %440, 4\l  %455 = shl i32 %453, 1\l  %456 = xor i32 %455, %454\l  %457 = xor i32 %456, %453\l  %458 = xor i32 %457, %440\l  %459 = add i32 %391, 1812185\l  %460 = add i32 %459, %458\l  %461 = uitofp i32 %460 to float\l  %462 = fmul contract float %461, 0x3DF0000000000000\l  %463 = fadd contract float %462, 0x3DF0000000000000\l  %464 = lshr i32 %398, 2\l  %465 = xor i32 %464, %398\l  %466 = shl i32 %458, 4\l  %467 = shl i32 %465, 1\l  %468 = xor i32 %467, %466\l  %469 = xor i32 %468, %465\l  %470 = xor i32 %469, %458\l  %471 = add i32 %391, 2174622\l  %472 = add i32 %470, %471\l  %473 = uitofp i32 %472 to float\l  %474 = fmul contract float %473, 0x3DF0000000000000\l  %475 = fadd contract float %474, 0x3DF0000000000000\l  %476 = fmul contract float %463, %463\l  %477 = fmul contract float %475, %475\l  %478 = fadd contract float %476, %477\l  %479 = fcmp contract ole float %478, 1.000000e+00\l  %480 = zext i1 %479 to i32\l  %481 = add nuw nsw i32 %451, %480\l  %482 = lshr i32 %410, 2\l  %483 = xor i32 %482, %410\l  %484 = shl i32 %470, 4\l  %485 = shl i32 %483, 1\l  %486 = xor i32 %485, %484\l  %487 = xor i32 %486, %483\l  %488 = xor i32 %487, %470\l  %489 = add i32 %391, 2537059\l  %490 = add i32 %489, %488\l  %491 = uitofp i32 %490 to float\l  %492 = fmul contract float %491, 0x3DF0000000000000\l  %493 = fadd contract float %492, 0x3DF0000000000000\l  %494 = lshr i32 %428, 2\l  %495 = xor i32 %494, %428\l  %496 = shl i32 %488, 4\l  %497 = shl i32 %495, 1\l  %498 = xor i32 %497, %496\l  %499 = xor i32 %498, %495\l  %500 = xor i32 %499, %488\l  %501 = add i32 %391, 2899496\l  %502 = add i32 %500, %501\l  %503 = uitofp i32 %502 to float\l  %504 = fmul contract float %503, 0x3DF0000000000000\l  %505 = fadd contract float %504, 0x3DF0000000000000\l  %506 = fmul contract float %493, %493\l  %507 = fmul contract float %505, %505\l  %508 = fadd contract float %506, %507\l  %509 = fcmp contract ole float %508, 1.000000e+00\l  %510 = zext i1 %509 to i32\l  %511 = add nuw nsw i32 %481, %510\l  %512 = add nuw nsw i32 %384, 4\l  %513 = icmp eq i32 %512, 1024\l  br i1 %513, label %377, label %383, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5af0140:s0 -> Node0x5af0200;
	Node0x5af0140:s1 -> Node0x5af0140;
}
