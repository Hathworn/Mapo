digraph "CFG for '_Z19parallelMeanUnroll2PfmS_' function" {
	label="CFG for '_Z19parallelMeanUnroll2PfmS_' function";

	Node0x4e5ccf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7\l  %14 = mul i32 %5, %10\l  %15 = shl i32 %14, 1\l  %16 = add i32 %15, %4\l  %17 = zext i32 %15 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %0, i64 %17\l  %19 = add i32 %16, %10\l  %20 = zext i32 %19 to i64\l  %21 = icmp ult i64 %20, %1\l  br i1 %21, label %22, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4e5ccf0:s0 -> Node0x4e5da50;
	Node0x4e5ccf0:s1 -> Node0x4e5f280;
	Node0x4e5da50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20\l  %24 = load float, float addrspace(1)* %23, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %25 = zext i32 %16 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %0, i64 %25\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %28 = fadd contract float %24, %27\l  store float %28, float addrspace(1)* %26, align 4, !tbaa !16\l  br label %29\l}"];
	Node0x4e5da50 -> Node0x4e5f280;
	Node0x4e5f280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%29:\l29:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %30 = icmp ult i16 %9, 2\l  br i1 %30, label %34, label %31\l|{<s0>T|<s1>F}}"];
	Node0x4e5f280:s0 -> Node0x4e60910;
	Node0x4e5f280:s1 -> Node0x4e609a0;
	Node0x4e609a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = zext i32 %4 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %18, i64 %32\l  br label %37\l}"];
	Node0x4e609a0 -> Node0x4e5efa0;
	Node0x4e60910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%34:\l34:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %35 = sub nsw i32 0, %4\l  %36 = icmp eq i32 %14, %35\l  br i1 %36, label %50, label %141\l|{<s0>T|<s1>F}}"];
	Node0x4e60910:s0 -> Node0x4e610d0;
	Node0x4e60910:s1 -> Node0x4e61120;
	Node0x4e5efa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi i32 [ %10, %31 ], [ %39, %48 ]\l  %39 = lshr i32 %38, 1\l  %40 = icmp ult i32 %4, %39\l  br i1 %40, label %41, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4e5efa0:s0 -> Node0x4e614c0;
	Node0x4e5efa0:s1 -> Node0x4e61260;
	Node0x4e614c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%41:\l41:                                               \l  %42 = add nuw nsw i32 %39, %4\l  %43 = zext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %18, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !16\l  %46 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %47 = fadd contract float %45, %46\l  store float %47, float addrspace(1)* %33, align 4, !tbaa !16\l  br label %48\l}"];
	Node0x4e614c0 -> Node0x4e61260;
	Node0x4e61260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  %49 = icmp ult i32 %38, 4\l  br i1 %49, label %34, label %37, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4e61260:s0 -> Node0x4e60910;
	Node0x4e61260:s1 -> Node0x4e5efa0;
	Node0x4e610d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%50:\l50:                                               \l  store float 0.000000e+00, float addrspace(1)* %2, align 4, !tbaa !16\l  %51 = udiv i32 %13, %10\l  %52 = mul i32 %51, %10\l  %53 = icmp ugt i32 %13, %52\l  %54 = zext i1 %53 to i32\l  %55 = add i32 %51, %54\l  %56 = icmp eq i32 %55, 0\l  br i1 %56, label %82, label %57\l|{<s0>T|<s1>F}}"];
	Node0x4e610d0:s0 -> Node0x4e629e0;
	Node0x4e610d0:s1 -> Node0x4e62a70;
	Node0x4e62a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%57:\l57:                                               \l  %58 = shl nuw nsw i32 %10, 1\l  %59 = add i32 %51, %54\l  %60 = add i32 %59, -1\l  %61 = and i32 %55, 7\l  %62 = icmp ult i32 %60, 7\l  br i1 %62, label %65, label %63\l|{<s0>T|<s1>F}}"];
	Node0x4e62a70:s0 -> Node0x4e62eb0;
	Node0x4e62a70:s1 -> Node0x4e62f00;
	Node0x4e62f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%63:\l63:                                               \l  %64 = and i32 %55, -8\l  br label %87\l}"];
	Node0x4e62f00 -> Node0x4e60b50;
	Node0x4e62eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%65:\l65:                                               \l  %66 = phi float [ undef, %57 ], [ %137, %87 ]\l  %67 = phi float [ 0.000000e+00, %57 ], [ %137, %87 ]\l  %68 = phi i32 [ 0, %57 ], [ %138, %87 ]\l  %69 = icmp eq i32 %61, 0\l  br i1 %69, label %82, label %70\l|{<s0>T|<s1>F}}"];
	Node0x4e62eb0:s0 -> Node0x4e629e0;
	Node0x4e62eb0:s1 -> Node0x4e63b30;
	Node0x4e63b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%70:\l70:                                               \l  %71 = phi float [ %78, %70 ], [ %67, %65 ]\l  %72 = phi i32 [ %79, %70 ], [ %68, %65 ]\l  %73 = phi i32 [ %80, %70 ], [ 0, %65 ]\l  %74 = mul i32 %58, %72\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16\l  %78 = fadd contract float %77, %71\l  store float %78, float addrspace(1)* %2, align 4, !tbaa !16\l  %79 = add nuw i32 %72, 1\l  %80 = add i32 %73, 1\l  %81 = icmp eq i32 %80, %61\l  br i1 %81, label %82, label %70, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4e63b30:s0 -> Node0x4e629e0;
	Node0x4e63b30:s1 -> Node0x4e63b30;
	Node0x4e629e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%82:\l82:                                               \l  %83 = phi float [ 0.000000e+00, %50 ], [ %66, %65 ], [ %78, %70 ]\l  %84 = add i64 %1, -1\l  %85 = uitofp i64 %84 to float\l  %86 = fdiv contract float %83, %85\l  store float %86, float addrspace(1)* %2, align 4, !tbaa !16\l  br label %141\l}"];
	Node0x4e629e0 -> Node0x4e61120;
	Node0x4e60b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%87:\l87:                                               \l  %88 = phi float [ 0.000000e+00, %63 ], [ %137, %87 ]\l  %89 = phi i32 [ 0, %63 ], [ %138, %87 ]\l  %90 = phi i32 [ 0, %63 ], [ %139, %87 ]\l  %91 = mul i32 %58, %89\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !16\l  %95 = fadd contract float %94, %88\l  store float %95, float addrspace(1)* %2, align 4, !tbaa !16\l  %96 = or i32 %89, 1\l  %97 = mul i32 %58, %96\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = fadd contract float %100, %95\l  store float %101, float addrspace(1)* %2, align 4, !tbaa !16\l  %102 = or i32 %89, 2\l  %103 = mul i32 %58, %102\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !16\l  %107 = fadd contract float %106, %101\l  store float %107, float addrspace(1)* %2, align 4, !tbaa !16\l  %108 = or i32 %89, 3\l  %109 = mul i32 %58, %108\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = fadd contract float %112, %107\l  store float %113, float addrspace(1)* %2, align 4, !tbaa !16\l  %114 = or i32 %89, 4\l  %115 = mul i32 %58, %114\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !16\l  %119 = fadd contract float %118, %113\l  store float %119, float addrspace(1)* %2, align 4, !tbaa !16\l  %120 = or i32 %89, 5\l  %121 = mul i32 %58, %120\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %0, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !16\l  %125 = fadd contract float %124, %119\l  store float %125, float addrspace(1)* %2, align 4, !tbaa !16\l  %126 = or i32 %89, 6\l  %127 = mul i32 %58, %126\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16\l  %131 = fadd contract float %130, %125\l  store float %131, float addrspace(1)* %2, align 4, !tbaa !16\l  %132 = or i32 %89, 7\l  %133 = mul i32 %58, %132\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %0, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16\l  %137 = fadd contract float %136, %131\l  store float %137, float addrspace(1)* %2, align 4, !tbaa !16\l  %138 = add nuw i32 %89, 8\l  %139 = add i32 %90, 8\l  %140 = icmp eq i32 %139, %64\l  br i1 %140, label %65, label %87, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4e60b50:s0 -> Node0x4e62eb0;
	Node0x4e60b50:s1 -> Node0x4e60b50;
	Node0x4e61120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%141:\l141:                                              \l  ret void\l}"];
}
