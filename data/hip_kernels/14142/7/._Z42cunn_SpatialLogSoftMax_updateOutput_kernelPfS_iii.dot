digraph "CFG for '_Z42cunn_SpatialLogSoftMax_updateOutput_kernelPfS_iii' function" {
	label="CFG for '_Z42cunn_SpatialLogSoftMax_updateOutput_kernelPfS_iii' function";

	Node0x4c6e7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = mul nsw i32 %4, %3\l  %9 = mul i32 %8, %6\l  %10 = icmp sgt i32 %2, 0\l  %11 = mul i32 %6, %2\l  %12 = mul i32 %11, %3\l  %13 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = and i32 %2, 7\l  %17 = icmp ult i32 %2, 8\l  %18 = and i32 %2, -8\l  %19 = icmp eq i32 %16, 0\l  %20 = and i32 %2, 1\l  %21 = icmp eq i32 %2, 1\l  %22 = and i32 %2, -2\l  %23 = icmp eq i32 %20, 0\l  br label %24\l}"];
	Node0x4c6e7d0 -> Node0x4c709c0;
	Node0x4c709c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%24:\l24:                                               \l  %25 = phi i32 [ %7, %5 ], [ %210, %209 ]\l  %26 = icmp slt i32 %25, %8\l  br i1 %26, label %27, label %211\l|{<s0>T|<s1>F}}"];
	Node0x4c709c0:s0 -> Node0x4c70cc0;
	Node0x4c709c0:s1 -> Node0x4c70d50;
	Node0x4c70cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%27:\l27:                                               \l  %28 = freeze i32 %25\l  %29 = freeze i32 %4\l  %30 = sdiv i32 %28, %29\l  %31 = mul i32 %30, %29\l  %32 = sub i32 %28, %31\l  %33 = icmp slt i32 %30, %3\l  br i1 %33, label %34, label %209\l|{<s0>T|<s1>F}}"];
	Node0x4c70cc0:s0 -> Node0x4c70520;
	Node0x4c70cc0:s1 -> Node0x4c70af0;
	Node0x4c70520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%34:\l34:                                               \l  %35 = mul i32 %30, %4\l  %36 = add i32 %35, %9\l  %37 = add i32 %36, %32\l  %38 = mul i32 %37, %2\l  br i1 %10, label %39, label %57\l|{<s0>T|<s1>F}}"];
	Node0x4c70520:s0 -> Node0x4c71620;
	Node0x4c70520:s1 -> Node0x4c71670;
	Node0x4c71620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%39:\l39:                                               \l  br i1 %17, label %40, label %64\l|{<s0>T|<s1>F}}"];
	Node0x4c71620:s0 -> Node0x4c717b0;
	Node0x4c71620:s1 -> Node0x4c71800;
	Node0x4c717b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%40:\l40:                                               \l  %41 = phi float [ undef, %39 ], [ %122, %64 ]\l  %42 = phi i32 [ 0, %39 ], [ %123, %64 ]\l  %43 = phi float [ 0.000000e+00, %39 ], [ %122, %64 ]\l  br i1 %19, label %57, label %44\l|{<s0>T|<s1>F}}"];
	Node0x4c717b0:s0 -> Node0x4c71670;
	Node0x4c717b0:s1 -> Node0x4c72a20;
	Node0x4c72a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  %45 = phi i32 [ %54, %44 ], [ %42, %40 ]\l  %46 = phi float [ %53, %44 ], [ %43, %40 ]\l  %47 = phi i32 [ %55, %44 ], [ 0, %40 ]\l  %48 = add nsw i32 %45, %38\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !5\l  %52 = tail call float @llvm.exp.f32(float %51)\l  %53 = fadd contract float %46, %52\l  %54 = add nuw nsw i32 %45, 1\l  %55 = add i32 %47, 1\l  %56 = icmp eq i32 %55, %16\l  br i1 %56, label %57, label %44, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x4c72a20:s0 -> Node0x4c71670;
	Node0x4c72a20:s1 -> Node0x4c72a20;
	Node0x4c71670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %34 ], [ %41, %40 ], [ %53, %44 ]\l  %59 = fdiv contract float 1.000000e+00, %58\l  br i1 %10, label %60, label %152\l|{<s0>T|<s1>F}}"];
	Node0x4c71670:s0 -> Node0x4c738c0;
	Node0x4c71670:s1 -> Node0x4c73950;
	Node0x4c738c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%60:\l60:                                               \l  %61 = add i32 %30, %12\l  %62 = mul i32 %61, %4\l  %63 = add i32 %62, %32\l  br i1 %21, label %126, label %156\l|{<s0>T|<s1>F}}"];
	Node0x4c738c0:s0 -> Node0x4c73c40;
	Node0x4c738c0:s1 -> Node0x4c73c90;
	Node0x4c71800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%64:\l64:                                               \l  %65 = phi i32 [ %123, %64 ], [ 0, %39 ]\l  %66 = phi float [ %122, %64 ], [ 0.000000e+00, %39 ]\l  %67 = phi i32 [ %124, %64 ], [ 0, %39 ]\l  %68 = add nsw i32 %65, %38\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !5\l  %72 = tail call float @llvm.exp.f32(float %71)\l  %73 = fadd contract float %66, %72\l  %74 = or i32 %65, 1\l  %75 = add nsw i32 %74, %38\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !5\l  %79 = tail call float @llvm.exp.f32(float %78)\l  %80 = fadd contract float %73, %79\l  %81 = or i32 %65, 2\l  %82 = add nsw i32 %81, %38\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !5\l  %86 = tail call float @llvm.exp.f32(float %85)\l  %87 = fadd contract float %80, %86\l  %88 = or i32 %65, 3\l  %89 = add nsw i32 %88, %38\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !5\l  %93 = tail call float @llvm.exp.f32(float %92)\l  %94 = fadd contract float %87, %93\l  %95 = or i32 %65, 4\l  %96 = add nsw i32 %95, %38\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !5\l  %100 = tail call float @llvm.exp.f32(float %99)\l  %101 = fadd contract float %94, %100\l  %102 = or i32 %65, 5\l  %103 = add nsw i32 %102, %38\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !5\l  %107 = tail call float @llvm.exp.f32(float %106)\l  %108 = fadd contract float %101, %107\l  %109 = or i32 %65, 6\l  %110 = add nsw i32 %109, %38\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !5\l  %114 = tail call float @llvm.exp.f32(float %113)\l  %115 = fadd contract float %108, %114\l  %116 = or i32 %65, 7\l  %117 = add nsw i32 %116, %38\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !5\l  %121 = tail call float @llvm.exp.f32(float %120)\l  %122 = fadd contract float %115, %121\l  %123 = add nuw nsw i32 %65, 8\l  %124 = add i32 %67, 8\l  %125 = icmp eq i32 %124, %18\l  br i1 %125, label %40, label %64, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4c71800:s0 -> Node0x4c717b0;
	Node0x4c71800:s1 -> Node0x4c71800;
	Node0x4c73c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%126:\l126:                                              \l  %127 = phi i32 [ 0, %60 ], [ %206, %156 ]\l  br i1 %23, label %152, label %128\l|{<s0>T|<s1>F}}"];
	Node0x4c73c40:s0 -> Node0x4c73950;
	Node0x4c73c40:s1 -> Node0x4c76cf0;
	Node0x4c76cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%128:\l128:                                              \l  %129 = mul nsw i32 %127, %8\l  %130 = add i32 %63, %129\l  %131 = add nsw i32 %127, %38\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !5\l  %135 = tail call float @llvm.exp.f32(float %134)\l  %136 = fmul contract float %59, %135\l  %137 = tail call i1 @llvm.amdgcn.class.f32(float %136, i32 144)\l  %138 = select i1 %137, float 0x41F0000000000000, float 1.000000e+00\l  %139 = fmul float %136, %138\l  %140 = tail call float @llvm.log2.f32(float %139)\l  %141 = fmul float %140, 0x3FE62E42E0000000\l  %142 = tail call i1 @llvm.amdgcn.class.f32(float %140, i32 519)\l  %143 = fneg float %141\l  %144 = tail call float @llvm.fma.f32(float %140, float 0x3FE62E42E0000000,\l... float %143)\l  %145 = tail call float @llvm.fma.f32(float %140, float 0x3E6EFA39E0000000,\l... float %144)\l  %146 = fadd float %141, %145\l  %147 = select i1 %142, float %140, float %146\l  %148 = select i1 %137, float 0x40362E4300000000, float 0.000000e+00\l  %149 = fsub float %147, %148\l  %150 = sext i32 %130 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150\l  store float %149, float addrspace(1)* %151, align 4, !tbaa !5\l  br label %152\l}"];
	Node0x4c76cf0 -> Node0x4c73950;
	Node0x4c73950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%152:\l152:                                              \l  %153 = load i16, i16 addrspace(4)* %15, align 4, !range !13, !invariant.load\l... !14\l  %154 = zext i16 %153 to i32\l  %155 = add i32 %25, %154\l  br label %209\l}"];
	Node0x4c73950 -> Node0x4c70af0;
	Node0x4c73c90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%156:\l156:                                              \l  %157 = phi i32 [ %206, %156 ], [ 0, %60 ]\l  %158 = phi i32 [ %207, %156 ], [ 0, %60 ]\l  %159 = mul nsw i32 %157, %8\l  %160 = add i32 %63, %159\l  %161 = add nsw i32 %157, %38\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %1, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !5\l  %165 = tail call float @llvm.exp.f32(float %164)\l  %166 = fmul contract float %59, %165\l  %167 = tail call i1 @llvm.amdgcn.class.f32(float %166, i32 144)\l  %168 = select i1 %167, float 0x41F0000000000000, float 1.000000e+00\l  %169 = fmul float %166, %168\l  %170 = tail call float @llvm.log2.f32(float %169)\l  %171 = fmul float %170, 0x3FE62E42E0000000\l  %172 = tail call i1 @llvm.amdgcn.class.f32(float %170, i32 519)\l  %173 = fneg float %171\l  %174 = tail call float @llvm.fma.f32(float %170, float 0x3FE62E42E0000000,\l... float %173)\l  %175 = tail call float @llvm.fma.f32(float %170, float 0x3E6EFA39E0000000,\l... float %174)\l  %176 = fadd float %171, %175\l  %177 = select i1 %172, float %170, float %176\l  %178 = select i1 %167, float 0x40362E4300000000, float 0.000000e+00\l  %179 = fsub float %177, %178\l  %180 = sext i32 %160 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %0, i64 %180\l  store float %179, float addrspace(1)* %181, align 4, !tbaa !5\l  %182 = or i32 %157, 1\l  %183 = mul nsw i32 %182, %8\l  %184 = add i32 %63, %183\l  %185 = add nsw i32 %182, %38\l  %186 = sext i32 %185 to i64\l  %187 = getelementptr inbounds float, float addrspace(1)* %1, i64 %186\l  %188 = load float, float addrspace(1)* %187, align 4, !tbaa !5\l  %189 = tail call float @llvm.exp.f32(float %188)\l  %190 = fmul contract float %59, %189\l  %191 = tail call i1 @llvm.amdgcn.class.f32(float %190, i32 144)\l  %192 = select i1 %191, float 0x41F0000000000000, float 1.000000e+00\l  %193 = fmul float %190, %192\l  %194 = tail call float @llvm.log2.f32(float %193)\l  %195 = fmul float %194, 0x3FE62E42E0000000\l  %196 = tail call i1 @llvm.amdgcn.class.f32(float %194, i32 519)\l  %197 = fneg float %195\l  %198 = tail call float @llvm.fma.f32(float %194, float 0x3FE62E42E0000000,\l... float %197)\l  %199 = tail call float @llvm.fma.f32(float %194, float 0x3E6EFA39E0000000,\l... float %198)\l  %200 = fadd float %195, %199\l  %201 = select i1 %196, float %194, float %200\l  %202 = select i1 %191, float 0x40362E4300000000, float 0.000000e+00\l  %203 = fsub float %201, %202\l  %204 = sext i32 %184 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %204\l  store float %203, float addrspace(1)* %205, align 4, !tbaa !5\l  %206 = add nuw nsw i32 %157, 2\l  %207 = add i32 %158, 2\l  %208 = icmp eq i32 %207, %22\l  br i1 %208, label %126, label %156, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4c73c90:s0 -> Node0x4c73c40;
	Node0x4c73c90:s1 -> Node0x4c73c90;
	Node0x4c70af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%209:\l209:                                              \l  %210 = phi i32 [ %155, %152 ], [ %25, %27 ]\l  br i1 %33, label %24, label %211\l|{<s0>T|<s1>F}}"];
	Node0x4c70af0:s0 -> Node0x4c709c0;
	Node0x4c70af0:s1 -> Node0x4c70d50;
	Node0x4c70d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%211:\l211:                                              \l  ret void\l}"];
}
