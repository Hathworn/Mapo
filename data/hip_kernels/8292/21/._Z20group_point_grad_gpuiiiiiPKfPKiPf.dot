digraph "CFG for '_Z20group_point_grad_gpuiiiiiPKfPKiPf' function" {
	label="CFG for '_Z20group_point_grad_gpuiiiiiPKfPKiPf' function";

	Node0x4890960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = mul nsw i32 %4, %3\l  %11 = mul nsw i32 %10, %9\l  %12 = sext i32 %11 to i64\l  %13 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %12\l  %14 = mul i32 %9, %2\l  %15 = mul i32 %14, %10\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds float, float addrspace(1)* %5, i64 %16\l  %18 = mul i32 %14, %1\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %7, i64 %19\l  %21 = icmp sgt i32 %3, 0\l  br i1 %21, label %22, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4890960:s0 -> Node0x4892460;
	Node0x4890960:s1 -> Node0x48924f0;
	Node0x4892460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%22:\l22:                                               \l  %23 = icmp sgt i32 %4, 0\l  %24 = icmp sgt i32 %2, 0\l  %25 = and i32 %2, 7\l  %26 = icmp ult i32 %2, 8\l  %27 = and i32 %2, -8\l  %28 = icmp eq i32 %25, 0\l  br label %29\l}"];
	Node0x4892460 -> Node0x4892a20;
	Node0x4892a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %22 ], [ %35, %34 ]\l  br i1 %23, label %31, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4892a20:s0 -> Node0x4892c50;
	Node0x4892a20:s1 -> Node0x4892b10;
	Node0x4892c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %30, %4\l  br label %37\l}"];
	Node0x4892c50 -> Node0x4891b00;
	Node0x48924f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%33:\l33:                                               \l  ret void\l}"];
	Node0x4892b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%34:\l34:                                               \l  %35 = add nuw nsw i32 %30, 1\l  %36 = icmp eq i32 %35, %3\l  br i1 %36, label %33, label %29, !llvm.loop !5\l|{<s0>T|<s1>F}}"];
	Node0x4892b10:s0 -> Node0x48924f0;
	Node0x4892b10:s1 -> Node0x4892a20;
	Node0x4891b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%37:\l37:                                               \l  %38 = phi i32 [ 0, %31 ], [ %64, %63 ]\l  %39 = add nsw i32 %38, %32\l  br i1 %24, label %40, label %63\l|{<s0>T|<s1>F}}"];
	Node0x4891b00:s0 -> Node0x4893480;
	Node0x4891b00:s1 -> Node0x48932b0;
	Node0x4893480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%40:\l40:                                               \l  %41 = sext i32 %39 to i64\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %41\l  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !7, !amdgpu.noclobber\l... !11\l  %44 = mul i32 %39, %2\l  %45 = mul nsw i32 %43, %2\l  br i1 %26, label %46, label %66\l|{<s0>T|<s1>F}}"];
	Node0x4893480:s0 -> Node0x4893b50;
	Node0x4893480:s1 -> Node0x4893be0;
	Node0x4893b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%46:\l46:                                               \l  %47 = phi i32 [ 0, %40 ], [ %148, %66 ]\l  br i1 %28, label %63, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4893b50:s0 -> Node0x48932b0;
	Node0x4893b50:s1 -> Node0x4893dd0;
	Node0x4893dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  %49 = phi i32 [ %60, %48 ], [ %47, %46 ]\l  %50 = phi i32 [ %61, %48 ], [ 0, %46 ]\l  %51 = add nsw i32 %49, %44\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %17, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !12\l  %55 = add nsw i32 %49, %45\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %20, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !12\l  %59 = fadd contract float %54, %58\l  store float %59, float addrspace(1)* %57, align 4, !tbaa !12\l  %60 = add nuw nsw i32 %49, 1\l  %61 = add i32 %50, 1\l  %62 = icmp eq i32 %61, %25\l  br i1 %62, label %63, label %48, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4893dd0:s0 -> Node0x48932b0;
	Node0x4893dd0:s1 -> Node0x4893dd0;
	Node0x48932b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%63:\l63:                                               \l  %64 = add nuw nsw i32 %38, 1\l  %65 = icmp eq i32 %64, %4\l  br i1 %65, label %34, label %37, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x48932b0:s0 -> Node0x4892b10;
	Node0x48932b0:s1 -> Node0x4891b00;
	Node0x4893be0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%66:\l66:                                               \l  %67 = phi i32 [ %148, %66 ], [ 0, %40 ]\l  %68 = phi i32 [ %149, %66 ], [ 0, %40 ]\l  %69 = add nsw i32 %67, %44\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %17, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !12\l  %73 = add nsw i32 %67, %45\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %20, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !12\l  %77 = fadd contract float %72, %76\l  store float %77, float addrspace(1)* %75, align 4, !tbaa !12\l  %78 = or i32 %67, 1\l  %79 = add nsw i32 %78, %44\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %17, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !12\l  %83 = add nsw i32 %78, %45\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %20, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !12\l  %87 = fadd contract float %82, %86\l  store float %87, float addrspace(1)* %85, align 4, !tbaa !12\l  %88 = or i32 %67, 2\l  %89 = add nsw i32 %88, %44\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %17, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !12\l  %93 = add nsw i32 %88, %45\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %20, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !12\l  %97 = fadd contract float %92, %96\l  store float %97, float addrspace(1)* %95, align 4, !tbaa !12\l  %98 = or i32 %67, 3\l  %99 = add nsw i32 %98, %44\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %17, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !12\l  %103 = add nsw i32 %98, %45\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %20, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !12\l  %107 = fadd contract float %102, %106\l  store float %107, float addrspace(1)* %105, align 4, !tbaa !12\l  %108 = or i32 %67, 4\l  %109 = add nsw i32 %108, %44\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %17, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !12\l  %113 = add nsw i32 %108, %45\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %20, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !12\l  %117 = fadd contract float %112, %116\l  store float %117, float addrspace(1)* %115, align 4, !tbaa !12\l  %118 = or i32 %67, 5\l  %119 = add nsw i32 %118, %44\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %17, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !12\l  %123 = add nsw i32 %118, %45\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %20, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !12\l  %127 = fadd contract float %122, %126\l  store float %127, float addrspace(1)* %125, align 4, !tbaa !12\l  %128 = or i32 %67, 6\l  %129 = add nsw i32 %128, %44\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %17, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !12\l  %133 = add nsw i32 %128, %45\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %20, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !12\l  %137 = fadd contract float %132, %136\l  store float %137, float addrspace(1)* %135, align 4, !tbaa !12\l  %138 = or i32 %67, 7\l  %139 = add nsw i32 %138, %44\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %17, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !12\l  %143 = add nsw i32 %138, %45\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %20, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !12\l  %147 = fadd contract float %142, %146\l  store float %147, float addrspace(1)* %145, align 4, !tbaa !12\l  %148 = add nuw nsw i32 %67, 8\l  %149 = add i32 %68, 8\l  %150 = icmp eq i32 %149, %27\l  br i1 %150, label %46, label %66, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4893be0:s0 -> Node0x4893b50;
	Node0x4893be0:s1 -> Node0x4893be0;
}
