digraph "CFG for '_Z20query_ball_point_gpuiiiPKfiS0_S0_Pi' function" {
	label="CFG for '_Z20query_ball_point_gpuiiiPKfiS0_S0_Pi' function";

	Node0x5470e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = mul nuw nsw i32 %9, 3\l  %11 = mul i32 %10, %1\l  %12 = sext i32 %11 to i64\l  %13 = getelementptr inbounds float, float addrspace(1)* %5, i64 %12\l  %14 = mul i32 %10, %2\l  %15 = sext i32 %14 to i64\l  %16 = getelementptr inbounds float, float addrspace(1)* %6, i64 %15\l  %17 = mul i32 %9, %2\l  %18 = mul i32 %17, %4\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %19\l  %21 = icmp sgt i32 %2, 0\l  br i1 %21, label %22, label %49\l|{<s0>T|<s1>F}}"];
	Node0x5470e30:s0 -> Node0x5472960;
	Node0x5470e30:s1 -> Node0x54729f0;
	Node0x5472960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%22:\l22:                                               \l  %23 = icmp slt i32 %1, 1\l  %24 = icmp eq i32 %4, 0\l  %25 = select i1 %23, i1 true, i1 %24\l  %26 = icmp slt i32 %4, 1\l  %27 = add i32 %4, -1\l  %28 = and i32 %4, 7\l  %29 = icmp ult i32 %27, 7\l  %30 = and i32 %4, -8\l  %31 = icmp eq i32 %28, 0\l  br label %32\l}"];
	Node0x5472960 -> Node0x5473150;
	Node0x5473150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = phi i32 [ 0, %22 ], [ %160, %159 ]\l  br i1 %25, label %159, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5473150:s0 -> Node0x5472620;
	Node0x5473150:s1 -> Node0x5473480;
	Node0x5473480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = mul nsw i32 %33, 3\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %16, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %39 = add nuw nsw i32 %35, 1\l  %40 = zext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %16, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %43 = add nuw nsw i32 %35, 2\l  %44 = zext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %16, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %47 = load float, float addrspace(1)* %3, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %48 = mul nsw i32 %33, %4\l  br label %50\l}"];
	Node0x5473480 -> Node0x5474cf0;
	Node0x54729f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%49:\l49:                                               \l  ret void\l}"];
	Node0x5474cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%50:\l50:                                               \l  %51 = phi i32 [ 0, %34 ], [ %154, %153 ]\l  %52 = phi i32 [ 0, %34 ], [ %155, %153 ]\l  %53 = mul nuw nsw i32 %52, 3\l  %54 = zext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %13, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %57 = add nuw nsw i32 %53, 1\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %13, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %61 = add nuw nsw i32 %53, 2\l  %62 = zext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %13, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %65 = fsub contract float %38, %56\l  %66 = fmul contract float %65, %65\l  %67 = fsub contract float %42, %60\l  %68 = fmul contract float %67, %67\l  %69 = fadd contract float %66, %68\l  %70 = fsub contract float %46, %64\l  %71 = fmul contract float %70, %70\l  %72 = fadd contract float %69, %71\l  %73 = fcmp olt float %72, 0x39F0000000000000\l  %74 = select i1 %73, float 0x41F0000000000000, float 1.000000e+00\l  %75 = fmul float %72, %74\l  %76 = tail call float @llvm.sqrt.f32(float %75)\l  %77 = bitcast float %76 to i32\l  %78 = add nsw i32 %77, -1\l  %79 = bitcast i32 %78 to float\l  %80 = add nsw i32 %77, 1\l  %81 = bitcast i32 %80 to float\l  %82 = tail call i1 @llvm.amdgcn.class.f32(float %75, i32 608)\l  %83 = select i1 %73, float 0x3EF0000000000000, float 1.000000e+00\l  %84 = fneg float %81\l  %85 = tail call float @llvm.fma.f32(float %84, float %76, float %75)\l  %86 = fcmp ogt float %85, 0.000000e+00\l  %87 = fneg float %79\l  %88 = tail call float @llvm.fma.f32(float %87, float %76, float %75)\l  %89 = fcmp ole float %88, 0.000000e+00\l  %90 = select i1 %89, float %79, float %76\l  %91 = select i1 %86, float %81, float %90\l  %92 = fmul float %83, %91\l  %93 = select i1 %82, float %75, float %92\l  %94 = tail call float @llvm.maxnum.f32(float %93, float 0x3BC79CA100000000)\l  %95 = fcmp contract olt float %94, %47\l  br i1 %95, label %96, label %153\l|{<s0>T|<s1>F}}"];
	Node0x5474cf0:s0 -> Node0x5477e30;
	Node0x5474cf0:s1 -> Node0x5474e40;
	Node0x5477e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%96:\l96:                                               \l  %97 = icmp ne i32 %51, 0\l  %98 = select i1 %97, i1 true, i1 %26\l  br i1 %98, label %148, label %99\l|{<s0>T|<s1>F}}"];
	Node0x5477e30:s0 -> Node0x54780b0;
	Node0x5477e30:s1 -> Node0x5478100;
	Node0x5478100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%99:\l99:                                               \l  br i1 %29, label %137, label %100\l|{<s0>T|<s1>F}}"];
	Node0x5478100:s0 -> Node0x5478240;
	Node0x5478100:s1 -> Node0x5478290;
	Node0x5478290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%100:\l100:                                              \l  %101 = phi i32 [ %134, %100 ], [ 0, %99 ]\l  %102 = phi i32 [ %135, %100 ], [ 0, %99 ]\l  %103 = add nsw i32 %101, %48\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %104\l  store i32 %52, i32 addrspace(1)* %105, align 4, !tbaa !10\l  %106 = or i32 %101, 1\l  %107 = add nsw i32 %106, %48\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %108\l  store i32 %52, i32 addrspace(1)* %109, align 4, !tbaa !10\l  %110 = or i32 %101, 2\l  %111 = add nsw i32 %110, %48\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %112\l  store i32 %52, i32 addrspace(1)* %113, align 4, !tbaa !10\l  %114 = or i32 %101, 3\l  %115 = add nsw i32 %114, %48\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %116\l  store i32 %52, i32 addrspace(1)* %117, align 4, !tbaa !10\l  %118 = or i32 %101, 4\l  %119 = add nsw i32 %118, %48\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %120\l  store i32 %52, i32 addrspace(1)* %121, align 4, !tbaa !10\l  %122 = or i32 %101, 5\l  %123 = add nsw i32 %122, %48\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %124\l  store i32 %52, i32 addrspace(1)* %125, align 4, !tbaa !10\l  %126 = or i32 %101, 6\l  %127 = add nsw i32 %126, %48\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %128\l  store i32 %52, i32 addrspace(1)* %129, align 4, !tbaa !10\l  %130 = or i32 %101, 7\l  %131 = add nsw i32 %130, %48\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %132\l  store i32 %52, i32 addrspace(1)* %133, align 4, !tbaa !10\l  %134 = add nuw nsw i32 %101, 8\l  %135 = add i32 %102, 8\l  %136 = icmp eq i32 %135, %30\l  br i1 %136, label %137, label %100, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5478290:s0 -> Node0x5478240;
	Node0x5478290:s1 -> Node0x5478290;
	Node0x5478240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%137:\l137:                                              \l  %138 = phi i32 [ 0, %99 ], [ %134, %100 ]\l  br i1 %31, label %148, label %139\l|{<s0>T|<s1>F}}"];
	Node0x5478240:s0 -> Node0x54780b0;
	Node0x5478240:s1 -> Node0x547ab60;
	Node0x547ab60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%139:\l139:                                              \l  %140 = phi i32 [ %145, %139 ], [ %138, %137 ]\l  %141 = phi i32 [ %146, %139 ], [ 0, %137 ]\l  %142 = add nsw i32 %140, %48\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %143\l  store i32 %52, i32 addrspace(1)* %144, align 4, !tbaa !10\l  %145 = add nuw nsw i32 %140, 1\l  %146 = add i32 %141, 1\l  %147 = icmp eq i32 %146, %28\l  br i1 %147, label %148, label %139, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x547ab60:s0 -> Node0x54780b0;
	Node0x547ab60:s1 -> Node0x547ab60;
	Node0x54780b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%148:\l148:                                              \l  %149 = add nsw i32 %51, %48\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %150\l  store i32 %52, i32 addrspace(1)* %151, align 4, !tbaa !10\l  %152 = add nsw i32 %51, 1\l  br label %153\l}"];
	Node0x54780b0 -> Node0x5474e40;
	Node0x5474e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%153:\l153:                                              \l  %154 = phi i32 [ %152, %148 ], [ %51, %50 ]\l  %155 = add nuw nsw i32 %52, 1\l  %156 = icmp sge i32 %155, %1\l  %157 = icmp eq i32 %154, %4\l  %158 = select i1 %156, i1 true, i1 %157\l  br i1 %158, label %159, label %50, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5474e40:s0 -> Node0x5472620;
	Node0x5474e40:s1 -> Node0x5474cf0;
	Node0x5472620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%159:\l159:                                              \l  %160 = add nuw nsw i32 %33, 1\l  %161 = icmp eq i32 %160, %2\l  br i1 %161, label %49, label %32, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5472620:s0 -> Node0x54729f0;
	Node0x5472620:s1 -> Node0x5473150;
}
