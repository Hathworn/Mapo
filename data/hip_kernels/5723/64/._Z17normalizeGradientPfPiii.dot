digraph "CFG for '_Z17normalizeGradientPfPiii' function" {
	label="CFG for '_Z17normalizeGradientPfPiii' function";

	Node0x5dceeb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = add i32 %12, %5\l  %14 = icmp slt i32 %13, %2\l  br i1 %14, label %15, label %83\l|{<s0>T|<s1>F}}"];
	Node0x5dceeb0:s0 -> Node0x5dcef00;
	Node0x5dceeb0:s1 -> Node0x5dd0e40;
	Node0x5dcef00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%15:\l15:                                               \l  %16 = sext i32 %13 to i64\l  %17 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %16\l  %18 = load i32, i32 addrspace(1)* %17, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %19 = mul nsw i32 %3, 6\l  %20 = add nsw i32 %18, %19\l  %21 = sext i32 %20 to i64\l  %22 = getelementptr inbounds float, float addrspace(1)* %0, i64 %21\l  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %24 = fcmp contract ogt float %23, 0.000000e+00\l  br i1 %24, label %25, label %48\l|{<s0>T|<s1>F}}"];
	Node0x5dcef00:s0 -> Node0x5dd2860;
	Node0x5dcef00:s1 -> Node0x5dd28f0;
	Node0x5dd2860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%25:\l25:                                               \l  %26 = fcmp olt float %23, 0x39F0000000000000\l  %27 = select i1 %26, float 0x41F0000000000000, float 1.000000e+00\l  %28 = fmul float %23, %27\l  %29 = tail call float @llvm.sqrt.f32(float %28)\l  %30 = bitcast float %29 to i32\l  %31 = add nsw i32 %30, -1\l  %32 = bitcast i32 %31 to float\l  %33 = add nsw i32 %30, 1\l  %34 = bitcast i32 %33 to float\l  %35 = tail call i1 @llvm.amdgcn.class.f32(float %28, i32 608)\l  %36 = select i1 %26, float 0x3EF0000000000000, float 1.000000e+00\l  %37 = fneg float %34\l  %38 = tail call float @llvm.fma.f32(float %37, float %29, float %28)\l  %39 = fcmp ogt float %38, 0.000000e+00\l  %40 = fneg float %32\l  %41 = tail call float @llvm.fma.f32(float %40, float %29, float %28)\l  %42 = fcmp ole float %41, 0.000000e+00\l  %43 = select i1 %42, float %32, float %29\l  %44 = select i1 %39, float %34, float %43\l  %45 = fmul float %36, %44\l  %46 = select i1 %35, float %28, float %45\l  %47 = fdiv contract float 1.000000e+00, %46\l  br label %48\l}"];
	Node0x5dd2860 -> Node0x5dd28f0;
	Node0x5dd28f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%48:\l48:                                               \l  %49 = phi float [ %47, %25 ], [ %23, %15 ]\l  %50 = sext i32 %18 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !11\l  %53 = fmul contract float %49, %52\l  store float %53, float addrspace(1)* %51, align 4, !tbaa !11\l  %54 = add nsw i32 %18, %3\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !11\l  %58 = fmul contract float %49, %57\l  store float %58, float addrspace(1)* %56, align 4, !tbaa !11\l  %59 = shl nsw i32 %3, 1\l  %60 = add nsw i32 %59, %18\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !11\l  %64 = fmul contract float %49, %63\l  store float %64, float addrspace(1)* %62, align 4, !tbaa !11\l  %65 = mul nsw i32 %3, 3\l  %66 = add nsw i32 %65, %18\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !11\l  %70 = fmul contract float %49, %69\l  store float %70, float addrspace(1)* %68, align 4, !tbaa !11\l  %71 = shl nsw i32 %3, 2\l  %72 = add nsw i32 %71, %18\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !11\l  %76 = fmul contract float %49, %75\l  store float %76, float addrspace(1)* %74, align 4, !tbaa !11\l  %77 = mul nsw i32 %3, 5\l  %78 = add nsw i32 %77, %18\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !11\l  %82 = fmul contract float %49, %81\l  store float %82, float addrspace(1)* %80, align 4, !tbaa !11\l  br label %83\l}"];
	Node0x5dd28f0 -> Node0x5dd0e40;
	Node0x5dd0e40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%83:\l83:                                               \l  ret void\l}"];
}
