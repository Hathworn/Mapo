digraph "CFG for '_Z8copy_memPhS_' function" {
	label="CFG for '_Z8copy_memPhS_' function";

	Node0x5cf3180 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = shl i32 %5, 5\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %8 = add i32 %6, %7\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !5\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !14, !invariant.load\l... !15\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %8, %21\l  %23 = add i32 %22, %3\l  %24 = shl i32 %23, 5\l  %25 = add i32 %24, %4\l  %26 = mul nsw i32 %25, 3\l  %27 = sext i32 %26 to i64\l  %28 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %27\l  %29 = load i8, i8 addrspace(1)* %28, align 1, !tbaa !16\l  %30 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %27\l  store i8 %29, i8 addrspace(1)* %30, align 1, !tbaa !16\l  %31 = add nsw i32 %26, 1\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %32\l  %34 = load i8, i8 addrspace(1)* %33, align 1, !tbaa !16\l  %35 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %32\l  store i8 %34, i8 addrspace(1)* %35, align 1, !tbaa !16\l  %36 = add nsw i32 %26, 2\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %37\l  %39 = load i8, i8 addrspace(1)* %38, align 1, !tbaa !16\l  %40 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %37\l  store i8 %39, i8 addrspace(1)* %40, align 1, !tbaa !16\l  %41 = add nsw i32 %8, 8\l  %42 = mul i32 %41, %21\l  %43 = add i32 %42, %3\l  %44 = shl i32 %43, 5\l  %45 = add i32 %44, %4\l  %46 = mul nsw i32 %45, 3\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %47\l  %49 = load i8, i8 addrspace(1)* %48, align 1, !tbaa !16\l  %50 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %47\l  store i8 %49, i8 addrspace(1)* %50, align 1, !tbaa !16\l  %51 = add nsw i32 %46, 1\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %52\l  %54 = load i8, i8 addrspace(1)* %53, align 1, !tbaa !16\l  %55 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %52\l  store i8 %54, i8 addrspace(1)* %55, align 1, !tbaa !16\l  %56 = add nsw i32 %46, 2\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %57\l  %59 = load i8, i8 addrspace(1)* %58, align 1, !tbaa !16\l  %60 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %57\l  store i8 %59, i8 addrspace(1)* %60, align 1, !tbaa !16\l  %61 = add nsw i32 %8, 16\l  %62 = mul i32 %61, %21\l  %63 = add i32 %62, %3\l  %64 = shl i32 %63, 5\l  %65 = add i32 %64, %4\l  %66 = mul nsw i32 %65, 3\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %67\l  %69 = load i8, i8 addrspace(1)* %68, align 1, !tbaa !16\l  %70 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %67\l  store i8 %69, i8 addrspace(1)* %70, align 1, !tbaa !16\l  %71 = add nsw i32 %66, 1\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %72\l  %74 = load i8, i8 addrspace(1)* %73, align 1, !tbaa !16\l  %75 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %72\l  store i8 %74, i8 addrspace(1)* %75, align 1, !tbaa !16\l  %76 = add nsw i32 %66, 2\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %77\l  %79 = load i8, i8 addrspace(1)* %78, align 1, !tbaa !16\l  %80 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %77\l  store i8 %79, i8 addrspace(1)* %80, align 1, !tbaa !16\l  %81 = add nsw i32 %8, 24\l  %82 = mul i32 %81, %21\l  %83 = add i32 %82, %3\l  %84 = shl i32 %83, 5\l  %85 = add i32 %84, %4\l  %86 = mul nsw i32 %85, 3\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %87\l  %89 = load i8, i8 addrspace(1)* %88, align 1, !tbaa !16\l  %90 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %87\l  store i8 %89, i8 addrspace(1)* %90, align 1, !tbaa !16\l  %91 = add nsw i32 %86, 1\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %92\l  %94 = load i8, i8 addrspace(1)* %93, align 1, !tbaa !16\l  %95 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %92\l  store i8 %94, i8 addrspace(1)* %95, align 1, !tbaa !16\l  %96 = add nsw i32 %86, 2\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %97\l  %99 = load i8, i8 addrspace(1)* %98, align 1, !tbaa !16\l  %100 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %97\l  store i8 %99, i8 addrspace(1)* %100, align 1, !tbaa !16\l  ret void\l}"];
}
