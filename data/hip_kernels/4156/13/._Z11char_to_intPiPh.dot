digraph "CFG for '_Z11char_to_intPiPh' function" {
	label="CFG for '_Z11char_to_intPiPh' function";

	Node0x4b4c1c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = shl i32 %5, 5\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %8 = add i32 %6, %7\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !5\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !14, !invariant.load\l... !15\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %8, %21\l  %23 = add i32 %22, %3\l  %24 = shl i32 %23, 5\l  %25 = add i32 %24, %4\l  %26 = mul nsw i32 %25, 3\l  %27 = sext i32 %26 to i64\l  %28 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %27\l  %29 = load i8, i8 addrspace(1)* %28, align 1, !tbaa !16\l  %30 = zext i8 %29 to i32\l  %31 = shl nuw nsw i32 %30, 16\l  %32 = add nsw i32 %26, 1\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %33\l  %35 = load i8, i8 addrspace(1)* %34, align 1, !tbaa !16\l  %36 = zext i8 %35 to i32\l  %37 = shl nuw nsw i32 %36, 8\l  %38 = or i32 %37, %31\l  %39 = add nsw i32 %26, 2\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %40\l  %42 = load i8, i8 addrspace(1)* %41, align 1, !tbaa !16\l  %43 = zext i8 %42 to i32\l  %44 = or i32 %38, %43\l  %45 = sext i32 %25 to i64\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %45\l  store i32 %44, i32 addrspace(1)* %46, align 4, !tbaa !19\l  %47 = add nsw i32 %8, 8\l  %48 = mul i32 %47, %21\l  %49 = add i32 %48, %3\l  %50 = shl i32 %49, 5\l  %51 = add i32 %50, %4\l  %52 = mul nsw i32 %51, 3\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %53\l  %55 = load i8, i8 addrspace(1)* %54, align 1, !tbaa !16\l  %56 = zext i8 %55 to i32\l  %57 = shl nuw nsw i32 %56, 16\l  %58 = add nsw i32 %52, 1\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %59\l  %61 = load i8, i8 addrspace(1)* %60, align 1, !tbaa !16\l  %62 = zext i8 %61 to i32\l  %63 = shl nuw nsw i32 %62, 8\l  %64 = or i32 %63, %57\l  %65 = add nsw i32 %52, 2\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %66\l  %68 = load i8, i8 addrspace(1)* %67, align 1, !tbaa !16\l  %69 = zext i8 %68 to i32\l  %70 = or i32 %64, %69\l  %71 = sext i32 %51 to i64\l  %72 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %71\l  store i32 %70, i32 addrspace(1)* %72, align 4, !tbaa !19\l  %73 = add nsw i32 %8, 16\l  %74 = mul i32 %73, %21\l  %75 = add i32 %74, %3\l  %76 = shl i32 %75, 5\l  %77 = add i32 %76, %4\l  %78 = mul nsw i32 %77, 3\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %79\l  %81 = load i8, i8 addrspace(1)* %80, align 1, !tbaa !16\l  %82 = zext i8 %81 to i32\l  %83 = shl nuw nsw i32 %82, 16\l  %84 = add nsw i32 %78, 1\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %85\l  %87 = load i8, i8 addrspace(1)* %86, align 1, !tbaa !16\l  %88 = zext i8 %87 to i32\l  %89 = shl nuw nsw i32 %88, 8\l  %90 = or i32 %89, %83\l  %91 = add nsw i32 %78, 2\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %92\l  %94 = load i8, i8 addrspace(1)* %93, align 1, !tbaa !16\l  %95 = zext i8 %94 to i32\l  %96 = or i32 %90, %95\l  %97 = sext i32 %77 to i64\l  %98 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %97\l  store i32 %96, i32 addrspace(1)* %98, align 4, !tbaa !19\l  %99 = add nsw i32 %8, 24\l  %100 = mul i32 %99, %21\l  %101 = add i32 %100, %3\l  %102 = shl i32 %101, 5\l  %103 = add i32 %102, %4\l  %104 = mul nsw i32 %103, 3\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %105\l  %107 = load i8, i8 addrspace(1)* %106, align 1, !tbaa !16\l  %108 = zext i8 %107 to i32\l  %109 = shl nuw nsw i32 %108, 16\l  %110 = add nsw i32 %104, 1\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %111\l  %113 = load i8, i8 addrspace(1)* %112, align 1, !tbaa !16\l  %114 = zext i8 %113 to i32\l  %115 = shl nuw nsw i32 %114, 8\l  %116 = or i32 %115, %109\l  %117 = add nsw i32 %104, 2\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %118\l  %120 = load i8, i8 addrspace(1)* %119, align 1, !tbaa !16\l  %121 = zext i8 %120 to i32\l  %122 = or i32 %116, %121\l  %123 = sext i32 %103 to i64\l  %124 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %123\l  store i32 %122, i32 addrspace(1)* %124, align 4, !tbaa !19\l  ret void\l}"];
}
