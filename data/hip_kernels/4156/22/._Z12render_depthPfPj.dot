digraph "CFG for '_Z12render_depthPfPj' function" {
	label="CFG for '_Z12render_depthPfPj' function";

	Node0x5facc00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = shl i32 %3, 5\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = add i32 %4, %5\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = shl i32 %7, 5\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %10 = add i32 %8, %9\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !5\l  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !14, !invariant.load\l... !15\l  %18 = zext i16 %17 to i32\l  %19 = udiv i32 %14, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %14, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = shl i32 %23, 5\l  %25 = ashr exact i32 %24, 1\l  %26 = sitofp i32 %24 to double\l  %27 = sitofp i32 %25 to double\l  %28 = mul nsw i32 %10, %24\l  %29 = add nsw i32 %6, %28\l  %30 = mul nsw i32 %29, 3\l  %31 = add nsw i32 %30, 1\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %35 = fpext float %34 to double\l  %36 = fadd contract double %35, 0x400921FB54442D18\l  %37 = fdiv contract double %36, 0x401921FB54442D18\l  %38 = fmul contract double %37, %26\l  %39 = fadd contract double %38, -5.000000e-01\l  %40 = tail call double @llvm.round.f64(double %39)\l  %41 = fptosi double %40 to i32\l  %42 = add nsw i32 %30, 2\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !16\l  %46 = fpext float %45 to double\l  %47 = fdiv contract double %46, 0x400921FB54442D18\l  %48 = fmul contract double %47, %27\l  %49 = fadd contract double %48, -5.000000e-01\l  %50 = tail call double @llvm.round.f64(double %49)\l  %51 = fptosi double %50 to i32\l  %52 = sext i32 %30 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %55 = fmul contract float %54, 5.120000e+02\l  %56 = fptosi float %55 to i32\l  %57 = mul nsw i32 %24, %51\l  %58 = add nsw i32 %57, %41\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %59\l  %61 = atomicrmw umin i32 addrspace(1)* %60, i32 %56\l... syncscope(\"agent-one-as\") monotonic, align 4\l  %62 = add nsw i32 %10, 8\l  %63 = mul nsw i32 %62, %24\l  %64 = add nsw i32 %6, %63\l  %65 = mul nsw i32 %64, 3\l  %66 = add nsw i32 %65, 1\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16\l  %70 = fpext float %69 to double\l  %71 = fadd contract double %70, 0x400921FB54442D18\l  %72 = fdiv contract double %71, 0x401921FB54442D18\l  %73 = fmul contract double %72, %26\l  %74 = fadd contract double %73, -5.000000e-01\l  %75 = tail call double @llvm.round.f64(double %74)\l  %76 = fptosi double %75 to i32\l  %77 = add nsw i32 %65, 2\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !16\l  %81 = fpext float %80 to double\l  %82 = fdiv contract double %81, 0x400921FB54442D18\l  %83 = fmul contract double %82, %27\l  %84 = fadd contract double %83, -5.000000e-01\l  %85 = tail call double @llvm.round.f64(double %84)\l  %86 = fptosi double %85 to i32\l  %87 = sext i32 %65 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16\l  %90 = fmul contract float %89, 5.120000e+02\l  %91 = fptosi float %90 to i32\l  %92 = mul nsw i32 %24, %86\l  %93 = add nsw i32 %92, %76\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %94\l  %96 = atomicrmw umin i32 addrspace(1)* %95, i32 %91\l... syncscope(\"agent-one-as\") monotonic, align 4\l  %97 = add nsw i32 %10, 16\l  %98 = mul nsw i32 %97, %24\l  %99 = add nsw i32 %6, %98\l  %100 = mul nsw i32 %99, 3\l  %101 = add nsw i32 %100, 1\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16\l  %105 = fpext float %104 to double\l  %106 = fadd contract double %105, 0x400921FB54442D18\l  %107 = fdiv contract double %106, 0x401921FB54442D18\l  %108 = fmul contract double %107, %26\l  %109 = fadd contract double %108, -5.000000e-01\l  %110 = tail call double @llvm.round.f64(double %109)\l  %111 = fptosi double %110 to i32\l  %112 = add nsw i32 %100, 2\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16\l  %116 = fpext float %115 to double\l  %117 = fdiv contract double %116, 0x400921FB54442D18\l  %118 = fmul contract double %117, %27\l  %119 = fadd contract double %118, -5.000000e-01\l  %120 = tail call double @llvm.round.f64(double %119)\l  %121 = fptosi double %120 to i32\l  %122 = sext i32 %100 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %0, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !16\l  %125 = fmul contract float %124, 5.120000e+02\l  %126 = fptosi float %125 to i32\l  %127 = mul nsw i32 %24, %121\l  %128 = add nsw i32 %127, %111\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %129\l  %131 = atomicrmw umin i32 addrspace(1)* %130, i32 %126\l... syncscope(\"agent-one-as\") monotonic, align 4\l  %132 = add nsw i32 %10, 24\l  %133 = mul nsw i32 %132, %24\l  %134 = add nsw i32 %6, %133\l  %135 = mul nsw i32 %134, 3\l  %136 = add nsw i32 %135, 1\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = fpext float %139 to double\l  %141 = fadd contract double %140, 0x400921FB54442D18\l  %142 = fdiv contract double %141, 0x401921FB54442D18\l  %143 = fmul contract double %142, %26\l  %144 = fadd contract double %143, -5.000000e-01\l  %145 = tail call double @llvm.round.f64(double %144)\l  %146 = fptosi double %145 to i32\l  %147 = add nsw i32 %135, 2\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16\l  %151 = fpext float %150 to double\l  %152 = fdiv contract double %151, 0x400921FB54442D18\l  %153 = fmul contract double %152, %27\l  %154 = fadd contract double %153, -5.000000e-01\l  %155 = tail call double @llvm.round.f64(double %154)\l  %156 = fptosi double %155 to i32\l  %157 = sext i32 %135 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %0, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !16\l  %160 = fmul contract float %159, 5.120000e+02\l  %161 = fptosi float %160 to i32\l  %162 = mul nsw i32 %24, %156\l  %163 = add nsw i32 %162, %146\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %164\l  %166 = atomicrmw umin i32 addrspace(1)* %165, i32 %161\l... syncscope(\"agent-one-as\") monotonic, align 4\l  ret void\l}"];
}
