digraph "CFG for '_Z11int_to_charPiPh' function" {
	label="CFG for '_Z11int_to_charPiPh' function";

	Node0x5f9c2b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = shl i32 %5, 5\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %8 = add i32 %6, %7\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !5\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !14, !invariant.load\l... !15\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %8, %21\l  %23 = add i32 %22, %3\l  %24 = shl i32 %23, 5\l  %25 = add i32 %24, %4\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %26\l  %28 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !16\l  %29 = sdiv i32 %28, 65536\l  %30 = trunc i32 %29 to i8\l  %31 = mul nsw i32 %25, 3\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %32\l  store i8 %30, i8 addrspace(1)* %33, align 1, !tbaa !20\l  %34 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !16\l  %35 = sdiv i32 %34, 256\l  %36 = trunc i32 %35 to i8\l  %37 = add nsw i32 %31, 1\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %38\l  store i8 %36, i8 addrspace(1)* %39, align 1, !tbaa !20\l  %40 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !16\l  %41 = trunc i32 %40 to i8\l  %42 = add nsw i32 %31, 2\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %43\l  store i8 %41, i8 addrspace(1)* %44, align 1, !tbaa !20\l  %45 = add nsw i32 %8, 8\l  %46 = mul i32 %45, %21\l  %47 = add i32 %46, %3\l  %48 = shl i32 %47, 5\l  %49 = add i32 %48, %4\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %50\l  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !16\l  %53 = sdiv i32 %52, 65536\l  %54 = trunc i32 %53 to i8\l  %55 = mul nsw i32 %49, 3\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %56\l  store i8 %54, i8 addrspace(1)* %57, align 1, !tbaa !20\l  %58 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !16\l  %59 = sdiv i32 %58, 256\l  %60 = trunc i32 %59 to i8\l  %61 = add nsw i32 %55, 1\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %62\l  store i8 %60, i8 addrspace(1)* %63, align 1, !tbaa !20\l  %64 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !16\l  %65 = trunc i32 %64 to i8\l  %66 = add nsw i32 %55, 2\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %67\l  store i8 %65, i8 addrspace(1)* %68, align 1, !tbaa !20\l  %69 = add nsw i32 %8, 16\l  %70 = mul i32 %69, %21\l  %71 = add i32 %70, %3\l  %72 = shl i32 %71, 5\l  %73 = add i32 %72, %4\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %74\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !16\l  %77 = sdiv i32 %76, 65536\l  %78 = trunc i32 %77 to i8\l  %79 = mul nsw i32 %73, 3\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %80\l  store i8 %78, i8 addrspace(1)* %81, align 1, !tbaa !20\l  %82 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !16\l  %83 = sdiv i32 %82, 256\l  %84 = trunc i32 %83 to i8\l  %85 = add nsw i32 %79, 1\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %86\l  store i8 %84, i8 addrspace(1)* %87, align 1, !tbaa !20\l  %88 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !16\l  %89 = trunc i32 %88 to i8\l  %90 = add nsw i32 %79, 2\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %91\l  store i8 %89, i8 addrspace(1)* %92, align 1, !tbaa !20\l  %93 = add nsw i32 %8, 24\l  %94 = mul i32 %93, %21\l  %95 = add i32 %94, %3\l  %96 = shl i32 %95, 5\l  %97 = add i32 %96, %4\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %98\l  %100 = load i32, i32 addrspace(1)* %99, align 4, !tbaa !16\l  %101 = sdiv i32 %100, 65536\l  %102 = trunc i32 %101 to i8\l  %103 = mul nsw i32 %97, 3\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %104\l  store i8 %102, i8 addrspace(1)* %105, align 1, !tbaa !20\l  %106 = load i32, i32 addrspace(1)* %99, align 4, !tbaa !16\l  %107 = sdiv i32 %106, 256\l  %108 = trunc i32 %107 to i8\l  %109 = add nsw i32 %103, 1\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %110\l  store i8 %108, i8 addrspace(1)* %111, align 1, !tbaa !20\l  %112 = load i32, i32 addrspace(1)* %99, align 4, !tbaa !16\l  %113 = trunc i32 %112 to i8\l  %114 = add nsw i32 %103, 2\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %115\l  store i8 %113, i8 addrspace(1)* %116, align 1, !tbaa !20\l  ret void\l}"];
}
