; ModuleID = '../data/hip_kernels/4156/25/main.cu'
source_filename = "../data/hip_kernels/4156/25/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z12render_finalPfS_S_PiS0_ii(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture writeonly %1, float addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, i32 addrspace(1)* nocapture writeonly %4, i32 %5, i32 %6) local_unnamed_addr #0 {
  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %9 = shl i32 %8, 5
  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %11 = add i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %13 = shl i32 %12, 5
  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4
  %15 = add i32 %13, %14
  %16 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %17 = getelementptr inbounds i8, i8 addrspace(4)* %16, i64 12
  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*
  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !5
  %20 = getelementptr i8, i8 addrspace(4)* %16, i64 4
  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*
  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !14, !invariant.load !15
  %23 = zext i16 %22 to i32
  %24 = udiv i32 %19, %23
  %25 = mul i32 %24, %23
  %26 = icmp ugt i32 %19, %25
  %27 = zext i1 %26 to i32
  %28 = add i32 %24, %27
  %29 = shl i32 %28, 5
  %30 = ashr exact i32 %29, 1
  %31 = mul nsw i32 %6, %5
  %32 = sitofp i32 %6 to float
  %33 = sitofp i32 %5 to float
  %34 = ashr exact i32 %29, 4
  %35 = icmp sgt i32 %15, %34
  %36 = mul nsw i32 %30, 7
  %37 = ashr exact i32 %36, 3
  %38 = icmp slt i32 %15, %37
  %39 = mul nsw i32 %15, %29
  %40 = add nsw i32 %39, %11
  %41 = mul nsw i32 %40, 3
  %42 = add nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43
  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !16
  %46 = fadd contract float %45, 1.000000e+00
  %47 = fmul contract float %46, 5.000000e-01
  %48 = fmul contract float %47, %32
  %49 = fpext float %48 to double
  %50 = fadd contract double %49, -5.000000e-01
  %51 = tail call double @llvm.round.f64(double %50)
  %52 = fptosi double %51 to i32
  %53 = add nsw i32 %41, 2
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !16
  %57 = fadd contract float %56, 1.000000e+00
  %58 = fmul contract float %57, 5.000000e-01
  %59 = fmul contract float %58, %33
  %60 = fpext float %59 to double
  %61 = fadd contract double %60, -5.000000e-01
  %62 = tail call double @llvm.round.f64(double %61)
  %63 = fptosi double %62 to i32
  %64 = fadd contract float %48, -5.000000e-01
  %65 = fadd contract float %59, -5.000000e-01
  %66 = add nsw i32 %40, 1
  %67 = mul nsw i32 %66, 3
  %68 = add nsw i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69
  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !16
  %72 = fadd contract float %71, 1.000000e+00
  %73 = fmul contract float %72, 5.000000e-01
  %74 = fmul contract float %73, %32
  %75 = fpext float %74 to double
  %76 = fadd contract double %75, -5.000000e-01
  %77 = fpext float %64 to double
  %78 = fsub contract double %76, %77
  %79 = fptrunc double %78 to float
  %80 = add nsw i32 %67, 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16
  %84 = fadd contract float %83, 1.000000e+00
  %85 = fmul contract float %84, 5.000000e-01
  %86 = fmul contract float %85, %33
  %87 = fpext float %86 to double
  %88 = fadd contract double %87, -5.000000e-01
  %89 = fpext float %65 to double
  %90 = fsub contract double %88, %89
  %91 = fptrunc double %90 to float
  %92 = add nsw i32 %15, 1
  %93 = mul nsw i32 %92, %29
  %94 = add nsw i32 %93, %11
  %95 = mul nsw i32 %94, 3
  %96 = add nsw i32 %95, 1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97
  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16
  %100 = fadd contract float %99, 1.000000e+00
  %101 = fmul contract float %100, 5.000000e-01
  %102 = fmul contract float %101, %32
  %103 = fpext float %102 to double
  %104 = fadd contract double %103, -5.000000e-01
  %105 = fsub contract double %104, %77
  %106 = fptrunc double %105 to float
  %107 = add nsw i32 %95, 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16
  %111 = fadd contract float %110, 1.000000e+00
  %112 = fmul contract float %111, 5.000000e-01
  %113 = fmul contract float %112, %33
  %114 = fpext float %113 to double
  %115 = fadd contract double %114, -5.000000e-01
  %116 = fsub contract double %115, %89
  %117 = fptrunc double %116 to float
  %118 = add nsw i32 %94, 1
  %119 = mul nsw i32 %118, 3
  %120 = add nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121
  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16
  %124 = fadd contract float %123, 1.000000e+00
  %125 = fmul contract float %124, 5.000000e-01
  %126 = fmul contract float %125, %32
  %127 = fpext float %126 to double
  %128 = fadd contract double %127, -5.000000e-01
  %129 = fsub contract double %128, %77
  %130 = fptrunc double %129 to float
  %131 = add nsw i32 %119, 2
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132
  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16
  %135 = fadd contract float %134, 1.000000e+00
  %136 = fmul contract float %135, 5.000000e-01
  %137 = fmul contract float %136, %33
  %138 = fpext float %137 to double
  %139 = fadd contract double %138, -5.000000e-01
  %140 = fsub contract double %139, %89
  %141 = fptrunc double %140 to float
  %142 = fpext float %79 to double
  %143 = fdiv contract double %142, 3.000000e+00
  %144 = fsub contract double 0.000000e+00, %143
  %145 = fpext float %106 to double
  %146 = fmul contract double %145, 2.000000e+00
  %147 = fdiv contract double %146, 3.000000e+00
  %148 = fadd contract double %144, %147
  %149 = fpext float %130 to double
  %150 = fdiv contract double %149, 3.000000e+00
  %151 = fadd contract double %148, %150
  %152 = fptrunc double %151 to float
  %153 = fpext float %91 to double
  %154 = fdiv contract double %153, 3.000000e+00
  %155 = fsub contract double 0.000000e+00, %154
  %156 = fpext float %117 to double
  %157 = fmul contract double %156, 2.000000e+00
  %158 = fdiv contract double %157, 3.000000e+00
  %159 = fadd contract double %155, %158
  %160 = fpext float %141 to double
  %161 = fdiv contract double %160, 3.000000e+00
  %162 = fadd contract double %159, %161
  %163 = fptrunc double %162 to float
  %164 = fmul contract double %142, 2.000000e+00
  %165 = fdiv contract double %164, 3.000000e+00
  %166 = fadd contract double %165, 0.000000e+00
  %167 = fdiv contract double %145, 3.000000e+00
  %168 = fsub contract double %166, %167
  %169 = fadd contract double %168, %150
  %170 = fptrunc double %169 to float
  %171 = fmul contract double %153, 2.000000e+00
  %172 = fdiv contract double %171, 3.000000e+00
  %173 = fadd contract double %172, 0.000000e+00
  %174 = fdiv contract double %156, 3.000000e+00
  %175 = fsub contract double %173, %174
  %176 = fadd contract double %175, %161
  %177 = fptrunc double %176 to float
  %178 = fmul contract float %152, %177
  %179 = fmul contract float %170, %163
  %180 = fsub contract float %178, %179
  %181 = fpext float %180 to double
  %182 = fadd contract double %181, 1.000000e-10
  %183 = fptrunc double %182 to float
  %184 = fdiv contract float %177, %183
  %185 = fneg contract float %163
  %186 = fdiv contract float %185, %183
  %187 = fneg contract float %170
  %188 = fdiv contract float %187, %183
  %189 = fdiv contract float %152, %183
  %190 = sext i32 %41 to i64
  %191 = getelementptr inbounds float, float addrspace(1)* %0, i64 %190
  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !16
  %193 = fmul contract float %192, 1.000000e+02
  %194 = fptosi float %193 to i32
  %195 = mul nsw i32 %63, %6
  %196 = add nsw i32 %195, %52
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds float, float addrspace(1)* %2, i64 %197
  %199 = load float, float addrspace(1)* %198, align 4, !tbaa !16
  %200 = fmul contract float %199, 1.000000e+02
  %201 = fptosi float %200 to i32
  %202 = sub nsw i32 %194, %201
  %203 = sext i32 %67 to i64
  %204 = getelementptr inbounds float, float addrspace(1)* %0, i64 %203
  %205 = load float, float addrspace(1)* %204, align 4, !tbaa !16
  %206 = fmul contract float %205, 1.000000e+02
  %207 = fptosi float %206 to i32
  %208 = add nsw i32 %196, 1
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float addrspace(1)* %2, i64 %209
  %211 = load float, float addrspace(1)* %210, align 4, !tbaa !16
  %212 = fmul contract float %211, 1.000000e+02
  %213 = fptosi float %212 to i32
  %214 = sub nsw i32 %207, %213
  %215 = sext i32 %95 to i64
  %216 = getelementptr inbounds float, float addrspace(1)* %0, i64 %215
  %217 = load float, float addrspace(1)* %216, align 4, !tbaa !16
  %218 = fmul contract float %217, 1.000000e+02
  %219 = fptosi float %218 to i32
  %220 = add nsw i32 %63, 1
  %221 = mul nsw i32 %220, %6
  %222 = add nsw i32 %221, %52
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds float, float addrspace(1)* %2, i64 %223
  %225 = load float, float addrspace(1)* %224, align 4, !tbaa !16
  %226 = fmul contract float %225, 1.000000e+02
  %227 = fptosi float %226 to i32
  %228 = sub nsw i32 %219, %227
  %229 = sext i32 %119 to i64
  %230 = getelementptr inbounds float, float addrspace(1)* %0, i64 %229
  %231 = load float, float addrspace(1)* %230, align 4, !tbaa !16
  %232 = fmul contract float %231, 1.000000e+02
  %233 = fptosi float %232 to i32
  %234 = add nsw i32 %222, 1
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds float, float addrspace(1)* %2, i64 %235
  %237 = load float, float addrspace(1)* %236, align 4, !tbaa !16
  %238 = fmul contract float %237, 1.000000e+02
  %239 = fptosi float %238 to i32
  %240 = sub nsw i32 %233, %239
  %241 = tail call i32 @llvm.smax.i32(i32 %202, i32 %214)
  %242 = tail call i32 @llvm.smax.i32(i32 %228, i32 %240)
  %243 = tail call i32 @llvm.smax.i32(i32 %241, i32 %242)
  %244 = tail call i32 @llvm.smax.i32(i32 %194, i32 %219)
  %245 = tail call i32 @llvm.smax.i32(i32 %207, i32 %233)
  %246 = tail call i32 @llvm.smax.i32(i32 %244, i32 %245)
  %247 = tail call i32 @llvm.smin.i32(i32 %194, i32 %219)
  %248 = tail call i32 @llvm.smin.i32(i32 %207, i32 %233)
  %249 = tail call i32 @llvm.smin.i32(i32 %247, i32 %248)
  %250 = sub nsw i32 %246, %249
  %251 = tail call float @llvm.minnum.f32(float %130, float 0.000000e+00)
  %252 = tail call float @llvm.minnum.f32(float %79, float %106)
  %253 = tail call float @llvm.minnum.f32(float %251, float %252)
  %254 = fadd contract float %64, %253
  %255 = tail call float @llvm.floor.f32(float %254)
  %256 = fptosi float %255 to i32
  %257 = tail call float @llvm.maxnum.f32(float %130, float 0.000000e+00)
  %258 = tail call float @llvm.maxnum.f32(float %79, float %106)
  %259 = tail call float @llvm.maxnum.f32(float %257, float %258)
  %260 = fadd contract float %64, %259
  %261 = tail call float @llvm.ceil.f32(float %260)
  %262 = fptosi float %261 to i32
  %263 = tail call float @llvm.minnum.f32(float %141, float 0.000000e+00)
  %264 = tail call float @llvm.minnum.f32(float %91, float %117)
  %265 = tail call float @llvm.minnum.f32(float %263, float %264)
  %266 = fadd contract float %65, %265
  %267 = tail call float @llvm.floor.f32(float %266)
  %268 = fptosi float %267 to i32
  %269 = tail call float @llvm.maxnum.f32(float %141, float 0.000000e+00)
  %270 = tail call float @llvm.maxnum.f32(float %91, float %117)
  %271 = tail call float @llvm.maxnum.f32(float %269, float %270)
  %272 = fadd contract float %65, %271
  %273 = tail call float @llvm.ceil.f32(float %272)
  %274 = fptosi float %273 to i32
  %275 = sitofp i32 %194 to double
  %276 = fmul contract double %275, 1.000000e-01
  %277 = fcmp contract ogt double %276, 1.000000e+01
  %278 = select contract i1 %277, double %276, double 1.000000e+01
  %279 = fptrunc double %278 to float
  %280 = sitofp i32 %246 to double
  %281 = fmul contract double %280, 5.000000e-02
  %282 = fcmp contract ogt double %281, 1.000000e+01
  %283 = select contract i1 %282, double %281, double 1.000000e+01
  %284 = fptrunc double %283 to float
  %285 = sitofp i32 %250 to float
  %286 = fcmp contract olt float %285, %284
  %287 = select i1 %286, i1 %35, i1 false
  br i1 %287, label %288, label %463

288:                                              ; preds = %7
  %289 = tail call i32 @llvm.smin.i32(i32 %202, i32 %214)
  %290 = tail call i32 @llvm.smin.i32(i32 %228, i32 %240)
  %291 = tail call i32 @llvm.smin.i32(i32 %289, i32 %290)
  %292 = sitofp i32 %291 to float
  %293 = fneg contract float %279
  %294 = fcmp contract ogt float %292, %293
  %295 = select i1 %38, i1 %294, i1 false
  br i1 %295, label %296, label %463

296:                                              ; preds = %288
  %297 = sitofp i32 %243 to float
  %298 = fcmp contract olt float %297, %279
  %299 = icmp slt i32 %194, 10000
  %300 = select i1 %298, i1 %299, i1 false
  br i1 %300, label %301, label %463

301:                                              ; preds = %296
  %302 = sub nsw i32 %262, %256
  %303 = sub nsw i32 %274, %268
  %304 = mul nsw i32 %303, %302
  %305 = icmp slt i32 %304, 1600
  %306 = icmp slt i32 %302, 40
  %307 = and i1 %306, %305
  %308 = icmp slt i32 %303, 40
  %309 = select i1 %307, i1 %308, i1 false
  %310 = icmp sgt i32 %262, %256
  %311 = select i1 %309, i1 %310, i1 false
  br i1 %311, label %312, label %463

312:                                              ; preds = %301
  %313 = icmp sgt i32 %274, %268
  %314 = sext i32 %40 to i64
  %315 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %314
  %316 = sext i32 %66 to i64
  %317 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %316
  %318 = sext i32 %94 to i64
  %319 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %318
  %320 = sext i32 %118 to i64
  %321 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %320
  %322 = tail call float @llvm.fabs.f32(float %183)
  %323 = fdiv contract float 1.000000e+00, %322
  br label %324

324:                                              ; preds = %312, %460
  %325 = phi i32 [ %256, %312 ], [ %461, %460 ]
  br i1 %313, label %326, label %460

326:                                              ; preds = %324
  %327 = icmp sgt i32 %325, -1
  %328 = icmp slt i32 %325, %6
  %329 = sitofp i32 %325 to float
  %330 = fsub contract float %329, %64
  %331 = fmul contract float %184, %330
  %332 = fmul contract float %186, %330
  br label %333

333:                                              ; preds = %326, %457
  %334 = phi i32 [ %268, %326 ], [ %458, %457 ]
  br i1 %327, label %335, label %457

335:                                              ; preds = %333
  %336 = icmp sgt i32 %334, -1
  %337 = select i1 %328, i1 %336, i1 false
  %338 = icmp slt i32 %334, %5
  %339 = select i1 %337, i1 %338, i1 false
  br i1 %339, label %340, label %457

340:                                              ; preds = %335
  %341 = sitofp i32 %334 to float
  %342 = fsub contract float %341, %65
  %343 = fmul contract float %188, %342
  %344 = fadd contract float %331, %343
  %345 = fmul contract float %189, %342
  %346 = fadd contract float %332, %345
  %347 = fcmp contract ogt float %344, 0xBF847AE140000000
  %348 = fcmp contract olt float %344, 0x3FF028F5C0000000
  %349 = and i1 %347, %348
  %350 = fcmp contract ogt float %346, 0xBF847AE140000000
  %351 = select i1 %349, i1 %350, i1 false
  %352 = fcmp contract olt float %346, 0x3FF028F5C0000000
  %353 = select i1 %351, i1 %352, i1 false
  br i1 %353, label %354, label %457

354:                                              ; preds = %340
  %355 = fcmp contract olt float %344, 0.000000e+00
  %356 = select i1 %355, float 0.000000e+00, float %344
  %357 = fcmp contract olt float %346, 0.000000e+00
  %358 = select i1 %357, float 0.000000e+00, float %346
  %359 = fcmp contract ogt float %356, 1.000000e+00
  %360 = select i1 %359, float 1.000000e+00, float %356
  %361 = fcmp contract ogt float %358, 1.000000e+00
  %362 = select i1 %361, float 1.000000e+00, float %358
  %363 = load i32, i32 addrspace(1)* %315, align 4, !tbaa !20
  %364 = fsub contract float 1.000000e+00, %360
  %365 = fsub contract float 1.000000e+00, %362
  %366 = load i32, i32 addrspace(1)* %317, align 4, !tbaa !20
  %367 = load i32, i32 addrspace(1)* %319, align 4, !tbaa !20
  %368 = load i32, i32 addrspace(1)* %321, align 4, !tbaa !20
  %369 = mul nsw i32 %334, %6
  %370 = add nsw i32 %369, %325
  %371 = icmp sgt i32 %370, 0
  %372 = icmp slt i32 %370, %31
  %373 = select i1 %371, i1 %372, i1 false
  br i1 %373, label %374, label %457

374:                                              ; preds = %354
  %375 = freeze i32 %363
  %376 = sdiv i32 %375, 256
  %377 = mul i32 %376, 256
  %378 = sub i32 %375, %377
  %379 = sitofp i32 %378 to float
  %380 = fmul contract float %364, %379
  %381 = fmul contract float %365, %380
  %382 = freeze i32 %366
  %383 = sdiv i32 %382, 256
  %384 = mul i32 %383, 256
  %385 = sub i32 %382, %384
  %386 = sitofp i32 %385 to float
  %387 = fmul contract float %364, %386
  %388 = fmul contract float %362, %387
  %389 = fadd contract float %381, %388
  %390 = freeze i32 %367
  %391 = sdiv i32 %390, 256
  %392 = mul i32 %391, 256
  %393 = sub i32 %390, %392
  %394 = sitofp i32 %393 to float
  %395 = fmul contract float %360, %394
  %396 = fmul contract float %365, %395
  %397 = fadd contract float %389, %396
  %398 = freeze i32 %368
  %399 = sdiv i32 %398, 256
  %400 = mul i32 %399, 256
  %401 = sub i32 %398, %400
  %402 = sitofp i32 %401 to float
  %403 = fmul contract float %360, %402
  %404 = fmul contract float %362, %403
  %405 = fadd contract float %397, %404
  %406 = fptosi float %405 to i32
  %407 = tail call i32 @llvm.smin.i32(i32 %406, i32 255)
  %408 = srem i32 %376, 256
  %409 = sitofp i32 %408 to float
  %410 = fmul contract float %364, %409
  %411 = fmul contract float %365, %410
  %412 = srem i32 %383, 256
  %413 = sitofp i32 %412 to float
  %414 = fmul contract float %364, %413
  %415 = fmul contract float %362, %414
  %416 = fadd contract float %411, %415
  %417 = srem i32 %391, 256
  %418 = sitofp i32 %417 to float
  %419 = fmul contract float %360, %418
  %420 = fmul contract float %365, %419
  %421 = fadd contract float %416, %420
  %422 = srem i32 %399, 256
  %423 = sitofp i32 %422 to float
  %424 = fmul contract float %360, %423
  %425 = fmul contract float %362, %424
  %426 = fadd contract float %421, %425
  %427 = fptosi float %426 to i32
  %428 = tail call i32 @llvm.smin.i32(i32 %427, i32 255)
  %429 = sdiv i32 %363, 65536
  %430 = sitofp i32 %429 to float
  %431 = fmul contract float %364, %430
  %432 = fmul contract float %365, %431
  %433 = sdiv i32 %366, 65536
  %434 = sitofp i32 %433 to float
  %435 = fmul contract float %364, %434
  %436 = fmul contract float %362, %435
  %437 = fadd contract float %432, %436
  %438 = sdiv i32 %367, 65536
  %439 = sitofp i32 %438 to float
  %440 = fmul contract float %360, %439
  %441 = fmul contract float %365, %440
  %442 = fadd contract float %437, %441
  %443 = sdiv i32 %368, 65536
  %444 = sitofp i32 %443 to float
  %445 = fmul contract float %360, %444
  %446 = fmul contract float %362, %445
  %447 = fadd contract float %442, %446
  %448 = fptosi float %447 to i32
  %449 = tail call i32 @llvm.smin.i32(i32 %448, i32 255)
  %450 = shl nsw i32 %449, 16
  %451 = shl nsw i32 %428, 8
  %452 = add i32 %450, %407
  %453 = add i32 %452, %451
  %454 = zext i32 %370 to i64
  %455 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %454
  store i32 %453, i32 addrspace(1)* %455, align 4, !tbaa !20
  %456 = getelementptr inbounds float, float addrspace(1)* %1, i64 %454
  store float %323, float addrspace(1)* %456, align 4, !tbaa !16
  br label %457

457:                                              ; preds = %333, %335, %354, %374, %340
  %458 = add nsw i32 %334, 1
  %459 = icmp slt i32 %458, %274
  br i1 %459, label %333, label %460, !llvm.loop !22

460:                                              ; preds = %457, %324
  %461 = add nsw i32 %325, 1
  %462 = icmp slt i32 %461, %262
  br i1 %462, label %324, label %463, !llvm.loop !24

463:                                              ; preds = %460, %296, %301, %288, %7
  %464 = add nsw i32 %15, 8
  %465 = mul nsw i32 %464, %29
  %466 = add nsw i32 %465, %11
  %467 = mul nsw i32 %466, 3
  %468 = add nsw i32 %467, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds float, float addrspace(1)* %0, i64 %469
  %471 = load float, float addrspace(1)* %470, align 4, !tbaa !16
  %472 = fadd contract float %471, 1.000000e+00
  %473 = fmul contract float %472, 5.000000e-01
  %474 = fmul contract float %473, %32
  %475 = fpext float %474 to double
  %476 = fadd contract double %475, -5.000000e-01
  %477 = tail call double @llvm.round.f64(double %476)
  %478 = fptosi double %477 to i32
  %479 = add nsw i32 %467, 2
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds float, float addrspace(1)* %0, i64 %480
  %482 = load float, float addrspace(1)* %481, align 4, !tbaa !16
  %483 = fadd contract float %482, 1.000000e+00
  %484 = fmul contract float %483, 5.000000e-01
  %485 = fmul contract float %484, %33
  %486 = fpext float %485 to double
  %487 = fadd contract double %486, -5.000000e-01
  %488 = tail call double @llvm.round.f64(double %487)
  %489 = fptosi double %488 to i32
  %490 = fadd contract float %474, -5.000000e-01
  %491 = fadd contract float %485, -5.000000e-01
  %492 = add nsw i32 %466, 1
  %493 = mul nsw i32 %492, 3
  %494 = add nsw i32 %493, 1
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds float, float addrspace(1)* %0, i64 %495
  %497 = load float, float addrspace(1)* %496, align 4, !tbaa !16
  %498 = fadd contract float %497, 1.000000e+00
  %499 = fmul contract float %498, 5.000000e-01
  %500 = fmul contract float %499, %32
  %501 = fpext float %500 to double
  %502 = fadd contract double %501, -5.000000e-01
  %503 = fpext float %490 to double
  %504 = fsub contract double %502, %503
  %505 = fptrunc double %504 to float
  %506 = add nsw i32 %493, 2
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds float, float addrspace(1)* %0, i64 %507
  %509 = load float, float addrspace(1)* %508, align 4, !tbaa !16
  %510 = fadd contract float %509, 1.000000e+00
  %511 = fmul contract float %510, 5.000000e-01
  %512 = fmul contract float %511, %33
  %513 = fpext float %512 to double
  %514 = fadd contract double %513, -5.000000e-01
  %515 = fpext float %491 to double
  %516 = fsub contract double %514, %515
  %517 = fptrunc double %516 to float
  %518 = add nsw i32 %15, 9
  %519 = mul nsw i32 %518, %29
  %520 = add nsw i32 %519, %11
  %521 = mul nsw i32 %520, 3
  %522 = add nsw i32 %521, 1
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds float, float addrspace(1)* %0, i64 %523
  %525 = load float, float addrspace(1)* %524, align 4, !tbaa !16
  %526 = fadd contract float %525, 1.000000e+00
  %527 = fmul contract float %526, 5.000000e-01
  %528 = fmul contract float %527, %32
  %529 = fpext float %528 to double
  %530 = fadd contract double %529, -5.000000e-01
  %531 = fsub contract double %530, %503
  %532 = fptrunc double %531 to float
  %533 = add nsw i32 %521, 2
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds float, float addrspace(1)* %0, i64 %534
  %536 = load float, float addrspace(1)* %535, align 4, !tbaa !16
  %537 = fadd contract float %536, 1.000000e+00
  %538 = fmul contract float %537, 5.000000e-01
  %539 = fmul contract float %538, %33
  %540 = fpext float %539 to double
  %541 = fadd contract double %540, -5.000000e-01
  %542 = fsub contract double %541, %515
  %543 = fptrunc double %542 to float
  %544 = add nsw i32 %520, 1
  %545 = mul nsw i32 %544, 3
  %546 = add nsw i32 %545, 1
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds float, float addrspace(1)* %0, i64 %547
  %549 = load float, float addrspace(1)* %548, align 4, !tbaa !16
  %550 = fadd contract float %549, 1.000000e+00
  %551 = fmul contract float %550, 5.000000e-01
  %552 = fmul contract float %551, %32
  %553 = fpext float %552 to double
  %554 = fadd contract double %553, -5.000000e-01
  %555 = fsub contract double %554, %503
  %556 = fptrunc double %555 to float
  %557 = add nsw i32 %545, 2
  %558 = sext i32 %557 to i64
  %559 = getelementptr inbounds float, float addrspace(1)* %0, i64 %558
  %560 = load float, float addrspace(1)* %559, align 4, !tbaa !16
  %561 = fadd contract float %560, 1.000000e+00
  %562 = fmul contract float %561, 5.000000e-01
  %563 = fmul contract float %562, %33
  %564 = fpext float %563 to double
  %565 = fadd contract double %564, -5.000000e-01
  %566 = fsub contract double %565, %515
  %567 = fptrunc double %566 to float
  %568 = fpext float %505 to double
  %569 = fdiv contract double %568, 3.000000e+00
  %570 = fsub contract double 0.000000e+00, %569
  %571 = fpext float %532 to double
  %572 = fmul contract double %571, 2.000000e+00
  %573 = fdiv contract double %572, 3.000000e+00
  %574 = fadd contract double %570, %573
  %575 = fpext float %556 to double
  %576 = fdiv contract double %575, 3.000000e+00
  %577 = fadd contract double %574, %576
  %578 = fptrunc double %577 to float
  %579 = fpext float %517 to double
  %580 = fdiv contract double %579, 3.000000e+00
  %581 = fsub contract double 0.000000e+00, %580
  %582 = fpext float %543 to double
  %583 = fmul contract double %582, 2.000000e+00
  %584 = fdiv contract double %583, 3.000000e+00
  %585 = fadd contract double %581, %584
  %586 = fpext float %567 to double
  %587 = fdiv contract double %586, 3.000000e+00
  %588 = fadd contract double %585, %587
  %589 = fptrunc double %588 to float
  %590 = fmul contract double %568, 2.000000e+00
  %591 = fdiv contract double %590, 3.000000e+00
  %592 = fadd contract double %591, 0.000000e+00
  %593 = fdiv contract double %571, 3.000000e+00
  %594 = fsub contract double %592, %593
  %595 = fadd contract double %594, %576
  %596 = fptrunc double %595 to float
  %597 = fmul contract double %579, 2.000000e+00
  %598 = fdiv contract double %597, 3.000000e+00
  %599 = fadd contract double %598, 0.000000e+00
  %600 = fdiv contract double %582, 3.000000e+00
  %601 = fsub contract double %599, %600
  %602 = fadd contract double %601, %587
  %603 = fptrunc double %602 to float
  %604 = fmul contract float %578, %603
  %605 = fmul contract float %596, %589
  %606 = fsub contract float %604, %605
  %607 = fpext float %606 to double
  %608 = fadd contract double %607, 1.000000e-10
  %609 = fptrunc double %608 to float
  %610 = fdiv contract float %603, %609
  %611 = fneg contract float %589
  %612 = fdiv contract float %611, %609
  %613 = fneg contract float %596
  %614 = fdiv contract float %613, %609
  %615 = fdiv contract float %578, %609
  %616 = sext i32 %467 to i64
  %617 = getelementptr inbounds float, float addrspace(1)* %0, i64 %616
  %618 = load float, float addrspace(1)* %617, align 4, !tbaa !16
  %619 = fmul contract float %618, 1.000000e+02
  %620 = fptosi float %619 to i32
  %621 = mul nsw i32 %489, %6
  %622 = add nsw i32 %621, %478
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds float, float addrspace(1)* %2, i64 %623
  %625 = load float, float addrspace(1)* %624, align 4, !tbaa !16
  %626 = fmul contract float %625, 1.000000e+02
  %627 = fptosi float %626 to i32
  %628 = sub nsw i32 %620, %627
  %629 = sext i32 %493 to i64
  %630 = getelementptr inbounds float, float addrspace(1)* %0, i64 %629
  %631 = load float, float addrspace(1)* %630, align 4, !tbaa !16
  %632 = fmul contract float %631, 1.000000e+02
  %633 = fptosi float %632 to i32
  %634 = add nsw i32 %622, 1
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds float, float addrspace(1)* %2, i64 %635
  %637 = load float, float addrspace(1)* %636, align 4, !tbaa !16
  %638 = fmul contract float %637, 1.000000e+02
  %639 = fptosi float %638 to i32
  %640 = sub nsw i32 %633, %639
  %641 = sext i32 %521 to i64
  %642 = getelementptr inbounds float, float addrspace(1)* %0, i64 %641
  %643 = load float, float addrspace(1)* %642, align 4, !tbaa !16
  %644 = fmul contract float %643, 1.000000e+02
  %645 = fptosi float %644 to i32
  %646 = add nsw i32 %489, 1
  %647 = mul nsw i32 %646, %6
  %648 = add nsw i32 %647, %478
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds float, float addrspace(1)* %2, i64 %649
  %651 = load float, float addrspace(1)* %650, align 4, !tbaa !16
  %652 = fmul contract float %651, 1.000000e+02
  %653 = fptosi float %652 to i32
  %654 = sub nsw i32 %645, %653
  %655 = sext i32 %545 to i64
  %656 = getelementptr inbounds float, float addrspace(1)* %0, i64 %655
  %657 = load float, float addrspace(1)* %656, align 4, !tbaa !16
  %658 = fmul contract float %657, 1.000000e+02
  %659 = fptosi float %658 to i32
  %660 = add nsw i32 %648, 1
  %661 = sext i32 %660 to i64
  %662 = getelementptr inbounds float, float addrspace(1)* %2, i64 %661
  %663 = load float, float addrspace(1)* %662, align 4, !tbaa !16
  %664 = fmul contract float %663, 1.000000e+02
  %665 = fptosi float %664 to i32
  %666 = sub nsw i32 %659, %665
  %667 = tail call i32 @llvm.smax.i32(i32 %628, i32 %640)
  %668 = tail call i32 @llvm.smax.i32(i32 %654, i32 %666)
  %669 = tail call i32 @llvm.smax.i32(i32 %667, i32 %668)
  %670 = tail call i32 @llvm.smax.i32(i32 %620, i32 %645)
  %671 = tail call i32 @llvm.smax.i32(i32 %633, i32 %659)
  %672 = tail call i32 @llvm.smax.i32(i32 %670, i32 %671)
  %673 = tail call i32 @llvm.smin.i32(i32 %620, i32 %645)
  %674 = tail call i32 @llvm.smin.i32(i32 %633, i32 %659)
  %675 = tail call i32 @llvm.smin.i32(i32 %673, i32 %674)
  %676 = sub nsw i32 %672, %675
  %677 = tail call float @llvm.minnum.f32(float %556, float 0.000000e+00)
  %678 = tail call float @llvm.minnum.f32(float %505, float %532)
  %679 = tail call float @llvm.minnum.f32(float %677, float %678)
  %680 = fadd contract float %490, %679
  %681 = tail call float @llvm.floor.f32(float %680)
  %682 = fptosi float %681 to i32
  %683 = tail call float @llvm.maxnum.f32(float %556, float 0.000000e+00)
  %684 = tail call float @llvm.maxnum.f32(float %505, float %532)
  %685 = tail call float @llvm.maxnum.f32(float %683, float %684)
  %686 = fadd contract float %490, %685
  %687 = tail call float @llvm.ceil.f32(float %686)
  %688 = fptosi float %687 to i32
  %689 = tail call float @llvm.minnum.f32(float %567, float 0.000000e+00)
  %690 = tail call float @llvm.minnum.f32(float %517, float %543)
  %691 = tail call float @llvm.minnum.f32(float %689, float %690)
  %692 = fadd contract float %491, %691
  %693 = tail call float @llvm.floor.f32(float %692)
  %694 = fptosi float %693 to i32
  %695 = tail call float @llvm.maxnum.f32(float %567, float 0.000000e+00)
  %696 = tail call float @llvm.maxnum.f32(float %517, float %543)
  %697 = tail call float @llvm.maxnum.f32(float %695, float %696)
  %698 = fadd contract float %491, %697
  %699 = tail call float @llvm.ceil.f32(float %698)
  %700 = fptosi float %699 to i32
  %701 = sitofp i32 %620 to double
  %702 = fmul contract double %701, 1.000000e-01
  %703 = fcmp contract ogt double %702, 1.000000e+01
  %704 = select contract i1 %703, double %702, double 1.000000e+01
  %705 = fptrunc double %704 to float
  %706 = sitofp i32 %672 to double
  %707 = fmul contract double %706, 5.000000e-02
  %708 = fcmp contract ogt double %707, 1.000000e+01
  %709 = select contract i1 %708, double %707, double 1.000000e+01
  %710 = fptrunc double %709 to float
  %711 = sitofp i32 %676 to float
  %712 = fcmp contract olt float %711, %710
  %713 = select i1 %712, i1 %35, i1 false
  br i1 %713, label %714, label %889

714:                                              ; preds = %463
  %715 = tail call i32 @llvm.smin.i32(i32 %628, i32 %640)
  %716 = tail call i32 @llvm.smin.i32(i32 %654, i32 %666)
  %717 = tail call i32 @llvm.smin.i32(i32 %715, i32 %716)
  %718 = sitofp i32 %717 to float
  %719 = fneg contract float %705
  %720 = fcmp contract ogt float %718, %719
  %721 = select i1 %38, i1 %720, i1 false
  br i1 %721, label %722, label %889

722:                                              ; preds = %714
  %723 = sitofp i32 %669 to float
  %724 = fcmp contract olt float %723, %705
  %725 = icmp slt i32 %620, 10000
  %726 = select i1 %724, i1 %725, i1 false
  br i1 %726, label %727, label %889

727:                                              ; preds = %722
  %728 = sub nsw i32 %688, %682
  %729 = sub nsw i32 %700, %694
  %730 = mul nsw i32 %729, %728
  %731 = icmp slt i32 %730, 1600
  %732 = icmp slt i32 %728, 40
  %733 = and i1 %732, %731
  %734 = icmp slt i32 %729, 40
  %735 = select i1 %733, i1 %734, i1 false
  %736 = icmp sgt i32 %688, %682
  %737 = select i1 %735, i1 %736, i1 false
  br i1 %737, label %738, label %889

738:                                              ; preds = %727
  %739 = icmp sgt i32 %700, %694
  %740 = sext i32 %466 to i64
  %741 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %740
  %742 = sext i32 %492 to i64
  %743 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %742
  %744 = sext i32 %520 to i64
  %745 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %744
  %746 = sext i32 %544 to i64
  %747 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %746
  %748 = tail call float @llvm.fabs.f32(float %609)
  %749 = fdiv contract float 1.000000e+00, %748
  br label %750

750:                                              ; preds = %886, %738
  %751 = phi i32 [ %682, %738 ], [ %887, %886 ]
  br i1 %739, label %752, label %886

752:                                              ; preds = %750
  %753 = icmp sgt i32 %751, -1
  %754 = icmp slt i32 %751, %6
  %755 = sitofp i32 %751 to float
  %756 = fsub contract float %755, %490
  %757 = fmul contract float %610, %756
  %758 = fmul contract float %612, %756
  br label %759

759:                                              ; preds = %883, %752
  %760 = phi i32 [ %694, %752 ], [ %884, %883 ]
  br i1 %753, label %761, label %883

761:                                              ; preds = %759
  %762 = icmp sgt i32 %760, -1
  %763 = select i1 %754, i1 %762, i1 false
  %764 = icmp slt i32 %760, %5
  %765 = select i1 %763, i1 %764, i1 false
  br i1 %765, label %766, label %883

766:                                              ; preds = %761
  %767 = sitofp i32 %760 to float
  %768 = fsub contract float %767, %491
  %769 = fmul contract float %614, %768
  %770 = fadd contract float %757, %769
  %771 = fmul contract float %615, %768
  %772 = fadd contract float %758, %771
  %773 = fcmp contract ogt float %770, 0xBF847AE140000000
  %774 = fcmp contract olt float %770, 0x3FF028F5C0000000
  %775 = and i1 %773, %774
  %776 = fcmp contract ogt float %772, 0xBF847AE140000000
  %777 = select i1 %775, i1 %776, i1 false
  %778 = fcmp contract olt float %772, 0x3FF028F5C0000000
  %779 = select i1 %777, i1 %778, i1 false
  br i1 %779, label %780, label %883

780:                                              ; preds = %766
  %781 = fcmp contract olt float %770, 0.000000e+00
  %782 = select i1 %781, float 0.000000e+00, float %770
  %783 = fcmp contract olt float %772, 0.000000e+00
  %784 = select i1 %783, float 0.000000e+00, float %772
  %785 = fcmp contract ogt float %782, 1.000000e+00
  %786 = select i1 %785, float 1.000000e+00, float %782
  %787 = fcmp contract ogt float %784, 1.000000e+00
  %788 = select i1 %787, float 1.000000e+00, float %784
  %789 = load i32, i32 addrspace(1)* %741, align 4, !tbaa !20
  %790 = fsub contract float 1.000000e+00, %786
  %791 = fsub contract float 1.000000e+00, %788
  %792 = load i32, i32 addrspace(1)* %743, align 4, !tbaa !20
  %793 = load i32, i32 addrspace(1)* %745, align 4, !tbaa !20
  %794 = load i32, i32 addrspace(1)* %747, align 4, !tbaa !20
  %795 = mul nsw i32 %760, %6
  %796 = add nsw i32 %795, %751
  %797 = icmp sgt i32 %796, 0
  %798 = icmp slt i32 %796, %31
  %799 = select i1 %797, i1 %798, i1 false
  br i1 %799, label %800, label %883

800:                                              ; preds = %780
  %801 = freeze i32 %789
  %802 = sdiv i32 %801, 256
  %803 = mul i32 %802, 256
  %804 = sub i32 %801, %803
  %805 = sitofp i32 %804 to float
  %806 = fmul contract float %790, %805
  %807 = fmul contract float %791, %806
  %808 = freeze i32 %792
  %809 = sdiv i32 %808, 256
  %810 = mul i32 %809, 256
  %811 = sub i32 %808, %810
  %812 = sitofp i32 %811 to float
  %813 = fmul contract float %790, %812
  %814 = fmul contract float %788, %813
  %815 = fadd contract float %807, %814
  %816 = freeze i32 %793
  %817 = sdiv i32 %816, 256
  %818 = mul i32 %817, 256
  %819 = sub i32 %816, %818
  %820 = sitofp i32 %819 to float
  %821 = fmul contract float %786, %820
  %822 = fmul contract float %791, %821
  %823 = fadd contract float %815, %822
  %824 = freeze i32 %794
  %825 = sdiv i32 %824, 256
  %826 = mul i32 %825, 256
  %827 = sub i32 %824, %826
  %828 = sitofp i32 %827 to float
  %829 = fmul contract float %786, %828
  %830 = fmul contract float %788, %829
  %831 = fadd contract float %823, %830
  %832 = fptosi float %831 to i32
  %833 = tail call i32 @llvm.smin.i32(i32 %832, i32 255)
  %834 = srem i32 %802, 256
  %835 = sitofp i32 %834 to float
  %836 = fmul contract float %790, %835
  %837 = fmul contract float %791, %836
  %838 = srem i32 %809, 256
  %839 = sitofp i32 %838 to float
  %840 = fmul contract float %790, %839
  %841 = fmul contract float %788, %840
  %842 = fadd contract float %837, %841
  %843 = srem i32 %817, 256
  %844 = sitofp i32 %843 to float
  %845 = fmul contract float %786, %844
  %846 = fmul contract float %791, %845
  %847 = fadd contract float %842, %846
  %848 = srem i32 %825, 256
  %849 = sitofp i32 %848 to float
  %850 = fmul contract float %786, %849
  %851 = fmul contract float %788, %850
  %852 = fadd contract float %847, %851
  %853 = fptosi float %852 to i32
  %854 = tail call i32 @llvm.smin.i32(i32 %853, i32 255)
  %855 = sdiv i32 %789, 65536
  %856 = sitofp i32 %855 to float
  %857 = fmul contract float %790, %856
  %858 = fmul contract float %791, %857
  %859 = sdiv i32 %792, 65536
  %860 = sitofp i32 %859 to float
  %861 = fmul contract float %790, %860
  %862 = fmul contract float %788, %861
  %863 = fadd contract float %858, %862
  %864 = sdiv i32 %793, 65536
  %865 = sitofp i32 %864 to float
  %866 = fmul contract float %786, %865
  %867 = fmul contract float %791, %866
  %868 = fadd contract float %863, %867
  %869 = sdiv i32 %794, 65536
  %870 = sitofp i32 %869 to float
  %871 = fmul contract float %786, %870
  %872 = fmul contract float %788, %871
  %873 = fadd contract float %868, %872
  %874 = fptosi float %873 to i32
  %875 = tail call i32 @llvm.smin.i32(i32 %874, i32 255)
  %876 = shl nsw i32 %875, 16
  %877 = shl nsw i32 %854, 8
  %878 = add i32 %876, %833
  %879 = add i32 %878, %877
  %880 = zext i32 %796 to i64
  %881 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %880
  store i32 %879, i32 addrspace(1)* %881, align 4, !tbaa !20
  %882 = getelementptr inbounds float, float addrspace(1)* %1, i64 %880
  store float %749, float addrspace(1)* %882, align 4, !tbaa !16
  br label %883

883:                                              ; preds = %800, %780, %766, %761, %759
  %884 = add nsw i32 %760, 1
  %885 = icmp slt i32 %884, %700
  br i1 %885, label %759, label %886, !llvm.loop !22

886:                                              ; preds = %883, %750
  %887 = add nsw i32 %751, 1
  %888 = icmp slt i32 %887, %688
  br i1 %888, label %750, label %889, !llvm.loop !24

889:                                              ; preds = %886, %727, %722, %714, %463
  %890 = add nsw i32 %15, 16
  %891 = mul nsw i32 %890, %29
  %892 = add nsw i32 %891, %11
  %893 = mul nsw i32 %892, 3
  %894 = add nsw i32 %893, 1
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds float, float addrspace(1)* %0, i64 %895
  %897 = load float, float addrspace(1)* %896, align 4, !tbaa !16
  %898 = fadd contract float %897, 1.000000e+00
  %899 = fmul contract float %898, 5.000000e-01
  %900 = fmul contract float %899, %32
  %901 = fpext float %900 to double
  %902 = fadd contract double %901, -5.000000e-01
  %903 = tail call double @llvm.round.f64(double %902)
  %904 = fptosi double %903 to i32
  %905 = add nsw i32 %893, 2
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds float, float addrspace(1)* %0, i64 %906
  %908 = load float, float addrspace(1)* %907, align 4, !tbaa !16
  %909 = fadd contract float %908, 1.000000e+00
  %910 = fmul contract float %909, 5.000000e-01
  %911 = fmul contract float %910, %33
  %912 = fpext float %911 to double
  %913 = fadd contract double %912, -5.000000e-01
  %914 = tail call double @llvm.round.f64(double %913)
  %915 = fptosi double %914 to i32
  %916 = fadd contract float %900, -5.000000e-01
  %917 = fadd contract float %911, -5.000000e-01
  %918 = add nsw i32 %892, 1
  %919 = mul nsw i32 %918, 3
  %920 = add nsw i32 %919, 1
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds float, float addrspace(1)* %0, i64 %921
  %923 = load float, float addrspace(1)* %922, align 4, !tbaa !16
  %924 = fadd contract float %923, 1.000000e+00
  %925 = fmul contract float %924, 5.000000e-01
  %926 = fmul contract float %925, %32
  %927 = fpext float %926 to double
  %928 = fadd contract double %927, -5.000000e-01
  %929 = fpext float %916 to double
  %930 = fsub contract double %928, %929
  %931 = fptrunc double %930 to float
  %932 = add nsw i32 %919, 2
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds float, float addrspace(1)* %0, i64 %933
  %935 = load float, float addrspace(1)* %934, align 4, !tbaa !16
  %936 = fadd contract float %935, 1.000000e+00
  %937 = fmul contract float %936, 5.000000e-01
  %938 = fmul contract float %937, %33
  %939 = fpext float %938 to double
  %940 = fadd contract double %939, -5.000000e-01
  %941 = fpext float %917 to double
  %942 = fsub contract double %940, %941
  %943 = fptrunc double %942 to float
  %944 = add nsw i32 %15, 17
  %945 = mul nsw i32 %944, %29
  %946 = add nsw i32 %945, %11
  %947 = mul nsw i32 %946, 3
  %948 = add nsw i32 %947, 1
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds float, float addrspace(1)* %0, i64 %949
  %951 = load float, float addrspace(1)* %950, align 4, !tbaa !16
  %952 = fadd contract float %951, 1.000000e+00
  %953 = fmul contract float %952, 5.000000e-01
  %954 = fmul contract float %953, %32
  %955 = fpext float %954 to double
  %956 = fadd contract double %955, -5.000000e-01
  %957 = fsub contract double %956, %929
  %958 = fptrunc double %957 to float
  %959 = add nsw i32 %947, 2
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds float, float addrspace(1)* %0, i64 %960
  %962 = load float, float addrspace(1)* %961, align 4, !tbaa !16
  %963 = fadd contract float %962, 1.000000e+00
  %964 = fmul contract float %963, 5.000000e-01
  %965 = fmul contract float %964, %33
  %966 = fpext float %965 to double
  %967 = fadd contract double %966, -5.000000e-01
  %968 = fsub contract double %967, %941
  %969 = fptrunc double %968 to float
  %970 = add nsw i32 %946, 1
  %971 = mul nsw i32 %970, 3
  %972 = add nsw i32 %971, 1
  %973 = sext i32 %972 to i64
  %974 = getelementptr inbounds float, float addrspace(1)* %0, i64 %973
  %975 = load float, float addrspace(1)* %974, align 4, !tbaa !16
  %976 = fadd contract float %975, 1.000000e+00
  %977 = fmul contract float %976, 5.000000e-01
  %978 = fmul contract float %977, %32
  %979 = fpext float %978 to double
  %980 = fadd contract double %979, -5.000000e-01
  %981 = fsub contract double %980, %929
  %982 = fptrunc double %981 to float
  %983 = add nsw i32 %971, 2
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds float, float addrspace(1)* %0, i64 %984
  %986 = load float, float addrspace(1)* %985, align 4, !tbaa !16
  %987 = fadd contract float %986, 1.000000e+00
  %988 = fmul contract float %987, 5.000000e-01
  %989 = fmul contract float %988, %33
  %990 = fpext float %989 to double
  %991 = fadd contract double %990, -5.000000e-01
  %992 = fsub contract double %991, %941
  %993 = fptrunc double %992 to float
  %994 = fpext float %931 to double
  %995 = fdiv contract double %994, 3.000000e+00
  %996 = fsub contract double 0.000000e+00, %995
  %997 = fpext float %958 to double
  %998 = fmul contract double %997, 2.000000e+00
  %999 = fdiv contract double %998, 3.000000e+00
  %1000 = fadd contract double %996, %999
  %1001 = fpext float %982 to double
  %1002 = fdiv contract double %1001, 3.000000e+00
  %1003 = fadd contract double %1000, %1002
  %1004 = fptrunc double %1003 to float
  %1005 = fpext float %943 to double
  %1006 = fdiv contract double %1005, 3.000000e+00
  %1007 = fsub contract double 0.000000e+00, %1006
  %1008 = fpext float %969 to double
  %1009 = fmul contract double %1008, 2.000000e+00
  %1010 = fdiv contract double %1009, 3.000000e+00
  %1011 = fadd contract double %1007, %1010
  %1012 = fpext float %993 to double
  %1013 = fdiv contract double %1012, 3.000000e+00
  %1014 = fadd contract double %1011, %1013
  %1015 = fptrunc double %1014 to float
  %1016 = fmul contract double %994, 2.000000e+00
  %1017 = fdiv contract double %1016, 3.000000e+00
  %1018 = fadd contract double %1017, 0.000000e+00
  %1019 = fdiv contract double %997, 3.000000e+00
  %1020 = fsub contract double %1018, %1019
  %1021 = fadd contract double %1020, %1002
  %1022 = fptrunc double %1021 to float
  %1023 = fmul contract double %1005, 2.000000e+00
  %1024 = fdiv contract double %1023, 3.000000e+00
  %1025 = fadd contract double %1024, 0.000000e+00
  %1026 = fdiv contract double %1008, 3.000000e+00
  %1027 = fsub contract double %1025, %1026
  %1028 = fadd contract double %1027, %1013
  %1029 = fptrunc double %1028 to float
  %1030 = fmul contract float %1004, %1029
  %1031 = fmul contract float %1022, %1015
  %1032 = fsub contract float %1030, %1031
  %1033 = fpext float %1032 to double
  %1034 = fadd contract double %1033, 1.000000e-10
  %1035 = fptrunc double %1034 to float
  %1036 = fdiv contract float %1029, %1035
  %1037 = fneg contract float %1015
  %1038 = fdiv contract float %1037, %1035
  %1039 = fneg contract float %1022
  %1040 = fdiv contract float %1039, %1035
  %1041 = fdiv contract float %1004, %1035
  %1042 = sext i32 %893 to i64
  %1043 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1042
  %1044 = load float, float addrspace(1)* %1043, align 4, !tbaa !16
  %1045 = fmul contract float %1044, 1.000000e+02
  %1046 = fptosi float %1045 to i32
  %1047 = mul nsw i32 %915, %6
  %1048 = add nsw i32 %1047, %904
  %1049 = sext i32 %1048 to i64
  %1050 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1049
  %1051 = load float, float addrspace(1)* %1050, align 4, !tbaa !16
  %1052 = fmul contract float %1051, 1.000000e+02
  %1053 = fptosi float %1052 to i32
  %1054 = sub nsw i32 %1046, %1053
  %1055 = sext i32 %919 to i64
  %1056 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1055
  %1057 = load float, float addrspace(1)* %1056, align 4, !tbaa !16
  %1058 = fmul contract float %1057, 1.000000e+02
  %1059 = fptosi float %1058 to i32
  %1060 = add nsw i32 %1048, 1
  %1061 = sext i32 %1060 to i64
  %1062 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1061
  %1063 = load float, float addrspace(1)* %1062, align 4, !tbaa !16
  %1064 = fmul contract float %1063, 1.000000e+02
  %1065 = fptosi float %1064 to i32
  %1066 = sub nsw i32 %1059, %1065
  %1067 = sext i32 %947 to i64
  %1068 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1067
  %1069 = load float, float addrspace(1)* %1068, align 4, !tbaa !16
  %1070 = fmul contract float %1069, 1.000000e+02
  %1071 = fptosi float %1070 to i32
  %1072 = add nsw i32 %915, 1
  %1073 = mul nsw i32 %1072, %6
  %1074 = add nsw i32 %1073, %904
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1075
  %1077 = load float, float addrspace(1)* %1076, align 4, !tbaa !16
  %1078 = fmul contract float %1077, 1.000000e+02
  %1079 = fptosi float %1078 to i32
  %1080 = sub nsw i32 %1071, %1079
  %1081 = sext i32 %971 to i64
  %1082 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1081
  %1083 = load float, float addrspace(1)* %1082, align 4, !tbaa !16
  %1084 = fmul contract float %1083, 1.000000e+02
  %1085 = fptosi float %1084 to i32
  %1086 = add nsw i32 %1074, 1
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1087
  %1089 = load float, float addrspace(1)* %1088, align 4, !tbaa !16
  %1090 = fmul contract float %1089, 1.000000e+02
  %1091 = fptosi float %1090 to i32
  %1092 = sub nsw i32 %1085, %1091
  %1093 = tail call i32 @llvm.smax.i32(i32 %1054, i32 %1066)
  %1094 = tail call i32 @llvm.smax.i32(i32 %1080, i32 %1092)
  %1095 = tail call i32 @llvm.smax.i32(i32 %1093, i32 %1094)
  %1096 = tail call i32 @llvm.smax.i32(i32 %1046, i32 %1071)
  %1097 = tail call i32 @llvm.smax.i32(i32 %1059, i32 %1085)
  %1098 = tail call i32 @llvm.smax.i32(i32 %1096, i32 %1097)
  %1099 = tail call i32 @llvm.smin.i32(i32 %1046, i32 %1071)
  %1100 = tail call i32 @llvm.smin.i32(i32 %1059, i32 %1085)
  %1101 = tail call i32 @llvm.smin.i32(i32 %1099, i32 %1100)
  %1102 = sub nsw i32 %1098, %1101
  %1103 = tail call float @llvm.minnum.f32(float %982, float 0.000000e+00)
  %1104 = tail call float @llvm.minnum.f32(float %931, float %958)
  %1105 = tail call float @llvm.minnum.f32(float %1103, float %1104)
  %1106 = fadd contract float %916, %1105
  %1107 = tail call float @llvm.floor.f32(float %1106)
  %1108 = fptosi float %1107 to i32
  %1109 = tail call float @llvm.maxnum.f32(float %982, float 0.000000e+00)
  %1110 = tail call float @llvm.maxnum.f32(float %931, float %958)
  %1111 = tail call float @llvm.maxnum.f32(float %1109, float %1110)
  %1112 = fadd contract float %916, %1111
  %1113 = tail call float @llvm.ceil.f32(float %1112)
  %1114 = fptosi float %1113 to i32
  %1115 = tail call float @llvm.minnum.f32(float %993, float 0.000000e+00)
  %1116 = tail call float @llvm.minnum.f32(float %943, float %969)
  %1117 = tail call float @llvm.minnum.f32(float %1115, float %1116)
  %1118 = fadd contract float %917, %1117
  %1119 = tail call float @llvm.floor.f32(float %1118)
  %1120 = fptosi float %1119 to i32
  %1121 = tail call float @llvm.maxnum.f32(float %993, float 0.000000e+00)
  %1122 = tail call float @llvm.maxnum.f32(float %943, float %969)
  %1123 = tail call float @llvm.maxnum.f32(float %1121, float %1122)
  %1124 = fadd contract float %917, %1123
  %1125 = tail call float @llvm.ceil.f32(float %1124)
  %1126 = fptosi float %1125 to i32
  %1127 = sitofp i32 %1046 to double
  %1128 = fmul contract double %1127, 1.000000e-01
  %1129 = fcmp contract ogt double %1128, 1.000000e+01
  %1130 = select contract i1 %1129, double %1128, double 1.000000e+01
  %1131 = fptrunc double %1130 to float
  %1132 = sitofp i32 %1098 to double
  %1133 = fmul contract double %1132, 5.000000e-02
  %1134 = fcmp contract ogt double %1133, 1.000000e+01
  %1135 = select contract i1 %1134, double %1133, double 1.000000e+01
  %1136 = fptrunc double %1135 to float
  %1137 = sitofp i32 %1102 to float
  %1138 = fcmp contract olt float %1137, %1136
  %1139 = select i1 %1138, i1 %35, i1 false
  br i1 %1139, label %1140, label %1315

1140:                                             ; preds = %889
  %1141 = tail call i32 @llvm.smin.i32(i32 %1054, i32 %1066)
  %1142 = tail call i32 @llvm.smin.i32(i32 %1080, i32 %1092)
  %1143 = tail call i32 @llvm.smin.i32(i32 %1141, i32 %1142)
  %1144 = sitofp i32 %1143 to float
  %1145 = fneg contract float %1131
  %1146 = fcmp contract ogt float %1144, %1145
  %1147 = select i1 %38, i1 %1146, i1 false
  br i1 %1147, label %1148, label %1315

1148:                                             ; preds = %1140
  %1149 = sitofp i32 %1095 to float
  %1150 = fcmp contract olt float %1149, %1131
  %1151 = icmp slt i32 %1046, 10000
  %1152 = select i1 %1150, i1 %1151, i1 false
  br i1 %1152, label %1153, label %1315

1153:                                             ; preds = %1148
  %1154 = sub nsw i32 %1114, %1108
  %1155 = sub nsw i32 %1126, %1120
  %1156 = mul nsw i32 %1155, %1154
  %1157 = icmp slt i32 %1156, 1600
  %1158 = icmp slt i32 %1154, 40
  %1159 = and i1 %1158, %1157
  %1160 = icmp slt i32 %1155, 40
  %1161 = select i1 %1159, i1 %1160, i1 false
  %1162 = icmp sgt i32 %1114, %1108
  %1163 = select i1 %1161, i1 %1162, i1 false
  br i1 %1163, label %1164, label %1315

1164:                                             ; preds = %1153
  %1165 = icmp sgt i32 %1126, %1120
  %1166 = sext i32 %892 to i64
  %1167 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1166
  %1168 = sext i32 %918 to i64
  %1169 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1168
  %1170 = sext i32 %946 to i64
  %1171 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1170
  %1172 = sext i32 %970 to i64
  %1173 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1172
  %1174 = tail call float @llvm.fabs.f32(float %1035)
  %1175 = fdiv contract float 1.000000e+00, %1174
  br label %1176

1176:                                             ; preds = %1312, %1164
  %1177 = phi i32 [ %1108, %1164 ], [ %1313, %1312 ]
  br i1 %1165, label %1178, label %1312

1178:                                             ; preds = %1176
  %1179 = icmp sgt i32 %1177, -1
  %1180 = icmp slt i32 %1177, %6
  %1181 = sitofp i32 %1177 to float
  %1182 = fsub contract float %1181, %916
  %1183 = fmul contract float %1036, %1182
  %1184 = fmul contract float %1038, %1182
  br label %1185

1185:                                             ; preds = %1309, %1178
  %1186 = phi i32 [ %1120, %1178 ], [ %1310, %1309 ]
  br i1 %1179, label %1187, label %1309

1187:                                             ; preds = %1185
  %1188 = icmp sgt i32 %1186, -1
  %1189 = select i1 %1180, i1 %1188, i1 false
  %1190 = icmp slt i32 %1186, %5
  %1191 = select i1 %1189, i1 %1190, i1 false
  br i1 %1191, label %1192, label %1309

1192:                                             ; preds = %1187
  %1193 = sitofp i32 %1186 to float
  %1194 = fsub contract float %1193, %917
  %1195 = fmul contract float %1040, %1194
  %1196 = fadd contract float %1183, %1195
  %1197 = fmul contract float %1041, %1194
  %1198 = fadd contract float %1184, %1197
  %1199 = fcmp contract ogt float %1196, 0xBF847AE140000000
  %1200 = fcmp contract olt float %1196, 0x3FF028F5C0000000
  %1201 = and i1 %1199, %1200
  %1202 = fcmp contract ogt float %1198, 0xBF847AE140000000
  %1203 = select i1 %1201, i1 %1202, i1 false
  %1204 = fcmp contract olt float %1198, 0x3FF028F5C0000000
  %1205 = select i1 %1203, i1 %1204, i1 false
  br i1 %1205, label %1206, label %1309

1206:                                             ; preds = %1192
  %1207 = fcmp contract olt float %1196, 0.000000e+00
  %1208 = select i1 %1207, float 0.000000e+00, float %1196
  %1209 = fcmp contract olt float %1198, 0.000000e+00
  %1210 = select i1 %1209, float 0.000000e+00, float %1198
  %1211 = fcmp contract ogt float %1208, 1.000000e+00
  %1212 = select i1 %1211, float 1.000000e+00, float %1208
  %1213 = fcmp contract ogt float %1210, 1.000000e+00
  %1214 = select i1 %1213, float 1.000000e+00, float %1210
  %1215 = load i32, i32 addrspace(1)* %1167, align 4, !tbaa !20
  %1216 = fsub contract float 1.000000e+00, %1212
  %1217 = fsub contract float 1.000000e+00, %1214
  %1218 = load i32, i32 addrspace(1)* %1169, align 4, !tbaa !20
  %1219 = load i32, i32 addrspace(1)* %1171, align 4, !tbaa !20
  %1220 = load i32, i32 addrspace(1)* %1173, align 4, !tbaa !20
  %1221 = mul nsw i32 %1186, %6
  %1222 = add nsw i32 %1221, %1177
  %1223 = icmp sgt i32 %1222, 0
  %1224 = icmp slt i32 %1222, %31
  %1225 = select i1 %1223, i1 %1224, i1 false
  br i1 %1225, label %1226, label %1309

1226:                                             ; preds = %1206
  %1227 = freeze i32 %1215
  %1228 = sdiv i32 %1227, 256
  %1229 = mul i32 %1228, 256
  %1230 = sub i32 %1227, %1229
  %1231 = sitofp i32 %1230 to float
  %1232 = fmul contract float %1216, %1231
  %1233 = fmul contract float %1217, %1232
  %1234 = freeze i32 %1218
  %1235 = sdiv i32 %1234, 256
  %1236 = mul i32 %1235, 256
  %1237 = sub i32 %1234, %1236
  %1238 = sitofp i32 %1237 to float
  %1239 = fmul contract float %1216, %1238
  %1240 = fmul contract float %1214, %1239
  %1241 = fadd contract float %1233, %1240
  %1242 = freeze i32 %1219
  %1243 = sdiv i32 %1242, 256
  %1244 = mul i32 %1243, 256
  %1245 = sub i32 %1242, %1244
  %1246 = sitofp i32 %1245 to float
  %1247 = fmul contract float %1212, %1246
  %1248 = fmul contract float %1217, %1247
  %1249 = fadd contract float %1241, %1248
  %1250 = freeze i32 %1220
  %1251 = sdiv i32 %1250, 256
  %1252 = mul i32 %1251, 256
  %1253 = sub i32 %1250, %1252
  %1254 = sitofp i32 %1253 to float
  %1255 = fmul contract float %1212, %1254
  %1256 = fmul contract float %1214, %1255
  %1257 = fadd contract float %1249, %1256
  %1258 = fptosi float %1257 to i32
  %1259 = tail call i32 @llvm.smin.i32(i32 %1258, i32 255)
  %1260 = srem i32 %1228, 256
  %1261 = sitofp i32 %1260 to float
  %1262 = fmul contract float %1216, %1261
  %1263 = fmul contract float %1217, %1262
  %1264 = srem i32 %1235, 256
  %1265 = sitofp i32 %1264 to float
  %1266 = fmul contract float %1216, %1265
  %1267 = fmul contract float %1214, %1266
  %1268 = fadd contract float %1263, %1267
  %1269 = srem i32 %1243, 256
  %1270 = sitofp i32 %1269 to float
  %1271 = fmul contract float %1212, %1270
  %1272 = fmul contract float %1217, %1271
  %1273 = fadd contract float %1268, %1272
  %1274 = srem i32 %1251, 256
  %1275 = sitofp i32 %1274 to float
  %1276 = fmul contract float %1212, %1275
  %1277 = fmul contract float %1214, %1276
  %1278 = fadd contract float %1273, %1277
  %1279 = fptosi float %1278 to i32
  %1280 = tail call i32 @llvm.smin.i32(i32 %1279, i32 255)
  %1281 = sdiv i32 %1215, 65536
  %1282 = sitofp i32 %1281 to float
  %1283 = fmul contract float %1216, %1282
  %1284 = fmul contract float %1217, %1283
  %1285 = sdiv i32 %1218, 65536
  %1286 = sitofp i32 %1285 to float
  %1287 = fmul contract float %1216, %1286
  %1288 = fmul contract float %1214, %1287
  %1289 = fadd contract float %1284, %1288
  %1290 = sdiv i32 %1219, 65536
  %1291 = sitofp i32 %1290 to float
  %1292 = fmul contract float %1212, %1291
  %1293 = fmul contract float %1217, %1292
  %1294 = fadd contract float %1289, %1293
  %1295 = sdiv i32 %1220, 65536
  %1296 = sitofp i32 %1295 to float
  %1297 = fmul contract float %1212, %1296
  %1298 = fmul contract float %1214, %1297
  %1299 = fadd contract float %1294, %1298
  %1300 = fptosi float %1299 to i32
  %1301 = tail call i32 @llvm.smin.i32(i32 %1300, i32 255)
  %1302 = shl nsw i32 %1301, 16
  %1303 = shl nsw i32 %1280, 8
  %1304 = add i32 %1302, %1259
  %1305 = add i32 %1304, %1303
  %1306 = zext i32 %1222 to i64
  %1307 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1306
  store i32 %1305, i32 addrspace(1)* %1307, align 4, !tbaa !20
  %1308 = getelementptr inbounds float, float addrspace(1)* %1, i64 %1306
  store float %1175, float addrspace(1)* %1308, align 4, !tbaa !16
  br label %1309

1309:                                             ; preds = %1226, %1206, %1192, %1187, %1185
  %1310 = add nsw i32 %1186, 1
  %1311 = icmp slt i32 %1310, %1126
  br i1 %1311, label %1185, label %1312, !llvm.loop !22

1312:                                             ; preds = %1309, %1176
  %1313 = add nsw i32 %1177, 1
  %1314 = icmp slt i32 %1313, %1114
  br i1 %1314, label %1176, label %1315, !llvm.loop !24

1315:                                             ; preds = %1312, %1153, %1148, %1140, %889
  %1316 = add nsw i32 %15, 24
  %1317 = mul nsw i32 %1316, %29
  %1318 = add nsw i32 %1317, %11
  %1319 = mul nsw i32 %1318, 3
  %1320 = add nsw i32 %1319, 1
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1321
  %1323 = load float, float addrspace(1)* %1322, align 4, !tbaa !16
  %1324 = fadd contract float %1323, 1.000000e+00
  %1325 = fmul contract float %1324, 5.000000e-01
  %1326 = fmul contract float %1325, %32
  %1327 = fpext float %1326 to double
  %1328 = fadd contract double %1327, -5.000000e-01
  %1329 = tail call double @llvm.round.f64(double %1328)
  %1330 = fptosi double %1329 to i32
  %1331 = add nsw i32 %1319, 2
  %1332 = sext i32 %1331 to i64
  %1333 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1332
  %1334 = load float, float addrspace(1)* %1333, align 4, !tbaa !16
  %1335 = fadd contract float %1334, 1.000000e+00
  %1336 = fmul contract float %1335, 5.000000e-01
  %1337 = fmul contract float %1336, %33
  %1338 = fpext float %1337 to double
  %1339 = fadd contract double %1338, -5.000000e-01
  %1340 = tail call double @llvm.round.f64(double %1339)
  %1341 = fptosi double %1340 to i32
  %1342 = fadd contract float %1326, -5.000000e-01
  %1343 = fadd contract float %1337, -5.000000e-01
  %1344 = add nsw i32 %1318, 1
  %1345 = mul nsw i32 %1344, 3
  %1346 = add nsw i32 %1345, 1
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1347
  %1349 = load float, float addrspace(1)* %1348, align 4, !tbaa !16
  %1350 = fadd contract float %1349, 1.000000e+00
  %1351 = fmul contract float %1350, 5.000000e-01
  %1352 = fmul contract float %1351, %32
  %1353 = fpext float %1352 to double
  %1354 = fadd contract double %1353, -5.000000e-01
  %1355 = fpext float %1342 to double
  %1356 = fsub contract double %1354, %1355
  %1357 = fptrunc double %1356 to float
  %1358 = add nsw i32 %1345, 2
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1359
  %1361 = load float, float addrspace(1)* %1360, align 4, !tbaa !16
  %1362 = fadd contract float %1361, 1.000000e+00
  %1363 = fmul contract float %1362, 5.000000e-01
  %1364 = fmul contract float %1363, %33
  %1365 = fpext float %1364 to double
  %1366 = fadd contract double %1365, -5.000000e-01
  %1367 = fpext float %1343 to double
  %1368 = fsub contract double %1366, %1367
  %1369 = fptrunc double %1368 to float
  %1370 = add nsw i32 %15, 25
  %1371 = mul nsw i32 %1370, %29
  %1372 = add nsw i32 %1371, %11
  %1373 = mul nsw i32 %1372, 3
  %1374 = add nsw i32 %1373, 1
  %1375 = sext i32 %1374 to i64
  %1376 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1375
  %1377 = load float, float addrspace(1)* %1376, align 4, !tbaa !16
  %1378 = fadd contract float %1377, 1.000000e+00
  %1379 = fmul contract float %1378, 5.000000e-01
  %1380 = fmul contract float %1379, %32
  %1381 = fpext float %1380 to double
  %1382 = fadd contract double %1381, -5.000000e-01
  %1383 = fsub contract double %1382, %1355
  %1384 = fptrunc double %1383 to float
  %1385 = add nsw i32 %1373, 2
  %1386 = sext i32 %1385 to i64
  %1387 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1386
  %1388 = load float, float addrspace(1)* %1387, align 4, !tbaa !16
  %1389 = fadd contract float %1388, 1.000000e+00
  %1390 = fmul contract float %1389, 5.000000e-01
  %1391 = fmul contract float %1390, %33
  %1392 = fpext float %1391 to double
  %1393 = fadd contract double %1392, -5.000000e-01
  %1394 = fsub contract double %1393, %1367
  %1395 = fptrunc double %1394 to float
  %1396 = add nsw i32 %1372, 1
  %1397 = mul nsw i32 %1396, 3
  %1398 = add nsw i32 %1397, 1
  %1399 = sext i32 %1398 to i64
  %1400 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1399
  %1401 = load float, float addrspace(1)* %1400, align 4, !tbaa !16
  %1402 = fadd contract float %1401, 1.000000e+00
  %1403 = fmul contract float %1402, 5.000000e-01
  %1404 = fmul contract float %1403, %32
  %1405 = fpext float %1404 to double
  %1406 = fadd contract double %1405, -5.000000e-01
  %1407 = fsub contract double %1406, %1355
  %1408 = fptrunc double %1407 to float
  %1409 = add nsw i32 %1397, 2
  %1410 = sext i32 %1409 to i64
  %1411 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1410
  %1412 = load float, float addrspace(1)* %1411, align 4, !tbaa !16
  %1413 = fadd contract float %1412, 1.000000e+00
  %1414 = fmul contract float %1413, 5.000000e-01
  %1415 = fmul contract float %1414, %33
  %1416 = fpext float %1415 to double
  %1417 = fadd contract double %1416, -5.000000e-01
  %1418 = fsub contract double %1417, %1367
  %1419 = fptrunc double %1418 to float
  %1420 = fpext float %1357 to double
  %1421 = fdiv contract double %1420, 3.000000e+00
  %1422 = fsub contract double 0.000000e+00, %1421
  %1423 = fpext float %1384 to double
  %1424 = fmul contract double %1423, 2.000000e+00
  %1425 = fdiv contract double %1424, 3.000000e+00
  %1426 = fadd contract double %1422, %1425
  %1427 = fpext float %1408 to double
  %1428 = fdiv contract double %1427, 3.000000e+00
  %1429 = fadd contract double %1426, %1428
  %1430 = fptrunc double %1429 to float
  %1431 = fpext float %1369 to double
  %1432 = fdiv contract double %1431, 3.000000e+00
  %1433 = fsub contract double 0.000000e+00, %1432
  %1434 = fpext float %1395 to double
  %1435 = fmul contract double %1434, 2.000000e+00
  %1436 = fdiv contract double %1435, 3.000000e+00
  %1437 = fadd contract double %1433, %1436
  %1438 = fpext float %1419 to double
  %1439 = fdiv contract double %1438, 3.000000e+00
  %1440 = fadd contract double %1437, %1439
  %1441 = fptrunc double %1440 to float
  %1442 = fmul contract double %1420, 2.000000e+00
  %1443 = fdiv contract double %1442, 3.000000e+00
  %1444 = fadd contract double %1443, 0.000000e+00
  %1445 = fdiv contract double %1423, 3.000000e+00
  %1446 = fsub contract double %1444, %1445
  %1447 = fadd contract double %1446, %1428
  %1448 = fptrunc double %1447 to float
  %1449 = fmul contract double %1431, 2.000000e+00
  %1450 = fdiv contract double %1449, 3.000000e+00
  %1451 = fadd contract double %1450, 0.000000e+00
  %1452 = fdiv contract double %1434, 3.000000e+00
  %1453 = fsub contract double %1451, %1452
  %1454 = fadd contract double %1453, %1439
  %1455 = fptrunc double %1454 to float
  %1456 = fmul contract float %1430, %1455
  %1457 = fmul contract float %1448, %1441
  %1458 = fsub contract float %1456, %1457
  %1459 = fpext float %1458 to double
  %1460 = fadd contract double %1459, 1.000000e-10
  %1461 = fptrunc double %1460 to float
  %1462 = fdiv contract float %1455, %1461
  %1463 = fneg contract float %1441
  %1464 = fdiv contract float %1463, %1461
  %1465 = fneg contract float %1448
  %1466 = fdiv contract float %1465, %1461
  %1467 = fdiv contract float %1430, %1461
  %1468 = sext i32 %1319 to i64
  %1469 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1468
  %1470 = load float, float addrspace(1)* %1469, align 4, !tbaa !16
  %1471 = fmul contract float %1470, 1.000000e+02
  %1472 = fptosi float %1471 to i32
  %1473 = mul nsw i32 %1341, %6
  %1474 = add nsw i32 %1473, %1330
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1475
  %1477 = load float, float addrspace(1)* %1476, align 4, !tbaa !16
  %1478 = fmul contract float %1477, 1.000000e+02
  %1479 = fptosi float %1478 to i32
  %1480 = sub nsw i32 %1472, %1479
  %1481 = sext i32 %1345 to i64
  %1482 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1481
  %1483 = load float, float addrspace(1)* %1482, align 4, !tbaa !16
  %1484 = fmul contract float %1483, 1.000000e+02
  %1485 = fptosi float %1484 to i32
  %1486 = add nsw i32 %1474, 1
  %1487 = sext i32 %1486 to i64
  %1488 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1487
  %1489 = load float, float addrspace(1)* %1488, align 4, !tbaa !16
  %1490 = fmul contract float %1489, 1.000000e+02
  %1491 = fptosi float %1490 to i32
  %1492 = sub nsw i32 %1485, %1491
  %1493 = sext i32 %1373 to i64
  %1494 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1493
  %1495 = load float, float addrspace(1)* %1494, align 4, !tbaa !16
  %1496 = fmul contract float %1495, 1.000000e+02
  %1497 = fptosi float %1496 to i32
  %1498 = add nsw i32 %1341, 1
  %1499 = mul nsw i32 %1498, %6
  %1500 = add nsw i32 %1499, %1330
  %1501 = sext i32 %1500 to i64
  %1502 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1501
  %1503 = load float, float addrspace(1)* %1502, align 4, !tbaa !16
  %1504 = fmul contract float %1503, 1.000000e+02
  %1505 = fptosi float %1504 to i32
  %1506 = sub nsw i32 %1497, %1505
  %1507 = sext i32 %1397 to i64
  %1508 = getelementptr inbounds float, float addrspace(1)* %0, i64 %1507
  %1509 = load float, float addrspace(1)* %1508, align 4, !tbaa !16
  %1510 = fmul contract float %1509, 1.000000e+02
  %1511 = fptosi float %1510 to i32
  %1512 = add nsw i32 %1500, 1
  %1513 = sext i32 %1512 to i64
  %1514 = getelementptr inbounds float, float addrspace(1)* %2, i64 %1513
  %1515 = load float, float addrspace(1)* %1514, align 4, !tbaa !16
  %1516 = fmul contract float %1515, 1.000000e+02
  %1517 = fptosi float %1516 to i32
  %1518 = sub nsw i32 %1511, %1517
  %1519 = tail call i32 @llvm.smax.i32(i32 %1480, i32 %1492)
  %1520 = tail call i32 @llvm.smax.i32(i32 %1506, i32 %1518)
  %1521 = tail call i32 @llvm.smax.i32(i32 %1519, i32 %1520)
  %1522 = tail call i32 @llvm.smax.i32(i32 %1472, i32 %1497)
  %1523 = tail call i32 @llvm.smax.i32(i32 %1485, i32 %1511)
  %1524 = tail call i32 @llvm.smax.i32(i32 %1522, i32 %1523)
  %1525 = tail call i32 @llvm.smin.i32(i32 %1472, i32 %1497)
  %1526 = tail call i32 @llvm.smin.i32(i32 %1485, i32 %1511)
  %1527 = tail call i32 @llvm.smin.i32(i32 %1525, i32 %1526)
  %1528 = sub nsw i32 %1524, %1527
  %1529 = tail call float @llvm.minnum.f32(float %1408, float 0.000000e+00)
  %1530 = tail call float @llvm.minnum.f32(float %1357, float %1384)
  %1531 = tail call float @llvm.minnum.f32(float %1529, float %1530)
  %1532 = fadd contract float %1342, %1531
  %1533 = tail call float @llvm.floor.f32(float %1532)
  %1534 = fptosi float %1533 to i32
  %1535 = tail call float @llvm.maxnum.f32(float %1408, float 0.000000e+00)
  %1536 = tail call float @llvm.maxnum.f32(float %1357, float %1384)
  %1537 = tail call float @llvm.maxnum.f32(float %1535, float %1536)
  %1538 = fadd contract float %1342, %1537
  %1539 = tail call float @llvm.ceil.f32(float %1538)
  %1540 = fptosi float %1539 to i32
  %1541 = tail call float @llvm.minnum.f32(float %1419, float 0.000000e+00)
  %1542 = tail call float @llvm.minnum.f32(float %1369, float %1395)
  %1543 = tail call float @llvm.minnum.f32(float %1541, float %1542)
  %1544 = fadd contract float %1343, %1543
  %1545 = tail call float @llvm.floor.f32(float %1544)
  %1546 = fptosi float %1545 to i32
  %1547 = tail call float @llvm.maxnum.f32(float %1419, float 0.000000e+00)
  %1548 = tail call float @llvm.maxnum.f32(float %1369, float %1395)
  %1549 = tail call float @llvm.maxnum.f32(float %1547, float %1548)
  %1550 = fadd contract float %1343, %1549
  %1551 = tail call float @llvm.ceil.f32(float %1550)
  %1552 = fptosi float %1551 to i32
  %1553 = sitofp i32 %1472 to double
  %1554 = fmul contract double %1553, 1.000000e-01
  %1555 = fcmp contract ogt double %1554, 1.000000e+01
  %1556 = select contract i1 %1555, double %1554, double 1.000000e+01
  %1557 = fptrunc double %1556 to float
  %1558 = sitofp i32 %1524 to double
  %1559 = fmul contract double %1558, 5.000000e-02
  %1560 = fcmp contract ogt double %1559, 1.000000e+01
  %1561 = select contract i1 %1560, double %1559, double 1.000000e+01
  %1562 = fptrunc double %1561 to float
  %1563 = sitofp i32 %1528 to float
  %1564 = fcmp contract olt float %1563, %1562
  %1565 = select i1 %1564, i1 %35, i1 false
  br i1 %1565, label %1566, label %1741

1566:                                             ; preds = %1315
  %1567 = tail call i32 @llvm.smin.i32(i32 %1480, i32 %1492)
  %1568 = tail call i32 @llvm.smin.i32(i32 %1506, i32 %1518)
  %1569 = tail call i32 @llvm.smin.i32(i32 %1567, i32 %1568)
  %1570 = sitofp i32 %1569 to float
  %1571 = fneg contract float %1557
  %1572 = fcmp contract ogt float %1570, %1571
  %1573 = select i1 %38, i1 %1572, i1 false
  br i1 %1573, label %1574, label %1741

1574:                                             ; preds = %1566
  %1575 = sitofp i32 %1521 to float
  %1576 = fcmp contract olt float %1575, %1557
  %1577 = icmp slt i32 %1472, 10000
  %1578 = select i1 %1576, i1 %1577, i1 false
  br i1 %1578, label %1579, label %1741

1579:                                             ; preds = %1574
  %1580 = sub nsw i32 %1540, %1534
  %1581 = sub nsw i32 %1552, %1546
  %1582 = mul nsw i32 %1581, %1580
  %1583 = icmp slt i32 %1582, 1600
  %1584 = icmp slt i32 %1580, 40
  %1585 = and i1 %1584, %1583
  %1586 = icmp slt i32 %1581, 40
  %1587 = select i1 %1585, i1 %1586, i1 false
  %1588 = icmp sgt i32 %1540, %1534
  %1589 = select i1 %1587, i1 %1588, i1 false
  br i1 %1589, label %1590, label %1741

1590:                                             ; preds = %1579
  %1591 = icmp sgt i32 %1552, %1546
  %1592 = sext i32 %1318 to i64
  %1593 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1592
  %1594 = sext i32 %1344 to i64
  %1595 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1594
  %1596 = sext i32 %1372 to i64
  %1597 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1596
  %1598 = sext i32 %1396 to i64
  %1599 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %1598
  %1600 = tail call float @llvm.fabs.f32(float %1461)
  %1601 = fdiv contract float 1.000000e+00, %1600
  br label %1602

1602:                                             ; preds = %1738, %1590
  %1603 = phi i32 [ %1534, %1590 ], [ %1739, %1738 ]
  br i1 %1591, label %1604, label %1738

1604:                                             ; preds = %1602
  %1605 = icmp sgt i32 %1603, -1
  %1606 = icmp slt i32 %1603, %6
  %1607 = sitofp i32 %1603 to float
  %1608 = fsub contract float %1607, %1342
  %1609 = fmul contract float %1462, %1608
  %1610 = fmul contract float %1464, %1608
  br label %1611

1611:                                             ; preds = %1735, %1604
  %1612 = phi i32 [ %1546, %1604 ], [ %1736, %1735 ]
  br i1 %1605, label %1613, label %1735

1613:                                             ; preds = %1611
  %1614 = icmp sgt i32 %1612, -1
  %1615 = select i1 %1606, i1 %1614, i1 false
  %1616 = icmp slt i32 %1612, %5
  %1617 = select i1 %1615, i1 %1616, i1 false
  br i1 %1617, label %1618, label %1735

1618:                                             ; preds = %1613
  %1619 = sitofp i32 %1612 to float
  %1620 = fsub contract float %1619, %1343
  %1621 = fmul contract float %1466, %1620
  %1622 = fadd contract float %1609, %1621
  %1623 = fmul contract float %1467, %1620
  %1624 = fadd contract float %1610, %1623
  %1625 = fcmp contract ogt float %1622, 0xBF847AE140000000
  %1626 = fcmp contract olt float %1622, 0x3FF028F5C0000000
  %1627 = and i1 %1625, %1626
  %1628 = fcmp contract ogt float %1624, 0xBF847AE140000000
  %1629 = select i1 %1627, i1 %1628, i1 false
  %1630 = fcmp contract olt float %1624, 0x3FF028F5C0000000
  %1631 = select i1 %1629, i1 %1630, i1 false
  br i1 %1631, label %1632, label %1735

1632:                                             ; preds = %1618
  %1633 = fcmp contract olt float %1622, 0.000000e+00
  %1634 = select i1 %1633, float 0.000000e+00, float %1622
  %1635 = fcmp contract olt float %1624, 0.000000e+00
  %1636 = select i1 %1635, float 0.000000e+00, float %1624
  %1637 = fcmp contract ogt float %1634, 1.000000e+00
  %1638 = select i1 %1637, float 1.000000e+00, float %1634
  %1639 = fcmp contract ogt float %1636, 1.000000e+00
  %1640 = select i1 %1639, float 1.000000e+00, float %1636
  %1641 = load i32, i32 addrspace(1)* %1593, align 4, !tbaa !20
  %1642 = fsub contract float 1.000000e+00, %1638
  %1643 = fsub contract float 1.000000e+00, %1640
  %1644 = load i32, i32 addrspace(1)* %1595, align 4, !tbaa !20
  %1645 = load i32, i32 addrspace(1)* %1597, align 4, !tbaa !20
  %1646 = load i32, i32 addrspace(1)* %1599, align 4, !tbaa !20
  %1647 = mul nsw i32 %1612, %6
  %1648 = add nsw i32 %1647, %1603
  %1649 = icmp sgt i32 %1648, 0
  %1650 = icmp slt i32 %1648, %31
  %1651 = select i1 %1649, i1 %1650, i1 false
  br i1 %1651, label %1652, label %1735

1652:                                             ; preds = %1632
  %1653 = freeze i32 %1641
  %1654 = sdiv i32 %1653, 256
  %1655 = mul i32 %1654, 256
  %1656 = sub i32 %1653, %1655
  %1657 = sitofp i32 %1656 to float
  %1658 = fmul contract float %1642, %1657
  %1659 = fmul contract float %1643, %1658
  %1660 = freeze i32 %1644
  %1661 = sdiv i32 %1660, 256
  %1662 = mul i32 %1661, 256
  %1663 = sub i32 %1660, %1662
  %1664 = sitofp i32 %1663 to float
  %1665 = fmul contract float %1642, %1664
  %1666 = fmul contract float %1640, %1665
  %1667 = fadd contract float %1659, %1666
  %1668 = freeze i32 %1645
  %1669 = sdiv i32 %1668, 256
  %1670 = mul i32 %1669, 256
  %1671 = sub i32 %1668, %1670
  %1672 = sitofp i32 %1671 to float
  %1673 = fmul contract float %1638, %1672
  %1674 = fmul contract float %1643, %1673
  %1675 = fadd contract float %1667, %1674
  %1676 = freeze i32 %1646
  %1677 = sdiv i32 %1676, 256
  %1678 = mul i32 %1677, 256
  %1679 = sub i32 %1676, %1678
  %1680 = sitofp i32 %1679 to float
  %1681 = fmul contract float %1638, %1680
  %1682 = fmul contract float %1640, %1681
  %1683 = fadd contract float %1675, %1682
  %1684 = fptosi float %1683 to i32
  %1685 = tail call i32 @llvm.smin.i32(i32 %1684, i32 255)
  %1686 = srem i32 %1654, 256
  %1687 = sitofp i32 %1686 to float
  %1688 = fmul contract float %1642, %1687
  %1689 = fmul contract float %1643, %1688
  %1690 = srem i32 %1661, 256
  %1691 = sitofp i32 %1690 to float
  %1692 = fmul contract float %1642, %1691
  %1693 = fmul contract float %1640, %1692
  %1694 = fadd contract float %1689, %1693
  %1695 = srem i32 %1669, 256
  %1696 = sitofp i32 %1695 to float
  %1697 = fmul contract float %1638, %1696
  %1698 = fmul contract float %1643, %1697
  %1699 = fadd contract float %1694, %1698
  %1700 = srem i32 %1677, 256
  %1701 = sitofp i32 %1700 to float
  %1702 = fmul contract float %1638, %1701
  %1703 = fmul contract float %1640, %1702
  %1704 = fadd contract float %1699, %1703
  %1705 = fptosi float %1704 to i32
  %1706 = tail call i32 @llvm.smin.i32(i32 %1705, i32 255)
  %1707 = sdiv i32 %1641, 65536
  %1708 = sitofp i32 %1707 to float
  %1709 = fmul contract float %1642, %1708
  %1710 = fmul contract float %1643, %1709
  %1711 = sdiv i32 %1644, 65536
  %1712 = sitofp i32 %1711 to float
  %1713 = fmul contract float %1642, %1712
  %1714 = fmul contract float %1640, %1713
  %1715 = fadd contract float %1710, %1714
  %1716 = sdiv i32 %1645, 65536
  %1717 = sitofp i32 %1716 to float
  %1718 = fmul contract float %1638, %1717
  %1719 = fmul contract float %1643, %1718
  %1720 = fadd contract float %1715, %1719
  %1721 = sdiv i32 %1646, 65536
  %1722 = sitofp i32 %1721 to float
  %1723 = fmul contract float %1638, %1722
  %1724 = fmul contract float %1640, %1723
  %1725 = fadd contract float %1720, %1724
  %1726 = fptosi float %1725 to i32
  %1727 = tail call i32 @llvm.smin.i32(i32 %1726, i32 255)
  %1728 = shl nsw i32 %1727, 16
  %1729 = shl nsw i32 %1706, 8
  %1730 = add i32 %1728, %1685
  %1731 = add i32 %1730, %1729
  %1732 = zext i32 %1648 to i64
  %1733 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1732
  store i32 %1731, i32 addrspace(1)* %1733, align 4, !tbaa !20
  %1734 = getelementptr inbounds float, float addrspace(1)* %1, i64 %1732
  store float %1601, float addrspace(1)* %1734, align 4, !tbaa !16
  br label %1735

1735:                                             ; preds = %1652, %1632, %1618, %1613, %1611
  %1736 = add nsw i32 %1612, 1
  %1737 = icmp slt i32 %1736, %1552
  br i1 %1737, label %1611, label %1738, !llvm.loop !22

1738:                                             ; preds = %1735, %1602
  %1739 = add nsw i32 %1603, 1
  %1740 = icmp slt i32 %1739, %1540
  br i1 %1740, label %1602, label %1741, !llvm.loop !24

1741:                                             ; preds = %1738, %1579, %1574, %1566, %1315
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.ceil.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.floor.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.minnum.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.round.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smin.i32(i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nocallback nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !10, i64 12}
!6 = !{!"hsa_kernel_dispatch_packet_s", !7, i64 0, !7, i64 2, !7, i64 4, !7, i64 6, !7, i64 8, !7, i64 10, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !11, i64 32, !12, i64 40, !11, i64 48, !13, i64 56}
!7 = !{!"short", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!"int", !8, i64 0}
!11 = !{!"long", !8, i64 0}
!12 = !{!"any pointer", !8, i64 0}
!13 = !{!"hsa_signal_s", !11, i64 0}
!14 = !{i16 1, i16 1025}
!15 = !{}
!16 = !{!17, !17, i64 0}
!17 = !{!"float", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C++ TBAA"}
!20 = !{!21, !21, i64 0}
!21 = !{!"int", !18, i64 0}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.mustprogress"}
!24 = distinct !{!24, !23}
