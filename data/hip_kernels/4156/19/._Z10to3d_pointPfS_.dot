digraph "CFG for '_Z10to3d_pointPfS_' function" {
	label="CFG for '_Z10to3d_pointPfS_' function";

	Node0x527c3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = shl i32 %3, 5\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = add i32 %4, %5\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = shl i32 %7, 5\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %10 = add i32 %8, %9\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !5\l  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !14, !invariant.load\l... !15\l  %18 = zext i16 %17 to i32\l  %19 = udiv i32 %14, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %14, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = shl i32 %23, 5\l  %25 = ashr exact i32 %24, 1\l  %26 = sitofp i32 %25 to float\l  %27 = fpext float %26 to double\l  %28 = sitofp i32 %6 to float\l  %29 = fpext float %28 to double\l  %30 = fadd contract double %29, 5.000000e-01\l  %31 = sitofp i32 %24 to float\l  %32 = fpext float %31 to double\l  %33 = fdiv contract double %30, %32\l  %34 = fmul contract double %33, 2.000000e+00\l  %35 = fmul contract double %34, 0x400921FB54442D18\l  %36 = fadd contract double %35, 0x400921FB54442D18\l  %37 = fptrunc double %36 to float\l  %38 = tail call float @llvm.fabs.f32(float %37)\l  %39 = fcmp olt float %38, 1.310720e+05\l  %40 = tail call i1 @llvm.amdgcn.class.f32(float %38, i32 504)\l  %41 = bitcast float %37 to i32\l  %42 = bitcast float %38 to i32\l  %43 = lshr i32 %42, 23\l  %44 = and i32 %42, 8388607\l  %45 = or i32 %44, 8388608\l  %46 = zext i32 %45 to i64\l  %47 = mul nuw nsw i64 %46, 4266746795\l  %48 = trunc i64 %47 to i32\l  %49 = lshr i64 %47, 32\l  %50 = mul nuw nsw i64 %46, 1011060801\l  %51 = add nuw nsw i64 %49, %50\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %46, 3680671129\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = mul nuw nsw i64 %46, 4113882560\l  %59 = add nuw nsw i64 %57, %58\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = mul nuw nsw i64 %46, 4230436817\l  %63 = add nuw nsw i64 %61, %62\l  %64 = trunc i64 %63 to i32\l  %65 = lshr i64 %63, 32\l  %66 = mul nuw nsw i64 %46, 1313084713\l  %67 = add nuw nsw i64 %65, %66\l  %68 = trunc i64 %67 to i32\l  %69 = lshr i64 %67, 32\l  %70 = mul nuw nsw i64 %46, 2734261102\l  %71 = add nuw nsw i64 %69, %70\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = trunc i64 %73 to i32\l  %75 = add nsw i32 %43, -120\l  %76 = icmp ugt i32 %75, 63\l  %77 = select i1 %76, i32 %68, i32 %74\l  %78 = select i1 %76, i32 %64, i32 %72\l  %79 = select i1 %76, i32 %60, i32 %68\l  %80 = select i1 %76, i32 %56, i32 %64\l  %81 = select i1 %76, i32 %52, i32 %60\l  %82 = select i1 %76, i32 %48, i32 %56\l  %83 = select i1 %76, i32 -64, i32 0\l  %84 = add nsw i32 %83, %75\l  %85 = icmp ugt i32 %84, 31\l  %86 = select i1 %85, i32 %78, i32 %77\l  %87 = select i1 %85, i32 %79, i32 %78\l  %88 = select i1 %85, i32 %80, i32 %79\l  %89 = select i1 %85, i32 %81, i32 %80\l  %90 = select i1 %85, i32 %82, i32 %81\l  %91 = select i1 %85, i32 -32, i32 0\l  %92 = add nsw i32 %91, %84\l  %93 = icmp ugt i32 %92, 31\l  %94 = select i1 %93, i32 %87, i32 %86\l  %95 = select i1 %93, i32 %88, i32 %87\l  %96 = select i1 %93, i32 %89, i32 %88\l  %97 = select i1 %93, i32 %90, i32 %89\l  %98 = select i1 %93, i32 -32, i32 0\l  %99 = add nsw i32 %98, %92\l  %100 = icmp eq i32 %99, 0\l  %101 = sub nsw i32 32, %99\l  %102 = tail call i32 @llvm.fshr.i32(i32 %94, i32 %95, i32 %101)\l  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %101)\l  %104 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %101)\l  %105 = select i1 %100, i32 %94, i32 %102\l  %106 = select i1 %100, i32 %95, i32 %103\l  %107 = select i1 %100, i32 %96, i32 %104\l  %108 = lshr i32 %105, 29\l  %109 = tail call i32 @llvm.fshl.i32(i32 %105, i32 %106, i32 2)\l  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 2)\l  %111 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %97, i32 2)\l  %112 = and i32 %108, 1\l  %113 = sub nsw i32 0, %112\l  %114 = shl i32 %108, 31\l  %115 = xor i32 %109, %113\l  %116 = xor i32 %110, %113\l  %117 = xor i32 %111, %113\l  %118 = tail call i32 @llvm.ctlz.i32(i32 %115, i1 false), !range !16\l  %119 = sub nsw i32 31, %118\l  %120 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %116, i32 %119)\l  %121 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %119)\l  %122 = shl nuw nsw i32 %118, 23\l  %123 = sub nuw nsw i32 1056964608, %122\l  %124 = lshr i32 %120, 9\l  %125 = or i32 %124, %123\l  %126 = or i32 %125, %114\l  %127 = bitcast i32 %126 to float\l  %128 = tail call i32 @llvm.fshl.i32(i32 %120, i32 %121, i32 23)\l  %129 = tail call i32 @llvm.ctlz.i32(i32 %128, i1 false), !range !16\l  %130 = fmul float %127, 0x3FF921FB40000000\l  %131 = add nuw nsw i32 %129, %118\l  %132 = shl nuw nsw i32 %131, 23\l  %133 = sub nuw nsw i32 855638016, %132\l  %134 = sub nsw i32 31, %129\l  %135 = tail call i32 @llvm.fshr.i32(i32 %128, i32 %121, i32 %134)\l  %136 = lshr i32 %135, 9\l  %137 = or i32 %133, %136\l  %138 = or i32 %137, %114\l  %139 = bitcast i32 %138 to float\l  %140 = fneg float %130\l  %141 = tail call float @llvm.fma.f32(float %127, float 0x3FF921FB40000000,\l... float %140)\l  %142 = tail call float @llvm.fma.f32(float %127, float 0x3E74442D00000000,\l... float %141)\l  %143 = tail call float @llvm.fma.f32(float %139, float 0x3FF921FB40000000,\l... float %142)\l  %144 = fadd float %130, %143\l  %145 = lshr i32 %105, 30\l  %146 = add nuw nsw i32 %112, %145\l  %147 = fmul float %38, 0x3FE45F3060000000\l  %148 = tail call float @llvm.rint.f32(float %147)\l  %149 = tail call float @llvm.fma.f32(float %148, float 0xBFF921FB40000000,\l... float %38)\l  %150 = tail call float @llvm.fma.f32(float %148, float 0xBE74442D00000000,\l... float %149)\l  %151 = tail call float @llvm.fma.f32(float %148, float 0xBCF8469880000000,\l... float %150)\l  %152 = fptosi float %148 to i32\l  %153 = select i1 %39, float %151, float %144\l  %154 = select i1 %39, i32 %152, i32 %146\l  %155 = fmul float %153, %153\l  %156 = tail call float @llvm.fmuladd.f32(float %155, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %157 = tail call float @llvm.fmuladd.f32(float %155, float %156, float\l... 0xBFC55553A0000000)\l  %158 = fmul float %155, %157\l  %159 = tail call float @llvm.fmuladd.f32(float %153, float %158, float %153)\l  %160 = tail call float @llvm.fmuladd.f32(float %155, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %161 = tail call float @llvm.fmuladd.f32(float %155, float %160, float\l... 0x3FA5557EE0000000)\l  %162 = tail call float @llvm.fmuladd.f32(float %155, float %161, float\l... 0xBFE0000080000000)\l  %163 = tail call float @llvm.fmuladd.f32(float %155, float %162, float\l... 1.000000e+00)\l  %164 = fneg float %159\l  %165 = and i32 %154, 1\l  %166 = icmp eq i32 %165, 0\l  %167 = select i1 %166, float %163, float %164\l  %168 = bitcast float %167 to i32\l  %169 = shl i32 %154, 30\l  %170 = and i32 %169, -2147483648\l  %171 = xor i32 %170, %168\l  %172 = bitcast i32 %171 to float\l  %173 = select i1 %40, float %172, float 0x7FF8000000000000\l  %174 = select i1 %166, float %159, float %163\l  %175 = bitcast float %174 to i32\l  %176 = xor i32 %41, %175\l  %177 = xor i32 %176, %42\l  %178 = xor i32 %177, %170\l  %179 = bitcast i32 %178 to float\l  %180 = select i1 %40, float %179, float 0x7FF8000000000000\l  br label %182\l}"];
	Node0x527c3a0 -> Node0x5288900;
	Node0x5288a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%181:\l181:                                              \l  ret void\l}"];
	Node0x5288900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%182:\l182:                                              \l  %183 = phi i32 [ 0, %2 ], [ %648, %619 ]\l  %184 = add nsw i32 %10, %183\l  %185 = mul nsw i32 %184, %24\l  %186 = add nsw i32 %185, %6\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !17\l  %190 = fmul contract float %189, 1.280000e+02\l  %191 = sitofp i32 %184 to float\l  %192 = fpext float %191 to double\l  %193 = fadd contract double %192, 5.000000e-01\l  %194 = fdiv contract double %193, %27\l  %195 = fmul contract double %194, 0x400921FB54442D18\l  %196 = fptrunc double %195 to float\l  %197 = tail call float @llvm.fabs.f32(float %196)\l  %198 = fcmp olt float %197, 1.310720e+05\l  br i1 %198, label %199, label %207\l|{<s0>T|<s1>F}}"];
	Node0x5288900:s0 -> Node0x5289600;
	Node0x5288900:s1 -> Node0x5289690;
	Node0x5289600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%199:\l199:                                              \l  %200 = fmul float %197, 0x3FE45F3060000000\l  %201 = tail call float @llvm.rint.f32(float %200)\l  %202 = tail call float @llvm.fma.f32(float %201, float 0xBFF921FB40000000,\l... float %197)\l  %203 = tail call float @llvm.fma.f32(float %201, float 0xBE74442D00000000,\l... float %202)\l  %204 = tail call float @llvm.fma.f32(float %201, float 0xBCF8469880000000,\l... float %203)\l  %205 = fptosi float %201 to i32\l  %206 = bitcast float %197 to i32\l  br label %313\l}"];
	Node0x5289600 -> Node0x5289dc0;
	Node0x5289690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%207:\l207:                                              \l  %208 = bitcast float %197 to i32\l  %209 = lshr i32 %208, 23\l  %210 = and i32 %208, 8388607\l  %211 = or i32 %210, 8388608\l  %212 = zext i32 %211 to i64\l  %213 = mul nuw nsw i64 %212, 4266746795\l  %214 = trunc i64 %213 to i32\l  %215 = lshr i64 %213, 32\l  %216 = mul nuw nsw i64 %212, 1011060801\l  %217 = add nuw nsw i64 %215, %216\l  %218 = trunc i64 %217 to i32\l  %219 = lshr i64 %217, 32\l  %220 = mul nuw nsw i64 %212, 3680671129\l  %221 = add nuw nsw i64 %219, %220\l  %222 = trunc i64 %221 to i32\l  %223 = lshr i64 %221, 32\l  %224 = mul nuw nsw i64 %212, 4113882560\l  %225 = add nuw nsw i64 %223, %224\l  %226 = trunc i64 %225 to i32\l  %227 = lshr i64 %225, 32\l  %228 = mul nuw nsw i64 %212, 4230436817\l  %229 = add nuw nsw i64 %227, %228\l  %230 = trunc i64 %229 to i32\l  %231 = lshr i64 %229, 32\l  %232 = mul nuw nsw i64 %212, 1313084713\l  %233 = add nuw nsw i64 %231, %232\l  %234 = trunc i64 %233 to i32\l  %235 = lshr i64 %233, 32\l  %236 = mul nuw nsw i64 %212, 2734261102\l  %237 = add nuw nsw i64 %235, %236\l  %238 = trunc i64 %237 to i32\l  %239 = lshr i64 %237, 32\l  %240 = trunc i64 %239 to i32\l  %241 = add nsw i32 %209, -120\l  %242 = icmp ugt i32 %241, 63\l  %243 = select i1 %242, i32 %234, i32 %240\l  %244 = select i1 %242, i32 %230, i32 %238\l  %245 = select i1 %242, i32 %226, i32 %234\l  %246 = select i1 %242, i32 %222, i32 %230\l  %247 = select i1 %242, i32 %218, i32 %226\l  %248 = select i1 %242, i32 %214, i32 %222\l  %249 = select i1 %242, i32 -64, i32 0\l  %250 = add nsw i32 %249, %241\l  %251 = icmp ugt i32 %250, 31\l  %252 = select i1 %251, i32 %244, i32 %243\l  %253 = select i1 %251, i32 %245, i32 %244\l  %254 = select i1 %251, i32 %246, i32 %245\l  %255 = select i1 %251, i32 %247, i32 %246\l  %256 = select i1 %251, i32 %248, i32 %247\l  %257 = select i1 %251, i32 -32, i32 0\l  %258 = add nsw i32 %257, %250\l  %259 = icmp ugt i32 %258, 31\l  %260 = select i1 %259, i32 %253, i32 %252\l  %261 = select i1 %259, i32 %254, i32 %253\l  %262 = select i1 %259, i32 %255, i32 %254\l  %263 = select i1 %259, i32 %256, i32 %255\l  %264 = select i1 %259, i32 -32, i32 0\l  %265 = add nsw i32 %264, %258\l  %266 = icmp eq i32 %265, 0\l  %267 = sub nsw i32 32, %265\l  %268 = tail call i32 @llvm.fshr.i32(i32 %260, i32 %261, i32 %267)\l  %269 = tail call i32 @llvm.fshr.i32(i32 %261, i32 %262, i32 %267)\l  %270 = tail call i32 @llvm.fshr.i32(i32 %262, i32 %263, i32 %267)\l  %271 = select i1 %266, i32 %260, i32 %268\l  %272 = select i1 %266, i32 %261, i32 %269\l  %273 = select i1 %266, i32 %262, i32 %270\l  %274 = lshr i32 %271, 29\l  %275 = tail call i32 @llvm.fshl.i32(i32 %271, i32 %272, i32 2)\l  %276 = tail call i32 @llvm.fshl.i32(i32 %272, i32 %273, i32 2)\l  %277 = tail call i32 @llvm.fshl.i32(i32 %273, i32 %263, i32 2)\l  %278 = and i32 %274, 1\l  %279 = sub nsw i32 0, %278\l  %280 = shl i32 %274, 31\l  %281 = xor i32 %275, %279\l  %282 = xor i32 %276, %279\l  %283 = xor i32 %277, %279\l  %284 = tail call i32 @llvm.ctlz.i32(i32 %281, i1 false), !range !16\l  %285 = sub nsw i32 31, %284\l  %286 = tail call i32 @llvm.fshr.i32(i32 %281, i32 %282, i32 %285)\l  %287 = tail call i32 @llvm.fshr.i32(i32 %282, i32 %283, i32 %285)\l  %288 = shl nuw nsw i32 %284, 23\l  %289 = sub nuw nsw i32 1056964608, %288\l  %290 = lshr i32 %286, 9\l  %291 = or i32 %290, %289\l  %292 = or i32 %291, %280\l  %293 = bitcast i32 %292 to float\l  %294 = tail call i32 @llvm.fshl.i32(i32 %286, i32 %287, i32 23)\l  %295 = tail call i32 @llvm.ctlz.i32(i32 %294, i1 false), !range !16\l  %296 = fmul float %293, 0x3FF921FB40000000\l  %297 = add nuw nsw i32 %295, %284\l  %298 = shl nuw nsw i32 %297, 23\l  %299 = sub nuw nsw i32 855638016, %298\l  %300 = sub nsw i32 31, %295\l  %301 = tail call i32 @llvm.fshr.i32(i32 %294, i32 %287, i32 %300)\l  %302 = lshr i32 %301, 9\l  %303 = or i32 %299, %302\l  %304 = or i32 %303, %280\l  %305 = bitcast i32 %304 to float\l  %306 = fneg float %296\l  %307 = tail call float @llvm.fma.f32(float %293, float 0x3FF921FB40000000,\l... float %306)\l  %308 = tail call float @llvm.fma.f32(float %293, float 0x3E74442D00000000,\l... float %307)\l  %309 = tail call float @llvm.fma.f32(float %305, float 0x3FF921FB40000000,\l... float %308)\l  %310 = fadd float %296, %309\l  %311 = lshr i32 %271, 30\l  %312 = add nuw nsw i32 %278, %311\l  br label %313\l}"];
	Node0x5289690 -> Node0x5289dc0;
	Node0x5289dc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%313:\l313:                                              \l  %314 = phi i32 [ %206, %199 ], [ %208, %207 ]\l  %315 = phi float [ %204, %199 ], [ %310, %207 ]\l  %316 = phi i32 [ %205, %199 ], [ %312, %207 ]\l  %317 = fmul float %315, %315\l  %318 = tail call float @llvm.fmuladd.f32(float %317, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %319 = tail call float @llvm.fmuladd.f32(float %317, float %318, float\l... 0xBFC55553A0000000)\l  %320 = fmul float %317, %319\l  %321 = tail call float @llvm.fmuladd.f32(float %315, float %320, float %315)\l  %322 = tail call float @llvm.fmuladd.f32(float %317, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %323 = tail call float @llvm.fmuladd.f32(float %317, float %322, float\l... 0x3FA5557EE0000000)\l  %324 = tail call float @llvm.fmuladd.f32(float %317, float %323, float\l... 0xBFE0000080000000)\l  %325 = tail call float @llvm.fmuladd.f32(float %317, float %324, float\l... 1.000000e+00)\l  %326 = and i32 %316, 1\l  %327 = icmp eq i32 %326, 0\l  %328 = select i1 %327, float %321, float %325\l  %329 = bitcast float %328 to i32\l  %330 = shl i32 %316, 30\l  %331 = and i32 %330, -2147483648\l  %332 = bitcast float %196 to i32\l  %333 = xor i32 %314, %331\l  %334 = xor i32 %333, %329\l  %335 = xor i32 %334, %332\l  %336 = bitcast i32 %335 to float\l  %337 = tail call i1 @llvm.amdgcn.class.f32(float %197, i32 504)\l  %338 = select i1 %337, float %336, float 0x7FF8000000000000\l  %339 = fmul contract float %190, %338\l  %340 = fmul contract float %339, %173\l  %341 = shl nsw i32 %186, 2\l  %342 = sext i32 %341 to i64\l  %343 = getelementptr inbounds float, float addrspace(1)* %1, i64 %342\l  store float %340, float addrspace(1)* %343, align 4, !tbaa !17\l  br i1 %198, label %344, label %383\l|{<s0>T|<s1>F}}"];
	Node0x5289dc0:s0 -> Node0x5290940;
	Node0x5289dc0:s1 -> Node0x5290990;
	Node0x5290940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%344:\l344:                                              \l  %345 = fmul float %197, 0x3FE45F3060000000\l  %346 = tail call float @llvm.rint.f32(float %345)\l  %347 = tail call float @llvm.fma.f32(float %346, float 0xBFF921FB40000000,\l... float %197)\l  %348 = tail call float @llvm.fma.f32(float %346, float 0xBE74442D00000000,\l... float %347)\l  %349 = tail call float @llvm.fma.f32(float %346, float 0xBCF8469880000000,\l... float %348)\l  %350 = fptosi float %346 to i32\l  %351 = bitcast float %197 to i32\l  %352 = fmul float %349, %349\l  %353 = tail call float @llvm.fmuladd.f32(float %352, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %354 = tail call float @llvm.fmuladd.f32(float %352, float %353, float\l... 0xBFC55553A0000000)\l  %355 = fmul float %352, %354\l  %356 = tail call float @llvm.fmuladd.f32(float %349, float %355, float %349)\l  %357 = tail call float @llvm.fmuladd.f32(float %352, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %358 = tail call float @llvm.fmuladd.f32(float %352, float %357, float\l... 0x3FA5557EE0000000)\l  %359 = tail call float @llvm.fmuladd.f32(float %352, float %358, float\l... 0xBFE0000080000000)\l  %360 = tail call float @llvm.fmuladd.f32(float %352, float %359, float\l... 1.000000e+00)\l  %361 = and i32 %350, 1\l  %362 = icmp eq i32 %361, 0\l  %363 = select i1 %362, float %356, float %360\l  %364 = bitcast float %363 to i32\l  %365 = shl i32 %350, 30\l  %366 = and i32 %365, -2147483648\l  %367 = xor i32 %366, %351\l  %368 = xor i32 %367, %364\l  %369 = xor i32 %368, %332\l  %370 = bitcast i32 %369 to float\l  %371 = select i1 %337, float %370, float 0x7FF8000000000000\l  %372 = fmul contract float %190, %371\l  %373 = fmul contract float %372, %180\l  %374 = add nuw nsw i32 %341, 1\l  %375 = sext i32 %374 to i64\l  %376 = getelementptr inbounds float, float addrspace(1)* %1, i64 %375\l  store float %373, float addrspace(1)* %376, align 4, !tbaa !17\l  %377 = fmul float %197, 0x3FE45F3060000000\l  %378 = tail call float @llvm.rint.f32(float %377)\l  %379 = tail call float @llvm.fma.f32(float %378, float 0xBFF921FB40000000,\l... float %197)\l  %380 = tail call float @llvm.fma.f32(float %378, float 0xBE74442D00000000,\l... float %379)\l  %381 = tail call float @llvm.fma.f32(float %378, float 0xBCF8469880000000,\l... float %380)\l  %382 = fptosi float %378 to i32\l  br label %619\l}"];
	Node0x5290940 -> Node0x5288b10;
	Node0x5290990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%383:\l383:                                              \l  %384 = bitcast float %197 to i32\l  %385 = lshr i32 %384, 23\l  %386 = and i32 %384, 8388607\l  %387 = or i32 %386, 8388608\l  %388 = zext i32 %387 to i64\l  %389 = mul nuw nsw i64 %388, 4266746795\l  %390 = trunc i64 %389 to i32\l  %391 = lshr i64 %389, 32\l  %392 = mul nuw nsw i64 %388, 1011060801\l  %393 = add nuw nsw i64 %391, %392\l  %394 = trunc i64 %393 to i32\l  %395 = lshr i64 %393, 32\l  %396 = mul nuw nsw i64 %388, 3680671129\l  %397 = add nuw nsw i64 %395, %396\l  %398 = trunc i64 %397 to i32\l  %399 = lshr i64 %397, 32\l  %400 = mul nuw nsw i64 %388, 4113882560\l  %401 = add nuw nsw i64 %399, %400\l  %402 = trunc i64 %401 to i32\l  %403 = lshr i64 %401, 32\l  %404 = mul nuw nsw i64 %388, 4230436817\l  %405 = add nuw nsw i64 %403, %404\l  %406 = trunc i64 %405 to i32\l  %407 = lshr i64 %405, 32\l  %408 = mul nuw nsw i64 %388, 1313084713\l  %409 = add nuw nsw i64 %407, %408\l  %410 = trunc i64 %409 to i32\l  %411 = lshr i64 %409, 32\l  %412 = mul nuw nsw i64 %388, 2734261102\l  %413 = add nuw nsw i64 %411, %412\l  %414 = trunc i64 %413 to i32\l  %415 = lshr i64 %413, 32\l  %416 = trunc i64 %415 to i32\l  %417 = add nsw i32 %385, -120\l  %418 = icmp ugt i32 %417, 63\l  %419 = select i1 %418, i32 %410, i32 %416\l  %420 = select i1 %418, i32 %406, i32 %414\l  %421 = select i1 %418, i32 %402, i32 %410\l  %422 = select i1 %418, i32 %398, i32 %406\l  %423 = select i1 %418, i32 %394, i32 %402\l  %424 = select i1 %418, i32 %390, i32 %398\l  %425 = select i1 %418, i32 -64, i32 0\l  %426 = add nsw i32 %425, %417\l  %427 = icmp ugt i32 %426, 31\l  %428 = select i1 %427, i32 %420, i32 %419\l  %429 = select i1 %427, i32 %421, i32 %420\l  %430 = select i1 %427, i32 %422, i32 %421\l  %431 = select i1 %427, i32 %423, i32 %422\l  %432 = select i1 %427, i32 %424, i32 %423\l  %433 = select i1 %427, i32 -32, i32 0\l  %434 = add nsw i32 %433, %426\l  %435 = icmp ugt i32 %434, 31\l  %436 = select i1 %435, i32 %429, i32 %428\l  %437 = select i1 %435, i32 %430, i32 %429\l  %438 = select i1 %435, i32 %431, i32 %430\l  %439 = select i1 %435, i32 %432, i32 %431\l  %440 = select i1 %435, i32 -32, i32 0\l  %441 = add nsw i32 %440, %434\l  %442 = icmp eq i32 %441, 0\l  %443 = sub nsw i32 32, %441\l  %444 = tail call i32 @llvm.fshr.i32(i32 %436, i32 %437, i32 %443)\l  %445 = tail call i32 @llvm.fshr.i32(i32 %437, i32 %438, i32 %443)\l  %446 = tail call i32 @llvm.fshr.i32(i32 %438, i32 %439, i32 %443)\l  %447 = select i1 %442, i32 %436, i32 %444\l  %448 = select i1 %442, i32 %437, i32 %445\l  %449 = select i1 %442, i32 %438, i32 %446\l  %450 = lshr i32 %447, 29\l  %451 = tail call i32 @llvm.fshl.i32(i32 %447, i32 %448, i32 2)\l  %452 = tail call i32 @llvm.fshl.i32(i32 %448, i32 %449, i32 2)\l  %453 = tail call i32 @llvm.fshl.i32(i32 %449, i32 %439, i32 2)\l  %454 = and i32 %450, 1\l  %455 = sub nsw i32 0, %454\l  %456 = shl i32 %450, 31\l  %457 = xor i32 %451, %455\l  %458 = xor i32 %452, %455\l  %459 = xor i32 %453, %455\l  %460 = tail call i32 @llvm.ctlz.i32(i32 %457, i1 false), !range !16\l  %461 = sub nsw i32 31, %460\l  %462 = tail call i32 @llvm.fshr.i32(i32 %457, i32 %458, i32 %461)\l  %463 = tail call i32 @llvm.fshr.i32(i32 %458, i32 %459, i32 %461)\l  %464 = shl nuw nsw i32 %460, 23\l  %465 = sub nuw nsw i32 1056964608, %464\l  %466 = lshr i32 %462, 9\l  %467 = or i32 %466, %465\l  %468 = or i32 %467, %456\l  %469 = bitcast i32 %468 to float\l  %470 = tail call i32 @llvm.fshl.i32(i32 %462, i32 %463, i32 23)\l  %471 = tail call i32 @llvm.ctlz.i32(i32 %470, i1 false), !range !16\l  %472 = fmul float %469, 0x3FF921FB40000000\l  %473 = add nuw nsw i32 %471, %460\l  %474 = shl nuw nsw i32 %473, 23\l  %475 = sub nuw nsw i32 855638016, %474\l  %476 = sub nsw i32 31, %471\l  %477 = tail call i32 @llvm.fshr.i32(i32 %470, i32 %463, i32 %476)\l  %478 = lshr i32 %477, 9\l  %479 = or i32 %475, %478\l  %480 = or i32 %479, %456\l  %481 = bitcast i32 %480 to float\l  %482 = fneg float %472\l  %483 = tail call float @llvm.fma.f32(float %469, float 0x3FF921FB40000000,\l... float %482)\l  %484 = tail call float @llvm.fma.f32(float %469, float 0x3E74442D00000000,\l... float %483)\l  %485 = tail call float @llvm.fma.f32(float %481, float 0x3FF921FB40000000,\l... float %484)\l  %486 = fadd float %472, %485\l  %487 = lshr i32 %447, 30\l  %488 = add nuw nsw i32 %454, %487\l  %489 = fmul float %486, %486\l  %490 = tail call float @llvm.fmuladd.f32(float %489, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %491 = tail call float @llvm.fmuladd.f32(float %489, float %490, float\l... 0xBFC55553A0000000)\l  %492 = fmul float %489, %491\l  %493 = tail call float @llvm.fmuladd.f32(float %486, float %492, float %486)\l  %494 = tail call float @llvm.fmuladd.f32(float %489, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %495 = tail call float @llvm.fmuladd.f32(float %489, float %494, float\l... 0x3FA5557EE0000000)\l  %496 = tail call float @llvm.fmuladd.f32(float %489, float %495, float\l... 0xBFE0000080000000)\l  %497 = tail call float @llvm.fmuladd.f32(float %489, float %496, float\l... 1.000000e+00)\l  %498 = and i32 %488, 1\l  %499 = icmp eq i32 %498, 0\l  %500 = select i1 %499, float %493, float %497\l  %501 = bitcast float %500 to i32\l  %502 = shl i32 %488, 30\l  %503 = and i32 %502, -2147483648\l  %504 = xor i32 %503, %501\l  %505 = xor i32 %504, %384\l  %506 = xor i32 %505, %332\l  %507 = bitcast i32 %506 to float\l  %508 = select i1 %337, float %507, float 0x7FF8000000000000\l  %509 = fmul contract float %190, %508\l  %510 = fmul contract float %509, %180\l  %511 = add nuw nsw i32 %341, 1\l  %512 = sext i32 %511 to i64\l  %513 = getelementptr inbounds float, float addrspace(1)* %1, i64 %512\l  store float %510, float addrspace(1)* %513, align 4, !tbaa !17\l  %514 = bitcast float %197 to i32\l  %515 = lshr i32 %514, 23\l  %516 = and i32 %514, 8388607\l  %517 = or i32 %516, 8388608\l  %518 = zext i32 %517 to i64\l  %519 = mul nuw nsw i64 %518, 4266746795\l  %520 = trunc i64 %519 to i32\l  %521 = lshr i64 %519, 32\l  %522 = mul nuw nsw i64 %518, 1011060801\l  %523 = add nuw nsw i64 %521, %522\l  %524 = trunc i64 %523 to i32\l  %525 = lshr i64 %523, 32\l  %526 = mul nuw nsw i64 %518, 3680671129\l  %527 = add nuw nsw i64 %525, %526\l  %528 = trunc i64 %527 to i32\l  %529 = lshr i64 %527, 32\l  %530 = mul nuw nsw i64 %518, 4113882560\l  %531 = add nuw nsw i64 %529, %530\l  %532 = trunc i64 %531 to i32\l  %533 = lshr i64 %531, 32\l  %534 = mul nuw nsw i64 %518, 4230436817\l  %535 = add nuw nsw i64 %533, %534\l  %536 = trunc i64 %535 to i32\l  %537 = lshr i64 %535, 32\l  %538 = mul nuw nsw i64 %518, 1313084713\l  %539 = add nuw nsw i64 %537, %538\l  %540 = trunc i64 %539 to i32\l  %541 = lshr i64 %539, 32\l  %542 = mul nuw nsw i64 %518, 2734261102\l  %543 = add nuw nsw i64 %541, %542\l  %544 = trunc i64 %543 to i32\l  %545 = lshr i64 %543, 32\l  %546 = trunc i64 %545 to i32\l  %547 = add nsw i32 %515, -120\l  %548 = icmp ugt i32 %547, 63\l  %549 = select i1 %548, i32 %540, i32 %546\l  %550 = select i1 %548, i32 %536, i32 %544\l  %551 = select i1 %548, i32 %532, i32 %540\l  %552 = select i1 %548, i32 %528, i32 %536\l  %553 = select i1 %548, i32 %524, i32 %532\l  %554 = select i1 %548, i32 %520, i32 %528\l  %555 = select i1 %548, i32 -64, i32 0\l  %556 = add nsw i32 %555, %547\l  %557 = icmp ugt i32 %556, 31\l  %558 = select i1 %557, i32 %550, i32 %549\l  %559 = select i1 %557, i32 %551, i32 %550\l  %560 = select i1 %557, i32 %552, i32 %551\l  %561 = select i1 %557, i32 %553, i32 %552\l  %562 = select i1 %557, i32 %554, i32 %553\l  %563 = select i1 %557, i32 -32, i32 0\l  %564 = add nsw i32 %563, %556\l  %565 = icmp ugt i32 %564, 31\l  %566 = select i1 %565, i32 %559, i32 %558\l  %567 = select i1 %565, i32 %560, i32 %559\l  %568 = select i1 %565, i32 %561, i32 %560\l  %569 = select i1 %565, i32 %562, i32 %561\l  %570 = select i1 %565, i32 -32, i32 0\l  %571 = add nsw i32 %570, %564\l  %572 = icmp eq i32 %571, 0\l  %573 = sub nsw i32 32, %571\l  %574 = tail call i32 @llvm.fshr.i32(i32 %566, i32 %567, i32 %573)\l  %575 = tail call i32 @llvm.fshr.i32(i32 %567, i32 %568, i32 %573)\l  %576 = tail call i32 @llvm.fshr.i32(i32 %568, i32 %569, i32 %573)\l  %577 = select i1 %572, i32 %566, i32 %574\l  %578 = select i1 %572, i32 %567, i32 %575\l  %579 = select i1 %572, i32 %568, i32 %576\l  %580 = lshr i32 %577, 29\l  %581 = tail call i32 @llvm.fshl.i32(i32 %577, i32 %578, i32 2)\l  %582 = tail call i32 @llvm.fshl.i32(i32 %578, i32 %579, i32 2)\l  %583 = tail call i32 @llvm.fshl.i32(i32 %579, i32 %569, i32 2)\l  %584 = and i32 %580, 1\l  %585 = sub nsw i32 0, %584\l  %586 = shl i32 %580, 31\l  %587 = xor i32 %581, %585\l  %588 = xor i32 %582, %585\l  %589 = xor i32 %583, %585\l  %590 = tail call i32 @llvm.ctlz.i32(i32 %587, i1 false), !range !16\l  %591 = sub nsw i32 31, %590\l  %592 = tail call i32 @llvm.fshr.i32(i32 %587, i32 %588, i32 %591)\l  %593 = tail call i32 @llvm.fshr.i32(i32 %588, i32 %589, i32 %591)\l  %594 = shl nuw nsw i32 %590, 23\l  %595 = sub nuw nsw i32 1056964608, %594\l  %596 = lshr i32 %592, 9\l  %597 = or i32 %596, %595\l  %598 = or i32 %597, %586\l  %599 = bitcast i32 %598 to float\l  %600 = tail call i32 @llvm.fshl.i32(i32 %592, i32 %593, i32 23)\l  %601 = tail call i32 @llvm.ctlz.i32(i32 %600, i1 false), !range !16\l  %602 = fmul float %599, 0x3FF921FB40000000\l  %603 = add nuw nsw i32 %601, %590\l  %604 = shl nuw nsw i32 %603, 23\l  %605 = sub nuw nsw i32 855638016, %604\l  %606 = sub nsw i32 31, %601\l  %607 = tail call i32 @llvm.fshr.i32(i32 %600, i32 %593, i32 %606)\l  %608 = lshr i32 %607, 9\l  %609 = or i32 %605, %608\l  %610 = or i32 %609, %586\l  %611 = bitcast i32 %610 to float\l  %612 = fneg float %602\l  %613 = tail call float @llvm.fma.f32(float %599, float 0x3FF921FB40000000,\l... float %612)\l  %614 = tail call float @llvm.fma.f32(float %599, float 0x3E74442D00000000,\l... float %613)\l  %615 = tail call float @llvm.fma.f32(float %611, float 0x3FF921FB40000000,\l... float %614)\l  %616 = fadd float %602, %615\l  %617 = lshr i32 %577, 30\l  %618 = add nuw nsw i32 %584, %617\l  br label %619\l}"];
	Node0x5290990 -> Node0x5288b10;
	Node0x5288b10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%619:\l619:                                              \l  %620 = phi float [ %381, %344 ], [ %616, %383 ]\l  %621 = phi i32 [ %382, %344 ], [ %618, %383 ]\l  %622 = fmul float %620, %620\l  %623 = tail call float @llvm.fmuladd.f32(float %622, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %624 = tail call float @llvm.fmuladd.f32(float %622, float %623, float\l... 0xBFC55553A0000000)\l  %625 = fmul float %622, %624\l  %626 = tail call float @llvm.fmuladd.f32(float %620, float %625, float %620)\l  %627 = tail call float @llvm.fmuladd.f32(float %622, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %628 = tail call float @llvm.fmuladd.f32(float %622, float %627, float\l... 0x3FA5557EE0000000)\l  %629 = tail call float @llvm.fmuladd.f32(float %622, float %628, float\l... 0xBFE0000080000000)\l  %630 = tail call float @llvm.fmuladd.f32(float %622, float %629, float\l... 1.000000e+00)\l  %631 = fneg float %626\l  %632 = and i32 %621, 1\l  %633 = icmp eq i32 %632, 0\l  %634 = select i1 %633, float %630, float %631\l  %635 = bitcast float %634 to i32\l  %636 = shl i32 %621, 30\l  %637 = and i32 %636, -2147483648\l  %638 = xor i32 %637, %635\l  %639 = bitcast i32 %638 to float\l  %640 = select i1 %337, float %639, float 0x7FF8000000000000\l  %641 = fmul contract float %190, %640\l  %642 = add nuw nsw i32 %341, 2\l  %643 = sext i32 %642 to i64\l  %644 = getelementptr inbounds float, float addrspace(1)* %1, i64 %643\l  store float %641, float addrspace(1)* %644, align 4, !tbaa !17\l  %645 = add nuw nsw i32 %341, 3\l  %646 = sext i32 %645 to i64\l  %647 = getelementptr inbounds float, float addrspace(1)* %1, i64 %646\l  store float 1.000000e+00, float addrspace(1)* %647, align 4, !tbaa !17\l  %648 = add nuw nsw i32 %183, 8\l  %649 = icmp ult i32 %183, 24\l  br i1 %649, label %182, label %181, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5288b10:s0 -> Node0x5288900;
	Node0x5288b10:s1 -> Node0x5288a00;
}
