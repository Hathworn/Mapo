; ModuleID = '../data/hip_kernels/4156/19/main.cu'
source_filename = "../data/hip_kernels/4156/19/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z10to3d_pointPfS_(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture writeonly %1) local_unnamed_addr #0 {
  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %4 = shl i32 %3, 5
  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %6 = add i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %8 = shl i32 %7, 5
  %9 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4
  %10 = add i32 %8, %9
  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12
  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*
  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !5
  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4
  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*
  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !14, !invariant.load !15
  %18 = zext i16 %17 to i32
  %19 = udiv i32 %14, %18
  %20 = mul i32 %19, %18
  %21 = icmp ugt i32 %14, %20
  %22 = zext i1 %21 to i32
  %23 = add i32 %19, %22
  %24 = shl i32 %23, 5
  %25 = ashr exact i32 %24, 1
  %26 = sitofp i32 %25 to float
  %27 = fpext float %26 to double
  %28 = sitofp i32 %6 to float
  %29 = fpext float %28 to double
  %30 = fadd contract double %29, 5.000000e-01
  %31 = sitofp i32 %24 to float
  %32 = fpext float %31 to double
  %33 = fdiv contract double %30, %32
  %34 = fmul contract double %33, 2.000000e+00
  %35 = fmul contract double %34, 0x400921FB54442D18
  %36 = fadd contract double %35, 0x400921FB54442D18
  %37 = fptrunc double %36 to float
  %38 = tail call float @llvm.fabs.f32(float %37)
  %39 = fcmp olt float %38, 1.310720e+05
  %40 = tail call i1 @llvm.amdgcn.class.f32(float %38, i32 504)
  %41 = bitcast float %37 to i32
  %42 = bitcast float %38 to i32
  %43 = lshr i32 %42, 23
  %44 = and i32 %42, 8388607
  %45 = or i32 %44, 8388608
  %46 = zext i32 %45 to i64
  %47 = mul nuw nsw i64 %46, 4266746795
  %48 = trunc i64 %47 to i32
  %49 = lshr i64 %47, 32
  %50 = mul nuw nsw i64 %46, 1011060801
  %51 = add nuw nsw i64 %49, %50
  %52 = trunc i64 %51 to i32
  %53 = lshr i64 %51, 32
  %54 = mul nuw nsw i64 %46, 3680671129
  %55 = add nuw nsw i64 %53, %54
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %55, 32
  %58 = mul nuw nsw i64 %46, 4113882560
  %59 = add nuw nsw i64 %57, %58
  %60 = trunc i64 %59 to i32
  %61 = lshr i64 %59, 32
  %62 = mul nuw nsw i64 %46, 4230436817
  %63 = add nuw nsw i64 %61, %62
  %64 = trunc i64 %63 to i32
  %65 = lshr i64 %63, 32
  %66 = mul nuw nsw i64 %46, 1313084713
  %67 = add nuw nsw i64 %65, %66
  %68 = trunc i64 %67 to i32
  %69 = lshr i64 %67, 32
  %70 = mul nuw nsw i64 %46, 2734261102
  %71 = add nuw nsw i64 %69, %70
  %72 = trunc i64 %71 to i32
  %73 = lshr i64 %71, 32
  %74 = trunc i64 %73 to i32
  %75 = add nsw i32 %43, -120
  %76 = icmp ugt i32 %75, 63
  %77 = select i1 %76, i32 %68, i32 %74
  %78 = select i1 %76, i32 %64, i32 %72
  %79 = select i1 %76, i32 %60, i32 %68
  %80 = select i1 %76, i32 %56, i32 %64
  %81 = select i1 %76, i32 %52, i32 %60
  %82 = select i1 %76, i32 %48, i32 %56
  %83 = select i1 %76, i32 -64, i32 0
  %84 = add nsw i32 %83, %75
  %85 = icmp ugt i32 %84, 31
  %86 = select i1 %85, i32 %78, i32 %77
  %87 = select i1 %85, i32 %79, i32 %78
  %88 = select i1 %85, i32 %80, i32 %79
  %89 = select i1 %85, i32 %81, i32 %80
  %90 = select i1 %85, i32 %82, i32 %81
  %91 = select i1 %85, i32 -32, i32 0
  %92 = add nsw i32 %91, %84
  %93 = icmp ugt i32 %92, 31
  %94 = select i1 %93, i32 %87, i32 %86
  %95 = select i1 %93, i32 %88, i32 %87
  %96 = select i1 %93, i32 %89, i32 %88
  %97 = select i1 %93, i32 %90, i32 %89
  %98 = select i1 %93, i32 -32, i32 0
  %99 = add nsw i32 %98, %92
  %100 = icmp eq i32 %99, 0
  %101 = sub nsw i32 32, %99
  %102 = tail call i32 @llvm.fshr.i32(i32 %94, i32 %95, i32 %101)
  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %101)
  %104 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %101)
  %105 = select i1 %100, i32 %94, i32 %102
  %106 = select i1 %100, i32 %95, i32 %103
  %107 = select i1 %100, i32 %96, i32 %104
  %108 = lshr i32 %105, 29
  %109 = tail call i32 @llvm.fshl.i32(i32 %105, i32 %106, i32 2)
  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 2)
  %111 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %97, i32 2)
  %112 = and i32 %108, 1
  %113 = sub nsw i32 0, %112
  %114 = shl i32 %108, 31
  %115 = xor i32 %109, %113
  %116 = xor i32 %110, %113
  %117 = xor i32 %111, %113
  %118 = tail call i32 @llvm.ctlz.i32(i32 %115, i1 false), !range !16
  %119 = sub nsw i32 31, %118
  %120 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %116, i32 %119)
  %121 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %119)
  %122 = shl nuw nsw i32 %118, 23
  %123 = sub nuw nsw i32 1056964608, %122
  %124 = lshr i32 %120, 9
  %125 = or i32 %124, %123
  %126 = or i32 %125, %114
  %127 = bitcast i32 %126 to float
  %128 = tail call i32 @llvm.fshl.i32(i32 %120, i32 %121, i32 23)
  %129 = tail call i32 @llvm.ctlz.i32(i32 %128, i1 false), !range !16
  %130 = fmul float %127, 0x3FF921FB40000000
  %131 = add nuw nsw i32 %129, %118
  %132 = shl nuw nsw i32 %131, 23
  %133 = sub nuw nsw i32 855638016, %132
  %134 = sub nsw i32 31, %129
  %135 = tail call i32 @llvm.fshr.i32(i32 %128, i32 %121, i32 %134)
  %136 = lshr i32 %135, 9
  %137 = or i32 %133, %136
  %138 = or i32 %137, %114
  %139 = bitcast i32 %138 to float
  %140 = fneg float %130
  %141 = tail call float @llvm.fma.f32(float %127, float 0x3FF921FB40000000, float %140)
  %142 = tail call float @llvm.fma.f32(float %127, float 0x3E74442D00000000, float %141)
  %143 = tail call float @llvm.fma.f32(float %139, float 0x3FF921FB40000000, float %142)
  %144 = fadd float %130, %143
  %145 = lshr i32 %105, 30
  %146 = add nuw nsw i32 %112, %145
  %147 = fmul float %38, 0x3FE45F3060000000
  %148 = tail call float @llvm.rint.f32(float %147)
  %149 = tail call float @llvm.fma.f32(float %148, float 0xBFF921FB40000000, float %38)
  %150 = tail call float @llvm.fma.f32(float %148, float 0xBE74442D00000000, float %149)
  %151 = tail call float @llvm.fma.f32(float %148, float 0xBCF8469880000000, float %150)
  %152 = fptosi float %148 to i32
  %153 = select i1 %39, float %151, float %144
  %154 = select i1 %39, i32 %152, i32 %146
  %155 = fmul float %153, %153
  %156 = tail call float @llvm.fmuladd.f32(float %155, float 0xBF29833040000000, float 0x3F81103880000000)
  %157 = tail call float @llvm.fmuladd.f32(float %155, float %156, float 0xBFC55553A0000000)
  %158 = fmul float %155, %157
  %159 = tail call float @llvm.fmuladd.f32(float %153, float %158, float %153)
  %160 = tail call float @llvm.fmuladd.f32(float %155, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %161 = tail call float @llvm.fmuladd.f32(float %155, float %160, float 0x3FA5557EE0000000)
  %162 = tail call float @llvm.fmuladd.f32(float %155, float %161, float 0xBFE0000080000000)
  %163 = tail call float @llvm.fmuladd.f32(float %155, float %162, float 1.000000e+00)
  %164 = fneg float %159
  %165 = and i32 %154, 1
  %166 = icmp eq i32 %165, 0
  %167 = select i1 %166, float %163, float %164
  %168 = bitcast float %167 to i32
  %169 = shl i32 %154, 30
  %170 = and i32 %169, -2147483648
  %171 = xor i32 %170, %168
  %172 = bitcast i32 %171 to float
  %173 = select i1 %40, float %172, float 0x7FF8000000000000
  %174 = select i1 %166, float %159, float %163
  %175 = bitcast float %174 to i32
  %176 = xor i32 %41, %175
  %177 = xor i32 %176, %42
  %178 = xor i32 %177, %170
  %179 = bitcast i32 %178 to float
  %180 = select i1 %40, float %179, float 0x7FF8000000000000
  br label %182

181:                                              ; preds = %619
  ret void

182:                                              ; preds = %2, %619
  %183 = phi i32 [ 0, %2 ], [ %648, %619 ]
  %184 = add nsw i32 %10, %183
  %185 = mul nsw i32 %184, %24
  %186 = add nsw i32 %185, %6
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187
  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !17
  %190 = fmul contract float %189, 1.280000e+02
  %191 = sitofp i32 %184 to float
  %192 = fpext float %191 to double
  %193 = fadd contract double %192, 5.000000e-01
  %194 = fdiv contract double %193, %27
  %195 = fmul contract double %194, 0x400921FB54442D18
  %196 = fptrunc double %195 to float
  %197 = tail call float @llvm.fabs.f32(float %196)
  %198 = fcmp olt float %197, 1.310720e+05
  br i1 %198, label %199, label %207

199:                                              ; preds = %182
  %200 = fmul float %197, 0x3FE45F3060000000
  %201 = tail call float @llvm.rint.f32(float %200)
  %202 = tail call float @llvm.fma.f32(float %201, float 0xBFF921FB40000000, float %197)
  %203 = tail call float @llvm.fma.f32(float %201, float 0xBE74442D00000000, float %202)
  %204 = tail call float @llvm.fma.f32(float %201, float 0xBCF8469880000000, float %203)
  %205 = fptosi float %201 to i32
  %206 = bitcast float %197 to i32
  br label %313

207:                                              ; preds = %182
  %208 = bitcast float %197 to i32
  %209 = lshr i32 %208, 23
  %210 = and i32 %208, 8388607
  %211 = or i32 %210, 8388608
  %212 = zext i32 %211 to i64
  %213 = mul nuw nsw i64 %212, 4266746795
  %214 = trunc i64 %213 to i32
  %215 = lshr i64 %213, 32
  %216 = mul nuw nsw i64 %212, 1011060801
  %217 = add nuw nsw i64 %215, %216
  %218 = trunc i64 %217 to i32
  %219 = lshr i64 %217, 32
  %220 = mul nuw nsw i64 %212, 3680671129
  %221 = add nuw nsw i64 %219, %220
  %222 = trunc i64 %221 to i32
  %223 = lshr i64 %221, 32
  %224 = mul nuw nsw i64 %212, 4113882560
  %225 = add nuw nsw i64 %223, %224
  %226 = trunc i64 %225 to i32
  %227 = lshr i64 %225, 32
  %228 = mul nuw nsw i64 %212, 4230436817
  %229 = add nuw nsw i64 %227, %228
  %230 = trunc i64 %229 to i32
  %231 = lshr i64 %229, 32
  %232 = mul nuw nsw i64 %212, 1313084713
  %233 = add nuw nsw i64 %231, %232
  %234 = trunc i64 %233 to i32
  %235 = lshr i64 %233, 32
  %236 = mul nuw nsw i64 %212, 2734261102
  %237 = add nuw nsw i64 %235, %236
  %238 = trunc i64 %237 to i32
  %239 = lshr i64 %237, 32
  %240 = trunc i64 %239 to i32
  %241 = add nsw i32 %209, -120
  %242 = icmp ugt i32 %241, 63
  %243 = select i1 %242, i32 %234, i32 %240
  %244 = select i1 %242, i32 %230, i32 %238
  %245 = select i1 %242, i32 %226, i32 %234
  %246 = select i1 %242, i32 %222, i32 %230
  %247 = select i1 %242, i32 %218, i32 %226
  %248 = select i1 %242, i32 %214, i32 %222
  %249 = select i1 %242, i32 -64, i32 0
  %250 = add nsw i32 %249, %241
  %251 = icmp ugt i32 %250, 31
  %252 = select i1 %251, i32 %244, i32 %243
  %253 = select i1 %251, i32 %245, i32 %244
  %254 = select i1 %251, i32 %246, i32 %245
  %255 = select i1 %251, i32 %247, i32 %246
  %256 = select i1 %251, i32 %248, i32 %247
  %257 = select i1 %251, i32 -32, i32 0
  %258 = add nsw i32 %257, %250
  %259 = icmp ugt i32 %258, 31
  %260 = select i1 %259, i32 %253, i32 %252
  %261 = select i1 %259, i32 %254, i32 %253
  %262 = select i1 %259, i32 %255, i32 %254
  %263 = select i1 %259, i32 %256, i32 %255
  %264 = select i1 %259, i32 -32, i32 0
  %265 = add nsw i32 %264, %258
  %266 = icmp eq i32 %265, 0
  %267 = sub nsw i32 32, %265
  %268 = tail call i32 @llvm.fshr.i32(i32 %260, i32 %261, i32 %267)
  %269 = tail call i32 @llvm.fshr.i32(i32 %261, i32 %262, i32 %267)
  %270 = tail call i32 @llvm.fshr.i32(i32 %262, i32 %263, i32 %267)
  %271 = select i1 %266, i32 %260, i32 %268
  %272 = select i1 %266, i32 %261, i32 %269
  %273 = select i1 %266, i32 %262, i32 %270
  %274 = lshr i32 %271, 29
  %275 = tail call i32 @llvm.fshl.i32(i32 %271, i32 %272, i32 2)
  %276 = tail call i32 @llvm.fshl.i32(i32 %272, i32 %273, i32 2)
  %277 = tail call i32 @llvm.fshl.i32(i32 %273, i32 %263, i32 2)
  %278 = and i32 %274, 1
  %279 = sub nsw i32 0, %278
  %280 = shl i32 %274, 31
  %281 = xor i32 %275, %279
  %282 = xor i32 %276, %279
  %283 = xor i32 %277, %279
  %284 = tail call i32 @llvm.ctlz.i32(i32 %281, i1 false), !range !16
  %285 = sub nsw i32 31, %284
  %286 = tail call i32 @llvm.fshr.i32(i32 %281, i32 %282, i32 %285)
  %287 = tail call i32 @llvm.fshr.i32(i32 %282, i32 %283, i32 %285)
  %288 = shl nuw nsw i32 %284, 23
  %289 = sub nuw nsw i32 1056964608, %288
  %290 = lshr i32 %286, 9
  %291 = or i32 %290, %289
  %292 = or i32 %291, %280
  %293 = bitcast i32 %292 to float
  %294 = tail call i32 @llvm.fshl.i32(i32 %286, i32 %287, i32 23)
  %295 = tail call i32 @llvm.ctlz.i32(i32 %294, i1 false), !range !16
  %296 = fmul float %293, 0x3FF921FB40000000
  %297 = add nuw nsw i32 %295, %284
  %298 = shl nuw nsw i32 %297, 23
  %299 = sub nuw nsw i32 855638016, %298
  %300 = sub nsw i32 31, %295
  %301 = tail call i32 @llvm.fshr.i32(i32 %294, i32 %287, i32 %300)
  %302 = lshr i32 %301, 9
  %303 = or i32 %299, %302
  %304 = or i32 %303, %280
  %305 = bitcast i32 %304 to float
  %306 = fneg float %296
  %307 = tail call float @llvm.fma.f32(float %293, float 0x3FF921FB40000000, float %306)
  %308 = tail call float @llvm.fma.f32(float %293, float 0x3E74442D00000000, float %307)
  %309 = tail call float @llvm.fma.f32(float %305, float 0x3FF921FB40000000, float %308)
  %310 = fadd float %296, %309
  %311 = lshr i32 %271, 30
  %312 = add nuw nsw i32 %278, %311
  br label %313

313:                                              ; preds = %199, %207
  %314 = phi i32 [ %206, %199 ], [ %208, %207 ]
  %315 = phi float [ %204, %199 ], [ %310, %207 ]
  %316 = phi i32 [ %205, %199 ], [ %312, %207 ]
  %317 = fmul float %315, %315
  %318 = tail call float @llvm.fmuladd.f32(float %317, float 0xBF29833040000000, float 0x3F81103880000000)
  %319 = tail call float @llvm.fmuladd.f32(float %317, float %318, float 0xBFC55553A0000000)
  %320 = fmul float %317, %319
  %321 = tail call float @llvm.fmuladd.f32(float %315, float %320, float %315)
  %322 = tail call float @llvm.fmuladd.f32(float %317, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %323 = tail call float @llvm.fmuladd.f32(float %317, float %322, float 0x3FA5557EE0000000)
  %324 = tail call float @llvm.fmuladd.f32(float %317, float %323, float 0xBFE0000080000000)
  %325 = tail call float @llvm.fmuladd.f32(float %317, float %324, float 1.000000e+00)
  %326 = and i32 %316, 1
  %327 = icmp eq i32 %326, 0
  %328 = select i1 %327, float %321, float %325
  %329 = bitcast float %328 to i32
  %330 = shl i32 %316, 30
  %331 = and i32 %330, -2147483648
  %332 = bitcast float %196 to i32
  %333 = xor i32 %314, %331
  %334 = xor i32 %333, %329
  %335 = xor i32 %334, %332
  %336 = bitcast i32 %335 to float
  %337 = tail call i1 @llvm.amdgcn.class.f32(float %197, i32 504)
  %338 = select i1 %337, float %336, float 0x7FF8000000000000
  %339 = fmul contract float %190, %338
  %340 = fmul contract float %339, %173
  %341 = shl nsw i32 %186, 2
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds float, float addrspace(1)* %1, i64 %342
  store float %340, float addrspace(1)* %343, align 4, !tbaa !17
  br i1 %198, label %344, label %383

344:                                              ; preds = %313
  %345 = fmul float %197, 0x3FE45F3060000000
  %346 = tail call float @llvm.rint.f32(float %345)
  %347 = tail call float @llvm.fma.f32(float %346, float 0xBFF921FB40000000, float %197)
  %348 = tail call float @llvm.fma.f32(float %346, float 0xBE74442D00000000, float %347)
  %349 = tail call float @llvm.fma.f32(float %346, float 0xBCF8469880000000, float %348)
  %350 = fptosi float %346 to i32
  %351 = bitcast float %197 to i32
  %352 = fmul float %349, %349
  %353 = tail call float @llvm.fmuladd.f32(float %352, float 0xBF29833040000000, float 0x3F81103880000000)
  %354 = tail call float @llvm.fmuladd.f32(float %352, float %353, float 0xBFC55553A0000000)
  %355 = fmul float %352, %354
  %356 = tail call float @llvm.fmuladd.f32(float %349, float %355, float %349)
  %357 = tail call float @llvm.fmuladd.f32(float %352, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %358 = tail call float @llvm.fmuladd.f32(float %352, float %357, float 0x3FA5557EE0000000)
  %359 = tail call float @llvm.fmuladd.f32(float %352, float %358, float 0xBFE0000080000000)
  %360 = tail call float @llvm.fmuladd.f32(float %352, float %359, float 1.000000e+00)
  %361 = and i32 %350, 1
  %362 = icmp eq i32 %361, 0
  %363 = select i1 %362, float %356, float %360
  %364 = bitcast float %363 to i32
  %365 = shl i32 %350, 30
  %366 = and i32 %365, -2147483648
  %367 = xor i32 %366, %351
  %368 = xor i32 %367, %364
  %369 = xor i32 %368, %332
  %370 = bitcast i32 %369 to float
  %371 = select i1 %337, float %370, float 0x7FF8000000000000
  %372 = fmul contract float %190, %371
  %373 = fmul contract float %372, %180
  %374 = add nuw nsw i32 %341, 1
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds float, float addrspace(1)* %1, i64 %375
  store float %373, float addrspace(1)* %376, align 4, !tbaa !17
  %377 = fmul float %197, 0x3FE45F3060000000
  %378 = tail call float @llvm.rint.f32(float %377)
  %379 = tail call float @llvm.fma.f32(float %378, float 0xBFF921FB40000000, float %197)
  %380 = tail call float @llvm.fma.f32(float %378, float 0xBE74442D00000000, float %379)
  %381 = tail call float @llvm.fma.f32(float %378, float 0xBCF8469880000000, float %380)
  %382 = fptosi float %378 to i32
  br label %619

383:                                              ; preds = %313
  %384 = bitcast float %197 to i32
  %385 = lshr i32 %384, 23
  %386 = and i32 %384, 8388607
  %387 = or i32 %386, 8388608
  %388 = zext i32 %387 to i64
  %389 = mul nuw nsw i64 %388, 4266746795
  %390 = trunc i64 %389 to i32
  %391 = lshr i64 %389, 32
  %392 = mul nuw nsw i64 %388, 1011060801
  %393 = add nuw nsw i64 %391, %392
  %394 = trunc i64 %393 to i32
  %395 = lshr i64 %393, 32
  %396 = mul nuw nsw i64 %388, 3680671129
  %397 = add nuw nsw i64 %395, %396
  %398 = trunc i64 %397 to i32
  %399 = lshr i64 %397, 32
  %400 = mul nuw nsw i64 %388, 4113882560
  %401 = add nuw nsw i64 %399, %400
  %402 = trunc i64 %401 to i32
  %403 = lshr i64 %401, 32
  %404 = mul nuw nsw i64 %388, 4230436817
  %405 = add nuw nsw i64 %403, %404
  %406 = trunc i64 %405 to i32
  %407 = lshr i64 %405, 32
  %408 = mul nuw nsw i64 %388, 1313084713
  %409 = add nuw nsw i64 %407, %408
  %410 = trunc i64 %409 to i32
  %411 = lshr i64 %409, 32
  %412 = mul nuw nsw i64 %388, 2734261102
  %413 = add nuw nsw i64 %411, %412
  %414 = trunc i64 %413 to i32
  %415 = lshr i64 %413, 32
  %416 = trunc i64 %415 to i32
  %417 = add nsw i32 %385, -120
  %418 = icmp ugt i32 %417, 63
  %419 = select i1 %418, i32 %410, i32 %416
  %420 = select i1 %418, i32 %406, i32 %414
  %421 = select i1 %418, i32 %402, i32 %410
  %422 = select i1 %418, i32 %398, i32 %406
  %423 = select i1 %418, i32 %394, i32 %402
  %424 = select i1 %418, i32 %390, i32 %398
  %425 = select i1 %418, i32 -64, i32 0
  %426 = add nsw i32 %425, %417
  %427 = icmp ugt i32 %426, 31
  %428 = select i1 %427, i32 %420, i32 %419
  %429 = select i1 %427, i32 %421, i32 %420
  %430 = select i1 %427, i32 %422, i32 %421
  %431 = select i1 %427, i32 %423, i32 %422
  %432 = select i1 %427, i32 %424, i32 %423
  %433 = select i1 %427, i32 -32, i32 0
  %434 = add nsw i32 %433, %426
  %435 = icmp ugt i32 %434, 31
  %436 = select i1 %435, i32 %429, i32 %428
  %437 = select i1 %435, i32 %430, i32 %429
  %438 = select i1 %435, i32 %431, i32 %430
  %439 = select i1 %435, i32 %432, i32 %431
  %440 = select i1 %435, i32 -32, i32 0
  %441 = add nsw i32 %440, %434
  %442 = icmp eq i32 %441, 0
  %443 = sub nsw i32 32, %441
  %444 = tail call i32 @llvm.fshr.i32(i32 %436, i32 %437, i32 %443)
  %445 = tail call i32 @llvm.fshr.i32(i32 %437, i32 %438, i32 %443)
  %446 = tail call i32 @llvm.fshr.i32(i32 %438, i32 %439, i32 %443)
  %447 = select i1 %442, i32 %436, i32 %444
  %448 = select i1 %442, i32 %437, i32 %445
  %449 = select i1 %442, i32 %438, i32 %446
  %450 = lshr i32 %447, 29
  %451 = tail call i32 @llvm.fshl.i32(i32 %447, i32 %448, i32 2)
  %452 = tail call i32 @llvm.fshl.i32(i32 %448, i32 %449, i32 2)
  %453 = tail call i32 @llvm.fshl.i32(i32 %449, i32 %439, i32 2)
  %454 = and i32 %450, 1
  %455 = sub nsw i32 0, %454
  %456 = shl i32 %450, 31
  %457 = xor i32 %451, %455
  %458 = xor i32 %452, %455
  %459 = xor i32 %453, %455
  %460 = tail call i32 @llvm.ctlz.i32(i32 %457, i1 false), !range !16
  %461 = sub nsw i32 31, %460
  %462 = tail call i32 @llvm.fshr.i32(i32 %457, i32 %458, i32 %461)
  %463 = tail call i32 @llvm.fshr.i32(i32 %458, i32 %459, i32 %461)
  %464 = shl nuw nsw i32 %460, 23
  %465 = sub nuw nsw i32 1056964608, %464
  %466 = lshr i32 %462, 9
  %467 = or i32 %466, %465
  %468 = or i32 %467, %456
  %469 = bitcast i32 %468 to float
  %470 = tail call i32 @llvm.fshl.i32(i32 %462, i32 %463, i32 23)
  %471 = tail call i32 @llvm.ctlz.i32(i32 %470, i1 false), !range !16
  %472 = fmul float %469, 0x3FF921FB40000000
  %473 = add nuw nsw i32 %471, %460
  %474 = shl nuw nsw i32 %473, 23
  %475 = sub nuw nsw i32 855638016, %474
  %476 = sub nsw i32 31, %471
  %477 = tail call i32 @llvm.fshr.i32(i32 %470, i32 %463, i32 %476)
  %478 = lshr i32 %477, 9
  %479 = or i32 %475, %478
  %480 = or i32 %479, %456
  %481 = bitcast i32 %480 to float
  %482 = fneg float %472
  %483 = tail call float @llvm.fma.f32(float %469, float 0x3FF921FB40000000, float %482)
  %484 = tail call float @llvm.fma.f32(float %469, float 0x3E74442D00000000, float %483)
  %485 = tail call float @llvm.fma.f32(float %481, float 0x3FF921FB40000000, float %484)
  %486 = fadd float %472, %485
  %487 = lshr i32 %447, 30
  %488 = add nuw nsw i32 %454, %487
  %489 = fmul float %486, %486
  %490 = tail call float @llvm.fmuladd.f32(float %489, float 0xBF29833040000000, float 0x3F81103880000000)
  %491 = tail call float @llvm.fmuladd.f32(float %489, float %490, float 0xBFC55553A0000000)
  %492 = fmul float %489, %491
  %493 = tail call float @llvm.fmuladd.f32(float %486, float %492, float %486)
  %494 = tail call float @llvm.fmuladd.f32(float %489, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %495 = tail call float @llvm.fmuladd.f32(float %489, float %494, float 0x3FA5557EE0000000)
  %496 = tail call float @llvm.fmuladd.f32(float %489, float %495, float 0xBFE0000080000000)
  %497 = tail call float @llvm.fmuladd.f32(float %489, float %496, float 1.000000e+00)
  %498 = and i32 %488, 1
  %499 = icmp eq i32 %498, 0
  %500 = select i1 %499, float %493, float %497
  %501 = bitcast float %500 to i32
  %502 = shl i32 %488, 30
  %503 = and i32 %502, -2147483648
  %504 = xor i32 %503, %501
  %505 = xor i32 %504, %384
  %506 = xor i32 %505, %332
  %507 = bitcast i32 %506 to float
  %508 = select i1 %337, float %507, float 0x7FF8000000000000
  %509 = fmul contract float %190, %508
  %510 = fmul contract float %509, %180
  %511 = add nuw nsw i32 %341, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds float, float addrspace(1)* %1, i64 %512
  store float %510, float addrspace(1)* %513, align 4, !tbaa !17
  %514 = bitcast float %197 to i32
  %515 = lshr i32 %514, 23
  %516 = and i32 %514, 8388607
  %517 = or i32 %516, 8388608
  %518 = zext i32 %517 to i64
  %519 = mul nuw nsw i64 %518, 4266746795
  %520 = trunc i64 %519 to i32
  %521 = lshr i64 %519, 32
  %522 = mul nuw nsw i64 %518, 1011060801
  %523 = add nuw nsw i64 %521, %522
  %524 = trunc i64 %523 to i32
  %525 = lshr i64 %523, 32
  %526 = mul nuw nsw i64 %518, 3680671129
  %527 = add nuw nsw i64 %525, %526
  %528 = trunc i64 %527 to i32
  %529 = lshr i64 %527, 32
  %530 = mul nuw nsw i64 %518, 4113882560
  %531 = add nuw nsw i64 %529, %530
  %532 = trunc i64 %531 to i32
  %533 = lshr i64 %531, 32
  %534 = mul nuw nsw i64 %518, 4230436817
  %535 = add nuw nsw i64 %533, %534
  %536 = trunc i64 %535 to i32
  %537 = lshr i64 %535, 32
  %538 = mul nuw nsw i64 %518, 1313084713
  %539 = add nuw nsw i64 %537, %538
  %540 = trunc i64 %539 to i32
  %541 = lshr i64 %539, 32
  %542 = mul nuw nsw i64 %518, 2734261102
  %543 = add nuw nsw i64 %541, %542
  %544 = trunc i64 %543 to i32
  %545 = lshr i64 %543, 32
  %546 = trunc i64 %545 to i32
  %547 = add nsw i32 %515, -120
  %548 = icmp ugt i32 %547, 63
  %549 = select i1 %548, i32 %540, i32 %546
  %550 = select i1 %548, i32 %536, i32 %544
  %551 = select i1 %548, i32 %532, i32 %540
  %552 = select i1 %548, i32 %528, i32 %536
  %553 = select i1 %548, i32 %524, i32 %532
  %554 = select i1 %548, i32 %520, i32 %528
  %555 = select i1 %548, i32 -64, i32 0
  %556 = add nsw i32 %555, %547
  %557 = icmp ugt i32 %556, 31
  %558 = select i1 %557, i32 %550, i32 %549
  %559 = select i1 %557, i32 %551, i32 %550
  %560 = select i1 %557, i32 %552, i32 %551
  %561 = select i1 %557, i32 %553, i32 %552
  %562 = select i1 %557, i32 %554, i32 %553
  %563 = select i1 %557, i32 -32, i32 0
  %564 = add nsw i32 %563, %556
  %565 = icmp ugt i32 %564, 31
  %566 = select i1 %565, i32 %559, i32 %558
  %567 = select i1 %565, i32 %560, i32 %559
  %568 = select i1 %565, i32 %561, i32 %560
  %569 = select i1 %565, i32 %562, i32 %561
  %570 = select i1 %565, i32 -32, i32 0
  %571 = add nsw i32 %570, %564
  %572 = icmp eq i32 %571, 0
  %573 = sub nsw i32 32, %571
  %574 = tail call i32 @llvm.fshr.i32(i32 %566, i32 %567, i32 %573)
  %575 = tail call i32 @llvm.fshr.i32(i32 %567, i32 %568, i32 %573)
  %576 = tail call i32 @llvm.fshr.i32(i32 %568, i32 %569, i32 %573)
  %577 = select i1 %572, i32 %566, i32 %574
  %578 = select i1 %572, i32 %567, i32 %575
  %579 = select i1 %572, i32 %568, i32 %576
  %580 = lshr i32 %577, 29
  %581 = tail call i32 @llvm.fshl.i32(i32 %577, i32 %578, i32 2)
  %582 = tail call i32 @llvm.fshl.i32(i32 %578, i32 %579, i32 2)
  %583 = tail call i32 @llvm.fshl.i32(i32 %579, i32 %569, i32 2)
  %584 = and i32 %580, 1
  %585 = sub nsw i32 0, %584
  %586 = shl i32 %580, 31
  %587 = xor i32 %581, %585
  %588 = xor i32 %582, %585
  %589 = xor i32 %583, %585
  %590 = tail call i32 @llvm.ctlz.i32(i32 %587, i1 false), !range !16
  %591 = sub nsw i32 31, %590
  %592 = tail call i32 @llvm.fshr.i32(i32 %587, i32 %588, i32 %591)
  %593 = tail call i32 @llvm.fshr.i32(i32 %588, i32 %589, i32 %591)
  %594 = shl nuw nsw i32 %590, 23
  %595 = sub nuw nsw i32 1056964608, %594
  %596 = lshr i32 %592, 9
  %597 = or i32 %596, %595
  %598 = or i32 %597, %586
  %599 = bitcast i32 %598 to float
  %600 = tail call i32 @llvm.fshl.i32(i32 %592, i32 %593, i32 23)
  %601 = tail call i32 @llvm.ctlz.i32(i32 %600, i1 false), !range !16
  %602 = fmul float %599, 0x3FF921FB40000000
  %603 = add nuw nsw i32 %601, %590
  %604 = shl nuw nsw i32 %603, 23
  %605 = sub nuw nsw i32 855638016, %604
  %606 = sub nsw i32 31, %601
  %607 = tail call i32 @llvm.fshr.i32(i32 %600, i32 %593, i32 %606)
  %608 = lshr i32 %607, 9
  %609 = or i32 %605, %608
  %610 = or i32 %609, %586
  %611 = bitcast i32 %610 to float
  %612 = fneg float %602
  %613 = tail call float @llvm.fma.f32(float %599, float 0x3FF921FB40000000, float %612)
  %614 = tail call float @llvm.fma.f32(float %599, float 0x3E74442D00000000, float %613)
  %615 = tail call float @llvm.fma.f32(float %611, float 0x3FF921FB40000000, float %614)
  %616 = fadd float %602, %615
  %617 = lshr i32 %577, 30
  %618 = add nuw nsw i32 %584, %617
  br label %619

619:                                              ; preds = %344, %383
  %620 = phi float [ %381, %344 ], [ %616, %383 ]
  %621 = phi i32 [ %382, %344 ], [ %618, %383 ]
  %622 = fmul float %620, %620
  %623 = tail call float @llvm.fmuladd.f32(float %622, float 0xBF29833040000000, float 0x3F81103880000000)
  %624 = tail call float @llvm.fmuladd.f32(float %622, float %623, float 0xBFC55553A0000000)
  %625 = fmul float %622, %624
  %626 = tail call float @llvm.fmuladd.f32(float %620, float %625, float %620)
  %627 = tail call float @llvm.fmuladd.f32(float %622, float 0x3EFAEA6680000000, float 0xBF56C9E760000000)
  %628 = tail call float @llvm.fmuladd.f32(float %622, float %627, float 0x3FA5557EE0000000)
  %629 = tail call float @llvm.fmuladd.f32(float %622, float %628, float 0xBFE0000080000000)
  %630 = tail call float @llvm.fmuladd.f32(float %622, float %629, float 1.000000e+00)
  %631 = fneg float %626
  %632 = and i32 %621, 1
  %633 = icmp eq i32 %632, 0
  %634 = select i1 %633, float %630, float %631
  %635 = bitcast float %634 to i32
  %636 = shl i32 %621, 30
  %637 = and i32 %636, -2147483648
  %638 = xor i32 %637, %635
  %639 = bitcast i32 %638 to float
  %640 = select i1 %337, float %639, float 0x7FF8000000000000
  %641 = fmul contract float %190, %640
  %642 = add nuw nsw i32 %341, 2
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds float, float addrspace(1)* %1, i64 %643
  store float %641, float addrspace(1)* %644, align 4, !tbaa !17
  %645 = add nuw nsw i32 %341, 3
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds float, float addrspace(1)* %1, i64 %646
  store float 1.000000e+00, float addrspace(1)* %647, align 4, !tbaa !17
  %648 = add nuw nsw i32 %183, 8
  %649 = icmp ult i32 %183, 24
  br i1 %649, label %182, label %181, !llvm.loop !21
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !10, i64 12}
!6 = !{!"hsa_kernel_dispatch_packet_s", !7, i64 0, !7, i64 2, !7, i64 4, !7, i64 6, !7, i64 8, !7, i64 10, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !11, i64 32, !12, i64 40, !11, i64 48, !13, i64 56}
!7 = !{!"short", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!"int", !8, i64 0}
!11 = !{!"long", !8, i64 0}
!12 = !{!"any pointer", !8, i64 0}
!13 = !{!"hsa_signal_s", !11, i64 0}
!14 = !{i16 1, i16 1025}
!15 = !{}
!16 = !{i32 0, i32 33}
!17 = !{!18, !18, i64 0}
!18 = !{!"float", !19, i64 0}
!19 = !{!"omnipotent char", !20, i64 0}
!20 = !{!"Simple C++ TBAA"}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.mustprogress"}
