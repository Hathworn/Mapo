digraph "CFG for '_Z15MatrixMulKernelPfS_S_i' function" {
	label="CFG for '_Z15MatrixMulKernelPfS_S_i' function";

	Node0x4d25650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %7 = icmp sgt i32 %3, 0\l  %8 = mul nsw i32 %6, %3\l  br i1 %7, label %9, label %37\l|{<s0>T|<s1>F}}"];
	Node0x4d25650:s0 -> Node0x4d256a0;
	Node0x4d25650:s1 -> Node0x4d27420;
	Node0x4d256a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%9:\l9:                                                \l  %10 = and i32 %3, 7\l  %11 = icmp ult i32 %3, 8\l  br i1 %11, label %14, label %12\l|{<s0>T|<s1>F}}"];
	Node0x4d256a0:s0 -> Node0x4d276e0;
	Node0x4d256a0:s1 -> Node0x4d27730;
	Node0x4d27730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%12:\l12:                                               \l  %13 = and i32 %3, -8\l  br label %42\l}"];
	Node0x4d27730 -> Node0x4d27930;
	Node0x4d276e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = phi float [ undef, %9 ], [ %140, %42 ]\l  %16 = phi float [ 0.000000e+00, %9 ], [ %140, %42 ]\l  %17 = phi i32 [ 0, %9 ], [ %141, %42 ]\l  %18 = icmp eq i32 %10, 0\l  br i1 %18, label %37, label %19\l|{<s0>T|<s1>F}}"];
	Node0x4d276e0:s0 -> Node0x4d27420;
	Node0x4d276e0:s1 -> Node0x4d28c40;
	Node0x4d28c40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%19:\l19:                                               \l  %20 = phi float [ %33, %19 ], [ %16, %14 ]\l  %21 = phi i32 [ %34, %19 ], [ %17, %14 ]\l  %22 = phi i32 [ %35, %19 ], [ 0, %14 ]\l  %23 = add nsw i32 %21, %8\l  %24 = sext i32 %23 to i64\l  %25 = getelementptr inbounds float, float addrspace(1)* %0, i64 %24\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %27 = mul nsw i32 %21, %3\l  %28 = add nsw i32 %27, %5\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %32 = fmul contract float %26, %31\l  %33 = fadd contract float %20, %32\l  %34 = add nuw nsw i32 %21, 1\l  %35 = add i32 %22, 1\l  %36 = icmp eq i32 %35, %10\l  br i1 %36, label %37, label %19, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4d28c40:s0 -> Node0x4d27420;
	Node0x4d28c40:s1 -> Node0x4d28c40;
	Node0x4d27420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%37:\l37:                                               \l  %38 = phi float [ 0.000000e+00, %4 ], [ %15, %14 ], [ %33, %19 ]\l  %39 = add nsw i32 %8, %5\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %2, i64 %40\l  store float %38, float addrspace(1)* %41, align 4, !tbaa !5\l  ret void\l}"];
	Node0x4d27930 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%42:\l42:                                               \l  %43 = phi float [ 0.000000e+00, %12 ], [ %140, %42 ]\l  %44 = phi i32 [ 0, %12 ], [ %141, %42 ]\l  %45 = phi i32 [ 0, %12 ], [ %142, %42 ]\l  %46 = add nsw i32 %44, %8\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %50 = mul nsw i32 %44, %3\l  %51 = add nsw i32 %50, %5\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %55 = fmul contract float %49, %54\l  %56 = fadd contract float %43, %55\l  %57 = or i32 %44, 1\l  %58 = add nsw i32 %57, %8\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %62 = mul nsw i32 %57, %3\l  %63 = add nsw i32 %62, %5\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %67 = fmul contract float %61, %66\l  %68 = fadd contract float %56, %67\l  %69 = or i32 %44, 2\l  %70 = add nsw i32 %69, %8\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %74 = mul nsw i32 %69, %3\l  %75 = add nsw i32 %74, %5\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %79 = fmul contract float %73, %78\l  %80 = fadd contract float %68, %79\l  %81 = or i32 %44, 3\l  %82 = add nsw i32 %81, %8\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %86 = mul nsw i32 %81, %3\l  %87 = add nsw i32 %86, %5\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %91 = fmul contract float %85, %90\l  %92 = fadd contract float %80, %91\l  %93 = or i32 %44, 4\l  %94 = add nsw i32 %93, %8\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %98 = mul nsw i32 %93, %3\l  %99 = add nsw i32 %98, %5\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %103 = fmul contract float %97, %102\l  %104 = fadd contract float %92, %103\l  %105 = or i32 %44, 5\l  %106 = add nsw i32 %105, %8\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %110 = mul nsw i32 %105, %3\l  %111 = add nsw i32 %110, %5\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %115 = fmul contract float %109, %114\l  %116 = fadd contract float %104, %115\l  %117 = or i32 %44, 6\l  %118 = add nsw i32 %117, %8\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %122 = mul nsw i32 %117, %3\l  %123 = add nsw i32 %122, %5\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %127 = fmul contract float %121, %126\l  %128 = fadd contract float %116, %127\l  %129 = or i32 %44, 7\l  %130 = add nsw i32 %129, %8\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %134 = mul nsw i32 %129, %3\l  %135 = add nsw i32 %134, %5\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %139 = fmul contract float %133, %138\l  %140 = fadd contract float %128, %139\l  %141 = add nuw nsw i32 %44, 8\l  %142 = add i32 %45, 8\l  %143 = icmp eq i32 %142, %13\l  br i1 %143, label %14, label %42, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4d27930:s0 -> Node0x4d276e0;
	Node0x4d27930:s1 -> Node0x4d27930;
}
