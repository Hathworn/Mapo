digraph "CFG for '_Z8RPkerneliiPfS_S_' function" {
	label="CFG for '_Z8RPkerneliiPfS_S_' function";

	Node0x4e908e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp slt i32 %14, %1\l  br i1 %15, label %16, label %144\l|{<s0>T|<s1>F}}"];
	Node0x4e908e0:s0 -> Node0x4e927a0;
	Node0x4e908e0:s1 -> Node0x4e92830;
	Node0x4e927a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %0, 0\l  br i1 %17, label %18, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4e927a0:s0 -> Node0x4e92a80;
	Node0x4e927a0:s1 -> Node0x4e92ad0;
	Node0x4e92a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = mul nsw i32 %14, %0\l  %20 = and i32 %0, 7\l  %21 = icmp ult i32 %0, 8\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x4e92a80:s0 -> Node0x4e92e20;
	Node0x4e92a80:s1 -> Node0x4e92e70;
	Node0x4e92e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i32 %0, -8\l  br label %50\l}"];
	Node0x4e92e70 -> Node0x4e93070;
	Node0x4e92e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi float [ undef, %18 ], [ %140, %50 ]\l  %26 = phi i32 [ 0, %18 ], [ %141, %50 ]\l  %27 = phi float [ 0.000000e+00, %18 ], [ %140, %50 ]\l  %28 = icmp eq i32 %20, 0\l  br i1 %28, label %46, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4e92e20:s0 -> Node0x4e92ad0;
	Node0x4e92e20:s1 -> Node0x4e942e0;
	Node0x4e942e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %43, %29 ], [ %26, %24 ]\l  %31 = phi float [ %42, %29 ], [ %27, %24 ]\l  %32 = phi i32 [ %44, %29 ], [ 0, %24 ]\l  %33 = zext i32 %30 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %2, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = add nsw i32 %30, %19\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %3, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fsub contract float %35, %39\l  %41 = fmul contract float %40, %40\l  %42 = fadd contract float %31, %41\l  %43 = add nuw nsw i32 %30, 1\l  %44 = add i32 %32, 1\l  %45 = icmp eq i32 %44, %20\l  br i1 %45, label %46, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4e942e0:s0 -> Node0x4e92ad0;
	Node0x4e942e0:s1 -> Node0x4e942e0;
	Node0x4e92ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %16 ], [ %25, %24 ], [ %42, %29 ]\l  %48 = sext i32 %14 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %4, i64 %48\l  store float %47, float addrspace(1)* %49, align 4, !tbaa !7\l  br label %144\l}"];
	Node0x4e92ad0 -> Node0x4e92830;
	Node0x4e93070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%50:\l50:                                               \l  %51 = phi i32 [ 0, %22 ], [ %141, %50 ]\l  %52 = phi float [ 0.000000e+00, %22 ], [ %140, %50 ]\l  %53 = phi i32 [ 0, %22 ], [ %142, %50 ]\l  %54 = zext i32 %51 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %2, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %57 = add nsw i32 %51, %19\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %3, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = fsub contract float %56, %60\l  %62 = fmul contract float %61, %61\l  %63 = fadd contract float %52, %62\l  %64 = or i32 %51, 1\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = add nsw i32 %64, %19\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %3, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = fsub contract float %67, %71\l  %73 = fmul contract float %72, %72\l  %74 = fadd contract float %63, %73\l  %75 = or i32 %51, 2\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %2, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = add nsw i32 %75, %19\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %3, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fsub contract float %78, %82\l  %84 = fmul contract float %83, %83\l  %85 = fadd contract float %74, %84\l  %86 = or i32 %51, 3\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %2, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = add nsw i32 %86, %19\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %3, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fsub contract float %89, %93\l  %95 = fmul contract float %94, %94\l  %96 = fadd contract float %85, %95\l  %97 = or i32 %51, 4\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = add nsw i32 %97, %19\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %3, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fsub contract float %100, %104\l  %106 = fmul contract float %105, %105\l  %107 = fadd contract float %96, %106\l  %108 = or i32 %51, 5\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %2, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = add nsw i32 %108, %19\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %3, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fsub contract float %111, %115\l  %117 = fmul contract float %116, %116\l  %118 = fadd contract float %107, %117\l  %119 = or i32 %51, 6\l  %120 = zext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = add nsw i32 %119, %19\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %3, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fsub contract float %122, %126\l  %128 = fmul contract float %127, %127\l  %129 = fadd contract float %118, %128\l  %130 = or i32 %51, 7\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %2, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = add nsw i32 %130, %19\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %3, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = fsub contract float %133, %137\l  %139 = fmul contract float %138, %138\l  %140 = fadd contract float %129, %139\l  %141 = add nuw nsw i32 %51, 8\l  %142 = add i32 %53, 8\l  %143 = icmp eq i32 %142, %23\l  br i1 %143, label %24, label %50, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4e93070:s0 -> Node0x4e92e20;
	Node0x4e93070:s1 -> Node0x4e93070;
	Node0x4e92830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%144:\l144:                                              \l  ret void\l}"];
}
