digraph "CFG for '_Z8SPkerneliiiPfS_Pi' function" {
	label="CFG for '_Z8SPkerneliiiPfS_Pi' function";

	Node0x5ff9d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %1\l  br i1 %16, label %17, label %169\l|{<s0>T|<s1>F}}"];
	Node0x5ff9d90:s0 -> Node0x5ffa670;
	Node0x5ff9d90:s1 -> Node0x5ffbd60;
	Node0x5ffa670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%17:\l17:                                               \l  %18 = icmp sgt i32 %2, 0\l  br i1 %18, label %19, label %32\l|{<s0>T|<s1>F}}"];
	Node0x5ffa670:s0 -> Node0x5ffbf30;
	Node0x5ffa670:s1 -> Node0x5ffbf80;
	Node0x5ffbf30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%19:\l19:                                               \l  %20 = icmp sgt i32 %0, 0\l  %21 = mul nsw i32 %15, %0\l  %22 = and i32 %0, 7\l  %23 = icmp ult i32 %0, 8\l  %24 = and i32 %0, -8\l  %25 = icmp eq i32 %22, 0\l  br label %26\l}"];
	Node0x5ffbf30 -> Node0x5ffc4b0;
	Node0x5ffc4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%26:\l26:                                               \l  %27 = phi i32 [ 0, %19 ], [ %65, %58 ]\l  %28 = phi i32 [ undef, %19 ], [ %64, %58 ]\l  %29 = phi float [ -1.000000e+00, %19 ], [ %63, %58 ]\l  br i1 %20, label %30, label %58\l|{<s0>T|<s1>F}}"];
	Node0x5ffc4b0:s0 -> Node0x5ffd780;
	Node0x5ffc4b0:s1 -> Node0x5ffc5a0;
	Node0x5ffd780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %27, %0\l  br i1 %23, label %36, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5ffd780:s0 -> Node0x5ffd950;
	Node0x5ffd780:s1 -> Node0x5ffd9a0;
	Node0x5ffbf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%32:\l32:                                               \l  %33 = phi i32 [ undef, %17 ], [ %64, %58 ]\l  %34 = sext i32 %15 to i64\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %34\l  store i32 %33, i32 addrspace(1)* %35, align 4, !tbaa !7\l  br label %169\l}"];
	Node0x5ffbf80 -> Node0x5ffbd60;
	Node0x5ffd950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%36:\l36:                                               \l  %37 = phi float [ undef, %30 ], [ %165, %67 ]\l  %38 = phi i32 [ 0, %30 ], [ %166, %67 ]\l  %39 = phi float [ 0.000000e+00, %30 ], [ %165, %67 ]\l  br i1 %25, label %58, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5ffd950:s0 -> Node0x5ffc5a0;
	Node0x5ffd950:s1 -> Node0x5ffe290;
	Node0x5ffe290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ %55, %40 ], [ %38, %36 ]\l  %42 = phi float [ %54, %40 ], [ %39, %36 ]\l  %43 = phi i32 [ %56, %40 ], [ 0, %36 ]\l  %44 = add nsw i32 %41, %21\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %3, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %48 = add nsw i32 %41, %31\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %4, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %52 = fsub contract float %47, %51\l  %53 = fmul contract float %52, %52\l  %54 = fadd contract float %42, %53\l  %55 = add nuw nsw i32 %41, 1\l  %56 = add i32 %43, 1\l  %57 = icmp eq i32 %56, %22\l  br i1 %57, label %58, label %40, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5ffe290:s0 -> Node0x5ffc5a0;
	Node0x5ffe290:s1 -> Node0x5ffe290;
	Node0x5ffc5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%58:\l58:                                               \l  %59 = phi float [ 0.000000e+00, %26 ], [ %37, %36 ], [ %54, %40 ]\l  %60 = fcmp contract olt float %29, 0.000000e+00\l  %61 = fcmp contract olt float %59, %29\l  %62 = select i1 %60, i1 true, i1 %61\l  %63 = select i1 %62, float %59, float %29\l  %64 = select i1 %62, i32 %27, i32 %28\l  %65 = add nuw nsw i32 %27, 1\l  %66 = icmp eq i32 %65, %2\l  br i1 %66, label %32, label %26, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5ffc5a0:s0 -> Node0x5ffbf80;
	Node0x5ffc5a0:s1 -> Node0x5ffc4b0;
	Node0x5ffd9a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%67:\l67:                                               \l  %68 = phi i32 [ %166, %67 ], [ 0, %30 ]\l  %69 = phi float [ %165, %67 ], [ 0.000000e+00, %30 ]\l  %70 = phi i32 [ %167, %67 ], [ 0, %30 ]\l  %71 = add nsw i32 %68, %21\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %3, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %75 = add nsw i32 %68, %31\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %4, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %79 = fsub contract float %74, %78\l  %80 = fmul contract float %79, %79\l  %81 = fadd contract float %69, %80\l  %82 = or i32 %68, 1\l  %83 = add nsw i32 %82, %21\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %3, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %87 = add nsw i32 %82, %31\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %4, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %91 = fsub contract float %86, %90\l  %92 = fmul contract float %91, %91\l  %93 = fadd contract float %81, %92\l  %94 = or i32 %68, 2\l  %95 = add nsw i32 %94, %21\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %3, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %99 = add nsw i32 %94, %31\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %4, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %103 = fsub contract float %98, %102\l  %104 = fmul contract float %103, %103\l  %105 = fadd contract float %93, %104\l  %106 = or i32 %68, 3\l  %107 = add nsw i32 %106, %21\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %3, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %111 = add nsw i32 %106, %31\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %4, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %115 = fsub contract float %110, %114\l  %116 = fmul contract float %115, %115\l  %117 = fadd contract float %105, %116\l  %118 = or i32 %68, 4\l  %119 = add nsw i32 %118, %21\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %3, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %123 = add nsw i32 %118, %31\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %4, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %127 = fsub contract float %122, %126\l  %128 = fmul contract float %127, %127\l  %129 = fadd contract float %117, %128\l  %130 = or i32 %68, 5\l  %131 = add nsw i32 %130, %21\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %3, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %135 = add nsw i32 %130, %31\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %4, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %139 = fsub contract float %134, %138\l  %140 = fmul contract float %139, %139\l  %141 = fadd contract float %129, %140\l  %142 = or i32 %68, 6\l  %143 = add nsw i32 %142, %21\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %3, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %147 = add nsw i32 %142, %31\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %4, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %151 = fsub contract float %146, %150\l  %152 = fmul contract float %151, %151\l  %153 = fadd contract float %141, %152\l  %154 = or i32 %68, 7\l  %155 = add nsw i32 %154, %21\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %3, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %159 = add nsw i32 %154, %31\l  %160 = sext i32 %159 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %4, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %163 = fsub contract float %158, %162\l  %164 = fmul contract float %163, %163\l  %165 = fadd contract float %153, %164\l  %166 = add nuw nsw i32 %68, 8\l  %167 = add i32 %70, 8\l  %168 = icmp eq i32 %167, %24\l  br i1 %168, label %36, label %67, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5ffd9a0:s0 -> Node0x5ffd950;
	Node0x5ffd9a0:s1 -> Node0x5ffd9a0;
	Node0x5ffbd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%169:\l169:                                              \l  ret void\l}"];
}
