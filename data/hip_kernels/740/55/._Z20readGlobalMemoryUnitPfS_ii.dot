digraph "CFG for '_Z20readGlobalMemoryUnitPfS_ii' function" {
	label="CFG for '_Z20readGlobalMemoryUnitPfS_ii' function";

	Node0x4c192c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = add i32 %12, %5\l  %14 = icmp sgt i32 %3, 0\l  br i1 %14, label %15, label %121\l|{<s0>T|<s1>F}}"];
	Node0x4c192c0:s0 -> Node0x4c1b190;
	Node0x4c192c0:s1 -> Node0x4c1b220;
	Node0x4c1b190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%15:\l15:                                               \l  %16 = shl nsw i32 %13, 9\l  %17 = add nsw i32 %2, -1\l  br label %18\l}"];
	Node0x4c1b190 -> Node0x4c1a9f0;
	Node0x4c1a9f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%18:\l18:                                               \l  %19 = phi i32 [ 0, %15 ], [ %119, %18 ]\l  %20 = phi float [ 0.000000e+00, %15 ], [ %116, %18 ]\l  %21 = phi i32 [ %16, %15 ], [ %118, %18 ]\l  %22 = and i32 %21, %17\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds float, float addrspace(1)* %0, i64 %23\l  %25 = load float, float addrspace(1)* %24, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %26 = add nsw i32 %21, 1\l  %27 = and i32 %26, %17\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %31 = add nsw i32 %21, 2\l  %32 = and i32 %31, %17\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %36 = add nsw i32 %21, 3\l  %37 = and i32 %36, %17\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %41 = add nsw i32 %21, 4\l  %42 = and i32 %41, %17\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %46 = add nsw i32 %21, 5\l  %47 = and i32 %46, %17\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %51 = add nsw i32 %21, 6\l  %52 = and i32 %51, %17\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %56 = add nsw i32 %21, 7\l  %57 = and i32 %56, %17\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %61 = add nsw i32 %21, 8\l  %62 = and i32 %61, %17\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %66 = add nsw i32 %21, 9\l  %67 = and i32 %66, %17\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = add nsw i32 %21, 10\l  %72 = and i32 %71, %17\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %76 = add nsw i32 %21, 11\l  %77 = and i32 %76, %17\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %81 = add nsw i32 %21, 12\l  %82 = and i32 %81, %17\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %86 = add nsw i32 %21, 13\l  %87 = and i32 %86, %17\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %91 = add nsw i32 %21, 14\l  %92 = and i32 %91, %17\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %96 = add nsw i32 %21, 15\l  %97 = and i32 %96, %17\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %101 = fadd contract float %25, %30\l  %102 = fadd contract float %101, %35\l  %103 = fadd contract float %102, %40\l  %104 = fadd contract float %103, %45\l  %105 = fadd contract float %104, %50\l  %106 = fadd contract float %105, %55\l  %107 = fadd contract float %106, %60\l  %108 = fadd contract float %107, %65\l  %109 = fadd contract float %108, %70\l  %110 = fadd contract float %109, %75\l  %111 = fadd contract float %110, %80\l  %112 = fadd contract float %111, %85\l  %113 = fadd contract float %112, %90\l  %114 = fadd contract float %113, %95\l  %115 = fadd contract float %114, %100\l  %116 = fadd contract float %20, %115\l  %117 = add nsw i32 %21, 16\l  %118 = and i32 %117, %17\l  %119 = add nuw nsw i32 %19, 1\l  %120 = icmp eq i32 %119, %3\l  br i1 %120, label %121, label %18, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4c1a9f0:s0 -> Node0x4c1b220;
	Node0x4c1a9f0:s1 -> Node0x4c1a9f0;
	Node0x4c1b220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%121:\l121:                                              \l  %122 = phi float [ 0.000000e+00, %4 ], [ %116, %18 ]\l  %123 = sext i32 %13 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  store float %122, float addrspace(1)* %124, align 4, !tbaa !7\l  ret void\l}"];
}
