digraph "CFG for '_Z7stencilPfS_iiS_' function" {
	label="CFG for '_Z7stencilPfS_iiS_' function";

	Node0x5f419c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add nuw nsw i32 %13, 1\l  %15 = add i32 %14, %3\l  %16 = add i32 %15, %12\l  %17 = icmp slt i32 %16, %2\l  br i1 %17, label %18, label %148\l|{<s0>T|<s1>F}}"];
	Node0x5f419c0:s0 -> Node0x5f43a20;
	Node0x5f419c0:s1 -> Node0x5f43ab0;
	Node0x5f43a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%18:\l18:                                               \l  %19 = sub nsw i32 0, %3\l  %20 = icmp sgt i32 %3, 0\l  br i1 %20, label %21, label %52\l|{<s0>T|<s1>F}}"];
	Node0x5f43a20:s0 -> Node0x5f43d40;
	Node0x5f43a20:s1 -> Node0x5f43d90;
	Node0x5f43d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%21:\l21:                                               \l  %22 = sub nsw i32 1, %3\l  %23 = tail call i32 @llvm.smax.i32(i32 %3, i32 %22)\l  %24 = add nuw i32 %23, %3\l  %25 = add i32 %24, -1\l  %26 = and i32 %24, 7\l  %27 = icmp eq i32 %26, 0\l  br i1 %27, label %47, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5f43d40:s0 -> Node0x5f443d0;
	Node0x5f43d40:s1 -> Node0x5f44460;
	Node0x5f44460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi i32 [ %42, %28 ], [ %19, %21 ]\l  %30 = phi float [ %41, %28 ], [ 0.000000e+00, %21 ]\l  %31 = phi i32 [ %43, %28 ], [ 0, %21 ]\l  %32 = add nsw i32 %29, %16\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = add nsw i32 %29, %3\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %4, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fmul contract float %35, %39\l  %41 = fadd contract float %30, %40\l  %42 = add nsw i32 %29, 1\l  %43 = add nuw nsw i32 %31, 1\l  %44 = icmp eq i32 %43, %26\l  br i1 %44, label %45, label %28, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5f44460:s0 -> Node0x5f46980;
	Node0x5f44460:s1 -> Node0x5f44460;
	Node0x5f46980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%45:\l45:                                               \l  %46 = sub i32 %26, %3\l  br label %47\l}"];
	Node0x5f46980 -> Node0x5f443d0;
	Node0x5f443d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%47:\l47:                                               \l  %48 = phi i32 [ %19, %21 ], [ %46, %45 ]\l  %49 = phi float [ 0.000000e+00, %21 ], [ %41, %45 ]\l  %50 = phi float [ undef, %21 ], [ %41, %45 ]\l  %51 = icmp ult i32 %25, 7\l  br i1 %51, label %52, label %56\l|{<s0>T|<s1>F}}"];
	Node0x5f443d0:s0 -> Node0x5f43d90;
	Node0x5f443d0:s1 -> Node0x5f472a0;
	Node0x5f43d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%52:\l52:                                               \l  %53 = phi float [ 0.000000e+00, %18 ], [ %50, %47 ], [ %145, %56 ]\l  %54 = sext i32 %16 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54\l  store float %53, float addrspace(1)* %55, align 4, !tbaa !7\l  br label %148\l}"];
	Node0x5f43d90 -> Node0x5f43ab0;
	Node0x5f472a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%56:\l56:                                               \l  %57 = phi i32 [ %146, %56 ], [ %48, %47 ]\l  %58 = phi float [ %145, %56 ], [ %49, %47 ]\l  %59 = add nsw i32 %57, %16\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %63 = add nsw i32 %57, %3\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %4, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = fmul contract float %62, %66\l  %68 = fadd contract float %58, %67\l  %69 = add nsw i32 %57, 1\l  %70 = add nsw i32 %69, %16\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = add nsw i32 %69, %3\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %4, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fmul contract float %73, %77\l  %79 = fadd contract float %68, %78\l  %80 = add nsw i32 %57, 2\l  %81 = add nsw i32 %80, %16\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = add nsw i32 %80, %3\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %4, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = fmul contract float %84, %88\l  %90 = fadd contract float %79, %89\l  %91 = add nsw i32 %57, 3\l  %92 = add nsw i32 %91, %16\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = add nsw i32 %91, %3\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %4, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fmul contract float %95, %99\l  %101 = fadd contract float %90, %100\l  %102 = add nsw i32 %57, 4\l  %103 = add nsw i32 %102, %16\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %0, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = add nsw i32 %102, %3\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %4, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %106, %110\l  %112 = fadd contract float %101, %111\l  %113 = add nsw i32 %57, 5\l  %114 = add nsw i32 %113, %16\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = add nsw i32 %113, %3\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %4, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %122 = fmul contract float %117, %121\l  %123 = fadd contract float %112, %122\l  %124 = add nsw i32 %57, 6\l  %125 = add nsw i32 %124, %16\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = add nsw i32 %124, %3\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %4, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fmul contract float %128, %132\l  %134 = fadd contract float %123, %133\l  %135 = add nsw i32 %57, 7\l  %136 = add nsw i32 %135, %16\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = add nsw i32 %135, %3\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %4, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = fmul contract float %139, %143\l  %145 = fadd contract float %134, %144\l  %146 = add nsw i32 %57, 8\l  %147 = icmp slt i32 %146, %3\l  br i1 %147, label %56, label %52, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f472a0:s0 -> Node0x5f472a0;
	Node0x5f472a0:s1 -> Node0x5f43d90;
	Node0x5f43ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%148:\l148:                                              \l  ret void\l}"];
}
