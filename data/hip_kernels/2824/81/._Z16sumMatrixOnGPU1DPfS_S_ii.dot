digraph "CFG for '_Z16sumMatrixOnGPU1DPfS_S_ii' function" {
	label="CFG for '_Z16sumMatrixOnGPU1DPfS_S_ii' function";

	Node0x57a36f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = icmp ult i32 %14, %3\l  %16 = icmp sgt i32 %4, 0\l  %17 = select i1 %15, i1 %16, i1 false\l  br i1 %17, label %18, label %126\l|{<s0>T|<s1>F}}"];
	Node0x57a36f0:s0 -> Node0x57a4890;
	Node0x57a36f0:s1 -> Node0x57a5850;
	Node0x57a4890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = and i32 %4, 7\l  %20 = icmp ult i32 %4, 8\l  br i1 %20, label %108, label %21\l|{<s0>T|<s1>F}}"];
	Node0x57a4890:s0 -> Node0x57a5b10;
	Node0x57a4890:s1 -> Node0x57a5b60;
	Node0x57a5b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%21:\l21:                                               \l  %22 = and i32 %4, -8\l  br label %23\l}"];
	Node0x57a5b60 -> Node0x57a5d60;
	Node0x57a5d60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%23:\l23:                                               \l  %24 = phi i32 [ 0, %21 ], [ %105, %23 ]\l  %25 = phi i32 [ 0, %21 ], [ %106, %23 ]\l  %26 = mul nsw i32 %24, %3\l  %27 = add i32 %26, %14\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %31 = getelementptr inbounds float, float addrspace(1)* %1, i64 %28\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7\l  %33 = fadd contract float %30, %32\l  %34 = getelementptr inbounds float, float addrspace(1)* %2, i64 %28\l  store float %33, float addrspace(1)* %34, align 4, !tbaa !7\l  %35 = or i32 %24, 1\l  %36 = mul nsw i32 %35, %3\l  %37 = add i32 %36, %14\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7\l  %41 = getelementptr inbounds float, float addrspace(1)* %1, i64 %38\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7\l  %43 = fadd contract float %40, %42\l  %44 = getelementptr inbounds float, float addrspace(1)* %2, i64 %38\l  store float %43, float addrspace(1)* %44, align 4, !tbaa !7\l  %45 = or i32 %24, 2\l  %46 = mul nsw i32 %45, %3\l  %47 = add i32 %46, %14\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7\l  %53 = fadd contract float %50, %52\l  %54 = getelementptr inbounds float, float addrspace(1)* %2, i64 %48\l  store float %53, float addrspace(1)* %54, align 4, !tbaa !7\l  %55 = or i32 %24, 3\l  %56 = mul nsw i32 %55, %3\l  %57 = add i32 %56, %14\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7\l  %63 = fadd contract float %60, %62\l  %64 = getelementptr inbounds float, float addrspace(1)* %2, i64 %58\l  store float %63, float addrspace(1)* %64, align 4, !tbaa !7\l  %65 = or i32 %24, 4\l  %66 = mul nsw i32 %65, %3\l  %67 = add i32 %66, %14\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7\l  %73 = fadd contract float %70, %72\l  %74 = getelementptr inbounds float, float addrspace(1)* %2, i64 %68\l  store float %73, float addrspace(1)* %74, align 4, !tbaa !7\l  %75 = or i32 %24, 5\l  %76 = mul nsw i32 %75, %3\l  %77 = add i32 %76, %14\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7\l  %83 = fadd contract float %80, %82\l  %84 = getelementptr inbounds float, float addrspace(1)* %2, i64 %78\l  store float %83, float addrspace(1)* %84, align 4, !tbaa !7\l  %85 = or i32 %24, 6\l  %86 = mul nsw i32 %85, %3\l  %87 = add i32 %86, %14\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7\l  %93 = fadd contract float %90, %92\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %88\l  store float %93, float addrspace(1)* %94, align 4, !tbaa !7\l  %95 = or i32 %24, 7\l  %96 = mul nsw i32 %95, %3\l  %97 = add i32 %96, %14\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7\l  %103 = fadd contract float %100, %102\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  store float %103, float addrspace(1)* %104, align 4, !tbaa !7\l  %105 = add nuw nsw i32 %24, 8\l  %106 = add i32 %25, 8\l  %107 = icmp eq i32 %106, %22\l  br i1 %107, label %108, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x57a5d60:s0 -> Node0x57a5b10;
	Node0x57a5d60:s1 -> Node0x57a5d60;
	Node0x57a5b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%108:\l108:                                              \l  %109 = phi i32 [ 0, %18 ], [ %105, %23 ]\l  %110 = icmp eq i32 %19, 0\l  br i1 %110, label %126, label %111\l|{<s0>T|<s1>F}}"];
	Node0x57a5b10:s0 -> Node0x57a5850;
	Node0x57a5b10:s1 -> Node0x57a9fa0;
	Node0x57a9fa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%111:\l111:                                              \l  %112 = phi i32 [ %123, %111 ], [ %109, %108 ]\l  %113 = phi i32 [ %124, %111 ], [ 0, %108 ]\l  %114 = mul nsw i32 %112, %3\l  %115 = add i32 %114, %14\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %116\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7\l  %121 = fadd contract float %118, %120\l  %122 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  store float %121, float addrspace(1)* %122, align 4, !tbaa !7\l  %123 = add nuw nsw i32 %112, 1\l  %124 = add i32 %113, 1\l  %125 = icmp eq i32 %124, %19\l  br i1 %125, label %126, label %111, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x57a9fa0:s0 -> Node0x57a5850;
	Node0x57a9fa0:s1 -> Node0x57a9fa0;
	Node0x57a5850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%126:\l126:                                              \l  ret void\l}"];
}
