digraph "CFG for '_Z8convolvePhPfiiiiiiS_' function" {
	label="CFG for '_Z8convolvePhPfiiiiiiS_' function";

	Node0x52fdbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !6\l  %19 = mul i32 %10, %15\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add i32 %19, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 16\l  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*\l  %29 = load i32, i32 addrspace(4)* %28, align 8, !tbaa !16\l  %30 = mul i32 %22, %26\l  %31 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %32 = add i32 %30, %31\l  %33 = sdiv i32 %6, 2\l  %34 = sdiv i32 %7, 2\l  %35 = add i32 %33, %4\l  %36 = icmp slt i32 %21, %35\l  %37 = add i32 %34, %5\l  %38 = icmp slt i32 %32, %37\l  %39 = select i1 %36, i1 true, i1 %38\l  br i1 %39, label %207, label %40\l|{<s0>T|<s1>F}}"];
	Node0x52fdbc0:s0 -> Node0x5302ae0;
	Node0x52fdbc0:s1 -> Node0x5302b70;
	Node0x5302b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%40:\l40:                                               \l  %41 = udiv i32 %18, %15\l  %42 = mul i32 %41, %15\l  %43 = icmp ugt i32 %18, %42\l  %44 = zext i1 %43 to i32\l  %45 = add i32 %41, %44\l  %46 = mul i32 %45, %15\l  %47 = sub i32 %46, %35\l  %48 = icmp ult i32 %21, %47\l  br i1 %48, label %49, label %207\l|{<s0>T|<s1>F}}"];
	Node0x5302b70:s0 -> Node0x5303110;
	Node0x5302b70:s1 -> Node0x5302ae0;
	Node0x5303110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%49:\l49:                                               \l  %50 = udiv i32 %29, %26\l  %51 = mul i32 %50, %26\l  %52 = icmp ugt i32 %29, %51\l  %53 = zext i1 %52 to i32\l  %54 = add i32 %50, %53\l  %55 = mul i32 %54, %26\l  %56 = sub i32 %55, %37\l  %57 = icmp uge i32 %32, %56\l  %58 = icmp slt i32 %7, -1\l  %59 = select i1 %57, i1 true, i1 %58\l  br i1 %59, label %207, label %60\l|{<s0>T|<s1>F}}"];
	Node0x5303110:s0 -> Node0x5302ae0;
	Node0x5303110:s1 -> Node0x53037e0;
	Node0x53037e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%60:\l60:                                               \l  %61 = sub nsw i32 0, %34\l  %62 = sub nsw i32 0, %33\l  %63 = icmp slt i32 %6, -1\l  %64 = tail call i32 @llvm.abs.i32(i32 %33, i1 true)\l  %65 = tail call i32 @llvm.abs.i32(i32 %34, i1 true)\l  %66 = add i32 %33, %64\l  %67 = add i32 %66, 1\l  %68 = and i32 %67, 7\l  %69 = icmp eq i32 %68, 0\l  %70 = icmp ult i32 %66, 7\l  br label %71\l}"];
	Node0x53037e0 -> Node0x5304310;
	Node0x5304310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%71:\l71:                                               \l  %72 = phi float [ 0.000000e+00, %60 ], [ %104, %103 ]\l  %73 = phi i32 [ %61, %60 ], [ %105, %103 ]\l  br i1 %63, label %103, label %74\l|{<s0>T|<s1>F}}"];
	Node0x5304310:s0 -> Node0x5304e90;
	Node0x5304310:s1 -> Node0x53050f0;
	Node0x53050f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%74:\l74:                                               \l  %75 = add nsw i32 %73, %34\l  %76 = mul nsw i32 %75, %6\l  %77 = add i32 %76, %33\l  %78 = add nsw i32 %73, %32\l  %79 = mul nsw i32 %78, %2\l  %80 = add i32 %79, %21\l  br i1 %69, label %99, label %81\l|{<s0>T|<s1>F}}"];
	Node0x53050f0:s0 -> Node0x5305590;
	Node0x53050f0:s1 -> Node0x53055e0;
	Node0x53055e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%81:\l81:                                               \l  %82 = phi float [ %95, %81 ], [ %72, %74 ]\l  %83 = phi i32 [ %96, %81 ], [ %62, %74 ]\l  %84 = phi i32 [ %97, %81 ], [ 0, %74 ]\l  %85 = add i32 %77, %83\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %89 = add i32 %80, %83\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %90\l  %92 = load i8, i8 addrspace(1)* %91, align 1, !tbaa !21, !amdgpu.noclobber !5\l  %93 = uitofp i8 %92 to float\l  %94 = fmul contract float %88, %93\l  %95 = fadd contract float %82, %94\l  %96 = add i32 %83, 1\l  %97 = add i32 %84, 1\l  %98 = icmp eq i32 %97, %68\l  br i1 %98, label %99, label %81, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x53055e0:s0 -> Node0x5305590;
	Node0x53055e0:s1 -> Node0x53055e0;
	Node0x5305590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%99:\l99:                                               \l  %100 = phi float [ undef, %74 ], [ %95, %81 ]\l  %101 = phi float [ %72, %74 ], [ %95, %81 ]\l  %102 = phi i32 [ %62, %74 ], [ %96, %81 ]\l  br i1 %70, label %103, label %107\l|{<s0>T|<s1>F}}"];
	Node0x5305590:s0 -> Node0x5304e90;
	Node0x5305590:s1 -> Node0x5306c60;
	Node0x5304e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%103:\l103:                                              \l  %104 = phi float [ %72, %71 ], [ %100, %99 ], [ %204, %107 ]\l  %105 = add i32 %73, 1\l  %106 = icmp eq i32 %73, %65\l  br i1 %106, label %207, label %71, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5304e90:s0 -> Node0x5302ae0;
	Node0x5304e90:s1 -> Node0x5304310;
	Node0x5306c60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%107:\l107:                                              \l  %108 = phi float [ %204, %107 ], [ %101, %99 ]\l  %109 = phi i32 [ %205, %107 ], [ %102, %99 ]\l  %110 = add i32 %77, %109\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %114 = add i32 %80, %109\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %115\l  %117 = load i8, i8 addrspace(1)* %116, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %118 = uitofp i8 %117 to float\l  %119 = fmul contract float %113, %118\l  %120 = fadd contract float %108, %119\l  %121 = add i32 %109, 1\l  %122 = add i32 %77, %121\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %126 = add i32 %80, %121\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %127\l  %129 = load i8, i8 addrspace(1)* %128, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %130 = uitofp i8 %129 to float\l  %131 = fmul contract float %125, %130\l  %132 = fadd contract float %120, %131\l  %133 = add i32 %109, 2\l  %134 = add i32 %77, %133\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %138 = add i32 %80, %133\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %139\l  %141 = load i8, i8 addrspace(1)* %140, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %142 = uitofp i8 %141 to float\l  %143 = fmul contract float %137, %142\l  %144 = fadd contract float %132, %143\l  %145 = add i32 %109, 3\l  %146 = add i32 %77, %145\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %150 = add i32 %80, %145\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %151\l  %153 = load i8, i8 addrspace(1)* %152, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %154 = uitofp i8 %153 to float\l  %155 = fmul contract float %149, %154\l  %156 = fadd contract float %144, %155\l  %157 = add i32 %109, 4\l  %158 = add i32 %77, %157\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %162 = add i32 %80, %157\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %163\l  %165 = load i8, i8 addrspace(1)* %164, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %166 = uitofp i8 %165 to float\l  %167 = fmul contract float %161, %166\l  %168 = fadd contract float %156, %167\l  %169 = add i32 %109, 5\l  %170 = add i32 %77, %169\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %1, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %174 = add i32 %80, %169\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %175\l  %177 = load i8, i8 addrspace(1)* %176, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %178 = uitofp i8 %177 to float\l  %179 = fmul contract float %173, %178\l  %180 = fadd contract float %168, %179\l  %181 = add i32 %109, 6\l  %182 = add i32 %77, %181\l  %183 = sext i32 %182 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %1, i64 %183\l  %185 = load float, float addrspace(1)* %184, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %186 = add i32 %80, %181\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %187\l  %189 = load i8, i8 addrspace(1)* %188, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %190 = uitofp i8 %189 to float\l  %191 = fmul contract float %185, %190\l  %192 = fadd contract float %180, %191\l  %193 = add i32 %109, 7\l  %194 = add i32 %77, %193\l  %195 = sext i32 %194 to i64\l  %196 = getelementptr inbounds float, float addrspace(1)* %1, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %198 = add i32 %80, %193\l  %199 = sext i32 %198 to i64\l  %200 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %199\l  %201 = load i8, i8 addrspace(1)* %200, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %202 = uitofp i8 %201 to float\l  %203 = fmul contract float %197, %202\l  %204 = fadd contract float %192, %203\l  %205 = add i32 %109, 8\l  %206 = icmp eq i32 %193, %64\l  br i1 %206, label %103, label %107, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5306c60:s0 -> Node0x5304e90;
	Node0x5306c60:s1 -> Node0x5306c60;
	Node0x5302ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%207:\l207:                                              \l  %208 = phi float [ 0.000000e+00, %49 ], [ 0.000000e+00, %40 ], [\l... 0.000000e+00, %9 ], [ %104, %103 ]\l  %209 = fptoui float %208 to i8\l  %210 = mul nsw i32 %32, %2\l  %211 = add nsw i32 %210, %21\l  %212 = sext i32 %211 to i64\l  %213 = getelementptr inbounds i8, i8 addrspace(1)* %8, i64 %212\l  store i8 %209, i8 addrspace(1)* %213, align 1, !tbaa !21\l  ret void\l}"];
}
