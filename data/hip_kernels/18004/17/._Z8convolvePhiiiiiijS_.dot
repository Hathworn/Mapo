digraph "CFG for '_Z8convolvePhiiiiiijS_' function" {
	label="CFG for '_Z8convolvePhiiiiiijS_' function";

	Node0x4ea4640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !6\l  %19 = mul i32 %10, %15\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add i32 %19, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 16\l  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*\l  %29 = load i32, i32 addrspace(4)* %28, align 8, !tbaa !16\l  %30 = mul i32 %22, %26\l  %31 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %32 = add i32 %30, %31\l  %33 = sdiv i32 %5, 2\l  %34 = sdiv i32 %6, 2\l  %35 = add i32 %33, %3\l  %36 = icmp slt i32 %21, %35\l  %37 = add i32 %34, %4\l  %38 = icmp slt i32 %32, %37\l  %39 = select i1 %36, i1 true, i1 %38\l  br i1 %39, label %208, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4ea4640:s0 -> Node0x4ea8680;
	Node0x4ea4640:s1 -> Node0x4ea8710;
	Node0x4ea8710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%40:\l40:                                               \l  %41 = udiv i32 %18, %15\l  %42 = mul i32 %41, %15\l  %43 = icmp ugt i32 %18, %42\l  %44 = zext i1 %43 to i32\l  %45 = add i32 %41, %44\l  %46 = mul i32 %45, %15\l  %47 = sub i32 %46, %35\l  %48 = icmp ult i32 %21, %47\l  br i1 %48, label %49, label %208\l|{<s0>T|<s1>F}}"];
	Node0x4ea8710:s0 -> Node0x4ea8cb0;
	Node0x4ea8710:s1 -> Node0x4ea8680;
	Node0x4ea8cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%49:\l49:                                               \l  %50 = udiv i32 %29, %26\l  %51 = mul i32 %50, %26\l  %52 = icmp ugt i32 %29, %51\l  %53 = zext i1 %52 to i32\l  %54 = add i32 %50, %53\l  %55 = mul i32 %54, %26\l  %56 = sub i32 %55, %37\l  %57 = icmp uge i32 %32, %56\l  %58 = icmp slt i32 %6, -1\l  %59 = select i1 %57, i1 true, i1 %58\l  br i1 %59, label %208, label %60\l|{<s0>T|<s1>F}}"];
	Node0x4ea8cb0:s0 -> Node0x4ea8680;
	Node0x4ea8cb0:s1 -> Node0x4ea9380;
	Node0x4ea9380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%60:\l60:                                               \l  %61 = sub nsw i32 0, %34\l  %62 = sub nsw i32 0, %33\l  %63 = icmp slt i32 %5, -1\l  %64 = add i32 %33, %7\l  %65 = tail call i32 @llvm.abs.i32(i32 %33, i1 true)\l  %66 = tail call i32 @llvm.abs.i32(i32 %34, i1 true)\l  %67 = add i32 %33, %65\l  %68 = add i32 %67, 1\l  %69 = and i32 %68, 7\l  %70 = icmp eq i32 %69, 0\l  %71 = icmp ult i32 %67, 7\l  br label %72\l}"];
	Node0x4ea9380 -> Node0x4ea9f10;
	Node0x4ea9f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%72:\l72:                                               \l  %73 = phi float [ 0.000000e+00, %60 ], [ %105, %104 ]\l  %74 = phi i32 [ %61, %60 ], [ %106, %104 ]\l  br i1 %63, label %104, label %75\l|{<s0>T|<s1>F}}"];
	Node0x4ea9f10:s0 -> Node0x4eaaa90;
	Node0x4ea9f10:s1 -> Node0x4eaacf0;
	Node0x4eaacf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%75:\l75:                                               \l  %76 = add nsw i32 %74, %34\l  %77 = mul nsw i32 %76, %5\l  %78 = add i32 %64, %77\l  %79 = add nsw i32 %74, %32\l  %80 = mul nsw i32 %79, %1\l  %81 = add i32 %80, %21\l  br i1 %70, label %100, label %82\l|{<s0>T|<s1>F}}"];
	Node0x4eaacf0:s0 -> Node0x4eab190;
	Node0x4eaacf0:s1 -> Node0x4eab1e0;
	Node0x4eab1e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%82:\l82:                                               \l  %83 = phi float [ %96, %82 ], [ %73, %75 ]\l  %84 = phi i32 [ %97, %82 ], [ %62, %75 ]\l  %85 = phi i32 [ %98, %82 ], [ 0, %75 ]\l  %86 = add i32 %78, %84\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %87\l  %89 = load float, float addrspace(4)* %88, align 4, !tbaa !17\l  %90 = add i32 %81, %84\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %91\l  %93 = load i8, i8 addrspace(1)* %92, align 1, !tbaa !21, !amdgpu.noclobber !5\l  %94 = uitofp i8 %93 to float\l  %95 = fmul contract float %89, %94\l  %96 = fadd contract float %83, %95\l  %97 = add i32 %84, 1\l  %98 = add i32 %85, 1\l  %99 = icmp eq i32 %98, %69\l  br i1 %99, label %100, label %82, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4eab1e0:s0 -> Node0x4eab190;
	Node0x4eab1e0:s1 -> Node0x4eab1e0;
	Node0x4eab190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%100:\l100:                                              \l  %101 = phi float [ undef, %75 ], [ %96, %82 ]\l  %102 = phi float [ %73, %75 ], [ %96, %82 ]\l  %103 = phi i32 [ %62, %75 ], [ %97, %82 ]\l  br i1 %71, label %104, label %108\l|{<s0>T|<s1>F}}"];
	Node0x4eab190:s0 -> Node0x4eaaa90;
	Node0x4eab190:s1 -> Node0x4eac870;
	Node0x4eaaa90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%104:\l104:                                              \l  %105 = phi float [ %73, %72 ], [ %101, %100 ], [ %205, %108 ]\l  %106 = add i32 %74, 1\l  %107 = icmp eq i32 %74, %66\l  br i1 %107, label %208, label %72, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4eaaa90:s0 -> Node0x4ea8680;
	Node0x4eaaa90:s1 -> Node0x4ea9f10;
	Node0x4eac870 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%108:\l108:                                              \l  %109 = phi float [ %205, %108 ], [ %102, %100 ]\l  %110 = phi i32 [ %206, %108 ], [ %103, %100 ]\l  %111 = add i32 %78, %110\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %112\l  %114 = load float, float addrspace(4)* %113, align 4, !tbaa !17\l  %115 = add i32 %81, %110\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %116\l  %118 = load i8, i8 addrspace(1)* %117, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %119 = uitofp i8 %118 to float\l  %120 = fmul contract float %114, %119\l  %121 = fadd contract float %109, %120\l  %122 = add i32 %110, 1\l  %123 = add i32 %78, %122\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %124\l  %126 = load float, float addrspace(4)* %125, align 4, !tbaa !17\l  %127 = add i32 %81, %122\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %128\l  %130 = load i8, i8 addrspace(1)* %129, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %131 = uitofp i8 %130 to float\l  %132 = fmul contract float %126, %131\l  %133 = fadd contract float %121, %132\l  %134 = add i32 %110, 2\l  %135 = add i32 %78, %134\l  %136 = zext i32 %135 to i64\l  %137 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %136\l  %138 = load float, float addrspace(4)* %137, align 4, !tbaa !17\l  %139 = add i32 %81, %134\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %140\l  %142 = load i8, i8 addrspace(1)* %141, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %143 = uitofp i8 %142 to float\l  %144 = fmul contract float %138, %143\l  %145 = fadd contract float %133, %144\l  %146 = add i32 %110, 3\l  %147 = add i32 %78, %146\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %148\l  %150 = load float, float addrspace(4)* %149, align 4, !tbaa !17\l  %151 = add i32 %81, %146\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %152\l  %154 = load i8, i8 addrspace(1)* %153, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %155 = uitofp i8 %154 to float\l  %156 = fmul contract float %150, %155\l  %157 = fadd contract float %145, %156\l  %158 = add i32 %110, 4\l  %159 = add i32 %78, %158\l  %160 = zext i32 %159 to i64\l  %161 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %160\l  %162 = load float, float addrspace(4)* %161, align 4, !tbaa !17\l  %163 = add i32 %81, %158\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %164\l  %166 = load i8, i8 addrspace(1)* %165, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %167 = uitofp i8 %166 to float\l  %168 = fmul contract float %162, %167\l  %169 = fadd contract float %157, %168\l  %170 = add i32 %110, 5\l  %171 = add i32 %78, %170\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %172\l  %174 = load float, float addrspace(4)* %173, align 4, !tbaa !17\l  %175 = add i32 %81, %170\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %176\l  %178 = load i8, i8 addrspace(1)* %177, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %179 = uitofp i8 %178 to float\l  %180 = fmul contract float %174, %179\l  %181 = fadd contract float %169, %180\l  %182 = add i32 %110, 6\l  %183 = add i32 %78, %182\l  %184 = zext i32 %183 to i64\l  %185 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %184\l  %186 = load float, float addrspace(4)* %185, align 4, !tbaa !17\l  %187 = add i32 %81, %182\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %188\l  %190 = load i8, i8 addrspace(1)* %189, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %191 = uitofp i8 %190 to float\l  %192 = fmul contract float %186, %191\l  %193 = fadd contract float %181, %192\l  %194 = add i32 %110, 7\l  %195 = add i32 %78, %194\l  %196 = zext i32 %195 to i64\l  %197 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @mask, i64 0, i64 %196\l  %198 = load float, float addrspace(4)* %197, align 4, !tbaa !17\l  %199 = add i32 %81, %194\l  %200 = sext i32 %199 to i64\l  %201 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %200\l  %202 = load i8, i8 addrspace(1)* %201, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %203 = uitofp i8 %202 to float\l  %204 = fmul contract float %198, %203\l  %205 = fadd contract float %193, %204\l  %206 = add i32 %110, 8\l  %207 = icmp eq i32 %194, %65\l  br i1 %207, label %104, label %108, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4eac870:s0 -> Node0x4eaaa90;
	Node0x4eac870:s1 -> Node0x4eac870;
	Node0x4ea8680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%208:\l208:                                              \l  %209 = phi float [ 0.000000e+00, %49 ], [ 0.000000e+00, %40 ], [\l... 0.000000e+00, %9 ], [ %105, %104 ]\l  %210 = fptoui float %209 to i8\l  %211 = mul nsw i32 %32, %1\l  %212 = add nsw i32 %211, %21\l  %213 = sext i32 %212 to i64\l  %214 = getelementptr inbounds i8, i8 addrspace(1)* %8, i64 %213\l  store i8 %210, i8 addrspace(1)* %214, align 1, !tbaa !21\l  ret void\l}"];
}
