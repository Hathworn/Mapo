digraph "CFG for '_Z8multiplyPfS_S_ii' function" {
	label="CFG for '_Z8multiplyPfS_S_ii' function";

	Node0x61b3580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%5:\l  %6 = addrspacecast float addrspace(1)* %0 to float*\l  %7 = addrspacecast float addrspace(1)* %1 to float*\l  store float* %6, float* addrspace(3)* @_ZZ8multiplyPfS_S_iiE1A, align 8,\l... !tbaa !4\l  store float* %7, float* addrspace(3)* @_ZZ8multiplyPfS_S_iiE1B, align 8,\l... !tbaa !4\l  %8 = mul nsw i32 %3, %3\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !8, !invariant.load !9\l  %13 = zext i16 %12 to i32\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = mul i32 %14, %13\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !10\l  %17 = add i32 %15, %16\l  %18 = mul i32 %17, %8\l  %19 = udiv i32 %18, %4\l  %20 = add nsw i32 %4, -1\l  %21 = icmp eq i32 %17, %20\l  br i1 %21, label %26, label %22\l|{<s0>T|<s1>F}}"];
	Node0x61b3580:s0 -> Node0x61b6050;
	Node0x61b3580:s1 -> Node0x61b60e0;
	Node0x61b60e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%22:\l22:                                               \l  %23 = add i32 %17, 1\l  %24 = mul i32 %23, %8\l  %25 = udiv i32 %24, %4\l  br label %26\l}"];
	Node0x61b60e0 -> Node0x61b6050;
	Node0x61b6050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%26:\l26:                                               \l  %27 = phi i32 [ %25, %22 ], [ %8, %5 ]\l  %28 = freeze i32 %19\l  %29 = icmp slt i32 %28, %27\l  br i1 %29, label %30, label %198\l|{<s0>T|<s1>F}}"];
	Node0x61b6050:s0 -> Node0x61b6620;
	Node0x61b6050:s1 -> Node0x61b6670;
	Node0x61b6620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%30:\l30:                                               \l  %31 = icmp sgt i32 %3, 0\l  %32 = and i32 %3, 7\l  %33 = icmp ult i32 %3, 8\l  %34 = and i32 %3, -8\l  %35 = icmp eq i32 %32, 0\l  br label %36\l}"];
	Node0x61b6620 -> Node0x61b6c20;
	Node0x61b6c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%36:\l36:                                               \l  %37 = phi i32 [ %28, %30 ], [ %196, %192 ]\l  br i1 %31, label %38, label %192\l|{<s0>T|<s1>F}}"];
	Node0x61b6c20:s0 -> Node0x61b6e50;
	Node0x61b6c20:s1 -> Node0x61b6d10;
	Node0x61b6e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%38:\l38:                                               \l  %39 = srem i32 %37, %3\l  %40 = sub i32 %37, %39\l  br i1 %33, label %167, label %41\l|{<s0>T|<s1>F}}"];
	Node0x61b6e50:s0 -> Node0x61b70b0;
	Node0x61b6e50:s1 -> Node0x61b7100;
	Node0x61b7100 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%41:\l41:                                               \l  %42 = phi float [ %163, %41 ], [ 0.000000e+00, %38 ]\l  %43 = phi i32 [ %164, %41 ], [ 0, %38 ]\l  %44 = phi i32 [ %165, %41 ], [ 0, %38 ]\l  %45 = add nsw i32 %40, %43\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = addrspacecast float addrspace(1)* %47 to float*\l  %49 = load float, float* %48, align 4, !tbaa !11\l  %50 = mul nsw i32 %43, %3\l  %51 = add nsw i32 %50, %37\l  %52 = sub i32 %51, %40\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = addrspacecast float addrspace(1)* %54 to float*\l  %56 = load float, float* %55, align 4, !tbaa !11\l  %57 = fmul contract float %49, %56\l  %58 = fadd contract float %42, %57\l  %59 = or i32 %43, 1\l  %60 = add nsw i32 %40, %59\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = addrspacecast float addrspace(1)* %62 to float*\l  %64 = load float, float* %63, align 4, !tbaa !11\l  %65 = mul nsw i32 %59, %3\l  %66 = add nsw i32 %65, %37\l  %67 = sub i32 %66, %40\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = addrspacecast float addrspace(1)* %69 to float*\l  %71 = load float, float* %70, align 4, !tbaa !11\l  %72 = fmul contract float %64, %71\l  %73 = fadd contract float %58, %72\l  %74 = or i32 %43, 2\l  %75 = add nsw i32 %40, %74\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = addrspacecast float addrspace(1)* %77 to float*\l  %79 = load float, float* %78, align 4, !tbaa !11\l  %80 = mul nsw i32 %74, %3\l  %81 = add nsw i32 %80, %37\l  %82 = sub i32 %81, %40\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = addrspacecast float addrspace(1)* %84 to float*\l  %86 = load float, float* %85, align 4, !tbaa !11\l  %87 = fmul contract float %79, %86\l  %88 = fadd contract float %73, %87\l  %89 = or i32 %43, 3\l  %90 = add nsw i32 %40, %89\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = addrspacecast float addrspace(1)* %92 to float*\l  %94 = load float, float* %93, align 4, !tbaa !11\l  %95 = mul nsw i32 %89, %3\l  %96 = add nsw i32 %95, %37\l  %97 = sub i32 %96, %40\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = addrspacecast float addrspace(1)* %99 to float*\l  %101 = load float, float* %100, align 4, !tbaa !11\l  %102 = fmul contract float %94, %101\l  %103 = fadd contract float %88, %102\l  %104 = or i32 %43, 4\l  %105 = add nsw i32 %40, %104\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = addrspacecast float addrspace(1)* %107 to float*\l  %109 = load float, float* %108, align 4, !tbaa !11\l  %110 = mul nsw i32 %104, %3\l  %111 = add nsw i32 %110, %37\l  %112 = sub i32 %111, %40\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = addrspacecast float addrspace(1)* %114 to float*\l  %116 = load float, float* %115, align 4, !tbaa !11\l  %117 = fmul contract float %109, %116\l  %118 = fadd contract float %103, %117\l  %119 = or i32 %43, 5\l  %120 = add nsw i32 %40, %119\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = addrspacecast float addrspace(1)* %122 to float*\l  %124 = load float, float* %123, align 4, !tbaa !11\l  %125 = mul nsw i32 %119, %3\l  %126 = add nsw i32 %125, %37\l  %127 = sub i32 %126, %40\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %130 = addrspacecast float addrspace(1)* %129 to float*\l  %131 = load float, float* %130, align 4, !tbaa !11\l  %132 = fmul contract float %124, %131\l  %133 = fadd contract float %118, %132\l  %134 = or i32 %43, 6\l  %135 = add nsw i32 %40, %134\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = addrspacecast float addrspace(1)* %137 to float*\l  %139 = load float, float* %138, align 4, !tbaa !11\l  %140 = mul nsw i32 %134, %3\l  %141 = add nsw i32 %140, %37\l  %142 = sub i32 %141, %40\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %1, i64 %143\l  %145 = addrspacecast float addrspace(1)* %144 to float*\l  %146 = load float, float* %145, align 4, !tbaa !11\l  %147 = fmul contract float %139, %146\l  %148 = fadd contract float %133, %147\l  %149 = or i32 %43, 7\l  %150 = add nsw i32 %40, %149\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %151\l  %153 = addrspacecast float addrspace(1)* %152 to float*\l  %154 = load float, float* %153, align 4, !tbaa !11\l  %155 = mul nsw i32 %149, %3\l  %156 = add nsw i32 %155, %37\l  %157 = sub i32 %156, %40\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %1, i64 %158\l  %160 = addrspacecast float addrspace(1)* %159 to float*\l  %161 = load float, float* %160, align 4, !tbaa !11\l  %162 = fmul contract float %154, %161\l  %163 = fadd contract float %148, %162\l  %164 = add nuw nsw i32 %43, 8\l  %165 = add i32 %44, 8\l  %166 = icmp eq i32 %165, %34\l  br i1 %166, label %167, label %41, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x61b7100:s0 -> Node0x61b70b0;
	Node0x61b7100:s1 -> Node0x61b7100;
	Node0x61b70b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%167:\l167:                                              \l  %168 = phi float [ undef, %38 ], [ %163, %41 ]\l  %169 = phi float [ 0.000000e+00, %38 ], [ %163, %41 ]\l  %170 = phi i32 [ 0, %38 ], [ %164, %41 ]\l  br i1 %35, label %192, label %171\l|{<s0>T|<s1>F}}"];
	Node0x61b70b0:s0 -> Node0x61b6d10;
	Node0x61b70b0:s1 -> Node0x61bd120;
	Node0x61bd120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%171:\l171:                                              \l  %172 = phi float [ %188, %171 ], [ %169, %167 ]\l  %173 = phi i32 [ %189, %171 ], [ %170, %167 ]\l  %174 = phi i32 [ %190, %171 ], [ 0, %167 ]\l  %175 = add nsw i32 %40, %173\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %0, i64 %176\l  %178 = addrspacecast float addrspace(1)* %177 to float*\l  %179 = load float, float* %178, align 4, !tbaa !11\l  %180 = mul nsw i32 %173, %3\l  %181 = add nsw i32 %180, %37\l  %182 = sub i32 %181, %40\l  %183 = sext i32 %182 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %1, i64 %183\l  %185 = addrspacecast float addrspace(1)* %184 to float*\l  %186 = load float, float* %185, align 4, !tbaa !11\l  %187 = fmul contract float %179, %186\l  %188 = fadd contract float %172, %187\l  %189 = add nuw nsw i32 %173, 1\l  %190 = add i32 %174, 1\l  %191 = icmp eq i32 %190, %32\l  br i1 %191, label %192, label %171, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x61bd120:s0 -> Node0x61b6d10;
	Node0x61bd120:s1 -> Node0x61bd120;
	Node0x61b6d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%192:\l192:                                              \l  %193 = phi float [ 0.000000e+00, %36 ], [ %168, %167 ], [ %188, %171 ]\l  %194 = sext i32 %37 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %2, i64 %194\l  store float %193, float addrspace(1)* %195, align 4, !tbaa !11\l  %196 = add nsw i32 %37, 1\l  %197 = icmp slt i32 %196, %27\l  br i1 %197, label %36, label %198, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x61b6d10:s0 -> Node0x61b6c20;
	Node0x61b6d10:s1 -> Node0x61b6670;
	Node0x61b6670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%198:\l198:                                              \l  ret void\l}"];
}
