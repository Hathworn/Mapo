digraph "CFG for '_Z4dualPfS_PKfddii' function" {
	label="CFG for '_Z4dualPfS_PKfddii' function";

	Node0x46ee340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = mul nsw i32 %24, %5\l  %26 = add nsw i32 %25, %16\l  %27 = add nsw i32 %5, -1\l  %28 = icmp slt i32 %16, %27\l  br i1 %28, label %29, label %39\l|{<s0>T|<s1>F}}"];
	Node0x46ee340:s0 -> Node0x46f1e00;
	Node0x46ee340:s1 -> Node0x46f1e90;
	Node0x46f1e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%29:\l29:                                               \l  %30 = add nsw i32 %26, 1\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %34 = sext i32 %26 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %2, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = fsub contract float %33, %36\l  %38 = fpext float %37 to double\l  br label %39\l}"];
	Node0x46f1e00 -> Node0x46f1e90;
	Node0x46f1e90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi double [ %38, %29 ], [ 0.000000e+00, %7 ]\l  %41 = add nsw i32 %6, -1\l  %42 = icmp slt i32 %24, %41\l  br i1 %42, label %45, label %43\l|{<s0>T|<s1>F}}"];
	Node0x46f1e90:s0 -> Node0x46f3a10;
	Node0x46f1e90:s1 -> Node0x46f3aa0;
	Node0x46f3aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%43:\l43:                                               \l  %44 = sext i32 %26 to i64\l  br label %55\l}"];
	Node0x46f3aa0 -> Node0x46f3c50;
	Node0x46f3a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%45:\l45:                                               \l  %46 = add nsw i32 %26, %5\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %2, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %50 = sext i32 %26 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fsub contract float %49, %52\l  %54 = fpext float %53 to double\l  br label %55\l}"];
	Node0x46f3a10 -> Node0x46f3c50;
	Node0x46f3c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = phi i64 [ %44, %43 ], [ %50, %45 ]\l  %57 = phi double [ 0.000000e+00, %43 ], [ %54, %45 ]\l  %58 = fmul contract double %40, %4\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = fpext float %60 to double\l  %62 = fadd contract double %58, %61\l  %63 = fptrunc double %62 to float\l  store float %63, float addrspace(1)* %59, align 4, !tbaa !7\l  %64 = fmul contract double %57, %4\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %56\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7\l  %67 = fpext float %66 to double\l  %68 = fadd contract double %64, %67\l  %69 = fptrunc double %68 to float\l  store float %69, float addrspace(1)* %65, align 4, !tbaa !7\l  %70 = load float, float addrspace(1)* %59, align 4, !tbaa !7\l  %71 = fmul contract float %70, %70\l  %72 = fmul contract float %69, %69\l  %73 = fadd contract float %71, %72\l  %74 = fcmp olt float %73, 0x39F0000000000000\l  %75 = select i1 %74, float 0x41F0000000000000, float 1.000000e+00\l  %76 = fmul float %73, %75\l  %77 = tail call float @llvm.sqrt.f32(float %76)\l  %78 = bitcast float %77 to i32\l  %79 = add nsw i32 %78, -1\l  %80 = bitcast i32 %79 to float\l  %81 = add nsw i32 %78, 1\l  %82 = bitcast i32 %81 to float\l  %83 = tail call i1 @llvm.amdgcn.class.f32(float %76, i32 608)\l  %84 = select i1 %74, float 0x3EF0000000000000, float 1.000000e+00\l  %85 = fneg float %82\l  %86 = tail call float @llvm.fma.f32(float %85, float %77, float %76)\l  %87 = fcmp ogt float %86, 0.000000e+00\l  %88 = fneg float %80\l  %89 = tail call float @llvm.fma.f32(float %88, float %77, float %76)\l  %90 = fcmp ole float %89, 0.000000e+00\l  %91 = select i1 %90, float %80, float %77\l  %92 = select i1 %87, float %82, float %91\l  %93 = fmul float %84, %92\l  %94 = select i1 %83, float %76, float %93\l  %95 = fpext float %94 to double\l  %96 = fdiv contract double %95, %3\l  %97 = fptrunc double %96 to float\l  %98 = tail call float @llvm.maxnum.f32(float %97, float 1.000000e+00)\l  %99 = fdiv contract float %70, %98\l  store float %99, float addrspace(1)* %59, align 4, !tbaa !7\l  %100 = load float, float addrspace(1)* %65, align 4, !tbaa !7\l  %101 = fdiv contract float %100, %98\l  store float %101, float addrspace(1)* %65, align 4, !tbaa !7\l  ret void\l}"];
}
