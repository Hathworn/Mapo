digraph "CFG for '_Z11extrapolatePfS_S_fiii' function" {
	label="CFG for '_Z11extrapolatePfS_S_fiii' function";

	Node0x5f526a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %10, %14\l  %16 = add i32 %15, %8\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = add i32 %23, %17\l  %25 = icmp slt i32 %16, %4\l  %26 = icmp slt i32 %24, %5\l  %27 = select i1 %25, i1 %26, i1 false\l  %28 = icmp sgt i32 %6, 0\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %123\l|{<s0>T|<s1>F}}"];
	Node0x5f526a0:s0 -> Node0x5f56280;
	Node0x5f526a0:s1 -> Node0x5f56310;
	Node0x5f56280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = and i32 %6, 3\l  %32 = icmp ult i32 %6, 4\l  br i1 %32, label %100, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5f56280:s0 -> Node0x5f544e0;
	Node0x5f56280:s1 -> Node0x5f54530;
	Node0x5f54530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %6, -4\l  br label %35\l}"];
	Node0x5f54530 -> Node0x5f56920;
	Node0x5f56920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%35:\l35:                                               \l  %36 = phi i32 [ 0, %33 ], [ %97, %35 ]\l  %37 = phi i32 [ 0, %33 ], [ %98, %35 ]\l  %38 = mul i32 %36, %5\l  %39 = add i32 %38, %24\l  %40 = mul i32 %39, %4\l  %41 = add i32 %40, %16\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %2, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %42\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7\l  %47 = fsub contract float %44, %46\l  %48 = fmul contract float %47, %3\l  %49 = fadd contract float %44, %48\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  store float %49, float addrspace(1)* %50, align 4, !tbaa !7\l  %51 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  store float %51, float addrspace(1)* %45, align 4, !tbaa !7\l  %52 = or i32 %36, 1\l  %53 = mul i32 %52, %5\l  %54 = add i32 %53, %24\l  %55 = mul i32 %54, %4\l  %56 = add i32 %55, %16\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7\l  %62 = fsub contract float %59, %61\l  %63 = fmul contract float %62, %3\l  %64 = fadd contract float %59, %63\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  store float %64, float addrspace(1)* %65, align 4, !tbaa !7\l  %66 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  store float %66, float addrspace(1)* %60, align 4, !tbaa !7\l  %67 = or i32 %36, 2\l  %68 = mul i32 %67, %5\l  %69 = add i32 %68, %24\l  %70 = mul i32 %69, %4\l  %71 = add i32 %70, %16\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %2, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7\l  %77 = fsub contract float %74, %76\l  %78 = fmul contract float %77, %3\l  %79 = fadd contract float %74, %78\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  store float %79, float addrspace(1)* %80, align 4, !tbaa !7\l  %81 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  store float %81, float addrspace(1)* %75, align 4, !tbaa !7\l  %82 = or i32 %36, 3\l  %83 = mul i32 %82, %5\l  %84 = add i32 %83, %24\l  %85 = mul i32 %84, %4\l  %86 = add i32 %85, %16\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %2, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7\l  %92 = fsub contract float %89, %91\l  %93 = fmul contract float %92, %3\l  %94 = fadd contract float %89, %93\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  store float %94, float addrspace(1)* %95, align 4, !tbaa !7\l  %96 = load float, float addrspace(1)* %88, align 4, !tbaa !7\l  store float %96, float addrspace(1)* %90, align 4, !tbaa !7\l  %97 = add nuw nsw i32 %36, 4\l  %98 = add i32 %37, 4\l  %99 = icmp eq i32 %98, %34\l  br i1 %99, label %100, label %35, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5f56920:s0 -> Node0x5f544e0;
	Node0x5f56920:s1 -> Node0x5f56920;
	Node0x5f544e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%100:\l100:                                              \l  %101 = phi i32 [ 0, %30 ], [ %97, %35 ]\l  %102 = icmp eq i32 %31, 0\l  br i1 %102, label %123, label %103\l|{<s0>T|<s1>F}}"];
	Node0x5f544e0:s0 -> Node0x5f56310;
	Node0x5f544e0:s1 -> Node0x5f59e90;
	Node0x5f59e90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%103:\l103:                                              \l  %104 = phi i32 [ %120, %103 ], [ %101, %100 ]\l  %105 = phi i32 [ %121, %103 ], [ 0, %100 ]\l  %106 = mul i32 %104, %5\l  %107 = add i32 %106, %24\l  %108 = mul i32 %107, %4\l  %109 = add i32 %108, %16\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7\l  %115 = fsub contract float %112, %114\l  %116 = fmul contract float %115, %3\l  %117 = fadd contract float %112, %116\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  store float %117, float addrspace(1)* %118, align 4, !tbaa !7\l  %119 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  store float %119, float addrspace(1)* %113, align 4, !tbaa !7\l  %120 = add nuw nsw i32 %104, 1\l  %121 = add i32 %105, 1\l  %122 = icmp eq i32 %121, %31\l  br i1 %122, label %123, label %103, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f59e90:s0 -> Node0x5f56310;
	Node0x5f59e90:s1 -> Node0x5f59e90;
	Node0x5f56310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%123:\l123:                                              \l  ret void\l}"];
}
