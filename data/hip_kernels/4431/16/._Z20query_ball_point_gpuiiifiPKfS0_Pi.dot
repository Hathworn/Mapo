digraph "CFG for '_Z20query_ball_point_gpuiiifiPKfS0_Pi' function" {
	label="CFG for '_Z20query_ball_point_gpuiiifiPKfS0_Pi' function";

	Node0x56f5db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = mul nuw nsw i32 %9, 3\l  %11 = mul i32 %10, %1\l  %12 = sext i32 %11 to i64\l  %13 = getelementptr inbounds float, float addrspace(1)* %5, i64 %12\l  %14 = mul i32 %10, %2\l  %15 = sext i32 %14 to i64\l  %16 = getelementptr inbounds float, float addrspace(1)* %6, i64 %15\l  %17 = mul i32 %9, %2\l  %18 = mul i32 %17, %4\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %19\l  %21 = icmp sgt i32 %2, 0\l  br i1 %21, label %22, label %48\l|{<s0>T|<s1>F}}"];
	Node0x56f5db0:s0 -> Node0x56f78e0;
	Node0x56f5db0:s1 -> Node0x56f7970;
	Node0x56f78e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%22:\l22:                                               \l  %23 = icmp slt i32 %1, 1\l  %24 = icmp eq i32 %4, 0\l  %25 = select i1 %23, i1 true, i1 %24\l  %26 = icmp slt i32 %4, 1\l  %27 = add i32 %4, -1\l  %28 = and i32 %4, 7\l  %29 = icmp ult i32 %27, 7\l  %30 = and i32 %4, -8\l  %31 = icmp eq i32 %28, 0\l  br label %32\l}"];
	Node0x56f78e0 -> Node0x56f80d0;
	Node0x56f80d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = phi i32 [ 0, %22 ], [ %159, %158 ]\l  br i1 %25, label %158, label %34\l|{<s0>T|<s1>F}}"];
	Node0x56f80d0:s0 -> Node0x56f75a0;
	Node0x56f80d0:s1 -> Node0x56f8400;
	Node0x56f8400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = mul nsw i32 %33, 3\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %16, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %39 = add nuw nsw i32 %35, 1\l  %40 = zext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %16, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %43 = add nuw nsw i32 %35, 2\l  %44 = zext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %16, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %47 = mul nsw i32 %33, %4\l  br label %49\l}"];
	Node0x56f8400 -> Node0x56f9bc0;
	Node0x56f7970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%48:\l48:                                               \l  ret void\l}"];
	Node0x56f9bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%49:\l49:                                               \l  %50 = phi i32 [ 0, %34 ], [ %153, %152 ]\l  %51 = phi i32 [ 0, %34 ], [ %154, %152 ]\l  %52 = mul nuw nsw i32 %51, 3\l  %53 = zext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %13, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %56 = add nuw nsw i32 %52, 1\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %13, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %60 = add nuw nsw i32 %52, 2\l  %61 = zext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %13, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %64 = fsub contract float %38, %55\l  %65 = fmul contract float %64, %64\l  %66 = fsub contract float %42, %59\l  %67 = fmul contract float %66, %66\l  %68 = fadd contract float %65, %67\l  %69 = fsub contract float %46, %63\l  %70 = fmul contract float %69, %69\l  %71 = fadd contract float %68, %70\l  %72 = fcmp olt float %71, 0x39F0000000000000\l  %73 = select i1 %72, float 0x41F0000000000000, float 1.000000e+00\l  %74 = fmul float %71, %73\l  %75 = tail call float @llvm.sqrt.f32(float %74)\l  %76 = bitcast float %75 to i32\l  %77 = add nsw i32 %76, -1\l  %78 = bitcast i32 %77 to float\l  %79 = add nsw i32 %76, 1\l  %80 = bitcast i32 %79 to float\l  %81 = tail call i1 @llvm.amdgcn.class.f32(float %74, i32 608)\l  %82 = select i1 %72, float 0x3EF0000000000000, float 1.000000e+00\l  %83 = fneg float %80\l  %84 = tail call float @llvm.fma.f32(float %83, float %75, float %74)\l  %85 = fcmp ogt float %84, 0.000000e+00\l  %86 = fneg float %78\l  %87 = tail call float @llvm.fma.f32(float %86, float %75, float %74)\l  %88 = fcmp ole float %87, 0.000000e+00\l  %89 = select i1 %88, float %78, float %75\l  %90 = select i1 %85, float %80, float %89\l  %91 = fmul float %82, %90\l  %92 = select i1 %81, float %74, float %91\l  %93 = tail call float @llvm.maxnum.f32(float %92, float 0x3BC79CA100000000)\l  %94 = fcmp contract olt float %93, %3\l  br i1 %94, label %95, label %152\l|{<s0>T|<s1>F}}"];
	Node0x56f9bc0:s0 -> Node0x56fcd00;
	Node0x56f9bc0:s1 -> Node0x56f9d10;
	Node0x56fcd00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%95:\l95:                                               \l  %96 = icmp ne i32 %50, 0\l  %97 = select i1 %96, i1 true, i1 %26\l  br i1 %97, label %147, label %98\l|{<s0>T|<s1>F}}"];
	Node0x56fcd00:s0 -> Node0x56fcf80;
	Node0x56fcd00:s1 -> Node0x56fcfd0;
	Node0x56fcfd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%98:\l98:                                               \l  br i1 %29, label %136, label %99\l|{<s0>T|<s1>F}}"];
	Node0x56fcfd0:s0 -> Node0x56fd110;
	Node0x56fcfd0:s1 -> Node0x56fd160;
	Node0x56fd160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%99:\l99:                                               \l  %100 = phi i32 [ %133, %99 ], [ 0, %98 ]\l  %101 = phi i32 [ %134, %99 ], [ 0, %98 ]\l  %102 = add nsw i32 %100, %47\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %103\l  store i32 %51, i32 addrspace(1)* %104, align 4, !tbaa !10\l  %105 = or i32 %100, 1\l  %106 = add nsw i32 %105, %47\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %107\l  store i32 %51, i32 addrspace(1)* %108, align 4, !tbaa !10\l  %109 = or i32 %100, 2\l  %110 = add nsw i32 %109, %47\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %111\l  store i32 %51, i32 addrspace(1)* %112, align 4, !tbaa !10\l  %113 = or i32 %100, 3\l  %114 = add nsw i32 %113, %47\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %115\l  store i32 %51, i32 addrspace(1)* %116, align 4, !tbaa !10\l  %117 = or i32 %100, 4\l  %118 = add nsw i32 %117, %47\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %119\l  store i32 %51, i32 addrspace(1)* %120, align 4, !tbaa !10\l  %121 = or i32 %100, 5\l  %122 = add nsw i32 %121, %47\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %123\l  store i32 %51, i32 addrspace(1)* %124, align 4, !tbaa !10\l  %125 = or i32 %100, 6\l  %126 = add nsw i32 %125, %47\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %127\l  store i32 %51, i32 addrspace(1)* %128, align 4, !tbaa !10\l  %129 = or i32 %100, 7\l  %130 = add nsw i32 %129, %47\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %131\l  store i32 %51, i32 addrspace(1)* %132, align 4, !tbaa !10\l  %133 = add nuw nsw i32 %100, 8\l  %134 = add i32 %101, 8\l  %135 = icmp eq i32 %134, %30\l  br i1 %135, label %136, label %99, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x56fd160:s0 -> Node0x56fd110;
	Node0x56fd160:s1 -> Node0x56fd160;
	Node0x56fd110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%136:\l136:                                              \l  %137 = phi i32 [ 0, %98 ], [ %133, %99 ]\l  br i1 %31, label %147, label %138\l|{<s0>T|<s1>F}}"];
	Node0x56fd110:s0 -> Node0x56fcf80;
	Node0x56fd110:s1 -> Node0x56ff9f0;
	Node0x56ff9f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%138:\l138:                                              \l  %139 = phi i32 [ %144, %138 ], [ %137, %136 ]\l  %140 = phi i32 [ %145, %138 ], [ 0, %136 ]\l  %141 = add nsw i32 %139, %47\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %142\l  store i32 %51, i32 addrspace(1)* %143, align 4, !tbaa !10\l  %144 = add nuw nsw i32 %139, 1\l  %145 = add i32 %140, 1\l  %146 = icmp eq i32 %145, %28\l  br i1 %146, label %147, label %138, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x56ff9f0:s0 -> Node0x56fcf80;
	Node0x56ff9f0:s1 -> Node0x56ff9f0;
	Node0x56fcf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%147:\l147:                                              \l  %148 = add nsw i32 %50, %47\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds i32, i32 addrspace(1)* %20, i64 %149\l  store i32 %51, i32 addrspace(1)* %150, align 4, !tbaa !10\l  %151 = add nsw i32 %50, 1\l  br label %152\l}"];
	Node0x56fcf80 -> Node0x56f9d10;
	Node0x56f9d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%152:\l152:                                              \l  %153 = phi i32 [ %151, %147 ], [ %50, %49 ]\l  %154 = add nuw nsw i32 %51, 1\l  %155 = icmp sge i32 %154, %1\l  %156 = icmp eq i32 %153, %4\l  %157 = select i1 %155, i1 true, i1 %156\l  br i1 %157, label %158, label %49, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x56f9d10:s0 -> Node0x56f75a0;
	Node0x56f9d10:s1 -> Node0x56f9bc0;
	Node0x56f75a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%158:\l158:                                              \l  %159 = add nuw nsw i32 %33, 1\l  %160 = icmp eq i32 %159, %2\l  br i1 %160, label %48, label %32, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x56f75a0:s0 -> Node0x56f7970;
	Node0x56f75a0:s1 -> Node0x56f80d0;
}
