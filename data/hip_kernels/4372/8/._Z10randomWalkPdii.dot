digraph "CFG for '_Z10randomWalkPdii' function" {
	label="CFG for '_Z10randomWalkPdii' function";

	Node0x5876110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%3:\l  store double 0.000000e+00, double addrspace(1)* %0, align 8, !tbaa !4\l  %4 = icmp sgt i32 %2, 1\l  br i1 %4, label %5, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5876110:s0 -> Node0x5877e40;
	Node0x5876110:s1 -> Node0x5877ed0;
	Node0x5877e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%5:\l5:                                                \l  %6 = sitofp i32 %1 to double\l  %7 = sitofp i32 %2 to double\l  %8 = fdiv contract double %6, %7\l  %9 = fcmp olt double %8, 0x1000000000000000\l  %10 = select i1 %9, double 0x4FF0000000000000, double 1.000000e+00\l  %11 = fmul double %8, %10\l  %12 = tail call double @llvm.amdgcn.rsq.f64(double %11)\l  %13 = fmul double %11, %12\l  %14 = fmul double %12, 5.000000e-01\l  %15 = fneg double %14\l  %16 = tail call double @llvm.fma.f64(double %15, double %13, double\l... 5.000000e-01)\l  %17 = tail call double @llvm.fma.f64(double %14, double %16, double %14)\l  %18 = tail call double @llvm.fma.f64(double %13, double %16, double %13)\l  %19 = fneg double %18\l  %20 = tail call double @llvm.fma.f64(double %19, double %18, double %11)\l  %21 = tail call double @llvm.fma.f64(double %20, double %17, double %18)\l  %22 = fneg double %21\l  %23 = tail call double @llvm.fma.f64(double %22, double %21, double %11)\l  %24 = tail call double @llvm.fma.f64(double %23, double %17, double %21)\l  %25 = select i1 %9, double 0x37F0000000000000, double 1.000000e+00\l  %26 = fmul double %25, %24\l  %27 = fcmp oeq double %11, 0.000000e+00\l  %28 = fcmp oeq double %11, 0x7FF0000000000000\l  %29 = or i1 %27, %28\l  %30 = select i1 %29, double %11, double %26\l  br label %32\l}"];
	Node0x5877e40 -> Node0x5879730;
	Node0x5877ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%31:\l31:                                               \l  ret void\l}"];
	Node0x5879730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%32:\l32:                                               \l  %33 = phi i32 [ 1, %5 ], [ %272, %254 ]\l  %34 = phi i32 [ 485462757, %5 ], [ %262, %254 ]\l  %35 = phi i32 [ -1836744730, %5 ], [ %261, %254 ]\l  %36 = phi i32 [ 0, %5 ], [ %260, %254 ]\l  %37 = phi i32 [ -1894485380, %5 ], [ %259, %254 ]\l  %38 = phi double [ undef, %5 ], [ %258, %254 ]\l  %39 = phi i32 [ -1719071262, %5 ], [ %257, %254 ]\l  %40 = phi i32 [ -2018044632, %5 ], [ %256, %254 ]\l  %41 = phi i32 [ -1452303100, %5 ], [ %255, %254 ]\l  %42 = icmp eq i32 %36, 0\l  br i1 %42, label %46, label %43\l|{<s0>T|<s1>F}}"];
	Node0x5879730:s0 -> Node0x587a950;
	Node0x5879730:s1 -> Node0x587a9e0;
	Node0x587a9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%43:\l43:                                               \l  %44 = fptrunc double %38 to float\l  %45 = fpext float %44 to double\l  br label %254\l}"];
	Node0x587a9e0 -> Node0x5878a00;
	Node0x587a950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%46:\l46:                                               \l  %47 = lshr i32 %39, 2\l  %48 = xor i32 %47, %39\l  %49 = shl i32 %35, 4\l  %50 = shl i32 %48, 1\l  %51 = xor i32 %50, %49\l  %52 = xor i32 %51, %48\l  %53 = xor i32 %52, %35\l  %54 = add i32 %34, 362437\l  %55 = add i32 %54, %53\l  %56 = lshr i32 %40, 2\l  %57 = xor i32 %56, %40\l  %58 = shl i32 %53, 4\l  %59 = shl i32 %57, 1\l  %60 = xor i32 %59, %58\l  %61 = xor i32 %60, %57\l  %62 = xor i32 %61, %53\l  %63 = add i32 %34, 724874\l  %64 = add i32 %63, %62\l  %65 = lshr i32 %41, 2\l  %66 = xor i32 %65, %41\l  %67 = shl i32 %62, 4\l  %68 = shl i32 %66, 1\l  %69 = xor i32 %68, %67\l  %70 = xor i32 %69, %66\l  %71 = xor i32 %70, %62\l  %72 = add i32 %34, 1087311\l  %73 = add i32 %72, %71\l  %74 = lshr i32 %37, 2\l  %75 = xor i32 %74, %37\l  %76 = shl i32 %71, 4\l  %77 = shl i32 %75, 1\l  %78 = xor i32 %77, %76\l  %79 = xor i32 %78, %75\l  %80 = xor i32 %79, %71\l  %81 = add i32 %34, 1449748\l  %82 = add i32 %80, %81\l  %83 = zext i32 %55 to i64\l  %84 = zext i32 %64 to i64\l  %85 = shl nuw nsw i64 %84, 21\l  %86 = xor i64 %85, %83\l  %87 = uitofp i64 %86 to double\l  %88 = fmul contract double %87, 0x3CA0000000000000\l  %89 = fadd contract double %88, 0x3CA0000000000000\l  %90 = zext i32 %73 to i64\l  %91 = zext i32 %82 to i64\l  %92 = shl nuw nsw i64 %91, 21\l  %93 = xor i64 %92, %90\l  %94 = uitofp i64 %93 to double\l  %95 = fmul contract double %94, 0x3CB0000000000000\l  %96 = fadd contract double %95, 0x3CB0000000000000\l  %97 = tail call double @llvm.amdgcn.frexp.mant.f64(double %89)\l  %98 = fcmp olt double %97, 0x3FE5555555555555\l  %99 = zext i1 %98 to i32\l  %100 = tail call double @llvm.amdgcn.ldexp.f64(double %97, i32 %99)\l  %101 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %89)\l  %102 = sub nsw i32 %101, %99\l  %103 = fadd double %100, -1.000000e+00\l  %104 = fadd double %100, 1.000000e+00\l  %105 = fadd double %104, -1.000000e+00\l  %106 = fsub double %100, %105\l  %107 = tail call double @llvm.amdgcn.rcp.f64(double %104)\l  %108 = fneg double %104\l  %109 = tail call double @llvm.fma.f64(double %108, double %107, double\l... 1.000000e+00)\l  %110 = tail call double @llvm.fma.f64(double %109, double %107, double %107)\l  %111 = tail call double @llvm.fma.f64(double %108, double %110, double\l... 1.000000e+00)\l  %112 = tail call double @llvm.fma.f64(double %111, double %110, double %110)\l  %113 = fmul double %103, %112\l  %114 = fmul double %104, %113\l  %115 = fneg double %114\l  %116 = tail call double @llvm.fma.f64(double %113, double %104, double %115)\l  %117 = tail call double @llvm.fma.f64(double %113, double %106, double %116)\l  %118 = fadd double %114, %117\l  %119 = fsub double %118, %114\l  %120 = fsub double %117, %119\l  %121 = fsub double %103, %118\l  %122 = fsub double %103, %121\l  %123 = fsub double %122, %118\l  %124 = fsub double %123, %120\l  %125 = fadd double %121, %124\l  %126 = fmul double %112, %125\l  %127 = fadd double %113, %126\l  %128 = fsub double %127, %113\l  %129 = fsub double %126, %128\l  %130 = fmul double %127, %127\l  %131 = tail call double @llvm.fma.f64(double %130, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %132 = tail call double @llvm.fma.f64(double %130, double %131, double\l... 0x3FC7474DD7F4DF2E)\l  %133 = tail call double @llvm.fma.f64(double %130, double %132, double\l... 0x3FCC71C016291751)\l  %134 = tail call double @llvm.fma.f64(double %130, double %133, double\l... 0x3FD249249B27ACF1)\l  %135 = tail call double @llvm.fma.f64(double %130, double %134, double\l... 0x3FD99999998EF7B6)\l  %136 = tail call double @llvm.fma.f64(double %130, double %135, double\l... 0x3FE5555555555780)\l  %137 = tail call double @llvm.amdgcn.ldexp.f64(double %127, i32 1)\l  %138 = tail call double @llvm.amdgcn.ldexp.f64(double %129, i32 1)\l  %139 = fmul double %127, %130\l  %140 = fmul double %139, %136\l  %141 = fadd double %137, %140\l  %142 = fsub double %141, %137\l  %143 = fsub double %140, %142\l  %144 = fadd double %138, %143\l  %145 = fadd double %141, %144\l  %146 = fsub double %145, %141\l  %147 = fsub double %144, %146\l  %148 = sitofp i32 %102 to double\l  %149 = fmul double %148, 0x3FE62E42FEFA39EF\l  %150 = fneg double %149\l  %151 = tail call double @llvm.fma.f64(double %148, double\l... 0x3FE62E42FEFA39EF, double %150)\l  %152 = tail call double @llvm.fma.f64(double %148, double\l... 0x3C7ABC9E3B39803F, double %151)\l  %153 = fadd double %149, %152\l  %154 = fsub double %153, %149\l  %155 = fsub double %152, %154\l  %156 = fadd double %153, %145\l  %157 = fsub double %156, %153\l  %158 = fsub double %156, %157\l  %159 = fsub double %153, %158\l  %160 = fsub double %145, %157\l  %161 = fadd double %160, %159\l  %162 = fadd double %155, %147\l  %163 = fsub double %162, %155\l  %164 = fsub double %162, %163\l  %165 = fsub double %155, %164\l  %166 = fsub double %147, %163\l  %167 = fadd double %166, %165\l  %168 = fadd double %162, %161\l  %169 = fadd double %156, %168\l  %170 = fsub double %169, %156\l  %171 = fsub double %168, %170\l  %172 = fadd double %167, %171\l  %173 = fadd double %169, %172\l  %174 = fcmp oeq double %89, 0x7FF0000000000000\l  %175 = select i1 %174, double %89, double %173\l  %176 = fcmp oeq double %89, 0.000000e+00\l  %177 = fmul contract double %175, -2.000000e+00\l  %178 = select i1 %176, double 0x7FF0000000000000, double %177\l  %179 = fcmp olt double %178, 0x1000000000000000\l  %180 = select i1 %179, double 0x4FF0000000000000, double 1.000000e+00\l  %181 = fmul double %178, %180\l  %182 = tail call double @llvm.amdgcn.rsq.f64(double %181)\l  %183 = fmul double %181, %182\l  %184 = fmul double %182, 5.000000e-01\l  %185 = fneg double %184\l  %186 = tail call double @llvm.fma.f64(double %185, double %183, double\l... 5.000000e-01)\l  %187 = tail call double @llvm.fma.f64(double %184, double %186, double %184)\l  %188 = tail call double @llvm.fma.f64(double %183, double %186, double %183)\l  %189 = fneg double %188\l  %190 = tail call double @llvm.fma.f64(double %189, double %188, double %181)\l  %191 = tail call double @llvm.fma.f64(double %190, double %187, double %188)\l  %192 = fneg double %191\l  %193 = tail call double @llvm.fma.f64(double %192, double %191, double %181)\l  %194 = tail call double @llvm.fma.f64(double %193, double %187, double %191)\l  %195 = select i1 %179, double 0x37F0000000000000, double 1.000000e+00\l  %196 = fmul double %195, %194\l  %197 = fcmp oeq double %181, 0.000000e+00\l  %198 = fcmp oeq double %181, 0x7FF0000000000000\l  %199 = or i1 %197, %198\l  %200 = select i1 %199, double %181, double %196\l  %201 = fmul double %96, 5.000000e-01\l  %202 = tail call double @llvm.amdgcn.fract.f64(double %201)\l  %203 = tail call i1 @llvm.amdgcn.class.f64(double %201, i32 516)\l  %204 = fmul double %202, 2.000000e+00\l  %205 = select i1 %203, double 0.000000e+00, double %204\l  %206 = fcmp ogt double %96, 1.000000e+00\l  %207 = select i1 %206, double %205, double %96\l  %208 = fmul double %207, 2.000000e+00\l  %209 = tail call double @llvm.rint.f64(double %208)\l  %210 = tail call double @llvm.fma.f64(double %209, double -5.000000e-01,\l... double %207)\l  %211 = fptosi double %209 to i32\l  %212 = fmul double %210, %210\l  %213 = tail call double @llvm.fma.f64(double %212, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %214 = tail call double @llvm.fma.f64(double %212, double %213, double\l... 0x3FB50782D5F14825)\l  %215 = tail call double @llvm.fma.f64(double %212, double %214, double\l... 0xBFE32D2CCDFE9424)\l  %216 = tail call double @llvm.fma.f64(double %212, double %215, double\l... 0x400466BC67754FFF)\l  %217 = tail call double @llvm.fma.f64(double %212, double %216, double\l... 0xC014ABBCE625BE09)\l  %218 = fmul double %210, %212\l  %219 = fmul double %218, %217\l  %220 = tail call double @llvm.fma.f64(double %210, double\l... 0x400921FB54442D18, double %219)\l  %221 = tail call double @llvm.fma.f64(double %212, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %222 = tail call double @llvm.fma.f64(double %212, double %221, double\l... 0xBF9A6D1E7294BFF9)\l  %223 = tail call double @llvm.fma.f64(double %212, double %222, double\l... 0x3FCE1F5067B90B37)\l  %224 = tail call double @llvm.fma.f64(double %212, double %223, double\l... 0xBFF55D3C7E3C325B)\l  %225 = tail call double @llvm.fma.f64(double %212, double %224, double\l... 0x40103C1F081B5A67)\l  %226 = tail call double @llvm.fma.f64(double %212, double %225, double\l... 0xC013BD3CC9BE45DE)\l  %227 = tail call double @llvm.fma.f64(double %212, double %226, double\l... 1.000000e+00)\l  %228 = shl i32 %211, 30\l  %229 = and i32 %228, -2147483648\l  %230 = and i32 %211, 1\l  %231 = icmp eq i32 %230, 0\l  %232 = select i1 %231, double %220, double %227\l  %233 = bitcast double %232 to \<2 x i32\>\l  %234 = bitcast double %96 to \<2 x i32\>\l  %235 = extractelement \<2 x i32\> %234, i64 1\l  %236 = and i32 %235, -2147483648\l  %237 = extractelement \<2 x i32\> %233, i64 1\l  %238 = xor i32 %236, %237\l  %239 = xor i32 %238, %229\l  %240 = insertelement \<2 x i32\> %233, i32 %239, i64 1\l  %241 = fneg double %220\l  %242 = select i1 %231, double %227, double %241\l  %243 = bitcast double %242 to \<2 x i32\>\l  %244 = extractelement \<2 x i32\> %243, i64 1\l  %245 = xor i32 %244, %229\l  %246 = insertelement \<2 x i32\> %243, i32 %245, i64 1\l  %247 = tail call i1 @llvm.amdgcn.class.f64(double %96, i32 516)\l  %248 = select i1 %247, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %246\l  %249 = select i1 %247, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %240\l  %250 = bitcast \<2 x i32\> %249 to double\l  %251 = bitcast \<2 x i32\> %248 to double\l  %252 = fmul contract double %200, %250\l  %253 = fmul contract double %200, %251\l  br label %254\l}"];
	Node0x587a950 -> Node0x5878a00;
	Node0x5878a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%254:\l254:                                              \l  %255 = phi i32 [ %62, %46 ], [ %41, %43 ]\l  %256 = phi i32 [ %53, %46 ], [ %40, %43 ]\l  %257 = phi i32 [ %35, %46 ], [ %39, %43 ]\l  %258 = phi double [ %253, %46 ], [ %38, %43 ]\l  %259 = phi i32 [ %71, %46 ], [ %37, %43 ]\l  %260 = phi i32 [ 1, %46 ], [ 0, %43 ]\l  %261 = phi i32 [ %80, %46 ], [ %35, %43 ]\l  %262 = phi i32 [ %81, %46 ], [ %34, %43 ]\l  %263 = phi double [ %252, %46 ], [ %45, %43 ]\l  %264 = add nsw i32 %33, -1\l  %265 = sext i32 %264 to i64\l  %266 = getelementptr inbounds double, double addrspace(1)* %0, i64 %265\l  %267 = load double, double addrspace(1)* %266, align 8, !tbaa !4\l  %268 = fmul contract double %30, %263\l  %269 = fadd contract double %267, %268\l  %270 = zext i32 %33 to i64\l  %271 = getelementptr inbounds double, double addrspace(1)* %0, i64 %270\l  store double %269, double addrspace(1)* %271, align 8, !tbaa !4\l  %272 = add nuw nsw i32 %33, 1\l  %273 = icmp eq i32 %272, %2\l  br i1 %273, label %31, label %32, !llvm.loop !8\l|{<s0>T|<s1>F}}"];
	Node0x5878a00:s0 -> Node0x5877ed0;
	Node0x5878a00:s1 -> Node0x5879730;
}
