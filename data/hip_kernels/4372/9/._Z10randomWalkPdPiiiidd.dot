digraph "CFG for '_Z10randomWalkPdPiiiidd' function" {
	label="CFG for '_Z10randomWalkPdPiiiidd' function";

	Node0x475e4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = add i32 %15, %8\l  %17 = icmp slt i32 %16, %4\l  br i1 %17, label %18, label %327\l|{<s0>T|<s1>F}}"];
	Node0x475e4e0:s0 -> Node0x4760410;
	Node0x475e4e0:s1 -> Node0x47604a0;
	Node0x4760410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%18:\l18:                                               \l  %19 = uitofp i32 %9 to double\l  %20 = fmul contract double %6, 1.000000e+03\l  %21 = fmul contract double %20, %19\l  %22 = uitofp i32 %8 to double\l  %23 = fadd contract double %21, %22\l  %24 = tail call i64 @llvm.amdgcn.s.memtime()\l  %25 = sitofp i64 %24 to double\l  %26 = fadd contract double %23, %25\l  %27 = fptoui double %26 to i64\l  %28 = trunc i64 %27 to i32\l  %29 = xor i32 %28, 746559103\l  %30 = lshr i64 %27, 32\l  %31 = trunc i64 %30 to i32\l  %32 = xor i32 %31, -1607034933\l  %33 = mul i32 %29, 1228688033\l  %34 = mul i32 %32, 2073658381\l  %35 = mul i32 %16, %3\l  %36 = sext i32 %16 to i64\l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %36\l  store i32 0, i32 addrspace(1)* %37, align 4, !tbaa !7\l  %38 = sext i32 %35 to i64\l  %39 = getelementptr inbounds double, double addrspace(1)* %0, i64 %38\l  store double 0.000000e+00, double addrspace(1)* %39, align 8, !tbaa !11\l  %40 = add nsw i32 %35, %3\l  %41 = icmp sgt i32 %3, 1\l  br i1 %41, label %42, label %327\l|{<s0>T|<s1>F}}"];
	Node0x4760410:s0 -> Node0x47623a0;
	Node0x4760410:s1 -> Node0x47604a0;
	Node0x47623a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%42:\l42:                                               \l  %43 = add nsw i32 %35, 1\l  %44 = add i32 %33, 6615241\l  %45 = add i32 %44, %34\l  %46 = add i32 %33, 5783321\l  %47 = xor i32 %34, 88675123\l  %48 = add i32 %34, 521288629\l  %49 = xor i32 %33, 362436069\l  %50 = add i32 %33, 123456789\l  %51 = sitofp i32 %2 to double\l  %52 = sitofp i32 %3 to double\l  %53 = fdiv contract double %51, %52\l  %54 = fcmp olt double %53, 0x1000000000000000\l  %55 = select i1 %54, double 0x4FF0000000000000, double 1.000000e+00\l  %56 = fmul double %53, %55\l  %57 = tail call double @llvm.amdgcn.rsq.f64(double %56)\l  %58 = fmul double %56, %57\l  %59 = fmul double %57, 5.000000e-01\l  %60 = fneg double %59\l  %61 = tail call double @llvm.fma.f64(double %60, double %58, double\l... 5.000000e-01)\l  %62 = tail call double @llvm.fma.f64(double %59, double %61, double %59)\l  %63 = tail call double @llvm.fma.f64(double %58, double %61, double %58)\l  %64 = fneg double %63\l  %65 = tail call double @llvm.fma.f64(double %64, double %63, double %56)\l  %66 = tail call double @llvm.fma.f64(double %65, double %62, double %63)\l  %67 = fneg double %66\l  %68 = tail call double @llvm.fma.f64(double %67, double %66, double %56)\l  %69 = tail call double @llvm.fma.f64(double %68, double %62, double %66)\l  %70 = select i1 %54, double 0x37F0000000000000, double 1.000000e+00\l  %71 = fmul double %70, %69\l  %72 = fcmp oeq double %56, 0.000000e+00\l  %73 = fcmp oeq double %56, 0x7FF0000000000000\l  %74 = or i1 %72, %73\l  %75 = select i1 %74, double %56, double %71\l  br label %76\l}"];
	Node0x47623a0 -> Node0x47642f0;
	Node0x47642f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi double [ 0.000000e+00, %42 ], [ %316, %323 ]\l  %78 = phi i32 [ %43, %42 ], [ %325, %323 ]\l  %79 = phi i32 [ %35, %42 ], [ %78, %323 ]\l  %80 = phi i1 [ false, %42 ], [ %324, %323 ]\l  %81 = phi i32 [ %45, %42 ], [ %313, %323 ]\l  %82 = phi i32 [ %46, %42 ], [ %312, %323 ]\l  %83 = phi i32 [ 0, %42 ], [ %311, %323 ]\l  %84 = phi i32 [ %47, %42 ], [ %310, %323 ]\l  %85 = phi double [ undef, %42 ], [ %309, %323 ]\l  %86 = phi i32 [ %50, %42 ], [ %308, %323 ]\l  %87 = phi i32 [ %49, %42 ], [ %307, %323 ]\l  %88 = phi i32 [ %48, %42 ], [ %306, %323 ]\l  %89 = icmp eq i32 %83, 0\l  br i1 %89, label %93, label %90\l|{<s0>T|<s1>F}}"];
	Node0x47642f0:s0 -> Node0x47655f0;
	Node0x47642f0:s1 -> Node0x4765680;
	Node0x4765680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%90:\l90:                                               \l  %91 = fptrunc double %85 to float\l  %92 = fpext float %91 to double\l  br label %304\l}"];
	Node0x4765680 -> Node0x47658a0;
	Node0x47655f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%93:\l93:                                               \l  %94 = lshr i32 %86, 2\l  %95 = xor i32 %94, %86\l  %96 = shl i32 %82, 4\l  %97 = shl i32 %95, 1\l  %98 = xor i32 %97, %96\l  %99 = xor i32 %98, %95\l  %100 = xor i32 %99, %82\l  %101 = add i32 %81, 362437\l  %102 = add i32 %101, %100\l  %103 = lshr i32 %87, 2\l  %104 = xor i32 %103, %87\l  %105 = shl i32 %100, 4\l  %106 = shl i32 %104, 1\l  %107 = xor i32 %106, %105\l  %108 = xor i32 %107, %104\l  %109 = xor i32 %108, %100\l  %110 = add i32 %81, 724874\l  %111 = add i32 %110, %109\l  %112 = lshr i32 %88, 2\l  %113 = xor i32 %112, %88\l  %114 = shl i32 %109, 4\l  %115 = shl i32 %113, 1\l  %116 = xor i32 %115, %114\l  %117 = xor i32 %116, %113\l  %118 = xor i32 %117, %109\l  %119 = add i32 %81, 1087311\l  %120 = add i32 %119, %118\l  %121 = lshr i32 %84, 2\l  %122 = xor i32 %121, %84\l  %123 = shl i32 %118, 4\l  %124 = shl i32 %122, 1\l  %125 = xor i32 %124, %123\l  %126 = xor i32 %125, %122\l  %127 = xor i32 %126, %118\l  %128 = add i32 %81, 1449748\l  %129 = add i32 %127, %128\l  %130 = zext i32 %102 to i64\l  %131 = zext i32 %111 to i64\l  %132 = shl nuw nsw i64 %131, 21\l  %133 = xor i64 %132, %130\l  %134 = uitofp i64 %133 to double\l  %135 = fmul contract double %134, 0x3CA0000000000000\l  %136 = fadd contract double %135, 0x3CA0000000000000\l  %137 = zext i32 %120 to i64\l  %138 = zext i32 %129 to i64\l  %139 = shl nuw nsw i64 %138, 21\l  %140 = xor i64 %139, %137\l  %141 = uitofp i64 %140 to double\l  %142 = fmul contract double %141, 0x3CB0000000000000\l  %143 = fadd contract double %142, 0x3CB0000000000000\l  %144 = tail call double @llvm.amdgcn.frexp.mant.f64(double %136)\l  %145 = fcmp olt double %144, 0x3FE5555555555555\l  %146 = zext i1 %145 to i32\l  %147 = tail call double @llvm.amdgcn.ldexp.f64(double %144, i32 %146)\l  %148 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %136)\l  %149 = sub nsw i32 %148, %146\l  %150 = fadd double %147, -1.000000e+00\l  %151 = fadd double %147, 1.000000e+00\l  %152 = fadd double %151, -1.000000e+00\l  %153 = fsub double %147, %152\l  %154 = tail call double @llvm.amdgcn.rcp.f64(double %151)\l  %155 = fneg double %151\l  %156 = tail call double @llvm.fma.f64(double %155, double %154, double\l... 1.000000e+00)\l  %157 = tail call double @llvm.fma.f64(double %156, double %154, double %154)\l  %158 = tail call double @llvm.fma.f64(double %155, double %157, double\l... 1.000000e+00)\l  %159 = tail call double @llvm.fma.f64(double %158, double %157, double %157)\l  %160 = fmul double %150, %159\l  %161 = fmul double %151, %160\l  %162 = fneg double %161\l  %163 = tail call double @llvm.fma.f64(double %160, double %151, double %162)\l  %164 = tail call double @llvm.fma.f64(double %160, double %153, double %163)\l  %165 = fadd double %161, %164\l  %166 = fsub double %165, %161\l  %167 = fsub double %164, %166\l  %168 = fsub double %150, %165\l  %169 = fsub double %150, %168\l  %170 = fsub double %169, %165\l  %171 = fsub double %170, %167\l  %172 = fadd double %168, %171\l  %173 = fmul double %159, %172\l  %174 = fadd double %160, %173\l  %175 = fsub double %174, %160\l  %176 = fsub double %173, %175\l  %177 = fmul double %174, %174\l  %178 = tail call double @llvm.fma.f64(double %177, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %179 = tail call double @llvm.fma.f64(double %177, double %178, double\l... 0x3FC7474DD7F4DF2E)\l  %180 = tail call double @llvm.fma.f64(double %177, double %179, double\l... 0x3FCC71C016291751)\l  %181 = tail call double @llvm.fma.f64(double %177, double %180, double\l... 0x3FD249249B27ACF1)\l  %182 = tail call double @llvm.fma.f64(double %177, double %181, double\l... 0x3FD99999998EF7B6)\l  %183 = tail call double @llvm.fma.f64(double %177, double %182, double\l... 0x3FE5555555555780)\l  %184 = tail call double @llvm.amdgcn.ldexp.f64(double %174, i32 1)\l  %185 = tail call double @llvm.amdgcn.ldexp.f64(double %176, i32 1)\l  %186 = fmul double %174, %177\l  %187 = fmul double %186, %183\l  %188 = fadd double %184, %187\l  %189 = fsub double %188, %184\l  %190 = fsub double %187, %189\l  %191 = fadd double %185, %190\l  %192 = fadd double %188, %191\l  %193 = fsub double %192, %188\l  %194 = fsub double %191, %193\l  %195 = sitofp i32 %149 to double\l  %196 = fmul double %195, 0x3FE62E42FEFA39EF\l  %197 = fneg double %196\l  %198 = tail call double @llvm.fma.f64(double %195, double\l... 0x3FE62E42FEFA39EF, double %197)\l  %199 = tail call double @llvm.fma.f64(double %195, double\l... 0x3C7ABC9E3B39803F, double %198)\l  %200 = fadd double %196, %199\l  %201 = fsub double %200, %196\l  %202 = fsub double %199, %201\l  %203 = fadd double %200, %192\l  %204 = fsub double %203, %200\l  %205 = fsub double %203, %204\l  %206 = fsub double %200, %205\l  %207 = fsub double %192, %204\l  %208 = fadd double %207, %206\l  %209 = fadd double %202, %194\l  %210 = fsub double %209, %202\l  %211 = fsub double %209, %210\l  %212 = fsub double %202, %211\l  %213 = fsub double %194, %210\l  %214 = fadd double %213, %212\l  %215 = fadd double %209, %208\l  %216 = fadd double %203, %215\l  %217 = fsub double %216, %203\l  %218 = fsub double %215, %217\l  %219 = fadd double %214, %218\l  %220 = fadd double %216, %219\l  %221 = fcmp oeq double %136, 0x7FF0000000000000\l  %222 = select i1 %221, double %136, double %220\l  %223 = fcmp oeq double %136, 0.000000e+00\l  %224 = fmul contract double %222, -2.000000e+00\l  %225 = select i1 %223, double 0x7FF0000000000000, double %224\l  %226 = fcmp olt double %225, 0x1000000000000000\l  %227 = select i1 %226, double 0x4FF0000000000000, double 1.000000e+00\l  %228 = fmul double %225, %227\l  %229 = tail call double @llvm.amdgcn.rsq.f64(double %228)\l  %230 = fmul double %228, %229\l  %231 = fmul double %229, 5.000000e-01\l  %232 = fneg double %231\l  %233 = tail call double @llvm.fma.f64(double %232, double %230, double\l... 5.000000e-01)\l  %234 = tail call double @llvm.fma.f64(double %231, double %233, double %231)\l  %235 = tail call double @llvm.fma.f64(double %230, double %233, double %230)\l  %236 = fneg double %235\l  %237 = tail call double @llvm.fma.f64(double %236, double %235, double %228)\l  %238 = tail call double @llvm.fma.f64(double %237, double %234, double %235)\l  %239 = fneg double %238\l  %240 = tail call double @llvm.fma.f64(double %239, double %238, double %228)\l  %241 = tail call double @llvm.fma.f64(double %240, double %234, double %238)\l  %242 = select i1 %226, double 0x37F0000000000000, double 1.000000e+00\l  %243 = fmul double %242, %241\l  %244 = fcmp oeq double %228, 0.000000e+00\l  %245 = fcmp oeq double %228, 0x7FF0000000000000\l  %246 = or i1 %244, %245\l  %247 = select i1 %246, double %228, double %243\l  %248 = fmul double %143, 5.000000e-01\l  %249 = tail call double @llvm.amdgcn.fract.f64(double %248)\l  %250 = tail call i1 @llvm.amdgcn.class.f64(double %248, i32 516)\l  %251 = fmul double %249, 2.000000e+00\l  %252 = select i1 %250, double 0.000000e+00, double %251\l  %253 = fcmp ogt double %143, 1.000000e+00\l  %254 = select i1 %253, double %252, double %143\l  %255 = fmul double %254, 2.000000e+00\l  %256 = tail call double @llvm.rint.f64(double %255)\l  %257 = tail call double @llvm.fma.f64(double %256, double -5.000000e-01,\l... double %254)\l  %258 = fptosi double %256 to i32\l  %259 = fmul double %257, %257\l  %260 = tail call double @llvm.fma.f64(double %259, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %261 = tail call double @llvm.fma.f64(double %259, double %260, double\l... 0x3FB50782D5F14825)\l  %262 = tail call double @llvm.fma.f64(double %259, double %261, double\l... 0xBFE32D2CCDFE9424)\l  %263 = tail call double @llvm.fma.f64(double %259, double %262, double\l... 0x400466BC67754FFF)\l  %264 = tail call double @llvm.fma.f64(double %259, double %263, double\l... 0xC014ABBCE625BE09)\l  %265 = fmul double %257, %259\l  %266 = fmul double %265, %264\l  %267 = tail call double @llvm.fma.f64(double %257, double\l... 0x400921FB54442D18, double %266)\l  %268 = tail call double @llvm.fma.f64(double %259, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %269 = tail call double @llvm.fma.f64(double %259, double %268, double\l... 0xBF9A6D1E7294BFF9)\l  %270 = tail call double @llvm.fma.f64(double %259, double %269, double\l... 0x3FCE1F5067B90B37)\l  %271 = tail call double @llvm.fma.f64(double %259, double %270, double\l... 0xBFF55D3C7E3C325B)\l  %272 = tail call double @llvm.fma.f64(double %259, double %271, double\l... 0x40103C1F081B5A67)\l  %273 = tail call double @llvm.fma.f64(double %259, double %272, double\l... 0xC013BD3CC9BE45DE)\l  %274 = tail call double @llvm.fma.f64(double %259, double %273, double\l... 1.000000e+00)\l  %275 = shl i32 %258, 30\l  %276 = and i32 %275, -2147483648\l  %277 = and i32 %258, 1\l  %278 = icmp eq i32 %277, 0\l  %279 = select i1 %278, double %267, double %274\l  %280 = bitcast double %279 to \<2 x i32\>\l  %281 = bitcast double %143 to \<2 x i32\>\l  %282 = extractelement \<2 x i32\> %281, i64 1\l  %283 = and i32 %282, -2147483648\l  %284 = extractelement \<2 x i32\> %280, i64 1\l  %285 = xor i32 %283, %284\l  %286 = xor i32 %285, %276\l  %287 = insertelement \<2 x i32\> %280, i32 %286, i64 1\l  %288 = fneg double %267\l  %289 = select i1 %278, double %274, double %288\l  %290 = bitcast double %289 to \<2 x i32\>\l  %291 = extractelement \<2 x i32\> %290, i64 1\l  %292 = xor i32 %291, %276\l  %293 = insertelement \<2 x i32\> %290, i32 %292, i64 1\l  %294 = tail call i1 @llvm.amdgcn.class.f64(double %143, i32 516)\l  %295 = select i1 %294, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %293\l  %296 = select i1 %294, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %287\l  %297 = bitcast \<2 x i32\> %296 to double\l  %298 = bitcast \<2 x i32\> %295 to double\l  %299 = fmul contract double %247, %297\l  %300 = fmul contract double %247, %298\l  %301 = sext i32 %79 to i64\l  %302 = getelementptr inbounds double, double addrspace(1)* %0, i64 %301\l  %303 = load double, double addrspace(1)* %302, align 8, !tbaa !11\l  br label %304\l}"];
	Node0x47655f0 -> Node0x47658a0;
	Node0x47658a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%304:\l304:                                              \l  %305 = phi double [ %303, %93 ], [ %77, %90 ]\l  %306 = phi i32 [ %109, %93 ], [ %88, %90 ]\l  %307 = phi i32 [ %100, %93 ], [ %87, %90 ]\l  %308 = phi i32 [ %82, %93 ], [ %86, %90 ]\l  %309 = phi double [ %300, %93 ], [ %85, %90 ]\l  %310 = phi i32 [ %118, %93 ], [ %84, %90 ]\l  %311 = phi i32 [ 1, %93 ], [ 0, %90 ]\l  %312 = phi i32 [ %127, %93 ], [ %82, %90 ]\l  %313 = phi i32 [ %128, %93 ], [ %81, %90 ]\l  %314 = phi double [ %299, %93 ], [ %92, %90 ]\l  %315 = fmul contract double %75, %314\l  %316 = fadd contract double %305, %315\l  %317 = sext i32 %78 to i64\l  %318 = getelementptr inbounds double, double addrspace(1)* %0, i64 %317\l  store double %316, double addrspace(1)* %318, align 8, !tbaa !11\l  %319 = fcmp contract ult double %316, %5\l  %320 = select i1 %80, i1 true, i1 %319\l  br i1 %320, label %323, label %321\l|{<s0>T|<s1>F}}"];
	Node0x47658a0:s0 -> Node0x47643f0;
	Node0x47658a0:s1 -> Node0x4772030;
	Node0x4772030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%321:\l321:                                              \l  %322 = sub nsw i32 %78, %35\l  store i32 %322, i32 addrspace(1)* %37, align 4, !tbaa !7\l  br label %323\l}"];
	Node0x4772030 -> Node0x47643f0;
	Node0x47643f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%323:\l323:                                              \l  %324 = phi i1 [ %80, %304 ], [ true, %321 ]\l  %325 = add nsw i32 %78, 1\l  %326 = icmp slt i32 %325, %40\l  br i1 %326, label %76, label %327, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x47643f0:s0 -> Node0x47642f0;
	Node0x47643f0:s1 -> Node0x47604a0;
	Node0x47604a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%327:\l327:                                              \l  ret void\l}"];
}
