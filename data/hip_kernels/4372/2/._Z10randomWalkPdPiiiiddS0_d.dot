digraph "CFG for '_Z10randomWalkPdPiiiiddS0_d' function" {
	label="CFG for '_Z10randomWalkPdPiiiiddS0_d' function";

	Node0x47a19d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = add i32 %17, %10\l  %19 = icmp slt i32 %18, %4\l  br i1 %19, label %20, label %335\l|{<s0>T|<s1>F}}"];
	Node0x47a19d0:s0 -> Node0x47a4460;
	Node0x47a19d0:s1 -> Node0x47a44f0;
	Node0x47a4460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%20:\l20:                                               \l  %21 = mul i32 %11, 1000\l  %22 = add i32 %21, %10\l  %23 = uitofp i32 %22 to double\l  %24 = fadd contract double %23, %8\l  %25 = fptoui double %24 to i64\l  %26 = trunc i64 %25 to i32\l  %27 = xor i32 %26, 746559103\l  %28 = lshr i64 %25, 32\l  %29 = trunc i64 %28 to i32\l  %30 = xor i32 %29, -1607034933\l  %31 = mul i32 %27, 1228688033\l  %32 = mul i32 %30, 2073658381\l  %33 = mul i32 %18, %3\l  %34 = sext i32 %18 to i64\l  %35 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %34\l  store i32 0, i32 addrspace(1)* %35, align 4, !tbaa !7\l  %36 = sext i32 %33 to i64\l  %37 = getelementptr inbounds double, double addrspace(1)* %0, i64 %36\l  store double 0.000000e+00, double addrspace(1)* %37, align 8, !tbaa !11\l  %38 = add nsw i32 %33, %3\l  %39 = icmp sgt i32 %3, 1\l  br i1 %39, label %40, label %333\l|{<s0>T|<s1>F}}"];
	Node0x47a4460:s0 -> Node0x47a6050;
	Node0x47a4460:s1 -> Node0x47a60e0;
	Node0x47a6050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%40:\l40:                                               \l  %41 = add nsw i32 %33, 1\l  %42 = add i32 %31, 6615241\l  %43 = add i32 %42, %32\l  %44 = add i32 %31, 5783321\l  %45 = xor i32 %32, 88675123\l  %46 = add i32 %32, 521288629\l  %47 = xor i32 %31, 362436069\l  %48 = add i32 %31, 123456789\l  %49 = sitofp i32 %2 to double\l  %50 = sitofp i32 %3 to double\l  %51 = fdiv contract double %49, %50\l  %52 = fcmp olt double %51, 0x1000000000000000\l  %53 = select i1 %52, double 0x4FF0000000000000, double 1.000000e+00\l  %54 = fmul double %51, %53\l  %55 = tail call double @llvm.amdgcn.rsq.f64(double %54)\l  %56 = fmul double %54, %55\l  %57 = fmul double %55, 5.000000e-01\l  %58 = fneg double %57\l  %59 = tail call double @llvm.fma.f64(double %58, double %56, double\l... 5.000000e-01)\l  %60 = tail call double @llvm.fma.f64(double %57, double %59, double %57)\l  %61 = tail call double @llvm.fma.f64(double %56, double %59, double %56)\l  %62 = fneg double %61\l  %63 = tail call double @llvm.fma.f64(double %62, double %61, double %54)\l  %64 = tail call double @llvm.fma.f64(double %63, double %60, double %61)\l  %65 = fneg double %64\l  %66 = tail call double @llvm.fma.f64(double %65, double %64, double %54)\l  %67 = tail call double @llvm.fma.f64(double %66, double %60, double %64)\l  %68 = select i1 %52, double 0x37F0000000000000, double 1.000000e+00\l  %69 = fmul double %68, %67\l  %70 = fcmp oeq double %54, 0.000000e+00\l  %71 = fcmp oeq double %54, 0x7FF0000000000000\l  %72 = or i1 %70, %71\l  %73 = select i1 %72, double %54, double %69\l  br label %75\l}"];
	Node0x47a6050 -> Node0x47a8070;
	Node0x47a8170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%74:\l74:                                               \l  br i1 %330, label %335, label %333\l|{<s0>T|<s1>F}}"];
	Node0x47a8170:s0 -> Node0x47a44f0;
	Node0x47a8170:s1 -> Node0x47a60e0;
	Node0x47a8070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  %76 = phi double [ 0.000000e+00, %40 ], [ %315, %329 ]\l  %77 = phi i32 [ %41, %40 ], [ %331, %329 ]\l  %78 = phi i32 [ %33, %40 ], [ %77, %329 ]\l  %79 = phi i1 [ false, %40 ], [ %330, %329 ]\l  %80 = phi i32 [ %43, %40 ], [ %312, %329 ]\l  %81 = phi i32 [ %44, %40 ], [ %311, %329 ]\l  %82 = phi i32 [ 0, %40 ], [ %310, %329 ]\l  %83 = phi i32 [ %45, %40 ], [ %309, %329 ]\l  %84 = phi double [ undef, %40 ], [ %308, %329 ]\l  %85 = phi i32 [ %48, %40 ], [ %307, %329 ]\l  %86 = phi i32 [ %47, %40 ], [ %306, %329 ]\l  %87 = phi i32 [ %46, %40 ], [ %305, %329 ]\l  %88 = icmp eq i32 %82, 0\l  br i1 %88, label %92, label %89\l|{<s0>T|<s1>F}}"];
	Node0x47a8070:s0 -> Node0x47a9470;
	Node0x47a8070:s1 -> Node0x47a9500;
	Node0x47a9500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%89:\l89:                                               \l  %90 = fptrunc double %84 to float\l  %91 = fpext float %90 to double\l  br label %303\l}"];
	Node0x47a9500 -> Node0x47a9720;
	Node0x47a9470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%92:\l92:                                               \l  %93 = lshr i32 %85, 2\l  %94 = xor i32 %93, %85\l  %95 = shl i32 %81, 4\l  %96 = shl i32 %94, 1\l  %97 = xor i32 %96, %95\l  %98 = xor i32 %97, %94\l  %99 = xor i32 %98, %81\l  %100 = add i32 %80, 362437\l  %101 = add i32 %100, %99\l  %102 = lshr i32 %86, 2\l  %103 = xor i32 %102, %86\l  %104 = shl i32 %99, 4\l  %105 = shl i32 %103, 1\l  %106 = xor i32 %105, %104\l  %107 = xor i32 %106, %103\l  %108 = xor i32 %107, %99\l  %109 = add i32 %80, 724874\l  %110 = add i32 %109, %108\l  %111 = lshr i32 %87, 2\l  %112 = xor i32 %111, %87\l  %113 = shl i32 %108, 4\l  %114 = shl i32 %112, 1\l  %115 = xor i32 %114, %113\l  %116 = xor i32 %115, %112\l  %117 = xor i32 %116, %108\l  %118 = add i32 %80, 1087311\l  %119 = add i32 %118, %117\l  %120 = lshr i32 %83, 2\l  %121 = xor i32 %120, %83\l  %122 = shl i32 %117, 4\l  %123 = shl i32 %121, 1\l  %124 = xor i32 %123, %122\l  %125 = xor i32 %124, %121\l  %126 = xor i32 %125, %117\l  %127 = add i32 %80, 1449748\l  %128 = add i32 %126, %127\l  %129 = zext i32 %101 to i64\l  %130 = zext i32 %110 to i64\l  %131 = shl nuw nsw i64 %130, 21\l  %132 = xor i64 %131, %129\l  %133 = uitofp i64 %132 to double\l  %134 = fmul contract double %133, 0x3CA0000000000000\l  %135 = fadd contract double %134, 0x3CA0000000000000\l  %136 = zext i32 %119 to i64\l  %137 = zext i32 %128 to i64\l  %138 = shl nuw nsw i64 %137, 21\l  %139 = xor i64 %138, %136\l  %140 = uitofp i64 %139 to double\l  %141 = fmul contract double %140, 0x3CB0000000000000\l  %142 = fadd contract double %141, 0x3CB0000000000000\l  %143 = tail call double @llvm.amdgcn.frexp.mant.f64(double %135)\l  %144 = fcmp olt double %143, 0x3FE5555555555555\l  %145 = zext i1 %144 to i32\l  %146 = tail call double @llvm.amdgcn.ldexp.f64(double %143, i32 %145)\l  %147 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %135)\l  %148 = sub nsw i32 %147, %145\l  %149 = fadd double %146, -1.000000e+00\l  %150 = fadd double %146, 1.000000e+00\l  %151 = fadd double %150, -1.000000e+00\l  %152 = fsub double %146, %151\l  %153 = tail call double @llvm.amdgcn.rcp.f64(double %150)\l  %154 = fneg double %150\l  %155 = tail call double @llvm.fma.f64(double %154, double %153, double\l... 1.000000e+00)\l  %156 = tail call double @llvm.fma.f64(double %155, double %153, double %153)\l  %157 = tail call double @llvm.fma.f64(double %154, double %156, double\l... 1.000000e+00)\l  %158 = tail call double @llvm.fma.f64(double %157, double %156, double %156)\l  %159 = fmul double %149, %158\l  %160 = fmul double %150, %159\l  %161 = fneg double %160\l  %162 = tail call double @llvm.fma.f64(double %159, double %150, double %161)\l  %163 = tail call double @llvm.fma.f64(double %159, double %152, double %162)\l  %164 = fadd double %160, %163\l  %165 = fsub double %164, %160\l  %166 = fsub double %163, %165\l  %167 = fsub double %149, %164\l  %168 = fsub double %149, %167\l  %169 = fsub double %168, %164\l  %170 = fsub double %169, %166\l  %171 = fadd double %167, %170\l  %172 = fmul double %158, %171\l  %173 = fadd double %159, %172\l  %174 = fsub double %173, %159\l  %175 = fsub double %172, %174\l  %176 = fmul double %173, %173\l  %177 = tail call double @llvm.fma.f64(double %176, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %178 = tail call double @llvm.fma.f64(double %176, double %177, double\l... 0x3FC7474DD7F4DF2E)\l  %179 = tail call double @llvm.fma.f64(double %176, double %178, double\l... 0x3FCC71C016291751)\l  %180 = tail call double @llvm.fma.f64(double %176, double %179, double\l... 0x3FD249249B27ACF1)\l  %181 = tail call double @llvm.fma.f64(double %176, double %180, double\l... 0x3FD99999998EF7B6)\l  %182 = tail call double @llvm.fma.f64(double %176, double %181, double\l... 0x3FE5555555555780)\l  %183 = tail call double @llvm.amdgcn.ldexp.f64(double %173, i32 1)\l  %184 = tail call double @llvm.amdgcn.ldexp.f64(double %175, i32 1)\l  %185 = fmul double %173, %176\l  %186 = fmul double %185, %182\l  %187 = fadd double %183, %186\l  %188 = fsub double %187, %183\l  %189 = fsub double %186, %188\l  %190 = fadd double %184, %189\l  %191 = fadd double %187, %190\l  %192 = fsub double %191, %187\l  %193 = fsub double %190, %192\l  %194 = sitofp i32 %148 to double\l  %195 = fmul double %194, 0x3FE62E42FEFA39EF\l  %196 = fneg double %195\l  %197 = tail call double @llvm.fma.f64(double %194, double\l... 0x3FE62E42FEFA39EF, double %196)\l  %198 = tail call double @llvm.fma.f64(double %194, double\l... 0x3C7ABC9E3B39803F, double %197)\l  %199 = fadd double %195, %198\l  %200 = fsub double %199, %195\l  %201 = fsub double %198, %200\l  %202 = fadd double %199, %191\l  %203 = fsub double %202, %199\l  %204 = fsub double %202, %203\l  %205 = fsub double %199, %204\l  %206 = fsub double %191, %203\l  %207 = fadd double %206, %205\l  %208 = fadd double %201, %193\l  %209 = fsub double %208, %201\l  %210 = fsub double %208, %209\l  %211 = fsub double %201, %210\l  %212 = fsub double %193, %209\l  %213 = fadd double %212, %211\l  %214 = fadd double %208, %207\l  %215 = fadd double %202, %214\l  %216 = fsub double %215, %202\l  %217 = fsub double %214, %216\l  %218 = fadd double %213, %217\l  %219 = fadd double %215, %218\l  %220 = fcmp oeq double %135, 0x7FF0000000000000\l  %221 = select i1 %220, double %135, double %219\l  %222 = fcmp oeq double %135, 0.000000e+00\l  %223 = fmul contract double %221, -2.000000e+00\l  %224 = select i1 %222, double 0x7FF0000000000000, double %223\l  %225 = fcmp olt double %224, 0x1000000000000000\l  %226 = select i1 %225, double 0x4FF0000000000000, double 1.000000e+00\l  %227 = fmul double %224, %226\l  %228 = tail call double @llvm.amdgcn.rsq.f64(double %227)\l  %229 = fmul double %227, %228\l  %230 = fmul double %228, 5.000000e-01\l  %231 = fneg double %230\l  %232 = tail call double @llvm.fma.f64(double %231, double %229, double\l... 5.000000e-01)\l  %233 = tail call double @llvm.fma.f64(double %230, double %232, double %230)\l  %234 = tail call double @llvm.fma.f64(double %229, double %232, double %229)\l  %235 = fneg double %234\l  %236 = tail call double @llvm.fma.f64(double %235, double %234, double %227)\l  %237 = tail call double @llvm.fma.f64(double %236, double %233, double %234)\l  %238 = fneg double %237\l  %239 = tail call double @llvm.fma.f64(double %238, double %237, double %227)\l  %240 = tail call double @llvm.fma.f64(double %239, double %233, double %237)\l  %241 = select i1 %225, double 0x37F0000000000000, double 1.000000e+00\l  %242 = fmul double %241, %240\l  %243 = fcmp oeq double %227, 0.000000e+00\l  %244 = fcmp oeq double %227, 0x7FF0000000000000\l  %245 = or i1 %243, %244\l  %246 = select i1 %245, double %227, double %242\l  %247 = fmul double %142, 5.000000e-01\l  %248 = tail call double @llvm.amdgcn.fract.f64(double %247)\l  %249 = tail call i1 @llvm.amdgcn.class.f64(double %247, i32 516)\l  %250 = fmul double %248, 2.000000e+00\l  %251 = select i1 %249, double 0.000000e+00, double %250\l  %252 = fcmp ogt double %142, 1.000000e+00\l  %253 = select i1 %252, double %251, double %142\l  %254 = fmul double %253, 2.000000e+00\l  %255 = tail call double @llvm.rint.f64(double %254)\l  %256 = tail call double @llvm.fma.f64(double %255, double -5.000000e-01,\l... double %253)\l  %257 = fptosi double %255 to i32\l  %258 = fmul double %256, %256\l  %259 = tail call double @llvm.fma.f64(double %258, double\l... 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)\l  %260 = tail call double @llvm.fma.f64(double %258, double %259, double\l... 0x3FB50782D5F14825)\l  %261 = tail call double @llvm.fma.f64(double %258, double %260, double\l... 0xBFE32D2CCDFE9424)\l  %262 = tail call double @llvm.fma.f64(double %258, double %261, double\l... 0x400466BC67754FFF)\l  %263 = tail call double @llvm.fma.f64(double %258, double %262, double\l... 0xC014ABBCE625BE09)\l  %264 = fmul double %256, %258\l  %265 = fmul double %264, %263\l  %266 = tail call double @llvm.fma.f64(double %256, double\l... 0x400921FB54442D18, double %265)\l  %267 = tail call double @llvm.fma.f64(double %258, double\l... 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)\l  %268 = tail call double @llvm.fma.f64(double %258, double %267, double\l... 0xBF9A6D1E7294BFF9)\l  %269 = tail call double @llvm.fma.f64(double %258, double %268, double\l... 0x3FCE1F5067B90B37)\l  %270 = tail call double @llvm.fma.f64(double %258, double %269, double\l... 0xBFF55D3C7E3C325B)\l  %271 = tail call double @llvm.fma.f64(double %258, double %270, double\l... 0x40103C1F081B5A67)\l  %272 = tail call double @llvm.fma.f64(double %258, double %271, double\l... 0xC013BD3CC9BE45DE)\l  %273 = tail call double @llvm.fma.f64(double %258, double %272, double\l... 1.000000e+00)\l  %274 = shl i32 %257, 30\l  %275 = and i32 %274, -2147483648\l  %276 = and i32 %257, 1\l  %277 = icmp eq i32 %276, 0\l  %278 = select i1 %277, double %266, double %273\l  %279 = bitcast double %278 to \<2 x i32\>\l  %280 = bitcast double %142 to \<2 x i32\>\l  %281 = extractelement \<2 x i32\> %280, i64 1\l  %282 = and i32 %281, -2147483648\l  %283 = extractelement \<2 x i32\> %279, i64 1\l  %284 = xor i32 %282, %283\l  %285 = xor i32 %284, %275\l  %286 = insertelement \<2 x i32\> %279, i32 %285, i64 1\l  %287 = fneg double %266\l  %288 = select i1 %277, double %273, double %287\l  %289 = bitcast double %288 to \<2 x i32\>\l  %290 = extractelement \<2 x i32\> %289, i64 1\l  %291 = xor i32 %290, %275\l  %292 = insertelement \<2 x i32\> %289, i32 %291, i64 1\l  %293 = tail call i1 @llvm.amdgcn.class.f64(double %142, i32 516)\l  %294 = select i1 %293, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %292\l  %295 = select i1 %293, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %286\l  %296 = bitcast \<2 x i32\> %295 to double\l  %297 = bitcast \<2 x i32\> %294 to double\l  %298 = fmul contract double %246, %296\l  %299 = fmul contract double %246, %297\l  %300 = sext i32 %78 to i64\l  %301 = getelementptr inbounds double, double addrspace(1)* %0, i64 %300\l  %302 = load double, double addrspace(1)* %301, align 8, !tbaa !11\l  br label %303\l}"];
	Node0x47a9470 -> Node0x47a9720;
	Node0x47a9720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%303:\l303:                                              \l  %304 = phi double [ %302, %92 ], [ %76, %89 ]\l  %305 = phi i32 [ %108, %92 ], [ %87, %89 ]\l  %306 = phi i32 [ %99, %92 ], [ %86, %89 ]\l  %307 = phi i32 [ %81, %92 ], [ %85, %89 ]\l  %308 = phi double [ %299, %92 ], [ %84, %89 ]\l  %309 = phi i32 [ %117, %92 ], [ %83, %89 ]\l  %310 = phi i32 [ 1, %92 ], [ 0, %89 ]\l  %311 = phi i32 [ %126, %92 ], [ %81, %89 ]\l  %312 = phi i32 [ %127, %92 ], [ %80, %89 ]\l  %313 = phi double [ %298, %92 ], [ %91, %89 ]\l  %314 = fmul contract double %73, %313\l  %315 = fadd contract double %304, %314\l  %316 = sext i32 %77 to i64\l  %317 = getelementptr inbounds double, double addrspace(1)* %0, i64 %316\l  store double %315, double addrspace(1)* %317, align 8, !tbaa !11\l  %318 = fcmp contract ult double %315, %6\l  %319 = select i1 %79, i1 true, i1 %318\l  br i1 %319, label %322, label %320\l|{<s0>T|<s1>F}}"];
	Node0x47a9720:s0 -> Node0x47b5e90;
	Node0x47a9720:s1 -> Node0x47b5ee0;
	Node0x47b5ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%320:\l320:                                              \l  %321 = sub nsw i32 %77, %33\l  br label %327\l}"];
	Node0x47b5ee0 -> Node0x47b6070;
	Node0x47b5e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%322:\l322:                                              \l  br i1 %79, label %329, label %323\l|{<s0>T|<s1>F}}"];
	Node0x47b5e90:s0 -> Node0x47a82e0;
	Node0x47b5e90:s1 -> Node0x47b6130;
	Node0x47b6130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%323:\l323:                                              \l  %324 = fcmp contract ugt double %315, %5\l  br i1 %324, label %329, label %325\l|{<s0>T|<s1>F}}"];
	Node0x47b6130:s0 -> Node0x47a82e0;
	Node0x47b6130:s1 -> Node0x47b62c0;
	Node0x47b62c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%325:\l325:                                              \l  %326 = sub i32 %33, %77\l  br label %327\l}"];
	Node0x47b62c0 -> Node0x47b6070;
	Node0x47b6070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%327:\l327:                                              \l  %328 = phi i32 [ %321, %320 ], [ %326, %325 ]\l  store i32 %328, i32 addrspace(1)* %35, align 4, !tbaa !7\l  br label %329\l}"];
	Node0x47b6070 -> Node0x47a82e0;
	Node0x47a82e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%329:\l329:                                              \l  %330 = phi i1 [ true, %322 ], [ false, %323 ], [ true, %327 ]\l  %331 = add nsw i32 %77, 1\l  %332 = icmp slt i32 %331, %38\l  br i1 %332, label %75, label %74, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x47a82e0:s0 -> Node0x47a8070;
	Node0x47a82e0:s1 -> Node0x47a8170;
	Node0x47a60e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%333:\l333:                                              \l  %334 = atomicrmw add i32 addrspace(1)* %7, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  br label %335\l}"];
	Node0x47a60e0 -> Node0x47a44f0;
	Node0x47a44f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%335:\l335:                                              \l  ret void\l}"];
}
