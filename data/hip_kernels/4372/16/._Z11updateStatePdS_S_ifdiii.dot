digraph "CFG for '_Z11updateStatePdS_S_ifdiii' function" {
	label="CFG for '_Z11updateStatePdS_S_ifdiii' function";

	Node0x5c6a410 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %17, %6\l  %19 = add i32 %18, %16\l  %20 = icmp sge i32 %19, %6\l  %21 = add nsw i32 %6, %3\l  %22 = icmp slt i32 %19, %21\l  %23 = select i1 %20, i1 %22, i1 false\l  br i1 %23, label %24, label %176\l|{<s0>T|<s1>F}}"];
	Node0x5c6a410:s0 -> Node0x5c6d120;
	Node0x5c6a410:s1 -> Node0x5c6d1b0;
	Node0x5c6d120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%24:\l24:                                               \l  %25 = srem i32 %19, %3\l  %26 = shl nsw i32 %25, 1\l  %27 = sext i32 %26 to i64\l  %28 = getelementptr inbounds double, double addrspace(1)* %2, i64 %27\l  %29 = load double, double addrspace(1)* %28, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %30 = add nuw nsw i32 %26, 1\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds double, double addrspace(1)* %2, i64 %31\l  %33 = load double, double addrspace(1)* %32, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %34 = sext i32 %19 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %0, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = mul nsw i32 %25, %7\l  %38 = add nsw i32 %37, %8\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %1, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fadd contract double %36, %41\l  %43 = sub nsw i32 %19, %3\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds double, double addrspace(1)* %0, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = fneg contract double %29\l  %48 = fsub contract double %42, %33\l  %49 = fmul contract double %48, %47\l  %50 = fptrunc double %49 to float\l  %51 = fmul float %50, 0x3FF7154760000000\l  %52 = tail call float @llvm.rint.f32(float %51)\l  %53 = fcmp ogt float %50, 0x40562E4300000000\l  %54 = fcmp olt float %50, 0xC059D1DA00000000\l  %55 = fneg float %51\l  %56 = tail call float @llvm.fma.f32(float %50, float 0x3FF7154760000000,\l... float %55)\l  %57 = tail call float @llvm.fma.f32(float %50, float 0x3E54AE0BE0000000,\l... float %56)\l  %58 = fsub float %51, %52\l  %59 = fadd float %57, %58\l  %60 = tail call float @llvm.exp2.f32(float %59)\l  %61 = fptosi float %52 to i32\l  %62 = tail call float @llvm.amdgcn.ldexp.f32(float %60, i32 %61)\l  %63 = fadd contract float %62, 1.000000e+00\l  %64 = fdiv contract float 1.000000e+00, %63\l  %65 = select i1 %54, float 1.000000e+00, float %64\l  %66 = select i1 %53, float 0.000000e+00, float %65\l  %67 = fpext float %66 to double\l  %68 = fsub contract double %67, %46\l  %69 = mul i32 %10, 1000\l  %70 = add i32 %69, %17\l  %71 = zext i32 %70 to i64\l  %72 = tail call i64 @llvm.amdgcn.s.memtime()\l  %73 = add nsw i64 %72, %71\l  %74 = trunc i64 %73 to i32\l  %75 = xor i32 %74, 746559103\l  %76 = lshr i64 %73, 32\l  %77 = trunc i64 %76 to i32\l  %78 = xor i32 %77, -1607034933\l  %79 = mul i32 %75, 1228688033\l  %80 = mul i32 %78, 2073658381\l  %81 = add i32 %79, 123456789\l  %82 = xor i32 %79, 362436069\l  %83 = add i32 %79, 5783321\l  %84 = add i32 %79, 6615241\l  %85 = add i32 %84, %80\l  %86 = lshr i32 %81, 2\l  %87 = xor i32 %86, %81\l  %88 = shl i32 %83, 4\l  %89 = shl i32 %87, 1\l  %90 = xor i32 %88, %89\l  %91 = xor i32 %90, %83\l  %92 = xor i32 %91, %87\l  %93 = add i32 %85, 362437\l  %94 = add i32 %93, %92\l  %95 = lshr i32 %82, 2\l  %96 = xor i32 %95, %82\l  %97 = shl i32 %92, 4\l  %98 = shl i32 %96, 1\l  %99 = xor i32 %98, %97\l  %100 = xor i32 %99, %96\l  %101 = xor i32 %100, %92\l  %102 = add i32 %85, 724874\l  %103 = add i32 %102, %101\l  %104 = uitofp i32 %94 to float\l  %105 = fmul contract float %104, 0x3DF0000000000000\l  %106 = fadd contract float %105, 0x3DF0000000000000\l  %107 = uitofp i32 %103 to float\l  %108 = fmul contract float %107, 0x3E1921FB60000000\l  %109 = fadd contract float %108, 0x3E1921FB60000000\l  %110 = tail call i1 @llvm.amdgcn.class.f32(float %106, i32 144)\l  %111 = select i1 %110, float 0x41F0000000000000, float 1.000000e+00\l  %112 = fmul float %106, %111\l  %113 = tail call float @llvm.log2.f32(float %112)\l  %114 = fmul float %113, 0x3FE62E42E0000000\l  %115 = tail call i1 @llvm.amdgcn.class.f32(float %113, i32 519)\l  %116 = fneg float %114\l  %117 = tail call float @llvm.fma.f32(float %113, float 0x3FE62E42E0000000,\l... float %116)\l  %118 = tail call float @llvm.fma.f32(float %113, float 0x3E6EFA39E0000000,\l... float %117)\l  %119 = fadd float %114, %118\l  %120 = select i1 %115, float %113, float %119\l  %121 = select i1 %110, float 0x40362E4300000000, float 0.000000e+00\l  %122 = fsub float %120, %121\l  %123 = fmul contract float %122, -2.000000e+00\l  %124 = fcmp olt float %123, 0x39F0000000000000\l  %125 = select i1 %124, float 0x41F0000000000000, float 1.000000e+00\l  %126 = fmul float %123, %125\l  %127 = tail call float @llvm.sqrt.f32(float %126)\l  %128 = bitcast float %127 to i32\l  %129 = add nsw i32 %128, -1\l  %130 = bitcast i32 %129 to float\l  %131 = add nsw i32 %128, 1\l  %132 = bitcast i32 %131 to float\l  %133 = tail call i1 @llvm.amdgcn.class.f32(float %126, i32 608)\l  %134 = select i1 %124, float 0x3EF0000000000000, float 1.000000e+00\l  %135 = fneg float %132\l  %136 = tail call float @llvm.fma.f32(float %135, float %127, float %126)\l  %137 = fcmp ogt float %136, 0.000000e+00\l  %138 = fneg float %130\l  %139 = tail call float @llvm.fma.f32(float %138, float %127, float %126)\l  %140 = fcmp ole float %139, 0.000000e+00\l  %141 = select i1 %140, float %130, float %127\l  %142 = select i1 %137, float %132, float %141\l  %143 = fmul float %134, %142\l  %144 = select i1 %133, float %126, float %143\l  %145 = tail call float @llvm.sin.f32(float %109)\l  %146 = fmul contract float %145, %144\l  %147 = fpext float %146 to double\l  %148 = fmul contract double %147, %5\l  %149 = fcmp olt float %4, 0x39F0000000000000\l  %150 = select i1 %149, float 0x41F0000000000000, float 1.000000e+00\l  %151 = fmul float %150, %4\l  %152 = tail call float @llvm.sqrt.f32(float %151)\l  %153 = bitcast float %152 to i32\l  %154 = add nsw i32 %153, -1\l  %155 = bitcast i32 %154 to float\l  %156 = add nsw i32 %153, 1\l  %157 = bitcast i32 %156 to float\l  %158 = tail call i1 @llvm.amdgcn.class.f32(float %151, i32 608)\l  %159 = select i1 %149, float 0x3EF0000000000000, float 1.000000e+00\l  %160 = fneg float %157\l  %161 = tail call float @llvm.fma.f32(float %160, float %152, float %151)\l  %162 = fcmp ogt float %161, 0.000000e+00\l  %163 = fneg float %155\l  %164 = tail call float @llvm.fma.f32(float %163, float %152, float %151)\l  %165 = fcmp ole float %164, 0.000000e+00\l  %166 = select i1 %165, float %155, float %152\l  %167 = select i1 %162, float %157, float %166\l  %168 = fmul float %159, %167\l  %169 = select i1 %158, float %151, float %168\l  %170 = fpext float %169 to double\l  %171 = fmul contract double %148, %170\l  %172 = fpext float %4 to double\l  %173 = fmul contract double %68, %172\l  %174 = fadd contract double %46, %173\l  %175 = fadd contract double %174, %171\l  store double %175, double addrspace(1)* %35, align 8, !tbaa !7\l  br label %176\l}"];
	Node0x5c6d120 -> Node0x5c6d1b0;
	Node0x5c6d1b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%176:\l176:                                              \l  ret void\l}"];
}
