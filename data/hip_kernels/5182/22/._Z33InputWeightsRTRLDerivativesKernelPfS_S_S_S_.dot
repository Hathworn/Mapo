digraph "CFG for '_Z33InputWeightsRTRLDerivativesKernelPfS_S_S_S_' function" {
	label="CFG for '_Z33InputWeightsRTRLDerivativesKernelPfS_S_S_S_' function";

	Node0x56e2220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = udiv i32 %13, %10\l  %17 = mul i32 %16, %10\l  %18 = icmp ugt i32 %13, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %15\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %14\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %22\l  %26 = load i32, i32 addrspace(4)* @D_HIDDEN_UNITS, align 4, !tbaa !16\l  %27 = load i32, i32 addrspace(4)* @D_INPUT_UNITS, align 4, !tbaa !16\l  %28 = mul i32 %27, %26\l  %29 = mul i32 %28, %26\l  %30 = icmp slt i32 %25, %29\l  br i1 %30, label %31, label %188\l|{<s0>T|<s1>F}}"];
	Node0x56e2220:s0 -> Node0x56e4d70;
	Node0x56e2220:s1 -> Node0x56e4e00;
	Node0x56e4d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%31:\l31:                                               \l  %32 = freeze i32 %25\l  %33 = freeze i32 %28\l  %34 = sdiv i32 %32, %33\l  %35 = mul i32 %34, %33\l  %36 = sub i32 %32, %35\l  %37 = freeze i32 %27\l  %38 = sdiv i32 %36, %37\l  %39 = mul i32 %38, %37\l  %40 = sub i32 %36, %39\l  %41 = icmp sgt i32 %26, 0\l  br i1 %41, label %42, label %71\l|{<s0>T|<s1>F}}"];
	Node0x56e4d70:s0 -> Node0x56e5590;
	Node0x56e4d70:s1 -> Node0x56e55e0;
	Node0x56e5590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%42:\l42:                                               \l  %43 = mul nsw i32 %34, %26\l  %44 = and i32 %26, 7\l  %45 = icmp ult i32 %26, 8\l  br i1 %45, label %48, label %46\l|{<s0>T|<s1>F}}"];
	Node0x56e5590:s0 -> Node0x56e5900;
	Node0x56e5590:s1 -> Node0x56e5950;
	Node0x56e5950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%46:\l46:                                               \l  %47 = and i32 %26, -8\l  br label %86\l}"];
	Node0x56e5950 -> Node0x56e5b50;
	Node0x56e5900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%48:\l48:                                               \l  %49 = phi float [ undef, %42 ], [ %184, %86 ]\l  %50 = phi i32 [ 0, %42 ], [ %185, %86 ]\l  %51 = phi float [ 0.000000e+00, %42 ], [ %184, %86 ]\l  %52 = icmp eq i32 %44, 0\l  br i1 %52, label %71, label %53\l|{<s0>T|<s1>F}}"];
	Node0x56e5900:s0 -> Node0x56e55e0;
	Node0x56e5900:s1 -> Node0x56e6dc0;
	Node0x56e6dc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = phi i32 [ %68, %53 ], [ %50, %48 ]\l  %55 = phi float [ %67, %53 ], [ %51, %48 ]\l  %56 = phi i32 [ %69, %53 ], [ 0, %48 ]\l  %57 = add nsw i32 %54, %43\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %2, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %61 = mul nsw i32 %54, %28\l  %62 = add nsw i32 %61, %36\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %4, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %66 = fmul contract float %60, %65\l  %67 = fadd contract float %55, %66\l  %68 = add nuw nsw i32 %54, 1\l  %69 = add i32 %56, 1\l  %70 = icmp eq i32 %69, %44\l  br i1 %70, label %71, label %53, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x56e6dc0:s0 -> Node0x56e55e0;
	Node0x56e6dc0:s1 -> Node0x56e6dc0;
	Node0x56e55e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%71:\l71:                                               \l  %72 = phi float [ 0.000000e+00, %31 ], [ %49, %48 ], [ %67, %53 ]\l  %73 = sext i32 %34 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %76 = icmp eq i32 %34, %38\l  %77 = uitofp i1 %76 to float\l  %78 = sext i32 %40 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %81 = fmul contract float %80, %77\l  %82 = fadd contract float %72, %81\l  %83 = fmul contract float %75, %82\l  %84 = sext i32 %25 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %3, i64 %84\l  store float %83, float addrspace(1)* %85, align 4, !tbaa !20\l  br label %188\l}"];
	Node0x56e55e0 -> Node0x56e4e00;
	Node0x56e5b50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%86:\l86:                                               \l  %87 = phi i32 [ 0, %46 ], [ %185, %86 ]\l  %88 = phi float [ 0.000000e+00, %46 ], [ %184, %86 ]\l  %89 = phi i32 [ 0, %46 ], [ %186, %86 ]\l  %90 = add nsw i32 %87, %43\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %2, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %94 = mul nsw i32 %87, %28\l  %95 = add nsw i32 %94, %36\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %4, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %88, %99\l  %101 = or i32 %87, 1\l  %102 = add nsw i32 %101, %43\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %106 = mul nsw i32 %101, %28\l  %107 = add nsw i32 %106, %36\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %4, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %105, %110\l  %112 = fadd contract float %100, %111\l  %113 = or i32 %87, 2\l  %114 = add nsw i32 %113, %43\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %2, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %118 = mul nsw i32 %113, %28\l  %119 = add nsw i32 %118, %36\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %4, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %112, %123\l  %125 = or i32 %87, 3\l  %126 = add nsw i32 %125, %43\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %2, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %130 = mul nsw i32 %125, %28\l  %131 = add nsw i32 %130, %36\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %4, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %135 = fmul contract float %129, %134\l  %136 = fadd contract float %124, %135\l  %137 = or i32 %87, 4\l  %138 = add nsw i32 %137, %43\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %2, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %142 = mul nsw i32 %137, %28\l  %143 = add nsw i32 %142, %36\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %4, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %136, %147\l  %149 = or i32 %87, 5\l  %150 = add nsw i32 %149, %43\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %2, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %154 = mul nsw i32 %149, %28\l  %155 = add nsw i32 %154, %36\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %4, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %153, %158\l  %160 = fadd contract float %148, %159\l  %161 = or i32 %87, 6\l  %162 = add nsw i32 %161, %43\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %2, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %166 = mul nsw i32 %161, %28\l  %167 = add nsw i32 %166, %36\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %4, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %171 = fmul contract float %165, %170\l  %172 = fadd contract float %160, %171\l  %173 = or i32 %87, 7\l  %174 = add nsw i32 %173, %43\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %2, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %178 = mul nsw i32 %173, %28\l  %179 = add nsw i32 %178, %36\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %4, i64 %180\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %183 = fmul contract float %177, %182\l  %184 = fadd contract float %172, %183\l  %185 = add nuw nsw i32 %87, 8\l  %186 = add i32 %89, 8\l  %187 = icmp eq i32 %186, %47\l  br i1 %187, label %48, label %86, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x56e5b50:s0 -> Node0x56e5900;
	Node0x56e5b50:s1 -> Node0x56e5b50;
	Node0x56e4e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%188:\l188:                                              \l  ret void\l}"];
}
