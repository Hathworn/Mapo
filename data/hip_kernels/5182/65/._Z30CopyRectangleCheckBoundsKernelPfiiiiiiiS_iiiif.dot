digraph "CFG for '_Z30CopyRectangleCheckBoundsKernelPfiiiiiiiS_iiiif' function" {
	label="CFG for '_Z30CopyRectangleCheckBoundsKernelPfiiiiiiiS_iiiif' function";

	Node0x48d1f10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%14:\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %16 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %15, i64 12\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 4, !tbaa !6\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %25 = udiv i32 %22, %19\l  %26 = mul i32 %25, %19\l  %27 = icmp ugt i32 %22, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %24\l  %31 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %32 = add i32 %30, %23\l  %33 = mul i32 %32, %19\l  %34 = add i32 %33, %31\l  %35 = mul nsw i32 %7, %6\l  %36 = icmp slt i32 %34, %35\l  br i1 %36, label %37, label %70\l|{<s0>T|<s1>F}}"];
	Node0x48d1f10:s0 -> Node0x48d3540;
	Node0x48d1f10:s1 -> Node0x48d55d0;
	Node0x48d3540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%37:\l37:                                               \l  %38 = freeze i32 %34\l  %39 = freeze i32 %6\l  %40 = sdiv i32 %38, %39\l  %41 = mul i32 %40, %39\l  %42 = sub i32 %38, %41\l  %43 = add nsw i32 %42, %4\l  %44 = add nsw i32 %40, %5\l  %45 = add nsw i32 %42, %11\l  %46 = add nsw i32 %40, %12\l  %47 = icmp sgt i32 %43, -1\l  br i1 %47, label %48, label %62\l|{<s0>T|<s1>F}}"];
	Node0x48d3540:s0 -> Node0x48d5c70;
	Node0x48d3540:s1 -> Node0x48d5cc0;
	Node0x48d5c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%48:\l48:                                               \l  %49 = icmp slt i32 %43, %2\l  %50 = icmp sgt i32 %44, -1\l  %51 = select i1 %49, i1 %50, i1 false\l  %52 = icmp slt i32 %44, %3\l  %53 = select i1 %51, i1 %52, i1 false\l  br i1 %53, label %54, label %62\l|{<s0>T|<s1>F}}"];
	Node0x48d5c70:s0 -> Node0x48d6110;
	Node0x48d5c70:s1 -> Node0x48d5cc0;
	Node0x48d6110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%54:\l54:                                               \l  %55 = sext i32 %1 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = mul nsw i32 %44, %2\l  %58 = add nsw i32 %57, %43\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %56, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  br label %62\l}"];
	Node0x48d6110 -> Node0x48d5cc0;
	Node0x48d5cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%62:\l62:                                               \l  %63 = phi float [ %61, %54 ], [ %13, %48 ], [ %13, %37 ]\l  %64 = sext i32 %9 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %8, i64 %64\l  %66 = mul nsw i32 %46, %10\l  %67 = add nsw i32 %66, %45\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %65, i64 %68\l  store float %63, float addrspace(1)* %69, align 4, !tbaa !16\l  br label %70\l}"];
	Node0x48d5cc0 -> Node0x48d55d0;
	Node0x48d55d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  ret void\l}"];
}
