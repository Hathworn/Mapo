digraph "CFG for '_Z16Matrix_sin_naivePKfiiPfi' function" {
	label="CFG for '_Z16Matrix_sin_naivePKfiiPfi' function";

	Node0x55c91b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = udiv i32 %13, %10\l  %17 = mul i32 %16, %10\l  %18 = icmp ugt i32 %13, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %15\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %14\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %22\l  %26 = icmp slt i32 %25, %4\l  br i1 %26, label %27, label %174\l|{<s0>T|<s1>F}}"];
	Node0x55c91b0:s0 -> Node0x55cb9c0;
	Node0x55c91b0:s1 -> Node0x55cba50;
	Node0x55cb9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%27:\l27:                                               \l  %28 = sext i32 %25 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %31 = tail call float @llvm.fabs.f32(float %30)\l  %32 = fcmp olt float %31, 1.310720e+05\l  br i1 %32, label %33, label %41\l|{<s0>T|<s1>F}}"];
	Node0x55cb9c0:s0 -> Node0x55cb0a0;
	Node0x55cb9c0:s1 -> Node0x55cb130;
	Node0x55cb0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%33:\l33:                                               \l  %34 = fmul float %31, 0x3FE45F3060000000\l  %35 = tail call float @llvm.rint.f32(float %34)\l  %36 = tail call float @llvm.fma.f32(float %35, float 0xBFF921FB40000000,\l... float %31)\l  %37 = tail call float @llvm.fma.f32(float %35, float 0xBE74442D00000000,\l... float %36)\l  %38 = tail call float @llvm.fma.f32(float %35, float 0xBCF8469880000000,\l... float %37)\l  %39 = fptosi float %35 to i32\l  %40 = bitcast float %31 to i32\l  br label %147\l}"];
	Node0x55cb0a0 -> Node0x55cdd80;
	Node0x55cb130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%41:\l41:                                               \l  %42 = bitcast float %31 to i32\l  %43 = lshr i32 %42, 23\l  %44 = and i32 %42, 8388607\l  %45 = or i32 %44, 8388608\l  %46 = zext i32 %45 to i64\l  %47 = mul nuw nsw i64 %46, 4266746795\l  %48 = trunc i64 %47 to i32\l  %49 = lshr i64 %47, 32\l  %50 = mul nuw nsw i64 %46, 1011060801\l  %51 = add nuw nsw i64 %49, %50\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %46, 3680671129\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = mul nuw nsw i64 %46, 4113882560\l  %59 = add nuw nsw i64 %57, %58\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = mul nuw nsw i64 %46, 4230436817\l  %63 = add nuw nsw i64 %61, %62\l  %64 = trunc i64 %63 to i32\l  %65 = lshr i64 %63, 32\l  %66 = mul nuw nsw i64 %46, 1313084713\l  %67 = add nuw nsw i64 %65, %66\l  %68 = trunc i64 %67 to i32\l  %69 = lshr i64 %67, 32\l  %70 = mul nuw nsw i64 %46, 2734261102\l  %71 = add nuw nsw i64 %69, %70\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = trunc i64 %73 to i32\l  %75 = add nsw i32 %43, -120\l  %76 = icmp ugt i32 %75, 63\l  %77 = select i1 %76, i32 %68, i32 %74\l  %78 = select i1 %76, i32 %64, i32 %72\l  %79 = select i1 %76, i32 %60, i32 %68\l  %80 = select i1 %76, i32 %56, i32 %64\l  %81 = select i1 %76, i32 %52, i32 %60\l  %82 = select i1 %76, i32 %48, i32 %56\l  %83 = select i1 %76, i32 -64, i32 0\l  %84 = add nsw i32 %83, %75\l  %85 = icmp ugt i32 %84, 31\l  %86 = select i1 %85, i32 %78, i32 %77\l  %87 = select i1 %85, i32 %79, i32 %78\l  %88 = select i1 %85, i32 %80, i32 %79\l  %89 = select i1 %85, i32 %81, i32 %80\l  %90 = select i1 %85, i32 %82, i32 %81\l  %91 = select i1 %85, i32 -32, i32 0\l  %92 = add nsw i32 %91, %84\l  %93 = icmp ugt i32 %92, 31\l  %94 = select i1 %93, i32 %87, i32 %86\l  %95 = select i1 %93, i32 %88, i32 %87\l  %96 = select i1 %93, i32 %89, i32 %88\l  %97 = select i1 %93, i32 %90, i32 %89\l  %98 = select i1 %93, i32 -32, i32 0\l  %99 = add nsw i32 %98, %92\l  %100 = icmp eq i32 %99, 0\l  %101 = sub nsw i32 32, %99\l  %102 = tail call i32 @llvm.fshr.i32(i32 %94, i32 %95, i32 %101)\l  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %101)\l  %104 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %101)\l  %105 = select i1 %100, i32 %94, i32 %102\l  %106 = select i1 %100, i32 %95, i32 %103\l  %107 = select i1 %100, i32 %96, i32 %104\l  %108 = lshr i32 %105, 29\l  %109 = tail call i32 @llvm.fshl.i32(i32 %105, i32 %106, i32 2)\l  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 2)\l  %111 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %97, i32 2)\l  %112 = and i32 %108, 1\l  %113 = sub nsw i32 0, %112\l  %114 = shl i32 %108, 31\l  %115 = xor i32 %109, %113\l  %116 = xor i32 %110, %113\l  %117 = xor i32 %111, %113\l  %118 = tail call i32 @llvm.ctlz.i32(i32 %115, i1 false), !range !20\l  %119 = sub nsw i32 31, %118\l  %120 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %116, i32 %119)\l  %121 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %119)\l  %122 = shl nuw nsw i32 %118, 23\l  %123 = sub nuw nsw i32 1056964608, %122\l  %124 = lshr i32 %120, 9\l  %125 = or i32 %124, %123\l  %126 = or i32 %125, %114\l  %127 = bitcast i32 %126 to float\l  %128 = tail call i32 @llvm.fshl.i32(i32 %120, i32 %121, i32 23)\l  %129 = tail call i32 @llvm.ctlz.i32(i32 %128, i1 false), !range !20\l  %130 = fmul float %127, 0x3FF921FB40000000\l  %131 = add nuw nsw i32 %129, %118\l  %132 = shl nuw nsw i32 %131, 23\l  %133 = sub nuw nsw i32 855638016, %132\l  %134 = sub nsw i32 31, %129\l  %135 = tail call i32 @llvm.fshr.i32(i32 %128, i32 %121, i32 %134)\l  %136 = lshr i32 %135, 9\l  %137 = or i32 %133, %136\l  %138 = or i32 %137, %114\l  %139 = bitcast i32 %138 to float\l  %140 = fneg float %130\l  %141 = tail call float @llvm.fma.f32(float %127, float 0x3FF921FB40000000,\l... float %140)\l  %142 = tail call float @llvm.fma.f32(float %127, float 0x3E74442D00000000,\l... float %141)\l  %143 = tail call float @llvm.fma.f32(float %139, float 0x3FF921FB40000000,\l... float %142)\l  %144 = fadd float %130, %143\l  %145 = lshr i32 %105, 30\l  %146 = add nuw nsw i32 %112, %145\l  br label %147\l}"];
	Node0x55cb130 -> Node0x55cdd80;
	Node0x55cdd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%147:\l147:                                              \l  %148 = phi i32 [ %40, %33 ], [ %42, %41 ]\l  %149 = phi float [ %38, %33 ], [ %144, %41 ]\l  %150 = phi i32 [ %39, %33 ], [ %146, %41 ]\l  %151 = fmul float %149, %149\l  %152 = tail call float @llvm.fmuladd.f32(float %151, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %153 = tail call float @llvm.fmuladd.f32(float %151, float %152, float\l... 0xBFC55553A0000000)\l  %154 = fmul float %151, %153\l  %155 = tail call float @llvm.fmuladd.f32(float %149, float %154, float %149)\l  %156 = tail call float @llvm.fmuladd.f32(float %151, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %157 = tail call float @llvm.fmuladd.f32(float %151, float %156, float\l... 0x3FA5557EE0000000)\l  %158 = tail call float @llvm.fmuladd.f32(float %151, float %157, float\l... 0xBFE0000080000000)\l  %159 = tail call float @llvm.fmuladd.f32(float %151, float %158, float\l... 1.000000e+00)\l  %160 = and i32 %150, 1\l  %161 = icmp eq i32 %160, 0\l  %162 = select i1 %161, float %155, float %159\l  %163 = bitcast float %162 to i32\l  %164 = shl i32 %150, 30\l  %165 = and i32 %164, -2147483648\l  %166 = bitcast float %30 to i32\l  %167 = xor i32 %148, %166\l  %168 = xor i32 %167, %165\l  %169 = xor i32 %168, %163\l  %170 = bitcast i32 %169 to float\l  %171 = tail call i1 @llvm.amdgcn.class.f32(float %31, i32 504)\l  %172 = select i1 %171, float %170, float 0x7FF8000000000000\l  %173 = getelementptr inbounds float, float addrspace(1)* %3, i64 %28\l  store float %172, float addrspace(1)* %173, align 4, !tbaa !16\l  br label %174\l}"];
	Node0x55cdd80 -> Node0x55cba50;
	Node0x55cba50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%174:\l174:                                              \l  ret void\l}"];
}
