digraph "CFG for '_Z16MatMultipl_naivePfS_S_iii' function" {
	label="CFG for '_Z16MatMultipl_naivePfS_S_iii' function";

	Node0x4c19cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = mul nsw i32 %23, %4\l  %25 = add nsw i32 %24, %15\l  %26 = icmp slt i32 %25, %5\l  br i1 %26, label %27, label %164\l|{<s0>T|<s1>F}}"];
	Node0x4c19cf0:s0 -> Node0x4c1d720;
	Node0x4c19cf0:s1 -> Node0x4c1d7b0;
	Node0x4c1d720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%27:\l27:                                               \l  %28 = icmp sgt i32 %3, 0\l  br i1 %28, label %29, label %58\l|{<s0>T|<s1>F}}"];
	Node0x4c1d720:s0 -> Node0x4c1d9b0;
	Node0x4c1d720:s1 -> Node0x4c1da00;
	Node0x4c1d9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %23, %3\l  %31 = and i32 %3, 7\l  %32 = icmp ult i32 %3, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4c1d9b0:s0 -> Node0x4c1bd10;
	Node0x4c1d9b0:s1 -> Node0x4c1bd60;
	Node0x4c1bd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %3, -8\l  br label %62\l}"];
	Node0x4c1bd60 -> Node0x4c1e0a0;
	Node0x4c1bd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %29 ], [ %160, %62 ]\l  %37 = phi i32 [ 0, %29 ], [ %161, %62 ]\l  %38 = phi float [ 0.000000e+00, %29 ], [ %160, %62 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %58, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4c1bd10:s0 -> Node0x4c1da00;
	Node0x4c1bd10:s1 -> Node0x4c1f310;
	Node0x4c1f310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ %55, %40 ], [ %37, %35 ]\l  %42 = phi float [ %54, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %56, %40 ], [ 0, %35 ]\l  %44 = add nsw i32 %41, %30\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %48 = mul nsw i32 %41, %4\l  %49 = add nsw i32 %48, %15\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fmul contract float %47, %52\l  %54 = fadd contract float %42, %53\l  %55 = add nuw nsw i32 %41, 1\l  %56 = add i32 %43, 1\l  %57 = icmp eq i32 %56, %31\l  br i1 %57, label %58, label %40, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4c1f310:s0 -> Node0x4c1da00;
	Node0x4c1f310:s1 -> Node0x4c1f310;
	Node0x4c1da00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%58:\l58:                                               \l  %59 = phi float [ 0.000000e+00, %27 ], [ %36, %35 ], [ %54, %40 ]\l  %60 = sext i32 %25 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  store float %59, float addrspace(1)* %61, align 4, !tbaa !7\l  br label %164\l}"];
	Node0x4c1da00 -> Node0x4c1d7b0;
	Node0x4c1e0a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i32 [ 0, %33 ], [ %161, %62 ]\l  %64 = phi float [ 0.000000e+00, %33 ], [ %160, %62 ]\l  %65 = phi i32 [ 0, %33 ], [ %162, %62 ]\l  %66 = add nsw i32 %63, %30\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = mul nsw i32 %63, %4\l  %71 = add nsw i32 %70, %15\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = fmul contract float %69, %74\l  %76 = fadd contract float %64, %75\l  %77 = or i32 %63, 1\l  %78 = add nsw i32 %77, %30\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = mul nsw i32 %77, %4\l  %83 = add nsw i32 %82, %15\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = fmul contract float %81, %86\l  %88 = fadd contract float %76, %87\l  %89 = or i32 %63, 2\l  %90 = add nsw i32 %89, %30\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = mul nsw i32 %89, %4\l  %95 = add nsw i32 %94, %15\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %88, %99\l  %101 = or i32 %63, 3\l  %102 = add nsw i32 %101, %30\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = mul nsw i32 %101, %4\l  %107 = add nsw i32 %106, %15\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %105, %110\l  %112 = fadd contract float %100, %111\l  %113 = or i32 %63, 4\l  %114 = add nsw i32 %113, %30\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = mul nsw i32 %113, %4\l  %119 = add nsw i32 %118, %15\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %112, %123\l  %125 = or i32 %63, 5\l  %126 = add nsw i32 %125, %30\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = mul nsw i32 %125, %4\l  %131 = add nsw i32 %130, %15\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = fmul contract float %129, %134\l  %136 = fadd contract float %124, %135\l  %137 = or i32 %63, 6\l  %138 = add nsw i32 %137, %30\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %0, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = mul nsw i32 %137, %4\l  %143 = add nsw i32 %142, %15\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %136, %147\l  %149 = or i32 %63, 7\l  %150 = add nsw i32 %149, %30\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = mul nsw i32 %149, %4\l  %155 = add nsw i32 %154, %15\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %153, %158\l  %160 = fadd contract float %148, %159\l  %161 = add nuw nsw i32 %63, 8\l  %162 = add i32 %65, 8\l  %163 = icmp eq i32 %162, %34\l  br i1 %163, label %35, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4c1e0a0:s0 -> Node0x4c1bd10;
	Node0x4c1e0a0:s1 -> Node0x4c1e0a0;
	Node0x4c1d7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%164:\l164:                                              \l  ret void\l}"];
}
