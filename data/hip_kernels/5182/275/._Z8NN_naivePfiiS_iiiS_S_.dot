digraph "CFG for '_Z8NN_naivePfiiS_iiiS_S_' function" {
	label="CFG for '_Z8NN_naivePfiiS_iiiS_S_' function";

	Node0x48d6a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%9:\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !6\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = udiv i32 %17, %14\l  %21 = mul i32 %20, %14\l  %22 = icmp ugt i32 %17, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %19\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %27 = add i32 %25, %18\l  %28 = mul i32 %27, %14\l  %29 = add i32 %28, %26\l  %30 = mul nsw i32 %5, %4\l  %31 = icmp sgt i32 %30, 0\l  br i1 %31, label %32, label %43\l|{<s0>T|<s1>F}}"];
	Node0x48d6a80:s0 -> Node0x48d9e80;
	Node0x48d6a80:s1 -> Node0x48d9f10;
	Node0x48d9e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%32:\l32:                                               \l  %33 = mul nsw i32 %29, %1\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = icmp sgt i32 %6, 0\l  %37 = and i32 %6, 7\l  %38 = icmp ult i32 %6, 8\l  %39 = and i32 %6, -8\l  %40 = icmp eq i32 %37, 0\l  br label %49\l}"];
	Node0x48d9e80 -> Node0x48da660;
	Node0x48da720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%41:\l41:                                               \l  %42 = sitofp i32 %178 to float\l  br label %43\l}"];
	Node0x48da720 -> Node0x48d9f10;
	Node0x48d9f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%43:\l43:                                               \l  %44 = phi float [ -1.000000e+00, %9 ], [ %42, %41 ]\l  %45 = phi float [ 9.999900e+04, %9 ], [ %179, %41 ]\l  %46 = sext i32 %29 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %8, i64 %46\l  store float %45, float addrspace(1)* %47, align 4, !tbaa !16\l  %48 = getelementptr inbounds float, float addrspace(1)* %7, i64 %46\l  store float %44, float addrspace(1)* %48, align 4, !tbaa !16\l  ret void\l}"];
	Node0x48da660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%49:\l49:                                               \l  %50 = phi float [ 9.999900e+04, %32 ], [ %179, %154 ]\l  %51 = phi i32 [ 0, %32 ], [ %180, %154 ]\l  %52 = phi i32 [ -1, %32 ], [ %178, %154 ]\l  %53 = mul nsw i32 %51, %4\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %3, i64 %54\l  br i1 %36, label %56, label %154\l|{<s0>T|<s1>F}}"];
	Node0x48da660:s0 -> Node0x48dc3f0;
	Node0x48da660:s1 -> Node0x48dbf80;
	Node0x48dc3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%56:\l56:                                               \l  br i1 %38, label %135, label %57\l|{<s0>T|<s1>F}}"];
	Node0x48dc3f0:s0 -> Node0x48dc530;
	Node0x48dc3f0:s1 -> Node0x48dc580;
	Node0x48dc580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%57:\l57:                                               \l  %58 = phi i32 [ %132, %57 ], [ 0, %56 ]\l  %59 = phi float [ %131, %57 ], [ 0.000000e+00, %56 ]\l  %60 = phi i32 [ %133, %57 ], [ 0, %56 ]\l  %61 = zext i32 %58 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %35, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %64 = getelementptr inbounds float, float addrspace(1)* %55, i64 %61\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %66 = fsub contract float %63, %65\l  %67 = fmul contract float %66, %66\l  %68 = fadd contract float %59, %67\l  %69 = or i32 %58, 1\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %35, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %73 = getelementptr inbounds float, float addrspace(1)* %55, i64 %70\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %75 = fsub contract float %72, %74\l  %76 = fmul contract float %75, %75\l  %77 = fadd contract float %68, %76\l  %78 = or i32 %58, 2\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %35, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %82 = getelementptr inbounds float, float addrspace(1)* %55, i64 %79\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %84 = fsub contract float %81, %83\l  %85 = fmul contract float %84, %84\l  %86 = fadd contract float %77, %85\l  %87 = or i32 %58, 3\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %35, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %91 = getelementptr inbounds float, float addrspace(1)* %55, i64 %88\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %93 = fsub contract float %90, %92\l  %94 = fmul contract float %93, %93\l  %95 = fadd contract float %86, %94\l  %96 = or i32 %58, 4\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %35, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %100 = getelementptr inbounds float, float addrspace(1)* %55, i64 %97\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %102 = fsub contract float %99, %101\l  %103 = fmul contract float %102, %102\l  %104 = fadd contract float %95, %103\l  %105 = or i32 %58, 5\l  %106 = zext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %35, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %109 = getelementptr inbounds float, float addrspace(1)* %55, i64 %106\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %111 = fsub contract float %108, %110\l  %112 = fmul contract float %111, %111\l  %113 = fadd contract float %104, %112\l  %114 = or i32 %58, 6\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %35, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %118 = getelementptr inbounds float, float addrspace(1)* %55, i64 %115\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %120 = fsub contract float %117, %119\l  %121 = fmul contract float %120, %120\l  %122 = fadd contract float %113, %121\l  %123 = or i32 %58, 7\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %35, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %127 = getelementptr inbounds float, float addrspace(1)* %55, i64 %124\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %129 = fsub contract float %126, %128\l  %130 = fmul contract float %129, %129\l  %131 = fadd contract float %122, %130\l  %132 = add nuw nsw i32 %58, 8\l  %133 = add i32 %60, 8\l  %134 = icmp eq i32 %133, %39\l  br i1 %134, label %135, label %57, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x48dc580:s0 -> Node0x48dc530;
	Node0x48dc580:s1 -> Node0x48dc580;
	Node0x48dc530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%135:\l135:                                              \l  %136 = phi float [ undef, %56 ], [ %131, %57 ]\l  %137 = phi i32 [ 0, %56 ], [ %132, %57 ]\l  %138 = phi float [ 0.000000e+00, %56 ], [ %131, %57 ]\l  br i1 %40, label %154, label %139\l|{<s0>T|<s1>F}}"];
	Node0x48dc530:s0 -> Node0x48dbf80;
	Node0x48dc530:s1 -> Node0x48e0ab0;
	Node0x48e0ab0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%139:\l139:                                              \l  %140 = phi i32 [ %151, %139 ], [ %137, %135 ]\l  %141 = phi float [ %150, %139 ], [ %138, %135 ]\l  %142 = phi i32 [ %152, %139 ], [ 0, %135 ]\l  %143 = zext i32 %140 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %35, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %146 = getelementptr inbounds float, float addrspace(1)* %55, i64 %143\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %148 = fsub contract float %145, %147\l  %149 = fmul contract float %148, %148\l  %150 = fadd contract float %141, %149\l  %151 = add nuw nsw i32 %140, 1\l  %152 = add i32 %142, 1\l  %153 = icmp eq i32 %152, %37\l  br i1 %153, label %154, label %139, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x48e0ab0:s0 -> Node0x48dbf80;
	Node0x48e0ab0:s1 -> Node0x48e0ab0;
	Node0x48dbf80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%154:\l154:                                              \l  %155 = phi float [ 0.000000e+00, %49 ], [ %136, %135 ], [ %150, %139 ]\l  %156 = fcmp olt float %155, 0x39F0000000000000\l  %157 = select i1 %156, float 0x41F0000000000000, float 1.000000e+00\l  %158 = fmul float %155, %157\l  %159 = tail call float @llvm.sqrt.f32(float %158)\l  %160 = bitcast float %159 to i32\l  %161 = add nsw i32 %160, -1\l  %162 = bitcast i32 %161 to float\l  %163 = add nsw i32 %160, 1\l  %164 = bitcast i32 %163 to float\l  %165 = tail call i1 @llvm.amdgcn.class.f32(float %158, i32 608)\l  %166 = select i1 %156, float 0x3EF0000000000000, float 1.000000e+00\l  %167 = fneg float %164\l  %168 = tail call float @llvm.fma.f32(float %167, float %159, float %158)\l  %169 = fcmp ogt float %168, 0.000000e+00\l  %170 = fneg float %162\l  %171 = tail call float @llvm.fma.f32(float %170, float %159, float %158)\l  %172 = fcmp ole float %171, 0.000000e+00\l  %173 = select i1 %172, float %162, float %159\l  %174 = select i1 %169, float %164, float %173\l  %175 = fmul float %166, %174\l  %176 = select i1 %165, float %158, float %175\l  %177 = fcmp contract ogt float %50, %176\l  %178 = select i1 %177, i32 %51, i32 %52\l  %179 = select i1 %177, float %176, float %50\l  %180 = add nsw i32 %51, %4\l  %181 = icmp slt i32 %180, %30\l  br i1 %181, label %49, label %41, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x48dbf80:s0 -> Node0x48da660;
	Node0x48dbf80:s1 -> Node0x48da720;
}
