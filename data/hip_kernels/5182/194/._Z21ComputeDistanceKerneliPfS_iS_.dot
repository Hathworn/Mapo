digraph "CFG for '_Z21ComputeDistanceKerneliPfS_iS_' function" {
	label="CFG for '_Z21ComputeDistanceKerneliPfS_iS_' function";

	Node0x5cc92d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = udiv i32 %13, %10\l  %17 = mul i32 %16, %10\l  %18 = icmp ugt i32 %13, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %15\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %14\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %22\l  %26 = icmp slt i32 %25, %3\l  br i1 %26, label %27, label %176\l|{<s0>T|<s1>F}}"];
	Node0x5cc92d0:s0 -> Node0x5ccbb20;
	Node0x5cc92d0:s1 -> Node0x5ccbbb0;
	Node0x5ccbb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%27:\l27:                                               \l  %28 = icmp sgt i32 %0, 0\l  br i1 %28, label %29, label %57\l|{<s0>T|<s1>F}}"];
	Node0x5ccbb20:s0 -> Node0x5ccbd80;
	Node0x5ccbb20:s1 -> Node0x5ccbdd0;
	Node0x5ccbd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %25, %0\l  %31 = and i32 %0, 7\l  %32 = icmp ult i32 %0, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5ccbd80:s0 -> Node0x5ccb200;
	Node0x5ccbd80:s1 -> Node0x5ccb250;
	Node0x5ccb250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %0, -8\l  br label %82\l}"];
	Node0x5ccb250 -> Node0x5ccc470;
	Node0x5ccb200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %29 ], [ %172, %82 ]\l  %37 = phi i32 [ 0, %29 ], [ %173, %82 ]\l  %38 = phi float [ 0.000000e+00, %29 ], [ %172, %82 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %57, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5ccb200:s0 -> Node0x5ccbdd0;
	Node0x5ccb200:s1 -> Node0x5ccd6e0;
	Node0x5ccd6e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ %54, %40 ], [ %37, %35 ]\l  %42 = phi float [ %53, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %55, %40 ], [ 0, %35 ]\l  %44 = add nsw i32 %41, %30\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %4, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %48 = zext i32 %41 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %2, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %51 = fmul contract float %47, %50\l  %52 = fmul contract float %47, %51\l  %53 = fadd contract float %42, %52\l  %54 = add nuw nsw i32 %41, 1\l  %55 = add i32 %43, 1\l  %56 = icmp eq i32 %55, %31\l  br i1 %56, label %57, label %40, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5ccd6e0:s0 -> Node0x5ccbdd0;
	Node0x5ccd6e0:s1 -> Node0x5ccd6e0;
	Node0x5ccbdd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %27 ], [ %36, %35 ], [ %53, %40 ]\l  %59 = fcmp olt float %58, 0x39F0000000000000\l  %60 = select i1 %59, float 0x41F0000000000000, float 1.000000e+00\l  %61 = fmul float %58, %60\l  %62 = tail call float @llvm.sqrt.f32(float %61)\l  %63 = bitcast float %62 to i32\l  %64 = add nsw i32 %63, -1\l  %65 = bitcast i32 %64 to float\l  %66 = add nsw i32 %63, 1\l  %67 = bitcast i32 %66 to float\l  %68 = tail call i1 @llvm.amdgcn.class.f32(float %61, i32 608)\l  %69 = select i1 %59, float 0x3EF0000000000000, float 1.000000e+00\l  %70 = fneg float %67\l  %71 = tail call float @llvm.fma.f32(float %70, float %62, float %61)\l  %72 = fcmp ogt float %71, 0.000000e+00\l  %73 = fneg float %65\l  %74 = tail call float @llvm.fma.f32(float %73, float %62, float %61)\l  %75 = fcmp ole float %74, 0.000000e+00\l  %76 = select i1 %75, float %65, float %62\l  %77 = select i1 %72, float %67, float %76\l  %78 = fmul float %69, %77\l  %79 = select i1 %68, float %61, float %78\l  %80 = sext i32 %25 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  store float %79, float addrspace(1)* %81, align 4, !tbaa !16\l  br label %176\l}"];
	Node0x5ccbdd0 -> Node0x5ccbbb0;
	Node0x5ccc470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%82:\l82:                                               \l  %83 = phi i32 [ 0, %33 ], [ %173, %82 ]\l  %84 = phi float [ 0.000000e+00, %33 ], [ %172, %82 ]\l  %85 = phi i32 [ 0, %33 ], [ %174, %82 ]\l  %86 = add nsw i32 %83, %30\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %4, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %90 = zext i32 %83 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %93 = fmul contract float %89, %92\l  %94 = fmul contract float %89, %93\l  %95 = fadd contract float %84, %94\l  %96 = or i32 %83, 1\l  %97 = add nsw i32 %96, %30\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %4, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %101 = zext i32 %96 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %2, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %104 = fmul contract float %100, %103\l  %105 = fmul contract float %100, %104\l  %106 = fadd contract float %95, %105\l  %107 = or i32 %83, 2\l  %108 = add nsw i32 %107, %30\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %4, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %112 = zext i32 %107 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %2, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %115 = fmul contract float %111, %114\l  %116 = fmul contract float %111, %115\l  %117 = fadd contract float %106, %116\l  %118 = or i32 %83, 3\l  %119 = add nsw i32 %118, %30\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %4, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %123 = zext i32 %118 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %122, %125\l  %127 = fmul contract float %122, %126\l  %128 = fadd contract float %117, %127\l  %129 = or i32 %83, 4\l  %130 = add nsw i32 %129, %30\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %4, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %134 = zext i32 %129 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %2, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %137 = fmul contract float %133, %136\l  %138 = fmul contract float %133, %137\l  %139 = fadd contract float %128, %138\l  %140 = or i32 %83, 5\l  %141 = add nsw i32 %140, %30\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %4, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %145 = zext i32 %140 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %2, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %148 = fmul contract float %144, %147\l  %149 = fmul contract float %144, %148\l  %150 = fadd contract float %139, %149\l  %151 = or i32 %83, 6\l  %152 = add nsw i32 %151, %30\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %4, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %156 = zext i32 %151 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %2, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %155, %158\l  %160 = fmul contract float %155, %159\l  %161 = fadd contract float %150, %160\l  %162 = or i32 %83, 7\l  %163 = add nsw i32 %162, %30\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %4, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %167 = zext i32 %162 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %2, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %170 = fmul contract float %166, %169\l  %171 = fmul contract float %166, %170\l  %172 = fadd contract float %161, %171\l  %173 = add nuw nsw i32 %83, 8\l  %174 = add i32 %85, 8\l  %175 = icmp eq i32 %174, %34\l  br i1 %175, label %35, label %82, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5ccc470:s0 -> Node0x5ccb200;
	Node0x5ccc470:s1 -> Node0x5ccc470;
	Node0x5ccbbb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%176:\l176:                                              \l  ret void\l}"];
}
