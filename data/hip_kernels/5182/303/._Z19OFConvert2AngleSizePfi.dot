digraph "CFG for '_Z19OFConvert2AngleSizePfi' function" {
	label="CFG for '_Z19OFConvert2AngleSizePfi' function";

	Node0x4812490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %4 = getelementptr i8, i8 addrspace(4)* %3, i64 4\l  %5 = bitcast i8 addrspace(4)* %4 to i16 addrspace(4)*\l  %6 = load i16, i16 addrspace(4)* %5, align 4, !range !4, !invariant.load !5\l  %7 = zext i16 %6 to i32\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %3, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !6\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %13 = udiv i32 %10, %7\l  %14 = mul i32 %13, %7\l  %15 = icmp ugt i32 %10, %14\l  %16 = zext i1 %15 to i32\l  %17 = add i32 %13, %16\l  %18 = mul i32 %17, %12\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %20 = add i32 %18, %11\l  %21 = mul i32 %20, %7\l  %22 = add i32 %21, %19\l  %23 = icmp slt i32 %22, %1\l  br i1 %23, label %24, label %89\l|{<s0>T|<s1>F}}"];
	Node0x4812490:s0 -> Node0x4814ce0;
	Node0x4812490:s1 -> Node0x4814d70;
	Node0x4814ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%24:\l24:                                               \l  %25 = sext i32 %22 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %0, i64 %25\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %28 = add nsw i32 %22, %1\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %32 = fadd contract float %27, %31\l  %33 = fmul contract float %32, %32\l  %34 = fcmp olt float %33, 0x39F0000000000000\l  %35 = select i1 %34, float 0x41F0000000000000, float 1.000000e+00\l  %36 = fmul float %33, %35\l  %37 = tail call float @llvm.sqrt.f32(float %36)\l  %38 = bitcast float %37 to i32\l  %39 = add nsw i32 %38, -1\l  %40 = bitcast i32 %39 to float\l  %41 = add nsw i32 %38, 1\l  %42 = bitcast i32 %41 to float\l  %43 = tail call i1 @llvm.amdgcn.class.f32(float %36, i32 608)\l  %44 = select i1 %34, float 0x3EF0000000000000, float 1.000000e+00\l  %45 = fneg float %42\l  %46 = tail call float @llvm.fma.f32(float %45, float %37, float %36)\l  %47 = fcmp ogt float %46, 0.000000e+00\l  %48 = fneg float %40\l  %49 = tail call float @llvm.fma.f32(float %48, float %37, float %36)\l  %50 = fcmp ole float %49, 0.000000e+00\l  %51 = select i1 %50, float %40, float %37\l  %52 = select i1 %47, float %42, float %51\l  %53 = fmul float %44, %52\l  %54 = select i1 %43, float %36, float %53\l  %55 = tail call float @llvm.fabs.f32(float %31)\l  %56 = tail call float @llvm.fabs.f32(float %27)\l  %57 = tail call float @llvm.minnum.f32(float %55, float %56)\l  %58 = tail call float @llvm.maxnum.f32(float %55, float %56)\l  %59 = fdiv float %57, %58, !fpmath !20\l  %60 = fmul float %59, %59\l  %61 = tail call float @llvm.fmuladd.f32(float %60, float 0x3F65A54B00000000,\l... float 0xBF8F4B2180000000)\l  %62 = tail call float @llvm.fmuladd.f32(float %60, float %61, float\l... 0x3FA53F67E0000000)\l  %63 = tail call float @llvm.fmuladd.f32(float %60, float %62, float\l... 0xBFB2FA9AE0000000)\l  %64 = tail call float @llvm.fmuladd.f32(float %60, float %63, float\l... 0x3FBB263640000000)\l  %65 = tail call float @llvm.fmuladd.f32(float %60, float %64, float\l... 0xBFC22C1CC0000000)\l  %66 = tail call float @llvm.fmuladd.f32(float %60, float %65, float\l... 0x3FC99717E0000000)\l  %67 = tail call float @llvm.fmuladd.f32(float %60, float %66, float\l... 0xBFD5554C40000000)\l  %68 = fmul float %60, %67\l  %69 = tail call float @llvm.fmuladd.f32(float %59, float %68, float %59)\l  %70 = fsub float 0x3FF921FB60000000, %69\l  %71 = fcmp ogt float %56, %55\l  %72 = select i1 %71, float %70, float %69\l  %73 = fsub float 0x400921FB60000000, %72\l  %74 = fcmp olt float %31, 0.000000e+00\l  %75 = select i1 %74, float %73, float %72\l  %76 = bitcast float %31 to i32\l  %77 = icmp slt i32 %76, 0\l  %78 = select i1 %77, float 0x400921FB60000000, float 0.000000e+00\l  %79 = fcmp oeq float %27, 0.000000e+00\l  %80 = select i1 %79, float %78, float %75\l  %81 = select i1 %74, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %82 = fcmp oeq float %55, 0x7FF0000000000000\l  %83 = fcmp oeq float %56, 0x7FF0000000000000\l  %84 = and i1 %83, %82\l  %85 = select i1 %84, float %81, float %80\l  %86 = fcmp uno float %31, %27\l  %87 = select i1 %86, float 0x7FF8000000000000, float %85\l  %88 = tail call float @llvm.copysign.f32(float %87, float %27)\l  store float %88, float addrspace(1)* %26, align 4, !tbaa !16\l  store float %54, float addrspace(1)* %30, align 4, !tbaa !16\l  br label %89\l}"];
	Node0x4814ce0 -> Node0x4814d70;
	Node0x4814d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%89:\l89:                                               \l  ret void\l}"];
}
