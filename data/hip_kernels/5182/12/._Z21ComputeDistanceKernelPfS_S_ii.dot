digraph "CFG for '_Z21ComputeDistanceKernelPfS_S_ii' function" {
	label="CFG for '_Z21ComputeDistanceKernelPfS_S_ii' function";

	Node0x4c78ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = udiv i32 %13, %10\l  %17 = mul i32 %16, %10\l  %18 = icmp ugt i32 %13, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %15\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %14\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %22\l  %26 = icmp slt i32 %25, %4\l  br i1 %26, label %27, label %146\l|{<s0>T|<s1>F}}"];
	Node0x4c78ba0:s0 -> Node0x4c7b3f0;
	Node0x4c78ba0:s1 -> Node0x4c7b480;
	Node0x4c7b3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%27:\l27:                                               \l  %28 = icmp sgt i32 %3, 0\l  br i1 %28, label %29, label %56\l|{<s0>T|<s1>F}}"];
	Node0x4c7b3f0:s0 -> Node0x4c7b650;
	Node0x4c7b3f0:s1 -> Node0x4c7b6a0;
	Node0x4c7b650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %25, %3\l  %31 = and i32 %3, 7\l  %32 = icmp ult i32 %3, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4c7b650:s0 -> Node0x4c7aad0;
	Node0x4c7b650:s1 -> Node0x4c7ab20;
	Node0x4c7ab20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %3, -8\l  br label %60\l}"];
	Node0x4c7ab20 -> Node0x4c7bd40;
	Node0x4c7aad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %29 ], [ %142, %60 ]\l  %37 = phi i32 [ 0, %29 ], [ %143, %60 ]\l  %38 = phi float [ 0.000000e+00, %29 ], [ %142, %60 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %56, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4c7aad0:s0 -> Node0x4c7b6a0;
	Node0x4c7aad0:s1 -> Node0x4c7cfb0;
	Node0x4c7cfb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ %53, %40 ], [ %37, %35 ]\l  %42 = phi float [ %52, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %54, %40 ], [ 0, %35 ]\l  %44 = add nsw i32 %41, %30\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %48 = zext i32 %41 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %51 = fmul contract float %47, %50\l  %52 = fadd contract float %42, %51\l  %53 = add nuw nsw i32 %41, 1\l  %54 = add i32 %43, 1\l  %55 = icmp eq i32 %54, %31\l  br i1 %55, label %56, label %40, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4c7cfb0:s0 -> Node0x4c7b6a0;
	Node0x4c7cfb0:s1 -> Node0x4c7cfb0;
	Node0x4c7b6a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%56:\l56:                                               \l  %57 = phi float [ 0.000000e+00, %27 ], [ %36, %35 ], [ %52, %40 ]\l  %58 = sext i32 %25 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %2, i64 %58\l  store float %57, float addrspace(1)* %59, align 4, !tbaa !16\l  br label %146\l}"];
	Node0x4c7b6a0 -> Node0x4c7b480;
	Node0x4c7bd40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%60:\l60:                                               \l  %61 = phi i32 [ 0, %33 ], [ %143, %60 ]\l  %62 = phi float [ 0.000000e+00, %33 ], [ %142, %60 ]\l  %63 = phi i32 [ 0, %33 ], [ %144, %60 ]\l  %64 = add nsw i32 %61, %30\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %68 = zext i32 %61 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %71 = fmul contract float %67, %70\l  %72 = fadd contract float %62, %71\l  %73 = or i32 %61, 1\l  %74 = add nsw i32 %73, %30\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %78 = zext i32 %73 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %81 = fmul contract float %77, %80\l  %82 = fadd contract float %72, %81\l  %83 = or i32 %61, 2\l  %84 = add nsw i32 %83, %30\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %88 = zext i32 %83 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %87, %90\l  %92 = fadd contract float %82, %91\l  %93 = or i32 %61, 3\l  %94 = add nsw i32 %93, %30\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %98 = zext i32 %93 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %101 = fmul contract float %97, %100\l  %102 = fadd contract float %92, %101\l  %103 = or i32 %61, 4\l  %104 = add nsw i32 %103, %30\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %108 = zext i32 %103 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %107, %110\l  %112 = fadd contract float %102, %111\l  %113 = or i32 %61, 5\l  %114 = add nsw i32 %113, %30\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %118 = zext i32 %113 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %121 = fmul contract float %117, %120\l  %122 = fadd contract float %112, %121\l  %123 = or i32 %61, 6\l  %124 = add nsw i32 %123, %30\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %128 = zext i32 %123 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %131 = fmul contract float %127, %130\l  %132 = fadd contract float %122, %131\l  %133 = or i32 %61, 7\l  %134 = add nsw i32 %133, %30\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %0, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %138 = zext i32 %133 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %1, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %141 = fmul contract float %137, %140\l  %142 = fadd contract float %132, %141\l  %143 = add nuw nsw i32 %61, 8\l  %144 = add i32 %63, 8\l  %145 = icmp eq i32 %144, %34\l  br i1 %145, label %35, label %60, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4c7bd40:s0 -> Node0x4c7aad0;
	Node0x4c7bd40:s1 -> Node0x4c7bd40;
	Node0x4c7b480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%146:\l146:                                              \l  ret void\l}"];
}
