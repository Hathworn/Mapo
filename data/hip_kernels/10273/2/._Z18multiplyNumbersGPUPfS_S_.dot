digraph "CFG for '_Z18multiplyNumbersGPUPfS_S_' function" {
	label="CFG for '_Z18multiplyNumbersGPUPfS_S_' function";

	Node0x5496260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %5 = shl i32 %4, 15\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = shl i32 %6, 8\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = add i32 %7, %8\l  %10 = add i32 %9, %5\l  %11 = sext i32 %10 to i64\l  %12 = getelementptr inbounds float, float addrspace(1)* %0, i64 %11\l  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %14 = getelementptr inbounds float, float addrspace(1)* %1, i64 %11\l  %15 = load float, float addrspace(1)* %14, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %16 = fmul contract float %13, %15\l  %17 = fpext float %16 to double\l  %18 = fdiv contract double %17, 0x4028B0FBA8826AA9\l  %19 = fcmp olt double %18, 0x1000000000000000\l  %20 = select i1 %19, double 0x4FF0000000000000, double 1.000000e+00\l  %21 = fmul double %18, %20\l  %22 = tail call double @llvm.amdgcn.rsq.f64(double %21)\l  %23 = fmul double %21, %22\l  %24 = fmul double %22, 5.000000e-01\l  %25 = fneg double %24\l  %26 = tail call double @llvm.fma.f64(double %25, double %23, double\l... 5.000000e-01)\l  %27 = tail call double @llvm.fma.f64(double %24, double %26, double %24)\l  %28 = tail call double @llvm.fma.f64(double %23, double %26, double %23)\l  %29 = fneg double %28\l  %30 = tail call double @llvm.fma.f64(double %29, double %28, double %21)\l  %31 = tail call double @llvm.fma.f64(double %30, double %27, double %28)\l  %32 = tail call float @llvm.fabs.f32(float %13)\l  %33 = fcmp olt float %32, 1.310720e+05\l  br i1 %33, label %34, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5496260:s0 -> Node0x549add0;
	Node0x5496260:s1 -> Node0x549ae20;
	Node0x549add0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%34:\l34:                                               \l  %35 = fmul float %32, 0x3FE45F3060000000\l  %36 = tail call float @llvm.rint.f32(float %35)\l  %37 = tail call float @llvm.fma.f32(float %36, float 0xBFF921FB40000000,\l... float %32)\l  %38 = tail call float @llvm.fma.f32(float %36, float 0xBE74442D00000000,\l... float %37)\l  %39 = tail call float @llvm.fma.f32(float %36, float 0xBCF8469880000000,\l... float %38)\l  %40 = fptosi float %36 to i32\l  %41 = bitcast float %32 to i32\l  br label %148\l}"];
	Node0x549add0 -> Node0x549b8a0;
	Node0x549ae20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%42:\l42:                                               \l  %43 = bitcast float %32 to i32\l  %44 = lshr i32 %43, 23\l  %45 = and i32 %43, 8388607\l  %46 = or i32 %45, 8388608\l  %47 = zext i32 %46 to i64\l  %48 = mul nuw nsw i64 %47, 4266746795\l  %49 = trunc i64 %48 to i32\l  %50 = lshr i64 %48, 32\l  %51 = mul nuw nsw i64 %47, 1011060801\l  %52 = add nuw nsw i64 %50, %51\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = mul nuw nsw i64 %47, 3680671129\l  %56 = add nuw nsw i64 %54, %55\l  %57 = trunc i64 %56 to i32\l  %58 = lshr i64 %56, 32\l  %59 = mul nuw nsw i64 %47, 4113882560\l  %60 = add nuw nsw i64 %58, %59\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %47, 4230436817\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %47, 1313084713\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %47, 2734261102\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = trunc i64 %74 to i32\l  %76 = add nsw i32 %44, -120\l  %77 = icmp ugt i32 %76, 63\l  %78 = select i1 %77, i32 %69, i32 %75\l  %79 = select i1 %77, i32 %65, i32 %73\l  %80 = select i1 %77, i32 %61, i32 %69\l  %81 = select i1 %77, i32 %57, i32 %65\l  %82 = select i1 %77, i32 %53, i32 %61\l  %83 = select i1 %77, i32 %49, i32 %57\l  %84 = select i1 %77, i32 -64, i32 0\l  %85 = add nsw i32 %84, %76\l  %86 = icmp ugt i32 %85, 31\l  %87 = select i1 %86, i32 %79, i32 %78\l  %88 = select i1 %86, i32 %80, i32 %79\l  %89 = select i1 %86, i32 %81, i32 %80\l  %90 = select i1 %86, i32 %82, i32 %81\l  %91 = select i1 %86, i32 %83, i32 %82\l  %92 = select i1 %86, i32 -32, i32 0\l  %93 = add nsw i32 %92, %85\l  %94 = icmp ugt i32 %93, 31\l  %95 = select i1 %94, i32 %88, i32 %87\l  %96 = select i1 %94, i32 %89, i32 %88\l  %97 = select i1 %94, i32 %90, i32 %89\l  %98 = select i1 %94, i32 %91, i32 %90\l  %99 = select i1 %94, i32 -32, i32 0\l  %100 = add nsw i32 %99, %93\l  %101 = icmp eq i32 %100, 0\l  %102 = sub nsw i32 32, %100\l  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %102)\l  %104 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %102)\l  %105 = tail call i32 @llvm.fshr.i32(i32 %97, i32 %98, i32 %102)\l  %106 = select i1 %101, i32 %95, i32 %103\l  %107 = select i1 %101, i32 %96, i32 %104\l  %108 = select i1 %101, i32 %97, i32 %105\l  %109 = lshr i32 %106, 29\l  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 2)\l  %111 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %108, i32 2)\l  %112 = tail call i32 @llvm.fshl.i32(i32 %108, i32 %98, i32 2)\l  %113 = and i32 %109, 1\l  %114 = sub nsw i32 0, %113\l  %115 = shl i32 %109, 31\l  %116 = xor i32 %110, %114\l  %117 = xor i32 %111, %114\l  %118 = xor i32 %112, %114\l  %119 = tail call i32 @llvm.ctlz.i32(i32 %116, i1 false), !range !10\l  %120 = sub nsw i32 31, %119\l  %121 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %120)\l  %122 = tail call i32 @llvm.fshr.i32(i32 %117, i32 %118, i32 %120)\l  %123 = shl nuw nsw i32 %119, 23\l  %124 = sub nuw nsw i32 1056964608, %123\l  %125 = lshr i32 %121, 9\l  %126 = or i32 %125, %124\l  %127 = or i32 %126, %115\l  %128 = bitcast i32 %127 to float\l  %129 = tail call i32 @llvm.fshl.i32(i32 %121, i32 %122, i32 23)\l  %130 = tail call i32 @llvm.ctlz.i32(i32 %129, i1 false), !range !10\l  %131 = fmul float %128, 0x3FF921FB40000000\l  %132 = add nuw nsw i32 %130, %119\l  %133 = shl nuw nsw i32 %132, 23\l  %134 = sub nuw nsw i32 855638016, %133\l  %135 = sub nsw i32 31, %130\l  %136 = tail call i32 @llvm.fshr.i32(i32 %129, i32 %122, i32 %135)\l  %137 = lshr i32 %136, 9\l  %138 = or i32 %134, %137\l  %139 = or i32 %138, %115\l  %140 = bitcast i32 %139 to float\l  %141 = fneg float %131\l  %142 = tail call float @llvm.fma.f32(float %128, float 0x3FF921FB40000000,\l... float %141)\l  %143 = tail call float @llvm.fma.f32(float %128, float 0x3E74442D00000000,\l... float %142)\l  %144 = tail call float @llvm.fma.f32(float %140, float 0x3FF921FB40000000,\l... float %143)\l  %145 = fadd float %131, %144\l  %146 = lshr i32 %106, 30\l  %147 = add nuw nsw i32 %113, %146\l  br label %148\l}"];
	Node0x549ae20 -> Node0x549b8a0;
	Node0x549b8a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%148:\l148:                                              \l  %149 = phi i32 [ %41, %34 ], [ %43, %42 ]\l  %150 = phi float [ %39, %34 ], [ %145, %42 ]\l  %151 = phi i32 [ %40, %34 ], [ %147, %42 ]\l  %152 = fcmp oeq double %21, 0.000000e+00\l  %153 = fcmp oeq double %21, 0x7FF0000000000000\l  %154 = or i1 %152, %153\l  %155 = select i1 %19, double 0x37F0000000000000, double 1.000000e+00\l  %156 = fneg double %31\l  %157 = tail call double @llvm.fma.f64(double %156, double %31, double %21)\l  %158 = tail call double @llvm.fma.f64(double %157, double %27, double %31)\l  %159 = fmul double %155, %158\l  %160 = select i1 %154, double %21, double %159\l  %161 = fmul float %150, %150\l  %162 = tail call float @llvm.fmuladd.f32(float %161, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %163 = tail call float @llvm.fmuladd.f32(float %161, float %162, float\l... 0xBFC55553A0000000)\l  %164 = fmul float %161, %163\l  %165 = tail call float @llvm.fmuladd.f32(float %150, float %164, float %150)\l  %166 = tail call float @llvm.fmuladd.f32(float %161, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %167 = tail call float @llvm.fmuladd.f32(float %161, float %166, float\l... 0x3FA5557EE0000000)\l  %168 = tail call float @llvm.fmuladd.f32(float %161, float %167, float\l... 0xBFE0000080000000)\l  %169 = tail call float @llvm.fmuladd.f32(float %161, float %168, float\l... 1.000000e+00)\l  %170 = and i32 %151, 1\l  %171 = icmp eq i32 %170, 0\l  %172 = select i1 %171, float %165, float %169\l  %173 = bitcast float %172 to i32\l  %174 = shl i32 %151, 30\l  %175 = and i32 %174, -2147483648\l  %176 = bitcast float %13 to i32\l  %177 = xor i32 %149, %176\l  %178 = xor i32 %177, %175\l  %179 = xor i32 %178, %173\l  %180 = bitcast i32 %179 to float\l  %181 = tail call i1 @llvm.amdgcn.class.f32(float %32, i32 504)\l  %182 = fpext float %180 to double\l  %183 = select i1 %181, double %182, double 0x7FF8000000000000\l  %184 = fmul contract double %160, %183\l  %185 = fptrunc double %184 to float\l  %186 = getelementptr inbounds float, float addrspace(1)* %2, i64 %11\l  store float %185, float addrspace(1)* %186, align 4, !tbaa !5\l  ret void\l}"];
}
