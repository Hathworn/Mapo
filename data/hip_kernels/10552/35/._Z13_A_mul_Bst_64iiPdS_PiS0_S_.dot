digraph "CFG for '_Z13_A_mul_Bst_64iiPdS_PiS0_S_' function" {
	label="CFG for '_Z13_A_mul_Bst_64iiPdS_PiS0_S_' function";

	Node0x64c3230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %9, %14\l  %19 = add i32 %18, %8\l  %20 = sext i32 %1 to i64\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %20\l  %22 = bitcast i32 addrspace(1)* %21 to \<2 x i32\> addrspace(1)*\l  %23 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %22, align 4, !tbaa !16\l  %24 = extractelement \<2 x i32\> %23, i64 0\l  %25 = extractelement \<2 x i32\> %23, i64 1\l  %26 = sub nsw i32 %25, %24\l  %27 = icmp slt i32 %19, %26\l  br i1 %27, label %28, label %175\l|{<s0>T|<s1>F}}"];
	Node0x64c3230:s0 -> Node0x64c5f90;
	Node0x64c3230:s1 -> Node0x64c6020;
	Node0x64c5f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%28:\l28:                                               \l  %29 = add nsw i32 %24, -1\l  %30 = icmp sgt i32 %0, 0\l  %31 = mul nsw i32 %1, %0\l  %32 = udiv i32 %17, %14\l  %33 = mul i32 %32, %14\l  %34 = icmp ugt i32 %17, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %14\l  %38 = and i32 %0, 7\l  %39 = icmp ult i32 %0, 8\l  %40 = and i32 %0, -8\l  %41 = icmp eq i32 %38, 0\l  br label %42\l}"];
	Node0x64c5f90 -> Node0x64c6a90;
	Node0x64c6a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%42:\l42:                                               \l  %43 = phi i32 [ %19, %28 ], [ %173, %172 ]\l  %44 = add i32 %29, %43\l  %45 = sext i32 %44 to i64\l  br i1 %30, label %46, label %172\l|{<s0>T|<s1>F}}"];
	Node0x64c6a90:s0 -> Node0x64c6dc0;
	Node0x64c6a90:s1 -> Node0x64c6b80;
	Node0x64c6dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%46:\l46:                                               \l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %45\l  %48 = load i32, i32 addrspace(1)* %47, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %49 = add nsw i32 %48, -1\l  %50 = mul nsw i32 %49, %0\l  %51 = getelementptr inbounds double, double addrspace(1)* %3, i64 %45\l  br i1 %39, label %153, label %52\l|{<s0>T|<s1>F}}"];
	Node0x64c6dc0:s0 -> Node0x64c7e30;
	Node0x64c6dc0:s1 -> Node0x64c7ec0;
	Node0x64c7ec0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%52:\l52:                                               \l  %53 = phi i32 [ %150, %52 ], [ 0, %46 ]\l  %54 = phi i32 [ %151, %52 ], [ 0, %46 ]\l  %55 = add nsw i32 %53, %31\l  %56 = add nsw i32 %53, %50\l  %57 = sext i32 %55 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %2, i64 %57\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !20\l  %60 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %61 = fmul contract double %59, %60\l  %62 = sext i32 %56 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %6, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !20\l  %65 = fadd contract double %64, %61\l  store double %65, double addrspace(1)* %63, align 8, !tbaa !20\l  %66 = or i32 %53, 1\l  %67 = add nsw i32 %66, %31\l  %68 = add nsw i32 %66, %50\l  %69 = sext i32 %67 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %2, i64 %69\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !20\l  %72 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %73 = fmul contract double %71, %72\l  %74 = sext i32 %68 to i64\l  %75 = getelementptr inbounds double, double addrspace(1)* %6, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !20\l  %77 = fadd contract double %76, %73\l  store double %77, double addrspace(1)* %75, align 8, !tbaa !20\l  %78 = or i32 %53, 2\l  %79 = add nsw i32 %78, %31\l  %80 = add nsw i32 %78, %50\l  %81 = sext i32 %79 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %2, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !20\l  %84 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %85 = fmul contract double %83, %84\l  %86 = sext i32 %80 to i64\l  %87 = getelementptr inbounds double, double addrspace(1)* %6, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !20\l  %89 = fadd contract double %88, %85\l  store double %89, double addrspace(1)* %87, align 8, !tbaa !20\l  %90 = or i32 %53, 3\l  %91 = add nsw i32 %90, %31\l  %92 = add nsw i32 %90, %50\l  %93 = sext i32 %91 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %2, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !20\l  %96 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %97 = fmul contract double %95, %96\l  %98 = sext i32 %92 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %6, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !20\l  %101 = fadd contract double %100, %97\l  store double %101, double addrspace(1)* %99, align 8, !tbaa !20\l  %102 = or i32 %53, 4\l  %103 = add nsw i32 %102, %31\l  %104 = add nsw i32 %102, %50\l  %105 = sext i32 %103 to i64\l  %106 = getelementptr inbounds double, double addrspace(1)* %2, i64 %105\l  %107 = load double, double addrspace(1)* %106, align 8, !tbaa !20\l  %108 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %109 = fmul contract double %107, %108\l  %110 = sext i32 %104 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %6, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !20\l  %113 = fadd contract double %112, %109\l  store double %113, double addrspace(1)* %111, align 8, !tbaa !20\l  %114 = or i32 %53, 5\l  %115 = add nsw i32 %114, %31\l  %116 = add nsw i32 %114, %50\l  %117 = sext i32 %115 to i64\l  %118 = getelementptr inbounds double, double addrspace(1)* %2, i64 %117\l  %119 = load double, double addrspace(1)* %118, align 8, !tbaa !20\l  %120 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %121 = fmul contract double %119, %120\l  %122 = sext i32 %116 to i64\l  %123 = getelementptr inbounds double, double addrspace(1)* %6, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !20\l  %125 = fadd contract double %124, %121\l  store double %125, double addrspace(1)* %123, align 8, !tbaa !20\l  %126 = or i32 %53, 6\l  %127 = add nsw i32 %126, %31\l  %128 = add nsw i32 %126, %50\l  %129 = sext i32 %127 to i64\l  %130 = getelementptr inbounds double, double addrspace(1)* %2, i64 %129\l  %131 = load double, double addrspace(1)* %130, align 8, !tbaa !20\l  %132 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %133 = fmul contract double %131, %132\l  %134 = sext i32 %128 to i64\l  %135 = getelementptr inbounds double, double addrspace(1)* %6, i64 %134\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !20\l  %137 = fadd contract double %136, %133\l  store double %137, double addrspace(1)* %135, align 8, !tbaa !20\l  %138 = or i32 %53, 7\l  %139 = add nsw i32 %138, %31\l  %140 = add nsw i32 %138, %50\l  %141 = sext i32 %139 to i64\l  %142 = getelementptr inbounds double, double addrspace(1)* %2, i64 %141\l  %143 = load double, double addrspace(1)* %142, align 8, !tbaa !20\l  %144 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %145 = fmul contract double %143, %144\l  %146 = sext i32 %140 to i64\l  %147 = getelementptr inbounds double, double addrspace(1)* %6, i64 %146\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !20\l  %149 = fadd contract double %148, %145\l  store double %149, double addrspace(1)* %147, align 8, !tbaa !20\l  %150 = add nuw nsw i32 %53, 8\l  %151 = add i32 %54, 8\l  %152 = icmp eq i32 %151, %40\l  br i1 %152, label %153, label %52, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x64c7ec0:s0 -> Node0x64c7e30;
	Node0x64c7ec0:s1 -> Node0x64c7ec0;
	Node0x64c7e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%153:\l153:                                              \l  %154 = phi i32 [ 0, %46 ], [ %150, %52 ]\l  br i1 %41, label %172, label %155\l|{<s0>T|<s1>F}}"];
	Node0x64c7e30:s0 -> Node0x64c6b80;
	Node0x64c7e30:s1 -> Node0x64cca70;
	Node0x64cca70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%155:\l155:                                              \l  %156 = phi i32 [ %169, %155 ], [ %154, %153 ]\l  %157 = phi i32 [ %170, %155 ], [ 0, %153 ]\l  %158 = add nsw i32 %156, %31\l  %159 = add nsw i32 %156, %50\l  %160 = sext i32 %158 to i64\l  %161 = getelementptr inbounds double, double addrspace(1)* %2, i64 %160\l  %162 = load double, double addrspace(1)* %161, align 8, !tbaa !20\l  %163 = load double, double addrspace(1)* %51, align 8, !tbaa !20\l  %164 = fmul contract double %162, %163\l  %165 = sext i32 %159 to i64\l  %166 = getelementptr inbounds double, double addrspace(1)* %6, i64 %165\l  %167 = load double, double addrspace(1)* %166, align 8, !tbaa !20\l  %168 = fadd contract double %167, %164\l  store double %168, double addrspace(1)* %166, align 8, !tbaa !20\l  %169 = add nuw nsw i32 %156, 1\l  %170 = add i32 %157, 1\l  %171 = icmp eq i32 %170, %38\l  br i1 %171, label %172, label %155, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x64cca70:s0 -> Node0x64c6b80;
	Node0x64cca70:s1 -> Node0x64cca70;
	Node0x64c6b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%172:\l172:                                              \l  %173 = add i32 %37, %43\l  %174 = icmp slt i32 %173, %26\l  br i1 %174, label %42, label %175, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x64c6b80:s0 -> Node0x64c6a90;
	Node0x64c6b80:s1 -> Node0x64c6020;
	Node0x64c6020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%175:\l175:                                              \l  ret void\l}"];
}
