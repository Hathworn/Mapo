digraph "CFG for '_Z10_kgauss64diiiPdS_S_d' function" {
	label="CFG for '_Z10_kgauss64diiiPdS_S_d' function";

	Node0x5e1d6a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %9, %14\l  %19 = add i32 %18, %8\l  %20 = mul nsw i32 %1, %0\l  %21 = icmp slt i32 %19, %20\l  br i1 %21, label %22, label %192\l|{<s0>T|<s1>F}}"];
	Node0x5e1d6a0:s0 -> Node0x5e1f970;
	Node0x5e1d6a0:s1 -> Node0x5e1fa00;
	Node0x5e1f970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%22:\l22:                                               \l  %23 = icmp sgt i32 %2, 0\l  %24 = fneg contract double %6\l  %25 = udiv i32 %17, %14\l  %26 = mul i32 %25, %14\l  %27 = icmp ugt i32 %17, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %14\l  %31 = and i32 %2, 7\l  %32 = icmp ult i32 %2, 8\l  %33 = and i32 %2, -8\l  %34 = icmp eq i32 %31, 0\l  br label %35\l}"];
	Node0x5e1f970 -> Node0x5e1f570;
	Node0x5e1f570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%35:\l35:                                               \l  %36 = phi i32 [ %19, %22 ], [ %190, %163 ]\l  br i1 %23, label %37, label %163\l|{<s0>T|<s1>F}}"];
	Node0x5e1f570:s0 -> Node0x5e20580;
	Node0x5e1f570:s1 -> Node0x5e20440;
	Node0x5e20580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%37:\l37:                                               \l  %38 = freeze i32 %36\l  %39 = freeze i32 %0\l  %40 = sdiv i32 %38, %39\l  %41 = mul nsw i32 %40, %2\l  %42 = mul i32 %40, %39\l  %43 = sub i32 %38, %42\l  %44 = mul nsw i32 %43, %2\l  br i1 %32, label %140, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5e20580:s0 -> Node0x5e20a70;
	Node0x5e20580:s1 -> Node0x5e20ac0;
	Node0x5e20ac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%45:\l45:                                               \l  %46 = phi double [ %137, %45 ], [ 0.000000e+00, %37 ]\l  %47 = phi i32 [ %131, %45 ], [ %41, %37 ]\l  %48 = phi i32 [ %127, %45 ], [ %44, %37 ]\l  %49 = phi i32 [ %138, %45 ], [ 0, %37 ]\l  %50 = add nsw i32 %48, 1\l  %51 = sext i32 %48 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %3, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !16\l  %54 = add nsw i32 %47, 1\l  %55 = sext i32 %47 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %4, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !16\l  %58 = fsub contract double %53, %57\l  %59 = fmul contract double %58, %58\l  %60 = fadd contract double %46, %59\l  %61 = add nsw i32 %48, 2\l  %62 = sext i32 %50 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %3, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !16\l  %65 = add nsw i32 %47, 2\l  %66 = sext i32 %54 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %4, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !16\l  %69 = fsub contract double %64, %68\l  %70 = fmul contract double %69, %69\l  %71 = fadd contract double %60, %70\l  %72 = add nsw i32 %48, 3\l  %73 = sext i32 %61 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %3, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !16\l  %76 = add nsw i32 %47, 3\l  %77 = sext i32 %65 to i64\l  %78 = getelementptr inbounds double, double addrspace(1)* %4, i64 %77\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !16\l  %80 = fsub contract double %75, %79\l  %81 = fmul contract double %80, %80\l  %82 = fadd contract double %71, %81\l  %83 = add nsw i32 %48, 4\l  %84 = sext i32 %72 to i64\l  %85 = getelementptr inbounds double, double addrspace(1)* %3, i64 %84\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !16\l  %87 = add nsw i32 %47, 4\l  %88 = sext i32 %76 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %4, i64 %88\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !16\l  %91 = fsub contract double %86, %90\l  %92 = fmul contract double %91, %91\l  %93 = fadd contract double %82, %92\l  %94 = add nsw i32 %48, 5\l  %95 = sext i32 %83 to i64\l  %96 = getelementptr inbounds double, double addrspace(1)* %3, i64 %95\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !16\l  %98 = add nsw i32 %47, 5\l  %99 = sext i32 %87 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %4, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !16\l  %102 = fsub contract double %97, %101\l  %103 = fmul contract double %102, %102\l  %104 = fadd contract double %93, %103\l  %105 = add nsw i32 %48, 6\l  %106 = sext i32 %94 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %3, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !16\l  %109 = add nsw i32 %47, 6\l  %110 = sext i32 %98 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %4, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !16\l  %113 = fsub contract double %108, %112\l  %114 = fmul contract double %113, %113\l  %115 = fadd contract double %104, %114\l  %116 = add nsw i32 %48, 7\l  %117 = sext i32 %105 to i64\l  %118 = getelementptr inbounds double, double addrspace(1)* %3, i64 %117\l  %119 = load double, double addrspace(1)* %118, align 8, !tbaa !16\l  %120 = add nsw i32 %47, 7\l  %121 = sext i32 %109 to i64\l  %122 = getelementptr inbounds double, double addrspace(1)* %4, i64 %121\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !16\l  %124 = fsub contract double %119, %123\l  %125 = fmul contract double %124, %124\l  %126 = fadd contract double %115, %125\l  %127 = add nsw i32 %48, 8\l  %128 = sext i32 %116 to i64\l  %129 = getelementptr inbounds double, double addrspace(1)* %3, i64 %128\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !16\l  %131 = add nsw i32 %47, 8\l  %132 = sext i32 %120 to i64\l  %133 = getelementptr inbounds double, double addrspace(1)* %4, i64 %132\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !16\l  %135 = fsub contract double %130, %134\l  %136 = fmul contract double %135, %135\l  %137 = fadd contract double %126, %136\l  %138 = add i32 %49, 8\l  %139 = icmp eq i32 %138, %33\l  br i1 %139, label %140, label %45, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5e20ac0:s0 -> Node0x5e20a70;
	Node0x5e20ac0:s1 -> Node0x5e20ac0;
	Node0x5e20a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%140:\l140:                                              \l  %141 = phi double [ undef, %37 ], [ %137, %45 ]\l  %142 = phi double [ 0.000000e+00, %37 ], [ %137, %45 ]\l  %143 = phi i32 [ %41, %37 ], [ %131, %45 ]\l  %144 = phi i32 [ %44, %37 ], [ %127, %45 ]\l  br i1 %34, label %163, label %145\l|{<s0>T|<s1>F}}"];
	Node0x5e20a70:s0 -> Node0x5e20440;
	Node0x5e20a70:s1 -> Node0x5e260a0;
	Node0x5e260a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%145:\l145:                                              \l  %146 = phi double [ %160, %145 ], [ %142, %140 ]\l  %147 = phi i32 [ %154, %145 ], [ %143, %140 ]\l  %148 = phi i32 [ %150, %145 ], [ %144, %140 ]\l  %149 = phi i32 [ %161, %145 ], [ 0, %140 ]\l  %150 = add nsw i32 %148, 1\l  %151 = sext i32 %148 to i64\l  %152 = getelementptr inbounds double, double addrspace(1)* %3, i64 %151\l  %153 = load double, double addrspace(1)* %152, align 8, !tbaa !16\l  %154 = add nsw i32 %147, 1\l  %155 = sext i32 %147 to i64\l  %156 = getelementptr inbounds double, double addrspace(1)* %4, i64 %155\l  %157 = load double, double addrspace(1)* %156, align 8, !tbaa !16\l  %158 = fsub contract double %153, %157\l  %159 = fmul contract double %158, %158\l  %160 = fadd contract double %146, %159\l  %161 = add i32 %149, 1\l  %162 = icmp eq i32 %161, %31\l  br i1 %162, label %163, label %145, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5e260a0:s0 -> Node0x5e20440;
	Node0x5e260a0:s1 -> Node0x5e260a0;
	Node0x5e20440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%163:\l163:                                              \l  %164 = phi double [ 0.000000e+00, %35 ], [ %141, %140 ], [ %160, %145 ]\l  %165 = fmul contract double %164, %24\l  %166 = fmul double %165, 0x3FF71547652B82FE\l  %167 = tail call double @llvm.rint.f64(double %166)\l  %168 = fneg double %167\l  %169 = tail call double @llvm.fma.f64(double %168, double\l... 0x3FE62E42FEFA39EF, double %165)\l  %170 = tail call double @llvm.fma.f64(double %168, double\l... 0x3C7ABC9E3B39803F, double %169)\l  %171 = tail call double @llvm.fma.f64(double %170, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %172 = tail call double @llvm.fma.f64(double %170, double %171, double\l... 0x3EC71DEE623FDE64)\l  %173 = tail call double @llvm.fma.f64(double %170, double %172, double\l... 0x3EFA01997C89E6B0)\l  %174 = tail call double @llvm.fma.f64(double %170, double %173, double\l... 0x3F2A01A014761F6E)\l  %175 = tail call double @llvm.fma.f64(double %170, double %174, double\l... 0x3F56C16C1852B7B0)\l  %176 = tail call double @llvm.fma.f64(double %170, double %175, double\l... 0x3F81111111122322)\l  %177 = tail call double @llvm.fma.f64(double %170, double %176, double\l... 0x3FA55555555502A1)\l  %178 = tail call double @llvm.fma.f64(double %170, double %177, double\l... 0x3FC5555555555511)\l  %179 = tail call double @llvm.fma.f64(double %170, double %178, double\l... 0x3FE000000000000B)\l  %180 = tail call double @llvm.fma.f64(double %170, double %179, double\l... 1.000000e+00)\l  %181 = tail call double @llvm.fma.f64(double %170, double %180, double\l... 1.000000e+00)\l  %182 = fptosi double %167 to i32\l  %183 = tail call double @llvm.amdgcn.ldexp.f64(double %181, i32 %182)\l  %184 = fcmp ogt double %165, 1.024000e+03\l  %185 = select i1 %184, double 0x7FF0000000000000, double %183\l  %186 = fcmp olt double %165, -1.075000e+03\l  %187 = select i1 %186, double 0.000000e+00, double %185\l  %188 = sext i32 %36 to i64\l  %189 = getelementptr inbounds double, double addrspace(1)* %5, i64 %188\l  store double %187, double addrspace(1)* %189, align 8, !tbaa !16\l  %190 = add i32 %30, %36\l  %191 = icmp slt i32 %190, %20\l  br i1 %191, label %35, label %192, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5e20440:s0 -> Node0x5e1f570;
	Node0x5e20440:s1 -> Node0x5e1fa00;
	Node0x5e1fa00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%192:\l192:                                              \l  ret void\l}"];
}
