digraph "CFG for '_Z8_kpoly32iiPfPiS0_S_S0_S0_S_ff' function" {
	label="CFG for '_Z8_kpoly32iiPfPiS0_S_S0_S0_S_ff' function";

	Node0x4f259d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !7\l  %22 = mul i32 %13, %18\l  %23 = add i32 %22, %12\l  %24 = mul nsw i32 %1, %0\l  %25 = icmp slt i32 %23, %24\l  br i1 %25, label %26, label %308\l|{<s0>T|<s1>F}}"];
	Node0x4f259d0:s0 -> Node0x4f28830;
	Node0x4f259d0:s1 -> Node0x4f288c0;
	Node0x4f28830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%26:\l26:                                               \l  %27 = fpext float %9 to double\l  %28 = fpext float %10 to double\l  %29 = tail call double @llvm.fabs.f64(double %28)\l  %30 = tail call double @llvm.trunc.f64(double %29)\l  %31 = fcmp oeq double %29, %30\l  %32 = zext i1 %31 to i32\l  %33 = fmul double %30, 5.000000e-01\l  %34 = tail call double @llvm.amdgcn.fract.f64(double %33)\l  %35 = tail call i1 @llvm.amdgcn.class.f64(double %33, i32 516)\l  %36 = select i1 %35, double 0.000000e+00, double %34\l  %37 = fcmp oeq double %36, 0.000000e+00\l  %38 = and i1 %31, %37\l  %39 = zext i1 %38 to i32\l  %40 = add nuw nsw i32 %39, %32\l  %41 = icmp eq i32 %40, 1\l  %42 = icmp ne i32 %40, 0\l  %43 = fcmp oeq double %29, 0x7FF0000000000000\l  %44 = bitcast double %28 to \<2 x i32\>\l  %45 = extractelement \<2 x i32\> %44, i64 1\l  %46 = fcmp olt float %10, 0.000000e+00\l  %47 = fcmp oeq float %10, 0.000000e+00\l  %48 = udiv i32 %21, %18\l  %49 = mul i32 %48, %18\l  %50 = icmp ugt i32 %21, %49\l  %51 = zext i1 %50 to i32\l  %52 = add i32 %48, %51\l  %53 = mul i32 %52, %18\l  br label %54\l}"];
	Node0x4f28830 -> Node0x4f2b170;
	Node0x4f2b170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%54:\l54:                                               \l  %55 = phi i32 [ %23, %26 ], [ %306, %113 ]\l  %56 = freeze i32 %55\l  %57 = freeze i32 %0\l  %58 = sdiv i32 %56, %57\l  %59 = mul i32 %58, %57\l  %60 = sub i32 %56, %59\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %61\l  %63 = bitcast i32 addrspace(1)* %62 to \<2 x i32\> addrspace(1)*\l  %64 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %63, align 4, !tbaa !16\l  %65 = extractelement \<2 x i32\> %64, i64 1\l  %66 = add nsw i32 %65, -1\l  %67 = sext i32 %58 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %67\l  %69 = bitcast i32 addrspace(1)* %68 to \<2 x i32\> addrspace(1)*\l  %70 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %69, align 4, !tbaa !16\l  %71 = extractelement \<2 x i32\> %70, i64 1\l  %72 = add nsw i32 %71, -1\l  %73 = extractelement \<2 x i32\> %64, i64 0\l  %74 = icmp slt i32 %73, %65\l  %75 = extractelement \<2 x i32\> %70, i64 0\l  %76 = icmp slt i32 %75, %71\l  %77 = select i1 %74, i1 %76, i1 false\l  br i1 %77, label %78, label %113\l|{<s0>T|<s1>F}}"];
	Node0x4f2b170:s0 -> Node0x4f2c9a0;
	Node0x4f2b170:s1 -> Node0x4f2b2a0;
	Node0x4f2c9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%78:\l78:                                               \l  %79 = add nsw i32 %75, -1\l  %80 = add nsw i32 %73, -1\l  br label %81\l}"];
	Node0x4f2c9a0 -> Node0x4f2cc00;
	Node0x4f2cc00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%81:\l81:                                               \l  %82 = phi double [ %109, %106 ], [ 0.000000e+00, %78 ]\l  %83 = phi i32 [ %108, %106 ], [ %80, %78 ]\l  %84 = phi i32 [ %107, %106 ], [ %79, %78 ]\l  %85 = sext i32 %83 to i64\l  %86 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %85\l  %87 = load i32, i32 addrspace(1)* %86, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %88 = sext i32 %84 to i64\l  %89 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %88\l  %90 = load i32, i32 addrspace(1)* %89, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %91 = icmp slt i32 %90, %87\l  br i1 %91, label %92, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4f2cc00:s0 -> Node0x4f2db00;
	Node0x4f2cc00:s1 -> Node0x4f2db90;
	Node0x4f2db00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%92:\l92:                                               \l  %93 = add nsw i32 %84, 1\l  br label %106\l}"];
	Node0x4f2db00 -> Node0x4f2ccf0;
	Node0x4f2db90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%94:\l94:                                               \l  %95 = icmp slt i32 %87, %90\l  %96 = add nsw i32 %83, 1\l  br i1 %95, label %106, label %97\l|{<s0>T|<s1>F}}"];
	Node0x4f2db90:s0 -> Node0x4f2ccf0;
	Node0x4f2db90:s1 -> Node0x4f2def0;
	Node0x4f2def0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%97:\l97:                                               \l  %98 = getelementptr inbounds float, float addrspace(1)* %2, i64 %85\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !20\l  %100 = add nsw i32 %84, 1\l  %101 = getelementptr inbounds float, float addrspace(1)* %5, i64 %88\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !20\l  %103 = fmul contract float %99, %102\l  %104 = fpext float %103 to double\l  %105 = fadd contract double %82, %104\l  br label %106\l}"];
	Node0x4f2def0 -> Node0x4f2ccf0;
	Node0x4f2ccf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ %93, %92 ], [ %100, %97 ], [ %84, %94 ]\l  %108 = phi i32 [ %83, %92 ], [ %96, %97 ], [ %96, %94 ]\l  %109 = phi double [ %82, %92 ], [ %105, %97 ], [ %82, %94 ]\l  %110 = icmp slt i32 %108, %66\l  %111 = icmp slt i32 %107, %72\l  %112 = select i1 %110, i1 %111, i1 false\l  br i1 %112, label %81, label %113, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4f2ccf0:s0 -> Node0x4f2cc00;
	Node0x4f2ccf0:s1 -> Node0x4f2b2a0;
	Node0x4f2b2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%113:\l113:                                              \l  %114 = phi double [ 0.000000e+00, %54 ], [ %109, %106 ]\l  %115 = fadd contract double %114, %27\l  %116 = tail call double @llvm.fabs.f64(double %115)\l  %117 = tail call double @llvm.amdgcn.frexp.mant.f64(double %116)\l  %118 = fcmp olt double %117, 0x3FE5555555555555\l  %119 = zext i1 %118 to i32\l  %120 = tail call double @llvm.amdgcn.ldexp.f64(double %117, i32 %119)\l  %121 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %116)\l  %122 = sub nsw i32 %121, %119\l  %123 = fadd double %120, -1.000000e+00\l  %124 = fadd double %120, 1.000000e+00\l  %125 = fadd double %124, -1.000000e+00\l  %126 = fsub double %120, %125\l  %127 = tail call double @llvm.amdgcn.rcp.f64(double %124)\l  %128 = fneg double %124\l  %129 = tail call double @llvm.fma.f64(double %128, double %127, double\l... 1.000000e+00)\l  %130 = tail call double @llvm.fma.f64(double %129, double %127, double %127)\l  %131 = tail call double @llvm.fma.f64(double %128, double %130, double\l... 1.000000e+00)\l  %132 = tail call double @llvm.fma.f64(double %131, double %130, double %130)\l  %133 = fmul double %123, %132\l  %134 = fmul double %124, %133\l  %135 = fneg double %134\l  %136 = tail call double @llvm.fma.f64(double %133, double %124, double %135)\l  %137 = tail call double @llvm.fma.f64(double %133, double %126, double %136)\l  %138 = fadd double %134, %137\l  %139 = fsub double %138, %134\l  %140 = fsub double %137, %139\l  %141 = fsub double %123, %138\l  %142 = fsub double %123, %141\l  %143 = fsub double %142, %138\l  %144 = fsub double %143, %140\l  %145 = fadd double %141, %144\l  %146 = fmul double %132, %145\l  %147 = fadd double %133, %146\l  %148 = fsub double %147, %133\l  %149 = fsub double %146, %148\l  %150 = fmul double %147, %147\l  %151 = fneg double %150\l  %152 = tail call double @llvm.fma.f64(double %147, double %147, double %151)\l  %153 = fmul double %149, 2.000000e+00\l  %154 = tail call double @llvm.fma.f64(double %147, double %153, double %152)\l  %155 = fadd double %150, %154\l  %156 = fsub double %155, %150\l  %157 = fsub double %154, %156\l  %158 = tail call double @llvm.fma.f64(double %155, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %159 = tail call double @llvm.fma.f64(double %155, double %158, double\l... 0x3FBE25E43ABE935A)\l  %160 = tail call double @llvm.fma.f64(double %155, double %159, double\l... 0x3FC110EF47E6C9C2)\l  %161 = tail call double @llvm.fma.f64(double %155, double %160, double\l... 0x3FC3B13BCFA74449)\l  %162 = tail call double @llvm.fma.f64(double %155, double %161, double\l... 0x3FC745D171BF3C30)\l  %163 = tail call double @llvm.fma.f64(double %155, double %162, double\l... 0x3FCC71C71C7792CE)\l  %164 = tail call double @llvm.fma.f64(double %155, double %163, double\l... 0x3FD24924924920DA)\l  %165 = tail call double @llvm.fma.f64(double %155, double %164, double\l... 0x3FD999999999999C)\l  %166 = sitofp i32 %122 to double\l  %167 = fmul double %166, 0x3FE62E42FEFA39EF\l  %168 = fneg double %167\l  %169 = tail call double @llvm.fma.f64(double %166, double\l... 0x3FE62E42FEFA39EF, double %168)\l  %170 = tail call double @llvm.fma.f64(double %166, double\l... 0x3C7ABC9E3B39803F, double %169)\l  %171 = fadd double %167, %170\l  %172 = fsub double %171, %167\l  %173 = fsub double %170, %172\l  %174 = tail call double @llvm.amdgcn.ldexp.f64(double %147, i32 1)\l  %175 = tail call double @llvm.amdgcn.ldexp.f64(double %149, i32 1)\l  %176 = fmul double %147, %155\l  %177 = fneg double %176\l  %178 = tail call double @llvm.fma.f64(double %155, double %147, double %177)\l  %179 = tail call double @llvm.fma.f64(double %155, double %149, double %178)\l  %180 = tail call double @llvm.fma.f64(double %157, double %147, double %179)\l  %181 = fadd double %176, %180\l  %182 = fsub double %181, %176\l  %183 = fsub double %180, %182\l  %184 = fmul double %155, %165\l  %185 = fneg double %184\l  %186 = tail call double @llvm.fma.f64(double %155, double %165, double %185)\l  %187 = tail call double @llvm.fma.f64(double %157, double %165, double %186)\l  %188 = fadd double %184, %187\l  %189 = fsub double %188, %184\l  %190 = fsub double %187, %189\l  %191 = fadd double %188, 0x3FE5555555555555\l  %192 = fadd double %191, 0xBFE5555555555555\l  %193 = fsub double %188, %192\l  %194 = fadd double %190, 0x3C8543B0D5DF274D\l  %195 = fadd double %194, %193\l  %196 = fadd double %191, %195\l  %197 = fsub double %196, %191\l  %198 = fsub double %195, %197\l  %199 = fmul double %181, %196\l  %200 = fneg double %199\l  %201 = tail call double @llvm.fma.f64(double %181, double %196, double %200)\l  %202 = tail call double @llvm.fma.f64(double %181, double %198, double %201)\l  %203 = tail call double @llvm.fma.f64(double %183, double %196, double %202)\l  %204 = fadd double %199, %203\l  %205 = fsub double %204, %199\l  %206 = fsub double %203, %205\l  %207 = fadd double %174, %204\l  %208 = fsub double %207, %174\l  %209 = fsub double %204, %208\l  %210 = fadd double %175, %206\l  %211 = fadd double %210, %209\l  %212 = fadd double %207, %211\l  %213 = fsub double %212, %207\l  %214 = fsub double %211, %213\l  %215 = fadd double %171, %212\l  %216 = fsub double %215, %171\l  %217 = fsub double %215, %216\l  %218 = fsub double %171, %217\l  %219 = fsub double %212, %216\l  %220 = fadd double %219, %218\l  %221 = fadd double %173, %214\l  %222 = fsub double %221, %173\l  %223 = fsub double %221, %222\l  %224 = fsub double %173, %223\l  %225 = fsub double %214, %222\l  %226 = fadd double %225, %224\l  %227 = fadd double %221, %220\l  %228 = fadd double %215, %227\l  %229 = fsub double %228, %215\l  %230 = fsub double %227, %229\l  %231 = fadd double %226, %230\l  %232 = fadd double %228, %231\l  %233 = fsub double %232, %228\l  %234 = fsub double %231, %233\l  %235 = fmul double %232, %28\l  %236 = fneg double %235\l  %237 = tail call double @llvm.fma.f64(double %28, double %232, double %236)\l  %238 = tail call double @llvm.fma.f64(double %28, double %234, double %237)\l  %239 = fadd double %235, %238\l  %240 = fsub double %239, %235\l  %241 = fsub double %238, %240\l  %242 = tail call double @llvm.fabs.f64(double %235) #3\l  %243 = fcmp oeq double %242, 0x7FF0000000000000\l  %244 = select i1 %243, double %235, double %239\l  %245 = tail call double @llvm.fabs.f64(double %244) #3\l  %246 = fcmp oeq double %245, 0x7FF0000000000000\l  %247 = select i1 %246, double 0.000000e+00, double %241\l  %248 = fmul double %244, 0x3FF71547652B82FE\l  %249 = tail call double @llvm.rint.f64(double %248)\l  %250 = fneg double %249\l  %251 = tail call double @llvm.fma.f64(double %250, double\l... 0x3FE62E42FEFA39EF, double %244)\l  %252 = tail call double @llvm.fma.f64(double %250, double\l... 0x3C7ABC9E3B39803F, double %251)\l  %253 = tail call double @llvm.fma.f64(double %252, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %254 = tail call double @llvm.fma.f64(double %252, double %253, double\l... 0x3EC71DEE623FDE64)\l  %255 = tail call double @llvm.fma.f64(double %252, double %254, double\l... 0x3EFA01997C89E6B0)\l  %256 = tail call double @llvm.fma.f64(double %252, double %255, double\l... 0x3F2A01A014761F6E)\l  %257 = tail call double @llvm.fma.f64(double %252, double %256, double\l... 0x3F56C16C1852B7B0)\l  %258 = tail call double @llvm.fma.f64(double %252, double %257, double\l... 0x3F81111111122322)\l  %259 = tail call double @llvm.fma.f64(double %252, double %258, double\l... 0x3FA55555555502A1)\l  %260 = tail call double @llvm.fma.f64(double %252, double %259, double\l... 0x3FC5555555555511)\l  %261 = tail call double @llvm.fma.f64(double %252, double %260, double\l... 0x3FE000000000000B)\l  %262 = tail call double @llvm.fma.f64(double %252, double %261, double\l... 1.000000e+00)\l  %263 = tail call double @llvm.fma.f64(double %252, double %262, double\l... 1.000000e+00)\l  %264 = fptosi double %249 to i32\l  %265 = tail call double @llvm.amdgcn.ldexp.f64(double %263, i32 %264)\l  %266 = fcmp ogt double %244, 1.024000e+03\l  %267 = select i1 %266, double 0x7FF0000000000000, double %265\l  %268 = fcmp olt double %244, -1.075000e+03\l  %269 = select i1 %268, double 0.000000e+00, double %267\l  %270 = tail call double @llvm.fma.f64(double %269, double %247, double %269)\l  %271 = tail call double @llvm.fabs.f64(double %269) #3\l  %272 = fcmp oeq double %271, 0x7FF0000000000000\l  %273 = select i1 %272, double %269, double %270\l  %274 = fcmp olt double %115, 0.000000e+00\l  %275 = and i1 %41, %274\l  %276 = select i1 %275, double -0.000000e+00, double 0.000000e+00\l  %277 = tail call double @llvm.copysign.f64(double %273, double %276)\l  %278 = fcmp uge double %115, 0.000000e+00\l  %279 = select i1 %278, i1 true, i1 %42\l  %280 = select i1 %279, double %277, double 0x7FF8000000000000\l  %281 = fcmp oeq double %116, 1.000000e+00\l  %282 = fadd double %116, -1.000000e+00\l  %283 = bitcast double %282 to \<2 x i32\>\l  %284 = extractelement \<2 x i32\> %283, i64 1\l  %285 = xor i32 %284, %45\l  %286 = icmp sgt i32 %285, -1\l  %287 = select i1 %286, double 0x7FF0000000000000, double 0.000000e+00\l  %288 = select i1 %281, double %116, double %287\l  %289 = select i1 %43, double %288, double %280\l  %290 = fcmp oeq double %116, 0x7FF0000000000000\l  %291 = fcmp oeq double %115, 0.000000e+00\l  %292 = or i1 %291, %290\l  %293 = xor i1 %46, %291\l  %294 = select i1 %293, double 0.000000e+00, double 0x7FF0000000000000\l  %295 = select i1 %41, double %115, double 0.000000e+00\l  %296 = tail call double @llvm.copysign.f64(double %294, double %295)\l  %297 = select i1 %292, double %296, double %289\l  %298 = fcmp uno double %115, %28\l  %299 = select i1 %298, double 0x7FF8000000000000, double %297\l  %300 = fcmp oeq double %115, 1.000000e+00\l  %301 = or i1 %47, %300\l  %302 = fptrunc double %299 to float\l  %303 = select i1 %301, float 1.000000e+00, float %302\l  %304 = sext i32 %55 to i64\l  %305 = getelementptr inbounds float, float addrspace(1)* %8, i64 %304\l  store float %303, float addrspace(1)* %305, align 4, !tbaa !20\l  %306 = add i32 %53, %55\l  %307 = icmp slt i32 %306, %24\l  br i1 %307, label %54, label %308, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4f2b2a0:s0 -> Node0x4f2b170;
	Node0x4f2b2a0:s1 -> Node0x4f288c0;
	Node0x4f288c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%308:\l308:                                              \l  ret void\l}"];
}
