digraph "CFG for '_Z9_kgauss32iiPfPiS0_S_S0_S0_fS_' function" {
	label="CFG for '_Z9_kgauss32iiPfPiS0_S_S0_S0_fS_' function";

	Node0x4efad10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !7\l  %21 = mul i32 %12, %17\l  %22 = add i32 %21, %11\l  %23 = mul nsw i32 %22, %0\l  %24 = add nsw i32 %23, %0\l  %25 = icmp slt i32 %22, %1\l  br i1 %25, label %26, label %112\l|{<s0>T|<s1>F}}"];
	Node0x4efad10:s0 -> Node0x4efdc20;
	Node0x4efad10:s1 -> Node0x4efdcb0;
	Node0x4efdc20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%26:\l26:                                               \l  %27 = add nsw i32 %23, -1\l  %28 = icmp sgt i32 %0, 0\l  %29 = fneg contract float %8\l  %30 = udiv i32 %20, %17\l  %31 = mul i32 %30, %17\l  %32 = icmp ugt i32 %20, %31\l  %33 = zext i1 %32 to i32\l  %34 = add i32 %30, %33\l  %35 = mul i32 %34, %17\l  br label %36\l}"];
	Node0x4efdc20 -> Node0x4efe400;
	Node0x4efe400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%36:\l36:                                               \l  %37 = phi i32 [ %22, %26 ], [ %110, %109 ]\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %38\l  %40 = load i32, i32 addrspace(1)* %39, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %41 = add nsw i32 %37, 1\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %42\l  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %45 = add nsw i32 %44, -1\l  %46 = icmp slt i32 %40, %44\l  br i1 %46, label %47, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4efe400:s0 -> Node0x4eff930;
	Node0x4efe400:s1 -> Node0x4eff9c0;
	Node0x4eff930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%47:\l47:                                               \l  %48 = add nsw i32 %40, -1\l  br label %50\l}"];
	Node0x4eff930 -> Node0x4effb90;
	Node0x4eff9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%49:\l49:                                               \l  br i1 %28, label %87, label %109\l|{<s0>T|<s1>F}}"];
	Node0x4eff9c0:s0 -> Node0x4effc50;
	Node0x4eff9c0:s1 -> Node0x4efe4f0;
	Node0x4effb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%50:\l50:                                               \l  %51 = phi i32 [ %85, %84 ], [ %48, %47 ]\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %52\l  %54 = load i32, i32 addrspace(1)* %53, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %55 = add nsw i32 %54, -1\l  %56 = getelementptr inbounds float, float addrspace(1)* %5, i64 %52\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !20\l  %58 = sext i32 %55 to i64\l  %59 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %58\l  %60 = bitcast i32 addrspace(1)* %59 to \<2 x i32\> addrspace(1)*\l  %61 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %60, align 4, !tbaa !16\l  %62 = extractelement \<2 x i32\> %61, i64 1\l  %63 = add nsw i32 %62, -1\l  %64 = extractelement \<2 x i32\> %61, i64 0\l  %65 = icmp slt i32 %64, %62\l  br i1 %65, label %66, label %84\l|{<s0>T|<s1>F}}"];
	Node0x4effb90:s0 -> Node0x4efe1f0;
	Node0x4effb90:s1 -> Node0x4effd80;
	Node0x4efe1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%66:\l66:                                               \l  %67 = add nsw i32 %64, -1\l  br label %68\l}"];
	Node0x4efe1f0 -> Node0x4f01210;
	Node0x4f01210 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%68:\l68:                                               \l  %69 = phi i32 [ %82, %68 ], [ %67, %66 ]\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %70\l  %72 = load i32, i32 addrspace(1)* %71, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %73 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !20\l  %75 = fsub contract float %74, %57\l  %76 = fmul contract float %75, %75\l  %77 = add i32 %27, %72\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %9, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !20\l  %81 = fadd contract float %80, %76\l  store float %81, float addrspace(1)* %79, align 4, !tbaa !20\l  %82 = add nsw i32 %69, 1\l  %83 = icmp slt i32 %82, %63\l  br i1 %83, label %68, label %84, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4f01210:s0 -> Node0x4f01210;
	Node0x4f01210:s1 -> Node0x4effd80;
	Node0x4effd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%84:\l84:                                               \l  %85 = add nsw i32 %51, 1\l  %86 = icmp slt i32 %85, %45\l  br i1 %86, label %50, label %49, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4effd80:s0 -> Node0x4effb90;
	Node0x4effd80:s1 -> Node0x4eff9c0;
	Node0x4effc50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%87:\l87:                                               \l  %88 = phi i32 [ %107, %87 ], [ %23, %49 ]\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %9, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !20\l  %92 = fmul contract float %91, %29\l  %93 = fmul float %92, 0x3FF7154760000000\l  %94 = tail call float @llvm.rint.f32(float %93)\l  %95 = fcmp ogt float %92, 0x40562E4300000000\l  %96 = fcmp olt float %92, 0xC059D1DA00000000\l  %97 = fneg float %93\l  %98 = tail call float @llvm.fma.f32(float %92, float 0x3FF7154760000000,\l... float %97)\l  %99 = tail call float @llvm.fma.f32(float %92, float 0x3E54AE0BE0000000,\l... float %98)\l  %100 = fsub float %93, %94\l  %101 = fadd float %99, %100\l  %102 = tail call float @llvm.exp2.f32(float %101)\l  %103 = fptosi float %94 to i32\l  %104 = tail call float @llvm.amdgcn.ldexp.f32(float %102, i32 %103)\l  %105 = select i1 %96, float 0.000000e+00, float %104\l  %106 = select i1 %95, float 0x7FF0000000000000, float %105\l  store float %106, float addrspace(1)* %90, align 4, !tbaa !20\l  %107 = add nsw i32 %88, 1\l  %108 = icmp slt i32 %107, %24\l  br i1 %108, label %87, label %109, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x4effc50:s0 -> Node0x4effc50;
	Node0x4effc50:s1 -> Node0x4efe4f0;
	Node0x4efe4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%109:\l109:                                              \l  %110 = add i32 %35, %37\l  %111 = icmp slt i32 %110, %1\l  br i1 %111, label %36, label %112, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4efe4f0:s0 -> Node0x4efe400;
	Node0x4efe4f0:s1 -> Node0x4efdcb0;
	Node0x4efdcb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%112:\l112:                                              \l  ret void\l}"];
}
