digraph "CFG for '_Z10_kgauss32diiiPfS_S_f' function" {
	label="CFG for '_Z10_kgauss32diiiPfS_S_f' function";

	Node0x621d7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %9, %14\l  %19 = add i32 %18, %8\l  %20 = mul nsw i32 %1, %0\l  %21 = icmp slt i32 %19, %20\l  br i1 %21, label %22, label %203\l|{<s0>T|<s1>F}}"];
	Node0x621d7d0:s0 -> Node0x621faa0;
	Node0x621d7d0:s1 -> Node0x621fb30;
	Node0x621faa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%22:\l22:                                               \l  %23 = icmp sgt i32 %2, 0\l  %24 = fneg contract float %6\l  %25 = fpext float %24 to double\l  %26 = udiv i32 %17, %14\l  %27 = mul i32 %26, %14\l  %28 = icmp ugt i32 %17, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = mul i32 %30, %14\l  %32 = and i32 %2, 7\l  %33 = icmp ult i32 %2, 8\l  %34 = and i32 %2, -8\l  %35 = icmp eq i32 %32, 0\l  br label %36\l}"];
	Node0x621faa0 -> Node0x6220510;
	Node0x6220510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%36:\l36:                                               \l  %37 = phi i32 [ %19, %22 ], [ %201, %173 ]\l  br i1 %23, label %38, label %173\l|{<s0>T|<s1>F}}"];
	Node0x6220510:s0 -> Node0x6220740;
	Node0x6220510:s1 -> Node0x6220600;
	Node0x6220740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%38:\l38:                                               \l  %39 = freeze i32 %37\l  %40 = freeze i32 %0\l  %41 = sdiv i32 %39, %40\l  %42 = mul nsw i32 %41, %2\l  %43 = mul i32 %41, %40\l  %44 = sub i32 %39, %43\l  %45 = mul nsw i32 %44, %2\l  br i1 %33, label %149, label %46\l|{<s0>T|<s1>F}}"];
	Node0x6220740:s0 -> Node0x6220c30;
	Node0x6220740:s1 -> Node0x6220c80;
	Node0x6220c80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%46:\l46:                                               \l  %47 = phi double [ %146, %46 ], [ 0.000000e+00, %38 ]\l  %48 = phi i32 [ %139, %46 ], [ %42, %38 ]\l  %49 = phi i32 [ %135, %46 ], [ %45, %38 ]\l  %50 = phi i32 [ %147, %46 ], [ 0, %38 ]\l  %51 = add nsw i32 %49, 1\l  %52 = sext i32 %49 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %3, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %55 = add nsw i32 %48, 1\l  %56 = sext i32 %48 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %4, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !16\l  %59 = fsub contract float %54, %58\l  %60 = fpext float %59 to double\l  %61 = fmul contract double %60, %60\l  %62 = fadd contract double %47, %61\l  %63 = add nsw i32 %49, 2\l  %64 = sext i32 %51 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %3, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16\l  %67 = add nsw i32 %48, 2\l  %68 = sext i32 %55 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %4, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16\l  %71 = fsub contract float %66, %70\l  %72 = fpext float %71 to double\l  %73 = fmul contract double %72, %72\l  %74 = fadd contract double %62, %73\l  %75 = add nsw i32 %49, 3\l  %76 = sext i32 %63 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %3, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = add nsw i32 %48, 3\l  %80 = sext i32 %67 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %4, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = fsub contract float %78, %82\l  %84 = fpext float %83 to double\l  %85 = fmul contract double %84, %84\l  %86 = fadd contract double %74, %85\l  %87 = add nsw i32 %49, 4\l  %88 = sext i32 %75 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %3, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = add nsw i32 %48, 4\l  %92 = sext i32 %79 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %4, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !16\l  %95 = fsub contract float %90, %94\l  %96 = fpext float %95 to double\l  %97 = fmul contract double %96, %96\l  %98 = fadd contract double %86, %97\l  %99 = add nsw i32 %49, 5\l  %100 = sext i32 %87 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %3, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !16\l  %103 = add nsw i32 %48, 5\l  %104 = sext i32 %91 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %4, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !16\l  %107 = fsub contract float %102, %106\l  %108 = fpext float %107 to double\l  %109 = fmul contract double %108, %108\l  %110 = fadd contract double %98, %109\l  %111 = add nsw i32 %49, 6\l  %112 = sext i32 %99 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %3, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = add nsw i32 %48, 6\l  %116 = sext i32 %103 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %4, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !16\l  %119 = fsub contract float %114, %118\l  %120 = fpext float %119 to double\l  %121 = fmul contract double %120, %120\l  %122 = fadd contract double %110, %121\l  %123 = add nsw i32 %49, 7\l  %124 = sext i32 %111 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %3, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = add nsw i32 %48, 7\l  %128 = sext i32 %115 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %4, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16\l  %131 = fsub contract float %126, %130\l  %132 = fpext float %131 to double\l  %133 = fmul contract double %132, %132\l  %134 = fadd contract double %122, %133\l  %135 = add nsw i32 %49, 8\l  %136 = sext i32 %123 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %3, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !16\l  %139 = add nsw i32 %48, 8\l  %140 = sext i32 %127 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %4, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !16\l  %143 = fsub contract float %138, %142\l  %144 = fpext float %143 to double\l  %145 = fmul contract double %144, %144\l  %146 = fadd contract double %134, %145\l  %147 = add i32 %50, 8\l  %148 = icmp eq i32 %147, %34\l  br i1 %148, label %149, label %46, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6220c80:s0 -> Node0x6220c30;
	Node0x6220c80:s1 -> Node0x6220c80;
	Node0x6220c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%149:\l149:                                              \l  %150 = phi double [ undef, %38 ], [ %146, %46 ]\l  %151 = phi double [ 0.000000e+00, %38 ], [ %146, %46 ]\l  %152 = phi i32 [ %42, %38 ], [ %139, %46 ]\l  %153 = phi i32 [ %45, %38 ], [ %135, %46 ]\l  br i1 %35, label %173, label %154\l|{<s0>T|<s1>F}}"];
	Node0x6220c30:s0 -> Node0x6220600;
	Node0x6220c30:s1 -> Node0x62265f0;
	Node0x62265f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%154:\l154:                                              \l  %155 = phi double [ %170, %154 ], [ %151, %149 ]\l  %156 = phi i32 [ %163, %154 ], [ %152, %149 ]\l  %157 = phi i32 [ %159, %154 ], [ %153, %149 ]\l  %158 = phi i32 [ %171, %154 ], [ 0, %149 ]\l  %159 = add nsw i32 %157, 1\l  %160 = sext i32 %157 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %3, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !16\l  %163 = add nsw i32 %156, 1\l  %164 = sext i32 %156 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %4, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !16\l  %167 = fsub contract float %162, %166\l  %168 = fpext float %167 to double\l  %169 = fmul contract double %168, %168\l  %170 = fadd contract double %155, %169\l  %171 = add i32 %158, 1\l  %172 = icmp eq i32 %171, %32\l  br i1 %172, label %173, label %154, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x62265f0:s0 -> Node0x6220600;
	Node0x62265f0:s1 -> Node0x62265f0;
	Node0x6220600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%173:\l173:                                              \l  %174 = phi double [ 0.000000e+00, %36 ], [ %150, %149 ], [ %170, %154 ]\l  %175 = fmul contract double %174, %25\l  %176 = fmul double %175, 0x3FF71547652B82FE\l  %177 = tail call double @llvm.rint.f64(double %176)\l  %178 = fneg double %177\l  %179 = tail call double @llvm.fma.f64(double %178, double\l... 0x3FE62E42FEFA39EF, double %175)\l  %180 = tail call double @llvm.fma.f64(double %178, double\l... 0x3C7ABC9E3B39803F, double %179)\l  %181 = tail call double @llvm.fma.f64(double %180, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %182 = tail call double @llvm.fma.f64(double %180, double %181, double\l... 0x3EC71DEE623FDE64)\l  %183 = tail call double @llvm.fma.f64(double %180, double %182, double\l... 0x3EFA01997C89E6B0)\l  %184 = tail call double @llvm.fma.f64(double %180, double %183, double\l... 0x3F2A01A014761F6E)\l  %185 = tail call double @llvm.fma.f64(double %180, double %184, double\l... 0x3F56C16C1852B7B0)\l  %186 = tail call double @llvm.fma.f64(double %180, double %185, double\l... 0x3F81111111122322)\l  %187 = tail call double @llvm.fma.f64(double %180, double %186, double\l... 0x3FA55555555502A1)\l  %188 = tail call double @llvm.fma.f64(double %180, double %187, double\l... 0x3FC5555555555511)\l  %189 = tail call double @llvm.fma.f64(double %180, double %188, double\l... 0x3FE000000000000B)\l  %190 = tail call double @llvm.fma.f64(double %180, double %189, double\l... 1.000000e+00)\l  %191 = tail call double @llvm.fma.f64(double %180, double %190, double\l... 1.000000e+00)\l  %192 = fptosi double %177 to i32\l  %193 = tail call double @llvm.amdgcn.ldexp.f64(double %191, i32 %192)\l  %194 = fcmp ogt double %175, 1.024000e+03\l  %195 = select i1 %194, double 0x7FF0000000000000, double %193\l  %196 = fcmp olt double %175, -1.075000e+03\l  %197 = select i1 %196, double 0.000000e+00, double %195\l  %198 = fptrunc double %197 to float\l  %199 = sext i32 %37 to i64\l  %200 = getelementptr inbounds float, float addrspace(1)* %5, i64 %199\l  store float %198, float addrspace(1)* %200, align 4, !tbaa !16\l  %201 = add i32 %31, %37\l  %202 = icmp slt i32 %201, %20\l  br i1 %202, label %36, label %203, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x6220600:s0 -> Node0x6220510;
	Node0x6220600:s1 -> Node0x621fb30;
	Node0x621fb30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%203:\l203:                                              \l  ret void\l}"];
}
