digraph "CFG for '_Z8_kpoly64iiPdPiS0_S_S0_S0_S_dd' function" {
	label="CFG for '_Z8_kpoly64iiPdPiS0_S_S0_S0_S_dd' function";

	Node0x4a459d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !7\l  %22 = mul i32 %13, %18\l  %23 = add i32 %22, %12\l  %24 = mul nsw i32 %1, %0\l  %25 = icmp slt i32 %23, %24\l  br i1 %25, label %26, label %304\l|{<s0>T|<s1>F}}"];
	Node0x4a459d0:s0 -> Node0x4a48830;
	Node0x4a459d0:s1 -> Node0x4a488c0;
	Node0x4a48830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%26:\l26:                                               \l  %27 = tail call double @llvm.fabs.f64(double %10)\l  %28 = tail call double @llvm.trunc.f64(double %27)\l  %29 = fcmp oeq double %27, %28\l  %30 = zext i1 %29 to i32\l  %31 = fmul double %28, 5.000000e-01\l  %32 = tail call double @llvm.amdgcn.fract.f64(double %31)\l  %33 = tail call i1 @llvm.amdgcn.class.f64(double %31, i32 516)\l  %34 = select i1 %33, double 0.000000e+00, double %32\l  %35 = fcmp oeq double %34, 0.000000e+00\l  %36 = and i1 %29, %35\l  %37 = zext i1 %36 to i32\l  %38 = add nuw nsw i32 %37, %30\l  %39 = icmp eq i32 %38, 1\l  %40 = icmp ne i32 %38, 0\l  %41 = fcmp oeq double %27, 0x7FF0000000000000\l  %42 = bitcast double %10 to \<2 x i32\>\l  %43 = extractelement \<2 x i32\> %42, i64 1\l  %44 = fcmp olt double %10, 0.000000e+00\l  %45 = fcmp oeq double %10, 0.000000e+00\l  %46 = udiv i32 %21, %18\l  %47 = mul i32 %46, %18\l  %48 = icmp ugt i32 %21, %47\l  %49 = zext i1 %48 to i32\l  %50 = add i32 %46, %49\l  %51 = mul i32 %50, %18\l  br label %52\l}"];
	Node0x4a48830 -> Node0x4a4b060;
	Node0x4a4b060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%52:\l52:                                               \l  %53 = phi i32 [ %23, %26 ], [ %302, %110 ]\l  %54 = freeze i32 %53\l  %55 = freeze i32 %0\l  %56 = sdiv i32 %54, %55\l  %57 = mul i32 %56, %55\l  %58 = sub i32 %54, %57\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %59\l  %61 = bitcast i32 addrspace(1)* %60 to \<2 x i32\> addrspace(1)*\l  %62 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %61, align 4, !tbaa !16\l  %63 = extractelement \<2 x i32\> %62, i64 1\l  %64 = add nsw i32 %63, -1\l  %65 = sext i32 %56 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %65\l  %67 = bitcast i32 addrspace(1)* %66 to \<2 x i32\> addrspace(1)*\l  %68 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %67, align 4, !tbaa !16\l  %69 = extractelement \<2 x i32\> %68, i64 1\l  %70 = add nsw i32 %69, -1\l  %71 = extractelement \<2 x i32\> %62, i64 0\l  %72 = icmp slt i32 %71, %63\l  %73 = extractelement \<2 x i32\> %68, i64 0\l  %74 = icmp slt i32 %73, %69\l  %75 = select i1 %72, i1 %74, i1 false\l  br i1 %75, label %76, label %110\l|{<s0>T|<s1>F}}"];
	Node0x4a4b060:s0 -> Node0x4a4c8a0;
	Node0x4a4b060:s1 -> Node0x4a4b190;
	Node0x4a4c8a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%76:\l76:                                               \l  %77 = add nsw i32 %73, -1\l  %78 = add nsw i32 %71, -1\l  br label %79\l}"];
	Node0x4a4c8a0 -> Node0x4a4cb00;
	Node0x4a4cb00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%79:\l79:                                               \l  %80 = phi double [ %106, %103 ], [ 0.000000e+00, %76 ]\l  %81 = phi i32 [ %105, %103 ], [ %78, %76 ]\l  %82 = phi i32 [ %104, %103 ], [ %77, %76 ]\l  %83 = sext i32 %81 to i64\l  %84 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %83\l  %85 = load i32, i32 addrspace(1)* %84, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %86 = sext i32 %82 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %86\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %89 = icmp slt i32 %88, %85\l  br i1 %89, label %90, label %92\l|{<s0>T|<s1>F}}"];
	Node0x4a4cb00:s0 -> Node0x4a4da00;
	Node0x4a4cb00:s1 -> Node0x4a4da90;
	Node0x4a4da00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%90:\l90:                                               \l  %91 = add nsw i32 %82, 1\l  br label %103\l}"];
	Node0x4a4da00 -> Node0x4a4cbf0;
	Node0x4a4da90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%92:\l92:                                               \l  %93 = icmp slt i32 %85, %88\l  %94 = add nsw i32 %81, 1\l  br i1 %93, label %103, label %95\l|{<s0>T|<s1>F}}"];
	Node0x4a4da90:s0 -> Node0x4a4cbf0;
	Node0x4a4da90:s1 -> Node0x4a4ddf0;
	Node0x4a4ddf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%95:\l95:                                               \l  %96 = getelementptr inbounds double, double addrspace(1)* %2, i64 %83\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !20\l  %98 = add nsw i32 %82, 1\l  %99 = getelementptr inbounds double, double addrspace(1)* %5, i64 %86\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !20\l  %101 = fmul contract double %97, %100\l  %102 = fadd contract double %80, %101\l  br label %103\l}"];
	Node0x4a4ddf0 -> Node0x4a4cbf0;
	Node0x4a4cbf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%103:\l103:                                              \l  %104 = phi i32 [ %91, %90 ], [ %98, %95 ], [ %82, %92 ]\l  %105 = phi i32 [ %81, %90 ], [ %94, %95 ], [ %94, %92 ]\l  %106 = phi double [ %80, %90 ], [ %102, %95 ], [ %80, %92 ]\l  %107 = icmp slt i32 %105, %64\l  %108 = icmp slt i32 %104, %70\l  %109 = select i1 %107, i1 %108, i1 false\l  br i1 %109, label %79, label %110, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4a4cbf0:s0 -> Node0x4a4cb00;
	Node0x4a4cbf0:s1 -> Node0x4a4b190;
	Node0x4a4b190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%110:\l110:                                              \l  %111 = phi double [ 0.000000e+00, %52 ], [ %106, %103 ]\l  %112 = fadd contract double %111, %9\l  %113 = tail call double @llvm.fabs.f64(double %112)\l  %114 = tail call double @llvm.amdgcn.frexp.mant.f64(double %113)\l  %115 = fcmp olt double %114, 0x3FE5555555555555\l  %116 = zext i1 %115 to i32\l  %117 = tail call double @llvm.amdgcn.ldexp.f64(double %114, i32 %116)\l  %118 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %113)\l  %119 = sub nsw i32 %118, %116\l  %120 = fadd double %117, -1.000000e+00\l  %121 = fadd double %117, 1.000000e+00\l  %122 = fadd double %121, -1.000000e+00\l  %123 = fsub double %117, %122\l  %124 = tail call double @llvm.amdgcn.rcp.f64(double %121)\l  %125 = fneg double %121\l  %126 = tail call double @llvm.fma.f64(double %125, double %124, double\l... 1.000000e+00)\l  %127 = tail call double @llvm.fma.f64(double %126, double %124, double %124)\l  %128 = tail call double @llvm.fma.f64(double %125, double %127, double\l... 1.000000e+00)\l  %129 = tail call double @llvm.fma.f64(double %128, double %127, double %127)\l  %130 = fmul double %120, %129\l  %131 = fmul double %121, %130\l  %132 = fneg double %131\l  %133 = tail call double @llvm.fma.f64(double %130, double %121, double %132)\l  %134 = tail call double @llvm.fma.f64(double %130, double %123, double %133)\l  %135 = fadd double %131, %134\l  %136 = fsub double %135, %131\l  %137 = fsub double %134, %136\l  %138 = fsub double %120, %135\l  %139 = fsub double %120, %138\l  %140 = fsub double %139, %135\l  %141 = fsub double %140, %137\l  %142 = fadd double %138, %141\l  %143 = fmul double %129, %142\l  %144 = fadd double %130, %143\l  %145 = fsub double %144, %130\l  %146 = fsub double %143, %145\l  %147 = fmul double %144, %144\l  %148 = fneg double %147\l  %149 = tail call double @llvm.fma.f64(double %144, double %144, double %148)\l  %150 = fmul double %146, 2.000000e+00\l  %151 = tail call double @llvm.fma.f64(double %144, double %150, double %149)\l  %152 = fadd double %147, %151\l  %153 = fsub double %152, %147\l  %154 = fsub double %151, %153\l  %155 = tail call double @llvm.fma.f64(double %152, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %156 = tail call double @llvm.fma.f64(double %152, double %155, double\l... 0x3FBE25E43ABE935A)\l  %157 = tail call double @llvm.fma.f64(double %152, double %156, double\l... 0x3FC110EF47E6C9C2)\l  %158 = tail call double @llvm.fma.f64(double %152, double %157, double\l... 0x3FC3B13BCFA74449)\l  %159 = tail call double @llvm.fma.f64(double %152, double %158, double\l... 0x3FC745D171BF3C30)\l  %160 = tail call double @llvm.fma.f64(double %152, double %159, double\l... 0x3FCC71C71C7792CE)\l  %161 = tail call double @llvm.fma.f64(double %152, double %160, double\l... 0x3FD24924924920DA)\l  %162 = tail call double @llvm.fma.f64(double %152, double %161, double\l... 0x3FD999999999999C)\l  %163 = sitofp i32 %119 to double\l  %164 = fmul double %163, 0x3FE62E42FEFA39EF\l  %165 = fneg double %164\l  %166 = tail call double @llvm.fma.f64(double %163, double\l... 0x3FE62E42FEFA39EF, double %165)\l  %167 = tail call double @llvm.fma.f64(double %163, double\l... 0x3C7ABC9E3B39803F, double %166)\l  %168 = fadd double %164, %167\l  %169 = fsub double %168, %164\l  %170 = fsub double %167, %169\l  %171 = tail call double @llvm.amdgcn.ldexp.f64(double %144, i32 1)\l  %172 = tail call double @llvm.amdgcn.ldexp.f64(double %146, i32 1)\l  %173 = fmul double %144, %152\l  %174 = fneg double %173\l  %175 = tail call double @llvm.fma.f64(double %152, double %144, double %174)\l  %176 = tail call double @llvm.fma.f64(double %152, double %146, double %175)\l  %177 = tail call double @llvm.fma.f64(double %154, double %144, double %176)\l  %178 = fadd double %173, %177\l  %179 = fsub double %178, %173\l  %180 = fsub double %177, %179\l  %181 = fmul double %152, %162\l  %182 = fneg double %181\l  %183 = tail call double @llvm.fma.f64(double %152, double %162, double %182)\l  %184 = tail call double @llvm.fma.f64(double %154, double %162, double %183)\l  %185 = fadd double %181, %184\l  %186 = fsub double %185, %181\l  %187 = fsub double %184, %186\l  %188 = fadd double %185, 0x3FE5555555555555\l  %189 = fadd double %188, 0xBFE5555555555555\l  %190 = fsub double %185, %189\l  %191 = fadd double %187, 0x3C8543B0D5DF274D\l  %192 = fadd double %191, %190\l  %193 = fadd double %188, %192\l  %194 = fsub double %193, %188\l  %195 = fsub double %192, %194\l  %196 = fmul double %178, %193\l  %197 = fneg double %196\l  %198 = tail call double @llvm.fma.f64(double %178, double %193, double %197)\l  %199 = tail call double @llvm.fma.f64(double %178, double %195, double %198)\l  %200 = tail call double @llvm.fma.f64(double %180, double %193, double %199)\l  %201 = fadd double %196, %200\l  %202 = fsub double %201, %196\l  %203 = fsub double %200, %202\l  %204 = fadd double %171, %201\l  %205 = fsub double %204, %171\l  %206 = fsub double %201, %205\l  %207 = fadd double %172, %203\l  %208 = fadd double %207, %206\l  %209 = fadd double %204, %208\l  %210 = fsub double %209, %204\l  %211 = fsub double %208, %210\l  %212 = fadd double %168, %209\l  %213 = fsub double %212, %168\l  %214 = fsub double %212, %213\l  %215 = fsub double %168, %214\l  %216 = fsub double %209, %213\l  %217 = fadd double %216, %215\l  %218 = fadd double %170, %211\l  %219 = fsub double %218, %170\l  %220 = fsub double %218, %219\l  %221 = fsub double %170, %220\l  %222 = fsub double %211, %219\l  %223 = fadd double %222, %221\l  %224 = fadd double %218, %217\l  %225 = fadd double %212, %224\l  %226 = fsub double %225, %212\l  %227 = fsub double %224, %226\l  %228 = fadd double %223, %227\l  %229 = fadd double %225, %228\l  %230 = fsub double %229, %225\l  %231 = fsub double %228, %230\l  %232 = fmul double %229, %10\l  %233 = fneg double %232\l  %234 = tail call double @llvm.fma.f64(double %10, double %229, double %233)\l  %235 = tail call double @llvm.fma.f64(double %10, double %231, double %234)\l  %236 = fadd double %232, %235\l  %237 = fsub double %236, %232\l  %238 = fsub double %235, %237\l  %239 = tail call double @llvm.fabs.f64(double %232) #3\l  %240 = fcmp oeq double %239, 0x7FF0000000000000\l  %241 = select i1 %240, double %232, double %236\l  %242 = tail call double @llvm.fabs.f64(double %241) #3\l  %243 = fcmp oeq double %242, 0x7FF0000000000000\l  %244 = select i1 %243, double 0.000000e+00, double %238\l  %245 = fmul double %241, 0x3FF71547652B82FE\l  %246 = tail call double @llvm.rint.f64(double %245)\l  %247 = fneg double %246\l  %248 = tail call double @llvm.fma.f64(double %247, double\l... 0x3FE62E42FEFA39EF, double %241)\l  %249 = tail call double @llvm.fma.f64(double %247, double\l... 0x3C7ABC9E3B39803F, double %248)\l  %250 = tail call double @llvm.fma.f64(double %249, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %251 = tail call double @llvm.fma.f64(double %249, double %250, double\l... 0x3EC71DEE623FDE64)\l  %252 = tail call double @llvm.fma.f64(double %249, double %251, double\l... 0x3EFA01997C89E6B0)\l  %253 = tail call double @llvm.fma.f64(double %249, double %252, double\l... 0x3F2A01A014761F6E)\l  %254 = tail call double @llvm.fma.f64(double %249, double %253, double\l... 0x3F56C16C1852B7B0)\l  %255 = tail call double @llvm.fma.f64(double %249, double %254, double\l... 0x3F81111111122322)\l  %256 = tail call double @llvm.fma.f64(double %249, double %255, double\l... 0x3FA55555555502A1)\l  %257 = tail call double @llvm.fma.f64(double %249, double %256, double\l... 0x3FC5555555555511)\l  %258 = tail call double @llvm.fma.f64(double %249, double %257, double\l... 0x3FE000000000000B)\l  %259 = tail call double @llvm.fma.f64(double %249, double %258, double\l... 1.000000e+00)\l  %260 = tail call double @llvm.fma.f64(double %249, double %259, double\l... 1.000000e+00)\l  %261 = fptosi double %246 to i32\l  %262 = tail call double @llvm.amdgcn.ldexp.f64(double %260, i32 %261)\l  %263 = fcmp ogt double %241, 1.024000e+03\l  %264 = select i1 %263, double 0x7FF0000000000000, double %262\l  %265 = fcmp olt double %241, -1.075000e+03\l  %266 = select i1 %265, double 0.000000e+00, double %264\l  %267 = tail call double @llvm.fma.f64(double %266, double %244, double %266)\l  %268 = tail call double @llvm.fabs.f64(double %266) #3\l  %269 = fcmp oeq double %268, 0x7FF0000000000000\l  %270 = select i1 %269, double %266, double %267\l  %271 = fcmp olt double %112, 0.000000e+00\l  %272 = and i1 %39, %271\l  %273 = select i1 %272, double -0.000000e+00, double 0.000000e+00\l  %274 = tail call double @llvm.copysign.f64(double %270, double %273)\l  %275 = fcmp uge double %112, 0.000000e+00\l  %276 = select i1 %275, i1 true, i1 %40\l  %277 = select i1 %276, double %274, double 0x7FF8000000000000\l  %278 = fcmp oeq double %113, 1.000000e+00\l  %279 = fadd double %113, -1.000000e+00\l  %280 = bitcast double %279 to \<2 x i32\>\l  %281 = extractelement \<2 x i32\> %280, i64 1\l  %282 = xor i32 %281, %43\l  %283 = icmp sgt i32 %282, -1\l  %284 = select i1 %283, double 0x7FF0000000000000, double 0.000000e+00\l  %285 = select i1 %278, double %113, double %284\l  %286 = select i1 %41, double %285, double %277\l  %287 = fcmp oeq double %113, 0x7FF0000000000000\l  %288 = fcmp oeq double %112, 0.000000e+00\l  %289 = or i1 %288, %287\l  %290 = xor i1 %44, %288\l  %291 = select i1 %290, double 0.000000e+00, double 0x7FF0000000000000\l  %292 = select i1 %39, double %112, double 0.000000e+00\l  %293 = tail call double @llvm.copysign.f64(double %291, double %292)\l  %294 = select i1 %289, double %293, double %286\l  %295 = fcmp uno double %112, %10\l  %296 = select i1 %295, double 0x7FF8000000000000, double %294\l  %297 = fcmp oeq double %112, 1.000000e+00\l  %298 = or i1 %45, %297\l  %299 = select i1 %298, double 1.000000e+00, double %296\l  %300 = sext i32 %53 to i64\l  %301 = getelementptr inbounds double, double addrspace(1)* %8, i64 %300\l  store double %299, double addrspace(1)* %301, align 8, !tbaa !20\l  %302 = add i32 %51, %53\l  %303 = icmp slt i32 %302, %24\l  br i1 %303, label %52, label %304, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4a4b190:s0 -> Node0x4a4b060;
	Node0x4a4b190:s1 -> Node0x4a488c0;
	Node0x4a488c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%304:\l304:                                              \l  ret void\l}"];
}
