digraph "CFG for '_Z14_Ast_mul_Bs_32iiPfPiS0_S_S0_S0_S_' function" {
	label="CFG for '_Z14_Ast_mul_Bs_32iiPfPiS0_S_S0_S0_S_' function";

	Node0x605d6a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*\l  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !7\l  %20 = mul i32 %11, %16\l  %21 = add i32 %20, %10\l  %22 = mul nsw i32 %1, %0\l  %23 = icmp slt i32 %21, %22\l  br i1 %23, label %24, label %97\l|{<s0>T|<s1>F}}"];
	Node0x605d6a0:s0 -> Node0x60604d0;
	Node0x605d6a0:s1 -> Node0x6060560;
	Node0x60604d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%24:\l24:                                               \l  %25 = udiv i32 %19, %16\l  %26 = mul i32 %25, %16\l  %27 = icmp ugt i32 %19, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %16\l  br label %31\l}"];
	Node0x60604d0 -> Node0x60609e0;
	Node0x60609e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%31:\l31:                                               \l  %32 = phi i32 [ %21, %24 ], [ %95, %90 ]\l  %33 = freeze i32 %32\l  %34 = freeze i32 %0\l  %35 = sdiv i32 %33, %34\l  %36 = mul i32 %35, %34\l  %37 = sub i32 %33, %36\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %38\l  %40 = bitcast i32 addrspace(1)* %39 to \<2 x i32\> addrspace(1)*\l  %41 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %40, align 4, !tbaa !16\l  %42 = extractelement \<2 x i32\> %41, i64 1\l  %43 = add nsw i32 %42, -1\l  %44 = sext i32 %35 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %44\l  %46 = bitcast i32 addrspace(1)* %45 to \<2 x i32\> addrspace(1)*\l  %47 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %46, align 4, !tbaa !16\l  %48 = extractelement \<2 x i32\> %47, i64 1\l  %49 = add nsw i32 %48, -1\l  %50 = extractelement \<2 x i32\> %41, i64 0\l  %51 = icmp slt i32 %50, %42\l  %52 = extractelement \<2 x i32\> %47, i64 0\l  %53 = icmp slt i32 %52, %48\l  %54 = select i1 %51, i1 %53, i1 false\l  br i1 %54, label %55, label %90\l|{<s0>T|<s1>F}}"];
	Node0x60609e0:s0 -> Node0x60626a0;
	Node0x60609e0:s1 -> Node0x6060aa0;
	Node0x60626a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%55:\l55:                                               \l  %56 = add nsw i32 %52, -1\l  %57 = add nsw i32 %50, -1\l  br label %58\l}"];
	Node0x60626a0 -> Node0x6062900;
	Node0x6062900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%58:\l58:                                               \l  %59 = phi double [ %86, %83 ], [ 0.000000e+00, %55 ]\l  %60 = phi i32 [ %85, %83 ], [ %57, %55 ]\l  %61 = phi i32 [ %84, %83 ], [ %56, %55 ]\l  %62 = sext i32 %60 to i64\l  %63 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %62\l  %64 = load i32, i32 addrspace(1)* %63, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %65 = sext i32 %61 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %65\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  %68 = icmp slt i32 %67, %64\l  br i1 %68, label %69, label %71\l|{<s0>T|<s1>F}}"];
	Node0x6062900:s0 -> Node0x6060da0;
	Node0x6062900:s1 -> Node0x60644e0;
	Node0x6060da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%69:\l69:                                               \l  %70 = add nsw i32 %61, 1\l  br label %83\l}"];
	Node0x6060da0 -> Node0x60629f0;
	Node0x60644e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%71:\l71:                                               \l  %72 = icmp slt i32 %64, %67\l  %73 = add nsw i32 %60, 1\l  br i1 %72, label %83, label %74\l|{<s0>T|<s1>F}}"];
	Node0x60644e0:s0 -> Node0x60629f0;
	Node0x60644e0:s1 -> Node0x6064840;
	Node0x6064840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%74:\l74:                                               \l  %75 = getelementptr inbounds float, float addrspace(1)* %2, i64 %62\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !20\l  %77 = add nsw i32 %61, 1\l  %78 = getelementptr inbounds float, float addrspace(1)* %5, i64 %65\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !20\l  %80 = fmul contract float %76, %79\l  %81 = fpext float %80 to double\l  %82 = fadd contract double %59, %81\l  br label %83\l}"];
	Node0x6064840 -> Node0x60629f0;
	Node0x60629f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%83:\l83:                                               \l  %84 = phi i32 [ %70, %69 ], [ %77, %74 ], [ %61, %71 ]\l  %85 = phi i32 [ %60, %69 ], [ %73, %74 ], [ %73, %71 ]\l  %86 = phi double [ %59, %69 ], [ %82, %74 ], [ %59, %71 ]\l  %87 = icmp slt i32 %85, %43\l  %88 = icmp slt i32 %84, %49\l  %89 = select i1 %87, i1 %88, i1 false\l  br i1 %89, label %58, label %90, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x60629f0:s0 -> Node0x6062900;
	Node0x60629f0:s1 -> Node0x6060aa0;
	Node0x6060aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%90:\l90:                                               \l  %91 = phi double [ 0.000000e+00, %31 ], [ %86, %83 ]\l  %92 = fptrunc double %91 to float\l  %93 = sext i32 %32 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %8, i64 %93\l  store float %92, float addrspace(1)* %94, align 4, !tbaa !20\l  %95 = add i32 %30, %32\l  %96 = icmp slt i32 %95, %22\l  br i1 %96, label %31, label %97, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x6060aa0:s0 -> Node0x60609e0;
	Node0x6060aa0:s1 -> Node0x6060560;
	Node0x6060560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%97:\l97:                                               \l  ret void\l}"];
}
