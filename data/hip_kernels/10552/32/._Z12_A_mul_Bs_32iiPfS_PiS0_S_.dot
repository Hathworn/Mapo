digraph "CFG for '_Z12_A_mul_Bs_32iiPfS_PiS0_S_' function" {
	label="CFG for '_Z12_A_mul_Bs_32iiPfS_PiS0_S_' function";

	Node0x59563d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %9, %14\l  %19 = add i32 %18, %8\l  %20 = icmp slt i32 %19, %1\l  br i1 %20, label %21, label %182\l|{<s0>T|<s1>F}}"];
	Node0x59563d0:s0 -> Node0x5958610;
	Node0x59563d0:s1 -> Node0x59586a0;
	Node0x5958610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%21:\l21:                                               \l  %22 = icmp sgt i32 %0, 0\l  %23 = udiv i32 %17, %14\l  %24 = mul i32 %23, %14\l  %25 = icmp ugt i32 %17, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %14\l  %29 = and i32 %0, 7\l  %30 = icmp ult i32 %0, 8\l  %31 = and i32 %0, -8\l  %32 = icmp eq i32 %29, 0\l  br label %33\l}"];
	Node0x5958610 -> Node0x59581e0;
	Node0x59581e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%33:\l33:                                               \l  %34 = phi i32 [ %19, %21 ], [ %180, %179 ]\l  %35 = mul nsw i32 %34, %0\l  %36 = add nsw i32 %35, %0\l  br i1 %22, label %37, label %43\l|{<s0>T|<s1>F}}"];
	Node0x59581e0:s0 -> Node0x59592f0;
	Node0x59581e0:s1 -> Node0x5959380;
	Node0x59592f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%37:\l37:                                               \l  %38 = phi i32 [ %41, %37 ], [ %35, %33 ]\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %6, i64 %39\l  store float 0.000000e+00, float addrspace(1)* %40, align 4, !tbaa !16\l  %41 = add nsw i32 %38, 1\l  %42 = icmp slt i32 %41, %36\l  br i1 %42, label %37, label %43, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x59592f0:s0 -> Node0x59592f0;
	Node0x59592f0:s1 -> Node0x5959380;
	Node0x5959380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%43:\l43:                                               \l  %44 = sext i32 %34 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %44\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !22, !amdgpu.noclobber\l... !6\l  %47 = add nsw i32 %34, 1\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %48\l  %50 = load i32, i32 addrspace(1)* %49, align 4, !tbaa !22, !amdgpu.noclobber\l... !6\l  %51 = add nsw i32 %50, -1\l  %52 = icmp slt i32 %46, %50\l  br i1 %52, label %53, label %179\l|{<s0>T|<s1>F}}"];
	Node0x5959380:s0 -> Node0x595b860;
	Node0x5959380:s1 -> Node0x5959090;
	Node0x595b860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%53:\l53:                                               \l  %54 = add nsw i32 %46, -1\l  br label %55\l}"];
	Node0x595b860 -> Node0x595ba30;
	Node0x595ba30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%55:\l55:                                               \l  %56 = phi i32 [ %177, %176 ], [ %54, %53 ]\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %57\l  %59 = load i32, i32 addrspace(1)* %58, align 4, !tbaa !22, !amdgpu.noclobber\l... !6\l  %60 = add nsw i32 %59, -1\l  %61 = getelementptr inbounds float, float addrspace(1)* %3, i64 %57\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = mul nsw i32 %60, %0\l  br i1 %22, label %64, label %176\l|{<s0>T|<s1>F}}"];
	Node0x595ba30:s0 -> Node0x595c690;
	Node0x595ba30:s1 -> Node0x595bb20;
	Node0x595c690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%64:\l64:                                               \l  br i1 %30, label %158, label %65\l|{<s0>T|<s1>F}}"];
	Node0x595c690:s0 -> Node0x5958e80;
	Node0x595c690:s1 -> Node0x5958ed0;
	Node0x5958ed0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%65:\l65:                                               \l  %66 = phi i32 [ %155, %65 ], [ 0, %64 ]\l  %67 = phi i32 [ %156, %65 ], [ 0, %64 ]\l  %68 = add nsw i32 %66, %63\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %2, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !16\l  %72 = fmul contract float %62, %71\l  %73 = add nsw i32 %66, %35\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %6, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16\l  %77 = fadd contract float %76, %72\l  store float %77, float addrspace(1)* %75, align 4, !tbaa !16\l  %78 = or i32 %66, 1\l  %79 = add nsw i32 %78, %63\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = fmul contract float %62, %82\l  %84 = add nsw i32 %78, %35\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %6, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !16\l  %88 = fadd contract float %87, %83\l  store float %88, float addrspace(1)* %86, align 4, !tbaa !16\l  %89 = or i32 %66, 2\l  %90 = add nsw i32 %89, %63\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %2, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16\l  %94 = fmul contract float %62, %93\l  %95 = add nsw i32 %89, %35\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %6, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16\l  %99 = fadd contract float %98, %94\l  store float %99, float addrspace(1)* %97, align 4, !tbaa !16\l  %100 = or i32 %66, 3\l  %101 = add nsw i32 %100, %63\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %2, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16\l  %105 = fmul contract float %62, %104\l  %106 = add nsw i32 %100, %35\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %6, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !16\l  %110 = fadd contract float %109, %105\l  store float %110, float addrspace(1)* %108, align 4, !tbaa !16\l  %111 = or i32 %66, 4\l  %112 = add nsw i32 %111, %63\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %2, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16\l  %116 = fmul contract float %62, %115\l  %117 = add nsw i32 %111, %35\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %6, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !16\l  %121 = fadd contract float %120, %116\l  store float %121, float addrspace(1)* %119, align 4, !tbaa !16\l  %122 = or i32 %66, 5\l  %123 = add nsw i32 %122, %63\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %2, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = fmul contract float %62, %126\l  %128 = add nsw i32 %122, %35\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %6, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %132 = fadd contract float %131, %127\l  store float %132, float addrspace(1)* %130, align 4, !tbaa !16\l  %133 = or i32 %66, 6\l  %134 = add nsw i32 %133, %63\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %2, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !16\l  %138 = fmul contract float %62, %137\l  %139 = add nsw i32 %133, %35\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %6, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !16\l  %143 = fadd contract float %142, %138\l  store float %143, float addrspace(1)* %141, align 4, !tbaa !16\l  %144 = or i32 %66, 7\l  %145 = add nsw i32 %144, %63\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %2, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16\l  %149 = fmul contract float %62, %148\l  %150 = add nsw i32 %144, %35\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %6, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !16\l  %154 = fadd contract float %153, %149\l  store float %154, float addrspace(1)* %152, align 4, !tbaa !16\l  %155 = add nuw nsw i32 %66, 8\l  %156 = add i32 %67, 8\l  %157 = icmp eq i32 %156, %31\l  br i1 %157, label %158, label %65, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5958ed0:s0 -> Node0x5958e80;
	Node0x5958ed0:s1 -> Node0x5958ed0;
	Node0x5958e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%158:\l158:                                              \l  %159 = phi i32 [ 0, %64 ], [ %155, %65 ]\l  br i1 %32, label %176, label %160\l|{<s0>T|<s1>F}}"];
	Node0x5958e80:s0 -> Node0x595bb20;
	Node0x5958e80:s1 -> Node0x59608b0;
	Node0x59608b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%160:\l160:                                              \l  %161 = phi i32 [ %173, %160 ], [ %159, %158 ]\l  %162 = phi i32 [ %174, %160 ], [ 0, %158 ]\l  %163 = add nsw i32 %161, %63\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %2, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !16\l  %167 = fmul contract float %62, %166\l  %168 = add nsw i32 %161, %35\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %6, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !16\l  %172 = fadd contract float %171, %167\l  store float %172, float addrspace(1)* %170, align 4, !tbaa !16\l  %173 = add nuw nsw i32 %161, 1\l  %174 = add i32 %162, 1\l  %175 = icmp eq i32 %174, %29\l  br i1 %175, label %176, label %160, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x59608b0:s0 -> Node0x595bb20;
	Node0x59608b0:s1 -> Node0x59608b0;
	Node0x595bb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%176:\l176:                                              \l  %177 = add nsw i32 %56, 1\l  %178 = icmp slt i32 %177, %51\l  br i1 %178, label %55, label %179, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x595bb20:s0 -> Node0x595ba30;
	Node0x595bb20:s1 -> Node0x5959090;
	Node0x5959090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%179:\l179:                                              \l  %180 = add i32 %28, %34\l  %181 = icmp slt i32 %180, %1\l  br i1 %181, label %33, label %182, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x5959090:s0 -> Node0x59581e0;
	Node0x5959090:s1 -> Node0x59586a0;
	Node0x59586a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%182:\l182:                                              \l  ret void\l}"];
}
