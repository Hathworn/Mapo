digraph "CFG for '_Z9_kgauss64iiPdPiS0_S_S0_S0_S_d' function" {
	label="CFG for '_Z9_kgauss64iiPdPiS0_S_S0_S0_S_d' function";

	Node0x5af2280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !7\l  %21 = mul i32 %12, %17\l  %22 = add i32 %21, %11\l  %23 = mul nsw i32 %1, %0\l  %24 = icmp slt i32 %22, %23\l  br i1 %24, label %25, label %134\l|{<s0>T|<s1>F}}"];
	Node0x5af2280:s0 -> Node0x5af50e0;
	Node0x5af2280:s1 -> Node0x5af5170;
	Node0x5af50e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%25:\l25:                                               \l  %26 = fneg contract double %9\l  %27 = udiv i32 %20, %17\l  %28 = mul i32 %27, %17\l  %29 = icmp ugt i32 %20, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %17\l  br label %33\l}"];
	Node0x5af50e0 -> Node0x5af4aa0;
	Node0x5af4aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%33:\l33:                                               \l  %34 = phi i32 [ %22, %25 ], [ %132, %105 ]\l  %35 = freeze i32 %34\l  %36 = freeze i32 %0\l  %37 = sdiv i32 %35, %36\l  %38 = mul i32 %37, %36\l  %39 = sub i32 %35, %38\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %40\l  %42 = bitcast i32 addrspace(1)* %41 to \<2 x i32\> addrspace(1)*\l  %43 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %42, align 4, !tbaa !16\l  %44 = extractelement \<2 x i32\> %43, i64 1\l  %45 = add nsw i32 %44, -1\l  %46 = sext i32 %37 to i64\l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %46\l  %48 = bitcast i32 addrspace(1)* %47 to \<2 x i32\> addrspace(1)*\l  %49 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %48, align 4, !tbaa !16\l  %50 = extractelement \<2 x i32\> %49, i64 1\l  %51 = add nsw i32 %50, -1\l  %52 = extractelement \<2 x i32\> %43, i64 0\l  %53 = icmp slt i32 %52, %44\l  %54 = extractelement \<2 x i32\> %49, i64 0\l  %55 = icmp slt i32 %54, %50\l  %56 = select i1 %53, i1 true, i1 %55\l  br i1 %56, label %57, label %105\l|{<s0>T|<s1>F}}"];
	Node0x5af4aa0:s0 -> Node0x5af7320;
	Node0x5af4aa0:s1 -> Node0x5af4b60;
	Node0x5af7320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%57:\l57:                                               \l  %58 = add nsw i32 %54, -1\l  %59 = add nsw i32 %52, -1\l  br label %60\l}"];
	Node0x5af7320 -> Node0x5af7580;
	Node0x5af7580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%60:\l60:                                               \l  %61 = phi i1 [ %103, %96 ], [ %55, %57 ]\l  %62 = phi i1 [ %102, %96 ], [ %53, %57 ]\l  %63 = phi double [ %101, %96 ], [ 0.000000e+00, %57 ]\l  %64 = phi i32 [ %98, %96 ], [ %59, %57 ]\l  %65 = phi i32 [ %97, %96 ], [ %58, %57 ]\l  br i1 %62, label %66, label %70\l|{<s0>T|<s1>F}}"];
	Node0x5af7580:s0 -> Node0x5af5780;
	Node0x5af7580:s1 -> Node0x5af5810;
	Node0x5af5780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%66:\l66:                                               \l  %67 = sext i32 %64 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %67\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  br label %70\l}"];
	Node0x5af5780 -> Node0x5af5810;
	Node0x5af5810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  %71 = phi i32 [ %69, %66 ], [ 2147483647, %60 ]\l  br i1 %61, label %72, label %76\l|{<s0>T|<s1>F}}"];
	Node0x5af5810:s0 -> Node0x5af9380;
	Node0x5af5810:s1 -> Node0x5af93d0;
	Node0x5af9380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%72:\l72:                                               \l  %73 = sext i32 %65 to i64\l  %74 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %73\l  %75 = load i32, i32 addrspace(1)* %74, align 4, !tbaa !16, !amdgpu.noclobber\l... !6\l  br label %76\l}"];
	Node0x5af9380 -> Node0x5af93d0;
	Node0x5af93d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi i32 [ %75, %72 ], [ 2147483647, %70 ]\l  %78 = icmp slt i32 %77, %71\l  br i1 %78, label %79, label %84\l|{<s0>T|<s1>F}}"];
	Node0x5af93d0:s0 -> Node0x5af9870;
	Node0x5af93d0:s1 -> Node0x5af98c0;
	Node0x5af9870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%79:\l79:                                               \l  %80 = add nsw i32 %65, 1\l  %81 = sext i32 %65 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %5, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !20\l  br label %96\l}"];
	Node0x5af9870 -> Node0x5af7670;
	Node0x5af98c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%84:\l84:                                               \l  %85 = icmp slt i32 %71, %77\l  %86 = add nsw i32 %64, 1\l  %87 = sext i32 %64 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %2, i64 %87\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !20\l  br i1 %85, label %96, label %90\l|{<s0>T|<s1>F}}"];
	Node0x5af98c0:s0 -> Node0x5af7670;
	Node0x5af98c0:s1 -> Node0x5afa660;
	Node0x5afa660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%90:\l90:                                               \l  %91 = add nsw i32 %65, 1\l  %92 = sext i32 %65 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %5, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !20\l  %95 = fsub contract double %89, %94\l  br label %96\l}"];
	Node0x5afa660 -> Node0x5af7670;
	Node0x5af7670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%96:\l96:                                               \l  %97 = phi i32 [ %80, %79 ], [ %91, %90 ], [ %65, %84 ]\l  %98 = phi i32 [ %64, %79 ], [ %86, %90 ], [ %86, %84 ]\l  %99 = phi contract double [ %83, %79 ], [ %95, %90 ], [ %89, %84 ]\l  %100 = fmul contract double %99, %99\l  %101 = fadd contract double %63, %100\l  %102 = icmp slt i32 %98, %45\l  %103 = icmp slt i32 %97, %51\l  %104 = select i1 %102, i1 true, i1 %103\l  br i1 %104, label %60, label %105, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5af7670:s0 -> Node0x5af7580;
	Node0x5af7670:s1 -> Node0x5af4b60;
	Node0x5af4b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%105:\l105:                                              \l  %106 = phi double [ 0.000000e+00, %33 ], [ %101, %96 ]\l  %107 = fmul contract double %106, %26\l  %108 = fmul double %107, 0x3FF71547652B82FE\l  %109 = tail call double @llvm.rint.f64(double %108)\l  %110 = fneg double %109\l  %111 = tail call double @llvm.fma.f64(double %110, double\l... 0x3FE62E42FEFA39EF, double %107)\l  %112 = tail call double @llvm.fma.f64(double %110, double\l... 0x3C7ABC9E3B39803F, double %111)\l  %113 = tail call double @llvm.fma.f64(double %112, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %114 = tail call double @llvm.fma.f64(double %112, double %113, double\l... 0x3EC71DEE623FDE64)\l  %115 = tail call double @llvm.fma.f64(double %112, double %114, double\l... 0x3EFA01997C89E6B0)\l  %116 = tail call double @llvm.fma.f64(double %112, double %115, double\l... 0x3F2A01A014761F6E)\l  %117 = tail call double @llvm.fma.f64(double %112, double %116, double\l... 0x3F56C16C1852B7B0)\l  %118 = tail call double @llvm.fma.f64(double %112, double %117, double\l... 0x3F81111111122322)\l  %119 = tail call double @llvm.fma.f64(double %112, double %118, double\l... 0x3FA55555555502A1)\l  %120 = tail call double @llvm.fma.f64(double %112, double %119, double\l... 0x3FC5555555555511)\l  %121 = tail call double @llvm.fma.f64(double %112, double %120, double\l... 0x3FE000000000000B)\l  %122 = tail call double @llvm.fma.f64(double %112, double %121, double\l... 1.000000e+00)\l  %123 = tail call double @llvm.fma.f64(double %112, double %122, double\l... 1.000000e+00)\l  %124 = fptosi double %109 to i32\l  %125 = tail call double @llvm.amdgcn.ldexp.f64(double %123, i32 %124)\l  %126 = fcmp ogt double %107, 1.024000e+03\l  %127 = select i1 %126, double 0x7FF0000000000000, double %125\l  %128 = fcmp olt double %107, -1.075000e+03\l  %129 = select i1 %128, double 0.000000e+00, double %127\l  %130 = sext i32 %34 to i64\l  %131 = getelementptr inbounds double, double addrspace(1)* %8, i64 %130\l  store double %129, double addrspace(1)* %131, align 8, !tbaa !20\l  %132 = add i32 %32, %34\l  %133 = icmp slt i32 %132, %23\l  br i1 %133, label %33, label %134, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5af4b60:s0 -> Node0x5af4aa0;
	Node0x5af4b60:s1 -> Node0x5af5170;
	Node0x5af5170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%134:\l134:                                              \l  ret void\l}"];
}
