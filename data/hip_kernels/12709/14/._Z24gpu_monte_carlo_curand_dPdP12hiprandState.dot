digraph "CFG for '_Z24gpu_monte_carlo_curand_dPdP12hiprandState' function" {
	label="CFG for '_Z24gpu_monte_carlo_curand_dPdP12hiprandState' function";

	Node0x4f60a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%2:\l  %3 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = add i32 %11, %4\l  %13 = zext i32 %12 to i64\l  %14 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13\l  %15 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %15) #4\l  %16 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 0\l  %17 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 1\l  %18 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 2\l  %19 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 3\l  %20 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 4\l  %21 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 0\l  store i32 -1719071262, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 -2018044632, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 -1452303100, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 -1894485380, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 -1836744730, i32 addrspace(5)* %20, align 8, !tbaa !7\l  store i32 485462757, i32 addrspace(5)* %21, align 8, !tbaa !11\l  %22 = icmp eq i32 %12, 0\l  br i1 %22, label %200, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4f60a50:s0 -> Node0x4f67470;
	Node0x4f60a50:s1 -> Node0x4f67500;
	Node0x4f67500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%23:\l23:                                               \l  %24 = phi i64 [ %33, %31 ], [ %13, %2 ]\l  %25 = phi i32 [ %32, %31 ], [ 0, %2 ]\l  %26 = trunc i64 %24 to i32\l  %27 = and i32 %26, 3\l  %28 = icmp eq i32 %27, 0\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4f67500:s0 -> Node0x4f67640;
	Node0x4f67500:s1 -> Node0x4f67a30;
	Node0x4f67a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%29:\l29:                                               \l  %30 = zext i32 %25 to i64\l  br label %35\l}"];
	Node0x4f67a30 -> Node0x4f67be0;
	Node0x4f67640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%31:\l31:                                               \l  %32 = add nuw nsw i32 %25, 1\l  %33 = lshr i64 %24, 2\l  %34 = icmp ult i64 %24, 4\l  br i1 %34, label %200, label %23, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4f67640:s0 -> Node0x4f67470;
	Node0x4f67640:s1 -> Node0x4f67500;
	Node0x4f67be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%35:\l35:                                               \l  %36 = phi i32 [ 0, %29 ], [ %198, %197 ]\l  br label %37\l}"];
	Node0x4f67be0 -> Node0x4f681c0;
	Node0x4f681c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi i32 [ 0, %35 ], [ %170, %37 ]\l  %39 = phi i32 [ 0, %35 ], [ %176, %37 ]\l  %40 = phi i32 [ 0, %35 ], [ %182, %37 ]\l  %41 = phi i32 [ 0, %35 ], [ %188, %37 ]\l  %42 = phi i32 [ 0, %35 ], [ %194, %37 ]\l  %43 = phi i32 [ 0, %35 ], [ %195, %37 ]\l  %44 = lshr i32 %43, 5\l  %45 = and i32 %43, 28\l  %46 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %44\l  %47 = load i32, i32 addrspace(5)* %46, align 4, !tbaa !7\l  %48 = shl nuw i32 1, %45\l  %49 = and i32 %48, %47\l  %50 = icmp eq i32 %49, 0\l  %51 = mul nuw nsw i32 %43, 5\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %52\l  %54 = load i32, i32 addrspace(4)* %53, align 16, !tbaa !7\l  %55 = select i1 %50, i32 0, i32 %54\l  %56 = xor i32 %55, %38\l  %57 = or i32 %51, 1\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %58\l  %60 = load i32, i32 addrspace(4)* %59, align 4, !tbaa !7\l  %61 = select i1 %50, i32 0, i32 %60\l  %62 = xor i32 %61, %39\l  %63 = or i32 %51, 2\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %64\l  %66 = load i32, i32 addrspace(4)* %65, align 8, !tbaa !7\l  %67 = select i1 %50, i32 0, i32 %66\l  %68 = xor i32 %67, %40\l  %69 = or i32 %51, 3\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %70\l  %72 = load i32, i32 addrspace(4)* %71, align 4, !tbaa !7\l  %73 = select i1 %50, i32 0, i32 %72\l  %74 = xor i32 %73, %41\l  %75 = add nuw nsw i32 %51, 4\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %76\l  %78 = load i32, i32 addrspace(4)* %77, align 16, !tbaa !7\l  %79 = select i1 %50, i32 0, i32 %78\l  %80 = xor i32 %79, %42\l  %81 = or i32 %43, 1\l  %82 = lshr i32 %43, 5\l  %83 = and i32 %81, 29\l  %84 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %82\l  %85 = load i32, i32 addrspace(5)* %84, align 4, !tbaa !7\l  %86 = shl nuw i32 1, %83\l  %87 = and i32 %86, %85\l  %88 = icmp eq i32 %87, 0\l  %89 = mul nuw nsw i32 %81, 5\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %90\l  %92 = load i32, i32 addrspace(4)* %91, align 4, !tbaa !7\l  %93 = select i1 %88, i32 0, i32 %92\l  %94 = xor i32 %93, %56\l  %95 = add nuw nsw i32 %89, 1\l  %96 = zext i32 %95 to i64\l  %97 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %96\l  %98 = load i32, i32 addrspace(4)* %97, align 8, !tbaa !7\l  %99 = select i1 %88, i32 0, i32 %98\l  %100 = xor i32 %99, %62\l  %101 = or i32 %89, 2\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %102\l  %104 = load i32, i32 addrspace(4)* %103, align 4, !tbaa !7\l  %105 = select i1 %88, i32 0, i32 %104\l  %106 = xor i32 %105, %68\l  %107 = add nuw nsw i32 %89, 3\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %108\l  %110 = load i32, i32 addrspace(4)* %109, align 16, !tbaa !7\l  %111 = select i1 %88, i32 0, i32 %110\l  %112 = xor i32 %111, %74\l  %113 = add nuw nsw i32 %89, 4\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %114\l  %116 = load i32, i32 addrspace(4)* %115, align 4, !tbaa !7\l  %117 = select i1 %88, i32 0, i32 %116\l  %118 = xor i32 %117, %80\l  %119 = or i32 %43, 2\l  %120 = lshr i32 %43, 5\l  %121 = and i32 %119, 30\l  %122 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %120\l  %123 = load i32, i32 addrspace(5)* %122, align 4, !tbaa !7\l  %124 = shl nuw i32 1, %121\l  %125 = and i32 %124, %123\l  %126 = icmp eq i32 %125, 0\l  %127 = mul nuw nsw i32 %119, 5\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %128\l  %130 = load i32, i32 addrspace(4)* %129, align 8, !tbaa !7\l  %131 = select i1 %126, i32 0, i32 %130\l  %132 = xor i32 %131, %94\l  %133 = or i32 %127, 1\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %134\l  %136 = load i32, i32 addrspace(4)* %135, align 4, !tbaa !7\l  %137 = select i1 %126, i32 0, i32 %136\l  %138 = xor i32 %137, %100\l  %139 = add nuw nsw i32 %127, 2\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %140\l  %142 = load i32, i32 addrspace(4)* %141, align 16, !tbaa !7\l  %143 = select i1 %126, i32 0, i32 %142\l  %144 = xor i32 %143, %106\l  %145 = add nuw nsw i32 %127, 3\l  %146 = zext i32 %145 to i64\l  %147 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %146\l  %148 = load i32, i32 addrspace(4)* %147, align 4, !tbaa !7\l  %149 = select i1 %126, i32 0, i32 %148\l  %150 = xor i32 %149, %112\l  %151 = add nuw nsw i32 %127, 4\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %152\l  %154 = load i32, i32 addrspace(4)* %153, align 8, !tbaa !7\l  %155 = select i1 %126, i32 0, i32 %154\l  %156 = xor i32 %155, %118\l  %157 = or i32 %43, 3\l  %158 = lshr i32 %43, 5\l  %159 = and i32 %157, 31\l  %160 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %158\l  %161 = load i32, i32 addrspace(5)* %160, align 4, !tbaa !7\l  %162 = shl nuw i32 1, %159\l  %163 = and i32 %162, %161\l  %164 = icmp eq i32 %163, 0\l  %165 = mul nuw nsw i32 %157, 5\l  %166 = zext i32 %165 to i64\l  %167 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %166\l  %168 = load i32, i32 addrspace(4)* %167, align 4, !tbaa !7\l  %169 = select i1 %164, i32 0, i32 %168\l  %170 = xor i32 %169, %132\l  %171 = add nuw nsw i32 %165, 1\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %172\l  %174 = load i32, i32 addrspace(4)* %173, align 16, !tbaa !7\l  %175 = select i1 %164, i32 0, i32 %174\l  %176 = xor i32 %175, %138\l  %177 = add nuw nsw i32 %165, 2\l  %178 = zext i32 %177 to i64\l  %179 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %178\l  %180 = load i32, i32 addrspace(4)* %179, align 4, !tbaa !7\l  %181 = select i1 %164, i32 0, i32 %180\l  %182 = xor i32 %181, %144\l  %183 = add nuw nsw i32 %165, 3\l  %184 = zext i32 %183 to i64\l  %185 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %184\l  %186 = load i32, i32 addrspace(4)* %185, align 8, !tbaa !7\l  %187 = select i1 %164, i32 0, i32 %186\l  %188 = xor i32 %187, %150\l  %189 = add nuw nsw i32 %165, 4\l  %190 = zext i32 %189 to i64\l  %191 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %30, i64 %190\l  %192 = load i32, i32 addrspace(4)* %191, align 4, !tbaa !7\l  %193 = select i1 %164, i32 0, i32 %192\l  %194 = xor i32 %193, %156\l  %195 = add nuw nsw i32 %43, 4\l  %196 = icmp eq i32 %195, 160\l  br i1 %196, label %197, label %37, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4f681c0:s0 -> Node0x4f68080;
	Node0x4f681c0:s1 -> Node0x4f681c0;
	Node0x4f68080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%197:\l197:                                              \l  store i32 %170, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 %176, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 %182, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 %188, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 %194, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %198 = add nuw nsw i32 %36, 1\l  %199 = icmp eq i32 %198, %27\l  br i1 %199, label %31, label %35, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4f68080:s0 -> Node0x4f67640;
	Node0x4f68080:s1 -> Node0x4f67be0;
	Node0x4f67470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%200:\l200:                                              \l  %201 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %201, align 4, !tbaa !20\l  %202 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %202, align 8, !tbaa !21\l  %203 = bitcast %struct.hiprandState addrspace(1)* %14 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %203, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %15, i64 48, i1 false), !tbaa.struct !22\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %15) #4\l  %204 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 0\l  %205 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 1\l  %206 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 2\l  %207 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 3\l  %208 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %13, i32 0, i32 0, i32 5, i64 4\l  %209 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %14, i64 0, i32 0, i32 0, i32 0\l  %210 = load i32, i32 addrspace(1)* %204, align 8, !tbaa !7\l  %211 = load i32, i32 addrspace(1)* %205, align 4, !tbaa !7\l  %212 = load i32, i32 addrspace(1)* %206, align 8, !tbaa !7\l  %213 = load i32, i32 addrspace(1)* %207, align 4, !tbaa !7\l  %214 = load i32, i32 addrspace(1)* %208, align 8, !tbaa !7\l  %215 = load i32, i32 addrspace(1)* %209, align 8, !tbaa !11\l  br label %223\l}"];
	Node0x4f67470 -> Node0x4f61490;
	Node0x4f61550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%216:\l216:                                              \l  %217 = add i32 %215, -1325883392\l  store i32 %283, i32 addrspace(1)* %204, align 8, !tbaa !7\l  store i32 %302, i32 addrspace(1)* %205, align 4, !tbaa !7\l  store i32 %315, i32 addrspace(1)* %206, align 8, !tbaa !7\l  store i32 %334, i32 addrspace(1)* %207, align 4, !tbaa !7\l  store i32 %347, i32 addrspace(1)* %208, align 8, !tbaa !7\l  store i32 %217, i32 addrspace(1)* %209, align 8, !tbaa !11\l  %218 = sitofp i32 %359 to float\l  %219 = fmul contract float %218, 4.000000e+00\l  %220 = fpext float %219 to double\l  %221 = fmul contract double %220, 0x3F30000000000000\l  %222 = getelementptr inbounds double, double addrspace(1)* %0, i64 %13\l  store double %221, double addrspace(1)* %222, align 8, !tbaa !24\l  ret void\l}"];
	Node0x4f61490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%223:\l223:                                              \l  %224 = phi i32 [ 0, %200 ], [ %360, %223 ]\l  %225 = phi i32 [ 0, %200 ], [ %359, %223 ]\l  %226 = phi i32 [ %210, %200 ], [ %283, %223 ]\l  %227 = phi i32 [ %211, %200 ], [ %302, %223 ]\l  %228 = phi i32 [ %212, %200 ], [ %315, %223 ]\l  %229 = phi i32 [ %213, %200 ], [ %334, %223 ]\l  %230 = phi i32 [ %214, %200 ], [ %347, %223 ]\l  %231 = phi i32 [ %215, %200 ], [ %348, %223 ]\l  %232 = lshr i32 %226, 2\l  %233 = xor i32 %232, %226\l  %234 = shl i32 %230, 4\l  %235 = shl i32 %233, 1\l  %236 = xor i32 %235, %234\l  %237 = xor i32 %236, %233\l  %238 = xor i32 %237, %230\l  %239 = add i32 %231, 362437\l  %240 = add i32 %239, %238\l  %241 = uitofp i32 %240 to float\l  %242 = fmul contract float %241, 0x3DF0000000000000\l  %243 = fadd contract float %242, 0x3DF0000000000000\l  %244 = fpext float %243 to double\l  %245 = lshr i32 %227, 2\l  %246 = xor i32 %245, %227\l  %247 = shl i32 %238, 4\l  %248 = shl i32 %246, 1\l  %249 = xor i32 %248, %247\l  %250 = xor i32 %249, %246\l  %251 = xor i32 %250, %238\l  %252 = add i32 %231, 724874\l  %253 = add i32 %251, %252\l  %254 = uitofp i32 %253 to float\l  %255 = fmul contract float %254, 0x3DF0000000000000\l  %256 = fadd contract float %255, 0x3DF0000000000000\l  %257 = fpext float %256 to double\l  %258 = fmul contract double %244, %244\l  %259 = fmul contract double %257, %257\l  %260 = fadd contract double %258, %259\l  %261 = fcmp contract ole double %260, 1.000000e+00\l  %262 = zext i1 %261 to i32\l  %263 = add nuw nsw i32 %225, %262\l  %264 = lshr i32 %228, 2\l  %265 = xor i32 %264, %228\l  %266 = shl i32 %251, 4\l  %267 = shl i32 %265, 1\l  %268 = xor i32 %267, %266\l  %269 = xor i32 %268, %265\l  %270 = xor i32 %269, %251\l  %271 = add i32 %231, 1087311\l  %272 = add i32 %271, %270\l  %273 = uitofp i32 %272 to float\l  %274 = fmul contract float %273, 0x3DF0000000000000\l  %275 = fadd contract float %274, 0x3DF0000000000000\l  %276 = fpext float %275 to double\l  %277 = lshr i32 %229, 2\l  %278 = xor i32 %277, %229\l  %279 = shl i32 %270, 4\l  %280 = shl i32 %278, 1\l  %281 = xor i32 %280, %279\l  %282 = xor i32 %281, %278\l  %283 = xor i32 %282, %270\l  %284 = add i32 %231, 1449748\l  %285 = add i32 %283, %284\l  %286 = uitofp i32 %285 to float\l  %287 = fmul contract float %286, 0x3DF0000000000000\l  %288 = fadd contract float %287, 0x3DF0000000000000\l  %289 = fpext float %288 to double\l  %290 = fmul contract double %276, %276\l  %291 = fmul contract double %289, %289\l  %292 = fadd contract double %290, %291\l  %293 = fcmp contract ole double %292, 1.000000e+00\l  %294 = zext i1 %293 to i32\l  %295 = add nuw nsw i32 %263, %294\l  %296 = lshr i32 %230, 2\l  %297 = xor i32 %296, %230\l  %298 = shl i32 %283, 4\l  %299 = shl i32 %297, 1\l  %300 = xor i32 %299, %298\l  %301 = xor i32 %300, %297\l  %302 = xor i32 %301, %283\l  %303 = add i32 %231, 1812185\l  %304 = add i32 %303, %302\l  %305 = uitofp i32 %304 to float\l  %306 = fmul contract float %305, 0x3DF0000000000000\l  %307 = fadd contract float %306, 0x3DF0000000000000\l  %308 = fpext float %307 to double\l  %309 = lshr i32 %238, 2\l  %310 = xor i32 %309, %238\l  %311 = shl i32 %302, 4\l  %312 = shl i32 %310, 1\l  %313 = xor i32 %312, %311\l  %314 = xor i32 %313, %310\l  %315 = xor i32 %314, %302\l  %316 = add i32 %231, 2174622\l  %317 = add i32 %315, %316\l  %318 = uitofp i32 %317 to float\l  %319 = fmul contract float %318, 0x3DF0000000000000\l  %320 = fadd contract float %319, 0x3DF0000000000000\l  %321 = fpext float %320 to double\l  %322 = fmul contract double %308, %308\l  %323 = fmul contract double %321, %321\l  %324 = fadd contract double %322, %323\l  %325 = fcmp contract ole double %324, 1.000000e+00\l  %326 = zext i1 %325 to i32\l  %327 = add nuw nsw i32 %295, %326\l  %328 = lshr i32 %251, 2\l  %329 = xor i32 %328, %251\l  %330 = shl i32 %315, 4\l  %331 = shl i32 %329, 1\l  %332 = xor i32 %331, %330\l  %333 = xor i32 %332, %329\l  %334 = xor i32 %333, %315\l  %335 = add i32 %231, 2537059\l  %336 = add i32 %335, %334\l  %337 = uitofp i32 %336 to float\l  %338 = fmul contract float %337, 0x3DF0000000000000\l  %339 = fadd contract float %338, 0x3DF0000000000000\l  %340 = fpext float %339 to double\l  %341 = lshr i32 %270, 2\l  %342 = xor i32 %341, %270\l  %343 = shl i32 %334, 4\l  %344 = shl i32 %342, 1\l  %345 = xor i32 %344, %343\l  %346 = xor i32 %345, %342\l  %347 = xor i32 %346, %334\l  %348 = add i32 %231, 2899496\l  %349 = add i32 %347, %348\l  %350 = uitofp i32 %349 to float\l  %351 = fmul contract float %350, 0x3DF0000000000000\l  %352 = fadd contract float %351, 0x3DF0000000000000\l  %353 = fpext float %352 to double\l  %354 = fmul contract double %340, %340\l  %355 = fmul contract double %353, %353\l  %356 = fadd contract double %354, %355\l  %357 = fcmp contract ole double %356, 1.000000e+00\l  %358 = zext i1 %357 to i32\l  %359 = add nuw nsw i32 %327, %358\l  %360 = add nuw nsw i32 %224, 4\l  %361 = icmp eq i32 %360, 4096\l  br i1 %361, label %216, label %223, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4f61490:s0 -> Node0x4f61550;
	Node0x4f61490:s1 -> Node0x4f61490;
}
