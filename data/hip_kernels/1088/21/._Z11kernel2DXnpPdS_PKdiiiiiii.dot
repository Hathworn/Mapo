digraph "CFG for '_Z11kernel2DXnpPdS_PKdiiiiiii' function" {
	label="CFG for '_Z11kernel2DXnpPdS_PKdiiiiiii' function";

	Node0x50ce570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%10:\l  %11 = mul nsw i32 %7, %6\l  %12 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x i32]\l... addrspace(3)* @memory to double addrspace(3)*), i32 %11\l  %13 = icmp sgt i32 %3, 0\l  br i1 %13, label %14, label %32\l|{<s0>T|<s1>F}}"];
	Node0x50ce570:s0 -> Node0x50ce410;
	Node0x50ce570:s1 -> Node0x50cf760;
	Node0x50ce410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%14:\l14:                                               \l  %15 = and i32 %3, 7\l  %16 = icmp ult i32 %3, 8\l  br i1 %16, label %19, label %17\l|{<s0>T|<s1>F}}"];
	Node0x50ce410:s0 -> Node0x50ce210;
	Node0x50ce410:s1 -> Node0x50cfaf0;
	Node0x50cfaf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%17:\l17:                                               \l  %18 = and i32 %3, -8\l  br label %52\l}"];
	Node0x50cfaf0 -> Node0x50cfcb0;
	Node0x50ce210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%19:\l19:                                               \l  %20 = phi i32 [ 0, %14 ], [ %94, %52 ]\l  %21 = icmp eq i32 %15, 0\l  br i1 %21, label %32, label %22\l|{<s0>T|<s1>F}}"];
	Node0x50ce210:s0 -> Node0x50cf760;
	Node0x50ce210:s1 -> Node0x50cfee0;
	Node0x50cfee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = phi i32 [ %29, %22 ], [ %20, %19 ]\l  %24 = phi i32 [ %30, %22 ], [ 0, %19 ]\l  %25 = zext i32 %23 to i64\l  %26 = getelementptr inbounds double, double addrspace(1)* %2, i64 %25\l  %27 = load double, double addrspace(1)* %26, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %28 = getelementptr inbounds double, double addrspace(3)* %12, i32 %23\l  store double %27, double addrspace(3)* %28, align 8, !tbaa !4\l  %29 = add nuw nsw i32 %23, 1\l  %30 = add nuw nsw i32 %24, 1\l  %31 = icmp eq i32 %30, %15\l  br i1 %31, label %32, label %22, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x50cfee0:s0 -> Node0x50cf760;
	Node0x50cfee0:s1 -> Node0x50cfee0;
	Node0x50cf760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%32:\l32:                                               \l  %33 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %34 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %35 = getelementptr i8, i8 addrspace(4)* %33, i64 4\l  %36 = bitcast i8 addrspace(4)* %35 to i16 addrspace(4)*\l  %37 = load i16, i16 addrspace(4)* %36, align 4, !range !11, !invariant.load\l... !8\l  %38 = zext i16 %37 to i32\l  %39 = mul i32 %34, %38\l  %40 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !12\l  %41 = add i32 %39, %40\l  %42 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %43 = getelementptr i8, i8 addrspace(4)* %33, i64 6\l  %44 = bitcast i8 addrspace(4)* %43 to i16 addrspace(4)*\l  %45 = load i16, i16 addrspace(4)* %44, align 2, !range !11, !invariant.load\l... !8\l  %46 = zext i16 %45 to i32\l  %47 = mul i32 %42, %46\l  %48 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !12\l  %49 = add i32 %47, %48\l  %50 = add i32 %40, %4\l  %51 = icmp eq i32 %34, 0\l  br i1 %51, label %227, label %97\l|{<s0>T|<s1>F}}"];
	Node0x50cf760:s0 -> Node0x50d42f0;
	Node0x50cf760:s1 -> Node0x50d4380;
	Node0x50cfcb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%52:\l52:                                               \l  %53 = phi i32 [ 0, %17 ], [ %94, %52 ]\l  %54 = phi i32 [ 0, %17 ], [ %95, %52 ]\l  %55 = zext i32 %53 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %2, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %58 = getelementptr inbounds double, double addrspace(3)* %12, i32 %53\l  store double %57, double addrspace(3)* %58, align 8, !tbaa !4\l  %59 = or i32 %53, 1\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %2, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %63 = getelementptr inbounds double, double addrspace(3)* %12, i32 %59\l  store double %62, double addrspace(3)* %63, align 8, !tbaa !4\l  %64 = or i32 %53, 2\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds double, double addrspace(1)* %2, i64 %65\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %68 = getelementptr inbounds double, double addrspace(3)* %12, i32 %64\l  store double %67, double addrspace(3)* %68, align 8, !tbaa !4\l  %69 = or i32 %53, 3\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %2, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %73 = getelementptr inbounds double, double addrspace(3)* %12, i32 %69\l  store double %72, double addrspace(3)* %73, align 8, !tbaa !4\l  %74 = or i32 %53, 4\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %2, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %78 = getelementptr inbounds double, double addrspace(3)* %12, i32 %74\l  store double %77, double addrspace(3)* %78, align 8, !tbaa !4\l  %79 = or i32 %53, 5\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %2, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %83 = getelementptr inbounds double, double addrspace(3)* %12, i32 %79\l  store double %82, double addrspace(3)* %83, align 8, !tbaa !4\l  %84 = or i32 %53, 6\l  %85 = zext i32 %84 to i64\l  %86 = getelementptr inbounds double, double addrspace(1)* %2, i64 %85\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %88 = getelementptr inbounds double, double addrspace(3)* %12, i32 %84\l  store double %87, double addrspace(3)* %88, align 8, !tbaa !4\l  %89 = or i32 %53, 7\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %2, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %93 = getelementptr inbounds double, double addrspace(3)* %12, i32 %89\l  store double %92, double addrspace(3)* %93, align 8, !tbaa !4\l  %94 = add nuw nsw i32 %53, 8\l  %95 = add nuw i32 %54, 8\l  %96 = icmp eq i32 %95, %18\l  br i1 %96, label %19, label %52, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x50cfcb0:s0 -> Node0x50ce210;
	Node0x50cfcb0:s1 -> Node0x50cfcb0;
	Node0x50d4380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%97:\l97:                                               \l  %98 = sdiv i32 %9, %8\l  %99 = add nsw i32 %98, -1\l  %100 = icmp eq i32 %34, %99\l  br i1 %100, label %227, label %101\l|{<s0>T|<s1>F}}"];
	Node0x50d4380:s0 -> Node0x50d42f0;
	Node0x50d4380:s1 -> Node0x50d69e0;
	Node0x50d69e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%101:\l101:                                              \l  %102 = mul nsw i32 %49, %9\l  %103 = add nsw i32 %102, %41\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds double, double addrspace(1)* %1, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %107 = mul nsw i32 %48, %6\l  %108 = add i32 %107, %50\l  %109 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %108\l  store double %106, double addrspace(3)* %109, align 8, !tbaa !4\l  %110 = icmp ult i32 %40, %4\l  br i1 %110, label %111, label %119\l|{<s0>T|<s1>F}}"];
	Node0x50d69e0:s0 -> Node0x50d7060;
	Node0x50d69e0:s1 -> Node0x50d70f0;
	Node0x50d7060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%111:\l111:                                              \l  %112 = sub i32 %41, %4\l  %113 = add nsw i32 %112, %102\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %1, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %117 = add i32 %107, %40\l  %118 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %117\l  store double %116, double addrspace(3)* %118, align 8, !tbaa !4\l  br label %119\l}"];
	Node0x50d7060 -> Node0x50d70f0;
	Node0x50d70f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%119:\l119:                                              \l  %120 = icmp ult i32 %40, %5\l  br i1 %120, label %121, label %128\l|{<s0>T|<s1>F}}"];
	Node0x50d70f0:s0 -> Node0x50d7790;
	Node0x50d70f0:s1 -> Node0x50d77e0;
	Node0x50d7790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%121:\l121:                                              \l  %122 = add nsw i32 %103, %8\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds double, double addrspace(1)* %1, i64 %123\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %126 = add i32 %108, %8\l  %127 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %126\l  store double %125, double addrspace(3)* %127, align 8, !tbaa !4\l  br label %128\l}"];
	Node0x50d7790 -> Node0x50d77e0;
	Node0x50d77e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%128:\l128:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %129 = add i32 %107, %40\l  br i1 %13, label %130, label %154\l|{<s0>T|<s1>F}}"];
	Node0x50d77e0:s0 -> Node0x50d5100;
	Node0x50d77e0:s1 -> Node0x50d5150;
	Node0x50d5100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%130:\l130:                                              \l  %131 = and i32 %3, 7\l  %132 = icmp ult i32 %3, 8\l  br i1 %132, label %135, label %133\l|{<s0>T|<s1>F}}"];
	Node0x50d5100:s0 -> Node0x50d8780;
	Node0x50d5100:s1 -> Node0x50d87d0;
	Node0x50d87d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%133:\l133:                                              \l  %134 = and i32 %3, -8\l  br label %157\l}"];
	Node0x50d87d0 -> Node0x50d89a0;
	Node0x50d8780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%135:\l135:                                              \l  %136 = phi double [ undef, %130 ], [ %223, %157 ]\l  %137 = phi i32 [ 0, %130 ], [ %224, %157 ]\l  %138 = phi double [ 0.000000e+00, %130 ], [ %223, %157 ]\l  %139 = icmp eq i32 %131, 0\l  br i1 %139, label %154, label %140\l|{<s0>T|<s1>F}}"];
	Node0x50d8780:s0 -> Node0x50d5150;
	Node0x50d8780:s1 -> Node0x50d9ba0;
	Node0x50d9ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%140:\l140:                                              \l  %141 = phi i32 [ %151, %140 ], [ %137, %135 ]\l  %142 = phi double [ %150, %140 ], [ %138, %135 ]\l  %143 = phi i32 [ %152, %140 ], [ 0, %135 ]\l  %144 = getelementptr inbounds double, double addrspace(3)* %12, i32 %141\l  %145 = load double, double addrspace(3)* %144, align 8, !tbaa !4\l  %146 = add nsw i32 %129, %141\l  %147 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %146\l  %148 = load double, double addrspace(3)* %147, align 8, !tbaa !4\l  %149 = fmul contract double %145, %148\l  %150 = fadd contract double %142, %149\l  %151 = add nuw nsw i32 %141, 1\l  %152 = add nuw nsw i32 %143, 1\l  %153 = icmp eq i32 %152, %131\l  br i1 %153, label %154, label %140, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x50d9ba0:s0 -> Node0x50d5150;
	Node0x50d9ba0:s1 -> Node0x50d9ba0;
	Node0x50d5150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%154:\l154:                                              \l  %155 = phi double [ 0.000000e+00, %128 ], [ %136, %135 ], [ %150, %140 ]\l  %156 = getelementptr inbounds double, double addrspace(1)* %0, i64 %104\l  store double %155, double addrspace(1)* %156, align 8, !tbaa !4\l  br label %227\l}"];
	Node0x50d5150 -> Node0x50d42f0;
	Node0x50d89a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%157:\l157:                                              \l  %158 = phi i32 [ 0, %133 ], [ %224, %157 ]\l  %159 = phi double [ 0.000000e+00, %133 ], [ %223, %157 ]\l  %160 = phi i32 [ 0, %133 ], [ %225, %157 ]\l  %161 = getelementptr inbounds double, double addrspace(3)* %12, i32 %158\l  %162 = load double, double addrspace(3)* %161, align 8, !tbaa !4\l  %163 = add nsw i32 %129, %158\l  %164 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %163\l  %165 = load double, double addrspace(3)* %164, align 8, !tbaa !4\l  %166 = fmul contract double %162, %165\l  %167 = fadd contract double %159, %166\l  %168 = or i32 %158, 1\l  %169 = getelementptr inbounds double, double addrspace(3)* %12, i32 %168\l  %170 = load double, double addrspace(3)* %169, align 8, !tbaa !4\l  %171 = add nsw i32 %129, %168\l  %172 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %171\l  %173 = load double, double addrspace(3)* %172, align 8, !tbaa !4\l  %174 = fmul contract double %170, %173\l  %175 = fadd contract double %167, %174\l  %176 = or i32 %158, 2\l  %177 = getelementptr inbounds double, double addrspace(3)* %12, i32 %176\l  %178 = load double, double addrspace(3)* %177, align 8, !tbaa !4\l  %179 = add nsw i32 %129, %176\l  %180 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %179\l  %181 = load double, double addrspace(3)* %180, align 8, !tbaa !4\l  %182 = fmul contract double %178, %181\l  %183 = fadd contract double %175, %182\l  %184 = or i32 %158, 3\l  %185 = getelementptr inbounds double, double addrspace(3)* %12, i32 %184\l  %186 = load double, double addrspace(3)* %185, align 8, !tbaa !4\l  %187 = add nsw i32 %129, %184\l  %188 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %187\l  %189 = load double, double addrspace(3)* %188, align 8, !tbaa !4\l  %190 = fmul contract double %186, %189\l  %191 = fadd contract double %183, %190\l  %192 = or i32 %158, 4\l  %193 = getelementptr inbounds double, double addrspace(3)* %12, i32 %192\l  %194 = load double, double addrspace(3)* %193, align 8, !tbaa !4\l  %195 = add nsw i32 %129, %192\l  %196 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %195\l  %197 = load double, double addrspace(3)* %196, align 8, !tbaa !4\l  %198 = fmul contract double %194, %197\l  %199 = fadd contract double %191, %198\l  %200 = or i32 %158, 5\l  %201 = getelementptr inbounds double, double addrspace(3)* %12, i32 %200\l  %202 = load double, double addrspace(3)* %201, align 8, !tbaa !4\l  %203 = add nsw i32 %129, %200\l  %204 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %203\l  %205 = load double, double addrspace(3)* %204, align 8, !tbaa !4\l  %206 = fmul contract double %202, %205\l  %207 = fadd contract double %199, %206\l  %208 = or i32 %158, 6\l  %209 = getelementptr inbounds double, double addrspace(3)* %12, i32 %208\l  %210 = load double, double addrspace(3)* %209, align 8, !tbaa !4\l  %211 = add nsw i32 %129, %208\l  %212 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %211\l  %213 = load double, double addrspace(3)* %212, align 8, !tbaa !4\l  %214 = fmul contract double %210, %213\l  %215 = fadd contract double %207, %214\l  %216 = or i32 %158, 7\l  %217 = getelementptr inbounds double, double addrspace(3)* %12, i32 %216\l  %218 = load double, double addrspace(3)* %217, align 8, !tbaa !4\l  %219 = add nsw i32 %129, %216\l  %220 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %219\l  %221 = load double, double addrspace(3)* %220, align 8, !tbaa !4\l  %222 = fmul contract double %218, %221\l  %223 = fadd contract double %215, %222\l  %224 = add nuw nsw i32 %158, 8\l  %225 = add nuw i32 %160, 8\l  %226 = icmp eq i32 %225, %134\l  br i1 %226, label %135, label %157, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x50d89a0:s0 -> Node0x50d8780;
	Node0x50d89a0:s1 -> Node0x50d89a0;
	Node0x50d42f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%227:\l227:                                              \l  %228 = phi double [ %155, %154 ], [ 0.000000e+00, %97 ], [ 0.000000e+00, %32\l... ]\l  br i1 %51, label %229, label %347\l|{<s0>T|<s1>F}}"];
	Node0x50d42f0:s0 -> Node0x50d0830;
	Node0x50d42f0:s1 -> Node0x50d0880;
	Node0x50d0830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%229:\l229:                                              \l  %230 = mul nsw i32 %49, %9\l  %231 = add nsw i32 %230, %41\l  %232 = sext i32 %231 to i64\l  %233 = getelementptr inbounds double, double addrspace(1)* %1, i64 %232\l  %234 = load double, double addrspace(1)* %233, align 8, !tbaa !4\l  %235 = mul nsw i32 %48, %6\l  %236 = add i32 %235, %40\l  %237 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %236\l  store double %234, double addrspace(3)* %237, align 8, !tbaa !4\l  %238 = icmp ult i32 %40, %5\l  br i1 %238, label %239, label %246\l|{<s0>T|<s1>F}}"];
	Node0x50d0830:s0 -> Node0x50de270;
	Node0x50d0830:s1 -> Node0x50de2c0;
	Node0x50de270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%239:\l239:                                              \l  %240 = add nsw i32 %231, %8\l  %241 = sext i32 %240 to i64\l  %242 = getelementptr inbounds double, double addrspace(1)* %1, i64 %241\l  %243 = load double, double addrspace(1)* %242, align 8, !tbaa !4\l  %244 = add i32 %236, %8\l  %245 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %244\l  store double %243, double addrspace(3)* %245, align 8, !tbaa !4\l  br label %246\l}"];
	Node0x50de270 -> Node0x50de2c0;
	Node0x50de2c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%246:\l246:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %247 = icmp ult i32 %40, %4\l  br i1 %247, label %347, label %248\l|{<s0>T|<s1>F}}"];
	Node0x50de2c0:s0 -> Node0x50d0880;
	Node0x50de2c0:s1 -> Node0x50dded0;
	Node0x50dded0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%248:\l248:                                              \l  %249 = sub i32 %236, %4\l  br i1 %13, label %250, label %274\l|{<s0>T|<s1>F}}"];
	Node0x50dded0:s0 -> Node0x50de060;
	Node0x50dded0:s1 -> Node0x50de0b0;
	Node0x50de060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%250:\l250:                                              \l  %251 = and i32 %3, 7\l  %252 = icmp ult i32 %3, 8\l  br i1 %252, label %255, label %253\l|{<s0>T|<s1>F}}"];
	Node0x50de060:s0 -> Node0x50de1f0;
	Node0x50de060:s1 -> Node0x50df500;
	Node0x50df500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%253:\l253:                                              \l  %254 = and i32 %3, -8\l  br label %277\l}"];
	Node0x50df500 -> Node0x50df6d0;
	Node0x50de1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%255:\l255:                                              \l  %256 = phi double [ undef, %250 ], [ %343, %277 ]\l  %257 = phi i32 [ 0, %250 ], [ %344, %277 ]\l  %258 = phi double [ %228, %250 ], [ %343, %277 ]\l  %259 = icmp eq i32 %251, 0\l  br i1 %259, label %274, label %260\l|{<s0>T|<s1>F}}"];
	Node0x50de1f0:s0 -> Node0x50de0b0;
	Node0x50de1f0:s1 -> Node0x50d7f90;
	Node0x50d7f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%260:\l260:                                              \l  %261 = phi i32 [ %271, %260 ], [ %257, %255 ]\l  %262 = phi double [ %270, %260 ], [ %258, %255 ]\l  %263 = phi i32 [ %272, %260 ], [ 0, %255 ]\l  %264 = getelementptr inbounds double, double addrspace(3)* %12, i32 %261\l  %265 = load double, double addrspace(3)* %264, align 8, !tbaa !4\l  %266 = add nsw i32 %249, %261\l  %267 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %266\l  %268 = load double, double addrspace(3)* %267, align 8, !tbaa !4\l  %269 = fmul contract double %265, %268\l  %270 = fadd contract double %262, %269\l  %271 = add nuw nsw i32 %261, 1\l  %272 = add nuw nsw i32 %263, 1\l  %273 = icmp eq i32 %272, %251\l  br i1 %273, label %274, label %260, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x50d7f90:s0 -> Node0x50de0b0;
	Node0x50d7f90:s1 -> Node0x50d7f90;
	Node0x50de0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%274:\l274:                                              \l  %275 = phi double [ %228, %248 ], [ %256, %255 ], [ %270, %260 ]\l  %276 = getelementptr inbounds double, double addrspace(1)* %0, i64 %232\l  store double %275, double addrspace(1)* %276, align 8, !tbaa !4\l  br label %347\l}"];
	Node0x50de0b0 -> Node0x50d0880;
	Node0x50df6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%277:\l277:                                              \l  %278 = phi i32 [ 0, %253 ], [ %344, %277 ]\l  %279 = phi double [ %228, %253 ], [ %343, %277 ]\l  %280 = phi i32 [ 0, %253 ], [ %345, %277 ]\l  %281 = getelementptr inbounds double, double addrspace(3)* %12, i32 %278\l  %282 = load double, double addrspace(3)* %281, align 8, !tbaa !4\l  %283 = add nsw i32 %249, %278\l  %284 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %283\l  %285 = load double, double addrspace(3)* %284, align 8, !tbaa !4\l  %286 = fmul contract double %282, %285\l  %287 = fadd contract double %279, %286\l  %288 = or i32 %278, 1\l  %289 = getelementptr inbounds double, double addrspace(3)* %12, i32 %288\l  %290 = load double, double addrspace(3)* %289, align 8, !tbaa !4\l  %291 = add nsw i32 %249, %288\l  %292 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %291\l  %293 = load double, double addrspace(3)* %292, align 8, !tbaa !4\l  %294 = fmul contract double %290, %293\l  %295 = fadd contract double %287, %294\l  %296 = or i32 %278, 2\l  %297 = getelementptr inbounds double, double addrspace(3)* %12, i32 %296\l  %298 = load double, double addrspace(3)* %297, align 8, !tbaa !4\l  %299 = add nsw i32 %249, %296\l  %300 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %299\l  %301 = load double, double addrspace(3)* %300, align 8, !tbaa !4\l  %302 = fmul contract double %298, %301\l  %303 = fadd contract double %295, %302\l  %304 = or i32 %278, 3\l  %305 = getelementptr inbounds double, double addrspace(3)* %12, i32 %304\l  %306 = load double, double addrspace(3)* %305, align 8, !tbaa !4\l  %307 = add nsw i32 %249, %304\l  %308 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %307\l  %309 = load double, double addrspace(3)* %308, align 8, !tbaa !4\l  %310 = fmul contract double %306, %309\l  %311 = fadd contract double %303, %310\l  %312 = or i32 %278, 4\l  %313 = getelementptr inbounds double, double addrspace(3)* %12, i32 %312\l  %314 = load double, double addrspace(3)* %313, align 8, !tbaa !4\l  %315 = add nsw i32 %249, %312\l  %316 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %315\l  %317 = load double, double addrspace(3)* %316, align 8, !tbaa !4\l  %318 = fmul contract double %314, %317\l  %319 = fadd contract double %311, %318\l  %320 = or i32 %278, 5\l  %321 = getelementptr inbounds double, double addrspace(3)* %12, i32 %320\l  %322 = load double, double addrspace(3)* %321, align 8, !tbaa !4\l  %323 = add nsw i32 %249, %320\l  %324 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %323\l  %325 = load double, double addrspace(3)* %324, align 8, !tbaa !4\l  %326 = fmul contract double %322, %325\l  %327 = fadd contract double %319, %326\l  %328 = or i32 %278, 6\l  %329 = getelementptr inbounds double, double addrspace(3)* %12, i32 %328\l  %330 = load double, double addrspace(3)* %329, align 8, !tbaa !4\l  %331 = add nsw i32 %249, %328\l  %332 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %331\l  %333 = load double, double addrspace(3)* %332, align 8, !tbaa !4\l  %334 = fmul contract double %330, %333\l  %335 = fadd contract double %327, %334\l  %336 = or i32 %278, 7\l  %337 = getelementptr inbounds double, double addrspace(3)* %12, i32 %336\l  %338 = load double, double addrspace(3)* %337, align 8, !tbaa !4\l  %339 = add nsw i32 %249, %336\l  %340 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %339\l  %341 = load double, double addrspace(3)* %340, align 8, !tbaa !4\l  %342 = fmul contract double %338, %341\l  %343 = fadd contract double %335, %342\l  %344 = add nuw nsw i32 %278, 8\l  %345 = add nuw i32 %280, 8\l  %346 = icmp eq i32 %345, %254\l  br i1 %346, label %255, label %277, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x50df6d0:s0 -> Node0x50de1f0;
	Node0x50df6d0:s1 -> Node0x50df6d0;
	Node0x50d0880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%347:\l347:                                              \l  %348 = phi double [ %275, %274 ], [ %228, %246 ], [ %228, %227 ]\l  %349 = sdiv i32 %9, %8\l  %350 = add nsw i32 %349, -1\l  %351 = icmp eq i32 %34, %350\l  br i1 %351, label %352, label %471\l|{<s0>T|<s1>F}}"];
	Node0x50d0880:s0 -> Node0x50e3d50;
	Node0x50d0880:s1 -> Node0x50e3da0;
	Node0x50e3d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%352:\l352:                                              \l  %353 = mul nsw i32 %49, %9\l  %354 = add nsw i32 %353, %41\l  %355 = sext i32 %354 to i64\l  %356 = getelementptr inbounds double, double addrspace(1)* %1, i64 %355\l  %357 = load double, double addrspace(1)* %356, align 8, !tbaa !4\l  %358 = mul nsw i32 %48, %6\l  %359 = add i32 %358, %40\l  %360 = add i32 %359, %4\l  %361 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %360\l  store double %357, double addrspace(3)* %361, align 8, !tbaa !4\l  %362 = icmp ult i32 %40, %4\l  br i1 %362, label %363, label %370\l|{<s0>T|<s1>F}}"];
	Node0x50e3d50:s0 -> Node0x50e44b0;
	Node0x50e3d50:s1 -> Node0x50e4500;
	Node0x50e44b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%363:\l363:                                              \l  %364 = sub i32 %41, %4\l  %365 = add nsw i32 %364, %353\l  %366 = sext i32 %365 to i64\l  %367 = getelementptr inbounds double, double addrspace(1)* %1, i64 %366\l  %368 = load double, double addrspace(1)* %367, align 8, !tbaa !4\l  %369 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %359\l  store double %368, double addrspace(3)* %369, align 8, !tbaa !4\l  br label %370\l}"];
	Node0x50e44b0 -> Node0x50e4500;
	Node0x50e4500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%370:\l370:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %371 = sub nsw i32 %8, %5\l  %372 = icmp ult i32 %40, %371\l  %373 = select i1 %372, i1 %13, i1 false\l  br i1 %373, label %374, label %468\l|{<s0>T|<s1>F}}"];
	Node0x50e4500:s0 -> Node0x50e4dc0;
	Node0x50e4500:s1 -> Node0x50e4e10;
	Node0x50e4dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%374:\l374:                                              \l  %375 = and i32 %3, 7\l  %376 = icmp ult i32 %3, 8\l  br i1 %376, label %449, label %377\l|{<s0>T|<s1>F}}"];
	Node0x50e4dc0:s0 -> Node0x50e5030;
	Node0x50e4dc0:s1 -> Node0x50e5080;
	Node0x50e5080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%377:\l377:                                              \l  %378 = and i32 %3, -8\l  br label %379\l}"];
	Node0x50e5080 -> Node0x50e5250;
	Node0x50e5250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%379:\l379:                                              \l  %380 = phi i32 [ 0, %377 ], [ %446, %379 ]\l  %381 = phi double [ %348, %377 ], [ %445, %379 ]\l  %382 = phi i32 [ 0, %377 ], [ %447, %379 ]\l  %383 = getelementptr inbounds double, double addrspace(3)* %12, i32 %380\l  %384 = load double, double addrspace(3)* %383, align 8, !tbaa !4\l  %385 = add nsw i32 %380, %359\l  %386 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %385\l  %387 = load double, double addrspace(3)* %386, align 8, !tbaa !4\l  %388 = fmul contract double %384, %387\l  %389 = fadd contract double %381, %388\l  %390 = or i32 %380, 1\l  %391 = getelementptr inbounds double, double addrspace(3)* %12, i32 %390\l  %392 = load double, double addrspace(3)* %391, align 8, !tbaa !4\l  %393 = add nsw i32 %390, %359\l  %394 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %393\l  %395 = load double, double addrspace(3)* %394, align 8, !tbaa !4\l  %396 = fmul contract double %392, %395\l  %397 = fadd contract double %389, %396\l  %398 = or i32 %380, 2\l  %399 = getelementptr inbounds double, double addrspace(3)* %12, i32 %398\l  %400 = load double, double addrspace(3)* %399, align 8, !tbaa !4\l  %401 = add nsw i32 %398, %359\l  %402 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %401\l  %403 = load double, double addrspace(3)* %402, align 8, !tbaa !4\l  %404 = fmul contract double %400, %403\l  %405 = fadd contract double %397, %404\l  %406 = or i32 %380, 3\l  %407 = getelementptr inbounds double, double addrspace(3)* %12, i32 %406\l  %408 = load double, double addrspace(3)* %407, align 8, !tbaa !4\l  %409 = add nsw i32 %406, %359\l  %410 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %409\l  %411 = load double, double addrspace(3)* %410, align 8, !tbaa !4\l  %412 = fmul contract double %408, %411\l  %413 = fadd contract double %405, %412\l  %414 = or i32 %380, 4\l  %415 = getelementptr inbounds double, double addrspace(3)* %12, i32 %414\l  %416 = load double, double addrspace(3)* %415, align 8, !tbaa !4\l  %417 = add nsw i32 %414, %359\l  %418 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %417\l  %419 = load double, double addrspace(3)* %418, align 8, !tbaa !4\l  %420 = fmul contract double %416, %419\l  %421 = fadd contract double %413, %420\l  %422 = or i32 %380, 5\l  %423 = getelementptr inbounds double, double addrspace(3)* %12, i32 %422\l  %424 = load double, double addrspace(3)* %423, align 8, !tbaa !4\l  %425 = add nsw i32 %422, %359\l  %426 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %425\l  %427 = load double, double addrspace(3)* %426, align 8, !tbaa !4\l  %428 = fmul contract double %424, %427\l  %429 = fadd contract double %421, %428\l  %430 = or i32 %380, 6\l  %431 = getelementptr inbounds double, double addrspace(3)* %12, i32 %430\l  %432 = load double, double addrspace(3)* %431, align 8, !tbaa !4\l  %433 = add nsw i32 %430, %359\l  %434 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %433\l  %435 = load double, double addrspace(3)* %434, align 8, !tbaa !4\l  %436 = fmul contract double %432, %435\l  %437 = fadd contract double %429, %436\l  %438 = or i32 %380, 7\l  %439 = getelementptr inbounds double, double addrspace(3)* %12, i32 %438\l  %440 = load double, double addrspace(3)* %439, align 8, !tbaa !4\l  %441 = add nsw i32 %438, %359\l  %442 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %441\l  %443 = load double, double addrspace(3)* %442, align 8, !tbaa !4\l  %444 = fmul contract double %440, %443\l  %445 = fadd contract double %437, %444\l  %446 = add nuw nsw i32 %380, 8\l  %447 = add nuw i32 %382, 8\l  %448 = icmp eq i32 %447, %378\l  br i1 %448, label %449, label %379, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x50e5250:s0 -> Node0x50e5030;
	Node0x50e5250:s1 -> Node0x50e5250;
	Node0x50e5030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%449:\l449:                                              \l  %450 = phi double [ undef, %374 ], [ %445, %379 ]\l  %451 = phi i32 [ 0, %374 ], [ %446, %379 ]\l  %452 = phi double [ %348, %374 ], [ %445, %379 ]\l  %453 = icmp eq i32 %375, 0\l  br i1 %453, label %468, label %454\l|{<s0>T|<s1>F}}"];
	Node0x50e5030:s0 -> Node0x50e4e10;
	Node0x50e5030:s1 -> Node0x50dcef0;
	Node0x50dcef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%454:\l454:                                              \l  %455 = phi i32 [ %465, %454 ], [ %451, %449 ]\l  %456 = phi double [ %464, %454 ], [ %452, %449 ]\l  %457 = phi i32 [ %466, %454 ], [ 0, %449 ]\l  %458 = getelementptr inbounds double, double addrspace(3)* %12, i32 %455\l  %459 = load double, double addrspace(3)* %458, align 8, !tbaa !4\l  %460 = add nsw i32 %455, %359\l  %461 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %460\l  %462 = load double, double addrspace(3)* %461, align 8, !tbaa !4\l  %463 = fmul contract double %459, %462\l  %464 = fadd contract double %456, %463\l  %465 = add nuw nsw i32 %455, 1\l  %466 = add nuw nsw i32 %457, 1\l  %467 = icmp eq i32 %466, %375\l  br i1 %467, label %468, label %454, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x50dcef0:s0 -> Node0x50e4e10;
	Node0x50dcef0:s1 -> Node0x50dcef0;
	Node0x50e4e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%468:\l468:                                              \l  %469 = phi double [ %348, %370 ], [ %450, %449 ], [ %464, %454 ]\l  %470 = getelementptr inbounds double, double addrspace(1)* %0, i64 %355\l  store double %469, double addrspace(1)* %470, align 8, !tbaa !4\l  br label %471\l}"];
	Node0x50e4e10 -> Node0x50e3da0;
	Node0x50e3da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%471:\l471:                                              \l  ret void\l}"];
}
