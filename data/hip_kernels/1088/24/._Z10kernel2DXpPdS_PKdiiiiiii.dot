digraph "CFG for '_Z10kernel2DXpPdS_PKdiiiiiii' function" {
	label="CFG for '_Z10kernel2DXpPdS_PKdiiiiiii' function";

	Node0x5fc5570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%10:\l  %11 = mul nsw i32 %7, %6\l  %12 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x i32]\l... addrspace(3)* @memory to double addrspace(3)*), i32 %11\l  %13 = icmp sgt i32 %3, 0\l  br i1 %13, label %14, label %32\l|{<s0>T|<s1>F}}"];
	Node0x5fc5570:s0 -> Node0x5fc5410;
	Node0x5fc5570:s1 -> Node0x5fc6760;
	Node0x5fc5410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%14:\l14:                                               \l  %15 = and i32 %3, 7\l  %16 = icmp ult i32 %3, 8\l  br i1 %16, label %19, label %17\l|{<s0>T|<s1>F}}"];
	Node0x5fc5410:s0 -> Node0x5fc5210;
	Node0x5fc5410:s1 -> Node0x5fc6af0;
	Node0x5fc6af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%17:\l17:                                               \l  %18 = and i32 %3, -8\l  br label %60\l}"];
	Node0x5fc6af0 -> Node0x5fc6cb0;
	Node0x5fc5210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%19:\l19:                                               \l  %20 = phi i32 [ 0, %14 ], [ %102, %60 ]\l  %21 = icmp eq i32 %15, 0\l  br i1 %21, label %32, label %22\l|{<s0>T|<s1>F}}"];
	Node0x5fc5210:s0 -> Node0x5fc6760;
	Node0x5fc5210:s1 -> Node0x5fc6ee0;
	Node0x5fc6ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = phi i32 [ %29, %22 ], [ %20, %19 ]\l  %24 = phi i32 [ %30, %22 ], [ 0, %19 ]\l  %25 = zext i32 %23 to i64\l  %26 = getelementptr inbounds double, double addrspace(1)* %2, i64 %25\l  %27 = load double, double addrspace(1)* %26, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %28 = getelementptr inbounds double, double addrspace(3)* %12, i32 %23\l  store double %27, double addrspace(3)* %28, align 8, !tbaa !4\l  %29 = add nuw nsw i32 %23, 1\l  %30 = add nuw nsw i32 %24, 1\l  %31 = icmp eq i32 %30, %15\l  br i1 %31, label %32, label %22, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x5fc6ee0:s0 -> Node0x5fc6760;
	Node0x5fc6ee0:s1 -> Node0x5fc6ee0;
	Node0x5fc6760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%32:\l32:                                               \l  %33 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %34 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %35 = getelementptr i8, i8 addrspace(4)* %33, i64 4\l  %36 = bitcast i8 addrspace(4)* %35 to i16 addrspace(4)*\l  %37 = load i16, i16 addrspace(4)* %36, align 4, !range !11, !invariant.load\l... !8\l  %38 = zext i16 %37 to i32\l  %39 = mul i32 %34, %38\l  %40 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !12\l  %41 = add i32 %39, %40\l  %42 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %43 = getelementptr i8, i8 addrspace(4)* %33, i64 6\l  %44 = bitcast i8 addrspace(4)* %43 to i16 addrspace(4)*\l  %45 = load i16, i16 addrspace(4)* %44, align 2, !range !11, !invariant.load\l... !8\l  %46 = zext i16 %45 to i32\l  %47 = mul i32 %42, %46\l  %48 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !12\l  %49 = add i32 %47, %48\l  %50 = add i32 %40, %4\l  %51 = mul nsw i32 %49, %9\l  %52 = add nsw i32 %51, %41\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds double, double addrspace(1)* %1, i64 %53\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %56 = mul nsw i32 %48, %6\l  %57 = add i32 %56, %50\l  %58 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x i32]\l... addrspace(3)* @memory to double addrspace(3)*), i32 %57\l  store double %55, double addrspace(3)* %58, align 8, !tbaa !4\l  %59 = icmp eq i32 %34, 0\l  br i1 %59, label %121, label %105\l|{<s0>T|<s1>F}}"];
	Node0x5fc6760:s0 -> Node0x5fcb890;
	Node0x5fc6760:s1 -> Node0x5fcb920;
	Node0x5fc6cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%60:\l60:                                               \l  %61 = phi i32 [ 0, %17 ], [ %102, %60 ]\l  %62 = phi i32 [ 0, %17 ], [ %103, %60 ]\l  %63 = zext i32 %61 to i64\l  %64 = getelementptr inbounds double, double addrspace(1)* %2, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %66 = getelementptr inbounds double, double addrspace(3)* %12, i32 %61\l  store double %65, double addrspace(3)* %66, align 8, !tbaa !4\l  %67 = or i32 %61, 1\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %2, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %71 = getelementptr inbounds double, double addrspace(3)* %12, i32 %67\l  store double %70, double addrspace(3)* %71, align 8, !tbaa !4\l  %72 = or i32 %61, 2\l  %73 = zext i32 %72 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %2, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %76 = getelementptr inbounds double, double addrspace(3)* %12, i32 %72\l  store double %75, double addrspace(3)* %76, align 8, !tbaa !4\l  %77 = or i32 %61, 3\l  %78 = zext i32 %77 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %2, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %81 = getelementptr inbounds double, double addrspace(3)* %12, i32 %77\l  store double %80, double addrspace(3)* %81, align 8, !tbaa !4\l  %82 = or i32 %61, 4\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %2, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %86 = getelementptr inbounds double, double addrspace(3)* %12, i32 %82\l  store double %85, double addrspace(3)* %86, align 8, !tbaa !4\l  %87 = or i32 %61, 5\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %2, i64 %88\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %91 = getelementptr inbounds double, double addrspace(3)* %12, i32 %87\l  store double %90, double addrspace(3)* %91, align 8, !tbaa !4\l  %92 = or i32 %61, 6\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %2, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %96 = getelementptr inbounds double, double addrspace(3)* %12, i32 %92\l  store double %95, double addrspace(3)* %96, align 8, !tbaa !4\l  %97 = or i32 %61, 7\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %2, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %101 = getelementptr inbounds double, double addrspace(3)* %12, i32 %97\l  store double %100, double addrspace(3)* %101, align 8, !tbaa !4\l  %102 = add nuw nsw i32 %61, 8\l  %103 = add nuw i32 %62, 8\l  %104 = icmp eq i32 %103, %18\l  br i1 %104, label %19, label %60, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5fc6cb0:s0 -> Node0x5fc5210;
	Node0x5fc6cb0:s1 -> Node0x5fc6cb0;
	Node0x5fcb920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%105:\l105:                                              \l  %106 = sdiv i32 %9, %8\l  %107 = add nsw i32 %106, -1\l  %108 = icmp eq i32 %34, %107\l  br i1 %108, label %141, label %109\l|{<s0>T|<s1>F}}"];
	Node0x5fcb920:s0 -> Node0x5fcdef0;
	Node0x5fcb920:s1 -> Node0x5fcdf40;
	Node0x5fcdf40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%109:\l109:                                              \l  %110 = icmp ult i32 %40, %4\l  br i1 %110, label %111, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5fcdf40:s0 -> Node0x5fce110;
	Node0x5fcdf40:s1 -> Node0x5fce160;
	Node0x5fce110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%111:\l111:                                              \l  %112 = sub i32 %41, %4\l  %113 = add nsw i32 %112, %51\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %1, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %117 = add i32 %56, %40\l  %118 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %117\l  store double %116, double addrspace(3)* %118, align 8, !tbaa !4\l  br label %119\l}"];
	Node0x5fce110 -> Node0x5fce160;
	Node0x5fce160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%119:\l119:                                              \l  %120 = icmp ult i32 %40, %5\l  br i1 %120, label %134, label %141\l|{<s0>T|<s1>F}}"];
	Node0x5fce160:s0 -> Node0x5fce800;
	Node0x5fce160:s1 -> Node0x5fcdef0;
	Node0x5fcb890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%121:\l121:                                              \l  store double %55, double addrspace(3)* %58, align 8, !tbaa !4\l  %122 = icmp ult i32 %40, %4\l  br i1 %122, label %123, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5fcb890:s0 -> Node0x5fcea20;
	Node0x5fcb890:s1 -> Node0x5fcea70;
	Node0x5fcea20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%123:\l123:                                              \l  %124 = add i32 %51, %40\l  %125 = sub i32 %124, %4\l  %126 = add i32 %125, %9\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds double, double addrspace(1)* %1, i64 %127\l  %129 = load double, double addrspace(1)* %128, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %130 = add i32 %56, %40\l  %131 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %130\l  store double %129, double addrspace(3)* %131, align 8, !tbaa !4\l  br label %132\l}"];
	Node0x5fcea20 -> Node0x5fcea70;
	Node0x5fcea70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%132:\l132:                                              \l  %133 = icmp ult i32 %40, %5\l  br i1 %133, label %134, label %141\l|{<s0>T|<s1>F}}"];
	Node0x5fcea70:s0 -> Node0x5fce800;
	Node0x5fcea70:s1 -> Node0x5fcdef0;
	Node0x5fce800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%134:\l134:                                              \l  %135 = add nsw i32 %52, %8\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds double, double addrspace(1)* %1, i64 %136\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !4\l  %139 = add i32 %57, %8\l  %140 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %139\l  store double %138, double addrspace(3)* %140, align 8, !tbaa !4\l  br label %141\l}"];
	Node0x5fce800 -> Node0x5fcdef0;
	Node0x5fcdef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%141:\l141:                                              \l  %142 = sdiv i32 %9, %8\l  %143 = add nsw i32 %142, -1\l  %144 = icmp eq i32 %34, %143\l  %145 = add i32 %56, %40\l  br i1 %144, label %146, label %166\l|{<s0>T|<s1>F}}"];
	Node0x5fcdef0:s0 -> Node0x5fcfd00;
	Node0x5fcdef0:s1 -> Node0x5fcfd50;
	Node0x5fcfd00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%146:\l146:                                              \l  %147 = add i32 %145, %4\l  %148 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %147\l  store double %55, double addrspace(3)* %148, align 8, !tbaa !4\l  %149 = icmp ult i32 %40, %4\l  br i1 %149, label %150, label %157\l|{<s0>T|<s1>F}}"];
	Node0x5fcfd00:s0 -> Node0x5fd00a0;
	Node0x5fcfd00:s1 -> Node0x5fd00f0;
	Node0x5fd00a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%150:\l150:                                              \l  %151 = sub i32 %41, %4\l  %152 = add nsw i32 %151, %51\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds double, double addrspace(1)* %1, i64 %153\l  %155 = load double, double addrspace(1)* %154, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %156 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %145\l  store double %155, double addrspace(3)* %156, align 8, !tbaa !4\l  br label %157\l}"];
	Node0x5fd00a0 -> Node0x5fd00f0;
	Node0x5fd00f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%157:\l157:                                              \l  %158 = icmp ult i32 %40, %5\l  br i1 %158, label %159, label %166\l|{<s0>T|<s1>F}}"];
	Node0x5fd00f0:s0 -> Node0x5fd06c0;
	Node0x5fd00f0:s1 -> Node0x5fcfd50;
	Node0x5fd06c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%159:\l159:                                              \l  %160 = add i32 %51, %40\l  %161 = zext i32 %160 to i64\l  %162 = getelementptr inbounds double, double addrspace(1)* %1, i64 %161\l  %163 = load double, double addrspace(1)* %162, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %164 = add i32 %57, %8\l  %165 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %164\l  store double %163, double addrspace(3)* %165, align 8, !tbaa !4\l  br label %166\l}"];
	Node0x5fd06c0 -> Node0x5fcfd50;
	Node0x5fcfd50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%166:\l166:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %13, label %167, label %191\l|{<s0>T|<s1>F}}"];
	Node0x5fcfd50:s0 -> Node0x5fd0e80;
	Node0x5fcfd50:s1 -> Node0x5fd0ed0;
	Node0x5fd0e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%167:\l167:                                              \l  %168 = and i32 %3, 7\l  %169 = icmp ult i32 %3, 8\l  br i1 %169, label %172, label %170\l|{<s0>T|<s1>F}}"];
	Node0x5fd0e80:s0 -> Node0x5fd1130;
	Node0x5fd0e80:s1 -> Node0x5fd1180;
	Node0x5fd1180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%170:\l170:                                              \l  %171 = and i32 %3, -8\l  br label %194\l}"];
	Node0x5fd1180 -> Node0x5fd1350;
	Node0x5fd1130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%172:\l172:                                              \l  %173 = phi double [ undef, %167 ], [ %260, %194 ]\l  %174 = phi i32 [ 0, %167 ], [ %261, %194 ]\l  %175 = phi double [ 0.000000e+00, %167 ], [ %260, %194 ]\l  %176 = icmp eq i32 %168, 0\l  br i1 %176, label %191, label %177\l|{<s0>T|<s1>F}}"];
	Node0x5fd1130:s0 -> Node0x5fd0ed0;
	Node0x5fd1130:s1 -> Node0x5fd25c0;
	Node0x5fd25c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%177:\l177:                                              \l  %178 = phi i32 [ %188, %177 ], [ %174, %172 ]\l  %179 = phi double [ %187, %177 ], [ %175, %172 ]\l  %180 = phi i32 [ %189, %177 ], [ 0, %172 ]\l  %181 = getelementptr inbounds double, double addrspace(3)* %12, i32 %178\l  %182 = load double, double addrspace(3)* %181, align 8, !tbaa !4\l  %183 = add nsw i32 %145, %178\l  %184 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %183\l  %185 = load double, double addrspace(3)* %184, align 8, !tbaa !4\l  %186 = fmul contract double %182, %185\l  %187 = fadd contract double %179, %186\l  %188 = add nuw nsw i32 %178, 1\l  %189 = add nuw nsw i32 %180, 1\l  %190 = icmp eq i32 %189, %168\l  br i1 %190, label %191, label %177, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5fd25c0:s0 -> Node0x5fd0ed0;
	Node0x5fd25c0:s1 -> Node0x5fd25c0;
	Node0x5fd0ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%191:\l191:                                              \l  %192 = phi double [ 0.000000e+00, %166 ], [ %173, %172 ], [ %187, %177 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %193 = getelementptr inbounds double, double addrspace(1)* %0, i64 %53\l  store double %192, double addrspace(1)* %193, align 8, !tbaa !4\l  ret void\l}"];
	Node0x5fd1350 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%194:\l194:                                              \l  %195 = phi i32 [ 0, %170 ], [ %261, %194 ]\l  %196 = phi double [ 0.000000e+00, %170 ], [ %260, %194 ]\l  %197 = phi i32 [ 0, %170 ], [ %262, %194 ]\l  %198 = getelementptr inbounds double, double addrspace(3)* %12, i32 %195\l  %199 = load double, double addrspace(3)* %198, align 8, !tbaa !4\l  %200 = add nsw i32 %145, %195\l  %201 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %200\l  %202 = load double, double addrspace(3)* %201, align 8, !tbaa !4\l  %203 = fmul contract double %199, %202\l  %204 = fadd contract double %196, %203\l  %205 = or i32 %195, 1\l  %206 = getelementptr inbounds double, double addrspace(3)* %12, i32 %205\l  %207 = load double, double addrspace(3)* %206, align 8, !tbaa !4\l  %208 = add nsw i32 %145, %205\l  %209 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %208\l  %210 = load double, double addrspace(3)* %209, align 8, !tbaa !4\l  %211 = fmul contract double %207, %210\l  %212 = fadd contract double %204, %211\l  %213 = or i32 %195, 2\l  %214 = getelementptr inbounds double, double addrspace(3)* %12, i32 %213\l  %215 = load double, double addrspace(3)* %214, align 8, !tbaa !4\l  %216 = add nsw i32 %145, %213\l  %217 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %216\l  %218 = load double, double addrspace(3)* %217, align 8, !tbaa !4\l  %219 = fmul contract double %215, %218\l  %220 = fadd contract double %212, %219\l  %221 = or i32 %195, 3\l  %222 = getelementptr inbounds double, double addrspace(3)* %12, i32 %221\l  %223 = load double, double addrspace(3)* %222, align 8, !tbaa !4\l  %224 = add nsw i32 %145, %221\l  %225 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %224\l  %226 = load double, double addrspace(3)* %225, align 8, !tbaa !4\l  %227 = fmul contract double %223, %226\l  %228 = fadd contract double %220, %227\l  %229 = or i32 %195, 4\l  %230 = getelementptr inbounds double, double addrspace(3)* %12, i32 %229\l  %231 = load double, double addrspace(3)* %230, align 8, !tbaa !4\l  %232 = add nsw i32 %145, %229\l  %233 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %232\l  %234 = load double, double addrspace(3)* %233, align 8, !tbaa !4\l  %235 = fmul contract double %231, %234\l  %236 = fadd contract double %228, %235\l  %237 = or i32 %195, 5\l  %238 = getelementptr inbounds double, double addrspace(3)* %12, i32 %237\l  %239 = load double, double addrspace(3)* %238, align 8, !tbaa !4\l  %240 = add nsw i32 %145, %237\l  %241 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %240\l  %242 = load double, double addrspace(3)* %241, align 8, !tbaa !4\l  %243 = fmul contract double %239, %242\l  %244 = fadd contract double %236, %243\l  %245 = or i32 %195, 6\l  %246 = getelementptr inbounds double, double addrspace(3)* %12, i32 %245\l  %247 = load double, double addrspace(3)* %246, align 8, !tbaa !4\l  %248 = add nsw i32 %145, %245\l  %249 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %248\l  %250 = load double, double addrspace(3)* %249, align 8, !tbaa !4\l  %251 = fmul contract double %247, %250\l  %252 = fadd contract double %244, %251\l  %253 = or i32 %195, 7\l  %254 = getelementptr inbounds double, double addrspace(3)* %12, i32 %253\l  %255 = load double, double addrspace(3)* %254, align 8, !tbaa !4\l  %256 = add nsw i32 %145, %253\l  %257 = getelementptr inbounds double, double addrspace(3)* bitcast ([0 x\l... i32] addrspace(3)* @memory to double addrspace(3)*), i32 %256\l  %258 = load double, double addrspace(3)* %257, align 8, !tbaa !4\l  %259 = fmul contract double %255, %258\l  %260 = fadd contract double %252, %259\l  %261 = add nuw nsw i32 %195, 8\l  %262 = add nuw i32 %197, 8\l  %263 = icmp eq i32 %262, %171\l  br i1 %263, label %172, label %194, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5fd1350:s0 -> Node0x5fd1130;
	Node0x5fd1350:s1 -> Node0x5fd1350;
}
