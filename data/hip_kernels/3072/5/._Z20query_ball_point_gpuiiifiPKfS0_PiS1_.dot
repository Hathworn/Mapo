digraph "CFG for '_Z20query_ball_point_gpuiiifiPKfS0_PiS1_' function" {
	label="CFG for '_Z20query_ball_point_gpuiiifiPKfS0_PiS1_' function";

	Node0x4d2b490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, 3\l  %12 = mul i32 %11, %1\l  %13 = sext i32 %12 to i64\l  %14 = getelementptr inbounds float, float addrspace(1)* %5, i64 %13\l  %15 = mul i32 %10, %2\l  %16 = mul i32 %15, 3\l  %17 = sext i32 %16 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %6, i64 %17\l  %19 = mul i32 %15, %4\l  %20 = sext i32 %19 to i64\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %20\l  %22 = sext i32 %15 to i64\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 4, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = icmp slt i32 %24, %2\l  br i1 %30, label %31, label %63\l|{<s0>T|<s1>F}}"];
	Node0x4d2b490:s0 -> Node0x4d2e550;
	Node0x4d2b490:s1 -> Node0x4d2e5e0;
	Node0x4d2e550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%31:\l31:                                               \l  %32 = icmp slt i32 %1, 1\l  %33 = icmp eq i32 %4, 0\l  %34 = select i1 %32, i1 true, i1 %33\l  %35 = icmp slt i32 %4, 1\l  %36 = add i32 %4, -1\l  %37 = and i32 %4, 7\l  %38 = icmp ult i32 %36, 7\l  %39 = and i32 %4, -8\l  %40 = icmp eq i32 %37, 0\l  %41 = and i32 %4, 7\l  %42 = icmp ult i32 %36, 7\l  %43 = and i32 %4, -8\l  %44 = icmp eq i32 %41, 0\l  br label %45\l}"];
	Node0x4d2e550 -> Node0x4d2f0a0;
	Node0x4d2f0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%45:\l45:                                               \l  %46 = phi float [ 0x7FF0000000000000, %31 ], [ %181, %234 ]\l  %47 = phi i32 [ -1, %31 ], [ %180, %234 ]\l  %48 = phi i32 [ %24, %31 ], [ %237, %234 ]\l  br i1 %34, label %178, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4d2f0a0:s0 -> Node0x4d2ff60;
	Node0x4d2f0a0:s1 -> Node0x4d2fff0;
	Node0x4d2fff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%49:\l49:                                               \l  %50 = mul nsw i32 %48, 3\l  %51 = zext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %18, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %54 = add nuw nsw i32 %50, 1\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %18, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %58 = add nuw nsw i32 %50, 2\l  %59 = zext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %18, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %62 = mul nsw i32 %48, %4\l  br label %64\l}"];
	Node0x4d2fff0 -> Node0x4d31670;
	Node0x4d2e5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%63:\l63:                                               \l  ret void\l}"];
	Node0x4d31670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%64:\l64:                                               \l  %65 = phi float [ %46, %49 ], [ %173, %169 ]\l  %66 = phi i32 [ %47, %49 ], [ %172, %169 ]\l  %67 = phi i32 [ 0, %49 ], [ %174, %169 ]\l  %68 = phi i32 [ 0, %49 ], [ %170, %169 ]\l  %69 = mul nuw nsw i32 %67, 3\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %14, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %73 = add nuw nsw i32 %69, 1\l  %74 = zext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %14, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %77 = add nuw nsw i32 %69, 2\l  %78 = zext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %14, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %81 = fsub contract float %53, %72\l  %82 = fmul contract float %81, %81\l  %83 = fsub contract float %57, %76\l  %84 = fmul contract float %83, %83\l  %85 = fadd contract float %82, %84\l  %86 = fsub contract float %61, %80\l  %87 = fmul contract float %86, %86\l  %88 = fadd contract float %85, %87\l  %89 = fcmp olt float %88, 0x39F0000000000000\l  %90 = select i1 %89, float 0x41F0000000000000, float 1.000000e+00\l  %91 = fmul float %88, %90\l  %92 = tail call float @llvm.sqrt.f32(float %91)\l  %93 = bitcast float %92 to i32\l  %94 = add nsw i32 %93, -1\l  %95 = bitcast i32 %94 to float\l  %96 = add nsw i32 %93, 1\l  %97 = bitcast i32 %96 to float\l  %98 = tail call i1 @llvm.amdgcn.class.f32(float %91, i32 608)\l  %99 = select i1 %89, float 0x3EF0000000000000, float 1.000000e+00\l  %100 = fneg float %97\l  %101 = tail call float @llvm.fma.f32(float %100, float %92, float %91)\l  %102 = fcmp ogt float %101, 0.000000e+00\l  %103 = fneg float %95\l  %104 = tail call float @llvm.fma.f32(float %103, float %92, float %91)\l  %105 = fcmp ole float %104, 0.000000e+00\l  %106 = select i1 %105, float %95, float %92\l  %107 = select i1 %102, float %97, float %106\l  %108 = fmul float %99, %107\l  %109 = select i1 %98, float %91, float %108\l  %110 = tail call float @llvm.maxnum.f32(float %109, float 0x3BC79CA100000000)\l  %111 = fcmp contract olt float %110, %3\l  br i1 %111, label %112, label %169\l|{<s0>T|<s1>F}}"];
	Node0x4d31670:s0 -> Node0x4d33fd0;
	Node0x4d31670:s1 -> Node0x4d2e7b0;
	Node0x4d33fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%112:\l112:                                              \l  %113 = icmp ne i32 %68, 0\l  %114 = select i1 %113, i1 true, i1 %35\l  br i1 %114, label %164, label %115\l|{<s0>T|<s1>F}}"];
	Node0x4d33fd0:s0 -> Node0x4d34250;
	Node0x4d33fd0:s1 -> Node0x4d342a0;
	Node0x4d342a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%115:\l115:                                              \l  br i1 %38, label %153, label %116\l|{<s0>T|<s1>F}}"];
	Node0x4d342a0:s0 -> Node0x4d343e0;
	Node0x4d342a0:s1 -> Node0x4d34430;
	Node0x4d34430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%116:\l116:                                              \l  %117 = phi i32 [ %150, %116 ], [ 0, %115 ]\l  %118 = phi i32 [ %151, %116 ], [ 0, %115 ]\l  %119 = add nsw i32 %117, %62\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %120\l  store i32 %67, i32 addrspace(1)* %121, align 4, !tbaa !11\l  %122 = or i32 %117, 1\l  %123 = add nsw i32 %122, %62\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %124\l  store i32 %67, i32 addrspace(1)* %125, align 4, !tbaa !11\l  %126 = or i32 %117, 2\l  %127 = add nsw i32 %126, %62\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %128\l  store i32 %67, i32 addrspace(1)* %129, align 4, !tbaa !11\l  %130 = or i32 %117, 3\l  %131 = add nsw i32 %130, %62\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %132\l  store i32 %67, i32 addrspace(1)* %133, align 4, !tbaa !11\l  %134 = or i32 %117, 4\l  %135 = add nsw i32 %134, %62\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %136\l  store i32 %67, i32 addrspace(1)* %137, align 4, !tbaa !11\l  %138 = or i32 %117, 5\l  %139 = add nsw i32 %138, %62\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %140\l  store i32 %67, i32 addrspace(1)* %141, align 4, !tbaa !11\l  %142 = or i32 %117, 6\l  %143 = add nsw i32 %142, %62\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %144\l  store i32 %67, i32 addrspace(1)* %145, align 4, !tbaa !11\l  %146 = or i32 %117, 7\l  %147 = add nsw i32 %146, %62\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %148\l  store i32 %67, i32 addrspace(1)* %149, align 4, !tbaa !11\l  %150 = add nuw nsw i32 %117, 8\l  %151 = add i32 %118, 8\l  %152 = icmp eq i32 %151, %39\l  br i1 %152, label %153, label %116, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4d34430:s0 -> Node0x4d343e0;
	Node0x4d34430:s1 -> Node0x4d34430;
	Node0x4d343e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%153:\l153:                                              \l  %154 = phi i32 [ 0, %115 ], [ %150, %116 ]\l  br i1 %40, label %164, label %155\l|{<s0>T|<s1>F}}"];
	Node0x4d343e0:s0 -> Node0x4d34250;
	Node0x4d343e0:s1 -> Node0x4d36ce0;
	Node0x4d36ce0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%155:\l155:                                              \l  %156 = phi i32 [ %161, %155 ], [ %154, %153 ]\l  %157 = phi i32 [ %162, %155 ], [ 0, %153 ]\l  %158 = add nsw i32 %156, %62\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %159\l  store i32 %67, i32 addrspace(1)* %160, align 4, !tbaa !11\l  %161 = add nuw nsw i32 %156, 1\l  %162 = add i32 %157, 1\l  %163 = icmp eq i32 %162, %37\l  br i1 %163, label %164, label %155, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4d36ce0:s0 -> Node0x4d34250;
	Node0x4d36ce0:s1 -> Node0x4d36ce0;
	Node0x4d34250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%164:\l164:                                              \l  %165 = add nsw i32 %68, %62\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %166\l  store i32 %67, i32 addrspace(1)* %167, align 4, !tbaa !11\l  %168 = add nsw i32 %68, 1\l  br label %169\l}"];
	Node0x4d34250 -> Node0x4d2e7b0;
	Node0x4d2e7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%169:\l169:                                              \l  %170 = phi i32 [ %168, %164 ], [ %68, %64 ]\l  %171 = fcmp contract olt float %110, %65\l  %172 = select i1 %171, i32 %67, i32 %66\l  %173 = select i1 %171, float %110, float %65\l  %174 = add nuw nsw i32 %67, 1\l  %175 = icmp sge i32 %174, %1\l  %176 = icmp eq i32 %170, %4\l  %177 = select i1 %175, i1 true, i1 %176\l  br i1 %177, label %178, label %64, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4d2e7b0:s0 -> Node0x4d2ff60;
	Node0x4d2e7b0:s1 -> Node0x4d31670;
	Node0x4d2ff60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%178:\l178:                                              \l  %179 = phi i32 [ 0, %45 ], [ %170, %169 ]\l  %180 = phi i32 [ %47, %45 ], [ %172, %169 ]\l  %181 = phi float [ %46, %45 ], [ %173, %169 ]\l  %182 = icmp ne i32 %179, 0\l  %183 = select i1 %182, i1 true, i1 %35\l  br i1 %183, label %234, label %184\l|{<s0>T|<s1>F}}"];
	Node0x4d2ff60:s0 -> Node0x4d2fbe0;
	Node0x4d2ff60:s1 -> Node0x4d381b0;
	Node0x4d381b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%184:\l184:                                              \l  %185 = mul nsw i32 %48, %4\l  br i1 %42, label %223, label %186\l|{<s0>T|<s1>F}}"];
	Node0x4d381b0:s0 -> Node0x4d38340;
	Node0x4d381b0:s1 -> Node0x4d38390;
	Node0x4d38390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%186:\l186:                                              \l  %187 = phi i32 [ %220, %186 ], [ 0, %184 ]\l  %188 = phi i32 [ %221, %186 ], [ 0, %184 ]\l  %189 = add nsw i32 %187, %185\l  %190 = sext i32 %189 to i64\l  %191 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %190\l  store i32 %180, i32 addrspace(1)* %191, align 4, !tbaa !11\l  %192 = or i32 %187, 1\l  %193 = add nsw i32 %192, %185\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %194\l  store i32 %180, i32 addrspace(1)* %195, align 4, !tbaa !11\l  %196 = or i32 %187, 2\l  %197 = add nsw i32 %196, %185\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %198\l  store i32 %180, i32 addrspace(1)* %199, align 4, !tbaa !11\l  %200 = or i32 %187, 3\l  %201 = add nsw i32 %200, %185\l  %202 = sext i32 %201 to i64\l  %203 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %202\l  store i32 %180, i32 addrspace(1)* %203, align 4, !tbaa !11\l  %204 = or i32 %187, 4\l  %205 = add nsw i32 %204, %185\l  %206 = sext i32 %205 to i64\l  %207 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %206\l  store i32 %180, i32 addrspace(1)* %207, align 4, !tbaa !11\l  %208 = or i32 %187, 5\l  %209 = add nsw i32 %208, %185\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %210\l  store i32 %180, i32 addrspace(1)* %211, align 4, !tbaa !11\l  %212 = or i32 %187, 6\l  %213 = add nsw i32 %212, %185\l  %214 = sext i32 %213 to i64\l  %215 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %214\l  store i32 %180, i32 addrspace(1)* %215, align 4, !tbaa !11\l  %216 = or i32 %187, 7\l  %217 = add nsw i32 %216, %185\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %218\l  store i32 %180, i32 addrspace(1)* %219, align 4, !tbaa !11\l  %220 = add nuw nsw i32 %187, 8\l  %221 = add i32 %188, 8\l  %222 = icmp eq i32 %221, %43\l  br i1 %222, label %223, label %186, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4d38390:s0 -> Node0x4d38340;
	Node0x4d38390:s1 -> Node0x4d38390;
	Node0x4d38340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%223:\l223:                                              \l  %224 = phi i32 [ 0, %184 ], [ %220, %186 ]\l  br i1 %44, label %234, label %225\l|{<s0>T|<s1>F}}"];
	Node0x4d38340:s0 -> Node0x4d2fbe0;
	Node0x4d38340:s1 -> Node0x4d39ef0;
	Node0x4d39ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%225:\l225:                                              \l  %226 = phi i32 [ %231, %225 ], [ %224, %223 ]\l  %227 = phi i32 [ %232, %225 ], [ 0, %223 ]\l  %228 = add nsw i32 %226, %185\l  %229 = sext i32 %228 to i64\l  %230 = getelementptr inbounds i32, i32 addrspace(1)* %21, i64 %229\l  store i32 %180, i32 addrspace(1)* %230, align 4, !tbaa !11\l  %231 = add nuw nsw i32 %226, 1\l  %232 = add i32 %227, 1\l  %233 = icmp eq i32 %232, %41\l  br i1 %233, label %234, label %225, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4d39ef0:s0 -> Node0x4d2fbe0;
	Node0x4d39ef0:s1 -> Node0x4d39ef0;
	Node0x4d2fbe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%234:\l234:                                              \l  %235 = zext i32 %48 to i64\l  %236 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %235\l  store i32 %179, i32 addrspace(1)* %236, align 4, !tbaa !11\l  %237 = add nuw nsw i32 %48, %29\l  %238 = icmp slt i32 %237, %2\l  br i1 %238, label %45, label %63, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4d2fbe0:s0 -> Node0x4d2f0a0;
	Node0x4d2fbe0:s1 -> Node0x4d2e5e0;
}
