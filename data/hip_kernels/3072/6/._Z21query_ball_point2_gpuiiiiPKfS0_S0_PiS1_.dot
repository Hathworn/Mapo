digraph "CFG for '_Z21query_ball_point2_gpuiiiiPKfS0_S0_PiS1_' function" {
	label="CFG for '_Z21query_ball_point2_gpuiiiiPKfS0_S0_PiS1_' function";

	Node0x5c0b840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, 3\l  %12 = mul i32 %11, %1\l  %13 = sext i32 %12 to i64\l  %14 = getelementptr inbounds float, float addrspace(1)* %4, i64 %13\l  %15 = mul i32 %10, %2\l  %16 = mul i32 %15, 3\l  %17 = sext i32 %16 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %5, i64 %17\l  %19 = sext i32 %15 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %6, i64 %19\l  %21 = mul i32 %15, %3\l  %22 = sext i32 %21 to i64\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %22\l  %24 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %19\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %26 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %27 = getelementptr i8, i8 addrspace(4)* %26, i64 4\l  %28 = bitcast i8 addrspace(4)* %27 to i16 addrspace(4)*\l  %29 = load i16, i16 addrspace(4)* %28, align 4, !range !5, !invariant.load !6\l  %30 = zext i16 %29 to i32\l  %31 = icmp slt i32 %25, %2\l  br i1 %31, label %32, label %63\l|{<s0>T|<s1>F}}"];
	Node0x5c0b840:s0 -> Node0x5c0e9a0;
	Node0x5c0b840:s1 -> Node0x5c0ea30;
	Node0x5c0e9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%32:\l32:                                               \l  %33 = icmp slt i32 %1, 1\l  %34 = icmp eq i32 %3, 0\l  %35 = select i1 %33, i1 true, i1 %34\l  %36 = icmp slt i32 %3, 1\l  %37 = add i32 %3, -1\l  %38 = and i32 %3, 7\l  %39 = icmp ult i32 %37, 7\l  %40 = and i32 %3, -8\l  %41 = icmp eq i32 %38, 0\l  br label %42\l}"];
	Node0x5c0e9a0 -> Node0x5c0f2b0;
	Node0x5c0f2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%42:\l42:                                               \l  %43 = phi i32 [ %25, %32 ], [ %177, %173 ]\l  br i1 %35, label %44, label %46\l|{<s0>T|<s1>F}}"];
	Node0x5c0f2b0:s0 -> Node0x5c0f4e0;
	Node0x5c0f2b0:s1 -> Node0x5c0f570;
	Node0x5c0f4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%44:\l44:                                               \l  %45 = zext i32 %43 to i64\l  br label %173\l}"];
	Node0x5c0f4e0 -> Node0x5c0f3a0;
	Node0x5c0f570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%46:\l46:                                               \l  %47 = mul nsw i32 %43, 3\l  %48 = zext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %18, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %51 = add nuw nsw i32 %47, 1\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %18, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %55 = add nuw nsw i32 %47, 2\l  %56 = zext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %18, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %59 = zext i32 %43 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %20, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %62 = mul nsw i32 %43, %3\l  br label %64\l}"];
	Node0x5c0f570 -> Node0x5c10e50;
	Node0x5c0ea30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%63:\l63:                                               \l  ret void\l}"];
	Node0x5c10e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%64:\l64:                                               \l  %65 = phi i32 [ 0, %46 ], [ %169, %167 ]\l  %66 = phi i32 [ 0, %46 ], [ %168, %167 ]\l  %67 = mul nuw nsw i32 %65, 3\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %14, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = add nuw nsw i32 %67, 1\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %14, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %75 = add nuw nsw i32 %67, 2\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %14, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %79 = fsub contract float %50, %70\l  %80 = fmul contract float %79, %79\l  %81 = fsub contract float %54, %74\l  %82 = fmul contract float %81, %81\l  %83 = fadd contract float %80, %82\l  %84 = fsub contract float %58, %78\l  %85 = fmul contract float %84, %84\l  %86 = fadd contract float %83, %85\l  %87 = fcmp olt float %86, 0x39F0000000000000\l  %88 = select i1 %87, float 0x41F0000000000000, float 1.000000e+00\l  %89 = fmul float %86, %88\l  %90 = tail call float @llvm.sqrt.f32(float %89)\l  %91 = bitcast float %90 to i32\l  %92 = add nsw i32 %91, -1\l  %93 = bitcast i32 %92 to float\l  %94 = add nsw i32 %91, 1\l  %95 = bitcast i32 %94 to float\l  %96 = tail call i1 @llvm.amdgcn.class.f32(float %89, i32 608)\l  %97 = select i1 %87, float 0x3EF0000000000000, float 1.000000e+00\l  %98 = fneg float %95\l  %99 = tail call float @llvm.fma.f32(float %98, float %90, float %89)\l  %100 = fcmp ogt float %99, 0.000000e+00\l  %101 = fneg float %93\l  %102 = tail call float @llvm.fma.f32(float %101, float %90, float %89)\l  %103 = fcmp ole float %102, 0.000000e+00\l  %104 = select i1 %103, float %93, float %90\l  %105 = select i1 %100, float %95, float %104\l  %106 = fmul float %97, %105\l  %107 = select i1 %96, float %89, float %106\l  %108 = tail call float @llvm.maxnum.f32(float %107, float 0x3BC79CA100000000)\l  %109 = fcmp contract olt float %108, %61\l  br i1 %109, label %110, label %167\l|{<s0>T|<s1>F}}"];
	Node0x5c10e50:s0 -> Node0x5c13f70;
	Node0x5c10e50:s1 -> Node0x5c0eb70;
	Node0x5c13f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%110:\l110:                                              \l  %111 = icmp ne i32 %66, 0\l  %112 = select i1 %111, i1 true, i1 %36\l  br i1 %112, label %162, label %113\l|{<s0>T|<s1>F}}"];
	Node0x5c13f70:s0 -> Node0x5c141f0;
	Node0x5c13f70:s1 -> Node0x5c14240;
	Node0x5c14240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%113:\l113:                                              \l  br i1 %39, label %151, label %114\l|{<s0>T|<s1>F}}"];
	Node0x5c14240:s0 -> Node0x5c14380;
	Node0x5c14240:s1 -> Node0x5c143d0;
	Node0x5c143d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%114:\l114:                                              \l  %115 = phi i32 [ %148, %114 ], [ 0, %113 ]\l  %116 = phi i32 [ %149, %114 ], [ 0, %113 ]\l  %117 = add nsw i32 %115, %62\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %118\l  store i32 %65, i32 addrspace(1)* %119, align 4, !tbaa !11\l  %120 = or i32 %115, 1\l  %121 = add nsw i32 %120, %62\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %122\l  store i32 %65, i32 addrspace(1)* %123, align 4, !tbaa !11\l  %124 = or i32 %115, 2\l  %125 = add nsw i32 %124, %62\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %126\l  store i32 %65, i32 addrspace(1)* %127, align 4, !tbaa !11\l  %128 = or i32 %115, 3\l  %129 = add nsw i32 %128, %62\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %130\l  store i32 %65, i32 addrspace(1)* %131, align 4, !tbaa !11\l  %132 = or i32 %115, 4\l  %133 = add nsw i32 %132, %62\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %134\l  store i32 %65, i32 addrspace(1)* %135, align 4, !tbaa !11\l  %136 = or i32 %115, 5\l  %137 = add nsw i32 %136, %62\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %138\l  store i32 %65, i32 addrspace(1)* %139, align 4, !tbaa !11\l  %140 = or i32 %115, 6\l  %141 = add nsw i32 %140, %62\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %142\l  store i32 %65, i32 addrspace(1)* %143, align 4, !tbaa !11\l  %144 = or i32 %115, 7\l  %145 = add nsw i32 %144, %62\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %146\l  store i32 %65, i32 addrspace(1)* %147, align 4, !tbaa !11\l  %148 = add nuw nsw i32 %115, 8\l  %149 = add i32 %116, 8\l  %150 = icmp eq i32 %149, %40\l  br i1 %150, label %151, label %114, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5c143d0:s0 -> Node0x5c14380;
	Node0x5c143d0:s1 -> Node0x5c143d0;
	Node0x5c14380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%151:\l151:                                              \l  %152 = phi i32 [ 0, %113 ], [ %148, %114 ]\l  br i1 %41, label %162, label %153\l|{<s0>T|<s1>F}}"];
	Node0x5c14380:s0 -> Node0x5c141f0;
	Node0x5c14380:s1 -> Node0x5c16c80;
	Node0x5c16c80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%153:\l153:                                              \l  %154 = phi i32 [ %159, %153 ], [ %152, %151 ]\l  %155 = phi i32 [ %160, %153 ], [ 0, %151 ]\l  %156 = add nsw i32 %154, %62\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %157\l  store i32 %65, i32 addrspace(1)* %158, align 4, !tbaa !11\l  %159 = add nuw nsw i32 %154, 1\l  %160 = add i32 %155, 1\l  %161 = icmp eq i32 %160, %38\l  br i1 %161, label %162, label %153, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5c16c80:s0 -> Node0x5c141f0;
	Node0x5c16c80:s1 -> Node0x5c16c80;
	Node0x5c141f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%162:\l162:                                              \l  %163 = add nsw i32 %66, %62\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds i32, i32 addrspace(1)* %23, i64 %164\l  store i32 %65, i32 addrspace(1)* %165, align 4, !tbaa !11\l  %166 = add nsw i32 %66, 1\l  br label %167\l}"];
	Node0x5c141f0 -> Node0x5c0eb70;
	Node0x5c0eb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%167:\l167:                                              \l  %168 = phi i32 [ %166, %162 ], [ %66, %64 ]\l  %169 = add nuw nsw i32 %65, 1\l  %170 = icmp sge i32 %169, %1\l  %171 = icmp eq i32 %168, %3\l  %172 = select i1 %170, i1 true, i1 %171\l  br i1 %172, label %173, label %64, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5c0eb70:s0 -> Node0x5c0f3a0;
	Node0x5c0eb70:s1 -> Node0x5c10e50;
	Node0x5c0f3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%173:\l173:                                              \l  %174 = phi i64 [ %45, %44 ], [ %59, %167 ]\l  %175 = phi i32 [ 0, %44 ], [ %168, %167 ]\l  %176 = getelementptr inbounds i32, i32 addrspace(1)* %24, i64 %174\l  store i32 %175, i32 addrspace(1)* %176, align 4, !tbaa !11\l  %177 = add nuw nsw i32 %43, %30\l  %178 = icmp slt i32 %177, %2\l  br i1 %178, label %42, label %63, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5c0f3a0:s0 -> Node0x5c0f2b0;
	Node0x5c0f3a0:s1 -> Node0x5c0ea30;
}
