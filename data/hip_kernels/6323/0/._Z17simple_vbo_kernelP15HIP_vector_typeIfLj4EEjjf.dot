digraph "CFG for '_Z17simple_vbo_kernelP15HIP_vector_typeIfLj4EEjjf' function" {
	label="CFG for '_Z17simple_vbo_kernelP15HIP_vector_typeIfLj4EEjjf' function";

	Node0x4c2ecf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = uitofp i32 %13 to float\l  %23 = uitofp i32 %1 to float\l  %24 = fdiv contract float %22, %23\l  %25 = uitofp i32 %21 to float\l  %26 = uitofp i32 %2 to float\l  %27 = fdiv contract float %25, %26\l  %28 = fmul contract float %24, 2.000000e+00\l  %29 = fadd contract float %28, -1.000000e+00\l  %30 = fmul contract float %27, 2.000000e+00\l  %31 = fadd contract float %30, -1.000000e+00\l  %32 = fmul contract float %29, 4.000000e+00\l  %33 = fadd contract float %32, %3\l  %34 = tail call float @llvm.fabs.f32(float %33)\l  %35 = fcmp olt float %34, 1.310720e+05\l  br i1 %35, label %36, label %44\l|{<s0>T|<s1>F}}"];
	Node0x4c2ecf0:s0 -> Node0x4c33a00;
	Node0x4c2ecf0:s1 -> Node0x4c33a90;
	Node0x4c33a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%36:\l36:                                               \l  %37 = fmul float %34, 0x3FE45F3060000000\l  %38 = tail call float @llvm.rint.f32(float %37)\l  %39 = tail call float @llvm.fma.f32(float %38, float 0xBFF921FB40000000,\l... float %34)\l  %40 = tail call float @llvm.fma.f32(float %38, float 0xBE74442D00000000,\l... float %39)\l  %41 = tail call float @llvm.fma.f32(float %38, float 0xBCF8469880000000,\l... float %40)\l  %42 = fptosi float %38 to i32\l  %43 = bitcast float %34 to i32\l  br label %150\l}"];
	Node0x4c33a00 -> Node0x4c34560;
	Node0x4c33a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%44:\l44:                                               \l  %45 = bitcast float %34 to i32\l  %46 = lshr i32 %45, 23\l  %47 = and i32 %45, 8388607\l  %48 = or i32 %47, 8388608\l  %49 = zext i32 %48 to i64\l  %50 = mul nuw nsw i64 %49, 4266746795\l  %51 = trunc i64 %50 to i32\l  %52 = lshr i64 %50, 32\l  %53 = mul nuw nsw i64 %49, 1011060801\l  %54 = add nuw nsw i64 %52, %53\l  %55 = trunc i64 %54 to i32\l  %56 = lshr i64 %54, 32\l  %57 = mul nuw nsw i64 %49, 3680671129\l  %58 = add nuw nsw i64 %56, %57\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = mul nuw nsw i64 %49, 4113882560\l  %62 = add nuw nsw i64 %60, %61\l  %63 = trunc i64 %62 to i32\l  %64 = lshr i64 %62, 32\l  %65 = mul nuw nsw i64 %49, 4230436817\l  %66 = add nuw nsw i64 %64, %65\l  %67 = trunc i64 %66 to i32\l  %68 = lshr i64 %66, 32\l  %69 = mul nuw nsw i64 %49, 1313084713\l  %70 = add nuw nsw i64 %68, %69\l  %71 = trunc i64 %70 to i32\l  %72 = lshr i64 %70, 32\l  %73 = mul nuw nsw i64 %49, 2734261102\l  %74 = add nuw nsw i64 %72, %73\l  %75 = trunc i64 %74 to i32\l  %76 = lshr i64 %74, 32\l  %77 = trunc i64 %76 to i32\l  %78 = add nsw i32 %46, -120\l  %79 = icmp ugt i32 %78, 63\l  %80 = select i1 %79, i32 %71, i32 %77\l  %81 = select i1 %79, i32 %67, i32 %75\l  %82 = select i1 %79, i32 %63, i32 %71\l  %83 = select i1 %79, i32 %59, i32 %67\l  %84 = select i1 %79, i32 %55, i32 %63\l  %85 = select i1 %79, i32 %51, i32 %59\l  %86 = select i1 %79, i32 -64, i32 0\l  %87 = add nsw i32 %86, %78\l  %88 = icmp ugt i32 %87, 31\l  %89 = select i1 %88, i32 %81, i32 %80\l  %90 = select i1 %88, i32 %82, i32 %81\l  %91 = select i1 %88, i32 %83, i32 %82\l  %92 = select i1 %88, i32 %84, i32 %83\l  %93 = select i1 %88, i32 %85, i32 %84\l  %94 = select i1 %88, i32 -32, i32 0\l  %95 = add nsw i32 %94, %87\l  %96 = icmp ugt i32 %95, 31\l  %97 = select i1 %96, i32 %90, i32 %89\l  %98 = select i1 %96, i32 %91, i32 %90\l  %99 = select i1 %96, i32 %92, i32 %91\l  %100 = select i1 %96, i32 %93, i32 %92\l  %101 = select i1 %96, i32 -32, i32 0\l  %102 = add nsw i32 %101, %95\l  %103 = icmp eq i32 %102, 0\l  %104 = sub nsw i32 32, %102\l  %105 = tail call i32 @llvm.fshr.i32(i32 %97, i32 %98, i32 %104)\l  %106 = tail call i32 @llvm.fshr.i32(i32 %98, i32 %99, i32 %104)\l  %107 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %104)\l  %108 = select i1 %103, i32 %97, i32 %105\l  %109 = select i1 %103, i32 %98, i32 %106\l  %110 = select i1 %103, i32 %99, i32 %107\l  %111 = lshr i32 %108, 29\l  %112 = tail call i32 @llvm.fshl.i32(i32 %108, i32 %109, i32 2)\l  %113 = tail call i32 @llvm.fshl.i32(i32 %109, i32 %110, i32 2)\l  %114 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %100, i32 2)\l  %115 = and i32 %111, 1\l  %116 = sub nsw i32 0, %115\l  %117 = shl i32 %111, 31\l  %118 = xor i32 %112, %116\l  %119 = xor i32 %113, %116\l  %120 = xor i32 %114, %116\l  %121 = tail call i32 @llvm.ctlz.i32(i32 %118, i1 false), !range !7\l  %122 = sub nsw i32 31, %121\l  %123 = tail call i32 @llvm.fshr.i32(i32 %118, i32 %119, i32 %122)\l  %124 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %120, i32 %122)\l  %125 = shl nuw nsw i32 %121, 23\l  %126 = sub nuw nsw i32 1056964608, %125\l  %127 = lshr i32 %123, 9\l  %128 = or i32 %127, %126\l  %129 = or i32 %128, %117\l  %130 = bitcast i32 %129 to float\l  %131 = tail call i32 @llvm.fshl.i32(i32 %123, i32 %124, i32 23)\l  %132 = tail call i32 @llvm.ctlz.i32(i32 %131, i1 false), !range !7\l  %133 = fmul float %130, 0x3FF921FB40000000\l  %134 = add nuw nsw i32 %132, %121\l  %135 = shl nuw nsw i32 %134, 23\l  %136 = sub nuw nsw i32 855638016, %135\l  %137 = sub nsw i32 31, %132\l  %138 = tail call i32 @llvm.fshr.i32(i32 %131, i32 %124, i32 %137)\l  %139 = lshr i32 %138, 9\l  %140 = or i32 %136, %139\l  %141 = or i32 %140, %117\l  %142 = bitcast i32 %141 to float\l  %143 = fneg float %133\l  %144 = tail call float @llvm.fma.f32(float %130, float 0x3FF921FB40000000,\l... float %143)\l  %145 = tail call float @llvm.fma.f32(float %130, float 0x3E74442D00000000,\l... float %144)\l  %146 = tail call float @llvm.fma.f32(float %142, float 0x3FF921FB40000000,\l... float %145)\l  %147 = fadd float %133, %146\l  %148 = lshr i32 %108, 30\l  %149 = add nuw nsw i32 %115, %148\l  br label %150\l}"];
	Node0x4c33a90 -> Node0x4c34560;
	Node0x4c34560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%150:\l150:                                              \l  %151 = phi i32 [ %43, %36 ], [ %45, %44 ]\l  %152 = phi float [ %41, %36 ], [ %147, %44 ]\l  %153 = phi i32 [ %42, %36 ], [ %149, %44 ]\l  %154 = fmul float %152, %152\l  %155 = fmul contract float %31, 4.000000e+00\l  %156 = fadd contract float %155, %3\l  %157 = tail call float @llvm.fabs.f32(float %156)\l  %158 = fcmp olt float %157, 1.310720e+05\l  br i1 %158, label %159, label %166\l|{<s0>T|<s1>F}}"];
	Node0x4c34560:s0 -> Node0x4c3a780;
	Node0x4c34560:s1 -> Node0x4c3a7d0;
	Node0x4c3a780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%159:\l159:                                              \l  %160 = fmul float %157, 0x3FE45F3060000000\l  %161 = tail call float @llvm.rint.f32(float %160)\l  %162 = tail call float @llvm.fma.f32(float %161, float 0xBFF921FB40000000,\l... float %157)\l  %163 = tail call float @llvm.fma.f32(float %161, float 0xBE74442D00000000,\l... float %162)\l  %164 = tail call float @llvm.fma.f32(float %161, float 0xBCF8469880000000,\l... float %163)\l  %165 = fptosi float %161 to i32\l  br label %272\l}"];
	Node0x4c3a780 -> Node0x4c3ae90;
	Node0x4c3a7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%166:\l166:                                              \l  %167 = bitcast float %157 to i32\l  %168 = lshr i32 %167, 23\l  %169 = and i32 %167, 8388607\l  %170 = or i32 %169, 8388608\l  %171 = zext i32 %170 to i64\l  %172 = mul nuw nsw i64 %171, 4266746795\l  %173 = trunc i64 %172 to i32\l  %174 = lshr i64 %172, 32\l  %175 = mul nuw nsw i64 %171, 1011060801\l  %176 = add nuw nsw i64 %174, %175\l  %177 = trunc i64 %176 to i32\l  %178 = lshr i64 %176, 32\l  %179 = mul nuw nsw i64 %171, 3680671129\l  %180 = add nuw nsw i64 %178, %179\l  %181 = trunc i64 %180 to i32\l  %182 = lshr i64 %180, 32\l  %183 = mul nuw nsw i64 %171, 4113882560\l  %184 = add nuw nsw i64 %182, %183\l  %185 = trunc i64 %184 to i32\l  %186 = lshr i64 %184, 32\l  %187 = mul nuw nsw i64 %171, 4230436817\l  %188 = add nuw nsw i64 %186, %187\l  %189 = trunc i64 %188 to i32\l  %190 = lshr i64 %188, 32\l  %191 = mul nuw nsw i64 %171, 1313084713\l  %192 = add nuw nsw i64 %190, %191\l  %193 = trunc i64 %192 to i32\l  %194 = lshr i64 %192, 32\l  %195 = mul nuw nsw i64 %171, 2734261102\l  %196 = add nuw nsw i64 %194, %195\l  %197 = trunc i64 %196 to i32\l  %198 = lshr i64 %196, 32\l  %199 = trunc i64 %198 to i32\l  %200 = add nsw i32 %168, -120\l  %201 = icmp ugt i32 %200, 63\l  %202 = select i1 %201, i32 %193, i32 %199\l  %203 = select i1 %201, i32 %189, i32 %197\l  %204 = select i1 %201, i32 %185, i32 %193\l  %205 = select i1 %201, i32 %181, i32 %189\l  %206 = select i1 %201, i32 %177, i32 %185\l  %207 = select i1 %201, i32 %173, i32 %181\l  %208 = select i1 %201, i32 -64, i32 0\l  %209 = add nsw i32 %208, %200\l  %210 = icmp ugt i32 %209, 31\l  %211 = select i1 %210, i32 %203, i32 %202\l  %212 = select i1 %210, i32 %204, i32 %203\l  %213 = select i1 %210, i32 %205, i32 %204\l  %214 = select i1 %210, i32 %206, i32 %205\l  %215 = select i1 %210, i32 %207, i32 %206\l  %216 = select i1 %210, i32 -32, i32 0\l  %217 = add nsw i32 %216, %209\l  %218 = icmp ugt i32 %217, 31\l  %219 = select i1 %218, i32 %212, i32 %211\l  %220 = select i1 %218, i32 %213, i32 %212\l  %221 = select i1 %218, i32 %214, i32 %213\l  %222 = select i1 %218, i32 %215, i32 %214\l  %223 = select i1 %218, i32 -32, i32 0\l  %224 = add nsw i32 %223, %217\l  %225 = icmp eq i32 %224, 0\l  %226 = sub nsw i32 32, %224\l  %227 = tail call i32 @llvm.fshr.i32(i32 %219, i32 %220, i32 %226)\l  %228 = tail call i32 @llvm.fshr.i32(i32 %220, i32 %221, i32 %226)\l  %229 = tail call i32 @llvm.fshr.i32(i32 %221, i32 %222, i32 %226)\l  %230 = select i1 %225, i32 %219, i32 %227\l  %231 = select i1 %225, i32 %220, i32 %228\l  %232 = select i1 %225, i32 %221, i32 %229\l  %233 = lshr i32 %230, 29\l  %234 = tail call i32 @llvm.fshl.i32(i32 %230, i32 %231, i32 2)\l  %235 = tail call i32 @llvm.fshl.i32(i32 %231, i32 %232, i32 2)\l  %236 = tail call i32 @llvm.fshl.i32(i32 %232, i32 %222, i32 2)\l  %237 = and i32 %233, 1\l  %238 = sub nsw i32 0, %237\l  %239 = shl i32 %233, 31\l  %240 = xor i32 %234, %238\l  %241 = xor i32 %235, %238\l  %242 = xor i32 %236, %238\l  %243 = tail call i32 @llvm.ctlz.i32(i32 %240, i1 false), !range !7\l  %244 = sub nsw i32 31, %243\l  %245 = tail call i32 @llvm.fshr.i32(i32 %240, i32 %241, i32 %244)\l  %246 = tail call i32 @llvm.fshr.i32(i32 %241, i32 %242, i32 %244)\l  %247 = shl nuw nsw i32 %243, 23\l  %248 = sub nuw nsw i32 1056964608, %247\l  %249 = lshr i32 %245, 9\l  %250 = or i32 %249, %248\l  %251 = or i32 %250, %239\l  %252 = bitcast i32 %251 to float\l  %253 = tail call i32 @llvm.fshl.i32(i32 %245, i32 %246, i32 23)\l  %254 = tail call i32 @llvm.ctlz.i32(i32 %253, i1 false), !range !7\l  %255 = fmul float %252, 0x3FF921FB40000000\l  %256 = add nuw nsw i32 %254, %243\l  %257 = shl nuw nsw i32 %256, 23\l  %258 = sub nuw nsw i32 855638016, %257\l  %259 = sub nsw i32 31, %254\l  %260 = tail call i32 @llvm.fshr.i32(i32 %253, i32 %246, i32 %259)\l  %261 = lshr i32 %260, 9\l  %262 = or i32 %258, %261\l  %263 = or i32 %262, %239\l  %264 = bitcast i32 %263 to float\l  %265 = fneg float %255\l  %266 = tail call float @llvm.fma.f32(float %252, float 0x3FF921FB40000000,\l... float %265)\l  %267 = tail call float @llvm.fma.f32(float %252, float 0x3E74442D00000000,\l... float %266)\l  %268 = tail call float @llvm.fma.f32(float %264, float 0x3FF921FB40000000,\l... float %267)\l  %269 = fadd float %255, %268\l  %270 = lshr i32 %230, 30\l  %271 = add nuw nsw i32 %237, %270\l  br label %272\l}"];
	Node0x4c3a7d0 -> Node0x4c3ae90;
	Node0x4c3ae90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%272:\l272:                                              \l  %273 = phi float [ %164, %159 ], [ %269, %166 ]\l  %274 = phi i32 [ %165, %159 ], [ %271, %166 ]\l  %275 = tail call i1 @llvm.amdgcn.class.f32(float %34, i32 504)\l  %276 = bitcast float %33 to i32\l  %277 = xor i32 %151, %276\l  %278 = shl i32 %153, 30\l  %279 = and i32 %278, -2147483648\l  %280 = xor i32 %277, %279\l  %281 = and i32 %153, 1\l  %282 = icmp eq i32 %281, 0\l  %283 = tail call float @llvm.fmuladd.f32(float %154, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %284 = tail call float @llvm.fmuladd.f32(float %154, float %283, float\l... 0xBFC55553A0000000)\l  %285 = fmul float %154, %284\l  %286 = tail call float @llvm.fmuladd.f32(float %152, float %285, float %152)\l  %287 = tail call float @llvm.fmuladd.f32(float %154, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %288 = tail call float @llvm.fmuladd.f32(float %154, float %287, float\l... 0x3FA5557EE0000000)\l  %289 = tail call float @llvm.fmuladd.f32(float %154, float %288, float\l... 0xBFE0000080000000)\l  %290 = tail call float @llvm.fmuladd.f32(float %154, float %289, float\l... 1.000000e+00)\l  %291 = select i1 %282, float %286, float %290\l  %292 = bitcast float %291 to i32\l  %293 = xor i32 %280, %292\l  %294 = bitcast i32 %293 to float\l  %295 = select i1 %275, float %294, float 0x7FF8000000000000\l  %296 = fmul float %273, %273\l  %297 = tail call float @llvm.fmuladd.f32(float %296, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %298 = tail call float @llvm.fmuladd.f32(float %296, float %297, float\l... 0xBFC55553A0000000)\l  %299 = fmul float %296, %298\l  %300 = tail call float @llvm.fmuladd.f32(float %273, float %299, float %273)\l  %301 = tail call float @llvm.fmuladd.f32(float %296, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %302 = tail call float @llvm.fmuladd.f32(float %296, float %301, float\l... 0x3FA5557EE0000000)\l  %303 = tail call float @llvm.fmuladd.f32(float %296, float %302, float\l... 0xBFE0000080000000)\l  %304 = tail call float @llvm.fmuladd.f32(float %296, float %303, float\l... 1.000000e+00)\l  %305 = fneg float %300\l  %306 = and i32 %274, 1\l  %307 = icmp eq i32 %306, 0\l  %308 = select i1 %307, float %304, float %305\l  %309 = bitcast float %308 to i32\l  %310 = shl i32 %274, 30\l  %311 = and i32 %310, -2147483648\l  %312 = xor i32 %311, %309\l  %313 = bitcast i32 %312 to float\l  %314 = tail call i1 @llvm.amdgcn.class.f32(float %157, i32 504)\l  %315 = select i1 %314, float %313, float 0x7FF8000000000000\l  %316 = fmul contract float %295, %315\l  %317 = fmul contract float %316, 5.000000e-01\l  %318 = insertelement \<4 x float\> \<float poison, float poison, float poison,\l... float 1.000000e+00\>, float %29, i64 0\l  %319 = insertelement \<4 x float\> %318, float %317, i64 1\l  %320 = insertelement \<4 x float\> %319, float %31, i64 2\l  %321 = mul i32 %21, %1\l  %322 = add i32 %321, %13\l  %323 = zext i32 %322 to i64\l  %324 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %323, i32 0, i32 0, i32 0\l  store \<4 x float\> %320, \<4 x float\> addrspace(1)* %324, align 16\l  ret void\l}"];
}
