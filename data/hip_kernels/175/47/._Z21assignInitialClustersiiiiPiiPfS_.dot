digraph "CFG for '_Z21assignInitialClustersiiiiPiiPfS_' function" {
	label="CFG for '_Z21assignInitialClustersiiiiPiiPfS_' function";

	Node0x61fdb10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%8:\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %10, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = mul nsw i32 %25, %0\l  %27 = add nsw i32 %26, %17\l  %28 = icmp slt i32 %17, %0\l  %29 = icmp slt i32 %25, %1\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %145\l|{<s0>T|<s1>F}}"];
	Node0x61fdb10:s0 -> Node0x62016b0;
	Node0x61fdb10:s1 -> Node0x6201740;
	Node0x62016b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%31:\l31:                                               \l  %32 = add nsw i32 %0, -1\l  %33 = sdiv i32 %32, 6\l  %34 = add nsw i32 %33, 1\l  %35 = sdiv i32 %17, %34\l  %36 = add nsw i32 %1, -1\l  %37 = sdiv i32 %36, 6\l  %38 = add nsw i32 %37, 1\l  %39 = sdiv i32 %25, %38\l  %40 = mul nsw i32 %39, 6\l  %41 = add nsw i32 %40, %35\l  %42 = tail call i32 @llvm.smin.i32(i32 %41, i32 31)\l  %43 = sext i32 %27 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %43\l  store i32 %42, i32 addrspace(1)* %44, align 4, !tbaa !7\l  %45 = icmp sgt i32 %5, 0\l  br i1 %45, label %46, label %145\l|{<s0>T|<s1>F}}"];
	Node0x62016b0:s0 -> Node0x62025a0;
	Node0x62016b0:s1 -> Node0x6201740;
	Node0x62025a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%46:\l46:                                               \l  %47 = and i32 %5, 7\l  %48 = icmp ult i32 %5, 8\l  br i1 %48, label %128, label %49\l|{<s0>T|<s1>F}}"];
	Node0x62025a0:s0 -> Node0x6202860;
	Node0x62025a0:s1 -> Node0x62028b0;
	Node0x62028b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%49:\l49:                                               \l  %50 = and i32 %5, -8\l  br label %51\l}"];
	Node0x62028b0 -> Node0x6202ab0;
	Node0x6202ab0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %49 ], [ %125, %51 ]\l  %53 = phi i32 [ 0, %49 ], [ %126, %51 ]\l  %54 = mul nsw i32 %52, %2\l  %55 = add nsw i32 %54, %27\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %6, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %59 = fmul contract float %58, 1.000000e+05\l  %60 = fptosi float %59 to i32\l  %61 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %56\l  store i32 %60, i32 addrspace(1)* %61, align 4, !tbaa !7\l  %62 = or i32 %52, 1\l  %63 = mul nsw i32 %62, %2\l  %64 = add nsw i32 %63, %27\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %6, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %68 = fmul contract float %67, 1.000000e+05\l  %69 = fptosi float %68 to i32\l  %70 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %65\l  store i32 %69, i32 addrspace(1)* %70, align 4, !tbaa !7\l  %71 = or i32 %52, 2\l  %72 = mul nsw i32 %71, %2\l  %73 = add nsw i32 %72, %27\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %6, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %77 = fmul contract float %76, 1.000000e+05\l  %78 = fptosi float %77 to i32\l  %79 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %74\l  store i32 %78, i32 addrspace(1)* %79, align 4, !tbaa !7\l  %80 = or i32 %52, 3\l  %81 = mul nsw i32 %80, %2\l  %82 = add nsw i32 %81, %27\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %6, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %86 = fmul contract float %85, 1.000000e+05\l  %87 = fptosi float %86 to i32\l  %88 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %83\l  store i32 %87, i32 addrspace(1)* %88, align 4, !tbaa !7\l  %89 = or i32 %52, 4\l  %90 = mul nsw i32 %89, %2\l  %91 = add nsw i32 %90, %27\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %6, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %95 = fmul contract float %94, 1.000000e+05\l  %96 = fptosi float %95 to i32\l  %97 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %92\l  store i32 %96, i32 addrspace(1)* %97, align 4, !tbaa !7\l  %98 = or i32 %52, 5\l  %99 = mul nsw i32 %98, %2\l  %100 = add nsw i32 %99, %27\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %6, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %104 = fmul contract float %103, 1.000000e+05\l  %105 = fptosi float %104 to i32\l  %106 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %101\l  store i32 %105, i32 addrspace(1)* %106, align 4, !tbaa !7\l  %107 = or i32 %52, 6\l  %108 = mul nsw i32 %107, %2\l  %109 = add nsw i32 %108, %27\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %6, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %113 = fmul contract float %112, 1.000000e+05\l  %114 = fptosi float %113 to i32\l  %115 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %110\l  store i32 %114, i32 addrspace(1)* %115, align 4, !tbaa !7\l  %116 = or i32 %52, 7\l  %117 = mul nsw i32 %116, %2\l  %118 = add nsw i32 %117, %27\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %6, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %122 = fmul contract float %121, 1.000000e+05\l  %123 = fptosi float %122 to i32\l  %124 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %119\l  store i32 %123, i32 addrspace(1)* %124, align 4, !tbaa !7\l  %125 = add nuw nsw i32 %52, 8\l  %126 = add i32 %53, 8\l  %127 = icmp eq i32 %126, %50\l  br i1 %127, label %128, label %51, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x6202ab0:s0 -> Node0x6202860;
	Node0x6202ab0:s1 -> Node0x6202ab0;
	Node0x6202860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%128:\l128:                                              \l  %129 = phi i32 [ 0, %46 ], [ %125, %51 ]\l  %130 = icmp eq i32 %47, 0\l  br i1 %130, label %145, label %131\l|{<s0>T|<s1>F}}"];
	Node0x6202860:s0 -> Node0x6201740;
	Node0x6202860:s1 -> Node0x6204780;
	Node0x6204780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%131:\l131:                                              \l  %132 = phi i32 [ %142, %131 ], [ %129, %128 ]\l  %133 = phi i32 [ %143, %131 ], [ 0, %128 ]\l  %134 = mul nsw i32 %132, %2\l  %135 = add nsw i32 %134, %27\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %6, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %139 = fmul contract float %138, 1.000000e+05\l  %140 = fptosi float %139 to i32\l  %141 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %136\l  store i32 %140, i32 addrspace(1)* %141, align 4, !tbaa !7\l  %142 = add nuw nsw i32 %132, 1\l  %143 = add i32 %133, 1\l  %144 = icmp eq i32 %143, %47\l  br i1 %144, label %145, label %131, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x6204780:s0 -> Node0x6201740;
	Node0x6204780:s1 -> Node0x6204780;
	Node0x6201740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%145:\l145:                                              \l  ret void\l}"];
}
