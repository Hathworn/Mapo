digraph "CFG for '_Z21assignInitialClustersiiiiPiiPfS_' function" {
	label="CFG for '_Z21assignInitialClustersiiiiPiiPfS_' function";

	Node0x5d0fa10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%8:\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %10, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = mul nsw i32 %25, %0\l  %27 = add nsw i32 %26, %17\l  %28 = icmp slt i32 %17, %0\l  %29 = icmp slt i32 %25, %1\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %144\l|{<s0>T|<s1>F}}"];
	Node0x5d0fa10:s0 -> Node0x5d135b0;
	Node0x5d0fa10:s1 -> Node0x5d13640;
	Node0x5d135b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%31:\l31:                                               \l  %32 = add nsw i32 %0, -1\l  %33 = sdiv i32 %32, 8\l  %34 = add nsw i32 %33, 1\l  %35 = sdiv i32 %17, %34\l  %36 = add nsw i32 %1, -1\l  %37 = sdiv i32 %36, 8\l  %38 = add nsw i32 %37, 1\l  %39 = sdiv i32 %25, %38\l  %40 = shl nsw i32 %39, 3\l  %41 = add nsw i32 %40, %35\l  %42 = sext i32 %27 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %42\l  store i32 %41, i32 addrspace(1)* %43, align 4, !tbaa !7\l  %44 = icmp sgt i32 %5, 0\l  br i1 %44, label %45, label %144\l|{<s0>T|<s1>F}}"];
	Node0x5d135b0:s0 -> Node0x5d14260;
	Node0x5d135b0:s1 -> Node0x5d13640;
	Node0x5d14260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%45:\l45:                                               \l  %46 = and i32 %5, 7\l  %47 = icmp ult i32 %5, 8\l  br i1 %47, label %127, label %48\l|{<s0>T|<s1>F}}"];
	Node0x5d14260:s0 -> Node0x5d144f0;
	Node0x5d14260:s1 -> Node0x5d14540;
	Node0x5d14540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%48:\l48:                                               \l  %49 = and i32 %5, -8\l  br label %50\l}"];
	Node0x5d14540 -> Node0x5d14740;
	Node0x5d14740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%50:\l50:                                               \l  %51 = phi i32 [ 0, %48 ], [ %124, %50 ]\l  %52 = phi i32 [ 0, %48 ], [ %125, %50 ]\l  %53 = mul nsw i32 %51, %2\l  %54 = add nsw i32 %53, %27\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %6, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %58 = fmul contract float %57, 1.000000e+05\l  %59 = fptosi float %58 to i32\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %55\l  store i32 %59, i32 addrspace(1)* %60, align 4, !tbaa !7\l  %61 = or i32 %51, 1\l  %62 = mul nsw i32 %61, %2\l  %63 = add nsw i32 %62, %27\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %6, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %67 = fmul contract float %66, 1.000000e+05\l  %68 = fptosi float %67 to i32\l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %64\l  store i32 %68, i32 addrspace(1)* %69, align 4, !tbaa !7\l  %70 = or i32 %51, 2\l  %71 = mul nsw i32 %70, %2\l  %72 = add nsw i32 %71, %27\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %6, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %76 = fmul contract float %75, 1.000000e+05\l  %77 = fptosi float %76 to i32\l  %78 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %73\l  store i32 %77, i32 addrspace(1)* %78, align 4, !tbaa !7\l  %79 = or i32 %51, 3\l  %80 = mul nsw i32 %79, %2\l  %81 = add nsw i32 %80, %27\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %6, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %85 = fmul contract float %84, 1.000000e+05\l  %86 = fptosi float %85 to i32\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %82\l  store i32 %86, i32 addrspace(1)* %87, align 4, !tbaa !7\l  %88 = or i32 %51, 4\l  %89 = mul nsw i32 %88, %2\l  %90 = add nsw i32 %89, %27\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %6, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %93, 1.000000e+05\l  %95 = fptosi float %94 to i32\l  %96 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %91\l  store i32 %95, i32 addrspace(1)* %96, align 4, !tbaa !7\l  %97 = or i32 %51, 5\l  %98 = mul nsw i32 %97, %2\l  %99 = add nsw i32 %98, %27\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %6, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %103 = fmul contract float %102, 1.000000e+05\l  %104 = fptosi float %103 to i32\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %100\l  store i32 %104, i32 addrspace(1)* %105, align 4, !tbaa !7\l  %106 = or i32 %51, 6\l  %107 = mul nsw i32 %106, %2\l  %108 = add nsw i32 %107, %27\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %6, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %112 = fmul contract float %111, 1.000000e+05\l  %113 = fptosi float %112 to i32\l  %114 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %109\l  store i32 %113, i32 addrspace(1)* %114, align 4, !tbaa !7\l  %115 = or i32 %51, 7\l  %116 = mul nsw i32 %115, %2\l  %117 = add nsw i32 %116, %27\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %6, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %121 = fmul contract float %120, 1.000000e+05\l  %122 = fptosi float %121 to i32\l  %123 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %118\l  store i32 %122, i32 addrspace(1)* %123, align 4, !tbaa !7\l  %124 = add nuw nsw i32 %51, 8\l  %125 = add i32 %52, 8\l  %126 = icmp eq i32 %125, %49\l  br i1 %126, label %127, label %50, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5d14740:s0 -> Node0x5d144f0;
	Node0x5d14740:s1 -> Node0x5d14740;
	Node0x5d144f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%127:\l127:                                              \l  %128 = phi i32 [ 0, %45 ], [ %124, %50 ]\l  %129 = icmp eq i32 %46, 0\l  br i1 %129, label %144, label %130\l|{<s0>T|<s1>F}}"];
	Node0x5d144f0:s0 -> Node0x5d13640;
	Node0x5d144f0:s1 -> Node0x5d163d0;
	Node0x5d163d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%130:\l130:                                              \l  %131 = phi i32 [ %141, %130 ], [ %128, %127 ]\l  %132 = phi i32 [ %142, %130 ], [ 0, %127 ]\l  %133 = mul nsw i32 %131, %2\l  %134 = add nsw i32 %133, %27\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %6, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %138 = fmul contract float %137, 1.000000e+05\l  %139 = fptosi float %138 to i32\l  %140 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %135\l  store i32 %139, i32 addrspace(1)* %140, align 4, !tbaa !7\l  %141 = add nuw nsw i32 %131, 1\l  %142 = add i32 %132, 1\l  %143 = icmp eq i32 %142, %46\l  br i1 %143, label %144, label %130, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5d163d0:s0 -> Node0x5d13640;
	Node0x5d163d0:s1 -> Node0x5d163d0;
	Node0x5d13640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%144:\l144:                                              \l  ret void\l}"];
}
