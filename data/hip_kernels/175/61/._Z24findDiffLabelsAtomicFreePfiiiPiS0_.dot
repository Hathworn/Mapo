digraph "CFG for '_Z24findDiffLabelsAtomicFreePfiiiPiS0_' function" {
	label="CFG for '_Z24findDiffLabelsAtomicFreePfiiiPiS0_' function";

	Node0x45aa550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %2\l  br i1 %16, label %17, label %128\l|{<s0>T|<s1>F}}"];
	Node0x45aa550:s0 -> Node0x45aae70;
	Node0x45aa550:s1 -> Node0x45ac560;
	Node0x45aae70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%17:\l17:                                               \l  %18 = icmp sgt i32 %3, 0\l  br i1 %18, label %19, label %47\l|{<s0>T|<s1>F}}"];
	Node0x45aae70:s0 -> Node0x45ac730;
	Node0x45aae70:s1 -> Node0x45ac780;
	Node0x45ac730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%19:\l19:                                               \l  %20 = and i32 %3, 7\l  %21 = icmp ult i32 %3, 8\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x45ac730:s0 -> Node0x45aca40;
	Node0x45ac730:s1 -> Node0x45aca90;
	Node0x45aca90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i32 %3, -8\l  br label %53\l}"];
	Node0x45aca90 -> Node0x45acc90;
	Node0x45aca40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi i32 [ undef, %19 ], [ %119, %53 ]\l  %26 = phi i32 [ %15, %19 ], [ %121, %53 ]\l  %27 = phi float [ 1.000000e+07, %19 ], [ %120, %53 ]\l  %28 = phi i32 [ -1, %19 ], [ %119, %53 ]\l  %29 = phi i32 [ 0, %19 ], [ %122, %53 ]\l  %30 = icmp eq i32 %20, 0\l  br i1 %30, label %47, label %31\l|{<s0>T|<s1>F}}"];
	Node0x45aca40:s0 -> Node0x45ac780;
	Node0x45aca40:s1 -> Node0x45ae170;
	Node0x45ae170 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = phi i32 [ %43, %31 ], [ %26, %24 ]\l  %33 = phi float [ %42, %31 ], [ %27, %24 ]\l  %34 = phi i32 [ %41, %31 ], [ %28, %24 ]\l  %35 = phi i32 [ %44, %31 ], [ %29, %24 ]\l  %36 = phi i32 [ %45, %31 ], [ 0, %24 ]\l  %37 = sext i32 %32 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fcmp contract olt float %39, %33\l  %41 = select i1 %40, i32 %35, i32 %34\l  %42 = select i1 %40, float %39, float %33\l  %43 = add nsw i32 %32, %1\l  %44 = add nuw nsw i32 %35, 1\l  %45 = add i32 %36, 1\l  %46 = icmp eq i32 %45, %20\l  br i1 %46, label %47, label %31, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x45ae170:s0 -> Node0x45ac780;
	Node0x45ae170:s1 -> Node0x45ae170;
	Node0x45ac780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = phi i32 [ -1, %17 ], [ %25, %24 ], [ %41, %31 ]\l  %49 = sext i32 %15 to i64\l  %50 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %49\l  %51 = load i32, i32 addrspace(1)* %50, align 4, !tbaa !13, !amdgpu.noclobber\l... !5\l  store i32 %48, i32 addrspace(1)* %50, align 4, !tbaa !13\l  %52 = icmp eq i32 %48, %51\l  br i1 %52, label %128, label %125\l|{<s0>T|<s1>F}}"];
	Node0x45ac780:s0 -> Node0x45ac560;
	Node0x45ac780:s1 -> Node0x45ac510;
	Node0x45acc90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%53:\l53:                                               \l  %54 = phi i32 [ %15, %22 ], [ %121, %53 ]\l  %55 = phi float [ 1.000000e+07, %22 ], [ %120, %53 ]\l  %56 = phi i32 [ -1, %22 ], [ %119, %53 ]\l  %57 = phi i32 [ 0, %22 ], [ %122, %53 ]\l  %58 = phi i32 [ 0, %22 ], [ %123, %53 ]\l  %59 = sext i32 %54 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %62 = fcmp contract olt float %61, %55\l  %63 = select i1 %62, i32 %57, i32 %56\l  %64 = select i1 %62, float %61, float %55\l  %65 = add nsw i32 %54, %1\l  %66 = or i32 %57, 1\l  %67 = sext i32 %65 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = fcmp contract olt float %69, %64\l  %71 = select i1 %70, i32 %66, i32 %63\l  %72 = select i1 %70, float %69, float %64\l  %73 = add nsw i32 %65, %1\l  %74 = or i32 %57, 2\l  %75 = sext i32 %73 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fcmp contract olt float %77, %72\l  %79 = select i1 %78, i32 %74, i32 %71\l  %80 = select i1 %78, float %77, float %72\l  %81 = add nsw i32 %73, %1\l  %82 = or i32 %57, 3\l  %83 = sext i32 %81 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = fcmp contract olt float %85, %80\l  %87 = select i1 %86, i32 %82, i32 %79\l  %88 = select i1 %86, float %85, float %80\l  %89 = add nsw i32 %81, %1\l  %90 = or i32 %57, 4\l  %91 = sext i32 %89 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fcmp contract olt float %93, %88\l  %95 = select i1 %94, i32 %90, i32 %87\l  %96 = select i1 %94, float %93, float %88\l  %97 = add nsw i32 %89, %1\l  %98 = or i32 %57, 5\l  %99 = sext i32 %97 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fcmp contract olt float %101, %96\l  %103 = select i1 %102, i32 %98, i32 %95\l  %104 = select i1 %102, float %101, float %96\l  %105 = add nsw i32 %97, %1\l  %106 = or i32 %57, 6\l  %107 = sext i32 %105 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %110 = fcmp contract olt float %109, %104\l  %111 = select i1 %110, i32 %106, i32 %103\l  %112 = select i1 %110, float %109, float %104\l  %113 = add nsw i32 %105, %1\l  %114 = or i32 %57, 7\l  %115 = sext i32 %113 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fcmp contract olt float %117, %112\l  %119 = select i1 %118, i32 %114, i32 %111\l  %120 = select i1 %118, float %117, float %112\l  %121 = add nsw i32 %113, %1\l  %122 = add nuw nsw i32 %57, 8\l  %123 = add i32 %58, 8\l  %124 = icmp eq i32 %123, %23\l  br i1 %124, label %24, label %53, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x45acc90:s0 -> Node0x45aca40;
	Node0x45acc90:s1 -> Node0x45acc90;
	Node0x45ac510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%125:\l125:                                              \l  %126 = load i32, i32 addrspace(1)* %5, align 4, !tbaa !13\l  %127 = add nsw i32 %126, 1\l  store i32 %127, i32 addrspace(1)* %5, align 4, !tbaa !13\l  br label %128\l}"];
	Node0x45ac510 -> Node0x45ac560;
	Node0x45ac560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%128:\l128:                                              \l  ret void\l}"];
}
