digraph "CFG for '_Z17mean_delta_kernelPfS_iiiS_' function" {
	label="CFG for '_Z17mean_delta_kernelPfS_iiiS_' function";

	Node0x5ccdea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !4\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !13, !invariant.load\l... !14\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %8\l  %23 = add i32 %22, %7\l  %24 = mul i32 %23, %16\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %25\l  %27 = icmp slt i32 %26, %3\l  br i1 %27, label %28, label %147\l|{<s0>T|<s1>F}}"];
	Node0x5ccdea0:s0 -> Node0x5cd06b0;
	Node0x5ccdea0:s1 -> Node0x5cd0740;
	Node0x5cd06b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%28:\l28:                                               \l  %29 = sext i32 %26 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %5, i64 %29\l  store float 0.000000e+00, float addrspace(1)* %30, align 4, !tbaa !16\l  %31 = icmp sgt i32 %2, 0\l  br i1 %31, label %32, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5cd06b0:s0 -> Node0x5cd1600;
	Node0x5cd06b0:s1 -> Node0x5cd1690;
	Node0x5cd1600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%32:\l32:                                               \l  %33 = icmp sgt i32 %4, 0\l  %34 = and i32 %4, 7\l  %35 = icmp ult i32 %4, 8\l  %36 = and i32 %4, -8\l  %37 = icmp eq i32 %34, 0\l  br label %38\l}"];
	Node0x5cd1600 -> Node0x5cd1c50;
	Node0x5cd1c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%38:\l38:                                               \l  %39 = phi float [ 0.000000e+00, %32 ], [ %116, %115 ]\l  %40 = phi i32 [ 0, %32 ], [ %117, %115 ]\l  br i1 %33, label %41, label %115\l|{<s0>T|<s1>F}}"];
	Node0x5cd1c50:s0 -> Node0x5cd1fa0;
	Node0x5cd1c50:s1 -> Node0x5cd1d40;
	Node0x5cd1fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%41:\l41:                                               \l  %42 = mul nsw i32 %40, %3\l  %43 = add i32 %42, %26\l  %44 = mul i32 %43, %4\l  br i1 %35, label %99, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5cd1fa0:s0 -> Node0x5cd2290;
	Node0x5cd1fa0:s1 -> Node0x5cd22e0;
	Node0x5cd22e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%45:\l45:                                               \l  %46 = phi float [ %95, %45 ], [ %39, %41 ]\l  %47 = phi i32 [ %96, %45 ], [ 0, %41 ]\l  %48 = phi i32 [ %97, %45 ], [ 0, %41 ]\l  %49 = add nsw i32 %47, %44\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !16\l  %53 = fadd contract float %52, %46\l  store float %53, float addrspace(1)* %30, align 4, !tbaa !16\l  %54 = or i32 %47, 1\l  %55 = add nsw i32 %54, %44\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !16\l  %59 = fadd contract float %58, %53\l  store float %59, float addrspace(1)* %30, align 4, !tbaa !16\l  %60 = or i32 %47, 2\l  %61 = add nsw i32 %60, %44\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !16\l  %65 = fadd contract float %64, %59\l  store float %65, float addrspace(1)* %30, align 4, !tbaa !16\l  %66 = or i32 %47, 3\l  %67 = add nsw i32 %66, %44\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16\l  %71 = fadd contract float %70, %65\l  store float %71, float addrspace(1)* %30, align 4, !tbaa !16\l  %72 = or i32 %47, 4\l  %73 = add nsw i32 %72, %44\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16\l  %77 = fadd contract float %76, %71\l  store float %77, float addrspace(1)* %30, align 4, !tbaa !16\l  %78 = or i32 %47, 5\l  %79 = add nsw i32 %78, %44\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = fadd contract float %82, %77\l  store float %83, float addrspace(1)* %30, align 4, !tbaa !16\l  %84 = or i32 %47, 6\l  %85 = add nsw i32 %84, %44\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = fadd contract float %88, %83\l  store float %89, float addrspace(1)* %30, align 4, !tbaa !16\l  %90 = or i32 %47, 7\l  %91 = add nsw i32 %90, %44\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !16\l  %95 = fadd contract float %94, %89\l  store float %95, float addrspace(1)* %30, align 4, !tbaa !16\l  %96 = add nuw nsw i32 %47, 8\l  %97 = add i32 %48, 8\l  %98 = icmp eq i32 %97, %36\l  br i1 %98, label %99, label %45, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5cd22e0:s0 -> Node0x5cd2290;
	Node0x5cd22e0:s1 -> Node0x5cd22e0;
	Node0x5cd2290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%99:\l99:                                               \l  %100 = phi float [ undef, %41 ], [ %95, %45 ]\l  %101 = phi float [ %39, %41 ], [ %95, %45 ]\l  %102 = phi i32 [ 0, %41 ], [ %96, %45 ]\l  br i1 %37, label %115, label %103\l|{<s0>T|<s1>F}}"];
	Node0x5cd2290:s0 -> Node0x5cd1d40;
	Node0x5cd2290:s1 -> Node0x5cd5710;
	Node0x5cd5710 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%103:\l103:                                              \l  %104 = phi float [ %111, %103 ], [ %101, %99 ]\l  %105 = phi i32 [ %112, %103 ], [ %102, %99 ]\l  %106 = phi i32 [ %113, %103 ], [ 0, %99 ]\l  %107 = add nsw i32 %105, %44\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16\l  %111 = fadd contract float %110, %104\l  store float %111, float addrspace(1)* %30, align 4, !tbaa !16\l  %112 = add nuw nsw i32 %105, 1\l  %113 = add i32 %106, 1\l  %114 = icmp eq i32 %113, %34\l  br i1 %114, label %115, label %103, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5cd5710:s0 -> Node0x5cd1d40;
	Node0x5cd5710:s1 -> Node0x5cd5710;
	Node0x5cd1d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%115:\l115:                                              \l  %116 = phi float [ %39, %38 ], [ %100, %99 ], [ %111, %103 ]\l  %117 = add nuw nsw i32 %40, 1\l  %118 = icmp eq i32 %117, %2\l  br i1 %118, label %119, label %38, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5cd1d40:s0 -> Node0x5cd1690;
	Node0x5cd1d40:s1 -> Node0x5cd1c50;
	Node0x5cd1690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%119:\l119:                                              \l  %120 = phi float [ 0.000000e+00, %28 ], [ %116, %115 ]\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = fadd contract float %122, 0x3EB0C6F7A0000000\l  %124 = fcmp olt float %123, 0x39F0000000000000\l  %125 = select i1 %124, float 0x41F0000000000000, float 1.000000e+00\l  %126 = fmul float %123, %125\l  %127 = tail call float @llvm.sqrt.f32(float %126)\l  %128 = bitcast float %127 to i32\l  %129 = add nsw i32 %128, -1\l  %130 = bitcast i32 %129 to float\l  %131 = add nsw i32 %128, 1\l  %132 = bitcast i32 %131 to float\l  %133 = tail call i1 @llvm.amdgcn.class.f32(float %126, i32 608)\l  %134 = select i1 %124, float 0x3EF0000000000000, float 1.000000e+00\l  %135 = fneg float %132\l  %136 = tail call float @llvm.fma.f32(float %135, float %127, float %126)\l  %137 = fcmp ogt float %136, 0.000000e+00\l  %138 = fneg float %130\l  %139 = tail call float @llvm.fma.f32(float %138, float %127, float %126)\l  %140 = fcmp ole float %139, 0.000000e+00\l  %141 = select i1 %140, float %130, float %127\l  %142 = select i1 %137, float %132, float %141\l  %143 = fmul float %134, %142\l  %144 = select i1 %133, float %126, float %143\l  %145 = fdiv contract float -1.000000e+00, %144\l  %146 = fmul contract float %120, %145\l  store float %146, float addrspace(1)* %30, align 4, !tbaa !16\l  br label %147\l}"];
	Node0x5cd1690 -> Node0x5cd0740;
	Node0x5cd0740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%147:\l147:                                              \l  ret void\l}"];
}
