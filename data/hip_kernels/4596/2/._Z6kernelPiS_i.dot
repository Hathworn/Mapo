digraph "CFG for '_Z6kernelPiS_i' function" {
	label="CFG for '_Z6kernelPiS_i' function";

	Node0x601c740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp sgt i32 %2, 1\l  br i1 %13, label %14, label %36\l|{<s0>T|<s1>F}}"];
	Node0x601c740:s0 -> Node0x601e650;
	Node0x601c740:s1 -> Node0x601e6e0;
	Node0x601e650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = add i32 %2, -1\l  %16 = add i32 %2, -2\l  %17 = and i32 %15, 7\l  %18 = icmp ult i32 %16, 7\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x601e650:s0 -> Node0x601e0d0;
	Node0x601e650:s1 -> Node0x601ebd0;
	Node0x601ebd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %15, -8\l  br label %44\l}"];
	Node0x601ebd0 -> Node0x601edd0;
	Node0x601e0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi i32 [ undef, %14 ], [ %73, %44 ]\l  %23 = phi i32 [ %12, %14 ], [ %73, %44 ]\l  %24 = phi i32 [ %12, %14 ], [ %67, %44 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %36, label %26\l|{<s0>T|<s1>F}}"];
	Node0x601e0d0:s0 -> Node0x601e6e0;
	Node0x601e0d0:s1 -> Node0x601f620;
	Node0x601f620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %33, %26 ], [ %23, %21 ]\l  %28 = phi i32 [ %30, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %34, %26 ], [ 0, %21 ]\l  %30 = ashr i32 %28, 1\l  %31 = shl i32 %27, 1\l  %32 = and i32 %30, 1\l  %33 = or i32 %31, %32\l  %34 = add i32 %29, 1\l  %35 = icmp eq i32 %34, %17\l  br i1 %35, label %36, label %26, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x601f620:s0 -> Node0x601e6e0;
	Node0x601f620:s1 -> Node0x601f620;
	Node0x601e6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%36:\l36:                                               \l  %37 = phi i32 [ %12, %3 ], [ %22, %21 ], [ %33, %26 ]\l  %38 = and i32 %37, 255\l  %39 = sext i32 %12 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !9, !amdgpu.noclobber\l... !5\l  %42 = zext i32 %38 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %42\l  store i32 %41, i32 addrspace(1)* %43, align 4, !tbaa !9\l  ret void\l}"];
	Node0x601edd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%44:\l44:                                               \l  %45 = phi i32 [ %12, %19 ], [ %73, %44 ]\l  %46 = phi i32 [ %12, %19 ], [ %67, %44 ]\l  %47 = phi i32 [ 0, %19 ], [ %74, %44 ]\l  %48 = lshr i32 %46, 4\l  %49 = shl i32 %45, 4\l  %50 = shl i32 %46, 2\l  %51 = and i32 %50, 8\l  %52 = or i32 %49, %51\l  %53 = and i32 %46, 4\l  %54 = or i32 %53, %52\l  %55 = lshr i32 %46, 2\l  %56 = and i32 %55, 2\l  %57 = or i32 %54, %56\l  %58 = and i32 %48, 1\l  %59 = or i32 %57, %58\l  %60 = lshr i32 %46, 6\l  %61 = shl i32 %59, 2\l  %62 = lshr i32 %46, 4\l  %63 = and i32 %62, 2\l  %64 = or i32 %61, %63\l  %65 = and i32 %60, 1\l  %66 = or i32 %64, %65\l  %67 = ashr i32 %46, 8\l  %68 = shl i32 %66, 2\l  %69 = lshr i32 %46, 6\l  %70 = and i32 %69, 2\l  %71 = or i32 %68, %70\l  %72 = and i32 %67, 1\l  %73 = or i32 %71, %72\l  %74 = add i32 %47, 8\l  %75 = icmp eq i32 %74, %20\l  br i1 %75, label %21, label %44, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x601edd0:s0 -> Node0x601e0d0;
	Node0x601edd0:s1 -> Node0x601edd0;
}
