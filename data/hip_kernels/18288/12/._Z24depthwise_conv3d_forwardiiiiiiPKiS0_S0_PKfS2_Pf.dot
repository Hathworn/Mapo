digraph "CFG for '_Z24depthwise_conv3d_forwardiiiiiiPKiS0_S0_PKfS2_Pf' function" {
	label="CFG for '_Z24depthwise_conv3d_forwardiiiiiiPKiS0_S0_PKfS2_Pf' function";

	Node0x4946f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = icmp slt i32 %13, %0\l  br i1 %14, label %15, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4946f60:s0 -> Node0x49480b0;
	Node0x4946f60:s1 -> Node0x4948140;
	Node0x49480b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%15:\l15:                                               \l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %18 = getelementptr i8, i8 addrspace(4)* %17, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = getelementptr inbounds i8, i8 addrspace(4)* %17, i64 12\l  %23 = bitcast i8 addrspace(4)* %22 to i32 addrspace(4)*\l  %24 = load i32, i32 addrspace(4)* %23, align 4, !tbaa !6\l  %25 = mul i32 %16, %21\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %27 = add i32 %25, %26\l  %28 = mul i32 %4, %3\l  %29 = mul nsw i32 %28, %2\l  %30 = icmp slt i32 %27, %29\l  %31 = getelementptr inbounds i8, i8 addrspace(4)* %17, i64 16\l  %32 = bitcast i8 addrspace(4)* %31 to i32 addrspace(4)*\l  %33 = getelementptr i8, i8 addrspace(4)* %17, i64 6\l  %34 = bitcast i8 addrspace(4)* %33 to i16 addrspace(4)*\l  %35 = load i16, i16 addrspace(4)* %34, align 2\l  %36 = zext i16 %35 to i32\l  %37 = udiv i32 %24, %21\l  %38 = mul i32 %37, %21\l  %39 = icmp ugt i32 %24, %38\l  %40 = zext i1 %39 to i32\l  br label %42\l}"];
	Node0x49480b0 -> Node0x494abf0;
	Node0x4948140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%41:\l41:                                               \l  ret void\l}"];
	Node0x494abf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%42:\l42:                                               \l  %43 = phi i32 [ %13, %15 ], [ %57, %55 ]\l  br i1 %30, label %44, label %55\l|{<s0>T|<s1>F}}"];
	Node0x494abf0:s0 -> Node0x494ae30;
	Node0x494abf0:s1 -> Node0x494ad30;
	Node0x494ae30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%44:\l44:                                               \l  %45 = mul nsw i32 %43, %2\l  %46 = mul nsw i32 %43, %1\l  %47 = mul i32 %28, %45\l  %48 = load i32, i32 addrspace(4)* %32, align 8, !tbaa !16\l  %49 = udiv i32 %48, %36\l  %50 = mul i32 %49, %36\l  %51 = icmp ugt i32 %48, %50\l  %52 = zext i1 %51 to i32\l  %53 = add i32 %49, %52\l  %54 = mul i32 %53, %21\l  br label %59\l}"];
	Node0x494ae30 -> Node0x494b600;
	Node0x494ad30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%55:\l55:                                               \l  %56 = add i32 %37, %43\l  %57 = add i32 %56, %40\l  %58 = icmp slt i32 %57, %0\l  br i1 %58, label %42, label %41, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x494ad30:s0 -> Node0x494abf0;
	Node0x494ad30:s1 -> Node0x4948140;
	Node0x494b600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%59:\l59:                                               \l  %60 = phi i32 [ %27, %44 ], [ %109, %108 ]\l  %61 = freeze i32 %60\l  %62 = freeze i32 %28\l  %63 = sdiv i32 %61, %62\l  %64 = mul i32 %63, %62\l  %65 = sub i32 %61, %64\l  %66 = sdiv i32 %65, %4\l  %67 = add nsw i32 %63, %45\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %68\l  %70 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !19, !amdgpu.noclobber\l... !5\l  %71 = icmp sgt i32 %70, 0\l  br i1 %71, label %72, label %108\l|{<s0>T|<s1>F}}"];
	Node0x494b600:s0 -> Node0x494cb10;
	Node0x494b600:s1 -> Node0x494ba20;
	Node0x494cb10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%72:\l72:                                               \l  %73 = mul i32 %67, %5\l  %74 = sitofp i32 %70 to float\l  %75 = add nsw i32 %60, %47\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %11, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !23\l  %79 = and i32 %70, 1\l  %80 = icmp eq i32 %70, 1\l  br i1 %80, label %83, label %81\l|{<s0>T|<s1>F}}"];
	Node0x494cb10:s0 -> Node0x494d1b0;
	Node0x494cb10:s1 -> Node0x494d240;
	Node0x494d240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%81:\l81:                                               \l  %82 = and i32 %70, -2\l  br label %111\l}"];
	Node0x494d240 -> Node0x494d440;
	Node0x494d1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%83:\l83:                                               \l  %84 = phi float [ %78, %72 ], [ %155, %111 ]\l  %85 = phi i32 [ 0, %72 ], [ %156, %111 ]\l  %86 = icmp eq i32 %79, 0\l  br i1 %86, label %108, label %87\l|{<s0>T|<s1>F}}"];
	Node0x494d1b0:s0 -> Node0x494ba20;
	Node0x494d1b0:s1 -> Node0x494d790;
	Node0x494d790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%87:\l87:                                               \l  %88 = add nsw i32 %85, %73\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %89\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !19, !amdgpu.noclobber\l... !5\l  %92 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %89\l  %93 = load i32, i32 addrspace(1)* %92, align 4, !tbaa !19, !amdgpu.noclobber\l... !5\l  %94 = add i32 %91, %46\l  %95 = mul i32 %94, %3\l  %96 = add nsw i32 %95, %66\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %9, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !23\l  %100 = mul i32 %28, %93\l  %101 = add nsw i32 %100, %65\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %10, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !23\l  %105 = fmul contract float %99, %104\l  %106 = fdiv contract float %105, %74\l  %107 = fadd contract float %84, %106\l  store float %107, float addrspace(1)* %77, align 4, !tbaa !23\l  br label %108\l}"];
	Node0x494d790 -> Node0x494ba20;
	Node0x494ba20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%108:\l108:                                              \l  %109 = add i32 %54, %60\l  %110 = icmp slt i32 %109, %29\l  br i1 %110, label %59, label %55, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x494ba20:s0 -> Node0x494b600;
	Node0x494ba20:s1 -> Node0x494ad30;
	Node0x494d440 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%111:\l111:                                              \l  %112 = phi float [ %78, %81 ], [ %155, %111 ]\l  %113 = phi i32 [ 0, %81 ], [ %156, %111 ]\l  %114 = phi i32 [ 0, %81 ], [ %157, %111 ]\l  %115 = add nsw i32 %113, %73\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %116\l  %118 = load i32, i32 addrspace(1)* %117, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %119 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %116\l  %120 = load i32, i32 addrspace(1)* %119, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %121 = add i32 %118, %46\l  %122 = mul i32 %121, %3\l  %123 = add nsw i32 %122, %66\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %9, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !23\l  %127 = mul i32 %28, %120\l  %128 = add nsw i32 %127, %65\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %10, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !23\l  %132 = fmul contract float %126, %131\l  %133 = fdiv contract float %132, %74\l  %134 = fadd contract float %112, %133\l  store float %134, float addrspace(1)* %77, align 4, !tbaa !23\l  %135 = or i32 %113, 1\l  %136 = add nsw i32 %135, %73\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %137\l  %139 = load i32, i32 addrspace(1)* %138, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %140 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %137\l  %141 = load i32, i32 addrspace(1)* %140, align 4, !tbaa !19,\l... !amdgpu.noclobber !5\l  %142 = add i32 %139, %46\l  %143 = mul i32 %142, %3\l  %144 = add nsw i32 %143, %66\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %9, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !23\l  %148 = mul i32 %28, %141\l  %149 = add nsw i32 %148, %65\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %10, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !23\l  %153 = fmul contract float %147, %152\l  %154 = fdiv contract float %153, %74\l  %155 = fadd contract float %134, %154\l  store float %155, float addrspace(1)* %77, align 4, !tbaa !23\l  %156 = add nuw nsw i32 %113, 2\l  %157 = add i32 %114, 2\l  %158 = icmp eq i32 %157, %82\l  br i1 %158, label %83, label %111, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x494d440:s0 -> Node0x494d1b0;
	Node0x494d440:s1 -> Node0x494d440;
}
