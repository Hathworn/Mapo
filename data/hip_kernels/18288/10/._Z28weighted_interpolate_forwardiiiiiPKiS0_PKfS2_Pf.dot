digraph "CFG for '_Z28weighted_interpolate_forwardiiiiiPKiS0_PKfS2_Pf' function" {
	label="CFG for '_Z28weighted_interpolate_forwardiiiiiPKiS0_PKfS2_Pf' function";

	Node0x5425f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = icmp slt i32 %11, %0\l  br i1 %12, label %13, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5425f80:s0 -> Node0x5427080;
	Node0x5425f80:s1 -> Node0x5427110;
	Node0x5427080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%13:\l13:                                               \l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %15 = mul nsw i32 %3, %1\l  %16 = icmp slt i32 %14, %15\l  %17 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %18 = getelementptr i8, i8 addrspace(4)* %17, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %17, i64 12\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 4, !tbaa !5\l  %23 = load i16, i16 addrspace(4)* %19, align 4, !range !14, !invariant.load\l... !15\l  %24 = zext i16 %23 to i32\l  %25 = udiv i32 %22, %24\l  %26 = mul i32 %25, %24\l  %27 = icmp ugt i32 %22, %26\l  %28 = zext i1 %27 to i32\l  br label %30\l}"];
	Node0x5427080 -> Node0x54293c0;
	Node0x5427110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%29:\l29:                                               \l  ret void\l}"];
	Node0x54293c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%30:\l30:                                               \l  %31 = phi i32 [ %11, %13 ], [ %38, %36 ]\l  br i1 %16, label %32, label %36\l|{<s0>T|<s1>F}}"];
	Node0x54293c0:s0 -> Node0x5429610;
	Node0x54293c0:s1 -> Node0x5429510;
	Node0x5429610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%32:\l32:                                               \l  %33 = mul nsw i32 %31, %1\l  %34 = mul nsw i32 %31, %2\l  %35 = mul nsw i32 %33, %3\l  br label %40\l}"];
	Node0x5429610 -> Node0x5428180;
	Node0x5429510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%36:\l36:                                               \l  %37 = add i32 %25, %31\l  %38 = add i32 %37, %28\l  %39 = icmp slt i32 %38, %0\l  br i1 %39, label %30, label %29, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5429510:s0 -> Node0x54293c0;
	Node0x5429510:s1 -> Node0x5427110;
	Node0x5428180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%40:\l40:                                               \l  %41 = phi i32 [ %14, %32 ], [ %88, %87 ]\l  %42 = freeze i32 %41\l  %43 = freeze i32 %3\l  %44 = sdiv i32 %42, %43\l  %45 = mul i32 %44, %43\l  %46 = sub i32 %42, %45\l  %47 = add nsw i32 %44, %33\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %48\l  %50 = load i32, i32 addrspace(1)* %49, align 4, !tbaa !18, !amdgpu.noclobber\l... !15\l  %51 = icmp sgt i32 %50, 0\l  br i1 %51, label %52, label %87\l|{<s0>T|<s1>F}}"];
	Node0x5428180:s0 -> Node0x542ac10;
	Node0x5428180:s1 -> Node0x5429e10;
	Node0x542ac10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%52:\l52:                                               \l  %53 = mul i32 %47, %4\l  %54 = add nsw i32 %41, %35\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %9, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !22\l  %58 = and i32 %50, 3\l  %59 = icmp ult i32 %50, 4\l  br i1 %59, label %62, label %60\l|{<s0>T|<s1>F}}"];
	Node0x542ac10:s0 -> Node0x542b270;
	Node0x542ac10:s1 -> Node0x542b300;
	Node0x542b300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%60:\l60:                                               \l  %61 = and i32 %50, -4\l  br label %90\l}"];
	Node0x542b300 -> Node0x542b500;
	Node0x542b270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%62:\l62:                                               \l  %63 = phi float [ %57, %52 ], [ %152, %90 ]\l  %64 = phi i32 [ 0, %52 ], [ %153, %90 ]\l  %65 = icmp eq i32 %58, 0\l  br i1 %65, label %87, label %66\l|{<s0>T|<s1>F}}"];
	Node0x542b270:s0 -> Node0x5429e10;
	Node0x542b270:s1 -> Node0x54297e0;
	Node0x54297e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%66:\l66:                                               \l  %67 = phi float [ %83, %66 ], [ %63, %62 ]\l  %68 = phi i32 [ %84, %66 ], [ %64, %62 ]\l  %69 = phi i32 [ %85, %66 ], [ 0, %62 ]\l  %70 = add nsw i32 %68, %53\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %71\l  %73 = load i32, i32 addrspace(1)* %72, align 4, !tbaa !18, !amdgpu.noclobber\l... !15\l  %74 = getelementptr inbounds float, float addrspace(1)* %8, i64 %71\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !22\l  %76 = add i32 %73, %34\l  %77 = mul i32 %76, %3\l  %78 = add nsw i32 %77, %46\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %7, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !22\l  %82 = fmul contract float %75, %81\l  %83 = fadd contract float %67, %82\l  store float %83, float addrspace(1)* %56, align 4, !tbaa !22\l  %84 = add nuw nsw i32 %68, 1\l  %85 = add i32 %69, 1\l  %86 = icmp eq i32 %85, %58\l  br i1 %86, label %87, label %66, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x54297e0:s0 -> Node0x5429e10;
	Node0x54297e0:s1 -> Node0x54297e0;
	Node0x5429e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%87:\l87:                                               \l  %88 = add i32 %41, %24\l  %89 = icmp slt i32 %88, %15\l  br i1 %89, label %40, label %36, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5429e10:s0 -> Node0x5428180;
	Node0x5429e10:s1 -> Node0x5429510;
	Node0x542b500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%90:\l90:                                               \l  %91 = phi float [ %57, %60 ], [ %152, %90 ]\l  %92 = phi i32 [ 0, %60 ], [ %153, %90 ]\l  %93 = phi i32 [ 0, %60 ], [ %154, %90 ]\l  %94 = add nsw i32 %92, %53\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %95\l  %97 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !18, !amdgpu.noclobber\l... !15\l  %98 = getelementptr inbounds float, float addrspace(1)* %8, i64 %95\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !22\l  %100 = add i32 %97, %34\l  %101 = mul i32 %100, %3\l  %102 = add nsw i32 %101, %46\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %7, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !22\l  %106 = fmul contract float %99, %105\l  %107 = fadd contract float %91, %106\l  store float %107, float addrspace(1)* %56, align 4, !tbaa !22\l  %108 = or i32 %92, 1\l  %109 = add nsw i32 %108, %53\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %110\l  %112 = load i32, i32 addrspace(1)* %111, align 4, !tbaa !18,\l... !amdgpu.noclobber !15\l  %113 = getelementptr inbounds float, float addrspace(1)* %8, i64 %110\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !22\l  %115 = add i32 %112, %34\l  %116 = mul i32 %115, %3\l  %117 = add nsw i32 %116, %46\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %7, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !22\l  %121 = fmul contract float %114, %120\l  %122 = fadd contract float %107, %121\l  store float %122, float addrspace(1)* %56, align 4, !tbaa !22\l  %123 = or i32 %92, 2\l  %124 = add nsw i32 %123, %53\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %125\l  %127 = load i32, i32 addrspace(1)* %126, align 4, !tbaa !18,\l... !amdgpu.noclobber !15\l  %128 = getelementptr inbounds float, float addrspace(1)* %8, i64 %125\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !22\l  %130 = add i32 %127, %34\l  %131 = mul i32 %130, %3\l  %132 = add nsw i32 %131, %46\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %7, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !22\l  %136 = fmul contract float %129, %135\l  %137 = fadd contract float %122, %136\l  store float %137, float addrspace(1)* %56, align 4, !tbaa !22\l  %138 = or i32 %92, 3\l  %139 = add nsw i32 %138, %53\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %140\l  %142 = load i32, i32 addrspace(1)* %141, align 4, !tbaa !18,\l... !amdgpu.noclobber !15\l  %143 = getelementptr inbounds float, float addrspace(1)* %8, i64 %140\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !22\l  %145 = add i32 %142, %34\l  %146 = mul i32 %145, %3\l  %147 = add nsw i32 %146, %46\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %7, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !22\l  %151 = fmul contract float %144, %150\l  %152 = fadd contract float %137, %151\l  store float %152, float addrspace(1)* %56, align 4, !tbaa !22\l  %153 = add nuw nsw i32 %92, 4\l  %154 = add i32 %93, 4\l  %155 = icmp eq i32 %154, %61\l  br i1 %155, label %62, label %90, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x542b500:s0 -> Node0x542b270;
	Node0x542b500:s1 -> Node0x542b500;
}
