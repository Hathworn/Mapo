digraph "CFG for '_Z5sobelPhS_ii' function" {
	label="CFG for '_Z5sobelPhS_ii' function";

	Node0x5f07500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp slt i32 %21, %3\l  %23 = icmp slt i32 %13, %2\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %130\l|{<s0>T|<s1>F}}"];
	Node0x5f07500:s0 -> Node0x5f0afb0;
	Node0x5f07500:s1 -> Node0x5f0b040;
	Node0x5f0afb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%25:\l25:                                               \l  %26 = add nsw i32 %13, -1\l  %27 = add nsw i32 %21, -1\l  %28 = mul nsw i32 %27, %2\l  %29 = add nsw i32 %26, %28\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %30\l  %32 = load i8, i8 addrspace(1)* %31, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %33 = uitofp i8 %32 to float\l  %34 = fsub contract float 0.000000e+00, %33\l  %35 = add nsw i32 %13, %28\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %36\l  %38 = load i8, i8 addrspace(1)* %37, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %39 = uitofp i8 %38 to float\l  %40 = fmul contract float %39, -2.000000e+00\l  %41 = fadd contract float %34, %40\l  %42 = fmul contract float %39, 0.000000e+00\l  %43 = fadd contract float %34, %42\l  %44 = add nsw i32 %13, 1\l  %45 = add nsw i32 %44, %28\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %46\l  %48 = load i8, i8 addrspace(1)* %47, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %49 = uitofp i8 %48 to float\l  %50 = fsub contract float %41, %49\l  %51 = fadd contract float %43, %49\l  %52 = mul nsw i32 %21, %2\l  %53 = add nsw i32 %26, %52\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %54\l  %56 = load i8, i8 addrspace(1)* %55, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %57 = uitofp i8 %56 to float\l  %58 = fmul contract float %57, 0.000000e+00\l  %59 = fadd contract float %50, %58\l  %60 = fmul contract float %57, -2.000000e+00\l  %61 = fadd contract float %51, %60\l  %62 = add nsw i32 %13, %52\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %63\l  %65 = load i8, i8 addrspace(1)* %64, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %66 = uitofp i8 %65 to float\l  %67 = fmul contract float %66, 0.000000e+00\l  %68 = fadd contract float %59, %67\l  %69 = fadd contract float %61, %67\l  %70 = add nsw i32 %44, %52\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %71\l  %73 = load i8, i8 addrspace(1)* %72, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %74 = uitofp i8 %73 to float\l  %75 = fmul contract float %74, 0.000000e+00\l  %76 = fadd contract float %68, %75\l  %77 = fmul contract float %74, 2.000000e+00\l  %78 = fadd contract float %69, %77\l  %79 = add nsw i32 %21, 1\l  %80 = mul nsw i32 %79, %2\l  %81 = add nsw i32 %26, %80\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %82\l  %84 = load i8, i8 addrspace(1)* %83, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %85 = uitofp i8 %84 to float\l  %86 = fadd contract float %76, %85\l  %87 = fsub contract float %78, %85\l  %88 = add nsw i32 %13, %80\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %89\l  %91 = load i8, i8 addrspace(1)* %90, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %92 = uitofp i8 %91 to float\l  %93 = fmul contract float %92, 2.000000e+00\l  %94 = fadd contract float %86, %93\l  %95 = fmul contract float %92, 0.000000e+00\l  %96 = fadd contract float %87, %95\l  %97 = add nsw i32 %44, %80\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %98\l  %100 = load i8, i8 addrspace(1)* %99, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %101 = uitofp i8 %100 to float\l  %102 = fadd contract float %94, %101\l  %103 = fadd contract float %96, %101\l  %104 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %63\l  %105 = fmul contract float %102, %102\l  %106 = fmul contract float %103, %103\l  %107 = fadd contract float %106, %105\l  %108 = fcmp olt float %107, 0x39F0000000000000\l  %109 = select i1 %108, float 0x41F0000000000000, float 1.000000e+00\l  %110 = fmul float %107, %109\l  %111 = tail call float @llvm.sqrt.f32(float %110)\l  %112 = bitcast float %111 to i32\l  %113 = add nsw i32 %112, -1\l  %114 = bitcast i32 %113 to float\l  %115 = add nsw i32 %112, 1\l  %116 = bitcast i32 %115 to float\l  %117 = tail call i1 @llvm.amdgcn.class.f32(float %110, i32 608)\l  %118 = select i1 %108, float 0x3EF0000000000000, float 1.000000e+00\l  %119 = fneg float %116\l  %120 = tail call float @llvm.fma.f32(float %119, float %111, float %110)\l  %121 = fcmp ogt float %120, 0.000000e+00\l  %122 = fneg float %114\l  %123 = tail call float @llvm.fma.f32(float %122, float %111, float %110)\l  %124 = fcmp ole float %123, 0.000000e+00\l  %125 = select i1 %124, float %114, float %111\l  %126 = select i1 %121, float %116, float %125\l  %127 = fmul float %118, %126\l  %128 = select i1 %117, float %110, float %127\l  %129 = fptoui float %128 to i8\l  store i8 %129, i8 addrspace(1)* %104, align 1, !tbaa !7\l  br label %130\l}"];
	Node0x5f0afb0 -> Node0x5f0b040;
	Node0x5f0b040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%130:\l130:                                              \l  ret void\l}"];
}
