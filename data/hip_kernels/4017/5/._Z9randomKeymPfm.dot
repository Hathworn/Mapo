digraph "CFG for '_Z9randomKeymPfm' function" {
	label="CFG for '_Z9randomKeymPfm' function";

	Node0x4f97a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = sext i32 %13 to i64\l  %15 = icmp ult i64 %14, %0\l  br i1 %15, label %16, label %235\l|{<s0>T|<s1>F}}"];
	Node0x4f97a10:s0 -> Node0x4f9cd70;
	Node0x4f97a10:s1 -> Node0x4f9ce00;
	Node0x4f9cd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%16:\l16:                                               \l  %17 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %17) #3\l  %18 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %19 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %20 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %21 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %22 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %23 = trunc i64 %2 to i32\l  %24 = xor i32 %23, 746559103\l  %25 = lshr i64 %2, 32\l  %26 = trunc i64 %25 to i32\l  %27 = xor i32 %26, -1607034933\l  %28 = mul i32 %24, 1228688033\l  %29 = mul i32 %27, 2073658381\l  %30 = add i32 %28, 123456789\l  store i32 %30, i32 addrspace(5)* %18, align 8, !tbaa !7\l  %31 = xor i32 %28, 362436069\l  store i32 %31, i32 addrspace(5)* %19, align 4, !tbaa !7\l  %32 = add i32 %29, 521288629\l  store i32 %32, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %33 = xor i32 %29, 88675123\l  store i32 %33, i32 addrspace(5)* %21, align 4, !tbaa !7\l  %34 = add i32 %28, 5783321\l  store i32 %34, i32 addrspace(5)* %22, align 8, !tbaa !7\l  %35 = add i32 %28, 6615241\l  %36 = add i32 %35, %29\l  %37 = icmp eq i32 %13, 0\l  br i1 %37, label %219, label %38\l|{<s0>T|<s1>F}}"];
	Node0x4f9cd70:s0 -> Node0x4f9eca0;
	Node0x4f9cd70:s1 -> Node0x4f9ed30;
	Node0x4f9ed30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%38:\l38:                                               \l  %39 = phi i32 [ %49, %48 ], [ %34, %16 ]\l  %40 = phi i32 [ %50, %48 ], [ %30, %16 ]\l  %41 = phi i64 [ %52, %48 ], [ %14, %16 ]\l  %42 = phi i32 [ %51, %48 ], [ 0, %16 ]\l  %43 = trunc i64 %41 to i32\l  %44 = and i32 %43, 3\l  %45 = icmp eq i32 %44, 0\l  br i1 %45, label %48, label %46\l|{<s0>T|<s1>F}}"];
	Node0x4f9ed30:s0 -> Node0x4f9eea0;
	Node0x4f9ed30:s1 -> Node0x4f9f4d0;
	Node0x4f9f4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%46:\l46:                                               \l  %47 = zext i32 %42 to i64\l  br label %54\l}"];
	Node0x4f9f4d0 -> Node0x4f9f680;
	Node0x4f9eea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%48:\l48:                                               \l  %49 = phi i32 [ %39, %38 ], [ %213, %216 ]\l  %50 = phi i32 [ %40, %38 ], [ %189, %216 ]\l  %51 = add nuw nsw i32 %42, 1\l  %52 = lshr i64 %41, 2\l  %53 = icmp ult i64 %41, 4\l  br i1 %53, label %219, label %38, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4f9eea0:s0 -> Node0x4f9eca0;
	Node0x4f9eea0:s1 -> Node0x4f9ed30;
	Node0x4f9f680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%54:\l54:                                               \l  %55 = phi i32 [ 0, %46 ], [ %217, %216 ]\l  br label %56\l}"];
	Node0x4f9f680 -> Node0x4f9fcf0;
	Node0x4f9fcf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%56:\l56:                                               \l  %57 = phi i32 [ 0, %54 ], [ %189, %56 ]\l  %58 = phi i32 [ 0, %54 ], [ %195, %56 ]\l  %59 = phi i32 [ 0, %54 ], [ %201, %56 ]\l  %60 = phi i32 [ 0, %54 ], [ %207, %56 ]\l  %61 = phi i32 [ 0, %54 ], [ %213, %56 ]\l  %62 = phi i32 [ 0, %54 ], [ %214, %56 ]\l  %63 = lshr i32 %62, 5\l  %64 = and i32 %62, 28\l  %65 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %63\l  %66 = load i32, i32 addrspace(5)* %65, align 4, !tbaa !7\l  %67 = shl nuw i32 1, %64\l  %68 = and i32 %67, %66\l  %69 = icmp eq i32 %68, 0\l  %70 = mul nuw nsw i32 %62, 5\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %71\l  %73 = load i32, i32 addrspace(4)* %72, align 16, !tbaa !7\l  %74 = select i1 %69, i32 0, i32 %73\l  %75 = xor i32 %74, %57\l  %76 = or i32 %70, 1\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %77\l  %79 = load i32, i32 addrspace(4)* %78, align 4, !tbaa !7\l  %80 = select i1 %69, i32 0, i32 %79\l  %81 = xor i32 %80, %58\l  %82 = or i32 %70, 2\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %83\l  %85 = load i32, i32 addrspace(4)* %84, align 8, !tbaa !7\l  %86 = select i1 %69, i32 0, i32 %85\l  %87 = xor i32 %86, %59\l  %88 = or i32 %70, 3\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %89\l  %91 = load i32, i32 addrspace(4)* %90, align 4, !tbaa !7\l  %92 = select i1 %69, i32 0, i32 %91\l  %93 = xor i32 %92, %60\l  %94 = add nuw nsw i32 %70, 4\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %95\l  %97 = load i32, i32 addrspace(4)* %96, align 16, !tbaa !7\l  %98 = select i1 %69, i32 0, i32 %97\l  %99 = xor i32 %98, %61\l  %100 = or i32 %62, 1\l  %101 = lshr i32 %62, 5\l  %102 = and i32 %100, 29\l  %103 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %101\l  %104 = load i32, i32 addrspace(5)* %103, align 4, !tbaa !7\l  %105 = shl nuw i32 1, %102\l  %106 = and i32 %105, %104\l  %107 = icmp eq i32 %106, 0\l  %108 = mul nuw nsw i32 %100, 5\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %109\l  %111 = load i32, i32 addrspace(4)* %110, align 4, !tbaa !7\l  %112 = select i1 %107, i32 0, i32 %111\l  %113 = xor i32 %112, %75\l  %114 = add nuw nsw i32 %108, 1\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %115\l  %117 = load i32, i32 addrspace(4)* %116, align 8, !tbaa !7\l  %118 = select i1 %107, i32 0, i32 %117\l  %119 = xor i32 %118, %81\l  %120 = or i32 %108, 2\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %121\l  %123 = load i32, i32 addrspace(4)* %122, align 4, !tbaa !7\l  %124 = select i1 %107, i32 0, i32 %123\l  %125 = xor i32 %124, %87\l  %126 = add nuw nsw i32 %108, 3\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %127\l  %129 = load i32, i32 addrspace(4)* %128, align 16, !tbaa !7\l  %130 = select i1 %107, i32 0, i32 %129\l  %131 = xor i32 %130, %93\l  %132 = add nuw nsw i32 %108, 4\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %133\l  %135 = load i32, i32 addrspace(4)* %134, align 4, !tbaa !7\l  %136 = select i1 %107, i32 0, i32 %135\l  %137 = xor i32 %136, %99\l  %138 = or i32 %62, 2\l  %139 = lshr i32 %62, 5\l  %140 = and i32 %138, 30\l  %141 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %139\l  %142 = load i32, i32 addrspace(5)* %141, align 4, !tbaa !7\l  %143 = shl nuw i32 1, %140\l  %144 = and i32 %143, %142\l  %145 = icmp eq i32 %144, 0\l  %146 = mul nuw nsw i32 %138, 5\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %147\l  %149 = load i32, i32 addrspace(4)* %148, align 8, !tbaa !7\l  %150 = select i1 %145, i32 0, i32 %149\l  %151 = xor i32 %150, %113\l  %152 = or i32 %146, 1\l  %153 = zext i32 %152 to i64\l  %154 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %153\l  %155 = load i32, i32 addrspace(4)* %154, align 4, !tbaa !7\l  %156 = select i1 %145, i32 0, i32 %155\l  %157 = xor i32 %156, %119\l  %158 = add nuw nsw i32 %146, 2\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %159\l  %161 = load i32, i32 addrspace(4)* %160, align 16, !tbaa !7\l  %162 = select i1 %145, i32 0, i32 %161\l  %163 = xor i32 %162, %125\l  %164 = add nuw nsw i32 %146, 3\l  %165 = zext i32 %164 to i64\l  %166 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %165\l  %167 = load i32, i32 addrspace(4)* %166, align 4, !tbaa !7\l  %168 = select i1 %145, i32 0, i32 %167\l  %169 = xor i32 %168, %131\l  %170 = add nuw nsw i32 %146, 4\l  %171 = zext i32 %170 to i64\l  %172 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %171\l  %173 = load i32, i32 addrspace(4)* %172, align 8, !tbaa !7\l  %174 = select i1 %145, i32 0, i32 %173\l  %175 = xor i32 %174, %137\l  %176 = or i32 %62, 3\l  %177 = lshr i32 %62, 5\l  %178 = and i32 %176, 31\l  %179 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %177\l  %180 = load i32, i32 addrspace(5)* %179, align 4, !tbaa !7\l  %181 = shl nuw i32 1, %178\l  %182 = and i32 %181, %180\l  %183 = icmp eq i32 %182, 0\l  %184 = mul nuw nsw i32 %176, 5\l  %185 = zext i32 %184 to i64\l  %186 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %185\l  %187 = load i32, i32 addrspace(4)* %186, align 4, !tbaa !7\l  %188 = select i1 %183, i32 0, i32 %187\l  %189 = xor i32 %188, %151\l  %190 = add nuw nsw i32 %184, 1\l  %191 = zext i32 %190 to i64\l  %192 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %191\l  %193 = load i32, i32 addrspace(4)* %192, align 16, !tbaa !7\l  %194 = select i1 %183, i32 0, i32 %193\l  %195 = xor i32 %194, %157\l  %196 = add nuw nsw i32 %184, 2\l  %197 = zext i32 %196 to i64\l  %198 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %197\l  %199 = load i32, i32 addrspace(4)* %198, align 4, !tbaa !7\l  %200 = select i1 %183, i32 0, i32 %199\l  %201 = xor i32 %200, %163\l  %202 = add nuw nsw i32 %184, 3\l  %203 = zext i32 %202 to i64\l  %204 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %203\l  %205 = load i32, i32 addrspace(4)* %204, align 8, !tbaa !7\l  %206 = select i1 %183, i32 0, i32 %205\l  %207 = xor i32 %206, %169\l  %208 = add nuw nsw i32 %184, 4\l  %209 = zext i32 %208 to i64\l  %210 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %47, i64 %209\l  %211 = load i32, i32 addrspace(4)* %210, align 4, !tbaa !7\l  %212 = select i1 %183, i32 0, i32 %211\l  %213 = xor i32 %212, %175\l  %214 = add nuw nsw i32 %62, 4\l  %215 = icmp eq i32 %214, 160\l  br i1 %215, label %216, label %56, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4f9fcf0:s0 -> Node0x4f9f770;
	Node0x4f9fcf0:s1 -> Node0x4f9fcf0;
	Node0x4f9f770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%216:\l216:                                              \l  store i32 %189, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 %195, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 %201, i32 addrspace(5)* %20, align 8, !tbaa !7\l  store i32 %207, i32 addrspace(5)* %21, align 4, !tbaa !7\l  store i32 %213, i32 addrspace(5)* %22, align 8, !tbaa !7\l  %217 = add nuw nsw i32 %55, 1\l  %218 = icmp eq i32 %217, %44\l  br i1 %218, label %48, label %54, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4f9f770:s0 -> Node0x4f9eea0;
	Node0x4f9f770:s1 -> Node0x4f9f680;
	Node0x4f9eca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%219:\l219:                                              \l  %220 = phi i32 [ %34, %16 ], [ %49, %48 ]\l  %221 = phi i32 [ %30, %16 ], [ %50, %48 ]\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %17) #3\l  %222 = lshr i32 %221, 2\l  %223 = xor i32 %222, %221\l  %224 = shl i32 %220, 4\l  %225 = shl i32 %223, 1\l  %226 = xor i32 %224, %225\l  %227 = xor i32 %226, %220\l  %228 = xor i32 %227, %223\l  %229 = add i32 %36, 362437\l  %230 = add i32 %229, %228\l  %231 = uitofp i32 %230 to float\l  %232 = fmul contract float %231, 0x3DF0000000000000\l  %233 = fadd contract float %232, 0x3DF0000000000000\l  %234 = getelementptr inbounds float, float addrspace(1)* %1, i64 %14\l  store float %233, float addrspace(1)* %234, align 4, !tbaa !15\l  br label %235\l}"];
	Node0x4f9eca0 -> Node0x4f9ce00;
	Node0x4f9ce00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%235:\l235:                                              \l  ret void\l}"];
}
