digraph "CFG for '_Z17vector_max_kernelPfS_i' function" {
	label="CFG for '_Z17vector_max_kernelPfS_i' function";

	Node0x63f4630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %7 = bitcast i8 addrspace(4)* %6 to i32 addrspace(4)*\l  %8 = load i32, i32 addrspace(4)* %7, align 4, !tbaa !4\l  %9 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !13, !invariant.load\l... !14\l  %12 = zext i16 %11 to i32\l  %13 = udiv i32 %8, %12\l  %14 = mul i32 %13, %12\l  %15 = icmp ugt i32 %8, %14\l  %16 = zext i1 %15 to i32\l  %17 = add i32 %13, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = mul i32 %17, %18\l  %20 = add i32 %19, %4\l  %21 = mul i32 %20, %12\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %22\l  %24 = icmp eq i32 %22, 0\l  br i1 %24, label %25, label %125\l|{<s0>T|<s1>F}}"];
	Node0x63f4630:s0 -> Node0x63f6e90;
	Node0x63f4630:s1 -> Node0x63f6f20;
	Node0x63f6e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%25:\l25:                                               \l  %26 = add nsw i32 %23, 256\l  %27 = icmp sgt i32 %26, %2\l  %28 = sub nsw i32 %2, %23\l  %29 = select i1 %27, i32 %28, i32 256\l  %30 = sext i32 %23 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %33 = icmp sgt i32 %29, 1\l  br i1 %33, label %34, label %59\l|{<s0>T|<s1>F}}"];
	Node0x63f6e90:s0 -> Node0x63f6660;
	Node0x63f6e90:s1 -> Node0x63f7e80;
	Node0x63f6660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = add i32 %29, -1\l  %36 = add i32 %29, -2\l  %37 = and i32 %35, 7\l  %38 = icmp ult i32 %36, 7\l  br i1 %38, label %41, label %39\l|{<s0>T|<s1>F}}"];
	Node0x63f6660:s0 -> Node0x63f8260;
	Node0x63f6660:s1 -> Node0x63f82b0;
	Node0x63f82b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%39:\l39:                                               \l  %40 = and i32 %35, -8\l  br label %63\l}"];
	Node0x63f82b0 -> Node0x63f84b0;
	Node0x63f8260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = phi float [ undef, %34 ], [ %121, %63 ]\l  %43 = phi i32 [ 1, %34 ], [ %122, %63 ]\l  %44 = phi float [ %32, %34 ], [ %121, %63 ]\l  %45 = icmp eq i32 %37, 0\l  br i1 %45, label %59, label %46\l|{<s0>T|<s1>F}}"];
	Node0x63f8260:s0 -> Node0x63f7e80;
	Node0x63f8260:s1 -> Node0x63f8cd0;
	Node0x63f8cd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi i32 [ %56, %46 ], [ %43, %41 ]\l  %48 = phi float [ %55, %46 ], [ %44, %41 ]\l  %49 = phi i32 [ %57, %46 ], [ 0, %41 ]\l  %50 = add nsw i32 %47, %23\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %54 = fcmp contract olt float %48, %53\l  %55 = select i1 %54, float %53, float %48\l  %56 = add nuw nsw i32 %47, 1\l  %57 = add i32 %49, 1\l  %58 = icmp eq i32 %57, %37\l  br i1 %58, label %59, label %46, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x63f8cd0:s0 -> Node0x63f7e80;
	Node0x63f8cd0:s1 -> Node0x63f8cd0;
	Node0x63f7e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%59:\l59:                                               \l  %60 = phi float [ %32, %25 ], [ %42, %41 ], [ %55, %46 ]\l  %61 = sext i32 %20 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  store float %60, float addrspace(1)* %62, align 4, !tbaa !16\l  br label %125\l}"];
	Node0x63f7e80 -> Node0x63f6f20;
	Node0x63f84b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%63:\l63:                                               \l  %64 = phi i32 [ 1, %39 ], [ %122, %63 ]\l  %65 = phi float [ %32, %39 ], [ %121, %63 ]\l  %66 = phi i32 [ 0, %39 ], [ %123, %63 ]\l  %67 = add nsw i32 %64, %23\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %71 = fcmp contract olt float %65, %70\l  %72 = select i1 %71, float %70, float %65\l  %73 = add nuw nsw i32 %64, 1\l  %74 = add nsw i32 %73, %23\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %78 = fcmp contract olt float %72, %77\l  %79 = select i1 %78, float %77, float %72\l  %80 = add nuw nsw i32 %64, 2\l  %81 = add nsw i32 %80, %23\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %85 = fcmp contract olt float %79, %84\l  %86 = select i1 %85, float %84, float %79\l  %87 = add nuw nsw i32 %64, 3\l  %88 = add nsw i32 %87, %23\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %92 = fcmp contract olt float %86, %91\l  %93 = select i1 %92, float %91, float %86\l  %94 = add nuw nsw i32 %64, 4\l  %95 = add nsw i32 %94, %23\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %99 = fcmp contract olt float %93, %98\l  %100 = select i1 %99, float %98, float %93\l  %101 = add nuw nsw i32 %64, 5\l  %102 = add nsw i32 %101, %23\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %106 = fcmp contract olt float %100, %105\l  %107 = select i1 %106, float %105, float %100\l  %108 = add nuw nsw i32 %64, 6\l  %109 = add nsw i32 %108, %23\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %113 = fcmp contract olt float %107, %112\l  %114 = select i1 %113, float %112, float %107\l  %115 = add nuw nsw i32 %64, 7\l  %116 = add nsw i32 %115, %23\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %120 = fcmp contract olt float %114, %119\l  %121 = select i1 %120, float %119, float %114\l  %122 = add nuw nsw i32 %64, 8\l  %123 = add i32 %66, 8\l  %124 = icmp eq i32 %123, %40\l  br i1 %124, label %41, label %63, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x63f84b0:s0 -> Node0x63f8260;
	Node0x63f84b0:s1 -> Node0x63f84b0;
	Node0x63f6f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%125:\l125:                                              \l  ret void\l}"];
}
