digraph "CFG for '_Z11kernelGradfPKfPfS1_S1_m' function" {
	label="CFG for '_Z11kernelGradfPKfPfS1_S1_m' function";

	Node0x5c096b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = zext i32 %14 to i64\l  %16 = icmp ult i64 %15, %4\l  br i1 %16, label %17, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5c096b0:s0 -> Node0x5c0a1a0;
	Node0x5c096b0:s1 -> Node0x5c0b6f0;
	Node0x5c0a1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = getelementptr inbounds float, float addrspace(1)* %1, i64 %15\l  store float 0.000000e+00, float addrspace(1)* %18, align 4, !tbaa !7\l  %19 = mul i64 %15, %4\l  %20 = and i64 %4, 7\l  %21 = icmp ult i64 %4, 8\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x5c0a1a0:s0 -> Node0x5c0c690;
	Node0x5c0a1a0:s1 -> Node0x5c0c720;
	Node0x5c0c720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i64 %4, -8\l  br label %49\l}"];
	Node0x5c0c720 -> Node0x5c0c920;
	Node0x5c0c690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi float [ undef, %17 ], [ %115, %49 ]\l  %26 = phi float [ 0.000000e+00, %17 ], [ %115, %49 ]\l  %27 = phi i64 [ 0, %17 ], [ %116, %49 ]\l  %28 = icmp eq i64 %20, 0\l  br i1 %28, label %43, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5c0c690:s0 -> Node0x5c0d170;
	Node0x5c0c690:s1 -> Node0x5c0d200;
	Node0x5c0d200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi float [ %39, %29 ], [ %26, %24 ]\l  %31 = phi i64 [ %40, %29 ], [ %27, %24 ]\l  %32 = phi i64 [ %41, %29 ], [ 0, %24 ]\l  %33 = add i64 %31, %19\l  %34 = getelementptr inbounds float, float addrspace(1)* %2, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %31\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !7\l  %38 = fmul contract float %35, %37\l  %39 = fadd contract float %30, %38\l  store float %39, float addrspace(1)* %18, align 4, !tbaa !7\l  %40 = add nuw i64 %31, 1\l  %41 = add i64 %32, 1\l  %42 = icmp eq i64 %41, %20\l  br i1 %42, label %43, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5c0d200:s0 -> Node0x5c0d170;
	Node0x5c0d200:s1 -> Node0x5c0d200;
	Node0x5c0d170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%43:\l43:                                               \l  %44 = phi float [ %25, %24 ], [ %39, %29 ]\l  %45 = fmul contract float %44, 2.000000e+00\l  store float %45, float addrspace(1)* %18, align 4, !tbaa !7\l  %46 = getelementptr inbounds float, float addrspace(1)* %3, i64 %15\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7\l  %48 = fadd contract float %45, %47\l  store float %48, float addrspace(1)* %18, align 4, !tbaa !7\l  br label %119\l}"];
	Node0x5c0d170 -> Node0x5c0b6f0;
	Node0x5c0c920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%49:\l49:                                               \l  %50 = phi float [ 0.000000e+00, %22 ], [ %115, %49 ]\l  %51 = phi i64 [ 0, %22 ], [ %116, %49 ]\l  %52 = phi i64 [ 0, %22 ], [ %117, %49 ]\l  %53 = add i64 %51, %19\l  %54 = getelementptr inbounds float, float addrspace(1)* %2, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7\l  %58 = fmul contract float %55, %57\l  %59 = fadd contract float %50, %58\l  store float %59, float addrspace(1)* %18, align 4, !tbaa !7\l  %60 = or i64 %51, 1\l  %61 = add i64 %60, %19\l  %62 = getelementptr inbounds float, float addrspace(1)* %2, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7\l  %66 = fmul contract float %63, %65\l  %67 = fadd contract float %59, %66\l  store float %67, float addrspace(1)* %18, align 4, !tbaa !7\l  %68 = or i64 %51, 2\l  %69 = add i64 %68, %19\l  %70 = getelementptr inbounds float, float addrspace(1)* %2, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7\l  %74 = fmul contract float %71, %73\l  %75 = fadd contract float %67, %74\l  store float %75, float addrspace(1)* %18, align 4, !tbaa !7\l  %76 = or i64 %51, 3\l  %77 = add i64 %76, %19\l  %78 = getelementptr inbounds float, float addrspace(1)* %2, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7\l  %82 = fmul contract float %79, %81\l  %83 = fadd contract float %75, %82\l  store float %83, float addrspace(1)* %18, align 4, !tbaa !7\l  %84 = or i64 %51, 4\l  %85 = add i64 %84, %19\l  %86 = getelementptr inbounds float, float addrspace(1)* %2, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7\l  %90 = fmul contract float %87, %89\l  %91 = fadd contract float %83, %90\l  store float %91, float addrspace(1)* %18, align 4, !tbaa !7\l  %92 = or i64 %51, 5\l  %93 = add i64 %92, %19\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7\l  %98 = fmul contract float %95, %97\l  %99 = fadd contract float %91, %98\l  store float %99, float addrspace(1)* %18, align 4, !tbaa !7\l  %100 = or i64 %51, 6\l  %101 = add i64 %100, %19\l  %102 = getelementptr inbounds float, float addrspace(1)* %2, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7\l  %106 = fmul contract float %103, %105\l  %107 = fadd contract float %99, %106\l  store float %107, float addrspace(1)* %18, align 4, !tbaa !7\l  %108 = or i64 %51, 7\l  %109 = add i64 %108, %19\l  %110 = getelementptr inbounds float, float addrspace(1)* %2, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7\l  %114 = fmul contract float %111, %113\l  %115 = fadd contract float %107, %114\l  store float %115, float addrspace(1)* %18, align 4, !tbaa !7\l  %116 = add nuw i64 %51, 8\l  %117 = add i64 %52, 8\l  %118 = icmp eq i64 %117, %23\l  br i1 %118, label %24, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5c0c920:s0 -> Node0x5c0c690;
	Node0x5c0c920:s1 -> Node0x5c0c920;
	Node0x5c0b6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%119:\l119:                                              \l  ret void\l}"];
}
