digraph "CFG for '_Z8sinewavePfjjf' function" {
	label="CFG for '_Z8sinewavePfjjf' function";

	Node0x54d0410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %7 = bitcast i8 addrspace(4)* %6 to i32 addrspace(4)*\l  %8 = load i32, i32 addrspace(4)* %7, align 4, !tbaa !4\l  %9 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !13, !invariant.load\l... !14\l  %12 = zext i16 %11 to i32\l  %13 = udiv i32 %8, %12\l  %14 = mul i32 %13, %12\l  %15 = icmp ugt i32 %8, %14\l  %16 = zext i1 %15 to i32\l  %17 = add i32 %13, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = mul i32 %18, %12\l  %20 = mul i32 %17, %12\l  %21 = zext i32 %20 to i64\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %19, %22\l  %24 = mul i32 %2, %1\l  %25 = zext i32 %24 to i64\l  %26 = icmp ult i32 %23, %24\l  br i1 %26, label %27, label %32\l|{<s0>T|<s1>F}}"];
	Node0x54d0410:s0 -> Node0x54d2b10;
	Node0x54d0410:s1 -> Node0x54d2ba0;
	Node0x54d2b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%27:\l27:                                               \l  %28 = zext i32 %23 to i64\l  %29 = zext i32 %1 to i64\l  %30 = uitofp i32 %1 to float\l  %31 = uitofp i32 %2 to float\l  br label %33\l}"];
	Node0x54d2b10 -> Node0x54d2ea0;
	Node0x54d2ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%32:\l32:                                               \l  ret void\l}"];
	Node0x54d2ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  %34 = phi i64 [ %28, %27 ], [ %333, %308 ]\l  %35 = udiv i64 %34, %29\l  %36 = mul i64 %35, %29\l  %37 = sub nuw i64 %34, %36\l  %38 = uitofp i64 %37 to float\l  %39 = fmul contract float %38, 2.000000e+00\l  %40 = fdiv contract float %39, %30\l  %41 = fadd contract float %40, -1.000000e+00\l  %42 = uitofp i64 %35 to float\l  %43 = fmul contract float %42, 2.000000e+00\l  %44 = fdiv contract float %43, %31\l  %45 = fadd contract float %44, -1.000000e+00\l  %46 = fmul contract float %41, 4.000000e+00\l  %47 = fadd contract float %46, %3\l  %48 = tail call float @llvm.fabs.f32(float %47)\l  %49 = fcmp olt float %48, 1.310720e+05\l  br i1 %49, label %50, label %58\l|{<s0>T|<s1>F}}"];
	Node0x54d2ea0:s0 -> Node0x54d4670;
	Node0x54d2ea0:s1 -> Node0x54d4700;
	Node0x54d4670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%50:\l50:                                               \l  %51 = fmul float %48, 0x3FE45F3060000000\l  %52 = tail call float @llvm.rint.f32(float %51)\l  %53 = tail call float @llvm.fma.f32(float %52, float 0xBFF921FB40000000,\l... float %48)\l  %54 = tail call float @llvm.fma.f32(float %52, float 0xBE74442D00000000,\l... float %53)\l  %55 = tail call float @llvm.fma.f32(float %52, float 0xBCF8469880000000,\l... float %54)\l  %56 = fptosi float %52 to i32\l  %57 = bitcast float %48 to i32\l  br label %164\l}"];
	Node0x54d4670 -> Node0x54d51b0;
	Node0x54d4700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%58:\l58:                                               \l  %59 = bitcast float %48 to i32\l  %60 = lshr i32 %59, 23\l  %61 = and i32 %59, 8388607\l  %62 = or i32 %61, 8388608\l  %63 = zext i32 %62 to i64\l  %64 = mul nuw nsw i64 %63, 4266746795\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %63, 1011060801\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %63, 3680671129\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = mul nuw nsw i64 %63, 4113882560\l  %76 = add nuw nsw i64 %74, %75\l  %77 = trunc i64 %76 to i32\l  %78 = lshr i64 %76, 32\l  %79 = mul nuw nsw i64 %63, 4230436817\l  %80 = add nuw nsw i64 %78, %79\l  %81 = trunc i64 %80 to i32\l  %82 = lshr i64 %80, 32\l  %83 = mul nuw nsw i64 %63, 1313084713\l  %84 = add nuw nsw i64 %82, %83\l  %85 = trunc i64 %84 to i32\l  %86 = lshr i64 %84, 32\l  %87 = mul nuw nsw i64 %63, 2734261102\l  %88 = add nuw nsw i64 %86, %87\l  %89 = trunc i64 %88 to i32\l  %90 = lshr i64 %88, 32\l  %91 = trunc i64 %90 to i32\l  %92 = add nsw i32 %60, -120\l  %93 = icmp ugt i32 %92, 63\l  %94 = select i1 %93, i32 %85, i32 %91\l  %95 = select i1 %93, i32 %81, i32 %89\l  %96 = select i1 %93, i32 %77, i32 %85\l  %97 = select i1 %93, i32 %73, i32 %81\l  %98 = select i1 %93, i32 %69, i32 %77\l  %99 = select i1 %93, i32 %65, i32 %73\l  %100 = select i1 %93, i32 -64, i32 0\l  %101 = add nsw i32 %100, %92\l  %102 = icmp ugt i32 %101, 31\l  %103 = select i1 %102, i32 %95, i32 %94\l  %104 = select i1 %102, i32 %96, i32 %95\l  %105 = select i1 %102, i32 %97, i32 %96\l  %106 = select i1 %102, i32 %98, i32 %97\l  %107 = select i1 %102, i32 %99, i32 %98\l  %108 = select i1 %102, i32 -32, i32 0\l  %109 = add nsw i32 %108, %101\l  %110 = icmp ugt i32 %109, 31\l  %111 = select i1 %110, i32 %104, i32 %103\l  %112 = select i1 %110, i32 %105, i32 %104\l  %113 = select i1 %110, i32 %106, i32 %105\l  %114 = select i1 %110, i32 %107, i32 %106\l  %115 = select i1 %110, i32 -32, i32 0\l  %116 = add nsw i32 %115, %109\l  %117 = icmp eq i32 %116, 0\l  %118 = sub nsw i32 32, %116\l  %119 = tail call i32 @llvm.fshr.i32(i32 %111, i32 %112, i32 %118)\l  %120 = tail call i32 @llvm.fshr.i32(i32 %112, i32 %113, i32 %118)\l  %121 = tail call i32 @llvm.fshr.i32(i32 %113, i32 %114, i32 %118)\l  %122 = select i1 %117, i32 %111, i32 %119\l  %123 = select i1 %117, i32 %112, i32 %120\l  %124 = select i1 %117, i32 %113, i32 %121\l  %125 = lshr i32 %122, 29\l  %126 = tail call i32 @llvm.fshl.i32(i32 %122, i32 %123, i32 2)\l  %127 = tail call i32 @llvm.fshl.i32(i32 %123, i32 %124, i32 2)\l  %128 = tail call i32 @llvm.fshl.i32(i32 %124, i32 %114, i32 2)\l  %129 = and i32 %125, 1\l  %130 = sub nsw i32 0, %129\l  %131 = shl i32 %125, 31\l  %132 = xor i32 %126, %130\l  %133 = xor i32 %127, %130\l  %134 = xor i32 %128, %130\l  %135 = tail call i32 @llvm.ctlz.i32(i32 %132, i1 false), !range !16\l  %136 = sub nsw i32 31, %135\l  %137 = tail call i32 @llvm.fshr.i32(i32 %132, i32 %133, i32 %136)\l  %138 = tail call i32 @llvm.fshr.i32(i32 %133, i32 %134, i32 %136)\l  %139 = shl nuw nsw i32 %135, 23\l  %140 = sub nuw nsw i32 1056964608, %139\l  %141 = lshr i32 %137, 9\l  %142 = or i32 %141, %140\l  %143 = or i32 %142, %131\l  %144 = bitcast i32 %143 to float\l  %145 = tail call i32 @llvm.fshl.i32(i32 %137, i32 %138, i32 23)\l  %146 = tail call i32 @llvm.ctlz.i32(i32 %145, i1 false), !range !16\l  %147 = fmul float %144, 0x3FF921FB40000000\l  %148 = add nuw nsw i32 %146, %135\l  %149 = shl nuw nsw i32 %148, 23\l  %150 = sub nuw nsw i32 855638016, %149\l  %151 = sub nsw i32 31, %146\l  %152 = tail call i32 @llvm.fshr.i32(i32 %145, i32 %138, i32 %151)\l  %153 = lshr i32 %152, 9\l  %154 = or i32 %150, %153\l  %155 = or i32 %154, %131\l  %156 = bitcast i32 %155 to float\l  %157 = fneg float %147\l  %158 = tail call float @llvm.fma.f32(float %144, float 0x3FF921FB40000000,\l... float %157)\l  %159 = tail call float @llvm.fma.f32(float %144, float 0x3E74442D00000000,\l... float %158)\l  %160 = tail call float @llvm.fma.f32(float %156, float 0x3FF921FB40000000,\l... float %159)\l  %161 = fadd float %147, %160\l  %162 = lshr i32 %122, 30\l  %163 = add nuw nsw i32 %129, %162\l  br label %164\l}"];
	Node0x54d4700 -> Node0x54d51b0;
	Node0x54d51b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%164:\l164:                                              \l  %165 = phi i32 [ %57, %50 ], [ %59, %58 ]\l  %166 = phi float [ %55, %50 ], [ %161, %58 ]\l  %167 = phi i32 [ %56, %50 ], [ %163, %58 ]\l  %168 = fmul float %166, %166\l  %169 = tail call float @llvm.fmuladd.f32(float %168, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %170 = tail call float @llvm.fmuladd.f32(float %168, float %169, float\l... 0xBFC55553A0000000)\l  %171 = fmul float %168, %170\l  %172 = tail call float @llvm.fmuladd.f32(float %166, float %171, float %166)\l  %173 = tail call float @llvm.fmuladd.f32(float %168, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %174 = tail call float @llvm.fmuladd.f32(float %168, float %173, float\l... 0x3FA5557EE0000000)\l  %175 = tail call float @llvm.fmuladd.f32(float %168, float %174, float\l... 0xBFE0000080000000)\l  %176 = tail call float @llvm.fmuladd.f32(float %168, float %175, float\l... 1.000000e+00)\l  %177 = and i32 %167, 1\l  %178 = icmp eq i32 %177, 0\l  %179 = select i1 %178, float %172, float %176\l  %180 = bitcast float %179 to i32\l  %181 = shl i32 %167, 30\l  %182 = and i32 %181, -2147483648\l  %183 = bitcast float %47 to i32\l  %184 = xor i32 %165, %183\l  %185 = xor i32 %184, %182\l  %186 = xor i32 %185, %180\l  %187 = bitcast i32 %186 to float\l  %188 = tail call i1 @llvm.amdgcn.class.f32(float %48, i32 504)\l  %189 = fmul contract float %187, 5.000000e-01\l  %190 = select i1 %188, float %189, float 0x7FF8000000000000\l  %191 = fmul contract float %45, 4.000000e+00\l  %192 = fadd contract float %191, %3\l  %193 = tail call float @llvm.fabs.f32(float %192)\l  %194 = fcmp olt float %193, 1.310720e+05\l  br i1 %194, label %195, label %202\l|{<s0>T|<s1>F}}"];
	Node0x54d51b0:s0 -> Node0x54dca30;
	Node0x54d51b0:s1 -> Node0x54dcac0;
	Node0x54dca30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%195:\l195:                                              \l  %196 = fmul float %193, 0x3FE45F3060000000\l  %197 = tail call float @llvm.rint.f32(float %196)\l  %198 = tail call float @llvm.fma.f32(float %197, float 0xBFF921FB40000000,\l... float %193)\l  %199 = tail call float @llvm.fma.f32(float %197, float 0xBE74442D00000000,\l... float %198)\l  %200 = tail call float @llvm.fma.f32(float %197, float 0xBCF8469880000000,\l... float %199)\l  %201 = fptosi float %197 to i32\l  br label %308\l}"];
	Node0x54dca30 -> Node0x54d21c0;
	Node0x54dcac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%202:\l202:                                              \l  %203 = bitcast float %193 to i32\l  %204 = lshr i32 %203, 23\l  %205 = and i32 %203, 8388607\l  %206 = or i32 %205, 8388608\l  %207 = zext i32 %206 to i64\l  %208 = mul nuw nsw i64 %207, 4266746795\l  %209 = trunc i64 %208 to i32\l  %210 = lshr i64 %208, 32\l  %211 = mul nuw nsw i64 %207, 1011060801\l  %212 = add nuw nsw i64 %210, %211\l  %213 = trunc i64 %212 to i32\l  %214 = lshr i64 %212, 32\l  %215 = mul nuw nsw i64 %207, 3680671129\l  %216 = add nuw nsw i64 %214, %215\l  %217 = trunc i64 %216 to i32\l  %218 = lshr i64 %216, 32\l  %219 = mul nuw nsw i64 %207, 4113882560\l  %220 = add nuw nsw i64 %218, %219\l  %221 = trunc i64 %220 to i32\l  %222 = lshr i64 %220, 32\l  %223 = mul nuw nsw i64 %207, 4230436817\l  %224 = add nuw nsw i64 %222, %223\l  %225 = trunc i64 %224 to i32\l  %226 = lshr i64 %224, 32\l  %227 = mul nuw nsw i64 %207, 1313084713\l  %228 = add nuw nsw i64 %226, %227\l  %229 = trunc i64 %228 to i32\l  %230 = lshr i64 %228, 32\l  %231 = mul nuw nsw i64 %207, 2734261102\l  %232 = add nuw nsw i64 %230, %231\l  %233 = trunc i64 %232 to i32\l  %234 = lshr i64 %232, 32\l  %235 = trunc i64 %234 to i32\l  %236 = add nsw i32 %204, -120\l  %237 = icmp ugt i32 %236, 63\l  %238 = select i1 %237, i32 %229, i32 %235\l  %239 = select i1 %237, i32 %225, i32 %233\l  %240 = select i1 %237, i32 %221, i32 %229\l  %241 = select i1 %237, i32 %217, i32 %225\l  %242 = select i1 %237, i32 %213, i32 %221\l  %243 = select i1 %237, i32 %209, i32 %217\l  %244 = select i1 %237, i32 -64, i32 0\l  %245 = add nsw i32 %244, %236\l  %246 = icmp ugt i32 %245, 31\l  %247 = select i1 %246, i32 %239, i32 %238\l  %248 = select i1 %246, i32 %240, i32 %239\l  %249 = select i1 %246, i32 %241, i32 %240\l  %250 = select i1 %246, i32 %242, i32 %241\l  %251 = select i1 %246, i32 %243, i32 %242\l  %252 = select i1 %246, i32 -32, i32 0\l  %253 = add nsw i32 %252, %245\l  %254 = icmp ugt i32 %253, 31\l  %255 = select i1 %254, i32 %248, i32 %247\l  %256 = select i1 %254, i32 %249, i32 %248\l  %257 = select i1 %254, i32 %250, i32 %249\l  %258 = select i1 %254, i32 %251, i32 %250\l  %259 = select i1 %254, i32 -32, i32 0\l  %260 = add nsw i32 %259, %253\l  %261 = icmp eq i32 %260, 0\l  %262 = sub nsw i32 32, %260\l  %263 = tail call i32 @llvm.fshr.i32(i32 %255, i32 %256, i32 %262)\l  %264 = tail call i32 @llvm.fshr.i32(i32 %256, i32 %257, i32 %262)\l  %265 = tail call i32 @llvm.fshr.i32(i32 %257, i32 %258, i32 %262)\l  %266 = select i1 %261, i32 %255, i32 %263\l  %267 = select i1 %261, i32 %256, i32 %264\l  %268 = select i1 %261, i32 %257, i32 %265\l  %269 = lshr i32 %266, 29\l  %270 = tail call i32 @llvm.fshl.i32(i32 %266, i32 %267, i32 2)\l  %271 = tail call i32 @llvm.fshl.i32(i32 %267, i32 %268, i32 2)\l  %272 = tail call i32 @llvm.fshl.i32(i32 %268, i32 %258, i32 2)\l  %273 = and i32 %269, 1\l  %274 = sub nsw i32 0, %273\l  %275 = shl i32 %269, 31\l  %276 = xor i32 %270, %274\l  %277 = xor i32 %271, %274\l  %278 = xor i32 %272, %274\l  %279 = tail call i32 @llvm.ctlz.i32(i32 %276, i1 false), !range !16\l  %280 = sub nsw i32 31, %279\l  %281 = tail call i32 @llvm.fshr.i32(i32 %276, i32 %277, i32 %280)\l  %282 = tail call i32 @llvm.fshr.i32(i32 %277, i32 %278, i32 %280)\l  %283 = shl nuw nsw i32 %279, 23\l  %284 = sub nuw nsw i32 1056964608, %283\l  %285 = lshr i32 %281, 9\l  %286 = or i32 %285, %284\l  %287 = or i32 %286, %275\l  %288 = bitcast i32 %287 to float\l  %289 = tail call i32 @llvm.fshl.i32(i32 %281, i32 %282, i32 23)\l  %290 = tail call i32 @llvm.ctlz.i32(i32 %289, i1 false), !range !16\l  %291 = fmul float %288, 0x3FF921FB40000000\l  %292 = add nuw nsw i32 %290, %279\l  %293 = shl nuw nsw i32 %292, 23\l  %294 = sub nuw nsw i32 855638016, %293\l  %295 = sub nsw i32 31, %290\l  %296 = tail call i32 @llvm.fshr.i32(i32 %289, i32 %282, i32 %295)\l  %297 = lshr i32 %296, 9\l  %298 = or i32 %294, %297\l  %299 = or i32 %298, %275\l  %300 = bitcast i32 %299 to float\l  %301 = fneg float %291\l  %302 = tail call float @llvm.fma.f32(float %288, float 0x3FF921FB40000000,\l... float %301)\l  %303 = tail call float @llvm.fma.f32(float %288, float 0x3E74442D00000000,\l... float %302)\l  %304 = tail call float @llvm.fma.f32(float %300, float 0x3FF921FB40000000,\l... float %303)\l  %305 = fadd float %291, %304\l  %306 = lshr i32 %266, 30\l  %307 = add nuw nsw i32 %273, %306\l  br label %308\l}"];
	Node0x54dcac0 -> Node0x54d21c0;
	Node0x54d21c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%308:\l308:                                              \l  %309 = phi float [ %200, %195 ], [ %305, %202 ]\l  %310 = phi i32 [ %201, %195 ], [ %307, %202 ]\l  %311 = fmul float %309, %309\l  %312 = tail call float @llvm.fmuladd.f32(float %311, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %313 = tail call float @llvm.fmuladd.f32(float %311, float %312, float\l... 0xBFC55553A0000000)\l  %314 = fmul float %311, %313\l  %315 = tail call float @llvm.fmuladd.f32(float %309, float %314, float %309)\l  %316 = tail call float @llvm.fmuladd.f32(float %311, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %317 = tail call float @llvm.fmuladd.f32(float %311, float %316, float\l... 0x3FA5557EE0000000)\l  %318 = tail call float @llvm.fmuladd.f32(float %311, float %317, float\l... 0xBFE0000080000000)\l  %319 = tail call float @llvm.fmuladd.f32(float %311, float %318, float\l... 1.000000e+00)\l  %320 = fneg float %315\l  %321 = and i32 %310, 1\l  %322 = icmp eq i32 %321, 0\l  %323 = select i1 %322, float %319, float %320\l  %324 = bitcast float %323 to i32\l  %325 = shl i32 %310, 30\l  %326 = and i32 %325, -2147483648\l  %327 = xor i32 %326, %324\l  %328 = bitcast i32 %327 to float\l  %329 = tail call i1 @llvm.amdgcn.class.f32(float %193, i32 504)\l  %330 = select i1 %329, float %328, float 0x7FF8000000000000\l  %331 = fmul contract float %190, %330\l  %332 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  store float %331, float addrspace(1)* %332, align 4, !tbaa !17\l  %333 = add i64 %34, %21\l  %334 = icmp ult i64 %333, %25\l  br i1 %334, label %33, label %32, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x54d21c0:s0 -> Node0x54d2ea0;
	Node0x54d21c0:s1 -> Node0x54d2ba0;
}
