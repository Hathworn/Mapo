digraph "CFG for '_Z16average_snips_v2PKdPKiS2_S2_PKfS4_Pf' function" {
	label="CFG for '_Z16average_snips_v2PKdPKiS2_S2_PKfS4_Pf' function";

	Node0x5ae1d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%7:\l  %8 = load double, double addrspace(1)* %0, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %9 = fptosi double %8 to i32\l  %10 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %11 = load double, double addrspace(1)* %10, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %12 = fptosi double %11 to i32\l  %13 = getelementptr inbounds double, double addrspace(1)* %0, i64 6\l  %14 = load double, double addrspace(1)* %13, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %15 = fptosi double %14 to i32\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = icmp sgt i32 %9, 0\l  br i1 %17, label %18, label %160\l|{<s0>T|<s1>F}}"];
	Node0x5ae1d00:s0 -> Node0x5ae2af0;
	Node0x5ae1d00:s1 -> Node0x5ae4510;
	Node0x5ae2af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%18:\l18:                                               \l  %19 = getelementptr inbounds double, double addrspace(1)* %0, i64 7\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %21 = fptosi double %20 to i32\l  %22 = icmp slt i32 %15, 1\l  %23 = icmp sgt i32 %12, 0\l  %24 = mul i32 %16, %21\l  %25 = and i32 %12, 7\l  %26 = icmp ult i32 %12, 8\l  %27 = and i32 %12, -8\l  %28 = icmp eq i32 %25, 0\l  br label %29\l}"];
	Node0x5ae2af0 -> Node0x5ae4cf0;
	Node0x5ae4cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %18 ], [ %158, %157 ]\l  %31 = zext i32 %30 to i64\l  %32 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %31\l  %33 = load i32, i32 addrspace(1)* %32, align 4, !tbaa !9, !amdgpu.noclobber\l... !8\l  %34 = icmp ne i32 %33, %16\l  %35 = select i1 %34, i1 true, i1 %22\l  br i1 %35, label %157, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5ae4cf0:s0 -> Node0x5ae4e20;
	Node0x5ae4cf0:s1 -> Node0x5ae5500;
	Node0x5ae5500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%36:\l36:                                               \l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %31\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !tbaa !9, !amdgpu.noclobber\l... !8\l  %39 = mul nsw i32 %38, %15\l  %40 = mul i32 %30, %15\l  br label %41\l}"];
	Node0x5ae5500 -> Node0x5ae5e80;
	Node0x5ae5e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%41:\l41:                                               \l  %42 = phi i32 [ 0, %36 ], [ %155, %154 ]\l  br i1 %23, label %43, label %154\l|{<s0>T|<s1>F}}"];
	Node0x5ae5e80:s0 -> Node0x5ae60c0;
	Node0x5ae5e80:s1 -> Node0x5ae5f80;
	Node0x5ae60c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%43:\l43:                                               \l  %44 = add nsw i32 %42, %39\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %45\l  %47 = load i32, i32 addrspace(1)* %46, align 4, !tbaa !9, !amdgpu.noclobber\l... !8\l  %48 = add i32 %42, %40\l  %49 = mul i32 %48, %12\l  %50 = add i32 %47, %24\l  %51 = mul i32 %50, %12\l  br i1 %26, label %137, label %52\l|{<s0>T|<s1>F}}"];
	Node0x5ae60c0:s0 -> Node0x5ae6680;
	Node0x5ae60c0:s1 -> Node0x5ae6710;
	Node0x5ae6710 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%52:\l52:                                               \l  %53 = phi i32 [ %134, %52 ], [ 0, %43 ]\l  %54 = phi i32 [ %135, %52 ], [ 0, %43 ]\l  %55 = add i32 %53, %49\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %4, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !11\l  %59 = add i32 %53, %51\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %6, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !11\l  %63 = fadd contract float %58, %62\l  store float %63, float addrspace(1)* %61, align 4, !tbaa !11\l  %64 = or i32 %53, 1\l  %65 = add i32 %64, %49\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %4, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !11\l  %69 = add i32 %64, %51\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %6, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !11\l  %73 = fadd contract float %68, %72\l  store float %73, float addrspace(1)* %71, align 4, !tbaa !11\l  %74 = or i32 %53, 2\l  %75 = add i32 %74, %49\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %4, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !11\l  %79 = add i32 %74, %51\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %6, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !11\l  %83 = fadd contract float %78, %82\l  store float %83, float addrspace(1)* %81, align 4, !tbaa !11\l  %84 = or i32 %53, 3\l  %85 = add i32 %84, %49\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %4, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !11\l  %89 = add i32 %84, %51\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %6, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !11\l  %93 = fadd contract float %88, %92\l  store float %93, float addrspace(1)* %91, align 4, !tbaa !11\l  %94 = or i32 %53, 4\l  %95 = add i32 %94, %49\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %4, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !11\l  %99 = add i32 %94, %51\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %6, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !11\l  %103 = fadd contract float %98, %102\l  store float %103, float addrspace(1)* %101, align 4, !tbaa !11\l  %104 = or i32 %53, 5\l  %105 = add i32 %104, %49\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %4, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !11\l  %109 = add i32 %104, %51\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %6, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11\l  %113 = fadd contract float %108, %112\l  store float %113, float addrspace(1)* %111, align 4, !tbaa !11\l  %114 = or i32 %53, 6\l  %115 = add i32 %114, %49\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %4, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !11\l  %119 = add i32 %114, %51\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %6, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !11\l  %123 = fadd contract float %118, %122\l  store float %123, float addrspace(1)* %121, align 4, !tbaa !11\l  %124 = or i32 %53, 7\l  %125 = add i32 %124, %49\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %4, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !11\l  %129 = add i32 %124, %51\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %6, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !11\l  %133 = fadd contract float %128, %132\l  store float %133, float addrspace(1)* %131, align 4, !tbaa !11\l  %134 = add nuw nsw i32 %53, 8\l  %135 = add i32 %54, 8\l  %136 = icmp eq i32 %135, %27\l  br i1 %136, label %137, label %52, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5ae6710:s0 -> Node0x5ae6680;
	Node0x5ae6710:s1 -> Node0x5ae6710;
	Node0x5ae6680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%137:\l137:                                              \l  %138 = phi i32 [ 0, %43 ], [ %134, %52 ]\l  br i1 %28, label %154, label %139\l|{<s0>T|<s1>F}}"];
	Node0x5ae6680:s0 -> Node0x5ae5f80;
	Node0x5ae6680:s1 -> Node0x5aeaa60;
	Node0x5aeaa60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%139:\l139:                                              \l  %140 = phi i32 [ %151, %139 ], [ %138, %137 ]\l  %141 = phi i32 [ %152, %139 ], [ 0, %137 ]\l  %142 = add i32 %140, %49\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %4, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !11\l  %146 = add i32 %140, %51\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %6, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !11\l  %150 = fadd contract float %145, %149\l  store float %150, float addrspace(1)* %148, align 4, !tbaa !11\l  %151 = add nuw nsw i32 %140, 1\l  %152 = add i32 %141, 1\l  %153 = icmp eq i32 %152, %25\l  br i1 %153, label %154, label %139, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5aeaa60:s0 -> Node0x5ae5f80;
	Node0x5aeaa60:s1 -> Node0x5aeaa60;
	Node0x5ae5f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%154:\l154:                                              \l  %155 = add nuw nsw i32 %42, 1\l  %156 = icmp eq i32 %155, %15\l  br i1 %156, label %157, label %41, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5ae5f80:s0 -> Node0x5ae4e20;
	Node0x5ae5f80:s1 -> Node0x5ae5e80;
	Node0x5ae4e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%157:\l157:                                              \l  %158 = add nuw nsw i32 %30, 1\l  %159 = icmp eq i32 %158, %9\l  br i1 %159, label %160, label %29, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5ae4e20:s0 -> Node0x5ae4510;
	Node0x5ae4e20:s1 -> Node0x5ae4cf0;
	Node0x5ae4510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%160:\l160:                                              \l  ret void\l}"];
}
