digraph "CFG for '_Z7sum_dWUPKdPKfPf' function" {
	label="CFG for '_Z7sum_dWUPKdPKfPf' function";

	Node0x4f356f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%3:\l  %4 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %5 = load double, double addrspace(1)* %4, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %6 = fptosi double %5 to i32\l  %7 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %8 = load double, double addrspace(1)* %7, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %9 = fptosi double %8 to i32\l  %10 = getelementptr inbounds double, double addrspace(1)* %0, i64 2\l  %11 = load double, double addrspace(1)* %10, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %12 = fptosi double %11 to i32\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !9, !invariant.load !8\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !10\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %22 = mul i32 %21, %17\l  %23 = udiv i32 %20, %17\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !19\l  %25 = mul nsw i32 %12, %9\l  %26 = add nsw i32 %22, %24\l  %27 = icmp slt i32 %26, %25\l  br i1 %27, label %28, label %141\l|{<s0>T|<s1>F}}"];
	Node0x4f356f0:s0 -> Node0x4f38db0;
	Node0x4f356f0:s1 -> Node0x4f38e40;
	Node0x4f38db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%28:\l28:                                               \l  %29 = mul i32 %23, %17\l  %30 = icmp ugt i32 %20, %29\l  %31 = zext i1 %30 to i32\l  %32 = add i32 %23, %31\l  %33 = icmp sgt i32 %6, 0\l  %34 = add i32 %6, -1\l  %35 = mul nsw i32 %32, %17\l  %36 = and i32 %6, 7\l  %37 = icmp ult i32 %6, 8\l  %38 = and i32 %6, -8\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x4f38db0 -> Node0x4f39770;
	Node0x4f39770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%40:\l40:                                               \l  %41 = phi i32 [ %26, %28 ], [ %139, %133 ]\l  br i1 %33, label %42, label %133\l|{<s0>T|<s1>F}}"];
	Node0x4f39770:s0 -> Node0x4f399a0;
	Node0x4f39770:s1 -> Node0x4f39860;
	Node0x4f399a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%42:\l42:                                               \l  %43 = sdiv i32 %41, %9\l  %44 = mul i32 %43, %34\l  br i1 %37, label %115, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4f399a0:s0 -> Node0x4f39c00;
	Node0x4f399a0:s1 -> Node0x4f39c50;
	Node0x4f39c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%45:\l45:                                               \l  %46 = phi i32 [ %112, %45 ], [ 0, %42 ]\l  %47 = phi float [ %111, %45 ], [ 0.000000e+00, %42 ]\l  %48 = phi i32 [ %113, %45 ], [ 0, %42 ]\l  %49 = add i32 %44, %46\l  %50 = mul i32 %49, %9\l  %51 = add i32 %50, %41\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !20\l  %55 = fadd contract float %47, %54\l  %56 = or i32 %46, 1\l  %57 = add i32 %44, %56\l  %58 = mul i32 %57, %9\l  %59 = add i32 %58, %41\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !20\l  %63 = fadd contract float %55, %62\l  %64 = or i32 %46, 2\l  %65 = add i32 %44, %64\l  %66 = mul i32 %65, %9\l  %67 = add i32 %66, %41\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !20\l  %71 = fadd contract float %63, %70\l  %72 = or i32 %46, 3\l  %73 = add i32 %44, %72\l  %74 = mul i32 %73, %9\l  %75 = add i32 %74, %41\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !20\l  %79 = fadd contract float %71, %78\l  %80 = or i32 %46, 4\l  %81 = add i32 %44, %80\l  %82 = mul i32 %81, %9\l  %83 = add i32 %82, %41\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !20\l  %87 = fadd contract float %79, %86\l  %88 = or i32 %46, 5\l  %89 = add i32 %44, %88\l  %90 = mul i32 %89, %9\l  %91 = add i32 %90, %41\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !20\l  %95 = fadd contract float %87, %94\l  %96 = or i32 %46, 6\l  %97 = add i32 %44, %96\l  %98 = mul i32 %97, %9\l  %99 = add i32 %98, %41\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !20\l  %103 = fadd contract float %95, %102\l  %104 = or i32 %46, 7\l  %105 = add i32 %44, %104\l  %106 = mul i32 %105, %9\l  %107 = add i32 %106, %41\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !20\l  %111 = fadd contract float %103, %110\l  %112 = add nuw nsw i32 %46, 8\l  %113 = add i32 %48, 8\l  %114 = icmp eq i32 %113, %38\l  br i1 %114, label %115, label %45, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4f39c50:s0 -> Node0x4f39c00;
	Node0x4f39c50:s1 -> Node0x4f39c50;
	Node0x4f39c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%115:\l115:                                              \l  %116 = phi float [ undef, %42 ], [ %111, %45 ]\l  %117 = phi i32 [ 0, %42 ], [ %112, %45 ]\l  %118 = phi float [ 0.000000e+00, %42 ], [ %111, %45 ]\l  br i1 %39, label %133, label %119\l|{<s0>T|<s1>F}}"];
	Node0x4f39c00:s0 -> Node0x4f39860;
	Node0x4f39c00:s1 -> Node0x4f3e090;
	Node0x4f3e090 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%119:\l119:                                              \l  %120 = phi i32 [ %130, %119 ], [ %117, %115 ]\l  %121 = phi float [ %129, %119 ], [ %118, %115 ]\l  %122 = phi i32 [ %131, %119 ], [ 0, %115 ]\l  %123 = add i32 %44, %120\l  %124 = mul i32 %123, %9\l  %125 = add i32 %124, %41\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !20\l  %129 = fadd contract float %121, %128\l  %130 = add nuw nsw i32 %120, 1\l  %131 = add i32 %122, 1\l  %132 = icmp eq i32 %131, %36\l  br i1 %132, label %133, label %119, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4f3e090:s0 -> Node0x4f39860;
	Node0x4f3e090:s1 -> Node0x4f3e090;
	Node0x4f39860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%133:\l133:                                              \l  %134 = phi float [ 0.000000e+00, %40 ], [ %116, %115 ], [ %129, %119 ]\l  %135 = sext i32 %41 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %2, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !20\l  %138 = fadd contract float %134, %137\l  store float %138, float addrspace(1)* %136, align 4, !tbaa !20\l  %139 = add nsw i32 %41, %35\l  %140 = icmp slt i32 %139, %25\l  br i1 %140, label %40, label %141, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4f39860:s0 -> Node0x4f39770;
	Node0x4f39860:s1 -> Node0x4f38e40;
	Node0x4f38e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%141:\l141:                                              \l  ret void\l}"];
}
