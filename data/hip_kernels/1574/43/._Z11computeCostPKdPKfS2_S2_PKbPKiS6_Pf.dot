digraph "CFG for '_Z11computeCostPKdPKfS2_S2_PKbPKiS6_Pf' function" {
	label="CFG for '_Z11computeCostPKdPKfS2_S2_PKbPKiS6_Pf' function";

	Node0x61da670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%8:\l  %9 = load double, double addrspace(1)* %0, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %10 = fptosi double %9 to i32\l  %11 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %12 = load double, double addrspace(1)* %11, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %13 = fptosi double %12 to i32\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !9, !invariant.load !8\l  %18 = zext i16 %17 to i32\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = getelementptr inbounds double, double addrspace(1)* %0, i64 5\l  %21 = load double, double addrspace(1)* %20, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %22 = fptrunc double %21 to float\l  %23 = getelementptr inbounds double, double addrspace(1)* %0, i64 6\l  %24 = load double, double addrspace(1)* %23, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %25 = fptosi double %24 to i32\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !10\l  %27 = icmp slt i32 %26, %10\l  br i1 %27, label %28, label %205\l|{<s0>T|<s1>F}}"];
	Node0x61da670:s0 -> Node0x61dd970;
	Node0x61da670:s1 -> Node0x61dda00;
	Node0x61dd970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%28:\l28:                                               \l  %29 = getelementptr inbounds double, double addrspace(1)* %0, i64 7\l  %30 = load double, double addrspace(1)* %29, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %31 = fptosi double %30 to i32\l  %32 = mul i32 %19, %31\l  %33 = icmp sgt i32 %25, 0\l  %34 = icmp sgt i32 %13, 0\l  %35 = sext i32 %19 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %2, i64 %35\l  %37 = mul nsw i32 %19, %10\l  %38 = and i32 %13, 7\l  %39 = icmp ult i32 %13, 8\l  %40 = and i32 %13, -8\l  %41 = icmp eq i32 %38, 0\l  br label %42\l}"];
	Node0x61dd970 -> Node0x61de430;
	Node0x61de430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%42:\l42:                                               \l  %43 = phi i32 [ %26, %28 ], [ %203, %202 ]\l  %44 = zext i32 %43 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %44\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !11, !amdgpu.noclobber\l... !8\l  %47 = add nsw i32 %46, %32\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i8, i8 addrspace(1)* %4, i64 %48\l  %50 = load i8, i8 addrspace(1)* %49, align 1, !tbaa !13, !range !15,\l... !amdgpu.noclobber !8\l  %51 = icmp eq i8 %50, 0\l  br i1 %51, label %202, label %52\l|{<s0>T|<s1>F}}"];
	Node0x61de430:s0 -> Node0x61de560;
	Node0x61de430:s1 -> Node0x61def70;
	Node0x61def70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%52:\l52:                                               \l  br i1 %33, label %53, label %187\l|{<s0>T|<s1>F}}"];
	Node0x61def70:s0 -> Node0x61df070;
	Node0x61def70:s1 -> Node0x61df0c0;
	Node0x61df070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%53:\l53:                                               \l  %54 = mul nsw i32 %46, %25\l  %55 = mul i32 %43, %25\l  br label %56\l}"];
	Node0x61df070 -> Node0x61df320;
	Node0x61df320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%56:\l56:                                               \l  %57 = phi float [ 0.000000e+00, %53 ], [ %184, %183 ]\l  %58 = phi i32 [ 0, %53 ], [ %185, %183 ]\l  br i1 %34, label %59, label %183\l|{<s0>T|<s1>F}}"];
	Node0x61df320:s0 -> Node0x61e00c0;
	Node0x61df320:s1 -> Node0x61dfe60;
	Node0x61e00c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%59:\l59:                                               \l  %60 = add nsw i32 %58, %54\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %61\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !11, !amdgpu.noclobber\l... !8\l  %64 = add i32 %58, %55\l  %65 = mul i32 %64, %13\l  %66 = add i32 %63, %32\l  %67 = mul i32 %66, %13\l  br i1 %39, label %162, label %68\l|{<s0>T|<s1>F}}"];
	Node0x61e00c0:s0 -> Node0x61ddf70;
	Node0x61e00c0:s1 -> Node0x61e0f00;
	Node0x61e0f00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%68:\l68:                                               \l  %69 = phi i32 [ %159, %68 ], [ 0, %59 ]\l  %70 = phi float [ %158, %68 ], [ %57, %59 ]\l  %71 = phi i32 [ %160, %68 ], [ 0, %59 ]\l  %72 = add i32 %69, %65\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16\l  %76 = add i32 %67, %69\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %3, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !16\l  %80 = fmul contract float %75, %79\l  %81 = fadd contract float %70, %80\l  %82 = or i32 %69, 1\l  %83 = add i32 %82, %65\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = add i32 %67, %82\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %3, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = fmul contract float %86, %90\l  %92 = fadd contract float %81, %91\l  %93 = or i32 %69, 2\l  %94 = add i32 %93, %65\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16\l  %98 = add i32 %67, %93\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %3, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16\l  %102 = fmul contract float %97, %101\l  %103 = fadd contract float %92, %102\l  %104 = or i32 %69, 3\l  %105 = add i32 %104, %65\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %1, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16\l  %109 = add i32 %67, %104\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %3, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = fmul contract float %108, %112\l  %114 = fadd contract float %103, %113\l  %115 = or i32 %69, 4\l  %116 = add i32 %115, %65\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = add i32 %67, %115\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %3, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16\l  %124 = fmul contract float %119, %123\l  %125 = fadd contract float %114, %124\l  %126 = or i32 %69, 5\l  %127 = add i32 %126, %65\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16\l  %131 = add i32 %67, %126\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %3, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = fmul contract float %130, %134\l  %136 = fadd contract float %125, %135\l  %137 = or i32 %69, 6\l  %138 = add i32 %137, %65\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %1, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %142 = add i32 %67, %137\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %3, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !16\l  %146 = fmul contract float %141, %145\l  %147 = fadd contract float %136, %146\l  %148 = or i32 %69, 7\l  %149 = add i32 %148, %65\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %1, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !16\l  %153 = add i32 %67, %148\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %3, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !16\l  %157 = fmul contract float %152, %156\l  %158 = fadd contract float %147, %157\l  %159 = add nuw nsw i32 %69, 8\l  %160 = add i32 %71, 8\l  %161 = icmp eq i32 %160, %40\l  br i1 %161, label %162, label %68, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x61e0f00:s0 -> Node0x61ddf70;
	Node0x61e0f00:s1 -> Node0x61e0f00;
	Node0x61ddf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%162:\l162:                                              \l  %163 = phi float [ undef, %59 ], [ %158, %68 ]\l  %164 = phi i32 [ 0, %59 ], [ %159, %68 ]\l  %165 = phi float [ %57, %59 ], [ %158, %68 ]\l  br i1 %41, label %183, label %166\l|{<s0>T|<s1>F}}"];
	Node0x61ddf70:s0 -> Node0x61dfe60;
	Node0x61ddf70:s1 -> Node0x61e56a0;
	Node0x61e56a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%166:\l166:                                              \l  %167 = phi i32 [ %180, %166 ], [ %164, %162 ]\l  %168 = phi float [ %179, %166 ], [ %165, %162 ]\l  %169 = phi i32 [ %181, %166 ], [ 0, %162 ]\l  %170 = add i32 %167, %65\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %1, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !16\l  %174 = add i32 %67, %167\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %3, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !16\l  %178 = fmul contract float %173, %177\l  %179 = fadd contract float %168, %178\l  %180 = add nuw nsw i32 %167, 1\l  %181 = add i32 %169, 1\l  %182 = icmp eq i32 %181, %38\l  br i1 %182, label %183, label %166, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x61e56a0:s0 -> Node0x61dfe60;
	Node0x61e56a0:s1 -> Node0x61e56a0;
	Node0x61dfe60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%183:\l183:                                              \l  %184 = phi float [ %57, %56 ], [ %163, %162 ], [ %179, %166 ]\l  %185 = add nuw nsw i32 %58, 1\l  %186 = icmp eq i32 %185, %25\l  br i1 %186, label %187, label %56, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x61dfe60:s0 -> Node0x61df0c0;
	Node0x61dfe60:s1 -> Node0x61df320;
	Node0x61df0c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%187:\l187:                                              \l  %188 = phi float [ 0.000000e+00, %52 ], [ %184, %183 ]\l  %189 = tail call float @llvm.maxnum.f32(float %188, float 0.000000e+00)\l  %190 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %191 = fdiv contract float %22, %190\l  %192 = fadd contract float %189, %191\l  %193 = fmul contract float %192, %192\l  %194 = fmul contract float %190, %190\l  %195 = fdiv contract float %22, %194\l  %196 = fadd contract float %195, 1.000000e+00\l  %197 = fdiv contract float %193, %196\l  %198 = fsub contract float %197, %22\l  %199 = add nsw i32 %43, %37\l  %200 = sext i32 %199 to i64\l  %201 = getelementptr inbounds float, float addrspace(1)* %7, i64 %200\l  store float %198, float addrspace(1)* %201, align 4, !tbaa !16\l  br label %202\l}"];
	Node0x61df0c0 -> Node0x61de560;
	Node0x61de560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%202:\l202:                                              \l  %203 = add nuw nsw i32 %43, %18\l  %204 = icmp slt i32 %203, %10\l  br i1 %204, label %42, label %205, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x61de560:s0 -> Node0x61de430;
	Node0x61de560:s1 -> Node0x61dda00;
	Node0x61dda00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%205:\l205:                                              \l  ret void\l}"];
}
