digraph "CFG for '_Z11computeCostPKdPKfS2_S2_PKiPKbPf' function" {
	label="CFG for '_Z11computeCostPKdPKfS2_S2_PKiPKbPf' function";

	Node0x6418290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%7:\l  %8 = load double, double addrspace(1)* %0, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %9 = fptosi double %8 to i32\l  %10 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %11 = load double, double addrspace(1)* %10, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %12 = fptosi double %11 to i32\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !9, !invariant.load !8\l  %17 = zext i16 %16 to i32\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = getelementptr inbounds double, double addrspace(1)* %0, i64 5\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %21 = fptrunc double %20 to float\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !10\l  %23 = icmp slt i32 %22, %9\l  br i1 %23, label %24, label %190\l|{<s0>T|<s1>F}}"];
	Node0x6418290:s0 -> Node0x641b3b0;
	Node0x6418290:s1 -> Node0x641b440;
	Node0x641b3b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%24:\l24:                                               \l  %25 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %26 = load double, double addrspace(1)* %25, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %27 = fptosi double %26 to i32\l  %28 = mul nsw i32 %18, %9\l  %29 = icmp sgt i32 %12, 0\l  %30 = mul nsw i32 %18, %27\l  %31 = sext i32 %18 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %33 = and i32 %12, 7\l  %34 = icmp ult i32 %12, 8\l  %35 = and i32 %12, -8\l  %36 = icmp eq i32 %33, 0\l  br label %37\l}"];
	Node0x641b3b0 -> Node0x641bdc0;
	Node0x641bdc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%37:\l37:                                               \l  %38 = phi i32 [ %22, %24 ], [ %188, %187 ]\l  %39 = add nsw i32 %38, %28\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds i8, i8 addrspace(1)* %5, i64 %40\l  %42 = load i8, i8 addrspace(1)* %41, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %43 = icmp eq i8 %42, 0\l  br i1 %43, label %187, label %44\l|{<s0>T|<s1>F}}"];
	Node0x641bdc0:s0 -> Node0x641bef0;
	Node0x641bdc0:s1 -> Node0x641c600;
	Node0x641c600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%44:\l44:                                               \l  br i1 %29, label %45, label %174\l|{<s0>T|<s1>F}}"];
	Node0x641c600:s0 -> Node0x641c700;
	Node0x641c600:s1 -> Node0x641c750;
	Node0x641c700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%45:\l45:                                               \l  %46 = mul nsw i32 %38, %12\l  %47 = zext i32 %38 to i64\l  %48 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %47\l  %49 = load i32, i32 addrspace(1)* %48, align 4, !tbaa !14, !amdgpu.noclobber\l... !8\l  br i1 %34, label %152, label %50\l|{<s0>T|<s1>F}}"];
	Node0x641c700:s0 -> Node0x641cc10;
	Node0x641c700:s1 -> Node0x641cca0;
	Node0x641cca0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%50:\l50:                                               \l  %51 = phi i32 [ %149, %50 ], [ 0, %45 ]\l  %52 = phi float [ %148, %50 ], [ 0.000000e+00, %45 ]\l  %53 = phi i32 [ %150, %50 ], [ 0, %45 ]\l  %54 = add nsw i32 %51, %46\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %1, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !16\l  %58 = add i32 %51, %30\l  %59 = add i32 %58, %49\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %3, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = fmul contract float %57, %62\l  %64 = fadd contract float %52, %63\l  %65 = or i32 %51, 1\l  %66 = add nsw i32 %65, %46\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16\l  %70 = add i32 %65, %30\l  %71 = add i32 %70, %49\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %3, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16\l  %75 = fmul contract float %69, %74\l  %76 = fadd contract float %64, %75\l  %77 = or i32 %51, 2\l  %78 = add nsw i32 %77, %46\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !16\l  %82 = add i32 %77, %30\l  %83 = add i32 %82, %49\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %3, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = fmul contract float %81, %86\l  %88 = fadd contract float %76, %87\l  %89 = or i32 %51, 3\l  %90 = add nsw i32 %89, %46\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16\l  %94 = add i32 %89, %30\l  %95 = add i32 %94, %49\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %3, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %88, %99\l  %101 = or i32 %51, 4\l  %102 = add nsw i32 %101, %46\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %1, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16\l  %106 = add i32 %101, %30\l  %107 = add i32 %106, %49\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %3, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16\l  %111 = fmul contract float %105, %110\l  %112 = fadd contract float %100, %111\l  %113 = or i32 %51, 5\l  %114 = add nsw i32 %113, %46\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16\l  %118 = add i32 %113, %30\l  %119 = add i32 %118, %49\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %3, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %112, %123\l  %125 = or i32 %51, 6\l  %126 = add nsw i32 %125, %46\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %1, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !16\l  %130 = add i32 %125, %30\l  %131 = add i32 %130, %49\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %3, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = fmul contract float %129, %134\l  %136 = fadd contract float %124, %135\l  %137 = or i32 %51, 7\l  %138 = add nsw i32 %137, %46\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %1, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %142 = add i32 %137, %30\l  %143 = add i32 %142, %49\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %3, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %136, %147\l  %149 = add nuw nsw i32 %51, 8\l  %150 = add i32 %53, 8\l  %151 = icmp eq i32 %150, %35\l  br i1 %151, label %152, label %50, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x641cca0:s0 -> Node0x641cc10;
	Node0x641cca0:s1 -> Node0x641cca0;
	Node0x641cc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%152:\l152:                                              \l  %153 = phi float [ undef, %45 ], [ %148, %50 ]\l  %154 = phi i32 [ 0, %45 ], [ %149, %50 ]\l  %155 = phi float [ 0.000000e+00, %45 ], [ %148, %50 ]\l  br i1 %36, label %174, label %156\l|{<s0>T|<s1>F}}"];
	Node0x641cc10:s0 -> Node0x641c750;
	Node0x641cc10:s1 -> Node0x6422580;
	Node0x6422580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%156:\l156:                                              \l  %157 = phi i32 [ %171, %156 ], [ %154, %152 ]\l  %158 = phi float [ %170, %156 ], [ %155, %152 ]\l  %159 = phi i32 [ %172, %156 ], [ 0, %152 ]\l  %160 = add nsw i32 %157, %46\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %1, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !16\l  %164 = add i32 %157, %30\l  %165 = add i32 %164, %49\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %3, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !16\l  %169 = fmul contract float %163, %168\l  %170 = fadd contract float %158, %169\l  %171 = add nuw nsw i32 %157, 1\l  %172 = add i32 %159, 1\l  %173 = icmp eq i32 %172, %33\l  br i1 %173, label %174, label %156, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6422580:s0 -> Node0x641c750;
	Node0x6422580:s1 -> Node0x6422580;
	Node0x641c750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%174:\l174:                                              \l  %175 = phi float [ 0.000000e+00, %44 ], [ %153, %152 ], [ %170, %156 ]\l  %176 = tail call float @llvm.maxnum.f32(float %175, float 0.000000e+00)\l  %177 = load float, float addrspace(1)* %32, align 4, !tbaa !16\l  %178 = fdiv contract float %21, %177\l  %179 = fadd contract float %176, %178\l  %180 = fmul contract float %179, %179\l  %181 = fmul contract float %177, %177\l  %182 = fdiv contract float %21, %181\l  %183 = fadd contract float %182, 1.000000e+00\l  %184 = fdiv contract float %180, %183\l  %185 = fsub contract float %184, %21\l  %186 = getelementptr inbounds float, float addrspace(1)* %6, i64 %40\l  store float %185, float addrspace(1)* %186, align 4, !tbaa !16\l  br label %187\l}"];
	Node0x641c750 -> Node0x641bef0;
	Node0x641bef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%187:\l187:                                              \l  %188 = add nuw nsw i32 %38, %17\l  %189 = icmp slt i32 %188, %9\l  br i1 %189, label %37, label %190, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x641bef0:s0 -> Node0x641bdc0;
	Node0x641bef0:s1 -> Node0x641b440;
	Node0x641b440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%190:\l190:                                              \l  ret void\l}"];
}
