digraph "CFG for '_Z19softmax_loss_kernelPfS_S_S_ii' function" {
	label="CFG for '_Z19softmax_loss_kernelPfS_S_S_ii' function";

	Node0x58b0680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = icmp sgt i32 %5, 0\l  br i1 %16, label %17, label %50\l|{<s0>T|<s1>F}}"];
	Node0x58b0680:s0 -> Node0x58b0fa0;
	Node0x58b0680:s1 -> Node0x58b2690;
	Node0x58b0fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%17:\l17:                                               \l  %18 = mul nsw i32 %15, %5\l  %19 = and i32 %5, 1\l  %20 = icmp eq i32 %5, 1\l  br i1 %20, label %23, label %21\l|{<s0>T|<s1>F}}"];
	Node0x58b0fa0:s0 -> Node0x58b29b0;
	Node0x58b0fa0:s1 -> Node0x58b2a00;
	Node0x58b2a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%21:\l21:                                               \l  %22 = and i32 %5, -2\l  br label %56\l}"];
	Node0x58b2a00 -> Node0x58b2c00;
	Node0x58b29b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%23:\l23:                                               \l  %24 = phi float [ undef, %17 ], [ %102, %56 ]\l  %25 = phi i32 [ 0, %17 ], [ %103, %56 ]\l  %26 = phi float [ 0.000000e+00, %17 ], [ %102, %56 ]\l  %27 = icmp eq i32 %19, 0\l  br i1 %27, label %50, label %28\l|{<s0>T|<s1>F}}"];
	Node0x58b29b0:s0 -> Node0x58b2690;
	Node0x58b29b0:s1 -> Node0x58b3e70;
	Node0x58b3e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%28:\l28:                                               \l  %29 = add nsw i32 %25, %18\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %35 = tail call i1 @llvm.amdgcn.class.f32(float %34, i32 144)\l  %36 = select i1 %35, float 0x41F0000000000000, float 1.000000e+00\l  %37 = fmul float %34, %36\l  %38 = tail call float @llvm.log2.f32(float %37)\l  %39 = fmul float %38, 0x3FE62E42E0000000\l  %40 = tail call i1 @llvm.amdgcn.class.f32(float %38, i32 519)\l  %41 = fneg float %39\l  %42 = tail call float @llvm.fma.f32(float %38, float 0x3FE62E42E0000000,\l... float %41)\l  %43 = tail call float @llvm.fma.f32(float %38, float 0x3E6EFA39E0000000,\l... float %42)\l  %44 = fadd float %39, %43\l  %45 = select i1 %40, float %38, float %44\l  %46 = select i1 %35, float 0x40362E4300000000, float 0.000000e+00\l  %47 = fsub float %45, %46\l  %48 = fmul contract float %32, %47\l  %49 = fadd contract float %26, %48\l  br label %50\l}"];
	Node0x58b3e70 -> Node0x58b2690;
	Node0x58b2690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%50:\l50:                                               \l  %51 = phi float [ 0.000000e+00, %6 ], [ %24, %23 ], [ %49, %28 ]\l  %52 = fneg contract float %51\l  %53 = sext i32 %15 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %3, i64 %53\l  store float %52, float addrspace(1)* %54, align 4, !tbaa !7\l  %55 = icmp eq i32 %12, 0\l  br i1 %55, label %106, label %138\l|{<s0>T|<s1>F}}"];
	Node0x58b2690:s0 -> Node0x58b6680;
	Node0x58b2690:s1 -> Node0x58b66d0;
	Node0x58b2c00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%56:\l56:                                               \l  %57 = phi i32 [ 0, %21 ], [ %103, %56 ]\l  %58 = phi float [ 0.000000e+00, %21 ], [ %102, %56 ]\l  %59 = phi i32 [ 0, %21 ], [ %104, %56 ]\l  %60 = add nsw i32 %57, %18\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %2, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %66 = tail call i1 @llvm.amdgcn.class.f32(float %65, i32 144)\l  %67 = select i1 %66, float 0x41F0000000000000, float 1.000000e+00\l  %68 = fmul float %65, %67\l  %69 = tail call float @llvm.log2.f32(float %68)\l  %70 = fmul float %69, 0x3FE62E42E0000000\l  %71 = tail call i1 @llvm.amdgcn.class.f32(float %69, i32 519)\l  %72 = fneg float %70\l  %73 = tail call float @llvm.fma.f32(float %69, float 0x3FE62E42E0000000,\l... float %72)\l  %74 = tail call float @llvm.fma.f32(float %69, float 0x3E6EFA39E0000000,\l... float %73)\l  %75 = fadd float %70, %74\l  %76 = select i1 %71, float %69, float %75\l  %77 = select i1 %66, float 0x40362E4300000000, float 0.000000e+00\l  %78 = fsub float %76, %77\l  %79 = fmul contract float %63, %78\l  %80 = fadd contract float %58, %79\l  %81 = or i32 %57, 1\l  %82 = add nsw i32 %81, %18\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %2, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = tail call i1 @llvm.amdgcn.class.f32(float %87, i32 144)\l  %89 = select i1 %88, float 0x41F0000000000000, float 1.000000e+00\l  %90 = fmul float %87, %89\l  %91 = tail call float @llvm.log2.f32(float %90)\l  %92 = fmul float %91, 0x3FE62E42E0000000\l  %93 = tail call i1 @llvm.amdgcn.class.f32(float %91, i32 519)\l  %94 = fneg float %92\l  %95 = tail call float @llvm.fma.f32(float %91, float 0x3FE62E42E0000000,\l... float %94)\l  %96 = tail call float @llvm.fma.f32(float %91, float 0x3E6EFA39E0000000,\l... float %95)\l  %97 = fadd float %92, %96\l  %98 = select i1 %93, float %91, float %97\l  %99 = select i1 %88, float 0x40362E4300000000, float 0.000000e+00\l  %100 = fsub float %98, %99\l  %101 = fmul contract float %85, %100\l  %102 = fadd contract float %80, %101\l  %103 = add nuw nsw i32 %57, 2\l  %104 = add i32 %59, 2\l  %105 = icmp eq i32 %104, %22\l  br i1 %105, label %23, label %56, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x58b2c00:s0 -> Node0x58b29b0;
	Node0x58b2c00:s1 -> Node0x58b2c00;
	Node0x58b6680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%106:\l106:                                              \l  %107 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_data, i32 0, i32 %14\l  store float 0.000000e+00, float addrspace(3)* %107, align 4, !tbaa !7\l  %108 = icmp sgt i32 %4, 0\l  br i1 %108, label %112, label %110\l|{<s0>T|<s1>F}}"];
	Node0x58b6680:s0 -> Node0x58b9010;
	Node0x58b6680:s1 -> Node0x58b9060;
	Node0x58b9160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%109:\l109:                                              \l  store float %119, float addrspace(3)* %107, align 4, !tbaa !7\l  br label %110\l}"];
	Node0x58b9160 -> Node0x58b9060;
	Node0x58b9060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%110:\l110:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %111 = icmp ult i16 %10, 2\l  br i1 %111, label %122, label %124\l|{<s0>T|<s1>F}}"];
	Node0x58b9060:s0 -> Node0x58b95a0;
	Node0x58b9060:s1 -> Node0x58b9630;
	Node0x58b9010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%112:\l112:                                              \l  %113 = phi float [ %119, %112 ], [ 0.000000e+00, %106 ]\l  %114 = phi i32 [ %120, %112 ], [ 0, %106 ]\l  %115 = add i32 %114, %14\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %3, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7\l  %119 = fadd contract float %118, %113\l  %120 = add i32 %114, %11\l  %121 = icmp slt i32 %120, %4\l  br i1 %121, label %112, label %109, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x58b9010:s0 -> Node0x58b9010;
	Node0x58b9010:s1 -> Node0x58b9160;
	Node0x58b95a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%122:\l122:                                              \l  %123 = icmp eq i32 %14, 0\l  br i1 %123, label %136, label %138\l|{<s0>T|<s1>F}}"];
	Node0x58b95a0:s0 -> Node0x58b9ef0;
	Node0x58b95a0:s1 -> Node0x58b66d0;
	Node0x58b9630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%124:\l124:                                              \l  %125 = phi i32 [ %126, %134 ], [ %11, %110 ]\l  %126 = lshr i32 %125, 1\l  %127 = add nuw nsw i32 %126, %14\l  %128 = icmp ult i32 %127, %4\l  br i1 %128, label %129, label %134\l|{<s0>T|<s1>F}}"];
	Node0x58b9630:s0 -> Node0x58b6d80;
	Node0x58b9630:s1 -> Node0x58b9ff0;
	Node0x58b6d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%129:\l129:                                              \l  %130 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_data, i32 0, i32 %127\l  %131 = load float, float addrspace(3)* %130, align 4, !tbaa !7\l  %132 = load float, float addrspace(3)* %107, align 4, !tbaa !7\l  %133 = fadd contract float %131, %132\l  store float %133, float addrspace(3)* %107, align 4, !tbaa !7\l  br label %134\l}"];
	Node0x58b6d80 -> Node0x58b9ff0;
	Node0x58b9ff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%134:\l134:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %135 = icmp ult i32 %125, 4\l  br i1 %135, label %122, label %124, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x58b9ff0:s0 -> Node0x58b95a0;
	Node0x58b9ff0:s1 -> Node0x58b9630;
	Node0x58b9ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%136:\l136:                                              \l  %137 = load float, float addrspace(3)* getelementptr inbounds ([0 x float],\l... [0 x float] addrspace(3)* @s_data, i32 0, i32 0), align 4, !tbaa !7\l  store float %137, float addrspace(1)* %0, align 4, !tbaa !7\l  br label %138\l}"];
	Node0x58b9ef0 -> Node0x58b66d0;
	Node0x58b66d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%138:\l138:                                              \l  ret void\l}"];
}
