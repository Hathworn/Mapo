digraph "CFG for '_Z16CalculateSampleTPKfS0_PfPiiiiii' function" {
	label="CFG for '_Z16CalculateSampleTPKfS0_PfPiiiiii' function";

	Node0x48ccca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 2, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %26 = add i32 %24, %25\l  %27 = mul nsw i32 %18, %6\l  %28 = add nsw i32 %27, %26\l  %29 = icmp slt i32 %18, %7\l  %30 = icmp slt i32 %26, %6\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %204\l|{<s0>T|<s1>F}}"];
	Node0x48ccca0:s0 -> Node0x48d1390;
	Node0x48ccca0:s1 -> Node0x48d1420;
	Node0x48d1390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%32:\l32:                                               \l  %33 = mul nsw i32 %18, %8\l  %34 = mul nsw i32 %26, %8\l  %35 = icmp sgt i32 %8, 0\l  br i1 %35, label %36, label %51\l|{<s0>T|<s1>F}}"];
	Node0x48d1390:s0 -> Node0x48cf320;
	Node0x48d1390:s1 -> Node0x48d1890;
	Node0x48cf320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%36:\l36:                                               \l  %37 = and i32 %8, 1\l  %38 = icmp eq i32 %8, 1\l  %39 = and i32 %8, -2\l  %40 = icmp eq i32 %37, 0\l  br label %41\l}"];
	Node0x48cf320 -> Node0x48d1c70;
	Node0x48d1c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%41:\l41:                                               \l  %42 = phi i32 [ %123, %118 ], [ 0, %36 ]\l  %43 = phi i32 [ %124, %118 ], [ 0, %36 ]\l  %44 = phi i32 [ %122, %118 ], [ 0, %36 ]\l  %45 = phi float [ %121, %118 ], [ 0.000000e+00, %36 ]\l  %46 = phi float [ %120, %118 ], [ 0.000000e+00, %36 ]\l  %47 = phi float [ %119, %118 ], [ 0.000000e+00, %36 ]\l  %48 = add nsw i32 %43, %33\l  %49 = icmp slt i32 %48, %5\l  %50 = mul nsw i32 %48, %4\l  br i1 %38, label %78, label %126\l|{<s0>T|<s1>F}}"];
	Node0x48d1c70:s0 -> Node0x48d3040;
	Node0x48d1c70:s1 -> Node0x48d30d0;
	Node0x48d1890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %32 ], [ %119, %118 ]\l  %53 = phi float [ 0.000000e+00, %32 ], [ %120, %118 ]\l  %54 = phi float [ 0.000000e+00, %32 ], [ %121, %118 ]\l  %55 = phi i32 [ 0, %32 ], [ %122, %118 ]\l  %56 = phi i32 [ 0, %32 ], [ %123, %118 ]\l  %57 = sext i32 %28 to i64\l  %58 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %57\l  store i32 %55, i32 addrspace(1)* %58, align 4, !tbaa !7\l  %59 = sitofp i32 %56 to float\l  %60 = fdiv contract float %52, %59\l  %61 = mul nsw i32 %28, 3\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %2, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %65 = fadd contract float %60, %64\l  store float %65, float addrspace(1)* %63, align 4, !tbaa !11\l  %66 = fdiv contract float %53, %59\l  %67 = add nsw i32 %61, 1\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %2, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %71 = fadd contract float %66, %70\l  store float %71, float addrspace(1)* %69, align 4, !tbaa !11\l  %72 = fdiv contract float %54, %59\l  %73 = add nsw i32 %61, 2\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %2, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %77 = fadd contract float %72, %76\l  store float %77, float addrspace(1)* %75, align 4, !tbaa !11\l  br label %204\l}"];
	Node0x48d1890 -> Node0x48d1420;
	Node0x48d3040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%78:\l78:                                               \l  %79 = phi float [ undef, %41 ], [ %196, %195 ]\l  %80 = phi float [ undef, %41 ], [ %197, %195 ]\l  %81 = phi float [ undef, %41 ], [ %198, %195 ]\l  %82 = phi i32 [ undef, %41 ], [ %199, %195 ]\l  %83 = phi i32 [ undef, %41 ], [ %200, %195 ]\l  %84 = phi i32 [ %42, %41 ], [ %200, %195 ]\l  %85 = phi i32 [ 0, %41 ], [ %201, %195 ]\l  %86 = phi i32 [ %44, %41 ], [ %199, %195 ]\l  %87 = phi float [ %45, %41 ], [ %198, %195 ]\l  %88 = phi float [ %46, %41 ], [ %197, %195 ]\l  %89 = phi float [ %47, %41 ], [ %196, %195 ]\l  br i1 %40, label %118, label %90\l|{<s0>T|<s1>F}}"];
	Node0x48d3040:s0 -> Node0x48d1d60;
	Node0x48d3040:s1 -> Node0x48d5da0;
	Node0x48d5da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%90:\l90:                                               \l  br i1 %49, label %91, label %118\l|{<s0>T|<s1>F}}"];
	Node0x48d5da0:s0 -> Node0x48d5ee0;
	Node0x48d5da0:s1 -> Node0x48d1d60;
	Node0x48d5ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%91:\l91:                                               \l  %92 = add nsw i32 %85, %34\l  %93 = icmp slt i32 %92, %4\l  br i1 %93, label %94, label %118\l|{<s0>T|<s1>F}}"];
	Node0x48d5ee0:s0 -> Node0x48d6100;
	Node0x48d5ee0:s1 -> Node0x48d1d60;
	Node0x48d6100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%94:\l94:                                               \l  %95 = add nsw i32 %92, %50\l  %96 = mul nsw i32 %95, 3\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %100 = fadd contract float %89, %99\l  %101 = add nsw i32 %96, 1\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %105 = fadd contract float %88, %104\l  %106 = add nsw i32 %96, 2\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %110 = fadd contract float %87, %109\l  %111 = sext i32 %95 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %114 = fcmp contract ogt float %113, 1.270000e+02\l  %115 = zext i1 %114 to i32\l  %116 = or i32 %86, %115\l  %117 = add nsw i32 %84, 1\l  br label %118\l}"];
	Node0x48d6100 -> Node0x48d1d60;
	Node0x48d1d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%118:\l118:                                              \l  %119 = phi float [ %79, %78 ], [ %100, %94 ], [ %89, %91 ], [ %89, %90 ]\l  %120 = phi float [ %80, %78 ], [ %105, %94 ], [ %88, %91 ], [ %88, %90 ]\l  %121 = phi float [ %81, %78 ], [ %110, %94 ], [ %87, %91 ], [ %87, %90 ]\l  %122 = phi i32 [ %82, %78 ], [ %116, %94 ], [ %86, %91 ], [ %86, %90 ]\l  %123 = phi i32 [ %83, %78 ], [ %117, %94 ], [ %84, %91 ], [ %84, %90 ]\l  %124 = add nuw nsw i32 %43, 1\l  %125 = icmp eq i32 %124, %8\l  br i1 %125, label %51, label %41, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x48d1d60:s0 -> Node0x48d1890;
	Node0x48d1d60:s1 -> Node0x48d1c70;
	Node0x48d30d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%126:\l126:                                              \l  %127 = phi i32 [ %200, %195 ], [ %42, %41 ]\l  %128 = phi i32 [ %201, %195 ], [ 0, %41 ]\l  %129 = phi i32 [ %199, %195 ], [ %44, %41 ]\l  %130 = phi float [ %198, %195 ], [ %45, %41 ]\l  %131 = phi float [ %197, %195 ], [ %46, %41 ]\l  %132 = phi float [ %196, %195 ], [ %47, %41 ]\l  %133 = phi i32 [ %202, %195 ], [ 0, %41 ]\l  br i1 %49, label %134, label %161\l|{<s0>T|<s1>F}}"];
	Node0x48d30d0:s0 -> Node0x48d3fc0;
	Node0x48d30d0:s1 -> Node0x48d4010;
	Node0x48d3fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%134:\l134:                                              \l  %135 = add nsw i32 %128, %34\l  %136 = icmp slt i32 %135, %4\l  br i1 %136, label %137, label %161\l|{<s0>T|<s1>F}}"];
	Node0x48d3fc0:s0 -> Node0x48d81b0;
	Node0x48d3fc0:s1 -> Node0x48d4010;
	Node0x48d81b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%137:\l137:                                              \l  %138 = add nsw i32 %135, %50\l  %139 = mul nsw i32 %138, 3\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %143 = fadd contract float %132, %142\l  %144 = add nsw i32 %139, 1\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %148 = fadd contract float %131, %147\l  %149 = add nsw i32 %139, 2\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %153 = fadd contract float %130, %152\l  %154 = sext i32 %138 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %1, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %157 = fcmp contract ogt float %156, 1.270000e+02\l  %158 = zext i1 %157 to i32\l  %159 = or i32 %129, %158\l  %160 = add nsw i32 %127, 1\l  br label %161\l}"];
	Node0x48d81b0 -> Node0x48d4010;
	Node0x48d4010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%161:\l161:                                              \l  %162 = phi float [ %143, %137 ], [ %132, %134 ], [ %132, %126 ]\l  %163 = phi float [ %148, %137 ], [ %131, %134 ], [ %131, %126 ]\l  %164 = phi float [ %153, %137 ], [ %130, %134 ], [ %130, %126 ]\l  %165 = phi i32 [ %159, %137 ], [ %129, %134 ], [ %129, %126 ]\l  %166 = phi i32 [ %160, %137 ], [ %127, %134 ], [ %127, %126 ]\l  br i1 %49, label %167, label %195\l|{<s0>T|<s1>F}}"];
	Node0x48d4010:s0 -> Node0x48d9400;
	Node0x48d4010:s1 -> Node0x48d5350;
	Node0x48d9400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%167:\l167:                                              \l  %168 = or i32 %128, 1\l  %169 = add nsw i32 %168, %34\l  %170 = icmp slt i32 %169, %4\l  br i1 %170, label %171, label %195\l|{<s0>T|<s1>F}}"];
	Node0x48d9400:s0 -> Node0x48d96b0;
	Node0x48d9400:s1 -> Node0x48d5350;
	Node0x48d96b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%171:\l171:                                              \l  %172 = add nsw i32 %169, %50\l  %173 = mul nsw i32 %172, 3\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %0, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %177 = fadd contract float %162, %176\l  %178 = add nsw i32 %173, 1\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %0, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %182 = fadd contract float %163, %181\l  %183 = add nsw i32 %173, 2\l  %184 = sext i32 %183 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %0, i64 %184\l  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %187 = fadd contract float %164, %186\l  %188 = sext i32 %172 to i64\l  %189 = getelementptr inbounds float, float addrspace(1)* %1, i64 %188\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %191 = fcmp contract ogt float %190, 1.270000e+02\l  %192 = zext i1 %191 to i32\l  %193 = or i32 %165, %192\l  %194 = add nsw i32 %166, 1\l  br label %195\l}"];
	Node0x48d96b0 -> Node0x48d5350;
	Node0x48d5350 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%195:\l195:                                              \l  %196 = phi float [ %177, %171 ], [ %162, %167 ], [ %162, %161 ]\l  %197 = phi float [ %182, %171 ], [ %163, %167 ], [ %163, %161 ]\l  %198 = phi float [ %187, %171 ], [ %164, %167 ], [ %164, %161 ]\l  %199 = phi i32 [ %193, %171 ], [ %165, %167 ], [ %165, %161 ]\l  %200 = phi i32 [ %194, %171 ], [ %166, %167 ], [ %166, %161 ]\l  %201 = add nuw nsw i32 %128, 2\l  %202 = add i32 %133, 2\l  %203 = icmp eq i32 %202, %39\l  br i1 %203, label %78, label %126, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x48d5350:s0 -> Node0x48d3040;
	Node0x48d5350:s1 -> Node0x48d30d0;
	Node0x48d1420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%204:\l204:                                              \l  ret void\l}"];
}
