digraph "CFG for '_Z13average_snipsPKdPKiS2_PKfS4_S2_S4_S4_S4_PdPiS4_S4_' function" {
	label="CFG for '_Z13average_snipsPKdPKiS2_PKfS4_S2_S4_S4_S4_PdPiS4_S4_' function";

	Node0x52f0a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%13:\l  %14 = load double, double addrspace(1)* %0, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %15 = fptosi double %14 to i32\l  %16 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %17 = load double, double addrspace(1)* %16, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %18 = fptosi double %17 to i32\l  %19 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %21 = fptosi double %20 to i32\l  %22 = getelementptr inbounds double, double addrspace(1)* %0, i64 6\l  %23 = load double, double addrspace(1)* %22, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %24 = fptosi double %23 to i32\l  %25 = getelementptr inbounds double, double addrspace(1)* %0, i64 9\l  %26 = load double, double addrspace(1)* %25, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %27 = fptosi double %26 to i32\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %29 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %30 = getelementptr inbounds double, double addrspace(1)* %0, i64 15\l  %31 = load double, double addrspace(1)* %30, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %32 = fptrunc double %31 to float\l  %33 = load i32, i32 addrspace(1)* %5, align 4, !tbaa !10\l  %34 = icmp sgt i32 %33, 0\l  br i1 %34, label %35, label %198\l|{<s0>T|<s1>F}}"];
	Node0x52f0a40:s0 -> Node0x52f4a40;
	Node0x52f0a40:s1 -> Node0x52f4ad0;
	Node0x52f4a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%35:\l35:                                               \l  %36 = icmp eq i32 %28, 0\l  %37 = tail call i32 @llvm.amdgcn.workitem.id.y()\l  %38 = icmp eq i32 %37, 0\l  %39 = select i1 %36, i1 %38, i1 false\l  %40 = sext i32 %29 to i64\l  %41 = getelementptr inbounds i32, i32 addrspace(1)* %10, i64 %40\l  %42 = icmp slt i32 %37, %27\l  %43 = icmp sgt i32 %24, 0\l  %44 = mul i32 %29, %27\l  %45 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %46 = getelementptr i8, i8 addrspace(4)* %45, i64 6\l  %47 = bitcast i8 addrspace(4)* %46 to i16 addrspace(4)*\l  %48 = and i32 %24, 3\l  %49 = icmp ult i32 %24, 4\l  %50 = and i32 %24, -4\l  %51 = icmp eq i32 %48, 0\l  br label %52\l}"];
	Node0x52f4a40 -> Node0x52f5870;
	Node0x52f5870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%52:\l52:                                               \l  %53 = phi i32 [ 0, %35 ], [ %195, %194 ]\l  %54 = zext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %3, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %57 = fcmp contract ogt float %56, %32\l  br i1 %57, label %58, label %194\l|{<s0>T|<s1>F}}"];
	Node0x52f5870:s0 -> Node0x52f5f10;
	Node0x52f5870:s1 -> Node0x52f59a0;
	Node0x52f5f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%58:\l58:                                               \l  %59 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %54\l  %60 = load i32, i32 addrspace(1)* %59, align 4, !tbaa !10\l  %61 = icmp eq i32 %60, %29\l  br i1 %61, label %62, label %194\l|{<s0>T|<s1>F}}"];
	Node0x52f5f10:s0 -> Node0x52f6800;
	Node0x52f5f10:s1 -> Node0x52f59a0;
	Node0x52f6800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%62:\l62:                                               \l  br i1 %39, label %63, label %66\l|{<s0>T|<s1>F}}"];
	Node0x52f6800:s0 -> Node0x52f6900;
	Node0x52f6800:s1 -> Node0x52f6950;
	Node0x52f6900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%63:\l63:                                               \l  %64 = load i32, i32 addrspace(1)* %41, align 4, !tbaa !10\l  %65 = add nsw i32 %64, 1\l  store i32 %65, i32 addrspace(1)* %41, align 4, !tbaa !10\l  br label %66\l}"];
	Node0x52f6900 -> Node0x52f6950;
	Node0x52f6950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%66:\l66:                                               \l  br i1 %42, label %67, label %194\l|{<s0>T|<s1>F}}"];
	Node0x52f6950:s0 -> Node0x52f4870;
	Node0x52f6950:s1 -> Node0x52f59a0;
	Node0x52f4870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%67:\l67:                                               \l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %54\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !10\l  %70 = getelementptr inbounds float, float addrspace(1)* %4, i64 %54\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %72 = fpext float %71 to double\l  %73 = load i16, i16 addrspace(4)* %47, align 2, !range !14, !invariant.load\l... !8\l  %74 = zext i16 %73 to i32\l  br label %75\l}"];
	Node0x52f4870 -> Node0x52f7a80;
	Node0x52f7a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%75:\l75:                                               \l  %76 = phi i32 [ %37, %67 ], [ %192, %174 ]\l  br i1 %43, label %77, label %174\l|{<s0>T|<s1>F}}"];
	Node0x52f7a80:s0 -> Node0x52f7cc0;
	Node0x52f7a80:s1 -> Node0x52f7b80;
	Node0x52f7cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%77:\l77:                                               \l  br i1 %49, label %148, label %78\l|{<s0>T|<s1>F}}"];
	Node0x52f7cc0:s0 -> Node0x52f7e00;
	Node0x52f7cc0:s1 -> Node0x52f7e50;
	Node0x52f7e50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%78:\l78:                                               \l  %79 = phi double [ %144, %78 ], [ 0.000000e+00, %77 ]\l  %80 = phi i32 [ %145, %78 ], [ 0, %77 ]\l  %81 = phi i32 [ %146, %78 ], [ 0, %77 ]\l  %82 = mul i32 %80, %18\l  %83 = add i32 %82, %29\l  %84 = mul i32 %83, %21\l  %85 = add i32 %84, %28\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %7, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %89 = mul i32 %83, %27\l  %90 = add i32 %76, %89\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %8, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %94 = fmul contract float %88, %93\l  %95 = fpext float %94 to double\l  %96 = fadd contract double %79, %95\l  %97 = or i32 %80, 1\l  %98 = mul i32 %97, %18\l  %99 = add i32 %98, %29\l  %100 = mul i32 %99, %21\l  %101 = add i32 %100, %28\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %7, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %105 = mul i32 %99, %27\l  %106 = add i32 %76, %105\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %8, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %110 = fmul contract float %104, %109\l  %111 = fpext float %110 to double\l  %112 = fadd contract double %96, %111\l  %113 = or i32 %80, 2\l  %114 = mul i32 %113, %18\l  %115 = add i32 %114, %29\l  %116 = mul i32 %115, %21\l  %117 = add i32 %116, %28\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %7, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %121 = mul i32 %115, %27\l  %122 = add i32 %76, %121\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %8, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %126 = fmul contract float %120, %125\l  %127 = fpext float %126 to double\l  %128 = fadd contract double %112, %127\l  %129 = or i32 %80, 3\l  %130 = mul i32 %129, %18\l  %131 = add i32 %130, %29\l  %132 = mul i32 %131, %21\l  %133 = add i32 %132, %28\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %7, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %137 = mul i32 %131, %27\l  %138 = add i32 %76, %137\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %8, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %142 = fmul contract float %136, %141\l  %143 = fpext float %142 to double\l  %144 = fadd contract double %128, %143\l  %145 = add nuw nsw i32 %80, 4\l  %146 = add i32 %81, 4\l  %147 = icmp eq i32 %146, %50\l  br i1 %147, label %148, label %78, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x52f7e50:s0 -> Node0x52f7e00;
	Node0x52f7e50:s1 -> Node0x52f7e50;
	Node0x52f7e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%148:\l148:                                              \l  %149 = phi double [ undef, %77 ], [ %144, %78 ]\l  %150 = phi double [ 0.000000e+00, %77 ], [ %144, %78 ]\l  %151 = phi i32 [ 0, %77 ], [ %145, %78 ]\l  br i1 %51, label %174, label %152\l|{<s0>T|<s1>F}}"];
	Node0x52f7e00:s0 -> Node0x52f7b80;
	Node0x52f7e00:s1 -> Node0x52fbdd0;
	Node0x52fbdd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%152:\l152:                                              \l  %153 = phi double [ %170, %152 ], [ %150, %148 ]\l  %154 = phi i32 [ %171, %152 ], [ %151, %148 ]\l  %155 = phi i32 [ %172, %152 ], [ 0, %148 ]\l  %156 = mul i32 %154, %18\l  %157 = add i32 %156, %29\l  %158 = mul i32 %157, %21\l  %159 = add i32 %158, %28\l  %160 = sext i32 %159 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %7, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %163 = mul i32 %157, %27\l  %164 = add i32 %76, %163\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %8, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %168 = fmul contract float %162, %167\l  %169 = fpext float %168 to double\l  %170 = fadd contract double %153, %169\l  %171 = add nuw nsw i32 %154, 1\l  %172 = add i32 %155, 1\l  %173 = icmp eq i32 %172, %48\l  br i1 %173, label %174, label %152, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x52fbdd0:s0 -> Node0x52f7b80;
	Node0x52fbdd0:s1 -> Node0x52fbdd0;
	Node0x52f7b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%174:\l174:                                              \l  %175 = phi double [ 0.000000e+00, %75 ], [ %149, %148 ], [ %170, %152 ]\l  %176 = mul nsw i32 %76, %15\l  %177 = add i32 %176, %28\l  %178 = add i32 %177, %69\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %6, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !12,\l... !amdgpu.noclobber !8\l  %182 = fpext float %181 to double\l  %183 = fmul contract double %175, %72\l  %184 = fadd contract double %183, %182\l  %185 = add i32 %76, %44\l  %186 = mul i32 %185, %21\l  %187 = add i32 %186, %28\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds double, double addrspace(1)* %9, i64 %188\l  %190 = load double, double addrspace(1)* %189, align 8, !tbaa !4\l  %191 = fadd contract double %190, %184\l  store double %191, double addrspace(1)* %189, align 8, !tbaa !4\l  %192 = add i32 %76, %74\l  %193 = icmp slt i32 %192, %27\l  br i1 %193, label %75, label %194, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x52f7b80:s0 -> Node0x52f7a80;
	Node0x52f7b80:s1 -> Node0x52f59a0;
	Node0x52f59a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%194:\l194:                                              \l  %195 = add nuw nsw i32 %53, 1\l  %196 = load i32, i32 addrspace(1)* %5, align 4, !tbaa !10\l  %197 = icmp slt i32 %195, %196\l  br i1 %197, label %52, label %198, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x52f59a0:s0 -> Node0x52f5870;
	Node0x52f59a0:s1 -> Node0x52f4ad0;
	Node0x52f4ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%198:\l198:                                              \l  ret void\l}"];
}
