digraph "CFG for '_Z14addback_spikesPKdPKiS2_PKfS2_PfS4_S4_iS4_' function" {
	label="CFG for '_Z14addback_spikesPKdPKiS2_PKfS2_PfS4_S4_iS4_' function";

	Node0x504a210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%10:\l  %11 = load double, double addrspace(1)* %0, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %12 = fptosi double %11 to i32\l  %13 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %14 = load double, double addrspace(1)* %13, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %15 = fptosi double %14 to i32\l  %16 = getelementptr inbounds double, double addrspace(1)* %0, i64 9\l  %17 = load double, double addrspace(1)* %16, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %18 = fptosi double %17 to i32\l  %19 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %21 = fptosi double %20 to i32\l  %22 = getelementptr inbounds double, double addrspace(1)* %0, i64 6\l  %23 = load double, double addrspace(1)* %22, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %24 = fptosi double %23 to i32\l  %25 = getelementptr inbounds double, double addrspace(1)* %0, i64 11\l  %26 = load double, double addrspace(1)* %25, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %27 = fptrunc double %26 to float\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %29 = sext i32 %8 to i64\l  %30 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %29\l  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !10, !amdgpu.noclobber\l... !8\l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %33 = add i32 %31, %32\l  %34 = add nsw i32 %8, 1\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %35\l  %37 = load i32, i32 addrspace(1)* %36, align 4, !tbaa !10, !amdgpu.noclobber\l... !8\l  %38 = icmp slt i32 %33, %37\l  br i1 %38, label %39, label %247\l|{<s0>T|<s1>F}}"];
	Node0x504a210:s0 -> Node0x504eb60;
	Node0x504a210:s1 -> Node0x504ebf0;
	Node0x504eb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%39:\l39:                                               \l  %40 = tail call i32 @llvm.amdgcn.workitem.id.y()\l  %41 = icmp sge i32 %40, %18\l  %42 = icmp sgt i32 %24, 0\l  %43 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %44 = getelementptr i8, i8 addrspace(4)* %43, i64 6\l  %45 = bitcast i8 addrspace(4)* %44 to i16 addrspace(4)*\l  %46 = getelementptr inbounds i8, i8 addrspace(4)* %43, i64 12\l  %47 = bitcast i8 addrspace(4)* %46 to i32 addrspace(4)*\l  %48 = load i32, i32 addrspace(4)* %47, align 4, !tbaa !12\l  %49 = getelementptr i8, i8 addrspace(4)* %43, i64 4\l  %50 = bitcast i8 addrspace(4)* %49 to i16 addrspace(4)*\l  %51 = load i16, i16 addrspace(4)* %50, align 4, !range !21, !invariant.load\l... !8\l  %52 = zext i16 %51 to i32\l  %53 = udiv i32 %48, %52\l  %54 = mul i32 %53, %52\l  %55 = icmp ugt i32 %48, %54\l  %56 = zext i1 %55 to i32\l  %57 = and i32 %24, 7\l  %58 = icmp ult i32 %24, 8\l  %59 = and i32 %24, -8\l  %60 = icmp eq i32 %57, 0\l  br label %61\l}"];
	Node0x504eb60 -> Node0x504fee0;
	Node0x504fee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%61:\l61:                                               \l  %62 = phi i32 [ %33, %39 ], [ %245, %243 ]\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %9, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !22\l  %66 = fcmp contract ule float %65, %27\l  %67 = select i1 %66, i1 true, i1 %41\l  br i1 %67, label %243, label %68\l|{<s0>T|<s1>F}}"];
	Node0x504fee0:s0 -> Node0x5050010;
	Node0x504fee0:s1 -> Node0x50507b0;
	Node0x50507b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%68:\l68:                                               \l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %63\l  %70 = getelementptr inbounds float, float addrspace(1)* %3, i64 %63\l  %71 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %63\l  %72 = load i32, i32 addrspace(1)* %71, align 4, !tbaa !10, !amdgpu.noclobber\l... !8\l  %73 = load i16, i16 addrspace(4)* %45, align 2, !range !21, !invariant.load\l... !8\l  %74 = zext i16 %73 to i32\l  br label %75\l}"];
	Node0x50507b0 -> Node0x5051270;
	Node0x5051270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%75:\l75:                                               \l  %76 = phi i32 [ %40, %68 ], [ %241, %230 ]\l  br i1 %42, label %77, label %230\l|{<s0>T|<s1>F}}"];
	Node0x5051270:s0 -> Node0x50514b0;
	Node0x5051270:s1 -> Node0x5051370;
	Node0x50514b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%77:\l77:                                               \l  %78 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !10, !amdgpu.noclobber\l... !8\l  br i1 %58, label %205, label %79\l|{<s0>T|<s1>F}}"];
	Node0x50514b0:s0 -> Node0x5051690;
	Node0x50514b0:s1 -> Node0x5051720;
	Node0x5051720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%79:\l79:                                               \l  %80 = phi float [ %201, %79 ], [ 0.000000e+00, %77 ]\l  %81 = phi i32 [ %202, %79 ], [ 0, %77 ]\l  %82 = phi i32 [ %203, %79 ], [ 0, %77 ]\l  %83 = mul i32 %81, %21\l  %84 = add i32 %78, %83\l  %85 = mul i32 %84, %15\l  %86 = add i32 %85, %28\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %6, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !22\l  %90 = mul i32 %84, %18\l  %91 = add i32 %90, %76\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %7, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !22\l  %95 = fmul contract float %89, %94\l  %96 = fadd contract float %80, %95\l  %97 = or i32 %81, 1\l  %98 = mul i32 %97, %21\l  %99 = add i32 %78, %98\l  %100 = mul i32 %99, %15\l  %101 = add i32 %100, %28\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %6, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !22\l  %105 = mul i32 %99, %18\l  %106 = add i32 %105, %76\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %7, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !22\l  %110 = fmul contract float %104, %109\l  %111 = fadd contract float %96, %110\l  %112 = or i32 %81, 2\l  %113 = mul i32 %112, %21\l  %114 = add i32 %78, %113\l  %115 = mul i32 %114, %15\l  %116 = add i32 %115, %28\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %6, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !22\l  %120 = mul i32 %114, %18\l  %121 = add i32 %120, %76\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %7, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !22\l  %125 = fmul contract float %119, %124\l  %126 = fadd contract float %111, %125\l  %127 = or i32 %81, 3\l  %128 = mul i32 %127, %21\l  %129 = add i32 %78, %128\l  %130 = mul i32 %129, %15\l  %131 = add i32 %130, %28\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %6, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !22\l  %135 = mul i32 %129, %18\l  %136 = add i32 %135, %76\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %7, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !22\l  %140 = fmul contract float %134, %139\l  %141 = fadd contract float %126, %140\l  %142 = or i32 %81, 4\l  %143 = mul i32 %142, %21\l  %144 = add i32 %78, %143\l  %145 = mul i32 %144, %15\l  %146 = add i32 %145, %28\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %6, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !22\l  %150 = mul i32 %144, %18\l  %151 = add i32 %150, %76\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %7, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !22\l  %155 = fmul contract float %149, %154\l  %156 = fadd contract float %141, %155\l  %157 = or i32 %81, 5\l  %158 = mul i32 %157, %21\l  %159 = add i32 %78, %158\l  %160 = mul i32 %159, %15\l  %161 = add i32 %160, %28\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %6, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !22\l  %165 = mul i32 %159, %18\l  %166 = add i32 %165, %76\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %7, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !22\l  %170 = fmul contract float %164, %169\l  %171 = fadd contract float %156, %170\l  %172 = or i32 %81, 6\l  %173 = mul i32 %172, %21\l  %174 = add i32 %78, %173\l  %175 = mul i32 %174, %15\l  %176 = add i32 %175, %28\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %6, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !22\l  %180 = mul i32 %174, %18\l  %181 = add i32 %180, %76\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %7, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !22\l  %185 = fmul contract float %179, %184\l  %186 = fadd contract float %171, %185\l  %187 = or i32 %81, 7\l  %188 = mul i32 %187, %21\l  %189 = add i32 %78, %188\l  %190 = mul i32 %189, %15\l  %191 = add i32 %190, %28\l  %192 = sext i32 %191 to i64\l  %193 = getelementptr inbounds float, float addrspace(1)* %6, i64 %192\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !22\l  %195 = mul i32 %189, %18\l  %196 = add i32 %195, %76\l  %197 = sext i32 %196 to i64\l  %198 = getelementptr inbounds float, float addrspace(1)* %7, i64 %197\l  %199 = load float, float addrspace(1)* %198, align 4, !tbaa !22\l  %200 = fmul contract float %194, %199\l  %201 = fadd contract float %186, %200\l  %202 = add nuw nsw i32 %81, 8\l  %203 = add i32 %82, 8\l  %204 = icmp eq i32 %203, %59\l  br i1 %204, label %205, label %79, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5051720:s0 -> Node0x5051690;
	Node0x5051720:s1 -> Node0x5051720;
	Node0x5051690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%205:\l205:                                              \l  %206 = phi float [ undef, %77 ], [ %201, %79 ]\l  %207 = phi float [ 0.000000e+00, %77 ], [ %201, %79 ]\l  %208 = phi i32 [ 0, %77 ], [ %202, %79 ]\l  br i1 %60, label %230, label %209\l|{<s0>T|<s1>F}}"];
	Node0x5051690:s0 -> Node0x5051370;
	Node0x5051690:s1 -> Node0x50579e0;
	Node0x50579e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%209:\l209:                                              \l  %210 = phi float [ %226, %209 ], [ %207, %205 ]\l  %211 = phi i32 [ %227, %209 ], [ %208, %205 ]\l  %212 = phi i32 [ %228, %209 ], [ 0, %205 ]\l  %213 = mul i32 %211, %21\l  %214 = add i32 %78, %213\l  %215 = mul i32 %214, %15\l  %216 = add i32 %215, %28\l  %217 = sext i32 %216 to i64\l  %218 = getelementptr inbounds float, float addrspace(1)* %6, i64 %217\l  %219 = load float, float addrspace(1)* %218, align 4, !tbaa !22\l  %220 = mul i32 %214, %18\l  %221 = add i32 %220, %76\l  %222 = sext i32 %221 to i64\l  %223 = getelementptr inbounds float, float addrspace(1)* %7, i64 %222\l  %224 = load float, float addrspace(1)* %223, align 4, !tbaa !22\l  %225 = fmul contract float %219, %224\l  %226 = fadd contract float %210, %225\l  %227 = add nuw nsw i32 %211, 1\l  %228 = add i32 %212, 1\l  %229 = icmp eq i32 %228, %57\l  br i1 %229, label %230, label %209, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x50579e0:s0 -> Node0x5051370;
	Node0x50579e0:s1 -> Node0x50579e0;
	Node0x5051370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%230:\l230:                                              \l  %231 = phi float [ 0.000000e+00, %75 ], [ %206, %205 ], [ %226, %209 ]\l  %232 = load float, float addrspace(1)* %70, align 4, !tbaa !22\l  %233 = fmul contract float %231, %232\l  %234 = mul nsw i32 %76, %12\l  %235 = add i32 %234, %28\l  %236 = add i32 %235, %72\l  %237 = sext i32 %236 to i64\l  %238 = getelementptr inbounds float, float addrspace(1)* %5, i64 %237\l  %239 = load float, float addrspace(1)* %238, align 4, !tbaa !22\l  %240 = fadd contract float %233, %239\l  store float %240, float addrspace(1)* %238, align 4, !tbaa !22\l  %241 = add i32 %76, %74\l  %242 = icmp slt i32 %241, %18\l  br i1 %242, label %75, label %243, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x5051370:s0 -> Node0x5051270;
	Node0x5051370:s1 -> Node0x5050010;
	Node0x5050010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%243:\l243:                                              \l  %244 = add i32 %53, %62\l  %245 = add i32 %244, %56\l  %246 = icmp slt i32 %245, %37\l  br i1 %246, label %61, label %247, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x5050010:s0 -> Node0x504fee0;
	Node0x5050010:s1 -> Node0x504ebf0;
	Node0x504ebf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%247:\l247:                                              \l  ret void\l}"];
}
