digraph "CFG for '_Z10bestFilterPKdPKfPfPiS4_S4_' function" {
	label="CFG for '_Z10bestFilterPKdPKfPfPiS4_S4_' function";

	Node0x4d8f070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = load double, double addrspace(1)* %0, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %10 = fptosi double %9 to i32\l  %11 = getelementptr inbounds double, double addrspace(1)* %0, i64 9\l  %12 = load double, double addrspace(1)* %11, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %13 = fptosi double %12 to i32\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !10, !invariant.load\l... !9\l  %18 = zext i16 %17 to i32\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %20 = bitcast i8 addrspace(4)* %19 to i32 addrspace(4)*\l  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !11\l  %22 = mul i32 %8, %18\l  %23 = add i32 %22, %7\l  %24 = icmp slt i32 %23, %10\l  br i1 %24, label %25, label %161\l|{<s0>T|<s1>F}}"];
	Node0x4d8f070:s0 -> Node0x4d92350;
	Node0x4d8f070:s1 -> Node0x4d923e0;
	Node0x4d92350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%25:\l25:                                               \l  %26 = icmp sgt i32 %13, 0\l  %27 = udiv i32 %21, %18\l  %28 = mul i32 %27, %18\l  %29 = icmp ugt i32 %21, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %18\l  %33 = and i32 %13, 3\l  %34 = icmp ult i32 %13, 4\l  %35 = and i32 %13, -4\l  %36 = icmp eq i32 %33, 0\l  br label %37\l}"];
	Node0x4d92350 -> Node0x4d92ce0;
	Node0x4d92ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%37:\l37:                                               \l  %38 = phi float [ 0.000000e+00, %25 ], [ %154, %151 ]\l  %39 = phi i32 [ %23, %25 ], [ %159, %151 ]\l  %40 = phi i32 [ 0, %25 ], [ %152, %151 ]\l  br i1 %26, label %41, label %151\l|{<s0>T|<s1>F}}"];
	Node0x4d92ce0:s0 -> Node0x4d93ba0;
	Node0x4d92ce0:s1 -> Node0x4d93820;
	Node0x4d93ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%41:\l41:                                               \l  br i1 %34, label %118, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4d93ba0:s0 -> Node0x4d93ce0;
	Node0x4d93ba0:s1 -> Node0x4d93d30;
	Node0x4d93d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%42:\l42:                                               \l  %43 = phi float [ %114, %111 ], [ %38, %41 ]\l  %44 = phi i32 [ %113, %111 ], [ 0, %41 ]\l  %45 = phi i32 [ %112, %111 ], [ %40, %41 ]\l  %46 = phi i32 [ %115, %111 ], [ 0, %41 ]\l  %47 = phi i32 [ %116, %111 ], [ 0, %41 ]\l  %48 = mul nsw i32 %46, %10\l  %49 = add nsw i32 %48, %39\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !20\l  %53 = fpext float %52 to double\l  %54 = fpext float %43 to double\l  %55 = fadd contract double %54, 0x3EB0C6F7A0B5ED8D\l  %56 = fcmp contract olt double %55, %53\l  br i1 %56, label %57, label %60\l|{<s0>T|<s1>F}}"];
	Node0x4d93d30:s0 -> Node0x4d94ab0;
	Node0x4d93d30:s1 -> Node0x4d94b40;
	Node0x4d94ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%57:\l57:                                               \l  %58 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %50\l  %59 = load i32, i32 addrspace(1)* %58, align 4, !tbaa !22\l  br label %60\l}"];
	Node0x4d94ab0 -> Node0x4d94b40;
	Node0x4d94b40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%60:\l60:                                               \l  %61 = phi i32 [ %46, %57 ], [ %45, %42 ]\l  %62 = phi i32 [ %59, %57 ], [ %44, %42 ]\l  %63 = phi float [ %52, %57 ], [ %43, %42 ]\l  %64 = or i32 %46, 1\l  %65 = mul nsw i32 %64, %10\l  %66 = add nsw i32 %65, %39\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !20\l  %70 = fpext float %69 to double\l  %71 = fpext float %63 to double\l  %72 = fadd contract double %71, 0x3EB0C6F7A0B5ED8D\l  %73 = fcmp contract olt double %72, %70\l  br i1 %73, label %74, label %77\l|{<s0>T|<s1>F}}"];
	Node0x4d94b40:s0 -> Node0x4d95e60;
	Node0x4d94b40:s1 -> Node0x4d95eb0;
	Node0x4d95e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%74:\l74:                                               \l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %67\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !22\l  br label %77\l}"];
	Node0x4d95e60 -> Node0x4d95eb0;
	Node0x4d95eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%77:\l77:                                               \l  %78 = phi i32 [ %64, %74 ], [ %61, %60 ]\l  %79 = phi i32 [ %76, %74 ], [ %62, %60 ]\l  %80 = phi float [ %69, %74 ], [ %63, %60 ]\l  %81 = or i32 %46, 2\l  %82 = mul nsw i32 %81, %10\l  %83 = add nsw i32 %82, %39\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !20\l  %87 = fpext float %86 to double\l  %88 = fpext float %80 to double\l  %89 = fadd contract double %88, 0x3EB0C6F7A0B5ED8D\l  %90 = fcmp contract olt double %89, %87\l  br i1 %90, label %91, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4d95eb0:s0 -> Node0x4d96ef0;
	Node0x4d95eb0:s1 -> Node0x4d96f40;
	Node0x4d96ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%91:\l91:                                               \l  %92 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %84\l  %93 = load i32, i32 addrspace(1)* %92, align 4, !tbaa !22\l  br label %94\l}"];
	Node0x4d96ef0 -> Node0x4d96f40;
	Node0x4d96f40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%94:\l94:                                               \l  %95 = phi i32 [ %81, %91 ], [ %78, %77 ]\l  %96 = phi i32 [ %93, %91 ], [ %79, %77 ]\l  %97 = phi float [ %86, %91 ], [ %80, %77 ]\l  %98 = or i32 %46, 3\l  %99 = mul nsw i32 %98, %10\l  %100 = add nsw i32 %99, %39\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !20\l  %104 = fpext float %103 to double\l  %105 = fpext float %97 to double\l  %106 = fadd contract double %105, 0x3EB0C6F7A0B5ED8D\l  %107 = fcmp contract olt double %106, %104\l  br i1 %107, label %108, label %111\l|{<s0>T|<s1>F}}"];
	Node0x4d96f40:s0 -> Node0x4d97940;
	Node0x4d96f40:s1 -> Node0x4d93ea0;
	Node0x4d97940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%108:\l108:                                              \l  %109 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %101\l  %110 = load i32, i32 addrspace(1)* %109, align 4, !tbaa !22\l  br label %111\l}"];
	Node0x4d97940 -> Node0x4d93ea0;
	Node0x4d93ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%111:\l111:                                              \l  %112 = phi i32 [ %98, %108 ], [ %95, %94 ]\l  %113 = phi i32 [ %110, %108 ], [ %96, %94 ]\l  %114 = phi float [ %103, %108 ], [ %97, %94 ]\l  %115 = add nuw nsw i32 %46, 4\l  %116 = add i32 %47, 4\l  %117 = icmp eq i32 %116, %35\l  br i1 %117, label %118, label %42, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4d93ea0:s0 -> Node0x4d93ce0;
	Node0x4d93ea0:s1 -> Node0x4d93d30;
	Node0x4d93ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%118:\l118:                                              \l  %119 = phi i32 [ undef, %41 ], [ %112, %111 ]\l  %120 = phi i32 [ undef, %41 ], [ %113, %111 ]\l  %121 = phi float [ undef, %41 ], [ %114, %111 ]\l  %122 = phi float [ %38, %41 ], [ %114, %111 ]\l  %123 = phi i32 [ 0, %41 ], [ %113, %111 ]\l  %124 = phi i32 [ %40, %41 ], [ %112, %111 ]\l  %125 = phi i32 [ 0, %41 ], [ %115, %111 ]\l  br i1 %36, label %151, label %126\l|{<s0>T|<s1>F}}"];
	Node0x4d93ce0:s0 -> Node0x4d93820;
	Node0x4d93ce0:s1 -> Node0x4d988e0;
	Node0x4d988e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%126:\l126:                                              \l  %127 = phi float [ %147, %144 ], [ %122, %118 ]\l  %128 = phi i32 [ %146, %144 ], [ %123, %118 ]\l  %129 = phi i32 [ %145, %144 ], [ %124, %118 ]\l  %130 = phi i32 [ %148, %144 ], [ %125, %118 ]\l  %131 = phi i32 [ %149, %144 ], [ 0, %118 ]\l  %132 = mul nsw i32 %130, %10\l  %133 = add nsw i32 %132, %39\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %1, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !20\l  %137 = fpext float %136 to double\l  %138 = fpext float %127 to double\l  %139 = fadd contract double %138, 0x3EB0C6F7A0B5ED8D\l  %140 = fcmp contract olt double %139, %137\l  br i1 %140, label %141, label %144\l|{<s0>T|<s1>F}}"];
	Node0x4d988e0:s0 -> Node0x4d99720;
	Node0x4d988e0:s1 -> Node0x4d989e0;
	Node0x4d99720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%141:\l141:                                              \l  %142 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %134\l  %143 = load i32, i32 addrspace(1)* %142, align 4, !tbaa !22\l  br label %144\l}"];
	Node0x4d99720 -> Node0x4d989e0;
	Node0x4d989e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%144:\l144:                                              \l  %145 = phi i32 [ %130, %141 ], [ %129, %126 ]\l  %146 = phi i32 [ %143, %141 ], [ %128, %126 ]\l  %147 = phi float [ %136, %141 ], [ %127, %126 ]\l  %148 = add nuw nsw i32 %130, 1\l  %149 = add i32 %131, 1\l  %150 = icmp eq i32 %149, %33\l  br i1 %150, label %151, label %126, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4d989e0:s0 -> Node0x4d93820;
	Node0x4d989e0:s1 -> Node0x4d988e0;
	Node0x4d93820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%151:\l151:                                              \l  %152 = phi i32 [ %40, %37 ], [ %119, %118 ], [ %145, %144 ]\l  %153 = phi i32 [ 0, %37 ], [ %120, %118 ], [ %146, %144 ]\l  %154 = phi float [ %38, %37 ], [ %121, %118 ], [ %147, %144 ]\l  %155 = sext i32 %39 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %2, i64 %155\l  store float %154, float addrspace(1)* %156, align 4, !tbaa !20\l  %157 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %155\l  store i32 %152, i32 addrspace(1)* %157, align 4, !tbaa !22\l  %158 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %155\l  store i32 %153, i32 addrspace(1)* %158, align 4, !tbaa !22\l  %159 = add i32 %32, %39\l  %160 = icmp slt i32 %159, %10\l  br i1 %160, label %37, label %161, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x4d93820:s0 -> Node0x4d92ce0;
	Node0x4d93820:s1 -> Node0x4d923e0;
	Node0x4d923e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%161:\l161:                                              \l  ret void\l}"];
}
