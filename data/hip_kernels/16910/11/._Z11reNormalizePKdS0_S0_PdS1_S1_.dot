digraph "CFG for '_Z11reNormalizePKdS0_S0_PdS1_S1_' function" {
	label="CFG for '_Z11reNormalizePKdS0_S0_PdS1_S1_' function";

	Node0x523c240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%6:\l  %7 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %8 = load double, double addrspace(1)* %7, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %9 = fptosi double %8 to i32\l  %10 = freeze i32 %9\l  %11 = getelementptr inbounds double, double addrspace(1)* %0, i64 9\l  %12 = load double, double addrspace(1)* %11, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %13 = fptosi double %12 to i32\l  %14 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %15 = load double, double addrspace(1)* %14, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %16 = fptosi double %15 to i32\l  %17 = getelementptr inbounds double, double addrspace(1)* %0, i64 6\l  %18 = load double, double addrspace(1)* %17, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %19 = fptosi double %18 to i32\l  %20 = freeze i32 %19\l  %21 = getelementptr inbounds double, double addrspace(1)* %0, i64 11\l  %22 = load double, double addrspace(1)* %21, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %23 = fptosi double %22 to i32\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %26 = freeze i32 %25\l  %27 = icmp sgt i32 %20, 0\l  br i1 %27, label %28, label %53\l|{<s0>T|<s1>F}}"];
	Node0x523c240:s0 -> Node0x523f310;
	Node0x523c240:s1 -> Node0x523f3a0;
	Node0x523f310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%28:\l28:                                               \l  %29 = and i32 %20, 3\l  %30 = icmp ult i32 %20, 4\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x523f310:s0 -> Node0x523f660;
	Node0x523f310:s1 -> Node0x523f6b0;
	Node0x523f6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%31:\l31:                                               \l  %32 = and i32 %20, -4\l  br label %61\l}"];
	Node0x523f6b0 -> Node0x523e7d0;
	Node0x523f660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%33:\l33:                                               \l  %34 = phi i32 [ 0, %28 ], [ %111, %61 ]\l  %35 = icmp eq i32 %29, 0\l  br i1 %35, label %53, label %36\l|{<s0>T|<s1>F}}"];
	Node0x523f660:s0 -> Node0x523f3a0;
	Node0x523f660:s1 -> Node0x523fc00;
	Node0x523fc00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%36:\l36:                                               \l  %37 = phi i32 [ %50, %36 ], [ %34, %33 ]\l  %38 = phi i32 [ %51, %36 ], [ 0, %33 ]\l  %39 = mul i32 %37, %16\l  %40 = add i32 %39, %24\l  %41 = mul i32 %40, %10\l  %42 = add i32 %41, %26\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %3, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %46 = mul nsw i32 %37, %10\l  %47 = add nsw i32 %46, %26\l  %48 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %47\l  %49 = addrspacecast double addrspace(3)* %48 to double*\l  store volatile double %45, double* %49, align 8, !tbaa !4\l  %50 = add nuw nsw i32 %37, 1\l  %51 = add i32 %38, 1\l  %52 = icmp eq i32 %51, %29\l  br i1 %52, label %53, label %36, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x523fc00:s0 -> Node0x523f3a0;
	Node0x523fc00:s1 -> Node0x523fc00;
	Node0x523f3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%53:\l53:                                               \l  %54 = mul nsw i32 %20, %13\l  %55 = icmp slt i32 %26, %54\l  br i1 %55, label %56, label %131\l|{<s0>T|<s1>F}}"];
	Node0x523f3a0:s0 -> Node0x5240520;
	Node0x523f3a0:s1 -> Node0x5240b30;
	Node0x5240520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%56:\l56:                                               \l  %57 = mul nsw i32 %24, %13\l  %58 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %59 = getelementptr i8, i8 addrspace(4)* %58, i64 4\l  %60 = bitcast i8 addrspace(4)* %59 to i16 addrspace(4)*\l  br label %114\l}"];
	Node0x5240520 -> Node0x5240fb0;
	Node0x523e7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%61:\l61:                                               \l  %62 = phi i32 [ 0, %31 ], [ %111, %61 ]\l  %63 = phi i32 [ 0, %31 ], [ %112, %61 ]\l  %64 = mul i32 %62, %16\l  %65 = add i32 %64, %24\l  %66 = mul i32 %65, %10\l  %67 = add i32 %66, %26\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %3, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %71 = mul nsw i32 %62, %10\l  %72 = add nsw i32 %71, %26\l  %73 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %72\l  %74 = addrspacecast double addrspace(3)* %73 to double*\l  store volatile double %70, double* %74, align 8, !tbaa !4\l  %75 = or i32 %62, 1\l  %76 = mul i32 %75, %16\l  %77 = add i32 %76, %24\l  %78 = mul i32 %77, %10\l  %79 = add i32 %78, %26\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %3, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %83 = mul nsw i32 %75, %10\l  %84 = add nsw i32 %83, %26\l  %85 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %84\l  %86 = addrspacecast double addrspace(3)* %85 to double*\l  store volatile double %82, double* %86, align 8, !tbaa !4\l  %87 = or i32 %62, 2\l  %88 = mul i32 %87, %16\l  %89 = add i32 %88, %24\l  %90 = mul i32 %89, %10\l  %91 = add i32 %90, %26\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %3, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %95 = mul nsw i32 %87, %10\l  %96 = add nsw i32 %95, %26\l  %97 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %96\l  %98 = addrspacecast double addrspace(3)* %97 to double*\l  store volatile double %94, double* %98, align 8, !tbaa !4\l  %99 = or i32 %62, 3\l  %100 = mul i32 %99, %16\l  %101 = add i32 %100, %24\l  %102 = mul i32 %101, %10\l  %103 = add i32 %102, %26\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds double, double addrspace(1)* %3, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %107 = mul nsw i32 %99, %10\l  %108 = add nsw i32 %107, %26\l  %109 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %108\l  %110 = addrspacecast double addrspace(3)* %109 to double*\l  store volatile double %106, double* %110, align 8, !tbaa !4\l  %111 = add nuw nsw i32 %62, 4\l  %112 = add i32 %63, 4\l  %113 = icmp eq i32 %112, %32\l  br i1 %113, label %33, label %61, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x523e7d0:s0 -> Node0x523f660;
	Node0x523e7d0:s1 -> Node0x523e7d0;
	Node0x5240fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%114:\l114:                                              \l  %115 = phi i32 [ %26, %56 ], [ %129, %114 ]\l  %116 = srem i32 %115, %13\l  %117 = add nsw i32 %116, %57\l  %118 = sub nsw i32 %115, %116\l  %119 = mul nsw i32 %118, %16\l  %120 = add nsw i32 %117, %119\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds double, double addrspace(1)* %4, i64 %121\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %124 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %115\l  %125 = addrspacecast double addrspace(3)* %124 to double*\l  store volatile double %123, double* %125, align 8, !tbaa !4\l  %126 = load i16, i16 addrspace(4)* %60, align 4, !range !14, !invariant.load\l... !8\l  %127 = freeze i16 %126\l  %128 = zext i16 %127 to i32\l  %129 = add i32 %115, %128\l  %130 = icmp slt i32 %129, %54\l  br i1 %130, label %114, label %131, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5240fb0:s0 -> Node0x5240fb0;
	Node0x5240fb0:s1 -> Node0x5240b30;
	Node0x5240b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%131:\l131:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %132 = icmp slt i32 %26, %20\l  br i1 %132, label %133, label %256\l|{<s0>T|<s1>F}}"];
	Node0x5240b30:s0 -> Node0x5244820;
	Node0x5240b30:s1 -> Node0x52448b0;
	Node0x5244820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%133:\l133:                                              \l  %134 = icmp sgt i32 %13, 0\l  br i1 %134, label %135, label %230\l|{<s0>T|<s1>F}}"];
	Node0x5244820:s0 -> Node0x5244a80;
	Node0x5244820:s1 -> Node0x5244ad0;
	Node0x5244a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%135:\l135:                                              \l  %136 = mul nsw i32 %26, %13\l  %137 = and i32 %13, 7\l  %138 = icmp ult i32 %13, 8\l  br i1 %138, label %211, label %139\l|{<s0>T|<s1>F}}"];
	Node0x5244a80:s0 -> Node0x5244df0;
	Node0x5244a80:s1 -> Node0x5244e40;
	Node0x5244e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%139:\l139:                                              \l  %140 = and i32 %13, -8\l  br label %141\l}"];
	Node0x5244e40 -> Node0x5245040;
	Node0x5245040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%141:\l141:                                              \l  %142 = phi double [ 0.000000e+00, %139 ], [ %207, %141 ]\l  %143 = phi i32 [ 0, %139 ], [ %208, %141 ]\l  %144 = phi i32 [ 0, %139 ], [ %209, %141 ]\l  %145 = add nsw i32 %143, %136\l  %146 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %145\l  %147 = addrspacecast double addrspace(3)* %146 to double*\l  %148 = load volatile double, double* %147, align 8, !tbaa !4\l  %149 = load volatile double, double* %147, align 8, !tbaa !4\l  %150 = fmul contract double %148, %149\l  %151 = fadd contract double %142, %150\l  %152 = or i32 %143, 1\l  %153 = add nsw i32 %152, %136\l  %154 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %153\l  %155 = addrspacecast double addrspace(3)* %154 to double*\l  %156 = load volatile double, double* %155, align 8, !tbaa !4\l  %157 = load volatile double, double* %155, align 8, !tbaa !4\l  %158 = fmul contract double %156, %157\l  %159 = fadd contract double %151, %158\l  %160 = or i32 %143, 2\l  %161 = add nsw i32 %160, %136\l  %162 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %161\l  %163 = addrspacecast double addrspace(3)* %162 to double*\l  %164 = load volatile double, double* %163, align 8, !tbaa !4\l  %165 = load volatile double, double* %163, align 8, !tbaa !4\l  %166 = fmul contract double %164, %165\l  %167 = fadd contract double %159, %166\l  %168 = or i32 %143, 3\l  %169 = add nsw i32 %168, %136\l  %170 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %169\l  %171 = addrspacecast double addrspace(3)* %170 to double*\l  %172 = load volatile double, double* %171, align 8, !tbaa !4\l  %173 = load volatile double, double* %171, align 8, !tbaa !4\l  %174 = fmul contract double %172, %173\l  %175 = fadd contract double %167, %174\l  %176 = or i32 %143, 4\l  %177 = add nsw i32 %176, %136\l  %178 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %177\l  %179 = addrspacecast double addrspace(3)* %178 to double*\l  %180 = load volatile double, double* %179, align 8, !tbaa !4\l  %181 = load volatile double, double* %179, align 8, !tbaa !4\l  %182 = fmul contract double %180, %181\l  %183 = fadd contract double %175, %182\l  %184 = or i32 %143, 5\l  %185 = add nsw i32 %184, %136\l  %186 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %185\l  %187 = addrspacecast double addrspace(3)* %186 to double*\l  %188 = load volatile double, double* %187, align 8, !tbaa !4\l  %189 = load volatile double, double* %187, align 8, !tbaa !4\l  %190 = fmul contract double %188, %189\l  %191 = fadd contract double %183, %190\l  %192 = or i32 %143, 6\l  %193 = add nsw i32 %192, %136\l  %194 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %193\l  %195 = addrspacecast double addrspace(3)* %194 to double*\l  %196 = load volatile double, double* %195, align 8, !tbaa !4\l  %197 = load volatile double, double* %195, align 8, !tbaa !4\l  %198 = fmul contract double %196, %197\l  %199 = fadd contract double %191, %198\l  %200 = or i32 %143, 7\l  %201 = add nsw i32 %200, %136\l  %202 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %201\l  %203 = addrspacecast double addrspace(3)* %202 to double*\l  %204 = load volatile double, double* %203, align 8, !tbaa !4\l  %205 = load volatile double, double* %203, align 8, !tbaa !4\l  %206 = fmul contract double %204, %205\l  %207 = fadd contract double %199, %206\l  %208 = add nuw nsw i32 %143, 8\l  %209 = add i32 %144, 8\l  %210 = icmp eq i32 %209, %140\l  br i1 %210, label %211, label %141, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5245040:s0 -> Node0x5244df0;
	Node0x5245040:s1 -> Node0x5245040;
	Node0x5244df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%211:\l211:                                              \l  %212 = phi double [ undef, %135 ], [ %207, %141 ]\l  %213 = phi double [ 0.000000e+00, %135 ], [ %207, %141 ]\l  %214 = phi i32 [ 0, %135 ], [ %208, %141 ]\l  %215 = icmp eq i32 %137, 0\l  br i1 %215, label %230, label %216\l|{<s0>T|<s1>F}}"];
	Node0x5244df0:s0 -> Node0x5244ad0;
	Node0x5244df0:s1 -> Node0x5248690;
	Node0x5248690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%216:\l216:                                              \l  %217 = phi double [ %226, %216 ], [ %213, %211 ]\l  %218 = phi i32 [ %227, %216 ], [ %214, %211 ]\l  %219 = phi i32 [ %228, %216 ], [ 0, %211 ]\l  %220 = add nsw i32 %218, %136\l  %221 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %220\l  %222 = addrspacecast double addrspace(3)* %221 to double*\l  %223 = load volatile double, double* %222, align 8, !tbaa !4\l  %224 = load volatile double, double* %222, align 8, !tbaa !4\l  %225 = fmul contract double %223, %224\l  %226 = fadd contract double %217, %225\l  %227 = add nuw nsw i32 %218, 1\l  %228 = add i32 %219, 1\l  %229 = icmp eq i32 %228, %137\l  br i1 %229, label %230, label %216, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5248690:s0 -> Node0x5244ad0;
	Node0x5248690:s1 -> Node0x5248690;
	Node0x5244ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%230:\l230:                                              \l  %231 = phi double [ 0.000000e+00, %133 ], [ %212, %211 ], [ %226, %216 ]\l  %232 = fcmp olt double %231, 0x1000000000000000\l  %233 = select i1 %232, double 0x4FF0000000000000, double 1.000000e+00\l  %234 = fmul double %231, %233\l  %235 = tail call double @llvm.amdgcn.rsq.f64(double %234)\l  %236 = fmul double %234, %235\l  %237 = fmul double %235, 5.000000e-01\l  %238 = fneg double %237\l  %239 = tail call double @llvm.fma.f64(double %238, double %236, double\l... 5.000000e-01)\l  %240 = tail call double @llvm.fma.f64(double %237, double %239, double %237)\l  %241 = tail call double @llvm.fma.f64(double %236, double %239, double %236)\l  %242 = fneg double %241\l  %243 = tail call double @llvm.fma.f64(double %242, double %241, double %234)\l  %244 = tail call double @llvm.fma.f64(double %243, double %240, double %241)\l  %245 = fneg double %244\l  %246 = tail call double @llvm.fma.f64(double %245, double %244, double %234)\l  %247 = tail call double @llvm.fma.f64(double %246, double %240, double %244)\l  %248 = select i1 %232, double 0x37F0000000000000, double 1.000000e+00\l  %249 = fmul double %248, %247\l  %250 = fcmp oeq double %234, 0.000000e+00\l  %251 = fcmp oeq double %234, 0x7FF0000000000000\l  %252 = or i1 %250, %251\l  %253 = select i1 %252, double %234, double %249\l  %254 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %26\l  %255 = addrspacecast double addrspace(3)* %254 to double*\l  store volatile double %253, double* %255, align 8, !tbaa !4\l  br label %256\l}"];
	Node0x5244ad0 -> Node0x52448b0;
	Node0x52448b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%256:\l256:                                              \l  %257 = icmp eq i32 %26, 0\l  br i1 %257, label %258, label %372\l|{<s0>T|<s1>F}}"];
	Node0x52448b0:s0 -> Node0x524a630;
	Node0x52448b0:s1 -> Node0x5243fc0;
	Node0x524a630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%258:\l258:                                              \l  br i1 %27, label %259, label %344\l|{<s0>T|<s1>F}}"];
	Node0x524a630:s0 -> Node0x5244100;
	Node0x524a630:s1 -> Node0x5244150;
	Node0x5244100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%259:\l259:                                              \l  %260 = and i32 %20, 7\l  %261 = icmp ult i32 %20, 8\l  br i1 %261, label %326, label %262\l|{<s0>T|<s1>F}}"];
	Node0x5244100:s0 -> Node0x52443b0;
	Node0x5244100:s1 -> Node0x5244400;
	Node0x5244400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%262:\l262:                                              \l  %263 = and i32 %20, -8\l  br label %264\l}"];
	Node0x5244400 -> Node0x52445d0;
	Node0x52445d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%264:\l264:                                              \l  %265 = phi double [ 0x3E7AD7F2A0000000, %262 ], [ %322, %264 ]\l  %266 = phi i32 [ 0, %262 ], [ %323, %264 ]\l  %267 = phi i32 [ 0, %262 ], [ %324, %264 ]\l  %268 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %266\l  %269 = addrspacecast double addrspace(3)* %268 to double*\l  %270 = load volatile double, double* %269, align 8, !tbaa !4\l  %271 = load volatile double, double* %269, align 8, !tbaa !4\l  %272 = fmul contract double %270, %271\l  %273 = fadd contract double %265, %272\l  %274 = or i32 %266, 1\l  %275 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %274\l  %276 = addrspacecast double addrspace(3)* %275 to double*\l  %277 = load volatile double, double* %276, align 8, !tbaa !4\l  %278 = load volatile double, double* %276, align 8, !tbaa !4\l  %279 = fmul contract double %277, %278\l  %280 = fadd contract double %273, %279\l  %281 = or i32 %266, 2\l  %282 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %281\l  %283 = addrspacecast double addrspace(3)* %282 to double*\l  %284 = load volatile double, double* %283, align 8, !tbaa !4\l  %285 = load volatile double, double* %283, align 8, !tbaa !4\l  %286 = fmul contract double %284, %285\l  %287 = fadd contract double %280, %286\l  %288 = or i32 %266, 3\l  %289 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %288\l  %290 = addrspacecast double addrspace(3)* %289 to double*\l  %291 = load volatile double, double* %290, align 8, !tbaa !4\l  %292 = load volatile double, double* %290, align 8, !tbaa !4\l  %293 = fmul contract double %291, %292\l  %294 = fadd contract double %287, %293\l  %295 = or i32 %266, 4\l  %296 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %295\l  %297 = addrspacecast double addrspace(3)* %296 to double*\l  %298 = load volatile double, double* %297, align 8, !tbaa !4\l  %299 = load volatile double, double* %297, align 8, !tbaa !4\l  %300 = fmul contract double %298, %299\l  %301 = fadd contract double %294, %300\l  %302 = or i32 %266, 5\l  %303 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %302\l  %304 = addrspacecast double addrspace(3)* %303 to double*\l  %305 = load volatile double, double* %304, align 8, !tbaa !4\l  %306 = load volatile double, double* %304, align 8, !tbaa !4\l  %307 = fmul contract double %305, %306\l  %308 = fadd contract double %301, %307\l  %309 = or i32 %266, 6\l  %310 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %309\l  %311 = addrspacecast double addrspace(3)* %310 to double*\l  %312 = load volatile double, double* %311, align 8, !tbaa !4\l  %313 = load volatile double, double* %311, align 8, !tbaa !4\l  %314 = fmul contract double %312, %313\l  %315 = fadd contract double %308, %314\l  %316 = or i32 %266, 7\l  %317 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %316\l  %318 = addrspacecast double addrspace(3)* %317 to double*\l  %319 = load volatile double, double* %318, align 8, !tbaa !4\l  %320 = load volatile double, double* %318, align 8, !tbaa !4\l  %321 = fmul contract double %319, %320\l  %322 = fadd contract double %315, %321\l  %323 = add nuw nsw i32 %266, 8\l  %324 = add nuw i32 %267, 8\l  %325 = icmp eq i32 %324, %263\l  br i1 %325, label %326, label %264, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x52445d0:s0 -> Node0x52443b0;
	Node0x52445d0:s1 -> Node0x52445d0;
	Node0x52443b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%326:\l326:                                              \l  %327 = phi double [ undef, %259 ], [ %322, %264 ]\l  %328 = phi double [ 0x3E7AD7F2A0000000, %259 ], [ %322, %264 ]\l  %329 = phi i32 [ 0, %259 ], [ %323, %264 ]\l  %330 = icmp eq i32 %260, 0\l  br i1 %330, label %344, label %331\l|{<s0>T|<s1>F}}"];
	Node0x52443b0:s0 -> Node0x5244150;
	Node0x52443b0:s1 -> Node0x524ee90;
	Node0x524ee90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%331:\l331:                                              \l  %332 = phi double [ %340, %331 ], [ %328, %326 ]\l  %333 = phi i32 [ %341, %331 ], [ %329, %326 ]\l  %334 = phi i32 [ %342, %331 ], [ 0, %326 ]\l  %335 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %333\l  %336 = addrspacecast double addrspace(3)* %335 to double*\l  %337 = load volatile double, double* %336, align 8, !tbaa !4\l  %338 = load volatile double, double* %336, align 8, !tbaa !4\l  %339 = fmul contract double %337, %338\l  %340 = fadd contract double %332, %339\l  %341 = add nuw nsw i32 %333, 1\l  %342 = add i32 %334, 1\l  %343 = icmp eq i32 %342, %260\l  br i1 %343, label %344, label %331, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x524ee90:s0 -> Node0x5244150;
	Node0x524ee90:s1 -> Node0x524ee90;
	Node0x5244150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%344:\l344:                                              \l  %345 = phi double [ 0x3E7AD7F2A0000000, %258 ], [ %327, %326 ], [ %340, %331\l... ]\l  %346 = fcmp olt double %345, 0x1000000000000000\l  %347 = select i1 %346, double 0x4FF0000000000000, double 1.000000e+00\l  %348 = fmul double %345, %347\l  %349 = tail call double @llvm.amdgcn.rsq.f64(double %348)\l  %350 = fmul double %348, %349\l  %351 = fmul double %349, 5.000000e-01\l  %352 = fneg double %351\l  %353 = tail call double @llvm.fma.f64(double %352, double %350, double\l... 5.000000e-01)\l  %354 = tail call double @llvm.fma.f64(double %351, double %353, double %351)\l  %355 = tail call double @llvm.fma.f64(double %350, double %353, double %350)\l  %356 = fneg double %355\l  %357 = tail call double @llvm.fma.f64(double %356, double %355, double %348)\l  %358 = tail call double @llvm.fma.f64(double %357, double %354, double %355)\l  %359 = fneg double %358\l  %360 = tail call double @llvm.fma.f64(double %359, double %358, double %348)\l  %361 = tail call double @llvm.fma.f64(double %360, double %354, double %358)\l  %362 = select i1 %346, double 0x37F0000000000000, double 1.000000e+00\l  %363 = fmul double %362, %361\l  %364 = fcmp oeq double %348, 0.000000e+00\l  %365 = fcmp oeq double %348, 0x7FF0000000000000\l  %366 = or i1 %364, %365\l  %367 = select i1 %366, double %348, double %363\l  %368 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %20\l  %369 = addrspacecast double addrspace(3)* %368 to double*\l  store volatile double %367, double* %369, align 8, !tbaa !4\l  %370 = sext i32 %24 to i64\l  %371 = getelementptr inbounds double, double addrspace(1)* %5, i64 %370\l  store double %367, double addrspace(1)* %371, align 8, !tbaa !4\l  br label %372\l}"];
	Node0x5244150 -> Node0x5243fc0;
	Node0x5243fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%372:\l372:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %55, label %373, label %399\l|{<s0>T|<s1>F}}"];
	Node0x5243fc0:s0 -> Node0x5250f60;
	Node0x5243fc0:s1 -> Node0x5250fb0;
	Node0x5250f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%373:\l373:                                              \l  %374 = getelementptr inbounds [4 x double], [4 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sS, i32 0, i32 %20\l  %375 = addrspacecast double addrspace(3)* %374 to double*\l  %376 = mul nsw i32 %24, %13\l  %377 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %378 = getelementptr i8, i8 addrspace(4)* %377, i64 4\l  %379 = bitcast i8 addrspace(4)* %378 to i16 addrspace(4)*\l  %380 = load i16, i16 addrspace(4)* %379, align 4, !range !14,\l... !invariant.load !8\l  %381 = freeze i16 %380\l  %382 = zext i16 %381 to i32\l  br label %383\l}"];
	Node0x5250f60 -> Node0x5251c00;
	Node0x5251c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%383:\l383:                                              \l  %384 = phi i32 [ %26, %373 ], [ %397, %383 ]\l  %385 = getelementptr inbounds [3072 x double], [3072 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sU, i32 0, i32 %384\l  %386 = addrspacecast double addrspace(3)* %385 to double*\l  %387 = load volatile double, double* %386, align 8, !tbaa !4\l  %388 = load volatile double, double* %375, align 8, !tbaa !4\l  %389 = fdiv contract double %387, %388\l  %390 = srem i32 %384, %13\l  %391 = add nsw i32 %390, %376\l  %392 = sub nsw i32 %384, %390\l  %393 = mul nsw i32 %392, %16\l  %394 = add nsw i32 %391, %393\l  %395 = sext i32 %394 to i64\l  %396 = getelementptr inbounds double, double addrspace(1)* %4, i64 %395\l  store double %389, double addrspace(1)* %396, align 8, !tbaa !4\l  %397 = add i32 %384, %382\l  %398 = icmp slt i32 %397, %54\l  br i1 %398, label %383, label %399, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5251c00:s0 -> Node0x5251c00;
	Node0x5251c00:s1 -> Node0x5250fb0;
	Node0x5250fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%399:\l399:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %400 = icmp sgt i32 %10, 0\l  br i1 %400, label %401, label %431\l|{<s0>T|<s1>F}}"];
	Node0x5250fb0:s0 -> Node0x5252990;
	Node0x5250fb0:s1 -> Node0x52529e0;
	Node0x5252990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%401:\l401:                                              \l  %402 = and i32 %10, 7\l  %403 = icmp ult i32 %10, 8\l  br i1 %403, label %406, label %404\l|{<s0>T|<s1>F}}"];
	Node0x5252990:s0 -> Node0x5252c40;
	Node0x5252990:s1 -> Node0x5252c90;
	Node0x5252c90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%404:\l404:                                              \l  %405 = and i32 %10, -8\l  br label %445\l}"];
	Node0x5252c90 -> Node0x5252e60;
	Node0x5252c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%406:\l406:                                              \l  %407 = phi i32 [ undef, %401 ], [ %543, %542 ]\l  %408 = phi double [ 0.000000e+00, %401 ], [ %544, %542 ]\l  %409 = phi i32 [ 0, %401 ], [ %545, %542 ]\l  %410 = phi i32 [ 0, %401 ], [ %543, %542 ]\l  %411 = icmp eq i32 %402, 0\l  br i1 %411, label %431, label %412\l|{<s0>T|<s1>F}}"];
	Node0x5252c40:s0 -> Node0x52529e0;
	Node0x5252c40:s1 -> Node0x5253380;
	Node0x5253380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%412:\l412:                                              \l  %413 = phi double [ %427, %425 ], [ %408, %406 ]\l  %414 = phi i32 [ %428, %425 ], [ %409, %406 ]\l  %415 = phi i32 [ %426, %425 ], [ %410, %406 ]\l  %416 = phi i32 [ %429, %425 ], [ 0, %406 ]\l  %417 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %414\l  %418 = addrspacecast double addrspace(3)* %417 to double*\l  %419 = load volatile double, double* %418, align 8, !tbaa !4\l  %420 = tail call double @llvm.fabs.f64(double %419)\l  %421 = fcmp contract ogt double %420, %413\l  br i1 %421, label %422, label %425\l|{<s0>T|<s1>F}}"];
	Node0x5253380:s0 -> Node0x5253d50;
	Node0x5253380:s1 -> Node0x52534c0;
	Node0x5253d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%422:\l422:                                              \l  %423 = load volatile double, double* %418, align 8, !tbaa !4\l  %424 = tail call double @llvm.fabs.f64(double %423)\l  br label %425\l}"];
	Node0x5253d50 -> Node0x52534c0;
	Node0x52534c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%425:\l425:                                              \l  %426 = phi i32 [ %414, %422 ], [ %415, %412 ]\l  %427 = phi double [ %424, %422 ], [ %413, %412 ]\l  %428 = add nuw nsw i32 %414, 1\l  %429 = add i32 %416, 1\l  %430 = icmp eq i32 %429, %402\l  br i1 %430, label %431, label %412, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x52534c0:s0 -> Node0x52529e0;
	Node0x52534c0:s1 -> Node0x5253380;
	Node0x52529e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%431:\l431:                                              \l  %432 = phi i32 [ 0, %399 ], [ %407, %406 ], [ %426, %425 ]\l  br i1 %27, label %433, label %611\l|{<s0>T|<s1>F}}"];
	Node0x52529e0:s0 -> Node0x52545d0;
	Node0x52529e0:s1 -> Node0x5254620;
	Node0x52545d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%433:\l433:                                              \l  %434 = sub i32 %26, %23\l  %435 = add i32 %434, %432\l  %436 = srem i32 %435, %10\l  %437 = add nsw i32 %436, %10\l  %438 = srem i32 %437, %10\l  %439 = mul nsw i32 %24, %10\l  %440 = add nsw i32 %439, %26\l  %441 = and i32 %20, 3\l  %442 = icmp ult i32 %20, 4\l  br i1 %442, label %593, label %443\l|{<s0>T|<s1>F}}"];
	Node0x52545d0:s0 -> Node0x5254c30;
	Node0x52545d0:s1 -> Node0x5254c80;
	Node0x5254c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%443:\l443:                                              \l  %444 = and i32 %20, -4\l  br label %548\l}"];
	Node0x5254c80 -> Node0x5254e10;
	Node0x5252e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%445:\l445:                                              \l  %446 = phi double [ 0.000000e+00, %404 ], [ %544, %542 ]\l  %447 = phi i32 [ 0, %404 ], [ %545, %542 ]\l  %448 = phi i32 [ 0, %404 ], [ %543, %542 ]\l  %449 = phi i32 [ 0, %404 ], [ %546, %542 ]\l  %450 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %447\l  %451 = addrspacecast double addrspace(3)* %450 to double*\l  %452 = load volatile double, double* %451, align 8, !tbaa !4\l  %453 = tail call double @llvm.fabs.f64(double %452)\l  %454 = fcmp contract ogt double %453, %446\l  br i1 %454, label %455, label %458\l|{<s0>T|<s1>F}}"];
	Node0x5252e60:s0 -> Node0x5255500;
	Node0x5252e60:s1 -> Node0x5255550;
	Node0x5255500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%455:\l455:                                              \l  %456 = load volatile double, double* %451, align 8, !tbaa !4\l  %457 = tail call double @llvm.fabs.f64(double %456)\l  br label %458\l}"];
	Node0x5255500 -> Node0x5255550;
	Node0x5255550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%458:\l458:                                              \l  %459 = phi i32 [ %447, %455 ], [ %448, %445 ]\l  %460 = phi double [ %457, %455 ], [ %446, %445 ]\l  %461 = or i32 %447, 1\l  %462 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %461\l  %463 = addrspacecast double addrspace(3)* %462 to double*\l  %464 = load volatile double, double* %463, align 8, !tbaa !4\l  %465 = tail call double @llvm.fabs.f64(double %464)\l  %466 = fcmp contract ogt double %465, %460\l  br i1 %466, label %467, label %470\l|{<s0>T|<s1>F}}"];
	Node0x5255550:s0 -> Node0x5255d70;
	Node0x5255550:s1 -> Node0x5255dc0;
	Node0x5255d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%467:\l467:                                              \l  %468 = load volatile double, double* %463, align 8, !tbaa !4\l  %469 = tail call double @llvm.fabs.f64(double %468)\l  br label %470\l}"];
	Node0x5255d70 -> Node0x5255dc0;
	Node0x5255dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%470:\l470:                                              \l  %471 = phi i32 [ %461, %467 ], [ %459, %458 ]\l  %472 = phi double [ %469, %467 ], [ %460, %458 ]\l  %473 = or i32 %447, 2\l  %474 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %473\l  %475 = addrspacecast double addrspace(3)* %474 to double*\l  %476 = load volatile double, double* %475, align 8, !tbaa !4\l  %477 = tail call double @llvm.fabs.f64(double %476)\l  %478 = fcmp contract ogt double %477, %472\l  br i1 %478, label %479, label %482\l|{<s0>T|<s1>F}}"];
	Node0x5255dc0:s0 -> Node0x52569b0;
	Node0x5255dc0:s1 -> Node0x5256a00;
	Node0x52569b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%479:\l479:                                              \l  %480 = load volatile double, double* %475, align 8, !tbaa !4\l  %481 = tail call double @llvm.fabs.f64(double %480)\l  br label %482\l}"];
	Node0x52569b0 -> Node0x5256a00;
	Node0x5256a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%482:\l482:                                              \l  %483 = phi i32 [ %473, %479 ], [ %471, %470 ]\l  %484 = phi double [ %481, %479 ], [ %472, %470 ]\l  %485 = or i32 %447, 3\l  %486 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %485\l  %487 = addrspacecast double addrspace(3)* %486 to double*\l  %488 = load volatile double, double* %487, align 8, !tbaa !4\l  %489 = tail call double @llvm.fabs.f64(double %488)\l  %490 = fcmp contract ogt double %489, %484\l  br i1 %490, label %491, label %494\l|{<s0>T|<s1>F}}"];
	Node0x5256a00:s0 -> Node0x52571e0;
	Node0x5256a00:s1 -> Node0x5257230;
	Node0x52571e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%491:\l491:                                              \l  %492 = load volatile double, double* %487, align 8, !tbaa !4\l  %493 = tail call double @llvm.fabs.f64(double %492)\l  br label %494\l}"];
	Node0x52571e0 -> Node0x5257230;
	Node0x5257230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%494:\l494:                                              \l  %495 = phi i32 [ %485, %491 ], [ %483, %482 ]\l  %496 = phi double [ %493, %491 ], [ %484, %482 ]\l  %497 = or i32 %447, 4\l  %498 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %497\l  %499 = addrspacecast double addrspace(3)* %498 to double*\l  %500 = load volatile double, double* %499, align 8, !tbaa !4\l  %501 = tail call double @llvm.fabs.f64(double %500)\l  %502 = fcmp contract ogt double %501, %496\l  br i1 %502, label %503, label %506\l|{<s0>T|<s1>F}}"];
	Node0x5257230:s0 -> Node0x5257a10;
	Node0x5257230:s1 -> Node0x5257a60;
	Node0x5257a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%503:\l503:                                              \l  %504 = load volatile double, double* %499, align 8, !tbaa !4\l  %505 = tail call double @llvm.fabs.f64(double %504)\l  br label %506\l}"];
	Node0x5257a10 -> Node0x5257a60;
	Node0x5257a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%506:\l506:                                              \l  %507 = phi i32 [ %497, %503 ], [ %495, %494 ]\l  %508 = phi double [ %505, %503 ], [ %496, %494 ]\l  %509 = or i32 %447, 5\l  %510 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %509\l  %511 = addrspacecast double addrspace(3)* %510 to double*\l  %512 = load volatile double, double* %511, align 8, !tbaa !4\l  %513 = tail call double @llvm.fabs.f64(double %512)\l  %514 = fcmp contract ogt double %513, %508\l  br i1 %514, label %515, label %518\l|{<s0>T|<s1>F}}"];
	Node0x5257a60:s0 -> Node0x524a9e0;
	Node0x5257a60:s1 -> Node0x524aa30;
	Node0x524a9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%515:\l515:                                              \l  %516 = load volatile double, double* %511, align 8, !tbaa !4\l  %517 = tail call double @llvm.fabs.f64(double %516)\l  br label %518\l}"];
	Node0x524a9e0 -> Node0x524aa30;
	Node0x524aa30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%518:\l518:                                              \l  %519 = phi i32 [ %509, %515 ], [ %507, %506 ]\l  %520 = phi double [ %517, %515 ], [ %508, %506 ]\l  %521 = or i32 %447, 6\l  %522 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %521\l  %523 = addrspacecast double addrspace(3)* %522 to double*\l  %524 = load volatile double, double* %523, align 8, !tbaa !4\l  %525 = tail call double @llvm.fabs.f64(double %524)\l  %526 = fcmp contract ogt double %525, %520\l  br i1 %526, label %527, label %530\l|{<s0>T|<s1>F}}"];
	Node0x524aa30:s0 -> Node0x524b210;
	Node0x524aa30:s1 -> Node0x524b260;
	Node0x524b210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%527:\l527:                                              \l  %528 = load volatile double, double* %523, align 8, !tbaa !4\l  %529 = tail call double @llvm.fabs.f64(double %528)\l  br label %530\l}"];
	Node0x524b210 -> Node0x524b260;
	Node0x524b260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%530:\l530:                                              \l  %531 = phi i32 [ %521, %527 ], [ %519, %518 ]\l  %532 = phi double [ %529, %527 ], [ %520, %518 ]\l  %533 = or i32 %447, 7\l  %534 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %533\l  %535 = addrspacecast double addrspace(3)* %534 to double*\l  %536 = load volatile double, double* %535, align 8, !tbaa !4\l  %537 = tail call double @llvm.fabs.f64(double %536)\l  %538 = fcmp contract ogt double %537, %532\l  br i1 %538, label %539, label %542\l|{<s0>T|<s1>F}}"];
	Node0x524b260:s0 -> Node0x525a2c0;
	Node0x524b260:s1 -> Node0x5252f20;
	Node0x525a2c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%539:\l539:                                              \l  %540 = load volatile double, double* %535, align 8, !tbaa !4\l  %541 = tail call double @llvm.fabs.f64(double %540)\l  br label %542\l}"];
	Node0x525a2c0 -> Node0x5252f20;
	Node0x5252f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%542:\l542:                                              \l  %543 = phi i32 [ %533, %539 ], [ %531, %530 ]\l  %544 = phi double [ %541, %539 ], [ %532, %530 ]\l  %545 = add nuw nsw i32 %447, 8\l  %546 = add nuw i32 %449, 8\l  %547 = icmp eq i32 %546, %405\l  br i1 %547, label %406, label %445, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5252f20:s0 -> Node0x5252c40;
	Node0x5252f20:s1 -> Node0x5252e60;
	Node0x5254e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%548:\l548:                                              \l  %549 = phi i32 [ 0, %443 ], [ %590, %548 ]\l  %550 = phi i32 [ 0, %443 ], [ %591, %548 ]\l  %551 = mul nsw i32 %549, %10\l  %552 = add nsw i32 %438, %551\l  %553 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %552\l  %554 = addrspacecast double addrspace(3)* %553 to double*\l  %555 = load volatile double, double* %554, align 8, !tbaa !4\l  %556 = mul nsw i32 %551, %16\l  %557 = add nsw i32 %440, %556\l  %558 = sext i32 %557 to i64\l  %559 = getelementptr inbounds double, double addrspace(1)* %3, i64 %558\l  store double %555, double addrspace(1)* %559, align 8, !tbaa !4\l  %560 = or i32 %549, 1\l  %561 = mul nsw i32 %560, %10\l  %562 = add nsw i32 %438, %561\l  %563 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %562\l  %564 = addrspacecast double addrspace(3)* %563 to double*\l  %565 = load volatile double, double* %564, align 8, !tbaa !4\l  %566 = mul nsw i32 %561, %16\l  %567 = add nsw i32 %440, %566\l  %568 = sext i32 %567 to i64\l  %569 = getelementptr inbounds double, double addrspace(1)* %3, i64 %568\l  store double %565, double addrspace(1)* %569, align 8, !tbaa !4\l  %570 = or i32 %549, 2\l  %571 = mul nsw i32 %570, %10\l  %572 = add nsw i32 %438, %571\l  %573 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %572\l  %574 = addrspacecast double addrspace(3)* %573 to double*\l  %575 = load volatile double, double* %574, align 8, !tbaa !4\l  %576 = mul nsw i32 %571, %16\l  %577 = add nsw i32 %440, %576\l  %578 = sext i32 %577 to i64\l  %579 = getelementptr inbounds double, double addrspace(1)* %3, i64 %578\l  store double %575, double addrspace(1)* %579, align 8, !tbaa !4\l  %580 = or i32 %549, 3\l  %581 = mul nsw i32 %580, %10\l  %582 = add nsw i32 %438, %581\l  %583 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %582\l  %584 = addrspacecast double addrspace(3)* %583 to double*\l  %585 = load volatile double, double* %584, align 8, !tbaa !4\l  %586 = mul nsw i32 %581, %16\l  %587 = add nsw i32 %440, %586\l  %588 = sext i32 %587 to i64\l  %589 = getelementptr inbounds double, double addrspace(1)* %3, i64 %588\l  store double %585, double addrspace(1)* %589, align 8, !tbaa !4\l  %590 = add nuw nsw i32 %549, 4\l  %591 = add i32 %550, 4\l  %592 = icmp eq i32 %591, %444\l  br i1 %592, label %593, label %548, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5254e10:s0 -> Node0x5254c30;
	Node0x5254e10:s1 -> Node0x5254e10;
	Node0x5254c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%593:\l593:                                              \l  %594 = phi i32 [ 0, %433 ], [ %590, %548 ]\l  %595 = icmp eq i32 %441, 0\l  br i1 %595, label %611, label %596\l|{<s0>T|<s1>F}}"];
	Node0x5254c30:s0 -> Node0x5254620;
	Node0x5254c30:s1 -> Node0x524e8d0;
	Node0x524e8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%596:\l596:                                              \l  %597 = phi i32 [ %608, %596 ], [ %594, %593 ]\l  %598 = phi i32 [ %609, %596 ], [ 0, %593 ]\l  %599 = mul nsw i32 %597, %10\l  %600 = add nsw i32 %438, %599\l  %601 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %600\l  %602 = addrspacecast double addrspace(3)* %601 to double*\l  %603 = load volatile double, double* %602, align 8, !tbaa !4\l  %604 = mul nsw i32 %599, %16\l  %605 = add nsw i32 %440, %604\l  %606 = sext i32 %605 to i64\l  %607 = getelementptr inbounds double, double addrspace(1)* %3, i64 %606\l  store double %603, double addrspace(1)* %607, align 8, !tbaa !4\l  %608 = add nuw nsw i32 %597, 1\l  %609 = add i32 %598, 1\l  %610 = icmp eq i32 %609, %441\l  br i1 %610, label %611, label %596, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x524e8d0:s0 -> Node0x5254620;
	Node0x524e8d0:s1 -> Node0x524e8d0;
	Node0x5254620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%611:\l611:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %27, label %612, label %682\l|{<s0>T|<s1>F}}"];
	Node0x5254620:s0 -> Node0x524cf00;
	Node0x5254620:s1 -> Node0x524cf50;
	Node0x524cf00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%612:\l612:                                              \l  %613 = mul nsw i32 %24, %10\l  %614 = add nsw i32 %613, %26\l  %615 = and i32 %20, 3\l  %616 = icmp ult i32 %20, 4\l  br i1 %616, label %664, label %617\l|{<s0>T|<s1>F}}"];
	Node0x524cf00:s0 -> Node0x524d2d0;
	Node0x524cf00:s1 -> Node0x524d320;
	Node0x524d320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%617:\l617:                                              \l  %618 = and i32 %20, -4\l  br label %619\l}"];
	Node0x524d320 -> Node0x524d4f0;
	Node0x524d4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%619:\l619:                                              \l  %620 = phi i32 [ 0, %617 ], [ %661, %619 ]\l  %621 = phi i32 [ 0, %617 ], [ %662, %619 ]\l  %622 = mul nsw i32 %620, %10\l  %623 = mul nsw i32 %622, %16\l  %624 = add nsw i32 %614, %623\l  %625 = sext i32 %624 to i64\l  %626 = getelementptr inbounds double, double addrspace(1)* %3, i64 %625\l  %627 = load double, double addrspace(1)* %626, align 8, !tbaa !4\l  %628 = add nsw i32 %622, %26\l  %629 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %628\l  %630 = addrspacecast double addrspace(3)* %629 to double*\l  store volatile double %627, double* %630, align 8, !tbaa !4\l  %631 = or i32 %620, 1\l  %632 = mul nsw i32 %631, %10\l  %633 = mul nsw i32 %632, %16\l  %634 = add nsw i32 %614, %633\l  %635 = sext i32 %634 to i64\l  %636 = getelementptr inbounds double, double addrspace(1)* %3, i64 %635\l  %637 = load double, double addrspace(1)* %636, align 8, !tbaa !4\l  %638 = add nsw i32 %632, %26\l  %639 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %638\l  %640 = addrspacecast double addrspace(3)* %639 to double*\l  store volatile double %637, double* %640, align 8, !tbaa !4\l  %641 = or i32 %620, 2\l  %642 = mul nsw i32 %641, %10\l  %643 = mul nsw i32 %642, %16\l  %644 = add nsw i32 %614, %643\l  %645 = sext i32 %644 to i64\l  %646 = getelementptr inbounds double, double addrspace(1)* %3, i64 %645\l  %647 = load double, double addrspace(1)* %646, align 8, !tbaa !4\l  %648 = add nsw i32 %642, %26\l  %649 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %648\l  %650 = addrspacecast double addrspace(3)* %649 to double*\l  store volatile double %647, double* %650, align 8, !tbaa !4\l  %651 = or i32 %620, 3\l  %652 = mul nsw i32 %651, %10\l  %653 = mul nsw i32 %652, %16\l  %654 = add nsw i32 %614, %653\l  %655 = sext i32 %654 to i64\l  %656 = getelementptr inbounds double, double addrspace(1)* %3, i64 %655\l  %657 = load double, double addrspace(1)* %656, align 8, !tbaa !4\l  %658 = add nsw i32 %652, %26\l  %659 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %658\l  %660 = addrspacecast double addrspace(3)* %659 to double*\l  store volatile double %657, double* %660, align 8, !tbaa !4\l  %661 = add nuw nsw i32 %620, 4\l  %662 = add i32 %621, 4\l  %663 = icmp eq i32 %662, %618\l  br i1 %663, label %664, label %619, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x524d4f0:s0 -> Node0x524d2d0;
	Node0x524d4f0:s1 -> Node0x524d4f0;
	Node0x524d2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%664:\l664:                                              \l  %665 = phi i32 [ 0, %612 ], [ %661, %619 ]\l  %666 = icmp eq i32 %615, 0\l  br i1 %666, label %682, label %667\l|{<s0>T|<s1>F}}"];
	Node0x524d2d0:s0 -> Node0x524cf50;
	Node0x524d2d0:s1 -> Node0x525ef50;
	Node0x525ef50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%667:\l667:                                              \l  %668 = phi i32 [ %679, %667 ], [ %665, %664 ]\l  %669 = phi i32 [ %680, %667 ], [ 0, %664 ]\l  %670 = mul nsw i32 %668, %10\l  %671 = mul nsw i32 %670, %16\l  %672 = add nsw i32 %614, %671\l  %673 = sext i32 %672 to i64\l  %674 = getelementptr inbounds double, double addrspace(1)* %3, i64 %673\l  %675 = load double, double addrspace(1)* %674, align 8, !tbaa !4\l  %676 = add nsw i32 %670, %26\l  %677 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %676\l  %678 = addrspacecast double addrspace(3)* %677 to double*\l  store volatile double %675, double* %678, align 8, !tbaa !4\l  %679 = add nuw nsw i32 %668, 1\l  %680 = add i32 %669, 1\l  %681 = icmp eq i32 %680, %615\l  br i1 %681, label %682, label %667, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x525ef50:s0 -> Node0x524cf50;
	Node0x525ef50:s1 -> Node0x525ef50;
	Node0x524cf50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%682:\l682:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %683 = icmp ult i32 %26, 10\l  br i1 %683, label %684, label %813\l|{<s0>T|<s1>F}}"];
	Node0x524cf50:s0 -> Node0x5260cf0;
	Node0x524cf50:s1 -> Node0x5260d40;
	Node0x5260cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%684:\l684:                                              \l  %685 = getelementptr inbounds [710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 %26\l  %686 = addrspacecast double addrspace(3)* %685 to double*\l  store volatile double 0.000000e+00, double* %686, align 8, !tbaa !4\l  br i1 %400, label %687, label %813\l|{<s0>T|<s1>F}}"];
	Node0x5260cf0:s0 -> Node0x5255190;
	Node0x5260cf0:s1 -> Node0x5260d40;
	Node0x5255190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%687:\l687:                                              \l  %688 = and i32 %10, 7\l  %689 = icmp ult i32 %10, 8\l  br i1 %689, label %793, label %690\l|{<s0>T|<s1>F}}"];
	Node0x5255190:s0 -> Node0x5262ab0;
	Node0x5255190:s1 -> Node0x5262b00;
	Node0x5262b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%690:\l690:                                              \l  %691 = and i32 %10, -8\l  br label %692\l}"];
	Node0x5262b00 -> Node0x5262cd0;
	Node0x5262cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%692:\l692:                                              \l  %693 = phi i32 [ 0, %690 ], [ %790, %692 ]\l  %694 = phi i32 [ 0, %690 ], [ %791, %692 ]\l  %695 = mul nuw nsw i32 %693, 10\l  %696 = add nuw nsw i32 %695, %26\l  %697 = zext i32 %696 to i64\l  %698 = getelementptr inbounds double, double addrspace(1)* %1, i64 %697\l  %699 = load double, double addrspace(1)* %698, align 8, !tbaa !4\l  %700 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %693\l  %701 = addrspacecast double addrspace(3)* %700 to double*\l  %702 = load volatile double, double* %701, align 8, !tbaa !4\l  %703 = fmul contract double %699, %702\l  %704 = load volatile double, double* %686, align 8, !tbaa !4\l  %705 = fadd contract double %704, %703\l  store volatile double %705, double* %686, align 8, !tbaa !4\l  %706 = or i32 %693, 1\l  %707 = mul nuw nsw i32 %706, 10\l  %708 = add nuw nsw i32 %707, %26\l  %709 = zext i32 %708 to i64\l  %710 = getelementptr inbounds double, double addrspace(1)* %1, i64 %709\l  %711 = load double, double addrspace(1)* %710, align 8, !tbaa !4\l  %712 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %706\l  %713 = addrspacecast double addrspace(3)* %712 to double*\l  %714 = load volatile double, double* %713, align 8, !tbaa !4\l  %715 = fmul contract double %711, %714\l  %716 = load volatile double, double* %686, align 8, !tbaa !4\l  %717 = fadd contract double %716, %715\l  store volatile double %717, double* %686, align 8, !tbaa !4\l  %718 = or i32 %693, 2\l  %719 = mul nuw nsw i32 %718, 10\l  %720 = add nuw nsw i32 %719, %26\l  %721 = zext i32 %720 to i64\l  %722 = getelementptr inbounds double, double addrspace(1)* %1, i64 %721\l  %723 = load double, double addrspace(1)* %722, align 8, !tbaa !4\l  %724 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %718\l  %725 = addrspacecast double addrspace(3)* %724 to double*\l  %726 = load volatile double, double* %725, align 8, !tbaa !4\l  %727 = fmul contract double %723, %726\l  %728 = load volatile double, double* %686, align 8, !tbaa !4\l  %729 = fadd contract double %728, %727\l  store volatile double %729, double* %686, align 8, !tbaa !4\l  %730 = or i32 %693, 3\l  %731 = mul nuw nsw i32 %730, 10\l  %732 = add nuw nsw i32 %731, %26\l  %733 = zext i32 %732 to i64\l  %734 = getelementptr inbounds double, double addrspace(1)* %1, i64 %733\l  %735 = load double, double addrspace(1)* %734, align 8, !tbaa !4\l  %736 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %730\l  %737 = addrspacecast double addrspace(3)* %736 to double*\l  %738 = load volatile double, double* %737, align 8, !tbaa !4\l  %739 = fmul contract double %735, %738\l  %740 = load volatile double, double* %686, align 8, !tbaa !4\l  %741 = fadd contract double %740, %739\l  store volatile double %741, double* %686, align 8, !tbaa !4\l  %742 = or i32 %693, 4\l  %743 = mul nuw nsw i32 %742, 10\l  %744 = add nuw nsw i32 %743, %26\l  %745 = zext i32 %744 to i64\l  %746 = getelementptr inbounds double, double addrspace(1)* %1, i64 %745\l  %747 = load double, double addrspace(1)* %746, align 8, !tbaa !4\l  %748 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %742\l  %749 = addrspacecast double addrspace(3)* %748 to double*\l  %750 = load volatile double, double* %749, align 8, !tbaa !4\l  %751 = fmul contract double %747, %750\l  %752 = load volatile double, double* %686, align 8, !tbaa !4\l  %753 = fadd contract double %752, %751\l  store volatile double %753, double* %686, align 8, !tbaa !4\l  %754 = or i32 %693, 5\l  %755 = mul nuw nsw i32 %754, 10\l  %756 = add nuw nsw i32 %755, %26\l  %757 = zext i32 %756 to i64\l  %758 = getelementptr inbounds double, double addrspace(1)* %1, i64 %757\l  %759 = load double, double addrspace(1)* %758, align 8, !tbaa !4\l  %760 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %754\l  %761 = addrspacecast double addrspace(3)* %760 to double*\l  %762 = load volatile double, double* %761, align 8, !tbaa !4\l  %763 = fmul contract double %759, %762\l  %764 = load volatile double, double* %686, align 8, !tbaa !4\l  %765 = fadd contract double %764, %763\l  store volatile double %765, double* %686, align 8, !tbaa !4\l  %766 = or i32 %693, 6\l  %767 = mul nuw nsw i32 %766, 10\l  %768 = add nuw nsw i32 %767, %26\l  %769 = zext i32 %768 to i64\l  %770 = getelementptr inbounds double, double addrspace(1)* %1, i64 %769\l  %771 = load double, double addrspace(1)* %770, align 8, !tbaa !4\l  %772 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %766\l  %773 = addrspacecast double addrspace(3)* %772 to double*\l  %774 = load volatile double, double* %773, align 8, !tbaa !4\l  %775 = fmul contract double %771, %774\l  %776 = load volatile double, double* %686, align 8, !tbaa !4\l  %777 = fadd contract double %776, %775\l  store volatile double %777, double* %686, align 8, !tbaa !4\l  %778 = or i32 %693, 7\l  %779 = mul nuw nsw i32 %778, 10\l  %780 = add nuw nsw i32 %779, %26\l  %781 = zext i32 %780 to i64\l  %782 = getelementptr inbounds double, double addrspace(1)* %1, i64 %781\l  %783 = load double, double addrspace(1)* %782, align 8, !tbaa !4\l  %784 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %778\l  %785 = addrspacecast double addrspace(3)* %784 to double*\l  %786 = load volatile double, double* %785, align 8, !tbaa !4\l  %787 = fmul contract double %783, %786\l  %788 = load volatile double, double* %686, align 8, !tbaa !4\l  %789 = fadd contract double %788, %787\l  store volatile double %789, double* %686, align 8, !tbaa !4\l  %790 = add nuw nsw i32 %693, 8\l  %791 = add nuw i32 %694, 8\l  %792 = icmp eq i32 %791, %691\l  br i1 %792, label %793, label %692, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x5262cd0:s0 -> Node0x5262ab0;
	Node0x5262cd0:s1 -> Node0x5262cd0;
	Node0x5262ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%793:\l793:                                              \l  %794 = phi i32 [ 0, %687 ], [ %790, %692 ]\l  %795 = icmp eq i32 %688, 0\l  br i1 %795, label %813, label %796\l|{<s0>T|<s1>F}}"];
	Node0x5262ab0:s0 -> Node0x5260d40;
	Node0x5262ab0:s1 -> Node0x5266e90;
	Node0x5266e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%796:\l796:                                              \l  %797 = phi i32 [ %810, %796 ], [ %794, %793 ]\l  %798 = phi i32 [ %811, %796 ], [ 0, %793 ]\l  %799 = mul nuw nsw i32 %797, 10\l  %800 = add nuw nsw i32 %799, %26\l  %801 = zext i32 %800 to i64\l  %802 = getelementptr inbounds double, double addrspace(1)* %1, i64 %801\l  %803 = load double, double addrspace(1)* %802, align 8, !tbaa !4\l  %804 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %797\l  %805 = addrspacecast double addrspace(3)* %804 to double*\l  %806 = load volatile double, double* %805, align 8, !tbaa !4\l  %807 = fmul contract double %803, %806\l  %808 = load volatile double, double* %686, align 8, !tbaa !4\l  %809 = fadd contract double %808, %807\l  store volatile double %809, double* %686, align 8, !tbaa !4\l  %810 = add nuw nsw i32 %797, 1\l  %811 = add i32 %798, 1\l  %812 = icmp eq i32 %811, %688\l  br i1 %812, label %813, label %796, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x5266e90:s0 -> Node0x5260d40;
	Node0x5266e90:s1 -> Node0x5266e90;
	Node0x5260d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%813:\l813:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %814 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 0) to double*), align\l... 16, !tbaa !4\l  %815 = fcmp contract ueq double %814, 0.000000e+00\l  br i1 %815, label %827, label %822\l|{<s0>T|<s1>F}}"];
	Node0x5260d40:s0 -> Node0x5267c20;
	Node0x5260d40:s1 -> Node0x5268050;
	Node0x5268190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%816:\l816:                                              \l  %817 = mul i32 %934, %10\l  %818 = and i32 %10, 7\l  %819 = icmp ult i32 %10, 8\l  %820 = and i32 %10, -8\l  %821 = icmp eq i32 %818, 0\l  br label %936\l}"];
	Node0x5268190 -> Node0x52684f0;
	Node0x5268050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%822:\l822:                                              \l  %823 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 0) to double*), align\l... 16, !tbaa !4\l  %824 = tail call double @llvm.fabs.f64(double %823)\l  %825 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 0) to double*), align\l... 16, !tbaa !4\l  %826 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %825)\l  br label %827\l}"];
	Node0x5268050 -> Node0x5267c20;
	Node0x5267c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%827:\l827:                                              \l  %828 = phi double [ %824, %822 ], [ 0.000000e+00, %813 ]\l  %829 = phi double [ %826, %822 ], [ 1.000000e+00, %813 ]\l  %830 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 1) to double*), align 8,\l... !tbaa !4\l  %831 = tail call double @llvm.fabs.f64(double %830)\l  %832 = fcmp contract ogt double %831, %828\l  br i1 %832, label %833, label %838\l|{<s0>T|<s1>F}}"];
	Node0x5267c20:s0 -> Node0x5268e00;
	Node0x5267c20:s1 -> Node0x5268e90;
	Node0x5268e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%833:\l833:                                              \l  %834 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 1) to double*), align 8,\l... !tbaa !4\l  %835 = tail call double @llvm.fabs.f64(double %834)\l  %836 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 1) to double*), align 8,\l... !tbaa !4\l  %837 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %836)\l  br label %838\l}"];
	Node0x5268e00 -> Node0x5268e90;
	Node0x5268e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%838:\l838:                                              \l  %839 = phi i32 [ 1, %833 ], [ 0, %827 ]\l  %840 = phi double [ %835, %833 ], [ %828, %827 ]\l  %841 = phi double [ %837, %833 ], [ %829, %827 ]\l  %842 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 2) to double*), align 8,\l... !tbaa !4\l  %843 = tail call double @llvm.fabs.f64(double %842)\l  %844 = fcmp contract ogt double %843, %840\l  br i1 %844, label %845, label %850\l|{<s0>T|<s1>F}}"];
	Node0x5268e90:s0 -> Node0x52697b0;
	Node0x5268e90:s1 -> Node0x5269800;
	Node0x52697b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%845:\l845:                                              \l  %846 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 2) to double*), align 8,\l... !tbaa !4\l  %847 = tail call double @llvm.fabs.f64(double %846)\l  %848 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 2) to double*), align 8,\l... !tbaa !4\l  %849 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %848)\l  br label %850\l}"];
	Node0x52697b0 -> Node0x5269800;
	Node0x5269800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%850:\l850:                                              \l  %851 = phi i32 [ 2, %845 ], [ %839, %838 ]\l  %852 = phi double [ %847, %845 ], [ %840, %838 ]\l  %853 = phi double [ %849, %845 ], [ %841, %838 ]\l  %854 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 3) to double*), align 8,\l... !tbaa !4\l  %855 = tail call double @llvm.fabs.f64(double %854)\l  %856 = fcmp contract ogt double %855, %852\l  br i1 %856, label %857, label %862\l|{<s0>T|<s1>F}}"];
	Node0x5269800:s0 -> Node0x526a120;
	Node0x5269800:s1 -> Node0x526a170;
	Node0x526a120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%857:\l857:                                              \l  %858 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 3) to double*), align 8,\l... !tbaa !4\l  %859 = tail call double @llvm.fabs.f64(double %858)\l  %860 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 3) to double*), align 8,\l... !tbaa !4\l  %861 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %860)\l  br label %862\l}"];
	Node0x526a120 -> Node0x526a170;
	Node0x526a170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%862:\l862:                                              \l  %863 = phi i32 [ 3, %857 ], [ %851, %850 ]\l  %864 = phi double [ %859, %857 ], [ %852, %850 ]\l  %865 = phi double [ %861, %857 ], [ %853, %850 ]\l  %866 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 4) to double*), align 8,\l... !tbaa !4\l  %867 = tail call double @llvm.fabs.f64(double %866)\l  %868 = fcmp contract ogt double %867, %864\l  br i1 %868, label %869, label %874\l|{<s0>T|<s1>F}}"];
	Node0x526a170:s0 -> Node0x526aa90;
	Node0x526a170:s1 -> Node0x526aae0;
	Node0x526aa90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%869:\l869:                                              \l  %870 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 4) to double*), align 8,\l... !tbaa !4\l  %871 = tail call double @llvm.fabs.f64(double %870)\l  %872 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 4) to double*), align 8,\l... !tbaa !4\l  %873 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %872)\l  br label %874\l}"];
	Node0x526aa90 -> Node0x526aae0;
	Node0x526aae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%874:\l874:                                              \l  %875 = phi i32 [ 4, %869 ], [ %863, %862 ]\l  %876 = phi double [ %871, %869 ], [ %864, %862 ]\l  %877 = phi double [ %873, %869 ], [ %865, %862 ]\l  %878 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 5) to double*), align 8,\l... !tbaa !4\l  %879 = tail call double @llvm.fabs.f64(double %878)\l  %880 = fcmp contract ogt double %879, %876\l  br i1 %880, label %881, label %886\l|{<s0>T|<s1>F}}"];
	Node0x526aae0:s0 -> Node0x526b400;
	Node0x526aae0:s1 -> Node0x526b450;
	Node0x526b400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%881:\l881:                                              \l  %882 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 5) to double*), align 8,\l... !tbaa !4\l  %883 = tail call double @llvm.fabs.f64(double %882)\l  %884 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 5) to double*), align 8,\l... !tbaa !4\l  %885 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %884)\l  br label %886\l}"];
	Node0x526b400 -> Node0x526b450;
	Node0x526b450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%886:\l886:                                              \l  %887 = phi i32 [ 5, %881 ], [ %875, %874 ]\l  %888 = phi double [ %883, %881 ], [ %876, %874 ]\l  %889 = phi double [ %885, %881 ], [ %877, %874 ]\l  %890 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 6) to double*), align 8,\l... !tbaa !4\l  %891 = tail call double @llvm.fabs.f64(double %890)\l  %892 = fcmp contract ogt double %891, %888\l  br i1 %892, label %893, label %898\l|{<s0>T|<s1>F}}"];
	Node0x526b450:s0 -> Node0x526bd70;
	Node0x526b450:s1 -> Node0x526bdc0;
	Node0x526bd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%893:\l893:                                              \l  %894 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 6) to double*), align 8,\l... !tbaa !4\l  %895 = tail call double @llvm.fabs.f64(double %894)\l  %896 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 6) to double*), align 8,\l... !tbaa !4\l  %897 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %896)\l  br label %898\l}"];
	Node0x526bd70 -> Node0x526bdc0;
	Node0x526bdc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%898:\l898:                                              \l  %899 = phi i32 [ 6, %893 ], [ %887, %886 ]\l  %900 = phi double [ %895, %893 ], [ %888, %886 ]\l  %901 = phi double [ %897, %893 ], [ %889, %886 ]\l  %902 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 7) to double*), align 8,\l... !tbaa !4\l  %903 = tail call double @llvm.fabs.f64(double %902)\l  %904 = fcmp contract ogt double %903, %900\l  br i1 %904, label %905, label %910\l|{<s0>T|<s1>F}}"];
	Node0x526bdc0:s0 -> Node0x526c6e0;
	Node0x526bdc0:s1 -> Node0x526c730;
	Node0x526c6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%905:\l905:                                              \l  %906 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 7) to double*), align 8,\l... !tbaa !4\l  %907 = tail call double @llvm.fabs.f64(double %906)\l  %908 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 7) to double*), align 8,\l... !tbaa !4\l  %909 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %908)\l  br label %910\l}"];
	Node0x526c6e0 -> Node0x526c730;
	Node0x526c730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%910:\l910:                                              \l  %911 = phi i32 [ 7, %905 ], [ %899, %898 ]\l  %912 = phi double [ %907, %905 ], [ %900, %898 ]\l  %913 = phi double [ %909, %905 ], [ %901, %898 ]\l  %914 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 8) to double*), align 8,\l... !tbaa !4\l  %915 = tail call double @llvm.fabs.f64(double %914)\l  %916 = fcmp contract ogt double %915, %912\l  br i1 %916, label %917, label %922\l|{<s0>T|<s1>F}}"];
	Node0x526c730:s0 -> Node0x526d050;
	Node0x526c730:s1 -> Node0x526d0a0;
	Node0x526d050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%917:\l917:                                              \l  %918 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 8) to double*), align 8,\l... !tbaa !4\l  %919 = tail call double @llvm.fabs.f64(double %918)\l  %920 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 8) to double*), align 8,\l... !tbaa !4\l  %921 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %920)\l  br label %922\l}"];
	Node0x526d050 -> Node0x526d0a0;
	Node0x526d0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%922:\l922:                                              \l  %923 = phi i32 [ 8, %917 ], [ %911, %910 ]\l  %924 = phi double [ %919, %917 ], [ %912, %910 ]\l  %925 = phi double [ %921, %917 ], [ %913, %910 ]\l  %926 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 9) to double*), align 8,\l... !tbaa !4\l  %927 = tail call double @llvm.fabs.f64(double %926)\l  %928 = fcmp contract ogt double %927, %924\l  br i1 %928, label %929, label %933\l|{<s0>T|<s1>F}}"];
	Node0x526d0a0:s0 -> Node0x526d9c0;
	Node0x526d0a0:s1 -> Node0x526da10;
	Node0x526d9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%929:\l929:                                              \l  %930 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 9) to double*), align 8,\l... !tbaa !4\l  %931 = load volatile double, double* addrspacecast (double addrspace(3)*\l... getelementptr inbounds ([710 x double], [710 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E4sWup, i32 0, i32 9) to double*), align 8,\l... !tbaa !4\l  %932 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %931)\l  br label %933\l}"];
	Node0x526d9c0 -> Node0x526da10;
	Node0x526da10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%933:\l933:                                              \l  %934 = phi i32 [ 9, %929 ], [ %923, %922 ]\l  %935 = phi double [ %932, %929 ], [ %925, %922 ]\l  br i1 %27, label %816, label %1087\l|{<s0>T|<s1>F}}"];
	Node0x526da10:s0 -> Node0x5268190;
	Node0x526da10:s1 -> Node0x526df10;
	Node0x52684f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%936:\l936:                                              \l  %937 = phi i32 [ 0, %816 ], [ %1085, %1073 ]\l  br i1 %400, label %938, label %1073\l|{<s0>T|<s1>F}}"];
	Node0x52684f0:s0 -> Node0x526e110;
	Node0x52684f0:s1 -> Node0x526e010;
	Node0x526e110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%938:\l938:                                              \l  %939 = mul nsw i32 %937, %10\l  br i1 %819, label %1050, label %940\l|{<s0>T|<s1>F}}"];
	Node0x526e110:s0 -> Node0x526e2a0;
	Node0x526e110:s1 -> Node0x526e2f0;
	Node0x526e2f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%940:\l940:                                              \l  %941 = phi double [ %1046, %940 ], [ 0.000000e+00, %938 ]\l  %942 = phi i32 [ %1047, %940 ], [ 0, %938 ]\l  %943 = phi i32 [ %1048, %940 ], [ 0, %938 ]\l  %944 = add i32 %942, %817\l  %945 = mul i32 %944, %10\l  %946 = add i32 %945, %26\l  %947 = sext i32 %946 to i64\l  %948 = getelementptr inbounds double, double addrspace(1)* %2, i64 %947\l  %949 = load double, double addrspace(1)* %948, align 8, !tbaa !4\l  %950 = add nsw i32 %942, %939\l  %951 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %950\l  %952 = addrspacecast double addrspace(3)* %951 to double*\l  %953 = load volatile double, double* %952, align 8, !tbaa !4\l  %954 = fmul contract double %949, %953\l  %955 = fadd contract double %941, %954\l  %956 = or i32 %942, 1\l  %957 = add i32 %956, %817\l  %958 = mul i32 %957, %10\l  %959 = add i32 %958, %26\l  %960 = sext i32 %959 to i64\l  %961 = getelementptr inbounds double, double addrspace(1)* %2, i64 %960\l  %962 = load double, double addrspace(1)* %961, align 8, !tbaa !4\l  %963 = add nsw i32 %956, %939\l  %964 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %963\l  %965 = addrspacecast double addrspace(3)* %964 to double*\l  %966 = load volatile double, double* %965, align 8, !tbaa !4\l  %967 = fmul contract double %962, %966\l  %968 = fadd contract double %955, %967\l  %969 = or i32 %942, 2\l  %970 = add i32 %969, %817\l  %971 = mul i32 %970, %10\l  %972 = add i32 %971, %26\l  %973 = sext i32 %972 to i64\l  %974 = getelementptr inbounds double, double addrspace(1)* %2, i64 %973\l  %975 = load double, double addrspace(1)* %974, align 8, !tbaa !4\l  %976 = add nsw i32 %969, %939\l  %977 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %976\l  %978 = addrspacecast double addrspace(3)* %977 to double*\l  %979 = load volatile double, double* %978, align 8, !tbaa !4\l  %980 = fmul contract double %975, %979\l  %981 = fadd contract double %968, %980\l  %982 = or i32 %942, 3\l  %983 = add i32 %982, %817\l  %984 = mul i32 %983, %10\l  %985 = add i32 %984, %26\l  %986 = sext i32 %985 to i64\l  %987 = getelementptr inbounds double, double addrspace(1)* %2, i64 %986\l  %988 = load double, double addrspace(1)* %987, align 8, !tbaa !4\l  %989 = add nsw i32 %982, %939\l  %990 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %989\l  %991 = addrspacecast double addrspace(3)* %990 to double*\l  %992 = load volatile double, double* %991, align 8, !tbaa !4\l  %993 = fmul contract double %988, %992\l  %994 = fadd contract double %981, %993\l  %995 = or i32 %942, 4\l  %996 = add i32 %995, %817\l  %997 = mul i32 %996, %10\l  %998 = add i32 %997, %26\l  %999 = sext i32 %998 to i64\l  %1000 = getelementptr inbounds double, double addrspace(1)* %2, i64 %999\l  %1001 = load double, double addrspace(1)* %1000, align 8, !tbaa !4\l  %1002 = add nsw i32 %995, %939\l  %1003 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %1002\l  %1004 = addrspacecast double addrspace(3)* %1003 to double*\l  %1005 = load volatile double, double* %1004, align 8, !tbaa !4\l  %1006 = fmul contract double %1001, %1005\l  %1007 = fadd contract double %994, %1006\l  %1008 = or i32 %942, 5\l  %1009 = add i32 %1008, %817\l  %1010 = mul i32 %1009, %10\l  %1011 = add i32 %1010, %26\l  %1012 = sext i32 %1011 to i64\l  %1013 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1012\l  %1014 = load double, double addrspace(1)* %1013, align 8, !tbaa !4\l  %1015 = add nsw i32 %1008, %939\l  %1016 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %1015\l  %1017 = addrspacecast double addrspace(3)* %1016 to double*\l  %1018 = load volatile double, double* %1017, align 8, !tbaa !4\l  %1019 = fmul contract double %1014, %1018\l  %1020 = fadd contract double %1007, %1019\l  %1021 = or i32 %942, 6\l  %1022 = add i32 %1021, %817\l  %1023 = mul i32 %1022, %10\l  %1024 = add i32 %1023, %26\l  %1025 = sext i32 %1024 to i64\l  %1026 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1025\l  %1027 = load double, double addrspace(1)* %1026, align 8, !tbaa !4\l  %1028 = add nsw i32 %1021, %939\l  %1029 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %1028\l  %1030 = addrspacecast double addrspace(3)* %1029 to double*\l  %1031 = load volatile double, double* %1030, align 8, !tbaa !4\l  %1032 = fmul contract double %1027, %1031\l  %1033 = fadd contract double %1020, %1032\l  %1034 = or i32 %942, 7\l  %1035 = add i32 %1034, %817\l  %1036 = mul i32 %1035, %10\l  %1037 = add i32 %1036, %26\l  %1038 = sext i32 %1037 to i64\l  %1039 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1038\l  %1040 = load double, double addrspace(1)* %1039, align 8, !tbaa !4\l  %1041 = add nsw i32 %1034, %939\l  %1042 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %1041\l  %1043 = addrspacecast double addrspace(3)* %1042 to double*\l  %1044 = load volatile double, double* %1043, align 8, !tbaa !4\l  %1045 = fmul contract double %1040, %1044\l  %1046 = fadd contract double %1033, %1045\l  %1047 = add nuw nsw i32 %942, 8\l  %1048 = add i32 %943, 8\l  %1049 = icmp eq i32 %1048, %820\l  br i1 %1049, label %1050, label %940, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x526e2f0:s0 -> Node0x526e2a0;
	Node0x526e2f0:s1 -> Node0x526e2f0;
	Node0x526e2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%1050:\l1050:                                             \l  %1051 = phi double [ undef, %938 ], [ %1046, %940 ]\l  %1052 = phi double [ 0.000000e+00, %938 ], [ %1046, %940 ]\l  %1053 = phi i32 [ 0, %938 ], [ %1047, %940 ]\l  br i1 %821, label %1073, label %1054\l|{<s0>T|<s1>F}}"];
	Node0x526e2a0:s0 -> Node0x526e010;
	Node0x526e2a0:s1 -> Node0x525da40;
	Node0x525da40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1054:\l1054:                                             \l  %1055 = phi double [ %1069, %1054 ], [ %1052, %1050 ]\l  %1056 = phi i32 [ %1070, %1054 ], [ %1053, %1050 ]\l  %1057 = phi i32 [ %1071, %1054 ], [ 0, %1050 ]\l  %1058 = add i32 %1056, %817\l  %1059 = mul i32 %1058, %10\l  %1060 = add i32 %1059, %26\l  %1061 = sext i32 %1060 to i64\l  %1062 = getelementptr inbounds double, double addrspace(1)* %2, i64 %1061\l  %1063 = load double, double addrspace(1)* %1062, align 8, !tbaa !4\l  %1064 = add nsw i32 %1056, %939\l  %1065 = getelementptr inbounds [213 x double], [213 x double] addrspace(3)*\l... @_ZZ11reNormalizePKdS0_S0_PdS1_S1_E2sW, i32 0, i32 %1064\l  %1066 = addrspacecast double addrspace(3)* %1065 to double*\l  %1067 = load volatile double, double* %1066, align 8, !tbaa !4\l  %1068 = fmul contract double %1063, %1067\l  %1069 = fadd contract double %1055, %1068\l  %1070 = add nuw nsw i32 %1056, 1\l  %1071 = add i32 %1057, 1\l  %1072 = icmp eq i32 %1071, %818\l  br i1 %1072, label %1073, label %1054, !llvm.loop !30\l|{<s0>T|<s1>F}}"];
	Node0x525da40:s0 -> Node0x526e010;
	Node0x525da40:s1 -> Node0x525da40;
	Node0x526e010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%1073:\l1073:                                             \l  %1074 = phi double [ 0.000000e+00, %936 ], [ %1051, %1050 ], [ %1069, %1054 ]\l  %1075 = icmp eq i32 %937, 0\l  %1076 = fneg contract double %1074\l  %1077 = fmul contract double %935, %1076\l  %1078 = select i1 %1075, double %1077, double %1074\l  %1079 = mul i32 %937, %16\l  %1080 = add i32 %1079, %24\l  %1081 = mul i32 %1080, %10\l  %1082 = add i32 %1081, %26\l  %1083 = sext i32 %1082 to i64\l  %1084 = getelementptr inbounds double, double addrspace(1)* %3, i64 %1083\l  store double %1078, double addrspace(1)* %1084, align 8, !tbaa !4\l  %1085 = add nuw nsw i32 %937, 1\l  %1086 = icmp eq i32 %1085, %20\l  br i1 %1086, label %1087, label %936, !llvm.loop !31\l|{<s0>T|<s1>F}}"];
	Node0x526e010:s0 -> Node0x526df10;
	Node0x526e010:s1 -> Node0x52684f0;
	Node0x526df10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%1087:\l1087:                                             \l  ret void\l}"];
}
