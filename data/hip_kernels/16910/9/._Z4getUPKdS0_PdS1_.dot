digraph "CFG for '_Z4getUPKdS0_PdS1_' function" {
	label="CFG for '_Z4getUPKdS0_PdS1_' function";

	Node0x4d57ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%4:\l  %5 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %6 = load double, double addrspace(1)* %5, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %7 = fptosi double %6 to i32\l  %8 = getelementptr inbounds double, double addrspace(1)* %0, i64 9\l  %9 = load double, double addrspace(1)* %8, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %10 = fptosi double %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !9\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = icmp slt i32 %11, %10\l  br i1 %13, label %14, label %161\l|{<s0>T|<s1>F}}"];
	Node0x4d57ae0:s0 -> Node0x4d5a410;
	Node0x4d57ae0:s1 -> Node0x4d5a4a0;
	Node0x4d5a410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%14:\l14:                                               \l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %16 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %17 = load double, double addrspace(1)* %16, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %18 = fptosi double %17 to i32\l  %19 = icmp sgt i32 %7, 0\l  %20 = mul i32 %15, %18\l  %21 = add i32 %20, %12\l  %22 = mul i32 %21, %7\l  %23 = mul i32 %12, %10\l  %24 = mul i32 %21, %10\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !10, !invariant.load\l... !8\l  %29 = zext i16 %28 to i32\l  %30 = and i32 %7, 7\l  %31 = icmp ult i32 %7, 8\l  %32 = and i32 %7, -8\l  %33 = icmp eq i32 %30, 0\l  br label %34\l}"];
	Node0x4d5a410 -> Node0x4d5af20;
	Node0x4d5af20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%34:\l34:                                               \l  %35 = phi i32 [ %11, %14 ], [ %159, %154 ]\l  br i1 %19, label %36, label %154\l|{<s0>T|<s1>F}}"];
	Node0x4d5af20:s0 -> Node0x4d5c030;
	Node0x4d5af20:s1 -> Node0x4d5bef0;
	Node0x4d5c030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%36:\l36:                                               \l  %37 = add i32 %35, %23\l  %38 = mul i32 %37, %7\l  br i1 %31, label %133, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4d5c030:s0 -> Node0x4d5c290;
	Node0x4d5c030:s1 -> Node0x4d5c2e0;
	Node0x4d5c2e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%39:\l39:                                               \l  %40 = phi double [ %129, %39 ], [ 0.000000e+00, %36 ]\l  %41 = phi i32 [ %130, %39 ], [ 0, %36 ]\l  %42 = phi i32 [ %131, %39 ], [ 0, %36 ]\l  %43 = add i32 %41, %22\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds double, double addrspace(1)* %2, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !4\l  %47 = add i32 %41, %38\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds double, double addrspace(1)* %1, i64 %48\l  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !4\l  %51 = fmul contract double %46, %50\l  %52 = fadd contract double %40, %51\l  %53 = or i32 %41, 1\l  %54 = add i32 %53, %22\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %2, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !4\l  %58 = add i32 %53, %38\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %1, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !4\l  %62 = fmul contract double %57, %61\l  %63 = fadd contract double %52, %62\l  %64 = or i32 %41, 2\l  %65 = add i32 %64, %22\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %2, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !4\l  %69 = add i32 %64, %38\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %1, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !4\l  %73 = fmul contract double %68, %72\l  %74 = fadd contract double %63, %73\l  %75 = or i32 %41, 3\l  %76 = add i32 %75, %22\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds double, double addrspace(1)* %2, i64 %77\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !4\l  %80 = add i32 %75, %38\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %1, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !4\l  %84 = fmul contract double %79, %83\l  %85 = fadd contract double %74, %84\l  %86 = or i32 %41, 4\l  %87 = add i32 %86, %22\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %2, i64 %88\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !4\l  %91 = add i32 %86, %38\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %1, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !4\l  %95 = fmul contract double %90, %94\l  %96 = fadd contract double %85, %95\l  %97 = or i32 %41, 5\l  %98 = add i32 %97, %22\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %2, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !4\l  %102 = add i32 %97, %38\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds double, double addrspace(1)* %1, i64 %103\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !4\l  %106 = fmul contract double %101, %105\l  %107 = fadd contract double %96, %106\l  %108 = or i32 %41, 6\l  %109 = add i32 %108, %22\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %2, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !4\l  %113 = add i32 %108, %38\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %1, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !4\l  %117 = fmul contract double %112, %116\l  %118 = fadd contract double %107, %117\l  %119 = or i32 %41, 7\l  %120 = add i32 %119, %22\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds double, double addrspace(1)* %2, i64 %121\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !4\l  %124 = add i32 %119, %38\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds double, double addrspace(1)* %1, i64 %125\l  %127 = load double, double addrspace(1)* %126, align 8, !tbaa !4\l  %128 = fmul contract double %123, %127\l  %129 = fadd contract double %118, %128\l  %130 = add nuw nsw i32 %41, 8\l  %131 = add i32 %42, 8\l  %132 = icmp eq i32 %131, %32\l  br i1 %132, label %133, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4d5c2e0:s0 -> Node0x4d5c290;
	Node0x4d5c2e0:s1 -> Node0x4d5c2e0;
	Node0x4d5c290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%133:\l133:                                              \l  %134 = phi double [ undef, %36 ], [ %129, %39 ]\l  %135 = phi double [ 0.000000e+00, %36 ], [ %129, %39 ]\l  %136 = phi i32 [ 0, %36 ], [ %130, %39 ]\l  br i1 %33, label %154, label %137\l|{<s0>T|<s1>F}}"];
	Node0x4d5c290:s0 -> Node0x4d5bef0;
	Node0x4d5c290:s1 -> Node0x4d60fd0;
	Node0x4d60fd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%137:\l137:                                              \l  %138 = phi double [ %150, %137 ], [ %135, %133 ]\l  %139 = phi i32 [ %151, %137 ], [ %136, %133 ]\l  %140 = phi i32 [ %152, %137 ], [ 0, %133 ]\l  %141 = add i32 %139, %22\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds double, double addrspace(1)* %2, i64 %142\l  %144 = load double, double addrspace(1)* %143, align 8, !tbaa !4\l  %145 = add i32 %139, %38\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds double, double addrspace(1)* %1, i64 %146\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !4\l  %149 = fmul contract double %144, %148\l  %150 = fadd contract double %138, %149\l  %151 = add nuw nsw i32 %139, 1\l  %152 = add i32 %140, 1\l  %153 = icmp eq i32 %152, %30\l  br i1 %153, label %154, label %137, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4d60fd0:s0 -> Node0x4d5bef0;
	Node0x4d60fd0:s1 -> Node0x4d60fd0;
	Node0x4d5bef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%154:\l154:                                              \l  %155 = phi double [ 0.000000e+00, %34 ], [ %134, %133 ], [ %150, %137 ]\l  %156 = add i32 %35, %24\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds double, double addrspace(1)* %3, i64 %157\l  store double %155, double addrspace(1)* %158, align 8, !tbaa !4\l  %159 = add i32 %35, %29\l  %160 = icmp slt i32 %159, %10\l  br i1 %160, label %34, label %161, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4d5bef0:s0 -> Node0x4d5af20;
	Node0x4d5bef0:s1 -> Node0x4d5a4a0;
	Node0x4d5a4a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%161:\l161:                                              \l  ret void\l}"];
}
