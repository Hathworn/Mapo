digraph "CFG for '_Z6getwtwPKdS0_Pd' function" {
	label="CFG for '_Z6getwtwPKdS0_Pd' function";

	Node0x56f1b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%3:\l  %4 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %5 = load double, double addrspace(1)* %4, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %6 = fptosi double %5 to i32\l  %7 = getelementptr inbounds double, double addrspace(1)* %0, i64 9\l  %8 = load double, double addrspace(1)* %7, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %9 = fptosi double %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !9\l  %12 = icmp slt i32 %11, %6\l  br i1 %12, label %13, label %172\l|{<s0>T|<s1>F}}"];
	Node0x56f1b60:s0 -> Node0x56f4a70;
	Node0x56f1b60:s1 -> Node0x56f4b00;
	Node0x56f4a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%13:\l13:                                               \l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = icmp sgt i32 %9, 0\l  %16 = mul i32 %14, %6\l  %17 = mul i32 %16, %9\l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = getelementptr i8, i8 addrspace(4)* %18, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !10, !invariant.load\l... !8\l  %22 = zext i16 %21 to i32\l  %23 = and i32 %9, 7\l  %24 = icmp ult i32 %9, 8\l  %25 = and i32 %9, -8\l  %26 = icmp eq i32 %23, 0\l  br label %27\l}"];
	Node0x56f4a70 -> Node0x56f5940;
	Node0x56f5940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%27:\l27:                                               \l  %28 = phi i32 [ %11, %13 ], [ %170, %163 ]\l  br i1 %15, label %29, label %163\l|{<s0>T|<s1>F}}"];
	Node0x56f5940:s0 -> Node0x56f5bb0;
	Node0x56f5940:s1 -> Node0x56f5a70;
	Node0x56f5bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%29:\l29:                                               \l  br i1 %24, label %140, label %30\l|{<s0>T|<s1>F}}"];
	Node0x56f5bb0:s0 -> Node0x56f5cf0;
	Node0x56f5bb0:s1 -> Node0x56f5d40;
	Node0x56f5d40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%30:\l30:                                               \l  %31 = phi double [ %136, %30 ], [ 0.000000e+00, %29 ]\l  %32 = phi i32 [ %137, %30 ], [ 0, %29 ]\l  %33 = phi i32 [ %138, %30 ], [ 0, %29 ]\l  %34 = mul nsw i32 %32, %6\l  %35 = add i32 %34, %17\l  %36 = add i32 %35, %10\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds double, double addrspace(1)* %1, i64 %37\l  %39 = load double, double addrspace(1)* %38, align 8, !tbaa !4\l  %40 = add i32 %35, %28\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds double, double addrspace(1)* %1, i64 %41\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !4\l  %44 = fmul contract double %39, %43\l  %45 = fadd contract double %31, %44\l  %46 = or i32 %32, 1\l  %47 = mul nsw i32 %46, %6\l  %48 = add i32 %47, %17\l  %49 = add i32 %48, %10\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %1, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !4\l  %53 = add i32 %48, %28\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %1, i64 %54\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !4\l  %57 = fmul contract double %52, %56\l  %58 = fadd contract double %45, %57\l  %59 = or i32 %32, 2\l  %60 = mul nsw i32 %59, %6\l  %61 = add i32 %60, %17\l  %62 = add i32 %61, %10\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds double, double addrspace(1)* %1, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !4\l  %66 = add i32 %61, %28\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %1, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !4\l  %70 = fmul contract double %65, %69\l  %71 = fadd contract double %58, %70\l  %72 = or i32 %32, 3\l  %73 = mul nsw i32 %72, %6\l  %74 = add i32 %73, %17\l  %75 = add i32 %74, %10\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %1, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !4\l  %79 = add i32 %74, %28\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %1, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !4\l  %83 = fmul contract double %78, %82\l  %84 = fadd contract double %71, %83\l  %85 = or i32 %32, 4\l  %86 = mul nsw i32 %85, %6\l  %87 = add i32 %86, %17\l  %88 = add i32 %87, %10\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds double, double addrspace(1)* %1, i64 %89\l  %91 = load double, double addrspace(1)* %90, align 8, !tbaa !4\l  %92 = add i32 %87, %28\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %1, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !4\l  %96 = fmul contract double %91, %95\l  %97 = fadd contract double %84, %96\l  %98 = or i32 %32, 5\l  %99 = mul nsw i32 %98, %6\l  %100 = add i32 %99, %17\l  %101 = add i32 %100, %10\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %1, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !4\l  %105 = add i32 %100, %28\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %1, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !4\l  %109 = fmul contract double %104, %108\l  %110 = fadd contract double %97, %109\l  %111 = or i32 %32, 6\l  %112 = mul nsw i32 %111, %6\l  %113 = add i32 %112, %17\l  %114 = add i32 %113, %10\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds double, double addrspace(1)* %1, i64 %115\l  %117 = load double, double addrspace(1)* %116, align 8, !tbaa !4\l  %118 = add i32 %113, %28\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds double, double addrspace(1)* %1, i64 %119\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !4\l  %122 = fmul contract double %117, %121\l  %123 = fadd contract double %110, %122\l  %124 = or i32 %32, 7\l  %125 = mul nsw i32 %124, %6\l  %126 = add i32 %125, %17\l  %127 = add i32 %126, %10\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds double, double addrspace(1)* %1, i64 %128\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !4\l  %131 = add i32 %126, %28\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds double, double addrspace(1)* %1, i64 %132\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !4\l  %135 = fmul contract double %130, %134\l  %136 = fadd contract double %123, %135\l  %137 = add nuw nsw i32 %32, 8\l  %138 = add i32 %33, 8\l  %139 = icmp eq i32 %138, %25\l  br i1 %139, label %140, label %30, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x56f5d40:s0 -> Node0x56f5cf0;
	Node0x56f5d40:s1 -> Node0x56f5d40;
	Node0x56f5cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%140:\l140:                                              \l  %141 = phi double [ undef, %29 ], [ %136, %30 ]\l  %142 = phi double [ 0.000000e+00, %29 ], [ %136, %30 ]\l  %143 = phi i32 [ 0, %29 ], [ %137, %30 ]\l  br i1 %26, label %163, label %144\l|{<s0>T|<s1>F}}"];
	Node0x56f5cf0:s0 -> Node0x56f5a70;
	Node0x56f5cf0:s1 -> Node0x56fb460;
	Node0x56fb460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%144:\l144:                                              \l  %145 = phi double [ %159, %144 ], [ %142, %140 ]\l  %146 = phi i32 [ %160, %144 ], [ %143, %140 ]\l  %147 = phi i32 [ %161, %144 ], [ 0, %140 ]\l  %148 = mul nsw i32 %146, %6\l  %149 = add i32 %148, %17\l  %150 = add i32 %149, %10\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds double, double addrspace(1)* %1, i64 %151\l  %153 = load double, double addrspace(1)* %152, align 8, !tbaa !4\l  %154 = add i32 %149, %28\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds double, double addrspace(1)* %1, i64 %155\l  %157 = load double, double addrspace(1)* %156, align 8, !tbaa !4\l  %158 = fmul contract double %153, %157\l  %159 = fadd contract double %145, %158\l  %160 = add nuw nsw i32 %146, 1\l  %161 = add i32 %147, 1\l  %162 = icmp eq i32 %161, %23\l  br i1 %162, label %163, label %144, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x56fb460:s0 -> Node0x56f5a70;
	Node0x56fb460:s1 -> Node0x56fb460;
	Node0x56f5a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%163:\l163:                                              \l  %164 = phi double [ 0.000000e+00, %27 ], [ %141, %140 ], [ %159, %144 ]\l  %165 = add i32 %28, %16\l  %166 = mul i32 %165, %6\l  %167 = add i32 %166, %10\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds double, double addrspace(1)* %2, i64 %168\l  store double %164, double addrspace(1)* %169, align 8, !tbaa !4\l  %170 = add i32 %28, %22\l  %171 = icmp slt i32 %170, %6\l  br i1 %171, label %27, label %172, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56f5a70:s0 -> Node0x56f5940;
	Node0x56f5a70:s1 -> Node0x56f4b00;
	Node0x56f4b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%172:\l172:                                              \l  ret void\l}"];
}
