digraph "CFG for '_Z11computeCostPKdPKfS2_S2_S2_PKbPKiS6_Pf' function" {
	label="CFG for '_Z11computeCostPKdPKfS2_S2_S2_PKbPKiS6_Pf' function";

	Node0x60299e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%9:\l  %10 = load double, double addrspace(1)* %0, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %11 = fptosi double %10 to i32\l  %12 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %13 = load double, double addrspace(1)* %12, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %14 = fptosi double %13 to i32\l  %15 = getelementptr inbounds double, double addrspace(1)* %0, i64 6\l  %16 = load double, double addrspace(1)* %15, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %17 = fptosi double %16 to i32\l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = getelementptr i8, i8 addrspace(4)* %18, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !9, !invariant.load !8\l  %22 = zext i16 %21 to i32\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !10\l  %25 = icmp slt i32 %24, %11\l  br i1 %25, label %26, label %203\l|{<s0>T|<s1>F}}"];
	Node0x60299e0:s0 -> Node0x602d5e0;
	Node0x60299e0:s1 -> Node0x602d670;
	Node0x602d5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%26:\l26:                                               \l  %27 = getelementptr inbounds double, double addrspace(1)* %0, i64 7\l  %28 = load double, double addrspace(1)* %27, align 8, !tbaa !4,\l... !amdgpu.noclobber !8\l  %29 = fptosi double %28 to i32\l  %30 = mul i32 %23, %29\l  %31 = icmp sgt i32 %17, 0\l  %32 = icmp sgt i32 %14, 0\l  %33 = sext i32 %23 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %4, i64 %33\l  %35 = mul nsw i32 %23, %11\l  %36 = and i32 %14, 7\l  %37 = icmp ult i32 %14, 8\l  %38 = and i32 %14, -8\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x602d5e0 -> Node0x602e090;
	Node0x602e090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%40:\l40:                                               \l  %41 = phi i32 [ %24, %26 ], [ %201, %200 ]\l  %42 = zext i32 %41 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %42\l  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !11, !amdgpu.noclobber\l... !8\l  %45 = add nsw i32 %44, %30\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds i8, i8 addrspace(1)* %5, i64 %46\l  %48 = load i8, i8 addrspace(1)* %47, align 1, !tbaa !13, !range !15,\l... !amdgpu.noclobber !8\l  %49 = icmp eq i8 %48, 0\l  br i1 %49, label %200, label %50\l|{<s0>T|<s1>F}}"];
	Node0x602e090:s0 -> Node0x602e1c0;
	Node0x602e090:s1 -> Node0x602ebd0;
	Node0x602ebd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%50:\l50:                                               \l  br i1 %31, label %51, label %185\l|{<s0>T|<s1>F}}"];
	Node0x602ebd0:s0 -> Node0x602ecd0;
	Node0x602ebd0:s1 -> Node0x602ed20;
	Node0x602ecd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%51:\l51:                                               \l  %52 = mul nsw i32 %44, %17\l  %53 = mul i32 %41, %17\l  br label %54\l}"];
	Node0x602ecd0 -> Node0x602ef80;
	Node0x602ef80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%54:\l54:                                               \l  %55 = phi float [ 0.000000e+00, %51 ], [ %182, %181 ]\l  %56 = phi i32 [ 0, %51 ], [ %183, %181 ]\l  br i1 %32, label %57, label %181\l|{<s0>T|<s1>F}}"];
	Node0x602ef80:s0 -> Node0x602fd20;
	Node0x602ef80:s1 -> Node0x602fac0;
	Node0x602fd20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%57:\l57:                                               \l  %58 = add nsw i32 %56, %52\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %59\l  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !11, !amdgpu.noclobber\l... !8\l  %62 = add i32 %56, %53\l  %63 = mul i32 %62, %14\l  %64 = add i32 %61, %30\l  %65 = mul i32 %64, %14\l  br i1 %37, label %160, label %66\l|{<s0>T|<s1>F}}"];
	Node0x602fd20:s0 -> Node0x602dbe0;
	Node0x602fd20:s1 -> Node0x602dc70;
	Node0x602dc70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%66:\l66:                                               \l  %67 = phi i32 [ %157, %66 ], [ 0, %57 ]\l  %68 = phi float [ %156, %66 ], [ %55, %57 ]\l  %69 = phi i32 [ %158, %66 ], [ 0, %57 ]\l  %70 = add i32 %67, %63\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16\l  %74 = add i32 %67, %65\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %3, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16\l  %78 = fmul contract float %73, %77\l  %79 = fadd contract float %68, %78\l  %80 = or i32 %67, 1\l  %81 = add i32 %80, %63\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16\l  %85 = add i32 %80, %65\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %3, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = fmul contract float %84, %88\l  %90 = fadd contract float %79, %89\l  %91 = or i32 %67, 2\l  %92 = add i32 %91, %63\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16\l  %96 = add i32 %91, %65\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %3, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16\l  %100 = fmul contract float %95, %99\l  %101 = fadd contract float %90, %100\l  %102 = or i32 %67, 3\l  %103 = add i32 %102, %63\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !16\l  %107 = add i32 %102, %65\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %3, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16\l  %111 = fmul contract float %106, %110\l  %112 = fadd contract float %101, %111\l  %113 = or i32 %67, 4\l  %114 = add i32 %113, %63\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16\l  %118 = add i32 %113, %65\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %3, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !16\l  %122 = fmul contract float %117, %121\l  %123 = fadd contract float %112, %122\l  %124 = or i32 %67, 5\l  %125 = add i32 %124, %63\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !16\l  %129 = add i32 %124, %65\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %3, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !16\l  %133 = fmul contract float %128, %132\l  %134 = fadd contract float %123, %133\l  %135 = or i32 %67, 6\l  %136 = add i32 %135, %63\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = add i32 %135, %65\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %3, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !16\l  %144 = fmul contract float %139, %143\l  %145 = fadd contract float %134, %144\l  %146 = or i32 %67, 7\l  %147 = add i32 %146, %63\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16\l  %151 = add i32 %146, %65\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %3, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !16\l  %155 = fmul contract float %150, %154\l  %156 = fadd contract float %145, %155\l  %157 = add nuw nsw i32 %67, 8\l  %158 = add i32 %69, 8\l  %159 = icmp eq i32 %158, %38\l  br i1 %159, label %160, label %66, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x602dc70:s0 -> Node0x602dbe0;
	Node0x602dc70:s1 -> Node0x602dc70;
	Node0x602dbe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%160:\l160:                                              \l  %161 = phi float [ undef, %57 ], [ %156, %66 ]\l  %162 = phi i32 [ 0, %57 ], [ %157, %66 ]\l  %163 = phi float [ %55, %57 ], [ %156, %66 ]\l  br i1 %39, label %181, label %164\l|{<s0>T|<s1>F}}"];
	Node0x602dbe0:s0 -> Node0x602fac0;
	Node0x602dbe0:s1 -> Node0x6035310;
	Node0x6035310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%164:\l164:                                              \l  %165 = phi i32 [ %178, %164 ], [ %162, %160 ]\l  %166 = phi float [ %177, %164 ], [ %163, %160 ]\l  %167 = phi i32 [ %179, %164 ], [ 0, %160 ]\l  %168 = add i32 %165, %63\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %1, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !16\l  %172 = add i32 %165, %65\l  %173 = sext i32 %172 to i64\l  %174 = getelementptr inbounds float, float addrspace(1)* %3, i64 %173\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !16\l  %176 = fmul contract float %171, %175\l  %177 = fadd contract float %166, %176\l  %178 = add nuw nsw i32 %165, 1\l  %179 = add i32 %167, 1\l  %180 = icmp eq i32 %179, %36\l  br i1 %180, label %181, label %164, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6035310:s0 -> Node0x602fac0;
	Node0x6035310:s1 -> Node0x6035310;
	Node0x602fac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%181:\l181:                                              \l  %182 = phi float [ %55, %54 ], [ %161, %160 ], [ %177, %164 ]\l  %183 = add nuw nsw i32 %56, 1\l  %184 = icmp eq i32 %183, %17\l  br i1 %184, label %185, label %54, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x602fac0:s0 -> Node0x602ed20;
	Node0x602fac0:s1 -> Node0x602ef80;
	Node0x602ed20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%185:\l185:                                              \l  %186 = phi float [ 0.000000e+00, %50 ], [ %182, %181 ]\l  %187 = load float, float addrspace(1)* %34, align 4, !tbaa !16\l  %188 = fmul contract float %187, %187\l  %189 = getelementptr inbounds float, float addrspace(1)* %2, i64 %42\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !16\l  %191 = fmul contract float %190, %190\l  %192 = fadd contract float %188, %191\l  %193 = fmul contract float %190, 2.000000e+00\l  %194 = fmul contract float %187, %193\l  %195 = fmul contract float %186, %194\l  %196 = fsub contract float %192, %195\l  %197 = add nsw i32 %41, %35\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %8, i64 %198\l  store float %196, float addrspace(1)* %199, align 4, !tbaa !16\l  br label %200\l}"];
	Node0x602ed20 -> Node0x602e1c0;
	Node0x602e1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%200:\l200:                                              \l  %201 = add nuw nsw i32 %41, %22\l  %202 = icmp slt i32 %201, %11\l  br i1 %202, label %40, label %203, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x602e1c0:s0 -> Node0x602e090;
	Node0x602e1c0:s1 -> Node0x602d670;
	Node0x602d670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%203:\l203:                                              \l  ret void\l}"];
}
