digraph "CFG for '_Z10bestFilterPKdPKfS2_PfS3_Pi' function" {
	label="CFG for '_Z10bestFilterPKdPKfS2_PfS3_Pi' function";

	Node0x4b0c070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = load double, double addrspace(1)* %0, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %10 = fptosi double %9 to i32\l  %11 = getelementptr inbounds double, double addrspace(1)* %0, i64 1\l  %12 = load double, double addrspace(1)* %11, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %13 = fptosi double %12 to i32\l  %14 = getelementptr inbounds double, double addrspace(1)* %0, i64 7\l  %15 = load double, double addrspace(1)* %14, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %16 = fptrunc double %15 to float\l  %17 = getelementptr inbounds double, double addrspace(1)* %0, i64 4\l  %18 = load double, double addrspace(1)* %17, align 8, !tbaa !5,\l... !amdgpu.noclobber !9\l  %19 = fptosi double %18 to i32\l  %20 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %21 = getelementptr i8, i8 addrspace(4)* %20, i64 4\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 4, !range !10, !invariant.load\l... !9\l  %24 = zext i16 %23 to i32\l  %25 = getelementptr inbounds i8, i8 addrspace(4)* %20, i64 12\l  %26 = bitcast i8 addrspace(4)* %25 to i32 addrspace(4)*\l  %27 = load i32, i32 addrspace(4)* %26, align 4, !tbaa !11\l  %28 = mul i32 %8, %24\l  %29 = add i32 %28, %7\l  %30 = sub nsw i32 %10, %19\l  %31 = icmp slt i32 %29, %30\l  br i1 %31, label %32, label %159\l|{<s0>T|<s1>F}}"];
	Node0x4b0c070:s0 -> Node0x4b0f7b0;
	Node0x4b0c070:s1 -> Node0x4b0f840;
	Node0x4b0f7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%32:\l32:                                               \l  %33 = icmp sgt i32 %13, 0\l  %34 = fadd contract float %16, 1.000000e+00\l  %35 = udiv i32 %27, %24\l  %36 = mul i32 %35, %24\l  %37 = icmp ugt i32 %27, %36\l  %38 = zext i1 %37 to i32\l  %39 = add i32 %35, %38\l  %40 = mul i32 %39, %24\l  %41 = and i32 %13, 1\l  %42 = icmp eq i32 %13, 1\l  %43 = and i32 %13, -2\l  %44 = icmp eq i32 %41, 0\l  br label %45\l}"];
	Node0x4b0f7b0 -> Node0x4b10ba0;
	Node0x4b10ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%45:\l45:                                               \l  %46 = phi i32 [ %29, %32 ], [ %157, %148 ]\l  %47 = phi i32 [ 0, %32 ], [ %150, %148 ]\l  br i1 %33, label %48, label %148\l|{<s0>T|<s1>F}}"];
	Node0x4b10ba0:s0 -> Node0x4b10f30;
	Node0x4b10ba0:s1 -> Node0x4b10cd0;
	Node0x4b10f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%48:\l48:                                               \l  br i1 %42, label %115, label %49\l|{<s0>T|<s1>F}}"];
	Node0x4b10f30:s0 -> Node0x4b11070;
	Node0x4b10f30:s1 -> Node0x4b110c0;
	Node0x4b110c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  %50 = phi float [ %111, %108 ], [ 0.000000e+00, %48 ]\l  %51 = phi i32 [ %112, %108 ], [ 0, %48 ]\l  %52 = phi i32 [ %110, %108 ], [ %47, %48 ]\l  %53 = phi float [ %109, %108 ], [ 0.000000e+00, %48 ]\l  %54 = phi i32 [ %113, %108 ], [ 0, %48 ]\l  %55 = mul nsw i32 %51, %10\l  %56 = add nsw i32 %55, %46\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %1, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !20\l  %60 = tail call float @llvm.maxnum.f32(float %59, float 0.000000e+00)\l  %61 = zext i32 %51 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %2, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !20\l  %64 = fmul contract float %63, %16\l  %65 = fadd contract float %60, %64\l  %66 = fmul contract float %65, %65\l  %67 = fdiv contract float %66, %34\l  %68 = fmul contract float %63, %64\l  %69 = fsub contract float %67, %68\l  %70 = fpext float %69 to double\l  %71 = fpext float %53 to double\l  %72 = fadd contract double %71, 0x3EB0C6F7A0B5ED8D\l  %73 = fcmp contract olt double %72, %70\l  br i1 %73, label %79, label %74\l|{<s0>T|<s1>F}}"];
	Node0x4b110c0:s0 -> Node0x4b12db0;
	Node0x4b110c0:s1 -> Node0x4b12e40;
	Node0x4b12e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%74:\l74:                                               \l  %75 = fpext float %50 to double\l  %76 = fadd contract double %75, 0x3EB0C6F7A0B5ED8D\l  %77 = fcmp contract olt double %76, %70\l  %78 = select i1 %77, float %69, float %50\l  br label %79\l}"];
	Node0x4b12e40 -> Node0x4b12db0;
	Node0x4b12db0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%79:\l79:                                               \l  %80 = phi float [ %69, %49 ], [ %53, %74 ]\l  %81 = phi i32 [ %51, %49 ], [ %52, %74 ]\l  %82 = phi float [ %53, %49 ], [ %78, %74 ]\l  %83 = or i32 %51, 1\l  %84 = mul nsw i32 %83, %10\l  %85 = add nsw i32 %84, %46\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !20\l  %89 = tail call float @llvm.maxnum.f32(float %88, float 0.000000e+00)\l  %90 = zext i32 %83 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !20\l  %93 = fmul contract float %92, %16\l  %94 = fadd contract float %89, %93\l  %95 = fmul contract float %94, %94\l  %96 = fdiv contract float %95, %34\l  %97 = fmul contract float %92, %93\l  %98 = fsub contract float %96, %97\l  %99 = fpext float %98 to double\l  %100 = fpext float %80 to double\l  %101 = fadd contract double %100, 0x3EB0C6F7A0B5ED8D\l  %102 = fcmp contract olt double %101, %99\l  br i1 %102, label %108, label %103\l|{<s0>T|<s1>F}}"];
	Node0x4b12db0:s0 -> Node0x4b11230;
	Node0x4b12db0:s1 -> Node0x4b13f90;
	Node0x4b13f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%103:\l103:                                              \l  %104 = fpext float %82 to double\l  %105 = fadd contract double %104, 0x3EB0C6F7A0B5ED8D\l  %106 = fcmp contract olt double %105, %99\l  %107 = select i1 %106, float %98, float %82\l  br label %108\l}"];
	Node0x4b13f90 -> Node0x4b11230;
	Node0x4b11230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%108:\l108:                                              \l  %109 = phi float [ %98, %79 ], [ %80, %103 ]\l  %110 = phi i32 [ %83, %79 ], [ %81, %103 ]\l  %111 = phi float [ %80, %79 ], [ %107, %103 ]\l  %112 = add nuw nsw i32 %51, 2\l  %113 = add i32 %54, 2\l  %114 = icmp eq i32 %113, %43\l  br i1 %114, label %115, label %49, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4b11230:s0 -> Node0x4b11070;
	Node0x4b11230:s1 -> Node0x4b110c0;
	Node0x4b11070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%115:\l115:                                              \l  %116 = phi float [ undef, %48 ], [ %109, %108 ]\l  %117 = phi i32 [ undef, %48 ], [ %110, %108 ]\l  %118 = phi float [ undef, %48 ], [ %111, %108 ]\l  %119 = phi float [ 0.000000e+00, %48 ], [ %111, %108 ]\l  %120 = phi i32 [ 0, %48 ], [ %112, %108 ]\l  %121 = phi i32 [ %47, %48 ], [ %110, %108 ]\l  %122 = phi float [ 0.000000e+00, %48 ], [ %109, %108 ]\l  br i1 %44, label %148, label %123\l|{<s0>T|<s1>F}}"];
	Node0x4b11070:s0 -> Node0x4b10cd0;
	Node0x4b11070:s1 -> Node0x4b15060;
	Node0x4b15060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%123:\l123:                                              \l  %124 = mul nsw i32 %120, %10\l  %125 = add nsw i32 %124, %46\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !20\l  %129 = tail call float @llvm.maxnum.f32(float %128, float 0.000000e+00)\l  %130 = zext i32 %120 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %2, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !20\l  %133 = fmul contract float %132, %16\l  %134 = fadd contract float %129, %133\l  %135 = fmul contract float %134, %134\l  %136 = fdiv contract float %135, %34\l  %137 = fmul contract float %132, %133\l  %138 = fsub contract float %136, %137\l  %139 = fpext float %138 to double\l  %140 = fpext float %122 to double\l  %141 = fadd contract double %140, 0x3EB0C6F7A0B5ED8D\l  %142 = fcmp contract olt double %141, %139\l  br i1 %142, label %148, label %143\l|{<s0>T|<s1>F}}"];
	Node0x4b15060:s0 -> Node0x4b10cd0;
	Node0x4b15060:s1 -> Node0x4b12a30;
	Node0x4b12a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%143:\l143:                                              \l  %144 = fpext float %119 to double\l  %145 = fadd contract double %144, 0x3EB0C6F7A0B5ED8D\l  %146 = fcmp contract olt double %145, %139\l  %147 = select i1 %146, float %138, float %119\l  br label %148\l}"];
	Node0x4b12a30 -> Node0x4b10cd0;
	Node0x4b10cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%148:\l148:                                              \l  %149 = phi float [ 0.000000e+00, %45 ], [ %116, %115 ], [ %138, %123 ], [\l... %122, %143 ]\l  %150 = phi i32 [ %47, %45 ], [ %117, %115 ], [ %120, %123 ], [ %121, %143 ]\l  %151 = phi float [ 0.000000e+00, %45 ], [ %118, %115 ], [ %122, %123 ], [\l... %147, %143 ]\l  %152 = sext i32 %46 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %3, i64 %152\l  store float %149, float addrspace(1)* %153, align 4, !tbaa !20\l  %154 = fsub contract float %149, %151\l  %155 = getelementptr inbounds float, float addrspace(1)* %4, i64 %152\l  store float %154, float addrspace(1)* %155, align 4, !tbaa !20\l  %156 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %152\l  store i32 %150, i32 addrspace(1)* %156, align 4, !tbaa !24\l  %157 = add i32 %40, %46\l  %158 = icmp slt i32 %157, %30\l  br i1 %158, label %45, label %159, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4b10cd0:s0 -> Node0x4b10ba0;
	Node0x4b10cd0:s1 -> Node0x4b0f840;
	Node0x4b0f840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%159:\l159:                                              \l  ret void\l}"];
}
