; ModuleID = '../data/hip_kernels/591/19/main.cu'
source_filename = "../data/hip_kernels/591/19/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

@_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean = internal unnamed_addr addrspace(3) global [1024 x float] undef, align 16
@_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev = internal unnamed_addr addrspace(3) global [1024 x float] undef, align 16

; Function Attrs: convergent mustprogress norecurse nounwind
define protected amdgpu_kernel void @_Z27zero_dm_outliers_kernel_onePtii(i16 addrspace(1)* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4
  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*
  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5
  %9 = zext i16 %8 to i32
  %10 = mul i32 %4, %9
  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %12 = add i32 %10, %11
  %13 = icmp slt i32 %1, 1
  %14 = mul nsw i32 %12, %1
  br i1 %13, label %4284, label %15

15:                                               ; preds = %3
  %16 = add i32 %1, -1
  %17 = and i32 %1, 7
  %18 = icmp ult i32 %16, 7
  br i1 %18, label %4257, label %19

19:                                               ; preds = %15
  %20 = and i32 %1, -8
  br label %4318

21:                                               ; preds = %4284
  br i1 %13, label %199, label %22

22:                                               ; preds = %21
  %23 = fadd contract float %4289, %4314
  %24 = fsub contract float %4289, %4314
  %25 = add i32 %1, -1
  %26 = and i32 %1, 7
  %27 = icmp ult i32 %25, 7
  br i1 %27, label %166, label %28

28:                                               ; preds = %22
  %29 = and i32 %1, -8
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i32 [ 0, %28 ], [ %162, %30 ]
  %32 = phi i32 [ 0, %28 ], [ %163, %30 ]
  %33 = phi float [ 0.000000e+00, %28 ], [ %160, %30 ]
  %34 = phi float [ 0.000000e+00, %28 ], [ %158, %30 ]
  %35 = phi i32 [ 0, %28 ], [ %164, %30 ]
  %36 = add nsw i32 %32, %14
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %37
  %39 = load i16, i16 addrspace(1)* %38, align 2, !tbaa !7, !amdgpu.noclobber !5
  %40 = uitofp i16 %39 to float
  %41 = fcmp contract ogt float %23, %40
  %42 = fcmp contract olt float %24, %40
  %43 = and i1 %41, %42
  %44 = fmul contract float %40, %40
  %45 = select i1 %43, float %40, float -0.000000e+00
  %46 = fadd contract float %34, %45
  %47 = select i1 %43, float %44, float -0.000000e+00
  %48 = fadd contract float %33, %47
  %49 = zext i1 %43 to i32
  %50 = add nuw nsw i32 %31, %49
  %51 = or i32 %32, 1
  %52 = add nsw i32 %51, %14
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %53
  %55 = load i16, i16 addrspace(1)* %54, align 2, !tbaa !7, !amdgpu.noclobber !5
  %56 = uitofp i16 %55 to float
  %57 = fcmp contract ogt float %23, %56
  %58 = fcmp contract olt float %24, %56
  %59 = and i1 %57, %58
  %60 = fmul contract float %56, %56
  %61 = select i1 %59, float %56, float -0.000000e+00
  %62 = fadd contract float %46, %61
  %63 = select i1 %59, float %60, float -0.000000e+00
  %64 = fadd contract float %48, %63
  %65 = zext i1 %59 to i32
  %66 = add nuw nsw i32 %50, %65
  %67 = or i32 %32, 2
  %68 = add nsw i32 %67, %14
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %69
  %71 = load i16, i16 addrspace(1)* %70, align 2, !tbaa !7, !amdgpu.noclobber !5
  %72 = uitofp i16 %71 to float
  %73 = fcmp contract ogt float %23, %72
  %74 = fcmp contract olt float %24, %72
  %75 = and i1 %73, %74
  %76 = fmul contract float %72, %72
  %77 = select i1 %75, float %72, float -0.000000e+00
  %78 = fadd contract float %62, %77
  %79 = select i1 %75, float %76, float -0.000000e+00
  %80 = fadd contract float %64, %79
  %81 = zext i1 %75 to i32
  %82 = add nuw nsw i32 %66, %81
  %83 = or i32 %32, 3
  %84 = add nsw i32 %83, %14
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %85
  %87 = load i16, i16 addrspace(1)* %86, align 2, !tbaa !7, !amdgpu.noclobber !5
  %88 = uitofp i16 %87 to float
  %89 = fcmp contract ogt float %23, %88
  %90 = fcmp contract olt float %24, %88
  %91 = and i1 %89, %90
  %92 = fmul contract float %88, %88
  %93 = select i1 %91, float %88, float -0.000000e+00
  %94 = fadd contract float %78, %93
  %95 = select i1 %91, float %92, float -0.000000e+00
  %96 = fadd contract float %80, %95
  %97 = zext i1 %91 to i32
  %98 = add nuw nsw i32 %82, %97
  %99 = or i32 %32, 4
  %100 = add nsw i32 %99, %14
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %101
  %103 = load i16, i16 addrspace(1)* %102, align 2, !tbaa !7, !amdgpu.noclobber !5
  %104 = uitofp i16 %103 to float
  %105 = fcmp contract ogt float %23, %104
  %106 = fcmp contract olt float %24, %104
  %107 = and i1 %105, %106
  %108 = fmul contract float %104, %104
  %109 = select i1 %107, float %104, float -0.000000e+00
  %110 = fadd contract float %94, %109
  %111 = select i1 %107, float %108, float -0.000000e+00
  %112 = fadd contract float %96, %111
  %113 = zext i1 %107 to i32
  %114 = add nuw nsw i32 %98, %113
  %115 = or i32 %32, 5
  %116 = add nsw i32 %115, %14
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %117
  %119 = load i16, i16 addrspace(1)* %118, align 2, !tbaa !7, !amdgpu.noclobber !5
  %120 = uitofp i16 %119 to float
  %121 = fcmp contract ogt float %23, %120
  %122 = fcmp contract olt float %24, %120
  %123 = and i1 %121, %122
  %124 = fmul contract float %120, %120
  %125 = select i1 %123, float %120, float -0.000000e+00
  %126 = fadd contract float %110, %125
  %127 = select i1 %123, float %124, float -0.000000e+00
  %128 = fadd contract float %112, %127
  %129 = zext i1 %123 to i32
  %130 = add nuw nsw i32 %114, %129
  %131 = or i32 %32, 6
  %132 = add nsw i32 %131, %14
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %133
  %135 = load i16, i16 addrspace(1)* %134, align 2, !tbaa !7, !amdgpu.noclobber !5
  %136 = uitofp i16 %135 to float
  %137 = fcmp contract ogt float %23, %136
  %138 = fcmp contract olt float %24, %136
  %139 = and i1 %137, %138
  %140 = fmul contract float %136, %136
  %141 = select i1 %139, float %136, float -0.000000e+00
  %142 = fadd contract float %126, %141
  %143 = select i1 %139, float %140, float -0.000000e+00
  %144 = fadd contract float %128, %143
  %145 = zext i1 %139 to i32
  %146 = add nuw nsw i32 %130, %145
  %147 = or i32 %32, 7
  %148 = add nsw i32 %147, %14
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %149
  %151 = load i16, i16 addrspace(1)* %150, align 2, !tbaa !7, !amdgpu.noclobber !5
  %152 = uitofp i16 %151 to float
  %153 = fcmp contract ogt float %23, %152
  %154 = fcmp contract olt float %24, %152
  %155 = and i1 %153, %154
  %156 = fmul contract float %152, %152
  %157 = select i1 %155, float %152, float -0.000000e+00
  %158 = fadd contract float %142, %157
  %159 = select i1 %155, float %156, float -0.000000e+00
  %160 = fadd contract float %144, %159
  %161 = zext i1 %155 to i32
  %162 = add nuw nsw i32 %146, %161
  %163 = add nuw nsw i32 %32, 8
  %164 = add i32 %35, 8
  %165 = icmp eq i32 %164, %29
  br i1 %165, label %166, label %30, !llvm.loop !11

166:                                              ; preds = %30, %22
  %167 = phi float [ undef, %22 ], [ %158, %30 ]
  %168 = phi float [ undef, %22 ], [ %160, %30 ]
  %169 = phi i32 [ undef, %22 ], [ %162, %30 ]
  %170 = phi i32 [ 0, %22 ], [ %162, %30 ]
  %171 = phi i32 [ 0, %22 ], [ %163, %30 ]
  %172 = phi float [ 0.000000e+00, %22 ], [ %160, %30 ]
  %173 = phi float [ 0.000000e+00, %22 ], [ %158, %30 ]
  %174 = icmp eq i32 %26, 0
  br i1 %174, label %199, label %175

175:                                              ; preds = %166, %175
  %176 = phi i32 [ %195, %175 ], [ %170, %166 ]
  %177 = phi i32 [ %196, %175 ], [ %171, %166 ]
  %178 = phi float [ %193, %175 ], [ %172, %166 ]
  %179 = phi float [ %191, %175 ], [ %173, %166 ]
  %180 = phi i32 [ %197, %175 ], [ 0, %166 ]
  %181 = add nsw i32 %177, %14
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %182
  %184 = load i16, i16 addrspace(1)* %183, align 2, !tbaa !7, !amdgpu.noclobber !5
  %185 = uitofp i16 %184 to float
  %186 = fcmp contract ogt float %23, %185
  %187 = fcmp contract olt float %24, %185
  %188 = and i1 %186, %187
  %189 = fmul contract float %185, %185
  %190 = select i1 %188, float %185, float -0.000000e+00
  %191 = fadd contract float %179, %190
  %192 = select i1 %188, float %189, float -0.000000e+00
  %193 = fadd contract float %178, %192
  %194 = zext i1 %188 to i32
  %195 = add nuw nsw i32 %176, %194
  %196 = add nuw nsw i32 %177, 1
  %197 = add i32 %180, 1
  %198 = icmp eq i32 %197, %26
  br i1 %198, label %199, label %175, !llvm.loop !13

199:                                              ; preds = %166, %175, %21
  %200 = phi float [ 0.000000e+00, %21 ], [ %167, %166 ], [ %191, %175 ]
  %201 = phi float [ 0.000000e+00, %21 ], [ %168, %166 ], [ %193, %175 ]
  %202 = phi i32 [ 0, %21 ], [ %169, %166 ], [ %195, %175 ]
  %203 = sitofp i32 %202 to float
  %204 = fdiv contract float %200, %203
  %205 = fdiv contract float %201, %203
  %206 = fmul contract float %204, %204
  %207 = fsub contract float %205, %206
  %208 = fcmp olt float %207, 0x39F0000000000000
  %209 = select i1 %208, float 0x41F0000000000000, float 1.000000e+00
  %210 = fmul float %207, %209
  %211 = tail call float @llvm.sqrt.f32(float %210)
  %212 = bitcast float %211 to i32
  %213 = add nsw i32 %212, -1
  %214 = bitcast i32 %213 to float
  %215 = add nsw i32 %212, 1
  %216 = bitcast i32 %215 to float
  %217 = tail call i1 @llvm.amdgcn.class.f32(float %210, i32 608)
  %218 = select i1 %208, float 0x3EF0000000000000, float 1.000000e+00
  %219 = fneg float %216
  %220 = tail call float @llvm.fma.f32(float %219, float %211, float %210)
  %221 = fcmp ogt float %220, 0.000000e+00
  %222 = fneg float %214
  %223 = tail call float @llvm.fma.f32(float %222, float %211, float %210)
  %224 = fcmp ole float %223, 0.000000e+00
  %225 = select i1 %224, float %214, float %211
  %226 = select i1 %221, float %216, float %225
  %227 = fmul float %218, %226
  %228 = select i1 %217, float %210, float %227
  %229 = fmul contract float %228, 2.000000e+00
  %230 = fsub contract float %204, %4289
  %231 = tail call float @llvm.fabs.f32(float %230)
  %232 = fcmp contract ogt float %231, 0x3EB0C6F7A0000000
  br i1 %232, label %233, label %4399, !llvm.loop !15

233:                                              ; preds = %199
  br i1 %13, label %411, label %234

234:                                              ; preds = %233
  %235 = fadd contract float %204, %229
  %236 = fsub contract float %204, %229
  %237 = add i32 %1, -1
  %238 = and i32 %1, 7
  %239 = icmp ult i32 %237, 7
  br i1 %239, label %378, label %240

240:                                              ; preds = %234
  %241 = and i32 %1, -8
  br label %242

242:                                              ; preds = %242, %240
  %243 = phi i32 [ 0, %240 ], [ %374, %242 ]
  %244 = phi i32 [ 0, %240 ], [ %375, %242 ]
  %245 = phi float [ 0.000000e+00, %240 ], [ %372, %242 ]
  %246 = phi float [ 0.000000e+00, %240 ], [ %370, %242 ]
  %247 = phi i32 [ 0, %240 ], [ %376, %242 ]
  %248 = add nsw i32 %244, %14
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %249
  %251 = load i16, i16 addrspace(1)* %250, align 2, !tbaa !7, !amdgpu.noclobber !5
  %252 = uitofp i16 %251 to float
  %253 = fcmp contract ogt float %235, %252
  %254 = fcmp contract olt float %236, %252
  %255 = and i1 %253, %254
  %256 = fmul contract float %252, %252
  %257 = select i1 %255, float %252, float -0.000000e+00
  %258 = fadd contract float %246, %257
  %259 = select i1 %255, float %256, float -0.000000e+00
  %260 = fadd contract float %245, %259
  %261 = zext i1 %255 to i32
  %262 = add nuw nsw i32 %243, %261
  %263 = or i32 %244, 1
  %264 = add nsw i32 %263, %14
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %265
  %267 = load i16, i16 addrspace(1)* %266, align 2, !tbaa !7, !amdgpu.noclobber !5
  %268 = uitofp i16 %267 to float
  %269 = fcmp contract ogt float %235, %268
  %270 = fcmp contract olt float %236, %268
  %271 = and i1 %269, %270
  %272 = fmul contract float %268, %268
  %273 = select i1 %271, float %268, float -0.000000e+00
  %274 = fadd contract float %258, %273
  %275 = select i1 %271, float %272, float -0.000000e+00
  %276 = fadd contract float %260, %275
  %277 = zext i1 %271 to i32
  %278 = add nuw nsw i32 %262, %277
  %279 = or i32 %244, 2
  %280 = add nsw i32 %279, %14
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %281
  %283 = load i16, i16 addrspace(1)* %282, align 2, !tbaa !7, !amdgpu.noclobber !5
  %284 = uitofp i16 %283 to float
  %285 = fcmp contract ogt float %235, %284
  %286 = fcmp contract olt float %236, %284
  %287 = and i1 %285, %286
  %288 = fmul contract float %284, %284
  %289 = select i1 %287, float %284, float -0.000000e+00
  %290 = fadd contract float %274, %289
  %291 = select i1 %287, float %288, float -0.000000e+00
  %292 = fadd contract float %276, %291
  %293 = zext i1 %287 to i32
  %294 = add nuw nsw i32 %278, %293
  %295 = or i32 %244, 3
  %296 = add nsw i32 %295, %14
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %297
  %299 = load i16, i16 addrspace(1)* %298, align 2, !tbaa !7, !amdgpu.noclobber !5
  %300 = uitofp i16 %299 to float
  %301 = fcmp contract ogt float %235, %300
  %302 = fcmp contract olt float %236, %300
  %303 = and i1 %301, %302
  %304 = fmul contract float %300, %300
  %305 = select i1 %303, float %300, float -0.000000e+00
  %306 = fadd contract float %290, %305
  %307 = select i1 %303, float %304, float -0.000000e+00
  %308 = fadd contract float %292, %307
  %309 = zext i1 %303 to i32
  %310 = add nuw nsw i32 %294, %309
  %311 = or i32 %244, 4
  %312 = add nsw i32 %311, %14
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %313
  %315 = load i16, i16 addrspace(1)* %314, align 2, !tbaa !7, !amdgpu.noclobber !5
  %316 = uitofp i16 %315 to float
  %317 = fcmp contract ogt float %235, %316
  %318 = fcmp contract olt float %236, %316
  %319 = and i1 %317, %318
  %320 = fmul contract float %316, %316
  %321 = select i1 %319, float %316, float -0.000000e+00
  %322 = fadd contract float %306, %321
  %323 = select i1 %319, float %320, float -0.000000e+00
  %324 = fadd contract float %308, %323
  %325 = zext i1 %319 to i32
  %326 = add nuw nsw i32 %310, %325
  %327 = or i32 %244, 5
  %328 = add nsw i32 %327, %14
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %329
  %331 = load i16, i16 addrspace(1)* %330, align 2, !tbaa !7, !amdgpu.noclobber !5
  %332 = uitofp i16 %331 to float
  %333 = fcmp contract ogt float %235, %332
  %334 = fcmp contract olt float %236, %332
  %335 = and i1 %333, %334
  %336 = fmul contract float %332, %332
  %337 = select i1 %335, float %332, float -0.000000e+00
  %338 = fadd contract float %322, %337
  %339 = select i1 %335, float %336, float -0.000000e+00
  %340 = fadd contract float %324, %339
  %341 = zext i1 %335 to i32
  %342 = add nuw nsw i32 %326, %341
  %343 = or i32 %244, 6
  %344 = add nsw i32 %343, %14
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %345
  %347 = load i16, i16 addrspace(1)* %346, align 2, !tbaa !7, !amdgpu.noclobber !5
  %348 = uitofp i16 %347 to float
  %349 = fcmp contract ogt float %235, %348
  %350 = fcmp contract olt float %236, %348
  %351 = and i1 %349, %350
  %352 = fmul contract float %348, %348
  %353 = select i1 %351, float %348, float -0.000000e+00
  %354 = fadd contract float %338, %353
  %355 = select i1 %351, float %352, float -0.000000e+00
  %356 = fadd contract float %340, %355
  %357 = zext i1 %351 to i32
  %358 = add nuw nsw i32 %342, %357
  %359 = or i32 %244, 7
  %360 = add nsw i32 %359, %14
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %361
  %363 = load i16, i16 addrspace(1)* %362, align 2, !tbaa !7, !amdgpu.noclobber !5
  %364 = uitofp i16 %363 to float
  %365 = fcmp contract ogt float %235, %364
  %366 = fcmp contract olt float %236, %364
  %367 = and i1 %365, %366
  %368 = fmul contract float %364, %364
  %369 = select i1 %367, float %364, float -0.000000e+00
  %370 = fadd contract float %354, %369
  %371 = select i1 %367, float %368, float -0.000000e+00
  %372 = fadd contract float %356, %371
  %373 = zext i1 %367 to i32
  %374 = add nuw nsw i32 %358, %373
  %375 = add nuw nsw i32 %244, 8
  %376 = add i32 %247, 8
  %377 = icmp eq i32 %376, %241
  br i1 %377, label %378, label %242, !llvm.loop !11

378:                                              ; preds = %242, %234
  %379 = phi float [ undef, %234 ], [ %370, %242 ]
  %380 = phi float [ undef, %234 ], [ %372, %242 ]
  %381 = phi i32 [ undef, %234 ], [ %374, %242 ]
  %382 = phi i32 [ 0, %234 ], [ %374, %242 ]
  %383 = phi i32 [ 0, %234 ], [ %375, %242 ]
  %384 = phi float [ 0.000000e+00, %234 ], [ %372, %242 ]
  %385 = phi float [ 0.000000e+00, %234 ], [ %370, %242 ]
  %386 = icmp eq i32 %238, 0
  br i1 %386, label %411, label %387

387:                                              ; preds = %378, %387
  %388 = phi i32 [ %407, %387 ], [ %382, %378 ]
  %389 = phi i32 [ %408, %387 ], [ %383, %378 ]
  %390 = phi float [ %405, %387 ], [ %384, %378 ]
  %391 = phi float [ %403, %387 ], [ %385, %378 ]
  %392 = phi i32 [ %409, %387 ], [ 0, %378 ]
  %393 = add nsw i32 %389, %14
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %394
  %396 = load i16, i16 addrspace(1)* %395, align 2, !tbaa !7, !amdgpu.noclobber !5
  %397 = uitofp i16 %396 to float
  %398 = fcmp contract ogt float %235, %397
  %399 = fcmp contract olt float %236, %397
  %400 = and i1 %398, %399
  %401 = fmul contract float %397, %397
  %402 = select i1 %400, float %397, float -0.000000e+00
  %403 = fadd contract float %391, %402
  %404 = select i1 %400, float %401, float -0.000000e+00
  %405 = fadd contract float %390, %404
  %406 = zext i1 %400 to i32
  %407 = add nuw nsw i32 %388, %406
  %408 = add nuw nsw i32 %389, 1
  %409 = add i32 %392, 1
  %410 = icmp eq i32 %409, %238
  br i1 %410, label %411, label %387, !llvm.loop !16

411:                                              ; preds = %378, %387, %233
  %412 = phi float [ 0.000000e+00, %233 ], [ %379, %378 ], [ %403, %387 ]
  %413 = phi float [ 0.000000e+00, %233 ], [ %380, %378 ], [ %405, %387 ]
  %414 = phi i32 [ 0, %233 ], [ %381, %378 ], [ %407, %387 ]
  %415 = sitofp i32 %414 to float
  %416 = fdiv contract float %412, %415
  %417 = fdiv contract float %413, %415
  %418 = fmul contract float %416, %416
  %419 = fsub contract float %417, %418
  %420 = fcmp olt float %419, 0x39F0000000000000
  %421 = select i1 %420, float 0x41F0000000000000, float 1.000000e+00
  %422 = fmul float %419, %421
  %423 = tail call float @llvm.sqrt.f32(float %422)
  %424 = bitcast float %423 to i32
  %425 = add nsw i32 %424, -1
  %426 = bitcast i32 %425 to float
  %427 = add nsw i32 %424, 1
  %428 = bitcast i32 %427 to float
  %429 = tail call i1 @llvm.amdgcn.class.f32(float %422, i32 608)
  %430 = select i1 %420, float 0x3EF0000000000000, float 1.000000e+00
  %431 = fneg float %428
  %432 = tail call float @llvm.fma.f32(float %431, float %423, float %422)
  %433 = fcmp ogt float %432, 0.000000e+00
  %434 = fneg float %426
  %435 = tail call float @llvm.fma.f32(float %434, float %423, float %422)
  %436 = fcmp ole float %435, 0.000000e+00
  %437 = select i1 %436, float %426, float %423
  %438 = select i1 %433, float %428, float %437
  %439 = fmul float %430, %438
  %440 = select i1 %429, float %422, float %439
  %441 = fmul contract float %440, 2.000000e+00
  %442 = fsub contract float %416, %204
  %443 = tail call float @llvm.fabs.f32(float %442)
  %444 = fcmp contract ogt float %443, 0x3EB0C6F7A0000000
  br i1 %444, label %445, label %4399, !llvm.loop !15

445:                                              ; preds = %411
  br i1 %13, label %623, label %446

446:                                              ; preds = %445
  %447 = fadd contract float %416, %441
  %448 = fsub contract float %416, %441
  %449 = add i32 %1, -1
  %450 = and i32 %1, 7
  %451 = icmp ult i32 %449, 7
  br i1 %451, label %590, label %452

452:                                              ; preds = %446
  %453 = and i32 %1, -8
  br label %454

454:                                              ; preds = %454, %452
  %455 = phi i32 [ 0, %452 ], [ %586, %454 ]
  %456 = phi i32 [ 0, %452 ], [ %587, %454 ]
  %457 = phi float [ 0.000000e+00, %452 ], [ %584, %454 ]
  %458 = phi float [ 0.000000e+00, %452 ], [ %582, %454 ]
  %459 = phi i32 [ 0, %452 ], [ %588, %454 ]
  %460 = add nsw i32 %456, %14
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %461
  %463 = load i16, i16 addrspace(1)* %462, align 2, !tbaa !7, !amdgpu.noclobber !5
  %464 = uitofp i16 %463 to float
  %465 = fcmp contract ogt float %447, %464
  %466 = fcmp contract olt float %448, %464
  %467 = and i1 %465, %466
  %468 = fmul contract float %464, %464
  %469 = select i1 %467, float %464, float -0.000000e+00
  %470 = fadd contract float %458, %469
  %471 = select i1 %467, float %468, float -0.000000e+00
  %472 = fadd contract float %457, %471
  %473 = zext i1 %467 to i32
  %474 = add nuw nsw i32 %455, %473
  %475 = or i32 %456, 1
  %476 = add nsw i32 %475, %14
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %477
  %479 = load i16, i16 addrspace(1)* %478, align 2, !tbaa !7, !amdgpu.noclobber !5
  %480 = uitofp i16 %479 to float
  %481 = fcmp contract ogt float %447, %480
  %482 = fcmp contract olt float %448, %480
  %483 = and i1 %481, %482
  %484 = fmul contract float %480, %480
  %485 = select i1 %483, float %480, float -0.000000e+00
  %486 = fadd contract float %470, %485
  %487 = select i1 %483, float %484, float -0.000000e+00
  %488 = fadd contract float %472, %487
  %489 = zext i1 %483 to i32
  %490 = add nuw nsw i32 %474, %489
  %491 = or i32 %456, 2
  %492 = add nsw i32 %491, %14
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %493
  %495 = load i16, i16 addrspace(1)* %494, align 2, !tbaa !7, !amdgpu.noclobber !5
  %496 = uitofp i16 %495 to float
  %497 = fcmp contract ogt float %447, %496
  %498 = fcmp contract olt float %448, %496
  %499 = and i1 %497, %498
  %500 = fmul contract float %496, %496
  %501 = select i1 %499, float %496, float -0.000000e+00
  %502 = fadd contract float %486, %501
  %503 = select i1 %499, float %500, float -0.000000e+00
  %504 = fadd contract float %488, %503
  %505 = zext i1 %499 to i32
  %506 = add nuw nsw i32 %490, %505
  %507 = or i32 %456, 3
  %508 = add nsw i32 %507, %14
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %509
  %511 = load i16, i16 addrspace(1)* %510, align 2, !tbaa !7, !amdgpu.noclobber !5
  %512 = uitofp i16 %511 to float
  %513 = fcmp contract ogt float %447, %512
  %514 = fcmp contract olt float %448, %512
  %515 = and i1 %513, %514
  %516 = fmul contract float %512, %512
  %517 = select i1 %515, float %512, float -0.000000e+00
  %518 = fadd contract float %502, %517
  %519 = select i1 %515, float %516, float -0.000000e+00
  %520 = fadd contract float %504, %519
  %521 = zext i1 %515 to i32
  %522 = add nuw nsw i32 %506, %521
  %523 = or i32 %456, 4
  %524 = add nsw i32 %523, %14
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %525
  %527 = load i16, i16 addrspace(1)* %526, align 2, !tbaa !7, !amdgpu.noclobber !5
  %528 = uitofp i16 %527 to float
  %529 = fcmp contract ogt float %447, %528
  %530 = fcmp contract olt float %448, %528
  %531 = and i1 %529, %530
  %532 = fmul contract float %528, %528
  %533 = select i1 %531, float %528, float -0.000000e+00
  %534 = fadd contract float %518, %533
  %535 = select i1 %531, float %532, float -0.000000e+00
  %536 = fadd contract float %520, %535
  %537 = zext i1 %531 to i32
  %538 = add nuw nsw i32 %522, %537
  %539 = or i32 %456, 5
  %540 = add nsw i32 %539, %14
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %541
  %543 = load i16, i16 addrspace(1)* %542, align 2, !tbaa !7, !amdgpu.noclobber !5
  %544 = uitofp i16 %543 to float
  %545 = fcmp contract ogt float %447, %544
  %546 = fcmp contract olt float %448, %544
  %547 = and i1 %545, %546
  %548 = fmul contract float %544, %544
  %549 = select i1 %547, float %544, float -0.000000e+00
  %550 = fadd contract float %534, %549
  %551 = select i1 %547, float %548, float -0.000000e+00
  %552 = fadd contract float %536, %551
  %553 = zext i1 %547 to i32
  %554 = add nuw nsw i32 %538, %553
  %555 = or i32 %456, 6
  %556 = add nsw i32 %555, %14
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %557
  %559 = load i16, i16 addrspace(1)* %558, align 2, !tbaa !7, !amdgpu.noclobber !5
  %560 = uitofp i16 %559 to float
  %561 = fcmp contract ogt float %447, %560
  %562 = fcmp contract olt float %448, %560
  %563 = and i1 %561, %562
  %564 = fmul contract float %560, %560
  %565 = select i1 %563, float %560, float -0.000000e+00
  %566 = fadd contract float %550, %565
  %567 = select i1 %563, float %564, float -0.000000e+00
  %568 = fadd contract float %552, %567
  %569 = zext i1 %563 to i32
  %570 = add nuw nsw i32 %554, %569
  %571 = or i32 %456, 7
  %572 = add nsw i32 %571, %14
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %573
  %575 = load i16, i16 addrspace(1)* %574, align 2, !tbaa !7, !amdgpu.noclobber !5
  %576 = uitofp i16 %575 to float
  %577 = fcmp contract ogt float %447, %576
  %578 = fcmp contract olt float %448, %576
  %579 = and i1 %577, %578
  %580 = fmul contract float %576, %576
  %581 = select i1 %579, float %576, float -0.000000e+00
  %582 = fadd contract float %566, %581
  %583 = select i1 %579, float %580, float -0.000000e+00
  %584 = fadd contract float %568, %583
  %585 = zext i1 %579 to i32
  %586 = add nuw nsw i32 %570, %585
  %587 = add nuw nsw i32 %456, 8
  %588 = add i32 %459, 8
  %589 = icmp eq i32 %588, %453
  br i1 %589, label %590, label %454, !llvm.loop !11

590:                                              ; preds = %454, %446
  %591 = phi float [ undef, %446 ], [ %582, %454 ]
  %592 = phi float [ undef, %446 ], [ %584, %454 ]
  %593 = phi i32 [ undef, %446 ], [ %586, %454 ]
  %594 = phi i32 [ 0, %446 ], [ %586, %454 ]
  %595 = phi i32 [ 0, %446 ], [ %587, %454 ]
  %596 = phi float [ 0.000000e+00, %446 ], [ %584, %454 ]
  %597 = phi float [ 0.000000e+00, %446 ], [ %582, %454 ]
  %598 = icmp eq i32 %450, 0
  br i1 %598, label %623, label %599

599:                                              ; preds = %590, %599
  %600 = phi i32 [ %619, %599 ], [ %594, %590 ]
  %601 = phi i32 [ %620, %599 ], [ %595, %590 ]
  %602 = phi float [ %617, %599 ], [ %596, %590 ]
  %603 = phi float [ %615, %599 ], [ %597, %590 ]
  %604 = phi i32 [ %621, %599 ], [ 0, %590 ]
  %605 = add nsw i32 %601, %14
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %606
  %608 = load i16, i16 addrspace(1)* %607, align 2, !tbaa !7, !amdgpu.noclobber !5
  %609 = uitofp i16 %608 to float
  %610 = fcmp contract ogt float %447, %609
  %611 = fcmp contract olt float %448, %609
  %612 = and i1 %610, %611
  %613 = fmul contract float %609, %609
  %614 = select i1 %612, float %609, float -0.000000e+00
  %615 = fadd contract float %603, %614
  %616 = select i1 %612, float %613, float -0.000000e+00
  %617 = fadd contract float %602, %616
  %618 = zext i1 %612 to i32
  %619 = add nuw nsw i32 %600, %618
  %620 = add nuw nsw i32 %601, 1
  %621 = add i32 %604, 1
  %622 = icmp eq i32 %621, %450
  br i1 %622, label %623, label %599, !llvm.loop !17

623:                                              ; preds = %590, %599, %445
  %624 = phi float [ 0.000000e+00, %445 ], [ %591, %590 ], [ %615, %599 ]
  %625 = phi float [ 0.000000e+00, %445 ], [ %592, %590 ], [ %617, %599 ]
  %626 = phi i32 [ 0, %445 ], [ %593, %590 ], [ %619, %599 ]
  %627 = sitofp i32 %626 to float
  %628 = fdiv contract float %624, %627
  %629 = fdiv contract float %625, %627
  %630 = fmul contract float %628, %628
  %631 = fsub contract float %629, %630
  %632 = fcmp olt float %631, 0x39F0000000000000
  %633 = select i1 %632, float 0x41F0000000000000, float 1.000000e+00
  %634 = fmul float %631, %633
  %635 = tail call float @llvm.sqrt.f32(float %634)
  %636 = bitcast float %635 to i32
  %637 = add nsw i32 %636, -1
  %638 = bitcast i32 %637 to float
  %639 = add nsw i32 %636, 1
  %640 = bitcast i32 %639 to float
  %641 = tail call i1 @llvm.amdgcn.class.f32(float %634, i32 608)
  %642 = select i1 %632, float 0x3EF0000000000000, float 1.000000e+00
  %643 = fneg float %640
  %644 = tail call float @llvm.fma.f32(float %643, float %635, float %634)
  %645 = fcmp ogt float %644, 0.000000e+00
  %646 = fneg float %638
  %647 = tail call float @llvm.fma.f32(float %646, float %635, float %634)
  %648 = fcmp ole float %647, 0.000000e+00
  %649 = select i1 %648, float %638, float %635
  %650 = select i1 %645, float %640, float %649
  %651 = fmul float %642, %650
  %652 = select i1 %641, float %634, float %651
  %653 = fmul contract float %652, 2.000000e+00
  %654 = fsub contract float %628, %416
  %655 = tail call float @llvm.fabs.f32(float %654)
  %656 = fcmp contract ogt float %655, 0x3EB0C6F7A0000000
  br i1 %656, label %657, label %4399, !llvm.loop !15

657:                                              ; preds = %623
  br i1 %13, label %835, label %658

658:                                              ; preds = %657
  %659 = fadd contract float %628, %653
  %660 = fsub contract float %628, %653
  %661 = add i32 %1, -1
  %662 = and i32 %1, 7
  %663 = icmp ult i32 %661, 7
  br i1 %663, label %802, label %664

664:                                              ; preds = %658
  %665 = and i32 %1, -8
  br label %666

666:                                              ; preds = %666, %664
  %667 = phi i32 [ 0, %664 ], [ %798, %666 ]
  %668 = phi i32 [ 0, %664 ], [ %799, %666 ]
  %669 = phi float [ 0.000000e+00, %664 ], [ %796, %666 ]
  %670 = phi float [ 0.000000e+00, %664 ], [ %794, %666 ]
  %671 = phi i32 [ 0, %664 ], [ %800, %666 ]
  %672 = add nsw i32 %668, %14
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %673
  %675 = load i16, i16 addrspace(1)* %674, align 2, !tbaa !7, !amdgpu.noclobber !5
  %676 = uitofp i16 %675 to float
  %677 = fcmp contract ogt float %659, %676
  %678 = fcmp contract olt float %660, %676
  %679 = and i1 %677, %678
  %680 = fmul contract float %676, %676
  %681 = select i1 %679, float %676, float -0.000000e+00
  %682 = fadd contract float %670, %681
  %683 = select i1 %679, float %680, float -0.000000e+00
  %684 = fadd contract float %669, %683
  %685 = zext i1 %679 to i32
  %686 = add nuw nsw i32 %667, %685
  %687 = or i32 %668, 1
  %688 = add nsw i32 %687, %14
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %689
  %691 = load i16, i16 addrspace(1)* %690, align 2, !tbaa !7, !amdgpu.noclobber !5
  %692 = uitofp i16 %691 to float
  %693 = fcmp contract ogt float %659, %692
  %694 = fcmp contract olt float %660, %692
  %695 = and i1 %693, %694
  %696 = fmul contract float %692, %692
  %697 = select i1 %695, float %692, float -0.000000e+00
  %698 = fadd contract float %682, %697
  %699 = select i1 %695, float %696, float -0.000000e+00
  %700 = fadd contract float %684, %699
  %701 = zext i1 %695 to i32
  %702 = add nuw nsw i32 %686, %701
  %703 = or i32 %668, 2
  %704 = add nsw i32 %703, %14
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %705
  %707 = load i16, i16 addrspace(1)* %706, align 2, !tbaa !7, !amdgpu.noclobber !5
  %708 = uitofp i16 %707 to float
  %709 = fcmp contract ogt float %659, %708
  %710 = fcmp contract olt float %660, %708
  %711 = and i1 %709, %710
  %712 = fmul contract float %708, %708
  %713 = select i1 %711, float %708, float -0.000000e+00
  %714 = fadd contract float %698, %713
  %715 = select i1 %711, float %712, float -0.000000e+00
  %716 = fadd contract float %700, %715
  %717 = zext i1 %711 to i32
  %718 = add nuw nsw i32 %702, %717
  %719 = or i32 %668, 3
  %720 = add nsw i32 %719, %14
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %721
  %723 = load i16, i16 addrspace(1)* %722, align 2, !tbaa !7, !amdgpu.noclobber !5
  %724 = uitofp i16 %723 to float
  %725 = fcmp contract ogt float %659, %724
  %726 = fcmp contract olt float %660, %724
  %727 = and i1 %725, %726
  %728 = fmul contract float %724, %724
  %729 = select i1 %727, float %724, float -0.000000e+00
  %730 = fadd contract float %714, %729
  %731 = select i1 %727, float %728, float -0.000000e+00
  %732 = fadd contract float %716, %731
  %733 = zext i1 %727 to i32
  %734 = add nuw nsw i32 %718, %733
  %735 = or i32 %668, 4
  %736 = add nsw i32 %735, %14
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %737
  %739 = load i16, i16 addrspace(1)* %738, align 2, !tbaa !7, !amdgpu.noclobber !5
  %740 = uitofp i16 %739 to float
  %741 = fcmp contract ogt float %659, %740
  %742 = fcmp contract olt float %660, %740
  %743 = and i1 %741, %742
  %744 = fmul contract float %740, %740
  %745 = select i1 %743, float %740, float -0.000000e+00
  %746 = fadd contract float %730, %745
  %747 = select i1 %743, float %744, float -0.000000e+00
  %748 = fadd contract float %732, %747
  %749 = zext i1 %743 to i32
  %750 = add nuw nsw i32 %734, %749
  %751 = or i32 %668, 5
  %752 = add nsw i32 %751, %14
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %753
  %755 = load i16, i16 addrspace(1)* %754, align 2, !tbaa !7, !amdgpu.noclobber !5
  %756 = uitofp i16 %755 to float
  %757 = fcmp contract ogt float %659, %756
  %758 = fcmp contract olt float %660, %756
  %759 = and i1 %757, %758
  %760 = fmul contract float %756, %756
  %761 = select i1 %759, float %756, float -0.000000e+00
  %762 = fadd contract float %746, %761
  %763 = select i1 %759, float %760, float -0.000000e+00
  %764 = fadd contract float %748, %763
  %765 = zext i1 %759 to i32
  %766 = add nuw nsw i32 %750, %765
  %767 = or i32 %668, 6
  %768 = add nsw i32 %767, %14
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %769
  %771 = load i16, i16 addrspace(1)* %770, align 2, !tbaa !7, !amdgpu.noclobber !5
  %772 = uitofp i16 %771 to float
  %773 = fcmp contract ogt float %659, %772
  %774 = fcmp contract olt float %660, %772
  %775 = and i1 %773, %774
  %776 = fmul contract float %772, %772
  %777 = select i1 %775, float %772, float -0.000000e+00
  %778 = fadd contract float %762, %777
  %779 = select i1 %775, float %776, float -0.000000e+00
  %780 = fadd contract float %764, %779
  %781 = zext i1 %775 to i32
  %782 = add nuw nsw i32 %766, %781
  %783 = or i32 %668, 7
  %784 = add nsw i32 %783, %14
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %785
  %787 = load i16, i16 addrspace(1)* %786, align 2, !tbaa !7, !amdgpu.noclobber !5
  %788 = uitofp i16 %787 to float
  %789 = fcmp contract ogt float %659, %788
  %790 = fcmp contract olt float %660, %788
  %791 = and i1 %789, %790
  %792 = fmul contract float %788, %788
  %793 = select i1 %791, float %788, float -0.000000e+00
  %794 = fadd contract float %778, %793
  %795 = select i1 %791, float %792, float -0.000000e+00
  %796 = fadd contract float %780, %795
  %797 = zext i1 %791 to i32
  %798 = add nuw nsw i32 %782, %797
  %799 = add nuw nsw i32 %668, 8
  %800 = add i32 %671, 8
  %801 = icmp eq i32 %800, %665
  br i1 %801, label %802, label %666, !llvm.loop !11

802:                                              ; preds = %666, %658
  %803 = phi float [ undef, %658 ], [ %794, %666 ]
  %804 = phi float [ undef, %658 ], [ %796, %666 ]
  %805 = phi i32 [ undef, %658 ], [ %798, %666 ]
  %806 = phi i32 [ 0, %658 ], [ %798, %666 ]
  %807 = phi i32 [ 0, %658 ], [ %799, %666 ]
  %808 = phi float [ 0.000000e+00, %658 ], [ %796, %666 ]
  %809 = phi float [ 0.000000e+00, %658 ], [ %794, %666 ]
  %810 = icmp eq i32 %662, 0
  br i1 %810, label %835, label %811

811:                                              ; preds = %802, %811
  %812 = phi i32 [ %831, %811 ], [ %806, %802 ]
  %813 = phi i32 [ %832, %811 ], [ %807, %802 ]
  %814 = phi float [ %829, %811 ], [ %808, %802 ]
  %815 = phi float [ %827, %811 ], [ %809, %802 ]
  %816 = phi i32 [ %833, %811 ], [ 0, %802 ]
  %817 = add nsw i32 %813, %14
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %818
  %820 = load i16, i16 addrspace(1)* %819, align 2, !tbaa !7, !amdgpu.noclobber !5
  %821 = uitofp i16 %820 to float
  %822 = fcmp contract ogt float %659, %821
  %823 = fcmp contract olt float %660, %821
  %824 = and i1 %822, %823
  %825 = fmul contract float %821, %821
  %826 = select i1 %824, float %821, float -0.000000e+00
  %827 = fadd contract float %815, %826
  %828 = select i1 %824, float %825, float -0.000000e+00
  %829 = fadd contract float %814, %828
  %830 = zext i1 %824 to i32
  %831 = add nuw nsw i32 %812, %830
  %832 = add nuw nsw i32 %813, 1
  %833 = add i32 %816, 1
  %834 = icmp eq i32 %833, %662
  br i1 %834, label %835, label %811, !llvm.loop !18

835:                                              ; preds = %802, %811, %657
  %836 = phi float [ 0.000000e+00, %657 ], [ %803, %802 ], [ %827, %811 ]
  %837 = phi float [ 0.000000e+00, %657 ], [ %804, %802 ], [ %829, %811 ]
  %838 = phi i32 [ 0, %657 ], [ %805, %802 ], [ %831, %811 ]
  %839 = sitofp i32 %838 to float
  %840 = fdiv contract float %836, %839
  %841 = fdiv contract float %837, %839
  %842 = fmul contract float %840, %840
  %843 = fsub contract float %841, %842
  %844 = fcmp olt float %843, 0x39F0000000000000
  %845 = select i1 %844, float 0x41F0000000000000, float 1.000000e+00
  %846 = fmul float %843, %845
  %847 = tail call float @llvm.sqrt.f32(float %846)
  %848 = bitcast float %847 to i32
  %849 = add nsw i32 %848, -1
  %850 = bitcast i32 %849 to float
  %851 = add nsw i32 %848, 1
  %852 = bitcast i32 %851 to float
  %853 = tail call i1 @llvm.amdgcn.class.f32(float %846, i32 608)
  %854 = select i1 %844, float 0x3EF0000000000000, float 1.000000e+00
  %855 = fneg float %852
  %856 = tail call float @llvm.fma.f32(float %855, float %847, float %846)
  %857 = fcmp ogt float %856, 0.000000e+00
  %858 = fneg float %850
  %859 = tail call float @llvm.fma.f32(float %858, float %847, float %846)
  %860 = fcmp ole float %859, 0.000000e+00
  %861 = select i1 %860, float %850, float %847
  %862 = select i1 %857, float %852, float %861
  %863 = fmul float %854, %862
  %864 = select i1 %853, float %846, float %863
  %865 = fmul contract float %864, 2.000000e+00
  %866 = fsub contract float %840, %628
  %867 = tail call float @llvm.fabs.f32(float %866)
  %868 = fcmp contract ogt float %867, 0x3EB0C6F7A0000000
  br i1 %868, label %869, label %4399, !llvm.loop !15

869:                                              ; preds = %835
  br i1 %13, label %1047, label %870

870:                                              ; preds = %869
  %871 = fadd contract float %840, %865
  %872 = fsub contract float %840, %865
  %873 = add i32 %1, -1
  %874 = and i32 %1, 7
  %875 = icmp ult i32 %873, 7
  br i1 %875, label %1014, label %876

876:                                              ; preds = %870
  %877 = and i32 %1, -8
  br label %878

878:                                              ; preds = %878, %876
  %879 = phi i32 [ 0, %876 ], [ %1010, %878 ]
  %880 = phi i32 [ 0, %876 ], [ %1011, %878 ]
  %881 = phi float [ 0.000000e+00, %876 ], [ %1008, %878 ]
  %882 = phi float [ 0.000000e+00, %876 ], [ %1006, %878 ]
  %883 = phi i32 [ 0, %876 ], [ %1012, %878 ]
  %884 = add nsw i32 %880, %14
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %885
  %887 = load i16, i16 addrspace(1)* %886, align 2, !tbaa !7, !amdgpu.noclobber !5
  %888 = uitofp i16 %887 to float
  %889 = fcmp contract ogt float %871, %888
  %890 = fcmp contract olt float %872, %888
  %891 = and i1 %889, %890
  %892 = fmul contract float %888, %888
  %893 = select i1 %891, float %888, float -0.000000e+00
  %894 = fadd contract float %882, %893
  %895 = select i1 %891, float %892, float -0.000000e+00
  %896 = fadd contract float %881, %895
  %897 = zext i1 %891 to i32
  %898 = add nuw nsw i32 %879, %897
  %899 = or i32 %880, 1
  %900 = add nsw i32 %899, %14
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %901
  %903 = load i16, i16 addrspace(1)* %902, align 2, !tbaa !7, !amdgpu.noclobber !5
  %904 = uitofp i16 %903 to float
  %905 = fcmp contract ogt float %871, %904
  %906 = fcmp contract olt float %872, %904
  %907 = and i1 %905, %906
  %908 = fmul contract float %904, %904
  %909 = select i1 %907, float %904, float -0.000000e+00
  %910 = fadd contract float %894, %909
  %911 = select i1 %907, float %908, float -0.000000e+00
  %912 = fadd contract float %896, %911
  %913 = zext i1 %907 to i32
  %914 = add nuw nsw i32 %898, %913
  %915 = or i32 %880, 2
  %916 = add nsw i32 %915, %14
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %917
  %919 = load i16, i16 addrspace(1)* %918, align 2, !tbaa !7, !amdgpu.noclobber !5
  %920 = uitofp i16 %919 to float
  %921 = fcmp contract ogt float %871, %920
  %922 = fcmp contract olt float %872, %920
  %923 = and i1 %921, %922
  %924 = fmul contract float %920, %920
  %925 = select i1 %923, float %920, float -0.000000e+00
  %926 = fadd contract float %910, %925
  %927 = select i1 %923, float %924, float -0.000000e+00
  %928 = fadd contract float %912, %927
  %929 = zext i1 %923 to i32
  %930 = add nuw nsw i32 %914, %929
  %931 = or i32 %880, 3
  %932 = add nsw i32 %931, %14
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %933
  %935 = load i16, i16 addrspace(1)* %934, align 2, !tbaa !7, !amdgpu.noclobber !5
  %936 = uitofp i16 %935 to float
  %937 = fcmp contract ogt float %871, %936
  %938 = fcmp contract olt float %872, %936
  %939 = and i1 %937, %938
  %940 = fmul contract float %936, %936
  %941 = select i1 %939, float %936, float -0.000000e+00
  %942 = fadd contract float %926, %941
  %943 = select i1 %939, float %940, float -0.000000e+00
  %944 = fadd contract float %928, %943
  %945 = zext i1 %939 to i32
  %946 = add nuw nsw i32 %930, %945
  %947 = or i32 %880, 4
  %948 = add nsw i32 %947, %14
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %949
  %951 = load i16, i16 addrspace(1)* %950, align 2, !tbaa !7, !amdgpu.noclobber !5
  %952 = uitofp i16 %951 to float
  %953 = fcmp contract ogt float %871, %952
  %954 = fcmp contract olt float %872, %952
  %955 = and i1 %953, %954
  %956 = fmul contract float %952, %952
  %957 = select i1 %955, float %952, float -0.000000e+00
  %958 = fadd contract float %942, %957
  %959 = select i1 %955, float %956, float -0.000000e+00
  %960 = fadd contract float %944, %959
  %961 = zext i1 %955 to i32
  %962 = add nuw nsw i32 %946, %961
  %963 = or i32 %880, 5
  %964 = add nsw i32 %963, %14
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %965
  %967 = load i16, i16 addrspace(1)* %966, align 2, !tbaa !7, !amdgpu.noclobber !5
  %968 = uitofp i16 %967 to float
  %969 = fcmp contract ogt float %871, %968
  %970 = fcmp contract olt float %872, %968
  %971 = and i1 %969, %970
  %972 = fmul contract float %968, %968
  %973 = select i1 %971, float %968, float -0.000000e+00
  %974 = fadd contract float %958, %973
  %975 = select i1 %971, float %972, float -0.000000e+00
  %976 = fadd contract float %960, %975
  %977 = zext i1 %971 to i32
  %978 = add nuw nsw i32 %962, %977
  %979 = or i32 %880, 6
  %980 = add nsw i32 %979, %14
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %981
  %983 = load i16, i16 addrspace(1)* %982, align 2, !tbaa !7, !amdgpu.noclobber !5
  %984 = uitofp i16 %983 to float
  %985 = fcmp contract ogt float %871, %984
  %986 = fcmp contract olt float %872, %984
  %987 = and i1 %985, %986
  %988 = fmul contract float %984, %984
  %989 = select i1 %987, float %984, float -0.000000e+00
  %990 = fadd contract float %974, %989
  %991 = select i1 %987, float %988, float -0.000000e+00
  %992 = fadd contract float %976, %991
  %993 = zext i1 %987 to i32
  %994 = add nuw nsw i32 %978, %993
  %995 = or i32 %880, 7
  %996 = add nsw i32 %995, %14
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %997
  %999 = load i16, i16 addrspace(1)* %998, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1000 = uitofp i16 %999 to float
  %1001 = fcmp contract ogt float %871, %1000
  %1002 = fcmp contract olt float %872, %1000
  %1003 = and i1 %1001, %1002
  %1004 = fmul contract float %1000, %1000
  %1005 = select i1 %1003, float %1000, float -0.000000e+00
  %1006 = fadd contract float %990, %1005
  %1007 = select i1 %1003, float %1004, float -0.000000e+00
  %1008 = fadd contract float %992, %1007
  %1009 = zext i1 %1003 to i32
  %1010 = add nuw nsw i32 %994, %1009
  %1011 = add nuw nsw i32 %880, 8
  %1012 = add i32 %883, 8
  %1013 = icmp eq i32 %1012, %877
  br i1 %1013, label %1014, label %878, !llvm.loop !11

1014:                                             ; preds = %878, %870
  %1015 = phi float [ undef, %870 ], [ %1006, %878 ]
  %1016 = phi float [ undef, %870 ], [ %1008, %878 ]
  %1017 = phi i32 [ undef, %870 ], [ %1010, %878 ]
  %1018 = phi i32 [ 0, %870 ], [ %1010, %878 ]
  %1019 = phi i32 [ 0, %870 ], [ %1011, %878 ]
  %1020 = phi float [ 0.000000e+00, %870 ], [ %1008, %878 ]
  %1021 = phi float [ 0.000000e+00, %870 ], [ %1006, %878 ]
  %1022 = icmp eq i32 %874, 0
  br i1 %1022, label %1047, label %1023

1023:                                             ; preds = %1014, %1023
  %1024 = phi i32 [ %1043, %1023 ], [ %1018, %1014 ]
  %1025 = phi i32 [ %1044, %1023 ], [ %1019, %1014 ]
  %1026 = phi float [ %1041, %1023 ], [ %1020, %1014 ]
  %1027 = phi float [ %1039, %1023 ], [ %1021, %1014 ]
  %1028 = phi i32 [ %1045, %1023 ], [ 0, %1014 ]
  %1029 = add nsw i32 %1025, %14
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1030
  %1032 = load i16, i16 addrspace(1)* %1031, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1033 = uitofp i16 %1032 to float
  %1034 = fcmp contract ogt float %871, %1033
  %1035 = fcmp contract olt float %872, %1033
  %1036 = and i1 %1034, %1035
  %1037 = fmul contract float %1033, %1033
  %1038 = select i1 %1036, float %1033, float -0.000000e+00
  %1039 = fadd contract float %1027, %1038
  %1040 = select i1 %1036, float %1037, float -0.000000e+00
  %1041 = fadd contract float %1026, %1040
  %1042 = zext i1 %1036 to i32
  %1043 = add nuw nsw i32 %1024, %1042
  %1044 = add nuw nsw i32 %1025, 1
  %1045 = add i32 %1028, 1
  %1046 = icmp eq i32 %1045, %874
  br i1 %1046, label %1047, label %1023, !llvm.loop !19

1047:                                             ; preds = %1014, %1023, %869
  %1048 = phi float [ 0.000000e+00, %869 ], [ %1015, %1014 ], [ %1039, %1023 ]
  %1049 = phi float [ 0.000000e+00, %869 ], [ %1016, %1014 ], [ %1041, %1023 ]
  %1050 = phi i32 [ 0, %869 ], [ %1017, %1014 ], [ %1043, %1023 ]
  %1051 = sitofp i32 %1050 to float
  %1052 = fdiv contract float %1048, %1051
  %1053 = fdiv contract float %1049, %1051
  %1054 = fmul contract float %1052, %1052
  %1055 = fsub contract float %1053, %1054
  %1056 = fcmp olt float %1055, 0x39F0000000000000
  %1057 = select i1 %1056, float 0x41F0000000000000, float 1.000000e+00
  %1058 = fmul float %1055, %1057
  %1059 = tail call float @llvm.sqrt.f32(float %1058)
  %1060 = bitcast float %1059 to i32
  %1061 = add nsw i32 %1060, -1
  %1062 = bitcast i32 %1061 to float
  %1063 = add nsw i32 %1060, 1
  %1064 = bitcast i32 %1063 to float
  %1065 = tail call i1 @llvm.amdgcn.class.f32(float %1058, i32 608)
  %1066 = select i1 %1056, float 0x3EF0000000000000, float 1.000000e+00
  %1067 = fneg float %1064
  %1068 = tail call float @llvm.fma.f32(float %1067, float %1059, float %1058)
  %1069 = fcmp ogt float %1068, 0.000000e+00
  %1070 = fneg float %1062
  %1071 = tail call float @llvm.fma.f32(float %1070, float %1059, float %1058)
  %1072 = fcmp ole float %1071, 0.000000e+00
  %1073 = select i1 %1072, float %1062, float %1059
  %1074 = select i1 %1069, float %1064, float %1073
  %1075 = fmul float %1066, %1074
  %1076 = select i1 %1065, float %1058, float %1075
  %1077 = fmul contract float %1076, 2.000000e+00
  %1078 = fsub contract float %1052, %840
  %1079 = tail call float @llvm.fabs.f32(float %1078)
  %1080 = fcmp contract ogt float %1079, 0x3EB0C6F7A0000000
  br i1 %1080, label %1081, label %4399, !llvm.loop !15

1081:                                             ; preds = %1047
  br i1 %13, label %1259, label %1082

1082:                                             ; preds = %1081
  %1083 = fadd contract float %1052, %1077
  %1084 = fsub contract float %1052, %1077
  %1085 = add i32 %1, -1
  %1086 = and i32 %1, 7
  %1087 = icmp ult i32 %1085, 7
  br i1 %1087, label %1226, label %1088

1088:                                             ; preds = %1082
  %1089 = and i32 %1, -8
  br label %1090

1090:                                             ; preds = %1090, %1088
  %1091 = phi i32 [ 0, %1088 ], [ %1222, %1090 ]
  %1092 = phi i32 [ 0, %1088 ], [ %1223, %1090 ]
  %1093 = phi float [ 0.000000e+00, %1088 ], [ %1220, %1090 ]
  %1094 = phi float [ 0.000000e+00, %1088 ], [ %1218, %1090 ]
  %1095 = phi i32 [ 0, %1088 ], [ %1224, %1090 ]
  %1096 = add nsw i32 %1092, %14
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1097
  %1099 = load i16, i16 addrspace(1)* %1098, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1100 = uitofp i16 %1099 to float
  %1101 = fcmp contract ogt float %1083, %1100
  %1102 = fcmp contract olt float %1084, %1100
  %1103 = and i1 %1101, %1102
  %1104 = fmul contract float %1100, %1100
  %1105 = select i1 %1103, float %1100, float -0.000000e+00
  %1106 = fadd contract float %1094, %1105
  %1107 = select i1 %1103, float %1104, float -0.000000e+00
  %1108 = fadd contract float %1093, %1107
  %1109 = zext i1 %1103 to i32
  %1110 = add nuw nsw i32 %1091, %1109
  %1111 = or i32 %1092, 1
  %1112 = add nsw i32 %1111, %14
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1113
  %1115 = load i16, i16 addrspace(1)* %1114, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1116 = uitofp i16 %1115 to float
  %1117 = fcmp contract ogt float %1083, %1116
  %1118 = fcmp contract olt float %1084, %1116
  %1119 = and i1 %1117, %1118
  %1120 = fmul contract float %1116, %1116
  %1121 = select i1 %1119, float %1116, float -0.000000e+00
  %1122 = fadd contract float %1106, %1121
  %1123 = select i1 %1119, float %1120, float -0.000000e+00
  %1124 = fadd contract float %1108, %1123
  %1125 = zext i1 %1119 to i32
  %1126 = add nuw nsw i32 %1110, %1125
  %1127 = or i32 %1092, 2
  %1128 = add nsw i32 %1127, %14
  %1129 = sext i32 %1128 to i64
  %1130 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1129
  %1131 = load i16, i16 addrspace(1)* %1130, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1132 = uitofp i16 %1131 to float
  %1133 = fcmp contract ogt float %1083, %1132
  %1134 = fcmp contract olt float %1084, %1132
  %1135 = and i1 %1133, %1134
  %1136 = fmul contract float %1132, %1132
  %1137 = select i1 %1135, float %1132, float -0.000000e+00
  %1138 = fadd contract float %1122, %1137
  %1139 = select i1 %1135, float %1136, float -0.000000e+00
  %1140 = fadd contract float %1124, %1139
  %1141 = zext i1 %1135 to i32
  %1142 = add nuw nsw i32 %1126, %1141
  %1143 = or i32 %1092, 3
  %1144 = add nsw i32 %1143, %14
  %1145 = sext i32 %1144 to i64
  %1146 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1145
  %1147 = load i16, i16 addrspace(1)* %1146, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1148 = uitofp i16 %1147 to float
  %1149 = fcmp contract ogt float %1083, %1148
  %1150 = fcmp contract olt float %1084, %1148
  %1151 = and i1 %1149, %1150
  %1152 = fmul contract float %1148, %1148
  %1153 = select i1 %1151, float %1148, float -0.000000e+00
  %1154 = fadd contract float %1138, %1153
  %1155 = select i1 %1151, float %1152, float -0.000000e+00
  %1156 = fadd contract float %1140, %1155
  %1157 = zext i1 %1151 to i32
  %1158 = add nuw nsw i32 %1142, %1157
  %1159 = or i32 %1092, 4
  %1160 = add nsw i32 %1159, %14
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1161
  %1163 = load i16, i16 addrspace(1)* %1162, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1164 = uitofp i16 %1163 to float
  %1165 = fcmp contract ogt float %1083, %1164
  %1166 = fcmp contract olt float %1084, %1164
  %1167 = and i1 %1165, %1166
  %1168 = fmul contract float %1164, %1164
  %1169 = select i1 %1167, float %1164, float -0.000000e+00
  %1170 = fadd contract float %1154, %1169
  %1171 = select i1 %1167, float %1168, float -0.000000e+00
  %1172 = fadd contract float %1156, %1171
  %1173 = zext i1 %1167 to i32
  %1174 = add nuw nsw i32 %1158, %1173
  %1175 = or i32 %1092, 5
  %1176 = add nsw i32 %1175, %14
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1177
  %1179 = load i16, i16 addrspace(1)* %1178, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1180 = uitofp i16 %1179 to float
  %1181 = fcmp contract ogt float %1083, %1180
  %1182 = fcmp contract olt float %1084, %1180
  %1183 = and i1 %1181, %1182
  %1184 = fmul contract float %1180, %1180
  %1185 = select i1 %1183, float %1180, float -0.000000e+00
  %1186 = fadd contract float %1170, %1185
  %1187 = select i1 %1183, float %1184, float -0.000000e+00
  %1188 = fadd contract float %1172, %1187
  %1189 = zext i1 %1183 to i32
  %1190 = add nuw nsw i32 %1174, %1189
  %1191 = or i32 %1092, 6
  %1192 = add nsw i32 %1191, %14
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1193
  %1195 = load i16, i16 addrspace(1)* %1194, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1196 = uitofp i16 %1195 to float
  %1197 = fcmp contract ogt float %1083, %1196
  %1198 = fcmp contract olt float %1084, %1196
  %1199 = and i1 %1197, %1198
  %1200 = fmul contract float %1196, %1196
  %1201 = select i1 %1199, float %1196, float -0.000000e+00
  %1202 = fadd contract float %1186, %1201
  %1203 = select i1 %1199, float %1200, float -0.000000e+00
  %1204 = fadd contract float %1188, %1203
  %1205 = zext i1 %1199 to i32
  %1206 = add nuw nsw i32 %1190, %1205
  %1207 = or i32 %1092, 7
  %1208 = add nsw i32 %1207, %14
  %1209 = sext i32 %1208 to i64
  %1210 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1209
  %1211 = load i16, i16 addrspace(1)* %1210, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1212 = uitofp i16 %1211 to float
  %1213 = fcmp contract ogt float %1083, %1212
  %1214 = fcmp contract olt float %1084, %1212
  %1215 = and i1 %1213, %1214
  %1216 = fmul contract float %1212, %1212
  %1217 = select i1 %1215, float %1212, float -0.000000e+00
  %1218 = fadd contract float %1202, %1217
  %1219 = select i1 %1215, float %1216, float -0.000000e+00
  %1220 = fadd contract float %1204, %1219
  %1221 = zext i1 %1215 to i32
  %1222 = add nuw nsw i32 %1206, %1221
  %1223 = add nuw nsw i32 %1092, 8
  %1224 = add i32 %1095, 8
  %1225 = icmp eq i32 %1224, %1089
  br i1 %1225, label %1226, label %1090, !llvm.loop !11

1226:                                             ; preds = %1090, %1082
  %1227 = phi float [ undef, %1082 ], [ %1218, %1090 ]
  %1228 = phi float [ undef, %1082 ], [ %1220, %1090 ]
  %1229 = phi i32 [ undef, %1082 ], [ %1222, %1090 ]
  %1230 = phi i32 [ 0, %1082 ], [ %1222, %1090 ]
  %1231 = phi i32 [ 0, %1082 ], [ %1223, %1090 ]
  %1232 = phi float [ 0.000000e+00, %1082 ], [ %1220, %1090 ]
  %1233 = phi float [ 0.000000e+00, %1082 ], [ %1218, %1090 ]
  %1234 = icmp eq i32 %1086, 0
  br i1 %1234, label %1259, label %1235

1235:                                             ; preds = %1226, %1235
  %1236 = phi i32 [ %1255, %1235 ], [ %1230, %1226 ]
  %1237 = phi i32 [ %1256, %1235 ], [ %1231, %1226 ]
  %1238 = phi float [ %1253, %1235 ], [ %1232, %1226 ]
  %1239 = phi float [ %1251, %1235 ], [ %1233, %1226 ]
  %1240 = phi i32 [ %1257, %1235 ], [ 0, %1226 ]
  %1241 = add nsw i32 %1237, %14
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1242
  %1244 = load i16, i16 addrspace(1)* %1243, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1245 = uitofp i16 %1244 to float
  %1246 = fcmp contract ogt float %1083, %1245
  %1247 = fcmp contract olt float %1084, %1245
  %1248 = and i1 %1246, %1247
  %1249 = fmul contract float %1245, %1245
  %1250 = select i1 %1248, float %1245, float -0.000000e+00
  %1251 = fadd contract float %1239, %1250
  %1252 = select i1 %1248, float %1249, float -0.000000e+00
  %1253 = fadd contract float %1238, %1252
  %1254 = zext i1 %1248 to i32
  %1255 = add nuw nsw i32 %1236, %1254
  %1256 = add nuw nsw i32 %1237, 1
  %1257 = add i32 %1240, 1
  %1258 = icmp eq i32 %1257, %1086
  br i1 %1258, label %1259, label %1235, !llvm.loop !20

1259:                                             ; preds = %1226, %1235, %1081
  %1260 = phi float [ 0.000000e+00, %1081 ], [ %1227, %1226 ], [ %1251, %1235 ]
  %1261 = phi float [ 0.000000e+00, %1081 ], [ %1228, %1226 ], [ %1253, %1235 ]
  %1262 = phi i32 [ 0, %1081 ], [ %1229, %1226 ], [ %1255, %1235 ]
  %1263 = sitofp i32 %1262 to float
  %1264 = fdiv contract float %1260, %1263
  %1265 = fdiv contract float %1261, %1263
  %1266 = fmul contract float %1264, %1264
  %1267 = fsub contract float %1265, %1266
  %1268 = fcmp olt float %1267, 0x39F0000000000000
  %1269 = select i1 %1268, float 0x41F0000000000000, float 1.000000e+00
  %1270 = fmul float %1267, %1269
  %1271 = tail call float @llvm.sqrt.f32(float %1270)
  %1272 = bitcast float %1271 to i32
  %1273 = add nsw i32 %1272, -1
  %1274 = bitcast i32 %1273 to float
  %1275 = add nsw i32 %1272, 1
  %1276 = bitcast i32 %1275 to float
  %1277 = tail call i1 @llvm.amdgcn.class.f32(float %1270, i32 608)
  %1278 = select i1 %1268, float 0x3EF0000000000000, float 1.000000e+00
  %1279 = fneg float %1276
  %1280 = tail call float @llvm.fma.f32(float %1279, float %1271, float %1270)
  %1281 = fcmp ogt float %1280, 0.000000e+00
  %1282 = fneg float %1274
  %1283 = tail call float @llvm.fma.f32(float %1282, float %1271, float %1270)
  %1284 = fcmp ole float %1283, 0.000000e+00
  %1285 = select i1 %1284, float %1274, float %1271
  %1286 = select i1 %1281, float %1276, float %1285
  %1287 = fmul float %1278, %1286
  %1288 = select i1 %1277, float %1270, float %1287
  %1289 = fmul contract float %1288, 2.000000e+00
  %1290 = fsub contract float %1264, %1052
  %1291 = tail call float @llvm.fabs.f32(float %1290)
  %1292 = fcmp contract ogt float %1291, 0x3EB0C6F7A0000000
  br i1 %1292, label %1293, label %4399, !llvm.loop !15

1293:                                             ; preds = %1259
  br i1 %13, label %1471, label %1294

1294:                                             ; preds = %1293
  %1295 = fadd contract float %1264, %1289
  %1296 = fsub contract float %1264, %1289
  %1297 = add i32 %1, -1
  %1298 = and i32 %1, 7
  %1299 = icmp ult i32 %1297, 7
  br i1 %1299, label %1438, label %1300

1300:                                             ; preds = %1294
  %1301 = and i32 %1, -8
  br label %1302

1302:                                             ; preds = %1302, %1300
  %1303 = phi i32 [ 0, %1300 ], [ %1434, %1302 ]
  %1304 = phi i32 [ 0, %1300 ], [ %1435, %1302 ]
  %1305 = phi float [ 0.000000e+00, %1300 ], [ %1432, %1302 ]
  %1306 = phi float [ 0.000000e+00, %1300 ], [ %1430, %1302 ]
  %1307 = phi i32 [ 0, %1300 ], [ %1436, %1302 ]
  %1308 = add nsw i32 %1304, %14
  %1309 = sext i32 %1308 to i64
  %1310 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1309
  %1311 = load i16, i16 addrspace(1)* %1310, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1312 = uitofp i16 %1311 to float
  %1313 = fcmp contract ogt float %1295, %1312
  %1314 = fcmp contract olt float %1296, %1312
  %1315 = and i1 %1313, %1314
  %1316 = fmul contract float %1312, %1312
  %1317 = select i1 %1315, float %1312, float -0.000000e+00
  %1318 = fadd contract float %1306, %1317
  %1319 = select i1 %1315, float %1316, float -0.000000e+00
  %1320 = fadd contract float %1305, %1319
  %1321 = zext i1 %1315 to i32
  %1322 = add nuw nsw i32 %1303, %1321
  %1323 = or i32 %1304, 1
  %1324 = add nsw i32 %1323, %14
  %1325 = sext i32 %1324 to i64
  %1326 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1325
  %1327 = load i16, i16 addrspace(1)* %1326, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1328 = uitofp i16 %1327 to float
  %1329 = fcmp contract ogt float %1295, %1328
  %1330 = fcmp contract olt float %1296, %1328
  %1331 = and i1 %1329, %1330
  %1332 = fmul contract float %1328, %1328
  %1333 = select i1 %1331, float %1328, float -0.000000e+00
  %1334 = fadd contract float %1318, %1333
  %1335 = select i1 %1331, float %1332, float -0.000000e+00
  %1336 = fadd contract float %1320, %1335
  %1337 = zext i1 %1331 to i32
  %1338 = add nuw nsw i32 %1322, %1337
  %1339 = or i32 %1304, 2
  %1340 = add nsw i32 %1339, %14
  %1341 = sext i32 %1340 to i64
  %1342 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1341
  %1343 = load i16, i16 addrspace(1)* %1342, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1344 = uitofp i16 %1343 to float
  %1345 = fcmp contract ogt float %1295, %1344
  %1346 = fcmp contract olt float %1296, %1344
  %1347 = and i1 %1345, %1346
  %1348 = fmul contract float %1344, %1344
  %1349 = select i1 %1347, float %1344, float -0.000000e+00
  %1350 = fadd contract float %1334, %1349
  %1351 = select i1 %1347, float %1348, float -0.000000e+00
  %1352 = fadd contract float %1336, %1351
  %1353 = zext i1 %1347 to i32
  %1354 = add nuw nsw i32 %1338, %1353
  %1355 = or i32 %1304, 3
  %1356 = add nsw i32 %1355, %14
  %1357 = sext i32 %1356 to i64
  %1358 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1357
  %1359 = load i16, i16 addrspace(1)* %1358, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1360 = uitofp i16 %1359 to float
  %1361 = fcmp contract ogt float %1295, %1360
  %1362 = fcmp contract olt float %1296, %1360
  %1363 = and i1 %1361, %1362
  %1364 = fmul contract float %1360, %1360
  %1365 = select i1 %1363, float %1360, float -0.000000e+00
  %1366 = fadd contract float %1350, %1365
  %1367 = select i1 %1363, float %1364, float -0.000000e+00
  %1368 = fadd contract float %1352, %1367
  %1369 = zext i1 %1363 to i32
  %1370 = add nuw nsw i32 %1354, %1369
  %1371 = or i32 %1304, 4
  %1372 = add nsw i32 %1371, %14
  %1373 = sext i32 %1372 to i64
  %1374 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1373
  %1375 = load i16, i16 addrspace(1)* %1374, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1376 = uitofp i16 %1375 to float
  %1377 = fcmp contract ogt float %1295, %1376
  %1378 = fcmp contract olt float %1296, %1376
  %1379 = and i1 %1377, %1378
  %1380 = fmul contract float %1376, %1376
  %1381 = select i1 %1379, float %1376, float -0.000000e+00
  %1382 = fadd contract float %1366, %1381
  %1383 = select i1 %1379, float %1380, float -0.000000e+00
  %1384 = fadd contract float %1368, %1383
  %1385 = zext i1 %1379 to i32
  %1386 = add nuw nsw i32 %1370, %1385
  %1387 = or i32 %1304, 5
  %1388 = add nsw i32 %1387, %14
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1389
  %1391 = load i16, i16 addrspace(1)* %1390, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1392 = uitofp i16 %1391 to float
  %1393 = fcmp contract ogt float %1295, %1392
  %1394 = fcmp contract olt float %1296, %1392
  %1395 = and i1 %1393, %1394
  %1396 = fmul contract float %1392, %1392
  %1397 = select i1 %1395, float %1392, float -0.000000e+00
  %1398 = fadd contract float %1382, %1397
  %1399 = select i1 %1395, float %1396, float -0.000000e+00
  %1400 = fadd contract float %1384, %1399
  %1401 = zext i1 %1395 to i32
  %1402 = add nuw nsw i32 %1386, %1401
  %1403 = or i32 %1304, 6
  %1404 = add nsw i32 %1403, %14
  %1405 = sext i32 %1404 to i64
  %1406 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1405
  %1407 = load i16, i16 addrspace(1)* %1406, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1408 = uitofp i16 %1407 to float
  %1409 = fcmp contract ogt float %1295, %1408
  %1410 = fcmp contract olt float %1296, %1408
  %1411 = and i1 %1409, %1410
  %1412 = fmul contract float %1408, %1408
  %1413 = select i1 %1411, float %1408, float -0.000000e+00
  %1414 = fadd contract float %1398, %1413
  %1415 = select i1 %1411, float %1412, float -0.000000e+00
  %1416 = fadd contract float %1400, %1415
  %1417 = zext i1 %1411 to i32
  %1418 = add nuw nsw i32 %1402, %1417
  %1419 = or i32 %1304, 7
  %1420 = add nsw i32 %1419, %14
  %1421 = sext i32 %1420 to i64
  %1422 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1421
  %1423 = load i16, i16 addrspace(1)* %1422, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1424 = uitofp i16 %1423 to float
  %1425 = fcmp contract ogt float %1295, %1424
  %1426 = fcmp contract olt float %1296, %1424
  %1427 = and i1 %1425, %1426
  %1428 = fmul contract float %1424, %1424
  %1429 = select i1 %1427, float %1424, float -0.000000e+00
  %1430 = fadd contract float %1414, %1429
  %1431 = select i1 %1427, float %1428, float -0.000000e+00
  %1432 = fadd contract float %1416, %1431
  %1433 = zext i1 %1427 to i32
  %1434 = add nuw nsw i32 %1418, %1433
  %1435 = add nuw nsw i32 %1304, 8
  %1436 = add i32 %1307, 8
  %1437 = icmp eq i32 %1436, %1301
  br i1 %1437, label %1438, label %1302, !llvm.loop !11

1438:                                             ; preds = %1302, %1294
  %1439 = phi float [ undef, %1294 ], [ %1430, %1302 ]
  %1440 = phi float [ undef, %1294 ], [ %1432, %1302 ]
  %1441 = phi i32 [ undef, %1294 ], [ %1434, %1302 ]
  %1442 = phi i32 [ 0, %1294 ], [ %1434, %1302 ]
  %1443 = phi i32 [ 0, %1294 ], [ %1435, %1302 ]
  %1444 = phi float [ 0.000000e+00, %1294 ], [ %1432, %1302 ]
  %1445 = phi float [ 0.000000e+00, %1294 ], [ %1430, %1302 ]
  %1446 = icmp eq i32 %1298, 0
  br i1 %1446, label %1471, label %1447

1447:                                             ; preds = %1438, %1447
  %1448 = phi i32 [ %1467, %1447 ], [ %1442, %1438 ]
  %1449 = phi i32 [ %1468, %1447 ], [ %1443, %1438 ]
  %1450 = phi float [ %1465, %1447 ], [ %1444, %1438 ]
  %1451 = phi float [ %1463, %1447 ], [ %1445, %1438 ]
  %1452 = phi i32 [ %1469, %1447 ], [ 0, %1438 ]
  %1453 = add nsw i32 %1449, %14
  %1454 = sext i32 %1453 to i64
  %1455 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1454
  %1456 = load i16, i16 addrspace(1)* %1455, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1457 = uitofp i16 %1456 to float
  %1458 = fcmp contract ogt float %1295, %1457
  %1459 = fcmp contract olt float %1296, %1457
  %1460 = and i1 %1458, %1459
  %1461 = fmul contract float %1457, %1457
  %1462 = select i1 %1460, float %1457, float -0.000000e+00
  %1463 = fadd contract float %1451, %1462
  %1464 = select i1 %1460, float %1461, float -0.000000e+00
  %1465 = fadd contract float %1450, %1464
  %1466 = zext i1 %1460 to i32
  %1467 = add nuw nsw i32 %1448, %1466
  %1468 = add nuw nsw i32 %1449, 1
  %1469 = add i32 %1452, 1
  %1470 = icmp eq i32 %1469, %1298
  br i1 %1470, label %1471, label %1447, !llvm.loop !21

1471:                                             ; preds = %1438, %1447, %1293
  %1472 = phi float [ 0.000000e+00, %1293 ], [ %1439, %1438 ], [ %1463, %1447 ]
  %1473 = phi float [ 0.000000e+00, %1293 ], [ %1440, %1438 ], [ %1465, %1447 ]
  %1474 = phi i32 [ 0, %1293 ], [ %1441, %1438 ], [ %1467, %1447 ]
  %1475 = sitofp i32 %1474 to float
  %1476 = fdiv contract float %1472, %1475
  %1477 = fdiv contract float %1473, %1475
  %1478 = fmul contract float %1476, %1476
  %1479 = fsub contract float %1477, %1478
  %1480 = fcmp olt float %1479, 0x39F0000000000000
  %1481 = select i1 %1480, float 0x41F0000000000000, float 1.000000e+00
  %1482 = fmul float %1479, %1481
  %1483 = tail call float @llvm.sqrt.f32(float %1482)
  %1484 = bitcast float %1483 to i32
  %1485 = add nsw i32 %1484, -1
  %1486 = bitcast i32 %1485 to float
  %1487 = add nsw i32 %1484, 1
  %1488 = bitcast i32 %1487 to float
  %1489 = tail call i1 @llvm.amdgcn.class.f32(float %1482, i32 608)
  %1490 = select i1 %1480, float 0x3EF0000000000000, float 1.000000e+00
  %1491 = fneg float %1488
  %1492 = tail call float @llvm.fma.f32(float %1491, float %1483, float %1482)
  %1493 = fcmp ogt float %1492, 0.000000e+00
  %1494 = fneg float %1486
  %1495 = tail call float @llvm.fma.f32(float %1494, float %1483, float %1482)
  %1496 = fcmp ole float %1495, 0.000000e+00
  %1497 = select i1 %1496, float %1486, float %1483
  %1498 = select i1 %1493, float %1488, float %1497
  %1499 = fmul float %1490, %1498
  %1500 = select i1 %1489, float %1482, float %1499
  %1501 = fmul contract float %1500, 2.000000e+00
  %1502 = fsub contract float %1476, %1264
  %1503 = tail call float @llvm.fabs.f32(float %1502)
  %1504 = fcmp contract ogt float %1503, 0x3EB0C6F7A0000000
  br i1 %1504, label %1505, label %4399, !llvm.loop !15

1505:                                             ; preds = %1471
  br i1 %13, label %1683, label %1506

1506:                                             ; preds = %1505
  %1507 = fadd contract float %1476, %1501
  %1508 = fsub contract float %1476, %1501
  %1509 = add i32 %1, -1
  %1510 = and i32 %1, 7
  %1511 = icmp ult i32 %1509, 7
  br i1 %1511, label %1650, label %1512

1512:                                             ; preds = %1506
  %1513 = and i32 %1, -8
  br label %1514

1514:                                             ; preds = %1514, %1512
  %1515 = phi i32 [ 0, %1512 ], [ %1646, %1514 ]
  %1516 = phi i32 [ 0, %1512 ], [ %1647, %1514 ]
  %1517 = phi float [ 0.000000e+00, %1512 ], [ %1644, %1514 ]
  %1518 = phi float [ 0.000000e+00, %1512 ], [ %1642, %1514 ]
  %1519 = phi i32 [ 0, %1512 ], [ %1648, %1514 ]
  %1520 = add nsw i32 %1516, %14
  %1521 = sext i32 %1520 to i64
  %1522 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1521
  %1523 = load i16, i16 addrspace(1)* %1522, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1524 = uitofp i16 %1523 to float
  %1525 = fcmp contract ogt float %1507, %1524
  %1526 = fcmp contract olt float %1508, %1524
  %1527 = and i1 %1525, %1526
  %1528 = fmul contract float %1524, %1524
  %1529 = select i1 %1527, float %1524, float -0.000000e+00
  %1530 = fadd contract float %1518, %1529
  %1531 = select i1 %1527, float %1528, float -0.000000e+00
  %1532 = fadd contract float %1517, %1531
  %1533 = zext i1 %1527 to i32
  %1534 = add nuw nsw i32 %1515, %1533
  %1535 = or i32 %1516, 1
  %1536 = add nsw i32 %1535, %14
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1537
  %1539 = load i16, i16 addrspace(1)* %1538, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1540 = uitofp i16 %1539 to float
  %1541 = fcmp contract ogt float %1507, %1540
  %1542 = fcmp contract olt float %1508, %1540
  %1543 = and i1 %1541, %1542
  %1544 = fmul contract float %1540, %1540
  %1545 = select i1 %1543, float %1540, float -0.000000e+00
  %1546 = fadd contract float %1530, %1545
  %1547 = select i1 %1543, float %1544, float -0.000000e+00
  %1548 = fadd contract float %1532, %1547
  %1549 = zext i1 %1543 to i32
  %1550 = add nuw nsw i32 %1534, %1549
  %1551 = or i32 %1516, 2
  %1552 = add nsw i32 %1551, %14
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1553
  %1555 = load i16, i16 addrspace(1)* %1554, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1556 = uitofp i16 %1555 to float
  %1557 = fcmp contract ogt float %1507, %1556
  %1558 = fcmp contract olt float %1508, %1556
  %1559 = and i1 %1557, %1558
  %1560 = fmul contract float %1556, %1556
  %1561 = select i1 %1559, float %1556, float -0.000000e+00
  %1562 = fadd contract float %1546, %1561
  %1563 = select i1 %1559, float %1560, float -0.000000e+00
  %1564 = fadd contract float %1548, %1563
  %1565 = zext i1 %1559 to i32
  %1566 = add nuw nsw i32 %1550, %1565
  %1567 = or i32 %1516, 3
  %1568 = add nsw i32 %1567, %14
  %1569 = sext i32 %1568 to i64
  %1570 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1569
  %1571 = load i16, i16 addrspace(1)* %1570, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1572 = uitofp i16 %1571 to float
  %1573 = fcmp contract ogt float %1507, %1572
  %1574 = fcmp contract olt float %1508, %1572
  %1575 = and i1 %1573, %1574
  %1576 = fmul contract float %1572, %1572
  %1577 = select i1 %1575, float %1572, float -0.000000e+00
  %1578 = fadd contract float %1562, %1577
  %1579 = select i1 %1575, float %1576, float -0.000000e+00
  %1580 = fadd contract float %1564, %1579
  %1581 = zext i1 %1575 to i32
  %1582 = add nuw nsw i32 %1566, %1581
  %1583 = or i32 %1516, 4
  %1584 = add nsw i32 %1583, %14
  %1585 = sext i32 %1584 to i64
  %1586 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1585
  %1587 = load i16, i16 addrspace(1)* %1586, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1588 = uitofp i16 %1587 to float
  %1589 = fcmp contract ogt float %1507, %1588
  %1590 = fcmp contract olt float %1508, %1588
  %1591 = and i1 %1589, %1590
  %1592 = fmul contract float %1588, %1588
  %1593 = select i1 %1591, float %1588, float -0.000000e+00
  %1594 = fadd contract float %1578, %1593
  %1595 = select i1 %1591, float %1592, float -0.000000e+00
  %1596 = fadd contract float %1580, %1595
  %1597 = zext i1 %1591 to i32
  %1598 = add nuw nsw i32 %1582, %1597
  %1599 = or i32 %1516, 5
  %1600 = add nsw i32 %1599, %14
  %1601 = sext i32 %1600 to i64
  %1602 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1601
  %1603 = load i16, i16 addrspace(1)* %1602, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1604 = uitofp i16 %1603 to float
  %1605 = fcmp contract ogt float %1507, %1604
  %1606 = fcmp contract olt float %1508, %1604
  %1607 = and i1 %1605, %1606
  %1608 = fmul contract float %1604, %1604
  %1609 = select i1 %1607, float %1604, float -0.000000e+00
  %1610 = fadd contract float %1594, %1609
  %1611 = select i1 %1607, float %1608, float -0.000000e+00
  %1612 = fadd contract float %1596, %1611
  %1613 = zext i1 %1607 to i32
  %1614 = add nuw nsw i32 %1598, %1613
  %1615 = or i32 %1516, 6
  %1616 = add nsw i32 %1615, %14
  %1617 = sext i32 %1616 to i64
  %1618 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1617
  %1619 = load i16, i16 addrspace(1)* %1618, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1620 = uitofp i16 %1619 to float
  %1621 = fcmp contract ogt float %1507, %1620
  %1622 = fcmp contract olt float %1508, %1620
  %1623 = and i1 %1621, %1622
  %1624 = fmul contract float %1620, %1620
  %1625 = select i1 %1623, float %1620, float -0.000000e+00
  %1626 = fadd contract float %1610, %1625
  %1627 = select i1 %1623, float %1624, float -0.000000e+00
  %1628 = fadd contract float %1612, %1627
  %1629 = zext i1 %1623 to i32
  %1630 = add nuw nsw i32 %1614, %1629
  %1631 = or i32 %1516, 7
  %1632 = add nsw i32 %1631, %14
  %1633 = sext i32 %1632 to i64
  %1634 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1633
  %1635 = load i16, i16 addrspace(1)* %1634, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1636 = uitofp i16 %1635 to float
  %1637 = fcmp contract ogt float %1507, %1636
  %1638 = fcmp contract olt float %1508, %1636
  %1639 = and i1 %1637, %1638
  %1640 = fmul contract float %1636, %1636
  %1641 = select i1 %1639, float %1636, float -0.000000e+00
  %1642 = fadd contract float %1626, %1641
  %1643 = select i1 %1639, float %1640, float -0.000000e+00
  %1644 = fadd contract float %1628, %1643
  %1645 = zext i1 %1639 to i32
  %1646 = add nuw nsw i32 %1630, %1645
  %1647 = add nuw nsw i32 %1516, 8
  %1648 = add i32 %1519, 8
  %1649 = icmp eq i32 %1648, %1513
  br i1 %1649, label %1650, label %1514, !llvm.loop !11

1650:                                             ; preds = %1514, %1506
  %1651 = phi float [ undef, %1506 ], [ %1642, %1514 ]
  %1652 = phi float [ undef, %1506 ], [ %1644, %1514 ]
  %1653 = phi i32 [ undef, %1506 ], [ %1646, %1514 ]
  %1654 = phi i32 [ 0, %1506 ], [ %1646, %1514 ]
  %1655 = phi i32 [ 0, %1506 ], [ %1647, %1514 ]
  %1656 = phi float [ 0.000000e+00, %1506 ], [ %1644, %1514 ]
  %1657 = phi float [ 0.000000e+00, %1506 ], [ %1642, %1514 ]
  %1658 = icmp eq i32 %1510, 0
  br i1 %1658, label %1683, label %1659

1659:                                             ; preds = %1650, %1659
  %1660 = phi i32 [ %1679, %1659 ], [ %1654, %1650 ]
  %1661 = phi i32 [ %1680, %1659 ], [ %1655, %1650 ]
  %1662 = phi float [ %1677, %1659 ], [ %1656, %1650 ]
  %1663 = phi float [ %1675, %1659 ], [ %1657, %1650 ]
  %1664 = phi i32 [ %1681, %1659 ], [ 0, %1650 ]
  %1665 = add nsw i32 %1661, %14
  %1666 = sext i32 %1665 to i64
  %1667 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1666
  %1668 = load i16, i16 addrspace(1)* %1667, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1669 = uitofp i16 %1668 to float
  %1670 = fcmp contract ogt float %1507, %1669
  %1671 = fcmp contract olt float %1508, %1669
  %1672 = and i1 %1670, %1671
  %1673 = fmul contract float %1669, %1669
  %1674 = select i1 %1672, float %1669, float -0.000000e+00
  %1675 = fadd contract float %1663, %1674
  %1676 = select i1 %1672, float %1673, float -0.000000e+00
  %1677 = fadd contract float %1662, %1676
  %1678 = zext i1 %1672 to i32
  %1679 = add nuw nsw i32 %1660, %1678
  %1680 = add nuw nsw i32 %1661, 1
  %1681 = add i32 %1664, 1
  %1682 = icmp eq i32 %1681, %1510
  br i1 %1682, label %1683, label %1659, !llvm.loop !22

1683:                                             ; preds = %1650, %1659, %1505
  %1684 = phi float [ 0.000000e+00, %1505 ], [ %1651, %1650 ], [ %1675, %1659 ]
  %1685 = phi float [ 0.000000e+00, %1505 ], [ %1652, %1650 ], [ %1677, %1659 ]
  %1686 = phi i32 [ 0, %1505 ], [ %1653, %1650 ], [ %1679, %1659 ]
  %1687 = sitofp i32 %1686 to float
  %1688 = fdiv contract float %1684, %1687
  %1689 = fdiv contract float %1685, %1687
  %1690 = fmul contract float %1688, %1688
  %1691 = fsub contract float %1689, %1690
  %1692 = fcmp olt float %1691, 0x39F0000000000000
  %1693 = select i1 %1692, float 0x41F0000000000000, float 1.000000e+00
  %1694 = fmul float %1691, %1693
  %1695 = tail call float @llvm.sqrt.f32(float %1694)
  %1696 = bitcast float %1695 to i32
  %1697 = add nsw i32 %1696, -1
  %1698 = bitcast i32 %1697 to float
  %1699 = add nsw i32 %1696, 1
  %1700 = bitcast i32 %1699 to float
  %1701 = tail call i1 @llvm.amdgcn.class.f32(float %1694, i32 608)
  %1702 = select i1 %1692, float 0x3EF0000000000000, float 1.000000e+00
  %1703 = fneg float %1700
  %1704 = tail call float @llvm.fma.f32(float %1703, float %1695, float %1694)
  %1705 = fcmp ogt float %1704, 0.000000e+00
  %1706 = fneg float %1698
  %1707 = tail call float @llvm.fma.f32(float %1706, float %1695, float %1694)
  %1708 = fcmp ole float %1707, 0.000000e+00
  %1709 = select i1 %1708, float %1698, float %1695
  %1710 = select i1 %1705, float %1700, float %1709
  %1711 = fmul float %1702, %1710
  %1712 = select i1 %1701, float %1694, float %1711
  %1713 = fmul contract float %1712, 2.000000e+00
  %1714 = fsub contract float %1688, %1476
  %1715 = tail call float @llvm.fabs.f32(float %1714)
  %1716 = fcmp contract ogt float %1715, 0x3EB0C6F7A0000000
  br i1 %1716, label %1717, label %4399, !llvm.loop !15

1717:                                             ; preds = %1683
  br i1 %13, label %1895, label %1718

1718:                                             ; preds = %1717
  %1719 = fadd contract float %1688, %1713
  %1720 = fsub contract float %1688, %1713
  %1721 = add i32 %1, -1
  %1722 = and i32 %1, 7
  %1723 = icmp ult i32 %1721, 7
  br i1 %1723, label %1862, label %1724

1724:                                             ; preds = %1718
  %1725 = and i32 %1, -8
  br label %1726

1726:                                             ; preds = %1726, %1724
  %1727 = phi i32 [ 0, %1724 ], [ %1858, %1726 ]
  %1728 = phi i32 [ 0, %1724 ], [ %1859, %1726 ]
  %1729 = phi float [ 0.000000e+00, %1724 ], [ %1856, %1726 ]
  %1730 = phi float [ 0.000000e+00, %1724 ], [ %1854, %1726 ]
  %1731 = phi i32 [ 0, %1724 ], [ %1860, %1726 ]
  %1732 = add nsw i32 %1728, %14
  %1733 = sext i32 %1732 to i64
  %1734 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1733
  %1735 = load i16, i16 addrspace(1)* %1734, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1736 = uitofp i16 %1735 to float
  %1737 = fcmp contract ogt float %1719, %1736
  %1738 = fcmp contract olt float %1720, %1736
  %1739 = and i1 %1737, %1738
  %1740 = fmul contract float %1736, %1736
  %1741 = select i1 %1739, float %1736, float -0.000000e+00
  %1742 = fadd contract float %1730, %1741
  %1743 = select i1 %1739, float %1740, float -0.000000e+00
  %1744 = fadd contract float %1729, %1743
  %1745 = zext i1 %1739 to i32
  %1746 = add nuw nsw i32 %1727, %1745
  %1747 = or i32 %1728, 1
  %1748 = add nsw i32 %1747, %14
  %1749 = sext i32 %1748 to i64
  %1750 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1749
  %1751 = load i16, i16 addrspace(1)* %1750, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1752 = uitofp i16 %1751 to float
  %1753 = fcmp contract ogt float %1719, %1752
  %1754 = fcmp contract olt float %1720, %1752
  %1755 = and i1 %1753, %1754
  %1756 = fmul contract float %1752, %1752
  %1757 = select i1 %1755, float %1752, float -0.000000e+00
  %1758 = fadd contract float %1742, %1757
  %1759 = select i1 %1755, float %1756, float -0.000000e+00
  %1760 = fadd contract float %1744, %1759
  %1761 = zext i1 %1755 to i32
  %1762 = add nuw nsw i32 %1746, %1761
  %1763 = or i32 %1728, 2
  %1764 = add nsw i32 %1763, %14
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1765
  %1767 = load i16, i16 addrspace(1)* %1766, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1768 = uitofp i16 %1767 to float
  %1769 = fcmp contract ogt float %1719, %1768
  %1770 = fcmp contract olt float %1720, %1768
  %1771 = and i1 %1769, %1770
  %1772 = fmul contract float %1768, %1768
  %1773 = select i1 %1771, float %1768, float -0.000000e+00
  %1774 = fadd contract float %1758, %1773
  %1775 = select i1 %1771, float %1772, float -0.000000e+00
  %1776 = fadd contract float %1760, %1775
  %1777 = zext i1 %1771 to i32
  %1778 = add nuw nsw i32 %1762, %1777
  %1779 = or i32 %1728, 3
  %1780 = add nsw i32 %1779, %14
  %1781 = sext i32 %1780 to i64
  %1782 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1781
  %1783 = load i16, i16 addrspace(1)* %1782, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1784 = uitofp i16 %1783 to float
  %1785 = fcmp contract ogt float %1719, %1784
  %1786 = fcmp contract olt float %1720, %1784
  %1787 = and i1 %1785, %1786
  %1788 = fmul contract float %1784, %1784
  %1789 = select i1 %1787, float %1784, float -0.000000e+00
  %1790 = fadd contract float %1774, %1789
  %1791 = select i1 %1787, float %1788, float -0.000000e+00
  %1792 = fadd contract float %1776, %1791
  %1793 = zext i1 %1787 to i32
  %1794 = add nuw nsw i32 %1778, %1793
  %1795 = or i32 %1728, 4
  %1796 = add nsw i32 %1795, %14
  %1797 = sext i32 %1796 to i64
  %1798 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1797
  %1799 = load i16, i16 addrspace(1)* %1798, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1800 = uitofp i16 %1799 to float
  %1801 = fcmp contract ogt float %1719, %1800
  %1802 = fcmp contract olt float %1720, %1800
  %1803 = and i1 %1801, %1802
  %1804 = fmul contract float %1800, %1800
  %1805 = select i1 %1803, float %1800, float -0.000000e+00
  %1806 = fadd contract float %1790, %1805
  %1807 = select i1 %1803, float %1804, float -0.000000e+00
  %1808 = fadd contract float %1792, %1807
  %1809 = zext i1 %1803 to i32
  %1810 = add nuw nsw i32 %1794, %1809
  %1811 = or i32 %1728, 5
  %1812 = add nsw i32 %1811, %14
  %1813 = sext i32 %1812 to i64
  %1814 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1813
  %1815 = load i16, i16 addrspace(1)* %1814, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1816 = uitofp i16 %1815 to float
  %1817 = fcmp contract ogt float %1719, %1816
  %1818 = fcmp contract olt float %1720, %1816
  %1819 = and i1 %1817, %1818
  %1820 = fmul contract float %1816, %1816
  %1821 = select i1 %1819, float %1816, float -0.000000e+00
  %1822 = fadd contract float %1806, %1821
  %1823 = select i1 %1819, float %1820, float -0.000000e+00
  %1824 = fadd contract float %1808, %1823
  %1825 = zext i1 %1819 to i32
  %1826 = add nuw nsw i32 %1810, %1825
  %1827 = or i32 %1728, 6
  %1828 = add nsw i32 %1827, %14
  %1829 = sext i32 %1828 to i64
  %1830 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1829
  %1831 = load i16, i16 addrspace(1)* %1830, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1832 = uitofp i16 %1831 to float
  %1833 = fcmp contract ogt float %1719, %1832
  %1834 = fcmp contract olt float %1720, %1832
  %1835 = and i1 %1833, %1834
  %1836 = fmul contract float %1832, %1832
  %1837 = select i1 %1835, float %1832, float -0.000000e+00
  %1838 = fadd contract float %1822, %1837
  %1839 = select i1 %1835, float %1836, float -0.000000e+00
  %1840 = fadd contract float %1824, %1839
  %1841 = zext i1 %1835 to i32
  %1842 = add nuw nsw i32 %1826, %1841
  %1843 = or i32 %1728, 7
  %1844 = add nsw i32 %1843, %14
  %1845 = sext i32 %1844 to i64
  %1846 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1845
  %1847 = load i16, i16 addrspace(1)* %1846, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1848 = uitofp i16 %1847 to float
  %1849 = fcmp contract ogt float %1719, %1848
  %1850 = fcmp contract olt float %1720, %1848
  %1851 = and i1 %1849, %1850
  %1852 = fmul contract float %1848, %1848
  %1853 = select i1 %1851, float %1848, float -0.000000e+00
  %1854 = fadd contract float %1838, %1853
  %1855 = select i1 %1851, float %1852, float -0.000000e+00
  %1856 = fadd contract float %1840, %1855
  %1857 = zext i1 %1851 to i32
  %1858 = add nuw nsw i32 %1842, %1857
  %1859 = add nuw nsw i32 %1728, 8
  %1860 = add i32 %1731, 8
  %1861 = icmp eq i32 %1860, %1725
  br i1 %1861, label %1862, label %1726, !llvm.loop !11

1862:                                             ; preds = %1726, %1718
  %1863 = phi float [ undef, %1718 ], [ %1854, %1726 ]
  %1864 = phi float [ undef, %1718 ], [ %1856, %1726 ]
  %1865 = phi i32 [ undef, %1718 ], [ %1858, %1726 ]
  %1866 = phi i32 [ 0, %1718 ], [ %1858, %1726 ]
  %1867 = phi i32 [ 0, %1718 ], [ %1859, %1726 ]
  %1868 = phi float [ 0.000000e+00, %1718 ], [ %1856, %1726 ]
  %1869 = phi float [ 0.000000e+00, %1718 ], [ %1854, %1726 ]
  %1870 = icmp eq i32 %1722, 0
  br i1 %1870, label %1895, label %1871

1871:                                             ; preds = %1862, %1871
  %1872 = phi i32 [ %1891, %1871 ], [ %1866, %1862 ]
  %1873 = phi i32 [ %1892, %1871 ], [ %1867, %1862 ]
  %1874 = phi float [ %1889, %1871 ], [ %1868, %1862 ]
  %1875 = phi float [ %1887, %1871 ], [ %1869, %1862 ]
  %1876 = phi i32 [ %1893, %1871 ], [ 0, %1862 ]
  %1877 = add nsw i32 %1873, %14
  %1878 = sext i32 %1877 to i64
  %1879 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1878
  %1880 = load i16, i16 addrspace(1)* %1879, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1881 = uitofp i16 %1880 to float
  %1882 = fcmp contract ogt float %1719, %1881
  %1883 = fcmp contract olt float %1720, %1881
  %1884 = and i1 %1882, %1883
  %1885 = fmul contract float %1881, %1881
  %1886 = select i1 %1884, float %1881, float -0.000000e+00
  %1887 = fadd contract float %1875, %1886
  %1888 = select i1 %1884, float %1885, float -0.000000e+00
  %1889 = fadd contract float %1874, %1888
  %1890 = zext i1 %1884 to i32
  %1891 = add nuw nsw i32 %1872, %1890
  %1892 = add nuw nsw i32 %1873, 1
  %1893 = add i32 %1876, 1
  %1894 = icmp eq i32 %1893, %1722
  br i1 %1894, label %1895, label %1871, !llvm.loop !23

1895:                                             ; preds = %1862, %1871, %1717
  %1896 = phi float [ 0.000000e+00, %1717 ], [ %1863, %1862 ], [ %1887, %1871 ]
  %1897 = phi float [ 0.000000e+00, %1717 ], [ %1864, %1862 ], [ %1889, %1871 ]
  %1898 = phi i32 [ 0, %1717 ], [ %1865, %1862 ], [ %1891, %1871 ]
  %1899 = sitofp i32 %1898 to float
  %1900 = fdiv contract float %1896, %1899
  %1901 = fdiv contract float %1897, %1899
  %1902 = fmul contract float %1900, %1900
  %1903 = fsub contract float %1901, %1902
  %1904 = fcmp olt float %1903, 0x39F0000000000000
  %1905 = select i1 %1904, float 0x41F0000000000000, float 1.000000e+00
  %1906 = fmul float %1903, %1905
  %1907 = tail call float @llvm.sqrt.f32(float %1906)
  %1908 = bitcast float %1907 to i32
  %1909 = add nsw i32 %1908, -1
  %1910 = bitcast i32 %1909 to float
  %1911 = add nsw i32 %1908, 1
  %1912 = bitcast i32 %1911 to float
  %1913 = tail call i1 @llvm.amdgcn.class.f32(float %1906, i32 608)
  %1914 = select i1 %1904, float 0x3EF0000000000000, float 1.000000e+00
  %1915 = fneg float %1912
  %1916 = tail call float @llvm.fma.f32(float %1915, float %1907, float %1906)
  %1917 = fcmp ogt float %1916, 0.000000e+00
  %1918 = fneg float %1910
  %1919 = tail call float @llvm.fma.f32(float %1918, float %1907, float %1906)
  %1920 = fcmp ole float %1919, 0.000000e+00
  %1921 = select i1 %1920, float %1910, float %1907
  %1922 = select i1 %1917, float %1912, float %1921
  %1923 = fmul float %1914, %1922
  %1924 = select i1 %1913, float %1906, float %1923
  %1925 = fmul contract float %1924, 2.000000e+00
  %1926 = fsub contract float %1900, %1688
  %1927 = tail call float @llvm.fabs.f32(float %1926)
  %1928 = fcmp contract ogt float %1927, 0x3EB0C6F7A0000000
  br i1 %1928, label %1929, label %4399, !llvm.loop !15

1929:                                             ; preds = %1895
  br i1 %13, label %2107, label %1930

1930:                                             ; preds = %1929
  %1931 = fadd contract float %1900, %1925
  %1932 = fsub contract float %1900, %1925
  %1933 = add i32 %1, -1
  %1934 = and i32 %1, 7
  %1935 = icmp ult i32 %1933, 7
  br i1 %1935, label %2074, label %1936

1936:                                             ; preds = %1930
  %1937 = and i32 %1, -8
  br label %1938

1938:                                             ; preds = %1938, %1936
  %1939 = phi i32 [ 0, %1936 ], [ %2070, %1938 ]
  %1940 = phi i32 [ 0, %1936 ], [ %2071, %1938 ]
  %1941 = phi float [ 0.000000e+00, %1936 ], [ %2068, %1938 ]
  %1942 = phi float [ 0.000000e+00, %1936 ], [ %2066, %1938 ]
  %1943 = phi i32 [ 0, %1936 ], [ %2072, %1938 ]
  %1944 = add nsw i32 %1940, %14
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1945
  %1947 = load i16, i16 addrspace(1)* %1946, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1948 = uitofp i16 %1947 to float
  %1949 = fcmp contract ogt float %1931, %1948
  %1950 = fcmp contract olt float %1932, %1948
  %1951 = and i1 %1949, %1950
  %1952 = fmul contract float %1948, %1948
  %1953 = select i1 %1951, float %1948, float -0.000000e+00
  %1954 = fadd contract float %1942, %1953
  %1955 = select i1 %1951, float %1952, float -0.000000e+00
  %1956 = fadd contract float %1941, %1955
  %1957 = zext i1 %1951 to i32
  %1958 = add nuw nsw i32 %1939, %1957
  %1959 = or i32 %1940, 1
  %1960 = add nsw i32 %1959, %14
  %1961 = sext i32 %1960 to i64
  %1962 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1961
  %1963 = load i16, i16 addrspace(1)* %1962, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1964 = uitofp i16 %1963 to float
  %1965 = fcmp contract ogt float %1931, %1964
  %1966 = fcmp contract olt float %1932, %1964
  %1967 = and i1 %1965, %1966
  %1968 = fmul contract float %1964, %1964
  %1969 = select i1 %1967, float %1964, float -0.000000e+00
  %1970 = fadd contract float %1954, %1969
  %1971 = select i1 %1967, float %1968, float -0.000000e+00
  %1972 = fadd contract float %1956, %1971
  %1973 = zext i1 %1967 to i32
  %1974 = add nuw nsw i32 %1958, %1973
  %1975 = or i32 %1940, 2
  %1976 = add nsw i32 %1975, %14
  %1977 = sext i32 %1976 to i64
  %1978 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1977
  %1979 = load i16, i16 addrspace(1)* %1978, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1980 = uitofp i16 %1979 to float
  %1981 = fcmp contract ogt float %1931, %1980
  %1982 = fcmp contract olt float %1932, %1980
  %1983 = and i1 %1981, %1982
  %1984 = fmul contract float %1980, %1980
  %1985 = select i1 %1983, float %1980, float -0.000000e+00
  %1986 = fadd contract float %1970, %1985
  %1987 = select i1 %1983, float %1984, float -0.000000e+00
  %1988 = fadd contract float %1972, %1987
  %1989 = zext i1 %1983 to i32
  %1990 = add nuw nsw i32 %1974, %1989
  %1991 = or i32 %1940, 3
  %1992 = add nsw i32 %1991, %14
  %1993 = sext i32 %1992 to i64
  %1994 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %1993
  %1995 = load i16, i16 addrspace(1)* %1994, align 2, !tbaa !7, !amdgpu.noclobber !5
  %1996 = uitofp i16 %1995 to float
  %1997 = fcmp contract ogt float %1931, %1996
  %1998 = fcmp contract olt float %1932, %1996
  %1999 = and i1 %1997, %1998
  %2000 = fmul contract float %1996, %1996
  %2001 = select i1 %1999, float %1996, float -0.000000e+00
  %2002 = fadd contract float %1986, %2001
  %2003 = select i1 %1999, float %2000, float -0.000000e+00
  %2004 = fadd contract float %1988, %2003
  %2005 = zext i1 %1999 to i32
  %2006 = add nuw nsw i32 %1990, %2005
  %2007 = or i32 %1940, 4
  %2008 = add nsw i32 %2007, %14
  %2009 = sext i32 %2008 to i64
  %2010 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2009
  %2011 = load i16, i16 addrspace(1)* %2010, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2012 = uitofp i16 %2011 to float
  %2013 = fcmp contract ogt float %1931, %2012
  %2014 = fcmp contract olt float %1932, %2012
  %2015 = and i1 %2013, %2014
  %2016 = fmul contract float %2012, %2012
  %2017 = select i1 %2015, float %2012, float -0.000000e+00
  %2018 = fadd contract float %2002, %2017
  %2019 = select i1 %2015, float %2016, float -0.000000e+00
  %2020 = fadd contract float %2004, %2019
  %2021 = zext i1 %2015 to i32
  %2022 = add nuw nsw i32 %2006, %2021
  %2023 = or i32 %1940, 5
  %2024 = add nsw i32 %2023, %14
  %2025 = sext i32 %2024 to i64
  %2026 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2025
  %2027 = load i16, i16 addrspace(1)* %2026, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2028 = uitofp i16 %2027 to float
  %2029 = fcmp contract ogt float %1931, %2028
  %2030 = fcmp contract olt float %1932, %2028
  %2031 = and i1 %2029, %2030
  %2032 = fmul contract float %2028, %2028
  %2033 = select i1 %2031, float %2028, float -0.000000e+00
  %2034 = fadd contract float %2018, %2033
  %2035 = select i1 %2031, float %2032, float -0.000000e+00
  %2036 = fadd contract float %2020, %2035
  %2037 = zext i1 %2031 to i32
  %2038 = add nuw nsw i32 %2022, %2037
  %2039 = or i32 %1940, 6
  %2040 = add nsw i32 %2039, %14
  %2041 = sext i32 %2040 to i64
  %2042 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2041
  %2043 = load i16, i16 addrspace(1)* %2042, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2044 = uitofp i16 %2043 to float
  %2045 = fcmp contract ogt float %1931, %2044
  %2046 = fcmp contract olt float %1932, %2044
  %2047 = and i1 %2045, %2046
  %2048 = fmul contract float %2044, %2044
  %2049 = select i1 %2047, float %2044, float -0.000000e+00
  %2050 = fadd contract float %2034, %2049
  %2051 = select i1 %2047, float %2048, float -0.000000e+00
  %2052 = fadd contract float %2036, %2051
  %2053 = zext i1 %2047 to i32
  %2054 = add nuw nsw i32 %2038, %2053
  %2055 = or i32 %1940, 7
  %2056 = add nsw i32 %2055, %14
  %2057 = sext i32 %2056 to i64
  %2058 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2057
  %2059 = load i16, i16 addrspace(1)* %2058, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2060 = uitofp i16 %2059 to float
  %2061 = fcmp contract ogt float %1931, %2060
  %2062 = fcmp contract olt float %1932, %2060
  %2063 = and i1 %2061, %2062
  %2064 = fmul contract float %2060, %2060
  %2065 = select i1 %2063, float %2060, float -0.000000e+00
  %2066 = fadd contract float %2050, %2065
  %2067 = select i1 %2063, float %2064, float -0.000000e+00
  %2068 = fadd contract float %2052, %2067
  %2069 = zext i1 %2063 to i32
  %2070 = add nuw nsw i32 %2054, %2069
  %2071 = add nuw nsw i32 %1940, 8
  %2072 = add i32 %1943, 8
  %2073 = icmp eq i32 %2072, %1937
  br i1 %2073, label %2074, label %1938, !llvm.loop !11

2074:                                             ; preds = %1938, %1930
  %2075 = phi float [ undef, %1930 ], [ %2066, %1938 ]
  %2076 = phi float [ undef, %1930 ], [ %2068, %1938 ]
  %2077 = phi i32 [ undef, %1930 ], [ %2070, %1938 ]
  %2078 = phi i32 [ 0, %1930 ], [ %2070, %1938 ]
  %2079 = phi i32 [ 0, %1930 ], [ %2071, %1938 ]
  %2080 = phi float [ 0.000000e+00, %1930 ], [ %2068, %1938 ]
  %2081 = phi float [ 0.000000e+00, %1930 ], [ %2066, %1938 ]
  %2082 = icmp eq i32 %1934, 0
  br i1 %2082, label %2107, label %2083

2083:                                             ; preds = %2074, %2083
  %2084 = phi i32 [ %2103, %2083 ], [ %2078, %2074 ]
  %2085 = phi i32 [ %2104, %2083 ], [ %2079, %2074 ]
  %2086 = phi float [ %2101, %2083 ], [ %2080, %2074 ]
  %2087 = phi float [ %2099, %2083 ], [ %2081, %2074 ]
  %2088 = phi i32 [ %2105, %2083 ], [ 0, %2074 ]
  %2089 = add nsw i32 %2085, %14
  %2090 = sext i32 %2089 to i64
  %2091 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2090
  %2092 = load i16, i16 addrspace(1)* %2091, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2093 = uitofp i16 %2092 to float
  %2094 = fcmp contract ogt float %1931, %2093
  %2095 = fcmp contract olt float %1932, %2093
  %2096 = and i1 %2094, %2095
  %2097 = fmul contract float %2093, %2093
  %2098 = select i1 %2096, float %2093, float -0.000000e+00
  %2099 = fadd contract float %2087, %2098
  %2100 = select i1 %2096, float %2097, float -0.000000e+00
  %2101 = fadd contract float %2086, %2100
  %2102 = zext i1 %2096 to i32
  %2103 = add nuw nsw i32 %2084, %2102
  %2104 = add nuw nsw i32 %2085, 1
  %2105 = add i32 %2088, 1
  %2106 = icmp eq i32 %2105, %1934
  br i1 %2106, label %2107, label %2083, !llvm.loop !24

2107:                                             ; preds = %2074, %2083, %1929
  %2108 = phi float [ 0.000000e+00, %1929 ], [ %2075, %2074 ], [ %2099, %2083 ]
  %2109 = phi float [ 0.000000e+00, %1929 ], [ %2076, %2074 ], [ %2101, %2083 ]
  %2110 = phi i32 [ 0, %1929 ], [ %2077, %2074 ], [ %2103, %2083 ]
  %2111 = sitofp i32 %2110 to float
  %2112 = fdiv contract float %2108, %2111
  %2113 = fdiv contract float %2109, %2111
  %2114 = fmul contract float %2112, %2112
  %2115 = fsub contract float %2113, %2114
  %2116 = fcmp olt float %2115, 0x39F0000000000000
  %2117 = select i1 %2116, float 0x41F0000000000000, float 1.000000e+00
  %2118 = fmul float %2115, %2117
  %2119 = tail call float @llvm.sqrt.f32(float %2118)
  %2120 = bitcast float %2119 to i32
  %2121 = add nsw i32 %2120, -1
  %2122 = bitcast i32 %2121 to float
  %2123 = add nsw i32 %2120, 1
  %2124 = bitcast i32 %2123 to float
  %2125 = tail call i1 @llvm.amdgcn.class.f32(float %2118, i32 608)
  %2126 = select i1 %2116, float 0x3EF0000000000000, float 1.000000e+00
  %2127 = fneg float %2124
  %2128 = tail call float @llvm.fma.f32(float %2127, float %2119, float %2118)
  %2129 = fcmp ogt float %2128, 0.000000e+00
  %2130 = fneg float %2122
  %2131 = tail call float @llvm.fma.f32(float %2130, float %2119, float %2118)
  %2132 = fcmp ole float %2131, 0.000000e+00
  %2133 = select i1 %2132, float %2122, float %2119
  %2134 = select i1 %2129, float %2124, float %2133
  %2135 = fmul float %2126, %2134
  %2136 = select i1 %2125, float %2118, float %2135
  %2137 = fmul contract float %2136, 2.000000e+00
  %2138 = fsub contract float %2112, %1900
  %2139 = tail call float @llvm.fabs.f32(float %2138)
  %2140 = fcmp contract ogt float %2139, 0x3EB0C6F7A0000000
  br i1 %2140, label %2141, label %4399, !llvm.loop !15

2141:                                             ; preds = %2107
  br i1 %13, label %2319, label %2142

2142:                                             ; preds = %2141
  %2143 = fadd contract float %2112, %2137
  %2144 = fsub contract float %2112, %2137
  %2145 = add i32 %1, -1
  %2146 = and i32 %1, 7
  %2147 = icmp ult i32 %2145, 7
  br i1 %2147, label %2286, label %2148

2148:                                             ; preds = %2142
  %2149 = and i32 %1, -8
  br label %2150

2150:                                             ; preds = %2150, %2148
  %2151 = phi i32 [ 0, %2148 ], [ %2282, %2150 ]
  %2152 = phi i32 [ 0, %2148 ], [ %2283, %2150 ]
  %2153 = phi float [ 0.000000e+00, %2148 ], [ %2280, %2150 ]
  %2154 = phi float [ 0.000000e+00, %2148 ], [ %2278, %2150 ]
  %2155 = phi i32 [ 0, %2148 ], [ %2284, %2150 ]
  %2156 = add nsw i32 %2152, %14
  %2157 = sext i32 %2156 to i64
  %2158 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2157
  %2159 = load i16, i16 addrspace(1)* %2158, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2160 = uitofp i16 %2159 to float
  %2161 = fcmp contract ogt float %2143, %2160
  %2162 = fcmp contract olt float %2144, %2160
  %2163 = and i1 %2161, %2162
  %2164 = fmul contract float %2160, %2160
  %2165 = select i1 %2163, float %2160, float -0.000000e+00
  %2166 = fadd contract float %2154, %2165
  %2167 = select i1 %2163, float %2164, float -0.000000e+00
  %2168 = fadd contract float %2153, %2167
  %2169 = zext i1 %2163 to i32
  %2170 = add nuw nsw i32 %2151, %2169
  %2171 = or i32 %2152, 1
  %2172 = add nsw i32 %2171, %14
  %2173 = sext i32 %2172 to i64
  %2174 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2173
  %2175 = load i16, i16 addrspace(1)* %2174, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2176 = uitofp i16 %2175 to float
  %2177 = fcmp contract ogt float %2143, %2176
  %2178 = fcmp contract olt float %2144, %2176
  %2179 = and i1 %2177, %2178
  %2180 = fmul contract float %2176, %2176
  %2181 = select i1 %2179, float %2176, float -0.000000e+00
  %2182 = fadd contract float %2166, %2181
  %2183 = select i1 %2179, float %2180, float -0.000000e+00
  %2184 = fadd contract float %2168, %2183
  %2185 = zext i1 %2179 to i32
  %2186 = add nuw nsw i32 %2170, %2185
  %2187 = or i32 %2152, 2
  %2188 = add nsw i32 %2187, %14
  %2189 = sext i32 %2188 to i64
  %2190 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2189
  %2191 = load i16, i16 addrspace(1)* %2190, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2192 = uitofp i16 %2191 to float
  %2193 = fcmp contract ogt float %2143, %2192
  %2194 = fcmp contract olt float %2144, %2192
  %2195 = and i1 %2193, %2194
  %2196 = fmul contract float %2192, %2192
  %2197 = select i1 %2195, float %2192, float -0.000000e+00
  %2198 = fadd contract float %2182, %2197
  %2199 = select i1 %2195, float %2196, float -0.000000e+00
  %2200 = fadd contract float %2184, %2199
  %2201 = zext i1 %2195 to i32
  %2202 = add nuw nsw i32 %2186, %2201
  %2203 = or i32 %2152, 3
  %2204 = add nsw i32 %2203, %14
  %2205 = sext i32 %2204 to i64
  %2206 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2205
  %2207 = load i16, i16 addrspace(1)* %2206, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2208 = uitofp i16 %2207 to float
  %2209 = fcmp contract ogt float %2143, %2208
  %2210 = fcmp contract olt float %2144, %2208
  %2211 = and i1 %2209, %2210
  %2212 = fmul contract float %2208, %2208
  %2213 = select i1 %2211, float %2208, float -0.000000e+00
  %2214 = fadd contract float %2198, %2213
  %2215 = select i1 %2211, float %2212, float -0.000000e+00
  %2216 = fadd contract float %2200, %2215
  %2217 = zext i1 %2211 to i32
  %2218 = add nuw nsw i32 %2202, %2217
  %2219 = or i32 %2152, 4
  %2220 = add nsw i32 %2219, %14
  %2221 = sext i32 %2220 to i64
  %2222 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2221
  %2223 = load i16, i16 addrspace(1)* %2222, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2224 = uitofp i16 %2223 to float
  %2225 = fcmp contract ogt float %2143, %2224
  %2226 = fcmp contract olt float %2144, %2224
  %2227 = and i1 %2225, %2226
  %2228 = fmul contract float %2224, %2224
  %2229 = select i1 %2227, float %2224, float -0.000000e+00
  %2230 = fadd contract float %2214, %2229
  %2231 = select i1 %2227, float %2228, float -0.000000e+00
  %2232 = fadd contract float %2216, %2231
  %2233 = zext i1 %2227 to i32
  %2234 = add nuw nsw i32 %2218, %2233
  %2235 = or i32 %2152, 5
  %2236 = add nsw i32 %2235, %14
  %2237 = sext i32 %2236 to i64
  %2238 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2237
  %2239 = load i16, i16 addrspace(1)* %2238, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2240 = uitofp i16 %2239 to float
  %2241 = fcmp contract ogt float %2143, %2240
  %2242 = fcmp contract olt float %2144, %2240
  %2243 = and i1 %2241, %2242
  %2244 = fmul contract float %2240, %2240
  %2245 = select i1 %2243, float %2240, float -0.000000e+00
  %2246 = fadd contract float %2230, %2245
  %2247 = select i1 %2243, float %2244, float -0.000000e+00
  %2248 = fadd contract float %2232, %2247
  %2249 = zext i1 %2243 to i32
  %2250 = add nuw nsw i32 %2234, %2249
  %2251 = or i32 %2152, 6
  %2252 = add nsw i32 %2251, %14
  %2253 = sext i32 %2252 to i64
  %2254 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2253
  %2255 = load i16, i16 addrspace(1)* %2254, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2256 = uitofp i16 %2255 to float
  %2257 = fcmp contract ogt float %2143, %2256
  %2258 = fcmp contract olt float %2144, %2256
  %2259 = and i1 %2257, %2258
  %2260 = fmul contract float %2256, %2256
  %2261 = select i1 %2259, float %2256, float -0.000000e+00
  %2262 = fadd contract float %2246, %2261
  %2263 = select i1 %2259, float %2260, float -0.000000e+00
  %2264 = fadd contract float %2248, %2263
  %2265 = zext i1 %2259 to i32
  %2266 = add nuw nsw i32 %2250, %2265
  %2267 = or i32 %2152, 7
  %2268 = add nsw i32 %2267, %14
  %2269 = sext i32 %2268 to i64
  %2270 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2269
  %2271 = load i16, i16 addrspace(1)* %2270, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2272 = uitofp i16 %2271 to float
  %2273 = fcmp contract ogt float %2143, %2272
  %2274 = fcmp contract olt float %2144, %2272
  %2275 = and i1 %2273, %2274
  %2276 = fmul contract float %2272, %2272
  %2277 = select i1 %2275, float %2272, float -0.000000e+00
  %2278 = fadd contract float %2262, %2277
  %2279 = select i1 %2275, float %2276, float -0.000000e+00
  %2280 = fadd contract float %2264, %2279
  %2281 = zext i1 %2275 to i32
  %2282 = add nuw nsw i32 %2266, %2281
  %2283 = add nuw nsw i32 %2152, 8
  %2284 = add i32 %2155, 8
  %2285 = icmp eq i32 %2284, %2149
  br i1 %2285, label %2286, label %2150, !llvm.loop !11

2286:                                             ; preds = %2150, %2142
  %2287 = phi float [ undef, %2142 ], [ %2278, %2150 ]
  %2288 = phi float [ undef, %2142 ], [ %2280, %2150 ]
  %2289 = phi i32 [ undef, %2142 ], [ %2282, %2150 ]
  %2290 = phi i32 [ 0, %2142 ], [ %2282, %2150 ]
  %2291 = phi i32 [ 0, %2142 ], [ %2283, %2150 ]
  %2292 = phi float [ 0.000000e+00, %2142 ], [ %2280, %2150 ]
  %2293 = phi float [ 0.000000e+00, %2142 ], [ %2278, %2150 ]
  %2294 = icmp eq i32 %2146, 0
  br i1 %2294, label %2319, label %2295

2295:                                             ; preds = %2286, %2295
  %2296 = phi i32 [ %2315, %2295 ], [ %2290, %2286 ]
  %2297 = phi i32 [ %2316, %2295 ], [ %2291, %2286 ]
  %2298 = phi float [ %2313, %2295 ], [ %2292, %2286 ]
  %2299 = phi float [ %2311, %2295 ], [ %2293, %2286 ]
  %2300 = phi i32 [ %2317, %2295 ], [ 0, %2286 ]
  %2301 = add nsw i32 %2297, %14
  %2302 = sext i32 %2301 to i64
  %2303 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2302
  %2304 = load i16, i16 addrspace(1)* %2303, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2305 = uitofp i16 %2304 to float
  %2306 = fcmp contract ogt float %2143, %2305
  %2307 = fcmp contract olt float %2144, %2305
  %2308 = and i1 %2306, %2307
  %2309 = fmul contract float %2305, %2305
  %2310 = select i1 %2308, float %2305, float -0.000000e+00
  %2311 = fadd contract float %2299, %2310
  %2312 = select i1 %2308, float %2309, float -0.000000e+00
  %2313 = fadd contract float %2298, %2312
  %2314 = zext i1 %2308 to i32
  %2315 = add nuw nsw i32 %2296, %2314
  %2316 = add nuw nsw i32 %2297, 1
  %2317 = add i32 %2300, 1
  %2318 = icmp eq i32 %2317, %2146
  br i1 %2318, label %2319, label %2295, !llvm.loop !25

2319:                                             ; preds = %2286, %2295, %2141
  %2320 = phi float [ 0.000000e+00, %2141 ], [ %2287, %2286 ], [ %2311, %2295 ]
  %2321 = phi float [ 0.000000e+00, %2141 ], [ %2288, %2286 ], [ %2313, %2295 ]
  %2322 = phi i32 [ 0, %2141 ], [ %2289, %2286 ], [ %2315, %2295 ]
  %2323 = sitofp i32 %2322 to float
  %2324 = fdiv contract float %2320, %2323
  %2325 = fdiv contract float %2321, %2323
  %2326 = fmul contract float %2324, %2324
  %2327 = fsub contract float %2325, %2326
  %2328 = fcmp olt float %2327, 0x39F0000000000000
  %2329 = select i1 %2328, float 0x41F0000000000000, float 1.000000e+00
  %2330 = fmul float %2327, %2329
  %2331 = tail call float @llvm.sqrt.f32(float %2330)
  %2332 = bitcast float %2331 to i32
  %2333 = add nsw i32 %2332, -1
  %2334 = bitcast i32 %2333 to float
  %2335 = add nsw i32 %2332, 1
  %2336 = bitcast i32 %2335 to float
  %2337 = tail call i1 @llvm.amdgcn.class.f32(float %2330, i32 608)
  %2338 = select i1 %2328, float 0x3EF0000000000000, float 1.000000e+00
  %2339 = fneg float %2336
  %2340 = tail call float @llvm.fma.f32(float %2339, float %2331, float %2330)
  %2341 = fcmp ogt float %2340, 0.000000e+00
  %2342 = fneg float %2334
  %2343 = tail call float @llvm.fma.f32(float %2342, float %2331, float %2330)
  %2344 = fcmp ole float %2343, 0.000000e+00
  %2345 = select i1 %2344, float %2334, float %2331
  %2346 = select i1 %2341, float %2336, float %2345
  %2347 = fmul float %2338, %2346
  %2348 = select i1 %2337, float %2330, float %2347
  %2349 = fmul contract float %2348, 2.000000e+00
  %2350 = fsub contract float %2324, %2112
  %2351 = tail call float @llvm.fabs.f32(float %2350)
  %2352 = fcmp contract ogt float %2351, 0x3EB0C6F7A0000000
  br i1 %2352, label %2353, label %4399, !llvm.loop !15

2353:                                             ; preds = %2319
  br i1 %13, label %2531, label %2354

2354:                                             ; preds = %2353
  %2355 = fadd contract float %2324, %2349
  %2356 = fsub contract float %2324, %2349
  %2357 = add i32 %1, -1
  %2358 = and i32 %1, 7
  %2359 = icmp ult i32 %2357, 7
  br i1 %2359, label %2498, label %2360

2360:                                             ; preds = %2354
  %2361 = and i32 %1, -8
  br label %2362

2362:                                             ; preds = %2362, %2360
  %2363 = phi i32 [ 0, %2360 ], [ %2494, %2362 ]
  %2364 = phi i32 [ 0, %2360 ], [ %2495, %2362 ]
  %2365 = phi float [ 0.000000e+00, %2360 ], [ %2492, %2362 ]
  %2366 = phi float [ 0.000000e+00, %2360 ], [ %2490, %2362 ]
  %2367 = phi i32 [ 0, %2360 ], [ %2496, %2362 ]
  %2368 = add nsw i32 %2364, %14
  %2369 = sext i32 %2368 to i64
  %2370 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2369
  %2371 = load i16, i16 addrspace(1)* %2370, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2372 = uitofp i16 %2371 to float
  %2373 = fcmp contract ogt float %2355, %2372
  %2374 = fcmp contract olt float %2356, %2372
  %2375 = and i1 %2373, %2374
  %2376 = fmul contract float %2372, %2372
  %2377 = select i1 %2375, float %2372, float -0.000000e+00
  %2378 = fadd contract float %2366, %2377
  %2379 = select i1 %2375, float %2376, float -0.000000e+00
  %2380 = fadd contract float %2365, %2379
  %2381 = zext i1 %2375 to i32
  %2382 = add nuw nsw i32 %2363, %2381
  %2383 = or i32 %2364, 1
  %2384 = add nsw i32 %2383, %14
  %2385 = sext i32 %2384 to i64
  %2386 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2385
  %2387 = load i16, i16 addrspace(1)* %2386, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2388 = uitofp i16 %2387 to float
  %2389 = fcmp contract ogt float %2355, %2388
  %2390 = fcmp contract olt float %2356, %2388
  %2391 = and i1 %2389, %2390
  %2392 = fmul contract float %2388, %2388
  %2393 = select i1 %2391, float %2388, float -0.000000e+00
  %2394 = fadd contract float %2378, %2393
  %2395 = select i1 %2391, float %2392, float -0.000000e+00
  %2396 = fadd contract float %2380, %2395
  %2397 = zext i1 %2391 to i32
  %2398 = add nuw nsw i32 %2382, %2397
  %2399 = or i32 %2364, 2
  %2400 = add nsw i32 %2399, %14
  %2401 = sext i32 %2400 to i64
  %2402 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2401
  %2403 = load i16, i16 addrspace(1)* %2402, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2404 = uitofp i16 %2403 to float
  %2405 = fcmp contract ogt float %2355, %2404
  %2406 = fcmp contract olt float %2356, %2404
  %2407 = and i1 %2405, %2406
  %2408 = fmul contract float %2404, %2404
  %2409 = select i1 %2407, float %2404, float -0.000000e+00
  %2410 = fadd contract float %2394, %2409
  %2411 = select i1 %2407, float %2408, float -0.000000e+00
  %2412 = fadd contract float %2396, %2411
  %2413 = zext i1 %2407 to i32
  %2414 = add nuw nsw i32 %2398, %2413
  %2415 = or i32 %2364, 3
  %2416 = add nsw i32 %2415, %14
  %2417 = sext i32 %2416 to i64
  %2418 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2417
  %2419 = load i16, i16 addrspace(1)* %2418, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2420 = uitofp i16 %2419 to float
  %2421 = fcmp contract ogt float %2355, %2420
  %2422 = fcmp contract olt float %2356, %2420
  %2423 = and i1 %2421, %2422
  %2424 = fmul contract float %2420, %2420
  %2425 = select i1 %2423, float %2420, float -0.000000e+00
  %2426 = fadd contract float %2410, %2425
  %2427 = select i1 %2423, float %2424, float -0.000000e+00
  %2428 = fadd contract float %2412, %2427
  %2429 = zext i1 %2423 to i32
  %2430 = add nuw nsw i32 %2414, %2429
  %2431 = or i32 %2364, 4
  %2432 = add nsw i32 %2431, %14
  %2433 = sext i32 %2432 to i64
  %2434 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2433
  %2435 = load i16, i16 addrspace(1)* %2434, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2436 = uitofp i16 %2435 to float
  %2437 = fcmp contract ogt float %2355, %2436
  %2438 = fcmp contract olt float %2356, %2436
  %2439 = and i1 %2437, %2438
  %2440 = fmul contract float %2436, %2436
  %2441 = select i1 %2439, float %2436, float -0.000000e+00
  %2442 = fadd contract float %2426, %2441
  %2443 = select i1 %2439, float %2440, float -0.000000e+00
  %2444 = fadd contract float %2428, %2443
  %2445 = zext i1 %2439 to i32
  %2446 = add nuw nsw i32 %2430, %2445
  %2447 = or i32 %2364, 5
  %2448 = add nsw i32 %2447, %14
  %2449 = sext i32 %2448 to i64
  %2450 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2449
  %2451 = load i16, i16 addrspace(1)* %2450, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2452 = uitofp i16 %2451 to float
  %2453 = fcmp contract ogt float %2355, %2452
  %2454 = fcmp contract olt float %2356, %2452
  %2455 = and i1 %2453, %2454
  %2456 = fmul contract float %2452, %2452
  %2457 = select i1 %2455, float %2452, float -0.000000e+00
  %2458 = fadd contract float %2442, %2457
  %2459 = select i1 %2455, float %2456, float -0.000000e+00
  %2460 = fadd contract float %2444, %2459
  %2461 = zext i1 %2455 to i32
  %2462 = add nuw nsw i32 %2446, %2461
  %2463 = or i32 %2364, 6
  %2464 = add nsw i32 %2463, %14
  %2465 = sext i32 %2464 to i64
  %2466 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2465
  %2467 = load i16, i16 addrspace(1)* %2466, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2468 = uitofp i16 %2467 to float
  %2469 = fcmp contract ogt float %2355, %2468
  %2470 = fcmp contract olt float %2356, %2468
  %2471 = and i1 %2469, %2470
  %2472 = fmul contract float %2468, %2468
  %2473 = select i1 %2471, float %2468, float -0.000000e+00
  %2474 = fadd contract float %2458, %2473
  %2475 = select i1 %2471, float %2472, float -0.000000e+00
  %2476 = fadd contract float %2460, %2475
  %2477 = zext i1 %2471 to i32
  %2478 = add nuw nsw i32 %2462, %2477
  %2479 = or i32 %2364, 7
  %2480 = add nsw i32 %2479, %14
  %2481 = sext i32 %2480 to i64
  %2482 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2481
  %2483 = load i16, i16 addrspace(1)* %2482, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2484 = uitofp i16 %2483 to float
  %2485 = fcmp contract ogt float %2355, %2484
  %2486 = fcmp contract olt float %2356, %2484
  %2487 = and i1 %2485, %2486
  %2488 = fmul contract float %2484, %2484
  %2489 = select i1 %2487, float %2484, float -0.000000e+00
  %2490 = fadd contract float %2474, %2489
  %2491 = select i1 %2487, float %2488, float -0.000000e+00
  %2492 = fadd contract float %2476, %2491
  %2493 = zext i1 %2487 to i32
  %2494 = add nuw nsw i32 %2478, %2493
  %2495 = add nuw nsw i32 %2364, 8
  %2496 = add i32 %2367, 8
  %2497 = icmp eq i32 %2496, %2361
  br i1 %2497, label %2498, label %2362, !llvm.loop !11

2498:                                             ; preds = %2362, %2354
  %2499 = phi float [ undef, %2354 ], [ %2490, %2362 ]
  %2500 = phi float [ undef, %2354 ], [ %2492, %2362 ]
  %2501 = phi i32 [ undef, %2354 ], [ %2494, %2362 ]
  %2502 = phi i32 [ 0, %2354 ], [ %2494, %2362 ]
  %2503 = phi i32 [ 0, %2354 ], [ %2495, %2362 ]
  %2504 = phi float [ 0.000000e+00, %2354 ], [ %2492, %2362 ]
  %2505 = phi float [ 0.000000e+00, %2354 ], [ %2490, %2362 ]
  %2506 = icmp eq i32 %2358, 0
  br i1 %2506, label %2531, label %2507

2507:                                             ; preds = %2498, %2507
  %2508 = phi i32 [ %2527, %2507 ], [ %2502, %2498 ]
  %2509 = phi i32 [ %2528, %2507 ], [ %2503, %2498 ]
  %2510 = phi float [ %2525, %2507 ], [ %2504, %2498 ]
  %2511 = phi float [ %2523, %2507 ], [ %2505, %2498 ]
  %2512 = phi i32 [ %2529, %2507 ], [ 0, %2498 ]
  %2513 = add nsw i32 %2509, %14
  %2514 = sext i32 %2513 to i64
  %2515 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2514
  %2516 = load i16, i16 addrspace(1)* %2515, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2517 = uitofp i16 %2516 to float
  %2518 = fcmp contract ogt float %2355, %2517
  %2519 = fcmp contract olt float %2356, %2517
  %2520 = and i1 %2518, %2519
  %2521 = fmul contract float %2517, %2517
  %2522 = select i1 %2520, float %2517, float -0.000000e+00
  %2523 = fadd contract float %2511, %2522
  %2524 = select i1 %2520, float %2521, float -0.000000e+00
  %2525 = fadd contract float %2510, %2524
  %2526 = zext i1 %2520 to i32
  %2527 = add nuw nsw i32 %2508, %2526
  %2528 = add nuw nsw i32 %2509, 1
  %2529 = add i32 %2512, 1
  %2530 = icmp eq i32 %2529, %2358
  br i1 %2530, label %2531, label %2507, !llvm.loop !26

2531:                                             ; preds = %2498, %2507, %2353
  %2532 = phi float [ 0.000000e+00, %2353 ], [ %2499, %2498 ], [ %2523, %2507 ]
  %2533 = phi float [ 0.000000e+00, %2353 ], [ %2500, %2498 ], [ %2525, %2507 ]
  %2534 = phi i32 [ 0, %2353 ], [ %2501, %2498 ], [ %2527, %2507 ]
  %2535 = sitofp i32 %2534 to float
  %2536 = fdiv contract float %2532, %2535
  %2537 = fdiv contract float %2533, %2535
  %2538 = fmul contract float %2536, %2536
  %2539 = fsub contract float %2537, %2538
  %2540 = fcmp olt float %2539, 0x39F0000000000000
  %2541 = select i1 %2540, float 0x41F0000000000000, float 1.000000e+00
  %2542 = fmul float %2539, %2541
  %2543 = tail call float @llvm.sqrt.f32(float %2542)
  %2544 = bitcast float %2543 to i32
  %2545 = add nsw i32 %2544, -1
  %2546 = bitcast i32 %2545 to float
  %2547 = add nsw i32 %2544, 1
  %2548 = bitcast i32 %2547 to float
  %2549 = tail call i1 @llvm.amdgcn.class.f32(float %2542, i32 608)
  %2550 = select i1 %2540, float 0x3EF0000000000000, float 1.000000e+00
  %2551 = fneg float %2548
  %2552 = tail call float @llvm.fma.f32(float %2551, float %2543, float %2542)
  %2553 = fcmp ogt float %2552, 0.000000e+00
  %2554 = fneg float %2546
  %2555 = tail call float @llvm.fma.f32(float %2554, float %2543, float %2542)
  %2556 = fcmp ole float %2555, 0.000000e+00
  %2557 = select i1 %2556, float %2546, float %2543
  %2558 = select i1 %2553, float %2548, float %2557
  %2559 = fmul float %2550, %2558
  %2560 = select i1 %2549, float %2542, float %2559
  %2561 = fmul contract float %2560, 2.000000e+00
  %2562 = fsub contract float %2536, %2324
  %2563 = tail call float @llvm.fabs.f32(float %2562)
  %2564 = fcmp contract ogt float %2563, 0x3EB0C6F7A0000000
  br i1 %2564, label %2565, label %4399, !llvm.loop !15

2565:                                             ; preds = %2531
  br i1 %13, label %2743, label %2566

2566:                                             ; preds = %2565
  %2567 = fadd contract float %2536, %2561
  %2568 = fsub contract float %2536, %2561
  %2569 = add i32 %1, -1
  %2570 = and i32 %1, 7
  %2571 = icmp ult i32 %2569, 7
  br i1 %2571, label %2710, label %2572

2572:                                             ; preds = %2566
  %2573 = and i32 %1, -8
  br label %2574

2574:                                             ; preds = %2574, %2572
  %2575 = phi i32 [ 0, %2572 ], [ %2706, %2574 ]
  %2576 = phi i32 [ 0, %2572 ], [ %2707, %2574 ]
  %2577 = phi float [ 0.000000e+00, %2572 ], [ %2704, %2574 ]
  %2578 = phi float [ 0.000000e+00, %2572 ], [ %2702, %2574 ]
  %2579 = phi i32 [ 0, %2572 ], [ %2708, %2574 ]
  %2580 = add nsw i32 %2576, %14
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2581
  %2583 = load i16, i16 addrspace(1)* %2582, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2584 = uitofp i16 %2583 to float
  %2585 = fcmp contract ogt float %2567, %2584
  %2586 = fcmp contract olt float %2568, %2584
  %2587 = and i1 %2585, %2586
  %2588 = fmul contract float %2584, %2584
  %2589 = select i1 %2587, float %2584, float -0.000000e+00
  %2590 = fadd contract float %2578, %2589
  %2591 = select i1 %2587, float %2588, float -0.000000e+00
  %2592 = fadd contract float %2577, %2591
  %2593 = zext i1 %2587 to i32
  %2594 = add nuw nsw i32 %2575, %2593
  %2595 = or i32 %2576, 1
  %2596 = add nsw i32 %2595, %14
  %2597 = sext i32 %2596 to i64
  %2598 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2597
  %2599 = load i16, i16 addrspace(1)* %2598, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2600 = uitofp i16 %2599 to float
  %2601 = fcmp contract ogt float %2567, %2600
  %2602 = fcmp contract olt float %2568, %2600
  %2603 = and i1 %2601, %2602
  %2604 = fmul contract float %2600, %2600
  %2605 = select i1 %2603, float %2600, float -0.000000e+00
  %2606 = fadd contract float %2590, %2605
  %2607 = select i1 %2603, float %2604, float -0.000000e+00
  %2608 = fadd contract float %2592, %2607
  %2609 = zext i1 %2603 to i32
  %2610 = add nuw nsw i32 %2594, %2609
  %2611 = or i32 %2576, 2
  %2612 = add nsw i32 %2611, %14
  %2613 = sext i32 %2612 to i64
  %2614 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2613
  %2615 = load i16, i16 addrspace(1)* %2614, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2616 = uitofp i16 %2615 to float
  %2617 = fcmp contract ogt float %2567, %2616
  %2618 = fcmp contract olt float %2568, %2616
  %2619 = and i1 %2617, %2618
  %2620 = fmul contract float %2616, %2616
  %2621 = select i1 %2619, float %2616, float -0.000000e+00
  %2622 = fadd contract float %2606, %2621
  %2623 = select i1 %2619, float %2620, float -0.000000e+00
  %2624 = fadd contract float %2608, %2623
  %2625 = zext i1 %2619 to i32
  %2626 = add nuw nsw i32 %2610, %2625
  %2627 = or i32 %2576, 3
  %2628 = add nsw i32 %2627, %14
  %2629 = sext i32 %2628 to i64
  %2630 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2629
  %2631 = load i16, i16 addrspace(1)* %2630, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2632 = uitofp i16 %2631 to float
  %2633 = fcmp contract ogt float %2567, %2632
  %2634 = fcmp contract olt float %2568, %2632
  %2635 = and i1 %2633, %2634
  %2636 = fmul contract float %2632, %2632
  %2637 = select i1 %2635, float %2632, float -0.000000e+00
  %2638 = fadd contract float %2622, %2637
  %2639 = select i1 %2635, float %2636, float -0.000000e+00
  %2640 = fadd contract float %2624, %2639
  %2641 = zext i1 %2635 to i32
  %2642 = add nuw nsw i32 %2626, %2641
  %2643 = or i32 %2576, 4
  %2644 = add nsw i32 %2643, %14
  %2645 = sext i32 %2644 to i64
  %2646 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2645
  %2647 = load i16, i16 addrspace(1)* %2646, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2648 = uitofp i16 %2647 to float
  %2649 = fcmp contract ogt float %2567, %2648
  %2650 = fcmp contract olt float %2568, %2648
  %2651 = and i1 %2649, %2650
  %2652 = fmul contract float %2648, %2648
  %2653 = select i1 %2651, float %2648, float -0.000000e+00
  %2654 = fadd contract float %2638, %2653
  %2655 = select i1 %2651, float %2652, float -0.000000e+00
  %2656 = fadd contract float %2640, %2655
  %2657 = zext i1 %2651 to i32
  %2658 = add nuw nsw i32 %2642, %2657
  %2659 = or i32 %2576, 5
  %2660 = add nsw i32 %2659, %14
  %2661 = sext i32 %2660 to i64
  %2662 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2661
  %2663 = load i16, i16 addrspace(1)* %2662, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2664 = uitofp i16 %2663 to float
  %2665 = fcmp contract ogt float %2567, %2664
  %2666 = fcmp contract olt float %2568, %2664
  %2667 = and i1 %2665, %2666
  %2668 = fmul contract float %2664, %2664
  %2669 = select i1 %2667, float %2664, float -0.000000e+00
  %2670 = fadd contract float %2654, %2669
  %2671 = select i1 %2667, float %2668, float -0.000000e+00
  %2672 = fadd contract float %2656, %2671
  %2673 = zext i1 %2667 to i32
  %2674 = add nuw nsw i32 %2658, %2673
  %2675 = or i32 %2576, 6
  %2676 = add nsw i32 %2675, %14
  %2677 = sext i32 %2676 to i64
  %2678 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2677
  %2679 = load i16, i16 addrspace(1)* %2678, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2680 = uitofp i16 %2679 to float
  %2681 = fcmp contract ogt float %2567, %2680
  %2682 = fcmp contract olt float %2568, %2680
  %2683 = and i1 %2681, %2682
  %2684 = fmul contract float %2680, %2680
  %2685 = select i1 %2683, float %2680, float -0.000000e+00
  %2686 = fadd contract float %2670, %2685
  %2687 = select i1 %2683, float %2684, float -0.000000e+00
  %2688 = fadd contract float %2672, %2687
  %2689 = zext i1 %2683 to i32
  %2690 = add nuw nsw i32 %2674, %2689
  %2691 = or i32 %2576, 7
  %2692 = add nsw i32 %2691, %14
  %2693 = sext i32 %2692 to i64
  %2694 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2693
  %2695 = load i16, i16 addrspace(1)* %2694, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2696 = uitofp i16 %2695 to float
  %2697 = fcmp contract ogt float %2567, %2696
  %2698 = fcmp contract olt float %2568, %2696
  %2699 = and i1 %2697, %2698
  %2700 = fmul contract float %2696, %2696
  %2701 = select i1 %2699, float %2696, float -0.000000e+00
  %2702 = fadd contract float %2686, %2701
  %2703 = select i1 %2699, float %2700, float -0.000000e+00
  %2704 = fadd contract float %2688, %2703
  %2705 = zext i1 %2699 to i32
  %2706 = add nuw nsw i32 %2690, %2705
  %2707 = add nuw nsw i32 %2576, 8
  %2708 = add i32 %2579, 8
  %2709 = icmp eq i32 %2708, %2573
  br i1 %2709, label %2710, label %2574, !llvm.loop !11

2710:                                             ; preds = %2574, %2566
  %2711 = phi float [ undef, %2566 ], [ %2702, %2574 ]
  %2712 = phi float [ undef, %2566 ], [ %2704, %2574 ]
  %2713 = phi i32 [ undef, %2566 ], [ %2706, %2574 ]
  %2714 = phi i32 [ 0, %2566 ], [ %2706, %2574 ]
  %2715 = phi i32 [ 0, %2566 ], [ %2707, %2574 ]
  %2716 = phi float [ 0.000000e+00, %2566 ], [ %2704, %2574 ]
  %2717 = phi float [ 0.000000e+00, %2566 ], [ %2702, %2574 ]
  %2718 = icmp eq i32 %2570, 0
  br i1 %2718, label %2743, label %2719

2719:                                             ; preds = %2710, %2719
  %2720 = phi i32 [ %2739, %2719 ], [ %2714, %2710 ]
  %2721 = phi i32 [ %2740, %2719 ], [ %2715, %2710 ]
  %2722 = phi float [ %2737, %2719 ], [ %2716, %2710 ]
  %2723 = phi float [ %2735, %2719 ], [ %2717, %2710 ]
  %2724 = phi i32 [ %2741, %2719 ], [ 0, %2710 ]
  %2725 = add nsw i32 %2721, %14
  %2726 = sext i32 %2725 to i64
  %2727 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2726
  %2728 = load i16, i16 addrspace(1)* %2727, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2729 = uitofp i16 %2728 to float
  %2730 = fcmp contract ogt float %2567, %2729
  %2731 = fcmp contract olt float %2568, %2729
  %2732 = and i1 %2730, %2731
  %2733 = fmul contract float %2729, %2729
  %2734 = select i1 %2732, float %2729, float -0.000000e+00
  %2735 = fadd contract float %2723, %2734
  %2736 = select i1 %2732, float %2733, float -0.000000e+00
  %2737 = fadd contract float %2722, %2736
  %2738 = zext i1 %2732 to i32
  %2739 = add nuw nsw i32 %2720, %2738
  %2740 = add nuw nsw i32 %2721, 1
  %2741 = add i32 %2724, 1
  %2742 = icmp eq i32 %2741, %2570
  br i1 %2742, label %2743, label %2719, !llvm.loop !27

2743:                                             ; preds = %2710, %2719, %2565
  %2744 = phi float [ 0.000000e+00, %2565 ], [ %2711, %2710 ], [ %2735, %2719 ]
  %2745 = phi float [ 0.000000e+00, %2565 ], [ %2712, %2710 ], [ %2737, %2719 ]
  %2746 = phi i32 [ 0, %2565 ], [ %2713, %2710 ], [ %2739, %2719 ]
  %2747 = sitofp i32 %2746 to float
  %2748 = fdiv contract float %2744, %2747
  %2749 = fdiv contract float %2745, %2747
  %2750 = fmul contract float %2748, %2748
  %2751 = fsub contract float %2749, %2750
  %2752 = fcmp olt float %2751, 0x39F0000000000000
  %2753 = select i1 %2752, float 0x41F0000000000000, float 1.000000e+00
  %2754 = fmul float %2751, %2753
  %2755 = tail call float @llvm.sqrt.f32(float %2754)
  %2756 = bitcast float %2755 to i32
  %2757 = add nsw i32 %2756, -1
  %2758 = bitcast i32 %2757 to float
  %2759 = add nsw i32 %2756, 1
  %2760 = bitcast i32 %2759 to float
  %2761 = tail call i1 @llvm.amdgcn.class.f32(float %2754, i32 608)
  %2762 = select i1 %2752, float 0x3EF0000000000000, float 1.000000e+00
  %2763 = fneg float %2760
  %2764 = tail call float @llvm.fma.f32(float %2763, float %2755, float %2754)
  %2765 = fcmp ogt float %2764, 0.000000e+00
  %2766 = fneg float %2758
  %2767 = tail call float @llvm.fma.f32(float %2766, float %2755, float %2754)
  %2768 = fcmp ole float %2767, 0.000000e+00
  %2769 = select i1 %2768, float %2758, float %2755
  %2770 = select i1 %2765, float %2760, float %2769
  %2771 = fmul float %2762, %2770
  %2772 = select i1 %2761, float %2754, float %2771
  %2773 = fmul contract float %2772, 2.000000e+00
  %2774 = fsub contract float %2748, %2536
  %2775 = tail call float @llvm.fabs.f32(float %2774)
  %2776 = fcmp contract ogt float %2775, 0x3EB0C6F7A0000000
  br i1 %2776, label %2777, label %4399, !llvm.loop !15

2777:                                             ; preds = %2743
  br i1 %13, label %2955, label %2778

2778:                                             ; preds = %2777
  %2779 = fadd contract float %2748, %2773
  %2780 = fsub contract float %2748, %2773
  %2781 = add i32 %1, -1
  %2782 = and i32 %1, 7
  %2783 = icmp ult i32 %2781, 7
  br i1 %2783, label %2922, label %2784

2784:                                             ; preds = %2778
  %2785 = and i32 %1, -8
  br label %2786

2786:                                             ; preds = %2786, %2784
  %2787 = phi i32 [ 0, %2784 ], [ %2918, %2786 ]
  %2788 = phi i32 [ 0, %2784 ], [ %2919, %2786 ]
  %2789 = phi float [ 0.000000e+00, %2784 ], [ %2916, %2786 ]
  %2790 = phi float [ 0.000000e+00, %2784 ], [ %2914, %2786 ]
  %2791 = phi i32 [ 0, %2784 ], [ %2920, %2786 ]
  %2792 = add nsw i32 %2788, %14
  %2793 = sext i32 %2792 to i64
  %2794 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2793
  %2795 = load i16, i16 addrspace(1)* %2794, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2796 = uitofp i16 %2795 to float
  %2797 = fcmp contract ogt float %2779, %2796
  %2798 = fcmp contract olt float %2780, %2796
  %2799 = and i1 %2797, %2798
  %2800 = fmul contract float %2796, %2796
  %2801 = select i1 %2799, float %2796, float -0.000000e+00
  %2802 = fadd contract float %2790, %2801
  %2803 = select i1 %2799, float %2800, float -0.000000e+00
  %2804 = fadd contract float %2789, %2803
  %2805 = zext i1 %2799 to i32
  %2806 = add nuw nsw i32 %2787, %2805
  %2807 = or i32 %2788, 1
  %2808 = add nsw i32 %2807, %14
  %2809 = sext i32 %2808 to i64
  %2810 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2809
  %2811 = load i16, i16 addrspace(1)* %2810, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2812 = uitofp i16 %2811 to float
  %2813 = fcmp contract ogt float %2779, %2812
  %2814 = fcmp contract olt float %2780, %2812
  %2815 = and i1 %2813, %2814
  %2816 = fmul contract float %2812, %2812
  %2817 = select i1 %2815, float %2812, float -0.000000e+00
  %2818 = fadd contract float %2802, %2817
  %2819 = select i1 %2815, float %2816, float -0.000000e+00
  %2820 = fadd contract float %2804, %2819
  %2821 = zext i1 %2815 to i32
  %2822 = add nuw nsw i32 %2806, %2821
  %2823 = or i32 %2788, 2
  %2824 = add nsw i32 %2823, %14
  %2825 = sext i32 %2824 to i64
  %2826 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2825
  %2827 = load i16, i16 addrspace(1)* %2826, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2828 = uitofp i16 %2827 to float
  %2829 = fcmp contract ogt float %2779, %2828
  %2830 = fcmp contract olt float %2780, %2828
  %2831 = and i1 %2829, %2830
  %2832 = fmul contract float %2828, %2828
  %2833 = select i1 %2831, float %2828, float -0.000000e+00
  %2834 = fadd contract float %2818, %2833
  %2835 = select i1 %2831, float %2832, float -0.000000e+00
  %2836 = fadd contract float %2820, %2835
  %2837 = zext i1 %2831 to i32
  %2838 = add nuw nsw i32 %2822, %2837
  %2839 = or i32 %2788, 3
  %2840 = add nsw i32 %2839, %14
  %2841 = sext i32 %2840 to i64
  %2842 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2841
  %2843 = load i16, i16 addrspace(1)* %2842, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2844 = uitofp i16 %2843 to float
  %2845 = fcmp contract ogt float %2779, %2844
  %2846 = fcmp contract olt float %2780, %2844
  %2847 = and i1 %2845, %2846
  %2848 = fmul contract float %2844, %2844
  %2849 = select i1 %2847, float %2844, float -0.000000e+00
  %2850 = fadd contract float %2834, %2849
  %2851 = select i1 %2847, float %2848, float -0.000000e+00
  %2852 = fadd contract float %2836, %2851
  %2853 = zext i1 %2847 to i32
  %2854 = add nuw nsw i32 %2838, %2853
  %2855 = or i32 %2788, 4
  %2856 = add nsw i32 %2855, %14
  %2857 = sext i32 %2856 to i64
  %2858 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2857
  %2859 = load i16, i16 addrspace(1)* %2858, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2860 = uitofp i16 %2859 to float
  %2861 = fcmp contract ogt float %2779, %2860
  %2862 = fcmp contract olt float %2780, %2860
  %2863 = and i1 %2861, %2862
  %2864 = fmul contract float %2860, %2860
  %2865 = select i1 %2863, float %2860, float -0.000000e+00
  %2866 = fadd contract float %2850, %2865
  %2867 = select i1 %2863, float %2864, float -0.000000e+00
  %2868 = fadd contract float %2852, %2867
  %2869 = zext i1 %2863 to i32
  %2870 = add nuw nsw i32 %2854, %2869
  %2871 = or i32 %2788, 5
  %2872 = add nsw i32 %2871, %14
  %2873 = sext i32 %2872 to i64
  %2874 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2873
  %2875 = load i16, i16 addrspace(1)* %2874, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2876 = uitofp i16 %2875 to float
  %2877 = fcmp contract ogt float %2779, %2876
  %2878 = fcmp contract olt float %2780, %2876
  %2879 = and i1 %2877, %2878
  %2880 = fmul contract float %2876, %2876
  %2881 = select i1 %2879, float %2876, float -0.000000e+00
  %2882 = fadd contract float %2866, %2881
  %2883 = select i1 %2879, float %2880, float -0.000000e+00
  %2884 = fadd contract float %2868, %2883
  %2885 = zext i1 %2879 to i32
  %2886 = add nuw nsw i32 %2870, %2885
  %2887 = or i32 %2788, 6
  %2888 = add nsw i32 %2887, %14
  %2889 = sext i32 %2888 to i64
  %2890 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2889
  %2891 = load i16, i16 addrspace(1)* %2890, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2892 = uitofp i16 %2891 to float
  %2893 = fcmp contract ogt float %2779, %2892
  %2894 = fcmp contract olt float %2780, %2892
  %2895 = and i1 %2893, %2894
  %2896 = fmul contract float %2892, %2892
  %2897 = select i1 %2895, float %2892, float -0.000000e+00
  %2898 = fadd contract float %2882, %2897
  %2899 = select i1 %2895, float %2896, float -0.000000e+00
  %2900 = fadd contract float %2884, %2899
  %2901 = zext i1 %2895 to i32
  %2902 = add nuw nsw i32 %2886, %2901
  %2903 = or i32 %2788, 7
  %2904 = add nsw i32 %2903, %14
  %2905 = sext i32 %2904 to i64
  %2906 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2905
  %2907 = load i16, i16 addrspace(1)* %2906, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2908 = uitofp i16 %2907 to float
  %2909 = fcmp contract ogt float %2779, %2908
  %2910 = fcmp contract olt float %2780, %2908
  %2911 = and i1 %2909, %2910
  %2912 = fmul contract float %2908, %2908
  %2913 = select i1 %2911, float %2908, float -0.000000e+00
  %2914 = fadd contract float %2898, %2913
  %2915 = select i1 %2911, float %2912, float -0.000000e+00
  %2916 = fadd contract float %2900, %2915
  %2917 = zext i1 %2911 to i32
  %2918 = add nuw nsw i32 %2902, %2917
  %2919 = add nuw nsw i32 %2788, 8
  %2920 = add i32 %2791, 8
  %2921 = icmp eq i32 %2920, %2785
  br i1 %2921, label %2922, label %2786, !llvm.loop !11

2922:                                             ; preds = %2786, %2778
  %2923 = phi float [ undef, %2778 ], [ %2914, %2786 ]
  %2924 = phi float [ undef, %2778 ], [ %2916, %2786 ]
  %2925 = phi i32 [ undef, %2778 ], [ %2918, %2786 ]
  %2926 = phi i32 [ 0, %2778 ], [ %2918, %2786 ]
  %2927 = phi i32 [ 0, %2778 ], [ %2919, %2786 ]
  %2928 = phi float [ 0.000000e+00, %2778 ], [ %2916, %2786 ]
  %2929 = phi float [ 0.000000e+00, %2778 ], [ %2914, %2786 ]
  %2930 = icmp eq i32 %2782, 0
  br i1 %2930, label %2955, label %2931

2931:                                             ; preds = %2922, %2931
  %2932 = phi i32 [ %2951, %2931 ], [ %2926, %2922 ]
  %2933 = phi i32 [ %2952, %2931 ], [ %2927, %2922 ]
  %2934 = phi float [ %2949, %2931 ], [ %2928, %2922 ]
  %2935 = phi float [ %2947, %2931 ], [ %2929, %2922 ]
  %2936 = phi i32 [ %2953, %2931 ], [ 0, %2922 ]
  %2937 = add nsw i32 %2933, %14
  %2938 = sext i32 %2937 to i64
  %2939 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %2938
  %2940 = load i16, i16 addrspace(1)* %2939, align 2, !tbaa !7, !amdgpu.noclobber !5
  %2941 = uitofp i16 %2940 to float
  %2942 = fcmp contract ogt float %2779, %2941
  %2943 = fcmp contract olt float %2780, %2941
  %2944 = and i1 %2942, %2943
  %2945 = fmul contract float %2941, %2941
  %2946 = select i1 %2944, float %2941, float -0.000000e+00
  %2947 = fadd contract float %2935, %2946
  %2948 = select i1 %2944, float %2945, float -0.000000e+00
  %2949 = fadd contract float %2934, %2948
  %2950 = zext i1 %2944 to i32
  %2951 = add nuw nsw i32 %2932, %2950
  %2952 = add nuw nsw i32 %2933, 1
  %2953 = add i32 %2936, 1
  %2954 = icmp eq i32 %2953, %2782
  br i1 %2954, label %2955, label %2931, !llvm.loop !28

2955:                                             ; preds = %2922, %2931, %2777
  %2956 = phi float [ 0.000000e+00, %2777 ], [ %2923, %2922 ], [ %2947, %2931 ]
  %2957 = phi float [ 0.000000e+00, %2777 ], [ %2924, %2922 ], [ %2949, %2931 ]
  %2958 = phi i32 [ 0, %2777 ], [ %2925, %2922 ], [ %2951, %2931 ]
  %2959 = sitofp i32 %2958 to float
  %2960 = fdiv contract float %2956, %2959
  %2961 = fdiv contract float %2957, %2959
  %2962 = fmul contract float %2960, %2960
  %2963 = fsub contract float %2961, %2962
  %2964 = fcmp olt float %2963, 0x39F0000000000000
  %2965 = select i1 %2964, float 0x41F0000000000000, float 1.000000e+00
  %2966 = fmul float %2963, %2965
  %2967 = tail call float @llvm.sqrt.f32(float %2966)
  %2968 = bitcast float %2967 to i32
  %2969 = add nsw i32 %2968, -1
  %2970 = bitcast i32 %2969 to float
  %2971 = add nsw i32 %2968, 1
  %2972 = bitcast i32 %2971 to float
  %2973 = tail call i1 @llvm.amdgcn.class.f32(float %2966, i32 608)
  %2974 = select i1 %2964, float 0x3EF0000000000000, float 1.000000e+00
  %2975 = fneg float %2972
  %2976 = tail call float @llvm.fma.f32(float %2975, float %2967, float %2966)
  %2977 = fcmp ogt float %2976, 0.000000e+00
  %2978 = fneg float %2970
  %2979 = tail call float @llvm.fma.f32(float %2978, float %2967, float %2966)
  %2980 = fcmp ole float %2979, 0.000000e+00
  %2981 = select i1 %2980, float %2970, float %2967
  %2982 = select i1 %2977, float %2972, float %2981
  %2983 = fmul float %2974, %2982
  %2984 = select i1 %2973, float %2966, float %2983
  %2985 = fmul contract float %2984, 2.000000e+00
  %2986 = fsub contract float %2960, %2748
  %2987 = tail call float @llvm.fabs.f32(float %2986)
  %2988 = fcmp contract ogt float %2987, 0x3EB0C6F7A0000000
  br i1 %2988, label %2989, label %4399, !llvm.loop !15

2989:                                             ; preds = %2955
  br i1 %13, label %3167, label %2990

2990:                                             ; preds = %2989
  %2991 = fadd contract float %2960, %2985
  %2992 = fsub contract float %2960, %2985
  %2993 = add i32 %1, -1
  %2994 = and i32 %1, 7
  %2995 = icmp ult i32 %2993, 7
  br i1 %2995, label %3134, label %2996

2996:                                             ; preds = %2990
  %2997 = and i32 %1, -8
  br label %2998

2998:                                             ; preds = %2998, %2996
  %2999 = phi i32 [ 0, %2996 ], [ %3130, %2998 ]
  %3000 = phi i32 [ 0, %2996 ], [ %3131, %2998 ]
  %3001 = phi float [ 0.000000e+00, %2996 ], [ %3128, %2998 ]
  %3002 = phi float [ 0.000000e+00, %2996 ], [ %3126, %2998 ]
  %3003 = phi i32 [ 0, %2996 ], [ %3132, %2998 ]
  %3004 = add nsw i32 %3000, %14
  %3005 = sext i32 %3004 to i64
  %3006 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3005
  %3007 = load i16, i16 addrspace(1)* %3006, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3008 = uitofp i16 %3007 to float
  %3009 = fcmp contract ogt float %2991, %3008
  %3010 = fcmp contract olt float %2992, %3008
  %3011 = and i1 %3009, %3010
  %3012 = fmul contract float %3008, %3008
  %3013 = select i1 %3011, float %3008, float -0.000000e+00
  %3014 = fadd contract float %3002, %3013
  %3015 = select i1 %3011, float %3012, float -0.000000e+00
  %3016 = fadd contract float %3001, %3015
  %3017 = zext i1 %3011 to i32
  %3018 = add nuw nsw i32 %2999, %3017
  %3019 = or i32 %3000, 1
  %3020 = add nsw i32 %3019, %14
  %3021 = sext i32 %3020 to i64
  %3022 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3021
  %3023 = load i16, i16 addrspace(1)* %3022, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3024 = uitofp i16 %3023 to float
  %3025 = fcmp contract ogt float %2991, %3024
  %3026 = fcmp contract olt float %2992, %3024
  %3027 = and i1 %3025, %3026
  %3028 = fmul contract float %3024, %3024
  %3029 = select i1 %3027, float %3024, float -0.000000e+00
  %3030 = fadd contract float %3014, %3029
  %3031 = select i1 %3027, float %3028, float -0.000000e+00
  %3032 = fadd contract float %3016, %3031
  %3033 = zext i1 %3027 to i32
  %3034 = add nuw nsw i32 %3018, %3033
  %3035 = or i32 %3000, 2
  %3036 = add nsw i32 %3035, %14
  %3037 = sext i32 %3036 to i64
  %3038 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3037
  %3039 = load i16, i16 addrspace(1)* %3038, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3040 = uitofp i16 %3039 to float
  %3041 = fcmp contract ogt float %2991, %3040
  %3042 = fcmp contract olt float %2992, %3040
  %3043 = and i1 %3041, %3042
  %3044 = fmul contract float %3040, %3040
  %3045 = select i1 %3043, float %3040, float -0.000000e+00
  %3046 = fadd contract float %3030, %3045
  %3047 = select i1 %3043, float %3044, float -0.000000e+00
  %3048 = fadd contract float %3032, %3047
  %3049 = zext i1 %3043 to i32
  %3050 = add nuw nsw i32 %3034, %3049
  %3051 = or i32 %3000, 3
  %3052 = add nsw i32 %3051, %14
  %3053 = sext i32 %3052 to i64
  %3054 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3053
  %3055 = load i16, i16 addrspace(1)* %3054, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3056 = uitofp i16 %3055 to float
  %3057 = fcmp contract ogt float %2991, %3056
  %3058 = fcmp contract olt float %2992, %3056
  %3059 = and i1 %3057, %3058
  %3060 = fmul contract float %3056, %3056
  %3061 = select i1 %3059, float %3056, float -0.000000e+00
  %3062 = fadd contract float %3046, %3061
  %3063 = select i1 %3059, float %3060, float -0.000000e+00
  %3064 = fadd contract float %3048, %3063
  %3065 = zext i1 %3059 to i32
  %3066 = add nuw nsw i32 %3050, %3065
  %3067 = or i32 %3000, 4
  %3068 = add nsw i32 %3067, %14
  %3069 = sext i32 %3068 to i64
  %3070 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3069
  %3071 = load i16, i16 addrspace(1)* %3070, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3072 = uitofp i16 %3071 to float
  %3073 = fcmp contract ogt float %2991, %3072
  %3074 = fcmp contract olt float %2992, %3072
  %3075 = and i1 %3073, %3074
  %3076 = fmul contract float %3072, %3072
  %3077 = select i1 %3075, float %3072, float -0.000000e+00
  %3078 = fadd contract float %3062, %3077
  %3079 = select i1 %3075, float %3076, float -0.000000e+00
  %3080 = fadd contract float %3064, %3079
  %3081 = zext i1 %3075 to i32
  %3082 = add nuw nsw i32 %3066, %3081
  %3083 = or i32 %3000, 5
  %3084 = add nsw i32 %3083, %14
  %3085 = sext i32 %3084 to i64
  %3086 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3085
  %3087 = load i16, i16 addrspace(1)* %3086, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3088 = uitofp i16 %3087 to float
  %3089 = fcmp contract ogt float %2991, %3088
  %3090 = fcmp contract olt float %2992, %3088
  %3091 = and i1 %3089, %3090
  %3092 = fmul contract float %3088, %3088
  %3093 = select i1 %3091, float %3088, float -0.000000e+00
  %3094 = fadd contract float %3078, %3093
  %3095 = select i1 %3091, float %3092, float -0.000000e+00
  %3096 = fadd contract float %3080, %3095
  %3097 = zext i1 %3091 to i32
  %3098 = add nuw nsw i32 %3082, %3097
  %3099 = or i32 %3000, 6
  %3100 = add nsw i32 %3099, %14
  %3101 = sext i32 %3100 to i64
  %3102 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3101
  %3103 = load i16, i16 addrspace(1)* %3102, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3104 = uitofp i16 %3103 to float
  %3105 = fcmp contract ogt float %2991, %3104
  %3106 = fcmp contract olt float %2992, %3104
  %3107 = and i1 %3105, %3106
  %3108 = fmul contract float %3104, %3104
  %3109 = select i1 %3107, float %3104, float -0.000000e+00
  %3110 = fadd contract float %3094, %3109
  %3111 = select i1 %3107, float %3108, float -0.000000e+00
  %3112 = fadd contract float %3096, %3111
  %3113 = zext i1 %3107 to i32
  %3114 = add nuw nsw i32 %3098, %3113
  %3115 = or i32 %3000, 7
  %3116 = add nsw i32 %3115, %14
  %3117 = sext i32 %3116 to i64
  %3118 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3117
  %3119 = load i16, i16 addrspace(1)* %3118, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3120 = uitofp i16 %3119 to float
  %3121 = fcmp contract ogt float %2991, %3120
  %3122 = fcmp contract olt float %2992, %3120
  %3123 = and i1 %3121, %3122
  %3124 = fmul contract float %3120, %3120
  %3125 = select i1 %3123, float %3120, float -0.000000e+00
  %3126 = fadd contract float %3110, %3125
  %3127 = select i1 %3123, float %3124, float -0.000000e+00
  %3128 = fadd contract float %3112, %3127
  %3129 = zext i1 %3123 to i32
  %3130 = add nuw nsw i32 %3114, %3129
  %3131 = add nuw nsw i32 %3000, 8
  %3132 = add i32 %3003, 8
  %3133 = icmp eq i32 %3132, %2997
  br i1 %3133, label %3134, label %2998, !llvm.loop !11

3134:                                             ; preds = %2998, %2990
  %3135 = phi float [ undef, %2990 ], [ %3126, %2998 ]
  %3136 = phi float [ undef, %2990 ], [ %3128, %2998 ]
  %3137 = phi i32 [ undef, %2990 ], [ %3130, %2998 ]
  %3138 = phi i32 [ 0, %2990 ], [ %3130, %2998 ]
  %3139 = phi i32 [ 0, %2990 ], [ %3131, %2998 ]
  %3140 = phi float [ 0.000000e+00, %2990 ], [ %3128, %2998 ]
  %3141 = phi float [ 0.000000e+00, %2990 ], [ %3126, %2998 ]
  %3142 = icmp eq i32 %2994, 0
  br i1 %3142, label %3167, label %3143

3143:                                             ; preds = %3134, %3143
  %3144 = phi i32 [ %3163, %3143 ], [ %3138, %3134 ]
  %3145 = phi i32 [ %3164, %3143 ], [ %3139, %3134 ]
  %3146 = phi float [ %3161, %3143 ], [ %3140, %3134 ]
  %3147 = phi float [ %3159, %3143 ], [ %3141, %3134 ]
  %3148 = phi i32 [ %3165, %3143 ], [ 0, %3134 ]
  %3149 = add nsw i32 %3145, %14
  %3150 = sext i32 %3149 to i64
  %3151 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3150
  %3152 = load i16, i16 addrspace(1)* %3151, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3153 = uitofp i16 %3152 to float
  %3154 = fcmp contract ogt float %2991, %3153
  %3155 = fcmp contract olt float %2992, %3153
  %3156 = and i1 %3154, %3155
  %3157 = fmul contract float %3153, %3153
  %3158 = select i1 %3156, float %3153, float -0.000000e+00
  %3159 = fadd contract float %3147, %3158
  %3160 = select i1 %3156, float %3157, float -0.000000e+00
  %3161 = fadd contract float %3146, %3160
  %3162 = zext i1 %3156 to i32
  %3163 = add nuw nsw i32 %3144, %3162
  %3164 = add nuw nsw i32 %3145, 1
  %3165 = add i32 %3148, 1
  %3166 = icmp eq i32 %3165, %2994
  br i1 %3166, label %3167, label %3143, !llvm.loop !29

3167:                                             ; preds = %3134, %3143, %2989
  %3168 = phi float [ 0.000000e+00, %2989 ], [ %3135, %3134 ], [ %3159, %3143 ]
  %3169 = phi float [ 0.000000e+00, %2989 ], [ %3136, %3134 ], [ %3161, %3143 ]
  %3170 = phi i32 [ 0, %2989 ], [ %3137, %3134 ], [ %3163, %3143 ]
  %3171 = sitofp i32 %3170 to float
  %3172 = fdiv contract float %3168, %3171
  %3173 = fdiv contract float %3169, %3171
  %3174 = fmul contract float %3172, %3172
  %3175 = fsub contract float %3173, %3174
  %3176 = fcmp olt float %3175, 0x39F0000000000000
  %3177 = select i1 %3176, float 0x41F0000000000000, float 1.000000e+00
  %3178 = fmul float %3175, %3177
  %3179 = tail call float @llvm.sqrt.f32(float %3178)
  %3180 = bitcast float %3179 to i32
  %3181 = add nsw i32 %3180, -1
  %3182 = bitcast i32 %3181 to float
  %3183 = add nsw i32 %3180, 1
  %3184 = bitcast i32 %3183 to float
  %3185 = tail call i1 @llvm.amdgcn.class.f32(float %3178, i32 608)
  %3186 = select i1 %3176, float 0x3EF0000000000000, float 1.000000e+00
  %3187 = fneg float %3184
  %3188 = tail call float @llvm.fma.f32(float %3187, float %3179, float %3178)
  %3189 = fcmp ogt float %3188, 0.000000e+00
  %3190 = fneg float %3182
  %3191 = tail call float @llvm.fma.f32(float %3190, float %3179, float %3178)
  %3192 = fcmp ole float %3191, 0.000000e+00
  %3193 = select i1 %3192, float %3182, float %3179
  %3194 = select i1 %3189, float %3184, float %3193
  %3195 = fmul float %3186, %3194
  %3196 = select i1 %3185, float %3178, float %3195
  %3197 = fmul contract float %3196, 2.000000e+00
  %3198 = fsub contract float %3172, %2960
  %3199 = tail call float @llvm.fabs.f32(float %3198)
  %3200 = fcmp contract ogt float %3199, 0x3EB0C6F7A0000000
  br i1 %3200, label %3201, label %4399, !llvm.loop !15

3201:                                             ; preds = %3167
  br i1 %13, label %3379, label %3202

3202:                                             ; preds = %3201
  %3203 = fadd contract float %3172, %3197
  %3204 = fsub contract float %3172, %3197
  %3205 = add i32 %1, -1
  %3206 = and i32 %1, 7
  %3207 = icmp ult i32 %3205, 7
  br i1 %3207, label %3346, label %3208

3208:                                             ; preds = %3202
  %3209 = and i32 %1, -8
  br label %3210

3210:                                             ; preds = %3210, %3208
  %3211 = phi i32 [ 0, %3208 ], [ %3342, %3210 ]
  %3212 = phi i32 [ 0, %3208 ], [ %3343, %3210 ]
  %3213 = phi float [ 0.000000e+00, %3208 ], [ %3340, %3210 ]
  %3214 = phi float [ 0.000000e+00, %3208 ], [ %3338, %3210 ]
  %3215 = phi i32 [ 0, %3208 ], [ %3344, %3210 ]
  %3216 = add nsw i32 %3212, %14
  %3217 = sext i32 %3216 to i64
  %3218 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3217
  %3219 = load i16, i16 addrspace(1)* %3218, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3220 = uitofp i16 %3219 to float
  %3221 = fcmp contract ogt float %3203, %3220
  %3222 = fcmp contract olt float %3204, %3220
  %3223 = and i1 %3221, %3222
  %3224 = fmul contract float %3220, %3220
  %3225 = select i1 %3223, float %3220, float -0.000000e+00
  %3226 = fadd contract float %3214, %3225
  %3227 = select i1 %3223, float %3224, float -0.000000e+00
  %3228 = fadd contract float %3213, %3227
  %3229 = zext i1 %3223 to i32
  %3230 = add nuw nsw i32 %3211, %3229
  %3231 = or i32 %3212, 1
  %3232 = add nsw i32 %3231, %14
  %3233 = sext i32 %3232 to i64
  %3234 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3233
  %3235 = load i16, i16 addrspace(1)* %3234, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3236 = uitofp i16 %3235 to float
  %3237 = fcmp contract ogt float %3203, %3236
  %3238 = fcmp contract olt float %3204, %3236
  %3239 = and i1 %3237, %3238
  %3240 = fmul contract float %3236, %3236
  %3241 = select i1 %3239, float %3236, float -0.000000e+00
  %3242 = fadd contract float %3226, %3241
  %3243 = select i1 %3239, float %3240, float -0.000000e+00
  %3244 = fadd contract float %3228, %3243
  %3245 = zext i1 %3239 to i32
  %3246 = add nuw nsw i32 %3230, %3245
  %3247 = or i32 %3212, 2
  %3248 = add nsw i32 %3247, %14
  %3249 = sext i32 %3248 to i64
  %3250 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3249
  %3251 = load i16, i16 addrspace(1)* %3250, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3252 = uitofp i16 %3251 to float
  %3253 = fcmp contract ogt float %3203, %3252
  %3254 = fcmp contract olt float %3204, %3252
  %3255 = and i1 %3253, %3254
  %3256 = fmul contract float %3252, %3252
  %3257 = select i1 %3255, float %3252, float -0.000000e+00
  %3258 = fadd contract float %3242, %3257
  %3259 = select i1 %3255, float %3256, float -0.000000e+00
  %3260 = fadd contract float %3244, %3259
  %3261 = zext i1 %3255 to i32
  %3262 = add nuw nsw i32 %3246, %3261
  %3263 = or i32 %3212, 3
  %3264 = add nsw i32 %3263, %14
  %3265 = sext i32 %3264 to i64
  %3266 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3265
  %3267 = load i16, i16 addrspace(1)* %3266, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3268 = uitofp i16 %3267 to float
  %3269 = fcmp contract ogt float %3203, %3268
  %3270 = fcmp contract olt float %3204, %3268
  %3271 = and i1 %3269, %3270
  %3272 = fmul contract float %3268, %3268
  %3273 = select i1 %3271, float %3268, float -0.000000e+00
  %3274 = fadd contract float %3258, %3273
  %3275 = select i1 %3271, float %3272, float -0.000000e+00
  %3276 = fadd contract float %3260, %3275
  %3277 = zext i1 %3271 to i32
  %3278 = add nuw nsw i32 %3262, %3277
  %3279 = or i32 %3212, 4
  %3280 = add nsw i32 %3279, %14
  %3281 = sext i32 %3280 to i64
  %3282 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3281
  %3283 = load i16, i16 addrspace(1)* %3282, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3284 = uitofp i16 %3283 to float
  %3285 = fcmp contract ogt float %3203, %3284
  %3286 = fcmp contract olt float %3204, %3284
  %3287 = and i1 %3285, %3286
  %3288 = fmul contract float %3284, %3284
  %3289 = select i1 %3287, float %3284, float -0.000000e+00
  %3290 = fadd contract float %3274, %3289
  %3291 = select i1 %3287, float %3288, float -0.000000e+00
  %3292 = fadd contract float %3276, %3291
  %3293 = zext i1 %3287 to i32
  %3294 = add nuw nsw i32 %3278, %3293
  %3295 = or i32 %3212, 5
  %3296 = add nsw i32 %3295, %14
  %3297 = sext i32 %3296 to i64
  %3298 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3297
  %3299 = load i16, i16 addrspace(1)* %3298, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3300 = uitofp i16 %3299 to float
  %3301 = fcmp contract ogt float %3203, %3300
  %3302 = fcmp contract olt float %3204, %3300
  %3303 = and i1 %3301, %3302
  %3304 = fmul contract float %3300, %3300
  %3305 = select i1 %3303, float %3300, float -0.000000e+00
  %3306 = fadd contract float %3290, %3305
  %3307 = select i1 %3303, float %3304, float -0.000000e+00
  %3308 = fadd contract float %3292, %3307
  %3309 = zext i1 %3303 to i32
  %3310 = add nuw nsw i32 %3294, %3309
  %3311 = or i32 %3212, 6
  %3312 = add nsw i32 %3311, %14
  %3313 = sext i32 %3312 to i64
  %3314 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3313
  %3315 = load i16, i16 addrspace(1)* %3314, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3316 = uitofp i16 %3315 to float
  %3317 = fcmp contract ogt float %3203, %3316
  %3318 = fcmp contract olt float %3204, %3316
  %3319 = and i1 %3317, %3318
  %3320 = fmul contract float %3316, %3316
  %3321 = select i1 %3319, float %3316, float -0.000000e+00
  %3322 = fadd contract float %3306, %3321
  %3323 = select i1 %3319, float %3320, float -0.000000e+00
  %3324 = fadd contract float %3308, %3323
  %3325 = zext i1 %3319 to i32
  %3326 = add nuw nsw i32 %3310, %3325
  %3327 = or i32 %3212, 7
  %3328 = add nsw i32 %3327, %14
  %3329 = sext i32 %3328 to i64
  %3330 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3329
  %3331 = load i16, i16 addrspace(1)* %3330, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3332 = uitofp i16 %3331 to float
  %3333 = fcmp contract ogt float %3203, %3332
  %3334 = fcmp contract olt float %3204, %3332
  %3335 = and i1 %3333, %3334
  %3336 = fmul contract float %3332, %3332
  %3337 = select i1 %3335, float %3332, float -0.000000e+00
  %3338 = fadd contract float %3322, %3337
  %3339 = select i1 %3335, float %3336, float -0.000000e+00
  %3340 = fadd contract float %3324, %3339
  %3341 = zext i1 %3335 to i32
  %3342 = add nuw nsw i32 %3326, %3341
  %3343 = add nuw nsw i32 %3212, 8
  %3344 = add i32 %3215, 8
  %3345 = icmp eq i32 %3344, %3209
  br i1 %3345, label %3346, label %3210, !llvm.loop !11

3346:                                             ; preds = %3210, %3202
  %3347 = phi float [ undef, %3202 ], [ %3338, %3210 ]
  %3348 = phi float [ undef, %3202 ], [ %3340, %3210 ]
  %3349 = phi i32 [ undef, %3202 ], [ %3342, %3210 ]
  %3350 = phi i32 [ 0, %3202 ], [ %3342, %3210 ]
  %3351 = phi i32 [ 0, %3202 ], [ %3343, %3210 ]
  %3352 = phi float [ 0.000000e+00, %3202 ], [ %3340, %3210 ]
  %3353 = phi float [ 0.000000e+00, %3202 ], [ %3338, %3210 ]
  %3354 = icmp eq i32 %3206, 0
  br i1 %3354, label %3379, label %3355

3355:                                             ; preds = %3346, %3355
  %3356 = phi i32 [ %3375, %3355 ], [ %3350, %3346 ]
  %3357 = phi i32 [ %3376, %3355 ], [ %3351, %3346 ]
  %3358 = phi float [ %3373, %3355 ], [ %3352, %3346 ]
  %3359 = phi float [ %3371, %3355 ], [ %3353, %3346 ]
  %3360 = phi i32 [ %3377, %3355 ], [ 0, %3346 ]
  %3361 = add nsw i32 %3357, %14
  %3362 = sext i32 %3361 to i64
  %3363 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3362
  %3364 = load i16, i16 addrspace(1)* %3363, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3365 = uitofp i16 %3364 to float
  %3366 = fcmp contract ogt float %3203, %3365
  %3367 = fcmp contract olt float %3204, %3365
  %3368 = and i1 %3366, %3367
  %3369 = fmul contract float %3365, %3365
  %3370 = select i1 %3368, float %3365, float -0.000000e+00
  %3371 = fadd contract float %3359, %3370
  %3372 = select i1 %3368, float %3369, float -0.000000e+00
  %3373 = fadd contract float %3358, %3372
  %3374 = zext i1 %3368 to i32
  %3375 = add nuw nsw i32 %3356, %3374
  %3376 = add nuw nsw i32 %3357, 1
  %3377 = add i32 %3360, 1
  %3378 = icmp eq i32 %3377, %3206
  br i1 %3378, label %3379, label %3355, !llvm.loop !30

3379:                                             ; preds = %3346, %3355, %3201
  %3380 = phi float [ 0.000000e+00, %3201 ], [ %3347, %3346 ], [ %3371, %3355 ]
  %3381 = phi float [ 0.000000e+00, %3201 ], [ %3348, %3346 ], [ %3373, %3355 ]
  %3382 = phi i32 [ 0, %3201 ], [ %3349, %3346 ], [ %3375, %3355 ]
  %3383 = sitofp i32 %3382 to float
  %3384 = fdiv contract float %3380, %3383
  %3385 = fdiv contract float %3381, %3383
  %3386 = fmul contract float %3384, %3384
  %3387 = fsub contract float %3385, %3386
  %3388 = fcmp olt float %3387, 0x39F0000000000000
  %3389 = select i1 %3388, float 0x41F0000000000000, float 1.000000e+00
  %3390 = fmul float %3387, %3389
  %3391 = tail call float @llvm.sqrt.f32(float %3390)
  %3392 = bitcast float %3391 to i32
  %3393 = add nsw i32 %3392, -1
  %3394 = bitcast i32 %3393 to float
  %3395 = add nsw i32 %3392, 1
  %3396 = bitcast i32 %3395 to float
  %3397 = tail call i1 @llvm.amdgcn.class.f32(float %3390, i32 608)
  %3398 = select i1 %3388, float 0x3EF0000000000000, float 1.000000e+00
  %3399 = fneg float %3396
  %3400 = tail call float @llvm.fma.f32(float %3399, float %3391, float %3390)
  %3401 = fcmp ogt float %3400, 0.000000e+00
  %3402 = fneg float %3394
  %3403 = tail call float @llvm.fma.f32(float %3402, float %3391, float %3390)
  %3404 = fcmp ole float %3403, 0.000000e+00
  %3405 = select i1 %3404, float %3394, float %3391
  %3406 = select i1 %3401, float %3396, float %3405
  %3407 = fmul float %3398, %3406
  %3408 = select i1 %3397, float %3390, float %3407
  %3409 = fmul contract float %3408, 2.000000e+00
  %3410 = fsub contract float %3384, %3172
  %3411 = tail call float @llvm.fabs.f32(float %3410)
  %3412 = fcmp contract ogt float %3411, 0x3EB0C6F7A0000000
  br i1 %3412, label %3413, label %4399, !llvm.loop !15

3413:                                             ; preds = %3379
  br i1 %13, label %3591, label %3414

3414:                                             ; preds = %3413
  %3415 = fadd contract float %3384, %3409
  %3416 = fsub contract float %3384, %3409
  %3417 = add i32 %1, -1
  %3418 = and i32 %1, 7
  %3419 = icmp ult i32 %3417, 7
  br i1 %3419, label %3558, label %3420

3420:                                             ; preds = %3414
  %3421 = and i32 %1, -8
  br label %3422

3422:                                             ; preds = %3422, %3420
  %3423 = phi i32 [ 0, %3420 ], [ %3554, %3422 ]
  %3424 = phi i32 [ 0, %3420 ], [ %3555, %3422 ]
  %3425 = phi float [ 0.000000e+00, %3420 ], [ %3552, %3422 ]
  %3426 = phi float [ 0.000000e+00, %3420 ], [ %3550, %3422 ]
  %3427 = phi i32 [ 0, %3420 ], [ %3556, %3422 ]
  %3428 = add nsw i32 %3424, %14
  %3429 = sext i32 %3428 to i64
  %3430 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3429
  %3431 = load i16, i16 addrspace(1)* %3430, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3432 = uitofp i16 %3431 to float
  %3433 = fcmp contract ogt float %3415, %3432
  %3434 = fcmp contract olt float %3416, %3432
  %3435 = and i1 %3433, %3434
  %3436 = fmul contract float %3432, %3432
  %3437 = select i1 %3435, float %3432, float -0.000000e+00
  %3438 = fadd contract float %3426, %3437
  %3439 = select i1 %3435, float %3436, float -0.000000e+00
  %3440 = fadd contract float %3425, %3439
  %3441 = zext i1 %3435 to i32
  %3442 = add nuw nsw i32 %3423, %3441
  %3443 = or i32 %3424, 1
  %3444 = add nsw i32 %3443, %14
  %3445 = sext i32 %3444 to i64
  %3446 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3445
  %3447 = load i16, i16 addrspace(1)* %3446, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3448 = uitofp i16 %3447 to float
  %3449 = fcmp contract ogt float %3415, %3448
  %3450 = fcmp contract olt float %3416, %3448
  %3451 = and i1 %3449, %3450
  %3452 = fmul contract float %3448, %3448
  %3453 = select i1 %3451, float %3448, float -0.000000e+00
  %3454 = fadd contract float %3438, %3453
  %3455 = select i1 %3451, float %3452, float -0.000000e+00
  %3456 = fadd contract float %3440, %3455
  %3457 = zext i1 %3451 to i32
  %3458 = add nuw nsw i32 %3442, %3457
  %3459 = or i32 %3424, 2
  %3460 = add nsw i32 %3459, %14
  %3461 = sext i32 %3460 to i64
  %3462 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3461
  %3463 = load i16, i16 addrspace(1)* %3462, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3464 = uitofp i16 %3463 to float
  %3465 = fcmp contract ogt float %3415, %3464
  %3466 = fcmp contract olt float %3416, %3464
  %3467 = and i1 %3465, %3466
  %3468 = fmul contract float %3464, %3464
  %3469 = select i1 %3467, float %3464, float -0.000000e+00
  %3470 = fadd contract float %3454, %3469
  %3471 = select i1 %3467, float %3468, float -0.000000e+00
  %3472 = fadd contract float %3456, %3471
  %3473 = zext i1 %3467 to i32
  %3474 = add nuw nsw i32 %3458, %3473
  %3475 = or i32 %3424, 3
  %3476 = add nsw i32 %3475, %14
  %3477 = sext i32 %3476 to i64
  %3478 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3477
  %3479 = load i16, i16 addrspace(1)* %3478, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3480 = uitofp i16 %3479 to float
  %3481 = fcmp contract ogt float %3415, %3480
  %3482 = fcmp contract olt float %3416, %3480
  %3483 = and i1 %3481, %3482
  %3484 = fmul contract float %3480, %3480
  %3485 = select i1 %3483, float %3480, float -0.000000e+00
  %3486 = fadd contract float %3470, %3485
  %3487 = select i1 %3483, float %3484, float -0.000000e+00
  %3488 = fadd contract float %3472, %3487
  %3489 = zext i1 %3483 to i32
  %3490 = add nuw nsw i32 %3474, %3489
  %3491 = or i32 %3424, 4
  %3492 = add nsw i32 %3491, %14
  %3493 = sext i32 %3492 to i64
  %3494 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3493
  %3495 = load i16, i16 addrspace(1)* %3494, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3496 = uitofp i16 %3495 to float
  %3497 = fcmp contract ogt float %3415, %3496
  %3498 = fcmp contract olt float %3416, %3496
  %3499 = and i1 %3497, %3498
  %3500 = fmul contract float %3496, %3496
  %3501 = select i1 %3499, float %3496, float -0.000000e+00
  %3502 = fadd contract float %3486, %3501
  %3503 = select i1 %3499, float %3500, float -0.000000e+00
  %3504 = fadd contract float %3488, %3503
  %3505 = zext i1 %3499 to i32
  %3506 = add nuw nsw i32 %3490, %3505
  %3507 = or i32 %3424, 5
  %3508 = add nsw i32 %3507, %14
  %3509 = sext i32 %3508 to i64
  %3510 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3509
  %3511 = load i16, i16 addrspace(1)* %3510, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3512 = uitofp i16 %3511 to float
  %3513 = fcmp contract ogt float %3415, %3512
  %3514 = fcmp contract olt float %3416, %3512
  %3515 = and i1 %3513, %3514
  %3516 = fmul contract float %3512, %3512
  %3517 = select i1 %3515, float %3512, float -0.000000e+00
  %3518 = fadd contract float %3502, %3517
  %3519 = select i1 %3515, float %3516, float -0.000000e+00
  %3520 = fadd contract float %3504, %3519
  %3521 = zext i1 %3515 to i32
  %3522 = add nuw nsw i32 %3506, %3521
  %3523 = or i32 %3424, 6
  %3524 = add nsw i32 %3523, %14
  %3525 = sext i32 %3524 to i64
  %3526 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3525
  %3527 = load i16, i16 addrspace(1)* %3526, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3528 = uitofp i16 %3527 to float
  %3529 = fcmp contract ogt float %3415, %3528
  %3530 = fcmp contract olt float %3416, %3528
  %3531 = and i1 %3529, %3530
  %3532 = fmul contract float %3528, %3528
  %3533 = select i1 %3531, float %3528, float -0.000000e+00
  %3534 = fadd contract float %3518, %3533
  %3535 = select i1 %3531, float %3532, float -0.000000e+00
  %3536 = fadd contract float %3520, %3535
  %3537 = zext i1 %3531 to i32
  %3538 = add nuw nsw i32 %3522, %3537
  %3539 = or i32 %3424, 7
  %3540 = add nsw i32 %3539, %14
  %3541 = sext i32 %3540 to i64
  %3542 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3541
  %3543 = load i16, i16 addrspace(1)* %3542, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3544 = uitofp i16 %3543 to float
  %3545 = fcmp contract ogt float %3415, %3544
  %3546 = fcmp contract olt float %3416, %3544
  %3547 = and i1 %3545, %3546
  %3548 = fmul contract float %3544, %3544
  %3549 = select i1 %3547, float %3544, float -0.000000e+00
  %3550 = fadd contract float %3534, %3549
  %3551 = select i1 %3547, float %3548, float -0.000000e+00
  %3552 = fadd contract float %3536, %3551
  %3553 = zext i1 %3547 to i32
  %3554 = add nuw nsw i32 %3538, %3553
  %3555 = add nuw nsw i32 %3424, 8
  %3556 = add i32 %3427, 8
  %3557 = icmp eq i32 %3556, %3421
  br i1 %3557, label %3558, label %3422, !llvm.loop !11

3558:                                             ; preds = %3422, %3414
  %3559 = phi float [ undef, %3414 ], [ %3550, %3422 ]
  %3560 = phi float [ undef, %3414 ], [ %3552, %3422 ]
  %3561 = phi i32 [ undef, %3414 ], [ %3554, %3422 ]
  %3562 = phi i32 [ 0, %3414 ], [ %3554, %3422 ]
  %3563 = phi i32 [ 0, %3414 ], [ %3555, %3422 ]
  %3564 = phi float [ 0.000000e+00, %3414 ], [ %3552, %3422 ]
  %3565 = phi float [ 0.000000e+00, %3414 ], [ %3550, %3422 ]
  %3566 = icmp eq i32 %3418, 0
  br i1 %3566, label %3591, label %3567

3567:                                             ; preds = %3558, %3567
  %3568 = phi i32 [ %3587, %3567 ], [ %3562, %3558 ]
  %3569 = phi i32 [ %3588, %3567 ], [ %3563, %3558 ]
  %3570 = phi float [ %3585, %3567 ], [ %3564, %3558 ]
  %3571 = phi float [ %3583, %3567 ], [ %3565, %3558 ]
  %3572 = phi i32 [ %3589, %3567 ], [ 0, %3558 ]
  %3573 = add nsw i32 %3569, %14
  %3574 = sext i32 %3573 to i64
  %3575 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3574
  %3576 = load i16, i16 addrspace(1)* %3575, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3577 = uitofp i16 %3576 to float
  %3578 = fcmp contract ogt float %3415, %3577
  %3579 = fcmp contract olt float %3416, %3577
  %3580 = and i1 %3578, %3579
  %3581 = fmul contract float %3577, %3577
  %3582 = select i1 %3580, float %3577, float -0.000000e+00
  %3583 = fadd contract float %3571, %3582
  %3584 = select i1 %3580, float %3581, float -0.000000e+00
  %3585 = fadd contract float %3570, %3584
  %3586 = zext i1 %3580 to i32
  %3587 = add nuw nsw i32 %3568, %3586
  %3588 = add nuw nsw i32 %3569, 1
  %3589 = add i32 %3572, 1
  %3590 = icmp eq i32 %3589, %3418
  br i1 %3590, label %3591, label %3567, !llvm.loop !31

3591:                                             ; preds = %3558, %3567, %3413
  %3592 = phi float [ 0.000000e+00, %3413 ], [ %3559, %3558 ], [ %3583, %3567 ]
  %3593 = phi float [ 0.000000e+00, %3413 ], [ %3560, %3558 ], [ %3585, %3567 ]
  %3594 = phi i32 [ 0, %3413 ], [ %3561, %3558 ], [ %3587, %3567 ]
  %3595 = sitofp i32 %3594 to float
  %3596 = fdiv contract float %3592, %3595
  %3597 = fdiv contract float %3593, %3595
  %3598 = fmul contract float %3596, %3596
  %3599 = fsub contract float %3597, %3598
  %3600 = fcmp olt float %3599, 0x39F0000000000000
  %3601 = select i1 %3600, float 0x41F0000000000000, float 1.000000e+00
  %3602 = fmul float %3599, %3601
  %3603 = tail call float @llvm.sqrt.f32(float %3602)
  %3604 = bitcast float %3603 to i32
  %3605 = add nsw i32 %3604, -1
  %3606 = bitcast i32 %3605 to float
  %3607 = add nsw i32 %3604, 1
  %3608 = bitcast i32 %3607 to float
  %3609 = tail call i1 @llvm.amdgcn.class.f32(float %3602, i32 608)
  %3610 = select i1 %3600, float 0x3EF0000000000000, float 1.000000e+00
  %3611 = fneg float %3608
  %3612 = tail call float @llvm.fma.f32(float %3611, float %3603, float %3602)
  %3613 = fcmp ogt float %3612, 0.000000e+00
  %3614 = fneg float %3606
  %3615 = tail call float @llvm.fma.f32(float %3614, float %3603, float %3602)
  %3616 = fcmp ole float %3615, 0.000000e+00
  %3617 = select i1 %3616, float %3606, float %3603
  %3618 = select i1 %3613, float %3608, float %3617
  %3619 = fmul float %3610, %3618
  %3620 = select i1 %3609, float %3602, float %3619
  %3621 = fmul contract float %3620, 2.000000e+00
  %3622 = fsub contract float %3596, %3384
  %3623 = tail call float @llvm.fabs.f32(float %3622)
  %3624 = fcmp contract ogt float %3623, 0x3EB0C6F7A0000000
  br i1 %3624, label %3625, label %4399, !llvm.loop !15

3625:                                             ; preds = %3591
  br i1 %13, label %3803, label %3626

3626:                                             ; preds = %3625
  %3627 = fadd contract float %3596, %3621
  %3628 = fsub contract float %3596, %3621
  %3629 = add i32 %1, -1
  %3630 = and i32 %1, 7
  %3631 = icmp ult i32 %3629, 7
  br i1 %3631, label %3770, label %3632

3632:                                             ; preds = %3626
  %3633 = and i32 %1, -8
  br label %3634

3634:                                             ; preds = %3634, %3632
  %3635 = phi i32 [ 0, %3632 ], [ %3766, %3634 ]
  %3636 = phi i32 [ 0, %3632 ], [ %3767, %3634 ]
  %3637 = phi float [ 0.000000e+00, %3632 ], [ %3764, %3634 ]
  %3638 = phi float [ 0.000000e+00, %3632 ], [ %3762, %3634 ]
  %3639 = phi i32 [ 0, %3632 ], [ %3768, %3634 ]
  %3640 = add nsw i32 %3636, %14
  %3641 = sext i32 %3640 to i64
  %3642 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3641
  %3643 = load i16, i16 addrspace(1)* %3642, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3644 = uitofp i16 %3643 to float
  %3645 = fcmp contract ogt float %3627, %3644
  %3646 = fcmp contract olt float %3628, %3644
  %3647 = and i1 %3645, %3646
  %3648 = fmul contract float %3644, %3644
  %3649 = select i1 %3647, float %3644, float -0.000000e+00
  %3650 = fadd contract float %3638, %3649
  %3651 = select i1 %3647, float %3648, float -0.000000e+00
  %3652 = fadd contract float %3637, %3651
  %3653 = zext i1 %3647 to i32
  %3654 = add nuw nsw i32 %3635, %3653
  %3655 = or i32 %3636, 1
  %3656 = add nsw i32 %3655, %14
  %3657 = sext i32 %3656 to i64
  %3658 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3657
  %3659 = load i16, i16 addrspace(1)* %3658, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3660 = uitofp i16 %3659 to float
  %3661 = fcmp contract ogt float %3627, %3660
  %3662 = fcmp contract olt float %3628, %3660
  %3663 = and i1 %3661, %3662
  %3664 = fmul contract float %3660, %3660
  %3665 = select i1 %3663, float %3660, float -0.000000e+00
  %3666 = fadd contract float %3650, %3665
  %3667 = select i1 %3663, float %3664, float -0.000000e+00
  %3668 = fadd contract float %3652, %3667
  %3669 = zext i1 %3663 to i32
  %3670 = add nuw nsw i32 %3654, %3669
  %3671 = or i32 %3636, 2
  %3672 = add nsw i32 %3671, %14
  %3673 = sext i32 %3672 to i64
  %3674 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3673
  %3675 = load i16, i16 addrspace(1)* %3674, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3676 = uitofp i16 %3675 to float
  %3677 = fcmp contract ogt float %3627, %3676
  %3678 = fcmp contract olt float %3628, %3676
  %3679 = and i1 %3677, %3678
  %3680 = fmul contract float %3676, %3676
  %3681 = select i1 %3679, float %3676, float -0.000000e+00
  %3682 = fadd contract float %3666, %3681
  %3683 = select i1 %3679, float %3680, float -0.000000e+00
  %3684 = fadd contract float %3668, %3683
  %3685 = zext i1 %3679 to i32
  %3686 = add nuw nsw i32 %3670, %3685
  %3687 = or i32 %3636, 3
  %3688 = add nsw i32 %3687, %14
  %3689 = sext i32 %3688 to i64
  %3690 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3689
  %3691 = load i16, i16 addrspace(1)* %3690, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3692 = uitofp i16 %3691 to float
  %3693 = fcmp contract ogt float %3627, %3692
  %3694 = fcmp contract olt float %3628, %3692
  %3695 = and i1 %3693, %3694
  %3696 = fmul contract float %3692, %3692
  %3697 = select i1 %3695, float %3692, float -0.000000e+00
  %3698 = fadd contract float %3682, %3697
  %3699 = select i1 %3695, float %3696, float -0.000000e+00
  %3700 = fadd contract float %3684, %3699
  %3701 = zext i1 %3695 to i32
  %3702 = add nuw nsw i32 %3686, %3701
  %3703 = or i32 %3636, 4
  %3704 = add nsw i32 %3703, %14
  %3705 = sext i32 %3704 to i64
  %3706 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3705
  %3707 = load i16, i16 addrspace(1)* %3706, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3708 = uitofp i16 %3707 to float
  %3709 = fcmp contract ogt float %3627, %3708
  %3710 = fcmp contract olt float %3628, %3708
  %3711 = and i1 %3709, %3710
  %3712 = fmul contract float %3708, %3708
  %3713 = select i1 %3711, float %3708, float -0.000000e+00
  %3714 = fadd contract float %3698, %3713
  %3715 = select i1 %3711, float %3712, float -0.000000e+00
  %3716 = fadd contract float %3700, %3715
  %3717 = zext i1 %3711 to i32
  %3718 = add nuw nsw i32 %3702, %3717
  %3719 = or i32 %3636, 5
  %3720 = add nsw i32 %3719, %14
  %3721 = sext i32 %3720 to i64
  %3722 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3721
  %3723 = load i16, i16 addrspace(1)* %3722, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3724 = uitofp i16 %3723 to float
  %3725 = fcmp contract ogt float %3627, %3724
  %3726 = fcmp contract olt float %3628, %3724
  %3727 = and i1 %3725, %3726
  %3728 = fmul contract float %3724, %3724
  %3729 = select i1 %3727, float %3724, float -0.000000e+00
  %3730 = fadd contract float %3714, %3729
  %3731 = select i1 %3727, float %3728, float -0.000000e+00
  %3732 = fadd contract float %3716, %3731
  %3733 = zext i1 %3727 to i32
  %3734 = add nuw nsw i32 %3718, %3733
  %3735 = or i32 %3636, 6
  %3736 = add nsw i32 %3735, %14
  %3737 = sext i32 %3736 to i64
  %3738 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3737
  %3739 = load i16, i16 addrspace(1)* %3738, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3740 = uitofp i16 %3739 to float
  %3741 = fcmp contract ogt float %3627, %3740
  %3742 = fcmp contract olt float %3628, %3740
  %3743 = and i1 %3741, %3742
  %3744 = fmul contract float %3740, %3740
  %3745 = select i1 %3743, float %3740, float -0.000000e+00
  %3746 = fadd contract float %3730, %3745
  %3747 = select i1 %3743, float %3744, float -0.000000e+00
  %3748 = fadd contract float %3732, %3747
  %3749 = zext i1 %3743 to i32
  %3750 = add nuw nsw i32 %3734, %3749
  %3751 = or i32 %3636, 7
  %3752 = add nsw i32 %3751, %14
  %3753 = sext i32 %3752 to i64
  %3754 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3753
  %3755 = load i16, i16 addrspace(1)* %3754, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3756 = uitofp i16 %3755 to float
  %3757 = fcmp contract ogt float %3627, %3756
  %3758 = fcmp contract olt float %3628, %3756
  %3759 = and i1 %3757, %3758
  %3760 = fmul contract float %3756, %3756
  %3761 = select i1 %3759, float %3756, float -0.000000e+00
  %3762 = fadd contract float %3746, %3761
  %3763 = select i1 %3759, float %3760, float -0.000000e+00
  %3764 = fadd contract float %3748, %3763
  %3765 = zext i1 %3759 to i32
  %3766 = add nuw nsw i32 %3750, %3765
  %3767 = add nuw nsw i32 %3636, 8
  %3768 = add i32 %3639, 8
  %3769 = icmp eq i32 %3768, %3633
  br i1 %3769, label %3770, label %3634, !llvm.loop !11

3770:                                             ; preds = %3634, %3626
  %3771 = phi float [ undef, %3626 ], [ %3762, %3634 ]
  %3772 = phi float [ undef, %3626 ], [ %3764, %3634 ]
  %3773 = phi i32 [ undef, %3626 ], [ %3766, %3634 ]
  %3774 = phi i32 [ 0, %3626 ], [ %3766, %3634 ]
  %3775 = phi i32 [ 0, %3626 ], [ %3767, %3634 ]
  %3776 = phi float [ 0.000000e+00, %3626 ], [ %3764, %3634 ]
  %3777 = phi float [ 0.000000e+00, %3626 ], [ %3762, %3634 ]
  %3778 = icmp eq i32 %3630, 0
  br i1 %3778, label %3803, label %3779

3779:                                             ; preds = %3770, %3779
  %3780 = phi i32 [ %3799, %3779 ], [ %3774, %3770 ]
  %3781 = phi i32 [ %3800, %3779 ], [ %3775, %3770 ]
  %3782 = phi float [ %3797, %3779 ], [ %3776, %3770 ]
  %3783 = phi float [ %3795, %3779 ], [ %3777, %3770 ]
  %3784 = phi i32 [ %3801, %3779 ], [ 0, %3770 ]
  %3785 = add nsw i32 %3781, %14
  %3786 = sext i32 %3785 to i64
  %3787 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3786
  %3788 = load i16, i16 addrspace(1)* %3787, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3789 = uitofp i16 %3788 to float
  %3790 = fcmp contract ogt float %3627, %3789
  %3791 = fcmp contract olt float %3628, %3789
  %3792 = and i1 %3790, %3791
  %3793 = fmul contract float %3789, %3789
  %3794 = select i1 %3792, float %3789, float -0.000000e+00
  %3795 = fadd contract float %3783, %3794
  %3796 = select i1 %3792, float %3793, float -0.000000e+00
  %3797 = fadd contract float %3782, %3796
  %3798 = zext i1 %3792 to i32
  %3799 = add nuw nsw i32 %3780, %3798
  %3800 = add nuw nsw i32 %3781, 1
  %3801 = add i32 %3784, 1
  %3802 = icmp eq i32 %3801, %3630
  br i1 %3802, label %3803, label %3779, !llvm.loop !32

3803:                                             ; preds = %3770, %3779, %3625
  %3804 = phi float [ 0.000000e+00, %3625 ], [ %3771, %3770 ], [ %3795, %3779 ]
  %3805 = phi float [ 0.000000e+00, %3625 ], [ %3772, %3770 ], [ %3797, %3779 ]
  %3806 = phi i32 [ 0, %3625 ], [ %3773, %3770 ], [ %3799, %3779 ]
  %3807 = sitofp i32 %3806 to float
  %3808 = fdiv contract float %3804, %3807
  %3809 = fdiv contract float %3805, %3807
  %3810 = fmul contract float %3808, %3808
  %3811 = fsub contract float %3809, %3810
  %3812 = fcmp olt float %3811, 0x39F0000000000000
  %3813 = select i1 %3812, float 0x41F0000000000000, float 1.000000e+00
  %3814 = fmul float %3811, %3813
  %3815 = tail call float @llvm.sqrt.f32(float %3814)
  %3816 = bitcast float %3815 to i32
  %3817 = add nsw i32 %3816, -1
  %3818 = bitcast i32 %3817 to float
  %3819 = add nsw i32 %3816, 1
  %3820 = bitcast i32 %3819 to float
  %3821 = tail call i1 @llvm.amdgcn.class.f32(float %3814, i32 608)
  %3822 = select i1 %3812, float 0x3EF0000000000000, float 1.000000e+00
  %3823 = fneg float %3820
  %3824 = tail call float @llvm.fma.f32(float %3823, float %3815, float %3814)
  %3825 = fcmp ogt float %3824, 0.000000e+00
  %3826 = fneg float %3818
  %3827 = tail call float @llvm.fma.f32(float %3826, float %3815, float %3814)
  %3828 = fcmp ole float %3827, 0.000000e+00
  %3829 = select i1 %3828, float %3818, float %3815
  %3830 = select i1 %3825, float %3820, float %3829
  %3831 = fmul float %3822, %3830
  %3832 = select i1 %3821, float %3814, float %3831
  %3833 = fmul contract float %3832, 2.000000e+00
  %3834 = fsub contract float %3808, %3596
  %3835 = tail call float @llvm.fabs.f32(float %3834)
  %3836 = fcmp contract ogt float %3835, 0x3EB0C6F7A0000000
  br i1 %3836, label %3837, label %4399, !llvm.loop !15

3837:                                             ; preds = %3803
  br i1 %13, label %4015, label %3838

3838:                                             ; preds = %3837
  %3839 = fadd contract float %3808, %3833
  %3840 = fsub contract float %3808, %3833
  %3841 = add i32 %1, -1
  %3842 = and i32 %1, 7
  %3843 = icmp ult i32 %3841, 7
  br i1 %3843, label %3982, label %3844

3844:                                             ; preds = %3838
  %3845 = and i32 %1, -8
  br label %3846

3846:                                             ; preds = %3846, %3844
  %3847 = phi i32 [ 0, %3844 ], [ %3978, %3846 ]
  %3848 = phi i32 [ 0, %3844 ], [ %3979, %3846 ]
  %3849 = phi float [ 0.000000e+00, %3844 ], [ %3976, %3846 ]
  %3850 = phi float [ 0.000000e+00, %3844 ], [ %3974, %3846 ]
  %3851 = phi i32 [ 0, %3844 ], [ %3980, %3846 ]
  %3852 = add nsw i32 %3848, %14
  %3853 = sext i32 %3852 to i64
  %3854 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3853
  %3855 = load i16, i16 addrspace(1)* %3854, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3856 = uitofp i16 %3855 to float
  %3857 = fcmp contract ogt float %3839, %3856
  %3858 = fcmp contract olt float %3840, %3856
  %3859 = and i1 %3857, %3858
  %3860 = fmul contract float %3856, %3856
  %3861 = select i1 %3859, float %3856, float -0.000000e+00
  %3862 = fadd contract float %3850, %3861
  %3863 = select i1 %3859, float %3860, float -0.000000e+00
  %3864 = fadd contract float %3849, %3863
  %3865 = zext i1 %3859 to i32
  %3866 = add nuw nsw i32 %3847, %3865
  %3867 = or i32 %3848, 1
  %3868 = add nsw i32 %3867, %14
  %3869 = sext i32 %3868 to i64
  %3870 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3869
  %3871 = load i16, i16 addrspace(1)* %3870, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3872 = uitofp i16 %3871 to float
  %3873 = fcmp contract ogt float %3839, %3872
  %3874 = fcmp contract olt float %3840, %3872
  %3875 = and i1 %3873, %3874
  %3876 = fmul contract float %3872, %3872
  %3877 = select i1 %3875, float %3872, float -0.000000e+00
  %3878 = fadd contract float %3862, %3877
  %3879 = select i1 %3875, float %3876, float -0.000000e+00
  %3880 = fadd contract float %3864, %3879
  %3881 = zext i1 %3875 to i32
  %3882 = add nuw nsw i32 %3866, %3881
  %3883 = or i32 %3848, 2
  %3884 = add nsw i32 %3883, %14
  %3885 = sext i32 %3884 to i64
  %3886 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3885
  %3887 = load i16, i16 addrspace(1)* %3886, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3888 = uitofp i16 %3887 to float
  %3889 = fcmp contract ogt float %3839, %3888
  %3890 = fcmp contract olt float %3840, %3888
  %3891 = and i1 %3889, %3890
  %3892 = fmul contract float %3888, %3888
  %3893 = select i1 %3891, float %3888, float -0.000000e+00
  %3894 = fadd contract float %3878, %3893
  %3895 = select i1 %3891, float %3892, float -0.000000e+00
  %3896 = fadd contract float %3880, %3895
  %3897 = zext i1 %3891 to i32
  %3898 = add nuw nsw i32 %3882, %3897
  %3899 = or i32 %3848, 3
  %3900 = add nsw i32 %3899, %14
  %3901 = sext i32 %3900 to i64
  %3902 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3901
  %3903 = load i16, i16 addrspace(1)* %3902, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3904 = uitofp i16 %3903 to float
  %3905 = fcmp contract ogt float %3839, %3904
  %3906 = fcmp contract olt float %3840, %3904
  %3907 = and i1 %3905, %3906
  %3908 = fmul contract float %3904, %3904
  %3909 = select i1 %3907, float %3904, float -0.000000e+00
  %3910 = fadd contract float %3894, %3909
  %3911 = select i1 %3907, float %3908, float -0.000000e+00
  %3912 = fadd contract float %3896, %3911
  %3913 = zext i1 %3907 to i32
  %3914 = add nuw nsw i32 %3898, %3913
  %3915 = or i32 %3848, 4
  %3916 = add nsw i32 %3915, %14
  %3917 = sext i32 %3916 to i64
  %3918 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3917
  %3919 = load i16, i16 addrspace(1)* %3918, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3920 = uitofp i16 %3919 to float
  %3921 = fcmp contract ogt float %3839, %3920
  %3922 = fcmp contract olt float %3840, %3920
  %3923 = and i1 %3921, %3922
  %3924 = fmul contract float %3920, %3920
  %3925 = select i1 %3923, float %3920, float -0.000000e+00
  %3926 = fadd contract float %3910, %3925
  %3927 = select i1 %3923, float %3924, float -0.000000e+00
  %3928 = fadd contract float %3912, %3927
  %3929 = zext i1 %3923 to i32
  %3930 = add nuw nsw i32 %3914, %3929
  %3931 = or i32 %3848, 5
  %3932 = add nsw i32 %3931, %14
  %3933 = sext i32 %3932 to i64
  %3934 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3933
  %3935 = load i16, i16 addrspace(1)* %3934, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3936 = uitofp i16 %3935 to float
  %3937 = fcmp contract ogt float %3839, %3936
  %3938 = fcmp contract olt float %3840, %3936
  %3939 = and i1 %3937, %3938
  %3940 = fmul contract float %3936, %3936
  %3941 = select i1 %3939, float %3936, float -0.000000e+00
  %3942 = fadd contract float %3926, %3941
  %3943 = select i1 %3939, float %3940, float -0.000000e+00
  %3944 = fadd contract float %3928, %3943
  %3945 = zext i1 %3939 to i32
  %3946 = add nuw nsw i32 %3930, %3945
  %3947 = or i32 %3848, 6
  %3948 = add nsw i32 %3947, %14
  %3949 = sext i32 %3948 to i64
  %3950 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3949
  %3951 = load i16, i16 addrspace(1)* %3950, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3952 = uitofp i16 %3951 to float
  %3953 = fcmp contract ogt float %3839, %3952
  %3954 = fcmp contract olt float %3840, %3952
  %3955 = and i1 %3953, %3954
  %3956 = fmul contract float %3952, %3952
  %3957 = select i1 %3955, float %3952, float -0.000000e+00
  %3958 = fadd contract float %3942, %3957
  %3959 = select i1 %3955, float %3956, float -0.000000e+00
  %3960 = fadd contract float %3944, %3959
  %3961 = zext i1 %3955 to i32
  %3962 = add nuw nsw i32 %3946, %3961
  %3963 = or i32 %3848, 7
  %3964 = add nsw i32 %3963, %14
  %3965 = sext i32 %3964 to i64
  %3966 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3965
  %3967 = load i16, i16 addrspace(1)* %3966, align 2, !tbaa !7, !amdgpu.noclobber !5
  %3968 = uitofp i16 %3967 to float
  %3969 = fcmp contract ogt float %3839, %3968
  %3970 = fcmp contract olt float %3840, %3968
  %3971 = and i1 %3969, %3970
  %3972 = fmul contract float %3968, %3968
  %3973 = select i1 %3971, float %3968, float -0.000000e+00
  %3974 = fadd contract float %3958, %3973
  %3975 = select i1 %3971, float %3972, float -0.000000e+00
  %3976 = fadd contract float %3960, %3975
  %3977 = zext i1 %3971 to i32
  %3978 = add nuw nsw i32 %3962, %3977
  %3979 = add nuw nsw i32 %3848, 8
  %3980 = add i32 %3851, 8
  %3981 = icmp eq i32 %3980, %3845
  br i1 %3981, label %3982, label %3846, !llvm.loop !11

3982:                                             ; preds = %3846, %3838
  %3983 = phi float [ undef, %3838 ], [ %3974, %3846 ]
  %3984 = phi float [ undef, %3838 ], [ %3976, %3846 ]
  %3985 = phi i32 [ undef, %3838 ], [ %3978, %3846 ]
  %3986 = phi i32 [ 0, %3838 ], [ %3978, %3846 ]
  %3987 = phi i32 [ 0, %3838 ], [ %3979, %3846 ]
  %3988 = phi float [ 0.000000e+00, %3838 ], [ %3976, %3846 ]
  %3989 = phi float [ 0.000000e+00, %3838 ], [ %3974, %3846 ]
  %3990 = icmp eq i32 %3842, 0
  br i1 %3990, label %4015, label %3991

3991:                                             ; preds = %3982, %3991
  %3992 = phi i32 [ %4011, %3991 ], [ %3986, %3982 ]
  %3993 = phi i32 [ %4012, %3991 ], [ %3987, %3982 ]
  %3994 = phi float [ %4009, %3991 ], [ %3988, %3982 ]
  %3995 = phi float [ %4007, %3991 ], [ %3989, %3982 ]
  %3996 = phi i32 [ %4013, %3991 ], [ 0, %3982 ]
  %3997 = add nsw i32 %3993, %14
  %3998 = sext i32 %3997 to i64
  %3999 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %3998
  %4000 = load i16, i16 addrspace(1)* %3999, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4001 = uitofp i16 %4000 to float
  %4002 = fcmp contract ogt float %3839, %4001
  %4003 = fcmp contract olt float %3840, %4001
  %4004 = and i1 %4002, %4003
  %4005 = fmul contract float %4001, %4001
  %4006 = select i1 %4004, float %4001, float -0.000000e+00
  %4007 = fadd contract float %3995, %4006
  %4008 = select i1 %4004, float %4005, float -0.000000e+00
  %4009 = fadd contract float %3994, %4008
  %4010 = zext i1 %4004 to i32
  %4011 = add nuw nsw i32 %3992, %4010
  %4012 = add nuw nsw i32 %3993, 1
  %4013 = add i32 %3996, 1
  %4014 = icmp eq i32 %4013, %3842
  br i1 %4014, label %4015, label %3991, !llvm.loop !33

4015:                                             ; preds = %3982, %3991, %3837
  %4016 = phi float [ 0.000000e+00, %3837 ], [ %3983, %3982 ], [ %4007, %3991 ]
  %4017 = phi float [ 0.000000e+00, %3837 ], [ %3984, %3982 ], [ %4009, %3991 ]
  %4018 = phi i32 [ 0, %3837 ], [ %3985, %3982 ], [ %4011, %3991 ]
  %4019 = sitofp i32 %4018 to float
  %4020 = fdiv contract float %4016, %4019
  %4021 = fdiv contract float %4017, %4019
  %4022 = fmul contract float %4020, %4020
  %4023 = fsub contract float %4021, %4022
  %4024 = fcmp olt float %4023, 0x39F0000000000000
  %4025 = select i1 %4024, float 0x41F0000000000000, float 1.000000e+00
  %4026 = fmul float %4023, %4025
  %4027 = tail call float @llvm.sqrt.f32(float %4026)
  %4028 = bitcast float %4027 to i32
  %4029 = add nsw i32 %4028, -1
  %4030 = bitcast i32 %4029 to float
  %4031 = add nsw i32 %4028, 1
  %4032 = bitcast i32 %4031 to float
  %4033 = tail call i1 @llvm.amdgcn.class.f32(float %4026, i32 608)
  %4034 = select i1 %4024, float 0x3EF0000000000000, float 1.000000e+00
  %4035 = fneg float %4032
  %4036 = tail call float @llvm.fma.f32(float %4035, float %4027, float %4026)
  %4037 = fcmp ogt float %4036, 0.000000e+00
  %4038 = fneg float %4030
  %4039 = tail call float @llvm.fma.f32(float %4038, float %4027, float %4026)
  %4040 = fcmp ole float %4039, 0.000000e+00
  %4041 = select i1 %4040, float %4030, float %4027
  %4042 = select i1 %4037, float %4032, float %4041
  %4043 = fmul float %4034, %4042
  %4044 = select i1 %4033, float %4026, float %4043
  %4045 = fmul contract float %4044, 2.000000e+00
  %4046 = fsub contract float %4020, %3808
  %4047 = tail call float @llvm.fabs.f32(float %4046)
  %4048 = fcmp contract ogt float %4047, 0x3EB0C6F7A0000000
  br i1 %4048, label %4049, label %4399, !llvm.loop !15

4049:                                             ; preds = %4015
  br i1 %13, label %4227, label %4050

4050:                                             ; preds = %4049
  %4051 = fadd contract float %4020, %4045
  %4052 = fsub contract float %4020, %4045
  %4053 = add i32 %1, -1
  %4054 = and i32 %1, 7
  %4055 = icmp ult i32 %4053, 7
  br i1 %4055, label %4194, label %4056

4056:                                             ; preds = %4050
  %4057 = and i32 %1, -8
  br label %4058

4058:                                             ; preds = %4058, %4056
  %4059 = phi i32 [ 0, %4056 ], [ %4190, %4058 ]
  %4060 = phi i32 [ 0, %4056 ], [ %4191, %4058 ]
  %4061 = phi float [ 0.000000e+00, %4056 ], [ %4188, %4058 ]
  %4062 = phi float [ 0.000000e+00, %4056 ], [ %4186, %4058 ]
  %4063 = phi i32 [ 0, %4056 ], [ %4192, %4058 ]
  %4064 = add nsw i32 %4060, %14
  %4065 = sext i32 %4064 to i64
  %4066 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4065
  %4067 = load i16, i16 addrspace(1)* %4066, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4068 = uitofp i16 %4067 to float
  %4069 = fcmp contract ogt float %4051, %4068
  %4070 = fcmp contract olt float %4052, %4068
  %4071 = and i1 %4069, %4070
  %4072 = fmul contract float %4068, %4068
  %4073 = select i1 %4071, float %4068, float -0.000000e+00
  %4074 = fadd contract float %4062, %4073
  %4075 = select i1 %4071, float %4072, float -0.000000e+00
  %4076 = fadd contract float %4061, %4075
  %4077 = zext i1 %4071 to i32
  %4078 = add nuw nsw i32 %4059, %4077
  %4079 = or i32 %4060, 1
  %4080 = add nsw i32 %4079, %14
  %4081 = sext i32 %4080 to i64
  %4082 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4081
  %4083 = load i16, i16 addrspace(1)* %4082, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4084 = uitofp i16 %4083 to float
  %4085 = fcmp contract ogt float %4051, %4084
  %4086 = fcmp contract olt float %4052, %4084
  %4087 = and i1 %4085, %4086
  %4088 = fmul contract float %4084, %4084
  %4089 = select i1 %4087, float %4084, float -0.000000e+00
  %4090 = fadd contract float %4074, %4089
  %4091 = select i1 %4087, float %4088, float -0.000000e+00
  %4092 = fadd contract float %4076, %4091
  %4093 = zext i1 %4087 to i32
  %4094 = add nuw nsw i32 %4078, %4093
  %4095 = or i32 %4060, 2
  %4096 = add nsw i32 %4095, %14
  %4097 = sext i32 %4096 to i64
  %4098 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4097
  %4099 = load i16, i16 addrspace(1)* %4098, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4100 = uitofp i16 %4099 to float
  %4101 = fcmp contract ogt float %4051, %4100
  %4102 = fcmp contract olt float %4052, %4100
  %4103 = and i1 %4101, %4102
  %4104 = fmul contract float %4100, %4100
  %4105 = select i1 %4103, float %4100, float -0.000000e+00
  %4106 = fadd contract float %4090, %4105
  %4107 = select i1 %4103, float %4104, float -0.000000e+00
  %4108 = fadd contract float %4092, %4107
  %4109 = zext i1 %4103 to i32
  %4110 = add nuw nsw i32 %4094, %4109
  %4111 = or i32 %4060, 3
  %4112 = add nsw i32 %4111, %14
  %4113 = sext i32 %4112 to i64
  %4114 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4113
  %4115 = load i16, i16 addrspace(1)* %4114, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4116 = uitofp i16 %4115 to float
  %4117 = fcmp contract ogt float %4051, %4116
  %4118 = fcmp contract olt float %4052, %4116
  %4119 = and i1 %4117, %4118
  %4120 = fmul contract float %4116, %4116
  %4121 = select i1 %4119, float %4116, float -0.000000e+00
  %4122 = fadd contract float %4106, %4121
  %4123 = select i1 %4119, float %4120, float -0.000000e+00
  %4124 = fadd contract float %4108, %4123
  %4125 = zext i1 %4119 to i32
  %4126 = add nuw nsw i32 %4110, %4125
  %4127 = or i32 %4060, 4
  %4128 = add nsw i32 %4127, %14
  %4129 = sext i32 %4128 to i64
  %4130 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4129
  %4131 = load i16, i16 addrspace(1)* %4130, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4132 = uitofp i16 %4131 to float
  %4133 = fcmp contract ogt float %4051, %4132
  %4134 = fcmp contract olt float %4052, %4132
  %4135 = and i1 %4133, %4134
  %4136 = fmul contract float %4132, %4132
  %4137 = select i1 %4135, float %4132, float -0.000000e+00
  %4138 = fadd contract float %4122, %4137
  %4139 = select i1 %4135, float %4136, float -0.000000e+00
  %4140 = fadd contract float %4124, %4139
  %4141 = zext i1 %4135 to i32
  %4142 = add nuw nsw i32 %4126, %4141
  %4143 = or i32 %4060, 5
  %4144 = add nsw i32 %4143, %14
  %4145 = sext i32 %4144 to i64
  %4146 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4145
  %4147 = load i16, i16 addrspace(1)* %4146, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4148 = uitofp i16 %4147 to float
  %4149 = fcmp contract ogt float %4051, %4148
  %4150 = fcmp contract olt float %4052, %4148
  %4151 = and i1 %4149, %4150
  %4152 = fmul contract float %4148, %4148
  %4153 = select i1 %4151, float %4148, float -0.000000e+00
  %4154 = fadd contract float %4138, %4153
  %4155 = select i1 %4151, float %4152, float -0.000000e+00
  %4156 = fadd contract float %4140, %4155
  %4157 = zext i1 %4151 to i32
  %4158 = add nuw nsw i32 %4142, %4157
  %4159 = or i32 %4060, 6
  %4160 = add nsw i32 %4159, %14
  %4161 = sext i32 %4160 to i64
  %4162 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4161
  %4163 = load i16, i16 addrspace(1)* %4162, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4164 = uitofp i16 %4163 to float
  %4165 = fcmp contract ogt float %4051, %4164
  %4166 = fcmp contract olt float %4052, %4164
  %4167 = and i1 %4165, %4166
  %4168 = fmul contract float %4164, %4164
  %4169 = select i1 %4167, float %4164, float -0.000000e+00
  %4170 = fadd contract float %4154, %4169
  %4171 = select i1 %4167, float %4168, float -0.000000e+00
  %4172 = fadd contract float %4156, %4171
  %4173 = zext i1 %4167 to i32
  %4174 = add nuw nsw i32 %4158, %4173
  %4175 = or i32 %4060, 7
  %4176 = add nsw i32 %4175, %14
  %4177 = sext i32 %4176 to i64
  %4178 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4177
  %4179 = load i16, i16 addrspace(1)* %4178, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4180 = uitofp i16 %4179 to float
  %4181 = fcmp contract ogt float %4051, %4180
  %4182 = fcmp contract olt float %4052, %4180
  %4183 = and i1 %4181, %4182
  %4184 = fmul contract float %4180, %4180
  %4185 = select i1 %4183, float %4180, float -0.000000e+00
  %4186 = fadd contract float %4170, %4185
  %4187 = select i1 %4183, float %4184, float -0.000000e+00
  %4188 = fadd contract float %4172, %4187
  %4189 = zext i1 %4183 to i32
  %4190 = add nuw nsw i32 %4174, %4189
  %4191 = add nuw nsw i32 %4060, 8
  %4192 = add i32 %4063, 8
  %4193 = icmp eq i32 %4192, %4057
  br i1 %4193, label %4194, label %4058, !llvm.loop !11

4194:                                             ; preds = %4058, %4050
  %4195 = phi float [ undef, %4050 ], [ %4186, %4058 ]
  %4196 = phi float [ undef, %4050 ], [ %4188, %4058 ]
  %4197 = phi i32 [ undef, %4050 ], [ %4190, %4058 ]
  %4198 = phi i32 [ 0, %4050 ], [ %4190, %4058 ]
  %4199 = phi i32 [ 0, %4050 ], [ %4191, %4058 ]
  %4200 = phi float [ 0.000000e+00, %4050 ], [ %4188, %4058 ]
  %4201 = phi float [ 0.000000e+00, %4050 ], [ %4186, %4058 ]
  %4202 = icmp eq i32 %4054, 0
  br i1 %4202, label %4227, label %4203

4203:                                             ; preds = %4194, %4203
  %4204 = phi i32 [ %4223, %4203 ], [ %4198, %4194 ]
  %4205 = phi i32 [ %4224, %4203 ], [ %4199, %4194 ]
  %4206 = phi float [ %4221, %4203 ], [ %4200, %4194 ]
  %4207 = phi float [ %4219, %4203 ], [ %4201, %4194 ]
  %4208 = phi i32 [ %4225, %4203 ], [ 0, %4194 ]
  %4209 = add nsw i32 %4205, %14
  %4210 = sext i32 %4209 to i64
  %4211 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4210
  %4212 = load i16, i16 addrspace(1)* %4211, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4213 = uitofp i16 %4212 to float
  %4214 = fcmp contract ogt float %4051, %4213
  %4215 = fcmp contract olt float %4052, %4213
  %4216 = and i1 %4214, %4215
  %4217 = fmul contract float %4213, %4213
  %4218 = select i1 %4216, float %4213, float -0.000000e+00
  %4219 = fadd contract float %4207, %4218
  %4220 = select i1 %4216, float %4217, float -0.000000e+00
  %4221 = fadd contract float %4206, %4220
  %4222 = zext i1 %4216 to i32
  %4223 = add nuw nsw i32 %4204, %4222
  %4224 = add nuw nsw i32 %4205, 1
  %4225 = add i32 %4208, 1
  %4226 = icmp eq i32 %4225, %4054
  br i1 %4226, label %4227, label %4203, !llvm.loop !34

4227:                                             ; preds = %4194, %4203, %4049
  %4228 = phi float [ 0.000000e+00, %4049 ], [ %4195, %4194 ], [ %4219, %4203 ]
  %4229 = phi float [ 0.000000e+00, %4049 ], [ %4196, %4194 ], [ %4221, %4203 ]
  %4230 = phi i32 [ 0, %4049 ], [ %4197, %4194 ], [ %4223, %4203 ]
  %4231 = sitofp i32 %4230 to float
  %4232 = fdiv contract float %4228, %4231
  %4233 = fdiv contract float %4229, %4231
  %4234 = fmul contract float %4232, %4232
  %4235 = fsub contract float %4233, %4234
  %4236 = fcmp olt float %4235, 0x39F0000000000000
  %4237 = select i1 %4236, float 0x41F0000000000000, float 1.000000e+00
  %4238 = fmul float %4235, %4237
  %4239 = tail call float @llvm.sqrt.f32(float %4238)
  %4240 = bitcast float %4239 to i32
  %4241 = add nsw i32 %4240, -1
  %4242 = bitcast i32 %4241 to float
  %4243 = add nsw i32 %4240, 1
  %4244 = bitcast i32 %4243 to float
  %4245 = tail call i1 @llvm.amdgcn.class.f32(float %4238, i32 608)
  %4246 = select i1 %4236, float 0x3EF0000000000000, float 1.000000e+00
  %4247 = fneg float %4244
  %4248 = tail call float @llvm.fma.f32(float %4247, float %4239, float %4238)
  %4249 = fcmp ogt float %4248, 0.000000e+00
  %4250 = fneg float %4242
  %4251 = tail call float @llvm.fma.f32(float %4250, float %4239, float %4238)
  %4252 = fcmp ole float %4251, 0.000000e+00
  %4253 = select i1 %4252, float %4242, float %4239
  %4254 = select i1 %4249, float %4244, float %4253
  %4255 = fmul float %4246, %4254
  %4256 = select i1 %4245, float %4238, float %4255
  br label %4399, !llvm.loop !15

4257:                                             ; preds = %4318, %15
  %4258 = phi float [ undef, %15 ], [ %4393, %4318 ]
  %4259 = phi float [ undef, %15 ], [ %4394, %4318 ]
  %4260 = phi i32 [ undef, %15 ], [ %4395, %4318 ]
  %4261 = phi i32 [ 0, %15 ], [ %4395, %4318 ]
  %4262 = phi i32 [ 0, %15 ], [ %4396, %4318 ]
  %4263 = phi float [ 0.000000e+00, %15 ], [ %4394, %4318 ]
  %4264 = phi float [ 0.000000e+00, %15 ], [ %4393, %4318 ]
  %4265 = icmp eq i32 %17, 0
  br i1 %4265, label %4284, label %4266

4266:                                             ; preds = %4257, %4266
  %4267 = phi i32 [ %4280, %4266 ], [ %4261, %4257 ]
  %4268 = phi i32 [ %4281, %4266 ], [ %4262, %4257 ]
  %4269 = phi float [ %4279, %4266 ], [ %4263, %4257 ]
  %4270 = phi float [ %4278, %4266 ], [ %4264, %4257 ]
  %4271 = phi i32 [ %4282, %4266 ], [ 0, %4257 ]
  %4272 = add nsw i32 %4268, %14
  %4273 = sext i32 %4272 to i64
  %4274 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4273
  %4275 = load i16, i16 addrspace(1)* %4274, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4276 = uitofp i16 %4275 to float
  %4277 = fmul contract float %4276, %4276
  %4278 = fadd contract float %4270, %4276
  %4279 = fadd contract float %4269, %4277
  %4280 = add nuw nsw i32 %4267, 1
  %4281 = add nuw nsw i32 %4268, 1
  %4282 = add i32 %4271, 1
  %4283 = icmp eq i32 %4282, %17
  br i1 %4283, label %4284, label %4266, !llvm.loop !35

4284:                                             ; preds = %4257, %4266, %3
  %4285 = phi float [ 0.000000e+00, %3 ], [ %4258, %4257 ], [ %4278, %4266 ]
  %4286 = phi float [ 0.000000e+00, %3 ], [ %4259, %4257 ], [ %4279, %4266 ]
  %4287 = phi i32 [ 0, %3 ], [ %4260, %4257 ], [ %4280, %4266 ]
  %4288 = sitofp i32 %4287 to float
  %4289 = fdiv contract float %4285, %4288
  %4290 = fdiv contract float %4286, %4288
  %4291 = fmul contract float %4289, %4289
  %4292 = fsub contract float %4290, %4291
  %4293 = fcmp olt float %4292, 0x39F0000000000000
  %4294 = select i1 %4293, float 0x41F0000000000000, float 1.000000e+00
  %4295 = fmul float %4292, %4294
  %4296 = tail call float @llvm.sqrt.f32(float %4295)
  %4297 = bitcast float %4296 to i32
  %4298 = add nsw i32 %4297, -1
  %4299 = bitcast i32 %4298 to float
  %4300 = add nsw i32 %4297, 1
  %4301 = bitcast i32 %4300 to float
  %4302 = tail call i1 @llvm.amdgcn.class.f32(float %4295, i32 608)
  %4303 = select i1 %4293, float 0x3EF0000000000000, float 1.000000e+00
  %4304 = fneg float %4301
  %4305 = tail call float @llvm.fma.f32(float %4304, float %4296, float %4295)
  %4306 = fcmp ogt float %4305, 0.000000e+00
  %4307 = fneg float %4299
  %4308 = tail call float @llvm.fma.f32(float %4307, float %4296, float %4295)
  %4309 = fcmp ole float %4308, 0.000000e+00
  %4310 = select i1 %4309, float %4299, float %4296
  %4311 = select i1 %4306, float %4301, float %4310
  %4312 = fmul float %4303, %4311
  %4313 = select i1 %4302, float %4295, float %4312
  %4314 = fmul contract float %4313, 2.000000e+00
  %4315 = fadd contract float %4289, -1.275000e+02
  %4316 = tail call float @llvm.fabs.f32(float %4315)
  %4317 = fcmp contract ogt float %4316, 0x3EB0C6F7A0000000
  br i1 %4317, label %21, label %4399, !llvm.loop !15

4318:                                             ; preds = %4318, %19
  %4319 = phi i32 [ 0, %19 ], [ %4395, %4318 ]
  %4320 = phi i32 [ 0, %19 ], [ %4396, %4318 ]
  %4321 = phi float [ 0.000000e+00, %19 ], [ %4394, %4318 ]
  %4322 = phi float [ 0.000000e+00, %19 ], [ %4393, %4318 ]
  %4323 = phi i32 [ 0, %19 ], [ %4397, %4318 ]
  %4324 = add nsw i32 %4320, %14
  %4325 = sext i32 %4324 to i64
  %4326 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4325
  %4327 = load i16, i16 addrspace(1)* %4326, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4328 = uitofp i16 %4327 to float
  %4329 = fmul contract float %4328, %4328
  %4330 = fadd contract float %4322, %4328
  %4331 = fadd contract float %4321, %4329
  %4332 = or i32 %4320, 1
  %4333 = add nsw i32 %4332, %14
  %4334 = sext i32 %4333 to i64
  %4335 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4334
  %4336 = load i16, i16 addrspace(1)* %4335, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4337 = uitofp i16 %4336 to float
  %4338 = fmul contract float %4337, %4337
  %4339 = fadd contract float %4330, %4337
  %4340 = fadd contract float %4331, %4338
  %4341 = or i32 %4320, 2
  %4342 = add nsw i32 %4341, %14
  %4343 = sext i32 %4342 to i64
  %4344 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4343
  %4345 = load i16, i16 addrspace(1)* %4344, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4346 = uitofp i16 %4345 to float
  %4347 = fmul contract float %4346, %4346
  %4348 = fadd contract float %4339, %4346
  %4349 = fadd contract float %4340, %4347
  %4350 = or i32 %4320, 3
  %4351 = add nsw i32 %4350, %14
  %4352 = sext i32 %4351 to i64
  %4353 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4352
  %4354 = load i16, i16 addrspace(1)* %4353, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4355 = uitofp i16 %4354 to float
  %4356 = fmul contract float %4355, %4355
  %4357 = fadd contract float %4348, %4355
  %4358 = fadd contract float %4349, %4356
  %4359 = or i32 %4320, 4
  %4360 = add nsw i32 %4359, %14
  %4361 = sext i32 %4360 to i64
  %4362 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4361
  %4363 = load i16, i16 addrspace(1)* %4362, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4364 = uitofp i16 %4363 to float
  %4365 = fmul contract float %4364, %4364
  %4366 = fadd contract float %4357, %4364
  %4367 = fadd contract float %4358, %4365
  %4368 = or i32 %4320, 5
  %4369 = add nsw i32 %4368, %14
  %4370 = sext i32 %4369 to i64
  %4371 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4370
  %4372 = load i16, i16 addrspace(1)* %4371, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4373 = uitofp i16 %4372 to float
  %4374 = fmul contract float %4373, %4373
  %4375 = fadd contract float %4366, %4373
  %4376 = fadd contract float %4367, %4374
  %4377 = or i32 %4320, 6
  %4378 = add nsw i32 %4377, %14
  %4379 = sext i32 %4378 to i64
  %4380 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4379
  %4381 = load i16, i16 addrspace(1)* %4380, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4382 = uitofp i16 %4381 to float
  %4383 = fmul contract float %4382, %4382
  %4384 = fadd contract float %4375, %4382
  %4385 = fadd contract float %4376, %4383
  %4386 = or i32 %4320, 7
  %4387 = add nsw i32 %4386, %14
  %4388 = sext i32 %4387 to i64
  %4389 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4388
  %4390 = load i16, i16 addrspace(1)* %4389, align 2, !tbaa !7, !amdgpu.noclobber !5
  %4391 = uitofp i16 %4390 to float
  %4392 = fmul contract float %4391, %4391
  %4393 = fadd contract float %4384, %4391
  %4394 = fadd contract float %4385, %4392
  %4395 = add nuw nsw i32 %4319, 8
  %4396 = add nuw nsw i32 %4320, 8
  %4397 = add i32 %4323, 8
  %4398 = icmp eq i32 %4397, %20
  br i1 %4398, label %4257, label %4318, !llvm.loop !11

4399:                                             ; preds = %4227, %4015, %3803, %3591, %3379, %3167, %2955, %2743, %2531, %2319, %2107, %1895, %1683, %1471, %1259, %1047, %835, %623, %411, %199, %4284
  %4400 = phi i32 [ %4287, %4284 ], [ %202, %199 ], [ %414, %411 ], [ %626, %623 ], [ %838, %835 ], [ %1050, %1047 ], [ %1262, %1259 ], [ %1474, %1471 ], [ %1686, %1683 ], [ %1898, %1895 ], [ %2110, %2107 ], [ %2322, %2319 ], [ %2534, %2531 ], [ %2746, %2743 ], [ %2958, %2955 ], [ %3170, %3167 ], [ %3382, %3379 ], [ %3594, %3591 ], [ %3806, %3803 ], [ %4018, %4015 ], [ %4230, %4227 ]
  %4401 = phi float [ %4289, %4284 ], [ %204, %199 ], [ %416, %411 ], [ %628, %623 ], [ %840, %835 ], [ %1052, %1047 ], [ %1264, %1259 ], [ %1476, %1471 ], [ %1688, %1683 ], [ %1900, %1895 ], [ %2112, %2107 ], [ %2324, %2319 ], [ %2536, %2531 ], [ %2748, %2743 ], [ %2960, %2955 ], [ %3172, %3167 ], [ %3384, %3379 ], [ %3596, %3591 ], [ %3808, %3803 ], [ %4020, %4015 ], [ %4232, %4227 ]
  %4402 = phi float [ %4313, %4284 ], [ %228, %199 ], [ %440, %411 ], [ %652, %623 ], [ %864, %835 ], [ %1076, %1047 ], [ %1288, %1259 ], [ %1500, %1471 ], [ %1712, %1683 ], [ %1924, %1895 ], [ %2136, %2107 ], [ %2348, %2319 ], [ %2560, %2531 ], [ %2772, %2743 ], [ %2984, %2955 ], [ %3196, %3167 ], [ %3408, %3379 ], [ %3620, %3591 ], [ %3832, %3803 ], [ %4044, %4015 ], [ %4256, %4227 ]
  %4403 = phi i1 [ false, %4284 ], [ false, %199 ], [ false, %411 ], [ false, %623 ], [ false, %835 ], [ false, %1047 ], [ false, %1259 ], [ false, %1471 ], [ false, %1683 ], [ false, %1895 ], [ false, %2107 ], [ false, %2319 ], [ false, %2531 ], [ false, %2743 ], [ false, %2955 ], [ false, %3167 ], [ false, %3379 ], [ false, %3591 ], [ false, %3803 ], [ false, %4015 ], [ true, %4227 ]
  %4404 = icmp eq i32 %4400, 0
  %4405 = or i1 %4404, %4403
  %4406 = fcmp contract une float %4401, 0.000000e+00
  %4407 = xor i1 %4405, true
  %4408 = select i1 %4407, i1 %4406, i1 false
  %4409 = fcmp contract une float %4402, 0.000000e+00
  %4410 = select i1 %4408, i1 %4409, i1 false
  %4411 = select i1 %4410, i1 true, i1 %13
  %4412 = select i1 %4410, float %4401, float 1.275000e+02
  %4413 = select i1 %4410, float %4402, float 0.000000e+00
  br i1 %4411, label %4512, label %4414

4414:                                             ; preds = %4399
  %4415 = icmp ult i32 %1, 4
  br i1 %4415, label %4503, label %4416

4416:                                             ; preds = %4414
  %4417 = and i32 %1, -4
  %4418 = add i32 %1, -4
  %4419 = lshr i32 %4418, 2
  %4420 = add nuw nsw i32 %4419, 1
  %4421 = and i32 %4420, 7
  %4422 = icmp ult i32 %4418, 28
  br i1 %4422, label %4486, label %4423

4423:                                             ; preds = %4416
  %4424 = and i32 %4420, -8
  br label %4425

4425:                                             ; preds = %4425, %4423
  %4426 = phi i32 [ 0, %4423 ], [ %4483, %4425 ]
  %4427 = phi i32 [ 0, %4423 ], [ %4484, %4425 ]
  %4428 = add nsw i32 %4426, %14
  %4429 = sext i32 %4428 to i64
  %4430 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4429
  %4431 = bitcast i16 addrspace(1)* %4430 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4431, align 2, !tbaa !7
  %4432 = getelementptr inbounds i16, i16 addrspace(1)* %4430, i64 2
  %4433 = bitcast i16 addrspace(1)* %4432 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4433, align 2, !tbaa !7
  %4434 = or i32 %4426, 4
  %4435 = add nsw i32 %4434, %14
  %4436 = sext i32 %4435 to i64
  %4437 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4436
  %4438 = bitcast i16 addrspace(1)* %4437 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4438, align 2, !tbaa !7
  %4439 = getelementptr inbounds i16, i16 addrspace(1)* %4437, i64 2
  %4440 = bitcast i16 addrspace(1)* %4439 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4440, align 2, !tbaa !7
  %4441 = or i32 %4426, 8
  %4442 = add nsw i32 %4441, %14
  %4443 = sext i32 %4442 to i64
  %4444 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4443
  %4445 = bitcast i16 addrspace(1)* %4444 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4445, align 2, !tbaa !7
  %4446 = getelementptr inbounds i16, i16 addrspace(1)* %4444, i64 2
  %4447 = bitcast i16 addrspace(1)* %4446 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4447, align 2, !tbaa !7
  %4448 = or i32 %4426, 12
  %4449 = add nsw i32 %4448, %14
  %4450 = sext i32 %4449 to i64
  %4451 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4450
  %4452 = bitcast i16 addrspace(1)* %4451 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4452, align 2, !tbaa !7
  %4453 = getelementptr inbounds i16, i16 addrspace(1)* %4451, i64 2
  %4454 = bitcast i16 addrspace(1)* %4453 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4454, align 2, !tbaa !7
  %4455 = or i32 %4426, 16
  %4456 = add nsw i32 %4455, %14
  %4457 = sext i32 %4456 to i64
  %4458 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4457
  %4459 = bitcast i16 addrspace(1)* %4458 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4459, align 2, !tbaa !7
  %4460 = getelementptr inbounds i16, i16 addrspace(1)* %4458, i64 2
  %4461 = bitcast i16 addrspace(1)* %4460 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4461, align 2, !tbaa !7
  %4462 = or i32 %4426, 20
  %4463 = add nsw i32 %4462, %14
  %4464 = sext i32 %4463 to i64
  %4465 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4464
  %4466 = bitcast i16 addrspace(1)* %4465 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4466, align 2, !tbaa !7
  %4467 = getelementptr inbounds i16, i16 addrspace(1)* %4465, i64 2
  %4468 = bitcast i16 addrspace(1)* %4467 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4468, align 2, !tbaa !7
  %4469 = or i32 %4426, 24
  %4470 = add nsw i32 %4469, %14
  %4471 = sext i32 %4470 to i64
  %4472 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4471
  %4473 = bitcast i16 addrspace(1)* %4472 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4473, align 2, !tbaa !7
  %4474 = getelementptr inbounds i16, i16 addrspace(1)* %4472, i64 2
  %4475 = bitcast i16 addrspace(1)* %4474 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4475, align 2, !tbaa !7
  %4476 = or i32 %4426, 28
  %4477 = add nsw i32 %4476, %14
  %4478 = sext i32 %4477 to i64
  %4479 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4478
  %4480 = bitcast i16 addrspace(1)* %4479 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4480, align 2, !tbaa !7
  %4481 = getelementptr inbounds i16, i16 addrspace(1)* %4479, i64 2
  %4482 = bitcast i16 addrspace(1)* %4481 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4482, align 2, !tbaa !7
  %4483 = add nuw i32 %4426, 32
  %4484 = add i32 %4427, 8
  %4485 = icmp eq i32 %4484, %4424
  br i1 %4485, label %4486, label %4425, !llvm.loop !36

4486:                                             ; preds = %4425, %4416
  %4487 = phi i32 [ 0, %4416 ], [ %4483, %4425 ]
  %4488 = icmp eq i32 %4421, 0
  br i1 %4488, label %4501, label %4489

4489:                                             ; preds = %4486, %4489
  %4490 = phi i32 [ %4498, %4489 ], [ %4487, %4486 ]
  %4491 = phi i32 [ %4499, %4489 ], [ 0, %4486 ]
  %4492 = add nsw i32 %4490, %14
  %4493 = sext i32 %4492 to i64
  %4494 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4493
  %4495 = bitcast i16 addrspace(1)* %4494 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4495, align 2, !tbaa !7
  %4496 = getelementptr inbounds i16, i16 addrspace(1)* %4494, i64 2
  %4497 = bitcast i16 addrspace(1)* %4496 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4497, align 2, !tbaa !7
  %4498 = add nuw i32 %4490, 4
  %4499 = add i32 %4491, 1
  %4500 = icmp eq i32 %4499, %4421
  br i1 %4500, label %4501, label %4489, !llvm.loop !38

4501:                                             ; preds = %4489, %4486
  %4502 = icmp eq i32 %4417, %1
  br i1 %4502, label %4512, label %4503

4503:                                             ; preds = %4414, %4501
  %4504 = phi i32 [ 0, %4414 ], [ %4417, %4501 ]
  br label %4505

4505:                                             ; preds = %4503, %4505
  %4506 = phi i32 [ %4510, %4505 ], [ %4504, %4503 ]
  %4507 = add nsw i32 %4506, %14
  %4508 = sext i32 %4507 to i64
  %4509 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4508
  store i16 127, i16 addrspace(1)* %4509, align 2, !tbaa !7
  %4510 = add nuw nsw i32 %4506, 1
  %4511 = icmp eq i32 %4510, %1
  br i1 %4511, label %4512, label %4505, !llvm.loop !39

4512:                                             ; preds = %4505, %4501, %4399
  %4513 = phi float [ %4412, %4399 ], [ 1.275000e+02, %4501 ], [ 1.275000e+02, %4505 ]
  %4514 = phi float [ %4413, %4399 ], [ 0.000000e+00, %4501 ], [ 0.000000e+00, %4505 ]
  %4515 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %11
  store float %4513, float addrspace(3)* %4515, align 4, !tbaa !41
  %4516 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %11
  store float %4514, float addrspace(3)* %4516, align 4, !tbaa !41
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %4517 = and i32 %9, 7
  %4518 = icmp ult i16 %8, 8
  br i1 %4518, label %4521, label %4519

4519:                                             ; preds = %4512
  %4520 = and i32 %9, 2040
  br label %4574

4521:                                             ; preds = %4574, %4512
  %4522 = phi float [ undef, %4512 ], [ %4623, %4574 ]
  %4523 = phi float [ undef, %4512 ], [ %4625, %4574 ]
  %4524 = phi i32 [ 0, %4512 ], [ %4626, %4574 ]
  %4525 = phi float [ 0.000000e+00, %4512 ], [ %4623, %4574 ]
  %4526 = phi float [ 0.000000e+00, %4512 ], [ %4625, %4574 ]
  %4527 = icmp eq i32 %4517, 0
  br i1 %4527, label %4541, label %4528

4528:                                             ; preds = %4521, %4528
  %4529 = phi i32 [ %4538, %4528 ], [ %4524, %4521 ]
  %4530 = phi float [ %4535, %4528 ], [ %4525, %4521 ]
  %4531 = phi float [ %4537, %4528 ], [ %4526, %4521 ]
  %4532 = phi i32 [ %4539, %4528 ], [ 0, %4521 ]
  %4533 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4529
  %4534 = load float, float addrspace(3)* %4533, align 4, !tbaa !41
  %4535 = fadd contract float %4530, %4534
  %4536 = fmul contract float %4534, %4534
  %4537 = fadd contract float %4531, %4536
  %4538 = add nuw nsw i32 %4529, 1
  %4539 = add i32 %4532, 1
  %4540 = icmp eq i32 %4539, %4517
  br i1 %4540, label %4541, label %4528, !llvm.loop !43

4541:                                             ; preds = %4528, %4521
  %4542 = phi float [ %4522, %4521 ], [ %4535, %4528 ]
  %4543 = phi float [ %4523, %4521 ], [ %4537, %4528 ]
  %4544 = uitofp i16 %8 to float
  %4545 = fdiv contract float %4542, %4544
  %4546 = fdiv contract float %4543, %4544
  %4547 = fmul contract float %4545, %4545
  %4548 = fsub contract float %4546, %4547
  %4549 = fcmp olt float %4548, 0x39F0000000000000
  %4550 = select i1 %4549, float 0x41F0000000000000, float 1.000000e+00
  %4551 = fmul float %4548, %4550
  %4552 = tail call float @llvm.sqrt.f32(float %4551)
  %4553 = bitcast float %4552 to i32
  %4554 = add nsw i32 %4553, -1
  %4555 = bitcast i32 %4554 to float
  %4556 = add nsw i32 %4553, 1
  %4557 = bitcast i32 %4556 to float
  %4558 = tail call i1 @llvm.amdgcn.class.f32(float %4551, i32 608)
  %4559 = select i1 %4549, float 0x3EF0000000000000, float 1.000000e+00
  %4560 = fneg float %4557
  %4561 = tail call float @llvm.fma.f32(float %4560, float %4552, float %4551)
  %4562 = fcmp ogt float %4561, 0.000000e+00
  %4563 = fneg float %4555
  %4564 = tail call float @llvm.fma.f32(float %4563, float %4552, float %4551)
  %4565 = fcmp ole float %4564, 0.000000e+00
  %4566 = select i1 %4565, float %4555, float %4552
  %4567 = select i1 %4562, float %4557, float %4566
  %4568 = fmul float %4559, %4567
  %4569 = select i1 %4558, float %4551, float %4568
  %4570 = and i32 %9, 7
  %4571 = icmp ult i16 %8, 8
  br i1 %4571, label %4629, label %4572

4572:                                             ; preds = %4541
  %4573 = and i32 %9, 2040
  br label %4778

4574:                                             ; preds = %4574, %4519
  %4575 = phi i32 [ 0, %4519 ], [ %4626, %4574 ]
  %4576 = phi float [ 0.000000e+00, %4519 ], [ %4623, %4574 ]
  %4577 = phi float [ 0.000000e+00, %4519 ], [ %4625, %4574 ]
  %4578 = phi i32 [ 0, %4519 ], [ %4627, %4574 ]
  %4579 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4575
  %4580 = load float, float addrspace(3)* %4579, align 16, !tbaa !41
  %4581 = fadd contract float %4576, %4580
  %4582 = fmul contract float %4580, %4580
  %4583 = fadd contract float %4577, %4582
  %4584 = or i32 %4575, 1
  %4585 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4584
  %4586 = load float, float addrspace(3)* %4585, align 4, !tbaa !41
  %4587 = fadd contract float %4581, %4586
  %4588 = fmul contract float %4586, %4586
  %4589 = fadd contract float %4583, %4588
  %4590 = or i32 %4575, 2
  %4591 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4590
  %4592 = load float, float addrspace(3)* %4591, align 8, !tbaa !41
  %4593 = fadd contract float %4587, %4592
  %4594 = fmul contract float %4592, %4592
  %4595 = fadd contract float %4589, %4594
  %4596 = or i32 %4575, 3
  %4597 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4596
  %4598 = load float, float addrspace(3)* %4597, align 4, !tbaa !41
  %4599 = fadd contract float %4593, %4598
  %4600 = fmul contract float %4598, %4598
  %4601 = fadd contract float %4595, %4600
  %4602 = or i32 %4575, 4
  %4603 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4602
  %4604 = load float, float addrspace(3)* %4603, align 16, !tbaa !41
  %4605 = fadd contract float %4599, %4604
  %4606 = fmul contract float %4604, %4604
  %4607 = fadd contract float %4601, %4606
  %4608 = or i32 %4575, 5
  %4609 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4608
  %4610 = load float, float addrspace(3)* %4609, align 4, !tbaa !41
  %4611 = fadd contract float %4605, %4610
  %4612 = fmul contract float %4610, %4610
  %4613 = fadd contract float %4607, %4612
  %4614 = or i32 %4575, 6
  %4615 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4614
  %4616 = load float, float addrspace(3)* %4615, align 8, !tbaa !41
  %4617 = fadd contract float %4611, %4616
  %4618 = fmul contract float %4616, %4616
  %4619 = fadd contract float %4613, %4618
  %4620 = or i32 %4575, 7
  %4621 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %4620
  %4622 = load float, float addrspace(3)* %4621, align 4, !tbaa !41
  %4623 = fadd contract float %4617, %4622
  %4624 = fmul contract float %4622, %4622
  %4625 = fadd contract float %4619, %4624
  %4626 = add nuw nsw i32 %4575, 8
  %4627 = add i32 %4578, 8
  %4628 = icmp eq i32 %4627, %4520
  br i1 %4628, label %4521, label %4574, !llvm.loop !44

4629:                                             ; preds = %4778, %4541
  %4630 = phi float [ undef, %4541 ], [ %4827, %4778 ]
  %4631 = phi float [ undef, %4541 ], [ %4829, %4778 ]
  %4632 = phi i32 [ 0, %4541 ], [ %4830, %4778 ]
  %4633 = phi float [ 0.000000e+00, %4541 ], [ %4827, %4778 ]
  %4634 = phi float [ 0.000000e+00, %4541 ], [ %4829, %4778 ]
  %4635 = icmp eq i32 %4570, 0
  br i1 %4635, label %4649, label %4636

4636:                                             ; preds = %4629, %4636
  %4637 = phi i32 [ %4646, %4636 ], [ %4632, %4629 ]
  %4638 = phi float [ %4643, %4636 ], [ %4633, %4629 ]
  %4639 = phi float [ %4645, %4636 ], [ %4634, %4629 ]
  %4640 = phi i32 [ %4647, %4636 ], [ 0, %4629 ]
  %4641 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4637
  %4642 = load float, float addrspace(3)* %4641, align 4, !tbaa !41
  %4643 = fadd contract float %4638, %4642
  %4644 = fmul contract float %4642, %4642
  %4645 = fadd contract float %4639, %4644
  %4646 = add nuw nsw i32 %4637, 1
  %4647 = add i32 %4640, 1
  %4648 = icmp eq i32 %4647, %4570
  br i1 %4648, label %4649, label %4636, !llvm.loop !45

4649:                                             ; preds = %4636, %4629
  %4650 = phi float [ %4630, %4629 ], [ %4643, %4636 ]
  %4651 = phi float [ %4631, %4629 ], [ %4645, %4636 ]
  %4652 = fmul contract float %4569, 3.000000e+00
  %4653 = fdiv contract float %4650, %4544
  %4654 = fdiv contract float %4651, %4544
  %4655 = fmul contract float %4653, %4653
  %4656 = fsub contract float %4654, %4655
  %4657 = fcmp olt float %4656, 0x39F0000000000000
  %4658 = select i1 %4657, float 0x41F0000000000000, float 1.000000e+00
  %4659 = fmul float %4656, %4658
  %4660 = tail call float @llvm.sqrt.f32(float %4659)
  %4661 = bitcast float %4660 to i32
  %4662 = add nsw i32 %4661, -1
  %4663 = bitcast i32 %4662 to float
  %4664 = add nsw i32 %4661, 1
  %4665 = bitcast i32 %4664 to float
  %4666 = tail call i1 @llvm.amdgcn.class.f32(float %4659, i32 608)
  %4667 = select i1 %4657, float 0x3EF0000000000000, float 1.000000e+00
  %4668 = fneg float %4665
  %4669 = tail call float @llvm.fma.f32(float %4668, float %4660, float %4659)
  %4670 = fcmp ogt float %4669, 0.000000e+00
  %4671 = fneg float %4663
  %4672 = tail call float @llvm.fma.f32(float %4671, float %4660, float %4659)
  %4673 = fcmp ole float %4672, 0.000000e+00
  %4674 = select i1 %4673, float %4663, float %4660
  %4675 = select i1 %4670, float %4665, float %4674
  %4676 = fmul float %4667, %4675
  %4677 = select i1 %4666, float %4659, float %4676
  %4678 = fmul contract float %4677, 3.000000e+00
  %4679 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE6g_mean, i32 0, i32 %11
  %4680 = load float, float addrspace(3)* %4679, align 4, !tbaa !41
  %4681 = fsub contract float %4680, %4545
  %4682 = fcmp contract ogt float %4681, %4652
  %4683 = fneg contract float %4652
  %4684 = fcmp contract olt float %4681, %4683
  %4685 = or i1 %4682, %4684
  br i1 %4685, label %4686, label %4840

4686:                                             ; preds = %4649
  br i1 %13, label %5075, label %4687

4687:                                             ; preds = %4686
  %4688 = icmp ult i32 %1, 4
  br i1 %4688, label %4776, label %4689

4689:                                             ; preds = %4687
  %4690 = and i32 %1, -4
  %4691 = add i32 %1, -4
  %4692 = lshr i32 %4691, 2
  %4693 = add nuw nsw i32 %4692, 1
  %4694 = and i32 %4693, 7
  %4695 = icmp ult i32 %4691, 28
  br i1 %4695, label %4759, label %4696

4696:                                             ; preds = %4689
  %4697 = and i32 %4693, -8
  br label %4698

4698:                                             ; preds = %4698, %4696
  %4699 = phi i32 [ 0, %4696 ], [ %4756, %4698 ]
  %4700 = phi i32 [ 0, %4696 ], [ %4757, %4698 ]
  %4701 = add nsw i32 %4699, %14
  %4702 = sext i32 %4701 to i64
  %4703 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4702
  %4704 = bitcast i16 addrspace(1)* %4703 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4704, align 2, !tbaa !7
  %4705 = getelementptr inbounds i16, i16 addrspace(1)* %4703, i64 2
  %4706 = bitcast i16 addrspace(1)* %4705 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4706, align 2, !tbaa !7
  %4707 = or i32 %4699, 4
  %4708 = add nsw i32 %4707, %14
  %4709 = sext i32 %4708 to i64
  %4710 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4709
  %4711 = bitcast i16 addrspace(1)* %4710 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4711, align 2, !tbaa !7
  %4712 = getelementptr inbounds i16, i16 addrspace(1)* %4710, i64 2
  %4713 = bitcast i16 addrspace(1)* %4712 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4713, align 2, !tbaa !7
  %4714 = or i32 %4699, 8
  %4715 = add nsw i32 %4714, %14
  %4716 = sext i32 %4715 to i64
  %4717 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4716
  %4718 = bitcast i16 addrspace(1)* %4717 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4718, align 2, !tbaa !7
  %4719 = getelementptr inbounds i16, i16 addrspace(1)* %4717, i64 2
  %4720 = bitcast i16 addrspace(1)* %4719 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4720, align 2, !tbaa !7
  %4721 = or i32 %4699, 12
  %4722 = add nsw i32 %4721, %14
  %4723 = sext i32 %4722 to i64
  %4724 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4723
  %4725 = bitcast i16 addrspace(1)* %4724 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4725, align 2, !tbaa !7
  %4726 = getelementptr inbounds i16, i16 addrspace(1)* %4724, i64 2
  %4727 = bitcast i16 addrspace(1)* %4726 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4727, align 2, !tbaa !7
  %4728 = or i32 %4699, 16
  %4729 = add nsw i32 %4728, %14
  %4730 = sext i32 %4729 to i64
  %4731 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4730
  %4732 = bitcast i16 addrspace(1)* %4731 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4732, align 2, !tbaa !7
  %4733 = getelementptr inbounds i16, i16 addrspace(1)* %4731, i64 2
  %4734 = bitcast i16 addrspace(1)* %4733 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4734, align 2, !tbaa !7
  %4735 = or i32 %4699, 20
  %4736 = add nsw i32 %4735, %14
  %4737 = sext i32 %4736 to i64
  %4738 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4737
  %4739 = bitcast i16 addrspace(1)* %4738 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4739, align 2, !tbaa !7
  %4740 = getelementptr inbounds i16, i16 addrspace(1)* %4738, i64 2
  %4741 = bitcast i16 addrspace(1)* %4740 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4741, align 2, !tbaa !7
  %4742 = or i32 %4699, 24
  %4743 = add nsw i32 %4742, %14
  %4744 = sext i32 %4743 to i64
  %4745 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4744
  %4746 = bitcast i16 addrspace(1)* %4745 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4746, align 2, !tbaa !7
  %4747 = getelementptr inbounds i16, i16 addrspace(1)* %4745, i64 2
  %4748 = bitcast i16 addrspace(1)* %4747 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4748, align 2, !tbaa !7
  %4749 = or i32 %4699, 28
  %4750 = add nsw i32 %4749, %14
  %4751 = sext i32 %4750 to i64
  %4752 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4751
  %4753 = bitcast i16 addrspace(1)* %4752 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4753, align 2, !tbaa !7
  %4754 = getelementptr inbounds i16, i16 addrspace(1)* %4752, i64 2
  %4755 = bitcast i16 addrspace(1)* %4754 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4755, align 2, !tbaa !7
  %4756 = add nuw i32 %4699, 32
  %4757 = add i32 %4700, 8
  %4758 = icmp eq i32 %4757, %4697
  br i1 %4758, label %4759, label %4698, !llvm.loop !46

4759:                                             ; preds = %4698, %4689
  %4760 = phi i32 [ 0, %4689 ], [ %4756, %4698 ]
  %4761 = icmp eq i32 %4694, 0
  br i1 %4761, label %4774, label %4762

4762:                                             ; preds = %4759, %4762
  %4763 = phi i32 [ %4771, %4762 ], [ %4760, %4759 ]
  %4764 = phi i32 [ %4772, %4762 ], [ 0, %4759 ]
  %4765 = add nsw i32 %4763, %14
  %4766 = sext i32 %4765 to i64
  %4767 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4766
  %4768 = bitcast i16 addrspace(1)* %4767 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4768, align 2, !tbaa !7
  %4769 = getelementptr inbounds i16, i16 addrspace(1)* %4767, i64 2
  %4770 = bitcast i16 addrspace(1)* %4769 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4770, align 2, !tbaa !7
  %4771 = add nuw i32 %4763, 4
  %4772 = add i32 %4764, 1
  %4773 = icmp eq i32 %4772, %4694
  br i1 %4773, label %4774, label %4762, !llvm.loop !47

4774:                                             ; preds = %4762, %4759
  %4775 = icmp eq i32 %4690, %1
  br i1 %4775, label %5075, label %4776

4776:                                             ; preds = %4687, %4774
  %4777 = phi i32 [ 0, %4687 ], [ %4690, %4774 ]
  br label %4833

4778:                                             ; preds = %4778, %4572
  %4779 = phi i32 [ 0, %4572 ], [ %4830, %4778 ]
  %4780 = phi float [ 0.000000e+00, %4572 ], [ %4827, %4778 ]
  %4781 = phi float [ 0.000000e+00, %4572 ], [ %4829, %4778 ]
  %4782 = phi i32 [ 0, %4572 ], [ %4831, %4778 ]
  %4783 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4779
  %4784 = load float, float addrspace(3)* %4783, align 16, !tbaa !41
  %4785 = fadd contract float %4780, %4784
  %4786 = fmul contract float %4784, %4784
  %4787 = fadd contract float %4781, %4786
  %4788 = or i32 %4779, 1
  %4789 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4788
  %4790 = load float, float addrspace(3)* %4789, align 4, !tbaa !41
  %4791 = fadd contract float %4785, %4790
  %4792 = fmul contract float %4790, %4790
  %4793 = fadd contract float %4787, %4792
  %4794 = or i32 %4779, 2
  %4795 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4794
  %4796 = load float, float addrspace(3)* %4795, align 8, !tbaa !41
  %4797 = fadd contract float %4791, %4796
  %4798 = fmul contract float %4796, %4796
  %4799 = fadd contract float %4793, %4798
  %4800 = or i32 %4779, 3
  %4801 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4800
  %4802 = load float, float addrspace(3)* %4801, align 4, !tbaa !41
  %4803 = fadd contract float %4797, %4802
  %4804 = fmul contract float %4802, %4802
  %4805 = fadd contract float %4799, %4804
  %4806 = or i32 %4779, 4
  %4807 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4806
  %4808 = load float, float addrspace(3)* %4807, align 16, !tbaa !41
  %4809 = fadd contract float %4803, %4808
  %4810 = fmul contract float %4808, %4808
  %4811 = fadd contract float %4805, %4810
  %4812 = or i32 %4779, 5
  %4813 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4812
  %4814 = load float, float addrspace(3)* %4813, align 4, !tbaa !41
  %4815 = fadd contract float %4809, %4814
  %4816 = fmul contract float %4814, %4814
  %4817 = fadd contract float %4811, %4816
  %4818 = or i32 %4779, 6
  %4819 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4818
  %4820 = load float, float addrspace(3)* %4819, align 8, !tbaa !41
  %4821 = fadd contract float %4815, %4820
  %4822 = fmul contract float %4820, %4820
  %4823 = fadd contract float %4817, %4822
  %4824 = or i32 %4779, 7
  %4825 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %4824
  %4826 = load float, float addrspace(3)* %4825, align 4, !tbaa !41
  %4827 = fadd contract float %4821, %4826
  %4828 = fmul contract float %4826, %4826
  %4829 = fadd contract float %4823, %4828
  %4830 = add nuw nsw i32 %4779, 8
  %4831 = add i32 %4782, 8
  %4832 = icmp eq i32 %4831, %4573
  br i1 %4832, label %4629, label %4778, !llvm.loop !48

4833:                                             ; preds = %4776, %4833
  %4834 = phi i32 [ %4838, %4833 ], [ %4777, %4776 ]
  %4835 = add nsw i32 %4834, %14
  %4836 = sext i32 %4835 to i64
  %4837 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4836
  store i16 127, i16 addrspace(1)* %4837, align 2, !tbaa !7
  %4838 = add nuw nsw i32 %4834, 1
  %4839 = icmp eq i32 %4838, %1
  br i1 %4839, label %5075, label %4833, !llvm.loop !49

4840:                                             ; preds = %4649
  %4841 = getelementptr inbounds [1024 x float], [1024 x float] addrspace(3)* @_ZZ27zero_dm_outliers_kernel_onePtiiE7g_stdev, i32 0, i32 %11
  %4842 = load float, float addrspace(3)* %4841, align 4, !tbaa !41
  %4843 = fsub contract float %4842, %4653
  %4844 = fcmp contract ogt float %4843, %4678
  %4845 = fneg contract float %4678
  %4846 = fcmp contract olt float %4843, %4845
  %4847 = or i1 %4844, %4846
  br i1 %4847, label %4960, label %4848

4848:                                             ; preds = %4840
  br i1 %13, label %5075, label %4849

4849:                                             ; preds = %4848
  %4850 = fmul contract float %4514, 4.000000e+00
  %4851 = fmul contract float %4514, -4.000000e+00
  %4852 = icmp eq i32 %1, 1
  br i1 %4852, label %4958, label %4853

4853:                                             ; preds = %4849
  %4854 = and i32 %1, -2
  %4855 = insertelement <2 x float> poison, float %4513, i64 0
  %4856 = shufflevector <2 x float> %4855, <2 x float> poison, <2 x i32> zeroinitializer
  %4857 = insertelement <2 x float> poison, float %4850, i64 0
  %4858 = shufflevector <2 x float> %4857, <2 x float> poison, <2 x i32> zeroinitializer
  %4859 = insertelement <2 x float> poison, float %4851, i64 0
  %4860 = shufflevector <2 x float> %4859, <2 x float> poison, <2 x i32> zeroinitializer
  %4861 = add i32 %1, -2
  %4862 = lshr i32 %4861, 1
  %4863 = add nuw i32 %4862, 1
  %4864 = and i32 %4863, 3
  %4865 = icmp ult i32 %4861, 6
  br i1 %4865, label %4933, label %4866

4866:                                             ; preds = %4853
  %4867 = and i32 %4863, -4
  br label %4868

4868:                                             ; preds = %4868, %4866
  %4869 = phi i32 [ 0, %4866 ], [ %4930, %4868 ]
  %4870 = phi i32 [ 0, %4866 ], [ %4931, %4868 ]
  %4871 = add nsw i32 %4869, %14
  %4872 = sext i32 %4871 to i64
  %4873 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4872
  %4874 = bitcast i16 addrspace(1)* %4873 to <2 x i16> addrspace(1)*
  %4875 = load <2 x i16>, <2 x i16> addrspace(1)* %4874, align 2, !tbaa !7
  %4876 = uitofp <2 x i16> %4875 to <2 x float>
  %4877 = fsub contract <2 x float> %4876, %4856
  %4878 = fcmp contract olt <2 x float> %4877, %4858
  %4879 = fcmp contract ogt <2 x float> %4877, %4860
  %4880 = and <2 x i1> %4878, %4879
  %4881 = fadd contract <2 x float> %4877, <float 1.275000e+02, float 1.275000e+02>
  %4882 = fptoui <2 x float> %4881 to <2 x i16>
  %4883 = select <2 x i1> %4880, <2 x i16> %4882, <2 x i16> <i16 127, i16 127>
  %4884 = bitcast i16 addrspace(1)* %4873 to <2 x i16> addrspace(1)*
  store <2 x i16> %4883, <2 x i16> addrspace(1)* %4884, align 2, !tbaa !7
  %4885 = or i32 %4869, 2
  %4886 = add nsw i32 %4885, %14
  %4887 = sext i32 %4886 to i64
  %4888 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4887
  %4889 = bitcast i16 addrspace(1)* %4888 to <2 x i16> addrspace(1)*
  %4890 = load <2 x i16>, <2 x i16> addrspace(1)* %4889, align 2, !tbaa !7
  %4891 = uitofp <2 x i16> %4890 to <2 x float>
  %4892 = fsub contract <2 x float> %4891, %4856
  %4893 = fcmp contract olt <2 x float> %4892, %4858
  %4894 = fcmp contract ogt <2 x float> %4892, %4860
  %4895 = and <2 x i1> %4893, %4894
  %4896 = fadd contract <2 x float> %4892, <float 1.275000e+02, float 1.275000e+02>
  %4897 = fptoui <2 x float> %4896 to <2 x i16>
  %4898 = select <2 x i1> %4895, <2 x i16> %4897, <2 x i16> <i16 127, i16 127>
  %4899 = bitcast i16 addrspace(1)* %4888 to <2 x i16> addrspace(1)*
  store <2 x i16> %4898, <2 x i16> addrspace(1)* %4899, align 2, !tbaa !7
  %4900 = or i32 %4869, 4
  %4901 = add nsw i32 %4900, %14
  %4902 = sext i32 %4901 to i64
  %4903 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4902
  %4904 = bitcast i16 addrspace(1)* %4903 to <2 x i16> addrspace(1)*
  %4905 = load <2 x i16>, <2 x i16> addrspace(1)* %4904, align 2, !tbaa !7
  %4906 = uitofp <2 x i16> %4905 to <2 x float>
  %4907 = fsub contract <2 x float> %4906, %4856
  %4908 = fcmp contract olt <2 x float> %4907, %4858
  %4909 = fcmp contract ogt <2 x float> %4907, %4860
  %4910 = and <2 x i1> %4908, %4909
  %4911 = fadd contract <2 x float> %4907, <float 1.275000e+02, float 1.275000e+02>
  %4912 = fptoui <2 x float> %4911 to <2 x i16>
  %4913 = select <2 x i1> %4910, <2 x i16> %4912, <2 x i16> <i16 127, i16 127>
  %4914 = bitcast i16 addrspace(1)* %4903 to <2 x i16> addrspace(1)*
  store <2 x i16> %4913, <2 x i16> addrspace(1)* %4914, align 2, !tbaa !7
  %4915 = or i32 %4869, 6
  %4916 = add nsw i32 %4915, %14
  %4917 = sext i32 %4916 to i64
  %4918 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4917
  %4919 = bitcast i16 addrspace(1)* %4918 to <2 x i16> addrspace(1)*
  %4920 = load <2 x i16>, <2 x i16> addrspace(1)* %4919, align 2, !tbaa !7
  %4921 = uitofp <2 x i16> %4920 to <2 x float>
  %4922 = fsub contract <2 x float> %4921, %4856
  %4923 = fcmp contract olt <2 x float> %4922, %4858
  %4924 = fcmp contract ogt <2 x float> %4922, %4860
  %4925 = and <2 x i1> %4923, %4924
  %4926 = fadd contract <2 x float> %4922, <float 1.275000e+02, float 1.275000e+02>
  %4927 = fptoui <2 x float> %4926 to <2 x i16>
  %4928 = select <2 x i1> %4925, <2 x i16> %4927, <2 x i16> <i16 127, i16 127>
  %4929 = bitcast i16 addrspace(1)* %4918 to <2 x i16> addrspace(1)*
  store <2 x i16> %4928, <2 x i16> addrspace(1)* %4929, align 2, !tbaa !7
  %4930 = add nuw i32 %4869, 8
  %4931 = add i32 %4870, 4
  %4932 = icmp eq i32 %4931, %4867
  br i1 %4932, label %4933, label %4868, !llvm.loop !50

4933:                                             ; preds = %4868, %4853
  %4934 = phi i32 [ 0, %4853 ], [ %4930, %4868 ]
  %4935 = icmp eq i32 %4864, 0
  br i1 %4935, label %4956, label %4936

4936:                                             ; preds = %4933, %4936
  %4937 = phi i32 [ %4953, %4936 ], [ %4934, %4933 ]
  %4938 = phi i32 [ %4954, %4936 ], [ 0, %4933 ]
  %4939 = add nsw i32 %4937, %14
  %4940 = sext i32 %4939 to i64
  %4941 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4940
  %4942 = bitcast i16 addrspace(1)* %4941 to <2 x i16> addrspace(1)*
  %4943 = load <2 x i16>, <2 x i16> addrspace(1)* %4942, align 2, !tbaa !7
  %4944 = uitofp <2 x i16> %4943 to <2 x float>
  %4945 = fsub contract <2 x float> %4944, %4856
  %4946 = fcmp contract olt <2 x float> %4945, %4858
  %4947 = fcmp contract ogt <2 x float> %4945, %4860
  %4948 = and <2 x i1> %4946, %4947
  %4949 = fadd contract <2 x float> %4945, <float 1.275000e+02, float 1.275000e+02>
  %4950 = fptoui <2 x float> %4949 to <2 x i16>
  %4951 = select <2 x i1> %4948, <2 x i16> %4950, <2 x i16> <i16 127, i16 127>
  %4952 = bitcast i16 addrspace(1)* %4941 to <2 x i16> addrspace(1)*
  store <2 x i16> %4951, <2 x i16> addrspace(1)* %4952, align 2, !tbaa !7
  %4953 = add nuw i32 %4937, 2
  %4954 = add i32 %4938, 1
  %4955 = icmp eq i32 %4954, %4864
  br i1 %4955, label %4956, label %4936, !llvm.loop !51

4956:                                             ; preds = %4936, %4933
  %4957 = icmp eq i32 %4854, %1
  br i1 %4957, label %5075, label %4958

4958:                                             ; preds = %4849, %4956
  %4959 = phi i32 [ 0, %4849 ], [ %4854, %4956 ]
  br label %5059

4960:                                             ; preds = %4840
  br i1 %13, label %5075, label %4961

4961:                                             ; preds = %4960
  %4962 = icmp ult i32 %1, 4
  br i1 %4962, label %5050, label %4963

4963:                                             ; preds = %4961
  %4964 = and i32 %1, -4
  %4965 = add i32 %1, -4
  %4966 = lshr i32 %4965, 2
  %4967 = add nuw nsw i32 %4966, 1
  %4968 = and i32 %4967, 7
  %4969 = icmp ult i32 %4965, 28
  br i1 %4969, label %5033, label %4970

4970:                                             ; preds = %4963
  %4971 = and i32 %4967, -8
  br label %4972

4972:                                             ; preds = %4972, %4970
  %4973 = phi i32 [ 0, %4970 ], [ %5030, %4972 ]
  %4974 = phi i32 [ 0, %4970 ], [ %5031, %4972 ]
  %4975 = add nsw i32 %4973, %14
  %4976 = sext i32 %4975 to i64
  %4977 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4976
  %4978 = bitcast i16 addrspace(1)* %4977 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4978, align 2, !tbaa !7
  %4979 = getelementptr inbounds i16, i16 addrspace(1)* %4977, i64 2
  %4980 = bitcast i16 addrspace(1)* %4979 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4980, align 2, !tbaa !7
  %4981 = or i32 %4973, 4
  %4982 = add nsw i32 %4981, %14
  %4983 = sext i32 %4982 to i64
  %4984 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4983
  %4985 = bitcast i16 addrspace(1)* %4984 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4985, align 2, !tbaa !7
  %4986 = getelementptr inbounds i16, i16 addrspace(1)* %4984, i64 2
  %4987 = bitcast i16 addrspace(1)* %4986 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4987, align 2, !tbaa !7
  %4988 = or i32 %4973, 8
  %4989 = add nsw i32 %4988, %14
  %4990 = sext i32 %4989 to i64
  %4991 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4990
  %4992 = bitcast i16 addrspace(1)* %4991 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4992, align 2, !tbaa !7
  %4993 = getelementptr inbounds i16, i16 addrspace(1)* %4991, i64 2
  %4994 = bitcast i16 addrspace(1)* %4993 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4994, align 2, !tbaa !7
  %4995 = or i32 %4973, 12
  %4996 = add nsw i32 %4995, %14
  %4997 = sext i32 %4996 to i64
  %4998 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %4997
  %4999 = bitcast i16 addrspace(1)* %4998 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %4999, align 2, !tbaa !7
  %5000 = getelementptr inbounds i16, i16 addrspace(1)* %4998, i64 2
  %5001 = bitcast i16 addrspace(1)* %5000 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5001, align 2, !tbaa !7
  %5002 = or i32 %4973, 16
  %5003 = add nsw i32 %5002, %14
  %5004 = sext i32 %5003 to i64
  %5005 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5004
  %5006 = bitcast i16 addrspace(1)* %5005 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5006, align 2, !tbaa !7
  %5007 = getelementptr inbounds i16, i16 addrspace(1)* %5005, i64 2
  %5008 = bitcast i16 addrspace(1)* %5007 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5008, align 2, !tbaa !7
  %5009 = or i32 %4973, 20
  %5010 = add nsw i32 %5009, %14
  %5011 = sext i32 %5010 to i64
  %5012 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5011
  %5013 = bitcast i16 addrspace(1)* %5012 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5013, align 2, !tbaa !7
  %5014 = getelementptr inbounds i16, i16 addrspace(1)* %5012, i64 2
  %5015 = bitcast i16 addrspace(1)* %5014 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5015, align 2, !tbaa !7
  %5016 = or i32 %4973, 24
  %5017 = add nsw i32 %5016, %14
  %5018 = sext i32 %5017 to i64
  %5019 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5018
  %5020 = bitcast i16 addrspace(1)* %5019 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5020, align 2, !tbaa !7
  %5021 = getelementptr inbounds i16, i16 addrspace(1)* %5019, i64 2
  %5022 = bitcast i16 addrspace(1)* %5021 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5022, align 2, !tbaa !7
  %5023 = or i32 %4973, 28
  %5024 = add nsw i32 %5023, %14
  %5025 = sext i32 %5024 to i64
  %5026 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5025
  %5027 = bitcast i16 addrspace(1)* %5026 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5027, align 2, !tbaa !7
  %5028 = getelementptr inbounds i16, i16 addrspace(1)* %5026, i64 2
  %5029 = bitcast i16 addrspace(1)* %5028 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5029, align 2, !tbaa !7
  %5030 = add nuw i32 %4973, 32
  %5031 = add i32 %4974, 8
  %5032 = icmp eq i32 %5031, %4971
  br i1 %5032, label %5033, label %4972, !llvm.loop !52

5033:                                             ; preds = %4972, %4963
  %5034 = phi i32 [ 0, %4963 ], [ %5030, %4972 ]
  %5035 = icmp eq i32 %4968, 0
  br i1 %5035, label %5048, label %5036

5036:                                             ; preds = %5033, %5036
  %5037 = phi i32 [ %5045, %5036 ], [ %5034, %5033 ]
  %5038 = phi i32 [ %5046, %5036 ], [ 0, %5033 ]
  %5039 = add nsw i32 %5037, %14
  %5040 = sext i32 %5039 to i64
  %5041 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5040
  %5042 = bitcast i16 addrspace(1)* %5041 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5042, align 2, !tbaa !7
  %5043 = getelementptr inbounds i16, i16 addrspace(1)* %5041, i64 2
  %5044 = bitcast i16 addrspace(1)* %5043 to <2 x i16> addrspace(1)*
  store <2 x i16> <i16 127, i16 127>, <2 x i16> addrspace(1)* %5044, align 2, !tbaa !7
  %5045 = add nuw i32 %5037, 4
  %5046 = add i32 %5038, 1
  %5047 = icmp eq i32 %5046, %4968
  br i1 %5047, label %5048, label %5036, !llvm.loop !53

5048:                                             ; preds = %5036, %5033
  %5049 = icmp eq i32 %4964, %1
  br i1 %5049, label %5075, label %5050

5050:                                             ; preds = %4961, %5048
  %5051 = phi i32 [ 0, %4961 ], [ %4964, %5048 ]
  br label %5052

5052:                                             ; preds = %5050, %5052
  %5053 = phi i32 [ %5057, %5052 ], [ %5051, %5050 ]
  %5054 = add nsw i32 %5053, %14
  %5055 = sext i32 %5054 to i64
  %5056 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5055
  store i16 127, i16 addrspace(1)* %5056, align 2, !tbaa !7
  %5057 = add nuw nsw i32 %5053, 1
  %5058 = icmp eq i32 %5057, %1
  br i1 %5058, label %5075, label %5052, !llvm.loop !54

5059:                                             ; preds = %4958, %5059
  %5060 = phi i32 [ %5073, %5059 ], [ %4959, %4958 ]
  %5061 = add nsw i32 %5060, %14
  %5062 = sext i32 %5061 to i64
  %5063 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %5062
  %5064 = load i16, i16 addrspace(1)* %5063, align 2, !tbaa !7
  %5065 = uitofp i16 %5064 to float
  %5066 = fsub contract float %5065, %4513
  %5067 = fcmp contract olt float %5066, %4850
  %5068 = fcmp contract ogt float %5066, %4851
  %5069 = and i1 %5067, %5068
  %5070 = fadd contract float %5066, 1.275000e+02
  %5071 = fptoui float %5070 to i16
  %5072 = select i1 %5069, i16 %5071, i16 127
  store i16 %5072, i16 addrspace(1)* %5063, align 2, !tbaa !7
  %5073 = add nuw nsw i32 %5060, 1
  %5074 = icmp eq i32 %5073, %1
  br i1 %5074, label %5075, label %5059, !llvm.loop !55

5075:                                             ; preds = %5059, %5052, %4833, %4956, %5048, %4774, %4848, %4960, %4686
  ret void
}

; Function Attrs: convergent mustprogress nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #3

attributes #0 = { convergent mustprogress norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !8, i64 0}
!8 = !{!"short", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !12}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !14}
!18 = distinct !{!18, !14}
!19 = distinct !{!19, !14}
!20 = distinct !{!20, !14}
!21 = distinct !{!21, !14}
!22 = distinct !{!22, !14}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !14}
!25 = distinct !{!25, !14}
!26 = distinct !{!26, !14}
!27 = distinct !{!27, !14}
!28 = distinct !{!28, !14}
!29 = distinct !{!29, !14}
!30 = distinct !{!30, !14}
!31 = distinct !{!31, !14}
!32 = distinct !{!32, !14}
!33 = distinct !{!33, !14}
!34 = distinct !{!34, !14}
!35 = distinct !{!35, !14}
!36 = distinct !{!36, !12, !37}
!37 = !{!"llvm.loop.isvectorized", i32 1}
!38 = distinct !{!38, !14}
!39 = distinct !{!39, !12, !40, !37}
!40 = !{!"llvm.loop.unroll.runtime.disable"}
!41 = !{!42, !42, i64 0}
!42 = !{!"float", !9, i64 0}
!43 = distinct !{!43, !14}
!44 = distinct !{!44, !12}
!45 = distinct !{!45, !14}
!46 = distinct !{!46, !12, !37}
!47 = distinct !{!47, !14}
!48 = distinct !{!48, !12}
!49 = distinct !{!49, !12, !40, !37}
!50 = distinct !{!50, !12, !37}
!51 = distinct !{!51, !14}
!52 = distinct !{!52, !12, !37}
!53 = distinct !{!53, !14}
!54 = distinct !{!54, !12, !40, !37}
!55 = distinct !{!55, !12, !40, !37}
