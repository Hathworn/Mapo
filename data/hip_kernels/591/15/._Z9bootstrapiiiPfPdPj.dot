digraph "CFG for '_Z9bootstrapiiiPfPdPj' function" {
	label="CFG for '_Z9bootstrapiiiPfPdPj' function";

	Node0x5b43c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = sub i32 %0, %12\l  %14 = udiv i32 -1, %13\l  %15 = mul i32 %8, %0\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp sgt i32 %0, 0\l  br i1 %24, label %27, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5b43c70:s0 -> Node0x5b46e30;
	Node0x5b43c70:s1 -> Node0x5b46ec0;
	Node0x5b46ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%25:\l25:                                               \l  %26 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  br label %60\l}"];
	Node0x5b46ec0 -> Node0x5b477e0;
	Node0x5b46e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%27:\l27:                                               \l  %28 = mul i32 %23, %0\l  %29 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %30 = add i32 %28, %29\l  %31 = and i32 %0, 7\l  %32 = icmp ult i32 %0, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5b46e30:s0 -> Node0x5b459d0;
	Node0x5b46e30:s1 -> Node0x5b45a20;
	Node0x5b45a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %0, -8\l  br label %71\l}"];
	Node0x5b45a20 -> Node0x5b47fb0;
	Node0x5b459d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %27 ], [ %161, %71 ]\l  %37 = phi float [ 0.000000e+00, %27 ], [ %161, %71 ]\l  %38 = phi i32 [ 0, %27 ], [ %162, %71 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %57, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5b459d0:s0 -> Node0x5b49220;
	Node0x5b459d0:s1 -> Node0x5b492b0;
	Node0x5b492b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi float [ %53, %40 ], [ %37, %35 ]\l  %42 = phi i32 [ %54, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %55, %40 ], [ 0, %35 ]\l  %44 = add nsw i32 %42, %15\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %45\l  %47 = load i32, i32 addrspace(1)* %46, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %48 = udiv i32 %47, %14\l  %49 = add i32 %30, %48\l  %50 = zext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %3, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %53 = fadd contract float %41, %52\l  %54 = add nuw nsw i32 %42, 1\l  %55 = add i32 %43, 1\l  %56 = icmp eq i32 %55, %31\l  br i1 %56, label %57, label %40, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5b492b0:s0 -> Node0x5b49220;
	Node0x5b492b0:s1 -> Node0x5b492b0;
	Node0x5b49220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%57:\l57:                                               \l  %58 = phi float [ %36, %35 ], [ %53, %40 ]\l  %59 = fpext float %58 to double\l  br label %60\l}"];
	Node0x5b49220 -> Node0x5b477e0;
	Node0x5b477e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%60:\l60:                                               \l  %61 = phi i32 [ %26, %25 ], [ %29, %57 ]\l  %62 = phi double [ 0.000000e+00, %25 ], [ %59, %57 ]\l  %63 = mul i32 %8, %12\l  %64 = mul i32 %23, %2\l  %65 = sitofp i32 %1 to double\l  %66 = fdiv contract double %62, %65\l  %67 = add i32 %63, %61\l  %68 = add i32 %67, %64\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %4, i64 %69\l  store double %66, double addrspace(1)* %70, align 8, !tbaa !15\l  ret void\l}"];
	Node0x5b47fb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%71:\l71:                                               \l  %72 = phi float [ 0.000000e+00, %33 ], [ %161, %71 ]\l  %73 = phi i32 [ 0, %33 ], [ %162, %71 ]\l  %74 = phi i32 [ 0, %33 ], [ %163, %71 ]\l  %75 = add nsw i32 %73, %15\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %76\l  %78 = load i32, i32 addrspace(1)* %77, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %79 = udiv i32 %78, %14\l  %80 = add i32 %30, %79\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %3, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %84 = fadd contract float %72, %83\l  %85 = or i32 %73, 1\l  %86 = add nsw i32 %85, %15\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %87\l  %89 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %90 = udiv i32 %89, %14\l  %91 = add i32 %30, %90\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %3, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %95 = fadd contract float %84, %94\l  %96 = or i32 %73, 2\l  %97 = add nsw i32 %96, %15\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %98\l  %100 = load i32, i32 addrspace(1)* %99, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %101 = udiv i32 %100, %14\l  %102 = add i32 %30, %101\l  %103 = zext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %3, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %106 = fadd contract float %95, %105\l  %107 = or i32 %73, 3\l  %108 = add nsw i32 %107, %15\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %109\l  %111 = load i32, i32 addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = udiv i32 %111, %14\l  %113 = add i32 %30, %112\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %3, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %117 = fadd contract float %106, %116\l  %118 = or i32 %73, 4\l  %119 = add nsw i32 %118, %15\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %120\l  %122 = load i32, i32 addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = udiv i32 %122, %14\l  %124 = add i32 %30, %123\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %3, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %128 = fadd contract float %117, %127\l  %129 = or i32 %73, 5\l  %130 = add nsw i32 %129, %15\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %131\l  %133 = load i32, i32 addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = udiv i32 %133, %14\l  %135 = add i32 %30, %134\l  %136 = zext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %3, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %139 = fadd contract float %128, %138\l  %140 = or i32 %73, 6\l  %141 = add nsw i32 %140, %15\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %142\l  %144 = load i32, i32 addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = udiv i32 %144, %14\l  %146 = add i32 %30, %145\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %3, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %150 = fadd contract float %139, %149\l  %151 = or i32 %73, 7\l  %152 = add nsw i32 %151, %15\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %153\l  %155 = load i32, i32 addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = udiv i32 %155, %14\l  %157 = add i32 %30, %156\l  %158 = zext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %3, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %161 = fadd contract float %150, %160\l  %162 = add nuw nsw i32 %73, 8\l  %163 = add i32 %74, 8\l  %164 = icmp eq i32 %163, %34\l  br i1 %164, label %35, label %71, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5b47fb0:s0 -> Node0x5b459d0;
	Node0x5b47fb0:s1 -> Node0x5b47fb0;
}
