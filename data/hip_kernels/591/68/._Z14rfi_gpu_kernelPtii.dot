digraph "CFG for '_Z14rfi_gpu_kernelPtii' function" {
	label="CFG for '_Z14rfi_gpu_kernelPtii' function";

	Node0x635e3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp sgt i32 %2, 0\l  %14 = mul nsw i32 %12, %2\l  br i1 %13, label %15, label %61\l|{<s0>T|<s1>F}}"];
	Node0x635e3e0:s0 -> Node0x6360340;
	Node0x635e3e0:s1 -> Node0x63603d0;
	Node0x6360340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = and i32 %2, 7\l  %17 = icmp ult i32 %2, 8\l  br i1 %17, label %29, label %18\l|{<s0>T|<s1>F}}"];
	Node0x6360340:s0 -> Node0x635fd30;
	Node0x6360340:s1 -> Node0x6360770;
	Node0x6360770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%18:\l18:                                               \l  %19 = and i32 %2, -8\l  br label %725\l}"];
	Node0x6360770 -> Node0x6360970;
	Node0x6360a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%20:\l20:                                               \l  %21 = fadd contract float %698, %723\l  %22 = fsub contract float %698, %723\l  %23 = fptoui float %698 to i16\l  %24 = and i32 %2, 1\l  %25 = icmp eq i32 %2, 5\l  br i1 %25, label %836, label %26\l|{<s0>T|<s1>F}}"];
	Node0x6360a30:s0 -> Node0x6360e70;
	Node0x6360a30:s1 -> Node0x6360f00;
	Node0x6360f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%26:\l26:                                               \l  %27 = and i32 %2, -2\l  %28 = add i32 %27, -6\l  br label %806\l}"];
	Node0x6360f00 -> Node0x63611c0;
	Node0x635fd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %15 ], [ %800, %725 ]\l  %31 = phi float [ undef, %15 ], [ %801, %725 ]\l  %32 = phi i32 [ undef, %15 ], [ %802, %725 ]\l  %33 = phi i32 [ 0, %15 ], [ %802, %725 ]\l  %34 = phi i32 [ 0, %15 ], [ %803, %725 ]\l  %35 = phi float [ 0.000000e+00, %15 ], [ %801, %725 ]\l  %36 = phi float [ 0.000000e+00, %15 ], [ %800, %725 ]\l  %37 = icmp eq i32 %16, 0\l  br i1 %37, label %56, label %38\l|{<s0>T|<s1>F}}"];
	Node0x635fd30:s0 -> Node0x6362900;
	Node0x635fd30:s1 -> Node0x6362990;
	Node0x6362990 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i32 [ %52, %38 ], [ %33, %29 ]\l  %40 = phi i32 [ %53, %38 ], [ %34, %29 ]\l  %41 = phi float [ %51, %38 ], [ %35, %29 ]\l  %42 = phi float [ %50, %38 ], [ %36, %29 ]\l  %43 = phi i32 [ %54, %38 ], [ 0, %29 ]\l  %44 = add nsw i32 %40, %14\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %45\l  %47 = load i16, i16 addrspace(1)* %46, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %48 = uitofp i16 %47 to float\l  %49 = fmul contract float %48, %48\l  %50 = fadd contract float %42, %48\l  %51 = fadd contract float %41, %49\l  %52 = add nuw nsw i32 %39, 1\l  %53 = add nuw nsw i32 %40, 1\l  %54 = add i32 %43, 1\l  %55 = icmp eq i32 %54, %16\l  br i1 %55, label %56, label %38, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x6362990:s0 -> Node0x6362900;
	Node0x6362990:s1 -> Node0x6362990;
	Node0x6362900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%56:\l56:                                               \l  %57 = phi float [ %30, %29 ], [ %50, %38 ]\l  %58 = phi float [ %31, %29 ], [ %51, %38 ]\l  %59 = phi i32 [ %32, %29 ], [ %52, %38 ]\l  %60 = sitofp i32 %59 to float\l  br label %61\l}"];
	Node0x6362900 -> Node0x63603d0;
	Node0x63603d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%61:\l61:                                               \l  %62 = phi float [ 0.000000e+00, %3 ], [ %57, %56 ]\l  %63 = phi float [ 0.000000e+00, %3 ], [ %58, %56 ]\l  %64 = phi float [ 0.000000e+00, %3 ], [ %60, %56 ]\l  %65 = fdiv contract float %62, %64\l  %66 = fdiv contract float %63, %64\l  %67 = fmul contract float %65, %65\l  %68 = fsub contract float %66, %67\l  %69 = fcmp olt float %68, 0x39F0000000000000\l  %70 = select i1 %69, float 0x41F0000000000000, float 1.000000e+00\l  %71 = fmul float %68, %70\l  %72 = tail call float @llvm.sqrt.f32(float %71)\l  %73 = bitcast float %72 to i32\l  %74 = add nsw i32 %73, -1\l  %75 = bitcast i32 %74 to float\l  %76 = add nsw i32 %73, 1\l  %77 = bitcast i32 %76 to float\l  %78 = tail call i1 @llvm.amdgcn.class.f32(float %71, i32 608)\l  %79 = select i1 %69, float 0x3EF0000000000000, float 1.000000e+00\l  %80 = fneg float %77\l  %81 = tail call float @llvm.fma.f32(float %80, float %72, float %71)\l  %82 = fcmp ogt float %81, 0.000000e+00\l  %83 = fneg float %75\l  %84 = tail call float @llvm.fma.f32(float %83, float %72, float %71)\l  %85 = fcmp ole float %84, 0.000000e+00\l  %86 = select i1 %85, float %75, float %72\l  %87 = select i1 %82, float %77, float %86\l  %88 = fmul float %79, %87\l  %89 = select i1 %78, float %71, float %88\l  %90 = fmul contract float %89, 4.000000e+00\l  br i1 %13, label %91, label %272\l|{<s0>T|<s1>F}}"];
	Node0x63603d0:s0 -> Node0x6365b00;
	Node0x63603d0:s1 -> Node0x6365b90;
	Node0x6365b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%91:\l91:                                               \l  %92 = fadd contract float %65, %90\l  %93 = fsub contract float %65, %90\l  %94 = and i32 %2, 7\l  %95 = icmp ult i32 %2, 8\l  br i1 %95, label %234, label %96\l|{<s0>T|<s1>F}}"];
	Node0x6365b00:s0 -> Node0x6365f10;
	Node0x6365b00:s1 -> Node0x6365f60;
	Node0x6365f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%96:\l96:                                               \l  %97 = and i32 %2, -8\l  br label %98\l}"];
	Node0x6365f60 -> Node0x6366130;
	Node0x6366130 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%98:\l98:                                               \l  %99 = phi i32 [ 0, %96 ], [ %230, %98 ]\l  %100 = phi i32 [ 0, %96 ], [ %231, %98 ]\l  %101 = phi float [ 0.000000e+00, %96 ], [ %228, %98 ]\l  %102 = phi float [ 0.000000e+00, %96 ], [ %226, %98 ]\l  %103 = phi i32 [ 0, %96 ], [ %232, %98 ]\l  %104 = add nsw i32 %100, %14\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %105\l  %107 = load i16, i16 addrspace(1)* %106, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = uitofp i16 %107 to float\l  %109 = fcmp contract ogt float %92, %108\l  %110 = fcmp contract olt float %93, %108\l  %111 = and i1 %109, %110\l  %112 = fmul contract float %108, %108\l  %113 = select i1 %111, float %108, float -0.000000e+00\l  %114 = fadd contract float %102, %113\l  %115 = select i1 %111, float %112, float -0.000000e+00\l  %116 = fadd contract float %101, %115\l  %117 = zext i1 %111 to i32\l  %118 = add nuw nsw i32 %99, %117\l  %119 = or i32 %100, 1\l  %120 = add nsw i32 %119, %14\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %121\l  %123 = load i16, i16 addrspace(1)* %122, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %124 = uitofp i16 %123 to float\l  %125 = fcmp contract ogt float %92, %124\l  %126 = fcmp contract olt float %93, %124\l  %127 = and i1 %125, %126\l  %128 = fmul contract float %124, %124\l  %129 = select i1 %127, float %124, float -0.000000e+00\l  %130 = fadd contract float %114, %129\l  %131 = select i1 %127, float %128, float -0.000000e+00\l  %132 = fadd contract float %116, %131\l  %133 = zext i1 %127 to i32\l  %134 = add nuw nsw i32 %118, %133\l  %135 = or i32 %100, 2\l  %136 = add nsw i32 %135, %14\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %137\l  %139 = load i16, i16 addrspace(1)* %138, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = uitofp i16 %139 to float\l  %141 = fcmp contract ogt float %92, %140\l  %142 = fcmp contract olt float %93, %140\l  %143 = and i1 %141, %142\l  %144 = fmul contract float %140, %140\l  %145 = select i1 %143, float %140, float -0.000000e+00\l  %146 = fadd contract float %130, %145\l  %147 = select i1 %143, float %144, float -0.000000e+00\l  %148 = fadd contract float %132, %147\l  %149 = zext i1 %143 to i32\l  %150 = add nuw nsw i32 %134, %149\l  %151 = or i32 %100, 3\l  %152 = add nsw i32 %151, %14\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %153\l  %155 = load i16, i16 addrspace(1)* %154, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = uitofp i16 %155 to float\l  %157 = fcmp contract ogt float %92, %156\l  %158 = fcmp contract olt float %93, %156\l  %159 = and i1 %157, %158\l  %160 = fmul contract float %156, %156\l  %161 = select i1 %159, float %156, float -0.000000e+00\l  %162 = fadd contract float %146, %161\l  %163 = select i1 %159, float %160, float -0.000000e+00\l  %164 = fadd contract float %148, %163\l  %165 = zext i1 %159 to i32\l  %166 = add nuw nsw i32 %150, %165\l  %167 = or i32 %100, 4\l  %168 = add nsw i32 %167, %14\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %169\l  %171 = load i16, i16 addrspace(1)* %170, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %172 = uitofp i16 %171 to float\l  %173 = fcmp contract ogt float %92, %172\l  %174 = fcmp contract olt float %93, %172\l  %175 = and i1 %173, %174\l  %176 = fmul contract float %172, %172\l  %177 = select i1 %175, float %172, float -0.000000e+00\l  %178 = fadd contract float %162, %177\l  %179 = select i1 %175, float %176, float -0.000000e+00\l  %180 = fadd contract float %164, %179\l  %181 = zext i1 %175 to i32\l  %182 = add nuw nsw i32 %166, %181\l  %183 = or i32 %100, 5\l  %184 = add nsw i32 %183, %14\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %185\l  %187 = load i16, i16 addrspace(1)* %186, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %188 = uitofp i16 %187 to float\l  %189 = fcmp contract ogt float %92, %188\l  %190 = fcmp contract olt float %93, %188\l  %191 = and i1 %189, %190\l  %192 = fmul contract float %188, %188\l  %193 = select i1 %191, float %188, float -0.000000e+00\l  %194 = fadd contract float %178, %193\l  %195 = select i1 %191, float %192, float -0.000000e+00\l  %196 = fadd contract float %180, %195\l  %197 = zext i1 %191 to i32\l  %198 = add nuw nsw i32 %182, %197\l  %199 = or i32 %100, 6\l  %200 = add nsw i32 %199, %14\l  %201 = sext i32 %200 to i64\l  %202 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %201\l  %203 = load i16, i16 addrspace(1)* %202, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %204 = uitofp i16 %203 to float\l  %205 = fcmp contract ogt float %92, %204\l  %206 = fcmp contract olt float %93, %204\l  %207 = and i1 %205, %206\l  %208 = fmul contract float %204, %204\l  %209 = select i1 %207, float %204, float -0.000000e+00\l  %210 = fadd contract float %194, %209\l  %211 = select i1 %207, float %208, float -0.000000e+00\l  %212 = fadd contract float %196, %211\l  %213 = zext i1 %207 to i32\l  %214 = add nuw nsw i32 %198, %213\l  %215 = or i32 %100, 7\l  %216 = add nsw i32 %215, %14\l  %217 = sext i32 %216 to i64\l  %218 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %217\l  %219 = load i16, i16 addrspace(1)* %218, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %220 = uitofp i16 %219 to float\l  %221 = fcmp contract ogt float %92, %220\l  %222 = fcmp contract olt float %93, %220\l  %223 = and i1 %221, %222\l  %224 = fmul contract float %220, %220\l  %225 = select i1 %223, float %220, float -0.000000e+00\l  %226 = fadd contract float %210, %225\l  %227 = select i1 %223, float %224, float -0.000000e+00\l  %228 = fadd contract float %212, %227\l  %229 = zext i1 %223 to i32\l  %230 = add nuw nsw i32 %214, %229\l  %231 = add nuw nsw i32 %100, 8\l  %232 = add i32 %103, 8\l  %233 = icmp eq i32 %232, %97\l  br i1 %233, label %234, label %98, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x6366130:s0 -> Node0x6365f10;
	Node0x6366130:s1 -> Node0x6366130;
	Node0x6365f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%234:\l234:                                              \l  %235 = phi float [ undef, %91 ], [ %226, %98 ]\l  %236 = phi float [ undef, %91 ], [ %228, %98 ]\l  %237 = phi i32 [ undef, %91 ], [ %230, %98 ]\l  %238 = phi i32 [ 0, %91 ], [ %230, %98 ]\l  %239 = phi i32 [ 0, %91 ], [ %231, %98 ]\l  %240 = phi float [ 0.000000e+00, %91 ], [ %228, %98 ]\l  %241 = phi float [ 0.000000e+00, %91 ], [ %226, %98 ]\l  %242 = icmp eq i32 %94, 0\l  br i1 %242, label %267, label %243\l|{<s0>T|<s1>F}}"];
	Node0x6365f10:s0 -> Node0x636c2a0;
	Node0x6365f10:s1 -> Node0x636c2f0;
	Node0x636c2f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%243:\l243:                                              \l  %244 = phi i32 [ %263, %243 ], [ %238, %234 ]\l  %245 = phi i32 [ %264, %243 ], [ %239, %234 ]\l  %246 = phi float [ %261, %243 ], [ %240, %234 ]\l  %247 = phi float [ %259, %243 ], [ %241, %234 ]\l  %248 = phi i32 [ %265, %243 ], [ 0, %234 ]\l  %249 = add nsw i32 %245, %14\l  %250 = sext i32 %249 to i64\l  %251 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %250\l  %252 = load i16, i16 addrspace(1)* %251, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %253 = uitofp i16 %252 to float\l  %254 = fcmp contract ogt float %92, %253\l  %255 = fcmp contract olt float %93, %253\l  %256 = and i1 %254, %255\l  %257 = fmul contract float %253, %253\l  %258 = select i1 %256, float %253, float -0.000000e+00\l  %259 = fadd contract float %247, %258\l  %260 = select i1 %256, float %257, float -0.000000e+00\l  %261 = fadd contract float %246, %260\l  %262 = zext i1 %256 to i32\l  %263 = add nuw nsw i32 %244, %262\l  %264 = add nuw nsw i32 %245, 1\l  %265 = add i32 %248, 1\l  %266 = icmp eq i32 %265, %94\l  br i1 %266, label %267, label %243, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x636c2f0:s0 -> Node0x636c2a0;
	Node0x636c2f0:s1 -> Node0x636c2f0;
	Node0x636c2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%267:\l267:                                              \l  %268 = phi float [ %235, %234 ], [ %259, %243 ]\l  %269 = phi float [ %236, %234 ], [ %261, %243 ]\l  %270 = phi i32 [ %237, %234 ], [ %263, %243 ]\l  %271 = sitofp i32 %270 to float\l  br label %272\l}"];
	Node0x636c2a0 -> Node0x6365b90;
	Node0x6365b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%272:\l272:                                              \l  %273 = phi float [ 0.000000e+00, %61 ], [ %268, %267 ]\l  %274 = phi float [ 0.000000e+00, %61 ], [ %269, %267 ]\l  %275 = phi float [ 0.000000e+00, %61 ], [ %271, %267 ]\l  %276 = fdiv contract float %273, %275\l  %277 = fdiv contract float %274, %275\l  %278 = fmul contract float %276, %276\l  %279 = fsub contract float %277, %278\l  %280 = fcmp olt float %279, 0x39F0000000000000\l  %281 = select i1 %280, float 0x41F0000000000000, float 1.000000e+00\l  %282 = fmul float %279, %281\l  %283 = tail call float @llvm.sqrt.f32(float %282)\l  %284 = bitcast float %283 to i32\l  %285 = add nsw i32 %284, -1\l  %286 = bitcast i32 %285 to float\l  %287 = add nsw i32 %284, 1\l  %288 = bitcast i32 %287 to float\l  %289 = tail call i1 @llvm.amdgcn.class.f32(float %282, i32 608)\l  %290 = select i1 %280, float 0x3EF0000000000000, float 1.000000e+00\l  %291 = fneg float %288\l  %292 = tail call float @llvm.fma.f32(float %291, float %283, float %282)\l  %293 = fcmp ogt float %292, 0.000000e+00\l  %294 = fneg float %286\l  %295 = tail call float @llvm.fma.f32(float %294, float %283, float %282)\l  %296 = fcmp ole float %295, 0.000000e+00\l  %297 = select i1 %296, float %286, float %283\l  %298 = select i1 %293, float %288, float %297\l  %299 = fmul float %290, %298\l  %300 = select i1 %289, float %282, float %299\l  %301 = fmul contract float %300, 4.000000e+00\l  br i1 %13, label %302, label %483\l|{<s0>T|<s1>F}}"];
	Node0x6365b90:s0 -> Node0x636f160;
	Node0x6365b90:s1 -> Node0x636f1b0;
	Node0x636f160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%302:\l302:                                              \l  %303 = fadd contract float %276, %301\l  %304 = fsub contract float %276, %301\l  %305 = and i32 %2, 7\l  %306 = icmp ult i32 %2, 8\l  br i1 %306, label %445, label %307\l|{<s0>T|<s1>F}}"];
	Node0x636f160:s0 -> Node0x636f4f0;
	Node0x636f160:s1 -> Node0x636f540;
	Node0x636f540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%307:\l307:                                              \l  %308 = and i32 %2, -8\l  br label %309\l}"];
	Node0x636f540 -> Node0x636f6d0;
	Node0x636f6d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%309:\l309:                                              \l  %310 = phi i32 [ 0, %307 ], [ %441, %309 ]\l  %311 = phi i32 [ 0, %307 ], [ %442, %309 ]\l  %312 = phi float [ 0.000000e+00, %307 ], [ %439, %309 ]\l  %313 = phi float [ 0.000000e+00, %307 ], [ %437, %309 ]\l  %314 = phi i32 [ 0, %307 ], [ %443, %309 ]\l  %315 = add nsw i32 %311, %14\l  %316 = sext i32 %315 to i64\l  %317 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %316\l  %318 = load i16, i16 addrspace(1)* %317, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %319 = uitofp i16 %318 to float\l  %320 = fcmp contract ogt float %303, %319\l  %321 = fcmp contract olt float %304, %319\l  %322 = and i1 %320, %321\l  %323 = fmul contract float %319, %319\l  %324 = select i1 %322, float %319, float -0.000000e+00\l  %325 = fadd contract float %313, %324\l  %326 = select i1 %322, float %323, float -0.000000e+00\l  %327 = fadd contract float %312, %326\l  %328 = zext i1 %322 to i32\l  %329 = add nuw nsw i32 %310, %328\l  %330 = or i32 %311, 1\l  %331 = add nsw i32 %330, %14\l  %332 = sext i32 %331 to i64\l  %333 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %332\l  %334 = load i16, i16 addrspace(1)* %333, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %335 = uitofp i16 %334 to float\l  %336 = fcmp contract ogt float %303, %335\l  %337 = fcmp contract olt float %304, %335\l  %338 = and i1 %336, %337\l  %339 = fmul contract float %335, %335\l  %340 = select i1 %338, float %335, float -0.000000e+00\l  %341 = fadd contract float %325, %340\l  %342 = select i1 %338, float %339, float -0.000000e+00\l  %343 = fadd contract float %327, %342\l  %344 = zext i1 %338 to i32\l  %345 = add nuw nsw i32 %329, %344\l  %346 = or i32 %311, 2\l  %347 = add nsw i32 %346, %14\l  %348 = sext i32 %347 to i64\l  %349 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %348\l  %350 = load i16, i16 addrspace(1)* %349, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %351 = uitofp i16 %350 to float\l  %352 = fcmp contract ogt float %303, %351\l  %353 = fcmp contract olt float %304, %351\l  %354 = and i1 %352, %353\l  %355 = fmul contract float %351, %351\l  %356 = select i1 %354, float %351, float -0.000000e+00\l  %357 = fadd contract float %341, %356\l  %358 = select i1 %354, float %355, float -0.000000e+00\l  %359 = fadd contract float %343, %358\l  %360 = zext i1 %354 to i32\l  %361 = add nuw nsw i32 %345, %360\l  %362 = or i32 %311, 3\l  %363 = add nsw i32 %362, %14\l  %364 = sext i32 %363 to i64\l  %365 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %364\l  %366 = load i16, i16 addrspace(1)* %365, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %367 = uitofp i16 %366 to float\l  %368 = fcmp contract ogt float %303, %367\l  %369 = fcmp contract olt float %304, %367\l  %370 = and i1 %368, %369\l  %371 = fmul contract float %367, %367\l  %372 = select i1 %370, float %367, float -0.000000e+00\l  %373 = fadd contract float %357, %372\l  %374 = select i1 %370, float %371, float -0.000000e+00\l  %375 = fadd contract float %359, %374\l  %376 = zext i1 %370 to i32\l  %377 = add nuw nsw i32 %361, %376\l  %378 = or i32 %311, 4\l  %379 = add nsw i32 %378, %14\l  %380 = sext i32 %379 to i64\l  %381 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %380\l  %382 = load i16, i16 addrspace(1)* %381, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %383 = uitofp i16 %382 to float\l  %384 = fcmp contract ogt float %303, %383\l  %385 = fcmp contract olt float %304, %383\l  %386 = and i1 %384, %385\l  %387 = fmul contract float %383, %383\l  %388 = select i1 %386, float %383, float -0.000000e+00\l  %389 = fadd contract float %373, %388\l  %390 = select i1 %386, float %387, float -0.000000e+00\l  %391 = fadd contract float %375, %390\l  %392 = zext i1 %386 to i32\l  %393 = add nuw nsw i32 %377, %392\l  %394 = or i32 %311, 5\l  %395 = add nsw i32 %394, %14\l  %396 = sext i32 %395 to i64\l  %397 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %396\l  %398 = load i16, i16 addrspace(1)* %397, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %399 = uitofp i16 %398 to float\l  %400 = fcmp contract ogt float %303, %399\l  %401 = fcmp contract olt float %304, %399\l  %402 = and i1 %400, %401\l  %403 = fmul contract float %399, %399\l  %404 = select i1 %402, float %399, float -0.000000e+00\l  %405 = fadd contract float %389, %404\l  %406 = select i1 %402, float %403, float -0.000000e+00\l  %407 = fadd contract float %391, %406\l  %408 = zext i1 %402 to i32\l  %409 = add nuw nsw i32 %393, %408\l  %410 = or i32 %311, 6\l  %411 = add nsw i32 %410, %14\l  %412 = sext i32 %411 to i64\l  %413 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %412\l  %414 = load i16, i16 addrspace(1)* %413, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %415 = uitofp i16 %414 to float\l  %416 = fcmp contract ogt float %303, %415\l  %417 = fcmp contract olt float %304, %415\l  %418 = and i1 %416, %417\l  %419 = fmul contract float %415, %415\l  %420 = select i1 %418, float %415, float -0.000000e+00\l  %421 = fadd contract float %405, %420\l  %422 = select i1 %418, float %419, float -0.000000e+00\l  %423 = fadd contract float %407, %422\l  %424 = zext i1 %418 to i32\l  %425 = add nuw nsw i32 %409, %424\l  %426 = or i32 %311, 7\l  %427 = add nsw i32 %426, %14\l  %428 = sext i32 %427 to i64\l  %429 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %428\l  %430 = load i16, i16 addrspace(1)* %429, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %431 = uitofp i16 %430 to float\l  %432 = fcmp contract ogt float %303, %431\l  %433 = fcmp contract olt float %304, %431\l  %434 = and i1 %432, %433\l  %435 = fmul contract float %431, %431\l  %436 = select i1 %434, float %431, float -0.000000e+00\l  %437 = fadd contract float %421, %436\l  %438 = select i1 %434, float %435, float -0.000000e+00\l  %439 = fadd contract float %423, %438\l  %440 = zext i1 %434 to i32\l  %441 = add nuw nsw i32 %425, %440\l  %442 = add nuw nsw i32 %311, 8\l  %443 = add i32 %314, 8\l  %444 = icmp eq i32 %443, %308\l  br i1 %444, label %445, label %309, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x636f6d0:s0 -> Node0x636f4f0;
	Node0x636f6d0:s1 -> Node0x636f6d0;
	Node0x636f4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%445:\l445:                                              \l  %446 = phi float [ undef, %302 ], [ %437, %309 ]\l  %447 = phi float [ undef, %302 ], [ %439, %309 ]\l  %448 = phi i32 [ undef, %302 ], [ %441, %309 ]\l  %449 = phi i32 [ 0, %302 ], [ %441, %309 ]\l  %450 = phi i32 [ 0, %302 ], [ %442, %309 ]\l  %451 = phi float [ 0.000000e+00, %302 ], [ %439, %309 ]\l  %452 = phi float [ 0.000000e+00, %302 ], [ %437, %309 ]\l  %453 = icmp eq i32 %305, 0\l  br i1 %453, label %478, label %454\l|{<s0>T|<s1>F}}"];
	Node0x636f4f0:s0 -> Node0x6375180;
	Node0x636f4f0:s1 -> Node0x63751d0;
	Node0x63751d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%454:\l454:                                              \l  %455 = phi i32 [ %474, %454 ], [ %449, %445 ]\l  %456 = phi i32 [ %475, %454 ], [ %450, %445 ]\l  %457 = phi float [ %472, %454 ], [ %451, %445 ]\l  %458 = phi float [ %470, %454 ], [ %452, %445 ]\l  %459 = phi i32 [ %476, %454 ], [ 0, %445 ]\l  %460 = add nsw i32 %456, %14\l  %461 = sext i32 %460 to i64\l  %462 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %461\l  %463 = load i16, i16 addrspace(1)* %462, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %464 = uitofp i16 %463 to float\l  %465 = fcmp contract ogt float %303, %464\l  %466 = fcmp contract olt float %304, %464\l  %467 = and i1 %465, %466\l  %468 = fmul contract float %464, %464\l  %469 = select i1 %467, float %464, float -0.000000e+00\l  %470 = fadd contract float %458, %469\l  %471 = select i1 %467, float %468, float -0.000000e+00\l  %472 = fadd contract float %457, %471\l  %473 = zext i1 %467 to i32\l  %474 = add nuw nsw i32 %455, %473\l  %475 = add nuw nsw i32 %456, 1\l  %476 = add i32 %459, 1\l  %477 = icmp eq i32 %476, %305\l  br i1 %477, label %478, label %454, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x63751d0:s0 -> Node0x6375180;
	Node0x63751d0:s1 -> Node0x63751d0;
	Node0x6375180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%478:\l478:                                              \l  %479 = phi float [ %446, %445 ], [ %470, %454 ]\l  %480 = phi float [ %447, %445 ], [ %472, %454 ]\l  %481 = phi i32 [ %448, %445 ], [ %474, %454 ]\l  %482 = sitofp i32 %481 to float\l  br label %483\l}"];
	Node0x6375180 -> Node0x636f1b0;
	Node0x636f1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%483:\l483:                                              \l  %484 = phi float [ 0.000000e+00, %272 ], [ %479, %478 ]\l  %485 = phi float [ 0.000000e+00, %272 ], [ %480, %478 ]\l  %486 = phi float [ 0.000000e+00, %272 ], [ %482, %478 ]\l  %487 = fdiv contract float %484, %486\l  %488 = fdiv contract float %485, %486\l  %489 = fmul contract float %487, %487\l  %490 = fsub contract float %488, %489\l  %491 = fcmp olt float %490, 0x39F0000000000000\l  %492 = select i1 %491, float 0x41F0000000000000, float 1.000000e+00\l  %493 = fmul float %490, %492\l  %494 = tail call float @llvm.sqrt.f32(float %493)\l  %495 = bitcast float %494 to i32\l  %496 = add nsw i32 %495, -1\l  %497 = bitcast i32 %496 to float\l  %498 = add nsw i32 %495, 1\l  %499 = bitcast i32 %498 to float\l  %500 = tail call i1 @llvm.amdgcn.class.f32(float %493, i32 608)\l  %501 = select i1 %491, float 0x3EF0000000000000, float 1.000000e+00\l  %502 = fneg float %499\l  %503 = tail call float @llvm.fma.f32(float %502, float %494, float %493)\l  %504 = fcmp ogt float %503, 0.000000e+00\l  %505 = fneg float %497\l  %506 = tail call float @llvm.fma.f32(float %505, float %494, float %493)\l  %507 = fcmp ole float %506, 0.000000e+00\l  %508 = select i1 %507, float %497, float %494\l  %509 = select i1 %504, float %499, float %508\l  %510 = fmul float %501, %509\l  %511 = select i1 %500, float %493, float %510\l  %512 = fmul contract float %511, 4.000000e+00\l  br i1 %13, label %513, label %694\l|{<s0>T|<s1>F}}"];
	Node0x636f1b0:s0 -> Node0x636cc90;
	Node0x636f1b0:s1 -> Node0x636cce0;
	Node0x636cc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%513:\l513:                                              \l  %514 = fadd contract float %487, %512\l  %515 = fsub contract float %487, %512\l  %516 = and i32 %2, 7\l  %517 = icmp ult i32 %2, 8\l  br i1 %517, label %656, label %518\l|{<s0>T|<s1>F}}"];
	Node0x636cc90:s0 -> Node0x636d020;
	Node0x636cc90:s1 -> Node0x636d070;
	Node0x636d070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%518:\l518:                                              \l  %519 = and i32 %2, -8\l  br label %520\l}"];
	Node0x636d070 -> Node0x636d200;
	Node0x636d200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%520:\l520:                                              \l  %521 = phi i32 [ 0, %518 ], [ %652, %520 ]\l  %522 = phi i32 [ 0, %518 ], [ %653, %520 ]\l  %523 = phi float [ 0.000000e+00, %518 ], [ %650, %520 ]\l  %524 = phi float [ 0.000000e+00, %518 ], [ %648, %520 ]\l  %525 = phi i32 [ 0, %518 ], [ %654, %520 ]\l  %526 = add nsw i32 %522, %14\l  %527 = sext i32 %526 to i64\l  %528 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %527\l  %529 = load i16, i16 addrspace(1)* %528, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %530 = uitofp i16 %529 to float\l  %531 = fcmp contract ogt float %514, %530\l  %532 = fcmp contract olt float %515, %530\l  %533 = and i1 %531, %532\l  %534 = fmul contract float %530, %530\l  %535 = select i1 %533, float %530, float -0.000000e+00\l  %536 = fadd contract float %524, %535\l  %537 = select i1 %533, float %534, float -0.000000e+00\l  %538 = fadd contract float %523, %537\l  %539 = zext i1 %533 to i32\l  %540 = add nuw nsw i32 %521, %539\l  %541 = or i32 %522, 1\l  %542 = add nsw i32 %541, %14\l  %543 = sext i32 %542 to i64\l  %544 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %543\l  %545 = load i16, i16 addrspace(1)* %544, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %546 = uitofp i16 %545 to float\l  %547 = fcmp contract ogt float %514, %546\l  %548 = fcmp contract olt float %515, %546\l  %549 = and i1 %547, %548\l  %550 = fmul contract float %546, %546\l  %551 = select i1 %549, float %546, float -0.000000e+00\l  %552 = fadd contract float %536, %551\l  %553 = select i1 %549, float %550, float -0.000000e+00\l  %554 = fadd contract float %538, %553\l  %555 = zext i1 %549 to i32\l  %556 = add nuw nsw i32 %540, %555\l  %557 = or i32 %522, 2\l  %558 = add nsw i32 %557, %14\l  %559 = sext i32 %558 to i64\l  %560 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %559\l  %561 = load i16, i16 addrspace(1)* %560, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %562 = uitofp i16 %561 to float\l  %563 = fcmp contract ogt float %514, %562\l  %564 = fcmp contract olt float %515, %562\l  %565 = and i1 %563, %564\l  %566 = fmul contract float %562, %562\l  %567 = select i1 %565, float %562, float -0.000000e+00\l  %568 = fadd contract float %552, %567\l  %569 = select i1 %565, float %566, float -0.000000e+00\l  %570 = fadd contract float %554, %569\l  %571 = zext i1 %565 to i32\l  %572 = add nuw nsw i32 %556, %571\l  %573 = or i32 %522, 3\l  %574 = add nsw i32 %573, %14\l  %575 = sext i32 %574 to i64\l  %576 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %575\l  %577 = load i16, i16 addrspace(1)* %576, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %578 = uitofp i16 %577 to float\l  %579 = fcmp contract ogt float %514, %578\l  %580 = fcmp contract olt float %515, %578\l  %581 = and i1 %579, %580\l  %582 = fmul contract float %578, %578\l  %583 = select i1 %581, float %578, float -0.000000e+00\l  %584 = fadd contract float %568, %583\l  %585 = select i1 %581, float %582, float -0.000000e+00\l  %586 = fadd contract float %570, %585\l  %587 = zext i1 %581 to i32\l  %588 = add nuw nsw i32 %572, %587\l  %589 = or i32 %522, 4\l  %590 = add nsw i32 %589, %14\l  %591 = sext i32 %590 to i64\l  %592 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %591\l  %593 = load i16, i16 addrspace(1)* %592, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %594 = uitofp i16 %593 to float\l  %595 = fcmp contract ogt float %514, %594\l  %596 = fcmp contract olt float %515, %594\l  %597 = and i1 %595, %596\l  %598 = fmul contract float %594, %594\l  %599 = select i1 %597, float %594, float -0.000000e+00\l  %600 = fadd contract float %584, %599\l  %601 = select i1 %597, float %598, float -0.000000e+00\l  %602 = fadd contract float %586, %601\l  %603 = zext i1 %597 to i32\l  %604 = add nuw nsw i32 %588, %603\l  %605 = or i32 %522, 5\l  %606 = add nsw i32 %605, %14\l  %607 = sext i32 %606 to i64\l  %608 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %607\l  %609 = load i16, i16 addrspace(1)* %608, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %610 = uitofp i16 %609 to float\l  %611 = fcmp contract ogt float %514, %610\l  %612 = fcmp contract olt float %515, %610\l  %613 = and i1 %611, %612\l  %614 = fmul contract float %610, %610\l  %615 = select i1 %613, float %610, float -0.000000e+00\l  %616 = fadd contract float %600, %615\l  %617 = select i1 %613, float %614, float -0.000000e+00\l  %618 = fadd contract float %602, %617\l  %619 = zext i1 %613 to i32\l  %620 = add nuw nsw i32 %604, %619\l  %621 = or i32 %522, 6\l  %622 = add nsw i32 %621, %14\l  %623 = sext i32 %622 to i64\l  %624 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %623\l  %625 = load i16, i16 addrspace(1)* %624, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %626 = uitofp i16 %625 to float\l  %627 = fcmp contract ogt float %514, %626\l  %628 = fcmp contract olt float %515, %626\l  %629 = and i1 %627, %628\l  %630 = fmul contract float %626, %626\l  %631 = select i1 %629, float %626, float -0.000000e+00\l  %632 = fadd contract float %616, %631\l  %633 = select i1 %629, float %630, float -0.000000e+00\l  %634 = fadd contract float %618, %633\l  %635 = zext i1 %629 to i32\l  %636 = add nuw nsw i32 %620, %635\l  %637 = or i32 %522, 7\l  %638 = add nsw i32 %637, %14\l  %639 = sext i32 %638 to i64\l  %640 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %639\l  %641 = load i16, i16 addrspace(1)* %640, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %642 = uitofp i16 %641 to float\l  %643 = fcmp contract ogt float %514, %642\l  %644 = fcmp contract olt float %515, %642\l  %645 = and i1 %643, %644\l  %646 = fmul contract float %642, %642\l  %647 = select i1 %645, float %642, float -0.000000e+00\l  %648 = fadd contract float %632, %647\l  %649 = select i1 %645, float %646, float -0.000000e+00\l  %650 = fadd contract float %634, %649\l  %651 = zext i1 %645 to i32\l  %652 = add nuw nsw i32 %636, %651\l  %653 = add nuw nsw i32 %522, 8\l  %654 = add i32 %525, 8\l  %655 = icmp eq i32 %654, %519\l  br i1 %655, label %656, label %520, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x636d200:s0 -> Node0x636d020;
	Node0x636d200:s1 -> Node0x636d200;
	Node0x636d020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%656:\l656:                                              \l  %657 = phi float [ undef, %513 ], [ %648, %520 ]\l  %658 = phi float [ undef, %513 ], [ %650, %520 ]\l  %659 = phi i32 [ undef, %513 ], [ %652, %520 ]\l  %660 = phi i32 [ 0, %513 ], [ %652, %520 ]\l  %661 = phi i32 [ 0, %513 ], [ %653, %520 ]\l  %662 = phi float [ 0.000000e+00, %513 ], [ %650, %520 ]\l  %663 = phi float [ 0.000000e+00, %513 ], [ %648, %520 ]\l  %664 = icmp eq i32 %516, 0\l  br i1 %664, label %689, label %665\l|{<s0>T|<s1>F}}"];
	Node0x636d020:s0 -> Node0x637e170;
	Node0x636d020:s1 -> Node0x637e1c0;
	Node0x637e1c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%665:\l665:                                              \l  %666 = phi i32 [ %685, %665 ], [ %660, %656 ]\l  %667 = phi i32 [ %686, %665 ], [ %661, %656 ]\l  %668 = phi float [ %683, %665 ], [ %662, %656 ]\l  %669 = phi float [ %681, %665 ], [ %663, %656 ]\l  %670 = phi i32 [ %687, %665 ], [ 0, %656 ]\l  %671 = add nsw i32 %667, %14\l  %672 = sext i32 %671 to i64\l  %673 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %672\l  %674 = load i16, i16 addrspace(1)* %673, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %675 = uitofp i16 %674 to float\l  %676 = fcmp contract ogt float %514, %675\l  %677 = fcmp contract olt float %515, %675\l  %678 = and i1 %676, %677\l  %679 = fmul contract float %675, %675\l  %680 = select i1 %678, float %675, float -0.000000e+00\l  %681 = fadd contract float %669, %680\l  %682 = select i1 %678, float %679, float -0.000000e+00\l  %683 = fadd contract float %668, %682\l  %684 = zext i1 %678 to i32\l  %685 = add nuw nsw i32 %666, %684\l  %686 = add nuw nsw i32 %667, 1\l  %687 = add i32 %670, 1\l  %688 = icmp eq i32 %687, %516\l  br i1 %688, label %689, label %665, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x637e1c0:s0 -> Node0x637e170;
	Node0x637e1c0:s1 -> Node0x637e1c0;
	Node0x637e170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%689:\l689:                                              \l  %690 = phi float [ %657, %656 ], [ %681, %665 ]\l  %691 = phi float [ %658, %656 ], [ %683, %665 ]\l  %692 = phi i32 [ %659, %656 ], [ %685, %665 ]\l  %693 = sitofp i32 %692 to float\l  br label %694\l}"];
	Node0x637e170 -> Node0x636cce0;
	Node0x636cce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%694:\l694:                                              \l  %695 = phi float [ 0.000000e+00, %483 ], [ %690, %689 ]\l  %696 = phi float [ 0.000000e+00, %483 ], [ %691, %689 ]\l  %697 = phi float [ 0.000000e+00, %483 ], [ %693, %689 ]\l  %698 = fdiv contract float %695, %697\l  %699 = fdiv contract float %696, %697\l  %700 = fmul contract float %698, %698\l  %701 = fsub contract float %699, %700\l  %702 = fcmp olt float %701, 0x39F0000000000000\l  %703 = select i1 %702, float 0x41F0000000000000, float 1.000000e+00\l  %704 = fmul float %701, %703\l  %705 = tail call float @llvm.sqrt.f32(float %704)\l  %706 = bitcast float %705 to i32\l  %707 = add nsw i32 %706, -1\l  %708 = bitcast i32 %707 to float\l  %709 = add nsw i32 %706, 1\l  %710 = bitcast i32 %709 to float\l  %711 = tail call i1 @llvm.amdgcn.class.f32(float %704, i32 608)\l  %712 = select i1 %702, float 0x3EF0000000000000, float 1.000000e+00\l  %713 = fneg float %710\l  %714 = tail call float @llvm.fma.f32(float %713, float %705, float %704)\l  %715 = fcmp ogt float %714, 0.000000e+00\l  %716 = fneg float %708\l  %717 = tail call float @llvm.fma.f32(float %716, float %705, float %704)\l  %718 = fcmp ole float %717, 0.000000e+00\l  %719 = select i1 %718, float %708, float %705\l  %720 = select i1 %715, float %710, float %719\l  %721 = fmul float %712, %720\l  %722 = select i1 %711, float %704, float %721\l  %723 = fmul contract float %722, 4.000000e+00\l  %724 = icmp sgt i32 %2, 4\l  br i1 %724, label %20, label %868\l|{<s0>T|<s1>F}}"];
	Node0x636cce0:s0 -> Node0x6360a30;
	Node0x636cce0:s1 -> Node0x63807e0;
	Node0x6360970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%725:\l725:                                              \l  %726 = phi i32 [ 0, %18 ], [ %802, %725 ]\l  %727 = phi i32 [ 0, %18 ], [ %803, %725 ]\l  %728 = phi float [ 0.000000e+00, %18 ], [ %801, %725 ]\l  %729 = phi float [ 0.000000e+00, %18 ], [ %800, %725 ]\l  %730 = phi i32 [ 0, %18 ], [ %804, %725 ]\l  %731 = add nsw i32 %727, %14\l  %732 = sext i32 %731 to i64\l  %733 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %732\l  %734 = load i16, i16 addrspace(1)* %733, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %735 = uitofp i16 %734 to float\l  %736 = fmul contract float %735, %735\l  %737 = fadd contract float %729, %735\l  %738 = fadd contract float %728, %736\l  %739 = or i32 %727, 1\l  %740 = add nsw i32 %739, %14\l  %741 = sext i32 %740 to i64\l  %742 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %741\l  %743 = load i16, i16 addrspace(1)* %742, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %744 = uitofp i16 %743 to float\l  %745 = fmul contract float %744, %744\l  %746 = fadd contract float %737, %744\l  %747 = fadd contract float %738, %745\l  %748 = or i32 %727, 2\l  %749 = add nsw i32 %748, %14\l  %750 = sext i32 %749 to i64\l  %751 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %750\l  %752 = load i16, i16 addrspace(1)* %751, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %753 = uitofp i16 %752 to float\l  %754 = fmul contract float %753, %753\l  %755 = fadd contract float %746, %753\l  %756 = fadd contract float %747, %754\l  %757 = or i32 %727, 3\l  %758 = add nsw i32 %757, %14\l  %759 = sext i32 %758 to i64\l  %760 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %759\l  %761 = load i16, i16 addrspace(1)* %760, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %762 = uitofp i16 %761 to float\l  %763 = fmul contract float %762, %762\l  %764 = fadd contract float %755, %762\l  %765 = fadd contract float %756, %763\l  %766 = or i32 %727, 4\l  %767 = add nsw i32 %766, %14\l  %768 = sext i32 %767 to i64\l  %769 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %768\l  %770 = load i16, i16 addrspace(1)* %769, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %771 = uitofp i16 %770 to float\l  %772 = fmul contract float %771, %771\l  %773 = fadd contract float %764, %771\l  %774 = fadd contract float %765, %772\l  %775 = or i32 %727, 5\l  %776 = add nsw i32 %775, %14\l  %777 = sext i32 %776 to i64\l  %778 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %777\l  %779 = load i16, i16 addrspace(1)* %778, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %780 = uitofp i16 %779 to float\l  %781 = fmul contract float %780, %780\l  %782 = fadd contract float %773, %780\l  %783 = fadd contract float %774, %781\l  %784 = or i32 %727, 6\l  %785 = add nsw i32 %784, %14\l  %786 = sext i32 %785 to i64\l  %787 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %786\l  %788 = load i16, i16 addrspace(1)* %787, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %789 = uitofp i16 %788 to float\l  %790 = fmul contract float %789, %789\l  %791 = fadd contract float %782, %789\l  %792 = fadd contract float %783, %790\l  %793 = or i32 %727, 7\l  %794 = add nsw i32 %793, %14\l  %795 = sext i32 %794 to i64\l  %796 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %795\l  %797 = load i16, i16 addrspace(1)* %796, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %798 = uitofp i16 %797 to float\l  %799 = fmul contract float %798, %798\l  %800 = fadd contract float %791, %798\l  %801 = fadd contract float %792, %799\l  %802 = add nuw nsw i32 %726, 8\l  %803 = add nuw nsw i32 %727, 8\l  %804 = add i32 %730, 8\l  %805 = icmp eq i32 %804, %19\l  br i1 %805, label %29, label %725, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x6360970:s0 -> Node0x635fd30;
	Node0x6360970:s1 -> Node0x6360970;
	Node0x63611c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%806:\l806:                                              \l  %807 = phi i32 [ 0, %26 ], [ %901, %900 ]\l  %808 = phi i32 [ 0, %26 ], [ %902, %900 ]\l  %809 = add nsw i32 %807, %14\l  %810 = sext i32 %809 to i64\l  %811 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %810\l  %812 = load i16, i16 addrspace(1)* %811, align 2, !tbaa !7\l  %813 = uitofp i16 %812 to float\l  %814 = add nsw i32 %809, 1\l  %815 = sext i32 %814 to i64\l  %816 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %815\l  %817 = load i16, i16 addrspace(1)* %816, align 2, !tbaa !7\l  %818 = uitofp i16 %817 to float\l  %819 = fadd contract float %813, %818\l  %820 = add nsw i32 %809, 2\l  %821 = sext i32 %820 to i64\l  %822 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %821\l  %823 = load i16, i16 addrspace(1)* %822, align 2, !tbaa !7\l  %824 = uitofp i16 %823 to float\l  %825 = fadd contract float %819, %824\l  %826 = add nsw i32 %809, 3\l  %827 = sext i32 %826 to i64\l  %828 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %827\l  %829 = load i16, i16 addrspace(1)* %828, align 2, !tbaa !7\l  %830 = uitofp i16 %829 to float\l  %831 = fadd contract float %825, %830\l  %832 = fmul contract float %831, 2.500000e-01\l  %833 = fcmp contract ogt float %832, %21\l  %834 = fcmp contract olt float %832, %22\l  %835 = or i1 %833, %834\l  br i1 %835, label %869, label %870\l|{<s0>T|<s1>F}}"];
	Node0x63611c0:s0 -> Node0x6366df0;
	Node0x63611c0:s1 -> Node0x6366e40;
	Node0x6360e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%836:\l836:                                              \l  %837 = phi i32 [ 0, %20 ], [ %901, %900 ]\l  %838 = icmp eq i32 %24, 0\l  br i1 %838, label %868, label %839\l|{<s0>T|<s1>F}}"];
	Node0x6360e70:s0 -> Node0x63807e0;
	Node0x6360e70:s1 -> Node0x6385100;
	Node0x6385100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%839:\l839:                                              \l  %840 = add nsw i32 %837, %14\l  %841 = sext i32 %840 to i64\l  %842 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %841\l  %843 = load i16, i16 addrspace(1)* %842, align 2, !tbaa !7\l  %844 = uitofp i16 %843 to float\l  %845 = add nsw i32 %840, 1\l  %846 = sext i32 %845 to i64\l  %847 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %846\l  %848 = load i16, i16 addrspace(1)* %847, align 2, !tbaa !7\l  %849 = uitofp i16 %848 to float\l  %850 = fadd contract float %844, %849\l  %851 = add nsw i32 %840, 2\l  %852 = sext i32 %851 to i64\l  %853 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %852\l  %854 = load i16, i16 addrspace(1)* %853, align 2, !tbaa !7\l  %855 = uitofp i16 %854 to float\l  %856 = fadd contract float %850, %855\l  %857 = add nsw i32 %840, 3\l  %858 = sext i32 %857 to i64\l  %859 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %858\l  %860 = load i16, i16 addrspace(1)* %859, align 2, !tbaa !7\l  %861 = uitofp i16 %860 to float\l  %862 = fadd contract float %856, %861\l  %863 = fmul contract float %862, 2.500000e-01\l  %864 = fcmp contract ogt float %863, %21\l  %865 = fcmp contract olt float %863, %22\l  %866 = or i1 %864, %865\l  br i1 %866, label %867, label %868\l|{<s0>T|<s1>F}}"];
	Node0x6385100:s0 -> Node0x6385ff0;
	Node0x6385100:s1 -> Node0x63807e0;
	Node0x6385ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%867:\l867:                                              \l  store i16 %23, i16 addrspace(1)* %842, align 2, !tbaa !7\l  br label %868\l}"];
	Node0x6385ff0 -> Node0x63807e0;
	Node0x63807e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%868:\l868:                                              \l  ret void\l}"];
	Node0x6366df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%869:\l869:                                              \l  store i16 %23, i16 addrspace(1)* %811, align 2, !tbaa !7\l  br label %870\l}"];
	Node0x6366df0 -> Node0x6366e40;
	Node0x6366e40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%870:\l870:                                              \l  %871 = or i32 %807, 1\l  %872 = add nsw i32 %871, %14\l  %873 = sext i32 %872 to i64\l  %874 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %873\l  %875 = load i16, i16 addrspace(1)* %874, align 2, !tbaa !7\l  %876 = uitofp i16 %875 to float\l  %877 = add nsw i32 %872, 1\l  %878 = sext i32 %877 to i64\l  %879 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %878\l  %880 = load i16, i16 addrspace(1)* %879, align 2, !tbaa !7\l  %881 = uitofp i16 %880 to float\l  %882 = fadd contract float %876, %881\l  %883 = add nsw i32 %872, 2\l  %884 = sext i32 %883 to i64\l  %885 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %884\l  %886 = load i16, i16 addrspace(1)* %885, align 2, !tbaa !7\l  %887 = uitofp i16 %886 to float\l  %888 = fadd contract float %882, %887\l  %889 = add nsw i32 %872, 3\l  %890 = sext i32 %889 to i64\l  %891 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %890\l  %892 = load i16, i16 addrspace(1)* %891, align 2, !tbaa !7\l  %893 = uitofp i16 %892 to float\l  %894 = fadd contract float %888, %893\l  %895 = fmul contract float %894, 2.500000e-01\l  %896 = fcmp contract ogt float %895, %21\l  %897 = fcmp contract olt float %895, %22\l  %898 = or i1 %896, %897\l  br i1 %898, label %899, label %900\l|{<s0>T|<s1>F}}"];
	Node0x6366e40:s0 -> Node0x63877d0;
	Node0x6366e40:s1 -> Node0x6383570;
	Node0x63877d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%899:\l899:                                              \l  store i16 %23, i16 addrspace(1)* %874, align 2, !tbaa !7\l  br label %900\l}"];
	Node0x63877d0 -> Node0x6383570;
	Node0x6383570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%900:\l900:                                              \l  %901 = add nuw nsw i32 %807, 2\l  %902 = add i32 %808, 2\l  %903 = icmp eq i32 %808, %28\l  br i1 %903, label %836, label %806, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x6383570:s0 -> Node0x6360e70;
	Node0x6383570:s1 -> Node0x63611c0;
}
