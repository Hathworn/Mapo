digraph "CFG for '_Z16multSquareMatrixPiS_S_i' function" {
	label="CFG for '_Z16multSquareMatrixPiS_S_i' function";

	Node0x46f0100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp sgt i32 %3, 0\l  br i1 %14, label %15, label %108\l|{<s0>T|<s1>F}}"];
	Node0x46f0100:s0 -> Node0x46f2010;
	Node0x46f0100:s1 -> Node0x46f20a0;
	Node0x46f2010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = mul nsw i32 %23, %3\l  %25 = add nsw i32 %24, %13\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %26\l  %28 = and i32 %3, 3\l  %29 = icmp ult i32 %3, 4\l  br i1 %29, label %86, label %30\l|{<s0>T|<s1>F}}"];
	Node0x46f2010:s0 -> Node0x46f3fa0;
	Node0x46f2010:s1 -> Node0x46f4030;
	Node0x46f4030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%30:\l30:                                               \l  %31 = and i32 %3, -4\l  br label %32\l}"];
	Node0x46f4030 -> Node0x46f4230;
	Node0x46f4230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%32:\l32:                                               \l  %33 = phi i32 [ 0, %30 ], [ %83, %32 ]\l  %34 = phi i32 [ 0, %30 ], [ %82, %32 ]\l  %35 = phi i32 [ 0, %30 ], [ %84, %32 ]\l  %36 = add nsw i32 %33, %24\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %37\l  %39 = load i32, i32 addrspace(1)* %38, align 4, !tbaa !7\l  %40 = mul nsw i32 %33, %3\l  %41 = add nsw i32 %40, %13\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %42\l  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !7\l  %45 = mul nsw i32 %44, %39\l  %46 = add nsw i32 %45, %34\l  store i32 %46, i32 addrspace(1)* %27, align 4, !tbaa !7\l  %47 = or i32 %33, 1\l  %48 = add nsw i32 %47, %24\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %49\l  %51 = load i32, i32 addrspace(1)* %50, align 4, !tbaa !7\l  %52 = mul nsw i32 %47, %3\l  %53 = add nsw i32 %52, %13\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %54\l  %56 = load i32, i32 addrspace(1)* %55, align 4, !tbaa !7\l  %57 = mul nsw i32 %56, %51\l  %58 = add nsw i32 %57, %46\l  store i32 %58, i32 addrspace(1)* %27, align 4, !tbaa !7\l  %59 = or i32 %33, 2\l  %60 = add nsw i32 %59, %24\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %61\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !7\l  %64 = mul nsw i32 %59, %3\l  %65 = add nsw i32 %64, %13\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %66\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !7\l  %69 = mul nsw i32 %68, %63\l  %70 = add nsw i32 %69, %58\l  store i32 %70, i32 addrspace(1)* %27, align 4, !tbaa !7\l  %71 = or i32 %33, 3\l  %72 = add nsw i32 %71, %24\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %73\l  %75 = load i32, i32 addrspace(1)* %74, align 4, !tbaa !7\l  %76 = mul nsw i32 %71, %3\l  %77 = add nsw i32 %76, %13\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %78\l  %80 = load i32, i32 addrspace(1)* %79, align 4, !tbaa !7\l  %81 = mul nsw i32 %80, %75\l  %82 = add nsw i32 %81, %70\l  store i32 %82, i32 addrspace(1)* %27, align 4, !tbaa !7\l  %83 = add nuw nsw i32 %33, 4\l  %84 = add i32 %35, 4\l  %85 = icmp eq i32 %84, %31\l  br i1 %85, label %86, label %32, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x46f4230:s0 -> Node0x46f3fa0;
	Node0x46f4230:s1 -> Node0x46f4230;
	Node0x46f3fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%86:\l86:                                               \l  %87 = phi i32 [ 0, %15 ], [ %83, %32 ]\l  %88 = phi i32 [ 0, %15 ], [ %82, %32 ]\l  %89 = icmp eq i32 %28, 0\l  br i1 %89, label %108, label %90\l|{<s0>T|<s1>F}}"];
	Node0x46f3fa0:s0 -> Node0x46f20a0;
	Node0x46f3fa0:s1 -> Node0x46f70f0;
	Node0x46f70f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%90:\l90:                                               \l  %91 = phi i32 [ %105, %90 ], [ %87, %86 ]\l  %92 = phi i32 [ %104, %90 ], [ %88, %86 ]\l  %93 = phi i32 [ %106, %90 ], [ 0, %86 ]\l  %94 = add nsw i32 %91, %24\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %95\l  %97 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !7\l  %98 = mul nsw i32 %91, %3\l  %99 = add nsw i32 %98, %13\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %100\l  %102 = load i32, i32 addrspace(1)* %101, align 4, !tbaa !7\l  %103 = mul nsw i32 %102, %97\l  %104 = add nsw i32 %103, %92\l  store i32 %104, i32 addrspace(1)* %27, align 4, !tbaa !7\l  %105 = add nuw nsw i32 %91, 1\l  %106 = add i32 %93, 1\l  %107 = icmp eq i32 %106, %28\l  br i1 %107, label %108, label %90, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x46f70f0:s0 -> Node0x46f20a0;
	Node0x46f70f0:s1 -> Node0x46f70f0;
	Node0x46f20a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%108:\l108:                                              \l  ret void\l}"];
}
