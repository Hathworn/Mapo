digraph "CFG for '_Z13CudaTransformPhPjii' function" {
	label="CFG for '_Z13CudaTransformPhPjii' function";

	Node0x5098410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !13, !invariant.load\l... !14\l  %25 = zext i16 %24 to i32\l  %26 = mul i32 %21, %25\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %26, %27\l  %30 = mul i32 %29, %14\l  %31 = add i32 %30, %28\l  %32 = mul nsw i32 %3, %2\l  %33 = icmp ult i32 %31, %32\l  br i1 %33, label %34, label %263\l|{<s0>T|<s1>F}}"];
	Node0x5098410:s0 -> Node0x509a520;
	Node0x5098410:s1 -> Node0x509c670;
	Node0x509a520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%34:\l34:                                               \l  %35 = tail call double @llvm.amdgcn.rsq.f64(double 2.000000e+00)\l  %36 = fmul double %35, 2.000000e+00\l  %37 = fmul double %35, 5.000000e-01\l  %38 = fneg double %37\l  %39 = tail call double @llvm.fma.f64(double %38, double %36, double\l... 5.000000e-01)\l  %40 = tail call double @llvm.fma.f64(double %37, double %39, double %37)\l  %41 = tail call double @llvm.fma.f64(double %36, double %39, double %36)\l  %42 = fneg double %41\l  %43 = tail call double @llvm.fma.f64(double %42, double %41, double\l... 2.000000e+00)\l  %44 = tail call double @llvm.fma.f64(double %43, double %40, double %41)\l  %45 = fneg double %44\l  %46 = tail call double @llvm.fma.f64(double %45, double %44, double\l... 2.000000e+00)\l  %47 = tail call double @llvm.fma.f64(double %46, double %40, double %44)\l  %48 = tail call i32 @llvm.smax.i32(i32 %3, i32 %2)\l  %49 = sitofp i32 %48 to float\l  %50 = fpext float %49 to double\l  %51 = fmul contract double %47, %50\l  %52 = fmul contract double %51, 5.000000e-01\l  %53 = fptrunc double %52 to float\l  %54 = zext i32 %31 to i64\l  %55 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %54\l  %56 = load i8, i8 addrspace(1)* %55, align 1, !tbaa !16, !amdgpu.noclobber\l... !14\l  %57 = icmp ugt i8 %56, -6\l  br i1 %57, label %58, label %263\l|{<s0>T|<s1>F}}"];
	Node0x509a520:s0 -> Node0x509e8b0;
	Node0x509a520:s1 -> Node0x509c670;
	Node0x509e8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%58:\l58:                                               \l  %59 = freeze i32 %31\l  %60 = freeze i32 %2\l  %61 = udiv i32 %59, %60\l  %62 = mul i32 %61, %60\l  %63 = sub i32 %59, %62\l  %64 = sdiv i32 %3, 2\l  %65 = sitofp i32 %64 to float\l  %66 = sdiv i32 %2, 2\l  %67 = sitofp i32 %66 to float\l  %68 = sitofp i32 %63 to float\l  %69 = fsub contract float %68, %67\l  %70 = sitofp i32 %61 to float\l  %71 = fsub contract float %70, %65\l  br label %72\l}"];
	Node0x509e8b0 -> Node0x509f2e0;
	Node0x509f2e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%72:\l72:                                               \l  %73 = phi i32 [ 0, %58 ], [ %261, %232 ]\l  %74 = sitofp i32 %73 to float\l  %75 = fmul contract float %74, 0x3F91DF46A0000000\l  %76 = tail call float @llvm.fabs.f32(float %75)\l  %77 = fcmp olt float %76, 1.310720e+05\l  br i1 %77, label %78, label %106\l|{<s0>T|<s1>F}}"];
	Node0x509f2e0:s0 -> Node0x509f910;
	Node0x509f2e0:s1 -> Node0x509f9a0;
	Node0x509f910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%78:\l78:                                               \l  %79 = fmul float %76, 0x3FE45F3060000000\l  %80 = tail call float @llvm.rint.f32(float %79)\l  %81 = tail call float @llvm.fma.f32(float %80, float 0xBFF921FB40000000,\l... float %76)\l  %82 = tail call float @llvm.fma.f32(float %80, float 0xBE74442D00000000,\l... float %81)\l  %83 = tail call float @llvm.fma.f32(float %80, float 0xBCF8469880000000,\l... float %82)\l  %84 = fptosi float %80 to i32\l  %85 = fmul float %83, %83\l  %86 = tail call float @llvm.fmuladd.f32(float %85, float 0xBF29833040000000,\l... float 0x3F81103880000000)\l  %87 = tail call float @llvm.fmuladd.f32(float %85, float %86, float\l... 0xBFC55553A0000000)\l  %88 = fmul float %85, %87\l  %89 = tail call float @llvm.fmuladd.f32(float %83, float %88, float %83)\l  %90 = tail call float @llvm.fmuladd.f32(float %85, float 0x3EFAEA6680000000,\l... float 0xBF56C9E760000000)\l  %91 = tail call float @llvm.fmuladd.f32(float %85, float %90, float\l... 0x3FA5557EE0000000)\l  %92 = tail call float @llvm.fmuladd.f32(float %85, float %91, float\l... 0xBFE0000080000000)\l  %93 = tail call float @llvm.fmuladd.f32(float %85, float %92, float\l... 1.000000e+00)\l  %94 = fneg float %89\l  %95 = and i32 %84, 1\l  %96 = icmp eq i32 %95, 0\l  %97 = select i1 %96, float %93, float %94\l  %98 = bitcast float %97 to i32\l  %99 = shl i32 %84, 30\l  %100 = and i32 %99, -2147483648\l  %101 = xor i32 %100, %98\l  %102 = bitcast i32 %101 to float\l  %103 = tail call i1 @llvm.amdgcn.class.f32(float %76, i32 504)\l  %104 = select i1 %103, float %102, float 0x7FF8000000000000\l  %105 = bitcast float %76 to i32\l  br label %232\l}"];
	Node0x509f910 -> Node0x509f3d0;
	Node0x509f9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%106:\l106:                                              \l  %107 = bitcast float %76 to i32\l  %108 = lshr i32 %107, 23\l  %109 = and i32 %107, 8388607\l  %110 = or i32 %109, 8388608\l  %111 = zext i32 %110 to i64\l  %112 = mul nuw nsw i64 %111, 4266746795\l  %113 = trunc i64 %112 to i32\l  %114 = lshr i64 %112, 32\l  %115 = mul nuw nsw i64 %111, 1011060801\l  %116 = add nuw nsw i64 %114, %115\l  %117 = trunc i64 %116 to i32\l  %118 = lshr i64 %116, 32\l  %119 = mul nuw nsw i64 %111, 3680671129\l  %120 = add nuw nsw i64 %118, %119\l  %121 = trunc i64 %120 to i32\l  %122 = lshr i64 %120, 32\l  %123 = mul nuw nsw i64 %111, 4113882560\l  %124 = add nuw nsw i64 %122, %123\l  %125 = trunc i64 %124 to i32\l  %126 = lshr i64 %124, 32\l  %127 = mul nuw nsw i64 %111, 4230436817\l  %128 = add nuw nsw i64 %126, %127\l  %129 = trunc i64 %128 to i32\l  %130 = lshr i64 %128, 32\l  %131 = mul nuw nsw i64 %111, 1313084713\l  %132 = add nuw nsw i64 %130, %131\l  %133 = trunc i64 %132 to i32\l  %134 = lshr i64 %132, 32\l  %135 = mul nuw nsw i64 %111, 2734261102\l  %136 = add nuw nsw i64 %134, %135\l  %137 = trunc i64 %136 to i32\l  %138 = lshr i64 %136, 32\l  %139 = trunc i64 %138 to i32\l  %140 = add nsw i32 %108, -120\l  %141 = icmp ugt i32 %140, 63\l  %142 = select i1 %141, i32 %133, i32 %139\l  %143 = select i1 %141, i32 %129, i32 %137\l  %144 = select i1 %141, i32 %125, i32 %133\l  %145 = select i1 %141, i32 %121, i32 %129\l  %146 = select i1 %141, i32 %117, i32 %125\l  %147 = select i1 %141, i32 %113, i32 %121\l  %148 = select i1 %141, i32 -64, i32 0\l  %149 = add nsw i32 %148, %140\l  %150 = icmp ugt i32 %149, 31\l  %151 = select i1 %150, i32 %143, i32 %142\l  %152 = select i1 %150, i32 %144, i32 %143\l  %153 = select i1 %150, i32 %145, i32 %144\l  %154 = select i1 %150, i32 %146, i32 %145\l  %155 = select i1 %150, i32 %147, i32 %146\l  %156 = select i1 %150, i32 -32, i32 0\l  %157 = add nsw i32 %156, %149\l  %158 = icmp ugt i32 %157, 31\l  %159 = select i1 %158, i32 %152, i32 %151\l  %160 = select i1 %158, i32 %153, i32 %152\l  %161 = select i1 %158, i32 %154, i32 %153\l  %162 = select i1 %158, i32 %155, i32 %154\l  %163 = select i1 %158, i32 -32, i32 0\l  %164 = add nsw i32 %163, %157\l  %165 = icmp eq i32 %164, 0\l  %166 = sub nsw i32 32, %164\l  %167 = tail call i32 @llvm.fshr.i32(i32 %159, i32 %160, i32 %166)\l  %168 = tail call i32 @llvm.fshr.i32(i32 %160, i32 %161, i32 %166)\l  %169 = tail call i32 @llvm.fshr.i32(i32 %161, i32 %162, i32 %166)\l  %170 = select i1 %165, i32 %159, i32 %167\l  %171 = select i1 %165, i32 %160, i32 %168\l  %172 = select i1 %165, i32 %161, i32 %169\l  %173 = lshr i32 %170, 29\l  %174 = tail call i32 @llvm.fshl.i32(i32 %170, i32 %171, i32 2)\l  %175 = tail call i32 @llvm.fshl.i32(i32 %171, i32 %172, i32 2)\l  %176 = tail call i32 @llvm.fshl.i32(i32 %172, i32 %162, i32 2)\l  %177 = and i32 %173, 1\l  %178 = sub nsw i32 0, %177\l  %179 = shl i32 %173, 31\l  %180 = xor i32 %174, %178\l  %181 = xor i32 %175, %178\l  %182 = xor i32 %176, %178\l  %183 = tail call i32 @llvm.ctlz.i32(i32 %180, i1 false), !range !19\l  %184 = sub nsw i32 31, %183\l  %185 = tail call i32 @llvm.fshr.i32(i32 %180, i32 %181, i32 %184)\l  %186 = tail call i32 @llvm.fshr.i32(i32 %181, i32 %182, i32 %184)\l  %187 = shl nuw nsw i32 %183, 23\l  %188 = sub nuw nsw i32 1056964608, %187\l  %189 = lshr i32 %185, 9\l  %190 = or i32 %189, %188\l  %191 = or i32 %190, %179\l  %192 = bitcast i32 %191 to float\l  %193 = tail call i32 @llvm.fshl.i32(i32 %185, i32 %186, i32 23)\l  %194 = tail call i32 @llvm.ctlz.i32(i32 %193, i1 false), !range !19\l  %195 = fmul float %192, 0x3FF921FB40000000\l  %196 = add nuw nsw i32 %194, %183\l  %197 = shl nuw nsw i32 %196, 23\l  %198 = sub nuw nsw i32 855638016, %197\l  %199 = sub nsw i32 31, %194\l  %200 = tail call i32 @llvm.fshr.i32(i32 %193, i32 %186, i32 %199)\l  %201 = lshr i32 %200, 9\l  %202 = or i32 %198, %201\l  %203 = or i32 %202, %179\l  %204 = bitcast i32 %203 to float\l  %205 = fneg float %195\l  %206 = tail call float @llvm.fma.f32(float %192, float 0x3FF921FB40000000,\l... float %205)\l  %207 = tail call float @llvm.fma.f32(float %192, float 0x3E74442D00000000,\l... float %206)\l  %208 = tail call float @llvm.fma.f32(float %204, float 0x3FF921FB40000000,\l... float %207)\l  %209 = fadd float %195, %208\l  %210 = lshr i32 %170, 30\l  %211 = add nuw nsw i32 %177, %210\l  %212 = fmul float %209, %209\l  %213 = tail call float @llvm.fmuladd.f32(float %212, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %214 = tail call float @llvm.fmuladd.f32(float %212, float %213, float\l... 0xBFC55553A0000000)\l  %215 = fmul float %212, %214\l  %216 = tail call float @llvm.fmuladd.f32(float %209, float %215, float %209)\l  %217 = tail call float @llvm.fmuladd.f32(float %212, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %218 = tail call float @llvm.fmuladd.f32(float %212, float %217, float\l... 0x3FA5557EE0000000)\l  %219 = tail call float @llvm.fmuladd.f32(float %212, float %218, float\l... 0xBFE0000080000000)\l  %220 = tail call float @llvm.fmuladd.f32(float %212, float %219, float\l... 1.000000e+00)\l  %221 = fneg float %216\l  %222 = and i32 %211, 1\l  %223 = icmp eq i32 %222, 0\l  %224 = select i1 %223, float %220, float %221\l  %225 = bitcast float %224 to i32\l  %226 = shl i32 %211, 30\l  %227 = and i32 %226, -2147483648\l  %228 = xor i32 %227, %225\l  %229 = bitcast i32 %228 to float\l  %230 = tail call i1 @llvm.amdgcn.class.f32(float %76, i32 504)\l  %231 = select i1 %230, float %229, float 0x7FF8000000000000\l  br label %232\l}"];
	Node0x509f9a0 -> Node0x509f3d0;
	Node0x509f3d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%232:\l232:                                              \l  %233 = phi i32 [ %100, %78 ], [ %227, %106 ]\l  %234 = phi i32 [ %95, %78 ], [ %222, %106 ]\l  %235 = phi float [ %93, %78 ], [ %220, %106 ]\l  %236 = phi float [ %89, %78 ], [ %216, %106 ]\l  %237 = phi float [ %104, %78 ], [ %231, %106 ]\l  %238 = phi i1 [ %103, %78 ], [ %230, %106 ]\l  %239 = phi i32 [ %105, %78 ], [ %107, %106 ]\l  %240 = fmul contract float %69, %237\l  %241 = icmp eq i32 %234, 0\l  %242 = select i1 %241, float %236, float %235\l  %243 = bitcast float %242 to i32\l  %244 = bitcast float %75 to i32\l  %245 = xor i32 %239, %244\l  %246 = xor i32 %245, %233\l  %247 = xor i32 %246, %243\l  %248 = bitcast i32 %247 to float\l  %249 = select i1 %238, float %248, float 0x7FF8000000000000\l  %250 = fmul contract float %71, %249\l  %251 = fadd contract float %240, %250\l  %252 = fadd contract float %251, %53\l  %253 = tail call float @llvm.round.f32(float %252)\l  %254 = fpext float %253 to double\l  %255 = fmul contract double %254, 1.800000e+02\l  %256 = fptosi double %255 to i32\l  %257 = add nsw i32 %73, %256\l  %258 = sext i32 %257 to i64\l  %259 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %258\l  %260 = atomicrmw add i32 addrspace(1)* %259, i32 1 syncscope(\"agent-one-as\")\l... monotonic, align 4\l  %261 = add nuw nsw i32 %73, 1\l  %262 = icmp eq i32 %261, 180\l  br i1 %262, label %263, label %72, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x509f3d0:s0 -> Node0x509c670;
	Node0x509f3d0:s1 -> Node0x509f2e0;
	Node0x509c670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%263:\l263:                                              \l  ret void\l}"];
}
