digraph "CFG for '_Z12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_' function" {
	label="CFG for '_Z12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_' function";

	Node0x5e40a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = add i32 %13, %6\l  %15 = add nsw i32 %14, %3\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %0, i64 %16, i32 0, i32 0, i32 0, i64\l... 0\l  %18 = load float, float addrspace(1)* %17, align 16, !tbaa !7,\l... !amdgpu.noclobber !6\l  %19 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %0, i64 %16, i32 0, i32 0, i32 0, i64\l... 1\l  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %21 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %0, i64 %16, i32 0, i32 0, i32 0, i64\l... 2\l  %22 = load float, float addrspace(1)* %21, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %23 = sext i32 %14 to i64\l  %24 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %23, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %25 = load float, float addrspace(1)* %24, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %26 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %23, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %28 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %23, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %30 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %6\l  %31 = bitcast %struct.HIP_vector_type addrspace(3)* %30 to i8 addrspace(3)*\l  %32 = zext i32 %6 to i64\l  %33 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %32\l  %34 = bitcast %struct.HIP_vector_type addrspace(1)* %33 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %34, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1853\l}"];
	Node0x5e40a90 -> Node0x5e44e50;
	Node0x5e44f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%35:\l35:                                               \l  %36 = add nuw nsw i32 %6, %11\l  %37 = zext i32 %36 to i64\l  %38 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %37\l  %39 = bitcast %struct.HIP_vector_type addrspace(1)* %38 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %39, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %40\l}"];
	Node0x5e44f50 -> Node0x5e45500;
	Node0x5e45500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi float [ %1923, %35 ], [ %110, %40 ]\l  %42 = phi float [ %1922, %35 ], [ %109, %40 ]\l  %43 = phi float [ %1921, %35 ], [ %108, %40 ]\l  %44 = phi i32 [ 1, %35 ], [ %111, %40 ]\l  %45 = add nsw i32 %44, -1\l  %46 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %45, i32 0, i32 0, i32 0, i32 0, i32 0\l  %47 = load float, float addrspace(3)* %46, align 4\l  %48 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %45, i32 0, i32 0, i32 0, i32 0, i32 1\l  %49 = load float, float addrspace(3)* %48, align 4\l  %50 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %45, i32 0, i32 0, i32 0, i32 0, i32 2\l  %51 = load float, float addrspace(3)* %50, align 4\l  %52 = and i32 %44, 255\l  %53 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %52, i32 0, i32 0, i32 0, i32 0, i32 0\l  %54 = load float, float addrspace(3)* %53, align 4\l  %55 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %52, i32 0, i32 0, i32 0, i32 0, i32 1\l  %56 = load float, float addrspace(3)* %55, align 4\l  %57 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %52, i32 0, i32 0, i32 0, i32 0, i32 2\l  %58 = load float, float addrspace(3)* %57, align 4\l  %59 = fsub contract float %54, %47\l  %60 = fsub contract float %56, %49\l  %61 = fsub contract float %58, %51\l  %62 = fsub contract float %18, %47\l  %63 = fsub contract float %20, %49\l  %64 = fsub contract float %22, %51\l  %65 = fmul contract float %62, %62\l  %66 = fmul contract float %63, %63\l  %67 = fadd contract float %65, %66\l  %68 = fmul contract float %64, %64\l  %69 = fadd contract float %68, %67\l  %70 = fdiv contract float 1.000000e+00, %69\l  %71 = fcmp olt float %69, 0x39F0000000000000\l  %72 = select i1 %71, float 0x41F0000000000000, float 1.000000e+00\l  %73 = fmul float %69, %72\l  %74 = tail call float @llvm.sqrt.f32(float %73)\l  %75 = bitcast float %74 to i32\l  %76 = add nsw i32 %75, -1\l  %77 = bitcast i32 %76 to float\l  %78 = add nsw i32 %75, 1\l  %79 = bitcast i32 %78 to float\l  %80 = tail call i1 @llvm.amdgcn.class.f32(float %73, i32 608)\l  %81 = select i1 %71, float 0x3EF0000000000000, float 1.000000e+00\l  %82 = fneg float %79\l  %83 = tail call float @llvm.fma.f32(float %82, float %74, float %73)\l  %84 = fcmp ogt float %83, 0.000000e+00\l  %85 = fneg float %77\l  %86 = tail call float @llvm.fma.f32(float %85, float %74, float %73)\l  %87 = fcmp ole float %86, 0.000000e+00\l  %88 = select i1 %87, float %77, float %74\l  %89 = select i1 %84, float %79, float %88\l  %90 = fmul float %81, %89\l  %91 = select i1 %80, float %73, float %90\l  %92 = fdiv contract float 1.000000e+00, %91\l  %93 = fmul contract float %62, %92\l  %94 = fmul contract float %63, %92\l  %95 = fmul contract float %64, %92\l  %96 = fmul contract float %60, %95\l  %97 = fmul contract float %61, %94\l  %98 = fsub contract float %96, %97\l  %99 = fmul contract float %70, %98\l  %100 = fmul contract float %61, %93\l  %101 = fmul contract float %59, %95\l  %102 = fsub contract float %100, %101\l  %103 = fmul contract float %70, %102\l  %104 = fmul contract float %59, %94\l  %105 = fmul contract float %60, %93\l  %106 = fsub contract float %104, %105\l  %107 = fmul contract float %70, %106\l  %108 = fadd contract float %43, %99\l  %109 = fadd contract float %42, %103\l  %110 = fadd contract float %41, %107\l  %111 = add nuw nsw i32 %44, 1\l  %112 = icmp eq i32 %111, 257\l  br i1 %112, label %113, label %40, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e45500:s0 -> Node0x5e499e0;
	Node0x5e45500:s1 -> Node0x5e45500;
	Node0x5e499e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%113:\l113:                                              \l  %114 = shl nuw nsw i32 %11, 1\l  %115 = add nuw nsw i32 %114, %6\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %116\l  %118 = bitcast %struct.HIP_vector_type addrspace(1)* %117 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %118, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %119\l}"];
	Node0x5e499e0 -> Node0x5e4a120;
	Node0x5e4a120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%119:\l119:                                              \l  %120 = phi float [ %110, %113 ], [ %189, %119 ]\l  %121 = phi float [ %109, %113 ], [ %188, %119 ]\l  %122 = phi float [ %108, %113 ], [ %187, %119 ]\l  %123 = phi i32 [ 1, %113 ], [ %190, %119 ]\l  %124 = add nsw i32 %123, -1\l  %125 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %124, i32 0, i32 0, i32 0, i32 0, i32 0\l  %126 = load float, float addrspace(3)* %125, align 4\l  %127 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %124, i32 0, i32 0, i32 0, i32 0, i32 1\l  %128 = load float, float addrspace(3)* %127, align 4\l  %129 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %124, i32 0, i32 0, i32 0, i32 0, i32 2\l  %130 = load float, float addrspace(3)* %129, align 4\l  %131 = and i32 %123, 255\l  %132 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %131, i32 0, i32 0, i32 0, i32 0, i32 0\l  %133 = load float, float addrspace(3)* %132, align 4\l  %134 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %131, i32 0, i32 0, i32 0, i32 0, i32 1\l  %135 = load float, float addrspace(3)* %134, align 4\l  %136 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %131, i32 0, i32 0, i32 0, i32 0, i32 2\l  %137 = load float, float addrspace(3)* %136, align 4\l  %138 = fsub contract float %133, %126\l  %139 = fsub contract float %135, %128\l  %140 = fsub contract float %137, %130\l  %141 = fsub contract float %18, %126\l  %142 = fsub contract float %20, %128\l  %143 = fsub contract float %22, %130\l  %144 = fmul contract float %141, %141\l  %145 = fmul contract float %142, %142\l  %146 = fadd contract float %144, %145\l  %147 = fmul contract float %143, %143\l  %148 = fadd contract float %147, %146\l  %149 = fdiv contract float 1.000000e+00, %148\l  %150 = fcmp olt float %148, 0x39F0000000000000\l  %151 = select i1 %150, float 0x41F0000000000000, float 1.000000e+00\l  %152 = fmul float %148, %151\l  %153 = tail call float @llvm.sqrt.f32(float %152)\l  %154 = bitcast float %153 to i32\l  %155 = add nsw i32 %154, -1\l  %156 = bitcast i32 %155 to float\l  %157 = add nsw i32 %154, 1\l  %158 = bitcast i32 %157 to float\l  %159 = tail call i1 @llvm.amdgcn.class.f32(float %152, i32 608)\l  %160 = select i1 %150, float 0x3EF0000000000000, float 1.000000e+00\l  %161 = fneg float %158\l  %162 = tail call float @llvm.fma.f32(float %161, float %153, float %152)\l  %163 = fcmp ogt float %162, 0.000000e+00\l  %164 = fneg float %156\l  %165 = tail call float @llvm.fma.f32(float %164, float %153, float %152)\l  %166 = fcmp ole float %165, 0.000000e+00\l  %167 = select i1 %166, float %156, float %153\l  %168 = select i1 %163, float %158, float %167\l  %169 = fmul float %160, %168\l  %170 = select i1 %159, float %152, float %169\l  %171 = fdiv contract float 1.000000e+00, %170\l  %172 = fmul contract float %141, %171\l  %173 = fmul contract float %142, %171\l  %174 = fmul contract float %143, %171\l  %175 = fmul contract float %139, %174\l  %176 = fmul contract float %140, %173\l  %177 = fsub contract float %175, %176\l  %178 = fmul contract float %149, %177\l  %179 = fmul contract float %140, %172\l  %180 = fmul contract float %138, %174\l  %181 = fsub contract float %179, %180\l  %182 = fmul contract float %149, %181\l  %183 = fmul contract float %138, %173\l  %184 = fmul contract float %139, %172\l  %185 = fsub contract float %183, %184\l  %186 = fmul contract float %149, %185\l  %187 = fadd contract float %122, %178\l  %188 = fadd contract float %121, %182\l  %189 = fadd contract float %120, %186\l  %190 = add nuw nsw i32 %123, 1\l  %191 = icmp eq i32 %190, 257\l  br i1 %191, label %192, label %119, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e4a120:s0 -> Node0x5e4d680;
	Node0x5e4a120:s1 -> Node0x5e4a120;
	Node0x5e4d680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%192:\l192:                                              \l  %193 = mul nuw nsw i32 %11, 3\l  %194 = add nuw nsw i32 %193, %6\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %195\l  %197 = bitcast %struct.HIP_vector_type addrspace(1)* %196 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %197, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %198\l}"];
	Node0x5e4d680 -> Node0x5e4e250;
	Node0x5e4e250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%198:\l198:                                              \l  %199 = phi float [ %189, %192 ], [ %268, %198 ]\l  %200 = phi float [ %188, %192 ], [ %267, %198 ]\l  %201 = phi float [ %187, %192 ], [ %266, %198 ]\l  %202 = phi i32 [ 1, %192 ], [ %269, %198 ]\l  %203 = add nsw i32 %202, -1\l  %204 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %203, i32 0, i32 0, i32 0, i32 0, i32 0\l  %205 = load float, float addrspace(3)* %204, align 4\l  %206 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %203, i32 0, i32 0, i32 0, i32 0, i32 1\l  %207 = load float, float addrspace(3)* %206, align 4\l  %208 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %203, i32 0, i32 0, i32 0, i32 0, i32 2\l  %209 = load float, float addrspace(3)* %208, align 4\l  %210 = and i32 %202, 255\l  %211 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %210, i32 0, i32 0, i32 0, i32 0, i32 0\l  %212 = load float, float addrspace(3)* %211, align 4\l  %213 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %210, i32 0, i32 0, i32 0, i32 0, i32 1\l  %214 = load float, float addrspace(3)* %213, align 4\l  %215 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %210, i32 0, i32 0, i32 0, i32 0, i32 2\l  %216 = load float, float addrspace(3)* %215, align 4\l  %217 = fsub contract float %212, %205\l  %218 = fsub contract float %214, %207\l  %219 = fsub contract float %216, %209\l  %220 = fsub contract float %18, %205\l  %221 = fsub contract float %20, %207\l  %222 = fsub contract float %22, %209\l  %223 = fmul contract float %220, %220\l  %224 = fmul contract float %221, %221\l  %225 = fadd contract float %223, %224\l  %226 = fmul contract float %222, %222\l  %227 = fadd contract float %226, %225\l  %228 = fdiv contract float 1.000000e+00, %227\l  %229 = fcmp olt float %227, 0x39F0000000000000\l  %230 = select i1 %229, float 0x41F0000000000000, float 1.000000e+00\l  %231 = fmul float %227, %230\l  %232 = tail call float @llvm.sqrt.f32(float %231)\l  %233 = bitcast float %232 to i32\l  %234 = add nsw i32 %233, -1\l  %235 = bitcast i32 %234 to float\l  %236 = add nsw i32 %233, 1\l  %237 = bitcast i32 %236 to float\l  %238 = tail call i1 @llvm.amdgcn.class.f32(float %231, i32 608)\l  %239 = select i1 %229, float 0x3EF0000000000000, float 1.000000e+00\l  %240 = fneg float %237\l  %241 = tail call float @llvm.fma.f32(float %240, float %232, float %231)\l  %242 = fcmp ogt float %241, 0.000000e+00\l  %243 = fneg float %235\l  %244 = tail call float @llvm.fma.f32(float %243, float %232, float %231)\l  %245 = fcmp ole float %244, 0.000000e+00\l  %246 = select i1 %245, float %235, float %232\l  %247 = select i1 %242, float %237, float %246\l  %248 = fmul float %239, %247\l  %249 = select i1 %238, float %231, float %248\l  %250 = fdiv contract float 1.000000e+00, %249\l  %251 = fmul contract float %220, %250\l  %252 = fmul contract float %221, %250\l  %253 = fmul contract float %222, %250\l  %254 = fmul contract float %218, %253\l  %255 = fmul contract float %219, %252\l  %256 = fsub contract float %254, %255\l  %257 = fmul contract float %228, %256\l  %258 = fmul contract float %219, %251\l  %259 = fmul contract float %217, %253\l  %260 = fsub contract float %258, %259\l  %261 = fmul contract float %228, %260\l  %262 = fmul contract float %217, %252\l  %263 = fmul contract float %218, %251\l  %264 = fsub contract float %262, %263\l  %265 = fmul contract float %228, %264\l  %266 = fadd contract float %201, %257\l  %267 = fadd contract float %200, %261\l  %268 = fadd contract float %199, %265\l  %269 = add nuw nsw i32 %202, 1\l  %270 = icmp eq i32 %269, 257\l  br i1 %270, label %271, label %198, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e4e250:s0 -> Node0x5e51b60;
	Node0x5e4e250:s1 -> Node0x5e4e250;
	Node0x5e51b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%271:\l271:                                              \l  %272 = shl nuw nsw i32 %11, 2\l  %273 = add nuw nsw i32 %272, %6\l  %274 = zext i32 %273 to i64\l  %275 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %274\l  %276 = bitcast %struct.HIP_vector_type addrspace(1)* %275 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %276, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %277\l}"];
	Node0x5e51b60 -> Node0x5e521c0;
	Node0x5e521c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%277:\l277:                                              \l  %278 = phi float [ %268, %271 ], [ %347, %277 ]\l  %279 = phi float [ %267, %271 ], [ %346, %277 ]\l  %280 = phi float [ %266, %271 ], [ %345, %277 ]\l  %281 = phi i32 [ 1, %271 ], [ %348, %277 ]\l  %282 = add nsw i32 %281, -1\l  %283 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %282, i32 0, i32 0, i32 0, i32 0, i32 0\l  %284 = load float, float addrspace(3)* %283, align 4\l  %285 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %282, i32 0, i32 0, i32 0, i32 0, i32 1\l  %286 = load float, float addrspace(3)* %285, align 4\l  %287 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %282, i32 0, i32 0, i32 0, i32 0, i32 2\l  %288 = load float, float addrspace(3)* %287, align 4\l  %289 = and i32 %281, 255\l  %290 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %289, i32 0, i32 0, i32 0, i32 0, i32 0\l  %291 = load float, float addrspace(3)* %290, align 4\l  %292 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %289, i32 0, i32 0, i32 0, i32 0, i32 1\l  %293 = load float, float addrspace(3)* %292, align 4\l  %294 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %289, i32 0, i32 0, i32 0, i32 0, i32 2\l  %295 = load float, float addrspace(3)* %294, align 4\l  %296 = fsub contract float %291, %284\l  %297 = fsub contract float %293, %286\l  %298 = fsub contract float %295, %288\l  %299 = fsub contract float %18, %284\l  %300 = fsub contract float %20, %286\l  %301 = fsub contract float %22, %288\l  %302 = fmul contract float %299, %299\l  %303 = fmul contract float %300, %300\l  %304 = fadd contract float %302, %303\l  %305 = fmul contract float %301, %301\l  %306 = fadd contract float %305, %304\l  %307 = fdiv contract float 1.000000e+00, %306\l  %308 = fcmp olt float %306, 0x39F0000000000000\l  %309 = select i1 %308, float 0x41F0000000000000, float 1.000000e+00\l  %310 = fmul float %306, %309\l  %311 = tail call float @llvm.sqrt.f32(float %310)\l  %312 = bitcast float %311 to i32\l  %313 = add nsw i32 %312, -1\l  %314 = bitcast i32 %313 to float\l  %315 = add nsw i32 %312, 1\l  %316 = bitcast i32 %315 to float\l  %317 = tail call i1 @llvm.amdgcn.class.f32(float %310, i32 608)\l  %318 = select i1 %308, float 0x3EF0000000000000, float 1.000000e+00\l  %319 = fneg float %316\l  %320 = tail call float @llvm.fma.f32(float %319, float %311, float %310)\l  %321 = fcmp ogt float %320, 0.000000e+00\l  %322 = fneg float %314\l  %323 = tail call float @llvm.fma.f32(float %322, float %311, float %310)\l  %324 = fcmp ole float %323, 0.000000e+00\l  %325 = select i1 %324, float %314, float %311\l  %326 = select i1 %321, float %316, float %325\l  %327 = fmul float %318, %326\l  %328 = select i1 %317, float %310, float %327\l  %329 = fdiv contract float 1.000000e+00, %328\l  %330 = fmul contract float %299, %329\l  %331 = fmul contract float %300, %329\l  %332 = fmul contract float %301, %329\l  %333 = fmul contract float %297, %332\l  %334 = fmul contract float %298, %331\l  %335 = fsub contract float %333, %334\l  %336 = fmul contract float %307, %335\l  %337 = fmul contract float %298, %330\l  %338 = fmul contract float %296, %332\l  %339 = fsub contract float %337, %338\l  %340 = fmul contract float %307, %339\l  %341 = fmul contract float %296, %331\l  %342 = fmul contract float %297, %330\l  %343 = fsub contract float %341, %342\l  %344 = fmul contract float %307, %343\l  %345 = fadd contract float %280, %336\l  %346 = fadd contract float %279, %340\l  %347 = fadd contract float %278, %344\l  %348 = add nuw nsw i32 %281, 1\l  %349 = icmp eq i32 %348, 257\l  br i1 %349, label %350, label %277, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e521c0:s0 -> Node0x5e551c0;
	Node0x5e521c0:s1 -> Node0x5e521c0;
	Node0x5e551c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%350:\l350:                                              \l  %351 = mul nuw nsw i32 %11, 5\l  %352 = add nuw nsw i32 %351, %6\l  %353 = zext i32 %352 to i64\l  %354 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %353\l  %355 = bitcast %struct.HIP_vector_type addrspace(1)* %354 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %355, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %356\l}"];
	Node0x5e551c0 -> Node0x5e55820;
	Node0x5e55820 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%356:\l356:                                              \l  %357 = phi float [ %347, %350 ], [ %426, %356 ]\l  %358 = phi float [ %346, %350 ], [ %425, %356 ]\l  %359 = phi float [ %345, %350 ], [ %424, %356 ]\l  %360 = phi i32 [ 1, %350 ], [ %427, %356 ]\l  %361 = add nsw i32 %360, -1\l  %362 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %361, i32 0, i32 0, i32 0, i32 0, i32 0\l  %363 = load float, float addrspace(3)* %362, align 4\l  %364 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %361, i32 0, i32 0, i32 0, i32 0, i32 1\l  %365 = load float, float addrspace(3)* %364, align 4\l  %366 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %361, i32 0, i32 0, i32 0, i32 0, i32 2\l  %367 = load float, float addrspace(3)* %366, align 4\l  %368 = and i32 %360, 255\l  %369 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %368, i32 0, i32 0, i32 0, i32 0, i32 0\l  %370 = load float, float addrspace(3)* %369, align 4\l  %371 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %368, i32 0, i32 0, i32 0, i32 0, i32 1\l  %372 = load float, float addrspace(3)* %371, align 4\l  %373 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %368, i32 0, i32 0, i32 0, i32 0, i32 2\l  %374 = load float, float addrspace(3)* %373, align 4\l  %375 = fsub contract float %370, %363\l  %376 = fsub contract float %372, %365\l  %377 = fsub contract float %374, %367\l  %378 = fsub contract float %18, %363\l  %379 = fsub contract float %20, %365\l  %380 = fsub contract float %22, %367\l  %381 = fmul contract float %378, %378\l  %382 = fmul contract float %379, %379\l  %383 = fadd contract float %381, %382\l  %384 = fmul contract float %380, %380\l  %385 = fadd contract float %384, %383\l  %386 = fdiv contract float 1.000000e+00, %385\l  %387 = fcmp olt float %385, 0x39F0000000000000\l  %388 = select i1 %387, float 0x41F0000000000000, float 1.000000e+00\l  %389 = fmul float %385, %388\l  %390 = tail call float @llvm.sqrt.f32(float %389)\l  %391 = bitcast float %390 to i32\l  %392 = add nsw i32 %391, -1\l  %393 = bitcast i32 %392 to float\l  %394 = add nsw i32 %391, 1\l  %395 = bitcast i32 %394 to float\l  %396 = tail call i1 @llvm.amdgcn.class.f32(float %389, i32 608)\l  %397 = select i1 %387, float 0x3EF0000000000000, float 1.000000e+00\l  %398 = fneg float %395\l  %399 = tail call float @llvm.fma.f32(float %398, float %390, float %389)\l  %400 = fcmp ogt float %399, 0.000000e+00\l  %401 = fneg float %393\l  %402 = tail call float @llvm.fma.f32(float %401, float %390, float %389)\l  %403 = fcmp ole float %402, 0.000000e+00\l  %404 = select i1 %403, float %393, float %390\l  %405 = select i1 %400, float %395, float %404\l  %406 = fmul float %397, %405\l  %407 = select i1 %396, float %389, float %406\l  %408 = fdiv contract float 1.000000e+00, %407\l  %409 = fmul contract float %378, %408\l  %410 = fmul contract float %379, %408\l  %411 = fmul contract float %380, %408\l  %412 = fmul contract float %376, %411\l  %413 = fmul contract float %377, %410\l  %414 = fsub contract float %412, %413\l  %415 = fmul contract float %386, %414\l  %416 = fmul contract float %377, %409\l  %417 = fmul contract float %375, %411\l  %418 = fsub contract float %416, %417\l  %419 = fmul contract float %386, %418\l  %420 = fmul contract float %375, %410\l  %421 = fmul contract float %376, %409\l  %422 = fsub contract float %420, %421\l  %423 = fmul contract float %386, %422\l  %424 = fadd contract float %359, %415\l  %425 = fadd contract float %358, %419\l  %426 = fadd contract float %357, %423\l  %427 = add nuw nsw i32 %360, 1\l  %428 = icmp eq i32 %427, 257\l  br i1 %428, label %429, label %356, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e55820:s0 -> Node0x5e58850;
	Node0x5e55820:s1 -> Node0x5e55820;
	Node0x5e58850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%429:\l429:                                              \l  %430 = mul nuw nsw i32 %11, 6\l  %431 = add nuw nsw i32 %430, %6\l  %432 = zext i32 %431 to i64\l  %433 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %432\l  %434 = bitcast %struct.HIP_vector_type addrspace(1)* %433 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %434, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %435\l}"];
	Node0x5e58850 -> Node0x5e58eb0;
	Node0x5e58eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%435:\l435:                                              \l  %436 = phi float [ %426, %429 ], [ %505, %435 ]\l  %437 = phi float [ %425, %429 ], [ %504, %435 ]\l  %438 = phi float [ %424, %429 ], [ %503, %435 ]\l  %439 = phi i32 [ 1, %429 ], [ %506, %435 ]\l  %440 = add nsw i32 %439, -1\l  %441 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %440, i32 0, i32 0, i32 0, i32 0, i32 0\l  %442 = load float, float addrspace(3)* %441, align 4\l  %443 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %440, i32 0, i32 0, i32 0, i32 0, i32 1\l  %444 = load float, float addrspace(3)* %443, align 4\l  %445 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %440, i32 0, i32 0, i32 0, i32 0, i32 2\l  %446 = load float, float addrspace(3)* %445, align 4\l  %447 = and i32 %439, 255\l  %448 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %447, i32 0, i32 0, i32 0, i32 0, i32 0\l  %449 = load float, float addrspace(3)* %448, align 4\l  %450 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %447, i32 0, i32 0, i32 0, i32 0, i32 1\l  %451 = load float, float addrspace(3)* %450, align 4\l  %452 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %447, i32 0, i32 0, i32 0, i32 0, i32 2\l  %453 = load float, float addrspace(3)* %452, align 4\l  %454 = fsub contract float %449, %442\l  %455 = fsub contract float %451, %444\l  %456 = fsub contract float %453, %446\l  %457 = fsub contract float %18, %442\l  %458 = fsub contract float %20, %444\l  %459 = fsub contract float %22, %446\l  %460 = fmul contract float %457, %457\l  %461 = fmul contract float %458, %458\l  %462 = fadd contract float %460, %461\l  %463 = fmul contract float %459, %459\l  %464 = fadd contract float %463, %462\l  %465 = fdiv contract float 1.000000e+00, %464\l  %466 = fcmp olt float %464, 0x39F0000000000000\l  %467 = select i1 %466, float 0x41F0000000000000, float 1.000000e+00\l  %468 = fmul float %464, %467\l  %469 = tail call float @llvm.sqrt.f32(float %468)\l  %470 = bitcast float %469 to i32\l  %471 = add nsw i32 %470, -1\l  %472 = bitcast i32 %471 to float\l  %473 = add nsw i32 %470, 1\l  %474 = bitcast i32 %473 to float\l  %475 = tail call i1 @llvm.amdgcn.class.f32(float %468, i32 608)\l  %476 = select i1 %466, float 0x3EF0000000000000, float 1.000000e+00\l  %477 = fneg float %474\l  %478 = tail call float @llvm.fma.f32(float %477, float %469, float %468)\l  %479 = fcmp ogt float %478, 0.000000e+00\l  %480 = fneg float %472\l  %481 = tail call float @llvm.fma.f32(float %480, float %469, float %468)\l  %482 = fcmp ole float %481, 0.000000e+00\l  %483 = select i1 %482, float %472, float %469\l  %484 = select i1 %479, float %474, float %483\l  %485 = fmul float %476, %484\l  %486 = select i1 %475, float %468, float %485\l  %487 = fdiv contract float 1.000000e+00, %486\l  %488 = fmul contract float %457, %487\l  %489 = fmul contract float %458, %487\l  %490 = fmul contract float %459, %487\l  %491 = fmul contract float %455, %490\l  %492 = fmul contract float %456, %489\l  %493 = fsub contract float %491, %492\l  %494 = fmul contract float %465, %493\l  %495 = fmul contract float %456, %488\l  %496 = fmul contract float %454, %490\l  %497 = fsub contract float %495, %496\l  %498 = fmul contract float %465, %497\l  %499 = fmul contract float %454, %489\l  %500 = fmul contract float %455, %488\l  %501 = fsub contract float %499, %500\l  %502 = fmul contract float %465, %501\l  %503 = fadd contract float %438, %494\l  %504 = fadd contract float %437, %498\l  %505 = fadd contract float %436, %502\l  %506 = add nuw nsw i32 %439, 1\l  %507 = icmp eq i32 %506, 257\l  br i1 %507, label %508, label %435, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e58eb0:s0 -> Node0x5e5bee0;
	Node0x5e58eb0:s1 -> Node0x5e58eb0;
	Node0x5e5bee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%508:\l508:                                              \l  %509 = mul nuw nsw i32 %11, 7\l  %510 = add nuw nsw i32 %509, %6\l  %511 = zext i32 %510 to i64\l  %512 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %511\l  %513 = bitcast %struct.HIP_vector_type addrspace(1)* %512 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %513, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %514\l}"];
	Node0x5e5bee0 -> Node0x5e50e10;
	Node0x5e50e10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%514:\l514:                                              \l  %515 = phi float [ %505, %508 ], [ %584, %514 ]\l  %516 = phi float [ %504, %508 ], [ %583, %514 ]\l  %517 = phi float [ %503, %508 ], [ %582, %514 ]\l  %518 = phi i32 [ 1, %508 ], [ %585, %514 ]\l  %519 = add nsw i32 %518, -1\l  %520 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %519, i32 0, i32 0, i32 0, i32 0, i32 0\l  %521 = load float, float addrspace(3)* %520, align 4\l  %522 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %519, i32 0, i32 0, i32 0, i32 0, i32 1\l  %523 = load float, float addrspace(3)* %522, align 4\l  %524 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %519, i32 0, i32 0, i32 0, i32 0, i32 2\l  %525 = load float, float addrspace(3)* %524, align 4\l  %526 = and i32 %518, 255\l  %527 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %526, i32 0, i32 0, i32 0, i32 0, i32 0\l  %528 = load float, float addrspace(3)* %527, align 4\l  %529 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %526, i32 0, i32 0, i32 0, i32 0, i32 1\l  %530 = load float, float addrspace(3)* %529, align 4\l  %531 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %526, i32 0, i32 0, i32 0, i32 0, i32 2\l  %532 = load float, float addrspace(3)* %531, align 4\l  %533 = fsub contract float %528, %521\l  %534 = fsub contract float %530, %523\l  %535 = fsub contract float %532, %525\l  %536 = fsub contract float %18, %521\l  %537 = fsub contract float %20, %523\l  %538 = fsub contract float %22, %525\l  %539 = fmul contract float %536, %536\l  %540 = fmul contract float %537, %537\l  %541 = fadd contract float %539, %540\l  %542 = fmul contract float %538, %538\l  %543 = fadd contract float %542, %541\l  %544 = fdiv contract float 1.000000e+00, %543\l  %545 = fcmp olt float %543, 0x39F0000000000000\l  %546 = select i1 %545, float 0x41F0000000000000, float 1.000000e+00\l  %547 = fmul float %543, %546\l  %548 = tail call float @llvm.sqrt.f32(float %547)\l  %549 = bitcast float %548 to i32\l  %550 = add nsw i32 %549, -1\l  %551 = bitcast i32 %550 to float\l  %552 = add nsw i32 %549, 1\l  %553 = bitcast i32 %552 to float\l  %554 = tail call i1 @llvm.amdgcn.class.f32(float %547, i32 608)\l  %555 = select i1 %545, float 0x3EF0000000000000, float 1.000000e+00\l  %556 = fneg float %553\l  %557 = tail call float @llvm.fma.f32(float %556, float %548, float %547)\l  %558 = fcmp ogt float %557, 0.000000e+00\l  %559 = fneg float %551\l  %560 = tail call float @llvm.fma.f32(float %559, float %548, float %547)\l  %561 = fcmp ole float %560, 0.000000e+00\l  %562 = select i1 %561, float %551, float %548\l  %563 = select i1 %558, float %553, float %562\l  %564 = fmul float %555, %563\l  %565 = select i1 %554, float %547, float %564\l  %566 = fdiv contract float 1.000000e+00, %565\l  %567 = fmul contract float %536, %566\l  %568 = fmul contract float %537, %566\l  %569 = fmul contract float %538, %566\l  %570 = fmul contract float %534, %569\l  %571 = fmul contract float %535, %568\l  %572 = fsub contract float %570, %571\l  %573 = fmul contract float %544, %572\l  %574 = fmul contract float %535, %567\l  %575 = fmul contract float %533, %569\l  %576 = fsub contract float %574, %575\l  %577 = fmul contract float %544, %576\l  %578 = fmul contract float %533, %568\l  %579 = fmul contract float %534, %567\l  %580 = fsub contract float %578, %579\l  %581 = fmul contract float %544, %580\l  %582 = fadd contract float %517, %573\l  %583 = fadd contract float %516, %577\l  %584 = fadd contract float %515, %581\l  %585 = add nuw nsw i32 %518, 1\l  %586 = icmp eq i32 %585, 257\l  br i1 %586, label %587, label %514, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e50e10:s0 -> Node0x5e60540;
	Node0x5e50e10:s1 -> Node0x5e50e10;
	Node0x5e60540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%587:\l587:                                              \l  %588 = shl nuw nsw i32 %11, 3\l  %589 = add nuw nsw i32 %588, %6\l  %590 = zext i32 %589 to i64\l  %591 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %590\l  %592 = bitcast %struct.HIP_vector_type addrspace(1)* %591 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %592, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %593\l}"];
	Node0x5e60540 -> Node0x5e60ba0;
	Node0x5e60ba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%593:\l593:                                              \l  %594 = phi float [ %584, %587 ], [ %663, %593 ]\l  %595 = phi float [ %583, %587 ], [ %662, %593 ]\l  %596 = phi float [ %582, %587 ], [ %661, %593 ]\l  %597 = phi i32 [ 1, %587 ], [ %664, %593 ]\l  %598 = add nsw i32 %597, -1\l  %599 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %598, i32 0, i32 0, i32 0, i32 0, i32 0\l  %600 = load float, float addrspace(3)* %599, align 4\l  %601 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %598, i32 0, i32 0, i32 0, i32 0, i32 1\l  %602 = load float, float addrspace(3)* %601, align 4\l  %603 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %598, i32 0, i32 0, i32 0, i32 0, i32 2\l  %604 = load float, float addrspace(3)* %603, align 4\l  %605 = and i32 %597, 255\l  %606 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %605, i32 0, i32 0, i32 0, i32 0, i32 0\l  %607 = load float, float addrspace(3)* %606, align 4\l  %608 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %605, i32 0, i32 0, i32 0, i32 0, i32 1\l  %609 = load float, float addrspace(3)* %608, align 4\l  %610 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %605, i32 0, i32 0, i32 0, i32 0, i32 2\l  %611 = load float, float addrspace(3)* %610, align 4\l  %612 = fsub contract float %607, %600\l  %613 = fsub contract float %609, %602\l  %614 = fsub contract float %611, %604\l  %615 = fsub contract float %18, %600\l  %616 = fsub contract float %20, %602\l  %617 = fsub contract float %22, %604\l  %618 = fmul contract float %615, %615\l  %619 = fmul contract float %616, %616\l  %620 = fadd contract float %618, %619\l  %621 = fmul contract float %617, %617\l  %622 = fadd contract float %621, %620\l  %623 = fdiv contract float 1.000000e+00, %622\l  %624 = fcmp olt float %622, 0x39F0000000000000\l  %625 = select i1 %624, float 0x41F0000000000000, float 1.000000e+00\l  %626 = fmul float %622, %625\l  %627 = tail call float @llvm.sqrt.f32(float %626)\l  %628 = bitcast float %627 to i32\l  %629 = add nsw i32 %628, -1\l  %630 = bitcast i32 %629 to float\l  %631 = add nsw i32 %628, 1\l  %632 = bitcast i32 %631 to float\l  %633 = tail call i1 @llvm.amdgcn.class.f32(float %626, i32 608)\l  %634 = select i1 %624, float 0x3EF0000000000000, float 1.000000e+00\l  %635 = fneg float %632\l  %636 = tail call float @llvm.fma.f32(float %635, float %627, float %626)\l  %637 = fcmp ogt float %636, 0.000000e+00\l  %638 = fneg float %630\l  %639 = tail call float @llvm.fma.f32(float %638, float %627, float %626)\l  %640 = fcmp ole float %639, 0.000000e+00\l  %641 = select i1 %640, float %630, float %627\l  %642 = select i1 %637, float %632, float %641\l  %643 = fmul float %634, %642\l  %644 = select i1 %633, float %626, float %643\l  %645 = fdiv contract float 1.000000e+00, %644\l  %646 = fmul contract float %615, %645\l  %647 = fmul contract float %616, %645\l  %648 = fmul contract float %617, %645\l  %649 = fmul contract float %613, %648\l  %650 = fmul contract float %614, %647\l  %651 = fsub contract float %649, %650\l  %652 = fmul contract float %623, %651\l  %653 = fmul contract float %614, %646\l  %654 = fmul contract float %612, %648\l  %655 = fsub contract float %653, %654\l  %656 = fmul contract float %623, %655\l  %657 = fmul contract float %612, %647\l  %658 = fmul contract float %613, %646\l  %659 = fsub contract float %657, %658\l  %660 = fmul contract float %623, %659\l  %661 = fadd contract float %596, %652\l  %662 = fadd contract float %595, %656\l  %663 = fadd contract float %594, %660\l  %664 = add nuw nsw i32 %597, 1\l  %665 = icmp eq i32 %664, 257\l  br i1 %665, label %666, label %593, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e60ba0:s0 -> Node0x5e63ba0;
	Node0x5e60ba0:s1 -> Node0x5e60ba0;
	Node0x5e63ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%666:\l666:                                              \l  %667 = mul nuw nsw i32 %11, 9\l  %668 = add nuw nsw i32 %667, %6\l  %669 = zext i32 %668 to i64\l  %670 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %669\l  %671 = bitcast %struct.HIP_vector_type addrspace(1)* %670 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %671, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %672\l}"];
	Node0x5e63ba0 -> Node0x5e64200;
	Node0x5e64200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%672:\l672:                                              \l  %673 = phi float [ %663, %666 ], [ %742, %672 ]\l  %674 = phi float [ %662, %666 ], [ %741, %672 ]\l  %675 = phi float [ %661, %666 ], [ %740, %672 ]\l  %676 = phi i32 [ 1, %666 ], [ %743, %672 ]\l  %677 = add nsw i32 %676, -1\l  %678 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %677, i32 0, i32 0, i32 0, i32 0, i32 0\l  %679 = load float, float addrspace(3)* %678, align 4\l  %680 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %677, i32 0, i32 0, i32 0, i32 0, i32 1\l  %681 = load float, float addrspace(3)* %680, align 4\l  %682 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %677, i32 0, i32 0, i32 0, i32 0, i32 2\l  %683 = load float, float addrspace(3)* %682, align 4\l  %684 = and i32 %676, 255\l  %685 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %684, i32 0, i32 0, i32 0, i32 0, i32 0\l  %686 = load float, float addrspace(3)* %685, align 4\l  %687 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %684, i32 0, i32 0, i32 0, i32 0, i32 1\l  %688 = load float, float addrspace(3)* %687, align 4\l  %689 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %684, i32 0, i32 0, i32 0, i32 0, i32 2\l  %690 = load float, float addrspace(3)* %689, align 4\l  %691 = fsub contract float %686, %679\l  %692 = fsub contract float %688, %681\l  %693 = fsub contract float %690, %683\l  %694 = fsub contract float %18, %679\l  %695 = fsub contract float %20, %681\l  %696 = fsub contract float %22, %683\l  %697 = fmul contract float %694, %694\l  %698 = fmul contract float %695, %695\l  %699 = fadd contract float %697, %698\l  %700 = fmul contract float %696, %696\l  %701 = fadd contract float %700, %699\l  %702 = fdiv contract float 1.000000e+00, %701\l  %703 = fcmp olt float %701, 0x39F0000000000000\l  %704 = select i1 %703, float 0x41F0000000000000, float 1.000000e+00\l  %705 = fmul float %701, %704\l  %706 = tail call float @llvm.sqrt.f32(float %705)\l  %707 = bitcast float %706 to i32\l  %708 = add nsw i32 %707, -1\l  %709 = bitcast i32 %708 to float\l  %710 = add nsw i32 %707, 1\l  %711 = bitcast i32 %710 to float\l  %712 = tail call i1 @llvm.amdgcn.class.f32(float %705, i32 608)\l  %713 = select i1 %703, float 0x3EF0000000000000, float 1.000000e+00\l  %714 = fneg float %711\l  %715 = tail call float @llvm.fma.f32(float %714, float %706, float %705)\l  %716 = fcmp ogt float %715, 0.000000e+00\l  %717 = fneg float %709\l  %718 = tail call float @llvm.fma.f32(float %717, float %706, float %705)\l  %719 = fcmp ole float %718, 0.000000e+00\l  %720 = select i1 %719, float %709, float %706\l  %721 = select i1 %716, float %711, float %720\l  %722 = fmul float %713, %721\l  %723 = select i1 %712, float %705, float %722\l  %724 = fdiv contract float 1.000000e+00, %723\l  %725 = fmul contract float %694, %724\l  %726 = fmul contract float %695, %724\l  %727 = fmul contract float %696, %724\l  %728 = fmul contract float %692, %727\l  %729 = fmul contract float %693, %726\l  %730 = fsub contract float %728, %729\l  %731 = fmul contract float %702, %730\l  %732 = fmul contract float %693, %725\l  %733 = fmul contract float %691, %727\l  %734 = fsub contract float %732, %733\l  %735 = fmul contract float %702, %734\l  %736 = fmul contract float %691, %726\l  %737 = fmul contract float %692, %725\l  %738 = fsub contract float %736, %737\l  %739 = fmul contract float %702, %738\l  %740 = fadd contract float %675, %731\l  %741 = fadd contract float %674, %735\l  %742 = fadd contract float %673, %739\l  %743 = add nuw nsw i32 %676, 1\l  %744 = icmp eq i32 %743, 257\l  br i1 %744, label %745, label %672, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e64200:s0 -> Node0x5e67230;
	Node0x5e64200:s1 -> Node0x5e64200;
	Node0x5e67230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%745:\l745:                                              \l  %746 = mul nuw nsw i32 %11, 10\l  %747 = add nuw nsw i32 %746, %6\l  %748 = zext i32 %747 to i64\l  %749 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %748\l  %750 = bitcast %struct.HIP_vector_type addrspace(1)* %749 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %750, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %751\l}"];
	Node0x5e67230 -> Node0x5e67890;
	Node0x5e67890 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%751:\l751:                                              \l  %752 = phi float [ %742, %745 ], [ %821, %751 ]\l  %753 = phi float [ %741, %745 ], [ %820, %751 ]\l  %754 = phi float [ %740, %745 ], [ %819, %751 ]\l  %755 = phi i32 [ 1, %745 ], [ %822, %751 ]\l  %756 = add nsw i32 %755, -1\l  %757 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %756, i32 0, i32 0, i32 0, i32 0, i32 0\l  %758 = load float, float addrspace(3)* %757, align 4\l  %759 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %756, i32 0, i32 0, i32 0, i32 0, i32 1\l  %760 = load float, float addrspace(3)* %759, align 4\l  %761 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %756, i32 0, i32 0, i32 0, i32 0, i32 2\l  %762 = load float, float addrspace(3)* %761, align 4\l  %763 = and i32 %755, 255\l  %764 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %763, i32 0, i32 0, i32 0, i32 0, i32 0\l  %765 = load float, float addrspace(3)* %764, align 4\l  %766 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %763, i32 0, i32 0, i32 0, i32 0, i32 1\l  %767 = load float, float addrspace(3)* %766, align 4\l  %768 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %763, i32 0, i32 0, i32 0, i32 0, i32 2\l  %769 = load float, float addrspace(3)* %768, align 4\l  %770 = fsub contract float %765, %758\l  %771 = fsub contract float %767, %760\l  %772 = fsub contract float %769, %762\l  %773 = fsub contract float %18, %758\l  %774 = fsub contract float %20, %760\l  %775 = fsub contract float %22, %762\l  %776 = fmul contract float %773, %773\l  %777 = fmul contract float %774, %774\l  %778 = fadd contract float %776, %777\l  %779 = fmul contract float %775, %775\l  %780 = fadd contract float %779, %778\l  %781 = fdiv contract float 1.000000e+00, %780\l  %782 = fcmp olt float %780, 0x39F0000000000000\l  %783 = select i1 %782, float 0x41F0000000000000, float 1.000000e+00\l  %784 = fmul float %780, %783\l  %785 = tail call float @llvm.sqrt.f32(float %784)\l  %786 = bitcast float %785 to i32\l  %787 = add nsw i32 %786, -1\l  %788 = bitcast i32 %787 to float\l  %789 = add nsw i32 %786, 1\l  %790 = bitcast i32 %789 to float\l  %791 = tail call i1 @llvm.amdgcn.class.f32(float %784, i32 608)\l  %792 = select i1 %782, float 0x3EF0000000000000, float 1.000000e+00\l  %793 = fneg float %790\l  %794 = tail call float @llvm.fma.f32(float %793, float %785, float %784)\l  %795 = fcmp ogt float %794, 0.000000e+00\l  %796 = fneg float %788\l  %797 = tail call float @llvm.fma.f32(float %796, float %785, float %784)\l  %798 = fcmp ole float %797, 0.000000e+00\l  %799 = select i1 %798, float %788, float %785\l  %800 = select i1 %795, float %790, float %799\l  %801 = fmul float %792, %800\l  %802 = select i1 %791, float %784, float %801\l  %803 = fdiv contract float 1.000000e+00, %802\l  %804 = fmul contract float %773, %803\l  %805 = fmul contract float %774, %803\l  %806 = fmul contract float %775, %803\l  %807 = fmul contract float %771, %806\l  %808 = fmul contract float %772, %805\l  %809 = fsub contract float %807, %808\l  %810 = fmul contract float %781, %809\l  %811 = fmul contract float %772, %804\l  %812 = fmul contract float %770, %806\l  %813 = fsub contract float %811, %812\l  %814 = fmul contract float %781, %813\l  %815 = fmul contract float %770, %805\l  %816 = fmul contract float %771, %804\l  %817 = fsub contract float %815, %816\l  %818 = fmul contract float %781, %817\l  %819 = fadd contract float %754, %810\l  %820 = fadd contract float %753, %814\l  %821 = fadd contract float %752, %818\l  %822 = add nuw nsw i32 %755, 1\l  %823 = icmp eq i32 %822, 257\l  br i1 %823, label %824, label %751, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e67890:s0 -> Node0x5e6a8c0;
	Node0x5e67890:s1 -> Node0x5e67890;
	Node0x5e6a8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%824:\l824:                                              \l  %825 = mul nuw nsw i32 %11, 11\l  %826 = add nuw nsw i32 %825, %6\l  %827 = zext i32 %826 to i64\l  %828 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %827\l  %829 = bitcast %struct.HIP_vector_type addrspace(1)* %828 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %829, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %830\l}"];
	Node0x5e6a8c0 -> Node0x5e6af20;
	Node0x5e6af20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%830:\l830:                                              \l  %831 = phi float [ %821, %824 ], [ %900, %830 ]\l  %832 = phi float [ %820, %824 ], [ %899, %830 ]\l  %833 = phi float [ %819, %824 ], [ %898, %830 ]\l  %834 = phi i32 [ 1, %824 ], [ %901, %830 ]\l  %835 = add nsw i32 %834, -1\l  %836 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %835, i32 0, i32 0, i32 0, i32 0, i32 0\l  %837 = load float, float addrspace(3)* %836, align 4\l  %838 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %835, i32 0, i32 0, i32 0, i32 0, i32 1\l  %839 = load float, float addrspace(3)* %838, align 4\l  %840 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %835, i32 0, i32 0, i32 0, i32 0, i32 2\l  %841 = load float, float addrspace(3)* %840, align 4\l  %842 = and i32 %834, 255\l  %843 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %842, i32 0, i32 0, i32 0, i32 0, i32 0\l  %844 = load float, float addrspace(3)* %843, align 4\l  %845 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %842, i32 0, i32 0, i32 0, i32 0, i32 1\l  %846 = load float, float addrspace(3)* %845, align 4\l  %847 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %842, i32 0, i32 0, i32 0, i32 0, i32 2\l  %848 = load float, float addrspace(3)* %847, align 4\l  %849 = fsub contract float %844, %837\l  %850 = fsub contract float %846, %839\l  %851 = fsub contract float %848, %841\l  %852 = fsub contract float %18, %837\l  %853 = fsub contract float %20, %839\l  %854 = fsub contract float %22, %841\l  %855 = fmul contract float %852, %852\l  %856 = fmul contract float %853, %853\l  %857 = fadd contract float %855, %856\l  %858 = fmul contract float %854, %854\l  %859 = fadd contract float %858, %857\l  %860 = fdiv contract float 1.000000e+00, %859\l  %861 = fcmp olt float %859, 0x39F0000000000000\l  %862 = select i1 %861, float 0x41F0000000000000, float 1.000000e+00\l  %863 = fmul float %859, %862\l  %864 = tail call float @llvm.sqrt.f32(float %863)\l  %865 = bitcast float %864 to i32\l  %866 = add nsw i32 %865, -1\l  %867 = bitcast i32 %866 to float\l  %868 = add nsw i32 %865, 1\l  %869 = bitcast i32 %868 to float\l  %870 = tail call i1 @llvm.amdgcn.class.f32(float %863, i32 608)\l  %871 = select i1 %861, float 0x3EF0000000000000, float 1.000000e+00\l  %872 = fneg float %869\l  %873 = tail call float @llvm.fma.f32(float %872, float %864, float %863)\l  %874 = fcmp ogt float %873, 0.000000e+00\l  %875 = fneg float %867\l  %876 = tail call float @llvm.fma.f32(float %875, float %864, float %863)\l  %877 = fcmp ole float %876, 0.000000e+00\l  %878 = select i1 %877, float %867, float %864\l  %879 = select i1 %874, float %869, float %878\l  %880 = fmul float %871, %879\l  %881 = select i1 %870, float %863, float %880\l  %882 = fdiv contract float 1.000000e+00, %881\l  %883 = fmul contract float %852, %882\l  %884 = fmul contract float %853, %882\l  %885 = fmul contract float %854, %882\l  %886 = fmul contract float %850, %885\l  %887 = fmul contract float %851, %884\l  %888 = fsub contract float %886, %887\l  %889 = fmul contract float %860, %888\l  %890 = fmul contract float %851, %883\l  %891 = fmul contract float %849, %885\l  %892 = fsub contract float %890, %891\l  %893 = fmul contract float %860, %892\l  %894 = fmul contract float %849, %884\l  %895 = fmul contract float %850, %883\l  %896 = fsub contract float %894, %895\l  %897 = fmul contract float %860, %896\l  %898 = fadd contract float %833, %889\l  %899 = fadd contract float %832, %893\l  %900 = fadd contract float %831, %897\l  %901 = add nuw nsw i32 %834, 1\l  %902 = icmp eq i32 %901, 257\l  br i1 %902, label %903, label %830, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e6af20:s0 -> Node0x5e6df50;
	Node0x5e6af20:s1 -> Node0x5e6af20;
	Node0x5e6df50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%903:\l903:                                              \l  %904 = mul nuw nsw i32 %11, 12\l  %905 = add nuw nsw i32 %904, %6\l  %906 = zext i32 %905 to i64\l  %907 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %906\l  %908 = bitcast %struct.HIP_vector_type addrspace(1)* %907 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %908, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %909\l}"];
	Node0x5e6df50 -> Node0x5e6e5b0;
	Node0x5e6e5b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%909:\l909:                                              \l  %910 = phi float [ %900, %903 ], [ %979, %909 ]\l  %911 = phi float [ %899, %903 ], [ %978, %909 ]\l  %912 = phi float [ %898, %903 ], [ %977, %909 ]\l  %913 = phi i32 [ 1, %903 ], [ %980, %909 ]\l  %914 = add nsw i32 %913, -1\l  %915 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %914, i32 0, i32 0, i32 0, i32 0, i32 0\l  %916 = load float, float addrspace(3)* %915, align 4\l  %917 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %914, i32 0, i32 0, i32 0, i32 0, i32 1\l  %918 = load float, float addrspace(3)* %917, align 4\l  %919 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %914, i32 0, i32 0, i32 0, i32 0, i32 2\l  %920 = load float, float addrspace(3)* %919, align 4\l  %921 = and i32 %913, 255\l  %922 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %921, i32 0, i32 0, i32 0, i32 0, i32 0\l  %923 = load float, float addrspace(3)* %922, align 4\l  %924 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %921, i32 0, i32 0, i32 0, i32 0, i32 1\l  %925 = load float, float addrspace(3)* %924, align 4\l  %926 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %921, i32 0, i32 0, i32 0, i32 0, i32 2\l  %927 = load float, float addrspace(3)* %926, align 4\l  %928 = fsub contract float %923, %916\l  %929 = fsub contract float %925, %918\l  %930 = fsub contract float %927, %920\l  %931 = fsub contract float %18, %916\l  %932 = fsub contract float %20, %918\l  %933 = fsub contract float %22, %920\l  %934 = fmul contract float %931, %931\l  %935 = fmul contract float %932, %932\l  %936 = fadd contract float %934, %935\l  %937 = fmul contract float %933, %933\l  %938 = fadd contract float %937, %936\l  %939 = fdiv contract float 1.000000e+00, %938\l  %940 = fcmp olt float %938, 0x39F0000000000000\l  %941 = select i1 %940, float 0x41F0000000000000, float 1.000000e+00\l  %942 = fmul float %938, %941\l  %943 = tail call float @llvm.sqrt.f32(float %942)\l  %944 = bitcast float %943 to i32\l  %945 = add nsw i32 %944, -1\l  %946 = bitcast i32 %945 to float\l  %947 = add nsw i32 %944, 1\l  %948 = bitcast i32 %947 to float\l  %949 = tail call i1 @llvm.amdgcn.class.f32(float %942, i32 608)\l  %950 = select i1 %940, float 0x3EF0000000000000, float 1.000000e+00\l  %951 = fneg float %948\l  %952 = tail call float @llvm.fma.f32(float %951, float %943, float %942)\l  %953 = fcmp ogt float %952, 0.000000e+00\l  %954 = fneg float %946\l  %955 = tail call float @llvm.fma.f32(float %954, float %943, float %942)\l  %956 = fcmp ole float %955, 0.000000e+00\l  %957 = select i1 %956, float %946, float %943\l  %958 = select i1 %953, float %948, float %957\l  %959 = fmul float %950, %958\l  %960 = select i1 %949, float %942, float %959\l  %961 = fdiv contract float 1.000000e+00, %960\l  %962 = fmul contract float %931, %961\l  %963 = fmul contract float %932, %961\l  %964 = fmul contract float %933, %961\l  %965 = fmul contract float %929, %964\l  %966 = fmul contract float %930, %963\l  %967 = fsub contract float %965, %966\l  %968 = fmul contract float %939, %967\l  %969 = fmul contract float %930, %962\l  %970 = fmul contract float %928, %964\l  %971 = fsub contract float %969, %970\l  %972 = fmul contract float %939, %971\l  %973 = fmul contract float %928, %963\l  %974 = fmul contract float %929, %962\l  %975 = fsub contract float %973, %974\l  %976 = fmul contract float %939, %975\l  %977 = fadd contract float %912, %968\l  %978 = fadd contract float %911, %972\l  %979 = fadd contract float %910, %976\l  %980 = add nuw nsw i32 %913, 1\l  %981 = icmp eq i32 %980, 257\l  br i1 %981, label %982, label %909, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e6e5b0:s0 -> Node0x5e715e0;
	Node0x5e6e5b0:s1 -> Node0x5e6e5b0;
	Node0x5e715e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%982:\l982:                                              \l  %983 = mul nuw nsw i32 %11, 13\l  %984 = add nuw nsw i32 %983, %6\l  %985 = zext i32 %984 to i64\l  %986 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %985\l  %987 = bitcast %struct.HIP_vector_type addrspace(1)* %986 to i8 addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %987, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %988\l}"];
	Node0x5e715e0 -> Node0x5e71c40;
	Node0x5e71c40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%988:\l988:                                              \l  %989 = phi float [ %979, %982 ], [ %1058, %988 ]\l  %990 = phi float [ %978, %982 ], [ %1057, %988 ]\l  %991 = phi float [ %977, %982 ], [ %1056, %988 ]\l  %992 = phi i32 [ 1, %982 ], [ %1059, %988 ]\l  %993 = add nsw i32 %992, -1\l  %994 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %993, i32 0, i32 0, i32 0, i32 0, i32 0\l  %995 = load float, float addrspace(3)* %994, align 4\l  %996 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %993, i32 0, i32 0, i32 0, i32 0, i32 1\l  %997 = load float, float addrspace(3)* %996, align 4\l  %998 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %993, i32 0, i32 0, i32 0, i32 0, i32 2\l  %999 = load float, float addrspace(3)* %998, align 4\l  %1000 = and i32 %992, 255\l  %1001 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1000, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1002 = load float, float addrspace(3)* %1001, align 4\l  %1003 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1000, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1004 = load float, float addrspace(3)* %1003, align 4\l  %1005 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1000, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1006 = load float, float addrspace(3)* %1005, align 4\l  %1007 = fsub contract float %1002, %995\l  %1008 = fsub contract float %1004, %997\l  %1009 = fsub contract float %1006, %999\l  %1010 = fsub contract float %18, %995\l  %1011 = fsub contract float %20, %997\l  %1012 = fsub contract float %22, %999\l  %1013 = fmul contract float %1010, %1010\l  %1014 = fmul contract float %1011, %1011\l  %1015 = fadd contract float %1013, %1014\l  %1016 = fmul contract float %1012, %1012\l  %1017 = fadd contract float %1016, %1015\l  %1018 = fdiv contract float 1.000000e+00, %1017\l  %1019 = fcmp olt float %1017, 0x39F0000000000000\l  %1020 = select i1 %1019, float 0x41F0000000000000, float 1.000000e+00\l  %1021 = fmul float %1017, %1020\l  %1022 = tail call float @llvm.sqrt.f32(float %1021)\l  %1023 = bitcast float %1022 to i32\l  %1024 = add nsw i32 %1023, -1\l  %1025 = bitcast i32 %1024 to float\l  %1026 = add nsw i32 %1023, 1\l  %1027 = bitcast i32 %1026 to float\l  %1028 = tail call i1 @llvm.amdgcn.class.f32(float %1021, i32 608)\l  %1029 = select i1 %1019, float 0x3EF0000000000000, float 1.000000e+00\l  %1030 = fneg float %1027\l  %1031 = tail call float @llvm.fma.f32(float %1030, float %1022, float %1021)\l  %1032 = fcmp ogt float %1031, 0.000000e+00\l  %1033 = fneg float %1025\l  %1034 = tail call float @llvm.fma.f32(float %1033, float %1022, float %1021)\l  %1035 = fcmp ole float %1034, 0.000000e+00\l  %1036 = select i1 %1035, float %1025, float %1022\l  %1037 = select i1 %1032, float %1027, float %1036\l  %1038 = fmul float %1029, %1037\l  %1039 = select i1 %1028, float %1021, float %1038\l  %1040 = fdiv contract float 1.000000e+00, %1039\l  %1041 = fmul contract float %1010, %1040\l  %1042 = fmul contract float %1011, %1040\l  %1043 = fmul contract float %1012, %1040\l  %1044 = fmul contract float %1008, %1043\l  %1045 = fmul contract float %1009, %1042\l  %1046 = fsub contract float %1044, %1045\l  %1047 = fmul contract float %1018, %1046\l  %1048 = fmul contract float %1009, %1041\l  %1049 = fmul contract float %1007, %1043\l  %1050 = fsub contract float %1048, %1049\l  %1051 = fmul contract float %1018, %1050\l  %1052 = fmul contract float %1007, %1042\l  %1053 = fmul contract float %1008, %1041\l  %1054 = fsub contract float %1052, %1053\l  %1055 = fmul contract float %1018, %1054\l  %1056 = fadd contract float %991, %1047\l  %1057 = fadd contract float %990, %1051\l  %1058 = fadd contract float %989, %1055\l  %1059 = add nuw nsw i32 %992, 1\l  %1060 = icmp eq i32 %1059, 257\l  br i1 %1060, label %1061, label %988, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e71c40:s0 -> Node0x5e5d810;
	Node0x5e71c40:s1 -> Node0x5e71c40;
	Node0x5e5d810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1061:\l1061:                                             \l  %1062 = mul nuw nsw i32 %11, 14\l  %1063 = add nuw nsw i32 %1062, %6\l  %1064 = zext i32 %1063 to i64\l  %1065 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1064\l  %1066 = bitcast %struct.HIP_vector_type addrspace(1)* %1065 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1066, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1067\l}"];
	Node0x5e5d810 -> Node0x5e5de70;
	Node0x5e5de70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1067:\l1067:                                             \l  %1068 = phi float [ %1058, %1061 ], [ %1137, %1067 ]\l  %1069 = phi float [ %1057, %1061 ], [ %1136, %1067 ]\l  %1070 = phi float [ %1056, %1061 ], [ %1135, %1067 ]\l  %1071 = phi i32 [ 1, %1061 ], [ %1138, %1067 ]\l  %1072 = add nsw i32 %1071, -1\l  %1073 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1072, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1074 = load float, float addrspace(3)* %1073, align 4\l  %1075 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1072, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1076 = load float, float addrspace(3)* %1075, align 4\l  %1077 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1072, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1078 = load float, float addrspace(3)* %1077, align 4\l  %1079 = and i32 %1071, 255\l  %1080 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1079, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1081 = load float, float addrspace(3)* %1080, align 4\l  %1082 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1079, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1083 = load float, float addrspace(3)* %1082, align 4\l  %1084 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1079, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1085 = load float, float addrspace(3)* %1084, align 4\l  %1086 = fsub contract float %1081, %1074\l  %1087 = fsub contract float %1083, %1076\l  %1088 = fsub contract float %1085, %1078\l  %1089 = fsub contract float %18, %1074\l  %1090 = fsub contract float %20, %1076\l  %1091 = fsub contract float %22, %1078\l  %1092 = fmul contract float %1089, %1089\l  %1093 = fmul contract float %1090, %1090\l  %1094 = fadd contract float %1092, %1093\l  %1095 = fmul contract float %1091, %1091\l  %1096 = fadd contract float %1095, %1094\l  %1097 = fdiv contract float 1.000000e+00, %1096\l  %1098 = fcmp olt float %1096, 0x39F0000000000000\l  %1099 = select i1 %1098, float 0x41F0000000000000, float 1.000000e+00\l  %1100 = fmul float %1096, %1099\l  %1101 = tail call float @llvm.sqrt.f32(float %1100)\l  %1102 = bitcast float %1101 to i32\l  %1103 = add nsw i32 %1102, -1\l  %1104 = bitcast i32 %1103 to float\l  %1105 = add nsw i32 %1102, 1\l  %1106 = bitcast i32 %1105 to float\l  %1107 = tail call i1 @llvm.amdgcn.class.f32(float %1100, i32 608)\l  %1108 = select i1 %1098, float 0x3EF0000000000000, float 1.000000e+00\l  %1109 = fneg float %1106\l  %1110 = tail call float @llvm.fma.f32(float %1109, float %1101, float %1100)\l  %1111 = fcmp ogt float %1110, 0.000000e+00\l  %1112 = fneg float %1104\l  %1113 = tail call float @llvm.fma.f32(float %1112, float %1101, float %1100)\l  %1114 = fcmp ole float %1113, 0.000000e+00\l  %1115 = select i1 %1114, float %1104, float %1101\l  %1116 = select i1 %1111, float %1106, float %1115\l  %1117 = fmul float %1108, %1116\l  %1118 = select i1 %1107, float %1100, float %1117\l  %1119 = fdiv contract float 1.000000e+00, %1118\l  %1120 = fmul contract float %1089, %1119\l  %1121 = fmul contract float %1090, %1119\l  %1122 = fmul contract float %1091, %1119\l  %1123 = fmul contract float %1087, %1122\l  %1124 = fmul contract float %1088, %1121\l  %1125 = fsub contract float %1123, %1124\l  %1126 = fmul contract float %1097, %1125\l  %1127 = fmul contract float %1088, %1120\l  %1128 = fmul contract float %1086, %1122\l  %1129 = fsub contract float %1127, %1128\l  %1130 = fmul contract float %1097, %1129\l  %1131 = fmul contract float %1086, %1121\l  %1132 = fmul contract float %1087, %1120\l  %1133 = fsub contract float %1131, %1132\l  %1134 = fmul contract float %1097, %1133\l  %1135 = fadd contract float %1070, %1126\l  %1136 = fadd contract float %1069, %1130\l  %1137 = fadd contract float %1068, %1134\l  %1138 = add nuw nsw i32 %1071, 1\l  %1139 = icmp eq i32 %1138, 257\l  br i1 %1139, label %1140, label %1067, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e5de70:s0 -> Node0x5e7a300;
	Node0x5e5de70:s1 -> Node0x5e5de70;
	Node0x5e7a300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1140:\l1140:                                             \l  %1141 = mul nuw nsw i32 %11, 15\l  %1142 = add nuw nsw i32 %1141, %6\l  %1143 = zext i32 %1142 to i64\l  %1144 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1143\l  %1145 = bitcast %struct.HIP_vector_type addrspace(1)* %1144 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1145, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1146\l}"];
	Node0x5e7a300 -> Node0x5e7a960;
	Node0x5e7a960 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1146:\l1146:                                             \l  %1147 = phi float [ %1137, %1140 ], [ %1216, %1146 ]\l  %1148 = phi float [ %1136, %1140 ], [ %1215, %1146 ]\l  %1149 = phi float [ %1135, %1140 ], [ %1214, %1146 ]\l  %1150 = phi i32 [ 1, %1140 ], [ %1217, %1146 ]\l  %1151 = add nsw i32 %1150, -1\l  %1152 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1151, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1153 = load float, float addrspace(3)* %1152, align 4\l  %1154 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1151, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1155 = load float, float addrspace(3)* %1154, align 4\l  %1156 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1151, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1157 = load float, float addrspace(3)* %1156, align 4\l  %1158 = and i32 %1150, 255\l  %1159 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1158, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1160 = load float, float addrspace(3)* %1159, align 4\l  %1161 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1158, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1162 = load float, float addrspace(3)* %1161, align 4\l  %1163 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1158, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1164 = load float, float addrspace(3)* %1163, align 4\l  %1165 = fsub contract float %1160, %1153\l  %1166 = fsub contract float %1162, %1155\l  %1167 = fsub contract float %1164, %1157\l  %1168 = fsub contract float %18, %1153\l  %1169 = fsub contract float %20, %1155\l  %1170 = fsub contract float %22, %1157\l  %1171 = fmul contract float %1168, %1168\l  %1172 = fmul contract float %1169, %1169\l  %1173 = fadd contract float %1171, %1172\l  %1174 = fmul contract float %1170, %1170\l  %1175 = fadd contract float %1174, %1173\l  %1176 = fdiv contract float 1.000000e+00, %1175\l  %1177 = fcmp olt float %1175, 0x39F0000000000000\l  %1178 = select i1 %1177, float 0x41F0000000000000, float 1.000000e+00\l  %1179 = fmul float %1175, %1178\l  %1180 = tail call float @llvm.sqrt.f32(float %1179)\l  %1181 = bitcast float %1180 to i32\l  %1182 = add nsw i32 %1181, -1\l  %1183 = bitcast i32 %1182 to float\l  %1184 = add nsw i32 %1181, 1\l  %1185 = bitcast i32 %1184 to float\l  %1186 = tail call i1 @llvm.amdgcn.class.f32(float %1179, i32 608)\l  %1187 = select i1 %1177, float 0x3EF0000000000000, float 1.000000e+00\l  %1188 = fneg float %1185\l  %1189 = tail call float @llvm.fma.f32(float %1188, float %1180, float %1179)\l  %1190 = fcmp ogt float %1189, 0.000000e+00\l  %1191 = fneg float %1183\l  %1192 = tail call float @llvm.fma.f32(float %1191, float %1180, float %1179)\l  %1193 = fcmp ole float %1192, 0.000000e+00\l  %1194 = select i1 %1193, float %1183, float %1180\l  %1195 = select i1 %1190, float %1185, float %1194\l  %1196 = fmul float %1187, %1195\l  %1197 = select i1 %1186, float %1179, float %1196\l  %1198 = fdiv contract float 1.000000e+00, %1197\l  %1199 = fmul contract float %1168, %1198\l  %1200 = fmul contract float %1169, %1198\l  %1201 = fmul contract float %1170, %1198\l  %1202 = fmul contract float %1166, %1201\l  %1203 = fmul contract float %1167, %1200\l  %1204 = fsub contract float %1202, %1203\l  %1205 = fmul contract float %1176, %1204\l  %1206 = fmul contract float %1167, %1199\l  %1207 = fmul contract float %1165, %1201\l  %1208 = fsub contract float %1206, %1207\l  %1209 = fmul contract float %1176, %1208\l  %1210 = fmul contract float %1165, %1200\l  %1211 = fmul contract float %1166, %1199\l  %1212 = fsub contract float %1210, %1211\l  %1213 = fmul contract float %1176, %1212\l  %1214 = fadd contract float %1149, %1205\l  %1215 = fadd contract float %1148, %1209\l  %1216 = fadd contract float %1147, %1213\l  %1217 = add nuw nsw i32 %1150, 1\l  %1218 = icmp eq i32 %1217, 257\l  br i1 %1218, label %1219, label %1146, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e7a960:s0 -> Node0x5e7d990;
	Node0x5e7a960:s1 -> Node0x5e7a960;
	Node0x5e7d990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1219:\l1219:                                             \l  %1220 = shl nuw nsw i32 %11, 4\l  %1221 = add nuw nsw i32 %1220, %6\l  %1222 = zext i32 %1221 to i64\l  %1223 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1222\l  %1224 = bitcast %struct.HIP_vector_type addrspace(1)* %1223 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1224, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1225\l}"];
	Node0x5e7d990 -> Node0x5e7dff0;
	Node0x5e7dff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1225:\l1225:                                             \l  %1226 = phi float [ %1216, %1219 ], [ %1295, %1225 ]\l  %1227 = phi float [ %1215, %1219 ], [ %1294, %1225 ]\l  %1228 = phi float [ %1214, %1219 ], [ %1293, %1225 ]\l  %1229 = phi i32 [ 1, %1219 ], [ %1296, %1225 ]\l  %1230 = add nsw i32 %1229, -1\l  %1231 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1230, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1232 = load float, float addrspace(3)* %1231, align 4\l  %1233 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1230, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1234 = load float, float addrspace(3)* %1233, align 4\l  %1235 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1230, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1236 = load float, float addrspace(3)* %1235, align 4\l  %1237 = and i32 %1229, 255\l  %1238 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1237, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1239 = load float, float addrspace(3)* %1238, align 4\l  %1240 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1237, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1241 = load float, float addrspace(3)* %1240, align 4\l  %1242 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1237, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1243 = load float, float addrspace(3)* %1242, align 4\l  %1244 = fsub contract float %1239, %1232\l  %1245 = fsub contract float %1241, %1234\l  %1246 = fsub contract float %1243, %1236\l  %1247 = fsub contract float %18, %1232\l  %1248 = fsub contract float %20, %1234\l  %1249 = fsub contract float %22, %1236\l  %1250 = fmul contract float %1247, %1247\l  %1251 = fmul contract float %1248, %1248\l  %1252 = fadd contract float %1250, %1251\l  %1253 = fmul contract float %1249, %1249\l  %1254 = fadd contract float %1253, %1252\l  %1255 = fdiv contract float 1.000000e+00, %1254\l  %1256 = fcmp olt float %1254, 0x39F0000000000000\l  %1257 = select i1 %1256, float 0x41F0000000000000, float 1.000000e+00\l  %1258 = fmul float %1254, %1257\l  %1259 = tail call float @llvm.sqrt.f32(float %1258)\l  %1260 = bitcast float %1259 to i32\l  %1261 = add nsw i32 %1260, -1\l  %1262 = bitcast i32 %1261 to float\l  %1263 = add nsw i32 %1260, 1\l  %1264 = bitcast i32 %1263 to float\l  %1265 = tail call i1 @llvm.amdgcn.class.f32(float %1258, i32 608)\l  %1266 = select i1 %1256, float 0x3EF0000000000000, float 1.000000e+00\l  %1267 = fneg float %1264\l  %1268 = tail call float @llvm.fma.f32(float %1267, float %1259, float %1258)\l  %1269 = fcmp ogt float %1268, 0.000000e+00\l  %1270 = fneg float %1262\l  %1271 = tail call float @llvm.fma.f32(float %1270, float %1259, float %1258)\l  %1272 = fcmp ole float %1271, 0.000000e+00\l  %1273 = select i1 %1272, float %1262, float %1259\l  %1274 = select i1 %1269, float %1264, float %1273\l  %1275 = fmul float %1266, %1274\l  %1276 = select i1 %1265, float %1258, float %1275\l  %1277 = fdiv contract float 1.000000e+00, %1276\l  %1278 = fmul contract float %1247, %1277\l  %1279 = fmul contract float %1248, %1277\l  %1280 = fmul contract float %1249, %1277\l  %1281 = fmul contract float %1245, %1280\l  %1282 = fmul contract float %1246, %1279\l  %1283 = fsub contract float %1281, %1282\l  %1284 = fmul contract float %1255, %1283\l  %1285 = fmul contract float %1246, %1278\l  %1286 = fmul contract float %1244, %1280\l  %1287 = fsub contract float %1285, %1286\l  %1288 = fmul contract float %1255, %1287\l  %1289 = fmul contract float %1244, %1279\l  %1290 = fmul contract float %1245, %1278\l  %1291 = fsub contract float %1289, %1290\l  %1292 = fmul contract float %1255, %1291\l  %1293 = fadd contract float %1228, %1284\l  %1294 = fadd contract float %1227, %1288\l  %1295 = fadd contract float %1226, %1292\l  %1296 = add nuw nsw i32 %1229, 1\l  %1297 = icmp eq i32 %1296, 257\l  br i1 %1297, label %1298, label %1225, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e7dff0:s0 -> Node0x5e81020;
	Node0x5e7dff0:s1 -> Node0x5e7dff0;
	Node0x5e81020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1298:\l1298:                                             \l  %1299 = mul nuw nsw i32 %11, 17\l  %1300 = add nuw nsw i32 %1299, %6\l  %1301 = zext i32 %1300 to i64\l  %1302 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1301\l  %1303 = bitcast %struct.HIP_vector_type addrspace(1)* %1302 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1303, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1304\l}"];
	Node0x5e81020 -> Node0x5e81680;
	Node0x5e81680 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1304:\l1304:                                             \l  %1305 = phi float [ %1295, %1298 ], [ %1374, %1304 ]\l  %1306 = phi float [ %1294, %1298 ], [ %1373, %1304 ]\l  %1307 = phi float [ %1293, %1298 ], [ %1372, %1304 ]\l  %1308 = phi i32 [ 1, %1298 ], [ %1375, %1304 ]\l  %1309 = add nsw i32 %1308, -1\l  %1310 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1309, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1311 = load float, float addrspace(3)* %1310, align 4\l  %1312 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1309, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1313 = load float, float addrspace(3)* %1312, align 4\l  %1314 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1309, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1315 = load float, float addrspace(3)* %1314, align 4\l  %1316 = and i32 %1308, 255\l  %1317 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1316, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1318 = load float, float addrspace(3)* %1317, align 4\l  %1319 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1316, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1320 = load float, float addrspace(3)* %1319, align 4\l  %1321 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1316, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1322 = load float, float addrspace(3)* %1321, align 4\l  %1323 = fsub contract float %1318, %1311\l  %1324 = fsub contract float %1320, %1313\l  %1325 = fsub contract float %1322, %1315\l  %1326 = fsub contract float %18, %1311\l  %1327 = fsub contract float %20, %1313\l  %1328 = fsub contract float %22, %1315\l  %1329 = fmul contract float %1326, %1326\l  %1330 = fmul contract float %1327, %1327\l  %1331 = fadd contract float %1329, %1330\l  %1332 = fmul contract float %1328, %1328\l  %1333 = fadd contract float %1332, %1331\l  %1334 = fdiv contract float 1.000000e+00, %1333\l  %1335 = fcmp olt float %1333, 0x39F0000000000000\l  %1336 = select i1 %1335, float 0x41F0000000000000, float 1.000000e+00\l  %1337 = fmul float %1333, %1336\l  %1338 = tail call float @llvm.sqrt.f32(float %1337)\l  %1339 = bitcast float %1338 to i32\l  %1340 = add nsw i32 %1339, -1\l  %1341 = bitcast i32 %1340 to float\l  %1342 = add nsw i32 %1339, 1\l  %1343 = bitcast i32 %1342 to float\l  %1344 = tail call i1 @llvm.amdgcn.class.f32(float %1337, i32 608)\l  %1345 = select i1 %1335, float 0x3EF0000000000000, float 1.000000e+00\l  %1346 = fneg float %1343\l  %1347 = tail call float @llvm.fma.f32(float %1346, float %1338, float %1337)\l  %1348 = fcmp ogt float %1347, 0.000000e+00\l  %1349 = fneg float %1341\l  %1350 = tail call float @llvm.fma.f32(float %1349, float %1338, float %1337)\l  %1351 = fcmp ole float %1350, 0.000000e+00\l  %1352 = select i1 %1351, float %1341, float %1338\l  %1353 = select i1 %1348, float %1343, float %1352\l  %1354 = fmul float %1345, %1353\l  %1355 = select i1 %1344, float %1337, float %1354\l  %1356 = fdiv contract float 1.000000e+00, %1355\l  %1357 = fmul contract float %1326, %1356\l  %1358 = fmul contract float %1327, %1356\l  %1359 = fmul contract float %1328, %1356\l  %1360 = fmul contract float %1324, %1359\l  %1361 = fmul contract float %1325, %1358\l  %1362 = fsub contract float %1360, %1361\l  %1363 = fmul contract float %1334, %1362\l  %1364 = fmul contract float %1325, %1357\l  %1365 = fmul contract float %1323, %1359\l  %1366 = fsub contract float %1364, %1365\l  %1367 = fmul contract float %1334, %1366\l  %1368 = fmul contract float %1323, %1358\l  %1369 = fmul contract float %1324, %1357\l  %1370 = fsub contract float %1368, %1369\l  %1371 = fmul contract float %1334, %1370\l  %1372 = fadd contract float %1307, %1363\l  %1373 = fadd contract float %1306, %1367\l  %1374 = fadd contract float %1305, %1371\l  %1375 = add nuw nsw i32 %1308, 1\l  %1376 = icmp eq i32 %1375, 257\l  br i1 %1376, label %1377, label %1304, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e81680:s0 -> Node0x5e846b0;
	Node0x5e81680:s1 -> Node0x5e81680;
	Node0x5e846b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1377:\l1377:                                             \l  %1378 = mul nuw nsw i32 %11, 18\l  %1379 = add nuw nsw i32 %1378, %6\l  %1380 = zext i32 %1379 to i64\l  %1381 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1380\l  %1382 = bitcast %struct.HIP_vector_type addrspace(1)* %1381 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1382, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1383\l}"];
	Node0x5e846b0 -> Node0x5e84d10;
	Node0x5e84d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1383:\l1383:                                             \l  %1384 = phi float [ %1374, %1377 ], [ %1453, %1383 ]\l  %1385 = phi float [ %1373, %1377 ], [ %1452, %1383 ]\l  %1386 = phi float [ %1372, %1377 ], [ %1451, %1383 ]\l  %1387 = phi i32 [ 1, %1377 ], [ %1454, %1383 ]\l  %1388 = add nsw i32 %1387, -1\l  %1389 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1388, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1390 = load float, float addrspace(3)* %1389, align 4\l  %1391 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1388, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1392 = load float, float addrspace(3)* %1391, align 4\l  %1393 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1388, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1394 = load float, float addrspace(3)* %1393, align 4\l  %1395 = and i32 %1387, 255\l  %1396 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1395, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1397 = load float, float addrspace(3)* %1396, align 4\l  %1398 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1395, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1399 = load float, float addrspace(3)* %1398, align 4\l  %1400 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1395, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1401 = load float, float addrspace(3)* %1400, align 4\l  %1402 = fsub contract float %1397, %1390\l  %1403 = fsub contract float %1399, %1392\l  %1404 = fsub contract float %1401, %1394\l  %1405 = fsub contract float %18, %1390\l  %1406 = fsub contract float %20, %1392\l  %1407 = fsub contract float %22, %1394\l  %1408 = fmul contract float %1405, %1405\l  %1409 = fmul contract float %1406, %1406\l  %1410 = fadd contract float %1408, %1409\l  %1411 = fmul contract float %1407, %1407\l  %1412 = fadd contract float %1411, %1410\l  %1413 = fdiv contract float 1.000000e+00, %1412\l  %1414 = fcmp olt float %1412, 0x39F0000000000000\l  %1415 = select i1 %1414, float 0x41F0000000000000, float 1.000000e+00\l  %1416 = fmul float %1412, %1415\l  %1417 = tail call float @llvm.sqrt.f32(float %1416)\l  %1418 = bitcast float %1417 to i32\l  %1419 = add nsw i32 %1418, -1\l  %1420 = bitcast i32 %1419 to float\l  %1421 = add nsw i32 %1418, 1\l  %1422 = bitcast i32 %1421 to float\l  %1423 = tail call i1 @llvm.amdgcn.class.f32(float %1416, i32 608)\l  %1424 = select i1 %1414, float 0x3EF0000000000000, float 1.000000e+00\l  %1425 = fneg float %1422\l  %1426 = tail call float @llvm.fma.f32(float %1425, float %1417, float %1416)\l  %1427 = fcmp ogt float %1426, 0.000000e+00\l  %1428 = fneg float %1420\l  %1429 = tail call float @llvm.fma.f32(float %1428, float %1417, float %1416)\l  %1430 = fcmp ole float %1429, 0.000000e+00\l  %1431 = select i1 %1430, float %1420, float %1417\l  %1432 = select i1 %1427, float %1422, float %1431\l  %1433 = fmul float %1424, %1432\l  %1434 = select i1 %1423, float %1416, float %1433\l  %1435 = fdiv contract float 1.000000e+00, %1434\l  %1436 = fmul contract float %1405, %1435\l  %1437 = fmul contract float %1406, %1435\l  %1438 = fmul contract float %1407, %1435\l  %1439 = fmul contract float %1403, %1438\l  %1440 = fmul contract float %1404, %1437\l  %1441 = fsub contract float %1439, %1440\l  %1442 = fmul contract float %1413, %1441\l  %1443 = fmul contract float %1404, %1436\l  %1444 = fmul contract float %1402, %1438\l  %1445 = fsub contract float %1443, %1444\l  %1446 = fmul contract float %1413, %1445\l  %1447 = fmul contract float %1402, %1437\l  %1448 = fmul contract float %1403, %1436\l  %1449 = fsub contract float %1447, %1448\l  %1450 = fmul contract float %1413, %1449\l  %1451 = fadd contract float %1386, %1442\l  %1452 = fadd contract float %1385, %1446\l  %1453 = fadd contract float %1384, %1450\l  %1454 = add nuw nsw i32 %1387, 1\l  %1455 = icmp eq i32 %1454, 257\l  br i1 %1455, label %1456, label %1383, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e84d10:s0 -> Node0x5e87d40;
	Node0x5e84d10:s1 -> Node0x5e84d10;
	Node0x5e87d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1456:\l1456:                                             \l  %1457 = mul nuw nsw i32 %11, 19\l  %1458 = add nuw nsw i32 %1457, %6\l  %1459 = zext i32 %1458 to i64\l  %1460 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1459\l  %1461 = bitcast %struct.HIP_vector_type addrspace(1)* %1460 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1461, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1462\l}"];
	Node0x5e87d40 -> Node0x5e883a0;
	Node0x5e883a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1462:\l1462:                                             \l  %1463 = phi float [ %1453, %1456 ], [ %1532, %1462 ]\l  %1464 = phi float [ %1452, %1456 ], [ %1531, %1462 ]\l  %1465 = phi float [ %1451, %1456 ], [ %1530, %1462 ]\l  %1466 = phi i32 [ 1, %1456 ], [ %1533, %1462 ]\l  %1467 = add nsw i32 %1466, -1\l  %1468 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1467, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1469 = load float, float addrspace(3)* %1468, align 4\l  %1470 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1467, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1471 = load float, float addrspace(3)* %1470, align 4\l  %1472 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1467, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1473 = load float, float addrspace(3)* %1472, align 4\l  %1474 = and i32 %1466, 255\l  %1475 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1474, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1476 = load float, float addrspace(3)* %1475, align 4\l  %1477 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1474, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1478 = load float, float addrspace(3)* %1477, align 4\l  %1479 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1474, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1480 = load float, float addrspace(3)* %1479, align 4\l  %1481 = fsub contract float %1476, %1469\l  %1482 = fsub contract float %1478, %1471\l  %1483 = fsub contract float %1480, %1473\l  %1484 = fsub contract float %18, %1469\l  %1485 = fsub contract float %20, %1471\l  %1486 = fsub contract float %22, %1473\l  %1487 = fmul contract float %1484, %1484\l  %1488 = fmul contract float %1485, %1485\l  %1489 = fadd contract float %1487, %1488\l  %1490 = fmul contract float %1486, %1486\l  %1491 = fadd contract float %1490, %1489\l  %1492 = fdiv contract float 1.000000e+00, %1491\l  %1493 = fcmp olt float %1491, 0x39F0000000000000\l  %1494 = select i1 %1493, float 0x41F0000000000000, float 1.000000e+00\l  %1495 = fmul float %1491, %1494\l  %1496 = tail call float @llvm.sqrt.f32(float %1495)\l  %1497 = bitcast float %1496 to i32\l  %1498 = add nsw i32 %1497, -1\l  %1499 = bitcast i32 %1498 to float\l  %1500 = add nsw i32 %1497, 1\l  %1501 = bitcast i32 %1500 to float\l  %1502 = tail call i1 @llvm.amdgcn.class.f32(float %1495, i32 608)\l  %1503 = select i1 %1493, float 0x3EF0000000000000, float 1.000000e+00\l  %1504 = fneg float %1501\l  %1505 = tail call float @llvm.fma.f32(float %1504, float %1496, float %1495)\l  %1506 = fcmp ogt float %1505, 0.000000e+00\l  %1507 = fneg float %1499\l  %1508 = tail call float @llvm.fma.f32(float %1507, float %1496, float %1495)\l  %1509 = fcmp ole float %1508, 0.000000e+00\l  %1510 = select i1 %1509, float %1499, float %1496\l  %1511 = select i1 %1506, float %1501, float %1510\l  %1512 = fmul float %1503, %1511\l  %1513 = select i1 %1502, float %1495, float %1512\l  %1514 = fdiv contract float 1.000000e+00, %1513\l  %1515 = fmul contract float %1484, %1514\l  %1516 = fmul contract float %1485, %1514\l  %1517 = fmul contract float %1486, %1514\l  %1518 = fmul contract float %1482, %1517\l  %1519 = fmul contract float %1483, %1516\l  %1520 = fsub contract float %1518, %1519\l  %1521 = fmul contract float %1492, %1520\l  %1522 = fmul contract float %1483, %1515\l  %1523 = fmul contract float %1481, %1517\l  %1524 = fsub contract float %1522, %1523\l  %1525 = fmul contract float %1492, %1524\l  %1526 = fmul contract float %1481, %1516\l  %1527 = fmul contract float %1482, %1515\l  %1528 = fsub contract float %1526, %1527\l  %1529 = fmul contract float %1492, %1528\l  %1530 = fadd contract float %1465, %1521\l  %1531 = fadd contract float %1464, %1525\l  %1532 = fadd contract float %1463, %1529\l  %1533 = add nuw nsw i32 %1466, 1\l  %1534 = icmp eq i32 %1533, 257\l  br i1 %1534, label %1535, label %1462, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e883a0:s0 -> Node0x5e8b3d0;
	Node0x5e883a0:s1 -> Node0x5e883a0;
	Node0x5e8b3d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1535:\l1535:                                             \l  %1536 = mul nuw nsw i32 %11, 20\l  %1537 = add nuw nsw i32 %1536, %6\l  %1538 = zext i32 %1537 to i64\l  %1539 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1538\l  %1540 = bitcast %struct.HIP_vector_type addrspace(1)* %1539 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1540, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1541\l}"];
	Node0x5e8b3d0 -> Node0x5e8ba30;
	Node0x5e8ba30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1541:\l1541:                                             \l  %1542 = phi float [ %1532, %1535 ], [ %1611, %1541 ]\l  %1543 = phi float [ %1531, %1535 ], [ %1610, %1541 ]\l  %1544 = phi float [ %1530, %1535 ], [ %1609, %1541 ]\l  %1545 = phi i32 [ 1, %1535 ], [ %1612, %1541 ]\l  %1546 = add nsw i32 %1545, -1\l  %1547 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1546, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1548 = load float, float addrspace(3)* %1547, align 4\l  %1549 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1546, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1550 = load float, float addrspace(3)* %1549, align 4\l  %1551 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1546, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1552 = load float, float addrspace(3)* %1551, align 4\l  %1553 = and i32 %1545, 255\l  %1554 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1553, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1555 = load float, float addrspace(3)* %1554, align 4\l  %1556 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1553, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1557 = load float, float addrspace(3)* %1556, align 4\l  %1558 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1553, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1559 = load float, float addrspace(3)* %1558, align 4\l  %1560 = fsub contract float %1555, %1548\l  %1561 = fsub contract float %1557, %1550\l  %1562 = fsub contract float %1559, %1552\l  %1563 = fsub contract float %18, %1548\l  %1564 = fsub contract float %20, %1550\l  %1565 = fsub contract float %22, %1552\l  %1566 = fmul contract float %1563, %1563\l  %1567 = fmul contract float %1564, %1564\l  %1568 = fadd contract float %1566, %1567\l  %1569 = fmul contract float %1565, %1565\l  %1570 = fadd contract float %1569, %1568\l  %1571 = fdiv contract float 1.000000e+00, %1570\l  %1572 = fcmp olt float %1570, 0x39F0000000000000\l  %1573 = select i1 %1572, float 0x41F0000000000000, float 1.000000e+00\l  %1574 = fmul float %1570, %1573\l  %1575 = tail call float @llvm.sqrt.f32(float %1574)\l  %1576 = bitcast float %1575 to i32\l  %1577 = add nsw i32 %1576, -1\l  %1578 = bitcast i32 %1577 to float\l  %1579 = add nsw i32 %1576, 1\l  %1580 = bitcast i32 %1579 to float\l  %1581 = tail call i1 @llvm.amdgcn.class.f32(float %1574, i32 608)\l  %1582 = select i1 %1572, float 0x3EF0000000000000, float 1.000000e+00\l  %1583 = fneg float %1580\l  %1584 = tail call float @llvm.fma.f32(float %1583, float %1575, float %1574)\l  %1585 = fcmp ogt float %1584, 0.000000e+00\l  %1586 = fneg float %1578\l  %1587 = tail call float @llvm.fma.f32(float %1586, float %1575, float %1574)\l  %1588 = fcmp ole float %1587, 0.000000e+00\l  %1589 = select i1 %1588, float %1578, float %1575\l  %1590 = select i1 %1585, float %1580, float %1589\l  %1591 = fmul float %1582, %1590\l  %1592 = select i1 %1581, float %1574, float %1591\l  %1593 = fdiv contract float 1.000000e+00, %1592\l  %1594 = fmul contract float %1563, %1593\l  %1595 = fmul contract float %1564, %1593\l  %1596 = fmul contract float %1565, %1593\l  %1597 = fmul contract float %1561, %1596\l  %1598 = fmul contract float %1562, %1595\l  %1599 = fsub contract float %1597, %1598\l  %1600 = fmul contract float %1571, %1599\l  %1601 = fmul contract float %1562, %1594\l  %1602 = fmul contract float %1560, %1596\l  %1603 = fsub contract float %1601, %1602\l  %1604 = fmul contract float %1571, %1603\l  %1605 = fmul contract float %1560, %1595\l  %1606 = fmul contract float %1561, %1594\l  %1607 = fsub contract float %1605, %1606\l  %1608 = fmul contract float %1571, %1607\l  %1609 = fadd contract float %1544, %1600\l  %1610 = fadd contract float %1543, %1604\l  %1611 = fadd contract float %1542, %1608\l  %1612 = add nuw nsw i32 %1545, 1\l  %1613 = icmp eq i32 %1612, 257\l  br i1 %1613, label %1614, label %1541, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e8ba30:s0 -> Node0x5e8ea60;
	Node0x5e8ba30:s1 -> Node0x5e8ba30;
	Node0x5e8ea60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1614:\l1614:                                             \l  %1615 = mul nuw nsw i32 %11, 21\l  %1616 = add nuw nsw i32 %1615, %6\l  %1617 = zext i32 %1616 to i64\l  %1618 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1617\l  %1619 = bitcast %struct.HIP_vector_type addrspace(1)* %1618 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1619, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1620\l}"];
	Node0x5e8ea60 -> Node0x5e8f0c0;
	Node0x5e8f0c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1620:\l1620:                                             \l  %1621 = phi float [ %1611, %1614 ], [ %1690, %1620 ]\l  %1622 = phi float [ %1610, %1614 ], [ %1689, %1620 ]\l  %1623 = phi float [ %1609, %1614 ], [ %1688, %1620 ]\l  %1624 = phi i32 [ 1, %1614 ], [ %1691, %1620 ]\l  %1625 = add nsw i32 %1624, -1\l  %1626 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1625, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1627 = load float, float addrspace(3)* %1626, align 4\l  %1628 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1625, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1629 = load float, float addrspace(3)* %1628, align 4\l  %1630 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1625, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1631 = load float, float addrspace(3)* %1630, align 4\l  %1632 = and i32 %1624, 255\l  %1633 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1632, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1634 = load float, float addrspace(3)* %1633, align 4\l  %1635 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1632, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1636 = load float, float addrspace(3)* %1635, align 4\l  %1637 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1632, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1638 = load float, float addrspace(3)* %1637, align 4\l  %1639 = fsub contract float %1634, %1627\l  %1640 = fsub contract float %1636, %1629\l  %1641 = fsub contract float %1638, %1631\l  %1642 = fsub contract float %18, %1627\l  %1643 = fsub contract float %20, %1629\l  %1644 = fsub contract float %22, %1631\l  %1645 = fmul contract float %1642, %1642\l  %1646 = fmul contract float %1643, %1643\l  %1647 = fadd contract float %1645, %1646\l  %1648 = fmul contract float %1644, %1644\l  %1649 = fadd contract float %1648, %1647\l  %1650 = fdiv contract float 1.000000e+00, %1649\l  %1651 = fcmp olt float %1649, 0x39F0000000000000\l  %1652 = select i1 %1651, float 0x41F0000000000000, float 1.000000e+00\l  %1653 = fmul float %1649, %1652\l  %1654 = tail call float @llvm.sqrt.f32(float %1653)\l  %1655 = bitcast float %1654 to i32\l  %1656 = add nsw i32 %1655, -1\l  %1657 = bitcast i32 %1656 to float\l  %1658 = add nsw i32 %1655, 1\l  %1659 = bitcast i32 %1658 to float\l  %1660 = tail call i1 @llvm.amdgcn.class.f32(float %1653, i32 608)\l  %1661 = select i1 %1651, float 0x3EF0000000000000, float 1.000000e+00\l  %1662 = fneg float %1659\l  %1663 = tail call float @llvm.fma.f32(float %1662, float %1654, float %1653)\l  %1664 = fcmp ogt float %1663, 0.000000e+00\l  %1665 = fneg float %1657\l  %1666 = tail call float @llvm.fma.f32(float %1665, float %1654, float %1653)\l  %1667 = fcmp ole float %1666, 0.000000e+00\l  %1668 = select i1 %1667, float %1657, float %1654\l  %1669 = select i1 %1664, float %1659, float %1668\l  %1670 = fmul float %1661, %1669\l  %1671 = select i1 %1660, float %1653, float %1670\l  %1672 = fdiv contract float 1.000000e+00, %1671\l  %1673 = fmul contract float %1642, %1672\l  %1674 = fmul contract float %1643, %1672\l  %1675 = fmul contract float %1644, %1672\l  %1676 = fmul contract float %1640, %1675\l  %1677 = fmul contract float %1641, %1674\l  %1678 = fsub contract float %1676, %1677\l  %1679 = fmul contract float %1650, %1678\l  %1680 = fmul contract float %1641, %1673\l  %1681 = fmul contract float %1639, %1675\l  %1682 = fsub contract float %1680, %1681\l  %1683 = fmul contract float %1650, %1682\l  %1684 = fmul contract float %1639, %1674\l  %1685 = fmul contract float %1640, %1673\l  %1686 = fsub contract float %1684, %1685\l  %1687 = fmul contract float %1650, %1686\l  %1688 = fadd contract float %1623, %1679\l  %1689 = fadd contract float %1622, %1683\l  %1690 = fadd contract float %1621, %1687\l  %1691 = add nuw nsw i32 %1624, 1\l  %1692 = icmp eq i32 %1691, 257\l  br i1 %1692, label %1693, label %1620, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e8f0c0:s0 -> Node0x5e920f0;
	Node0x5e8f0c0:s1 -> Node0x5e8f0c0;
	Node0x5e920f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1693:\l1693:                                             \l  %1694 = mul nuw nsw i32 %11, 22\l  %1695 = add nuw nsw i32 %1694, %6\l  %1696 = zext i32 %1695 to i64\l  %1697 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1696\l  %1698 = bitcast %struct.HIP_vector_type addrspace(1)* %1697 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1698, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1699\l}"];
	Node0x5e920f0 -> Node0x5e92750;
	Node0x5e92750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1699:\l1699:                                             \l  %1700 = phi float [ %1690, %1693 ], [ %1769, %1699 ]\l  %1701 = phi float [ %1689, %1693 ], [ %1768, %1699 ]\l  %1702 = phi float [ %1688, %1693 ], [ %1767, %1699 ]\l  %1703 = phi i32 [ 1, %1693 ], [ %1770, %1699 ]\l  %1704 = add nsw i32 %1703, -1\l  %1705 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1704, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1706 = load float, float addrspace(3)* %1705, align 4\l  %1707 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1704, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1708 = load float, float addrspace(3)* %1707, align 4\l  %1709 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1704, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1710 = load float, float addrspace(3)* %1709, align 4\l  %1711 = and i32 %1703, 255\l  %1712 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1711, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1713 = load float, float addrspace(3)* %1712, align 4\l  %1714 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1711, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1715 = load float, float addrspace(3)* %1714, align 4\l  %1716 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1711, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1717 = load float, float addrspace(3)* %1716, align 4\l  %1718 = fsub contract float %1713, %1706\l  %1719 = fsub contract float %1715, %1708\l  %1720 = fsub contract float %1717, %1710\l  %1721 = fsub contract float %18, %1706\l  %1722 = fsub contract float %20, %1708\l  %1723 = fsub contract float %22, %1710\l  %1724 = fmul contract float %1721, %1721\l  %1725 = fmul contract float %1722, %1722\l  %1726 = fadd contract float %1724, %1725\l  %1727 = fmul contract float %1723, %1723\l  %1728 = fadd contract float %1727, %1726\l  %1729 = fdiv contract float 1.000000e+00, %1728\l  %1730 = fcmp olt float %1728, 0x39F0000000000000\l  %1731 = select i1 %1730, float 0x41F0000000000000, float 1.000000e+00\l  %1732 = fmul float %1728, %1731\l  %1733 = tail call float @llvm.sqrt.f32(float %1732)\l  %1734 = bitcast float %1733 to i32\l  %1735 = add nsw i32 %1734, -1\l  %1736 = bitcast i32 %1735 to float\l  %1737 = add nsw i32 %1734, 1\l  %1738 = bitcast i32 %1737 to float\l  %1739 = tail call i1 @llvm.amdgcn.class.f32(float %1732, i32 608)\l  %1740 = select i1 %1730, float 0x3EF0000000000000, float 1.000000e+00\l  %1741 = fneg float %1738\l  %1742 = tail call float @llvm.fma.f32(float %1741, float %1733, float %1732)\l  %1743 = fcmp ogt float %1742, 0.000000e+00\l  %1744 = fneg float %1736\l  %1745 = tail call float @llvm.fma.f32(float %1744, float %1733, float %1732)\l  %1746 = fcmp ole float %1745, 0.000000e+00\l  %1747 = select i1 %1746, float %1736, float %1733\l  %1748 = select i1 %1743, float %1738, float %1747\l  %1749 = fmul float %1740, %1748\l  %1750 = select i1 %1739, float %1732, float %1749\l  %1751 = fdiv contract float 1.000000e+00, %1750\l  %1752 = fmul contract float %1721, %1751\l  %1753 = fmul contract float %1722, %1751\l  %1754 = fmul contract float %1723, %1751\l  %1755 = fmul contract float %1719, %1754\l  %1756 = fmul contract float %1720, %1753\l  %1757 = fsub contract float %1755, %1756\l  %1758 = fmul contract float %1729, %1757\l  %1759 = fmul contract float %1720, %1752\l  %1760 = fmul contract float %1718, %1754\l  %1761 = fsub contract float %1759, %1760\l  %1762 = fmul contract float %1729, %1761\l  %1763 = fmul contract float %1718, %1753\l  %1764 = fmul contract float %1719, %1752\l  %1765 = fsub contract float %1763, %1764\l  %1766 = fmul contract float %1729, %1765\l  %1767 = fadd contract float %1702, %1758\l  %1768 = fadd contract float %1701, %1762\l  %1769 = fadd contract float %1700, %1766\l  %1770 = add nuw nsw i32 %1703, 1\l  %1771 = icmp eq i32 %1770, 257\l  br i1 %1771, label %1772, label %1699, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e92750:s0 -> Node0x5e95780;
	Node0x5e92750:s1 -> Node0x5e92750;
	Node0x5e95780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1772:\l1772:                                             \l  %1773 = mul nuw nsw i32 %11, 23\l  %1774 = add nuw nsw i32 %1773, %6\l  %1775 = zext i32 %1774 to i64\l  %1776 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %1775\l  %1777 = bitcast %struct.HIP_vector_type addrspace(1)* %1776 to i8\l... addrspace(1)*\l  tail call void @llvm.memcpy.p3i8.p1i8.i64(i8 addrspace(3)* noundef align 4\l... dereferenceable(12) %31, i8 addrspace(1)* noundef align 4 dereferenceable(12)\l... %1777, i64 12, i1 false)\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %1778\l}"];
	Node0x5e95780 -> Node0x5e95de0;
	Node0x5e95de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1778:\l1778:                                             \l  %1779 = phi float [ %1769, %1772 ], [ %1848, %1778 ]\l  %1780 = phi float [ %1768, %1772 ], [ %1847, %1778 ]\l  %1781 = phi float [ %1767, %1772 ], [ %1846, %1778 ]\l  %1782 = phi i32 [ 1, %1772 ], [ %1849, %1778 ]\l  %1783 = add nsw i32 %1782, -1\l  %1784 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1783, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1785 = load float, float addrspace(3)* %1784, align 4\l  %1786 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1783, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1787 = load float, float addrspace(3)* %1786, align 4\l  %1788 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1783, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1789 = load float, float addrspace(3)* %1788, align 4\l  %1790 = and i32 %1782, 255\l  %1791 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1790, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1792 = load float, float addrspace(3)* %1791, align 4\l  %1793 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1790, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1794 = load float, float addrspace(3)* %1793, align 4\l  %1795 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1790, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1796 = load float, float addrspace(3)* %1795, align 4\l  %1797 = fsub contract float %1792, %1785\l  %1798 = fsub contract float %1794, %1787\l  %1799 = fsub contract float %1796, %1789\l  %1800 = fsub contract float %18, %1785\l  %1801 = fsub contract float %20, %1787\l  %1802 = fsub contract float %22, %1789\l  %1803 = fmul contract float %1800, %1800\l  %1804 = fmul contract float %1801, %1801\l  %1805 = fadd contract float %1803, %1804\l  %1806 = fmul contract float %1802, %1802\l  %1807 = fadd contract float %1806, %1805\l  %1808 = fdiv contract float 1.000000e+00, %1807\l  %1809 = fcmp olt float %1807, 0x39F0000000000000\l  %1810 = select i1 %1809, float 0x41F0000000000000, float 1.000000e+00\l  %1811 = fmul float %1807, %1810\l  %1812 = tail call float @llvm.sqrt.f32(float %1811)\l  %1813 = bitcast float %1812 to i32\l  %1814 = add nsw i32 %1813, -1\l  %1815 = bitcast i32 %1814 to float\l  %1816 = add nsw i32 %1813, 1\l  %1817 = bitcast i32 %1816 to float\l  %1818 = tail call i1 @llvm.amdgcn.class.f32(float %1811, i32 608)\l  %1819 = select i1 %1809, float 0x3EF0000000000000, float 1.000000e+00\l  %1820 = fneg float %1817\l  %1821 = tail call float @llvm.fma.f32(float %1820, float %1812, float %1811)\l  %1822 = fcmp ogt float %1821, 0.000000e+00\l  %1823 = fneg float %1815\l  %1824 = tail call float @llvm.fma.f32(float %1823, float %1812, float %1811)\l  %1825 = fcmp ole float %1824, 0.000000e+00\l  %1826 = select i1 %1825, float %1815, float %1812\l  %1827 = select i1 %1822, float %1817, float %1826\l  %1828 = fmul float %1819, %1827\l  %1829 = select i1 %1818, float %1811, float %1828\l  %1830 = fdiv contract float 1.000000e+00, %1829\l  %1831 = fmul contract float %1800, %1830\l  %1832 = fmul contract float %1801, %1830\l  %1833 = fmul contract float %1802, %1830\l  %1834 = fmul contract float %1798, %1833\l  %1835 = fmul contract float %1799, %1832\l  %1836 = fsub contract float %1834, %1835\l  %1837 = fmul contract float %1808, %1836\l  %1838 = fmul contract float %1799, %1831\l  %1839 = fmul contract float %1797, %1833\l  %1840 = fsub contract float %1838, %1839\l  %1841 = fmul contract float %1808, %1840\l  %1842 = fmul contract float %1797, %1832\l  %1843 = fmul contract float %1798, %1831\l  %1844 = fsub contract float %1842, %1843\l  %1845 = fmul contract float %1808, %1844\l  %1846 = fadd contract float %1781, %1837\l  %1847 = fadd contract float %1780, %1841\l  %1848 = fadd contract float %1779, %1845\l  %1849 = add nuw nsw i32 %1782, 1\l  %1850 = icmp eq i32 %1849, 257\l  br i1 %1850, label %1851, label %1778, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e95de0:s0 -> Node0x5e98e10;
	Node0x5e95de0:s1 -> Node0x5e95de0;
	Node0x5e98e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1851:\l1851:                                             \l  %1852 = icmp slt i32 %14, 4096\l  br i1 %1852, label %1926, label %1945\l|{<s0>T|<s1>F}}"];
	Node0x5e98e10:s0 -> Node0x5e98fa0;
	Node0x5e98e10:s1 -> Node0x5e98ff0;
	Node0x5e44e50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1853:\l1853:                                             \l  %1854 = phi float [ 0.000000e+00, %5 ], [ %1923, %1853 ]\l  %1855 = phi float [ 0.000000e+00, %5 ], [ %1922, %1853 ]\l  %1856 = phi float [ 0.000000e+00, %5 ], [ %1921, %1853 ]\l  %1857 = phi i32 [ 1, %5 ], [ %1924, %1853 ]\l  %1858 = add nsw i32 %1857, -1\l  %1859 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1858, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1860 = load float, float addrspace(3)* %1859, align 4\l  %1861 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1858, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1862 = load float, float addrspace(3)* %1861, align 4\l  %1863 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1858, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1864 = load float, float addrspace(3)* %1863, align 4\l  %1865 = and i32 %1857, 255\l  %1866 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1865, i32 0, i32 0, i32 0, i32 0, i32 0\l  %1867 = load float, float addrspace(3)* %1866, align 4\l  %1868 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1865, i32 0, i32 0, i32 0, i32 0, i32 1\l  %1869 = load float, float addrspace(3)* %1868, align 4\l  %1870 = getelementptr inbounds [256 x %struct.HIP_vector_type], [256 x\l... %struct.HIP_vector_type] addrspace(3)*\l... @_ZZ12getForcesMagP15HIP_vector_typeIfLj4EEPS_IfLj3EES3_iS3_E8shared_r, i32\l... 0, i32 %1865, i32 0, i32 0, i32 0, i32 0, i32 2\l  %1871 = load float, float addrspace(3)* %1870, align 4\l  %1872 = fsub contract float %1867, %1860\l  %1873 = fsub contract float %1869, %1862\l  %1874 = fsub contract float %1871, %1864\l  %1875 = fsub contract float %18, %1860\l  %1876 = fsub contract float %20, %1862\l  %1877 = fsub contract float %22, %1864\l  %1878 = fmul contract float %1875, %1875\l  %1879 = fmul contract float %1876, %1876\l  %1880 = fadd contract float %1878, %1879\l  %1881 = fmul contract float %1877, %1877\l  %1882 = fadd contract float %1881, %1880\l  %1883 = fdiv contract float 1.000000e+00, %1882\l  %1884 = fcmp olt float %1882, 0x39F0000000000000\l  %1885 = select i1 %1884, float 0x41F0000000000000, float 1.000000e+00\l  %1886 = fmul float %1882, %1885\l  %1887 = tail call float @llvm.sqrt.f32(float %1886)\l  %1888 = bitcast float %1887 to i32\l  %1889 = add nsw i32 %1888, -1\l  %1890 = bitcast i32 %1889 to float\l  %1891 = add nsw i32 %1888, 1\l  %1892 = bitcast i32 %1891 to float\l  %1893 = tail call i1 @llvm.amdgcn.class.f32(float %1886, i32 608)\l  %1894 = select i1 %1884, float 0x3EF0000000000000, float 1.000000e+00\l  %1895 = fneg float %1892\l  %1896 = tail call float @llvm.fma.f32(float %1895, float %1887, float %1886)\l  %1897 = fcmp ogt float %1896, 0.000000e+00\l  %1898 = fneg float %1890\l  %1899 = tail call float @llvm.fma.f32(float %1898, float %1887, float %1886)\l  %1900 = fcmp ole float %1899, 0.000000e+00\l  %1901 = select i1 %1900, float %1890, float %1887\l  %1902 = select i1 %1897, float %1892, float %1901\l  %1903 = fmul float %1894, %1902\l  %1904 = select i1 %1893, float %1886, float %1903\l  %1905 = fdiv contract float 1.000000e+00, %1904\l  %1906 = fmul contract float %1875, %1905\l  %1907 = fmul contract float %1876, %1905\l  %1908 = fmul contract float %1877, %1905\l  %1909 = fmul contract float %1873, %1908\l  %1910 = fmul contract float %1874, %1907\l  %1911 = fsub contract float %1909, %1910\l  %1912 = fmul contract float %1883, %1911\l  %1913 = fmul contract float %1874, %1906\l  %1914 = fmul contract float %1872, %1908\l  %1915 = fsub contract float %1913, %1914\l  %1916 = fmul contract float %1883, %1915\l  %1917 = fmul contract float %1872, %1907\l  %1918 = fmul contract float %1873, %1906\l  %1919 = fsub contract float %1917, %1918\l  %1920 = fmul contract float %1883, %1919\l  %1921 = fadd contract float %1856, %1912\l  %1922 = fadd contract float %1855, %1916\l  %1923 = fadd contract float %1854, %1920\l  %1924 = add nuw nsw i32 %1857, 1\l  %1925 = icmp eq i32 %1924, 257\l  br i1 %1925, label %35, label %1853, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5e44e50:s0 -> Node0x5e44f50;
	Node0x5e44e50:s1 -> Node0x5e44e50;
	Node0x5e98fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%1926:\l1926:                                             \l  %1927 = fmul contract float %25, %1847\l  %1928 = fmul contract float %27, %1846\l  %1929 = fsub contract float %1927, %1928\l  %1930 = fmul contract float %29, %1846\l  %1931 = fmul contract float %25, %1848\l  %1932 = fsub contract float %1930, %1931\l  %1933 = fmul contract float %27, %1848\l  %1934 = fmul contract float %29, %1847\l  %1935 = fsub contract float %1933, %1934\l  %1936 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %23, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %1937 = load float, float addrspace(1)* %1936, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %1938 = fadd contract float %1935, %1937\l  store float %1938, float addrspace(1)* %1936, align 4, !tbaa !7\l  %1939 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %23, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %1940 = load float, float addrspace(1)* %1939, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %1941 = fadd contract float %1932, %1940\l  store float %1941, float addrspace(1)* %1939, align 4, !tbaa !7\l  %1942 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %23, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %1943 = load float, float addrspace(1)* %1942, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %1944 = fadd contract float %1929, %1943\l  store float %1944, float addrspace(1)* %1942, align 4, !tbaa !7\l  br label %1945\l}"];
	Node0x5e98fa0 -> Node0x5e98ff0;
	Node0x5e98ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%1945:\l1945:                                             \l  ret void\l}"];
}
