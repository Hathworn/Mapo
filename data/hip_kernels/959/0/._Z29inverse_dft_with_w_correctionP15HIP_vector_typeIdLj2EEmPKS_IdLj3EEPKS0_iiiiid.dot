digraph "CFG for '_Z29inverse_dft_with_w_correctionP15HIP_vector_typeIdLj2EEmPKS_IdLj3EEPKS0_iiiiid' function" {
	label="CFG for '_Z29inverse_dft_with_w_correctionP15HIP_vector_typeIdLj2EEmPKS_IdLj3EEPKS0_iiiiid' function";

	Node0x6032b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !4, !invariant.load !5\l  %24 = zext i16 %23 to i32\l  %25 = mul i32 %20, %24\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %27 = add i32 %25, %26\l  %28 = icmp slt i32 %19, %8\l  %29 = icmp slt i32 %27, %8\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %268\l|{<s0>T|<s1>F}}"];
	Node0x6032b20:s0 -> Node0x60370e0;
	Node0x6032b20:s1 -> Node0x6037170;
	Node0x60370e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%31:\l31:                                               \l  %32 = add nsw i32 %19, %6\l  %33 = sitofp i32 %32 to double\l  %34 = fmul contract double %33, %9\l  %35 = add nsw i32 %27, %7\l  %36 = sitofp i32 %35 to double\l  %37 = fmul contract double %36, %9\l  %38 = fmul contract double %34, %34\l  %39 = fsub contract double 1.000000e+00, %38\l  %40 = fmul contract double %37, %37\l  %41 = fsub contract double %39, %40\l  %42 = fcmp olt double %41, 0x1000000000000000\l  %43 = select i1 %42, double 0x4FF0000000000000, double 1.000000e+00\l  %44 = fmul double %41, %43\l  %45 = tail call double @llvm.amdgcn.rsq.f64(double %44)\l  %46 = fmul double %44, %45\l  %47 = fmul double %45, 5.000000e-01\l  %48 = fneg double %47\l  %49 = tail call double @llvm.fma.f64(double %48, double %46, double\l... 5.000000e-01)\l  %50 = tail call double @llvm.fma.f64(double %47, double %49, double %47)\l  %51 = tail call double @llvm.fma.f64(double %46, double %49, double %46)\l  %52 = fneg double %51\l  %53 = tail call double @llvm.fma.f64(double %52, double %51, double %44)\l  %54 = tail call double @llvm.fma.f64(double %53, double %50, double %51)\l  %55 = fneg double %54\l  %56 = tail call double @llvm.fma.f64(double %55, double %54, double %44)\l  %57 = tail call double @llvm.fma.f64(double %56, double %50, double %54)\l  %58 = select i1 %42, double 0x37F0000000000000, double 1.000000e+00\l  %59 = fmul double %58, %57\l  %60 = fcmp oeq double %44, 0.000000e+00\l  %61 = fcmp oeq double %44, 0x7FF0000000000000\l  %62 = or i1 %60, %61\l  %63 = select i1 %62, double %44, double %59\l  %64 = fadd contract double %63, -1.000000e+00\l  %65 = icmp sgt i32 %5, 0\l  br i1 %65, label %86, label %66\l|{<s0>T|<s1>F}}"];
	Node0x60370e0:s0 -> Node0x60373d0;
	Node0x60370e0:s1 -> Node0x6037460;
	Node0x6037460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%66:\l66:                                               \l  %67 = phi double [ 0.000000e+00, %31 ], [ %265, %200 ]\l  %68 = phi double [ 0.000000e+00, %31 ], [ %264, %200 ]\l  %69 = fmul contract double %63, %68\l  %70 = fmul contract double %63, %67\l  %71 = bitcast %struct.HIP_vector_type addrspace(1)* %0 to i8 addrspace(1)*\l  %72 = sext i32 %27 to i64\l  %73 = mul i64 %72, %1\l  %74 = getelementptr inbounds i8, i8 addrspace(1)* %71, i64 %73\l  %75 = bitcast i8 addrspace(1)* %74 to %struct.HIP_vector_type addrspace(1)*\l  %76 = sitofp i32 %4 to double\l  %77 = fdiv contract double %69, %76\l  %78 = sext i32 %19 to i64\l  %79 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %75, i64 %78, i32 0, i32 0, i32 0, i64 0\l  %80 = load double, double addrspace(1)* %79, align 16, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = fadd contract double %77, %80\l  store double %81, double addrspace(1)* %79, align 16, !tbaa !7\l  %82 = fdiv contract double %70, %76\l  %83 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %75, i64 %78, i32 0, i32 0, i32 0, i64 1\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fadd contract double %82, %84\l  store double %85, double addrspace(1)* %83, align 8, !tbaa !7\l  br label %268\l}"];
	Node0x6037460 -> Node0x6037170;
	Node0x60373d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%86:\l86:                                               \l  %87 = phi double [ %264, %200 ], [ 0.000000e+00, %31 ]\l  %88 = phi double [ %265, %200 ], [ 0.000000e+00, %31 ]\l  %89 = phi i32 [ %266, %200 ], [ 0, %31 ]\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %2, i64 %90, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = fmul contract double %34, %92\l  %94 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %2, i64 %90, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = fmul contract double %37, %95\l  %97 = fadd contract double %93, %96\l  %98 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %2, i64 %90, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fmul contract double %64, %99\l  %101 = fadd contract double %97, %100\l  %102 = fmul contract double %101, 0x401921FB54442D18\l  %103 = tail call double @llvm.fabs.f64(double %102)\l  %104 = fcmp olt double %103, 0x41D0000000000000\l  br i1 %104, label %105, label %124\l|{<s0>T|<s1>F}}"];
	Node0x60373d0:s0 -> Node0x603c320;
	Node0x60373d0:s1 -> Node0x603c3b0;
	Node0x603c320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%105:\l105:                                              \l  %106 = fmul double %103, 0x3FE45F306DC9C883\l  %107 = tail call double @llvm.rint.f64(double %106)\l  %108 = tail call double @llvm.fma.f64(double %107, double\l... 0xBFF921FB54442D18, double %103)\l  %109 = tail call double @llvm.fma.f64(double %107, double\l... 0xBC91A62633145C00, double %108)\l  %110 = fmul double %107, 0x3C91A62633145C00\l  %111 = fneg double %110\l  %112 = tail call double @llvm.fma.f64(double %107, double\l... 0x3C91A62633145C00, double %111)\l  %113 = fsub double %108, %110\l  %114 = fsub double %108, %113\l  %115 = fsub double %114, %110\l  %116 = fsub double %113, %109\l  %117 = fadd double %116, %115\l  %118 = fsub double %117, %112\l  %119 = tail call double @llvm.fma.f64(double %107, double\l... 0xB97B839A252049C0, double %118)\l  %120 = fadd double %109, %119\l  %121 = fsub double %120, %109\l  %122 = fsub double %119, %121\l  %123 = fptosi double %107 to i32\l  br label %200\l}"];
	Node0x603c320 -> Node0x6039e00;
	Node0x603c3b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%124:\l124:                                              \l  %125 = tail call double @llvm.amdgcn.trig.preop.f64(double %103, i32 0)\l  %126 = tail call double @llvm.amdgcn.trig.preop.f64(double %103, i32 1)\l  %127 = tail call double @llvm.amdgcn.trig.preop.f64(double %103, i32 2)\l  %128 = fcmp oge double %103, 0x7B00000000000000\l  %129 = tail call double @llvm.amdgcn.ldexp.f64(double %103, i32 -128)\l  %130 = select i1 %128, double %129, double %103\l  %131 = fmul double %127, %130\l  %132 = fneg double %131\l  %133 = tail call double @llvm.fma.f64(double %127, double %130, double %132)\l  %134 = fmul double %126, %130\l  %135 = fneg double %134\l  %136 = tail call double @llvm.fma.f64(double %126, double %130, double %135)\l  %137 = fmul double %125, %130\l  %138 = fneg double %137\l  %139 = tail call double @llvm.fma.f64(double %125, double %130, double %138)\l  %140 = fadd double %134, %139\l  %141 = fsub double %140, %134\l  %142 = fsub double %140, %141\l  %143 = fsub double %139, %141\l  %144 = fsub double %134, %142\l  %145 = fadd double %143, %144\l  %146 = fadd double %131, %136\l  %147 = fsub double %146, %131\l  %148 = fsub double %146, %147\l  %149 = fsub double %136, %147\l  %150 = fsub double %131, %148\l  %151 = fadd double %149, %150\l  %152 = fadd double %146, %145\l  %153 = fsub double %152, %146\l  %154 = fsub double %152, %153\l  %155 = fsub double %145, %153\l  %156 = fsub double %146, %154\l  %157 = fadd double %155, %156\l  %158 = fadd double %151, %157\l  %159 = fadd double %133, %158\l  %160 = fadd double %137, %140\l  %161 = fsub double %160, %137\l  %162 = fsub double %140, %161\l  %163 = fadd double %162, %152\l  %164 = fsub double %163, %162\l  %165 = fsub double %152, %164\l  %166 = fadd double %165, %159\l  %167 = tail call double @llvm.amdgcn.ldexp.f64(double %160, i32 -2)\l  %168 = tail call double @llvm.amdgcn.fract.f64(double %167)\l  %169 = tail call i1 @llvm.amdgcn.class.f64(double %167, i32 516)\l  %170 = select i1 %169, double 0.000000e+00, double %168\l  %171 = tail call double @llvm.amdgcn.ldexp.f64(double %170, i32 2)\l  %172 = fadd double %171, %163\l  %173 = fcmp olt double %172, 0.000000e+00\l  %174 = select i1 %173, double 4.000000e+00, double 0.000000e+00\l  %175 = fadd double %171, %174\l  %176 = fadd double %163, %175\l  %177 = fptosi double %176 to i32\l  %178 = sitofp i32 %177 to double\l  %179 = fsub double %175, %178\l  %180 = fadd double %163, %179\l  %181 = fsub double %180, %179\l  %182 = fsub double %163, %181\l  %183 = fadd double %166, %182\l  %184 = fcmp oge double %180, 5.000000e-01\l  %185 = zext i1 %184 to i32\l  %186 = add nsw i32 %185, %177\l  %187 = select i1 %184, double 1.000000e+00, double 0.000000e+00\l  %188 = fsub double %180, %187\l  %189 = fadd double %188, %183\l  %190 = fsub double %189, %188\l  %191 = fsub double %183, %190\l  %192 = fmul double %189, 0x3FF921FB54442D18\l  %193 = fneg double %192\l  %194 = tail call double @llvm.fma.f64(double %189, double\l... 0x3FF921FB54442D18, double %193)\l  %195 = tail call double @llvm.fma.f64(double %189, double\l... 0x3C91A62633145C07, double %194)\l  %196 = tail call double @llvm.fma.f64(double %191, double\l... 0x3FF921FB54442D18, double %195)\l  %197 = fadd double %192, %196\l  %198 = fsub double %197, %192\l  %199 = fsub double %196, %198\l  br label %200\l}"];
	Node0x603c3b0 -> Node0x6039e00;
	Node0x6039e00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%200:\l200:                                              \l  %201 = phi double [ %122, %105 ], [ %199, %124 ]\l  %202 = phi double [ %120, %105 ], [ %197, %124 ]\l  %203 = phi i32 [ %123, %105 ], [ %186, %124 ]\l  %204 = fmul double %202, %202\l  %205 = fmul double %204, 5.000000e-01\l  %206 = fsub double 1.000000e+00, %205\l  %207 = fsub double 1.000000e+00, %206\l  %208 = fsub double %207, %205\l  %209 = fmul double %204, %204\l  %210 = tail call double @llvm.fma.f64(double %204, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %211 = tail call double @llvm.fma.f64(double %204, double %210, double\l... 0xBE927E4FA17F65F6)\l  %212 = tail call double @llvm.fma.f64(double %204, double %211, double\l... 0x3EFA01A019F4EC90)\l  %213 = tail call double @llvm.fma.f64(double %204, double %212, double\l... 0xBF56C16C16C16967)\l  %214 = tail call double @llvm.fma.f64(double %204, double %213, double\l... 0x3FA5555555555555)\l  %215 = fneg double %201\l  %216 = tail call double @llvm.fma.f64(double %202, double %215, double %208)\l  %217 = tail call double @llvm.fma.f64(double %209, double %214, double %216)\l  %218 = fadd double %206, %217\l  %219 = tail call double @llvm.fma.f64(double %204, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %220 = tail call double @llvm.fma.f64(double %204, double %219, double\l... 0x3EC71DE3796CDE01)\l  %221 = tail call double @llvm.fma.f64(double %204, double %220, double\l... 0xBF2A01A019E83E5C)\l  %222 = tail call double @llvm.fma.f64(double %204, double %221, double\l... 0x3F81111111110BB3)\l  %223 = fneg double %204\l  %224 = fmul double %202, %223\l  %225 = fmul double %201, 5.000000e-01\l  %226 = tail call double @llvm.fma.f64(double %224, double %222, double %225)\l  %227 = tail call double @llvm.fma.f64(double %204, double %226, double %215)\l  %228 = tail call double @llvm.fma.f64(double %224, double\l... 0xBFC5555555555555, double %227)\l  %229 = fsub double %202, %228\l  %230 = shl i32 %203, 30\l  %231 = and i32 %230, -2147483648\l  %232 = and i32 %203, 1\l  %233 = icmp eq i32 %232, 0\l  %234 = select i1 %233, double %229, double %218\l  %235 = bitcast double %234 to \<2 x i32\>\l  %236 = bitcast double %102 to \<2 x i32\>\l  %237 = extractelement \<2 x i32\> %236, i64 1\l  %238 = and i32 %237, -2147483648\l  %239 = extractelement \<2 x i32\> %235, i64 1\l  %240 = xor i32 %238, %239\l  %241 = xor i32 %240, %231\l  %242 = insertelement \<2 x i32\> %235, i32 %241, i64 1\l  %243 = fneg double %229\l  %244 = select i1 %233, double %218, double %243\l  %245 = bitcast double %244 to \<2 x i32\>\l  %246 = extractelement \<2 x i32\> %245, i64 1\l  %247 = xor i32 %246, %231\l  %248 = insertelement \<2 x i32\> %245, i32 %247, i64 1\l  %249 = tail call i1 @llvm.amdgcn.class.f64(double %102, i32 504)\l  %250 = select i1 %249, \<2 x i32\> %242, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %251 = select i1 %249, \<2 x i32\> %248, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %252 = bitcast \<2 x i32\> %250 to double\l  %253 = bitcast \<2 x i32\> %251 to double\l  %254 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %3, i64 %90, i32 0, i32 0, i32 0\l  %255 = load \<2 x double\>, \<2 x double\> addrspace(1)* %254, align 16,\l... !amdgpu.noclobber !5\l  %256 = extractelement \<2 x double\> %255, i64 0\l  %257 = fmul contract double %256, %253\l  %258 = extractelement \<2 x double\> %255, i64 1\l  %259 = fmul contract double %258, %252\l  %260 = fsub contract double %257, %259\l  %261 = fmul contract double %258, %253\l  %262 = fmul contract double %256, %252\l  %263 = fadd contract double %261, %262\l  %264 = fadd contract double %87, %260\l  %265 = fadd contract double %88, %263\l  %266 = add nuw nsw i32 %89, 1\l  %267 = icmp eq i32 %266, %5\l  br i1 %267, label %66, label %86, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x6039e00:s0 -> Node0x6037460;
	Node0x6039e00:s1 -> Node0x60373d0;
	Node0x6037170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%268:\l268:                                              \l  ret void\l}"];
}
