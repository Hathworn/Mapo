digraph "CFG for '_Z12AutoRegPinkKPdS_S_S_S_S_ii' function" {
	label="CFG for '_Z12AutoRegPinkKPdS_S_S_S_S_ii' function";

	Node0x4af78d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%8:\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = mul i32 %14, %13\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = icmp slt i32 %17, %6\l  br i1 %18, label %19, label %217\l|{<s0>T|<s1>F}}"];
	Node0x4af78d0:s0 -> Node0x4af9800;
	Node0x4af78d0:s1 -> Node0x4af9890;
	Node0x4af9800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%19:\l19:                                               \l  %20 = icmp sgt i32 %7, 0\l  br i1 %20, label %21, label %151\l|{<s0>T|<s1>F}}"];
	Node0x4af9800:s0 -> Node0x4af9a60;
	Node0x4af9800:s1 -> Node0x4af9ab0;
	Node0x4af9a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%21:\l21:                                               \l  %22 = sext i32 %17 to i64\l  %23 = getelementptr inbounds double, double addrspace(1)* %0, i64 %22\l  %24 = getelementptr inbounds double, double addrspace(1)* %1, i64 %22\l  %25 = and i32 %7, 3\l  %26 = icmp ult i32 %7, 4\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4af9a60:s0 -> Node0x4af9f20;
	Node0x4af9a60:s1 -> Node0x4af9f70;
	Node0x4af9f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%27:\l27:                                               \l  %28 = and i32 %7, -4\l  br label %60\l}"];
	Node0x4af9f70 -> Node0x4afa170;
	Node0x4af9f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %21 ], [ %130, %60 ]\l  %31 = icmp eq i32 %25, 0\l  br i1 %31, label %54, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4af9f20:s0 -> Node0x4afa3a0;
	Node0x4af9f20:s1 -> Node0x4afa430;
	Node0x4afa430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%32:\l32:                                               \l  %33 = phi i32 [ %51, %32 ], [ %30, %29 ]\l  %34 = phi i32 [ %52, %32 ], [ 0, %29 ]\l  %35 = load double, double addrspace(1)* %23, align 8, !tbaa !7\l  %36 = load double, double addrspace(1)* %24, align 8, !tbaa !7\l  %37 = fadd contract double %35, %36\l  %38 = zext i32 %33 to i64\l  %39 = getelementptr inbounds double, double addrspace(1)* %4, i64 %38\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7\l  %41 = fmul contract double %37, %40\l  %42 = getelementptr inbounds double, double addrspace(1)* %3, i64 %38\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !7\l  %44 = mul nsw i32 %33, %6\l  %45 = add nsw i32 %44, %17\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %5, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !7\l  %49 = fmul contract double %43, %48\l  %50 = fsub contract double %41, %49\l  store double %50, double addrspace(1)* %47, align 8, !tbaa !7\l  %51 = add nuw nsw i32 %33, 1\l  %52 = add i32 %34, 1\l  %53 = icmp eq i32 %52, %25\l  br i1 %53, label %54, label %32, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4afa430:s0 -> Node0x4afa3a0;
	Node0x4afa430:s1 -> Node0x4afa430;
	Node0x4afa3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%54:\l54:                                               \l  br i1 %20, label %55, label %151\l|{<s0>T|<s1>F}}"];
	Node0x4afa3a0:s0 -> Node0x4afbbf0;
	Node0x4afa3a0:s1 -> Node0x4af9ab0;
	Node0x4afbbf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%55:\l55:                                               \l  %56 = and i32 %7, 7\l  %57 = icmp ult i32 %7, 8\l  br i1 %57, label %133, label %58\l|{<s0>T|<s1>F}}"];
	Node0x4afbbf0:s0 -> Node0x4afbe10;
	Node0x4afbbf0:s1 -> Node0x4afbe60;
	Node0x4afbe60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%58:\l58:                                               \l  %59 = and i32 %7, -8\l  br label %155\l}"];
	Node0x4afbe60 -> Node0x4afc060;
	Node0x4afa170 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%60:\l60:                                               \l  %61 = phi i32 [ 0, %27 ], [ %130, %60 ]\l  %62 = phi i32 [ 0, %27 ], [ %131, %60 ]\l  %63 = load double, double addrspace(1)* %23, align 8, !tbaa !7\l  %64 = load double, double addrspace(1)* %24, align 8, !tbaa !7\l  %65 = fadd contract double %63, %64\l  %66 = zext i32 %61 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %4, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !7\l  %69 = fmul contract double %65, %68\l  %70 = getelementptr inbounds double, double addrspace(1)* %3, i64 %66\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !7\l  %72 = mul nsw i32 %61, %6\l  %73 = add nsw i32 %72, %17\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds double, double addrspace(1)* %5, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7\l  %77 = fmul contract double %71, %76\l  %78 = fsub contract double %69, %77\l  store double %78, double addrspace(1)* %75, align 8, !tbaa !7\l  %79 = or i32 %61, 1\l  %80 = load double, double addrspace(1)* %23, align 8, !tbaa !7\l  %81 = load double, double addrspace(1)* %24, align 8, !tbaa !7\l  %82 = fadd contract double %80, %81\l  %83 = zext i32 %79 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %4, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7\l  %86 = fmul contract double %82, %85\l  %87 = getelementptr inbounds double, double addrspace(1)* %3, i64 %83\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7\l  %89 = mul nsw i32 %79, %6\l  %90 = add nsw i32 %89, %17\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds double, double addrspace(1)* %5, i64 %91\l  %93 = load double, double addrspace(1)* %92, align 8, !tbaa !7\l  %94 = fmul contract double %88, %93\l  %95 = fsub contract double %86, %94\l  store double %95, double addrspace(1)* %92, align 8, !tbaa !7\l  %96 = or i32 %61, 2\l  %97 = load double, double addrspace(1)* %23, align 8, !tbaa !7\l  %98 = load double, double addrspace(1)* %24, align 8, !tbaa !7\l  %99 = fadd contract double %97, %98\l  %100 = zext i32 %96 to i64\l  %101 = getelementptr inbounds double, double addrspace(1)* %4, i64 %100\l  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !7\l  %103 = fmul contract double %99, %102\l  %104 = getelementptr inbounds double, double addrspace(1)* %3, i64 %100\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !7\l  %106 = mul nsw i32 %96, %6\l  %107 = add nsw i32 %106, %17\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds double, double addrspace(1)* %5, i64 %108\l  %110 = load double, double addrspace(1)* %109, align 8, !tbaa !7\l  %111 = fmul contract double %105, %110\l  %112 = fsub contract double %103, %111\l  store double %112, double addrspace(1)* %109, align 8, !tbaa !7\l  %113 = or i32 %61, 3\l  %114 = load double, double addrspace(1)* %23, align 8, !tbaa !7\l  %115 = load double, double addrspace(1)* %24, align 8, !tbaa !7\l  %116 = fadd contract double %114, %115\l  %117 = zext i32 %113 to i64\l  %118 = getelementptr inbounds double, double addrspace(1)* %4, i64 %117\l  %119 = load double, double addrspace(1)* %118, align 8, !tbaa !7\l  %120 = fmul contract double %116, %119\l  %121 = getelementptr inbounds double, double addrspace(1)* %3, i64 %117\l  %122 = load double, double addrspace(1)* %121, align 8, !tbaa !7\l  %123 = mul nsw i32 %113, %6\l  %124 = add nsw i32 %123, %17\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds double, double addrspace(1)* %5, i64 %125\l  %127 = load double, double addrspace(1)* %126, align 8, !tbaa !7\l  %128 = fmul contract double %122, %127\l  %129 = fsub contract double %120, %128\l  store double %129, double addrspace(1)* %126, align 8, !tbaa !7\l  %130 = add nuw nsw i32 %61, 4\l  %131 = add i32 %62, 4\l  %132 = icmp eq i32 %131, %28\l  br i1 %132, label %29, label %60, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4afa170:s0 -> Node0x4af9f20;
	Node0x4afa170:s1 -> Node0x4afa170;
	Node0x4afbe10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%133:\l133:                                              \l  %134 = phi double [ undef, %55 ], [ %213, %155 ]\l  %135 = phi i32 [ 0, %55 ], [ %214, %155 ]\l  %136 = phi double [ 0.000000e+00, %55 ], [ %213, %155 ]\l  %137 = icmp eq i32 %56, 0\l  br i1 %137, label %151, label %138\l|{<s0>T|<s1>F}}"];
	Node0x4afbe10:s0 -> Node0x4af9ab0;
	Node0x4afbe10:s1 -> Node0x4b002a0;
	Node0x4b002a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%138:\l138:                                              \l  %139 = phi i32 [ %148, %138 ], [ %135, %133 ]\l  %140 = phi double [ %147, %138 ], [ %136, %133 ]\l  %141 = phi i32 [ %149, %138 ], [ 0, %133 ]\l  %142 = mul nsw i32 %139, %6\l  %143 = add nsw i32 %142, %17\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds double, double addrspace(1)* %5, i64 %144\l  %146 = load double, double addrspace(1)* %145, align 8, !tbaa !7\l  %147 = fadd contract double %140, %146\l  %148 = add nuw nsw i32 %139, 1\l  %149 = add i32 %141, 1\l  %150 = icmp eq i32 %149, %56\l  br i1 %150, label %151, label %138, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4b002a0:s0 -> Node0x4af9ab0;
	Node0x4b002a0:s1 -> Node0x4b002a0;
	Node0x4af9ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%151:\l151:                                              \l  %152 = phi double [ 0.000000e+00, %54 ], [ 0.000000e+00, %19 ], [ %134, %133\l... ], [ %147, %138 ]\l  %153 = sext i32 %17 to i64\l  %154 = getelementptr inbounds double, double addrspace(1)* %2, i64 %153\l  store double %152, double addrspace(1)* %154, align 8, !tbaa !7\l  br label %217\l}"];
	Node0x4af9ab0 -> Node0x4af9890;
	Node0x4afc060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%155:\l155:                                              \l  %156 = phi i32 [ 0, %58 ], [ %214, %155 ]\l  %157 = phi double [ 0.000000e+00, %58 ], [ %213, %155 ]\l  %158 = phi i32 [ 0, %58 ], [ %215, %155 ]\l  %159 = mul nsw i32 %156, %6\l  %160 = add nsw i32 %159, %17\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds double, double addrspace(1)* %5, i64 %161\l  %163 = load double, double addrspace(1)* %162, align 8, !tbaa !7\l  %164 = fadd contract double %157, %163\l  %165 = or i32 %156, 1\l  %166 = mul nsw i32 %165, %6\l  %167 = add nsw i32 %166, %17\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds double, double addrspace(1)* %5, i64 %168\l  %170 = load double, double addrspace(1)* %169, align 8, !tbaa !7\l  %171 = fadd contract double %164, %170\l  %172 = or i32 %156, 2\l  %173 = mul nsw i32 %172, %6\l  %174 = add nsw i32 %173, %17\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds double, double addrspace(1)* %5, i64 %175\l  %177 = load double, double addrspace(1)* %176, align 8, !tbaa !7\l  %178 = fadd contract double %171, %177\l  %179 = or i32 %156, 3\l  %180 = mul nsw i32 %179, %6\l  %181 = add nsw i32 %180, %17\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds double, double addrspace(1)* %5, i64 %182\l  %184 = load double, double addrspace(1)* %183, align 8, !tbaa !7\l  %185 = fadd contract double %178, %184\l  %186 = or i32 %156, 4\l  %187 = mul nsw i32 %186, %6\l  %188 = add nsw i32 %187, %17\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds double, double addrspace(1)* %5, i64 %189\l  %191 = load double, double addrspace(1)* %190, align 8, !tbaa !7\l  %192 = fadd contract double %185, %191\l  %193 = or i32 %156, 5\l  %194 = mul nsw i32 %193, %6\l  %195 = add nsw i32 %194, %17\l  %196 = sext i32 %195 to i64\l  %197 = getelementptr inbounds double, double addrspace(1)* %5, i64 %196\l  %198 = load double, double addrspace(1)* %197, align 8, !tbaa !7\l  %199 = fadd contract double %192, %198\l  %200 = or i32 %156, 6\l  %201 = mul nsw i32 %200, %6\l  %202 = add nsw i32 %201, %17\l  %203 = sext i32 %202 to i64\l  %204 = getelementptr inbounds double, double addrspace(1)* %5, i64 %203\l  %205 = load double, double addrspace(1)* %204, align 8, !tbaa !7\l  %206 = fadd contract double %199, %205\l  %207 = or i32 %156, 7\l  %208 = mul nsw i32 %207, %6\l  %209 = add nsw i32 %208, %17\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds double, double addrspace(1)* %5, i64 %210\l  %212 = load double, double addrspace(1)* %211, align 8, !tbaa !7\l  %213 = fadd contract double %206, %212\l  %214 = add nuw nsw i32 %156, 8\l  %215 = add i32 %158, 8\l  %216 = icmp eq i32 %215, %59\l  br i1 %216, label %133, label %155, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4afc060:s0 -> Node0x4afbe10;
	Node0x4afc060:s1 -> Node0x4afc060;
	Node0x4af9890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%217:\l217:                                              \l  ret void\l}"];
}
