digraph "CFG for '_Z26Subsample_Bilinear_ushort4P13__hip_textureP15HIP_vector_typeItLj4EEiiiii' function" {
	label="CFG for '_Z26Subsample_Bilinear_ushort4P13__hip_textureP15HIP_vector_typeItLj4EEiiiii' function";

	Node0x6003f50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %3\l  %26 = icmp slt i32 %16, %2\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %182\l|{<s0>T|<s1>F}}"];
	Node0x6003f50:s0 -> Node0x6007940;
	Node0x6003f50:s1 -> Node0x60079d0;
	Node0x6007940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%28:\l28:                                               \l  %29 = sitofp i32 %5 to float\l  %30 = sitofp i32 %2 to float\l  %31 = fdiv contract float %29, %30\l  %32 = sitofp i32 %6 to float\l  %33 = sitofp i32 %3 to float\l  %34 = fdiv contract float %32, %33\l  %35 = sitofp i32 %16 to float\l  %36 = fadd contract float %35, 5.000000e-01\l  %37 = fmul contract float %31, %36\l  %38 = sitofp i32 %24 to float\l  %39 = fadd contract float %38, 5.000000e-01\l  %40 = fmul contract float %34, %39\l  %41 = fadd contract float %31, -1.000000e+00\l  %42 = fmul contract float %41, 5.000000e-01\l  %43 = tail call float @llvm.maxnum.f32(float %42, float 0.000000e+00)\l  %44 = tail call float @llvm.minnum.f32(float %43, float 1.000000e+00)\l  %45 = fadd contract float %34, -1.000000e+00\l  %46 = fmul contract float %45, 5.000000e-01\l  %47 = tail call float @llvm.maxnum.f32(float %46, float 0.000000e+00)\l  %48 = tail call float @llvm.minnum.f32(float %47, float 1.000000e+00)\l  %49 = fadd contract float %44, 5.000000e-01\l  %50 = fdiv contract float %44, %49\l  %51 = fadd contract float %48, 5.000000e-01\l  %52 = fdiv contract float %48, %51\l  %53 = fsub contract float %37, %50\l  %54 = fsub contract float %40, %52\l  %55 = bitcast %struct.__hip_texture addrspace(1)* %0 to i32 addrspace(1)*\l  %56 = addrspacecast i32 addrspace(1)* %55 to i32 addrspace(4)*\l  %57 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 12\l  %58 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 10\l  %59 = load i32, i32 addrspace(4)* %58, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %60 = uitofp i32 %59 to float\l  %61 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 2\l  %62 = load i32, i32 addrspace(4)* %61, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %63 = lshr i32 %62, 14\l  %64 = and i32 %63, 16383\l  %65 = add nuw nsw i32 %64, 1\l  %66 = uitofp i32 %65 to float\l  %67 = load i32, i32 addrspace(4)* %57, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %68 = and i32 %67, 32768\l  %69 = icmp eq i32 %68, 0\l  %70 = select i1 %69, float %60, float 1.000000e+00\l  %71 = select i1 %69, float %66, float 1.000000e+00\l  %72 = getelementptr inbounds i32, i32 addrspace(4)* %56, i64 14\l  %73 = load i32, i32 addrspace(4)* %72, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %74 = and i32 %73, 1048576\l  %75 = icmp eq i32 %74, 0\l  %76 = bitcast i32 addrspace(4)* %57 to \<4 x i32\> addrspace(4)*\l  %77 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %76, align 16, !tbaa !11,\l... !amdgpu.noclobber !5\l  %78 = bitcast %struct.__hip_texture addrspace(1)* %0 to \<8 x i32\>\l... addrspace(1)*\l  %79 = addrspacecast \<8 x i32\> addrspace(1)* %78 to \<8 x i32\> addrspace(4)*\l  %80 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %79, align 32, !tbaa !11,\l... !amdgpu.noclobber !5\l  %81 = tail call float @llvm.amdgcn.rcp.f32(float %71)\l  %82 = fmul float %54, %71\l  %83 = tail call float @llvm.floor.f32(float %82)\l  %84 = fmul float %81, %83\l  %85 = select i1 %75, float %84, float %54\l  %86 = tail call float @llvm.amdgcn.rcp.f32(float %70)\l  %87 = fmul float %53, %70\l  %88 = tail call float @llvm.floor.f32(float %87)\l  %89 = fmul float %86, %88\l  %90 = select i1 %75, float %89, float %53\l  %91 = tail call \<4 x float\> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32\l... 15, float %90, float %85, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32\l... 0)\l  %92 = bitcast \<4 x float\> %91 to \<8 x i16\>\l  %93 = shufflevector \<8 x i16\> %92, \<8 x i16\> poison, \<4 x i32\> \<i32 0, i32\l... 2, i32 undef, i32 undef\>\l  %94 = shufflevector \<8 x i16\> %92, \<8 x i16\> poison, \<2 x i32\> \<i32 4, i32 6\>\l  %95 = bitcast \<4 x i16\> %93 to \<2 x i32\>\l  %96 = extractelement \<2 x i32\> %95, i64 0\l  %97 = bitcast \<2 x i16\> %94 to i32\l  %98 = fadd contract float %50, %37\l  %99 = fmul float %98, %70\l  %100 = tail call float @llvm.floor.f32(float %99)\l  %101 = fmul float %86, %100\l  %102 = select i1 %75, float %101, float %98\l  %103 = tail call \<4 x float\> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32\l... 15, float %102, float %85, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32\l... 0)\l  %104 = bitcast \<4 x float\> %103 to \<8 x i16\>\l  %105 = shufflevector \<8 x i16\> %104, \<8 x i16\> poison, \<4 x i32\> \<i32 0, i32\l... 2, i32 undef, i32 undef\>\l  %106 = shufflevector \<8 x i16\> %104, \<8 x i16\> poison, \<2 x i32\> \<i32 4, i32\l... 6\>\l  %107 = bitcast \<4 x i16\> %105 to \<2 x i32\>\l  %108 = extractelement \<2 x i32\> %107, i64 0\l  %109 = bitcast \<2 x i16\> %106 to i32\l  %110 = fadd contract float %52, %40\l  %111 = fmul float %110, %71\l  %112 = tail call float @llvm.floor.f32(float %111)\l  %113 = fmul float %81, %112\l  %114 = select i1 %75, float %113, float %110\l  %115 = tail call \<4 x float\> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32\l... 15, float %90, float %114, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0, i32\l... 0)\l  %116 = bitcast \<4 x float\> %115 to \<8 x i16\>\l  %117 = shufflevector \<8 x i16\> %116, \<8 x i16\> poison, \<4 x i32\> \<i32 0, i32\l... 2, i32 undef, i32 undef\>\l  %118 = shufflevector \<8 x i16\> %116, \<8 x i16\> poison, \<2 x i32\> \<i32 4, i32\l... 6\>\l  %119 = bitcast \<4 x i16\> %117 to \<2 x i32\>\l  %120 = extractelement \<2 x i32\> %119, i64 0\l  %121 = bitcast \<2 x i16\> %118 to i32\l  %122 = tail call \<4 x float\> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32\l... 15, float %102, float %114, \<8 x i32\> %80, \<4 x i32\> %77, i1 false, i32 0,\l... i32 0)\l  %123 = bitcast \<4 x float\> %122 to \<8 x i16\>\l  %124 = shufflevector \<8 x i16\> %123, \<8 x i16\> poison, \<4 x i32\> \<i32 0, i32\l... 2, i32 undef, i32 undef\>\l  %125 = shufflevector \<8 x i16\> %123, \<8 x i16\> poison, \<2 x i32\> \<i32 4, i32\l... 6\>\l  %126 = bitcast \<4 x i16\> %124 to \<2 x i32\>\l  %127 = extractelement \<2 x i32\> %126, i64 0\l  %128 = bitcast \<2 x i16\> %125 to i32\l  %129 = and i32 %96, 65535\l  %130 = and i32 %108, 65535\l  %131 = and i32 %120, 65535\l  %132 = and i32 %127, 65535\l  %133 = add nuw nsw i32 %129, 2\l  %134 = add nuw nsw i32 %133, %130\l  %135 = add nuw nsw i32 %134, %131\l  %136 = add nuw nsw i32 %135, %132\l  %137 = lshr i32 %136, 2\l  %138 = lshr i32 %96, 16\l  %139 = lshr i32 %108, 16\l  %140 = lshr i32 %120, 16\l  %141 = lshr i32 %127, 16\l  %142 = add nuw nsw i32 %138, 2\l  %143 = add nuw nsw i32 %142, %139\l  %144 = add nuw nsw i32 %143, %140\l  %145 = add nuw nsw i32 %144, %141\l  %146 = lshr i32 %145, 2\l  %147 = and i32 %97, 65535\l  %148 = and i32 %109, 65535\l  %149 = and i32 %121, 65535\l  %150 = and i32 %128, 65535\l  %151 = add nuw nsw i32 %147, 2\l  %152 = add nuw nsw i32 %151, %148\l  %153 = add nuw nsw i32 %152, %149\l  %154 = add nuw nsw i32 %153, %150\l  %155 = lshr i32 %154, 2\l  %156 = lshr i32 %97, 16\l  %157 = lshr i32 %109, 16\l  %158 = lshr i32 %121, 16\l  %159 = lshr i32 %128, 16\l  %160 = add nuw nsw i32 %156, 2\l  %161 = add nuw nsw i32 %160, %157\l  %162 = add nuw nsw i32 %161, %158\l  %163 = add nuw nsw i32 %162, %159\l  %164 = lshr i32 %163, 2\l  %165 = trunc i32 %137 to i16\l  %166 = trunc i32 %146 to i16\l  %167 = trunc i32 %155 to i16\l  %168 = trunc i32 %164 to i16\l  %169 = insertelement \<4 x i16\> undef, i16 %165, i64 0\l  %170 = insertelement \<4 x i16\> %169, i16 %166, i64 1\l  %171 = insertelement \<2 x i16\> undef, i16 %167, i64 0\l  %172 = insertelement \<2 x i16\> %171, i16 %168, i64 1\l  %173 = bitcast \<4 x i16\> %170 to \<2 x i32\>\l  %174 = extractelement \<2 x i32\> %173, i64 0\l  %175 = mul nsw i32 %24, %4\l  %176 = add nsw i32 %175, %16\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %177\l  %179 = bitcast %struct.HIP_vector_type addrspace(1)* %178 to i32\l... addrspace(1)*\l  store i32 %174, i32 addrspace(1)* %179, align 8\l  %180 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %1, i64 %177, i32 0, i32 0, i32 0, i64 2\l  %181 = bitcast i16 addrspace(1)* %180 to \<2 x i16\> addrspace(1)*\l  store \<2 x i16\> %172, \<2 x i16\> addrspace(1)* %181, align 4\l  br label %182\l}"];
	Node0x6007940 -> Node0x60079d0;
	Node0x60079d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%182:\l182:                                              \l  ret void\l}"];
}
