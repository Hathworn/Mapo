digraph "CFG for '_Z19kernelFeedForward1bPfiS_iS_' function" {
	label="CFG for '_Z19kernelFeedForward1bPfiS_iS_' function";

	Node0x6359810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = zext i32 %14 to i64\l  %16 = getelementptr inbounds float, float addrspace(1)* %0, i64 %15\l  store float 0.000000e+00, float addrspace(1)* %16, align 4, !tbaa !7\l  %17 = icmp sgt i32 %1, 0\l  br i1 %17, label %18, label %141\l|{<s0>T|<s1>F}}"];
	Node0x6359810:s0 -> Node0x635c490;
	Node0x6359810:s1 -> Node0x635c520;
	Node0x635c490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = mul i32 %13, %1\l  %20 = add i32 %19, %3\l  %21 = mul i32 %6, %1\l  %22 = and i32 %1, 7\l  %23 = icmp ult i32 %1, 8\l  br i1 %23, label %120, label %24\l|{<s0>T|<s1>F}}"];
	Node0x635c490:s0 -> Node0x635c990;
	Node0x635c490:s1 -> Node0x635c9e0;
	Node0x635c9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l24:                                               \l  %25 = and i32 %1, -8\l  br label %26\l}"];
	Node0x635c9e0 -> Node0x635cbe0;
	Node0x635cbe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%26:\l26:                                               \l  %27 = phi float [ 0.000000e+00, %24 ], [ %116, %26 ]\l  %28 = phi i32 [ 0, %24 ], [ %117, %26 ]\l  %29 = phi i32 [ 0, %24 ], [ %118, %26 ]\l  %30 = add i32 %20, %28\l  %31 = zext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !7\l  %34 = add i32 %28, %21\l  %35 = zext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %4, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !7\l  %38 = fmul contract float %33, %37\l  %39 = fadd contract float %27, %38\l  store float %39, float addrspace(1)* %16, align 4, !tbaa !7\l  %40 = or i32 %28, 1\l  %41 = add i32 %20, %40\l  %42 = zext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %2, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = add i32 %40, %21\l  %46 = zext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %4, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7\l  %49 = fmul contract float %44, %48\l  %50 = fadd contract float %39, %49\l  store float %50, float addrspace(1)* %16, align 4, !tbaa !7\l  %51 = or i32 %28, 2\l  %52 = add i32 %20, %51\l  %53 = zext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %2, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7\l  %56 = add i32 %51, %21\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7\l  %60 = fmul contract float %55, %59\l  %61 = fadd contract float %50, %60\l  store float %61, float addrspace(1)* %16, align 4, !tbaa !7\l  %62 = or i32 %28, 3\l  %63 = add i32 %20, %62\l  %64 = zext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7\l  %67 = add i32 %62, %21\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %4, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7\l  %71 = fmul contract float %66, %70\l  %72 = fadd contract float %61, %71\l  store float %72, float addrspace(1)* %16, align 4, !tbaa !7\l  %73 = or i32 %28, 4\l  %74 = add i32 %20, %73\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7\l  %78 = add i32 %73, %21\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %4, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7\l  %82 = fmul contract float %77, %81\l  %83 = fadd contract float %72, %82\l  store float %83, float addrspace(1)* %16, align 4, !tbaa !7\l  %84 = or i32 %28, 5\l  %85 = add i32 %20, %84\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %2, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = add i32 %84, %21\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %4, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7\l  %93 = fmul contract float %88, %92\l  %94 = fadd contract float %83, %93\l  store float %94, float addrspace(1)* %16, align 4, !tbaa !7\l  %95 = or i32 %28, 6\l  %96 = add i32 %20, %95\l  %97 = zext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %2, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7\l  %100 = add i32 %95, %21\l  %101 = zext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %4, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7\l  %104 = fmul contract float %99, %103\l  %105 = fadd contract float %94, %104\l  store float %105, float addrspace(1)* %16, align 4, !tbaa !7\l  %106 = or i32 %28, 7\l  %107 = add i32 %20, %106\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %2, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7\l  %111 = add i32 %106, %21\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %4, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7\l  %115 = fmul contract float %110, %114\l  %116 = fadd contract float %105, %115\l  store float %116, float addrspace(1)* %16, align 4, !tbaa !7\l  %117 = add nuw nsw i32 %28, 8\l  %118 = add i32 %29, 8\l  %119 = icmp eq i32 %118, %25\l  br i1 %119, label %120, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x635cbe0:s0 -> Node0x635c990;
	Node0x635cbe0:s1 -> Node0x635cbe0;
	Node0x635c990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%120:\l120:                                              \l  %121 = phi float [ 0.000000e+00, %18 ], [ %116, %26 ]\l  %122 = phi i32 [ 0, %18 ], [ %117, %26 ]\l  %123 = icmp eq i32 %22, 0\l  br i1 %123, label %141, label %124\l|{<s0>T|<s1>F}}"];
	Node0x635c990:s0 -> Node0x635c520;
	Node0x635c990:s1 -> Node0x63611b0;
	Node0x63611b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%124:\l124:                                              \l  %125 = phi float [ %137, %124 ], [ %121, %120 ]\l  %126 = phi i32 [ %138, %124 ], [ %122, %120 ]\l  %127 = phi i32 [ %139, %124 ], [ 0, %120 ]\l  %128 = add i32 %20, %126\l  %129 = zext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %2, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7\l  %132 = add i32 %126, %21\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %4, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7\l  %136 = fmul contract float %131, %135\l  %137 = fadd contract float %125, %136\l  store float %137, float addrspace(1)* %16, align 4, !tbaa !7\l  %138 = add nuw nsw i32 %126, 1\l  %139 = add i32 %127, 1\l  %140 = icmp eq i32 %139, %22\l  br i1 %140, label %141, label %124, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x63611b0:s0 -> Node0x635c520;
	Node0x63611b0:s1 -> Node0x63611b0;
	Node0x635c520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%141:\l141:                                              \l  ret void\l}"];
}
