digraph "CFG for '_Z5scalefiiPfi' function" {
	label="CFG for '_Z5scalefiiPfi' function";

	Node0x4cccf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp slt i32 %14, %1\l  br i1 %15, label %16, label %180\l|{<s0>T|<s1>F}}"];
	Node0x4cccf70:s0 -> Node0x4ccee70;
	Node0x4cccf70:s1 -> Node0x4ccef00;
	Node0x4ccee70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%16:\l16:                                               \l  %17 = mul nsw i32 %14, %4\l  %18 = sext i32 %17 to i64\l  %19 = getelementptr inbounds float, float addrspace(1)* %3, i64 %18\l  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %21 = icmp sgt i32 %2, 1\l  br i1 %21, label %22, label %51\l|{<s0>T|<s1>F}}"];
	Node0x4ccee70:s0 -> Node0x4ccfaf0;
	Node0x4ccee70:s1 -> Node0x4ccfb80;
	Node0x4ccfaf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%22:\l22:                                               \l  %23 = add i32 %2, -1\l  %24 = add i32 %2, -2\l  %25 = and i32 %23, 7\l  %26 = icmp ult i32 %24, 7\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4ccfaf0:s0 -> Node0x4ccff90;
	Node0x4ccfaf0:s1 -> Node0x4ccffe0;
	Node0x4ccffe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%27:\l27:                                               \l  %28 = and i32 %23, -8\l  br label %61\l}"];
	Node0x4ccffe0 -> Node0x4cd01e0;
	Node0x4ccff90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %22 ], [ %126, %61 ]\l  %31 = phi float [ undef, %22 ], [ %128, %61 ]\l  %32 = phi i32 [ 1, %22 ], [ %129, %61 ]\l  %33 = phi float [ %20, %22 ], [ %126, %61 ]\l  %34 = phi float [ %20, %22 ], [ %128, %61 ]\l  %35 = icmp eq i32 %25, 0\l  br i1 %35, label %51, label %36\l|{<s0>T|<s1>F}}"];
	Node0x4ccff90:s0 -> Node0x4ccfb80;
	Node0x4ccff90:s1 -> Node0x4cd0d10;
	Node0x4cd0d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%36:\l36:                                               \l  %37 = phi i32 [ %48, %36 ], [ %32, %29 ]\l  %38 = phi float [ %45, %36 ], [ %33, %29 ]\l  %39 = phi float [ %47, %36 ], [ %34, %29 ]\l  %40 = phi i32 [ %49, %36 ], [ 0, %29 ]\l  %41 = zext i32 %37 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %19, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = fcmp contract olt float %43, %38\l  %45 = select i1 %44, float %43, float %38\l  %46 = fcmp contract ogt float %43, %39\l  %47 = select i1 %46, float %43, float %39\l  %48 = add nuw nsw i32 %37, 1\l  %49 = add i32 %40, 1\l  %50 = icmp eq i32 %49, %25\l  br i1 %50, label %51, label %36, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4cd0d10:s0 -> Node0x4ccfb80;
	Node0x4cd0d10:s1 -> Node0x4cd0d10;
	Node0x4ccfb80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%51:\l51:                                               \l  %52 = phi float [ %20, %16 ], [ %31, %29 ], [ %47, %36 ]\l  %53 = phi float [ %20, %16 ], [ %30, %29 ], [ %45, %36 ]\l  %54 = fsub contract float %52, %53\l  %55 = icmp sgt i32 %2, 0\l  br i1 %55, label %56, label %180\l|{<s0>T|<s1>F}}"];
	Node0x4ccfb80:s0 -> Node0x4cd2280;
	Node0x4ccfb80:s1 -> Node0x4ccef00;
	Node0x4cd2280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%56:\l56:                                               \l  %57 = and i32 %2, 3\l  %58 = icmp ult i32 %2, 4\l  br i1 %58, label %165, label %59\l|{<s0>T|<s1>F}}"];
	Node0x4cd2280:s0 -> Node0x4cd24a0;
	Node0x4cd2280:s1 -> Node0x4cd24f0;
	Node0x4cd24f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%59:\l59:                                               \l  %60 = and i32 %2, -4\l  br label %132\l}"];
	Node0x4cd24f0 -> Node0x4cd2680;
	Node0x4cd01e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%61:\l61:                                               \l  %62 = phi i32 [ 1, %27 ], [ %129, %61 ]\l  %63 = phi float [ %20, %27 ], [ %126, %61 ]\l  %64 = phi float [ %20, %27 ], [ %128, %61 ]\l  %65 = phi i32 [ 0, %27 ], [ %130, %61 ]\l  %66 = zext i32 %62 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %19, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fcmp contract olt float %68, %63\l  %70 = select i1 %69, float %68, float %63\l  %71 = fcmp contract ogt float %68, %64\l  %72 = select i1 %71, float %68, float %64\l  %73 = add nuw nsw i32 %62, 1\l  %74 = zext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %19, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = fcmp contract olt float %76, %70\l  %78 = select i1 %77, float %76, float %70\l  %79 = fcmp contract ogt float %76, %72\l  %80 = select i1 %79, float %76, float %72\l  %81 = add nuw nsw i32 %62, 2\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %19, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fcmp contract olt float %84, %78\l  %86 = select i1 %85, float %84, float %78\l  %87 = fcmp contract ogt float %84, %80\l  %88 = select i1 %87, float %84, float %80\l  %89 = add nuw nsw i32 %62, 3\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %19, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = fcmp contract olt float %92, %86\l  %94 = select i1 %93, float %92, float %86\l  %95 = fcmp contract ogt float %92, %88\l  %96 = select i1 %95, float %92, float %88\l  %97 = add nuw nsw i32 %62, 4\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %19, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = fcmp contract olt float %100, %94\l  %102 = select i1 %101, float %100, float %94\l  %103 = fcmp contract ogt float %100, %96\l  %104 = select i1 %103, float %100, float %96\l  %105 = add nuw nsw i32 %62, 5\l  %106 = zext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %19, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fcmp contract olt float %108, %102\l  %110 = select i1 %109, float %108, float %102\l  %111 = fcmp contract ogt float %108, %104\l  %112 = select i1 %111, float %108, float %104\l  %113 = add nuw nsw i32 %62, 6\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %19, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = fcmp contract olt float %116, %110\l  %118 = select i1 %117, float %116, float %110\l  %119 = fcmp contract ogt float %116, %112\l  %120 = select i1 %119, float %116, float %112\l  %121 = add nuw nsw i32 %62, 7\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %19, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = fcmp contract olt float %124, %118\l  %126 = select i1 %125, float %124, float %118\l  %127 = fcmp contract ogt float %124, %120\l  %128 = select i1 %127, float %124, float %120\l  %129 = add nuw nsw i32 %62, 8\l  %130 = add i32 %65, 8\l  %131 = icmp eq i32 %130, %28\l  br i1 %131, label %29, label %61, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4cd01e0:s0 -> Node0x4ccff90;
	Node0x4cd01e0:s1 -> Node0x4cd01e0;
	Node0x4cd2680 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%132:\l132:                                              \l  %133 = phi i32 [ 0, %59 ], [ %162, %132 ]\l  %134 = phi i32 [ 0, %59 ], [ %163, %132 ]\l  %135 = zext i32 %133 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %19, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7\l  %138 = fsub contract float %137, %53\l  %139 = fmul contract float %138, %0\l  %140 = fdiv contract float %139, %54\l  store float %140, float addrspace(1)* %136, align 4, !tbaa !7\l  %141 = or i32 %133, 1\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %19, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7\l  %145 = fsub contract float %144, %53\l  %146 = fmul contract float %145, %0\l  %147 = fdiv contract float %146, %54\l  store float %147, float addrspace(1)* %143, align 4, !tbaa !7\l  %148 = or i32 %133, 2\l  %149 = zext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %19, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7\l  %152 = fsub contract float %151, %53\l  %153 = fmul contract float %152, %0\l  %154 = fdiv contract float %153, %54\l  store float %154, float addrspace(1)* %150, align 4, !tbaa !7\l  %155 = or i32 %133, 3\l  %156 = zext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %19, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7\l  %159 = fsub contract float %158, %53\l  %160 = fmul contract float %159, %0\l  %161 = fdiv contract float %160, %54\l  store float %161, float addrspace(1)* %157, align 4, !tbaa !7\l  %162 = add nuw nsw i32 %133, 4\l  %163 = add i32 %134, 4\l  %164 = icmp eq i32 %163, %60\l  br i1 %164, label %165, label %132, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4cd2680:s0 -> Node0x4cd24a0;
	Node0x4cd2680:s1 -> Node0x4cd2680;
	Node0x4cd24a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%165:\l165:                                              \l  %166 = phi i32 [ 0, %56 ], [ %162, %132 ]\l  %167 = icmp eq i32 %57, 0\l  br i1 %167, label %180, label %168\l|{<s0>T|<s1>F}}"];
	Node0x4cd24a0:s0 -> Node0x4ccef00;
	Node0x4cd24a0:s1 -> Node0x4cd6ff0;
	Node0x4cd6ff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%168:\l168:                                              \l  %169 = phi i32 [ %177, %168 ], [ %166, %165 ]\l  %170 = phi i32 [ %178, %168 ], [ 0, %165 ]\l  %171 = zext i32 %169 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %19, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !7\l  %174 = fsub contract float %173, %53\l  %175 = fmul contract float %174, %0\l  %176 = fdiv contract float %175, %54\l  store float %176, float addrspace(1)* %172, align 4, !tbaa !7\l  %177 = add nuw nsw i32 %169, 1\l  %178 = add i32 %170, 1\l  %179 = icmp eq i32 %178, %57\l  br i1 %179, label %180, label %168, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4cd6ff0:s0 -> Node0x4ccef00;
	Node0x4cd6ff0:s1 -> Node0x4cd6ff0;
	Node0x4ccef00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%180:\l180:                                              \l  ret void\l}"];
}
