digraph "CFG for '_Z10__randinityyP12hiprandState' function" {
	label="CFG for '_Z10__randinityyP12hiprandState' function";

	Node0x4ec9bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = add i32 %12, %5\l  %14 = sext i32 %13 to i64\l  %15 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %15) #4\l  %16 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %17 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %18 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %19 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %20 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %21 = trunc i64 %0 to i32\l  %22 = xor i32 %21, 746559103\l  %23 = lshr i64 %0, 32\l  %24 = trunc i64 %23 to i32\l  %25 = xor i32 %24, -1607034933\l  %26 = mul i32 %22, 1228688033\l  %27 = mul i32 %25, 2073658381\l  %28 = add i32 %26, 123456789\l  store i32 %28, i32 addrspace(5)* %16, align 8, !tbaa !7\l  %29 = xor i32 %26, 362436069\l  store i32 %29, i32 addrspace(5)* %17, align 4, !tbaa !7\l  %30 = add i32 %27, 521288629\l  store i32 %30, i32 addrspace(5)* %18, align 8, !tbaa !7\l  %31 = xor i32 %27, 88675123\l  store i32 %31, i32 addrspace(5)* %19, align 4, !tbaa !7\l  %32 = add i32 %26, 5783321\l  store i32 %32, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %33 = icmp eq i32 %13, 0\l  br i1 %33, label %211, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4ec9bc0:s0 -> Node0x4ecb8b0;
	Node0x4ec9bc0:s1 -> Node0x4ed0a50;
	Node0x4ed0a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%34:\l34:                                               \l  %35 = phi i64 [ %44, %42 ], [ %14, %3 ]\l  %36 = phi i32 [ %43, %42 ], [ 0, %3 ]\l  %37 = trunc i64 %35 to i32\l  %38 = and i32 %37, 3\l  %39 = icmp eq i32 %38, 0\l  br i1 %39, label %42, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4ed0a50:s0 -> Node0x4ed0b90;
	Node0x4ed0a50:s1 -> Node0x4ed0f80;
	Node0x4ed0f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%40:\l40:                                               \l  %41 = zext i32 %36 to i64\l  br label %46\l}"];
	Node0x4ed0f80 -> Node0x4ed1130;
	Node0x4ed0b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%42:\l42:                                               \l  %43 = add nuw nsw i32 %36, 1\l  %44 = lshr i64 %35, 2\l  %45 = icmp ult i64 %35, 4\l  br i1 %45, label %211, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4ed0b90:s0 -> Node0x4ecb8b0;
	Node0x4ed0b90:s1 -> Node0x4ed0a50;
	Node0x4ed1130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%46:\l46:                                               \l  %47 = phi i32 [ 0, %40 ], [ %209, %208 ]\l  br label %48\l}"];
	Node0x4ed1130 -> Node0x4ed1610;
	Node0x4ed1610 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %46 ], [ %181, %48 ]\l  %50 = phi i32 [ 0, %46 ], [ %187, %48 ]\l  %51 = phi i32 [ 0, %46 ], [ %193, %48 ]\l  %52 = phi i32 [ 0, %46 ], [ %199, %48 ]\l  %53 = phi i32 [ 0, %46 ], [ %205, %48 ]\l  %54 = phi i32 [ 0, %46 ], [ %206, %48 ]\l  %55 = lshr i32 %54, 5\l  %56 = and i32 %54, 28\l  %57 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %55\l  %58 = load i32, i32 addrspace(5)* %57, align 4, !tbaa !7\l  %59 = shl nuw i32 1, %56\l  %60 = and i32 %59, %58\l  %61 = icmp eq i32 %60, 0\l  %62 = mul nuw nsw i32 %54, 5\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %63\l  %65 = load i32, i32 addrspace(4)* %64, align 16, !tbaa !7\l  %66 = select i1 %61, i32 0, i32 %65\l  %67 = xor i32 %66, %49\l  %68 = or i32 %62, 1\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %69\l  %71 = load i32, i32 addrspace(4)* %70, align 4, !tbaa !7\l  %72 = select i1 %61, i32 0, i32 %71\l  %73 = xor i32 %72, %50\l  %74 = or i32 %62, 2\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %75\l  %77 = load i32, i32 addrspace(4)* %76, align 8, !tbaa !7\l  %78 = select i1 %61, i32 0, i32 %77\l  %79 = xor i32 %78, %51\l  %80 = or i32 %62, 3\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %81\l  %83 = load i32, i32 addrspace(4)* %82, align 4, !tbaa !7\l  %84 = select i1 %61, i32 0, i32 %83\l  %85 = xor i32 %84, %52\l  %86 = add nuw nsw i32 %62, 4\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %87\l  %89 = load i32, i32 addrspace(4)* %88, align 16, !tbaa !7\l  %90 = select i1 %61, i32 0, i32 %89\l  %91 = xor i32 %90, %53\l  %92 = or i32 %54, 1\l  %93 = lshr i32 %54, 5\l  %94 = and i32 %92, 29\l  %95 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %93\l  %96 = load i32, i32 addrspace(5)* %95, align 4, !tbaa !7\l  %97 = shl nuw i32 1, %94\l  %98 = and i32 %97, %96\l  %99 = icmp eq i32 %98, 0\l  %100 = mul nuw nsw i32 %92, 5\l  %101 = zext i32 %100 to i64\l  %102 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %101\l  %103 = load i32, i32 addrspace(4)* %102, align 4, !tbaa !7\l  %104 = select i1 %99, i32 0, i32 %103\l  %105 = xor i32 %104, %67\l  %106 = add nuw nsw i32 %100, 1\l  %107 = zext i32 %106 to i64\l  %108 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %107\l  %109 = load i32, i32 addrspace(4)* %108, align 8, !tbaa !7\l  %110 = select i1 %99, i32 0, i32 %109\l  %111 = xor i32 %110, %73\l  %112 = or i32 %100, 2\l  %113 = zext i32 %112 to i64\l  %114 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %113\l  %115 = load i32, i32 addrspace(4)* %114, align 4, !tbaa !7\l  %116 = select i1 %99, i32 0, i32 %115\l  %117 = xor i32 %116, %79\l  %118 = add nuw nsw i32 %100, 3\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %119\l  %121 = load i32, i32 addrspace(4)* %120, align 16, !tbaa !7\l  %122 = select i1 %99, i32 0, i32 %121\l  %123 = xor i32 %122, %85\l  %124 = add nuw nsw i32 %100, 4\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %125\l  %127 = load i32, i32 addrspace(4)* %126, align 4, !tbaa !7\l  %128 = select i1 %99, i32 0, i32 %127\l  %129 = xor i32 %128, %91\l  %130 = or i32 %54, 2\l  %131 = lshr i32 %54, 5\l  %132 = and i32 %130, 30\l  %133 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %131\l  %134 = load i32, i32 addrspace(5)* %133, align 4, !tbaa !7\l  %135 = shl nuw i32 1, %132\l  %136 = and i32 %135, %134\l  %137 = icmp eq i32 %136, 0\l  %138 = mul nuw nsw i32 %130, 5\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %139\l  %141 = load i32, i32 addrspace(4)* %140, align 8, !tbaa !7\l  %142 = select i1 %137, i32 0, i32 %141\l  %143 = xor i32 %142, %105\l  %144 = or i32 %138, 1\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %145\l  %147 = load i32, i32 addrspace(4)* %146, align 4, !tbaa !7\l  %148 = select i1 %137, i32 0, i32 %147\l  %149 = xor i32 %148, %111\l  %150 = add nuw nsw i32 %138, 2\l  %151 = zext i32 %150 to i64\l  %152 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %151\l  %153 = load i32, i32 addrspace(4)* %152, align 16, !tbaa !7\l  %154 = select i1 %137, i32 0, i32 %153\l  %155 = xor i32 %154, %117\l  %156 = add nuw nsw i32 %138, 3\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %157\l  %159 = load i32, i32 addrspace(4)* %158, align 4, !tbaa !7\l  %160 = select i1 %137, i32 0, i32 %159\l  %161 = xor i32 %160, %123\l  %162 = add nuw nsw i32 %138, 4\l  %163 = zext i32 %162 to i64\l  %164 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %163\l  %165 = load i32, i32 addrspace(4)* %164, align 8, !tbaa !7\l  %166 = select i1 %137, i32 0, i32 %165\l  %167 = xor i32 %166, %129\l  %168 = or i32 %54, 3\l  %169 = lshr i32 %54, 5\l  %170 = and i32 %168, 31\l  %171 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %169\l  %172 = load i32, i32 addrspace(5)* %171, align 4, !tbaa !7\l  %173 = shl nuw i32 1, %170\l  %174 = and i32 %173, %172\l  %175 = icmp eq i32 %174, 0\l  %176 = mul nuw nsw i32 %168, 5\l  %177 = zext i32 %176 to i64\l  %178 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %177\l  %179 = load i32, i32 addrspace(4)* %178, align 4, !tbaa !7\l  %180 = select i1 %175, i32 0, i32 %179\l  %181 = xor i32 %180, %143\l  %182 = add nuw nsw i32 %176, 1\l  %183 = zext i32 %182 to i64\l  %184 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %183\l  %185 = load i32, i32 addrspace(4)* %184, align 16, !tbaa !7\l  %186 = select i1 %175, i32 0, i32 %185\l  %187 = xor i32 %186, %149\l  %188 = add nuw nsw i32 %176, 2\l  %189 = zext i32 %188 to i64\l  %190 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %189\l  %191 = load i32, i32 addrspace(4)* %190, align 4, !tbaa !7\l  %192 = select i1 %175, i32 0, i32 %191\l  %193 = xor i32 %192, %155\l  %194 = add nuw nsw i32 %176, 3\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %195\l  %197 = load i32, i32 addrspace(4)* %196, align 8, !tbaa !7\l  %198 = select i1 %175, i32 0, i32 %197\l  %199 = xor i32 %198, %161\l  %200 = add nuw nsw i32 %176, 4\l  %201 = zext i32 %200 to i64\l  %202 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %41, i64 %201\l  %203 = load i32, i32 addrspace(4)* %202, align 4, !tbaa !7\l  %204 = select i1 %175, i32 0, i32 %203\l  %205 = xor i32 %204, %167\l  %206 = add nuw nsw i32 %54, 4\l  %207 = icmp eq i32 %206, 160\l  br i1 %207, label %208, label %48, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4ed1610:s0 -> Node0x4ed14d0;
	Node0x4ed1610:s1 -> Node0x4ed1610;
	Node0x4ed14d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%208:\l208:                                              \l  store i32 %181, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 %187, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 %193, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 %199, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 %205, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %209 = add nuw nsw i32 %47, 1\l  %210 = icmp eq i32 %209, %38\l  br i1 %210, label %42, label %46, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4ed14d0:s0 -> Node0x4ed0b90;
	Node0x4ed14d0:s1 -> Node0x4ed1130;
	Node0x4ecb8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%211:\l211:                                              \l  %212 = icmp eq i64 %1, 0\l  br i1 %212, label %390, label %213\l|{<s0>T|<s1>F}}"];
	Node0x4ecb8b0:s0 -> Node0x4ed2330;
	Node0x4ecb8b0:s1 -> Node0x4ed86f0;
	Node0x4ed86f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%213:\l213:                                              \l  %214 = phi i64 [ %223, %221 ], [ %1, %211 ]\l  %215 = phi i32 [ %222, %221 ], [ 0, %211 ]\l  %216 = trunc i64 %214 to i32\l  %217 = and i32 %216, 3\l  %218 = icmp eq i32 %217, 0\l  br i1 %218, label %221, label %219\l|{<s0>T|<s1>F}}"];
	Node0x4ed86f0:s0 -> Node0x4ed87f0;
	Node0x4ed86f0:s1 -> Node0x4ed8b70;
	Node0x4ed8b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%219:\l219:                                              \l  %220 = zext i32 %215 to i64\l  br label %225\l}"];
	Node0x4ed8b70 -> Node0x4ed8d20;
	Node0x4ed87f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%221:\l221:                                              \l  %222 = add nuw nsw i32 %215, 1\l  %223 = lshr i64 %214, 2\l  %224 = icmp ult i64 %214, 4\l  br i1 %224, label %390, label %213, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4ed87f0:s0 -> Node0x4ed2330;
	Node0x4ed87f0:s1 -> Node0x4ed86f0;
	Node0x4ed8d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%225:\l225:                                              \l  %226 = phi i32 [ 0, %219 ], [ %388, %387 ]\l  br label %227\l}"];
	Node0x4ed8d20 -> Node0x4ed96b0;
	Node0x4ed96b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%227:\l227:                                              \l  %228 = phi i32 [ 0, %225 ], [ %360, %227 ]\l  %229 = phi i32 [ 0, %225 ], [ %366, %227 ]\l  %230 = phi i32 [ 0, %225 ], [ %372, %227 ]\l  %231 = phi i32 [ 0, %225 ], [ %378, %227 ]\l  %232 = phi i32 [ 0, %225 ], [ %384, %227 ]\l  %233 = phi i32 [ 0, %225 ], [ %385, %227 ]\l  %234 = lshr i32 %233, 5\l  %235 = and i32 %233, 28\l  %236 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %234\l  %237 = load i32, i32 addrspace(5)* %236, align 4, !tbaa !7\l  %238 = shl nuw i32 1, %235\l  %239 = and i32 %238, %237\l  %240 = icmp eq i32 %239, 0\l  %241 = mul nuw nsw i32 %233, 5\l  %242 = zext i32 %241 to i64\l  %243 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %242\l  %244 = load i32, i32 addrspace(4)* %243, align 16, !tbaa !7\l  %245 = select i1 %240, i32 0, i32 %244\l  %246 = xor i32 %245, %228\l  %247 = or i32 %241, 1\l  %248 = zext i32 %247 to i64\l  %249 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %248\l  %250 = load i32, i32 addrspace(4)* %249, align 4, !tbaa !7\l  %251 = select i1 %240, i32 0, i32 %250\l  %252 = xor i32 %251, %229\l  %253 = or i32 %241, 2\l  %254 = zext i32 %253 to i64\l  %255 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %254\l  %256 = load i32, i32 addrspace(4)* %255, align 8, !tbaa !7\l  %257 = select i1 %240, i32 0, i32 %256\l  %258 = xor i32 %257, %230\l  %259 = or i32 %241, 3\l  %260 = zext i32 %259 to i64\l  %261 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %260\l  %262 = load i32, i32 addrspace(4)* %261, align 4, !tbaa !7\l  %263 = select i1 %240, i32 0, i32 %262\l  %264 = xor i32 %263, %231\l  %265 = add nuw nsw i32 %241, 4\l  %266 = zext i32 %265 to i64\l  %267 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %266\l  %268 = load i32, i32 addrspace(4)* %267, align 16, !tbaa !7\l  %269 = select i1 %240, i32 0, i32 %268\l  %270 = xor i32 %269, %232\l  %271 = or i32 %233, 1\l  %272 = lshr i32 %233, 5\l  %273 = and i32 %271, 29\l  %274 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %272\l  %275 = load i32, i32 addrspace(5)* %274, align 4, !tbaa !7\l  %276 = shl nuw i32 1, %273\l  %277 = and i32 %276, %275\l  %278 = icmp eq i32 %277, 0\l  %279 = mul nuw nsw i32 %271, 5\l  %280 = zext i32 %279 to i64\l  %281 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %280\l  %282 = load i32, i32 addrspace(4)* %281, align 4, !tbaa !7\l  %283 = select i1 %278, i32 0, i32 %282\l  %284 = xor i32 %283, %246\l  %285 = add nuw nsw i32 %279, 1\l  %286 = zext i32 %285 to i64\l  %287 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %286\l  %288 = load i32, i32 addrspace(4)* %287, align 8, !tbaa !7\l  %289 = select i1 %278, i32 0, i32 %288\l  %290 = xor i32 %289, %252\l  %291 = or i32 %279, 2\l  %292 = zext i32 %291 to i64\l  %293 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %292\l  %294 = load i32, i32 addrspace(4)* %293, align 4, !tbaa !7\l  %295 = select i1 %278, i32 0, i32 %294\l  %296 = xor i32 %295, %258\l  %297 = add nuw nsw i32 %279, 3\l  %298 = zext i32 %297 to i64\l  %299 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %298\l  %300 = load i32, i32 addrspace(4)* %299, align 16, !tbaa !7\l  %301 = select i1 %278, i32 0, i32 %300\l  %302 = xor i32 %301, %264\l  %303 = add nuw nsw i32 %279, 4\l  %304 = zext i32 %303 to i64\l  %305 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %304\l  %306 = load i32, i32 addrspace(4)* %305, align 4, !tbaa !7\l  %307 = select i1 %278, i32 0, i32 %306\l  %308 = xor i32 %307, %270\l  %309 = or i32 %233, 2\l  %310 = lshr i32 %233, 5\l  %311 = and i32 %309, 30\l  %312 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %310\l  %313 = load i32, i32 addrspace(5)* %312, align 4, !tbaa !7\l  %314 = shl nuw i32 1, %311\l  %315 = and i32 %314, %313\l  %316 = icmp eq i32 %315, 0\l  %317 = mul nuw nsw i32 %309, 5\l  %318 = zext i32 %317 to i64\l  %319 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %318\l  %320 = load i32, i32 addrspace(4)* %319, align 8, !tbaa !7\l  %321 = select i1 %316, i32 0, i32 %320\l  %322 = xor i32 %321, %284\l  %323 = or i32 %317, 1\l  %324 = zext i32 %323 to i64\l  %325 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %324\l  %326 = load i32, i32 addrspace(4)* %325, align 4, !tbaa !7\l  %327 = select i1 %316, i32 0, i32 %326\l  %328 = xor i32 %327, %290\l  %329 = add nuw nsw i32 %317, 2\l  %330 = zext i32 %329 to i64\l  %331 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %330\l  %332 = load i32, i32 addrspace(4)* %331, align 16, !tbaa !7\l  %333 = select i1 %316, i32 0, i32 %332\l  %334 = xor i32 %333, %296\l  %335 = add nuw nsw i32 %317, 3\l  %336 = zext i32 %335 to i64\l  %337 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %336\l  %338 = load i32, i32 addrspace(4)* %337, align 4, !tbaa !7\l  %339 = select i1 %316, i32 0, i32 %338\l  %340 = xor i32 %339, %302\l  %341 = add nuw nsw i32 %317, 4\l  %342 = zext i32 %341 to i64\l  %343 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %342\l  %344 = load i32, i32 addrspace(4)* %343, align 8, !tbaa !7\l  %345 = select i1 %316, i32 0, i32 %344\l  %346 = xor i32 %345, %308\l  %347 = or i32 %233, 3\l  %348 = lshr i32 %233, 5\l  %349 = and i32 %347, 31\l  %350 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %348\l  %351 = load i32, i32 addrspace(5)* %350, align 4, !tbaa !7\l  %352 = shl nuw i32 1, %349\l  %353 = and i32 %352, %351\l  %354 = icmp eq i32 %353, 0\l  %355 = mul nuw nsw i32 %347, 5\l  %356 = zext i32 %355 to i64\l  %357 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %356\l  %358 = load i32, i32 addrspace(4)* %357, align 4, !tbaa !7\l  %359 = select i1 %354, i32 0, i32 %358\l  %360 = xor i32 %359, %322\l  %361 = add nuw nsw i32 %355, 1\l  %362 = zext i32 %361 to i64\l  %363 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %362\l  %364 = load i32, i32 addrspace(4)* %363, align 16, !tbaa !7\l  %365 = select i1 %354, i32 0, i32 %364\l  %366 = xor i32 %365, %328\l  %367 = add nuw nsw i32 %355, 2\l  %368 = zext i32 %367 to i64\l  %369 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %368\l  %370 = load i32, i32 addrspace(4)* %369, align 4, !tbaa !7\l  %371 = select i1 %354, i32 0, i32 %370\l  %372 = xor i32 %371, %334\l  %373 = add nuw nsw i32 %355, 3\l  %374 = zext i32 %373 to i64\l  %375 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %374\l  %376 = load i32, i32 addrspace(4)* %375, align 8, !tbaa !7\l  %377 = select i1 %354, i32 0, i32 %376\l  %378 = xor i32 %377, %340\l  %379 = add nuw nsw i32 %355, 4\l  %380 = zext i32 %379 to i64\l  %381 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL22d_xorwow_jump_matrices, i64 0, i64 %220, i64 %380\l  %382 = load i32, i32 addrspace(4)* %381, align 4, !tbaa !7\l  %383 = select i1 %354, i32 0, i32 %382\l  %384 = xor i32 %383, %346\l  %385 = add nuw nsw i32 %233, 4\l  %386 = icmp eq i32 %385, 160\l  br i1 %386, label %387, label %227, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4ed96b0:s0 -> Node0x4ed2810;
	Node0x4ed96b0:s1 -> Node0x4ed96b0;
	Node0x4ed2810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%387:\l387:                                              \l  store i32 %360, i32 addrspace(5)* %16, align 8, !tbaa !7\l  store i32 %366, i32 addrspace(5)* %17, align 4, !tbaa !7\l  store i32 %372, i32 addrspace(5)* %18, align 8, !tbaa !7\l  store i32 %378, i32 addrspace(5)* %19, align 4, !tbaa !7\l  store i32 %384, i32 addrspace(5)* %20, align 8, !tbaa !7\l  %388 = add nuw nsw i32 %226, 1\l  %389 = icmp eq i32 %388, %217\l  br i1 %389, label %221, label %225, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4ed2810:s0 -> Node0x4ed87f0;
	Node0x4ed2810:s1 -> Node0x4ed8d20;
	Node0x4ed2330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%390:\l390:                                              \l  %391 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %2, i64 %14\l  %392 = add i32 %26, 6615241\l  %393 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 0\l  %394 = trunc i64 %1 to i32\l  %395 = mul i32 %394, 362437\l  %396 = add i32 %392, %395\l  %397 = add i32 %396, %27\l  store i32 %397, i32 addrspace(5)* %393, align 8, !tbaa !15\l  %398 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %398, align 4, !tbaa !20\l  %399 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %399, align 8, !tbaa !21\l  %400 = bitcast %struct.hiprandState addrspace(1)* %391 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %400, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %15, i64 48, i1 false), !tbaa.struct !22\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %15) #4\l  ret void\l}"];
}
