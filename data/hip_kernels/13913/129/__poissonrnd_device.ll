; ModuleID = '../data/hip_kernels/13913/129/main.cu'
source_filename = "../data/hip_kernels/13913/129/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.hiprandState = type { %"class.rocrand_device::xorwow_engine" }
%"class.rocrand_device::xorwow_engine" = type { %"struct.rocrand_device::xorwow_engine::xorwow_state" }
%"struct.rocrand_device::xorwow_engine::xorwow_state" = type { i32, i32, i32, float, double, [5 x i32] }

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z12__poissonrndiPfPiP12hiprandState(i32 %0, float addrspace(1)* nocapture readonly %1, i32 addrspace(1)* nocapture writeonly %2, %struct.hiprandState addrspace(1)* nocapture readonly %3) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4
  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*
  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12
  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*
  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !7
  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %15 = mul i32 %14, %10
  %16 = add i32 %15, %5
  %17 = udiv i32 %13, %10
  %18 = mul i32 %17, %10
  %19 = icmp ugt i32 %13, %18
  %20 = zext i1 %19 to i32
  %21 = add i32 %17, %20
  %22 = mul i32 %21, %10
  %23 = sext i32 %16 to i64
  %24 = icmp slt i32 %16, %0
  br i1 %24, label %25, label %42

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 5, i64 4
  %27 = load i32, i32 addrspace(1)* %26, align 8
  %28 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 5, i64 3
  %29 = load i32, i32 addrspace(1)* %28, align 4
  %30 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 5, i64 2
  %31 = load i32, i32 addrspace(1)* %30, align 8
  %32 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 5, i64 1
  %33 = load i32, i32 addrspace(1)* %32, align 4
  %34 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 5, i64 0
  %35 = load i32, i32 addrspace(1)* %34, align 8
  %36 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 4
  %37 = load double, double addrspace(1)* %36, align 8
  %38 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 2
  %39 = load i32, i32 addrspace(1)* %38, align 8
  %40 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState addrspace(1)* %3, i64 %23, i32 0, i32 0, i32 0
  %41 = load i32, i32 addrspace(1)* %40, align 8
  br label %43

42:                                               ; preds = %1134, %4
  ret void

43:                                               ; preds = %25, %1134
  %44 = phi i32 [ %1145, %1134 ], [ %16, %25 ]
  %45 = phi i32 [ %1142, %1134 ], [ %41, %25 ]
  %46 = phi i32 [ %1141, %1134 ], [ %27, %25 ]
  %47 = phi i32 [ %1140, %1134 ], [ %39, %25 ]
  %48 = phi i32 [ %1139, %1134 ], [ %29, %25 ]
  %49 = phi double [ %1138, %1134 ], [ %37, %25 ]
  %50 = phi i32 [ %1137, %1134 ], [ %35, %25 ]
  %51 = phi i32 [ %1136, %1134 ], [ %33, %25 ]
  %52 = phi i32 [ %1135, %1134 ], [ %31, %25 ]
  %53 = sext i32 %44 to i64
  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53
  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16, !amdgpu.noclobber !6
  %56 = fpext float %55 to double
  %57 = fcmp contract olt float %55, 6.400000e+01
  br i1 %57, label %58, label %120

58:                                               ; preds = %43
  %59 = fneg contract double %56
  %60 = fmul double %56, 0xBFF71547652B82FE
  %61 = tail call double @llvm.rint.f64(double %60)
  %62 = fneg double %61
  %63 = tail call double @llvm.fma.f64(double %62, double 0x3FE62E42FEFA39EF, double %59)
  %64 = tail call double @llvm.fma.f64(double %62, double 0x3C7ABC9E3B39803F, double %63)
  %65 = tail call double @llvm.fma.f64(double %64, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %66 = tail call double @llvm.fma.f64(double %64, double %65, double 0x3EC71DEE623FDE64)
  %67 = tail call double @llvm.fma.f64(double %64, double %66, double 0x3EFA01997C89E6B0)
  %68 = tail call double @llvm.fma.f64(double %64, double %67, double 0x3F2A01A014761F6E)
  %69 = tail call double @llvm.fma.f64(double %64, double %68, double 0x3F56C16C1852B7B0)
  %70 = tail call double @llvm.fma.f64(double %64, double %69, double 0x3F81111111122322)
  %71 = tail call double @llvm.fma.f64(double %64, double %70, double 0x3FA55555555502A1)
  %72 = tail call double @llvm.fma.f64(double %64, double %71, double 0x3FC5555555555511)
  %73 = tail call double @llvm.fma.f64(double %64, double %72, double 0x3FE000000000000B)
  %74 = tail call double @llvm.fma.f64(double %64, double %73, double 1.000000e+00)
  %75 = tail call double @llvm.fma.f64(double %64, double %74, double 1.000000e+00)
  %76 = fptosi double %61 to i32
  %77 = tail call double @llvm.amdgcn.ldexp.f64(double %75, i32 %76)
  %78 = fcmp olt float %55, -1.024000e+03
  %79 = select i1 %78, double 0x7FF0000000000000, double %77
  %80 = fcmp ogt float %55, 1.075000e+03
  %81 = select i1 %80, double 0.000000e+00, double %79
  br label %82

82:                                               ; preds = %82, %58
  %83 = phi i32 [ %45, %58 ], [ %108, %82 ]
  %84 = phi i32 [ %46, %58 ], [ %107, %82 ]
  %85 = phi i32 [ %48, %58 ], [ %98, %82 ]
  %86 = phi i32 [ %52, %58 ], [ %84, %82 ]
  %87 = phi i32 [ %51, %58 ], [ %85, %82 ]
  %88 = phi i32 [ %50, %58 ], [ %86, %82 ]
  %89 = phi i32 [ 0, %58 ], [ %91, %82 ]
  %90 = phi double [ 1.000000e+00, %58 ], [ %118, %82 ]
  %91 = add i32 %89, 1
  %92 = lshr i32 %88, 2
  %93 = xor i32 %92, %88
  %94 = shl i32 %84, 4
  %95 = shl i32 %93, 1
  %96 = xor i32 %94, %95
  %97 = xor i32 %96, %84
  %98 = xor i32 %97, %93
  %99 = add i32 %83, 362437
  %100 = add i32 %99, %98
  %101 = lshr i32 %87, 2
  %102 = xor i32 %101, %87
  %103 = shl i32 %98, 4
  %104 = shl i32 %102, 1
  %105 = xor i32 %104, %103
  %106 = xor i32 %105, %102
  %107 = xor i32 %106, %98
  %108 = add i32 %83, 724874
  %109 = add i32 %107, %108
  %110 = lshr i32 %109, 11
  %111 = zext i32 %110 to i64
  %112 = shl nuw nsw i64 %111, 32
  %113 = zext i32 %100 to i64
  %114 = or i64 %112, %113
  %115 = uitofp i64 %114 to double
  %116 = fmul contract double %115, 0x3CA0000000000000
  %117 = fadd contract double %116, 0x3CA0000000000000
  %118 = fmul contract double %90, %117
  %119 = fcmp contract ogt double %118, %81
  br i1 %119, label %82, label %1134, !llvm.loop !20

120:                                              ; preds = %43
  %121 = fcmp contract ugt float %55, 4.000000e+03
  br i1 %121, label %885, label %122

122:                                              ; preds = %120
  %123 = fdiv contract double 3.360000e+00, %56
  %124 = fsub contract double 7.670000e-01, %123
  %125 = fmul contract double %56, 3.000000e+00
  %126 = fcmp olt double %125, 0x1000000000000000
  %127 = select i1 %126, double 0x4FF0000000000000, double 1.000000e+00
  %128 = fmul double %125, %127
  %129 = tail call double @llvm.amdgcn.rsq.f64(double %128)
  %130 = fmul double %128, %129
  %131 = fmul double %129, 5.000000e-01
  %132 = fneg double %131
  %133 = tail call double @llvm.fma.f64(double %132, double %130, double 5.000000e-01)
  %134 = tail call double @llvm.fma.f64(double %131, double %133, double %131)
  %135 = tail call double @llvm.fma.f64(double %130, double %133, double %130)
  %136 = fneg double %135
  %137 = tail call double @llvm.fma.f64(double %136, double %135, double %128)
  %138 = tail call double @llvm.fma.f64(double %137, double %134, double %135)
  %139 = fneg double %138
  %140 = tail call double @llvm.fma.f64(double %139, double %138, double %128)
  %141 = tail call double @llvm.fma.f64(double %140, double %134, double %138)
  %142 = select i1 %126, double 0x37F0000000000000, double 1.000000e+00
  %143 = fmul double %142, %141
  %144 = fcmp oeq double %128, 0.000000e+00
  %145 = fcmp oeq double %128, 0x7FF0000000000000
  %146 = or i1 %144, %145
  %147 = select i1 %146, double %128, double %143
  %148 = fdiv contract double 0x400921FB54442D18, %147
  %149 = fmul contract double %148, %56
  %150 = tail call double @llvm.amdgcn.frexp.mant.f64(double %124)
  %151 = fcmp olt double %150, 0x3FE5555555555555
  %152 = zext i1 %151 to i32
  %153 = tail call double @llvm.amdgcn.ldexp.f64(double %150, i32 %152)
  %154 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %124)
  %155 = sub nsw i32 %154, %152
  %156 = fadd double %153, -1.000000e+00
  %157 = fadd double %153, 1.000000e+00
  %158 = fadd double %157, -1.000000e+00
  %159 = fsub double %153, %158
  %160 = tail call double @llvm.amdgcn.rcp.f64(double %157)
  %161 = fneg double %157
  %162 = tail call double @llvm.fma.f64(double %161, double %160, double 1.000000e+00)
  %163 = tail call double @llvm.fma.f64(double %162, double %160, double %160)
  %164 = tail call double @llvm.fma.f64(double %161, double %163, double 1.000000e+00)
  %165 = tail call double @llvm.fma.f64(double %164, double %163, double %163)
  %166 = fmul double %156, %165
  %167 = fmul double %157, %166
  %168 = fneg double %167
  %169 = tail call double @llvm.fma.f64(double %166, double %157, double %168)
  %170 = tail call double @llvm.fma.f64(double %166, double %159, double %169)
  %171 = fadd double %167, %170
  %172 = fsub double %171, %167
  %173 = fsub double %170, %172
  %174 = fsub double %156, %171
  %175 = fsub double %156, %174
  %176 = fsub double %175, %171
  %177 = fsub double %176, %173
  %178 = fadd double %174, %177
  %179 = fmul double %165, %178
  %180 = fadd double %166, %179
  %181 = fsub double %180, %166
  %182 = fsub double %179, %181
  %183 = fmul double %180, %180
  %184 = tail call double @llvm.fma.f64(double %183, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %185 = tail call double @llvm.fma.f64(double %183, double %184, double 0x3FC7474DD7F4DF2E)
  %186 = tail call double @llvm.fma.f64(double %183, double %185, double 0x3FCC71C016291751)
  %187 = tail call double @llvm.fma.f64(double %183, double %186, double 0x3FD249249B27ACF1)
  %188 = tail call double @llvm.fma.f64(double %183, double %187, double 0x3FD99999998EF7B6)
  %189 = tail call double @llvm.fma.f64(double %183, double %188, double 0x3FE5555555555780)
  %190 = tail call double @llvm.amdgcn.ldexp.f64(double %180, i32 1)
  %191 = tail call double @llvm.amdgcn.ldexp.f64(double %182, i32 1)
  %192 = fmul double %180, %183
  %193 = fmul double %192, %189
  %194 = fadd double %190, %193
  %195 = fsub double %194, %190
  %196 = fsub double %193, %195
  %197 = fadd double %191, %196
  %198 = fadd double %194, %197
  %199 = fsub double %198, %194
  %200 = fsub double %197, %199
  %201 = sitofp i32 %155 to double
  %202 = fmul double %201, 0x3FE62E42FEFA39EF
  %203 = fneg double %202
  %204 = tail call double @llvm.fma.f64(double %201, double 0x3FE62E42FEFA39EF, double %203)
  %205 = tail call double @llvm.fma.f64(double %201, double 0x3C7ABC9E3B39803F, double %204)
  %206 = fadd double %202, %205
  %207 = fsub double %206, %202
  %208 = fsub double %205, %207
  %209 = fadd double %206, %198
  %210 = fsub double %209, %206
  %211 = fsub double %209, %210
  %212 = fsub double %206, %211
  %213 = fsub double %198, %210
  %214 = fadd double %213, %212
  %215 = fadd double %208, %200
  %216 = fsub double %215, %208
  %217 = fsub double %215, %216
  %218 = fsub double %208, %217
  %219 = fsub double %200, %216
  %220 = fadd double %219, %218
  %221 = fadd double %215, %214
  %222 = fadd double %209, %221
  %223 = fsub double %222, %209
  %224 = fsub double %221, %223
  %225 = fadd double %220, %224
  %226 = fadd double %222, %225
  %227 = tail call double @llvm.fabs.f64(double %124) #3
  %228 = fcmp oeq double %227, 0x7FF0000000000000
  %229 = select i1 %228, double %124, double %226
  %230 = fcmp olt double %124, 0.000000e+00
  %231 = select i1 %230, double 0x7FF8000000000000, double %229
  %232 = fcmp oeq double %124, 0.000000e+00
  %233 = select i1 %232, double 0xFFF0000000000000, double %231
  %234 = fsub contract double %233, %56
  %235 = tail call double @llvm.amdgcn.frexp.mant.f64(double %148)
  %236 = fcmp olt double %235, 0x3FE5555555555555
  %237 = zext i1 %236 to i32
  %238 = tail call double @llvm.amdgcn.ldexp.f64(double %235, i32 %237)
  %239 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %148)
  %240 = sub nsw i32 %239, %237
  %241 = fadd double %238, -1.000000e+00
  %242 = fadd double %238, 1.000000e+00
  %243 = fadd double %242, -1.000000e+00
  %244 = fsub double %238, %243
  %245 = tail call double @llvm.amdgcn.rcp.f64(double %242)
  %246 = fneg double %242
  %247 = tail call double @llvm.fma.f64(double %246, double %245, double 1.000000e+00)
  %248 = tail call double @llvm.fma.f64(double %247, double %245, double %245)
  %249 = tail call double @llvm.fma.f64(double %246, double %248, double 1.000000e+00)
  %250 = tail call double @llvm.fma.f64(double %249, double %248, double %248)
  %251 = fmul double %241, %250
  %252 = fmul double %242, %251
  %253 = fneg double %252
  %254 = tail call double @llvm.fma.f64(double %251, double %242, double %253)
  %255 = tail call double @llvm.fma.f64(double %251, double %244, double %254)
  %256 = fadd double %252, %255
  %257 = fsub double %256, %252
  %258 = fsub double %255, %257
  %259 = fsub double %241, %256
  %260 = fsub double %241, %259
  %261 = fsub double %260, %256
  %262 = fsub double %261, %258
  %263 = fadd double %259, %262
  %264 = fmul double %250, %263
  %265 = fadd double %251, %264
  %266 = fsub double %265, %251
  %267 = fsub double %264, %266
  %268 = fmul double %265, %265
  %269 = tail call double @llvm.fma.f64(double %268, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %270 = tail call double @llvm.fma.f64(double %268, double %269, double 0x3FC7474DD7F4DF2E)
  %271 = tail call double @llvm.fma.f64(double %268, double %270, double 0x3FCC71C016291751)
  %272 = tail call double @llvm.fma.f64(double %268, double %271, double 0x3FD249249B27ACF1)
  %273 = tail call double @llvm.fma.f64(double %268, double %272, double 0x3FD99999998EF7B6)
  %274 = tail call double @llvm.fma.f64(double %268, double %273, double 0x3FE5555555555780)
  %275 = tail call double @llvm.amdgcn.ldexp.f64(double %265, i32 1)
  %276 = tail call double @llvm.amdgcn.ldexp.f64(double %267, i32 1)
  %277 = fmul double %265, %268
  %278 = fmul double %277, %274
  %279 = fadd double %275, %278
  %280 = fsub double %279, %275
  %281 = fsub double %278, %280
  %282 = fadd double %276, %281
  %283 = fadd double %279, %282
  %284 = fsub double %283, %279
  %285 = fsub double %282, %284
  %286 = sitofp i32 %240 to double
  %287 = fmul double %286, 0x3FE62E42FEFA39EF
  %288 = fneg double %287
  %289 = tail call double @llvm.fma.f64(double %286, double 0x3FE62E42FEFA39EF, double %288)
  %290 = tail call double @llvm.fma.f64(double %286, double 0x3C7ABC9E3B39803F, double %289)
  %291 = fadd double %287, %290
  %292 = fsub double %291, %287
  %293 = fsub double %290, %292
  %294 = fadd double %291, %283
  %295 = fsub double %294, %291
  %296 = fsub double %294, %295
  %297 = fsub double %291, %296
  %298 = fsub double %283, %295
  %299 = fadd double %298, %297
  %300 = fadd double %293, %285
  %301 = fsub double %300, %293
  %302 = fsub double %300, %301
  %303 = fsub double %293, %302
  %304 = fsub double %285, %301
  %305 = fadd double %304, %303
  %306 = fadd double %300, %299
  %307 = fadd double %294, %306
  %308 = fsub double %307, %294
  %309 = fsub double %306, %308
  %310 = fadd double %305, %309
  %311 = fadd double %307, %310
  %312 = tail call double @llvm.fabs.f64(double %148) #3
  %313 = fcmp oeq double %312, 0x7FF0000000000000
  %314 = select i1 %313, double %148, double %311
  %315 = fcmp olt double %148, 0.000000e+00
  %316 = select i1 %315, double 0x7FF8000000000000, double %314
  %317 = fcmp oeq double %148, 0.000000e+00
  %318 = select i1 %317, double 0xFFF0000000000000, double %316
  %319 = fsub contract double %234, %318
  %320 = tail call double @llvm.amdgcn.frexp.mant.f64(double %56)
  %321 = fcmp olt double %320, 0x3FE5555555555555
  %322 = zext i1 %321 to i32
  %323 = tail call double @llvm.amdgcn.ldexp.f64(double %320, i32 %322)
  %324 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %56)
  %325 = sub nsw i32 %324, %322
  %326 = fadd double %323, -1.000000e+00
  %327 = fadd double %323, 1.000000e+00
  %328 = fadd double %327, -1.000000e+00
  %329 = fsub double %323, %328
  %330 = tail call double @llvm.amdgcn.rcp.f64(double %327)
  %331 = fneg double %327
  %332 = tail call double @llvm.fma.f64(double %331, double %330, double 1.000000e+00)
  %333 = tail call double @llvm.fma.f64(double %332, double %330, double %330)
  %334 = tail call double @llvm.fma.f64(double %331, double %333, double 1.000000e+00)
  %335 = tail call double @llvm.fma.f64(double %334, double %333, double %333)
  %336 = fmul double %326, %335
  %337 = fmul double %327, %336
  %338 = fneg double %337
  %339 = tail call double @llvm.fma.f64(double %336, double %327, double %338)
  %340 = tail call double @llvm.fma.f64(double %336, double %329, double %339)
  %341 = fadd double %337, %340
  %342 = fsub double %341, %337
  %343 = fsub double %340, %342
  %344 = fsub double %326, %341
  %345 = fsub double %326, %344
  %346 = fsub double %345, %341
  %347 = fsub double %346, %343
  %348 = fadd double %344, %347
  %349 = fmul double %335, %348
  %350 = fadd double %336, %349
  %351 = fsub double %350, %336
  %352 = fsub double %349, %351
  %353 = fmul double %350, %350
  %354 = tail call double @llvm.fma.f64(double %353, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %355 = tail call double @llvm.fma.f64(double %353, double %354, double 0x3FC7474DD7F4DF2E)
  %356 = tail call double @llvm.fma.f64(double %353, double %355, double 0x3FCC71C016291751)
  %357 = tail call double @llvm.fma.f64(double %353, double %356, double 0x3FD249249B27ACF1)
  %358 = tail call double @llvm.fma.f64(double %353, double %357, double 0x3FD99999998EF7B6)
  %359 = tail call double @llvm.fma.f64(double %353, double %358, double 0x3FE5555555555780)
  %360 = tail call double @llvm.amdgcn.ldexp.f64(double %350, i32 1)
  %361 = tail call double @llvm.amdgcn.ldexp.f64(double %352, i32 1)
  %362 = fmul double %350, %353
  %363 = fmul double %362, %359
  %364 = fadd double %360, %363
  %365 = fsub double %364, %360
  %366 = fsub double %363, %365
  %367 = fadd double %361, %366
  %368 = fadd double %364, %367
  %369 = fsub double %368, %364
  %370 = fsub double %367, %369
  %371 = sitofp i32 %325 to double
  %372 = fmul double %371, 0x3FE62E42FEFA39EF
  %373 = fneg double %372
  %374 = tail call double @llvm.fma.f64(double %371, double 0x3FE62E42FEFA39EF, double %373)
  %375 = tail call double @llvm.fma.f64(double %371, double 0x3C7ABC9E3B39803F, double %374)
  %376 = fadd double %372, %375
  %377 = fsub double %376, %372
  %378 = fsub double %375, %377
  %379 = fadd double %376, %368
  %380 = fsub double %379, %376
  %381 = fsub double %379, %380
  %382 = fsub double %376, %381
  %383 = fsub double %368, %380
  %384 = fadd double %383, %382
  %385 = fadd double %378, %370
  %386 = fsub double %385, %378
  %387 = fsub double %385, %386
  %388 = fsub double %378, %387
  %389 = fsub double %370, %386
  %390 = fadd double %389, %388
  %391 = fadd double %385, %384
  %392 = fadd double %379, %391
  %393 = fsub double %392, %379
  %394 = fsub double %391, %393
  %395 = fadd double %390, %394
  %396 = fadd double %392, %395
  %397 = tail call double @llvm.fabs.f64(double %56) #3
  %398 = fcmp oeq double %397, 0x7FF0000000000000
  %399 = select i1 %398, double %56, double %396
  %400 = fcmp olt float %55, 0.000000e+00
  %401 = select i1 %400, double 0x7FF8000000000000, double %399
  %402 = fcmp oeq float %55, 0.000000e+00
  %403 = select i1 %402, double 0xFFF0000000000000, double %401
  br label %404

404:                                              ; preds = %884, %122
  %405 = phi i32 [ %45, %122 ], [ %876, %884 ]
  %406 = phi i32 [ %46, %122 ], [ %877, %884 ]
  %407 = phi i32 [ %48, %122 ], [ %878, %884 ]
  %408 = phi i32 [ %52, %122 ], [ %879, %884 ]
  %409 = phi i32 [ %51, %122 ], [ %880, %884 ]
  %410 = phi i32 [ %50, %122 ], [ %881, %884 ]
  %411 = phi i32 [ undef, %122 ], [ %883, %884 ]
  %412 = lshr i32 %410, 2
  %413 = xor i32 %412, %410
  %414 = shl i32 %406, 4
  %415 = shl i32 %413, 1
  %416 = xor i32 %414, %415
  %417 = xor i32 %416, %406
  %418 = xor i32 %417, %413
  %419 = add i32 %405, 362437
  %420 = add i32 %419, %418
  %421 = lshr i32 %409, 2
  %422 = xor i32 %421, %409
  %423 = shl i32 %418, 4
  %424 = shl i32 %422, 1
  %425 = xor i32 %424, %423
  %426 = xor i32 %425, %422
  %427 = xor i32 %426, %418
  %428 = add i32 %405, 724874
  %429 = add i32 %427, %428
  %430 = lshr i32 %429, 11
  %431 = zext i32 %430 to i64
  %432 = shl nuw nsw i64 %431, 32
  %433 = zext i32 %420 to i64
  %434 = or i64 %432, %433
  %435 = uitofp i64 %434 to double
  %436 = fmul contract double %435, 0x3CA0000000000000
  %437 = fadd contract double %436, 0x3CA0000000000000
  %438 = fsub contract double 1.000000e+00, %437
  %439 = fdiv contract double %438, %437
  %440 = tail call double @llvm.amdgcn.frexp.mant.f64(double %439)
  %441 = fcmp olt double %440, 0x3FE5555555555555
  %442 = zext i1 %441 to i32
  %443 = tail call double @llvm.amdgcn.ldexp.f64(double %440, i32 %442)
  %444 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %439)
  %445 = sub nsw i32 %444, %442
  %446 = fadd double %443, -1.000000e+00
  %447 = fadd double %443, 1.000000e+00
  %448 = fadd double %447, -1.000000e+00
  %449 = fsub double %443, %448
  %450 = tail call double @llvm.amdgcn.rcp.f64(double %447)
  %451 = fneg double %447
  %452 = tail call double @llvm.fma.f64(double %451, double %450, double 1.000000e+00)
  %453 = tail call double @llvm.fma.f64(double %452, double %450, double %450)
  %454 = tail call double @llvm.fma.f64(double %451, double %453, double 1.000000e+00)
  %455 = tail call double @llvm.fma.f64(double %454, double %453, double %453)
  %456 = fmul double %446, %455
  %457 = fmul double %447, %456
  %458 = fneg double %457
  %459 = tail call double @llvm.fma.f64(double %456, double %447, double %458)
  %460 = tail call double @llvm.fma.f64(double %456, double %449, double %459)
  %461 = fadd double %457, %460
  %462 = fsub double %461, %457
  %463 = fsub double %460, %462
  %464 = fsub double %446, %461
  %465 = fsub double %446, %464
  %466 = fsub double %465, %461
  %467 = fsub double %466, %463
  %468 = fadd double %464, %467
  %469 = fmul double %455, %468
  %470 = fadd double %456, %469
  %471 = fsub double %470, %456
  %472 = fsub double %469, %471
  %473 = fmul double %470, %470
  %474 = tail call double @llvm.fma.f64(double %473, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %475 = tail call double @llvm.fma.f64(double %473, double %474, double 0x3FC7474DD7F4DF2E)
  %476 = tail call double @llvm.fma.f64(double %473, double %475, double 0x3FCC71C016291751)
  %477 = tail call double @llvm.fma.f64(double %473, double %476, double 0x3FD249249B27ACF1)
  %478 = tail call double @llvm.fma.f64(double %473, double %477, double 0x3FD99999998EF7B6)
  %479 = tail call double @llvm.fma.f64(double %473, double %478, double 0x3FE5555555555780)
  %480 = tail call double @llvm.amdgcn.ldexp.f64(double %470, i32 1)
  %481 = tail call double @llvm.amdgcn.ldexp.f64(double %472, i32 1)
  %482 = fmul double %470, %473
  %483 = fmul double %482, %479
  %484 = fadd double %480, %483
  %485 = fsub double %484, %480
  %486 = fsub double %483, %485
  %487 = fadd double %481, %486
  %488 = fadd double %484, %487
  %489 = fsub double %488, %484
  %490 = fsub double %487, %489
  %491 = sitofp i32 %445 to double
  %492 = fmul double %491, 0x3FE62E42FEFA39EF
  %493 = fneg double %492
  %494 = tail call double @llvm.fma.f64(double %491, double 0x3FE62E42FEFA39EF, double %493)
  %495 = tail call double @llvm.fma.f64(double %491, double 0x3C7ABC9E3B39803F, double %494)
  %496 = fadd double %492, %495
  %497 = fsub double %496, %492
  %498 = fsub double %495, %497
  %499 = fadd double %496, %488
  %500 = fsub double %499, %496
  %501 = fsub double %499, %500
  %502 = fsub double %496, %501
  %503 = fsub double %488, %500
  %504 = fadd double %503, %502
  %505 = fadd double %498, %490
  %506 = fsub double %505, %498
  %507 = fsub double %505, %506
  %508 = fsub double %498, %507
  %509 = fsub double %490, %506
  %510 = fadd double %509, %508
  %511 = fadd double %505, %504
  %512 = fadd double %499, %511
  %513 = fsub double %512, %499
  %514 = fsub double %511, %513
  %515 = fadd double %510, %514
  %516 = fadd double %512, %515
  %517 = tail call double @llvm.fabs.f64(double %439) #3
  %518 = fcmp oeq double %517, 0x7FF0000000000000
  %519 = select i1 %518, double %439, double %516
  %520 = fcmp olt double %439, 0.000000e+00
  %521 = select i1 %520, double 0x7FF8000000000000, double %519
  %522 = fcmp oeq double %439, 0.000000e+00
  %523 = select i1 %522, double 0xFFF0000000000000, double %521
  %524 = fsub contract double %149, %523
  %525 = fdiv contract double %524, %148
  %526 = fadd contract double %525, 5.000000e-01
  %527 = tail call double @llvm.floor.f64(double %526)
  %528 = fcmp contract olt double %527, 0.000000e+00
  br i1 %528, label %875, label %529, !llvm.loop !22

529:                                              ; preds = %404
  %530 = lshr i32 %408, 2
  %531 = xor i32 %530, %408
  %532 = shl i32 %427, 4
  %533 = shl i32 %531, 1
  %534 = xor i32 %533, %532
  %535 = xor i32 %534, %531
  %536 = xor i32 %535, %427
  %537 = add i32 %405, 1087311
  %538 = add i32 %537, %536
  %539 = lshr i32 %407, 2
  %540 = xor i32 %539, %407
  %541 = shl i32 %536, 4
  %542 = shl i32 %540, 1
  %543 = xor i32 %542, %541
  %544 = xor i32 %543, %540
  %545 = xor i32 %544, %536
  %546 = add i32 %405, 1449748
  %547 = add i32 %545, %546
  %548 = lshr i32 %547, 11
  %549 = zext i32 %548 to i64
  %550 = shl nuw nsw i64 %549, 32
  %551 = zext i32 %538 to i64
  %552 = or i64 %550, %551
  %553 = uitofp i64 %552 to double
  %554 = fmul contract double %553, 0x3CA0000000000000
  %555 = fadd contract double %554, 0x3CA0000000000000
  %556 = fmul contract double %148, %525
  %557 = fsub contract double %149, %556
  %558 = fmul double %557, 0x3FF71547652B82FE
  %559 = tail call double @llvm.rint.f64(double %558)
  %560 = fneg double %559
  %561 = tail call double @llvm.fma.f64(double %560, double 0x3FE62E42FEFA39EF, double %557)
  %562 = tail call double @llvm.fma.f64(double %560, double 0x3C7ABC9E3B39803F, double %561)
  %563 = tail call double @llvm.fma.f64(double %562, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %564 = tail call double @llvm.fma.f64(double %562, double %563, double 0x3EC71DEE623FDE64)
  %565 = tail call double @llvm.fma.f64(double %562, double %564, double 0x3EFA01997C89E6B0)
  %566 = tail call double @llvm.fma.f64(double %562, double %565, double 0x3F2A01A014761F6E)
  %567 = tail call double @llvm.fma.f64(double %562, double %566, double 0x3F56C16C1852B7B0)
  %568 = tail call double @llvm.fma.f64(double %562, double %567, double 0x3F81111111122322)
  %569 = tail call double @llvm.fma.f64(double %562, double %568, double 0x3FA55555555502A1)
  %570 = tail call double @llvm.fma.f64(double %562, double %569, double 0x3FC5555555555511)
  %571 = tail call double @llvm.fma.f64(double %562, double %570, double 0x3FE000000000000B)
  %572 = tail call double @llvm.fma.f64(double %562, double %571, double 1.000000e+00)
  %573 = tail call double @llvm.fma.f64(double %562, double %572, double 1.000000e+00)
  %574 = fptosi double %559 to i32
  %575 = tail call double @llvm.amdgcn.ldexp.f64(double %573, i32 %574)
  %576 = fcmp ogt double %557, 1.024000e+03
  %577 = fcmp olt double %557, -1.075000e+03
  %578 = fadd contract double %575, 1.000000e+00
  %579 = select i1 %576, double 0x7FF0000000000000, double %578
  %580 = select i1 %577, double 1.000000e+00, double %579
  %581 = fmul contract double %580, %580
  %582 = fdiv contract double %555, %581
  %583 = tail call double @llvm.amdgcn.frexp.mant.f64(double %582)
  %584 = fcmp olt double %583, 0x3FE5555555555555
  %585 = zext i1 %584 to i32
  %586 = tail call double @llvm.amdgcn.ldexp.f64(double %583, i32 %585)
  %587 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %582)
  %588 = sub nsw i32 %587, %585
  %589 = fadd double %586, -1.000000e+00
  %590 = fadd double %586, 1.000000e+00
  %591 = fadd double %590, -1.000000e+00
  %592 = fsub double %586, %591
  %593 = tail call double @llvm.amdgcn.rcp.f64(double %590)
  %594 = fneg double %590
  %595 = tail call double @llvm.fma.f64(double %594, double %593, double 1.000000e+00)
  %596 = tail call double @llvm.fma.f64(double %595, double %593, double %593)
  %597 = tail call double @llvm.fma.f64(double %594, double %596, double 1.000000e+00)
  %598 = tail call double @llvm.fma.f64(double %597, double %596, double %596)
  %599 = fmul double %589, %598
  %600 = fmul double %590, %599
  %601 = fneg double %600
  %602 = tail call double @llvm.fma.f64(double %599, double %590, double %601)
  %603 = tail call double @llvm.fma.f64(double %599, double %592, double %602)
  %604 = fadd double %600, %603
  %605 = fsub double %604, %600
  %606 = fsub double %603, %605
  %607 = fsub double %589, %604
  %608 = fsub double %589, %607
  %609 = fsub double %608, %604
  %610 = fsub double %609, %606
  %611 = fadd double %607, %610
  %612 = fmul double %598, %611
  %613 = fadd double %599, %612
  %614 = fsub double %613, %599
  %615 = fsub double %612, %614
  %616 = fmul double %613, %613
  %617 = tail call double @llvm.fma.f64(double %616, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %618 = tail call double @llvm.fma.f64(double %616, double %617, double 0x3FC7474DD7F4DF2E)
  %619 = tail call double @llvm.fma.f64(double %616, double %618, double 0x3FCC71C016291751)
  %620 = tail call double @llvm.fma.f64(double %616, double %619, double 0x3FD249249B27ACF1)
  %621 = tail call double @llvm.fma.f64(double %616, double %620, double 0x3FD99999998EF7B6)
  %622 = tail call double @llvm.fma.f64(double %616, double %621, double 0x3FE5555555555780)
  %623 = tail call double @llvm.amdgcn.ldexp.f64(double %613, i32 1)
  %624 = tail call double @llvm.amdgcn.ldexp.f64(double %615, i32 1)
  %625 = fmul double %613, %616
  %626 = fmul double %625, %622
  %627 = fadd double %623, %626
  %628 = fsub double %627, %623
  %629 = fsub double %626, %628
  %630 = fadd double %624, %629
  %631 = fadd double %627, %630
  %632 = fsub double %631, %627
  %633 = fsub double %630, %632
  %634 = sitofp i32 %588 to double
  %635 = fmul double %634, 0x3FE62E42FEFA39EF
  %636 = fneg double %635
  %637 = tail call double @llvm.fma.f64(double %634, double 0x3FE62E42FEFA39EF, double %636)
  %638 = tail call double @llvm.fma.f64(double %634, double 0x3C7ABC9E3B39803F, double %637)
  %639 = fadd double %635, %638
  %640 = fsub double %639, %635
  %641 = fsub double %638, %640
  %642 = fadd double %639, %631
  %643 = fsub double %642, %639
  %644 = fsub double %642, %643
  %645 = fsub double %639, %644
  %646 = fsub double %631, %643
  %647 = fadd double %646, %645
  %648 = fadd double %641, %633
  %649 = fsub double %648, %641
  %650 = fsub double %648, %649
  %651 = fsub double %641, %650
  %652 = fsub double %633, %649
  %653 = fadd double %652, %651
  %654 = fadd double %648, %647
  %655 = fadd double %642, %654
  %656 = fsub double %655, %642
  %657 = fsub double %654, %656
  %658 = fadd double %653, %657
  %659 = fadd double %655, %658
  %660 = tail call double @llvm.fabs.f64(double %582) #3
  %661 = fcmp oeq double %660, 0x7FF0000000000000
  %662 = select i1 %661, double %582, double %659
  %663 = fcmp oeq double %582, 0.000000e+00
  %664 = select i1 %663, double 0xFFF0000000000000, double %662
  %665 = fadd contract double %557, %664
  %666 = fmul contract double %403, %527
  %667 = fadd contract double %319, %666
  %668 = fadd contract double %527, 1.000000e+00
  %669 = fadd contract double %668, -1.000000e+00
  %670 = fadd contract double %669, 8.000000e+00
  %671 = fdiv contract double 0x3E8435508F3FAEEF, %670
  %672 = fadd contract double %671, 0.000000e+00
  %673 = fadd contract double %669, 7.000000e+00
  %674 = fdiv contract double 0x3EE4F0514E4E324F, %673
  %675 = fadd contract double %674, %672
  %676 = fadd contract double %669, 6.000000e+00
  %677 = fdiv contract double 0x3FC1BCB2992B2855, %676
  %678 = fsub contract double %675, %677
  %679 = fadd contract double %669, 5.000000e+00
  %680 = fdiv contract double 0x402903C27F8B9C81, %679
  %681 = fadd contract double %680, %678
  %682 = fadd contract double %669, 4.000000e+00
  %683 = fdiv contract double 0x406613AE51A32F5D, %682
  %684 = fsub contract double %681, %683
  %685 = fadd contract double %669, 3.000000e+00
  %686 = fdiv contract double 0x40881A9661D3B4D8, %685
  %687 = fadd contract double %686, %684
  %688 = fadd contract double %669, 2.000000e+00
  %689 = fdiv contract double 0x4093AC8E8ED4171B, %688
  %690 = fsub contract double %687, %689
  %691 = fadd contract double %669, 1.000000e+00
  %692 = fdiv contract double 0x40852429B6C30B05, %691
  %693 = fadd contract double %692, %690
  %694 = fadd contract double %693, 0x3FEFFFFFFFFFF950
  %695 = tail call double @llvm.amdgcn.frexp.mant.f64(double %694)
  %696 = fcmp olt double %695, 0x3FE5555555555555
  %697 = zext i1 %696 to i32
  %698 = tail call double @llvm.amdgcn.ldexp.f64(double %695, i32 %697)
  %699 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %694)
  %700 = sub nsw i32 %699, %697
  %701 = fadd double %698, -1.000000e+00
  %702 = fadd double %698, 1.000000e+00
  %703 = fadd double %702, -1.000000e+00
  %704 = fsub double %698, %703
  %705 = tail call double @llvm.amdgcn.rcp.f64(double %702)
  %706 = fneg double %702
  %707 = tail call double @llvm.fma.f64(double %706, double %705, double 1.000000e+00)
  %708 = tail call double @llvm.fma.f64(double %707, double %705, double %705)
  %709 = tail call double @llvm.fma.f64(double %706, double %708, double 1.000000e+00)
  %710 = tail call double @llvm.fma.f64(double %709, double %708, double %708)
  %711 = fmul double %701, %710
  %712 = fmul double %702, %711
  %713 = fneg double %712
  %714 = tail call double @llvm.fma.f64(double %711, double %702, double %713)
  %715 = tail call double @llvm.fma.f64(double %711, double %704, double %714)
  %716 = fadd double %712, %715
  %717 = fsub double %716, %712
  %718 = fsub double %715, %717
  %719 = fsub double %701, %716
  %720 = fsub double %701, %719
  %721 = fsub double %720, %716
  %722 = fsub double %721, %718
  %723 = fadd double %719, %722
  %724 = fmul double %710, %723
  %725 = fadd double %711, %724
  %726 = fsub double %725, %711
  %727 = fsub double %724, %726
  %728 = fmul double %725, %725
  %729 = tail call double @llvm.fma.f64(double %728, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %730 = tail call double @llvm.fma.f64(double %728, double %729, double 0x3FC7474DD7F4DF2E)
  %731 = tail call double @llvm.fma.f64(double %728, double %730, double 0x3FCC71C016291751)
  %732 = tail call double @llvm.fma.f64(double %728, double %731, double 0x3FD249249B27ACF1)
  %733 = tail call double @llvm.fma.f64(double %728, double %732, double 0x3FD99999998EF7B6)
  %734 = tail call double @llvm.fma.f64(double %728, double %733, double 0x3FE5555555555780)
  %735 = tail call double @llvm.amdgcn.ldexp.f64(double %725, i32 1)
  %736 = tail call double @llvm.amdgcn.ldexp.f64(double %727, i32 1)
  %737 = fmul double %725, %728
  %738 = fmul double %737, %734
  %739 = fadd double %735, %738
  %740 = fsub double %739, %735
  %741 = fsub double %738, %740
  %742 = fadd double %736, %741
  %743 = fadd double %739, %742
  %744 = fsub double %743, %739
  %745 = fsub double %742, %744
  %746 = sitofp i32 %700 to double
  %747 = fmul double %746, 0x3FE62E42FEFA39EF
  %748 = fneg double %747
  %749 = tail call double @llvm.fma.f64(double %746, double 0x3FE62E42FEFA39EF, double %748)
  %750 = tail call double @llvm.fma.f64(double %746, double 0x3C7ABC9E3B39803F, double %749)
  %751 = fadd double %747, %750
  %752 = fsub double %751, %747
  %753 = fsub double %750, %752
  %754 = fadd double %751, %743
  %755 = fsub double %754, %751
  %756 = fsub double %754, %755
  %757 = fsub double %751, %756
  %758 = fsub double %743, %755
  %759 = fadd double %758, %757
  %760 = fadd double %753, %745
  %761 = fsub double %760, %753
  %762 = fsub double %760, %761
  %763 = fsub double %753, %762
  %764 = fsub double %745, %761
  %765 = fadd double %764, %763
  %766 = fadd double %760, %759
  %767 = fadd double %754, %766
  %768 = fsub double %767, %754
  %769 = fsub double %766, %768
  %770 = fadd double %765, %769
  %771 = fadd double %767, %770
  %772 = tail call double @llvm.fabs.f64(double %694) #3
  %773 = fcmp oeq double %772, 0x7FF0000000000000
  %774 = select i1 %773, double %694, double %771
  %775 = fcmp olt double %694, 0.000000e+00
  %776 = fcmp oeq double %694, 0.000000e+00
  %777 = fadd contract double %774, 0x3FED67F1C864BEB5
  %778 = fadd contract double %777, -7.000000e+00
  %779 = select i1 %775, double 0x7FF8000000000000, double %778
  %780 = select i1 %776, double 0xFFF0000000000000, double %779
  %781 = fadd contract double %669, 5.000000e-01
  %782 = fadd contract double %673, 5.000000e-01
  %783 = fdiv contract double %782, 0x4005BF0A8B145769
  %784 = tail call double @llvm.amdgcn.frexp.mant.f64(double %783)
  %785 = fcmp olt double %784, 0x3FE5555555555555
  %786 = zext i1 %785 to i32
  %787 = tail call double @llvm.amdgcn.ldexp.f64(double %784, i32 %786)
  %788 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %783)
  %789 = sub nsw i32 %788, %786
  %790 = fadd double %787, -1.000000e+00
  %791 = fadd double %787, 1.000000e+00
  %792 = fadd double %791, -1.000000e+00
  %793 = fsub double %787, %792
  %794 = tail call double @llvm.amdgcn.rcp.f64(double %791)
  %795 = fneg double %791
  %796 = tail call double @llvm.fma.f64(double %795, double %794, double 1.000000e+00)
  %797 = tail call double @llvm.fma.f64(double %796, double %794, double %794)
  %798 = tail call double @llvm.fma.f64(double %795, double %797, double 1.000000e+00)
  %799 = tail call double @llvm.fma.f64(double %798, double %797, double %797)
  %800 = fmul double %790, %799
  %801 = fmul double %791, %800
  %802 = fneg double %801
  %803 = tail call double @llvm.fma.f64(double %800, double %791, double %802)
  %804 = tail call double @llvm.fma.f64(double %800, double %793, double %803)
  %805 = fadd double %801, %804
  %806 = fsub double %805, %801
  %807 = fsub double %804, %806
  %808 = fsub double %790, %805
  %809 = fsub double %790, %808
  %810 = fsub double %809, %805
  %811 = fsub double %810, %807
  %812 = fadd double %808, %811
  %813 = fmul double %799, %812
  %814 = fadd double %800, %813
  %815 = fsub double %814, %800
  %816 = fsub double %813, %815
  %817 = fmul double %814, %814
  %818 = tail call double @llvm.fma.f64(double %817, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %819 = tail call double @llvm.fma.f64(double %817, double %818, double 0x3FC7474DD7F4DF2E)
  %820 = tail call double @llvm.fma.f64(double %817, double %819, double 0x3FCC71C016291751)
  %821 = tail call double @llvm.fma.f64(double %817, double %820, double 0x3FD249249B27ACF1)
  %822 = tail call double @llvm.fma.f64(double %817, double %821, double 0x3FD99999998EF7B6)
  %823 = tail call double @llvm.fma.f64(double %817, double %822, double 0x3FE5555555555780)
  %824 = tail call double @llvm.amdgcn.ldexp.f64(double %814, i32 1)
  %825 = tail call double @llvm.amdgcn.ldexp.f64(double %816, i32 1)
  %826 = fmul double %814, %817
  %827 = fmul double %826, %823
  %828 = fadd double %824, %827
  %829 = fsub double %828, %824
  %830 = fsub double %827, %829
  %831 = fadd double %825, %830
  %832 = fadd double %828, %831
  %833 = fsub double %832, %828
  %834 = fsub double %831, %833
  %835 = sitofp i32 %789 to double
  %836 = fmul double %835, 0x3FE62E42FEFA39EF
  %837 = fneg double %836
  %838 = tail call double @llvm.fma.f64(double %835, double 0x3FE62E42FEFA39EF, double %837)
  %839 = tail call double @llvm.fma.f64(double %835, double 0x3C7ABC9E3B39803F, double %838)
  %840 = fadd double %836, %839
  %841 = fsub double %840, %836
  %842 = fsub double %839, %841
  %843 = fadd double %840, %832
  %844 = fsub double %843, %840
  %845 = fsub double %843, %844
  %846 = fsub double %840, %845
  %847 = fsub double %832, %844
  %848 = fadd double %847, %846
  %849 = fadd double %842, %834
  %850 = fsub double %849, %842
  %851 = fsub double %849, %850
  %852 = fsub double %842, %851
  %853 = fsub double %834, %850
  %854 = fadd double %853, %852
  %855 = fadd double %849, %848
  %856 = fadd double %843, %855
  %857 = fsub double %856, %843
  %858 = fsub double %855, %857
  %859 = fadd double %854, %858
  %860 = fadd double %856, %859
  %861 = tail call double @llvm.fabs.f64(double %783) #3
  %862 = fcmp oeq double %861, 0x7FF0000000000000
  %863 = select i1 %862, double %783, double %860
  %864 = fcmp olt double %783, 0.000000e+00
  %865 = select i1 %864, double 0x7FF8000000000000, double %863
  %866 = fcmp oeq double %783, 0.000000e+00
  %867 = select i1 %866, double 0xFFF0000000000000, double %865
  %868 = fmul contract double %781, %867
  %869 = fadd contract double %868, %780
  %870 = fsub contract double %667, %869
  %871 = fcmp contract ole double %665, %870
  %872 = fptoui double %527 to i32
  %873 = zext i1 %871 to i32
  %874 = select i1 %871, i32 %872, i32 %411
  br label %875

875:                                              ; preds = %529, %404
  %876 = phi i32 [ %546, %529 ], [ %428, %404 ]
  %877 = phi i32 [ %545, %529 ], [ %427, %404 ]
  %878 = phi i32 [ %536, %529 ], [ %418, %404 ]
  %879 = phi i32 [ %427, %529 ], [ %406, %404 ]
  %880 = phi i32 [ %418, %529 ], [ %407, %404 ]
  %881 = phi i32 [ %406, %529 ], [ %408, %404 ]
  %882 = phi i32 [ %873, %529 ], [ 2, %404 ]
  %883 = phi i32 [ %874, %529 ], [ %411, %404 ]
  switch i32 %882, label %1134 [
    i32 0, label %884
    i32 2, label %884
  ]

884:                                              ; preds = %875, %875
  br label %404, !llvm.loop !22

885:                                              ; preds = %120
  %886 = icmp eq i32 %47, 0
  br i1 %886, label %890, label %887

887:                                              ; preds = %885
  %888 = fptrunc double %49 to float
  %889 = fpext float %888 to double
  br label %1098

890:                                              ; preds = %885
  %891 = lshr i32 %50, 2
  %892 = xor i32 %891, %50
  %893 = shl i32 %46, 4
  %894 = shl i32 %892, 1
  %895 = xor i32 %894, %893
  %896 = xor i32 %895, %892
  %897 = xor i32 %896, %46
  %898 = add i32 %45, 362437
  %899 = add i32 %898, %897
  %900 = lshr i32 %51, 2
  %901 = xor i32 %900, %51
  %902 = shl i32 %897, 4
  %903 = shl i32 %901, 1
  %904 = xor i32 %903, %902
  %905 = xor i32 %904, %901
  %906 = xor i32 %905, %897
  %907 = add i32 %45, 724874
  %908 = add i32 %907, %906
  %909 = lshr i32 %52, 2
  %910 = xor i32 %909, %52
  %911 = shl i32 %906, 4
  %912 = shl i32 %910, 1
  %913 = xor i32 %912, %911
  %914 = xor i32 %913, %910
  %915 = xor i32 %914, %906
  %916 = add i32 %45, 1087311
  %917 = add i32 %916, %915
  %918 = lshr i32 %48, 2
  %919 = xor i32 %918, %48
  %920 = shl i32 %915, 4
  %921 = shl i32 %919, 1
  %922 = xor i32 %921, %920
  %923 = xor i32 %922, %919
  %924 = xor i32 %923, %915
  %925 = add i32 %45, 1449748
  %926 = add i32 %924, %925
  %927 = zext i32 %899 to i64
  %928 = zext i32 %908 to i64
  %929 = shl nuw nsw i64 %928, 21
  %930 = xor i64 %929, %927
  %931 = uitofp i64 %930 to double
  %932 = fmul contract double %931, 0x3CA0000000000000
  %933 = fadd contract double %932, 0x3CA0000000000000
  %934 = zext i32 %917 to i64
  %935 = zext i32 %926 to i64
  %936 = shl nuw nsw i64 %935, 21
  %937 = xor i64 %936, %934
  %938 = uitofp i64 %937 to double
  %939 = fmul contract double %938, 0x3CB0000000000000
  %940 = fadd contract double %939, 0x3CB0000000000000
  %941 = tail call double @llvm.amdgcn.frexp.mant.f64(double %933)
  %942 = fcmp olt double %941, 0x3FE5555555555555
  %943 = zext i1 %942 to i32
  %944 = tail call double @llvm.amdgcn.ldexp.f64(double %941, i32 %943)
  %945 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %933)
  %946 = sub nsw i32 %945, %943
  %947 = fadd double %944, -1.000000e+00
  %948 = fadd double %944, 1.000000e+00
  %949 = fadd double %948, -1.000000e+00
  %950 = fsub double %944, %949
  %951 = tail call double @llvm.amdgcn.rcp.f64(double %948)
  %952 = fneg double %948
  %953 = tail call double @llvm.fma.f64(double %952, double %951, double 1.000000e+00)
  %954 = tail call double @llvm.fma.f64(double %953, double %951, double %951)
  %955 = tail call double @llvm.fma.f64(double %952, double %954, double 1.000000e+00)
  %956 = tail call double @llvm.fma.f64(double %955, double %954, double %954)
  %957 = fmul double %947, %956
  %958 = fmul double %948, %957
  %959 = fneg double %958
  %960 = tail call double @llvm.fma.f64(double %957, double %948, double %959)
  %961 = tail call double @llvm.fma.f64(double %957, double %950, double %960)
  %962 = fadd double %958, %961
  %963 = fsub double %962, %958
  %964 = fsub double %961, %963
  %965 = fsub double %947, %962
  %966 = fsub double %947, %965
  %967 = fsub double %966, %962
  %968 = fsub double %967, %964
  %969 = fadd double %965, %968
  %970 = fmul double %956, %969
  %971 = fadd double %957, %970
  %972 = fsub double %971, %957
  %973 = fsub double %970, %972
  %974 = fmul double %971, %971
  %975 = tail call double @llvm.fma.f64(double %974, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %976 = tail call double @llvm.fma.f64(double %974, double %975, double 0x3FC7474DD7F4DF2E)
  %977 = tail call double @llvm.fma.f64(double %974, double %976, double 0x3FCC71C016291751)
  %978 = tail call double @llvm.fma.f64(double %974, double %977, double 0x3FD249249B27ACF1)
  %979 = tail call double @llvm.fma.f64(double %974, double %978, double 0x3FD99999998EF7B6)
  %980 = tail call double @llvm.fma.f64(double %974, double %979, double 0x3FE5555555555780)
  %981 = tail call double @llvm.amdgcn.ldexp.f64(double %971, i32 1)
  %982 = tail call double @llvm.amdgcn.ldexp.f64(double %973, i32 1)
  %983 = fmul double %971, %974
  %984 = fmul double %983, %980
  %985 = fadd double %981, %984
  %986 = fsub double %985, %981
  %987 = fsub double %984, %986
  %988 = fadd double %982, %987
  %989 = fadd double %985, %988
  %990 = fsub double %989, %985
  %991 = fsub double %988, %990
  %992 = sitofp i32 %946 to double
  %993 = fmul double %992, 0x3FE62E42FEFA39EF
  %994 = fneg double %993
  %995 = tail call double @llvm.fma.f64(double %992, double 0x3FE62E42FEFA39EF, double %994)
  %996 = tail call double @llvm.fma.f64(double %992, double 0x3C7ABC9E3B39803F, double %995)
  %997 = fadd double %993, %996
  %998 = fsub double %997, %993
  %999 = fsub double %996, %998
  %1000 = fadd double %997, %989
  %1001 = fsub double %1000, %997
  %1002 = fsub double %1000, %1001
  %1003 = fsub double %997, %1002
  %1004 = fsub double %989, %1001
  %1005 = fadd double %1004, %1003
  %1006 = fadd double %999, %991
  %1007 = fsub double %1006, %999
  %1008 = fsub double %1006, %1007
  %1009 = fsub double %999, %1008
  %1010 = fsub double %991, %1007
  %1011 = fadd double %1010, %1009
  %1012 = fadd double %1006, %1005
  %1013 = fadd double %1000, %1012
  %1014 = fsub double %1013, %1000
  %1015 = fsub double %1012, %1014
  %1016 = fadd double %1011, %1015
  %1017 = fadd double %1013, %1016
  %1018 = fcmp oeq double %933, 0x7FF0000000000000
  %1019 = select i1 %1018, double %933, double %1017
  %1020 = fcmp oeq double %933, 0.000000e+00
  %1021 = fmul contract double %1019, -2.000000e+00
  %1022 = select i1 %1020, double 0x7FF0000000000000, double %1021
  %1023 = fcmp olt double %1022, 0x1000000000000000
  %1024 = select i1 %1023, double 0x4FF0000000000000, double 1.000000e+00
  %1025 = fmul double %1022, %1024
  %1026 = tail call double @llvm.amdgcn.rsq.f64(double %1025)
  %1027 = fmul double %1025, %1026
  %1028 = fmul double %1026, 5.000000e-01
  %1029 = fneg double %1028
  %1030 = tail call double @llvm.fma.f64(double %1029, double %1027, double 5.000000e-01)
  %1031 = tail call double @llvm.fma.f64(double %1028, double %1030, double %1028)
  %1032 = tail call double @llvm.fma.f64(double %1027, double %1030, double %1027)
  %1033 = fneg double %1032
  %1034 = tail call double @llvm.fma.f64(double %1033, double %1032, double %1025)
  %1035 = tail call double @llvm.fma.f64(double %1034, double %1031, double %1032)
  %1036 = fneg double %1035
  %1037 = tail call double @llvm.fma.f64(double %1036, double %1035, double %1025)
  %1038 = tail call double @llvm.fma.f64(double %1037, double %1031, double %1035)
  %1039 = select i1 %1023, double 0x37F0000000000000, double 1.000000e+00
  %1040 = fmul double %1039, %1038
  %1041 = fcmp oeq double %1025, 0.000000e+00
  %1042 = fcmp oeq double %1025, 0x7FF0000000000000
  %1043 = or i1 %1041, %1042
  %1044 = select i1 %1043, double %1025, double %1040
  %1045 = fmul double %940, 5.000000e-01
  %1046 = tail call double @llvm.amdgcn.fract.f64(double %1045)
  %1047 = tail call i1 @llvm.amdgcn.class.f64(double %1045, i32 516)
  %1048 = fmul double %1046, 2.000000e+00
  %1049 = select i1 %1047, double 0.000000e+00, double %1048
  %1050 = fcmp ogt double %940, 1.000000e+00
  %1051 = select i1 %1050, double %1049, double %940
  %1052 = fmul double %1051, 2.000000e+00
  %1053 = tail call double @llvm.rint.f64(double %1052)
  %1054 = tail call double @llvm.fma.f64(double %1053, double -5.000000e-01, double %1051)
  %1055 = fptosi double %1053 to i32
  %1056 = fmul double %1054, %1054
  %1057 = tail call double @llvm.fma.f64(double %1056, double 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)
  %1058 = tail call double @llvm.fma.f64(double %1056, double %1057, double 0x3FB50782D5F14825)
  %1059 = tail call double @llvm.fma.f64(double %1056, double %1058, double 0xBFE32D2CCDFE9424)
  %1060 = tail call double @llvm.fma.f64(double %1056, double %1059, double 0x400466BC67754FFF)
  %1061 = tail call double @llvm.fma.f64(double %1056, double %1060, double 0xC014ABBCE625BE09)
  %1062 = fmul double %1054, %1056
  %1063 = fmul double %1062, %1061
  %1064 = tail call double @llvm.fma.f64(double %1054, double 0x400921FB54442D18, double %1063)
  %1065 = tail call double @llvm.fma.f64(double %1056, double 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)
  %1066 = tail call double @llvm.fma.f64(double %1056, double %1065, double 0xBF9A6D1E7294BFF9)
  %1067 = tail call double @llvm.fma.f64(double %1056, double %1066, double 0x3FCE1F5067B90B37)
  %1068 = tail call double @llvm.fma.f64(double %1056, double %1067, double 0xBFF55D3C7E3C325B)
  %1069 = tail call double @llvm.fma.f64(double %1056, double %1068, double 0x40103C1F081B5A67)
  %1070 = tail call double @llvm.fma.f64(double %1056, double %1069, double 0xC013BD3CC9BE45DE)
  %1071 = tail call double @llvm.fma.f64(double %1056, double %1070, double 1.000000e+00)
  %1072 = shl i32 %1055, 30
  %1073 = and i32 %1072, -2147483648
  %1074 = and i32 %1055, 1
  %1075 = icmp eq i32 %1074, 0
  %1076 = select i1 %1075, double %1064, double %1071
  %1077 = bitcast double %1076 to <2 x i32>
  %1078 = bitcast double %940 to <2 x i32>
  %1079 = extractelement <2 x i32> %1078, i64 1
  %1080 = and i32 %1079, -2147483648
  %1081 = extractelement <2 x i32> %1077, i64 1
  %1082 = xor i32 %1080, %1081
  %1083 = xor i32 %1082, %1073
  %1084 = insertelement <2 x i32> %1077, i32 %1083, i64 1
  %1085 = fneg double %1064
  %1086 = select i1 %1075, double %1071, double %1085
  %1087 = bitcast double %1086 to <2 x i32>
  %1088 = extractelement <2 x i32> %1087, i64 1
  %1089 = xor i32 %1088, %1073
  %1090 = insertelement <2 x i32> %1087, i32 %1089, i64 1
  %1091 = tail call i1 @llvm.amdgcn.class.f64(double %940, i32 516)
  %1092 = select i1 %1091, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %1090
  %1093 = select i1 %1091, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %1084
  %1094 = bitcast <2 x i32> %1093 to double
  %1095 = bitcast <2 x i32> %1092 to double
  %1096 = fmul contract double %1044, %1094
  %1097 = fmul contract double %1044, %1095
  br label %1098

1098:                                             ; preds = %890, %887
  %1099 = phi i32 [ %906, %890 ], [ %52, %887 ]
  %1100 = phi i32 [ %897, %890 ], [ %51, %887 ]
  %1101 = phi i32 [ %46, %890 ], [ %50, %887 ]
  %1102 = phi double [ %1097, %890 ], [ %49, %887 ]
  %1103 = phi i32 [ %915, %890 ], [ %48, %887 ]
  %1104 = phi i32 [ 1, %890 ], [ 0, %887 ]
  %1105 = phi i32 [ %924, %890 ], [ %46, %887 ]
  %1106 = phi i32 [ %925, %890 ], [ %45, %887 ]
  %1107 = phi double [ %1096, %890 ], [ %889, %887 ]
  %1108 = fcmp olt double %56, 0x1000000000000000
  %1109 = select i1 %1108, double 0x4FF0000000000000, double 1.000000e+00
  %1110 = fmul double %1109, %56
  %1111 = tail call double @llvm.amdgcn.rsq.f64(double %1110)
  %1112 = fmul double %1110, %1111
  %1113 = fmul double %1111, 5.000000e-01
  %1114 = fneg double %1113
  %1115 = tail call double @llvm.fma.f64(double %1114, double %1112, double 5.000000e-01)
  %1116 = tail call double @llvm.fma.f64(double %1113, double %1115, double %1113)
  %1117 = tail call double @llvm.fma.f64(double %1112, double %1115, double %1112)
  %1118 = fneg double %1117
  %1119 = tail call double @llvm.fma.f64(double %1118, double %1117, double %1110)
  %1120 = tail call double @llvm.fma.f64(double %1119, double %1116, double %1117)
  %1121 = fneg double %1120
  %1122 = tail call double @llvm.fma.f64(double %1121, double %1120, double %1110)
  %1123 = tail call double @llvm.fma.f64(double %1122, double %1116, double %1120)
  %1124 = select i1 %1108, double 0x37F0000000000000, double 1.000000e+00
  %1125 = fmul double %1124, %1123
  %1126 = fcmp oeq double %1110, 0.000000e+00
  %1127 = fcmp oeq double %1110, 0x7FF0000000000000
  %1128 = or i1 %1126, %1127
  %1129 = select i1 %1128, double %1110, double %1125
  %1130 = fmul contract double %1129, %1107
  %1131 = fadd contract double %1130, %56
  %1132 = tail call double @llvm.round.f64(double %1131)
  %1133 = fptoui double %1132 to i32
  br label %1134

1134:                                             ; preds = %875, %82, %1098
  %1135 = phi i32 [ %1099, %1098 ], [ %84, %82 ], [ %879, %875 ]
  %1136 = phi i32 [ %1100, %1098 ], [ %85, %82 ], [ %880, %875 ]
  %1137 = phi i32 [ %1101, %1098 ], [ %86, %82 ], [ %881, %875 ]
  %1138 = phi double [ %1102, %1098 ], [ %49, %82 ], [ %49, %875 ]
  %1139 = phi i32 [ %1103, %1098 ], [ %98, %82 ], [ %878, %875 ]
  %1140 = phi i32 [ %1104, %1098 ], [ %47, %82 ], [ %47, %875 ]
  %1141 = phi i32 [ %1105, %1098 ], [ %107, %82 ], [ %877, %875 ]
  %1142 = phi i32 [ %1106, %1098 ], [ %108, %82 ], [ %876, %875 ]
  %1143 = phi i32 [ %1133, %1098 ], [ %89, %82 ], [ %883, %875 ]
  %1144 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %53
  store i32 %1143, i32 addrspace(1)* %1144, align 4, !tbaa !23
  %1145 = add nsw i32 %44, %22
  %1146 = icmp slt i32 %1145, %0
  br i1 %1146, label %43, label %42, !llvm.loop !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.frexp.mant.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.round.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rsq.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{i16 1, i16 1025}
!6 = !{}
!7 = !{!8, !12, i64 12}
!8 = !{!"hsa_kernel_dispatch_packet_s", !9, i64 0, !9, i64 2, !9, i64 4, !9, i64 6, !9, i64 8, !9, i64 10, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !13, i64 32, !14, i64 40, !13, i64 48, !15, i64 56}
!9 = !{!"short", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!"int", !10, i64 0}
!13 = !{!"long", !10, i64 0}
!14 = !{!"any pointer", !10, i64 0}
!15 = !{!"hsa_signal_s", !13, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"float", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C++ TBAA"}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !18, i64 0}
!25 = distinct !{!25, !21}
