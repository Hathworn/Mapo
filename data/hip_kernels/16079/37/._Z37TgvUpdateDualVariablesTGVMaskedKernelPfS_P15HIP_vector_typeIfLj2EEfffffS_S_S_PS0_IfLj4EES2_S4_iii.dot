digraph "CFG for '_Z37TgvUpdateDualVariablesTGVMaskedKernelPfS_P15HIP_vector_typeIfLj2EEfffffS_S_S_PS0_IfLj4EES2_S4_iii' function" {
	label="CFG for '_Z37TgvUpdateDualVariablesTGVMaskedKernelPfS_P15HIP_vector_typeIfLj2EEfffffS_S_S_PS0_IfLj4EES2_S4_iii' function";

	Node0x64d9500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%17:\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %18, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %26 = add i32 %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %28 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 4, !range !4, !invariant.load !5\l  %31 = zext i16 %30 to i32\l  %32 = mul i32 %27, %31\l  %33 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %34 = add i32 %32, %33\l  %35 = icmp slt i32 %26, %15\l  %36 = icmp slt i32 %34, %14\l  %37 = select i1 %35, i1 true, i1 %36\l  br i1 %37, label %38, label %257\l|{<s0>T|<s1>F}}"];
	Node0x64d9500:s0 -> Node0x64ddc80;
	Node0x64d9500:s1 -> Node0x64ddd10;
	Node0x64ddc80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%38:\l38:                                               \l  %39 = mul nsw i32 %26, %16\l  %40 = add i32 %34, %39\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = fcmp contract oeq float %43, 0.000000e+00\l  br i1 %44, label %257, label %45\l|{<s0>T|<s1>F}}"];
	Node0x64ddc80:s0 -> Node0x64ddd10;
	Node0x64ddc80:s1 -> Node0x64ded80;
	Node0x64ded80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%45:\l45:                                               \l  %46 = add nsw i32 %34, 1\l  %47 = add nsw i32 %46, %39\l  %48 = add nsw i32 %26, 1\l  %49 = mul nsw i32 %48, %16\l  %50 = add nsw i32 %49, %34\l  %51 = add nsw i32 %40, -1\l  %52 = add nsw i32 %26, -1\l  %53 = mul nsw i32 %52, %16\l  %54 = add nsw i32 %53, %34\l  %55 = icmp slt i32 %46, %14\l  br i1 %55, label %56, label %60\l|{<s0>T|<s1>F}}"];
	Node0x64ded80:s0 -> Node0x64df490;
	Node0x64ded80:s1 -> Node0x64df4e0;
	Node0x64df490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%56:\l56:                                               \l  %57 = sext i32 %47 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %60\l}"];
	Node0x64df490 -> Node0x64df4e0;
	Node0x64df4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%60:\l60:                                               \l  %61 = phi float [ %59, %56 ], [ 0.000000e+00, %45 ]\l  %62 = icmp slt i32 %48, %15\l  br i1 %62, label %63, label %67\l|{<s0>T|<s1>F}}"];
	Node0x64df4e0:s0 -> Node0x64dff60;
	Node0x64df4e0:s1 -> Node0x64dffb0;
	Node0x64dff60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%63:\l63:                                               \l  %64 = sext i32 %50 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %67\l}"];
	Node0x64dff60 -> Node0x64dffb0;
	Node0x64dffb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%67:\l67:                                               \l  %68 = phi float [ %66, %63 ], [ 0.000000e+00, %60 ]\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %71 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %41, i32 0, i32 0, i32 0, i64 0\l  %72 = load float, float addrspace(1)* %71, align 8, !amdgpu.noclobber !5\l  %73 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %41, i32 0, i32 0, i32 0, i64 1\l  %74 = load float, float addrspace(1)* %73, align 4, !amdgpu.noclobber !5\l  %75 = fcmp contract une float %61, 0.000000e+00\l  br i1 %75, label %76, label %80\l|{<s0>T|<s1>F}}"];
	Node0x64dffb0:s0 -> Node0x64e0b40;
	Node0x64dffb0:s1 -> Node0x64e0b90;
	Node0x64e0b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%76:\l76:                                               \l  %77 = sext i32 %47 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %84\l}"];
	Node0x64e0b40 -> Node0x64e0e80;
	Node0x64e0b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%80:\l80:                                               \l  %81 = sext i32 %51 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %84\l}"];
	Node0x64e0b90 -> Node0x64e0e80;
	Node0x64e0e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%84:\l84:                                               \l  %85 = phi float [ %83, %80 ], [ %70, %76 ]\l  %86 = phi float [ %70, %80 ], [ %79, %76 ]\l  %87 = fsub contract float %86, %85\l  %88 = fsub contract float %87, %72\l  %89 = fcmp contract une float %68, 0.000000e+00\l  br i1 %89, label %90, label %94\l|{<s0>T|<s1>F}}"];
	Node0x64e0e80:s0 -> Node0x64e1480;
	Node0x64e0e80:s1 -> Node0x64e14d0;
	Node0x64e1480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%90:\l90:                                               \l  %91 = sext i32 %50 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %98\l}"];
	Node0x64e1480 -> Node0x64e1790;
	Node0x64e14d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%94:\l94:                                               \l  %95 = sext i32 %54 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %98\l}"];
	Node0x64e14d0 -> Node0x64e1790;
	Node0x64e1790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%98:\l98:                                               \l  %99 = phi float [ %97, %94 ], [ %70, %90 ]\l  %100 = phi float [ %70, %94 ], [ %93, %90 ]\l  %101 = fsub contract float %100, %99\l  %102 = fsub contract float %101, %74\l  %103 = getelementptr inbounds float, float addrspace(1)* %8, i64 %41\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fmul contract float %88, %104\l  %106 = getelementptr inbounds float, float addrspace(1)* %10, i64 %41\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = fmul contract float %102, %107\l  %109 = fadd contract float %105, %108\l  %110 = fmul contract float %88, %107\l  %111 = getelementptr inbounds float, float addrspace(1)* %9, i64 %41\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = fmul contract float %102, %112\l  %114 = fadd contract float %110, %113\l  %115 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %12, i64 %41, i32 0, i32 0, i32 0, i64 0\l  %116 = load float, float addrspace(1)* %115, align 8, !tbaa !11,\l... !amdgpu.noclobber !5\l  %117 = fmul contract float %4, %5\l  %118 = fdiv contract float %117, %6\l  %119 = fmul contract float %118, %109\l  %120 = fadd contract float %116, %119\l  %121 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %12, i64 %41, i32 0, i32 0, i32 0, i64 1\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %123 = fmul contract float %118, %114\l  %124 = fadd contract float %122, %123\l  %125 = fmul contract float %120, %120\l  %126 = fmul contract float %124, %124\l  %127 = fadd contract float %125, %126\l  %128 = fcmp olt float %127, 0x39F0000000000000\l  %129 = select i1 %128, float 0x41F0000000000000, float 1.000000e+00\l  %130 = fmul float %127, %129\l  %131 = tail call float @llvm.sqrt.f32(float %130)\l  %132 = bitcast float %131 to i32\l  %133 = add nsw i32 %132, -1\l  %134 = bitcast i32 %133 to float\l  %135 = add nsw i32 %132, 1\l  %136 = bitcast i32 %135 to float\l  %137 = tail call i1 @llvm.amdgcn.class.f32(float %130, i32 608)\l  %138 = select i1 %128, float 0x3EF0000000000000, float 1.000000e+00\l  %139 = fneg float %136\l  %140 = tail call float @llvm.fma.f32(float %139, float %131, float %130)\l  %141 = fcmp ogt float %140, 0.000000e+00\l  %142 = fneg float %134\l  %143 = tail call float @llvm.fma.f32(float %142, float %131, float %130)\l  %144 = fcmp ole float %143, 0.000000e+00\l  %145 = select i1 %144, float %134, float %131\l  %146 = select i1 %141, float %136, float %145\l  %147 = fmul float %138, %146\l  %148 = select i1 %137, float %130, float %147\l  %149 = fcmp contract olt float %148, 1.000000e+00\l  %150 = select i1 %149, float 1.000000e+00, float %148\l  %151 = fdiv contract float %120, %150\l  store float %151, float addrspace(1)* %115, align 8, !tbaa !11\l  %152 = fdiv contract float %124, %150\l  store float %152, float addrspace(1)* %121, align 4, !tbaa !11\l  br i1 %75, label %153, label %157\l|{<s0>T|<s1>F}}"];
	Node0x64e1790:s0 -> Node0x64e4e70;
	Node0x64e1790:s1 -> Node0x64e4f00;
	Node0x64e4e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%153:\l153:                                              \l  %154 = sext i32 %47 to i64\l  %155 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %154, i32 0, i32 0, i32 0, i64 0\l  %156 = load float, float addrspace(1)* %155, align 8, !tbaa !11\l  br label %161\l}"];
	Node0x64e4e70 -> Node0x64e5240;
	Node0x64e4f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%157:\l157:                                              \l  %158 = sext i32 %51 to i64\l  %159 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %158, i32 0, i32 0, i32 0, i64 0\l  %160 = load float, float addrspace(1)* %159, align 8, !tbaa !11\l  br label %161\l}"];
	Node0x64e4f00 -> Node0x64e5240;
	Node0x64e5240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%161:\l161:                                              \l  %162 = phi float [ %160, %157 ], [ %72, %153 ]\l  %163 = phi float [ %72, %157 ], [ %156, %153 ]\l  %164 = fsub contract float %163, %162\l  br i1 %89, label %165, label %169\l|{<s0>T|<s1>F}}"];
	Node0x64e5240:s0 -> Node0x64e57a0;
	Node0x64e5240:s1 -> Node0x64e57f0;
	Node0x64e57a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%165:\l165:                                              \l  %166 = sext i32 %50 to i64\l  %167 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %166, i32 0, i32 0, i32 0, i64 1\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !11\l  br label %173\l}"];
	Node0x64e57a0 -> Node0x64e5af0;
	Node0x64e57f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%169:\l169:                                              \l  %170 = sext i32 %54 to i64\l  %171 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %170, i32 0, i32 0, i32 0, i64 1\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !11\l  br label %173\l}"];
	Node0x64e57f0 -> Node0x64e5af0;
	Node0x64e5af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%173:\l173:                                              \l  %174 = phi float [ %172, %169 ], [ %74, %165 ]\l  %175 = phi float [ %74, %169 ], [ %168, %165 ]\l  %176 = fsub contract float %175, %174\l  br i1 %89, label %177, label %181\l|{<s0>T|<s1>F}}"];
	Node0x64e5af0:s0 -> Node0x64e6010;
	Node0x64e5af0:s1 -> Node0x64e6060;
	Node0x64e6010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%177:\l177:                                              \l  %178 = sext i32 %50 to i64\l  %179 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %178, i32 0, i32 0, i32 0, i64 0\l  %180 = load float, float addrspace(1)* %179, align 8, !tbaa !11\l  br label %185\l}"];
	Node0x64e6010 -> Node0x64e6360;
	Node0x64e6060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%181:\l181:                                              \l  %182 = sext i32 %54 to i64\l  %183 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %182, i32 0, i32 0, i32 0, i64 0\l  %184 = load float, float addrspace(1)* %183, align 8, !tbaa !11\l  br label %185\l}"];
	Node0x64e6060 -> Node0x64e6360;
	Node0x64e6360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%185:\l185:                                              \l  %186 = phi float [ %184, %181 ], [ %72, %177 ]\l  %187 = phi float [ %72, %181 ], [ %180, %177 ]\l  %188 = fsub contract float %187, %186\l  br i1 %75, label %189, label %193\l|{<s0>T|<s1>F}}"];
	Node0x64e6360:s0 -> Node0x64e6880;
	Node0x64e6360:s1 -> Node0x64e68d0;
	Node0x64e6880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%189:\l189:                                              \l  %190 = sext i32 %47 to i64\l  %191 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %190, i32 0, i32 0, i32 0, i64 1\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !11\l  br label %197\l}"];
	Node0x64e6880 -> Node0x64e6bd0;
	Node0x64e68d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%193:\l193:                                              \l  %194 = sext i32 %51 to i64\l  %195 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %194, i32 0, i32 0, i32 0, i64 1\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !11\l  br label %197\l}"];
	Node0x64e68d0 -> Node0x64e6bd0;
	Node0x64e6bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%197:\l197:                                              \l  %198 = phi float [ %196, %193 ], [ %74, %189 ]\l  %199 = phi float [ %74, %193 ], [ %192, %189 ]\l  %200 = fsub contract float %199, %198\l  %201 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %11, i64 %41, i32 0, i32 0, i32 0,\l... i64 0\l  store float %164, float addrspace(1)* %201, align 16\l  %202 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %11, i64 %41, i32 0, i32 0, i32 0,\l... i64 1\l  store float %176, float addrspace(1)* %202, align 4\l  %203 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %11, i64 %41, i32 0, i32 0, i32 0,\l... i64 2\l  store float %188, float addrspace(1)* %203, align 8\l  %204 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %11, i64 %41, i32 0, i32 0, i32 0,\l... i64 3\l  store float %200, float addrspace(1)* %204, align 4\l  %205 = fmul contract float %3, %5\l  %206 = fdiv contract float %205, %7\l  %207 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %13, i64 %41, i32 0, i32 0, i32 0,\l... i64 0\l  %208 = load float, float addrspace(1)* %207, align 16, !tbaa !11\l  %209 = fmul contract float %206, %164\l  %210 = fadd contract float %209, %208\l  %211 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %13, i64 %41, i32 0, i32 0, i32 0,\l... i64 1\l  %212 = load float, float addrspace(1)* %211, align 4, !tbaa !11\l  %213 = fmul contract float %206, %176\l  %214 = fadd contract float %213, %212\l  %215 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %13, i64 %41, i32 0, i32 0, i32 0,\l... i64 2\l  %216 = load float, float addrspace(1)* %215, align 8, !tbaa !11\l  %217 = fmul contract float %206, %188\l  %218 = fadd contract float %217, %216\l  %219 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %13, i64 %41, i32 0, i32 0, i32 0,\l... i64 3\l  %220 = load float, float addrspace(1)* %219, align 4, !tbaa !11\l  %221 = fmul contract float %206, %200\l  %222 = fadd contract float %221, %220\l  %223 = fmul contract float %210, %210\l  %224 = fmul contract float %214, %214\l  %225 = fadd contract float %223, %224\l  %226 = fmul contract float %218, %218\l  %227 = fadd contract float %225, %226\l  %228 = fmul contract float %222, %222\l  %229 = fadd contract float %227, %228\l  %230 = fcmp olt float %229, 0x39F0000000000000\l  %231 = select i1 %230, float 0x41F0000000000000, float 1.000000e+00\l  %232 = fmul float %229, %231\l  %233 = tail call float @llvm.sqrt.f32(float %232)\l  %234 = bitcast float %233 to i32\l  %235 = add nsw i32 %234, -1\l  %236 = bitcast i32 %235 to float\l  %237 = add nsw i32 %234, 1\l  %238 = bitcast i32 %237 to float\l  %239 = tail call i1 @llvm.amdgcn.class.f32(float %232, i32 608)\l  %240 = select i1 %230, float 0x3EF0000000000000, float 1.000000e+00\l  %241 = fneg float %238\l  %242 = tail call float @llvm.fma.f32(float %241, float %233, float %232)\l  %243 = fcmp ogt float %242, 0.000000e+00\l  %244 = fneg float %236\l  %245 = tail call float @llvm.fma.f32(float %244, float %233, float %232)\l  %246 = fcmp ole float %245, 0.000000e+00\l  %247 = select i1 %246, float %236, float %233\l  %248 = select i1 %243, float %238, float %247\l  %249 = fmul float %240, %248\l  %250 = select i1 %239, float %232, float %249\l  %251 = fcmp contract olt float %250, 1.000000e+00\l  %252 = select i1 %251, float 1.000000e+00, float %250\l  %253 = fdiv contract float %210, %252\l  store float %253, float addrspace(1)* %207, align 16, !tbaa !11\l  %254 = fdiv contract float %214, %252\l  store float %254, float addrspace(1)* %211, align 4, !tbaa !11\l  %255 = fdiv contract float %218, %252\l  store float %255, float addrspace(1)* %215, align 8, !tbaa !11\l  %256 = fdiv contract float %222, %252\l  store float %256, float addrspace(1)* %219, align 4, !tbaa !11\l  br label %257\l}"];
	Node0x64e6bd0 -> Node0x64ddd10;
	Node0x64ddd10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%257:\l257:                                              \l  ret void\l}"];
}
