digraph "CFG for '_Z22TgvUpscaleFloat2KerneliiifP15HIP_vector_typeIfLj2EE' function" {
	label="CFG for '_Z22TgvUpscaleFloat2KerneliiifP15HIP_vector_typeIfLj2EE' function";

	Node0x51ff0a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = icmp slt i32 %14, %0\l  %24 = icmp slt i32 %22, %1\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %82\l|{<s0>T|<s1>F}}"];
	Node0x51ff0a0:s0 -> Node0x52024a0;
	Node0x51ff0a0:s1 -> Node0x5202530;
	Node0x52024a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%26:\l26:                                               \l  %27 = sitofp i32 %14 to float\l  %28 = fadd contract float %27, 5.000000e-01\l  %29 = sitofp i32 %0 to float\l  %30 = fdiv contract float %28, %29\l  %31 = sitofp i32 %22 to float\l  %32 = fadd contract float %31, 5.000000e-01\l  %33 = sitofp i32 %1 to float\l  %34 = fdiv contract float %32, %33\l  %35 = load %struct.__hip_texture*, %struct.__hip_texture* addrspace(1)*\l... getelementptr inbounds (%struct.texture.0, %struct.texture.0 addrspace(1)*\l... @texCoarseFloat2, i64 0, i32 0, i32 11), align 8\l  %36 = bitcast %struct.__hip_texture* %35 to i32*\l  %37 = addrspacecast i32* %36 to i32 addrspace(4)*\l  %38 = getelementptr inbounds i32, i32 addrspace(4)* %37, i64 12\l  %39 = getelementptr inbounds i32, i32 addrspace(4)* %37, i64 10\l  %40 = load i32, i32 addrspace(4)* %39, align 4, !tbaa !7\l  %41 = uitofp i32 %40 to float\l  %42 = getelementptr inbounds i32, i32 addrspace(4)* %37, i64 2\l  %43 = load i32, i32 addrspace(4)* %42, align 4, !tbaa !7\l  %44 = lshr i32 %43, 14\l  %45 = and i32 %44, 16383\l  %46 = add nuw nsw i32 %45, 1\l  %47 = uitofp i32 %46 to float\l  %48 = load i32, i32 addrspace(4)* %38, align 4, !tbaa !7\l  %49 = and i32 %48, 32768\l  %50 = icmp eq i32 %49, 0\l  %51 = select i1 %50, float %41, float 1.000000e+00\l  %52 = select i1 %50, float %47, float 1.000000e+00\l  %53 = getelementptr inbounds i32, i32 addrspace(4)* %37, i64 14\l  %54 = load i32, i32 addrspace(4)* %53, align 4, !tbaa !7\l  %55 = and i32 %54, 1048576\l  %56 = icmp eq i32 %55, 0\l  %57 = bitcast i32 addrspace(4)* %38 to \<4 x i32\> addrspace(4)*\l  %58 = load \<4 x i32\>, \<4 x i32\> addrspace(4)* %57, align 16, !tbaa !11\l  %59 = bitcast %struct.__hip_texture* %35 to \<8 x i32\>*\l  %60 = addrspacecast \<8 x i32\>* %59 to \<8 x i32\> addrspace(4)*\l  %61 = load \<8 x i32\>, \<8 x i32\> addrspace(4)* %60, align 32, !tbaa !11\l  %62 = tail call float @llvm.amdgcn.rcp.f32(float %52)\l  %63 = fmul float %34, %52\l  %64 = tail call float @llvm.floor.f32(float %63)\l  %65 = fmul float %62, %64\l  %66 = select i1 %56, float %65, float %34\l  %67 = tail call float @llvm.amdgcn.rcp.f32(float %51)\l  %68 = fmul float %30, %51\l  %69 = tail call float @llvm.floor.f32(float %68)\l  %70 = fmul float %67, %69\l  %71 = select i1 %56, float %70, float %30\l  %72 = tail call \<2 x float\> @llvm.amdgcn.image.sample.lz.2d.v2f32.f32(i32 3,\l... float %71, float %66, \<8 x i32\> %61, \<4 x i32\> %58, i1 false, i32 0, i32 0)\l  %73 = extractelement \<2 x float\> %72, i64 0\l  %74 = extractelement \<2 x float\> %72, i64 1\l  %75 = fmul contract float %73, %3\l  %76 = mul nsw i32 %22, %2\l  %77 = add nsw i32 %76, %14\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %78, i32 0, i32 0, i32 0, i64 0\l  store float %75, float addrspace(1)* %79, align 8, !tbaa !12\l  %80 = fmul contract float %74, %3\l  %81 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %78, i32 0, i32 0, i32 0, i64 1\l  store float %80, float addrspace(1)* %81, align 4, !tbaa !12\l  br label %82\l}"];
	Node0x52024a0 -> Node0x5202530;
	Node0x5202530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%82:\l82:                                               \l  ret void\l}"];
}
