digraph "CFG for '_Z14matrixMulCUDA4PfS_S_j' function" {
	label="CFG for '_Z14matrixMulCUDA4PfS_S_j' function";

	Node0x5f38c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = shl nuw nsw i32 %12, 5\l  %14 = add i32 %11, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %22 = shl nuw nsw i32 %21, 5\l  %23 = add i32 %20, %22\l  %24 = add nsw i32 %23, 31\l  %25 = add nsw i32 %14, 31\l  %26 = and i32 %3, 7\l  %27 = icmp ult i32 %3, 8\l  %28 = and i32 %3, -8\l  %29 = icmp eq i32 %26, 0\l  br label %30\l}"];
	Node0x5f38c70 -> Node0x5f3cad0;
	Node0x5f3cad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = phi i32 [ %14, %4 ], [ %36, %35 ]\l  %32 = icmp ult i32 %31, %3\l  %33 = mul i32 %31, %3\l  br label %38\l}"];
	Node0x5f3cad0 -> Node0x5f3aec0;
	Node0x5f3d090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%34:\l34:                                               \l  ret void\l}"];
	Node0x5f3cc00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = add nsw i32 %31, 1\l  %37 = icmp slt i32 %31, %25\l  br i1 %37, label %30, label %34, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x5f3cc00:s0 -> Node0x5f3cad0;
	Node0x5f3cc00:s1 -> Node0x5f3d090;
	Node0x5f3aec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%38:\l38:                                               \l  %39 = phi i32 [ %23, %30 ], [ %173, %172 ]\l  %40 = icmp ult i32 %39, %3\l  %41 = select i1 %32, i1 %40, i1 false\l  br i1 %41, label %42, label %172\l|{<s0>T|<s1>F}}"];
	Node0x5f3aec0:s0 -> Node0x5f3d670;
	Node0x5f3aec0:s1 -> Node0x5f3d3c0;
	Node0x5f3d670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%42:\l42:                                               \l  br i1 %27, label %43, label %70\l|{<s0>T|<s1>F}}"];
	Node0x5f3d670:s0 -> Node0x5f3d7b0;
	Node0x5f3d670:s1 -> Node0x5f3d800;
	Node0x5f3d7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%43:\l43:                                               \l  %44 = phi float [ undef, %42 ], [ %168, %70 ]\l  %45 = phi i32 [ 0, %42 ], [ %169, %70 ]\l  %46 = phi float [ 0.000000e+00, %42 ], [ %168, %70 ]\l  br i1 %29, label %65, label %47\l|{<s0>T|<s1>F}}"];
	Node0x5f3d7b0:s0 -> Node0x5f3ea60;
	Node0x5f3d7b0:s1 -> Node0x5f3eaf0;
	Node0x5f3eaf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi i32 [ %62, %47 ], [ %45, %43 ]\l  %49 = phi float [ %61, %47 ], [ %46, %43 ]\l  %50 = phi i32 [ %63, %47 ], [ 0, %43 ]\l  %51 = add i32 %48, %33\l  %52 = zext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !9\l  %55 = mul i32 %48, %3\l  %56 = add i32 %55, %39\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !9\l  %60 = fmul contract float %54, %59\l  %61 = fadd contract float %49, %60\l  %62 = add nuw nsw i32 %48, 1\l  %63 = add i32 %50, 1\l  %64 = icmp eq i32 %63, %26\l  br i1 %64, label %65, label %47, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f3eaf0:s0 -> Node0x5f3ea60;
	Node0x5f3eaf0:s1 -> Node0x5f3eaf0;
	Node0x5f3ea60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%65:\l65:                                               \l  %66 = phi float [ %44, %43 ], [ %61, %47 ]\l  %67 = add i32 %39, %33\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  store float %66, float addrspace(1)* %69, align 4, !tbaa !9\l  br label %172\l}"];
	Node0x5f3ea60 -> Node0x5f3d3c0;
	Node0x5f3d800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%70:\l70:                                               \l  %71 = phi i32 [ %169, %70 ], [ 0, %42 ]\l  %72 = phi float [ %168, %70 ], [ 0.000000e+00, %42 ]\l  %73 = phi i32 [ %170, %70 ], [ 0, %42 ]\l  %74 = add i32 %71, %33\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !9\l  %78 = mul i32 %71, %3\l  %79 = add i32 %78, %39\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !9\l  %83 = fmul contract float %77, %82\l  %84 = fadd contract float %72, %83\l  %85 = or i32 %71, 1\l  %86 = add i32 %85, %33\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %1, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !9\l  %90 = mul i32 %85, %3\l  %91 = add i32 %90, %39\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %2, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !9\l  %95 = fmul contract float %89, %94\l  %96 = fadd contract float %84, %95\l  %97 = or i32 %71, 2\l  %98 = add i32 %97, %33\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !9\l  %102 = mul i32 %97, %3\l  %103 = add i32 %102, %39\l  %104 = zext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %2, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !9\l  %107 = fmul contract float %101, %106\l  %108 = fadd contract float %96, %107\l  %109 = or i32 %71, 3\l  %110 = add i32 %109, %33\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !9\l  %114 = mul i32 %109, %3\l  %115 = add i32 %114, %39\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !9\l  %119 = fmul contract float %113, %118\l  %120 = fadd contract float %108, %119\l  %121 = or i32 %71, 4\l  %122 = add i32 %121, %33\l  %123 = zext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !9\l  %126 = mul i32 %121, %3\l  %127 = add i32 %126, %39\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %2, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !9\l  %131 = fmul contract float %125, %130\l  %132 = fadd contract float %120, %131\l  %133 = or i32 %71, 5\l  %134 = add i32 %133, %33\l  %135 = zext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !9\l  %138 = mul i32 %133, %3\l  %139 = add i32 %138, %39\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %2, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !9\l  %143 = fmul contract float %137, %142\l  %144 = fadd contract float %132, %143\l  %145 = or i32 %71, 6\l  %146 = add i32 %145, %33\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !9\l  %150 = mul i32 %145, %3\l  %151 = add i32 %150, %39\l  %152 = zext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %2, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !9\l  %155 = fmul contract float %149, %154\l  %156 = fadd contract float %144, %155\l  %157 = or i32 %71, 7\l  %158 = add i32 %157, %33\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !9\l  %162 = mul i32 %157, %3\l  %163 = add i32 %162, %39\l  %164 = zext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %2, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !9\l  %167 = fmul contract float %161, %166\l  %168 = fadd contract float %156, %167\l  %169 = add nuw nsw i32 %71, 8\l  %170 = add i32 %73, 8\l  %171 = icmp eq i32 %170, %28\l  br i1 %171, label %43, label %70, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5f3d800:s0 -> Node0x5f3d7b0;
	Node0x5f3d800:s1 -> Node0x5f3d800;
	Node0x5f3d3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%172:\l172:                                              \l  %173 = add nsw i32 %39, 1\l  %174 = icmp slt i32 %39, %24\l  br i1 %174, label %38, label %35, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5f3d3c0:s0 -> Node0x5f3aec0;
	Node0x5f3d3c0:s1 -> Node0x5f3cc00;
}
