digraph "CFG for '_Z18max_pooling_kernelPfS_S_iiiS_i' function" {
	label="CFG for '_Z18max_pooling_kernelPfS_S_iiiS_i' function";

	Node0x5d2f060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = sdiv i32 %3, 16\l  %11 = sdiv i32 %10, %5\l  %12 = udiv i32 %9, %11\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = udiv i32 %13, %11\l  %15 = sdiv i32 %3, %5\l  %16 = sdiv i32 %15, 16\l  %17 = urem i32 %13, %16\l  %18 = shl i32 %17, 4\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %20 = add i32 %18, %19\l  %21 = urem i32 %9, %16\l  %22 = shl i32 %21, 4\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %24 = add i32 %22, %23\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !5, !invariant.load !6\l  %29 = zext i16 %28 to i32\l  %30 = mul i32 %9, %29\l  %31 = add i32 %30, %23\l  %32 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %33 = bitcast i8 addrspace(4)* %32 to i16 addrspace(4)*\l  %34 = load i16, i16 addrspace(4)* %33, align 4, !range !5, !invariant.load !6\l  %35 = zext i16 %34 to i32\l  %36 = mul i32 %13, %35\l  %37 = mul i32 %36, %31\l  %38 = add i32 %37, %19\l  %39 = urem i32 %38, %7\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %6, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %43 = mul nsw i32 %12, %4\l  %44 = mul i32 %3, %3\l  %45 = mul i32 %44, %43\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = mul i32 %44, %14\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %47, i64 %49\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %52 = getelementptr inbounds float, float addrspace(1)* %51, i64 %49\l  %53 = mul i32 %15, %15\l  %54 = icmp sgt i32 %5, 0\l  br i1 %54, label %55, label %70\l|{<s0>T|<s1>F}}"];
	Node0x5d2f060:s0 -> Node0x5d33c50;
	Node0x5d2f060:s1 -> Node0x5d33ce0;
	Node0x5d33c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%55:\l55:                                               \l  %56 = mul nsw i32 %24, %5\l  %57 = mul nsw i32 %20, %5\l  %58 = mul i32 %23, %5\l  %59 = mul i32 %19, %5\l  %60 = and i32 %5, 7\l  %61 = icmp ult i32 %5, 8\l  %62 = and i32 %5, -8\l  %63 = icmp eq i32 %60, 0\l  br label %64\l}"];
	Node0x5d33c50 -> Node0x5d34330;
	Node0x5d34330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%64:\l64:                                               \l  %65 = phi i32 [ 0, %55 ], [ %93, %92 ]\l  %66 = add nsw i32 %65, %56\l  %67 = mul nsw i32 %66, %3\l  %68 = add i32 %67, %57\l  %69 = add i32 %65, %58\l  br i1 %61, label %78, label %95\l|{<s0>T|<s1>F}}"];
	Node0x5d34330:s0 -> Node0x5d349b0;
	Node0x5d34330:s1 -> Node0x5d34a40;
	Node0x5d33ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%70:\l70:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %54, label %71, label %162\l|{<s0>T|<s1>F}}"];
	Node0x5d33ce0:s0 -> Node0x5d34e40;
	Node0x5d33ce0:s1 -> Node0x5d34ed0;
	Node0x5d34e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%71:\l71:                                               \l  %72 = mul i32 %23, %5\l  %73 = mul i32 %19, %5\l  %74 = and i32 %5, 7\l  %75 = icmp ult i32 %5, 8\l  %76 = and i32 %5, -8\l  %77 = icmp eq i32 %74, 0\l  br label %156\l}"];
	Node0x5d34e40 -> Node0x5d35370;
	Node0x5d349b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %64 ], [ %153, %95 ]\l  br i1 %63, label %92, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5d349b0:s0 -> Node0x5d32170;
	Node0x5d349b0:s1 -> Node0x5d354e0;
	Node0x5d354e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%80:\l80:                                               \l  %81 = phi i32 [ %89, %80 ], [ %79, %78 ]\l  %82 = phi i32 [ %90, %80 ], [ 0, %78 ]\l  %83 = add i32 %68, %81\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %50, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %87 = add i32 %81, %59\l  %88 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %87\l  store float %86, float addrspace(3)* %88, align 4, !tbaa !7\l  %89 = add nuw nsw i32 %81, 1\l  %90 = add i32 %82, 1\l  %91 = icmp eq i32 %90, %60\l  br i1 %91, label %92, label %80, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5d354e0:s0 -> Node0x5d32170;
	Node0x5d354e0:s1 -> Node0x5d354e0;
	Node0x5d32170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%92:\l92:                                               \l  %93 = add nuw nsw i32 %65, 1\l  %94 = icmp eq i32 %93, %5\l  br i1 %94, label %70, label %64, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5d32170:s0 -> Node0x5d33ce0;
	Node0x5d32170:s1 -> Node0x5d34330;
	Node0x5d34a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%95:\l95:                                               \l  %96 = phi i32 [ %153, %95 ], [ 0, %64 ]\l  %97 = phi i32 [ %154, %95 ], [ 0, %64 ]\l  %98 = add i32 %68, %96\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %50, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %102 = add i32 %96, %59\l  %103 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %102\l  store float %101, float addrspace(3)* %103, align 4, !tbaa !7\l  %104 = or i32 %96, 1\l  %105 = add i32 %68, %104\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %50, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %109 = add i32 %104, %59\l  %110 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %109\l  store float %108, float addrspace(3)* %110, align 4, !tbaa !7\l  %111 = or i32 %96, 2\l  %112 = add i32 %68, %111\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %50, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %116 = add i32 %111, %59\l  %117 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %116\l  store float %115, float addrspace(3)* %117, align 4, !tbaa !7\l  %118 = or i32 %96, 3\l  %119 = add i32 %68, %118\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %50, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %123 = add i32 %118, %59\l  %124 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %123\l  store float %122, float addrspace(3)* %124, align 4, !tbaa !7\l  %125 = or i32 %96, 4\l  %126 = add i32 %68, %125\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %50, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %130 = add i32 %125, %59\l  %131 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %130\l  store float %129, float addrspace(3)* %131, align 4, !tbaa !7\l  %132 = or i32 %96, 5\l  %133 = add i32 %68, %132\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %50, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %137 = add i32 %132, %59\l  %138 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %137\l  store float %136, float addrspace(3)* %138, align 4, !tbaa !7\l  %139 = or i32 %96, 6\l  %140 = add i32 %68, %139\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %50, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %144 = add i32 %139, %59\l  %145 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %144\l  store float %143, float addrspace(3)* %145, align 4, !tbaa !7\l  %146 = or i32 %96, 7\l  %147 = add i32 %68, %146\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %50, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %151 = add i32 %146, %59\l  %152 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %69, i32\l... %151\l  store float %150, float addrspace(3)* %152, align 4, !tbaa !7\l  %153 = add nuw nsw i32 %96, 8\l  %154 = add i32 %97, 8\l  %155 = icmp eq i32 %154, %62\l  br i1 %155, label %78, label %95, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5d34a40:s0 -> Node0x5d349b0;
	Node0x5d34a40:s1 -> Node0x5d34a40;
	Node0x5d35370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%156:\l156:                                              \l  %157 = phi i32 [ 0, %71 ], [ %193, %191 ]\l  %158 = phi float [ 0.000000e+00, %71 ], [ %192, %191 ]\l  %159 = add i32 %157, %72\l  br i1 %75, label %173, label %195\l|{<s0>T|<s1>F}}"];
	Node0x5d35370:s0 -> Node0x5d3a500;
	Node0x5d35370:s1 -> Node0x5d3a590;
	Node0x5d3a6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%160:\l160:                                              \l  %161 = fadd contract float %192, 1.000000e+00\l  br label %162\l}"];
	Node0x5d3a6d0 -> Node0x5d34ed0;
	Node0x5d34ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%162:\l162:                                              \l  %163 = phi float [ 1.000000e+00, %70 ], [ %161, %160 ]\l  br i1 %54, label %164, label %271\l|{<s0>T|<s1>F}}"];
	Node0x5d34ed0:s0 -> Node0x5d3a910;
	Node0x5d34ed0:s1 -> Node0x5d3a960;
	Node0x5d3a910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%164:\l164:                                              \l  %165 = mul i32 %23, %5\l  %166 = mul i32 %19, %5\l  %167 = mul nsw i32 %24, %5\l  %168 = mul nsw i32 %20, %5\l  %169 = and i32 %5, 3\l  %170 = icmp ult i32 %5, 4\l  %171 = and i32 %5, -4\l  %172 = icmp eq i32 %169, 0\l  br label %265\l}"];
	Node0x5d3a910 -> Node0x5d3af20;
	Node0x5d3a500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%173:\l173:                                              \l  %174 = phi float [ undef, %156 ], [ %261, %195 ]\l  %175 = phi i32 [ 0, %156 ], [ %262, %195 ]\l  %176 = phi float [ %158, %156 ], [ %261, %195 ]\l  br i1 %77, label %191, label %177\l|{<s0>T|<s1>F}}"];
	Node0x5d3a500:s0 -> Node0x5d36c80;
	Node0x5d3a500:s1 -> Node0x5d3b290;
	Node0x5d3b290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%177:\l177:                                              \l  %178 = phi i32 [ %188, %177 ], [ %175, %173 ]\l  %179 = phi float [ %187, %177 ], [ %176, %173 ]\l  %180 = phi i32 [ %189, %177 ], [ 0, %173 ]\l  %181 = add i32 %178, %73\l  %182 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %181\l  %183 = load float, float addrspace(3)* %182, align 4, !tbaa !7\l  %184 = fcmp contract ogt float %183, 5.000000e+01\l  %185 = select i1 %184, float 5.000000e+01, float %183\l  %186 = tail call float @llvm.exp.f32(float %185)\l  store float %186, float addrspace(3)* %182, align 4, !tbaa !7\l  %187 = fadd contract float %179, %186\l  %188 = add nuw nsw i32 %178, 1\l  %189 = add i32 %180, 1\l  %190 = icmp eq i32 %189, %74\l  br i1 %190, label %191, label %177, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5d3b290:s0 -> Node0x5d36c80;
	Node0x5d3b290:s1 -> Node0x5d3b290;
	Node0x5d36c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%191:\l191:                                              \l  %192 = phi float [ %174, %173 ], [ %187, %177 ]\l  %193 = add nuw nsw i32 %157, 1\l  %194 = icmp eq i32 %193, %5\l  br i1 %194, label %160, label %156, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5d36c80:s0 -> Node0x5d3a6d0;
	Node0x5d36c80:s1 -> Node0x5d35370;
	Node0x5d3a590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%195:\l195:                                              \l  %196 = phi i32 [ %262, %195 ], [ 0, %156 ]\l  %197 = phi float [ %261, %195 ], [ %158, %156 ]\l  %198 = phi i32 [ %263, %195 ], [ 0, %156 ]\l  %199 = add i32 %196, %73\l  %200 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %199\l  %201 = load float, float addrspace(3)* %200, align 4, !tbaa !7\l  %202 = fcmp contract ogt float %201, 5.000000e+01\l  %203 = select i1 %202, float 5.000000e+01, float %201\l  %204 = tail call float @llvm.exp.f32(float %203)\l  store float %204, float addrspace(3)* %200, align 4, !tbaa !7\l  %205 = fadd contract float %197, %204\l  %206 = or i32 %196, 1\l  %207 = add i32 %206, %73\l  %208 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %207\l  %209 = load float, float addrspace(3)* %208, align 4, !tbaa !7\l  %210 = fcmp contract ogt float %209, 5.000000e+01\l  %211 = select i1 %210, float 5.000000e+01, float %209\l  %212 = tail call float @llvm.exp.f32(float %211)\l  store float %212, float addrspace(3)* %208, align 4, !tbaa !7\l  %213 = fadd contract float %205, %212\l  %214 = or i32 %196, 2\l  %215 = add i32 %214, %73\l  %216 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %215\l  %217 = load float, float addrspace(3)* %216, align 4, !tbaa !7\l  %218 = fcmp contract ogt float %217, 5.000000e+01\l  %219 = select i1 %218, float 5.000000e+01, float %217\l  %220 = tail call float @llvm.exp.f32(float %219)\l  store float %220, float addrspace(3)* %216, align 4, !tbaa !7\l  %221 = fadd contract float %213, %220\l  %222 = or i32 %196, 3\l  %223 = add i32 %222, %73\l  %224 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %223\l  %225 = load float, float addrspace(3)* %224, align 4, !tbaa !7\l  %226 = fcmp contract ogt float %225, 5.000000e+01\l  %227 = select i1 %226, float 5.000000e+01, float %225\l  %228 = tail call float @llvm.exp.f32(float %227)\l  store float %228, float addrspace(3)* %224, align 4, !tbaa !7\l  %229 = fadd contract float %221, %228\l  %230 = or i32 %196, 4\l  %231 = add i32 %230, %73\l  %232 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %231\l  %233 = load float, float addrspace(3)* %232, align 4, !tbaa !7\l  %234 = fcmp contract ogt float %233, 5.000000e+01\l  %235 = select i1 %234, float 5.000000e+01, float %233\l  %236 = tail call float @llvm.exp.f32(float %235)\l  store float %236, float addrspace(3)* %232, align 4, !tbaa !7\l  %237 = fadd contract float %229, %236\l  %238 = or i32 %196, 5\l  %239 = add i32 %238, %73\l  %240 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %239\l  %241 = load float, float addrspace(3)* %240, align 4, !tbaa !7\l  %242 = fcmp contract ogt float %241, 5.000000e+01\l  %243 = select i1 %242, float 5.000000e+01, float %241\l  %244 = tail call float @llvm.exp.f32(float %243)\l  store float %244, float addrspace(3)* %240, align 4, !tbaa !7\l  %245 = fadd contract float %237, %244\l  %246 = or i32 %196, 6\l  %247 = add i32 %246, %73\l  %248 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %247\l  %249 = load float, float addrspace(3)* %248, align 4, !tbaa !7\l  %250 = fcmp contract ogt float %249, 5.000000e+01\l  %251 = select i1 %250, float 5.000000e+01, float %249\l  %252 = tail call float @llvm.exp.f32(float %251)\l  store float %252, float addrspace(3)* %248, align 4, !tbaa !7\l  %253 = fadd contract float %245, %252\l  %254 = or i32 %196, 7\l  %255 = add i32 %254, %73\l  %256 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %159,\l... i32 %255\l  %257 = load float, float addrspace(3)* %256, align 4, !tbaa !7\l  %258 = fcmp contract ogt float %257, 5.000000e+01\l  %259 = select i1 %258, float 5.000000e+01, float %257\l  %260 = tail call float @llvm.exp.f32(float %259)\l  store float %260, float addrspace(3)* %256, align 4, !tbaa !7\l  %261 = fadd contract float %253, %260\l  %262 = add nuw nsw i32 %196, 8\l  %263 = add i32 %198, 8\l  %264 = icmp eq i32 %263, %76\l  br i1 %264, label %173, label %195, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5d3a590:s0 -> Node0x5d3a500;
	Node0x5d3a590:s1 -> Node0x5d3a590;
	Node0x5d3af20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%265:\l265:                                              \l  %266 = phi i32 [ 0, %164 ], [ %295, %294 ]\l  %267 = add i32 %266, %165\l  %268 = add nsw i32 %266, %167\l  %269 = mul nsw i32 %268, %3\l  %270 = add i32 %269, %168\l  br i1 %170, label %278, label %297\l|{<s0>T|<s1>F}}"];
	Node0x5d3af20:s0 -> Node0x5d38700;
	Node0x5d3af20:s1 -> Node0x5d40290;
	Node0x5d3a960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%271:\l271:                                              \l  %272 = icmp slt i32 %5, 1\l  br i1 %272, label %366, label %273\l|{<s0>T|<s1>F}}"];
	Node0x5d3a960:s0 -> Node0x5d40460;
	Node0x5d3a960:s1 -> Node0x5d404b0;
	Node0x5d404b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%273:\l273:                                              \l  %274 = mul i32 %23, %5\l  %275 = mul i32 %19, %5\l  %276 = mul nsw i32 %24, %5\l  %277 = mul nsw i32 %20, %5\l  br label %338\l}"];
	Node0x5d404b0 -> Node0x5d40830;
	Node0x5d38700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%278:\l278:                                              \l  %279 = phi i32 [ 0, %265 ], [ %335, %297 ]\l  br i1 %172, label %294, label %280\l|{<s0>T|<s1>F}}"];
	Node0x5d38700:s0 -> Node0x5d385c0;
	Node0x5d38700:s1 -> Node0x5d409a0;
	Node0x5d409a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%280:\l280:                                              \l  %281 = phi i32 [ %291, %280 ], [ %279, %278 ]\l  %282 = phi i32 [ %292, %280 ], [ 0, %278 ]\l  %283 = add i32 %281, %166\l  %284 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %267,\l... i32 %283\l  %285 = load float, float addrspace(3)* %284, align 4, !tbaa !7\l  %286 = fdiv contract float %285, %163\l  store float %286, float addrspace(3)* %284, align 4, !tbaa !7\l  %287 = add i32 %270, %281\l  %288 = sext i32 %287 to i64\l  %289 = getelementptr inbounds float, float addrspace(1)* %52, i64 %288\l  store float %286, float addrspace(1)* %289, align 4, !tbaa !7\l  %290 = getelementptr inbounds float, float addrspace(1)* %50, i64 %288\l  store float 0.000000e+00, float addrspace(1)* %290, align 4, !tbaa !7\l  %291 = add nuw nsw i32 %281, 1\l  %292 = add i32 %282, 1\l  %293 = icmp eq i32 %292, %169\l  br i1 %293, label %294, label %280, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5d409a0:s0 -> Node0x5d385c0;
	Node0x5d409a0:s1 -> Node0x5d409a0;
	Node0x5d385c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%294:\l294:                                              \l  %295 = add nuw nsw i32 %266, 1\l  %296 = icmp eq i32 %295, %5\l  br i1 %296, label %271, label %265, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5d385c0:s0 -> Node0x5d3a960;
	Node0x5d385c0:s1 -> Node0x5d3af20;
	Node0x5d40290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%297:\l297:                                              \l  %298 = phi i32 [ %335, %297 ], [ 0, %265 ]\l  %299 = phi i32 [ %336, %297 ], [ 0, %265 ]\l  %300 = add i32 %298, %166\l  %301 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %267,\l... i32 %300\l  %302 = load float, float addrspace(3)* %301, align 4, !tbaa !7\l  %303 = fdiv contract float %302, %163\l  store float %303, float addrspace(3)* %301, align 4, !tbaa !7\l  %304 = add i32 %270, %298\l  %305 = sext i32 %304 to i64\l  %306 = getelementptr inbounds float, float addrspace(1)* %52, i64 %305\l  store float %303, float addrspace(1)* %306, align 4, !tbaa !7\l  %307 = getelementptr inbounds float, float addrspace(1)* %50, i64 %305\l  store float 0.000000e+00, float addrspace(1)* %307, align 4, !tbaa !7\l  %308 = or i32 %298, 1\l  %309 = add i32 %308, %166\l  %310 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %267,\l... i32 %309\l  %311 = load float, float addrspace(3)* %310, align 4, !tbaa !7\l  %312 = fdiv contract float %311, %163\l  store float %312, float addrspace(3)* %310, align 4, !tbaa !7\l  %313 = add i32 %270, %308\l  %314 = sext i32 %313 to i64\l  %315 = getelementptr inbounds float, float addrspace(1)* %52, i64 %314\l  store float %312, float addrspace(1)* %315, align 4, !tbaa !7\l  %316 = getelementptr inbounds float, float addrspace(1)* %50, i64 %314\l  store float 0.000000e+00, float addrspace(1)* %316, align 4, !tbaa !7\l  %317 = or i32 %298, 2\l  %318 = add i32 %317, %166\l  %319 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %267,\l... i32 %318\l  %320 = load float, float addrspace(3)* %319, align 4, !tbaa !7\l  %321 = fdiv contract float %320, %163\l  store float %321, float addrspace(3)* %319, align 4, !tbaa !7\l  %322 = add i32 %270, %317\l  %323 = sext i32 %322 to i64\l  %324 = getelementptr inbounds float, float addrspace(1)* %52, i64 %323\l  store float %321, float addrspace(1)* %324, align 4, !tbaa !7\l  %325 = getelementptr inbounds float, float addrspace(1)* %50, i64 %323\l  store float 0.000000e+00, float addrspace(1)* %325, align 4, !tbaa !7\l  %326 = or i32 %298, 3\l  %327 = add i32 %326, %166\l  %328 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %267,\l... i32 %327\l  %329 = load float, float addrspace(3)* %328, align 4, !tbaa !7\l  %330 = fdiv contract float %329, %163\l  store float %330, float addrspace(3)* %328, align 4, !tbaa !7\l  %331 = add i32 %270, %326\l  %332 = sext i32 %331 to i64\l  %333 = getelementptr inbounds float, float addrspace(1)* %52, i64 %332\l  store float %330, float addrspace(1)* %333, align 4, !tbaa !7\l  %334 = getelementptr inbounds float, float addrspace(1)* %50, i64 %332\l  store float 0.000000e+00, float addrspace(1)* %334, align 4, !tbaa !7\l  %335 = add nuw nsw i32 %298, 4\l  %336 = add i32 %299, 4\l  %337 = icmp eq i32 %336, %171\l  br i1 %337, label %278, label %297, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5d40290:s0 -> Node0x5d38700;
	Node0x5d40290:s1 -> Node0x5d40290;
	Node0x5d40830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%338:\l338:                                              \l  %339 = phi i32 [ 0, %273 ], [ %347, %346 ]\l  %340 = phi float [ 0.000000e+00, %273 ], [ %356, %346 ]\l  %341 = add i32 %339, %274\l  %342 = add nsw i32 %339, %276\l  %343 = mul nsw i32 %342, %3\l  %344 = add i32 %343, %277\l  br label %350\l}"];
	Node0x5d40830 -> Node0x5d44cb0;
	Node0x5d44db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%345:\l345:                                              \l  br i1 %357, label %367, label %366\l|{<s0>T|<s1>F}}"];
	Node0x5d44db0:s0 -> Node0x5d44e40;
	Node0x5d44db0:s1 -> Node0x5d40460;
	Node0x5d309f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%346:\l346:                                              \l  %347 = add nuw nsw i32 %339, 1\l  %348 = icmp sge i32 %347, %5\l  %349 = select i1 %348, i1 true, i1 %357\l  br i1 %349, label %345, label %338, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5d309f0:s0 -> Node0x5d44db0;
	Node0x5d309f0:s1 -> Node0x5d40830;
	Node0x5d44cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%350:\l350:                                              \l  %351 = phi i32 [ 0, %338 ], [ %363, %362 ]\l  %352 = phi float [ %340, %338 ], [ %356, %362 ]\l  %353 = add i32 %351, %275\l  %354 = getelementptr inbounds [48 x [48 x float]], [48 x [48 x float]]\l... addrspace(3)* @_ZZ18max_pooling_kernelPfS_S_iiiS_iE4shFm, i32 0, i32 %341,\l... i32 %353\l  %355 = load float, float addrspace(3)* %354, align 4, !tbaa !7\l  %356 = fadd contract float %352, %355\l  %357 = fcmp contract olt float %42, %356\l  br i1 %357, label %358, label %362\l|{<s0>T|<s1>F}}"];
	Node0x5d44cb0:s0 -> Node0x5d45540;
	Node0x5d44cb0:s1 -> Node0x5d452c0;
	Node0x5d45540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%358:\l358:                                              \l  %359 = add i32 %344, %351\l  %360 = sext i32 %359 to i64\l  %361 = getelementptr inbounds float, float addrspace(1)* %50, i64 %360\l  store float 1.000000e+00, float addrspace(1)* %361, align 4, !tbaa !7\l  br label %362\l}"];
	Node0x5d45540 -> Node0x5d452c0;
	Node0x5d452c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%362:\l362:                                              \l  %363 = add nuw nsw i32 %351, 1\l  %364 = icmp sge i32 %363, %5\l  %365 = select i1 %364, i1 true, i1 %357\l  br i1 %365, label %346, label %350, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5d452c0:s0 -> Node0x5d309f0;
	Node0x5d452c0:s1 -> Node0x5d44cb0;
	Node0x5d40460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%366:\l366:                                              \l  br label %367\l}"];
	Node0x5d40460 -> Node0x5d44e40;
	Node0x5d44e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%367:\l367:                                              \l  %368 = phi float [ 0.000000e+00, %366 ], [ 1.000000e+00, %345 ]\l  %369 = mul i32 %53, %43\l  %370 = sext i32 %369 to i64\l  %371 = getelementptr inbounds float, float addrspace(1)* %2, i64 %370\l  %372 = mul i32 %53, %14\l  %373 = sext i32 %372 to i64\l  %374 = getelementptr inbounds float, float addrspace(1)* %371, i64 %373\l  %375 = mul i32 %15, %23\l  %376 = add i32 %375, %19\l  %377 = zext i32 %376 to i64\l  %378 = getelementptr inbounds float, float addrspace(1)* %374, i64 %377\l  store float %368, float addrspace(1)* %378, align 4, !tbaa !7\l  ret void\l}"];
}
