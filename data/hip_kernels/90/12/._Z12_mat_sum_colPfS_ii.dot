digraph "CFG for '_Z12_mat_sum_colPfS_ii' function" {
	label="CFG for '_Z12_mat_sum_colPfS_ii' function";

	Node0x53e4fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %3\l  br i1 %14, label %15, label %106\l|{<s0>T|<s1>F}}"];
	Node0x53e4fd0:s0 -> Node0x53e6ee0;
	Node0x53e4fd0:s1 -> Node0x53e6f70;
	Node0x53e6ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = icmp sgt i32 %2, 0\l  br i1 %16, label %17, label %40\l|{<s0>T|<s1>F}}"];
	Node0x53e6ee0:s0 -> Node0x53e5b80;
	Node0x53e6ee0:s1 -> Node0x53e7250;
	Node0x53e5b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = and i32 %2, 7\l  %19 = icmp ult i32 %2, 8\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x53e5b80:s0 -> Node0x53e74d0;
	Node0x53e5b80:s1 -> Node0x53e7520;
	Node0x53e7520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%20:\l20:                                               \l  %21 = and i32 %2, -8\l  br label %44\l}"];
	Node0x53e7520 -> Node0x53e7720;
	Node0x53e74d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = phi float [ undef, %17 ], [ %102, %44 ]\l  %24 = phi i32 [ 0, %17 ], [ %103, %44 ]\l  %25 = phi float [ 0.000000e+00, %17 ], [ %102, %44 ]\l  %26 = icmp eq i32 %18, 0\l  br i1 %26, label %40, label %27\l|{<s0>T|<s1>F}}"];
	Node0x53e74d0:s0 -> Node0x53e7250;
	Node0x53e74d0:s1 -> Node0x53e8990;
	Node0x53e8990 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi i32 [ %37, %27 ], [ %24, %22 ]\l  %29 = phi float [ %36, %27 ], [ %25, %22 ]\l  %30 = phi i32 [ %38, %27 ], [ 0, %22 ]\l  %31 = mul nsw i32 %28, %3\l  %32 = add nsw i32 %31, %13\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = fadd contract float %29, %35\l  %37 = add nuw nsw i32 %28, 1\l  %38 = add i32 %30, 1\l  %39 = icmp eq i32 %38, %18\l  br i1 %39, label %40, label %27, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x53e8990:s0 -> Node0x53e7250;
	Node0x53e8990:s1 -> Node0x53e8990;
	Node0x53e7250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %15 ], [ %23, %22 ], [ %36, %27 ]\l  %42 = sext i32 %13 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %1, i64 %42\l  store float %41, float addrspace(1)* %43, align 4, !tbaa !7\l  br label %106\l}"];
	Node0x53e7250 -> Node0x53e6f70;
	Node0x53e7720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%44:\l44:                                               \l  %45 = phi i32 [ 0, %20 ], [ %103, %44 ]\l  %46 = phi float [ 0.000000e+00, %20 ], [ %102, %44 ]\l  %47 = phi i32 [ 0, %20 ], [ %104, %44 ]\l  %48 = mul nsw i32 %45, %3\l  %49 = add nsw i32 %48, %13\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fadd contract float %46, %52\l  %54 = or i32 %45, 1\l  %55 = mul nsw i32 %54, %3\l  %56 = add nsw i32 %55, %13\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %60 = fadd contract float %53, %59\l  %61 = or i32 %45, 2\l  %62 = mul nsw i32 %61, %3\l  %63 = add nsw i32 %62, %13\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = fadd contract float %60, %66\l  %68 = or i32 %45, 3\l  %69 = mul nsw i32 %68, %3\l  %70 = add nsw i32 %69, %13\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = fadd contract float %67, %73\l  %75 = or i32 %45, 4\l  %76 = mul nsw i32 %75, %3\l  %77 = add nsw i32 %76, %13\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = fadd contract float %74, %80\l  %82 = or i32 %45, 5\l  %83 = mul nsw i32 %82, %3\l  %84 = add nsw i32 %83, %13\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = fadd contract float %81, %87\l  %89 = or i32 %45, 6\l  %90 = mul nsw i32 %89, %3\l  %91 = add nsw i32 %90, %13\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = fadd contract float %88, %94\l  %96 = or i32 %45, 7\l  %97 = mul nsw i32 %96, %3\l  %98 = add nsw i32 %97, %13\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fadd contract float %95, %101\l  %103 = add nuw nsw i32 %45, 8\l  %104 = add i32 %47, 8\l  %105 = icmp eq i32 %104, %21\l  br i1 %105, label %22, label %44, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x53e7720:s0 -> Node0x53e74d0;
	Node0x53e7720:s1 -> Node0x53e7720;
	Node0x53e6f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%106:\l106:                                              \l  ret void\l}"];
}
