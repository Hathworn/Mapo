digraph "CFG for '_Z21set_segmented_nnz_numPiS_S_S_S_mmiii' function" {
	label="CFG for '_Z21set_segmented_nnz_numPiS_S_S_S_mmiii' function";

	Node0x5b52d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %7\l  br i1 %20, label %21, label %136\l|{<s0>T|<s1>F}}"];
	Node0x5b52d50:s0 -> Node0x5b55830;
	Node0x5b52d50:s1 -> Node0x5b558c0;
	Node0x5b55830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%21:\l21:                                               \l  %22 = add nsw i32 %19, 1\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %23\l  %25 = load i32, i32 addrspace(1)* %24, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %26 = sext i32 %19 to i64\l  %27 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %26\l  %28 = load i32, i32 addrspace(1)* %27, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %29 = sub nsw i32 %25, %28\l  %30 = icmp sgt i32 %29, 0\l  br i1 %30, label %31, label %136\l|{<s0>T|<s1>F}}"];
	Node0x5b55830:s0 -> Node0x5b56cc0;
	Node0x5b55830:s1 -> Node0x5b558c0;
	Node0x5b56cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = xor i32 %28, -1\l  %33 = add i32 %25, %32\l  %34 = and i32 %29, 3\l  %35 = icmp ult i32 %33, 3\l  br i1 %35, label %111, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5b56cc0:s0 -> Node0x5b55370;
	Node0x5b56cc0:s1 -> Node0x5b571f0;
	Node0x5b571f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%36:\l36:                                               \l  %37 = and i32 %29, -4\l  br label %38\l}"];
	Node0x5b571f0 -> Node0x5b573f0;
	Node0x5b573f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%38:\l38:                                               \l  %39 = phi i32 [ 0, %36 ], [ %108, %38 ]\l  %40 = phi i32 [ 0, %36 ], [ %109, %38 ]\l  %41 = add nsw i32 %39, %28\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %42\l  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !7\l  %45 = sext i32 %44 to i64\l  %46 = udiv i64 %45, %5\l  %47 = trunc i64 %46 to i32\l  %48 = mul nsw i32 %47, %8\l  %49 = add nsw i32 %48, %19\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %50\l  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !7\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %42\l  store i32 %52, i32 addrspace(1)* %53, align 4, !tbaa !7\l  %54 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !7\l  %55 = add nsw i32 %54, 1\l  store i32 %55, i32 addrspace(1)* %51, align 4, !tbaa !7\l  %56 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %42\l  store i32 %47, i32 addrspace(1)* %56, align 4, !tbaa !7\l  %57 = or i32 %39, 1\l  %58 = add nsw i32 %57, %28\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %59\l  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !7\l  %62 = sext i32 %61 to i64\l  %63 = udiv i64 %62, %5\l  %64 = trunc i64 %63 to i32\l  %65 = mul nsw i32 %64, %8\l  %66 = add nsw i32 %65, %19\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %67\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !7\l  %70 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %59\l  store i32 %69, i32 addrspace(1)* %70, align 4, !tbaa !7\l  %71 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !7\l  %72 = add nsw i32 %71, 1\l  store i32 %72, i32 addrspace(1)* %68, align 4, !tbaa !7\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %59\l  store i32 %64, i32 addrspace(1)* %73, align 4, !tbaa !7\l  %74 = or i32 %39, 2\l  %75 = add nsw i32 %74, %28\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %76\l  %78 = load i32, i32 addrspace(1)* %77, align 4, !tbaa !7\l  %79 = sext i32 %78 to i64\l  %80 = udiv i64 %79, %5\l  %81 = trunc i64 %80 to i32\l  %82 = mul nsw i32 %81, %8\l  %83 = add nsw i32 %82, %19\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %84\l  %86 = load i32, i32 addrspace(1)* %85, align 4, !tbaa !7\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %76\l  store i32 %86, i32 addrspace(1)* %87, align 4, !tbaa !7\l  %88 = load i32, i32 addrspace(1)* %85, align 4, !tbaa !7\l  %89 = add nsw i32 %88, 1\l  store i32 %89, i32 addrspace(1)* %85, align 4, !tbaa !7\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %76\l  store i32 %81, i32 addrspace(1)* %90, align 4, !tbaa !7\l  %91 = or i32 %39, 3\l  %92 = add nsw i32 %91, %28\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %93\l  %95 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !7\l  %96 = sext i32 %95 to i64\l  %97 = udiv i64 %96, %5\l  %98 = trunc i64 %97 to i32\l  %99 = mul nsw i32 %98, %8\l  %100 = add nsw i32 %99, %19\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %101\l  %103 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !7\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %93\l  store i32 %103, i32 addrspace(1)* %104, align 4, !tbaa !7\l  %105 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !7\l  %106 = add nsw i32 %105, 1\l  store i32 %106, i32 addrspace(1)* %102, align 4, !tbaa !7\l  %107 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %93\l  store i32 %98, i32 addrspace(1)* %107, align 4, !tbaa !7\l  %108 = add nuw nsw i32 %39, 4\l  %109 = add i32 %40, 4\l  %110 = icmp eq i32 %109, %37\l  br i1 %110, label %111, label %38, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5b573f0:s0 -> Node0x5b55370;
	Node0x5b573f0:s1 -> Node0x5b573f0;
	Node0x5b55370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%111:\l111:                                              \l  %112 = phi i32 [ 0, %31 ], [ %108, %38 ]\l  %113 = icmp eq i32 %34, 0\l  br i1 %113, label %136, label %114\l|{<s0>T|<s1>F}}"];
	Node0x5b55370:s0 -> Node0x5b558c0;
	Node0x5b55370:s1 -> Node0x5b5a770;
	Node0x5b5a770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%114:\l114:                                              \l  %115 = phi i32 [ %133, %114 ], [ %112, %111 ]\l  %116 = phi i32 [ %134, %114 ], [ 0, %111 ]\l  %117 = add nsw i32 %115, %28\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %118\l  %120 = load i32, i32 addrspace(1)* %119, align 4, !tbaa !7\l  %121 = sext i32 %120 to i64\l  %122 = udiv i64 %121, %5\l  %123 = trunc i64 %122 to i32\l  %124 = mul nsw i32 %123, %8\l  %125 = add nsw i32 %124, %19\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %126\l  %128 = load i32, i32 addrspace(1)* %127, align 4, !tbaa !7\l  %129 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %118\l  store i32 %128, i32 addrspace(1)* %129, align 4, !tbaa !7\l  %130 = load i32, i32 addrspace(1)* %127, align 4, !tbaa !7\l  %131 = add nsw i32 %130, 1\l  store i32 %131, i32 addrspace(1)* %127, align 4, !tbaa !7\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %118\l  store i32 %123, i32 addrspace(1)* %132, align 4, !tbaa !7\l  %133 = add nuw nsw i32 %115, 1\l  %134 = add i32 %116, 1\l  %135 = icmp eq i32 %134, %34\l  br i1 %135, label %136, label %114, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5b5a770:s0 -> Node0x5b558c0;
	Node0x5b5a770:s1 -> Node0x5b5a770;
	Node0x5b558c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%136:\l136:                                              \l  ret void\l}"];
}
