digraph "CFG for '_Z18sobelfilter_kerneliiPhS_' function" {
	label="CFG for '_Z18sobelfilter_kerneliiPhS_' function";

	Node0x4881360 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %13, 0\l  br i1 %22, label %23, label %122\l|{<s0>T|<s1>F}}"];
	Node0x4881360:s0 -> Node0x4884cc0;
	Node0x4881360:s1 -> Node0x4884d50;
	Node0x4884cc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e36c5570",label="{%23:\l23:                                               \l  %24 = add nsw i32 %0, -1\l  %25 = icmp slt i32 %13, %24\l  %26 = icmp sgt i32 %21, 0\l  %27 = select i1 %25, i1 %26, i1 false\l  %28 = add nsw i32 %1, -1\l  %29 = icmp slt i32 %21, %28\l  %30 = select i1 %27, i1 %29, i1 false\l  br i1 %30, label %31, label %122\l|{<s0>T|<s1>F}}"];
	Node0x4884cc0:s0 -> Node0x4885320;
	Node0x4884cc0:s1 -> Node0x4884d50;
	Node0x4885320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%31:\l31:                                               \l  %32 = add nsw i32 %21, -1\l  %33 = mul nsw i32 %32, %0\l  %34 = add nsw i32 %13, -1\l  %35 = add nsw i32 %33, %34\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %36\l  %38 = load i8, i8 addrspace(1)* %37, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %39 = zext i8 %38 to i32\l  %40 = add nuw nsw i32 %13, 1\l  %41 = add nsw i32 %33, %40\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %42\l  %44 = load i8, i8 addrspace(1)* %43, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %45 = zext i8 %44 to i32\l  %46 = mul nsw i32 %21, %0\l  %47 = add nsw i32 %46, %34\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %48\l  %50 = load i8, i8 addrspace(1)* %49, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %51 = zext i8 %50 to i32\l  %52 = add nsw i32 %46, %40\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %53\l  %55 = load i8, i8 addrspace(1)* %54, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %56 = zext i8 %55 to i32\l  %57 = add nuw nsw i32 %21, 1\l  %58 = mul nsw i32 %57, %0\l  %59 = add nsw i32 %58, %34\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %60\l  %62 = load i8, i8 addrspace(1)* %61, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %63 = zext i8 %62 to i32\l  %64 = add nsw i32 %58, %40\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %65\l  %67 = load i8, i8 addrspace(1)* %66, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %68 = zext i8 %67 to i32\l  %69 = sub nsw i32 %56, %51\l  %70 = shl nsw i32 %69, 1\l  %71 = add nuw nsw i32 %39, %63\l  %72 = sub nsw i32 %45, %71\l  %73 = add nsw i32 %72, %68\l  %74 = add nsw i32 %73, %70\l  %75 = add nsw i32 %33, %13\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %76\l  %78 = load i8, i8 addrspace(1)* %77, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %79 = zext i8 %78 to i32\l  %80 = add nsw i32 %58, %13\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %81\l  %83 = load i8, i8 addrspace(1)* %82, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %84 = zext i8 %83 to i32\l  %85 = sub nsw i32 %84, %79\l  %86 = shl nsw i32 %85, 1\l  %87 = add nuw nsw i32 %45, %39\l  %88 = sub nsw i32 %63, %87\l  %89 = add nsw i32 %88, %68\l  %90 = add nsw i32 %89, %86\l  %91 = sitofp i32 %74 to float\l  %92 = fmul contract float %91, %91\l  %93 = sitofp i32 %90 to float\l  %94 = fmul contract float %93, %93\l  %95 = fadd contract float %92, %94\l  %96 = fcmp olt float %95, 0x39F0000000000000\l  %97 = select i1 %96, float 0x41F0000000000000, float 1.000000e+00\l  %98 = fmul float %95, %97\l  %99 = tail call float @llvm.sqrt.f32(float %98)\l  %100 = bitcast float %99 to i32\l  %101 = add nsw i32 %100, -1\l  %102 = bitcast i32 %101 to float\l  %103 = add nsw i32 %100, 1\l  %104 = bitcast i32 %103 to float\l  %105 = tail call i1 @llvm.amdgcn.class.f32(float %98, i32 608)\l  %106 = select i1 %96, float 0x3EF0000000000000, float 1.000000e+00\l  %107 = fneg float %104\l  %108 = tail call float @llvm.fma.f32(float %107, float %99, float %98)\l  %109 = fcmp ogt float %108, 0.000000e+00\l  %110 = fneg float %102\l  %111 = tail call float @llvm.fma.f32(float %110, float %99, float %98)\l  %112 = fcmp ole float %111, 0.000000e+00\l  %113 = select i1 %112, float %102, float %99\l  %114 = select i1 %109, float %104, float %113\l  %115 = fmul float %106, %114\l  %116 = select i1 %105, float %98, float %115\l  %117 = fptosi float %116 to i32\l  %118 = trunc i32 %117 to i8\l  %119 = add nsw i32 %46, %13\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds i8, i8 addrspace(1)* %3, i64 %120\l  store i8 %118, i8 addrspace(1)* %121, align 1, !tbaa !7\l  br label %122\l}"];
	Node0x4885320 -> Node0x4884d50;
	Node0x4884d50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%122:\l122:                                              \l  ret void\l}"];
}
