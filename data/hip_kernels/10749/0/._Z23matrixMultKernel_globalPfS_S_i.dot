digraph "CFG for '_Z23matrixMultKernel_globalPfS_S_i' function" {
	label="CFG for '_Z23matrixMultKernel_globalPfS_S_i' function";

	Node0x510cb50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp slt i32 %13, %3\l  %23 = icmp slt i32 %21, %3\l  %24 = select i1 %22, i1 %23, i1 false\l  br i1 %24, label %25, label %151\l|{<s0>T|<s1>F}}"];
	Node0x510cb50:s0 -> Node0x5110630;
	Node0x510cb50:s1 -> Node0x51106c0;
	Node0x5110630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%25:\l25:                                               \l  %26 = icmp sgt i32 %3, 0\l  %27 = mul nsw i32 %13, %3\l  %28 = sext i32 %27 to i64\l  br i1 %26, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5110630:s0 -> Node0x51109c0;
	Node0x5110630:s1 -> Node0x5110a10;
	Node0x5110a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%29:\l29:                                               \l  %30 = sext i32 %21 to i64\l  br label %60\l}"];
	Node0x5110a10 -> Node0x5110bc0;
	Node0x51109c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%31:\l31:                                               \l  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %33 = sext i32 %21 to i64\l  %34 = getelementptr float, float addrspace(1)* %1, i64 %33\l  %35 = and i32 %3, 7\l  %36 = icmp ult i32 %3, 8\l  br i1 %36, label %39, label %37\l|{<s0>T|<s1>F}}"];
	Node0x51109c0:s0 -> Node0x51110b0;
	Node0x51109c0:s1 -> Node0x5111100;
	Node0x5111100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%37:\l37:                                               \l  %38 = and i32 %3, -8\l  br label %65\l}"];
	Node0x5111100 -> Node0x5111300;
	Node0x51110b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%39:\l39:                                               \l  %40 = phi float [ undef, %31 ], [ %147, %65 ]\l  %41 = phi i32 [ 0, %31 ], [ %148, %65 ]\l  %42 = phi float [ 0.000000e+00, %31 ], [ %147, %65 ]\l  %43 = icmp eq i32 %35, 0\l  br i1 %43, label %60, label %44\l|{<s0>T|<s1>F}}"];
	Node0x51110b0:s0 -> Node0x5110bc0;
	Node0x51110b0:s1 -> Node0x5112570;
	Node0x5112570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  %45 = phi i32 [ %57, %44 ], [ %41, %39 ]\l  %46 = phi float [ %56, %44 ], [ %42, %39 ]\l  %47 = phi i32 [ %58, %44 ], [ 0, %39 ]\l  %48 = zext i32 %45 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %32, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = mul nsw i32 %45, %3\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr float, float addrspace(1)* %34, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fmul contract float %50, %54\l  %56 = fadd contract float %46, %55\l  %57 = add nuw nsw i32 %45, 1\l  %58 = add i32 %47, 1\l  %59 = icmp eq i32 %58, %35\l  br i1 %59, label %60, label %44, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5112570:s0 -> Node0x5110bc0;
	Node0x5112570:s1 -> Node0x5112570;
	Node0x5110bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%60:\l60:                                               \l  %61 = phi i64 [ %30, %29 ], [ %33, %44 ], [ %33, %39 ]\l  %62 = phi float [ 0.000000e+00, %29 ], [ %40, %39 ], [ %56, %44 ]\l  %63 = getelementptr inbounds float, float addrspace(1)* %2, i64 %28\l  %64 = getelementptr inbounds float, float addrspace(1)* %63, i64 %61\l  store float %62, float addrspace(1)* %64, align 4, !tbaa !7\l  br label %151\l}"];
	Node0x5110bc0 -> Node0x51106c0;
	Node0x5111300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%65:\l65:                                               \l  %66 = phi i32 [ 0, %37 ], [ %148, %65 ]\l  %67 = phi float [ 0.000000e+00, %37 ], [ %147, %65 ]\l  %68 = phi i32 [ 0, %37 ], [ %149, %65 ]\l  %69 = zext i32 %66 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %32, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = mul nsw i32 %66, %3\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr float, float addrspace(1)* %34, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = fmul contract float %71, %75\l  %77 = fadd contract float %67, %76\l  %78 = or i32 %66, 1\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %32, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = mul nsw i32 %78, %3\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr float, float addrspace(1)* %34, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = fmul contract float %81, %85\l  %87 = fadd contract float %77, %86\l  %88 = or i32 %66, 2\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %32, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = mul nsw i32 %88, %3\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr float, float addrspace(1)* %34, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = fmul contract float %91, %95\l  %97 = fadd contract float %87, %96\l  %98 = or i32 %66, 3\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %32, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = mul nsw i32 %98, %3\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr float, float addrspace(1)* %34, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %101, %105\l  %107 = fadd contract float %97, %106\l  %108 = or i32 %66, 4\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %32, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = mul nsw i32 %108, %3\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr float, float addrspace(1)* %34, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %111, %115\l  %117 = fadd contract float %107, %116\l  %118 = or i32 %66, 5\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %32, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %122 = mul nsw i32 %118, %3\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr float, float addrspace(1)* %34, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %121, %125\l  %127 = fadd contract float %117, %126\l  %128 = or i32 %66, 6\l  %129 = zext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %32, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %132 = mul nsw i32 %128, %3\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr float, float addrspace(1)* %34, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %136 = fmul contract float %131, %135\l  %137 = fadd contract float %127, %136\l  %138 = or i32 %66, 7\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %32, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = mul nsw i32 %138, %3\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr float, float addrspace(1)* %34, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = fmul contract float %141, %145\l  %147 = fadd contract float %137, %146\l  %148 = add nuw nsw i32 %66, 8\l  %149 = add i32 %68, 8\l  %150 = icmp eq i32 %149, %38\l  br i1 %150, label %39, label %65, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5111300:s0 -> Node0x51110b0;
	Node0x5111300:s1 -> Node0x5111300;
	Node0x51106c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%151:\l151:                                              \l  ret void\l}"];
}
