digraph "CFG for '_Z16LeftRightBound2DPdS_S_S_iii' function" {
	label="CFG for '_Z16LeftRightBound2DPdS_S_S_iii' function";

	Node0x5f00680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %9, %14\l  %19 = add i32 %18, %8\l  %20 = icmp slt i32 %19, %5\l  br i1 %20, label %21, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5f00680:s0 -> Node0x5f022b0;
	Node0x5f00680:s1 -> Node0x5f02340;
	Node0x5f022b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%21:\l21:                                               \l  %22 = icmp eq i32 %4, 0\l  %23 = load double, double addrspace(4)* @hcri, align 8\l  %24 = udiv i32 %17, %14\l  %25 = mul i32 %24, %14\l  %26 = icmp ugt i32 %17, %25\l  %27 = zext i1 %26 to i32\l  %28 = add i32 %24, %27\l  %29 = mul i32 %28, %14\l  br label %30\l}"];
	Node0x5f022b0 -> Node0x5f028c0;
	Node0x5f028c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%30:\l30:                                               \l  %31 = phi i32 [ %19, %21 ], [ %78, %67 ]\l  %32 = mul nsw i32 %31, %6\l  br i1 %22, label %33, label %49\l|{<s0>T|<s1>F}}"];
	Node0x5f028c0:s0 -> Node0x5f01e80;
	Node0x5f028c0:s1 -> Node0x5f01f10;
	Node0x5f01e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%33:\l33:                                               \l  %34 = add nsw i32 %32, 1\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %0, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !16\l  %38 = sext i32 %32 to i64\l  %39 = getelementptr inbounds double, double addrspace(1)* %0, i64 %38\l  store double %37, double addrspace(1)* %39, align 8, !tbaa !16\l  %40 = add nsw i32 %31, 1\l  %41 = mul nsw i32 %40, %6\l  %42 = add nsw i32 %41, -2\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %0, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !16\l  %46 = add nsw i32 %41, -1\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds double, double addrspace(1)* %0, i64 %47\l  store double %45, double addrspace(1)* %48, align 8, !tbaa !16\l  br label %67\l}"];
	Node0x5f01e80 -> Node0x5f02980;
	Node0x5f01f10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%49:\l49:                                               \l  %50 = sext i32 %32 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %1, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !16\l  %53 = fadd contract double %23, %52\l  %54 = getelementptr inbounds double, double addrspace(1)* %0, i64 %50\l  store double %53, double addrspace(1)* %54, align 8, !tbaa !16\l  %55 = add nsw i32 %31, 1\l  %56 = mul nsw i32 %55, %6\l  %57 = add nsw i32 %56, -1\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds double, double addrspace(1)* %1, i64 %58\l  %60 = load double, double addrspace(1)* %59, align 8, !tbaa !16\l  %61 = fadd contract double %23, %60\l  %62 = getelementptr inbounds double, double addrspace(1)* %0, i64 %58\l  store double %61, double addrspace(1)* %62, align 8, !tbaa !16\l  %63 = add nsw i32 %32, 1\l  %64 = sext i32 %63 to i64\l  %65 = add nsw i32 %56, -2\l  %66 = sext i32 %65 to i64\l  br label %67\l}"];
	Node0x5f01f10 -> Node0x5f02980;
	Node0x5f02980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%67:\l67:                                               \l  %68 = phi i64 [ %58, %49 ], [ %47, %33 ]\l  %69 = phi i64 [ %66, %49 ], [ %43, %33 ]\l  %70 = phi i64 [ %50, %49 ], [ %38, %33 ]\l  %71 = phi i64 [ %64, %49 ], [ %35, %33 ]\l  %72 = getelementptr inbounds double, double addrspace(1)* %3, i64 %71\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !16\l  %74 = getelementptr inbounds double, double addrspace(1)* %3, i64 %70\l  store double %73, double addrspace(1)* %74, align 8, !tbaa !16\l  %75 = getelementptr inbounds double, double addrspace(1)* %2, i64 %69\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !16\l  %77 = getelementptr inbounds double, double addrspace(1)* %2, i64 %68\l  store double %76, double addrspace(1)* %77, align 8, !tbaa !16\l  %78 = add i32 %29, %31\l  %79 = icmp slt i32 %78, %5\l  br i1 %79, label %30, label %80, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5f02980:s0 -> Node0x5f028c0;
	Node0x5f02980:s1 -> Node0x5f02340;
	Node0x5f02340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%80:\l80:                                               \l  ret void\l}"];
}
