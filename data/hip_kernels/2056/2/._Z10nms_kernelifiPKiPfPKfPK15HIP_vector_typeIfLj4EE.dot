digraph "CFG for '_Z10nms_kernelifiPKiPfPKfPK15HIP_vector_typeIfLj4EE' function" {
	label="CFG for '_Z10nms_kernelifiPKiPfPKfPK15HIP_vector_typeIfLj4EE' function";

	Node0x629ed20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%7:\l  %8 = icmp sgt i32 %2, 0\l  br i1 %8, label %9, label %19\l|{<s0>T|<s1>F}}"];
	Node0x629ed20:s0 -> Node0x629df50;
	Node0x629ed20:s1 -> Node0x629d830;
	Node0x629df50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%9:\l9:                                                \l  %10 = icmp sgt i32 %0, 0\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x()\l  %12 = mul i32 %11, %0\l  br label %13\l}"];
	Node0x629df50 -> Node0x629f890;
	Node0x629f890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%13:\l13:                                               \l  %14 = phi i32 [ 0, %9 ], [ %21, %20 ]\l  br i1 %10, label %15, label %20\l|{<s0>T|<s1>F}}"];
	Node0x629f890:s0 -> Node0x629fac0;
	Node0x629f890:s1 -> Node0x629f980;
	Node0x629fac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%15:\l15:                                               \l  %16 = zext i32 %14 to i64\l  %17 = getelementptr inbounds float, float addrspace(1)* %4, i64 %16\l  %18 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %16\l  br label %23\l}"];
	Node0x629fac0 -> Node0x629f410;
	Node0x629d830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%19:\l19:                                               \l  ret void\l}"];
	Node0x629f980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%20:\l20:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %21 = add nuw nsw i32 %14, 1\l  %22 = icmp eq i32 %21, %2\l  br i1 %22, label %19, label %13, !llvm.loop !4\l|{<s0>T|<s1>F}}"];
	Node0x629f980:s0 -> Node0x629d830;
	Node0x629f980:s1 -> Node0x629f890;
	Node0x629f410 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i32 [ 0, %15 ], [ %91, %90 ]\l  %25 = add i32 %24, %12\l  %26 = icmp slt i32 %25, %2\l  %27 = icmp slt i32 %14, %25\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %90\l|{<s0>T|<s1>F}}"];
	Node0x629f410:s0 -> Node0x62a12b0;
	Node0x629f410:s1 -> Node0x62a0ee0;
	Node0x62a12b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%29:\l29:                                               \l  %30 = load float, float addrspace(1)* %17, align 4, !tbaa !6\l  %31 = fcmp contract ogt float %30, 0.000000e+00\l  br i1 %31, label %32, label %90\l|{<s0>T|<s1>F}}"];
	Node0x62a12b0:s0 -> Node0x62a2070;
	Node0x62a12b0:s1 -> Node0x62a0ee0;
	Node0x62a2070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%32:\l32:                                               \l  %33 = sext i32 %25 to i64\l  %34 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %33\l  %35 = load i32, i32 addrspace(1)* %34, align 4, !tbaa !10, !amdgpu.noclobber\l... !12\l  %36 = load i32, i32 addrspace(1)* %18, align 4, !tbaa !10, !amdgpu.noclobber\l... !12\l  %37 = sext i32 %35 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %5, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !6\l  %40 = fptosi float %39 to i32\l  %41 = sext i32 %36 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %5, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !6\l  %44 = fptosi float %43 to i32\l  %45 = icmp eq i32 %44, %40\l  br i1 %45, label %46, label %90\l|{<s0>T|<s1>F}}"];
	Node0x62a2070:s0 -> Node0x62a3e40;
	Node0x62a2070:s1 -> Node0x62a0ee0;
	Node0x62a3e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%46:\l46:                                               \l  %47 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %37, i32 0, i32 0, i32 0, i64 0\l  %48 = load float, float addrspace(1)* %47, align 16\l  %49 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %37, i32 0, i32 0, i32 0, i64 1\l  %50 = load float, float addrspace(1)* %49, align 4\l  %51 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %37, i32 0, i32 0, i32 0, i64 2\l  %52 = load float, float addrspace(1)* %51, align 8\l  %53 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %37, i32 0, i32 0, i32 0, i64 3\l  %54 = load float, float addrspace(1)* %53, align 4\l  %55 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %41, i32 0, i32 0, i32 0, i64 0\l  %56 = load float, float addrspace(1)* %55, align 16\l  %57 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %41, i32 0, i32 0, i32 0, i64 1\l  %58 = load float, float addrspace(1)* %57, align 4\l  %59 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %41, i32 0, i32 0, i32 0, i64 2\l  %60 = load float, float addrspace(1)* %59, align 8\l  %61 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %6, i64 %41, i32 0, i32 0, i32 0, i64 3\l  %62 = load float, float addrspace(1)* %61, align 4\l  %63 = tail call float @llvm.maxnum.f32(float %48, float %56)\l  %64 = tail call float @llvm.maxnum.f32(float %50, float %58)\l  %65 = tail call float @llvm.minnum.f32(float %52, float %60)\l  %66 = tail call float @llvm.minnum.f32(float %54, float %62)\l  %67 = fsub contract float %65, %63\l  %68 = fadd contract float %67, 1.000000e+00\l  %69 = tail call float @llvm.maxnum.f32(float %68, float 0.000000e+00)\l  %70 = fsub contract float %66, %64\l  %71 = fadd contract float %70, 1.000000e+00\l  %72 = tail call float @llvm.maxnum.f32(float %71, float 0.000000e+00)\l  %73 = fsub contract float %52, %48\l  %74 = fadd contract float %73, 1.000000e+00\l  %75 = fsub contract float %54, %50\l  %76 = fadd contract float %75, 1.000000e+00\l  %77 = fmul contract float %74, %76\l  %78 = fsub contract float %60, %56\l  %79 = fadd contract float %78, 1.000000e+00\l  %80 = fsub contract float %62, %58\l  %81 = fadd contract float %80, 1.000000e+00\l  %82 = fmul contract float %79, %81\l  %83 = fmul contract float %69, %72\l  %84 = fadd contract float %77, %82\l  %85 = fsub contract float %84, %83\l  %86 = fdiv contract float %83, %85\l  %87 = fcmp contract ogt float %86, %1\l  br i1 %87, label %88, label %90\l|{<s0>T|<s1>F}}"];
	Node0x62a3e40:s0 -> Node0x62a62a0;
	Node0x62a3e40:s1 -> Node0x62a0ee0;
	Node0x62a62a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%88:\l88:                                               \l  %89 = getelementptr inbounds float, float addrspace(1)* %4, i64 %33\l  store float 0.000000e+00, float addrspace(1)* %89, align 4, !tbaa !6\l  br label %90\l}"];
	Node0x62a62a0 -> Node0x62a0ee0;
	Node0x62a0ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%90:\l90:                                               \l  %91 = add nuw nsw i32 %24, 1\l  %92 = icmp eq i32 %91, %0\l  br i1 %92, label %20, label %23, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x62a0ee0:s0 -> Node0x629f980;
	Node0x62a0ee0:s1 -> Node0x629f410;
}
