digraph "CFG for '_Z6matmulPKfS0_Pfffiiii' function" {
	label="CFG for '_Z6matmulPKfS0_Pfffiiii' function";

	Node0x47cdb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%9:\l  %10 = mul nsw i32 %8, %6\l  %11 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = mul nsw i32 %7, %6\l  %14 = icmp slt i32 %12, %13\l  %15 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  br i1 %14, label %16, label %21\l|{<s0>T|<s1>F}}"];
	Node0x47cdb90:s0 -> Node0x47cfca0;
	Node0x47cdb90:s1 -> Node0x47cfd30;
	Node0x47cfca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%16:\l16:                                               \l  %17 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  br label %39\l}"];
	Node0x47cfca0 -> Node0x47d03f0;
	Node0x47cfd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%21:\l21:                                               \l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = mul i32 %22, %8\l  %24 = zext i32 %23 to i64\l  %25 = getelementptr inbounds i8, i8 addrspace(4)* %15, i64 12\l  %26 = bitcast i8 addrspace(4)* %25 to i32 addrspace(4)*\l  %27 = load i32, i32 addrspace(4)* %26, align 4, !tbaa !7\l  %28 = getelementptr i8, i8 addrspace(4)* %15, i64 4\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 4, !range !5, !invariant.load !6\l  %31 = zext i16 %30 to i32\l  %32 = udiv i32 %27, %31\l  %33 = mul i32 %32, %31\l  %34 = icmp ugt i32 %27, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, -1\l  %37 = add i32 %36, %35\l  %38 = icmp eq i32 %22, %37\l  br i1 %38, label %47, label %51\l|{<s0>T|<s1>F}}"];
	Node0x47cfd30:s0 -> Node0x47d1e20;
	Node0x47cfd30:s1 -> Node0x47d1eb0;
	Node0x47d03f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %12, %16 ], [ %45, %39 ]\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %44 = getelementptr inbounds float, float addrspace(3)* %11, i32 %40\l  store float %43, float addrspace(3)* %44, align 4, !tbaa !16\l  %45 = add i32 %40, %20\l  %46 = icmp slt i32 %45, %13\l  br i1 %46, label %39, label %21, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x47d03f0:s0 -> Node0x47d03f0;
	Node0x47d03f0:s1 -> Node0x47cfd30;
	Node0x47d1e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%47:\l47:                                               \l  %48 = srem i32 %5, %8\l  %49 = icmp eq i32 %48, 0\l  %50 = select i1 %49, i32 %8, i32 %48\l  br label %51\l}"];
	Node0x47d1e20 -> Node0x47d1eb0;
	Node0x47d1eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%51:\l51:                                               \l  %52 = phi i32 [ %8, %21 ], [ %50, %47 ]\l  %53 = sext i32 %52 to i64\l  %54 = zext i32 %12 to i64\l  %55 = sext i32 %6 to i64\l  %56 = mul nsw i64 %53, %55\l  %57 = icmp ugt i64 %56, %54\l  br i1 %57, label %58, label %61\l|{<s0>T|<s1>F}}"];
	Node0x47d1eb0:s0 -> Node0x47d3340;
	Node0x47d1eb0:s1 -> Node0x47d3390;
	Node0x47d3340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%58:\l58:                                               \l  %59 = mul nsw i64 %24, %55\l  %60 = zext i16 %30 to i64\l  br label %71\l}"];
	Node0x47d3340 -> Node0x47d3590;
	Node0x47d3390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%61:\l61:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %62 = freeze i32 %12\l  %63 = freeze i32 %7\l  %64 = udiv i32 %62, %63\l  %65 = mul i32 %64, %63\l  %66 = sub i32 %62, %65\l  %67 = zext i32 %64 to i64\l  %68 = add nuw nsw i64 %67, %24\l  %69 = sext i32 %5 to i64\l  %70 = icmp ult i64 %68, %69\l  br i1 %70, label %81, label %212\l|{<s0>T|<s1>F}}"];
	Node0x47d3390:s0 -> Node0x47d3fd0;
	Node0x47d3390:s1 -> Node0x47d4020;
	Node0x47d3590 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%71:\l71:                                               \l  %72 = phi i64 [ %54, %58 ], [ %79, %71 ]\l  %73 = add i64 %72, %59\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %76 = fmul contract float %75, %3\l  %77 = trunc i64 %72 to i32\l  %78 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %77\l  store float %76, float addrspace(3)* %78, align 4, !tbaa !16\l  %79 = add i64 %72, %60\l  %80 = icmp ult i64 %79, %56\l  br i1 %80, label %71, label %61, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x47d3590:s0 -> Node0x47d3590;
	Node0x47d3590:s1 -> Node0x47d3390;
	Node0x47d3fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%81:\l81:                                               \l  %82 = sext i32 %7 to i64\l  %83 = mul nsw i64 %53, %82\l  %84 = icmp ugt i64 %83, %54\l  br i1 %84, label %85, label %212\l|{<s0>T|<s1>F}}"];
	Node0x47d3fd0:s0 -> Node0x47d4af0;
	Node0x47d3fd0:s1 -> Node0x47d4020;
	Node0x47d4af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%85:\l85:                                               \l  %86 = icmp eq i32 %6, 0\l  br i1 %86, label %117, label %87\l|{<s0>T|<s1>F}}"];
	Node0x47d4af0:s0 -> Node0x47d4c80;
	Node0x47d4af0:s1 -> Node0x47d4cd0;
	Node0x47d4cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%87:\l87:                                               \l  %88 = mul nsw i32 %66, %6\l  %89 = mul nsw i32 %64, %6\l  %90 = tail call i64 @llvm.umax.i64(i64 %55, i64 1)\l  %91 = add i64 %90, -1\l  %92 = and i64 %90, 7\l  %93 = icmp ult i64 %91, 7\l  br i1 %93, label %96, label %94\l|{<s0>T|<s1>F}}"];
	Node0x47d4cd0:s0 -> Node0x47d52d0;
	Node0x47d4cd0:s1 -> Node0x47d5360;
	Node0x47d5360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%94:\l94:                                               \l  %95 = and i64 %90, -8\l  br label %126\l}"];
	Node0x47d5360 -> Node0x47d5560;
	Node0x47d52d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%96:\l96:                                               \l  %97 = phi float [ undef, %87 ], [ %208, %126 ]\l  %98 = phi i64 [ 0, %87 ], [ %209, %126 ]\l  %99 = phi float [ 0.000000e+00, %87 ], [ %208, %126 ]\l  %100 = icmp eq i64 %92, 0\l  br i1 %100, label %117, label %101\l|{<s0>T|<s1>F}}"];
	Node0x47d52d0:s0 -> Node0x47d4c80;
	Node0x47d52d0:s1 -> Node0x47d6800;
	Node0x47d6800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2907270",label="{%101:\l101:                                              \l  %102 = phi i64 [ %114, %101 ], [ %98, %96 ]\l  %103 = phi float [ %113, %101 ], [ %99, %96 ]\l  %104 = phi i64 [ %115, %101 ], [ 0, %96 ]\l  %105 = trunc i64 %102 to i32\l  %106 = add i32 %88, %105\l  %107 = getelementptr inbounds float, float addrspace(3)* %11, i32 %106\l  %108 = load float, float addrspace(3)* %107, align 4, !tbaa !16\l  %109 = add i32 %89, %105\l  %110 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %109\l  %111 = load float, float addrspace(3)* %110, align 4, !tbaa !16\l  %112 = fmul contract float %108, %111\l  %113 = fadd contract float %103, %112\l  %114 = add nuw i64 %102, 1\l  %115 = add i64 %104, 1\l  %116 = icmp eq i64 %115, %92\l  br i1 %116, label %117, label %101, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x47d6800:s0 -> Node0x47d4c80;
	Node0x47d6800:s1 -> Node0x47d6800;
	Node0x47d4c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%117:\l117:                                              \l  %118 = phi float [ 0.000000e+00, %85 ], [ %97, %96 ], [ %113, %101 ]\l  %119 = mul nsw i32 %66, %5\l  %120 = sext i32 %119 to i64\l  %121 = add nsw i64 %68, %120\l  %122 = getelementptr inbounds float, float addrspace(1)* %2, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %124 = fmul contract float %123, %4\l  %125 = fadd contract float %118, %124\l  store float %125, float addrspace(1)* %122, align 4, !tbaa !16\l  br label %212\l}"];
	Node0x47d4c80 -> Node0x47d4020;
	Node0x47d5560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%126:\l126:                                              \l  %127 = phi i64 [ 0, %94 ], [ %209, %126 ]\l  %128 = phi float [ 0.000000e+00, %94 ], [ %208, %126 ]\l  %129 = phi i64 [ 0, %94 ], [ %210, %126 ]\l  %130 = trunc i64 %127 to i32\l  %131 = add i32 %88, %130\l  %132 = getelementptr inbounds float, float addrspace(3)* %11, i32 %131\l  %133 = load float, float addrspace(3)* %132, align 4, !tbaa !16\l  %134 = add i32 %89, %130\l  %135 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %134\l  %136 = load float, float addrspace(3)* %135, align 4, !tbaa !16\l  %137 = fmul contract float %133, %136\l  %138 = fadd contract float %128, %137\l  %139 = trunc i64 %127 to i32\l  %140 = or i32 %139, 1\l  %141 = add i32 %88, %140\l  %142 = getelementptr inbounds float, float addrspace(3)* %11, i32 %141\l  %143 = load float, float addrspace(3)* %142, align 4, !tbaa !16\l  %144 = add i32 %89, %140\l  %145 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %144\l  %146 = load float, float addrspace(3)* %145, align 4, !tbaa !16\l  %147 = fmul contract float %143, %146\l  %148 = fadd contract float %138, %147\l  %149 = trunc i64 %127 to i32\l  %150 = or i32 %149, 2\l  %151 = add i32 %88, %150\l  %152 = getelementptr inbounds float, float addrspace(3)* %11, i32 %151\l  %153 = load float, float addrspace(3)* %152, align 4, !tbaa !16\l  %154 = add i32 %89, %150\l  %155 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %154\l  %156 = load float, float addrspace(3)* %155, align 4, !tbaa !16\l  %157 = fmul contract float %153, %156\l  %158 = fadd contract float %148, %157\l  %159 = trunc i64 %127 to i32\l  %160 = or i32 %159, 3\l  %161 = add i32 %88, %160\l  %162 = getelementptr inbounds float, float addrspace(3)* %11, i32 %161\l  %163 = load float, float addrspace(3)* %162, align 4, !tbaa !16\l  %164 = add i32 %89, %160\l  %165 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %164\l  %166 = load float, float addrspace(3)* %165, align 4, !tbaa !16\l  %167 = fmul contract float %163, %166\l  %168 = fadd contract float %158, %167\l  %169 = trunc i64 %127 to i32\l  %170 = or i32 %169, 4\l  %171 = add i32 %88, %170\l  %172 = getelementptr inbounds float, float addrspace(3)* %11, i32 %171\l  %173 = load float, float addrspace(3)* %172, align 4, !tbaa !16\l  %174 = add i32 %89, %170\l  %175 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %174\l  %176 = load float, float addrspace(3)* %175, align 4, !tbaa !16\l  %177 = fmul contract float %173, %176\l  %178 = fadd contract float %168, %177\l  %179 = trunc i64 %127 to i32\l  %180 = or i32 %179, 5\l  %181 = add i32 %88, %180\l  %182 = getelementptr inbounds float, float addrspace(3)* %11, i32 %181\l  %183 = load float, float addrspace(3)* %182, align 4, !tbaa !16\l  %184 = add i32 %89, %180\l  %185 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %184\l  %186 = load float, float addrspace(3)* %185, align 4, !tbaa !16\l  %187 = fmul contract float %183, %186\l  %188 = fadd contract float %178, %187\l  %189 = trunc i64 %127 to i32\l  %190 = or i32 %189, 6\l  %191 = add i32 %88, %190\l  %192 = getelementptr inbounds float, float addrspace(3)* %11, i32 %191\l  %193 = load float, float addrspace(3)* %192, align 4, !tbaa !16\l  %194 = add i32 %89, %190\l  %195 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %194\l  %196 = load float, float addrspace(3)* %195, align 4, !tbaa !16\l  %197 = fmul contract float %193, %196\l  %198 = fadd contract float %188, %197\l  %199 = trunc i64 %127 to i32\l  %200 = or i32 %199, 7\l  %201 = add i32 %88, %200\l  %202 = getelementptr inbounds float, float addrspace(3)* %11, i32 %201\l  %203 = load float, float addrspace(3)* %202, align 4, !tbaa !16\l  %204 = add i32 %89, %200\l  %205 = getelementptr inbounds float, float addrspace(3)* bitcast ([0 x i8]\l... addrspace(3)* @my_smem to float addrspace(3)*), i32 %204\l  %206 = load float, float addrspace(3)* %205, align 4, !tbaa !16\l  %207 = fmul contract float %203, %206\l  %208 = fadd contract float %198, %207\l  %209 = add nuw i64 %127, 8\l  %210 = add i64 %129, 8\l  %211 = icmp eq i64 %210, %95\l  br i1 %211, label %96, label %126, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x47d5560:s0 -> Node0x47d52d0;
	Node0x47d5560:s1 -> Node0x47d5560;
	Node0x47d4020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%212:\l212:                                              \l  ret void\l}"];
}
