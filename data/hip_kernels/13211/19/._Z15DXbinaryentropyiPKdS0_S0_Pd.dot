digraph "CFG for '_Z15DXbinaryentropyiPKdS0_S0_Pd' function" {
	label="CFG for '_Z15DXbinaryentropyiPKdS0_S0_Pd' function";

	Node0x4d945f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = icmp slt i32 %14, %0\l  br i1 %15, label %16, label %118\l|{<s0>T|<s1>F}}"];
	Node0x4d945f0:s0 -> Node0x4d964c0;
	Node0x4d945f0:s1 -> Node0x4d96550;
	Node0x4d964c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%16:\l16:                                               \l  %17 = load double, double addrspace(1)* %3, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %18 = sext i32 %14 to i64\l  %19 = getelementptr inbounds double, double addrspace(1)* %1, i64 %18\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %21 = getelementptr inbounds double, double addrspace(1)* %2, i64 %18\l  %22 = load double, double addrspace(1)* %21, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %23 = fsub contract double 1.000000e+00, %22\l  %24 = fmul contract double %20, %23\l  %25 = fsub contract double 1.000000e+00, %20\l  %26 = fmul contract double %22, %25\l  %27 = fdiv contract double %24, %26\l  %28 = tail call double @llvm.amdgcn.frexp.mant.f64(double %27)\l  %29 = fcmp olt double %28, 0x3FE5555555555555\l  %30 = zext i1 %29 to i32\l  %31 = tail call double @llvm.amdgcn.ldexp.f64(double %28, i32 %30)\l  %32 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %27)\l  %33 = sub nsw i32 %32, %30\l  %34 = fadd double %31, -1.000000e+00\l  %35 = fadd double %31, 1.000000e+00\l  %36 = fadd double %35, -1.000000e+00\l  %37 = fsub double %31, %36\l  %38 = tail call double @llvm.amdgcn.rcp.f64(double %35)\l  %39 = fneg double %35\l  %40 = tail call double @llvm.fma.f64(double %39, double %38, double\l... 1.000000e+00)\l  %41 = tail call double @llvm.fma.f64(double %40, double %38, double %38)\l  %42 = tail call double @llvm.fma.f64(double %39, double %41, double\l... 1.000000e+00)\l  %43 = tail call double @llvm.fma.f64(double %42, double %41, double %41)\l  %44 = fmul double %34, %43\l  %45 = fmul double %35, %44\l  %46 = fneg double %45\l  %47 = tail call double @llvm.fma.f64(double %44, double %35, double %46)\l  %48 = tail call double @llvm.fma.f64(double %44, double %37, double %47)\l  %49 = fadd double %45, %48\l  %50 = fsub double %49, %45\l  %51 = fsub double %48, %50\l  %52 = fsub double %34, %49\l  %53 = fsub double %34, %52\l  %54 = fsub double %53, %49\l  %55 = fsub double %54, %51\l  %56 = fadd double %52, %55\l  %57 = fmul double %43, %56\l  %58 = fadd double %44, %57\l  %59 = fsub double %58, %44\l  %60 = fsub double %57, %59\l  %61 = fmul double %58, %58\l  %62 = tail call double @llvm.fma.f64(double %61, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %63 = tail call double @llvm.fma.f64(double %61, double %62, double\l... 0x3FC7474DD7F4DF2E)\l  %64 = tail call double @llvm.fma.f64(double %61, double %63, double\l... 0x3FCC71C016291751)\l  %65 = tail call double @llvm.fma.f64(double %61, double %64, double\l... 0x3FD249249B27ACF1)\l  %66 = tail call double @llvm.fma.f64(double %61, double %65, double\l... 0x3FD99999998EF7B6)\l  %67 = tail call double @llvm.fma.f64(double %61, double %66, double\l... 0x3FE5555555555780)\l  %68 = tail call double @llvm.amdgcn.ldexp.f64(double %58, i32 1)\l  %69 = tail call double @llvm.amdgcn.ldexp.f64(double %60, i32 1)\l  %70 = fmul double %58, %61\l  %71 = fmul double %70, %67\l  %72 = fadd double %68, %71\l  %73 = fsub double %72, %68\l  %74 = fsub double %71, %73\l  %75 = fadd double %69, %74\l  %76 = fadd double %72, %75\l  %77 = fsub double %76, %72\l  %78 = fsub double %75, %77\l  %79 = sitofp i32 %33 to double\l  %80 = fmul double %79, 0x3FE62E42FEFA39EF\l  %81 = fneg double %80\l  %82 = tail call double @llvm.fma.f64(double %79, double 0x3FE62E42FEFA39EF,\l... double %81)\l  %83 = tail call double @llvm.fma.f64(double %79, double 0x3C7ABC9E3B39803F,\l... double %82)\l  %84 = fadd double %80, %83\l  %85 = fsub double %84, %80\l  %86 = fsub double %83, %85\l  %87 = fadd double %84, %76\l  %88 = fsub double %87, %84\l  %89 = fsub double %87, %88\l  %90 = fsub double %84, %89\l  %91 = fsub double %76, %88\l  %92 = fadd double %91, %90\l  %93 = fadd double %86, %78\l  %94 = fsub double %93, %86\l  %95 = fsub double %93, %94\l  %96 = fsub double %86, %95\l  %97 = fsub double %78, %94\l  %98 = fadd double %97, %96\l  %99 = fadd double %93, %92\l  %100 = fadd double %87, %99\l  %101 = fsub double %100, %87\l  %102 = fsub double %99, %101\l  %103 = fadd double %98, %102\l  %104 = fadd double %100, %103\l  %105 = tail call double @llvm.fabs.f64(double %27) #3\l  %106 = fcmp oeq double %105, 0x7FF0000000000000\l  %107 = select i1 %106, double %27, double %104\l  %108 = fcmp olt double %27, 0.000000e+00\l  %109 = select i1 %108, double 0x7FF8000000000000, double %107\l  %110 = fcmp oeq double %27, 0.000000e+00\l  %111 = select i1 %110, double 0xFFF0000000000000, double %109\l  %112 = fmul contract double %17, %111\l  %113 = sitofp i32 %0 to double\l  %114 = fdiv contract double %112, %113\l  %115 = getelementptr inbounds double, double addrspace(1)* %4, i64 %18\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %117 = fadd contract double %116, %114\l  store double %117, double addrspace(1)* %115, align 8, !tbaa !7\l  br label %118\l}"];
	Node0x4d964c0 -> Node0x4d96550;
	Node0x4d96550 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%118:\l118:                                              \l  ret void\l}"];
}
