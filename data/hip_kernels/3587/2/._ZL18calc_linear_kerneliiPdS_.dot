digraph "CFG for '_ZL18calc_linear_kerneliiPdS_' function" {
	label="CFG for '_ZL18calc_linear_kerneliiPdS_' function";

	Node0x5a15bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = freeze i32 %13\l  %15 = freeze i32 %0\l  %16 = sdiv i32 %14, %15\l  %17 = mul i32 %16, %15\l  %18 = sub i32 %14, %17\l  %19 = icmp slt i32 %16, %0\l  br i1 %19, label %20, label %158\l|{<s0>T|<s1>F}}"];
	Node0x5a15bf0:s0 -> Node0x5a17d90;
	Node0x5a15bf0:s1 -> Node0x5a17e20;
	Node0x5a17d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%20:\l20:                                               \l  %21 = icmp sgt i32 %1, 0\l  br i1 %21, label %22, label %50\l|{<s0>T|<s1>F}}"];
	Node0x5a17d90:s0 -> Node0x5a17ff0;
	Node0x5a17d90:s1 -> Node0x5a18040;
	Node0x5a17ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = and i32 %1, 7\l  %24 = icmp ult i32 %1, 8\l  br i1 %24, label %27, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5a17ff0:s0 -> Node0x5a18300;
	Node0x5a17ff0:s1 -> Node0x5a18350;
	Node0x5a18350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%25:\l25:                                               \l  %26 = and i32 %1, -8\l  br label %56\l}"];
	Node0x5a18350 -> Node0x5a18550;
	Node0x5a18300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%27:\l27:                                               \l  %28 = phi double [ undef, %22 ], [ %154, %56 ]\l  %29 = phi i32 [ 0, %22 ], [ %155, %56 ]\l  %30 = phi double [ 0.000000e+00, %22 ], [ %154, %56 ]\l  %31 = icmp eq i32 %23, 0\l  br i1 %31, label %50, label %32\l|{<s0>T|<s1>F}}"];
	Node0x5a18300:s0 -> Node0x5a18040;
	Node0x5a18300:s1 -> Node0x5a197f0;
	Node0x5a197f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%32:\l32:                                               \l  %33 = phi i32 [ %47, %32 ], [ %29, %27 ]\l  %34 = phi double [ %46, %32 ], [ %30, %27 ]\l  %35 = phi i32 [ %48, %32 ], [ 0, %27 ]\l  %36 = mul nsw i32 %33, %0\l  %37 = add nsw i32 %36, %16\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds double, double addrspace(1)* %2, i64 %38\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %41 = add nsw i32 %36, %18\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds double, double addrspace(1)* %2, i64 %42\l  %44 = load double, double addrspace(1)* %43, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %45 = fmul contract double %40, %44\l  %46 = fadd contract double %34, %45\l  %47 = add nuw nsw i32 %33, 1\l  %48 = add i32 %35, 1\l  %49 = icmp eq i32 %48, %23\l  br i1 %49, label %50, label %32, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5a197f0:s0 -> Node0x5a18040;
	Node0x5a197f0:s1 -> Node0x5a197f0;
	Node0x5a18040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%50:\l50:                                               \l  %51 = phi double [ 0.000000e+00, %20 ], [ %28, %27 ], [ %46, %32 ]\l  %52 = mul nsw i32 %16, %0\l  %53 = add nsw i32 %52, %18\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %3, i64 %54\l  store double %51, double addrspace(1)* %55, align 8, !tbaa !7\l  br label %158\l}"];
	Node0x5a18040 -> Node0x5a17e20;
	Node0x5a18550 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%56:\l56:                                               \l  %57 = phi i32 [ 0, %25 ], [ %155, %56 ]\l  %58 = phi double [ 0.000000e+00, %25 ], [ %154, %56 ]\l  %59 = phi i32 [ 0, %25 ], [ %156, %56 ]\l  %60 = mul nsw i32 %57, %0\l  %61 = add nsw i32 %60, %16\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %2, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = add nsw i32 %60, %18\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %2, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fmul contract double %64, %68\l  %70 = fadd contract double %58, %69\l  %71 = or i32 %57, 1\l  %72 = mul nsw i32 %71, %0\l  %73 = add nsw i32 %72, %16\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds double, double addrspace(1)* %2, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = add nsw i32 %72, %18\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %2, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = fmul contract double %76, %80\l  %82 = fadd contract double %70, %81\l  %83 = or i32 %57, 2\l  %84 = mul nsw i32 %83, %0\l  %85 = add nsw i32 %84, %16\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds double, double addrspace(1)* %2, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = add nsw i32 %84, %18\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %2, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = fmul contract double %88, %92\l  %94 = fadd contract double %82, %93\l  %95 = or i32 %57, 3\l  %96 = mul nsw i32 %95, %0\l  %97 = add nsw i32 %96, %16\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %2, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = add nsw i32 %96, %18\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %2, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fmul contract double %100, %104\l  %106 = fadd contract double %94, %105\l  %107 = or i32 %57, 4\l  %108 = mul nsw i32 %107, %0\l  %109 = add nsw i32 %108, %16\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %2, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = add nsw i32 %108, %18\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %2, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = fmul contract double %112, %116\l  %118 = fadd contract double %106, %117\l  %119 = or i32 %57, 5\l  %120 = mul nsw i32 %119, %0\l  %121 = add nsw i32 %120, %16\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds double, double addrspace(1)* %2, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = add nsw i32 %120, %18\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds double, double addrspace(1)* %2, i64 %126\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = fmul contract double %124, %128\l  %130 = fadd contract double %118, %129\l  %131 = or i32 %57, 6\l  %132 = mul nsw i32 %131, %0\l  %133 = add nsw i32 %132, %16\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds double, double addrspace(1)* %2, i64 %134\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %137 = add nsw i32 %132, %18\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds double, double addrspace(1)* %2, i64 %138\l  %140 = load double, double addrspace(1)* %139, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %141 = fmul contract double %136, %140\l  %142 = fadd contract double %130, %141\l  %143 = or i32 %57, 7\l  %144 = mul nsw i32 %143, %0\l  %145 = add nsw i32 %144, %16\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds double, double addrspace(1)* %2, i64 %146\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = add nsw i32 %144, %18\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds double, double addrspace(1)* %2, i64 %150\l  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %153 = fmul contract double %148, %152\l  %154 = fadd contract double %142, %153\l  %155 = add nuw nsw i32 %57, 8\l  %156 = add i32 %59, 8\l  %157 = icmp eq i32 %156, %26\l  br i1 %157, label %27, label %56, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5a18550:s0 -> Node0x5a18300;
	Node0x5a18550:s1 -> Node0x5a18550;
	Node0x5a17e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%158:\l158:                                              \l  ret void\l}"];
}
