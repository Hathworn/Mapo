digraph "CFG for '_ZL26calc_linear_kernel_predictiiPdiS_S_' function" {
	label="CFG for '_ZL26calc_linear_kernel_predictiiPdiS_S_' function";

	Node0x5c7db90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = freeze i32 %15\l  %17 = freeze i32 %0\l  %18 = sdiv i32 %16, %17\l  %19 = mul i32 %18, %17\l  %20 = sub i32 %16, %19\l  %21 = icmp slt i32 %18, %3\l  br i1 %21, label %22, label %151\l|{<s0>T|<s1>F}}"];
	Node0x5c7db90:s0 -> Node0x5c7fdc0;
	Node0x5c7db90:s1 -> Node0x5c7fe50;
	Node0x5c7fdc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%22:\l22:                                               \l  %23 = icmp sgt i32 %1, 0\l  br i1 %23, label %24, label %53\l|{<s0>T|<s1>F}}"];
	Node0x5c7fdc0:s0 -> Node0x5c80020;
	Node0x5c7fdc0:s1 -> Node0x5c80070;
	Node0x5c80020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = mul nsw i32 %18, %1\l  %26 = mul nsw i32 %20, %1\l  %27 = and i32 %1, 7\l  %28 = icmp ult i32 %1, 8\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x5c80020:s0 -> Node0x5c80450;
	Node0x5c80020:s1 -> Node0x5c804a0;
	Node0x5c804a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%29:\l29:                                               \l  %30 = and i32 %1, -8\l  br label %57\l}"];
	Node0x5c804a0 -> Node0x5c806a0;
	Node0x5c80450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = phi double [ undef, %24 ], [ %147, %57 ]\l  %33 = phi i32 [ 0, %24 ], [ %148, %57 ]\l  %34 = phi double [ 1.000000e+00, %24 ], [ %147, %57 ]\l  %35 = icmp eq i32 %27, 0\l  br i1 %35, label %53, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5c80450:s0 -> Node0x5c80070;
	Node0x5c80450:s1 -> Node0x5c81a20;
	Node0x5c81a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi i32 [ %50, %36 ], [ %33, %31 ]\l  %38 = phi double [ %49, %36 ], [ %34, %31 ]\l  %39 = phi i32 [ %51, %36 ], [ 0, %31 ]\l  %40 = add nsw i32 %37, %25\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds double, double addrspace(1)* %4, i64 %41\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = add nsw i32 %37, %26\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds double, double addrspace(1)* %2, i64 %45\l  %47 = load double, double addrspace(1)* %46, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %48 = fmul contract double %43, %47\l  %49 = fadd contract double %38, %48\l  %50 = add nuw nsw i32 %37, 1\l  %51 = add i32 %39, 1\l  %52 = icmp eq i32 %51, %27\l  br i1 %52, label %53, label %36, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5c81a20:s0 -> Node0x5c80070;
	Node0x5c81a20:s1 -> Node0x5c81a20;
	Node0x5c80070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%53:\l53:                                               \l  %54 = phi double [ 1.000000e+00, %22 ], [ %32, %31 ], [ %49, %36 ]\l  %55 = sext i32 %15 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %5, i64 %55\l  store double %54, double addrspace(1)* %56, align 8, !tbaa !7\l  br label %151\l}"];
	Node0x5c80070 -> Node0x5c7fe50;
	Node0x5c806a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%57:\l57:                                               \l  %58 = phi i32 [ 0, %29 ], [ %148, %57 ]\l  %59 = phi double [ 1.000000e+00, %29 ], [ %147, %57 ]\l  %60 = phi i32 [ 0, %29 ], [ %149, %57 ]\l  %61 = add nsw i32 %58, %25\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %4, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = add nsw i32 %58, %26\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %2, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = fmul contract double %64, %68\l  %70 = fadd contract double %59, %69\l  %71 = or i32 %58, 1\l  %72 = add nsw i32 %71, %25\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %4, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %76 = add nsw i32 %71, %26\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds double, double addrspace(1)* %2, i64 %77\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fmul contract double %75, %79\l  %81 = fadd contract double %70, %80\l  %82 = or i32 %58, 2\l  %83 = add nsw i32 %82, %25\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds double, double addrspace(1)* %4, i64 %84\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = add nsw i32 %82, %26\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %2, i64 %88\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fmul contract double %86, %90\l  %92 = fadd contract double %81, %91\l  %93 = or i32 %58, 3\l  %94 = add nsw i32 %93, %25\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds double, double addrspace(1)* %4, i64 %95\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = add nsw i32 %93, %26\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %2, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fmul contract double %97, %101\l  %103 = fadd contract double %92, %102\l  %104 = or i32 %58, 4\l  %105 = add nsw i32 %104, %25\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %4, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = add nsw i32 %104, %26\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %2, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = fmul contract double %108, %112\l  %114 = fadd contract double %103, %113\l  %115 = or i32 %58, 5\l  %116 = add nsw i32 %115, %25\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds double, double addrspace(1)* %4, i64 %117\l  %119 = load double, double addrspace(1)* %118, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = add nsw i32 %115, %26\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds double, double addrspace(1)* %2, i64 %121\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %124 = fmul contract double %119, %123\l  %125 = fadd contract double %114, %124\l  %126 = or i32 %58, 6\l  %127 = add nsw i32 %126, %25\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds double, double addrspace(1)* %4, i64 %128\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = add nsw i32 %126, %26\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds double, double addrspace(1)* %2, i64 %132\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = fmul contract double %130, %134\l  %136 = fadd contract double %125, %135\l  %137 = or i32 %58, 7\l  %138 = add nsw i32 %137, %25\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds double, double addrspace(1)* %4, i64 %139\l  %141 = load double, double addrspace(1)* %140, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = add nsw i32 %137, %26\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds double, double addrspace(1)* %2, i64 %143\l  %145 = load double, double addrspace(1)* %144, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = fmul contract double %141, %145\l  %147 = fadd contract double %136, %146\l  %148 = add nuw nsw i32 %58, 8\l  %149 = add i32 %60, 8\l  %150 = icmp eq i32 %149, %30\l  br i1 %150, label %31, label %57, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5c806a0:s0 -> Node0x5c80450;
	Node0x5c806a0:s1 -> Node0x5c806a0;
	Node0x5c7fe50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%151:\l151:                                              \l  ret void\l}"];
}
