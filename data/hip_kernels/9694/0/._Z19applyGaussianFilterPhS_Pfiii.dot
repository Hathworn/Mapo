digraph "CFG for '_Z19applyGaussianFilterPhS_Pfiii' function" {
	label="CFG for '_Z19applyGaussianFilterPhS_Pfiii' function";

	Node0x6378560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = sdiv i32 %5, 2\l  %25 = sub nsw i32 0, %24\l  %26 = icmp slt i32 %5, -1\l  br i1 %26, label %67, label %27\l|{<s0>T|<s1>F}}"];
	Node0x6378560:s0 -> Node0x637c060;
	Node0x6378560:s1 -> Node0x637c0f0;
	Node0x637c0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%27:\l27:                                               \l  %28 = tail call i32 @llvm.abs.i32(i32 %24, i1 true)\l  %29 = add i32 %24, %28\l  %30 = and i32 %29, 1\l  %31 = icmp eq i32 %30, 0\l  %32 = sub i32 %15, %24\l  %33 = icmp sge i32 %32, %4\l  %34 = icmp slt i32 %32, 0\l  %35 = or i1 %33, %34\l  %36 = sub nsw i32 1, %24\l  %37 = icmp eq i32 %29, 0\l  br label %38\l}"];
	Node0x637c0f0 -> Node0x637a650;
	Node0x637a650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%38:\l38:                                               \l  %39 = phi double [ 0.000000e+00, %27 ], [ %77, %76 ]\l  %40 = phi i32 [ %25, %27 ], [ %78, %76 ]\l  %41 = add nsw i32 %40, %23\l  %42 = icmp sge i32 %41, %3\l  %43 = icmp slt i32 %41, 0\l  %44 = or i1 %42, %43\l  %45 = add nsw i32 %40, %24\l  %46 = mul nsw i32 %41, %4\l  %47 = mul nsw i32 %45, %5\l  %48 = add i32 %47, %24\l  br i1 %31, label %49, label %63\l|{<s0>T|<s1>F}}"];
	Node0x637a650:s0 -> Node0x637dcd0;
	Node0x637a650:s1 -> Node0x637dd60;
	Node0x637dcd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%49:\l49:                                               \l  %50 = select i1 %35, i1 true, i1 %44\l  br i1 %50, label %63, label %51\l|{<s0>T|<s1>F}}"];
	Node0x637dcd0:s0 -> Node0x637dd60;
	Node0x637dcd0:s1 -> Node0x637df50;
	Node0x637df50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%51:\l51:                                               \l  %52 = add nsw i32 %32, %46\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %53\l  %55 = load i8, i8 addrspace(1)* %54, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %56 = uitofp i8 %55 to float\l  %57 = sext i32 %47 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %60 = fmul contract float %59, %56\l  %61 = fpext float %60 to double\l  %62 = fadd contract double %39, %61\l  br label %63\l}"];
	Node0x637df50 -> Node0x637dd60;
	Node0x637dd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%63:\l63:                                               \l  %64 = phi double [ undef, %38 ], [ %62, %51 ], [ %39, %49 ]\l  %65 = phi double [ %39, %38 ], [ %62, %51 ], [ %39, %49 ]\l  %66 = phi i32 [ %25, %38 ], [ %36, %51 ], [ %36, %49 ]\l  br i1 %37, label %76, label %80\l|{<s0>T|<s1>F}}"];
	Node0x637dd60:s0 -> Node0x637d5f0;
	Node0x637dd60:s1 -> Node0x637c840;
	Node0x637c060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%67:\l67:                                               \l  %68 = phi double [ 0.000000e+00, %6 ], [ %77, %76 ]\l  %69 = fcmp contract ogt double %68, 2.550000e+02\l  %70 = select i1 %69, double 2.550000e+02, double %68\l  %71 = fptoui double %70 to i8\l  %72 = mul nsw i32 %23, %4\l  %73 = add nsw i32 %72, %15\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %74\l  store i8 %71, i8 addrspace(1)* %75, align 1, !tbaa !7\l  ret void\l}"];
	Node0x637d5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%76:\l76:                                               \l  %77 = phi double [ %64, %63 ], [ %123, %122 ]\l  %78 = add i32 %40, 1\l  %79 = icmp eq i32 %40, %28\l  br i1 %79, label %67, label %38, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x637d5f0:s0 -> Node0x637c060;
	Node0x637d5f0:s1 -> Node0x637a650;
	Node0x637c840 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%80:\l80:                                               \l  %81 = phi double [ %123, %122 ], [ %65, %63 ]\l  %82 = phi i32 [ %124, %122 ], [ %66, %63 ]\l  %83 = add nsw i32 %82, %15\l  %84 = icmp sge i32 %83, %4\l  %85 = icmp slt i32 %83, 0\l  %86 = or i1 %84, %85\l  %87 = select i1 %86, i1 true, i1 %44\l  br i1 %87, label %101, label %88\l|{<s0>T|<s1>F}}"];
	Node0x637c840:s0 -> Node0x63806f0;
	Node0x637c840:s1 -> Node0x6380780;
	Node0x6380780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%88:\l88:                                               \l  %89 = add nsw i32 %83, %46\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %90\l  %92 = load i8, i8 addrspace(1)* %91, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %93 = uitofp i8 %92 to float\l  %94 = add i32 %48, %82\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %2, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %98 = fmul contract float %97, %93\l  %99 = fpext float %98 to double\l  %100 = fadd contract double %81, %99\l  br label %101\l}"];
	Node0x6380780 -> Node0x63806f0;
	Node0x63806f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%101:\l101:                                              \l  %102 = phi double [ %100, %88 ], [ %81, %80 ]\l  %103 = add i32 %82, 1\l  %104 = add nsw i32 %103, %15\l  %105 = icmp sge i32 %104, %4\l  %106 = icmp slt i32 %104, 0\l  %107 = or i1 %105, %106\l  %108 = select i1 %107, i1 true, i1 %44\l  br i1 %108, label %122, label %109\l|{<s0>T|<s1>F}}"];
	Node0x63806f0:s0 -> Node0x637fed0;
	Node0x63806f0:s1 -> Node0x63819d0;
	Node0x63819d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%109:\l109:                                              \l  %110 = add nsw i32 %104, %46\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %111\l  %113 = load i8, i8 addrspace(1)* %112, align 1, !tbaa !7, !amdgpu.noclobber\l... !5\l  %114 = uitofp i8 %113 to float\l  %115 = add i32 %48, %103\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !10,\l... !amdgpu.noclobber !5\l  %119 = fmul contract float %118, %114\l  %120 = fpext float %119 to double\l  %121 = fadd contract double %102, %120\l  br label %122\l}"];
	Node0x63819d0 -> Node0x637fed0;
	Node0x637fed0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%122:\l122:                                              \l  %123 = phi double [ %121, %109 ], [ %102, %101 ]\l  %124 = add i32 %82, 2\l  %125 = icmp eq i32 %103, %28\l  br i1 %125, label %76, label %80, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x637fed0:s0 -> Node0x637d5f0;
	Node0x637fed0:s1 -> Node0x637c840;
}
