digraph "CFG for '_Z16applySobelFilterPhS_Pfii' function" {
	label="CFG for '_Z16applySobelFilterPhS_Pfii' function";

	Node0x5f69ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = add i32 %20, %21\l  %23 = icmp sgt i32 %14, 0\l  br i1 %23, label %24, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5f69ee0:s0 -> Node0x5f6d810;
	Node0x5f69ee0:s1 -> Node0x5f6d8a0;
	Node0x5f6d810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#de614d70",label="{%24:\l24:                                               \l  %25 = add nuw nsw i32 %14, 1\l  %26 = icmp slt i32 %25, %4\l  %27 = icmp sgt i32 %22, 0\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5f6d810:s0 -> Node0x5f6dca0;
	Node0x5f6d810:s1 -> Node0x5f6d8a0;
	Node0x5f6dca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%29:\l29:                                               \l  %30 = add nuw nsw i32 %22, 1\l  %31 = icmp slt i32 %30, %3\l  br i1 %31, label %32, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5f6dca0:s0 -> Node0x5f6dec0;
	Node0x5f6dca0:s1 -> Node0x5f6d8a0;
	Node0x5f6dec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%32:\l32:                                               \l  %33 = add nsw i32 %22, -1\l  %34 = mul nsw i32 %33, %4\l  %35 = add nsw i32 %14, -1\l  %36 = add nsw i32 %34, %35\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %37\l  %39 = load i8, i8 addrspace(1)* %38, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %40 = zext i8 %39 to i32\l  %41 = add nsw i32 %34, %25\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %42\l  %44 = load i8, i8 addrspace(1)* %43, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %45 = zext i8 %44 to i32\l  %46 = mul nsw i32 %22, %4\l  %47 = add nsw i32 %46, %35\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %48\l  %50 = load i8, i8 addrspace(1)* %49, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %51 = zext i8 %50 to i32\l  %52 = add nsw i32 %46, %25\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %53\l  %55 = load i8, i8 addrspace(1)* %54, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %56 = zext i8 %55 to i32\l  %57 = mul nsw i32 %30, %4\l  %58 = add nsw i32 %57, %35\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %59\l  %61 = load i8, i8 addrspace(1)* %60, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %62 = zext i8 %61 to i32\l  %63 = add nsw i32 %57, %25\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %64\l  %66 = load i8, i8 addrspace(1)* %65, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %67 = zext i8 %66 to i32\l  %68 = sub nsw i32 %51, %56\l  %69 = shl nsw i32 %68, 1\l  %70 = add nuw nsw i32 %40, %62\l  %71 = add nuw nsw i32 %45, %67\l  %72 = sub nsw i32 %70, %71\l  %73 = add nsw i32 %72, %69\l  %74 = add nsw i32 %34, %14\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %75\l  %77 = load i8, i8 addrspace(1)* %76, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %78 = zext i8 %77 to i32\l  %79 = shl nuw nsw i32 %78, 1\l  %80 = add nuw nsw i32 %45, %40\l  %81 = add nuw nsw i32 %80, %79\l  %82 = add nsw i32 %57, %14\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %83\l  %85 = load i8, i8 addrspace(1)* %84, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %86 = zext i8 %85 to i32\l  %87 = shl nuw nsw i32 %86, 1\l  %88 = add nuw nsw i32 %67, %62\l  %89 = add nuw nsw i32 %88, %87\l  %90 = sub nsw i32 %81, %89\l  %91 = sitofp i32 %73 to float\l  %92 = fmul contract float %91, %91\l  %93 = sitofp i32 %90 to float\l  %94 = fmul contract float %93, %93\l  %95 = fadd contract float %92, %94\l  %96 = fcmp olt float %95, 0x39F0000000000000\l  %97 = select i1 %96, float 0x41F0000000000000, float 1.000000e+00\l  %98 = fmul float %95, %97\l  %99 = tail call float @llvm.sqrt.f32(float %98)\l  %100 = bitcast float %99 to i32\l  %101 = add nsw i32 %100, -1\l  %102 = bitcast i32 %101 to float\l  %103 = add nsw i32 %100, 1\l  %104 = bitcast i32 %103 to float\l  %105 = tail call i1 @llvm.amdgcn.class.f32(float %98, i32 608)\l  %106 = select i1 %96, float 0x3EF0000000000000, float 1.000000e+00\l  %107 = fneg float %104\l  %108 = tail call float @llvm.fma.f32(float %107, float %99, float %98)\l  %109 = fcmp ogt float %108, 0.000000e+00\l  %110 = fneg float %102\l  %111 = tail call float @llvm.fma.f32(float %110, float %99, float %98)\l  %112 = fcmp ole float %111, 0.000000e+00\l  %113 = select i1 %112, float %102, float %99\l  %114 = select i1 %109, float %104, float %113\l  %115 = fmul float %106, %114\l  %116 = select i1 %105, float %98, float %115\l  %117 = fptoui float %116 to i8\l  %118 = add nsw i32 %46, %14\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %119\l  store i8 %117, i8 addrspace(1)* %120, align 1, !tbaa !7\l  %121 = tail call float @llvm.fabs.f32(float %91)\l  %122 = tail call float @llvm.fabs.f32(float %93)\l  %123 = tail call float @llvm.minnum.f32(float %121, float %122)\l  %124 = tail call float @llvm.maxnum.f32(float %121, float %122)\l  %125 = fdiv float %123, %124, !fpmath !10\l  %126 = fmul float %125, %125\l  %127 = tail call float @llvm.fmuladd.f32(float %126, float\l... 0x3F65A54B00000000, float 0xBF8F4B2180000000)\l  %128 = tail call float @llvm.fmuladd.f32(float %126, float %127, float\l... 0x3FA53F67E0000000)\l  %129 = tail call float @llvm.fmuladd.f32(float %126, float %128, float\l... 0xBFB2FA9AE0000000)\l  %130 = tail call float @llvm.fmuladd.f32(float %126, float %129, float\l... 0x3FBB263640000000)\l  %131 = tail call float @llvm.fmuladd.f32(float %126, float %130, float\l... 0xBFC22C1CC0000000)\l  %132 = tail call float @llvm.fmuladd.f32(float %126, float %131, float\l... 0x3FC99717E0000000)\l  %133 = tail call float @llvm.fmuladd.f32(float %126, float %132, float\l... 0xBFD5554C40000000)\l  %134 = fmul float %126, %133\l  %135 = tail call float @llvm.fmuladd.f32(float %125, float %134, float %125)\l  %136 = fsub float 0x3FF921FB60000000, %135\l  %137 = fcmp ogt float %122, %121\l  %138 = select i1 %137, float %136, float %135\l  %139 = fsub float 0x400921FB60000000, %138\l  %140 = icmp slt i32 %73, 0\l  %141 = select i1 %140, float %139, float %138\l  %142 = select i1 %140, float 0x400921FB60000000, float 0.000000e+00\l  %143 = icmp eq i32 %81, %89\l  %144 = select i1 %143, float %142, float %141\l  %145 = select i1 %140, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %146 = fcmp oeq float %121, 0x7FF0000000000000\l  %147 = fcmp oeq float %122, 0x7FF0000000000000\l  %148 = and i1 %146, %147\l  %149 = select i1 %148, float %145, float %144\l  %150 = tail call float @llvm.copysign.f32(float %149, float %93)\l  %151 = getelementptr inbounds float, float addrspace(1)* %2, i64 %119\l  store float %150, float addrspace(1)* %151, align 4, !tbaa !11\l  br label %152\l}"];
	Node0x5f6dec0 -> Node0x5f6d8a0;
	Node0x5f6d8a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%152:\l152:                                              \l  ret void\l}"];
}
