digraph "CFG for '_Z24linearLayerUpdateWeightsPfS_S_iiiif' function" {
	label="CFG for '_Z24linearLayerUpdateWeightsPfS_S_iiiif' function";

	Node0x6409d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp slt i32 %25, %4\l  %27 = icmp slt i32 %17, %6\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %165\l|{<s0>T|<s1>F}}"];
	Node0x6409d60:s0 -> Node0x640d7e0;
	Node0x6409d60:s1 -> Node0x640d870;
	Node0x640d7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%29:\l29:                                               \l  %30 = icmp sgt i32 %3, 0\l  br i1 %30, label %31, label %60\l|{<s0>T|<s1>F}}"];
	Node0x640d7e0:s0 -> Node0x640da70;
	Node0x640d7e0:s1 -> Node0x640dac0;
	Node0x640da70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %25, %3\l  %33 = mul nsw i32 %17, %5\l  %34 = and i32 %3, 7\l  %35 = icmp ult i32 %3, 8\l  br i1 %35, label %38, label %36\l|{<s0>T|<s1>F}}"];
	Node0x640da70:s0 -> Node0x640dfc0;
	Node0x640da70:s1 -> Node0x640e010;
	Node0x640e010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%36:\l36:                                               \l  %37 = and i32 %3, -8\l  br label %71\l}"];
	Node0x640e010 -> Node0x640e210;
	Node0x640dfc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%38:\l38:                                               \l  %39 = phi float [ undef, %31 ], [ %161, %71 ]\l  %40 = phi i32 [ 0, %31 ], [ %162, %71 ]\l  %41 = phi float [ 0.000000e+00, %31 ], [ %161, %71 ]\l  %42 = icmp eq i32 %34, 0\l  br i1 %42, label %60, label %43\l|{<s0>T|<s1>F}}"];
	Node0x640dfc0:s0 -> Node0x640dac0;
	Node0x640dfc0:s1 -> Node0x640f480;
	Node0x640f480 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %57, %43 ], [ %40, %38 ]\l  %45 = phi float [ %56, %43 ], [ %41, %38 ]\l  %46 = phi i32 [ %58, %43 ], [ 0, %38 ]\l  %47 = add nsw i32 %44, %32\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = add nsw i32 %44, %33\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fmul contract float %50, %54\l  %56 = fadd contract float %45, %55\l  %57 = add nuw nsw i32 %44, 1\l  %58 = add i32 %46, 1\l  %59 = icmp eq i32 %58, %34\l  br i1 %59, label %60, label %43, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x640f480:s0 -> Node0x640dac0;
	Node0x640f480:s1 -> Node0x640f480;
	Node0x640dac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %29 ], [ %39, %38 ], [ %56, %43 ]\l  %62 = mul nsw i32 %25, %6\l  %63 = add nsw i32 %62, %17\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = sitofp i32 %5 to float\l  %68 = fdiv contract float %61, %67\l  %69 = fmul contract float %68, %7\l  %70 = fsub contract float %66, %69\l  store float %70, float addrspace(1)* %65, align 4, !tbaa !7\l  br label %165\l}"];
	Node0x640dac0 -> Node0x640d870;
	Node0x640e210 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%71:\l71:                                               \l  %72 = phi i32 [ 0, %36 ], [ %162, %71 ]\l  %73 = phi float [ 0.000000e+00, %36 ], [ %161, %71 ]\l  %74 = phi i32 [ 0, %36 ], [ %163, %71 ]\l  %75 = add nsw i32 %72, %32\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = add nsw i32 %72, %33\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fmul contract float %78, %82\l  %84 = fadd contract float %73, %83\l  %85 = or i32 %72, 1\l  %86 = add nsw i32 %85, %32\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = add nsw i32 %85, %33\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %89, %93\l  %95 = fadd contract float %84, %94\l  %96 = or i32 %72, 2\l  %97 = add nsw i32 %96, %32\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = add nsw i32 %96, %33\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fmul contract float %100, %104\l  %106 = fadd contract float %95, %105\l  %107 = or i32 %72, 3\l  %108 = add nsw i32 %107, %32\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %0, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = add nsw i32 %107, %33\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %111, %115\l  %117 = fadd contract float %106, %116\l  %118 = or i32 %72, 4\l  %119 = add nsw i32 %118, %32\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = add nsw i32 %118, %33\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fmul contract float %122, %126\l  %128 = fadd contract float %117, %127\l  %129 = or i32 %72, 5\l  %130 = add nsw i32 %129, %32\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = add nsw i32 %129, %33\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = fmul contract float %133, %137\l  %139 = fadd contract float %128, %138\l  %140 = or i32 %72, 6\l  %141 = add nsw i32 %140, %32\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = add nsw i32 %140, %33\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %1, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = fmul contract float %144, %148\l  %150 = fadd contract float %139, %149\l  %151 = or i32 %72, 7\l  %152 = add nsw i32 %151, %32\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = add nsw i32 %151, %33\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %1, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %160 = fmul contract float %155, %159\l  %161 = fadd contract float %150, %160\l  %162 = add nuw nsw i32 %72, 8\l  %163 = add i32 %74, 8\l  %164 = icmp eq i32 %163, %37\l  br i1 %164, label %38, label %71, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x640e210:s0 -> Node0x640dfc0;
	Node0x640e210:s1 -> Node0x640e210;
	Node0x640d870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%165:\l165:                                              \l  ret void\l}"];
}
