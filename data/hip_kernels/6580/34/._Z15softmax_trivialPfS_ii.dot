digraph "CFG for '_Z15softmax_trivialPfS_ii' function" {
	label="CFG for '_Z15softmax_trivialPfS_ii' function";

	Node0x4d41450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = mul nsw i32 %5, %3\l  %8 = add nsw i32 %7, %6\l  %9 = mul nsw i32 %3, %2\l  %10 = icmp slt i32 %8, %9\l  br i1 %10, label %11, label %413\l|{<s0>T|<s1>F}}"];
	Node0x4d41450:s0 -> Node0x4d414a0;
	Node0x4d41450:s1 -> Node0x4d426f0;
	Node0x4d414a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%11:\l11:                                               \l  %12 = icmp sgt i32 %2, 0\l  br i1 %12, label %13, label %36\l|{<s0>T|<s1>F}}"];
	Node0x4d414a0:s0 -> Node0x4d42ed0;
	Node0x4d414a0:s1 -> Node0x4d42f20;
	Node0x4d42ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%13:\l13:                                               \l  %14 = and i32 %2, 7\l  %15 = icmp ult i32 %2, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x4d42ed0:s0 -> Node0x4d431e0;
	Node0x4d42ed0:s1 -> Node0x4d43230;
	Node0x4d43230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%16:\l16:                                               \l  %17 = and i32 %2, -8\l  br label %43\l}"];
	Node0x4d43230 -> Node0x4d42530;
	Node0x4d431e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%18:\l18:                                               \l  %19 = phi float [ undef, %13 ], [ %101, %43 ]\l  %20 = phi i32 [ 0, %13 ], [ %102, %43 ]\l  %21 = phi float [ -1.000000e+08, %13 ], [ %101, %43 ]\l  %22 = icmp eq i32 %14, 0\l  br i1 %22, label %36, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4d431e0:s0 -> Node0x4d42f20;
	Node0x4d431e0:s1 -> Node0x4d44730;
	Node0x4d44730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i32 [ %33, %23 ], [ %20, %18 ]\l  %25 = phi float [ %32, %23 ], [ %21, %18 ]\l  %26 = phi i32 [ %34, %23 ], [ 0, %18 ]\l  %27 = mul nsw i32 %24, %3\l  %28 = add nsw i32 %27, %6\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %32 = tail call float @llvm.maxnum.f32(float %25, float %31)\l  %33 = add nuw nsw i32 %24, 1\l  %34 = add i32 %26, 1\l  %35 = icmp eq i32 %34, %14\l  br i1 %35, label %36, label %23, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4d44730:s0 -> Node0x4d42f20;
	Node0x4d44730:s1 -> Node0x4d44730;
	Node0x4d42f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%36:\l36:                                               \l  %37 = phi float [ -1.000000e+08, %11 ], [ %19, %18 ], [ %32, %23 ]\l  br i1 %12, label %38, label %296\l|{<s0>T|<s1>F}}"];
	Node0x4d42f20:s0 -> Node0x4d45840;
	Node0x4d42f20:s1 -> Node0x4d45890;
	Node0x4d45840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%38:\l38:                                               \l  %39 = and i32 %2, 7\l  %40 = icmp ult i32 %2, 8\l  br i1 %40, label %105, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4d45840:s0 -> Node0x4d45af0;
	Node0x4d45840:s1 -> Node0x4d45b40;
	Node0x4d45b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%41:\l41:                                               \l  %42 = and i32 %2, -8\l  br label %127\l}"];
	Node0x4d45b40 -> Node0x4d45d10;
	Node0x4d42530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %16 ], [ %102, %43 ]\l  %45 = phi float [ -1.000000e+08, %16 ], [ %101, %43 ]\l  %46 = phi i32 [ 0, %16 ], [ %103, %43 ]\l  %47 = mul nsw i32 %44, %3\l  %48 = add nsw i32 %47, %6\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %52 = tail call float @llvm.maxnum.f32(float %45, float %51)\l  %53 = or i32 %44, 1\l  %54 = mul nsw i32 %53, %3\l  %55 = add nsw i32 %54, %6\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %1, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %59 = tail call float @llvm.maxnum.f32(float %52, float %58)\l  %60 = or i32 %44, 2\l  %61 = mul nsw i32 %60, %3\l  %62 = add nsw i32 %61, %6\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %66 = tail call float @llvm.maxnum.f32(float %59, float %65)\l  %67 = or i32 %44, 3\l  %68 = mul nsw i32 %67, %3\l  %69 = add nsw i32 %68, %6\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %73 = tail call float @llvm.maxnum.f32(float %66, float %72)\l  %74 = or i32 %44, 4\l  %75 = mul nsw i32 %74, %3\l  %76 = add nsw i32 %75, %6\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %80 = tail call float @llvm.maxnum.f32(float %73, float %79)\l  %81 = or i32 %44, 5\l  %82 = mul nsw i32 %81, %3\l  %83 = add nsw i32 %82, %6\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %87 = tail call float @llvm.maxnum.f32(float %80, float %86)\l  %88 = or i32 %44, 6\l  %89 = mul nsw i32 %88, %3\l  %90 = add nsw i32 %89, %6\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %94 = tail call float @llvm.maxnum.f32(float %87, float %93)\l  %95 = or i32 %44, 7\l  %96 = mul nsw i32 %95, %3\l  %97 = add nsw i32 %96, %6\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %101 = tail call float @llvm.maxnum.f32(float %94, float %100)\l  %102 = add nuw nsw i32 %44, 8\l  %103 = add i32 %46, 8\l  %104 = icmp eq i32 %103, %17\l  br i1 %104, label %18, label %43, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4d42530:s0 -> Node0x4d431e0;
	Node0x4d42530:s1 -> Node0x4d42530;
	Node0x4d45af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%105:\l105:                                              \l  %106 = phi i32 [ 0, %38 ], [ %193, %127 ]\l  %107 = icmp eq i32 %39, 0\l  br i1 %107, label %121, label %108\l|{<s0>T|<s1>F}}"];
	Node0x4d45af0:s0 -> Node0x4d49720;
	Node0x4d45af0:s1 -> Node0x4d49770;
	Node0x4d49770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%108:\l108:                                              \l  %109 = phi i32 [ %118, %108 ], [ %106, %105 ]\l  %110 = phi i32 [ %119, %108 ], [ 0, %105 ]\l  %111 = mul nsw i32 %109, %3\l  %112 = add nsw i32 %111, %6\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !5\l  %116 = fsub contract float %115, %37\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  store float %116, float addrspace(1)* %117, align 4, !tbaa !5\l  %118 = add nuw nsw i32 %109, 1\l  %119 = add i32 %110, 1\l  %120 = icmp eq i32 %119, %39\l  br i1 %120, label %121, label %108, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4d49770:s0 -> Node0x4d49720;
	Node0x4d49770:s1 -> Node0x4d49770;
	Node0x4d49720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%121:\l121:                                              \l  br i1 %12, label %122, label %296\l|{<s0>T|<s1>F}}"];
	Node0x4d49720:s0 -> Node0x4d4a1c0;
	Node0x4d49720:s1 -> Node0x4d45890;
	Node0x4d4a1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%122:\l122:                                              \l  %123 = and i32 %2, 7\l  %124 = icmp ult i32 %2, 8\l  br i1 %124, label %196, label %125\l|{<s0>T|<s1>F}}"];
	Node0x4d4a1c0:s0 -> Node0x4d4a3e0;
	Node0x4d4a1c0:s1 -> Node0x4d4a430;
	Node0x4d4a430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%125:\l125:                                              \l  %126 = and i32 %2, -8\l  br label %217\l}"];
	Node0x4d4a430 -> Node0x4d4a600;
	Node0x4d45d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%127:\l127:                                              \l  %128 = phi i32 [ 0, %41 ], [ %193, %127 ]\l  %129 = phi i32 [ 0, %41 ], [ %194, %127 ]\l  %130 = mul nsw i32 %128, %3\l  %131 = add nsw i32 %130, %6\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !5\l  %135 = fsub contract float %134, %37\l  %136 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  store float %135, float addrspace(1)* %136, align 4, !tbaa !5\l  %137 = or i32 %128, 1\l  %138 = mul nsw i32 %137, %3\l  %139 = add nsw i32 %138, %6\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %1, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !5\l  %143 = fsub contract float %142, %37\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  store float %143, float addrspace(1)* %144, align 4, !tbaa !5\l  %145 = or i32 %128, 2\l  %146 = mul nsw i32 %145, %3\l  %147 = add nsw i32 %146, %6\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !5\l  %151 = fsub contract float %150, %37\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  store float %151, float addrspace(1)* %152, align 4, !tbaa !5\l  %153 = or i32 %128, 3\l  %154 = mul nsw i32 %153, %3\l  %155 = add nsw i32 %154, %6\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !5\l  %159 = fsub contract float %158, %37\l  %160 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  store float %159, float addrspace(1)* %160, align 4, !tbaa !5\l  %161 = or i32 %128, 4\l  %162 = mul nsw i32 %161, %3\l  %163 = add nsw i32 %162, %6\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %1, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !5\l  %167 = fsub contract float %166, %37\l  %168 = getelementptr inbounds float, float addrspace(1)* %0, i64 %164\l  store float %167, float addrspace(1)* %168, align 4, !tbaa !5\l  %169 = or i32 %128, 5\l  %170 = mul nsw i32 %169, %3\l  %171 = add nsw i32 %170, %6\l  %172 = sext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %1, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !5\l  %175 = fsub contract float %174, %37\l  %176 = getelementptr inbounds float, float addrspace(1)* %0, i64 %172\l  store float %175, float addrspace(1)* %176, align 4, !tbaa !5\l  %177 = or i32 %128, 6\l  %178 = mul nsw i32 %177, %3\l  %179 = add nsw i32 %178, %6\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %1, i64 %180\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !5\l  %183 = fsub contract float %182, %37\l  %184 = getelementptr inbounds float, float addrspace(1)* %0, i64 %180\l  store float %183, float addrspace(1)* %184, align 4, !tbaa !5\l  %185 = or i32 %128, 7\l  %186 = mul nsw i32 %185, %3\l  %187 = add nsw i32 %186, %6\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds float, float addrspace(1)* %1, i64 %188\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !5\l  %191 = fsub contract float %190, %37\l  %192 = getelementptr inbounds float, float addrspace(1)* %0, i64 %188\l  store float %191, float addrspace(1)* %192, align 4, !tbaa !5\l  %193 = add nuw nsw i32 %128, 8\l  %194 = add i32 %129, 8\l  %195 = icmp eq i32 %194, %42\l  br i1 %195, label %105, label %127, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4d45d10:s0 -> Node0x4d45af0;
	Node0x4d45d10:s1 -> Node0x4d45d10;
	Node0x4d4a3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%196:\l196:                                              \l  %197 = phi i32 [ 0, %122 ], [ %275, %217 ]\l  %198 = icmp eq i32 %123, 0\l  br i1 %198, label %211, label %199\l|{<s0>T|<s1>F}}"];
	Node0x4d4a3e0:s0 -> Node0x4d4d7a0;
	Node0x4d4a3e0:s1 -> Node0x4d4d830;
	Node0x4d4d830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%199:\l199:                                              \l  %200 = phi i32 [ %208, %199 ], [ %197, %196 ]\l  %201 = phi i32 [ %209, %199 ], [ 0, %196 ]\l  %202 = mul nsw i32 %200, %3\l  %203 = add nsw i32 %202, %6\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !5\l  %207 = tail call float @llvm.exp.f32(float %206)\l  store float %207, float addrspace(1)* %205, align 4, !tbaa !5\l  %208 = add nuw nsw i32 %200, 1\l  %209 = add i32 %201, 1\l  %210 = icmp eq i32 %209, %123\l  br i1 %210, label %211, label %199, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4d4d830:s0 -> Node0x4d4d7a0;
	Node0x4d4d830:s1 -> Node0x4d4d830;
	Node0x4d4d7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%211:\l211:                                              \l  br i1 %12, label %212, label %296\l|{<s0>T|<s1>F}}"];
	Node0x4d4d7a0:s0 -> Node0x4d4e350;
	Node0x4d4d7a0:s1 -> Node0x4d45890;
	Node0x4d4e350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%212:\l212:                                              \l  %213 = and i32 %2, 7\l  %214 = icmp ult i32 %2, 8\l  br i1 %214, label %278, label %215\l|{<s0>T|<s1>F}}"];
	Node0x4d4e350:s0 -> Node0x4d4e570;
	Node0x4d4e350:s1 -> Node0x4d4e5c0;
	Node0x4d4e5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%215:\l215:                                              \l  %216 = and i32 %2, -8\l  br label %303\l}"];
	Node0x4d4e5c0 -> Node0x4d4e790;
	Node0x4d4a600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%217:\l217:                                              \l  %218 = phi i32 [ 0, %125 ], [ %275, %217 ]\l  %219 = phi i32 [ 0, %125 ], [ %276, %217 ]\l  %220 = mul nsw i32 %218, %3\l  %221 = add nsw i32 %220, %6\l  %222 = sext i32 %221 to i64\l  %223 = getelementptr inbounds float, float addrspace(1)* %0, i64 %222\l  %224 = load float, float addrspace(1)* %223, align 4, !tbaa !5\l  %225 = tail call float @llvm.exp.f32(float %224)\l  store float %225, float addrspace(1)* %223, align 4, !tbaa !5\l  %226 = or i32 %218, 1\l  %227 = mul nsw i32 %226, %3\l  %228 = add nsw i32 %227, %6\l  %229 = sext i32 %228 to i64\l  %230 = getelementptr inbounds float, float addrspace(1)* %0, i64 %229\l  %231 = load float, float addrspace(1)* %230, align 4, !tbaa !5\l  %232 = tail call float @llvm.exp.f32(float %231)\l  store float %232, float addrspace(1)* %230, align 4, !tbaa !5\l  %233 = or i32 %218, 2\l  %234 = mul nsw i32 %233, %3\l  %235 = add nsw i32 %234, %6\l  %236 = sext i32 %235 to i64\l  %237 = getelementptr inbounds float, float addrspace(1)* %0, i64 %236\l  %238 = load float, float addrspace(1)* %237, align 4, !tbaa !5\l  %239 = tail call float @llvm.exp.f32(float %238)\l  store float %239, float addrspace(1)* %237, align 4, !tbaa !5\l  %240 = or i32 %218, 3\l  %241 = mul nsw i32 %240, %3\l  %242 = add nsw i32 %241, %6\l  %243 = sext i32 %242 to i64\l  %244 = getelementptr inbounds float, float addrspace(1)* %0, i64 %243\l  %245 = load float, float addrspace(1)* %244, align 4, !tbaa !5\l  %246 = tail call float @llvm.exp.f32(float %245)\l  store float %246, float addrspace(1)* %244, align 4, !tbaa !5\l  %247 = or i32 %218, 4\l  %248 = mul nsw i32 %247, %3\l  %249 = add nsw i32 %248, %6\l  %250 = sext i32 %249 to i64\l  %251 = getelementptr inbounds float, float addrspace(1)* %0, i64 %250\l  %252 = load float, float addrspace(1)* %251, align 4, !tbaa !5\l  %253 = tail call float @llvm.exp.f32(float %252)\l  store float %253, float addrspace(1)* %251, align 4, !tbaa !5\l  %254 = or i32 %218, 5\l  %255 = mul nsw i32 %254, %3\l  %256 = add nsw i32 %255, %6\l  %257 = sext i32 %256 to i64\l  %258 = getelementptr inbounds float, float addrspace(1)* %0, i64 %257\l  %259 = load float, float addrspace(1)* %258, align 4, !tbaa !5\l  %260 = tail call float @llvm.exp.f32(float %259)\l  store float %260, float addrspace(1)* %258, align 4, !tbaa !5\l  %261 = or i32 %218, 6\l  %262 = mul nsw i32 %261, %3\l  %263 = add nsw i32 %262, %6\l  %264 = sext i32 %263 to i64\l  %265 = getelementptr inbounds float, float addrspace(1)* %0, i64 %264\l  %266 = load float, float addrspace(1)* %265, align 4, !tbaa !5\l  %267 = tail call float @llvm.exp.f32(float %266)\l  store float %267, float addrspace(1)* %265, align 4, !tbaa !5\l  %268 = or i32 %218, 7\l  %269 = mul nsw i32 %268, %3\l  %270 = add nsw i32 %269, %6\l  %271 = sext i32 %270 to i64\l  %272 = getelementptr inbounds float, float addrspace(1)* %0, i64 %271\l  %273 = load float, float addrspace(1)* %272, align 4, !tbaa !5\l  %274 = tail call float @llvm.exp.f32(float %273)\l  store float %274, float addrspace(1)* %272, align 4, !tbaa !5\l  %275 = add nuw nsw i32 %218, 8\l  %276 = add i32 %219, 8\l  %277 = icmp eq i32 %276, %126\l  br i1 %277, label %196, label %217, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4d4a600:s0 -> Node0x4d4a3e0;
	Node0x4d4a600:s1 -> Node0x4d4a600;
	Node0x4d4e570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%278:\l278:                                              \l  %279 = phi float [ undef, %212 ], [ %361, %303 ]\l  %280 = phi i32 [ 0, %212 ], [ %362, %303 ]\l  %281 = phi float [ 0.000000e+00, %212 ], [ %361, %303 ]\l  %282 = icmp eq i32 %213, 0\l  br i1 %282, label %296, label %283\l|{<s0>T|<s1>F}}"];
	Node0x4d4e570:s0 -> Node0x4d45890;
	Node0x4d4e570:s1 -> Node0x4d41c70;
	Node0x4d41c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%283:\l283:                                              \l  %284 = phi i32 [ %293, %283 ], [ %280, %278 ]\l  %285 = phi float [ %292, %283 ], [ %281, %278 ]\l  %286 = phi i32 [ %294, %283 ], [ 0, %278 ]\l  %287 = mul nsw i32 %284, %3\l  %288 = add nsw i32 %287, %6\l  %289 = sext i32 %288 to i64\l  %290 = getelementptr inbounds float, float addrspace(1)* %0, i64 %289\l  %291 = load float, float addrspace(1)* %290, align 4, !tbaa !5\l  %292 = fadd contract float %285, %291\l  %293 = add nuw nsw i32 %284, 1\l  %294 = add i32 %286, 1\l  %295 = icmp eq i32 %294, %213\l  br i1 %295, label %296, label %283, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4d41c70:s0 -> Node0x4d45890;
	Node0x4d41c70:s1 -> Node0x4d41c70;
	Node0x4d45890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%296:\l296:                                              \l  %297 = phi float [ 0.000000e+00, %211 ], [ 0.000000e+00, %121 ], [\l... 0.000000e+00, %36 ], [ %279, %278 ], [ %292, %283 ]\l  br i1 %12, label %298, label %413\l|{<s0>T|<s1>F}}"];
	Node0x4d45890:s0 -> Node0x4d53250;
	Node0x4d45890:s1 -> Node0x4d426f0;
	Node0x4d53250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%298:\l298:                                              \l  %299 = and i32 %2, 3\l  %300 = icmp ult i32 %2, 4\l  br i1 %300, label %398, label %301\l|{<s0>T|<s1>F}}"];
	Node0x4d53250:s0 -> Node0x4d53470;
	Node0x4d53250:s1 -> Node0x4d534c0;
	Node0x4d534c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%301:\l301:                                              \l  %302 = and i32 %2, -4\l  br label %365\l}"];
	Node0x4d534c0 -> Node0x4d53690;
	Node0x4d4e790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%303:\l303:                                              \l  %304 = phi i32 [ 0, %215 ], [ %362, %303 ]\l  %305 = phi float [ 0.000000e+00, %215 ], [ %361, %303 ]\l  %306 = phi i32 [ 0, %215 ], [ %363, %303 ]\l  %307 = mul nsw i32 %304, %3\l  %308 = add nsw i32 %307, %6\l  %309 = sext i32 %308 to i64\l  %310 = getelementptr inbounds float, float addrspace(1)* %0, i64 %309\l  %311 = load float, float addrspace(1)* %310, align 4, !tbaa !5\l  %312 = fadd contract float %305, %311\l  %313 = or i32 %304, 1\l  %314 = mul nsw i32 %313, %3\l  %315 = add nsw i32 %314, %6\l  %316 = sext i32 %315 to i64\l  %317 = getelementptr inbounds float, float addrspace(1)* %0, i64 %316\l  %318 = load float, float addrspace(1)* %317, align 4, !tbaa !5\l  %319 = fadd contract float %312, %318\l  %320 = or i32 %304, 2\l  %321 = mul nsw i32 %320, %3\l  %322 = add nsw i32 %321, %6\l  %323 = sext i32 %322 to i64\l  %324 = getelementptr inbounds float, float addrspace(1)* %0, i64 %323\l  %325 = load float, float addrspace(1)* %324, align 4, !tbaa !5\l  %326 = fadd contract float %319, %325\l  %327 = or i32 %304, 3\l  %328 = mul nsw i32 %327, %3\l  %329 = add nsw i32 %328, %6\l  %330 = sext i32 %329 to i64\l  %331 = getelementptr inbounds float, float addrspace(1)* %0, i64 %330\l  %332 = load float, float addrspace(1)* %331, align 4, !tbaa !5\l  %333 = fadd contract float %326, %332\l  %334 = or i32 %304, 4\l  %335 = mul nsw i32 %334, %3\l  %336 = add nsw i32 %335, %6\l  %337 = sext i32 %336 to i64\l  %338 = getelementptr inbounds float, float addrspace(1)* %0, i64 %337\l  %339 = load float, float addrspace(1)* %338, align 4, !tbaa !5\l  %340 = fadd contract float %333, %339\l  %341 = or i32 %304, 5\l  %342 = mul nsw i32 %341, %3\l  %343 = add nsw i32 %342, %6\l  %344 = sext i32 %343 to i64\l  %345 = getelementptr inbounds float, float addrspace(1)* %0, i64 %344\l  %346 = load float, float addrspace(1)* %345, align 4, !tbaa !5\l  %347 = fadd contract float %340, %346\l  %348 = or i32 %304, 6\l  %349 = mul nsw i32 %348, %3\l  %350 = add nsw i32 %349, %6\l  %351 = sext i32 %350 to i64\l  %352 = getelementptr inbounds float, float addrspace(1)* %0, i64 %351\l  %353 = load float, float addrspace(1)* %352, align 4, !tbaa !5\l  %354 = fadd contract float %347, %353\l  %355 = or i32 %304, 7\l  %356 = mul nsw i32 %355, %3\l  %357 = add nsw i32 %356, %6\l  %358 = sext i32 %357 to i64\l  %359 = getelementptr inbounds float, float addrspace(1)* %0, i64 %358\l  %360 = load float, float addrspace(1)* %359, align 4, !tbaa !5\l  %361 = fadd contract float %354, %360\l  %362 = add nuw nsw i32 %304, 8\l  %363 = add i32 %306, 8\l  %364 = icmp eq i32 %363, %216\l  br i1 %364, label %278, label %303, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4d4e790:s0 -> Node0x4d4e570;
	Node0x4d4e790:s1 -> Node0x4d4e790;
	Node0x4d53690 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%365:\l365:                                              \l  %366 = phi i32 [ 0, %301 ], [ %395, %365 ]\l  %367 = phi i32 [ 0, %301 ], [ %396, %365 ]\l  %368 = mul nsw i32 %366, %3\l  %369 = add nsw i32 %368, %6\l  %370 = sext i32 %369 to i64\l  %371 = getelementptr inbounds float, float addrspace(1)* %0, i64 %370\l  %372 = load float, float addrspace(1)* %371, align 4, !tbaa !5\l  %373 = fdiv contract float %372, %297\l  store float %373, float addrspace(1)* %371, align 4, !tbaa !5\l  %374 = or i32 %366, 1\l  %375 = mul nsw i32 %374, %3\l  %376 = add nsw i32 %375, %6\l  %377 = sext i32 %376 to i64\l  %378 = getelementptr inbounds float, float addrspace(1)* %0, i64 %377\l  %379 = load float, float addrspace(1)* %378, align 4, !tbaa !5\l  %380 = fdiv contract float %379, %297\l  store float %380, float addrspace(1)* %378, align 4, !tbaa !5\l  %381 = or i32 %366, 2\l  %382 = mul nsw i32 %381, %3\l  %383 = add nsw i32 %382, %6\l  %384 = sext i32 %383 to i64\l  %385 = getelementptr inbounds float, float addrspace(1)* %0, i64 %384\l  %386 = load float, float addrspace(1)* %385, align 4, !tbaa !5\l  %387 = fdiv contract float %386, %297\l  store float %387, float addrspace(1)* %385, align 4, !tbaa !5\l  %388 = or i32 %366, 3\l  %389 = mul nsw i32 %388, %3\l  %390 = add nsw i32 %389, %6\l  %391 = sext i32 %390 to i64\l  %392 = getelementptr inbounds float, float addrspace(1)* %0, i64 %391\l  %393 = load float, float addrspace(1)* %392, align 4, !tbaa !5\l  %394 = fdiv contract float %393, %297\l  store float %394, float addrspace(1)* %392, align 4, !tbaa !5\l  %395 = add nuw nsw i32 %366, 4\l  %396 = add i32 %367, 4\l  %397 = icmp eq i32 %396, %302\l  br i1 %397, label %398, label %365, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4d53690:s0 -> Node0x4d53470;
	Node0x4d53690:s1 -> Node0x4d53690;
	Node0x4d53470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%398:\l398:                                              \l  %399 = phi i32 [ 0, %298 ], [ %395, %365 ]\l  %400 = icmp eq i32 %299, 0\l  br i1 %400, label %413, label %401\l|{<s0>T|<s1>F}}"];
	Node0x4d53470:s0 -> Node0x4d426f0;
	Node0x4d53470:s1 -> Node0x4d57670;
	Node0x4d57670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%401:\l401:                                              \l  %402 = phi i32 [ %410, %401 ], [ %399, %398 ]\l  %403 = phi i32 [ %411, %401 ], [ 0, %398 ]\l  %404 = mul nsw i32 %402, %3\l  %405 = add nsw i32 %404, %6\l  %406 = sext i32 %405 to i64\l  %407 = getelementptr inbounds float, float addrspace(1)* %0, i64 %406\l  %408 = load float, float addrspace(1)* %407, align 4, !tbaa !5\l  %409 = fdiv contract float %408, %297\l  store float %409, float addrspace(1)* %407, align 4, !tbaa !5\l  %410 = add nuw nsw i32 %402, 1\l  %411 = add i32 %403, 1\l  %412 = icmp eq i32 %411, %299\l  br i1 %412, label %413, label %401, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4d57670:s0 -> Node0x4d426f0;
	Node0x4d57670:s1 -> Node0x4d57670;
	Node0x4d426f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%413:\l413:                                              \l  ret void\l}"];
}
