digraph "CFG for '_Z19linearLayerBackpropPfS_S_iiii' function" {
	label="CFG for '_Z19linearLayerBackpropPfS_S_iiii' function";

	Node0x62c1e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %3\l  %26 = icmp slt i32 %16, %5\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %175\l|{<s0>T|<s1>F}}"];
	Node0x62c1e10:s0 -> Node0x62c58a0;
	Node0x62c1e10:s1 -> Node0x62c5930;
	Node0x62c58a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%28:\l28:                                               \l  %29 = icmp sgt i32 %4, 0\l  br i1 %29, label %30, label %59\l|{<s0>T|<s1>F}}"];
	Node0x62c58a0:s0 -> Node0x62c5b30;
	Node0x62c58a0:s1 -> Node0x62c5b80;
	Node0x62c5b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = and i32 %4, 7\l  %32 = icmp ult i32 %4, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x62c5b30:s0 -> Node0x62c3c70;
	Node0x62c5b30:s1 -> Node0x62c3cc0;
	Node0x62c3cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %4, -8\l  br label %65\l}"];
	Node0x62c3cc0 -> Node0x62c6190;
	Node0x62c3c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %30 ], [ %171, %65 ]\l  %37 = phi i32 [ 0, %30 ], [ %172, %65 ]\l  %38 = phi float [ 0.000000e+00, %30 ], [ %171, %65 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %59, label %40\l|{<s0>T|<s1>F}}"];
	Node0x62c3c70:s0 -> Node0x62c5b80;
	Node0x62c3c70:s1 -> Node0x62c7400;
	Node0x62c7400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ %56, %40 ], [ %37, %35 ]\l  %42 = phi float [ %55, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %57, %40 ], [ 0, %35 ]\l  %44 = mul nsw i32 %41, %3\l  %45 = add nsw i32 %44, %24\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = mul nsw i32 %41, %5\l  %50 = add nsw i32 %49, %16\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = fmul contract float %48, %53\l  %55 = fadd contract float %42, %54\l  %56 = add nuw nsw i32 %41, 1\l  %57 = add i32 %43, 1\l  %58 = icmp eq i32 %57, %31\l  br i1 %58, label %59, label %40, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x62c7400:s0 -> Node0x62c5b80;
	Node0x62c7400:s1 -> Node0x62c7400;
	Node0x62c5b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%59:\l59:                                               \l  %60 = phi float [ 0.000000e+00, %28 ], [ %36, %35 ], [ %55, %40 ]\l  %61 = mul nsw i32 %24, %5\l  %62 = add nsw i32 %61, %16\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %2, i64 %63\l  store float %60, float addrspace(1)* %64, align 4, !tbaa !7\l  br label %175\l}"];
	Node0x62c5b80 -> Node0x62c5930;
	Node0x62c6190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%65:\l65:                                               \l  %66 = phi i32 [ 0, %33 ], [ %172, %65 ]\l  %67 = phi float [ 0.000000e+00, %33 ], [ %171, %65 ]\l  %68 = phi i32 [ 0, %33 ], [ %173, %65 ]\l  %69 = mul nsw i32 %66, %3\l  %70 = add nsw i32 %69, %24\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = mul nsw i32 %66, %5\l  %75 = add nsw i32 %74, %16\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fmul contract float %73, %78\l  %80 = fadd contract float %67, %79\l  %81 = or i32 %66, 1\l  %82 = mul nsw i32 %81, %3\l  %83 = add nsw i32 %82, %24\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = mul nsw i32 %81, %5\l  %88 = add nsw i32 %87, %16\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = fmul contract float %86, %91\l  %93 = fadd contract float %80, %92\l  %94 = or i32 %66, 2\l  %95 = mul nsw i32 %94, %3\l  %96 = add nsw i32 %95, %24\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = mul nsw i32 %94, %5\l  %101 = add nsw i32 %100, %16\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %105 = fmul contract float %99, %104\l  %106 = fadd contract float %93, %105\l  %107 = or i32 %66, 3\l  %108 = mul nsw i32 %107, %3\l  %109 = add nsw i32 %108, %24\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = mul nsw i32 %107, %5\l  %114 = add nsw i32 %113, %16\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fmul contract float %112, %117\l  %119 = fadd contract float %106, %118\l  %120 = or i32 %66, 4\l  %121 = mul nsw i32 %120, %3\l  %122 = add nsw i32 %121, %24\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = mul nsw i32 %120, %5\l  %127 = add nsw i32 %126, %16\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = fmul contract float %125, %130\l  %132 = fadd contract float %119, %131\l  %133 = or i32 %66, 5\l  %134 = mul nsw i32 %133, %3\l  %135 = add nsw i32 %134, %24\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %139 = mul nsw i32 %133, %5\l  %140 = add nsw i32 %139, %16\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %1, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = fmul contract float %138, %143\l  %145 = fadd contract float %132, %144\l  %146 = or i32 %66, 6\l  %147 = mul nsw i32 %146, %3\l  %148 = add nsw i32 %147, %24\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %0, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %152 = mul nsw i32 %146, %5\l  %153 = add nsw i32 %152, %16\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %1, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %157 = fmul contract float %151, %156\l  %158 = fadd contract float %145, %157\l  %159 = or i32 %66, 7\l  %160 = mul nsw i32 %159, %3\l  %161 = add nsw i32 %160, %24\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %165 = mul nsw i32 %159, %5\l  %166 = add nsw i32 %165, %16\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %1, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %170 = fmul contract float %164, %169\l  %171 = fadd contract float %158, %170\l  %172 = add nuw nsw i32 %66, 8\l  %173 = add i32 %68, 8\l  %174 = icmp eq i32 %173, %34\l  br i1 %174, label %35, label %65, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x62c6190:s0 -> Node0x62c3c70;
	Node0x62c6190:s1 -> Node0x62c6190;
	Node0x62c5930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%175:\l175:                                              \l  ret void\l}"];
}
