digraph "CFG for '_Z18linearLayerForwardPfS_S_S_iiii' function" {
	label="CFG for '_Z18linearLayerForwardPfS_S_S_iiii' function";

	Node0x4710e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 2, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp slt i32 %17, %5\l  %27 = icmp slt i32 %25, %6\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %172\l|{<s0>T|<s1>F}}"];
	Node0x4710e70:s0 -> Node0x47148f0;
	Node0x4710e70:s1 -> Node0x4714980;
	Node0x47148f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%29:\l29:                                               \l  %30 = icmp sgt i32 %4, 0\l  br i1 %30, label %31, label %60\l|{<s0>T|<s1>F}}"];
	Node0x47148f0:s0 -> Node0x4714b80;
	Node0x47148f0:s1 -> Node0x4714bd0;
	Node0x4714b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %17, %4\l  %33 = and i32 %4, 7\l  %34 = icmp ult i32 %4, 8\l  br i1 %34, label %37, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4714b80:s0 -> Node0x4715040;
	Node0x4714b80:s1 -> Node0x4715090;
	Node0x4715090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%35:\l35:                                               \l  %36 = and i32 %4, -8\l  br label %70\l}"];
	Node0x4715090 -> Node0x4715290;
	Node0x4715040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = phi float [ undef, %31 ], [ %168, %70 ]\l  %39 = phi i32 [ 0, %31 ], [ %169, %70 ]\l  %40 = phi float [ 0.000000e+00, %31 ], [ %168, %70 ]\l  %41 = icmp eq i32 %33, 0\l  br i1 %41, label %60, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4715040:s0 -> Node0x4714bd0;
	Node0x4715040:s1 -> Node0x4716500;
	Node0x4716500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %57, %42 ], [ %39, %37 ]\l  %44 = phi float [ %56, %42 ], [ %40, %37 ]\l  %45 = phi i32 [ %58, %42 ], [ 0, %37 ]\l  %46 = add nsw i32 %43, %32\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %50 = mul nsw i32 %43, %6\l  %51 = add nsw i32 %50, %25\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fmul contract float %49, %54\l  %56 = fadd contract float %44, %55\l  %57 = add nuw nsw i32 %43, 1\l  %58 = add i32 %45, 1\l  %59 = icmp eq i32 %58, %33\l  br i1 %59, label %60, label %42, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4716500:s0 -> Node0x4714bd0;
	Node0x4716500:s1 -> Node0x4716500;
	Node0x4714bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %29 ], [ %38, %37 ], [ %56, %42 ]\l  %62 = sext i32 %17 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %3, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = fadd contract float %61, %64\l  %66 = mul nsw i32 %17, %6\l  %67 = add nsw i32 %66, %25\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %2, i64 %68\l  store float %65, float addrspace(1)* %69, align 4, !tbaa !7\l  br label %172\l}"];
	Node0x4714bd0 -> Node0x4714980;
	Node0x4715290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%70:\l70:                                               \l  %71 = phi i32 [ 0, %35 ], [ %169, %70 ]\l  %72 = phi float [ 0.000000e+00, %35 ], [ %168, %70 ]\l  %73 = phi i32 [ 0, %35 ], [ %170, %70 ]\l  %74 = add nsw i32 %71, %32\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = mul nsw i32 %71, %6\l  %79 = add nsw i32 %78, %25\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %83 = fmul contract float %77, %82\l  %84 = fadd contract float %72, %83\l  %85 = or i32 %71, 1\l  %86 = add nsw i32 %85, %32\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = mul nsw i32 %85, %6\l  %91 = add nsw i32 %90, %25\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = fmul contract float %89, %94\l  %96 = fadd contract float %84, %95\l  %97 = or i32 %71, 2\l  %98 = add nsw i32 %97, %32\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = mul nsw i32 %97, %6\l  %103 = add nsw i32 %102, %25\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = fmul contract float %101, %106\l  %108 = fadd contract float %96, %107\l  %109 = or i32 %71, 3\l  %110 = add nsw i32 %109, %32\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %114 = mul nsw i32 %109, %6\l  %115 = add nsw i32 %114, %25\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %1, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = fmul contract float %113, %118\l  %120 = fadd contract float %108, %119\l  %121 = or i32 %71, 4\l  %122 = add nsw i32 %121, %32\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = mul nsw i32 %121, %6\l  %127 = add nsw i32 %126, %25\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %1, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = fmul contract float %125, %130\l  %132 = fadd contract float %120, %131\l  %133 = or i32 %71, 5\l  %134 = add nsw i32 %133, %32\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %0, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = mul nsw i32 %133, %6\l  %139 = add nsw i32 %138, %25\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %1, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %143 = fmul contract float %137, %142\l  %144 = fadd contract float %132, %143\l  %145 = or i32 %71, 6\l  %146 = add nsw i32 %145, %32\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %0, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %150 = mul nsw i32 %145, %6\l  %151 = add nsw i32 %150, %25\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %1, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %155 = fmul contract float %149, %154\l  %156 = fadd contract float %144, %155\l  %157 = or i32 %71, 7\l  %158 = add nsw i32 %157, %32\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %0, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %162 = mul nsw i32 %157, %6\l  %163 = add nsw i32 %162, %25\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %1, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %167 = fmul contract float %161, %166\l  %168 = fadd contract float %156, %167\l  %169 = add nuw nsw i32 %71, 8\l  %170 = add i32 %73, 8\l  %171 = icmp eq i32 %170, %36\l  br i1 %171, label %37, label %70, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4715290:s0 -> Node0x4715040;
	Node0x4715290:s1 -> Node0x4715290;
	Node0x4714980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%172:\l172:                                              \l  ret void\l}"];
}
