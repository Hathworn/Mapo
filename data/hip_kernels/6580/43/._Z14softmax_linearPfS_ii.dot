digraph "CFG for '_Z14softmax_linearPfS_ii' function" {
	label="CFG for '_Z14softmax_linearPfS_ii' function";

	Node0x5a0eb00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = mul nsw i32 %5, %3\l  %8 = add nsw i32 %7, %6\l  %9 = mul nsw i32 %3, %2\l  %10 = icmp slt i32 %8, %9\l  br i1 %10, label %11, label %337\l|{<s0>T|<s1>F}}"];
	Node0x5a0eb00:s0 -> Node0x5a0eb50;
	Node0x5a0eb00:s1 -> Node0x5a0fda0;
	Node0x5a0eb50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%11:\l11:                                               \l  %12 = icmp sgt i32 %2, 0\l  br i1 %12, label %13, label %115\l|{<s0>T|<s1>F}}"];
	Node0x5a0eb50:s0 -> Node0x5a10580;
	Node0x5a0eb50:s1 -> Node0x5a105d0;
	Node0x5a10580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%13:\l13:                                               \l  %14 = and i32 %2, 7\l  %15 = icmp ult i32 %2, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x5a10580:s0 -> Node0x5a10890;
	Node0x5a10580:s1 -> Node0x5a108e0;
	Node0x5a108e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%16:\l16:                                               \l  %17 = and i32 %2, -8\l  br label %39\l}"];
	Node0x5a108e0 -> Node0x5a0fbe0;
	Node0x5a10890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%18:\l18:                                               \l  %19 = phi i32 [ 0, %13 ], [ %97, %39 ]\l  %20 = icmp eq i32 %14, 0\l  br i1 %20, label %33, label %21\l|{<s0>T|<s1>F}}"];
	Node0x5a10890:s0 -> Node0x5a10da0;
	Node0x5a10890:s1 -> Node0x5a10e30;
	Node0x5a10e30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%21:\l21:                                               \l  %22 = phi i32 [ %30, %21 ], [ %19, %18 ]\l  %23 = phi i32 [ %31, %21 ], [ 0, %18 ]\l  %24 = mul nsw i32 %22, %3\l  %25 = add nsw i32 %24, %6\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %1, i64 %26\l  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %29 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %22\l  store float %28, float addrspace(3)* %29, align 4, !tbaa !5\l  %30 = add nuw nsw i32 %22, 1\l  %31 = add i32 %23, 1\l  %32 = icmp eq i32 %31, %14\l  br i1 %32, label %33, label %21, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5a10e30:s0 -> Node0x5a10da0;
	Node0x5a10e30:s1 -> Node0x5a10e30;
	Node0x5a10da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%33:\l33:                                               \l  br i1 %12, label %34, label %115\l|{<s0>T|<s1>F}}"];
	Node0x5a10da0:s0 -> Node0x5a12310;
	Node0x5a10da0:s1 -> Node0x5a105d0;
	Node0x5a12310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%34:\l34:                                               \l  %35 = and i32 %2, 7\l  %36 = icmp ult i32 %2, 8\l  br i1 %36, label %100, label %37\l|{<s0>T|<s1>F}}"];
	Node0x5a12310:s0 -> Node0x5a12530;
	Node0x5a12310:s1 -> Node0x5a12580;
	Node0x5a12580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%37:\l37:                                               \l  %38 = and i32 %2, -8\l  br label %122\l}"];
	Node0x5a12580 -> Node0x5a12750;
	Node0x5a0fbe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%39:\l39:                                               \l  %40 = phi i32 [ 0, %16 ], [ %97, %39 ]\l  %41 = phi i32 [ 0, %16 ], [ %98, %39 ]\l  %42 = mul nsw i32 %40, %3\l  %43 = add nsw i32 %42, %6\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %47 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %40\l  store float %46, float addrspace(3)* %47, align 4, !tbaa !5\l  %48 = or i32 %40, 1\l  %49 = mul nsw i32 %48, %3\l  %50 = add nsw i32 %49, %6\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %54 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %48\l  store float %53, float addrspace(3)* %54, align 4, !tbaa !5\l  %55 = or i32 %40, 2\l  %56 = mul nsw i32 %55, %3\l  %57 = add nsw i32 %56, %6\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %61 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %55\l  store float %60, float addrspace(3)* %61, align 4, !tbaa !5\l  %62 = or i32 %40, 3\l  %63 = mul nsw i32 %62, %3\l  %64 = add nsw i32 %63, %6\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %1, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %68 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %62\l  store float %67, float addrspace(3)* %68, align 4, !tbaa !5\l  %69 = or i32 %40, 4\l  %70 = mul nsw i32 %69, %3\l  %71 = add nsw i32 %70, %6\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %75 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %69\l  store float %74, float addrspace(3)* %75, align 4, !tbaa !5\l  %76 = or i32 %40, 5\l  %77 = mul nsw i32 %76, %3\l  %78 = add nsw i32 %77, %6\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %82 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %76\l  store float %81, float addrspace(3)* %82, align 4, !tbaa !5\l  %83 = or i32 %40, 6\l  %84 = mul nsw i32 %83, %3\l  %85 = add nsw i32 %84, %6\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %89 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %83\l  store float %88, float addrspace(3)* %89, align 4, !tbaa !5\l  %90 = or i32 %40, 7\l  %91 = mul nsw i32 %90, %3\l  %92 = add nsw i32 %91, %6\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %96 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @_share,\l... i32 0, i32 %90\l  store float %95, float addrspace(3)* %96, align 4, !tbaa !5\l  %97 = add nuw nsw i32 %40, 8\l  %98 = add i32 %41, 8\l  %99 = icmp eq i32 %98, %17\l  br i1 %99, label %18, label %39, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5a0fbe0:s0 -> Node0x5a10890;
	Node0x5a0fbe0:s1 -> Node0x5a0fbe0;
	Node0x5a12530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%100:\l100:                                              \l  %101 = phi float [ undef, %34 ], [ %156, %122 ]\l  %102 = phi i32 [ 0, %34 ], [ %157, %122 ]\l  %103 = phi float [ -1.000000e+08, %34 ], [ %156, %122 ]\l  %104 = icmp eq i32 %35, 0\l  br i1 %104, label %115, label %105\l|{<s0>T|<s1>F}}"];
	Node0x5a12530:s0 -> Node0x5a105d0;
	Node0x5a12530:s1 -> Node0x5a16c60;
	Node0x5a16c60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%105:\l105:                                              \l  %106 = phi i32 [ %112, %105 ], [ %102, %100 ]\l  %107 = phi float [ %111, %105 ], [ %103, %100 ]\l  %108 = phi i32 [ %113, %105 ], [ 0, %100 ]\l  %109 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %106\l  %110 = load float, float addrspace(3)* %109, align 4, !tbaa !5\l  %111 = tail call float @llvm.maxnum.f32(float %107, float %110)\l  %112 = add nuw nsw i32 %106, 1\l  %113 = add i32 %108, 1\l  %114 = icmp eq i32 %113, %35\l  br i1 %114, label %115, label %105, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5a16c60:s0 -> Node0x5a105d0;
	Node0x5a16c60:s1 -> Node0x5a16c60;
	Node0x5a105d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%115:\l115:                                              \l  %116 = phi float [ -1.000000e+08, %33 ], [ -1.000000e+08, %11 ], [ %101,\l... %100 ], [ %111, %105 ]\l  br i1 %12, label %117, label %239\l|{<s0>T|<s1>F}}"];
	Node0x5a105d0:s0 -> Node0x5a177b0;
	Node0x5a105d0:s1 -> Node0x5a17800;
	Node0x5a177b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%117:\l117:                                              \l  %118 = and i32 %2, 7\l  %119 = icmp ult i32 %2, 8\l  br i1 %119, label %160, label %120\l|{<s0>T|<s1>F}}"];
	Node0x5a177b0:s0 -> Node0x5a17a60;
	Node0x5a177b0:s1 -> Node0x5a17ab0;
	Node0x5a17ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%120:\l120:                                              \l  %121 = and i32 %2, -8\l  br label %179\l}"];
	Node0x5a17ab0 -> Node0x5a17c80;
	Node0x5a12750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%122:\l122:                                              \l  %123 = phi i32 [ 0, %37 ], [ %157, %122 ]\l  %124 = phi float [ -1.000000e+08, %37 ], [ %156, %122 ]\l  %125 = phi i32 [ 0, %37 ], [ %158, %122 ]\l  %126 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %123\l  %127 = load float, float addrspace(3)* %126, align 4, !tbaa !5\l  %128 = tail call float @llvm.maxnum.f32(float %124, float %127)\l  %129 = or i32 %123, 1\l  %130 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %129\l  %131 = load float, float addrspace(3)* %130, align 4, !tbaa !5\l  %132 = tail call float @llvm.maxnum.f32(float %128, float %131)\l  %133 = or i32 %123, 2\l  %134 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %133\l  %135 = load float, float addrspace(3)* %134, align 4, !tbaa !5\l  %136 = tail call float @llvm.maxnum.f32(float %132, float %135)\l  %137 = or i32 %123, 3\l  %138 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %137\l  %139 = load float, float addrspace(3)* %138, align 4, !tbaa !5\l  %140 = tail call float @llvm.maxnum.f32(float %136, float %139)\l  %141 = or i32 %123, 4\l  %142 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %141\l  %143 = load float, float addrspace(3)* %142, align 4, !tbaa !5\l  %144 = tail call float @llvm.maxnum.f32(float %140, float %143)\l  %145 = or i32 %123, 5\l  %146 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %145\l  %147 = load float, float addrspace(3)* %146, align 4, !tbaa !5\l  %148 = tail call float @llvm.maxnum.f32(float %144, float %147)\l  %149 = or i32 %123, 6\l  %150 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %149\l  %151 = load float, float addrspace(3)* %150, align 4, !tbaa !5\l  %152 = tail call float @llvm.maxnum.f32(float %148, float %151)\l  %153 = or i32 %123, 7\l  %154 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %153\l  %155 = load float, float addrspace(3)* %154, align 4, !tbaa !5\l  %156 = tail call float @llvm.maxnum.f32(float %152, float %155)\l  %157 = add nuw nsw i32 %123, 8\l  %158 = add i32 %125, 8\l  %159 = icmp eq i32 %158, %38\l  br i1 %159, label %100, label %122, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5a12750:s0 -> Node0x5a12530;
	Node0x5a12750:s1 -> Node0x5a12750;
	Node0x5a17a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%160:\l160:                                              \l  %161 = phi i32 [ 0, %117 ], [ %221, %179 ]\l  %162 = icmp eq i32 %118, 0\l  br i1 %162, label %173, label %163\l|{<s0>T|<s1>F}}"];
	Node0x5a17a60:s0 -> Node0x5a19e20;
	Node0x5a17a60:s1 -> Node0x5a19e70;
	Node0x5a19e70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%163:\l163:                                              \l  %164 = phi i32 [ %170, %163 ], [ %161, %160 ]\l  %165 = phi i32 [ %171, %163 ], [ 0, %160 ]\l  %166 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %164\l  %167 = load float, float addrspace(3)* %166, align 4, !tbaa !5\l  %168 = fsub contract float %167, %116\l  %169 = tail call float @llvm.exp.f32(float %168)\l  store float %169, float addrspace(3)* %166, align 4, !tbaa !5\l  %170 = add nuw nsw i32 %164, 1\l  %171 = add i32 %165, 1\l  %172 = icmp eq i32 %171, %118\l  br i1 %172, label %173, label %163, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5a19e70:s0 -> Node0x5a19e20;
	Node0x5a19e70:s1 -> Node0x5a19e70;
	Node0x5a19e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%173:\l173:                                              \l  br i1 %12, label %174, label %239\l|{<s0>T|<s1>F}}"];
	Node0x5a19e20:s0 -> Node0x5a1a870;
	Node0x5a19e20:s1 -> Node0x5a17800;
	Node0x5a1a870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%174:\l174:                                              \l  %175 = and i32 %2, 7\l  %176 = icmp ult i32 %2, 8\l  br i1 %176, label %224, label %177\l|{<s0>T|<s1>F}}"];
	Node0x5a1a870:s0 -> Node0x5a1aa90;
	Node0x5a1a870:s1 -> Node0x5a1aae0;
	Node0x5a1aae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%177:\l177:                                              \l  %178 = and i32 %2, -8\l  br label %246\l}"];
	Node0x5a1aae0 -> Node0x5a1acb0;
	Node0x5a17c80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%179:\l179:                                              \l  %180 = phi i32 [ 0, %120 ], [ %221, %179 ]\l  %181 = phi i32 [ 0, %120 ], [ %222, %179 ]\l  %182 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %180\l  %183 = load float, float addrspace(3)* %182, align 4, !tbaa !5\l  %184 = fsub contract float %183, %116\l  %185 = tail call float @llvm.exp.f32(float %184)\l  store float %185, float addrspace(3)* %182, align 4, !tbaa !5\l  %186 = or i32 %180, 1\l  %187 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %186\l  %188 = load float, float addrspace(3)* %187, align 4, !tbaa !5\l  %189 = fsub contract float %188, %116\l  %190 = tail call float @llvm.exp.f32(float %189)\l  store float %190, float addrspace(3)* %187, align 4, !tbaa !5\l  %191 = or i32 %180, 2\l  %192 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %191\l  %193 = load float, float addrspace(3)* %192, align 4, !tbaa !5\l  %194 = fsub contract float %193, %116\l  %195 = tail call float @llvm.exp.f32(float %194)\l  store float %195, float addrspace(3)* %192, align 4, !tbaa !5\l  %196 = or i32 %180, 3\l  %197 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %196\l  %198 = load float, float addrspace(3)* %197, align 4, !tbaa !5\l  %199 = fsub contract float %198, %116\l  %200 = tail call float @llvm.exp.f32(float %199)\l  store float %200, float addrspace(3)* %197, align 4, !tbaa !5\l  %201 = or i32 %180, 4\l  %202 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %201\l  %203 = load float, float addrspace(3)* %202, align 4, !tbaa !5\l  %204 = fsub contract float %203, %116\l  %205 = tail call float @llvm.exp.f32(float %204)\l  store float %205, float addrspace(3)* %202, align 4, !tbaa !5\l  %206 = or i32 %180, 5\l  %207 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %206\l  %208 = load float, float addrspace(3)* %207, align 4, !tbaa !5\l  %209 = fsub contract float %208, %116\l  %210 = tail call float @llvm.exp.f32(float %209)\l  store float %210, float addrspace(3)* %207, align 4, !tbaa !5\l  %211 = or i32 %180, 6\l  %212 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %211\l  %213 = load float, float addrspace(3)* %212, align 4, !tbaa !5\l  %214 = fsub contract float %213, %116\l  %215 = tail call float @llvm.exp.f32(float %214)\l  store float %215, float addrspace(3)* %212, align 4, !tbaa !5\l  %216 = or i32 %180, 7\l  %217 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %216\l  %218 = load float, float addrspace(3)* %217, align 4, !tbaa !5\l  %219 = fsub contract float %218, %116\l  %220 = tail call float @llvm.exp.f32(float %219)\l  store float %220, float addrspace(3)* %217, align 4, !tbaa !5\l  %221 = add nuw nsw i32 %180, 8\l  %222 = add i32 %181, 8\l  %223 = icmp eq i32 %222, %121\l  br i1 %223, label %160, label %179, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5a17c80:s0 -> Node0x5a17a60;
	Node0x5a17c80:s1 -> Node0x5a17c80;
	Node0x5a1aa90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%224:\l224:                                              \l  %225 = phi float [ undef, %174 ], [ %280, %246 ]\l  %226 = phi i32 [ 0, %174 ], [ %281, %246 ]\l  %227 = phi float [ 0.000000e+00, %174 ], [ %280, %246 ]\l  %228 = icmp eq i32 %175, 0\l  br i1 %228, label %239, label %229\l|{<s0>T|<s1>F}}"];
	Node0x5a1aa90:s0 -> Node0x5a17800;
	Node0x5a1aa90:s1 -> Node0x5a1dd60;
	Node0x5a1dd60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%229:\l229:                                              \l  %230 = phi i32 [ %236, %229 ], [ %226, %224 ]\l  %231 = phi float [ %235, %229 ], [ %227, %224 ]\l  %232 = phi i32 [ %237, %229 ], [ 0, %224 ]\l  %233 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %230\l  %234 = load float, float addrspace(3)* %233, align 4, !tbaa !5\l  %235 = fadd contract float %231, %234\l  %236 = add nuw nsw i32 %230, 1\l  %237 = add i32 %232, 1\l  %238 = icmp eq i32 %237, %175\l  br i1 %238, label %239, label %229, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5a1dd60:s0 -> Node0x5a17800;
	Node0x5a1dd60:s1 -> Node0x5a1dd60;
	Node0x5a17800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%239:\l239:                                              \l  %240 = phi float [ 0.000000e+00, %173 ], [ 0.000000e+00, %115 ], [ %225,\l... %224 ], [ %235, %229 ]\l  br i1 %12, label %241, label %337\l|{<s0>T|<s1>F}}"];
	Node0x5a17800:s0 -> Node0x5a1e700;
	Node0x5a17800:s1 -> Node0x5a0fda0;
	Node0x5a1e700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%241:\l241:                                              \l  %242 = and i32 %2, 3\l  %243 = icmp ult i32 %2, 4\l  br i1 %243, label %321, label %244\l|{<s0>T|<s1>F}}"];
	Node0x5a1e700:s0 -> Node0x5a1e920;
	Node0x5a1e700:s1 -> Node0x5a1e970;
	Node0x5a1e970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%244:\l244:                                              \l  %245 = and i32 %2, -4\l  br label %284\l}"];
	Node0x5a1e970 -> Node0x5a1eb40;
	Node0x5a1acb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%246:\l246:                                              \l  %247 = phi i32 [ 0, %177 ], [ %281, %246 ]\l  %248 = phi float [ 0.000000e+00, %177 ], [ %280, %246 ]\l  %249 = phi i32 [ 0, %177 ], [ %282, %246 ]\l  %250 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %247\l  %251 = load float, float addrspace(3)* %250, align 4, !tbaa !5\l  %252 = fadd contract float %248, %251\l  %253 = or i32 %247, 1\l  %254 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %253\l  %255 = load float, float addrspace(3)* %254, align 4, !tbaa !5\l  %256 = fadd contract float %252, %255\l  %257 = or i32 %247, 2\l  %258 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %257\l  %259 = load float, float addrspace(3)* %258, align 4, !tbaa !5\l  %260 = fadd contract float %256, %259\l  %261 = or i32 %247, 3\l  %262 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %261\l  %263 = load float, float addrspace(3)* %262, align 4, !tbaa !5\l  %264 = fadd contract float %260, %263\l  %265 = or i32 %247, 4\l  %266 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %265\l  %267 = load float, float addrspace(3)* %266, align 4, !tbaa !5\l  %268 = fadd contract float %264, %267\l  %269 = or i32 %247, 5\l  %270 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %269\l  %271 = load float, float addrspace(3)* %270, align 4, !tbaa !5\l  %272 = fadd contract float %268, %271\l  %273 = or i32 %247, 6\l  %274 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %273\l  %275 = load float, float addrspace(3)* %274, align 4, !tbaa !5\l  %276 = fadd contract float %272, %275\l  %277 = or i32 %247, 7\l  %278 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %277\l  %279 = load float, float addrspace(3)* %278, align 4, !tbaa !5\l  %280 = fadd contract float %276, %279\l  %281 = add nuw nsw i32 %247, 8\l  %282 = add i32 %249, 8\l  %283 = icmp eq i32 %282, %178\l  br i1 %283, label %224, label %246, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5a1acb0:s0 -> Node0x5a1aa90;
	Node0x5a1acb0:s1 -> Node0x5a1acb0;
	Node0x5a1eb40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%284:\l284:                                              \l  %285 = phi i32 [ 0, %244 ], [ %318, %284 ]\l  %286 = phi i32 [ 0, %244 ], [ %319, %284 ]\l  %287 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %285\l  %288 = load float, float addrspace(3)* %287, align 4, !tbaa !5\l  %289 = fdiv contract float %288, %240\l  %290 = mul nsw i32 %285, %3\l  %291 = add nsw i32 %290, %6\l  %292 = sext i32 %291 to i64\l  %293 = getelementptr inbounds float, float addrspace(1)* %0, i64 %292\l  store float %289, float addrspace(1)* %293, align 4, !tbaa !5\l  %294 = or i32 %285, 1\l  %295 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %294\l  %296 = load float, float addrspace(3)* %295, align 4, !tbaa !5\l  %297 = fdiv contract float %296, %240\l  %298 = mul nsw i32 %294, %3\l  %299 = add nsw i32 %298, %6\l  %300 = sext i32 %299 to i64\l  %301 = getelementptr inbounds float, float addrspace(1)* %0, i64 %300\l  store float %297, float addrspace(1)* %301, align 4, !tbaa !5\l  %302 = or i32 %285, 2\l  %303 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %302\l  %304 = load float, float addrspace(3)* %303, align 4, !tbaa !5\l  %305 = fdiv contract float %304, %240\l  %306 = mul nsw i32 %302, %3\l  %307 = add nsw i32 %306, %6\l  %308 = sext i32 %307 to i64\l  %309 = getelementptr inbounds float, float addrspace(1)* %0, i64 %308\l  store float %305, float addrspace(1)* %309, align 4, !tbaa !5\l  %310 = or i32 %285, 3\l  %311 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %310\l  %312 = load float, float addrspace(3)* %311, align 4, !tbaa !5\l  %313 = fdiv contract float %312, %240\l  %314 = mul nsw i32 %310, %3\l  %315 = add nsw i32 %314, %6\l  %316 = sext i32 %315 to i64\l  %317 = getelementptr inbounds float, float addrspace(1)* %0, i64 %316\l  store float %313, float addrspace(1)* %317, align 4, !tbaa !5\l  %318 = add nuw nsw i32 %285, 4\l  %319 = add nuw i32 %286, 4\l  %320 = icmp eq i32 %319, %245\l  br i1 %320, label %321, label %284, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5a1eb40:s0 -> Node0x5a1e920;
	Node0x5a1eb40:s1 -> Node0x5a1eb40;
	Node0x5a1e920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%321:\l321:                                              \l  %322 = phi i32 [ 0, %241 ], [ %318, %284 ]\l  %323 = icmp eq i32 %242, 0\l  br i1 %323, label %337, label %324\l|{<s0>T|<s1>F}}"];
	Node0x5a1e920:s0 -> Node0x5a0fda0;
	Node0x5a1e920:s1 -> Node0x5a22a90;
	Node0x5a22a90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%324:\l324:                                              \l  %325 = phi i32 [ %334, %324 ], [ %322, %321 ]\l  %326 = phi i32 [ %335, %324 ], [ 0, %321 ]\l  %327 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @_share, i32 0, i32 %325\l  %328 = load float, float addrspace(3)* %327, align 4, !tbaa !5\l  %329 = fdiv contract float %328, %240\l  %330 = mul nsw i32 %325, %3\l  %331 = add nsw i32 %330, %6\l  %332 = sext i32 %331 to i64\l  %333 = getelementptr inbounds float, float addrspace(1)* %0, i64 %332\l  store float %329, float addrspace(1)* %333, align 4, !tbaa !5\l  %334 = add nuw nsw i32 %325, 1\l  %335 = add i32 %326, 1\l  %336 = icmp eq i32 %335, %242\l  br i1 %336, label %337, label %324, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5a22a90:s0 -> Node0x5a0fda0;
	Node0x5a22a90:s1 -> Node0x5a22a90;
	Node0x5a0fda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%337:\l337:                                              \l  ret void\l}"];
}
