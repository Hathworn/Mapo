digraph "CFG for '_Z16fm_order2_kernelPKfPfiii' function" {
	label="CFG for '_Z16fm_order2_kernelPKfPfiii' function";

	Node0x48f83f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = icmp slt i32 %6, %4\l  %9 = icmp slt i32 %7, %2\l  %10 = select i1 %8, i1 %9, i1 false\l  br i1 %10, label %11, label %140\l|{<s0>T|<s1>F}}"];
	Node0x48f83f0:s0 -> Node0x48f7650;
	Node0x48f83f0:s1 -> Node0x48f9be0;
	Node0x48f7650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%11:\l11:                                               \l  %12 = mul i32 %7, %3\l  %13 = icmp sgt i32 %3, 0\l  br i1 %13, label %14, label %43\l|{<s0>T|<s1>F}}"];
	Node0x48f7650:s0 -> Node0x48f9e70;
	Node0x48f7650:s1 -> Node0x48f9ec0;
	Node0x48f9e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = and i32 %3, 7\l  %16 = icmp ult i32 %3, 8\l  br i1 %16, label %19, label %17\l|{<s0>T|<s1>F}}"];
	Node0x48f9e70:s0 -> Node0x48f93c0;
	Node0x48f9e70:s1 -> Node0x48fa290;
	Node0x48fa290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%17:\l17:                                               \l  %18 = and i32 %3, -8\l  br label %53\l}"];
	Node0x48fa290 -> Node0x48fa450;
	Node0x48f93c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%19:\l19:                                               \l  %20 = phi float [ undef, %14 ], [ %134, %53 ]\l  %21 = phi float [ undef, %14 ], [ %136, %53 ]\l  %22 = phi float [ 0.000000e+00, %14 ], [ %134, %53 ]\l  %23 = phi i32 [ 0, %14 ], [ %137, %53 ]\l  %24 = phi float [ 0.000000e+00, %14 ], [ %136, %53 ]\l  %25 = icmp eq i32 %15, 0\l  br i1 %25, label %43, label %26\l|{<s0>T|<s1>F}}"];
	Node0x48f93c0:s0 -> Node0x48f9ec0;
	Node0x48f93c0:s1 -> Node0x48fb890;
	Node0x48fb890 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi float [ %37, %26 ], [ %22, %19 ]\l  %28 = phi i32 [ %40, %26 ], [ %23, %19 ]\l  %29 = phi float [ %39, %26 ], [ %24, %19 ]\l  %30 = phi i32 [ %41, %26 ], [ 0, %19 ]\l  %31 = add i32 %28, %12\l  %32 = mul i32 %31, %4\l  %33 = add i32 %32, %6\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %37 = fadd contract float %27, %36\l  %38 = fmul contract float %36, %36\l  %39 = fadd contract float %29, %38\l  %40 = add nuw nsw i32 %28, 1\l  %41 = add i32 %30, 1\l  %42 = icmp eq i32 %41, %15\l  br i1 %42, label %43, label %26, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x48fb890:s0 -> Node0x48f9ec0;
	Node0x48fb890:s1 -> Node0x48fb890;
	Node0x48f9ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%43:\l43:                                               \l  %44 = phi float [ 0.000000e+00, %11 ], [ %21, %19 ], [ %39, %26 ]\l  %45 = phi float [ 0.000000e+00, %11 ], [ %20, %19 ], [ %37, %26 ]\l  %46 = fmul contract float %45, %45\l  %47 = fsub contract float %46, %44\l  %48 = fmul contract float %47, 5.000000e-01\l  %49 = mul nsw i32 %7, %4\l  %50 = add nsw i32 %49, %6\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  store float %48, float addrspace(1)* %52, align 4, !tbaa !5\l  br label %140\l}"];
	Node0x48f9ec0 -> Node0x48f9be0;
	Node0x48fa450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%53:\l53:                                               \l  %54 = phi float [ 0.000000e+00, %17 ], [ %134, %53 ]\l  %55 = phi i32 [ 0, %17 ], [ %137, %53 ]\l  %56 = phi float [ 0.000000e+00, %17 ], [ %136, %53 ]\l  %57 = phi i32 [ 0, %17 ], [ %138, %53 ]\l  %58 = add i32 %55, %12\l  %59 = mul i32 %58, %4\l  %60 = add i32 %59, %6\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %64 = fadd contract float %54, %63\l  %65 = fmul contract float %63, %63\l  %66 = fadd contract float %56, %65\l  %67 = or i32 %55, 1\l  %68 = add i32 %67, %12\l  %69 = mul i32 %68, %4\l  %70 = add i32 %69, %6\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %74 = fadd contract float %64, %73\l  %75 = fmul contract float %73, %73\l  %76 = fadd contract float %66, %75\l  %77 = or i32 %55, 2\l  %78 = add i32 %77, %12\l  %79 = mul i32 %78, %4\l  %80 = add i32 %79, %6\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %84 = fadd contract float %74, %83\l  %85 = fmul contract float %83, %83\l  %86 = fadd contract float %76, %85\l  %87 = or i32 %55, 3\l  %88 = add i32 %87, %12\l  %89 = mul i32 %88, %4\l  %90 = add i32 %89, %6\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %94 = fadd contract float %84, %93\l  %95 = fmul contract float %93, %93\l  %96 = fadd contract float %86, %95\l  %97 = or i32 %55, 4\l  %98 = add i32 %97, %12\l  %99 = mul i32 %98, %4\l  %100 = add i32 %99, %6\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %104 = fadd contract float %94, %103\l  %105 = fmul contract float %103, %103\l  %106 = fadd contract float %96, %105\l  %107 = or i32 %55, 5\l  %108 = add i32 %107, %12\l  %109 = mul i32 %108, %4\l  %110 = add i32 %109, %6\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %114 = fadd contract float %104, %113\l  %115 = fmul contract float %113, %113\l  %116 = fadd contract float %106, %115\l  %117 = or i32 %55, 6\l  %118 = add i32 %117, %12\l  %119 = mul i32 %118, %4\l  %120 = add i32 %119, %6\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %124 = fadd contract float %114, %123\l  %125 = fmul contract float %123, %123\l  %126 = fadd contract float %116, %125\l  %127 = or i32 %55, 7\l  %128 = add i32 %127, %12\l  %129 = mul i32 %128, %4\l  %130 = add i32 %129, %6\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %134 = fadd contract float %124, %133\l  %135 = fmul contract float %133, %133\l  %136 = fadd contract float %126, %135\l  %137 = add nuw nsw i32 %55, 8\l  %138 = add i32 %57, 8\l  %139 = icmp eq i32 %138, %18\l  br i1 %139, label %19, label %53, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x48fa450:s0 -> Node0x48f93c0;
	Node0x48fa450:s1 -> Node0x48fa450;
	Node0x48f9be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%140:\l140:                                              \l  ret void\l}"];
}
