digraph "CFG for '_Z22fm_order2_dgrad_kernelPKfS0_Pfiii' function" {
	label="CFG for '_Z22fm_order2_dgrad_kernelPKfS0_Pfiii' function";

	Node0x56b1400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = icmp slt i32 %7, %5\l  %10 = icmp slt i32 %8, %3\l  %11 = select i1 %9, i1 %10, i1 false\l  br i1 %11, label %12, label %207\l|{<s0>T|<s1>F}}"];
	Node0x56b1400:s0 -> Node0x56b0690;
	Node0x56b1400:s1 -> Node0x56b2c30;
	Node0x56b0690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%12:\l12:                                               \l  %13 = mul i32 %8, %5\l  %14 = mul i32 %13, %4\l  %15 = add nsw i32 %14, %7\l  %16 = icmp sgt i32 %4, 0\l  br i1 %16, label %17, label %40\l|{<s0>T|<s1>F}}"];
	Node0x56b0690:s0 -> Node0x56b2380;
	Node0x56b0690:s1 -> Node0x56b30f0;
	Node0x56b2380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = and i32 %4, 7\l  %19 = icmp ult i32 %4, 8\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x56b2380:s0 -> Node0x56b3370;
	Node0x56b2380:s1 -> Node0x56b33c0;
	Node0x56b33c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%20:\l20:                                               \l  %21 = and i32 %4, -8\l  br label %51\l}"];
	Node0x56b33c0 -> Node0x56b35c0;
	Node0x56b3370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = phi float [ undef, %17 ], [ %109, %51 ]\l  %24 = phi float [ 0.000000e+00, %17 ], [ %109, %51 ]\l  %25 = phi i32 [ 0, %17 ], [ %110, %51 ]\l  %26 = icmp eq i32 %18, 0\l  br i1 %26, label %40, label %27\l|{<s0>T|<s1>F}}"];
	Node0x56b3370:s0 -> Node0x56b30f0;
	Node0x56b3370:s1 -> Node0x56b4830;
	Node0x56b4830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi float [ %36, %27 ], [ %24, %22 ]\l  %29 = phi i32 [ %37, %27 ], [ %25, %22 ]\l  %30 = phi i32 [ %38, %27 ], [ 0, %22 ]\l  %31 = mul nsw i32 %29, %5\l  %32 = add nsw i32 %31, %15\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %36 = fadd contract float %28, %35\l  %37 = add nuw nsw i32 %29, 1\l  %38 = add i32 %30, 1\l  %39 = icmp eq i32 %38, %18\l  br i1 %39, label %40, label %27, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x56b4830:s0 -> Node0x56b30f0;
	Node0x56b4830:s1 -> Node0x56b4830;
	Node0x56b30f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %12 ], [ %23, %22 ], [ %36, %27 ]\l  %42 = add nsw i32 %13, %7\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  br i1 %16, label %46, label %207\l|{<s0>T|<s1>F}}"];
	Node0x56b30f0:s0 -> Node0x56b6600;
	Node0x56b30f0:s1 -> Node0x56b2c30;
	Node0x56b6600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%46:\l46:                                               \l  %47 = and i32 %4, 7\l  %48 = icmp ult i32 %4, 8\l  br i1 %48, label %190, label %49\l|{<s0>T|<s1>F}}"];
	Node0x56b6600:s0 -> Node0x56b6860;
	Node0x56b6600:s1 -> Node0x56b68b0;
	Node0x56b68b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%49:\l49:                                               \l  %50 = and i32 %4, -8\l  br label %113\l}"];
	Node0x56b68b0 -> Node0x56b6a80;
	Node0x56b35c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %20 ], [ %109, %51 ]\l  %53 = phi i32 [ 0, %20 ], [ %110, %51 ]\l  %54 = phi i32 [ 0, %20 ], [ %111, %51 ]\l  %55 = mul nsw i32 %53, %5\l  %56 = add nsw i32 %55, %15\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %0, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %60 = fadd contract float %52, %59\l  %61 = or i32 %53, 1\l  %62 = mul nsw i32 %61, %5\l  %63 = add nsw i32 %62, %15\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %67 = fadd contract float %60, %66\l  %68 = or i32 %53, 2\l  %69 = mul nsw i32 %68, %5\l  %70 = add nsw i32 %69, %15\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %74 = fadd contract float %67, %73\l  %75 = or i32 %53, 3\l  %76 = mul nsw i32 %75, %5\l  %77 = add nsw i32 %76, %15\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %81 = fadd contract float %74, %80\l  %82 = or i32 %53, 4\l  %83 = mul nsw i32 %82, %5\l  %84 = add nsw i32 %83, %15\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %88 = fadd contract float %81, %87\l  %89 = or i32 %53, 5\l  %90 = mul nsw i32 %89, %5\l  %91 = add nsw i32 %90, %15\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %95 = fadd contract float %88, %94\l  %96 = or i32 %53, 6\l  %97 = mul nsw i32 %96, %5\l  %98 = add nsw i32 %97, %15\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %102 = fadd contract float %95, %101\l  %103 = or i32 %53, 7\l  %104 = mul nsw i32 %103, %5\l  %105 = add nsw i32 %104, %15\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %109 = fadd contract float %102, %108\l  %110 = add nuw nsw i32 %53, 8\l  %111 = add i32 %54, 8\l  %112 = icmp eq i32 %111, %21\l  br i1 %112, label %22, label %51, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x56b35c0:s0 -> Node0x56b3370;
	Node0x56b35c0:s1 -> Node0x56b35c0;
	Node0x56b6a80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%113:\l113:                                              \l  %114 = phi i32 [ 0, %49 ], [ %187, %113 ]\l  %115 = phi i32 [ 0, %49 ], [ %188, %113 ]\l  %116 = mul nsw i32 %114, %5\l  %117 = add nsw i32 %116, %15\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !5\l  %121 = fsub contract float %41, %120\l  %122 = fmul contract float %45, %121\l  %123 = getelementptr inbounds float, float addrspace(1)* %2, i64 %118\l  store float %122, float addrspace(1)* %123, align 4, !tbaa !5\l  %124 = or i32 %114, 1\l  %125 = mul nsw i32 %124, %5\l  %126 = add nsw i32 %125, %15\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !5\l  %130 = fsub contract float %41, %129\l  %131 = fmul contract float %45, %130\l  %132 = getelementptr inbounds float, float addrspace(1)* %2, i64 %127\l  store float %131, float addrspace(1)* %132, align 4, !tbaa !5\l  %133 = or i32 %114, 2\l  %134 = mul nsw i32 %133, %5\l  %135 = add nsw i32 %134, %15\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !5\l  %139 = fsub contract float %41, %138\l  %140 = fmul contract float %45, %139\l  %141 = getelementptr inbounds float, float addrspace(1)* %2, i64 %136\l  store float %140, float addrspace(1)* %141, align 4, !tbaa !5\l  %142 = or i32 %114, 3\l  %143 = mul nsw i32 %142, %5\l  %144 = add nsw i32 %143, %15\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !5\l  %148 = fsub contract float %41, %147\l  %149 = fmul contract float %45, %148\l  %150 = getelementptr inbounds float, float addrspace(1)* %2, i64 %145\l  store float %149, float addrspace(1)* %150, align 4, !tbaa !5\l  %151 = or i32 %114, 4\l  %152 = mul nsw i32 %151, %5\l  %153 = add nsw i32 %152, %15\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !5\l  %157 = fsub contract float %41, %156\l  %158 = fmul contract float %45, %157\l  %159 = getelementptr inbounds float, float addrspace(1)* %2, i64 %154\l  store float %158, float addrspace(1)* %159, align 4, !tbaa !5\l  %160 = or i32 %114, 5\l  %161 = mul nsw i32 %160, %5\l  %162 = add nsw i32 %161, %15\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %0, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !5\l  %166 = fsub contract float %41, %165\l  %167 = fmul contract float %45, %166\l  %168 = getelementptr inbounds float, float addrspace(1)* %2, i64 %163\l  store float %167, float addrspace(1)* %168, align 4, !tbaa !5\l  %169 = or i32 %114, 6\l  %170 = mul nsw i32 %169, %5\l  %171 = add nsw i32 %170, %15\l  %172 = sext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %0, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !5\l  %175 = fsub contract float %41, %174\l  %176 = fmul contract float %45, %175\l  %177 = getelementptr inbounds float, float addrspace(1)* %2, i64 %172\l  store float %176, float addrspace(1)* %177, align 4, !tbaa !5\l  %178 = or i32 %114, 7\l  %179 = mul nsw i32 %178, %5\l  %180 = add nsw i32 %179, %15\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %0, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !5\l  %184 = fsub contract float %41, %183\l  %185 = fmul contract float %45, %184\l  %186 = getelementptr inbounds float, float addrspace(1)* %2, i64 %181\l  store float %185, float addrspace(1)* %186, align 4, !tbaa !5\l  %187 = add nuw nsw i32 %114, 8\l  %188 = add i32 %115, 8\l  %189 = icmp eq i32 %188, %50\l  br i1 %189, label %190, label %113, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x56b6a80:s0 -> Node0x56b6860;
	Node0x56b6a80:s1 -> Node0x56b6a80;
	Node0x56b6860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%190:\l190:                                              \l  %191 = phi i32 [ 0, %46 ], [ %187, %113 ]\l  %192 = icmp eq i32 %47, 0\l  br i1 %192, label %207, label %193\l|{<s0>T|<s1>F}}"];
	Node0x56b6860:s0 -> Node0x56b2c30;
	Node0x56b6860:s1 -> Node0x56bc7c0;
	Node0x56bc7c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%193:\l193:                                              \l  %194 = phi i32 [ %204, %193 ], [ %191, %190 ]\l  %195 = phi i32 [ %205, %193 ], [ 0, %190 ]\l  %196 = mul nsw i32 %194, %5\l  %197 = add nsw i32 %196, %15\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %0, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !5\l  %201 = fsub contract float %41, %200\l  %202 = fmul contract float %45, %201\l  %203 = getelementptr inbounds float, float addrspace(1)* %2, i64 %198\l  store float %202, float addrspace(1)* %203, align 4, !tbaa !5\l  %204 = add nuw nsw i32 %194, 1\l  %205 = add i32 %195, 1\l  %206 = icmp eq i32 %205, %47\l  br i1 %206, label %207, label %193, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56bc7c0:s0 -> Node0x56b2c30;
	Node0x56bc7c0:s1 -> Node0x56bc7c0;
	Node0x56b2c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%207:\l207:                                              \l  ret void\l}"];
}
