digraph "CFG for '_Z13matchHistCudaPfS_mmmS_' function" {
	label="CFG for '_Z13matchHistCudaPfS_mmmS_' function";

	Node0x5fbb270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = zext i32 %15 to i64\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = zext i32 %24 to i64\l  %26 = icmp ult i64 %16, %2\l  %27 = icmp ult i64 %25, %3\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %104\l|{<s0>T|<s1>F}}"];
	Node0x5fbb270:s0 -> Node0x5fbedc0;
	Node0x5fbb270:s1 -> Node0x5fbee50;
	Node0x5fbedc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%29:\l29:                                               \l  %30 = mul i64 %16, %4\l  %31 = mul i64 %25, %4\l  %32 = icmp eq i64 %4, 0\l  br i1 %32, label %33, label %84\l|{<s0>T|<s1>F}}"];
	Node0x5fbedc0:s0 -> Node0x5fbd120;
	Node0x5fbedc0:s1 -> Node0x5fbd170;
	Node0x5fbd120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %29 ], [ %98, %84 ]\l  %35 = phi float [ 0.000000e+00, %29 ], [ %100, %84 ]\l  %36 = phi float [ 0.000000e+00, %29 ], [ %96, %84 ]\l  %37 = fcmp olt float %34, 0x39F0000000000000\l  %38 = select i1 %37, float 0x41F0000000000000, float 1.000000e+00\l  %39 = fmul float %34, %38\l  %40 = tail call float @llvm.sqrt.f32(float %39)\l  %41 = bitcast float %40 to i32\l  %42 = add nsw i32 %41, -1\l  %43 = bitcast i32 %42 to float\l  %44 = add nsw i32 %41, 1\l  %45 = bitcast i32 %44 to float\l  %46 = tail call i1 @llvm.amdgcn.class.f32(float %39, i32 608)\l  %47 = select i1 %37, float 0x3EF0000000000000, float 1.000000e+00\l  %48 = fneg float %45\l  %49 = tail call float @llvm.fma.f32(float %48, float %40, float %39)\l  %50 = fcmp ogt float %49, 0.000000e+00\l  %51 = fneg float %43\l  %52 = tail call float @llvm.fma.f32(float %51, float %40, float %39)\l  %53 = fcmp ole float %52, 0.000000e+00\l  %54 = select i1 %53, float %43, float %40\l  %55 = select i1 %50, float %45, float %54\l  %56 = fmul float %47, %55\l  %57 = select i1 %46, float %39, float %56\l  %58 = fcmp olt float %35, 0x39F0000000000000\l  %59 = select i1 %58, float 0x41F0000000000000, float 1.000000e+00\l  %60 = fmul float %35, %59\l  %61 = tail call float @llvm.sqrt.f32(float %60)\l  %62 = bitcast float %61 to i32\l  %63 = add nsw i32 %62, -1\l  %64 = bitcast i32 %63 to float\l  %65 = add nsw i32 %62, 1\l  %66 = bitcast i32 %65 to float\l  %67 = tail call i1 @llvm.amdgcn.class.f32(float %60, i32 608)\l  %68 = select i1 %58, float 0x3EF0000000000000, float 1.000000e+00\l  %69 = fneg float %66\l  %70 = tail call float @llvm.fma.f32(float %69, float %61, float %60)\l  %71 = fcmp ogt float %70, 0.000000e+00\l  %72 = fneg float %64\l  %73 = tail call float @llvm.fma.f32(float %72, float %61, float %60)\l  %74 = fcmp ole float %73, 0.000000e+00\l  %75 = select i1 %74, float %64, float %61\l  %76 = select i1 %71, float %66, float %75\l  %77 = fmul float %68, %76\l  %78 = select i1 %67, float %60, float %77\l  %79 = fdiv contract float %57, %78\l  %80 = fdiv contract float %36, %79\l  %81 = mul i64 %25, %2\l  %82 = add i64 %81, %16\l  %83 = getelementptr inbounds float, float addrspace(1)* %5, i64 %82\l  store float %80, float addrspace(1)* %83, align 4, !tbaa !7\l  br label %104\l}"];
	Node0x5fbd120 -> Node0x5fbee50;
	Node0x5fbd170 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%84:\l84:                                               \l  %85 = phi i64 [ %102, %84 ], [ 0, %29 ]\l  %86 = phi float [ %96, %84 ], [ 0.000000e+00, %29 ]\l  %87 = phi float [ %100, %84 ], [ 0.000000e+00, %29 ]\l  %88 = phi float [ %98, %84 ], [ 0.000000e+00, %29 ]\l  %89 = add i64 %85, %30\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = add i64 %85, %31\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %95 = fmul contract float %91, %94\l  %96 = fadd contract float %86, %95\l  %97 = fmul contract float %91, %91\l  %98 = fadd contract float %88, %97\l  %99 = fmul contract float %94, %94\l  %100 = fadd contract float %87, %99\l  %101 = add nuw nsw i64 %85, 1\l  %102 = and i64 %101, 4294967295\l  %103 = icmp ult i64 %102, %4\l  br i1 %103, label %84, label %33, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5fbd170:s0 -> Node0x5fbd170;
	Node0x5fbd170:s1 -> Node0x5fbd120;
	Node0x5fbee50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%104:\l104:                                              \l  ret void\l}"];
}
