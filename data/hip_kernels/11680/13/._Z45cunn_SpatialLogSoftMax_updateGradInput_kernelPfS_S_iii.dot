digraph "CFG for '_Z45cunn_SpatialLogSoftMax_updateGradInput_kernelPfS_S_iii' function" {
	label="CFG for '_Z45cunn_SpatialLogSoftMax_updateGradInput_kernelPfS_S_iii' function";

	Node0x5f0e500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = mul nsw i32 %5, %4\l  %10 = mul i32 %9, %7\l  %11 = icmp sgt i32 %3, 0\l  %12 = mul i32 %7, %3\l  %13 = mul i32 %12, %4\l  %14 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = and i32 %3, 7\l  %18 = icmp ult i32 %3, 8\l  %19 = and i32 %3, -8\l  %20 = icmp eq i32 %17, 0\l  %21 = and i32 %3, 3\l  %22 = icmp ult i32 %3, 4\l  %23 = and i32 %3, -4\l  %24 = icmp eq i32 %21, 0\l  br label %25\l}"];
	Node0x5f0e500 -> Node0x5f10720;
	Node0x5f10720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%25:\l25:                                               \l  %26 = phi i32 [ %8, %6 ], [ %204, %203 ]\l  %27 = icmp slt i32 %26, %9\l  br i1 %27, label %28, label %205\l|{<s0>T|<s1>F}}"];
	Node0x5f10720:s0 -> Node0x5f10a20;
	Node0x5f10720:s1 -> Node0x5f10ab0;
	Node0x5f10a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%28:\l28:                                               \l  %29 = freeze i32 %26\l  %30 = freeze i32 %5\l  %31 = sdiv i32 %29, %30\l  %32 = mul i32 %31, %30\l  %33 = sub i32 %29, %32\l  %34 = icmp slt i32 %31, %4\l  br i1 %34, label %35, label %203\l|{<s0>T|<s1>F}}"];
	Node0x5f10a20:s0 -> Node0x5f10190;
	Node0x5f10a20:s1 -> Node0x5f10850;
	Node0x5f10190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%35:\l35:                                               \l  %36 = mul i32 %31, %5\l  %37 = add i32 %36, %10\l  %38 = add i32 %37, %33\l  %39 = mul i32 %38, %3\l  br i1 %11, label %40, label %57\l|{<s0>T|<s1>F}}"];
	Node0x5f10190:s0 -> Node0x5f11380;
	Node0x5f10190:s1 -> Node0x5f113d0;
	Node0x5f11380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%40:\l40:                                               \l  br i1 %18, label %41, label %63\l|{<s0>T|<s1>F}}"];
	Node0x5f11380:s0 -> Node0x5f11510;
	Node0x5f11380:s1 -> Node0x5f11560;
	Node0x5f11510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%41:\l41:                                               \l  %42 = phi float [ undef, %40 ], [ %113, %63 ]\l  %43 = phi i32 [ 0, %40 ], [ %114, %63 ]\l  %44 = phi float [ 0.000000e+00, %40 ], [ %113, %63 ]\l  br i1 %20, label %57, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5f11510:s0 -> Node0x5f113d0;
	Node0x5f11510:s1 -> Node0x5f12780;
	Node0x5f12780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi i32 [ %54, %45 ], [ %43, %41 ]\l  %47 = phi float [ %53, %45 ], [ %44, %41 ]\l  %48 = phi i32 [ %55, %45 ], [ 0, %41 ]\l  %49 = add nsw i32 %46, %39\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !5\l  %53 = fadd contract float %47, %52\l  %54 = add nuw nsw i32 %46, 1\l  %55 = add i32 %48, 1\l  %56 = icmp eq i32 %55, %17\l  br i1 %56, label %57, label %45, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x5f12780:s0 -> Node0x5f113d0;
	Node0x5f12780:s1 -> Node0x5f12780;
	Node0x5f113d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %35 ], [ %42, %41 ], [ %53, %45 ]\l  br i1 %11, label %59, label %138\l|{<s0>T|<s1>F}}"];
	Node0x5f113d0:s0 -> Node0x5f133d0;
	Node0x5f113d0:s1 -> Node0x5f13420;
	Node0x5f133d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%59:\l59:                                               \l  %60 = add i32 %31, %13\l  %61 = mul i32 %60, %5\l  %62 = add i32 %61, %33\l  br i1 %22, label %117, label %142\l|{<s0>T|<s1>F}}"];
	Node0x5f133d0:s0 -> Node0x5f13710;
	Node0x5f133d0:s1 -> Node0x5f13760;
	Node0x5f11560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%63:\l63:                                               \l  %64 = phi i32 [ %114, %63 ], [ 0, %40 ]\l  %65 = phi float [ %113, %63 ], [ 0.000000e+00, %40 ]\l  %66 = phi i32 [ %115, %63 ], [ 0, %40 ]\l  %67 = add nsw i32 %64, %39\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %2, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !5\l  %71 = fadd contract float %65, %70\l  %72 = or i32 %64, 1\l  %73 = add nsw i32 %72, %39\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %2, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !5\l  %77 = fadd contract float %71, %76\l  %78 = or i32 %64, 2\l  %79 = add nsw i32 %78, %39\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !5\l  %83 = fadd contract float %77, %82\l  %84 = or i32 %64, 3\l  %85 = add nsw i32 %84, %39\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %2, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !5\l  %89 = fadd contract float %83, %88\l  %90 = or i32 %64, 4\l  %91 = add nsw i32 %90, %39\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %2, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !5\l  %95 = fadd contract float %89, %94\l  %96 = or i32 %64, 5\l  %97 = add nsw i32 %96, %39\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %2, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !5\l  %101 = fadd contract float %95, %100\l  %102 = or i32 %64, 6\l  %103 = add nsw i32 %102, %39\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %2, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !5\l  %107 = fadd contract float %101, %106\l  %108 = or i32 %64, 7\l  %109 = add nsw i32 %108, %39\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !5\l  %113 = fadd contract float %107, %112\l  %114 = add nuw nsw i32 %64, 8\l  %115 = add i32 %66, 8\l  %116 = icmp eq i32 %115, %19\l  br i1 %116, label %41, label %63, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5f11560:s0 -> Node0x5f11510;
	Node0x5f11560:s1 -> Node0x5f11560;
	Node0x5f13710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%117:\l117:                                              \l  %118 = phi i32 [ 0, %59 ], [ %200, %142 ]\l  br i1 %24, label %138, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5f13710:s0 -> Node0x5f13420;
	Node0x5f13710:s1 -> Node0x5f15fc0;
	Node0x5f15fc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%119:\l119:                                              \l  %120 = phi i32 [ %135, %119 ], [ %118, %117 ]\l  %121 = phi i32 [ %136, %119 ], [ 0, %117 ]\l  %122 = mul nsw i32 %120, %9\l  %123 = add i32 %62, %122\l  %124 = add nsw i32 %120, %39\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %2, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !5\l  %128 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !5\l  %130 = tail call float @llvm.exp.f32(float %129)\l  %131 = fmul contract float %58, %130\l  %132 = fsub contract float %127, %131\l  %133 = sext i32 %123 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %0, i64 %133\l  store float %132, float addrspace(1)* %134, align 4, !tbaa !5\l  %135 = add nuw nsw i32 %120, 1\l  %136 = add i32 %121, 1\l  %137 = icmp eq i32 %136, %21\l  br i1 %137, label %138, label %119, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5f15fc0:s0 -> Node0x5f13420;
	Node0x5f15fc0:s1 -> Node0x5f15fc0;
	Node0x5f13420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%138:\l138:                                              \l  %139 = load i16, i16 addrspace(4)* %16, align 4, !range !14, !invariant.load\l... !15\l  %140 = zext i16 %139 to i32\l  %141 = add i32 %26, %140\l  br label %203\l}"];
	Node0x5f13420 -> Node0x5f10850;
	Node0x5f13760 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%142:\l142:                                              \l  %143 = phi i32 [ %200, %142 ], [ 0, %59 ]\l  %144 = phi i32 [ %201, %142 ], [ 0, %59 ]\l  %145 = mul nsw i32 %143, %9\l  %146 = add i32 %62, %145\l  %147 = add nsw i32 %143, %39\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %2, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !5\l  %151 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !5\l  %153 = tail call float @llvm.exp.f32(float %152)\l  %154 = fmul contract float %58, %153\l  %155 = fsub contract float %150, %154\l  %156 = sext i32 %146 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  store float %155, float addrspace(1)* %157, align 4, !tbaa !5\l  %158 = or i32 %143, 1\l  %159 = mul nsw i32 %158, %9\l  %160 = add i32 %62, %159\l  %161 = add nsw i32 %158, %39\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %2, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !5\l  %165 = getelementptr inbounds float, float addrspace(1)* %1, i64 %162\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !5\l  %167 = tail call float @llvm.exp.f32(float %166)\l  %168 = fmul contract float %58, %167\l  %169 = fsub contract float %164, %168\l  %170 = sext i32 %160 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %0, i64 %170\l  store float %169, float addrspace(1)* %171, align 4, !tbaa !5\l  %172 = or i32 %143, 2\l  %173 = mul nsw i32 %172, %9\l  %174 = add i32 %62, %173\l  %175 = add nsw i32 %172, %39\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %2, i64 %176\l  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !5\l  %179 = getelementptr inbounds float, float addrspace(1)* %1, i64 %176\l  %180 = load float, float addrspace(1)* %179, align 4, !tbaa !5\l  %181 = tail call float @llvm.exp.f32(float %180)\l  %182 = fmul contract float %58, %181\l  %183 = fsub contract float %178, %182\l  %184 = sext i32 %174 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %0, i64 %184\l  store float %183, float addrspace(1)* %185, align 4, !tbaa !5\l  %186 = or i32 %143, 3\l  %187 = mul nsw i32 %186, %9\l  %188 = add i32 %62, %187\l  %189 = add nsw i32 %186, %39\l  %190 = sext i32 %189 to i64\l  %191 = getelementptr inbounds float, float addrspace(1)* %2, i64 %190\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !5\l  %193 = getelementptr inbounds float, float addrspace(1)* %1, i64 %190\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !5\l  %195 = tail call float @llvm.exp.f32(float %194)\l  %196 = fmul contract float %58, %195\l  %197 = fsub contract float %192, %196\l  %198 = sext i32 %188 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %0, i64 %198\l  store float %197, float addrspace(1)* %199, align 4, !tbaa !5\l  %200 = add nuw nsw i32 %143, 4\l  %201 = add i32 %144, 4\l  %202 = icmp eq i32 %201, %23\l  br i1 %202, label %117, label %142, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5f13760:s0 -> Node0x5f13710;
	Node0x5f13760:s1 -> Node0x5f13760;
	Node0x5f10850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%203:\l203:                                              \l  %204 = phi i32 [ %141, %138 ], [ %26, %28 ]\l  br i1 %34, label %25, label %205\l|{<s0>T|<s1>F}}"];
	Node0x5f10850:s0 -> Node0x5f10720;
	Node0x5f10850:s1 -> Node0x5f10ab0;
	Node0x5f10ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%205:\l205:                                              \l  ret void\l}"];
}
