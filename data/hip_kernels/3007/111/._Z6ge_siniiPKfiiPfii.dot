digraph "CFG for '_Z6ge_siniiPKfiiPfii' function" {
	label="CFG for '_Z6ge_siniiPKfiiPfii' function";

	Node0x50c61c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp slt i32 %17, %0\l  %27 = icmp slt i32 %25, %1\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %183\l|{<s0>T|<s1>F}}"];
	Node0x50c61c0:s0 -> Node0x50c9c00;
	Node0x50c61c0:s1 -> Node0x50c9c90;
	Node0x50c9c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%29:\l29:                                               \l  %30 = add nsw i32 %17, %3\l  %31 = mul nsw i32 %25, %4\l  %32 = add nsw i32 %30, %31\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %2, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %36 = tail call float @llvm.fabs.f32(float %35)\l  %37 = fcmp olt float %36, 1.310720e+05\l  br i1 %37, label %38, label %46\l|{<s0>T|<s1>F}}"];
	Node0x50c9c00:s0 -> Node0x50cb050;
	Node0x50c9c00:s1 -> Node0x50cb0e0;
	Node0x50cb050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%38:\l38:                                               \l  %39 = fmul float %36, 0x3FE45F3060000000\l  %40 = tail call float @llvm.rint.f32(float %39)\l  %41 = tail call float @llvm.fma.f32(float %40, float 0xBFF921FB40000000,\l... float %36)\l  %42 = tail call float @llvm.fma.f32(float %40, float 0xBE74442D00000000,\l... float %41)\l  %43 = tail call float @llvm.fma.f32(float %40, float 0xBCF8469880000000,\l... float %42)\l  %44 = fptosi float %40 to i32\l  %45 = bitcast float %36 to i32\l  br label %152\l}"];
	Node0x50cb050 -> Node0x50cbb90;
	Node0x50cb0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%46:\l46:                                               \l  %47 = bitcast float %36 to i32\l  %48 = lshr i32 %47, 23\l  %49 = and i32 %47, 8388607\l  %50 = or i32 %49, 8388608\l  %51 = zext i32 %50 to i64\l  %52 = mul nuw nsw i64 %51, 4266746795\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = mul nuw nsw i64 %51, 1011060801\l  %56 = add nuw nsw i64 %54, %55\l  %57 = trunc i64 %56 to i32\l  %58 = lshr i64 %56, 32\l  %59 = mul nuw nsw i64 %51, 3680671129\l  %60 = add nuw nsw i64 %58, %59\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %51, 4113882560\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %51, 4230436817\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %51, 1313084713\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = mul nuw nsw i64 %51, 2734261102\l  %76 = add nuw nsw i64 %74, %75\l  %77 = trunc i64 %76 to i32\l  %78 = lshr i64 %76, 32\l  %79 = trunc i64 %78 to i32\l  %80 = add nsw i32 %48, -120\l  %81 = icmp ugt i32 %80, 63\l  %82 = select i1 %81, i32 %73, i32 %79\l  %83 = select i1 %81, i32 %69, i32 %77\l  %84 = select i1 %81, i32 %65, i32 %73\l  %85 = select i1 %81, i32 %61, i32 %69\l  %86 = select i1 %81, i32 %57, i32 %65\l  %87 = select i1 %81, i32 %53, i32 %61\l  %88 = select i1 %81, i32 -64, i32 0\l  %89 = add nsw i32 %88, %80\l  %90 = icmp ugt i32 %89, 31\l  %91 = select i1 %90, i32 %83, i32 %82\l  %92 = select i1 %90, i32 %84, i32 %83\l  %93 = select i1 %90, i32 %85, i32 %84\l  %94 = select i1 %90, i32 %86, i32 %85\l  %95 = select i1 %90, i32 %87, i32 %86\l  %96 = select i1 %90, i32 -32, i32 0\l  %97 = add nsw i32 %96, %89\l  %98 = icmp ugt i32 %97, 31\l  %99 = select i1 %98, i32 %92, i32 %91\l  %100 = select i1 %98, i32 %93, i32 %92\l  %101 = select i1 %98, i32 %94, i32 %93\l  %102 = select i1 %98, i32 %95, i32 %94\l  %103 = select i1 %98, i32 -32, i32 0\l  %104 = add nsw i32 %103, %97\l  %105 = icmp eq i32 %104, 0\l  %106 = sub nsw i32 32, %104\l  %107 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %106)\l  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %106)\l  %109 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %106)\l  %110 = select i1 %105, i32 %99, i32 %107\l  %111 = select i1 %105, i32 %100, i32 %108\l  %112 = select i1 %105, i32 %101, i32 %109\l  %113 = lshr i32 %110, 29\l  %114 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %111, i32 2)\l  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 2)\l  %116 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %102, i32 2)\l  %117 = and i32 %113, 1\l  %118 = sub nsw i32 0, %117\l  %119 = shl i32 %113, 31\l  %120 = xor i32 %114, %118\l  %121 = xor i32 %115, %118\l  %122 = xor i32 %116, %118\l  %123 = tail call i32 @llvm.ctlz.i32(i32 %120, i1 false), !range !11\l  %124 = sub nsw i32 31, %123\l  %125 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %124)\l  %126 = tail call i32 @llvm.fshr.i32(i32 %121, i32 %122, i32 %124)\l  %127 = shl nuw nsw i32 %123, 23\l  %128 = sub nuw nsw i32 1056964608, %127\l  %129 = lshr i32 %125, 9\l  %130 = or i32 %129, %128\l  %131 = or i32 %130, %119\l  %132 = bitcast i32 %131 to float\l  %133 = tail call i32 @llvm.fshl.i32(i32 %125, i32 %126, i32 23)\l  %134 = tail call i32 @llvm.ctlz.i32(i32 %133, i1 false), !range !11\l  %135 = fmul float %132, 0x3FF921FB40000000\l  %136 = add nuw nsw i32 %134, %123\l  %137 = shl nuw nsw i32 %136, 23\l  %138 = sub nuw nsw i32 855638016, %137\l  %139 = sub nsw i32 31, %134\l  %140 = tail call i32 @llvm.fshr.i32(i32 %133, i32 %126, i32 %139)\l  %141 = lshr i32 %140, 9\l  %142 = or i32 %138, %141\l  %143 = or i32 %142, %119\l  %144 = bitcast i32 %143 to float\l  %145 = fneg float %135\l  %146 = tail call float @llvm.fma.f32(float %132, float 0x3FF921FB40000000,\l... float %145)\l  %147 = tail call float @llvm.fma.f32(float %132, float 0x3E74442D00000000,\l... float %146)\l  %148 = tail call float @llvm.fma.f32(float %144, float 0x3FF921FB40000000,\l... float %147)\l  %149 = fadd float %135, %148\l  %150 = lshr i32 %110, 30\l  %151 = add nuw nsw i32 %117, %150\l  br label %152\l}"];
	Node0x50cb0e0 -> Node0x50cbb90;
	Node0x50cbb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%152:\l152:                                              \l  %153 = phi i32 [ %45, %38 ], [ %47, %46 ]\l  %154 = phi float [ %43, %38 ], [ %149, %46 ]\l  %155 = phi i32 [ %44, %38 ], [ %151, %46 ]\l  %156 = fmul float %154, %154\l  %157 = tail call float @llvm.fmuladd.f32(float %156, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %158 = tail call float @llvm.fmuladd.f32(float %156, float %157, float\l... 0xBFC55553A0000000)\l  %159 = fmul float %156, %158\l  %160 = tail call float @llvm.fmuladd.f32(float %154, float %159, float %154)\l  %161 = tail call float @llvm.fmuladd.f32(float %156, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %162 = tail call float @llvm.fmuladd.f32(float %156, float %161, float\l... 0x3FA5557EE0000000)\l  %163 = tail call float @llvm.fmuladd.f32(float %156, float %162, float\l... 0xBFE0000080000000)\l  %164 = tail call float @llvm.fmuladd.f32(float %156, float %163, float\l... 1.000000e+00)\l  %165 = and i32 %155, 1\l  %166 = icmp eq i32 %165, 0\l  %167 = select i1 %166, float %160, float %164\l  %168 = bitcast float %167 to i32\l  %169 = shl i32 %155, 30\l  %170 = and i32 %169, -2147483648\l  %171 = bitcast float %35 to i32\l  %172 = xor i32 %153, %171\l  %173 = xor i32 %172, %170\l  %174 = xor i32 %173, %168\l  %175 = bitcast i32 %174 to float\l  %176 = tail call i1 @llvm.amdgcn.class.f32(float %36, i32 504)\l  %177 = select i1 %176, float %175, float 0x7FF8000000000000\l  %178 = add nsw i32 %17, %6\l  %179 = mul nsw i32 %25, %7\l  %180 = add nsw i32 %178, %179\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %5, i64 %181\l  store float %177, float addrspace(1)* %182, align 4, !tbaa !7\l  br label %183\l}"];
	Node0x50cbb90 -> Node0x50c9c90;
	Node0x50c9c90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%183:\l183:                                              \l  ret void\l}"];
}
