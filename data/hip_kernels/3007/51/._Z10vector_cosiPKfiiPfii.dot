digraph "CFG for '_Z10vector_cosiPKfiiPfii' function" {
	label="CFG for '_Z10vector_cosiPKfiiPfii' function";

	Node0x5981de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp slt i32 %16, %0\l  br i1 %17, label %18, label %166\l|{<s0>T|<s1>F}}"];
	Node0x5981de0:s0 -> Node0x5983d10;
	Node0x5981de0:s1 -> Node0x5983da0;
	Node0x5983d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%18:\l18:                                               \l  %19 = mul nsw i32 %16, %3\l  %20 = add nsw i32 %19, %2\l  %21 = sext i32 %20 to i64\l  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %21\l  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %24 = tail call float @llvm.fabs.f32(float %23)\l  %25 = fcmp olt float %24, 1.310720e+05\l  br i1 %25, label %26, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5983d10:s0 -> Node0x59855b0;
	Node0x5983d10:s1 -> Node0x5985640;
	Node0x59855b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%26:\l26:                                               \l  %27 = fmul float %24, 0x3FE45F3060000000\l  %28 = tail call float @llvm.rint.f32(float %27)\l  %29 = tail call float @llvm.fma.f32(float %28, float 0xBFF921FB40000000,\l... float %24)\l  %30 = tail call float @llvm.fma.f32(float %28, float 0xBE74442D00000000,\l... float %29)\l  %31 = tail call float @llvm.fma.f32(float %28, float 0xBCF8469880000000,\l... float %30)\l  %32 = fptosi float %28 to i32\l  br label %139\l}"];
	Node0x59855b0 -> Node0x5983c00;
	Node0x5985640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%33:\l33:                                               \l  %34 = bitcast float %24 to i32\l  %35 = lshr i32 %34, 23\l  %36 = and i32 %34, 8388607\l  %37 = or i32 %36, 8388608\l  %38 = zext i32 %37 to i64\l  %39 = mul nuw nsw i64 %38, 4266746795\l  %40 = trunc i64 %39 to i32\l  %41 = lshr i64 %39, 32\l  %42 = mul nuw nsw i64 %38, 1011060801\l  %43 = add nuw nsw i64 %41, %42\l  %44 = trunc i64 %43 to i32\l  %45 = lshr i64 %43, 32\l  %46 = mul nuw nsw i64 %38, 3680671129\l  %47 = add nuw nsw i64 %45, %46\l  %48 = trunc i64 %47 to i32\l  %49 = lshr i64 %47, 32\l  %50 = mul nuw nsw i64 %38, 4113882560\l  %51 = add nuw nsw i64 %49, %50\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %38, 4230436817\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = mul nuw nsw i64 %38, 1313084713\l  %59 = add nuw nsw i64 %57, %58\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = mul nuw nsw i64 %38, 2734261102\l  %63 = add nuw nsw i64 %61, %62\l  %64 = trunc i64 %63 to i32\l  %65 = lshr i64 %63, 32\l  %66 = trunc i64 %65 to i32\l  %67 = add nsw i32 %35, -120\l  %68 = icmp ugt i32 %67, 63\l  %69 = select i1 %68, i32 %60, i32 %66\l  %70 = select i1 %68, i32 %56, i32 %64\l  %71 = select i1 %68, i32 %52, i32 %60\l  %72 = select i1 %68, i32 %48, i32 %56\l  %73 = select i1 %68, i32 %44, i32 %52\l  %74 = select i1 %68, i32 %40, i32 %48\l  %75 = select i1 %68, i32 -64, i32 0\l  %76 = add nsw i32 %75, %67\l  %77 = icmp ugt i32 %76, 31\l  %78 = select i1 %77, i32 %70, i32 %69\l  %79 = select i1 %77, i32 %71, i32 %70\l  %80 = select i1 %77, i32 %72, i32 %71\l  %81 = select i1 %77, i32 %73, i32 %72\l  %82 = select i1 %77, i32 %74, i32 %73\l  %83 = select i1 %77, i32 -32, i32 0\l  %84 = add nsw i32 %83, %76\l  %85 = icmp ugt i32 %84, 31\l  %86 = select i1 %85, i32 %79, i32 %78\l  %87 = select i1 %85, i32 %80, i32 %79\l  %88 = select i1 %85, i32 %81, i32 %80\l  %89 = select i1 %85, i32 %82, i32 %81\l  %90 = select i1 %85, i32 -32, i32 0\l  %91 = add nsw i32 %90, %84\l  %92 = icmp eq i32 %91, 0\l  %93 = sub nsw i32 32, %91\l  %94 = tail call i32 @llvm.fshr.i32(i32 %86, i32 %87, i32 %93)\l  %95 = tail call i32 @llvm.fshr.i32(i32 %87, i32 %88, i32 %93)\l  %96 = tail call i32 @llvm.fshr.i32(i32 %88, i32 %89, i32 %93)\l  %97 = select i1 %92, i32 %86, i32 %94\l  %98 = select i1 %92, i32 %87, i32 %95\l  %99 = select i1 %92, i32 %88, i32 %96\l  %100 = lshr i32 %97, 29\l  %101 = tail call i32 @llvm.fshl.i32(i32 %97, i32 %98, i32 2)\l  %102 = tail call i32 @llvm.fshl.i32(i32 %98, i32 %99, i32 2)\l  %103 = tail call i32 @llvm.fshl.i32(i32 %99, i32 %89, i32 2)\l  %104 = and i32 %100, 1\l  %105 = sub nsw i32 0, %104\l  %106 = shl i32 %100, 31\l  %107 = xor i32 %101, %105\l  %108 = xor i32 %102, %105\l  %109 = xor i32 %103, %105\l  %110 = tail call i32 @llvm.ctlz.i32(i32 %107, i1 false), !range !11\l  %111 = sub nsw i32 31, %110\l  %112 = tail call i32 @llvm.fshr.i32(i32 %107, i32 %108, i32 %111)\l  %113 = tail call i32 @llvm.fshr.i32(i32 %108, i32 %109, i32 %111)\l  %114 = shl nuw nsw i32 %110, 23\l  %115 = sub nuw nsw i32 1056964608, %114\l  %116 = lshr i32 %112, 9\l  %117 = or i32 %116, %115\l  %118 = or i32 %117, %106\l  %119 = bitcast i32 %118 to float\l  %120 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %113, i32 23)\l  %121 = tail call i32 @llvm.ctlz.i32(i32 %120, i1 false), !range !11\l  %122 = fmul float %119, 0x3FF921FB40000000\l  %123 = add nuw nsw i32 %121, %110\l  %124 = shl nuw nsw i32 %123, 23\l  %125 = sub nuw nsw i32 855638016, %124\l  %126 = sub nsw i32 31, %121\l  %127 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %113, i32 %126)\l  %128 = lshr i32 %127, 9\l  %129 = or i32 %125, %128\l  %130 = or i32 %129, %106\l  %131 = bitcast i32 %130 to float\l  %132 = fneg float %122\l  %133 = tail call float @llvm.fma.f32(float %119, float 0x3FF921FB40000000,\l... float %132)\l  %134 = tail call float @llvm.fma.f32(float %119, float 0x3E74442D00000000,\l... float %133)\l  %135 = tail call float @llvm.fma.f32(float %131, float 0x3FF921FB40000000,\l... float %134)\l  %136 = fadd float %122, %135\l  %137 = lshr i32 %97, 30\l  %138 = add nuw nsw i32 %104, %137\l  br label %139\l}"];
	Node0x5985640 -> Node0x5983c00;
	Node0x5983c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%139:\l139:                                              \l  %140 = phi float [ %31, %26 ], [ %136, %33 ]\l  %141 = phi i32 [ %32, %26 ], [ %138, %33 ]\l  %142 = fmul float %140, %140\l  %143 = tail call float @llvm.fmuladd.f32(float %142, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %144 = tail call float @llvm.fmuladd.f32(float %142, float %143, float\l... 0xBFC55553A0000000)\l  %145 = fmul float %142, %144\l  %146 = tail call float @llvm.fmuladd.f32(float %140, float %145, float %140)\l  %147 = tail call float @llvm.fmuladd.f32(float %142, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %148 = tail call float @llvm.fmuladd.f32(float %142, float %147, float\l... 0x3FA5557EE0000000)\l  %149 = tail call float @llvm.fmuladd.f32(float %142, float %148, float\l... 0xBFE0000080000000)\l  %150 = tail call float @llvm.fmuladd.f32(float %142, float %149, float\l... 1.000000e+00)\l  %151 = fneg float %146\l  %152 = and i32 %141, 1\l  %153 = icmp eq i32 %152, 0\l  %154 = select i1 %153, float %150, float %151\l  %155 = bitcast float %154 to i32\l  %156 = shl i32 %141, 30\l  %157 = and i32 %156, -2147483648\l  %158 = xor i32 %157, %155\l  %159 = bitcast i32 %158 to float\l  %160 = tail call i1 @llvm.amdgcn.class.f32(float %24, i32 504)\l  %161 = select i1 %160, float %159, float 0x7FF8000000000000\l  %162 = mul nsw i32 %16, %6\l  %163 = add nsw i32 %162, %5\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %4, i64 %164\l  store float %161, float addrspace(1)* %165, align 4, !tbaa !7\l  br label %166\l}"];
	Node0x5983c00 -> Node0x5983da0;
	Node0x5983da0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%166:\l166:                                              \l  ret void\l}"];
}
