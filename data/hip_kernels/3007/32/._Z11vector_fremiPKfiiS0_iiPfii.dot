digraph "CFG for '_Z11vector_fremiPKfiiS0_iiPfii' function" {
	label="CFG for '_Z11vector_fremiPKfiiS0_iiPfii' function";

	Node0x64b9c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %120\l|{<s0>T|<s1>F}}"];
	Node0x64b9c30:s0 -> Node0x64bc700;
	Node0x64b9c30:s1 -> Node0x64bc790;
	Node0x64bc700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%21:\l21:                                               \l  %22 = mul nsw i32 %19, %3\l  %23 = add nsw i32 %22, %2\l  %24 = sext i32 %23 to i64\l  %25 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %27 = mul nsw i32 %19, %6\l  %28 = add nsw i32 %27, %5\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %4, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %32 = tail call float @llvm.fabs.f32(float %26)\l  %33 = tail call float @llvm.fabs.f32(float %31)\l  %34 = fcmp ogt float %32, %33\l  br i1 %34, label %35, label %88\l|{<s0>T|<s1>F}}"];
	Node0x64bc700:s0 -> Node0x64be0a0;
	Node0x64bc700:s1 -> Node0x64be130;
	Node0x64be0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%35:\l35:                                               \l  %36 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %32)\l  %37 = tail call float @llvm.amdgcn.frexp.mant.f32(float %32)\l  %38 = tail call float @llvm.amdgcn.ldexp.f32(float %37, i32 12)\l  %39 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %33)\l  %40 = add nsw i32 %39, -1\l  %41 = tail call float @llvm.amdgcn.frexp.mant.f32(float %33)\l  %42 = tail call float @llvm.amdgcn.ldexp.f32(float %41, i32 1)\l  %43 = sub i32 %36, %39\l  %44 = tail call float @llvm.amdgcn.rcp.f32(float %42)\l  %45 = icmp sgt i32 %43, 12\l  br i1 %45, label %46, label %59\l|{<s0>T|<s1>F}}"];
	Node0x64be0a0:s0 -> Node0x64bf010;
	Node0x64be0a0:s1 -> Node0x64bf0a0;
	Node0x64bf010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi float [ %56, %46 ], [ %38, %35 ]\l  %48 = phi i32 [ %57, %46 ], [ %43, %35 ]\l  %49 = fmul float %44, %47\l  %50 = tail call float @llvm.rint.f32(float %49)\l  %51 = fneg float %50\l  %52 = tail call float @llvm.fma.f32(float %51, float %42, float %47)\l  %53 = fcmp olt float %52, 0.000000e+00\l  %54 = select i1 %53, float %42, float -0.000000e+00\l  %55 = fadd float %52, %54\l  %56 = tail call float @llvm.amdgcn.ldexp.f32(float %55, i32 12)\l  %57 = add nsw i32 %48, -12\l  %58 = icmp ugt i32 %48, 24\l  br i1 %58, label %46, label %59\l|{<s0>T|<s1>F}}"];
	Node0x64bf010:s0 -> Node0x64bf010;
	Node0x64bf010:s1 -> Node0x64bf0a0;
	Node0x64bf0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%59:\l59:                                               \l  %60 = phi i32 [ %43, %35 ], [ %57, %46 ]\l  %61 = phi float [ %38, %35 ], [ %56, %46 ]\l  %62 = add nsw i32 %60, -11\l  %63 = tail call float @llvm.amdgcn.ldexp.f32(float %61, i32 %62)\l  %64 = fmul float %44, %63\l  %65 = tail call float @llvm.rint.f32(float %64)\l  %66 = fneg float %65\l  %67 = tail call float @llvm.fma.f32(float %66, float %42, float %63)\l  %68 = fcmp olt float %67, 0.000000e+00\l  %69 = select i1 %68, float %42, float -0.000000e+00\l  %70 = fadd float %67, %69\l  %71 = fptosi float %65 to i32\l  %72 = fmul float %70, 2.000000e+00\l  %73 = fcmp ogt float %72, %42\l  %74 = and i32 %71, 1\l  %75 = icmp ne i32 %74, 0\l  %76 = xor i1 %68, %75\l  %77 = fcmp oeq float %72, %42\l  %78 = and i1 %76, %77\l  %79 = or i1 %73, %78\l  %80 = select i1 %79, float %42, float 0.000000e+00\l  %81 = fsub float %70, %80\l  %82 = tail call float @llvm.amdgcn.ldexp.f32(float %81, i32 %40)\l  %83 = bitcast float %26 to i32\l  %84 = and i32 %83, -2147483648\l  %85 = bitcast float %82 to i32\l  %86 = xor i32 %84, %85\l  %87 = bitcast i32 %86 to float\l  br label %108\l}"];
	Node0x64bf0a0 -> Node0x64c1d50;
	Node0x64be130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%88:\l88:                                               \l  %89 = fcmp olt float %33, 0x47E0000000000000\l  %90 = fmul float %32, 2.000000e+00\l  %91 = fcmp ogt float %90, %33\l  %92 = and i1 %89, %91\l  %93 = fmul float %33, 5.000000e-01\l  %94 = fcmp ogt float %32, %93\l  %95 = or i1 %94, %92\l  %96 = bitcast float %26 to i32\l  %97 = bitcast float %31 to i32\l  %98 = xor i32 %97, %96\l  %99 = ashr i32 %98, 30\l  %100 = or i32 %99, 1\l  %101 = sitofp i32 %100 to float\l  %102 = fneg float %101\l  %103 = tail call float @llvm.fmuladd.f32(float %31, float %102, float %26)\l  %104 = select i1 %95, float %103, float %26\l  %105 = fcmp oeq float %32, %33\l  %106 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %26)\l  %107 = select i1 %105, float %106, float %104\l  br label %108\l}"];
	Node0x64be130 -> Node0x64c1d50;
	Node0x64c1d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%108:\l108:                                              \l  %109 = phi float [ %87, %59 ], [ %107, %88 ]\l  %110 = fcmp oeq float %31, 0.000000e+00\l  %111 = select i1 %110, float 0x7FF8000000000000, float %109\l  %112 = fcmp ord float %31, 0.000000e+00\l  %113 = tail call i1 @llvm.amdgcn.class.f32(float %26, i32 504)\l  %114 = select i1 %112, i1 %113, i1 false\l  %115 = select i1 %114, float %111, float 0x7FF8000000000000\l  %116 = mul nsw i32 %19, %9\l  %117 = add nsw i32 %116, %8\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %7, i64 %118\l  store float %115, float addrspace(1)* %119, align 4, !tbaa !7\l  br label %120\l}"];
	Node0x64c1d50 -> Node0x64bc790;
	Node0x64bc790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%120:\l120:                                              \l  ret void\l}"];
}
