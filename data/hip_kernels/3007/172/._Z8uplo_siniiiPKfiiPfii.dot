digraph "CFG for '_Z8uplo_siniiiPKfiiPfii' function" {
	label="CFG for '_Z8uplo_siniiiPKfiiPfii' function";

	Node0x5e687c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %26 = add i32 %24, %25\l  %27 = icmp slt i32 %18, %0\l  %28 = icmp slt i32 %26, %0\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %191\l|{<s0>T|<s1>F}}"];
	Node0x5e687c0:s0 -> Node0x5e6cd60;
	Node0x5e687c0:s1 -> Node0x5e6cdf0;
	Node0x5e6cd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%30:\l30:                                               \l  %31 = icmp eq i32 %1, 132\l  %32 = mul nsw i32 %18, %2\l  %33 = mul nsw i32 %26, %2\l  %34 = icmp sgt i32 %32, %33\l  %35 = icmp sge i32 %32, %33\l  %36 = select i1 %31, i1 %34, i1 %35\l  br i1 %36, label %37, label %191\l|{<s0>T|<s1>F}}"];
	Node0x5e6cd60:s0 -> Node0x5e6ade0;
	Node0x5e6cd60:s1 -> Node0x5e6cdf0;
	Node0x5e6ade0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%37:\l37:                                               \l  %38 = add nsw i32 %18, %4\l  %39 = mul nsw i32 %26, %5\l  %40 = add nsw i32 %38, %39\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = tail call float @llvm.fabs.f32(float %43)\l  %45 = fcmp olt float %44, 1.310720e+05\l  br i1 %45, label %46, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5e6ade0:s0 -> Node0x5e6e660;
	Node0x5e6ade0:s1 -> Node0x5e6e6f0;
	Node0x5e6e660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%46:\l46:                                               \l  %47 = fmul float %44, 0x3FE45F3060000000\l  %48 = tail call float @llvm.rint.f32(float %47)\l  %49 = tail call float @llvm.fma.f32(float %48, float 0xBFF921FB40000000,\l... float %44)\l  %50 = tail call float @llvm.fma.f32(float %48, float 0xBE74442D00000000,\l... float %49)\l  %51 = tail call float @llvm.fma.f32(float %48, float 0xBCF8469880000000,\l... float %50)\l  %52 = fptosi float %48 to i32\l  %53 = bitcast float %44 to i32\l  br label %160\l}"];
	Node0x5e6e660 -> Node0x5e6f1c0;
	Node0x5e6e6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%54:\l54:                                               \l  %55 = bitcast float %44 to i32\l  %56 = lshr i32 %55, 23\l  %57 = and i32 %55, 8388607\l  %58 = or i32 %57, 8388608\l  %59 = zext i32 %58 to i64\l  %60 = mul nuw nsw i64 %59, 4266746795\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %59, 1011060801\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = mul nuw nsw i64 %59, 3680671129\l  %68 = add nuw nsw i64 %66, %67\l  %69 = trunc i64 %68 to i32\l  %70 = lshr i64 %68, 32\l  %71 = mul nuw nsw i64 %59, 4113882560\l  %72 = add nuw nsw i64 %70, %71\l  %73 = trunc i64 %72 to i32\l  %74 = lshr i64 %72, 32\l  %75 = mul nuw nsw i64 %59, 4230436817\l  %76 = add nuw nsw i64 %74, %75\l  %77 = trunc i64 %76 to i32\l  %78 = lshr i64 %76, 32\l  %79 = mul nuw nsw i64 %59, 1313084713\l  %80 = add nuw nsw i64 %78, %79\l  %81 = trunc i64 %80 to i32\l  %82 = lshr i64 %80, 32\l  %83 = mul nuw nsw i64 %59, 2734261102\l  %84 = add nuw nsw i64 %82, %83\l  %85 = trunc i64 %84 to i32\l  %86 = lshr i64 %84, 32\l  %87 = trunc i64 %86 to i32\l  %88 = add nsw i32 %56, -120\l  %89 = icmp ugt i32 %88, 63\l  %90 = select i1 %89, i32 %81, i32 %87\l  %91 = select i1 %89, i32 %77, i32 %85\l  %92 = select i1 %89, i32 %73, i32 %81\l  %93 = select i1 %89, i32 %69, i32 %77\l  %94 = select i1 %89, i32 %65, i32 %73\l  %95 = select i1 %89, i32 %61, i32 %69\l  %96 = select i1 %89, i32 -64, i32 0\l  %97 = add nsw i32 %96, %88\l  %98 = icmp ugt i32 %97, 31\l  %99 = select i1 %98, i32 %91, i32 %90\l  %100 = select i1 %98, i32 %92, i32 %91\l  %101 = select i1 %98, i32 %93, i32 %92\l  %102 = select i1 %98, i32 %94, i32 %93\l  %103 = select i1 %98, i32 %95, i32 %94\l  %104 = select i1 %98, i32 -32, i32 0\l  %105 = add nsw i32 %104, %97\l  %106 = icmp ugt i32 %105, 31\l  %107 = select i1 %106, i32 %100, i32 %99\l  %108 = select i1 %106, i32 %101, i32 %100\l  %109 = select i1 %106, i32 %102, i32 %101\l  %110 = select i1 %106, i32 %103, i32 %102\l  %111 = select i1 %106, i32 -32, i32 0\l  %112 = add nsw i32 %111, %105\l  %113 = icmp eq i32 %112, 0\l  %114 = sub nsw i32 32, %112\l  %115 = tail call i32 @llvm.fshr.i32(i32 %107, i32 %108, i32 %114)\l  %116 = tail call i32 @llvm.fshr.i32(i32 %108, i32 %109, i32 %114)\l  %117 = tail call i32 @llvm.fshr.i32(i32 %109, i32 %110, i32 %114)\l  %118 = select i1 %113, i32 %107, i32 %115\l  %119 = select i1 %113, i32 %108, i32 %116\l  %120 = select i1 %113, i32 %109, i32 %117\l  %121 = lshr i32 %118, 29\l  %122 = tail call i32 @llvm.fshl.i32(i32 %118, i32 %119, i32 2)\l  %123 = tail call i32 @llvm.fshl.i32(i32 %119, i32 %120, i32 2)\l  %124 = tail call i32 @llvm.fshl.i32(i32 %120, i32 %110, i32 2)\l  %125 = and i32 %121, 1\l  %126 = sub nsw i32 0, %125\l  %127 = shl i32 %121, 31\l  %128 = xor i32 %122, %126\l  %129 = xor i32 %123, %126\l  %130 = xor i32 %124, %126\l  %131 = tail call i32 @llvm.ctlz.i32(i32 %128, i1 false), !range !11\l  %132 = sub nsw i32 31, %131\l  %133 = tail call i32 @llvm.fshr.i32(i32 %128, i32 %129, i32 %132)\l  %134 = tail call i32 @llvm.fshr.i32(i32 %129, i32 %130, i32 %132)\l  %135 = shl nuw nsw i32 %131, 23\l  %136 = sub nuw nsw i32 1056964608, %135\l  %137 = lshr i32 %133, 9\l  %138 = or i32 %137, %136\l  %139 = or i32 %138, %127\l  %140 = bitcast i32 %139 to float\l  %141 = tail call i32 @llvm.fshl.i32(i32 %133, i32 %134, i32 23)\l  %142 = tail call i32 @llvm.ctlz.i32(i32 %141, i1 false), !range !11\l  %143 = fmul float %140, 0x3FF921FB40000000\l  %144 = add nuw nsw i32 %142, %131\l  %145 = shl nuw nsw i32 %144, 23\l  %146 = sub nuw nsw i32 855638016, %145\l  %147 = sub nsw i32 31, %142\l  %148 = tail call i32 @llvm.fshr.i32(i32 %141, i32 %134, i32 %147)\l  %149 = lshr i32 %148, 9\l  %150 = or i32 %146, %149\l  %151 = or i32 %150, %127\l  %152 = bitcast i32 %151 to float\l  %153 = fneg float %143\l  %154 = tail call float @llvm.fma.f32(float %140, float 0x3FF921FB40000000,\l... float %153)\l  %155 = tail call float @llvm.fma.f32(float %140, float 0x3E74442D00000000,\l... float %154)\l  %156 = tail call float @llvm.fma.f32(float %152, float 0x3FF921FB40000000,\l... float %155)\l  %157 = fadd float %143, %156\l  %158 = lshr i32 %118, 30\l  %159 = add nuw nsw i32 %125, %158\l  br label %160\l}"];
	Node0x5e6e6f0 -> Node0x5e6f1c0;
	Node0x5e6f1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%160:\l160:                                              \l  %161 = phi i32 [ %53, %46 ], [ %55, %54 ]\l  %162 = phi float [ %51, %46 ], [ %157, %54 ]\l  %163 = phi i32 [ %52, %46 ], [ %159, %54 ]\l  %164 = fmul float %162, %162\l  %165 = tail call float @llvm.fmuladd.f32(float %164, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %166 = tail call float @llvm.fmuladd.f32(float %164, float %165, float\l... 0xBFC55553A0000000)\l  %167 = fmul float %164, %166\l  %168 = tail call float @llvm.fmuladd.f32(float %162, float %167, float %162)\l  %169 = tail call float @llvm.fmuladd.f32(float %164, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %170 = tail call float @llvm.fmuladd.f32(float %164, float %169, float\l... 0x3FA5557EE0000000)\l  %171 = tail call float @llvm.fmuladd.f32(float %164, float %170, float\l... 0xBFE0000080000000)\l  %172 = tail call float @llvm.fmuladd.f32(float %164, float %171, float\l... 1.000000e+00)\l  %173 = and i32 %163, 1\l  %174 = icmp eq i32 %173, 0\l  %175 = select i1 %174, float %168, float %172\l  %176 = bitcast float %175 to i32\l  %177 = shl i32 %163, 30\l  %178 = and i32 %177, -2147483648\l  %179 = bitcast float %43 to i32\l  %180 = xor i32 %161, %179\l  %181 = xor i32 %180, %178\l  %182 = xor i32 %181, %176\l  %183 = bitcast i32 %182 to float\l  %184 = tail call i1 @llvm.amdgcn.class.f32(float %44, i32 504)\l  %185 = select i1 %184, float %183, float 0x7FF8000000000000\l  %186 = add nsw i32 %18, %7\l  %187 = mul nsw i32 %26, %8\l  %188 = add nsw i32 %186, %187\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %6, i64 %189\l  store float %185, float addrspace(1)* %190, align 4, !tbaa !7\l  br label %191\l}"];
	Node0x5e6f1c0 -> Node0x5e6cdf0;
	Node0x5e6cdf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%191:\l191:                                              \l  ret void\l}"];
}
