digraph "CFG for '_Z10vector_siniPKfiiPfii' function" {
	label="CFG for '_Z10vector_siniPKfiiPfii' function";

	Node0x59d6e70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = icmp slt i32 %16, %0\l  br i1 %17, label %18, label %170\l|{<s0>T|<s1>F}}"];
	Node0x59d6e70:s0 -> Node0x59d8da0;
	Node0x59d6e70:s1 -> Node0x59d8e30;
	Node0x59d8da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%18:\l18:                                               \l  %19 = mul nsw i32 %16, %3\l  %20 = add nsw i32 %19, %2\l  %21 = sext i32 %20 to i64\l  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %21\l  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %24 = tail call float @llvm.fabs.f32(float %23)\l  %25 = fcmp olt float %24, 1.310720e+05\l  br i1 %25, label %26, label %34\l|{<s0>T|<s1>F}}"];
	Node0x59d8da0:s0 -> Node0x59da640;
	Node0x59d8da0:s1 -> Node0x59da6d0;
	Node0x59da640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%26:\l26:                                               \l  %27 = fmul float %24, 0x3FE45F3060000000\l  %28 = tail call float @llvm.rint.f32(float %27)\l  %29 = tail call float @llvm.fma.f32(float %28, float 0xBFF921FB40000000,\l... float %24)\l  %30 = tail call float @llvm.fma.f32(float %28, float 0xBE74442D00000000,\l... float %29)\l  %31 = tail call float @llvm.fma.f32(float %28, float 0xBCF8469880000000,\l... float %30)\l  %32 = fptosi float %28 to i32\l  %33 = bitcast float %24 to i32\l  br label %140\l}"];
	Node0x59da640 -> Node0x59d8d00;
	Node0x59da6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%34:\l34:                                               \l  %35 = bitcast float %24 to i32\l  %36 = lshr i32 %35, 23\l  %37 = and i32 %35, 8388607\l  %38 = or i32 %37, 8388608\l  %39 = zext i32 %38 to i64\l  %40 = mul nuw nsw i64 %39, 4266746795\l  %41 = trunc i64 %40 to i32\l  %42 = lshr i64 %40, 32\l  %43 = mul nuw nsw i64 %39, 1011060801\l  %44 = add nuw nsw i64 %42, %43\l  %45 = trunc i64 %44 to i32\l  %46 = lshr i64 %44, 32\l  %47 = mul nuw nsw i64 %39, 3680671129\l  %48 = add nuw nsw i64 %46, %47\l  %49 = trunc i64 %48 to i32\l  %50 = lshr i64 %48, 32\l  %51 = mul nuw nsw i64 %39, 4113882560\l  %52 = add nuw nsw i64 %50, %51\l  %53 = trunc i64 %52 to i32\l  %54 = lshr i64 %52, 32\l  %55 = mul nuw nsw i64 %39, 4230436817\l  %56 = add nuw nsw i64 %54, %55\l  %57 = trunc i64 %56 to i32\l  %58 = lshr i64 %56, 32\l  %59 = mul nuw nsw i64 %39, 1313084713\l  %60 = add nuw nsw i64 %58, %59\l  %61 = trunc i64 %60 to i32\l  %62 = lshr i64 %60, 32\l  %63 = mul nuw nsw i64 %39, 2734261102\l  %64 = add nuw nsw i64 %62, %63\l  %65 = trunc i64 %64 to i32\l  %66 = lshr i64 %64, 32\l  %67 = trunc i64 %66 to i32\l  %68 = add nsw i32 %36, -120\l  %69 = icmp ugt i32 %68, 63\l  %70 = select i1 %69, i32 %61, i32 %67\l  %71 = select i1 %69, i32 %57, i32 %65\l  %72 = select i1 %69, i32 %53, i32 %61\l  %73 = select i1 %69, i32 %49, i32 %57\l  %74 = select i1 %69, i32 %45, i32 %53\l  %75 = select i1 %69, i32 %41, i32 %49\l  %76 = select i1 %69, i32 -64, i32 0\l  %77 = add nsw i32 %76, %68\l  %78 = icmp ugt i32 %77, 31\l  %79 = select i1 %78, i32 %71, i32 %70\l  %80 = select i1 %78, i32 %72, i32 %71\l  %81 = select i1 %78, i32 %73, i32 %72\l  %82 = select i1 %78, i32 %74, i32 %73\l  %83 = select i1 %78, i32 %75, i32 %74\l  %84 = select i1 %78, i32 -32, i32 0\l  %85 = add nsw i32 %84, %77\l  %86 = icmp ugt i32 %85, 31\l  %87 = select i1 %86, i32 %80, i32 %79\l  %88 = select i1 %86, i32 %81, i32 %80\l  %89 = select i1 %86, i32 %82, i32 %81\l  %90 = select i1 %86, i32 %83, i32 %82\l  %91 = select i1 %86, i32 -32, i32 0\l  %92 = add nsw i32 %91, %85\l  %93 = icmp eq i32 %92, 0\l  %94 = sub nsw i32 32, %92\l  %95 = tail call i32 @llvm.fshr.i32(i32 %87, i32 %88, i32 %94)\l  %96 = tail call i32 @llvm.fshr.i32(i32 %88, i32 %89, i32 %94)\l  %97 = tail call i32 @llvm.fshr.i32(i32 %89, i32 %90, i32 %94)\l  %98 = select i1 %93, i32 %87, i32 %95\l  %99 = select i1 %93, i32 %88, i32 %96\l  %100 = select i1 %93, i32 %89, i32 %97\l  %101 = lshr i32 %98, 29\l  %102 = tail call i32 @llvm.fshl.i32(i32 %98, i32 %99, i32 2)\l  %103 = tail call i32 @llvm.fshl.i32(i32 %99, i32 %100, i32 2)\l  %104 = tail call i32 @llvm.fshl.i32(i32 %100, i32 %90, i32 2)\l  %105 = and i32 %101, 1\l  %106 = sub nsw i32 0, %105\l  %107 = shl i32 %101, 31\l  %108 = xor i32 %102, %106\l  %109 = xor i32 %103, %106\l  %110 = xor i32 %104, %106\l  %111 = tail call i32 @llvm.ctlz.i32(i32 %108, i1 false), !range !11\l  %112 = sub nsw i32 31, %111\l  %113 = tail call i32 @llvm.fshr.i32(i32 %108, i32 %109, i32 %112)\l  %114 = tail call i32 @llvm.fshr.i32(i32 %109, i32 %110, i32 %112)\l  %115 = shl nuw nsw i32 %111, 23\l  %116 = sub nuw nsw i32 1056964608, %115\l  %117 = lshr i32 %113, 9\l  %118 = or i32 %117, %116\l  %119 = or i32 %118, %107\l  %120 = bitcast i32 %119 to float\l  %121 = tail call i32 @llvm.fshl.i32(i32 %113, i32 %114, i32 23)\l  %122 = tail call i32 @llvm.ctlz.i32(i32 %121, i1 false), !range !11\l  %123 = fmul float %120, 0x3FF921FB40000000\l  %124 = add nuw nsw i32 %122, %111\l  %125 = shl nuw nsw i32 %124, 23\l  %126 = sub nuw nsw i32 855638016, %125\l  %127 = sub nsw i32 31, %122\l  %128 = tail call i32 @llvm.fshr.i32(i32 %121, i32 %114, i32 %127)\l  %129 = lshr i32 %128, 9\l  %130 = or i32 %126, %129\l  %131 = or i32 %130, %107\l  %132 = bitcast i32 %131 to float\l  %133 = fneg float %123\l  %134 = tail call float @llvm.fma.f32(float %120, float 0x3FF921FB40000000,\l... float %133)\l  %135 = tail call float @llvm.fma.f32(float %120, float 0x3E74442D00000000,\l... float %134)\l  %136 = tail call float @llvm.fma.f32(float %132, float 0x3FF921FB40000000,\l... float %135)\l  %137 = fadd float %123, %136\l  %138 = lshr i32 %98, 30\l  %139 = add nuw nsw i32 %105, %138\l  br label %140\l}"];
	Node0x59da6d0 -> Node0x59d8d00;
	Node0x59d8d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%140:\l140:                                              \l  %141 = phi i32 [ %33, %26 ], [ %35, %34 ]\l  %142 = phi float [ %31, %26 ], [ %137, %34 ]\l  %143 = phi i32 [ %32, %26 ], [ %139, %34 ]\l  %144 = fmul float %142, %142\l  %145 = tail call float @llvm.fmuladd.f32(float %144, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %146 = tail call float @llvm.fmuladd.f32(float %144, float %145, float\l... 0xBFC55553A0000000)\l  %147 = fmul float %144, %146\l  %148 = tail call float @llvm.fmuladd.f32(float %142, float %147, float %142)\l  %149 = tail call float @llvm.fmuladd.f32(float %144, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %150 = tail call float @llvm.fmuladd.f32(float %144, float %149, float\l... 0x3FA5557EE0000000)\l  %151 = tail call float @llvm.fmuladd.f32(float %144, float %150, float\l... 0xBFE0000080000000)\l  %152 = tail call float @llvm.fmuladd.f32(float %144, float %151, float\l... 1.000000e+00)\l  %153 = and i32 %143, 1\l  %154 = icmp eq i32 %153, 0\l  %155 = select i1 %154, float %148, float %152\l  %156 = bitcast float %155 to i32\l  %157 = shl i32 %143, 30\l  %158 = and i32 %157, -2147483648\l  %159 = bitcast float %23 to i32\l  %160 = xor i32 %141, %159\l  %161 = xor i32 %160, %158\l  %162 = xor i32 %161, %156\l  %163 = bitcast i32 %162 to float\l  %164 = tail call i1 @llvm.amdgcn.class.f32(float %24, i32 504)\l  %165 = select i1 %164, float %163, float 0x7FF8000000000000\l  %166 = mul nsw i32 %16, %6\l  %167 = add nsw i32 %166, %5\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %4, i64 %168\l  store float %165, float addrspace(1)* %169, align 4, !tbaa !7\l  br label %170\l}"];
	Node0x59d8d00 -> Node0x59d8e30;
	Node0x59d8e30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%170:\l170:                                              \l  ret void\l}"];
}
