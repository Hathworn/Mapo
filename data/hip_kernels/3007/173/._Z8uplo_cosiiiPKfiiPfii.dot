digraph "CFG for '_Z8uplo_cosiiiPKfiiPfii' function" {
	label="CFG for '_Z8uplo_cosiiiPKfiiPfii' function";

	Node0x47ec730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 2, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %26 = add i32 %24, %25\l  %27 = icmp slt i32 %18, %0\l  %28 = icmp slt i32 %26, %0\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %187\l|{<s0>T|<s1>F}}"];
	Node0x47ec730:s0 -> Node0x47f0cd0;
	Node0x47ec730:s1 -> Node0x47f0d60;
	Node0x47f0cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%30:\l30:                                               \l  %31 = icmp eq i32 %1, 132\l  %32 = mul nsw i32 %18, %2\l  %33 = mul nsw i32 %26, %2\l  %34 = icmp sgt i32 %32, %33\l  %35 = icmp sge i32 %32, %33\l  %36 = select i1 %31, i1 %34, i1 %35\l  br i1 %36, label %37, label %187\l|{<s0>T|<s1>F}}"];
	Node0x47f0cd0:s0 -> Node0x47eed50;
	Node0x47f0cd0:s1 -> Node0x47f0d60;
	Node0x47eed50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%37:\l37:                                               \l  %38 = add nsw i32 %18, %4\l  %39 = mul nsw i32 %26, %5\l  %40 = add nsw i32 %38, %39\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = tail call float @llvm.fabs.f32(float %43)\l  %45 = fcmp olt float %44, 1.310720e+05\l  br i1 %45, label %46, label %53\l|{<s0>T|<s1>F}}"];
	Node0x47eed50:s0 -> Node0x47f25d0;
	Node0x47eed50:s1 -> Node0x47f2660;
	Node0x47f25d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%46:\l46:                                               \l  %47 = fmul float %44, 0x3FE45F3060000000\l  %48 = tail call float @llvm.rint.f32(float %47)\l  %49 = tail call float @llvm.fma.f32(float %48, float 0xBFF921FB40000000,\l... float %44)\l  %50 = tail call float @llvm.fma.f32(float %48, float 0xBE74442D00000000,\l... float %49)\l  %51 = tail call float @llvm.fma.f32(float %48, float 0xBCF8469880000000,\l... float %50)\l  %52 = fptosi float %48 to i32\l  br label %159\l}"];
	Node0x47f25d0 -> Node0x47f30c0;
	Node0x47f2660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%53:\l53:                                               \l  %54 = bitcast float %44 to i32\l  %55 = lshr i32 %54, 23\l  %56 = and i32 %54, 8388607\l  %57 = or i32 %56, 8388608\l  %58 = zext i32 %57 to i64\l  %59 = mul nuw nsw i64 %58, 4266746795\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = mul nuw nsw i64 %58, 1011060801\l  %63 = add nuw nsw i64 %61, %62\l  %64 = trunc i64 %63 to i32\l  %65 = lshr i64 %63, 32\l  %66 = mul nuw nsw i64 %58, 3680671129\l  %67 = add nuw nsw i64 %65, %66\l  %68 = trunc i64 %67 to i32\l  %69 = lshr i64 %67, 32\l  %70 = mul nuw nsw i64 %58, 4113882560\l  %71 = add nuw nsw i64 %69, %70\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = mul nuw nsw i64 %58, 4230436817\l  %75 = add nuw nsw i64 %73, %74\l  %76 = trunc i64 %75 to i32\l  %77 = lshr i64 %75, 32\l  %78 = mul nuw nsw i64 %58, 1313084713\l  %79 = add nuw nsw i64 %77, %78\l  %80 = trunc i64 %79 to i32\l  %81 = lshr i64 %79, 32\l  %82 = mul nuw nsw i64 %58, 2734261102\l  %83 = add nuw nsw i64 %81, %82\l  %84 = trunc i64 %83 to i32\l  %85 = lshr i64 %83, 32\l  %86 = trunc i64 %85 to i32\l  %87 = add nsw i32 %55, -120\l  %88 = icmp ugt i32 %87, 63\l  %89 = select i1 %88, i32 %80, i32 %86\l  %90 = select i1 %88, i32 %76, i32 %84\l  %91 = select i1 %88, i32 %72, i32 %80\l  %92 = select i1 %88, i32 %68, i32 %76\l  %93 = select i1 %88, i32 %64, i32 %72\l  %94 = select i1 %88, i32 %60, i32 %68\l  %95 = select i1 %88, i32 -64, i32 0\l  %96 = add nsw i32 %95, %87\l  %97 = icmp ugt i32 %96, 31\l  %98 = select i1 %97, i32 %90, i32 %89\l  %99 = select i1 %97, i32 %91, i32 %90\l  %100 = select i1 %97, i32 %92, i32 %91\l  %101 = select i1 %97, i32 %93, i32 %92\l  %102 = select i1 %97, i32 %94, i32 %93\l  %103 = select i1 %97, i32 -32, i32 0\l  %104 = add nsw i32 %103, %96\l  %105 = icmp ugt i32 %104, 31\l  %106 = select i1 %105, i32 %99, i32 %98\l  %107 = select i1 %105, i32 %100, i32 %99\l  %108 = select i1 %105, i32 %101, i32 %100\l  %109 = select i1 %105, i32 %102, i32 %101\l  %110 = select i1 %105, i32 -32, i32 0\l  %111 = add nsw i32 %110, %104\l  %112 = icmp eq i32 %111, 0\l  %113 = sub nsw i32 32, %111\l  %114 = tail call i32 @llvm.fshr.i32(i32 %106, i32 %107, i32 %113)\l  %115 = tail call i32 @llvm.fshr.i32(i32 %107, i32 %108, i32 %113)\l  %116 = tail call i32 @llvm.fshr.i32(i32 %108, i32 %109, i32 %113)\l  %117 = select i1 %112, i32 %106, i32 %114\l  %118 = select i1 %112, i32 %107, i32 %115\l  %119 = select i1 %112, i32 %108, i32 %116\l  %120 = lshr i32 %117, 29\l  %121 = tail call i32 @llvm.fshl.i32(i32 %117, i32 %118, i32 2)\l  %122 = tail call i32 @llvm.fshl.i32(i32 %118, i32 %119, i32 2)\l  %123 = tail call i32 @llvm.fshl.i32(i32 %119, i32 %109, i32 2)\l  %124 = and i32 %120, 1\l  %125 = sub nsw i32 0, %124\l  %126 = shl i32 %120, 31\l  %127 = xor i32 %121, %125\l  %128 = xor i32 %122, %125\l  %129 = xor i32 %123, %125\l  %130 = tail call i32 @llvm.ctlz.i32(i32 %127, i1 false), !range !11\l  %131 = sub nsw i32 31, %130\l  %132 = tail call i32 @llvm.fshr.i32(i32 %127, i32 %128, i32 %131)\l  %133 = tail call i32 @llvm.fshr.i32(i32 %128, i32 %129, i32 %131)\l  %134 = shl nuw nsw i32 %130, 23\l  %135 = sub nuw nsw i32 1056964608, %134\l  %136 = lshr i32 %132, 9\l  %137 = or i32 %136, %135\l  %138 = or i32 %137, %126\l  %139 = bitcast i32 %138 to float\l  %140 = tail call i32 @llvm.fshl.i32(i32 %132, i32 %133, i32 23)\l  %141 = tail call i32 @llvm.ctlz.i32(i32 %140, i1 false), !range !11\l  %142 = fmul float %139, 0x3FF921FB40000000\l  %143 = add nuw nsw i32 %141, %130\l  %144 = shl nuw nsw i32 %143, 23\l  %145 = sub nuw nsw i32 855638016, %144\l  %146 = sub nsw i32 31, %141\l  %147 = tail call i32 @llvm.fshr.i32(i32 %140, i32 %133, i32 %146)\l  %148 = lshr i32 %147, 9\l  %149 = or i32 %145, %148\l  %150 = or i32 %149, %126\l  %151 = bitcast i32 %150 to float\l  %152 = fneg float %142\l  %153 = tail call float @llvm.fma.f32(float %139, float 0x3FF921FB40000000,\l... float %152)\l  %154 = tail call float @llvm.fma.f32(float %139, float 0x3E74442D00000000,\l... float %153)\l  %155 = tail call float @llvm.fma.f32(float %151, float 0x3FF921FB40000000,\l... float %154)\l  %156 = fadd float %142, %155\l  %157 = lshr i32 %117, 30\l  %158 = add nuw nsw i32 %124, %157\l  br label %159\l}"];
	Node0x47f2660 -> Node0x47f30c0;
	Node0x47f30c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%159:\l159:                                              \l  %160 = phi float [ %51, %46 ], [ %156, %53 ]\l  %161 = phi i32 [ %52, %46 ], [ %158, %53 ]\l  %162 = fmul float %160, %160\l  %163 = tail call float @llvm.fmuladd.f32(float %162, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %164 = tail call float @llvm.fmuladd.f32(float %162, float %163, float\l... 0xBFC55553A0000000)\l  %165 = fmul float %162, %164\l  %166 = tail call float @llvm.fmuladd.f32(float %160, float %165, float %160)\l  %167 = tail call float @llvm.fmuladd.f32(float %162, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %168 = tail call float @llvm.fmuladd.f32(float %162, float %167, float\l... 0x3FA5557EE0000000)\l  %169 = tail call float @llvm.fmuladd.f32(float %162, float %168, float\l... 0xBFE0000080000000)\l  %170 = tail call float @llvm.fmuladd.f32(float %162, float %169, float\l... 1.000000e+00)\l  %171 = fneg float %166\l  %172 = and i32 %161, 1\l  %173 = icmp eq i32 %172, 0\l  %174 = select i1 %173, float %170, float %171\l  %175 = bitcast float %174 to i32\l  %176 = shl i32 %161, 30\l  %177 = and i32 %176, -2147483648\l  %178 = xor i32 %177, %175\l  %179 = bitcast i32 %178 to float\l  %180 = tail call i1 @llvm.amdgcn.class.f32(float %44, i32 504)\l  %181 = select i1 %180, float %179, float 0x7FF8000000000000\l  %182 = add nsw i32 %18, %7\l  %183 = mul nsw i32 %26, %8\l  %184 = add nsw i32 %182, %183\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds float, float addrspace(1)* %6, i64 %185\l  store float %181, float addrspace(1)* %186, align 4, !tbaa !7\l  br label %187\l}"];
	Node0x47f30c0 -> Node0x47f0d60;
	Node0x47f0d60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%187:\l187:                                              \l  ret void\l}"];
}
