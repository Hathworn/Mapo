digraph "CFG for '_Z2mmPfS_S_iii' function" {
	label="CFG for '_Z2mmPfS_S_iii' function";

	Node0x52bc980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = freeze i32 %15\l  %17 = icmp sgt i32 %16, %5\l  br i1 %17, label %156, label %18\l|{<s0>T|<s1>F}}"];
	Node0x52bc980:s0 -> Node0x52be980;
	Node0x52bc980:s1 -> Node0x52bea10;
	Node0x52bea10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%18:\l18:                                               \l  %19 = srem i32 %16, %3\l  %20 = icmp sgt i32 %3, 0\l  br i1 %20, label %21, label %50\l|{<s0>T|<s1>F}}"];
	Node0x52bea10:s0 -> Node0x52bec70;
	Node0x52bea10:s1 -> Node0x52becc0;
	Node0x52bec70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = sub nsw i32 %16, %19\l  %23 = and i32 %3, 7\l  %24 = icmp ult i32 %3, 8\l  br i1 %24, label %27, label %25\l|{<s0>T|<s1>F}}"];
	Node0x52bec70:s0 -> Node0x52bf010;
	Node0x52bec70:s1 -> Node0x52bf060;
	Node0x52bf060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%25:\l25:                                               \l  %26 = and i32 %3, -8\l  br label %54\l}"];
	Node0x52bf060 -> Node0x52bf260;
	Node0x52bf010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%27:\l27:                                               \l  %28 = phi float [ undef, %21 ], [ %152, %54 ]\l  %29 = phi i32 [ 0, %21 ], [ %153, %54 ]\l  %30 = phi float [ 0.000000e+00, %21 ], [ %152, %54 ]\l  %31 = icmp eq i32 %23, 0\l  br i1 %31, label %50, label %32\l|{<s0>T|<s1>F}}"];
	Node0x52bf010:s0 -> Node0x52becc0;
	Node0x52bf010:s1 -> Node0x52c04d0;
	Node0x52c04d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%32:\l32:                                               \l  %33 = phi i32 [ %47, %32 ], [ %29, %27 ]\l  %34 = phi float [ %46, %32 ], [ %30, %27 ]\l  %35 = phi i32 [ %48, %32 ], [ 0, %27 ]\l  %36 = add nsw i32 %22, %33\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = mul nsw i32 %33, %3\l  %41 = add nsw i32 %40, %19\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %1, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %45 = fmul contract float %39, %44\l  %46 = fadd contract float %34, %45\l  %47 = add nuw nsw i32 %33, 1\l  %48 = add i32 %35, 1\l  %49 = icmp eq i32 %48, %23\l  br i1 %49, label %50, label %32, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x52c04d0:s0 -> Node0x52becc0;
	Node0x52c04d0:s1 -> Node0x52c04d0;
	Node0x52becc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%50:\l50:                                               \l  %51 = phi float [ 0.000000e+00, %18 ], [ %28, %27 ], [ %46, %32 ]\l  %52 = sext i32 %16 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %2, i64 %52\l  store float %51, float addrspace(1)* %53, align 4, !tbaa !7\l  br label %156\l}"];
	Node0x52becc0 -> Node0x52be980;
	Node0x52bf260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%54:\l54:                                               \l  %55 = phi i32 [ 0, %25 ], [ %153, %54 ]\l  %56 = phi float [ 0.000000e+00, %25 ], [ %152, %54 ]\l  %57 = phi i32 [ 0, %25 ], [ %154, %54 ]\l  %58 = add nsw i32 %22, %55\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %0, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %62 = mul nsw i32 %55, %3\l  %63 = add nsw i32 %62, %19\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = fmul contract float %61, %66\l  %68 = fadd contract float %56, %67\l  %69 = or i32 %55, 1\l  %70 = add nsw i32 %22, %69\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = mul nsw i32 %69, %3\l  %75 = add nsw i32 %74, %19\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fmul contract float %73, %78\l  %80 = fadd contract float %68, %79\l  %81 = or i32 %55, 2\l  %82 = add nsw i32 %22, %81\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = mul nsw i32 %81, %3\l  %87 = add nsw i32 %86, %19\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %85, %90\l  %92 = fadd contract float %80, %91\l  %93 = or i32 %55, 3\l  %94 = add nsw i32 %22, %93\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = mul nsw i32 %93, %3\l  %99 = add nsw i32 %98, %19\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = fmul contract float %97, %102\l  %104 = fadd contract float %92, %103\l  %105 = or i32 %55, 4\l  %106 = add nsw i32 %22, %105\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %110 = mul nsw i32 %105, %3\l  %111 = add nsw i32 %110, %19\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %115 = fmul contract float %109, %114\l  %116 = fadd contract float %104, %115\l  %117 = or i32 %55, 5\l  %118 = add nsw i32 %22, %117\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %122 = mul nsw i32 %117, %3\l  %123 = add nsw i32 %122, %19\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fmul contract float %121, %126\l  %128 = fadd contract float %116, %127\l  %129 = or i32 %55, 6\l  %130 = add nsw i32 %22, %129\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = mul nsw i32 %129, %3\l  %135 = add nsw i32 %134, %19\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %139 = fmul contract float %133, %138\l  %140 = fadd contract float %128, %139\l  %141 = or i32 %55, 7\l  %142 = add nsw i32 %22, %141\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = mul nsw i32 %141, %3\l  %147 = add nsw i32 %146, %19\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %151 = fmul contract float %145, %150\l  %152 = fadd contract float %140, %151\l  %153 = add nuw nsw i32 %55, 8\l  %154 = add i32 %57, 8\l  %155 = icmp eq i32 %154, %26\l  br i1 %155, label %27, label %54, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x52bf260:s0 -> Node0x52bf010;
	Node0x52bf260:s1 -> Node0x52bf260;
	Node0x52be980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%156:\l156:                                              \l  ret void\l}"];
}
