digraph "CFG for '_Z4blurPhiiiii' function" {
	label="CFG for '_Z4blurPhiiiii' function";

	Node0x51ec3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = mul nsw i32 %15, %1\l  %17 = sdiv i32 %16, %5\l  %18 = add nsw i32 %5, -1\l  %19 = icmp eq i32 %15, %18\l  br i1 %19, label %24, label %20\l|{<s0>T|<s1>F}}"];
	Node0x51ec3e0:s0 -> Node0x51ee510;
	Node0x51ec3e0:s1 -> Node0x51ee5a0;
	Node0x51ee5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6c8ff170",label="{%20:\l20:                                               \l  %21 = add nsw i32 %15, 1\l  %22 = mul nsw i32 %21, %1\l  %23 = sdiv i32 %22, %5\l  br label %24\l}"];
	Node0x51ee5a0 -> Node0x51ee510;
	Node0x51ee510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%24:\l24:                                               \l  %25 = phi i32 [ %23, %20 ], [ %1, %6 ]\l  %26 = sdiv i32 %4, 2\l  %27 = icmp slt i32 %17, %25\l  br i1 %27, label %28, label %133\l|{<s0>T|<s1>F}}"];
	Node0x51ee510:s0 -> Node0x51eeb30;
	Node0x51ee510:s1 -> Node0x51eeb80;
	Node0x51eeb30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6c8ff170",label="{%28:\l28:                                               \l  %29 = icmp sgt i32 %2, 0\l  %30 = add i32 %17, %26\l  br label %31\l}"];
	Node0x51eeb30 -> Node0x51eedd0;
	Node0x51eedd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%31:\l31:                                               \l  %32 = phi i32 [ %30, %28 ], [ %34, %40 ]\l  %33 = phi i32 [ %17, %28 ], [ %41, %40 ]\l  %34 = add i32 %32, 1\l  br i1 %29, label %35, label %40\l|{<s0>T|<s1>F}}"];
	Node0x51eedd0:s0 -> Node0x51ee3a0;
	Node0x51eedd0:s1 -> Node0x51eeec0;
	Node0x51ee3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%35:\l35:                                               \l  %36 = sub nsw i32 %33, %26\l  %37 = add nsw i32 %33, %26\l  %38 = icmp sgt i32 %36, %37\l  %39 = mul nsw i32 %33, %2\l  br label %43\l}"];
	Node0x51ee3a0 -> Node0x51ef5f0;
	Node0x51eeec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%40:\l40:                                               \l  %41 = add nsw i32 %33, 1\l  %42 = icmp slt i32 %41, %25\l  br i1 %42, label %31, label %133, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x51eeec0:s0 -> Node0x51eedd0;
	Node0x51eeec0:s1 -> Node0x51eeb80;
	Node0x51ef5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%43:\l43:                                               \l  %44 = phi i32 [ %26, %35 ], [ %46, %51 ]\l  %45 = phi i32 [ 0, %35 ], [ %75, %51 ]\l  %46 = add i32 %44, 1\l  br i1 %38, label %51, label %47\l|{<s0>T|<s1>F}}"];
	Node0x51ef5f0:s0 -> Node0x51ef940;
	Node0x51ef5f0:s1 -> Node0x51efc00;
	Node0x51efc00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = sub nsw i32 %45, %26\l  %49 = add nsw i32 %45, %26\l  %50 = icmp sgt i32 %48, %49\l  br label %77\l}"];
	Node0x51efc00 -> Node0x51efeb0;
	Node0x51ef940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %43 ], [ %89, %88 ]\l  %53 = phi i32 [ 0, %43 ], [ %90, %88 ]\l  %54 = phi i32 [ 0, %43 ], [ %91, %88 ]\l  %55 = phi double [ 0.000000e+00, %43 ], [ %92, %88 ]\l  %56 = uitofp i32 %52 to double\l  %57 = fdiv contract double %56, %55\l  %58 = fptoui double %57 to i8\l  %59 = add i32 %45, %39\l  %60 = mul i32 %59, %3\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %61\l  store i8 %58, i8 addrspace(1)* %62, align 1, !tbaa !9\l  %63 = uitofp i32 %54 to double\l  %64 = fdiv contract double %63, %55\l  %65 = fptoui double %64 to i8\l  %66 = add nsw i32 %60, 1\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %67\l  store i8 %65, i8 addrspace(1)* %68, align 1, !tbaa !9\l  %69 = uitofp i32 %53 to double\l  %70 = fdiv contract double %69, %55\l  %71 = fptoui double %70 to i8\l  %72 = add nsw i32 %60, 2\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %73\l  store i8 %71, i8 addrspace(1)* %74, align 1, !tbaa !9\l  %75 = add nuw nsw i32 %45, 1\l  %76 = icmp eq i32 %75, %2\l  br i1 %76, label %40, label %43, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x51ef940:s0 -> Node0x51eeec0;
	Node0x51ef940:s1 -> Node0x51ef5f0;
	Node0x51efeb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%77:\l77:                                               \l  %78 = phi i32 [ %36, %47 ], [ %93, %88 ]\l  %79 = phi double [ 0.000000e+00, %47 ], [ %92, %88 ]\l  %80 = phi i32 [ 0, %47 ], [ %91, %88 ]\l  %81 = phi i32 [ 0, %47 ], [ %90, %88 ]\l  %82 = phi i32 [ 0, %47 ], [ %89, %88 ]\l  br i1 %50, label %88, label %83\l|{<s0>T|<s1>F}}"];
	Node0x51efeb0:s0 -> Node0x51eff70;
	Node0x51efeb0:s1 -> Node0x51f2990;
	Node0x51f2990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{%83:\l83:                                               \l  %84 = icmp slt i32 %78, %1\l  %85 = icmp sgt i32 %78, -1\l  %86 = and i1 %84, %85\l  %87 = mul nsw i32 %78, %2\l  br label %95\l}"];
	Node0x51f2990 -> Node0x51f2d10;
	Node0x51eff70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%88:\l88:                                               \l  %89 = phi i32 [ %82, %77 ], [ %127, %126 ]\l  %90 = phi i32 [ %81, %77 ], [ %128, %126 ]\l  %91 = phi i32 [ %80, %77 ], [ %129, %126 ]\l  %92 = phi double [ %79, %77 ], [ %130, %126 ]\l  %93 = add i32 %78, 1\l  %94 = icmp eq i32 %78, %32\l  br i1 %94, label %51, label %77, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x51eff70:s0 -> Node0x51ef940;
	Node0x51eff70:s1 -> Node0x51efeb0;
	Node0x51f2d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%95:\l95:                                               \l  %96 = phi i32 [ %48, %83 ], [ %131, %126 ]\l  %97 = phi double [ %79, %83 ], [ %130, %126 ]\l  %98 = phi i32 [ %80, %83 ], [ %129, %126 ]\l  %99 = phi i32 [ %81, %83 ], [ %128, %126 ]\l  %100 = phi i32 [ %82, %83 ], [ %127, %126 ]\l  br i1 %86, label %101, label %126\l|{<s0>T|<s1>F}}"];
	Node0x51f2d10:s0 -> Node0x51f3720;
	Node0x51f2d10:s1 -> Node0x51f2dd0;
	Node0x51f3720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%101:\l101:                                              \l  %102 = icmp slt i32 %96, %2\l  %103 = icmp sgt i32 %96, -1\l  %104 = and i1 %102, %103\l  br i1 %104, label %105, label %126\l|{<s0>T|<s1>F}}"];
	Node0x51f3720:s0 -> Node0x51f3a10;
	Node0x51f3720:s1 -> Node0x51f2dd0;
	Node0x51f3a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%105:\l105:                                              \l  %106 = fadd contract double %97, 1.000000e+00\l  %107 = add i32 %96, %87\l  %108 = mul i32 %107, %3\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %109\l  %111 = load i8, i8 addrspace(1)* %110, align 1, !tbaa !9\l  %112 = zext i8 %111 to i32\l  %113 = add i32 %100, %112\l  %114 = add nsw i32 %108, 1\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %115\l  %117 = load i8, i8 addrspace(1)* %116, align 1, !tbaa !9\l  %118 = zext i8 %117 to i32\l  %119 = add i32 %98, %118\l  %120 = add nsw i32 %108, 2\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %121\l  %123 = load i8, i8 addrspace(1)* %122, align 1, !tbaa !9\l  %124 = zext i8 %123 to i32\l  %125 = add i32 %99, %124\l  br label %126\l}"];
	Node0x51f3a10 -> Node0x51f2dd0;
	Node0x51f2dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%126:\l126:                                              \l  %127 = phi i32 [ %113, %105 ], [ %100, %101 ], [ %100, %95 ]\l  %128 = phi i32 [ %125, %105 ], [ %99, %101 ], [ %99, %95 ]\l  %129 = phi i32 [ %119, %105 ], [ %98, %101 ], [ %98, %95 ]\l  %130 = phi double [ %106, %105 ], [ %97, %101 ], [ %97, %95 ]\l  %131 = add i32 %96, 1\l  %132 = icmp eq i32 %96, %44\l  br i1 %132, label %88, label %95, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x51f2dd0:s0 -> Node0x51eff70;
	Node0x51f2dd0:s1 -> Node0x51f2d10;
	Node0x51eeb80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%133:\l133:                                              \l  ret void\l}"];
}
