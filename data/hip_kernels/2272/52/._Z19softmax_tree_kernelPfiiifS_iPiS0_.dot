digraph "CFG for '_Z19softmax_tree_kernelPfiiifS_iPiS0_' function" {
	label="CFG for '_Z19softmax_tree_kernelPfiiifS_iPiS0_' function";

	Node0x53fd9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !4\l  %16 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !13, !invariant.load\l... !14\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %15, %19\l  %21 = mul i32 %20, %19\l  %22 = icmp ugt i32 %15, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  %26 = add i32 %25, %10\l  %27 = mul i32 %26, %19\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = mul nsw i32 %2, %1\l  %31 = mul nsw i32 %30, %6\l  %32 = icmp slt i32 %29, %31\l  br i1 %32, label %33, label %301\l|{<s0>T|<s1>F}}"];
	Node0x53fd9f0:s0 -> Node0x53fffd0;
	Node0x53fd9f0:s1 -> Node0x5400060;
	Node0x53fffd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%33:\l33:                                               \l  %34 = freeze i32 %29\l  %35 = freeze i32 %1\l  %36 = sdiv i32 %34, %35\l  %37 = mul i32 %36, %35\l  %38 = sub i32 %34, %37\l  %39 = freeze i32 %6\l  %40 = sdiv i32 %36, %39\l  %41 = mul i32 %40, %39\l  %42 = sub i32 %36, %41\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %46 = mul nsw i32 %45, %1\l  %47 = mul nsw i32 %40, %3\l  %48 = sext i32 %46 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = sext i32 %47 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %49, i64 %50\l  %52 = sext i32 %38 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %51, i64 %52\l  %54 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %43\l  %55 = load i32, i32 addrspace(1)* %54, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %56 = getelementptr inbounds float, float addrspace(1)* %5, i64 %48\l  %57 = getelementptr inbounds float, float addrspace(1)* %56, i64 %50\l  %58 = getelementptr inbounds float, float addrspace(1)* %57, i64 %52\l  %59 = icmp sgt i32 %55, 0\l  br i1 %59, label %60, label %85\l|{<s0>T|<s1>F}}"];
	Node0x53fffd0:s0 -> Node0x5402d90;
	Node0x53fffd0:s1 -> Node0x5402e20;
	Node0x5402d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%60:\l60:                                               \l  %61 = and i32 %55, 7\l  %62 = icmp ult i32 %55, 8\l  br i1 %62, label %65, label %63\l|{<s0>T|<s1>F}}"];
	Node0x5402d90:s0 -> Node0x54030b0;
	Node0x5402d90:s1 -> Node0x5403100;
	Node0x5403100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%63:\l63:                                               \l  %64 = and i32 %55, -8\l  br label %93\l}"];
	Node0x5403100 -> Node0x5400eb0;
	Node0x54030b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%65:\l65:                                               \l  %66 = phi float [ undef, %60 ], [ %167, %93 ]\l  %67 = phi i32 [ 0, %60 ], [ %168, %93 ]\l  %68 = phi float [ 0xFFF0000000000000, %60 ], [ %167, %93 ]\l  %69 = icmp eq i32 %61, 0\l  br i1 %69, label %85, label %70\l|{<s0>T|<s1>F}}"];
	Node0x54030b0:s0 -> Node0x5402e20;
	Node0x54030b0:s1 -> Node0x54047a0;
	Node0x54047a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  %71 = phi i32 [ %82, %70 ], [ %67, %65 ]\l  %72 = phi float [ %81, %70 ], [ %68, %65 ]\l  %73 = phi i32 [ %83, %70 ], [ 0, %65 ]\l  %74 = mul nsw i32 %71, %1\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %53, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %78 = fptosi float %77 to i32\l  %79 = sitofp i32 %78 to float\l  %80 = fcmp contract olt float %72, %79\l  %81 = select contract i1 %80, float %79, float %72\l  %82 = add nuw nsw i32 %71, 1\l  %83 = add i32 %73, 1\l  %84 = icmp eq i32 %83, %61\l  br i1 %84, label %85, label %70, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x54047a0:s0 -> Node0x5402e20;
	Node0x54047a0:s1 -> Node0x54047a0;
	Node0x5402e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%85:\l85:                                               \l  %86 = phi float [ 0xFFF0000000000000, %33 ], [ %66, %65 ], [ %81, %70 ]\l  br i1 %59, label %87, label %199\l|{<s0>T|<s1>F}}"];
	Node0x5402e20:s0 -> Node0x5405560;
	Node0x5402e20:s1 -> Node0x54055b0;
	Node0x5405560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%87:\l87:                                               \l  %88 = fdiv contract float %86, %4\l  %89 = and i32 %55, 1\l  %90 = icmp eq i32 %55, 1\l  br i1 %90, label %171, label %91\l|{<s0>T|<s1>F}}"];
	Node0x5405560:s0 -> Node0x54058a0;
	Node0x5405560:s1 -> Node0x54058f0;
	Node0x54058f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%91:\l91:                                               \l  %92 = and i32 %55, -2\l  br label %206\l}"];
	Node0x54058f0 -> Node0x5405ac0;
	Node0x5400eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%93:\l93:                                               \l  %94 = phi i32 [ 0, %63 ], [ %168, %93 ]\l  %95 = phi float [ 0xFFF0000000000000, %63 ], [ %167, %93 ]\l  %96 = phi i32 [ 0, %63 ], [ %169, %93 ]\l  %97 = mul nsw i32 %94, %1\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %53, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %101 = fptosi float %100 to i32\l  %102 = sitofp i32 %101 to float\l  %103 = fcmp contract olt float %95, %102\l  %104 = select contract i1 %103, float %102, float %95\l  %105 = or i32 %94, 1\l  %106 = mul nsw i32 %105, %1\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %53, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %110 = fptosi float %109 to i32\l  %111 = sitofp i32 %110 to float\l  %112 = fcmp contract olt float %104, %111\l  %113 = select contract i1 %112, float %111, float %104\l  %114 = or i32 %94, 2\l  %115 = mul nsw i32 %114, %1\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %53, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %119 = fptosi float %118 to i32\l  %120 = sitofp i32 %119 to float\l  %121 = fcmp contract olt float %113, %120\l  %122 = select contract i1 %121, float %120, float %113\l  %123 = or i32 %94, 3\l  %124 = mul nsw i32 %123, %1\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %53, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %128 = fptosi float %127 to i32\l  %129 = sitofp i32 %128 to float\l  %130 = fcmp contract olt float %122, %129\l  %131 = select contract i1 %130, float %129, float %122\l  %132 = or i32 %94, 4\l  %133 = mul nsw i32 %132, %1\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %53, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %137 = fptosi float %136 to i32\l  %138 = sitofp i32 %137 to float\l  %139 = fcmp contract olt float %131, %138\l  %140 = select contract i1 %139, float %138, float %131\l  %141 = or i32 %94, 5\l  %142 = mul nsw i32 %141, %1\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %53, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %146 = fptosi float %145 to i32\l  %147 = sitofp i32 %146 to float\l  %148 = fcmp contract olt float %140, %147\l  %149 = select contract i1 %148, float %147, float %140\l  %150 = or i32 %94, 6\l  %151 = mul nsw i32 %150, %1\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %53, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %155 = fptosi float %154 to i32\l  %156 = sitofp i32 %155 to float\l  %157 = fcmp contract olt float %149, %156\l  %158 = select contract i1 %157, float %156, float %149\l  %159 = or i32 %94, 7\l  %160 = mul nsw i32 %159, %1\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %53, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !20,\l... !amdgpu.noclobber !14\l  %164 = fptosi float %163 to i32\l  %165 = sitofp i32 %164 to float\l  %166 = fcmp contract olt float %158, %165\l  %167 = select contract i1 %166, float %165, float %158\l  %168 = add nuw nsw i32 %94, 8\l  %169 = add i32 %96, 8\l  %170 = icmp eq i32 %169, %64\l  br i1 %170, label %65, label %93, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5400eb0:s0 -> Node0x54030b0;
	Node0x5400eb0:s1 -> Node0x5400eb0;
	Node0x54058a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%171:\l171:                                              \l  %172 = phi float [ undef, %87 ], [ %253, %206 ]\l  %173 = phi i32 [ 0, %87 ], [ %255, %206 ]\l  %174 = phi float [ 0.000000e+00, %87 ], [ %253, %206 ]\l  %175 = icmp eq i32 %89, 0\l  br i1 %175, label %199, label %176\l|{<s0>T|<s1>F}}"];
	Node0x54058a0:s0 -> Node0x54055b0;
	Node0x54058a0:s1 -> Node0x54095c0;
	Node0x54095c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%176:\l176:                                              \l  %177 = mul nsw i32 %173, %1\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds float, float addrspace(1)* %53, i64 %178\l  %180 = load float, float addrspace(1)* %179, align 4, !tbaa !20\l  %181 = fdiv contract float %180, %4\l  %182 = fsub contract float %181, %88\l  %183 = fmul float %182, 0x3FF7154760000000\l  %184 = tail call float @llvm.rint.f32(float %183)\l  %185 = fcmp ogt float %182, 0x40562E4300000000\l  %186 = fcmp olt float %182, 0xC059D1DA00000000\l  %187 = fneg float %183\l  %188 = tail call float @llvm.fma.f32(float %182, float 0x3FF7154760000000,\l... float %187)\l  %189 = tail call float @llvm.fma.f32(float %182, float 0x3E54AE0BE0000000,\l... float %188)\l  %190 = fsub float %183, %184\l  %191 = fadd float %189, %190\l  %192 = tail call float @llvm.exp2.f32(float %191)\l  %193 = fptosi float %184 to i32\l  %194 = tail call float @llvm.amdgcn.ldexp.f32(float %192, i32 %193)\l  %195 = select i1 %186, float 0.000000e+00, float %194\l  %196 = select i1 %185, float 0x7FF0000000000000, float %195\l  %197 = fadd contract float %174, %196\l  %198 = getelementptr inbounds float, float addrspace(1)* %58, i64 %178\l  store float %196, float addrspace(1)* %198, align 4, !tbaa !20\l  br label %199\l}"];
	Node0x54095c0 -> Node0x54055b0;
	Node0x54055b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%199:\l199:                                              \l  %200 = phi float [ 0.000000e+00, %85 ], [ %172, %171 ], [ %197, %176 ]\l  br i1 %59, label %201, label %301\l|{<s0>T|<s1>F}}"];
	Node0x54055b0:s0 -> Node0x540ad90;
	Node0x54055b0:s1 -> Node0x5400060;
	Node0x540ad90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%201:\l201:                                              \l  %202 = and i32 %55, 3\l  %203 = icmp ult i32 %55, 4\l  br i1 %203, label %287, label %204\l|{<s0>T|<s1>F}}"];
	Node0x540ad90:s0 -> Node0x540afb0;
	Node0x540ad90:s1 -> Node0x540b000;
	Node0x540b000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%204:\l204:                                              \l  %205 = and i32 %55, -4\l  br label %258\l}"];
	Node0x540b000 -> Node0x540b1d0;
	Node0x5405ac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%206:\l206:                                              \l  %207 = phi i32 [ 0, %91 ], [ %255, %206 ]\l  %208 = phi float [ 0.000000e+00, %91 ], [ %253, %206 ]\l  %209 = phi i32 [ 0, %91 ], [ %256, %206 ]\l  %210 = mul nsw i32 %207, %1\l  %211 = sext i32 %210 to i64\l  %212 = getelementptr inbounds float, float addrspace(1)* %53, i64 %211\l  %213 = load float, float addrspace(1)* %212, align 4, !tbaa !20\l  %214 = fdiv contract float %213, %4\l  %215 = fsub contract float %214, %88\l  %216 = fmul float %215, 0x3FF7154760000000\l  %217 = tail call float @llvm.rint.f32(float %216)\l  %218 = fcmp ogt float %215, 0x40562E4300000000\l  %219 = fcmp olt float %215, 0xC059D1DA00000000\l  %220 = fneg float %216\l  %221 = tail call float @llvm.fma.f32(float %215, float 0x3FF7154760000000,\l... float %220)\l  %222 = tail call float @llvm.fma.f32(float %215, float 0x3E54AE0BE0000000,\l... float %221)\l  %223 = fsub float %216, %217\l  %224 = fadd float %222, %223\l  %225 = tail call float @llvm.exp2.f32(float %224)\l  %226 = fptosi float %217 to i32\l  %227 = tail call float @llvm.amdgcn.ldexp.f32(float %225, i32 %226)\l  %228 = select i1 %219, float 0.000000e+00, float %227\l  %229 = select i1 %218, float 0x7FF0000000000000, float %228\l  %230 = fadd contract float %208, %229\l  %231 = getelementptr inbounds float, float addrspace(1)* %58, i64 %211\l  store float %229, float addrspace(1)* %231, align 4, !tbaa !20\l  %232 = or i32 %207, 1\l  %233 = mul nsw i32 %232, %1\l  %234 = sext i32 %233 to i64\l  %235 = getelementptr inbounds float, float addrspace(1)* %53, i64 %234\l  %236 = load float, float addrspace(1)* %235, align 4, !tbaa !20\l  %237 = fdiv contract float %236, %4\l  %238 = fsub contract float %237, %88\l  %239 = fmul float %238, 0x3FF7154760000000\l  %240 = tail call float @llvm.rint.f32(float %239)\l  %241 = fcmp ogt float %238, 0x40562E4300000000\l  %242 = fcmp olt float %238, 0xC059D1DA00000000\l  %243 = fneg float %239\l  %244 = tail call float @llvm.fma.f32(float %238, float 0x3FF7154760000000,\l... float %243)\l  %245 = tail call float @llvm.fma.f32(float %238, float 0x3E54AE0BE0000000,\l... float %244)\l  %246 = fsub float %239, %240\l  %247 = fadd float %245, %246\l  %248 = tail call float @llvm.exp2.f32(float %247)\l  %249 = fptosi float %240 to i32\l  %250 = tail call float @llvm.amdgcn.ldexp.f32(float %248, i32 %249)\l  %251 = select i1 %242, float 0.000000e+00, float %250\l  %252 = select i1 %241, float 0x7FF0000000000000, float %251\l  %253 = fadd contract float %230, %252\l  %254 = getelementptr inbounds float, float addrspace(1)* %58, i64 %234\l  store float %252, float addrspace(1)* %254, align 4, !tbaa !20\l  %255 = add nuw nsw i32 %207, 2\l  %256 = add i32 %209, 2\l  %257 = icmp eq i32 %256, %92\l  br i1 %257, label %171, label %206, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5405ac0:s0 -> Node0x54058a0;
	Node0x5405ac0:s1 -> Node0x5405ac0;
	Node0x540b1d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%258:\l258:                                              \l  %259 = phi i32 [ 0, %204 ], [ %284, %258 ]\l  %260 = phi i32 [ 0, %204 ], [ %285, %258 ]\l  %261 = mul nsw i32 %259, %1\l  %262 = sext i32 %261 to i64\l  %263 = getelementptr inbounds float, float addrspace(1)* %58, i64 %262\l  %264 = load float, float addrspace(1)* %263, align 4, !tbaa !20\l  %265 = fdiv contract float %264, %200\l  store float %265, float addrspace(1)* %263, align 4, !tbaa !20\l  %266 = or i32 %259, 1\l  %267 = mul nsw i32 %266, %1\l  %268 = sext i32 %267 to i64\l  %269 = getelementptr inbounds float, float addrspace(1)* %58, i64 %268\l  %270 = load float, float addrspace(1)* %269, align 4, !tbaa !20\l  %271 = fdiv contract float %270, %200\l  store float %271, float addrspace(1)* %269, align 4, !tbaa !20\l  %272 = or i32 %259, 2\l  %273 = mul nsw i32 %272, %1\l  %274 = sext i32 %273 to i64\l  %275 = getelementptr inbounds float, float addrspace(1)* %58, i64 %274\l  %276 = load float, float addrspace(1)* %275, align 4, !tbaa !20\l  %277 = fdiv contract float %276, %200\l  store float %277, float addrspace(1)* %275, align 4, !tbaa !20\l  %278 = or i32 %259, 3\l  %279 = mul nsw i32 %278, %1\l  %280 = sext i32 %279 to i64\l  %281 = getelementptr inbounds float, float addrspace(1)* %58, i64 %280\l  %282 = load float, float addrspace(1)* %281, align 4, !tbaa !20\l  %283 = fdiv contract float %282, %200\l  store float %283, float addrspace(1)* %281, align 4, !tbaa !20\l  %284 = add nuw nsw i32 %259, 4\l  %285 = add i32 %260, 4\l  %286 = icmp eq i32 %285, %205\l  br i1 %286, label %287, label %258, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x540b1d0:s0 -> Node0x540afb0;
	Node0x540b1d0:s1 -> Node0x540b1d0;
	Node0x540afb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%287:\l287:                                              \l  %288 = phi i32 [ 0, %201 ], [ %284, %258 ]\l  %289 = icmp eq i32 %202, 0\l  br i1 %289, label %301, label %290\l|{<s0>T|<s1>F}}"];
	Node0x540afb0:s0 -> Node0x5400060;
	Node0x540afb0:s1 -> Node0x540f380;
	Node0x540f380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%290:\l290:                                              \l  %291 = phi i32 [ %298, %290 ], [ %288, %287 ]\l  %292 = phi i32 [ %299, %290 ], [ 0, %287 ]\l  %293 = mul nsw i32 %291, %1\l  %294 = sext i32 %293 to i64\l  %295 = getelementptr inbounds float, float addrspace(1)* %58, i64 %294\l  %296 = load float, float addrspace(1)* %295, align 4, !tbaa !20\l  %297 = fdiv contract float %296, %200\l  store float %297, float addrspace(1)* %295, align 4, !tbaa !20\l  %298 = add nuw nsw i32 %291, 1\l  %299 = add i32 %292, 1\l  %300 = icmp eq i32 %299, %202\l  br i1 %300, label %301, label %290, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x540f380:s0 -> Node0x5400060;
	Node0x540f380:s1 -> Node0x540f380;
	Node0x5400060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%301:\l301:                                              \l  ret void\l}"];
}
