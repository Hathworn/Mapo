digraph "CFG for '_Z19cuda_standarizationPfii' function" {
	label="CFG for '_Z19cuda_standarizationPfii' function";

	Node0x45e2400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !6\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %8\l  %14 = udiv i32 %11, %8\l  %15 = mul i32 %14, %8\l  %16 = icmp ugt i32 %11, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = mul i32 %18, %8\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add nuw nsw i32 %20, 1\l  %22 = add i32 %21, %13\l  %23 = icmp slt i32 %22, %2\l  br i1 %23, label %24, label %48\l|{<s0>T|<s1>F}}"];
	Node0x45e2400:s0 -> Node0x45e4a30;
	Node0x45e2400:s1 -> Node0x45e4ac0;
	Node0x45e4a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%24:\l24:                                               \l  %25 = icmp sgt i32 %1, 0\l  %26 = sitofp i32 %1 to float\l  %27 = and i32 %1, 7\l  %28 = icmp ult i32 %1, 8\l  %29 = and i32 %1, -8\l  %30 = icmp eq i32 %27, 0\l  %31 = and i32 %1, 7\l  %32 = icmp ult i32 %1, 8\l  %33 = and i32 %1, -8\l  %34 = icmp eq i32 %31, 0\l  %35 = and i32 %1, 7\l  %36 = icmp ult i32 %1, 8\l  %37 = and i32 %1, -8\l  %38 = icmp eq i32 %35, 0\l  %39 = and i32 %1, 3\l  %40 = icmp ult i32 %1, 4\l  %41 = and i32 %1, -4\l  %42 = icmp eq i32 %39, 0\l  br label %43\l}"];
	Node0x45e4a30 -> Node0x45e5870;
	Node0x45e5870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%43:\l43:                                               \l  %44 = phi i32 [ %22, %24 ], [ %364, %363 ]\l  br i1 %25, label %45, label %65\l|{<s0>T|<s1>F}}"];
	Node0x45e5870:s0 -> Node0x45e5aa0;
	Node0x45e5870:s1 -> Node0x45e5b30;
	Node0x45e5aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%45:\l45:                                               \l  %46 = sext i32 %44 to i64\l  %47 = getelementptr float, float addrspace(1)* %0, i64 %46\l  br i1 %28, label %49, label %71\l|{<s0>T|<s1>F}}"];
	Node0x45e5aa0:s0 -> Node0x45e5d80;
	Node0x45e5aa0:s1 -> Node0x45e5dd0;
	Node0x45e4ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%48:\l48:                                               \l  ret void\l}"];
	Node0x45e5d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%49:\l49:                                               \l  %50 = phi float [ undef, %45 ], [ %121, %71 ]\l  %51 = phi float [ 0.000000e+00, %45 ], [ %121, %71 ]\l  %52 = phi i32 [ 0, %45 ], [ %122, %71 ]\l  br i1 %30, label %65, label %53\l|{<s0>T|<s1>F}}"];
	Node0x45e5d80:s0 -> Node0x45e5b30;
	Node0x45e5d80:s1 -> Node0x45e7040;
	Node0x45e7040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = phi float [ %61, %53 ], [ %51, %49 ]\l  %55 = phi i32 [ %62, %53 ], [ %52, %49 ]\l  %56 = phi i32 [ %63, %53 ], [ 0, %49 ]\l  %57 = mul nsw i32 %55, %2\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr float, float addrspace(1)* %47, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !16\l  %61 = fadd contract float %54, %60\l  %62 = add nuw nsw i32 %55, 1\l  %63 = add i32 %56, 1\l  %64 = icmp eq i32 %63, %27\l  br i1 %64, label %65, label %53, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x45e7040:s0 -> Node0x45e5b30;
	Node0x45e7040:s1 -> Node0x45e7040;
	Node0x45e5b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%65:\l65:                                               \l  %66 = phi float [ 0.000000e+00, %43 ], [ %50, %49 ], [ %61, %53 ]\l  %67 = fdiv contract float %66, %26\l  br i1 %25, label %68, label %143\l|{<s0>T|<s1>F}}"];
	Node0x45e5b30:s0 -> Node0x45e7380;
	Node0x45e5b30:s1 -> Node0x45e7260;
	Node0x45e7380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%68:\l68:                                               \l  %69 = sext i32 %44 to i64\l  %70 = getelementptr float, float addrspace(1)* %0, i64 %69\l  br i1 %32, label %125, label %150\l|{<s0>T|<s1>F}}"];
	Node0x45e7380:s0 -> Node0x45e8180;
	Node0x45e7380:s1 -> Node0x45e81d0;
	Node0x45e5dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%71:\l71:                                               \l  %72 = phi float [ %121, %71 ], [ 0.000000e+00, %45 ]\l  %73 = phi i32 [ %122, %71 ], [ 0, %45 ]\l  %74 = phi i32 [ %123, %71 ], [ 0, %45 ]\l  %75 = mul nsw i32 %73, %2\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr float, float addrspace(1)* %47, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = fadd contract float %72, %78\l  %80 = or i32 %73, 1\l  %81 = mul nsw i32 %80, %2\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr float, float addrspace(1)* %47, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16\l  %85 = fadd contract float %79, %84\l  %86 = or i32 %73, 2\l  %87 = mul nsw i32 %86, %2\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr float, float addrspace(1)* %47, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = fadd contract float %85, %90\l  %92 = or i32 %73, 3\l  %93 = mul nsw i32 %92, %2\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr float, float addrspace(1)* %47, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16\l  %97 = fadd contract float %91, %96\l  %98 = or i32 %73, 4\l  %99 = mul nsw i32 %98, %2\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr float, float addrspace(1)* %47, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !16\l  %103 = fadd contract float %97, %102\l  %104 = or i32 %73, 5\l  %105 = mul nsw i32 %104, %2\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr float, float addrspace(1)* %47, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16\l  %109 = fadd contract float %103, %108\l  %110 = or i32 %73, 6\l  %111 = mul nsw i32 %110, %2\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr float, float addrspace(1)* %47, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = fadd contract float %109, %114\l  %116 = or i32 %73, 7\l  %117 = mul nsw i32 %116, %2\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr float, float addrspace(1)* %47, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !16\l  %121 = fadd contract float %115, %120\l  %122 = add nuw nsw i32 %73, 8\l  %123 = add i32 %74, 8\l  %124 = icmp eq i32 %123, %29\l  br i1 %124, label %49, label %71, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x45e5dd0:s0 -> Node0x45e5d80;
	Node0x45e5dd0:s1 -> Node0x45e5dd0;
	Node0x45e8180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%125:\l125:                                              \l  %126 = phi float [ undef, %68 ], [ %216, %150 ]\l  %127 = phi float [ 0.000000e+00, %68 ], [ %216, %150 ]\l  %128 = phi i32 [ 0, %68 ], [ %217, %150 ]\l  br i1 %34, label %143, label %129\l|{<s0>T|<s1>F}}"];
	Node0x45e8180:s0 -> Node0x45e7260;
	Node0x45e8180:s1 -> Node0x45e7a60;
	Node0x45e7a60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%129:\l129:                                              \l  %130 = phi float [ %139, %129 ], [ %127, %125 ]\l  %131 = phi i32 [ %140, %129 ], [ %128, %125 ]\l  %132 = phi i32 [ %141, %129 ], [ 0, %125 ]\l  %133 = mul nsw i32 %131, %2\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr float, float addrspace(1)* %70, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16\l  %137 = fsub contract float %136, %67\l  %138 = fmul contract float %137, %137\l  %139 = fadd contract float %130, %138\l  %140 = add nuw nsw i32 %131, 1\l  %141 = add i32 %132, 1\l  %142 = icmp eq i32 %141, %31\l  br i1 %142, label %143, label %129, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x45e7a60:s0 -> Node0x45e7260;
	Node0x45e7a60:s1 -> Node0x45e7a60;
	Node0x45e7260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%143:\l143:                                              \l  %144 = phi float [ 0.000000e+00, %65 ], [ %126, %125 ], [ %139, %129 ]\l  %145 = fcmp contract oeq float %144, 0.000000e+00\l  br i1 %145, label %146, label %249\l|{<s0>T|<s1>F}}"];
	Node0x45e7260:s0 -> Node0x45eba10;
	Node0x45e7260:s1 -> Node0x45eba60;
	Node0x45eba10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%146:\l146:                                              \l  br i1 %25, label %147, label %363\l|{<s0>T|<s1>F}}"];
	Node0x45eba10:s0 -> Node0x45ebb60;
	Node0x45eba10:s1 -> Node0x45e5960;
	Node0x45ebb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%147:\l147:                                              \l  %148 = sext i32 %44 to i64\l  %149 = getelementptr float, float addrspace(1)* %0, i64 %148\l  br i1 %40, label %336, label %220\l|{<s0>T|<s1>F}}"];
	Node0x45ebb60:s0 -> Node0x45ebd70;
	Node0x45ebb60:s1 -> Node0x45ebdc0;
	Node0x45e81d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%150:\l150:                                              \l  %151 = phi float [ %216, %150 ], [ 0.000000e+00, %68 ]\l  %152 = phi i32 [ %217, %150 ], [ 0, %68 ]\l  %153 = phi i32 [ %218, %150 ], [ 0, %68 ]\l  %154 = mul nsw i32 %152, %2\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr float, float addrspace(1)* %70, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !16\l  %158 = fsub contract float %157, %67\l  %159 = fmul contract float %158, %158\l  %160 = fadd contract float %151, %159\l  %161 = or i32 %152, 1\l  %162 = mul nsw i32 %161, %2\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr float, float addrspace(1)* %70, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !16\l  %166 = fsub contract float %165, %67\l  %167 = fmul contract float %166, %166\l  %168 = fadd contract float %160, %167\l  %169 = or i32 %152, 2\l  %170 = mul nsw i32 %169, %2\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr float, float addrspace(1)* %70, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !16\l  %174 = fsub contract float %173, %67\l  %175 = fmul contract float %174, %174\l  %176 = fadd contract float %168, %175\l  %177 = or i32 %152, 3\l  %178 = mul nsw i32 %177, %2\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr float, float addrspace(1)* %70, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !16\l  %182 = fsub contract float %181, %67\l  %183 = fmul contract float %182, %182\l  %184 = fadd contract float %176, %183\l  %185 = or i32 %152, 4\l  %186 = mul nsw i32 %185, %2\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr float, float addrspace(1)* %70, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !16\l  %190 = fsub contract float %189, %67\l  %191 = fmul contract float %190, %190\l  %192 = fadd contract float %184, %191\l  %193 = or i32 %152, 5\l  %194 = mul nsw i32 %193, %2\l  %195 = sext i32 %194 to i64\l  %196 = getelementptr float, float addrspace(1)* %70, i64 %195\l  %197 = load float, float addrspace(1)* %196, align 4, !tbaa !16\l  %198 = fsub contract float %197, %67\l  %199 = fmul contract float %198, %198\l  %200 = fadd contract float %192, %199\l  %201 = or i32 %152, 6\l  %202 = mul nsw i32 %201, %2\l  %203 = sext i32 %202 to i64\l  %204 = getelementptr float, float addrspace(1)* %70, i64 %203\l  %205 = load float, float addrspace(1)* %204, align 4, !tbaa !16\l  %206 = fsub contract float %205, %67\l  %207 = fmul contract float %206, %206\l  %208 = fadd contract float %200, %207\l  %209 = or i32 %152, 7\l  %210 = mul nsw i32 %209, %2\l  %211 = sext i32 %210 to i64\l  %212 = getelementptr float, float addrspace(1)* %70, i64 %211\l  %213 = load float, float addrspace(1)* %212, align 4, !tbaa !16\l  %214 = fsub contract float %213, %67\l  %215 = fmul contract float %214, %214\l  %216 = fadd contract float %208, %215\l  %217 = add nuw nsw i32 %152, 8\l  %218 = add i32 %153, 8\l  %219 = icmp eq i32 %218, %33\l  br i1 %219, label %125, label %150, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x45e81d0:s0 -> Node0x45e8180;
	Node0x45e81d0:s1 -> Node0x45e81d0;
	Node0x45ebdc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%220:\l220:                                              \l  %221 = phi i32 [ %246, %220 ], [ 0, %147 ]\l  %222 = phi i32 [ %247, %220 ], [ 0, %147 ]\l  %223 = mul nsw i32 %221, %2\l  %224 = sext i32 %223 to i64\l  %225 = getelementptr float, float addrspace(1)* %149, i64 %224\l  %226 = load float, float addrspace(1)* %225, align 4, !tbaa !16\l  %227 = fdiv contract float %226, 2.550000e+02\l  store float %227, float addrspace(1)* %225, align 4, !tbaa !16\l  %228 = or i32 %221, 1\l  %229 = mul nsw i32 %228, %2\l  %230 = sext i32 %229 to i64\l  %231 = getelementptr float, float addrspace(1)* %149, i64 %230\l  %232 = load float, float addrspace(1)* %231, align 4, !tbaa !16\l  %233 = fdiv contract float %232, 2.550000e+02\l  store float %233, float addrspace(1)* %231, align 4, !tbaa !16\l  %234 = or i32 %221, 2\l  %235 = mul nsw i32 %234, %2\l  %236 = sext i32 %235 to i64\l  %237 = getelementptr float, float addrspace(1)* %149, i64 %236\l  %238 = load float, float addrspace(1)* %237, align 4, !tbaa !16\l  %239 = fdiv contract float %238, 2.550000e+02\l  store float %239, float addrspace(1)* %237, align 4, !tbaa !16\l  %240 = or i32 %221, 3\l  %241 = mul nsw i32 %240, %2\l  %242 = sext i32 %241 to i64\l  %243 = getelementptr float, float addrspace(1)* %149, i64 %242\l  %244 = load float, float addrspace(1)* %243, align 4, !tbaa !16\l  %245 = fdiv contract float %244, 2.550000e+02\l  store float %245, float addrspace(1)* %243, align 4, !tbaa !16\l  %246 = add nuw nsw i32 %221, 4\l  %247 = add i32 %222, 4\l  %248 = icmp eq i32 %247, %41\l  br i1 %248, label %336, label %220, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x45ebdc0:s0 -> Node0x45ebd70;
	Node0x45ebdc0:s1 -> Node0x45ebdc0;
	Node0x45eba60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%249:\l249:                                              \l  %250 = fcmp olt float %144, 0x39F0000000000000\l  %251 = select i1 %250, float 0x41F0000000000000, float 1.000000e+00\l  %252 = fmul float %144, %251\l  %253 = tail call float @llvm.sqrt.f32(float %252)\l  %254 = bitcast float %253 to i32\l  %255 = add nsw i32 %254, -1\l  %256 = bitcast i32 %255 to float\l  %257 = add nsw i32 %254, 1\l  %258 = bitcast i32 %257 to float\l  %259 = tail call i1 @llvm.amdgcn.class.f32(float %252, i32 608)\l  %260 = select i1 %250, float 0x3EF0000000000000, float 1.000000e+00\l  %261 = fneg float %258\l  %262 = tail call float @llvm.fma.f32(float %261, float %253, float %252)\l  %263 = fcmp ogt float %262, 0.000000e+00\l  %264 = fneg float %256\l  %265 = tail call float @llvm.fma.f32(float %264, float %253, float %252)\l  %266 = fcmp ole float %265, 0.000000e+00\l  %267 = select i1 %266, float %256, float %253\l  %268 = select i1 %263, float %258, float %267\l  %269 = fmul float %260, %268\l  %270 = select i1 %259, float %252, float %269\l  %271 = fdiv contract float 1.000000e+00, %270\l  br i1 %25, label %272, label %363\l|{<s0>T|<s1>F}}"];
	Node0x45eba60:s0 -> Node0x45f1410;
	Node0x45eba60:s1 -> Node0x45e5960;
	Node0x45f1410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%272:\l272:                                              \l  %273 = sext i32 %44 to i64\l  %274 = getelementptr float, float addrspace(1)* %0, i64 %273\l  br i1 %36, label %349, label %275\l|{<s0>T|<s1>F}}"];
	Node0x45f1410:s0 -> Node0x45f1660;
	Node0x45f1410:s1 -> Node0x45f16b0;
	Node0x45f16b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%275:\l275:                                              \l  %276 = phi i32 [ %333, %275 ], [ 0, %272 ]\l  %277 = phi i32 [ %334, %275 ], [ 0, %272 ]\l  %278 = mul nsw i32 %276, %2\l  %279 = sext i32 %278 to i64\l  %280 = getelementptr float, float addrspace(1)* %274, i64 %279\l  %281 = load float, float addrspace(1)* %280, align 4, !tbaa !16\l  %282 = fsub contract float %281, %67\l  %283 = fmul contract float %271, %282\l  store float %283, float addrspace(1)* %280, align 4, !tbaa !16\l  %284 = or i32 %276, 1\l  %285 = mul nsw i32 %284, %2\l  %286 = sext i32 %285 to i64\l  %287 = getelementptr float, float addrspace(1)* %274, i64 %286\l  %288 = load float, float addrspace(1)* %287, align 4, !tbaa !16\l  %289 = fsub contract float %288, %67\l  %290 = fmul contract float %271, %289\l  store float %290, float addrspace(1)* %287, align 4, !tbaa !16\l  %291 = or i32 %276, 2\l  %292 = mul nsw i32 %291, %2\l  %293 = sext i32 %292 to i64\l  %294 = getelementptr float, float addrspace(1)* %274, i64 %293\l  %295 = load float, float addrspace(1)* %294, align 4, !tbaa !16\l  %296 = fsub contract float %295, %67\l  %297 = fmul contract float %271, %296\l  store float %297, float addrspace(1)* %294, align 4, !tbaa !16\l  %298 = or i32 %276, 3\l  %299 = mul nsw i32 %298, %2\l  %300 = sext i32 %299 to i64\l  %301 = getelementptr float, float addrspace(1)* %274, i64 %300\l  %302 = load float, float addrspace(1)* %301, align 4, !tbaa !16\l  %303 = fsub contract float %302, %67\l  %304 = fmul contract float %271, %303\l  store float %304, float addrspace(1)* %301, align 4, !tbaa !16\l  %305 = or i32 %276, 4\l  %306 = mul nsw i32 %305, %2\l  %307 = sext i32 %306 to i64\l  %308 = getelementptr float, float addrspace(1)* %274, i64 %307\l  %309 = load float, float addrspace(1)* %308, align 4, !tbaa !16\l  %310 = fsub contract float %309, %67\l  %311 = fmul contract float %271, %310\l  store float %311, float addrspace(1)* %308, align 4, !tbaa !16\l  %312 = or i32 %276, 5\l  %313 = mul nsw i32 %312, %2\l  %314 = sext i32 %313 to i64\l  %315 = getelementptr float, float addrspace(1)* %274, i64 %314\l  %316 = load float, float addrspace(1)* %315, align 4, !tbaa !16\l  %317 = fsub contract float %316, %67\l  %318 = fmul contract float %271, %317\l  store float %318, float addrspace(1)* %315, align 4, !tbaa !16\l  %319 = or i32 %276, 6\l  %320 = mul nsw i32 %319, %2\l  %321 = sext i32 %320 to i64\l  %322 = getelementptr float, float addrspace(1)* %274, i64 %321\l  %323 = load float, float addrspace(1)* %322, align 4, !tbaa !16\l  %324 = fsub contract float %323, %67\l  %325 = fmul contract float %271, %324\l  store float %325, float addrspace(1)* %322, align 4, !tbaa !16\l  %326 = or i32 %276, 7\l  %327 = mul nsw i32 %326, %2\l  %328 = sext i32 %327 to i64\l  %329 = getelementptr float, float addrspace(1)* %274, i64 %328\l  %330 = load float, float addrspace(1)* %329, align 4, !tbaa !16\l  %331 = fsub contract float %330, %67\l  %332 = fmul contract float %271, %331\l  store float %332, float addrspace(1)* %329, align 4, !tbaa !16\l  %333 = add nuw nsw i32 %276, 8\l  %334 = add i32 %277, 8\l  %335 = icmp eq i32 %334, %37\l  br i1 %335, label %349, label %275, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x45f16b0:s0 -> Node0x45f1660;
	Node0x45f16b0:s1 -> Node0x45f16b0;
	Node0x45ebd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%336:\l336:                                              \l  %337 = phi i32 [ 0, %147 ], [ %246, %220 ]\l  br i1 %42, label %363, label %338\l|{<s0>T|<s1>F}}"];
	Node0x45ebd70:s0 -> Node0x45e5960;
	Node0x45ebd70:s1 -> Node0x45e31a0;
	Node0x45e31a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%338:\l338:                                              \l  %339 = phi i32 [ %346, %338 ], [ %337, %336 ]\l  %340 = phi i32 [ %347, %338 ], [ 0, %336 ]\l  %341 = mul nsw i32 %339, %2\l  %342 = sext i32 %341 to i64\l  %343 = getelementptr float, float addrspace(1)* %149, i64 %342\l  %344 = load float, float addrspace(1)* %343, align 4, !tbaa !16\l  %345 = fdiv contract float %344, 2.550000e+02\l  store float %345, float addrspace(1)* %343, align 4, !tbaa !16\l  %346 = add nuw nsw i32 %339, 1\l  %347 = add i32 %340, 1\l  %348 = icmp eq i32 %347, %39\l  br i1 %348, label %363, label %338, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x45e31a0:s0 -> Node0x45e5960;
	Node0x45e31a0:s1 -> Node0x45e31a0;
	Node0x45f1660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%349:\l349:                                              \l  %350 = phi i32 [ 0, %272 ], [ %333, %275 ]\l  br i1 %38, label %363, label %351\l|{<s0>T|<s1>F}}"];
	Node0x45f1660:s0 -> Node0x45e5960;
	Node0x45f1660:s1 -> Node0x45f5390;
	Node0x45f5390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%351:\l351:                                              \l  %352 = phi i32 [ %360, %351 ], [ %350, %349 ]\l  %353 = phi i32 [ %361, %351 ], [ 0, %349 ]\l  %354 = mul nsw i32 %352, %2\l  %355 = sext i32 %354 to i64\l  %356 = getelementptr float, float addrspace(1)* %274, i64 %355\l  %357 = load float, float addrspace(1)* %356, align 4, !tbaa !16\l  %358 = fsub contract float %357, %67\l  %359 = fmul contract float %271, %358\l  store float %359, float addrspace(1)* %356, align 4, !tbaa !16\l  %360 = add nuw nsw i32 %352, 1\l  %361 = add i32 %353, 1\l  %362 = icmp eq i32 %361, %35\l  br i1 %362, label %363, label %351, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x45f5390:s0 -> Node0x45e5960;
	Node0x45f5390:s1 -> Node0x45f5390;
	Node0x45e5960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%363:\l363:                                              \l  %364 = add nsw i32 %44, %19\l  %365 = icmp slt i32 %364, %2\l  br i1 %365, label %43, label %48, !llvm.loop !30\l|{<s0>T|<s1>F}}"];
	Node0x45e5960:s0 -> Node0x45e5870;
	Node0x45e5960:s1 -> Node0x45e4ac0;
}
