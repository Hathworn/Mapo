digraph "CFG for '_Z13matMultiply1DPfS_S_i' function" {
	label="CFG for '_Z13matMultiply1DPfS_S_i' function";

	Node0x4dd51a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%4:\l  %5 = alloca [2048 x float], align 16, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = add i32 %13, %6\l  %15 = icmp slt i32 %14, %3\l  br i1 %15, label %16, label %215\l|{<s0>T|<s1>F}}"];
	Node0x4dd51a0:s0 -> Node0x4dd51f0;
	Node0x4dd51a0:s1 -> Node0x4dd77f0;
	Node0x4dd51f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%16:\l16:                                               \l  %17 = bitcast [2048 x float] addrspace(5)* %5 to i8 addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 8192, i8 addrspace(5)* %17) #3\l  %18 = icmp eq i32 %3, 0\l  br i1 %18, label %101, label %19\l|{<s0>T|<s1>F}}"];
	Node0x4dd51f0:s0 -> Node0x4dd7c20;
	Node0x4dd51f0:s1 -> Node0x4dd7c70;
	Node0x4dd7c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%19:\l19:                                               \l  %20 = mul nsw i32 %14, %3\l  %21 = and i32 %3, 7\l  %22 = icmp ult i32 %3, 8\l  br i1 %22, label %25, label %23\l|{<s0>T|<s1>F}}"];
	Node0x4dd7c70:s0 -> Node0x4dd7fc0;
	Node0x4dd7c70:s1 -> Node0x4dd8010;
	Node0x4dd8010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%23:\l23:                                               \l  %24 = and i32 %3, -8\l  br label %46\l}"];
	Node0x4dd8010 -> Node0x4dd8210;
	Node0x4dd7fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%25:\l25:                                               \l  %26 = phi i32 [ 0, %19 ], [ %96, %46 ]\l  %27 = icmp eq i32 %21, 0\l  br i1 %27, label %39, label %28\l|{<s0>T|<s1>F}}"];
	Node0x4dd7fc0:s0 -> Node0x4dd8440;
	Node0x4dd7fc0:s1 -> Node0x4dd84d0;
	Node0x4dd84d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%28:\l28:                                               \l  %29 = phi i32 [ %36, %28 ], [ %26, %25 ]\l  %30 = phi i32 [ %37, %28 ], [ 0, %25 ]\l  %31 = add i32 %29, %20\l  %32 = zext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %35 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %29\l  store float %34, float addrspace(5)* %35, align 4, !tbaa !7\l  %36 = add nuw i32 %29, 1\l  %37 = add i32 %30, 1\l  %38 = icmp eq i32 %37, %21\l  br i1 %38, label %39, label %28, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4dd84d0:s0 -> Node0x4dd8440;
	Node0x4dd84d0:s1 -> Node0x4dd84d0;
	Node0x4dd8440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%39:\l39:                                               \l  br i1 %18, label %101, label %40\l|{<s0>T|<s1>F}}"];
	Node0x4dd8440:s0 -> Node0x4dd7c20;
	Node0x4dd8440:s1 -> Node0x4dd9d60;
	Node0x4dd9d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%40:\l40:                                               \l  %41 = mul nsw i32 %14, %3\l  %42 = and i32 %3, 7\l  %43 = icmp ult i32 %3, 8\l  %44 = and i32 %3, -8\l  %45 = icmp eq i32 %42, 0\l  br label %99\l}"];
	Node0x4dd9d60 -> Node0x4dda130;
	Node0x4dd8210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%46:\l46:                                               \l  %47 = phi i32 [ 0, %23 ], [ %96, %46 ]\l  %48 = phi i32 [ 0, %23 ], [ %97, %46 ]\l  %49 = add i32 %47, %20\l  %50 = zext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %53 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %47\l  store float %52, float addrspace(5)* %53, align 16, !tbaa !7\l  %54 = or i32 %47, 1\l  %55 = add i32 %54, %20\l  %56 = zext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %1, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %59 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %54\l  store float %58, float addrspace(5)* %59, align 4, !tbaa !7\l  %60 = or i32 %47, 2\l  %61 = add i32 %60, %20\l  %62 = zext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %1, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %65 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %60\l  store float %64, float addrspace(5)* %65, align 8, !tbaa !7\l  %66 = or i32 %47, 3\l  %67 = add i32 %66, %20\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %66\l  store float %70, float addrspace(5)* %71, align 4, !tbaa !7\l  %72 = or i32 %47, 4\l  %73 = add i32 %72, %20\l  %74 = zext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %77 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %72\l  store float %76, float addrspace(5)* %77, align 16, !tbaa !7\l  %78 = or i32 %47, 5\l  %79 = add i32 %78, %20\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %83 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %78\l  store float %82, float addrspace(5)* %83, align 4, !tbaa !7\l  %84 = or i32 %47, 6\l  %85 = add i32 %84, %20\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %89 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %84\l  store float %88, float addrspace(5)* %89, align 8, !tbaa !7\l  %90 = or i32 %47, 7\l  %91 = add i32 %90, %20\l  %92 = zext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %1, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %95 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %90\l  store float %94, float addrspace(5)* %95, align 4, !tbaa !7\l  %96 = add nuw i32 %47, 8\l  %97 = add i32 %48, 8\l  %98 = icmp eq i32 %97, %24\l  br i1 %98, label %25, label %46, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4dd8210:s0 -> Node0x4dd7fc0;
	Node0x4dd8210:s1 -> Node0x4dd8210;
	Node0x4dda130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%99:\l99:                                               \l  %100 = phi i32 [ 0, %40 ], [ %127, %122 ]\l  br i1 %43, label %102, label %129\l|{<s0>T|<s1>F}}"];
	Node0x4dda130:s0 -> Node0x4ddcb90;
	Node0x4dda130:s1 -> Node0x4ddcc20;
	Node0x4dd7c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%101:\l101:                                              \l  call void @llvm.lifetime.end.p5i8(i64 8192, i8 addrspace(5)* %17) #3\l  br label %215\l}"];
	Node0x4dd7c20 -> Node0x4dd77f0;
	Node0x4ddcb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%102:\l102:                                              \l  %103 = phi float [ undef, %99 ], [ %211, %129 ]\l  %104 = phi i32 [ 0, %99 ], [ %212, %129 ]\l  %105 = phi float [ 0.000000e+00, %99 ], [ %211, %129 ]\l  br i1 %45, label %122, label %106\l|{<s0>T|<s1>F}}"];
	Node0x4ddcb90:s0 -> Node0x4ddca50;
	Node0x4ddcb90:s1 -> Node0x4dddf70;
	Node0x4dddf70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ %119, %106 ], [ %104, %102 ]\l  %108 = phi float [ %118, %106 ], [ %105, %102 ]\l  %109 = phi i32 [ %120, %106 ], [ 0, %102 ]\l  %110 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %107\l  %111 = load float, float addrspace(5)* %110, align 4, !tbaa !7\l  %112 = mul i32 %107, %3\l  %113 = add i32 %112, %100\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %1, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7\l  %117 = fmul contract float %111, %116\l  %118 = fadd contract float %108, %117\l  %119 = add nuw i32 %107, 1\l  %120 = add i32 %109, 1\l  %121 = icmp eq i32 %120, %42\l  br i1 %121, label %122, label %106, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4dddf70:s0 -> Node0x4ddca50;
	Node0x4dddf70:s1 -> Node0x4dddf70;
	Node0x4ddca50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%122:\l122:                                              \l  %123 = phi float [ %103, %102 ], [ %118, %106 ]\l  %124 = add i32 %100, %41\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %2, i64 %125\l  store float %123, float addrspace(1)* %126, align 4, !tbaa !7\l  %127 = add nuw i32 %100, 1\l  %128 = icmp eq i32 %127, %3\l  br i1 %128, label %101, label %99, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4ddca50:s0 -> Node0x4dd7c20;
	Node0x4ddca50:s1 -> Node0x4dda130;
	Node0x4ddcc20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%129:\l129:                                              \l  %130 = phi i32 [ %212, %129 ], [ 0, %99 ]\l  %131 = phi float [ %211, %129 ], [ 0.000000e+00, %99 ]\l  %132 = phi i32 [ %213, %129 ], [ 0, %99 ]\l  %133 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %130\l  %134 = load float, float addrspace(5)* %133, align 16, !tbaa !7\l  %135 = mul i32 %130, %3\l  %136 = add i32 %135, %100\l  %137 = zext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7\l  %140 = fmul contract float %134, %139\l  %141 = fadd contract float %131, %140\l  %142 = or i32 %130, 1\l  %143 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %142\l  %144 = load float, float addrspace(5)* %143, align 4, !tbaa !7\l  %145 = mul i32 %142, %3\l  %146 = add i32 %145, %100\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7\l  %150 = fmul contract float %144, %149\l  %151 = fadd contract float %141, %150\l  %152 = or i32 %130, 2\l  %153 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %152\l  %154 = load float, float addrspace(5)* %153, align 8, !tbaa !7\l  %155 = mul i32 %152, %3\l  %156 = add i32 %155, %100\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %1, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !7\l  %160 = fmul contract float %154, %159\l  %161 = fadd contract float %151, %160\l  %162 = or i32 %130, 3\l  %163 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %162\l  %164 = load float, float addrspace(5)* %163, align 4, !tbaa !7\l  %165 = mul i32 %162, %3\l  %166 = add i32 %165, %100\l  %167 = zext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %1, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !7\l  %170 = fmul contract float %164, %169\l  %171 = fadd contract float %161, %170\l  %172 = or i32 %130, 4\l  %173 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %172\l  %174 = load float, float addrspace(5)* %173, align 16, !tbaa !7\l  %175 = mul i32 %172, %3\l  %176 = add i32 %175, %100\l  %177 = zext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %1, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !7\l  %180 = fmul contract float %174, %179\l  %181 = fadd contract float %171, %180\l  %182 = or i32 %130, 5\l  %183 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %182\l  %184 = load float, float addrspace(5)* %183, align 4, !tbaa !7\l  %185 = mul i32 %182, %3\l  %186 = add i32 %185, %100\l  %187 = zext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %1, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !7\l  %190 = fmul contract float %184, %189\l  %191 = fadd contract float %181, %190\l  %192 = or i32 %130, 6\l  %193 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %192\l  %194 = load float, float addrspace(5)* %193, align 8, !tbaa !7\l  %195 = mul i32 %192, %3\l  %196 = add i32 %195, %100\l  %197 = zext i32 %196 to i64\l  %198 = getelementptr inbounds float, float addrspace(1)* %1, i64 %197\l  %199 = load float, float addrspace(1)* %198, align 4, !tbaa !7\l  %200 = fmul contract float %194, %199\l  %201 = fadd contract float %191, %200\l  %202 = or i32 %130, 7\l  %203 = getelementptr inbounds [2048 x float], [2048 x float] addrspace(5)*\l... %5, i32 0, i32 %202\l  %204 = load float, float addrspace(5)* %203, align 4, !tbaa !7\l  %205 = mul i32 %202, %3\l  %206 = add i32 %205, %100\l  %207 = zext i32 %206 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %1, i64 %207\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !7\l  %210 = fmul contract float %204, %209\l  %211 = fadd contract float %201, %210\l  %212 = add nuw i32 %130, 8\l  %213 = add i32 %132, 8\l  %214 = icmp eq i32 %213, %44\l  br i1 %214, label %102, label %129, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4ddcc20:s0 -> Node0x4ddcb90;
	Node0x4ddcc20:s1 -> Node0x4ddcc20;
	Node0x4dd77f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%215:\l215:                                              \l  ret void\l}"];
}
