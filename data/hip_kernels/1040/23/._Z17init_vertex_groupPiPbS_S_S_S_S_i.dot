digraph "CFG for '_Z17init_vertex_groupPiPbS_S_S_S_S_i' function" {
	label="CFG for '_Z17init_vertex_groupPiPbS_S_S_S_S_i' function";

	Node0x4b27880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = icmp slt i32 %9, %7\l  br i1 %10, label %11, label %143\l|{<s0>T|<s1>F}}"];
	Node0x4b27880:s0 -> Node0x4b27b40;
	Node0x4b27880:s1 -> Node0x4b27bd0;
	Node0x4b27b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%11:\l11:                                               \l  %12 = sext i32 %9 to i64\l  %13 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %12\l  %14 = load i32, i32 addrspace(1)* %13, align 4, !tbaa !4, !amdgpu.noclobber\l... !8\l  %15 = sext i32 %14 to i64\l  %16 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %15\l  %17 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %12\l  %18 = load i32, i32 addrspace(1)* %17, align 4, !tbaa !4, !amdgpu.noclobber\l... !8\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %19\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %12\l  %22 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !4, !amdgpu.noclobber\l... !8\l  %23 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %12\l  %24 = load i32, i32 addrspace(1)* %23, align 4, !tbaa !4, !amdgpu.noclobber\l... !8\l  %25 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %12\l  %26 = load i32, i32 addrspace(1)* %25, align 4, !tbaa !4, !amdgpu.noclobber\l... !8\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %28 = icmp slt i32 %27, %24\l  br i1 %28, label %29, label %143\l|{<s0>T|<s1>F}}"];
	Node0x4b27b40:s0 -> Node0x4b2a3c0;
	Node0x4b27b40:s1 -> Node0x4b27bd0;
	Node0x4b2a3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%29:\l29:                                               \l  %30 = icmp sgt i32 %22, 0\l  %31 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %32 = getelementptr i8, i8 addrspace(4)* %31, i64 4\l  %33 = bitcast i8 addrspace(4)* %32 to i16 addrspace(4)*\l  %34 = load i16, i16 addrspace(4)* %33, align 4, !range !10, !invariant.load\l... !8\l  %35 = zext i16 %34 to i32\l  %36 = and i32 %22, 7\l  %37 = icmp ult i32 %22, 8\l  %38 = and i32 %22, -8\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x4b2a3c0 -> Node0x4b2b530;
	Node0x4b2b530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%40:\l40:                                               \l  %41 = phi i32 [ %27, %29 ], [ %70, %69 ]\l  br i1 %30, label %42, label %69\l|{<s0>T|<s1>F}}"];
	Node0x4b2b530:s0 -> Node0x4b2b7a0;
	Node0x4b2b530:s1 -> Node0x4b2b660;
	Node0x4b2b7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%42:\l42:                                               \l  %43 = mul nsw i32 %41, %26\l  %44 = sext i32 %41 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %16, i64 %44\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !4\l  br i1 %37, label %47, label %72\l|{<s0>T|<s1>F}}"];
	Node0x4b2b7a0:s0 -> Node0x4b2bb20;
	Node0x4b2b7a0:s1 -> Node0x4b2bb70;
	Node0x4b2bb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%47:\l47:                                               \l  %48 = phi i32 [ undef, %42 ], [ %139, %72 ]\l  %49 = phi i32 [ %46, %42 ], [ %139, %72 ]\l  %50 = phi i32 [ %43, %42 ], [ %140, %72 ]\l  %51 = phi i32 [ 0, %42 ], [ %137, %72 ]\l  br i1 %39, label %67, label %52\l|{<s0>T|<s1>F}}"];
	Node0x4b2bb20:s0 -> Node0x4b2c460;
	Node0x4b2bb20:s1 -> Node0x4b2c4f0;
	Node0x4b2c4f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%52:\l52:                                               \l  %53 = phi i32 [ %63, %52 ], [ %49, %47 ]\l  %54 = phi i32 [ %64, %52 ], [ %50, %47 ]\l  %55 = phi i32 [ %61, %52 ], [ %51, %47 ]\l  %56 = phi i32 [ %65, %52 ], [ 0, %47 ]\l  %57 = sext i32 %54 to i64\l  %58 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %57\l  %59 = load i8, i8 addrspace(1)* %58, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %60 = zext i8 %59 to i32\l  %61 = add nuw nsw i32 %55, 1\l  %62 = mul nuw nsw i32 %61, %60\l  %63 = add nsw i32 %62, %53\l  %64 = add nsw i32 %54, 1\l  %65 = add i32 %56, 1\l  %66 = icmp eq i32 %65, %36\l  br i1 %66, label %67, label %52, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4b2c4f0:s0 -> Node0x4b2c460;
	Node0x4b2c4f0:s1 -> Node0x4b2c4f0;
	Node0x4b2c460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%67:\l67:                                               \l  %68 = phi i32 [ %48, %47 ], [ %63, %52 ]\l  store i32 %68, i32 addrspace(1)* %45, align 4, !tbaa !4\l  br label %69\l}"];
	Node0x4b2c460 -> Node0x4b2b660;
	Node0x4b2b660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%69:\l69:                                               \l  %70 = add i32 %41, %35\l  %71 = icmp slt i32 %70, %24\l  br i1 %71, label %40, label %143, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4b2b660:s0 -> Node0x4b2b530;
	Node0x4b2b660:s1 -> Node0x4b27bd0;
	Node0x4b2bb70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%72:\l72:                                               \l  %73 = phi i32 [ %139, %72 ], [ %46, %42 ]\l  %74 = phi i32 [ %140, %72 ], [ %43, %42 ]\l  %75 = phi i32 [ %137, %72 ], [ 0, %42 ]\l  %76 = phi i32 [ %141, %72 ], [ 0, %42 ]\l  %77 = sext i32 %74 to i64\l  %78 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %77\l  %79 = load i8, i8 addrspace(1)* %78, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %80 = zext i8 %79 to i32\l  %81 = or i32 %75, 1\l  %82 = mul nuw nsw i32 %81, %80\l  %83 = add nsw i32 %82, %73\l  %84 = add nsw i32 %74, 1\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %85\l  %87 = load i8, i8 addrspace(1)* %86, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %88 = zext i8 %87 to i32\l  %89 = or i32 %75, 2\l  %90 = mul nuw nsw i32 %89, %88\l  %91 = add nsw i32 %90, %83\l  %92 = add nsw i32 %74, 2\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %93\l  %95 = load i8, i8 addrspace(1)* %94, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %96 = zext i8 %95 to i32\l  %97 = or i32 %75, 3\l  %98 = mul nuw nsw i32 %97, %96\l  %99 = add nsw i32 %98, %91\l  %100 = add nsw i32 %74, 3\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %101\l  %103 = load i8, i8 addrspace(1)* %102, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %104 = zext i8 %103 to i32\l  %105 = or i32 %75, 4\l  %106 = mul nuw nsw i32 %105, %104\l  %107 = add nsw i32 %106, %99\l  %108 = add nsw i32 %74, 4\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %109\l  %111 = load i8, i8 addrspace(1)* %110, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %112 = zext i8 %111 to i32\l  %113 = or i32 %75, 5\l  %114 = mul nuw nsw i32 %113, %112\l  %115 = add nsw i32 %114, %107\l  %116 = add nsw i32 %74, 5\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %117\l  %119 = load i8, i8 addrspace(1)* %118, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %120 = zext i8 %119 to i32\l  %121 = or i32 %75, 6\l  %122 = mul nuw nsw i32 %121, %120\l  %123 = add nsw i32 %122, %115\l  %124 = add nsw i32 %74, 6\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %125\l  %127 = load i8, i8 addrspace(1)* %126, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %128 = zext i8 %127 to i32\l  %129 = or i32 %75, 7\l  %130 = mul nuw nsw i32 %129, %128\l  %131 = add nsw i32 %130, %123\l  %132 = add nsw i32 %74, 7\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds i8, i8 addrspace(1)* %20, i64 %133\l  %135 = load i8, i8 addrspace(1)* %134, align 1, !tbaa !11, !range !13,\l... !amdgpu.noclobber !8\l  %136 = zext i8 %135 to i32\l  %137 = add nuw nsw i32 %75, 8\l  %138 = mul nuw nsw i32 %137, %136\l  %139 = add nsw i32 %138, %131\l  %140 = add nsw i32 %74, 8\l  %141 = add i32 %76, 8\l  %142 = icmp eq i32 %141, %38\l  br i1 %142, label %47, label %72, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4b2bb70:s0 -> Node0x4b2bb20;
	Node0x4b2bb70:s1 -> Node0x4b2bb70;
	Node0x4b27bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%143:\l143:                                              \l  ret void\l}"];
}
