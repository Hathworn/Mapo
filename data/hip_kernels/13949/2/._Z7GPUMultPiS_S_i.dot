digraph "CFG for '_Z7GPUMultPiS_S_i' function" {
	label="CFG for '_Z7GPUMultPiS_S_i' function";

	Node0x4da35a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %7 = icmp slt i32 %5, %3\l  %8 = icmp slt i32 %6, %3\l  %9 = select i1 %7, i1 %8, i1 false\l  br i1 %9, label %10, label %147\l|{<s0>T|<s1>F}}"];
	Node0x4da35a0:s0 -> Node0x4da53b0;
	Node0x4da35a0:s1 -> Node0x4da5440;
	Node0x4da53b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%10:\l10:                                               \l  %11 = mul nsw i32 %6, %3\l  %12 = add i32 %3, -1\l  %13 = and i32 %3, 7\l  %14 = icmp ult i32 %12, 7\l  br i1 %14, label %17, label %15\l|{<s0>T|<s1>F}}"];
	Node0x4da53b0:s0 -> Node0x4da5820;
	Node0x4da53b0:s1 -> Node0x4da5870;
	Node0x4da5870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%15:\l15:                                               \l  %16 = and i32 %3, -8\l  br label %45\l}"];
	Node0x4da5870 -> Node0x4da4c60;
	Node0x4da5820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = phi i32 [ undef, %10 ], [ %143, %45 ]\l  %19 = phi i32 [ 0, %10 ], [ %144, %45 ]\l  %20 = phi i32 [ 0, %10 ], [ %143, %45 ]\l  %21 = icmp eq i32 %13, 0\l  br i1 %21, label %40, label %22\l|{<s0>T|<s1>F}}"];
	Node0x4da5820:s0 -> Node0x4da6340;
	Node0x4da5820:s1 -> Node0x4da63d0;
	Node0x4da63d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = phi i32 [ %37, %22 ], [ %19, %17 ]\l  %24 = phi i32 [ %36, %22 ], [ %20, %17 ]\l  %25 = phi i32 [ %38, %22 ], [ 0, %17 ]\l  %26 = add nsw i32 %23, %11\l  %27 = sext i32 %26 to i64\l  %28 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %27\l  %29 = load i32, i32 addrspace(1)* %28, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %30 = mul nsw i32 %23, %3\l  %31 = add nsw i32 %30, %5\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %32\l  %34 = load i32, i32 addrspace(1)* %33, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %35 = mul nsw i32 %34, %29\l  %36 = add nsw i32 %35, %24\l  %37 = add nuw nsw i32 %23, 1\l  %38 = add i32 %25, 1\l  %39 = icmp eq i32 %38, %13\l  br i1 %39, label %40, label %22, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4da63d0:s0 -> Node0x4da6340;
	Node0x4da63d0:s1 -> Node0x4da63d0;
	Node0x4da6340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%40:\l40:                                               \l  %41 = phi i32 [ %18, %17 ], [ %36, %22 ]\l  %42 = add nsw i32 %11, %5\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %43\l  store i32 %41, i32 addrspace(1)* %44, align 4, !tbaa !5\l  br label %147\l}"];
	Node0x4da6340 -> Node0x4da5440;
	Node0x4da4c60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%45:\l45:                                               \l  %46 = phi i32 [ 0, %15 ], [ %144, %45 ]\l  %47 = phi i32 [ 0, %15 ], [ %143, %45 ]\l  %48 = phi i32 [ 0, %15 ], [ %145, %45 ]\l  %49 = add nsw i32 %46, %11\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %50\l  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %53 = mul nsw i32 %46, %3\l  %54 = add nsw i32 %53, %5\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %55\l  %57 = load i32, i32 addrspace(1)* %56, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %58 = mul nsw i32 %57, %52\l  %59 = add nsw i32 %58, %47\l  %60 = or i32 %46, 1\l  %61 = add nsw i32 %60, %11\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %62\l  %64 = load i32, i32 addrspace(1)* %63, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %65 = mul nsw i32 %60, %3\l  %66 = add nsw i32 %65, %5\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %67\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %70 = mul nsw i32 %69, %64\l  %71 = add nsw i32 %70, %59\l  %72 = or i32 %46, 2\l  %73 = add nsw i32 %72, %11\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %74\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %77 = mul nsw i32 %72, %3\l  %78 = add nsw i32 %77, %5\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %79\l  %81 = load i32, i32 addrspace(1)* %80, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %82 = mul nsw i32 %81, %76\l  %83 = add nsw i32 %82, %71\l  %84 = or i32 %46, 3\l  %85 = add nsw i32 %84, %11\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %86\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %89 = mul nsw i32 %84, %3\l  %90 = add nsw i32 %89, %5\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %91\l  %93 = load i32, i32 addrspace(1)* %92, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %94 = mul nsw i32 %93, %88\l  %95 = add nsw i32 %94, %83\l  %96 = or i32 %46, 4\l  %97 = add nsw i32 %96, %11\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %98\l  %100 = load i32, i32 addrspace(1)* %99, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %101 = mul nsw i32 %96, %3\l  %102 = add nsw i32 %101, %5\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %103\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %106 = mul nsw i32 %105, %100\l  %107 = add nsw i32 %106, %95\l  %108 = or i32 %46, 5\l  %109 = add nsw i32 %108, %11\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %110\l  %112 = load i32, i32 addrspace(1)* %111, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %113 = mul nsw i32 %108, %3\l  %114 = add nsw i32 %113, %5\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %115\l  %117 = load i32, i32 addrspace(1)* %116, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %118 = mul nsw i32 %117, %112\l  %119 = add nsw i32 %118, %107\l  %120 = or i32 %46, 6\l  %121 = add nsw i32 %120, %11\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %122\l  %124 = load i32, i32 addrspace(1)* %123, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %125 = mul nsw i32 %120, %3\l  %126 = add nsw i32 %125, %5\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %127\l  %129 = load i32, i32 addrspace(1)* %128, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %130 = mul nsw i32 %129, %124\l  %131 = add nsw i32 %130, %119\l  %132 = or i32 %46, 7\l  %133 = add nsw i32 %132, %11\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %134\l  %136 = load i32, i32 addrspace(1)* %135, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %137 = mul nsw i32 %132, %3\l  %138 = add nsw i32 %137, %5\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %139\l  %141 = load i32, i32 addrspace(1)* %140, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %142 = mul nsw i32 %141, %136\l  %143 = add nsw i32 %142, %131\l  %144 = add nuw nsw i32 %46, 8\l  %145 = add i32 %48, 8\l  %146 = icmp eq i32 %145, %16\l  br i1 %146, label %17, label %45, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4da4c60:s0 -> Node0x4da5820;
	Node0x4da4c60:s1 -> Node0x4da4c60;
	Node0x4da5440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%147:\l147:                                              \l  ret void\l}"];
}
