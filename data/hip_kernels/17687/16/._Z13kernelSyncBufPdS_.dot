digraph "CFG for '_Z13kernelSyncBufPdS_' function" {
	label="CFG for '_Z13kernelSyncBufPdS_' function";

	Node0x5017890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !4\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = bitcast i8 addrspace(4)* %8 to \<2 x i16\> addrspace(4)*\l  %11 = load \<2 x i16\>, \<2 x i16\> addrspace(4)* %10, align 4, !invariant.load\l... !5\l  %12 = zext \<2 x i16\> %11 to \<2 x i32\>\l  %13 = extractelement \<2 x i32\> %12, i64 0\l  %14 = mul i32 %7, %13\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 16\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 8, !tbaa !6\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %19 = getelementptr i8, i8 addrspace(4)* %6, i64 8\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !15, !invariant.load\l... !5\l  %22 = zext i16 %21 to i32\l  %23 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 20\l  %24 = bitcast i8 addrspace(4)* %23 to i32 addrspace(4)*\l  %25 = load i32, i32 addrspace(4)* %24, align 4, !tbaa !16\l  %26 = extractelement \<2 x i32\> %12, i64 1\l  %27 = udiv i32 %17, %26\l  %28 = mul i32 %27, %26\l  %29 = icmp ugt i32 %17, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = udiv i32 %25, %22\l  %33 = mul i32 %32, %22\l  %34 = icmp ugt i32 %25, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = add nsw i32 %14, %3\l  %38 = mul nuw nsw i32 %3, %26\l  %39 = add nuw nsw i32 %38, %4\l  %40 = mul nuw nsw i32 %39, %22\l  %41 = add nuw nsw i32 %40, %5\l  %42 = mul nsw i32 %31, %7\l  %43 = add nsw i32 %42, %9\l  %44 = mul nsw i32 %43, %36\l  %45 = add nsw i32 %44, %18\l  %46 = mul i32 %31, %37\l  %47 = add i32 %46, %9\l  %48 = mul i32 %47, %26\l  %49 = add i32 %48, %4\l  %50 = mul i32 %49, %36\l  %51 = add i32 %50, %18\l  %52 = mul i32 %51, %22\l  %53 = add i32 %52, %5\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %1, i64 %54\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !17,\l... !amdgpu.noclobber !5\l  %57 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)* @B,\l... i32 0, i32 %41\l  store double %56, double addrspace(3)* %57, align 8, !tbaa !17\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %58 = mul nuw nsw i32 %26, %13\l  %59 = mul nuw nsw i32 %58, %22\l  %60 = icmp ugt i32 %59, 1\l  br i1 %60, label %61, label %77\l|{<s0>T|<s1>F}}"];
	Node0x5017890:s0 -> Node0x501daa0;
	Node0x5017890:s1 -> Node0x501db30;
	Node0x501daa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = phi i32 [ %64, %74 ], [ 1, %2 ]\l  %63 = phi i32 [ %75, %74 ], [ %59, %2 ]\l  %64 = shl nsw i32 %62, 1\l  %65 = add i32 %64, -1\l  %66 = and i32 %65, %41\l  %67 = icmp eq i32 %66, 0\l  br i1 %67, label %68, label %74\l|{<s0>T|<s1>F}}"];
	Node0x501daa0:s0 -> Node0x501c010;
	Node0x501daa0:s1 -> Node0x501dca0;
	Node0x501c010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%68:\l68:                                               \l  %69 = load double, double addrspace(3)* %57, align 8, !tbaa !17\l  %70 = add nsw i32 %62, %41\l  %71 = getelementptr inbounds [0 x double], [0 x double] addrspace(3)* @B,\l... i32 0, i32 %70\l  %72 = load double, double addrspace(3)* %71, align 8, !tbaa !17\l  %73 = fadd contract double %69, %72\l  store double %73, double addrspace(3)* %57, align 8, !tbaa !17\l  br label %74\l}"];
	Node0x501c010 -> Node0x501dca0;
	Node0x501dca0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%74:\l74:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %75 = lshr i32 %63, 1\l  %76 = icmp ugt i32 %63, 3\l  br i1 %76, label %61, label %77, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x501dca0:s0 -> Node0x501daa0;
	Node0x501dca0:s1 -> Node0x501db30;
	Node0x501db30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%77:\l77:                                               \l  %78 = icmp eq i32 %41, 0\l  br i1 %78, label %79, label %85\l|{<s0>T|<s1>F}}"];
	Node0x501db30:s0 -> Node0x501ecd0;
	Node0x501db30:s1 -> Node0x501ed20;
	Node0x501ecd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%79:\l79:                                               \l  %80 = load double, double addrspace(3)* getelementptr inbounds ([0 x\l... double], [0 x double] addrspace(3)* @B, i32 0, i32 0), align 8, !tbaa !17\l  %81 = sitofp i32 %59 to double\l  %82 = fdiv contract double %80, %81\l  %83 = sext i32 %45 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %0, i64 %83\l  store double %82, double addrspace(1)* %84, align 8, !tbaa !17\l  br label %85\l}"];
	Node0x501ecd0 -> Node0x501ed20;
	Node0x501ed20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%85:\l85:                                               \l  ret void\l}"];
}
