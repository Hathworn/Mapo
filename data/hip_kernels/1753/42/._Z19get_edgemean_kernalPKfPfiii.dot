digraph "CFG for '_Z19get_edgemean_kernalPKfPfiii' function" {
	label="CFG for '_Z19get_edgemean_kernalPKfPfiii' function";

	Node0x55074d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%5:\l  %6 = mul i32 %3, %2\l  %7 = sext i32 %6 to i64\l  %8 = icmp eq i32 %4, 1\l  br i1 %8, label %9, label %151\l|{<s0>T|<s1>F}}"];
	Node0x55074d0:s0 -> Node0x5506730;
	Node0x55074d0:s1 -> Node0x5507d50;
	Node0x5506730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%9:\l9:                                                \l  %10 = icmp sgt i32 %2, 0\l  br i1 %10, label %11, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5506730:s0 -> Node0x5507f50;
	Node0x5506730:s1 -> Node0x5507fa0;
	Node0x5507f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%11:\l11:                                               \l  %12 = add nsw i32 %3, -1\l  %13 = mul nsw i32 %12, %2\l  %14 = and i32 %2, 7\l  %15 = icmp ult i32 %2, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x5507f50:s0 -> Node0x55083b0;
	Node0x5507f50:s1 -> Node0x5508400;
	Node0x5508400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%16:\l16:                                               \l  %17 = and i32 %2, -8\l  br label %48\l}"];
	Node0x5508400 -> Node0x5507cf0;
	Node0x55083b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%18:\l18:                                               \l  %19 = phi float [ undef, %11 ], [ %130, %48 ]\l  %20 = phi float [ 0.000000e+00, %11 ], [ %130, %48 ]\l  %21 = phi i32 [ 0, %11 ], [ %131, %48 ]\l  %22 = phi i32 [ %13, %11 ], [ %132, %48 ]\l  %23 = icmp eq i32 %14, 0\l  br i1 %23, label %41, label %24\l|{<s0>T|<s1>F}}"];
	Node0x55083b0:s0 -> Node0x5507fa0;
	Node0x55083b0:s1 -> Node0x55099f0;
	Node0x55099f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%24:\l24:                                               \l  %25 = phi float [ %36, %24 ], [ %20, %18 ]\l  %26 = phi i32 [ %37, %24 ], [ %21, %18 ]\l  %27 = phi i32 [ %38, %24 ], [ %22, %18 ]\l  %28 = phi i32 [ %39, %24 ], [ 0, %18 ]\l  %29 = zext i32 %26 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %32 = sext i32 %27 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %35 = fadd contract float %31, %34\l  %36 = fadd contract float %25, %35\l  %37 = add nuw nsw i32 %26, 1\l  %38 = add nsw i32 %27, 1\l  %39 = add i32 %28, 1\l  %40 = icmp eq i32 %39, %14\l  br i1 %40, label %41, label %24, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x55099f0:s0 -> Node0x5507fa0;
	Node0x55099f0:s1 -> Node0x55099f0;
	Node0x5507fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%41:\l41:                                               \l  %42 = phi float [ 0.000000e+00, %9 ], [ %19, %18 ], [ %36, %24 ]\l  %43 = icmp eq i32 %6, 0\l  br i1 %43, label %135, label %44\l|{<s0>T|<s1>F}}"];
	Node0x5507fa0:s0 -> Node0x550c2c0;
	Node0x5507fa0:s1 -> Node0x550c310;
	Node0x550c310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%44:\l44:                                               \l  %45 = add nsw i32 %2, -1\l  %46 = sext i32 %45 to i64\l  %47 = sext i32 %2 to i64\l  br label %138\l}"];
	Node0x550c310 -> Node0x550c580;
	Node0x5507cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%48:\l48:                                               \l  %49 = phi float [ 0.000000e+00, %16 ], [ %130, %48 ]\l  %50 = phi i32 [ 0, %16 ], [ %131, %48 ]\l  %51 = phi i32 [ %13, %16 ], [ %132, %48 ]\l  %52 = phi i32 [ 0, %16 ], [ %133, %48 ]\l  %53 = zext i32 %50 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %56 = sext i32 %51 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %59 = fadd contract float %55, %58\l  %60 = fadd contract float %49, %59\l  %61 = or i32 %50, 1\l  %62 = add nsw i32 %51, 1\l  %63 = zext i32 %61 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %66 = sext i32 %62 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %69 = fadd contract float %65, %68\l  %70 = fadd contract float %60, %69\l  %71 = or i32 %50, 2\l  %72 = add nsw i32 %51, 2\l  %73 = zext i32 %71 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %76 = sext i32 %72 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %79 = fadd contract float %75, %78\l  %80 = fadd contract float %70, %79\l  %81 = or i32 %50, 3\l  %82 = add nsw i32 %51, 3\l  %83 = zext i32 %81 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %86 = sext i32 %82 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %89 = fadd contract float %85, %88\l  %90 = fadd contract float %80, %89\l  %91 = or i32 %50, 4\l  %92 = add nsw i32 %51, 4\l  %93 = zext i32 %91 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %96 = sext i32 %92 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %99 = fadd contract float %95, %98\l  %100 = fadd contract float %90, %99\l  %101 = or i32 %50, 5\l  %102 = add nsw i32 %51, 5\l  %103 = zext i32 %101 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %106 = sext i32 %102 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %109 = fadd contract float %105, %108\l  %110 = fadd contract float %100, %109\l  %111 = or i32 %50, 6\l  %112 = add nsw i32 %51, 6\l  %113 = zext i32 %111 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %116 = sext i32 %112 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %119 = fadd contract float %115, %118\l  %120 = fadd contract float %110, %119\l  %121 = or i32 %50, 7\l  %122 = add nsw i32 %51, 7\l  %123 = zext i32 %121 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %126 = sext i32 %122 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %129 = fadd contract float %125, %128\l  %130 = fadd contract float %120, %129\l  %131 = add nuw nsw i32 %50, 8\l  %132 = add nsw i32 %51, 8\l  %133 = add i32 %52, 8\l  %134 = icmp eq i32 %133, %17\l  br i1 %134, label %18, label %48, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5507cf0:s0 -> Node0x55083b0;
	Node0x5507cf0:s1 -> Node0x5507cf0;
	Node0x550c2c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%135:\l135:                                              \l  %136 = phi float [ %42, %41 ], [ %147, %138 ]\l  %137 = add i32 %3, %2\l  br label %557\l}"];
	Node0x550c2c0 -> Node0x5510120;
	Node0x550c580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%138:\l138:                                              \l  %139 = phi float [ %42, %44 ], [ %147, %138 ]\l  %140 = phi i64 [ %46, %44 ], [ %149, %138 ]\l  %141 = phi i64 [ 0, %44 ], [ %148, %138 ]\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %146 = fadd contract float %143, %145\l  %147 = fadd contract float %139, %146\l  %148 = add i64 %141, %47\l  %149 = add i64 %140, %47\l  %150 = icmp ult i64 %148, %7\l  br i1 %150, label %138, label %135, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x550c580:s0 -> Node0x550c580;
	Node0x550c580:s1 -> Node0x550c2c0;
	Node0x5507d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%151:\l151:                                              \l  %152 = icmp eq i32 %2, %3\l  br i1 %152, label %153, label %172\l|{<s0>T|<s1>F}}"];
	Node0x5507d50:s0 -> Node0x5510b60;
	Node0x5507d50:s1 -> Node0x5510bb0;
	Node0x5510b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%153:\l153:                                              \l  %154 = shl nsw i32 %4, 1\l  %155 = add nsw i32 %154, -1\l  %156 = icmp eq i32 %155, %3\l  br i1 %156, label %157, label %172\l|{<s0>T|<s1>F}}"];
	Node0x5510b60:s0 -> Node0x5510ea0;
	Node0x5510b60:s1 -> Node0x5510bb0;
	Node0x5510ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%157:\l157:                                              \l  %158 = add i32 %4, -1\l  %159 = sext i32 %158 to i64\l  %160 = mul nsw i64 %159, %7\l  %161 = sext i32 %4 to i64\l  %162 = mul nsw i64 %7, %161\l  %163 = icmp ult i64 %160, %162\l  br i1 %163, label %164, label %279\l|{<s0>T|<s1>F}}"];
	Node0x5510ea0:s0 -> Node0x55112c0;
	Node0x5510ea0:s1 -> Node0x5511310;
	Node0x55112c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%164:\l164:                                              \l  %165 = phi float [ %169, %164 ], [ 0.000000e+00, %157 ]\l  %166 = phi i64 [ %170, %164 ], [ %160, %157 ]\l  %167 = getelementptr inbounds float, float addrspace(1)* %0, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %169 = fadd contract float %165, %168\l  %170 = add nuw i64 %166, 1\l  %171 = icmp ult i64 %170, %162\l  br i1 %171, label %164, label %279, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x55112c0:s0 -> Node0x55112c0;
	Node0x55112c0:s1 -> Node0x5511310;
	Node0x5510bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%172:\l172:                                              \l  %173 = add i32 %4, -1\l  %174 = icmp eq i32 %6, 0\l  br i1 %174, label %279, label %175\l|{<s0>T|<s1>F}}"];
	Node0x5510bb0:s0 -> Node0x5511310;
	Node0x5510bb0:s1 -> Node0x5511b80;
	Node0x5511b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%175:\l175:                                              \l  %176 = sext i32 %173 to i64\l  %177 = mul nsw i64 %176, %7\l  %178 = tail call i64 @llvm.umax.i64(i64 %7, i64 1)\l  %179 = add i64 %178, -1\l  %180 = and i64 %178, 7\l  %181 = icmp ult i64 %179, 7\l  br i1 %181, label %255, label %182\l|{<s0>T|<s1>F}}"];
	Node0x5511b80:s0 -> Node0x5512110;
	Node0x5511b80:s1 -> Node0x55121a0;
	Node0x55121a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%182:\l182:                                              \l  %183 = and i64 %178, -8\l  br label %184\l}"];
	Node0x55121a0 -> Node0x55123a0;
	Node0x55123a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%184:\l184:                                              \l  %185 = phi float [ 0.000000e+00, %182 ], [ %250, %184 ]\l  %186 = phi i64 [ %177, %182 ], [ %252, %184 ]\l  %187 = phi i64 [ 0, %182 ], [ %251, %184 ]\l  %188 = phi i64 [ 0, %182 ], [ %253, %184 ]\l  %189 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %191 = getelementptr inbounds float, float addrspace(1)* %0, i64 %186\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %193 = fadd contract float %190, %192\l  %194 = fadd contract float %185, %193\l  %195 = or i64 %187, 1\l  %196 = add i64 %186, 1\l  %197 = getelementptr inbounds float, float addrspace(1)* %0, i64 %195\l  %198 = load float, float addrspace(1)* %197, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %199 = getelementptr inbounds float, float addrspace(1)* %0, i64 %196\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %201 = fadd contract float %198, %200\l  %202 = fadd contract float %194, %201\l  %203 = or i64 %187, 2\l  %204 = add i64 %186, 2\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %203\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %207 = getelementptr inbounds float, float addrspace(1)* %0, i64 %204\l  %208 = load float, float addrspace(1)* %207, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %209 = fadd contract float %206, %208\l  %210 = fadd contract float %202, %209\l  %211 = or i64 %187, 3\l  %212 = add i64 %186, 3\l  %213 = getelementptr inbounds float, float addrspace(1)* %0, i64 %211\l  %214 = load float, float addrspace(1)* %213, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %215 = getelementptr inbounds float, float addrspace(1)* %0, i64 %212\l  %216 = load float, float addrspace(1)* %215, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %217 = fadd contract float %214, %216\l  %218 = fadd contract float %210, %217\l  %219 = or i64 %187, 4\l  %220 = add i64 %186, 4\l  %221 = getelementptr inbounds float, float addrspace(1)* %0, i64 %219\l  %222 = load float, float addrspace(1)* %221, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %223 = getelementptr inbounds float, float addrspace(1)* %0, i64 %220\l  %224 = load float, float addrspace(1)* %223, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %225 = fadd contract float %222, %224\l  %226 = fadd contract float %218, %225\l  %227 = or i64 %187, 5\l  %228 = add i64 %186, 5\l  %229 = getelementptr inbounds float, float addrspace(1)* %0, i64 %227\l  %230 = load float, float addrspace(1)* %229, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %231 = getelementptr inbounds float, float addrspace(1)* %0, i64 %228\l  %232 = load float, float addrspace(1)* %231, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %233 = fadd contract float %230, %232\l  %234 = fadd contract float %226, %233\l  %235 = or i64 %187, 6\l  %236 = add i64 %186, 6\l  %237 = getelementptr inbounds float, float addrspace(1)* %0, i64 %235\l  %238 = load float, float addrspace(1)* %237, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %239 = getelementptr inbounds float, float addrspace(1)* %0, i64 %236\l  %240 = load float, float addrspace(1)* %239, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %241 = fadd contract float %238, %240\l  %242 = fadd contract float %234, %241\l  %243 = or i64 %187, 7\l  %244 = add i64 %186, 7\l  %245 = getelementptr inbounds float, float addrspace(1)* %0, i64 %243\l  %246 = load float, float addrspace(1)* %245, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %247 = getelementptr inbounds float, float addrspace(1)* %0, i64 %244\l  %248 = load float, float addrspace(1)* %247, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %249 = fadd contract float %246, %248\l  %250 = fadd contract float %242, %249\l  %251 = add nuw i64 %187, 8\l  %252 = add i64 %186, 8\l  %253 = add i64 %188, 8\l  %254 = icmp eq i64 %253, %183\l  br i1 %254, label %255, label %184, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x55123a0:s0 -> Node0x5512110;
	Node0x55123a0:s1 -> Node0x55123a0;
	Node0x5512110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%255:\l255:                                              \l  %256 = phi float [ undef, %175 ], [ %250, %184 ]\l  %257 = phi float [ 0.000000e+00, %175 ], [ %250, %184 ]\l  %258 = phi i64 [ %177, %175 ], [ %252, %184 ]\l  %259 = phi i64 [ 0, %175 ], [ %251, %184 ]\l  %260 = icmp eq i64 %180, 0\l  br i1 %260, label %276, label %261\l|{<s0>T|<s1>F}}"];
	Node0x5512110:s0 -> Node0x550fa40;
	Node0x5512110:s1 -> Node0x550fa90;
	Node0x550fa90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%261:\l261:                                              \l  %262 = phi float [ %271, %261 ], [ %257, %255 ]\l  %263 = phi i64 [ %273, %261 ], [ %258, %255 ]\l  %264 = phi i64 [ %272, %261 ], [ %259, %255 ]\l  %265 = phi i64 [ %274, %261 ], [ 0, %255 ]\l  %266 = getelementptr inbounds float, float addrspace(1)* %0, i64 %264\l  %267 = load float, float addrspace(1)* %266, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %268 = getelementptr inbounds float, float addrspace(1)* %0, i64 %263\l  %269 = load float, float addrspace(1)* %268, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %270 = fadd contract float %267, %269\l  %271 = fadd contract float %262, %270\l  %272 = add nuw i64 %264, 1\l  %273 = add i64 %263, 1\l  %274 = add i64 %265, 1\l  %275 = icmp eq i64 %274, %180\l  br i1 %275, label %276, label %261, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x550fa90:s0 -> Node0x550fa40;
	Node0x550fa90:s1 -> Node0x550fa90;
	Node0x550fa40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%276:\l276:                                              \l  %277 = phi float [ %256, %255 ], [ %271, %261 ]\l  %278 = trunc i64 %178 to i32\l  br label %279\l}"];
	Node0x550fa40 -> Node0x5511310;
	Node0x5511310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%279:\l279:                                              \l  %280 = phi i32 [ %173, %276 ], [ %173, %172 ], [ %158, %157 ], [ %158, %164 ]\l  %281 = phi float [ %277, %276 ], [ 0.000000e+00, %172 ], [ 0.000000e+00,\l... %157 ], [ %169, %164 ]\l  %282 = phi i32 [ %278, %276 ], [ 0, %172 ], [ 0, %157 ], [ %6, %164 ]\l  %283 = icmp sgt i32 %4, 2\l  br i1 %283, label %284, label %293\l|{<s0>T|<s1>F}}"];
	Node0x5511310:s0 -> Node0x5516fb0;
	Node0x5511310:s1 -> Node0x5517000;
	Node0x5516fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%284:\l284:                                              \l  %285 = add i32 %3, -1\l  %286 = mul nsw i32 %285, %2\l  %287 = sext i32 %286 to i64\l  %288 = icmp sgt i32 %2, 0\l  %289 = and i32 %2, 7\l  %290 = icmp ult i32 %2, 8\l  %291 = and i32 %2, -8\l  %292 = icmp eq i32 %289, 0\l  br label %306\l}"];
	Node0x5516fb0 -> Node0x5517560;
	Node0x5517000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%293:\l293:                                              \l  %294 = phi float [ %281, %279 ], [ %337, %336 ]\l  %295 = phi i32 [ %282, %279 ], [ %338, %336 ]\l  br i1 %283, label %296, label %557\l|{<s0>T|<s1>F}}"];
	Node0x5517000:s0 -> Node0x5517810;
	Node0x5517000:s1 -> Node0x5510120;
	Node0x5517810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%296:\l296:                                              \l  %297 = add nsw i32 %2, -1\l  %298 = sext i32 %297 to i64\l  %299 = icmp sgt i32 %3, 2\l  %300 = add i32 %3, -2\l  %301 = add i32 %3, -3\l  %302 = and i32 %300, 7\l  %303 = icmp ult i32 %301, 7\l  %304 = and i32 %300, -8\l  %305 = icmp eq i32 %302, 0\l  br label %427\l}"];
	Node0x5517810 -> Node0x5517e40;
	Node0x5517560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%306:\l306:                                              \l  %307 = phi i32 [ %282, %284 ], [ %338, %336 ]\l  %308 = phi float [ %281, %284 ], [ %337, %336 ]\l  %309 = phi i32 [ 1, %284 ], [ %339, %336 ]\l  %310 = zext i32 %309 to i64\l  %311 = mul nsw i64 %310, %7\l  br i1 %288, label %312, label %336\l|{<s0>T|<s1>F}}"];
	Node0x5517560:s0 -> Node0x5518210;
	Node0x5517560:s1 -> Node0x5517620;
	Node0x5518210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%312:\l312:                                              \l  br i1 %290, label %313, label %341\l|{<s0>T|<s1>F}}"];
	Node0x5518210:s0 -> Node0x5518350;
	Node0x5518210:s1 -> Node0x55183a0;
	Node0x5518350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%313:\l313:                                              \l  %314 = phi float [ undef, %312 ], [ %423, %341 ]\l  %315 = phi float [ %308, %312 ], [ %423, %341 ]\l  %316 = phi i32 [ 0, %312 ], [ %424, %341 ]\l  br i1 %292, label %333, label %317\l|{<s0>T|<s1>F}}"];
	Node0x5518350:s0 -> Node0x5518790;
	Node0x5518350:s1 -> Node0x5518820;
	Node0x5518820 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%317:\l317:                                              \l  %318 = phi float [ %329, %317 ], [ %315, %313 ]\l  %319 = phi i32 [ %330, %317 ], [ %316, %313 ]\l  %320 = phi i32 [ %331, %317 ], [ 0, %313 ]\l  %321 = zext i32 %319 to i64\l  %322 = add i64 %311, %321\l  %323 = getelementptr inbounds float, float addrspace(1)* %0, i64 %322\l  %324 = load float, float addrspace(1)* %323, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %325 = add i64 %322, %287\l  %326 = getelementptr inbounds float, float addrspace(1)* %0, i64 %325\l  %327 = load float, float addrspace(1)* %326, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %328 = fadd contract float %324, %327\l  %329 = fadd contract float %318, %328\l  %330 = add nuw nsw i32 %319, 1\l  %331 = add i32 %320, 1\l  %332 = icmp eq i32 %331, %289\l  br i1 %332, label %333, label %317, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5518820:s0 -> Node0x5518790;
	Node0x5518820:s1 -> Node0x5518820;
	Node0x5518790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%333:\l333:                                              \l  %334 = phi float [ %314, %313 ], [ %329, %317 ]\l  %335 = add i32 %307, %2\l  br label %336\l}"];
	Node0x5518790 -> Node0x5517620;
	Node0x5517620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%336:\l336:                                              \l  %337 = phi float [ %308, %306 ], [ %334, %333 ]\l  %338 = phi i32 [ %307, %306 ], [ %335, %333 ]\l  %339 = add nuw nsw i32 %309, 1\l  %340 = icmp eq i32 %339, %280\l  br i1 %340, label %293, label %306, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5517620:s0 -> Node0x5517000;
	Node0x5517620:s1 -> Node0x5517560;
	Node0x55183a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%341:\l341:                                              \l  %342 = phi float [ %423, %341 ], [ %308, %312 ]\l  %343 = phi i32 [ %424, %341 ], [ 0, %312 ]\l  %344 = phi i32 [ %425, %341 ], [ 0, %312 ]\l  %345 = zext i32 %343 to i64\l  %346 = add i64 %311, %345\l  %347 = getelementptr inbounds float, float addrspace(1)* %0, i64 %346\l  %348 = load float, float addrspace(1)* %347, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %349 = add i64 %346, %287\l  %350 = getelementptr inbounds float, float addrspace(1)* %0, i64 %349\l  %351 = load float, float addrspace(1)* %350, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %352 = fadd contract float %348, %351\l  %353 = fadd contract float %342, %352\l  %354 = or i32 %343, 1\l  %355 = zext i32 %354 to i64\l  %356 = add i64 %311, %355\l  %357 = getelementptr inbounds float, float addrspace(1)* %0, i64 %356\l  %358 = load float, float addrspace(1)* %357, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %359 = add i64 %356, %287\l  %360 = getelementptr inbounds float, float addrspace(1)* %0, i64 %359\l  %361 = load float, float addrspace(1)* %360, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %362 = fadd contract float %358, %361\l  %363 = fadd contract float %353, %362\l  %364 = or i32 %343, 2\l  %365 = zext i32 %364 to i64\l  %366 = add i64 %311, %365\l  %367 = getelementptr inbounds float, float addrspace(1)* %0, i64 %366\l  %368 = load float, float addrspace(1)* %367, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %369 = add i64 %366, %287\l  %370 = getelementptr inbounds float, float addrspace(1)* %0, i64 %369\l  %371 = load float, float addrspace(1)* %370, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %372 = fadd contract float %368, %371\l  %373 = fadd contract float %363, %372\l  %374 = or i32 %343, 3\l  %375 = zext i32 %374 to i64\l  %376 = add i64 %311, %375\l  %377 = getelementptr inbounds float, float addrspace(1)* %0, i64 %376\l  %378 = load float, float addrspace(1)* %377, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %379 = add i64 %376, %287\l  %380 = getelementptr inbounds float, float addrspace(1)* %0, i64 %379\l  %381 = load float, float addrspace(1)* %380, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %382 = fadd contract float %378, %381\l  %383 = fadd contract float %373, %382\l  %384 = or i32 %343, 4\l  %385 = zext i32 %384 to i64\l  %386 = add i64 %311, %385\l  %387 = getelementptr inbounds float, float addrspace(1)* %0, i64 %386\l  %388 = load float, float addrspace(1)* %387, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %389 = add i64 %386, %287\l  %390 = getelementptr inbounds float, float addrspace(1)* %0, i64 %389\l  %391 = load float, float addrspace(1)* %390, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %392 = fadd contract float %388, %391\l  %393 = fadd contract float %383, %392\l  %394 = or i32 %343, 5\l  %395 = zext i32 %394 to i64\l  %396 = add i64 %311, %395\l  %397 = getelementptr inbounds float, float addrspace(1)* %0, i64 %396\l  %398 = load float, float addrspace(1)* %397, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %399 = add i64 %396, %287\l  %400 = getelementptr inbounds float, float addrspace(1)* %0, i64 %399\l  %401 = load float, float addrspace(1)* %400, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %402 = fadd contract float %398, %401\l  %403 = fadd contract float %393, %402\l  %404 = or i32 %343, 6\l  %405 = zext i32 %404 to i64\l  %406 = add i64 %311, %405\l  %407 = getelementptr inbounds float, float addrspace(1)* %0, i64 %406\l  %408 = load float, float addrspace(1)* %407, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %409 = add i64 %406, %287\l  %410 = getelementptr inbounds float, float addrspace(1)* %0, i64 %409\l  %411 = load float, float addrspace(1)* %410, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %412 = fadd contract float %408, %411\l  %413 = fadd contract float %403, %412\l  %414 = or i32 %343, 7\l  %415 = zext i32 %414 to i64\l  %416 = add i64 %311, %415\l  %417 = getelementptr inbounds float, float addrspace(1)* %0, i64 %416\l  %418 = load float, float addrspace(1)* %417, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %419 = add i64 %416, %287\l  %420 = getelementptr inbounds float, float addrspace(1)* %0, i64 %419\l  %421 = load float, float addrspace(1)* %420, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %422 = fadd contract float %418, %421\l  %423 = fadd contract float %413, %422\l  %424 = add nuw nsw i32 %343, 8\l  %425 = add i32 %344, 8\l  %426 = icmp eq i32 %425, %291\l  br i1 %426, label %313, label %341, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x55183a0:s0 -> Node0x5518350;
	Node0x55183a0:s1 -> Node0x55183a0;
	Node0x5517e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%427:\l427:                                              \l  %428 = phi i32 [ %295, %296 ], [ %460, %458 ]\l  %429 = phi float [ %294, %296 ], [ %459, %458 ]\l  %430 = phi i32 [ 1, %296 ], [ %461, %458 ]\l  %431 = zext i32 %430 to i64\l  %432 = mul nsw i64 %431, %7\l  br i1 %299, label %433, label %458\l|{<s0>T|<s1>F}}"];
	Node0x5517e40:s0 -> Node0x551e790;
	Node0x5517e40:s1 -> Node0x551e370;
	Node0x551e790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%433:\l433:                                              \l  br i1 %303, label %434, label %463\l|{<s0>T|<s1>F}}"];
	Node0x551e790:s0 -> Node0x551e8d0;
	Node0x551e790:s1 -> Node0x551e920;
	Node0x551e8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%434:\l434:                                              \l  %435 = phi float [ undef, %433 ], [ %553, %463 ]\l  %436 = phi i32 [ 1, %433 ], [ %554, %463 ]\l  %437 = phi float [ %429, %433 ], [ %553, %463 ]\l  br i1 %305, label %455, label %438\l|{<s0>T|<s1>F}}"];
	Node0x551e8d0:s0 -> Node0x551ecb0;
	Node0x551e8d0:s1 -> Node0x551ed40;
	Node0x551ed40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%438:\l438:                                              \l  %439 = phi i32 [ %452, %438 ], [ %436, %434 ]\l  %440 = phi float [ %451, %438 ], [ %437, %434 ]\l  %441 = phi i32 [ %453, %438 ], [ 0, %434 ]\l  %442 = mul nsw i32 %439, %2\l  %443 = sext i32 %442 to i64\l  %444 = add i64 %432, %443\l  %445 = getelementptr inbounds float, float addrspace(1)* %0, i64 %444\l  %446 = load float, float addrspace(1)* %445, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %447 = add i64 %444, %298\l  %448 = getelementptr inbounds float, float addrspace(1)* %0, i64 %447\l  %449 = load float, float addrspace(1)* %448, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %450 = fadd contract float %446, %449\l  %451 = fadd contract float %440, %450\l  %452 = add nuw nsw i32 %439, 1\l  %453 = add i32 %441, 1\l  %454 = icmp eq i32 %453, %302\l  br i1 %454, label %455, label %438, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x551ed40:s0 -> Node0x551ecb0;
	Node0x551ed40:s1 -> Node0x551ed40;
	Node0x551ecb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%455:\l455:                                              \l  %456 = phi float [ %435, %434 ], [ %451, %438 ]\l  %457 = add i32 %300, %428\l  br label %458\l}"];
	Node0x551ecb0 -> Node0x551e370;
	Node0x551e370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%458:\l458:                                              \l  %459 = phi float [ %429, %427 ], [ %456, %455 ]\l  %460 = phi i32 [ %428, %427 ], [ %457, %455 ]\l  %461 = add nuw nsw i32 %430, 1\l  %462 = icmp eq i32 %461, %280\l  br i1 %462, label %557, label %427, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x551e370:s0 -> Node0x5510120;
	Node0x551e370:s1 -> Node0x5517e40;
	Node0x551e920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%463:\l463:                                              \l  %464 = phi i32 [ %554, %463 ], [ 1, %433 ]\l  %465 = phi float [ %553, %463 ], [ %429, %433 ]\l  %466 = phi i32 [ %555, %463 ], [ 0, %433 ]\l  %467 = mul nsw i32 %464, %2\l  %468 = sext i32 %467 to i64\l  %469 = add i64 %432, %468\l  %470 = getelementptr inbounds float, float addrspace(1)* %0, i64 %469\l  %471 = load float, float addrspace(1)* %470, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %472 = add i64 %469, %298\l  %473 = getelementptr inbounds float, float addrspace(1)* %0, i64 %472\l  %474 = load float, float addrspace(1)* %473, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %475 = fadd contract float %471, %474\l  %476 = fadd contract float %465, %475\l  %477 = add nuw nsw i32 %464, 1\l  %478 = mul nsw i32 %477, %2\l  %479 = sext i32 %478 to i64\l  %480 = add i64 %432, %479\l  %481 = getelementptr inbounds float, float addrspace(1)* %0, i64 %480\l  %482 = load float, float addrspace(1)* %481, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %483 = add i64 %480, %298\l  %484 = getelementptr inbounds float, float addrspace(1)* %0, i64 %483\l  %485 = load float, float addrspace(1)* %484, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %486 = fadd contract float %482, %485\l  %487 = fadd contract float %476, %486\l  %488 = add nuw nsw i32 %464, 2\l  %489 = mul nsw i32 %488, %2\l  %490 = sext i32 %489 to i64\l  %491 = add i64 %432, %490\l  %492 = getelementptr inbounds float, float addrspace(1)* %0, i64 %491\l  %493 = load float, float addrspace(1)* %492, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %494 = add i64 %491, %298\l  %495 = getelementptr inbounds float, float addrspace(1)* %0, i64 %494\l  %496 = load float, float addrspace(1)* %495, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %497 = fadd contract float %493, %496\l  %498 = fadd contract float %487, %497\l  %499 = add nuw nsw i32 %464, 3\l  %500 = mul nsw i32 %499, %2\l  %501 = sext i32 %500 to i64\l  %502 = add i64 %432, %501\l  %503 = getelementptr inbounds float, float addrspace(1)* %0, i64 %502\l  %504 = load float, float addrspace(1)* %503, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %505 = add i64 %502, %298\l  %506 = getelementptr inbounds float, float addrspace(1)* %0, i64 %505\l  %507 = load float, float addrspace(1)* %506, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %508 = fadd contract float %504, %507\l  %509 = fadd contract float %498, %508\l  %510 = add nuw nsw i32 %464, 4\l  %511 = mul nsw i32 %510, %2\l  %512 = sext i32 %511 to i64\l  %513 = add i64 %432, %512\l  %514 = getelementptr inbounds float, float addrspace(1)* %0, i64 %513\l  %515 = load float, float addrspace(1)* %514, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %516 = add i64 %513, %298\l  %517 = getelementptr inbounds float, float addrspace(1)* %0, i64 %516\l  %518 = load float, float addrspace(1)* %517, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %519 = fadd contract float %515, %518\l  %520 = fadd contract float %509, %519\l  %521 = add nuw nsw i32 %464, 5\l  %522 = mul nsw i32 %521, %2\l  %523 = sext i32 %522 to i64\l  %524 = add i64 %432, %523\l  %525 = getelementptr inbounds float, float addrspace(1)* %0, i64 %524\l  %526 = load float, float addrspace(1)* %525, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %527 = add i64 %524, %298\l  %528 = getelementptr inbounds float, float addrspace(1)* %0, i64 %527\l  %529 = load float, float addrspace(1)* %528, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %530 = fadd contract float %526, %529\l  %531 = fadd contract float %520, %530\l  %532 = add nuw nsw i32 %464, 6\l  %533 = mul nsw i32 %532, %2\l  %534 = sext i32 %533 to i64\l  %535 = add i64 %432, %534\l  %536 = getelementptr inbounds float, float addrspace(1)* %0, i64 %535\l  %537 = load float, float addrspace(1)* %536, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %538 = add i64 %535, %298\l  %539 = getelementptr inbounds float, float addrspace(1)* %0, i64 %538\l  %540 = load float, float addrspace(1)* %539, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %541 = fadd contract float %537, %540\l  %542 = fadd contract float %531, %541\l  %543 = add nuw nsw i32 %464, 7\l  %544 = mul nsw i32 %543, %2\l  %545 = sext i32 %544 to i64\l  %546 = add i64 %432, %545\l  %547 = getelementptr inbounds float, float addrspace(1)* %0, i64 %546\l  %548 = load float, float addrspace(1)* %547, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %549 = add i64 %546, %298\l  %550 = getelementptr inbounds float, float addrspace(1)* %0, i64 %549\l  %551 = load float, float addrspace(1)* %550, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %552 = fadd contract float %548, %551\l  %553 = fadd contract float %542, %552\l  %554 = add nuw nsw i32 %464, 8\l  %555 = add i32 %466, 8\l  %556 = icmp eq i32 %555, %304\l  br i1 %556, label %434, label %463, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x551e920:s0 -> Node0x551e8d0;
	Node0x551e920:s1 -> Node0x551e920;
	Node0x5510120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%557:\l557:                                              \l  %558 = phi i32 [ %137, %135 ], [ %295, %293 ], [ %460, %458 ]\l  %559 = phi float [ %136, %135 ], [ %294, %293 ], [ %459, %458 ]\l  %560 = shl i32 %558, 1\l  %561 = sitofp i32 %560 to float\l  %562 = fdiv contract float %559, %561\l  store float %562, float addrspace(1)* %1, align 4, !tbaa !4\l  ret void\l}"];
}
