digraph "CFG for '_Z14ccc_cmp_kernalPKfS0_Pfiiii' function" {
	label="CFG for '_Z14ccc_cmp_kernalPKfS0_Pfiiii' function";

	Node0x4d3e740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = mul i32 %9, %5\l  %11 = add i32 %10, %8\l  %12 = add i32 %11, %6\l  %13 = freeze i32 %12\l  %14 = icmp sgt i32 %3, 0\l  br i1 %14, label %15, label %62\l|{<s0>T|<s1>F}}"];
	Node0x4d3e740:s0 -> Node0x4d3ff80;
	Node0x4d3e740:s1 -> Node0x4d40010;
	Node0x4d3ff80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = srem i32 %13, %3\l  %17 = sub nsw i32 %13, %16\l  %18 = and i32 %3, 7\l  %19 = icmp ult i32 %3, 8\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x4d3ff80:s0 -> Node0x4d40470;
	Node0x4d3ff80:s1 -> Node0x4d404c0;
	Node0x4d404c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%20:\l20:                                               \l  %21 = and i32 %3, -8\l  br label %91\l}"];
	Node0x4d404c0 -> Node0x4d406c0;
	Node0x4d40470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%22:\l22:                                               \l  %23 = phi float [ undef, %15 ], [ %224, %91 ]\l  %24 = phi float [ undef, %15 ], [ %227, %91 ]\l  %25 = phi float [ undef, %15 ], [ %229, %91 ]\l  %26 = phi float [ undef, %15 ], [ %231, %91 ]\l  %27 = phi float [ undef, %15 ], [ %233, %91 ]\l  %28 = phi float [ 0.000000e+00, %15 ], [ %224, %91 ]\l  %29 = phi i32 [ 0, %15 ], [ %234, %91 ]\l  %30 = phi float [ 0.000000e+00, %15 ], [ %227, %91 ]\l  %31 = phi float [ 0.000000e+00, %15 ], [ %229, %91 ]\l  %32 = phi float [ 0.000000e+00, %15 ], [ %231, %91 ]\l  %33 = phi float [ 0.000000e+00, %15 ], [ %233, %91 ]\l  %34 = icmp eq i32 %18, 0\l  br i1 %34, label %62, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4d40470:s0 -> Node0x4d40010;
	Node0x4d40470:s1 -> Node0x4d40290;
	Node0x4d40290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%35:\l35:                                               \l  %36 = phi float [ %49, %35 ], [ %28, %22 ]\l  %37 = phi i32 [ %59, %35 ], [ %29, %22 ]\l  %38 = phi float [ %52, %35 ], [ %30, %22 ]\l  %39 = phi float [ %54, %35 ], [ %31, %22 ]\l  %40 = phi float [ %56, %35 ], [ %32, %22 ]\l  %41 = phi float [ %58, %35 ], [ %33, %22 ]\l  %42 = phi i32 [ %60, %35 ], [ 0, %22 ]\l  %43 = add i32 %17, %37\l  %44 = mul i32 %43, %3\l  %45 = add i32 %44, %16\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %49 = fadd contract float %36, %48\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %52 = fadd contract float %38, %51\l  %53 = fmul contract float %48, %48\l  %54 = fadd contract float %39, %53\l  %55 = fmul contract float %51, %51\l  %56 = fadd contract float %40, %55\l  %57 = fmul contract float %48, %51\l  %58 = fadd contract float %41, %57\l  %59 = add nuw nsw i32 %37, 1\l  %60 = add i32 %42, 1\l  %61 = icmp eq i32 %60, %18\l  br i1 %61, label %62, label %35, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4d40290:s0 -> Node0x4d40010;
	Node0x4d40290:s1 -> Node0x4d40290;
	Node0x4d40010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%62:\l62:                                               \l  %63 = phi float [ 0.000000e+00, %7 ], [ %27, %22 ], [ %58, %35 ]\l  %64 = phi float [ 0.000000e+00, %7 ], [ %26, %22 ], [ %56, %35 ]\l  %65 = phi float [ 0.000000e+00, %7 ], [ %25, %22 ], [ %54, %35 ]\l  %66 = phi float [ 0.000000e+00, %7 ], [ %24, %22 ], [ %52, %35 ]\l  %67 = phi float [ 0.000000e+00, %7 ], [ %23, %22 ], [ %49, %35 ]\l  %68 = sitofp i32 %3 to float\l  %69 = fdiv contract float %67, %68\l  %70 = sext i32 %13 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  store float %69, float addrspace(1)* %71, align 4, !tbaa !5\l  %72 = fdiv contract float %66, %68\l  %73 = add nsw i32 %13, %4\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %2, i64 %74\l  store float %72, float addrspace(1)* %75, align 4, !tbaa !5\l  %76 = fdiv contract float %65, %68\l  %77 = shl nsw i32 %4, 1\l  %78 = add nsw i32 %13, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %2, i64 %79\l  store float %76, float addrspace(1)* %80, align 4, !tbaa !5\l  %81 = fdiv contract float %64, %68\l  %82 = mul nsw i32 %4, 3\l  %83 = add nsw i32 %13, %82\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %2, i64 %84\l  store float %81, float addrspace(1)* %85, align 4, !tbaa !5\l  %86 = fdiv contract float %63, %68\l  %87 = shl nsw i32 %4, 2\l  %88 = add nsw i32 %13, %87\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %2, i64 %89\l  store float %86, float addrspace(1)* %90, align 4, !tbaa !5\l  ret void\l}"];
	Node0x4d406c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%91:\l91:                                               \l  %92 = phi float [ 0.000000e+00, %20 ], [ %224, %91 ]\l  %93 = phi i32 [ 0, %20 ], [ %234, %91 ]\l  %94 = phi float [ 0.000000e+00, %20 ], [ %227, %91 ]\l  %95 = phi float [ 0.000000e+00, %20 ], [ %229, %91 ]\l  %96 = phi float [ 0.000000e+00, %20 ], [ %231, %91 ]\l  %97 = phi float [ 0.000000e+00, %20 ], [ %233, %91 ]\l  %98 = phi i32 [ 0, %20 ], [ %235, %91 ]\l  %99 = add i32 %17, %93\l  %100 = mul i32 %99, %3\l  %101 = add i32 %100, %16\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %105 = fadd contract float %92, %104\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %108 = fadd contract float %94, %107\l  %109 = fmul contract float %104, %104\l  %110 = fadd contract float %95, %109\l  %111 = fmul contract float %107, %107\l  %112 = fadd contract float %96, %111\l  %113 = fmul contract float %104, %107\l  %114 = fadd contract float %97, %113\l  %115 = or i32 %93, 1\l  %116 = add i32 %17, %115\l  %117 = mul i32 %116, %3\l  %118 = add i32 %117, %16\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %122 = fadd contract float %105, %121\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %119\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %125 = fadd contract float %108, %124\l  %126 = fmul contract float %121, %121\l  %127 = fadd contract float %110, %126\l  %128 = fmul contract float %124, %124\l  %129 = fadd contract float %112, %128\l  %130 = fmul contract float %121, %124\l  %131 = fadd contract float %114, %130\l  %132 = or i32 %93, 2\l  %133 = add i32 %17, %132\l  %134 = mul i32 %133, %3\l  %135 = add i32 %134, %16\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %139 = fadd contract float %122, %138\l  %140 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %142 = fadd contract float %125, %141\l  %143 = fmul contract float %138, %138\l  %144 = fadd contract float %127, %143\l  %145 = fmul contract float %141, %141\l  %146 = fadd contract float %129, %145\l  %147 = fmul contract float %138, %141\l  %148 = fadd contract float %131, %147\l  %149 = or i32 %93, 3\l  %150 = add i32 %17, %149\l  %151 = mul i32 %150, %3\l  %152 = add i32 %151, %16\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %156 = fadd contract float %139, %155\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %153\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %159 = fadd contract float %142, %158\l  %160 = fmul contract float %155, %155\l  %161 = fadd contract float %144, %160\l  %162 = fmul contract float %158, %158\l  %163 = fadd contract float %146, %162\l  %164 = fmul contract float %155, %158\l  %165 = fadd contract float %148, %164\l  %166 = or i32 %93, 4\l  %167 = add i32 %17, %166\l  %168 = mul i32 %167, %3\l  %169 = add i32 %168, %16\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %0, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %173 = fadd contract float %156, %172\l  %174 = getelementptr inbounds float, float addrspace(1)* %1, i64 %170\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %176 = fadd contract float %159, %175\l  %177 = fmul contract float %172, %172\l  %178 = fadd contract float %161, %177\l  %179 = fmul contract float %175, %175\l  %180 = fadd contract float %163, %179\l  %181 = fmul contract float %172, %175\l  %182 = fadd contract float %165, %181\l  %183 = or i32 %93, 5\l  %184 = add i32 %17, %183\l  %185 = mul i32 %184, %3\l  %186 = add i32 %185, %16\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %190 = fadd contract float %173, %189\l  %191 = getelementptr inbounds float, float addrspace(1)* %1, i64 %187\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %193 = fadd contract float %176, %192\l  %194 = fmul contract float %189, %189\l  %195 = fadd contract float %178, %194\l  %196 = fmul contract float %192, %192\l  %197 = fadd contract float %180, %196\l  %198 = fmul contract float %189, %192\l  %199 = fadd contract float %182, %198\l  %200 = or i32 %93, 6\l  %201 = add i32 %17, %200\l  %202 = mul i32 %201, %3\l  %203 = add i32 %202, %16\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %207 = fadd contract float %190, %206\l  %208 = getelementptr inbounds float, float addrspace(1)* %1, i64 %204\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %210 = fadd contract float %193, %209\l  %211 = fmul contract float %206, %206\l  %212 = fadd contract float %195, %211\l  %213 = fmul contract float %209, %209\l  %214 = fadd contract float %197, %213\l  %215 = fmul contract float %206, %209\l  %216 = fadd contract float %199, %215\l  %217 = or i32 %93, 7\l  %218 = add i32 %17, %217\l  %219 = mul i32 %218, %3\l  %220 = add i32 %219, %16\l  %221 = sext i32 %220 to i64\l  %222 = getelementptr inbounds float, float addrspace(1)* %0, i64 %221\l  %223 = load float, float addrspace(1)* %222, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %224 = fadd contract float %207, %223\l  %225 = getelementptr inbounds float, float addrspace(1)* %1, i64 %221\l  %226 = load float, float addrspace(1)* %225, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %227 = fadd contract float %210, %226\l  %228 = fmul contract float %223, %223\l  %229 = fadd contract float %212, %228\l  %230 = fmul contract float %226, %226\l  %231 = fadd contract float %214, %230\l  %232 = fmul contract float %223, %226\l  %233 = fadd contract float %216, %232\l  %234 = add nuw nsw i32 %93, 8\l  %235 = add i32 %98, 8\l  %236 = icmp eq i32 %235, %21\l  br i1 %236, label %22, label %91, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4d406c0:s0 -> Node0x4d40470;
	Node0x4d406c0:s1 -> Node0x4d406c0;
}
