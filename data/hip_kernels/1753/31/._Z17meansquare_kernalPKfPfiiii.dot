digraph "CFG for '_Z17meansquare_kernalPKfPfiiii' function" {
	label="CFG for '_Z17meansquare_kernalPKfPfiiii' function";

	Node0x5b450b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = mul i32 %8, %4\l  %10 = add i32 %9, %7\l  %11 = add i32 %10, %5\l  %12 = freeze i32 %11\l  %13 = icmp sgt i32 %2, 0\l  br i1 %13, label %14, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5b450b0:s0 -> Node0x5b442e0;
	Node0x5b450b0:s1 -> Node0x5b46980;
	Node0x5b442e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = srem i32 %12, %2\l  %16 = sub nsw i32 %12, %15\l  %17 = and i32 %2, 7\l  %18 = icmp ult i32 %2, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5b442e0:s0 -> Node0x5b46e10;
	Node0x5b442e0:s1 -> Node0x5b46e60;
	Node0x5b46e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %2, -8\l  br label %47\l}"];
	Node0x5b46e60 -> Node0x5b47030;
	Node0x5b46e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %14 ], [ %121, %47 ]\l  %23 = phi float [ 0.000000e+00, %14 ], [ %121, %47 ]\l  %24 = phi i32 [ 0, %14 ], [ %122, %47 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %41, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5b46e10:s0 -> Node0x5b46980;
	Node0x5b46e10:s1 -> Node0x5b482a0;
	Node0x5b482a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi float [ %37, %26 ], [ %23, %21 ]\l  %28 = phi i32 [ %38, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %39, %26 ], [ 0, %21 ]\l  %30 = add i32 %16, %28\l  %31 = mul i32 %30, %2\l  %32 = add i32 %31, %15\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %36 = fmul contract float %35, %35\l  %37 = fadd contract float %27, %36\l  %38 = add nuw nsw i32 %28, 1\l  %39 = add i32 %29, 1\l  %40 = icmp eq i32 %39, %17\l  br i1 %40, label %41, label %26, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5b482a0:s0 -> Node0x5b46980;
	Node0x5b482a0:s1 -> Node0x5b482a0;
	Node0x5b46980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%41:\l41:                                               \l  %42 = phi float [ 0.000000e+00, %6 ], [ %22, %21 ], [ %37, %26 ]\l  %43 = sitofp i32 %2 to float\l  %44 = fdiv contract float %42, %43\l  %45 = sext i32 %12 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  store float %44, float addrspace(1)* %46, align 4, !tbaa !5\l  ret void\l}"];
	Node0x5b47030 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%47:\l47:                                               \l  %48 = phi float [ 0.000000e+00, %19 ], [ %121, %47 ]\l  %49 = phi i32 [ 0, %19 ], [ %122, %47 ]\l  %50 = phi i32 [ 0, %19 ], [ %123, %47 ]\l  %51 = add i32 %16, %49\l  %52 = mul i32 %51, %2\l  %53 = add i32 %52, %15\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %57 = fmul contract float %56, %56\l  %58 = fadd contract float %48, %57\l  %59 = or i32 %49, 1\l  %60 = add i32 %16, %59\l  %61 = mul i32 %60, %2\l  %62 = add i32 %61, %15\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %66 = fmul contract float %65, %65\l  %67 = fadd contract float %58, %66\l  %68 = or i32 %49, 2\l  %69 = add i32 %16, %68\l  %70 = mul i32 %69, %2\l  %71 = add i32 %70, %15\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %75 = fmul contract float %74, %74\l  %76 = fadd contract float %67, %75\l  %77 = or i32 %49, 3\l  %78 = add i32 %16, %77\l  %79 = mul i32 %78, %2\l  %80 = add i32 %79, %15\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %84 = fmul contract float %83, %83\l  %85 = fadd contract float %76, %84\l  %86 = or i32 %49, 4\l  %87 = add i32 %16, %86\l  %88 = mul i32 %87, %2\l  %89 = add i32 %88, %15\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %93 = fmul contract float %92, %92\l  %94 = fadd contract float %85, %93\l  %95 = or i32 %49, 5\l  %96 = add i32 %16, %95\l  %97 = mul i32 %96, %2\l  %98 = add i32 %97, %15\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %102 = fmul contract float %101, %101\l  %103 = fadd contract float %94, %102\l  %104 = or i32 %49, 6\l  %105 = add i32 %16, %104\l  %106 = mul i32 %105, %2\l  %107 = add i32 %106, %15\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %111 = fmul contract float %110, %110\l  %112 = fadd contract float %103, %111\l  %113 = or i32 %49, 7\l  %114 = add i32 %16, %113\l  %115 = mul i32 %114, %2\l  %116 = add i32 %115, %15\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %120 = fmul contract float %119, %119\l  %121 = fadd contract float %112, %120\l  %122 = add nuw nsw i32 %49, 8\l  %123 = add i32 %50, 8\l  %124 = icmp eq i32 %123, %20\l  br i1 %124, label %21, label %47, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5b47030:s0 -> Node0x5b46e10;
	Node0x5b47030:s1 -> Node0x5b47030;
}
