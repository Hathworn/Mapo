digraph "CFG for '_Z10column_sumPKfPfiiii' function" {
	label="CFG for '_Z10column_sumPKfPfiiii' function";

	Node0x5fe6da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = mul i32 %8, %4\l  %10 = add i32 %9, %7\l  %11 = add i32 %10, %5\l  %12 = icmp sgt i32 %3, 0\l  br i1 %12, label %13, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5fe6da0:s0 -> Node0x5fe5ff0;
	Node0x5fe6da0:s1 -> Node0x5fe8600;
	Node0x5fe5ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%13:\l13:                                               \l  %14 = and i32 %3, 7\l  %15 = icmp ult i32 %3, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x5fe5ff0:s0 -> Node0x5fe88c0;
	Node0x5fe5ff0:s1 -> Node0x5fe8910;
	Node0x5fe8910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%16:\l16:                                               \l  %17 = and i32 %3, -8\l  br label %40\l}"];
	Node0x5fe8910 -> Node0x5fe7d10;
	Node0x5fe88c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = phi float [ undef, %13 ], [ %98, %40 ]\l  %20 = phi i32 [ 0, %13 ], [ %99, %40 ]\l  %21 = phi float [ 0.000000e+00, %13 ], [ %98, %40 ]\l  %22 = icmp eq i32 %14, 0\l  br i1 %22, label %36, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5fe88c0:s0 -> Node0x5fe8600;
	Node0x5fe88c0:s1 -> Node0x5fe9e10;
	Node0x5fe9e10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i32 [ %33, %23 ], [ %20, %18 ]\l  %25 = phi float [ %32, %23 ], [ %21, %18 ]\l  %26 = phi i32 [ %34, %23 ], [ 0, %18 ]\l  %27 = mul nsw i32 %24, %2\l  %28 = add i32 %27, %11\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %32 = fadd contract float %25, %31\l  %33 = add nuw nsw i32 %24, 1\l  %34 = add i32 %26, 1\l  %35 = icmp eq i32 %34, %14\l  br i1 %35, label %36, label %23, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5fe9e10:s0 -> Node0x5fe8600;
	Node0x5fe9e10:s1 -> Node0x5fe9e10;
	Node0x5fe8600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%36:\l36:                                               \l  %37 = phi float [ 0.000000e+00, %6 ], [ %19, %18 ], [ %32, %23 ]\l  %38 = zext i32 %11 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %38\l  store float %37, float addrspace(1)* %39, align 4, !tbaa !5\l  ret void\l}"];
	Node0x5fe7d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%40:\l40:                                               \l  %41 = phi i32 [ 0, %16 ], [ %99, %40 ]\l  %42 = phi float [ 0.000000e+00, %16 ], [ %98, %40 ]\l  %43 = phi i32 [ 0, %16 ], [ %100, %40 ]\l  %44 = mul nsw i32 %41, %2\l  %45 = add i32 %44, %11\l  %46 = zext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %49 = fadd contract float %42, %48\l  %50 = or i32 %41, 1\l  %51 = mul nsw i32 %50, %2\l  %52 = add i32 %51, %11\l  %53 = zext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %56 = fadd contract float %49, %55\l  %57 = or i32 %41, 2\l  %58 = mul nsw i32 %57, %2\l  %59 = add i32 %58, %11\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %63 = fadd contract float %56, %62\l  %64 = or i32 %41, 3\l  %65 = mul nsw i32 %64, %2\l  %66 = add i32 %65, %11\l  %67 = zext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %70 = fadd contract float %63, %69\l  %71 = or i32 %41, 4\l  %72 = mul nsw i32 %71, %2\l  %73 = add i32 %72, %11\l  %74 = zext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %77 = fadd contract float %70, %76\l  %78 = or i32 %41, 5\l  %79 = mul nsw i32 %78, %2\l  %80 = add i32 %79, %11\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %84 = fadd contract float %77, %83\l  %85 = or i32 %41, 6\l  %86 = mul nsw i32 %85, %2\l  %87 = add i32 %86, %11\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %91 = fadd contract float %84, %90\l  %92 = or i32 %41, 7\l  %93 = mul nsw i32 %92, %2\l  %94 = add i32 %93, %11\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %98 = fadd contract float %91, %97\l  %99 = add nuw nsw i32 %41, 8\l  %100 = add i32 %43, 8\l  %101 = icmp eq i32 %100, %17\l  br i1 %101, label %18, label %40, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5fe7d10:s0 -> Node0x5fe88c0;
	Node0x5fe7d10:s1 -> Node0x5fe7d10;
}
