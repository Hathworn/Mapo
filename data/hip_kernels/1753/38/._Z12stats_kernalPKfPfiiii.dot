digraph "CFG for '_Z12stats_kernalPKfPfiiii' function" {
	label="CFG for '_Z12stats_kernalPKfPfiiii' function";

	Node0x5d59390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = mul i32 %8, %4\l  %10 = add i32 %9, %7\l  %11 = add i32 %10, %5\l  %12 = freeze i32 %11\l  %13 = icmp sgt i32 %2, 0\l  br i1 %13, label %14, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5d59390:s0 -> Node0x5d585c0;
	Node0x5d59390:s1 -> Node0x5d5ac60;
	Node0x5d585c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = srem i32 %12, %2\l  %16 = sub nsw i32 %12, %15\l  %17 = and i32 %2, 7\l  %18 = icmp ult i32 %2, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5d585c0:s0 -> Node0x5d5b0f0;
	Node0x5d585c0:s1 -> Node0x5d5b140;
	Node0x5d5b140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %2, -8\l  br label %53\l}"];
	Node0x5d5b140 -> Node0x5d5b310;
	Node0x5d5b0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %14 ], [ %134, %53 ]\l  %23 = phi float [ undef, %14 ], [ %136, %53 ]\l  %24 = phi float [ 0.000000e+00, %14 ], [ %134, %53 ]\l  %25 = phi float [ 0.000000e+00, %14 ], [ %136, %53 ]\l  %26 = phi i32 [ 0, %14 ], [ %137, %53 ]\l  %27 = icmp eq i32 %17, 0\l  br i1 %27, label %45, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5d5b0f0:s0 -> Node0x5d5ac60;
	Node0x5d5b0f0:s1 -> Node0x5d5c750;
	Node0x5d5c750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi float [ %39, %28 ], [ %24, %21 ]\l  %30 = phi float [ %41, %28 ], [ %25, %21 ]\l  %31 = phi i32 [ %42, %28 ], [ %26, %21 ]\l  %32 = phi i32 [ %43, %28 ], [ 0, %21 ]\l  %33 = add i32 %16, %31\l  %34 = mul i32 %33, %2\l  %35 = add i32 %34, %15\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %39 = fadd contract float %29, %38\l  %40 = fmul contract float %38, %38\l  %41 = fadd contract float %30, %40\l  %42 = add nuw nsw i32 %31, 1\l  %43 = add i32 %32, 1\l  %44 = icmp eq i32 %43, %17\l  br i1 %44, label %45, label %28, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5d5c750:s0 -> Node0x5d5ac60;
	Node0x5d5c750:s1 -> Node0x5d5c750;
	Node0x5d5ac60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%45:\l45:                                               \l  %46 = phi float [ 0.000000e+00, %6 ], [ %23, %21 ], [ %41, %28 ]\l  %47 = phi float [ 0.000000e+00, %6 ], [ %22, %21 ], [ %39, %28 ]\l  %48 = sext i32 %12 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  store float %47, float addrspace(1)* %49, align 4, !tbaa !5\l  %50 = add nsw i32 %12, %3\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  store float %46, float addrspace(1)* %52, align 4, !tbaa !5\l  ret void\l}"];
	Node0x5d5b310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%53:\l53:                                               \l  %54 = phi float [ 0.000000e+00, %19 ], [ %134, %53 ]\l  %55 = phi float [ 0.000000e+00, %19 ], [ %136, %53 ]\l  %56 = phi i32 [ 0, %19 ], [ %137, %53 ]\l  %57 = phi i32 [ 0, %19 ], [ %138, %53 ]\l  %58 = add i32 %16, %56\l  %59 = mul i32 %58, %2\l  %60 = add i32 %59, %15\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %64 = fadd contract float %54, %63\l  %65 = fmul contract float %63, %63\l  %66 = fadd contract float %55, %65\l  %67 = or i32 %56, 1\l  %68 = add i32 %16, %67\l  %69 = mul i32 %68, %2\l  %70 = add i32 %69, %15\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %74 = fadd contract float %64, %73\l  %75 = fmul contract float %73, %73\l  %76 = fadd contract float %66, %75\l  %77 = or i32 %56, 2\l  %78 = add i32 %16, %77\l  %79 = mul i32 %78, %2\l  %80 = add i32 %79, %15\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %84 = fadd contract float %74, %83\l  %85 = fmul contract float %83, %83\l  %86 = fadd contract float %76, %85\l  %87 = or i32 %56, 3\l  %88 = add i32 %16, %87\l  %89 = mul i32 %88, %2\l  %90 = add i32 %89, %15\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %94 = fadd contract float %84, %93\l  %95 = fmul contract float %93, %93\l  %96 = fadd contract float %86, %95\l  %97 = or i32 %56, 4\l  %98 = add i32 %16, %97\l  %99 = mul i32 %98, %2\l  %100 = add i32 %99, %15\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %104 = fadd contract float %94, %103\l  %105 = fmul contract float %103, %103\l  %106 = fadd contract float %96, %105\l  %107 = or i32 %56, 5\l  %108 = add i32 %16, %107\l  %109 = mul i32 %108, %2\l  %110 = add i32 %109, %15\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %114 = fadd contract float %104, %113\l  %115 = fmul contract float %113, %113\l  %116 = fadd contract float %106, %115\l  %117 = or i32 %56, 6\l  %118 = add i32 %16, %117\l  %119 = mul i32 %118, %2\l  %120 = add i32 %119, %15\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %124 = fadd contract float %114, %123\l  %125 = fmul contract float %123, %123\l  %126 = fadd contract float %116, %125\l  %127 = or i32 %56, 7\l  %128 = add i32 %16, %127\l  %129 = mul i32 %128, %2\l  %130 = add i32 %129, %15\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %134 = fadd contract float %124, %133\l  %135 = fmul contract float %133, %133\l  %136 = fadd contract float %126, %135\l  %137 = add nuw nsw i32 %56, 8\l  %138 = add i32 %57, 8\l  %139 = icmp eq i32 %138, %20\l  br i1 %139, label %21, label %53, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5d5b310:s0 -> Node0x5d5b0f0;
	Node0x5d5b310:s1 -> Node0x5d5b310;
}
