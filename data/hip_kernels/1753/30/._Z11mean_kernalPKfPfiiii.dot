digraph "CFG for '_Z11mean_kernalPKfPfiiii' function" {
	label="CFG for '_Z11mean_kernalPKfPfiiii' function";

	Node0x582ff30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = mul i32 %8, %4\l  %10 = add i32 %9, %7\l  %11 = add i32 %10, %5\l  %12 = freeze i32 %11\l  %13 = icmp sgt i32 %2, 0\l  br i1 %13, label %14, label %40\l|{<s0>T|<s1>F}}"];
	Node0x582ff30:s0 -> Node0x582f160;
	Node0x582ff30:s1 -> Node0x5831800;
	Node0x582f160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = srem i32 %12, %2\l  %16 = sub nsw i32 %12, %15\l  %17 = and i32 %2, 7\l  %18 = icmp ult i32 %2, 8\l  br i1 %18, label %21, label %19\l|{<s0>T|<s1>F}}"];
	Node0x582f160:s0 -> Node0x5831c90;
	Node0x582f160:s1 -> Node0x5831ce0;
	Node0x5831ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%19:\l19:                                               \l  %20 = and i32 %2, -8\l  br label %46\l}"];
	Node0x5831ce0 -> Node0x5831eb0;
	Node0x5831c90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%21:\l21:                                               \l  %22 = phi float [ undef, %14 ], [ %112, %46 ]\l  %23 = phi float [ 0.000000e+00, %14 ], [ %112, %46 ]\l  %24 = phi i32 [ 0, %14 ], [ %113, %46 ]\l  %25 = icmp eq i32 %17, 0\l  br i1 %25, label %40, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5831c90:s0 -> Node0x5831800;
	Node0x5831c90:s1 -> Node0x5833120;
	Node0x5833120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi float [ %36, %26 ], [ %23, %21 ]\l  %28 = phi i32 [ %37, %26 ], [ %24, %21 ]\l  %29 = phi i32 [ %38, %26 ], [ 0, %21 ]\l  %30 = add i32 %16, %28\l  %31 = mul i32 %30, %2\l  %32 = add i32 %31, %15\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %36 = fadd contract float %27, %35\l  %37 = add nuw nsw i32 %28, 1\l  %38 = add i32 %29, 1\l  %39 = icmp eq i32 %38, %17\l  br i1 %39, label %40, label %26, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x5833120:s0 -> Node0x5831800;
	Node0x5833120:s1 -> Node0x5833120;
	Node0x5831800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %6 ], [ %22, %21 ], [ %36, %26 ]\l  %42 = sitofp i32 %2 to float\l  %43 = fdiv contract float %41, %42\l  %44 = sext i32 %12 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  store float %43, float addrspace(1)* %45, align 4, !tbaa !5\l  ret void\l}"];
	Node0x5831eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %19 ], [ %112, %46 ]\l  %48 = phi i32 [ 0, %19 ], [ %113, %46 ]\l  %49 = phi i32 [ 0, %19 ], [ %114, %46 ]\l  %50 = add i32 %16, %48\l  %51 = mul i32 %50, %2\l  %52 = add i32 %51, %15\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %56 = fadd contract float %47, %55\l  %57 = or i32 %48, 1\l  %58 = add i32 %16, %57\l  %59 = mul i32 %58, %2\l  %60 = add i32 %59, %15\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %64 = fadd contract float %56, %63\l  %65 = or i32 %48, 2\l  %66 = add i32 %16, %65\l  %67 = mul i32 %66, %2\l  %68 = add i32 %67, %15\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %72 = fadd contract float %64, %71\l  %73 = or i32 %48, 3\l  %74 = add i32 %16, %73\l  %75 = mul i32 %74, %2\l  %76 = add i32 %75, %15\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %80 = fadd contract float %72, %79\l  %81 = or i32 %48, 4\l  %82 = add i32 %16, %81\l  %83 = mul i32 %82, %2\l  %84 = add i32 %83, %15\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %88 = fadd contract float %80, %87\l  %89 = or i32 %48, 5\l  %90 = add i32 %16, %89\l  %91 = mul i32 %90, %2\l  %92 = add i32 %91, %15\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %96 = fadd contract float %88, %95\l  %97 = or i32 %48, 6\l  %98 = add i32 %16, %97\l  %99 = mul i32 %98, %2\l  %100 = add i32 %99, %15\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %104 = fadd contract float %96, %103\l  %105 = or i32 %48, 7\l  %106 = add i32 %16, %105\l  %107 = mul i32 %106, %2\l  %108 = add i32 %107, %15\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %0, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %112 = fadd contract float %104, %111\l  %113 = add nuw nsw i32 %48, 8\l  %114 = add i32 %49, 8\l  %115 = icmp eq i32 %114, %20\l  br i1 %115, label %21, label %46, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5831eb0:s0 -> Node0x5831c90;
	Node0x5831eb0:s1 -> Node0x5831eb0;
}
