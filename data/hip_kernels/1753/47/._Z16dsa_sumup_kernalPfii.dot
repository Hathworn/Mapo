digraph "CFG for '_Z16dsa_sumup_kernalPfii' function" {
	label="CFG for '_Z16dsa_sumup_kernalPfii' function";

	Node0x5fa33d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = sdiv i32 %1, 2\l  %11 = add nsw i32 %10, 1\l  %12 = mul nsw i32 %11, %2\l  %13 = icmp slt i32 %1, -1\l  %14 = shl nsw i32 %12, 1\l  %15 = mul nsw i32 %12, 3\l  br i1 %13, label %55, label %16\l|{<s0>T|<s1>F}}"];
	Node0x5fa33d0:s0 -> Node0x5fa4130;
	Node0x5fa33d0:s1 -> Node0x5fa5360;
	Node0x5fa5360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%16:\l16:                                               \l  %17 = and i32 %11, 1\l  %18 = add i32 %1, 1\l  %19 = icmp ult i32 %18, 3\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x5fa5360:s0 -> Node0x5fa56d0;
	Node0x5fa5360:s1 -> Node0x5fa5720;
	Node0x5fa5720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%20:\l20:                                               \l  %21 = and i32 %11, -2\l  br label %71\l}"];
	Node0x5fa5720 -> Node0x5fa5920;
	Node0x5fa56d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%22:\l22:                                               \l  %23 = phi float [ undef, %16 ], [ %105, %71 ]\l  %24 = phi float [ undef, %16 ], [ %110, %71 ]\l  %25 = phi float [ undef, %16 ], [ %115, %71 ]\l  %26 = phi float [ undef, %16 ], [ %120, %71 ]\l  %27 = phi float [ 0.000000e+00, %16 ], [ %105, %71 ]\l  %28 = phi i32 [ 0, %16 ], [ %121, %71 ]\l  %29 = phi float [ 0.000000e+00, %16 ], [ %120, %71 ]\l  %30 = phi float [ 0.000000e+00, %16 ], [ %115, %71 ]\l  %31 = phi float [ 0.000000e+00, %16 ], [ %110, %71 ]\l  %32 = icmp eq i32 %17, 0\l  br i1 %32, label %55, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5fa56d0:s0 -> Node0x5fa4130;
	Node0x5fa56d0:s1 -> Node0x5fa54a0;
	Node0x5fa54a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%33:\l33:                                               \l  %34 = mul nuw nsw i32 %28, %9\l  %35 = add nuw nsw i32 %34, %4\l  %36 = zext i32 %35 to i64\l  %37 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36\l  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %39 = fadd contract float %27, %38\l  %40 = add nsw i32 %35, %12\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %44 = fadd contract float %31, %43\l  %45 = add nsw i32 %35, %14\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %49 = fadd contract float %30, %48\l  %50 = add nsw i32 %35, %15\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %54 = fadd contract float %29, %53\l  br label %55\l}"];
	Node0x5fa54a0 -> Node0x5fa4130;
	Node0x5fa4130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%55:\l55:                                               \l  %56 = phi float [ 0.000000e+00, %3 ], [ %24, %22 ], [ %44, %33 ]\l  %57 = phi float [ 0.000000e+00, %3 ], [ %25, %22 ], [ %49, %33 ]\l  %58 = phi float [ 0.000000e+00, %3 ], [ %26, %22 ], [ %54, %33 ]\l  %59 = phi float [ 0.000000e+00, %3 ], [ %23, %22 ], [ %39, %33 ]\l  %60 = zext i32 %4 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  store float %59, float addrspace(1)* %61, align 4, !tbaa !7\l  %62 = add nsw i32 %12, %4\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  store float %56, float addrspace(1)* %64, align 4, !tbaa !7\l  %65 = add nsw i32 %14, %4\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  store float %57, float addrspace(1)* %67, align 4, !tbaa !7\l  %68 = add nsw i32 %15, %4\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  store float %58, float addrspace(1)* %70, align 4, !tbaa !7\l  ret void\l}"];
	Node0x5fa5920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%71:\l71:                                               \l  %72 = phi float [ 0.000000e+00, %20 ], [ %105, %71 ]\l  %73 = phi i32 [ 0, %20 ], [ %121, %71 ]\l  %74 = phi float [ 0.000000e+00, %20 ], [ %120, %71 ]\l  %75 = phi float [ 0.000000e+00, %20 ], [ %115, %71 ]\l  %76 = phi float [ 0.000000e+00, %20 ], [ %110, %71 ]\l  %77 = phi i32 [ 0, %20 ], [ %122, %71 ]\l  %78 = mul nuw nsw i32 %73, %9\l  %79 = add nuw nsw i32 %78, %4\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %83 = fadd contract float %72, %82\l  %84 = add nsw i32 %79, %12\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %88 = fadd contract float %76, %87\l  %89 = add nsw i32 %79, %14\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %93 = fadd contract float %75, %92\l  %94 = add nsw i32 %79, %15\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %98 = fadd contract float %74, %97\l  %99 = or i32 %73, 1\l  %100 = mul nuw nsw i32 %99, %9\l  %101 = add nuw nsw i32 %100, %4\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %105 = fadd contract float %83, %104\l  %106 = add nsw i32 %101, %12\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %110 = fadd contract float %88, %109\l  %111 = add nsw i32 %101, %14\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %115 = fadd contract float %93, %114\l  %116 = add nsw i32 %101, %15\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %120 = fadd contract float %98, %119\l  %121 = add nuw nsw i32 %73, 2\l  %122 = add i32 %77, 2\l  %123 = icmp eq i32 %122, %21\l  br i1 %123, label %22, label %71, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5fa5920:s0 -> Node0x5fa56d0;
	Node0x5fa5920:s1 -> Node0x5fa5920;
}
