digraph "CFG for '_Z7add_imgPfS_S_iii' function" {
	label="CFG for '_Z7add_imgPfS_S_iii' function";

	Node0x478b0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = ashr i32 %3, 1\l  %10 = add nsw i32 %9, %8\l  %11 = ashr i32 %4, 1\l  %12 = add nsw i32 %11, %7\l  %13 = shl nsw i32 %3, 1\l  %14 = add nsw i32 %13, 2\l  %15 = mul nsw i32 %12, %14\l  %16 = add nsw i32 %10, %15\l  %17 = icmp sgt i32 %5, 0\l  br i1 %17, label %18, label %46\l|{<s0>T|<s1>F}}"];
	Node0x478b0e0:s0 -> Node0x478c080;
	Node0x478b0e0:s1 -> Node0x478cd50;
	Node0x478c080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%18:\l18:                                               \l  %19 = mul i32 %14, %4\l  %20 = shl i32 %19, 1\l  %21 = add i32 %5, -1\l  %22 = lshr i32 %21, 1\l  %23 = add nuw i32 %22, 1\l  %24 = and i32 %23, 7\l  %25 = icmp ult i32 %5, 15\l  br i1 %25, label %28, label %26\l|{<s0>T|<s1>F}}"];
	Node0x478c080:s0 -> Node0x478d310;
	Node0x478c080:s1 -> Node0x478d360;
	Node0x478d360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%26:\l26:                                               \l  %27 = and i32 %23, -8\l  br label %59\l}"];
	Node0x478d360 -> Node0x478d560;
	Node0x478d310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%28:\l28:                                               \l  %29 = phi float [ undef, %18 ], [ %117, %59 ]\l  %30 = phi i32 [ 0, %18 ], [ %118, %59 ]\l  %31 = phi float [ 0.000000e+00, %18 ], [ %117, %59 ]\l  %32 = icmp eq i32 %24, 0\l  br i1 %32, label %46, label %33\l|{<s0>T|<s1>F}}"];
	Node0x478d310:s0 -> Node0x478cd50;
	Node0x478d310:s1 -> Node0x478cb70;
	Node0x478cb70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  %34 = phi i32 [ %43, %33 ], [ %30, %28 ]\l  %35 = phi float [ %42, %33 ], [ %31, %28 ]\l  %36 = phi i32 [ %44, %33 ], [ 0, %28 ]\l  %37 = mul i32 %20, %34\l  %38 = add nsw i32 %37, %16\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %42 = fadd contract float %35, %41\l  %43 = add nuw nsw i32 %34, 2\l  %44 = add i32 %36, 1\l  %45 = icmp eq i32 %44, %24\l  br i1 %45, label %46, label %33, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x478cb70:s0 -> Node0x478cd50;
	Node0x478cb70:s1 -> Node0x478cb70;
	Node0x478cd50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %6 ], [ %29, %28 ], [ %42, %33 ]\l  %48 = icmp sgt i32 %5, 1\l  br i1 %48, label %49, label %139\l|{<s0>T|<s1>F}}"];
	Node0x478cd50:s0 -> Node0x478f7d0;
	Node0x478cd50:s1 -> Node0x478f820;
	Node0x478f7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%49:\l49:                                               \l  %50 = mul i32 %14, %4\l  %51 = shl i32 %50, 1\l  %52 = add i32 %5, -2\l  %53 = lshr i32 %52, 1\l  %54 = add nuw i32 %53, 1\l  %55 = and i32 %54, 7\l  %56 = icmp ult i32 %52, 14\l  br i1 %56, label %121, label %57\l|{<s0>T|<s1>F}}"];
	Node0x478f7d0:s0 -> Node0x478fd50;
	Node0x478f7d0:s1 -> Node0x478fda0;
	Node0x478fda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%57:\l57:                                               \l  %58 = and i32 %54, -8\l  br label %146\l}"];
	Node0x478fda0 -> Node0x478ff70;
	Node0x478d560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%59:\l59:                                               \l  %60 = phi i32 [ 0, %26 ], [ %118, %59 ]\l  %61 = phi float [ 0.000000e+00, %26 ], [ %117, %59 ]\l  %62 = phi i32 [ 0, %26 ], [ %119, %59 ]\l  %63 = mul i32 %20, %60\l  %64 = add nsw i32 %63, %16\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %68 = fadd contract float %61, %67\l  %69 = or i32 %60, 2\l  %70 = mul i32 %20, %69\l  %71 = add nsw i32 %70, %16\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %75 = fadd contract float %68, %74\l  %76 = or i32 %60, 4\l  %77 = mul i32 %20, %76\l  %78 = add nsw i32 %77, %16\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %82 = fadd contract float %75, %81\l  %83 = or i32 %60, 6\l  %84 = mul i32 %20, %83\l  %85 = add nsw i32 %84, %16\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %89 = fadd contract float %82, %88\l  %90 = or i32 %60, 8\l  %91 = mul i32 %20, %90\l  %92 = add nsw i32 %91, %16\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %96 = fadd contract float %89, %95\l  %97 = or i32 %60, 10\l  %98 = mul i32 %20, %97\l  %99 = add nsw i32 %98, %16\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %103 = fadd contract float %96, %102\l  %104 = or i32 %60, 12\l  %105 = mul i32 %20, %104\l  %106 = add nsw i32 %105, %16\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %110 = fadd contract float %103, %109\l  %111 = or i32 %60, 14\l  %112 = mul i32 %20, %111\l  %113 = add nsw i32 %112, %16\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %117 = fadd contract float %110, %116\l  %118 = add nuw nsw i32 %60, 16\l  %119 = add i32 %62, 8\l  %120 = icmp eq i32 %119, %27\l  br i1 %120, label %28, label %59, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x478d560:s0 -> Node0x478d310;
	Node0x478d560:s1 -> Node0x478d560;
	Node0x478fd50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%121:\l121:                                              \l  %122 = phi float [ undef, %49 ], [ %204, %146 ]\l  %123 = phi i32 [ 1, %49 ], [ %205, %146 ]\l  %124 = phi float [ 0.000000e+00, %49 ], [ %204, %146 ]\l  %125 = icmp eq i32 %55, 0\l  br i1 %125, label %139, label %126\l|{<s0>T|<s1>F}}"];
	Node0x478fd50:s0 -> Node0x478f820;
	Node0x478fd50:s1 -> Node0x4793640;
	Node0x4793640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%126:\l126:                                              \l  %127 = phi i32 [ %136, %126 ], [ %123, %121 ]\l  %128 = phi float [ %135, %126 ], [ %124, %121 ]\l  %129 = phi i32 [ %137, %126 ], [ 0, %121 ]\l  %130 = mul i32 %51, %127\l  %131 = add nsw i32 %130, %16\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %135 = fadd contract float %128, %134\l  %136 = add nuw nsw i32 %127, 2\l  %137 = add i32 %129, 1\l  %138 = icmp eq i32 %137, %55\l  br i1 %138, label %139, label %126, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4793640:s0 -> Node0x478f820;
	Node0x4793640:s1 -> Node0x4793640;
	Node0x478f820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%139:\l139:                                              \l  %140 = phi float [ 0.000000e+00, %46 ], [ %122, %121 ], [ %135, %126 ]\l  %141 = mul nsw i32 %7, %3\l  %142 = add nsw i32 %141, %8\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %1, i64 %143\l  store float %47, float addrspace(1)* %144, align 4, !tbaa !5\l  %145 = getelementptr inbounds float, float addrspace(1)* %2, i64 %143\l  store float %140, float addrspace(1)* %145, align 4, !tbaa !5\l  ret void\l}"];
	Node0x478ff70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%146:\l146:                                              \l  %147 = phi i32 [ 1, %57 ], [ %205, %146 ]\l  %148 = phi float [ 0.000000e+00, %57 ], [ %204, %146 ]\l  %149 = phi i32 [ 0, %57 ], [ %206, %146 ]\l  %150 = mul i32 %51, %147\l  %151 = add nsw i32 %150, %16\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %0, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %155 = fadd contract float %148, %154\l  %156 = add nuw nsw i32 %147, 2\l  %157 = mul i32 %51, %156\l  %158 = add nsw i32 %157, %16\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %0, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %162 = fadd contract float %155, %161\l  %163 = add nuw nsw i32 %147, 4\l  %164 = mul i32 %51, %163\l  %165 = add nsw i32 %164, %16\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %0, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %169 = fadd contract float %162, %168\l  %170 = add nuw nsw i32 %147, 6\l  %171 = mul i32 %51, %170\l  %172 = add nsw i32 %171, %16\l  %173 = sext i32 %172 to i64\l  %174 = getelementptr inbounds float, float addrspace(1)* %0, i64 %173\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %176 = fadd contract float %169, %175\l  %177 = add nuw nsw i32 %147, 8\l  %178 = mul i32 %51, %177\l  %179 = add nsw i32 %178, %16\l  %180 = sext i32 %179 to i64\l  %181 = getelementptr inbounds float, float addrspace(1)* %0, i64 %180\l  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %183 = fadd contract float %176, %182\l  %184 = add nuw nsw i32 %147, 10\l  %185 = mul i32 %51, %184\l  %186 = add nsw i32 %185, %16\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %190 = fadd contract float %183, %189\l  %191 = add nuw nsw i32 %147, 12\l  %192 = mul i32 %51, %191\l  %193 = add nsw i32 %192, %16\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %0, i64 %194\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %197 = fadd contract float %190, %196\l  %198 = add nuw nsw i32 %147, 14\l  %199 = mul i32 %51, %198\l  %200 = add nsw i32 %199, %16\l  %201 = sext i32 %200 to i64\l  %202 = getelementptr inbounds float, float addrspace(1)* %0, i64 %201\l  %203 = load float, float addrspace(1)* %202, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %204 = fadd contract float %197, %203\l  %205 = add nuw nsw i32 %147, 16\l  %206 = add i32 %149, 8\l  %207 = icmp eq i32 %206, %58\l  br i1 %207, label %121, label %146, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x478ff70:s0 -> Node0x478fd50;
	Node0x478ff70:s1 -> Node0x478ff70;
}
