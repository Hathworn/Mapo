digraph "CFG for '_Z16cube_select_fouriifPKfPi' function" {
	label="CFG for '_Z16cube_select_fouriifPKfPi' function";

	Node0x5591e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = mul nsw i32 %6, %1\l  %8 = mul nsw i32 %7, 3\l  %9 = sext i32 %8 to i64\l  %10 = getelementptr inbounds float, float addrspace(1)* %3, i64 %9\l  %11 = shl nsw i32 %7, 5\l  %12 = sext i32 %11 to i64\l  %13 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %12\l  %14 = fmul contract float %2, %2\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %16 = icmp slt i32 %15, %1\l  br i1 %16, label %17, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5591e10:s0 -> Node0x5592720;
	Node0x5591e10:s1 -> Node0x5593a30;
	Node0x5592720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%17:\l17:                                               \l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = getelementptr i8, i8 addrspace(4)* %18, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = insertelement \<32 x float\> poison, float %14, i64 0\l  %24 = shufflevector \<32 x float\> %23, \<32 x float\> poison, \<32 x i32\>\l... zeroinitializer\l  br label %26\l}"];
	Node0x5592720 -> Node0x5595200;
	Node0x5593a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%25:\l25:                                               \l  ret void\l}"];
	Node0x5595200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%26:\l26:                                               \l  %27 = phi i32 [ %15, %17 ], [ %137, %136 ]\l  %28 = mul nsw i32 %27, 3\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %10, i64 %29\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %32 = add nsw i32 %28, 1\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %10, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %36 = add nsw i32 %28, 2\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %10, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %40 = shl nsw i32 %27, 5\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %41\l  store i32 %27, i32 addrspace(1)* %42, align 4, !tbaa !11\l  %43 = add nuw nsw i32 %40, 1\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %44\l  store i32 %27, i32 addrspace(1)* %45, align 4, !tbaa !11\l  %46 = add nuw nsw i32 %40, 2\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %47\l  store i32 %27, i32 addrspace(1)* %48, align 4, !tbaa !11\l  %49 = add nuw nsw i32 %40, 3\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %50\l  store i32 %27, i32 addrspace(1)* %51, align 4, !tbaa !11\l  %52 = add nuw nsw i32 %40, 4\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %53\l  store i32 %27, i32 addrspace(1)* %54, align 4, !tbaa !11\l  %55 = add nuw nsw i32 %40, 5\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %56\l  store i32 %27, i32 addrspace(1)* %57, align 4, !tbaa !11\l  %58 = add nuw nsw i32 %40, 6\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %59\l  store i32 %27, i32 addrspace(1)* %60, align 4, !tbaa !11\l  %61 = add nuw nsw i32 %40, 7\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %62\l  store i32 %27, i32 addrspace(1)* %63, align 4, !tbaa !11\l  %64 = add nuw nsw i32 %40, 8\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %65\l  store i32 %27, i32 addrspace(1)* %66, align 4, !tbaa !11\l  %67 = add nuw nsw i32 %40, 9\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %68\l  store i32 %27, i32 addrspace(1)* %69, align 4, !tbaa !11\l  %70 = add nuw nsw i32 %40, 10\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %71\l  store i32 %27, i32 addrspace(1)* %72, align 4, !tbaa !11\l  %73 = add nuw nsw i32 %40, 11\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %74\l  store i32 %27, i32 addrspace(1)* %75, align 4, !tbaa !11\l  %76 = add nuw nsw i32 %40, 12\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %77\l  store i32 %27, i32 addrspace(1)* %78, align 4, !tbaa !11\l  %79 = add nuw nsw i32 %40, 13\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %80\l  store i32 %27, i32 addrspace(1)* %81, align 4, !tbaa !11\l  %82 = add nuw nsw i32 %40, 14\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %83\l  store i32 %27, i32 addrspace(1)* %84, align 4, !tbaa !11\l  %85 = add nuw nsw i32 %40, 15\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %86\l  store i32 %27, i32 addrspace(1)* %87, align 4, !tbaa !11\l  %88 = add nuw nsw i32 %40, 16\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %89\l  store i32 %27, i32 addrspace(1)* %90, align 4, !tbaa !11\l  %91 = add nuw nsw i32 %40, 17\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %92\l  store i32 %27, i32 addrspace(1)* %93, align 4, !tbaa !11\l  %94 = add nuw nsw i32 %40, 18\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %95\l  store i32 %27, i32 addrspace(1)* %96, align 4, !tbaa !11\l  %97 = add nuw nsw i32 %40, 19\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %98\l  store i32 %27, i32 addrspace(1)* %99, align 4, !tbaa !11\l  %100 = add nuw nsw i32 %40, 20\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %101\l  store i32 %27, i32 addrspace(1)* %102, align 4, !tbaa !11\l  %103 = add nuw nsw i32 %40, 21\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %104\l  store i32 %27, i32 addrspace(1)* %105, align 4, !tbaa !11\l  %106 = add nuw nsw i32 %40, 22\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %107\l  store i32 %27, i32 addrspace(1)* %108, align 4, !tbaa !11\l  %109 = add nuw nsw i32 %40, 23\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %110\l  store i32 %27, i32 addrspace(1)* %111, align 4, !tbaa !11\l  %112 = add nuw nsw i32 %40, 24\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %113\l  store i32 %27, i32 addrspace(1)* %114, align 4, !tbaa !11\l  %115 = add nuw nsw i32 %40, 25\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %116\l  store i32 %27, i32 addrspace(1)* %117, align 4, !tbaa !11\l  %118 = add nuw nsw i32 %40, 26\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %119\l  store i32 %27, i32 addrspace(1)* %120, align 4, !tbaa !11\l  %121 = add nuw nsw i32 %40, 27\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %122\l  store i32 %27, i32 addrspace(1)* %123, align 4, !tbaa !11\l  %124 = add nuw nsw i32 %40, 28\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %125\l  store i32 %27, i32 addrspace(1)* %126, align 4, !tbaa !11\l  %127 = add nuw nsw i32 %40, 29\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %128\l  store i32 %27, i32 addrspace(1)* %129, align 4, !tbaa !11\l  %130 = add nuw nsw i32 %40, 30\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %131\l  store i32 %27, i32 addrspace(1)* %132, align 4, !tbaa !11\l  %133 = add nuw nsw i32 %40, 31\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %134\l  store i32 %27, i32 addrspace(1)* %135, align 4, !tbaa !11\l  br label %139\l}"];
	Node0x5595200 -> Node0x5598910;
	Node0x5595440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%136:\l136:                                              \l  %137 = add i32 %27, %22\l  %138 = icmp slt i32 %137, %1\l  br i1 %138, label %26, label %25, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5595440:s0 -> Node0x5595200;
	Node0x5595440:s1 -> Node0x5593a30;
	Node0x5598910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%139:\l139:                                              \l  %140 = phi i32 [ 0, %26 ], [ %217, %215 ]\l  %141 = phi \<32 x float\> [ %24, %26 ], [ %216, %215 ]\l  %142 = icmp eq i32 %27, %140\l  br i1 %142, label %215, label %143\l|{<s0>T|<s1>F}}"];
	Node0x5598910:s0 -> Node0x559c720;
	Node0x5598910:s1 -> Node0x559ca10;
	Node0x559ca10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%143:\l143:                                              \l  %144 = mul nsw i32 %140, 3\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %10, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %148 = add nuw nsw i32 %144, 1\l  %149 = zext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %10, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %152 = add nuw nsw i32 %144, 2\l  %153 = zext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %10, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %156 = fsub contract float %31, %147\l  %157 = fmul contract float %156, %156\l  %158 = fsub contract float %35, %151\l  %159 = fmul contract float %158, %158\l  %160 = fadd contract float %157, %159\l  %161 = fsub contract float %39, %155\l  %162 = fmul contract float %161, %161\l  %163 = fadd contract float %160, %162\l  %164 = fcmp contract ogt float %163, %14\l  br i1 %164, label %215, label %165\l|{<s0>T|<s1>F}}"];
	Node0x559ca10:s0 -> Node0x559c720;
	Node0x559ca10:s1 -> Node0x559d740;
	Node0x559d740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%165:\l165:                                              \l  %166 = fcmp contract ogt float %147, %31\l  %167 = fcmp contract ogt float %151, %35\l  %168 = fcmp contract ogt float %155, %39\l  %169 = select i1 %166, i32 16, i32 0\l  %170 = select i1 %167, i32 8, i32 0\l  %171 = or i32 %170, %169\l  %172 = select i1 %168, i32 4, i32 0\l  %173 = or i32 %171, %172\l  %174 = extractelement \<32 x float\> %141, i32 %173\l  %175 = fcmp contract olt float %163, %174\l  br i1 %175, label %176, label %203\l|{<s0>T|<s1>F}}"];
	Node0x559d740:s0 -> Node0x559de80;
	Node0x559d740:s1 -> Node0x559ded0;
	Node0x559de80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%176:\l176:                                              \l  %177 = phi i1 [ false, %211 ], [ true, %207 ], [ true, %203 ], [ true, %165 ]\l  %178 = phi i32 [ 3, %211 ], [ 2, %207 ], [ 1, %203 ], [ 0, %165 ]\l  %179 = phi i32 [ %212, %211 ], [ %208, %207 ], [ %204, %203 ], [ %173, %165 ]\l  %180 = or i32 %173, %40\l  br i1 %177, label %187, label %181\l|{<s0>T|<s1>F}}"];
	Node0x559de80:s0 -> Node0x559e600;
	Node0x559de80:s1 -> Node0x559e690;
	Node0x559e690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%181:\l181:                                              \l  %182 = phi \<32 x float\> [ %141, %176 ], [ %200, %187 ]\l  %183 = or i32 %180, %178\l  %184 = sext i32 %183 to i64\l  %185 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %184\l  store i32 %140, i32 addrspace(1)* %185, align 4, !tbaa !11\l  %186 = insertelement \<32 x float\> %182, float %163, i32 %179\l  br label %215\l}"];
	Node0x559e690 -> Node0x559c720;
	Node0x559e600 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%187:\l187:                                              \l  %188 = phi i32 [ %201, %187 ], [ 3, %176 ]\l  %189 = phi \<32 x float\> [ %200, %187 ], [ %141, %176 ]\l  %190 = add nuw nsw i32 %180, %188\l  %191 = add nsw i32 %190, -1\l  %192 = sext i32 %191 to i64\l  %193 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %192\l  %194 = load i32, i32 addrspace(1)* %193, align 4, !tbaa !11\l  %195 = sext i32 %190 to i64\l  %196 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %195\l  store i32 %194, i32 addrspace(1)* %196, align 4, !tbaa !11\l  %197 = add nuw nsw i32 %188, %173\l  %198 = add nsw i32 %197, -1\l  %199 = extractelement \<32 x float\> %189, i32 %198\l  %200 = insertelement \<32 x float\> %189, float %199, i32 %197\l  %201 = add nsw i32 %188, -1\l  %202 = icmp ugt i32 %201, %178\l  br i1 %202, label %187, label %181, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x559e600:s0 -> Node0x559e600;
	Node0x559e600:s1 -> Node0x559e690;
	Node0x559ded0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%203:\l203:                                              \l  %204 = or i32 %173, 1\l  %205 = extractelement \<32 x float\> %141, i32 %204\l  %206 = fcmp contract olt float %163, %205\l  br i1 %206, label %176, label %207\l|{<s0>T|<s1>F}}"];
	Node0x559ded0:s0 -> Node0x559de80;
	Node0x559ded0:s1 -> Node0x559e090;
	Node0x559e090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%207:\l207:                                              \l  %208 = or i32 %173, 2\l  %209 = extractelement \<32 x float\> %141, i32 %208\l  %210 = fcmp contract olt float %163, %209\l  br i1 %210, label %176, label %211\l|{<s0>T|<s1>F}}"];
	Node0x559e090:s0 -> Node0x559de80;
	Node0x559e090:s1 -> Node0x559e010;
	Node0x559e010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%211:\l211:                                              \l  %212 = or i32 %173, 3\l  %213 = extractelement \<32 x float\> %141, i32 %212\l  %214 = fcmp contract olt float %163, %213\l  br i1 %214, label %176, label %215\l|{<s0>T|<s1>F}}"];
	Node0x559e010:s0 -> Node0x559de80;
	Node0x559e010:s1 -> Node0x559c720;
	Node0x559c720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%215:\l215:                                              \l  %216 = phi \<32 x float\> [ %141, %139 ], [ %141, %143 ], [ %186, %181 ], [\l... %141, %211 ]\l  %217 = add nuw nsw i32 %140, 1\l  %218 = icmp eq i32 %217, %1\l  br i1 %218, label %136, label %139, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x559c720:s0 -> Node0x5595440;
	Node0x559c720:s1 -> Node0x5598910;
}
