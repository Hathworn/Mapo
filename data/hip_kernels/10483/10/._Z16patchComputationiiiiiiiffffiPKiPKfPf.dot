digraph "CFG for '_Z16patchComputationiiiiiiiffffiPKiPKfPf' function" {
	label="CFG for '_Z16patchComputationiiiiiiiffffiPKiPKfPf' function";

	Node0x5092a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%15:\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %18 = getelementptr i8, i8 addrspace(4)* %17, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %16, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %0\l  br i1 %25, label %26, label %353\l|{<s0>T|<s1>F}}"];
	Node0x5092a00:s0 -> Node0x50955a0;
	Node0x5092a00:s1 -> Node0x5095630;
	Node0x50955a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %11, %5\l  %28 = sdiv i32 %24, %27\l  %29 = mul nsw i32 %28, %27\l  %30 = sub nsw i32 %24, %29\l  %31 = sdiv i32 %30, %11\l  %32 = mul nsw i32 %31, %11\l  %33 = sub nsw i32 %30, %32\l  %34 = add nsw i32 %33, 1\l  %35 = add nsw i32 %31, 1\l  %36 = mul nsw i32 %35, %3\l  %37 = icmp sgt i32 %36, %2\l  %38 = mul nsw i32 %31, %3\l  %39 = sub nsw i32 %2, %38\l  %40 = select i1 %37, i32 %39, i32 %3\l  %41 = add nsw i32 %28, 1\l  %42 = mul i32 %41, %4\l  %43 = icmp sgt i32 %42, %1\l  %44 = mul i32 %28, %4\l  %45 = sub nsw i32 %1, %44\l  %46 = select i1 %43, i32 %45, i32 %4\l  %47 = icmp sgt i32 %40, 0\l  br i1 %47, label %48, label %62\l|{<s0>T|<s1>F}}"];
	Node0x50955a0:s0 -> Node0x5093990;
	Node0x50955a0:s1 -> Node0x5096500;
	Node0x5093990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%48:\l48:                                               \l  %49 = icmp sgt i32 %46, 0\l  %50 = tail call i32 @llvm.smin.i32(i32 %1, i32 %42)\l  %51 = xor i32 %44, -1\l  %52 = add i32 %50, %51\l  %53 = and i32 %46, 7\l  %54 = icmp ult i32 %52, 7\l  %55 = and i32 %46, -8\l  %56 = icmp eq i32 %53, 0\l  br label %57\l}"];
	Node0x5093990 -> Node0x5096c90;
	Node0x5096c90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %48 ], [ %96, %95 ]\l  %59 = phi i32 [ 0, %48 ], [ %97, %95 ]\l  br i1 %49, label %60, label %95\l|{<s0>T|<s1>F}}"];
	Node0x5096c90:s0 -> Node0x5097a70;
	Node0x5096c90:s1 -> Node0x5097810;
	Node0x5097a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%60:\l60:                                               \l  %61 = add nsw i32 %59, %38\l  br i1 %54, label %75, label %99\l|{<s0>T|<s1>F}}"];
	Node0x5097a70:s0 -> Node0x5097c40;
	Node0x5097a70:s1 -> Node0x5097c90;
	Node0x5096500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%62:\l62:                                               \l  %63 = phi float [ 0.000000e+00, %26 ], [ %96, %95 ]\l  %64 = fcmp contract ogt float %63, 0.000000e+00\l  br i1 %64, label %65, label %332\l|{<s0>T|<s1>F}}"];
	Node0x5096500:s0 -> Node0x5095ad0;
	Node0x5096500:s1 -> Node0x5095b20;
	Node0x5095ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%65:\l65:                                               \l  br i1 %47, label %66, label %193\l|{<s0>T|<s1>F}}"];
	Node0x5095ad0:s0 -> Node0x5095c60;
	Node0x5095ad0:s1 -> Node0x5098320;
	Node0x5095c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%66:\l66:                                               \l  %67 = icmp sgt i32 %46, 0\l  %68 = tail call i32 @llvm.smin.i32(i32 %1, i32 %42)\l  %69 = xor i32 %44, -1\l  %70 = add i32 %68, %69\l  %71 = and i32 %46, 3\l  %72 = icmp ult i32 %70, 3\l  %73 = and i32 %46, -4\l  %74 = icmp eq i32 %71, 0\l  br label %185\l}"];
	Node0x5095c60 -> Node0x50989c0;
	Node0x5097c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%75:\l75:                                               \l  %76 = phi float [ undef, %60 ], [ %181, %99 ]\l  %77 = phi float [ %58, %60 ], [ %181, %99 ]\l  %78 = phi i32 [ 0, %60 ], [ %182, %99 ]\l  br i1 %56, label %95, label %79\l|{<s0>T|<s1>F}}"];
	Node0x5097c40:s0 -> Node0x5097810;
	Node0x5097c40:s1 -> Node0x5099150;
	Node0x5099150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%79:\l79:                                               \l  %80 = phi float [ %91, %79 ], [ %77, %75 ]\l  %81 = phi i32 [ %92, %79 ], [ %78, %75 ]\l  %82 = phi i32 [ %93, %79 ], [ 0, %75 ]\l  %83 = add nsw i32 %81, %44\l  %84 = mul nsw i32 %83, %1\l  %85 = add nsw i32 %61, %84\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %86\l  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %89 = icmp eq i32 %88, %34\l  %90 = uitofp i1 %89 to float\l  %91 = fadd contract float %80, %90\l  %92 = add nuw nsw i32 %81, 1\l  %93 = add i32 %82, 1\l  %94 = icmp eq i32 %93, %53\l  br i1 %94, label %95, label %79, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5099150:s0 -> Node0x5097810;
	Node0x5099150:s1 -> Node0x5099150;
	Node0x5097810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%95:\l95:                                               \l  %96 = phi float [ %58, %57 ], [ %76, %75 ], [ %91, %79 ]\l  %97 = add nuw nsw i32 %59, 1\l  %98 = icmp slt i32 %97, %40\l  br i1 %98, label %57, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5097810:s0 -> Node0x5096c90;
	Node0x5097810:s1 -> Node0x5096500;
	Node0x5097c90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%99:\l99:                                               \l  %100 = phi float [ %181, %99 ], [ %58, %60 ]\l  %101 = phi i32 [ %182, %99 ], [ 0, %60 ]\l  %102 = phi i32 [ %183, %99 ], [ 0, %60 ]\l  %103 = add nsw i32 %101, %44\l  %104 = mul nsw i32 %103, %1\l  %105 = add nsw i32 %61, %104\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %106\l  %108 = load i32, i32 addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = icmp eq i32 %108, %34\l  %110 = uitofp i1 %109 to float\l  %111 = fadd contract float %100, %110\l  %112 = or i32 %101, 1\l  %113 = add nsw i32 %112, %44\l  %114 = mul nsw i32 %113, %1\l  %115 = add nsw i32 %61, %114\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %116\l  %118 = load i32, i32 addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = icmp eq i32 %118, %34\l  %120 = uitofp i1 %119 to float\l  %121 = fadd contract float %111, %120\l  %122 = or i32 %101, 2\l  %123 = add nsw i32 %122, %44\l  %124 = mul nsw i32 %123, %1\l  %125 = add nsw i32 %61, %124\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %126\l  %128 = load i32, i32 addrspace(1)* %127, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = icmp eq i32 %128, %34\l  %130 = uitofp i1 %129 to float\l  %131 = fadd contract float %121, %130\l  %132 = or i32 %101, 3\l  %133 = add nsw i32 %132, %44\l  %134 = mul nsw i32 %133, %1\l  %135 = add nsw i32 %61, %134\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %136\l  %138 = load i32, i32 addrspace(1)* %137, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %139 = icmp eq i32 %138, %34\l  %140 = uitofp i1 %139 to float\l  %141 = fadd contract float %131, %140\l  %142 = or i32 %101, 4\l  %143 = add nsw i32 %142, %44\l  %144 = mul nsw i32 %143, %1\l  %145 = add nsw i32 %61, %144\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %146\l  %148 = load i32, i32 addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = icmp eq i32 %148, %34\l  %150 = uitofp i1 %149 to float\l  %151 = fadd contract float %141, %150\l  %152 = or i32 %101, 5\l  %153 = add nsw i32 %152, %44\l  %154 = mul nsw i32 %153, %1\l  %155 = add nsw i32 %61, %154\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %156\l  %158 = load i32, i32 addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = icmp eq i32 %158, %34\l  %160 = uitofp i1 %159 to float\l  %161 = fadd contract float %151, %160\l  %162 = or i32 %101, 6\l  %163 = add nsw i32 %162, %44\l  %164 = mul nsw i32 %163, %1\l  %165 = add nsw i32 %61, %164\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %166\l  %168 = load i32, i32 addrspace(1)* %167, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %169 = icmp eq i32 %168, %34\l  %170 = uitofp i1 %169 to float\l  %171 = fadd contract float %161, %170\l  %172 = or i32 %101, 7\l  %173 = add nsw i32 %172, %44\l  %174 = mul nsw i32 %173, %1\l  %175 = add nsw i32 %61, %174\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %176\l  %178 = load i32, i32 addrspace(1)* %177, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %179 = icmp eq i32 %178, %34\l  %180 = uitofp i1 %179 to float\l  %181 = fadd contract float %171, %180\l  %182 = add nuw nsw i32 %101, 8\l  %183 = add i32 %102, 8\l  %184 = icmp eq i32 %183, %55\l  br i1 %184, label %75, label %99, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5097c90:s0 -> Node0x5097c40;
	Node0x5097c90:s1 -> Node0x5097c90;
	Node0x50989c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%185:\l185:                                              \l  %186 = phi i32 [ 0, %66 ], [ %246, %242 ]\l  %187 = phi float [ 0.000000e+00, %66 ], [ %245, %242 ]\l  %188 = phi float [ 0.000000e+00, %66 ], [ %244, %242 ]\l  %189 = phi float [ 0.000000e+00, %66 ], [ %243, %242 ]\l  br i1 %67, label %190, label %242\l|{<s0>T|<s1>F}}"];
	Node0x50989c0:s0 -> Node0x509e790;
	Node0x50989c0:s1 -> Node0x509e360;
	Node0x509e790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%190:\l190:                                              \l  %191 = add nsw i32 %186, %38\l  %192 = sitofp i32 %186 to float\l  br i1 %72, label %207, label %248\l|{<s0>T|<s1>F}}"];
	Node0x509e790:s0 -> Node0x509e9d0;
	Node0x509e790:s1 -> Node0x509ea20;
	Node0x5098320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%193:\l193:                                              \l  %194 = phi float [ 0.000000e+00, %65 ], [ %243, %242 ]\l  %195 = phi float [ 0.000000e+00, %65 ], [ %244, %242 ]\l  %196 = phi float [ 0.000000e+00, %65 ], [ %245, %242 ]\l  %197 = fdiv contract float %195, %63\l  %198 = sitofp i32 %38 to float\l  %199 = fadd contract float %197, %198\l  %200 = fmul contract float %199, %8\l  %201 = fdiv contract float %196, %63\l  %202 = sitofp i32 %44 to float\l  %203 = fadd contract float %201, %202\l  %204 = fmul contract float %203, %9\l  %205 = fmul contract float %63, %7\l  %206 = fmul contract float %205, %10\l  br label %332\l}"];
	Node0x5098320 -> Node0x5095b20;
	Node0x509e9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%207:\l207:                                              \l  %208 = phi float [ undef, %190 ], [ %326, %325 ]\l  %209 = phi float [ undef, %190 ], [ %327, %325 ]\l  %210 = phi float [ undef, %190 ], [ %328, %325 ]\l  %211 = phi i32 [ 0, %190 ], [ %329, %325 ]\l  %212 = phi float [ %187, %190 ], [ %328, %325 ]\l  %213 = phi float [ %188, %190 ], [ %327, %325 ]\l  %214 = phi float [ %189, %190 ], [ %326, %325 ]\l  br i1 %74, label %242, label %215\l|{<s0>T|<s1>F}}"];
	Node0x509e9d0:s0 -> Node0x509e360;
	Node0x509e9d0:s1 -> Node0x509f9e0;
	Node0x509f9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%215:\l215:                                              \l  %216 = phi i32 [ %239, %235 ], [ %211, %207 ]\l  %217 = phi float [ %238, %235 ], [ %212, %207 ]\l  %218 = phi float [ %237, %235 ], [ %213, %207 ]\l  %219 = phi float [ %236, %235 ], [ %214, %207 ]\l  %220 = phi i32 [ %240, %235 ], [ 0, %207 ]\l  %221 = add nsw i32 %216, %44\l  %222 = mul nsw i32 %221, %1\l  %223 = add nsw i32 %191, %222\l  %224 = sext i32 %223 to i64\l  %225 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %224\l  %226 = load i32, i32 addrspace(1)* %225, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %227 = icmp eq i32 %226, %34\l  br i1 %227, label %228, label %235\l|{<s0>T|<s1>F}}"];
	Node0x509f9e0:s0 -> Node0x50a0540;
	Node0x509f9e0:s1 -> Node0x509fb50;
	Node0x50a0540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%228:\l228:                                              \l  %229 = getelementptr inbounds float, float addrspace(1)* %13, i64 %224\l  %230 = load float, float addrspace(1)* %229, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %231 = fadd contract float %219, %230\l  %232 = fadd contract float %218, %192\l  %233 = sitofp i32 %216 to float\l  %234 = fadd contract float %217, %233\l  br label %235\l}"];
	Node0x50a0540 -> Node0x509fb50;
	Node0x509fb50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%235:\l235:                                              \l  %236 = phi float [ %231, %228 ], [ %219, %215 ]\l  %237 = phi float [ %232, %228 ], [ %218, %215 ]\l  %238 = phi float [ %234, %228 ], [ %217, %215 ]\l  %239 = add nuw nsw i32 %216, 1\l  %240 = add i32 %220, 1\l  %241 = icmp eq i32 %240, %71\l  br i1 %241, label %242, label %215, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x509fb50:s0 -> Node0x509e360;
	Node0x509fb50:s1 -> Node0x509f9e0;
	Node0x509e360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%242:\l242:                                              \l  %243 = phi float [ %189, %185 ], [ %208, %207 ], [ %236, %235 ]\l  %244 = phi float [ %188, %185 ], [ %209, %207 ], [ %237, %235 ]\l  %245 = phi float [ %187, %185 ], [ %210, %207 ], [ %238, %235 ]\l  %246 = add nuw nsw i32 %186, 1\l  %247 = icmp slt i32 %246, %40\l  br i1 %247, label %185, label %193, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x509e360:s0 -> Node0x50989c0;
	Node0x509e360:s1 -> Node0x5098320;
	Node0x509ea20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%248:\l248:                                              \l  %249 = phi i32 [ %329, %325 ], [ 0, %190 ]\l  %250 = phi float [ %328, %325 ], [ %187, %190 ]\l  %251 = phi float [ %327, %325 ], [ %188, %190 ]\l  %252 = phi float [ %326, %325 ], [ %189, %190 ]\l  %253 = phi i32 [ %330, %325 ], [ 0, %190 ]\l  %254 = add nsw i32 %249, %44\l  %255 = mul nsw i32 %254, %1\l  %256 = add nsw i32 %191, %255\l  %257 = sext i32 %256 to i64\l  %258 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %257\l  %259 = load i32, i32 addrspace(1)* %258, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %260 = icmp eq i32 %259, %34\l  br i1 %260, label %261, label %268\l|{<s0>T|<s1>F}}"];
	Node0x509ea20:s0 -> Node0x509c050;
	Node0x509ea20:s1 -> Node0x509c0a0;
	Node0x509c050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%261:\l261:                                              \l  %262 = getelementptr inbounds float, float addrspace(1)* %13, i64 %257\l  %263 = load float, float addrspace(1)* %262, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %264 = fadd contract float %252, %263\l  %265 = fadd contract float %251, %192\l  %266 = sitofp i32 %249 to float\l  %267 = fadd contract float %250, %266\l  br label %268\l}"];
	Node0x509c050 -> Node0x509c0a0;
	Node0x509c0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%268:\l268:                                              \l  %269 = phi float [ %264, %261 ], [ %252, %248 ]\l  %270 = phi float [ %265, %261 ], [ %251, %248 ]\l  %271 = phi float [ %267, %261 ], [ %250, %248 ]\l  %272 = or i32 %249, 1\l  %273 = add nsw i32 %272, %44\l  %274 = mul nsw i32 %273, %1\l  %275 = add nsw i32 %191, %274\l  %276 = sext i32 %275 to i64\l  %277 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %276\l  %278 = load i32, i32 addrspace(1)* %277, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %279 = icmp eq i32 %278, %34\l  br i1 %279, label %280, label %287\l|{<s0>T|<s1>F}}"];
	Node0x509c0a0:s0 -> Node0x50a34a0;
	Node0x509c0a0:s1 -> Node0x50a3530;
	Node0x50a34a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%280:\l280:                                              \l  %281 = getelementptr inbounds float, float addrspace(1)* %13, i64 %276\l  %282 = load float, float addrspace(1)* %281, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %283 = fadd contract float %269, %282\l  %284 = fadd contract float %270, %192\l  %285 = sitofp i32 %272 to float\l  %286 = fadd contract float %271, %285\l  br label %287\l}"];
	Node0x50a34a0 -> Node0x50a3530;
	Node0x50a3530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%287:\l287:                                              \l  %288 = phi float [ %283, %280 ], [ %269, %268 ]\l  %289 = phi float [ %284, %280 ], [ %270, %268 ]\l  %290 = phi float [ %286, %280 ], [ %271, %268 ]\l  %291 = or i32 %249, 2\l  %292 = add nsw i32 %291, %44\l  %293 = mul nsw i32 %292, %1\l  %294 = add nsw i32 %191, %293\l  %295 = sext i32 %294 to i64\l  %296 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %295\l  %297 = load i32, i32 addrspace(1)* %296, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %298 = icmp eq i32 %297, %34\l  br i1 %298, label %299, label %306\l|{<s0>T|<s1>F}}"];
	Node0x50a3530:s0 -> Node0x50a4070;
	Node0x50a3530:s1 -> Node0x50a4100;
	Node0x50a4070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%299:\l299:                                              \l  %300 = getelementptr inbounds float, float addrspace(1)* %13, i64 %295\l  %301 = load float, float addrspace(1)* %300, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %302 = fadd contract float %288, %301\l  %303 = fadd contract float %289, %192\l  %304 = sitofp i32 %291 to float\l  %305 = fadd contract float %290, %304\l  br label %306\l}"];
	Node0x50a4070 -> Node0x50a4100;
	Node0x50a4100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%306:\l306:                                              \l  %307 = phi float [ %302, %299 ], [ %288, %287 ]\l  %308 = phi float [ %303, %299 ], [ %289, %287 ]\l  %309 = phi float [ %305, %299 ], [ %290, %287 ]\l  %310 = or i32 %249, 3\l  %311 = add nsw i32 %310, %44\l  %312 = mul nsw i32 %311, %1\l  %313 = add nsw i32 %191, %312\l  %314 = sext i32 %313 to i64\l  %315 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %314\l  %316 = load i32, i32 addrspace(1)* %315, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %317 = icmp eq i32 %316, %34\l  br i1 %317, label %318, label %325\l|{<s0>T|<s1>F}}"];
	Node0x50a4100:s0 -> Node0x50a4c40;
	Node0x50a4100:s1 -> Node0x509f370;
	Node0x50a4c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%318:\l318:                                              \l  %319 = getelementptr inbounds float, float addrspace(1)* %13, i64 %314\l  %320 = load float, float addrspace(1)* %319, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %321 = fadd contract float %307, %320\l  %322 = fadd contract float %308, %192\l  %323 = sitofp i32 %310 to float\l  %324 = fadd contract float %309, %323\l  br label %325\l}"];
	Node0x50a4c40 -> Node0x509f370;
	Node0x509f370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%325:\l325:                                              \l  %326 = phi float [ %321, %318 ], [ %307, %306 ]\l  %327 = phi float [ %322, %318 ], [ %308, %306 ]\l  %328 = phi float [ %324, %318 ], [ %309, %306 ]\l  %329 = add nuw nsw i32 %249, 4\l  %330 = add i32 %253, 4\l  %331 = icmp eq i32 %330, %73\l  br i1 %331, label %207, label %248, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x509f370:s0 -> Node0x509e9d0;
	Node0x509f370:s1 -> Node0x509ea20;
	Node0x5095b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%332:\l332:                                              \l  %333 = phi float [ %194, %193 ], [ 0.000000e+00, %62 ]\l  %334 = phi float [ %200, %193 ], [ 0.000000e+00, %62 ]\l  %335 = phi float [ %204, %193 ], [ 0.000000e+00, %62 ]\l  %336 = phi float [ %206, %193 ], [ 0.000000e+00, %62 ]\l  %337 = phi float [ %205, %193 ], [ %63, %62 ]\l  %338 = mul nsw i32 %24, 5\l  %339 = sext i32 %338 to i64\l  %340 = getelementptr inbounds float, float addrspace(1)* %14, i64 %339\l  store float %337, float addrspace(1)* %340, align 4, !tbaa !16\l  %341 = add nsw i32 %338, 1\l  %342 = sext i32 %341 to i64\l  %343 = getelementptr inbounds float, float addrspace(1)* %14, i64 %342\l  store float %336, float addrspace(1)* %343, align 4, !tbaa !16\l  %344 = add nsw i32 %338, 2\l  %345 = sext i32 %344 to i64\l  %346 = getelementptr inbounds float, float addrspace(1)* %14, i64 %345\l  store float %333, float addrspace(1)* %346, align 4, !tbaa !16\l  %347 = add nsw i32 %338, 3\l  %348 = sext i32 %347 to i64\l  %349 = getelementptr inbounds float, float addrspace(1)* %14, i64 %348\l  store float %334, float addrspace(1)* %349, align 4, !tbaa !16\l  %350 = add nsw i32 %338, 4\l  %351 = sext i32 %350 to i64\l  %352 = getelementptr inbounds float, float addrspace(1)* %14, i64 %351\l  store float %335, float addrspace(1)* %352, align 4, !tbaa !16\l  br label %353\l}"];
	Node0x5095b20 -> Node0x5095630;
	Node0x5095630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%353:\l353:                                              \l  ret void\l}"];
}
