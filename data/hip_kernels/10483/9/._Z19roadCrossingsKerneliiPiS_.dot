digraph "CFG for '_Z19roadCrossingsKerneliiPiS_' function" {
	label="CFG for '_Z19roadCrossingsKerneliiPiS_' function";

	Node0x56eceb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %0\l  br i1 %14, label %15, label %95\l|{<s0>T|<s1>F}}"];
	Node0x56eceb0:s0 -> Node0x56eedc0;
	Node0x56eceb0:s1 -> Node0x56eee50;
	Node0x56eedc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = sext i32 %13 to i64\l  %17 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %16\l  store i32 0, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %18 = icmp sgt i32 %1, 0\l  br i1 %18, label %19, label %95\l|{<s0>T|<s1>F}}"];
	Node0x56eedc0:s0 -> Node0x56ef370;
	Node0x56eedc0:s1 -> Node0x56eee50;
	Node0x56ef370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%19:\l19:                                               \l  %20 = mul nsw i32 %13, %1\l  %21 = and i32 %1, 7\l  %22 = icmp ult i32 %1, 8\l  br i1 %22, label %79, label %23\l|{<s0>T|<s1>F}}"];
	Node0x56ef370:s0 -> Node0x56ef690;
	Node0x56ef370:s1 -> Node0x56ef6e0;
	Node0x56ef6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %1, -8\l  br label %25\l}"];
	Node0x56ef6e0 -> Node0x56ef8e0;
	Node0x56ef8e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%25:\l25:                                               \l  %26 = phi i32 [ 0, %23 ], [ %75, %25 ]\l  %27 = phi i32 [ 0, %23 ], [ %76, %25 ]\l  %28 = phi i32 [ 0, %23 ], [ %77, %25 ]\l  %29 = add nsw i32 %27, %20\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %30\l  %32 = load i32, i32 addrspace(1)* %31, align 4, !tbaa !7\l  %33 = add nsw i32 %26, %32\l  store i32 %33, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %34 = or i32 %27, 1\l  %35 = add nsw i32 %34, %20\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %36\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !tbaa !7\l  %39 = add nsw i32 %33, %38\l  store i32 %39, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %40 = or i32 %27, 2\l  %41 = add nsw i32 %40, %20\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %42\l  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !7\l  %45 = add nsw i32 %39, %44\l  store i32 %45, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %46 = or i32 %27, 3\l  %47 = add nsw i32 %46, %20\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %48\l  %50 = load i32, i32 addrspace(1)* %49, align 4, !tbaa !7\l  %51 = add nsw i32 %45, %50\l  store i32 %51, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %52 = or i32 %27, 4\l  %53 = add nsw i32 %52, %20\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %54\l  %56 = load i32, i32 addrspace(1)* %55, align 4, !tbaa !7\l  %57 = add nsw i32 %51, %56\l  store i32 %57, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %58 = or i32 %27, 5\l  %59 = add nsw i32 %58, %20\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %60\l  %62 = load i32, i32 addrspace(1)* %61, align 4, !tbaa !7\l  %63 = add nsw i32 %57, %62\l  store i32 %63, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %64 = or i32 %27, 6\l  %65 = add nsw i32 %64, %20\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %66\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !7\l  %69 = add nsw i32 %63, %68\l  store i32 %69, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %70 = or i32 %27, 7\l  %71 = add nsw i32 %70, %20\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %72\l  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !7\l  %75 = add nsw i32 %69, %74\l  store i32 %75, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %76 = add nuw nsw i32 %27, 8\l  %77 = add i32 %28, 8\l  %78 = icmp eq i32 %77, %24\l  br i1 %78, label %79, label %25, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x56ef8e0:s0 -> Node0x56ef690;
	Node0x56ef8e0:s1 -> Node0x56ef8e0;
	Node0x56ef690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%79:\l79:                                               \l  %80 = phi i32 [ 0, %19 ], [ %75, %25 ]\l  %81 = phi i32 [ 0, %19 ], [ %76, %25 ]\l  %82 = icmp eq i32 %21, 0\l  br i1 %82, label %95, label %83\l|{<s0>T|<s1>F}}"];
	Node0x56ef690:s0 -> Node0x56eee50;
	Node0x56ef690:s1 -> Node0x56f2980;
	Node0x56f2980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%83:\l83:                                               \l  %84 = phi i32 [ %91, %83 ], [ %80, %79 ]\l  %85 = phi i32 [ %92, %83 ], [ %81, %79 ]\l  %86 = phi i32 [ %93, %83 ], [ 0, %79 ]\l  %87 = add nsw i32 %85, %20\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %88\l  %90 = load i32, i32 addrspace(1)* %89, align 4, !tbaa !7\l  %91 = add nsw i32 %84, %90\l  store i32 %91, i32 addrspace(1)* %17, align 4, !tbaa !7\l  %92 = add nuw nsw i32 %85, 1\l  %93 = add i32 %86, 1\l  %94 = icmp eq i32 %93, %21\l  br i1 %94, label %95, label %83, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x56f2980:s0 -> Node0x56eee50;
	Node0x56f2980:s1 -> Node0x56f2980;
	Node0x56eee50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%95:\l95:                                               \l  ret void\l}"];
}
