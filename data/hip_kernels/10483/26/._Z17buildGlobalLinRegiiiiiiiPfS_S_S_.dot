digraph "CFG for '_Z17buildGlobalLinRegiiiiiiiPfS_S_S_' function" {
	label="CFG for '_Z17buildGlobalLinRegiiiiiiiPfS_S_S_' function";

	Node0x63f7bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %12, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = add i32 %18, %19\l  %21 = icmp slt i32 %20, %0\l  br i1 %21, label %22, label %645\l|{<s0>T|<s1>F}}"];
	Node0x63f7bc0:s0 -> Node0x63f95e0;
	Node0x63f7bc0:s1 -> Node0x63f9670;
	Node0x63f95e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%22:\l22:                                               \l  %23 = sext i32 %1 to i64\l  %24 = shl nsw i64 %23, 2\l  %25 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %24) #12\l  %26 = ptrtoint i8 addrspace(1)* %25 to i64\l  %27 = bitcast i8 addrspace(1)* %25 to i32 addrspace(1)*\l  %28 = icmp sgt i32 %1, 0\l  br i1 %28, label %29, label %160\l|{<s0>T|<s1>F}}"];
	Node0x63f95e0:s0 -> Node0x63f9bd0;
	Node0x63f95e0:s1 -> Node0x63f9c60;
	Node0x63f9bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%29:\l29:                                               \l  %30 = sitofp i32 %2 to double\l  %31 = tail call double @llvm.fabs.f64(double %30)\l  %32 = tail call double @llvm.amdgcn.frexp.mant.f64(double %31)\l  %33 = fcmp olt double %32, 0x3FE5555555555555\l  %34 = zext i1 %33 to i32\l  %35 = tail call double @llvm.amdgcn.ldexp.f64(double %32, i32 %34)\l  %36 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %31)\l  %37 = sub nsw i32 %36, %34\l  %38 = fadd double %35, -1.000000e+00\l  %39 = fadd double %35, 1.000000e+00\l  %40 = fadd double %39, -1.000000e+00\l  %41 = fsub double %35, %40\l  %42 = tail call double @llvm.amdgcn.rcp.f64(double %39)\l  %43 = fneg double %39\l  %44 = tail call double @llvm.fma.f64(double %43, double %42, double\l... 1.000000e+00)\l  %45 = tail call double @llvm.fma.f64(double %44, double %42, double %42)\l  %46 = tail call double @llvm.fma.f64(double %43, double %45, double\l... 1.000000e+00)\l  %47 = tail call double @llvm.fma.f64(double %46, double %45, double %45)\l  %48 = fmul double %38, %47\l  %49 = fmul double %39, %48\l  %50 = fneg double %49\l  %51 = tail call double @llvm.fma.f64(double %48, double %39, double %50)\l  %52 = tail call double @llvm.fma.f64(double %48, double %41, double %51)\l  %53 = fadd double %49, %52\l  %54 = fsub double %53, %49\l  %55 = fsub double %52, %54\l  %56 = fsub double %38, %53\l  %57 = fsub double %38, %56\l  %58 = fsub double %57, %53\l  %59 = fsub double %58, %55\l  %60 = fadd double %56, %59\l  %61 = fmul double %47, %60\l  %62 = fadd double %48, %61\l  %63 = fsub double %62, %48\l  %64 = fsub double %61, %63\l  %65 = fmul double %62, %62\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %62, double %62, double %66)\l  %68 = fmul double %64, 2.000000e+00\l  %69 = tail call double @llvm.fma.f64(double %62, double %68, double %67)\l  %70 = fadd double %65, %69\l  %71 = fsub double %70, %65\l  %72 = fsub double %69, %71\l  %73 = tail call double @llvm.fma.f64(double %70, double 0x3FBDEE674222DE17,\l... double 0x3FBA6564968915A9)\l  %74 = tail call double @llvm.fma.f64(double %70, double %73, double\l... 0x3FBE25E43ABE935A)\l  %75 = tail call double @llvm.fma.f64(double %70, double %74, double\l... 0x3FC110EF47E6C9C2)\l  %76 = tail call double @llvm.fma.f64(double %70, double %75, double\l... 0x3FC3B13BCFA74449)\l  %77 = tail call double @llvm.fma.f64(double %70, double %76, double\l... 0x3FC745D171BF3C30)\l  %78 = tail call double @llvm.fma.f64(double %70, double %77, double\l... 0x3FCC71C71C7792CE)\l  %79 = tail call double @llvm.fma.f64(double %70, double %78, double\l... 0x3FD24924924920DA)\l  %80 = tail call double @llvm.fma.f64(double %70, double %79, double\l... 0x3FD999999999999C)\l  %81 = sitofp i32 %37 to double\l  %82 = fmul double %81, 0x3FE62E42FEFA39EF\l  %83 = fneg double %82\l  %84 = tail call double @llvm.fma.f64(double %81, double 0x3FE62E42FEFA39EF,\l... double %83)\l  %85 = tail call double @llvm.fma.f64(double %81, double 0x3C7ABC9E3B39803F,\l... double %84)\l  %86 = fadd double %82, %85\l  %87 = fsub double %86, %82\l  %88 = fsub double %85, %87\l  %89 = tail call double @llvm.amdgcn.ldexp.f64(double %62, i32 1)\l  %90 = tail call double @llvm.amdgcn.ldexp.f64(double %64, i32 1)\l  %91 = fmul double %62, %70\l  %92 = fneg double %91\l  %93 = tail call double @llvm.fma.f64(double %70, double %62, double %92)\l  %94 = tail call double @llvm.fma.f64(double %70, double %64, double %93)\l  %95 = tail call double @llvm.fma.f64(double %72, double %62, double %94)\l  %96 = fadd double %91, %95\l  %97 = fsub double %96, %91\l  %98 = fsub double %95, %97\l  %99 = fmul double %70, %80\l  %100 = fneg double %99\l  %101 = tail call double @llvm.fma.f64(double %70, double %80, double %100)\l  %102 = tail call double @llvm.fma.f64(double %72, double %80, double %101)\l  %103 = fadd double %99, %102\l  %104 = fsub double %103, %99\l  %105 = fsub double %102, %104\l  %106 = fadd double %103, 0x3FE5555555555555\l  %107 = fadd double %106, 0xBFE5555555555555\l  %108 = fsub double %103, %107\l  %109 = fadd double %105, 0x3C8543B0D5DF274D\l  %110 = fadd double %109, %108\l  %111 = fadd double %106, %110\l  %112 = fsub double %111, %106\l  %113 = fsub double %110, %112\l  %114 = fmul double %96, %111\l  %115 = fneg double %114\l  %116 = tail call double @llvm.fma.f64(double %96, double %111, double %115)\l  %117 = tail call double @llvm.fma.f64(double %96, double %113, double %116)\l  %118 = tail call double @llvm.fma.f64(double %98, double %111, double %117)\l  %119 = fadd double %114, %118\l  %120 = fsub double %119, %114\l  %121 = fsub double %118, %120\l  %122 = fadd double %89, %119\l  %123 = fsub double %122, %89\l  %124 = fsub double %119, %123\l  %125 = fadd double %90, %121\l  %126 = fadd double %125, %124\l  %127 = fadd double %122, %126\l  %128 = fsub double %127, %122\l  %129 = fsub double %126, %128\l  %130 = fadd double %86, %127\l  %131 = fsub double %130, %86\l  %132 = fsub double %130, %131\l  %133 = fsub double %86, %132\l  %134 = fsub double %127, %131\l  %135 = fadd double %134, %133\l  %136 = fadd double %88, %129\l  %137 = fsub double %136, %88\l  %138 = fsub double %136, %137\l  %139 = fsub double %88, %138\l  %140 = fsub double %129, %137\l  %141 = fadd double %140, %139\l  %142 = fadd double %136, %135\l  %143 = fadd double %130, %142\l  %144 = fsub double %143, %130\l  %145 = fsub double %142, %144\l  %146 = fadd double %141, %145\l  %147 = fadd double %143, %146\l  %148 = fsub double %147, %143\l  %149 = fsub double %146, %148\l  %150 = icmp slt i32 %2, 0\l  %151 = icmp sgt i32 %2, -1\l  %152 = fcmp oeq double %31, 1.000000e+00\l  %153 = fadd double %31, -1.000000e+00\l  %154 = bitcast double %153 to \<2 x i32\>\l  %155 = extractelement \<2 x i32\> %154, i64 1\l  %156 = fcmp oeq double %31, 0x7FF0000000000000\l  %157 = icmp eq i32 %2, 0\l  %158 = or i1 %157, %156\l  %159 = icmp eq i32 %2, 1\l  br label %171\l}"];
	Node0x63f9bd0 -> Node0x6401c60;
	Node0x63f9c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%160:\l160:                                              \l  %161 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %24) #12\l  %162 = ptrtoint i8 addrspace(1)* %161 to i64\l  %163 = bitcast i8 addrspace(1)* %161 to float addrspace(1)*\l  br i1 %28, label %164, label %282\l|{<s0>T|<s1>F}}"];
	Node0x63f9c60:s0 -> Node0x6401f30;
	Node0x63f9c60:s1 -> Node0x6401f80;
	Node0x6401f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%164:\l164:                                              \l  %165 = mul nsw i32 %6, %1\l  %166 = sitofp i32 %2 to float\l  %167 = and i32 %1, 1\l  %168 = icmp eq i32 %1, 1\l  br i1 %168, label %263, label %169\l|{<s0>T|<s1>F}}"];
	Node0x6401f30:s0 -> Node0x64022e0;
	Node0x6401f30:s1 -> Node0x6402330;
	Node0x6402330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%169:\l169:                                              \l  %170 = and i32 %1, -2\l  br label %289\l}"];
	Node0x6402330 -> Node0x6402500;
	Node0x6401c60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%171:\l171:                                              \l  %172 = phi i32 [ %20, %29 ], [ %260, %171 ]\l  %173 = phi i32 [ 0, %29 ], [ %261, %171 ]\l  %174 = sitofp i32 %172 to double\l  %175 = sub nsw i32 %1, %173\l  %176 = add nsw i32 %175, -1\l  %177 = sitofp i32 %176 to double\l  %178 = fmul double %147, %177\l  %179 = fneg double %178\l  %180 = tail call double @llvm.fma.f64(double %177, double %147, double %179)\l  %181 = tail call double @llvm.fma.f64(double %177, double %149, double %180)\l  %182 = fadd double %178, %181\l  %183 = fsub double %182, %178\l  %184 = fsub double %181, %183\l  %185 = tail call double @llvm.fabs.f64(double %178) #13\l  %186 = fcmp oeq double %185, 0x7FF0000000000000\l  %187 = select i1 %186, double %178, double %182\l  %188 = tail call double @llvm.fabs.f64(double %187) #13\l  %189 = fcmp oeq double %188, 0x7FF0000000000000\l  %190 = select i1 %189, double 0.000000e+00, double %184\l  %191 = fmul double %187, 0x3FF71547652B82FE\l  %192 = tail call double @llvm.rint.f64(double %191)\l  %193 = fneg double %192\l  %194 = tail call double @llvm.fma.f64(double %193, double\l... 0x3FE62E42FEFA39EF, double %187)\l  %195 = tail call double @llvm.fma.f64(double %193, double\l... 0x3C7ABC9E3B39803F, double %194)\l  %196 = tail call double @llvm.fma.f64(double %195, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %197 = tail call double @llvm.fma.f64(double %195, double %196, double\l... 0x3EC71DEE623FDE64)\l  %198 = tail call double @llvm.fma.f64(double %195, double %197, double\l... 0x3EFA01997C89E6B0)\l  %199 = tail call double @llvm.fma.f64(double %195, double %198, double\l... 0x3F2A01A014761F6E)\l  %200 = tail call double @llvm.fma.f64(double %195, double %199, double\l... 0x3F56C16C1852B7B0)\l  %201 = tail call double @llvm.fma.f64(double %195, double %200, double\l... 0x3F81111111122322)\l  %202 = tail call double @llvm.fma.f64(double %195, double %201, double\l... 0x3FA55555555502A1)\l  %203 = tail call double @llvm.fma.f64(double %195, double %202, double\l... 0x3FC5555555555511)\l  %204 = tail call double @llvm.fma.f64(double %195, double %203, double\l... 0x3FE000000000000B)\l  %205 = tail call double @llvm.fma.f64(double %195, double %204, double\l... 1.000000e+00)\l  %206 = tail call double @llvm.fma.f64(double %195, double %205, double\l... 1.000000e+00)\l  %207 = fptosi double %192 to i32\l  %208 = tail call double @llvm.amdgcn.ldexp.f64(double %206, i32 %207)\l  %209 = fcmp ogt double %187, 1.024000e+03\l  %210 = select i1 %209, double 0x7FF0000000000000, double %208\l  %211 = fcmp olt double %187, -1.075000e+03\l  %212 = select i1 %211, double 0.000000e+00, double %210\l  %213 = tail call double @llvm.fma.f64(double %212, double %190, double %212)\l  %214 = tail call double @llvm.fabs.f64(double %212) #13\l  %215 = fcmp oeq double %214, 0x7FF0000000000000\l  %216 = select i1 %215, double %212, double %213\l  %217 = tail call double @llvm.fabs.f64(double %177)\l  %218 = tail call double @llvm.trunc.f64(double %217)\l  %219 = fcmp oeq double %217, %218\l  %220 = zext i1 %219 to i32\l  %221 = fmul double %218, 5.000000e-01\l  %222 = tail call double @llvm.amdgcn.fract.f64(double %221)\l  %223 = tail call i1 @llvm.amdgcn.class.f64(double %221, i32 516)\l  %224 = select i1 %223, double 0.000000e+00, double %222\l  %225 = fcmp oeq double %224, 0.000000e+00\l  %226 = and i1 %219, %225\l  %227 = zext i1 %226 to i32\l  %228 = add nuw nsw i32 %227, %220\l  %229 = icmp eq i32 %228, 1\l  %230 = and i1 %150, %229\l  %231 = select i1 %230, double -0.000000e+00, double 0.000000e+00\l  %232 = tail call double @llvm.copysign.f64(double %216, double %231)\l  %233 = icmp ne i32 %228, 0\l  %234 = select i1 %151, i1 true, i1 %233\l  %235 = select i1 %234, double %232, double 0x7FF8000000000000\l  %236 = fcmp oeq double %217, 0x7FF0000000000000\l  %237 = bitcast double %177 to \<2 x i32\>\l  %238 = extractelement \<2 x i32\> %237, i64 1\l  %239 = xor i32 %238, %155\l  %240 = icmp sgt i32 %239, -1\l  %241 = select i1 %240, double 0x7FF0000000000000, double 0.000000e+00\l  %242 = select i1 %152, double %31, double %241\l  %243 = select i1 %236, double %242, double %235\l  %244 = icmp slt i32 %175, 1\l  %245 = xor i1 %157, %244\l  %246 = select i1 %245, double 0.000000e+00, double 0x7FF0000000000000\l  %247 = select i1 %229, double %30, double 0.000000e+00\l  %248 = tail call double @llvm.copysign.f64(double %246, double %247)\l  %249 = select i1 %158, double %248, double %243\l  %250 = icmp eq i32 %176, 0\l  %251 = or i1 %159, %250\l  %252 = select i1 %251, double 1.000000e+00, double %249\l  %253 = fdiv contract double %174, %252\l  %254 = fptosi double %253 to i32\l  %255 = zext i32 %173 to i64\l  %256 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %255\l  store i32 %254, i32 addrspace(1)* %256, align 4, !tbaa !7\l  %257 = sitofp i32 %254 to double\l  %258 = fmul contract double %252, %257\l  %259 = fsub contract double %174, %258\l  %260 = fptosi double %259 to i32\l  %261 = add nuw nsw i32 %173, 1\l  %262 = icmp eq i32 %261, %1\l  br i1 %262, label %160, label %171, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x6401c60:s0 -> Node0x63f9c60;
	Node0x6401c60:s1 -> Node0x6401c60;
	Node0x64022e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%263:\l263:                                              \l  %264 = phi i32 [ 0, %164 ], [ %323, %289 ]\l  %265 = icmp eq i32 %167, 0\l  br i1 %265, label %282, label %266\l|{<s0>T|<s1>F}}"];
	Node0x64022e0:s0 -> Node0x6401f80;
	Node0x64022e0:s1 -> Node0x6400830;
	Node0x6400830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%266:\l266:                                              \l  %267 = zext i32 %264 to i64\l  %268 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %267\l  %269 = load i32, i32 addrspace(1)* %268, align 4, !tbaa !7\l  %270 = sitofp i32 %269 to float\l  %271 = add nsw i32 %264, %165\l  %272 = sext i32 %271 to i64\l  %273 = getelementptr inbounds float, float addrspace(1)* %9, i64 %272\l  %274 = load float, float addrspace(1)* %273, align 4, !tbaa !13\l  %275 = getelementptr inbounds float, float addrspace(1)* %8, i64 %272\l  %276 = load float, float addrspace(1)* %275, align 4, !tbaa !13\l  %277 = fsub contract float %274, %276\l  %278 = fmul contract float %277, %270\l  %279 = fdiv contract float %278, %166\l  %280 = fadd contract float %276, %279\l  %281 = getelementptr inbounds float, float addrspace(1)* %163, i64 %267\l  store float %280, float addrspace(1)* %281, align 4, !tbaa !13\l  br label %282\l}"];
	Node0x6400830 -> Node0x6401f80;
	Node0x6401f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%282:\l282:                                              \l  %283 = load float, float addrspace(1)* %7, align 4, !tbaa !13\l  br i1 %28, label %284, label %346\l|{<s0>T|<s1>F}}"];
	Node0x6401f80:s0 -> Node0x64098e0;
	Node0x6401f80:s1 -> Node0x6409930;
	Node0x64098e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%284:\l284:                                              \l  %285 = and i32 %1, 7\l  %286 = icmp ult i32 %1, 8\l  br i1 %286, label %326, label %287\l|{<s0>T|<s1>F}}"];
	Node0x64098e0:s0 -> Node0x6409b90;
	Node0x64098e0:s1 -> Node0x6409be0;
	Node0x6409be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%287:\l287:                                              \l  %288 = and i32 %1, -8\l  br label %567\l}"];
	Node0x6409be0 -> Node0x6409db0;
	Node0x6402500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%289:\l289:                                              \l  %290 = phi i32 [ 0, %169 ], [ %323, %289 ]\l  %291 = phi i32 [ 0, %169 ], [ %324, %289 ]\l  %292 = zext i32 %290 to i64\l  %293 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %292\l  %294 = load i32, i32 addrspace(1)* %293, align 4, !tbaa !7\l  %295 = sitofp i32 %294 to float\l  %296 = add nsw i32 %290, %165\l  %297 = sext i32 %296 to i64\l  %298 = getelementptr inbounds float, float addrspace(1)* %9, i64 %297\l  %299 = load float, float addrspace(1)* %298, align 4, !tbaa !13\l  %300 = getelementptr inbounds float, float addrspace(1)* %8, i64 %297\l  %301 = load float, float addrspace(1)* %300, align 4, !tbaa !13\l  %302 = fsub contract float %299, %301\l  %303 = fmul contract float %302, %295\l  %304 = fdiv contract float %303, %166\l  %305 = fadd contract float %301, %304\l  %306 = getelementptr inbounds float, float addrspace(1)* %163, i64 %292\l  store float %305, float addrspace(1)* %306, align 4, !tbaa !13\l  %307 = or i32 %290, 1\l  %308 = zext i32 %307 to i64\l  %309 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %308\l  %310 = load i32, i32 addrspace(1)* %309, align 4, !tbaa !7\l  %311 = sitofp i32 %310 to float\l  %312 = add nsw i32 %307, %165\l  %313 = sext i32 %312 to i64\l  %314 = getelementptr inbounds float, float addrspace(1)* %9, i64 %313\l  %315 = load float, float addrspace(1)* %314, align 4, !tbaa !13\l  %316 = getelementptr inbounds float, float addrspace(1)* %8, i64 %313\l  %317 = load float, float addrspace(1)* %316, align 4, !tbaa !13\l  %318 = fsub contract float %315, %317\l  %319 = fmul contract float %318, %311\l  %320 = fdiv contract float %319, %166\l  %321 = fadd contract float %317, %320\l  %322 = getelementptr inbounds float, float addrspace(1)* %163, i64 %308\l  store float %321, float addrspace(1)* %322, align 4, !tbaa !13\l  %323 = add nuw nsw i32 %290, 2\l  %324 = add i32 %291, 2\l  %325 = icmp eq i32 %324, %170\l  br i1 %325, label %263, label %289, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x6402500:s0 -> Node0x64022e0;
	Node0x6402500:s1 -> Node0x6402500;
	Node0x6409b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%326:\l326:                                              \l  %327 = phi float [ undef, %284 ], [ %642, %567 ]\l  %328 = phi i32 [ 0, %284 ], [ %637, %567 ]\l  %329 = phi float [ %283, %284 ], [ %642, %567 ]\l  %330 = icmp eq i32 %285, 0\l  br i1 %330, label %346, label %331\l|{<s0>T|<s1>F}}"];
	Node0x6409b90:s0 -> Node0x6409930;
	Node0x6409b90:s1 -> Node0x640bba0;
	Node0x640bba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%331:\l331:                                              \l  %332 = phi i32 [ %338, %331 ], [ %328, %326 ]\l  %333 = phi float [ %343, %331 ], [ %329, %326 ]\l  %334 = phi i32 [ %344, %331 ], [ 0, %326 ]\l  %335 = zext i32 %332 to i64\l  %336 = getelementptr inbounds float, float addrspace(1)* %163, i64 %335\l  %337 = load float, float addrspace(1)* %336, align 4, !tbaa !13\l  %338 = add nuw nsw i32 %332, 1\l  %339 = zext i32 %338 to i64\l  %340 = getelementptr inbounds float, float addrspace(1)* %7, i64 %339\l  %341 = load float, float addrspace(1)* %340, align 4, !tbaa !13\l  %342 = fmul contract float %337, %341\l  %343 = fadd contract float %333, %342\l  %344 = add i32 %334, 1\l  %345 = icmp eq i32 %344, %285\l  br i1 %345, label %346, label %331, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x640bba0:s0 -> Node0x6409930;
	Node0x640bba0:s1 -> Node0x640bba0;
	Node0x6409930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%346:\l346:                                              \l  %347 = phi float [ %283, %282 ], [ %327, %326 ], [ %343, %331 ]\l  %348 = fcmp contract oge float %347, 0.000000e+00\l  %349 = select contract i1 %348, float 0.000000e+00, float %347\l  %350 = mul nsw i32 %5, %4\l  %351 = mul nsw i32 %2, %1\l  %352 = sitofp i32 %2 to double\l  %353 = sitofp i32 %1 to double\l  %354 = tail call double @llvm.fabs.f64(double %352)\l  %355 = tail call double @llvm.amdgcn.frexp.mant.f64(double %354)\l  %356 = fcmp olt double %355, 0x3FE5555555555555\l  %357 = zext i1 %356 to i32\l  %358 = tail call double @llvm.amdgcn.ldexp.f64(double %355, i32 %357)\l  %359 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %354)\l  %360 = sub nsw i32 %359, %357\l  %361 = fadd double %358, -1.000000e+00\l  %362 = fadd double %358, 1.000000e+00\l  %363 = fadd double %362, -1.000000e+00\l  %364 = fsub double %358, %363\l  %365 = tail call double @llvm.amdgcn.rcp.f64(double %362)\l  %366 = fneg double %362\l  %367 = tail call double @llvm.fma.f64(double %366, double %365, double\l... 1.000000e+00)\l  %368 = tail call double @llvm.fma.f64(double %367, double %365, double %365)\l  %369 = tail call double @llvm.fma.f64(double %366, double %368, double\l... 1.000000e+00)\l  %370 = tail call double @llvm.fma.f64(double %369, double %368, double %368)\l  %371 = fmul double %361, %370\l  %372 = fmul double %362, %371\l  %373 = fneg double %372\l  %374 = tail call double @llvm.fma.f64(double %371, double %362, double %373)\l  %375 = tail call double @llvm.fma.f64(double %371, double %364, double %374)\l  %376 = fadd double %372, %375\l  %377 = fsub double %376, %372\l  %378 = fsub double %375, %377\l  %379 = fsub double %361, %376\l  %380 = fsub double %361, %379\l  %381 = fsub double %380, %376\l  %382 = fsub double %381, %378\l  %383 = fadd double %379, %382\l  %384 = fmul double %370, %383\l  %385 = fadd double %371, %384\l  %386 = fsub double %385, %371\l  %387 = fsub double %384, %386\l  %388 = fmul double %385, %385\l  %389 = fneg double %388\l  %390 = tail call double @llvm.fma.f64(double %385, double %385, double %389)\l  %391 = fmul double %387, 2.000000e+00\l  %392 = tail call double @llvm.fma.f64(double %385, double %391, double %390)\l  %393 = fadd double %388, %392\l  %394 = fsub double %393, %388\l  %395 = fsub double %392, %394\l  %396 = tail call double @llvm.fma.f64(double %393, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %397 = tail call double @llvm.fma.f64(double %393, double %396, double\l... 0x3FBE25E43ABE935A)\l  %398 = tail call double @llvm.fma.f64(double %393, double %397, double\l... 0x3FC110EF47E6C9C2)\l  %399 = tail call double @llvm.fma.f64(double %393, double %398, double\l... 0x3FC3B13BCFA74449)\l  %400 = tail call double @llvm.fma.f64(double %393, double %399, double\l... 0x3FC745D171BF3C30)\l  %401 = tail call double @llvm.fma.f64(double %393, double %400, double\l... 0x3FCC71C71C7792CE)\l  %402 = tail call double @llvm.fma.f64(double %393, double %401, double\l... 0x3FD24924924920DA)\l  %403 = tail call double @llvm.fma.f64(double %393, double %402, double\l... 0x3FD999999999999C)\l  %404 = sitofp i32 %360 to double\l  %405 = fmul double %404, 0x3FE62E42FEFA39EF\l  %406 = fneg double %405\l  %407 = tail call double @llvm.fma.f64(double %404, double\l... 0x3FE62E42FEFA39EF, double %406)\l  %408 = tail call double @llvm.fma.f64(double %404, double\l... 0x3C7ABC9E3B39803F, double %407)\l  %409 = fadd double %405, %408\l  %410 = fsub double %409, %405\l  %411 = fsub double %408, %410\l  %412 = tail call double @llvm.amdgcn.ldexp.f64(double %385, i32 1)\l  %413 = tail call double @llvm.amdgcn.ldexp.f64(double %387, i32 1)\l  %414 = fmul double %385, %393\l  %415 = fneg double %414\l  %416 = tail call double @llvm.fma.f64(double %393, double %385, double %415)\l  %417 = tail call double @llvm.fma.f64(double %393, double %387, double %416)\l  %418 = tail call double @llvm.fma.f64(double %395, double %385, double %417)\l  %419 = fadd double %414, %418\l  %420 = fsub double %419, %414\l  %421 = fsub double %418, %420\l  %422 = fmul double %393, %403\l  %423 = fneg double %422\l  %424 = tail call double @llvm.fma.f64(double %393, double %403, double %423)\l  %425 = tail call double @llvm.fma.f64(double %395, double %403, double %424)\l  %426 = fadd double %422, %425\l  %427 = fsub double %426, %422\l  %428 = fsub double %425, %427\l  %429 = fadd double %426, 0x3FE5555555555555\l  %430 = fadd double %429, 0xBFE5555555555555\l  %431 = fsub double %426, %430\l  %432 = fadd double %428, 0x3C8543B0D5DF274D\l  %433 = fadd double %432, %431\l  %434 = fadd double %429, %433\l  %435 = fsub double %434, %429\l  %436 = fsub double %433, %435\l  %437 = fmul double %419, %434\l  %438 = fneg double %437\l  %439 = tail call double @llvm.fma.f64(double %419, double %434, double %438)\l  %440 = tail call double @llvm.fma.f64(double %419, double %436, double %439)\l  %441 = tail call double @llvm.fma.f64(double %421, double %434, double %440)\l  %442 = fadd double %437, %441\l  %443 = fsub double %442, %437\l  %444 = fsub double %441, %443\l  %445 = fadd double %412, %442\l  %446 = fsub double %445, %412\l  %447 = fsub double %442, %446\l  %448 = fadd double %413, %444\l  %449 = fadd double %448, %447\l  %450 = fadd double %445, %449\l  %451 = fsub double %450, %445\l  %452 = fsub double %449, %451\l  %453 = fadd double %409, %450\l  %454 = fsub double %453, %409\l  %455 = fsub double %453, %454\l  %456 = fsub double %409, %455\l  %457 = fsub double %450, %454\l  %458 = fadd double %457, %456\l  %459 = fadd double %411, %452\l  %460 = fsub double %459, %411\l  %461 = fsub double %459, %460\l  %462 = fsub double %411, %461\l  %463 = fsub double %452, %460\l  %464 = fadd double %463, %462\l  %465 = fadd double %459, %458\l  %466 = fadd double %453, %465\l  %467 = fsub double %466, %453\l  %468 = fsub double %465, %467\l  %469 = fadd double %464, %468\l  %470 = fadd double %466, %469\l  %471 = fsub double %470, %466\l  %472 = fsub double %469, %471\l  %473 = fmul double %470, %353\l  %474 = fneg double %473\l  %475 = tail call double @llvm.fma.f64(double %353, double %470, double %474)\l  %476 = tail call double @llvm.fma.f64(double %353, double %472, double %475)\l  %477 = fadd double %473, %476\l  %478 = fsub double %477, %473\l  %479 = fsub double %476, %478\l  %480 = tail call double @llvm.fabs.f64(double %473) #13\l  %481 = fcmp oeq double %480, 0x7FF0000000000000\l  %482 = select i1 %481, double %473, double %477\l  %483 = tail call double @llvm.fabs.f64(double %482) #13\l  %484 = fcmp oeq double %483, 0x7FF0000000000000\l  %485 = select i1 %484, double 0.000000e+00, double %479\l  %486 = fmul double %482, 0x3FF71547652B82FE\l  %487 = tail call double @llvm.rint.f64(double %486)\l  %488 = fneg double %487\l  %489 = tail call double @llvm.fma.f64(double %488, double\l... 0x3FE62E42FEFA39EF, double %482)\l  %490 = tail call double @llvm.fma.f64(double %488, double\l... 0x3C7ABC9E3B39803F, double %489)\l  %491 = tail call double @llvm.fma.f64(double %490, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %492 = tail call double @llvm.fma.f64(double %490, double %491, double\l... 0x3EC71DEE623FDE64)\l  %493 = tail call double @llvm.fma.f64(double %490, double %492, double\l... 0x3EFA01997C89E6B0)\l  %494 = tail call double @llvm.fma.f64(double %490, double %493, double\l... 0x3F2A01A014761F6E)\l  %495 = tail call double @llvm.fma.f64(double %490, double %494, double\l... 0x3F56C16C1852B7B0)\l  %496 = tail call double @llvm.fma.f64(double %490, double %495, double\l... 0x3F81111111122322)\l  %497 = tail call double @llvm.fma.f64(double %490, double %496, double\l... 0x3FA55555555502A1)\l  %498 = tail call double @llvm.fma.f64(double %490, double %497, double\l... 0x3FC5555555555511)\l  %499 = tail call double @llvm.fma.f64(double %490, double %498, double\l... 0x3FE000000000000B)\l  %500 = tail call double @llvm.fma.f64(double %490, double %499, double\l... 1.000000e+00)\l  %501 = tail call double @llvm.fma.f64(double %490, double %500, double\l... 1.000000e+00)\l  %502 = fptosi double %487 to i32\l  %503 = tail call double @llvm.amdgcn.ldexp.f64(double %501, i32 %502)\l  %504 = fcmp ogt double %482, 1.024000e+03\l  %505 = select i1 %504, double 0x7FF0000000000000, double %503\l  %506 = fcmp olt double %482, -1.075000e+03\l  %507 = select i1 %506, double 0.000000e+00, double %505\l  %508 = tail call double @llvm.fma.f64(double %507, double %485, double %507)\l  %509 = tail call double @llvm.fabs.f64(double %507) #13\l  %510 = fcmp oeq double %509, 0x7FF0000000000000\l  %511 = select i1 %510, double %507, double %508\l  %512 = tail call double @llvm.fabs.f64(double %353)\l  %513 = tail call double @llvm.trunc.f64(double %512)\l  %514 = fcmp oeq double %512, %513\l  %515 = zext i1 %514 to i32\l  %516 = fmul double %513, 5.000000e-01\l  %517 = tail call double @llvm.amdgcn.fract.f64(double %516)\l  %518 = tail call i1 @llvm.amdgcn.class.f64(double %516, i32 516)\l  %519 = select i1 %518, double 0.000000e+00, double %517\l  %520 = fcmp oeq double %519, 0.000000e+00\l  %521 = and i1 %514, %520\l  %522 = zext i1 %521 to i32\l  %523 = add nuw nsw i32 %522, %515\l  %524 = icmp eq i32 %523, 1\l  %525 = icmp slt i32 %2, 0\l  %526 = and i1 %525, %524\l  %527 = select i1 %526, double -0.000000e+00, double 0.000000e+00\l  %528 = tail call double @llvm.copysign.f64(double %511, double %527)\l  %529 = icmp sgt i32 %2, -1\l  %530 = icmp ne i32 %523, 0\l  %531 = select i1 %529, i1 true, i1 %530\l  %532 = select i1 %531, double %528, double 0x7FF8000000000000\l  %533 = fcmp oeq double %512, 0x7FF0000000000000\l  %534 = fcmp oeq double %354, 1.000000e+00\l  %535 = fadd double %354, -1.000000e+00\l  %536 = bitcast double %353 to \<2 x i32\>\l  %537 = extractelement \<2 x i32\> %536, i64 1\l  %538 = bitcast double %535 to \<2 x i32\>\l  %539 = extractelement \<2 x i32\> %538, i64 1\l  %540 = xor i32 %539, %537\l  %541 = icmp sgt i32 %540, -1\l  %542 = select i1 %541, double 0x7FF0000000000000, double 0.000000e+00\l  %543 = select i1 %534, double %354, double %542\l  %544 = select i1 %533, double %543, double %532\l  %545 = fcmp oeq double %354, 0x7FF0000000000000\l  %546 = icmp eq i32 %2, 0\l  %547 = or i1 %546, %545\l  %548 = icmp slt i32 %1, 0\l  %549 = xor i1 %548, %546\l  %550 = select i1 %549, double 0.000000e+00, double 0x7FF0000000000000\l  %551 = select i1 %524, double %352, double 0.000000e+00\l  %552 = tail call double @llvm.copysign.f64(double %550, double %551)\l  %553 = select i1 %547, double %552, double %544\l  %554 = icmp eq i32 %2, 1\l  %555 = icmp eq i32 %1, 0\l  %556 = or i1 %555, %554\l  %557 = fptosi double %553 to i32\l  %558 = shl nsw i32 %557, 1\l  %559 = select i1 %556, i32 2, i32 %558\l  %560 = add nsw i32 %559, %351\l  %561 = add i32 %350, %6\l  %562 = mul i32 %560, %561\l  %563 = add nsw i32 %562, %351\l  %564 = add nsw i32 %563, %20\l  %565 = sext i32 %564 to i64\l  %566 = getelementptr inbounds float, float addrspace(1)* %10, i64 %565\l  store float %349, float addrspace(1)* %566, align 4, !tbaa !13\l  tail call fastcc void @__ockl_dm_dealloc(i64 %162) #12\l  tail call fastcc void @__ockl_dm_dealloc(i64 %26) #12\l  br label %645\l}"];
	Node0x6409930 -> Node0x63f9670;
	Node0x6409db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%567:\l567:                                              \l  %568 = phi i32 [ 0, %287 ], [ %637, %567 ]\l  %569 = phi float [ %283, %287 ], [ %642, %567 ]\l  %570 = phi i32 [ 0, %287 ], [ %643, %567 ]\l  %571 = zext i32 %568 to i64\l  %572 = getelementptr inbounds float, float addrspace(1)* %163, i64 %571\l  %573 = load float, float addrspace(1)* %572, align 4, !tbaa !13\l  %574 = or i32 %568, 1\l  %575 = zext i32 %574 to i64\l  %576 = getelementptr inbounds float, float addrspace(1)* %7, i64 %575\l  %577 = load float, float addrspace(1)* %576, align 4, !tbaa !13\l  %578 = fmul contract float %573, %577\l  %579 = fadd contract float %569, %578\l  %580 = zext i32 %574 to i64\l  %581 = getelementptr inbounds float, float addrspace(1)* %163, i64 %580\l  %582 = load float, float addrspace(1)* %581, align 4, !tbaa !13\l  %583 = or i32 %568, 2\l  %584 = zext i32 %583 to i64\l  %585 = getelementptr inbounds float, float addrspace(1)* %7, i64 %584\l  %586 = load float, float addrspace(1)* %585, align 4, !tbaa !13\l  %587 = fmul contract float %582, %586\l  %588 = fadd contract float %579, %587\l  %589 = zext i32 %583 to i64\l  %590 = getelementptr inbounds float, float addrspace(1)* %163, i64 %589\l  %591 = load float, float addrspace(1)* %590, align 4, !tbaa !13\l  %592 = or i32 %568, 3\l  %593 = zext i32 %592 to i64\l  %594 = getelementptr inbounds float, float addrspace(1)* %7, i64 %593\l  %595 = load float, float addrspace(1)* %594, align 4, !tbaa !13\l  %596 = fmul contract float %591, %595\l  %597 = fadd contract float %588, %596\l  %598 = zext i32 %592 to i64\l  %599 = getelementptr inbounds float, float addrspace(1)* %163, i64 %598\l  %600 = load float, float addrspace(1)* %599, align 4, !tbaa !13\l  %601 = or i32 %568, 4\l  %602 = zext i32 %601 to i64\l  %603 = getelementptr inbounds float, float addrspace(1)* %7, i64 %602\l  %604 = load float, float addrspace(1)* %603, align 4, !tbaa !13\l  %605 = fmul contract float %600, %604\l  %606 = fadd contract float %597, %605\l  %607 = zext i32 %601 to i64\l  %608 = getelementptr inbounds float, float addrspace(1)* %163, i64 %607\l  %609 = load float, float addrspace(1)* %608, align 4, !tbaa !13\l  %610 = or i32 %568, 5\l  %611 = zext i32 %610 to i64\l  %612 = getelementptr inbounds float, float addrspace(1)* %7, i64 %611\l  %613 = load float, float addrspace(1)* %612, align 4, !tbaa !13\l  %614 = fmul contract float %609, %613\l  %615 = fadd contract float %606, %614\l  %616 = zext i32 %610 to i64\l  %617 = getelementptr inbounds float, float addrspace(1)* %163, i64 %616\l  %618 = load float, float addrspace(1)* %617, align 4, !tbaa !13\l  %619 = or i32 %568, 6\l  %620 = zext i32 %619 to i64\l  %621 = getelementptr inbounds float, float addrspace(1)* %7, i64 %620\l  %622 = load float, float addrspace(1)* %621, align 4, !tbaa !13\l  %623 = fmul contract float %618, %622\l  %624 = fadd contract float %615, %623\l  %625 = zext i32 %619 to i64\l  %626 = getelementptr inbounds float, float addrspace(1)* %163, i64 %625\l  %627 = load float, float addrspace(1)* %626, align 4, !tbaa !13\l  %628 = or i32 %568, 7\l  %629 = zext i32 %628 to i64\l  %630 = getelementptr inbounds float, float addrspace(1)* %7, i64 %629\l  %631 = load float, float addrspace(1)* %630, align 4, !tbaa !13\l  %632 = fmul contract float %627, %631\l  %633 = fadd contract float %624, %632\l  %634 = zext i32 %628 to i64\l  %635 = getelementptr inbounds float, float addrspace(1)* %163, i64 %634\l  %636 = load float, float addrspace(1)* %635, align 4, !tbaa !13\l  %637 = add nuw nsw i32 %568, 8\l  %638 = zext i32 %637 to i64\l  %639 = getelementptr inbounds float, float addrspace(1)* %7, i64 %638\l  %640 = load float, float addrspace(1)* %639, align 4, !tbaa !13\l  %641 = fmul contract float %636, %640\l  %642 = fadd contract float %633, %641\l  %643 = add i32 %570, 8\l  %644 = icmp eq i32 %643, %288\l  br i1 %644, label %326, label %567, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x6409db0:s0 -> Node0x6409b90;
	Node0x6409db0:s1 -> Node0x6409db0;
	Node0x63f9670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%645:\l645:                                              \l  ret void\l}"];
}
