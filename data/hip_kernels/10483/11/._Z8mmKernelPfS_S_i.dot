digraph "CFG for '_Z8mmKernelPfS_S_i' function" {
	label="CFG for '_Z8mmKernelPfS_S_i' function";

	Node0x593e6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = icmp slt i32 %5, %3\l  br i1 %6, label %7, label %102\l|{<s0>T|<s1>F}}"];
	Node0x593e6d0:s0 -> Node0x593f510;
	Node0x593e6d0:s1 -> Node0x593f5a0;
	Node0x593f510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%7:\l7:                                                \l  %8 = zext i32 %5 to i64\l  %9 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @s, i32\l... 0, i32 %5\l  store float 0.000000e+00, float addrspace(3)* %9, align 4, !tbaa !5\l  %10 = getelementptr inbounds float, float addrspace(1)* %0, i64 %8\l  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %12 = mul nsw i32 %5, %3\l  %13 = add i32 %3, -1\l  %14 = and i32 %3, 7\l  %15 = icmp ult i32 %13, 7\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x593f510:s0 -> Node0x59415d0;
	Node0x593f510:s1 -> Node0x5941660;
	Node0x5941660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%16:\l16:                                               \l  %17 = and i32 %3, -8\l  br label %40\l}"];
	Node0x5941660 -> Node0x593f780;
	Node0x59415d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = phi float [ undef, %7 ], [ %98, %40 ]\l  %20 = phi float [ 0.000000e+00, %7 ], [ %98, %40 ]\l  %21 = phi i32 [ 0, %7 ], [ %99, %40 ]\l  %22 = icmp eq i32 %14, 0\l  br i1 %22, label %36, label %23\l|{<s0>T|<s1>F}}"];
	Node0x59415d0:s0 -> Node0x5942110;
	Node0x59415d0:s1 -> Node0x59421a0;
	Node0x59421a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi float [ %32, %23 ], [ %20, %18 ]\l  %25 = phi i32 [ %33, %23 ], [ %21, %18 ]\l  %26 = phi i32 [ %34, %23 ], [ 0, %18 ]\l  %27 = add nsw i32 %25, %12\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %2, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %31 = fmul contract float %11, %30\l  %32 = fadd contract float %24, %31\l  %33 = add nuw nsw i32 %25, 1\l  %34 = add i32 %26, 1\l  %35 = icmp eq i32 %34, %14\l  br i1 %35, label %36, label %23, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x59421a0:s0 -> Node0x5942110;
	Node0x59421a0:s1 -> Node0x59421a0;
	Node0x5942110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%36:\l36:                                               \l  %37 = phi float [ %19, %18 ], [ %32, %23 ]\l  store float %37, float addrspace(3)* %9, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %38 = load float, float addrspace(3)* %9, align 4, !tbaa !5\l  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %8\l  store float %38, float addrspace(1)* %39, align 4, !tbaa !5\l  br label %102\l}"];
	Node0x5942110 -> Node0x593f5a0;
	Node0x593f780 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %16 ], [ %98, %40 ]\l  %42 = phi i32 [ 0, %16 ], [ %99, %40 ]\l  %43 = phi i32 [ 0, %16 ], [ %100, %40 ]\l  %44 = add nsw i32 %42, %12\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %2, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %48 = fmul contract float %11, %47\l  %49 = fadd contract float %41, %48\l  %50 = or i32 %42, 1\l  %51 = add nsw i32 %50, %12\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %2, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %55 = fmul contract float %11, %54\l  %56 = fadd contract float %49, %55\l  %57 = or i32 %42, 2\l  %58 = add nsw i32 %57, %12\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %2, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %62 = fmul contract float %11, %61\l  %63 = fadd contract float %56, %62\l  %64 = or i32 %42, 3\l  %65 = add nsw i32 %64, %12\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %2, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %69 = fmul contract float %11, %68\l  %70 = fadd contract float %63, %69\l  %71 = or i32 %42, 4\l  %72 = add nsw i32 %71, %12\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %2, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %76 = fmul contract float %11, %75\l  %77 = fadd contract float %70, %76\l  %78 = or i32 %42, 5\l  %79 = add nsw i32 %78, %12\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %83 = fmul contract float %11, %82\l  %84 = fadd contract float %77, %83\l  %85 = or i32 %42, 6\l  %86 = add nsw i32 %85, %12\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %2, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %90 = fmul contract float %11, %89\l  %91 = fadd contract float %84, %90\l  %92 = or i32 %42, 7\l  %93 = add nsw i32 %92, %12\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %2, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %97 = fmul contract float %11, %96\l  %98 = fadd contract float %91, %97\l  %99 = add nuw nsw i32 %42, 8\l  %100 = add i32 %43, 8\l  %101 = icmp eq i32 %100, %17\l  br i1 %101, label %18, label %40, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x593f780:s0 -> Node0x59415d0;
	Node0x593f780:s1 -> Node0x593f780;
	Node0x593f5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%102:\l102:                                              \l  ret void\l}"];
}
