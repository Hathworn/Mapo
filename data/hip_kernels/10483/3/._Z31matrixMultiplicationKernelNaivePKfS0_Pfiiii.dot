digraph "CFG for '_Z31matrixMultiplicationKernelNaivePKfS0_Pfiiii' function" {
	label="CFG for '_Z31matrixMultiplicationKernelNaivePKfS0_Pfiiii' function";

	Node0x5e97cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 2, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %16, %3\l  %26 = icmp slt i32 %24, %6\l  %27 = select i1 %25, i1 %26, i1 false\l  %28 = icmp sgt i32 %4, 0\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %161\l|{<s0>T|<s1>F}}"];
	Node0x5e97cf0:s0 -> Node0x5e9b8f0;
	Node0x5e97cf0:s1 -> Node0x5e9b980;
	Node0x5e9b8f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %16, %4\l  %32 = and i32 %4, 7\l  %33 = icmp ult i32 %4, 8\l  br i1 %33, label %138, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5e9b8f0:s0 -> Node0x5e99c10;
	Node0x5e9b8f0:s1 -> Node0x5e9be20;
	Node0x5e9be20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%34:\l34:                                               \l  %35 = and i32 %4, -8\l  br label %36\l}"];
	Node0x5e9be20 -> Node0x5e9c020;
	Node0x5e9c020 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%36:\l36:                                               \l  %37 = phi i32 [ 0, %34 ], [ %135, %36 ]\l  %38 = phi float [ 0.000000e+00, %34 ], [ %134, %36 ]\l  %39 = phi i32 [ 0, %34 ], [ %136, %36 ]\l  %40 = add nsw i32 %37, %31\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %44 = mul nsw i32 %37, %4\l  %45 = add nsw i32 %44, %24\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = fmul contract float %43, %48\l  %50 = fadd contract float %38, %49\l  %51 = or i32 %37, 1\l  %52 = add nsw i32 %51, %31\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %56 = mul nsw i32 %51, %4\l  %57 = add nsw i32 %56, %24\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = fmul contract float %55, %60\l  %62 = fadd contract float %50, %61\l  %63 = or i32 %37, 2\l  %64 = add nsw i32 %63, %31\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = mul nsw i32 %63, %4\l  %69 = add nsw i32 %68, %24\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = fmul contract float %67, %72\l  %74 = fadd contract float %62, %73\l  %75 = or i32 %37, 3\l  %76 = add nsw i32 %75, %31\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = mul nsw i32 %75, %4\l  %81 = add nsw i32 %80, %24\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fmul contract float %79, %84\l  %86 = fadd contract float %74, %85\l  %87 = or i32 %37, 4\l  %88 = add nsw i32 %87, %31\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = mul nsw i32 %87, %4\l  %93 = add nsw i32 %92, %24\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %1, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %97 = fmul contract float %91, %96\l  %98 = fadd contract float %86, %97\l  %99 = or i32 %37, 5\l  %100 = add nsw i32 %99, %31\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = mul nsw i32 %99, %4\l  %105 = add nsw i32 %104, %24\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %1, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fmul contract float %103, %108\l  %110 = fadd contract float %98, %109\l  %111 = or i32 %37, 6\l  %112 = add nsw i32 %111, %31\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = mul nsw i32 %111, %4\l  %117 = add nsw i32 %116, %24\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %121 = fmul contract float %115, %120\l  %122 = fadd contract float %110, %121\l  %123 = or i32 %37, 7\l  %124 = add nsw i32 %123, %31\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = mul nsw i32 %123, %4\l  %129 = add nsw i32 %128, %24\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %1, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fmul contract float %127, %132\l  %134 = fadd contract float %122, %133\l  %135 = add nuw nsw i32 %37, 8\l  %136 = add i32 %39, 8\l  %137 = icmp eq i32 %136, %35\l  br i1 %137, label %138, label %36, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5e9c020:s0 -> Node0x5e99c10;
	Node0x5e9c020:s1 -> Node0x5e9c020;
	Node0x5e99c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%138:\l138:                                              \l  %139 = phi float [ undef, %30 ], [ %134, %36 ]\l  %140 = phi i32 [ 0, %30 ], [ %135, %36 ]\l  %141 = phi float [ 0.000000e+00, %30 ], [ %134, %36 ]\l  %142 = icmp eq i32 %32, 0\l  br i1 %142, label %161, label %143\l|{<s0>T|<s1>F}}"];
	Node0x5e99c10:s0 -> Node0x5e9b980;
	Node0x5e99c10:s1 -> Node0x5ea1d60;
	Node0x5ea1d60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%143:\l143:                                              \l  %144 = phi i32 [ %158, %143 ], [ %140, %138 ]\l  %145 = phi float [ %157, %143 ], [ %141, %138 ]\l  %146 = phi i32 [ %159, %143 ], [ 0, %138 ]\l  %147 = add nsw i32 %144, %31\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %151 = mul nsw i32 %144, %4\l  %152 = add nsw i32 %151, %24\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %1, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = fmul contract float %150, %155\l  %157 = fadd contract float %145, %156\l  %158 = add nuw nsw i32 %144, 1\l  %159 = add i32 %146, 1\l  %160 = icmp eq i32 %159, %32\l  br i1 %160, label %161, label %143, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5ea1d60:s0 -> Node0x5e9b980;
	Node0x5ea1d60:s1 -> Node0x5ea1d60;
	Node0x5e9b980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%161:\l161:                                              \l  %162 = phi float [ 0.000000e+00, %7 ], [ %139, %138 ], [ %157, %143 ]\l  %163 = mul nsw i32 %16, %3\l  %164 = add nsw i32 %163, %24\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %2, i64 %165\l  store float %162, float addrspace(1)* %166, align 4, !tbaa !7\l  ret void\l}"];
}
