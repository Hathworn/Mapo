digraph "CFG for '_Z17createQueryPointsiiiiiiPfS_S_S_' function" {
	label="CFG for '_Z17createQueryPointsiiiiiiPfS_S_S_' function";

	Node0x5ba6bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %550\l|{<s0>T|<s1>F}}"];
	Node0x5ba6bc0:s0 -> Node0x5ba85a0;
	Node0x5ba6bc0:s1 -> Node0x5ba8630;
	Node0x5ba85a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%21:\l21:                                               \l  %22 = sext i32 %1 to i64\l  %23 = shl nsw i64 %22, 2\l  %24 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %23) #12\l  %25 = ptrtoint i8 addrspace(1)* %24 to i64\l  %26 = bitcast i8 addrspace(1)* %24 to i32 addrspace(1)*\l  %27 = icmp sgt i32 %1, 0\l  br i1 %27, label %28, label %496\l|{<s0>T|<s1>F}}"];
	Node0x5ba85a0:s0 -> Node0x5ba8b90;
	Node0x5ba85a0:s1 -> Node0x5ba8c20;
	Node0x5ba8b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = sitofp i32 %2 to double\l  %30 = tail call double @llvm.fabs.f64(double %29)\l  %31 = tail call double @llvm.amdgcn.frexp.mant.f64(double %30)\l  %32 = fcmp olt double %31, 0x3FE5555555555555\l  %33 = zext i1 %32 to i32\l  %34 = tail call double @llvm.amdgcn.ldexp.f64(double %31, i32 %33)\l  %35 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %30)\l  %36 = sub nsw i32 %35, %33\l  %37 = fadd double %34, -1.000000e+00\l  %38 = fadd double %34, 1.000000e+00\l  %39 = fadd double %38, -1.000000e+00\l  %40 = fsub double %34, %39\l  %41 = tail call double @llvm.amdgcn.rcp.f64(double %38)\l  %42 = fneg double %38\l  %43 = tail call double @llvm.fma.f64(double %42, double %41, double\l... 1.000000e+00)\l  %44 = tail call double @llvm.fma.f64(double %43, double %41, double %41)\l  %45 = tail call double @llvm.fma.f64(double %42, double %44, double\l... 1.000000e+00)\l  %46 = tail call double @llvm.fma.f64(double %45, double %44, double %44)\l  %47 = fmul double %37, %46\l  %48 = fmul double %38, %47\l  %49 = fneg double %48\l  %50 = tail call double @llvm.fma.f64(double %47, double %38, double %49)\l  %51 = tail call double @llvm.fma.f64(double %47, double %40, double %50)\l  %52 = fadd double %48, %51\l  %53 = fsub double %52, %48\l  %54 = fsub double %51, %53\l  %55 = fsub double %37, %52\l  %56 = fsub double %37, %55\l  %57 = fsub double %56, %52\l  %58 = fsub double %57, %54\l  %59 = fadd double %55, %58\l  %60 = fmul double %46, %59\l  %61 = fadd double %47, %60\l  %62 = fsub double %61, %47\l  %63 = fsub double %60, %62\l  %64 = fmul double %61, %61\l  %65 = fneg double %64\l  %66 = tail call double @llvm.fma.f64(double %61, double %61, double %65)\l  %67 = fmul double %63, 2.000000e+00\l  %68 = tail call double @llvm.fma.f64(double %61, double %67, double %66)\l  %69 = fadd double %64, %68\l  %70 = fsub double %69, %64\l  %71 = fsub double %68, %70\l  %72 = tail call double @llvm.fma.f64(double %69, double 0x3FBDEE674222DE17,\l... double 0x3FBA6564968915A9)\l  %73 = tail call double @llvm.fma.f64(double %69, double %72, double\l... 0x3FBE25E43ABE935A)\l  %74 = tail call double @llvm.fma.f64(double %69, double %73, double\l... 0x3FC110EF47E6C9C2)\l  %75 = tail call double @llvm.fma.f64(double %69, double %74, double\l... 0x3FC3B13BCFA74449)\l  %76 = tail call double @llvm.fma.f64(double %69, double %75, double\l... 0x3FC745D171BF3C30)\l  %77 = tail call double @llvm.fma.f64(double %69, double %76, double\l... 0x3FCC71C71C7792CE)\l  %78 = tail call double @llvm.fma.f64(double %69, double %77, double\l... 0x3FD24924924920DA)\l  %79 = tail call double @llvm.fma.f64(double %69, double %78, double\l... 0x3FD999999999999C)\l  %80 = sitofp i32 %36 to double\l  %81 = fmul double %80, 0x3FE62E42FEFA39EF\l  %82 = fneg double %81\l  %83 = tail call double @llvm.fma.f64(double %80, double 0x3FE62E42FEFA39EF,\l... double %82)\l  %84 = tail call double @llvm.fma.f64(double %80, double 0x3C7ABC9E3B39803F,\l... double %83)\l  %85 = fadd double %81, %84\l  %86 = fsub double %85, %81\l  %87 = fsub double %84, %86\l  %88 = tail call double @llvm.amdgcn.ldexp.f64(double %61, i32 1)\l  %89 = tail call double @llvm.amdgcn.ldexp.f64(double %63, i32 1)\l  %90 = fmul double %61, %69\l  %91 = fneg double %90\l  %92 = tail call double @llvm.fma.f64(double %69, double %61, double %91)\l  %93 = tail call double @llvm.fma.f64(double %69, double %63, double %92)\l  %94 = tail call double @llvm.fma.f64(double %71, double %61, double %93)\l  %95 = fadd double %90, %94\l  %96 = fsub double %95, %90\l  %97 = fsub double %94, %96\l  %98 = fmul double %69, %79\l  %99 = fneg double %98\l  %100 = tail call double @llvm.fma.f64(double %69, double %79, double %99)\l  %101 = tail call double @llvm.fma.f64(double %71, double %79, double %100)\l  %102 = fadd double %98, %101\l  %103 = fsub double %102, %98\l  %104 = fsub double %101, %103\l  %105 = fadd double %102, 0x3FE5555555555555\l  %106 = fadd double %105, 0xBFE5555555555555\l  %107 = fsub double %102, %106\l  %108 = fadd double %104, 0x3C8543B0D5DF274D\l  %109 = fadd double %108, %107\l  %110 = fadd double %105, %109\l  %111 = fsub double %110, %105\l  %112 = fsub double %109, %111\l  %113 = fmul double %95, %110\l  %114 = fneg double %113\l  %115 = tail call double @llvm.fma.f64(double %95, double %110, double %114)\l  %116 = tail call double @llvm.fma.f64(double %95, double %112, double %115)\l  %117 = tail call double @llvm.fma.f64(double %97, double %110, double %116)\l  %118 = fadd double %113, %117\l  %119 = fsub double %118, %113\l  %120 = fsub double %117, %119\l  %121 = fadd double %88, %118\l  %122 = fsub double %121, %88\l  %123 = fsub double %118, %122\l  %124 = fadd double %89, %120\l  %125 = fadd double %124, %123\l  %126 = fadd double %121, %125\l  %127 = fsub double %126, %121\l  %128 = fsub double %125, %127\l  %129 = fadd double %85, %126\l  %130 = fsub double %129, %85\l  %131 = fsub double %129, %130\l  %132 = fsub double %85, %131\l  %133 = fsub double %126, %130\l  %134 = fadd double %133, %132\l  %135 = fadd double %87, %128\l  %136 = fsub double %135, %87\l  %137 = fsub double %135, %136\l  %138 = fsub double %87, %137\l  %139 = fsub double %128, %136\l  %140 = fadd double %139, %138\l  %141 = fadd double %135, %134\l  %142 = fadd double %129, %141\l  %143 = fsub double %142, %129\l  %144 = fsub double %141, %143\l  %145 = fadd double %140, %144\l  %146 = fadd double %142, %145\l  %147 = fsub double %146, %142\l  %148 = fsub double %145, %147\l  %149 = icmp slt i32 %2, 0\l  %150 = icmp sgt i32 %2, -1\l  %151 = fcmp oeq double %30, 1.000000e+00\l  %152 = fadd double %30, -1.000000e+00\l  %153 = bitcast double %152 to \<2 x i32\>\l  %154 = extractelement \<2 x i32\> %153, i64 1\l  %155 = fcmp oeq double %30, 0x7FF0000000000000\l  %156 = icmp eq i32 %2, 0\l  %157 = or i1 %156, %155\l  %158 = icmp eq i32 %2, 1\l  br label %377\l}"];
	Node0x5ba8b90 -> Node0x5bb0c50;
	Node0x5bb0d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%159:\l159:                                              \l  br i1 %27, label %160, label %496\l|{<s0>T|<s1>F}}"];
	Node0x5bb0d50:s0 -> Node0x5bb0de0;
	Node0x5bb0d50:s1 -> Node0x5ba8c20;
	Node0x5bb0de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%160:\l160:                                              \l  %161 = mul nsw i32 %4, %1\l  %162 = add nsw i32 %2, -1\l  %163 = sitofp i32 %162 to float\l  %164 = mul nsw i32 %5, %4\l  %165 = mul nsw i32 %2, %1\l  %166 = sitofp i32 %2 to double\l  %167 = sitofp i32 %1 to double\l  %168 = tail call double @llvm.fabs.f64(double %166)\l  %169 = tail call double @llvm.amdgcn.frexp.mant.f64(double %168)\l  %170 = fcmp olt double %169, 0x3FE5555555555555\l  %171 = zext i1 %170 to i32\l  %172 = tail call double @llvm.amdgcn.ldexp.f64(double %169, i32 %171)\l  %173 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %168)\l  %174 = sub nsw i32 %173, %171\l  %175 = fadd double %172, -1.000000e+00\l  %176 = fadd double %172, 1.000000e+00\l  %177 = fadd double %176, -1.000000e+00\l  %178 = fsub double %172, %177\l  %179 = tail call double @llvm.amdgcn.rcp.f64(double %176)\l  %180 = fneg double %176\l  %181 = tail call double @llvm.fma.f64(double %180, double %179, double\l... 1.000000e+00)\l  %182 = tail call double @llvm.fma.f64(double %181, double %179, double %179)\l  %183 = tail call double @llvm.fma.f64(double %180, double %182, double\l... 1.000000e+00)\l  %184 = tail call double @llvm.fma.f64(double %183, double %182, double %182)\l  %185 = fmul double %175, %184\l  %186 = fmul double %176, %185\l  %187 = fneg double %186\l  %188 = tail call double @llvm.fma.f64(double %185, double %176, double %187)\l  %189 = tail call double @llvm.fma.f64(double %185, double %178, double %188)\l  %190 = fadd double %186, %189\l  %191 = fsub double %190, %186\l  %192 = fsub double %189, %191\l  %193 = fsub double %175, %190\l  %194 = fsub double %175, %193\l  %195 = fsub double %194, %190\l  %196 = fsub double %195, %192\l  %197 = fadd double %193, %196\l  %198 = fmul double %184, %197\l  %199 = fadd double %185, %198\l  %200 = fsub double %199, %185\l  %201 = fsub double %198, %200\l  %202 = fmul double %199, %199\l  %203 = fneg double %202\l  %204 = tail call double @llvm.fma.f64(double %199, double %199, double %203)\l  %205 = fmul double %201, 2.000000e+00\l  %206 = tail call double @llvm.fma.f64(double %199, double %205, double %204)\l  %207 = fadd double %202, %206\l  %208 = fsub double %207, %202\l  %209 = fsub double %206, %208\l  %210 = tail call double @llvm.fma.f64(double %207, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %211 = tail call double @llvm.fma.f64(double %207, double %210, double\l... 0x3FBE25E43ABE935A)\l  %212 = tail call double @llvm.fma.f64(double %207, double %211, double\l... 0x3FC110EF47E6C9C2)\l  %213 = tail call double @llvm.fma.f64(double %207, double %212, double\l... 0x3FC3B13BCFA74449)\l  %214 = tail call double @llvm.fma.f64(double %207, double %213, double\l... 0x3FC745D171BF3C30)\l  %215 = tail call double @llvm.fma.f64(double %207, double %214, double\l... 0x3FCC71C71C7792CE)\l  %216 = tail call double @llvm.fma.f64(double %207, double %215, double\l... 0x3FD24924924920DA)\l  %217 = tail call double @llvm.fma.f64(double %207, double %216, double\l... 0x3FD999999999999C)\l  %218 = sitofp i32 %174 to double\l  %219 = fmul double %218, 0x3FE62E42FEFA39EF\l  %220 = fneg double %219\l  %221 = tail call double @llvm.fma.f64(double %218, double\l... 0x3FE62E42FEFA39EF, double %220)\l  %222 = tail call double @llvm.fma.f64(double %218, double\l... 0x3C7ABC9E3B39803F, double %221)\l  %223 = fadd double %219, %222\l  %224 = fsub double %223, %219\l  %225 = fsub double %222, %224\l  %226 = tail call double @llvm.amdgcn.ldexp.f64(double %199, i32 1)\l  %227 = tail call double @llvm.amdgcn.ldexp.f64(double %201, i32 1)\l  %228 = fmul double %199, %207\l  %229 = fneg double %228\l  %230 = tail call double @llvm.fma.f64(double %207, double %199, double %229)\l  %231 = tail call double @llvm.fma.f64(double %207, double %201, double %230)\l  %232 = tail call double @llvm.fma.f64(double %209, double %199, double %231)\l  %233 = fadd double %228, %232\l  %234 = fsub double %233, %228\l  %235 = fsub double %232, %234\l  %236 = fmul double %207, %217\l  %237 = fneg double %236\l  %238 = tail call double @llvm.fma.f64(double %207, double %217, double %237)\l  %239 = tail call double @llvm.fma.f64(double %209, double %217, double %238)\l  %240 = fadd double %236, %239\l  %241 = fsub double %240, %236\l  %242 = fsub double %239, %241\l  %243 = fadd double %240, 0x3FE5555555555555\l  %244 = fadd double %243, 0xBFE5555555555555\l  %245 = fsub double %240, %244\l  %246 = fadd double %242, 0x3C8543B0D5DF274D\l  %247 = fadd double %246, %245\l  %248 = fadd double %243, %247\l  %249 = fsub double %248, %243\l  %250 = fsub double %247, %249\l  %251 = fmul double %233, %248\l  %252 = fneg double %251\l  %253 = tail call double @llvm.fma.f64(double %233, double %248, double %252)\l  %254 = tail call double @llvm.fma.f64(double %233, double %250, double %253)\l  %255 = tail call double @llvm.fma.f64(double %235, double %248, double %254)\l  %256 = fadd double %251, %255\l  %257 = fsub double %256, %251\l  %258 = fsub double %255, %257\l  %259 = fadd double %226, %256\l  %260 = fsub double %259, %226\l  %261 = fsub double %256, %260\l  %262 = fadd double %227, %258\l  %263 = fadd double %262, %261\l  %264 = fadd double %259, %263\l  %265 = fsub double %264, %259\l  %266 = fsub double %263, %265\l  %267 = fadd double %223, %264\l  %268 = fsub double %267, %223\l  %269 = fsub double %267, %268\l  %270 = fsub double %223, %269\l  %271 = fsub double %264, %268\l  %272 = fadd double %271, %270\l  %273 = fadd double %225, %266\l  %274 = fsub double %273, %225\l  %275 = fsub double %273, %274\l  %276 = fsub double %225, %275\l  %277 = fsub double %266, %274\l  %278 = fadd double %277, %276\l  %279 = fadd double %273, %272\l  %280 = fadd double %267, %279\l  %281 = fsub double %280, %267\l  %282 = fsub double %279, %281\l  %283 = fadd double %278, %282\l  %284 = fadd double %280, %283\l  %285 = fsub double %284, %280\l  %286 = fsub double %283, %285\l  %287 = fmul double %284, %167\l  %288 = fneg double %287\l  %289 = tail call double @llvm.fma.f64(double %167, double %284, double %288)\l  %290 = tail call double @llvm.fma.f64(double %167, double %286, double %289)\l  %291 = fadd double %287, %290\l  %292 = fsub double %291, %287\l  %293 = fsub double %290, %292\l  %294 = tail call double @llvm.fabs.f64(double %287) #13\l  %295 = fcmp oeq double %294, 0x7FF0000000000000\l  %296 = select i1 %295, double %287, double %291\l  %297 = tail call double @llvm.fabs.f64(double %296) #13\l  %298 = fcmp oeq double %297, 0x7FF0000000000000\l  %299 = select i1 %298, double 0.000000e+00, double %293\l  %300 = fmul double %296, 0x3FF71547652B82FE\l  %301 = tail call double @llvm.rint.f64(double %300)\l  %302 = fneg double %301\l  %303 = tail call double @llvm.fma.f64(double %302, double\l... 0x3FE62E42FEFA39EF, double %296)\l  %304 = tail call double @llvm.fma.f64(double %302, double\l... 0x3C7ABC9E3B39803F, double %303)\l  %305 = tail call double @llvm.fma.f64(double %304, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %306 = tail call double @llvm.fma.f64(double %304, double %305, double\l... 0x3EC71DEE623FDE64)\l  %307 = tail call double @llvm.fma.f64(double %304, double %306, double\l... 0x3EFA01997C89E6B0)\l  %308 = tail call double @llvm.fma.f64(double %304, double %307, double\l... 0x3F2A01A014761F6E)\l  %309 = tail call double @llvm.fma.f64(double %304, double %308, double\l... 0x3F56C16C1852B7B0)\l  %310 = tail call double @llvm.fma.f64(double %304, double %309, double\l... 0x3F81111111122322)\l  %311 = tail call double @llvm.fma.f64(double %304, double %310, double\l... 0x3FA55555555502A1)\l  %312 = tail call double @llvm.fma.f64(double %304, double %311, double\l... 0x3FC5555555555511)\l  %313 = tail call double @llvm.fma.f64(double %304, double %312, double\l... 0x3FE000000000000B)\l  %314 = tail call double @llvm.fma.f64(double %304, double %313, double\l... 1.000000e+00)\l  %315 = tail call double @llvm.fma.f64(double %304, double %314, double\l... 1.000000e+00)\l  %316 = fptosi double %301 to i32\l  %317 = tail call double @llvm.amdgcn.ldexp.f64(double %315, i32 %316)\l  %318 = fcmp ogt double %296, 1.024000e+03\l  %319 = select i1 %318, double 0x7FF0000000000000, double %317\l  %320 = fcmp olt double %296, -1.075000e+03\l  %321 = select i1 %320, double 0.000000e+00, double %319\l  %322 = tail call double @llvm.fma.f64(double %321, double %299, double %321)\l  %323 = tail call double @llvm.fabs.f64(double %321) #13\l  %324 = fcmp oeq double %323, 0x7FF0000000000000\l  %325 = select i1 %324, double %321, double %322\l  %326 = tail call double @llvm.fabs.f64(double %167)\l  %327 = tail call double @llvm.trunc.f64(double %326)\l  %328 = fcmp oeq double %326, %327\l  %329 = zext i1 %328 to i32\l  %330 = fmul double %327, 5.000000e-01\l  %331 = tail call double @llvm.amdgcn.fract.f64(double %330)\l  %332 = tail call i1 @llvm.amdgcn.class.f64(double %330, i32 516)\l  %333 = select i1 %332, double 0.000000e+00, double %331\l  %334 = fcmp oeq double %333, 0.000000e+00\l  %335 = and i1 %328, %334\l  %336 = zext i1 %335 to i32\l  %337 = add nuw nsw i32 %336, %329\l  %338 = icmp eq i32 %337, 1\l  %339 = icmp slt i32 %2, 0\l  %340 = and i1 %339, %338\l  %341 = select i1 %340, double -0.000000e+00, double 0.000000e+00\l  %342 = tail call double @llvm.copysign.f64(double %325, double %341)\l  %343 = icmp sgt i32 %2, -1\l  %344 = icmp ne i32 %337, 0\l  %345 = select i1 %343, i1 true, i1 %344\l  %346 = select i1 %345, double %342, double 0x7FF8000000000000\l  %347 = fcmp oeq double %326, 0x7FF0000000000000\l  %348 = fcmp oeq double %168, 1.000000e+00\l  %349 = fadd double %168, -1.000000e+00\l  %350 = bitcast double %167 to \<2 x i32\>\l  %351 = extractelement \<2 x i32\> %350, i64 1\l  %352 = bitcast double %349 to \<2 x i32\>\l  %353 = extractelement \<2 x i32\> %352, i64 1\l  %354 = xor i32 %353, %351\l  %355 = icmp sgt i32 %354, -1\l  %356 = select i1 %355, double 0x7FF0000000000000, double 0.000000e+00\l  %357 = select i1 %348, double %168, double %356\l  %358 = select i1 %347, double %357, double %346\l  %359 = fcmp oeq double %168, 0x7FF0000000000000\l  %360 = icmp eq i32 %2, 0\l  %361 = or i1 %360, %359\l  %362 = select i1 %360, double 0.000000e+00, double 0x7FF0000000000000\l  %363 = select i1 %338, double %166, double 0.000000e+00\l  %364 = tail call double @llvm.copysign.f64(double %362, double %363)\l  %365 = select i1 %361, double %364, double %358\l  %366 = icmp eq i32 %2, 1\l  %367 = fptosi double %365 to i32\l  %368 = shl nsw i32 %367, 1\l  %369 = select i1 %366, i32 2, i32 %368\l  %370 = add nsw i32 %369, %165\l  %371 = add i32 %164, %3\l  %372 = mul i32 %370, %371\l  %373 = and i32 %1, 1\l  %374 = icmp eq i32 %1, 1\l  br i1 %374, label %469, label %375\l|{<s0>T|<s1>F}}"];
	Node0x5bb0de0:s0 -> Node0x5bbbbb0;
	Node0x5bb0de0:s1 -> Node0x5bbbc00;
	Node0x5bbbc00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%375:\l375:                                              \l  %376 = and i32 %1, -2\l  br label %497\l}"];
	Node0x5bbbc00 -> Node0x5bbbe00;
	Node0x5bb0c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%377:\l377:                                              \l  %378 = phi i32 [ %19, %28 ], [ %466, %377 ]\l  %379 = phi i32 [ 0, %28 ], [ %467, %377 ]\l  %380 = sitofp i32 %378 to double\l  %381 = sub nsw i32 %1, %379\l  %382 = add nsw i32 %381, -1\l  %383 = sitofp i32 %382 to double\l  %384 = fmul double %146, %383\l  %385 = fneg double %384\l  %386 = tail call double @llvm.fma.f64(double %383, double %146, double %385)\l  %387 = tail call double @llvm.fma.f64(double %383, double %148, double %386)\l  %388 = fadd double %384, %387\l  %389 = fsub double %388, %384\l  %390 = fsub double %387, %389\l  %391 = tail call double @llvm.fabs.f64(double %384) #13\l  %392 = fcmp oeq double %391, 0x7FF0000000000000\l  %393 = select i1 %392, double %384, double %388\l  %394 = tail call double @llvm.fabs.f64(double %393) #13\l  %395 = fcmp oeq double %394, 0x7FF0000000000000\l  %396 = select i1 %395, double 0.000000e+00, double %390\l  %397 = fmul double %393, 0x3FF71547652B82FE\l  %398 = tail call double @llvm.rint.f64(double %397)\l  %399 = fneg double %398\l  %400 = tail call double @llvm.fma.f64(double %399, double\l... 0x3FE62E42FEFA39EF, double %393)\l  %401 = tail call double @llvm.fma.f64(double %399, double\l... 0x3C7ABC9E3B39803F, double %400)\l  %402 = tail call double @llvm.fma.f64(double %401, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %403 = tail call double @llvm.fma.f64(double %401, double %402, double\l... 0x3EC71DEE623FDE64)\l  %404 = tail call double @llvm.fma.f64(double %401, double %403, double\l... 0x3EFA01997C89E6B0)\l  %405 = tail call double @llvm.fma.f64(double %401, double %404, double\l... 0x3F2A01A014761F6E)\l  %406 = tail call double @llvm.fma.f64(double %401, double %405, double\l... 0x3F56C16C1852B7B0)\l  %407 = tail call double @llvm.fma.f64(double %401, double %406, double\l... 0x3F81111111122322)\l  %408 = tail call double @llvm.fma.f64(double %401, double %407, double\l... 0x3FA55555555502A1)\l  %409 = tail call double @llvm.fma.f64(double %401, double %408, double\l... 0x3FC5555555555511)\l  %410 = tail call double @llvm.fma.f64(double %401, double %409, double\l... 0x3FE000000000000B)\l  %411 = tail call double @llvm.fma.f64(double %401, double %410, double\l... 1.000000e+00)\l  %412 = tail call double @llvm.fma.f64(double %401, double %411, double\l... 1.000000e+00)\l  %413 = fptosi double %398 to i32\l  %414 = tail call double @llvm.amdgcn.ldexp.f64(double %412, i32 %413)\l  %415 = fcmp ogt double %393, 1.024000e+03\l  %416 = select i1 %415, double 0x7FF0000000000000, double %414\l  %417 = fcmp olt double %393, -1.075000e+03\l  %418 = select i1 %417, double 0.000000e+00, double %416\l  %419 = tail call double @llvm.fma.f64(double %418, double %396, double %418)\l  %420 = tail call double @llvm.fabs.f64(double %418) #13\l  %421 = fcmp oeq double %420, 0x7FF0000000000000\l  %422 = select i1 %421, double %418, double %419\l  %423 = tail call double @llvm.fabs.f64(double %383)\l  %424 = tail call double @llvm.trunc.f64(double %423)\l  %425 = fcmp oeq double %423, %424\l  %426 = zext i1 %425 to i32\l  %427 = fmul double %424, 5.000000e-01\l  %428 = tail call double @llvm.amdgcn.fract.f64(double %427)\l  %429 = tail call i1 @llvm.amdgcn.class.f64(double %427, i32 516)\l  %430 = select i1 %429, double 0.000000e+00, double %428\l  %431 = fcmp oeq double %430, 0.000000e+00\l  %432 = and i1 %425, %431\l  %433 = zext i1 %432 to i32\l  %434 = add nuw nsw i32 %433, %426\l  %435 = icmp eq i32 %434, 1\l  %436 = and i1 %149, %435\l  %437 = select i1 %436, double -0.000000e+00, double 0.000000e+00\l  %438 = tail call double @llvm.copysign.f64(double %422, double %437)\l  %439 = icmp ne i32 %434, 0\l  %440 = select i1 %150, i1 true, i1 %439\l  %441 = select i1 %440, double %438, double 0x7FF8000000000000\l  %442 = fcmp oeq double %423, 0x7FF0000000000000\l  %443 = bitcast double %383 to \<2 x i32\>\l  %444 = extractelement \<2 x i32\> %443, i64 1\l  %445 = xor i32 %444, %154\l  %446 = icmp sgt i32 %445, -1\l  %447 = select i1 %446, double 0x7FF0000000000000, double 0.000000e+00\l  %448 = select i1 %151, double %30, double %447\l  %449 = select i1 %442, double %448, double %441\l  %450 = icmp slt i32 %381, 1\l  %451 = xor i1 %156, %450\l  %452 = select i1 %451, double 0.000000e+00, double 0x7FF0000000000000\l  %453 = select i1 %435, double %29, double 0.000000e+00\l  %454 = tail call double @llvm.copysign.f64(double %452, double %453)\l  %455 = select i1 %157, double %454, double %449\l  %456 = icmp eq i32 %382, 0\l  %457 = or i1 %158, %456\l  %458 = select i1 %457, double 1.000000e+00, double %455\l  %459 = fdiv contract double %380, %458\l  %460 = fptosi double %459 to i32\l  %461 = zext i32 %379 to i64\l  %462 = getelementptr inbounds i32, i32 addrspace(1)* %26, i64 %461\l  store i32 %460, i32 addrspace(1)* %462, align 4, !tbaa !7\l  %463 = sitofp i32 %460 to double\l  %464 = fmul contract double %458, %463\l  %465 = fsub contract double %380, %464\l  %466 = fptosi double %465 to i32\l  %467 = add nuw nsw i32 %379, 1\l  %468 = icmp eq i32 %467, %1\l  br i1 %468, label %159, label %377, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5bb0c50:s0 -> Node0x5bb0d50;
	Node0x5bb0c50:s1 -> Node0x5bb0c50;
	Node0x5bbbbb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%469:\l469:                                              \l  %470 = phi i32 [ 0, %160 ], [ %547, %497 ]\l  %471 = icmp eq i32 %373, 0\l  br i1 %471, label %496, label %472\l|{<s0>T|<s1>F}}"];
	Node0x5bbbbb0:s0 -> Node0x5ba8c20;
	Node0x5bbbbb0:s1 -> Node0x5bc0720;
	Node0x5bc0720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%472:\l472:                                              \l  %473 = zext i32 %470 to i64\l  %474 = getelementptr inbounds i32, i32 addrspace(1)* %26, i64 %473\l  %475 = load i32, i32 addrspace(1)* %474, align 4, !tbaa !7\l  %476 = sitofp i32 %475 to float\l  %477 = add nsw i32 %470, %161\l  %478 = sext i32 %477 to i64\l  %479 = getelementptr inbounds float, float addrspace(1)* %7, i64 %478\l  %480 = load float, float addrspace(1)* %479, align 4, !tbaa !13\l  %481 = getelementptr inbounds float, float addrspace(1)* %6, i64 %478\l  %482 = load float, float addrspace(1)* %481, align 4, !tbaa !13\l  %483 = fsub contract float %480, %482\l  %484 = fmul contract float %483, %476\l  %485 = fdiv contract float %484, %163\l  %486 = fadd contract float %482, %485\l  %487 = mul nsw i32 %470, %0\l  %488 = add nsw i32 %487, %19\l  %489 = sext i32 %488 to i64\l  %490 = getelementptr inbounds float, float addrspace(1)* %9, i64 %489\l  store float %486, float addrspace(1)* %490, align 4, !tbaa !13\l  %491 = mul nsw i32 %470, %2\l  %492 = add nsw i32 %491, %372\l  %493 = add nsw i32 %492, %475\l  %494 = sext i32 %493 to i64\l  %495 = getelementptr inbounds float, float addrspace(1)* %8, i64 %494\l  store float %486, float addrspace(1)* %495, align 4, !tbaa !13\l  br label %496\l}"];
	Node0x5bc0720 -> Node0x5ba8c20;
	Node0x5ba8c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%496:\l496:                                              \l  tail call fastcc void @__ockl_dm_dealloc(i64 %25) #12\l  br label %550\l}"];
	Node0x5ba8c20 -> Node0x5ba8630;
	Node0x5bbbe00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%497:\l497:                                              \l  %498 = phi i32 [ 0, %375 ], [ %547, %497 ]\l  %499 = phi i32 [ 0, %375 ], [ %548, %497 ]\l  %500 = zext i32 %498 to i64\l  %501 = getelementptr inbounds i32, i32 addrspace(1)* %26, i64 %500\l  %502 = load i32, i32 addrspace(1)* %501, align 4, !tbaa !7\l  %503 = sitofp i32 %502 to float\l  %504 = add nsw i32 %498, %161\l  %505 = sext i32 %504 to i64\l  %506 = getelementptr inbounds float, float addrspace(1)* %7, i64 %505\l  %507 = load float, float addrspace(1)* %506, align 4, !tbaa !13\l  %508 = getelementptr inbounds float, float addrspace(1)* %6, i64 %505\l  %509 = load float, float addrspace(1)* %508, align 4, !tbaa !13\l  %510 = fsub contract float %507, %509\l  %511 = fmul contract float %510, %503\l  %512 = fdiv contract float %511, %163\l  %513 = fadd contract float %509, %512\l  %514 = mul nsw i32 %498, %0\l  %515 = add nsw i32 %514, %19\l  %516 = sext i32 %515 to i64\l  %517 = getelementptr inbounds float, float addrspace(1)* %9, i64 %516\l  store float %513, float addrspace(1)* %517, align 4, !tbaa !13\l  %518 = mul nsw i32 %498, %2\l  %519 = add nsw i32 %518, %372\l  %520 = add nsw i32 %519, %502\l  %521 = sext i32 %520 to i64\l  %522 = getelementptr inbounds float, float addrspace(1)* %8, i64 %521\l  store float %513, float addrspace(1)* %522, align 4, !tbaa !13\l  %523 = or i32 %498, 1\l  %524 = zext i32 %523 to i64\l  %525 = getelementptr inbounds i32, i32 addrspace(1)* %26, i64 %524\l  %526 = load i32, i32 addrspace(1)* %525, align 4, !tbaa !7\l  %527 = sitofp i32 %526 to float\l  %528 = add nsw i32 %523, %161\l  %529 = sext i32 %528 to i64\l  %530 = getelementptr inbounds float, float addrspace(1)* %7, i64 %529\l  %531 = load float, float addrspace(1)* %530, align 4, !tbaa !13\l  %532 = getelementptr inbounds float, float addrspace(1)* %6, i64 %529\l  %533 = load float, float addrspace(1)* %532, align 4, !tbaa !13\l  %534 = fsub contract float %531, %533\l  %535 = fmul contract float %534, %527\l  %536 = fdiv contract float %535, %163\l  %537 = fadd contract float %533, %536\l  %538 = mul nsw i32 %523, %0\l  %539 = add nsw i32 %538, %19\l  %540 = sext i32 %539 to i64\l  %541 = getelementptr inbounds float, float addrspace(1)* %9, i64 %540\l  store float %537, float addrspace(1)* %541, align 4, !tbaa !13\l  %542 = mul nsw i32 %523, %2\l  %543 = add nsw i32 %542, %372\l  %544 = add nsw i32 %543, %526\l  %545 = sext i32 %544 to i64\l  %546 = getelementptr inbounds float, float addrspace(1)* %8, i64 %545\l  store float %537, float addrspace(1)* %546, align 4, !tbaa !13\l  %547 = add nuw nsw i32 %498, 2\l  %548 = add i32 %499, 2\l  %549 = icmp eq i32 %548, %376\l  br i1 %549, label %469, label %497, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5bbbe00:s0 -> Node0x5bbbbb0;
	Node0x5bbbe00:s1 -> Node0x5bbbe00;
	Node0x5ba8630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%550:\l550:                                              \l  ret void\l}"];
}
