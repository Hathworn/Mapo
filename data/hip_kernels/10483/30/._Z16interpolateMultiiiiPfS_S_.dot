digraph "CFG for '_Z16interpolateMultiiiiPfS_S_' function" {
	label="CFG for '_Z16interpolateMultiiiiPfS_S_' function";

	Node0x4638bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %0\l  br i1 %16, label %17, label %802\l|{<s0>T|<s1>F}}"];
	Node0x4638bd0:s0 -> Node0x4638fe0;
	Node0x4638bd0:s1 -> Node0x463a590;
	Node0x4638fe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%17:\l17:                                               \l  %18 = sext i32 %1 to i64\l  %19 = shl nsw i64 %18, 2\l  %20 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %19) #12\l  %21 = ptrtoint i8 addrspace(1)* %20 to i64\l  %22 = bitcast i8 addrspace(1)* %20 to float addrspace(1)*\l  %23 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %19) #12\l  %24 = ptrtoint i8 addrspace(1)* %23 to i64\l  %25 = bitcast i8 addrspace(1)* %23 to float addrspace(1)*\l  %26 = add nsw i32 %1, -1\l  %27 = sitofp i32 %26 to double\l  %28 = fmul double %27, 0x3FE62E42FEFA39EF\l  %29 = fneg double %28\l  %30 = tail call double @llvm.fma.f64(double %27, double 0x3FE62E42FEFA39EF,\l... double %29)\l  %31 = tail call double @llvm.fma.f64(double %27, double 0x3C7ABC9E3B39803F,\l... double %30)\l  %32 = fadd double %28, %31\l  %33 = fsub double %32, %28\l  %34 = fsub double %31, %33\l  %35 = tail call double @llvm.fabs.f64(double %28) #13\l  %36 = fcmp oeq double %35, 0x7FF0000000000000\l  %37 = select i1 %36, double %28, double %32\l  %38 = tail call double @llvm.fabs.f64(double %37) #13\l  %39 = fcmp oeq double %38, 0x7FF0000000000000\l  %40 = select i1 %39, double 0.000000e+00, double %34\l  %41 = fmul double %37, 0x3FF71547652B82FE\l  %42 = tail call double @llvm.rint.f64(double %41)\l  %43 = fneg double %42\l  %44 = tail call double @llvm.fma.f64(double %43, double 0x3FE62E42FEFA39EF,\l... double %37)\l  %45 = tail call double @llvm.fma.f64(double %43, double 0x3C7ABC9E3B39803F,\l... double %44)\l  %46 = tail call double @llvm.fma.f64(double %45, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %47 = tail call double @llvm.fma.f64(double %45, double %46, double\l... 0x3EC71DEE623FDE64)\l  %48 = tail call double @llvm.fma.f64(double %45, double %47, double\l... 0x3EFA01997C89E6B0)\l  %49 = tail call double @llvm.fma.f64(double %45, double %48, double\l... 0x3F2A01A014761F6E)\l  %50 = tail call double @llvm.fma.f64(double %45, double %49, double\l... 0x3F56C16C1852B7B0)\l  %51 = tail call double @llvm.fma.f64(double %45, double %50, double\l... 0x3F81111111122322)\l  %52 = tail call double @llvm.fma.f64(double %45, double %51, double\l... 0x3FA55555555502A1)\l  %53 = tail call double @llvm.fma.f64(double %45, double %52, double\l... 0x3FC5555555555511)\l  %54 = tail call double @llvm.fma.f64(double %45, double %53, double\l... 0x3FE000000000000B)\l  %55 = tail call double @llvm.fma.f64(double %45, double %54, double\l... 1.000000e+00)\l  %56 = tail call double @llvm.fma.f64(double %45, double %55, double\l... 1.000000e+00)\l  %57 = fptosi double %42 to i32\l  %58 = tail call double @llvm.amdgcn.ldexp.f64(double %56, i32 %57)\l  %59 = fcmp ogt double %37, 1.024000e+03\l  %60 = select i1 %59, double 0x7FF0000000000000, double %58\l  %61 = fcmp olt double %37, -1.075000e+03\l  %62 = select i1 %61, double 0.000000e+00, double %60\l  %63 = tail call double @llvm.fma.f64(double %62, double %40, double %62)\l  %64 = tail call double @llvm.fabs.f64(double %62) #13\l  %65 = fcmp oeq double %64, 0x7FF0000000000000\l  %66 = select i1 %65, double %62, double %63\l  %67 = tail call double @llvm.fabs.f64(double %27)\l  %68 = tail call double @llvm.trunc.f64(double %67)\l  %69 = fcmp oeq double %67, %68\l  %70 = zext i1 %69 to i32\l  %71 = fmul double %68, 5.000000e-01\l  %72 = tail call double @llvm.amdgcn.fract.f64(double %71)\l  %73 = tail call i1 @llvm.amdgcn.class.f64(double %71, i32 516)\l  %74 = select i1 %73, double 0.000000e+00, double %72\l  %75 = fcmp oeq double %74, 0.000000e+00\l  %76 = and i1 %69, %75\l  %77 = zext i1 %76 to i32\l  %78 = add nuw nsw i32 %77, %70\l  %79 = icmp eq i32 %78, 1\l  %80 = tail call double @llvm.fabs.f64(double %66)\l  %81 = fcmp oeq double %67, 0x7FF0000000000000\l  %82 = bitcast double %27 to \<2 x i32\>\l  %83 = extractelement \<2 x i32\> %82, i64 1\l  %84 = icmp sgt i32 %83, -1\l  %85 = select i1 %84, double 0x7FF0000000000000, double 0.000000e+00\l  %86 = select i1 %81, double %85, double %80\l  %87 = icmp slt i32 %1, 1\l  %88 = icmp eq i32 %26, 0\l  %89 = fptosi double %86 to i32\l  %90 = select i1 %88, i32 1, i32 %89\l  %91 = sext i32 %90 to i64\l  %92 = shl nsw i64 %91, 2\l  %93 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %92) #12\l  %94 = ptrtoint i8 addrspace(1)* %93 to i64\l  %95 = bitcast i8 addrspace(1)* %93 to float addrspace(1)*\l  %96 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %19) #12\l  %97 = ptrtoint i8 addrspace(1)* %96 to i64\l  %98 = bitcast i8 addrspace(1)* %96 to i32 addrspace(1)*\l  %99 = icmp sgt i32 %1, 0\l  br i1 %99, label %102, label %100\l|{<s0>T|<s1>F}}"];
	Node0x4638fe0:s0 -> Node0x46406a0;
	Node0x4638fe0:s1 -> Node0x46406f0;
	Node0x46406f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%100:\l100:                                              \l  %101 = mul nsw i32 %15, %1\l  br label %107\l}"];
	Node0x46406f0 -> Node0x46408c0;
	Node0x46406a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%102:\l102:                                              \l  %103 = add nsw i32 %2, -1\l  %104 = sitofp i32 %103 to float\l  %105 = mul nsw i32 %15, %1\l  %106 = add nsw i32 %2, -2\l  br label %318\l}"];
	Node0x46406a0 -> Node0x4640ba0;
	Node0x46408c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%107:\l107:                                              \l  %108 = phi i32 [ %101, %100 ], [ %105, %349 ]\l  %109 = load i32, i32 addrspace(1)* %98, align 4, !tbaa !7\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %3, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11\l  %113 = add nsw i32 %109, 1\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %3, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !11\l  %117 = sext i32 %108 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %4, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !11\l  %120 = fsub contract float %119, %112\l  %121 = fsub contract float %116, %112\l  %122 = fdiv contract float %120, %121\l  %123 = icmp sgt i32 %90, 0\l  br i1 %123, label %124, label %351\l|{<s0>T|<s1>F}}"];
	Node0x46408c0:s0 -> Node0x4641de0;
	Node0x46408c0:s1 -> Node0x4641e70;
	Node0x4641de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%124:\l124:                                              \l  %125 = mul nsw i32 %2, %1\l  %126 = icmp sgt i32 %1, 1\l  %127 = sitofp i32 %2 to double\l  %128 = tail call double @llvm.fabs.f64(double %127)\l  %129 = tail call double @llvm.amdgcn.frexp.mant.f64(double %128)\l  %130 = fcmp olt double %129, 0x3FE5555555555555\l  %131 = zext i1 %130 to i32\l  %132 = tail call double @llvm.amdgcn.ldexp.f64(double %129, i32 %131)\l  %133 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %128)\l  %134 = sub nsw i32 %133, %131\l  %135 = fadd double %132, -1.000000e+00\l  %136 = fadd double %132, 1.000000e+00\l  %137 = fadd double %136, -1.000000e+00\l  %138 = fsub double %132, %137\l  %139 = tail call double @llvm.amdgcn.rcp.f64(double %136)\l  %140 = fneg double %136\l  %141 = tail call double @llvm.fma.f64(double %140, double %139, double\l... 1.000000e+00)\l  %142 = tail call double @llvm.fma.f64(double %141, double %139, double %139)\l  %143 = tail call double @llvm.fma.f64(double %140, double %142, double\l... 1.000000e+00)\l  %144 = tail call double @llvm.fma.f64(double %143, double %142, double %142)\l  %145 = fmul double %135, %144\l  %146 = fmul double %136, %145\l  %147 = fneg double %146\l  %148 = tail call double @llvm.fma.f64(double %145, double %136, double %147)\l  %149 = tail call double @llvm.fma.f64(double %145, double %138, double %148)\l  %150 = fadd double %146, %149\l  %151 = fsub double %150, %146\l  %152 = fsub double %149, %151\l  %153 = fsub double %135, %150\l  %154 = fsub double %135, %153\l  %155 = fsub double %154, %150\l  %156 = fsub double %155, %152\l  %157 = fadd double %153, %156\l  %158 = fmul double %144, %157\l  %159 = fadd double %145, %158\l  %160 = fsub double %159, %145\l  %161 = fsub double %158, %160\l  %162 = fmul double %159, %159\l  %163 = fneg double %162\l  %164 = tail call double @llvm.fma.f64(double %159, double %159, double %163)\l  %165 = fmul double %161, 2.000000e+00\l  %166 = tail call double @llvm.fma.f64(double %159, double %165, double %164)\l  %167 = fadd double %162, %166\l  %168 = fsub double %167, %162\l  %169 = fsub double %166, %168\l  %170 = tail call double @llvm.fma.f64(double %167, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %171 = tail call double @llvm.fma.f64(double %167, double %170, double\l... 0x3FBE25E43ABE935A)\l  %172 = tail call double @llvm.fma.f64(double %167, double %171, double\l... 0x3FC110EF47E6C9C2)\l  %173 = tail call double @llvm.fma.f64(double %167, double %172, double\l... 0x3FC3B13BCFA74449)\l  %174 = tail call double @llvm.fma.f64(double %167, double %173, double\l... 0x3FC745D171BF3C30)\l  %175 = tail call double @llvm.fma.f64(double %167, double %174, double\l... 0x3FCC71C71C7792CE)\l  %176 = tail call double @llvm.fma.f64(double %167, double %175, double\l... 0x3FD24924924920DA)\l  %177 = tail call double @llvm.fma.f64(double %167, double %176, double\l... 0x3FD999999999999C)\l  %178 = sitofp i32 %134 to double\l  %179 = fmul double %178, 0x3FE62E42FEFA39EF\l  %180 = fneg double %179\l  %181 = tail call double @llvm.fma.f64(double %178, double\l... 0x3FE62E42FEFA39EF, double %180)\l  %182 = tail call double @llvm.fma.f64(double %178, double\l... 0x3C7ABC9E3B39803F, double %181)\l  %183 = fadd double %179, %182\l  %184 = fsub double %183, %179\l  %185 = fsub double %182, %184\l  %186 = tail call double @llvm.amdgcn.ldexp.f64(double %159, i32 1)\l  %187 = tail call double @llvm.amdgcn.ldexp.f64(double %161, i32 1)\l  %188 = fmul double %159, %167\l  %189 = fneg double %188\l  %190 = tail call double @llvm.fma.f64(double %167, double %159, double %189)\l  %191 = tail call double @llvm.fma.f64(double %167, double %161, double %190)\l  %192 = tail call double @llvm.fma.f64(double %169, double %159, double %191)\l  %193 = fadd double %188, %192\l  %194 = fsub double %193, %188\l  %195 = fsub double %192, %194\l  %196 = fmul double %167, %177\l  %197 = fneg double %196\l  %198 = tail call double @llvm.fma.f64(double %167, double %177, double %197)\l  %199 = tail call double @llvm.fma.f64(double %169, double %177, double %198)\l  %200 = fadd double %196, %199\l  %201 = fsub double %200, %196\l  %202 = fsub double %199, %201\l  %203 = fadd double %200, 0x3FE5555555555555\l  %204 = fadd double %203, 0xBFE5555555555555\l  %205 = fsub double %200, %204\l  %206 = fadd double %202, 0x3C8543B0D5DF274D\l  %207 = fadd double %206, %205\l  %208 = fadd double %203, %207\l  %209 = fsub double %208, %203\l  %210 = fsub double %207, %209\l  %211 = fmul double %193, %208\l  %212 = fneg double %211\l  %213 = tail call double @llvm.fma.f64(double %193, double %208, double %212)\l  %214 = tail call double @llvm.fma.f64(double %193, double %210, double %213)\l  %215 = tail call double @llvm.fma.f64(double %195, double %208, double %214)\l  %216 = fadd double %211, %215\l  %217 = fsub double %216, %211\l  %218 = fsub double %215, %217\l  %219 = fadd double %186, %216\l  %220 = fsub double %219, %186\l  %221 = fsub double %216, %220\l  %222 = fadd double %187, %218\l  %223 = fadd double %222, %221\l  %224 = fadd double %219, %223\l  %225 = fsub double %224, %219\l  %226 = fsub double %223, %225\l  %227 = fadd double %183, %224\l  %228 = fsub double %227, %183\l  %229 = fsub double %227, %228\l  %230 = fsub double %183, %229\l  %231 = fsub double %224, %228\l  %232 = fadd double %231, %230\l  %233 = fadd double %185, %226\l  %234 = fsub double %233, %185\l  %235 = fsub double %233, %234\l  %236 = fsub double %185, %235\l  %237 = fsub double %226, %234\l  %238 = fadd double %237, %236\l  %239 = fadd double %233, %232\l  %240 = fadd double %227, %239\l  %241 = fsub double %240, %227\l  %242 = fsub double %239, %241\l  %243 = fadd double %238, %242\l  %244 = fadd double %240, %243\l  %245 = fsub double %244, %240\l  %246 = fsub double %243, %245\l  %247 = icmp slt i32 %2, 0\l  %248 = icmp sgt i32 %2, -1\l  %249 = fcmp oeq double %128, 1.000000e+00\l  %250 = fadd double %128, -1.000000e+00\l  %251 = bitcast double %250 to \<2 x i32\>\l  %252 = extractelement \<2 x i32\> %251, i64 1\l  %253 = fcmp oeq double %128, 0x7FF0000000000000\l  %254 = icmp eq i32 %2, 0\l  %255 = or i1 %254, %253\l  %256 = icmp eq i32 %2, 1\l  %257 = fmul double %244, %27\l  %258 = fneg double %257\l  %259 = tail call double @llvm.fma.f64(double %27, double %244, double %258)\l  %260 = tail call double @llvm.fma.f64(double %27, double %246, double %259)\l  %261 = fadd double %257, %260\l  %262 = fsub double %261, %257\l  %263 = fsub double %260, %262\l  %264 = tail call double @llvm.fabs.f64(double %257) #13\l  %265 = fcmp oeq double %264, 0x7FF0000000000000\l  %266 = select i1 %265, double %257, double %261\l  %267 = tail call double @llvm.fabs.f64(double %266) #13\l  %268 = fcmp oeq double %267, 0x7FF0000000000000\l  %269 = select i1 %268, double 0.000000e+00, double %263\l  %270 = fmul double %266, 0x3FF71547652B82FE\l  %271 = tail call double @llvm.rint.f64(double %270)\l  %272 = fneg double %271\l  %273 = tail call double @llvm.fma.f64(double %272, double\l... 0x3FE62E42FEFA39EF, double %266)\l  %274 = tail call double @llvm.fma.f64(double %272, double\l... 0x3C7ABC9E3B39803F, double %273)\l  %275 = tail call double @llvm.fma.f64(double %274, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %276 = tail call double @llvm.fma.f64(double %274, double %275, double\l... 0x3EC71DEE623FDE64)\l  %277 = tail call double @llvm.fma.f64(double %274, double %276, double\l... 0x3EFA01997C89E6B0)\l  %278 = tail call double @llvm.fma.f64(double %274, double %277, double\l... 0x3F2A01A014761F6E)\l  %279 = tail call double @llvm.fma.f64(double %274, double %278, double\l... 0x3F56C16C1852B7B0)\l  %280 = tail call double @llvm.fma.f64(double %274, double %279, double\l... 0x3F81111111122322)\l  %281 = tail call double @llvm.fma.f64(double %274, double %280, double\l... 0x3FA55555555502A1)\l  %282 = tail call double @llvm.fma.f64(double %274, double %281, double\l... 0x3FC5555555555511)\l  %283 = tail call double @llvm.fma.f64(double %274, double %282, double\l... 0x3FE000000000000B)\l  %284 = tail call double @llvm.fma.f64(double %274, double %283, double\l... 1.000000e+00)\l  %285 = tail call double @llvm.fma.f64(double %274, double %284, double\l... 1.000000e+00)\l  %286 = fptosi double %271 to i32\l  %287 = tail call double @llvm.amdgcn.ldexp.f64(double %285, i32 %286)\l  %288 = fcmp ogt double %266, 1.024000e+03\l  %289 = select i1 %288, double 0x7FF0000000000000, double %287\l  %290 = fcmp olt double %266, -1.075000e+03\l  %291 = select i1 %290, double 0.000000e+00, double %289\l  %292 = tail call double @llvm.fma.f64(double %291, double %269, double %291)\l  %293 = tail call double @llvm.fabs.f64(double %291) #13\l  %294 = fcmp oeq double %293, 0x7FF0000000000000\l  %295 = select i1 %294, double %291, double %292\l  %296 = and i1 %247, %79\l  %297 = select i1 %296, double -0.000000e+00, double 0.000000e+00\l  %298 = tail call double @llvm.copysign.f64(double %295, double %297)\l  %299 = icmp ne i32 %78, 0\l  %300 = select i1 %248, i1 true, i1 %299\l  %301 = select i1 %300, double %298, double 0x7FF8000000000000\l  %302 = xor i32 %252, %83\l  %303 = icmp sgt i32 %302, -1\l  %304 = select i1 %303, double 0x7FF0000000000000, double 0.000000e+00\l  %305 = select i1 %249, double %128, double %304\l  %306 = select i1 %81, double %305, double %301\l  %307 = xor i1 %87, %254\l  %308 = select i1 %307, double 0.000000e+00, double 0x7FF0000000000000\l  %309 = select i1 %79, double %127, double 0.000000e+00\l  %310 = tail call double @llvm.copysign.f64(double %308, double %309)\l  %311 = select i1 %255, double %310, double %306\l  %312 = or i1 %256, %88\l  %313 = fptosi double %311 to i32\l  %314 = select i1 %312, i32 1, i32 %313\l  %315 = mul nsw i32 %113, %314\l  %316 = mul nsw i32 %109, %314\l  %317 = fsub contract float 1.000000e+00, %122\l  br label %353\l}"];
	Node0x4641de0 -> Node0x464c230;
	Node0x4640ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%318:\l318:                                              \l  %319 = phi i32 [ 0, %102 ], [ %326, %349 ]\l  %320 = mul nsw i32 %319, %2\l  %321 = sext i32 %320 to i64\l  %322 = getelementptr inbounds float, float addrspace(1)* %3, i64 %321\l  %323 = load float, float addrspace(1)* %322, align 4, !tbaa !11\l  %324 = zext i32 %319 to i64\l  %325 = getelementptr inbounds float, float addrspace(1)* %22, i64 %324\l  store float %323, float addrspace(1)* %325, align 4, !tbaa !11\l  %326 = add nuw nsw i32 %319, 1\l  %327 = mul nsw i32 %326, %2\l  %328 = add nsw i32 %327, -1\l  %329 = sext i32 %328 to i64\l  %330 = getelementptr inbounds float, float addrspace(1)* %3, i64 %329\l  %331 = load float, float addrspace(1)* %330, align 4, !tbaa !11\l  %332 = getelementptr inbounds float, float addrspace(1)* %25, i64 %324\l  store float %331, float addrspace(1)* %332, align 4, !tbaa !11\l  %333 = add nsw i32 %319, %105\l  %334 = sext i32 %333 to i64\l  %335 = getelementptr inbounds float, float addrspace(1)* %4, i64 %334\l  %336 = load float, float addrspace(1)* %335, align 4, !tbaa !11\l  %337 = load float, float addrspace(1)* %325, align 4, !tbaa !11\l  %338 = fsub contract float %336, %337\l  %339 = fmul contract float %338, %104\l  %340 = fsub contract float %331, %337\l  %341 = fdiv contract float %339, %340\l  %342 = fptosi float %341 to i32\l  %343 = getelementptr inbounds i32, i32 addrspace(1)* %98, i64 %324\l  store i32 %342, i32 addrspace(1)* %343, align 4, !tbaa !7\l  %344 = icmp sgt i32 %103, %342\l  br i1 %344, label %345, label %347\l|{<s0>T|<s1>F}}"];
	Node0x4640ba0:s0 -> Node0x464d950;
	Node0x4640ba0:s1 -> Node0x464d9a0;
	Node0x464d950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%345:\l345:                                              \l  %346 = icmp slt i32 %342, 0\l  br i1 %346, label %347, label %349\l|{<s0>T|<s1>F}}"];
	Node0x464d950:s0 -> Node0x464d9a0;
	Node0x464d950:s1 -> Node0x4640c60;
	Node0x464d9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%347:\l347:                                              \l  %348 = phi i32 [ %106, %318 ], [ 0, %345 ]\l  store i32 %348, i32 addrspace(1)* %343, align 4, !tbaa !7\l  br label %349\l}"];
	Node0x464d9a0 -> Node0x4640c60;
	Node0x4640c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%349:\l349:                                              \l  %350 = icmp eq i32 %326, %1\l  br i1 %350, label %107, label %318, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4640c60:s0 -> Node0x46408c0;
	Node0x4640c60:s1 -> Node0x4640ba0;
	Node0x4641e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%351:\l351:                                              \l  %352 = icmp sgt i32 %1, 1\l  br i1 %352, label %559, label %555\l|{<s0>T|<s1>F}}"];
	Node0x4641e70:s0 -> Node0x464e020;
	Node0x4641e70:s1 -> Node0x464e070;
	Node0x464c230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%353:\l353:                                              \l  %354 = phi i32 [ 0, %124 ], [ %370, %355 ]\l  br i1 %126, label %372, label %355\l|{<s0>T|<s1>F}}"];
	Node0x464c230:s0 -> Node0x464e2f0;
	Node0x464c230:s1 -> Node0x464e1b0;
	Node0x464e1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%355:\l355:                                              \l  %356 = phi i32 [ %125, %353 ], [ %552, %529 ]\l  %357 = add nsw i32 %356, %315\l  %358 = add nsw i32 %356, %316\l  %359 = sext i32 %358 to i64\l  %360 = getelementptr inbounds float, float addrspace(1)* %3, i64 %359\l  %361 = load float, float addrspace(1)* %360, align 4, !tbaa !11\l  %362 = fmul contract float %317, %361\l  %363 = sext i32 %357 to i64\l  %364 = getelementptr inbounds float, float addrspace(1)* %3, i64 %363\l  %365 = load float, float addrspace(1)* %364, align 4, !tbaa !11\l  %366 = fmul contract float %122, %365\l  %367 = fadd contract float %362, %366\l  %368 = zext i32 %354 to i64\l  %369 = getelementptr inbounds float, float addrspace(1)* %95, i64 %368\l  store float %367, float addrspace(1)* %369, align 4, !tbaa !11\l  %370 = add nuw nsw i32 %354, 1\l  %371 = icmp eq i32 %370, %90\l  br i1 %371, label %351, label %353, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x464e1b0:s0 -> Node0x4641e70;
	Node0x464e1b0:s1 -> Node0x464c230;
	Node0x464e2f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%372:\l372:                                              \l  %373 = phi i32 [ %553, %529 ], [ 1, %353 ]\l  %374 = phi i32 [ %552, %529 ], [ %125, %353 ]\l  %375 = sub nsw i32 %1, %373\l  %376 = add nsw i32 %375, -1\l  %377 = sitofp i32 %376 to double\l  %378 = fmul double %377, 0x3FE62E42FEFA39EF\l  %379 = fneg double %378\l  %380 = tail call double @llvm.fma.f64(double %377, double\l... 0x3FE62E42FEFA39EF, double %379)\l  %381 = tail call double @llvm.fma.f64(double %377, double\l... 0x3C7ABC9E3B39803F, double %380)\l  %382 = fadd double %378, %381\l  %383 = fsub double %382, %378\l  %384 = fsub double %381, %383\l  %385 = tail call double @llvm.fabs.f64(double %378) #13\l  %386 = fcmp oeq double %385, 0x7FF0000000000000\l  %387 = select i1 %386, double %378, double %382\l  %388 = tail call double @llvm.fabs.f64(double %387) #13\l  %389 = fcmp oeq double %388, 0x7FF0000000000000\l  %390 = select i1 %389, double 0.000000e+00, double %384\l  %391 = fmul double %387, 0x3FF71547652B82FE\l  %392 = tail call double @llvm.rint.f64(double %391)\l  %393 = fneg double %392\l  %394 = tail call double @llvm.fma.f64(double %393, double\l... 0x3FE62E42FEFA39EF, double %387)\l  %395 = tail call double @llvm.fma.f64(double %393, double\l... 0x3C7ABC9E3B39803F, double %394)\l  %396 = tail call double @llvm.fma.f64(double %395, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %397 = tail call double @llvm.fma.f64(double %395, double %396, double\l... 0x3EC71DEE623FDE64)\l  %398 = tail call double @llvm.fma.f64(double %395, double %397, double\l... 0x3EFA01997C89E6B0)\l  %399 = tail call double @llvm.fma.f64(double %395, double %398, double\l... 0x3F2A01A014761F6E)\l  %400 = tail call double @llvm.fma.f64(double %395, double %399, double\l... 0x3F56C16C1852B7B0)\l  %401 = tail call double @llvm.fma.f64(double %395, double %400, double\l... 0x3F81111111122322)\l  %402 = tail call double @llvm.fma.f64(double %395, double %401, double\l... 0x3FA55555555502A1)\l  %403 = tail call double @llvm.fma.f64(double %395, double %402, double\l... 0x3FC5555555555511)\l  %404 = tail call double @llvm.fma.f64(double %395, double %403, double\l... 0x3FE000000000000B)\l  %405 = tail call double @llvm.fma.f64(double %395, double %404, double\l... 1.000000e+00)\l  %406 = tail call double @llvm.fma.f64(double %395, double %405, double\l... 1.000000e+00)\l  %407 = fptosi double %392 to i32\l  %408 = tail call double @llvm.amdgcn.ldexp.f64(double %406, i32 %407)\l  %409 = fcmp ogt double %387, 1.024000e+03\l  %410 = select i1 %409, double 0x7FF0000000000000, double %408\l  %411 = fcmp olt double %387, -1.075000e+03\l  %412 = select i1 %411, double 0.000000e+00, double %410\l  %413 = tail call double @llvm.fma.f64(double %412, double %390, double %412)\l  %414 = tail call double @llvm.fabs.f64(double %412) #13\l  %415 = fcmp oeq double %414, 0x7FF0000000000000\l  %416 = select i1 %415, double %412, double %413\l  %417 = tail call double @llvm.fabs.f64(double %377)\l  %418 = tail call double @llvm.trunc.f64(double %417)\l  %419 = fcmp oeq double %417, %418\l  %420 = zext i1 %419 to i32\l  %421 = fmul double %418, 5.000000e-01\l  %422 = tail call double @llvm.amdgcn.fract.f64(double %421)\l  %423 = tail call i1 @llvm.amdgcn.class.f64(double %421, i32 516)\l  %424 = select i1 %423, double 0.000000e+00, double %422\l  %425 = fcmp oeq double %424, 0.000000e+00\l  %426 = and i1 %419, %425\l  %427 = zext i1 %426 to i32\l  %428 = add nuw nsw i32 %427, %420\l  %429 = icmp eq i32 %428, 1\l  %430 = tail call double @llvm.fabs.f64(double %416)\l  %431 = fcmp oeq double %417, 0x7FF0000000000000\l  %432 = bitcast double %377 to \<2 x i32\>\l  %433 = extractelement \<2 x i32\> %432, i64 1\l  %434 = icmp sgt i32 %433, -1\l  %435 = select i1 %434, double 0x7FF0000000000000, double 0.000000e+00\l  %436 = select i1 %431, double %435, double %430\l  %437 = icmp slt i32 %375, 1\l  %438 = icmp eq i32 %376, 0\l  %439 = fptosi double %436 to i32\l  %440 = select i1 %438, i32 1, i32 %439\l  %441 = sdiv i32 %354, %440\l  %442 = add nsw i32 %441, 1\l  %443 = and i32 %442, -2147483647\l  %444 = icmp eq i32 %443, 1\l  %445 = zext i32 %373 to i64\l  %446 = getelementptr inbounds i32, i32 addrspace(1)* %98, i64 %445\l  %447 = load i32, i32 addrspace(1)* %446, align 4, !tbaa !7\l  br i1 %444, label %448, label %488\l|{<s0>T|<s1>F}}"];
	Node0x464e2f0:s0 -> Node0x4652920;
	Node0x464e2f0:s1 -> Node0x4652970;
	Node0x4652920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%448:\l448:                                              \l  %449 = fmul double %244, %377\l  %450 = fneg double %449\l  %451 = tail call double @llvm.fma.f64(double %377, double %244, double %450)\l  %452 = tail call double @llvm.fma.f64(double %377, double %246, double %451)\l  %453 = fadd double %449, %452\l  %454 = fsub double %453, %449\l  %455 = fsub double %452, %454\l  %456 = tail call double @llvm.fabs.f64(double %449) #13\l  %457 = fcmp oeq double %456, 0x7FF0000000000000\l  %458 = select i1 %457, double %449, double %453\l  %459 = tail call double @llvm.fabs.f64(double %458) #13\l  %460 = fcmp oeq double %459, 0x7FF0000000000000\l  %461 = select i1 %460, double 0.000000e+00, double %455\l  %462 = fmul double %458, 0x3FF71547652B82FE\l  %463 = tail call double @llvm.rint.f64(double %462)\l  %464 = fneg double %463\l  %465 = tail call double @llvm.fma.f64(double %464, double\l... 0x3FE62E42FEFA39EF, double %458)\l  %466 = tail call double @llvm.fma.f64(double %464, double\l... 0x3C7ABC9E3B39803F, double %465)\l  %467 = tail call double @llvm.fma.f64(double %466, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %468 = tail call double @llvm.fma.f64(double %466, double %467, double\l... 0x3EC71DEE623FDE64)\l  %469 = tail call double @llvm.fma.f64(double %466, double %468, double\l... 0x3EFA01997C89E6B0)\l  %470 = tail call double @llvm.fma.f64(double %466, double %469, double\l... 0x3F2A01A014761F6E)\l  %471 = tail call double @llvm.fma.f64(double %466, double %470, double\l... 0x3F56C16C1852B7B0)\l  %472 = tail call double @llvm.fma.f64(double %466, double %471, double\l... 0x3F81111111122322)\l  %473 = tail call double @llvm.fma.f64(double %466, double %472, double\l... 0x3FA55555555502A1)\l  %474 = tail call double @llvm.fma.f64(double %466, double %473, double\l... 0x3FC5555555555511)\l  %475 = tail call double @llvm.fma.f64(double %466, double %474, double\l... 0x3FE000000000000B)\l  %476 = tail call double @llvm.fma.f64(double %466, double %475, double\l... 1.000000e+00)\l  %477 = tail call double @llvm.fma.f64(double %466, double %476, double\l... 1.000000e+00)\l  %478 = fptosi double %463 to i32\l  %479 = tail call double @llvm.amdgcn.ldexp.f64(double %477, i32 %478)\l  %480 = fcmp ogt double %458, 1.024000e+03\l  %481 = select i1 %480, double 0x7FF0000000000000, double %479\l  %482 = fcmp olt double %458, -1.075000e+03\l  %483 = select i1 %482, double 0.000000e+00, double %481\l  %484 = tail call double @llvm.fma.f64(double %483, double %461, double %483)\l  %485 = tail call double @llvm.fabs.f64(double %483) #13\l  %486 = fcmp oeq double %485, 0x7FF0000000000000\l  %487 = select i1 %486, double %483, double %484\l  br label %529\l}"];
	Node0x4652920 -> Node0x464e430;
	Node0x4652970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%488:\l488:                                              \l  %489 = add nsw i32 %447, 1\l  %490 = fmul double %244, %377\l  %491 = fneg double %490\l  %492 = tail call double @llvm.fma.f64(double %377, double %244, double %491)\l  %493 = tail call double @llvm.fma.f64(double %377, double %246, double %492)\l  %494 = fadd double %490, %493\l  %495 = fsub double %494, %490\l  %496 = fsub double %493, %495\l  %497 = tail call double @llvm.fabs.f64(double %490) #13\l  %498 = fcmp oeq double %497, 0x7FF0000000000000\l  %499 = select i1 %498, double %490, double %494\l  %500 = tail call double @llvm.fabs.f64(double %499) #13\l  %501 = fcmp oeq double %500, 0x7FF0000000000000\l  %502 = select i1 %501, double 0.000000e+00, double %496\l  %503 = fmul double %499, 0x3FF71547652B82FE\l  %504 = tail call double @llvm.rint.f64(double %503)\l  %505 = fneg double %504\l  %506 = tail call double @llvm.fma.f64(double %505, double\l... 0x3FE62E42FEFA39EF, double %499)\l  %507 = tail call double @llvm.fma.f64(double %505, double\l... 0x3C7ABC9E3B39803F, double %506)\l  %508 = tail call double @llvm.fma.f64(double %507, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %509 = tail call double @llvm.fma.f64(double %507, double %508, double\l... 0x3EC71DEE623FDE64)\l  %510 = tail call double @llvm.fma.f64(double %507, double %509, double\l... 0x3EFA01997C89E6B0)\l  %511 = tail call double @llvm.fma.f64(double %507, double %510, double\l... 0x3F2A01A014761F6E)\l  %512 = tail call double @llvm.fma.f64(double %507, double %511, double\l... 0x3F56C16C1852B7B0)\l  %513 = tail call double @llvm.fma.f64(double %507, double %512, double\l... 0x3F81111111122322)\l  %514 = tail call double @llvm.fma.f64(double %507, double %513, double\l... 0x3FA55555555502A1)\l  %515 = tail call double @llvm.fma.f64(double %507, double %514, double\l... 0x3FC5555555555511)\l  %516 = tail call double @llvm.fma.f64(double %507, double %515, double\l... 0x3FE000000000000B)\l  %517 = tail call double @llvm.fma.f64(double %507, double %516, double\l... 1.000000e+00)\l  %518 = tail call double @llvm.fma.f64(double %507, double %517, double\l... 1.000000e+00)\l  %519 = fptosi double %504 to i32\l  %520 = tail call double @llvm.amdgcn.ldexp.f64(double %518, i32 %519)\l  %521 = fcmp ogt double %499, 1.024000e+03\l  %522 = select i1 %521, double 0x7FF0000000000000, double %520\l  %523 = fcmp olt double %499, -1.075000e+03\l  %524 = select i1 %523, double 0.000000e+00, double %522\l  %525 = tail call double @llvm.fma.f64(double %524, double %502, double %524)\l  %526 = tail call double @llvm.fabs.f64(double %524) #13\l  %527 = fcmp oeq double %526, 0x7FF0000000000000\l  %528 = select i1 %527, double %524, double %525\l  br label %529\l}"];
	Node0x4652970 -> Node0x464e430;
	Node0x464e430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%529:\l529:                                              \l  %530 = phi double [ %528, %488 ], [ %487, %448 ]\l  %531 = phi i32 [ %489, %488 ], [ %447, %448 ]\l  %532 = and i1 %247, %429\l  %533 = select i1 %532, double -0.000000e+00, double 0.000000e+00\l  %534 = tail call double @llvm.copysign.f64(double %530, double %533)\l  %535 = icmp ne i32 %428, 0\l  %536 = select i1 %248, i1 true, i1 %535\l  %537 = select i1 %536, double %534, double 0x7FF8000000000000\l  %538 = xor i32 %433, %252\l  %539 = icmp sgt i32 %538, -1\l  %540 = select i1 %539, double 0x7FF0000000000000, double 0.000000e+00\l  %541 = select i1 %249, double %128, double %540\l  %542 = select i1 %431, double %541, double %537\l  %543 = xor i1 %254, %437\l  %544 = select i1 %543, double 0.000000e+00, double 0x7FF0000000000000\l  %545 = select i1 %429, double %127, double 0.000000e+00\l  %546 = tail call double @llvm.copysign.f64(double %544, double %545)\l  %547 = select i1 %255, double %546, double %542\l  %548 = or i1 %256, %438\l  %549 = fptosi double %547 to i32\l  %550 = select i1 %548, i32 1, i32 %549\l  %551 = mul nsw i32 %531, %550\l  %552 = add nsw i32 %551, %374\l  %553 = add nuw nsw i32 %373, 1\l  %554 = icmp eq i32 %553, %1\l  br i1 %554, label %355, label %372, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x464e430:s0 -> Node0x464e1b0;
	Node0x464e430:s1 -> Node0x464e2f0;
	Node0x464e070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%555:\l555:                                              \l  tail call fastcc void @__ockl_dm_dealloc(i64 %97) #12\l  tail call fastcc void @__ockl_dm_dealloc(i64 %94) #12\l  tail call fastcc void @__ockl_dm_dealloc(i64 %24) #12\l  tail call fastcc void @__ockl_dm_dealloc(i64 %21) #12\l  %556 = load float, float addrspace(1)* %95, align 4, !tbaa !11\l  %557 = sext i32 %15 to i64\l  %558 = getelementptr inbounds float, float addrspace(1)* %5, i64 %557\l  store float %556, float addrspace(1)* %558, align 4, !tbaa !11\l  br label %802\l}"];
	Node0x464e070 -> Node0x463a590;
	Node0x464e020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%559:\l559:                                              \l  %560 = phi i32 [ %707, %706 ], [ 1, %351 ]\l  %561 = mul nsw i32 %560, %2\l  %562 = zext i32 %560 to i64\l  %563 = getelementptr inbounds i32, i32 addrspace(1)* %98, i64 %562\l  %564 = load i32, i32 addrspace(1)* %563, align 4, !tbaa !7\l  %565 = add nsw i32 %564, %561\l  %566 = sext i32 %565 to i64\l  %567 = getelementptr inbounds float, float addrspace(1)* %3, i64 %566\l  %568 = load float, float addrspace(1)* %567, align 4, !tbaa !11\l  %569 = add nsw i32 %565, 1\l  %570 = sext i32 %569 to i64\l  %571 = getelementptr inbounds float, float addrspace(1)* %3, i64 %570\l  %572 = load float, float addrspace(1)* %571, align 4, !tbaa !11\l  %573 = getelementptr inbounds float, float addrspace(1)* %4, i64 %562\l  %574 = load float, float addrspace(1)* %573, align 4, !tbaa !11\l  %575 = fsub contract float %574, %568\l  %576 = fsub contract float %572, %568\l  %577 = fdiv contract float %575, %576\l  %578 = sitofp i32 %560 to double\l  %579 = fmul double %578, 0x3FE62E42FEFA39EF\l  %580 = fneg double %579\l  %581 = tail call double @llvm.fma.f64(double %578, double\l... 0x3FE62E42FEFA39EF, double %580)\l  %582 = tail call double @llvm.fma.f64(double %578, double\l... 0x3C7ABC9E3B39803F, double %581)\l  %583 = fadd double %579, %582\l  %584 = fsub double %583, %579\l  %585 = fsub double %582, %584\l  %586 = tail call double @llvm.fabs.f64(double %579) #13\l  %587 = fcmp oeq double %586, 0x7FF0000000000000\l  %588 = select i1 %587, double %579, double %583\l  %589 = tail call double @llvm.fabs.f64(double %588) #13\l  %590 = fcmp oeq double %589, 0x7FF0000000000000\l  %591 = select i1 %590, double 0.000000e+00, double %585\l  %592 = fmul double %588, 0x3FF71547652B82FE\l  %593 = tail call double @llvm.rint.f64(double %592)\l  %594 = fneg double %593\l  %595 = tail call double @llvm.fma.f64(double %594, double\l... 0x3FE62E42FEFA39EF, double %588)\l  %596 = tail call double @llvm.fma.f64(double %594, double\l... 0x3C7ABC9E3B39803F, double %595)\l  %597 = tail call double @llvm.fma.f64(double %596, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %598 = tail call double @llvm.fma.f64(double %596, double %597, double\l... 0x3EC71DEE623FDE64)\l  %599 = tail call double @llvm.fma.f64(double %596, double %598, double\l... 0x3EFA01997C89E6B0)\l  %600 = tail call double @llvm.fma.f64(double %596, double %599, double\l... 0x3F2A01A014761F6E)\l  %601 = tail call double @llvm.fma.f64(double %596, double %600, double\l... 0x3F56C16C1852B7B0)\l  %602 = tail call double @llvm.fma.f64(double %596, double %601, double\l... 0x3F81111111122322)\l  %603 = tail call double @llvm.fma.f64(double %596, double %602, double\l... 0x3FA55555555502A1)\l  %604 = tail call double @llvm.fma.f64(double %596, double %603, double\l... 0x3FC5555555555511)\l  %605 = tail call double @llvm.fma.f64(double %596, double %604, double\l... 0x3FE000000000000B)\l  %606 = tail call double @llvm.fma.f64(double %596, double %605, double\l... 1.000000e+00)\l  %607 = tail call double @llvm.fma.f64(double %596, double %606, double\l... 1.000000e+00)\l  %608 = fptosi double %593 to i32\l  %609 = tail call double @llvm.amdgcn.ldexp.f64(double %607, i32 %608)\l  %610 = fcmp ogt double %588, 1.024000e+03\l  %611 = select i1 %610, double 0x7FF0000000000000, double %609\l  %612 = fcmp olt double %588, -1.075000e+03\l  %613 = select i1 %612, double 0.000000e+00, double %611\l  %614 = tail call double @llvm.fma.f64(double %613, double %591, double %613)\l  %615 = tail call double @llvm.fabs.f64(double %613) #13\l  %616 = fcmp oeq double %615, 0x7FF0000000000000\l  %617 = select i1 %616, double %613, double %614\l  %618 = tail call double @llvm.fabs.f64(double %578)\l  %619 = tail call double @llvm.fabs.f64(double %617)\l  %620 = fcmp oeq double %618, 0x7FF0000000000000\l  %621 = bitcast double %578 to \<2 x i32\>\l  %622 = extractelement \<2 x i32\> %621, i64 1\l  %623 = icmp sgt i32 %622, -1\l  %624 = select i1 %623, double 0x7FF0000000000000, double 0.000000e+00\l  %625 = select i1 %620, double %624, double %619\l  %626 = fptosi double %625 to i32\l  %627 = icmp sgt i32 %626, 0\l  br i1 %627, label %628, label %706\l|{<s0>T|<s1>F}}"];
	Node0x464e020:s0 -> Node0x465cdb0;
	Node0x464e020:s1 -> Node0x4659a10;
	Node0x465cdb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%628:\l628:                                              \l  %629 = sub nsw i32 %1, %560\l  %630 = add nsw i32 %629, -2\l  %631 = sitofp i32 %630 to double\l  %632 = fmul double %631, 0x3FE62E42FEFA39EF\l  %633 = fneg double %632\l  %634 = tail call double @llvm.fma.f64(double %631, double\l... 0x3FE62E42FEFA39EF, double %633)\l  %635 = tail call double @llvm.fma.f64(double %631, double\l... 0x3C7ABC9E3B39803F, double %634)\l  %636 = fadd double %632, %635\l  %637 = fsub double %636, %632\l  %638 = fsub double %635, %637\l  %639 = tail call double @llvm.fabs.f64(double %632) #13\l  %640 = fcmp oeq double %639, 0x7FF0000000000000\l  %641 = select i1 %640, double %632, double %636\l  %642 = tail call double @llvm.fabs.f64(double %641) #13\l  %643 = fcmp oeq double %642, 0x7FF0000000000000\l  %644 = select i1 %643, double 0.000000e+00, double %638\l  %645 = fmul double %641, 0x3FF71547652B82FE\l  %646 = tail call double @llvm.rint.f64(double %645)\l  %647 = fneg double %646\l  %648 = tail call double @llvm.fma.f64(double %647, double\l... 0x3FE62E42FEFA39EF, double %641)\l  %649 = tail call double @llvm.fma.f64(double %647, double\l... 0x3C7ABC9E3B39803F, double %648)\l  %650 = tail call double @llvm.fma.f64(double %649, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %651 = tail call double @llvm.fma.f64(double %649, double %650, double\l... 0x3EC71DEE623FDE64)\l  %652 = tail call double @llvm.fma.f64(double %649, double %651, double\l... 0x3EFA01997C89E6B0)\l  %653 = tail call double @llvm.fma.f64(double %649, double %652, double\l... 0x3F2A01A014761F6E)\l  %654 = tail call double @llvm.fma.f64(double %649, double %653, double\l... 0x3F56C16C1852B7B0)\l  %655 = tail call double @llvm.fma.f64(double %649, double %654, double\l... 0x3F81111111122322)\l  %656 = tail call double @llvm.fma.f64(double %649, double %655, double\l... 0x3FA55555555502A1)\l  %657 = tail call double @llvm.fma.f64(double %649, double %656, double\l... 0x3FC5555555555511)\l  %658 = tail call double @llvm.fma.f64(double %649, double %657, double\l... 0x3FE000000000000B)\l  %659 = tail call double @llvm.fma.f64(double %649, double %658, double\l... 1.000000e+00)\l  %660 = tail call double @llvm.fma.f64(double %649, double %659, double\l... 1.000000e+00)\l  %661 = fptosi double %646 to i32\l  %662 = tail call double @llvm.amdgcn.ldexp.f64(double %660, i32 %661)\l  %663 = fcmp ogt double %641, 1.024000e+03\l  %664 = select i1 %663, double 0x7FF0000000000000, double %662\l  %665 = fcmp olt double %641, -1.075000e+03\l  %666 = select i1 %665, double 0.000000e+00, double %664\l  %667 = tail call double @llvm.fma.f64(double %666, double %644, double %666)\l  %668 = tail call double @llvm.fabs.f64(double %666) #13\l  %669 = fcmp oeq double %668, 0x7FF0000000000000\l  %670 = select i1 %669, double %666, double %667\l  %671 = tail call double @llvm.fabs.f64(double %631)\l  %672 = tail call double @llvm.fabs.f64(double %670)\l  %673 = fcmp oeq double %671, 0x7FF0000000000000\l  %674 = bitcast double %631 to \<2 x i32\>\l  %675 = extractelement \<2 x i32\> %674, i64 1\l  %676 = icmp sgt i32 %675, -1\l  %677 = select i1 %676, double 0x7FF0000000000000, double 0.000000e+00\l  %678 = select i1 %673, double %677, double %672\l  %679 = icmp eq i32 %630, 0\l  %680 = fptosi double %678 to i32\l  %681 = select i1 %679, i32 1, i32 %680\l  %682 = fsub contract float 1.000000e+00, %577\l  %683 = and i32 %626, 7\l  %684 = icmp ult i32 %626, 8\l  br i1 %684, label %687, label %685\l|{<s0>T|<s1>F}}"];
	Node0x465cdb0:s0 -> Node0x465fb90;
	Node0x465cdb0:s1 -> Node0x465fbe0;
	Node0x465fbe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%685:\l685:                                              \l  %686 = and i32 %626, -8\l  br label %709\l}"];
	Node0x465fbe0 -> Node0x465fde0;
	Node0x465fb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%687:\l687:                                              \l  %688 = phi i32 [ 0, %628 ], [ %799, %709 ]\l  %689 = icmp eq i32 %683, 0\l  br i1 %689, label %706, label %690\l|{<s0>T|<s1>F}}"];
	Node0x465fb90:s0 -> Node0x4659a10;
	Node0x465fb90:s1 -> Node0x4660010;
	Node0x4660010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%690:\l690:                                              \l  %691 = phi i32 [ %703, %690 ], [ %688, %687 ]\l  %692 = phi i32 [ %704, %690 ], [ 0, %687 ]\l  %693 = zext i32 %691 to i64\l  %694 = getelementptr inbounds float, float addrspace(1)* %95, i64 %693\l  %695 = load float, float addrspace(1)* %694, align 4, !tbaa !11\l  %696 = fmul contract float %682, %695\l  %697 = add nsw i32 %691, %681\l  %698 = sext i32 %697 to i64\l  %699 = getelementptr inbounds float, float addrspace(1)* %95, i64 %698\l  %700 = load float, float addrspace(1)* %699, align 4, !tbaa !11\l  %701 = fmul contract float %577, %700\l  %702 = fadd contract float %696, %701\l  store float %702, float addrspace(1)* %694, align 4, !tbaa !11\l  %703 = add nuw nsw i32 %691, 1\l  %704 = add i32 %692, 1\l  %705 = icmp eq i32 %704, %683\l  br i1 %705, label %706, label %690, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4660010:s0 -> Node0x4659a10;
	Node0x4660010:s1 -> Node0x4660010;
	Node0x4659a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%706:\l706:                                              \l  %707 = add nuw nsw i32 %560, 1\l  %708 = icmp eq i32 %707, %1\l  br i1 %708, label %555, label %559, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4659a10:s0 -> Node0x464e070;
	Node0x4659a10:s1 -> Node0x464e020;
	Node0x465fde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%709:\l709:                                              \l  %710 = phi i32 [ 0, %685 ], [ %799, %709 ]\l  %711 = phi i32 [ 0, %685 ], [ %800, %709 ]\l  %712 = zext i32 %710 to i64\l  %713 = getelementptr inbounds float, float addrspace(1)* %95, i64 %712\l  %714 = load float, float addrspace(1)* %713, align 4, !tbaa !11\l  %715 = fmul contract float %682, %714\l  %716 = add nsw i32 %710, %681\l  %717 = sext i32 %716 to i64\l  %718 = getelementptr inbounds float, float addrspace(1)* %95, i64 %717\l  %719 = load float, float addrspace(1)* %718, align 4, !tbaa !11\l  %720 = fmul contract float %577, %719\l  %721 = fadd contract float %715, %720\l  store float %721, float addrspace(1)* %713, align 4, !tbaa !11\l  %722 = or i32 %710, 1\l  %723 = zext i32 %722 to i64\l  %724 = getelementptr inbounds float, float addrspace(1)* %95, i64 %723\l  %725 = load float, float addrspace(1)* %724, align 4, !tbaa !11\l  %726 = fmul contract float %682, %725\l  %727 = add nsw i32 %722, %681\l  %728 = sext i32 %727 to i64\l  %729 = getelementptr inbounds float, float addrspace(1)* %95, i64 %728\l  %730 = load float, float addrspace(1)* %729, align 4, !tbaa !11\l  %731 = fmul contract float %577, %730\l  %732 = fadd contract float %726, %731\l  store float %732, float addrspace(1)* %724, align 4, !tbaa !11\l  %733 = or i32 %710, 2\l  %734 = zext i32 %733 to i64\l  %735 = getelementptr inbounds float, float addrspace(1)* %95, i64 %734\l  %736 = load float, float addrspace(1)* %735, align 4, !tbaa !11\l  %737 = fmul contract float %682, %736\l  %738 = add nsw i32 %733, %681\l  %739 = sext i32 %738 to i64\l  %740 = getelementptr inbounds float, float addrspace(1)* %95, i64 %739\l  %741 = load float, float addrspace(1)* %740, align 4, !tbaa !11\l  %742 = fmul contract float %577, %741\l  %743 = fadd contract float %737, %742\l  store float %743, float addrspace(1)* %735, align 4, !tbaa !11\l  %744 = or i32 %710, 3\l  %745 = zext i32 %744 to i64\l  %746 = getelementptr inbounds float, float addrspace(1)* %95, i64 %745\l  %747 = load float, float addrspace(1)* %746, align 4, !tbaa !11\l  %748 = fmul contract float %682, %747\l  %749 = add nsw i32 %744, %681\l  %750 = sext i32 %749 to i64\l  %751 = getelementptr inbounds float, float addrspace(1)* %95, i64 %750\l  %752 = load float, float addrspace(1)* %751, align 4, !tbaa !11\l  %753 = fmul contract float %577, %752\l  %754 = fadd contract float %748, %753\l  store float %754, float addrspace(1)* %746, align 4, !tbaa !11\l  %755 = or i32 %710, 4\l  %756 = zext i32 %755 to i64\l  %757 = getelementptr inbounds float, float addrspace(1)* %95, i64 %756\l  %758 = load float, float addrspace(1)* %757, align 4, !tbaa !11\l  %759 = fmul contract float %682, %758\l  %760 = add nsw i32 %755, %681\l  %761 = sext i32 %760 to i64\l  %762 = getelementptr inbounds float, float addrspace(1)* %95, i64 %761\l  %763 = load float, float addrspace(1)* %762, align 4, !tbaa !11\l  %764 = fmul contract float %577, %763\l  %765 = fadd contract float %759, %764\l  store float %765, float addrspace(1)* %757, align 4, !tbaa !11\l  %766 = or i32 %710, 5\l  %767 = zext i32 %766 to i64\l  %768 = getelementptr inbounds float, float addrspace(1)* %95, i64 %767\l  %769 = load float, float addrspace(1)* %768, align 4, !tbaa !11\l  %770 = fmul contract float %682, %769\l  %771 = add nsw i32 %766, %681\l  %772 = sext i32 %771 to i64\l  %773 = getelementptr inbounds float, float addrspace(1)* %95, i64 %772\l  %774 = load float, float addrspace(1)* %773, align 4, !tbaa !11\l  %775 = fmul contract float %577, %774\l  %776 = fadd contract float %770, %775\l  store float %776, float addrspace(1)* %768, align 4, !tbaa !11\l  %777 = or i32 %710, 6\l  %778 = zext i32 %777 to i64\l  %779 = getelementptr inbounds float, float addrspace(1)* %95, i64 %778\l  %780 = load float, float addrspace(1)* %779, align 4, !tbaa !11\l  %781 = fmul contract float %682, %780\l  %782 = add nsw i32 %777, %681\l  %783 = sext i32 %782 to i64\l  %784 = getelementptr inbounds float, float addrspace(1)* %95, i64 %783\l  %785 = load float, float addrspace(1)* %784, align 4, !tbaa !11\l  %786 = fmul contract float %577, %785\l  %787 = fadd contract float %781, %786\l  store float %787, float addrspace(1)* %779, align 4, !tbaa !11\l  %788 = or i32 %710, 7\l  %789 = zext i32 %788 to i64\l  %790 = getelementptr inbounds float, float addrspace(1)* %95, i64 %789\l  %791 = load float, float addrspace(1)* %790, align 4, !tbaa !11\l  %792 = fmul contract float %682, %791\l  %793 = add nsw i32 %788, %681\l  %794 = sext i32 %793 to i64\l  %795 = getelementptr inbounds float, float addrspace(1)* %95, i64 %794\l  %796 = load float, float addrspace(1)* %795, align 4, !tbaa !11\l  %797 = fmul contract float %577, %796\l  %798 = fadd contract float %792, %797\l  store float %798, float addrspace(1)* %790, align 4, !tbaa !11\l  %799 = add nuw nsw i32 %710, 8\l  %800 = add i32 %711, 8\l  %801 = icmp eq i32 %800, %686\l  br i1 %801, label %687, label %709, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x465fde0:s0 -> Node0x465fb90;
	Node0x465fde0:s1 -> Node0x465fde0;
	Node0x463a590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%802:\l802:                                              \l  ret void\l}"];
}
