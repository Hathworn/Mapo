digraph "CFG for '_Z18buildGlobalQuadRegiiiiiiiPfS_S_S_' function" {
	label="CFG for '_Z18buildGlobalQuadRegiiiiiiiPfS_S_S_' function";

	Node0x4e2dbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %12, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %20 = add i32 %18, %19\l  %21 = icmp slt i32 %20, %0\l  br i1 %21, label %22, label %674\l|{<s0>T|<s1>F}}"];
	Node0x4e2dbc0:s0 -> Node0x4e2f5e0;
	Node0x4e2dbc0:s1 -> Node0x4e2f670;
	Node0x4e2f5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%22:\l22:                                               \l  %23 = sext i32 %1 to i64\l  %24 = shl nsw i64 %23, 2\l  %25 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %24) #12\l  %26 = ptrtoint i8 addrspace(1)* %25 to i64\l  %27 = bitcast i8 addrspace(1)* %25 to i32 addrspace(1)*\l  %28 = icmp sgt i32 %1, 0\l  br i1 %28, label %29, label %160\l|{<s0>T|<s1>F}}"];
	Node0x4e2f5e0:s0 -> Node0x4e2fbd0;
	Node0x4e2f5e0:s1 -> Node0x4e2fc60;
	Node0x4e2fbd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%29:\l29:                                               \l  %30 = sitofp i32 %2 to double\l  %31 = tail call double @llvm.fabs.f64(double %30)\l  %32 = tail call double @llvm.amdgcn.frexp.mant.f64(double %31)\l  %33 = fcmp olt double %32, 0x3FE5555555555555\l  %34 = zext i1 %33 to i32\l  %35 = tail call double @llvm.amdgcn.ldexp.f64(double %32, i32 %34)\l  %36 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %31)\l  %37 = sub nsw i32 %36, %34\l  %38 = fadd double %35, -1.000000e+00\l  %39 = fadd double %35, 1.000000e+00\l  %40 = fadd double %39, -1.000000e+00\l  %41 = fsub double %35, %40\l  %42 = tail call double @llvm.amdgcn.rcp.f64(double %39)\l  %43 = fneg double %39\l  %44 = tail call double @llvm.fma.f64(double %43, double %42, double\l... 1.000000e+00)\l  %45 = tail call double @llvm.fma.f64(double %44, double %42, double %42)\l  %46 = tail call double @llvm.fma.f64(double %43, double %45, double\l... 1.000000e+00)\l  %47 = tail call double @llvm.fma.f64(double %46, double %45, double %45)\l  %48 = fmul double %38, %47\l  %49 = fmul double %39, %48\l  %50 = fneg double %49\l  %51 = tail call double @llvm.fma.f64(double %48, double %39, double %50)\l  %52 = tail call double @llvm.fma.f64(double %48, double %41, double %51)\l  %53 = fadd double %49, %52\l  %54 = fsub double %53, %49\l  %55 = fsub double %52, %54\l  %56 = fsub double %38, %53\l  %57 = fsub double %38, %56\l  %58 = fsub double %57, %53\l  %59 = fsub double %58, %55\l  %60 = fadd double %56, %59\l  %61 = fmul double %47, %60\l  %62 = fadd double %48, %61\l  %63 = fsub double %62, %48\l  %64 = fsub double %61, %63\l  %65 = fmul double %62, %62\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %62, double %62, double %66)\l  %68 = fmul double %64, 2.000000e+00\l  %69 = tail call double @llvm.fma.f64(double %62, double %68, double %67)\l  %70 = fadd double %65, %69\l  %71 = fsub double %70, %65\l  %72 = fsub double %69, %71\l  %73 = tail call double @llvm.fma.f64(double %70, double 0x3FBDEE674222DE17,\l... double 0x3FBA6564968915A9)\l  %74 = tail call double @llvm.fma.f64(double %70, double %73, double\l... 0x3FBE25E43ABE935A)\l  %75 = tail call double @llvm.fma.f64(double %70, double %74, double\l... 0x3FC110EF47E6C9C2)\l  %76 = tail call double @llvm.fma.f64(double %70, double %75, double\l... 0x3FC3B13BCFA74449)\l  %77 = tail call double @llvm.fma.f64(double %70, double %76, double\l... 0x3FC745D171BF3C30)\l  %78 = tail call double @llvm.fma.f64(double %70, double %77, double\l... 0x3FCC71C71C7792CE)\l  %79 = tail call double @llvm.fma.f64(double %70, double %78, double\l... 0x3FD24924924920DA)\l  %80 = tail call double @llvm.fma.f64(double %70, double %79, double\l... 0x3FD999999999999C)\l  %81 = sitofp i32 %37 to double\l  %82 = fmul double %81, 0x3FE62E42FEFA39EF\l  %83 = fneg double %82\l  %84 = tail call double @llvm.fma.f64(double %81, double 0x3FE62E42FEFA39EF,\l... double %83)\l  %85 = tail call double @llvm.fma.f64(double %81, double 0x3C7ABC9E3B39803F,\l... double %84)\l  %86 = fadd double %82, %85\l  %87 = fsub double %86, %82\l  %88 = fsub double %85, %87\l  %89 = tail call double @llvm.amdgcn.ldexp.f64(double %62, i32 1)\l  %90 = tail call double @llvm.amdgcn.ldexp.f64(double %64, i32 1)\l  %91 = fmul double %62, %70\l  %92 = fneg double %91\l  %93 = tail call double @llvm.fma.f64(double %70, double %62, double %92)\l  %94 = tail call double @llvm.fma.f64(double %70, double %64, double %93)\l  %95 = tail call double @llvm.fma.f64(double %72, double %62, double %94)\l  %96 = fadd double %91, %95\l  %97 = fsub double %96, %91\l  %98 = fsub double %95, %97\l  %99 = fmul double %70, %80\l  %100 = fneg double %99\l  %101 = tail call double @llvm.fma.f64(double %70, double %80, double %100)\l  %102 = tail call double @llvm.fma.f64(double %72, double %80, double %101)\l  %103 = fadd double %99, %102\l  %104 = fsub double %103, %99\l  %105 = fsub double %102, %104\l  %106 = fadd double %103, 0x3FE5555555555555\l  %107 = fadd double %106, 0xBFE5555555555555\l  %108 = fsub double %103, %107\l  %109 = fadd double %105, 0x3C8543B0D5DF274D\l  %110 = fadd double %109, %108\l  %111 = fadd double %106, %110\l  %112 = fsub double %111, %106\l  %113 = fsub double %110, %112\l  %114 = fmul double %96, %111\l  %115 = fneg double %114\l  %116 = tail call double @llvm.fma.f64(double %96, double %111, double %115)\l  %117 = tail call double @llvm.fma.f64(double %96, double %113, double %116)\l  %118 = tail call double @llvm.fma.f64(double %98, double %111, double %117)\l  %119 = fadd double %114, %118\l  %120 = fsub double %119, %114\l  %121 = fsub double %118, %120\l  %122 = fadd double %89, %119\l  %123 = fsub double %122, %89\l  %124 = fsub double %119, %123\l  %125 = fadd double %90, %121\l  %126 = fadd double %125, %124\l  %127 = fadd double %122, %126\l  %128 = fsub double %127, %122\l  %129 = fsub double %126, %128\l  %130 = fadd double %86, %127\l  %131 = fsub double %130, %86\l  %132 = fsub double %130, %131\l  %133 = fsub double %86, %132\l  %134 = fsub double %127, %131\l  %135 = fadd double %134, %133\l  %136 = fadd double %88, %129\l  %137 = fsub double %136, %88\l  %138 = fsub double %136, %137\l  %139 = fsub double %88, %138\l  %140 = fsub double %129, %137\l  %141 = fadd double %140, %139\l  %142 = fadd double %136, %135\l  %143 = fadd double %130, %142\l  %144 = fsub double %143, %130\l  %145 = fsub double %142, %144\l  %146 = fadd double %141, %145\l  %147 = fadd double %143, %146\l  %148 = fsub double %147, %143\l  %149 = fsub double %146, %148\l  %150 = icmp slt i32 %2, 0\l  %151 = icmp sgt i32 %2, -1\l  %152 = fcmp oeq double %31, 1.000000e+00\l  %153 = fadd double %31, -1.000000e+00\l  %154 = bitcast double %153 to \<2 x i32\>\l  %155 = extractelement \<2 x i32\> %154, i64 1\l  %156 = fcmp oeq double %31, 0x7FF0000000000000\l  %157 = icmp eq i32 %2, 0\l  %158 = or i1 %157, %156\l  %159 = icmp eq i32 %2, 1\l  br label %171\l}"];
	Node0x4e2fbd0 -> Node0x4e37c60;
	Node0x4e2fc60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%160:\l160:                                              \l  %161 = tail call fastcc i8 addrspace(1)* @__ockl_dm_alloc(i64 %24) #12\l  %162 = ptrtoint i8 addrspace(1)* %161 to i64\l  %163 = bitcast i8 addrspace(1)* %161 to float addrspace(1)*\l  br i1 %28, label %164, label %282\l|{<s0>T|<s1>F}}"];
	Node0x4e2fc60:s0 -> Node0x4e37f30;
	Node0x4e2fc60:s1 -> Node0x4e37f80;
	Node0x4e37f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%164:\l164:                                              \l  %165 = mul nsw i32 %6, %1\l  %166 = sitofp i32 %2 to float\l  %167 = and i32 %1, 1\l  %168 = icmp eq i32 %1, 1\l  br i1 %168, label %263, label %169\l|{<s0>T|<s1>F}}"];
	Node0x4e37f30:s0 -> Node0x4e382e0;
	Node0x4e37f30:s1 -> Node0x4e38330;
	Node0x4e38330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%169:\l169:                                              \l  %170 = and i32 %1, -2\l  br label %289\l}"];
	Node0x4e38330 -> Node0x4e38500;
	Node0x4e37c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%171:\l171:                                              \l  %172 = phi i32 [ %20, %29 ], [ %260, %171 ]\l  %173 = phi i32 [ 0, %29 ], [ %261, %171 ]\l  %174 = sitofp i32 %172 to double\l  %175 = sub nsw i32 %1, %173\l  %176 = add nsw i32 %175, -1\l  %177 = sitofp i32 %176 to double\l  %178 = fmul double %147, %177\l  %179 = fneg double %178\l  %180 = tail call double @llvm.fma.f64(double %177, double %147, double %179)\l  %181 = tail call double @llvm.fma.f64(double %177, double %149, double %180)\l  %182 = fadd double %178, %181\l  %183 = fsub double %182, %178\l  %184 = fsub double %181, %183\l  %185 = tail call double @llvm.fabs.f64(double %178) #13\l  %186 = fcmp oeq double %185, 0x7FF0000000000000\l  %187 = select i1 %186, double %178, double %182\l  %188 = tail call double @llvm.fabs.f64(double %187) #13\l  %189 = fcmp oeq double %188, 0x7FF0000000000000\l  %190 = select i1 %189, double 0.000000e+00, double %184\l  %191 = fmul double %187, 0x3FF71547652B82FE\l  %192 = tail call double @llvm.rint.f64(double %191)\l  %193 = fneg double %192\l  %194 = tail call double @llvm.fma.f64(double %193, double\l... 0x3FE62E42FEFA39EF, double %187)\l  %195 = tail call double @llvm.fma.f64(double %193, double\l... 0x3C7ABC9E3B39803F, double %194)\l  %196 = tail call double @llvm.fma.f64(double %195, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %197 = tail call double @llvm.fma.f64(double %195, double %196, double\l... 0x3EC71DEE623FDE64)\l  %198 = tail call double @llvm.fma.f64(double %195, double %197, double\l... 0x3EFA01997C89E6B0)\l  %199 = tail call double @llvm.fma.f64(double %195, double %198, double\l... 0x3F2A01A014761F6E)\l  %200 = tail call double @llvm.fma.f64(double %195, double %199, double\l... 0x3F56C16C1852B7B0)\l  %201 = tail call double @llvm.fma.f64(double %195, double %200, double\l... 0x3F81111111122322)\l  %202 = tail call double @llvm.fma.f64(double %195, double %201, double\l... 0x3FA55555555502A1)\l  %203 = tail call double @llvm.fma.f64(double %195, double %202, double\l... 0x3FC5555555555511)\l  %204 = tail call double @llvm.fma.f64(double %195, double %203, double\l... 0x3FE000000000000B)\l  %205 = tail call double @llvm.fma.f64(double %195, double %204, double\l... 1.000000e+00)\l  %206 = tail call double @llvm.fma.f64(double %195, double %205, double\l... 1.000000e+00)\l  %207 = fptosi double %192 to i32\l  %208 = tail call double @llvm.amdgcn.ldexp.f64(double %206, i32 %207)\l  %209 = fcmp ogt double %187, 1.024000e+03\l  %210 = select i1 %209, double 0x7FF0000000000000, double %208\l  %211 = fcmp olt double %187, -1.075000e+03\l  %212 = select i1 %211, double 0.000000e+00, double %210\l  %213 = tail call double @llvm.fma.f64(double %212, double %190, double %212)\l  %214 = tail call double @llvm.fabs.f64(double %212) #13\l  %215 = fcmp oeq double %214, 0x7FF0000000000000\l  %216 = select i1 %215, double %212, double %213\l  %217 = tail call double @llvm.fabs.f64(double %177)\l  %218 = tail call double @llvm.trunc.f64(double %217)\l  %219 = fcmp oeq double %217, %218\l  %220 = zext i1 %219 to i32\l  %221 = fmul double %218, 5.000000e-01\l  %222 = tail call double @llvm.amdgcn.fract.f64(double %221)\l  %223 = tail call i1 @llvm.amdgcn.class.f64(double %221, i32 516)\l  %224 = select i1 %223, double 0.000000e+00, double %222\l  %225 = fcmp oeq double %224, 0.000000e+00\l  %226 = and i1 %219, %225\l  %227 = zext i1 %226 to i32\l  %228 = add nuw nsw i32 %227, %220\l  %229 = icmp eq i32 %228, 1\l  %230 = and i1 %150, %229\l  %231 = select i1 %230, double -0.000000e+00, double 0.000000e+00\l  %232 = tail call double @llvm.copysign.f64(double %216, double %231)\l  %233 = icmp ne i32 %228, 0\l  %234 = select i1 %151, i1 true, i1 %233\l  %235 = select i1 %234, double %232, double 0x7FF8000000000000\l  %236 = fcmp oeq double %217, 0x7FF0000000000000\l  %237 = bitcast double %177 to \<2 x i32\>\l  %238 = extractelement \<2 x i32\> %237, i64 1\l  %239 = xor i32 %238, %155\l  %240 = icmp sgt i32 %239, -1\l  %241 = select i1 %240, double 0x7FF0000000000000, double 0.000000e+00\l  %242 = select i1 %152, double %31, double %241\l  %243 = select i1 %236, double %242, double %235\l  %244 = icmp slt i32 %175, 1\l  %245 = xor i1 %157, %244\l  %246 = select i1 %245, double 0.000000e+00, double 0x7FF0000000000000\l  %247 = select i1 %229, double %30, double 0.000000e+00\l  %248 = tail call double @llvm.copysign.f64(double %246, double %247)\l  %249 = select i1 %158, double %248, double %243\l  %250 = icmp eq i32 %176, 0\l  %251 = or i1 %159, %250\l  %252 = select i1 %251, double 1.000000e+00, double %249\l  %253 = fdiv contract double %174, %252\l  %254 = fptosi double %253 to i32\l  %255 = zext i32 %173 to i64\l  %256 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %255\l  store i32 %254, i32 addrspace(1)* %256, align 4, !tbaa !7\l  %257 = sitofp i32 %254 to double\l  %258 = fmul contract double %252, %257\l  %259 = fsub contract double %174, %258\l  %260 = fptosi double %259 to i32\l  %261 = add nuw nsw i32 %173, 1\l  %262 = icmp eq i32 %261, %1\l  br i1 %262, label %160, label %171, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4e37c60:s0 -> Node0x4e2fc60;
	Node0x4e37c60:s1 -> Node0x4e37c60;
	Node0x4e382e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%263:\l263:                                              \l  %264 = phi i32 [ 0, %164 ], [ %323, %289 ]\l  %265 = icmp eq i32 %167, 0\l  br i1 %265, label %282, label %266\l|{<s0>T|<s1>F}}"];
	Node0x4e382e0:s0 -> Node0x4e37f80;
	Node0x4e382e0:s1 -> Node0x4e36830;
	Node0x4e36830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%266:\l266:                                              \l  %267 = zext i32 %264 to i64\l  %268 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %267\l  %269 = load i32, i32 addrspace(1)* %268, align 4, !tbaa !7\l  %270 = sitofp i32 %269 to float\l  %271 = add nsw i32 %264, %165\l  %272 = sext i32 %271 to i64\l  %273 = getelementptr inbounds float, float addrspace(1)* %9, i64 %272\l  %274 = load float, float addrspace(1)* %273, align 4, !tbaa !13\l  %275 = getelementptr inbounds float, float addrspace(1)* %8, i64 %272\l  %276 = load float, float addrspace(1)* %275, align 4, !tbaa !13\l  %277 = fsub contract float %274, %276\l  %278 = fmul contract float %277, %270\l  %279 = fdiv contract float %278, %166\l  %280 = fadd contract float %276, %279\l  %281 = getelementptr inbounds float, float addrspace(1)* %163, i64 %267\l  store float %280, float addrspace(1)* %281, align 4, !tbaa !13\l  br label %282\l}"];
	Node0x4e36830 -> Node0x4e37f80;
	Node0x4e37f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%282:\l282:                                              \l  %283 = load float, float addrspace(1)* %7, align 4, !tbaa !13\l  br i1 %28, label %284, label %346\l|{<s0>T|<s1>F}}"];
	Node0x4e37f80:s0 -> Node0x4e3f8e0;
	Node0x4e37f80:s1 -> Node0x4e3f930;
	Node0x4e3f8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%284:\l284:                                              \l  %285 = and i32 %1, 7\l  %286 = icmp ult i32 %1, 8\l  br i1 %286, label %326, label %287\l|{<s0>T|<s1>F}}"];
	Node0x4e3f8e0:s0 -> Node0x4e3fb90;
	Node0x4e3f8e0:s1 -> Node0x4e3fbe0;
	Node0x4e3fbe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%287:\l287:                                              \l  %288 = and i32 %1, -8\l  br label %348\l}"];
	Node0x4e3fbe0 -> Node0x4e3fdb0;
	Node0x4e38500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%289:\l289:                                              \l  %290 = phi i32 [ 0, %169 ], [ %323, %289 ]\l  %291 = phi i32 [ 0, %169 ], [ %324, %289 ]\l  %292 = zext i32 %290 to i64\l  %293 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %292\l  %294 = load i32, i32 addrspace(1)* %293, align 4, !tbaa !7\l  %295 = sitofp i32 %294 to float\l  %296 = add nsw i32 %290, %165\l  %297 = sext i32 %296 to i64\l  %298 = getelementptr inbounds float, float addrspace(1)* %9, i64 %297\l  %299 = load float, float addrspace(1)* %298, align 4, !tbaa !13\l  %300 = getelementptr inbounds float, float addrspace(1)* %8, i64 %297\l  %301 = load float, float addrspace(1)* %300, align 4, !tbaa !13\l  %302 = fsub contract float %299, %301\l  %303 = fmul contract float %302, %295\l  %304 = fdiv contract float %303, %166\l  %305 = fadd contract float %301, %304\l  %306 = getelementptr inbounds float, float addrspace(1)* %163, i64 %292\l  store float %305, float addrspace(1)* %306, align 4, !tbaa !13\l  %307 = or i32 %290, 1\l  %308 = zext i32 %307 to i64\l  %309 = getelementptr inbounds i32, i32 addrspace(1)* %27, i64 %308\l  %310 = load i32, i32 addrspace(1)* %309, align 4, !tbaa !7\l  %311 = sitofp i32 %310 to float\l  %312 = add nsw i32 %307, %165\l  %313 = sext i32 %312 to i64\l  %314 = getelementptr inbounds float, float addrspace(1)* %9, i64 %313\l  %315 = load float, float addrspace(1)* %314, align 4, !tbaa !13\l  %316 = getelementptr inbounds float, float addrspace(1)* %8, i64 %313\l  %317 = load float, float addrspace(1)* %316, align 4, !tbaa !13\l  %318 = fsub contract float %315, %317\l  %319 = fmul contract float %318, %311\l  %320 = fdiv contract float %319, %166\l  %321 = fadd contract float %317, %320\l  %322 = getelementptr inbounds float, float addrspace(1)* %163, i64 %308\l  store float %321, float addrspace(1)* %322, align 4, !tbaa !13\l  %323 = add nuw nsw i32 %290, 2\l  %324 = add i32 %291, 2\l  %325 = icmp eq i32 %324, %170\l  br i1 %325, label %263, label %289, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4e38500:s0 -> Node0x4e382e0;
	Node0x4e38500:s1 -> Node0x4e38500;
	Node0x4e3fb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%326:\l326:                                              \l  %327 = phi float [ undef, %284 ], [ %423, %348 ]\l  %328 = phi i32 [ 0, %284 ], [ %418, %348 ]\l  %329 = phi float [ %283, %284 ], [ %423, %348 ]\l  %330 = icmp eq i32 %285, 0\l  br i1 %330, label %346, label %331\l|{<s0>T|<s1>F}}"];
	Node0x4e3fb90:s0 -> Node0x4e3f930;
	Node0x4e3fb90:s1 -> Node0x4e41ba0;
	Node0x4e41ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%331:\l331:                                              \l  %332 = phi i32 [ %338, %331 ], [ %328, %326 ]\l  %333 = phi float [ %343, %331 ], [ %329, %326 ]\l  %334 = phi i32 [ %344, %331 ], [ 0, %326 ]\l  %335 = zext i32 %332 to i64\l  %336 = getelementptr inbounds float, float addrspace(1)* %163, i64 %335\l  %337 = load float, float addrspace(1)* %336, align 4, !tbaa !13\l  %338 = add nuw nsw i32 %332, 1\l  %339 = zext i32 %338 to i64\l  %340 = getelementptr inbounds float, float addrspace(1)* %7, i64 %339\l  %341 = load float, float addrspace(1)* %340, align 4, !tbaa !13\l  %342 = fmul contract float %337, %341\l  %343 = fadd contract float %333, %342\l  %344 = add i32 %334, 1\l  %345 = icmp eq i32 %344, %285\l  br i1 %345, label %346, label %331, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4e41ba0:s0 -> Node0x4e3f930;
	Node0x4e41ba0:s1 -> Node0x4e41ba0;
	Node0x4e3f930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%346:\l346:                                              \l  %347 = phi float [ %283, %282 ], [ %327, %326 ], [ %343, %331 ]\l  br i1 %28, label %426, label %433\l|{<s0>T|<s1>F}}"];
	Node0x4e3f930:s0 -> Node0x4e427d0;
	Node0x4e3f930:s1 -> Node0x4e42820;
	Node0x4e3fdb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%348:\l348:                                              \l  %349 = phi i32 [ 0, %287 ], [ %418, %348 ]\l  %350 = phi float [ %283, %287 ], [ %423, %348 ]\l  %351 = phi i32 [ 0, %287 ], [ %424, %348 ]\l  %352 = zext i32 %349 to i64\l  %353 = getelementptr inbounds float, float addrspace(1)* %163, i64 %352\l  %354 = load float, float addrspace(1)* %353, align 4, !tbaa !13\l  %355 = or i32 %349, 1\l  %356 = zext i32 %355 to i64\l  %357 = getelementptr inbounds float, float addrspace(1)* %7, i64 %356\l  %358 = load float, float addrspace(1)* %357, align 4, !tbaa !13\l  %359 = fmul contract float %354, %358\l  %360 = fadd contract float %350, %359\l  %361 = zext i32 %355 to i64\l  %362 = getelementptr inbounds float, float addrspace(1)* %163, i64 %361\l  %363 = load float, float addrspace(1)* %362, align 4, !tbaa !13\l  %364 = or i32 %349, 2\l  %365 = zext i32 %364 to i64\l  %366 = getelementptr inbounds float, float addrspace(1)* %7, i64 %365\l  %367 = load float, float addrspace(1)* %366, align 4, !tbaa !13\l  %368 = fmul contract float %363, %367\l  %369 = fadd contract float %360, %368\l  %370 = zext i32 %364 to i64\l  %371 = getelementptr inbounds float, float addrspace(1)* %163, i64 %370\l  %372 = load float, float addrspace(1)* %371, align 4, !tbaa !13\l  %373 = or i32 %349, 3\l  %374 = zext i32 %373 to i64\l  %375 = getelementptr inbounds float, float addrspace(1)* %7, i64 %374\l  %376 = load float, float addrspace(1)* %375, align 4, !tbaa !13\l  %377 = fmul contract float %372, %376\l  %378 = fadd contract float %369, %377\l  %379 = zext i32 %373 to i64\l  %380 = getelementptr inbounds float, float addrspace(1)* %163, i64 %379\l  %381 = load float, float addrspace(1)* %380, align 4, !tbaa !13\l  %382 = or i32 %349, 4\l  %383 = zext i32 %382 to i64\l  %384 = getelementptr inbounds float, float addrspace(1)* %7, i64 %383\l  %385 = load float, float addrspace(1)* %384, align 4, !tbaa !13\l  %386 = fmul contract float %381, %385\l  %387 = fadd contract float %378, %386\l  %388 = zext i32 %382 to i64\l  %389 = getelementptr inbounds float, float addrspace(1)* %163, i64 %388\l  %390 = load float, float addrspace(1)* %389, align 4, !tbaa !13\l  %391 = or i32 %349, 5\l  %392 = zext i32 %391 to i64\l  %393 = getelementptr inbounds float, float addrspace(1)* %7, i64 %392\l  %394 = load float, float addrspace(1)* %393, align 4, !tbaa !13\l  %395 = fmul contract float %390, %394\l  %396 = fadd contract float %387, %395\l  %397 = zext i32 %391 to i64\l  %398 = getelementptr inbounds float, float addrspace(1)* %163, i64 %397\l  %399 = load float, float addrspace(1)* %398, align 4, !tbaa !13\l  %400 = or i32 %349, 6\l  %401 = zext i32 %400 to i64\l  %402 = getelementptr inbounds float, float addrspace(1)* %7, i64 %401\l  %403 = load float, float addrspace(1)* %402, align 4, !tbaa !13\l  %404 = fmul contract float %399, %403\l  %405 = fadd contract float %396, %404\l  %406 = zext i32 %400 to i64\l  %407 = getelementptr inbounds float, float addrspace(1)* %163, i64 %406\l  %408 = load float, float addrspace(1)* %407, align 4, !tbaa !13\l  %409 = or i32 %349, 7\l  %410 = zext i32 %409 to i64\l  %411 = getelementptr inbounds float, float addrspace(1)* %7, i64 %410\l  %412 = load float, float addrspace(1)* %411, align 4, !tbaa !13\l  %413 = fmul contract float %408, %412\l  %414 = fadd contract float %405, %413\l  %415 = zext i32 %409 to i64\l  %416 = getelementptr inbounds float, float addrspace(1)* %163, i64 %415\l  %417 = load float, float addrspace(1)* %416, align 4, !tbaa !13\l  %418 = add nuw nsw i32 %349, 8\l  %419 = zext i32 %418 to i64\l  %420 = getelementptr inbounds float, float addrspace(1)* %7, i64 %419\l  %421 = load float, float addrspace(1)* %420, align 4, !tbaa !13\l  %422 = fmul contract float %417, %421\l  %423 = fadd contract float %414, %422\l  %424 = add i32 %351, 8\l  %425 = icmp eq i32 %424, %288\l  br i1 %425, label %326, label %348, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x4e3fdb0:s0 -> Node0x4e3fb90;
	Node0x4e3fdb0:s1 -> Node0x4e3fdb0;
	Node0x4e427d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%426:\l426:                                              \l  %427 = phi i32 [ %655, %654 ], [ 0, %346 ]\l  %428 = phi i32 [ %665, %654 ], [ 0, %346 ]\l  %429 = phi float [ %671, %654 ], [ %347, %346 ]\l  %430 = zext i32 %427 to i64\l  %431 = getelementptr inbounds float, float addrspace(1)* %163, i64 %430\l  %432 = load float, float addrspace(1)* %431, align 4, !tbaa !13\l  br label %657\l}"];
	Node0x4e427d0 -> Node0x4e457e0;
	Node0x4e42820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%433:\l433:                                              \l  %434 = phi float [ %347, %346 ], [ %671, %654 ]\l  %435 = fcmp contract oge float %434, 0.000000e+00\l  %436 = select contract i1 %435, float 0.000000e+00, float %434\l  %437 = mul nsw i32 %5, %4\l  %438 = mul nsw i32 %2, %1\l  %439 = sitofp i32 %2 to double\l  %440 = sitofp i32 %1 to double\l  %441 = tail call double @llvm.fabs.f64(double %439)\l  %442 = tail call double @llvm.amdgcn.frexp.mant.f64(double %441)\l  %443 = fcmp olt double %442, 0x3FE5555555555555\l  %444 = zext i1 %443 to i32\l  %445 = tail call double @llvm.amdgcn.ldexp.f64(double %442, i32 %444)\l  %446 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %441)\l  %447 = sub nsw i32 %446, %444\l  %448 = fadd double %445, -1.000000e+00\l  %449 = fadd double %445, 1.000000e+00\l  %450 = fadd double %449, -1.000000e+00\l  %451 = fsub double %445, %450\l  %452 = tail call double @llvm.amdgcn.rcp.f64(double %449)\l  %453 = fneg double %449\l  %454 = tail call double @llvm.fma.f64(double %453, double %452, double\l... 1.000000e+00)\l  %455 = tail call double @llvm.fma.f64(double %454, double %452, double %452)\l  %456 = tail call double @llvm.fma.f64(double %453, double %455, double\l... 1.000000e+00)\l  %457 = tail call double @llvm.fma.f64(double %456, double %455, double %455)\l  %458 = fmul double %448, %457\l  %459 = fmul double %449, %458\l  %460 = fneg double %459\l  %461 = tail call double @llvm.fma.f64(double %458, double %449, double %460)\l  %462 = tail call double @llvm.fma.f64(double %458, double %451, double %461)\l  %463 = fadd double %459, %462\l  %464 = fsub double %463, %459\l  %465 = fsub double %462, %464\l  %466 = fsub double %448, %463\l  %467 = fsub double %448, %466\l  %468 = fsub double %467, %463\l  %469 = fsub double %468, %465\l  %470 = fadd double %466, %469\l  %471 = fmul double %457, %470\l  %472 = fadd double %458, %471\l  %473 = fsub double %472, %458\l  %474 = fsub double %471, %473\l  %475 = fmul double %472, %472\l  %476 = fneg double %475\l  %477 = tail call double @llvm.fma.f64(double %472, double %472, double %476)\l  %478 = fmul double %474, 2.000000e+00\l  %479 = tail call double @llvm.fma.f64(double %472, double %478, double %477)\l  %480 = fadd double %475, %479\l  %481 = fsub double %480, %475\l  %482 = fsub double %479, %481\l  %483 = tail call double @llvm.fma.f64(double %480, double\l... 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)\l  %484 = tail call double @llvm.fma.f64(double %480, double %483, double\l... 0x3FBE25E43ABE935A)\l  %485 = tail call double @llvm.fma.f64(double %480, double %484, double\l... 0x3FC110EF47E6C9C2)\l  %486 = tail call double @llvm.fma.f64(double %480, double %485, double\l... 0x3FC3B13BCFA74449)\l  %487 = tail call double @llvm.fma.f64(double %480, double %486, double\l... 0x3FC745D171BF3C30)\l  %488 = tail call double @llvm.fma.f64(double %480, double %487, double\l... 0x3FCC71C71C7792CE)\l  %489 = tail call double @llvm.fma.f64(double %480, double %488, double\l... 0x3FD24924924920DA)\l  %490 = tail call double @llvm.fma.f64(double %480, double %489, double\l... 0x3FD999999999999C)\l  %491 = sitofp i32 %447 to double\l  %492 = fmul double %491, 0x3FE62E42FEFA39EF\l  %493 = fneg double %492\l  %494 = tail call double @llvm.fma.f64(double %491, double\l... 0x3FE62E42FEFA39EF, double %493)\l  %495 = tail call double @llvm.fma.f64(double %491, double\l... 0x3C7ABC9E3B39803F, double %494)\l  %496 = fadd double %492, %495\l  %497 = fsub double %496, %492\l  %498 = fsub double %495, %497\l  %499 = tail call double @llvm.amdgcn.ldexp.f64(double %472, i32 1)\l  %500 = tail call double @llvm.amdgcn.ldexp.f64(double %474, i32 1)\l  %501 = fmul double %472, %480\l  %502 = fneg double %501\l  %503 = tail call double @llvm.fma.f64(double %480, double %472, double %502)\l  %504 = tail call double @llvm.fma.f64(double %480, double %474, double %503)\l  %505 = tail call double @llvm.fma.f64(double %482, double %472, double %504)\l  %506 = fadd double %501, %505\l  %507 = fsub double %506, %501\l  %508 = fsub double %505, %507\l  %509 = fmul double %480, %490\l  %510 = fneg double %509\l  %511 = tail call double @llvm.fma.f64(double %480, double %490, double %510)\l  %512 = tail call double @llvm.fma.f64(double %482, double %490, double %511)\l  %513 = fadd double %509, %512\l  %514 = fsub double %513, %509\l  %515 = fsub double %512, %514\l  %516 = fadd double %513, 0x3FE5555555555555\l  %517 = fadd double %516, 0xBFE5555555555555\l  %518 = fsub double %513, %517\l  %519 = fadd double %515, 0x3C8543B0D5DF274D\l  %520 = fadd double %519, %518\l  %521 = fadd double %516, %520\l  %522 = fsub double %521, %516\l  %523 = fsub double %520, %522\l  %524 = fmul double %506, %521\l  %525 = fneg double %524\l  %526 = tail call double @llvm.fma.f64(double %506, double %521, double %525)\l  %527 = tail call double @llvm.fma.f64(double %506, double %523, double %526)\l  %528 = tail call double @llvm.fma.f64(double %508, double %521, double %527)\l  %529 = fadd double %524, %528\l  %530 = fsub double %529, %524\l  %531 = fsub double %528, %530\l  %532 = fadd double %499, %529\l  %533 = fsub double %532, %499\l  %534 = fsub double %529, %533\l  %535 = fadd double %500, %531\l  %536 = fadd double %535, %534\l  %537 = fadd double %532, %536\l  %538 = fsub double %537, %532\l  %539 = fsub double %536, %538\l  %540 = fadd double %496, %537\l  %541 = fsub double %540, %496\l  %542 = fsub double %540, %541\l  %543 = fsub double %496, %542\l  %544 = fsub double %537, %541\l  %545 = fadd double %544, %543\l  %546 = fadd double %498, %539\l  %547 = fsub double %546, %498\l  %548 = fsub double %546, %547\l  %549 = fsub double %498, %548\l  %550 = fsub double %539, %547\l  %551 = fadd double %550, %549\l  %552 = fadd double %546, %545\l  %553 = fadd double %540, %552\l  %554 = fsub double %553, %540\l  %555 = fsub double %552, %554\l  %556 = fadd double %551, %555\l  %557 = fadd double %553, %556\l  %558 = fsub double %557, %553\l  %559 = fsub double %556, %558\l  %560 = fmul double %557, %440\l  %561 = fneg double %560\l  %562 = tail call double @llvm.fma.f64(double %440, double %557, double %561)\l  %563 = tail call double @llvm.fma.f64(double %440, double %559, double %562)\l  %564 = fadd double %560, %563\l  %565 = fsub double %564, %560\l  %566 = fsub double %563, %565\l  %567 = tail call double @llvm.fabs.f64(double %560) #13\l  %568 = fcmp oeq double %567, 0x7FF0000000000000\l  %569 = select i1 %568, double %560, double %564\l  %570 = tail call double @llvm.fabs.f64(double %569) #13\l  %571 = fcmp oeq double %570, 0x7FF0000000000000\l  %572 = select i1 %571, double 0.000000e+00, double %566\l  %573 = fmul double %569, 0x3FF71547652B82FE\l  %574 = tail call double @llvm.rint.f64(double %573)\l  %575 = fneg double %574\l  %576 = tail call double @llvm.fma.f64(double %575, double\l... 0x3FE62E42FEFA39EF, double %569)\l  %577 = tail call double @llvm.fma.f64(double %575, double\l... 0x3C7ABC9E3B39803F, double %576)\l  %578 = tail call double @llvm.fma.f64(double %577, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %579 = tail call double @llvm.fma.f64(double %577, double %578, double\l... 0x3EC71DEE623FDE64)\l  %580 = tail call double @llvm.fma.f64(double %577, double %579, double\l... 0x3EFA01997C89E6B0)\l  %581 = tail call double @llvm.fma.f64(double %577, double %580, double\l... 0x3F2A01A014761F6E)\l  %582 = tail call double @llvm.fma.f64(double %577, double %581, double\l... 0x3F56C16C1852B7B0)\l  %583 = tail call double @llvm.fma.f64(double %577, double %582, double\l... 0x3F81111111122322)\l  %584 = tail call double @llvm.fma.f64(double %577, double %583, double\l... 0x3FA55555555502A1)\l  %585 = tail call double @llvm.fma.f64(double %577, double %584, double\l... 0x3FC5555555555511)\l  %586 = tail call double @llvm.fma.f64(double %577, double %585, double\l... 0x3FE000000000000B)\l  %587 = tail call double @llvm.fma.f64(double %577, double %586, double\l... 1.000000e+00)\l  %588 = tail call double @llvm.fma.f64(double %577, double %587, double\l... 1.000000e+00)\l  %589 = fptosi double %574 to i32\l  %590 = tail call double @llvm.amdgcn.ldexp.f64(double %588, i32 %589)\l  %591 = fcmp ogt double %569, 1.024000e+03\l  %592 = select i1 %591, double 0x7FF0000000000000, double %590\l  %593 = fcmp olt double %569, -1.075000e+03\l  %594 = select i1 %593, double 0.000000e+00, double %592\l  %595 = tail call double @llvm.fma.f64(double %594, double %572, double %594)\l  %596 = tail call double @llvm.fabs.f64(double %594) #13\l  %597 = fcmp oeq double %596, 0x7FF0000000000000\l  %598 = select i1 %597, double %594, double %595\l  %599 = tail call double @llvm.fabs.f64(double %440)\l  %600 = tail call double @llvm.trunc.f64(double %599)\l  %601 = fcmp oeq double %599, %600\l  %602 = zext i1 %601 to i32\l  %603 = fmul double %600, 5.000000e-01\l  %604 = tail call double @llvm.amdgcn.fract.f64(double %603)\l  %605 = tail call i1 @llvm.amdgcn.class.f64(double %603, i32 516)\l  %606 = select i1 %605, double 0.000000e+00, double %604\l  %607 = fcmp oeq double %606, 0.000000e+00\l  %608 = and i1 %601, %607\l  %609 = zext i1 %608 to i32\l  %610 = add nuw nsw i32 %609, %602\l  %611 = icmp eq i32 %610, 1\l  %612 = icmp slt i32 %2, 0\l  %613 = and i1 %612, %611\l  %614 = select i1 %613, double -0.000000e+00, double 0.000000e+00\l  %615 = tail call double @llvm.copysign.f64(double %598, double %614)\l  %616 = icmp sgt i32 %2, -1\l  %617 = icmp ne i32 %610, 0\l  %618 = select i1 %616, i1 true, i1 %617\l  %619 = select i1 %618, double %615, double 0x7FF8000000000000\l  %620 = fcmp oeq double %599, 0x7FF0000000000000\l  %621 = fcmp oeq double %441, 1.000000e+00\l  %622 = fadd double %441, -1.000000e+00\l  %623 = bitcast double %440 to \<2 x i32\>\l  %624 = extractelement \<2 x i32\> %623, i64 1\l  %625 = bitcast double %622 to \<2 x i32\>\l  %626 = extractelement \<2 x i32\> %625, i64 1\l  %627 = xor i32 %626, %624\l  %628 = icmp sgt i32 %627, -1\l  %629 = select i1 %628, double 0x7FF0000000000000, double 0.000000e+00\l  %630 = select i1 %621, double %441, double %629\l  %631 = select i1 %620, double %630, double %619\l  %632 = fcmp oeq double %441, 0x7FF0000000000000\l  %633 = icmp eq i32 %2, 0\l  %634 = or i1 %633, %632\l  %635 = icmp slt i32 %1, 0\l  %636 = xor i1 %635, %633\l  %637 = select i1 %636, double 0.000000e+00, double 0x7FF0000000000000\l  %638 = select i1 %611, double %439, double 0.000000e+00\l  %639 = tail call double @llvm.copysign.f64(double %637, double %638)\l  %640 = select i1 %634, double %639, double %631\l  %641 = icmp eq i32 %2, 1\l  %642 = icmp eq i32 %1, 0\l  %643 = or i1 %642, %641\l  %644 = fptosi double %640 to i32\l  %645 = shl nsw i32 %644, 1\l  %646 = select i1 %643, i32 2, i32 %645\l  %647 = add nsw i32 %646, %438\l  %648 = add i32 %437, %6\l  %649 = mul i32 %647, %648\l  %650 = add nsw i32 %649, %438\l  %651 = add nsw i32 %650, %20\l  %652 = sext i32 %651 to i64\l  %653 = getelementptr inbounds float, float addrspace(1)* %10, i64 %652\l  store float %436, float addrspace(1)* %653, align 4, !tbaa !13\l  tail call fastcc void @__ockl_dm_dealloc(i64 %162) #12\l  tail call fastcc void @__ockl_dm_dealloc(i64 %26) #12\l  br label %674\l}"];
	Node0x4e42820 -> Node0x4e2f670;
	Node0x4e45340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%654:\l654:                                              \l  %655 = add nuw nsw i32 %427, 1\l  %656 = icmp eq i32 %655, %1\l  br i1 %656, label %433, label %426, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x4e45340:s0 -> Node0x4e42820;
	Node0x4e45340:s1 -> Node0x4e427d0;
	Node0x4e457e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%657:\l657:                                              \l  %658 = phi i32 [ %427, %426 ], [ %672, %657 ]\l  %659 = phi i32 [ %428, %426 ], [ %665, %657 ]\l  %660 = phi float [ %429, %426 ], [ %671, %657 ]\l  %661 = zext i32 %658 to i64\l  %662 = getelementptr inbounds float, float addrspace(1)* %163, i64 %661\l  %663 = load float, float addrspace(1)* %662, align 4, !tbaa !13\l  %664 = fmul contract float %432, %663\l  %665 = add nsw i32 %659, 1\l  %666 = add nsw i32 %665, %1\l  %667 = sext i32 %666 to i64\l  %668 = getelementptr inbounds float, float addrspace(1)* %7, i64 %667\l  %669 = load float, float addrspace(1)* %668, align 4, !tbaa !13\l  %670 = fmul contract float %664, %669\l  %671 = fadd contract float %660, %670\l  %672 = add nuw nsw i32 %658, 1\l  %673 = icmp slt i32 %672, %1\l  br i1 %673, label %657, label %654, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4e457e0:s0 -> Node0x4e457e0;
	Node0x4e457e0:s1 -> Node0x4e45340;
	Node0x4e2f670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%674:\l674:                                              \l  ret void\l}"];
}
