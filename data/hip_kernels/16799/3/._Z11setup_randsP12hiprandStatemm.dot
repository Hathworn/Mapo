digraph "CFG for '_Z11setup_randsP12hiprandStatemm' function" {
	label="CFG for '_Z11setup_randsP12hiprandStatemm' function";

	Node0x56c7a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = add i32 %21, %15\l  %23 = udiv i32 %14, %11\l  %24 = mul i32 %23, %11\l  %25 = icmp ugt i32 %14, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %22\l  %29 = add i32 %28, %6\l  %30 = mul i32 %29, %11\l  %31 = add i32 %30, %5\l  %32 = zext i32 %31 to i64\l  %33 = icmp ult i64 %32, %2\l  br i1 %33, label %34, label %239\l|{<s0>T|<s1>F}}"];
	Node0x56c7a40:s0 -> Node0x56cd8a0;
	Node0x56c7a40:s1 -> Node0x56cf040;
	Node0x56cd8a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%34:\l34:                                               \l  %35 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %32\l  %36 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %36) #4\l  %37 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %38 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %39 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %40 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %41 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %42 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 0\l  %43 = trunc i64 %1 to i32\l  %44 = xor i32 %43, 746559103\l  %45 = lshr i64 %1, 32\l  %46 = trunc i64 %45 to i32\l  %47 = xor i32 %46, -1607034933\l  %48 = mul i32 %44, 1228688033\l  %49 = mul i32 %47, 2073658381\l  %50 = add i32 %48, 123456789\l  store i32 %50, i32 addrspace(5)* %37, align 8, !tbaa !16\l  %51 = xor i32 %48, 362436069\l  store i32 %51, i32 addrspace(5)* %38, align 4, !tbaa !16\l  %52 = add i32 %49, 521288629\l  store i32 %52, i32 addrspace(5)* %39, align 8, !tbaa !16\l  %53 = xor i32 %49, 88675123\l  store i32 %53, i32 addrspace(5)* %40, align 4, !tbaa !16\l  %54 = add i32 %48, 5783321\l  store i32 %54, i32 addrspace(5)* %41, align 8, !tbaa !16\l  %55 = add i32 %48, 6615241\l  %56 = add i32 %55, %49\l  store i32 %56, i32 addrspace(5)* %42, align 8, !tbaa !20\l  %57 = icmp eq i32 %31, 0\l  br i1 %57, label %235, label %58\l|{<s0>T|<s1>F}}"];
	Node0x56cd8a0:s0 -> Node0x56d1090;
	Node0x56cd8a0:s1 -> Node0x56d1120;
	Node0x56d1120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%58:\l58:                                               \l  %59 = phi i64 [ %68, %66 ], [ %32, %34 ]\l  %60 = phi i32 [ %67, %66 ], [ 0, %34 ]\l  %61 = trunc i64 %59 to i32\l  %62 = and i32 %61, 3\l  %63 = icmp eq i32 %62, 0\l  br i1 %63, label %66, label %64\l|{<s0>T|<s1>F}}"];
	Node0x56d1120:s0 -> Node0x56d1260;
	Node0x56d1120:s1 -> Node0x56d1650;
	Node0x56d1650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%64:\l64:                                               \l  %65 = zext i32 %60 to i64\l  br label %70\l}"];
	Node0x56d1650 -> Node0x56cee60;
	Node0x56d1260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%66:\l66:                                               \l  %67 = add nuw nsw i32 %60, 1\l  %68 = lshr i64 %59, 2\l  %69 = icmp ult i64 %59, 4\l  br i1 %69, label %235, label %58, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x56d1260:s0 -> Node0x56d1090;
	Node0x56d1260:s1 -> Node0x56d1120;
	Node0x56cee60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%70:\l70:                                               \l  %71 = phi i32 [ 0, %64 ], [ %233, %232 ]\l  br label %72\l}"];
	Node0x56cee60 -> Node0x56d1ee0;
	Node0x56d1ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%72:\l72:                                               \l  %73 = phi i32 [ 0, %70 ], [ %205, %72 ]\l  %74 = phi i32 [ 0, %70 ], [ %211, %72 ]\l  %75 = phi i32 [ 0, %70 ], [ %217, %72 ]\l  %76 = phi i32 [ 0, %70 ], [ %223, %72 ]\l  %77 = phi i32 [ 0, %70 ], [ %229, %72 ]\l  %78 = phi i32 [ 0, %70 ], [ %230, %72 ]\l  %79 = lshr i32 %78, 5\l  %80 = and i32 %78, 28\l  %81 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %79\l  %82 = load i32, i32 addrspace(5)* %81, align 4, !tbaa !16\l  %83 = shl nuw i32 1, %80\l  %84 = and i32 %83, %82\l  %85 = icmp eq i32 %84, 0\l  %86 = mul nuw nsw i32 %78, 5\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %87\l  %89 = load i32, i32 addrspace(4)* %88, align 16, !tbaa !16\l  %90 = select i1 %85, i32 0, i32 %89\l  %91 = xor i32 %90, %73\l  %92 = or i32 %86, 1\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %93\l  %95 = load i32, i32 addrspace(4)* %94, align 4, !tbaa !16\l  %96 = select i1 %85, i32 0, i32 %95\l  %97 = xor i32 %96, %74\l  %98 = or i32 %86, 2\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %99\l  %101 = load i32, i32 addrspace(4)* %100, align 8, !tbaa !16\l  %102 = select i1 %85, i32 0, i32 %101\l  %103 = xor i32 %102, %75\l  %104 = or i32 %86, 3\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %105\l  %107 = load i32, i32 addrspace(4)* %106, align 4, !tbaa !16\l  %108 = select i1 %85, i32 0, i32 %107\l  %109 = xor i32 %108, %76\l  %110 = add nuw nsw i32 %86, 4\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %111\l  %113 = load i32, i32 addrspace(4)* %112, align 16, !tbaa !16\l  %114 = select i1 %85, i32 0, i32 %113\l  %115 = xor i32 %114, %77\l  %116 = or i32 %78, 1\l  %117 = lshr i32 %78, 5\l  %118 = and i32 %116, 29\l  %119 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %117\l  %120 = load i32, i32 addrspace(5)* %119, align 4, !tbaa !16\l  %121 = shl nuw i32 1, %118\l  %122 = and i32 %121, %120\l  %123 = icmp eq i32 %122, 0\l  %124 = mul nuw nsw i32 %116, 5\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %125\l  %127 = load i32, i32 addrspace(4)* %126, align 4, !tbaa !16\l  %128 = select i1 %123, i32 0, i32 %127\l  %129 = xor i32 %128, %91\l  %130 = add nuw nsw i32 %124, 1\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %131\l  %133 = load i32, i32 addrspace(4)* %132, align 8, !tbaa !16\l  %134 = select i1 %123, i32 0, i32 %133\l  %135 = xor i32 %134, %97\l  %136 = or i32 %124, 2\l  %137 = zext i32 %136 to i64\l  %138 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %137\l  %139 = load i32, i32 addrspace(4)* %138, align 4, !tbaa !16\l  %140 = select i1 %123, i32 0, i32 %139\l  %141 = xor i32 %140, %103\l  %142 = add nuw nsw i32 %124, 3\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %143\l  %145 = load i32, i32 addrspace(4)* %144, align 16, !tbaa !16\l  %146 = select i1 %123, i32 0, i32 %145\l  %147 = xor i32 %146, %109\l  %148 = add nuw nsw i32 %124, 4\l  %149 = zext i32 %148 to i64\l  %150 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %149\l  %151 = load i32, i32 addrspace(4)* %150, align 4, !tbaa !16\l  %152 = select i1 %123, i32 0, i32 %151\l  %153 = xor i32 %152, %115\l  %154 = or i32 %78, 2\l  %155 = lshr i32 %78, 5\l  %156 = and i32 %154, 30\l  %157 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %155\l  %158 = load i32, i32 addrspace(5)* %157, align 4, !tbaa !16\l  %159 = shl nuw i32 1, %156\l  %160 = and i32 %159, %158\l  %161 = icmp eq i32 %160, 0\l  %162 = mul nuw nsw i32 %154, 5\l  %163 = zext i32 %162 to i64\l  %164 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %163\l  %165 = load i32, i32 addrspace(4)* %164, align 8, !tbaa !16\l  %166 = select i1 %161, i32 0, i32 %165\l  %167 = xor i32 %166, %129\l  %168 = or i32 %162, 1\l  %169 = zext i32 %168 to i64\l  %170 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %169\l  %171 = load i32, i32 addrspace(4)* %170, align 4, !tbaa !16\l  %172 = select i1 %161, i32 0, i32 %171\l  %173 = xor i32 %172, %135\l  %174 = add nuw nsw i32 %162, 2\l  %175 = zext i32 %174 to i64\l  %176 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %175\l  %177 = load i32, i32 addrspace(4)* %176, align 16, !tbaa !16\l  %178 = select i1 %161, i32 0, i32 %177\l  %179 = xor i32 %178, %141\l  %180 = add nuw nsw i32 %162, 3\l  %181 = zext i32 %180 to i64\l  %182 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %181\l  %183 = load i32, i32 addrspace(4)* %182, align 4, !tbaa !16\l  %184 = select i1 %161, i32 0, i32 %183\l  %185 = xor i32 %184, %147\l  %186 = add nuw nsw i32 %162, 4\l  %187 = zext i32 %186 to i64\l  %188 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %187\l  %189 = load i32, i32 addrspace(4)* %188, align 8, !tbaa !16\l  %190 = select i1 %161, i32 0, i32 %189\l  %191 = xor i32 %190, %153\l  %192 = or i32 %78, 3\l  %193 = lshr i32 %78, 5\l  %194 = and i32 %192, 31\l  %195 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %193\l  %196 = load i32, i32 addrspace(5)* %195, align 4, !tbaa !16\l  %197 = shl nuw i32 1, %194\l  %198 = and i32 %197, %196\l  %199 = icmp eq i32 %198, 0\l  %200 = mul nuw nsw i32 %192, 5\l  %201 = zext i32 %200 to i64\l  %202 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %201\l  %203 = load i32, i32 addrspace(4)* %202, align 4, !tbaa !16\l  %204 = select i1 %199, i32 0, i32 %203\l  %205 = xor i32 %204, %167\l  %206 = add nuw nsw i32 %200, 1\l  %207 = zext i32 %206 to i64\l  %208 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %207\l  %209 = load i32, i32 addrspace(4)* %208, align 16, !tbaa !16\l  %210 = select i1 %199, i32 0, i32 %209\l  %211 = xor i32 %210, %173\l  %212 = add nuw nsw i32 %200, 2\l  %213 = zext i32 %212 to i64\l  %214 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %213\l  %215 = load i32, i32 addrspace(4)* %214, align 4, !tbaa !16\l  %216 = select i1 %199, i32 0, i32 %215\l  %217 = xor i32 %216, %179\l  %218 = add nuw nsw i32 %200, 3\l  %219 = zext i32 %218 to i64\l  %220 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %219\l  %221 = load i32, i32 addrspace(4)* %220, align 8, !tbaa !16\l  %222 = select i1 %199, i32 0, i32 %221\l  %223 = xor i32 %222, %185\l  %224 = add nuw nsw i32 %200, 4\l  %225 = zext i32 %224 to i64\l  %226 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %65, i64 %225\l  %227 = load i32, i32 addrspace(4)* %226, align 4, !tbaa !16\l  %228 = select i1 %199, i32 0, i32 %227\l  %229 = xor i32 %228, %191\l  %230 = add nuw nsw i32 %78, 4\l  %231 = icmp eq i32 %230, 160\l  br i1 %231, label %232, label %72, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x56d1ee0:s0 -> Node0x56cefb0;
	Node0x56d1ee0:s1 -> Node0x56d1ee0;
	Node0x56cefb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%232:\l232:                                              \l  store i32 %205, i32 addrspace(5)* %37, align 8, !tbaa !16\l  store i32 %211, i32 addrspace(5)* %38, align 4, !tbaa !16\l  store i32 %217, i32 addrspace(5)* %39, align 8, !tbaa !16\l  store i32 %223, i32 addrspace(5)* %40, align 4, !tbaa !16\l  store i32 %229, i32 addrspace(5)* %41, align 8, !tbaa !16\l  %233 = add nuw nsw i32 %71, 1\l  %234 = icmp eq i32 %233, %62\l  br i1 %234, label %66, label %70, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x56cefb0:s0 -> Node0x56d1260;
	Node0x56cefb0:s1 -> Node0x56cee60;
	Node0x56d1090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%235:\l235:                                              \l  %236 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %236, align 4, !tbaa !29\l  %237 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %237, align 8, !tbaa !30\l  %238 = bitcast %struct.hiprandState addrspace(1)* %35 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %238, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %36, i64 48, i1 false), !tbaa.struct !31\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %36) #4\l  br label %239\l}"];
	Node0x56d1090 -> Node0x56cf040;
	Node0x56cf040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%239:\l239:                                              \l  ret void\l}"];
}
