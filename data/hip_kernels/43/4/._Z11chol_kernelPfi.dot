digraph "CFG for '_Z11chol_kernelPfi' function" {
	label="CFG for '_Z11chol_kernelPfi' function";

	Node0x5e791f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = mul i32 %3, %8\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %11 = add i32 %9, %10\l  %12 = icmp eq i32 %11, 0\l  %13 = mul i32 %11, %1\l  %14 = add i32 %11, 1\l  %15 = mul i32 %14, %1\l  br label %16\l}"];
	Node0x5e791f0 -> Node0x5e7b2d0;
	Node0x5e7b2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%16:\l16:                                               \l  %17 = phi i32 [ %15, %2 ], [ %19, %94 ]\l  %18 = phi i32 [ 0, %2 ], [ %62, %94 ]\l  %19 = add i32 %17, 1\l  br i1 %12, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x5e7b2d0:s0 -> Node0x5e7b780;
	Node0x5e7b2d0:s1 -> Node0x5e7b7d0;
	Node0x5e7b7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%20:\l20:                                               \l  %21 = add nuw nsw i32 %18, 1\l  br label %61\l}"];
	Node0x5e7b7d0 -> Node0x5e7b9a0;
	Node0x5e7b780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%22:\l22:                                               \l  %23 = shl nuw nsw i32 %18, 11\l  %24 = mul nuw nsw i32 %18, 2049\l  %25 = zext i32 %24 to i64\l  %26 = getelementptr inbounds float, float addrspace(1)* %0, i64 %25\l  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !7\l  %28 = fcmp olt float %27, 0x39F0000000000000\l  %29 = select i1 %28, float 0x41F0000000000000, float 1.000000e+00\l  %30 = fmul float %27, %29\l  %31 = tail call float @llvm.sqrt.f32(float %30)\l  %32 = bitcast float %31 to i32\l  %33 = add nsw i32 %32, -1\l  %34 = bitcast i32 %33 to float\l  %35 = add nsw i32 %32, 1\l  %36 = bitcast i32 %35 to float\l  %37 = tail call i1 @llvm.amdgcn.class.f32(float %30, i32 608)\l  %38 = select i1 %28, float 0x3EF0000000000000, float 1.000000e+00\l  %39 = fneg float %36\l  %40 = tail call float @llvm.fma.f32(float %39, float %31, float %30)\l  %41 = fcmp ogt float %40, 0.000000e+00\l  %42 = fneg float %34\l  %43 = tail call float @llvm.fma.f32(float %42, float %31, float %30)\l  %44 = fcmp ole float %43, 0.000000e+00\l  %45 = select i1 %44, float %34, float %31\l  %46 = select i1 %41, float %36, float %45\l  %47 = fmul float %38, %46\l  %48 = select i1 %37, float %30, float %47\l  store float %48, float addrspace(1)* %26, align 4, !tbaa !7\l  %49 = add nuw nsw i32 %18, 1\l  %50 = icmp ult i32 %18, 2047\l  br i1 %50, label %51, label %61\l|{<s0>T|<s1>F}}"];
	Node0x5e7b780:s0 -> Node0x5e7e470;
	Node0x5e7b780:s1 -> Node0x5e7b9a0;
	Node0x5e7e470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%51:\l51:                                               \l  %52 = phi i32 [ %59, %51 ], [ %49, %22 ]\l  %53 = load float, float addrspace(1)* %26, align 4, !tbaa !7\l  %54 = add nuw nsw i32 %52, %23\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7\l  %58 = fdiv contract float %57, %53\l  store float %58, float addrspace(1)* %56, align 4, !tbaa !7\l  %59 = add nuw nsw i32 %52, 1\l  %60 = icmp ult i32 %52, 2047\l  br i1 %60, label %51, label %61, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5e7e470:s0 -> Node0x5e7e470;
	Node0x5e7e470:s1 -> Node0x5e7b9a0;
	Node0x5e7b9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%61:\l61:                                               \l  %62 = phi i32 [ %21, %20 ], [ %49, %22 ], [ %49, %51 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %63 = add i32 %62, %13\l  %64 = add nsw i32 %63, %1\l  %65 = icmp ult i32 %63, %64\l  br i1 %65, label %66, label %94\l|{<s0>T|<s1>F}}"];
	Node0x5e7b9a0:s0 -> Node0x5e7cdc0;
	Node0x5e7b9a0:s1 -> Node0x5e7abe0;
	Node0x5e7cdc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%66:\l66:                                               \l  %67 = shl i32 %18, 11\l  br label %68\l}"];
	Node0x5e7cdc0 -> Node0x5e7f5c0;
	Node0x5e7f5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%68:\l68:                                               \l  %69 = phi i32 [ %63, %66 ], [ %92, %91 ]\l  %70 = icmp ult i32 %69, 2048\l  br i1 %70, label %71, label %91\l|{<s0>T|<s1>F}}"];
	Node0x5e7f5c0:s0 -> Node0x5e7f840;
	Node0x5e7f5c0:s1 -> Node0x5e7f680;
	Node0x5e7f840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%71:\l71:                                               \l  %72 = add i32 %69, %67\l  %73 = zext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = shl nuw nsw i32 %69, 11\l  br label %76\l}"];
	Node0x5e7f840 -> Node0x5e7fbb0;
	Node0x5e7fbb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi i32 [ %69, %71 ], [ %89, %76 ]\l  %78 = load float, float addrspace(1)* %74, align 4, !tbaa !7\l  %79 = add nuw i32 %77, %67\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !7\l  %83 = fmul contract float %78, %82\l  %84 = add nuw i32 %77, %75\l  %85 = zext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7\l  %88 = fsub contract float %87, %83\l  store float %88, float addrspace(1)* %86, align 4, !tbaa !7\l  %89 = add nuw nsw i32 %77, 1\l  %90 = icmp ult i32 %77, 2047\l  br i1 %90, label %76, label %91, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5e7fbb0:s0 -> Node0x5e7fbb0;
	Node0x5e7fbb0:s1 -> Node0x5e7f680;
	Node0x5e7f680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%91:\l91:                                               \l  %92 = add i32 %69, 1\l  %93 = icmp eq i32 %69, %17\l  br i1 %93, label %94, label %68, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5e7f680:s0 -> Node0x5e7abe0;
	Node0x5e7f680:s1 -> Node0x5e7f5c0;
	Node0x5e7abe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%94:\l94:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %95 = icmp eq i32 %62, 2048\l  br i1 %95, label %96, label %16, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5e7abe0:s0 -> Node0x5e80b60;
	Node0x5e7abe0:s1 -> Node0x5e7b2d0;
	Node0x5e80b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%96:\l96:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %97 = add nsw i32 %13, %1\l  %98 = icmp ult i32 %13, %97\l  br i1 %98, label %99, label %165\l|{<s0>T|<s1>F}}"];
	Node0x5e80b60:s0 -> Node0x5e81030;
	Node0x5e80b60:s1 -> Node0x5e81080;
	Node0x5e81030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%99:\l99:                                               \l  %100 = add i32 %13, -1\l  br label %101\l}"];
	Node0x5e81030 -> Node0x5e81250;
	Node0x5e81250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%101:\l101:                                              \l  %102 = phi i32 [ 0, %99 ], [ %164, %161 ]\l  %103 = phi i32 [ %13, %99 ], [ %162, %161 ]\l  %104 = icmp eq i32 %103, 0\l  br i1 %104, label %161, label %105\l|{<s0>T|<s1>F}}"];
	Node0x5e81250:s0 -> Node0x5e81310;
	Node0x5e81250:s1 -> Node0x5e815d0;
	Node0x5e815d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%105:\l105:                                              \l  %106 = add i32 %100, %102\l  %107 = shl i32 %103, 11\l  %108 = and i32 %103, 7\l  %109 = icmp ult i32 %106, 7\l  br i1 %109, label %149, label %110\l|{<s0>T|<s1>F}}"];
	Node0x5e815d0:s0 -> Node0x5e81950;
	Node0x5e815d0:s1 -> Node0x5e819a0;
	Node0x5e819a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%110:\l110:                                              \l  %111 = and i32 %103, -8\l  br label %112\l}"];
	Node0x5e819a0 -> Node0x5e81b70;
	Node0x5e81b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%112:\l112:                                              \l  %113 = phi i32 [ 0, %110 ], [ %146, %112 ]\l  %114 = phi i32 [ 0, %110 ], [ %147, %112 ]\l  %115 = add i32 %113, %107\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  store float 0.000000e+00, float addrspace(1)* %117, align 4, !tbaa !7\l  %118 = or i32 %113, 1\l  %119 = add i32 %118, %107\l  %120 = zext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  store float 0.000000e+00, float addrspace(1)* %121, align 4, !tbaa !7\l  %122 = or i32 %113, 2\l  %123 = add i32 %122, %107\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  store float 0.000000e+00, float addrspace(1)* %125, align 4, !tbaa !7\l  %126 = or i32 %113, 3\l  %127 = add i32 %126, %107\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  store float 0.000000e+00, float addrspace(1)* %129, align 4, !tbaa !7\l  %130 = or i32 %113, 4\l  %131 = add i32 %130, %107\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  store float 0.000000e+00, float addrspace(1)* %133, align 4, !tbaa !7\l  %134 = or i32 %113, 5\l  %135 = add i32 %134, %107\l  %136 = zext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %0, i64 %136\l  store float 0.000000e+00, float addrspace(1)* %137, align 4, !tbaa !7\l  %138 = or i32 %113, 6\l  %139 = add i32 %138, %107\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  store float 0.000000e+00, float addrspace(1)* %141, align 4, !tbaa !7\l  %142 = or i32 %113, 7\l  %143 = add i32 %142, %107\l  %144 = zext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  store float 0.000000e+00, float addrspace(1)* %145, align 4, !tbaa !7\l  %146 = add nuw i32 %113, 8\l  %147 = add i32 %114, 8\l  %148 = icmp eq i32 %147, %111\l  br i1 %148, label %149, label %112, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5e81b70:s0 -> Node0x5e81950;
	Node0x5e81b70:s1 -> Node0x5e81b70;
	Node0x5e81950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%149:\l149:                                              \l  %150 = phi i32 [ 0, %105 ], [ %146, %112 ]\l  %151 = icmp eq i32 %108, 0\l  br i1 %151, label %161, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5e81950:s0 -> Node0x5e81310;
	Node0x5e81950:s1 -> Node0x5e83d40;
	Node0x5e83d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%152:\l152:                                              \l  %153 = phi i32 [ %158, %152 ], [ %150, %149 ]\l  %154 = phi i32 [ %159, %152 ], [ 0, %149 ]\l  %155 = add i32 %153, %107\l  %156 = zext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  store float 0.000000e+00, float addrspace(1)* %157, align 4, !tbaa !7\l  %158 = add nuw i32 %153, 1\l  %159 = add i32 %154, 1\l  %160 = icmp eq i32 %159, %108\l  br i1 %160, label %161, label %152, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5e83d40:s0 -> Node0x5e81310;
	Node0x5e83d40:s1 -> Node0x5e83d40;
	Node0x5e81310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%161:\l161:                                              \l  %162 = add nuw i32 %103, 1\l  %163 = icmp eq i32 %162, %15\l  %164 = add i32 %102, 1\l  br i1 %163, label %165, label %101, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5e81310:s0 -> Node0x5e81080;
	Node0x5e81310:s1 -> Node0x5e81250;
	Node0x5e81080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%165:\l165:                                              \l  ret void\l}"];
}
