digraph "CFG for '_Z23bilateral_smooth_kernelPfS_S_iiiff' function" {
	label="CFG for '_Z23bilateral_smooth_kernelPfS_S_iiiff' function";

	Node0x64e6510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = mul nsw i32 %4, %3\l  %19 = icmp slt i32 %17, %18\l  br i1 %19, label %20, label %324\l|{<s0>T|<s1>F}}"];
	Node0x64e6510:s0 -> Node0x64e8510;
	Node0x64e6510:s1 -> Node0x64e85a0;
	Node0x64e8510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%20:\l20:                                               \l  %21 = freeze i32 %17\l  %22 = freeze i32 %4\l  %23 = sdiv i32 %21, %22\l  %24 = mul i32 %23, %22\l  %25 = sub i32 %21, %24\l  %26 = sub i32 0, %5\l  %27 = icmp slt i32 %5, 0\l  br i1 %27, label %63, label %28\l|{<s0>T|<s1>F}}"];
	Node0x64e8510:s0 -> Node0x64e8a90;
	Node0x64e8510:s1 -> Node0x64e8ae0;
	Node0x64e8ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%28:\l28:                                               \l  %29 = mul nsw i32 %23, %4\l  %30 = add nsw i32 %29, %25\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %33 = add nsw i32 %30, %18\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %2, i64 %34\l  %36 = shl nsw i32 %18, 1\l  %37 = add nsw i32 %30, %36\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %2, i64 %38\l  %40 = fmul contract float %6, 2.000000e+00\l  %41 = fmul contract float %40, %6\l  %42 = fmul contract float %7, 2.000000e+00\l  %43 = fmul contract float %42, %7\l  br label %44\l}"];
	Node0x64e8ae0 -> Node0x64e9fb0;
	Node0x64e9fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%44:\l44:                                               \l  %45 = phi double [ 0.000000e+00, %28 ], [ %309, %137 ]\l  %46 = phi double [ 0.000000e+00, %28 ], [ %310, %137 ]\l  %47 = phi double [ 0.000000e+00, %28 ], [ %311, %137 ]\l  %48 = phi double [ 0.000000e+00, %28 ], [ %312, %137 ]\l  %49 = phi double [ 0.000000e+00, %28 ], [ %313, %137 ]\l  %50 = phi double [ 0.000000e+00, %28 ], [ %314, %137 ]\l  %51 = phi double [ 0.000000e+00, %28 ], [ %315, %137 ]\l  %52 = phi double [ 0.000000e+00, %28 ], [ %316, %137 ]\l  %53 = phi double [ 0.000000e+00, %28 ], [ %317, %137 ]\l  %54 = phi double [ 0.000000e+00, %28 ], [ %318, %137 ]\l  %55 = phi double [ 0.000000e+00, %28 ], [ %319, %137 ]\l  %56 = phi double [ 0.000000e+00, %28 ], [ %320, %137 ]\l  %57 = phi double [ 0.000000e+00, %28 ], [ %321, %137 ]\l  %58 = phi i32 [ %26, %28 ], [ %138, %137 ]\l  %59 = add nsw i32 %58, %25\l  %60 = icmp sgt i32 %59, -1\l  %61 = icmp slt i32 %59, %4\l  %62 = mul nsw i32 %58, %58\l  br label %140\l}"];
	Node0x64e9fb0 -> Node0x64eb370;
	Node0x64e8a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%63:\l63:                                               \l  %64 = phi double [ 0.000000e+00, %20 ], [ %309, %137 ]\l  %65 = phi double [ 0.000000e+00, %20 ], [ %310, %137 ]\l  %66 = phi double [ 0.000000e+00, %20 ], [ %311, %137 ]\l  %67 = phi double [ 0.000000e+00, %20 ], [ %312, %137 ]\l  %68 = phi double [ 0.000000e+00, %20 ], [ %313, %137 ]\l  %69 = phi double [ 0.000000e+00, %20 ], [ %314, %137 ]\l  %70 = phi double [ 0.000000e+00, %20 ], [ %315, %137 ]\l  %71 = phi double [ 0.000000e+00, %20 ], [ %316, %137 ]\l  %72 = phi double [ 0.000000e+00, %20 ], [ %317, %137 ]\l  %73 = phi double [ 0.000000e+00, %20 ], [ %318, %137 ]\l  %74 = phi double [ 0.000000e+00, %20 ], [ %319, %137 ]\l  %75 = phi double [ 0.000000e+00, %20 ], [ %320, %137 ]\l  %76 = phi double [ 0.000000e+00, %20 ], [ %321, %137 ]\l  %77 = mul nsw i32 %17, 12\l  %78 = fdiv contract double %64, %76\l  %79 = fptrunc double %78 to float\l  %80 = sext i32 %77 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80\l  store float %79, float addrspace(1)* %81, align 4, !tbaa !7\l  %82 = fdiv contract double %65, %76\l  %83 = fptrunc double %82 to float\l  %84 = or i32 %77, 1\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85\l  store float %83, float addrspace(1)* %86, align 4, !tbaa !7\l  %87 = fdiv contract double %66, %76\l  %88 = fptrunc double %87 to float\l  %89 = or i32 %77, 2\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90\l  store float %88, float addrspace(1)* %91, align 4, !tbaa !7\l  %92 = fdiv contract double %67, %76\l  %93 = fptrunc double %92 to float\l  %94 = or i32 %77, 3\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  store float %93, float addrspace(1)* %96, align 4, !tbaa !7\l  %97 = fdiv contract double %68, %76\l  %98 = fptrunc double %97 to float\l  %99 = add nsw i32 %77, 4\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  store float %98, float addrspace(1)* %101, align 4, !tbaa !7\l  %102 = fdiv contract double %69, %76\l  %103 = fptrunc double %102 to float\l  %104 = add nsw i32 %77, 5\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  store float %103, float addrspace(1)* %106, align 4, !tbaa !7\l  %107 = fdiv contract double %70, %76\l  %108 = fptrunc double %107 to float\l  %109 = add nsw i32 %77, 6\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  store float %108, float addrspace(1)* %111, align 4, !tbaa !7\l  %112 = fdiv contract double %71, %76\l  %113 = fptrunc double %112 to float\l  %114 = add nsw i32 %77, 7\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  store float %113, float addrspace(1)* %116, align 4, !tbaa !7\l  %117 = fdiv contract double %72, %76\l  %118 = fptrunc double %117 to float\l  %119 = add nsw i32 %77, 8\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %120\l  store float %118, float addrspace(1)* %121, align 4, !tbaa !7\l  %122 = fdiv contract double %73, %76\l  %123 = fptrunc double %122 to float\l  %124 = add nsw i32 %77, 9\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  store float %123, float addrspace(1)* %126, align 4, !tbaa !7\l  %127 = fdiv contract double %74, %76\l  %128 = fptrunc double %127 to float\l  %129 = add nsw i32 %77, 10\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %1, i64 %130\l  store float %128, float addrspace(1)* %131, align 4, !tbaa !7\l  %132 = fdiv contract double %75, %76\l  %133 = fptrunc double %132 to float\l  %134 = add nsw i32 %77, 11\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  store float %133, float addrspace(1)* %136, align 4, !tbaa !7\l  br label %324\l}"];
	Node0x64e8a90 -> Node0x64e85a0;
	Node0x64ea120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%137:\l137:                                              \l  %138 = add i32 %58, 1\l  %139 = icmp eq i32 %58, %5\l  br i1 %139, label %63, label %44, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x64ea120:s0 -> Node0x64e8a90;
	Node0x64ea120:s1 -> Node0x64e9fb0;
	Node0x64eb370 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%140:\l140:                                              \l  %141 = phi double [ %45, %44 ], [ %309, %308 ]\l  %142 = phi double [ %46, %44 ], [ %310, %308 ]\l  %143 = phi double [ %47, %44 ], [ %311, %308 ]\l  %144 = phi double [ %48, %44 ], [ %312, %308 ]\l  %145 = phi double [ %49, %44 ], [ %313, %308 ]\l  %146 = phi double [ %50, %44 ], [ %314, %308 ]\l  %147 = phi double [ %51, %44 ], [ %315, %308 ]\l  %148 = phi double [ %52, %44 ], [ %316, %308 ]\l  %149 = phi double [ %53, %44 ], [ %317, %308 ]\l  %150 = phi double [ %54, %44 ], [ %318, %308 ]\l  %151 = phi double [ %55, %44 ], [ %319, %308 ]\l  %152 = phi double [ %56, %44 ], [ %320, %308 ]\l  %153 = phi double [ %57, %44 ], [ %321, %308 ]\l  %154 = phi i32 [ %26, %44 ], [ %322, %308 ]\l  %155 = add nsw i32 %154, %23\l  %156 = mul nsw i32 %155, %4\l  %157 = add nsw i32 %156, %59\l  br i1 %60, label %158, label %308\l|{<s0>T|<s1>F}}"];
	Node0x64eb370:s0 -> Node0x64f0200;
	Node0x64eb370:s1 -> Node0x64ef620;
	Node0x64f0200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%158:\l158:                                              \l  %159 = icmp sgt i32 %155, -1\l  %160 = select i1 %61, i1 %159, i1 false\l  %161 = icmp slt i32 %155, %3\l  %162 = select i1 %160, i1 %161, i1 false\l  br i1 %162, label %163, label %308\l|{<s0>T|<s1>F}}"];
	Node0x64f0200:s0 -> Node0x64f05c0;
	Node0x64f0200:s1 -> Node0x64ef620;
	Node0x64f05c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%163:\l163:                                              \l  %164 = sext i32 %157 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %2, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %167 = load float, float addrspace(1)* %32, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %168 = fsub contract float %166, %167\l  %169 = add nsw i32 %157, %18\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %2, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %173 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %174 = fsub contract float %172, %173\l  %175 = add nsw i32 %157, %36\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %2, i64 %176\l  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %179 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %180 = fsub contract float %178, %179\l  %181 = fmul contract float %168, %168\l  %182 = fmul contract float %174, %174\l  %183 = fadd contract float %181, %182\l  %184 = fmul contract float %180, %180\l  %185 = fadd contract float %183, %184\l  %186 = mul nsw i32 %154, %154\l  %187 = add nuw nsw i32 %62, %186\l  %188 = sub nsw i32 0, %187\l  %189 = sitofp i32 %188 to float\l  %190 = fdiv contract float %189, %41\l  %191 = fmul float %190, 0x3FF7154760000000\l  %192 = tail call float @llvm.rint.f32(float %191)\l  %193 = fcmp ogt float %190, 0x40562E4300000000\l  %194 = fcmp olt float %190, 0xC059D1DA00000000\l  %195 = fneg float %191\l  %196 = tail call float @llvm.fma.f32(float %190, float 0x3FF7154760000000,\l... float %195)\l  %197 = tail call float @llvm.fma.f32(float %190, float 0x3E54AE0BE0000000,\l... float %196)\l  %198 = fsub float %191, %192\l  %199 = fadd float %197, %198\l  %200 = tail call float @llvm.exp2.f32(float %199)\l  %201 = fptosi float %192 to i32\l  %202 = tail call float @llvm.amdgcn.ldexp.f32(float %200, i32 %201)\l  %203 = select i1 %194, float 0.000000e+00, float %202\l  %204 = select i1 %193, float 0x7FF0000000000000, float %203\l  %205 = fdiv contract float %185, -3.000000e+00\l  %206 = fdiv contract float %205, %43\l  %207 = fmul float %206, 0x3FF7154760000000\l  %208 = tail call float @llvm.rint.f32(float %207)\l  %209 = fcmp ogt float %206, 0x40562E4300000000\l  %210 = fcmp olt float %206, 0xC059D1DA00000000\l  %211 = fneg float %207\l  %212 = tail call float @llvm.fma.f32(float %206, float 0x3FF7154760000000,\l... float %211)\l  %213 = tail call float @llvm.fma.f32(float %206, float 0x3E54AE0BE0000000,\l... float %212)\l  %214 = fsub float %207, %208\l  %215 = fadd float %213, %214\l  %216 = tail call float @llvm.exp2.f32(float %215)\l  %217 = fptosi float %208 to i32\l  %218 = tail call float @llvm.amdgcn.ldexp.f32(float %216, i32 %217)\l  %219 = select i1 %210, float 0.000000e+00, float %218\l  %220 = select i1 %209, float 0x7FF0000000000000, float %219\l  %221 = fmul contract float %204, %220\l  %222 = mul nsw i32 %157, 12\l  %223 = sext i32 %222 to i64\l  %224 = getelementptr inbounds float, float addrspace(1)* %0, i64 %223\l  %225 = load float, float addrspace(1)* %224, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %226 = fmul contract float %221, %225\l  %227 = fpext float %226 to double\l  %228 = fadd contract double %141, %227\l  %229 = or i32 %222, 1\l  %230 = sext i32 %229 to i64\l  %231 = getelementptr inbounds float, float addrspace(1)* %0, i64 %230\l  %232 = load float, float addrspace(1)* %231, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %233 = fmul contract float %221, %232\l  %234 = fpext float %233 to double\l  %235 = fadd contract double %142, %234\l  %236 = or i32 %222, 2\l  %237 = sext i32 %236 to i64\l  %238 = getelementptr inbounds float, float addrspace(1)* %0, i64 %237\l  %239 = load float, float addrspace(1)* %238, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %240 = fmul contract float %221, %239\l  %241 = fpext float %240 to double\l  %242 = fadd contract double %143, %241\l  %243 = or i32 %222, 3\l  %244 = sext i32 %243 to i64\l  %245 = getelementptr inbounds float, float addrspace(1)* %0, i64 %244\l  %246 = load float, float addrspace(1)* %245, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %247 = fmul contract float %221, %246\l  %248 = fpext float %247 to double\l  %249 = fadd contract double %144, %248\l  %250 = add nsw i32 %222, 4\l  %251 = sext i32 %250 to i64\l  %252 = getelementptr inbounds float, float addrspace(1)* %0, i64 %251\l  %253 = load float, float addrspace(1)* %252, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %254 = fmul contract float %221, %253\l  %255 = fpext float %254 to double\l  %256 = fadd contract double %145, %255\l  %257 = add nsw i32 %222, 5\l  %258 = sext i32 %257 to i64\l  %259 = getelementptr inbounds float, float addrspace(1)* %0, i64 %258\l  %260 = load float, float addrspace(1)* %259, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %261 = fmul contract float %221, %260\l  %262 = fpext float %261 to double\l  %263 = fadd contract double %146, %262\l  %264 = add nsw i32 %222, 6\l  %265 = sext i32 %264 to i64\l  %266 = getelementptr inbounds float, float addrspace(1)* %0, i64 %265\l  %267 = load float, float addrspace(1)* %266, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %268 = fmul contract float %221, %267\l  %269 = fpext float %268 to double\l  %270 = fadd contract double %147, %269\l  %271 = add nsw i32 %222, 7\l  %272 = sext i32 %271 to i64\l  %273 = getelementptr inbounds float, float addrspace(1)* %0, i64 %272\l  %274 = load float, float addrspace(1)* %273, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %275 = fmul contract float %221, %274\l  %276 = fpext float %275 to double\l  %277 = fadd contract double %148, %276\l  %278 = add nsw i32 %222, 8\l  %279 = sext i32 %278 to i64\l  %280 = getelementptr inbounds float, float addrspace(1)* %0, i64 %279\l  %281 = load float, float addrspace(1)* %280, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %282 = fmul contract float %221, %281\l  %283 = fpext float %282 to double\l  %284 = fadd contract double %149, %283\l  %285 = add nsw i32 %222, 9\l  %286 = sext i32 %285 to i64\l  %287 = getelementptr inbounds float, float addrspace(1)* %0, i64 %286\l  %288 = load float, float addrspace(1)* %287, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %289 = fmul contract float %221, %288\l  %290 = fpext float %289 to double\l  %291 = fadd contract double %150, %290\l  %292 = add nsw i32 %222, 10\l  %293 = sext i32 %292 to i64\l  %294 = getelementptr inbounds float, float addrspace(1)* %0, i64 %293\l  %295 = load float, float addrspace(1)* %294, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %296 = fmul contract float %221, %295\l  %297 = fpext float %296 to double\l  %298 = fadd contract double %151, %297\l  %299 = add nsw i32 %222, 11\l  %300 = sext i32 %299 to i64\l  %301 = getelementptr inbounds float, float addrspace(1)* %0, i64 %300\l  %302 = load float, float addrspace(1)* %301, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %303 = fmul contract float %221, %302\l  %304 = fpext float %303 to double\l  %305 = fadd contract double %152, %304\l  %306 = fpext float %221 to double\l  %307 = fadd contract double %153, %306\l  br label %308\l}"];
	Node0x64f05c0 -> Node0x64ef620;
	Node0x64ef620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%308:\l308:                                              \l  %309 = phi double [ %228, %163 ], [ %141, %158 ], [ %141, %140 ]\l  %310 = phi double [ %235, %163 ], [ %142, %158 ], [ %142, %140 ]\l  %311 = phi double [ %242, %163 ], [ %143, %158 ], [ %143, %140 ]\l  %312 = phi double [ %249, %163 ], [ %144, %158 ], [ %144, %140 ]\l  %313 = phi double [ %256, %163 ], [ %145, %158 ], [ %145, %140 ]\l  %314 = phi double [ %263, %163 ], [ %146, %158 ], [ %146, %140 ]\l  %315 = phi double [ %270, %163 ], [ %147, %158 ], [ %147, %140 ]\l  %316 = phi double [ %277, %163 ], [ %148, %158 ], [ %148, %140 ]\l  %317 = phi double [ %284, %163 ], [ %149, %158 ], [ %149, %140 ]\l  %318 = phi double [ %291, %163 ], [ %150, %158 ], [ %150, %140 ]\l  %319 = phi double [ %298, %163 ], [ %151, %158 ], [ %151, %140 ]\l  %320 = phi double [ %305, %163 ], [ %152, %158 ], [ %152, %140 ]\l  %321 = phi double [ %307, %163 ], [ %153, %158 ], [ %153, %140 ]\l  %322 = add i32 %154, 1\l  %323 = icmp eq i32 %154, %5\l  br i1 %323, label %137, label %140, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x64ef620:s0 -> Node0x64ea120;
	Node0x64ef620:s1 -> Node0x64eb370;
	Node0x64e85a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%324:\l324:                                              \l  ret void\l}"];
}
