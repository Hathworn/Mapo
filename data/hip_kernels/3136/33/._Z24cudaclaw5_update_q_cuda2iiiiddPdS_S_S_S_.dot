digraph "CFG for '_Z24cudaclaw5_update_q_cuda2iiiiddPdS_S_S_S_' function" {
	label="CFG for '_Z24cudaclaw5_update_q_cuda2iiiiddPdS_S_S_S_' function";

	Node0x61a02b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %13, %18\l  %20 = add i32 %19, %12\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !5, !invariant.load !6\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %22, %26\l  %28 = add i32 %27, %21\l  %29 = icmp slt i32 %20, %1\l  %30 = icmp slt i32 %28, %2\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %175\l|{<s0>T|<s1>F}}"];
	Node0x61a02b0:s0 -> Node0x61a4b20;
	Node0x61a02b0:s1 -> Node0x61a4bb0;
	Node0x61a4b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = shl nsw i32 %0, 1\l  %34 = add nsw i32 %33, %1\l  %35 = mul nsw i32 %34, %3\l  %36 = add nsw i32 %20, %0\l  %37 = mul nsw i32 %36, %3\l  %38 = add nsw i32 %28, %0\l  %39 = mul nsw i32 %38, %35\l  %40 = add nsw i32 %39, %37\l  %41 = icmp sgt i32 %3, 0\l  br i1 %41, label %42, label %175\l|{<s0>T|<s1>F}}"];
	Node0x61a4b20:s0 -> Node0x61a5380;
	Node0x61a4b20:s1 -> Node0x61a4bb0;
	Node0x61a5380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%42:\l42:                                               \l  %43 = and i32 %3, 3\l  %44 = icmp ult i32 %3, 4\l  br i1 %44, label %144, label %45\l|{<s0>T|<s1>F}}"];
	Node0x61a5380:s0 -> Node0x61a5600;
	Node0x61a5380:s1 -> Node0x61a5650;
	Node0x61a5650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%45:\l45:                                               \l  %46 = and i32 %3, -4\l  br label %47\l}"];
	Node0x61a5650 -> Node0x61a5850;
	Node0x61a5850 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%47:\l47:                                               \l  %48 = phi i32 [ 0, %45 ], [ %141, %47 ]\l  %49 = phi i32 [ 0, %45 ], [ %142, %47 ]\l  %50 = add nsw i32 %40, %48\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %6, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !7\l  %54 = add nsw i32 %50, %3\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %7, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !7\l  %58 = getelementptr inbounds double, double addrspace(1)* %8, i64 %51\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !7\l  %60 = fsub contract double %57, %59\l  %61 = fmul contract double %60, %4\l  %62 = fsub contract double %53, %61\l  %63 = add nsw i32 %50, %35\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %9, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !7\l  %67 = getelementptr inbounds double, double addrspace(1)* %10, i64 %51\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !7\l  %69 = fsub contract double %66, %68\l  %70 = fmul contract double %69, %5\l  %71 = fsub contract double %62, %70\l  store double %71, double addrspace(1)* %52, align 8, !tbaa !7\l  %72 = or i32 %48, 1\l  %73 = add nsw i32 %40, %72\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds double, double addrspace(1)* %6, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7\l  %77 = add nsw i32 %73, %3\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %7, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !7\l  %81 = getelementptr inbounds double, double addrspace(1)* %8, i64 %74\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !7\l  %83 = fsub contract double %80, %82\l  %84 = fmul contract double %83, %4\l  %85 = fsub contract double %76, %84\l  %86 = add nsw i32 %73, %35\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %9, i64 %87\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !7\l  %90 = getelementptr inbounds double, double addrspace(1)* %10, i64 %74\l  %91 = load double, double addrspace(1)* %90, align 8, !tbaa !7\l  %92 = fsub contract double %89, %91\l  %93 = fmul contract double %92, %5\l  %94 = fsub contract double %85, %93\l  store double %94, double addrspace(1)* %75, align 8, !tbaa !7\l  %95 = or i32 %48, 2\l  %96 = add nsw i32 %40, %95\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds double, double addrspace(1)* %6, i64 %97\l  %99 = load double, double addrspace(1)* %98, align 8, !tbaa !7\l  %100 = add nsw i32 %96, %3\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds double, double addrspace(1)* %7, i64 %101\l  %103 = load double, double addrspace(1)* %102, align 8, !tbaa !7\l  %104 = getelementptr inbounds double, double addrspace(1)* %8, i64 %97\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !7\l  %106 = fsub contract double %103, %105\l  %107 = fmul contract double %106, %4\l  %108 = fsub contract double %99, %107\l  %109 = add nsw i32 %96, %35\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds double, double addrspace(1)* %9, i64 %110\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !7\l  %113 = getelementptr inbounds double, double addrspace(1)* %10, i64 %97\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !7\l  %115 = fsub contract double %112, %114\l  %116 = fmul contract double %115, %5\l  %117 = fsub contract double %108, %116\l  store double %117, double addrspace(1)* %98, align 8, !tbaa !7\l  %118 = or i32 %48, 3\l  %119 = add nsw i32 %40, %118\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds double, double addrspace(1)* %6, i64 %120\l  %122 = load double, double addrspace(1)* %121, align 8, !tbaa !7\l  %123 = add nsw i32 %119, %3\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds double, double addrspace(1)* %7, i64 %124\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !7\l  %127 = getelementptr inbounds double, double addrspace(1)* %8, i64 %120\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !7\l  %129 = fsub contract double %126, %128\l  %130 = fmul contract double %129, %4\l  %131 = fsub contract double %122, %130\l  %132 = add nsw i32 %119, %35\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds double, double addrspace(1)* %9, i64 %133\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !7\l  %136 = getelementptr inbounds double, double addrspace(1)* %10, i64 %120\l  %137 = load double, double addrspace(1)* %136, align 8, !tbaa !7\l  %138 = fsub contract double %135, %137\l  %139 = fmul contract double %138, %5\l  %140 = fsub contract double %131, %139\l  store double %140, double addrspace(1)* %121, align 8, !tbaa !7\l  %141 = add nuw nsw i32 %48, 4\l  %142 = add i32 %49, 4\l  %143 = icmp eq i32 %142, %46\l  br i1 %143, label %144, label %47, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x61a5850:s0 -> Node0x61a5600;
	Node0x61a5850:s1 -> Node0x61a5850;
	Node0x61a5600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%144:\l144:                                              \l  %145 = phi i32 [ 0, %42 ], [ %141, %47 ]\l  %146 = icmp eq i32 %43, 0\l  br i1 %146, label %175, label %147\l|{<s0>T|<s1>F}}"];
	Node0x61a5600:s0 -> Node0x61a4bb0;
	Node0x61a5600:s1 -> Node0x61aa010;
	Node0x61aa010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%147:\l147:                                              \l  %148 = phi i32 [ %172, %147 ], [ %145, %144 ]\l  %149 = phi i32 [ %173, %147 ], [ 0, %144 ]\l  %150 = add nsw i32 %40, %148\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds double, double addrspace(1)* %6, i64 %151\l  %153 = load double, double addrspace(1)* %152, align 8, !tbaa !7\l  %154 = add nsw i32 %150, %3\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds double, double addrspace(1)* %7, i64 %155\l  %157 = load double, double addrspace(1)* %156, align 8, !tbaa !7\l  %158 = getelementptr inbounds double, double addrspace(1)* %8, i64 %151\l  %159 = load double, double addrspace(1)* %158, align 8, !tbaa !7\l  %160 = fsub contract double %157, %159\l  %161 = fmul contract double %160, %4\l  %162 = fsub contract double %153, %161\l  %163 = add nsw i32 %150, %35\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds double, double addrspace(1)* %9, i64 %164\l  %166 = load double, double addrspace(1)* %165, align 8, !tbaa !7\l  %167 = getelementptr inbounds double, double addrspace(1)* %10, i64 %151\l  %168 = load double, double addrspace(1)* %167, align 8, !tbaa !7\l  %169 = fsub contract double %166, %168\l  %170 = fmul contract double %169, %5\l  %171 = fsub contract double %162, %170\l  store double %171, double addrspace(1)* %152, align 8, !tbaa !7\l  %172 = add nuw nsw i32 %148, 1\l  %173 = add i32 %149, 1\l  %174 = icmp eq i32 %173, %43\l  br i1 %174, label %175, label %147, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x61aa010:s0 -> Node0x61a4bb0;
	Node0x61aa010:s1 -> Node0x61aa010;
	Node0x61a4bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%175:\l175:                                              \l  ret void\l}"];
}
