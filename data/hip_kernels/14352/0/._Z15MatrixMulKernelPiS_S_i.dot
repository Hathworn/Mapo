digraph "CFG for '_Z15MatrixMulKernelPiS_S_i' function" {
	label="CFG for '_Z15MatrixMulKernelPiS_S_i' function";

	Node0x641c510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %7 = icmp sgt i32 %3, 0\l  %8 = mul nsw i32 %6, %3\l  br i1 %7, label %9, label %139\l|{<s0>T|<s1>F}}"];
	Node0x641c510:s0 -> Node0x641c560;
	Node0x641c510:s1 -> Node0x641e2e0;
	Node0x641c560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%9:\l9:                                                \l  %10 = and i32 %3, 7\l  %11 = icmp ult i32 %3, 8\l  br i1 %11, label %116, label %12\l|{<s0>T|<s1>F}}"];
	Node0x641c560:s0 -> Node0x641e5a0;
	Node0x641c560:s1 -> Node0x641e5f0;
	Node0x641e5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%12:\l12:                                               \l  %13 = and i32 %3, -8\l  br label %14\l}"];
	Node0x641e5f0 -> Node0x641e7f0;
	Node0x641e7f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%14:\l14:                                               \l  %15 = phi i32 [ 0, %12 ], [ %112, %14 ]\l  %16 = phi i32 [ 0, %12 ], [ %113, %14 ]\l  %17 = phi i32 [ 0, %12 ], [ %114, %14 ]\l  %18 = add nsw i32 %16, %8\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %19\l  %21 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %22 = mul nsw i32 %16, %3\l  %23 = add nsw i32 %22, %5\l  %24 = sext i32 %23 to i64\l  %25 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %24\l  %26 = load i32, i32 addrspace(1)* %25, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %27 = mul nsw i32 %26, %21\l  %28 = add nsw i32 %27, %15\l  %29 = or i32 %16, 1\l  %30 = add nsw i32 %29, %8\l  %31 = sext i32 %30 to i64\l  %32 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %31\l  %33 = load i32, i32 addrspace(1)* %32, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %34 = mul nsw i32 %29, %3\l  %35 = add nsw i32 %34, %5\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %36\l  %38 = load i32, i32 addrspace(1)* %37, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %39 = mul nsw i32 %38, %33\l  %40 = add nsw i32 %39, %28\l  %41 = or i32 %16, 2\l  %42 = add nsw i32 %41, %8\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %46 = mul nsw i32 %41, %3\l  %47 = add nsw i32 %46, %5\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %48\l  %50 = load i32, i32 addrspace(1)* %49, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %51 = mul nsw i32 %50, %45\l  %52 = add nsw i32 %51, %40\l  %53 = or i32 %16, 3\l  %54 = add nsw i32 %53, %8\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %55\l  %57 = load i32, i32 addrspace(1)* %56, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %58 = mul nsw i32 %53, %3\l  %59 = add nsw i32 %58, %5\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %60\l  %62 = load i32, i32 addrspace(1)* %61, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %63 = mul nsw i32 %62, %57\l  %64 = add nsw i32 %63, %52\l  %65 = or i32 %16, 4\l  %66 = add nsw i32 %65, %8\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %67\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %70 = mul nsw i32 %65, %3\l  %71 = add nsw i32 %70, %5\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %72\l  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %75 = mul nsw i32 %74, %69\l  %76 = add nsw i32 %75, %64\l  %77 = or i32 %16, 5\l  %78 = add nsw i32 %77, %8\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %79\l  %81 = load i32, i32 addrspace(1)* %80, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %82 = mul nsw i32 %77, %3\l  %83 = add nsw i32 %82, %5\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %84\l  %86 = load i32, i32 addrspace(1)* %85, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %87 = mul nsw i32 %86, %81\l  %88 = add nsw i32 %87, %76\l  %89 = or i32 %16, 6\l  %90 = add nsw i32 %89, %8\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %91\l  %93 = load i32, i32 addrspace(1)* %92, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %94 = mul nsw i32 %89, %3\l  %95 = add nsw i32 %94, %5\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %96\l  %98 = load i32, i32 addrspace(1)* %97, align 4, !tbaa !5, !amdgpu.noclobber\l... !9\l  %99 = mul nsw i32 %98, %93\l  %100 = add nsw i32 %99, %88\l  %101 = or i32 %16, 7\l  %102 = add nsw i32 %101, %8\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %103\l  %105 = load i32, i32 addrspace(1)* %104, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %106 = mul nsw i32 %101, %3\l  %107 = add nsw i32 %106, %5\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %108\l  %110 = load i32, i32 addrspace(1)* %109, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %111 = mul nsw i32 %110, %105\l  %112 = add nsw i32 %111, %100\l  %113 = add nuw nsw i32 %16, 8\l  %114 = add i32 %17, 8\l  %115 = icmp eq i32 %114, %13\l  br i1 %115, label %116, label %14, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x641e7f0:s0 -> Node0x641e5a0;
	Node0x641e7f0:s1 -> Node0x641e7f0;
	Node0x641e5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%116:\l116:                                              \l  %117 = phi i32 [ undef, %9 ], [ %112, %14 ]\l  %118 = phi i32 [ 0, %9 ], [ %112, %14 ]\l  %119 = phi i32 [ 0, %9 ], [ %113, %14 ]\l  %120 = icmp eq i32 %10, 0\l  br i1 %120, label %139, label %121\l|{<s0>T|<s1>F}}"];
	Node0x641e5a0:s0 -> Node0x641e2e0;
	Node0x641e5a0:s1 -> Node0x6423f60;
	Node0x6423f60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%121:\l121:                                              \l  %122 = phi i32 [ %135, %121 ], [ %118, %116 ]\l  %123 = phi i32 [ %136, %121 ], [ %119, %116 ]\l  %124 = phi i32 [ %137, %121 ], [ 0, %116 ]\l  %125 = add nsw i32 %123, %8\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %126\l  %128 = load i32, i32 addrspace(1)* %127, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %129 = mul nsw i32 %123, %3\l  %130 = add nsw i32 %129, %5\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %131\l  %133 = load i32, i32 addrspace(1)* %132, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %134 = mul nsw i32 %133, %128\l  %135 = add nsw i32 %134, %122\l  %136 = add nuw nsw i32 %123, 1\l  %137 = add i32 %124, 1\l  %138 = icmp eq i32 %137, %10\l  br i1 %138, label %139, label %121, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x6423f60:s0 -> Node0x641e2e0;
	Node0x6423f60:s1 -> Node0x6423f60;
	Node0x641e2e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%139:\l139:                                              \l  %140 = phi i32 [ 0, %4 ], [ %117, %116 ], [ %135, %121 ]\l  %141 = add nsw i32 %8, %5\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %142\l  store i32 %140, i32 addrspace(1)* %143, align 4, !tbaa !5\l  ret void\l}"];
}
