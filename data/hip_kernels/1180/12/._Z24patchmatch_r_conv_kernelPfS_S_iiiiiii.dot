digraph "CFG for '_Z24patchmatch_r_conv_kernelPfS_S_iiiiiii' function" {
	label="CFG for '_Z24patchmatch_r_conv_kernelPfS_S_iiiiiii' function";

	Node0x5e32c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %11, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = mul nsw i32 %7, %6\l  %21 = mul nsw i32 %9, %8\l  %22 = mul nsw i32 %21, %20\l  %23 = icmp slt i32 %19, %22\l  br i1 %23, label %24, label %222\l|{<s0>T|<s1>F}}"];
	Node0x5e32c70:s0 -> Node0x5e358f0;
	Node0x5e32c70:s1 -> Node0x5e35980;
	Node0x5e358f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%24:\l24:                                               \l  %25 = freeze i32 %19\l  %26 = freeze i32 %21\l  %27 = sdiv i32 %25, %26\l  %28 = mul i32 %27, %26\l  %29 = sub i32 %25, %28\l  %30 = freeze i32 %7\l  %31 = sdiv i32 %27, %30\l  %32 = mul i32 %31, %30\l  %33 = sub i32 %27, %32\l  %34 = freeze i32 %9\l  %35 = sdiv i32 %29, %34\l  %36 = mul i32 %35, %34\l  %37 = sub i32 %29, %36\l  %38 = add nsw i32 %3, -1\l  %39 = sdiv i32 %38, 2\l  %40 = sub nsw i32 0, %39\l  %41 = icmp slt i32 %3, 0\l  br i1 %41, label %61, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5e358f0:s0 -> Node0x5e36540;
	Node0x5e358f0:s1 -> Node0x5e36590;
	Node0x5e36590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%42:\l42:                                               \l  %43 = icmp sgt i32 %5, 0\l  %44 = and i32 %5, 1\l  %45 = icmp eq i32 %5, 1\l  %46 = and i32 %5, -2\l  %47 = icmp eq i32 %44, 0\l  br label %48\l}"];
	Node0x5e36590 -> Node0x5e36a00;
	Node0x5e36a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%48:\l48:                                               \l  %49 = phi double [ 0.000000e+00, %42 ], [ %219, %115 ]\l  %50 = phi double [ 0.000000e+00, %42 ], [ %218, %115 ]\l  %51 = phi double [ 0.000000e+00, %42 ], [ %217, %115 ]\l  %52 = phi i32 [ %40, %42 ], [ %116, %115 ]\l  %53 = add nsw i32 %52, %31\l  %54 = add nsw i32 %52, %35\l  %55 = icmp sgt i32 %53, -1\l  %56 = icmp slt i32 %53, %6\l  %57 = icmp sgt i32 %54, -1\l  %58 = icmp slt i32 %54, %8\l  %59 = mul nsw i32 %53, %7\l  %60 = mul nsw i32 %54, %9\l  br label %118\l}"];
	Node0x5e36a00 -> Node0x5e37e60;
	Node0x5e36540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%61:\l61:                                               \l  %62 = phi double [ 0.000000e+00, %24 ], [ %217, %115 ]\l  %63 = phi double [ 0.000000e+00, %24 ], [ %218, %115 ]\l  %64 = phi double [ 0.000000e+00, %24 ], [ %219, %115 ]\l  %65 = fcmp olt double %63, 0x1000000000000000\l  %66 = select i1 %65, double 0x4FF0000000000000, double 1.000000e+00\l  %67 = fmul double %63, %66\l  %68 = tail call double @llvm.amdgcn.rsq.f64(double %67)\l  %69 = fmul double %67, %68\l  %70 = fmul double %68, 5.000000e-01\l  %71 = fneg double %70\l  %72 = tail call double @llvm.fma.f64(double %71, double %69, double\l... 5.000000e-01)\l  %73 = tail call double @llvm.fma.f64(double %70, double %72, double %70)\l  %74 = tail call double @llvm.fma.f64(double %69, double %72, double %69)\l  %75 = fneg double %74\l  %76 = tail call double @llvm.fma.f64(double %75, double %74, double %67)\l  %77 = tail call double @llvm.fma.f64(double %76, double %73, double %74)\l  %78 = fneg double %77\l  %79 = tail call double @llvm.fma.f64(double %78, double %77, double %67)\l  %80 = tail call double @llvm.fma.f64(double %79, double %73, double %77)\l  %81 = select i1 %65, double 0x37F0000000000000, double 1.000000e+00\l  %82 = fmul double %81, %80\l  %83 = fcmp oeq double %67, 0.000000e+00\l  %84 = fcmp oeq double %67, 0x7FF0000000000000\l  %85 = or i1 %83, %84\l  %86 = select i1 %85, double %67, double %82\l  %87 = fcmp olt double %62, 0x1000000000000000\l  %88 = select i1 %87, double 0x4FF0000000000000, double 1.000000e+00\l  %89 = fmul double %62, %88\l  %90 = tail call double @llvm.amdgcn.rsq.f64(double %89)\l  %91 = fmul double %89, %90\l  %92 = fmul double %90, 5.000000e-01\l  %93 = fneg double %92\l  %94 = tail call double @llvm.fma.f64(double %93, double %91, double\l... 5.000000e-01)\l  %95 = tail call double @llvm.fma.f64(double %92, double %94, double %92)\l  %96 = tail call double @llvm.fma.f64(double %91, double %94, double %91)\l  %97 = fneg double %96\l  %98 = tail call double @llvm.fma.f64(double %97, double %96, double %89)\l  %99 = tail call double @llvm.fma.f64(double %98, double %95, double %96)\l  %100 = fneg double %99\l  %101 = tail call double @llvm.fma.f64(double %100, double %99, double %89)\l  %102 = tail call double @llvm.fma.f64(double %101, double %95, double %99)\l  %103 = select i1 %87, double 0x37F0000000000000, double 1.000000e+00\l  %104 = fmul double %103, %102\l  %105 = fcmp oeq double %89, 0.000000e+00\l  %106 = fcmp oeq double %89, 0x7FF0000000000000\l  %107 = or i1 %105, %106\l  %108 = select i1 %107, double %89, double %104\l  %109 = fmul contract double %108, %86\l  %110 = fadd contract double %109, 1.000000e-09\l  %111 = fdiv contract double %64, %110\l  %112 = fptrunc double %111 to float\l  %113 = sext i32 %19 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %2, i64 %113\l  store float %112, float addrspace(1)* %114, align 4, !tbaa !7\l  br label %222\l}"];
	Node0x5e36540 -> Node0x5e35980;
	Node0x5e37540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%115:\l115:                                              \l  %116 = add nsw i32 %52, %4\l  %117 = icmp sgt i32 %116, %39\l  br i1 %117, label %61, label %48, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5e37540:s0 -> Node0x5e36540;
	Node0x5e37540:s1 -> Node0x5e36a00;
	Node0x5e37e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%118:\l118:                                              \l  %119 = phi double [ %49, %48 ], [ %219, %216 ]\l  %120 = phi double [ %50, %48 ], [ %218, %216 ]\l  %121 = phi double [ %51, %48 ], [ %217, %216 ]\l  %122 = phi i32 [ %40, %48 ], [ %220, %216 ]\l  %123 = add nsw i32 %122, %33\l  %124 = add nsw i32 %122, %37\l  %125 = icmp sgt i32 %123, -1\l  %126 = icmp slt i32 %123, %7\l  %127 = select i1 %125, i1 %126, i1 false\l  %128 = select i1 %127, i1 %55, i1 false\l  %129 = icmp sgt i32 %124, -1\l  %130 = select i1 %128, i1 %56, i1 false\l  %131 = select i1 %130, i1 %129, i1 false\l  br i1 %131, label %132, label %216\l|{<s0>T|<s1>F}}"];
	Node0x5e37e60:s0 -> Node0x5e38360;
	Node0x5e37e60:s1 -> Node0x5e3b220;
	Node0x5e38360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%132:\l132:                                              \l  %133 = icmp slt i32 %124, %9\l  %134 = select i1 %133, i1 %57, i1 false\l  %135 = select i1 %134, i1 %58, i1 false\l  br i1 %135, label %136, label %216\l|{<s0>T|<s1>F}}"];
	Node0x5e38360:s0 -> Node0x5e38530;
	Node0x5e38360:s1 -> Node0x5e3b220;
	Node0x5e38530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%136:\l136:                                              \l  %137 = add nsw i32 %123, %59\l  %138 = add nsw i32 %124, %60\l  br i1 %43, label %139, label %216\l|{<s0>T|<s1>F}}"];
	Node0x5e38530:s0 -> Node0x5e3c450;
	Node0x5e38530:s1 -> Node0x5e3b220;
	Node0x5e3c450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%139:\l139:                                              \l  br i1 %45, label %188, label %140\l|{<s0>T|<s1>F}}"];
	Node0x5e3c450:s0 -> Node0x5e3c550;
	Node0x5e3c450:s1 -> Node0x5e3c5a0;
	Node0x5e3c5a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%140:\l140:                                              \l  %141 = phi double [ %178, %140 ], [ %119, %139 ]\l  %142 = phi double [ %181, %140 ], [ %120, %139 ]\l  %143 = phi i32 [ %185, %140 ], [ 0, %139 ]\l  %144 = phi double [ %184, %140 ], [ %121, %139 ]\l  %145 = phi i32 [ %186, %140 ], [ 0, %139 ]\l  %146 = mul nsw i32 %143, %20\l  %147 = add nsw i32 %137, %146\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %151 = mul nsw i32 %143, %21\l  %152 = add nsw i32 %138, %151\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %1, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = fmul contract float %150, %155\l  %157 = fpext float %156 to double\l  %158 = fadd contract double %141, %157\l  %159 = fmul contract float %150, %150\l  %160 = fpext float %159 to double\l  %161 = fadd contract double %142, %160\l  %162 = fmul contract float %155, %155\l  %163 = fpext float %162 to double\l  %164 = fadd contract double %144, %163\l  %165 = or i32 %143, 1\l  %166 = mul nsw i32 %165, %20\l  %167 = add nsw i32 %137, %166\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %0, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %171 = mul nsw i32 %165, %21\l  %172 = add nsw i32 %138, %171\l  %173 = sext i32 %172 to i64\l  %174 = getelementptr inbounds float, float addrspace(1)* %1, i64 %173\l  %175 = load float, float addrspace(1)* %174, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %176 = fmul contract float %170, %175\l  %177 = fpext float %176 to double\l  %178 = fadd contract double %158, %177\l  %179 = fmul contract float %170, %170\l  %180 = fpext float %179 to double\l  %181 = fadd contract double %161, %180\l  %182 = fmul contract float %175, %175\l  %183 = fpext float %182 to double\l  %184 = fadd contract double %164, %183\l  %185 = add nuw nsw i32 %143, 2\l  %186 = add i32 %145, 2\l  %187 = icmp eq i32 %186, %46\l  br i1 %187, label %188, label %140, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5e3c5a0:s0 -> Node0x5e3c550;
	Node0x5e3c5a0:s1 -> Node0x5e3c5a0;
	Node0x5e3c550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%188:\l188:                                              \l  %189 = phi double [ undef, %139 ], [ %178, %140 ]\l  %190 = phi double [ undef, %139 ], [ %181, %140 ]\l  %191 = phi double [ undef, %139 ], [ %184, %140 ]\l  %192 = phi double [ %119, %139 ], [ %178, %140 ]\l  %193 = phi double [ %120, %139 ], [ %181, %140 ]\l  %194 = phi i32 [ 0, %139 ], [ %185, %140 ]\l  %195 = phi double [ %121, %139 ], [ %184, %140 ]\l  br i1 %47, label %216, label %196\l|{<s0>T|<s1>F}}"];
	Node0x5e3c550:s0 -> Node0x5e3b220;
	Node0x5e3c550:s1 -> Node0x5e3f970;
	Node0x5e3f970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%196:\l196:                                              \l  %197 = mul nsw i32 %194, %20\l  %198 = add nsw i32 %137, %197\l  %199 = sext i32 %198 to i64\l  %200 = getelementptr inbounds float, float addrspace(1)* %0, i64 %199\l  %201 = load float, float addrspace(1)* %200, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %202 = mul nsw i32 %194, %21\l  %203 = add nsw i32 %138, %202\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %1, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %207 = fmul contract float %201, %206\l  %208 = fpext float %207 to double\l  %209 = fadd contract double %192, %208\l  %210 = fmul contract float %201, %201\l  %211 = fpext float %210 to double\l  %212 = fadd contract double %193, %211\l  %213 = fmul contract float %206, %206\l  %214 = fpext float %213 to double\l  %215 = fadd contract double %195, %214\l  br label %216\l}"];
	Node0x5e3f970 -> Node0x5e3b220;
	Node0x5e3b220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%216:\l216:                                              \l  %217 = phi double [ %121, %132 ], [ %121, %118 ], [ %121, %136 ], [ %191,\l... %188 ], [ %215, %196 ]\l  %218 = phi double [ %120, %132 ], [ %120, %118 ], [ %120, %136 ], [ %190,\l... %188 ], [ %212, %196 ]\l  %219 = phi double [ %119, %132 ], [ %119, %118 ], [ %119, %136 ], [ %189,\l... %188 ], [ %209, %196 ]\l  %220 = add nsw i32 %122, %4\l  %221 = icmp sgt i32 %220, %39\l  br i1 %221, label %115, label %118, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5e3b220:s0 -> Node0x5e37540;
	Node0x5e3b220:s1 -> Node0x5e37e60;
	Node0x5e35980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%222:\l222:                                              \l  ret void\l}"];
}
