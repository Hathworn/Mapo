digraph "CFG for '_Z26gpu_array_dot_product_r4__mPKfS0_PVf' function" {
	label="CFG for '_Z26gpu_array_dot_product_r4__mPKfS0_PVf' function";

	Node0x6061ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%4:\l  %5 = addrspacecast float addrspace(1)* %3 to float*\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = mul i32 %6, %11\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %17 = add i32 %15, %16\l  %18 = zext i32 %17 to i64\l  %19 = icmp ult i64 %18, %0\l  br i1 %19, label %20, label %39\l|{<s0>T|<s1>F}}"];
	Node0x6061ec0:s0 -> Node0x6063bd0;
	Node0x6061ec0:s1 -> Node0x6063c60;
	Node0x6063bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%20:\l20:                                               \l  %21 = udiv i32 %14, %11\l  %22 = mul i32 %21, %11\l  %23 = icmp ugt i32 %14, %22\l  %24 = zext i1 %23 to i32\l  %25 = add i32 %21, %24\l  %26 = mul i32 %25, %11\l  %27 = zext i32 %26 to i64\l  br label %28\l}"];
	Node0x6063bd0 -> Node0x6064150;
	Node0x6064150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%28:\l28:                                               \l  %29 = phi float [ 0.000000e+00, %20 ], [ %36, %28 ]\l  %30 = phi i64 [ %18, %20 ], [ %37, %28 ]\l  %31 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %33 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %35 = fmul contract float %32, %34\l  %36 = fadd contract float %29, %35\l  %37 = add i64 %30, %27\l  %38 = icmp ult i64 %37, %0\l  br i1 %38, label %28, label %39, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6064150:s0 -> Node0x6064150;
	Node0x6064150:s1 -> Node0x6063c60;
	Node0x6063c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%39:\l39:                                               \l  %40 = phi float [ 0.000000e+00, %4 ], [ %36, %28 ]\l  %41 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @dprs_r4, i32 0, i32 %16\l  store float %40, float addrspace(3)* %41, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %42 = icmp ugt i16 %10, 1\l  br i1 %42, label %43, label %57\l|{<s0>T|<s1>F}}"];
	Node0x6063c60:s0 -> Node0x6066860;
	Node0x6063c60:s1 -> Node0x60668b0;
	Node0x6066860 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %45, %55 ], [ 1, %39 ]\l  %45 = shl nsw i32 %44, 1\l  %46 = mul i32 %45, %16\l  %47 = add nsw i32 %46, %44\l  %48 = icmp ult i32 %47, %11\l  br i1 %48, label %49, label %55\l|{<s0>T|<s1>F}}"];
	Node0x6066860:s0 -> Node0x6066dd0;
	Node0x6066860:s1 -> Node0x6066a20;
	Node0x6066dd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%49:\l49:                                               \l  %50 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @dprs_r4, i32 0, i32 %47\l  %51 = load float, float addrspace(3)* %50, align 4, !tbaa !16\l  %52 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @dprs_r4, i32 0, i32 %46\l  %53 = load float, float addrspace(3)* %52, align 4, !tbaa !16\l  %54 = fadd contract float %51, %53\l  store float %54, float addrspace(3)* %52, align 4, !tbaa !16\l  br label %55\l}"];
	Node0x6066dd0 -> Node0x6066a20;
	Node0x6066a20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = icmp ult i32 %45, %11\l  br i1 %56, label %43, label %57, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x6066a20:s0 -> Node0x6066860;
	Node0x6066a20:s1 -> Node0x60668b0;
	Node0x60668b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%57:\l57:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %58 = icmp eq i32 %16, 0\l  br i1 %58, label %59, label %67\l|{<s0>T|<s1>F}}"];
	Node0x60668b0:s0 -> Node0x6067700;
	Node0x60668b0:s1 -> Node0x6067750;
	Node0x6067700 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%59:\l59:                                               \l  %60 = atomicrmw max i32 addrspace(1)* @dot_product_wr_lock, i32 1\l... syncscope(\"agent-one-as\") monotonic, align 4\l  %61 = icmp eq i32 %60, 1\l  br i1 %61, label %59, label %62, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x6067700:s0 -> Node0x6067700;
	Node0x6067700:s1 -> Node0x60679b0;
	Node0x60679b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%62:\l62:                                               \l  %63 = load float, float addrspace(3)* getelementptr inbounds ([0 x float],\l... [0 x float] addrspace(3)* @dprs_r4, i32 0, i32 0), align 4, !tbaa !16\l  %64 = load volatile float, float* %5, align 4, !tbaa !16\l  %65 = fadd contract float %63, %64\l  store volatile float %65, float* %5, align 4, !tbaa !16\l  fence syncscope(\"agent\") seq_cst\l  %66 = atomicrmw xchg i32 addrspace(1)* @dot_product_wr_lock, i32 0\l... syncscope(\"agent-one-as\") monotonic, align 4\l  br label %67\l}"];
	Node0x60679b0 -> Node0x6067750;
	Node0x6067750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%67:\l67:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
}
