; ModuleID = '../data/hip_kernels/13201/4/main.cu'
source_filename = "../data/hip_kernels/13201/4/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z18fillAndAddKernelV2PfS_S_(float addrspace(1)* nocapture writeonly %0, float addrspace(1)* nocapture %1, float addrspace(1)* nocapture writeonly %2) local_unnamed_addr #0 {
  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4
  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*
  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6
  %10 = zext i16 %9 to i32
  %11 = mul i32 %5, %10
  %12 = add i32 %11, %4
  %13 = sitofp i32 %12 to double
  %14 = tail call double @llvm.fabs.f64(double %13)
  %15 = fcmp olt double %14, 0x41D0000000000000
  br i1 %15, label %16, label %35

16:                                               ; preds = %3
  %17 = fmul double %14, 0x3FE45F306DC9C883
  %18 = tail call double @llvm.rint.f64(double %17)
  %19 = tail call double @llvm.fma.f64(double %18, double 0xBFF921FB54442D18, double %14)
  %20 = tail call double @llvm.fma.f64(double %18, double 0xBC91A62633145C00, double %19)
  %21 = fmul double %18, 0x3C91A62633145C00
  %22 = fneg double %21
  %23 = tail call double @llvm.fma.f64(double %18, double 0x3C91A62633145C00, double %22)
  %24 = fsub double %19, %21
  %25 = fsub double %19, %24
  %26 = fsub double %25, %21
  %27 = fsub double %24, %20
  %28 = fadd double %27, %26
  %29 = fsub double %28, %23
  %30 = tail call double @llvm.fma.f64(double %18, double 0xB97B839A252049C0, double %29)
  %31 = fadd double %20, %30
  %32 = fsub double %31, %20
  %33 = fsub double %30, %32
  %34 = fptosi double %18 to i32
  br label %111

35:                                               ; preds = %3
  %36 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 0)
  %37 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 1)
  %38 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 2)
  %39 = fcmp oge double %14, 0x7B00000000000000
  %40 = tail call double @llvm.amdgcn.ldexp.f64(double %14, i32 -128)
  %41 = select i1 %39, double %40, double %14
  %42 = fmul double %38, %41
  %43 = fneg double %42
  %44 = tail call double @llvm.fma.f64(double %38, double %41, double %43)
  %45 = fmul double %37, %41
  %46 = fneg double %45
  %47 = tail call double @llvm.fma.f64(double %37, double %41, double %46)
  %48 = fmul double %36, %41
  %49 = fneg double %48
  %50 = tail call double @llvm.fma.f64(double %36, double %41, double %49)
  %51 = fadd double %45, %50
  %52 = fsub double %51, %45
  %53 = fsub double %51, %52
  %54 = fsub double %50, %52
  %55 = fsub double %45, %53
  %56 = fadd double %54, %55
  %57 = fadd double %42, %47
  %58 = fsub double %57, %42
  %59 = fsub double %57, %58
  %60 = fsub double %47, %58
  %61 = fsub double %42, %59
  %62 = fadd double %60, %61
  %63 = fadd double %57, %56
  %64 = fsub double %63, %57
  %65 = fsub double %63, %64
  %66 = fsub double %56, %64
  %67 = fsub double %57, %65
  %68 = fadd double %66, %67
  %69 = fadd double %62, %68
  %70 = fadd double %44, %69
  %71 = fadd double %48, %51
  %72 = fsub double %71, %48
  %73 = fsub double %51, %72
  %74 = fadd double %73, %63
  %75 = fsub double %74, %73
  %76 = fsub double %63, %75
  %77 = fadd double %76, %70
  %78 = tail call double @llvm.amdgcn.ldexp.f64(double %71, i32 -2)
  %79 = tail call double @llvm.amdgcn.fract.f64(double %78)
  %80 = tail call i1 @llvm.amdgcn.class.f64(double %78, i32 516)
  %81 = select i1 %80, double 0.000000e+00, double %79
  %82 = tail call double @llvm.amdgcn.ldexp.f64(double %81, i32 2)
  %83 = fadd double %82, %74
  %84 = fcmp olt double %83, 0.000000e+00
  %85 = select i1 %84, double 4.000000e+00, double 0.000000e+00
  %86 = fadd double %82, %85
  %87 = fadd double %74, %86
  %88 = fptosi double %87 to i32
  %89 = sitofp i32 %88 to double
  %90 = fsub double %86, %89
  %91 = fadd double %74, %90
  %92 = fsub double %91, %90
  %93 = fsub double %74, %92
  %94 = fadd double %77, %93
  %95 = fcmp oge double %91, 5.000000e-01
  %96 = zext i1 %95 to i32
  %97 = add nsw i32 %96, %88
  %98 = select i1 %95, double 1.000000e+00, double 0.000000e+00
  %99 = fsub double %91, %98
  %100 = fadd double %99, %94
  %101 = fsub double %100, %99
  %102 = fsub double %94, %101
  %103 = fmul double %100, 0x3FF921FB54442D18
  %104 = fneg double %103
  %105 = tail call double @llvm.fma.f64(double %100, double 0x3FF921FB54442D18, double %104)
  %106 = tail call double @llvm.fma.f64(double %100, double 0x3C91A62633145C07, double %105)
  %107 = tail call double @llvm.fma.f64(double %102, double 0x3FF921FB54442D18, double %106)
  %108 = fadd double %103, %107
  %109 = fsub double %108, %103
  %110 = fsub double %107, %109
  br label %111

111:                                              ; preds = %16, %35
  %112 = phi double [ %33, %16 ], [ %110, %35 ]
  %113 = phi double [ %31, %16 ], [ %108, %35 ]
  %114 = phi i32 [ %34, %16 ], [ %97, %35 ]
  %115 = fmul double %113, %113
  %116 = fmul double %115, 5.000000e-01
  %117 = fsub double 1.000000e+00, %116
  %118 = fsub double 1.000000e+00, %117
  %119 = fsub double %118, %116
  %120 = fmul double %115, %115
  %121 = tail call double @llvm.fma.f64(double %115, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %122 = tail call double @llvm.fma.f64(double %115, double %121, double 0xBE927E4FA17F65F6)
  %123 = tail call double @llvm.fma.f64(double %115, double %122, double 0x3EFA01A019F4EC90)
  %124 = tail call double @llvm.fma.f64(double %115, double %123, double 0xBF56C16C16C16967)
  %125 = tail call double @llvm.fma.f64(double %115, double %124, double 0x3FA5555555555555)
  %126 = fneg double %112
  %127 = tail call double @llvm.fma.f64(double %113, double %126, double %119)
  %128 = tail call double @llvm.fma.f64(double %120, double %125, double %127)
  %129 = fadd double %117, %128
  %130 = tail call double @llvm.fma.f64(double %115, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %131 = tail call double @llvm.fma.f64(double %115, double %130, double 0x3EC71DE3796CDE01)
  %132 = tail call double @llvm.fma.f64(double %115, double %131, double 0xBF2A01A019E83E5C)
  %133 = tail call double @llvm.fma.f64(double %115, double %132, double 0x3F81111111110BB3)
  %134 = fneg double %115
  %135 = fmul double %113, %134
  %136 = fmul double %112, 5.000000e-01
  %137 = tail call double @llvm.fma.f64(double %135, double %133, double %136)
  %138 = tail call double @llvm.fma.f64(double %115, double %137, double %126)
  %139 = tail call double @llvm.fma.f64(double %135, double 0xBFC5555555555555, double %138)
  %140 = fsub double %113, %139
  %141 = and i32 %114, 1
  %142 = icmp eq i32 %141, 0
  %143 = select i1 %142, double %140, double %129
  %144 = bitcast double %143 to <2 x i32>
  %145 = shl i32 %114, 30
  %146 = bitcast double %13 to <2 x i32>
  %147 = extractelement <2 x i32> %146, i64 1
  %148 = xor i32 %145, %147
  %149 = and i32 %148, -2147483648
  %150 = extractelement <2 x i32> %144, i64 1
  %151 = xor i32 %150, %149
  %152 = insertelement <2 x i32> %144, i32 %151, i64 1
  %153 = tail call i1 @llvm.amdgcn.class.f64(double %14, i32 504)
  %154 = select i1 %153, <2 x i32> %152, <2 x i32> <i32 0, i32 2146959360>
  %155 = bitcast <2 x i32> %154 to double
  br i1 %15, label %156, label %261

156:                                              ; preds = %111
  %157 = fmul double %14, 0x3FE45F306DC9C883
  %158 = tail call double @llvm.rint.f64(double %157)
  %159 = tail call double @llvm.fma.f64(double %158, double 0xBFF921FB54442D18, double %14)
  %160 = tail call double @llvm.fma.f64(double %158, double 0xBC91A62633145C00, double %159)
  %161 = fmul double %158, 0x3C91A62633145C00
  %162 = fneg double %161
  %163 = tail call double @llvm.fma.f64(double %158, double 0x3C91A62633145C00, double %162)
  %164 = fsub double %159, %161
  %165 = fsub double %159, %164
  %166 = fsub double %165, %161
  %167 = fsub double %164, %160
  %168 = fadd double %167, %166
  %169 = fsub double %168, %163
  %170 = tail call double @llvm.fma.f64(double %158, double 0xB97B839A252049C0, double %169)
  %171 = fadd double %160, %170
  %172 = fsub double %171, %160
  %173 = fsub double %170, %172
  %174 = fptosi double %158 to i32
  %175 = fmul double %171, %171
  %176 = fmul double %175, 5.000000e-01
  %177 = fsub double 1.000000e+00, %176
  %178 = fsub double 1.000000e+00, %177
  %179 = fsub double %178, %176
  %180 = fmul double %175, %175
  %181 = tail call double @llvm.fma.f64(double %175, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %182 = tail call double @llvm.fma.f64(double %175, double %181, double 0xBE927E4FA17F65F6)
  %183 = tail call double @llvm.fma.f64(double %175, double %182, double 0x3EFA01A019F4EC90)
  %184 = tail call double @llvm.fma.f64(double %175, double %183, double 0xBF56C16C16C16967)
  %185 = tail call double @llvm.fma.f64(double %175, double %184, double 0x3FA5555555555555)
  %186 = fneg double %173
  %187 = tail call double @llvm.fma.f64(double %171, double %186, double %179)
  %188 = tail call double @llvm.fma.f64(double %180, double %185, double %187)
  %189 = fadd double %177, %188
  %190 = tail call double @llvm.fma.f64(double %175, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %191 = tail call double @llvm.fma.f64(double %175, double %190, double 0x3EC71DE3796CDE01)
  %192 = tail call double @llvm.fma.f64(double %175, double %191, double 0xBF2A01A019E83E5C)
  %193 = tail call double @llvm.fma.f64(double %175, double %192, double 0x3F81111111110BB3)
  %194 = fneg double %175
  %195 = fmul double %171, %194
  %196 = fmul double %173, 5.000000e-01
  %197 = tail call double @llvm.fma.f64(double %195, double %193, double %196)
  %198 = tail call double @llvm.fma.f64(double %175, double %197, double %186)
  %199 = tail call double @llvm.fma.f64(double %195, double 0xBFC5555555555555, double %198)
  %200 = fsub double %171, %199
  %201 = and i32 %174, 1
  %202 = icmp eq i32 %201, 0
  %203 = select i1 %202, double %200, double %189
  %204 = bitcast double %203 to <2 x i32>
  %205 = shl i32 %174, 30
  %206 = xor i32 %205, %147
  %207 = and i32 %206, -2147483648
  %208 = extractelement <2 x i32> %204, i64 1
  %209 = xor i32 %208, %207
  %210 = insertelement <2 x i32> %204, i32 %209, i64 1
  %211 = select i1 %153, <2 x i32> %210, <2 x i32> <i32 0, i32 2146959360>
  %212 = bitcast <2 x i32> %211 to double
  %213 = fmul contract double %155, %212
  %214 = fptrunc double %213 to float
  %215 = sext i32 %12 to i64
  %216 = getelementptr inbounds float, float addrspace(1)* %1, i64 %215
  store float %214, float addrspace(1)* %216, align 4, !tbaa !7
  %217 = fmul double %14, 0x3FE45F306DC9C883
  %218 = tail call double @llvm.rint.f64(double %217)
  %219 = tail call double @llvm.fma.f64(double %218, double 0xBFF921FB54442D18, double %14)
  %220 = tail call double @llvm.fma.f64(double %218, double 0xBC91A62633145C00, double %219)
  %221 = fmul double %218, 0x3C91A62633145C00
  %222 = fneg double %221
  %223 = tail call double @llvm.fma.f64(double %218, double 0x3C91A62633145C00, double %222)
  %224 = fsub double %219, %221
  %225 = fsub double %219, %224
  %226 = fsub double %225, %221
  %227 = fsub double %224, %220
  %228 = fadd double %227, %226
  %229 = fsub double %228, %223
  %230 = tail call double @llvm.fma.f64(double %218, double 0xB97B839A252049C0, double %229)
  %231 = fadd double %220, %230
  %232 = fsub double %231, %220
  %233 = fsub double %230, %232
  %234 = fptosi double %218 to i32
  %235 = fmul double %231, %231
  %236 = fmul double %235, 5.000000e-01
  %237 = fsub double 1.000000e+00, %236
  %238 = fsub double 1.000000e+00, %237
  %239 = fsub double %238, %236
  %240 = fmul double %235, %235
  %241 = tail call double @llvm.fma.f64(double %235, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %242 = tail call double @llvm.fma.f64(double %235, double %241, double 0xBE927E4FA17F65F6)
  %243 = tail call double @llvm.fma.f64(double %235, double %242, double 0x3EFA01A019F4EC90)
  %244 = tail call double @llvm.fma.f64(double %235, double %243, double 0xBF56C16C16C16967)
  %245 = tail call double @llvm.fma.f64(double %235, double %244, double 0x3FA5555555555555)
  %246 = fneg double %233
  %247 = tail call double @llvm.fma.f64(double %231, double %246, double %239)
  %248 = tail call double @llvm.fma.f64(double %240, double %245, double %247)
  %249 = fadd double %237, %248
  %250 = tail call double @llvm.fma.f64(double %235, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %251 = tail call double @llvm.fma.f64(double %235, double %250, double 0x3EC71DE3796CDE01)
  %252 = tail call double @llvm.fma.f64(double %235, double %251, double 0xBF2A01A019E83E5C)
  %253 = tail call double @llvm.fma.f64(double %235, double %252, double 0x3F81111111110BB3)
  %254 = fneg double %235
  %255 = fmul double %231, %254
  %256 = fmul double %233, 5.000000e-01
  %257 = tail call double @llvm.fma.f64(double %255, double %253, double %256)
  %258 = tail call double @llvm.fma.f64(double %235, double %257, double %246)
  %259 = tail call double @llvm.fma.f64(double %255, double 0xBFC5555555555555, double %258)
  %260 = fsub double %231, %259
  br label %480

261:                                              ; preds = %111
  %262 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 0)
  %263 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 1)
  %264 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 2)
  %265 = fcmp oge double %14, 0x7B00000000000000
  %266 = tail call double @llvm.amdgcn.ldexp.f64(double %14, i32 -128)
  %267 = select i1 %265, double %266, double %14
  %268 = fmul double %264, %267
  %269 = fneg double %268
  %270 = tail call double @llvm.fma.f64(double %264, double %267, double %269)
  %271 = fmul double %263, %267
  %272 = fneg double %271
  %273 = tail call double @llvm.fma.f64(double %263, double %267, double %272)
  %274 = fmul double %262, %267
  %275 = fneg double %274
  %276 = tail call double @llvm.fma.f64(double %262, double %267, double %275)
  %277 = fadd double %271, %276
  %278 = fsub double %277, %271
  %279 = fsub double %277, %278
  %280 = fsub double %276, %278
  %281 = fsub double %271, %279
  %282 = fadd double %280, %281
  %283 = fadd double %268, %273
  %284 = fsub double %283, %268
  %285 = fsub double %283, %284
  %286 = fsub double %273, %284
  %287 = fsub double %268, %285
  %288 = fadd double %286, %287
  %289 = fadd double %283, %282
  %290 = fsub double %289, %283
  %291 = fsub double %289, %290
  %292 = fsub double %282, %290
  %293 = fsub double %283, %291
  %294 = fadd double %292, %293
  %295 = fadd double %288, %294
  %296 = fadd double %270, %295
  %297 = fadd double %274, %277
  %298 = fsub double %297, %274
  %299 = fsub double %277, %298
  %300 = fadd double %299, %289
  %301 = fsub double %300, %299
  %302 = fsub double %289, %301
  %303 = fadd double %302, %296
  %304 = tail call double @llvm.amdgcn.ldexp.f64(double %297, i32 -2)
  %305 = tail call double @llvm.amdgcn.fract.f64(double %304)
  %306 = tail call i1 @llvm.amdgcn.class.f64(double %304, i32 516)
  %307 = select i1 %306, double 0.000000e+00, double %305
  %308 = tail call double @llvm.amdgcn.ldexp.f64(double %307, i32 2)
  %309 = fadd double %308, %300
  %310 = fcmp olt double %309, 0.000000e+00
  %311 = select i1 %310, double 4.000000e+00, double 0.000000e+00
  %312 = fadd double %308, %311
  %313 = fadd double %300, %312
  %314 = fptosi double %313 to i32
  %315 = sitofp i32 %314 to double
  %316 = fsub double %312, %315
  %317 = fadd double %300, %316
  %318 = fsub double %317, %316
  %319 = fsub double %300, %318
  %320 = fadd double %303, %319
  %321 = fcmp oge double %317, 5.000000e-01
  %322 = zext i1 %321 to i32
  %323 = add nsw i32 %322, %314
  %324 = select i1 %321, double 1.000000e+00, double 0.000000e+00
  %325 = fsub double %317, %324
  %326 = fadd double %325, %320
  %327 = fsub double %326, %325
  %328 = fsub double %320, %327
  %329 = fmul double %326, 0x3FF921FB54442D18
  %330 = fneg double %329
  %331 = tail call double @llvm.fma.f64(double %326, double 0x3FF921FB54442D18, double %330)
  %332 = tail call double @llvm.fma.f64(double %326, double 0x3C91A62633145C07, double %331)
  %333 = tail call double @llvm.fma.f64(double %328, double 0x3FF921FB54442D18, double %332)
  %334 = fadd double %329, %333
  %335 = fsub double %334, %329
  %336 = fsub double %333, %335
  %337 = fmul double %334, %334
  %338 = fmul double %337, 5.000000e-01
  %339 = fsub double 1.000000e+00, %338
  %340 = fsub double 1.000000e+00, %339
  %341 = fsub double %340, %338
  %342 = fmul double %337, %337
  %343 = tail call double @llvm.fma.f64(double %337, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %344 = tail call double @llvm.fma.f64(double %337, double %343, double 0xBE927E4FA17F65F6)
  %345 = tail call double @llvm.fma.f64(double %337, double %344, double 0x3EFA01A019F4EC90)
  %346 = tail call double @llvm.fma.f64(double %337, double %345, double 0xBF56C16C16C16967)
  %347 = tail call double @llvm.fma.f64(double %337, double %346, double 0x3FA5555555555555)
  %348 = fneg double %336
  %349 = tail call double @llvm.fma.f64(double %334, double %348, double %341)
  %350 = tail call double @llvm.fma.f64(double %342, double %347, double %349)
  %351 = fadd double %339, %350
  %352 = tail call double @llvm.fma.f64(double %337, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %353 = tail call double @llvm.fma.f64(double %337, double %352, double 0x3EC71DE3796CDE01)
  %354 = tail call double @llvm.fma.f64(double %337, double %353, double 0xBF2A01A019E83E5C)
  %355 = tail call double @llvm.fma.f64(double %337, double %354, double 0x3F81111111110BB3)
  %356 = fneg double %337
  %357 = fmul double %334, %356
  %358 = fmul double %336, 5.000000e-01
  %359 = tail call double @llvm.fma.f64(double %357, double %355, double %358)
  %360 = tail call double @llvm.fma.f64(double %337, double %359, double %348)
  %361 = tail call double @llvm.fma.f64(double %357, double 0xBFC5555555555555, double %360)
  %362 = fsub double %334, %361
  %363 = and i32 %323, 1
  %364 = icmp eq i32 %363, 0
  %365 = select i1 %364, double %362, double %351
  %366 = bitcast double %365 to <2 x i32>
  %367 = shl i32 %323, 30
  %368 = xor i32 %367, %147
  %369 = and i32 %368, -2147483648
  %370 = extractelement <2 x i32> %366, i64 1
  %371 = xor i32 %370, %369
  %372 = insertelement <2 x i32> %366, i32 %371, i64 1
  %373 = select i1 %153, <2 x i32> %372, <2 x i32> <i32 0, i32 2146959360>
  %374 = bitcast <2 x i32> %373 to double
  %375 = fmul contract double %155, %374
  %376 = fptrunc double %375 to float
  %377 = sext i32 %12 to i64
  %378 = getelementptr inbounds float, float addrspace(1)* %1, i64 %377
  store float %376, float addrspace(1)* %378, align 4, !tbaa !7
  %379 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 0)
  %380 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 1)
  %381 = tail call double @llvm.amdgcn.trig.preop.f64(double %14, i32 2)
  %382 = fcmp oge double %14, 0x7B00000000000000
  %383 = tail call double @llvm.amdgcn.ldexp.f64(double %14, i32 -128)
  %384 = select i1 %382, double %383, double %14
  %385 = fmul double %381, %384
  %386 = fneg double %385
  %387 = tail call double @llvm.fma.f64(double %381, double %384, double %386)
  %388 = fmul double %380, %384
  %389 = fneg double %388
  %390 = tail call double @llvm.fma.f64(double %380, double %384, double %389)
  %391 = fmul double %379, %384
  %392 = fneg double %391
  %393 = tail call double @llvm.fma.f64(double %379, double %384, double %392)
  %394 = fadd double %388, %393
  %395 = fsub double %394, %388
  %396 = fsub double %394, %395
  %397 = fsub double %393, %395
  %398 = fsub double %388, %396
  %399 = fadd double %397, %398
  %400 = fadd double %385, %390
  %401 = fsub double %400, %385
  %402 = fsub double %400, %401
  %403 = fsub double %390, %401
  %404 = fsub double %385, %402
  %405 = fadd double %403, %404
  %406 = fadd double %400, %399
  %407 = fsub double %406, %400
  %408 = fsub double %406, %407
  %409 = fsub double %399, %407
  %410 = fsub double %400, %408
  %411 = fadd double %409, %410
  %412 = fadd double %405, %411
  %413 = fadd double %387, %412
  %414 = fadd double %391, %394
  %415 = fsub double %414, %391
  %416 = fsub double %394, %415
  %417 = fadd double %416, %406
  %418 = fsub double %417, %416
  %419 = fsub double %406, %418
  %420 = fadd double %419, %413
  %421 = tail call double @llvm.amdgcn.ldexp.f64(double %414, i32 -2)
  %422 = tail call double @llvm.amdgcn.fract.f64(double %421)
  %423 = tail call i1 @llvm.amdgcn.class.f64(double %421, i32 516)
  %424 = select i1 %423, double 0.000000e+00, double %422
  %425 = tail call double @llvm.amdgcn.ldexp.f64(double %424, i32 2)
  %426 = fadd double %425, %417
  %427 = fcmp olt double %426, 0.000000e+00
  %428 = select i1 %427, double 4.000000e+00, double 0.000000e+00
  %429 = fadd double %425, %428
  %430 = fadd double %417, %429
  %431 = fptosi double %430 to i32
  %432 = sitofp i32 %431 to double
  %433 = fsub double %429, %432
  %434 = fadd double %417, %433
  %435 = fsub double %434, %433
  %436 = fsub double %417, %435
  %437 = fadd double %420, %436
  %438 = fcmp oge double %434, 5.000000e-01
  %439 = zext i1 %438 to i32
  %440 = add nsw i32 %439, %431
  %441 = select i1 %438, double 1.000000e+00, double 0.000000e+00
  %442 = fsub double %434, %441
  %443 = fadd double %442, %437
  %444 = fsub double %443, %442
  %445 = fsub double %437, %444
  %446 = fmul double %443, 0x3FF921FB54442D18
  %447 = fneg double %446
  %448 = tail call double @llvm.fma.f64(double %443, double 0x3FF921FB54442D18, double %447)
  %449 = tail call double @llvm.fma.f64(double %443, double 0x3C91A62633145C07, double %448)
  %450 = tail call double @llvm.fma.f64(double %445, double 0x3FF921FB54442D18, double %449)
  %451 = fadd double %446, %450
  %452 = fsub double %451, %446
  %453 = fsub double %450, %452
  %454 = fmul double %451, %451
  %455 = fmul double %454, 5.000000e-01
  %456 = fsub double 1.000000e+00, %455
  %457 = fsub double 1.000000e+00, %456
  %458 = fsub double %457, %455
  %459 = fmul double %454, %454
  %460 = tail call double @llvm.fma.f64(double %454, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %461 = tail call double @llvm.fma.f64(double %454, double %460, double 0xBE927E4FA17F65F6)
  %462 = tail call double @llvm.fma.f64(double %454, double %461, double 0x3EFA01A019F4EC90)
  %463 = tail call double @llvm.fma.f64(double %454, double %462, double 0xBF56C16C16C16967)
  %464 = tail call double @llvm.fma.f64(double %454, double %463, double 0x3FA5555555555555)
  %465 = fneg double %453
  %466 = tail call double @llvm.fma.f64(double %451, double %465, double %458)
  %467 = tail call double @llvm.fma.f64(double %459, double %464, double %466)
  %468 = fadd double %456, %467
  %469 = tail call double @llvm.fma.f64(double %454, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %470 = tail call double @llvm.fma.f64(double %454, double %469, double 0x3EC71DE3796CDE01)
  %471 = tail call double @llvm.fma.f64(double %454, double %470, double 0xBF2A01A019E83E5C)
  %472 = tail call double @llvm.fma.f64(double %454, double %471, double 0x3F81111111110BB3)
  %473 = fneg double %454
  %474 = fmul double %451, %473
  %475 = fmul double %453, 5.000000e-01
  %476 = tail call double @llvm.fma.f64(double %474, double %472, double %475)
  %477 = tail call double @llvm.fma.f64(double %454, double %476, double %465)
  %478 = tail call double @llvm.fma.f64(double %474, double 0xBFC5555555555555, double %477)
  %479 = fsub double %451, %478
  br label %480

480:                                              ; preds = %156, %261
  %481 = phi float addrspace(1)* [ %216, %156 ], [ %378, %261 ]
  %482 = phi i64 [ %215, %156 ], [ %377, %261 ]
  %483 = phi double [ %260, %156 ], [ %479, %261 ]
  %484 = phi i32 [ %234, %156 ], [ %440, %261 ]
  %485 = phi double [ %249, %156 ], [ %468, %261 ]
  %486 = fneg double %483
  %487 = and i32 %484, 1
  %488 = icmp eq i32 %487, 0
  %489 = select i1 %488, double %485, double %486
  %490 = bitcast double %489 to <2 x i32>
  %491 = shl i32 %484, 30
  %492 = and i32 %491, -2147483648
  %493 = extractelement <2 x i32> %490, i64 1
  %494 = xor i32 %493, %492
  %495 = insertelement <2 x i32> %490, i32 %494, i64 1
  %496 = select i1 %153, <2 x i32> %495, <2 x i32> <i32 0, i32 2146959360>
  %497 = bitcast <2 x i32> %496 to double
  %498 = bitcast <2 x i32> %496 to double
  %499 = fmul contract double %497, %498
  %500 = fptrunc double %499 to float
  %501 = getelementptr inbounds float, float addrspace(1)* %2, i64 %482
  store float %500, float addrspace(1)* %501, align 4, !tbaa !7
  %502 = load float, float addrspace(1)* %481, align 4, !tbaa !7
  %503 = fadd contract float %502, %500
  %504 = getelementptr inbounds float, float addrspace(1)* %0, i64 %482
  store float %503, float addrspace(1)* %504, align 4, !tbaa !7
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{i16 1, i16 1025}
!6 = !{}
!7 = !{!8, !8, i64 0}
!8 = !{!"float", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
