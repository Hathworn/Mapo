; ModuleID = '../data/hip_kernels/13201/3/main.cu'
source_filename = "../data/hip_kernels/13201/3/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define protected amdgpu_kernel void @_Z12fillKernelV2PfS_(float addrspace(1)* nocapture writeonly %0, float addrspace(1)* nocapture writeonly %1) local_unnamed_addr #0 {
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4
  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*
  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6
  %9 = zext i16 %8 to i32
  %10 = mul i32 %4, %9
  %11 = add i32 %10, %3
  %12 = sitofp i32 %11 to double
  %13 = tail call double @llvm.fabs.f64(double %12)
  %14 = fcmp olt double %13, 0x41D0000000000000
  br i1 %14, label %15, label %34

15:                                               ; preds = %2
  %16 = fmul double %13, 0x3FE45F306DC9C883
  %17 = tail call double @llvm.rint.f64(double %16)
  %18 = tail call double @llvm.fma.f64(double %17, double 0xBFF921FB54442D18, double %13)
  %19 = tail call double @llvm.fma.f64(double %17, double 0xBC91A62633145C00, double %18)
  %20 = fmul double %17, 0x3C91A62633145C00
  %21 = fneg double %20
  %22 = tail call double @llvm.fma.f64(double %17, double 0x3C91A62633145C00, double %21)
  %23 = fsub double %18, %20
  %24 = fsub double %18, %23
  %25 = fsub double %24, %20
  %26 = fsub double %23, %19
  %27 = fadd double %26, %25
  %28 = fsub double %27, %22
  %29 = tail call double @llvm.fma.f64(double %17, double 0xB97B839A252049C0, double %28)
  %30 = fadd double %19, %29
  %31 = fsub double %30, %19
  %32 = fsub double %29, %31
  %33 = fptosi double %17 to i32
  br label %110

34:                                               ; preds = %2
  %35 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 0)
  %36 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 1)
  %37 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 2)
  %38 = fcmp oge double %13, 0x7B00000000000000
  %39 = tail call double @llvm.amdgcn.ldexp.f64(double %13, i32 -128)
  %40 = select i1 %38, double %39, double %13
  %41 = fmul double %37, %40
  %42 = fneg double %41
  %43 = tail call double @llvm.fma.f64(double %37, double %40, double %42)
  %44 = fmul double %36, %40
  %45 = fneg double %44
  %46 = tail call double @llvm.fma.f64(double %36, double %40, double %45)
  %47 = fmul double %35, %40
  %48 = fneg double %47
  %49 = tail call double @llvm.fma.f64(double %35, double %40, double %48)
  %50 = fadd double %44, %49
  %51 = fsub double %50, %44
  %52 = fsub double %50, %51
  %53 = fsub double %49, %51
  %54 = fsub double %44, %52
  %55 = fadd double %53, %54
  %56 = fadd double %41, %46
  %57 = fsub double %56, %41
  %58 = fsub double %56, %57
  %59 = fsub double %46, %57
  %60 = fsub double %41, %58
  %61 = fadd double %59, %60
  %62 = fadd double %56, %55
  %63 = fsub double %62, %56
  %64 = fsub double %62, %63
  %65 = fsub double %55, %63
  %66 = fsub double %56, %64
  %67 = fadd double %65, %66
  %68 = fadd double %61, %67
  %69 = fadd double %43, %68
  %70 = fadd double %47, %50
  %71 = fsub double %70, %47
  %72 = fsub double %50, %71
  %73 = fadd double %72, %62
  %74 = fsub double %73, %72
  %75 = fsub double %62, %74
  %76 = fadd double %75, %69
  %77 = tail call double @llvm.amdgcn.ldexp.f64(double %70, i32 -2)
  %78 = tail call double @llvm.amdgcn.fract.f64(double %77)
  %79 = tail call i1 @llvm.amdgcn.class.f64(double %77, i32 516)
  %80 = select i1 %79, double 0.000000e+00, double %78
  %81 = tail call double @llvm.amdgcn.ldexp.f64(double %80, i32 2)
  %82 = fadd double %81, %73
  %83 = fcmp olt double %82, 0.000000e+00
  %84 = select i1 %83, double 4.000000e+00, double 0.000000e+00
  %85 = fadd double %81, %84
  %86 = fadd double %73, %85
  %87 = fptosi double %86 to i32
  %88 = sitofp i32 %87 to double
  %89 = fsub double %85, %88
  %90 = fadd double %73, %89
  %91 = fsub double %90, %89
  %92 = fsub double %73, %91
  %93 = fadd double %76, %92
  %94 = fcmp oge double %90, 5.000000e-01
  %95 = zext i1 %94 to i32
  %96 = add nsw i32 %95, %87
  %97 = select i1 %94, double 1.000000e+00, double 0.000000e+00
  %98 = fsub double %90, %97
  %99 = fadd double %98, %93
  %100 = fsub double %99, %98
  %101 = fsub double %93, %100
  %102 = fmul double %99, 0x3FF921FB54442D18
  %103 = fneg double %102
  %104 = tail call double @llvm.fma.f64(double %99, double 0x3FF921FB54442D18, double %103)
  %105 = tail call double @llvm.fma.f64(double %99, double 0x3C91A62633145C07, double %104)
  %106 = tail call double @llvm.fma.f64(double %101, double 0x3FF921FB54442D18, double %105)
  %107 = fadd double %102, %106
  %108 = fsub double %107, %102
  %109 = fsub double %106, %108
  br label %110

110:                                              ; preds = %15, %34
  %111 = phi double [ %32, %15 ], [ %109, %34 ]
  %112 = phi double [ %30, %15 ], [ %107, %34 ]
  %113 = phi i32 [ %33, %15 ], [ %96, %34 ]
  %114 = fmul double %112, %112
  %115 = fmul double %114, 5.000000e-01
  %116 = fsub double 1.000000e+00, %115
  %117 = fsub double 1.000000e+00, %116
  %118 = fsub double %117, %115
  %119 = fmul double %114, %114
  %120 = tail call double @llvm.fma.f64(double %114, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %121 = tail call double @llvm.fma.f64(double %114, double %120, double 0xBE927E4FA17F65F6)
  %122 = tail call double @llvm.fma.f64(double %114, double %121, double 0x3EFA01A019F4EC90)
  %123 = tail call double @llvm.fma.f64(double %114, double %122, double 0xBF56C16C16C16967)
  %124 = tail call double @llvm.fma.f64(double %114, double %123, double 0x3FA5555555555555)
  %125 = fneg double %111
  %126 = tail call double @llvm.fma.f64(double %112, double %125, double %118)
  %127 = tail call double @llvm.fma.f64(double %119, double %124, double %126)
  %128 = fadd double %116, %127
  %129 = tail call double @llvm.fma.f64(double %114, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %130 = tail call double @llvm.fma.f64(double %114, double %129, double 0x3EC71DE3796CDE01)
  %131 = tail call double @llvm.fma.f64(double %114, double %130, double 0xBF2A01A019E83E5C)
  %132 = tail call double @llvm.fma.f64(double %114, double %131, double 0x3F81111111110BB3)
  %133 = fneg double %114
  %134 = fmul double %112, %133
  %135 = fmul double %111, 5.000000e-01
  %136 = tail call double @llvm.fma.f64(double %134, double %132, double %135)
  %137 = tail call double @llvm.fma.f64(double %114, double %136, double %125)
  %138 = tail call double @llvm.fma.f64(double %134, double 0xBFC5555555555555, double %137)
  %139 = fsub double %112, %138
  %140 = and i32 %113, 1
  %141 = icmp eq i32 %140, 0
  %142 = select i1 %141, double %139, double %128
  %143 = bitcast double %142 to <2 x i32>
  %144 = shl i32 %113, 30
  %145 = bitcast double %12 to <2 x i32>
  %146 = extractelement <2 x i32> %145, i64 1
  %147 = xor i32 %144, %146
  %148 = and i32 %147, -2147483648
  %149 = extractelement <2 x i32> %143, i64 1
  %150 = xor i32 %149, %148
  %151 = insertelement <2 x i32> %143, i32 %150, i64 1
  %152 = tail call i1 @llvm.amdgcn.class.f64(double %13, i32 504)
  %153 = select i1 %152, <2 x i32> %151, <2 x i32> <i32 0, i32 2146959360>
  %154 = bitcast <2 x i32> %153 to double
  br i1 %14, label %155, label %260

155:                                              ; preds = %110
  %156 = fmul double %13, 0x3FE45F306DC9C883
  %157 = tail call double @llvm.rint.f64(double %156)
  %158 = tail call double @llvm.fma.f64(double %157, double 0xBFF921FB54442D18, double %13)
  %159 = tail call double @llvm.fma.f64(double %157, double 0xBC91A62633145C00, double %158)
  %160 = fmul double %157, 0x3C91A62633145C00
  %161 = fneg double %160
  %162 = tail call double @llvm.fma.f64(double %157, double 0x3C91A62633145C00, double %161)
  %163 = fsub double %158, %160
  %164 = fsub double %158, %163
  %165 = fsub double %164, %160
  %166 = fsub double %163, %159
  %167 = fadd double %166, %165
  %168 = fsub double %167, %162
  %169 = tail call double @llvm.fma.f64(double %157, double 0xB97B839A252049C0, double %168)
  %170 = fadd double %159, %169
  %171 = fsub double %170, %159
  %172 = fsub double %169, %171
  %173 = fptosi double %157 to i32
  %174 = fmul double %170, %170
  %175 = fmul double %174, 5.000000e-01
  %176 = fsub double 1.000000e+00, %175
  %177 = fsub double 1.000000e+00, %176
  %178 = fsub double %177, %175
  %179 = fmul double %174, %174
  %180 = tail call double @llvm.fma.f64(double %174, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %181 = tail call double @llvm.fma.f64(double %174, double %180, double 0xBE927E4FA17F65F6)
  %182 = tail call double @llvm.fma.f64(double %174, double %181, double 0x3EFA01A019F4EC90)
  %183 = tail call double @llvm.fma.f64(double %174, double %182, double 0xBF56C16C16C16967)
  %184 = tail call double @llvm.fma.f64(double %174, double %183, double 0x3FA5555555555555)
  %185 = fneg double %172
  %186 = tail call double @llvm.fma.f64(double %170, double %185, double %178)
  %187 = tail call double @llvm.fma.f64(double %179, double %184, double %186)
  %188 = fadd double %176, %187
  %189 = tail call double @llvm.fma.f64(double %174, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %190 = tail call double @llvm.fma.f64(double %174, double %189, double 0x3EC71DE3796CDE01)
  %191 = tail call double @llvm.fma.f64(double %174, double %190, double 0xBF2A01A019E83E5C)
  %192 = tail call double @llvm.fma.f64(double %174, double %191, double 0x3F81111111110BB3)
  %193 = fneg double %174
  %194 = fmul double %170, %193
  %195 = fmul double %172, 5.000000e-01
  %196 = tail call double @llvm.fma.f64(double %194, double %192, double %195)
  %197 = tail call double @llvm.fma.f64(double %174, double %196, double %185)
  %198 = tail call double @llvm.fma.f64(double %194, double 0xBFC5555555555555, double %197)
  %199 = fsub double %170, %198
  %200 = and i32 %173, 1
  %201 = icmp eq i32 %200, 0
  %202 = select i1 %201, double %199, double %188
  %203 = bitcast double %202 to <2 x i32>
  %204 = shl i32 %173, 30
  %205 = xor i32 %204, %146
  %206 = and i32 %205, -2147483648
  %207 = extractelement <2 x i32> %203, i64 1
  %208 = xor i32 %207, %206
  %209 = insertelement <2 x i32> %203, i32 %208, i64 1
  %210 = select i1 %152, <2 x i32> %209, <2 x i32> <i32 0, i32 2146959360>
  %211 = bitcast <2 x i32> %210 to double
  %212 = fmul contract double %154, %211
  %213 = fptrunc double %212 to float
  %214 = sext i32 %11 to i64
  %215 = getelementptr inbounds float, float addrspace(1)* %0, i64 %214
  store float %213, float addrspace(1)* %215, align 4, !tbaa !7
  %216 = fmul double %13, 0x3FE45F306DC9C883
  %217 = tail call double @llvm.rint.f64(double %216)
  %218 = tail call double @llvm.fma.f64(double %217, double 0xBFF921FB54442D18, double %13)
  %219 = tail call double @llvm.fma.f64(double %217, double 0xBC91A62633145C00, double %218)
  %220 = fmul double %217, 0x3C91A62633145C00
  %221 = fneg double %220
  %222 = tail call double @llvm.fma.f64(double %217, double 0x3C91A62633145C00, double %221)
  %223 = fsub double %218, %220
  %224 = fsub double %218, %223
  %225 = fsub double %224, %220
  %226 = fsub double %223, %219
  %227 = fadd double %226, %225
  %228 = fsub double %227, %222
  %229 = tail call double @llvm.fma.f64(double %217, double 0xB97B839A252049C0, double %228)
  %230 = fadd double %219, %229
  %231 = fsub double %230, %219
  %232 = fsub double %229, %231
  %233 = fptosi double %217 to i32
  %234 = fmul double %230, %230
  %235 = fmul double %234, 5.000000e-01
  %236 = fsub double 1.000000e+00, %235
  %237 = fsub double 1.000000e+00, %236
  %238 = fsub double %237, %235
  %239 = fmul double %234, %234
  %240 = tail call double @llvm.fma.f64(double %234, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %241 = tail call double @llvm.fma.f64(double %234, double %240, double 0xBE927E4FA17F65F6)
  %242 = tail call double @llvm.fma.f64(double %234, double %241, double 0x3EFA01A019F4EC90)
  %243 = tail call double @llvm.fma.f64(double %234, double %242, double 0xBF56C16C16C16967)
  %244 = tail call double @llvm.fma.f64(double %234, double %243, double 0x3FA5555555555555)
  %245 = fneg double %232
  %246 = tail call double @llvm.fma.f64(double %230, double %245, double %238)
  %247 = tail call double @llvm.fma.f64(double %239, double %244, double %246)
  %248 = fadd double %236, %247
  %249 = tail call double @llvm.fma.f64(double %234, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %250 = tail call double @llvm.fma.f64(double %234, double %249, double 0x3EC71DE3796CDE01)
  %251 = tail call double @llvm.fma.f64(double %234, double %250, double 0xBF2A01A019E83E5C)
  %252 = tail call double @llvm.fma.f64(double %234, double %251, double 0x3F81111111110BB3)
  %253 = fneg double %234
  %254 = fmul double %230, %253
  %255 = fmul double %232, 5.000000e-01
  %256 = tail call double @llvm.fma.f64(double %254, double %252, double %255)
  %257 = tail call double @llvm.fma.f64(double %234, double %256, double %245)
  %258 = tail call double @llvm.fma.f64(double %254, double 0xBFC5555555555555, double %257)
  %259 = fsub double %230, %258
  br label %479

260:                                              ; preds = %110
  %261 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 0)
  %262 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 1)
  %263 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 2)
  %264 = fcmp oge double %13, 0x7B00000000000000
  %265 = tail call double @llvm.amdgcn.ldexp.f64(double %13, i32 -128)
  %266 = select i1 %264, double %265, double %13
  %267 = fmul double %263, %266
  %268 = fneg double %267
  %269 = tail call double @llvm.fma.f64(double %263, double %266, double %268)
  %270 = fmul double %262, %266
  %271 = fneg double %270
  %272 = tail call double @llvm.fma.f64(double %262, double %266, double %271)
  %273 = fmul double %261, %266
  %274 = fneg double %273
  %275 = tail call double @llvm.fma.f64(double %261, double %266, double %274)
  %276 = fadd double %270, %275
  %277 = fsub double %276, %270
  %278 = fsub double %276, %277
  %279 = fsub double %275, %277
  %280 = fsub double %270, %278
  %281 = fadd double %279, %280
  %282 = fadd double %267, %272
  %283 = fsub double %282, %267
  %284 = fsub double %282, %283
  %285 = fsub double %272, %283
  %286 = fsub double %267, %284
  %287 = fadd double %285, %286
  %288 = fadd double %282, %281
  %289 = fsub double %288, %282
  %290 = fsub double %288, %289
  %291 = fsub double %281, %289
  %292 = fsub double %282, %290
  %293 = fadd double %291, %292
  %294 = fadd double %287, %293
  %295 = fadd double %269, %294
  %296 = fadd double %273, %276
  %297 = fsub double %296, %273
  %298 = fsub double %276, %297
  %299 = fadd double %298, %288
  %300 = fsub double %299, %298
  %301 = fsub double %288, %300
  %302 = fadd double %301, %295
  %303 = tail call double @llvm.amdgcn.ldexp.f64(double %296, i32 -2)
  %304 = tail call double @llvm.amdgcn.fract.f64(double %303)
  %305 = tail call i1 @llvm.amdgcn.class.f64(double %303, i32 516)
  %306 = select i1 %305, double 0.000000e+00, double %304
  %307 = tail call double @llvm.amdgcn.ldexp.f64(double %306, i32 2)
  %308 = fadd double %307, %299
  %309 = fcmp olt double %308, 0.000000e+00
  %310 = select i1 %309, double 4.000000e+00, double 0.000000e+00
  %311 = fadd double %307, %310
  %312 = fadd double %299, %311
  %313 = fptosi double %312 to i32
  %314 = sitofp i32 %313 to double
  %315 = fsub double %311, %314
  %316 = fadd double %299, %315
  %317 = fsub double %316, %315
  %318 = fsub double %299, %317
  %319 = fadd double %302, %318
  %320 = fcmp oge double %316, 5.000000e-01
  %321 = zext i1 %320 to i32
  %322 = add nsw i32 %321, %313
  %323 = select i1 %320, double 1.000000e+00, double 0.000000e+00
  %324 = fsub double %316, %323
  %325 = fadd double %324, %319
  %326 = fsub double %325, %324
  %327 = fsub double %319, %326
  %328 = fmul double %325, 0x3FF921FB54442D18
  %329 = fneg double %328
  %330 = tail call double @llvm.fma.f64(double %325, double 0x3FF921FB54442D18, double %329)
  %331 = tail call double @llvm.fma.f64(double %325, double 0x3C91A62633145C07, double %330)
  %332 = tail call double @llvm.fma.f64(double %327, double 0x3FF921FB54442D18, double %331)
  %333 = fadd double %328, %332
  %334 = fsub double %333, %328
  %335 = fsub double %332, %334
  %336 = fmul double %333, %333
  %337 = fmul double %336, 5.000000e-01
  %338 = fsub double 1.000000e+00, %337
  %339 = fsub double 1.000000e+00, %338
  %340 = fsub double %339, %337
  %341 = fmul double %336, %336
  %342 = tail call double @llvm.fma.f64(double %336, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %343 = tail call double @llvm.fma.f64(double %336, double %342, double 0xBE927E4FA17F65F6)
  %344 = tail call double @llvm.fma.f64(double %336, double %343, double 0x3EFA01A019F4EC90)
  %345 = tail call double @llvm.fma.f64(double %336, double %344, double 0xBF56C16C16C16967)
  %346 = tail call double @llvm.fma.f64(double %336, double %345, double 0x3FA5555555555555)
  %347 = fneg double %335
  %348 = tail call double @llvm.fma.f64(double %333, double %347, double %340)
  %349 = tail call double @llvm.fma.f64(double %341, double %346, double %348)
  %350 = fadd double %338, %349
  %351 = tail call double @llvm.fma.f64(double %336, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %352 = tail call double @llvm.fma.f64(double %336, double %351, double 0x3EC71DE3796CDE01)
  %353 = tail call double @llvm.fma.f64(double %336, double %352, double 0xBF2A01A019E83E5C)
  %354 = tail call double @llvm.fma.f64(double %336, double %353, double 0x3F81111111110BB3)
  %355 = fneg double %336
  %356 = fmul double %333, %355
  %357 = fmul double %335, 5.000000e-01
  %358 = tail call double @llvm.fma.f64(double %356, double %354, double %357)
  %359 = tail call double @llvm.fma.f64(double %336, double %358, double %347)
  %360 = tail call double @llvm.fma.f64(double %356, double 0xBFC5555555555555, double %359)
  %361 = fsub double %333, %360
  %362 = and i32 %322, 1
  %363 = icmp eq i32 %362, 0
  %364 = select i1 %363, double %361, double %350
  %365 = bitcast double %364 to <2 x i32>
  %366 = shl i32 %322, 30
  %367 = xor i32 %366, %146
  %368 = and i32 %367, -2147483648
  %369 = extractelement <2 x i32> %365, i64 1
  %370 = xor i32 %369, %368
  %371 = insertelement <2 x i32> %365, i32 %370, i64 1
  %372 = select i1 %152, <2 x i32> %371, <2 x i32> <i32 0, i32 2146959360>
  %373 = bitcast <2 x i32> %372 to double
  %374 = fmul contract double %154, %373
  %375 = fptrunc double %374 to float
  %376 = sext i32 %11 to i64
  %377 = getelementptr inbounds float, float addrspace(1)* %0, i64 %376
  store float %375, float addrspace(1)* %377, align 4, !tbaa !7
  %378 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 0)
  %379 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 1)
  %380 = tail call double @llvm.amdgcn.trig.preop.f64(double %13, i32 2)
  %381 = fcmp oge double %13, 0x7B00000000000000
  %382 = tail call double @llvm.amdgcn.ldexp.f64(double %13, i32 -128)
  %383 = select i1 %381, double %382, double %13
  %384 = fmul double %380, %383
  %385 = fneg double %384
  %386 = tail call double @llvm.fma.f64(double %380, double %383, double %385)
  %387 = fmul double %379, %383
  %388 = fneg double %387
  %389 = tail call double @llvm.fma.f64(double %379, double %383, double %388)
  %390 = fmul double %378, %383
  %391 = fneg double %390
  %392 = tail call double @llvm.fma.f64(double %378, double %383, double %391)
  %393 = fadd double %387, %392
  %394 = fsub double %393, %387
  %395 = fsub double %393, %394
  %396 = fsub double %392, %394
  %397 = fsub double %387, %395
  %398 = fadd double %396, %397
  %399 = fadd double %384, %389
  %400 = fsub double %399, %384
  %401 = fsub double %399, %400
  %402 = fsub double %389, %400
  %403 = fsub double %384, %401
  %404 = fadd double %402, %403
  %405 = fadd double %399, %398
  %406 = fsub double %405, %399
  %407 = fsub double %405, %406
  %408 = fsub double %398, %406
  %409 = fsub double %399, %407
  %410 = fadd double %408, %409
  %411 = fadd double %404, %410
  %412 = fadd double %386, %411
  %413 = fadd double %390, %393
  %414 = fsub double %413, %390
  %415 = fsub double %393, %414
  %416 = fadd double %415, %405
  %417 = fsub double %416, %415
  %418 = fsub double %405, %417
  %419 = fadd double %418, %412
  %420 = tail call double @llvm.amdgcn.ldexp.f64(double %413, i32 -2)
  %421 = tail call double @llvm.amdgcn.fract.f64(double %420)
  %422 = tail call i1 @llvm.amdgcn.class.f64(double %420, i32 516)
  %423 = select i1 %422, double 0.000000e+00, double %421
  %424 = tail call double @llvm.amdgcn.ldexp.f64(double %423, i32 2)
  %425 = fadd double %424, %416
  %426 = fcmp olt double %425, 0.000000e+00
  %427 = select i1 %426, double 4.000000e+00, double 0.000000e+00
  %428 = fadd double %424, %427
  %429 = fadd double %416, %428
  %430 = fptosi double %429 to i32
  %431 = sitofp i32 %430 to double
  %432 = fsub double %428, %431
  %433 = fadd double %416, %432
  %434 = fsub double %433, %432
  %435 = fsub double %416, %434
  %436 = fadd double %419, %435
  %437 = fcmp oge double %433, 5.000000e-01
  %438 = zext i1 %437 to i32
  %439 = add nsw i32 %438, %430
  %440 = select i1 %437, double 1.000000e+00, double 0.000000e+00
  %441 = fsub double %433, %440
  %442 = fadd double %441, %436
  %443 = fsub double %442, %441
  %444 = fsub double %436, %443
  %445 = fmul double %442, 0x3FF921FB54442D18
  %446 = fneg double %445
  %447 = tail call double @llvm.fma.f64(double %442, double 0x3FF921FB54442D18, double %446)
  %448 = tail call double @llvm.fma.f64(double %442, double 0x3C91A62633145C07, double %447)
  %449 = tail call double @llvm.fma.f64(double %444, double 0x3FF921FB54442D18, double %448)
  %450 = fadd double %445, %449
  %451 = fsub double %450, %445
  %452 = fsub double %449, %451
  %453 = fmul double %450, %450
  %454 = fmul double %453, 5.000000e-01
  %455 = fsub double 1.000000e+00, %454
  %456 = fsub double 1.000000e+00, %455
  %457 = fsub double %456, %454
  %458 = fmul double %453, %453
  %459 = tail call double @llvm.fma.f64(double %453, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %460 = tail call double @llvm.fma.f64(double %453, double %459, double 0xBE927E4FA17F65F6)
  %461 = tail call double @llvm.fma.f64(double %453, double %460, double 0x3EFA01A019F4EC90)
  %462 = tail call double @llvm.fma.f64(double %453, double %461, double 0xBF56C16C16C16967)
  %463 = tail call double @llvm.fma.f64(double %453, double %462, double 0x3FA5555555555555)
  %464 = fneg double %452
  %465 = tail call double @llvm.fma.f64(double %450, double %464, double %457)
  %466 = tail call double @llvm.fma.f64(double %458, double %463, double %465)
  %467 = fadd double %455, %466
  %468 = tail call double @llvm.fma.f64(double %453, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %469 = tail call double @llvm.fma.f64(double %453, double %468, double 0x3EC71DE3796CDE01)
  %470 = tail call double @llvm.fma.f64(double %453, double %469, double 0xBF2A01A019E83E5C)
  %471 = tail call double @llvm.fma.f64(double %453, double %470, double 0x3F81111111110BB3)
  %472 = fneg double %453
  %473 = fmul double %450, %472
  %474 = fmul double %452, 5.000000e-01
  %475 = tail call double @llvm.fma.f64(double %473, double %471, double %474)
  %476 = tail call double @llvm.fma.f64(double %453, double %475, double %464)
  %477 = tail call double @llvm.fma.f64(double %473, double 0xBFC5555555555555, double %476)
  %478 = fsub double %450, %477
  br label %479

479:                                              ; preds = %155, %260
  %480 = phi i64 [ %214, %155 ], [ %376, %260 ]
  %481 = phi double [ %259, %155 ], [ %478, %260 ]
  %482 = phi i32 [ %233, %155 ], [ %439, %260 ]
  %483 = phi double [ %248, %155 ], [ %467, %260 ]
  %484 = fneg double %481
  %485 = and i32 %482, 1
  %486 = icmp eq i32 %485, 0
  %487 = select i1 %486, double %483, double %484
  %488 = bitcast double %487 to <2 x i32>
  %489 = shl i32 %482, 30
  %490 = and i32 %489, -2147483648
  %491 = extractelement <2 x i32> %488, i64 1
  %492 = xor i32 %491, %490
  %493 = insertelement <2 x i32> %488, i32 %492, i64 1
  %494 = select i1 %152, <2 x i32> %493, <2 x i32> <i32 0, i32 2146959360>
  %495 = bitcast <2 x i32> %494 to double
  %496 = bitcast <2 x i32> %494 to double
  %497 = fmul contract double %495, %496
  %498 = fptrunc double %497 to float
  %499 = getelementptr inbounds float, float addrspace(1)* %1, i64 %480
  store float %498, float addrspace(1)* %499, align 4, !tbaa !7
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{i16 1, i16 1025}
!6 = !{}
!7 = !{!8, !8, i64 0}
!8 = !{!"float", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
