digraph "CFG for '_Z22computeVertices_kernelP15HIP_vector_typeIfLj4EEjjf' function" {
	label="CFG for '_Z22computeVertices_kernelP15HIP_vector_typeIfLj4EEjjf' function";

	Node0x5e50cf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = uitofp i32 %13 to float\l  %23 = uitofp i32 %1 to float\l  %24 = fdiv contract float %22, %23\l  %25 = uitofp i32 %21 to float\l  %26 = uitofp i32 %2 to float\l  %27 = fdiv contract float %25, %26\l  %28 = fpext float %24 to double\l  %29 = fmul contract double %28, 2.000000e+00\l  %30 = fadd contract double %29, -1.000000e+00\l  %31 = fptrunc double %30 to float\l  %32 = fpext float %27 to double\l  %33 = fmul contract double %32, 2.000000e+00\l  %34 = fadd contract double %33, -1.000000e+00\l  %35 = fptrunc double %34 to float\l  %36 = fmul contract float %31, 4.000000e+00\l  %37 = fadd contract float %36, %3\l  %38 = tail call float @llvm.fabs.f32(float %37)\l  %39 = fcmp olt float %38, 1.310720e+05\l  br i1 %39, label %40, label %48\l|{<s0>T|<s1>F}}"];
	Node0x5e50cf0:s0 -> Node0x5e55be0;
	Node0x5e50cf0:s1 -> Node0x5e55c70;
	Node0x5e55be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%40:\l40:                                               \l  %41 = fmul float %38, 0x3FE45F3060000000\l  %42 = tail call float @llvm.rint.f32(float %41)\l  %43 = tail call float @llvm.fma.f32(float %42, float 0xBFF921FB40000000,\l... float %38)\l  %44 = tail call float @llvm.fma.f32(float %42, float 0xBE74442D00000000,\l... float %43)\l  %45 = tail call float @llvm.fma.f32(float %42, float 0xBCF8469880000000,\l... float %44)\l  %46 = fptosi float %42 to i32\l  %47 = bitcast float %38 to i32\l  br label %154\l}"];
	Node0x5e55be0 -> Node0x5e56720;
	Node0x5e55c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%48:\l48:                                               \l  %49 = bitcast float %38 to i32\l  %50 = lshr i32 %49, 23\l  %51 = and i32 %49, 8388607\l  %52 = or i32 %51, 8388608\l  %53 = zext i32 %52 to i64\l  %54 = mul nuw nsw i64 %53, 4266746795\l  %55 = trunc i64 %54 to i32\l  %56 = lshr i64 %54, 32\l  %57 = mul nuw nsw i64 %53, 1011060801\l  %58 = add nuw nsw i64 %56, %57\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = mul nuw nsw i64 %53, 3680671129\l  %62 = add nuw nsw i64 %60, %61\l  %63 = trunc i64 %62 to i32\l  %64 = lshr i64 %62, 32\l  %65 = mul nuw nsw i64 %53, 4113882560\l  %66 = add nuw nsw i64 %64, %65\l  %67 = trunc i64 %66 to i32\l  %68 = lshr i64 %66, 32\l  %69 = mul nuw nsw i64 %53, 4230436817\l  %70 = add nuw nsw i64 %68, %69\l  %71 = trunc i64 %70 to i32\l  %72 = lshr i64 %70, 32\l  %73 = mul nuw nsw i64 %53, 1313084713\l  %74 = add nuw nsw i64 %72, %73\l  %75 = trunc i64 %74 to i32\l  %76 = lshr i64 %74, 32\l  %77 = mul nuw nsw i64 %53, 2734261102\l  %78 = add nuw nsw i64 %76, %77\l  %79 = trunc i64 %78 to i32\l  %80 = lshr i64 %78, 32\l  %81 = trunc i64 %80 to i32\l  %82 = add nsw i32 %50, -120\l  %83 = icmp ugt i32 %82, 63\l  %84 = select i1 %83, i32 %75, i32 %81\l  %85 = select i1 %83, i32 %71, i32 %79\l  %86 = select i1 %83, i32 %67, i32 %75\l  %87 = select i1 %83, i32 %63, i32 %71\l  %88 = select i1 %83, i32 %59, i32 %67\l  %89 = select i1 %83, i32 %55, i32 %63\l  %90 = select i1 %83, i32 -64, i32 0\l  %91 = add nsw i32 %90, %82\l  %92 = icmp ugt i32 %91, 31\l  %93 = select i1 %92, i32 %85, i32 %84\l  %94 = select i1 %92, i32 %86, i32 %85\l  %95 = select i1 %92, i32 %87, i32 %86\l  %96 = select i1 %92, i32 %88, i32 %87\l  %97 = select i1 %92, i32 %89, i32 %88\l  %98 = select i1 %92, i32 -32, i32 0\l  %99 = add nsw i32 %98, %91\l  %100 = icmp ugt i32 %99, 31\l  %101 = select i1 %100, i32 %94, i32 %93\l  %102 = select i1 %100, i32 %95, i32 %94\l  %103 = select i1 %100, i32 %96, i32 %95\l  %104 = select i1 %100, i32 %97, i32 %96\l  %105 = select i1 %100, i32 -32, i32 0\l  %106 = add nsw i32 %105, %99\l  %107 = icmp eq i32 %106, 0\l  %108 = sub nsw i32 32, %106\l  %109 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %108)\l  %110 = tail call i32 @llvm.fshr.i32(i32 %102, i32 %103, i32 %108)\l  %111 = tail call i32 @llvm.fshr.i32(i32 %103, i32 %104, i32 %108)\l  %112 = select i1 %107, i32 %101, i32 %109\l  %113 = select i1 %107, i32 %102, i32 %110\l  %114 = select i1 %107, i32 %103, i32 %111\l  %115 = lshr i32 %112, 29\l  %116 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %113, i32 2)\l  %117 = tail call i32 @llvm.fshl.i32(i32 %113, i32 %114, i32 2)\l  %118 = tail call i32 @llvm.fshl.i32(i32 %114, i32 %104, i32 2)\l  %119 = and i32 %115, 1\l  %120 = sub nsw i32 0, %119\l  %121 = shl i32 %115, 31\l  %122 = xor i32 %116, %120\l  %123 = xor i32 %117, %120\l  %124 = xor i32 %118, %120\l  %125 = tail call i32 @llvm.ctlz.i32(i32 %122, i1 false), !range !7\l  %126 = sub nsw i32 31, %125\l  %127 = tail call i32 @llvm.fshr.i32(i32 %122, i32 %123, i32 %126)\l  %128 = tail call i32 @llvm.fshr.i32(i32 %123, i32 %124, i32 %126)\l  %129 = shl nuw nsw i32 %125, 23\l  %130 = sub nuw nsw i32 1056964608, %129\l  %131 = lshr i32 %127, 9\l  %132 = or i32 %131, %130\l  %133 = or i32 %132, %121\l  %134 = bitcast i32 %133 to float\l  %135 = tail call i32 @llvm.fshl.i32(i32 %127, i32 %128, i32 23)\l  %136 = tail call i32 @llvm.ctlz.i32(i32 %135, i1 false), !range !7\l  %137 = fmul float %134, 0x3FF921FB40000000\l  %138 = add nuw nsw i32 %136, %125\l  %139 = shl nuw nsw i32 %138, 23\l  %140 = sub nuw nsw i32 855638016, %139\l  %141 = sub nsw i32 31, %136\l  %142 = tail call i32 @llvm.fshr.i32(i32 %135, i32 %128, i32 %141)\l  %143 = lshr i32 %142, 9\l  %144 = or i32 %140, %143\l  %145 = or i32 %144, %121\l  %146 = bitcast i32 %145 to float\l  %147 = fneg float %137\l  %148 = tail call float @llvm.fma.f32(float %134, float 0x3FF921FB40000000,\l... float %147)\l  %149 = tail call float @llvm.fma.f32(float %134, float 0x3E74442D00000000,\l... float %148)\l  %150 = tail call float @llvm.fma.f32(float %146, float 0x3FF921FB40000000,\l... float %149)\l  %151 = fadd float %137, %150\l  %152 = lshr i32 %112, 30\l  %153 = add nuw nsw i32 %119, %152\l  br label %154\l}"];
	Node0x5e55c70 -> Node0x5e56720;
	Node0x5e56720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%154:\l154:                                              \l  %155 = phi i32 [ %47, %40 ], [ %49, %48 ]\l  %156 = phi float [ %45, %40 ], [ %151, %48 ]\l  %157 = phi i32 [ %46, %40 ], [ %153, %48 ]\l  %158 = fmul float %156, %156\l  %159 = fmul contract float %35, 4.000000e+00\l  %160 = fadd contract float %159, %3\l  %161 = tail call float @llvm.fabs.f32(float %160)\l  %162 = fcmp olt float %161, 1.310720e+05\l  br i1 %162, label %163, label %170\l|{<s0>T|<s1>F}}"];
	Node0x5e56720:s0 -> Node0x5e5c960;
	Node0x5e56720:s1 -> Node0x5e5c9b0;
	Node0x5e5c960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%163:\l163:                                              \l  %164 = fmul float %161, 0x3FE45F3060000000\l  %165 = tail call float @llvm.rint.f32(float %164)\l  %166 = tail call float @llvm.fma.f32(float %165, float 0xBFF921FB40000000,\l... float %161)\l  %167 = tail call float @llvm.fma.f32(float %165, float 0xBE74442D00000000,\l... float %166)\l  %168 = tail call float @llvm.fma.f32(float %165, float 0xBCF8469880000000,\l... float %167)\l  %169 = fptosi float %165 to i32\l  br label %276\l}"];
	Node0x5e5c960 -> Node0x5e5d070;
	Node0x5e5c9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%170:\l170:                                              \l  %171 = bitcast float %161 to i32\l  %172 = lshr i32 %171, 23\l  %173 = and i32 %171, 8388607\l  %174 = or i32 %173, 8388608\l  %175 = zext i32 %174 to i64\l  %176 = mul nuw nsw i64 %175, 4266746795\l  %177 = trunc i64 %176 to i32\l  %178 = lshr i64 %176, 32\l  %179 = mul nuw nsw i64 %175, 1011060801\l  %180 = add nuw nsw i64 %178, %179\l  %181 = trunc i64 %180 to i32\l  %182 = lshr i64 %180, 32\l  %183 = mul nuw nsw i64 %175, 3680671129\l  %184 = add nuw nsw i64 %182, %183\l  %185 = trunc i64 %184 to i32\l  %186 = lshr i64 %184, 32\l  %187 = mul nuw nsw i64 %175, 4113882560\l  %188 = add nuw nsw i64 %186, %187\l  %189 = trunc i64 %188 to i32\l  %190 = lshr i64 %188, 32\l  %191 = mul nuw nsw i64 %175, 4230436817\l  %192 = add nuw nsw i64 %190, %191\l  %193 = trunc i64 %192 to i32\l  %194 = lshr i64 %192, 32\l  %195 = mul nuw nsw i64 %175, 1313084713\l  %196 = add nuw nsw i64 %194, %195\l  %197 = trunc i64 %196 to i32\l  %198 = lshr i64 %196, 32\l  %199 = mul nuw nsw i64 %175, 2734261102\l  %200 = add nuw nsw i64 %198, %199\l  %201 = trunc i64 %200 to i32\l  %202 = lshr i64 %200, 32\l  %203 = trunc i64 %202 to i32\l  %204 = add nsw i32 %172, -120\l  %205 = icmp ugt i32 %204, 63\l  %206 = select i1 %205, i32 %197, i32 %203\l  %207 = select i1 %205, i32 %193, i32 %201\l  %208 = select i1 %205, i32 %189, i32 %197\l  %209 = select i1 %205, i32 %185, i32 %193\l  %210 = select i1 %205, i32 %181, i32 %189\l  %211 = select i1 %205, i32 %177, i32 %185\l  %212 = select i1 %205, i32 -64, i32 0\l  %213 = add nsw i32 %212, %204\l  %214 = icmp ugt i32 %213, 31\l  %215 = select i1 %214, i32 %207, i32 %206\l  %216 = select i1 %214, i32 %208, i32 %207\l  %217 = select i1 %214, i32 %209, i32 %208\l  %218 = select i1 %214, i32 %210, i32 %209\l  %219 = select i1 %214, i32 %211, i32 %210\l  %220 = select i1 %214, i32 -32, i32 0\l  %221 = add nsw i32 %220, %213\l  %222 = icmp ugt i32 %221, 31\l  %223 = select i1 %222, i32 %216, i32 %215\l  %224 = select i1 %222, i32 %217, i32 %216\l  %225 = select i1 %222, i32 %218, i32 %217\l  %226 = select i1 %222, i32 %219, i32 %218\l  %227 = select i1 %222, i32 -32, i32 0\l  %228 = add nsw i32 %227, %221\l  %229 = icmp eq i32 %228, 0\l  %230 = sub nsw i32 32, %228\l  %231 = tail call i32 @llvm.fshr.i32(i32 %223, i32 %224, i32 %230)\l  %232 = tail call i32 @llvm.fshr.i32(i32 %224, i32 %225, i32 %230)\l  %233 = tail call i32 @llvm.fshr.i32(i32 %225, i32 %226, i32 %230)\l  %234 = select i1 %229, i32 %223, i32 %231\l  %235 = select i1 %229, i32 %224, i32 %232\l  %236 = select i1 %229, i32 %225, i32 %233\l  %237 = lshr i32 %234, 29\l  %238 = tail call i32 @llvm.fshl.i32(i32 %234, i32 %235, i32 2)\l  %239 = tail call i32 @llvm.fshl.i32(i32 %235, i32 %236, i32 2)\l  %240 = tail call i32 @llvm.fshl.i32(i32 %236, i32 %226, i32 2)\l  %241 = and i32 %237, 1\l  %242 = sub nsw i32 0, %241\l  %243 = shl i32 %237, 31\l  %244 = xor i32 %238, %242\l  %245 = xor i32 %239, %242\l  %246 = xor i32 %240, %242\l  %247 = tail call i32 @llvm.ctlz.i32(i32 %244, i1 false), !range !7\l  %248 = sub nsw i32 31, %247\l  %249 = tail call i32 @llvm.fshr.i32(i32 %244, i32 %245, i32 %248)\l  %250 = tail call i32 @llvm.fshr.i32(i32 %245, i32 %246, i32 %248)\l  %251 = shl nuw nsw i32 %247, 23\l  %252 = sub nuw nsw i32 1056964608, %251\l  %253 = lshr i32 %249, 9\l  %254 = or i32 %253, %252\l  %255 = or i32 %254, %243\l  %256 = bitcast i32 %255 to float\l  %257 = tail call i32 @llvm.fshl.i32(i32 %249, i32 %250, i32 23)\l  %258 = tail call i32 @llvm.ctlz.i32(i32 %257, i1 false), !range !7\l  %259 = fmul float %256, 0x3FF921FB40000000\l  %260 = add nuw nsw i32 %258, %247\l  %261 = shl nuw nsw i32 %260, 23\l  %262 = sub nuw nsw i32 855638016, %261\l  %263 = sub nsw i32 31, %258\l  %264 = tail call i32 @llvm.fshr.i32(i32 %257, i32 %250, i32 %263)\l  %265 = lshr i32 %264, 9\l  %266 = or i32 %262, %265\l  %267 = or i32 %266, %243\l  %268 = bitcast i32 %267 to float\l  %269 = fneg float %259\l  %270 = tail call float @llvm.fma.f32(float %256, float 0x3FF921FB40000000,\l... float %269)\l  %271 = tail call float @llvm.fma.f32(float %256, float 0x3E74442D00000000,\l... float %270)\l  %272 = tail call float @llvm.fma.f32(float %268, float 0x3FF921FB40000000,\l... float %271)\l  %273 = fadd float %259, %272\l  %274 = lshr i32 %234, 30\l  %275 = add nuw nsw i32 %241, %274\l  br label %276\l}"];
	Node0x5e5c9b0 -> Node0x5e5d070;
	Node0x5e5d070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%276:\l276:                                              \l  %277 = phi float [ %168, %163 ], [ %273, %170 ]\l  %278 = phi i32 [ %169, %163 ], [ %275, %170 ]\l  %279 = tail call i1 @llvm.amdgcn.class.f32(float %38, i32 504)\l  %280 = bitcast float %37 to i32\l  %281 = xor i32 %155, %280\l  %282 = shl i32 %157, 30\l  %283 = and i32 %282, -2147483648\l  %284 = xor i32 %281, %283\l  %285 = and i32 %157, 1\l  %286 = icmp eq i32 %285, 0\l  %287 = tail call float @llvm.fmuladd.f32(float %158, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %288 = tail call float @llvm.fmuladd.f32(float %158, float %287, float\l... 0xBFC55553A0000000)\l  %289 = fmul float %158, %288\l  %290 = tail call float @llvm.fmuladd.f32(float %156, float %289, float %156)\l  %291 = tail call float @llvm.fmuladd.f32(float %158, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %292 = tail call float @llvm.fmuladd.f32(float %158, float %291, float\l... 0x3FA5557EE0000000)\l  %293 = tail call float @llvm.fmuladd.f32(float %158, float %292, float\l... 0xBFE0000080000000)\l  %294 = tail call float @llvm.fmuladd.f32(float %158, float %293, float\l... 1.000000e+00)\l  %295 = select i1 %286, float %290, float %294\l  %296 = bitcast float %295 to i32\l  %297 = xor i32 %284, %296\l  %298 = bitcast i32 %297 to float\l  %299 = select i1 %279, float %298, float 0x7FF8000000000000\l  %300 = fmul float %277, %277\l  %301 = tail call float @llvm.fmuladd.f32(float %300, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %302 = tail call float @llvm.fmuladd.f32(float %300, float %301, float\l... 0xBFC55553A0000000)\l  %303 = fmul float %300, %302\l  %304 = tail call float @llvm.fmuladd.f32(float %277, float %303, float %277)\l  %305 = tail call float @llvm.fmuladd.f32(float %300, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %306 = tail call float @llvm.fmuladd.f32(float %300, float %305, float\l... 0x3FA5557EE0000000)\l  %307 = tail call float @llvm.fmuladd.f32(float %300, float %306, float\l... 0xBFE0000080000000)\l  %308 = tail call float @llvm.fmuladd.f32(float %300, float %307, float\l... 1.000000e+00)\l  %309 = fneg float %304\l  %310 = and i32 %278, 1\l  %311 = icmp eq i32 %310, 0\l  %312 = select i1 %311, float %308, float %309\l  %313 = bitcast float %312 to i32\l  %314 = shl i32 %278, 30\l  %315 = and i32 %314, -2147483648\l  %316 = xor i32 %315, %313\l  %317 = bitcast i32 %316 to float\l  %318 = tail call i1 @llvm.amdgcn.class.f32(float %161, i32 504)\l  %319 = select i1 %318, float %317, float 0x7FF8000000000000\l  %320 = fmul contract float %299, %319\l  %321 = fmul contract float %320, 5.000000e-01\l  %322 = insertelement \<4 x float\> \<float poison, float poison, float poison,\l... float 1.000000e+00\>, float %31, i64 0\l  %323 = insertelement \<4 x float\> %322, float %321, i64 1\l  %324 = insertelement \<4 x float\> %323, float %35, i64 2\l  %325 = mul i32 %21, %1\l  %326 = add i32 %325, %13\l  %327 = zext i32 %326 to i64\l  %328 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %327, i32 0, i32 0, i32 0\l  store \<4 x float\> %324, \<4 x float\> addrspace(1)* %328, align 16\l  ret void\l}"];
}
