digraph "CFG for '_Z16tensor_5d_equalsiiiiiPKfiiiiiiS0_iiiiiiPi' function" {
	label="CFG for '_Z16tensor_5d_equalsiiiiiPKfiiiiiiS0_iiiiiiPi' function";

	Node0x5e7f2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%20:\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %22 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %23 = getelementptr i8, i8 addrspace(4)* %22, i64 4\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 4, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %21, %26\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %29 = add i32 %27, %28\l  %30 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %31 = getelementptr i8, i8 addrspace(4)* %22, i64 6\l  %32 = bitcast i8 addrspace(4)* %31 to i16 addrspace(4)*\l  %33 = load i16, i16 addrspace(4)* %32, align 2, !range !4, !invariant.load !5\l  %34 = zext i16 %33 to i32\l  %35 = mul i32 %30, %34\l  %36 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %37 = add i32 %35, %36\l  %38 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %39 = getelementptr i8, i8 addrspace(4)* %22, i64 8\l  %40 = bitcast i8 addrspace(4)* %39 to i16 addrspace(4)*\l  %41 = load i16, i16 addrspace(4)* %40, align 4, !range !4, !invariant.load !5\l  %42 = zext i16 %41 to i32\l  %43 = mul i32 %38, %42\l  %44 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !6\l  %45 = add i32 %43, %44\l  %46 = icmp slt i32 %29, %0\l  %47 = icmp slt i32 %37, %1\l  %48 = select i1 %46, i1 %47, i1 false\l  %49 = icmp slt i32 %45, %2\l  %50 = select i1 %48, i1 %49, i1 false\l  br i1 %50, label %51, label %173\l|{<s0>T|<s1>F}}"];
	Node0x5e7f2f0:s0 -> Node0x5e845e0;
	Node0x5e7f2f0:s1 -> Node0x5e84670;
	Node0x5e845e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%51:\l51:                                               \l  %52 = mul nsw i32 %29, %7\l  %53 = add nsw i32 %52, %6\l  %54 = mul nsw i32 %37, %8\l  %55 = add nsw i32 %53, %54\l  %56 = mul nsw i32 %45, %9\l  %57 = add nsw i32 %55, %56\l  %58 = mul nsw i32 %29, %14\l  %59 = add nsw i32 %58, %13\l  %60 = mul nsw i32 %37, %15\l  %61 = add nsw i32 %59, %60\l  %62 = mul nsw i32 %45, %16\l  %63 = add nsw i32 %61, %62\l  %64 = icmp sgt i32 %3, 0\l  br i1 %64, label %65, label %173\l|{<s0>T|<s1>F}}"];
	Node0x5e845e0:s0 -> Node0x5e82350;
	Node0x5e845e0:s1 -> Node0x5e84670;
	Node0x5e82350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%65:\l65:                                               \l  %66 = icmp sgt i32 %4, 0\l  %67 = and i32 %4, 3\l  %68 = icmp ult i32 %4, 4\l  %69 = and i32 %4, -4\l  %70 = icmp eq i32 %67, 0\l  br label %71\l}"];
	Node0x5e82350 -> Node0x5e855b0;
	Node0x5e855b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%71:\l71:                                               \l  %72 = phi i32 [ 0, %65 ], [ %102, %101 ]\l  br i1 %66, label %73, label %101\l|{<s0>T|<s1>F}}"];
	Node0x5e855b0:s0 -> Node0x5e857e0;
	Node0x5e855b0:s1 -> Node0x5e856a0;
	Node0x5e857e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%73:\l73:                                               \l  %74 = mul nsw i32 %72, %10\l  %75 = add nsw i32 %57, %74\l  %76 = mul nsw i32 %72, %17\l  %77 = add nsw i32 %63, %76\l  br i1 %68, label %78, label %104\l|{<s0>T|<s1>F}}"];
	Node0x5e857e0:s0 -> Node0x5e85b60;
	Node0x5e857e0:s1 -> Node0x5e85bb0;
	Node0x5e85b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %73 ], [ %170, %169 ]\l  br i1 %70, label %101, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5e85b60:s0 -> Node0x5e856a0;
	Node0x5e85b60:s1 -> Node0x5e85e60;
	Node0x5e85e60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%80:\l80:                                               \l  %81 = phi i32 [ %98, %97 ], [ %79, %78 ]\l  %82 = phi i32 [ %99, %97 ], [ 0, %78 ]\l  %83 = mul nsw i32 %81, %11\l  %84 = add nsw i32 %75, %83\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %5, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %88 = mul nsw i32 %81, %18\l  %89 = add nsw i32 %77, %88\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %12, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %93 = fcmp contract une float %87, %92\l  br i1 %93, label %94, label %97\l|{<s0>T|<s1>F}}"];
	Node0x5e85e60:s0 -> Node0x5e87040;
	Node0x5e85e60:s1 -> Node0x5e85fd0;
	Node0x5e87040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#cc403a70",label="{%94:\l94:                                               \l  %95 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !11\l  %96 = add nsw i32 %95, 1\l  store i32 %96, i32 addrspace(1)* %19, align 4, !tbaa !11\l  br label %97\l}"];
	Node0x5e87040 -> Node0x5e85fd0;
	Node0x5e85fd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%97:\l97:                                               \l  %98 = add nuw nsw i32 %81, 1\l  %99 = add i32 %82, 1\l  %100 = icmp eq i32 %99, %67\l  br i1 %100, label %101, label %80, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5e85fd0:s0 -> Node0x5e856a0;
	Node0x5e85fd0:s1 -> Node0x5e85e60;
	Node0x5e856a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%101:\l101:                                              \l  %102 = add nuw nsw i32 %72, 1\l  %103 = icmp eq i32 %102, %3\l  br i1 %103, label %173, label %71, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5e856a0:s0 -> Node0x5e84670;
	Node0x5e856a0:s1 -> Node0x5e855b0;
	Node0x5e85bb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%104:\l104:                                              \l  %105 = phi i32 [ %170, %169 ], [ 0, %73 ]\l  %106 = phi i32 [ %171, %169 ], [ 0, %73 ]\l  %107 = mul nsw i32 %105, %11\l  %108 = add nsw i32 %75, %107\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %5, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = mul nsw i32 %105, %18\l  %113 = add nsw i32 %77, %112\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %12, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = fcmp contract une float %111, %116\l  br i1 %117, label %118, label %121\l|{<s0>T|<s1>F}}"];
	Node0x5e85bb0:s0 -> Node0x5e887b0;
	Node0x5e85bb0:s1 -> Node0x5e88840;
	Node0x5e887b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%118:\l118:                                              \l  %119 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !11\l  %120 = add nsw i32 %119, 1\l  store i32 %120, i32 addrspace(1)* %19, align 4, !tbaa !11\l  br label %121\l}"];
	Node0x5e887b0 -> Node0x5e88840;
	Node0x5e88840 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%121:\l121:                                              \l  %122 = or i32 %105, 1\l  %123 = mul nsw i32 %122, %11\l  %124 = add nsw i32 %75, %123\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %5, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = mul nsw i32 %122, %18\l  %129 = add nsw i32 %77, %128\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %12, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %133 = fcmp contract une float %127, %132\l  br i1 %133, label %134, label %137\l|{<s0>T|<s1>F}}"];
	Node0x5e88840:s0 -> Node0x5e851d0;
	Node0x5e88840:s1 -> Node0x5e85260;
	Node0x5e851d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%134:\l134:                                              \l  %135 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !11\l  %136 = add nsw i32 %135, 1\l  store i32 %136, i32 addrspace(1)* %19, align 4, !tbaa !11\l  br label %137\l}"];
	Node0x5e851d0 -> Node0x5e85260;
	Node0x5e85260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%137:\l137:                                              \l  %138 = or i32 %105, 2\l  %139 = mul nsw i32 %138, %11\l  %140 = add nsw i32 %75, %139\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %5, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = mul nsw i32 %138, %18\l  %145 = add nsw i32 %77, %144\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %12, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = fcmp contract une float %143, %148\l  br i1 %149, label %150, label %153\l|{<s0>T|<s1>F}}"];
	Node0x5e85260:s0 -> Node0x5e852f0;
	Node0x5e85260:s1 -> Node0x5e8a0a0;
	Node0x5e852f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%150:\l150:                                              \l  %151 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !11\l  %152 = add nsw i32 %151, 1\l  store i32 %152, i32 addrspace(1)* %19, align 4, !tbaa !11\l  br label %153\l}"];
	Node0x5e852f0 -> Node0x5e8a0a0;
	Node0x5e8a0a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%153:\l153:                                              \l  %154 = or i32 %105, 3\l  %155 = mul nsw i32 %154, %11\l  %156 = add nsw i32 %75, %155\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %5, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %160 = mul nsw i32 %154, %18\l  %161 = add nsw i32 %77, %160\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %12, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %165 = fcmp contract une float %159, %164\l  br i1 %165, label %166, label %169\l|{<s0>T|<s1>F}}"];
	Node0x5e8a0a0:s0 -> Node0x5e8aa40;
	Node0x5e8a0a0:s1 -> Node0x5e85d20;
	Node0x5e8aa40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%166:\l166:                                              \l  %167 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !11\l  %168 = add nsw i32 %167, 1\l  store i32 %168, i32 addrspace(1)* %19, align 4, !tbaa !11\l  br label %169\l}"];
	Node0x5e8aa40 -> Node0x5e85d20;
	Node0x5e85d20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%169:\l169:                                              \l  %170 = add nuw nsw i32 %105, 4\l  %171 = add i32 %106, 4\l  %172 = icmp eq i32 %171, %69\l  br i1 %172, label %78, label %104, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x5e85d20:s0 -> Node0x5e85b60;
	Node0x5e85d20:s1 -> Node0x5e85bb0;
	Node0x5e84670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%173:\l173:                                              \l  ret void\l}"];
}
