digraph "CFG for '_Z16tensor_4d_equalsiiiiPKfiiiiiS0_iiiiiPi' function" {
	label="CFG for '_Z16tensor_4d_equalsiiiiPKfiiiiiS0_iiiiiPi' function";

	Node0x582c310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%17:\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %18, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %26 = add i32 %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %28 = getelementptr i8, i8 addrspace(4)* %19, i64 6\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 2, !range !4, !invariant.load !5\l  %31 = zext i16 %30 to i32\l  %32 = mul i32 %27, %31\l  %33 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %34 = add i32 %32, %33\l  %35 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %36 = getelementptr i8, i8 addrspace(4)* %19, i64 8\l  %37 = bitcast i8 addrspace(4)* %36 to i16 addrspace(4)*\l  %38 = load i16, i16 addrspace(4)* %37, align 4, !range !4, !invariant.load !5\l  %39 = zext i16 %38 to i32\l  %40 = mul i32 %35, %39\l  %41 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !6\l  %42 = add i32 %40, %41\l  %43 = icmp slt i32 %26, %0\l  %44 = icmp slt i32 %34, %1\l  %45 = select i1 %43, i1 %44, i1 false\l  %46 = icmp slt i32 %42, %2\l  %47 = select i1 %45, i1 %46, i1 false\l  br i1 %47, label %48, label %160\l|{<s0>T|<s1>F}}"];
	Node0x582c310:s0 -> Node0x5831360;
	Node0x582c310:s1 -> Node0x58313f0;
	Node0x5831360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%48:\l48:                                               \l  %49 = mul nsw i32 %26, %6\l  %50 = add nsw i32 %49, %5\l  %51 = mul nsw i32 %34, %7\l  %52 = add nsw i32 %50, %51\l  %53 = mul nsw i32 %42, %8\l  %54 = add nsw i32 %52, %53\l  %55 = mul nsw i32 %26, %12\l  %56 = add nsw i32 %55, %11\l  %57 = mul nsw i32 %34, %13\l  %58 = add nsw i32 %56, %57\l  %59 = mul nsw i32 %42, %14\l  %60 = add nsw i32 %58, %59\l  %61 = icmp sgt i32 %3, 0\l  br i1 %61, label %62, label %160\l|{<s0>T|<s1>F}}"];
	Node0x5831360:s0 -> Node0x5831cb0;
	Node0x5831360:s1 -> Node0x58313f0;
	Node0x5831cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%62:\l62:                                               \l  %63 = and i32 %3, 3\l  %64 = icmp ult i32 %3, 4\l  br i1 %64, label %136, label %65\l|{<s0>T|<s1>F}}"];
	Node0x5831cb0:s0 -> Node0x582ff00;
	Node0x5831cb0:s1 -> Node0x582ff50;
	Node0x582ff50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%65:\l65:                                               \l  %66 = and i32 %3, -4\l  br label %67\l}"];
	Node0x582ff50 -> Node0x58300c0;
	Node0x58300c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%67:\l67:                                               \l  %68 = phi i32 [ 0, %65 ], [ %133, %132 ]\l  %69 = phi i32 [ 0, %65 ], [ %134, %132 ]\l  %70 = mul nsw i32 %68, %9\l  %71 = add nsw i32 %54, %70\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %4, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = mul nsw i32 %68, %15\l  %76 = add nsw i32 %60, %75\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %10, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fcmp contract une float %74, %79\l  br i1 %80, label %81, label %84\l|{<s0>T|<s1>F}}"];
	Node0x58300c0:s0 -> Node0x58334e0;
	Node0x58300c0:s1 -> Node0x5833570;
	Node0x58334e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%81:\l81:                                               \l  %82 = load i32, i32 addrspace(1)* %16, align 4, !tbaa !11\l  %83 = add nsw i32 %82, 1\l  store i32 %83, i32 addrspace(1)* %16, align 4, !tbaa !11\l  br label %84\l}"];
	Node0x58334e0 -> Node0x5833570;
	Node0x5833570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%84:\l84:                                               \l  %85 = or i32 %68, 1\l  %86 = mul nsw i32 %85, %9\l  %87 = add nsw i32 %54, %86\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %4, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = mul nsw i32 %85, %15\l  %92 = add nsw i32 %60, %91\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %10, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = fcmp contract une float %90, %95\l  br i1 %96, label %97, label %100\l|{<s0>T|<s1>F}}"];
	Node0x5833570:s0 -> Node0x5834690;
	Node0x5833570:s1 -> Node0x5834720;
	Node0x5834690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%97:\l97:                                               \l  %98 = load i32, i32 addrspace(1)* %16, align 4, !tbaa !11\l  %99 = add nsw i32 %98, 1\l  store i32 %99, i32 addrspace(1)* %16, align 4, !tbaa !11\l  br label %100\l}"];
	Node0x5834690 -> Node0x5834720;
	Node0x5834720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%100:\l100:                                              \l  %101 = or i32 %68, 2\l  %102 = mul nsw i32 %101, %9\l  %103 = add nsw i32 %54, %102\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %4, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = mul nsw i32 %101, %15\l  %108 = add nsw i32 %60, %107\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %10, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = fcmp contract une float %106, %111\l  br i1 %112, label %113, label %116\l|{<s0>T|<s1>F}}"];
	Node0x5834720:s0 -> Node0x58350f0;
	Node0x5834720:s1 -> Node0x5835180;
	Node0x58350f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%113:\l113:                                              \l  %114 = load i32, i32 addrspace(1)* %16, align 4, !tbaa !11\l  %115 = add nsw i32 %114, 1\l  store i32 %115, i32 addrspace(1)* %16, align 4, !tbaa !11\l  br label %116\l}"];
	Node0x58350f0 -> Node0x5835180;
	Node0x5835180 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%116:\l116:                                              \l  %117 = or i32 %68, 3\l  %118 = mul nsw i32 %117, %9\l  %119 = add nsw i32 %54, %118\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %4, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = mul nsw i32 %117, %15\l  %124 = add nsw i32 %60, %123\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %10, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = fcmp contract une float %122, %127\l  br i1 %128, label %129, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5835180:s0 -> Node0x5831f30;
	Node0x5835180:s1 -> Node0x5832470;
	Node0x5831f30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%129:\l129:                                              \l  %130 = load i32, i32 addrspace(1)* %16, align 4, !tbaa !11\l  %131 = add nsw i32 %130, 1\l  store i32 %131, i32 addrspace(1)* %16, align 4, !tbaa !11\l  br label %132\l}"];
	Node0x5831f30 -> Node0x5832470;
	Node0x5832470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%132:\l132:                                              \l  %133 = add nuw nsw i32 %68, 4\l  %134 = add i32 %69, 4\l  %135 = icmp eq i32 %134, %66\l  br i1 %135, label %136, label %67, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5832470:s0 -> Node0x582ff00;
	Node0x5832470:s1 -> Node0x58300c0;
	Node0x582ff00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%136:\l136:                                              \l  %137 = phi i32 [ 0, %62 ], [ %133, %132 ]\l  %138 = icmp eq i32 %63, 0\l  br i1 %138, label %160, label %139\l|{<s0>T|<s1>F}}"];
	Node0x582ff00:s0 -> Node0x58313f0;
	Node0x582ff00:s1 -> Node0x58366c0;
	Node0x58366c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%139:\l139:                                              \l  %140 = phi i32 [ %157, %156 ], [ %137, %136 ]\l  %141 = phi i32 [ %158, %156 ], [ 0, %136 ]\l  %142 = mul nsw i32 %140, %9\l  %143 = add nsw i32 %54, %142\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %4, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = mul nsw i32 %140, %15\l  %148 = add nsw i32 %60, %147\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %10, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %152 = fcmp contract une float %146, %151\l  br i1 %152, label %153, label %156\l|{<s0>T|<s1>F}}"];
	Node0x58366c0:s0 -> Node0x5836fc0;
	Node0x58366c0:s1 -> Node0x58367c0;
	Node0x5836fc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%153:\l153:                                              \l  %154 = load i32, i32 addrspace(1)* %16, align 4, !tbaa !11\l  %155 = add nsw i32 %154, 1\l  store i32 %155, i32 addrspace(1)* %16, align 4, !tbaa !11\l  br label %156\l}"];
	Node0x5836fc0 -> Node0x58367c0;
	Node0x58367c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%156:\l156:                                              \l  %157 = add nuw nsw i32 %140, 1\l  %158 = add i32 %141, 1\l  %159 = icmp eq i32 %158, %63\l  br i1 %159, label %160, label %139, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x58367c0:s0 -> Node0x58313f0;
	Node0x58367c0:s1 -> Node0x58366c0;
	Node0x58313f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%160:\l160:                                              \l  ret void\l}"];
}
