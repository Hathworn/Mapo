digraph "CFG for '_Z9sigmoid64Pdi' function" {
	label="CFG for '_Z9sigmoid64Pdi' function";

	Node0x4e086f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %7 = bitcast i8 addrspace(4)* %6 to i32 addrspace(4)*\l  %8 = load i32, i32 addrspace(4)* %7, align 4, !tbaa !4\l  %9 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !13, !invariant.load\l... !14\l  %12 = zext i16 %11 to i32\l  %13 = udiv i32 %8, %12\l  %14 = mul i32 %13, %12\l  %15 = icmp ugt i32 %8, %14\l  %16 = zext i1 %15 to i32\l  %17 = add i32 %13, %16\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 16\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 8, !tbaa !15\l  %21 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !13, !invariant.load\l... !14\l  %24 = zext i16 %23 to i32\l  %25 = udiv i32 %20, %24\l  %26 = mul i32 %25, %24\l  %27 = icmp ugt i32 %20, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %31 = mul i32 %29, %30\l  %32 = add i32 %31, %4\l  %33 = mul i32 %32, %17\l  %34 = add i32 %33, %3\l  %35 = getelementptr i8, i8 addrspace(4)* %5, i64 8\l  %36 = bitcast i8 addrspace(4)* %35 to i16 addrspace(4)*\l  %37 = load i16, i16 addrspace(4)* %36, align 4, !range !13, !invariant.load\l... !14\l  %38 = zext i16 %37 to i32\l  %39 = mul i32 %34, %38\l  %40 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %41 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %43 = add i32 %39, %40\l  %44 = mul i32 %43, %24\l  %45 = add i32 %44, %41\l  %46 = mul i32 %45, %12\l  %47 = add i32 %46, %42\l  %48 = icmp slt i32 %47, %1\l  br i1 %48, label %49, label %103\l|{<s0>T|<s1>F}}"];
	Node0x4e086f0:s0 -> Node0x4e0d6e0;
	Node0x4e086f0:s1 -> Node0x4e0d770;
	Node0x4e0d6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%49:\l49:                                               \l  %50 = sext i32 %47 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %0, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %53 = fneg contract double %52\l  %54 = fsub double %52, %52\l  %55 = tail call double @llvm.fma.f64(double %53, double 0xBC8EA9677470FEF8,\l... double %54)\l  %56 = fsub double %55, %52\l  %57 = fadd double %52, %56\l  %58 = fsub double %55, %57\l  %59 = tail call double @llvm.fabs.f64(double %53) #3\l  %60 = fcmp oeq double %59, 0x7FF0000000000000\l  %61 = select i1 %60, double %53, double %56\l  %62 = tail call double @llvm.fabs.f64(double %61) #3\l  %63 = fcmp oeq double %62, 0x7FF0000000000000\l  %64 = select i1 %63, double 0.000000e+00, double %58\l  %65 = fmul double %61, 0x3FF71547652B82FE\l  %66 = tail call double @llvm.rint.f64(double %65)\l  %67 = fneg double %66\l  %68 = tail call double @llvm.fma.f64(double %67, double 0x3FE62E42FEFA39EF,\l... double %61)\l  %69 = tail call double @llvm.fma.f64(double %67, double 0x3C7ABC9E3B39803F,\l... double %68)\l  %70 = tail call double @llvm.fma.f64(double %69, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %71 = tail call double @llvm.fma.f64(double %69, double %70, double\l... 0x3EC71DEE623FDE64)\l  %72 = tail call double @llvm.fma.f64(double %69, double %71, double\l... 0x3EFA01997C89E6B0)\l  %73 = tail call double @llvm.fma.f64(double %69, double %72, double\l... 0x3F2A01A014761F6E)\l  %74 = tail call double @llvm.fma.f64(double %69, double %73, double\l... 0x3F56C16C1852B7B0)\l  %75 = tail call double @llvm.fma.f64(double %69, double %74, double\l... 0x3F81111111122322)\l  %76 = tail call double @llvm.fma.f64(double %69, double %75, double\l... 0x3FA55555555502A1)\l  %77 = tail call double @llvm.fma.f64(double %69, double %76, double\l... 0x3FC5555555555511)\l  %78 = tail call double @llvm.fma.f64(double %69, double %77, double\l... 0x3FE000000000000B)\l  %79 = tail call double @llvm.fma.f64(double %69, double %78, double\l... 1.000000e+00)\l  %80 = tail call double @llvm.fma.f64(double %69, double %79, double\l... 1.000000e+00)\l  %81 = fptosi double %66 to i32\l  %82 = tail call double @llvm.amdgcn.ldexp.f64(double %80, i32 %81)\l  %83 = fcmp ogt double %61, 1.024000e+03\l  %84 = select i1 %83, double 0x7FF0000000000000, double %82\l  %85 = fcmp olt double %61, -1.075000e+03\l  %86 = select i1 %85, double 0.000000e+00, double %84\l  %87 = tail call double @llvm.fma.f64(double %86, double %64, double %86)\l  %88 = tail call double @llvm.fabs.f64(double %86) #3\l  %89 = fcmp oeq double %88, 0x7FF0000000000000\l  %90 = select i1 %89, double %86, double %87\l  %91 = tail call double @llvm.fabs.f64(double %90)\l  %92 = bitcast double %53 to \<2 x i32\>\l  %93 = extractelement \<2 x i32\> %92, i64 1\l  %94 = icmp sgt i32 %93, -1\l  %95 = select i1 %94, double 0x7FF0000000000000, double 0.000000e+00\l  %96 = select i1 %60, double %95, double %91\l  %97 = fcmp uno double %52, 0.000000e+00\l  %98 = fcmp oeq double %52, 0.000000e+00\l  %99 = fadd contract double %96, 1.000000e+00\l  %100 = fdiv contract double 1.000000e+00, %99\l  %101 = select i1 %97, double 0x7FF8000000000000, double %100\l  %102 = select i1 %98, double 5.000000e-01, double %101\l  store double %102, double addrspace(1)* %51, align 8, !tbaa !17\l  br label %103\l}"];
	Node0x4e0d6e0 -> Node0x4e0d770;
	Node0x4e0d770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%103:\l103:                                              \l  ret void\l}"];
}
