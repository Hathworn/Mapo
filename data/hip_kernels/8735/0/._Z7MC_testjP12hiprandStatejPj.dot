digraph "CFG for '_Z7MC_testjP12hiprandStatejPj' function" {
	label="CFG for '_Z7MC_testjP12hiprandStatejPj' function";

	Node0x6015cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%4:\l  %5 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %8 = bitcast i8 addrspace(4)* %7 to i32 addrspace(4)*\l  %9 = load i32, i32 addrspace(4)* %8, align 4, !tbaa !4\l  %10 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !13, !invariant.load\l... !14\l  %13 = zext i16 %12 to i32\l  %14 = udiv i32 %9, %13\l  %15 = mul i32 %14, %13\l  %16 = icmp ugt i32 %9, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = mul i32 %19, %13\l  %21 = mul i32 %18, %13\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %20, %22\l  %24 = sext i32 %23 to i64\l  %25 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %24\l  %26 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sdata, i32\l... 0, i32 %22\l  store i32 0, i32 addrspace(3)* %26, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %27 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %27) #5\l  %28 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 0\l  %29 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 1\l  %30 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 2\l  %31 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 3\l  %32 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 4\l  %33 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 0\l  %34 = xor i32 %0, 746559103\l  %35 = mul i32 %34, 1228688033\l  %36 = add i32 %35, 123456789\l  store i32 %36, i32 addrspace(5)* %28, align 8, !tbaa !16\l  %37 = xor i32 %35, 362436069\l  store i32 %37, i32 addrspace(5)* %29, align 4, !tbaa !16\l  store i32 -1452303100, i32 addrspace(5)* %30, align 8, !tbaa !16\l  store i32 -1894485380, i32 addrspace(5)* %31, align 4, !tbaa !16\l  %38 = add i32 %35, 5783321\l  store i32 %38, i32 addrspace(5)* %32, align 8, !tbaa !16\l  %39 = add i32 %35, -1966976488\l  store i32 %39, i32 addrspace(5)* %33, align 8, !tbaa !20\l  %40 = icmp eq i32 %22, 0\l  br i1 %40, label %220, label %41\l|{<s0>T|<s1>F}}"];
	Node0x6015cf0:s0 -> Node0x60d4430;
	Node0x6015cf0:s1 -> Node0x60d44c0;
	Node0x60d44c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%41:\l41:                                               \l  %42 = zext i32 %22 to i64\l  br label %43\l}"];
	Node0x60d44c0 -> Node0x60d4670;
	Node0x60d4670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%43:\l43:                                               \l  %44 = phi i64 [ %53, %51 ], [ %42, %41 ]\l  %45 = phi i32 [ %52, %51 ], [ 0, %41 ]\l  %46 = trunc i64 %44 to i32\l  %47 = and i32 %46, 3\l  %48 = icmp eq i32 %47, 0\l  br i1 %48, label %51, label %49\l|{<s0>T|<s1>F}}"];
	Node0x60d4670:s0 -> Node0x60d4730;
	Node0x60d4670:s1 -> Node0x60d4b20;
	Node0x60d4b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%49:\l49:                                               \l  %50 = zext i32 %45 to i64\l  br label %55\l}"];
	Node0x60d4b20 -> Node0x60d4cd0;
	Node0x60d4730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%51:\l51:                                               \l  %52 = add nuw nsw i32 %45, 1\l  %53 = lshr i64 %44, 2\l  %54 = icmp ult i64 %44, 4\l  br i1 %54, label %220, label %43, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x60d4730:s0 -> Node0x60d4430;
	Node0x60d4730:s1 -> Node0x60d4670;
	Node0x60d4cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%55:\l55:                                               \l  %56 = phi i32 [ 0, %49 ], [ %218, %217 ]\l  br label %57\l}"];
	Node0x60d4cd0 -> Node0x60d51b0;
	Node0x60d51b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%57:\l57:                                               \l  %58 = phi i32 [ 0, %55 ], [ %190, %57 ]\l  %59 = phi i32 [ 0, %55 ], [ %196, %57 ]\l  %60 = phi i32 [ 0, %55 ], [ %202, %57 ]\l  %61 = phi i32 [ 0, %55 ], [ %208, %57 ]\l  %62 = phi i32 [ 0, %55 ], [ %214, %57 ]\l  %63 = phi i32 [ 0, %55 ], [ %215, %57 ]\l  %64 = lshr i32 %63, 5\l  %65 = and i32 %63, 28\l  %66 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %64\l  %67 = load i32, i32 addrspace(5)* %66, align 4, !tbaa !16\l  %68 = shl nuw i32 1, %65\l  %69 = and i32 %68, %67\l  %70 = icmp eq i32 %69, 0\l  %71 = mul nuw nsw i32 %63, 5\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %72\l  %74 = load i32, i32 addrspace(4)* %73, align 16, !tbaa !16\l  %75 = select i1 %70, i32 0, i32 %74\l  %76 = xor i32 %75, %58\l  %77 = or i32 %71, 1\l  %78 = zext i32 %77 to i64\l  %79 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %78\l  %80 = load i32, i32 addrspace(4)* %79, align 4, !tbaa !16\l  %81 = select i1 %70, i32 0, i32 %80\l  %82 = xor i32 %81, %59\l  %83 = or i32 %71, 2\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %84\l  %86 = load i32, i32 addrspace(4)* %85, align 8, !tbaa !16\l  %87 = select i1 %70, i32 0, i32 %86\l  %88 = xor i32 %87, %60\l  %89 = or i32 %71, 3\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %90\l  %92 = load i32, i32 addrspace(4)* %91, align 4, !tbaa !16\l  %93 = select i1 %70, i32 0, i32 %92\l  %94 = xor i32 %93, %61\l  %95 = add nuw nsw i32 %71, 4\l  %96 = zext i32 %95 to i64\l  %97 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %96\l  %98 = load i32, i32 addrspace(4)* %97, align 16, !tbaa !16\l  %99 = select i1 %70, i32 0, i32 %98\l  %100 = xor i32 %99, %62\l  %101 = or i32 %63, 1\l  %102 = lshr i32 %63, 5\l  %103 = and i32 %101, 29\l  %104 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %102\l  %105 = load i32, i32 addrspace(5)* %104, align 4, !tbaa !16\l  %106 = shl nuw i32 1, %103\l  %107 = and i32 %106, %105\l  %108 = icmp eq i32 %107, 0\l  %109 = mul nuw nsw i32 %101, 5\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %110\l  %112 = load i32, i32 addrspace(4)* %111, align 4, !tbaa !16\l  %113 = select i1 %108, i32 0, i32 %112\l  %114 = xor i32 %113, %76\l  %115 = add nuw nsw i32 %109, 1\l  %116 = zext i32 %115 to i64\l  %117 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %116\l  %118 = load i32, i32 addrspace(4)* %117, align 8, !tbaa !16\l  %119 = select i1 %108, i32 0, i32 %118\l  %120 = xor i32 %119, %82\l  %121 = or i32 %109, 2\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %122\l  %124 = load i32, i32 addrspace(4)* %123, align 4, !tbaa !16\l  %125 = select i1 %108, i32 0, i32 %124\l  %126 = xor i32 %125, %88\l  %127 = add nuw nsw i32 %109, 3\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %128\l  %130 = load i32, i32 addrspace(4)* %129, align 16, !tbaa !16\l  %131 = select i1 %108, i32 0, i32 %130\l  %132 = xor i32 %131, %94\l  %133 = add nuw nsw i32 %109, 4\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %134\l  %136 = load i32, i32 addrspace(4)* %135, align 4, !tbaa !16\l  %137 = select i1 %108, i32 0, i32 %136\l  %138 = xor i32 %137, %100\l  %139 = or i32 %63, 2\l  %140 = lshr i32 %63, 5\l  %141 = and i32 %139, 30\l  %142 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %140\l  %143 = load i32, i32 addrspace(5)* %142, align 4, !tbaa !16\l  %144 = shl nuw i32 1, %141\l  %145 = and i32 %144, %143\l  %146 = icmp eq i32 %145, 0\l  %147 = mul nuw nsw i32 %139, 5\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %148\l  %150 = load i32, i32 addrspace(4)* %149, align 8, !tbaa !16\l  %151 = select i1 %146, i32 0, i32 %150\l  %152 = xor i32 %151, %114\l  %153 = or i32 %147, 1\l  %154 = zext i32 %153 to i64\l  %155 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %154\l  %156 = load i32, i32 addrspace(4)* %155, align 4, !tbaa !16\l  %157 = select i1 %146, i32 0, i32 %156\l  %158 = xor i32 %157, %120\l  %159 = add nuw nsw i32 %147, 2\l  %160 = zext i32 %159 to i64\l  %161 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %160\l  %162 = load i32, i32 addrspace(4)* %161, align 16, !tbaa !16\l  %163 = select i1 %146, i32 0, i32 %162\l  %164 = xor i32 %163, %126\l  %165 = add nuw nsw i32 %147, 3\l  %166 = zext i32 %165 to i64\l  %167 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %166\l  %168 = load i32, i32 addrspace(4)* %167, align 4, !tbaa !16\l  %169 = select i1 %146, i32 0, i32 %168\l  %170 = xor i32 %169, %132\l  %171 = add nuw nsw i32 %147, 4\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %172\l  %174 = load i32, i32 addrspace(4)* %173, align 8, !tbaa !16\l  %175 = select i1 %146, i32 0, i32 %174\l  %176 = xor i32 %175, %138\l  %177 = or i32 %63, 3\l  %178 = lshr i32 %63, 5\l  %179 = and i32 %177, 31\l  %180 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %178\l  %181 = load i32, i32 addrspace(5)* %180, align 4, !tbaa !16\l  %182 = shl nuw i32 1, %179\l  %183 = and i32 %182, %181\l  %184 = icmp eq i32 %183, 0\l  %185 = mul nuw nsw i32 %177, 5\l  %186 = zext i32 %185 to i64\l  %187 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %186\l  %188 = load i32, i32 addrspace(4)* %187, align 4, !tbaa !16\l  %189 = select i1 %184, i32 0, i32 %188\l  %190 = xor i32 %189, %152\l  %191 = add nuw nsw i32 %185, 1\l  %192 = zext i32 %191 to i64\l  %193 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %192\l  %194 = load i32, i32 addrspace(4)* %193, align 16, !tbaa !16\l  %195 = select i1 %184, i32 0, i32 %194\l  %196 = xor i32 %195, %158\l  %197 = add nuw nsw i32 %185, 2\l  %198 = zext i32 %197 to i64\l  %199 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %198\l  %200 = load i32, i32 addrspace(4)* %199, align 4, !tbaa !16\l  %201 = select i1 %184, i32 0, i32 %200\l  %202 = xor i32 %201, %164\l  %203 = add nuw nsw i32 %185, 3\l  %204 = zext i32 %203 to i64\l  %205 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %204\l  %206 = load i32, i32 addrspace(4)* %205, align 8, !tbaa !16\l  %207 = select i1 %184, i32 0, i32 %206\l  %208 = xor i32 %207, %170\l  %209 = add nuw nsw i32 %185, 4\l  %210 = zext i32 %209 to i64\l  %211 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %50, i64 %210\l  %212 = load i32, i32 addrspace(4)* %211, align 4, !tbaa !16\l  %213 = select i1 %184, i32 0, i32 %212\l  %214 = xor i32 %213, %176\l  %215 = add nuw nsw i32 %63, 4\l  %216 = icmp eq i32 %215, 160\l  br i1 %216, label %217, label %57, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x60d51b0:s0 -> Node0x60d5070;
	Node0x60d51b0:s1 -> Node0x60d51b0;
	Node0x60d5070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%217:\l217:                                              \l  store i32 %190, i32 addrspace(5)* %28, align 8, !tbaa !16\l  store i32 %196, i32 addrspace(5)* %29, align 4, !tbaa !16\l  store i32 %202, i32 addrspace(5)* %30, align 8, !tbaa !16\l  store i32 %208, i32 addrspace(5)* %31, align 4, !tbaa !16\l  store i32 %214, i32 addrspace(5)* %32, align 8, !tbaa !16\l  %218 = add nuw nsw i32 %56, 1\l  %219 = icmp eq i32 %218, %47\l  br i1 %219, label %51, label %55, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x60d5070:s0 -> Node0x60d4730;
	Node0x60d5070:s1 -> Node0x60d4cd0;
	Node0x60d4430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%220:\l220:                                              \l  %221 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %221, align 4, !tbaa !29\l  %222 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %222, align 8, !tbaa !30\l  %223 = bitcast %struct.hiprandState addrspace(1)* %25 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %223, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %27, i64 48, i1 false), !tbaa.struct !31\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %27) #5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %224 = icmp ult i32 %22, %2\l  br i1 %224, label %225, label %280\l|{<s0>T|<s1>F}}"];
	Node0x60d4430:s0 -> Node0x60dce50;
	Node0x60d4430:s1 -> Node0x60dcea0;
	Node0x60dce50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%225:\l225:                                              \l  %226 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %24, i32 0, i32 0, i32 5, i64 0\l  %227 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %24, i32 0, i32 0, i32 5, i64 1\l  %228 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %24, i32 0, i32 0, i32 5, i64 2\l  %229 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %24, i32 0, i32 0, i32 5, i64 3\l  %230 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %24, i32 0, i32 0, i32 5, i64 4\l  %231 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %25, i64 0, i32 0, i32 0, i32 0\l  %232 = load i32, i32 addrspace(1)* %226, align 8, !tbaa !16\l  %233 = load i32, i32 addrspace(1)* %227, align 4, !tbaa !16\l  %234 = load i32, i32 addrspace(1)* %228, align 8, !tbaa !16\l  %235 = load i32, i32 addrspace(1)* %229, align 4, !tbaa !16\l  %236 = load i32, i32 addrspace(1)* %230, align 8, !tbaa !16\l  %237 = load i32, i32 addrspace(1)* %231, align 8, !tbaa !20\l  br label %238\l}"];
	Node0x60dce50 -> Node0x60cd770;
	Node0x60cd770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%238:\l238:                                              \l  %239 = phi i32 [ %237, %225 ], [ %266, %238 ]\l  %240 = phi i32 [ %236, %225 ], [ %265, %238 ]\l  %241 = phi i32 [ %235, %225 ], [ %253, %238 ]\l  %242 = phi i32 [ %234, %225 ], [ %240, %238 ]\l  %243 = phi i32 [ %233, %225 ], [ %241, %238 ]\l  %244 = phi i32 [ %232, %225 ], [ %242, %238 ]\l  %245 = phi i32 [ %22, %225 ], [ %277, %238 ]\l  %246 = phi i32 [ 0, %225 ], [ %276, %238 ]\l  %247 = lshr i32 %244, 2\l  %248 = xor i32 %247, %244\l  %249 = shl i32 %240, 4\l  %250 = shl i32 %248, 1\l  %251 = xor i32 %250, %249\l  %252 = xor i32 %251, %248\l  %253 = xor i32 %252, %240\l  %254 = add i32 %239, 362437\l  %255 = add i32 %254, %253\l  %256 = uitofp i32 %255 to float\l  %257 = fmul contract float %256, 0x3DF0000000000000\l  %258 = fadd contract float %257, 0x3DF0000000000000\l  %259 = lshr i32 %243, 2\l  %260 = xor i32 %259, %243\l  %261 = shl i32 %253, 4\l  %262 = shl i32 %260, 1\l  %263 = xor i32 %262, %261\l  %264 = xor i32 %263, %260\l  %265 = xor i32 %264, %253\l  %266 = add i32 %239, 724874\l  %267 = add i32 %265, %266\l  %268 = uitofp i32 %267 to float\l  %269 = fmul contract float %268, 0x3DF0000000000000\l  %270 = fadd contract float %269, 0x3DF0000000000000\l  %271 = fmul contract float %258, %258\l  %272 = fmul contract float %270, %270\l  %273 = fadd contract float %271, %272\l  %274 = fcmp contract olt float %273, 1.000000e+00\l  %275 = zext i1 %274 to i32\l  %276 = add i32 %246, %275\l  %277 = add nsw i32 %245, %21\l  %278 = icmp ult i32 %277, %2\l  br i1 %278, label %238, label %279, !llvm.loop !35\l|{<s0>T|<s1>F}}"];
	Node0x60cd770:s0 -> Node0x60cd770;
	Node0x60cd770:s1 -> Node0x60d8ad0;
	Node0x60d8ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%279:\l279:                                              \l  store i32 %242, i32 addrspace(1)* %226, align 8, !tbaa !16\l  store i32 %241, i32 addrspace(1)* %227, align 4, !tbaa !16\l  store i32 %240, i32 addrspace(1)* %228, align 8, !tbaa !16\l  store i32 %253, i32 addrspace(1)* %229, align 4, !tbaa !16\l  store i32 %265, i32 addrspace(1)* %230, align 8, !tbaa !16\l  store i32 %266, i32 addrspace(1)* %231, align 8, !tbaa !20\l  br label %280\l}"];
	Node0x60d8ad0 -> Node0x60dcea0;
	Node0x60dcea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%280:\l280:                                              \l  %281 = phi i32 [ %276, %279 ], [ 0, %220 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  store i32 %281, i32 addrspace(3)* %26, align 4, !tbaa !16\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %282 = icmp ult i16 %12, 2\l  br i1 %282, label %283, label %284\l|{<s0>T|<s1>F}}"];
	Node0x60dcea0:s0 -> Node0x60df120;
	Node0x60dcea0:s1 -> Node0x60df170;
	Node0x60df120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%283:\l283:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br i1 %40, label %296, label %300\l|{<s0>T|<s1>F}}"];
	Node0x60df120:s0 -> Node0x60e2180;
	Node0x60df120:s1 -> Node0x60e21d0;
	Node0x60df170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%284:\l284:                                              \l  %285 = phi i32 [ %286, %294 ], [ %13, %280 ]\l  %286 = lshr i32 %285, 1\l  %287 = icmp ult i32 %22, %286\l  br i1 %287, label %288, label %294\l|{<s0>T|<s1>F}}"];
	Node0x60df170:s0 -> Node0x60e2570;
	Node0x60df170:s1 -> Node0x60e2310;
	Node0x60e2570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%288:\l288:                                              \l  %289 = load i32, i32 addrspace(3)* %26, align 4, !tbaa !16\l  %290 = add nuw nsw i32 %286, %22\l  %291 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(3)* @sdata, i32\l... 0, i32 %290\l  %292 = load i32, i32 addrspace(3)* %291, align 4, !tbaa !16\l  %293 = add nsw i32 %292, %289\l  store i32 %293, i32 addrspace(3)* %26, align 4, !tbaa !16\l  br label %294\l}"];
	Node0x60e2570 -> Node0x60e2310;
	Node0x60e2310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%294:\l294:                                              \l  %295 = icmp ult i32 %285, 4\l  br i1 %295, label %283, label %284, !llvm.loop !36\l|{<s0>T|<s1>F}}"];
	Node0x60e2310:s0 -> Node0x60df120;
	Node0x60e2310:s1 -> Node0x60df170;
	Node0x60e2180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7093f370",label="{%296:\l296:                                              \l  %297 = load i32, i32 addrspace(3)* getelementptr inbounds ([0 x i32], [0 x\l... i32] addrspace(3)* @sdata, i32 0, i32 0), align 4, !tbaa !16\l  %298 = zext i32 %19 to i64\l  %299 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %298\l  store i32 %297, i32 addrspace(1)* %299, align 4, !tbaa !16\l  br label %300\l}"];
	Node0x60e2180 -> Node0x60e21d0;
	Node0x60e21d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%300:\l300:                                              \l  ret void\l}"];
}
