digraph "CFG for '_Z11kSumRowwisePfS_jjff' function" {
	label="CFG for '_Z11kSumRowwisePfS_jjff' function";

	Node0x4e2b570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = mul i32 %19, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = add i32 %21, %22\l  %24 = mul i32 %23, %14\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %25\l  %27 = icmp ult i32 %26, %3\l  br i1 %27, label %28, label %115\l|{<s0>T|<s1>F}}"];
	Node0x4e2b570:s0 -> Node0x4e2dda0;
	Node0x4e2b570:s1 -> Node0x4e2de30;
	Node0x4e2dda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%28:\l28:                                               \l  %29 = sext i32 %26 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  %31 = icmp eq i32 %2, 0\l  br i1 %31, label %54, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4e2dda0:s0 -> Node0x4e2e110;
	Node0x4e2dda0:s1 -> Node0x4e2e160;
	Node0x4e2e160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%32:\l32:                                               \l  %33 = and i32 %2, 7\l  %34 = icmp ult i32 %2, 8\l  br i1 %34, label %37, label %35\l|{<s0>T|<s1>F}}"];
	Node0x4e2e160:s0 -> Node0x4e2e540;
	Node0x4e2e160:s1 -> Node0x4e2e590;
	Node0x4e2e590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%35:\l35:                                               \l  %36 = and i32 %2, -8\l  br label %61\l}"];
	Node0x4e2e590 -> Node0x4e2e790;
	Node0x4e2e540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = phi float [ undef, %32 ], [ %111, %61 ]\l  %39 = phi i32 [ 0, %32 ], [ %112, %61 ]\l  %40 = phi float [ 0.000000e+00, %32 ], [ %111, %61 ]\l  %41 = icmp eq i32 %33, 0\l  br i1 %41, label %54, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4e2e540:s0 -> Node0x4e2e110;
	Node0x4e2e540:s1 -> Node0x4e2fa00;
	Node0x4e2fa00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %51, %42 ], [ %39, %37 ]\l  %44 = phi float [ %50, %42 ], [ %40, %37 ]\l  %45 = phi i32 [ %52, %42 ], [ 0, %37 ]\l  %46 = mul i32 %43, %3\l  %47 = zext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %30, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %50 = fadd contract float %44, %49\l  %51 = add nuw i32 %43, 1\l  %52 = add i32 %45, 1\l  %53 = icmp eq i32 %52, %33\l  br i1 %53, label %54, label %42, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4e2fa00:s0 -> Node0x4e2e110;
	Node0x4e2fa00:s1 -> Node0x4e2fa00;
	Node0x4e2e110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%54:\l54:                                               \l  %55 = phi float [ 0.000000e+00, %28 ], [ %38, %37 ], [ %50, %42 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %56 = getelementptr inbounds float, float addrspace(1)* %1, i64 %29\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %58 = fmul contract float %57, %5\l  %59 = fmul contract float %55, %4\l  %60 = fadd contract float %59, %58\l  store float %60, float addrspace(1)* %56, align 4, !tbaa !16\l  br label %115\l}"];
	Node0x4e2e110 -> Node0x4e2de30;
	Node0x4e2e790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%61:\l61:                                               \l  %62 = phi i32 [ 0, %35 ], [ %112, %61 ]\l  %63 = phi float [ 0.000000e+00, %35 ], [ %111, %61 ]\l  %64 = phi i32 [ 0, %35 ], [ %113, %61 ]\l  %65 = mul i32 %62, %3\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %30, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %69 = fadd contract float %63, %68\l  %70 = or i32 %62, 1\l  %71 = mul i32 %70, %3\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %30, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %75 = fadd contract float %69, %74\l  %76 = or i32 %62, 2\l  %77 = mul i32 %76, %3\l  %78 = zext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %30, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %81 = fadd contract float %75, %80\l  %82 = or i32 %62, 3\l  %83 = mul i32 %82, %3\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %30, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %87 = fadd contract float %81, %86\l  %88 = or i32 %62, 4\l  %89 = mul i32 %88, %3\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %30, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %93 = fadd contract float %87, %92\l  %94 = or i32 %62, 5\l  %95 = mul i32 %94, %3\l  %96 = zext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %30, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %99 = fadd contract float %93, %98\l  %100 = or i32 %62, 6\l  %101 = mul i32 %100, %3\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %30, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %105 = fadd contract float %99, %104\l  %106 = or i32 %62, 7\l  %107 = mul i32 %106, %3\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %30, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %111 = fadd contract float %105, %110\l  %112 = add nuw i32 %62, 8\l  %113 = add i32 %64, 8\l  %114 = icmp eq i32 %113, %36\l  br i1 %114, label %37, label %61, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4e2e790:s0 -> Node0x4e2e540;
	Node0x4e2e790:s1 -> Node0x4e2e790;
	Node0x4e2de30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%115:\l115:                                              \l  ret void\l}"];
}
