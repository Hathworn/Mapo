digraph "CFG for '_Z15kExtractPatchesPfS_S_S_S_iiiiii' function" {
	label="CFG for '_Z15kExtractPatchesPfS_S_S_S_iiiiii' function";

	Node0x6430080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !6\l  %21 = mul i32 %12, %17\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %22\l  %24 = zext i32 %23 to i64\l  %25 = udiv i32 %20, %17\l  %26 = mul i32 %25, %17\l  %27 = icmp ugt i32 %20, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %17\l  %31 = zext i32 %30 to i64\l  %32 = mul i32 %8, %5\l  %33 = mul i32 %32, %9\l  %34 = mul i32 %33, %10\l  %35 = sext i32 %34 to i64\l  %36 = icmp ult i64 %24, %35\l  br i1 %36, label %37, label %46\l|{<s0>T|<s1>F}}"];
	Node0x6430080:s0 -> Node0x64335d0;
	Node0x6430080:s1 -> Node0x6433660;
	Node0x64335d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%37:\l37:                                               \l  %38 = sext i32 %5 to i64\l  %39 = sext i32 %8 to i64\l  %40 = sext i32 %9 to i64\l  %41 = sext i32 %10 to i64\l  %42 = mul nsw i32 %7, %6\l  %43 = mul nsw i32 %42, %10\l  %44 = sext i32 %42 to i64\l  %45 = sext i32 %6 to i64\l  br label %47\l}"];
	Node0x64335d0 -> Node0x6433b60;
	Node0x6433660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%46:\l46:                                               \l  ret void\l}"];
	Node0x6433b60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi i64 [ %24, %37 ], [ %86, %47 ]\l  %49 = freeze i64 %48\l  %50 = freeze i64 %38\l  %51 = udiv i64 %49, %50\l  %52 = mul i64 %51, %50\l  %53 = sub i64 %49, %52\l  %54 = freeze i64 %39\l  %55 = udiv i64 %51, %54\l  %56 = mul i64 %55, %54\l  %57 = sub i64 %51, %56\l  %58 = freeze i64 %40\l  %59 = udiv i64 %55, %58\l  %60 = mul i64 %59, %58\l  %61 = sub i64 %55, %60\l  %62 = urem i64 %59, %41\l  %63 = getelementptr inbounds float, float addrspace(1)* %4, i64 %53\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !16\l  %65 = fptosi float %64 to i32\l  %66 = sext i32 %65 to i64\l  %67 = add i64 %61, %66\l  %68 = getelementptr inbounds float, float addrspace(1)* %3, i64 %53\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16\l  %70 = fptosi float %69 to i32\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %2, i64 %53\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16\l  %74 = fptosi float %73 to i32\l  %75 = mul nsw i32 %43, %74\l  %76 = sext i32 %75 to i64\l  %77 = mul i64 %62, %44\l  %78 = mul i64 %67, %45\l  %79 = add i64 %77, %57\l  %80 = add i64 %79, %71\l  %81 = add i64 %80, %78\l  %82 = add i64 %81, %76\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  store float %84, float addrspace(1)* %85, align 4, !tbaa !16\l  %86 = add i64 %48, %31\l  %87 = icmp ult i64 %86, %35\l  br i1 %87, label %47, label %46, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6433b60:s0 -> Node0x6433b60;
	Node0x6433b60:s1 -> Node0x6433660;
}
