digraph "CFG for '_Z20graph_determ_weightsPjS_PfjjS0_S0_jfPi' function" {
	label="CFG for '_Z20graph_determ_weightsPjS_PfjjS0_S0_jfPi' function";

	Node0x55c9570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%10:\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = mul i32 %16, %15\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = add i32 %17, %18\l  %20 = add i32 %19, 1234\l  %21 = xor i32 %20, 746559103\l  %22 = mul i32 %21, 1228688033\l  %23 = icmp ult i32 %19, %3\l  br i1 %23, label %24, label %105\l|{<s0>T|<s1>F}}"];
	Node0x55c9570:s0 -> Node0x55cc250;
	Node0x55c9570:s1 -> Node0x55cc2e0;
	Node0x55cc250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l24:                                               \l  %25 = zext i32 %19 to i64\l  %26 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %25\l  %27 = load i32, i32 addrspace(1)* %26, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %28 = add nuw i32 %19, 1\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %29\l  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !7\l  %32 = icmp ult i32 %27, %31\l  br i1 %32, label %33, label %105\l|{<s0>T|<s1>F}}"];
	Node0x55cc250:s0 -> Node0x55cba90;
	Node0x55cc250:s1 -> Node0x55cc2e0;
	Node0x55cba90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%33:\l33:                                               \l  %34 = add i32 %22, 123456789\l  %35 = xor i32 %22, 362436069\l  %36 = add i32 %22, 5783321\l  %37 = add i32 %22, -1966976488\l  %38 = add i32 %7, 1\l  %39 = icmp ugt i32 %38, 1\l  br label %40\l}"];
	Node0x55cba90 -> Node0x55cdc90;
	Node0x55cdc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%40:\l40:                                               \l  %41 = phi i32 [ %27, %33 ], [ %102, %91 ]\l  %42 = phi i32 [ %37, %33 ], [ %98, %91 ]\l  %43 = phi i32 [ %36, %33 ], [ %97, %91 ]\l  %44 = phi i32 [ -1894485380, %33 ], [ %96, %91 ]\l  %45 = phi i32 [ -1452303100, %33 ], [ %95, %91 ]\l  %46 = phi i32 [ %34, %33 ], [ %94, %91 ]\l  %47 = phi i32 [ %35, %33 ], [ %93, %91 ]\l  %48 = sext i32 %41 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %2, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %51 = fmul contract float %50, %8\l  %52 = fpext float %51 to double\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %48\l  %54 = load i32, i32 addrspace(1)* %53, align 4, !tbaa !7\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %5, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %58 = fpext float %57 to double\l  %59 = fsub contract double 1.000000e+00, %58\l  %60 = fmul contract double %59, %52\l  %61 = fptrunc double %60 to float\l  br i1 %39, label %62, label %91\l|{<s0>T|<s1>F}}"];
	Node0x55cdc90:s0 -> Node0x55cff40;
	Node0x55cdc90:s1 -> Node0x55cdd80;
	Node0x55cff40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%62:\l62:                                               \l  %63 = phi i32 [ %89, %88 ], [ 1, %40 ]\l  %64 = phi i32 [ %77, %88 ], [ %42, %40 ]\l  %65 = phi i32 [ %76, %88 ], [ %43, %40 ]\l  %66 = phi i32 [ %65, %88 ], [ %44, %40 ]\l  %67 = phi i32 [ %66, %88 ], [ %45, %40 ]\l  %68 = phi i32 [ %69, %88 ], [ %46, %40 ]\l  %69 = phi i32 [ %67, %88 ], [ %47, %40 ]\l  %70 = lshr i32 %68, 2\l  %71 = xor i32 %70, %68\l  %72 = shl i32 %65, 4\l  %73 = shl i32 %71, 1\l  %74 = xor i32 %73, %72\l  %75 = xor i32 %74, %71\l  %76 = xor i32 %75, %65\l  %77 = add i32 %64, 362437\l  %78 = add i32 %76, %77\l  %79 = uitofp i32 %78 to float\l  %80 = fmul contract float %79, 0x3DF0000000000000\l  %81 = fadd contract float %80, 0x3DF0000000000000\l  %82 = add nsw i32 %63, -1\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %6, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %86 = fmul contract float %85, %61\l  %87 = fcmp contract olt float %81, %86\l  br i1 %87, label %91, label %88\l|{<s0>T|<s1>F}}"];
	Node0x55cff40:s0 -> Node0x55cdd80;
	Node0x55cff40:s1 -> Node0x55d0080;
	Node0x55d0080 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%88:\l88:                                               \l  %89 = add nuw i32 %63, 1\l  %90 = icmp eq i32 %63, %7\l  br i1 %90, label %91, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x55d0080:s0 -> Node0x55cdd80;
	Node0x55d0080:s1 -> Node0x55cff40;
	Node0x55cdd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%91:\l91:                                               \l  %92 = phi i32 [ 1, %40 ], [ %38, %88 ], [ %63, %62 ]\l  %93 = phi i32 [ %47, %40 ], [ %67, %62 ], [ %67, %88 ]\l  %94 = phi i32 [ %46, %40 ], [ %69, %62 ], [ %69, %88 ]\l  %95 = phi i32 [ %45, %40 ], [ %66, %62 ], [ %66, %88 ]\l  %96 = phi i32 [ %44, %40 ], [ %65, %62 ], [ %65, %88 ]\l  %97 = phi i32 [ %43, %40 ], [ %76, %62 ], [ %76, %88 ]\l  %98 = phi i32 [ %42, %40 ], [ %77, %62 ], [ %77, %88 ]\l  %99 = icmp ugt i32 %92, %7\l  %100 = select i1 %99, i32 -1, i32 %92\l  %101 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %48\l  store i32 %100, i32 addrspace(1)* %101, align 4, !tbaa !7\l  %102 = add nuw nsw i32 %41, 1\l  %103 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !7\l  %104 = icmp ult i32 %102, %103\l  br i1 %104, label %40, label %105, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x55cdd80:s0 -> Node0x55cdc90;
	Node0x55cdd80:s1 -> Node0x55cc2e0;
	Node0x55cc2e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%105:\l105:                                              \l  ret void\l}"];
}
