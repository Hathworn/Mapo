digraph "CFG for '_Z49negative_prob_multiply_dense_matrix_vector_kernelPfS_S_jj' function" {
	label="CFG for '_Z49negative_prob_multiply_dense_matrix_vector_kernelPfS_S_jj' function";

	Node0x4d73e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp ult i32 %14, %3\l  br i1 %15, label %16, label %171\l|{<s0>T|<s1>F}}"];
	Node0x4d73e00:s0 -> Node0x4d75ca0;
	Node0x4d73e00:s1 -> Node0x4d75d30;
	Node0x4d75ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp eq i32 %4, 0\l  br i1 %17, label %49, label %18\l|{<s0>T|<s1>F}}"];
	Node0x4d75ca0:s0 -> Node0x4d75f80;
	Node0x4d75ca0:s1 -> Node0x4d75fd0;
	Node0x4d75fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = mul i32 %14, %4\l  %20 = and i32 %4, 7\l  %21 = icmp ult i32 %4, 8\l  br i1 %21, label %24, label %22\l|{<s0>T|<s1>F}}"];
	Node0x4d75fd0:s0 -> Node0x4d76320;
	Node0x4d75fd0:s1 -> Node0x4d76370;
	Node0x4d76370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i32 %4, -8\l  br label %53\l}"];
	Node0x4d76370 -> Node0x4d76570;
	Node0x4d76320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = phi float [ undef, %18 ], [ %167, %53 ]\l  %26 = phi i32 [ 0, %18 ], [ %168, %53 ]\l  %27 = phi float [ 1.000000e+00, %18 ], [ %167, %53 ]\l  %28 = icmp eq i32 %20, 0\l  br i1 %28, label %49, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4d76320:s0 -> Node0x4d75f80;
	Node0x4d76320:s1 -> Node0x4d777e0;
	Node0x4d777e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %46, %29 ], [ %26, %24 ]\l  %31 = phi float [ %45, %29 ], [ %27, %24 ]\l  %32 = phi i32 [ %47, %29 ], [ 0, %24 ]\l  %33 = add i32 %30, %19\l  %34 = zext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = zext i32 %30 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %40 = fmul contract float %36, %39\l  %41 = fpext float %40 to double\l  %42 = fsub contract double 1.000000e+00, %41\l  %43 = fpext float %31 to double\l  %44 = fmul contract double %42, %43\l  %45 = fptrunc double %44 to float\l  %46 = add nuw nsw i32 %30, 1\l  %47 = add i32 %32, 1\l  %48 = icmp eq i32 %47, %20\l  br i1 %48, label %49, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4d777e0:s0 -> Node0x4d75f80;
	Node0x4d777e0:s1 -> Node0x4d777e0;
	Node0x4d75f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%49:\l49:                                               \l  %50 = phi float [ 1.000000e+00, %16 ], [ %25, %24 ], [ %45, %29 ]\l  %51 = zext i32 %14 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %2, i64 %51\l  store float %50, float addrspace(1)* %52, align 4, !tbaa !7\l  br label %171\l}"];
	Node0x4d75f80 -> Node0x4d75d30;
	Node0x4d76570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%53:\l53:                                               \l  %54 = phi i32 [ 0, %22 ], [ %168, %53 ]\l  %55 = phi float [ 1.000000e+00, %22 ], [ %167, %53 ]\l  %56 = phi i32 [ 0, %22 ], [ %169, %53 ]\l  %57 = add i32 %54, %19\l  %58 = zext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %61 = zext i32 %54 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = fmul contract float %60, %63\l  %65 = fpext float %64 to double\l  %66 = fsub contract double 1.000000e+00, %65\l  %67 = fpext float %55 to double\l  %68 = fmul contract double %66, %67\l  %69 = fptrunc double %68 to float\l  %70 = or i32 %54, 1\l  %71 = add i32 %70, %19\l  %72 = zext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = zext i32 %70 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fmul contract float %74, %77\l  %79 = fpext float %78 to double\l  %80 = fsub contract double 1.000000e+00, %79\l  %81 = fpext float %69 to double\l  %82 = fmul contract double %80, %81\l  %83 = fptrunc double %82 to float\l  %84 = or i32 %54, 2\l  %85 = add i32 %84, %19\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = zext i32 %84 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = fmul contract float %88, %91\l  %93 = fpext float %92 to double\l  %94 = fsub contract double 1.000000e+00, %93\l  %95 = fpext float %83 to double\l  %96 = fmul contract double %94, %95\l  %97 = fptrunc double %96 to float\l  %98 = or i32 %54, 3\l  %99 = add i32 %98, %19\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = zext i32 %98 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %1, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %102, %105\l  %107 = fpext float %106 to double\l  %108 = fsub contract double 1.000000e+00, %107\l  %109 = fpext float %97 to double\l  %110 = fmul contract double %108, %109\l  %111 = fptrunc double %110 to float\l  %112 = or i32 %54, 4\l  %113 = add i32 %112, %19\l  %114 = zext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = zext i32 %112 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = fmul contract float %116, %119\l  %121 = fpext float %120 to double\l  %122 = fsub contract double 1.000000e+00, %121\l  %123 = fpext float %111 to double\l  %124 = fmul contract double %122, %123\l  %125 = fptrunc double %124 to float\l  %126 = or i32 %54, 5\l  %127 = add i32 %126, %19\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = zext i32 %126 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %1, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = fmul contract float %130, %133\l  %135 = fpext float %134 to double\l  %136 = fsub contract double 1.000000e+00, %135\l  %137 = fpext float %125 to double\l  %138 = fmul contract double %136, %137\l  %139 = fptrunc double %138 to float\l  %140 = or i32 %54, 6\l  %141 = add i32 %140, %19\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = zext i32 %140 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %1, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %148 = fmul contract float %144, %147\l  %149 = fpext float %148 to double\l  %150 = fsub contract double 1.000000e+00, %149\l  %151 = fpext float %139 to double\l  %152 = fmul contract double %150, %151\l  %153 = fptrunc double %152 to float\l  %154 = or i32 %54, 7\l  %155 = add i32 %154, %19\l  %156 = zext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = zext i32 %154 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %162 = fmul contract float %158, %161\l  %163 = fpext float %162 to double\l  %164 = fsub contract double 1.000000e+00, %163\l  %165 = fpext float %153 to double\l  %166 = fmul contract double %164, %165\l  %167 = fptrunc double %166 to float\l  %168 = add nuw nsw i32 %54, 8\l  %169 = add i32 %56, 8\l  %170 = icmp eq i32 %169, %23\l  br i1 %170, label %24, label %53, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4d76570:s0 -> Node0x4d76320;
	Node0x4d76570:s1 -> Node0x4d76570;
	Node0x4d75d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%171:\l171:                                              \l  ret void\l}"];
}
