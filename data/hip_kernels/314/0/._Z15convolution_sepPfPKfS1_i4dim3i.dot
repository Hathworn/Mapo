digraph "CFG for '_Z15convolution_sepPfPKfS1_i4dim3i' function" {
	label="CFG for '_Z15convolution_sepPfPKfS1_i4dim3i' function";

	Node0x5cc2d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%6:\l  %7 = getelementptr inbounds %struct.dim3, %struct.dim3 addrspace(4)* %4, i64\l... 0, i32 0\l  %8 = load i32, i32 addrspace(4)* %7, align 4, !amdgpu.noclobber !4\l  %9 = getelementptr inbounds %struct.dim3, %struct.dim3 addrspace(4)* %4, i64\l... 0, i32 1\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !amdgpu.noclobber !4\l  %11 = getelementptr inbounds %struct.dim3, %struct.dim3 addrspace(4)* %4,\l... i64 0, i32 2\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !amdgpu.noclobber !4\l  switch i32 %5, label %13 [\l    i32 0, label %17\l    i32 1, label %39\l    i32 2, label %61\l  ]\l|{<s0>def|<s1>0|<s2>1|<s3>2}}"];
	Node0x5cc2d70:s0 -> Node0x5cc24b0;
	Node0x5cc2d70:s1 -> Node0x5cc4a10;
	Node0x5cc2d70:s2 -> Node0x5cc4aa0;
	Node0x5cc2d70:s3 -> Node0x5cc4b30;
	Node0x5cc24b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%13:\l13:                                               \l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !5\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !5\l  br label %83\l}"];
	Node0x5cc24b0 -> Node0x5cc40d0;
	Node0x5cc4a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%17:\l17:                                               \l  %18 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = getelementptr i8, i8 addrspace(4)* %18, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !6, !invariant.load !4\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !5\l  %26 = add i32 %24, %25\l  %27 = zext i32 %26 to i64\l  %28 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %29 = getelementptr i8, i8 addrspace(4)* %18, i64 6\l  %30 = bitcast i8 addrspace(4)* %29 to i16 addrspace(4)*\l  %31 = load i16, i16 addrspace(4)* %30, align 2, !range !6, !invariant.load !4\l  %32 = zext i16 %31 to i32\l  %33 = mul i32 %28, %32\l  %34 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !5\l  %35 = add i32 %33, %34\l  %36 = zext i32 %35 to i64\l  %37 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %38 = zext i32 %37 to i64\l  br label %83\l}"];
	Node0x5cc4a10 -> Node0x5cc40d0;
	Node0x5cc4aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%39:\l39:                                               \l  %40 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %41 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %42 = getelementptr i8, i8 addrspace(4)* %40, i64 4\l  %43 = bitcast i8 addrspace(4)* %42 to i16 addrspace(4)*\l  %44 = load i16, i16 addrspace(4)* %43, align 4, !range !6, !invariant.load !4\l  %45 = zext i16 %44 to i32\l  %46 = mul i32 %41, %45\l  %47 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !5\l  %48 = add i32 %46, %47\l  %49 = zext i32 %48 to i64\l  %50 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %51 = getelementptr i8, i8 addrspace(4)* %40, i64 6\l  %52 = bitcast i8 addrspace(4)* %51 to i16 addrspace(4)*\l  %53 = load i16, i16 addrspace(4)* %52, align 2, !range !6, !invariant.load !4\l  %54 = zext i16 %53 to i32\l  %55 = mul i32 %50, %54\l  %56 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !5\l  %57 = add i32 %55, %56\l  %58 = zext i32 %57 to i64\l  %59 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %60 = zext i32 %59 to i64\l  br label %83\l}"];
	Node0x5cc4aa0 -> Node0x5cc40d0;
	Node0x5cc4b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%61:\l61:                                               \l  %62 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %63 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %64 = getelementptr i8, i8 addrspace(4)* %62, i64 4\l  %65 = bitcast i8 addrspace(4)* %64 to i16 addrspace(4)*\l  %66 = load i16, i16 addrspace(4)* %65, align 4, !range !6, !invariant.load !4\l  %67 = zext i16 %66 to i32\l  %68 = mul i32 %63, %67\l  %69 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !5\l  %70 = add i32 %68, %69\l  %71 = zext i32 %70 to i64\l  %72 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %73 = getelementptr i8, i8 addrspace(4)* %62, i64 6\l  %74 = bitcast i8 addrspace(4)* %73 to i16 addrspace(4)*\l  %75 = load i16, i16 addrspace(4)* %74, align 2, !range !6, !invariant.load !4\l  %76 = zext i16 %75 to i32\l  %77 = mul i32 %72, %76\l  %78 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !5\l  %79 = add i32 %77, %78\l  %80 = zext i32 %79 to i64\l  %81 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %82 = zext i32 %81 to i64\l  br label %83\l}"];
	Node0x5cc4b30 -> Node0x5cc40d0;
	Node0x5cc40d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%83:\l83:                                               \l  %84 = phi i32 [ %16, %13 ], [ %56, %39 ], [ %78, %61 ], [ %34, %17 ]\l  %85 = phi i32 [ %15, %13 ], [ %47, %39 ], [ %69, %61 ], [ %25, %17 ]\l  %86 = phi i8 addrspace(4)* [ %14, %13 ], [ %40, %39 ], [ %62, %61 ], [ %18,\l... %17 ]\l  %87 = phi i64 [ undef, %13 ], [ %60, %39 ], [ %71, %61 ], [ %38, %17 ]\l  %88 = phi i64 [ undef, %13 ], [ %49, %39 ], [ %82, %61 ], [ %36, %17 ]\l  %89 = phi i64 [ undef, %13 ], [ %58, %39 ], [ %80, %61 ], [ %27, %17 ]\l  %90 = zext i32 %8 to i64\l  %91 = icmp ult i64 %89, %90\l  %92 = zext i32 %10 to i64\l  %93 = icmp ult i64 %88, %92\l  %94 = select i1 %91, i1 %93, i1 false\l  %95 = zext i32 %12 to i64\l  %96 = icmp ult i64 %87, %95\l  %97 = select i1 %94, i1 %96, i1 false\l  %98 = mul nuw i64 %87, %92\l  %99 = add nuw i64 %98, %88\l  %100 = mul i64 %99, %90\l  %101 = add i64 %100, %89\l  %102 = sdiv i32 %3, 2\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr i8, i8 addrspace(4)* %86, i64 4\l  %105 = bitcast i8 addrspace(4)* %104 to i16 addrspace(4)*\l  %106 = load i16, i16 addrspace(4)* %105, align 4, !range !6, !invariant.load\l... !4\l  %107 = zext i16 %106 to i64\l  %108 = shl nsw i64 %103, 1\l  %109 = add nsw i64 %108, %107\l  %110 = zext i32 %85 to i64\l  %111 = add nsw i64 %103, %110\l  %112 = zext i32 %84 to i64\l  %113 = icmp ult i32 %85, %102\l  br i1 %113, label %114, label %119\l|{<s0>T|<s1>F}}"];
	Node0x5cc40d0:s0 -> Node0x5cca950;
	Node0x5cc40d0:s1 -> Node0x5cca9a0;
	Node0x5cca950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%114:\l114:                                              \l  %115 = trunc i64 %109 to i32\l  %116 = mul i32 %84, %115\l  %117 = add i32 %116, %85\l  %118 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %117\l  store float 0.000000e+00, float addrspace(3)* %118, align 4, !tbaa !7\l  br label %119\l}"];
	Node0x5cca950 -> Node0x5cca9a0;
	Node0x5cca9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%119:\l119:                                              \l  %120 = sub nsw i64 %107, %103\l  %121 = icmp ugt i64 %120, %110\l  br i1 %121, label %128, label %122\l|{<s0>T|<s1>F}}"];
	Node0x5cca9a0:s0 -> Node0x5ccbad0;
	Node0x5cca9a0:s1 -> Node0x5ccbb20;
	Node0x5ccbb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%122:\l122:                                              \l  %123 = add nsw i64 %111, %103\l  %124 = mul nsw i64 %109, %112\l  %125 = add nsw i64 %123, %124\l  %126 = trunc i64 %125 to i32\l  %127 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %126\l  store float 0.000000e+00, float addrspace(3)* %127, align 4, !tbaa !7\l  br label %128\l}"];
	Node0x5ccbb20 -> Node0x5ccbad0;
	Node0x5ccbad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%128:\l128:                                              \l  br i1 %97, label %129, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5ccbad0:s0 -> Node0x5cc85a0;
	Node0x5ccbad0:s1 -> Node0x5cc85f0;
	Node0x5cc85a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%129:\l129:                                              \l  %130 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  br label %132\l}"];
	Node0x5cc85a0 -> Node0x5cc85f0;
	Node0x5cc85f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%132:\l132:                                              \l  %133 = phi contract float [ %131, %129 ], [ 0.000000e+00, %128 ]\l  %134 = mul nsw i64 %109, %112\l  %135 = add nsw i64 %134, %111\l  %136 = trunc i64 %135 to i32\l  %137 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %136\l  store float %133, float addrspace(3)* %137, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %138 = icmp sgt i32 %3, 0\l  br i1 %138, label %139, label %169\l|{<s0>T|<s1>F}}"];
	Node0x5cc85f0:s0 -> Node0x5ccd3d0;
	Node0x5cc85f0:s1 -> Node0x5ccd460;
	Node0x5ccd3d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%139:\l139:                                              \l  %140 = add nsw i64 %111, %103\l  %141 = add nsw i64 %140, %134\l  %142 = and i32 %3, 7\l  %143 = icmp ult i32 %3, 8\l  br i1 %143, label %147, label %144\l|{<s0>T|<s1>F}}"];
	Node0x5ccd3d0:s0 -> Node0x5ccd810;
	Node0x5ccd3d0:s1 -> Node0x5ccd860;
	Node0x5ccd860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%144:\l144:                                              \l  %145 = and i32 %3, -8\l  %146 = trunc i64 %141 to i32\l  br label %171\l}"];
	Node0x5ccd860 -> Node0x5ccdad0;
	Node0x5ccd810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%147:\l147:                                              \l  %148 = phi float [ undef, %139 ], [ %245, %171 ]\l  %149 = phi i32 [ 0, %139 ], [ %246, %171 ]\l  %150 = phi float [ 0.000000e+00, %139 ], [ %245, %171 ]\l  %151 = icmp eq i32 %142, 0\l  br i1 %151, label %169, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5ccd810:s0 -> Node0x5ccd460;
	Node0x5ccd810:s1 -> Node0x5ccded0;
	Node0x5ccded0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%152:\l152:                                              \l  %153 = trunc i64 %141 to i32\l  br label %154\l}"];
	Node0x5ccded0 -> Node0x5cce080;
	Node0x5cce080 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%154:\l154:                                              \l  %155 = phi i32 [ %149, %152 ], [ %166, %154 ]\l  %156 = phi float [ %150, %152 ], [ %165, %154 ]\l  %157 = phi i32 [ 0, %152 ], [ %167, %154 ]\l  %158 = zext i32 %155 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %2, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %161 = sub i32 %153, %155\l  %162 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %161\l  %163 = load float, float addrspace(3)* %162, align 4, !tbaa !7\l  %164 = fmul contract float %160, %163\l  %165 = fadd contract float %156, %164\l  %166 = add nuw nsw i32 %155, 1\l  %167 = add nuw nsw i32 %157, 1\l  %168 = icmp eq i32 %167, %142\l  br i1 %168, label %169, label %154, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5cce080:s0 -> Node0x5ccd460;
	Node0x5cce080:s1 -> Node0x5cce080;
	Node0x5ccd460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%169:\l169:                                              \l  %170 = phi float [ 0.000000e+00, %132 ], [ %148, %147 ], [ %165, %154 ]\l  br i1 %97, label %249, label %251\l|{<s0>T|<s1>F}}"];
	Node0x5ccd460:s0 -> Node0x5cced20;
	Node0x5ccd460:s1 -> Node0x5cced70;
	Node0x5ccdad0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%171:\l171:                                              \l  %172 = phi i32 [ 0, %144 ], [ %246, %171 ]\l  %173 = phi float [ 0.000000e+00, %144 ], [ %245, %171 ]\l  %174 = phi i32 [ 0, %144 ], [ %247, %171 ]\l  %175 = zext i32 %172 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %2, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %178 = sub i32 %146, %172\l  %179 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %178\l  %180 = load float, float addrspace(3)* %179, align 4, !tbaa !7\l  %181 = fmul contract float %177, %180\l  %182 = fadd contract float %173, %181\l  %183 = or i32 %172, 1\l  %184 = zext i32 %183 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %2, i64 %184\l  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %187 = sub i32 %146, %183\l  %188 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %187\l  %189 = load float, float addrspace(3)* %188, align 4, !tbaa !7\l  %190 = fmul contract float %186, %189\l  %191 = fadd contract float %182, %190\l  %192 = or i32 %172, 2\l  %193 = zext i32 %192 to i64\l  %194 = getelementptr inbounds float, float addrspace(1)* %2, i64 %193\l  %195 = load float, float addrspace(1)* %194, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %196 = sub i32 %146, %192\l  %197 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %196\l  %198 = load float, float addrspace(3)* %197, align 4, !tbaa !7\l  %199 = fmul contract float %195, %198\l  %200 = fadd contract float %191, %199\l  %201 = or i32 %172, 3\l  %202 = zext i32 %201 to i64\l  %203 = getelementptr inbounds float, float addrspace(1)* %2, i64 %202\l  %204 = load float, float addrspace(1)* %203, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %205 = sub i32 %146, %201\l  %206 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %205\l  %207 = load float, float addrspace(3)* %206, align 4, !tbaa !7\l  %208 = fmul contract float %204, %207\l  %209 = fadd contract float %200, %208\l  %210 = or i32 %172, 4\l  %211 = zext i32 %210 to i64\l  %212 = getelementptr inbounds float, float addrspace(1)* %2, i64 %211\l  %213 = load float, float addrspace(1)* %212, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %214 = sub i32 %146, %210\l  %215 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %214\l  %216 = load float, float addrspace(3)* %215, align 4, !tbaa !7\l  %217 = fmul contract float %213, %216\l  %218 = fadd contract float %209, %217\l  %219 = or i32 %172, 5\l  %220 = zext i32 %219 to i64\l  %221 = getelementptr inbounds float, float addrspace(1)* %2, i64 %220\l  %222 = load float, float addrspace(1)* %221, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %223 = sub i32 %146, %219\l  %224 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %223\l  %225 = load float, float addrspace(3)* %224, align 4, !tbaa !7\l  %226 = fmul contract float %222, %225\l  %227 = fadd contract float %218, %226\l  %228 = or i32 %172, 6\l  %229 = zext i32 %228 to i64\l  %230 = getelementptr inbounds float, float addrspace(1)* %2, i64 %229\l  %231 = load float, float addrspace(1)* %230, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %232 = sub i32 %146, %228\l  %233 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %232\l  %234 = load float, float addrspace(3)* %233, align 4, !tbaa !7\l  %235 = fmul contract float %231, %234\l  %236 = fadd contract float %227, %235\l  %237 = or i32 %172, 7\l  %238 = zext i32 %237 to i64\l  %239 = getelementptr inbounds float, float addrspace(1)* %2, i64 %238\l  %240 = load float, float addrspace(1)* %239, align 4, !tbaa !7,\l... !amdgpu.noclobber !4\l  %241 = sub i32 %146, %237\l  %242 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)*\l... @s_image, i32 0, i32 %241\l  %243 = load float, float addrspace(3)* %242, align 4, !tbaa !7\l  %244 = fmul contract float %240, %243\l  %245 = fadd contract float %236, %244\l  %246 = add nuw nsw i32 %172, 8\l  %247 = add i32 %174, 8\l  %248 = icmp eq i32 %247, %145\l  br i1 %248, label %147, label %171, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5ccdad0:s0 -> Node0x5ccd810;
	Node0x5ccdad0:s1 -> Node0x5ccdad0;
	Node0x5cced20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%249:\l249:                                              \l  %250 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  store float %170, float addrspace(1)* %250, align 4, !tbaa !7\l  br label %251\l}"];
	Node0x5cced20 -> Node0x5cced70;
	Node0x5cced70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%251:\l251:                                              \l  ret void\l}"];
}
