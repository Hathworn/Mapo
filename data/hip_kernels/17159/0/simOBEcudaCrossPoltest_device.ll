; ModuleID = '../data/hip_kernels/17159/0/main.cu'
source_filename = "../data/hip_kernels/17159/0/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z22simOBEcudaCrossPoltestPdPKdS1_S1_dddddd(double addrspace(1)* nocapture writeonly %0, double addrspace(1)* nocapture readonly %1, double addrspace(1)* nocapture readonly %2, double addrspace(1)* nocapture readonly %3, double %4, double %5, double %6, double %7, double %8, double %9) local_unnamed_addr #0 {
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4
  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*
  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5
  %16 = zext i16 %15 to i32
  %17 = mul i32 %11, %16
  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %19 = add i32 %17, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double, double addrspace(1)* %1, i64 %20
  %22 = load double, double addrspace(1)* %21, align 8, !tbaa !7, !amdgpu.noclobber !5
  %23 = getelementptr inbounds double, double addrspace(1)* %2, i64 %20
  %24 = load double, double addrspace(1)* %23, align 8, !tbaa !7, !amdgpu.noclobber !5
  %25 = fmul contract double %24, 0x400921FB60000000
  %26 = fdiv contract double %25, 1.800000e+02
  %27 = getelementptr inbounds double, double addrspace(1)* %3, i64 %20
  %28 = load double, double addrspace(1)* %27, align 8, !tbaa !7, !amdgpu.noclobber !5
  %29 = fmul contract double %28, 0x400921FB60000000
  %30 = fdiv contract double %29, 1.800000e+02
  %31 = fmul contract double %9, 2.000000e+00
  %32 = fdiv contract double %31, 1.000000e-01
  %33 = tail call double @llvm.round.f64(double %32)
  %34 = fptosi double %33 to i32
  %35 = sitofp i32 %34 to double
  %36 = fdiv contract double %31, %35
  %37 = fmul contract double %36, 5.000000e-01
  %38 = icmp sgt i32 %34, 0
  br i1 %38, label %39, label %470

39:                                               ; preds = %10
  %40 = fadd contract double %6, %8
  %41 = fsub contract double %40, %7
  %42 = tail call double @llvm.fabs.f64(double %26)
  %43 = fcmp olt double %42, 0x41D0000000000000
  %44 = tail call double @llvm.amdgcn.trig.preop.f64(double %42, i32 0)
  %45 = tail call double @llvm.amdgcn.trig.preop.f64(double %42, i32 1)
  %46 = tail call double @llvm.amdgcn.trig.preop.f64(double %42, i32 2)
  %47 = fcmp oge double %42, 0x7B00000000000000
  %48 = tail call double @llvm.amdgcn.ldexp.f64(double %42, i32 -128)
  %49 = select i1 %47, double %48, double %42
  %50 = fmul double %46, %49
  %51 = fneg double %50
  %52 = tail call double @llvm.fma.f64(double %46, double %49, double %51)
  %53 = fmul double %45, %49
  %54 = fneg double %53
  %55 = tail call double @llvm.fma.f64(double %45, double %49, double %54)
  %56 = fmul double %44, %49
  %57 = fneg double %56
  %58 = tail call double @llvm.fma.f64(double %44, double %49, double %57)
  %59 = fadd double %53, %58
  %60 = fsub double %59, %53
  %61 = fsub double %59, %60
  %62 = fsub double %58, %60
  %63 = fsub double %53, %61
  %64 = fadd double %62, %63
  %65 = fadd double %50, %55
  %66 = fsub double %65, %50
  %67 = fsub double %65, %66
  %68 = fsub double %55, %66
  %69 = fsub double %50, %67
  %70 = fadd double %68, %69
  %71 = fadd double %65, %64
  %72 = fsub double %71, %65
  %73 = fsub double %71, %72
  %74 = fsub double %64, %72
  %75 = fsub double %65, %73
  %76 = fadd double %74, %75
  %77 = fadd double %70, %76
  %78 = fadd double %52, %77
  %79 = fadd double %56, %59
  %80 = fsub double %79, %56
  %81 = fsub double %59, %80
  %82 = fadd double %81, %71
  %83 = fsub double %82, %81
  %84 = fsub double %71, %83
  %85 = fadd double %84, %78
  %86 = tail call double @llvm.amdgcn.ldexp.f64(double %79, i32 -2)
  %87 = tail call double @llvm.amdgcn.fract.f64(double %86)
  %88 = tail call i1 @llvm.amdgcn.class.f64(double %86, i32 516)
  %89 = select i1 %88, double 0.000000e+00, double %87
  %90 = tail call double @llvm.amdgcn.ldexp.f64(double %89, i32 2)
  %91 = fadd double %90, %82
  %92 = fcmp olt double %91, 0.000000e+00
  %93 = select i1 %92, double 4.000000e+00, double 0.000000e+00
  %94 = fadd double %90, %93
  %95 = fadd double %82, %94
  %96 = fptosi double %95 to i32
  %97 = sitofp i32 %96 to double
  %98 = fsub double %94, %97
  %99 = fadd double %82, %98
  %100 = fsub double %99, %98
  %101 = fsub double %82, %100
  %102 = fadd double %85, %101
  %103 = fcmp oge double %99, 5.000000e-01
  %104 = zext i1 %103 to i32
  %105 = add nsw i32 %104, %96
  %106 = select i1 %103, double 1.000000e+00, double 0.000000e+00
  %107 = fsub double %99, %106
  %108 = fadd double %107, %102
  %109 = fsub double %108, %107
  %110 = fsub double %102, %109
  %111 = fmul double %108, 0x3FF921FB54442D18
  %112 = fneg double %111
  %113 = tail call double @llvm.fma.f64(double %108, double 0x3FF921FB54442D18, double %112)
  %114 = tail call double @llvm.fma.f64(double %108, double 0x3C91A62633145C07, double %113)
  %115 = tail call double @llvm.fma.f64(double %110, double 0x3FF921FB54442D18, double %114)
  %116 = fadd double %111, %115
  %117 = fsub double %116, %111
  %118 = fsub double %115, %117
  %119 = fmul double %116, %116
  %120 = fmul double %119, 5.000000e-01
  %121 = fsub double 1.000000e+00, %120
  %122 = fsub double 1.000000e+00, %121
  %123 = fsub double %122, %120
  %124 = fmul double %119, %119
  %125 = tail call double @llvm.fma.f64(double %119, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %126 = tail call double @llvm.fma.f64(double %119, double %125, double 0xBE927E4FA17F65F6)
  %127 = tail call double @llvm.fma.f64(double %119, double %126, double 0x3EFA01A019F4EC90)
  %128 = tail call double @llvm.fma.f64(double %119, double %127, double 0xBF56C16C16C16967)
  %129 = tail call double @llvm.fma.f64(double %119, double %128, double 0x3FA5555555555555)
  %130 = fneg double %118
  %131 = tail call double @llvm.fma.f64(double %116, double %130, double %123)
  %132 = tail call double @llvm.fma.f64(double %124, double %129, double %131)
  %133 = fadd double %121, %132
  %134 = tail call double @llvm.fma.f64(double %119, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %135 = tail call double @llvm.fma.f64(double %119, double %134, double 0x3EC71DE3796CDE01)
  %136 = tail call double @llvm.fma.f64(double %119, double %135, double 0xBF2A01A019E83E5C)
  %137 = tail call double @llvm.fma.f64(double %119, double %136, double 0x3F81111111110BB3)
  %138 = fneg double %119
  %139 = fmul double %116, %138
  %140 = fmul double %118, 5.000000e-01
  %141 = tail call double @llvm.fma.f64(double %139, double %137, double %140)
  %142 = tail call double @llvm.fma.f64(double %119, double %141, double %130)
  %143 = tail call double @llvm.fma.f64(double %139, double 0xBFC5555555555555, double %142)
  %144 = fsub double %116, %143
  %145 = fneg double %144
  %146 = and i32 %105, 1
  %147 = icmp eq i32 %146, 0
  %148 = select i1 %147, double %133, double %145
  %149 = bitcast double %148 to <2 x i32>
  %150 = shl i32 %105, 30
  %151 = and i32 %150, -2147483648
  %152 = extractelement <2 x i32> %149, i64 1
  %153 = xor i32 %152, %151
  %154 = insertelement <2 x i32> %149, i32 %153, i64 1
  %155 = tail call i1 @llvm.amdgcn.class.f64(double %42, i32 504)
  %156 = select i1 %155, <2 x i32> %154, <2 x i32> <i32 0, i32 2146959360>
  %157 = fmul double %42, 0x3FE45F306DC9C883
  %158 = tail call double @llvm.rint.f64(double %157)
  %159 = tail call double @llvm.fma.f64(double %158, double 0xBFF921FB54442D18, double %42)
  %160 = tail call double @llvm.fma.f64(double %158, double 0xBC91A62633145C00, double %159)
  %161 = fmul double %158, 0x3C91A62633145C00
  %162 = fneg double %161
  %163 = tail call double @llvm.fma.f64(double %158, double 0x3C91A62633145C00, double %162)
  %164 = fsub double %159, %161
  %165 = fsub double %159, %164
  %166 = fsub double %165, %161
  %167 = fsub double %164, %160
  %168 = fadd double %167, %166
  %169 = fsub double %168, %163
  %170 = tail call double @llvm.fma.f64(double %158, double 0xB97B839A252049C0, double %169)
  %171 = fadd double %160, %170
  %172 = fsub double %171, %160
  %173 = fsub double %170, %172
  %174 = fptosi double %158 to i32
  %175 = fmul double %171, %171
  %176 = fmul double %175, 5.000000e-01
  %177 = fsub double 1.000000e+00, %176
  %178 = fsub double 1.000000e+00, %177
  %179 = fsub double %178, %176
  %180 = fmul double %175, %175
  %181 = tail call double @llvm.fma.f64(double %175, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %182 = tail call double @llvm.fma.f64(double %175, double %181, double 0xBE927E4FA17F65F6)
  %183 = tail call double @llvm.fma.f64(double %175, double %182, double 0x3EFA01A019F4EC90)
  %184 = tail call double @llvm.fma.f64(double %175, double %183, double 0xBF56C16C16C16967)
  %185 = tail call double @llvm.fma.f64(double %175, double %184, double 0x3FA5555555555555)
  %186 = fneg double %173
  %187 = tail call double @llvm.fma.f64(double %171, double %186, double %179)
  %188 = tail call double @llvm.fma.f64(double %180, double %185, double %187)
  %189 = fadd double %177, %188
  %190 = tail call double @llvm.fma.f64(double %175, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %191 = tail call double @llvm.fma.f64(double %175, double %190, double 0x3EC71DE3796CDE01)
  %192 = tail call double @llvm.fma.f64(double %175, double %191, double 0xBF2A01A019E83E5C)
  %193 = tail call double @llvm.fma.f64(double %175, double %192, double 0x3F81111111110BB3)
  %194 = fneg double %175
  %195 = fmul double %171, %194
  %196 = fmul double %173, 5.000000e-01
  %197 = tail call double @llvm.fma.f64(double %195, double %193, double %196)
  %198 = tail call double @llvm.fma.f64(double %175, double %197, double %186)
  %199 = tail call double @llvm.fma.f64(double %195, double 0xBFC5555555555555, double %198)
  %200 = fsub double %171, %199
  %201 = fneg double %200
  %202 = and i32 %174, 1
  %203 = icmp eq i32 %202, 0
  %204 = select i1 %203, double %189, double %201
  %205 = bitcast double %204 to <2 x i32>
  %206 = shl i32 %174, 30
  %207 = and i32 %206, -2147483648
  %208 = extractelement <2 x i32> %205, i64 1
  %209 = xor i32 %208, %207
  %210 = insertelement <2 x i32> %205, i32 %209, i64 1
  %211 = select i1 %155, <2 x i32> %210, <2 x i32> <i32 0, i32 2146959360>
  %212 = bitcast double %26 to <2 x i32>
  %213 = extractelement <2 x i32> %212, i64 1
  %214 = tail call double @llvm.fabs.f64(double %30)
  %215 = fcmp olt double %214, 0x41D0000000000000
  %216 = tail call double @llvm.amdgcn.trig.preop.f64(double %214, i32 0)
  %217 = tail call double @llvm.amdgcn.trig.preop.f64(double %214, i32 1)
  %218 = tail call double @llvm.amdgcn.trig.preop.f64(double %214, i32 2)
  %219 = fcmp oge double %214, 0x7B00000000000000
  %220 = tail call double @llvm.amdgcn.ldexp.f64(double %214, i32 -128)
  %221 = select i1 %219, double %220, double %214
  %222 = fmul double %218, %221
  %223 = fneg double %222
  %224 = tail call double @llvm.fma.f64(double %218, double %221, double %223)
  %225 = fmul double %217, %221
  %226 = fneg double %225
  %227 = tail call double @llvm.fma.f64(double %217, double %221, double %226)
  %228 = fmul double %216, %221
  %229 = fneg double %228
  %230 = tail call double @llvm.fma.f64(double %216, double %221, double %229)
  %231 = fadd double %225, %230
  %232 = fsub double %231, %225
  %233 = fsub double %231, %232
  %234 = fsub double %230, %232
  %235 = fsub double %225, %233
  %236 = fadd double %234, %235
  %237 = fadd double %222, %227
  %238 = fsub double %237, %222
  %239 = fsub double %237, %238
  %240 = fsub double %227, %238
  %241 = fsub double %222, %239
  %242 = fadd double %240, %241
  %243 = fadd double %237, %236
  %244 = fsub double %243, %237
  %245 = fsub double %243, %244
  %246 = fsub double %236, %244
  %247 = fsub double %237, %245
  %248 = fadd double %246, %247
  %249 = fadd double %242, %248
  %250 = fadd double %224, %249
  %251 = fadd double %228, %231
  %252 = fsub double %251, %228
  %253 = fsub double %231, %252
  %254 = fadd double %253, %243
  %255 = fsub double %254, %253
  %256 = fsub double %243, %255
  %257 = fadd double %256, %250
  %258 = tail call double @llvm.amdgcn.ldexp.f64(double %251, i32 -2)
  %259 = tail call double @llvm.amdgcn.fract.f64(double %258)
  %260 = tail call i1 @llvm.amdgcn.class.f64(double %258, i32 516)
  %261 = select i1 %260, double 0.000000e+00, double %259
  %262 = tail call double @llvm.amdgcn.ldexp.f64(double %261, i32 2)
  %263 = fadd double %262, %254
  %264 = fcmp olt double %263, 0.000000e+00
  %265 = select i1 %264, double 4.000000e+00, double 0.000000e+00
  %266 = fadd double %262, %265
  %267 = fadd double %254, %266
  %268 = fptosi double %267 to i32
  %269 = sitofp i32 %268 to double
  %270 = fsub double %266, %269
  %271 = fadd double %254, %270
  %272 = fsub double %271, %270
  %273 = fsub double %254, %272
  %274 = fadd double %257, %273
  %275 = fcmp oge double %271, 5.000000e-01
  %276 = zext i1 %275 to i32
  %277 = add nsw i32 %276, %268
  %278 = select i1 %275, double 1.000000e+00, double 0.000000e+00
  %279 = fsub double %271, %278
  %280 = fadd double %279, %274
  %281 = fsub double %280, %279
  %282 = fsub double %274, %281
  %283 = fmul double %280, 0x3FF921FB54442D18
  %284 = fneg double %283
  %285 = tail call double @llvm.fma.f64(double %280, double 0x3FF921FB54442D18, double %284)
  %286 = tail call double @llvm.fma.f64(double %280, double 0x3C91A62633145C07, double %285)
  %287 = tail call double @llvm.fma.f64(double %282, double 0x3FF921FB54442D18, double %286)
  %288 = fadd double %283, %287
  %289 = fsub double %288, %283
  %290 = fsub double %287, %289
  %291 = fmul double %288, %288
  %292 = fmul double %291, 5.000000e-01
  %293 = fsub double 1.000000e+00, %292
  %294 = fsub double 1.000000e+00, %293
  %295 = fsub double %294, %292
  %296 = fmul double %291, %291
  %297 = tail call double @llvm.fma.f64(double %291, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %298 = tail call double @llvm.fma.f64(double %291, double %297, double 0xBE927E4FA17F65F6)
  %299 = tail call double @llvm.fma.f64(double %291, double %298, double 0x3EFA01A019F4EC90)
  %300 = tail call double @llvm.fma.f64(double %291, double %299, double 0xBF56C16C16C16967)
  %301 = tail call double @llvm.fma.f64(double %291, double %300, double 0x3FA5555555555555)
  %302 = fneg double %290
  %303 = tail call double @llvm.fma.f64(double %288, double %302, double %295)
  %304 = tail call double @llvm.fma.f64(double %296, double %301, double %303)
  %305 = fadd double %293, %304
  %306 = tail call double @llvm.fma.f64(double %291, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %307 = tail call double @llvm.fma.f64(double %291, double %306, double 0x3EC71DE3796CDE01)
  %308 = tail call double @llvm.fma.f64(double %291, double %307, double 0xBF2A01A019E83E5C)
  %309 = tail call double @llvm.fma.f64(double %291, double %308, double 0x3F81111111110BB3)
  %310 = fneg double %291
  %311 = fmul double %288, %310
  %312 = fmul double %290, 5.000000e-01
  %313 = tail call double @llvm.fma.f64(double %311, double %309, double %312)
  %314 = tail call double @llvm.fma.f64(double %291, double %313, double %302)
  %315 = tail call double @llvm.fma.f64(double %311, double 0xBFC5555555555555, double %314)
  %316 = fsub double %288, %315
  %317 = fneg double %316
  %318 = and i32 %277, 1
  %319 = icmp eq i32 %318, 0
  %320 = select i1 %319, double %305, double %317
  %321 = bitcast double %320 to <2 x i32>
  %322 = shl i32 %277, 30
  %323 = and i32 %322, -2147483648
  %324 = extractelement <2 x i32> %321, i64 1
  %325 = xor i32 %324, %323
  %326 = insertelement <2 x i32> %321, i32 %325, i64 1
  %327 = tail call i1 @llvm.amdgcn.class.f64(double %214, i32 504)
  %328 = select i1 %327, <2 x i32> %326, <2 x i32> <i32 0, i32 2146959360>
  %329 = fmul double %214, 0x3FE45F306DC9C883
  %330 = tail call double @llvm.rint.f64(double %329)
  %331 = tail call double @llvm.fma.f64(double %330, double 0xBFF921FB54442D18, double %214)
  %332 = tail call double @llvm.fma.f64(double %330, double 0xBC91A62633145C00, double %331)
  %333 = fmul double %330, 0x3C91A62633145C00
  %334 = fneg double %333
  %335 = tail call double @llvm.fma.f64(double %330, double 0x3C91A62633145C00, double %334)
  %336 = fsub double %331, %333
  %337 = fsub double %331, %336
  %338 = fsub double %337, %333
  %339 = fsub double %336, %332
  %340 = fadd double %339, %338
  %341 = fsub double %340, %335
  %342 = tail call double @llvm.fma.f64(double %330, double 0xB97B839A252049C0, double %341)
  %343 = fadd double %332, %342
  %344 = fsub double %343, %332
  %345 = fsub double %342, %344
  %346 = fptosi double %330 to i32
  %347 = fmul double %343, %343
  %348 = fmul double %347, 5.000000e-01
  %349 = fsub double 1.000000e+00, %348
  %350 = fsub double 1.000000e+00, %349
  %351 = fsub double %350, %348
  %352 = fmul double %347, %347
  %353 = tail call double @llvm.fma.f64(double %347, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %354 = tail call double @llvm.fma.f64(double %347, double %353, double 0xBE927E4FA17F65F6)
  %355 = tail call double @llvm.fma.f64(double %347, double %354, double 0x3EFA01A019F4EC90)
  %356 = tail call double @llvm.fma.f64(double %347, double %355, double 0xBF56C16C16C16967)
  %357 = tail call double @llvm.fma.f64(double %347, double %356, double 0x3FA5555555555555)
  %358 = fneg double %345
  %359 = tail call double @llvm.fma.f64(double %343, double %358, double %351)
  %360 = tail call double @llvm.fma.f64(double %352, double %357, double %359)
  %361 = fadd double %349, %360
  %362 = tail call double @llvm.fma.f64(double %347, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %363 = tail call double @llvm.fma.f64(double %347, double %362, double 0x3EC71DE3796CDE01)
  %364 = tail call double @llvm.fma.f64(double %347, double %363, double 0xBF2A01A019E83E5C)
  %365 = tail call double @llvm.fma.f64(double %347, double %364, double 0x3F81111111110BB3)
  %366 = fneg double %347
  %367 = fmul double %343, %366
  %368 = fmul double %345, 5.000000e-01
  %369 = tail call double @llvm.fma.f64(double %367, double %365, double %368)
  %370 = tail call double @llvm.fma.f64(double %347, double %369, double %358)
  %371 = tail call double @llvm.fma.f64(double %367, double 0xBFC5555555555555, double %370)
  %372 = fsub double %343, %371
  %373 = fneg double %372
  %374 = and i32 %346, 1
  %375 = icmp eq i32 %374, 0
  %376 = select i1 %375, double %361, double %373
  %377 = bitcast double %376 to <2 x i32>
  %378 = shl i32 %346, 30
  %379 = and i32 %378, -2147483648
  %380 = extractelement <2 x i32> %377, i64 1
  %381 = xor i32 %380, %379
  %382 = insertelement <2 x i32> %377, i32 %381, i64 1
  %383 = select i1 %327, <2 x i32> %382, <2 x i32> <i32 0, i32 2146959360>
  %384 = bitcast double %30 to <2 x i32>
  %385 = extractelement <2 x i32> %384, i64 1
  %386 = fadd contract double %4, %4
  %387 = fdiv contract double %36, 6.000000e+00
  %388 = select i1 %43, i32 %206, i32 %150
  %389 = select i1 %43, i32 %202, i32 %146
  %390 = select i1 %43, double %200, double %144
  %391 = select i1 %43, double %189, double %133
  %392 = select i1 %43, <2 x i32> %211, <2 x i32> %156
  %393 = bitcast <2 x i32> %392 to double
  %394 = icmp eq i32 %389, 0
  %395 = select i1 %394, double %390, double %391
  %396 = bitcast double %395 to <2 x i32>
  %397 = xor i32 %388, %213
  %398 = and i32 %397, -2147483648
  %399 = extractelement <2 x i32> %396, i64 1
  %400 = xor i32 %399, %398
  %401 = insertelement <2 x i32> %396, i32 %400, i64 1
  %402 = select i1 %155, <2 x i32> %401, <2 x i32> <i32 0, i32 2146959360>
  %403 = bitcast <2 x i32> %402 to double
  %404 = bitcast <2 x i32> %328 to double
  %405 = icmp eq i32 %318, 0
  %406 = select i1 %405, double %316, double %305
  %407 = bitcast double %406 to <2 x i32>
  %408 = xor i32 %322, %385
  %409 = and i32 %408, -2147483648
  %410 = extractelement <2 x i32> %407, i64 1
  %411 = xor i32 %410, %409
  %412 = insertelement <2 x i32> %407, i32 %411, i64 1
  %413 = select i1 %327, <2 x i32> %412, <2 x i32> <i32 0, i32 2146959360>
  %414 = bitcast <2 x i32> %413 to double
  %415 = bitcast <2 x i32> %328 to double
  %416 = icmp eq i32 %318, 0
  %417 = select i1 %416, double %316, double %305
  %418 = bitcast double %417 to <2 x i32>
  %419 = xor i32 %322, %385
  %420 = and i32 %419, -2147483648
  %421 = extractelement <2 x i32> %418, i64 1
  %422 = xor i32 %421, %420
  %423 = insertelement <2 x i32> %418, i32 %422, i64 1
  %424 = select i1 %327, <2 x i32> %423, <2 x i32> <i32 0, i32 2146959360>
  %425 = bitcast <2 x i32> %424 to double
  %426 = bitcast <2 x i32> %328 to double
  %427 = icmp eq i32 %318, 0
  %428 = select i1 %427, double %316, double %305
  %429 = bitcast double %428 to <2 x i32>
  %430 = xor i32 %322, %385
  %431 = and i32 %430, -2147483648
  %432 = extractelement <2 x i32> %429, i64 1
  %433 = xor i32 %432, %431
  %434 = insertelement <2 x i32> %429, i32 %433, i64 1
  %435 = select i1 %327, <2 x i32> %434, <2 x i32> <i32 0, i32 2146959360>
  %436 = bitcast <2 x i32> %435 to double
  %437 = bitcast <2 x i32> %383 to double
  %438 = icmp eq i32 %374, 0
  %439 = select i1 %438, double %372, double %361
  %440 = bitcast double %439 to <2 x i32>
  %441 = xor i32 %378, %385
  %442 = and i32 %441, -2147483648
  %443 = extractelement <2 x i32> %440, i64 1
  %444 = xor i32 %443, %442
  %445 = insertelement <2 x i32> %440, i32 %444, i64 1
  %446 = select i1 %327, <2 x i32> %445, <2 x i32> <i32 0, i32 2146959360>
  %447 = bitcast <2 x i32> %446 to double
  %448 = bitcast <2 x i32> %383 to double
  %449 = icmp eq i32 %374, 0
  %450 = select i1 %449, double %372, double %361
  %451 = bitcast double %450 to <2 x i32>
  %452 = xor i32 %378, %385
  %453 = and i32 %452, -2147483648
  %454 = extractelement <2 x i32> %451, i64 1
  %455 = xor i32 %454, %453
  %456 = insertelement <2 x i32> %451, i32 %455, i64 1
  %457 = select i1 %327, <2 x i32> %456, <2 x i32> <i32 0, i32 2146959360>
  %458 = bitcast <2 x i32> %457 to double
  %459 = bitcast <2 x i32> %383 to double
  %460 = icmp eq i32 %374, 0
  %461 = select i1 %460, double %372, double %361
  %462 = bitcast double %461 to <2 x i32>
  %463 = xor i32 %378, %385
  %464 = and i32 %463, -2147483648
  %465 = extractelement <2 x i32> %462, i64 1
  %466 = xor i32 %465, %464
  %467 = insertelement <2 x i32> %462, i32 %466, i64 1
  %468 = select i1 %327, <2 x i32> %467, <2 x i32> <i32 0, i32 2146959360>
  %469 = bitcast <2 x i32> %468 to double
  br label %473

470:                                              ; preds = %2525, %10
  %471 = phi double [ 0.000000e+00, %10 ], [ %2693, %2525 ]
  %472 = getelementptr inbounds double, double addrspace(1)* %0, i64 %20
  store double %471, double addrspace(1)* %472, align 8, !tbaa !7
  ret void

473:                                              ; preds = %39, %2525
  %474 = phi double [ 0.000000e+00, %39 ], [ %2645, %2525 ]
  %475 = phi double [ 0.000000e+00, %39 ], [ %2651, %2525 ]
  %476 = phi double [ 0.000000e+00, %39 ], [ %2657, %2525 ]
  %477 = phi double [ 0.000000e+00, %39 ], [ %2663, %2525 ]
  %478 = phi double [ 0.000000e+00, %39 ], [ %2669, %2525 ]
  %479 = phi double [ 0.000000e+00, %39 ], [ %2675, %2525 ]
  %480 = phi double [ 1.000000e+00, %39 ], [ %2681, %2525 ]
  %481 = phi double [ 0.000000e+00, %39 ], [ %2687, %2525 ]
  %482 = phi double [ 0.000000e+00, %39 ], [ %2693, %2525 ]
  %483 = phi i32 [ 0, %39 ], [ %2694, %2525 ]
  %484 = sitofp i32 %483 to double
  %485 = fmul contract double %36, %484
  %486 = fsub contract double %485, %9
  %487 = fmul contract double %486, %4
  %488 = tail call double @llvm.fabs.f64(double %487)
  %489 = fcmp olt double %488, 0x41D0000000000000
  br i1 %489, label %490, label %509

490:                                              ; preds = %473
  %491 = fmul double %488, 0x3FE45F306DC9C883
  %492 = tail call double @llvm.rint.f64(double %491)
  %493 = tail call double @llvm.fma.f64(double %492, double 0xBFF921FB54442D18, double %488)
  %494 = tail call double @llvm.fma.f64(double %492, double 0xBC91A62633145C00, double %493)
  %495 = fmul double %492, 0x3C91A62633145C00
  %496 = fneg double %495
  %497 = tail call double @llvm.fma.f64(double %492, double 0x3C91A62633145C00, double %496)
  %498 = fsub double %493, %495
  %499 = fsub double %493, %498
  %500 = fsub double %499, %495
  %501 = fsub double %498, %494
  %502 = fadd double %501, %500
  %503 = fsub double %502, %497
  %504 = tail call double @llvm.fma.f64(double %492, double 0xB97B839A252049C0, double %503)
  %505 = fadd double %494, %504
  %506 = fsub double %505, %494
  %507 = fsub double %504, %506
  %508 = fptosi double %492 to i32
  br label %585

509:                                              ; preds = %473
  %510 = tail call double @llvm.amdgcn.trig.preop.f64(double %488, i32 0)
  %511 = tail call double @llvm.amdgcn.trig.preop.f64(double %488, i32 1)
  %512 = tail call double @llvm.amdgcn.trig.preop.f64(double %488, i32 2)
  %513 = fcmp oge double %488, 0x7B00000000000000
  %514 = tail call double @llvm.amdgcn.ldexp.f64(double %488, i32 -128)
  %515 = select i1 %513, double %514, double %488
  %516 = fmul double %512, %515
  %517 = fneg double %516
  %518 = tail call double @llvm.fma.f64(double %512, double %515, double %517)
  %519 = fmul double %511, %515
  %520 = fneg double %519
  %521 = tail call double @llvm.fma.f64(double %511, double %515, double %520)
  %522 = fmul double %510, %515
  %523 = fneg double %522
  %524 = tail call double @llvm.fma.f64(double %510, double %515, double %523)
  %525 = fadd double %519, %524
  %526 = fsub double %525, %519
  %527 = fsub double %525, %526
  %528 = fsub double %524, %526
  %529 = fsub double %519, %527
  %530 = fadd double %528, %529
  %531 = fadd double %516, %521
  %532 = fsub double %531, %516
  %533 = fsub double %531, %532
  %534 = fsub double %521, %532
  %535 = fsub double %516, %533
  %536 = fadd double %534, %535
  %537 = fadd double %531, %530
  %538 = fsub double %537, %531
  %539 = fsub double %537, %538
  %540 = fsub double %530, %538
  %541 = fsub double %531, %539
  %542 = fadd double %540, %541
  %543 = fadd double %536, %542
  %544 = fadd double %518, %543
  %545 = fadd double %522, %525
  %546 = fsub double %545, %522
  %547 = fsub double %525, %546
  %548 = fadd double %547, %537
  %549 = fsub double %548, %547
  %550 = fsub double %537, %549
  %551 = fadd double %550, %544
  %552 = tail call double @llvm.amdgcn.ldexp.f64(double %545, i32 -2)
  %553 = tail call double @llvm.amdgcn.fract.f64(double %552)
  %554 = tail call i1 @llvm.amdgcn.class.f64(double %552, i32 516)
  %555 = select i1 %554, double 0.000000e+00, double %553
  %556 = tail call double @llvm.amdgcn.ldexp.f64(double %555, i32 2)
  %557 = fadd double %556, %548
  %558 = fcmp olt double %557, 0.000000e+00
  %559 = select i1 %558, double 4.000000e+00, double 0.000000e+00
  %560 = fadd double %556, %559
  %561 = fadd double %548, %560
  %562 = fptosi double %561 to i32
  %563 = sitofp i32 %562 to double
  %564 = fsub double %560, %563
  %565 = fadd double %548, %564
  %566 = fsub double %565, %564
  %567 = fsub double %548, %566
  %568 = fadd double %551, %567
  %569 = fcmp oge double %565, 5.000000e-01
  %570 = zext i1 %569 to i32
  %571 = add nsw i32 %570, %562
  %572 = select i1 %569, double 1.000000e+00, double 0.000000e+00
  %573 = fsub double %565, %572
  %574 = fadd double %573, %568
  %575 = fsub double %574, %573
  %576 = fsub double %568, %575
  %577 = fmul double %574, 0x3FF921FB54442D18
  %578 = fneg double %577
  %579 = tail call double @llvm.fma.f64(double %574, double 0x3FF921FB54442D18, double %578)
  %580 = tail call double @llvm.fma.f64(double %574, double 0x3C91A62633145C07, double %579)
  %581 = tail call double @llvm.fma.f64(double %576, double 0x3FF921FB54442D18, double %580)
  %582 = fadd double %577, %581
  %583 = fsub double %582, %577
  %584 = fsub double %581, %583
  br label %585

585:                                              ; preds = %490, %509
  %586 = phi double [ %507, %490 ], [ %584, %509 ]
  %587 = phi double [ %505, %490 ], [ %582, %509 ]
  %588 = phi i32 [ %508, %490 ], [ %571, %509 ]
  %589 = fmul double %587, %587
  %590 = fmul double %589, 5.000000e-01
  %591 = fsub double 1.000000e+00, %590
  %592 = fsub double 1.000000e+00, %591
  %593 = fsub double %592, %590
  %594 = fmul double %589, %589
  %595 = tail call double @llvm.fma.f64(double %589, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %596 = tail call double @llvm.fma.f64(double %589, double %595, double 0xBE927E4FA17F65F6)
  %597 = tail call double @llvm.fma.f64(double %589, double %596, double 0x3EFA01A019F4EC90)
  %598 = tail call double @llvm.fma.f64(double %589, double %597, double 0xBF56C16C16C16967)
  %599 = tail call double @llvm.fma.f64(double %589, double %598, double 0x3FA5555555555555)
  %600 = fneg double %586
  %601 = tail call double @llvm.fma.f64(double %587, double %600, double %593)
  %602 = tail call double @llvm.fma.f64(double %594, double %599, double %601)
  %603 = fadd double %591, %602
  %604 = tail call double @llvm.fma.f64(double %589, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %605 = tail call double @llvm.fma.f64(double %589, double %604, double 0x3EC71DE3796CDE01)
  %606 = tail call double @llvm.fma.f64(double %589, double %605, double 0xBF2A01A019E83E5C)
  %607 = tail call double @llvm.fma.f64(double %589, double %606, double 0x3F81111111110BB3)
  %608 = fneg double %589
  %609 = fmul double %587, %608
  %610 = fmul double %586, 5.000000e-01
  %611 = tail call double @llvm.fma.f64(double %609, double %607, double %610)
  %612 = tail call double @llvm.fma.f64(double %589, double %611, double %600)
  %613 = tail call double @llvm.fma.f64(double %609, double 0xBFC5555555555555, double %612)
  %614 = fsub double %587, %613
  %615 = fneg double %614
  %616 = and i32 %588, 1
  %617 = icmp eq i32 %616, 0
  %618 = select i1 %617, double %603, double %615
  %619 = bitcast double %618 to <2 x i32>
  %620 = shl i32 %588, 30
  %621 = and i32 %620, -2147483648
  %622 = extractelement <2 x i32> %619, i64 1
  %623 = xor i32 %622, %621
  %624 = insertelement <2 x i32> %619, i32 %623, i64 1
  %625 = tail call i1 @llvm.amdgcn.class.f64(double %488, i32 504)
  %626 = select i1 %625, <2 x i32> %624, <2 x i32> <i32 0, i32 2146959360>
  %627 = bitcast <2 x i32> %626 to double
  %628 = fneg contract double %486
  %629 = fdiv contract double %628, %5
  %630 = tail call double @llvm.fabs.f64(double %629)
  %631 = fadd double %630, 0xBFE62E42FEFA39EF
  %632 = fsub double %631, %630
  %633 = fsub double %632, %631
  %634 = fadd double %630, %633
  %635 = fadd double %632, 0x3FE62E42FEFA39EF
  %636 = fsub double %634, %635
  %637 = fadd double %636, 0xBC7ABC9E3B39803F
  %638 = fadd double %631, %637
  %639 = fsub double %638, %631
  %640 = fsub double %637, %639
  %641 = fmul double %638, 0x3FF71547652B82FE
  %642 = tail call double @llvm.rint.f64(double %641)
  %643 = tail call double @llvm.fma.f64(double %642, double 0xBFE62E42FEFA3000, double %638)
  %644 = fadd double %640, %643
  %645 = fsub double %644, %643
  %646 = fsub double %640, %645
  %647 = fmul double %642, 0x3D53DE6AF278E000
  %648 = fsub double %644, %647
  %649 = fsub double %644, %648
  %650 = fsub double %649, %647
  %651 = fadd double %646, %650
  %652 = fadd double %648, %651
  %653 = fsub double %652, %648
  %654 = fsub double %651, %653
  %655 = fmul double %642, 0x3AC9CC01F97B57A0
  %656 = fsub double %652, %655
  %657 = fsub double %652, %656
  %658 = fsub double %657, %655
  %659 = fadd double %654, %658
  %660 = fadd double %656, %659
  %661 = fsub double %660, %656
  %662 = fsub double %659, %661
  %663 = tail call double @llvm.fma.f64(double %660, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %664 = tail call double @llvm.fma.f64(double %660, double %663, double 0x3EC71DEE623FDE64)
  %665 = tail call double @llvm.fma.f64(double %660, double %664, double 0x3EFA01997C89E6B0)
  %666 = tail call double @llvm.fma.f64(double %660, double %665, double 0x3F2A01A014761F6E)
  %667 = tail call double @llvm.fma.f64(double %660, double %666, double 0x3F56C16C1852B7B0)
  %668 = tail call double @llvm.fma.f64(double %660, double %667, double 0x3F81111111122322)
  %669 = tail call double @llvm.fma.f64(double %660, double %668, double 0x3FA55555555502A1)
  %670 = tail call double @llvm.fma.f64(double %660, double %669, double 0x3FC5555555555511)
  %671 = tail call double @llvm.fma.f64(double %660, double %670, double 0x3FE000000000000B)
  %672 = fmul double %660, %660
  %673 = fneg double %672
  %674 = tail call double @llvm.fma.f64(double %660, double %660, double %673)
  %675 = fmul double %662, 2.000000e+00
  %676 = tail call double @llvm.fma.f64(double %660, double %675, double %674)
  %677 = fadd double %672, %676
  %678 = fsub double %677, %672
  %679 = fsub double %676, %678
  %680 = fmul double %677, %671
  %681 = fneg double %680
  %682 = tail call double @llvm.fma.f64(double %677, double %671, double %681)
  %683 = tail call double @llvm.fma.f64(double %679, double %671, double %682)
  %684 = fadd double %680, %683
  %685 = fsub double %684, %680
  %686 = fsub double %683, %685
  %687 = fadd double %660, %684
  %688 = fsub double %687, %660
  %689 = fsub double %684, %688
  %690 = fadd double %662, %686
  %691 = fadd double %690, %689
  %692 = fadd double %687, %691
  %693 = fsub double %692, %687
  %694 = fsub double %691, %693
  %695 = fadd double %692, 1.000000e+00
  %696 = fadd double %695, -1.000000e+00
  %697 = fsub double %692, %696
  %698 = fadd double %694, %697
  %699 = fadd double %695, %698
  %700 = fsub double %699, %695
  %701 = fsub double %698, %700
  %702 = fptosi double %642 to i32
  %703 = tail call double @llvm.amdgcn.ldexp.f64(double %699, i32 %702)
  %704 = tail call double @llvm.amdgcn.ldexp.f64(double %701, i32 %702)
  %705 = tail call double @llvm.amdgcn.rcp.f64(double %703)
  %706 = fneg double %703
  %707 = tail call double @llvm.fma.f64(double %706, double %705, double 1.000000e+00)
  %708 = tail call double @llvm.fma.f64(double %707, double %705, double %705)
  %709 = tail call double @llvm.fma.f64(double %706, double %708, double 1.000000e+00)
  %710 = tail call double @llvm.fma.f64(double %709, double %708, double %708)
  %711 = fmul double %703, %710
  %712 = fneg double %711
  %713 = tail call double @llvm.fma.f64(double %710, double %703, double %712)
  %714 = tail call double @llvm.fma.f64(double %710, double %704, double %713)
  %715 = fadd double %711, %714
  %716 = fsub double %715, %711
  %717 = fsub double %714, %716
  %718 = fsub double 1.000000e+00, %715
  %719 = fsub double 1.000000e+00, %718
  %720 = fsub double %719, %715
  %721 = fsub double %720, %717
  %722 = fadd double %718, %721
  %723 = fsub double %722, %718
  %724 = fsub double %721, %723
  %725 = fmul double %710, %722
  %726 = fmul double %703, %725
  %727 = fneg double %726
  %728 = tail call double @llvm.fma.f64(double %725, double %703, double %727)
  %729 = tail call double @llvm.fma.f64(double %725, double %704, double %728)
  %730 = fadd double %726, %729
  %731 = fsub double %730, %726
  %732 = fsub double %729, %731
  %733 = fsub double %722, %730
  %734 = fsub double %722, %733
  %735 = fsub double %734, %730
  %736 = fadd double %724, %735
  %737 = fsub double %736, %732
  %738 = fadd double %733, %737
  %739 = fmul double %710, %738
  %740 = fadd double %710, %725
  %741 = fsub double %740, %710
  %742 = fsub double %725, %741
  %743 = fadd double %742, %739
  %744 = fadd double %740, %743
  %745 = fsub double %744, %740
  %746 = fsub double %743, %745
  %747 = tail call double @llvm.amdgcn.ldexp.f64(double %744, i32 -2)
  %748 = tail call double @llvm.amdgcn.ldexp.f64(double %746, i32 -2)
  %749 = fadd double %703, %747
  %750 = fsub double %749, %703
  %751 = fsub double %747, %750
  %752 = fadd double %704, %748
  %753 = fadd double %752, %751
  %754 = fadd double %749, %753
  %755 = fcmp oge double %630, 0x408633CE8FB9F87E
  %756 = select i1 %755, double 0x7FF0000000000000, double %754
  %757 = fdiv contract double %627, %756
  %758 = fmul contract double %757, 0x3F3FEABDAF5FE12A
  %759 = fadd contract double %37, %485
  %760 = fsub contract double %759, %9
  %761 = fmul contract double %760, %4
  %762 = tail call double @llvm.fabs.f64(double %761)
  %763 = fcmp olt double %762, 0x41D0000000000000
  br i1 %763, label %764, label %783

764:                                              ; preds = %585
  %765 = fmul double %762, 0x3FE45F306DC9C883
  %766 = tail call double @llvm.rint.f64(double %765)
  %767 = tail call double @llvm.fma.f64(double %766, double 0xBFF921FB54442D18, double %762)
  %768 = tail call double @llvm.fma.f64(double %766, double 0xBC91A62633145C00, double %767)
  %769 = fmul double %766, 0x3C91A62633145C00
  %770 = fneg double %769
  %771 = tail call double @llvm.fma.f64(double %766, double 0x3C91A62633145C00, double %770)
  %772 = fsub double %767, %769
  %773 = fsub double %767, %772
  %774 = fsub double %773, %769
  %775 = fsub double %772, %768
  %776 = fadd double %775, %774
  %777 = fsub double %776, %771
  %778 = tail call double @llvm.fma.f64(double %766, double 0xB97B839A252049C0, double %777)
  %779 = fadd double %768, %778
  %780 = fsub double %779, %768
  %781 = fsub double %778, %780
  %782 = fptosi double %766 to i32
  br label %859

783:                                              ; preds = %585
  %784 = tail call double @llvm.amdgcn.trig.preop.f64(double %762, i32 0)
  %785 = tail call double @llvm.amdgcn.trig.preop.f64(double %762, i32 1)
  %786 = tail call double @llvm.amdgcn.trig.preop.f64(double %762, i32 2)
  %787 = fcmp oge double %762, 0x7B00000000000000
  %788 = tail call double @llvm.amdgcn.ldexp.f64(double %762, i32 -128)
  %789 = select i1 %787, double %788, double %762
  %790 = fmul double %786, %789
  %791 = fneg double %790
  %792 = tail call double @llvm.fma.f64(double %786, double %789, double %791)
  %793 = fmul double %785, %789
  %794 = fneg double %793
  %795 = tail call double @llvm.fma.f64(double %785, double %789, double %794)
  %796 = fmul double %784, %789
  %797 = fneg double %796
  %798 = tail call double @llvm.fma.f64(double %784, double %789, double %797)
  %799 = fadd double %793, %798
  %800 = fsub double %799, %793
  %801 = fsub double %799, %800
  %802 = fsub double %798, %800
  %803 = fsub double %793, %801
  %804 = fadd double %802, %803
  %805 = fadd double %790, %795
  %806 = fsub double %805, %790
  %807 = fsub double %805, %806
  %808 = fsub double %795, %806
  %809 = fsub double %790, %807
  %810 = fadd double %808, %809
  %811 = fadd double %805, %804
  %812 = fsub double %811, %805
  %813 = fsub double %811, %812
  %814 = fsub double %804, %812
  %815 = fsub double %805, %813
  %816 = fadd double %814, %815
  %817 = fadd double %810, %816
  %818 = fadd double %792, %817
  %819 = fadd double %796, %799
  %820 = fsub double %819, %796
  %821 = fsub double %799, %820
  %822 = fadd double %821, %811
  %823 = fsub double %822, %821
  %824 = fsub double %811, %823
  %825 = fadd double %824, %818
  %826 = tail call double @llvm.amdgcn.ldexp.f64(double %819, i32 -2)
  %827 = tail call double @llvm.amdgcn.fract.f64(double %826)
  %828 = tail call i1 @llvm.amdgcn.class.f64(double %826, i32 516)
  %829 = select i1 %828, double 0.000000e+00, double %827
  %830 = tail call double @llvm.amdgcn.ldexp.f64(double %829, i32 2)
  %831 = fadd double %830, %822
  %832 = fcmp olt double %831, 0.000000e+00
  %833 = select i1 %832, double 4.000000e+00, double 0.000000e+00
  %834 = fadd double %830, %833
  %835 = fadd double %822, %834
  %836 = fptosi double %835 to i32
  %837 = sitofp i32 %836 to double
  %838 = fsub double %834, %837
  %839 = fadd double %822, %838
  %840 = fsub double %839, %838
  %841 = fsub double %822, %840
  %842 = fadd double %825, %841
  %843 = fcmp oge double %839, 5.000000e-01
  %844 = zext i1 %843 to i32
  %845 = add nsw i32 %844, %836
  %846 = select i1 %843, double 1.000000e+00, double 0.000000e+00
  %847 = fsub double %839, %846
  %848 = fadd double %847, %842
  %849 = fsub double %848, %847
  %850 = fsub double %842, %849
  %851 = fmul double %848, 0x3FF921FB54442D18
  %852 = fneg double %851
  %853 = tail call double @llvm.fma.f64(double %848, double 0x3FF921FB54442D18, double %852)
  %854 = tail call double @llvm.fma.f64(double %848, double 0x3C91A62633145C07, double %853)
  %855 = tail call double @llvm.fma.f64(double %850, double 0x3FF921FB54442D18, double %854)
  %856 = fadd double %851, %855
  %857 = fsub double %856, %851
  %858 = fsub double %855, %857
  br label %859

859:                                              ; preds = %764, %783
  %860 = phi double [ %781, %764 ], [ %858, %783 ]
  %861 = phi double [ %779, %764 ], [ %856, %783 ]
  %862 = phi i32 [ %782, %764 ], [ %845, %783 ]
  %863 = fmul double %861, %861
  %864 = fmul double %863, 5.000000e-01
  %865 = fsub double 1.000000e+00, %864
  %866 = fsub double 1.000000e+00, %865
  %867 = fsub double %866, %864
  %868 = fmul double %863, %863
  %869 = tail call double @llvm.fma.f64(double %863, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %870 = tail call double @llvm.fma.f64(double %863, double %869, double 0xBE927E4FA17F65F6)
  %871 = tail call double @llvm.fma.f64(double %863, double %870, double 0x3EFA01A019F4EC90)
  %872 = tail call double @llvm.fma.f64(double %863, double %871, double 0xBF56C16C16C16967)
  %873 = tail call double @llvm.fma.f64(double %863, double %872, double 0x3FA5555555555555)
  %874 = fneg double %860
  %875 = tail call double @llvm.fma.f64(double %861, double %874, double %867)
  %876 = tail call double @llvm.fma.f64(double %868, double %873, double %875)
  %877 = fadd double %865, %876
  %878 = tail call double @llvm.fma.f64(double %863, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %879 = tail call double @llvm.fma.f64(double %863, double %878, double 0x3EC71DE3796CDE01)
  %880 = tail call double @llvm.fma.f64(double %863, double %879, double 0xBF2A01A019E83E5C)
  %881 = tail call double @llvm.fma.f64(double %863, double %880, double 0x3F81111111110BB3)
  %882 = fneg double %863
  %883 = fmul double %861, %882
  %884 = fmul double %860, 5.000000e-01
  %885 = tail call double @llvm.fma.f64(double %883, double %881, double %884)
  %886 = tail call double @llvm.fma.f64(double %863, double %885, double %874)
  %887 = tail call double @llvm.fma.f64(double %883, double 0xBFC5555555555555, double %886)
  %888 = fsub double %861, %887
  %889 = fneg double %888
  %890 = and i32 %862, 1
  %891 = icmp eq i32 %890, 0
  %892 = select i1 %891, double %877, double %889
  %893 = bitcast double %892 to <2 x i32>
  %894 = shl i32 %862, 30
  %895 = and i32 %894, -2147483648
  %896 = extractelement <2 x i32> %893, i64 1
  %897 = xor i32 %896, %895
  %898 = insertelement <2 x i32> %893, i32 %897, i64 1
  %899 = tail call i1 @llvm.amdgcn.class.f64(double %762, i32 504)
  %900 = select i1 %899, <2 x i32> %898, <2 x i32> <i32 0, i32 2146959360>
  %901 = bitcast <2 x i32> %900 to double
  %902 = fneg contract double %760
  %903 = fdiv contract double %902, %5
  %904 = tail call double @llvm.fabs.f64(double %903)
  %905 = fadd double %904, 0xBFE62E42FEFA39EF
  %906 = fsub double %905, %904
  %907 = fsub double %906, %905
  %908 = fadd double %904, %907
  %909 = fadd double %906, 0x3FE62E42FEFA39EF
  %910 = fsub double %908, %909
  %911 = fadd double %910, 0xBC7ABC9E3B39803F
  %912 = fadd double %905, %911
  %913 = fsub double %912, %905
  %914 = fsub double %911, %913
  %915 = fmul double %912, 0x3FF71547652B82FE
  %916 = tail call double @llvm.rint.f64(double %915)
  %917 = tail call double @llvm.fma.f64(double %916, double 0xBFE62E42FEFA3000, double %912)
  %918 = fadd double %914, %917
  %919 = fsub double %918, %917
  %920 = fsub double %914, %919
  %921 = fmul double %916, 0x3D53DE6AF278E000
  %922 = fsub double %918, %921
  %923 = fsub double %918, %922
  %924 = fsub double %923, %921
  %925 = fadd double %920, %924
  %926 = fadd double %922, %925
  %927 = fsub double %926, %922
  %928 = fsub double %925, %927
  %929 = fmul double %916, 0x3AC9CC01F97B57A0
  %930 = fsub double %926, %929
  %931 = fsub double %926, %930
  %932 = fsub double %931, %929
  %933 = fadd double %928, %932
  %934 = fadd double %930, %933
  %935 = fsub double %934, %930
  %936 = fsub double %933, %935
  %937 = tail call double @llvm.fma.f64(double %934, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %938 = tail call double @llvm.fma.f64(double %934, double %937, double 0x3EC71DEE623FDE64)
  %939 = tail call double @llvm.fma.f64(double %934, double %938, double 0x3EFA01997C89E6B0)
  %940 = tail call double @llvm.fma.f64(double %934, double %939, double 0x3F2A01A014761F6E)
  %941 = tail call double @llvm.fma.f64(double %934, double %940, double 0x3F56C16C1852B7B0)
  %942 = tail call double @llvm.fma.f64(double %934, double %941, double 0x3F81111111122322)
  %943 = tail call double @llvm.fma.f64(double %934, double %942, double 0x3FA55555555502A1)
  %944 = tail call double @llvm.fma.f64(double %934, double %943, double 0x3FC5555555555511)
  %945 = tail call double @llvm.fma.f64(double %934, double %944, double 0x3FE000000000000B)
  %946 = fmul double %934, %934
  %947 = fneg double %946
  %948 = tail call double @llvm.fma.f64(double %934, double %934, double %947)
  %949 = fmul double %936, 2.000000e+00
  %950 = tail call double @llvm.fma.f64(double %934, double %949, double %948)
  %951 = fadd double %946, %950
  %952 = fsub double %951, %946
  %953 = fsub double %950, %952
  %954 = fmul double %951, %945
  %955 = fneg double %954
  %956 = tail call double @llvm.fma.f64(double %951, double %945, double %955)
  %957 = tail call double @llvm.fma.f64(double %953, double %945, double %956)
  %958 = fadd double %954, %957
  %959 = fsub double %958, %954
  %960 = fsub double %957, %959
  %961 = fadd double %934, %958
  %962 = fsub double %961, %934
  %963 = fsub double %958, %962
  %964 = fadd double %936, %960
  %965 = fadd double %964, %963
  %966 = fadd double %961, %965
  %967 = fsub double %966, %961
  %968 = fsub double %965, %967
  %969 = fadd double %966, 1.000000e+00
  %970 = fadd double %969, -1.000000e+00
  %971 = fsub double %966, %970
  %972 = fadd double %968, %971
  %973 = fadd double %969, %972
  %974 = fsub double %973, %969
  %975 = fsub double %972, %974
  %976 = fptosi double %916 to i32
  %977 = tail call double @llvm.amdgcn.ldexp.f64(double %973, i32 %976)
  %978 = tail call double @llvm.amdgcn.ldexp.f64(double %975, i32 %976)
  %979 = tail call double @llvm.amdgcn.rcp.f64(double %977)
  %980 = fneg double %977
  %981 = tail call double @llvm.fma.f64(double %980, double %979, double 1.000000e+00)
  %982 = tail call double @llvm.fma.f64(double %981, double %979, double %979)
  %983 = tail call double @llvm.fma.f64(double %980, double %982, double 1.000000e+00)
  %984 = tail call double @llvm.fma.f64(double %983, double %982, double %982)
  %985 = fmul double %977, %984
  %986 = fneg double %985
  %987 = tail call double @llvm.fma.f64(double %984, double %977, double %986)
  %988 = tail call double @llvm.fma.f64(double %984, double %978, double %987)
  %989 = fadd double %985, %988
  %990 = fsub double %989, %985
  %991 = fsub double %988, %990
  %992 = fsub double 1.000000e+00, %989
  %993 = fsub double 1.000000e+00, %992
  %994 = fsub double %993, %989
  %995 = fsub double %994, %991
  %996 = fadd double %992, %995
  %997 = fsub double %996, %992
  %998 = fsub double %995, %997
  %999 = fmul double %984, %996
  %1000 = fmul double %977, %999
  %1001 = fneg double %1000
  %1002 = tail call double @llvm.fma.f64(double %999, double %977, double %1001)
  %1003 = tail call double @llvm.fma.f64(double %999, double %978, double %1002)
  %1004 = fadd double %1000, %1003
  %1005 = fsub double %1004, %1000
  %1006 = fsub double %1003, %1005
  %1007 = fsub double %996, %1004
  %1008 = fsub double %996, %1007
  %1009 = fsub double %1008, %1004
  %1010 = fadd double %998, %1009
  %1011 = fsub double %1010, %1006
  %1012 = fadd double %1007, %1011
  %1013 = fmul double %984, %1012
  %1014 = fadd double %984, %999
  %1015 = fsub double %1014, %984
  %1016 = fsub double %999, %1015
  %1017 = fadd double %1016, %1013
  %1018 = fadd double %1014, %1017
  %1019 = fsub double %1018, %1014
  %1020 = fsub double %1017, %1019
  %1021 = tail call double @llvm.amdgcn.ldexp.f64(double %1018, i32 -2)
  %1022 = tail call double @llvm.amdgcn.ldexp.f64(double %1020, i32 -2)
  %1023 = fadd double %977, %1021
  %1024 = fsub double %1023, %977
  %1025 = fsub double %1021, %1024
  %1026 = fadd double %978, %1022
  %1027 = fadd double %1026, %1025
  %1028 = fadd double %1023, %1027
  %1029 = fcmp oge double %904, 0x408633CE8FB9F87E
  %1030 = select i1 %1029, double 0x7FF0000000000000, double %1028
  %1031 = fdiv contract double %901, %1030
  %1032 = fmul contract double %1031, 0x3F3FEABDAF5FE12A
  %1033 = fadd contract double %36, %485
  %1034 = fsub contract double %1033, %9
  %1035 = fmul contract double %1034, %4
  %1036 = tail call double @llvm.fabs.f64(double %1035)
  %1037 = fcmp olt double %1036, 0x41D0000000000000
  br i1 %1037, label %1038, label %1057

1038:                                             ; preds = %859
  %1039 = fmul double %1036, 0x3FE45F306DC9C883
  %1040 = tail call double @llvm.rint.f64(double %1039)
  %1041 = tail call double @llvm.fma.f64(double %1040, double 0xBFF921FB54442D18, double %1036)
  %1042 = tail call double @llvm.fma.f64(double %1040, double 0xBC91A62633145C00, double %1041)
  %1043 = fmul double %1040, 0x3C91A62633145C00
  %1044 = fneg double %1043
  %1045 = tail call double @llvm.fma.f64(double %1040, double 0x3C91A62633145C00, double %1044)
  %1046 = fsub double %1041, %1043
  %1047 = fsub double %1041, %1046
  %1048 = fsub double %1047, %1043
  %1049 = fsub double %1046, %1042
  %1050 = fadd double %1049, %1048
  %1051 = fsub double %1050, %1045
  %1052 = tail call double @llvm.fma.f64(double %1040, double 0xB97B839A252049C0, double %1051)
  %1053 = fadd double %1042, %1052
  %1054 = fsub double %1053, %1042
  %1055 = fsub double %1052, %1054
  %1056 = fptosi double %1040 to i32
  br label %1133

1057:                                             ; preds = %859
  %1058 = tail call double @llvm.amdgcn.trig.preop.f64(double %1036, i32 0)
  %1059 = tail call double @llvm.amdgcn.trig.preop.f64(double %1036, i32 1)
  %1060 = tail call double @llvm.amdgcn.trig.preop.f64(double %1036, i32 2)
  %1061 = fcmp oge double %1036, 0x7B00000000000000
  %1062 = tail call double @llvm.amdgcn.ldexp.f64(double %1036, i32 -128)
  %1063 = select i1 %1061, double %1062, double %1036
  %1064 = fmul double %1060, %1063
  %1065 = fneg double %1064
  %1066 = tail call double @llvm.fma.f64(double %1060, double %1063, double %1065)
  %1067 = fmul double %1059, %1063
  %1068 = fneg double %1067
  %1069 = tail call double @llvm.fma.f64(double %1059, double %1063, double %1068)
  %1070 = fmul double %1058, %1063
  %1071 = fneg double %1070
  %1072 = tail call double @llvm.fma.f64(double %1058, double %1063, double %1071)
  %1073 = fadd double %1067, %1072
  %1074 = fsub double %1073, %1067
  %1075 = fsub double %1073, %1074
  %1076 = fsub double %1072, %1074
  %1077 = fsub double %1067, %1075
  %1078 = fadd double %1076, %1077
  %1079 = fadd double %1064, %1069
  %1080 = fsub double %1079, %1064
  %1081 = fsub double %1079, %1080
  %1082 = fsub double %1069, %1080
  %1083 = fsub double %1064, %1081
  %1084 = fadd double %1082, %1083
  %1085 = fadd double %1079, %1078
  %1086 = fsub double %1085, %1079
  %1087 = fsub double %1085, %1086
  %1088 = fsub double %1078, %1086
  %1089 = fsub double %1079, %1087
  %1090 = fadd double %1088, %1089
  %1091 = fadd double %1084, %1090
  %1092 = fadd double %1066, %1091
  %1093 = fadd double %1070, %1073
  %1094 = fsub double %1093, %1070
  %1095 = fsub double %1073, %1094
  %1096 = fadd double %1095, %1085
  %1097 = fsub double %1096, %1095
  %1098 = fsub double %1085, %1097
  %1099 = fadd double %1098, %1092
  %1100 = tail call double @llvm.amdgcn.ldexp.f64(double %1093, i32 -2)
  %1101 = tail call double @llvm.amdgcn.fract.f64(double %1100)
  %1102 = tail call i1 @llvm.amdgcn.class.f64(double %1100, i32 516)
  %1103 = select i1 %1102, double 0.000000e+00, double %1101
  %1104 = tail call double @llvm.amdgcn.ldexp.f64(double %1103, i32 2)
  %1105 = fadd double %1104, %1096
  %1106 = fcmp olt double %1105, 0.000000e+00
  %1107 = select i1 %1106, double 4.000000e+00, double 0.000000e+00
  %1108 = fadd double %1104, %1107
  %1109 = fadd double %1096, %1108
  %1110 = fptosi double %1109 to i32
  %1111 = sitofp i32 %1110 to double
  %1112 = fsub double %1108, %1111
  %1113 = fadd double %1096, %1112
  %1114 = fsub double %1113, %1112
  %1115 = fsub double %1096, %1114
  %1116 = fadd double %1099, %1115
  %1117 = fcmp oge double %1113, 5.000000e-01
  %1118 = zext i1 %1117 to i32
  %1119 = add nsw i32 %1118, %1110
  %1120 = select i1 %1117, double 1.000000e+00, double 0.000000e+00
  %1121 = fsub double %1113, %1120
  %1122 = fadd double %1121, %1116
  %1123 = fsub double %1122, %1121
  %1124 = fsub double %1116, %1123
  %1125 = fmul double %1122, 0x3FF921FB54442D18
  %1126 = fneg double %1125
  %1127 = tail call double @llvm.fma.f64(double %1122, double 0x3FF921FB54442D18, double %1126)
  %1128 = tail call double @llvm.fma.f64(double %1122, double 0x3C91A62633145C07, double %1127)
  %1129 = tail call double @llvm.fma.f64(double %1124, double 0x3FF921FB54442D18, double %1128)
  %1130 = fadd double %1125, %1129
  %1131 = fsub double %1130, %1125
  %1132 = fsub double %1129, %1131
  br label %1133

1133:                                             ; preds = %1038, %1057
  %1134 = phi double [ %1055, %1038 ], [ %1132, %1057 ]
  %1135 = phi double [ %1053, %1038 ], [ %1130, %1057 ]
  %1136 = phi i32 [ %1056, %1038 ], [ %1119, %1057 ]
  %1137 = fmul double %1135, %1135
  %1138 = fmul double %1137, 5.000000e-01
  %1139 = fsub double 1.000000e+00, %1138
  %1140 = fsub double 1.000000e+00, %1139
  %1141 = fsub double %1140, %1138
  %1142 = fmul double %1137, %1137
  %1143 = tail call double @llvm.fma.f64(double %1137, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1144 = tail call double @llvm.fma.f64(double %1137, double %1143, double 0xBE927E4FA17F65F6)
  %1145 = tail call double @llvm.fma.f64(double %1137, double %1144, double 0x3EFA01A019F4EC90)
  %1146 = tail call double @llvm.fma.f64(double %1137, double %1145, double 0xBF56C16C16C16967)
  %1147 = tail call double @llvm.fma.f64(double %1137, double %1146, double 0x3FA5555555555555)
  %1148 = fneg double %1134
  %1149 = tail call double @llvm.fma.f64(double %1135, double %1148, double %1141)
  %1150 = tail call double @llvm.fma.f64(double %1142, double %1147, double %1149)
  %1151 = fadd double %1139, %1150
  %1152 = tail call double @llvm.fma.f64(double %1137, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1153 = tail call double @llvm.fma.f64(double %1137, double %1152, double 0x3EC71DE3796CDE01)
  %1154 = tail call double @llvm.fma.f64(double %1137, double %1153, double 0xBF2A01A019E83E5C)
  %1155 = tail call double @llvm.fma.f64(double %1137, double %1154, double 0x3F81111111110BB3)
  %1156 = fneg double %1137
  %1157 = fmul double %1135, %1156
  %1158 = fmul double %1134, 5.000000e-01
  %1159 = tail call double @llvm.fma.f64(double %1157, double %1155, double %1158)
  %1160 = tail call double @llvm.fma.f64(double %1137, double %1159, double %1148)
  %1161 = tail call double @llvm.fma.f64(double %1157, double 0xBFC5555555555555, double %1160)
  %1162 = fsub double %1135, %1161
  %1163 = fneg double %1162
  %1164 = and i32 %1136, 1
  %1165 = icmp eq i32 %1164, 0
  %1166 = select i1 %1165, double %1151, double %1163
  %1167 = bitcast double %1166 to <2 x i32>
  %1168 = shl i32 %1136, 30
  %1169 = and i32 %1168, -2147483648
  %1170 = extractelement <2 x i32> %1167, i64 1
  %1171 = xor i32 %1170, %1169
  %1172 = insertelement <2 x i32> %1167, i32 %1171, i64 1
  %1173 = tail call i1 @llvm.amdgcn.class.f64(double %1036, i32 504)
  %1174 = select i1 %1173, <2 x i32> %1172, <2 x i32> <i32 0, i32 2146959360>
  %1175 = bitcast <2 x i32> %1174 to double
  %1176 = fneg contract double %1034
  %1177 = fdiv contract double %1176, %5
  %1178 = tail call double @llvm.fabs.f64(double %1177)
  %1179 = fadd double %1178, 0xBFE62E42FEFA39EF
  %1180 = fsub double %1179, %1178
  %1181 = fsub double %1180, %1179
  %1182 = fadd double %1178, %1181
  %1183 = fadd double %1180, 0x3FE62E42FEFA39EF
  %1184 = fsub double %1182, %1183
  %1185 = fadd double %1184, 0xBC7ABC9E3B39803F
  %1186 = fadd double %1179, %1185
  %1187 = fsub double %1186, %1179
  %1188 = fsub double %1185, %1187
  %1189 = fmul double %1186, 0x3FF71547652B82FE
  %1190 = tail call double @llvm.rint.f64(double %1189)
  %1191 = tail call double @llvm.fma.f64(double %1190, double 0xBFE62E42FEFA3000, double %1186)
  %1192 = fadd double %1188, %1191
  %1193 = fsub double %1192, %1191
  %1194 = fsub double %1188, %1193
  %1195 = fmul double %1190, 0x3D53DE6AF278E000
  %1196 = fsub double %1192, %1195
  %1197 = fsub double %1192, %1196
  %1198 = fsub double %1197, %1195
  %1199 = fadd double %1194, %1198
  %1200 = fadd double %1196, %1199
  %1201 = fsub double %1200, %1196
  %1202 = fsub double %1199, %1201
  %1203 = fmul double %1190, 0x3AC9CC01F97B57A0
  %1204 = fsub double %1200, %1203
  %1205 = fsub double %1200, %1204
  %1206 = fsub double %1205, %1203
  %1207 = fadd double %1202, %1206
  %1208 = fadd double %1204, %1207
  %1209 = fsub double %1208, %1204
  %1210 = fsub double %1207, %1209
  %1211 = tail call double @llvm.fma.f64(double %1208, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1212 = tail call double @llvm.fma.f64(double %1208, double %1211, double 0x3EC71DEE623FDE64)
  %1213 = tail call double @llvm.fma.f64(double %1208, double %1212, double 0x3EFA01997C89E6B0)
  %1214 = tail call double @llvm.fma.f64(double %1208, double %1213, double 0x3F2A01A014761F6E)
  %1215 = tail call double @llvm.fma.f64(double %1208, double %1214, double 0x3F56C16C1852B7B0)
  %1216 = tail call double @llvm.fma.f64(double %1208, double %1215, double 0x3F81111111122322)
  %1217 = tail call double @llvm.fma.f64(double %1208, double %1216, double 0x3FA55555555502A1)
  %1218 = tail call double @llvm.fma.f64(double %1208, double %1217, double 0x3FC5555555555511)
  %1219 = tail call double @llvm.fma.f64(double %1208, double %1218, double 0x3FE000000000000B)
  %1220 = fmul double %1208, %1208
  %1221 = fneg double %1220
  %1222 = tail call double @llvm.fma.f64(double %1208, double %1208, double %1221)
  %1223 = fmul double %1210, 2.000000e+00
  %1224 = tail call double @llvm.fma.f64(double %1208, double %1223, double %1222)
  %1225 = fadd double %1220, %1224
  %1226 = fsub double %1225, %1220
  %1227 = fsub double %1224, %1226
  %1228 = fmul double %1225, %1219
  %1229 = fneg double %1228
  %1230 = tail call double @llvm.fma.f64(double %1225, double %1219, double %1229)
  %1231 = tail call double @llvm.fma.f64(double %1227, double %1219, double %1230)
  %1232 = fadd double %1228, %1231
  %1233 = fsub double %1232, %1228
  %1234 = fsub double %1231, %1233
  %1235 = fadd double %1208, %1232
  %1236 = fsub double %1235, %1208
  %1237 = fsub double %1232, %1236
  %1238 = fadd double %1210, %1234
  %1239 = fadd double %1238, %1237
  %1240 = fadd double %1235, %1239
  %1241 = fsub double %1240, %1235
  %1242 = fsub double %1239, %1241
  %1243 = fadd double %1240, 1.000000e+00
  %1244 = fadd double %1243, -1.000000e+00
  %1245 = fsub double %1240, %1244
  %1246 = fadd double %1242, %1245
  %1247 = fadd double %1243, %1246
  %1248 = fsub double %1247, %1243
  %1249 = fsub double %1246, %1248
  %1250 = fptosi double %1190 to i32
  %1251 = tail call double @llvm.amdgcn.ldexp.f64(double %1247, i32 %1250)
  %1252 = tail call double @llvm.amdgcn.ldexp.f64(double %1249, i32 %1250)
  %1253 = tail call double @llvm.amdgcn.rcp.f64(double %1251)
  %1254 = fneg double %1251
  %1255 = tail call double @llvm.fma.f64(double %1254, double %1253, double 1.000000e+00)
  %1256 = tail call double @llvm.fma.f64(double %1255, double %1253, double %1253)
  %1257 = tail call double @llvm.fma.f64(double %1254, double %1256, double 1.000000e+00)
  %1258 = tail call double @llvm.fma.f64(double %1257, double %1256, double %1256)
  %1259 = fmul double %1251, %1258
  %1260 = fneg double %1259
  %1261 = tail call double @llvm.fma.f64(double %1258, double %1251, double %1260)
  %1262 = tail call double @llvm.fma.f64(double %1258, double %1252, double %1261)
  %1263 = fadd double %1259, %1262
  %1264 = fsub double %1263, %1259
  %1265 = fsub double %1262, %1264
  %1266 = fsub double 1.000000e+00, %1263
  %1267 = fsub double 1.000000e+00, %1266
  %1268 = fsub double %1267, %1263
  %1269 = fsub double %1268, %1265
  %1270 = fadd double %1266, %1269
  %1271 = fsub double %1270, %1266
  %1272 = fsub double %1269, %1271
  %1273 = fmul double %1258, %1270
  %1274 = fmul double %1251, %1273
  %1275 = fneg double %1274
  %1276 = tail call double @llvm.fma.f64(double %1273, double %1251, double %1275)
  %1277 = tail call double @llvm.fma.f64(double %1273, double %1252, double %1276)
  %1278 = fadd double %1274, %1277
  %1279 = fsub double %1278, %1274
  %1280 = fsub double %1277, %1279
  %1281 = fsub double %1270, %1278
  %1282 = fsub double %1270, %1281
  %1283 = fsub double %1282, %1278
  %1284 = fadd double %1272, %1283
  %1285 = fsub double %1284, %1280
  %1286 = fadd double %1281, %1285
  %1287 = fmul double %1258, %1286
  %1288 = fadd double %1258, %1273
  %1289 = fsub double %1288, %1258
  %1290 = fsub double %1273, %1289
  %1291 = fadd double %1290, %1287
  %1292 = fadd double %1288, %1291
  %1293 = fsub double %1292, %1288
  %1294 = fsub double %1291, %1293
  %1295 = tail call double @llvm.amdgcn.ldexp.f64(double %1292, i32 -2)
  %1296 = tail call double @llvm.amdgcn.ldexp.f64(double %1294, i32 -2)
  %1297 = fadd double %1251, %1295
  %1298 = fsub double %1297, %1251
  %1299 = fsub double %1295, %1298
  %1300 = fadd double %1252, %1296
  %1301 = fadd double %1300, %1299
  %1302 = fadd double %1297, %1301
  %1303 = fcmp oge double %1178, 0x408633CE8FB9F87E
  %1304 = select i1 %1303, double 0x7FF0000000000000, double %1302
  %1305 = fdiv contract double %1175, %1304
  %1306 = fmul contract double %1305, 0x3F3FEABDAF5FE12A
  %1307 = fadd contract double %22, %486
  %1308 = fmul contract double %1307, %4
  %1309 = tail call double @llvm.fabs.f64(double %1308)
  %1310 = fcmp olt double %1309, 0x41D0000000000000
  br i1 %1310, label %1311, label %1330

1311:                                             ; preds = %1133
  %1312 = fmul double %1309, 0x3FE45F306DC9C883
  %1313 = tail call double @llvm.rint.f64(double %1312)
  %1314 = tail call double @llvm.fma.f64(double %1313, double 0xBFF921FB54442D18, double %1309)
  %1315 = tail call double @llvm.fma.f64(double %1313, double 0xBC91A62633145C00, double %1314)
  %1316 = fmul double %1313, 0x3C91A62633145C00
  %1317 = fneg double %1316
  %1318 = tail call double @llvm.fma.f64(double %1313, double 0x3C91A62633145C00, double %1317)
  %1319 = fsub double %1314, %1316
  %1320 = fsub double %1314, %1319
  %1321 = fsub double %1320, %1316
  %1322 = fsub double %1319, %1315
  %1323 = fadd double %1322, %1321
  %1324 = fsub double %1323, %1318
  %1325 = tail call double @llvm.fma.f64(double %1313, double 0xB97B839A252049C0, double %1324)
  %1326 = fadd double %1315, %1325
  %1327 = fsub double %1326, %1315
  %1328 = fsub double %1325, %1327
  %1329 = fptosi double %1313 to i32
  br label %1406

1330:                                             ; preds = %1133
  %1331 = tail call double @llvm.amdgcn.trig.preop.f64(double %1309, i32 0)
  %1332 = tail call double @llvm.amdgcn.trig.preop.f64(double %1309, i32 1)
  %1333 = tail call double @llvm.amdgcn.trig.preop.f64(double %1309, i32 2)
  %1334 = fcmp oge double %1309, 0x7B00000000000000
  %1335 = tail call double @llvm.amdgcn.ldexp.f64(double %1309, i32 -128)
  %1336 = select i1 %1334, double %1335, double %1309
  %1337 = fmul double %1333, %1336
  %1338 = fneg double %1337
  %1339 = tail call double @llvm.fma.f64(double %1333, double %1336, double %1338)
  %1340 = fmul double %1332, %1336
  %1341 = fneg double %1340
  %1342 = tail call double @llvm.fma.f64(double %1332, double %1336, double %1341)
  %1343 = fmul double %1331, %1336
  %1344 = fneg double %1343
  %1345 = tail call double @llvm.fma.f64(double %1331, double %1336, double %1344)
  %1346 = fadd double %1340, %1345
  %1347 = fsub double %1346, %1340
  %1348 = fsub double %1346, %1347
  %1349 = fsub double %1345, %1347
  %1350 = fsub double %1340, %1348
  %1351 = fadd double %1349, %1350
  %1352 = fadd double %1337, %1342
  %1353 = fsub double %1352, %1337
  %1354 = fsub double %1352, %1353
  %1355 = fsub double %1342, %1353
  %1356 = fsub double %1337, %1354
  %1357 = fadd double %1355, %1356
  %1358 = fadd double %1352, %1351
  %1359 = fsub double %1358, %1352
  %1360 = fsub double %1358, %1359
  %1361 = fsub double %1351, %1359
  %1362 = fsub double %1352, %1360
  %1363 = fadd double %1361, %1362
  %1364 = fadd double %1357, %1363
  %1365 = fadd double %1339, %1364
  %1366 = fadd double %1343, %1346
  %1367 = fsub double %1366, %1343
  %1368 = fsub double %1346, %1367
  %1369 = fadd double %1368, %1358
  %1370 = fsub double %1369, %1368
  %1371 = fsub double %1358, %1370
  %1372 = fadd double %1371, %1365
  %1373 = tail call double @llvm.amdgcn.ldexp.f64(double %1366, i32 -2)
  %1374 = tail call double @llvm.amdgcn.fract.f64(double %1373)
  %1375 = tail call i1 @llvm.amdgcn.class.f64(double %1373, i32 516)
  %1376 = select i1 %1375, double 0.000000e+00, double %1374
  %1377 = tail call double @llvm.amdgcn.ldexp.f64(double %1376, i32 2)
  %1378 = fadd double %1377, %1369
  %1379 = fcmp olt double %1378, 0.000000e+00
  %1380 = select i1 %1379, double 4.000000e+00, double 0.000000e+00
  %1381 = fadd double %1377, %1380
  %1382 = fadd double %1369, %1381
  %1383 = fptosi double %1382 to i32
  %1384 = sitofp i32 %1383 to double
  %1385 = fsub double %1381, %1384
  %1386 = fadd double %1369, %1385
  %1387 = fsub double %1386, %1385
  %1388 = fsub double %1369, %1387
  %1389 = fadd double %1372, %1388
  %1390 = fcmp oge double %1386, 5.000000e-01
  %1391 = zext i1 %1390 to i32
  %1392 = add nsw i32 %1391, %1383
  %1393 = select i1 %1390, double 1.000000e+00, double 0.000000e+00
  %1394 = fsub double %1386, %1393
  %1395 = fadd double %1394, %1389
  %1396 = fsub double %1395, %1394
  %1397 = fsub double %1389, %1396
  %1398 = fmul double %1395, 0x3FF921FB54442D18
  %1399 = fneg double %1398
  %1400 = tail call double @llvm.fma.f64(double %1395, double 0x3FF921FB54442D18, double %1399)
  %1401 = tail call double @llvm.fma.f64(double %1395, double 0x3C91A62633145C07, double %1400)
  %1402 = tail call double @llvm.fma.f64(double %1397, double 0x3FF921FB54442D18, double %1401)
  %1403 = fadd double %1398, %1402
  %1404 = fsub double %1403, %1398
  %1405 = fsub double %1402, %1404
  br label %1406

1406:                                             ; preds = %1311, %1330
  %1407 = phi double [ %1328, %1311 ], [ %1405, %1330 ]
  %1408 = phi double [ %1326, %1311 ], [ %1403, %1330 ]
  %1409 = phi i32 [ %1329, %1311 ], [ %1392, %1330 ]
  %1410 = fmul double %1408, %1408
  %1411 = fmul double %1410, 5.000000e-01
  %1412 = fsub double 1.000000e+00, %1411
  %1413 = fsub double 1.000000e+00, %1412
  %1414 = fsub double %1413, %1411
  %1415 = fmul double %1410, %1410
  %1416 = tail call double @llvm.fma.f64(double %1410, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1417 = tail call double @llvm.fma.f64(double %1410, double %1416, double 0xBE927E4FA17F65F6)
  %1418 = tail call double @llvm.fma.f64(double %1410, double %1417, double 0x3EFA01A019F4EC90)
  %1419 = tail call double @llvm.fma.f64(double %1410, double %1418, double 0xBF56C16C16C16967)
  %1420 = tail call double @llvm.fma.f64(double %1410, double %1419, double 0x3FA5555555555555)
  %1421 = fneg double %1407
  %1422 = tail call double @llvm.fma.f64(double %1408, double %1421, double %1414)
  %1423 = tail call double @llvm.fma.f64(double %1415, double %1420, double %1422)
  %1424 = fadd double %1412, %1423
  %1425 = tail call double @llvm.fma.f64(double %1410, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1426 = tail call double @llvm.fma.f64(double %1410, double %1425, double 0x3EC71DE3796CDE01)
  %1427 = tail call double @llvm.fma.f64(double %1410, double %1426, double 0xBF2A01A019E83E5C)
  %1428 = tail call double @llvm.fma.f64(double %1410, double %1427, double 0x3F81111111110BB3)
  %1429 = fneg double %1410
  %1430 = fmul double %1408, %1429
  %1431 = fmul double %1407, 5.000000e-01
  %1432 = tail call double @llvm.fma.f64(double %1430, double %1428, double %1431)
  %1433 = tail call double @llvm.fma.f64(double %1410, double %1432, double %1421)
  %1434 = tail call double @llvm.fma.f64(double %1430, double 0xBFC5555555555555, double %1433)
  %1435 = fsub double %1408, %1434
  %1436 = fneg double %1435
  %1437 = and i32 %1409, 1
  %1438 = icmp eq i32 %1437, 0
  %1439 = select i1 %1438, double %1424, double %1436
  %1440 = bitcast double %1439 to <2 x i32>
  %1441 = shl i32 %1409, 30
  %1442 = and i32 %1441, -2147483648
  %1443 = extractelement <2 x i32> %1440, i64 1
  %1444 = xor i32 %1443, %1442
  %1445 = insertelement <2 x i32> %1440, i32 %1444, i64 1
  %1446 = tail call i1 @llvm.amdgcn.class.f64(double %1309, i32 504)
  %1447 = select i1 %1446, <2 x i32> %1445, <2 x i32> <i32 0, i32 2146959360>
  %1448 = bitcast <2 x i32> %1447 to double
  %1449 = fneg contract double %1307
  %1450 = fdiv contract double %1449, %5
  %1451 = tail call double @llvm.fabs.f64(double %1450)
  %1452 = fadd double %1451, 0xBFE62E42FEFA39EF
  %1453 = fsub double %1452, %1451
  %1454 = fsub double %1453, %1452
  %1455 = fadd double %1451, %1454
  %1456 = fadd double %1453, 0x3FE62E42FEFA39EF
  %1457 = fsub double %1455, %1456
  %1458 = fadd double %1457, 0xBC7ABC9E3B39803F
  %1459 = fadd double %1452, %1458
  %1460 = fsub double %1459, %1452
  %1461 = fsub double %1458, %1460
  %1462 = fmul double %1459, 0x3FF71547652B82FE
  %1463 = tail call double @llvm.rint.f64(double %1462)
  %1464 = tail call double @llvm.fma.f64(double %1463, double 0xBFE62E42FEFA3000, double %1459)
  %1465 = fadd double %1461, %1464
  %1466 = fsub double %1465, %1464
  %1467 = fsub double %1461, %1466
  %1468 = fmul double %1463, 0x3D53DE6AF278E000
  %1469 = fsub double %1465, %1468
  %1470 = fsub double %1465, %1469
  %1471 = fsub double %1470, %1468
  %1472 = fadd double %1467, %1471
  %1473 = fadd double %1469, %1472
  %1474 = fsub double %1473, %1469
  %1475 = fsub double %1472, %1474
  %1476 = fmul double %1463, 0x3AC9CC01F97B57A0
  %1477 = fsub double %1473, %1476
  %1478 = fsub double %1473, %1477
  %1479 = fsub double %1478, %1476
  %1480 = fadd double %1475, %1479
  %1481 = fadd double %1477, %1480
  %1482 = fsub double %1481, %1477
  %1483 = fsub double %1480, %1482
  %1484 = tail call double @llvm.fma.f64(double %1481, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1485 = tail call double @llvm.fma.f64(double %1481, double %1484, double 0x3EC71DEE623FDE64)
  %1486 = tail call double @llvm.fma.f64(double %1481, double %1485, double 0x3EFA01997C89E6B0)
  %1487 = tail call double @llvm.fma.f64(double %1481, double %1486, double 0x3F2A01A014761F6E)
  %1488 = tail call double @llvm.fma.f64(double %1481, double %1487, double 0x3F56C16C1852B7B0)
  %1489 = tail call double @llvm.fma.f64(double %1481, double %1488, double 0x3F81111111122322)
  %1490 = tail call double @llvm.fma.f64(double %1481, double %1489, double 0x3FA55555555502A1)
  %1491 = tail call double @llvm.fma.f64(double %1481, double %1490, double 0x3FC5555555555511)
  %1492 = tail call double @llvm.fma.f64(double %1481, double %1491, double 0x3FE000000000000B)
  %1493 = fmul double %1481, %1481
  %1494 = fneg double %1493
  %1495 = tail call double @llvm.fma.f64(double %1481, double %1481, double %1494)
  %1496 = fmul double %1483, 2.000000e+00
  %1497 = tail call double @llvm.fma.f64(double %1481, double %1496, double %1495)
  %1498 = fadd double %1493, %1497
  %1499 = fsub double %1498, %1493
  %1500 = fsub double %1497, %1499
  %1501 = fmul double %1498, %1492
  %1502 = fneg double %1501
  %1503 = tail call double @llvm.fma.f64(double %1498, double %1492, double %1502)
  %1504 = tail call double @llvm.fma.f64(double %1500, double %1492, double %1503)
  %1505 = fadd double %1501, %1504
  %1506 = fsub double %1505, %1501
  %1507 = fsub double %1504, %1506
  %1508 = fadd double %1481, %1505
  %1509 = fsub double %1508, %1481
  %1510 = fsub double %1505, %1509
  %1511 = fadd double %1483, %1507
  %1512 = fadd double %1511, %1510
  %1513 = fadd double %1508, %1512
  %1514 = fsub double %1513, %1508
  %1515 = fsub double %1512, %1514
  %1516 = fadd double %1513, 1.000000e+00
  %1517 = fadd double %1516, -1.000000e+00
  %1518 = fsub double %1513, %1517
  %1519 = fadd double %1515, %1518
  %1520 = fadd double %1516, %1519
  %1521 = fsub double %1520, %1516
  %1522 = fsub double %1519, %1521
  %1523 = fptosi double %1463 to i32
  %1524 = tail call double @llvm.amdgcn.ldexp.f64(double %1520, i32 %1523)
  %1525 = tail call double @llvm.amdgcn.ldexp.f64(double %1522, i32 %1523)
  %1526 = tail call double @llvm.amdgcn.rcp.f64(double %1524)
  %1527 = fneg double %1524
  %1528 = tail call double @llvm.fma.f64(double %1527, double %1526, double 1.000000e+00)
  %1529 = tail call double @llvm.fma.f64(double %1528, double %1526, double %1526)
  %1530 = tail call double @llvm.fma.f64(double %1527, double %1529, double 1.000000e+00)
  %1531 = tail call double @llvm.fma.f64(double %1530, double %1529, double %1529)
  %1532 = fmul double %1524, %1531
  %1533 = fneg double %1532
  %1534 = tail call double @llvm.fma.f64(double %1531, double %1524, double %1533)
  %1535 = tail call double @llvm.fma.f64(double %1531, double %1525, double %1534)
  %1536 = fadd double %1532, %1535
  %1537 = fsub double %1536, %1532
  %1538 = fsub double %1535, %1537
  %1539 = fsub double 1.000000e+00, %1536
  %1540 = fsub double 1.000000e+00, %1539
  %1541 = fsub double %1540, %1536
  %1542 = fsub double %1541, %1538
  %1543 = fadd double %1539, %1542
  %1544 = fsub double %1543, %1539
  %1545 = fsub double %1542, %1544
  %1546 = fmul double %1531, %1543
  %1547 = fmul double %1524, %1546
  %1548 = fneg double %1547
  %1549 = tail call double @llvm.fma.f64(double %1546, double %1524, double %1548)
  %1550 = tail call double @llvm.fma.f64(double %1546, double %1525, double %1549)
  %1551 = fadd double %1547, %1550
  %1552 = fsub double %1551, %1547
  %1553 = fsub double %1550, %1552
  %1554 = fsub double %1543, %1551
  %1555 = fsub double %1543, %1554
  %1556 = fsub double %1555, %1551
  %1557 = fadd double %1545, %1556
  %1558 = fsub double %1557, %1553
  %1559 = fadd double %1554, %1558
  %1560 = fmul double %1531, %1559
  %1561 = fadd double %1531, %1546
  %1562 = fsub double %1561, %1531
  %1563 = fsub double %1546, %1562
  %1564 = fadd double %1563, %1560
  %1565 = fadd double %1561, %1564
  %1566 = fsub double %1565, %1561
  %1567 = fsub double %1564, %1566
  %1568 = tail call double @llvm.amdgcn.ldexp.f64(double %1565, i32 -2)
  %1569 = tail call double @llvm.amdgcn.ldexp.f64(double %1567, i32 -2)
  %1570 = fadd double %1524, %1568
  %1571 = fsub double %1570, %1524
  %1572 = fsub double %1568, %1571
  %1573 = fadd double %1525, %1569
  %1574 = fadd double %1573, %1572
  %1575 = fadd double %1570, %1574
  %1576 = fcmp oge double %1451, 0x408633CE8FB9F87E
  %1577 = select i1 %1576, double 0x7FF0000000000000, double %1575
  %1578 = fdiv contract double %1448, %1577
  %1579 = fmul contract double %1578, 0x3F3FEABDAF5FE12A
  %1580 = fadd contract double %22, %760
  %1581 = fmul contract double %1580, %4
  %1582 = tail call double @llvm.fabs.f64(double %1581)
  %1583 = fcmp olt double %1582, 0x41D0000000000000
  br i1 %1583, label %1584, label %1603

1584:                                             ; preds = %1406
  %1585 = fmul double %1582, 0x3FE45F306DC9C883
  %1586 = tail call double @llvm.rint.f64(double %1585)
  %1587 = tail call double @llvm.fma.f64(double %1586, double 0xBFF921FB54442D18, double %1582)
  %1588 = tail call double @llvm.fma.f64(double %1586, double 0xBC91A62633145C00, double %1587)
  %1589 = fmul double %1586, 0x3C91A62633145C00
  %1590 = fneg double %1589
  %1591 = tail call double @llvm.fma.f64(double %1586, double 0x3C91A62633145C00, double %1590)
  %1592 = fsub double %1587, %1589
  %1593 = fsub double %1587, %1592
  %1594 = fsub double %1593, %1589
  %1595 = fsub double %1592, %1588
  %1596 = fadd double %1595, %1594
  %1597 = fsub double %1596, %1591
  %1598 = tail call double @llvm.fma.f64(double %1586, double 0xB97B839A252049C0, double %1597)
  %1599 = fadd double %1588, %1598
  %1600 = fsub double %1599, %1588
  %1601 = fsub double %1598, %1600
  %1602 = fptosi double %1586 to i32
  br label %1679

1603:                                             ; preds = %1406
  %1604 = tail call double @llvm.amdgcn.trig.preop.f64(double %1582, i32 0)
  %1605 = tail call double @llvm.amdgcn.trig.preop.f64(double %1582, i32 1)
  %1606 = tail call double @llvm.amdgcn.trig.preop.f64(double %1582, i32 2)
  %1607 = fcmp oge double %1582, 0x7B00000000000000
  %1608 = tail call double @llvm.amdgcn.ldexp.f64(double %1582, i32 -128)
  %1609 = select i1 %1607, double %1608, double %1582
  %1610 = fmul double %1606, %1609
  %1611 = fneg double %1610
  %1612 = tail call double @llvm.fma.f64(double %1606, double %1609, double %1611)
  %1613 = fmul double %1605, %1609
  %1614 = fneg double %1613
  %1615 = tail call double @llvm.fma.f64(double %1605, double %1609, double %1614)
  %1616 = fmul double %1604, %1609
  %1617 = fneg double %1616
  %1618 = tail call double @llvm.fma.f64(double %1604, double %1609, double %1617)
  %1619 = fadd double %1613, %1618
  %1620 = fsub double %1619, %1613
  %1621 = fsub double %1619, %1620
  %1622 = fsub double %1618, %1620
  %1623 = fsub double %1613, %1621
  %1624 = fadd double %1622, %1623
  %1625 = fadd double %1610, %1615
  %1626 = fsub double %1625, %1610
  %1627 = fsub double %1625, %1626
  %1628 = fsub double %1615, %1626
  %1629 = fsub double %1610, %1627
  %1630 = fadd double %1628, %1629
  %1631 = fadd double %1625, %1624
  %1632 = fsub double %1631, %1625
  %1633 = fsub double %1631, %1632
  %1634 = fsub double %1624, %1632
  %1635 = fsub double %1625, %1633
  %1636 = fadd double %1634, %1635
  %1637 = fadd double %1630, %1636
  %1638 = fadd double %1612, %1637
  %1639 = fadd double %1616, %1619
  %1640 = fsub double %1639, %1616
  %1641 = fsub double %1619, %1640
  %1642 = fadd double %1641, %1631
  %1643 = fsub double %1642, %1641
  %1644 = fsub double %1631, %1643
  %1645 = fadd double %1644, %1638
  %1646 = tail call double @llvm.amdgcn.ldexp.f64(double %1639, i32 -2)
  %1647 = tail call double @llvm.amdgcn.fract.f64(double %1646)
  %1648 = tail call i1 @llvm.amdgcn.class.f64(double %1646, i32 516)
  %1649 = select i1 %1648, double 0.000000e+00, double %1647
  %1650 = tail call double @llvm.amdgcn.ldexp.f64(double %1649, i32 2)
  %1651 = fadd double %1650, %1642
  %1652 = fcmp olt double %1651, 0.000000e+00
  %1653 = select i1 %1652, double 4.000000e+00, double 0.000000e+00
  %1654 = fadd double %1650, %1653
  %1655 = fadd double %1642, %1654
  %1656 = fptosi double %1655 to i32
  %1657 = sitofp i32 %1656 to double
  %1658 = fsub double %1654, %1657
  %1659 = fadd double %1642, %1658
  %1660 = fsub double %1659, %1658
  %1661 = fsub double %1642, %1660
  %1662 = fadd double %1645, %1661
  %1663 = fcmp oge double %1659, 5.000000e-01
  %1664 = zext i1 %1663 to i32
  %1665 = add nsw i32 %1664, %1656
  %1666 = select i1 %1663, double 1.000000e+00, double 0.000000e+00
  %1667 = fsub double %1659, %1666
  %1668 = fadd double %1667, %1662
  %1669 = fsub double %1668, %1667
  %1670 = fsub double %1662, %1669
  %1671 = fmul double %1668, 0x3FF921FB54442D18
  %1672 = fneg double %1671
  %1673 = tail call double @llvm.fma.f64(double %1668, double 0x3FF921FB54442D18, double %1672)
  %1674 = tail call double @llvm.fma.f64(double %1668, double 0x3C91A62633145C07, double %1673)
  %1675 = tail call double @llvm.fma.f64(double %1670, double 0x3FF921FB54442D18, double %1674)
  %1676 = fadd double %1671, %1675
  %1677 = fsub double %1676, %1671
  %1678 = fsub double %1675, %1677
  br label %1679

1679:                                             ; preds = %1584, %1603
  %1680 = phi double [ %1601, %1584 ], [ %1678, %1603 ]
  %1681 = phi double [ %1599, %1584 ], [ %1676, %1603 ]
  %1682 = phi i32 [ %1602, %1584 ], [ %1665, %1603 ]
  %1683 = fmul double %1681, %1681
  %1684 = fmul double %1683, 5.000000e-01
  %1685 = fsub double 1.000000e+00, %1684
  %1686 = fsub double 1.000000e+00, %1685
  %1687 = fsub double %1686, %1684
  %1688 = fmul double %1683, %1683
  %1689 = tail call double @llvm.fma.f64(double %1683, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1690 = tail call double @llvm.fma.f64(double %1683, double %1689, double 0xBE927E4FA17F65F6)
  %1691 = tail call double @llvm.fma.f64(double %1683, double %1690, double 0x3EFA01A019F4EC90)
  %1692 = tail call double @llvm.fma.f64(double %1683, double %1691, double 0xBF56C16C16C16967)
  %1693 = tail call double @llvm.fma.f64(double %1683, double %1692, double 0x3FA5555555555555)
  %1694 = fneg double %1680
  %1695 = tail call double @llvm.fma.f64(double %1681, double %1694, double %1687)
  %1696 = tail call double @llvm.fma.f64(double %1688, double %1693, double %1695)
  %1697 = fadd double %1685, %1696
  %1698 = tail call double @llvm.fma.f64(double %1683, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1699 = tail call double @llvm.fma.f64(double %1683, double %1698, double 0x3EC71DE3796CDE01)
  %1700 = tail call double @llvm.fma.f64(double %1683, double %1699, double 0xBF2A01A019E83E5C)
  %1701 = tail call double @llvm.fma.f64(double %1683, double %1700, double 0x3F81111111110BB3)
  %1702 = fneg double %1683
  %1703 = fmul double %1681, %1702
  %1704 = fmul double %1680, 5.000000e-01
  %1705 = tail call double @llvm.fma.f64(double %1703, double %1701, double %1704)
  %1706 = tail call double @llvm.fma.f64(double %1683, double %1705, double %1694)
  %1707 = tail call double @llvm.fma.f64(double %1703, double 0xBFC5555555555555, double %1706)
  %1708 = fsub double %1681, %1707
  %1709 = fneg double %1708
  %1710 = and i32 %1682, 1
  %1711 = icmp eq i32 %1710, 0
  %1712 = select i1 %1711, double %1697, double %1709
  %1713 = bitcast double %1712 to <2 x i32>
  %1714 = shl i32 %1682, 30
  %1715 = and i32 %1714, -2147483648
  %1716 = extractelement <2 x i32> %1713, i64 1
  %1717 = xor i32 %1716, %1715
  %1718 = insertelement <2 x i32> %1713, i32 %1717, i64 1
  %1719 = tail call i1 @llvm.amdgcn.class.f64(double %1582, i32 504)
  %1720 = select i1 %1719, <2 x i32> %1718, <2 x i32> <i32 0, i32 2146959360>
  %1721 = bitcast <2 x i32> %1720 to double
  %1722 = fneg contract double %1580
  %1723 = fdiv contract double %1722, %5
  %1724 = tail call double @llvm.fabs.f64(double %1723)
  %1725 = fadd double %1724, 0xBFE62E42FEFA39EF
  %1726 = fsub double %1725, %1724
  %1727 = fsub double %1726, %1725
  %1728 = fadd double %1724, %1727
  %1729 = fadd double %1726, 0x3FE62E42FEFA39EF
  %1730 = fsub double %1728, %1729
  %1731 = fadd double %1730, 0xBC7ABC9E3B39803F
  %1732 = fadd double %1725, %1731
  %1733 = fsub double %1732, %1725
  %1734 = fsub double %1731, %1733
  %1735 = fmul double %1732, 0x3FF71547652B82FE
  %1736 = tail call double @llvm.rint.f64(double %1735)
  %1737 = tail call double @llvm.fma.f64(double %1736, double 0xBFE62E42FEFA3000, double %1732)
  %1738 = fadd double %1734, %1737
  %1739 = fsub double %1738, %1737
  %1740 = fsub double %1734, %1739
  %1741 = fmul double %1736, 0x3D53DE6AF278E000
  %1742 = fsub double %1738, %1741
  %1743 = fsub double %1738, %1742
  %1744 = fsub double %1743, %1741
  %1745 = fadd double %1740, %1744
  %1746 = fadd double %1742, %1745
  %1747 = fsub double %1746, %1742
  %1748 = fsub double %1745, %1747
  %1749 = fmul double %1736, 0x3AC9CC01F97B57A0
  %1750 = fsub double %1746, %1749
  %1751 = fsub double %1746, %1750
  %1752 = fsub double %1751, %1749
  %1753 = fadd double %1748, %1752
  %1754 = fadd double %1750, %1753
  %1755 = fsub double %1754, %1750
  %1756 = fsub double %1753, %1755
  %1757 = tail call double @llvm.fma.f64(double %1754, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1758 = tail call double @llvm.fma.f64(double %1754, double %1757, double 0x3EC71DEE623FDE64)
  %1759 = tail call double @llvm.fma.f64(double %1754, double %1758, double 0x3EFA01997C89E6B0)
  %1760 = tail call double @llvm.fma.f64(double %1754, double %1759, double 0x3F2A01A014761F6E)
  %1761 = tail call double @llvm.fma.f64(double %1754, double %1760, double 0x3F56C16C1852B7B0)
  %1762 = tail call double @llvm.fma.f64(double %1754, double %1761, double 0x3F81111111122322)
  %1763 = tail call double @llvm.fma.f64(double %1754, double %1762, double 0x3FA55555555502A1)
  %1764 = tail call double @llvm.fma.f64(double %1754, double %1763, double 0x3FC5555555555511)
  %1765 = tail call double @llvm.fma.f64(double %1754, double %1764, double 0x3FE000000000000B)
  %1766 = fmul double %1754, %1754
  %1767 = fneg double %1766
  %1768 = tail call double @llvm.fma.f64(double %1754, double %1754, double %1767)
  %1769 = fmul double %1756, 2.000000e+00
  %1770 = tail call double @llvm.fma.f64(double %1754, double %1769, double %1768)
  %1771 = fadd double %1766, %1770
  %1772 = fsub double %1771, %1766
  %1773 = fsub double %1770, %1772
  %1774 = fmul double %1771, %1765
  %1775 = fneg double %1774
  %1776 = tail call double @llvm.fma.f64(double %1771, double %1765, double %1775)
  %1777 = tail call double @llvm.fma.f64(double %1773, double %1765, double %1776)
  %1778 = fadd double %1774, %1777
  %1779 = fsub double %1778, %1774
  %1780 = fsub double %1777, %1779
  %1781 = fadd double %1754, %1778
  %1782 = fsub double %1781, %1754
  %1783 = fsub double %1778, %1782
  %1784 = fadd double %1756, %1780
  %1785 = fadd double %1784, %1783
  %1786 = fadd double %1781, %1785
  %1787 = fsub double %1786, %1781
  %1788 = fsub double %1785, %1787
  %1789 = fadd double %1786, 1.000000e+00
  %1790 = fadd double %1789, -1.000000e+00
  %1791 = fsub double %1786, %1790
  %1792 = fadd double %1788, %1791
  %1793 = fadd double %1789, %1792
  %1794 = fsub double %1793, %1789
  %1795 = fsub double %1792, %1794
  %1796 = fptosi double %1736 to i32
  %1797 = tail call double @llvm.amdgcn.ldexp.f64(double %1793, i32 %1796)
  %1798 = tail call double @llvm.amdgcn.ldexp.f64(double %1795, i32 %1796)
  %1799 = tail call double @llvm.amdgcn.rcp.f64(double %1797)
  %1800 = fneg double %1797
  %1801 = tail call double @llvm.fma.f64(double %1800, double %1799, double 1.000000e+00)
  %1802 = tail call double @llvm.fma.f64(double %1801, double %1799, double %1799)
  %1803 = tail call double @llvm.fma.f64(double %1800, double %1802, double 1.000000e+00)
  %1804 = tail call double @llvm.fma.f64(double %1803, double %1802, double %1802)
  %1805 = fmul double %1797, %1804
  %1806 = fneg double %1805
  %1807 = tail call double @llvm.fma.f64(double %1804, double %1797, double %1806)
  %1808 = tail call double @llvm.fma.f64(double %1804, double %1798, double %1807)
  %1809 = fadd double %1805, %1808
  %1810 = fsub double %1809, %1805
  %1811 = fsub double %1808, %1810
  %1812 = fsub double 1.000000e+00, %1809
  %1813 = fsub double 1.000000e+00, %1812
  %1814 = fsub double %1813, %1809
  %1815 = fsub double %1814, %1811
  %1816 = fadd double %1812, %1815
  %1817 = fsub double %1816, %1812
  %1818 = fsub double %1815, %1817
  %1819 = fmul double %1804, %1816
  %1820 = fmul double %1797, %1819
  %1821 = fneg double %1820
  %1822 = tail call double @llvm.fma.f64(double %1819, double %1797, double %1821)
  %1823 = tail call double @llvm.fma.f64(double %1819, double %1798, double %1822)
  %1824 = fadd double %1820, %1823
  %1825 = fsub double %1824, %1820
  %1826 = fsub double %1823, %1825
  %1827 = fsub double %1816, %1824
  %1828 = fsub double %1816, %1827
  %1829 = fsub double %1828, %1824
  %1830 = fadd double %1818, %1829
  %1831 = fsub double %1830, %1826
  %1832 = fadd double %1827, %1831
  %1833 = fmul double %1804, %1832
  %1834 = fadd double %1804, %1819
  %1835 = fsub double %1834, %1804
  %1836 = fsub double %1819, %1835
  %1837 = fadd double %1836, %1833
  %1838 = fadd double %1834, %1837
  %1839 = fsub double %1838, %1834
  %1840 = fsub double %1837, %1839
  %1841 = tail call double @llvm.amdgcn.ldexp.f64(double %1838, i32 -2)
  %1842 = tail call double @llvm.amdgcn.ldexp.f64(double %1840, i32 -2)
  %1843 = fadd double %1797, %1841
  %1844 = fsub double %1843, %1797
  %1845 = fsub double %1841, %1844
  %1846 = fadd double %1798, %1842
  %1847 = fadd double %1846, %1845
  %1848 = fadd double %1843, %1847
  %1849 = fcmp oge double %1724, 0x408633CE8FB9F87E
  %1850 = select i1 %1849, double 0x7FF0000000000000, double %1848
  %1851 = fdiv contract double %1721, %1850
  %1852 = fmul contract double %1851, 0x3F3FEABDAF5FE12A
  %1853 = fadd contract double %22, %1034
  %1854 = fmul contract double %1853, %4
  %1855 = tail call double @llvm.fabs.f64(double %1854)
  %1856 = fcmp olt double %1855, 0x41D0000000000000
  br i1 %1856, label %1857, label %1876

1857:                                             ; preds = %1679
  %1858 = fmul double %1855, 0x3FE45F306DC9C883
  %1859 = tail call double @llvm.rint.f64(double %1858)
  %1860 = tail call double @llvm.fma.f64(double %1859, double 0xBFF921FB54442D18, double %1855)
  %1861 = tail call double @llvm.fma.f64(double %1859, double 0xBC91A62633145C00, double %1860)
  %1862 = fmul double %1859, 0x3C91A62633145C00
  %1863 = fneg double %1862
  %1864 = tail call double @llvm.fma.f64(double %1859, double 0x3C91A62633145C00, double %1863)
  %1865 = fsub double %1860, %1862
  %1866 = fsub double %1860, %1865
  %1867 = fsub double %1866, %1862
  %1868 = fsub double %1865, %1861
  %1869 = fadd double %1868, %1867
  %1870 = fsub double %1869, %1864
  %1871 = tail call double @llvm.fma.f64(double %1859, double 0xB97B839A252049C0, double %1870)
  %1872 = fadd double %1861, %1871
  %1873 = fsub double %1872, %1861
  %1874 = fsub double %1871, %1873
  %1875 = fptosi double %1859 to i32
  br label %1952

1876:                                             ; preds = %1679
  %1877 = tail call double @llvm.amdgcn.trig.preop.f64(double %1855, i32 0)
  %1878 = tail call double @llvm.amdgcn.trig.preop.f64(double %1855, i32 1)
  %1879 = tail call double @llvm.amdgcn.trig.preop.f64(double %1855, i32 2)
  %1880 = fcmp oge double %1855, 0x7B00000000000000
  %1881 = tail call double @llvm.amdgcn.ldexp.f64(double %1855, i32 -128)
  %1882 = select i1 %1880, double %1881, double %1855
  %1883 = fmul double %1879, %1882
  %1884 = fneg double %1883
  %1885 = tail call double @llvm.fma.f64(double %1879, double %1882, double %1884)
  %1886 = fmul double %1878, %1882
  %1887 = fneg double %1886
  %1888 = tail call double @llvm.fma.f64(double %1878, double %1882, double %1887)
  %1889 = fmul double %1877, %1882
  %1890 = fneg double %1889
  %1891 = tail call double @llvm.fma.f64(double %1877, double %1882, double %1890)
  %1892 = fadd double %1886, %1891
  %1893 = fsub double %1892, %1886
  %1894 = fsub double %1892, %1893
  %1895 = fsub double %1891, %1893
  %1896 = fsub double %1886, %1894
  %1897 = fadd double %1895, %1896
  %1898 = fadd double %1883, %1888
  %1899 = fsub double %1898, %1883
  %1900 = fsub double %1898, %1899
  %1901 = fsub double %1888, %1899
  %1902 = fsub double %1883, %1900
  %1903 = fadd double %1901, %1902
  %1904 = fadd double %1898, %1897
  %1905 = fsub double %1904, %1898
  %1906 = fsub double %1904, %1905
  %1907 = fsub double %1897, %1905
  %1908 = fsub double %1898, %1906
  %1909 = fadd double %1907, %1908
  %1910 = fadd double %1903, %1909
  %1911 = fadd double %1885, %1910
  %1912 = fadd double %1889, %1892
  %1913 = fsub double %1912, %1889
  %1914 = fsub double %1892, %1913
  %1915 = fadd double %1914, %1904
  %1916 = fsub double %1915, %1914
  %1917 = fsub double %1904, %1916
  %1918 = fadd double %1917, %1911
  %1919 = tail call double @llvm.amdgcn.ldexp.f64(double %1912, i32 -2)
  %1920 = tail call double @llvm.amdgcn.fract.f64(double %1919)
  %1921 = tail call i1 @llvm.amdgcn.class.f64(double %1919, i32 516)
  %1922 = select i1 %1921, double 0.000000e+00, double %1920
  %1923 = tail call double @llvm.amdgcn.ldexp.f64(double %1922, i32 2)
  %1924 = fadd double %1923, %1915
  %1925 = fcmp olt double %1924, 0.000000e+00
  %1926 = select i1 %1925, double 4.000000e+00, double 0.000000e+00
  %1927 = fadd double %1923, %1926
  %1928 = fadd double %1915, %1927
  %1929 = fptosi double %1928 to i32
  %1930 = sitofp i32 %1929 to double
  %1931 = fsub double %1927, %1930
  %1932 = fadd double %1915, %1931
  %1933 = fsub double %1932, %1931
  %1934 = fsub double %1915, %1933
  %1935 = fadd double %1918, %1934
  %1936 = fcmp oge double %1932, 5.000000e-01
  %1937 = zext i1 %1936 to i32
  %1938 = add nsw i32 %1937, %1929
  %1939 = select i1 %1936, double 1.000000e+00, double 0.000000e+00
  %1940 = fsub double %1932, %1939
  %1941 = fadd double %1940, %1935
  %1942 = fsub double %1941, %1940
  %1943 = fsub double %1935, %1942
  %1944 = fmul double %1941, 0x3FF921FB54442D18
  %1945 = fneg double %1944
  %1946 = tail call double @llvm.fma.f64(double %1941, double 0x3FF921FB54442D18, double %1945)
  %1947 = tail call double @llvm.fma.f64(double %1941, double 0x3C91A62633145C07, double %1946)
  %1948 = tail call double @llvm.fma.f64(double %1943, double 0x3FF921FB54442D18, double %1947)
  %1949 = fadd double %1944, %1948
  %1950 = fsub double %1949, %1944
  %1951 = fsub double %1948, %1950
  br label %1952

1952:                                             ; preds = %1857, %1876
  %1953 = phi double [ %1874, %1857 ], [ %1951, %1876 ]
  %1954 = phi double [ %1872, %1857 ], [ %1949, %1876 ]
  %1955 = phi i32 [ %1875, %1857 ], [ %1938, %1876 ]
  %1956 = fmul double %1954, %1954
  %1957 = fmul double %1956, 5.000000e-01
  %1958 = fsub double 1.000000e+00, %1957
  %1959 = fsub double 1.000000e+00, %1958
  %1960 = fsub double %1959, %1957
  %1961 = fmul double %1956, %1956
  %1962 = tail call double @llvm.fma.f64(double %1956, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1963 = tail call double @llvm.fma.f64(double %1956, double %1962, double 0xBE927E4FA17F65F6)
  %1964 = tail call double @llvm.fma.f64(double %1956, double %1963, double 0x3EFA01A019F4EC90)
  %1965 = tail call double @llvm.fma.f64(double %1956, double %1964, double 0xBF56C16C16C16967)
  %1966 = tail call double @llvm.fma.f64(double %1956, double %1965, double 0x3FA5555555555555)
  %1967 = fneg double %1953
  %1968 = tail call double @llvm.fma.f64(double %1954, double %1967, double %1960)
  %1969 = tail call double @llvm.fma.f64(double %1961, double %1966, double %1968)
  %1970 = fadd double %1958, %1969
  %1971 = tail call double @llvm.fma.f64(double %1956, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1972 = tail call double @llvm.fma.f64(double %1956, double %1971, double 0x3EC71DE3796CDE01)
  %1973 = tail call double @llvm.fma.f64(double %1956, double %1972, double 0xBF2A01A019E83E5C)
  %1974 = tail call double @llvm.fma.f64(double %1956, double %1973, double 0x3F81111111110BB3)
  %1975 = fneg double %1956
  %1976 = fmul double %1954, %1975
  %1977 = fmul double %1953, 5.000000e-01
  %1978 = tail call double @llvm.fma.f64(double %1976, double %1974, double %1977)
  %1979 = tail call double @llvm.fma.f64(double %1956, double %1978, double %1967)
  %1980 = tail call double @llvm.fma.f64(double %1976, double 0xBFC5555555555555, double %1979)
  %1981 = fsub double %1954, %1980
  %1982 = fneg double %1981
  %1983 = and i32 %1955, 1
  %1984 = icmp eq i32 %1983, 0
  %1985 = select i1 %1984, double %1970, double %1982
  %1986 = bitcast double %1985 to <2 x i32>
  %1987 = shl i32 %1955, 30
  %1988 = and i32 %1987, -2147483648
  %1989 = extractelement <2 x i32> %1986, i64 1
  %1990 = xor i32 %1989, %1988
  %1991 = insertelement <2 x i32> %1986, i32 %1990, i64 1
  %1992 = tail call i1 @llvm.amdgcn.class.f64(double %1855, i32 504)
  %1993 = select i1 %1992, <2 x i32> %1991, <2 x i32> <i32 0, i32 2146959360>
  %1994 = bitcast <2 x i32> %1993 to double
  %1995 = fneg contract double %1853
  %1996 = fdiv contract double %1995, %5
  %1997 = tail call double @llvm.fabs.f64(double %1996)
  %1998 = fadd double %1997, 0xBFE62E42FEFA39EF
  %1999 = fsub double %1998, %1997
  %2000 = fsub double %1999, %1998
  %2001 = fadd double %1997, %2000
  %2002 = fadd double %1999, 0x3FE62E42FEFA39EF
  %2003 = fsub double %2001, %2002
  %2004 = fadd double %2003, 0xBC7ABC9E3B39803F
  %2005 = fadd double %1998, %2004
  %2006 = fsub double %2005, %1998
  %2007 = fsub double %2004, %2006
  %2008 = fmul double %2005, 0x3FF71547652B82FE
  %2009 = tail call double @llvm.rint.f64(double %2008)
  %2010 = tail call double @llvm.fma.f64(double %2009, double 0xBFE62E42FEFA3000, double %2005)
  %2011 = fadd double %2007, %2010
  %2012 = fsub double %2011, %2010
  %2013 = fsub double %2007, %2012
  %2014 = fmul double %2009, 0x3D53DE6AF278E000
  %2015 = fsub double %2011, %2014
  %2016 = fsub double %2011, %2015
  %2017 = fsub double %2016, %2014
  %2018 = fadd double %2013, %2017
  %2019 = fadd double %2015, %2018
  %2020 = fsub double %2019, %2015
  %2021 = fsub double %2018, %2020
  %2022 = fmul double %2009, 0x3AC9CC01F97B57A0
  %2023 = fsub double %2019, %2022
  %2024 = fsub double %2019, %2023
  %2025 = fsub double %2024, %2022
  %2026 = fadd double %2021, %2025
  %2027 = fadd double %2023, %2026
  %2028 = fsub double %2027, %2023
  %2029 = fsub double %2026, %2028
  %2030 = tail call double @llvm.fma.f64(double %2027, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %2031 = tail call double @llvm.fma.f64(double %2027, double %2030, double 0x3EC71DEE623FDE64)
  %2032 = tail call double @llvm.fma.f64(double %2027, double %2031, double 0x3EFA01997C89E6B0)
  %2033 = tail call double @llvm.fma.f64(double %2027, double %2032, double 0x3F2A01A014761F6E)
  %2034 = tail call double @llvm.fma.f64(double %2027, double %2033, double 0x3F56C16C1852B7B0)
  %2035 = tail call double @llvm.fma.f64(double %2027, double %2034, double 0x3F81111111122322)
  %2036 = tail call double @llvm.fma.f64(double %2027, double %2035, double 0x3FA55555555502A1)
  %2037 = tail call double @llvm.fma.f64(double %2027, double %2036, double 0x3FC5555555555511)
  %2038 = tail call double @llvm.fma.f64(double %2027, double %2037, double 0x3FE000000000000B)
  %2039 = fmul double %2027, %2027
  %2040 = fneg double %2039
  %2041 = tail call double @llvm.fma.f64(double %2027, double %2027, double %2040)
  %2042 = fmul double %2029, 2.000000e+00
  %2043 = tail call double @llvm.fma.f64(double %2027, double %2042, double %2041)
  %2044 = fadd double %2039, %2043
  %2045 = fsub double %2044, %2039
  %2046 = fsub double %2043, %2045
  %2047 = fmul double %2044, %2038
  %2048 = fneg double %2047
  %2049 = tail call double @llvm.fma.f64(double %2044, double %2038, double %2048)
  %2050 = tail call double @llvm.fma.f64(double %2046, double %2038, double %2049)
  %2051 = fadd double %2047, %2050
  %2052 = fsub double %2051, %2047
  %2053 = fsub double %2050, %2052
  %2054 = fadd double %2027, %2051
  %2055 = fsub double %2054, %2027
  %2056 = fsub double %2051, %2055
  %2057 = fadd double %2029, %2053
  %2058 = fadd double %2057, %2056
  %2059 = fadd double %2054, %2058
  %2060 = fsub double %2059, %2054
  %2061 = fsub double %2058, %2060
  %2062 = fadd double %2059, 1.000000e+00
  %2063 = fadd double %2062, -1.000000e+00
  %2064 = fsub double %2059, %2063
  %2065 = fadd double %2061, %2064
  %2066 = fadd double %2062, %2065
  %2067 = fsub double %2066, %2062
  %2068 = fsub double %2065, %2067
  %2069 = fptosi double %2009 to i32
  %2070 = tail call double @llvm.amdgcn.ldexp.f64(double %2066, i32 %2069)
  %2071 = tail call double @llvm.amdgcn.ldexp.f64(double %2068, i32 %2069)
  %2072 = tail call double @llvm.amdgcn.rcp.f64(double %2070)
  %2073 = fneg double %2070
  %2074 = tail call double @llvm.fma.f64(double %2073, double %2072, double 1.000000e+00)
  %2075 = tail call double @llvm.fma.f64(double %2074, double %2072, double %2072)
  %2076 = tail call double @llvm.fma.f64(double %2073, double %2075, double 1.000000e+00)
  %2077 = tail call double @llvm.fma.f64(double %2076, double %2075, double %2075)
  %2078 = fmul double %2070, %2077
  %2079 = fneg double %2078
  %2080 = tail call double @llvm.fma.f64(double %2077, double %2070, double %2079)
  %2081 = tail call double @llvm.fma.f64(double %2077, double %2071, double %2080)
  %2082 = fadd double %2078, %2081
  %2083 = fsub double %2082, %2078
  %2084 = fsub double %2081, %2083
  %2085 = fsub double 1.000000e+00, %2082
  %2086 = fsub double 1.000000e+00, %2085
  %2087 = fsub double %2086, %2082
  %2088 = fsub double %2087, %2084
  %2089 = fadd double %2085, %2088
  %2090 = fsub double %2089, %2085
  %2091 = fsub double %2088, %2090
  %2092 = fmul double %2077, %2089
  %2093 = fmul double %2070, %2092
  %2094 = fneg double %2093
  %2095 = tail call double @llvm.fma.f64(double %2092, double %2070, double %2094)
  %2096 = tail call double @llvm.fma.f64(double %2092, double %2071, double %2095)
  %2097 = fadd double %2093, %2096
  %2098 = fsub double %2097, %2093
  %2099 = fsub double %2096, %2098
  %2100 = fsub double %2089, %2097
  %2101 = fsub double %2089, %2100
  %2102 = fsub double %2101, %2097
  %2103 = fadd double %2091, %2102
  %2104 = fsub double %2103, %2099
  %2105 = fadd double %2100, %2104
  %2106 = fmul double %2077, %2105
  %2107 = fadd double %2077, %2092
  %2108 = fsub double %2107, %2077
  %2109 = fsub double %2092, %2108
  %2110 = fadd double %2109, %2106
  %2111 = fadd double %2107, %2110
  %2112 = fsub double %2111, %2107
  %2113 = fsub double %2110, %2112
  %2114 = tail call double @llvm.amdgcn.ldexp.f64(double %2111, i32 -2)
  %2115 = tail call double @llvm.amdgcn.ldexp.f64(double %2113, i32 -2)
  %2116 = fadd double %2070, %2114
  %2117 = fsub double %2116, %2070
  %2118 = fsub double %2114, %2117
  %2119 = fadd double %2071, %2115
  %2120 = fadd double %2119, %2118
  %2121 = fadd double %2116, %2120
  %2122 = fcmp oge double %1997, 0x408633CE8FB9F87E
  %2123 = select i1 %2122, double 0x7FF0000000000000, double %2121
  %2124 = fdiv contract double %1994, %2123
  %2125 = fmul contract double %2124, 0x3F3FEABDAF5FE12A
  %2126 = fmul contract double %758, %393
  %2127 = fmul contract double %1579, %403
  %2128 = fsub contract double %2126, %2127
  br i1 %215, label %2327, label %2129

2129:                                             ; preds = %1952
  %2130 = fmul contract double %758, %404
  %2131 = fmul contract double %1579, %414
  %2132 = fsub contract double %2130, %2131
  %2133 = fneg contract double %2132
  %2134 = fmul contract double %477, %2133
  %2135 = fmul contract double %475, %4
  %2136 = fsub contract double %2134, %2135
  %2137 = fmul contract double %474, %6
  %2138 = fsub contract double %2136, %2137
  %2139 = fsub contract double %480, %481
  %2140 = fmul contract double %2128, %2139
  %2141 = fmul contract double %476, %2132
  %2142 = fadd contract double %2140, %2141
  %2143 = fmul contract double %474, %4
  %2144 = fadd contract double %2143, %2142
  %2145 = fmul contract double %475, %6
  %2146 = fsub contract double %2144, %2145
  %2147 = fmul contract double %2128, %479
  %2148 = fmul contract double %475, %2132
  %2149 = fsub contract double %2147, %2148
  %2150 = fmul contract double %386, %477
  %2151 = fsub contract double %2149, %2150
  %2152 = fmul contract double %476, %7
  %2153 = fsub contract double %2151, %2152
  %2154 = fmul contract double %474, %2132
  %2155 = fmul contract double %2128, %478
  %2156 = fsub contract double %2154, %2155
  %2157 = fmul contract double %386, %476
  %2158 = fadd contract double %2157, %2156
  %2159 = fmul contract double %477, %7
  %2160 = fsub contract double %2158, %2159
  %2161 = fmul contract double %2128, %477
  %2162 = fmul contract double %479, %4
  %2163 = fsub contract double %2161, %2162
  %2164 = fmul contract double %478, %8
  %2165 = fsub contract double %2163, %2164
  %2166 = fsub contract double %481, %482
  %2167 = fmul contract double %2132, %2166
  %2168 = fmul contract double %2128, %476
  %2169 = fsub contract double %2167, %2168
  %2170 = fmul contract double %478, %4
  %2171 = fadd contract double %2170, %2169
  %2172 = fmul contract double %479, %8
  %2173 = fsub contract double %2171, %2172
  %2174 = fmul contract double %2128, 2.000000e+00
  %2175 = fmul contract double %2174, %475
  %2176 = fmul contract double %41, %481
  %2177 = fsub contract double %2176, %2175
  %2178 = fmul contract double %2132, 2.000000e+00
  %2179 = fmul contract double %2178, %479
  %2180 = fsub contract double %2175, %2179
  %2181 = fsub contract double %2180, %2176
  %2182 = fmul contract double %37, %2138
  %2183 = fadd contract double %474, %2182
  %2184 = fmul contract double %37, %2146
  %2185 = fadd contract double %475, %2184
  %2186 = fmul contract double %37, %2153
  %2187 = fadd contract double %476, %2186
  %2188 = fmul contract double %37, %2160
  %2189 = fadd contract double %477, %2188
  %2190 = fmul contract double %37, %2165
  %2191 = fadd contract double %478, %2190
  %2192 = fmul contract double %37, %2173
  %2193 = fadd contract double %479, %2192
  %2194 = fmul contract double %37, %2177
  %2195 = fadd contract double %480, %2194
  %2196 = fmul contract double %37, %2181
  %2197 = fadd contract double %481, %2196
  %2198 = fmul contract double %37, %2179
  %2199 = fadd contract double %482, %2198
  %2200 = fmul contract double %1032, %393
  %2201 = fmul contract double %1852, %403
  %2202 = fsub contract double %2200, %2201
  %2203 = fmul contract double %1032, %415
  %2204 = fmul contract double %1852, %425
  %2205 = fsub contract double %2203, %2204
  %2206 = fneg contract double %2205
  %2207 = fmul contract double %2189, %2206
  %2208 = fmul contract double %2185, %4
  %2209 = fsub contract double %2207, %2208
  %2210 = fmul contract double %2183, %6
  %2211 = fsub contract double %2209, %2210
  %2212 = fsub contract double %2195, %2197
  %2213 = fmul contract double %2202, %2212
  %2214 = fmul contract double %2187, %2205
  %2215 = fadd contract double %2213, %2214
  %2216 = fmul contract double %2183, %4
  %2217 = fadd contract double %2216, %2215
  %2218 = fmul contract double %2185, %6
  %2219 = fsub contract double %2217, %2218
  %2220 = fmul contract double %2202, %2193
  %2221 = fmul contract double %2185, %2205
  %2222 = fsub contract double %2220, %2221
  %2223 = fmul contract double %386, %2189
  %2224 = fsub contract double %2222, %2223
  %2225 = fmul contract double %2187, %7
  %2226 = fsub contract double %2224, %2225
  %2227 = fmul contract double %2183, %2205
  %2228 = fmul contract double %2202, %2191
  %2229 = fsub contract double %2227, %2228
  %2230 = fmul contract double %386, %2187
  %2231 = fadd contract double %2230, %2229
  %2232 = fmul contract double %2189, %7
  %2233 = fsub contract double %2231, %2232
  %2234 = fmul contract double %2202, %2189
  %2235 = fmul contract double %2193, %4
  %2236 = fsub contract double %2234, %2235
  %2237 = fmul contract double %2191, %8
  %2238 = fsub contract double %2236, %2237
  %2239 = fsub contract double %2197, %2199
  %2240 = fmul contract double %2205, %2239
  %2241 = fmul contract double %2202, %2187
  %2242 = fsub contract double %2240, %2241
  %2243 = fmul contract double %2191, %4
  %2244 = fadd contract double %2243, %2242
  %2245 = fmul contract double %2193, %8
  %2246 = fsub contract double %2244, %2245
  %2247 = fmul contract double %2202, 2.000000e+00
  %2248 = fmul contract double %2247, %2185
  %2249 = fmul contract double %41, %2197
  %2250 = fsub contract double %2249, %2248
  %2251 = fmul contract double %2205, 2.000000e+00
  %2252 = fmul contract double %2251, %2193
  %2253 = fsub contract double %2248, %2252
  %2254 = fsub contract double %2253, %2249
  %2255 = fmul contract double %37, %2211
  %2256 = fadd contract double %474, %2255
  %2257 = fmul contract double %37, %2219
  %2258 = fadd contract double %475, %2257
  %2259 = fmul contract double %37, %2226
  %2260 = fadd contract double %476, %2259
  %2261 = fmul contract double %37, %2233
  %2262 = fadd contract double %477, %2261
  %2263 = fmul contract double %37, %2238
  %2264 = fadd contract double %478, %2263
  %2265 = fmul contract double %37, %2246
  %2266 = fadd contract double %479, %2265
  %2267 = fmul contract double %37, %2250
  %2268 = fadd contract double %480, %2267
  %2269 = fmul contract double %37, %2254
  %2270 = fadd contract double %481, %2269
  %2271 = fmul contract double %37, %2252
  %2272 = fadd contract double %482, %2271
  %2273 = fmul contract double %1032, %426
  %2274 = fmul contract double %1852, %436
  %2275 = fsub contract double %2273, %2274
  %2276 = fneg contract double %2275
  %2277 = fmul contract double %2262, %2276
  %2278 = fmul contract double %2258, %4
  %2279 = fsub contract double %2277, %2278
  %2280 = fmul contract double %2256, %6
  %2281 = fsub contract double %2279, %2280
  %2282 = fsub contract double %2268, %2270
  %2283 = fmul contract double %2202, %2282
  %2284 = fmul contract double %2260, %2275
  %2285 = fadd contract double %2283, %2284
  %2286 = fmul contract double %2256, %4
  %2287 = fadd contract double %2286, %2285
  %2288 = fmul contract double %2258, %6
  %2289 = fsub contract double %2287, %2288
  %2290 = fmul contract double %2202, %2266
  %2291 = fmul contract double %2258, %2275
  %2292 = fsub contract double %2290, %2291
  %2293 = fmul contract double %386, %2262
  %2294 = fsub contract double %2292, %2293
  %2295 = fmul contract double %2260, %7
  %2296 = fsub contract double %2294, %2295
  %2297 = fmul contract double %2256, %2275
  %2298 = fmul contract double %2202, %2264
  %2299 = fsub contract double %2297, %2298
  %2300 = fmul contract double %386, %2260
  %2301 = fadd contract double %2300, %2299
  %2302 = fmul contract double %2262, %7
  %2303 = fsub contract double %2301, %2302
  %2304 = fmul contract double %2202, %2262
  %2305 = fmul contract double %2266, %4
  %2306 = fsub contract double %2304, %2305
  %2307 = fmul contract double %2264, %8
  %2308 = fsub contract double %2306, %2307
  %2309 = fsub contract double %2270, %2272
  %2310 = fmul contract double %2275, %2309
  %2311 = fmul contract double %2202, %2260
  %2312 = fsub contract double %2310, %2311
  %2313 = fmul contract double %2264, %4
  %2314 = fadd contract double %2313, %2312
  %2315 = fmul contract double %2266, %8
  %2316 = fsub contract double %2314, %2315
  %2317 = fmul contract double %2247, %2258
  %2318 = fmul contract double %41, %2270
  %2319 = fsub contract double %2318, %2317
  %2320 = fmul contract double %2275, 2.000000e+00
  %2321 = fmul contract double %2320, %2266
  %2322 = fsub contract double %2317, %2321
  %2323 = fsub contract double %2322, %2318
  %2324 = fmul contract double %1306, %393
  %2325 = fmul contract double %2125, %403
  %2326 = fsub contract double %2324, %2325
  br label %2525

2327:                                             ; preds = %1952
  %2328 = fmul contract double %758, %437
  %2329 = fmul contract double %1579, %447
  %2330 = fsub contract double %2328, %2329
  %2331 = fneg contract double %2330
  %2332 = fmul contract double %477, %2331
  %2333 = fmul contract double %475, %4
  %2334 = fsub contract double %2332, %2333
  %2335 = fmul contract double %474, %6
  %2336 = fsub contract double %2334, %2335
  %2337 = fsub contract double %480, %481
  %2338 = fmul contract double %2128, %2337
  %2339 = fmul contract double %476, %2330
  %2340 = fadd contract double %2338, %2339
  %2341 = fmul contract double %474, %4
  %2342 = fadd contract double %2341, %2340
  %2343 = fmul contract double %475, %6
  %2344 = fsub contract double %2342, %2343
  %2345 = fmul contract double %2128, %479
  %2346 = fmul contract double %475, %2330
  %2347 = fsub contract double %2345, %2346
  %2348 = fmul contract double %386, %477
  %2349 = fsub contract double %2347, %2348
  %2350 = fmul contract double %476, %7
  %2351 = fsub contract double %2349, %2350
  %2352 = fmul contract double %474, %2330
  %2353 = fmul contract double %2128, %478
  %2354 = fsub contract double %2352, %2353
  %2355 = fmul contract double %386, %476
  %2356 = fadd contract double %2355, %2354
  %2357 = fmul contract double %477, %7
  %2358 = fsub contract double %2356, %2357
  %2359 = fmul contract double %2128, %477
  %2360 = fmul contract double %479, %4
  %2361 = fsub contract double %2359, %2360
  %2362 = fmul contract double %478, %8
  %2363 = fsub contract double %2361, %2362
  %2364 = fsub contract double %481, %482
  %2365 = fmul contract double %2330, %2364
  %2366 = fmul contract double %2128, %476
  %2367 = fsub contract double %2365, %2366
  %2368 = fmul contract double %478, %4
  %2369 = fadd contract double %2368, %2367
  %2370 = fmul contract double %479, %8
  %2371 = fsub contract double %2369, %2370
  %2372 = fmul contract double %2128, 2.000000e+00
  %2373 = fmul contract double %2372, %475
  %2374 = fmul contract double %41, %481
  %2375 = fsub contract double %2374, %2373
  %2376 = fmul contract double %2330, 2.000000e+00
  %2377 = fmul contract double %2376, %479
  %2378 = fsub contract double %2373, %2377
  %2379 = fsub contract double %2378, %2374
  %2380 = fmul contract double %37, %2336
  %2381 = fadd contract double %474, %2380
  %2382 = fmul contract double %37, %2344
  %2383 = fadd contract double %475, %2382
  %2384 = fmul contract double %37, %2351
  %2385 = fadd contract double %476, %2384
  %2386 = fmul contract double %37, %2358
  %2387 = fadd contract double %477, %2386
  %2388 = fmul contract double %37, %2363
  %2389 = fadd contract double %478, %2388
  %2390 = fmul contract double %37, %2371
  %2391 = fadd contract double %479, %2390
  %2392 = fmul contract double %37, %2375
  %2393 = fadd contract double %480, %2392
  %2394 = fmul contract double %37, %2379
  %2395 = fadd contract double %481, %2394
  %2396 = fmul contract double %37, %2377
  %2397 = fadd contract double %482, %2396
  %2398 = fmul contract double %1032, %393
  %2399 = fmul contract double %1852, %403
  %2400 = fsub contract double %2398, %2399
  %2401 = fmul contract double %1032, %448
  %2402 = fmul contract double %1852, %458
  %2403 = fsub contract double %2401, %2402
  %2404 = fneg contract double %2403
  %2405 = fmul contract double %2387, %2404
  %2406 = fmul contract double %2383, %4
  %2407 = fsub contract double %2405, %2406
  %2408 = fmul contract double %2381, %6
  %2409 = fsub contract double %2407, %2408
  %2410 = fsub contract double %2393, %2395
  %2411 = fmul contract double %2400, %2410
  %2412 = fmul contract double %2385, %2403
  %2413 = fadd contract double %2411, %2412
  %2414 = fmul contract double %2381, %4
  %2415 = fadd contract double %2414, %2413
  %2416 = fmul contract double %2383, %6
  %2417 = fsub contract double %2415, %2416
  %2418 = fmul contract double %2400, %2391
  %2419 = fmul contract double %2383, %2403
  %2420 = fsub contract double %2418, %2419
  %2421 = fmul contract double %386, %2387
  %2422 = fsub contract double %2420, %2421
  %2423 = fmul contract double %2385, %7
  %2424 = fsub contract double %2422, %2423
  %2425 = fmul contract double %2381, %2403
  %2426 = fmul contract double %2400, %2389
  %2427 = fsub contract double %2425, %2426
  %2428 = fmul contract double %386, %2385
  %2429 = fadd contract double %2428, %2427
  %2430 = fmul contract double %2387, %7
  %2431 = fsub contract double %2429, %2430
  %2432 = fmul contract double %2400, %2387
  %2433 = fmul contract double %2391, %4
  %2434 = fsub contract double %2432, %2433
  %2435 = fmul contract double %2389, %8
  %2436 = fsub contract double %2434, %2435
  %2437 = fsub contract double %2395, %2397
  %2438 = fmul contract double %2403, %2437
  %2439 = fmul contract double %2400, %2385
  %2440 = fsub contract double %2438, %2439
  %2441 = fmul contract double %2389, %4
  %2442 = fadd contract double %2441, %2440
  %2443 = fmul contract double %2391, %8
  %2444 = fsub contract double %2442, %2443
  %2445 = fmul contract double %2400, 2.000000e+00
  %2446 = fmul contract double %2445, %2383
  %2447 = fmul contract double %41, %2395
  %2448 = fsub contract double %2447, %2446
  %2449 = fmul contract double %2403, 2.000000e+00
  %2450 = fmul contract double %2449, %2391
  %2451 = fsub contract double %2446, %2450
  %2452 = fsub contract double %2451, %2447
  %2453 = fmul contract double %37, %2409
  %2454 = fadd contract double %474, %2453
  %2455 = fmul contract double %37, %2417
  %2456 = fadd contract double %475, %2455
  %2457 = fmul contract double %37, %2424
  %2458 = fadd contract double %476, %2457
  %2459 = fmul contract double %37, %2431
  %2460 = fadd contract double %477, %2459
  %2461 = fmul contract double %37, %2436
  %2462 = fadd contract double %478, %2461
  %2463 = fmul contract double %37, %2444
  %2464 = fadd contract double %479, %2463
  %2465 = fmul contract double %37, %2448
  %2466 = fadd contract double %480, %2465
  %2467 = fmul contract double %37, %2452
  %2468 = fadd contract double %481, %2467
  %2469 = fmul contract double %37, %2450
  %2470 = fadd contract double %482, %2469
  %2471 = fmul contract double %1032, %459
  %2472 = fmul contract double %1852, %469
  %2473 = fsub contract double %2471, %2472
  %2474 = fneg contract double %2473
  %2475 = fmul contract double %2460, %2474
  %2476 = fmul contract double %2456, %4
  %2477 = fsub contract double %2475, %2476
  %2478 = fmul contract double %2454, %6
  %2479 = fsub contract double %2477, %2478
  %2480 = fsub contract double %2466, %2468
  %2481 = fmul contract double %2400, %2480
  %2482 = fmul contract double %2458, %2473
  %2483 = fadd contract double %2481, %2482
  %2484 = fmul contract double %2454, %4
  %2485 = fadd contract double %2484, %2483
  %2486 = fmul contract double %2456, %6
  %2487 = fsub contract double %2485, %2486
  %2488 = fmul contract double %2400, %2464
  %2489 = fmul contract double %2456, %2473
  %2490 = fsub contract double %2488, %2489
  %2491 = fmul contract double %386, %2460
  %2492 = fsub contract double %2490, %2491
  %2493 = fmul contract double %2458, %7
  %2494 = fsub contract double %2492, %2493
  %2495 = fmul contract double %2454, %2473
  %2496 = fmul contract double %2400, %2462
  %2497 = fsub contract double %2495, %2496
  %2498 = fmul contract double %386, %2458
  %2499 = fadd contract double %2498, %2497
  %2500 = fmul contract double %2460, %7
  %2501 = fsub contract double %2499, %2500
  %2502 = fmul contract double %2400, %2460
  %2503 = fmul contract double %2464, %4
  %2504 = fsub contract double %2502, %2503
  %2505 = fmul contract double %2462, %8
  %2506 = fsub contract double %2504, %2505
  %2507 = fsub contract double %2468, %2470
  %2508 = fmul contract double %2473, %2507
  %2509 = fmul contract double %2400, %2458
  %2510 = fsub contract double %2508, %2509
  %2511 = fmul contract double %2462, %4
  %2512 = fadd contract double %2511, %2510
  %2513 = fmul contract double %2464, %8
  %2514 = fsub contract double %2512, %2513
  %2515 = fmul contract double %2445, %2456
  %2516 = fmul contract double %41, %2468
  %2517 = fsub contract double %2516, %2515
  %2518 = fmul contract double %2473, 2.000000e+00
  %2519 = fmul contract double %2518, %2464
  %2520 = fsub contract double %2515, %2519
  %2521 = fsub contract double %2520, %2516
  %2522 = fmul contract double %1306, %393
  %2523 = fmul contract double %2125, %403
  %2524 = fsub contract double %2522, %2523
  br label %2525

2525:                                             ; preds = %2327, %2129
  %2526 = phi double [ %2379, %2327 ], [ %2181, %2129 ]
  %2527 = phi double [ %2377, %2327 ], [ %2179, %2129 ]
  %2528 = phi double [ %2375, %2327 ], [ %2177, %2129 ]
  %2529 = phi double [ %2371, %2327 ], [ %2173, %2129 ]
  %2530 = phi double [ %2363, %2327 ], [ %2165, %2129 ]
  %2531 = phi double [ %2358, %2327 ], [ %2160, %2129 ]
  %2532 = phi double [ %2351, %2327 ], [ %2153, %2129 ]
  %2533 = phi double [ %2344, %2327 ], [ %2146, %2129 ]
  %2534 = phi double [ %2336, %2327 ], [ %2138, %2129 ]
  %2535 = phi double [ %2452, %2327 ], [ %2254, %2129 ]
  %2536 = phi double [ %2450, %2327 ], [ %2252, %2129 ]
  %2537 = phi double [ %2448, %2327 ], [ %2250, %2129 ]
  %2538 = phi double [ %2444, %2327 ], [ %2246, %2129 ]
  %2539 = phi double [ %2436, %2327 ], [ %2238, %2129 ]
  %2540 = phi double [ %2431, %2327 ], [ %2233, %2129 ]
  %2541 = phi double [ %2424, %2327 ], [ %2226, %2129 ]
  %2542 = phi double [ %2417, %2327 ], [ %2219, %2129 ]
  %2543 = phi double [ %2409, %2327 ], [ %2211, %2129 ]
  %2544 = phi double [ %2524, %2327 ], [ %2326, %2129 ]
  %2545 = phi double [ %2521, %2327 ], [ %2323, %2129 ]
  %2546 = phi double [ %2519, %2327 ], [ %2321, %2129 ]
  %2547 = phi double [ %2517, %2327 ], [ %2319, %2129 ]
  %2548 = phi double [ %2514, %2327 ], [ %2316, %2129 ]
  %2549 = phi double [ %2506, %2327 ], [ %2308, %2129 ]
  %2550 = phi double [ %2501, %2327 ], [ %2303, %2129 ]
  %2551 = phi double [ %2494, %2327 ], [ %2296, %2129 ]
  %2552 = phi double [ %2487, %2327 ], [ %2289, %2129 ]
  %2553 = phi double [ %2479, %2327 ], [ %2281, %2129 ]
  %2554 = phi i32 [ %378, %2327 ], [ %322, %2129 ]
  %2555 = phi i32 [ %374, %2327 ], [ %318, %2129 ]
  %2556 = phi double [ %372, %2327 ], [ %316, %2129 ]
  %2557 = phi double [ %361, %2327 ], [ %305, %2129 ]
  %2558 = phi <2 x i32> [ %383, %2327 ], [ %328, %2129 ]
  %2559 = fmul contract double %36, %2553
  %2560 = fadd contract double %474, %2559
  %2561 = fmul contract double %36, %2552
  %2562 = fadd contract double %475, %2561
  %2563 = fmul contract double %36, %2551
  %2564 = fadd contract double %476, %2563
  %2565 = fmul contract double %36, %2550
  %2566 = fadd contract double %477, %2565
  %2567 = fmul contract double %36, %2549
  %2568 = fadd contract double %478, %2567
  %2569 = fmul contract double %36, %2548
  %2570 = fadd contract double %479, %2569
  %2571 = fmul contract double %36, %2547
  %2572 = fadd contract double %480, %2571
  %2573 = fmul contract double %36, %2545
  %2574 = fadd contract double %481, %2573
  %2575 = fmul contract double %36, %2546
  %2576 = fadd contract double %482, %2575
  %2577 = bitcast <2 x i32> %2558 to double
  %2578 = fmul contract double %1306, %2577
  %2579 = icmp eq i32 %2555, 0
  %2580 = select i1 %2579, double %2556, double %2557
  %2581 = bitcast double %2580 to <2 x i32>
  %2582 = xor i32 %2554, %385
  %2583 = and i32 %2582, -2147483648
  %2584 = extractelement <2 x i32> %2581, i64 1
  %2585 = xor i32 %2584, %2583
  %2586 = insertelement <2 x i32> %2581, i32 %2585, i64 1
  %2587 = select i1 %327, <2 x i32> %2586, <2 x i32> <i32 0, i32 2146959360>
  %2588 = bitcast <2 x i32> %2587 to double
  %2589 = fmul contract double %2125, %2588
  %2590 = fsub contract double %2578, %2589
  %2591 = fneg contract double %2590
  %2592 = fmul contract double %2566, %2591
  %2593 = fmul contract double %2562, %4
  %2594 = fsub contract double %2592, %2593
  %2595 = fmul contract double %2560, %6
  %2596 = fsub contract double %2594, %2595
  %2597 = fsub contract double %2572, %2574
  %2598 = fmul contract double %2544, %2597
  %2599 = fmul contract double %2564, %2590
  %2600 = fadd contract double %2598, %2599
  %2601 = fmul contract double %2560, %4
  %2602 = fadd contract double %2601, %2600
  %2603 = fmul contract double %2562, %6
  %2604 = fsub contract double %2602, %2603
  %2605 = fmul contract double %2544, %2570
  %2606 = fmul contract double %2562, %2590
  %2607 = fsub contract double %2605, %2606
  %2608 = fmul contract double %386, %2566
  %2609 = fsub contract double %2607, %2608
  %2610 = fmul contract double %2564, %7
  %2611 = fsub contract double %2609, %2610
  %2612 = fmul contract double %2560, %2590
  %2613 = fmul contract double %2544, %2568
  %2614 = fsub contract double %2612, %2613
  %2615 = fmul contract double %386, %2564
  %2616 = fadd contract double %2615, %2614
  %2617 = fmul contract double %2566, %7
  %2618 = fsub contract double %2616, %2617
  %2619 = fmul contract double %2544, %2566
  %2620 = fmul contract double %2570, %4
  %2621 = fsub contract double %2619, %2620
  %2622 = fmul contract double %2568, %8
  %2623 = fsub contract double %2621, %2622
  %2624 = fsub contract double %2574, %2576
  %2625 = fmul contract double %2590, %2624
  %2626 = fmul contract double %2544, %2564
  %2627 = fsub contract double %2625, %2626
  %2628 = fmul contract double %2568, %4
  %2629 = fadd contract double %2628, %2627
  %2630 = fmul contract double %2570, %8
  %2631 = fsub contract double %2629, %2630
  %2632 = fmul contract double %2544, 2.000000e+00
  %2633 = fmul contract double %2632, %2562
  %2634 = fmul contract double %41, %2574
  %2635 = fsub contract double %2634, %2633
  %2636 = fmul contract double %2590, 2.000000e+00
  %2637 = fmul contract double %2636, %2570
  %2638 = fsub contract double %2633, %2637
  %2639 = fsub contract double %2638, %2634
  %2640 = fadd contract double %2534, %2596
  %2641 = fadd contract double %2543, %2553
  %2642 = fmul contract double %2641, 2.000000e+00
  %2643 = fadd contract double %2640, %2642
  %2644 = fmul contract double %387, %2643
  %2645 = fadd contract double %474, %2644
  %2646 = fadd contract double %2533, %2604
  %2647 = fadd contract double %2542, %2552
  %2648 = fmul contract double %2647, 2.000000e+00
  %2649 = fadd contract double %2646, %2648
  %2650 = fmul contract double %387, %2649
  %2651 = fadd contract double %475, %2650
  %2652 = fadd contract double %2532, %2611
  %2653 = fadd contract double %2541, %2551
  %2654 = fmul contract double %2653, 2.000000e+00
  %2655 = fadd contract double %2652, %2654
  %2656 = fmul contract double %387, %2655
  %2657 = fadd contract double %476, %2656
  %2658 = fadd contract double %2531, %2618
  %2659 = fadd contract double %2540, %2550
  %2660 = fmul contract double %2659, 2.000000e+00
  %2661 = fadd contract double %2658, %2660
  %2662 = fmul contract double %387, %2661
  %2663 = fadd contract double %477, %2662
  %2664 = fadd contract double %2530, %2623
  %2665 = fadd contract double %2539, %2549
  %2666 = fmul contract double %2665, 2.000000e+00
  %2667 = fadd contract double %2664, %2666
  %2668 = fmul contract double %387, %2667
  %2669 = fadd contract double %478, %2668
  %2670 = fadd contract double %2529, %2631
  %2671 = fadd contract double %2538, %2548
  %2672 = fmul contract double %2671, 2.000000e+00
  %2673 = fadd contract double %2670, %2672
  %2674 = fmul contract double %387, %2673
  %2675 = fadd contract double %479, %2674
  %2676 = fadd contract double %2528, %2635
  %2677 = fadd contract double %2537, %2547
  %2678 = fmul contract double %2677, 2.000000e+00
  %2679 = fadd contract double %2676, %2678
  %2680 = fmul contract double %387, %2679
  %2681 = fadd contract double %480, %2680
  %2682 = fadd contract double %2526, %2639
  %2683 = fadd contract double %2535, %2545
  %2684 = fmul contract double %2683, 2.000000e+00
  %2685 = fadd contract double %2682, %2684
  %2686 = fmul contract double %387, %2685
  %2687 = fadd contract double %481, %2686
  %2688 = fadd contract double %2527, %2637
  %2689 = fadd contract double %2536, %2546
  %2690 = fmul contract double %2689, 2.000000e+00
  %2691 = fadd contract double %2688, %2690
  %2692 = fmul contract double %387, %2691
  %2693 = fadd contract double %482, %2692
  %2694 = add nuw nsw i32 %483, 1
  %2695 = icmp eq i32 %2694, %34
  br i1 %2695, label %470, label %473, !llvm.loop !11
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.round.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
