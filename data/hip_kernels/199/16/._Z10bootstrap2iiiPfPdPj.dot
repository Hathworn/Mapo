digraph "CFG for '_Z10bootstrap2iiiPfPdPj' function" {
	label="CFG for '_Z10bootstrap2iiiPfPdPj' function";

	Node0x4a454a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = sext i32 %0 to i64\l  %8 = sdiv i64 4294967295, %7\l  %9 = trunc i64 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %0\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 2, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %13, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %20 = add i32 %18, %19\l  %21 = mul i32 %20, %0\l  %22 = icmp sgt i32 %0, 0\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  br i1 %22, label %24, label %56\l|{<s0>T|<s1>F}}"];
	Node0x4a454a0:s0 -> Node0x4a48110;
	Node0x4a454a0:s1 -> Node0x4a481a0;
	Node0x4a48110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = and i32 %0, 3\l  %26 = icmp ult i32 %0, 4\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x4a48110:s0 -> Node0x4a48460;
	Node0x4a48110:s1 -> Node0x4a484b0;
	Node0x4a484b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %0, -4\l  br label %70\l}"];
	Node0x4a484b0 -> Node0x4a486b0;
	Node0x4a48460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %24 ], [ %124, %70 ]\l  %31 = phi float [ 0.000000e+00, %24 ], [ %124, %70 ]\l  %32 = phi i32 [ 0, %24 ], [ %125, %70 ]\l  %33 = icmp eq i32 %25, 0\l  br i1 %33, label %53, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4a48460:s0 -> Node0x4a472e0;
	Node0x4a48460:s1 -> Node0x4a49ae0;
	Node0x4a49ae0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi float [ %49, %34 ], [ %31, %29 ]\l  %36 = phi i32 [ %50, %34 ], [ %32, %29 ]\l  %37 = phi i32 [ %51, %34 ], [ 0, %29 ]\l  %38 = add nsw i32 %36, %11\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %42 = udiv i32 %41, %9\l  %43 = add i32 %42, %23\l  %44 = urem i32 %43, %0\l  %45 = add i32 %44, %21\l  %46 = zext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %3, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %49 = fadd contract float %35, %48\l  %50 = add nuw nsw i32 %36, 1\l  %51 = add i32 %37, 1\l  %52 = icmp eq i32 %51, %25\l  br i1 %52, label %53, label %34, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4a49ae0:s0 -> Node0x4a472e0;
	Node0x4a49ae0:s1 -> Node0x4a49ae0;
	Node0x4a472e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%53:\l53:                                               \l  %54 = phi float [ %30, %29 ], [ %49, %34 ]\l  %55 = fpext float %54 to double\l  br label %56\l}"];
	Node0x4a472e0 -> Node0x4a481a0;
	Node0x4a481a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%56:\l56:                                               \l  %57 = phi double [ %55, %53 ], [ 0.000000e+00, %6 ]\l  %58 = mul i32 %20, %2\l  %59 = sitofp i32 %1 to double\l  %60 = fdiv contract double %57, %59\l  %61 = add i32 %58, %23\l  %62 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %63 = bitcast i8 addrspace(4)* %62 to i16 addrspace(4)*\l  %64 = load i16, i16 addrspace(4)* %63, align 4, !range !4, !invariant.load !5\l  %65 = zext i16 %64 to i32\l  %66 = mul i32 %10, %65\l  %67 = add i32 %61, %66\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %4, i64 %68\l  store double %60, double addrspace(1)* %69, align 8, !tbaa !15\l  ret void\l}"];
	Node0x4a486b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%70:\l70:                                               \l  %71 = phi float [ 0.000000e+00, %27 ], [ %124, %70 ]\l  %72 = phi i32 [ 0, %27 ], [ %125, %70 ]\l  %73 = phi i32 [ 0, %27 ], [ %126, %70 ]\l  %74 = add nsw i32 %72, %11\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %75\l  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %78 = udiv i32 %77, %9\l  %79 = add i32 %78, %23\l  %80 = urem i32 %79, %0\l  %81 = add i32 %80, %21\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %3, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %85 = fadd contract float %71, %84\l  %86 = or i32 %72, 1\l  %87 = add nsw i32 %86, %11\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %88\l  %90 = load i32, i32 addrspace(1)* %89, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %91 = udiv i32 %90, %9\l  %92 = add i32 %91, %23\l  %93 = urem i32 %92, %0\l  %94 = add i32 %93, %21\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %3, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %98 = fadd contract float %85, %97\l  %99 = or i32 %72, 2\l  %100 = add nsw i32 %99, %11\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %101\l  %103 = load i32, i32 addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = udiv i32 %103, %9\l  %105 = add i32 %104, %23\l  %106 = urem i32 %105, %0\l  %107 = add i32 %106, %21\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %3, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %111 = fadd contract float %98, %110\l  %112 = or i32 %72, 3\l  %113 = add nsw i32 %112, %11\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %114\l  %116 = load i32, i32 addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = udiv i32 %116, %9\l  %118 = add i32 %117, %23\l  %119 = urem i32 %118, %0\l  %120 = add i32 %119, %21\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %3, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %124 = fadd contract float %111, %123\l  %125 = add nuw nsw i32 %72, 4\l  %126 = add i32 %73, 4\l  %127 = icmp eq i32 %126, %28\l  br i1 %127, label %29, label %70, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4a486b0:s0 -> Node0x4a48460;
	Node0x4a486b0:s1 -> Node0x4a486b0;
}
