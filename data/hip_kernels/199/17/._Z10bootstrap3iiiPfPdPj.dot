digraph "CFG for '_Z10bootstrap3iiiPfPdPj' function" {
	label="CFG for '_Z10bootstrap3iiiPfPdPj' function";

	Node0x509cb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = sext i32 %0 to i64\l  %8 = sdiv i64 4294967295, %7\l  %9 = trunc i64 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %12, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !5, !invariant.load !6\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %25 = add i32 %23, %24\l  %26 = mul i32 %25, %0\l  %27 = icmp sgt i32 %0, 0\l  %28 = add i32 %17, %10\l  br i1 %27, label %29, label %59\l|{<s0>T|<s1>F}}"];
	Node0x509cb90:s0 -> Node0x50a06f0;
	Node0x509cb90:s1 -> Node0x50a0780;
	Node0x50a06f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %28, %0\l  %31 = and i32 %0, 7\l  %32 = icmp ult i32 %0, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x50a06f0:s0 -> Node0x509ea60;
	Node0x50a06f0:s1 -> Node0x509eab0;
	Node0x509eab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %0, -8\l  br label %67\l}"];
	Node0x509eab0 -> Node0x50a0e20;
	Node0x509ea60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %29 ], [ %157, %67 ]\l  %37 = phi i32 [ 0, %29 ], [ %158, %67 ]\l  %38 = icmp eq i32 %31, 0\l  br i1 %38, label %56, label %39\l|{<s0>T|<s1>F}}"];
	Node0x509ea60:s0 -> Node0x50a1590;
	Node0x509ea60:s1 -> Node0x50a1620;
	Node0x50a1620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi float [ %52, %39 ], [ %36, %35 ]\l  %41 = phi i32 [ %53, %39 ], [ %37, %35 ]\l  %42 = phi i32 [ %54, %39 ], [ 0, %35 ]\l  %43 = add nsw i32 %41, %30\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %44\l  %46 = load i32, i32 addrspace(1)* %45, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %47 = udiv i32 %46, %9\l  %48 = add nsw i32 %47, %26\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %3, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %52 = fadd contract float %40, %51\l  %53 = add nuw nsw i32 %41, 1\l  %54 = add i32 %42, 1\l  %55 = icmp eq i32 %54, %31\l  br i1 %55, label %56, label %39, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x50a1620:s0 -> Node0x50a1590;
	Node0x50a1620:s1 -> Node0x50a1620;
	Node0x50a1590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%56:\l56:                                               \l  %57 = phi float [ %36, %35 ], [ %52, %39 ]\l  %58 = fpext float %57 to double\l  br label %59\l}"];
	Node0x50a1590 -> Node0x50a0780;
	Node0x50a0780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%59:\l59:                                               \l  %60 = phi double [ %58, %56 ], [ undef, %6 ]\l  %61 = mul i32 %25, %2\l  %62 = sitofp i32 %1 to double\l  %63 = fdiv contract double %60, %62\l  %64 = add i32 %28, %61\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds double, double addrspace(1)* %4, i64 %65\l  store double %63, double addrspace(1)* %66, align 8, !tbaa !15\l  ret void\l}"];
	Node0x50a0e20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%67:\l67:                                               \l  %68 = phi float [ undef, %33 ], [ %157, %67 ]\l  %69 = phi i32 [ 0, %33 ], [ %158, %67 ]\l  %70 = phi i32 [ 0, %33 ], [ %159, %67 ]\l  %71 = add nsw i32 %69, %30\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %72\l  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %75 = udiv i32 %74, %9\l  %76 = add nsw i32 %75, %26\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %3, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %80 = fadd contract float %68, %79\l  %81 = or i32 %69, 1\l  %82 = add nsw i32 %81, %30\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %83\l  %85 = load i32, i32 addrspace(1)* %84, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %86 = udiv i32 %85, %9\l  %87 = add nsw i32 %86, %26\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %3, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %91 = fadd contract float %80, %90\l  %92 = or i32 %69, 2\l  %93 = add nsw i32 %92, %30\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %94\l  %96 = load i32, i32 addrspace(1)* %95, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %97 = udiv i32 %96, %9\l  %98 = add nsw i32 %97, %26\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %3, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %102 = fadd contract float %91, %101\l  %103 = or i32 %69, 3\l  %104 = add nsw i32 %103, %30\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %105\l  %107 = load i32, i32 addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %108 = udiv i32 %107, %9\l  %109 = add nsw i32 %108, %26\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %3, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %113 = fadd contract float %102, %112\l  %114 = or i32 %69, 4\l  %115 = add nsw i32 %114, %30\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %116\l  %118 = load i32, i32 addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %119 = udiv i32 %118, %9\l  %120 = add nsw i32 %119, %26\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %3, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %124 = fadd contract float %113, %123\l  %125 = or i32 %69, 5\l  %126 = add nsw i32 %125, %30\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %127\l  %129 = load i32, i32 addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %130 = udiv i32 %129, %9\l  %131 = add nsw i32 %130, %26\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %3, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %135 = fadd contract float %124, %134\l  %136 = or i32 %69, 6\l  %137 = add nsw i32 %136, %30\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %138\l  %140 = load i32, i32 addrspace(1)* %139, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %141 = udiv i32 %140, %9\l  %142 = add nsw i32 %141, %26\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %3, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %146 = fadd contract float %135, %145\l  %147 = or i32 %69, 7\l  %148 = add nsw i32 %147, %30\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %149\l  %151 = load i32, i32 addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %152 = udiv i32 %151, %9\l  %153 = add nsw i32 %152, %26\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %3, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %157 = fadd contract float %146, %156\l  %158 = add nuw nsw i32 %69, 8\l  %159 = add i32 %70, 8\l  %160 = icmp eq i32 %159, %34\l  br i1 %160, label %35, label %67, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x50a0e20:s0 -> Node0x509ea60;
	Node0x50a0e20:s1 -> Node0x50a0e20;
}
