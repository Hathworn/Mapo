digraph "CFG for '_Z16PD_ZC_GPU_KERNELPfS_iii' function" {
	label="CFG for '_Z16PD_ZC_GPU_KERNELPfS_iii' function";

	Node0x4ca4d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 2, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = shl i32 %15, 10\l  %17 = add i32 %16, 1024\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %19 = or i32 %17, %18\l  %20 = add nsw i32 %2, -1\l  %21 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %22 = bitcast i8 addrspace(4)* %21 to i32 addrspace(4)*\l  %23 = load i32, i32 addrspace(4)* %22, align 4, !tbaa !7\l  %24 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 4, !range !4, !invariant.load !5\l  %27 = zext i16 %26 to i32\l  %28 = udiv i32 %23, %27\l  %29 = icmp sgt i32 %4, 0\l  br i1 %29, label %30, label %77\l|{<s0>T|<s1>F}}"];
	Node0x4ca4d40:s0 -> Node0x4ca8ba0;
	Node0x4ca4d40:s1 -> Node0x4ca8c30;
	Node0x4ca8ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%30:\l30:                                               \l  %31 = mul i32 %28, %27\l  %32 = icmp ugt i32 %23, %31\l  %33 = zext i1 %32 to i32\l  %34 = add i32 %28, %33\l  %35 = mul i32 %34, %14\l  %36 = mul i32 %14, %3\l  %37 = icmp slt i32 %19, %3\l  %38 = icmp ult i32 %18, %20\l  %39 = select i1 %37, i1 %38, i1 false\l  %40 = add nsw i32 %36, %19\l  %41 = add i32 %35, %15\l  %42 = mul i32 %41, %20\l  %43 = add i32 %42, %18\l  br i1 %39, label %49, label %44\l|{<s0>T|<s1>F}}"];
	Node0x4ca8ba0:s0 -> Node0x4ca9600;
	Node0x4ca8ba0:s1 -> Node0x4ca9650;
	Node0x4ca9650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%44:\l44:                                               \l  %45 = and i32 %4, 7\l  %46 = icmp ult i32 %4, 8\l  br i1 %46, label %71, label %47\l|{<s0>T|<s1>F}}"];
	Node0x4ca9650:s0 -> Node0x4ca9910;
	Node0x4ca9650:s1 -> Node0x4ca9960;
	Node0x4ca9960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%47:\l47:                                               \l  %48 = and i32 %4, -8\l  br label %78\l}"];
	Node0x4ca9960 -> Node0x4ca9b60;
	Node0x4ca9600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%49:\l49:                                               \l  %50 = and i32 %4, 7\l  %51 = icmp ult i32 %4, 8\l  br i1 %51, label %54, label %52\l|{<s0>T|<s1>F}}"];
	Node0x4ca9600:s0 -> Node0x4ca9d40;
	Node0x4ca9600:s1 -> Node0x4ca9d90;
	Node0x4ca9d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%52:\l52:                                               \l  %53 = and i32 %4, -8\l  br label %82\l}"];
	Node0x4ca9d90 -> Node0x4ca9f60;
	Node0x4ca9d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%54:\l54:                                               \l  %55 = phi i32 [ 0, %49 ], [ %156, %82 ]\l  %56 = icmp eq i32 %50, 0\l  br i1 %56, label %77, label %57\l|{<s0>T|<s1>F}}"];
	Node0x4ca9d40:s0 -> Node0x4ca8c30;
	Node0x4ca9d40:s1 -> Node0x4caa190;
	Node0x4caa190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%57:\l57:                                               \l  %58 = phi i32 [ %68, %57 ], [ %55, %54 ]\l  %59 = phi i32 [ %69, %57 ], [ 0, %54 ]\l  %60 = shl nsw i32 %58, 5\l  %61 = add nsw i32 %40, %60\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !16\l  %65 = add i32 %43, %60\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %66\l  store float %64, float addrspace(1)* %67, align 4, !tbaa !16\l  %68 = add nuw nsw i32 %58, 1\l  %69 = add i32 %59, 1\l  %70 = icmp eq i32 %69, %50\l  br i1 %70, label %77, label %57, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4caa190:s0 -> Node0x4ca8c30;
	Node0x4caa190:s1 -> Node0x4caa190;
	Node0x4ca9910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%71:\l71:                                               \l  %72 = icmp eq i32 %45, 0\l  br i1 %72, label %77, label %73\l|{<s0>T|<s1>F}}"];
	Node0x4ca9910:s0 -> Node0x4ca8c30;
	Node0x4ca9910:s1 -> Node0x4cab730;
	Node0x4cab730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi i32 [ %75, %73 ], [ 0, %71 ]\l  %75 = add i32 %74, 1\l  %76 = icmp eq i32 %75, %45\l  br i1 %76, label %77, label %73, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4cab730:s0 -> Node0x4ca8c30;
	Node0x4cab730:s1 -> Node0x4cab730;
	Node0x4ca8c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%77:\l77:                                               \l  ret void\l}"];
	Node0x4ca9b60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %47 ], [ %80, %78 ]\l  %80 = add i32 %79, 8\l  %81 = icmp eq i32 %80, %48\l  br i1 %81, label %71, label %78, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4ca9b60:s0 -> Node0x4ca9910;
	Node0x4ca9b60:s1 -> Node0x4ca9b60;
	Node0x4ca9f60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%82:\l82:                                               \l  %83 = phi i32 [ 0, %52 ], [ %156, %82 ]\l  %84 = phi i32 [ 0, %52 ], [ %157, %82 ]\l  %85 = shl nsw i32 %83, 5\l  %86 = add nsw i32 %40, %85\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %0, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16\l  %90 = add i32 %43, %85\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  store float %89, float addrspace(1)* %92, align 4, !tbaa !16\l  %93 = shl i32 %83, 5\l  %94 = or i32 %93, 32\l  %95 = add nsw i32 %40, %94\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16\l  %99 = add i32 %43, %94\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  store float %98, float addrspace(1)* %101, align 4, !tbaa !16\l  %102 = shl i32 %83, 5\l  %103 = or i32 %102, 64\l  %104 = add nsw i32 %40, %103\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = add i32 %43, %103\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %109\l  store float %107, float addrspace(1)* %110, align 4, !tbaa !16\l  %111 = shl i32 %83, 5\l  %112 = or i32 %111, 96\l  %113 = add nsw i32 %40, %112\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !16\l  %117 = add i32 %43, %112\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  store float %116, float addrspace(1)* %119, align 4, !tbaa !16\l  %120 = shl i32 %83, 5\l  %121 = or i32 %120, 128\l  %122 = add nsw i32 %40, %121\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16\l  %126 = add i32 %43, %121\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %1, i64 %127\l  store float %125, float addrspace(1)* %128, align 4, !tbaa !16\l  %129 = shl i32 %83, 5\l  %130 = or i32 %129, 160\l  %131 = add nsw i32 %40, %130\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = add i32 %43, %130\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  store float %134, float addrspace(1)* %137, align 4, !tbaa !16\l  %138 = shl i32 %83, 5\l  %139 = or i32 %138, 192\l  %140 = add nsw i32 %40, %139\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !16\l  %144 = add i32 %43, %139\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %1, i64 %145\l  store float %143, float addrspace(1)* %146, align 4, !tbaa !16\l  %147 = shl i32 %83, 5\l  %148 = or i32 %147, 224\l  %149 = add nsw i32 %40, %148\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !16\l  %153 = add i32 %43, %148\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %1, i64 %154\l  store float %152, float addrspace(1)* %155, align 4, !tbaa !16\l  %156 = add nuw nsw i32 %83, 8\l  %157 = add i32 %84, 8\l  %158 = icmp eq i32 %157, %53\l  br i1 %158, label %54, label %82, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x4ca9f60:s0 -> Node0x4ca9d40;
	Node0x4ca9f60:s1 -> Node0x4ca9f60;
}
