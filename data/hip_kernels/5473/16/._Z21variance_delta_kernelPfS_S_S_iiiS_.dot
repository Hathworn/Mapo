digraph "CFG for '_Z21variance_delta_kernelPfS_S_S_iiiS_' function" {
	label="CFG for '_Z21variance_delta_kernelPfS_S_S_iiiS_' function";

	Node0x4d3a4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !4\l  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !13, !invariant.load\l... !14\l  %18 = zext i16 %17 to i32\l  %19 = udiv i32 %14, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %14, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %9\l  %26 = mul i32 %25, %18\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = add i32 %26, %27\l  %29 = icmp slt i32 %28, %5\l  br i1 %29, label %30, label %328\l|{<s0>T|<s1>F}}"];
	Node0x4d3a4f0:s0 -> Node0x4d3cd60;
	Node0x4d3a4f0:s1 -> Node0x4d3cdf0;
	Node0x4d3cd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%30:\l30:                                               \l  %31 = sext i32 %28 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %7, i64 %31\l  store float 0.000000e+00, float addrspace(1)* %32, align 4, !tbaa !16\l  %33 = icmp sgt i32 %4, 0\l  br i1 %33, label %34, label %167\l|{<s0>T|<s1>F}}"];
	Node0x4d3cd60:s0 -> Node0x4d3ddb0;
	Node0x4d3cd60:s1 -> Node0x4d3de40;
	Node0x4d3ddb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%34:\l34:                                               \l  %35 = icmp sgt i32 %6, 0\l  %36 = getelementptr inbounds float, float addrspace(1)* %2, i64 %31\l  %37 = and i32 %6, 7\l  %38 = icmp ult i32 %6, 8\l  %39 = and i32 %6, -8\l  %40 = icmp eq i32 %37, 0\l  br label %41\l}"];
	Node0x4d3ddb0 -> Node0x4d3e380;
	Node0x4d3e380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%41:\l41:                                               \l  %42 = phi float [ 0.000000e+00, %34 ], [ %164, %163 ]\l  %43 = phi i32 [ 0, %34 ], [ %165, %163 ]\l  br i1 %35, label %44, label %163\l|{<s0>T|<s1>F}}"];
	Node0x4d3e380:s0 -> Node0x4d3e6d0;
	Node0x4d3e380:s1 -> Node0x4d3e470;
	Node0x4d3e6d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = mul nsw i32 %43, %5\l  %46 = add i32 %45, %28\l  %47 = mul i32 %46, %6\l  br i1 %38, label %142, label %48\l|{<s0>T|<s1>F}}"];
	Node0x4d3e6d0:s0 -> Node0x4d3e9c0;
	Node0x4d3e6d0:s1 -> Node0x4d3ea10;
	Node0x4d3ea10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%48:\l48:                                               \l  %49 = phi float [ %138, %48 ], [ %42, %44 ]\l  %50 = phi i32 [ %139, %48 ], [ 0, %44 ]\l  %51 = phi i32 [ %140, %48 ], [ 0, %44 ]\l  %52 = add nsw i32 %50, %47\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !16\l  %58 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %59 = fsub contract float %57, %58\l  %60 = fmul contract float %55, %59\l  %61 = fadd contract float %49, %60\l  store float %61, float addrspace(1)* %32, align 4, !tbaa !16\l  %62 = or i32 %50, 1\l  %63 = add nsw i32 %62, %47\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !16\l  %69 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %70 = fsub contract float %68, %69\l  %71 = fmul contract float %66, %70\l  %72 = fadd contract float %61, %71\l  store float %72, float addrspace(1)* %32, align 4, !tbaa !16\l  %73 = or i32 %50, 2\l  %74 = add nsw i32 %73, %47\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %1, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !16\l  %80 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %81 = fsub contract float %79, %80\l  %82 = fmul contract float %77, %81\l  %83 = fadd contract float %72, %82\l  store float %83, float addrspace(1)* %32, align 4, !tbaa !16\l  %84 = or i32 %50, 3\l  %85 = add nsw i32 %84, %47\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %92 = fsub contract float %90, %91\l  %93 = fmul contract float %88, %92\l  %94 = fadd contract float %83, %93\l  store float %94, float addrspace(1)* %32, align 4, !tbaa !16\l  %95 = or i32 %50, 4\l  %96 = add nsw i32 %95, %47\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !16\l  %102 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %103 = fsub contract float %101, %102\l  %104 = fmul contract float %99, %103\l  %105 = fadd contract float %94, %104\l  store float %105, float addrspace(1)* %32, align 4, !tbaa !16\l  %106 = or i32 %50, 5\l  %107 = add nsw i32 %106, %47\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %114 = fsub contract float %112, %113\l  %115 = fmul contract float %110, %114\l  %116 = fadd contract float %105, %115\l  store float %116, float addrspace(1)* %32, align 4, !tbaa !16\l  %117 = or i32 %50, 6\l  %118 = add nsw i32 %117, %47\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %1, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !16\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16\l  %124 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %125 = fsub contract float %123, %124\l  %126 = fmul contract float %121, %125\l  %127 = fadd contract float %116, %126\l  store float %127, float addrspace(1)* %32, align 4, !tbaa !16\l  %128 = or i32 %50, 7\l  %129 = add nsw i32 %128, %47\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %1, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !16\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %136 = fsub contract float %134, %135\l  %137 = fmul contract float %132, %136\l  %138 = fadd contract float %127, %137\l  store float %138, float addrspace(1)* %32, align 4, !tbaa !16\l  %139 = add nuw nsw i32 %50, 8\l  %140 = add i32 %51, 8\l  %141 = icmp eq i32 %140, %39\l  br i1 %141, label %142, label %48, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4d3ea10:s0 -> Node0x4d3e9c0;
	Node0x4d3ea10:s1 -> Node0x4d3ea10;
	Node0x4d3e9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%142:\l142:                                              \l  %143 = phi float [ undef, %44 ], [ %138, %48 ]\l  %144 = phi float [ %42, %44 ], [ %138, %48 ]\l  %145 = phi i32 [ 0, %44 ], [ %139, %48 ]\l  br i1 %40, label %163, label %146\l|{<s0>T|<s1>F}}"];
	Node0x4d3e9c0:s0 -> Node0x4d3e470;
	Node0x4d3e9c0:s1 -> Node0x4d43740;
	Node0x4d43740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%146:\l146:                                              \l  %147 = phi float [ %159, %146 ], [ %144, %142 ]\l  %148 = phi i32 [ %160, %146 ], [ %145, %142 ]\l  %149 = phi i32 [ %161, %146 ], [ 0, %142 ]\l  %150 = add nsw i32 %148, %47\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %1, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !16\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %151\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16\l  %156 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %157 = fsub contract float %155, %156\l  %158 = fmul contract float %153, %157\l  %159 = fadd contract float %147, %158\l  store float %159, float addrspace(1)* %32, align 4, !tbaa !16\l  %160 = add nuw nsw i32 %148, 1\l  %161 = add i32 %149, 1\l  %162 = icmp eq i32 %161, %37\l  br i1 %162, label %163, label %146, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4d43740:s0 -> Node0x4d3e470;
	Node0x4d43740:s1 -> Node0x4d43740;
	Node0x4d3e470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%163:\l163:                                              \l  %164 = phi float [ %42, %41 ], [ %143, %142 ], [ %159, %146 ]\l  %165 = add nuw nsw i32 %43, 1\l  %166 = icmp eq i32 %165, %4\l  br i1 %166, label %167, label %41, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4d3e470:s0 -> Node0x4d3de40;
	Node0x4d3e470:s1 -> Node0x4d3e380;
	Node0x4d3de40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%167:\l167:                                              \l  %168 = getelementptr inbounds float, float addrspace(1)* %3, i64 %31\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !16\l  %170 = fadd contract float %169, 0x3EE4F8B580000000\l  %171 = tail call float @llvm.fabs.f32(float %170)\l  %172 = tail call float @llvm.amdgcn.frexp.mant.f32(float %171)\l  %173 = fcmp olt float %172, 0x3FE5555560000000\l  %174 = zext i1 %173 to i32\l  %175 = tail call float @llvm.amdgcn.ldexp.f32(float %172, i32 %174)\l  %176 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %171)\l  %177 = sub nsw i32 %176, %174\l  %178 = fadd float %175, -1.000000e+00\l  %179 = fadd float %175, 1.000000e+00\l  %180 = fadd float %179, -1.000000e+00\l  %181 = fsub float %175, %180\l  %182 = tail call float @llvm.amdgcn.rcp.f32(float %179)\l  %183 = fmul float %178, %182\l  %184 = fmul float %179, %183\l  %185 = fneg float %184\l  %186 = tail call float @llvm.fma.f32(float %183, float %179, float %185)\l  %187 = tail call float @llvm.fma.f32(float %183, float %181, float %186)\l  %188 = fadd float %184, %187\l  %189 = fsub float %188, %184\l  %190 = fsub float %187, %189\l  %191 = fsub float %178, %188\l  %192 = fsub float %178, %191\l  %193 = fsub float %192, %188\l  %194 = fsub float %193, %190\l  %195 = fadd float %191, %194\l  %196 = fmul float %182, %195\l  %197 = fadd float %183, %196\l  %198 = fsub float %197, %183\l  %199 = fsub float %196, %198\l  %200 = fmul float %197, %197\l  %201 = fneg float %200\l  %202 = tail call float @llvm.fma.f32(float %197, float %197, float %201)\l  %203 = fmul float %199, 2.000000e+00\l  %204 = tail call float @llvm.fma.f32(float %197, float %203, float %202)\l  %205 = fadd float %200, %204\l  %206 = fsub float %205, %200\l  %207 = fsub float %204, %206\l  %208 = tail call float @llvm.fmuladd.f32(float %205, float\l... 0x3FCED89C20000000, float 0x3FD23E9880000000)\l  %209 = tail call float @llvm.fmuladd.f32(float %205, float %208, float\l... 0x3FD999BDE0000000)\l  %210 = sitofp i32 %177 to float\l  %211 = fmul float %210, 0x3FE62E4300000000\l  %212 = fneg float %211\l  %213 = tail call float @llvm.fma.f32(float %210, float 0x3FE62E4300000000,\l... float %212)\l  %214 = tail call float @llvm.fma.f32(float %210, float 0xBE205C6100000000,\l... float %213)\l  %215 = fadd float %211, %214\l  %216 = fsub float %215, %211\l  %217 = fsub float %214, %216\l  %218 = tail call float @llvm.amdgcn.ldexp.f32(float %197, i32 1)\l  %219 = fmul float %197, %205\l  %220 = fneg float %219\l  %221 = tail call float @llvm.fma.f32(float %205, float %197, float %220)\l  %222 = tail call float @llvm.fma.f32(float %205, float %199, float %221)\l  %223 = tail call float @llvm.fma.f32(float %207, float %197, float %222)\l  %224 = fadd float %219, %223\l  %225 = fsub float %224, %219\l  %226 = fsub float %223, %225\l  %227 = fmul float %205, %209\l  %228 = fneg float %227\l  %229 = tail call float @llvm.fma.f32(float %205, float %209, float %228)\l  %230 = tail call float @llvm.fma.f32(float %207, float %209, float %229)\l  %231 = fadd float %227, %230\l  %232 = fsub float %231, %227\l  %233 = fsub float %230, %232\l  %234 = fadd float %231, 0x3FE5555540000000\l  %235 = fadd float %234, 0xBFE5555540000000\l  %236 = fsub float %231, %235\l  %237 = fadd float %233, 0x3E2E720200000000\l  %238 = fadd float %237, %236\l  %239 = fadd float %234, %238\l  %240 = fsub float %239, %234\l  %241 = fsub float %238, %240\l  %242 = fmul float %224, %239\l  %243 = fneg float %242\l  %244 = tail call float @llvm.fma.f32(float %224, float %239, float %243)\l  %245 = tail call float @llvm.fma.f32(float %224, float %241, float %244)\l  %246 = tail call float @llvm.fma.f32(float %226, float %239, float %245)\l  %247 = tail call float @llvm.amdgcn.ldexp.f32(float %199, i32 1)\l  %248 = fadd float %242, %246\l  %249 = fsub float %248, %242\l  %250 = fsub float %246, %249\l  %251 = fadd float %218, %248\l  %252 = fsub float %251, %218\l  %253 = fsub float %248, %252\l  %254 = fadd float %247, %250\l  %255 = fadd float %254, %253\l  %256 = fadd float %251, %255\l  %257 = fsub float %256, %251\l  %258 = fsub float %255, %257\l  %259 = fadd float %215, %256\l  %260 = fsub float %259, %215\l  %261 = fsub float %259, %260\l  %262 = fsub float %215, %261\l  %263 = fsub float %256, %260\l  %264 = fadd float %263, %262\l  %265 = fadd float %217, %258\l  %266 = fsub float %265, %217\l  %267 = fsub float %265, %266\l  %268 = fsub float %217, %267\l  %269 = fsub float %258, %266\l  %270 = fadd float %269, %268\l  %271 = fadd float %265, %264\l  %272 = fadd float %259, %271\l  %273 = fsub float %272, %259\l  %274 = fsub float %271, %273\l  %275 = fadd float %270, %274\l  %276 = fadd float %272, %275\l  %277 = fsub float %276, %272\l  %278 = fsub float %275, %277\l  %279 = fmul float %276, -1.500000e+00\l  %280 = fneg float %279\l  %281 = tail call float @llvm.fma.f32(float %276, float -1.500000e+00, float\l... %280)\l  %282 = tail call float @llvm.fma.f32(float %278, float -1.500000e+00, float\l... %281)\l  %283 = fadd float %279, %282\l  %284 = fsub float %283, %279\l  %285 = fsub float %282, %284\l  %286 = tail call float @llvm.fabs.f32(float %279) #3\l  %287 = fcmp oeq float %286, 0x7FF0000000000000\l  %288 = select i1 %287, float %279, float %283\l  %289 = tail call float @llvm.fabs.f32(float %288) #3\l  %290 = fcmp oeq float %289, 0x7FF0000000000000\l  %291 = select i1 %290, float 0.000000e+00, float %285\l  %292 = fcmp oeq float %288, 0x40562E4300000000\l  %293 = select i1 %292, float 0x3EE0000000000000, float 0.000000e+00\l  %294 = fsub float %288, %293\l  %295 = fadd float %293, %291\l  %296 = fmul float %294, 0x3FF7154760000000\l  %297 = tail call float @llvm.rint.f32(float %296)\l  %298 = fcmp ogt float %294, 0x40562E4300000000\l  %299 = fcmp olt float %294, 0xC059D1DA00000000\l  %300 = fneg float %296\l  %301 = tail call float @llvm.fma.f32(float %294, float 0x3FF7154760000000,\l... float %300)\l  %302 = tail call float @llvm.fma.f32(float %294, float 0x3E54AE0BE0000000,\l... float %301)\l  %303 = fsub float %296, %297\l  %304 = fadd float %302, %303\l  %305 = tail call float @llvm.exp2.f32(float %304)\l  %306 = fptosi float %297 to i32\l  %307 = tail call float @llvm.amdgcn.ldexp.f32(float %305, i32 %306)\l  %308 = select i1 %299, float 0.000000e+00, float %307\l  %309 = select i1 %298, float 0x7FF0000000000000, float %308\l  %310 = tail call float @llvm.fma.f32(float %309, float %295, float %309)\l  %311 = tail call float @llvm.fabs.f32(float %309) #3\l  %312 = fcmp oeq float %311, 0x7FF0000000000000\l  %313 = select i1 %312, float %309, float %310\l  %314 = fcmp uge float %170, 0.000000e+00\l  %315 = tail call float @llvm.fabs.f32(float %313)\l  %316 = fcmp oeq float %171, 0x7FF0000000000000\l  %317 = fcmp oeq float %170, 0.000000e+00\l  %318 = fcmp uno float %170, 0.000000e+00\l  %319 = fcmp oeq float %170, 1.000000e+00\l  %320 = fmul contract float %315, -5.000000e-01\l  %321 = select i1 %314, float %320, float 0x7FF8000000000000\l  %322 = select i1 %316, float -0.000000e+00, float %321\l  %323 = select i1 %317, float 0xFFF0000000000000, float %322\l  %324 = select i1 %318, float 0x7FF8000000000000, float %323\l  %325 = select i1 %319, float -5.000000e-01, float %324\l  %326 = load float, float addrspace(1)* %32, align 4, !tbaa !16\l  %327 = fmul contract float %326, %325\l  store float %327, float addrspace(1)* %32, align 4, !tbaa !16\l  br label %328\l}"];
	Node0x4d3de40 -> Node0x4d3cdf0;
	Node0x4d3cdf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%328:\l328:                                              \l  ret void\l}"];
}
