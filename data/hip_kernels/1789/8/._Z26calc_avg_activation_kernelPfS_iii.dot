digraph "CFG for '_Z26calc_avg_activation_kernelPfS_iii' function" {
	label="CFG for '_Z26calc_avg_activation_kernelPfS_iii' function";

	Node0x5072400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = freeze i32 %14\l  %16 = freeze i32 %2\l  %17 = sdiv i32 %15, %16\l  %18 = mul i32 %17, %16\l  %19 = sub i32 %15, %18\l  %20 = mul nsw i32 %4, %2\l  %21 = icmp slt i32 %14, %20\l  br i1 %21, label %22, label %125\l|{<s0>T|<s1>F}}"];
	Node0x5072400:s0 -> Node0x50746a0;
	Node0x5072400:s1 -> Node0x5074730;
	Node0x50746a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%22:\l22:                                               \l  %23 = sext i32 %14 to i64\l  %24 = getelementptr inbounds float, float addrspace(1)* %1, i64 %23\l  store float 0.000000e+00, float addrspace(1)* %24, align 4, !tbaa !7\l  %25 = icmp sgt i32 %3, 0\l  br i1 %25, label %26, label %51\l|{<s0>T|<s1>F}}"];
	Node0x50746a0:s0 -> Node0x50755f0;
	Node0x50746a0:s1 -> Node0x5075680;
	Node0x50755f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %17, %3\l  %28 = and i32 %3, 7\l  %29 = icmp ult i32 %3, 8\l  br i1 %29, label %32, label %30\l|{<s0>T|<s1>F}}"];
	Node0x50755f0:s0 -> Node0x50759d0;
	Node0x50755f0:s1 -> Node0x5075a20;
	Node0x5075a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%30:\l30:                                               \l  %31 = and i32 %3, -8\l  br label %55\l}"];
	Node0x5075a20 -> Node0x5075c20;
	Node0x50759d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%32:\l32:                                               \l  %33 = phi float [ undef, %26 ], [ %121, %55 ]\l  %34 = phi float [ 0.000000e+00, %26 ], [ %121, %55 ]\l  %35 = phi i32 [ 0, %26 ], [ %122, %55 ]\l  %36 = icmp eq i32 %28, 0\l  br i1 %36, label %51, label %37\l|{<s0>T|<s1>F}}"];
	Node0x50759d0:s0 -> Node0x5075680;
	Node0x50759d0:s1 -> Node0x5076560;
	Node0x5076560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi float [ %47, %37 ], [ %34, %32 ]\l  %39 = phi i32 [ %48, %37 ], [ %35, %32 ]\l  %40 = phi i32 [ %49, %37 ], [ 0, %32 ]\l  %41 = add nsw i32 %39, %27\l  %42 = mul nsw i32 %41, %2\l  %43 = add nsw i32 %42, %19\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7\l  %47 = fadd contract float %46, %38\l  store float %47, float addrspace(1)* %24, align 4, !tbaa !7\l  %48 = add nuw nsw i32 %39, 1\l  %49 = add i32 %40, 1\l  %50 = icmp eq i32 %49, %28\l  br i1 %50, label %51, label %37, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5076560:s0 -> Node0x5075680;
	Node0x5076560:s1 -> Node0x5076560;
	Node0x5075680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %22 ], [ %33, %32 ], [ %47, %37 ]\l  %53 = sitofp i32 %3 to float\l  %54 = fdiv contract float %52, %53\l  store float %54, float addrspace(1)* %24, align 4, !tbaa !7\l  br label %125\l}"];
	Node0x5075680 -> Node0x5074730;
	Node0x5075c20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%55:\l55:                                               \l  %56 = phi float [ 0.000000e+00, %30 ], [ %121, %55 ]\l  %57 = phi i32 [ 0, %30 ], [ %122, %55 ]\l  %58 = phi i32 [ 0, %30 ], [ %123, %55 ]\l  %59 = add nsw i32 %57, %27\l  %60 = mul nsw i32 %59, %2\l  %61 = add nsw i32 %60, %19\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7\l  %65 = fadd contract float %64, %56\l  store float %65, float addrspace(1)* %24, align 4, !tbaa !7\l  %66 = or i32 %57, 1\l  %67 = add nsw i32 %66, %27\l  %68 = mul nsw i32 %67, %2\l  %69 = add nsw i32 %68, %19\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7\l  %73 = fadd contract float %72, %65\l  store float %73, float addrspace(1)* %24, align 4, !tbaa !7\l  %74 = or i32 %57, 2\l  %75 = add nsw i32 %74, %27\l  %76 = mul nsw i32 %75, %2\l  %77 = add nsw i32 %76, %19\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = fadd contract float %80, %73\l  store float %81, float addrspace(1)* %24, align 4, !tbaa !7\l  %82 = or i32 %57, 3\l  %83 = add nsw i32 %82, %27\l  %84 = mul nsw i32 %83, %2\l  %85 = add nsw i32 %84, %19\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = fadd contract float %88, %81\l  store float %89, float addrspace(1)* %24, align 4, !tbaa !7\l  %90 = or i32 %57, 4\l  %91 = add nsw i32 %90, %27\l  %92 = mul nsw i32 %91, %2\l  %93 = add nsw i32 %92, %19\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7\l  %97 = fadd contract float %96, %89\l  store float %97, float addrspace(1)* %24, align 4, !tbaa !7\l  %98 = or i32 %57, 5\l  %99 = add nsw i32 %98, %27\l  %100 = mul nsw i32 %99, %2\l  %101 = add nsw i32 %100, %19\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7\l  %105 = fadd contract float %104, %97\l  store float %105, float addrspace(1)* %24, align 4, !tbaa !7\l  %106 = or i32 %57, 6\l  %107 = add nsw i32 %106, %27\l  %108 = mul nsw i32 %107, %2\l  %109 = add nsw i32 %108, %19\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7\l  %113 = fadd contract float %112, %105\l  store float %113, float addrspace(1)* %24, align 4, !tbaa !7\l  %114 = or i32 %57, 7\l  %115 = add nsw i32 %114, %27\l  %116 = mul nsw i32 %115, %2\l  %117 = add nsw i32 %116, %19\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7\l  %121 = fadd contract float %120, %113\l  store float %121, float addrspace(1)* %24, align 4, !tbaa !7\l  %122 = add nuw nsw i32 %57, 8\l  %123 = add i32 %58, 8\l  %124 = icmp eq i32 %123, %31\l  br i1 %124, label %32, label %55, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5075c20:s0 -> Node0x50759d0;
	Node0x5075c20:s1 -> Node0x5075c20;
	Node0x5074730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%125:\l125:                                              \l  ret void\l}"];
}
