digraph "CFG for '_Z10dot_kernelPffiiiS_' function" {
	label="CFG for '_Z10dot_kernelPffiiiS_' function";

	Node0x55324b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !4\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !13, !invariant.load\l... !14\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %8\l  %23 = add i32 %22, %7\l  %24 = mul i32 %23, %16\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %25\l  %27 = freeze i32 %26\l  %28 = freeze i32 %3\l  %29 = sdiv i32 %27, %28\l  %30 = mul i32 %29, %28\l  %31 = sub i32 %27, %30\l  %32 = icmp sgt i32 %31, %29\l  br i1 %32, label %33, label %310\l|{<s0>T|<s1>F}}"];
	Node0x55324b0:s0 -> Node0x55343a0;
	Node0x55324b0:s1 -> Node0x5534430;
	Node0x55343a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%33:\l33:                                               \l  %34 = icmp sgt i32 %2, 0\l  br i1 %34, label %35, label %225\l|{<s0>T|<s1>F}}"];
	Node0x55343a0:s0 -> Node0x55352e0;
	Node0x55343a0:s1 -> Node0x5535330;
	Node0x55352e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%35:\l35:                                               \l  %36 = icmp sgt i32 %4, 0\l  %37 = mul i32 %4, %3\l  %38 = mul nsw i32 %29, %4\l  %39 = mul nsw i32 %31, %4\l  %40 = and i32 %4, 7\l  %41 = icmp ult i32 %4, 8\l  %42 = and i32 %4, -8\l  %43 = icmp eq i32 %40, 0\l  br label %44\l}"];
	Node0x55352e0 -> Node0x5535950;
	Node0x5535950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%44:\l44:                                               \l  %45 = phi float [ 0.000000e+00, %35 ], [ %222, %219 ]\l  %46 = phi float [ 0.000000e+00, %35 ], [ %221, %219 ]\l  %47 = phi float [ 0.000000e+00, %35 ], [ %220, %219 ]\l  %48 = phi i32 [ 0, %35 ], [ %223, %219 ]\l  br i1 %36, label %49, label %219\l|{<s0>T|<s1>F}}"];
	Node0x5535950:s0 -> Node0x5536930;
	Node0x5535950:s1 -> Node0x5536490;
	Node0x5536930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%49:\l49:                                               \l  %50 = mul i32 %37, %48\l  br i1 %41, label %187, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5536930:s0 -> Node0x5536b00;
	Node0x5536930:s1 -> Node0x5536b50;
	Node0x5536b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%51:\l51:                                               \l  %52 = phi float [ %179, %51 ], [ %45, %49 ]\l  %53 = phi float [ %181, %51 ], [ %46, %49 ]\l  %54 = phi float [ %183, %51 ], [ %47, %49 ]\l  %55 = phi i32 [ %184, %51 ], [ 0, %49 ]\l  %56 = phi i32 [ %185, %51 ], [ 0, %49 ]\l  %57 = add i32 %55, %50\l  %58 = add i32 %57, %38\l  %59 = add i32 %57, %39\l  %60 = sext i32 %58 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %63 = sext i32 %59 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %66 = fmul contract float %62, %65\l  %67 = fadd contract float %52, %66\l  %68 = fmul contract float %62, %62\l  %69 = fadd contract float %53, %68\l  %70 = fmul contract float %65, %65\l  %71 = fadd contract float %54, %70\l  %72 = or i32 %55, 1\l  %73 = add i32 %72, %50\l  %74 = add i32 %73, %38\l  %75 = add i32 %73, %39\l  %76 = sext i32 %74 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %79 = sext i32 %75 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %82 = fmul contract float %78, %81\l  %83 = fadd contract float %67, %82\l  %84 = fmul contract float %78, %78\l  %85 = fadd contract float %69, %84\l  %86 = fmul contract float %81, %81\l  %87 = fadd contract float %71, %86\l  %88 = or i32 %55, 2\l  %89 = add i32 %88, %50\l  %90 = add i32 %89, %38\l  %91 = add i32 %89, %39\l  %92 = sext i32 %90 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %0, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %95 = sext i32 %91 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %98 = fmul contract float %94, %97\l  %99 = fadd contract float %83, %98\l  %100 = fmul contract float %94, %94\l  %101 = fadd contract float %85, %100\l  %102 = fmul contract float %97, %97\l  %103 = fadd contract float %87, %102\l  %104 = or i32 %55, 3\l  %105 = add i32 %104, %50\l  %106 = add i32 %105, %38\l  %107 = add i32 %105, %39\l  %108 = sext i32 %106 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %111 = sext i32 %107 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %114 = fmul contract float %110, %113\l  %115 = fadd contract float %99, %114\l  %116 = fmul contract float %110, %110\l  %117 = fadd contract float %101, %116\l  %118 = fmul contract float %113, %113\l  %119 = fadd contract float %103, %118\l  %120 = or i32 %55, 4\l  %121 = add i32 %120, %50\l  %122 = add i32 %121, %38\l  %123 = add i32 %121, %39\l  %124 = sext i32 %122 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %127 = sext i32 %123 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %130 = fmul contract float %126, %129\l  %131 = fadd contract float %115, %130\l  %132 = fmul contract float %126, %126\l  %133 = fadd contract float %117, %132\l  %134 = fmul contract float %129, %129\l  %135 = fadd contract float %119, %134\l  %136 = or i32 %55, 5\l  %137 = add i32 %136, %50\l  %138 = add i32 %137, %38\l  %139 = add i32 %137, %39\l  %140 = sext i32 %138 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %143 = sext i32 %139 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %146 = fmul contract float %142, %145\l  %147 = fadd contract float %131, %146\l  %148 = fmul contract float %142, %142\l  %149 = fadd contract float %133, %148\l  %150 = fmul contract float %145, %145\l  %151 = fadd contract float %135, %150\l  %152 = or i32 %55, 6\l  %153 = add i32 %152, %50\l  %154 = add i32 %153, %38\l  %155 = add i32 %153, %39\l  %156 = sext i32 %154 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %159 = sext i32 %155 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %0, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %162 = fmul contract float %158, %161\l  %163 = fadd contract float %147, %162\l  %164 = fmul contract float %158, %158\l  %165 = fadd contract float %149, %164\l  %166 = fmul contract float %161, %161\l  %167 = fadd contract float %151, %166\l  %168 = or i32 %55, 7\l  %169 = add i32 %168, %50\l  %170 = add i32 %169, %38\l  %171 = add i32 %169, %39\l  %172 = sext i32 %170 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %0, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %175 = sext i32 %171 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %0, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %178 = fmul contract float %174, %177\l  %179 = fadd contract float %163, %178\l  %180 = fmul contract float %174, %174\l  %181 = fadd contract float %165, %180\l  %182 = fmul contract float %177, %177\l  %183 = fadd contract float %167, %182\l  %184 = add nuw nsw i32 %55, 8\l  %185 = add i32 %56, 8\l  %186 = icmp eq i32 %185, %42\l  br i1 %186, label %187, label %51, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5536b50:s0 -> Node0x5536b00;
	Node0x5536b50:s1 -> Node0x5536b50;
	Node0x5536b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%187:\l187:                                              \l  %188 = phi float [ undef, %49 ], [ %179, %51 ]\l  %189 = phi float [ undef, %49 ], [ %181, %51 ]\l  %190 = phi float [ undef, %49 ], [ %183, %51 ]\l  %191 = phi float [ %45, %49 ], [ %179, %51 ]\l  %192 = phi float [ %46, %49 ], [ %181, %51 ]\l  %193 = phi float [ %47, %49 ], [ %183, %51 ]\l  %194 = phi i32 [ 0, %49 ], [ %184, %51 ]\l  br i1 %43, label %219, label %195\l|{<s0>T|<s1>F}}"];
	Node0x5536b00:s0 -> Node0x5536490;
	Node0x5536b00:s1 -> Node0x553dac0;
	Node0x553dac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%195:\l195:                                              \l  %196 = phi float [ %211, %195 ], [ %191, %187 ]\l  %197 = phi float [ %213, %195 ], [ %192, %187 ]\l  %198 = phi float [ %215, %195 ], [ %193, %187 ]\l  %199 = phi i32 [ %216, %195 ], [ %194, %187 ]\l  %200 = phi i32 [ %217, %195 ], [ 0, %187 ]\l  %201 = add i32 %199, %50\l  %202 = add i32 %201, %38\l  %203 = add i32 %201, %39\l  %204 = sext i32 %202 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %207 = sext i32 %203 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %0, i64 %207\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %210 = fmul contract float %206, %209\l  %211 = fadd contract float %196, %210\l  %212 = fmul contract float %206, %206\l  %213 = fadd contract float %197, %212\l  %214 = fmul contract float %209, %209\l  %215 = fadd contract float %198, %214\l  %216 = add nuw nsw i32 %199, 1\l  %217 = add i32 %200, 1\l  %218 = icmp eq i32 %217, %40\l  br i1 %218, label %219, label %195, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x553dac0:s0 -> Node0x5536490;
	Node0x553dac0:s1 -> Node0x553dac0;
	Node0x5536490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%219:\l219:                                              \l  %220 = phi float [ %47, %44 ], [ %190, %187 ], [ %215, %195 ]\l  %221 = phi float [ %46, %44 ], [ %189, %187 ], [ %213, %195 ]\l  %222 = phi float [ %45, %44 ], [ %188, %187 ], [ %211, %195 ]\l  %223 = add nuw nsw i32 %48, 1\l  %224 = icmp eq i32 %223, %2\l  br i1 %224, label %225, label %44, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5536490:s0 -> Node0x5535330;
	Node0x5536490:s1 -> Node0x5535950;
	Node0x5535330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%225:\l225:                                              \l  %226 = phi float [ 0.000000e+00, %33 ], [ %220, %219 ]\l  %227 = phi float [ 0.000000e+00, %33 ], [ %221, %219 ]\l  %228 = phi float [ 0.000000e+00, %33 ], [ %222, %219 ]\l  %229 = fcmp olt float %227, 0x39F0000000000000\l  %230 = select i1 %229, float 0x41F0000000000000, float 1.000000e+00\l  %231 = fmul float %227, %230\l  %232 = tail call float @llvm.sqrt.f32(float %231)\l  %233 = bitcast float %232 to i32\l  %234 = add nsw i32 %233, -1\l  %235 = bitcast i32 %234 to float\l  %236 = add nsw i32 %233, 1\l  %237 = bitcast i32 %236 to float\l  %238 = tail call i1 @llvm.amdgcn.class.f32(float %231, i32 608)\l  %239 = select i1 %229, float 0x3EF0000000000000, float 1.000000e+00\l  %240 = fneg float %237\l  %241 = tail call float @llvm.fma.f32(float %240, float %232, float %231)\l  %242 = fcmp ogt float %241, 0.000000e+00\l  %243 = fneg float %235\l  %244 = tail call float @llvm.fma.f32(float %243, float %232, float %231)\l  %245 = fcmp ole float %244, 0.000000e+00\l  %246 = select i1 %245, float %235, float %232\l  %247 = select i1 %242, float %237, float %246\l  %248 = fmul float %239, %247\l  %249 = select i1 %238, float %231, float %248\l  %250 = fcmp olt float %226, 0x39F0000000000000\l  %251 = select i1 %250, float 0x41F0000000000000, float 1.000000e+00\l  %252 = fmul float %226, %251\l  %253 = tail call float @llvm.sqrt.f32(float %252)\l  %254 = bitcast float %253 to i32\l  %255 = add nsw i32 %254, -1\l  %256 = bitcast i32 %255 to float\l  %257 = add nsw i32 %254, 1\l  %258 = bitcast i32 %257 to float\l  %259 = tail call i1 @llvm.amdgcn.class.f32(float %252, i32 608)\l  %260 = select i1 %250, float 0x3EF0000000000000, float 1.000000e+00\l  %261 = fneg float %258\l  %262 = tail call float @llvm.fma.f32(float %261, float %253, float %252)\l  %263 = fcmp ogt float %262, 0.000000e+00\l  %264 = fneg float %256\l  %265 = tail call float @llvm.fma.f32(float %264, float %253, float %252)\l  %266 = fcmp ole float %265, 0.000000e+00\l  %267 = select i1 %266, float %256, float %253\l  %268 = select i1 %263, float %258, float %267\l  %269 = fmul float %260, %268\l  %270 = select i1 %259, float %252, float %269\l  %271 = fmul contract float %270, %249\l  br i1 %34, label %272, label %310\l|{<s0>T|<s1>F}}"];
	Node0x5535330:s0 -> Node0x55419d0;
	Node0x5535330:s1 -> Node0x5534430;
	Node0x55419d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%272:\l272:                                              \l  %273 = fdiv contract float %228, %271\l  %274 = icmp sgt i32 %4, 0\l  %275 = mul i32 %4, %3\l  %276 = mul nsw i32 %29, %4\l  %277 = mul nsw i32 %31, %4\l  %278 = fneg contract float %1\l  %279 = fmul contract float %273, %278\l  br label %280\l}"];
	Node0x55419d0 -> Node0x5541ea0;
	Node0x5541ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%280:\l280:                                              \l  %281 = phi i32 [ 0, %272 ], [ %308, %307 ]\l  br i1 %274, label %282, label %307\l|{<s0>T|<s1>F}}"];
	Node0x5541ea0:s0 -> Node0x55420a0;
	Node0x5541ea0:s1 -> Node0x5541f60;
	Node0x55420a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%282:\l282:                                              \l  %283 = mul i32 %275, %281\l  br label %284\l}"];
	Node0x55420a0 -> Node0x5542270;
	Node0x5542270 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%284:\l284:                                              \l  %285 = phi i32 [ 0, %282 ], [ %305, %284 ]\l  %286 = add i32 %285, %283\l  %287 = add i32 %286, %276\l  %288 = add i32 %286, %277\l  %289 = sext i32 %288 to i64\l  %290 = getelementptr inbounds float, float addrspace(1)* %0, i64 %289\l  %291 = load float, float addrspace(1)* %290, align 4, !tbaa !16\l  %292 = fmul contract float %279, %291\l  %293 = fdiv contract float %292, %271\l  %294 = sext i32 %287 to i64\l  %295 = getelementptr inbounds float, float addrspace(1)* %5, i64 %294\l  %296 = load float, float addrspace(1)* %295, align 4, !tbaa !16\l  %297 = fadd contract float %296, %293\l  store float %297, float addrspace(1)* %295, align 4, !tbaa !16\l  %298 = getelementptr inbounds float, float addrspace(1)* %0, i64 %294\l  %299 = load float, float addrspace(1)* %298, align 4, !tbaa !16\l  %300 = fmul contract float %279, %299\l  %301 = fdiv contract float %300, %271\l  %302 = getelementptr inbounds float, float addrspace(1)* %5, i64 %289\l  %303 = load float, float addrspace(1)* %302, align 4, !tbaa !16\l  %304 = fadd contract float %303, %301\l  store float %304, float addrspace(1)* %302, align 4, !tbaa !16\l  %305 = add nuw nsw i32 %285, 1\l  %306 = icmp eq i32 %305, %4\l  br i1 %306, label %307, label %284, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5542270:s0 -> Node0x5541f60;
	Node0x5542270:s1 -> Node0x5542270;
	Node0x5541f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%307:\l307:                                              \l  %308 = add nuw nsw i32 %281, 1\l  %309 = icmp eq i32 %308, %2\l  br i1 %309, label %310, label %280, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5541f60:s0 -> Node0x5534430;
	Node0x5541f60:s1 -> Node0x5541ea0;
	Node0x5534430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%310:\l310:                                              \l  ret void\l}"];
}
