digraph "CFG for '_Z12setup_kernelP12hiprandStatem' function" {
	label="CFG for '_Z12setup_kernelP12hiprandStatem' function";

	Node0x57009f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%2:\l  %3 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = mul i32 %9, %8\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = sext i32 %12 to i64\l  %14 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %14) #4\l  %15 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 0\l  %16 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 1\l  %17 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 2\l  %18 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 3\l  %19 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 4\l  %20 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 0\l  %21 = trunc i64 %1 to i32\l  %22 = xor i32 %21, 746559103\l  %23 = lshr i64 %1, 32\l  %24 = trunc i64 %23 to i32\l  %25 = xor i32 %24, -1607034933\l  %26 = mul i32 %22, 1228688033\l  %27 = mul i32 %25, 2073658381\l  %28 = add i32 %26, 123456789\l  store i32 %28, i32 addrspace(5)* %15, align 8, !tbaa !7\l  %29 = xor i32 %26, 362436069\l  store i32 %29, i32 addrspace(5)* %16, align 4, !tbaa !7\l  %30 = add i32 %27, 521288629\l  store i32 %30, i32 addrspace(5)* %17, align 8, !tbaa !7\l  %31 = xor i32 %27, 88675123\l  store i32 %31, i32 addrspace(5)* %18, align 4, !tbaa !7\l  %32 = add i32 %26, 5783321\l  store i32 %32, i32 addrspace(5)* %19, align 8, !tbaa !7\l  %33 = add i32 %26, 6615241\l  %34 = add i32 %33, %27\l  store i32 %34, i32 addrspace(5)* %20, align 8, !tbaa !11\l  %35 = icmp eq i32 %12, 0\l  br i1 %35, label %213, label %36\l|{<s0>T|<s1>F}}"];
	Node0x57009f0:s0 -> Node0x5707d20;
	Node0x57009f0:s1 -> Node0x5707db0;
	Node0x5707db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%36:\l36:                                               \l  %37 = phi i64 [ %46, %44 ], [ %13, %2 ]\l  %38 = phi i32 [ %45, %44 ], [ 0, %2 ]\l  %39 = trunc i64 %37 to i32\l  %40 = and i32 %39, 3\l  %41 = icmp eq i32 %40, 0\l  br i1 %41, label %44, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5707db0:s0 -> Node0x5707ef0;
	Node0x5707db0:s1 -> Node0x57082e0;
	Node0x57082e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%42:\l42:                                               \l  %43 = zext i32 %38 to i64\l  br label %48\l}"];
	Node0x57082e0 -> Node0x5708490;
	Node0x5707ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%44:\l44:                                               \l  %45 = add nuw nsw i32 %38, 1\l  %46 = lshr i64 %37, 2\l  %47 = icmp ult i64 %37, 4\l  br i1 %47, label %213, label %36, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5707ef0:s0 -> Node0x5707d20;
	Node0x5707ef0:s1 -> Node0x5707db0;
	Node0x5708490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %42 ], [ %211, %210 ]\l  br label %50\l}"];
	Node0x5708490 -> Node0x5708970;
	Node0x5708970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%50:\l50:                                               \l  %51 = phi i32 [ 0, %48 ], [ %183, %50 ]\l  %52 = phi i32 [ 0, %48 ], [ %189, %50 ]\l  %53 = phi i32 [ 0, %48 ], [ %195, %50 ]\l  %54 = phi i32 [ 0, %48 ], [ %201, %50 ]\l  %55 = phi i32 [ 0, %48 ], [ %207, %50 ]\l  %56 = phi i32 [ 0, %48 ], [ %208, %50 ]\l  %57 = lshr i32 %56, 5\l  %58 = and i32 %56, 28\l  %59 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %57\l  %60 = load i32, i32 addrspace(5)* %59, align 4, !tbaa !7\l  %61 = shl nuw i32 1, %58\l  %62 = and i32 %61, %60\l  %63 = icmp eq i32 %62, 0\l  %64 = mul nuw nsw i32 %56, 5\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %65\l  %67 = load i32, i32 addrspace(4)* %66, align 16, !tbaa !7\l  %68 = select i1 %63, i32 0, i32 %67\l  %69 = xor i32 %68, %51\l  %70 = or i32 %64, 1\l  %71 = zext i32 %70 to i64\l  %72 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %71\l  %73 = load i32, i32 addrspace(4)* %72, align 4, !tbaa !7\l  %74 = select i1 %63, i32 0, i32 %73\l  %75 = xor i32 %74, %52\l  %76 = or i32 %64, 2\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %77\l  %79 = load i32, i32 addrspace(4)* %78, align 8, !tbaa !7\l  %80 = select i1 %63, i32 0, i32 %79\l  %81 = xor i32 %80, %53\l  %82 = or i32 %64, 3\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %83\l  %85 = load i32, i32 addrspace(4)* %84, align 4, !tbaa !7\l  %86 = select i1 %63, i32 0, i32 %85\l  %87 = xor i32 %86, %54\l  %88 = add nuw nsw i32 %64, 4\l  %89 = zext i32 %88 to i64\l  %90 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %89\l  %91 = load i32, i32 addrspace(4)* %90, align 16, !tbaa !7\l  %92 = select i1 %63, i32 0, i32 %91\l  %93 = xor i32 %92, %55\l  %94 = or i32 %56, 1\l  %95 = lshr i32 %56, 5\l  %96 = and i32 %94, 29\l  %97 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %95\l  %98 = load i32, i32 addrspace(5)* %97, align 4, !tbaa !7\l  %99 = shl nuw i32 1, %96\l  %100 = and i32 %99, %98\l  %101 = icmp eq i32 %100, 0\l  %102 = mul nuw nsw i32 %94, 5\l  %103 = zext i32 %102 to i64\l  %104 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %103\l  %105 = load i32, i32 addrspace(4)* %104, align 4, !tbaa !7\l  %106 = select i1 %101, i32 0, i32 %105\l  %107 = xor i32 %106, %69\l  %108 = add nuw nsw i32 %102, 1\l  %109 = zext i32 %108 to i64\l  %110 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %109\l  %111 = load i32, i32 addrspace(4)* %110, align 8, !tbaa !7\l  %112 = select i1 %101, i32 0, i32 %111\l  %113 = xor i32 %112, %75\l  %114 = or i32 %102, 2\l  %115 = zext i32 %114 to i64\l  %116 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %115\l  %117 = load i32, i32 addrspace(4)* %116, align 4, !tbaa !7\l  %118 = select i1 %101, i32 0, i32 %117\l  %119 = xor i32 %118, %81\l  %120 = add nuw nsw i32 %102, 3\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %121\l  %123 = load i32, i32 addrspace(4)* %122, align 16, !tbaa !7\l  %124 = select i1 %101, i32 0, i32 %123\l  %125 = xor i32 %124, %87\l  %126 = add nuw nsw i32 %102, 4\l  %127 = zext i32 %126 to i64\l  %128 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %127\l  %129 = load i32, i32 addrspace(4)* %128, align 4, !tbaa !7\l  %130 = select i1 %101, i32 0, i32 %129\l  %131 = xor i32 %130, %93\l  %132 = or i32 %56, 2\l  %133 = lshr i32 %56, 5\l  %134 = and i32 %132, 30\l  %135 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %133\l  %136 = load i32, i32 addrspace(5)* %135, align 4, !tbaa !7\l  %137 = shl nuw i32 1, %134\l  %138 = and i32 %137, %136\l  %139 = icmp eq i32 %138, 0\l  %140 = mul nuw nsw i32 %132, 5\l  %141 = zext i32 %140 to i64\l  %142 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %141\l  %143 = load i32, i32 addrspace(4)* %142, align 8, !tbaa !7\l  %144 = select i1 %139, i32 0, i32 %143\l  %145 = xor i32 %144, %107\l  %146 = or i32 %140, 1\l  %147 = zext i32 %146 to i64\l  %148 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %147\l  %149 = load i32, i32 addrspace(4)* %148, align 4, !tbaa !7\l  %150 = select i1 %139, i32 0, i32 %149\l  %151 = xor i32 %150, %113\l  %152 = add nuw nsw i32 %140, 2\l  %153 = zext i32 %152 to i64\l  %154 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %153\l  %155 = load i32, i32 addrspace(4)* %154, align 16, !tbaa !7\l  %156 = select i1 %139, i32 0, i32 %155\l  %157 = xor i32 %156, %119\l  %158 = add nuw nsw i32 %140, 3\l  %159 = zext i32 %158 to i64\l  %160 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %159\l  %161 = load i32, i32 addrspace(4)* %160, align 4, !tbaa !7\l  %162 = select i1 %139, i32 0, i32 %161\l  %163 = xor i32 %162, %125\l  %164 = add nuw nsw i32 %140, 4\l  %165 = zext i32 %164 to i64\l  %166 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %165\l  %167 = load i32, i32 addrspace(4)* %166, align 8, !tbaa !7\l  %168 = select i1 %139, i32 0, i32 %167\l  %169 = xor i32 %168, %131\l  %170 = or i32 %56, 3\l  %171 = lshr i32 %56, 5\l  %172 = and i32 %170, 31\l  %173 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %171\l  %174 = load i32, i32 addrspace(5)* %173, align 4, !tbaa !7\l  %175 = shl nuw i32 1, %172\l  %176 = and i32 %175, %174\l  %177 = icmp eq i32 %176, 0\l  %178 = mul nuw nsw i32 %170, 5\l  %179 = zext i32 %178 to i64\l  %180 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %179\l  %181 = load i32, i32 addrspace(4)* %180, align 4, !tbaa !7\l  %182 = select i1 %177, i32 0, i32 %181\l  %183 = xor i32 %182, %145\l  %184 = add nuw nsw i32 %178, 1\l  %185 = zext i32 %184 to i64\l  %186 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %185\l  %187 = load i32, i32 addrspace(4)* %186, align 16, !tbaa !7\l  %188 = select i1 %177, i32 0, i32 %187\l  %189 = xor i32 %188, %151\l  %190 = add nuw nsw i32 %178, 2\l  %191 = zext i32 %190 to i64\l  %192 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %191\l  %193 = load i32, i32 addrspace(4)* %192, align 4, !tbaa !7\l  %194 = select i1 %177, i32 0, i32 %193\l  %195 = xor i32 %194, %157\l  %196 = add nuw nsw i32 %178, 3\l  %197 = zext i32 %196 to i64\l  %198 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %197\l  %199 = load i32, i32 addrspace(4)* %198, align 8, !tbaa !7\l  %200 = select i1 %177, i32 0, i32 %199\l  %201 = xor i32 %200, %163\l  %202 = add nuw nsw i32 %178, 4\l  %203 = zext i32 %202 to i64\l  %204 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %43, i64 %203\l  %205 = load i32, i32 addrspace(4)* %204, align 4, !tbaa !7\l  %206 = select i1 %177, i32 0, i32 %205\l  %207 = xor i32 %206, %169\l  %208 = add nuw nsw i32 %56, 4\l  %209 = icmp eq i32 %208, 160\l  br i1 %209, label %210, label %50, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5708970:s0 -> Node0x5708830;
	Node0x5708970:s1 -> Node0x5708970;
	Node0x5708830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%210:\l210:                                              \l  store i32 %183, i32 addrspace(5)* %15, align 8, !tbaa !7\l  store i32 %189, i32 addrspace(5)* %16, align 4, !tbaa !7\l  store i32 %195, i32 addrspace(5)* %17, align 8, !tbaa !7\l  store i32 %201, i32 addrspace(5)* %18, align 4, !tbaa !7\l  store i32 %207, i32 addrspace(5)* %19, align 8, !tbaa !7\l  %211 = add nuw nsw i32 %49, 1\l  %212 = icmp eq i32 %211, %40\l  br i1 %212, label %44, label %48, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x5708830:s0 -> Node0x5707ef0;
	Node0x5708830:s1 -> Node0x5708490;
	Node0x5707d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%213:\l213:                                              \l  %214 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %13\l  %215 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %215, align 4, !tbaa !20\l  %216 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %216, align 8, !tbaa !21\l  %217 = bitcast %struct.hiprandState addrspace(1)* %214 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %217, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %14, i64 48, i1 false), !tbaa.struct !22\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %14) #4\l  ret void\l}"];
}
