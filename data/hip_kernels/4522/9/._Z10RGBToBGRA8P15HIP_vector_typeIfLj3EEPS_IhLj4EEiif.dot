digraph "CFG for '_Z10RGBToBGRA8P15HIP_vector_typeIfLj3EEPS_IhLj4EEiif' function" {
	label="CFG for '_Z10RGBToBGRA8P15HIP_vector_typeIfLj3EEPS_IhLj4EEiif' function";

	Node0x48a29e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = add i32 %20, %21\l  %23 = icmp slt i32 %14, %2\l  %24 = icmp slt i32 %22, %3\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %49\l|{<s0>T|<s1>F}}"];
	Node0x48a29e0:s0 -> Node0x48a6400;
	Node0x48a29e0:s1 -> Node0x48a6490;
	Node0x48a6400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%26:\l26:                                               \l  %27 = mul nsw i32 %22, %2\l  %28 = add nsw i32 %27, %14\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %29, i32 0, i32 0, i32 0, i32\l... 0, i64 0\l  %31 = load float, float addrspace(1)* %30, align 4, !amdgpu.noclobber !5\l  %32 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %29, i32 0, i32 0, i32 0, i32\l... 0, i64 1\l  %33 = load float, float addrspace(1)* %32, align 4, !amdgpu.noclobber !5\l  %34 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %29, i32 0, i32 0, i32 0, i32\l... 0, i64 2\l  %35 = load float, float addrspace(1)* %34, align 4, !amdgpu.noclobber !5\l  %36 = fmul contract float %35, %4\l  %37 = fptoui float %36 to i8\l  %38 = fmul contract float %33, %4\l  %39 = fptoui float %38 to i8\l  %40 = fmul contract float %31, %4\l  %41 = fptoui float %40 to i8\l  %42 = fmul contract float %4, 2.550000e+02\l  %43 = fptoui float %42 to i8\l  %44 = insertelement \<4 x i8\> undef, i8 %37, i64 0\l  %45 = insertelement \<4 x i8\> %44, i8 %39, i64 1\l  %46 = insertelement \<4 x i8\> %45, i8 %41, i64 2\l  %47 = insertelement \<4 x i8\> %46, i8 %43, i64 3\l  %48 = getelementptr inbounds %struct.HIP_vector_type.0,\l... %struct.HIP_vector_type.0 addrspace(1)* %1, i64 %29, i32 0, i32 0, i32 0\l  store \<4 x i8\> %47, \<4 x i8\> addrspace(1)* %48, align 4\l  br label %49\l}"];
	Node0x48a6400 -> Node0x48a6490;
	Node0x48a6490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  ret void\l}"];
}
