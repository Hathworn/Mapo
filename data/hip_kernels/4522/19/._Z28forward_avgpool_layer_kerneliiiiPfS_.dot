digraph "CFG for '_Z28forward_avgpool_layer_kerneliiiiPfS_' function" {
	label="CFG for '_Z28forward_avgpool_layer_kerneliiiiPfS_' function";

	Node0x4a8f5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !4\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !13, !invariant.load\l... !14\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %8\l  %23 = add i32 %22, %7\l  %24 = mul i32 %23, %16\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %25\l  %27 = freeze i32 %26\l  %28 = icmp slt i32 %27, %0\l  br i1 %28, label %29, label %115\l|{<s0>T|<s1>F}}"];
	Node0x4a8f5f0:s0 -> Node0x4a91eb0;
	Node0x4a8f5f0:s1 -> Node0x4a91f40;
	Node0x4a91eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%29:\l29:                                               \l  %30 = sext i32 %27 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %5, i64 %30\l  store float 0.000000e+00, float addrspace(1)* %31, align 4, !tbaa !16\l  %32 = mul nsw i32 %2, %1\l  %33 = icmp sgt i32 %32, 0\l  br i1 %33, label %34, label %111\l|{<s0>T|<s1>F}}"];
	Node0x4a91eb0:s0 -> Node0x4a915b0;
	Node0x4a91eb0:s1 -> Node0x4a93050;
	Node0x4a915b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = mul nsw i32 %27, %32\l  %36 = and i32 %32, 7\l  %37 = icmp ult i32 %32, 8\l  br i1 %37, label %94, label %38\l|{<s0>T|<s1>F}}"];
	Node0x4a915b0:s0 -> Node0x4a93370;
	Node0x4a915b0:s1 -> Node0x4a933c0;
	Node0x4a933c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%38:\l38:                                               \l  %39 = and i32 %32, -8\l  br label %40\l}"];
	Node0x4a933c0 -> Node0x4a935c0;
	Node0x4a935c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %38 ], [ %90, %40 ]\l  %42 = phi i32 [ 0, %38 ], [ %91, %40 ]\l  %43 = phi i32 [ 0, %38 ], [ %92, %40 ]\l  %44 = add nsw i32 %42, %35\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %4, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !16\l  %48 = fadd contract float %47, %41\l  store float %48, float addrspace(1)* %31, align 4, !tbaa !16\l  %49 = or i32 %42, 1\l  %50 = add nsw i32 %49, %35\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %4, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !16\l  %54 = fadd contract float %53, %48\l  store float %54, float addrspace(1)* %31, align 4, !tbaa !16\l  %55 = or i32 %42, 2\l  %56 = add nsw i32 %55, %35\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16\l  %60 = fadd contract float %59, %54\l  store float %60, float addrspace(1)* %31, align 4, !tbaa !16\l  %61 = or i32 %42, 3\l  %62 = add nsw i32 %61, %35\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %4, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16\l  %66 = fadd contract float %65, %60\l  store float %66, float addrspace(1)* %31, align 4, !tbaa !16\l  %67 = or i32 %42, 4\l  %68 = add nsw i32 %67, %35\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %4, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !16\l  %72 = fadd contract float %71, %66\l  store float %72, float addrspace(1)* %31, align 4, !tbaa !16\l  %73 = or i32 %42, 5\l  %74 = add nsw i32 %73, %35\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %4, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !16\l  %78 = fadd contract float %77, %72\l  store float %78, float addrspace(1)* %31, align 4, !tbaa !16\l  %79 = or i32 %42, 6\l  %80 = add nsw i32 %79, %35\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %4, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16\l  %84 = fadd contract float %83, %78\l  store float %84, float addrspace(1)* %31, align 4, !tbaa !16\l  %85 = or i32 %42, 7\l  %86 = add nsw i32 %85, %35\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %4, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !16\l  %90 = fadd contract float %89, %84\l  store float %90, float addrspace(1)* %31, align 4, !tbaa !16\l  %91 = add nuw nsw i32 %42, 8\l  %92 = add i32 %43, 8\l  %93 = icmp eq i32 %92, %39\l  br i1 %93, label %94, label %40, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4a935c0:s0 -> Node0x4a93370;
	Node0x4a935c0:s1 -> Node0x4a935c0;
	Node0x4a93370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%94:\l94:                                               \l  %95 = phi float [ undef, %34 ], [ %90, %40 ]\l  %96 = phi float [ 0.000000e+00, %34 ], [ %90, %40 ]\l  %97 = phi i32 [ 0, %34 ], [ %91, %40 ]\l  %98 = icmp eq i32 %36, 0\l  br i1 %98, label %111, label %99\l|{<s0>T|<s1>F}}"];
	Node0x4a93370:s0 -> Node0x4a93050;
	Node0x4a93370:s1 -> Node0x4a969d0;
	Node0x4a969d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%99:\l99:                                               \l  %100 = phi float [ %107, %99 ], [ %96, %94 ]\l  %101 = phi i32 [ %108, %99 ], [ %97, %94 ]\l  %102 = phi i32 [ %109, %99 ], [ 0, %94 ]\l  %103 = add nsw i32 %101, %35\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %4, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !16\l  %107 = fadd contract float %106, %100\l  store float %107, float addrspace(1)* %31, align 4, !tbaa !16\l  %108 = add nuw nsw i32 %101, 1\l  %109 = add i32 %102, 1\l  %110 = icmp eq i32 %109, %36\l  br i1 %110, label %111, label %99, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4a969d0:s0 -> Node0x4a93050;
	Node0x4a969d0:s1 -> Node0x4a969d0;
	Node0x4a93050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%111:\l111:                                              \l  %112 = phi float [ 0.000000e+00, %29 ], [ %95, %94 ], [ %107, %99 ]\l  %113 = sitofp i32 %32 to float\l  %114 = fdiv contract float %112, %113\l  store float %114, float addrspace(1)* %31, align 4, !tbaa !16\l  br label %115\l}"];
	Node0x4a93050 -> Node0x4a91f40;
	Node0x4a91f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%115:\l115:                                              \l  ret void\l}"];
}
