digraph "CFG for '_Z14BackwardLinearPfS_iiiS_' function" {
	label="CFG for '_Z14BackwardLinearPfS_iiiS_' function";

	Node0x4abfe10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 2, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %23 = add i32 %21, %22\l  %24 = icmp slt i32 %15, %2\l  %25 = icmp slt i32 %23, %4\l  %26 = select i1 %24, i1 %25, i1 false\l  br i1 %26, label %27, label %174\l|{<s0>T|<s1>F}}"];
	Node0x4abfe10:s0 -> Node0x4ac3890;
	Node0x4abfe10:s1 -> Node0x4ac3920;
	Node0x4ac3890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%27:\l27:                                               \l  %28 = icmp sgt i32 %3, 0\l  br i1 %28, label %29, label %58\l|{<s0>T|<s1>F}}"];
	Node0x4ac3890:s0 -> Node0x4ac3b20;
	Node0x4ac3890:s1 -> Node0x4ac3b70;
	Node0x4ac3b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = and i32 %3, 7\l  %31 = icmp ult i32 %3, 8\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4ac3b20:s0 -> Node0x4ac3e30;
	Node0x4ac3b20:s1 -> Node0x4ac3e80;
	Node0x4ac3e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %3, -8\l  br label %64\l}"];
	Node0x4ac3e80 -> Node0x4ac1ef0;
	Node0x4ac3e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = phi float [ undef, %29 ], [ %170, %64 ]\l  %36 = phi i32 [ 0, %29 ], [ %171, %64 ]\l  %37 = phi float [ 0.000000e+00, %29 ], [ %170, %64 ]\l  %38 = icmp eq i32 %30, 0\l  br i1 %38, label %58, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4ac3e30:s0 -> Node0x4ac3b70;
	Node0x4ac3e30:s1 -> Node0x4ac53f0;
	Node0x4ac53f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %55, %39 ], [ %36, %34 ]\l  %41 = phi float [ %54, %39 ], [ %37, %34 ]\l  %42 = phi i32 [ %56, %39 ], [ 0, %34 ]\l  %43 = mul nsw i32 %40, %2\l  %44 = add nsw i32 %43, %15\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %48 = mul nsw i32 %40, %4\l  %49 = add nsw i32 %48, %23\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fmul contract float %47, %52\l  %54 = fadd contract float %41, %53\l  %55 = add nuw nsw i32 %40, 1\l  %56 = add i32 %42, 1\l  %57 = icmp eq i32 %56, %30\l  br i1 %57, label %58, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4ac53f0:s0 -> Node0x4ac3b70;
	Node0x4ac53f0:s1 -> Node0x4ac53f0;
	Node0x4ac3b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%58:\l58:                                               \l  %59 = phi float [ 0.000000e+00, %27 ], [ %35, %34 ], [ %54, %39 ]\l  %60 = mul nsw i32 %15, %4\l  %61 = add nsw i32 %60, %23\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %5, i64 %62\l  store float %59, float addrspace(1)* %63, align 4, !tbaa !7\l  br label %174\l}"];
	Node0x4ac3b70 -> Node0x4ac3920;
	Node0x4ac1ef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%64:\l64:                                               \l  %65 = phi i32 [ 0, %32 ], [ %171, %64 ]\l  %66 = phi float [ 0.000000e+00, %32 ], [ %170, %64 ]\l  %67 = phi i32 [ 0, %32 ], [ %172, %64 ]\l  %68 = mul nsw i32 %65, %2\l  %69 = add nsw i32 %68, %15\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = mul nsw i32 %65, %4\l  %74 = add nsw i32 %73, %23\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %78 = fmul contract float %72, %77\l  %79 = fadd contract float %66, %78\l  %80 = or i32 %65, 1\l  %81 = mul nsw i32 %80, %2\l  %82 = add nsw i32 %81, %15\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = mul nsw i32 %80, %4\l  %87 = add nsw i32 %86, %23\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %85, %90\l  %92 = fadd contract float %79, %91\l  %93 = or i32 %65, 2\l  %94 = mul nsw i32 %93, %2\l  %95 = add nsw i32 %94, %15\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = mul nsw i32 %93, %4\l  %100 = add nsw i32 %99, %23\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = fmul contract float %98, %103\l  %105 = fadd contract float %92, %104\l  %106 = or i32 %65, 3\l  %107 = mul nsw i32 %106, %2\l  %108 = add nsw i32 %107, %15\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %1, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = mul nsw i32 %106, %4\l  %113 = add nsw i32 %112, %23\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = fmul contract float %111, %116\l  %118 = fadd contract float %105, %117\l  %119 = or i32 %65, 4\l  %120 = mul nsw i32 %119, %2\l  %121 = add nsw i32 %120, %15\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = mul nsw i32 %119, %4\l  %126 = add nsw i32 %125, %23\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = fmul contract float %124, %129\l  %131 = fadd contract float %118, %130\l  %132 = or i32 %65, 5\l  %133 = mul nsw i32 %132, %2\l  %134 = add nsw i32 %133, %15\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = mul nsw i32 %132, %4\l  %139 = add nsw i32 %138, %23\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %0, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %143 = fmul contract float %137, %142\l  %144 = fadd contract float %131, %143\l  %145 = or i32 %65, 6\l  %146 = mul nsw i32 %145, %2\l  %147 = add nsw i32 %146, %15\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %151 = mul nsw i32 %145, %4\l  %152 = add nsw i32 %151, %23\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = fmul contract float %150, %155\l  %157 = fadd contract float %144, %156\l  %158 = or i32 %65, 7\l  %159 = mul nsw i32 %158, %2\l  %160 = add nsw i32 %159, %15\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %1, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %164 = mul nsw i32 %158, %4\l  %165 = add nsw i32 %164, %23\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %0, i64 %166\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %169 = fmul contract float %163, %168\l  %170 = fadd contract float %157, %169\l  %171 = add nuw nsw i32 %65, 8\l  %172 = add i32 %67, 8\l  %173 = icmp eq i32 %172, %33\l  br i1 %173, label %34, label %64, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4ac1ef0:s0 -> Node0x4ac3e30;
	Node0x4ac1ef0:s1 -> Node0x4ac1ef0;
	Node0x4ac3920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%174:\l174:                                              \l  ret void\l}"];
}
