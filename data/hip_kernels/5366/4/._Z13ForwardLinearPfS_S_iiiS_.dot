digraph "CFG for '_Z13ForwardLinearPfS_S_iiiS_' function" {
	label="CFG for '_Z13ForwardLinearPfS_S_iiiS_' function";

	Node0x5102e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 2, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %16, %3\l  %26 = icmp slt i32 %24, %5\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %171\l|{<s0>T|<s1>F}}"];
	Node0x5102e50:s0 -> Node0x51068a0;
	Node0x5102e50:s1 -> Node0x5106930;
	Node0x51068a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%28:\l28:                                               \l  %29 = icmp sgt i32 %4, 0\l  br i1 %29, label %30, label %59\l|{<s0>T|<s1>F}}"];
	Node0x51068a0:s0 -> Node0x5106b30;
	Node0x51068a0:s1 -> Node0x5106b80;
	Node0x5106b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %16, %4\l  %32 = and i32 %4, 7\l  %33 = icmp ult i32 %4, 8\l  br i1 %33, label %36, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5106b30:s0 -> Node0x5104d30;
	Node0x5106b30:s1 -> Node0x5107020;
	Node0x5107020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%34:\l34:                                               \l  %35 = and i32 %4, -8\l  br label %69\l}"];
	Node0x5107020 -> Node0x5107220;
	Node0x5104d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%36:\l36:                                               \l  %37 = phi float [ undef, %30 ], [ %167, %69 ]\l  %38 = phi i32 [ 0, %30 ], [ %168, %69 ]\l  %39 = phi float [ 0.000000e+00, %30 ], [ %167, %69 ]\l  %40 = icmp eq i32 %32, 0\l  br i1 %40, label %59, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5104d30:s0 -> Node0x5106b80;
	Node0x5104d30:s1 -> Node0x5108490;
	Node0x5108490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%41:\l41:                                               \l  %42 = phi i32 [ %56, %41 ], [ %38, %36 ]\l  %43 = phi float [ %55, %41 ], [ %39, %36 ]\l  %44 = phi i32 [ %57, %41 ], [ 0, %36 ]\l  %45 = add nsw i32 %42, %31\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %49 = mul nsw i32 %42, %5\l  %50 = add nsw i32 %49, %24\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = fmul contract float %48, %53\l  %55 = fadd contract float %43, %54\l  %56 = add nuw nsw i32 %42, 1\l  %57 = add i32 %44, 1\l  %58 = icmp eq i32 %57, %32\l  br i1 %58, label %59, label %41, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5108490:s0 -> Node0x5106b80;
	Node0x5108490:s1 -> Node0x5108490;
	Node0x5106b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%59:\l59:                                               \l  %60 = phi float [ 0.000000e+00, %28 ], [ %37, %36 ], [ %55, %41 ]\l  %61 = sext i32 %16 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %2, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = fadd contract float %60, %63\l  %65 = mul nsw i32 %16, %5\l  %66 = add nsw i32 %65, %24\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %6, i64 %67\l  store float %64, float addrspace(1)* %68, align 4, !tbaa !7\l  br label %171\l}"];
	Node0x5106b80 -> Node0x5106930;
	Node0x5107220 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%69:\l69:                                               \l  %70 = phi i32 [ 0, %34 ], [ %168, %69 ]\l  %71 = phi float [ 0.000000e+00, %34 ], [ %167, %69 ]\l  %72 = phi i32 [ 0, %34 ], [ %169, %69 ]\l  %73 = add nsw i32 %70, %31\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = mul nsw i32 %70, %5\l  %78 = add nsw i32 %77, %24\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = fmul contract float %76, %81\l  %83 = fadd contract float %71, %82\l  %84 = or i32 %70, 1\l  %85 = add nsw i32 %84, %31\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = mul nsw i32 %84, %5\l  %90 = add nsw i32 %89, %24\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %0, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %88, %93\l  %95 = fadd contract float %83, %94\l  %96 = or i32 %70, 2\l  %97 = add nsw i32 %96, %31\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = mul nsw i32 %96, %5\l  %102 = add nsw i32 %101, %24\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %100, %105\l  %107 = fadd contract float %95, %106\l  %108 = or i32 %70, 3\l  %109 = add nsw i32 %108, %31\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = mul nsw i32 %108, %5\l  %114 = add nsw i32 %113, %24\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fmul contract float %112, %117\l  %119 = fadd contract float %107, %118\l  %120 = or i32 %70, 4\l  %121 = add nsw i32 %120, %31\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = mul nsw i32 %120, %5\l  %126 = add nsw i32 %125, %24\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = fmul contract float %124, %129\l  %131 = fadd contract float %119, %130\l  %132 = or i32 %70, 5\l  %133 = add nsw i32 %132, %31\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %1, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %137 = mul nsw i32 %132, %5\l  %138 = add nsw i32 %137, %24\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %0, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = fmul contract float %136, %141\l  %143 = fadd contract float %131, %142\l  %144 = or i32 %70, 6\l  %145 = add nsw i32 %144, %31\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %1, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %149 = mul nsw i32 %144, %5\l  %150 = add nsw i32 %149, %24\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %0, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = fmul contract float %148, %153\l  %155 = fadd contract float %143, %154\l  %156 = or i32 %70, 7\l  %157 = add nsw i32 %156, %31\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %1, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %161 = mul nsw i32 %156, %5\l  %162 = add nsw i32 %161, %24\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %0, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %166 = fmul contract float %160, %165\l  %167 = fadd contract float %155, %166\l  %168 = add nuw nsw i32 %70, 8\l  %169 = add i32 %72, 8\l  %170 = icmp eq i32 %169, %35\l  br i1 %170, label %36, label %69, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5107220:s0 -> Node0x5104d30;
	Node0x5107220:s1 -> Node0x5107220;
	Node0x5106930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%171:\l171:                                              \l  ret void\l}"];
}
