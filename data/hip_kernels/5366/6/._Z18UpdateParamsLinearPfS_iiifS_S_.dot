digraph "CFG for '_Z18UpdateParamsLinearPfS_iiifS_S_' function" {
	label="CFG for '_Z18UpdateParamsLinearPfS_iiifS_S_' function";

	Node0x51eae30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 2, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp slt i32 %17, %2\l  %27 = icmp slt i32 %25, %4\l  %28 = select i1 %26, i1 %27, i1 false\l  br i1 %28, label %29, label %252\l|{<s0>T|<s1>F}}"];
	Node0x51eae30:s0 -> Node0x51ee8b0;
	Node0x51eae30:s1 -> Node0x51ee940;
	Node0x51ee8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%29:\l29:                                               \l  %30 = icmp sgt i32 %3, 0\l  br i1 %30, label %31, label %60\l|{<s0>T|<s1>F}}"];
	Node0x51ee8b0:s0 -> Node0x51eeb40;
	Node0x51ee8b0:s1 -> Node0x51eeb90;
	Node0x51eeb40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %17, %3\l  %33 = mul nsw i32 %25, %3\l  %34 = and i32 %3, 7\l  %35 = icmp ult i32 %3, 8\l  br i1 %35, label %38, label %36\l|{<s0>T|<s1>F}}"];
	Node0x51eeb40:s0 -> Node0x51ef090;
	Node0x51eeb40:s1 -> Node0x51ef0e0;
	Node0x51ef0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%36:\l36:                                               \l  %37 = and i32 %3, -8\l  br label %79\l}"];
	Node0x51ef0e0 -> Node0x51ef2e0;
	Node0x51ef090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%38:\l38:                                               \l  %39 = phi float [ undef, %31 ], [ %169, %79 ]\l  %40 = phi i32 [ 0, %31 ], [ %170, %79 ]\l  %41 = phi float [ 0.000000e+00, %31 ], [ %169, %79 ]\l  %42 = icmp eq i32 %34, 0\l  br i1 %42, label %60, label %43\l|{<s0>T|<s1>F}}"];
	Node0x51ef090:s0 -> Node0x51eeb90;
	Node0x51ef090:s1 -> Node0x51f0550;
	Node0x51f0550 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %57, %43 ], [ %40, %38 ]\l  %45 = phi float [ %56, %43 ], [ %41, %38 ]\l  %46 = phi i32 [ %58, %43 ], [ 0, %38 ]\l  %47 = add nsw i32 %44, %32\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = add nsw i32 %44, %33\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %1, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %55 = fmul contract float %50, %54\l  %56 = fadd contract float %45, %55\l  %57 = add nuw nsw i32 %44, 1\l  %58 = add i32 %46, 1\l  %59 = icmp eq i32 %58, %34\l  br i1 %59, label %60, label %43, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x51f0550:s0 -> Node0x51eeb90;
	Node0x51f0550:s1 -> Node0x51f0550;
	Node0x51eeb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %29 ], [ %39, %38 ], [ %56, %43 ]\l  %62 = mul nsw i32 %17, %4\l  %63 = add nsw i32 %62, %25\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %6, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %67 = fmul contract float %61, %5\l  %68 = sitofp i32 %3 to float\l  %69 = fdiv contract float %67, %68\l  %70 = fsub contract float %66, %69\l  store float %70, float addrspace(1)* %65, align 4, !tbaa !7\l  %71 = icmp eq i32 %25, 0\l  br i1 %71, label %72, label %252\l|{<s0>T|<s1>F}}"];
	Node0x51eeb90:s0 -> Node0x51f22c0;
	Node0x51eeb90:s1 -> Node0x51ee940;
	Node0x51f22c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%72:\l72:                                               \l  br i1 %30, label %73, label %190\l|{<s0>T|<s1>F}}"];
	Node0x51f22c0:s0 -> Node0x51f2400;
	Node0x51f22c0:s1 -> Node0x51f2450;
	Node0x51f2400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%73:\l73:                                               \l  %74 = mul nsw i32 %17, %3\l  %75 = and i32 %3, 7\l  %76 = icmp ult i32 %3, 8\l  br i1 %76, label %173, label %77\l|{<s0>T|<s1>F}}"];
	Node0x51f2400:s0 -> Node0x51f2740;
	Node0x51f2400:s1 -> Node0x51f2790;
	Node0x51f2790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%77:\l77:                                               \l  %78 = and i32 %3, -8\l  br label %198\l}"];
	Node0x51f2790 -> Node0x51f2960;
	Node0x51ef2e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%79:\l79:                                               \l  %80 = phi i32 [ 0, %36 ], [ %170, %79 ]\l  %81 = phi float [ 0.000000e+00, %36 ], [ %169, %79 ]\l  %82 = phi i32 [ 0, %36 ], [ %171, %79 ]\l  %83 = add nsw i32 %80, %32\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = add nsw i32 %80, %33\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %86, %90\l  %92 = fadd contract float %81, %91\l  %93 = or i32 %80, 1\l  %94 = add nsw i32 %93, %32\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = add nsw i32 %93, %33\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = fmul contract float %97, %101\l  %103 = fadd contract float %92, %102\l  %104 = or i32 %80, 2\l  %105 = add nsw i32 %104, %32\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = add nsw i32 %104, %33\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = fmul contract float %108, %112\l  %114 = fadd contract float %103, %113\l  %115 = or i32 %80, 3\l  %116 = add nsw i32 %115, %32\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = add nsw i32 %115, %33\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %1, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %124 = fmul contract float %119, %123\l  %125 = fadd contract float %114, %124\l  %126 = or i32 %80, 4\l  %127 = add nsw i32 %126, %32\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = add nsw i32 %126, %33\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = fmul contract float %130, %134\l  %136 = fadd contract float %125, %135\l  %137 = or i32 %80, 5\l  %138 = add nsw i32 %137, %32\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %0, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = add nsw i32 %137, %33\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %1, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = fmul contract float %141, %145\l  %147 = fadd contract float %136, %146\l  %148 = or i32 %80, 6\l  %149 = add nsw i32 %148, %32\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %153 = add nsw i32 %148, %33\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %1, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %157 = fmul contract float %152, %156\l  %158 = fadd contract float %147, %157\l  %159 = or i32 %80, 7\l  %160 = add nsw i32 %159, %32\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %0, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %164 = add nsw i32 %159, %33\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %1, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %168 = fmul contract float %163, %167\l  %169 = fadd contract float %158, %168\l  %170 = add nuw nsw i32 %80, 8\l  %171 = add i32 %82, 8\l  %172 = icmp eq i32 %171, %37\l  br i1 %172, label %38, label %79, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x51ef2e0:s0 -> Node0x51ef090;
	Node0x51ef2e0:s1 -> Node0x51ef2e0;
	Node0x51f2740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%173:\l173:                                              \l  %174 = phi float [ undef, %73 ], [ %248, %198 ]\l  %175 = phi i32 [ 0, %73 ], [ %249, %198 ]\l  %176 = phi float [ 0.000000e+00, %73 ], [ %248, %198 ]\l  %177 = icmp eq i32 %75, 0\l  br i1 %177, label %190, label %178\l|{<s0>T|<s1>F}}"];
	Node0x51f2740:s0 -> Node0x51f2450;
	Node0x51f2740:s1 -> Node0x51f6860;
	Node0x51f6860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%178:\l178:                                              \l  %179 = phi i32 [ %187, %178 ], [ %175, %173 ]\l  %180 = phi float [ %186, %178 ], [ %176, %173 ]\l  %181 = phi i32 [ %188, %178 ], [ 0, %173 ]\l  %182 = add nsw i32 %179, %74\l  %183 = sext i32 %182 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %0, i64 %183\l  %185 = load float, float addrspace(1)* %184, align 4, !tbaa !7\l  %186 = fadd contract float %180, %185\l  %187 = add nuw nsw i32 %179, 1\l  %188 = add i32 %181, 1\l  %189 = icmp eq i32 %188, %75\l  br i1 %189, label %190, label %178, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x51f6860:s0 -> Node0x51f2450;
	Node0x51f6860:s1 -> Node0x51f6860;
	Node0x51f2450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%190:\l190:                                              \l  %191 = phi float [ 0.000000e+00, %72 ], [ %174, %173 ], [ %186, %178 ]\l  %192 = sext i32 %17 to i64\l  %193 = getelementptr inbounds float, float addrspace(1)* %7, i64 %192\l  %194 = load float, float addrspace(1)* %193, align 4, !tbaa !7\l  %195 = fmul contract float %191, %5\l  %196 = fdiv contract float %195, %68\l  %197 = fsub contract float %194, %196\l  store float %197, float addrspace(1)* %193, align 4, !tbaa !7\l  br label %252\l}"];
	Node0x51f2450 -> Node0x51ee940;
	Node0x51f2960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%198:\l198:                                              \l  %199 = phi i32 [ 0, %77 ], [ %249, %198 ]\l  %200 = phi float [ 0.000000e+00, %77 ], [ %248, %198 ]\l  %201 = phi i32 [ 0, %77 ], [ %250, %198 ]\l  %202 = add nsw i32 %199, %74\l  %203 = sext i32 %202 to i64\l  %204 = getelementptr inbounds float, float addrspace(1)* %0, i64 %203\l  %205 = load float, float addrspace(1)* %204, align 4, !tbaa !7\l  %206 = fadd contract float %200, %205\l  %207 = or i32 %199, 1\l  %208 = add nsw i32 %207, %74\l  %209 = sext i32 %208 to i64\l  %210 = getelementptr inbounds float, float addrspace(1)* %0, i64 %209\l  %211 = load float, float addrspace(1)* %210, align 4, !tbaa !7\l  %212 = fadd contract float %206, %211\l  %213 = or i32 %199, 2\l  %214 = add nsw i32 %213, %74\l  %215 = sext i32 %214 to i64\l  %216 = getelementptr inbounds float, float addrspace(1)* %0, i64 %215\l  %217 = load float, float addrspace(1)* %216, align 4, !tbaa !7\l  %218 = fadd contract float %212, %217\l  %219 = or i32 %199, 3\l  %220 = add nsw i32 %219, %74\l  %221 = sext i32 %220 to i64\l  %222 = getelementptr inbounds float, float addrspace(1)* %0, i64 %221\l  %223 = load float, float addrspace(1)* %222, align 4, !tbaa !7\l  %224 = fadd contract float %218, %223\l  %225 = or i32 %199, 4\l  %226 = add nsw i32 %225, %74\l  %227 = sext i32 %226 to i64\l  %228 = getelementptr inbounds float, float addrspace(1)* %0, i64 %227\l  %229 = load float, float addrspace(1)* %228, align 4, !tbaa !7\l  %230 = fadd contract float %224, %229\l  %231 = or i32 %199, 5\l  %232 = add nsw i32 %231, %74\l  %233 = sext i32 %232 to i64\l  %234 = getelementptr inbounds float, float addrspace(1)* %0, i64 %233\l  %235 = load float, float addrspace(1)* %234, align 4, !tbaa !7\l  %236 = fadd contract float %230, %235\l  %237 = or i32 %199, 6\l  %238 = add nsw i32 %237, %74\l  %239 = sext i32 %238 to i64\l  %240 = getelementptr inbounds float, float addrspace(1)* %0, i64 %239\l  %241 = load float, float addrspace(1)* %240, align 4, !tbaa !7\l  %242 = fadd contract float %236, %241\l  %243 = or i32 %199, 7\l  %244 = add nsw i32 %243, %74\l  %245 = sext i32 %244 to i64\l  %246 = getelementptr inbounds float, float addrspace(1)* %0, i64 %245\l  %247 = load float, float addrspace(1)* %246, align 4, !tbaa !7\l  %248 = fadd contract float %242, %247\l  %249 = add nuw nsw i32 %199, 8\l  %250 = add i32 %201, 8\l  %251 = icmp eq i32 %250, %78\l  br i1 %251, label %173, label %198, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x51f2960:s0 -> Node0x51f2740;
	Node0x51f2960:s1 -> Node0x51f2960;
	Node0x51ee940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%252:\l252:                                              \l  ret void\l}"];
}
