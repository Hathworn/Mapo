digraph "CFG for '_Z5pcr_kPfS_S_S_i' function" {
	label="CFG for '_Z5pcr_kPfS_S_S_i' function";

	Node0x49a0880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = freeze i32 %6\l  %8 = freeze i32 %4\l  %9 = udiv i32 %7, %8\l  %10 = mul i32 %9, %8\l  %11 = sub i32 %7, %10\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = udiv i32 %17, %4\l  %19 = mul i32 %18, %12\l  %20 = add i32 %19, %9\l  %21 = mul i32 %4, 5\l  %22 = mul i32 %21, %9\l  %23 = freeze i32 %4\l  %24 = sdiv i32 %23, 2\l  %25 = mul i32 %24, 2\l  %26 = sub i32 %23, %25\l  %27 = add nsw i32 %24, %26\l  %28 = and i32 %11, 1\l  %29 = icmp eq i32 %28, 0\l  %30 = select i1 %29, i32 0, i32 %27\l  %31 = lshr i32 %11, 1\l  %32 = add nsw i32 %30, %31\l  %33 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @sAds,\l... i32 0, i32 %22\l  %34 = getelementptr inbounds float, float addrspace(3)* %33, i32 %4\l  %35 = getelementptr inbounds float, float addrspace(3)* %34, i32 %4\l  %36 = getelementptr inbounds float, float addrspace(3)* %35, i32 %4\l  %37 = getelementptr inbounds float, float addrspace(3)* %36, i32 %4\l  %38 = mul nsw i32 %20, %4\l  %39 = add nsw i32 %38, %11\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %43 = getelementptr inbounds float, float addrspace(3)* %33, i32 %11\l  store float %42, float addrspace(3)* %43, align 4, !tbaa !7\l  %44 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %46 = getelementptr inbounds float, float addrspace(3)* %34, i32 %11\l  store float %45, float addrspace(3)* %46, align 4, !tbaa !7\l  %47 = getelementptr inbounds float, float addrspace(1)* %2, i64 %40\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %49 = getelementptr inbounds float, float addrspace(3)* %35, i32 %11\l  store float %48, float addrspace(3)* %49, align 4, !tbaa !7\l  %50 = getelementptr inbounds float, float addrspace(1)* %3, i64 %40\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %52 = getelementptr inbounds float, float addrspace(3)* %36, i32 %11\l  store float %51, float addrspace(3)* %52, align 4, !tbaa !7\l  %53 = getelementptr inbounds float, float addrspace(3)* %37, i32 %11\l  %54 = bitcast float addrspace(3)* %53 to i32 addrspace(3)*\l  store i32 %11, i32 addrspace(3)* %54, align 4, !tbaa !11\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %55 = tail call i32 @llvm.smax.i32(i32 %11, i32 1)\l  %56 = add nsw i32 %55, -1\l  %57 = add nuw nsw i32 %11, 1\l  %58 = icmp slt i32 %57, %4\l  %59 = select i1 %58, i32 %57, i32 0\l  %60 = sitofp i32 %4 to float\l  %61 = tail call i1 @llvm.amdgcn.class.f32(float %60, i32 144)\l  %62 = select i1 %61, float 0x41F0000000000000, float 1.000000e+00\l  %63 = fmul float %62, %60\l  %64 = tail call float @llvm.log2.f32(float %63)\l  %65 = select i1 %61, float 3.200000e+01, float 0.000000e+00\l  %66 = fsub float %64, %65\l  %67 = fptosi float %66 to i32\l  %68 = icmp slt i32 %67, 0\l  br i1 %68, label %134, label %69\l|{<s0>T|<s1>F}}"];
	Node0x49a0880:s0 -> Node0x49a3370;
	Node0x49a0880:s1 -> Node0x49a6fe0;
	Node0x49a6fe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%69:\l69:                                               \l  %70 = getelementptr inbounds float, float addrspace(3)* %34, i32 %56\l  %71 = getelementptr inbounds float, float addrspace(3)* %33, i32 %56\l  %72 = getelementptr inbounds float, float addrspace(3)* %35, i32 %56\l  %73 = getelementptr inbounds float, float addrspace(3)* %36, i32 %56\l  %74 = getelementptr inbounds float, float addrspace(3)* %33, i32 %59\l  %75 = getelementptr inbounds float, float addrspace(3)* %34, i32 %59\l  %76 = getelementptr inbounds float, float addrspace(3)* %35, i32 %59\l  %77 = getelementptr inbounds float, float addrspace(3)* %36, i32 %59\l  %78 = getelementptr inbounds float, float addrspace(3)* %33, i32 %32\l  %79 = getelementptr inbounds float, float addrspace(3)* %34, i32 %32\l  %80 = getelementptr inbounds float, float addrspace(3)* %35, i32 %32\l  %81 = getelementptr inbounds float, float addrspace(3)* %36, i32 %32\l  %82 = getelementptr inbounds float, float addrspace(3)* %37, i32 %32\l  %83 = bitcast float addrspace(3)* %82 to i32 addrspace(3)*\l  br label %84\l}"];
	Node0x49a6fe0 -> Node0x49a79b0;
	Node0x49a79b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%84:\l84:                                               \l  %85 = phi i32 [ 0, %69 ], [ %130, %129 ]\l  %86 = load i32, i32 addrspace(3)* %54, align 4, !tbaa !11\l  %87 = load float, float addrspace(3)* %43, align 4, !tbaa !7\l  %88 = load float, float addrspace(3)* %46, align 4, !tbaa !7\l  %89 = load float, float addrspace(3)* %49, align 4, !tbaa !7\l  %90 = load float, float addrspace(3)* %52, align 4, !tbaa !7\l  %91 = tail call float @llvm.fabs.f32(float %87)\l  %92 = fcmp contract ogt float %91, 0x3E7AD7F2A0000000\l  br i1 %92, label %93, label %105\l|{<s0>T|<s1>F}}"];
	Node0x49a79b0:s0 -> Node0x49a8710;
	Node0x49a79b0:s1 -> Node0x49a87a0;
	Node0x49a8710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%93:\l93:                                               \l  %94 = load float, float addrspace(3)* %70, align 4, !tbaa !7\l  %95 = load float, float addrspace(3)* %71, align 4, !tbaa !7\l  %96 = load float, float addrspace(3)* %72, align 4, !tbaa !7\l  %97 = load float, float addrspace(3)* %73, align 4, !tbaa !7\l  %98 = fdiv contract float %87, %94\l  %99 = fmul contract float %98, %96\l  %100 = fsub contract float %88, %99\l  %101 = fmul contract float %98, %97\l  %102 = fsub contract float %90, %101\l  %103 = fneg contract float %95\l  %104 = fmul contract float %98, %103\l  br label %105\l}"];
	Node0x49a8710 -> Node0x49a87a0;
	Node0x49a87a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%105:\l105:                                              \l  %106 = phi float [ %102, %93 ], [ %90, %84 ]\l  %107 = phi float [ %100, %93 ], [ %88, %84 ]\l  %108 = phi float [ %104, %93 ], [ %87, %84 ]\l  %109 = load float, float addrspace(3)* %74, align 4, !tbaa !7\l  %110 = load float, float addrspace(3)* %75, align 4, !tbaa !7\l  %111 = fdiv contract float %89, %110\l  %112 = tail call float @llvm.fabs.f32(float %109)\l  %113 = fcmp contract ogt float %112, 0x3E7AD7F2A0000000\l  br i1 %113, label %114, label %123\l|{<s0>T|<s1>F}}"];
	Node0x49a87a0:s0 -> Node0x49a9440;
	Node0x49a87a0:s1 -> Node0x49a9490;
	Node0x49a9440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%114:\l114:                                              \l  %115 = load float, float addrspace(3)* %76, align 4, !tbaa !7\l  %116 = load float, float addrspace(3)* %77, align 4, !tbaa !7\l  %117 = fmul contract float %109, %111\l  %118 = fsub contract float %107, %117\l  %119 = fmul contract float %111, %116\l  %120 = fsub contract float %106, %119\l  %121 = fneg contract float %115\l  %122 = fmul contract float %111, %121\l  br label %123\l}"];
	Node0x49a9440 -> Node0x49a9490;
	Node0x49a9490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%123:\l123:                                              \l  %124 = phi float [ %120, %114 ], [ %106, %105 ]\l  %125 = phi float [ %122, %114 ], [ %89, %105 ]\l  %126 = phi float [ %118, %114 ], [ %107, %105 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %127 = icmp slt i32 %85, %67\l  br i1 %127, label %128, label %129\l|{<s0>T|<s1>F}}"];
	Node0x49a9490:s0 -> Node0x49a9e30;
	Node0x49a9490:s1 -> Node0x49a7aa0;
	Node0x49a9e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%128:\l128:                                              \l  store float %108, float addrspace(3)* %78, align 4, !tbaa !7\l  store float %126, float addrspace(3)* %79, align 4, !tbaa !7\l  store float %125, float addrspace(3)* %80, align 4, !tbaa !7\l  store float %124, float addrspace(3)* %81, align 4, !tbaa !7\l  store i32 %86, i32 addrspace(3)* %83, align 4, !tbaa !11\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  br label %129\l}"];
	Node0x49a9e30 -> Node0x49a7aa0;
	Node0x49a7aa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%129:\l129:                                              \l  %130 = add nuw i32 %85, 1\l  %131 = icmp eq i32 %85, %67\l  br i1 %131, label %132, label %84, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x49a7aa0:s0 -> Node0x49aa920;
	Node0x49a7aa0:s1 -> Node0x49a79b0;
	Node0x49aa920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%132:\l132:                                              \l  %133 = fdiv contract float %124, %126\l  br label %134\l}"];
	Node0x49aa920 -> Node0x49a3370;
	Node0x49a3370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%134:\l134:                                              \l  %135 = phi float [ %133, %132 ], [ undef, %5 ]\l  store float %135, float addrspace(3)* %52, align 4, !tbaa !7\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %136 = load float, float addrspace(3)* %52, align 4, !tbaa !7\l  %137 = load i32, i32 addrspace(3)* %54, align 4, !tbaa !11\l  %138 = add nsw i32 %137, %38\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %3, i64 %139\l  store float %136, float addrspace(1)* %140, align 4, !tbaa !7\l  ret void\l}"];
}
