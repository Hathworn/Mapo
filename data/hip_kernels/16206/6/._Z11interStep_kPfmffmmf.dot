digraph "CFG for '_Z11interStep_kPfmffmmf' function" {
	label="CFG for '_Z11interStep_kPfmffmmf' function";

	Node0x5a74ab0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = zext i32 %8 to i64\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = zext i32 %10 to i64\l  %12 = tail call i64 @llvm.usub.sat.i64(i64 %4, i64 %1)\l  %13 = uitofp i32 %8 to float\l  %14 = fmul contract float %13, %2\l  %15 = fmul float %14, 0x3FF7154760000000\l  %16 = tail call float @llvm.rint.f32(float %15)\l  %17 = fcmp ogt float %14, 0x40562E4300000000\l  %18 = fcmp olt float %14, 0xC059D1DA00000000\l  %19 = fneg float %15\l  %20 = tail call float @llvm.fma.f32(float %14, float 0x3FF7154760000000,\l... float %19)\l  %21 = tail call float @llvm.fma.f32(float %14, float 0x3E54AE0BE0000000,\l... float %20)\l  %22 = fsub float %15, %16\l  %23 = fadd float %21, %22\l  %24 = tail call float @llvm.exp2.f32(float %23)\l  %25 = fptosi float %16 to i32\l  %26 = tail call float @llvm.amdgcn.ldexp.f32(float %24, i32 %25)\l  %27 = select i1 %18, float 0.000000e+00, float %26\l  %28 = select i1 %17, float 0x7FF0000000000000, float %27\l  %29 = fmul contract float %28, %3\l  %30 = icmp eq i64 %11, %5\l  br i1 %30, label %31, label %53\l|{<s0>T|<s1>F}}"];
	Node0x5a74ab0:s0 -> Node0x5a77ab0;
	Node0x5a74ab0:s1 -> Node0x5a77b40;
	Node0x5a77ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%31:\l31:                                               \l  %32 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %33 = getelementptr inbounds i8, i8 addrspace(4)* %32, i64 12\l  %34 = bitcast i8 addrspace(4)* %33 to i32 addrspace(4)*\l  %35 = load i32, i32 addrspace(4)* %34, align 4, !tbaa !5\l  %36 = getelementptr i8, i8 addrspace(4)* %32, i64 4\l  %37 = bitcast i8 addrspace(4)* %36 to i16 addrspace(4)*\l  %38 = load i16, i16 addrspace(4)* %37, align 4, !range !14, !invariant.load\l... !15\l  %39 = zext i16 %38 to i32\l  %40 = udiv i32 %35, %39\l  %41 = mul i32 %40, %39\l  %42 = icmp ugt i32 %35, %41\l  %43 = zext i1 %42 to i32\l  %44 = add i32 %40, %43\l  %45 = zext i32 %44 to i64\l  %46 = mul i64 %45, %5\l  %47 = add i64 %46, %9\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %50 = fcmp contract oge float %29, %6\l  %51 = uitofp i1 %50 to float\l  %52 = fmul contract float %49, %51\l  br label %112\l}"];
	Node0x5a77ab0 -> Node0x5a79ca0;
	Node0x5a77b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%53:\l53:                                               \l  %54 = icmp ule i64 %12, %11\l  %55 = icmp ult i64 %11, %5\l  %56 = select i1 %54, i1 %55, i1 false\l  br i1 %56, label %57, label %88\l|{<s0>T|<s1>F}}"];
	Node0x5a77b40:s0 -> Node0x5a79f70;
	Node0x5a77b40:s1 -> Node0x5a79fc0;
	Node0x5a79f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%57:\l57:                                               \l  %58 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %59 = getelementptr inbounds i8, i8 addrspace(4)* %58, i64 12\l  %60 = bitcast i8 addrspace(4)* %59 to i32 addrspace(4)*\l  %61 = load i32, i32 addrspace(4)* %60, align 4, !tbaa !5\l  %62 = getelementptr i8, i8 addrspace(4)* %58, i64 4\l  %63 = bitcast i8 addrspace(4)* %62 to i16 addrspace(4)*\l  %64 = load i16, i16 addrspace(4)* %63, align 4, !range !14, !invariant.load\l... !15\l  %65 = zext i16 %64 to i32\l  %66 = udiv i32 %61, %65\l  %67 = mul i32 %66, %65\l  %68 = icmp ugt i32 %61, %67\l  %69 = zext i1 %68 to i32\l  %70 = add i32 %66, %69\l  %71 = zext i32 %70 to i64\l  %72 = mul nuw nsw i64 %71, %11\l  %73 = add nuw nsw i64 %72, %9\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %76 = fcmp contract oge float %29, %6\l  %77 = uitofp i1 %76 to float\l  %78 = fmul contract float %75, %77\l  %79 = add nuw nsw i64 %11, 1\l  %80 = mul nuw nsw i64 %79, %71\l  %81 = add nuw nsw i64 %80, %9\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %84 = fcmp contract olt float %29, %6\l  %85 = uitofp i1 %84 to float\l  %86 = fmul contract float %83, %85\l  %87 = fadd contract float %78, %86\l  br label %112\l}"];
	Node0x5a79f70 -> Node0x5a79ca0;
	Node0x5a79fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%88:\l88:                                               \l  %89 = icmp eq i64 %12, %11\l  %90 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  br i1 %89, label %91, label %112\l|{<s0>T|<s1>F}}"];
	Node0x5a79fc0:s0 -> Node0x5a7c800;
	Node0x5a79fc0:s1 -> Node0x5a79ca0;
	Node0x5a7c800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%91:\l91:                                               \l  %92 = getelementptr inbounds i8, i8 addrspace(4)* %90, i64 12\l  %93 = bitcast i8 addrspace(4)* %92 to i32 addrspace(4)*\l  %94 = load i32, i32 addrspace(4)* %93, align 4, !tbaa !5\l  %95 = getelementptr i8, i8 addrspace(4)* %90, i64 4\l  %96 = bitcast i8 addrspace(4)* %95 to i16 addrspace(4)*\l  %97 = load i16, i16 addrspace(4)* %96, align 4, !range !14, !invariant.load\l... !15\l  %98 = zext i16 %97 to i32\l  %99 = udiv i32 %94, %98\l  %100 = mul i32 %99, %98\l  %101 = icmp ugt i32 %94, %100\l  %102 = zext i1 %101 to i32\l  %103 = add i32 %99, %102\l  %104 = zext i32 %103 to i64\l  %105 = mul nuw nsw i64 %11, %104\l  %106 = add nuw nsw i64 %105, %9\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %109 = fcmp contract olt float %29, %6\l  %110 = uitofp i1 %109 to float\l  %111 = fmul contract float %108, %110\l  br label %112\l}"];
	Node0x5a7c800 -> Node0x5a79ca0;
	Node0x5a79ca0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%112:\l112:                                              \l  %113 = phi i8 addrspace(4)* [ %58, %57 ], [ %90, %91 ], [ %32, %31 ], [ %90,\l... %88 ]\l  %114 = phi float [ %87, %57 ], [ %111, %91 ], [ %52, %31 ], [ 0.000000e+00,\l... %88 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %115 = getelementptr inbounds i8, i8 addrspace(4)* %113, i64 12\l  %116 = bitcast i8 addrspace(4)* %115 to i32 addrspace(4)*\l  %117 = load i32, i32 addrspace(4)* %116, align 4, !tbaa !5\l  %118 = getelementptr i8, i8 addrspace(4)* %113, i64 4\l  %119 = bitcast i8 addrspace(4)* %118 to i16 addrspace(4)*\l  %120 = load i16, i16 addrspace(4)* %119, align 4, !range !14,\l... !invariant.load !15\l  %121 = zext i16 %120 to i32\l  %122 = udiv i32 %117, %121\l  %123 = mul i32 %122, %121\l  %124 = icmp ugt i32 %117, %123\l  %125 = zext i1 %124 to i32\l  %126 = add i32 %122, %125\l  %127 = zext i32 %126 to i64\l  %128 = mul nuw nsw i64 %127, %11\l  %129 = add nuw nsw i64 %128, %9\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  store float %114, float addrspace(1)* %130, align 4, !tbaa !16\l  ret void\l}"];
}
