digraph "CFG for '_Z28conv_horizontal_naive_outputiPfPKfS1_iii' function" {
	label="CFG for '_Z28conv_horizontal_naive_outputiPfPKfS1_iii' function";

	Node0x5e48e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = mul i32 %8, %13\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = add i32 %17, %18\l  %20 = icmp slt i32 %19, %0\l  br i1 %20, label %21, label %36\l|{<s0>T|<s1>F}}"];
	Node0x5e48e70:s0 -> Node0x5e4b0d0;
	Node0x5e48e70:s1 -> Node0x5e4b160;
	Node0x5e4b0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%21:\l21:                                               \l  %22 = sub nsw i32 %5, %6\l  %23 = add nsw i32 %22, 1\l  %24 = mul nsw i32 %23, %4\l  %25 = icmp sgt i32 %6, 0\l  %26 = udiv i32 %16, %13\l  %27 = mul i32 %26, %13\l  %28 = icmp ugt i32 %16, %27\l  %29 = zext i1 %28 to i32\l  %30 = add i32 %26, %29\l  %31 = mul i32 %30, %13\l  %32 = and i32 %6, 7\l  %33 = icmp ult i32 %6, 8\l  %34 = and i32 %6, -8\l  %35 = icmp eq i32 %32, 0\l  br label %37\l}"];
	Node0x5e4b0d0 -> Node0x5e4bc40;
	Node0x5e4b160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%36:\l36:                                               \l  ret void\l}"];
	Node0x5e4bc40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%37:\l37:                                               \l  %38 = phi i32 [ %19, %21 ], [ %73, %72 ]\l  %39 = freeze i32 %38\l  %40 = freeze i32 %23\l  %41 = sdiv i32 %39, %40\l  %42 = mul nsw i32 %41, %5\l  %43 = mul i32 %41, %40\l  %44 = sub i32 %39, %43\l  %45 = add nsw i32 %42, %44\l  %46 = sdiv i32 %38, %24\l  %47 = mul nsw i32 %46, %6\l  br i1 %25, label %48, label %72\l|{<s0>T|<s1>F}}"];
	Node0x5e4bc40:s0 -> Node0x5e4c350;
	Node0x5e4bc40:s1 -> Node0x5e4bd80;
	Node0x5e4c350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%48:\l48:                                               \l  %49 = sext i32 %38 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !16\l  br i1 %33, label %52, label %75\l|{<s0>T|<s1>F}}"];
	Node0x5e4c350:s0 -> Node0x5e4c740;
	Node0x5e4c350:s1 -> Node0x5e4c7d0;
	Node0x5e4c740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%52:\l52:                                               \l  %53 = phi float [ %51, %48 ], [ %165, %75 ]\l  %54 = phi i32 [ 0, %48 ], [ %166, %75 ]\l  br i1 %35, label %72, label %55\l|{<s0>T|<s1>F}}"];
	Node0x5e4c740:s0 -> Node0x5e4bd80;
	Node0x5e4c740:s1 -> Node0x5e4cae0;
	Node0x5e4cae0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = phi float [ %68, %55 ], [ %53, %52 ]\l  %57 = phi i32 [ %69, %55 ], [ %54, %52 ]\l  %58 = phi i32 [ %70, %55 ], [ 0, %52 ]\l  %59 = add nsw i32 %57, %47\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %3, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = add nsw i32 %45, %57\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16\l  %67 = fmul contract float %62, %66\l  %68 = fadd contract float %56, %67\l  store float %68, float addrspace(1)* %50, align 4, !tbaa !16\l  %69 = add nuw nsw i32 %57, 1\l  %70 = add i32 %58, 1\l  %71 = icmp eq i32 %70, %32\l  br i1 %71, label %72, label %55, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5e4cae0:s0 -> Node0x5e4bd80;
	Node0x5e4cae0:s1 -> Node0x5e4cae0;
	Node0x5e4bd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%72:\l72:                                               \l  %73 = add i32 %31, %38\l  %74 = icmp slt i32 %73, %0\l  br i1 %74, label %37, label %36, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5e4bd80:s0 -> Node0x5e4bc40;
	Node0x5e4bd80:s1 -> Node0x5e4b160;
	Node0x5e4c7d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%75:\l75:                                               \l  %76 = phi float [ %165, %75 ], [ %51, %48 ]\l  %77 = phi i32 [ %166, %75 ], [ 0, %48 ]\l  %78 = phi i32 [ %167, %75 ], [ 0, %48 ]\l  %79 = add nsw i32 %77, %47\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %3, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = add nsw i32 %45, %77\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %2, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = fmul contract float %82, %86\l  %88 = fadd contract float %76, %87\l  store float %88, float addrspace(1)* %50, align 4, !tbaa !16\l  %89 = or i32 %77, 1\l  %90 = add nsw i32 %89, %47\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %3, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16\l  %94 = add nsw i32 %45, %89\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %2, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16\l  %98 = fmul contract float %93, %97\l  %99 = fadd contract float %88, %98\l  store float %99, float addrspace(1)* %50, align 4, !tbaa !16\l  %100 = or i32 %77, 2\l  %101 = add nsw i32 %100, %47\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %3, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16\l  %105 = add nsw i32 %45, %100\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %2, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16\l  %109 = fmul contract float %104, %108\l  %110 = fadd contract float %99, %109\l  store float %110, float addrspace(1)* %50, align 4, !tbaa !16\l  %111 = or i32 %77, 3\l  %112 = add nsw i32 %111, %47\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %3, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16\l  %116 = add nsw i32 %45, %111\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %2, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = fmul contract float %115, %119\l  %121 = fadd contract float %110, %120\l  store float %121, float addrspace(1)* %50, align 4, !tbaa !16\l  %122 = or i32 %77, 4\l  %123 = add nsw i32 %122, %47\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %3, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = add nsw i32 %45, %122\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %2, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16\l  %131 = fmul contract float %126, %130\l  %132 = fadd contract float %121, %131\l  store float %132, float addrspace(1)* %50, align 4, !tbaa !16\l  %133 = or i32 %77, 5\l  %134 = add nsw i32 %133, %47\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %3, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !16\l  %138 = add nsw i32 %45, %133\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %2, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %142 = fmul contract float %137, %141\l  %143 = fadd contract float %132, %142\l  store float %143, float addrspace(1)* %50, align 4, !tbaa !16\l  %144 = or i32 %77, 6\l  %145 = add nsw i32 %144, %47\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %3, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16\l  %149 = add nsw i32 %45, %144\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %2, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !16\l  %153 = fmul contract float %148, %152\l  %154 = fadd contract float %143, %153\l  store float %154, float addrspace(1)* %50, align 4, !tbaa !16\l  %155 = or i32 %77, 7\l  %156 = add nsw i32 %155, %47\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %3, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !16\l  %160 = add nsw i32 %45, %155\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %2, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !16\l  %164 = fmul contract float %159, %163\l  %165 = fadd contract float %154, %164\l  store float %165, float addrspace(1)* %50, align 4, !tbaa !16\l  %166 = add nuw nsw i32 %77, 8\l  %167 = add i32 %78, 8\l  %168 = icmp eq i32 %167, %34\l  br i1 %168, label %52, label %75, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5e4c7d0:s0 -> Node0x5e4c740;
	Node0x5e4c7d0:s1 -> Node0x5e4c7d0;
}
