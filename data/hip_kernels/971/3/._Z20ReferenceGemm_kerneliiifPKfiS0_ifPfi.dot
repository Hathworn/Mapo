digraph "CFG for '_Z20ReferenceGemm_kerneliiifPKfiS0_ifPfi' function" {
	label="CFG for '_Z20ReferenceGemm_kerneliiifPKfiS0_ifPfi' function";

	Node0x461c340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %13, %18\l  %20 = add i32 %19, %12\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !5, !invariant.load !6\l  %26 = zext i16 %25 to i32\l  %27 = mul i32 %22, %26\l  %28 = add i32 %27, %21\l  %29 = icmp slt i32 %20, %0\l  %30 = icmp slt i32 %28, %1\l  %31 = select i1 %29, i1 %30, i1 false\l  br i1 %31, label %32, label %175\l|{<s0>T|<s1>F}}"];
	Node0x461c340:s0 -> Node0x4620950;
	Node0x461c340:s1 -> Node0x46209e0;
	Node0x4620950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%32:\l32:                                               \l  %33 = icmp sgt i32 %2, 0\l  br i1 %33, label %34, label %63\l|{<s0>T|<s1>F}}"];
	Node0x4620950:s0 -> Node0x461e8d0;
	Node0x4620950:s1 -> Node0x4620d30;
	Node0x461e8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = mul nsw i32 %28, %7\l  %36 = and i32 %2, 7\l  %37 = icmp ult i32 %2, 8\l  br i1 %37, label %40, label %38\l|{<s0>T|<s1>F}}"];
	Node0x461e8d0:s0 -> Node0x4621080;
	Node0x461e8d0:s1 -> Node0x46210d0;
	Node0x46210d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%38:\l38:                                               \l  %39 = and i32 %2, -8\l  br label %73\l}"];
	Node0x46210d0 -> Node0x46212d0;
	Node0x4621080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%40:\l40:                                               \l  %41 = phi float [ undef, %34 ], [ %171, %73 ]\l  %42 = phi i32 [ 0, %34 ], [ %172, %73 ]\l  %43 = phi float [ 0.000000e+00, %34 ], [ %171, %73 ]\l  %44 = icmp eq i32 %36, 0\l  br i1 %44, label %63, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4621080:s0 -> Node0x4620d30;
	Node0x4621080:s1 -> Node0x4622540;
	Node0x4622540 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi i32 [ %60, %45 ], [ %42, %40 ]\l  %47 = phi float [ %59, %45 ], [ %43, %40 ]\l  %48 = phi i32 [ %61, %45 ], [ 0, %40 ]\l  %49 = mul nsw i32 %46, %5\l  %50 = add nsw i32 %49, %20\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %4, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %54 = add nsw i32 %46, %35\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %6, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %58 = fmul contract float %53, %57\l  %59 = fadd contract float %47, %58\l  %60 = add nuw nsw i32 %46, 1\l  %61 = add i32 %48, 1\l  %62 = icmp eq i32 %61, %36\l  br i1 %62, label %63, label %45, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4622540:s0 -> Node0x4620d30;
	Node0x4622540:s1 -> Node0x4622540;
	Node0x4620d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%63:\l63:                                               \l  %64 = phi float [ 0.000000e+00, %32 ], [ %41, %40 ], [ %59, %45 ]\l  %65 = fmul contract float %64, %3\l  %66 = mul nsw i32 %28, %10\l  %67 = add nsw i32 %66, %20\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %9, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = fmul contract float %70, %8\l  %72 = fadd contract float %65, %71\l  store float %72, float addrspace(1)* %69, align 4, !tbaa !7\l  br label %175\l}"];
	Node0x4620d30 -> Node0x46209e0;
	Node0x46212d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%73:\l73:                                               \l  %74 = phi i32 [ 0, %38 ], [ %172, %73 ]\l  %75 = phi float [ 0.000000e+00, %38 ], [ %171, %73 ]\l  %76 = phi i32 [ 0, %38 ], [ %173, %73 ]\l  %77 = mul nsw i32 %74, %5\l  %78 = add nsw i32 %77, %20\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %4, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %82 = add nsw i32 %74, %35\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %6, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %86 = fmul contract float %81, %85\l  %87 = fadd contract float %75, %86\l  %88 = or i32 %74, 1\l  %89 = mul nsw i32 %88, %5\l  %90 = add nsw i32 %89, %20\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %4, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %94 = add nsw i32 %88, %35\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %6, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %98 = fmul contract float %93, %97\l  %99 = fadd contract float %87, %98\l  %100 = or i32 %74, 2\l  %101 = mul nsw i32 %100, %5\l  %102 = add nsw i32 %101, %20\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %4, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %106 = add nsw i32 %100, %35\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %6, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %110 = fmul contract float %105, %109\l  %111 = fadd contract float %99, %110\l  %112 = or i32 %74, 3\l  %113 = mul nsw i32 %112, %5\l  %114 = add nsw i32 %113, %20\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %4, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %118 = add nsw i32 %112, %35\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %6, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %122 = fmul contract float %117, %121\l  %123 = fadd contract float %111, %122\l  %124 = or i32 %74, 4\l  %125 = mul nsw i32 %124, %5\l  %126 = add nsw i32 %125, %20\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %4, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %130 = add nsw i32 %124, %35\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %6, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %134 = fmul contract float %129, %133\l  %135 = fadd contract float %123, %134\l  %136 = or i32 %74, 5\l  %137 = mul nsw i32 %136, %5\l  %138 = add nsw i32 %137, %20\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %4, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %142 = add nsw i32 %136, %35\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %6, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %146 = fmul contract float %141, %145\l  %147 = fadd contract float %135, %146\l  %148 = or i32 %74, 6\l  %149 = mul nsw i32 %148, %5\l  %150 = add nsw i32 %149, %20\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %4, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %154 = add nsw i32 %148, %35\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %6, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %158 = fmul contract float %153, %157\l  %159 = fadd contract float %147, %158\l  %160 = or i32 %74, 7\l  %161 = mul nsw i32 %160, %5\l  %162 = add nsw i32 %161, %20\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %4, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %166 = add nsw i32 %160, %35\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %6, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %170 = fmul contract float %165, %169\l  %171 = fadd contract float %159, %170\l  %172 = add nuw nsw i32 %74, 8\l  %173 = add i32 %76, 8\l  %174 = icmp eq i32 %173, %39\l  br i1 %174, label %40, label %73, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x46212d0:s0 -> Node0x4621080;
	Node0x46212d0:s1 -> Node0x46212d0;
	Node0x46209e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%175:\l175:                                              \l  ret void\l}"];
}
