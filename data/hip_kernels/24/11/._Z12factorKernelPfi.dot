digraph "CFG for '_Z12factorKernelPfi' function" {
	label="CFG for '_Z12factorKernelPfi' function";

	Node0x64305c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = mul i32 %3, %8\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %11 = add i32 %9, %10\l  %12 = shl nsw i32 %11, 1\l  %13 = add nsw i32 %12, %1\l  %14 = sitofp i32 %1 to float\l  %15 = fdiv contract float 0x401921FB60000000, %14\l  %16 = sitofp i32 %11 to float\l  %17 = fmul contract float %15, %16\l  %18 = icmp slt i32 %12, %1\l  br i1 %18, label %19, label %208\l|{<s0>T|<s1>F}}"];
	Node0x64305c0:s0 -> Node0x64332b0;
	Node0x64305c0:s1 -> Node0x6433340;
	Node0x64332b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%19:\l19:                                               \l  %20 = tail call float @llvm.fabs.f32(float %17)\l  %21 = fcmp olt float %20, 1.310720e+05\l  br i1 %21, label %22, label %52\l|{<s0>T|<s1>F}}"];
	Node0x64332b0:s0 -> Node0x6433700;
	Node0x64332b0:s1 -> Node0x6433790;
	Node0x6433700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%22:\l22:                                               \l  %23 = fmul float %20, 0x3FE45F3060000000\l  %24 = tail call float @llvm.rint.f32(float %23)\l  %25 = tail call float @llvm.fma.f32(float %24, float 0xBFF921FB40000000,\l... float %20)\l  %26 = tail call float @llvm.fma.f32(float %24, float 0xBE74442D00000000,\l... float %25)\l  %27 = tail call float @llvm.fma.f32(float %24, float 0xBCF8469880000000,\l... float %26)\l  %28 = fptosi float %24 to i32\l  %29 = fmul float %27, %27\l  %30 = tail call float @llvm.fmuladd.f32(float %29, float 0xBF29833040000000,\l... float 0x3F81103880000000)\l  %31 = tail call float @llvm.fmuladd.f32(float %29, float %30, float\l... 0xBFC55553A0000000)\l  %32 = fmul float %29, %31\l  %33 = tail call float @llvm.fmuladd.f32(float %27, float %32, float %27)\l  %34 = tail call float @llvm.fmuladd.f32(float %29, float 0x3EFAEA6680000000,\l... float 0xBF56C9E760000000)\l  %35 = tail call float @llvm.fmuladd.f32(float %29, float %34, float\l... 0x3FA5557EE0000000)\l  %36 = tail call float @llvm.fmuladd.f32(float %29, float %35, float\l... 0xBFE0000080000000)\l  %37 = tail call float @llvm.fmuladd.f32(float %29, float %36, float\l... 1.000000e+00)\l  %38 = fneg float %33\l  %39 = and i32 %28, 1\l  %40 = icmp eq i32 %39, 0\l  %41 = select i1 %40, float %37, float %38\l  %42 = bitcast float %41 to i32\l  %43 = shl i32 %28, 30\l  %44 = and i32 %43, -2147483648\l  %45 = xor i32 %44, %42\l  %46 = bitcast i32 %45 to float\l  %47 = tail call i1 @llvm.amdgcn.class.f32(float %20, i32 504)\l  %48 = select i1 %47, float %46, float 0x7FF8000000000000\l  %49 = sext i32 %12 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  store float %48, float addrspace(1)* %50, align 4, !tbaa !7\l  %51 = bitcast float %20 to i32\l  br label %180\l}"];
	Node0x6433700 -> Node0x6435bb0;
	Node0x6433790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%52:\l52:                                               \l  %53 = bitcast float %20 to i32\l  %54 = lshr i32 %53, 23\l  %55 = and i32 %53, 8388607\l  %56 = or i32 %55, 8388608\l  %57 = zext i32 %56 to i64\l  %58 = mul nuw nsw i64 %57, 4266746795\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = mul nuw nsw i64 %57, 1011060801\l  %62 = add nuw nsw i64 %60, %61\l  %63 = trunc i64 %62 to i32\l  %64 = lshr i64 %62, 32\l  %65 = mul nuw nsw i64 %57, 3680671129\l  %66 = add nuw nsw i64 %64, %65\l  %67 = trunc i64 %66 to i32\l  %68 = lshr i64 %66, 32\l  %69 = mul nuw nsw i64 %57, 4113882560\l  %70 = add nuw nsw i64 %68, %69\l  %71 = trunc i64 %70 to i32\l  %72 = lshr i64 %70, 32\l  %73 = mul nuw nsw i64 %57, 4230436817\l  %74 = add nuw nsw i64 %72, %73\l  %75 = trunc i64 %74 to i32\l  %76 = lshr i64 %74, 32\l  %77 = mul nuw nsw i64 %57, 1313084713\l  %78 = add nuw nsw i64 %76, %77\l  %79 = trunc i64 %78 to i32\l  %80 = lshr i64 %78, 32\l  %81 = mul nuw nsw i64 %57, 2734261102\l  %82 = add nuw nsw i64 %80, %81\l  %83 = trunc i64 %82 to i32\l  %84 = lshr i64 %82, 32\l  %85 = trunc i64 %84 to i32\l  %86 = add nsw i32 %54, -120\l  %87 = icmp ugt i32 %86, 63\l  %88 = select i1 %87, i32 %79, i32 %85\l  %89 = select i1 %87, i32 %75, i32 %83\l  %90 = select i1 %87, i32 %71, i32 %79\l  %91 = select i1 %87, i32 %67, i32 %75\l  %92 = select i1 %87, i32 %63, i32 %71\l  %93 = select i1 %87, i32 %59, i32 %67\l  %94 = select i1 %87, i32 -64, i32 0\l  %95 = add nsw i32 %94, %86\l  %96 = icmp ugt i32 %95, 31\l  %97 = select i1 %96, i32 %89, i32 %88\l  %98 = select i1 %96, i32 %90, i32 %89\l  %99 = select i1 %96, i32 %91, i32 %90\l  %100 = select i1 %96, i32 %92, i32 %91\l  %101 = select i1 %96, i32 %93, i32 %92\l  %102 = select i1 %96, i32 -32, i32 0\l  %103 = add nsw i32 %102, %95\l  %104 = icmp ugt i32 %103, 31\l  %105 = select i1 %104, i32 %98, i32 %97\l  %106 = select i1 %104, i32 %99, i32 %98\l  %107 = select i1 %104, i32 %100, i32 %99\l  %108 = select i1 %104, i32 %101, i32 %100\l  %109 = select i1 %104, i32 -32, i32 0\l  %110 = add nsw i32 %109, %103\l  %111 = icmp eq i32 %110, 0\l  %112 = sub nsw i32 32, %110\l  %113 = tail call i32 @llvm.fshr.i32(i32 %105, i32 %106, i32 %112)\l  %114 = tail call i32 @llvm.fshr.i32(i32 %106, i32 %107, i32 %112)\l  %115 = tail call i32 @llvm.fshr.i32(i32 %107, i32 %108, i32 %112)\l  %116 = select i1 %111, i32 %105, i32 %113\l  %117 = select i1 %111, i32 %106, i32 %114\l  %118 = select i1 %111, i32 %107, i32 %115\l  %119 = lshr i32 %116, 29\l  %120 = tail call i32 @llvm.fshl.i32(i32 %116, i32 %117, i32 2)\l  %121 = tail call i32 @llvm.fshl.i32(i32 %117, i32 %118, i32 2)\l  %122 = tail call i32 @llvm.fshl.i32(i32 %118, i32 %108, i32 2)\l  %123 = and i32 %119, 1\l  %124 = sub nsw i32 0, %123\l  %125 = shl i32 %119, 31\l  %126 = xor i32 %120, %124\l  %127 = xor i32 %121, %124\l  %128 = xor i32 %122, %124\l  %129 = tail call i32 @llvm.ctlz.i32(i32 %126, i1 false), !range !11\l  %130 = sub nsw i32 31, %129\l  %131 = tail call i32 @llvm.fshr.i32(i32 %126, i32 %127, i32 %130)\l  %132 = tail call i32 @llvm.fshr.i32(i32 %127, i32 %128, i32 %130)\l  %133 = shl nuw nsw i32 %129, 23\l  %134 = sub nuw nsw i32 1056964608, %133\l  %135 = lshr i32 %131, 9\l  %136 = or i32 %135, %134\l  %137 = or i32 %136, %125\l  %138 = bitcast i32 %137 to float\l  %139 = tail call i32 @llvm.fshl.i32(i32 %131, i32 %132, i32 23)\l  %140 = tail call i32 @llvm.ctlz.i32(i32 %139, i1 false), !range !11\l  %141 = fmul float %138, 0x3FF921FB40000000\l  %142 = add nuw nsw i32 %140, %129\l  %143 = shl nuw nsw i32 %142, 23\l  %144 = sub nuw nsw i32 855638016, %143\l  %145 = sub nsw i32 31, %140\l  %146 = tail call i32 @llvm.fshr.i32(i32 %139, i32 %132, i32 %145)\l  %147 = lshr i32 %146, 9\l  %148 = or i32 %144, %147\l  %149 = or i32 %148, %125\l  %150 = bitcast i32 %149 to float\l  %151 = fneg float %141\l  %152 = tail call float @llvm.fma.f32(float %138, float 0x3FF921FB40000000,\l... float %151)\l  %153 = tail call float @llvm.fma.f32(float %138, float 0x3E74442D00000000,\l... float %152)\l  %154 = tail call float @llvm.fma.f32(float %150, float 0x3FF921FB40000000,\l... float %153)\l  %155 = fadd float %141, %154\l  %156 = lshr i32 %116, 30\l  %157 = add nuw nsw i32 %123, %156\l  %158 = fmul float %155, %155\l  %159 = tail call float @llvm.fmuladd.f32(float %158, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %160 = tail call float @llvm.fmuladd.f32(float %158, float %159, float\l... 0xBFC55553A0000000)\l  %161 = fmul float %158, %160\l  %162 = tail call float @llvm.fmuladd.f32(float %155, float %161, float %155)\l  %163 = tail call float @llvm.fmuladd.f32(float %158, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %164 = tail call float @llvm.fmuladd.f32(float %158, float %163, float\l... 0x3FA5557EE0000000)\l  %165 = tail call float @llvm.fmuladd.f32(float %158, float %164, float\l... 0xBFE0000080000000)\l  %166 = tail call float @llvm.fmuladd.f32(float %158, float %165, float\l... 1.000000e+00)\l  %167 = fneg float %162\l  %168 = and i32 %157, 1\l  %169 = icmp eq i32 %168, 0\l  %170 = select i1 %169, float %166, float %167\l  %171 = bitcast float %170 to i32\l  %172 = shl i32 %157, 30\l  %173 = and i32 %172, -2147483648\l  %174 = xor i32 %173, %171\l  %175 = bitcast i32 %174 to float\l  %176 = tail call i1 @llvm.amdgcn.class.f32(float %20, i32 504)\l  %177 = select i1 %176, float %175, float 0x7FF8000000000000\l  %178 = sext i32 %12 to i64\l  %179 = getelementptr inbounds float, float addrspace(1)* %0, i64 %178\l  store float %177, float addrspace(1)* %179, align 4, !tbaa !7\l  br label %180\l}"];
	Node0x6433790 -> Node0x6435bb0;
	Node0x6435bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%180:\l180:                                              \l  %181 = phi i32 [ %44, %22 ], [ %173, %52 ]\l  %182 = phi i32 [ %39, %22 ], [ %168, %52 ]\l  %183 = phi float [ %37, %22 ], [ %166, %52 ]\l  %184 = phi float [ %33, %22 ], [ %162, %52 ]\l  %185 = phi float [ %48, %22 ], [ %177, %52 ]\l  %186 = phi i1 [ %47, %22 ], [ %176, %52 ]\l  %187 = phi i32 [ %51, %22 ], [ %53, %52 ]\l  %188 = icmp eq i32 %182, 0\l  %189 = select i1 %188, float %184, float %183\l  %190 = bitcast float %189 to i32\l  %191 = bitcast float %17 to i32\l  %192 = xor i32 %187, %191\l  %193 = xor i32 %192, %181\l  %194 = xor i32 %193, %190\l  %195 = bitcast i32 %194 to float\l  %196 = select i1 %186, float %195, float 0x7FF8000000000000\l  %197 = add nuw nsw i32 %12, 1\l  %198 = sext i32 %197 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %0, i64 %198\l  store float %196, float addrspace(1)* %199, align 4, !tbaa !7\l  %200 = fneg contract float %185\l  %201 = sext i32 %13 to i64\l  %202 = getelementptr inbounds float, float addrspace(1)* %0, i64 %201\l  store float %200, float addrspace(1)* %202, align 4, !tbaa !7\l  %203 = load float, float addrspace(1)* %199, align 4, !tbaa !7\l  %204 = fneg contract float %203\l  %205 = add nsw i32 %13, 1\l  %206 = sext i32 %205 to i64\l  %207 = getelementptr inbounds float, float addrspace(1)* %0, i64 %206\l  store float %204, float addrspace(1)* %207, align 4, !tbaa !7\l  br label %208\l}"];
	Node0x6435bb0 -> Node0x6433340;
	Node0x6433340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%208:\l208:                                              \l  ret void\l}"];
}
