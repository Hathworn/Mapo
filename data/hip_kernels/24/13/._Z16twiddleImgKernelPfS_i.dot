digraph "CFG for '_Z16twiddleImgKernelPfS_i' function" {
	label="CFG for '_Z16twiddleImgKernelPfS_i' function";

	Node0x4a45a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = add i32 %10, %11\l  %13 = icmp slt i32 %12, %2\l  br i1 %13, label %14, label %148\l|{<s0>T|<s1>F}}"];
	Node0x4a45a60:s0 -> Node0x4a47960;
	Node0x4a45a60:s1 -> Node0x4a479f0;
	Node0x4a47960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%14:\l14:                                               \l  %15 = icmp eq i32 %12, 0\l  br i1 %15, label %16, label %52\l|{<s0>T|<s1>F}}"];
	Node0x4a47960:s0 -> Node0x4a47bc0;
	Node0x4a47960:s1 -> Node0x4a47c10;
	Node0x4a47bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%16:\l16:                                               \l  %17 = icmp sgt i32 %2, 0\l  br i1 %17, label %18, label %148\l|{<s0>T|<s1>F}}"];
	Node0x4a47bc0:s0 -> Node0x4a47e60;
	Node0x4a47bc0:s1 -> Node0x4a479f0;
	Node0x4a47e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%18:\l18:                                               \l  %19 = and i32 %2, 7\l  %20 = icmp ult i32 %2, 8\l  br i1 %20, label %117, label %21\l|{<s0>T|<s1>F}}"];
	Node0x4a47e60:s0 -> Node0x4a480e0;
	Node0x4a47e60:s1 -> Node0x4a48130;
	Node0x4a48130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%21:\l21:                                               \l  %22 = and i32 %2, -8\l  br label %23\l}"];
	Node0x4a48130 -> Node0x4a48330;
	Node0x4a48330 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%23:\l23:                                               \l  %24 = phi i32 [ 0, %21 ], [ %49, %23 ]\l  %25 = phi i32 [ 0, %21 ], [ %50, %23 ]\l  %26 = zext i32 %24 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %0, i64 %26\l  store float 0.000000e+00, float addrspace(1)* %27, align 4, !tbaa !7\l  %28 = or i32 %24, 1\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %0, i64 %29\l  store float 0.000000e+00, float addrspace(1)* %30, align 4, !tbaa !7\l  %31 = or i32 %24, 2\l  %32 = zext i32 %31 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %0, i64 %32\l  store float 0.000000e+00, float addrspace(1)* %33, align 4, !tbaa !7\l  %34 = or i32 %24, 3\l  %35 = zext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %35\l  store float 0.000000e+00, float addrspace(1)* %36, align 4, !tbaa !7\l  %37 = or i32 %24, 4\l  %38 = zext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  store float 0.000000e+00, float addrspace(1)* %39, align 4, !tbaa !7\l  %40 = or i32 %24, 5\l  %41 = zext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  store float 0.000000e+00, float addrspace(1)* %42, align 4, !tbaa !7\l  %43 = or i32 %24, 6\l  %44 = zext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  store float 0.000000e+00, float addrspace(1)* %45, align 4, !tbaa !7\l  %46 = or i32 %24, 7\l  %47 = zext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  store float 0.000000e+00, float addrspace(1)* %48, align 4, !tbaa !7\l  %49 = add nuw nsw i32 %24, 8\l  %50 = add i32 %25, 8\l  %51 = icmp eq i32 %50, %22\l  br i1 %51, label %117, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4a48330:s0 -> Node0x4a480e0;
	Node0x4a48330:s1 -> Node0x4a48330;
	Node0x4a47c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%52:\l52:                                               \l  %53 = mul nsw i32 %12, %2\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54\l  store float 0.000000e+00, float addrspace(1)* %55, align 4, !tbaa !7\l  %56 = icmp sgt i32 %2, 1\l  br i1 %56, label %57, label %148\l|{<s0>T|<s1>F}}"];
	Node0x4a47c10:s0 -> Node0x4a4b0b0;
	Node0x4a47c10:s1 -> Node0x4a479f0;
	Node0x4a4b0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%57:\l57:                                               \l  %58 = add i32 %2, -1\l  %59 = add i32 %2, -2\l  %60 = and i32 %58, 3\l  %61 = icmp ult i32 %59, 3\l  br i1 %61, label %128, label %62\l|{<s0>T|<s1>F}}"];
	Node0x4a4b0b0:s0 -> Node0x4a4b3f0;
	Node0x4a4b0b0:s1 -> Node0x4a4b440;
	Node0x4a4b440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%62:\l62:                                               \l  %63 = and i32 %58, -4\l  br label %64\l}"];
	Node0x4a4b440 -> Node0x4a4b610;
	Node0x4a4b610 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%64:\l64:                                               \l  %65 = phi i32 [ 1, %62 ], [ %114, %64 ]\l  %66 = phi i32 [ 0, %62 ], [ %115, %64 ]\l  %67 = mul nsw i32 %65, %12\l  %68 = srem i32 %67, %2\l  %69 = shl nsw i32 %68, 1\l  %70 = add nuw nsw i32 %69, 1\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7\l  %74 = fneg contract float %73\l  %75 = add nsw i32 %65, %53\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  store float %74, float addrspace(1)* %77, align 4, !tbaa !7\l  %78 = add nuw nsw i32 %65, 1\l  %79 = mul nsw i32 %78, %12\l  %80 = srem i32 %79, %2\l  %81 = shl nsw i32 %80, 1\l  %82 = add nuw nsw i32 %81, 1\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7\l  %86 = fneg contract float %85\l  %87 = add nsw i32 %78, %53\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  store float %86, float addrspace(1)* %89, align 4, !tbaa !7\l  %90 = add nuw nsw i32 %65, 2\l  %91 = mul nsw i32 %90, %12\l  %92 = srem i32 %91, %2\l  %93 = shl nsw i32 %92, 1\l  %94 = add nuw nsw i32 %93, 1\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7\l  %98 = fneg contract float %97\l  %99 = add nsw i32 %90, %53\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  store float %98, float addrspace(1)* %101, align 4, !tbaa !7\l  %102 = add nuw nsw i32 %65, 3\l  %103 = mul nsw i32 %102, %12\l  %104 = srem i32 %103, %2\l  %105 = shl nsw i32 %104, 1\l  %106 = add nuw nsw i32 %105, 1\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7\l  %110 = fneg contract float %109\l  %111 = add nsw i32 %102, %53\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  store float %110, float addrspace(1)* %113, align 4, !tbaa !7\l  %114 = add nuw nsw i32 %65, 4\l  %115 = add i32 %66, 4\l  %116 = icmp eq i32 %115, %63\l  br i1 %116, label %128, label %64, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4a4b610:s0 -> Node0x4a4b3f0;
	Node0x4a4b610:s1 -> Node0x4a4b610;
	Node0x4a480e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%117:\l117:                                              \l  %118 = phi i32 [ 0, %18 ], [ %49, %23 ]\l  %119 = icmp eq i32 %19, 0\l  br i1 %119, label %148, label %120\l|{<s0>T|<s1>F}}"];
	Node0x4a480e0:s0 -> Node0x4a479f0;
	Node0x4a480e0:s1 -> Node0x4a4da60;
	Node0x4a4da60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#ca3b3770",label="{%120:\l120:                                              \l  %121 = phi i32 [ %125, %120 ], [ %118, %117 ]\l  %122 = phi i32 [ %126, %120 ], [ 0, %117 ]\l  %123 = zext i32 %121 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  store float 0.000000e+00, float addrspace(1)* %124, align 4, !tbaa !7\l  %125 = add nuw nsw i32 %121, 1\l  %126 = add i32 %122, 1\l  %127 = icmp eq i32 %126, %19\l  br i1 %127, label %148, label %120, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x4a4da60:s0 -> Node0x4a479f0;
	Node0x4a4da60:s1 -> Node0x4a4da60;
	Node0x4a4b3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%128:\l128:                                              \l  %129 = phi i32 [ 1, %57 ], [ %114, %64 ]\l  %130 = icmp eq i32 %60, 0\l  br i1 %130, label %148, label %131\l|{<s0>T|<s1>F}}"];
	Node0x4a4b3f0:s0 -> Node0x4a479f0;
	Node0x4a4b3f0:s1 -> Node0x4a4b810;
	Node0x4a4b810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%131:\l131:                                              \l  %132 = phi i32 [ %145, %131 ], [ %129, %128 ]\l  %133 = phi i32 [ %146, %131 ], [ 0, %128 ]\l  %134 = mul nsw i32 %132, %12\l  %135 = srem i32 %134, %2\l  %136 = shl nsw i32 %135, 1\l  %137 = add nuw nsw i32 %136, 1\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %1, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !7\l  %141 = fneg contract float %140\l  %142 = add nsw i32 %132, %53\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  store float %141, float addrspace(1)* %144, align 4, !tbaa !7\l  %145 = add nuw nsw i32 %132, 1\l  %146 = add i32 %133, 1\l  %147 = icmp eq i32 %146, %60\l  br i1 %147, label %148, label %131, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4a4b810:s0 -> Node0x4a479f0;
	Node0x4a4b810:s1 -> Node0x4a4b810;
	Node0x4a479f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%148:\l148:                                              \l  ret void\l}"];
}
