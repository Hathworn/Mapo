digraph "CFG for '_Z10ApplyPool5PfS_' function" {
	label="CFG for '_Z10ApplyPool5PfS_' function";

	Node0x5fbf280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = add i32 %10, %3\l  %12 = mul nsw i32 %11, 592\l  %13 = mul nsw i32 %11, 148\l  br label %15\l}"];
	Node0x5fbf280 -> Node0x5fc0220;
	Node0x5fc1370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%14:\l14:                                               \l  ret void\l}"];
	Node0x5fc0220 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%15:\l15:                                               \l  %16 = phi i32 [ 0, %2 ], [ %102, %15 ]\l  %17 = shl nuw nsw i32 %16, 1\l  %18 = add nsw i32 %17, %12\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %0, i64 %19\l  %21 = load float, float addrspace(1)* %20, align 4, !tbaa !7\l  %22 = or i32 %18, 1\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds float, float addrspace(1)* %0, i64 %23\l  %25 = load float, float addrspace(1)* %24, align 4, !tbaa !7\l  %26 = tail call float @llvm.maxnum.f32(float %21, float %25)\l  %27 = add nsw i32 %18, 296\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %31 = tail call float @llvm.maxnum.f32(float %26, float %30)\l  %32 = add nsw i32 %18, 297\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = tail call float @llvm.maxnum.f32(float %31, float %35)\l  %37 = add nsw i32 %16, %13\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %38\l  %40 = fmul contract float %36, 2.000000e+00\l  %41 = fadd contract float %40, -1.000000e+00\l  %42 = fneg contract float %41\l  %43 = fmul float %41, 0xBFF7154760000000\l  %44 = tail call float @llvm.rint.f32(float %43)\l  %45 = fcmp olt float %41, 0xC0562E4300000000\l  %46 = fcmp ogt float %41, 0x4059D1DA00000000\l  %47 = fneg float %43\l  %48 = tail call float @llvm.fma.f32(float %42, float 0x3FF7154760000000,\l... float %47)\l  %49 = tail call float @llvm.fma.f32(float %42, float 0x3E54AE0BE0000000,\l... float %48)\l  %50 = fsub float %43, %44\l  %51 = fadd float %49, %50\l  %52 = tail call float @llvm.exp2.f32(float %51)\l  %53 = fptosi float %44 to i32\l  %54 = tail call float @llvm.amdgcn.ldexp.f32(float %52, i32 %53)\l  %55 = fadd contract float %54, 1.000000e+00\l  %56 = fdiv contract float 1.000000e+00, %55\l  %57 = select i1 %46, float 1.000000e+00, float %56\l  %58 = select i1 %45, float 0.000000e+00, float %57\l  store float %58, float addrspace(1)* %39, align 4, !tbaa !7\l  %59 = or i32 %16, 1\l  %60 = shl nuw nsw i32 %59, 1\l  %61 = add nsw i32 %60, %12\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7\l  %65 = or i32 %61, 1\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = tail call float @llvm.maxnum.f32(float %64, float %68)\l  %70 = add nsw i32 %61, 296\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7\l  %74 = tail call float @llvm.maxnum.f32(float %69, float %73)\l  %75 = add nsw i32 %61, 297\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7\l  %79 = tail call float @llvm.maxnum.f32(float %74, float %78)\l  %80 = add nsw i32 %59, %13\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = fmul contract float %79, 2.000000e+00\l  %84 = fadd contract float %83, -1.000000e+00\l  %85 = fneg contract float %84\l  %86 = fmul float %84, 0xBFF7154760000000\l  %87 = tail call float @llvm.rint.f32(float %86)\l  %88 = fcmp olt float %84, 0xC0562E4300000000\l  %89 = fcmp ogt float %84, 0x4059D1DA00000000\l  %90 = fneg float %86\l  %91 = tail call float @llvm.fma.f32(float %85, float 0x3FF7154760000000,\l... float %90)\l  %92 = tail call float @llvm.fma.f32(float %85, float 0x3E54AE0BE0000000,\l... float %91)\l  %93 = fsub float %86, %87\l  %94 = fadd float %92, %93\l  %95 = tail call float @llvm.exp2.f32(float %94)\l  %96 = fptosi float %87 to i32\l  %97 = tail call float @llvm.amdgcn.ldexp.f32(float %95, i32 %96)\l  %98 = fadd contract float %97, 1.000000e+00\l  %99 = fdiv contract float 1.000000e+00, %98\l  %100 = select i1 %89, float 1.000000e+00, float %99\l  %101 = select i1 %88, float 0.000000e+00, float %100\l  store float %101, float addrspace(1)* %82, align 4, !tbaa !7\l  %102 = add nuw nsw i32 %16, 2\l  %103 = icmp eq i32 %102, 148\l  br i1 %103, label %14, label %15, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5fc0220:s0 -> Node0x5fc1370;
	Node0x5fc0220:s1 -> Node0x5fc0220;
}
