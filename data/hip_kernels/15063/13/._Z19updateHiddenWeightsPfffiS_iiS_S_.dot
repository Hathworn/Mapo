digraph "CFG for '_Z19updateHiddenWeightsPfffiS_iiS_S_' function" {
	label="CFG for '_Z19updateHiddenWeightsPfffiS_iiS_S_' function";

	Node0x5a5ae80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = mul i32 %16, %15\l  %18 = add i32 %17, %10\l  %19 = icmp sgt i32 %5, 0\l  br i1 %19, label %22, label %20\l|{<s0>T|<s1>F}}"];
	Node0x5a5ae80:s0 -> Node0x5a5d8e0;
	Node0x5a5ae80:s1 -> Node0x5a5d970;
	Node0x5a5d970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%20:\l20:                                               \l  %21 = sext i32 %18 to i64\l  br label %64\l}"];
	Node0x5a5d970 -> Node0x5a5db20;
	Node0x5a5d8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%22:\l22:                                               \l  %23 = fmul contract float %1, %2\l  %24 = mul nsw i32 %18, %6\l  %25 = add nsw i32 %24, %3\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %4, i64 %26\l  %28 = sext i32 %18 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %8, i64 %28\l  %30 = mul nsw i32 %18, %5\l  %31 = and i32 %5, 3\l  %32 = icmp ult i32 %5, 4\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5a5d8e0:s0 -> Node0x5a5d6b0;
	Node0x5a5d8e0:s1 -> Node0x5a5d700;
	Node0x5a5d700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %5, -4\l  br label %70\l}"];
	Node0x5a5d700 -> Node0x5a5e510;
	Node0x5a5d6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %22 ], [ %125, %70 ]\l  %37 = phi float [ 0.000000e+00, %22 ], [ %125, %70 ]\l  %38 = phi i32 [ 0, %22 ], [ %133, %70 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %61, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5a5d6b0:s0 -> Node0x5a5f780;
	Node0x5a5d6b0:s1 -> Node0x5a5f810;
	Node0x5a5f810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi float [ %50, %40 ], [ %37, %35 ]\l  %42 = phi i32 [ %58, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %59, %40 ], [ 0, %35 ]\l  %44 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %45 = fmul contract float %23, %44\l  %46 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %47 = fmul contract float %46, 2.000000e+00\l  %48 = fadd contract float %47, -1.000000e+00\l  %49 = fmul contract float %45, %48\l  %50 = fadd contract float %41, %49\l  %51 = add nsw i32 %42, %30\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !7\l  %55 = fadd contract float %54, %49\l  %56 = tail call float @llvm.minnum.f32(float %55, float 1.000000e+00)\l  %57 = tail call float @llvm.maxnum.f32(float %56, float 0.000000e+00)\l  store float %57, float addrspace(1)* %53, align 4, !tbaa !7\l  %58 = add nuw nsw i32 %42, 1\l  %59 = add i32 %43, 1\l  %60 = icmp eq i32 %59, %31\l  br i1 %60, label %61, label %40, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5a5f810:s0 -> Node0x5a5f780;
	Node0x5a5f810:s1 -> Node0x5a5f810;
	Node0x5a5f780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%61:\l61:                                               \l  %62 = phi float [ %36, %35 ], [ %50, %40 ]\l  %63 = fmul contract float %62, 5.000000e-01\l  br label %64\l}"];
	Node0x5a5f780 -> Node0x5a5db20;
	Node0x5a5db20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%64:\l64:                                               \l  %65 = phi i64 [ %21, %20 ], [ %28, %61 ]\l  %66 = phi float [ 0.000000e+00, %20 ], [ %63, %61 ]\l  %67 = getelementptr inbounds float, float addrspace(1)* %7, i64 %65\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = fsub contract float %68, %66\l  store float %69, float addrspace(1)* %67, align 4, !tbaa !7\l  ret void\l}"];
	Node0x5a5e510 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%70:\l70:                                               \l  %71 = phi float [ 0.000000e+00, %33 ], [ %125, %70 ]\l  %72 = phi i32 [ 0, %33 ], [ %133, %70 ]\l  %73 = phi i32 [ 0, %33 ], [ %134, %70 ]\l  %74 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %75 = fmul contract float %23, %74\l  %76 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %77 = fmul contract float %76, 2.000000e+00\l  %78 = fadd contract float %77, -1.000000e+00\l  %79 = fmul contract float %75, %78\l  %80 = fadd contract float %71, %79\l  %81 = add nsw i32 %72, %30\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7\l  %85 = fadd contract float %84, %79\l  %86 = tail call float @llvm.minnum.f32(float %85, float 1.000000e+00)\l  %87 = tail call float @llvm.maxnum.f32(float %86, float 0.000000e+00)\l  store float %87, float addrspace(1)* %83, align 4, !tbaa !7\l  %88 = or i32 %72, 1\l  %89 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %90 = fmul contract float %23, %89\l  %91 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %92 = fmul contract float %91, 2.000000e+00\l  %93 = fadd contract float %92, -1.000000e+00\l  %94 = fmul contract float %90, %93\l  %95 = fadd contract float %80, %94\l  %96 = add nsw i32 %88, %30\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7\l  %100 = fadd contract float %99, %94\l  %101 = tail call float @llvm.minnum.f32(float %100, float 1.000000e+00)\l  %102 = tail call float @llvm.maxnum.f32(float %101, float 0.000000e+00)\l  store float %102, float addrspace(1)* %98, align 4, !tbaa !7\l  %103 = or i32 %72, 2\l  %104 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %105 = fmul contract float %23, %104\l  %106 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %107 = fmul contract float %106, 2.000000e+00\l  %108 = fadd contract float %107, -1.000000e+00\l  %109 = fmul contract float %105, %108\l  %110 = fadd contract float %95, %109\l  %111 = add nsw i32 %103, %30\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7\l  %115 = fadd contract float %114, %109\l  %116 = tail call float @llvm.minnum.f32(float %115, float 1.000000e+00)\l  %117 = tail call float @llvm.maxnum.f32(float %116, float 0.000000e+00)\l  store float %117, float addrspace(1)* %113, align 4, !tbaa !7\l  %118 = or i32 %72, 3\l  %119 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %120 = fmul contract float %23, %119\l  %121 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %122 = fmul contract float %121, 2.000000e+00\l  %123 = fadd contract float %122, -1.000000e+00\l  %124 = fmul contract float %120, %123\l  %125 = fadd contract float %110, %124\l  %126 = add nsw i32 %118, %30\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7\l  %130 = fadd contract float %129, %124\l  %131 = tail call float @llvm.minnum.f32(float %130, float 1.000000e+00)\l  %132 = tail call float @llvm.maxnum.f32(float %131, float 0.000000e+00)\l  store float %132, float addrspace(1)* %128, align 4, !tbaa !7\l  %133 = add nuw nsw i32 %72, 4\l  %134 = add i32 %73, 4\l  %135 = icmp eq i32 %134, %34\l  br i1 %135, label %35, label %70, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5a5e510:s0 -> Node0x5a5d6b0;
	Node0x5a5e510:s1 -> Node0x5a5e510;
}
