digraph "CFG for '_Z19updateOutputWeightsPfffiiS_i' function" {
	label="CFG for '_Z19updateOutputWeightsPfffiiS_i' function";

	Node0x57091c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = icmp sgt i32 %6, 0\l  br i1 %12, label %13, label %34\l|{<s0>T|<s1>F}}"];
	Node0x57091c0:s0 -> Node0x570a9e0;
	Node0x57091c0:s1 -> Node0x570aa70;
	Node0x570a9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%13:\l13:                                               \l  %14 = and i32 %6, 7\l  %15 = icmp ult i32 %6, 8\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x570a9e0:s0 -> Node0x570ad30;
	Node0x570a9e0:s1 -> Node0x570ad80;
	Node0x570ad80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%16:\l16:                                               \l  %17 = and i32 %6, -8\l  br label %56\l}"];
	Node0x570ad80 -> Node0x5709430;
	Node0x570ad30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = phi float [ undef, %13 ], [ %98, %56 ]\l  %20 = phi float [ 0.000000e+00, %13 ], [ %98, %56 ]\l  %21 = phi i32 [ 0, %13 ], [ %99, %56 ]\l  %22 = icmp eq i32 %14, 0\l  br i1 %22, label %34, label %23\l|{<s0>T|<s1>F}}"];
	Node0x570ad30:s0 -> Node0x570aa70;
	Node0x570ad30:s1 -> Node0x570c280;
	Node0x570c280 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi float [ %30, %23 ], [ %20, %18 ]\l  %25 = phi i32 [ %31, %23 ], [ %21, %18 ]\l  %26 = phi i32 [ %32, %23 ], [ 0, %18 ]\l  %27 = zext i32 %25 to i64\l  %28 = getelementptr inbounds float, float addrspace(1)* %5, i64 %27\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %30 = fadd contract float %24, %29\l  %31 = add nuw nsw i32 %25, 1\l  %32 = add i32 %26, 1\l  %33 = icmp eq i32 %32, %14\l  br i1 %33, label %34, label %23, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x570c280:s0 -> Node0x570aa70;
	Node0x570c280:s1 -> Node0x570c280;
	Node0x570aa70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%34:\l34:                                               \l  %35 = phi float [ 0.000000e+00, %7 ], [ %19, %18 ], [ %30, %23 ]\l  %36 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %37 = zext i16 %11 to i32\l  %38 = mul i32 %36, %37\l  %39 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !12\l  %40 = mul nsw i32 %4, %3\l  %41 = add i32 %40, %39\l  %42 = add i32 %41, %38\l  %43 = sext i32 %3 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %5, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %46 = fdiv contract float %45, %35\l  %47 = fmul contract float %1, %2\l  %48 = sext i32 %42 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %51 = fmul contract float %47, %50\l  %52 = fmul contract float %46, %51\l  %53 = fadd contract float %50, %52\l  %54 = tail call float @llvm.minnum.f32(float %53, float 1.000000e+00)\l  %55 = tail call float @llvm.maxnum.f32(float %54, float 0.000000e+00)\l  store float %55, float addrspace(1)* %49, align 4, !tbaa !6\l  ret void\l}"];
	Node0x5709430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%56:\l56:                                               \l  %57 = phi float [ 0.000000e+00, %16 ], [ %98, %56 ]\l  %58 = phi i32 [ 0, %16 ], [ %99, %56 ]\l  %59 = phi i32 [ 0, %16 ], [ %100, %56 ]\l  %60 = zext i32 %58 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %5, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %63 = fadd contract float %57, %62\l  %64 = or i32 %58, 1\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %5, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %68 = fadd contract float %63, %67\l  %69 = or i32 %58, 2\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %5, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %73 = fadd contract float %68, %72\l  %74 = or i32 %58, 3\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %5, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %78 = fadd contract float %73, %77\l  %79 = or i32 %58, 4\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %5, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %83 = fadd contract float %78, %82\l  %84 = or i32 %58, 5\l  %85 = zext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %5, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %88 = fadd contract float %83, %87\l  %89 = or i32 %58, 6\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %5, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %93 = fadd contract float %88, %92\l  %94 = or i32 %58, 7\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %5, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !6,\l... !amdgpu.noclobber !5\l  %98 = fadd contract float %93, %97\l  %99 = add nuw nsw i32 %58, 8\l  %100 = add i32 %59, 8\l  %101 = icmp eq i32 %100, %17\l  br i1 %101, label %18, label %56, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5709430:s0 -> Node0x570ad30;
	Node0x5709430:s1 -> Node0x5709430;
}
