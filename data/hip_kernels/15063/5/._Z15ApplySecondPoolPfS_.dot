digraph "CFG for '_Z15ApplySecondPoolPfS_' function" {
	label="CFG for '_Z15ApplySecondPoolPfS_' function";

	Node0x4a462e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = add i32 %10, %3\l  %12 = mul nsw i32 %11, 292\l  %13 = mul nsw i32 %11, 73\l  br label %15\l}"];
	Node0x4a462e0 -> Node0x4a47280;
	Node0x4a483d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%14:\l14:                                               \l  ret void\l}"];
	Node0x4a47280 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%15:\l15:                                               \l  %16 = phi i32 [ 0, %2 ], [ %104, %61 ]\l  %17 = shl nuw nsw i32 %16, 1\l  %18 = add nsw i32 %17, %12\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds float, float addrspace(1)* %0, i64 %19\l  %21 = load float, float addrspace(1)* %20, align 4, !tbaa !7\l  %22 = or i32 %18, 1\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds float, float addrspace(1)* %0, i64 %23\l  %25 = load float, float addrspace(1)* %24, align 4, !tbaa !7\l  %26 = tail call float @llvm.maxnum.f32(float %21, float %25)\l  %27 = add nsw i32 %18, 146\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !7\l  %31 = tail call float @llvm.maxnum.f32(float %26, float %30)\l  %32 = add nsw i32 %18, 147\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = tail call float @llvm.maxnum.f32(float %31, float %35)\l  %37 = add nsw i32 %16, %13\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %38\l  %40 = fmul contract float %36, 2.000000e+00\l  %41 = fadd contract float %40, -1.000000e+00\l  %42 = fneg contract float %41\l  %43 = fmul float %41, 0xBFF7154760000000\l  %44 = tail call float @llvm.rint.f32(float %43)\l  %45 = fcmp olt float %41, 0xC0562E4300000000\l  %46 = fcmp ogt float %41, 0x4059D1DA00000000\l  %47 = fneg float %43\l  %48 = tail call float @llvm.fma.f32(float %42, float 0x3FF7154760000000,\l... float %47)\l  %49 = tail call float @llvm.fma.f32(float %42, float 0x3E54AE0BE0000000,\l... float %48)\l  %50 = fsub float %43, %44\l  %51 = fadd float %49, %50\l  %52 = tail call float @llvm.exp2.f32(float %51)\l  %53 = fptosi float %44 to i32\l  %54 = tail call float @llvm.amdgcn.ldexp.f32(float %52, i32 %53)\l  %55 = fadd contract float %54, 1.000000e+00\l  %56 = fdiv contract float 1.000000e+00, %55\l  %57 = select i1 %46, float 1.000000e+00, float %56\l  %58 = select i1 %45, float 0.000000e+00, float %57\l  store float %58, float addrspace(1)* %39, align 4, !tbaa !7\l  %59 = or i32 %16, 1\l  %60 = icmp eq i32 %59, 73\l  br i1 %60, label %14, label %61, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4a47280:s0 -> Node0x4a483d0;
	Node0x4a47280:s1 -> Node0x4a48510;
	Node0x4a48510 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%61:\l61:                                               \l  %62 = shl nuw nsw i32 %59, 1\l  %63 = add nsw i32 %62, %12\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7\l  %67 = or i32 %63, 1\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %0, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7\l  %71 = tail call float @llvm.maxnum.f32(float %66, float %70)\l  %72 = add nsw i32 %63, 146\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7\l  %76 = tail call float @llvm.maxnum.f32(float %71, float %75)\l  %77 = add nsw i32 %63, 147\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = tail call float @llvm.maxnum.f32(float %76, float %80)\l  %82 = add nsw i32 %59, %13\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = fmul contract float %81, 2.000000e+00\l  %86 = fadd contract float %85, -1.000000e+00\l  %87 = fneg contract float %86\l  %88 = fmul float %86, 0xBFF7154760000000\l  %89 = tail call float @llvm.rint.f32(float %88)\l  %90 = fcmp olt float %86, 0xC0562E4300000000\l  %91 = fcmp ogt float %86, 0x4059D1DA00000000\l  %92 = fneg float %88\l  %93 = tail call float @llvm.fma.f32(float %87, float 0x3FF7154760000000,\l... float %92)\l  %94 = tail call float @llvm.fma.f32(float %87, float 0x3E54AE0BE0000000,\l... float %93)\l  %95 = fsub float %88, %89\l  %96 = fadd float %94, %95\l  %97 = tail call float @llvm.exp2.f32(float %96)\l  %98 = fptosi float %89 to i32\l  %99 = tail call float @llvm.amdgcn.ldexp.f32(float %97, i32 %98)\l  %100 = fadd contract float %99, 1.000000e+00\l  %101 = fdiv contract float 1.000000e+00, %100\l  %102 = select i1 %91, float 1.000000e+00, float %101\l  %103 = select i1 %90, float 0.000000e+00, float %102\l  store float %103, float addrspace(1)* %84, align 4, !tbaa !7\l  %104 = add nuw nsw i32 %16, 2\l  br label %15\l}"];
	Node0x4a48510 -> Node0x4a47280;
}
