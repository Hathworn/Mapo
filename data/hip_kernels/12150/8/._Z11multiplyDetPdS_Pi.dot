digraph "CFG for '_Z11multiplyDetPdS_Pi' function" {
	label="CFG for '_Z11multiplyDetPdS_Pi' function";

	Node0x5bb0be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%3:\l  %4 = load i32, i32 addrspace(1)* %2, align 4, !tbaa !4, !amdgpu.noclobber !8\l  %5 = icmp sgt i32 %4, 0\l  br i1 %5, label %6, label %91\l|{<s0>T|<s1>F}}"];
	Node0x5bb0be0:s0 -> Node0x5bb2050;
	Node0x5bb0be0:s1 -> Node0x5bb20e0;
	Node0x5bb2050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%6:\l6:                                                \l  %7 = load double, double addrspace(1)* %1, align 8, !tbaa !9\l  %8 = and i32 %4, 7\l  %9 = icmp ult i32 %4, 8\l  br i1 %9, label %74, label %10\l|{<s0>T|<s1>F}}"];
	Node0x5bb2050:s0 -> Node0x5bb1960;
	Node0x5bb2050:s1 -> Node0x5bb25e0;
	Node0x5bb25e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%10:\l10:                                               \l  %11 = and i32 %4, -8\l  br label %12\l}"];
	Node0x5bb25e0 -> Node0x5bb27e0;
	Node0x5bb27e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%12:\l12:                                               \l  %13 = phi double [ %7, %10 ], [ %70, %12 ]\l  %14 = phi i32 [ 0, %10 ], [ %71, %12 ]\l  %15 = phi i32 [ 0, %10 ], [ %72, %12 ]\l  %16 = mul nsw i32 %14, %4\l  %17 = add nsw i32 %16, %14\l  %18 = sext i32 %17 to i64\l  %19 = getelementptr inbounds double, double addrspace(1)* %0, i64 %18\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !9\l  %21 = fmul contract double %13, %20\l  store double %21, double addrspace(1)* %1, align 8, !tbaa !9\l  %22 = or i32 %14, 1\l  %23 = mul nsw i32 %22, %4\l  %24 = add nsw i32 %23, %22\l  %25 = sext i32 %24 to i64\l  %26 = getelementptr inbounds double, double addrspace(1)* %0, i64 %25\l  %27 = load double, double addrspace(1)* %26, align 8, !tbaa !9\l  %28 = fmul contract double %21, %27\l  store double %28, double addrspace(1)* %1, align 8, !tbaa !9\l  %29 = or i32 %14, 2\l  %30 = mul nsw i32 %29, %4\l  %31 = add nsw i32 %30, %29\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds double, double addrspace(1)* %0, i64 %32\l  %34 = load double, double addrspace(1)* %33, align 8, !tbaa !9\l  %35 = fmul contract double %28, %34\l  store double %35, double addrspace(1)* %1, align 8, !tbaa !9\l  %36 = or i32 %14, 3\l  %37 = mul nsw i32 %36, %4\l  %38 = add nsw i32 %37, %36\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %0, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !9\l  %42 = fmul contract double %35, %41\l  store double %42, double addrspace(1)* %1, align 8, !tbaa !9\l  %43 = or i32 %14, 4\l  %44 = mul nsw i32 %43, %4\l  %45 = add nsw i32 %44, %43\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %0, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !9\l  %49 = fmul contract double %42, %48\l  store double %49, double addrspace(1)* %1, align 8, !tbaa !9\l  %50 = or i32 %14, 5\l  %51 = mul nsw i32 %50, %4\l  %52 = add nsw i32 %51, %50\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds double, double addrspace(1)* %0, i64 %53\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !9\l  %56 = fmul contract double %49, %55\l  store double %56, double addrspace(1)* %1, align 8, !tbaa !9\l  %57 = or i32 %14, 6\l  %58 = mul nsw i32 %57, %4\l  %59 = add nsw i32 %58, %57\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %0, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !9\l  %63 = fmul contract double %56, %62\l  store double %63, double addrspace(1)* %1, align 8, !tbaa !9\l  %64 = or i32 %14, 7\l  %65 = mul nsw i32 %64, %4\l  %66 = add nsw i32 %65, %64\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %0, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !9\l  %70 = fmul contract double %63, %69\l  store double %70, double addrspace(1)* %1, align 8, !tbaa !9\l  %71 = add nuw nsw i32 %14, 8\l  %72 = add i32 %15, 8\l  %73 = icmp eq i32 %72, %11\l  br i1 %73, label %74, label %12, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5bb27e0:s0 -> Node0x5bb1960;
	Node0x5bb27e0:s1 -> Node0x5bb27e0;
	Node0x5bb1960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%74:\l74:                                               \l  %75 = phi double [ %7, %6 ], [ %70, %12 ]\l  %76 = phi i32 [ 0, %6 ], [ %71, %12 ]\l  %77 = icmp eq i32 %8, 0\l  br i1 %77, label %91, label %78\l|{<s0>T|<s1>F}}"];
	Node0x5bb1960:s0 -> Node0x5bb20e0;
	Node0x5bb1960:s1 -> Node0x5bb5d70;
	Node0x5bb5d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = phi double [ %87, %78 ], [ %75, %74 ]\l  %80 = phi i32 [ %88, %78 ], [ %76, %74 ]\l  %81 = phi i32 [ %89, %78 ], [ 0, %74 ]\l  %82 = mul nsw i32 %80, %4\l  %83 = add nsw i32 %82, %80\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds double, double addrspace(1)* %0, i64 %84\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !9\l  %87 = fmul contract double %79, %86\l  store double %87, double addrspace(1)* %1, align 8, !tbaa !9\l  %88 = add nuw nsw i32 %80, 1\l  %89 = add i32 %81, 1\l  %90 = icmp eq i32 %89, %8\l  br i1 %90, label %91, label %78, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5bb5d70:s0 -> Node0x5bb20e0;
	Node0x5bb5d70:s1 -> Node0x5bb5d70;
	Node0x5bb20e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%91:\l91:                                               \l  ret void\l}"];
}
