digraph "CFG for '_Z15addPermutationsPdS_Pi' function" {
	label="CFG for '_Z15addPermutationsPdS_Pi' function";

	Node0x5333b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%3:\l  %4 = load i32, i32 addrspace(1)* %2, align 4, !tbaa !4, !amdgpu.noclobber !8\l  %5 = mul nsw i32 %4, %4\l  store double 0.000000e+00, double addrspace(1)* %0, align 8, !tbaa !9\l  %6 = icmp ugt i32 %5, 1\l  br i1 %6, label %7, label %30\l|{<s0>T|<s1>F}}"];
	Node0x5333b90:s0 -> Node0x5335cb0;
	Node0x5333b90:s1 -> Node0x5335d40;
	Node0x5335cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%7:\l7:                                                \l  %8 = tail call i32 @llvm.smax.i32(i32 %5, i32 2)\l  %9 = add nsw i32 %8, -2\l  %10 = add nsw i32 %8, -1\l  %11 = and i32 %10, 7\l  %12 = icmp ult i32 %9, 7\l  br i1 %12, label %15, label %13\l|{<s0>T|<s1>F}}"];
	Node0x5335cb0:s0 -> Node0x5334910;
	Node0x5335cb0:s1 -> Node0x5336420;
	Node0x5336420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%13:\l13:                                               \l  %14 = and i32 %10, -8\l  br label %31\l}"];
	Node0x5336420 -> Node0x5336620;
	Node0x5334910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = phi double [ 0.000000e+00, %7 ], [ %73, %31 ]\l  %17 = phi i32 [ 0, %7 ], [ %74, %31 ]\l  %18 = icmp eq i32 %11, 0\l  br i1 %18, label %30, label %19\l|{<s0>T|<s1>F}}"];
	Node0x5334910:s0 -> Node0x5335d40;
	Node0x5334910:s1 -> Node0x5336a50;
	Node0x5336a50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%19:\l19:                                               \l  %20 = phi double [ %26, %19 ], [ %16, %15 ]\l  %21 = phi i32 [ %27, %19 ], [ %17, %15 ]\l  %22 = phi i32 [ %28, %19 ], [ 0, %15 ]\l  %23 = zext i32 %21 to i64\l  %24 = getelementptr inbounds double, double addrspace(1)* %1, i64 %23\l  %25 = load double, double addrspace(1)* %24, align 8, !tbaa !9\l  %26 = fadd contract double %25, %20\l  store double %26, double addrspace(1)* %0, align 8, !tbaa !9\l  %27 = add nuw nsw i32 %21, 1\l  %28 = add i32 %22, 1\l  %29 = icmp eq i32 %28, %11\l  br i1 %29, label %30, label %19, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5336a50:s0 -> Node0x5335d40;
	Node0x5336a50:s1 -> Node0x5336a50;
	Node0x5335d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%30:\l30:                                               \l  ret void\l}"];
	Node0x5336620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%31:\l31:                                               \l  %32 = phi double [ 0.000000e+00, %13 ], [ %73, %31 ]\l  %33 = phi i32 [ 0, %13 ], [ %74, %31 ]\l  %34 = phi i32 [ 0, %13 ], [ %75, %31 ]\l  %35 = zext i32 %33 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %1, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !9\l  %38 = fadd contract double %37, %32\l  store double %38, double addrspace(1)* %0, align 8, !tbaa !9\l  %39 = or i32 %33, 1\l  %40 = zext i32 %39 to i64\l  %41 = getelementptr inbounds double, double addrspace(1)* %1, i64 %40\l  %42 = load double, double addrspace(1)* %41, align 8, !tbaa !9\l  %43 = fadd contract double %42, %38\l  store double %43, double addrspace(1)* %0, align 8, !tbaa !9\l  %44 = or i32 %33, 2\l  %45 = zext i32 %44 to i64\l  %46 = getelementptr inbounds double, double addrspace(1)* %1, i64 %45\l  %47 = load double, double addrspace(1)* %46, align 8, !tbaa !9\l  %48 = fadd contract double %47, %43\l  store double %48, double addrspace(1)* %0, align 8, !tbaa !9\l  %49 = or i32 %33, 3\l  %50 = zext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %1, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !9\l  %53 = fadd contract double %52, %48\l  store double %53, double addrspace(1)* %0, align 8, !tbaa !9\l  %54 = or i32 %33, 4\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %1, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !9\l  %58 = fadd contract double %57, %53\l  store double %58, double addrspace(1)* %0, align 8, !tbaa !9\l  %59 = or i32 %33, 5\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %1, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !9\l  %63 = fadd contract double %62, %58\l  store double %63, double addrspace(1)* %0, align 8, !tbaa !9\l  %64 = or i32 %33, 6\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds double, double addrspace(1)* %1, i64 %65\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !9\l  %68 = fadd contract double %67, %63\l  store double %68, double addrspace(1)* %0, align 8, !tbaa !9\l  %69 = or i32 %33, 7\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %1, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !9\l  %73 = fadd contract double %72, %68\l  store double %73, double addrspace(1)* %0, align 8, !tbaa !9\l  %74 = add nuw nsw i32 %33, 8\l  %75 = add i32 %34, 8\l  %76 = icmp eq i32 %75, %14\l  br i1 %76, label %15, label %31, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5336620:s0 -> Node0x5334910;
	Node0x5336620:s1 -> Node0x5336620;
}
