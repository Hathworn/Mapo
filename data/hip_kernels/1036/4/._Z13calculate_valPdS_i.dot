digraph "CFG for '_Z13calculate_valPdS_i' function" {
	label="CFG for '_Z13calculate_valPdS_i' function";

	Node0x5fa0400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = mul i32 %4, %9\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %2\l  br i1 %16, label %17, label %24\l|{<s0>T|<s1>F}}"];
	Node0x5fa0400:s0 -> Node0x5fa1d50;
	Node0x5fa0400:s1 -> Node0x5fa2700;
	Node0x5fa1d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%17:\l17:                                               \l  %18 = udiv i32 %12, %9\l  %19 = mul i32 %18, %9\l  %20 = icmp ugt i32 %12, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %22, %9\l  br label %25\l}"];
	Node0x5fa1d50 -> Node0x5fa2b80;
	Node0x5fa2700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%24:\l24:                                               \l  ret void\l}"];
	Node0x5fa2b80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%25:\l25:                                               \l  %26 = phi i32 [ %15, %17 ], [ %334, %286 ]\l  %27 = add nsw i32 %26, -1\l  %28 = icmp sgt i32 %26, 0\l  %29 = select i1 %28, i32 0, i32 %2\l  %30 = add nsw i32 %27, %29\l  %31 = add nsw i32 %26, 1\l  %32 = icmp slt i32 %31, %2\l  %33 = select i1 %32, i32 0, i32 %2\l  %34 = sub nsw i32 %31, %33\l  %35 = sext i32 %30 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %0, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !16\l  %38 = sext i32 %26 to i64\l  %39 = getelementptr inbounds double, double addrspace(1)* %0, i64 %38\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !16\l  %41 = fmul contract double %37, %40\l  %42 = tail call double @llvm.fabs.f64(double %41)\l  %43 = fcmp olt double %42, 0x41D0000000000000\l  br i1 %43, label %44, label %63\l|{<s0>T|<s1>F}}"];
	Node0x5fa2b80:s0 -> Node0x5fa4bc0;
	Node0x5fa2b80:s1 -> Node0x5fa4c50;
	Node0x5fa4bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%44:\l44:                                               \l  %45 = fmul double %42, 0x3FE45F306DC9C883\l  %46 = tail call double @llvm.rint.f64(double %45)\l  %47 = tail call double @llvm.fma.f64(double %46, double 0xBFF921FB54442D18,\l... double %42)\l  %48 = tail call double @llvm.fma.f64(double %46, double 0xBC91A62633145C00,\l... double %47)\l  %49 = fmul double %46, 0x3C91A62633145C00\l  %50 = fneg double %49\l  %51 = tail call double @llvm.fma.f64(double %46, double 0x3C91A62633145C00,\l... double %50)\l  %52 = fsub double %47, %49\l  %53 = fsub double %47, %52\l  %54 = fsub double %53, %49\l  %55 = fsub double %52, %48\l  %56 = fadd double %55, %54\l  %57 = fsub double %56, %51\l  %58 = tail call double @llvm.fma.f64(double %46, double 0xB97B839A252049C0,\l... double %57)\l  %59 = fadd double %48, %58\l  %60 = fsub double %59, %48\l  %61 = fsub double %58, %60\l  %62 = fptosi double %46 to i32\l  br label %139\l}"];
	Node0x5fa4bc0 -> Node0x5fa5de0;
	Node0x5fa4c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%63:\l63:                                               \l  %64 = tail call double @llvm.amdgcn.trig.preop.f64(double %42, i32 0)\l  %65 = tail call double @llvm.amdgcn.trig.preop.f64(double %42, i32 1)\l  %66 = tail call double @llvm.amdgcn.trig.preop.f64(double %42, i32 2)\l  %67 = fcmp oge double %42, 0x7B00000000000000\l  %68 = tail call double @llvm.amdgcn.ldexp.f64(double %42, i32 -128)\l  %69 = select i1 %67, double %68, double %42\l  %70 = fmul double %66, %69\l  %71 = fneg double %70\l  %72 = tail call double @llvm.fma.f64(double %66, double %69, double %71)\l  %73 = fmul double %65, %69\l  %74 = fneg double %73\l  %75 = tail call double @llvm.fma.f64(double %65, double %69, double %74)\l  %76 = fmul double %64, %69\l  %77 = fneg double %76\l  %78 = tail call double @llvm.fma.f64(double %64, double %69, double %77)\l  %79 = fadd double %73, %78\l  %80 = fsub double %79, %73\l  %81 = fsub double %79, %80\l  %82 = fsub double %78, %80\l  %83 = fsub double %73, %81\l  %84 = fadd double %82, %83\l  %85 = fadd double %70, %75\l  %86 = fsub double %85, %70\l  %87 = fsub double %85, %86\l  %88 = fsub double %75, %86\l  %89 = fsub double %70, %87\l  %90 = fadd double %88, %89\l  %91 = fadd double %85, %84\l  %92 = fsub double %91, %85\l  %93 = fsub double %91, %92\l  %94 = fsub double %84, %92\l  %95 = fsub double %85, %93\l  %96 = fadd double %94, %95\l  %97 = fadd double %90, %96\l  %98 = fadd double %72, %97\l  %99 = fadd double %76, %79\l  %100 = fsub double %99, %76\l  %101 = fsub double %79, %100\l  %102 = fadd double %101, %91\l  %103 = fsub double %102, %101\l  %104 = fsub double %91, %103\l  %105 = fadd double %104, %98\l  %106 = tail call double @llvm.amdgcn.ldexp.f64(double %99, i32 -2)\l  %107 = tail call double @llvm.amdgcn.fract.f64(double %106)\l  %108 = tail call i1 @llvm.amdgcn.class.f64(double %106, i32 516)\l  %109 = select i1 %108, double 0.000000e+00, double %107\l  %110 = tail call double @llvm.amdgcn.ldexp.f64(double %109, i32 2)\l  %111 = fadd double %110, %102\l  %112 = fcmp olt double %111, 0.000000e+00\l  %113 = select i1 %112, double 4.000000e+00, double 0.000000e+00\l  %114 = fadd double %110, %113\l  %115 = fadd double %102, %114\l  %116 = fptosi double %115 to i32\l  %117 = sitofp i32 %116 to double\l  %118 = fsub double %114, %117\l  %119 = fadd double %102, %118\l  %120 = fsub double %119, %118\l  %121 = fsub double %102, %120\l  %122 = fadd double %105, %121\l  %123 = fcmp oge double %119, 5.000000e-01\l  %124 = zext i1 %123 to i32\l  %125 = add nsw i32 %124, %116\l  %126 = select i1 %123, double 1.000000e+00, double 0.000000e+00\l  %127 = fsub double %119, %126\l  %128 = fadd double %127, %122\l  %129 = fsub double %128, %127\l  %130 = fsub double %122, %129\l  %131 = fmul double %128, 0x3FF921FB54442D18\l  %132 = fneg double %131\l  %133 = tail call double @llvm.fma.f64(double %128, double\l... 0x3FF921FB54442D18, double %132)\l  %134 = tail call double @llvm.fma.f64(double %128, double\l... 0x3C91A62633145C07, double %133)\l  %135 = tail call double @llvm.fma.f64(double %130, double\l... 0x3FF921FB54442D18, double %134)\l  %136 = fadd double %131, %135\l  %137 = fsub double %136, %131\l  %138 = fsub double %135, %137\l  br label %139\l}"];
	Node0x5fa4c50 -> Node0x5fa5de0;
	Node0x5fa5de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%139:\l139:                                              \l  %140 = phi double [ %61, %44 ], [ %138, %63 ]\l  %141 = phi double [ %59, %44 ], [ %136, %63 ]\l  %142 = phi i32 [ %62, %44 ], [ %125, %63 ]\l  %143 = fmul double %141, %141\l  %144 = fmul double %143, 5.000000e-01\l  %145 = fsub double 1.000000e+00, %144\l  %146 = fsub double 1.000000e+00, %145\l  %147 = fsub double %146, %144\l  %148 = fmul double %143, %143\l  %149 = tail call double @llvm.fma.f64(double %143, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %150 = tail call double @llvm.fma.f64(double %143, double %149, double\l... 0xBE927E4FA17F65F6)\l  %151 = tail call double @llvm.fma.f64(double %143, double %150, double\l... 0x3EFA01A019F4EC90)\l  %152 = tail call double @llvm.fma.f64(double %143, double %151, double\l... 0xBF56C16C16C16967)\l  %153 = tail call double @llvm.fma.f64(double %143, double %152, double\l... 0x3FA5555555555555)\l  %154 = fneg double %140\l  %155 = tail call double @llvm.fma.f64(double %141, double %154, double %147)\l  %156 = tail call double @llvm.fma.f64(double %148, double %153, double %155)\l  %157 = fadd double %145, %156\l  %158 = tail call double @llvm.fma.f64(double %143, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %159 = tail call double @llvm.fma.f64(double %143, double %158, double\l... 0x3EC71DE3796CDE01)\l  %160 = tail call double @llvm.fma.f64(double %143, double %159, double\l... 0xBF2A01A019E83E5C)\l  %161 = tail call double @llvm.fma.f64(double %143, double %160, double\l... 0x3F81111111110BB3)\l  %162 = fneg double %143\l  %163 = fmul double %141, %162\l  %164 = fmul double %140, 5.000000e-01\l  %165 = tail call double @llvm.fma.f64(double %163, double %161, double %164)\l  %166 = tail call double @llvm.fma.f64(double %143, double %165, double %154)\l  %167 = tail call double @llvm.fma.f64(double %163, double\l... 0xBFC5555555555555, double %166)\l  %168 = fsub double %141, %167\l  %169 = and i32 %142, 1\l  %170 = icmp eq i32 %169, 0\l  %171 = select i1 %170, double %168, double %157\l  %172 = bitcast double %171 to \<2 x i32\>\l  %173 = shl i32 %142, 30\l  %174 = bitcast double %41 to \<2 x i32\>\l  %175 = extractelement \<2 x i32\> %174, i64 1\l  %176 = xor i32 %173, %175\l  %177 = and i32 %176, -2147483648\l  %178 = extractelement \<2 x i32\> %172, i64 1\l  %179 = xor i32 %178, %177\l  %180 = insertelement \<2 x i32\> %172, i32 %179, i64 1\l  %181 = tail call i1 @llvm.amdgcn.class.f64(double %42, i32 504)\l  %182 = select i1 %181, \<2 x i32\> %180, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %183 = bitcast \<2 x i32\> %182 to double\l  %184 = fmul contract double %183, %183\l  %185 = sext i32 %34 to i64\l  %186 = getelementptr inbounds double, double addrspace(1)* %0, i64 %185\l  %187 = load double, double addrspace(1)* %186, align 8, !tbaa !16\l  %188 = fmul contract double %40, %187\l  %189 = tail call double @llvm.fabs.f64(double %188)\l  %190 = fcmp olt double %189, 0x41D0000000000000\l  br i1 %190, label %191, label %210\l|{<s0>T|<s1>F}}"];
	Node0x5fa5de0:s0 -> Node0x5facf70;
	Node0x5fa5de0:s1 -> Node0x5fad000;
	Node0x5facf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%191:\l191:                                              \l  %192 = fmul double %189, 0x3FE45F306DC9C883\l  %193 = tail call double @llvm.rint.f64(double %192)\l  %194 = tail call double @llvm.fma.f64(double %193, double\l... 0xBFF921FB54442D18, double %189)\l  %195 = tail call double @llvm.fma.f64(double %193, double\l... 0xBC91A62633145C00, double %194)\l  %196 = fmul double %193, 0x3C91A62633145C00\l  %197 = fneg double %196\l  %198 = tail call double @llvm.fma.f64(double %193, double\l... 0x3C91A62633145C00, double %197)\l  %199 = fsub double %194, %196\l  %200 = fsub double %194, %199\l  %201 = fsub double %200, %196\l  %202 = fsub double %199, %195\l  %203 = fadd double %202, %201\l  %204 = fsub double %203, %198\l  %205 = tail call double @llvm.fma.f64(double %193, double\l... 0xB97B839A252049C0, double %204)\l  %206 = fadd double %195, %205\l  %207 = fsub double %206, %195\l  %208 = fsub double %205, %207\l  %209 = fptosi double %193 to i32\l  br label %286\l}"];
	Node0x5facf70 -> Node0x5fa2c90;
	Node0x5fad000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%210:\l210:                                              \l  %211 = tail call double @llvm.amdgcn.trig.preop.f64(double %189, i32 0)\l  %212 = tail call double @llvm.amdgcn.trig.preop.f64(double %189, i32 1)\l  %213 = tail call double @llvm.amdgcn.trig.preop.f64(double %189, i32 2)\l  %214 = fcmp oge double %189, 0x7B00000000000000\l  %215 = tail call double @llvm.amdgcn.ldexp.f64(double %189, i32 -128)\l  %216 = select i1 %214, double %215, double %189\l  %217 = fmul double %213, %216\l  %218 = fneg double %217\l  %219 = tail call double @llvm.fma.f64(double %213, double %216, double %218)\l  %220 = fmul double %212, %216\l  %221 = fneg double %220\l  %222 = tail call double @llvm.fma.f64(double %212, double %216, double %221)\l  %223 = fmul double %211, %216\l  %224 = fneg double %223\l  %225 = tail call double @llvm.fma.f64(double %211, double %216, double %224)\l  %226 = fadd double %220, %225\l  %227 = fsub double %226, %220\l  %228 = fsub double %226, %227\l  %229 = fsub double %225, %227\l  %230 = fsub double %220, %228\l  %231 = fadd double %229, %230\l  %232 = fadd double %217, %222\l  %233 = fsub double %232, %217\l  %234 = fsub double %232, %233\l  %235 = fsub double %222, %233\l  %236 = fsub double %217, %234\l  %237 = fadd double %235, %236\l  %238 = fadd double %232, %231\l  %239 = fsub double %238, %232\l  %240 = fsub double %238, %239\l  %241 = fsub double %231, %239\l  %242 = fsub double %232, %240\l  %243 = fadd double %241, %242\l  %244 = fadd double %237, %243\l  %245 = fadd double %219, %244\l  %246 = fadd double %223, %226\l  %247 = fsub double %246, %223\l  %248 = fsub double %226, %247\l  %249 = fadd double %248, %238\l  %250 = fsub double %249, %248\l  %251 = fsub double %238, %250\l  %252 = fadd double %251, %245\l  %253 = tail call double @llvm.amdgcn.ldexp.f64(double %246, i32 -2)\l  %254 = tail call double @llvm.amdgcn.fract.f64(double %253)\l  %255 = tail call i1 @llvm.amdgcn.class.f64(double %253, i32 516)\l  %256 = select i1 %255, double 0.000000e+00, double %254\l  %257 = tail call double @llvm.amdgcn.ldexp.f64(double %256, i32 2)\l  %258 = fadd double %257, %249\l  %259 = fcmp olt double %258, 0.000000e+00\l  %260 = select i1 %259, double 4.000000e+00, double 0.000000e+00\l  %261 = fadd double %257, %260\l  %262 = fadd double %249, %261\l  %263 = fptosi double %262 to i32\l  %264 = sitofp i32 %263 to double\l  %265 = fsub double %261, %264\l  %266 = fadd double %249, %265\l  %267 = fsub double %266, %265\l  %268 = fsub double %249, %267\l  %269 = fadd double %252, %268\l  %270 = fcmp oge double %266, 5.000000e-01\l  %271 = zext i1 %270 to i32\l  %272 = add nsw i32 %271, %263\l  %273 = select i1 %270, double 1.000000e+00, double 0.000000e+00\l  %274 = fsub double %266, %273\l  %275 = fadd double %274, %269\l  %276 = fsub double %275, %274\l  %277 = fsub double %269, %276\l  %278 = fmul double %275, 0x3FF921FB54442D18\l  %279 = fneg double %278\l  %280 = tail call double @llvm.fma.f64(double %275, double\l... 0x3FF921FB54442D18, double %279)\l  %281 = tail call double @llvm.fma.f64(double %275, double\l... 0x3C91A62633145C07, double %280)\l  %282 = tail call double @llvm.fma.f64(double %277, double\l... 0x3FF921FB54442D18, double %281)\l  %283 = fadd double %278, %282\l  %284 = fsub double %283, %278\l  %285 = fsub double %282, %284\l  br label %286\l}"];
	Node0x5fad000 -> Node0x5fa2c90;
	Node0x5fa2c90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%286:\l286:                                              \l  %287 = phi double [ %208, %191 ], [ %285, %210 ]\l  %288 = phi double [ %206, %191 ], [ %283, %210 ]\l  %289 = phi i32 [ %209, %191 ], [ %272, %210 ]\l  %290 = fmul double %288, %288\l  %291 = fmul double %290, 5.000000e-01\l  %292 = fsub double 1.000000e+00, %291\l  %293 = fsub double 1.000000e+00, %292\l  %294 = fsub double %293, %291\l  %295 = fmul double %290, %290\l  %296 = tail call double @llvm.fma.f64(double %290, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %297 = tail call double @llvm.fma.f64(double %290, double %296, double\l... 0xBE927E4FA17F65F6)\l  %298 = tail call double @llvm.fma.f64(double %290, double %297, double\l... 0x3EFA01A019F4EC90)\l  %299 = tail call double @llvm.fma.f64(double %290, double %298, double\l... 0xBF56C16C16C16967)\l  %300 = tail call double @llvm.fma.f64(double %290, double %299, double\l... 0x3FA5555555555555)\l  %301 = fneg double %287\l  %302 = tail call double @llvm.fma.f64(double %288, double %301, double %294)\l  %303 = tail call double @llvm.fma.f64(double %295, double %300, double %302)\l  %304 = fadd double %292, %303\l  %305 = tail call double @llvm.fma.f64(double %290, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %306 = tail call double @llvm.fma.f64(double %290, double %305, double\l... 0x3EC71DE3796CDE01)\l  %307 = tail call double @llvm.fma.f64(double %290, double %306, double\l... 0xBF2A01A019E83E5C)\l  %308 = tail call double @llvm.fma.f64(double %290, double %307, double\l... 0x3F81111111110BB3)\l  %309 = fneg double %290\l  %310 = fmul double %288, %309\l  %311 = fmul double %287, 5.000000e-01\l  %312 = tail call double @llvm.fma.f64(double %310, double %308, double %311)\l  %313 = tail call double @llvm.fma.f64(double %290, double %312, double %301)\l  %314 = tail call double @llvm.fma.f64(double %310, double\l... 0xBFC5555555555555, double %313)\l  %315 = fsub double %288, %314\l  %316 = and i32 %289, 1\l  %317 = icmp eq i32 %316, 0\l  %318 = select i1 %317, double %315, double %304\l  %319 = bitcast double %318 to \<2 x i32\>\l  %320 = shl i32 %289, 30\l  %321 = bitcast double %188 to \<2 x i32\>\l  %322 = extractelement \<2 x i32\> %321, i64 1\l  %323 = xor i32 %320, %322\l  %324 = and i32 %323, -2147483648\l  %325 = extractelement \<2 x i32\> %319, i64 1\l  %326 = xor i32 %325, %324\l  %327 = insertelement \<2 x i32\> %319, i32 %326, i64 1\l  %328 = tail call i1 @llvm.amdgcn.class.f64(double %189, i32 504)\l  %329 = select i1 %328, \<2 x i32\> %327, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %330 = bitcast \<2 x i32\> %329 to double\l  %331 = fmul contract double %330, %330\l  %332 = fmul contract double %184, %331\l  %333 = getelementptr inbounds double, double addrspace(1)* %1, i64 %38\l  store double %332, double addrspace(1)* %333, align 8, !tbaa !16\l  %334 = add i32 %23, %26\l  %335 = icmp slt i32 %334, %2\l  br i1 %335, label %25, label %24, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5fa2c90:s0 -> Node0x5fa2b80;
	Node0x5fa2c90:s1 -> Node0x5fa2700;
}
