digraph "CFG for '_Z12create_tuplePdPiS0_S_i' function" {
	label="CFG for '_Z12create_tuplePdPiS0_S_i' function";

	Node0x592eda0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = icmp slt i32 %6, %4\l  br i1 %7, label %8, label %157\l|{<s0>T|<s1>F}}"];
	Node0x592eda0:s0 -> Node0x592fb90;
	Node0x592eda0:s1 -> Node0x592fc20;
	Node0x592fb90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%8:\l8:                                                \l  %9 = zext i32 %6 to i64\l  %10 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %9\l  store i32 %6, i32 addrspace(1)* %10, align 4, !tbaa !5\l  %11 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %9\l  store i32 %6, i32 addrspace(1)* %11, align 4, !tbaa !5\l  %12 = getelementptr inbounds double, double addrspace(1)* %0, i64 %9\l  %13 = load double, double addrspace(1)* %12, align 8, !tbaa !9,\l... !amdgpu.noclobber !11\l  %14 = fmul contract double %13, 2.000000e+00\l  %15 = fptrunc double %14 to float\l  %16 = tail call float @llvm.fabs.f32(float %15)\l  %17 = fcmp olt float %16, 1.310720e+05\l  br i1 %17, label %18, label %25\l|{<s0>T|<s1>F}}"];
	Node0x592fb90:s0 -> Node0x592fda0;
	Node0x592fb90:s1 -> Node0x5931a90;
	Node0x592fda0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%18:\l18:                                               \l  %19 = fmul float %16, 0x3FE45F3060000000\l  %20 = tail call float @llvm.rint.f32(float %19)\l  %21 = tail call float @llvm.fma.f32(float %20, float 0xBFF921FB40000000,\l... float %16)\l  %22 = tail call float @llvm.fma.f32(float %20, float 0xBE74442D00000000,\l... float %21)\l  %23 = tail call float @llvm.fma.f32(float %20, float 0xBCF8469880000000,\l... float %22)\l  %24 = fptosi float %20 to i32\l  br label %131\l}"];
	Node0x592fda0 -> Node0x59324d0;
	Node0x5931a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%25:\l25:                                               \l  %26 = bitcast float %16 to i32\l  %27 = lshr i32 %26, 23\l  %28 = and i32 %26, 8388607\l  %29 = or i32 %28, 8388608\l  %30 = zext i32 %29 to i64\l  %31 = mul nuw nsw i64 %30, 4266746795\l  %32 = trunc i64 %31 to i32\l  %33 = lshr i64 %31, 32\l  %34 = mul nuw nsw i64 %30, 1011060801\l  %35 = add nuw nsw i64 %33, %34\l  %36 = trunc i64 %35 to i32\l  %37 = lshr i64 %35, 32\l  %38 = mul nuw nsw i64 %30, 3680671129\l  %39 = add nuw nsw i64 %37, %38\l  %40 = trunc i64 %39 to i32\l  %41 = lshr i64 %39, 32\l  %42 = mul nuw nsw i64 %30, 4113882560\l  %43 = add nuw nsw i64 %41, %42\l  %44 = trunc i64 %43 to i32\l  %45 = lshr i64 %43, 32\l  %46 = mul nuw nsw i64 %30, 4230436817\l  %47 = add nuw nsw i64 %45, %46\l  %48 = trunc i64 %47 to i32\l  %49 = lshr i64 %47, 32\l  %50 = mul nuw nsw i64 %30, 1313084713\l  %51 = add nuw nsw i64 %49, %50\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %30, 2734261102\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = trunc i64 %57 to i32\l  %59 = add nsw i32 %27, -120\l  %60 = icmp ugt i32 %59, 63\l  %61 = select i1 %60, i32 %52, i32 %58\l  %62 = select i1 %60, i32 %48, i32 %56\l  %63 = select i1 %60, i32 %44, i32 %52\l  %64 = select i1 %60, i32 %40, i32 %48\l  %65 = select i1 %60, i32 %36, i32 %44\l  %66 = select i1 %60, i32 %32, i32 %40\l  %67 = select i1 %60, i32 -64, i32 0\l  %68 = add nsw i32 %67, %59\l  %69 = icmp ugt i32 %68, 31\l  %70 = select i1 %69, i32 %62, i32 %61\l  %71 = select i1 %69, i32 %63, i32 %62\l  %72 = select i1 %69, i32 %64, i32 %63\l  %73 = select i1 %69, i32 %65, i32 %64\l  %74 = select i1 %69, i32 %66, i32 %65\l  %75 = select i1 %69, i32 -32, i32 0\l  %76 = add nsw i32 %75, %68\l  %77 = icmp ugt i32 %76, 31\l  %78 = select i1 %77, i32 %71, i32 %70\l  %79 = select i1 %77, i32 %72, i32 %71\l  %80 = select i1 %77, i32 %73, i32 %72\l  %81 = select i1 %77, i32 %74, i32 %73\l  %82 = select i1 %77, i32 -32, i32 0\l  %83 = add nsw i32 %82, %76\l  %84 = icmp eq i32 %83, 0\l  %85 = sub nsw i32 32, %83\l  %86 = tail call i32 @llvm.fshr.i32(i32 %78, i32 %79, i32 %85)\l  %87 = tail call i32 @llvm.fshr.i32(i32 %79, i32 %80, i32 %85)\l  %88 = tail call i32 @llvm.fshr.i32(i32 %80, i32 %81, i32 %85)\l  %89 = select i1 %84, i32 %78, i32 %86\l  %90 = select i1 %84, i32 %79, i32 %87\l  %91 = select i1 %84, i32 %80, i32 %88\l  %92 = lshr i32 %89, 29\l  %93 = tail call i32 @llvm.fshl.i32(i32 %89, i32 %90, i32 2)\l  %94 = tail call i32 @llvm.fshl.i32(i32 %90, i32 %91, i32 2)\l  %95 = tail call i32 @llvm.fshl.i32(i32 %91, i32 %81, i32 2)\l  %96 = and i32 %92, 1\l  %97 = sub nsw i32 0, %96\l  %98 = shl i32 %92, 31\l  %99 = xor i32 %93, %97\l  %100 = xor i32 %94, %97\l  %101 = xor i32 %95, %97\l  %102 = tail call i32 @llvm.ctlz.i32(i32 %99, i1 false), !range !12\l  %103 = sub nsw i32 31, %102\l  %104 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %103)\l  %105 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %103)\l  %106 = shl nuw nsw i32 %102, 23\l  %107 = sub nuw nsw i32 1056964608, %106\l  %108 = lshr i32 %104, 9\l  %109 = or i32 %108, %107\l  %110 = or i32 %109, %98\l  %111 = bitcast i32 %110 to float\l  %112 = tail call i32 @llvm.fshl.i32(i32 %104, i32 %105, i32 23)\l  %113 = tail call i32 @llvm.ctlz.i32(i32 %112, i1 false), !range !12\l  %114 = fmul float %111, 0x3FF921FB40000000\l  %115 = add nuw nsw i32 %113, %102\l  %116 = shl nuw nsw i32 %115, 23\l  %117 = sub nuw nsw i32 855638016, %116\l  %118 = sub nsw i32 31, %113\l  %119 = tail call i32 @llvm.fshr.i32(i32 %112, i32 %105, i32 %118)\l  %120 = lshr i32 %119, 9\l  %121 = or i32 %117, %120\l  %122 = or i32 %121, %98\l  %123 = bitcast i32 %122 to float\l  %124 = fneg float %114\l  %125 = tail call float @llvm.fma.f32(float %111, float 0x3FF921FB40000000,\l... float %124)\l  %126 = tail call float @llvm.fma.f32(float %111, float 0x3E74442D00000000,\l... float %125)\l  %127 = tail call float @llvm.fma.f32(float %123, float 0x3FF921FB40000000,\l... float %126)\l  %128 = fadd float %114, %127\l  %129 = lshr i32 %89, 30\l  %130 = add nuw nsw i32 %96, %129\l  br label %131\l}"];
	Node0x5931a90 -> Node0x59324d0;
	Node0x59324d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%131:\l131:                                              \l  %132 = phi float [ %23, %18 ], [ %128, %25 ]\l  %133 = phi i32 [ %24, %18 ], [ %130, %25 ]\l  %134 = fmul float %132, %132\l  %135 = tail call float @llvm.fmuladd.f32(float %134, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %136 = tail call float @llvm.fmuladd.f32(float %134, float %135, float\l... 0xBFC55553A0000000)\l  %137 = fmul float %134, %136\l  %138 = tail call float @llvm.fmuladd.f32(float %132, float %137, float %132)\l  %139 = tail call float @llvm.fmuladd.f32(float %134, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %140 = tail call float @llvm.fmuladd.f32(float %134, float %139, float\l... 0x3FA5557EE0000000)\l  %141 = tail call float @llvm.fmuladd.f32(float %134, float %140, float\l... 0xBFE0000080000000)\l  %142 = tail call float @llvm.fmuladd.f32(float %134, float %141, float\l... 1.000000e+00)\l  %143 = fneg float %138\l  %144 = and i32 %133, 1\l  %145 = icmp eq i32 %144, 0\l  %146 = select i1 %145, float %142, float %143\l  %147 = bitcast float %146 to i32\l  %148 = shl i32 %133, 30\l  %149 = and i32 %148, -2147483648\l  %150 = xor i32 %149, %147\l  %151 = bitcast i32 %150 to float\l  %152 = tail call i1 @llvm.amdgcn.class.f32(float %16, i32 504)\l  %153 = fmul contract float %151, 2.000000e+00\l  %154 = fpext float %153 to double\l  %155 = select i1 %152, double %154, double 0x7FF8000000000000\l  %156 = getelementptr inbounds double, double addrspace(1)* %3, i64 %9\l  store double %155, double addrspace(1)* %156, align 8, !tbaa !9\l  br label %162\l}"];
	Node0x59324d0 -> Node0x593a790;
	Node0x592fc20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%157:\l157:                                              \l  %158 = icmp eq i32 %6, %4\l  br i1 %158, label %159, label %162\l|{<s0>T|<s1>F}}"];
	Node0x592fc20:s0 -> Node0x593a920;
	Node0x592fc20:s1 -> Node0x593a790;
	Node0x593a920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%159:\l159:                                              \l  %160 = zext i32 %4 to i64\l  %161 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %160\l  store i32 %4, i32 addrspace(1)* %161, align 4, !tbaa !5\l  br label %162\l}"];
	Node0x593a920 -> Node0x593a790;
	Node0x593a790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%162:\l162:                                              \l  ret void\l}"];
}
