digraph "CFG for '_Z13calculate_graPdS_i' function" {
	label="CFG for '_Z13calculate_graPdS_i' function";

	Node0x6262180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = mul i32 %4, %9\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %15 = add i32 %13, %14\l  %16 = icmp slt i32 %15, %2\l  br i1 %16, label %17, label %24\l|{<s0>T|<s1>F}}"];
	Node0x6262180:s0 -> Node0x6263ad0;
	Node0x6262180:s1 -> Node0x6264480;
	Node0x6263ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%17:\l17:                                               \l  %18 = tail call i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr()\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %18, i64 24\l  %20 = bitcast i8 addrspace(4)* %19 to i64 addrspace(4)*\l  %21 = load i64, i64 addrspace(4)* %20, align 8, !tbaa !16\l  %22 = inttoptr i64 %21 to i8 addrspace(1)*\l  %23 = addrspacecast i8 addrspace(1)* %22 to i8*\l  br label %25\l}"];
	Node0x6263ad0 -> Node0x6264b60;
	Node0x6264480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%24:\l24:                                               \l  ret void\l}"];
	Node0x6264b60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%25:\l25:                                               \l  %26 = phi i32 [ %15, %17 ], [ %968, %931 ]\l  %27 = add nsw i32 %26, -1\l  %28 = icmp sgt i32 %26, 0\l  %29 = select i1 %28, i32 0, i32 %2\l  %30 = add nsw i32 %27, %29\l  %31 = add nsw i32 %26, 1\l  %32 = icmp slt i32 %31, %2\l  %33 = select i1 %32, i32 0, i32 %2\l  %34 = sub nsw i32 %31, %33\l  %35 = sext i32 %30 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %0, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !17\l  %38 = sext i32 %26 to i64\l  %39 = getelementptr inbounds double, double addrspace(1)* %0, i64 %38\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !17\l  %41 = fmul contract double %40, 2.000000e+00\l  %42 = fmul contract double %37, %41\l  %43 = tail call double @llvm.fabs.f64(double %42)\l  %44 = fcmp olt double %43, 0x41D0000000000000\l  br i1 %44, label %45, label %64\l|{<s0>T|<s1>F}}"];
	Node0x6264b60:s0 -> Node0x6266ca0;
	Node0x6264b60:s1 -> Node0x6266d30;
	Node0x6266ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%45:\l45:                                               \l  %46 = fmul double %43, 0x3FE45F306DC9C883\l  %47 = tail call double @llvm.rint.f64(double %46)\l  %48 = tail call double @llvm.fma.f64(double %47, double 0xBFF921FB54442D18,\l... double %43)\l  %49 = tail call double @llvm.fma.f64(double %47, double 0xBC91A62633145C00,\l... double %48)\l  %50 = fmul double %47, 0x3C91A62633145C00\l  %51 = fneg double %50\l  %52 = tail call double @llvm.fma.f64(double %47, double 0x3C91A62633145C00,\l... double %51)\l  %53 = fsub double %48, %50\l  %54 = fsub double %48, %53\l  %55 = fsub double %54, %50\l  %56 = fsub double %53, %49\l  %57 = fadd double %56, %55\l  %58 = fsub double %57, %52\l  %59 = tail call double @llvm.fma.f64(double %47, double 0xB97B839A252049C0,\l... double %58)\l  %60 = fadd double %49, %59\l  %61 = fsub double %60, %49\l  %62 = fsub double %59, %61\l  %63 = fptosi double %47 to i32\l  br label %140\l}"];
	Node0x6266ca0 -> Node0x6267ef0;
	Node0x6266d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%64:\l64:                                               \l  %65 = tail call double @llvm.amdgcn.trig.preop.f64(double %43, i32 0)\l  %66 = tail call double @llvm.amdgcn.trig.preop.f64(double %43, i32 1)\l  %67 = tail call double @llvm.amdgcn.trig.preop.f64(double %43, i32 2)\l  %68 = fcmp oge double %43, 0x7B00000000000000\l  %69 = tail call double @llvm.amdgcn.ldexp.f64(double %43, i32 -128)\l  %70 = select i1 %68, double %69, double %43\l  %71 = fmul double %67, %70\l  %72 = fneg double %71\l  %73 = tail call double @llvm.fma.f64(double %67, double %70, double %72)\l  %74 = fmul double %66, %70\l  %75 = fneg double %74\l  %76 = tail call double @llvm.fma.f64(double %66, double %70, double %75)\l  %77 = fmul double %65, %70\l  %78 = fneg double %77\l  %79 = tail call double @llvm.fma.f64(double %65, double %70, double %78)\l  %80 = fadd double %74, %79\l  %81 = fsub double %80, %74\l  %82 = fsub double %80, %81\l  %83 = fsub double %79, %81\l  %84 = fsub double %74, %82\l  %85 = fadd double %83, %84\l  %86 = fadd double %71, %76\l  %87 = fsub double %86, %71\l  %88 = fsub double %86, %87\l  %89 = fsub double %76, %87\l  %90 = fsub double %71, %88\l  %91 = fadd double %89, %90\l  %92 = fadd double %86, %85\l  %93 = fsub double %92, %86\l  %94 = fsub double %92, %93\l  %95 = fsub double %85, %93\l  %96 = fsub double %86, %94\l  %97 = fadd double %95, %96\l  %98 = fadd double %91, %97\l  %99 = fadd double %73, %98\l  %100 = fadd double %77, %80\l  %101 = fsub double %100, %77\l  %102 = fsub double %80, %101\l  %103 = fadd double %102, %92\l  %104 = fsub double %103, %102\l  %105 = fsub double %92, %104\l  %106 = fadd double %105, %99\l  %107 = tail call double @llvm.amdgcn.ldexp.f64(double %100, i32 -2)\l  %108 = tail call double @llvm.amdgcn.fract.f64(double %107)\l  %109 = tail call i1 @llvm.amdgcn.class.f64(double %107, i32 516)\l  %110 = select i1 %109, double 0.000000e+00, double %108\l  %111 = tail call double @llvm.amdgcn.ldexp.f64(double %110, i32 2)\l  %112 = fadd double %111, %103\l  %113 = fcmp olt double %112, 0.000000e+00\l  %114 = select i1 %113, double 4.000000e+00, double 0.000000e+00\l  %115 = fadd double %111, %114\l  %116 = fadd double %103, %115\l  %117 = fptosi double %116 to i32\l  %118 = sitofp i32 %117 to double\l  %119 = fsub double %115, %118\l  %120 = fadd double %103, %119\l  %121 = fsub double %120, %119\l  %122 = fsub double %103, %121\l  %123 = fadd double %106, %122\l  %124 = fcmp oge double %120, 5.000000e-01\l  %125 = zext i1 %124 to i32\l  %126 = add nsw i32 %125, %117\l  %127 = select i1 %124, double 1.000000e+00, double 0.000000e+00\l  %128 = fsub double %120, %127\l  %129 = fadd double %128, %123\l  %130 = fsub double %129, %128\l  %131 = fsub double %123, %130\l  %132 = fmul double %129, 0x3FF921FB54442D18\l  %133 = fneg double %132\l  %134 = tail call double @llvm.fma.f64(double %129, double\l... 0x3FF921FB54442D18, double %133)\l  %135 = tail call double @llvm.fma.f64(double %129, double\l... 0x3C91A62633145C07, double %134)\l  %136 = tail call double @llvm.fma.f64(double %131, double\l... 0x3FF921FB54442D18, double %135)\l  %137 = fadd double %132, %136\l  %138 = fsub double %137, %132\l  %139 = fsub double %136, %138\l  br label %140\l}"];
	Node0x6266d30 -> Node0x6267ef0;
	Node0x6267ef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%140:\l140:                                              \l  %141 = phi double [ %62, %45 ], [ %139, %64 ]\l  %142 = phi double [ %60, %45 ], [ %137, %64 ]\l  %143 = phi i32 [ %63, %45 ], [ %126, %64 ]\l  %144 = fmul double %142, %142\l  %145 = fmul double %144, 5.000000e-01\l  %146 = fsub double 1.000000e+00, %145\l  %147 = fsub double 1.000000e+00, %146\l  %148 = fsub double %147, %145\l  %149 = fmul double %144, %144\l  %150 = tail call double @llvm.fma.f64(double %144, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %151 = tail call double @llvm.fma.f64(double %144, double %150, double\l... 0xBE927E4FA17F65F6)\l  %152 = tail call double @llvm.fma.f64(double %144, double %151, double\l... 0x3EFA01A019F4EC90)\l  %153 = tail call double @llvm.fma.f64(double %144, double %152, double\l... 0xBF56C16C16C16967)\l  %154 = tail call double @llvm.fma.f64(double %144, double %153, double\l... 0x3FA5555555555555)\l  %155 = fneg double %141\l  %156 = tail call double @llvm.fma.f64(double %142, double %155, double %148)\l  %157 = tail call double @llvm.fma.f64(double %149, double %154, double %156)\l  %158 = fadd double %146, %157\l  %159 = tail call double @llvm.fma.f64(double %144, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %160 = tail call double @llvm.fma.f64(double %144, double %159, double\l... 0x3EC71DE3796CDE01)\l  %161 = tail call double @llvm.fma.f64(double %144, double %160, double\l... 0xBF2A01A019E83E5C)\l  %162 = tail call double @llvm.fma.f64(double %144, double %161, double\l... 0x3F81111111110BB3)\l  %163 = fneg double %144\l  %164 = fmul double %142, %163\l  %165 = fmul double %141, 5.000000e-01\l  %166 = tail call double @llvm.fma.f64(double %164, double %162, double %165)\l  %167 = tail call double @llvm.fma.f64(double %144, double %166, double %155)\l  %168 = tail call double @llvm.fma.f64(double %164, double\l... 0xBFC5555555555555, double %167)\l  %169 = fsub double %142, %168\l  %170 = and i32 %143, 1\l  %171 = icmp eq i32 %170, 0\l  %172 = select i1 %171, double %169, double %158\l  %173 = bitcast double %172 to \<2 x i32\>\l  %174 = shl i32 %143, 30\l  %175 = bitcast double %42 to \<2 x i32\>\l  %176 = extractelement \<2 x i32\> %175, i64 1\l  %177 = xor i32 %174, %176\l  %178 = and i32 %177, -2147483648\l  %179 = extractelement \<2 x i32\> %173, i64 1\l  %180 = xor i32 %179, %178\l  %181 = insertelement \<2 x i32\> %173, i32 %180, i64 1\l  %182 = tail call i1 @llvm.amdgcn.class.f64(double %43, i32 504)\l  %183 = select i1 %182, \<2 x i32\> %181, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %184 = bitcast \<2 x i32\> %183 to double\l  %185 = fmul contract double %37, %184\l  %186 = sext i32 %34 to i64\l  %187 = getelementptr inbounds double, double addrspace(1)* %0, i64 %186\l  %188 = load double, double addrspace(1)* %187, align 8, !tbaa !17\l  %189 = fmul contract double %41, %188\l  %190 = tail call double @llvm.fabs.f64(double %189)\l  %191 = fcmp olt double %190, 0x41D0000000000000\l  br i1 %191, label %192, label %211\l|{<s0>T|<s1>F}}"];
	Node0x6267ef0:s0 -> Node0x626efa0;
	Node0x6267ef0:s1 -> Node0x626f030;
	Node0x626efa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%192:\l192:                                              \l  %193 = fmul double %190, 0x3FE45F306DC9C883\l  %194 = tail call double @llvm.rint.f64(double %193)\l  %195 = tail call double @llvm.fma.f64(double %194, double\l... 0xBFF921FB54442D18, double %190)\l  %196 = tail call double @llvm.fma.f64(double %194, double\l... 0xBC91A62633145C00, double %195)\l  %197 = fmul double %194, 0x3C91A62633145C00\l  %198 = fneg double %197\l  %199 = tail call double @llvm.fma.f64(double %194, double\l... 0x3C91A62633145C00, double %198)\l  %200 = fsub double %195, %197\l  %201 = fsub double %195, %200\l  %202 = fsub double %201, %197\l  %203 = fsub double %200, %196\l  %204 = fadd double %203, %202\l  %205 = fsub double %204, %199\l  %206 = tail call double @llvm.fma.f64(double %194, double\l... 0xB97B839A252049C0, double %205)\l  %207 = fadd double %196, %206\l  %208 = fsub double %207, %196\l  %209 = fsub double %206, %208\l  %210 = fptosi double %194 to i32\l  br label %287\l}"];
	Node0x626efa0 -> Node0x626fe30;
	Node0x626f030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%211:\l211:                                              \l  %212 = tail call double @llvm.amdgcn.trig.preop.f64(double %190, i32 0)\l  %213 = tail call double @llvm.amdgcn.trig.preop.f64(double %190, i32 1)\l  %214 = tail call double @llvm.amdgcn.trig.preop.f64(double %190, i32 2)\l  %215 = fcmp oge double %190, 0x7B00000000000000\l  %216 = tail call double @llvm.amdgcn.ldexp.f64(double %190, i32 -128)\l  %217 = select i1 %215, double %216, double %190\l  %218 = fmul double %214, %217\l  %219 = fneg double %218\l  %220 = tail call double @llvm.fma.f64(double %214, double %217, double %219)\l  %221 = fmul double %213, %217\l  %222 = fneg double %221\l  %223 = tail call double @llvm.fma.f64(double %213, double %217, double %222)\l  %224 = fmul double %212, %217\l  %225 = fneg double %224\l  %226 = tail call double @llvm.fma.f64(double %212, double %217, double %225)\l  %227 = fadd double %221, %226\l  %228 = fsub double %227, %221\l  %229 = fsub double %227, %228\l  %230 = fsub double %226, %228\l  %231 = fsub double %221, %229\l  %232 = fadd double %230, %231\l  %233 = fadd double %218, %223\l  %234 = fsub double %233, %218\l  %235 = fsub double %233, %234\l  %236 = fsub double %223, %234\l  %237 = fsub double %218, %235\l  %238 = fadd double %236, %237\l  %239 = fadd double %233, %232\l  %240 = fsub double %239, %233\l  %241 = fsub double %239, %240\l  %242 = fsub double %232, %240\l  %243 = fsub double %233, %241\l  %244 = fadd double %242, %243\l  %245 = fadd double %238, %244\l  %246 = fadd double %220, %245\l  %247 = fadd double %224, %227\l  %248 = fsub double %247, %224\l  %249 = fsub double %227, %248\l  %250 = fadd double %249, %239\l  %251 = fsub double %250, %249\l  %252 = fsub double %239, %251\l  %253 = fadd double %252, %246\l  %254 = tail call double @llvm.amdgcn.ldexp.f64(double %247, i32 -2)\l  %255 = tail call double @llvm.amdgcn.fract.f64(double %254)\l  %256 = tail call i1 @llvm.amdgcn.class.f64(double %254, i32 516)\l  %257 = select i1 %256, double 0.000000e+00, double %255\l  %258 = tail call double @llvm.amdgcn.ldexp.f64(double %257, i32 2)\l  %259 = fadd double %258, %250\l  %260 = fcmp olt double %259, 0.000000e+00\l  %261 = select i1 %260, double 4.000000e+00, double 0.000000e+00\l  %262 = fadd double %258, %261\l  %263 = fadd double %250, %262\l  %264 = fptosi double %263 to i32\l  %265 = sitofp i32 %264 to double\l  %266 = fsub double %262, %265\l  %267 = fadd double %250, %266\l  %268 = fsub double %267, %266\l  %269 = fsub double %250, %268\l  %270 = fadd double %253, %269\l  %271 = fcmp oge double %267, 5.000000e-01\l  %272 = zext i1 %271 to i32\l  %273 = add nsw i32 %272, %264\l  %274 = select i1 %271, double 1.000000e+00, double 0.000000e+00\l  %275 = fsub double %267, %274\l  %276 = fadd double %275, %270\l  %277 = fsub double %276, %275\l  %278 = fsub double %270, %277\l  %279 = fmul double %276, 0x3FF921FB54442D18\l  %280 = fneg double %279\l  %281 = tail call double @llvm.fma.f64(double %276, double\l... 0x3FF921FB54442D18, double %280)\l  %282 = tail call double @llvm.fma.f64(double %276, double\l... 0x3C91A62633145C07, double %281)\l  %283 = tail call double @llvm.fma.f64(double %278, double\l... 0x3FF921FB54442D18, double %282)\l  %284 = fadd double %279, %283\l  %285 = fsub double %284, %279\l  %286 = fsub double %283, %285\l  br label %287\l}"];
	Node0x626f030 -> Node0x626fe30;
	Node0x626fe30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%287:\l287:                                              \l  %288 = phi double [ %209, %192 ], [ %286, %211 ]\l  %289 = phi double [ %207, %192 ], [ %284, %211 ]\l  %290 = phi i32 [ %210, %192 ], [ %273, %211 ]\l  %291 = fmul double %289, %289\l  %292 = fmul double %291, 5.000000e-01\l  %293 = fsub double 1.000000e+00, %292\l  %294 = fsub double 1.000000e+00, %293\l  %295 = fsub double %294, %292\l  %296 = fmul double %291, %291\l  %297 = tail call double @llvm.fma.f64(double %291, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %298 = tail call double @llvm.fma.f64(double %291, double %297, double\l... 0xBE927E4FA17F65F6)\l  %299 = tail call double @llvm.fma.f64(double %291, double %298, double\l... 0x3EFA01A019F4EC90)\l  %300 = tail call double @llvm.fma.f64(double %291, double %299, double\l... 0xBF56C16C16C16967)\l  %301 = tail call double @llvm.fma.f64(double %291, double %300, double\l... 0x3FA5555555555555)\l  %302 = fneg double %288\l  %303 = tail call double @llvm.fma.f64(double %289, double %302, double %295)\l  %304 = tail call double @llvm.fma.f64(double %296, double %301, double %303)\l  %305 = fadd double %293, %304\l  %306 = tail call double @llvm.fma.f64(double %291, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %307 = tail call double @llvm.fma.f64(double %291, double %306, double\l... 0x3EC71DE3796CDE01)\l  %308 = tail call double @llvm.fma.f64(double %291, double %307, double\l... 0xBF2A01A019E83E5C)\l  %309 = tail call double @llvm.fma.f64(double %291, double %308, double\l... 0x3F81111111110BB3)\l  %310 = fneg double %291\l  %311 = fmul double %289, %310\l  %312 = fmul double %288, 5.000000e-01\l  %313 = tail call double @llvm.fma.f64(double %311, double %309, double %312)\l  %314 = tail call double @llvm.fma.f64(double %291, double %313, double %302)\l  %315 = tail call double @llvm.fma.f64(double %311, double\l... 0xBFC5555555555555, double %314)\l  %316 = fsub double %289, %315\l  %317 = and i32 %290, 1\l  %318 = icmp eq i32 %317, 0\l  %319 = select i1 %318, double %316, double %305\l  %320 = bitcast double %319 to \<2 x i32\>\l  %321 = shl i32 %290, 30\l  %322 = bitcast double %189 to \<2 x i32\>\l  %323 = extractelement \<2 x i32\> %322, i64 1\l  %324 = xor i32 %321, %323\l  %325 = and i32 %324, -2147483648\l  %326 = extractelement \<2 x i32\> %320, i64 1\l  %327 = xor i32 %326, %325\l  %328 = insertelement \<2 x i32\> %320, i32 %327, i64 1\l  %329 = tail call i1 @llvm.amdgcn.class.f64(double %190, i32 504)\l  %330 = select i1 %329, \<2 x i32\> %328, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %331 = bitcast \<2 x i32\> %330 to double\l  %332 = fmul contract double %188, %331\l  %333 = fadd contract double %185, %332\l  %334 = getelementptr inbounds double, double addrspace(1)* %1, i64 %38\l  store double %333, double addrspace(1)* %334, align 8, !tbaa !17\l  %335 = load double, double addrspace(1)* %39, align 8, !tbaa !17\l  %336 = fmul contract double %335, %335\l  %337 = load double, double addrspace(1)* %36, align 8, !tbaa !17\l  %338 = fmul contract double %335, 2.000000e+00\l  %339 = fmul contract double %338, %337\l  %340 = tail call double @llvm.fabs.f64(double %339)\l  %341 = fcmp olt double %340, 0x41D0000000000000\l  %342 = bitcast double %333 to i64\l  br i1 %341, label %343, label %362\l|{<s0>T|<s1>F}}"];
	Node0x626fe30:s0 -> Node0x6276250;
	Node0x626fe30:s1 -> Node0x62762a0;
	Node0x6276250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%343:\l343:                                              \l  %344 = fmul double %340, 0x3FE45F306DC9C883\l  %345 = tail call double @llvm.rint.f64(double %344)\l  %346 = tail call double @llvm.fma.f64(double %345, double\l... 0xBFF921FB54442D18, double %340)\l  %347 = tail call double @llvm.fma.f64(double %345, double\l... 0xBC91A62633145C00, double %346)\l  %348 = fmul double %345, 0x3C91A62633145C00\l  %349 = fneg double %348\l  %350 = tail call double @llvm.fma.f64(double %345, double\l... 0x3C91A62633145C00, double %349)\l  %351 = fsub double %346, %348\l  %352 = fsub double %346, %351\l  %353 = fsub double %352, %348\l  %354 = fsub double %351, %347\l  %355 = fadd double %354, %353\l  %356 = fsub double %355, %350\l  %357 = tail call double @llvm.fma.f64(double %345, double\l... 0xB97B839A252049C0, double %356)\l  %358 = fadd double %347, %357\l  %359 = fsub double %358, %347\l  %360 = fsub double %357, %359\l  %361 = fptosi double %345 to i32\l  br label %438\l}"];
	Node0x6276250 -> Node0x6277060;
	Node0x62762a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%362:\l362:                                              \l  %363 = tail call double @llvm.amdgcn.trig.preop.f64(double %340, i32 0)\l  %364 = tail call double @llvm.amdgcn.trig.preop.f64(double %340, i32 1)\l  %365 = tail call double @llvm.amdgcn.trig.preop.f64(double %340, i32 2)\l  %366 = fcmp oge double %340, 0x7B00000000000000\l  %367 = tail call double @llvm.amdgcn.ldexp.f64(double %340, i32 -128)\l  %368 = select i1 %366, double %367, double %340\l  %369 = fmul double %365, %368\l  %370 = fneg double %369\l  %371 = tail call double @llvm.fma.f64(double %365, double %368, double %370)\l  %372 = fmul double %364, %368\l  %373 = fneg double %372\l  %374 = tail call double @llvm.fma.f64(double %364, double %368, double %373)\l  %375 = fmul double %363, %368\l  %376 = fneg double %375\l  %377 = tail call double @llvm.fma.f64(double %363, double %368, double %376)\l  %378 = fadd double %372, %377\l  %379 = fsub double %378, %372\l  %380 = fsub double %378, %379\l  %381 = fsub double %377, %379\l  %382 = fsub double %372, %380\l  %383 = fadd double %381, %382\l  %384 = fadd double %369, %374\l  %385 = fsub double %384, %369\l  %386 = fsub double %384, %385\l  %387 = fsub double %374, %385\l  %388 = fsub double %369, %386\l  %389 = fadd double %387, %388\l  %390 = fadd double %384, %383\l  %391 = fsub double %390, %384\l  %392 = fsub double %390, %391\l  %393 = fsub double %383, %391\l  %394 = fsub double %384, %392\l  %395 = fadd double %393, %394\l  %396 = fadd double %389, %395\l  %397 = fadd double %371, %396\l  %398 = fadd double %375, %378\l  %399 = fsub double %398, %375\l  %400 = fsub double %378, %399\l  %401 = fadd double %400, %390\l  %402 = fsub double %401, %400\l  %403 = fsub double %390, %402\l  %404 = fadd double %403, %397\l  %405 = tail call double @llvm.amdgcn.ldexp.f64(double %398, i32 -2)\l  %406 = tail call double @llvm.amdgcn.fract.f64(double %405)\l  %407 = tail call i1 @llvm.amdgcn.class.f64(double %405, i32 516)\l  %408 = select i1 %407, double 0.000000e+00, double %406\l  %409 = tail call double @llvm.amdgcn.ldexp.f64(double %408, i32 2)\l  %410 = fadd double %409, %401\l  %411 = fcmp olt double %410, 0.000000e+00\l  %412 = select i1 %411, double 4.000000e+00, double 0.000000e+00\l  %413 = fadd double %409, %412\l  %414 = fadd double %401, %413\l  %415 = fptosi double %414 to i32\l  %416 = sitofp i32 %415 to double\l  %417 = fsub double %413, %416\l  %418 = fadd double %401, %417\l  %419 = fsub double %418, %417\l  %420 = fsub double %401, %419\l  %421 = fadd double %404, %420\l  %422 = fcmp oge double %418, 5.000000e-01\l  %423 = zext i1 %422 to i32\l  %424 = add nsw i32 %423, %415\l  %425 = select i1 %422, double 1.000000e+00, double 0.000000e+00\l  %426 = fsub double %418, %425\l  %427 = fadd double %426, %421\l  %428 = fsub double %427, %426\l  %429 = fsub double %421, %428\l  %430 = fmul double %427, 0x3FF921FB54442D18\l  %431 = fneg double %430\l  %432 = tail call double @llvm.fma.f64(double %427, double\l... 0x3FF921FB54442D18, double %431)\l  %433 = tail call double @llvm.fma.f64(double %427, double\l... 0x3C91A62633145C07, double %432)\l  %434 = tail call double @llvm.fma.f64(double %429, double\l... 0x3FF921FB54442D18, double %433)\l  %435 = fadd double %430, %434\l  %436 = fsub double %435, %430\l  %437 = fsub double %434, %436\l  br label %438\l}"];
	Node0x62762a0 -> Node0x6277060;
	Node0x6277060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%438:\l438:                                              \l  %439 = phi double [ %360, %343 ], [ %437, %362 ]\l  %440 = phi double [ %358, %343 ], [ %435, %362 ]\l  %441 = phi i32 [ %361, %343 ], [ %424, %362 ]\l  %442 = fmul double %440, %440\l  %443 = fmul double %442, 5.000000e-01\l  %444 = fsub double 1.000000e+00, %443\l  %445 = fsub double 1.000000e+00, %444\l  %446 = fsub double %445, %443\l  %447 = fmul double %442, %442\l  %448 = tail call double @llvm.fma.f64(double %442, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %449 = tail call double @llvm.fma.f64(double %442, double %448, double\l... 0xBE927E4FA17F65F6)\l  %450 = tail call double @llvm.fma.f64(double %442, double %449, double\l... 0x3EFA01A019F4EC90)\l  %451 = tail call double @llvm.fma.f64(double %442, double %450, double\l... 0xBF56C16C16C16967)\l  %452 = tail call double @llvm.fma.f64(double %442, double %451, double\l... 0x3FA5555555555555)\l  %453 = fneg double %439\l  %454 = tail call double @llvm.fma.f64(double %440, double %453, double %446)\l  %455 = tail call double @llvm.fma.f64(double %447, double %452, double %454)\l  %456 = fadd double %444, %455\l  %457 = tail call double @llvm.fma.f64(double %442, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %458 = tail call double @llvm.fma.f64(double %442, double %457, double\l... 0x3EC71DE3796CDE01)\l  %459 = tail call double @llvm.fma.f64(double %442, double %458, double\l... 0xBF2A01A019E83E5C)\l  %460 = tail call double @llvm.fma.f64(double %442, double %459, double\l... 0x3F81111111110BB3)\l  %461 = fneg double %442\l  %462 = fmul double %440, %461\l  %463 = fmul double %439, 5.000000e-01\l  %464 = tail call double @llvm.fma.f64(double %462, double %460, double %463)\l  %465 = tail call double @llvm.fma.f64(double %442, double %464, double %453)\l  %466 = tail call double @llvm.fma.f64(double %462, double\l... 0xBFC5555555555555, double %465)\l  %467 = fsub double %440, %466\l  %468 = and i32 %441, 1\l  %469 = icmp eq i32 %468, 0\l  %470 = select i1 %469, double %467, double %456\l  %471 = bitcast double %470 to \<2 x i32\>\l  %472 = shl i32 %441, 30\l  %473 = bitcast double %339 to \<2 x i32\>\l  %474 = extractelement \<2 x i32\> %473, i64 1\l  %475 = xor i32 %472, %474\l  %476 = and i32 %475, -2147483648\l  %477 = extractelement \<2 x i32\> %471, i64 1\l  %478 = xor i32 %477, %476\l  %479 = insertelement \<2 x i32\> %471, i32 %478, i64 1\l  %480 = tail call i1 @llvm.amdgcn.class.f64(double %340, i32 504)\l  %481 = select i1 %480, \<2 x i32\> %479, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %482 = bitcast \<2 x i32\> %481 to double\l  %483 = fmul contract double %337, %482\l  %484 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0,\l... i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %485 = extractelement \<2 x i64\> %484, i64 0\l  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds\l... ([23 x i8], [23 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null),\l... label %486, label %490\l|{<s0>T|<s1>F}}"];
	Node0x6277060:s0 -> Node0x627c700;
	Node0x6277060:s1 -> Node0x627d0f0;
	Node0x627c700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%486:\l486:                                              \l  %487 = and i64 %485, -225\l  %488 = or i64 %487, 32\l  %489 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %488, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0,\l... i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  br label %931\l}"];
	Node0x627c700 -> Node0x6264cb0;
	Node0x627d0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%490:\l490:                                              \l  %491 = and i64 %485, 2\l  %492 = and i64 %485, -3\l  %493 = insertelement \<2 x i64\> \<i64 poison, i64 0\>, i64 %492, i64 0\l  br label %494\l}"];
	Node0x627d0f0 -> Node0x627dec0;
	Node0x627dec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%494:\l494:                                              \l  %495 = phi i64 [ select (i1 icmp eq (i8* addrspacecast (i8 addrspace(4)*\l... getelementptr inbounds ([23 x i8], [23 x i8] addrspace(4)* @.str, i64 0, i64\l... 0) to i8*), i8* null), i64 0, i64 add (i64 ptrtoint (i8* addrspacecast (i8\l... addrspace(4)* getelementptr inbounds ([23 x i8], [23 x i8] addrspace(4)*\l... @.str, i64 0, i64 22) to i8*) to i64), i64 add (i64 sub (i64 0, i64 ptrtoint\l... ([23 x i8]* addrspacecast ([23 x i8] addrspace(4)* @.str to [23 x i8]*) to\l... i64)), i64 1))), %490 ], [ %928, %920 ]\l  %496 = phi i8 addrspace(4)* [ getelementptr inbounds ([23 x i8], [23 x i8]\l... addrspace(4)* @.str, i64 0, i64 0), %490 ], [ %929, %920 ]\l  %497 = phi \<2 x i64\> [ %493, %490 ], [ %927, %920 ]\l  %498 = icmp ugt i64 %495, 56\l  %499 = extractelement \<2 x i64\> %497, i64 0\l  %500 = or i64 %499, %491\l  %501 = insertelement \<2 x i64\> poison, i64 %500, i64 0\l  %502 = select i1 %498, \<2 x i64\> %497, \<2 x i64\> %501\l  %503 = tail call i64 @llvm.umin.i64(i64 %495, i64 56)\l  %504 = trunc i64 %503 to i32\l  %505 = extractelement \<2 x i64\> %502, i64 0\l  %506 = icmp ugt i32 %504, 7\l  br i1 %506, label %509, label %507\l|{<s0>T|<s1>F}}"];
	Node0x627dec0:s0 -> Node0x627ee00;
	Node0x627dec0:s1 -> Node0x627ee90;
	Node0x627ee90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%507:\l507:                                              \l  %508 = icmp eq i32 %504, 0\l  br i1 %508, label %562, label %549\l|{<s0>T|<s1>F}}"];
	Node0x627ee90:s0 -> Node0x627f060;
	Node0x627ee90:s1 -> Node0x627f0b0;
	Node0x627ee00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%509:\l509:                                              \l  %510 = load i8, i8 addrspace(4)* %496, align 1, !tbaa !21\l  %511 = zext i8 %510 to i64\l  %512 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 1\l  %513 = load i8, i8 addrspace(4)* %512, align 1, !tbaa !21\l  %514 = zext i8 %513 to i64\l  %515 = shl nuw nsw i64 %514, 8\l  %516 = or i64 %515, %511\l  %517 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 2\l  %518 = load i8, i8 addrspace(4)* %517, align 1, !tbaa !21\l  %519 = zext i8 %518 to i64\l  %520 = shl nuw nsw i64 %519, 16\l  %521 = or i64 %516, %520\l  %522 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 3\l  %523 = load i8, i8 addrspace(4)* %522, align 1, !tbaa !21\l  %524 = zext i8 %523 to i64\l  %525 = shl nuw nsw i64 %524, 24\l  %526 = or i64 %521, %525\l  %527 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 4\l  %528 = load i8, i8 addrspace(4)* %527, align 1, !tbaa !21\l  %529 = zext i8 %528 to i64\l  %530 = shl nuw nsw i64 %529, 32\l  %531 = or i64 %526, %530\l  %532 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 5\l  %533 = load i8, i8 addrspace(4)* %532, align 1, !tbaa !21\l  %534 = zext i8 %533 to i64\l  %535 = shl nuw nsw i64 %534, 40\l  %536 = or i64 %531, %535\l  %537 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 6\l  %538 = load i8, i8 addrspace(4)* %537, align 1, !tbaa !21\l  %539 = zext i8 %538 to i64\l  %540 = shl nuw nsw i64 %539, 48\l  %541 = or i64 %536, %540\l  %542 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 7\l  %543 = load i8, i8 addrspace(4)* %542, align 1, !tbaa !21\l  %544 = zext i8 %543 to i64\l  %545 = shl nuw i64 %544, 56\l  %546 = or i64 %541, %545\l  %547 = add nsw i32 %504, -8\l  %548 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 8\l  br label %562\l}"];
	Node0x627ee00 -> Node0x627f060;
	Node0x627f0b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%549:\l549:                                              \l  %550 = phi i32 [ %560, %549 ], [ 0, %507 ]\l  %551 = phi i64 [ %559, %549 ], [ 0, %507 ]\l  %552 = zext i32 %550 to i64\l  %553 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 %552\l  %554 = load i8, i8 addrspace(4)* %553, align 1, !tbaa !21\l  %555 = zext i8 %554 to i64\l  %556 = shl i32 %550, 3\l  %557 = zext i32 %556 to i64\l  %558 = shl nuw i64 %555, %557\l  %559 = or i64 %558, %551\l  %560 = add nuw nsw i32 %550, 1\l  %561 = icmp eq i32 %560, %504\l  br i1 %561, label %562, label %549, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x627f0b0:s0 -> Node0x627f060;
	Node0x627f0b0:s1 -> Node0x627f0b0;
	Node0x627f060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%562:\l562:                                              \l  %563 = phi i8 addrspace(4)* [ %548, %509 ], [ %496, %507 ], [ %496, %549 ]\l  %564 = phi i32 [ %547, %509 ], [ 0, %507 ], [ 0, %549 ]\l  %565 = phi i64 [ %546, %509 ], [ 0, %507 ], [ %559, %549 ]\l  %566 = icmp ugt i32 %564, 7\l  br i1 %566, label %569, label %567\l|{<s0>T|<s1>F}}"];
	Node0x627f060:s0 -> Node0x6282b70;
	Node0x627f060:s1 -> Node0x6282bc0;
	Node0x6282bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%567:\l567:                                              \l  %568 = icmp eq i32 %564, 0\l  br i1 %568, label %622, label %609\l|{<s0>T|<s1>F}}"];
	Node0x6282bc0:s0 -> Node0x6282d90;
	Node0x6282bc0:s1 -> Node0x6282de0;
	Node0x6282b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%569:\l569:                                              \l  %570 = load i8, i8 addrspace(4)* %563, align 1, !tbaa !21\l  %571 = zext i8 %570 to i64\l  %572 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 1\l  %573 = load i8, i8 addrspace(4)* %572, align 1, !tbaa !21\l  %574 = zext i8 %573 to i64\l  %575 = shl nuw nsw i64 %574, 8\l  %576 = or i64 %575, %571\l  %577 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 2\l  %578 = load i8, i8 addrspace(4)* %577, align 1, !tbaa !21\l  %579 = zext i8 %578 to i64\l  %580 = shl nuw nsw i64 %579, 16\l  %581 = or i64 %576, %580\l  %582 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 3\l  %583 = load i8, i8 addrspace(4)* %582, align 1, !tbaa !21\l  %584 = zext i8 %583 to i64\l  %585 = shl nuw nsw i64 %584, 24\l  %586 = or i64 %581, %585\l  %587 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 4\l  %588 = load i8, i8 addrspace(4)* %587, align 1, !tbaa !21\l  %589 = zext i8 %588 to i64\l  %590 = shl nuw nsw i64 %589, 32\l  %591 = or i64 %586, %590\l  %592 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 5\l  %593 = load i8, i8 addrspace(4)* %592, align 1, !tbaa !21\l  %594 = zext i8 %593 to i64\l  %595 = shl nuw nsw i64 %594, 40\l  %596 = or i64 %591, %595\l  %597 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 6\l  %598 = load i8, i8 addrspace(4)* %597, align 1, !tbaa !21\l  %599 = zext i8 %598 to i64\l  %600 = shl nuw nsw i64 %599, 48\l  %601 = or i64 %596, %600\l  %602 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 7\l  %603 = load i8, i8 addrspace(4)* %602, align 1, !tbaa !21\l  %604 = zext i8 %603 to i64\l  %605 = shl nuw i64 %604, 56\l  %606 = or i64 %601, %605\l  %607 = add nsw i32 %564, -8\l  %608 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 8\l  br label %622\l}"];
	Node0x6282b70 -> Node0x6282d90;
	Node0x6282de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%609:\l609:                                              \l  %610 = phi i32 [ %620, %609 ], [ 0, %567 ]\l  %611 = phi i64 [ %619, %609 ], [ 0, %567 ]\l  %612 = zext i32 %610 to i64\l  %613 = getelementptr inbounds i8, i8 addrspace(4)* %563, i64 %612\l  %614 = load i8, i8 addrspace(4)* %613, align 1, !tbaa !21\l  %615 = zext i8 %614 to i64\l  %616 = shl i32 %610, 3\l  %617 = zext i32 %616 to i64\l  %618 = shl nuw i64 %615, %617\l  %619 = or i64 %618, %611\l  %620 = add nuw nsw i32 %610, 1\l  %621 = icmp eq i32 %620, %564\l  br i1 %621, label %622, label %609\l|{<s0>T|<s1>F}}"];
	Node0x6282de0:s0 -> Node0x6282d90;
	Node0x6282de0:s1 -> Node0x6282de0;
	Node0x6282d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%622:\l622:                                              \l  %623 = phi i8 addrspace(4)* [ %608, %569 ], [ %563, %567 ], [ %563, %609 ]\l  %624 = phi i32 [ %607, %569 ], [ 0, %567 ], [ 0, %609 ]\l  %625 = phi i64 [ %606, %569 ], [ 0, %567 ], [ %619, %609 ]\l  %626 = icmp ugt i32 %624, 7\l  br i1 %626, label %629, label %627\l|{<s0>T|<s1>F}}"];
	Node0x6282d90:s0 -> Node0x6284e70;
	Node0x6282d90:s1 -> Node0x6284ec0;
	Node0x6284ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%627:\l627:                                              \l  %628 = icmp eq i32 %624, 0\l  br i1 %628, label %682, label %669\l|{<s0>T|<s1>F}}"];
	Node0x6284ec0:s0 -> Node0x6285050;
	Node0x6284ec0:s1 -> Node0x62850a0;
	Node0x6284e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%629:\l629:                                              \l  %630 = load i8, i8 addrspace(4)* %623, align 1, !tbaa !21\l  %631 = zext i8 %630 to i64\l  %632 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 1\l  %633 = load i8, i8 addrspace(4)* %632, align 1, !tbaa !21\l  %634 = zext i8 %633 to i64\l  %635 = shl nuw nsw i64 %634, 8\l  %636 = or i64 %635, %631\l  %637 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 2\l  %638 = load i8, i8 addrspace(4)* %637, align 1, !tbaa !21\l  %639 = zext i8 %638 to i64\l  %640 = shl nuw nsw i64 %639, 16\l  %641 = or i64 %636, %640\l  %642 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 3\l  %643 = load i8, i8 addrspace(4)* %642, align 1, !tbaa !21\l  %644 = zext i8 %643 to i64\l  %645 = shl nuw nsw i64 %644, 24\l  %646 = or i64 %641, %645\l  %647 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 4\l  %648 = load i8, i8 addrspace(4)* %647, align 1, !tbaa !21\l  %649 = zext i8 %648 to i64\l  %650 = shl nuw nsw i64 %649, 32\l  %651 = or i64 %646, %650\l  %652 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 5\l  %653 = load i8, i8 addrspace(4)* %652, align 1, !tbaa !21\l  %654 = zext i8 %653 to i64\l  %655 = shl nuw nsw i64 %654, 40\l  %656 = or i64 %651, %655\l  %657 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 6\l  %658 = load i8, i8 addrspace(4)* %657, align 1, !tbaa !21\l  %659 = zext i8 %658 to i64\l  %660 = shl nuw nsw i64 %659, 48\l  %661 = or i64 %656, %660\l  %662 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 7\l  %663 = load i8, i8 addrspace(4)* %662, align 1, !tbaa !21\l  %664 = zext i8 %663 to i64\l  %665 = shl nuw i64 %664, 56\l  %666 = or i64 %661, %665\l  %667 = add nsw i32 %624, -8\l  %668 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 8\l  br label %682\l}"];
	Node0x6284e70 -> Node0x6285050;
	Node0x62850a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%669:\l669:                                              \l  %670 = phi i32 [ %680, %669 ], [ 0, %627 ]\l  %671 = phi i64 [ %679, %669 ], [ 0, %627 ]\l  %672 = zext i32 %670 to i64\l  %673 = getelementptr inbounds i8, i8 addrspace(4)* %623, i64 %672\l  %674 = load i8, i8 addrspace(4)* %673, align 1, !tbaa !21\l  %675 = zext i8 %674 to i64\l  %676 = shl i32 %670, 3\l  %677 = zext i32 %676 to i64\l  %678 = shl nuw i64 %675, %677\l  %679 = or i64 %678, %671\l  %680 = add nuw nsw i32 %670, 1\l  %681 = icmp eq i32 %680, %624\l  br i1 %681, label %682, label %669\l|{<s0>T|<s1>F}}"];
	Node0x62850a0:s0 -> Node0x6285050;
	Node0x62850a0:s1 -> Node0x62850a0;
	Node0x6285050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%682:\l682:                                              \l  %683 = phi i8 addrspace(4)* [ %668, %629 ], [ %623, %627 ], [ %623, %669 ]\l  %684 = phi i32 [ %667, %629 ], [ 0, %627 ], [ 0, %669 ]\l  %685 = phi i64 [ %666, %629 ], [ 0, %627 ], [ %679, %669 ]\l  %686 = icmp ugt i32 %684, 7\l  br i1 %686, label %689, label %687\l|{<s0>T|<s1>F}}"];
	Node0x6285050:s0 -> Node0x62870c0;
	Node0x6285050:s1 -> Node0x6287110;
	Node0x6287110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%687:\l687:                                              \l  %688 = icmp eq i32 %684, 0\l  br i1 %688, label %742, label %729\l|{<s0>T|<s1>F}}"];
	Node0x6287110:s0 -> Node0x62872a0;
	Node0x6287110:s1 -> Node0x62872f0;
	Node0x62870c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%689:\l689:                                              \l  %690 = load i8, i8 addrspace(4)* %683, align 1, !tbaa !21\l  %691 = zext i8 %690 to i64\l  %692 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 1\l  %693 = load i8, i8 addrspace(4)* %692, align 1, !tbaa !21\l  %694 = zext i8 %693 to i64\l  %695 = shl nuw nsw i64 %694, 8\l  %696 = or i64 %695, %691\l  %697 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 2\l  %698 = load i8, i8 addrspace(4)* %697, align 1, !tbaa !21\l  %699 = zext i8 %698 to i64\l  %700 = shl nuw nsw i64 %699, 16\l  %701 = or i64 %696, %700\l  %702 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 3\l  %703 = load i8, i8 addrspace(4)* %702, align 1, !tbaa !21\l  %704 = zext i8 %703 to i64\l  %705 = shl nuw nsw i64 %704, 24\l  %706 = or i64 %701, %705\l  %707 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 4\l  %708 = load i8, i8 addrspace(4)* %707, align 1, !tbaa !21\l  %709 = zext i8 %708 to i64\l  %710 = shl nuw nsw i64 %709, 32\l  %711 = or i64 %706, %710\l  %712 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 5\l  %713 = load i8, i8 addrspace(4)* %712, align 1, !tbaa !21\l  %714 = zext i8 %713 to i64\l  %715 = shl nuw nsw i64 %714, 40\l  %716 = or i64 %711, %715\l  %717 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 6\l  %718 = load i8, i8 addrspace(4)* %717, align 1, !tbaa !21\l  %719 = zext i8 %718 to i64\l  %720 = shl nuw nsw i64 %719, 48\l  %721 = or i64 %716, %720\l  %722 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 7\l  %723 = load i8, i8 addrspace(4)* %722, align 1, !tbaa !21\l  %724 = zext i8 %723 to i64\l  %725 = shl nuw i64 %724, 56\l  %726 = or i64 %721, %725\l  %727 = add nsw i32 %684, -8\l  %728 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 8\l  br label %742\l}"];
	Node0x62870c0 -> Node0x62872a0;
	Node0x62872f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%729:\l729:                                              \l  %730 = phi i32 [ %740, %729 ], [ 0, %687 ]\l  %731 = phi i64 [ %739, %729 ], [ 0, %687 ]\l  %732 = zext i32 %730 to i64\l  %733 = getelementptr inbounds i8, i8 addrspace(4)* %683, i64 %732\l  %734 = load i8, i8 addrspace(4)* %733, align 1, !tbaa !21\l  %735 = zext i8 %734 to i64\l  %736 = shl i32 %730, 3\l  %737 = zext i32 %736 to i64\l  %738 = shl nuw i64 %735, %737\l  %739 = or i64 %738, %731\l  %740 = add nuw nsw i32 %730, 1\l  %741 = icmp eq i32 %740, %684\l  br i1 %741, label %742, label %729\l|{<s0>T|<s1>F}}"];
	Node0x62872f0:s0 -> Node0x62872a0;
	Node0x62872f0:s1 -> Node0x62872f0;
	Node0x62872a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%742:\l742:                                              \l  %743 = phi i8 addrspace(4)* [ %728, %689 ], [ %683, %687 ], [ %683, %729 ]\l  %744 = phi i32 [ %727, %689 ], [ 0, %687 ], [ 0, %729 ]\l  %745 = phi i64 [ %726, %689 ], [ 0, %687 ], [ %739, %729 ]\l  %746 = icmp ugt i32 %744, 7\l  br i1 %746, label %749, label %747\l|{<s0>T|<s1>F}}"];
	Node0x62872a0:s0 -> Node0x6289310;
	Node0x62872a0:s1 -> Node0x6289360;
	Node0x6289360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%747:\l747:                                              \l  %748 = icmp eq i32 %744, 0\l  br i1 %748, label %802, label %789\l|{<s0>T|<s1>F}}"];
	Node0x6289360:s0 -> Node0x62894f0;
	Node0x6289360:s1 -> Node0x6289540;
	Node0x6289310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%749:\l749:                                              \l  %750 = load i8, i8 addrspace(4)* %743, align 1, !tbaa !21\l  %751 = zext i8 %750 to i64\l  %752 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 1\l  %753 = load i8, i8 addrspace(4)* %752, align 1, !tbaa !21\l  %754 = zext i8 %753 to i64\l  %755 = shl nuw nsw i64 %754, 8\l  %756 = or i64 %755, %751\l  %757 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 2\l  %758 = load i8, i8 addrspace(4)* %757, align 1, !tbaa !21\l  %759 = zext i8 %758 to i64\l  %760 = shl nuw nsw i64 %759, 16\l  %761 = or i64 %756, %760\l  %762 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 3\l  %763 = load i8, i8 addrspace(4)* %762, align 1, !tbaa !21\l  %764 = zext i8 %763 to i64\l  %765 = shl nuw nsw i64 %764, 24\l  %766 = or i64 %761, %765\l  %767 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 4\l  %768 = load i8, i8 addrspace(4)* %767, align 1, !tbaa !21\l  %769 = zext i8 %768 to i64\l  %770 = shl nuw nsw i64 %769, 32\l  %771 = or i64 %766, %770\l  %772 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 5\l  %773 = load i8, i8 addrspace(4)* %772, align 1, !tbaa !21\l  %774 = zext i8 %773 to i64\l  %775 = shl nuw nsw i64 %774, 40\l  %776 = or i64 %771, %775\l  %777 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 6\l  %778 = load i8, i8 addrspace(4)* %777, align 1, !tbaa !21\l  %779 = zext i8 %778 to i64\l  %780 = shl nuw nsw i64 %779, 48\l  %781 = or i64 %776, %780\l  %782 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 7\l  %783 = load i8, i8 addrspace(4)* %782, align 1, !tbaa !21\l  %784 = zext i8 %783 to i64\l  %785 = shl nuw i64 %784, 56\l  %786 = or i64 %781, %785\l  %787 = add nsw i32 %744, -8\l  %788 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 8\l  br label %802\l}"];
	Node0x6289310 -> Node0x62894f0;
	Node0x6289540 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%789:\l789:                                              \l  %790 = phi i32 [ %800, %789 ], [ 0, %747 ]\l  %791 = phi i64 [ %799, %789 ], [ 0, %747 ]\l  %792 = zext i32 %790 to i64\l  %793 = getelementptr inbounds i8, i8 addrspace(4)* %743, i64 %792\l  %794 = load i8, i8 addrspace(4)* %793, align 1, !tbaa !21\l  %795 = zext i8 %794 to i64\l  %796 = shl i32 %790, 3\l  %797 = zext i32 %796 to i64\l  %798 = shl nuw i64 %795, %797\l  %799 = or i64 %798, %791\l  %800 = add nuw nsw i32 %790, 1\l  %801 = icmp eq i32 %800, %744\l  br i1 %801, label %802, label %789\l|{<s0>T|<s1>F}}"];
	Node0x6289540:s0 -> Node0x62894f0;
	Node0x6289540:s1 -> Node0x6289540;
	Node0x62894f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%802:\l802:                                              \l  %803 = phi i8 addrspace(4)* [ %788, %749 ], [ %743, %747 ], [ %743, %789 ]\l  %804 = phi i32 [ %787, %749 ], [ 0, %747 ], [ 0, %789 ]\l  %805 = phi i64 [ %786, %749 ], [ 0, %747 ], [ %799, %789 ]\l  %806 = icmp ugt i32 %804, 7\l  br i1 %806, label %809, label %807\l|{<s0>T|<s1>F}}"];
	Node0x62894f0:s0 -> Node0x628bf90;
	Node0x62894f0:s1 -> Node0x628bfe0;
	Node0x628bfe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%807:\l807:                                              \l  %808 = icmp eq i32 %804, 0\l  br i1 %808, label %862, label %849\l|{<s0>T|<s1>F}}"];
	Node0x628bfe0:s0 -> Node0x628c170;
	Node0x628bfe0:s1 -> Node0x628c1c0;
	Node0x628bf90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%809:\l809:                                              \l  %810 = load i8, i8 addrspace(4)* %803, align 1, !tbaa !21\l  %811 = zext i8 %810 to i64\l  %812 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 1\l  %813 = load i8, i8 addrspace(4)* %812, align 1, !tbaa !21\l  %814 = zext i8 %813 to i64\l  %815 = shl nuw nsw i64 %814, 8\l  %816 = or i64 %815, %811\l  %817 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 2\l  %818 = load i8, i8 addrspace(4)* %817, align 1, !tbaa !21\l  %819 = zext i8 %818 to i64\l  %820 = shl nuw nsw i64 %819, 16\l  %821 = or i64 %816, %820\l  %822 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 3\l  %823 = load i8, i8 addrspace(4)* %822, align 1, !tbaa !21\l  %824 = zext i8 %823 to i64\l  %825 = shl nuw nsw i64 %824, 24\l  %826 = or i64 %821, %825\l  %827 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 4\l  %828 = load i8, i8 addrspace(4)* %827, align 1, !tbaa !21\l  %829 = zext i8 %828 to i64\l  %830 = shl nuw nsw i64 %829, 32\l  %831 = or i64 %826, %830\l  %832 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 5\l  %833 = load i8, i8 addrspace(4)* %832, align 1, !tbaa !21\l  %834 = zext i8 %833 to i64\l  %835 = shl nuw nsw i64 %834, 40\l  %836 = or i64 %831, %835\l  %837 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 6\l  %838 = load i8, i8 addrspace(4)* %837, align 1, !tbaa !21\l  %839 = zext i8 %838 to i64\l  %840 = shl nuw nsw i64 %839, 48\l  %841 = or i64 %836, %840\l  %842 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 7\l  %843 = load i8, i8 addrspace(4)* %842, align 1, !tbaa !21\l  %844 = zext i8 %843 to i64\l  %845 = shl nuw i64 %844, 56\l  %846 = or i64 %841, %845\l  %847 = add nsw i32 %804, -8\l  %848 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 8\l  br label %862\l}"];
	Node0x628bf90 -> Node0x628c170;
	Node0x628c1c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%849:\l849:                                              \l  %850 = phi i32 [ %860, %849 ], [ 0, %807 ]\l  %851 = phi i64 [ %859, %849 ], [ 0, %807 ]\l  %852 = zext i32 %850 to i64\l  %853 = getelementptr inbounds i8, i8 addrspace(4)* %803, i64 %852\l  %854 = load i8, i8 addrspace(4)* %853, align 1, !tbaa !21\l  %855 = zext i8 %854 to i64\l  %856 = shl i32 %850, 3\l  %857 = zext i32 %856 to i64\l  %858 = shl nuw i64 %855, %857\l  %859 = or i64 %858, %851\l  %860 = add nuw nsw i32 %850, 1\l  %861 = icmp eq i32 %860, %804\l  br i1 %861, label %862, label %849\l|{<s0>T|<s1>F}}"];
	Node0x628c1c0:s0 -> Node0x628c170;
	Node0x628c1c0:s1 -> Node0x628c1c0;
	Node0x628c170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%862:\l862:                                              \l  %863 = phi i8 addrspace(4)* [ %848, %809 ], [ %803, %807 ], [ %803, %849 ]\l  %864 = phi i32 [ %847, %809 ], [ 0, %807 ], [ 0, %849 ]\l  %865 = phi i64 [ %846, %809 ], [ 0, %807 ], [ %859, %849 ]\l  %866 = icmp ugt i32 %864, 7\l  br i1 %866, label %869, label %867\l|{<s0>T|<s1>F}}"];
	Node0x628c170:s0 -> Node0x628e7f0;
	Node0x628c170:s1 -> Node0x628e840;
	Node0x628e840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%867:\l867:                                              \l  %868 = icmp eq i32 %864, 0\l  br i1 %868, label %920, label %907\l|{<s0>T|<s1>F}}"];
	Node0x628e840:s0 -> Node0x627e330;
	Node0x628e840:s1 -> Node0x628e9d0;
	Node0x628e7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%869:\l869:                                              \l  %870 = load i8, i8 addrspace(4)* %863, align 1, !tbaa !21\l  %871 = zext i8 %870 to i64\l  %872 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 1\l  %873 = load i8, i8 addrspace(4)* %872, align 1, !tbaa !21\l  %874 = zext i8 %873 to i64\l  %875 = shl nuw nsw i64 %874, 8\l  %876 = or i64 %875, %871\l  %877 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 2\l  %878 = load i8, i8 addrspace(4)* %877, align 1, !tbaa !21\l  %879 = zext i8 %878 to i64\l  %880 = shl nuw nsw i64 %879, 16\l  %881 = or i64 %876, %880\l  %882 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 3\l  %883 = load i8, i8 addrspace(4)* %882, align 1, !tbaa !21\l  %884 = zext i8 %883 to i64\l  %885 = shl nuw nsw i64 %884, 24\l  %886 = or i64 %881, %885\l  %887 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 4\l  %888 = load i8, i8 addrspace(4)* %887, align 1, !tbaa !21\l  %889 = zext i8 %888 to i64\l  %890 = shl nuw nsw i64 %889, 32\l  %891 = or i64 %886, %890\l  %892 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 5\l  %893 = load i8, i8 addrspace(4)* %892, align 1, !tbaa !21\l  %894 = zext i8 %893 to i64\l  %895 = shl nuw nsw i64 %894, 40\l  %896 = or i64 %891, %895\l  %897 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 6\l  %898 = load i8, i8 addrspace(4)* %897, align 1, !tbaa !21\l  %899 = zext i8 %898 to i64\l  %900 = shl nuw nsw i64 %899, 48\l  %901 = or i64 %896, %900\l  %902 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 7\l  %903 = load i8, i8 addrspace(4)* %902, align 1, !tbaa !21\l  %904 = zext i8 %903 to i64\l  %905 = shl nuw i64 %904, 56\l  %906 = or i64 %901, %905\l  br label %920\l}"];
	Node0x628e7f0 -> Node0x627e330;
	Node0x628e9d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%907:\l907:                                              \l  %908 = phi i32 [ %918, %907 ], [ 0, %867 ]\l  %909 = phi i64 [ %917, %907 ], [ 0, %867 ]\l  %910 = zext i32 %908 to i64\l  %911 = getelementptr inbounds i8, i8 addrspace(4)* %863, i64 %910\l  %912 = load i8, i8 addrspace(4)* %911, align 1, !tbaa !21\l  %913 = zext i8 %912 to i64\l  %914 = shl i32 %908, 3\l  %915 = zext i32 %914 to i64\l  %916 = shl nuw i64 %913, %915\l  %917 = or i64 %916, %909\l  %918 = add nuw nsw i32 %908, 1\l  %919 = icmp eq i32 %918, %864\l  br i1 %919, label %920, label %907\l|{<s0>T|<s1>F}}"];
	Node0x628e9d0:s0 -> Node0x627e330;
	Node0x628e9d0:s1 -> Node0x628e9d0;
	Node0x627e330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%920:\l920:                                              \l  %921 = phi i64 [ %906, %869 ], [ 0, %867 ], [ %917, %907 ]\l  %922 = shl nuw nsw i64 %503, 2\l  %923 = add nuw nsw i64 %922, 28\l  %924 = and i64 %923, 480\l  %925 = and i64 %505, -225\l  %926 = or i64 %925, %924\l  %927 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %926, i64 noundef %565, i64 noundef %625, i64 noundef %685, i64\l... noundef %745, i64 noundef %805, i64 noundef %865, i64 noundef %921) #10\l  %928 = sub i64 %495, %503\l  %929 = getelementptr inbounds i8, i8 addrspace(4)* %496, i64 %503\l  %930 = icmp eq i64 %928, 0\l  br i1 %930, label %931, label %494\l|{<s0>T|<s1>F}}"];
	Node0x627e330:s0 -> Node0x6264cb0;
	Node0x627e330:s1 -> Node0x627dec0;
	Node0x6264cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%931:\l931:                                              \l  %932 = phi \<2 x i64\> [ %489, %486 ], [ %927, %920 ]\l  %933 = extractelement \<2 x i64\> %932, i64 0\l  %934 = zext i32 %30 to i64\l  %935 = and i64 %933, -225\l  %936 = or i64 %935, 32\l  %937 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %936, i64 noundef %934, i64 noundef 0, i64 noundef 0, i64 noundef\l... 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %938 = extractelement \<2 x i64\> %937, i64 0\l  %939 = zext i32 %26 to i64\l  %940 = and i64 %938, -225\l  %941 = or i64 %940, 32\l  %942 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %941, i64 noundef %939, i64 noundef 0, i64 noundef 0, i64 noundef\l... 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %943 = extractelement \<2 x i64\> %942, i64 0\l  %944 = zext i32 %34 to i64\l  %945 = and i64 %943, -225\l  %946 = or i64 %945, 32\l  %947 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %946, i64 noundef %944, i64 noundef 0, i64 noundef 0, i64 noundef\l... 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %948 = extractelement \<2 x i64\> %947, i64 0\l  %949 = bitcast double %336 to i64\l  %950 = and i64 %948, -225\l  %951 = or i64 %950, 32\l  %952 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %951, i64 noundef %949, i64 noundef 0, i64 noundef 0, i64 noundef\l... 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %953 = extractelement \<2 x i64\> %952, i64 0\l  %954 = bitcast double %483 to i64\l  %955 = and i64 %953, -225\l  %956 = or i64 %955, 32\l  %957 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %956, i64 noundef %954, i64 noundef 0, i64 noundef 0, i64 noundef\l... 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %958 = extractelement \<2 x i64\> %957, i64 0\l  %959 = and i64 %958, -227\l  %960 = or i64 %959, 34\l  %961 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %960, i64 noundef %342, i64 noundef 0, i64 noundef 0, i64 noundef\l... 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %962 = udiv i32 %12, %9\l  %963 = mul i32 %962, %9\l  %964 = icmp ugt i32 %12, %963\l  %965 = zext i1 %964 to i32\l  %966 = add i32 %962, %965\l  %967 = mul i32 %966, %9\l  %968 = add i32 %967, %26\l  %969 = icmp slt i32 %968, %2\l  br i1 %969, label %25, label %24, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x6264cb0:s0 -> Node0x6264b60;
	Node0x6264cb0:s1 -> Node0x6264480;
}
