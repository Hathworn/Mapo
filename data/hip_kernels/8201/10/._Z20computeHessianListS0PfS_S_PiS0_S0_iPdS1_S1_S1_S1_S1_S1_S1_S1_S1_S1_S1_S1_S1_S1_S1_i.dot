digraph "CFG for '_Z20computeHessianListS0PfS_S_PiS0_S0_iPdS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_i' function" {
	label="CFG for '_Z20computeHessianListS0PfS_S_PiS0_S0_iPdS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_i' function";

	Node0x4b1d150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l  %25 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %26 = getelementptr i8, i8 addrspace(4)* %25, i64 4\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 4, !range !4, !invariant.load !5\l  %29 = zext i16 %28 to i32\l  %30 = getelementptr inbounds i8, i8 addrspace(4)* %25, i64 12\l  %31 = bitcast i8 addrspace(4)* %30 to i32 addrspace(4)*\l  %32 = load i32, i32 addrspace(4)* %31, align 4, !tbaa !6\l  %33 = udiv i32 %32, %29\l  %34 = mul i32 %33, %29\l  %35 = icmp ugt i32 %32, %34\l  %36 = zext i1 %35 to i32\l  %37 = add i32 %33, %36\l  %38 = mul i32 %37, %29\l  %39 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %40 = icmp slt i32 %39, 6\l  br i1 %40, label %41, label %144\l|{<s0>T|<s1>F}}"];
	Node0x4b1d150:s0 -> Node0x4b202c0;
	Node0x4b1d150:s1 -> Node0x4b20350;
	Node0x4b202c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%41:\l41:                                               \l  %42 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %43 = mul i32 %42, %29\l  %44 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %45 = add i32 %43, %44\l  %46 = mul nsw i32 %39, %6\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds double, double addrspace(1)* %19, i64 %47\l  %49 = mul nsw i32 %6, 6\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %20, i64 %50\l  %52 = getelementptr inbounds double, double addrspace(1)* %21, i64 %50\l  %53 = mul nsw i32 %39, %23\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %22, i64 %54\l  %56 = icmp slt i32 %45, %6\l  br i1 %56, label %57, label %144\l|{<s0>T|<s1>F}}"];
	Node0x4b202c0:s0 -> Node0x4b21140;
	Node0x4b202c0:s1 -> Node0x4b20350;
	Node0x4b21140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%57:\l57:                                               \l  %58 = phi i32 [ %86, %85 ], [ %45, %41 ]\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %59\l  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %65 = fpext float %64 to double\l  %66 = getelementptr inbounds float, float addrspace(1)* %1, i64 %62\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %68 = fpext float %67 to double\l  %69 = getelementptr inbounds float, float addrspace(1)* %2, i64 %62\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %71 = fpext float %70 to double\l  %72 = getelementptr inbounds double, double addrspace(1)* %48, i64 %59\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !22\l  %74 = getelementptr inbounds double, double addrspace(1)* %51, i64 %59\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !22\l  %76 = getelementptr inbounds double, double addrspace(1)* %52, i64 %59\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !22\l  %78 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %59\l  %79 = load i32, i32 addrspace(1)* %78, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %80 = add nsw i32 %58, 1\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %81\l  %83 = load i32, i32 addrspace(1)* %82, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %84 = icmp slt i32 %79, %83\l  br i1 %84, label %88, label %85\l|{<s0>T|<s1>F}}"];
	Node0x4b21140:s0 -> Node0x4b1fdc0;
	Node0x4b21140:s1 -> Node0x4b21280;
	Node0x4b21280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%85:\l85:                                               \l  %86 = add nsw i32 %58, %38\l  %87 = icmp slt i32 %86, %6\l  br i1 %87, label %57, label %144, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4b21280:s0 -> Node0x4b21140;
	Node0x4b21280:s1 -> Node0x4b20350;
	Node0x4b1fdc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%88:\l88:                                               \l  %89 = phi i32 [ %142, %88 ], [ %79, %57 ]\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %90\l  %92 = load i32, i32 addrspace(1)* %91, align 4, !tbaa !16, !amdgpu.noclobber\l... !5\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %7, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !22\l  %96 = fsub contract double %65, %95\l  %97 = getelementptr inbounds double, double addrspace(1)* %10, i64 %93\l  %98 = load double, double addrspace(1)* %97, align 8, !tbaa !22\l  %99 = fmul contract double %73, %98\l  %100 = getelementptr inbounds double, double addrspace(1)* %11, i64 %93\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !22\l  %102 = fmul contract double %75, %101\l  %103 = fadd contract double %99, %102\l  %104 = getelementptr inbounds double, double addrspace(1)* %12, i64 %93\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !22\l  %106 = fmul contract double %77, %105\l  %107 = fadd contract double %103, %106\l  %108 = fmul contract double %96, %107\l  %109 = getelementptr inbounds double, double addrspace(1)* %8, i64 %93\l  %110 = load double, double addrspace(1)* %109, align 8, !tbaa !22\l  %111 = fsub contract double %68, %110\l  %112 = getelementptr inbounds double, double addrspace(1)* %13, i64 %93\l  %113 = load double, double addrspace(1)* %112, align 8, !tbaa !22\l  %114 = fmul contract double %73, %113\l  %115 = getelementptr inbounds double, double addrspace(1)* %14, i64 %93\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !22\l  %117 = fmul contract double %75, %116\l  %118 = fadd contract double %114, %117\l  %119 = getelementptr inbounds double, double addrspace(1)* %15, i64 %93\l  %120 = load double, double addrspace(1)* %119, align 8, !tbaa !22\l  %121 = fmul contract double %77, %120\l  %122 = fadd contract double %118, %121\l  %123 = fmul contract double %111, %122\l  %124 = fadd contract double %108, %123\l  %125 = getelementptr inbounds double, double addrspace(1)* %9, i64 %93\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !22\l  %127 = fsub contract double %71, %126\l  %128 = getelementptr inbounds double, double addrspace(1)* %16, i64 %93\l  %129 = load double, double addrspace(1)* %128, align 8, !tbaa !22\l  %130 = fmul contract double %73, %129\l  %131 = getelementptr inbounds double, double addrspace(1)* %17, i64 %93\l  %132 = load double, double addrspace(1)* %131, align 8, !tbaa !22\l  %133 = fmul contract double %75, %132\l  %134 = fadd contract double %130, %133\l  %135 = getelementptr inbounds double, double addrspace(1)* %18, i64 %93\l  %136 = load double, double addrspace(1)* %135, align 8, !tbaa !22\l  %137 = fmul contract double %77, %136\l  %138 = fadd contract double %134, %137\l  %139 = fmul contract double %127, %138\l  %140 = fadd contract double %124, %139\l  %141 = getelementptr inbounds double, double addrspace(1)* %55, i64 %90\l  store double %140, double addrspace(1)* %141, align 8, !tbaa !22\l  %142 = add nsw i32 %89, 1\l  %143 = icmp slt i32 %142, %83\l  br i1 %143, label %88, label %85, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x4b1fdc0:s0 -> Node0x4b1fdc0;
	Node0x4b1fdc0:s1 -> Node0x4b21280;
	Node0x4b20350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%144:\l144:                                              \l  ret void\l}"];
}
