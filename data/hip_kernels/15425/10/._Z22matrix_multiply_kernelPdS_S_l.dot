digraph "CFG for '_Z22matrix_multiply_kernelPdS_S_l' function" {
	label="CFG for '_Z22matrix_multiply_kernelPdS_S_l' function";

	Node0x6117570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = add i32 %12, %5\l  %14 = zext i32 %13 to i64\l  %15 = icmp slt i64 %14, %3\l  br i1 %15, label %16, label %116\l|{<s0>T|<s1>F}}"];
	Node0x6117570:s0 -> Node0x6117600;
	Node0x6117570:s1 -> Node0x61195b0;
	Node0x6117600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%16:\l16:                                               \l  %17 = icmp sgt i64 %3, 0\l  br i1 %17, label %18, label %113\l|{<s0>T|<s1>F}}"];
	Node0x6117600:s0 -> Node0x6119800;
	Node0x6117600:s1 -> Node0x6119850;
	Node0x6119800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = mul nsw i64 %14, %3\l  %20 = and i64 %3, 7\l  %21 = icmp ult i64 %3, 8\l  br i1 %21, label %94, label %22\l|{<s0>T|<s1>F}}"];
	Node0x6119800:s0 -> Node0x6119ba0;
	Node0x6119800:s1 -> Node0x6119bf0;
	Node0x6119bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i64 %3, -8\l  br label %24\l}"];
	Node0x6119bf0 -> Node0x6119df0;
	Node0x6119df0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%24:\l24:                                               \l  %25 = phi i64 [ 0, %22 ], [ %91, %24 ]\l  %26 = phi double [ 0.000000e+00, %22 ], [ %90, %24 ]\l  %27 = phi i64 [ 0, %22 ], [ %92, %24 ]\l  %28 = add nsw i64 %25, %19\l  %29 = getelementptr inbounds double, double addrspace(1)* %0, i64 %28\l  %30 = load double, double addrspace(1)* %29, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %31 = getelementptr inbounds double, double addrspace(1)* %1, i64 %25\l  %32 = load double, double addrspace(1)* %31, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %33 = fmul contract double %30, %32\l  %34 = fadd contract double %26, %33\l  %35 = or i64 %25, 1\l  %36 = add nsw i64 %35, %19\l  %37 = getelementptr inbounds double, double addrspace(1)* %0, i64 %36\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %39 = getelementptr inbounds double, double addrspace(1)* %1, i64 %35\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %41 = fmul contract double %38, %40\l  %42 = fadd contract double %34, %41\l  %43 = or i64 %25, 2\l  %44 = add nsw i64 %43, %19\l  %45 = getelementptr inbounds double, double addrspace(1)* %0, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %47 = getelementptr inbounds double, double addrspace(1)* %1, i64 %43\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %49 = fmul contract double %46, %48\l  %50 = fadd contract double %42, %49\l  %51 = or i64 %25, 3\l  %52 = add nsw i64 %51, %19\l  %53 = getelementptr inbounds double, double addrspace(1)* %0, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %55 = getelementptr inbounds double, double addrspace(1)* %1, i64 %51\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %57 = fmul contract double %54, %56\l  %58 = fadd contract double %50, %57\l  %59 = or i64 %25, 4\l  %60 = add nsw i64 %59, %19\l  %61 = getelementptr inbounds double, double addrspace(1)* %0, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %63 = getelementptr inbounds double, double addrspace(1)* %1, i64 %59\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %65 = fmul contract double %62, %64\l  %66 = fadd contract double %58, %65\l  %67 = or i64 %25, 5\l  %68 = add nsw i64 %67, %19\l  %69 = getelementptr inbounds double, double addrspace(1)* %0, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %71 = getelementptr inbounds double, double addrspace(1)* %1, i64 %67\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %73 = fmul contract double %70, %72\l  %74 = fadd contract double %66, %73\l  %75 = or i64 %25, 6\l  %76 = add nsw i64 %75, %19\l  %77 = getelementptr inbounds double, double addrspace(1)* %0, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %79 = getelementptr inbounds double, double addrspace(1)* %1, i64 %75\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %81 = fmul contract double %78, %80\l  %82 = fadd contract double %74, %81\l  %83 = or i64 %25, 7\l  %84 = add nsw i64 %83, %19\l  %85 = getelementptr inbounds double, double addrspace(1)* %0, i64 %84\l  %86 = load double, double addrspace(1)* %85, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %87 = getelementptr inbounds double, double addrspace(1)* %1, i64 %83\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %89 = fmul contract double %86, %88\l  %90 = fadd contract double %82, %89\l  %91 = add nuw nsw i64 %25, 8\l  %92 = add nuw i64 %27, 8\l  %93 = icmp eq i64 %92, %23\l  br i1 %93, label %94, label %24, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x6119df0:s0 -> Node0x6119ba0;
	Node0x6119df0:s1 -> Node0x6119df0;
	Node0x6119ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%94:\l94:                                               \l  %95 = phi double [ undef, %18 ], [ %90, %24 ]\l  %96 = phi i64 [ 0, %18 ], [ %91, %24 ]\l  %97 = phi double [ 0.000000e+00, %18 ], [ %90, %24 ]\l  %98 = icmp eq i64 %20, 0\l  br i1 %98, label %113, label %99\l|{<s0>T|<s1>F}}"];
	Node0x6119ba0:s0 -> Node0x6119850;
	Node0x6119ba0:s1 -> Node0x611edf0;
	Node0x611edf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%99:\l99:                                               \l  %100 = phi i64 [ %110, %99 ], [ %96, %94 ]\l  %101 = phi double [ %109, %99 ], [ %97, %94 ]\l  %102 = phi i64 [ %111, %99 ], [ 0, %94 ]\l  %103 = add nsw i64 %100, %19\l  %104 = getelementptr inbounds double, double addrspace(1)* %0, i64 %103\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %106 = getelementptr inbounds double, double addrspace(1)* %1, i64 %100\l  %107 = load double, double addrspace(1)* %106, align 8, !tbaa !7,\l... !amdgpu.noclobber !6\l  %108 = fmul contract double %105, %107\l  %109 = fadd contract double %101, %108\l  %110 = add nuw nsw i64 %100, 1\l  %111 = add i64 %102, 1\l  %112 = icmp eq i64 %111, %20\l  br i1 %112, label %113, label %99, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x611edf0:s0 -> Node0x6119850;
	Node0x611edf0:s1 -> Node0x611edf0;
	Node0x6119850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%113:\l113:                                              \l  %114 = phi double [ 0.000000e+00, %16 ], [ %95, %94 ], [ %109, %99 ]\l  %115 = getelementptr inbounds double, double addrspace(1)* %2, i64 %14\l  store double %114, double addrspace(1)* %115, align 8, !tbaa !7\l  br label %116\l}"];
	Node0x6119850 -> Node0x61195b0;
	Node0x61195b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%116:\l116:                                              \l  ret void\l}"];
}
