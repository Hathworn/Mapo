digraph "CFG for '_Z11Kernel_gausPfS_S_iiiPifS0_S0_i' function" {
	label="CFG for '_Z11Kernel_gausPfS_S_iiiPifS0_S0_i' function";

	Node0x5280910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !6\l  %21 = mul i32 %12, %17\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %22\l  %24 = getelementptr i8, i8 addrspace(4)* %13, i64 6\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 2, !range !4, !invariant.load !5\l  %27 = zext i16 %26 to i32\l  %28 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 16\l  %29 = bitcast i8 addrspace(4)* %28 to i32 addrspace(4)*\l  %30 = load i32, i32 addrspace(4)* %29, align 8, !tbaa !16\l  %31 = icmp slt i32 %23, %3\l  br i1 %31, label %32, label %262\l|{<s0>T|<s1>F}}"];
	Node0x5280910:s0 -> Node0x5284880;
	Node0x5280910:s1 -> Node0x5284910;
	Node0x5284880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%32:\l32:                                               \l  %33 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %34 = mul i32 %33, %27\l  %35 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %36 = add i32 %34, %35\l  %37 = udiv i32 %20, %17\l  %38 = mul i32 %37, %17\l  %39 = icmp ugt i32 %20, %38\l  %40 = zext i1 %39 to i32\l  %41 = add i32 %37, %40\l  %42 = mul i32 %41, %17\l  br label %43\l}"];
	Node0x5284880 -> Node0x5285970;
	Node0x5285970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %23, %32 ], [ %260, %258 ]\l  %45 = phi i32 [ %36, %32 ], [ %259, %258 ]\l  %46 = icmp slt i32 %45, %5\l  br i1 %46, label %47, label %258\l|{<s0>T|<s1>F}}"];
	Node0x5285970:s0 -> Node0x5285d90;
	Node0x5285970:s1 -> Node0x5285aa0;
	Node0x5285d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%47:\l47:                                               \l  %48 = sext i32 %44 to i64\l  %49 = getelementptr inbounds i32, i32 addrspace(1)* %9, i64 %48\l  %50 = load i32, i32 addrspace(1)* %49, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %51 = icmp sgt i32 %50, 0\l  %52 = mul nsw i32 %44, %10\l  %53 = mul nsw i32 %44, %4\l  %54 = getelementptr inbounds float, float addrspace(1)* %2, i64 %48\l  %55 = udiv i32 %30, %27\l  %56 = mul i32 %55, %27\l  %57 = icmp ugt i32 %30, %56\l  %58 = zext i1 %57 to i32\l  %59 = add i32 %55, %58\l  %60 = mul i32 %59, %27\l  %61 = and i32 %50, 7\l  %62 = icmp ult i32 %50, 8\l  %63 = and i32 %50, -8\l  %64 = icmp eq i32 %61, 0\l  br label %65\l}"];
	Node0x5285d90 -> Node0x5284a50;
	Node0x5284a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%65:\l65:                                               \l  %66 = phi i32 [ %45, %47 ], [ %256, %223 ]\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %67\l  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  br i1 %51, label %70, label %223\l|{<s0>T|<s1>F}}"];
	Node0x5284a50:s0 -> Node0x52876a0;
	Node0x5284a50:s1 -> Node0x5284b80;
	Node0x52876a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%70:\l70:                                               \l  %71 = mul nsw i32 %69, %4\l  br i1 %62, label %198, label %72\l|{<s0>T|<s1>F}}"];
	Node0x52876a0:s0 -> Node0x5287870;
	Node0x52876a0:s1 -> Node0x52878c0;
	Node0x52878c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%72:\l72:                                               \l  %73 = phi float [ %194, %72 ], [ 0.000000e+00, %70 ]\l  %74 = phi i32 [ %195, %72 ], [ 0, %70 ]\l  %75 = phi i32 [ %196, %72 ], [ 0, %70 ]\l  %76 = add nsw i32 %74, %52\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %77\l  %79 = load i32, i32 addrspace(1)* %78, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %80 = add nsw i32 %79, %53\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !21\l  %84 = add nsw i32 %79, %71\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !21\l  %88 = fmul contract float %83, %87\l  %89 = fadd contract float %73, %88\l  %90 = or i32 %74, 1\l  %91 = add nsw i32 %90, %52\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %92\l  %94 = load i32, i32 addrspace(1)* %93, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %95 = add nsw i32 %94, %53\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !21\l  %99 = add nsw i32 %94, %71\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !21\l  %103 = fmul contract float %98, %102\l  %104 = fadd contract float %89, %103\l  %105 = or i32 %74, 2\l  %106 = add nsw i32 %105, %52\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %107\l  %109 = load i32, i32 addrspace(1)* %108, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %110 = add nsw i32 %109, %53\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !21\l  %114 = add nsw i32 %109, %71\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !21\l  %118 = fmul contract float %113, %117\l  %119 = fadd contract float %104, %118\l  %120 = or i32 %74, 3\l  %121 = add nsw i32 %120, %52\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %122\l  %124 = load i32, i32 addrspace(1)* %123, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %125 = add nsw i32 %124, %53\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !21\l  %129 = add nsw i32 %124, %71\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !21\l  %133 = fmul contract float %128, %132\l  %134 = fadd contract float %119, %133\l  %135 = or i32 %74, 4\l  %136 = add nsw i32 %135, %52\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %137\l  %139 = load i32, i32 addrspace(1)* %138, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %140 = add nsw i32 %139, %53\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !21\l  %144 = add nsw i32 %139, %71\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !21\l  %148 = fmul contract float %143, %147\l  %149 = fadd contract float %134, %148\l  %150 = or i32 %74, 5\l  %151 = add nsw i32 %150, %52\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %152\l  %154 = load i32, i32 addrspace(1)* %153, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %155 = add nsw i32 %154, %53\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !21\l  %159 = add nsw i32 %154, %71\l  %160 = sext i32 %159 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %0, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !21\l  %163 = fmul contract float %158, %162\l  %164 = fadd contract float %149, %163\l  %165 = or i32 %74, 6\l  %166 = add nsw i32 %165, %52\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %167\l  %169 = load i32, i32 addrspace(1)* %168, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %170 = add nsw i32 %169, %53\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %0, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !21\l  %174 = add nsw i32 %169, %71\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %0, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !21\l  %178 = fmul contract float %173, %177\l  %179 = fadd contract float %164, %178\l  %180 = or i32 %74, 7\l  %181 = add nsw i32 %180, %52\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %182\l  %184 = load i32, i32 addrspace(1)* %183, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %185 = add nsw i32 %184, %53\l  %186 = sext i32 %185 to i64\l  %187 = getelementptr inbounds float, float addrspace(1)* %0, i64 %186\l  %188 = load float, float addrspace(1)* %187, align 4, !tbaa !21\l  %189 = add nsw i32 %184, %71\l  %190 = sext i32 %189 to i64\l  %191 = getelementptr inbounds float, float addrspace(1)* %0, i64 %190\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !21\l  %193 = fmul contract float %188, %192\l  %194 = fadd contract float %179, %193\l  %195 = add nuw nsw i32 %74, 8\l  %196 = add i32 %75, 8\l  %197 = icmp eq i32 %196, %63\l  br i1 %197, label %198, label %72, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x52878c0:s0 -> Node0x5287870;
	Node0x52878c0:s1 -> Node0x52878c0;
	Node0x5287870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%198:\l198:                                              \l  %199 = phi float [ undef, %70 ], [ %194, %72 ]\l  %200 = phi float [ 0.000000e+00, %70 ], [ %194, %72 ]\l  %201 = phi i32 [ 0, %70 ], [ %195, %72 ]\l  br i1 %64, label %223, label %202\l|{<s0>T|<s1>F}}"];
	Node0x5287870:s0 -> Node0x5284b80;
	Node0x5287870:s1 -> Node0x528dda0;
	Node0x528dda0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%202:\l202:                                              \l  %203 = phi float [ %219, %202 ], [ %200, %198 ]\l  %204 = phi i32 [ %220, %202 ], [ %201, %198 ]\l  %205 = phi i32 [ %221, %202 ], [ 0, %198 ]\l  %206 = add nsw i32 %204, %52\l  %207 = sext i32 %206 to i64\l  %208 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %207\l  %209 = load i32, i32 addrspace(1)* %208, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %210 = add nsw i32 %209, %53\l  %211 = sext i32 %210 to i64\l  %212 = getelementptr inbounds float, float addrspace(1)* %0, i64 %211\l  %213 = load float, float addrspace(1)* %212, align 4, !tbaa !21\l  %214 = add nsw i32 %209, %71\l  %215 = sext i32 %214 to i64\l  %216 = getelementptr inbounds float, float addrspace(1)* %0, i64 %215\l  %217 = load float, float addrspace(1)* %216, align 4, !tbaa !21\l  %218 = fmul contract float %213, %217\l  %219 = fadd contract float %203, %218\l  %220 = add nuw nsw i32 %204, 1\l  %221 = add i32 %205, 1\l  %222 = icmp eq i32 %221, %61\l  br i1 %222, label %223, label %202, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x528dda0:s0 -> Node0x5284b80;
	Node0x528dda0:s1 -> Node0x528dda0;
	Node0x5284b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%223:\l223:                                              \l  %224 = phi float [ 0.000000e+00, %65 ], [ %199, %198 ], [ %219, %202 ]\l  %225 = fpext float %224 to double\l  %226 = fmul contract double %225, 2.000000e+00\l  %227 = load float, float addrspace(1)* %54, align 4, !tbaa !21\l  %228 = fpext float %227 to double\l  %229 = fsub contract double %228, %226\l  %230 = sext i32 %69 to i64\l  %231 = getelementptr inbounds float, float addrspace(1)* %2, i64 %230\l  %232 = load float, float addrspace(1)* %231, align 4, !tbaa !21\l  %233 = fpext float %232 to double\l  %234 = fadd contract double %229, %233\l  %235 = fptrunc double %234 to float\l  %236 = fneg contract float %235\l  %237 = fmul contract float %236, %7\l  %238 = fmul float %237, 0x3FF7154760000000\l  %239 = tail call float @llvm.rint.f32(float %238)\l  %240 = fcmp ogt float %237, 0x40562E4300000000\l  %241 = fcmp olt float %237, 0xC059D1DA00000000\l  %242 = fneg float %238\l  %243 = tail call float @llvm.fma.f32(float %237, float 0x3FF7154760000000,\l... float %242)\l  %244 = tail call float @llvm.fma.f32(float %237, float 0x3E54AE0BE0000000,\l... float %243)\l  %245 = fsub float %238, %239\l  %246 = fadd float %244, %245\l  %247 = tail call float @llvm.exp2.f32(float %246)\l  %248 = fptosi float %239 to i32\l  %249 = tail call float @llvm.amdgcn.ldexp.f32(float %247, i32 %248)\l  %250 = select i1 %241, float 0.000000e+00, float %249\l  %251 = select i1 %240, float 0x7FF0000000000000, float %250\l  %252 = mul nsw i32 %66, %3\l  %253 = add nsw i32 %252, %44\l  %254 = sext i32 %253 to i64\l  %255 = getelementptr inbounds float, float addrspace(1)* %1, i64 %254\l  store float %251, float addrspace(1)* %255, align 4, !tbaa !21\l  %256 = add i32 %60, %66\l  %257 = icmp slt i32 %256, %5\l  br i1 %257, label %65, label %258, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x5284b80:s0 -> Node0x5284a50;
	Node0x5284b80:s1 -> Node0x5285aa0;
	Node0x5285aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%258:\l258:                                              \l  %259 = phi i32 [ %45, %43 ], [ %256, %223 ]\l  %260 = add i32 %42, %44\l  %261 = icmp slt i32 %260, %3\l  br i1 %261, label %43, label %262, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x5285aa0:s0 -> Node0x5285970;
	Node0x5285aa0:s1 -> Node0x5284910;
	Node0x5284910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%262:\l262:                                              \l  ret void\l}"];
}
