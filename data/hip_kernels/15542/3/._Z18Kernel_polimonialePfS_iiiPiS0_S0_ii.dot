digraph "CFG for '_Z18Kernel_polimonialePfS_iiiPiS0_S0_ii' function" {
	label="CFG for '_Z18Kernel_polimonialePfS_iiiPiS0_S0_ii' function";

	Node0x62f4770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*\l  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !6\l  %20 = mul i32 %11, %16\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %22 = add i32 %20, %21\l  %23 = getelementptr i8, i8 addrspace(4)* %12, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 16\l  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*\l  %29 = load i32, i32 addrspace(4)* %28, align 8, !tbaa !16\l  %30 = icmp slt i32 %22, %2\l  br i1 %30, label %31, label %264\l|{<s0>T|<s1>F}}"];
	Node0x62f4770:s0 -> Node0x62f86c0;
	Node0x62f4770:s1 -> Node0x62f8750;
	Node0x62f86c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%31:\l31:                                               \l  %32 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %33 = mul i32 %32, %26\l  %34 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %35 = add i32 %33, %34\l  %36 = icmp sgt i32 %9, 0\l  %37 = udiv i32 %19, %16\l  %38 = mul i32 %37, %16\l  %39 = icmp ugt i32 %19, %38\l  %40 = zext i1 %39 to i32\l  %41 = add i32 %37, %40\l  %42 = mul i32 %41, %16\l  %43 = and i32 %9, 7\l  %44 = icmp ult i32 %9, 8\l  %45 = and i32 %9, -8\l  %46 = icmp eq i32 %43, 0\l  br label %47\l}"];
	Node0x62f86c0 -> Node0x62f9b40;
	Node0x62f9b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%47:\l47:                                               \l  %48 = phi i32 [ %22, %31 ], [ %262, %260 ]\l  %49 = phi i32 [ %35, %31 ], [ %261, %260 ]\l  %50 = icmp slt i32 %49, %4\l  br i1 %50, label %51, label %260\l|{<s0>T|<s1>F}}"];
	Node0x62f9b40:s0 -> Node0x62f9f60;
	Node0x62f9b40:s1 -> Node0x62f9c70;
	Node0x62f9f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%51:\l51:                                               \l  %52 = sext i32 %48 to i64\l  %53 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %52\l  %54 = load i32, i32 addrspace(1)* %53, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %55 = icmp sgt i32 %54, 0\l  %56 = mul nsw i32 %48, %8\l  %57 = mul nsw i32 %48, %3\l  %58 = udiv i32 %29, %26\l  %59 = mul i32 %58, %26\l  %60 = icmp ugt i32 %29, %59\l  %61 = zext i1 %60 to i32\l  %62 = add i32 %58, %61\l  %63 = mul i32 %62, %26\l  %64 = and i32 %54, 7\l  %65 = icmp ult i32 %54, 8\l  %66 = and i32 %54, -8\l  %67 = icmp eq i32 %64, 0\l  br label %68\l}"];
	Node0x62f9f60 -> Node0x62f8be0;
	Node0x62f8be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%68:\l68:                                               \l  %69 = phi i32 [ %49, %51 ], [ %258, %252 ]\l  br i1 %55, label %70, label %226\l|{<s0>T|<s1>F}}"];
	Node0x62f8be0:s0 -> Node0x62faf50;
	Node0x62f8be0:s1 -> Node0x62fafe0;
	Node0x62faf50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%70:\l70:                                               \l  %71 = sext i32 %69 to i64\l  %72 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %71\l  %73 = load i32, i32 addrspace(1)* %72, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %74 = mul nsw i32 %73, %3\l  br i1 %65, label %201, label %75\l|{<s0>T|<s1>F}}"];
	Node0x62faf50:s0 -> Node0x62fb940;
	Node0x62faf50:s1 -> Node0x62fb9d0;
	Node0x62fb9d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%75:\l75:                                               \l  %76 = phi float [ %197, %75 ], [ 0.000000e+00, %70 ]\l  %77 = phi i32 [ %198, %75 ], [ 0, %70 ]\l  %78 = phi i32 [ %199, %75 ], [ 0, %70 ]\l  %79 = add nsw i32 %77, %56\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %80\l  %82 = load i32, i32 addrspace(1)* %81, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %83 = add nsw i32 %82, %57\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !21\l  %87 = add nsw i32 %82, %74\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !21\l  %91 = fmul contract float %86, %90\l  %92 = fadd contract float %76, %91\l  %93 = or i32 %77, 1\l  %94 = add nsw i32 %93, %56\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %95\l  %97 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %98 = add nsw i32 %97, %57\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !21\l  %102 = add nsw i32 %97, %74\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !21\l  %106 = fmul contract float %101, %105\l  %107 = fadd contract float %92, %106\l  %108 = or i32 %77, 2\l  %109 = add nsw i32 %108, %56\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %110\l  %112 = load i32, i32 addrspace(1)* %111, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %113 = add nsw i32 %112, %57\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !21\l  %117 = add nsw i32 %112, %74\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !21\l  %121 = fmul contract float %116, %120\l  %122 = fadd contract float %107, %121\l  %123 = or i32 %77, 3\l  %124 = add nsw i32 %123, %56\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %125\l  %127 = load i32, i32 addrspace(1)* %126, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %128 = add nsw i32 %127, %57\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !21\l  %132 = add nsw i32 %127, %74\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %0, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !21\l  %136 = fmul contract float %131, %135\l  %137 = fadd contract float %122, %136\l  %138 = or i32 %77, 4\l  %139 = add nsw i32 %138, %56\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %140\l  %142 = load i32, i32 addrspace(1)* %141, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %143 = add nsw i32 %142, %57\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !21\l  %147 = add nsw i32 %142, %74\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %0, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !21\l  %151 = fmul contract float %146, %150\l  %152 = fadd contract float %137, %151\l  %153 = or i32 %77, 5\l  %154 = add nsw i32 %153, %56\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %155\l  %157 = load i32, i32 addrspace(1)* %156, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %158 = add nsw i32 %157, %57\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %0, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !21\l  %162 = add nsw i32 %157, %74\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %0, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !21\l  %166 = fmul contract float %161, %165\l  %167 = fadd contract float %152, %166\l  %168 = or i32 %77, 6\l  %169 = add nsw i32 %168, %56\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %170\l  %172 = load i32, i32 addrspace(1)* %171, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %173 = add nsw i32 %172, %57\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %0, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !21\l  %177 = add nsw i32 %172, %74\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds float, float addrspace(1)* %0, i64 %178\l  %180 = load float, float addrspace(1)* %179, align 4, !tbaa !21\l  %181 = fmul contract float %176, %180\l  %182 = fadd contract float %167, %181\l  %183 = or i32 %77, 7\l  %184 = add nsw i32 %183, %56\l  %185 = sext i32 %184 to i64\l  %186 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %185\l  %187 = load i32, i32 addrspace(1)* %186, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %188 = add nsw i32 %187, %57\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %0, i64 %189\l  %191 = load float, float addrspace(1)* %190, align 4, !tbaa !21\l  %192 = add nsw i32 %187, %74\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds float, float addrspace(1)* %0, i64 %193\l  %195 = load float, float addrspace(1)* %194, align 4, !tbaa !21\l  %196 = fmul contract float %191, %195\l  %197 = fadd contract float %182, %196\l  %198 = add nuw nsw i32 %77, 8\l  %199 = add i32 %78, 8\l  %200 = icmp eq i32 %199, %66\l  br i1 %200, label %201, label %75, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x62fb9d0:s0 -> Node0x62fb940;
	Node0x62fb9d0:s1 -> Node0x62fb9d0;
	Node0x62fb940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%201:\l201:                                              \l  %202 = phi float [ undef, %70 ], [ %197, %75 ]\l  %203 = phi float [ 0.000000e+00, %70 ], [ %197, %75 ]\l  %204 = phi i32 [ 0, %70 ], [ %198, %75 ]\l  br i1 %67, label %226, label %205\l|{<s0>T|<s1>F}}"];
	Node0x62fb940:s0 -> Node0x62fafe0;
	Node0x62fb940:s1 -> Node0x6301ea0;
	Node0x6301ea0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%205:\l205:                                              \l  %206 = phi float [ %222, %205 ], [ %203, %201 ]\l  %207 = phi i32 [ %223, %205 ], [ %204, %201 ]\l  %208 = phi i32 [ %224, %205 ], [ 0, %201 ]\l  %209 = add nsw i32 %207, %56\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %210\l  %212 = load i32, i32 addrspace(1)* %211, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %213 = add nsw i32 %212, %57\l  %214 = sext i32 %213 to i64\l  %215 = getelementptr inbounds float, float addrspace(1)* %0, i64 %214\l  %216 = load float, float addrspace(1)* %215, align 4, !tbaa !21\l  %217 = add nsw i32 %212, %74\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds float, float addrspace(1)* %0, i64 %218\l  %220 = load float, float addrspace(1)* %219, align 4, !tbaa !21\l  %221 = fmul contract float %216, %220\l  %222 = fadd contract float %206, %221\l  %223 = add nuw nsw i32 %207, 1\l  %224 = add i32 %208, 1\l  %225 = icmp eq i32 %224, %64\l  br i1 %225, label %226, label %205, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x6301ea0:s0 -> Node0x62fafe0;
	Node0x6301ea0:s1 -> Node0x6301ea0;
	Node0x62fafe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%226:\l226:                                              \l  %227 = phi float [ 0.000000e+00, %68 ], [ %202, %201 ], [ %222, %205 ]\l  %228 = fadd contract float %227, 1.000000e+00\l  br i1 %36, label %229, label %252\l|{<s0>T|<s1>F}}"];
	Node0x62fafe0:s0 -> Node0x6302e00;
	Node0x62fafe0:s1 -> Node0x62fae10;
	Node0x6302e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%229:\l229:                                              \l  br i1 %44, label %243, label %230\l|{<s0>T|<s1>F}}"];
	Node0x6302e00:s0 -> Node0x6302f40;
	Node0x6302e00:s1 -> Node0x6302f90;
	Node0x6302f90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%230:\l230:                                              \l  %231 = phi float [ %240, %230 ], [ 1.000000e+00, %229 ]\l  %232 = phi i32 [ %241, %230 ], [ 0, %229 ]\l  %233 = fmul contract float %228, %231\l  %234 = fmul contract float %228, %233\l  %235 = fmul contract float %228, %234\l  %236 = fmul contract float %228, %235\l  %237 = fmul contract float %228, %236\l  %238 = fmul contract float %228, %237\l  %239 = fmul contract float %228, %238\l  %240 = fmul contract float %228, %239\l  %241 = add i32 %232, 8\l  %242 = icmp eq i32 %241, %45\l  br i1 %242, label %243, label %230, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x6302f90:s0 -> Node0x6302f40;
	Node0x6302f90:s1 -> Node0x6302f90;
	Node0x6302f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%243:\l243:                                              \l  %244 = phi float [ undef, %229 ], [ %240, %230 ]\l  %245 = phi float [ 1.000000e+00, %229 ], [ %240, %230 ]\l  br i1 %46, label %252, label %246\l|{<s0>T|<s1>F}}"];
	Node0x6302f40:s0 -> Node0x62fae10;
	Node0x6302f40:s1 -> Node0x6303ae0;
	Node0x6303ae0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%246:\l246:                                              \l  %247 = phi float [ %249, %246 ], [ %245, %243 ]\l  %248 = phi i32 [ %250, %246 ], [ 0, %243 ]\l  %249 = fmul contract float %228, %247\l  %250 = add i32 %248, 1\l  %251 = icmp eq i32 %250, %43\l  br i1 %251, label %252, label %246, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x6303ae0:s0 -> Node0x62fae10;
	Node0x6303ae0:s1 -> Node0x6303ae0;
	Node0x62fae10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%252:\l252:                                              \l  %253 = phi float [ 1.000000e+00, %226 ], [ %244, %243 ], [ %249, %246 ]\l  %254 = mul nsw i32 %69, %2\l  %255 = add nsw i32 %254, %48\l  %256 = sext i32 %255 to i64\l  %257 = getelementptr inbounds float, float addrspace(1)* %1, i64 %256\l  store float %253, float addrspace(1)* %257, align 4, !tbaa !21\l  %258 = add i32 %63, %69\l  %259 = icmp slt i32 %258, %4\l  br i1 %259, label %68, label %260, !llvm.loop !29\l|{<s0>T|<s1>F}}"];
	Node0x62fae10:s0 -> Node0x62f8be0;
	Node0x62fae10:s1 -> Node0x62f9c70;
	Node0x62f9c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%260:\l260:                                              \l  %261 = phi i32 [ %49, %47 ], [ %258, %252 ]\l  %262 = add i32 %42, %48\l  %263 = icmp slt i32 %262, %2\l  br i1 %263, label %47, label %264, !llvm.loop !30\l|{<s0>T|<s1>F}}"];
	Node0x62f9c70:s0 -> Node0x62f9b40;
	Node0x62f9c70:s1 -> Node0x62f8750;
	Node0x62f8750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%264:\l264:                                              \l  ret void\l}"];
}
