digraph "CFG for '_Z12Kernel_normePfS_PiS0_iii' function" {
	label="CFG for '_Z12Kernel_normePfS_PiS0_iii' function";

	Node0x5cafa50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = add i32 %15, %8\l  %17 = zext i32 %16 to i64\l  %18 = sext i32 %4 to i64\l  %19 = icmp slt i64 %17, %18\l  br i1 %19, label %20, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5cafa50:s0 -> Node0x5cb1a80;
	Node0x5cafa50:s1 -> Node0x5cb1b10;
	Node0x5cb1a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%20:\l20:                                               \l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %17\l  %22 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %23 = icmp sgt i32 %22, 0\l  br i1 %23, label %24, label %55\l|{<s0>T|<s1>F}}"];
	Node0x5cb1a80:s0 -> Node0x5cb2580;
	Node0x5cb1a80:s1 -> Node0x5cb2610;
	Node0x5cb2580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = sext i32 %6 to i64\l  %26 = mul nsw i64 %17, %25\l  %27 = sext i32 %5 to i64\l  %28 = mul nsw i64 %17, %27\l  %29 = and i32 %22, 7\l  %30 = icmp ult i32 %22, 8\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5cb2580:s0 -> Node0x5cb2ad0;
	Node0x5cb2580:s1 -> Node0x5cb2b20;
	Node0x5cb2b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %22, -8\l  br label %58\l}"];
	Node0x5cb2b20 -> Node0x5cb1870;
	Node0x5cb2ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi float [ undef, %24 ], [ %148, %58 ]\l  %35 = phi i32 [ 0, %24 ], [ %149, %58 ]\l  %36 = phi float [ 0.000000e+00, %24 ], [ %148, %58 ]\l  %37 = icmp eq i32 %29, 0\l  br i1 %37, label %55, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5cb2ad0:s0 -> Node0x5cb2610;
	Node0x5cb2ad0:s1 -> Node0x5cb40a0;
	Node0x5cb40a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i32 [ %52, %38 ], [ %35, %33 ]\l  %40 = phi float [ %51, %38 ], [ %36, %33 ]\l  %41 = phi i32 [ %53, %38 ], [ 0, %33 ]\l  %42 = zext i32 %39 to i64\l  %43 = add nsw i64 %26, %42\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %46 = sext i32 %45 to i64\l  %47 = add nsw i64 %28, %46\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %50 = fmul contract float %49, %49\l  %51 = fadd contract float %40, %50\l  %52 = add nuw nsw i32 %39, 1\l  %53 = add i32 %41, 1\l  %54 = icmp eq i32 %53, %29\l  br i1 %54, label %55, label %38, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5cb40a0:s0 -> Node0x5cb2610;
	Node0x5cb40a0:s1 -> Node0x5cb40a0;
	Node0x5cb2610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%55:\l55:                                               \l  %56 = phi float [ 0.000000e+00, %20 ], [ %34, %33 ], [ %51, %38 ]\l  %57 = getelementptr inbounds float, float addrspace(1)* %1, i64 %17\l  store float %56, float addrspace(1)* %57, align 4, !tbaa !11\l  br label %152\l}"];
	Node0x5cb2610 -> Node0x5cb1b10;
	Node0x5cb1870 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%58:\l58:                                               \l  %59 = phi i32 [ 0, %31 ], [ %149, %58 ]\l  %60 = phi float [ 0.000000e+00, %31 ], [ %148, %58 ]\l  %61 = phi i32 [ 0, %31 ], [ %150, %58 ]\l  %62 = zext i32 %59 to i64\l  %63 = add nsw i64 %26, %62\l  %64 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %63\l  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %66 = sext i32 %65 to i64\l  %67 = add nsw i64 %28, %66\l  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %70 = fmul contract float %69, %69\l  %71 = fadd contract float %60, %70\l  %72 = or i32 %59, 1\l  %73 = zext i32 %72 to i64\l  %74 = add nsw i64 %26, %73\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %74\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %77 = sext i32 %76 to i64\l  %78 = add nsw i64 %28, %77\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %81 = fmul contract float %80, %80\l  %82 = fadd contract float %71, %81\l  %83 = or i32 %59, 2\l  %84 = zext i32 %83 to i64\l  %85 = add nsw i64 %26, %84\l  %86 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %85\l  %87 = load i32, i32 addrspace(1)* %86, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %88 = sext i32 %87 to i64\l  %89 = add nsw i64 %28, %88\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %92 = fmul contract float %91, %91\l  %93 = fadd contract float %82, %92\l  %94 = or i32 %59, 3\l  %95 = zext i32 %94 to i64\l  %96 = add nsw i64 %26, %95\l  %97 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %96\l  %98 = load i32, i32 addrspace(1)* %97, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %99 = sext i32 %98 to i64\l  %100 = add nsw i64 %28, %99\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %103 = fmul contract float %102, %102\l  %104 = fadd contract float %93, %103\l  %105 = or i32 %59, 4\l  %106 = zext i32 %105 to i64\l  %107 = add nsw i64 %26, %106\l  %108 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %107\l  %109 = load i32, i32 addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %110 = sext i32 %109 to i64\l  %111 = add nsw i64 %28, %110\l  %112 = getelementptr inbounds float, float addrspace(1)* %0, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %114 = fmul contract float %113, %113\l  %115 = fadd contract float %104, %114\l  %116 = or i32 %59, 5\l  %117 = zext i32 %116 to i64\l  %118 = add nsw i64 %26, %117\l  %119 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %118\l  %120 = load i32, i32 addrspace(1)* %119, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %121 = sext i32 %120 to i64\l  %122 = add nsw i64 %28, %121\l  %123 = getelementptr inbounds float, float addrspace(1)* %0, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %125 = fmul contract float %124, %124\l  %126 = fadd contract float %115, %125\l  %127 = or i32 %59, 6\l  %128 = zext i32 %127 to i64\l  %129 = add nsw i64 %26, %128\l  %130 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %129\l  %131 = load i32, i32 addrspace(1)* %130, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %132 = sext i32 %131 to i64\l  %133 = add nsw i64 %28, %132\l  %134 = getelementptr inbounds float, float addrspace(1)* %0, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %136 = fmul contract float %135, %135\l  %137 = fadd contract float %126, %136\l  %138 = or i32 %59, 7\l  %139 = zext i32 %138 to i64\l  %140 = add nsw i64 %26, %139\l  %141 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %140\l  %142 = load i32, i32 addrspace(1)* %141, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %143 = sext i32 %142 to i64\l  %144 = add nsw i64 %28, %143\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !11,\l... !amdgpu.noclobber !6\l  %147 = fmul contract float %146, %146\l  %148 = fadd contract float %137, %147\l  %149 = add nuw nsw i32 %59, 8\l  %150 = add i32 %61, 8\l  %151 = icmp eq i32 %150, %32\l  br i1 %151, label %33, label %58, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5cb1870:s0 -> Node0x5cb2ad0;
	Node0x5cb1870:s1 -> Node0x5cb1870;
	Node0x5cb1b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%152:\l152:                                              \l  ret void\l}"];
}
