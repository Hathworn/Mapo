digraph "CFG for '_Z14Kernel_linearePfS_iiiPiS0_S0_i' function" {
	label="CFG for '_Z14Kernel_linearePfS_iiiPiS0_S0_i' function";

	Node0x534c0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !6\l  %19 = mul i32 %10, %15\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add i32 %19, %20\l  %22 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !4, !invariant.load !5\l  %25 = zext i16 %24 to i32\l  %26 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 16\l  %27 = bitcast i8 addrspace(4)* %26 to i32 addrspace(4)*\l  %28 = load i32, i32 addrspace(4)* %27, align 8, !tbaa !16\l  %29 = icmp slt i32 %21, %2\l  br i1 %29, label %30, label %232\l|{<s0>T|<s1>F}}"];
	Node0x534c0d0:s0 -> Node0x534fff0;
	Node0x534c0d0:s1 -> Node0x5350080;
	Node0x534fff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%30:\l30:                                               \l  %31 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %32 = mul i32 %31, %25\l  %33 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %34 = add i32 %32, %33\l  %35 = udiv i32 %18, %15\l  %36 = mul i32 %35, %15\l  %37 = icmp ugt i32 %18, %36\l  %38 = zext i1 %37 to i32\l  %39 = add i32 %35, %38\l  %40 = mul i32 %39, %15\l  br label %41\l}"];
	Node0x534fff0 -> Node0x53510e0;
	Node0x53510e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%41:\l41:                                               \l  %42 = phi i32 [ %21, %30 ], [ %230, %228 ]\l  %43 = phi i32 [ %34, %30 ], [ %229, %228 ]\l  %44 = icmp slt i32 %43, %4\l  br i1 %44, label %45, label %228\l|{<s0>T|<s1>F}}"];
	Node0x53510e0:s0 -> Node0x5351500;
	Node0x53510e0:s1 -> Node0x5351210;
	Node0x5351500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%45:\l45:                                               \l  %46 = sext i32 %42 to i64\l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %46\l  %48 = load i32, i32 addrspace(1)* %47, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %49 = icmp sgt i32 %48, 0\l  %50 = mul nsw i32 %42, %8\l  %51 = mul nsw i32 %42, %3\l  %52 = udiv i32 %28, %25\l  %53 = mul i32 %52, %25\l  %54 = icmp ugt i32 %28, %53\l  %55 = zext i1 %54 to i32\l  %56 = add i32 %52, %55\l  %57 = mul i32 %56, %25\l  %58 = and i32 %48, 7\l  %59 = icmp ult i32 %48, 8\l  %60 = and i32 %48, -8\l  %61 = icmp eq i32 %58, 0\l  br label %62\l}"];
	Node0x5351500 -> Node0x5352130;
	Node0x5352130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%62:\l62:                                               \l  %63 = phi i32 [ %43, %45 ], [ %226, %220 ]\l  br i1 %49, label %64, label %220\l|{<s0>T|<s1>F}}"];
	Node0x5352130:s0 -> Node0x53523a0;
	Node0x5352130:s1 -> Node0x5352260;
	Node0x53523a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%64:\l64:                                               \l  %65 = sext i32 %63 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %65\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %68 = mul nsw i32 %67, %3\l  br i1 %59, label %195, label %69\l|{<s0>T|<s1>F}}"];
	Node0x53523a0:s0 -> Node0x5352f00;
	Node0x53523a0:s1 -> Node0x5352f90;
	Node0x5352f90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%69:\l69:                                               \l  %70 = phi float [ %191, %69 ], [ 0.000000e+00, %64 ]\l  %71 = phi i32 [ %192, %69 ], [ 0, %64 ]\l  %72 = phi i32 [ %193, %69 ], [ 0, %64 ]\l  %73 = add nsw i32 %71, %50\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %74\l  %76 = load i32, i32 addrspace(1)* %75, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %77 = add nsw i32 %76, %51\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !21\l  %81 = add nsw i32 %76, %68\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !21\l  %85 = fmul contract float %80, %84\l  %86 = fadd contract float %70, %85\l  %87 = or i32 %71, 1\l  %88 = add nsw i32 %87, %50\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %89\l  %91 = load i32, i32 addrspace(1)* %90, align 4, !tbaa !17, !amdgpu.noclobber\l... !5\l  %92 = add nsw i32 %91, %51\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !21\l  %96 = add nsw i32 %91, %68\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !21\l  %100 = fmul contract float %95, %99\l  %101 = fadd contract float %86, %100\l  %102 = or i32 %71, 2\l  %103 = add nsw i32 %102, %50\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %104\l  %106 = load i32, i32 addrspace(1)* %105, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %107 = add nsw i32 %106, %51\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !21\l  %111 = add nsw i32 %106, %68\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !21\l  %115 = fmul contract float %110, %114\l  %116 = fadd contract float %101, %115\l  %117 = or i32 %71, 3\l  %118 = add nsw i32 %117, %50\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %119\l  %121 = load i32, i32 addrspace(1)* %120, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %122 = add nsw i32 %121, %51\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !21\l  %126 = add nsw i32 %121, %68\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %0, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !21\l  %130 = fmul contract float %125, %129\l  %131 = fadd contract float %116, %130\l  %132 = or i32 %71, 4\l  %133 = add nsw i32 %132, %50\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %134\l  %136 = load i32, i32 addrspace(1)* %135, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %137 = add nsw i32 %136, %51\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %0, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !21\l  %141 = add nsw i32 %136, %68\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %0, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !21\l  %145 = fmul contract float %140, %144\l  %146 = fadd contract float %131, %145\l  %147 = or i32 %71, 5\l  %148 = add nsw i32 %147, %50\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %149\l  %151 = load i32, i32 addrspace(1)* %150, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %152 = add nsw i32 %151, %51\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !21\l  %156 = add nsw i32 %151, %68\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %0, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !21\l  %160 = fmul contract float %155, %159\l  %161 = fadd contract float %146, %160\l  %162 = or i32 %71, 6\l  %163 = add nsw i32 %162, %50\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %164\l  %166 = load i32, i32 addrspace(1)* %165, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %167 = add nsw i32 %166, %51\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %0, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !21\l  %171 = add nsw i32 %166, %68\l  %172 = sext i32 %171 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %0, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !21\l  %175 = fmul contract float %170, %174\l  %176 = fadd contract float %161, %175\l  %177 = or i32 %71, 7\l  %178 = add nsw i32 %177, %50\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %179\l  %181 = load i32, i32 addrspace(1)* %180, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %182 = add nsw i32 %181, %51\l  %183 = sext i32 %182 to i64\l  %184 = getelementptr inbounds float, float addrspace(1)* %0, i64 %183\l  %185 = load float, float addrspace(1)* %184, align 4, !tbaa !21\l  %186 = add nsw i32 %181, %68\l  %187 = sext i32 %186 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %0, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !21\l  %190 = fmul contract float %185, %189\l  %191 = fadd contract float %176, %190\l  %192 = add nuw nsw i32 %71, 8\l  %193 = add i32 %72, 8\l  %194 = icmp eq i32 %193, %60\l  br i1 %194, label %195, label %69, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5352f90:s0 -> Node0x5352f00;
	Node0x5352f90:s1 -> Node0x5352f90;
	Node0x5352f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%195:\l195:                                              \l  %196 = phi float [ undef, %64 ], [ %191, %69 ]\l  %197 = phi float [ 0.000000e+00, %64 ], [ %191, %69 ]\l  %198 = phi i32 [ 0, %64 ], [ %192, %69 ]\l  br i1 %61, label %220, label %199\l|{<s0>T|<s1>F}}"];
	Node0x5352f00:s0 -> Node0x5352260;
	Node0x5352f00:s1 -> Node0x5359470;
	Node0x5359470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%199:\l199:                                              \l  %200 = phi float [ %216, %199 ], [ %197, %195 ]\l  %201 = phi i32 [ %217, %199 ], [ %198, %195 ]\l  %202 = phi i32 [ %218, %199 ], [ 0, %195 ]\l  %203 = add nsw i32 %201, %50\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %204\l  %206 = load i32, i32 addrspace(1)* %205, align 4, !tbaa !17,\l... !amdgpu.noclobber !5\l  %207 = add nsw i32 %206, %51\l  %208 = sext i32 %207 to i64\l  %209 = getelementptr inbounds float, float addrspace(1)* %0, i64 %208\l  %210 = load float, float addrspace(1)* %209, align 4, !tbaa !21\l  %211 = add nsw i32 %206, %68\l  %212 = sext i32 %211 to i64\l  %213 = getelementptr inbounds float, float addrspace(1)* %0, i64 %212\l  %214 = load float, float addrspace(1)* %213, align 4, !tbaa !21\l  %215 = fmul contract float %210, %214\l  %216 = fadd contract float %200, %215\l  %217 = add nuw nsw i32 %201, 1\l  %218 = add i32 %202, 1\l  %219 = icmp eq i32 %218, %58\l  br i1 %219, label %220, label %199, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5359470:s0 -> Node0x5352260;
	Node0x5359470:s1 -> Node0x5359470;
	Node0x5352260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%220:\l220:                                              \l  %221 = phi float [ 0.000000e+00, %62 ], [ %196, %195 ], [ %216, %199 ]\l  %222 = mul nsw i32 %63, %2\l  %223 = add nsw i32 %222, %42\l  %224 = sext i32 %223 to i64\l  %225 = getelementptr inbounds float, float addrspace(1)* %1, i64 %224\l  store float %221, float addrspace(1)* %225, align 4, !tbaa !21\l  %226 = add i32 %57, %63\l  %227 = icmp slt i32 %226, %4\l  br i1 %227, label %62, label %228, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x5352260:s0 -> Node0x5352130;
	Node0x5352260:s1 -> Node0x5351210;
	Node0x5351210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%228:\l228:                                              \l  %229 = phi i32 [ %43, %41 ], [ %226, %220 ]\l  %230 = add i32 %40, %42\l  %231 = icmp slt i32 %230, %2\l  br i1 %231, label %41, label %232, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x5351210:s0 -> Node0x53510e0;
	Node0x5351210:s1 -> Node0x5350080;
	Node0x5350080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%232:\l232:                                              \l  ret void\l}"];
}
