digraph "CFG for 'exp_double' function" {
	label="CFG for 'exp_double' function";

	Node0x4977420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = mul i32 %6, %11\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %17 = add i32 %15, %16\l  %18 = icmp slt i32 %17, %0\l  br i1 %18, label %19, label %26\l|{<s0>T|<s1>F}}"];
	Node0x4977420:s0 -> Node0x4979690;
	Node0x4977420:s1 -> Node0x4979720;
	Node0x4979690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%19:\l19:                                               \l  %20 = udiv i32 %14, %11\l  %21 = mul i32 %20, %11\l  %22 = icmp ugt i32 %14, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  br label %27\l}"];
	Node0x4979690 -> Node0x4979ba0;
	Node0x4979720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%26:\l26:                                               \l  ret void\l}"];
	Node0x4979ba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi i32 [ %17, %19 ], [ %179, %178 ]\l  %29 = icmp slt i32 %28, %1\l  br i1 %29, label %178, label %30\l|{<s0>T|<s1>F}}"];
	Node0x4979ba0:s0 -> Node0x4979cb0;
	Node0x4979ba0:s1 -> Node0x4979e40;
	Node0x4979e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%30:\l30:                                               \l  %31 = srem i32 %28, %3\l  %32 = icmp eq i32 %31, 0\l  br i1 %32, label %33, label %178\l|{<s0>T|<s1>F}}"];
	Node0x4979e40:s0 -> Node0x49794f0;
	Node0x4979e40:s1 -> Node0x4979cb0;
	Node0x49794f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%33:\l33:                                               \l  %34 = sext i32 %28 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %2, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !16\l  %37 = tail call double @llvm.fabs.f64(double %36)\l  %38 = fcmp olt double %37, 0x41D0000000000000\l  br i1 %38, label %39, label %58\l|{<s0>T|<s1>F}}"];
	Node0x49794f0:s0 -> Node0x497b230;
	Node0x49794f0:s1 -> Node0x497b2c0;
	Node0x497b230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%39:\l39:                                               \l  %40 = fmul double %37, 0x3FE45F306DC9C883\l  %41 = tail call double @llvm.rint.f64(double %40)\l  %42 = tail call double @llvm.fma.f64(double %41, double 0xBFF921FB54442D18,\l... double %37)\l  %43 = tail call double @llvm.fma.f64(double %41, double 0xBC91A62633145C00,\l... double %42)\l  %44 = fmul double %41, 0x3C91A62633145C00\l  %45 = fneg double %44\l  %46 = tail call double @llvm.fma.f64(double %41, double 0x3C91A62633145C00,\l... double %45)\l  %47 = fsub double %42, %44\l  %48 = fsub double %42, %47\l  %49 = fsub double %48, %44\l  %50 = fsub double %47, %43\l  %51 = fadd double %50, %49\l  %52 = fsub double %51, %46\l  %53 = tail call double @llvm.fma.f64(double %41, double 0xB97B839A252049C0,\l... double %52)\l  %54 = fadd double %43, %53\l  %55 = fsub double %54, %43\l  %56 = fsub double %53, %55\l  %57 = fptosi double %41 to i32\l  br label %134\l}"];
	Node0x497b230 -> Node0x497c480;
	Node0x497b2c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%58:\l58:                                               \l  %59 = tail call double @llvm.amdgcn.trig.preop.f64(double %37, i32 0)\l  %60 = tail call double @llvm.amdgcn.trig.preop.f64(double %37, i32 1)\l  %61 = tail call double @llvm.amdgcn.trig.preop.f64(double %37, i32 2)\l  %62 = fcmp oge double %37, 0x7B00000000000000\l  %63 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 -128)\l  %64 = select i1 %62, double %63, double %37\l  %65 = fmul double %61, %64\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %61, double %64, double %66)\l  %68 = fmul double %60, %64\l  %69 = fneg double %68\l  %70 = tail call double @llvm.fma.f64(double %60, double %64, double %69)\l  %71 = fmul double %59, %64\l  %72 = fneg double %71\l  %73 = tail call double @llvm.fma.f64(double %59, double %64, double %72)\l  %74 = fadd double %68, %73\l  %75 = fsub double %74, %68\l  %76 = fsub double %74, %75\l  %77 = fsub double %73, %75\l  %78 = fsub double %68, %76\l  %79 = fadd double %77, %78\l  %80 = fadd double %65, %70\l  %81 = fsub double %80, %65\l  %82 = fsub double %80, %81\l  %83 = fsub double %70, %81\l  %84 = fsub double %65, %82\l  %85 = fadd double %83, %84\l  %86 = fadd double %80, %79\l  %87 = fsub double %86, %80\l  %88 = fsub double %86, %87\l  %89 = fsub double %79, %87\l  %90 = fsub double %80, %88\l  %91 = fadd double %89, %90\l  %92 = fadd double %85, %91\l  %93 = fadd double %67, %92\l  %94 = fadd double %71, %74\l  %95 = fsub double %94, %71\l  %96 = fsub double %74, %95\l  %97 = fadd double %96, %86\l  %98 = fsub double %97, %96\l  %99 = fsub double %86, %98\l  %100 = fadd double %99, %93\l  %101 = tail call double @llvm.amdgcn.ldexp.f64(double %94, i32 -2)\l  %102 = tail call double @llvm.amdgcn.fract.f64(double %101)\l  %103 = tail call i1 @llvm.amdgcn.class.f64(double %101, i32 516)\l  %104 = select i1 %103, double 0.000000e+00, double %102\l  %105 = tail call double @llvm.amdgcn.ldexp.f64(double %104, i32 2)\l  %106 = fadd double %105, %97\l  %107 = fcmp olt double %106, 0.000000e+00\l  %108 = select i1 %107, double 4.000000e+00, double 0.000000e+00\l  %109 = fadd double %105, %108\l  %110 = fadd double %97, %109\l  %111 = fptosi double %110 to i32\l  %112 = sitofp i32 %111 to double\l  %113 = fsub double %109, %112\l  %114 = fadd double %97, %113\l  %115 = fsub double %114, %113\l  %116 = fsub double %97, %115\l  %117 = fadd double %100, %116\l  %118 = fcmp oge double %114, 5.000000e-01\l  %119 = zext i1 %118 to i32\l  %120 = add nsw i32 %119, %111\l  %121 = select i1 %118, double 1.000000e+00, double 0.000000e+00\l  %122 = fsub double %114, %121\l  %123 = fadd double %122, %117\l  %124 = fsub double %123, %122\l  %125 = fsub double %117, %124\l  %126 = fmul double %123, 0x3FF921FB54442D18\l  %127 = fneg double %126\l  %128 = tail call double @llvm.fma.f64(double %123, double\l... 0x3FF921FB54442D18, double %127)\l  %129 = tail call double @llvm.fma.f64(double %123, double\l... 0x3C91A62633145C07, double %128)\l  %130 = tail call double @llvm.fma.f64(double %125, double\l... 0x3FF921FB54442D18, double %129)\l  %131 = fadd double %126, %130\l  %132 = fsub double %131, %126\l  %133 = fsub double %130, %132\l  br label %134\l}"];
	Node0x497b2c0 -> Node0x497c480;
	Node0x497c480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%134:\l134:                                              \l  %135 = phi double [ %56, %39 ], [ %133, %58 ]\l  %136 = phi double [ %54, %39 ], [ %131, %58 ]\l  %137 = phi i32 [ %57, %39 ], [ %120, %58 ]\l  %138 = fmul double %136, %136\l  %139 = fmul double %138, 5.000000e-01\l  %140 = fsub double 1.000000e+00, %139\l  %141 = fsub double 1.000000e+00, %140\l  %142 = fsub double %141, %139\l  %143 = fmul double %138, %138\l  %144 = tail call double @llvm.fma.f64(double %138, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %145 = tail call double @llvm.fma.f64(double %138, double %144, double\l... 0xBE927E4FA17F65F6)\l  %146 = tail call double @llvm.fma.f64(double %138, double %145, double\l... 0x3EFA01A019F4EC90)\l  %147 = tail call double @llvm.fma.f64(double %138, double %146, double\l... 0xBF56C16C16C16967)\l  %148 = tail call double @llvm.fma.f64(double %138, double %147, double\l... 0x3FA5555555555555)\l  %149 = fneg double %135\l  %150 = tail call double @llvm.fma.f64(double %136, double %149, double %142)\l  %151 = tail call double @llvm.fma.f64(double %143, double %148, double %150)\l  %152 = fadd double %140, %151\l  %153 = tail call double @llvm.fma.f64(double %138, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %154 = tail call double @llvm.fma.f64(double %138, double %153, double\l... 0x3EC71DE3796CDE01)\l  %155 = tail call double @llvm.fma.f64(double %138, double %154, double\l... 0xBF2A01A019E83E5C)\l  %156 = tail call double @llvm.fma.f64(double %138, double %155, double\l... 0x3F81111111110BB3)\l  %157 = fneg double %138\l  %158 = fmul double %136, %157\l  %159 = fmul double %135, 5.000000e-01\l  %160 = tail call double @llvm.fma.f64(double %158, double %156, double %159)\l  %161 = tail call double @llvm.fma.f64(double %138, double %160, double %149)\l  %162 = tail call double @llvm.fma.f64(double %158, double\l... 0xBFC5555555555555, double %161)\l  %163 = fsub double %136, %162\l  %164 = fneg double %163\l  %165 = and i32 %137, 1\l  %166 = icmp eq i32 %165, 0\l  %167 = select i1 %166, double %152, double %164\l  %168 = bitcast double %167 to \<2 x i32\>\l  %169 = shl i32 %137, 30\l  %170 = and i32 %169, -2147483648\l  %171 = extractelement \<2 x i32\> %168, i64 1\l  %172 = xor i32 %171, %170\l  %173 = insertelement \<2 x i32\> %168, i32 %172, i64 1\l  %174 = tail call i1 @llvm.amdgcn.class.f64(double %37, i32 504)\l  %175 = select i1 %174, \<2 x i32\> %173, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %176 = getelementptr inbounds double, double addrspace(1)* %4, i64 %34\l  %177 = bitcast double addrspace(1)* %176 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %175, \<2 x i32\> addrspace(1)* %177, align 8, !tbaa !16\l  br label %178\l}"];
	Node0x497c480 -> Node0x4979cb0;
	Node0x4979cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%178:\l178:                                              \l  %179 = add i32 %25, %28\l  %180 = icmp slt i32 %179, %0\l  br i1 %180, label %27, label %26, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4979cb0:s0 -> Node0x4979ba0;
	Node0x4979cb0:s1 -> Node0x4979720;
}
