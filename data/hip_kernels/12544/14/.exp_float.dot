digraph "CFG for 'exp_float' function" {
	label="CFG for 'exp_float' function";

	Node0x51012d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = mul i32 %6, %11\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %17 = add i32 %15, %16\l  %18 = icmp slt i32 %17, %0\l  br i1 %18, label %19, label %26\l|{<s0>T|<s1>F}}"];
	Node0x51012d0:s0 -> Node0x5103540;
	Node0x51012d0:s1 -> Node0x51035d0;
	Node0x5103540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%19:\l19:                                               \l  %20 = udiv i32 %14, %11\l  %21 = mul i32 %20, %11\l  %22 = icmp ugt i32 %14, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  br label %27\l}"];
	Node0x5103540 -> Node0x5103a50;
	Node0x51035d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%26:\l26:                                               \l  ret void\l}"];
	Node0x5103a50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi i32 [ %17, %19 ], [ %181, %180 ]\l  %29 = icmp slt i32 %28, %1\l  br i1 %29, label %180, label %30\l|{<s0>T|<s1>F}}"];
	Node0x5103a50:s0 -> Node0x5103b60;
	Node0x5103a50:s1 -> Node0x5103cf0;
	Node0x5103cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%30:\l30:                                               \l  %31 = srem i32 %28, %3\l  %32 = icmp eq i32 %31, 0\l  br i1 %32, label %33, label %180\l|{<s0>T|<s1>F}}"];
	Node0x5103cf0:s0 -> Node0x51033a0;
	Node0x5103cf0:s1 -> Node0x5103b60;
	Node0x51033a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%33:\l33:                                               \l  %34 = sext i32 %28 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %2, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !16\l  %37 = tail call float @llvm.fabs.f32(float %36)\l  %38 = fcmp olt float %37, 1.310720e+05\l  br i1 %38, label %39, label %47\l|{<s0>T|<s1>F}}"];
	Node0x51033a0:s0 -> Node0x51050e0;
	Node0x51033a0:s1 -> Node0x5105170;
	Node0x51050e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%39:\l39:                                               \l  %40 = fmul float %37, 0x3FE45F3060000000\l  %41 = tail call float @llvm.rint.f32(float %40)\l  %42 = tail call float @llvm.fma.f32(float %41, float 0xBFF921FB40000000,\l... float %37)\l  %43 = tail call float @llvm.fma.f32(float %41, float 0xBE74442D00000000,\l... float %42)\l  %44 = tail call float @llvm.fma.f32(float %41, float 0xBCF8469880000000,\l... float %43)\l  %45 = fptosi float %41 to i32\l  %46 = bitcast float %37 to i32\l  br label %153\l}"];
	Node0x51050e0 -> Node0x5105c20;
	Node0x5105170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%47:\l47:                                               \l  %48 = bitcast float %37 to i32\l  %49 = lshr i32 %48, 23\l  %50 = and i32 %48, 8388607\l  %51 = or i32 %50, 8388608\l  %52 = zext i32 %51 to i64\l  %53 = mul nuw nsw i64 %52, 4266746795\l  %54 = trunc i64 %53 to i32\l  %55 = lshr i64 %53, 32\l  %56 = mul nuw nsw i64 %52, 1011060801\l  %57 = add nuw nsw i64 %55, %56\l  %58 = trunc i64 %57 to i32\l  %59 = lshr i64 %57, 32\l  %60 = mul nuw nsw i64 %52, 3680671129\l  %61 = add nuw nsw i64 %59, %60\l  %62 = trunc i64 %61 to i32\l  %63 = lshr i64 %61, 32\l  %64 = mul nuw nsw i64 %52, 4113882560\l  %65 = add nuw nsw i64 %63, %64\l  %66 = trunc i64 %65 to i32\l  %67 = lshr i64 %65, 32\l  %68 = mul nuw nsw i64 %52, 4230436817\l  %69 = add nuw nsw i64 %67, %68\l  %70 = trunc i64 %69 to i32\l  %71 = lshr i64 %69, 32\l  %72 = mul nuw nsw i64 %52, 1313084713\l  %73 = add nuw nsw i64 %71, %72\l  %74 = trunc i64 %73 to i32\l  %75 = lshr i64 %73, 32\l  %76 = mul nuw nsw i64 %52, 2734261102\l  %77 = add nuw nsw i64 %75, %76\l  %78 = trunc i64 %77 to i32\l  %79 = lshr i64 %77, 32\l  %80 = trunc i64 %79 to i32\l  %81 = add nsw i32 %49, -120\l  %82 = icmp ugt i32 %81, 63\l  %83 = select i1 %82, i32 %74, i32 %80\l  %84 = select i1 %82, i32 %70, i32 %78\l  %85 = select i1 %82, i32 %66, i32 %74\l  %86 = select i1 %82, i32 %62, i32 %70\l  %87 = select i1 %82, i32 %58, i32 %66\l  %88 = select i1 %82, i32 %54, i32 %62\l  %89 = select i1 %82, i32 -64, i32 0\l  %90 = add nsw i32 %89, %81\l  %91 = icmp ugt i32 %90, 31\l  %92 = select i1 %91, i32 %84, i32 %83\l  %93 = select i1 %91, i32 %85, i32 %84\l  %94 = select i1 %91, i32 %86, i32 %85\l  %95 = select i1 %91, i32 %87, i32 %86\l  %96 = select i1 %91, i32 %88, i32 %87\l  %97 = select i1 %91, i32 -32, i32 0\l  %98 = add nsw i32 %97, %90\l  %99 = icmp ugt i32 %98, 31\l  %100 = select i1 %99, i32 %93, i32 %92\l  %101 = select i1 %99, i32 %94, i32 %93\l  %102 = select i1 %99, i32 %95, i32 %94\l  %103 = select i1 %99, i32 %96, i32 %95\l  %104 = select i1 %99, i32 -32, i32 0\l  %105 = add nsw i32 %104, %98\l  %106 = icmp eq i32 %105, 0\l  %107 = sub nsw i32 32, %105\l  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %107)\l  %109 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %107)\l  %110 = tail call i32 @llvm.fshr.i32(i32 %102, i32 %103, i32 %107)\l  %111 = select i1 %106, i32 %100, i32 %108\l  %112 = select i1 %106, i32 %101, i32 %109\l  %113 = select i1 %106, i32 %102, i32 %110\l  %114 = lshr i32 %111, 29\l  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %112, i32 2)\l  %116 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %113, i32 2)\l  %117 = tail call i32 @llvm.fshl.i32(i32 %113, i32 %103, i32 2)\l  %118 = and i32 %114, 1\l  %119 = sub nsw i32 0, %118\l  %120 = shl i32 %114, 31\l  %121 = xor i32 %115, %119\l  %122 = xor i32 %116, %119\l  %123 = xor i32 %117, %119\l  %124 = tail call i32 @llvm.ctlz.i32(i32 %121, i1 false), !range !20\l  %125 = sub nsw i32 31, %124\l  %126 = tail call i32 @llvm.fshr.i32(i32 %121, i32 %122, i32 %125)\l  %127 = tail call i32 @llvm.fshr.i32(i32 %122, i32 %123, i32 %125)\l  %128 = shl nuw nsw i32 %124, 23\l  %129 = sub nuw nsw i32 1056964608, %128\l  %130 = lshr i32 %126, 9\l  %131 = or i32 %130, %129\l  %132 = or i32 %131, %120\l  %133 = bitcast i32 %132 to float\l  %134 = tail call i32 @llvm.fshl.i32(i32 %126, i32 %127, i32 23)\l  %135 = tail call i32 @llvm.ctlz.i32(i32 %134, i1 false), !range !20\l  %136 = fmul float %133, 0x3FF921FB40000000\l  %137 = add nuw nsw i32 %135, %124\l  %138 = shl nuw nsw i32 %137, 23\l  %139 = sub nuw nsw i32 855638016, %138\l  %140 = sub nsw i32 31, %135\l  %141 = tail call i32 @llvm.fshr.i32(i32 %134, i32 %127, i32 %140)\l  %142 = lshr i32 %141, 9\l  %143 = or i32 %139, %142\l  %144 = or i32 %143, %120\l  %145 = bitcast i32 %144 to float\l  %146 = fneg float %136\l  %147 = tail call float @llvm.fma.f32(float %133, float 0x3FF921FB40000000,\l... float %146)\l  %148 = tail call float @llvm.fma.f32(float %133, float 0x3E74442D00000000,\l... float %147)\l  %149 = tail call float @llvm.fma.f32(float %145, float 0x3FF921FB40000000,\l... float %148)\l  %150 = fadd float %136, %149\l  %151 = lshr i32 %111, 30\l  %152 = add nuw nsw i32 %118, %151\l  br label %153\l}"];
	Node0x5105170 -> Node0x5105c20;
	Node0x5105c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%153:\l153:                                              \l  %154 = phi i32 [ %46, %39 ], [ %48, %47 ]\l  %155 = phi float [ %44, %39 ], [ %150, %47 ]\l  %156 = phi i32 [ %45, %39 ], [ %152, %47 ]\l  %157 = fmul float %155, %155\l  %158 = tail call float @llvm.fmuladd.f32(float %157, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %159 = tail call float @llvm.fmuladd.f32(float %157, float %158, float\l... 0xBFC55553A0000000)\l  %160 = fmul float %157, %159\l  %161 = tail call float @llvm.fmuladd.f32(float %155, float %160, float %155)\l  %162 = tail call float @llvm.fmuladd.f32(float %157, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %163 = tail call float @llvm.fmuladd.f32(float %157, float %162, float\l... 0x3FA5557EE0000000)\l  %164 = tail call float @llvm.fmuladd.f32(float %157, float %163, float\l... 0xBFE0000080000000)\l  %165 = tail call float @llvm.fmuladd.f32(float %157, float %164, float\l... 1.000000e+00)\l  %166 = and i32 %156, 1\l  %167 = icmp eq i32 %166, 0\l  %168 = select i1 %167, float %161, float %165\l  %169 = bitcast float %168 to i32\l  %170 = shl i32 %156, 30\l  %171 = and i32 %170, -2147483648\l  %172 = bitcast float %36 to i32\l  %173 = xor i32 %154, %172\l  %174 = xor i32 %173, %171\l  %175 = xor i32 %174, %169\l  %176 = bitcast i32 %175 to float\l  %177 = tail call i1 @llvm.amdgcn.class.f32(float %37, i32 504)\l  %178 = select i1 %177, float %176, float 0x7FF8000000000000\l  %179 = getelementptr inbounds float, float addrspace(1)* %4, i64 %34\l  store float %178, float addrspace(1)* %179, align 4, !tbaa !16\l  br label %180\l}"];
	Node0x5105c20 -> Node0x5103b60;
	Node0x5103b60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%180:\l180:                                              \l  %181 = add i32 %25, %28\l  %182 = icmp slt i32 %181, %0\l  br i1 %182, label %27, label %26, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5103b60:s0 -> Node0x5103a50;
	Node0x5103b60:s1 -> Node0x51035d0;
}
