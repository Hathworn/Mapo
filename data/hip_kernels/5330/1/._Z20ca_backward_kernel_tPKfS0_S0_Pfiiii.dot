digraph "CFG for '_Z20ca_backward_kernel_tPKfS0_S0_Pfiiii' function" {
	label="CFG for '_Z20ca_backward_kernel_tPKfS0_S0_Pfiiii' function";

	Node0x5b0e800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = mul nsw i32 %7, %6\l  %27 = add nsw i32 %6, -1\l  %28 = add i32 %27, %7\l  %29 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %30 = icmp slt i32 %17, %7\l  %31 = icmp slt i32 %25, %6\l  %32 = select i1 %30, i1 %31, i1 false\l  %33 = icmp slt i32 %29, %5\l  %34 = select i1 %32, i1 %33, i1 false\l  %35 = icmp sgt i32 %4, 0\l  %36 = select i1 %34, i1 %35, i1 false\l  br i1 %36, label %37, label %225\l|{<s0>T|<s1>F}}"];
	Node0x5b0e800:s0 -> Node0x5b10690;
	Node0x5b0e800:s1 -> Node0x5b12a80;
	Node0x5b10690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%37:\l37:                                               \l  %38 = icmp sgt i32 %7, 0\l  %39 = mul nsw i32 %25, %7\l  %40 = add i32 %39, %17\l  %41 = icmp sgt i32 %6, 0\l  %42 = and i32 %7, 3\l  %43 = icmp ult i32 %7, 4\l  %44 = and i32 %7, -4\l  %45 = icmp eq i32 %42, 0\l  %46 = and i32 %6, 1\l  %47 = icmp eq i32 %6, 1\l  %48 = and i32 %6, -2\l  %49 = icmp eq i32 %46, 0\l  br label %50\l}"];
	Node0x5b10690 -> Node0x5b13370;
	Node0x5b13370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%50:\l50:                                               \l  %51 = phi i32 [ 0, %37 ], [ %176, %175 ]\l  br i1 %38, label %52, label %84\l|{<s0>T|<s1>F}}"];
	Node0x5b13370:s0 -> Node0x5b135a0;
	Node0x5b13370:s1 -> Node0x5b13630;
	Node0x5b135a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%52:\l52:                                               \l  %53 = mul nsw i32 %51, %28\l  %54 = mul nsw i32 %51, %5\l  %55 = add nsw i32 %54, %29\l  %56 = mul nsw i32 %55, %26\l  %57 = add nsw i32 %56, %39\l  %58 = add nsw i32 %57, %17\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %3, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7\l  br i1 %43, label %62, label %95\l|{<s0>T|<s1>F}}"];
	Node0x5b135a0:s0 -> Node0x5b13db0;
	Node0x5b135a0:s1 -> Node0x5b13e40;
	Node0x5b13db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%62:\l62:                                               \l  %63 = phi float [ %61, %52 ], [ %149, %95 ]\l  %64 = phi i32 [ 0, %52 ], [ %150, %95 ]\l  br i1 %45, label %84, label %65\l|{<s0>T|<s1>F}}"];
	Node0x5b13db0:s0 -> Node0x5b13630;
	Node0x5b13db0:s1 -> Node0x5b12640;
	Node0x5b12640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%65:\l65:                                               \l  %66 = phi float [ %80, %65 ], [ %63, %62 ]\l  %67 = phi i32 [ %81, %65 ], [ %64, %62 ]\l  %68 = phi i32 [ %82, %65 ], [ 0, %62 ]\l  %69 = add nsw i32 %67, %53\l  %70 = mul nsw i32 %69, %26\l  %71 = add i32 %40, %70\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7\l  %75 = add nsw i32 %67, %57\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %2, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7\l  %79 = fmul contract float %74, %78\l  %80 = fadd contract float %66, %79\l  store float %80, float addrspace(1)* %60, align 4, !tbaa !7\l  %81 = add nuw nsw i32 %67, 1\l  %82 = add i32 %68, 1\l  %83 = icmp eq i32 %82, %42\l  br i1 %83, label %84, label %65, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5b12640:s0 -> Node0x5b13630;
	Node0x5b12640:s1 -> Node0x5b12640;
	Node0x5b13630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%84:\l84:                                               \l  br i1 %41, label %85, label %175\l|{<s0>T|<s1>F}}"];
	Node0x5b13630:s0 -> Node0x5b157e0;
	Node0x5b13630:s1 -> Node0x5b13460;
	Node0x5b157e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%85:\l85:                                               \l  %86 = mul nsw i32 %51, %28\l  %87 = add i32 %86, %7\l  %88 = mul nsw i32 %51, %5\l  %89 = add nsw i32 %88, %29\l  %90 = mul nsw i32 %89, %26\l  %91 = add i32 %90, %17\l  %92 = add i32 %40, %90\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %3, i64 %93\l  br i1 %47, label %153, label %178\l|{<s0>T|<s1>F}}"];
	Node0x5b157e0:s0 -> Node0x5b15de0;
	Node0x5b157e0:s1 -> Node0x5b15e30;
	Node0x5b13e40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%95:\l95:                                               \l  %96 = phi float [ %149, %95 ], [ %61, %52 ]\l  %97 = phi i32 [ %150, %95 ], [ 0, %52 ]\l  %98 = phi i32 [ %151, %95 ], [ 0, %52 ]\l  %99 = add nsw i32 %97, %53\l  %100 = mul nsw i32 %99, %26\l  %101 = add i32 %40, %100\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7\l  %105 = add nsw i32 %97, %57\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %2, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7\l  %109 = fmul contract float %104, %108\l  %110 = fadd contract float %96, %109\l  store float %110, float addrspace(1)* %60, align 4, !tbaa !7\l  %111 = or i32 %97, 1\l  %112 = add nsw i32 %111, %53\l  %113 = mul nsw i32 %112, %26\l  %114 = add i32 %40, %113\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7\l  %118 = add nsw i32 %111, %57\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %2, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7\l  %122 = fmul contract float %117, %121\l  %123 = fadd contract float %110, %122\l  store float %123, float addrspace(1)* %60, align 4, !tbaa !7\l  %124 = or i32 %97, 2\l  %125 = add nsw i32 %124, %53\l  %126 = mul nsw i32 %125, %26\l  %127 = add i32 %40, %126\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !7\l  %131 = add nsw i32 %124, %57\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %2, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7\l  %135 = fmul contract float %130, %134\l  %136 = fadd contract float %123, %135\l  store float %136, float addrspace(1)* %60, align 4, !tbaa !7\l  %137 = or i32 %97, 3\l  %138 = add nsw i32 %137, %53\l  %139 = mul nsw i32 %138, %26\l  %140 = add i32 %40, %139\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7\l  %144 = add nsw i32 %137, %57\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %2, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7\l  %148 = fmul contract float %143, %147\l  %149 = fadd contract float %136, %148\l  store float %149, float addrspace(1)* %60, align 4, !tbaa !7\l  %150 = add nuw nsw i32 %97, 4\l  %151 = add i32 %98, 4\l  %152 = icmp eq i32 %151, %44\l  br i1 %152, label %62, label %95, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5b13e40:s0 -> Node0x5b13db0;
	Node0x5b13e40:s1 -> Node0x5b13e40;
	Node0x5b15de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%153:\l153:                                              \l  %154 = phi i32 [ 0, %85 ], [ %222, %221 ]\l  %155 = icmp eq i32 %154, %25\l  %156 = select i1 %49, i1 true, i1 %155\l  br i1 %156, label %175, label %157\l|{<s0>T|<s1>F}}"];
	Node0x5b15de0:s0 -> Node0x5b13460;
	Node0x5b15de0:s1 -> Node0x5b18860;
	Node0x5b18860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%157:\l157:                                              \l  %158 = icmp sge i32 %154, %25\l  %159 = sext i1 %158 to i32\l  %160 = add i32 %87, %154\l  %161 = add i32 %160, %159\l  %162 = mul nsw i32 %161, %26\l  %163 = add i32 %40, %162\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %0, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !7\l  %167 = mul nsw i32 %154, %7\l  %168 = add i32 %91, %167\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %2, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !7\l  %172 = fmul contract float %166, %171\l  %173 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %174 = fadd contract float %173, %172\l  store float %174, float addrspace(1)* %94, align 4, !tbaa !7\l  br label %175\l}"];
	Node0x5b18860 -> Node0x5b13460;
	Node0x5b13460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%175:\l175:                                              \l  %176 = add nuw nsw i32 %51, 1\l  %177 = icmp eq i32 %176, %4\l  br i1 %177, label %225, label %50, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5b13460:s0 -> Node0x5b12a80;
	Node0x5b13460:s1 -> Node0x5b13370;
	Node0x5b15e30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%178:\l178:                                              \l  %179 = phi i32 [ %222, %221 ], [ 0, %85 ]\l  %180 = phi i32 [ %223, %221 ], [ 0, %85 ]\l  %181 = icmp eq i32 %179, %25\l  br i1 %181, label %200, label %182\l|{<s0>T|<s1>F}}"];
	Node0x5b15e30:s0 -> Node0x5b197d0;
	Node0x5b15e30:s1 -> Node0x5b19860;
	Node0x5b19860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%182:\l182:                                              \l  %183 = icmp sge i32 %179, %25\l  %184 = sext i1 %183 to i32\l  %185 = add i32 %87, %179\l  %186 = add i32 %185, %184\l  %187 = mul nsw i32 %186, %26\l  %188 = add i32 %40, %187\l  %189 = sext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %0, i64 %189\l  %191 = load float, float addrspace(1)* %190, align 4, !tbaa !7\l  %192 = mul nsw i32 %179, %7\l  %193 = add i32 %91, %192\l  %194 = sext i32 %193 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %2, i64 %194\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !7\l  %197 = fmul contract float %191, %196\l  %198 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %199 = fadd contract float %198, %197\l  store float %199, float addrspace(1)* %94, align 4, !tbaa !7\l  br label %200\l}"];
	Node0x5b19860 -> Node0x5b197d0;
	Node0x5b197d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%200:\l200:                                              \l  %201 = or i32 %179, 1\l  %202 = icmp eq i32 %201, %25\l  br i1 %202, label %221, label %203\l|{<s0>T|<s1>F}}"];
	Node0x5b197d0:s0 -> Node0x5b14500;
	Node0x5b197d0:s1 -> Node0x5b1a4b0;
	Node0x5b1a4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%203:\l203:                                              \l  %204 = icmp sge i32 %201, %25\l  %205 = sext i1 %204 to i32\l  %206 = add i32 %87, %201\l  %207 = add i32 %206, %205\l  %208 = mul nsw i32 %207, %26\l  %209 = add i32 %40, %208\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds float, float addrspace(1)* %0, i64 %210\l  %212 = load float, float addrspace(1)* %211, align 4, !tbaa !7\l  %213 = mul nsw i32 %201, %7\l  %214 = add i32 %91, %213\l  %215 = sext i32 %214 to i64\l  %216 = getelementptr inbounds float, float addrspace(1)* %2, i64 %215\l  %217 = load float, float addrspace(1)* %216, align 4, !tbaa !7\l  %218 = fmul contract float %212, %217\l  %219 = load float, float addrspace(1)* %94, align 4, !tbaa !7\l  %220 = fadd contract float %219, %218\l  store float %220, float addrspace(1)* %94, align 4, !tbaa !7\l  br label %221\l}"];
	Node0x5b1a4b0 -> Node0x5b14500;
	Node0x5b14500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%221:\l221:                                              \l  %222 = add nuw nsw i32 %179, 2\l  %223 = add i32 %180, 2\l  %224 = icmp eq i32 %223, %48\l  br i1 %224, label %153, label %178, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5b14500:s0 -> Node0x5b15de0;
	Node0x5b14500:s1 -> Node0x5b15e30;
	Node0x5b12a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%225:\l225:                                              \l  ret void\l}"];
}
