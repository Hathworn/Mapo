digraph "CFG for '_Z21ca_map_forward_kernelPKfS0_Pfiiii' function" {
	label="CFG for '_Z21ca_map_forward_kernelPKfS0_Pfiiii' function";

	Node0x4b5d740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = mul nsw i32 %6, %5\l  %26 = add nsw i32 %5, -1\l  %27 = add i32 %26, %6\l  %28 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %29 = icmp slt i32 %16, %6\l  %30 = icmp slt i32 %24, %5\l  %31 = select i1 %29, i1 %30, i1 false\l  %32 = icmp slt i32 %28, %4\l  %33 = select i1 %31, i1 %32, i1 false\l  %34 = icmp sgt i32 %3, 0\l  %35 = select i1 %33, i1 %34, i1 false\l  br i1 %35, label %36, label %224\l|{<s0>T|<s1>F}}"];
	Node0x4b5d740:s0 -> Node0x4b61970;
	Node0x4b5d740:s1 -> Node0x4b61a00;
	Node0x4b61970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%36:\l36:                                               \l  %37 = icmp sgt i32 %6, 0\l  %38 = mul nsw i32 %24, %6\l  %39 = add i32 %38, %16\l  %40 = icmp sgt i32 %5, 0\l  %41 = and i32 %6, 3\l  %42 = icmp ult i32 %6, 4\l  %43 = and i32 %6, -4\l  %44 = icmp eq i32 %41, 0\l  %45 = and i32 %5, 1\l  %46 = icmp eq i32 %5, 1\l  %47 = and i32 %5, -2\l  %48 = icmp eq i32 %45, 0\l  br label %49\l}"];
	Node0x4b61970 -> Node0x4b622c0;
	Node0x4b622c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%49:\l49:                                               \l  %50 = phi i32 [ 0, %36 ], [ %175, %174 ]\l  br i1 %37, label %51, label %83\l|{<s0>T|<s1>F}}"];
	Node0x4b622c0:s0 -> Node0x4b624f0;
	Node0x4b622c0:s1 -> Node0x4b62580;
	Node0x4b624f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%51:\l51:                                               \l  %52 = mul nsw i32 %50, %4\l  %53 = add nsw i32 %52, %28\l  %54 = mul nsw i32 %53, %25\l  %55 = add nsw i32 %54, %38\l  %56 = mul nsw i32 %50, %27\l  %57 = add nsw i32 %55, %16\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %2, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !7\l  br i1 %42, label %61, label %94\l|{<s0>T|<s1>F}}"];
	Node0x4b624f0:s0 -> Node0x4b62d00;
	Node0x4b624f0:s1 -> Node0x4b62d90;
	Node0x4b62d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%61:\l61:                                               \l  %62 = phi float [ %60, %51 ], [ %148, %94 ]\l  %63 = phi i32 [ 0, %51 ], [ %149, %94 ]\l  br i1 %44, label %83, label %64\l|{<s0>T|<s1>F}}"];
	Node0x4b62d00:s0 -> Node0x4b62580;
	Node0x4b62d00:s1 -> Node0x4b630a0;
	Node0x4b630a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%64:\l64:                                               \l  %65 = phi float [ %79, %64 ], [ %62, %61 ]\l  %66 = phi i32 [ %80, %64 ], [ %63, %61 ]\l  %67 = phi i32 [ %81, %64 ], [ 0, %61 ]\l  %68 = add nsw i32 %66, %55\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7\l  %72 = add nsw i32 %66, %56\l  %73 = mul nsw i32 %72, %25\l  %74 = add i32 %39, %73\l  %75 = sext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !7\l  %78 = fmul contract float %71, %77\l  %79 = fadd contract float %65, %78\l  store float %79, float addrspace(1)* %59, align 4, !tbaa !7\l  %80 = add nuw nsw i32 %66, 1\l  %81 = add i32 %67, 1\l  %82 = icmp eq i32 %81, %41\l  br i1 %82, label %83, label %64, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4b630a0:s0 -> Node0x4b62580;
	Node0x4b630a0:s1 -> Node0x4b630a0;
	Node0x4b62580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%83:\l83:                                               \l  br i1 %40, label %84, label %174\l|{<s0>T|<s1>F}}"];
	Node0x4b62580:s0 -> Node0x4b64720;
	Node0x4b62580:s1 -> Node0x4b623b0;
	Node0x4b64720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%84:\l84:                                               \l  %85 = mul nsw i32 %50, %4\l  %86 = add nsw i32 %85, %28\l  %87 = mul nsw i32 %86, %25\l  %88 = add i32 %87, %16\l  %89 = mul nsw i32 %50, %27\l  %90 = add i32 %89, %6\l  %91 = add i32 %39, %87\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %2, i64 %92\l  br i1 %46, label %152, label %177\l|{<s0>T|<s1>F}}"];
	Node0x4b64720:s0 -> Node0x4b64d20;
	Node0x4b64720:s1 -> Node0x4b64d70;
	Node0x4b62d90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%94:\l94:                                               \l  %95 = phi float [ %148, %94 ], [ %60, %51 ]\l  %96 = phi i32 [ %149, %94 ], [ 0, %51 ]\l  %97 = phi i32 [ %150, %94 ], [ 0, %51 ]\l  %98 = add nsw i32 %96, %55\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7\l  %102 = add nsw i32 %96, %56\l  %103 = mul nsw i32 %102, %25\l  %104 = add i32 %39, %103\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7\l  %108 = fmul contract float %101, %107\l  %109 = fadd contract float %95, %108\l  store float %109, float addrspace(1)* %59, align 4, !tbaa !7\l  %110 = or i32 %96, 1\l  %111 = add nsw i32 %110, %55\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7\l  %115 = add nsw i32 %110, %56\l  %116 = mul nsw i32 %115, %25\l  %117 = add i32 %39, %116\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7\l  %121 = fmul contract float %114, %120\l  %122 = fadd contract float %109, %121\l  store float %122, float addrspace(1)* %59, align 4, !tbaa !7\l  %123 = or i32 %96, 2\l  %124 = add nsw i32 %123, %55\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7\l  %128 = add nsw i32 %123, %56\l  %129 = mul nsw i32 %128, %25\l  %130 = add i32 %39, %129\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7\l  %134 = fmul contract float %127, %133\l  %135 = fadd contract float %122, %134\l  store float %135, float addrspace(1)* %59, align 4, !tbaa !7\l  %136 = or i32 %96, 3\l  %137 = add nsw i32 %136, %55\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %1, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !7\l  %141 = add nsw i32 %136, %56\l  %142 = mul nsw i32 %141, %25\l  %143 = add i32 %39, %142\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7\l  %147 = fmul contract float %140, %146\l  %148 = fadd contract float %135, %147\l  store float %148, float addrspace(1)* %59, align 4, !tbaa !7\l  %149 = add nuw nsw i32 %96, 4\l  %150 = add i32 %97, 4\l  %151 = icmp eq i32 %150, %43\l  br i1 %151, label %61, label %94, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b62d90:s0 -> Node0x4b62d00;
	Node0x4b62d90:s1 -> Node0x4b62d90;
	Node0x4b64d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%152:\l152:                                              \l  %153 = phi i32 [ 0, %84 ], [ %221, %220 ]\l  %154 = icmp eq i32 %153, %24\l  %155 = select i1 %48, i1 true, i1 %154\l  br i1 %155, label %174, label %156\l|{<s0>T|<s1>F}}"];
	Node0x4b64d20:s0 -> Node0x4b623b0;
	Node0x4b64d20:s1 -> Node0x4b67750;
	Node0x4b67750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%156:\l156:                                              \l  %157 = icmp sge i32 %153, %24\l  %158 = sext i1 %157 to i32\l  %159 = mul nsw i32 %153, %6\l  %160 = add i32 %88, %159\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %1, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7\l  %164 = add i32 %90, %153\l  %165 = add i32 %164, %158\l  %166 = mul nsw i32 %165, %25\l  %167 = add i32 %39, %166\l  %168 = sext i32 %167 to i64\l  %169 = getelementptr inbounds float, float addrspace(1)* %0, i64 %168\l  %170 = load float, float addrspace(1)* %169, align 4, !tbaa !7\l  %171 = fmul contract float %163, %170\l  %172 = load float, float addrspace(1)* %93, align 4, !tbaa !7\l  %173 = fadd contract float %172, %171\l  store float %173, float addrspace(1)* %93, align 4, !tbaa !7\l  br label %174\l}"];
	Node0x4b67750 -> Node0x4b623b0;
	Node0x4b623b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%174:\l174:                                              \l  %175 = add nuw nsw i32 %50, 1\l  %176 = icmp eq i32 %175, %3\l  br i1 %176, label %224, label %49, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4b623b0:s0 -> Node0x4b61a00;
	Node0x4b623b0:s1 -> Node0x4b622c0;
	Node0x4b64d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%177:\l177:                                              \l  %178 = phi i32 [ %221, %220 ], [ 0, %84 ]\l  %179 = phi i32 [ %222, %220 ], [ 0, %84 ]\l  %180 = icmp eq i32 %178, %24\l  br i1 %180, label %199, label %181\l|{<s0>T|<s1>F}}"];
	Node0x4b64d70:s0 -> Node0x4b686c0;
	Node0x4b64d70:s1 -> Node0x4b68750;
	Node0x4b68750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%181:\l181:                                              \l  %182 = icmp sge i32 %178, %24\l  %183 = sext i1 %182 to i32\l  %184 = mul nsw i32 %178, %6\l  %185 = add i32 %88, %184\l  %186 = sext i32 %185 to i64\l  %187 = getelementptr inbounds float, float addrspace(1)* %1, i64 %186\l  %188 = load float, float addrspace(1)* %187, align 4, !tbaa !7\l  %189 = add i32 %90, %178\l  %190 = add i32 %189, %183\l  %191 = mul nsw i32 %190, %25\l  %192 = add i32 %39, %191\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds float, float addrspace(1)* %0, i64 %193\l  %195 = load float, float addrspace(1)* %194, align 4, !tbaa !7\l  %196 = fmul contract float %188, %195\l  %197 = load float, float addrspace(1)* %93, align 4, !tbaa !7\l  %198 = fadd contract float %197, %196\l  store float %198, float addrspace(1)* %93, align 4, !tbaa !7\l  br label %199\l}"];
	Node0x4b68750 -> Node0x4b686c0;
	Node0x4b686c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%199:\l199:                                              \l  %200 = or i32 %178, 1\l  %201 = icmp eq i32 %200, %24\l  br i1 %201, label %220, label %202\l|{<s0>T|<s1>F}}"];
	Node0x4b686c0:s0 -> Node0x4b635a0;
	Node0x4b686c0:s1 -> Node0x4b693a0;
	Node0x4b693a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%202:\l202:                                              \l  %203 = icmp sge i32 %200, %24\l  %204 = sext i1 %203 to i32\l  %205 = mul nsw i32 %200, %6\l  %206 = add i32 %88, %205\l  %207 = sext i32 %206 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %1, i64 %207\l  %209 = load float, float addrspace(1)* %208, align 4, !tbaa !7\l  %210 = add i32 %90, %200\l  %211 = add i32 %210, %204\l  %212 = mul nsw i32 %211, %25\l  %213 = add i32 %39, %212\l  %214 = sext i32 %213 to i64\l  %215 = getelementptr inbounds float, float addrspace(1)* %0, i64 %214\l  %216 = load float, float addrspace(1)* %215, align 4, !tbaa !7\l  %217 = fmul contract float %209, %216\l  %218 = load float, float addrspace(1)* %93, align 4, !tbaa !7\l  %219 = fadd contract float %218, %217\l  store float %219, float addrspace(1)* %93, align 4, !tbaa !7\l  br label %220\l}"];
	Node0x4b693a0 -> Node0x4b635a0;
	Node0x4b635a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%220:\l220:                                              \l  %221 = add nuw nsw i32 %178, 2\l  %222 = add i32 %179, 2\l  %223 = icmp eq i32 %222, %47\l  br i1 %223, label %152, label %177, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4b635a0:s0 -> Node0x4b64d20;
	Node0x4b635a0:s1 -> Node0x4b64d70;
	Node0x4b61a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%224:\l224:                                              \l  ret void\l}"];
}
