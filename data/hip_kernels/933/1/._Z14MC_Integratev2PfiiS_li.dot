digraph "CFG for '_Z14MC_Integratev2PfiiS_li' function" {
	label="CFG for '_Z14MC_Integratev2PfiiS_li' function";

	Node0x5658b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%6:\l  %7 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  store float 0.000000e+00, float addrspace(3)* getelementptr inbounds ([0 x\l... float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 0), align 4, !tbaa\l... !7\l  %17 = add nsw i32 %2, 2\l  %18 = mul nsw i32 %17, %1\l  %19 = icmp slt i32 %15, %18\l  br i1 %19, label %20, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5658b10:s0 -> Node0x5658da0;
	Node0x5658b10:s1 -> Node0x565eee0;
	Node0x5658da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%20:\l20:                                               \l  %21 = zext i32 %15 to i64\l  %22 = getelementptr inbounds float, float addrspace(1)* %0, i64 %21\l  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %24 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %15\l  store float %23, float addrspace(3)* %24, align 4, !tbaa !7\l  br label %25\l}"];
	Node0x5658da0 -> Node0x565eee0;
	Node0x565eee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%25:\l25:                                               \l  %26 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %26) #5\l  %27 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 0\l  %28 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 1\l  %29 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 2\l  %30 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 3\l  %31 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 4\l  %32 = trunc i64 %4 to i32\l  %33 = xor i32 %32, 746559103\l  %34 = lshr i64 %4, 32\l  %35 = trunc i64 %34 to i32\l  %36 = xor i32 %35, -1607034933\l  %37 = mul i32 %33, 1228688033\l  %38 = mul i32 %36, 2073658381\l  %39 = add i32 %37, 123456789\l  store i32 %39, i32 addrspace(5)* %27, align 8, !tbaa !11\l  %40 = xor i32 %37, 362436069\l  store i32 %40, i32 addrspace(5)* %28, align 4, !tbaa !11\l  %41 = add i32 %38, 521288629\l  store i32 %41, i32 addrspace(5)* %29, align 8, !tbaa !11\l  %42 = xor i32 %38, 88675123\l  store i32 %42, i32 addrspace(5)* %30, align 4, !tbaa !11\l  %43 = add i32 %37, 5783321\l  store i32 %43, i32 addrspace(5)* %31, align 8, !tbaa !11\l  %44 = add i32 %37, 6615241\l  %45 = add i32 %44, %38\l  %46 = icmp eq i32 %16, 0\l  br i1 %46, label %236, label %47\l|{<s0>T|<s1>F}}"];
	Node0x565eee0:s0 -> Node0x5661c90;
	Node0x565eee0:s1 -> Node0x5661d20;
	Node0x5661d20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%47:\l47:                                               \l  %48 = sext i32 %16 to i64\l  br label %49\l}"];
	Node0x5661d20 -> Node0x5661ed0;
	Node0x5661ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%49:\l49:                                               \l  %50 = phi i32 [ %63, %62 ], [ %43, %47 ]\l  %51 = phi i32 [ %64, %62 ], [ %42, %47 ]\l  %52 = phi i32 [ %65, %62 ], [ %41, %47 ]\l  %53 = phi i32 [ %66, %62 ], [ %40, %47 ]\l  %54 = phi i32 [ %67, %62 ], [ %39, %47 ]\l  %55 = phi i64 [ %69, %62 ], [ %48, %47 ]\l  %56 = phi i32 [ %68, %62 ], [ 0, %47 ]\l  %57 = trunc i64 %55 to i32\l  %58 = and i32 %57, 3\l  %59 = icmp eq i32 %58, 0\l  br i1 %59, label %62, label %60\l|{<s0>T|<s1>F}}"];
	Node0x5661ed0:s0 -> Node0x5661fc0;
	Node0x5661ed0:s1 -> Node0x5662950;
	Node0x5662950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%60:\l60:                                               \l  %61 = zext i32 %56 to i64\l  br label %71\l}"];
	Node0x5662950 -> Node0x5662b00;
	Node0x5661fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%62:\l62:                                               \l  %63 = phi i32 [ %50, %49 ], [ %230, %233 ]\l  %64 = phi i32 [ %51, %49 ], [ %224, %233 ]\l  %65 = phi i32 [ %52, %49 ], [ %218, %233 ]\l  %66 = phi i32 [ %53, %49 ], [ %212, %233 ]\l  %67 = phi i32 [ %54, %49 ], [ %206, %233 ]\l  %68 = add nuw nsw i32 %56, 1\l  %69 = lshr i64 %55, 2\l  %70 = icmp ult i64 %55, 4\l  br i1 %70, label %236, label %49, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5661fc0:s0 -> Node0x5661c90;
	Node0x5661fc0:s1 -> Node0x5661ed0;
	Node0x5662b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%71:\l71:                                               \l  %72 = phi i32 [ 0, %60 ], [ %234, %233 ]\l  br label %73\l}"];
	Node0x5662b00 -> Node0x5663580;
	Node0x5663580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi i32 [ 0, %71 ], [ %206, %73 ]\l  %75 = phi i32 [ 0, %71 ], [ %212, %73 ]\l  %76 = phi i32 [ 0, %71 ], [ %218, %73 ]\l  %77 = phi i32 [ 0, %71 ], [ %224, %73 ]\l  %78 = phi i32 [ 0, %71 ], [ %230, %73 ]\l  %79 = phi i32 [ 0, %71 ], [ %231, %73 ]\l  %80 = lshr i32 %79, 5\l  %81 = and i32 %79, 28\l  %82 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 %80\l  %83 = load i32, i32 addrspace(5)* %82, align 4, !tbaa !11\l  %84 = shl nuw i32 1, %81\l  %85 = and i32 %84, %83\l  %86 = icmp eq i32 %85, 0\l  %87 = mul nuw nsw i32 %79, 5\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %88\l  %90 = load i32, i32 addrspace(4)* %89, align 16, !tbaa !11\l  %91 = select i1 %86, i32 0, i32 %90\l  %92 = xor i32 %91, %74\l  %93 = or i32 %87, 1\l  %94 = zext i32 %93 to i64\l  %95 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %94\l  %96 = load i32, i32 addrspace(4)* %95, align 4, !tbaa !11\l  %97 = select i1 %86, i32 0, i32 %96\l  %98 = xor i32 %97, %75\l  %99 = or i32 %87, 2\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %100\l  %102 = load i32, i32 addrspace(4)* %101, align 8, !tbaa !11\l  %103 = select i1 %86, i32 0, i32 %102\l  %104 = xor i32 %103, %76\l  %105 = or i32 %87, 3\l  %106 = zext i32 %105 to i64\l  %107 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %106\l  %108 = load i32, i32 addrspace(4)* %107, align 4, !tbaa !11\l  %109 = select i1 %86, i32 0, i32 %108\l  %110 = xor i32 %109, %77\l  %111 = add nuw nsw i32 %87, 4\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %112\l  %114 = load i32, i32 addrspace(4)* %113, align 16, !tbaa !11\l  %115 = select i1 %86, i32 0, i32 %114\l  %116 = xor i32 %115, %78\l  %117 = or i32 %79, 1\l  %118 = lshr i32 %79, 5\l  %119 = and i32 %117, 29\l  %120 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 %118\l  %121 = load i32, i32 addrspace(5)* %120, align 4, !tbaa !11\l  %122 = shl nuw i32 1, %119\l  %123 = and i32 %122, %121\l  %124 = icmp eq i32 %123, 0\l  %125 = mul nuw nsw i32 %117, 5\l  %126 = zext i32 %125 to i64\l  %127 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %126\l  %128 = load i32, i32 addrspace(4)* %127, align 4, !tbaa !11\l  %129 = select i1 %124, i32 0, i32 %128\l  %130 = xor i32 %129, %92\l  %131 = add nuw nsw i32 %125, 1\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %132\l  %134 = load i32, i32 addrspace(4)* %133, align 8, !tbaa !11\l  %135 = select i1 %124, i32 0, i32 %134\l  %136 = xor i32 %135, %98\l  %137 = or i32 %125, 2\l  %138 = zext i32 %137 to i64\l  %139 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %138\l  %140 = load i32, i32 addrspace(4)* %139, align 4, !tbaa !11\l  %141 = select i1 %124, i32 0, i32 %140\l  %142 = xor i32 %141, %104\l  %143 = add nuw nsw i32 %125, 3\l  %144 = zext i32 %143 to i64\l  %145 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %144\l  %146 = load i32, i32 addrspace(4)* %145, align 16, !tbaa !11\l  %147 = select i1 %124, i32 0, i32 %146\l  %148 = xor i32 %147, %110\l  %149 = add nuw nsw i32 %125, 4\l  %150 = zext i32 %149 to i64\l  %151 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %150\l  %152 = load i32, i32 addrspace(4)* %151, align 4, !tbaa !11\l  %153 = select i1 %124, i32 0, i32 %152\l  %154 = xor i32 %153, %116\l  %155 = or i32 %79, 2\l  %156 = lshr i32 %79, 5\l  %157 = and i32 %155, 30\l  %158 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 %156\l  %159 = load i32, i32 addrspace(5)* %158, align 4, !tbaa !11\l  %160 = shl nuw i32 1, %157\l  %161 = and i32 %160, %159\l  %162 = icmp eq i32 %161, 0\l  %163 = mul nuw nsw i32 %155, 5\l  %164 = zext i32 %163 to i64\l  %165 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %164\l  %166 = load i32, i32 addrspace(4)* %165, align 8, !tbaa !11\l  %167 = select i1 %162, i32 0, i32 %166\l  %168 = xor i32 %167, %130\l  %169 = or i32 %163, 1\l  %170 = zext i32 %169 to i64\l  %171 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %170\l  %172 = load i32, i32 addrspace(4)* %171, align 4, !tbaa !11\l  %173 = select i1 %162, i32 0, i32 %172\l  %174 = xor i32 %173, %136\l  %175 = add nuw nsw i32 %163, 2\l  %176 = zext i32 %175 to i64\l  %177 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %176\l  %178 = load i32, i32 addrspace(4)* %177, align 16, !tbaa !11\l  %179 = select i1 %162, i32 0, i32 %178\l  %180 = xor i32 %179, %142\l  %181 = add nuw nsw i32 %163, 3\l  %182 = zext i32 %181 to i64\l  %183 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %182\l  %184 = load i32, i32 addrspace(4)* %183, align 4, !tbaa !11\l  %185 = select i1 %162, i32 0, i32 %184\l  %186 = xor i32 %185, %148\l  %187 = add nuw nsw i32 %163, 4\l  %188 = zext i32 %187 to i64\l  %189 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %188\l  %190 = load i32, i32 addrspace(4)* %189, align 8, !tbaa !11\l  %191 = select i1 %162, i32 0, i32 %190\l  %192 = xor i32 %191, %154\l  %193 = or i32 %79, 3\l  %194 = lshr i32 %79, 5\l  %195 = and i32 %193, 31\l  %196 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %7, i32 0, i32 0, i32 5,\l... i32 %194\l  %197 = load i32, i32 addrspace(5)* %196, align 4, !tbaa !11\l  %198 = shl nuw i32 1, %195\l  %199 = and i32 %198, %197\l  %200 = icmp eq i32 %199, 0\l  %201 = mul nuw nsw i32 %193, 5\l  %202 = zext i32 %201 to i64\l  %203 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %202\l  %204 = load i32, i32 addrspace(4)* %203, align 4, !tbaa !11\l  %205 = select i1 %200, i32 0, i32 %204\l  %206 = xor i32 %205, %168\l  %207 = add nuw nsw i32 %201, 1\l  %208 = zext i32 %207 to i64\l  %209 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %208\l  %210 = load i32, i32 addrspace(4)* %209, align 16, !tbaa !11\l  %211 = select i1 %200, i32 0, i32 %210\l  %212 = xor i32 %211, %174\l  %213 = add nuw nsw i32 %201, 2\l  %214 = zext i32 %213 to i64\l  %215 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %214\l  %216 = load i32, i32 addrspace(4)* %215, align 4, !tbaa !11\l  %217 = select i1 %200, i32 0, i32 %216\l  %218 = xor i32 %217, %180\l  %219 = add nuw nsw i32 %201, 3\l  %220 = zext i32 %219 to i64\l  %221 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %220\l  %222 = load i32, i32 addrspace(4)* %221, align 8, !tbaa !11\l  %223 = select i1 %200, i32 0, i32 %222\l  %224 = xor i32 %223, %186\l  %225 = add nuw nsw i32 %201, 4\l  %226 = zext i32 %225 to i64\l  %227 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %61, i64 %226\l  %228 = load i32, i32 addrspace(4)* %227, align 4, !tbaa !11\l  %229 = select i1 %200, i32 0, i32 %228\l  %230 = xor i32 %229, %192\l  %231 = add nuw nsw i32 %79, 4\l  %232 = icmp eq i32 %231, 160\l  br i1 %232, label %233, label %73, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5663580:s0 -> Node0x5662bf0;
	Node0x5663580:s1 -> Node0x5663580;
	Node0x5662bf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%233:\l233:                                              \l  store i32 %206, i32 addrspace(5)* %27, align 8, !tbaa !11\l  store i32 %212, i32 addrspace(5)* %28, align 4, !tbaa !11\l  store i32 %218, i32 addrspace(5)* %29, align 8, !tbaa !11\l  store i32 %224, i32 addrspace(5)* %30, align 4, !tbaa !11\l  store i32 %230, i32 addrspace(5)* %31, align 8, !tbaa !11\l  %234 = add nuw nsw i32 %72, 1\l  %235 = icmp eq i32 %234, %58\l  br i1 %235, label %62, label %71, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5662bf0:s0 -> Node0x5661fc0;
	Node0x5662bf0:s1 -> Node0x5662b00;
	Node0x5661c90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%236:\l236:                                              \l  %237 = phi i32 [ %43, %25 ], [ %63, %62 ]\l  %238 = phi i32 [ %42, %25 ], [ %64, %62 ]\l  %239 = phi i32 [ %41, %25 ], [ %65, %62 ]\l  %240 = phi i32 [ %40, %25 ], [ %66, %62 ]\l  %241 = phi i32 [ %39, %25 ], [ %67, %62 ]\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %26) #5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %242 = icmp sgt i32 %5, 0\l  br i1 %242, label %243, label %265\l|{<s0>T|<s1>F}}"];
	Node0x5661c90:s0 -> Node0x566a840;
	Node0x5661c90:s1 -> Node0x566a890;
	Node0x566a840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%243:\l243:                                              \l  %244 = icmp sgt i32 %2, 0\l  %245 = icmp sgt i32 %1, 1\l  %246 = and i32 %2, 7\l  %247 = icmp ult i32 %2, 8\l  %248 = and i32 %2, -8\l  %249 = icmp eq i32 %246, 0\l  %250 = and i32 %2, 7\l  %251 = icmp ult i32 %2, 8\l  %252 = and i32 %2, -8\l  %253 = icmp eq i32 %250, 0\l  br label %254\l}"];
	Node0x566a840 -> Node0x566af30;
	Node0x566af30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%254:\l254:                                              \l  %255 = phi i32 [ 0, %243 ], [ %603, %601 ]\l  %256 = phi float [ 0.000000e+00, %243 ], [ %602, %601 ]\l  %257 = phi i32 [ %45, %243 ], [ %348, %601 ]\l  %258 = phi i32 [ %241, %243 ], [ %347, %601 ]\l  %259 = phi i32 [ %240, %243 ], [ %346, %601 ]\l  %260 = phi i32 [ %239, %243 ], [ %345, %601 ]\l  %261 = phi i32 [ %238, %243 ], [ %344, %601 ]\l  %262 = phi i32 [ %237, %243 ], [ %343, %601 ]\l  %263 = phi \<10 x float\> [ undef, %243 ], [ %342, %601 ]\l  br i1 %244, label %264, label %285\l|{<s0>T|<s1>F}}"];
	Node0x566af30:s0 -> Node0x566cc80;
	Node0x566af30:s1 -> Node0x566cd10;
	Node0x566cc80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%264:\l264:                                              \l  br i1 %247, label %269, label %287\l|{<s0>T|<s1>F}}"];
	Node0x566cc80:s0 -> Node0x566ce50;
	Node0x566cc80:s1 -> Node0x566cea0;
	Node0x566a890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%265:\l265:                                              \l  %266 = phi float [ 0.000000e+00, %236 ], [ %602, %601 ]\l  %267 = atomicrmw fadd float addrspace(3)* getelementptr inbounds ([0 x\l... float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 0), float %266\l... syncscope(\"agent-one-as\") monotonic, align 4\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %268 = icmp eq i32 %15, 0\l  br i1 %268, label %635, label %638\l|{<s0>T|<s1>F}}"];
	Node0x566a890:s0 -> Node0x566d370;
	Node0x566a890:s1 -> Node0x566d3c0;
	Node0x566ce50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%269:\l269:                                              \l  %270 = phi \<10 x float\> [ undef, %264 ], [ %337, %287 ]\l  %271 = phi i32 [ 0, %264 ], [ %338, %287 ]\l  %272 = phi \<10 x float\> [ %263, %264 ], [ %337, %287 ]\l  br i1 %249, label %285, label %273\l|{<s0>T|<s1>F}}"];
	Node0x566ce50:s0 -> Node0x566cd10;
	Node0x566ce50:s1 -> Node0x566d780;
	Node0x566d780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%273:\l273:                                              \l  %274 = phi i32 [ %282, %273 ], [ %271, %269 ]\l  %275 = phi \<10 x float\> [ %281, %273 ], [ %272, %269 ]\l  %276 = phi i32 [ %283, %273 ], [ 0, %269 ]\l  %277 = add nuw nsw i32 %274, 2\l  %278 = mul nsw i32 %277, %1\l  %279 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %278\l  %280 = load float, float addrspace(3)* %279, align 4, !tbaa !7\l  %281 = insertelement \<10 x float\> %275, float %280, i32 %274\l  %282 = add nuw nsw i32 %274, 1\l  %283 = add i32 %276, 1\l  %284 = icmp eq i32 %283, %246\l  br i1 %284, label %285, label %273, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x566d780:s0 -> Node0x566cd10;
	Node0x566d780:s1 -> Node0x566d780;
	Node0x566cd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%285:\l285:                                              \l  %286 = phi \<10 x float\> [ %263, %254 ], [ %270, %269 ], [ %281, %273 ]\l  br i1 %245, label %350, label %341\l|{<s0>T|<s1>F}}"];
	Node0x566cd10:s0 -> Node0x566e2a0;
	Node0x566cd10:s1 -> Node0x566e2f0;
	Node0x566cea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%287:\l287:                                              \l  %288 = phi i32 [ %338, %287 ], [ 0, %264 ]\l  %289 = phi \<10 x float\> [ %337, %287 ], [ %263, %264 ]\l  %290 = phi i32 [ %339, %287 ], [ 0, %264 ]\l  %291 = or i32 %288, 2\l  %292 = mul nsw i32 %291, %1\l  %293 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %292\l  %294 = load float, float addrspace(3)* %293, align 4, !tbaa !7\l  %295 = insertelement \<10 x float\> %289, float %294, i32 %288\l  %296 = or i32 %288, 1\l  %297 = or i32 %288, 3\l  %298 = mul nsw i32 %297, %1\l  %299 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %298\l  %300 = load float, float addrspace(3)* %299, align 4, !tbaa !7\l  %301 = insertelement \<10 x float\> %295, float %300, i32 %296\l  %302 = or i32 %288, 2\l  %303 = or i32 %288, 4\l  %304 = mul nsw i32 %303, %1\l  %305 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %304\l  %306 = load float, float addrspace(3)* %305, align 4, !tbaa !7\l  %307 = insertelement \<10 x float\> %301, float %306, i32 %302\l  %308 = or i32 %288, 3\l  %309 = or i32 %288, 5\l  %310 = mul nsw i32 %309, %1\l  %311 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %310\l  %312 = load float, float addrspace(3)* %311, align 4, !tbaa !7\l  %313 = insertelement \<10 x float\> %307, float %312, i32 %308\l  %314 = or i32 %288, 4\l  %315 = or i32 %288, 6\l  %316 = mul nsw i32 %315, %1\l  %317 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %316\l  %318 = load float, float addrspace(3)* %317, align 4, !tbaa !7\l  %319 = insertelement \<10 x float\> %313, float %318, i32 %314\l  %320 = or i32 %288, 5\l  %321 = or i32 %288, 7\l  %322 = mul nsw i32 %321, %1\l  %323 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %322\l  %324 = load float, float addrspace(3)* %323, align 4, !tbaa !7\l  %325 = insertelement \<10 x float\> %319, float %324, i32 %320\l  %326 = or i32 %288, 6\l  %327 = add nuw nsw i32 %288, 8\l  %328 = mul nsw i32 %327, %1\l  %329 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %328\l  %330 = load float, float addrspace(3)* %329, align 4, !tbaa !7\l  %331 = insertelement \<10 x float\> %325, float %330, i32 %326\l  %332 = or i32 %288, 7\l  %333 = add nuw nsw i32 %288, 9\l  %334 = mul nsw i32 %333, %1\l  %335 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %334\l  %336 = load float, float addrspace(3)* %335, align 4, !tbaa !7\l  %337 = insertelement \<10 x float\> %331, float %336, i32 %332\l  %338 = add nuw nsw i32 %288, 8\l  %339 = add i32 %290, 8\l  %340 = icmp eq i32 %339, %248\l  br i1 %340, label %269, label %287, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x566cea0:s0 -> Node0x566ce50;
	Node0x566cea0:s1 -> Node0x566cea0;
	Node0x566e2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%341:\l341:                                              \l  %342 = phi \<10 x float\> [ %286, %285 ], [ %498, %497 ]\l  %343 = phi i32 [ %262, %285 ], [ %365, %497 ]\l  %344 = phi i32 [ %261, %285 ], [ %357, %497 ]\l  %345 = phi i32 [ %260, %285 ], [ %356, %497 ]\l  %346 = phi i32 [ %259, %285 ], [ %355, %497 ]\l  %347 = phi i32 [ %258, %285 ], [ %354, %497 ]\l  %348 = phi i32 [ %257, %285 ], [ %366, %497 ]\l  br i1 %244, label %349, label %601\l|{<s0>T|<s1>F}}"];
	Node0x566e2f0:s0 -> Node0x5671370;
	Node0x566e2f0:s1 -> Node0x566aff0;
	Node0x5671370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%349:\l349:                                              \l  br i1 %251, label %588, label %605\l|{<s0>T|<s1>F}}"];
	Node0x5671370:s0 -> Node0x5671470;
	Node0x5671370:s1 -> Node0x56714c0;
	Node0x566e2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%350:\l350:                                              \l  %351 = phi i32 [ %499, %497 ], [ 1, %285 ]\l  %352 = phi i32 [ %366, %497 ], [ %257, %285 ]\l  %353 = phi i32 [ %354, %497 ], [ %258, %285 ]\l  %354 = phi i32 [ %355, %497 ], [ %259, %285 ]\l  %355 = phi i32 [ %356, %497 ], [ %260, %285 ]\l  %356 = phi i32 [ %357, %497 ], [ %261, %285 ]\l  %357 = phi i32 [ %365, %497 ], [ %262, %285 ]\l  %358 = phi \<10 x float\> [ %498, %497 ], [ %286, %285 ]\l  %359 = lshr i32 %353, 2\l  %360 = xor i32 %359, %353\l  %361 = shl i32 %357, 4\l  %362 = shl i32 %360, 1\l  %363 = xor i32 %361, %362\l  %364 = xor i32 %363, %357\l  %365 = xor i32 %364, %360\l  %366 = add i32 %352, 362437\l  %367 = add i32 %365, %366\l  %368 = uitofp i32 %367 to float\l  %369 = fmul contract float %368, 0x3DF0000000000000\l  %370 = fadd contract float %369, 0x3DF0000000000000\l  %371 = add nsw i32 %351, %1\l  %372 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %371\l  %373 = load float, float addrspace(3)* %372, align 4, !tbaa !7\l  %374 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %351\l  %375 = load float, float addrspace(3)* %374, align 4, !tbaa !7\l  %376 = fsub contract float %373, %375\l  %377 = fmul contract float %370, %376\l  %378 = fadd contract float %375, %377\l  br i1 %244, label %379, label %497\l|{<s0>T|<s1>F}}"];
	Node0x566e2a0:s0 -> Node0x5672680;
	Node0x566e2a0:s1 -> Node0x5659d10;
	Node0x5672680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%379:\l379:                                              \l  %380 = tail call float @llvm.fabs.f32(float %378)\l  %381 = tail call float @llvm.amdgcn.frexp.mant.f32(float %380)\l  %382 = fcmp olt float %381, 0x3FE5555560000000\l  %383 = zext i1 %382 to i32\l  %384 = tail call float @llvm.amdgcn.ldexp.f32(float %381, i32 %383)\l  %385 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %380)\l  %386 = sub nsw i32 %385, %383\l  %387 = fadd float %384, -1.000000e+00\l  %388 = fadd float %384, 1.000000e+00\l  %389 = fadd float %388, -1.000000e+00\l  %390 = fsub float %384, %389\l  %391 = tail call float @llvm.amdgcn.rcp.f32(float %388)\l  %392 = fmul float %387, %391\l  %393 = fmul float %388, %392\l  %394 = fneg float %393\l  %395 = tail call float @llvm.fma.f32(float %392, float %388, float %394)\l  %396 = tail call float @llvm.fma.f32(float %392, float %390, float %395)\l  %397 = fadd float %393, %396\l  %398 = fsub float %397, %393\l  %399 = fsub float %396, %398\l  %400 = fsub float %387, %397\l  %401 = fsub float %387, %400\l  %402 = fsub float %401, %397\l  %403 = fsub float %402, %399\l  %404 = fadd float %400, %403\l  %405 = fmul float %391, %404\l  %406 = fadd float %392, %405\l  %407 = fsub float %406, %392\l  %408 = fsub float %405, %407\l  %409 = fmul float %406, %406\l  %410 = fneg float %409\l  %411 = tail call float @llvm.fma.f32(float %406, float %406, float %410)\l  %412 = fmul float %408, 2.000000e+00\l  %413 = tail call float @llvm.fma.f32(float %406, float %412, float %411)\l  %414 = fadd float %409, %413\l  %415 = fsub float %414, %409\l  %416 = fsub float %413, %415\l  %417 = tail call float @llvm.fmuladd.f32(float %414, float\l... 0x3FCED89C20000000, float 0x3FD23E9880000000)\l  %418 = tail call float @llvm.fmuladd.f32(float %414, float %417, float\l... 0x3FD999BDE0000000)\l  %419 = sitofp i32 %386 to float\l  %420 = fmul float %419, 0x3FE62E4300000000\l  %421 = fneg float %420\l  %422 = tail call float @llvm.fma.f32(float %419, float 0x3FE62E4300000000,\l... float %421)\l  %423 = tail call float @llvm.fma.f32(float %419, float 0xBE205C6100000000,\l... float %422)\l  %424 = fadd float %420, %423\l  %425 = fsub float %424, %420\l  %426 = fsub float %423, %425\l  %427 = tail call float @llvm.amdgcn.ldexp.f32(float %406, i32 1)\l  %428 = fmul float %406, %414\l  %429 = fneg float %428\l  %430 = tail call float @llvm.fma.f32(float %414, float %406, float %429)\l  %431 = tail call float @llvm.fma.f32(float %414, float %408, float %430)\l  %432 = tail call float @llvm.fma.f32(float %416, float %406, float %431)\l  %433 = fadd float %428, %432\l  %434 = fsub float %433, %428\l  %435 = fsub float %432, %434\l  %436 = fmul float %414, %418\l  %437 = fneg float %436\l  %438 = tail call float @llvm.fma.f32(float %414, float %418, float %437)\l  %439 = tail call float @llvm.fma.f32(float %416, float %418, float %438)\l  %440 = fadd float %436, %439\l  %441 = fsub float %440, %436\l  %442 = fsub float %439, %441\l  %443 = fadd float %440, 0x3FE5555540000000\l  %444 = fadd float %443, 0xBFE5555540000000\l  %445 = fsub float %440, %444\l  %446 = fadd float %442, 0x3E2E720200000000\l  %447 = fadd float %446, %445\l  %448 = fadd float %443, %447\l  %449 = fsub float %448, %443\l  %450 = fsub float %447, %449\l  %451 = fmul float %433, %448\l  %452 = fneg float %451\l  %453 = tail call float @llvm.fma.f32(float %433, float %448, float %452)\l  %454 = tail call float @llvm.fma.f32(float %433, float %450, float %453)\l  %455 = tail call float @llvm.fma.f32(float %435, float %448, float %454)\l  %456 = tail call float @llvm.amdgcn.ldexp.f32(float %408, i32 1)\l  %457 = fadd float %451, %455\l  %458 = fsub float %457, %451\l  %459 = fsub float %455, %458\l  %460 = fadd float %427, %457\l  %461 = fsub float %460, %427\l  %462 = fsub float %457, %461\l  %463 = fadd float %456, %459\l  %464 = fadd float %463, %462\l  %465 = fadd float %460, %464\l  %466 = fsub float %465, %460\l  %467 = fsub float %464, %466\l  %468 = fadd float %424, %465\l  %469 = fsub float %468, %424\l  %470 = fsub float %468, %469\l  %471 = fsub float %424, %470\l  %472 = fsub float %465, %469\l  %473 = fadd float %472, %471\l  %474 = fadd float %426, %467\l  %475 = fsub float %474, %426\l  %476 = fsub float %474, %475\l  %477 = fsub float %426, %476\l  %478 = fsub float %467, %475\l  %479 = fadd float %478, %477\l  %480 = fadd float %474, %473\l  %481 = fadd float %468, %480\l  %482 = fsub float %481, %468\l  %483 = fsub float %480, %482\l  %484 = fadd float %479, %483\l  %485 = fadd float %481, %484\l  %486 = fsub float %485, %481\l  %487 = fsub float %484, %486\l  %488 = fcmp olt float %378, 0.000000e+00\l  %489 = fcmp uge float %378, 0.000000e+00\l  %490 = fcmp oeq float %380, 1.000000e+00\l  %491 = fadd float %380, -1.000000e+00\l  %492 = bitcast float %491 to i32\l  %493 = fcmp oeq float %380, 0x7FF0000000000000\l  %494 = fcmp oeq float %378, 0.000000e+00\l  %495 = or i1 %494, %493\l  %496 = fcmp oeq float %378, 1.000000e+00\l  br label %501\l}"];
	Node0x5672680 -> Node0x5677eb0;
	Node0x5659d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%497:\l497:                                              \l  %498 = phi \<10 x float\> [ %358, %350 ], [ %585, %570 ]\l  %499 = add nuw nsw i32 %351, 1\l  %500 = icmp eq i32 %499, %1\l  br i1 %500, label %341, label %350, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5659d10:s0 -> Node0x566e2f0;
	Node0x5659d10:s1 -> Node0x566e2a0;
	Node0x5677eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%501:\l501:                                              \l  %502 = phi i32 [ 0, %379 ], [ %586, %570 ]\l  %503 = phi \<10 x float\> [ %358, %379 ], [ %585, %570 ]\l  %504 = add nuw nsw i32 %502, 2\l  %505 = mul nsw i32 %504, %1\l  %506 = add nsw i32 %505, %351\l  %507 = getelementptr inbounds float, float addrspace(3)* getelementptr\l... inbounds ([0 x float], [0 x float] addrspace(3)* @shared_mem, i32 0, i32 1),\l... i32 %506\l  %508 = load float, float addrspace(3)* %507, align 4, !tbaa !7\l  %509 = fmul float %485, %508\l  %510 = fneg float %509\l  %511 = tail call float @llvm.fma.f32(float %508, float %485, float %510)\l  %512 = tail call float @llvm.fma.f32(float %508, float %487, float %511)\l  %513 = fadd float %509, %512\l  %514 = fsub float %513, %509\l  %515 = fsub float %512, %514\l  %516 = tail call float @llvm.fabs.f32(float %509) #6\l  %517 = fcmp oeq float %516, 0x7FF0000000000000\l  %518 = select i1 %517, float %509, float %513\l  %519 = tail call float @llvm.fabs.f32(float %518) #6\l  %520 = fcmp oeq float %519, 0x7FF0000000000000\l  %521 = select i1 %520, float 0.000000e+00, float %515\l  %522 = fcmp oeq float %518, 0x40562E4300000000\l  %523 = select i1 %522, float 0x3EE0000000000000, float 0.000000e+00\l  %524 = fsub float %518, %523\l  %525 = fadd float %523, %521\l  %526 = fmul float %524, 0x3FF7154760000000\l  %527 = tail call float @llvm.rint.f32(float %526)\l  %528 = fcmp ogt float %524, 0x40562E4300000000\l  %529 = fcmp olt float %524, 0xC059D1DA00000000\l  %530 = fneg float %526\l  %531 = tail call float @llvm.fma.f32(float %524, float 0x3FF7154760000000,\l... float %530)\l  %532 = tail call float @llvm.fma.f32(float %524, float 0x3E54AE0BE0000000,\l... float %531)\l  %533 = fsub float %526, %527\l  %534 = fadd float %532, %533\l  %535 = tail call float @llvm.exp2.f32(float %534)\l  %536 = fptosi float %527 to i32\l  %537 = tail call float @llvm.amdgcn.ldexp.f32(float %535, i32 %536)\l  %538 = select i1 %529, float 0.000000e+00, float %537\l  %539 = select i1 %528, float 0x7FF0000000000000, float %538\l  %540 = tail call float @llvm.fma.f32(float %539, float %525, float %539)\l  %541 = tail call float @llvm.fabs.f32(float %539) #6\l  %542 = fcmp oeq float %541, 0x7FF0000000000000\l  %543 = select i1 %542, float %539, float %540\l  %544 = tail call float @llvm.fabs.f32(float %508)\l  %545 = tail call float @llvm.trunc.f32(float %544)\l  %546 = fcmp oeq float %544, %545\l  %547 = zext i1 %546 to i32\l  %548 = fmul float %545, 5.000000e-01\l  %549 = tail call float @llvm.amdgcn.fract.f32(float %548)\l  %550 = tail call i1 @llvm.amdgcn.class.f32(float %548, i32 516)\l  %551 = select i1 %550, float 0.000000e+00, float %549\l  %552 = fcmp oeq float %551, 0.000000e+00\l  %553 = and i1 %546, %552\l  %554 = zext i1 %553 to i32\l  %555 = add nuw nsw i32 %554, %547\l  %556 = icmp eq i32 %555, 1\l  %557 = and i1 %488, %556\l  %558 = select i1 %557, float -0.000000e+00, float 0.000000e+00\l  %559 = tail call float @llvm.copysign.f32(float %543, float %558)\l  %560 = icmp ne i32 %555, 0\l  %561 = select i1 %489, i1 true, i1 %560\l  %562 = select i1 %561, float %559, float 0x7FF8000000000000\l  %563 = fcmp oeq float %544, 0x7FF0000000000000\l  br i1 %563, label %564, label %570\l|{<s0>T|<s1>F}}"];
	Node0x5677eb0:s0 -> Node0x567c850;
	Node0x5677eb0:s1 -> Node0x5677fb0;
	Node0x567c850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%564:\l564:                                              \l  %565 = bitcast float %508 to i32\l  %566 = xor i32 %565, %492\l  %567 = icmp sgt i32 %566, -1\l  %568 = select i1 %567, float 0x7FF0000000000000, float 0.000000e+00\l  %569 = select i1 %490, float %380, float %568\l  br label %570\l}"];
	Node0x567c850 -> Node0x5677fb0;
	Node0x5677fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%570:\l570:                                              \l  %571 = phi float [ %562, %501 ], [ %569, %564 ]\l  %572 = fcmp olt float %508, 0.000000e+00\l  %573 = xor i1 %494, %572\l  %574 = select i1 %573, float 0.000000e+00, float 0x7FF0000000000000\l  %575 = select i1 %556, float %378, float 0.000000e+00\l  %576 = tail call float @llvm.copysign.f32(float %574, float %575)\l  %577 = select i1 %495, float %576, float %571\l  %578 = fcmp uno float %378, %508\l  %579 = select i1 %578, float 0x7FF8000000000000, float %577\l  %580 = fcmp oeq float %508, 0.000000e+00\l  %581 = or i1 %496, %580\l  %582 = select i1 %581, float 1.000000e+00, float %579\l  %583 = extractelement \<10 x float\> %503, i32 %502\l  %584 = fmul contract float %583, %582\l  %585 = insertelement \<10 x float\> %503, float %584, i32 %502\l  %586 = add nuw nsw i32 %502, 1\l  %587 = icmp eq i32 %586, %2\l  br i1 %587, label %497, label %501, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5677fb0:s0 -> Node0x5659d10;
	Node0x5677fb0:s1 -> Node0x5677eb0;
	Node0x5671470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%588:\l588:                                              \l  %589 = phi float [ undef, %349 ], [ %631, %605 ]\l  %590 = phi i32 [ 0, %349 ], [ %632, %605 ]\l  %591 = phi float [ %256, %349 ], [ %631, %605 ]\l  br i1 %253, label %601, label %592\l|{<s0>T|<s1>F}}"];
	Node0x5671470:s0 -> Node0x566aff0;
	Node0x5671470:s1 -> Node0x567db90;
	Node0x567db90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%592:\l592:                                              \l  %593 = phi i32 [ %598, %592 ], [ %590, %588 ]\l  %594 = phi float [ %597, %592 ], [ %591, %588 ]\l  %595 = phi i32 [ %599, %592 ], [ 0, %588 ]\l  %596 = extractelement \<10 x float\> %342, i32 %593\l  %597 = fadd contract float %594, %596\l  %598 = add nuw nsw i32 %593, 1\l  %599 = add i32 %595, 1\l  %600 = icmp eq i32 %599, %250\l  br i1 %600, label %601, label %592, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x567db90:s0 -> Node0x566aff0;
	Node0x567db90:s1 -> Node0x567db90;
	Node0x566aff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%601:\l601:                                              \l  %602 = phi float [ %256, %341 ], [ %589, %588 ], [ %597, %592 ]\l  %603 = add nuw nsw i32 %255, 1\l  %604 = icmp eq i32 %603, %5\l  br i1 %604, label %265, label %254, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x566aff0:s0 -> Node0x566a890;
	Node0x566aff0:s1 -> Node0x566af30;
	Node0x56714c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%605:\l605:                                              \l  %606 = phi i32 [ %632, %605 ], [ 0, %349 ]\l  %607 = phi float [ %631, %605 ], [ %256, %349 ]\l  %608 = phi i32 [ %633, %605 ], [ 0, %349 ]\l  %609 = extractelement \<10 x float\> %342, i32 %606\l  %610 = fadd contract float %607, %609\l  %611 = or i32 %606, 1\l  %612 = extractelement \<10 x float\> %342, i32 %611\l  %613 = fadd contract float %610, %612\l  %614 = or i32 %606, 2\l  %615 = extractelement \<10 x float\> %342, i32 %614\l  %616 = fadd contract float %613, %615\l  %617 = or i32 %606, 3\l  %618 = extractelement \<10 x float\> %342, i32 %617\l  %619 = fadd contract float %616, %618\l  %620 = or i32 %606, 4\l  %621 = extractelement \<10 x float\> %342, i32 %620\l  %622 = fadd contract float %619, %621\l  %623 = or i32 %606, 5\l  %624 = extractelement \<10 x float\> %342, i32 %623\l  %625 = fadd contract float %622, %624\l  %626 = or i32 %606, 6\l  %627 = extractelement \<10 x float\> %342, i32 %626\l  %628 = fadd contract float %625, %627\l  %629 = or i32 %606, 7\l  %630 = extractelement \<10 x float\> %342, i32 %629\l  %631 = fadd contract float %628, %630\l  %632 = add nuw nsw i32 %606, 8\l  %633 = add i32 %608, 8\l  %634 = icmp eq i32 %633, %252\l  br i1 %634, label %588, label %605, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x56714c0:s0 -> Node0x5671470;
	Node0x56714c0:s1 -> Node0x56714c0;
	Node0x566d370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7093f370",label="{%635:\l635:                                              \l  %636 = load float, float addrspace(3)* getelementptr inbounds ([0 x float],\l... [0 x float] addrspace(3)* @shared_mem, i32 0, i32 0), align 4, !tbaa !7\l  %637 = atomicrmw fadd float addrspace(1)* %3, float %636\l... syncscope(\"agent-one-as\") monotonic, align 4\l  br label %638\l}"];
	Node0x566d370 -> Node0x566d3c0;
	Node0x566d3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%638:\l638:                                              \l  ret void\l}"];
}
