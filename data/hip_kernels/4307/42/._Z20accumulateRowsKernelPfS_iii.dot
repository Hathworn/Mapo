digraph "CFG for '_Z20accumulateRowsKernelPfS_iii' function" {
	label="CFG for '_Z20accumulateRowsKernelPfS_iii' function";

	Node0x64f5700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = shl i32 %6, 4\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = add i32 %7, %8\l  %10 = mul nsw i32 %3, %2\l  %11 = icmp slt i32 %9, %10\l  br i1 %11, label %12, label %141\l|{<s0>T|<s1>F}}"];
	Node0x64f5700:s0 -> Node0x64f4960;
	Node0x64f5700:s1 -> Node0x64f6fc0;
	Node0x64f4960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%12:\l12:                                               \l  %13 = sdiv i32 %9, %3\l  %14 = add nsw i32 %9, 1\l  %15 = add i32 %14, %13\l  %16 = add nsw i32 %4, 1\l  %17 = mul nsw i32 %15, %16\l  %18 = sext i32 %17 to i64\l  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18\l  %20 = getelementptr inbounds float, float addrspace(1)* %19, i64 1\l  %21 = getelementptr inbounds float, float addrspace(1)* %20, i64 -1\l  store float 0.000000e+00, float addrspace(1)* %21, align 4, !tbaa !5\l  %22 = icmp sgt i32 %4, 0\l  br i1 %22, label %23, label %49\l|{<s0>T|<s1>F}}"];
	Node0x64f4960:s0 -> Node0x64f83a0;
	Node0x64f4960:s1 -> Node0x64f8430;
	Node0x64f83a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = mul nsw i32 %9, %4\l  %25 = and i32 %4, 7\l  %26 = icmp ult i32 %4, 8\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x64f83a0:s0 -> Node0x64f8780;
	Node0x64f83a0:s1 -> Node0x64f87d0;
	Node0x64f87d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %4, -8\l  br label %55\l}"];
	Node0x64f87d0 -> Node0x64f89d0;
	Node0x64f8780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = phi i32 [ 0, %23 ], [ %138, %55 ]\l  %31 = phi double [ 0.000000e+00, %23 ], [ %134, %55 ]\l  %32 = icmp eq i32 %25, 0\l  br i1 %32, label %49, label %33\l|{<s0>T|<s1>F}}"];
	Node0x64f8780:s0 -> Node0x64f8430;
	Node0x64f8780:s1 -> Node0x64f7340;
	Node0x64f7340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  %34 = phi i32 [ %46, %33 ], [ %30, %29 ]\l  %35 = phi double [ %42, %33 ], [ %31, %29 ]\l  %36 = phi i32 [ %47, %33 ], [ 0, %29 ]\l  %37 = add nsw i32 %34, %24\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !5\l  %41 = fpext float %40 to double\l  %42 = fadd contract double %35, %41\l  %43 = fptrunc double %42 to float\l  %44 = zext i32 %34 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %20, i64 %44\l  store float %43, float addrspace(1)* %45, align 4, !tbaa !5\l  %46 = add nuw nsw i32 %34, 1\l  %47 = add i32 %36, 1\l  %48 = icmp eq i32 %47, %25\l  br i1 %48, label %49, label %33, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x64f7340:s0 -> Node0x64f8430;
	Node0x64f7340:s1 -> Node0x64f7340;
	Node0x64f8430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%49:\l49:                                               \l  %50 = add nsw i32 %3, 1\l  %51 = mul i32 %16, %50\l  %52 = mul i32 %51, %13\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  store float 0.000000e+00, float addrspace(1)* %54, align 4, !tbaa !5\l  br label %141\l}"];
	Node0x64f8430 -> Node0x64f6fc0;
	Node0x64f89d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%55:\l55:                                               \l  %56 = phi i32 [ 0, %27 ], [ %138, %55 ]\l  %57 = phi double [ 0.000000e+00, %27 ], [ %134, %55 ]\l  %58 = phi i32 [ 0, %27 ], [ %139, %55 ]\l  %59 = add nsw i32 %56, %24\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !5\l  %63 = fpext float %62 to double\l  %64 = fadd contract double %57, %63\l  %65 = fptrunc double %64 to float\l  %66 = zext i32 %56 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %20, i64 %66\l  store float %65, float addrspace(1)* %67, align 4, !tbaa !5\l  %68 = or i32 %56, 1\l  %69 = add nsw i32 %68, %24\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !5\l  %73 = fpext float %72 to double\l  %74 = fadd contract double %64, %73\l  %75 = fptrunc double %74 to float\l  %76 = zext i32 %68 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %20, i64 %76\l  store float %75, float addrspace(1)* %77, align 4, !tbaa !5\l  %78 = or i32 %56, 2\l  %79 = add nsw i32 %78, %24\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !5\l  %83 = fpext float %82 to double\l  %84 = fadd contract double %74, %83\l  %85 = fptrunc double %84 to float\l  %86 = zext i32 %78 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %20, i64 %86\l  store float %85, float addrspace(1)* %87, align 4, !tbaa !5\l  %88 = or i32 %56, 3\l  %89 = add nsw i32 %88, %24\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !5\l  %93 = fpext float %92 to double\l  %94 = fadd contract double %84, %93\l  %95 = fptrunc double %94 to float\l  %96 = zext i32 %88 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %20, i64 %96\l  store float %95, float addrspace(1)* %97, align 4, !tbaa !5\l  %98 = or i32 %56, 4\l  %99 = add nsw i32 %98, %24\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !5\l  %103 = fpext float %102 to double\l  %104 = fadd contract double %94, %103\l  %105 = fptrunc double %104 to float\l  %106 = zext i32 %98 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %20, i64 %106\l  store float %105, float addrspace(1)* %107, align 4, !tbaa !5\l  %108 = or i32 %56, 5\l  %109 = add nsw i32 %108, %24\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !5\l  %113 = fpext float %112 to double\l  %114 = fadd contract double %104, %113\l  %115 = fptrunc double %114 to float\l  %116 = zext i32 %108 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %20, i64 %116\l  store float %115, float addrspace(1)* %117, align 4, !tbaa !5\l  %118 = or i32 %56, 6\l  %119 = add nsw i32 %118, %24\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !5\l  %123 = fpext float %122 to double\l  %124 = fadd contract double %114, %123\l  %125 = fptrunc double %124 to float\l  %126 = zext i32 %118 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %20, i64 %126\l  store float %125, float addrspace(1)* %127, align 4, !tbaa !5\l  %128 = or i32 %56, 7\l  %129 = add nsw i32 %128, %24\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !5\l  %133 = fpext float %132 to double\l  %134 = fadd contract double %124, %133\l  %135 = fptrunc double %134 to float\l  %136 = zext i32 %128 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %20, i64 %136\l  store float %135, float addrspace(1)* %137, align 4, !tbaa !5\l  %138 = add nuw nsw i32 %56, 8\l  %139 = add i32 %58, 8\l  %140 = icmp eq i32 %139, %28\l  br i1 %140, label %29, label %55, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x64f89d0:s0 -> Node0x64f8780;
	Node0x64f89d0:s1 -> Node0x64f89d0;
	Node0x64f6fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%141:\l141:                                              \l  ret void\l}"];
}
