digraph "CFG for '_Z11mean_kernelPfiiiS_' function" {
	label="CFG for '_Z11mean_kernelPfiiiS_' function";

	Node0x61d07d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%5:\l  %6 = mul nsw i32 %3, %1\l  %7 = sitofp i32 %6 to float\l  %8 = fdiv contract float 1.000000e+00, %7\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !4\l  %15 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !13, !invariant.load\l... !14\l  %18 = zext i16 %17 to i32\l  %19 = udiv i32 %14, %18\l  %20 = mul i32 %19, %18\l  %21 = icmp ugt i32 %14, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %9\l  %26 = mul i32 %25, %18\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = add i32 %26, %27\l  %29 = icmp slt i32 %28, %2\l  br i1 %29, label %30, label %124\l|{<s0>T|<s1>F}}"];
	Node0x61d07d0:s0 -> Node0x61d3be0;
	Node0x61d07d0:s1 -> Node0x61d3c70;
	Node0x61d3be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%30:\l30:                                               \l  %31 = sext i32 %28 to i64\l  %32 = getelementptr inbounds float, float addrspace(1)* %4, i64 %31\l  store float 0.000000e+00, float addrspace(1)* %32, align 4, !tbaa !16\l  %33 = icmp sgt i32 %1, 0\l  br i1 %33, label %34, label %121\l|{<s0>T|<s1>F}}"];
	Node0x61d3be0:s0 -> Node0x61d4220;
	Node0x61d3be0:s1 -> Node0x61d42b0;
	Node0x61d4220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%34:\l34:                                               \l  %35 = icmp sgt i32 %3, 0\l  %36 = and i32 %3, 7\l  %37 = icmp ult i32 %3, 8\l  %38 = and i32 %3, -8\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x61d4220 -> Node0x61d4750;
	Node0x61d4750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %34 ], [ %118, %117 ]\l  %42 = phi i32 [ 0, %34 ], [ %119, %117 ]\l  br i1 %35, label %43, label %117\l|{<s0>T|<s1>F}}"];
	Node0x61d4750:s0 -> Node0x61d4aa0;
	Node0x61d4750:s1 -> Node0x61d4840;
	Node0x61d4aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%43:\l43:                                               \l  %44 = mul nsw i32 %42, %2\l  %45 = add i32 %44, %28\l  %46 = mul i32 %45, %3\l  br i1 %37, label %101, label %47\l|{<s0>T|<s1>F}}"];
	Node0x61d4aa0:s0 -> Node0x61d4d90;
	Node0x61d4aa0:s1 -> Node0x61d4de0;
	Node0x61d4de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%47:\l47:                                               \l  %48 = phi float [ %97, %47 ], [ %41, %43 ]\l  %49 = phi i32 [ %98, %47 ], [ 0, %43 ]\l  %50 = phi i32 [ %99, %47 ], [ 0, %43 ]\l  %51 = add nsw i32 %49, %46\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %55 = fadd contract float %54, %48\l  store float %55, float addrspace(1)* %32, align 4, !tbaa !16\l  %56 = or i32 %49, 1\l  %57 = add nsw i32 %56, %46\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !16\l  %61 = fadd contract float %60, %55\l  store float %61, float addrspace(1)* %32, align 4, !tbaa !16\l  %62 = or i32 %49, 2\l  %63 = add nsw i32 %62, %46\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %0, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !16\l  %67 = fadd contract float %66, %61\l  store float %67, float addrspace(1)* %32, align 4, !tbaa !16\l  %68 = or i32 %49, 3\l  %69 = add nsw i32 %68, %46\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !16\l  %73 = fadd contract float %72, %67\l  store float %73, float addrspace(1)* %32, align 4, !tbaa !16\l  %74 = or i32 %49, 4\l  %75 = add nsw i32 %74, %46\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = fadd contract float %78, %73\l  store float %79, float addrspace(1)* %32, align 4, !tbaa !16\l  %80 = or i32 %49, 5\l  %81 = add nsw i32 %80, %46\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !16\l  %85 = fadd contract float %84, %79\l  store float %85, float addrspace(1)* %32, align 4, !tbaa !16\l  %86 = or i32 %49, 6\l  %87 = add nsw i32 %86, %46\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = fadd contract float %90, %85\l  store float %91, float addrspace(1)* %32, align 4, !tbaa !16\l  %92 = or i32 %49, 7\l  %93 = add nsw i32 %92, %46\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !16\l  %97 = fadd contract float %96, %91\l  store float %97, float addrspace(1)* %32, align 4, !tbaa !16\l  %98 = add nuw nsw i32 %49, 8\l  %99 = add i32 %50, 8\l  %100 = icmp eq i32 %99, %38\l  br i1 %100, label %101, label %47, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x61d4de0:s0 -> Node0x61d4d90;
	Node0x61d4de0:s1 -> Node0x61d4de0;
	Node0x61d4d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%101:\l101:                                              \l  %102 = phi float [ undef, %43 ], [ %97, %47 ]\l  %103 = phi float [ %41, %43 ], [ %97, %47 ]\l  %104 = phi i32 [ 0, %43 ], [ %98, %47 ]\l  br i1 %39, label %117, label %105\l|{<s0>T|<s1>F}}"];
	Node0x61d4d90:s0 -> Node0x61d4840;
	Node0x61d4d90:s1 -> Node0x61d8250;
	Node0x61d8250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%105:\l105:                                              \l  %106 = phi float [ %113, %105 ], [ %103, %101 ]\l  %107 = phi i32 [ %114, %105 ], [ %104, %101 ]\l  %108 = phi i32 [ %115, %105 ], [ 0, %101 ]\l  %109 = add nsw i32 %107, %46\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = fadd contract float %112, %106\l  store float %113, float addrspace(1)* %32, align 4, !tbaa !16\l  %114 = add nuw nsw i32 %107, 1\l  %115 = add i32 %108, 1\l  %116 = icmp eq i32 %115, %36\l  br i1 %116, label %117, label %105, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x61d8250:s0 -> Node0x61d4840;
	Node0x61d8250:s1 -> Node0x61d8250;
	Node0x61d4840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%117:\l117:                                              \l  %118 = phi float [ %41, %40 ], [ %102, %101 ], [ %113, %105 ]\l  %119 = add nuw nsw i32 %42, 1\l  %120 = icmp eq i32 %119, %1\l  br i1 %120, label %121, label %40, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x61d4840:s0 -> Node0x61d42b0;
	Node0x61d4840:s1 -> Node0x61d4750;
	Node0x61d42b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%121:\l121:                                              \l  %122 = phi float [ 0.000000e+00, %30 ], [ %118, %117 ]\l  %123 = fmul contract float %8, %122\l  store float %123, float addrspace(1)* %32, align 4, !tbaa !16\l  br label %124\l}"];
	Node0x61d42b0 -> Node0x61d3c70;
	Node0x61d3c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%124:\l124:                                              \l  ret void\l}"];
}
