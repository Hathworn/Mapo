digraph "CFG for '_Z25backward_bias_conn_kernelPfS_ii' function" {
	label="CFG for '_Z25backward_bias_conn_kernelPfS_ii' function";

	Node0x6108470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = mul i32 %21, %14\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %24, %3\l  br i1 %25, label %26, label %119\l|{<s0>T|<s1>F}}"];
	Node0x6108470:s0 -> Node0x610ad30;
	Node0x6108470:s1 -> Node0x610adc0;
	Node0x610ad30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %2, 0\l  br i1 %27, label %28, label %113\l|{<s0>T|<s1>F}}"];
	Node0x610ad30:s0 -> Node0x610af90;
	Node0x610ad30:s1 -> Node0x610afe0;
	Node0x610af90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = and i32 %2, 7\l  %30 = icmp ult i32 %2, 8\l  br i1 %30, label %95, label %31\l|{<s0>T|<s1>F}}"];
	Node0x610af90:s0 -> Node0x610b2a0;
	Node0x610af90:s1 -> Node0x610b2f0;
	Node0x610b2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %2, -8\l  br label %33\l}"];
	Node0x610b2f0 -> Node0x610a530;
	Node0x610a530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %31 ], [ %91, %33 ]\l  %35 = phi i32 [ 0, %31 ], [ %92, %33 ]\l  %36 = phi i32 [ 0, %31 ], [ %93, %33 ]\l  %37 = mul nsw i32 %35, %3\l  %38 = add nsw i32 %37, %24\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %42 = fadd contract float %34, %41\l  %43 = or i32 %35, 1\l  %44 = mul nsw i32 %43, %3\l  %45 = add nsw i32 %44, %24\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %49 = fadd contract float %42, %48\l  %50 = or i32 %35, 2\l  %51 = mul nsw i32 %50, %3\l  %52 = add nsw i32 %51, %24\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %56 = fadd contract float %49, %55\l  %57 = or i32 %35, 3\l  %58 = mul nsw i32 %57, %3\l  %59 = add nsw i32 %58, %24\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %63 = fadd contract float %56, %62\l  %64 = or i32 %35, 4\l  %65 = mul nsw i32 %64, %3\l  %66 = add nsw i32 %65, %24\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %70 = fadd contract float %63, %69\l  %71 = or i32 %35, 5\l  %72 = mul nsw i32 %71, %3\l  %73 = add nsw i32 %72, %24\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %77 = fadd contract float %70, %76\l  %78 = or i32 %35, 6\l  %79 = mul nsw i32 %78, %3\l  %80 = add nsw i32 %79, %24\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %84 = fadd contract float %77, %83\l  %85 = or i32 %35, 7\l  %86 = mul nsw i32 %85, %3\l  %87 = add nsw i32 %86, %24\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %91 = fadd contract float %84, %90\l  %92 = add nuw nsw i32 %35, 8\l  %93 = add i32 %36, 8\l  %94 = icmp eq i32 %93, %32\l  br i1 %94, label %95, label %33, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x610a530:s0 -> Node0x610b2a0;
	Node0x610a530:s1 -> Node0x610a530;
	Node0x610b2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%95:\l95:                                               \l  %96 = phi float [ undef, %28 ], [ %91, %33 ]\l  %97 = phi float [ 0.000000e+00, %28 ], [ %91, %33 ]\l  %98 = phi i32 [ 0, %28 ], [ %92, %33 ]\l  %99 = icmp eq i32 %29, 0\l  br i1 %99, label %113, label %100\l|{<s0>T|<s1>F}}"];
	Node0x610b2a0:s0 -> Node0x610afe0;
	Node0x610b2a0:s1 -> Node0x610fdf0;
	Node0x610fdf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%100:\l100:                                              \l  %101 = phi float [ %109, %100 ], [ %97, %95 ]\l  %102 = phi i32 [ %110, %100 ], [ %98, %95 ]\l  %103 = phi i32 [ %111, %100 ], [ 0, %95 ]\l  %104 = mul nsw i32 %102, %3\l  %105 = add nsw i32 %104, %24\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %1, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %109 = fadd contract float %101, %108\l  %110 = add nuw nsw i32 %102, 1\l  %111 = add i32 %103, 1\l  %112 = icmp eq i32 %111, %29\l  br i1 %112, label %113, label %100, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x610fdf0:s0 -> Node0x610afe0;
	Node0x610fdf0:s1 -> Node0x610fdf0;
	Node0x610afe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%113:\l113:                                              \l  %114 = phi float [ 0.000000e+00, %26 ], [ %96, %95 ], [ %109, %100 ]\l  %115 = sext i32 %24 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16,\l... !amdgpu.noclobber !14\l  %118 = fadd contract float %114, %117\l  store float %118, float addrspace(1)* %116, align 4, !tbaa !16\l  br label %119\l}"];
	Node0x610afe0 -> Node0x610adc0;
	Node0x610adc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%119:\l119:                                              \l  ret void\l}"];
}
