digraph "CFG for '_Z17computeCSRColSumsPfPKfPKiS3_mm' function" {
	label="CFG for '_Z17computeCSRColSumsPfPKfPKiS3_mm' function";

	Node0x4bde8a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = zext i32 %15 to i64\l  %17 = icmp ult i64 %16, %4\l  br i1 %17, label %18, label %57\l|{<s0>T|<s1>F}}"];
	Node0x4bde8a0:s0 -> Node0x4be08a0;
	Node0x4bde8a0:s1 -> Node0x4be0930;
	Node0x4be08a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%18:\l18:                                               \l  %19 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %16\l  %20 = add nuw nsw i64 %16, 1\l  %21 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %20\l  %22 = bitcast i32 addrspace(1)* %19 to \<2 x i32\> addrspace(1)*\l  %23 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %22, align 4, !tbaa !7\l  %24 = extractelement \<2 x i32\> %23, i64 0\l  %25 = extractelement \<2 x i32\> %23, i64 1\l  %26 = icmp ult i32 %24, %25\l  br i1 %26, label %27, label %57\l|{<s0>T|<s1>F}}"];
	Node0x4be08a0:s0 -> Node0x4be1650;
	Node0x4be08a0:s1 -> Node0x4be0930;
	Node0x4be1650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%27:\l27:                                               \l  %28 = sext i32 %24 to i64\l  br label %29\l}"];
	Node0x4be1650 -> Node0x4be17c0;
	Node0x4be17c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%29:\l29:                                               \l  %30 = phi i64 [ %53, %52 ], [ %28, %27 ]\l  %31 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %30\l  %32 = load i32, i32 addrspace(1)* %31, align 4, !tbaa !7\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  %35 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !11\l  %37 = load float, float addrspace(1)* %34, align 4, !tbaa !11\l  %38 = bitcast float %37 to i32\l  %39 = bitcast float addrspace(1)* %34 to i32 addrspace(1)*\l  %40 = fadd contract float %36, %37\l  %41 = bitcast float %40 to i32\l  %42 = cmpxchg i32 addrspace(1)* %39, i32 %38, i32 %41\l... syncscope(\"agent-one-as\") monotonic monotonic, align 4\l  %43 = extractvalue \{ i32, i1 \} %42, 1\l  br i1 %43, label %52, label %44\l|{<s0>T|<s1>F}}"];
	Node0x4be17c0:s0 -> Node0x4be18b0;
	Node0x4be17c0:s1 -> Node0x4be3180;
	Node0x4be3180 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  %45 = phi \{ i32, i1 \} [ %50, %44 ], [ %42, %29 ]\l  %46 = extractvalue \{ i32, i1 \} %45, 0\l  %47 = bitcast i32 %46 to float\l  %48 = fadd contract float %36, %47\l  %49 = bitcast float %48 to i32\l  %50 = cmpxchg i32 addrspace(1)* %39, i32 %46, i32 %49\l... syncscope(\"agent-one-as\") monotonic monotonic, align 4\l  %51 = extractvalue \{ i32, i1 \} %50, 1\l  br i1 %51, label %52, label %44, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4be3180:s0 -> Node0x4be18b0;
	Node0x4be3180:s1 -> Node0x4be3180;
	Node0x4be18b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%52:\l52:                                               \l  %53 = add i64 %30, 1\l  %54 = load i32, i32 addrspace(1)* %21, align 4, !tbaa !7\l  %55 = sext i32 %54 to i64\l  %56 = icmp ult i64 %53, %55\l  br i1 %56, label %29, label %57, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4be18b0:s0 -> Node0x4be17c0;
	Node0x4be18b0:s1 -> Node0x4be0930;
	Node0x4be0930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%57:\l57:                                               \l  ret void\l}"];
}
