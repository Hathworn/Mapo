digraph "CFG for '_Z18divideByCSCColSumsPKfPKiPfm' function" {
	label="CFG for '_Z18divideByCSCColSumsPKfPKiPfm' function";

	Node0x4be6560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = zext i32 %13 to i64\l  %15 = icmp ult i64 %14, %3\l  br i1 %15, label %16, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4be6560:s0 -> Node0x4be84e0;
	Node0x4be6560:s1 -> Node0x4be8570;
	Node0x4be84e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%16:\l16:                                               \l  %17 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %14\l  %18 = bitcast i32 addrspace(1)* %17 to \<2 x i32\> addrspace(1)*\l  %19 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %18, align 4, !tbaa !7\l  %20 = extractelement \<2 x i32\> %19, i64 1\l  %21 = sext i32 %20 to i64\l  %22 = extractelement \<2 x i32\> %19, i64 0\l  %23 = icmp ult i32 %22, %20\l  br i1 %23, label %24, label %28\l|{<s0>T|<s1>F}}"];
	Node0x4be84e0:s0 -> Node0x4be9230;
	Node0x4be84e0:s1 -> Node0x4be92c0;
	Node0x4be9230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%24:\l24:                                               \l  %25 = sext i32 %22 to i64\l  br label %33\l}"];
	Node0x4be9230 -> Node0x4be9470;
	Node0x4be9530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%26:\l26:                                               \l  %27 = fadd contract float %38, 0x3EB0C6F7A0000000\l  br label %28\l}"];
	Node0x4be9530 -> Node0x4be92c0;
	Node0x4be92c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%28:\l28:                                               \l  %29 = phi float [ 0x3EB0C6F7A0000000, %16 ], [ %27, %26 ]\l  %30 = getelementptr inbounds float, float addrspace(1)* %2, i64 %14\l  %31 = load float, float addrspace(1)* %30, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %32 = fdiv contract float %31, %29\l  store float %32, float addrspace(1)* %30, align 4, !tbaa !11\l  br label %41\l}"];
	Node0x4be92c0 -> Node0x4be8570;
	Node0x4be9470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%33:\l33:                                               \l  %34 = phi i64 [ %39, %33 ], [ %25, %24 ]\l  %35 = phi float [ %38, %33 ], [ 0.000000e+00, %24 ]\l  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %38 = fadd contract float %35, %37\l  %39 = add nuw i64 %34, 1\l  %40 = icmp ult i64 %39, %21\l  br i1 %40, label %33, label %26, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4be9470:s0 -> Node0x4be9470;
	Node0x4be9470:s1 -> Node0x4be9530;
	Node0x4be8570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%41:\l41:                                               \l  ret void\l}"];
}
