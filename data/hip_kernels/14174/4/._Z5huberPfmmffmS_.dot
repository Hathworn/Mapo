digraph "CFG for '_Z5huberPfmmffmS_' function" {
	label="CFG for '_Z5huberPfmmffmS_' function";

	Node0x61b7bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = zext i32 %16 to i64\l  %18 = freeze i64 %17\l  %19 = freeze i64 %1\l  %20 = udiv i64 %18, %19\l  %21 = mul i64 %20, %19\l  %22 = sub i64 %18, %21\l  %23 = mul i64 %20, %5\l  %24 = icmp ult i64 %23, %2\l  br i1 %24, label %25, label %75\l|{<s0>T|<s1>F}}"];
	Node0x61b7bd0:s0 -> Node0x61b9eb0;
	Node0x61b7bd0:s1 -> Node0x61b9f40;
	Node0x61b9eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%25:\l25:                                               \l  %26 = add i64 %23, %5\l  %27 = trunc i64 %26 to i32\l  %28 = trunc i64 %2 to i32\l  %29 = tail call i32 @llvm.umin.i32(i32 %27, i32 %28)\l  %30 = zext i32 %29 to i64\l  %31 = fmul contract float %3, %3\l  %32 = icmp ult i64 %23, %30\l  br i1 %32, label %37, label %33\l|{<s0>T|<s1>F}}"];
	Node0x61b9eb0:s0 -> Node0x61b99f0;
	Node0x61b9eb0:s1 -> Node0x61b9a80;
	Node0x61b9a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%33:\l33:                                               \l  %34 = phi float [ 0.000000e+00, %25 ], [ %70, %37 ]\l  %35 = fmul contract float %34, %4\l  %36 = getelementptr inbounds float, float addrspace(1)* %6, i64 %17\l  store float %35, float addrspace(1)* %36, align 4, !tbaa !7\l  br label %75\l}"];
	Node0x61b9a80 -> Node0x61b9f40;
	Node0x61b99f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi float [ %70, %37 ], [ 0.000000e+00, %25 ]\l  %39 = phi i64 [ %73, %37 ], [ %23, %25 ]\l  %40 = mul i64 %39, %1\l  %41 = add i64 %40, %22\l  %42 = getelementptr inbounds float, float addrspace(1)* %0, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7\l  %44 = fmul contract float %43, %43\l  %45 = fdiv contract float %44, %31\l  %46 = fadd contract float %45, 1.000000e+00\l  %47 = fcmp olt float %46, 0x39F0000000000000\l  %48 = select i1 %47, float 0x41F0000000000000, float 1.000000e+00\l  %49 = fmul float %46, %48\l  %50 = tail call float @llvm.sqrt.f32(float %49)\l  %51 = bitcast float %50 to i32\l  %52 = add nsw i32 %51, -1\l  %53 = bitcast i32 %52 to float\l  %54 = add nsw i32 %51, 1\l  %55 = bitcast i32 %54 to float\l  %56 = tail call i1 @llvm.amdgcn.class.f32(float %49, i32 608)\l  %57 = select i1 %47, float 0x3EF0000000000000, float 1.000000e+00\l  %58 = fneg float %55\l  %59 = tail call float @llvm.fma.f32(float %58, float %50, float %49)\l  %60 = fcmp ogt float %59, 0.000000e+00\l  %61 = fneg float %53\l  %62 = tail call float @llvm.fma.f32(float %61, float %50, float %49)\l  %63 = fcmp ole float %62, 0.000000e+00\l  %64 = select i1 %63, float %53, float %50\l  %65 = select i1 %60, float %55, float %64\l  %66 = fmul float %57, %65\l  %67 = select i1 %56, float %49, float %66\l  %68 = fadd contract float %67, -1.000000e+00\l  %69 = fmul contract float %31, %68\l  %70 = fadd contract float %38, %69\l  %71 = fdiv contract float %4, %67\l  %72 = fmul contract float %43, %71\l  store float %72, float addrspace(1)* %42, align 4, !tbaa !7\l  %73 = add nuw nsw i64 %39, 1\l  %74 = icmp ult i64 %73, %30\l  br i1 %74, label %37, label %33, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x61b99f0:s0 -> Node0x61b99f0;
	Node0x61b99f0:s1 -> Node0x61b9a80;
	Node0x61b9f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%75:\l75:                                               \l  ret void\l}"];
}
