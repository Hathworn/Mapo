digraph "CFG for '_Z14matrixMultiplyPfS_S_iiiiii' function" {
	label="CFG for '_Z14matrixMultiplyPfS_S_iiiiii' function";

	Node0x52d1240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 2, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %18 = add i32 %16, %17\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %21 = bitcast i8 addrspace(4)* %20 to i16 addrspace(4)*\l  %22 = load i16, i16 addrspace(4)* %21, align 4, !range !4, !invariant.load !5\l  %23 = zext i16 %22 to i32\l  %24 = mul i32 %19, %23\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %26 = add i32 %24, %25\l  %27 = icmp slt i32 %18, %3\l  %28 = icmp slt i32 %26, %6\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %169\l|{<s0>T|<s1>F}}"];
	Node0x52d1240:s0 -> Node0x52d5800;
	Node0x52d1240:s1 -> Node0x52d5890;
	Node0x52d5800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%30:\l30:                                               \l  %31 = icmp sgt i32 %4, 0\l  br i1 %31, label %32, label %61\l|{<s0>T|<s1>F}}"];
	Node0x52d5800:s0 -> Node0x52d5a90;
	Node0x52d5800:s1 -> Node0x52d5ae0;
	Node0x52d5a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%32:\l32:                                               \l  %33 = mul nsw i32 %18, %4\l  %34 = and i32 %4, 7\l  %35 = icmp ult i32 %4, 8\l  br i1 %35, label %38, label %36\l|{<s0>T|<s1>F}}"];
	Node0x52d5a90:s0 -> Node0x52d5f50;
	Node0x52d5a90:s1 -> Node0x52d5fa0;
	Node0x52d5fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%36:\l36:                                               \l  %37 = and i32 %4, -8\l  br label %67\l}"];
	Node0x52d5fa0 -> Node0x52d61a0;
	Node0x52d5f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%38:\l38:                                               \l  %39 = phi float [ undef, %32 ], [ %165, %67 ]\l  %40 = phi i32 [ 0, %32 ], [ %166, %67 ]\l  %41 = phi float [ 0.000000e+00, %32 ], [ %165, %67 ]\l  %42 = icmp eq i32 %34, 0\l  br i1 %42, label %61, label %43\l|{<s0>T|<s1>F}}"];
	Node0x52d5f50:s0 -> Node0x52d5ae0;
	Node0x52d5f50:s1 -> Node0x52d7410;
	Node0x52d7410 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ %58, %43 ], [ %40, %38 ]\l  %45 = phi float [ %57, %43 ], [ %41, %38 ]\l  %46 = phi i32 [ %59, %43 ], [ 0, %38 ]\l  %47 = add nsw i32 %44, %33\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = mul nsw i32 %44, %6\l  %52 = add nsw i32 %51, %26\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %56 = fmul contract float %50, %55\l  %57 = fadd contract float %45, %56\l  %58 = add nuw nsw i32 %44, 1\l  %59 = add i32 %46, 1\l  %60 = icmp eq i32 %59, %34\l  br i1 %60, label %61, label %43, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x52d7410:s0 -> Node0x52d5ae0;
	Node0x52d7410:s1 -> Node0x52d7410;
	Node0x52d5ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%61:\l61:                                               \l  %62 = phi float [ 0.000000e+00, %30 ], [ %39, %38 ], [ %57, %43 ]\l  %63 = mul nsw i32 %18, %8\l  %64 = add nsw i32 %63, %26\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %65\l  store float %62, float addrspace(1)* %66, align 4, !tbaa !7\l  br label %169\l}"];
	Node0x52d5ae0 -> Node0x52d5890;
	Node0x52d61a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%67:\l67:                                               \l  %68 = phi i32 [ 0, %36 ], [ %166, %67 ]\l  %69 = phi float [ 0.000000e+00, %36 ], [ %165, %67 ]\l  %70 = phi i32 [ 0, %36 ], [ %167, %67 ]\l  %71 = add nsw i32 %68, %33\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = mul nsw i32 %68, %6\l  %76 = add nsw i32 %75, %26\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fmul contract float %74, %79\l  %81 = fadd contract float %69, %80\l  %82 = or i32 %68, 1\l  %83 = add nsw i32 %82, %33\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = mul nsw i32 %82, %6\l  %88 = add nsw i32 %87, %26\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = fmul contract float %86, %91\l  %93 = fadd contract float %81, %92\l  %94 = or i32 %68, 2\l  %95 = add nsw i32 %94, %33\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = mul nsw i32 %94, %6\l  %100 = add nsw i32 %99, %26\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = fmul contract float %98, %103\l  %105 = fadd contract float %93, %104\l  %106 = or i32 %68, 3\l  %107 = add nsw i32 %106, %33\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = mul nsw i32 %106, %6\l  %112 = add nsw i32 %111, %26\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %110, %115\l  %117 = fadd contract float %105, %116\l  %118 = or i32 %68, 4\l  %119 = add nsw i32 %118, %33\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = mul nsw i32 %118, %6\l  %124 = add nsw i32 %123, %26\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = fmul contract float %122, %127\l  %129 = fadd contract float %117, %128\l  %130 = or i32 %68, 5\l  %131 = add nsw i32 %130, %33\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = mul nsw i32 %130, %6\l  %136 = add nsw i32 %135, %26\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = fmul contract float %134, %139\l  %141 = fadd contract float %129, %140\l  %142 = or i32 %68, 6\l  %143 = add nsw i32 %142, %33\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = mul nsw i32 %142, %6\l  %148 = add nsw i32 %147, %26\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %1, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %152 = fmul contract float %146, %151\l  %153 = fadd contract float %141, %152\l  %154 = or i32 %68, 7\l  %155 = add nsw i32 %154, %33\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = mul nsw i32 %154, %6\l  %160 = add nsw i32 %159, %26\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %1, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %164 = fmul contract float %158, %163\l  %165 = fadd contract float %153, %164\l  %166 = add nuw nsw i32 %68, 8\l  %167 = add i32 %70, 8\l  %168 = icmp eq i32 %167, %37\l  br i1 %168, label %38, label %67, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x52d61a0:s0 -> Node0x52d5f50;
	Node0x52d61a0:s1 -> Node0x52d61a0;
	Node0x52d5890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%169:\l169:                                              \l  ret void\l}"];
}
