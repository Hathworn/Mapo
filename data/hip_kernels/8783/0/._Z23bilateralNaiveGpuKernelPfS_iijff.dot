digraph "CFG for '_Z23bilateralNaiveGpuKernelPfS_iijff' function" {
	label="CFG for '_Z23bilateralNaiveGpuKernelPfS_iijff' function";

	Node0x51a6df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %16, %3\l  %26 = icmp slt i32 %24, %2\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %153\l|{<s0>T|<s1>F}}"];
	Node0x51a6df0:s0 -> Node0x51aa880;
	Node0x51a6df0:s1 -> Node0x51aa910;
	Node0x51aa880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%28:\l28:                                               \l  %29 = icmp eq i32 %4, 0\l  br i1 %29, label %30, label %34\l|{<s0>T|<s1>F}}"];
	Node0x51aa880:s0 -> Node0x51aab10;
	Node0x51aa880:s1 -> Node0x51aab60;
	Node0x51aab10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %24, %3\l  %32 = add nsw i32 %31, %16\l  %33 = sext i32 %32 to i64\l  br label %62\l}"];
	Node0x51aab10 -> Node0x51a8cc0;
	Node0x51aab60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%34:\l34:                                               \l  %35 = lshr i32 %4, 1\l  %36 = mul nsw i32 %24, %3\l  %37 = add nsw i32 %36, %16\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %41 = fmul contract float %6, 2.000000e+00\l  %42 = fmul contract float %41, %6\l  %43 = fpext float %6 to double\l  %44 = fmul contract double %43, 0x401921FB54442D18\l  %45 = fmul contract double %44, %43\l  %46 = fmul contract float %5, 2.000000e+00\l  %47 = fmul contract float %46, %5\l  %48 = fpext float %5 to double\l  %49 = fmul contract double %48, 0x401921FB54442D18\l  %50 = fmul contract double %49, %48\l  br label %51\l}"];
	Node0x51aab60 -> Node0x51ac510;
	Node0x51ac510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %34 ], [ %67, %66 ]\l  %53 = phi float [ 0.000000e+00, %34 ], [ %149, %66 ]\l  %54 = phi float [ 0.000000e+00, %34 ], [ %150, %66 ]\l  %55 = add nuw i32 %35, %52\l  %56 = sub i32 %16, %55\l  %57 = tail call i32 @llvm.smax.i32(i32 %56, i32 0)\l  %58 = sub nsw i32 %16, %57\l  %59 = mul nsw i32 %58, %58\l  br label %69\l}"];
	Node0x51ac510 -> Node0x51ace20;
	Node0x51acf20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%60:\l60:                                               \l  %61 = fdiv contract float %149, %150\l  br label %62\l}"];
	Node0x51acf20 -> Node0x51a8cc0;
	Node0x51a8cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%62:\l62:                                               \l  %63 = phi i64 [ %33, %30 ], [ %38, %60 ]\l  %64 = phi float [ 0x7FF8000000000000, %30 ], [ %61, %60 ]\l  %65 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63\l  store float %64, float addrspace(1)* %65, align 4, !tbaa !7\l  br label %153\l}"];
	Node0x51a8cc0 -> Node0x51aa910;
	Node0x51ac610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%66:\l66:                                               \l  %67 = add nuw nsw i32 %52, 1\l  %68 = icmp eq i32 %67, %4\l  br i1 %68, label %60, label %51, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x51ac610:s0 -> Node0x51acf20;
	Node0x51ac610:s1 -> Node0x51ac510;
	Node0x51ace20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%69:\l69:                                               \l  %70 = phi i32 [ 0, %51 ], [ %151, %69 ]\l  %71 = phi float [ %53, %51 ], [ %149, %69 ]\l  %72 = phi float [ %54, %51 ], [ %150, %69 ]\l  %73 = add nuw i32 %35, %70\l  %74 = sub i32 %24, %73\l  %75 = tail call i32 @llvm.smax.i32(i32 %74, i32 0)\l  %76 = mul nsw i32 %75, %3\l  %77 = add nsw i32 %76, %57\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %0, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %81 = fsub contract float %80, %40\l  %82 = fneg contract float %81\l  %83 = fmul contract float %81, %82\l  %84 = fdiv contract float %83, %42\l  %85 = fmul float %84, 0x3FF7154760000000\l  %86 = tail call float @llvm.rint.f32(float %85)\l  %87 = fcmp ogt float %84, 0x40562E4300000000\l  %88 = fcmp olt float %84, 0xC059D1DA00000000\l  %89 = fneg float %85\l  %90 = tail call float @llvm.fma.f32(float %84, float 0x3FF7154760000000,\l... float %89)\l  %91 = tail call float @llvm.fma.f32(float %84, float 0x3E54AE0BE0000000,\l... float %90)\l  %92 = fsub float %85, %86\l  %93 = fadd float %91, %92\l  %94 = tail call float @llvm.exp2.f32(float %93)\l  %95 = fptosi float %86 to i32\l  %96 = tail call float @llvm.amdgcn.ldexp.f32(float %94, i32 %95)\l  %97 = select i1 %88, float 0.000000e+00, float %96\l  %98 = select i1 %87, float 0x7FF0000000000000, float %97\l  %99 = fpext float %98 to double\l  %100 = fdiv contract double %99, %45\l  %101 = fptrunc double %100 to float\l  %102 = sub nsw i32 %24, %75\l  %103 = mul nsw i32 %102, %102\l  %104 = add nuw nsw i32 %103, %59\l  %105 = sitofp i32 %104 to float\l  %106 = icmp eq i32 %104, 0\l  %107 = select i1 %106, float 0x41F0000000000000, float 1.000000e+00\l  %108 = fmul float %107, %105\l  %109 = tail call float @llvm.sqrt.f32(float %108)\l  %110 = bitcast float %109 to i32\l  %111 = add nsw i32 %110, -1\l  %112 = bitcast i32 %111 to float\l  %113 = add nsw i32 %110, 1\l  %114 = bitcast i32 %113 to float\l  %115 = tail call i1 @llvm.amdgcn.class.f32(float %108, i32 608)\l  %116 = select i1 %106, float 0x3EF0000000000000, float 1.000000e+00\l  %117 = fneg float %114\l  %118 = tail call float @llvm.fma.f32(float %117, float %109, float %108)\l  %119 = fcmp ogt float %118, 0.000000e+00\l  %120 = fneg float %112\l  %121 = tail call float @llvm.fma.f32(float %120, float %109, float %108)\l  %122 = fcmp ole float %121, 0.000000e+00\l  %123 = select i1 %122, float %112, float %109\l  %124 = select i1 %119, float %114, float %123\l  %125 = fmul float %116, %124\l  %126 = select i1 %115, float %108, float %125\l  %127 = fneg contract float %126\l  %128 = fmul contract float %126, %127\l  %129 = fdiv contract float %128, %47\l  %130 = fmul float %129, 0x3FF7154760000000\l  %131 = tail call float @llvm.rint.f32(float %130)\l  %132 = fcmp ogt float %129, 0x40562E4300000000\l  %133 = fcmp olt float %129, 0xC059D1DA00000000\l  %134 = fneg float %130\l  %135 = tail call float @llvm.fma.f32(float %129, float 0x3FF7154760000000,\l... float %134)\l  %136 = tail call float @llvm.fma.f32(float %129, float 0x3E54AE0BE0000000,\l... float %135)\l  %137 = fsub float %130, %131\l  %138 = fadd float %136, %137\l  %139 = tail call float @llvm.exp2.f32(float %138)\l  %140 = fptosi float %131 to i32\l  %141 = tail call float @llvm.amdgcn.ldexp.f32(float %139, i32 %140)\l  %142 = select i1 %133, float 0.000000e+00, float %141\l  %143 = select i1 %132, float 0x7FF0000000000000, float %142\l  %144 = fpext float %143 to double\l  %145 = fdiv contract double %144, %50\l  %146 = fptrunc double %145 to float\l  %147 = fmul contract float %146, %101\l  %148 = fmul contract float %80, %147\l  %149 = fadd contract float %71, %148\l  %150 = fadd contract float %72, %147\l  %151 = add nuw nsw i32 %70, 1\l  %152 = icmp eq i32 %151, %4\l  br i1 %152, label %66, label %69, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x51ace20:s0 -> Node0x51ac610;
	Node0x51ace20:s1 -> Node0x51ace20;
	Node0x51aa910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%153:\l153:                                              \l  ret void\l}"];
}
