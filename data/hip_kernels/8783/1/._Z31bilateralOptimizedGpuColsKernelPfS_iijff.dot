digraph "CFG for '_Z31bilateralOptimizedGpuColsKernelPfS_iijff' function" {
	label="CFG for '_Z31bilateralOptimizedGpuColsKernelPfS_iijff' function";

	Node0x57abba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %16 = add i32 %14, %15\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 2, !range !4, !invariant.load !5\l  %21 = zext i16 %20 to i32\l  %22 = mul i32 %17, %21\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = add i32 %22, %23\l  %25 = icmp slt i32 %16, %3\l  %26 = icmp slt i32 %24, %2\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %139\l|{<s0>T|<s1>F}}"];
	Node0x57abba0:s0 -> Node0x57af630;
	Node0x57abba0:s1 -> Node0x57af6c0;
	Node0x57af630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%28:\l28:                                               \l  %29 = icmp eq i32 %4, 0\l  br i1 %29, label %30, label %34\l|{<s0>T|<s1>F}}"];
	Node0x57af630:s0 -> Node0x57af8c0;
	Node0x57af630:s1 -> Node0x57af910;
	Node0x57af8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %24, %3\l  %32 = add nsw i32 %31, %16\l  %33 = sext i32 %32 to i64\l  br label %53\l}"];
	Node0x57af8c0 -> Node0x57ada70;
	Node0x57af910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%34:\l34:                                               \l  %35 = lshr i32 %4, 1\l  %36 = mul nsw i32 %24, %3\l  %37 = add nsw i32 %36, %16\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %41 = fmul contract float %6, 2.000000e+00\l  %42 = fmul contract float %41, %6\l  %43 = fpext float %6 to double\l  %44 = fmul contract double %43, 0x401921FB54442D18\l  %45 = fmul contract double %44, %43\l  %46 = fmul contract float %5, 2.000000e+00\l  %47 = fmul contract float %46, %5\l  %48 = fpext float %5 to double\l  %49 = fmul contract double %48, 0x401921FB54442D18\l  %50 = fmul contract double %49, %48\l  br label %57\l}"];
	Node0x57af910 -> Node0x57b12c0;
	Node0x57b13c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%51:\l51:                                               \l  %52 = fdiv contract float %135, %136\l  br label %53\l}"];
	Node0x57b13c0 -> Node0x57ada70;
	Node0x57ada70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%53:\l53:                                               \l  %54 = phi i64 [ %33, %30 ], [ %38, %51 ]\l  %55 = phi float [ 0x7FF8000000000000, %30 ], [ %52, %51 ]\l  %56 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54\l  store float %55, float addrspace(1)* %56, align 4, !tbaa !7\l  br label %139\l}"];
	Node0x57ada70 -> Node0x57af6c0;
	Node0x57b12c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%57:\l57:                                               \l  %58 = phi i32 [ 0, %34 ], [ %137, %57 ]\l  %59 = phi float [ 0.000000e+00, %34 ], [ %135, %57 ]\l  %60 = phi float [ 0.000000e+00, %34 ], [ %136, %57 ]\l  %61 = add nuw i32 %35, %58\l  %62 = sub i32 %16, %61\l  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 0)\l  %64 = add nsw i32 %63, %36\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %68 = fsub contract float %67, %40\l  %69 = fneg contract float %68\l  %70 = fmul contract float %68, %69\l  %71 = fdiv contract float %70, %42\l  %72 = fmul float %71, 0x3FF7154760000000\l  %73 = tail call float @llvm.rint.f32(float %72)\l  %74 = fcmp ogt float %71, 0x40562E4300000000\l  %75 = fcmp olt float %71, 0xC059D1DA00000000\l  %76 = fneg float %72\l  %77 = tail call float @llvm.fma.f32(float %71, float 0x3FF7154760000000,\l... float %76)\l  %78 = tail call float @llvm.fma.f32(float %71, float 0x3E54AE0BE0000000,\l... float %77)\l  %79 = fsub float %72, %73\l  %80 = fadd float %78, %79\l  %81 = tail call float @llvm.exp2.f32(float %80)\l  %82 = fptosi float %73 to i32\l  %83 = tail call float @llvm.amdgcn.ldexp.f32(float %81, i32 %82)\l  %84 = select i1 %75, float 0.000000e+00, float %83\l  %85 = select i1 %74, float 0x7FF0000000000000, float %84\l  %86 = fpext float %85 to double\l  %87 = fdiv contract double %86, %45\l  %88 = fptrunc double %87 to float\l  %89 = sub nsw i32 %16, %63\l  %90 = mul nsw i32 %89, %89\l  %91 = sitofp i32 %90 to float\l  %92 = icmp eq i32 %16, %63\l  %93 = select i1 %92, float 0x41F0000000000000, float 1.000000e+00\l  %94 = fmul float %93, %91\l  %95 = tail call float @llvm.sqrt.f32(float %94)\l  %96 = bitcast float %95 to i32\l  %97 = add nsw i32 %96, -1\l  %98 = bitcast i32 %97 to float\l  %99 = add nsw i32 %96, 1\l  %100 = bitcast i32 %99 to float\l  %101 = tail call i1 @llvm.amdgcn.class.f32(float %94, i32 608)\l  %102 = select i1 %92, float 0x3EF0000000000000, float 1.000000e+00\l  %103 = fneg float %100\l  %104 = tail call float @llvm.fma.f32(float %103, float %95, float %94)\l  %105 = fcmp ogt float %104, 0.000000e+00\l  %106 = fneg float %98\l  %107 = tail call float @llvm.fma.f32(float %106, float %95, float %94)\l  %108 = fcmp ole float %107, 0.000000e+00\l  %109 = select i1 %108, float %98, float %95\l  %110 = select i1 %105, float %100, float %109\l  %111 = fmul float %102, %110\l  %112 = select i1 %101, float %94, float %111\l  %113 = fneg contract float %112\l  %114 = fmul contract float %112, %113\l  %115 = fdiv contract float %114, %47\l  %116 = fmul float %115, 0x3FF7154760000000\l  %117 = tail call float @llvm.rint.f32(float %116)\l  %118 = fcmp ogt float %115, 0x40562E4300000000\l  %119 = fcmp olt float %115, 0xC059D1DA00000000\l  %120 = fneg float %116\l  %121 = tail call float @llvm.fma.f32(float %115, float 0x3FF7154760000000,\l... float %120)\l  %122 = tail call float @llvm.fma.f32(float %115, float 0x3E54AE0BE0000000,\l... float %121)\l  %123 = fsub float %116, %117\l  %124 = fadd float %122, %123\l  %125 = tail call float @llvm.exp2.f32(float %124)\l  %126 = fptosi float %117 to i32\l  %127 = tail call float @llvm.amdgcn.ldexp.f32(float %125, i32 %126)\l  %128 = select i1 %119, float 0.000000e+00, float %127\l  %129 = select i1 %118, float 0x7FF0000000000000, float %128\l  %130 = fpext float %129 to double\l  %131 = fdiv contract double %130, %50\l  %132 = fptrunc double %131 to float\l  %133 = fmul contract float %132, %88\l  %134 = fmul contract float %67, %133\l  %135 = fadd contract float %59, %134\l  %136 = fadd contract float %60, %133\l  %137 = add nuw nsw i32 %58, 1\l  %138 = icmp eq i32 %137, %4\l  br i1 %138, label %51, label %57, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x57b12c0:s0 -> Node0x57b13c0;
	Node0x57b12c0:s1 -> Node0x57b12c0;
	Node0x57af6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%139:\l139:                                              \l  ret void\l}"];
}
