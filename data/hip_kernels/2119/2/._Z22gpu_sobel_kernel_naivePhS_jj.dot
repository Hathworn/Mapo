digraph "CFG for '_Z22gpu_sobel_kernel_naivePhS_jj' function" {
	label="CFG for '_Z22gpu_sobel_kernel_naivePhS_jj' function";

	Node0x46ebdc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = mul i32 %21, %2\l  %23 = icmp eq i32 %21, 0\l  br i1 %23, label %93, label %24\l|{<s0>T|<s1>F}}"];
	Node0x46ebdc0:s0 -> Node0x46ef7f0;
	Node0x46ebdc0:s1 -> Node0x46ef880;
	Node0x46ef880 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e36c5570",label="{%24:\l24:                                               \l  %25 = add i32 %3, -1\l  %26 = icmp ult i32 %21, %25\l  %27 = icmp ne i32 %13, 0\l  %28 = select i1 %26, i1 %27, i1 false\l  %29 = add i32 %2, -1\l  %30 = icmp ult i32 %13, %29\l  %31 = select i1 %28, i1 %30, i1 false\l  br i1 %31, label %32, label %93\l|{<s0>T|<s1>F}}"];
	Node0x46ef880:s0 -> Node0x46efe50;
	Node0x46ef880:s1 -> Node0x46ef7f0;
	Node0x46efe50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%32:\l32:                                               \l  %33 = add nsw i32 %21, -1\l  %34 = mul i32 %33, %2\l  %35 = add nsw i32 %13, -1\l  %36 = add i32 %34, %35\l  %37 = zext i32 %36 to i64\l  %38 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %37\l  %39 = load i8, i8 addrspace(1)* %38, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %40 = zext i8 %39 to i32\l  %41 = add i32 %34, %13\l  %42 = zext i32 %41 to i64\l  %43 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %42\l  %44 = load i8, i8 addrspace(1)* %43, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %45 = zext i8 %44 to i32\l  %46 = add nuw nsw i32 %13, 1\l  %47 = add i32 %34, %46\l  %48 = zext i32 %47 to i64\l  %49 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %48\l  %50 = load i8, i8 addrspace(1)* %49, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %51 = zext i8 %50 to i32\l  %52 = add nuw nsw i32 %21, 1\l  %53 = mul i32 %52, %2\l  %54 = add i32 %53, %35\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %55\l  %57 = load i8, i8 addrspace(1)* %56, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %58 = zext i8 %57 to i32\l  %59 = add i32 %53, %13\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %60\l  %62 = load i8, i8 addrspace(1)* %61, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %63 = zext i8 %62 to i32\l  %64 = add i32 %53, %46\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %65\l  %67 = load i8, i8 addrspace(1)* %66, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %68 = zext i8 %67 to i32\l  %69 = add nuw nsw i32 %45, %40\l  %70 = add nuw nsw i32 %69, %51\l  %71 = add nuw nsw i32 %58, %63\l  %72 = add nuw nsw i32 %71, %68\l  %73 = sub nsw i32 %70, %72\l  %74 = tail call i32 @llvm.abs.i32(i32 %73, i1 true)\l  %75 = add i32 %22, %35\l  %76 = zext i32 %75 to i64\l  %77 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %76\l  %78 = load i8, i8 addrspace(1)* %77, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %79 = zext i8 %78 to i32\l  %80 = add i32 %22, %46\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %81\l  %83 = load i8, i8 addrspace(1)* %82, align 1, !tbaa !7, !amdgpu.noclobber !5\l  %84 = zext i8 %83 to i32\l  %85 = add nuw nsw i32 %40, %58\l  %86 = add nuw nsw i32 %51, %68\l  %87 = add nuw nsw i32 %85, %79\l  %88 = add nuw nsw i32 %86, %84\l  %89 = sub nsw i32 %87, %88\l  %90 = tail call i32 @llvm.abs.i32(i32 %89, i1 true)\l  %91 = add nuw nsw i32 %90, %74\l  %92 = trunc i32 %91 to i8\l  br label %93\l}"];
	Node0x46efe50 -> Node0x46ef7f0;
	Node0x46ef7f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%93:\l93:                                               \l  %94 = phi i8 [ %92, %32 ], [ 0, %24 ], [ 0, %4 ]\l  %95 = add i32 %22, %13\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %96\l  store i8 %94, i8 addrspace(1)* %97, align 1, !tbaa !7\l  ret void\l}"];
}
