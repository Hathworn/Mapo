digraph "CFG for '_Z12initSinusoidPfS_fiiff' function" {
	label="CFG for '_Z12initSinusoidPfS_fiiff' function";

	Node0x64cc460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = mul i32 %14, %13\l  %16 = add i32 %15, %8\l  %17 = icmp ult i32 %16, %3\l  br i1 %17, label %18, label %34\l|{<s0>T|<s1>F}}"];
	Node0x64cc460:s0 -> Node0x64ce360;
	Node0x64cc460:s1 -> Node0x64ce3f0;
	Node0x64ce360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%18:\l18:                                               \l  %19 = fpext float %6 to double\l  %20 = fpext float %5 to double\l  %21 = add i32 %8, %15\l  %22 = add i32 %21, -1\l  br label %23\l}"];
	Node0x64ce360 -> Node0x64ce730;
	Node0x64ce730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%23:\l23:                                               \l  %24 = phi i32 [ %16, %18 ], [ %116, %60 ]\l  %25 = phi i32 [ 0, %18 ], [ %114, %60 ]\l  %26 = icmp sgt i32 %24, 0\l  br i1 %26, label %27, label %60\l|{<s0>T|<s1>F}}"];
	Node0x64ce730:s0 -> Node0x64ceb40;
	Node0x64ce730:s1 -> Node0x64ce820;
	Node0x64ceb40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%27:\l27:                                               \l  %28 = mul i32 %25, %13\l  %29 = add i32 %22, %28\l  %30 = and i32 %24, 7\l  %31 = icmp ult i32 %29, 7\l  br i1 %31, label %43, label %32\l|{<s0>T|<s1>F}}"];
	Node0x64ceb40:s0 -> Node0x64ceef0;
	Node0x64ceb40:s1 -> Node0x64cef40;
	Node0x64cef40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%32:\l32:                                               \l  %33 = and i32 %24, -8\l  br label %118\l}"];
	Node0x64cef40 -> Node0x64ce310;
	Node0x64ce3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%34:\l34:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %35 = icmp eq i32 %16, 0\l  %36 = icmp sgt i32 %4, 0\l  %37 = select i1 %35, i1 %36, i1 false\l  br i1 %37, label %38, label %255\l|{<s0>T|<s1>F}}"];
	Node0x64ce3f0:s0 -> Node0x64cf7d0;
	Node0x64ce3f0:s1 -> Node0x64cf860;
	Node0x64cf7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%38:\l38:                                               \l  %39 = and i32 %4, 3\l  %40 = icmp ult i32 %4, 4\l  br i1 %40, label %233, label %41\l|{<s0>T|<s1>F}}"];
	Node0x64cf7d0:s0 -> Node0x64cfb20;
	Node0x64cf7d0:s1 -> Node0x64cfb70;
	Node0x64cfb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%41:\l41:                                               \l  %42 = and i32 %4, -4\l  br label %172\l}"];
	Node0x64cfb70 -> Node0x64cfd70;
	Node0x64ceef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%43:\l43:                                               \l  %44 = phi float [ undef, %27 ], [ %168, %118 ]\l  %45 = phi i32 [ 0, %27 ], [ %169, %118 ]\l  %46 = phi float [ 0.000000e+00, %27 ], [ %168, %118 ]\l  %47 = icmp eq i32 %30, 0\l  br i1 %47, label %60, label %48\l|{<s0>T|<s1>F}}"];
	Node0x64ceef0:s0 -> Node0x64ce820;
	Node0x64ceef0:s1 -> Node0x64d0fe0;
	Node0x64d0fe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%48:\l48:                                               \l  %49 = phi i32 [ %57, %48 ], [ %45, %43 ]\l  %50 = phi float [ %56, %48 ], [ %46, %43 ]\l  %51 = phi i32 [ %58, %48 ], [ 0, %43 ]\l  %52 = add nsw i32 %49, %4\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !7\l  %56 = fadd contract float %50, %55\l  %57 = add nuw nsw i32 %49, 1\l  %58 = add i32 %51, 1\l  %59 = icmp eq i32 %58, %30\l  br i1 %59, label %60, label %48, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x64d0fe0:s0 -> Node0x64ce820;
	Node0x64d0fe0:s1 -> Node0x64d0fe0;
	Node0x64ce820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%60:\l60:                                               \l  %61 = phi float [ 0.000000e+00, %23 ], [ %44, %43 ], [ %56, %48 ]\l  %62 = fdiv contract float %61, %2\l  %63 = fmul contract float %62, 2.000000e+00\l  %64 = fpext float %63 to double\l  %65 = tail call double @llvm.fabs.f64(double %64)\l  %66 = fmul double %65, 5.000000e-01\l  %67 = tail call double @llvm.amdgcn.fract.f64(double %66)\l  %68 = tail call i1 @llvm.amdgcn.class.f64(double %66, i32 516)\l  %69 = fmul double %67, 2.000000e+00\l  %70 = select i1 %68, double 0.000000e+00, double %69\l  %71 = fcmp ogt double %65, 1.000000e+00\l  %72 = select i1 %71, double %70, double %65\l  %73 = fmul double %72, 2.000000e+00\l  %74 = tail call double @llvm.rint.f64(double %73)\l  %75 = tail call double @llvm.fma.f64(double %74, double -5.000000e-01,\l... double %72)\l  %76 = fptosi double %74 to i32\l  %77 = fmul double %75, %75\l  %78 = tail call double @llvm.fma.f64(double %77, double 0x3F3E357EF99EB0BB,\l... double 0xBF7E2FE76FDFFD2B)\l  %79 = tail call double @llvm.fma.f64(double %77, double %78, double\l... 0x3FB50782D5F14825)\l  %80 = tail call double @llvm.fma.f64(double %77, double %79, double\l... 0xBFE32D2CCDFE9424)\l  %81 = tail call double @llvm.fma.f64(double %77, double %80, double\l... 0x400466BC67754FFF)\l  %82 = tail call double @llvm.fma.f64(double %77, double %81, double\l... 0xC014ABBCE625BE09)\l  %83 = fmul double %75, %77\l  %84 = fmul double %83, %82\l  %85 = tail call double @llvm.fma.f64(double %75, double 0x400921FB54442D18,\l... double %84)\l  %86 = tail call double @llvm.fma.f64(double %77, double 0xBF1B167302E21C33,\l... double 0x3F5F9C89CA1D4F33)\l  %87 = tail call double @llvm.fma.f64(double %77, double %86, double\l... 0xBF9A6D1E7294BFF9)\l  %88 = tail call double @llvm.fma.f64(double %77, double %87, double\l... 0x3FCE1F5067B90B37)\l  %89 = tail call double @llvm.fma.f64(double %77, double %88, double\l... 0xBFF55D3C7E3C325B)\l  %90 = tail call double @llvm.fma.f64(double %77, double %89, double\l... 0x40103C1F081B5A67)\l  %91 = tail call double @llvm.fma.f64(double %77, double %90, double\l... 0xC013BD3CC9BE45DE)\l  %92 = tail call double @llvm.fma.f64(double %77, double %91, double\l... 1.000000e+00)\l  %93 = and i32 %76, 1\l  %94 = icmp eq i32 %93, 0\l  %95 = select i1 %94, double %85, double %92\l  %96 = bitcast double %95 to \<2 x i32\>\l  %97 = shl i32 %76, 30\l  %98 = bitcast double %64 to \<2 x i32\>\l  %99 = extractelement \<2 x i32\> %98, i64 1\l  %100 = xor i32 %97, %99\l  %101 = and i32 %100, -2147483648\l  %102 = extractelement \<2 x i32\> %96, i64 1\l  %103 = xor i32 %102, %101\l  %104 = insertelement \<2 x i32\> %96, i32 %103, i64 1\l  %105 = tail call i1 @llvm.amdgcn.class.f64(double %64, i32 519)\l  %106 = select i1 %105, \<2 x i32\> \<i32 0, i32 2146959360\>, \<2 x i32\> %104\l  %107 = bitcast \<2 x i32\> %106 to double\l  %108 = fmul contract double %19, %107\l  %109 = fadd contract double %108, %20\l  %110 = fptrunc double %109 to float\l  %111 = add nsw i32 %24, %4\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %112\l  store float %110, float addrspace(1)* %113, align 4, !tbaa !7\l  %114 = add nuw nsw i32 %25, 1\l  %115 = mul i32 %114, %13\l  %116 = add i32 %115, %16\l  %117 = icmp ult i32 %116, %3\l  br i1 %117, label %23, label %34, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x64ce820:s0 -> Node0x64ce730;
	Node0x64ce820:s1 -> Node0x64ce3f0;
	Node0x64ce310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%118:\l118:                                              \l  %119 = phi i32 [ 0, %32 ], [ %169, %118 ]\l  %120 = phi float [ 0.000000e+00, %32 ], [ %168, %118 ]\l  %121 = phi i32 [ 0, %32 ], [ %170, %118 ]\l  %122 = add nsw i32 %119, %4\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %1, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7\l  %126 = fadd contract float %120, %125\l  %127 = or i32 %119, 1\l  %128 = add nsw i32 %127, %4\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %1, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7\l  %132 = fadd contract float %126, %131\l  %133 = or i32 %119, 2\l  %134 = add nsw i32 %133, %4\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %1, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7\l  %138 = fadd contract float %132, %137\l  %139 = or i32 %119, 3\l  %140 = add nsw i32 %139, %4\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %1, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7\l  %144 = fadd contract float %138, %143\l  %145 = or i32 %119, 4\l  %146 = add nsw i32 %145, %4\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %1, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7\l  %150 = fadd contract float %144, %149\l  %151 = or i32 %119, 5\l  %152 = add nsw i32 %151, %4\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %1, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7\l  %156 = fadd contract float %150, %155\l  %157 = or i32 %119, 6\l  %158 = add nsw i32 %157, %4\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7\l  %162 = fadd contract float %156, %161\l  %163 = or i32 %119, 7\l  %164 = add nsw i32 %163, %4\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %1, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !7\l  %168 = fadd contract float %162, %167\l  %169 = add nuw nsw i32 %119, 8\l  %170 = add i32 %121, 8\l  %171 = icmp eq i32 %170, %33\l  br i1 %171, label %43, label %118, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x64ce310:s0 -> Node0x64ceef0;
	Node0x64ce310:s1 -> Node0x64ce310;
	Node0x64cfd70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%172:\l172:                                              \l  %173 = phi i32 [ 0, %41 ], [ %230, %172 ]\l  %174 = phi i32 [ 0, %41 ], [ %231, %172 ]\l  %175 = add nsw i32 %173, %3\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %0, i64 %176\l  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !7\l  %179 = zext i32 %173 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %0, i64 %179\l  store float %178, float addrspace(1)* %180, align 4, !tbaa !7\l  %181 = add i32 %173, %4\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %0, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !7\l  %185 = add i32 %181, %3\l  %186 = sext i32 %185 to i64\l  %187 = getelementptr inbounds float, float addrspace(1)* %0, i64 %186\l  store float %184, float addrspace(1)* %187, align 4, !tbaa !7\l  %188 = or i32 %173, 1\l  %189 = add nsw i32 %188, %3\l  %190 = sext i32 %189 to i64\l  %191 = getelementptr inbounds float, float addrspace(1)* %0, i64 %190\l  %192 = load float, float addrspace(1)* %191, align 4, !tbaa !7\l  %193 = zext i32 %188 to i64\l  %194 = getelementptr inbounds float, float addrspace(1)* %0, i64 %193\l  store float %192, float addrspace(1)* %194, align 4, !tbaa !7\l  %195 = add i32 %188, %4\l  %196 = sext i32 %195 to i64\l  %197 = getelementptr inbounds float, float addrspace(1)* %0, i64 %196\l  %198 = load float, float addrspace(1)* %197, align 4, !tbaa !7\l  %199 = add i32 %195, %3\l  %200 = sext i32 %199 to i64\l  %201 = getelementptr inbounds float, float addrspace(1)* %0, i64 %200\l  store float %198, float addrspace(1)* %201, align 4, !tbaa !7\l  %202 = or i32 %173, 2\l  %203 = add nsw i32 %202, %3\l  %204 = sext i32 %203 to i64\l  %205 = getelementptr inbounds float, float addrspace(1)* %0, i64 %204\l  %206 = load float, float addrspace(1)* %205, align 4, !tbaa !7\l  %207 = zext i32 %202 to i64\l  %208 = getelementptr inbounds float, float addrspace(1)* %0, i64 %207\l  store float %206, float addrspace(1)* %208, align 4, !tbaa !7\l  %209 = add i32 %202, %4\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds float, float addrspace(1)* %0, i64 %210\l  %212 = load float, float addrspace(1)* %211, align 4, !tbaa !7\l  %213 = add i32 %209, %3\l  %214 = sext i32 %213 to i64\l  %215 = getelementptr inbounds float, float addrspace(1)* %0, i64 %214\l  store float %212, float addrspace(1)* %215, align 4, !tbaa !7\l  %216 = or i32 %173, 3\l  %217 = add nsw i32 %216, %3\l  %218 = sext i32 %217 to i64\l  %219 = getelementptr inbounds float, float addrspace(1)* %0, i64 %218\l  %220 = load float, float addrspace(1)* %219, align 4, !tbaa !7\l  %221 = zext i32 %216 to i64\l  %222 = getelementptr inbounds float, float addrspace(1)* %0, i64 %221\l  store float %220, float addrspace(1)* %222, align 4, !tbaa !7\l  %223 = add i32 %216, %4\l  %224 = sext i32 %223 to i64\l  %225 = getelementptr inbounds float, float addrspace(1)* %0, i64 %224\l  %226 = load float, float addrspace(1)* %225, align 4, !tbaa !7\l  %227 = add i32 %223, %3\l  %228 = sext i32 %227 to i64\l  %229 = getelementptr inbounds float, float addrspace(1)* %0, i64 %228\l  store float %226, float addrspace(1)* %229, align 4, !tbaa !7\l  %230 = add nuw nsw i32 %173, 4\l  %231 = add i32 %174, 4\l  %232 = icmp eq i32 %231, %42\l  br i1 %232, label %233, label %172, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x64cfd70:s0 -> Node0x64cfb20;
	Node0x64cfd70:s1 -> Node0x64cfd70;
	Node0x64cfb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%233:\l233:                                              \l  %234 = phi i32 [ 0, %38 ], [ %230, %172 ]\l  %235 = icmp eq i32 %39, 0\l  br i1 %235, label %255, label %236\l|{<s0>T|<s1>F}}"];
	Node0x64cfb20:s0 -> Node0x64cf860;
	Node0x64cfb20:s1 -> Node0x64dad30;
	Node0x64dad30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%236:\l236:                                              \l  %237 = phi i32 [ %252, %236 ], [ %234, %233 ]\l  %238 = phi i32 [ %253, %236 ], [ 0, %233 ]\l  %239 = add nsw i32 %237, %3\l  %240 = sext i32 %239 to i64\l  %241 = getelementptr inbounds float, float addrspace(1)* %0, i64 %240\l  %242 = load float, float addrspace(1)* %241, align 4, !tbaa !7\l  %243 = zext i32 %237 to i64\l  %244 = getelementptr inbounds float, float addrspace(1)* %0, i64 %243\l  store float %242, float addrspace(1)* %244, align 4, !tbaa !7\l  %245 = add i32 %237, %4\l  %246 = sext i32 %245 to i64\l  %247 = getelementptr inbounds float, float addrspace(1)* %0, i64 %246\l  %248 = load float, float addrspace(1)* %247, align 4, !tbaa !7\l  %249 = add i32 %245, %3\l  %250 = sext i32 %249 to i64\l  %251 = getelementptr inbounds float, float addrspace(1)* %0, i64 %250\l  store float %248, float addrspace(1)* %251, align 4, !tbaa !7\l  %252 = add nuw nsw i32 %237, 1\l  %253 = add i32 %238, 1\l  %254 = icmp eq i32 %253, %39\l  br i1 %254, label %255, label %236, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x64dad30:s0 -> Node0x64cf860;
	Node0x64dad30:s1 -> Node0x64dad30;
	Node0x64cf860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%255:\l255:                                              \l  ret void\l}"];
}
