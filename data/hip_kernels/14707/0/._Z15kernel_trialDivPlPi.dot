digraph "CFG for '_Z15kernel_trialDivPlPi' function" {
	label="CFG for '_Z15kernel_trialDivPlPi' function";

	Node0x5f8c320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = shl nsw i32 %3, 7\l  %6 = add nsw i32 %5, %4\l  %7 = sext i32 %6 to i64\l  %8 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %7\l  %9 = load i64, i64 addrspace(1)* %8, align 8, !tbaa !5, !amdgpu.noclobber !9\l  %10 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %7\l  br label %11\l}"];
	Node0x5f8c320 -> Node0x5f8d2c0;
	Node0x5f8d2c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%11:\l11:                                               \l  %12 = phi i32 [ 0, %2 ], [ %92, %91 ]\l  %13 = zext i32 %12 to i64\l  %14 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %13\l  %15 = load i64, i64 addrspace(4)* %14, align 16, !tbaa !5\l  %16 = srem i64 %9, %15\l  %17 = icmp eq i64 %16, 0\l  br i1 %17, label %18, label %21\l|{<s0>T|<s1>F}}"];
	Node0x5f8d2c0:s0 -> Node0x5f8e550;
	Node0x5f8d2c0:s1 -> Node0x5f8e5e0;
	Node0x5f8e550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%18:\l18:                                               \l  %19 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %20 = add nsw i32 %19, -1\l  store i32 %20, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %21\l}"];
	Node0x5f8e550 -> Node0x5f8e5e0;
	Node0x5f8e5e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%21:\l21:                                               \l  %22 = or i32 %12, 1\l  %23 = zext i32 %22 to i64\l  %24 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %23\l  %25 = load i64, i64 addrspace(4)* %24, align 8, !tbaa !5\l  %26 = srem i64 %9, %25\l  %27 = icmp eq i64 %26, 0\l  br i1 %27, label %28, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5f8e5e0:s0 -> Node0x5f8f410;
	Node0x5f8e5e0:s1 -> Node0x5f8f460;
	Node0x5f8f410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%28:\l28:                                               \l  %29 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %30 = add nsw i32 %29, -1\l  store i32 %30, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %31\l}"];
	Node0x5f8f410 -> Node0x5f8f460;
	Node0x5f8f460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%31:\l31:                                               \l  %32 = or i32 %12, 2\l  %33 = zext i32 %32 to i64\l  %34 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %33\l  %35 = load i64, i64 addrspace(4)* %34, align 16, !tbaa !5\l  %36 = srem i64 %9, %35\l  %37 = icmp eq i64 %36, 0\l  br i1 %37, label %38, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5f8f460:s0 -> Node0x5f8fc20;
	Node0x5f8f460:s1 -> Node0x5f8fc70;
	Node0x5f8fc20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%38:\l38:                                               \l  %39 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %40 = add nsw i32 %39, -1\l  store i32 %40, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %41\l}"];
	Node0x5f8fc20 -> Node0x5f8fc70;
	Node0x5f8fc70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%41:\l41:                                               \l  %42 = or i32 %12, 3\l  %43 = zext i32 %42 to i64\l  %44 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %43\l  %45 = load i64, i64 addrspace(4)* %44, align 8, !tbaa !5\l  %46 = srem i64 %9, %45\l  %47 = icmp eq i64 %46, 0\l  br i1 %47, label %48, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5f8fc70:s0 -> Node0x5f902f0;
	Node0x5f8fc70:s1 -> Node0x5f90340;
	Node0x5f902f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%48:\l48:                                               \l  %49 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %50 = add nsw i32 %49, -1\l  store i32 %50, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %51\l}"];
	Node0x5f902f0 -> Node0x5f90340;
	Node0x5f90340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = or i32 %12, 4\l  %53 = zext i32 %52 to i64\l  %54 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %53\l  %55 = load i64, i64 addrspace(4)* %54, align 16, !tbaa !5\l  %56 = srem i64 %9, %55\l  %57 = icmp eq i64 %56, 0\l  br i1 %57, label %58, label %61\l|{<s0>T|<s1>F}}"];
	Node0x5f90340:s0 -> Node0x5f909c0;
	Node0x5f90340:s1 -> Node0x5f90a10;
	Node0x5f909c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%58:\l58:                                               \l  %59 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %60 = add nsw i32 %59, -1\l  store i32 %60, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %61\l}"];
	Node0x5f909c0 -> Node0x5f90a10;
	Node0x5f90a10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = or i32 %12, 5\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %63\l  %65 = load i64, i64 addrspace(4)* %64, align 8, !tbaa !5\l  %66 = srem i64 %9, %65\l  %67 = icmp eq i64 %66, 0\l  br i1 %67, label %68, label %71\l|{<s0>T|<s1>F}}"];
	Node0x5f90a10:s0 -> Node0x5f8f9c0;
	Node0x5f90a10:s1 -> Node0x5f91310;
	Node0x5f8f9c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%68:\l68:                                               \l  %69 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %70 = add nsw i32 %69, -1\l  store i32 %70, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %71\l}"];
	Node0x5f8f9c0 -> Node0x5f91310;
	Node0x5f91310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%71:\l71:                                               \l  %72 = or i32 %12, 6\l  %73 = zext i32 %72 to i64\l  %74 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %73\l  %75 = load i64, i64 addrspace(4)* %74, align 16, !tbaa !5\l  %76 = srem i64 %9, %75\l  %77 = icmp eq i64 %76, 0\l  br i1 %77, label %78, label %81\l|{<s0>T|<s1>F}}"];
	Node0x5f91310:s0 -> Node0x5f91960;
	Node0x5f91310:s1 -> Node0x5f919b0;
	Node0x5f91960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%78:\l78:                                               \l  %79 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %80 = add nsw i32 %79, -1\l  store i32 %80, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %81\l}"];
	Node0x5f91960 -> Node0x5f919b0;
	Node0x5f919b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%81:\l81:                                               \l  %82 = or i32 %12, 7\l  %83 = zext i32 %82 to i64\l  %84 = getelementptr inbounds [256 x i64], [256 x i64] addrspace(4)*\l... @d_sPrimes, i64 0, i64 %83\l  %85 = load i64, i64 addrspace(4)* %84, align 8, !tbaa !5\l  %86 = srem i64 %9, %85\l  %87 = icmp eq i64 %86, 0\l  br i1 %87, label %88, label %91\l|{<s0>T|<s1>F}}"];
	Node0x5f919b0:s0 -> Node0x5f92000;
	Node0x5f919b0:s1 -> Node0x5f8da90;
	Node0x5f92000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%88:\l88:                                               \l  %89 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !10\l  %90 = add nsw i32 %89, -1\l  store i32 %90, i32 addrspace(1)* %10, align 4, !tbaa !10\l  br label %91\l}"];
	Node0x5f92000 -> Node0x5f8da90;
	Node0x5f8da90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%91:\l91:                                               \l  %92 = add nuw nsw i32 %12, 8\l  %93 = icmp eq i32 %92, 256\l  br i1 %93, label %94, label %11, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5f8da90:s0 -> Node0x5f92420;
	Node0x5f8da90:s1 -> Node0x5f8d2c0;
	Node0x5f92420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%94:\l94:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  ret void\l}"];
}
