digraph "CFG for '_Z16computeDistancesiiPfS_' function" {
	label="CFG for '_Z16computeDistancesiiPfS_' function";

	Node0x474b130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = mul i32 %10, %9\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = sdiv i32 %13, %0\l  %15 = mul nsw i32 %14, %0\l  %16 = sub nsw i32 %13, %15\l  %17 = mul nsw i32 %0, %0\l  %18 = icmp slt i32 %13, %17\l  br i1 %18, label %19, label %184\l|{<s0>T|<s1>F}}"];
	Node0x474b130:s0 -> Node0x474d2f0;
	Node0x474b130:s1 -> Node0x474d380;
	Node0x474d2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%19:\l19:                                               \l  %20 = mul nsw i32 %14, %1\l  %21 = mul nsw i32 %16, %1\l  %22 = icmp sgt i32 %1, 1\l  br i1 %22, label %23, label %53\l|{<s0>T|<s1>F}}"];
	Node0x474d2f0:s0 -> Node0x474d670;
	Node0x474d2f0:s1 -> Node0x474d6c0;
	Node0x474d670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = add i32 %1, -1\l  %25 = add i32 %1, -2\l  %26 = and i32 %24, 7\l  %27 = icmp ult i32 %25, 7\l  br i1 %27, label %30, label %28\l|{<s0>T|<s1>F}}"];
	Node0x474d670:s0 -> Node0x474dad0;
	Node0x474d670:s1 -> Node0x474db20;
	Node0x474db20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%28:\l28:                                               \l  %29 = and i32 %24, -8\l  br label %82\l}"];
	Node0x474db20 -> Node0x474dd20;
	Node0x474dad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = phi float [ undef, %23 ], [ %180, %82 ]\l  %32 = phi i32 [ 1, %23 ], [ %181, %82 ]\l  %33 = phi float [ 0.000000e+00, %23 ], [ %180, %82 ]\l  %34 = icmp eq i32 %26, 0\l  br i1 %34, label %53, label %35\l|{<s0>T|<s1>F}}"];
	Node0x474dad0:s0 -> Node0x474d6c0;
	Node0x474dad0:s1 -> Node0x474f0e0;
	Node0x474f0e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%35:\l35:                                               \l  %36 = phi i32 [ %50, %35 ], [ %32, %30 ]\l  %37 = phi float [ %49, %35 ], [ %33, %30 ]\l  %38 = phi i32 [ %51, %35 ], [ 0, %30 ]\l  %39 = add nsw i32 %36, %20\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %2, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %43 = add nsw i32 %36, %21\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %2, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = fsub contract float %42, %46\l  %48 = fmul contract float %47, %47\l  %49 = fadd contract float %37, %48\l  %50 = add nuw nsw i32 %36, 1\l  %51 = add i32 %38, 1\l  %52 = icmp eq i32 %51, %26\l  br i1 %52, label %53, label %35, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x474f0e0:s0 -> Node0x474d6c0;
	Node0x474f0e0:s1 -> Node0x474f0e0;
	Node0x474d6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%53:\l53:                                               \l  %54 = phi float [ 0.000000e+00, %19 ], [ %31, %30 ], [ %49, %35 ]\l  %55 = fcmp olt float %54, 0x39F0000000000000\l  %56 = select i1 %55, float 0x41F0000000000000, float 1.000000e+00\l  %57 = fmul float %54, %56\l  %58 = tail call float @llvm.sqrt.f32(float %57)\l  %59 = bitcast float %58 to i32\l  %60 = add nsw i32 %59, -1\l  %61 = bitcast i32 %60 to float\l  %62 = add nsw i32 %59, 1\l  %63 = bitcast i32 %62 to float\l  %64 = tail call i1 @llvm.amdgcn.class.f32(float %57, i32 608)\l  %65 = select i1 %55, float 0x3EF0000000000000, float 1.000000e+00\l  %66 = fneg float %63\l  %67 = tail call float @llvm.fma.f32(float %66, float %58, float %57)\l  %68 = fcmp ogt float %67, 0.000000e+00\l  %69 = fneg float %61\l  %70 = tail call float @llvm.fma.f32(float %69, float %58, float %57)\l  %71 = fcmp ole float %70, 0.000000e+00\l  %72 = select i1 %71, float %61, float %58\l  %73 = select i1 %68, float %63, float %72\l  %74 = fmul float %65, %73\l  %75 = select i1 %64, float %57, float %74\l  %76 = sext i32 %13 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %3, i64 %76\l  store float %75, float addrspace(1)* %77, align 4, !tbaa !7\l  %78 = mul nsw i32 %16, %0\l  %79 = add nsw i32 %78, %14\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %3, i64 %80\l  store float %75, float addrspace(1)* %81, align 4, !tbaa !7\l  br label %184\l}"];
	Node0x474d6c0 -> Node0x474d380;
	Node0x474dd20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%82:\l82:                                               \l  %83 = phi i32 [ 1, %28 ], [ %181, %82 ]\l  %84 = phi float [ 0.000000e+00, %28 ], [ %180, %82 ]\l  %85 = phi i32 [ 0, %28 ], [ %182, %82 ]\l  %86 = add nsw i32 %83, %20\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds float, float addrspace(1)* %2, i64 %87\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %90 = add nsw i32 %83, %21\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %2, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fsub contract float %89, %93\l  %95 = fmul contract float %94, %94\l  %96 = fadd contract float %84, %95\l  %97 = add nuw nsw i32 %83, 1\l  %98 = add nsw i32 %97, %20\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %2, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = add nsw i32 %97, %21\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fsub contract float %101, %105\l  %107 = fmul contract float %106, %106\l  %108 = fadd contract float %96, %107\l  %109 = add nuw nsw i32 %83, 2\l  %110 = add nsw i32 %109, %20\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %2, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %114 = add nsw i32 %109, %21\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %2, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fsub contract float %113, %117\l  %119 = fmul contract float %118, %118\l  %120 = fadd contract float %108, %119\l  %121 = add nuw nsw i32 %83, 3\l  %122 = add nsw i32 %121, %20\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = add nsw i32 %121, %21\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %2, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = fsub contract float %125, %129\l  %131 = fmul contract float %130, %130\l  %132 = fadd contract float %120, %131\l  %133 = add nuw nsw i32 %83, 4\l  %134 = add nsw i32 %133, %20\l  %135 = sext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %2, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %138 = add nsw i32 %133, %21\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %2, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = fsub contract float %137, %141\l  %143 = fmul contract float %142, %142\l  %144 = fadd contract float %132, %143\l  %145 = add nuw nsw i32 %83, 5\l  %146 = add nsw i32 %145, %20\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %2, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %150 = add nsw i32 %145, %21\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %2, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = fsub contract float %149, %153\l  %155 = fmul contract float %154, %154\l  %156 = fadd contract float %144, %155\l  %157 = add nuw nsw i32 %83, 6\l  %158 = add nsw i32 %157, %20\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %2, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %162 = add nsw i32 %157, %21\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %2, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %166 = fsub contract float %161, %165\l  %167 = fmul contract float %166, %166\l  %168 = fadd contract float %156, %167\l  %169 = add nuw nsw i32 %83, 7\l  %170 = add nsw i32 %169, %20\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %2, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %174 = add nsw i32 %169, %21\l  %175 = sext i32 %174 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %2, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %178 = fsub contract float %173, %177\l  %179 = fmul contract float %178, %178\l  %180 = fadd contract float %168, %179\l  %181 = add nuw nsw i32 %83, 8\l  %182 = add i32 %85, 8\l  %183 = icmp eq i32 %182, %29\l  br i1 %183, label %30, label %82, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x474dd20:s0 -> Node0x474dad0;
	Node0x474dd20:s1 -> Node0x474dd20;
	Node0x474d380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%184:\l184:                                              \l  ret void\l}"];
}
