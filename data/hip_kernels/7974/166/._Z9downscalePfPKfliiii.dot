digraph "CFG for '_Z9downscalePfPKfliiii' function" {
	label="CFG for '_Z9downscalePfPKfliiii' function";

	Node0x5716590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !7\l  %18 = mul i32 %10, %14\l  %19 = add i32 %18, %8\l  %20 = zext i32 %19 to i64\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !5, !invariant.load !6\l  %26 = zext i16 %25 to i32\l  %27 = udiv i32 %17, %14\l  %28 = mul i32 %27, %14\l  %29 = icmp ugt i32 %17, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %22, %14\l  %33 = mul i32 %32, %26\l  %34 = mul i32 %33, %31\l  %35 = add i32 %34, %21\l  %36 = zext i32 %35 to i64\l  %37 = add nuw nsw i64 %36, %20\l  %38 = icmp slt i64 %37, %2\l  %39 = icmp sgt i32 %3, 0\l  %40 = select i1 %38, i1 %39, i1 false\l  br i1 %40, label %41, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5716590:s0 -> Node0x571a980;
	Node0x5716590:s1 -> Node0x571aa10;
	Node0x571a980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%41:\l41:                                               \l  %42 = trunc i64 %37 to i32\l  %43 = getelementptr inbounds float, float addrspace(1)* %0, i64 %37\l  %44 = freeze i32 %42\l  %45 = freeze i32 %6\l  %46 = sdiv i32 %44, %45\l  %47 = mul i32 %46, %45\l  %48 = sub i32 %44, %47\l  %49 = freeze i32 %5\l  %50 = sdiv i32 %46, %49\l  %51 = mul i32 %50, %49\l  %52 = sub i32 %46, %51\l  %53 = freeze i32 %50\l  %54 = mul i32 %53, %5\l  %55 = add i32 %54, %52\l  %56 = mul i32 %55, %3\l  %57 = and i32 %3, 3\l  %58 = icmp ult i32 %3, 4\l  %59 = and i32 %3, -4\l  %60 = icmp eq i32 %57, 0\l  br label %61\l}"];
	Node0x571a980 -> Node0x571b600;
	Node0x571b600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%61:\l61:                                               \l  %62 = phi i32 [ 0, %41 ], [ %84, %83 ]\l  %63 = load float, float addrspace(1)* %43, align 4, !tbaa !16\l  br i1 %58, label %64, label %86\l|{<s0>T|<s1>F}}"];
	Node0x571b600:s0 -> Node0x571ba10;
	Node0x571b600:s1 -> Node0x571baa0;
	Node0x571ba10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%64:\l64:                                               \l  %65 = phi float [ %63, %61 ], [ %128, %86 ]\l  %66 = phi i32 [ 0, %61 ], [ %129, %86 ]\l  br i1 %60, label %83, label %67\l|{<s0>T|<s1>F}}"];
	Node0x571ba10:s0 -> Node0x571b6f0;
	Node0x571ba10:s1 -> Node0x571bff0;
	Node0x571bff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%67:\l67:                                               \l  %68 = phi float [ %79, %67 ], [ %65, %64 ]\l  %69 = phi i32 [ %80, %67 ], [ %66, %64 ]\l  %70 = phi i32 [ %81, %67 ], [ 0, %64 ]\l  %71 = add i32 %56, %69\l  %72 = mul i32 %71, %6\l  %73 = add i32 %72, %48\l  %74 = mul i32 %73, %3\l  %75 = add i32 %74, %62\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = fadd contract float %78, %68\l  store float %79, float addrspace(1)* %43, align 4, !tbaa !16\l  %80 = add nuw nsw i32 %69, 1\l  %81 = add i32 %70, 1\l  %82 = icmp eq i32 %81, %57\l  br i1 %82, label %83, label %67, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x571bff0:s0 -> Node0x571b6f0;
	Node0x571bff0:s1 -> Node0x571bff0;
	Node0x571b6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%83:\l83:                                               \l  %84 = add nuw nsw i32 %62, 1\l  %85 = icmp eq i32 %84, %3\l  br i1 %85, label %132, label %61, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x571b6f0:s0 -> Node0x571aa10;
	Node0x571b6f0:s1 -> Node0x571b600;
	Node0x571baa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%86:\l86:                                               \l  %87 = phi float [ %128, %86 ], [ %63, %61 ]\l  %88 = phi i32 [ %129, %86 ], [ 0, %61 ]\l  %89 = phi i32 [ %130, %86 ], [ 0, %61 ]\l  %90 = add i32 %56, %88\l  %91 = mul i32 %90, %6\l  %92 = add i32 %91, %48\l  %93 = mul i32 %92, %3\l  %94 = add i32 %93, %62\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %1, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16\l  %98 = fadd contract float %97, %87\l  store float %98, float addrspace(1)* %43, align 4, !tbaa !16\l  %99 = or i32 %88, 1\l  %100 = add i32 %56, %99\l  %101 = mul i32 %100, %6\l  %102 = add i32 %101, %48\l  %103 = mul i32 %102, %3\l  %104 = add i32 %103, %62\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = fadd contract float %107, %98\l  store float %108, float addrspace(1)* %43, align 4, !tbaa !16\l  %109 = or i32 %88, 2\l  %110 = add i32 %56, %109\l  %111 = mul i32 %110, %6\l  %112 = add i32 %111, %48\l  %113 = mul i32 %112, %3\l  %114 = add i32 %113, %62\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !16\l  %118 = fadd contract float %117, %108\l  store float %118, float addrspace(1)* %43, align 4, !tbaa !16\l  %119 = or i32 %88, 3\l  %120 = add i32 %56, %119\l  %121 = mul i32 %120, %6\l  %122 = add i32 %121, %48\l  %123 = mul i32 %122, %3\l  %124 = add i32 %123, %62\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !16\l  %128 = fadd contract float %127, %118\l  store float %128, float addrspace(1)* %43, align 4, !tbaa !16\l  %129 = add nuw nsw i32 %88, 4\l  %130 = add i32 %89, 4\l  %131 = icmp eq i32 %130, %59\l  br i1 %131, label %64, label %86, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x571baa0:s0 -> Node0x571ba10;
	Node0x571baa0:s1 -> Node0x571baa0;
	Node0x571aa10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%132:\l132:                                              \l  ret void\l}"];
}
