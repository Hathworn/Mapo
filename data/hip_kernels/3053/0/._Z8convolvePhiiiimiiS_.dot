digraph "CFG for '_Z8convolvePhiiiimiiS_' function" {
	label="CFG for '_Z8convolvePhiiiimiiS_' function";

	Node0x55cd7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !6\l  %19 = mul i32 %10, %15\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add i32 %19, %20\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 2, !range !4, !invariant.load !5\l  %26 = zext i16 %25 to i32\l  %27 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 16\l  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*\l  %29 = load i32, i32 addrspace(4)* %28, align 8, !tbaa !16\l  %30 = mul i32 %22, %26\l  %31 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %32 = add i32 %30, %31\l  %33 = sdiv i32 %6, 2\l  %34 = sdiv i32 %7, 2\l  %35 = add i32 %33, %3\l  %36 = icmp slt i32 %21, %35\l  %37 = add i32 %34, %4\l  %38 = icmp slt i32 %32, %37\l  %39 = select i1 %36, i1 true, i1 %38\l  br i1 %39, label %216, label %40\l|{<s0>T|<s1>F}}"];
	Node0x55cd7f0:s0 -> Node0x55d1820;
	Node0x55cd7f0:s1 -> Node0x55d18b0;
	Node0x55d18b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%40:\l40:                                               \l  %41 = udiv i32 %18, %15\l  %42 = mul i32 %41, %15\l  %43 = icmp ugt i32 %18, %42\l  %44 = zext i1 %43 to i32\l  %45 = add i32 %41, %44\l  %46 = mul i32 %45, %15\l  %47 = sub i32 %46, %35\l  %48 = icmp ult i32 %21, %47\l  br i1 %48, label %49, label %216\l|{<s0>T|<s1>F}}"];
	Node0x55d18b0:s0 -> Node0x55d1e50;
	Node0x55d18b0:s1 -> Node0x55d1820;
	Node0x55d1e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%49:\l49:                                               \l  %50 = udiv i32 %29, %26\l  %51 = mul i32 %50, %26\l  %52 = icmp ugt i32 %29, %51\l  %53 = zext i1 %52 to i32\l  %54 = add i32 %50, %53\l  %55 = mul i32 %54, %26\l  %56 = sub i32 %55, %37\l  %57 = icmp uge i32 %32, %56\l  %58 = icmp slt i32 %7, -1\l  %59 = select i1 %57, i1 true, i1 %58\l  br i1 %59, label %216, label %60\l|{<s0>T|<s1>F}}"];
	Node0x55d1e50:s0 -> Node0x55d1820;
	Node0x55d1e50:s1 -> Node0x55d2520;
	Node0x55d2520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%60:\l60:                                               \l  %61 = sub nsw i32 0, %34\l  %62 = sub nsw i32 0, %33\l  %63 = icmp slt i32 %6, -1\l  %64 = tail call i32 @llvm.abs.i32(i32 %33, i1 true)\l  %65 = tail call i32 @llvm.abs.i32(i32 %34, i1 true)\l  %66 = add i32 %33, %64\l  %67 = add i32 %66, 1\l  %68 = and i32 %67, 7\l  %69 = icmp eq i32 %68, 0\l  %70 = icmp ult i32 %66, 7\l  br label %71\l}"];
	Node0x55d2520 -> Node0x55d3020;
	Node0x55d3020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%71:\l71:                                               \l  %72 = phi float [ 0.000000e+00, %60 ], [ %105, %104 ]\l  %73 = phi i32 [ %61, %60 ], [ %106, %104 ]\l  br i1 %63, label %104, label %74\l|{<s0>T|<s1>F}}"];
	Node0x55d3020:s0 -> Node0x55d3ba0;
	Node0x55d3020:s1 -> Node0x55d3e00;
	Node0x55d3e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%74:\l74:                                               \l  %75 = add nsw i32 %73, %34\l  %76 = mul nsw i32 %75, %6\l  %77 = add i32 %76, %33\l  %78 = add nsw i32 %73, %32\l  %79 = mul nsw i32 %78, %1\l  %80 = add i32 %79, %21\l  br i1 %69, label %100, label %81\l|{<s0>T|<s1>F}}"];
	Node0x55d3e00:s0 -> Node0x55d42a0;
	Node0x55d3e00:s1 -> Node0x55d42f0;
	Node0x55d42f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%81:\l81:                                               \l  %82 = phi float [ %96, %81 ], [ %72, %74 ]\l  %83 = phi i32 [ %97, %81 ], [ %62, %74 ]\l  %84 = phi i32 [ %98, %81 ], [ 0, %74 ]\l  %85 = add i32 %77, %83\l  %86 = sext i32 %85 to i64\l  %87 = add i64 %86, %5\l  %88 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %87\l  %89 = load float, float addrspace(4)* %88, align 4, !tbaa !17\l  %90 = add i32 %80, %83\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %91\l  %93 = load i8, i8 addrspace(1)* %92, align 1, !tbaa !21, !amdgpu.noclobber !5\l  %94 = uitofp i8 %93 to float\l  %95 = fmul contract float %89, %94\l  %96 = fadd contract float %82, %95\l  %97 = add i32 %83, 1\l  %98 = add i32 %84, 1\l  %99 = icmp eq i32 %98, %68\l  br i1 %99, label %100, label %81, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x55d42f0:s0 -> Node0x55d42a0;
	Node0x55d42f0:s1 -> Node0x55d42f0;
	Node0x55d42a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%100:\l100:                                              \l  %101 = phi float [ undef, %74 ], [ %96, %81 ]\l  %102 = phi float [ %72, %74 ], [ %96, %81 ]\l  %103 = phi i32 [ %62, %74 ], [ %97, %81 ]\l  br i1 %70, label %104, label %108\l|{<s0>T|<s1>F}}"];
	Node0x55d42a0:s0 -> Node0x55d3ba0;
	Node0x55d42a0:s1 -> Node0x55d59e0;
	Node0x55d3ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%104:\l104:                                              \l  %105 = phi float [ %72, %71 ], [ %101, %100 ], [ %213, %108 ]\l  %106 = add i32 %73, 1\l  %107 = icmp eq i32 %73, %65\l  br i1 %107, label %216, label %71, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x55d3ba0:s0 -> Node0x55d1820;
	Node0x55d3ba0:s1 -> Node0x55d3020;
	Node0x55d59e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%108:\l108:                                              \l  %109 = phi float [ %213, %108 ], [ %102, %100 ]\l  %110 = phi i32 [ %214, %108 ], [ %103, %100 ]\l  %111 = add i32 %77, %110\l  %112 = sext i32 %111 to i64\l  %113 = add i64 %112, %5\l  %114 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %113\l  %115 = load float, float addrspace(4)* %114, align 4, !tbaa !17\l  %116 = add i32 %80, %110\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %117\l  %119 = load i8, i8 addrspace(1)* %118, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %120 = uitofp i8 %119 to float\l  %121 = fmul contract float %115, %120\l  %122 = fadd contract float %109, %121\l  %123 = add i32 %110, 1\l  %124 = add i32 %77, %123\l  %125 = sext i32 %124 to i64\l  %126 = add i64 %125, %5\l  %127 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %126\l  %128 = load float, float addrspace(4)* %127, align 4, !tbaa !17\l  %129 = add i32 %80, %123\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %130\l  %132 = load i8, i8 addrspace(1)* %131, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %133 = uitofp i8 %132 to float\l  %134 = fmul contract float %128, %133\l  %135 = fadd contract float %122, %134\l  %136 = add i32 %110, 2\l  %137 = add i32 %77, %136\l  %138 = sext i32 %137 to i64\l  %139 = add i64 %138, %5\l  %140 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %139\l  %141 = load float, float addrspace(4)* %140, align 4, !tbaa !17\l  %142 = add i32 %80, %136\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %143\l  %145 = load i8, i8 addrspace(1)* %144, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %146 = uitofp i8 %145 to float\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %135, %147\l  %149 = add i32 %110, 3\l  %150 = add i32 %77, %149\l  %151 = sext i32 %150 to i64\l  %152 = add i64 %151, %5\l  %153 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %152\l  %154 = load float, float addrspace(4)* %153, align 4, !tbaa !17\l  %155 = add i32 %80, %149\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %156\l  %158 = load i8, i8 addrspace(1)* %157, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %159 = uitofp i8 %158 to float\l  %160 = fmul contract float %154, %159\l  %161 = fadd contract float %148, %160\l  %162 = add i32 %110, 4\l  %163 = add i32 %77, %162\l  %164 = sext i32 %163 to i64\l  %165 = add i64 %164, %5\l  %166 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %165\l  %167 = load float, float addrspace(4)* %166, align 4, !tbaa !17\l  %168 = add i32 %80, %162\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %169\l  %171 = load i8, i8 addrspace(1)* %170, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %172 = uitofp i8 %171 to float\l  %173 = fmul contract float %167, %172\l  %174 = fadd contract float %161, %173\l  %175 = add i32 %110, 5\l  %176 = add i32 %77, %175\l  %177 = sext i32 %176 to i64\l  %178 = add i64 %177, %5\l  %179 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %178\l  %180 = load float, float addrspace(4)* %179, align 4, !tbaa !17\l  %181 = add i32 %80, %175\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %182\l  %184 = load i8, i8 addrspace(1)* %183, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %185 = uitofp i8 %184 to float\l  %186 = fmul contract float %180, %185\l  %187 = fadd contract float %174, %186\l  %188 = add i32 %110, 6\l  %189 = add i32 %77, %188\l  %190 = sext i32 %189 to i64\l  %191 = add i64 %190, %5\l  %192 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %191\l  %193 = load float, float addrspace(4)* %192, align 4, !tbaa !17\l  %194 = add i32 %80, %188\l  %195 = sext i32 %194 to i64\l  %196 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %195\l  %197 = load i8, i8 addrspace(1)* %196, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %198 = uitofp i8 %197 to float\l  %199 = fmul contract float %193, %198\l  %200 = fadd contract float %187, %199\l  %201 = add i32 %110, 7\l  %202 = add i32 %77, %201\l  %203 = sext i32 %202 to i64\l  %204 = add i64 %203, %5\l  %205 = getelementptr inbounds [256 x float], [256 x float] addrspace(4)*\l... @convolutionKernelStore, i64 0, i64 %204\l  %206 = load float, float addrspace(4)* %205, align 4, !tbaa !17\l  %207 = add i32 %80, %201\l  %208 = sext i32 %207 to i64\l  %209 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %208\l  %210 = load i8, i8 addrspace(1)* %209, align 1, !tbaa !21, !amdgpu.noclobber\l... !5\l  %211 = uitofp i8 %210 to float\l  %212 = fmul contract float %206, %211\l  %213 = fadd contract float %200, %212\l  %214 = add i32 %110, 8\l  %215 = icmp eq i32 %201, %64\l  br i1 %215, label %104, label %108, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x55d59e0:s0 -> Node0x55d3ba0;
	Node0x55d59e0:s1 -> Node0x55d59e0;
	Node0x55d1820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%216:\l216:                                              \l  %217 = phi float [ 0.000000e+00, %49 ], [ 0.000000e+00, %40 ], [\l... 0.000000e+00, %9 ], [ %105, %104 ]\l  %218 = fptoui float %217 to i8\l  %219 = mul nsw i32 %32, %1\l  %220 = add nsw i32 %219, %21\l  %221 = sext i32 %220 to i64\l  %222 = getelementptr inbounds i8, i8 addrspace(1)* %8, i64 %221\l  store i8 %218, i8 addrspace(1)* %222, align 1, !tbaa !21\l  ret void\l}"];
}
