digraph "CFG for '_Z16WriteClockValuesPjS_' function" {
	label="CFG for '_Z16WriteClockValuesPjS_' function";

	Node0x4ff8580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = getelementptr i8, i8 addrspace(4)* %4, i64 6\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 2, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %15 = mul i32 %14, %13\l  %16 = add i32 %15, %9\l  %17 = mul i32 %16, %8\l  %18 = add i32 %17, %3\l  %19 = zext i32 %18 to i64\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !6\l  %23 = mul nuw nsw i32 %22, %13\l  %24 = add nuw nsw i32 %23, %21\l  %25 = mul nuw nsw i32 %24, %8\l  %26 = add nuw nsw i32 %25, %20\l  %27 = zext i32 %26 to i64\l  %28 = mul nuw nsw i32 %13, %8\l  %29 = getelementptr i8, i8 addrspace(4)* %4, i64 8\l  %30 = bitcast i8 addrspace(4)* %29 to i16 addrspace(4)*\l  %31 = load i16, i16 addrspace(4)* %30, align 4, !range !4, !invariant.load !5\l  %32 = zext i16 %31 to i32\l  %33 = mul nuw nsw i32 %28, %32\l  %34 = zext i32 %33 to i64\l  %35 = mul nuw nsw i64 %19, %34\l  %36 = add nuw nsw i64 %35, %27\l  %37 = tail call i64 @llvm.amdgcn.s.memtime()\l  %38 = trunc i64 %37 to i32\l  %39 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %36\l  store i32 %38, i32 addrspace(1)* %39, align 4, !tbaa !7\l  %40 = shl nuw nsw i32 %21, 4\l  %41 = or i32 %40, %20\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %36\l  store i32 %41, i32 addrspace(1)* %42, align 4, !tbaa !7\l  ret void\l}"];
}
