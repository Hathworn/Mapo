; ModuleID = '../data/hip_kernels/10615/4/main.cu'
source_filename = "../data/hip_kernels/10615/4/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

@maxLum = protected addrspace(1) externally_initialized global float 0.000000e+00, align 4
@llvm.compiler.used = appending addrspace(1) global [1 x i8*] [i8* addrspacecast (i8 addrspace(1)* bitcast (float addrspace(1)* @maxLum to i8 addrspace(1)*) to i8*)], section "llvm.metadata"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z16tonemap_adaptivePfS_iiiiff(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture writeonly %1, i32 %2, i32 %3, i32 %4, i32 %5, float %6, float %7) local_unnamed_addr #0 {
  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %11 = getelementptr i8, i8 addrspace(4)* %9, i64 6
  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*
  %13 = load i16, i16 addrspace(4)* %12, align 2, !range !4, !invariant.load !5
  %14 = zext i16 %13 to i32
  %15 = mul i32 %10, %14
  %16 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6
  %17 = add i32 %15, %16
  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %19 = getelementptr i8, i8 addrspace(4)* %9, i64 4
  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*
  %21 = load i16, i16 addrspace(4)* %20, align 4, !range !4, !invariant.load !5
  %22 = zext i16 %21 to i32
  %23 = mul i32 %18, %22
  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %25 = add i32 %23, %24
  %26 = icmp slt i32 %17, %3
  %27 = icmp slt i32 %25, %2
  %28 = select i1 %26, i1 %27, i1 false
  br i1 %28, label %29, label %889

29:                                               ; preds = %8
  %30 = mul nsw i32 %17, %2
  %31 = add nsw i32 %30, %25
  %32 = mul nsw i32 %31, 3
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33
  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7, !amdgpu.noclobber !5
  %36 = fadd contract float %35, 1.000000e+00
  %37 = tail call i1 @llvm.amdgcn.class.f32(float %36, i32 144)
  %38 = select i1 %37, float 0x41F0000000000000, float 1.000000e+00
  %39 = fmul float %36, %38
  %40 = tail call float @llvm.log2.f32(float %39)
  %41 = fmul float %40, 0x3FE62E42E0000000
  %42 = load float, float addrspace(1)* @maxLum, align 4, !tbaa !7
  %43 = fadd contract float %42, 1.000000e+00
  %44 = tail call i1 @llvm.amdgcn.class.f32(float %43, i32 144)
  %45 = select i1 %44, float 0x41F0000000000000, float 1.000000e+00
  %46 = fmul float %43, %45
  %47 = tail call float @llvm.log2.f32(float %46)
  %48 = fmul float %47, 0x3FD3441340000000
  %49 = fdiv contract float %35, %42
  %50 = fmul contract float %49, 8.000000e+00
  %51 = fadd contract float %50, 2.000000e+00
  %52 = tail call i1 @llvm.amdgcn.class.f32(float %51, i32 144)
  %53 = select i1 %52, float 0x41F0000000000000, float 1.000000e+00
  %54 = fmul float %51, %53
  %55 = tail call float @llvm.log2.f32(float %54)
  %56 = fmul float %55, 0x3FE62E42E0000000
  %57 = tail call i1 @llvm.amdgcn.class.f32(float %55, i32 519)
  %58 = fneg float %56
  %59 = tail call float @llvm.fma.f32(float %55, float 0x3FE62E42E0000000, float %58)
  %60 = tail call float @llvm.fma.f32(float %55, float 0x3E6EFA39E0000000, float %59)
  %61 = fadd float %56, %60
  %62 = select i1 %57, float %55, float %61
  %63 = select i1 %52, float 0x40362E4300000000, float 0.000000e+00
  %64 = fsub float %62, %63
  %65 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 144)
  %66 = select i1 %65, float 0x41F0000000000000, float 1.000000e+00
  %67 = fmul float %66, %6
  %68 = tail call float @llvm.log2.f32(float %67)
  %69 = fmul float %68, 0x3FE62E42E0000000
  %70 = tail call i1 @llvm.amdgcn.class.f32(float %68, i32 519)
  %71 = fneg float %69
  %72 = tail call float @llvm.fma.f32(float %68, float 0x3FE62E42E0000000, float %71)
  %73 = tail call float @llvm.fma.f32(float %68, float 0x3E6EFA39E0000000, float %72)
  %74 = fadd float %69, %73
  %75 = select i1 %70, float %68, float %74
  %76 = select i1 %65, float 0x40362E4300000000, float 0.000000e+00
  %77 = fsub float %75, %76
  %78 = fpext float %77 to double
  %79 = fdiv contract double %78, 0xBFE62E42FEFA39EF
  %80 = fptrunc double %79 to float
  %81 = tail call float @llvm.fabs.f32(float %64)
  %82 = tail call float @llvm.amdgcn.frexp.mant.f32(float %81)
  %83 = fcmp olt float %82, 0x3FE5555560000000
  %84 = zext i1 %83 to i32
  %85 = tail call float @llvm.amdgcn.ldexp.f32(float %82, i32 %84)
  %86 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %81)
  %87 = sub nsw i32 %86, %84
  %88 = fadd float %85, -1.000000e+00
  %89 = fadd float %85, 1.000000e+00
  %90 = fadd float %89, -1.000000e+00
  %91 = fsub float %85, %90
  %92 = tail call float @llvm.amdgcn.rcp.f32(float %89)
  %93 = fmul float %88, %92
  %94 = fmul float %89, %93
  %95 = fneg float %94
  %96 = tail call float @llvm.fma.f32(float %93, float %89, float %95)
  %97 = tail call float @llvm.fma.f32(float %93, float %91, float %96)
  %98 = fadd float %94, %97
  %99 = fsub float %98, %94
  %100 = fsub float %97, %99
  %101 = fsub float %88, %98
  %102 = fsub float %88, %101
  %103 = fsub float %102, %98
  %104 = fsub float %103, %100
  %105 = fadd float %101, %104
  %106 = fmul float %92, %105
  %107 = fadd float %93, %106
  %108 = fsub float %107, %93
  %109 = fsub float %106, %108
  %110 = fmul float %107, %107
  %111 = fneg float %110
  %112 = tail call float @llvm.fma.f32(float %107, float %107, float %111)
  %113 = fmul float %109, 2.000000e+00
  %114 = tail call float @llvm.fma.f32(float %107, float %113, float %112)
  %115 = fadd float %110, %114
  %116 = fsub float %115, %110
  %117 = fsub float %114, %116
  %118 = tail call float @llvm.fmuladd.f32(float %115, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %119 = tail call float @llvm.fmuladd.f32(float %115, float %118, float 0x3FD999BDE0000000)
  %120 = sitofp i32 %87 to float
  %121 = fmul float %120, 0x3FE62E4300000000
  %122 = fneg float %121
  %123 = tail call float @llvm.fma.f32(float %120, float 0x3FE62E4300000000, float %122)
  %124 = tail call float @llvm.fma.f32(float %120, float 0xBE205C6100000000, float %123)
  %125 = fadd float %121, %124
  %126 = fsub float %125, %121
  %127 = fsub float %124, %126
  %128 = tail call float @llvm.amdgcn.ldexp.f32(float %107, i32 1)
  %129 = fmul float %107, %115
  %130 = fneg float %129
  %131 = tail call float @llvm.fma.f32(float %115, float %107, float %130)
  %132 = tail call float @llvm.fma.f32(float %115, float %109, float %131)
  %133 = tail call float @llvm.fma.f32(float %117, float %107, float %132)
  %134 = fadd float %129, %133
  %135 = fsub float %134, %129
  %136 = fsub float %133, %135
  %137 = fmul float %115, %119
  %138 = fneg float %137
  %139 = tail call float @llvm.fma.f32(float %115, float %119, float %138)
  %140 = tail call float @llvm.fma.f32(float %117, float %119, float %139)
  %141 = fadd float %137, %140
  %142 = fsub float %141, %137
  %143 = fsub float %140, %142
  %144 = fadd float %141, 0x3FE5555540000000
  %145 = fadd float %144, 0xBFE5555540000000
  %146 = fsub float %141, %145
  %147 = fadd float %143, 0x3E2E720200000000
  %148 = fadd float %147, %146
  %149 = fadd float %144, %148
  %150 = fsub float %149, %144
  %151 = fsub float %148, %150
  %152 = fmul float %134, %149
  %153 = fneg float %152
  %154 = tail call float @llvm.fma.f32(float %134, float %149, float %153)
  %155 = tail call float @llvm.fma.f32(float %134, float %151, float %154)
  %156 = tail call float @llvm.fma.f32(float %136, float %149, float %155)
  %157 = tail call float @llvm.amdgcn.ldexp.f32(float %109, i32 1)
  %158 = fadd float %152, %156
  %159 = fsub float %158, %152
  %160 = fsub float %156, %159
  %161 = fadd float %128, %158
  %162 = fsub float %161, %128
  %163 = fsub float %158, %162
  %164 = fadd float %157, %160
  %165 = fadd float %164, %163
  %166 = fadd float %161, %165
  %167 = fsub float %166, %161
  %168 = fsub float %165, %167
  %169 = fadd float %125, %166
  %170 = fsub float %169, %125
  %171 = fsub float %169, %170
  %172 = fsub float %125, %171
  %173 = fsub float %166, %170
  %174 = fadd float %173, %172
  %175 = fadd float %127, %168
  %176 = fsub float %175, %127
  %177 = fsub float %175, %176
  %178 = fsub float %127, %177
  %179 = fsub float %168, %176
  %180 = fadd float %179, %178
  %181 = fadd float %175, %174
  %182 = fadd float %169, %181
  %183 = fsub float %182, %169
  %184 = fsub float %181, %183
  %185 = fadd float %180, %184
  %186 = fadd float %182, %185
  %187 = fsub float %186, %182
  %188 = fsub float %185, %187
  %189 = fmul float %186, %80
  %190 = fneg float %189
  %191 = tail call float @llvm.fma.f32(float %80, float %186, float %190)
  %192 = tail call float @llvm.fma.f32(float %80, float %188, float %191)
  %193 = fadd float %189, %192
  %194 = tail call float @llvm.fabs.f32(float %189) #3
  %195 = fcmp oeq float %194, 0x7FF0000000000000
  %196 = select i1 %195, float %189, float %193
  %197 = fcmp oeq float %196, 0x40562E4300000000
  %198 = select i1 %197, float 0x3EE0000000000000, float 0.000000e+00
  %199 = fsub float %196, %198
  %200 = fmul float %199, 0x3FF7154760000000
  %201 = tail call float @llvm.rint.f32(float %200)
  %202 = fcmp ogt float %199, 0x40562E4300000000
  %203 = fcmp olt float %199, 0xC059D1DA00000000
  %204 = fneg float %200
  %205 = tail call float @llvm.fma.f32(float %199, float 0x3FF7154760000000, float %204)
  %206 = tail call float @llvm.fma.f32(float %199, float 0x3E54AE0BE0000000, float %205)
  %207 = fsub float %200, %201
  %208 = fadd float %206, %207
  %209 = tail call float @llvm.exp2.f32(float %208)
  %210 = fptosi float %201 to i32
  %211 = tail call float @llvm.amdgcn.ldexp.f32(float %209, i32 %210)
  %212 = select i1 %203, float 0.000000e+00, float %211
  %213 = select i1 %202, float 0x7FF0000000000000, float %212
  %214 = tail call float @llvm.fabs.f32(float %80)
  %215 = tail call float @llvm.trunc.f32(float %214)
  %216 = fcmp oeq float %214, %215
  %217 = zext i1 %216 to i32
  %218 = fmul float %215, 5.000000e-01
  %219 = tail call float @llvm.amdgcn.fract.f32(float %218)
  %220 = tail call i1 @llvm.amdgcn.class.f32(float %218, i32 516)
  %221 = select i1 %220, float 0.000000e+00, float %219
  %222 = fcmp oeq float %221, 0.000000e+00
  %223 = and i1 %216, %222
  %224 = zext i1 %223 to i32
  %225 = add nuw nsw i32 %224, %217
  %226 = icmp eq i32 %225, 1
  %227 = icmp ne i32 %225, 0
  %228 = fcmp oeq float %214, 0x7FF0000000000000
  br i1 %228, label %229, label %390

229:                                              ; preds = %29
  %230 = fcmp oeq float %81, 1.000000e+00
  %231 = fadd float %81, -1.000000e+00
  %232 = bitcast float %80 to i32
  %233 = bitcast float %231 to i32
  %234 = xor i32 %233, %232
  %235 = icmp sgt i32 %234, -1
  %236 = select i1 %235, float 0x7FF0000000000000, float 0.000000e+00
  %237 = select i1 %230, float %81, float %236
  %238 = tail call i1 @llvm.amdgcn.class.f32(float %47, i32 519)
  %239 = fneg float %48
  %240 = tail call float @llvm.fma.f32(float %47, float 0x3FD3441340000000, float %239)
  %241 = tail call float @llvm.fma.f32(float %47, float 0x3E509F79E0000000, float %240)
  %242 = fadd float %48, %241
  %243 = select i1 %238, float %47, float %242
  %244 = select i1 %44, float 0x4023441360000000, float 0.000000e+00
  %245 = fsub float %243, %244
  %246 = fmul contract float %245, 1.000000e+02
  %247 = tail call i1 @llvm.amdgcn.class.f32(float %40, i32 519)
  %248 = fneg float %41
  %249 = tail call float @llvm.fma.f32(float %40, float 0x3FE62E42E0000000, float %248)
  %250 = tail call float @llvm.fma.f32(float %40, float 0x3E6EFA39E0000000, float %249)
  %251 = fadd float %41, %250
  %252 = select i1 %247, float %40, float %251
  %253 = select i1 %37, float 0x40362E4300000000, float 0.000000e+00
  %254 = fsub float %252, %253
  %255 = fmul contract float %254, %7
  %256 = fcmp oeq float %81, 0x7FF0000000000000
  %257 = fcmp oeq float %64, 0.000000e+00
  %258 = or i1 %257, %256
  %259 = fcmp olt float %80, 0.000000e+00
  %260 = xor i1 %259, %257
  %261 = select i1 %260, float 0.000000e+00, float 0x7FF0000000000000
  %262 = select i1 %226, float %64, float 0.000000e+00
  %263 = tail call float @llvm.copysign.f32(float %261, float %262)
  %264 = select i1 %258, float %263, float %237
  %265 = fcmp uno float %64, %80
  %266 = select i1 %265, float 0x7FF8000000000000, float %264
  %267 = fcmp oeq float %64, 1.000000e+00
  %268 = fcmp oeq float %80, 0.000000e+00
  %269 = or i1 %268, %267
  %270 = select i1 %269, float 1.000000e+00, float %266
  %271 = fmul contract float %246, %270
  %272 = fdiv contract float %255, %271
  %273 = getelementptr inbounds float, float addrspace(1)* %1, i64 %33
  store float %272, float addrspace(1)* %273, align 4, !tbaa !7
  %274 = add nsw i32 %32, 1
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds float, float addrspace(1)* %0, i64 %275
  %277 = load float, float addrspace(1)* %276, align 4, !tbaa !7
  %278 = fadd contract float %277, 1.000000e+00
  %279 = tail call i1 @llvm.amdgcn.class.f32(float %278, i32 144)
  %280 = select i1 %279, float 0x41F0000000000000, float 1.000000e+00
  %281 = fmul float %278, %280
  %282 = tail call float @llvm.log2.f32(float %281)
  %283 = fmul float %282, 0x3FE62E42E0000000
  %284 = load float, float addrspace(1)* @maxLum, align 4, !tbaa !7
  %285 = fadd contract float %284, 1.000000e+00
  %286 = tail call i1 @llvm.amdgcn.class.f32(float %285, i32 144)
  %287 = select i1 %286, float 0x41F0000000000000, float 1.000000e+00
  %288 = fmul float %285, %287
  %289 = tail call float @llvm.log2.f32(float %288)
  %290 = fmul float %289, 0x3FD3441340000000
  %291 = fdiv contract float %277, %284
  %292 = fmul contract float %291, 8.000000e+00
  %293 = fadd contract float %292, 2.000000e+00
  %294 = tail call i1 @llvm.amdgcn.class.f32(float %293, i32 144)
  %295 = select i1 %294, float 0x41F0000000000000, float 1.000000e+00
  %296 = fmul float %293, %295
  %297 = tail call float @llvm.log2.f32(float %296)
  %298 = fmul float %297, 0x3FE62E42E0000000
  %299 = tail call i1 @llvm.amdgcn.class.f32(float %297, i32 519)
  %300 = fneg float %298
  %301 = tail call float @llvm.fma.f32(float %297, float 0x3FE62E42E0000000, float %300)
  %302 = tail call float @llvm.fma.f32(float %297, float 0x3E6EFA39E0000000, float %301)
  %303 = fadd float %298, %302
  %304 = select i1 %299, float %297, float %303
  %305 = select i1 %294, float 0x40362E4300000000, float 0.000000e+00
  %306 = fsub float %304, %305
  %307 = tail call float @llvm.fabs.f32(float %306)
  %308 = fcmp oeq float %307, 1.000000e+00
  %309 = fadd float %307, -1.000000e+00
  %310 = bitcast float %80 to i32
  %311 = bitcast float %309 to i32
  %312 = xor i32 %311, %310
  %313 = icmp sgt i32 %312, -1
  %314 = select i1 %313, float 0x7FF0000000000000, float 0.000000e+00
  %315 = select i1 %308, float %307, float %314
  %316 = tail call i1 @llvm.amdgcn.class.f32(float %289, i32 519)
  %317 = fneg float %290
  %318 = tail call float @llvm.fma.f32(float %289, float 0x3FD3441340000000, float %317)
  %319 = tail call float @llvm.fma.f32(float %289, float 0x3E509F79E0000000, float %318)
  %320 = fadd float %290, %319
  %321 = select i1 %316, float %289, float %320
  %322 = select i1 %286, float 0x4023441360000000, float 0.000000e+00
  %323 = fsub float %321, %322
  %324 = fmul contract float %323, 1.000000e+02
  %325 = tail call i1 @llvm.amdgcn.class.f32(float %282, i32 519)
  %326 = fneg float %283
  %327 = tail call float @llvm.fma.f32(float %282, float 0x3FE62E42E0000000, float %326)
  %328 = tail call float @llvm.fma.f32(float %282, float 0x3E6EFA39E0000000, float %327)
  %329 = fadd float %283, %328
  %330 = select i1 %325, float %282, float %329
  %331 = select i1 %279, float 0x40362E4300000000, float 0.000000e+00
  %332 = fsub float %330, %331
  %333 = fmul contract float %332, %7
  %334 = fcmp oeq float %307, 0x7FF0000000000000
  %335 = fcmp oeq float %306, 0.000000e+00
  %336 = or i1 %335, %334
  %337 = xor i1 %259, %335
  %338 = select i1 %337, float 0.000000e+00, float 0x7FF0000000000000
  %339 = select i1 %226, float %306, float 0.000000e+00
  %340 = tail call float @llvm.copysign.f32(float %338, float %339)
  %341 = select i1 %336, float %340, float %315
  %342 = fcmp uno float %306, %80
  %343 = select i1 %342, float 0x7FF8000000000000, float %341
  %344 = fcmp oeq float %306, 1.000000e+00
  %345 = or i1 %268, %344
  %346 = select i1 %345, float 1.000000e+00, float %343
  %347 = fmul contract float %324, %346
  %348 = fdiv contract float %333, %347
  %349 = getelementptr inbounds float, float addrspace(1)* %1, i64 %275
  store float %348, float addrspace(1)* %349, align 4, !tbaa !7
  %350 = add nsw i32 %32, 2
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds float, float addrspace(1)* %0, i64 %351
  %353 = load float, float addrspace(1)* %352, align 4, !tbaa !7
  %354 = fadd contract float %353, 1.000000e+00
  %355 = tail call i1 @llvm.amdgcn.class.f32(float %354, i32 144)
  %356 = select i1 %355, float 0x41F0000000000000, float 1.000000e+00
  %357 = fmul float %354, %356
  %358 = tail call float @llvm.log2.f32(float %357)
  %359 = load float, float addrspace(1)* @maxLum, align 4, !tbaa !7
  %360 = fadd contract float %359, 1.000000e+00
  %361 = tail call i1 @llvm.amdgcn.class.f32(float %360, i32 144)
  %362 = select i1 %361, float 0x41F0000000000000, float 1.000000e+00
  %363 = fmul float %360, %362
  %364 = tail call float @llvm.log2.f32(float %363)
  %365 = fdiv contract float %353, %359
  %366 = fmul contract float %365, 8.000000e+00
  %367 = fadd contract float %366, 2.000000e+00
  %368 = tail call i1 @llvm.amdgcn.class.f32(float %367, i32 144)
  %369 = select i1 %368, float 0x41F0000000000000, float 1.000000e+00
  %370 = fmul float %367, %369
  %371 = tail call float @llvm.log2.f32(float %370)
  %372 = fmul float %371, 0x3FE62E42E0000000
  %373 = tail call i1 @llvm.amdgcn.class.f32(float %371, i32 519)
  %374 = fneg float %372
  %375 = tail call float @llvm.fma.f32(float %371, float 0x3FE62E42E0000000, float %374)
  %376 = tail call float @llvm.fma.f32(float %371, float 0x3E6EFA39E0000000, float %375)
  %377 = fadd float %372, %376
  %378 = select i1 %373, float %371, float %377
  %379 = select i1 %368, float 0x40362E4300000000, float 0.000000e+00
  %380 = fsub float %378, %379
  %381 = tail call float @llvm.fabs.f32(float %380)
  %382 = fcmp oeq float %381, 1.000000e+00
  %383 = fadd float %381, -1.000000e+00
  %384 = bitcast float %80 to i32
  %385 = bitcast float %383 to i32
  %386 = xor i32 %385, %384
  %387 = icmp sgt i32 %386, -1
  %388 = select i1 %387, float 0x7FF0000000000000, float 0.000000e+00
  %389 = select i1 %382, float %381, float %388
  br label %842

390:                                              ; preds = %29
  %391 = fcmp uge float %64, 0.000000e+00
  %392 = select i1 %391, i1 true, i1 %227
  %393 = tail call float @llvm.fabs.f32(float %213) #3
  %394 = fcmp oeq float %393, 0x7FF0000000000000
  %395 = tail call float @llvm.fabs.f32(float %196) #3
  %396 = fcmp oeq float %395, 0x7FF0000000000000
  %397 = fsub float %193, %189
  %398 = fsub float %192, %397
  %399 = select i1 %396, float 0.000000e+00, float %398
  %400 = fadd float %198, %399
  %401 = tail call float @llvm.fma.f32(float %213, float %400, float %213)
  %402 = select i1 %394, float %213, float %401
  %403 = fcmp olt float %64, 0.000000e+00
  %404 = and i1 %226, %403
  %405 = select i1 %404, float -0.000000e+00, float 0.000000e+00
  %406 = tail call float @llvm.copysign.f32(float %402, float %405)
  %407 = select i1 %392, float %406, float 0x7FF8000000000000
  %408 = tail call i1 @llvm.amdgcn.class.f32(float %47, i32 519)
  %409 = fneg float %48
  %410 = tail call float @llvm.fma.f32(float %47, float 0x3FD3441340000000, float %409)
  %411 = tail call float @llvm.fma.f32(float %47, float 0x3E509F79E0000000, float %410)
  %412 = fadd float %48, %411
  %413 = select i1 %408, float %47, float %412
  %414 = select i1 %44, float 0x4023441360000000, float 0.000000e+00
  %415 = fsub float %413, %414
  %416 = fmul contract float %415, 1.000000e+02
  %417 = tail call i1 @llvm.amdgcn.class.f32(float %40, i32 519)
  %418 = fneg float %41
  %419 = tail call float @llvm.fma.f32(float %40, float 0x3FE62E42E0000000, float %418)
  %420 = tail call float @llvm.fma.f32(float %40, float 0x3E6EFA39E0000000, float %419)
  %421 = fadd float %41, %420
  %422 = select i1 %417, float %40, float %421
  %423 = select i1 %37, float 0x40362E4300000000, float 0.000000e+00
  %424 = fsub float %422, %423
  %425 = fmul contract float %424, %7
  %426 = fcmp oeq float %81, 0x7FF0000000000000
  %427 = fcmp oeq float %64, 0.000000e+00
  %428 = or i1 %427, %426
  %429 = fcmp olt float %80, 0.000000e+00
  %430 = xor i1 %429, %427
  %431 = select i1 %430, float 0.000000e+00, float 0x7FF0000000000000
  %432 = select i1 %226, float %64, float 0.000000e+00
  %433 = tail call float @llvm.copysign.f32(float %431, float %432)
  %434 = select i1 %428, float %433, float %407
  %435 = fcmp uno float %64, %80
  %436 = select i1 %435, float 0x7FF8000000000000, float %434
  %437 = fcmp oeq float %64, 1.000000e+00
  %438 = fcmp oeq float %80, 0.000000e+00
  %439 = or i1 %438, %437
  %440 = select i1 %439, float 1.000000e+00, float %436
  %441 = fmul contract float %416, %440
  %442 = fdiv contract float %425, %441
  %443 = getelementptr inbounds float, float addrspace(1)* %1, i64 %33
  store float %442, float addrspace(1)* %443, align 4, !tbaa !7
  %444 = add nsw i32 %32, 1
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds float, float addrspace(1)* %0, i64 %445
  %447 = load float, float addrspace(1)* %446, align 4, !tbaa !7
  %448 = fadd contract float %447, 1.000000e+00
  %449 = tail call i1 @llvm.amdgcn.class.f32(float %448, i32 144)
  %450 = select i1 %449, float 0x41F0000000000000, float 1.000000e+00
  %451 = fmul float %448, %450
  %452 = tail call float @llvm.log2.f32(float %451)
  %453 = fmul float %452, 0x3FE62E42E0000000
  %454 = load float, float addrspace(1)* @maxLum, align 4, !tbaa !7
  %455 = fadd contract float %454, 1.000000e+00
  %456 = tail call i1 @llvm.amdgcn.class.f32(float %455, i32 144)
  %457 = select i1 %456, float 0x41F0000000000000, float 1.000000e+00
  %458 = fmul float %455, %457
  %459 = tail call float @llvm.log2.f32(float %458)
  %460 = fmul float %459, 0x3FD3441340000000
  %461 = fdiv contract float %447, %454
  %462 = fmul contract float %461, 8.000000e+00
  %463 = fadd contract float %462, 2.000000e+00
  %464 = tail call i1 @llvm.amdgcn.class.f32(float %463, i32 144)
  %465 = select i1 %464, float 0x41F0000000000000, float 1.000000e+00
  %466 = fmul float %463, %465
  %467 = tail call float @llvm.log2.f32(float %466)
  %468 = fmul float %467, 0x3FE62E42E0000000
  %469 = tail call i1 @llvm.amdgcn.class.f32(float %467, i32 519)
  %470 = fneg float %468
  %471 = tail call float @llvm.fma.f32(float %467, float 0x3FE62E42E0000000, float %470)
  %472 = tail call float @llvm.fma.f32(float %467, float 0x3E6EFA39E0000000, float %471)
  %473 = fadd float %468, %472
  %474 = select i1 %469, float %467, float %473
  %475 = select i1 %464, float 0x40362E4300000000, float 0.000000e+00
  %476 = fsub float %474, %475
  %477 = tail call float @llvm.fabs.f32(float %476)
  %478 = tail call float @llvm.amdgcn.frexp.mant.f32(float %477)
  %479 = fcmp olt float %478, 0x3FE5555560000000
  %480 = zext i1 %479 to i32
  %481 = tail call float @llvm.amdgcn.ldexp.f32(float %478, i32 %480)
  %482 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %477)
  %483 = sub nsw i32 %482, %480
  %484 = fadd float %481, -1.000000e+00
  %485 = fadd float %481, 1.000000e+00
  %486 = fadd float %485, -1.000000e+00
  %487 = fsub float %481, %486
  %488 = tail call float @llvm.amdgcn.rcp.f32(float %485)
  %489 = fmul float %484, %488
  %490 = fmul float %485, %489
  %491 = fneg float %490
  %492 = tail call float @llvm.fma.f32(float %489, float %485, float %491)
  %493 = tail call float @llvm.fma.f32(float %489, float %487, float %492)
  %494 = fadd float %490, %493
  %495 = fsub float %494, %490
  %496 = fsub float %493, %495
  %497 = fsub float %484, %494
  %498 = fsub float %484, %497
  %499 = fsub float %498, %494
  %500 = fsub float %499, %496
  %501 = fadd float %497, %500
  %502 = fmul float %488, %501
  %503 = fadd float %489, %502
  %504 = fsub float %503, %489
  %505 = fsub float %502, %504
  %506 = fmul float %503, %503
  %507 = fneg float %506
  %508 = tail call float @llvm.fma.f32(float %503, float %503, float %507)
  %509 = fmul float %505, 2.000000e+00
  %510 = tail call float @llvm.fma.f32(float %503, float %509, float %508)
  %511 = fadd float %506, %510
  %512 = fsub float %511, %506
  %513 = fsub float %510, %512
  %514 = tail call float @llvm.fmuladd.f32(float %511, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %515 = tail call float @llvm.fmuladd.f32(float %511, float %514, float 0x3FD999BDE0000000)
  %516 = sitofp i32 %483 to float
  %517 = fmul float %516, 0x3FE62E4300000000
  %518 = fneg float %517
  %519 = tail call float @llvm.fma.f32(float %516, float 0x3FE62E4300000000, float %518)
  %520 = tail call float @llvm.fma.f32(float %516, float 0xBE205C6100000000, float %519)
  %521 = fadd float %517, %520
  %522 = fsub float %521, %517
  %523 = fsub float %520, %522
  %524 = tail call float @llvm.amdgcn.ldexp.f32(float %503, i32 1)
  %525 = fmul float %503, %511
  %526 = fneg float %525
  %527 = tail call float @llvm.fma.f32(float %511, float %503, float %526)
  %528 = tail call float @llvm.fma.f32(float %511, float %505, float %527)
  %529 = tail call float @llvm.fma.f32(float %513, float %503, float %528)
  %530 = fadd float %525, %529
  %531 = fsub float %530, %525
  %532 = fsub float %529, %531
  %533 = fmul float %511, %515
  %534 = fneg float %533
  %535 = tail call float @llvm.fma.f32(float %511, float %515, float %534)
  %536 = tail call float @llvm.fma.f32(float %513, float %515, float %535)
  %537 = fadd float %533, %536
  %538 = fsub float %537, %533
  %539 = fsub float %536, %538
  %540 = fadd float %537, 0x3FE5555540000000
  %541 = fadd float %540, 0xBFE5555540000000
  %542 = fsub float %537, %541
  %543 = fadd float %539, 0x3E2E720200000000
  %544 = fadd float %543, %542
  %545 = fadd float %540, %544
  %546 = fsub float %545, %540
  %547 = fsub float %544, %546
  %548 = fmul float %530, %545
  %549 = fneg float %548
  %550 = tail call float @llvm.fma.f32(float %530, float %545, float %549)
  %551 = tail call float @llvm.fma.f32(float %530, float %547, float %550)
  %552 = tail call float @llvm.fma.f32(float %532, float %545, float %551)
  %553 = tail call float @llvm.amdgcn.ldexp.f32(float %505, i32 1)
  %554 = fadd float %548, %552
  %555 = fsub float %554, %548
  %556 = fsub float %552, %555
  %557 = fadd float %524, %554
  %558 = fsub float %557, %524
  %559 = fsub float %554, %558
  %560 = fadd float %553, %556
  %561 = fadd float %560, %559
  %562 = fadd float %557, %561
  %563 = fsub float %562, %557
  %564 = fsub float %561, %563
  %565 = fadd float %521, %562
  %566 = fsub float %565, %521
  %567 = fsub float %565, %566
  %568 = fsub float %521, %567
  %569 = fsub float %562, %566
  %570 = fadd float %569, %568
  %571 = fadd float %523, %564
  %572 = fsub float %571, %523
  %573 = fsub float %571, %572
  %574 = fsub float %523, %573
  %575 = fsub float %564, %572
  %576 = fadd float %575, %574
  %577 = fadd float %571, %570
  %578 = fadd float %565, %577
  %579 = fsub float %578, %565
  %580 = fsub float %577, %579
  %581 = fadd float %576, %580
  %582 = fadd float %578, %581
  %583 = fsub float %582, %578
  %584 = fsub float %581, %583
  %585 = fmul float %582, %80
  %586 = fneg float %585
  %587 = tail call float @llvm.fma.f32(float %80, float %582, float %586)
  %588 = tail call float @llvm.fma.f32(float %80, float %584, float %587)
  %589 = fadd float %585, %588
  %590 = fsub float %589, %585
  %591 = fsub float %588, %590
  %592 = tail call float @llvm.fabs.f32(float %585) #3
  %593 = fcmp oeq float %592, 0x7FF0000000000000
  %594 = select i1 %593, float %585, float %589
  %595 = tail call float @llvm.fabs.f32(float %594) #3
  %596 = fcmp oeq float %595, 0x7FF0000000000000
  %597 = select i1 %596, float 0.000000e+00, float %591
  %598 = fcmp oeq float %594, 0x40562E4300000000
  %599 = select i1 %598, float 0x3EE0000000000000, float 0.000000e+00
  %600 = fsub float %594, %599
  %601 = fadd float %599, %597
  %602 = fmul float %600, 0x3FF7154760000000
  %603 = tail call float @llvm.rint.f32(float %602)
  %604 = fcmp ogt float %600, 0x40562E4300000000
  %605 = fcmp olt float %600, 0xC059D1DA00000000
  %606 = fneg float %602
  %607 = tail call float @llvm.fma.f32(float %600, float 0x3FF7154760000000, float %606)
  %608 = tail call float @llvm.fma.f32(float %600, float 0x3E54AE0BE0000000, float %607)
  %609 = fsub float %602, %603
  %610 = fadd float %608, %609
  %611 = tail call float @llvm.exp2.f32(float %610)
  %612 = fptosi float %603 to i32
  %613 = tail call float @llvm.amdgcn.ldexp.f32(float %611, i32 %612)
  %614 = select i1 %605, float 0.000000e+00, float %613
  %615 = select i1 %604, float 0x7FF0000000000000, float %614
  %616 = tail call float @llvm.fma.f32(float %615, float %601, float %615)
  %617 = tail call float @llvm.fabs.f32(float %615) #3
  %618 = fcmp oeq float %617, 0x7FF0000000000000
  %619 = select i1 %618, float %615, float %616
  %620 = fcmp olt float %476, 0.000000e+00
  %621 = and i1 %226, %620
  %622 = select i1 %621, float -0.000000e+00, float 0.000000e+00
  %623 = tail call float @llvm.copysign.f32(float %619, float %622)
  %624 = fcmp uge float %476, 0.000000e+00
  %625 = select i1 %624, i1 true, i1 %227
  %626 = select i1 %625, float %623, float 0x7FF8000000000000
  %627 = tail call i1 @llvm.amdgcn.class.f32(float %459, i32 519)
  %628 = fneg float %460
  %629 = tail call float @llvm.fma.f32(float %459, float 0x3FD3441340000000, float %628)
  %630 = tail call float @llvm.fma.f32(float %459, float 0x3E509F79E0000000, float %629)
  %631 = fadd float %460, %630
  %632 = select i1 %627, float %459, float %631
  %633 = select i1 %456, float 0x4023441360000000, float 0.000000e+00
  %634 = fsub float %632, %633
  %635 = fmul contract float %634, 1.000000e+02
  %636 = tail call i1 @llvm.amdgcn.class.f32(float %452, i32 519)
  %637 = fneg float %453
  %638 = tail call float @llvm.fma.f32(float %452, float 0x3FE62E42E0000000, float %637)
  %639 = tail call float @llvm.fma.f32(float %452, float 0x3E6EFA39E0000000, float %638)
  %640 = fadd float %453, %639
  %641 = select i1 %636, float %452, float %640
  %642 = select i1 %449, float 0x40362E4300000000, float 0.000000e+00
  %643 = fsub float %641, %642
  %644 = fmul contract float %643, %7
  %645 = fcmp oeq float %477, 0x7FF0000000000000
  %646 = fcmp oeq float %476, 0.000000e+00
  %647 = or i1 %646, %645
  %648 = xor i1 %429, %646
  %649 = select i1 %648, float 0.000000e+00, float 0x7FF0000000000000
  %650 = select i1 %226, float %476, float 0.000000e+00
  %651 = tail call float @llvm.copysign.f32(float %649, float %650)
  %652 = select i1 %647, float %651, float %626
  %653 = fcmp uno float %476, %80
  %654 = select i1 %653, float 0x7FF8000000000000, float %652
  %655 = fcmp oeq float %476, 1.000000e+00
  %656 = or i1 %438, %655
  %657 = select i1 %656, float 1.000000e+00, float %654
  %658 = fmul contract float %635, %657
  %659 = fdiv contract float %644, %658
  %660 = getelementptr inbounds float, float addrspace(1)* %1, i64 %445
  store float %659, float addrspace(1)* %660, align 4, !tbaa !7
  %661 = add nsw i32 %32, 2
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds float, float addrspace(1)* %0, i64 %662
  %664 = load float, float addrspace(1)* %663, align 4, !tbaa !7
  %665 = fadd contract float %664, 1.000000e+00
  %666 = tail call i1 @llvm.amdgcn.class.f32(float %665, i32 144)
  %667 = select i1 %666, float 0x41F0000000000000, float 1.000000e+00
  %668 = fmul float %665, %667
  %669 = tail call float @llvm.log2.f32(float %668)
  %670 = load float, float addrspace(1)* @maxLum, align 4, !tbaa !7
  %671 = fadd contract float %670, 1.000000e+00
  %672 = tail call i1 @llvm.amdgcn.class.f32(float %671, i32 144)
  %673 = select i1 %672, float 0x41F0000000000000, float 1.000000e+00
  %674 = fmul float %671, %673
  %675 = tail call float @llvm.log2.f32(float %674)
  %676 = fdiv contract float %664, %670
  %677 = fmul contract float %676, 8.000000e+00
  %678 = fadd contract float %677, 2.000000e+00
  %679 = tail call i1 @llvm.amdgcn.class.f32(float %678, i32 144)
  %680 = select i1 %679, float 0x41F0000000000000, float 1.000000e+00
  %681 = fmul float %678, %680
  %682 = tail call float @llvm.log2.f32(float %681)
  %683 = fmul float %682, 0x3FE62E42E0000000
  %684 = tail call i1 @llvm.amdgcn.class.f32(float %682, i32 519)
  %685 = fneg float %683
  %686 = tail call float @llvm.fma.f32(float %682, float 0x3FE62E42E0000000, float %685)
  %687 = tail call float @llvm.fma.f32(float %682, float 0x3E6EFA39E0000000, float %686)
  %688 = fadd float %683, %687
  %689 = select i1 %684, float %682, float %688
  %690 = select i1 %679, float 0x40362E4300000000, float 0.000000e+00
  %691 = fsub float %689, %690
  %692 = tail call float @llvm.fabs.f32(float %691)
  %693 = tail call float @llvm.amdgcn.frexp.mant.f32(float %692)
  %694 = fcmp olt float %693, 0x3FE5555560000000
  %695 = zext i1 %694 to i32
  %696 = tail call float @llvm.amdgcn.ldexp.f32(float %693, i32 %695)
  %697 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %692)
  %698 = sub nsw i32 %697, %695
  %699 = fadd float %696, -1.000000e+00
  %700 = fadd float %696, 1.000000e+00
  %701 = fadd float %700, -1.000000e+00
  %702 = fsub float %696, %701
  %703 = tail call float @llvm.amdgcn.rcp.f32(float %700)
  %704 = fmul float %699, %703
  %705 = fmul float %700, %704
  %706 = fneg float %705
  %707 = tail call float @llvm.fma.f32(float %704, float %700, float %706)
  %708 = tail call float @llvm.fma.f32(float %704, float %702, float %707)
  %709 = fadd float %705, %708
  %710 = fsub float %709, %705
  %711 = fsub float %708, %710
  %712 = fsub float %699, %709
  %713 = fsub float %699, %712
  %714 = fsub float %713, %709
  %715 = fsub float %714, %711
  %716 = fadd float %712, %715
  %717 = fmul float %703, %716
  %718 = fadd float %704, %717
  %719 = fsub float %718, %704
  %720 = fsub float %717, %719
  %721 = fmul float %718, %718
  %722 = fneg float %721
  %723 = tail call float @llvm.fma.f32(float %718, float %718, float %722)
  %724 = fmul float %720, 2.000000e+00
  %725 = tail call float @llvm.fma.f32(float %718, float %724, float %723)
  %726 = fadd float %721, %725
  %727 = fsub float %726, %721
  %728 = fsub float %725, %727
  %729 = tail call float @llvm.fmuladd.f32(float %726, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %730 = tail call float @llvm.fmuladd.f32(float %726, float %729, float 0x3FD999BDE0000000)
  %731 = sitofp i32 %698 to float
  %732 = fmul float %731, 0x3FE62E4300000000
  %733 = fneg float %732
  %734 = tail call float @llvm.fma.f32(float %731, float 0x3FE62E4300000000, float %733)
  %735 = tail call float @llvm.fma.f32(float %731, float 0xBE205C6100000000, float %734)
  %736 = fadd float %732, %735
  %737 = fsub float %736, %732
  %738 = fsub float %735, %737
  %739 = tail call float @llvm.amdgcn.ldexp.f32(float %718, i32 1)
  %740 = fmul float %718, %726
  %741 = fneg float %740
  %742 = tail call float @llvm.fma.f32(float %726, float %718, float %741)
  %743 = tail call float @llvm.fma.f32(float %726, float %720, float %742)
  %744 = tail call float @llvm.fma.f32(float %728, float %718, float %743)
  %745 = fadd float %740, %744
  %746 = fsub float %745, %740
  %747 = fsub float %744, %746
  %748 = fmul float %726, %730
  %749 = fneg float %748
  %750 = tail call float @llvm.fma.f32(float %726, float %730, float %749)
  %751 = tail call float @llvm.fma.f32(float %728, float %730, float %750)
  %752 = fadd float %748, %751
  %753 = fsub float %752, %748
  %754 = fsub float %751, %753
  %755 = fadd float %752, 0x3FE5555540000000
  %756 = fadd float %755, 0xBFE5555540000000
  %757 = fsub float %752, %756
  %758 = fadd float %754, 0x3E2E720200000000
  %759 = fadd float %758, %757
  %760 = fadd float %755, %759
  %761 = fsub float %760, %755
  %762 = fsub float %759, %761
  %763 = fmul float %745, %760
  %764 = fneg float %763
  %765 = tail call float @llvm.fma.f32(float %745, float %760, float %764)
  %766 = tail call float @llvm.fma.f32(float %745, float %762, float %765)
  %767 = tail call float @llvm.fma.f32(float %747, float %760, float %766)
  %768 = tail call float @llvm.amdgcn.ldexp.f32(float %720, i32 1)
  %769 = fadd float %763, %767
  %770 = fsub float %769, %763
  %771 = fsub float %767, %770
  %772 = fadd float %739, %769
  %773 = fsub float %772, %739
  %774 = fsub float %769, %773
  %775 = fadd float %768, %771
  %776 = fadd float %775, %774
  %777 = fadd float %772, %776
  %778 = fsub float %777, %772
  %779 = fsub float %776, %778
  %780 = fadd float %736, %777
  %781 = fsub float %780, %736
  %782 = fsub float %780, %781
  %783 = fsub float %736, %782
  %784 = fsub float %777, %781
  %785 = fadd float %784, %783
  %786 = fadd float %738, %779
  %787 = fsub float %786, %738
  %788 = fsub float %786, %787
  %789 = fsub float %738, %788
  %790 = fsub float %779, %787
  %791 = fadd float %790, %789
  %792 = fadd float %786, %785
  %793 = fadd float %780, %792
  %794 = fsub float %793, %780
  %795 = fsub float %792, %794
  %796 = fadd float %791, %795
  %797 = fadd float %793, %796
  %798 = fsub float %797, %793
  %799 = fsub float %796, %798
  %800 = fmul float %797, %80
  %801 = fneg float %800
  %802 = tail call float @llvm.fma.f32(float %80, float %797, float %801)
  %803 = tail call float @llvm.fma.f32(float %80, float %799, float %802)
  %804 = fadd float %800, %803
  %805 = fsub float %804, %800
  %806 = fsub float %803, %805
  %807 = tail call float @llvm.fabs.f32(float %800) #3
  %808 = fcmp oeq float %807, 0x7FF0000000000000
  %809 = select i1 %808, float %800, float %804
  %810 = tail call float @llvm.fabs.f32(float %809) #3
  %811 = fcmp oeq float %810, 0x7FF0000000000000
  %812 = select i1 %811, float 0.000000e+00, float %806
  %813 = fcmp oeq float %809, 0x40562E4300000000
  %814 = select i1 %813, float 0x3EE0000000000000, float 0.000000e+00
  %815 = fsub float %809, %814
  %816 = fadd float %814, %812
  %817 = fmul float %815, 0x3FF7154760000000
  %818 = tail call float @llvm.rint.f32(float %817)
  %819 = fcmp ogt float %815, 0x40562E4300000000
  %820 = fcmp olt float %815, 0xC059D1DA00000000
  %821 = fneg float %817
  %822 = tail call float @llvm.fma.f32(float %815, float 0x3FF7154760000000, float %821)
  %823 = tail call float @llvm.fma.f32(float %815, float 0x3E54AE0BE0000000, float %822)
  %824 = fsub float %817, %818
  %825 = fadd float %823, %824
  %826 = tail call float @llvm.exp2.f32(float %825)
  %827 = fptosi float %818 to i32
  %828 = tail call float @llvm.amdgcn.ldexp.f32(float %826, i32 %827)
  %829 = select i1 %820, float 0.000000e+00, float %828
  %830 = select i1 %819, float 0x7FF0000000000000, float %829
  %831 = tail call float @llvm.fma.f32(float %830, float %816, float %830)
  %832 = tail call float @llvm.fabs.f32(float %830) #3
  %833 = fcmp oeq float %832, 0x7FF0000000000000
  %834 = select i1 %833, float %830, float %831
  %835 = fcmp olt float %691, 0.000000e+00
  %836 = and i1 %226, %835
  %837 = select i1 %836, float -0.000000e+00, float 0.000000e+00
  %838 = tail call float @llvm.copysign.f32(float %834, float %837)
  %839 = fcmp uge float %691, 0.000000e+00
  %840 = select i1 %839, i1 true, i1 %227
  %841 = select i1 %840, float %838, float 0x7FF8000000000000
  br label %842

842:                                              ; preds = %390, %229
  %843 = phi i1 [ %438, %390 ], [ %268, %229 ]
  %844 = phi i1 [ %429, %390 ], [ %259, %229 ]
  %845 = phi float [ %692, %390 ], [ %381, %229 ]
  %846 = phi float [ %691, %390 ], [ %380, %229 ]
  %847 = phi float [ %675, %390 ], [ %364, %229 ]
  %848 = phi i1 [ %672, %390 ], [ %361, %229 ]
  %849 = phi float [ %669, %390 ], [ %358, %229 ]
  %850 = phi i1 [ %666, %390 ], [ %355, %229 ]
  %851 = phi i64 [ %662, %390 ], [ %351, %229 ]
  %852 = phi float [ %841, %390 ], [ %389, %229 ]
  %853 = fmul float %849, 0x3FE62E42E0000000
  %854 = fmul float %847, 0x3FD3441340000000
  %855 = tail call i1 @llvm.amdgcn.class.f32(float %847, i32 519)
  %856 = fneg float %854
  %857 = tail call float @llvm.fma.f32(float %847, float 0x3FD3441340000000, float %856)
  %858 = tail call float @llvm.fma.f32(float %847, float 0x3E509F79E0000000, float %857)
  %859 = fadd float %854, %858
  %860 = select i1 %855, float %847, float %859
  %861 = select i1 %848, float 0x4023441360000000, float 0.000000e+00
  %862 = fsub float %860, %861
  %863 = fmul contract float %862, 1.000000e+02
  %864 = tail call i1 @llvm.amdgcn.class.f32(float %849, i32 519)
  %865 = fneg float %853
  %866 = tail call float @llvm.fma.f32(float %849, float 0x3FE62E42E0000000, float %865)
  %867 = tail call float @llvm.fma.f32(float %849, float 0x3E6EFA39E0000000, float %866)
  %868 = fadd float %853, %867
  %869 = select i1 %864, float %849, float %868
  %870 = select i1 %850, float 0x40362E4300000000, float 0.000000e+00
  %871 = fsub float %869, %870
  %872 = fmul contract float %871, %7
  %873 = fcmp oeq float %845, 0x7FF0000000000000
  %874 = fcmp oeq float %846, 0.000000e+00
  %875 = or i1 %874, %873
  %876 = xor i1 %844, %874
  %877 = select i1 %876, float 0.000000e+00, float 0x7FF0000000000000
  %878 = select i1 %226, float %846, float 0.000000e+00
  %879 = tail call float @llvm.copysign.f32(float %877, float %878)
  %880 = select i1 %875, float %879, float %852
  %881 = fcmp uno float %846, %80
  %882 = select i1 %881, float 0x7FF8000000000000, float %880
  %883 = fcmp oeq float %846, 1.000000e+00
  %884 = or i1 %843, %883
  %885 = select i1 %884, float 1.000000e+00, float %882
  %886 = fmul contract float %863, %885
  %887 = fdiv contract float %872, %886
  %888 = getelementptr inbounds float, float addrspace(1)* %1, i64 %851
  store float %887, float addrspace(1)* %888, align 4, !tbaa !7
  br label %889

889:                                              ; preds = %842, %8
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.log2.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.exp2.f32(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.trunc.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.fract.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.copysign.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.ldexp.f32(float, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.frexp.mant.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.rcp.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !8, i64 0}
!8 = !{!"float", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
