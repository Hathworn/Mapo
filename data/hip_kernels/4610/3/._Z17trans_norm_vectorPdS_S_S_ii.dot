digraph "CFG for '_Z17trans_norm_vectorPdS_S_S_ii' function" {
	label="CFG for '_Z17trans_norm_vectorPdS_S_S_ii' function";

	Node0x59b9820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = mul i32 %12, %11\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds double, double addrspace(1)* %3, i64 %16\l  store double 0.000000e+00, double addrspace(1)* %17, align 8, !tbaa !7\l  %18 = icmp sgt i32 %5, 0\l  br i1 %18, label %19, label %131\l|{<s0>T|<s1>F}}"];
	Node0x59b9820:s0 -> Node0x59bc4a0;
	Node0x59b9820:s1 -> Node0x59bc530;
	Node0x59bc4a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%19:\l19:                                               \l  %20 = mul nsw i32 %15, %5\l  %21 = and i32 %5, 7\l  %22 = icmp ult i32 %5, 8\l  br i1 %22, label %111, label %23\l|{<s0>T|<s1>F}}"];
	Node0x59bc4a0:s0 -> Node0x59bc880;
	Node0x59bc4a0:s1 -> Node0x59bc8d0;
	Node0x59bc8d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %5, -8\l  br label %25\l}"];
	Node0x59bc8d0 -> Node0x59bcad0;
	Node0x59bcad0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%25:\l25:                                               \l  %26 = phi double [ 0.000000e+00, %23 ], [ %107, %25 ]\l  %27 = phi i32 [ 0, %23 ], [ %108, %25 ]\l  %28 = phi i32 [ 0, %23 ], [ %109, %25 ]\l  %29 = add nsw i32 %27, %20\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds double, double addrspace(1)* %0, i64 %30\l  %32 = load double, double addrspace(1)* %31, align 8, !tbaa !7\l  %33 = zext i32 %27 to i64\l  %34 = getelementptr inbounds double, double addrspace(1)* %1, i64 %33\l  %35 = load double, double addrspace(1)* %34, align 8, !tbaa !7\l  %36 = fmul contract double %32, %35\l  %37 = fadd contract double %26, %36\l  store double %37, double addrspace(1)* %17, align 8, !tbaa !7\l  %38 = or i32 %27, 1\l  %39 = add nsw i32 %38, %20\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds double, double addrspace(1)* %0, i64 %40\l  %42 = load double, double addrspace(1)* %41, align 8, !tbaa !7\l  %43 = zext i32 %38 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %1, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !7\l  %46 = fmul contract double %42, %45\l  %47 = fadd contract double %37, %46\l  store double %47, double addrspace(1)* %17, align 8, !tbaa !7\l  %48 = or i32 %27, 2\l  %49 = add nsw i32 %48, %20\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %0, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !7\l  %53 = zext i32 %48 to i64\l  %54 = getelementptr inbounds double, double addrspace(1)* %1, i64 %53\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !7\l  %56 = fmul contract double %52, %55\l  %57 = fadd contract double %47, %56\l  store double %57, double addrspace(1)* %17, align 8, !tbaa !7\l  %58 = or i32 %27, 3\l  %59 = add nsw i32 %58, %20\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %0, i64 %60\l  %62 = load double, double addrspace(1)* %61, align 8, !tbaa !7\l  %63 = zext i32 %58 to i64\l  %64 = getelementptr inbounds double, double addrspace(1)* %1, i64 %63\l  %65 = load double, double addrspace(1)* %64, align 8, !tbaa !7\l  %66 = fmul contract double %62, %65\l  %67 = fadd contract double %57, %66\l  store double %67, double addrspace(1)* %17, align 8, !tbaa !7\l  %68 = or i32 %27, 4\l  %69 = add nsw i32 %68, %20\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds double, double addrspace(1)* %0, i64 %70\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7\l  %73 = zext i32 %68 to i64\l  %74 = getelementptr inbounds double, double addrspace(1)* %1, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !7\l  %76 = fmul contract double %72, %75\l  %77 = fadd contract double %67, %76\l  store double %77, double addrspace(1)* %17, align 8, !tbaa !7\l  %78 = or i32 %27, 5\l  %79 = add nsw i32 %78, %20\l  %80 = sext i32 %79 to i64\l  %81 = getelementptr inbounds double, double addrspace(1)* %0, i64 %80\l  %82 = load double, double addrspace(1)* %81, align 8, !tbaa !7\l  %83 = zext i32 %78 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %1, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7\l  %86 = fmul contract double %82, %85\l  %87 = fadd contract double %77, %86\l  store double %87, double addrspace(1)* %17, align 8, !tbaa !7\l  %88 = or i32 %27, 6\l  %89 = add nsw i32 %88, %20\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %0, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !7\l  %93 = zext i32 %88 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %1, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !7\l  %96 = fmul contract double %92, %95\l  %97 = fadd contract double %87, %96\l  store double %97, double addrspace(1)* %17, align 8, !tbaa !7\l  %98 = or i32 %27, 7\l  %99 = add nsw i32 %98, %20\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds double, double addrspace(1)* %0, i64 %100\l  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !7\l  %103 = zext i32 %98 to i64\l  %104 = getelementptr inbounds double, double addrspace(1)* %1, i64 %103\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !7\l  %106 = fmul contract double %102, %105\l  %107 = fadd contract double %97, %106\l  store double %107, double addrspace(1)* %17, align 8, !tbaa !7\l  %108 = add nuw nsw i32 %27, 8\l  %109 = add i32 %28, 8\l  %110 = icmp eq i32 %109, %24\l  br i1 %110, label %111, label %25, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x59bcad0:s0 -> Node0x59bc880;
	Node0x59bcad0:s1 -> Node0x59bcad0;
	Node0x59bc880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%111:\l111:                                              \l  %112 = phi double [ 0.000000e+00, %19 ], [ %107, %25 ]\l  %113 = phi i32 [ 0, %19 ], [ %108, %25 ]\l  %114 = icmp eq i32 %21, 0\l  br i1 %114, label %131, label %115\l|{<s0>T|<s1>F}}"];
	Node0x59bc880:s0 -> Node0x59bc530;
	Node0x59bc880:s1 -> Node0x59c0be0;
	Node0x59c0be0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%115:\l115:                                              \l  %116 = phi double [ %127, %115 ], [ %112, %111 ]\l  %117 = phi i32 [ %128, %115 ], [ %113, %111 ]\l  %118 = phi i32 [ %129, %115 ], [ 0, %111 ]\l  %119 = add nsw i32 %117, %20\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds double, double addrspace(1)* %0, i64 %120\l  %122 = load double, double addrspace(1)* %121, align 8, !tbaa !7\l  %123 = zext i32 %117 to i64\l  %124 = getelementptr inbounds double, double addrspace(1)* %1, i64 %123\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !7\l  %126 = fmul contract double %122, %125\l  %127 = fadd contract double %116, %126\l  store double %127, double addrspace(1)* %17, align 8, !tbaa !7\l  %128 = add nuw nsw i32 %117, 1\l  %129 = add i32 %118, 1\l  %130 = icmp eq i32 %129, %21\l  br i1 %130, label %131, label %115, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x59c0be0:s0 -> Node0x59bc530;
	Node0x59c0be0:s1 -> Node0x59c0be0;
	Node0x59bc530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%131:\l131:                                              \l  ret void\l}"];
}
