digraph "CFG for '_Z5atempPdS_S_ii' function" {
	label="CFG for '_Z5atempPdS_S_ii' function";

	Node0x4e5c820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %10\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp sle i32 %14, %4\l  %16 = icmp sgt i32 %3, 0\l  %17 = select i1 %15, i1 %16, i1 false\l  br i1 %17, label %18, label %141\l|{<s0>T|<s1>F}}"];
	Node0x4e5c820:s0 -> Node0x4e5d1a0;
	Node0x4e5c820:s1 -> Node0x4e5e970;
	Node0x4e5d1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = sext i32 %14 to i64\l  %20 = getelementptr inbounds double, double addrspace(1)* %1, i64 %19\l  %21 = load double, double addrspace(1)* %20, align 8, !tbaa !7\l  %22 = and i32 %3, 7\l  %23 = icmp ult i32 %3, 8\l  br i1 %23, label %120, label %24\l|{<s0>T|<s1>F}}"];
	Node0x4e5d1a0:s0 -> Node0x4e5eeb0;
	Node0x4e5d1a0:s1 -> Node0x4e5ef40;
	Node0x4e5ef40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%24:\l24:                                               \l  %25 = and i32 %3, -8\l  br label %26\l}"];
	Node0x4e5ef40 -> Node0x4e5f140;
	Node0x4e5f140 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%26:\l26:                                               \l  %27 = phi double [ %21, %24 ], [ %116, %26 ]\l  %28 = phi i32 [ 0, %24 ], [ %117, %26 ]\l  %29 = phi i32 [ 0, %24 ], [ %118, %26 ]\l  %30 = mul nsw i32 %28, %4\l  %31 = add nsw i32 %30, %14\l  %32 = sext i32 %31 to i64\l  %33 = getelementptr inbounds double, double addrspace(1)* %0, i64 %32\l  %34 = load double, double addrspace(1)* %33, align 8, !tbaa !7\l  %35 = zext i32 %28 to i64\l  %36 = getelementptr inbounds double, double addrspace(1)* %2, i64 %35\l  %37 = load double, double addrspace(1)* %36, align 8, !tbaa !7\l  %38 = fmul contract double %34, %37\l  %39 = fadd contract double %27, %38\l  store double %39, double addrspace(1)* %20, align 8, !tbaa !7\l  %40 = or i32 %28, 1\l  %41 = mul nsw i32 %40, %4\l  %42 = add nsw i32 %41, %14\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds double, double addrspace(1)* %0, i64 %43\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !7\l  %46 = zext i32 %40 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %2, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !7\l  %49 = fmul contract double %45, %48\l  %50 = fadd contract double %39, %49\l  store double %50, double addrspace(1)* %20, align 8, !tbaa !7\l  %51 = or i32 %28, 2\l  %52 = mul nsw i32 %51, %4\l  %53 = add nsw i32 %52, %14\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds double, double addrspace(1)* %0, i64 %54\l  %56 = load double, double addrspace(1)* %55, align 8, !tbaa !7\l  %57 = zext i32 %51 to i64\l  %58 = getelementptr inbounds double, double addrspace(1)* %2, i64 %57\l  %59 = load double, double addrspace(1)* %58, align 8, !tbaa !7\l  %60 = fmul contract double %56, %59\l  %61 = fadd contract double %50, %60\l  store double %61, double addrspace(1)* %20, align 8, !tbaa !7\l  %62 = or i32 %28, 3\l  %63 = mul nsw i32 %62, %4\l  %64 = add nsw i32 %63, %14\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds double, double addrspace(1)* %0, i64 %65\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !7\l  %68 = zext i32 %62 to i64\l  %69 = getelementptr inbounds double, double addrspace(1)* %2, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !7\l  %71 = fmul contract double %67, %70\l  %72 = fadd contract double %61, %71\l  store double %72, double addrspace(1)* %20, align 8, !tbaa !7\l  %73 = or i32 %28, 4\l  %74 = mul nsw i32 %73, %4\l  %75 = add nsw i32 %74, %14\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %0, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7\l  %79 = zext i32 %73 to i64\l  %80 = getelementptr inbounds double, double addrspace(1)* %2, i64 %79\l  %81 = load double, double addrspace(1)* %80, align 8, !tbaa !7\l  %82 = fmul contract double %78, %81\l  %83 = fadd contract double %72, %82\l  store double %83, double addrspace(1)* %20, align 8, !tbaa !7\l  %84 = or i32 %28, 5\l  %85 = mul nsw i32 %84, %4\l  %86 = add nsw i32 %85, %14\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds double, double addrspace(1)* %0, i64 %87\l  %89 = load double, double addrspace(1)* %88, align 8, !tbaa !7\l  %90 = zext i32 %84 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %2, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !7\l  %93 = fmul contract double %89, %92\l  %94 = fadd contract double %83, %93\l  store double %94, double addrspace(1)* %20, align 8, !tbaa !7\l  %95 = or i32 %28, 6\l  %96 = mul nsw i32 %95, %4\l  %97 = add nsw i32 %96, %14\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds double, double addrspace(1)* %0, i64 %98\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !7\l  %101 = zext i32 %95 to i64\l  %102 = getelementptr inbounds double, double addrspace(1)* %2, i64 %101\l  %103 = load double, double addrspace(1)* %102, align 8, !tbaa !7\l  %104 = fmul contract double %100, %103\l  %105 = fadd contract double %94, %104\l  store double %105, double addrspace(1)* %20, align 8, !tbaa !7\l  %106 = or i32 %28, 7\l  %107 = mul nsw i32 %106, %4\l  %108 = add nsw i32 %107, %14\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds double, double addrspace(1)* %0, i64 %109\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !7\l  %112 = zext i32 %106 to i64\l  %113 = getelementptr inbounds double, double addrspace(1)* %2, i64 %112\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !7\l  %115 = fmul contract double %111, %114\l  %116 = fadd contract double %105, %115\l  store double %116, double addrspace(1)* %20, align 8, !tbaa !7\l  %117 = add nuw nsw i32 %28, 8\l  %118 = add i32 %29, 8\l  %119 = icmp eq i32 %118, %25\l  br i1 %119, label %120, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4e5f140:s0 -> Node0x4e5eeb0;
	Node0x4e5f140:s1 -> Node0x4e5f140;
	Node0x4e5eeb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%120:\l120:                                              \l  %121 = phi double [ %21, %18 ], [ %116, %26 ]\l  %122 = phi i32 [ 0, %18 ], [ %117, %26 ]\l  %123 = icmp eq i32 %22, 0\l  br i1 %123, label %141, label %124\l|{<s0>T|<s1>F}}"];
	Node0x4e5eeb0:s0 -> Node0x4e5e970;
	Node0x4e5eeb0:s1 -> Node0x4e636c0;
	Node0x4e636c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%124:\l124:                                              \l  %125 = phi double [ %137, %124 ], [ %121, %120 ]\l  %126 = phi i32 [ %138, %124 ], [ %122, %120 ]\l  %127 = phi i32 [ %139, %124 ], [ 0, %120 ]\l  %128 = mul nsw i32 %126, %4\l  %129 = add nsw i32 %128, %14\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds double, double addrspace(1)* %0, i64 %130\l  %132 = load double, double addrspace(1)* %131, align 8, !tbaa !7\l  %133 = zext i32 %126 to i64\l  %134 = getelementptr inbounds double, double addrspace(1)* %2, i64 %133\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !7\l  %136 = fmul contract double %132, %135\l  %137 = fadd contract double %125, %136\l  store double %137, double addrspace(1)* %20, align 8, !tbaa !7\l  %138 = add nuw nsw i32 %126, 1\l  %139 = add i32 %127, 1\l  %140 = icmp eq i32 %139, %22\l  br i1 %140, label %141, label %124, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4e636c0:s0 -> Node0x4e5e970;
	Node0x4e636c0:s1 -> Node0x4e636c0;
	Node0x4e5e970 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%141:\l141:                                              \l  ret void\l}"];
}
