digraph "CFG for '_Z14update_clusterPiPfS0_S0_S0_iiiS0_S0_S0_S0_' function" {
	label="CFG for '_Z14update_clusterPiPfS0_S0_S0_iiiS0_S0_S0_S0_' function";

	Node0x61d9e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %14 = sdiv i32 %5, %6\l  %15 = mul i32 %14, %13\l  %16 = icmp ult i32 %13, %5\l  br i1 %16, label %17, label %119\l|{<s0>T|<s1>F}}"];
	Node0x61d9e70:s0 -> Node0x61d9d50;
	Node0x61d9e70:s1 -> Node0x61d9ec0;
	Node0x61d9d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%17:\l17:                                               \l  %18 = add nsw i32 %15, %14\l  %19 = add nsw i32 %6, -1\l  %20 = icmp eq i32 %13, %19\l  %21 = mul nsw i32 %14, %19\l  %22 = select i1 %20, i32 %21, i32 %15\l  %23 = select i1 %20, i32 %5, i32 %18\l  %24 = icmp slt i32 %22, %23\l  br i1 %24, label %41, label %25\l|{<s0>T|<s1>F}}"];
	Node0x61d9d50:s0 -> Node0x61dc600;
	Node0x61d9d50:s1 -> Node0x61dc690;
	Node0x61dc690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%25:\l25:                                               \l  %26 = phi float [ 0.000000e+00, %17 ], [ %63, %62 ]\l  %27 = phi float [ 0.000000e+00, %17 ], [ %64, %62 ]\l  %28 = phi float [ 0.000000e+00, %17 ], [ %65, %62 ]\l  %29 = phi float [ 0.000000e+00, %17 ], [ %66, %62 ]\l  %30 = zext i32 %13 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %11, i64 %30\l  store float %26, float addrspace(1)* %31, align 4, !tbaa !5\l  %32 = getelementptr inbounds float, float addrspace(1)* %8, i64 %30\l  store float %27, float addrspace(1)* %32, align 4, !tbaa !5\l  %33 = getelementptr inbounds float, float addrspace(1)* %9, i64 %30\l  store float %28, float addrspace(1)* %33, align 4, !tbaa !5\l  %34 = getelementptr inbounds float, float addrspace(1)* %10, i64 %30\l  store float %29, float addrspace(1)* %34, align 4, !tbaa !5\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %35 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %36 = getelementptr i8, i8 addrspace(4)* %35, i64 4\l  %37 = bitcast i8 addrspace(4)* %36 to i16 addrspace(4)*\l  %38 = load i16, i16 addrspace(4)* %37, align 4, !range !9, !invariant.load\l... !10\l  %39 = zext i16 %38 to i32\l  %40 = icmp ugt i16 %38, 1\l  br i1 %40, label %71, label %69\l|{<s0>T|<s1>F}}"];
	Node0x61dc690:s0 -> Node0x61def50;
	Node0x61dc690:s1 -> Node0x61defe0;
	Node0x61dc600 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%41:\l41:                                               \l  %42 = phi i32 [ %67, %62 ], [ %22, %17 ]\l  %43 = phi float [ %66, %62 ], [ 0.000000e+00, %17 ]\l  %44 = phi float [ %65, %62 ], [ 0.000000e+00, %17 ]\l  %45 = phi float [ %64, %62 ], [ 0.000000e+00, %17 ]\l  %46 = phi float [ %63, %62 ], [ 0.000000e+00, %17 ]\l  %47 = sext i32 %42 to i64\l  %48 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %47\l  %49 = load i32, i32 addrspace(1)* %48, align 4, !tbaa !11, !amdgpu.noclobber\l... !10\l  %50 = icmp eq i32 %49, %7\l  br i1 %50, label %51, label %62\l|{<s0>T|<s1>F}}"];
	Node0x61dc600:s0 -> Node0x61dfed0;
	Node0x61dc600:s1 -> Node0x61dd250;
	Node0x61dfed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%51:\l51:                                               \l  %52 = getelementptr inbounds float, float addrspace(1)* %2, i64 %47\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5,\l... !amdgpu.noclobber !10\l  %54 = fadd contract float %45, %53\l  %55 = getelementptr inbounds float, float addrspace(1)* %3, i64 %47\l  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !5,\l... !amdgpu.noclobber !10\l  %57 = fadd contract float %44, %56\l  %58 = getelementptr inbounds float, float addrspace(1)* %4, i64 %47\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !5,\l... !amdgpu.noclobber !10\l  %60 = fadd contract float %43, %59\l  %61 = fadd contract float %46, 1.000000e+00\l  br label %62\l}"];
	Node0x61dfed0 -> Node0x61dd250;
	Node0x61dd250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%62:\l62:                                               \l  %63 = phi float [ %61, %51 ], [ %46, %41 ]\l  %64 = phi float [ %54, %51 ], [ %45, %41 ]\l  %65 = phi float [ %57, %51 ], [ %44, %41 ]\l  %66 = phi float [ %60, %51 ], [ %43, %41 ]\l  %67 = add nsw i32 %42, 1\l  %68 = icmp slt i32 %67, %23\l  br i1 %68, label %41, label %25, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x61dd250:s0 -> Node0x61dc600;
	Node0x61dd250:s1 -> Node0x61dc690;
	Node0x61defe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%69:\l69:                                               \l  %70 = icmp eq i32 %13, 0\l  br i1 %70, label %98, label %119\l|{<s0>T|<s1>F}}"];
	Node0x61defe0:s0 -> Node0x61e0e00;
	Node0x61defe0:s1 -> Node0x61d9ec0;
	Node0x61def50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%71:\l71:                                               \l  %72 = phi i32 [ %73, %96 ], [ 1, %25 ]\l  %73 = shl i32 %72, 1\l  %74 = add i32 %73, 1023\l  %75 = and i32 %74, %13\l  %76 = icmp eq i32 %75, 0\l  br i1 %76, label %77, label %96\l|{<s0>T|<s1>F}}"];
	Node0x61def50:s0 -> Node0x61e1240;
	Node0x61def50:s1 -> Node0x61e0f00;
	Node0x61e1240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%77:\l77:                                               \l  %78 = add i32 %72, %13\l  %79 = zext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %11, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !5\l  %82 = load float, float addrspace(1)* %31, align 4, !tbaa !5\l  %83 = fadd contract float %81, %82\l  store float %83, float addrspace(1)* %31, align 4, !tbaa !5\l  %84 = getelementptr inbounds float, float addrspace(1)* %8, i64 %79\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !5\l  %86 = load float, float addrspace(1)* %32, align 4, !tbaa !5\l  %87 = fadd contract float %85, %86\l  store float %87, float addrspace(1)* %32, align 4, !tbaa !5\l  %88 = getelementptr inbounds float, float addrspace(1)* %9, i64 %79\l  %89 = load float, float addrspace(1)* %88, align 4, !tbaa !5\l  %90 = load float, float addrspace(1)* %33, align 4, !tbaa !5\l  %91 = fadd contract float %89, %90\l  store float %91, float addrspace(1)* %33, align 4, !tbaa !5\l  %92 = getelementptr inbounds float, float addrspace(1)* %10, i64 %79\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5\l  %94 = load float, float addrspace(1)* %34, align 4, !tbaa !5\l  %95 = fadd contract float %93, %94\l  store float %95, float addrspace(1)* %34, align 4, !tbaa !5\l  br label %96\l}"];
	Node0x61e1240 -> Node0x61e0f00;
	Node0x61e0f00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%96:\l96:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %97 = icmp ult i32 %73, %39\l  br i1 %97, label %71, label %69, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x61e0f00:s0 -> Node0x61def50;
	Node0x61e0f00:s1 -> Node0x61defe0;
	Node0x61e0e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%98:\l98:                                               \l  %99 = load float, float addrspace(1)* %11, align 4, !tbaa !5\l  %100 = fcmp contract une float %99, 0.000000e+00\l  br i1 %100, label %101, label %119\l|{<s0>T|<s1>F}}"];
	Node0x61e0e00:s0 -> Node0x61e2360;
	Node0x61e0e00:s1 -> Node0x61d9ec0;
	Node0x61e2360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%101:\l101:                                              \l  %102 = load float, float addrspace(1)* %8, align 4, !tbaa !5\l  %103 = fdiv contract float %102, %99\l  %104 = mul nsw i32 %7, 3\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %1, i64 %105\l  store float %103, float addrspace(1)* %106, align 4, !tbaa !5\l  %107 = load float, float addrspace(1)* %9, align 4, !tbaa !5\l  %108 = load float, float addrspace(1)* %11, align 4, !tbaa !5\l  %109 = fdiv contract float %107, %108\l  %110 = add nsw i32 %104, 1\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  store float %109, float addrspace(1)* %112, align 4, !tbaa !5\l  %113 = load float, float addrspace(1)* %10, align 4, !tbaa !5\l  %114 = load float, float addrspace(1)* %11, align 4, !tbaa !5\l  %115 = fdiv contract float %113, %114\l  %116 = add nsw i32 %104, 2\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117\l  store float %115, float addrspace(1)* %118, align 4, !tbaa !5\l  br label %119\l}"];
	Node0x61e2360 -> Node0x61d9ec0;
	Node0x61d9ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%119:\l119:                                              \l  ret void\l}"];
}
