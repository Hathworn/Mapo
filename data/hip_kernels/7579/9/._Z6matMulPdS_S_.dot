digraph "CFG for '_Z6matMulPdS_S_' function" {
	label="CFG for '_Z6matMulPdS_S_' function";

	Node0x4e2faa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = getelementptr i8, i8 addrspace(4)* %4, i64 6\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 16\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 8, !tbaa !15\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %19 = udiv i32 %12, %9\l  %20 = mul i32 %19, %9\l  %21 = icmp ugt i32 %12, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %26 = mul nuw nsw i32 %25, %9\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %28 = bitcast i8 addrspace(4)* %14 to \<2 x i16\> addrspace(4)*\l  %29 = load \<2 x i16\>, \<2 x i16\> addrspace(4)* %28, align 2, !invariant.load\l... !5\l  %30 = zext \<2 x i16\> %29 to \<2 x i32\>\l  %31 = extractelement \<2 x i32\> %30, i64 0\l  %32 = udiv i32 %17, %31\l  %33 = mul i32 %32, %31\l  %34 = icmp ugt i32 %17, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %18\l  %38 = add i32 %37, %13\l  %39 = mul i32 %38, %23\l  %40 = add i32 %39, %5\l  %41 = insertelement \<2 x i32\> poison, i32 %9, i64 0\l  %42 = insertelement \<2 x i32\> %41, i32 %40, i64 1\l  %43 = mul \<2 x i32\> %42, %30\l  %44 = extractelement \<2 x i32\> %43, i64 1\l  %45 = add i32 %44, %24\l  %46 = extractelement \<2 x i32\> %43, i64 0\l  %47 = mul i32 %46, %45\l  %48 = add nuw nsw i32 %26, %27\l  %49 = add i32 %48, %47\l  %50 = shl nsw i32 %49, 16\l  %51 = sext i32 %49 to i64\l  %52 = getelementptr inbounds double, double addrspace(1)* %2, i64 %51\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !17\l  br label %55\l}"];
	Node0x4e2faa0 -> Node0x4e35200;
	Node0x4e35300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%54:\l54:                                               \l  ret void\l}"];
	Node0x4e35200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = phi double [ %53, %3 ], [ %136, %55 ]\l  %57 = phi i32 [ 0, %3 ], [ %137, %55 ]\l  %58 = add nuw nsw i32 %57, %50\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %0, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !17\l  %62 = zext i32 %57 to i64\l  %63 = getelementptr inbounds double, double addrspace(1)* %1, i64 %62\l  %64 = load double, double addrspace(1)* %63, align 8, !tbaa !17\l  %65 = fmul contract double %61, %64\l  %66 = fadd contract double %56, %65\l  store double %66, double addrspace(1)* %52, align 8, !tbaa !17\l  %67 = or i32 %57, 1\l  %68 = add nuw nsw i32 %67, %50\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds double, double addrspace(1)* %0, i64 %69\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !17\l  %72 = zext i32 %67 to i64\l  %73 = getelementptr inbounds double, double addrspace(1)* %1, i64 %72\l  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !17\l  %75 = fmul contract double %71, %74\l  %76 = fadd contract double %66, %75\l  store double %76, double addrspace(1)* %52, align 8, !tbaa !17\l  %77 = or i32 %57, 2\l  %78 = add nuw nsw i32 %77, %50\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds double, double addrspace(1)* %0, i64 %79\l  %81 = load double, double addrspace(1)* %80, align 8, !tbaa !17\l  %82 = zext i32 %77 to i64\l  %83 = getelementptr inbounds double, double addrspace(1)* %1, i64 %82\l  %84 = load double, double addrspace(1)* %83, align 8, !tbaa !17\l  %85 = fmul contract double %81, %84\l  %86 = fadd contract double %76, %85\l  store double %86, double addrspace(1)* %52, align 8, !tbaa !17\l  %87 = or i32 %57, 3\l  %88 = add nuw nsw i32 %87, %50\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds double, double addrspace(1)* %0, i64 %89\l  %91 = load double, double addrspace(1)* %90, align 8, !tbaa !17\l  %92 = zext i32 %87 to i64\l  %93 = getelementptr inbounds double, double addrspace(1)* %1, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !17\l  %95 = fmul contract double %91, %94\l  %96 = fadd contract double %86, %95\l  store double %96, double addrspace(1)* %52, align 8, !tbaa !17\l  %97 = or i32 %57, 4\l  %98 = add nuw nsw i32 %97, %50\l  %99 = sext i32 %98 to i64\l  %100 = getelementptr inbounds double, double addrspace(1)* %0, i64 %99\l  %101 = load double, double addrspace(1)* %100, align 8, !tbaa !17\l  %102 = zext i32 %97 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %1, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !17\l  %105 = fmul contract double %101, %104\l  %106 = fadd contract double %96, %105\l  store double %106, double addrspace(1)* %52, align 8, !tbaa !17\l  %107 = or i32 %57, 5\l  %108 = add nuw nsw i32 %107, %50\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds double, double addrspace(1)* %0, i64 %109\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !17\l  %112 = zext i32 %107 to i64\l  %113 = getelementptr inbounds double, double addrspace(1)* %1, i64 %112\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !17\l  %115 = fmul contract double %111, %114\l  %116 = fadd contract double %106, %115\l  store double %116, double addrspace(1)* %52, align 8, !tbaa !17\l  %117 = or i32 %57, 6\l  %118 = add nuw nsw i32 %117, %50\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds double, double addrspace(1)* %0, i64 %119\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !17\l  %122 = zext i32 %117 to i64\l  %123 = getelementptr inbounds double, double addrspace(1)* %1, i64 %122\l  %124 = load double, double addrspace(1)* %123, align 8, !tbaa !17\l  %125 = fmul contract double %121, %124\l  %126 = fadd contract double %116, %125\l  store double %126, double addrspace(1)* %52, align 8, !tbaa !17\l  %127 = or i32 %57, 7\l  %128 = add nuw nsw i32 %127, %50\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds double, double addrspace(1)* %0, i64 %129\l  %131 = load double, double addrspace(1)* %130, align 8, !tbaa !17\l  %132 = zext i32 %127 to i64\l  %133 = getelementptr inbounds double, double addrspace(1)* %1, i64 %132\l  %134 = load double, double addrspace(1)* %133, align 8, !tbaa !17\l  %135 = fmul contract double %131, %134\l  %136 = fadd contract double %126, %135\l  store double %136, double addrspace(1)* %52, align 8, !tbaa !17\l  %137 = add nuw nsw i32 %57, 8\l  %138 = icmp eq i32 %137, 65536\l  br i1 %138, label %54, label %55, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x4e35200:s0 -> Node0x4e35300;
	Node0x4e35200:s1 -> Node0x4e35200;
}
