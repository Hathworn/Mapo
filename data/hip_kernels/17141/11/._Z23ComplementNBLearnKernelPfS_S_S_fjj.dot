digraph "CFG for '_Z23ComplementNBLearnKernelPfS_S_S_fjj' function" {
	label="CFG for '_Z23ComplementNBLearnKernelPfS_S_S_fjj' function";

	Node0x4babc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = add i32 %15, %8\l  %17 = icmp ult i32 %16, %6\l  %18 = icmp ne i32 %5, 0\l  %19 = select i1 %17, i1 %18, i1 false\l  br i1 %19, label %20, label %143\l|{<s0>T|<s1>F}}"];
	Node0x4babc10:s0 -> Node0x4badcf0;
	Node0x4babc10:s1 -> Node0x4badd80;
	Node0x4badcf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%20:\l20:                                               \l  %21 = sext i32 %16 to i64\l  %22 = getelementptr inbounds float, float addrspace(1)* %2, i64 %21\l  %23 = uitofp i32 %6 to float\l  br label %24\l}"];
	Node0x4badcf0 -> Node0x4bae040;
	Node0x4bae040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%24:\l24:                                               \l  %25 = phi i32 [ 0, %20 ], [ %141, %24 ]\l  %26 = zext i32 %25 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %3, i64 %26\l  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %29 = fsub contract float %4, %28\l  %30 = load float, float addrspace(1)* %22, align 4, !tbaa !7\l  %31 = mul i32 %25, %6\l  %32 = add i32 %31, %16\l  %33 = zext i32 %32 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %1, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !7\l  %36 = fsub contract float %30, %35\l  %37 = fpext float %36 to double\l  %38 = fadd contract double %37, 1.000000e+00\l  %39 = tail call double @llvm.amdgcn.frexp.mant.f64(double %38)\l  %40 = fcmp olt double %39, 0x3FE5555555555555\l  %41 = zext i1 %40 to i32\l  %42 = tail call double @llvm.amdgcn.ldexp.f64(double %39, i32 %41)\l  %43 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %38)\l  %44 = sub nsw i32 %43, %41\l  %45 = fadd double %42, -1.000000e+00\l  %46 = fadd double %42, 1.000000e+00\l  %47 = fadd double %46, -1.000000e+00\l  %48 = fsub double %42, %47\l  %49 = tail call double @llvm.amdgcn.rcp.f64(double %46)\l  %50 = fneg double %46\l  %51 = tail call double @llvm.fma.f64(double %50, double %49, double\l... 1.000000e+00)\l  %52 = tail call double @llvm.fma.f64(double %51, double %49, double %49)\l  %53 = tail call double @llvm.fma.f64(double %50, double %52, double\l... 1.000000e+00)\l  %54 = tail call double @llvm.fma.f64(double %53, double %52, double %52)\l  %55 = fmul double %45, %54\l  %56 = fmul double %46, %55\l  %57 = fneg double %56\l  %58 = tail call double @llvm.fma.f64(double %55, double %46, double %57)\l  %59 = tail call double @llvm.fma.f64(double %55, double %48, double %58)\l  %60 = fadd double %56, %59\l  %61 = fsub double %60, %56\l  %62 = fsub double %59, %61\l  %63 = fsub double %45, %60\l  %64 = fsub double %45, %63\l  %65 = fsub double %64, %60\l  %66 = fsub double %65, %62\l  %67 = fadd double %63, %66\l  %68 = fmul double %54, %67\l  %69 = fadd double %55, %68\l  %70 = fsub double %69, %55\l  %71 = fsub double %68, %70\l  %72 = fmul double %69, %69\l  %73 = tail call double @llvm.fma.f64(double %72, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %74 = tail call double @llvm.fma.f64(double %72, double %73, double\l... 0x3FC7474DD7F4DF2E)\l  %75 = tail call double @llvm.fma.f64(double %72, double %74, double\l... 0x3FCC71C016291751)\l  %76 = tail call double @llvm.fma.f64(double %72, double %75, double\l... 0x3FD249249B27ACF1)\l  %77 = tail call double @llvm.fma.f64(double %72, double %76, double\l... 0x3FD99999998EF7B6)\l  %78 = tail call double @llvm.fma.f64(double %72, double %77, double\l... 0x3FE5555555555780)\l  %79 = tail call double @llvm.amdgcn.ldexp.f64(double %69, i32 1)\l  %80 = tail call double @llvm.amdgcn.ldexp.f64(double %71, i32 1)\l  %81 = fmul double %69, %72\l  %82 = fmul double %81, %78\l  %83 = fadd double %79, %82\l  %84 = fsub double %83, %79\l  %85 = fsub double %82, %84\l  %86 = fadd double %80, %85\l  %87 = fadd double %83, %86\l  %88 = fsub double %87, %83\l  %89 = fsub double %86, %88\l  %90 = sitofp i32 %44 to double\l  %91 = fmul double %90, 0x3FE62E42FEFA39EF\l  %92 = fneg double %91\l  %93 = tail call double @llvm.fma.f64(double %90, double 0x3FE62E42FEFA39EF,\l... double %92)\l  %94 = tail call double @llvm.fma.f64(double %90, double 0x3C7ABC9E3B39803F,\l... double %93)\l  %95 = fadd double %91, %94\l  %96 = fsub double %95, %91\l  %97 = fsub double %94, %96\l  %98 = fadd double %95, %87\l  %99 = fsub double %98, %95\l  %100 = fsub double %98, %99\l  %101 = fsub double %95, %100\l  %102 = fsub double %87, %99\l  %103 = fadd double %102, %101\l  %104 = fadd double %97, %89\l  %105 = fsub double %104, %97\l  %106 = fsub double %104, %105\l  %107 = fsub double %97, %106\l  %108 = fsub double %89, %105\l  %109 = fadd double %108, %107\l  %110 = fadd double %104, %103\l  %111 = fadd double %98, %110\l  %112 = fsub double %111, %98\l  %113 = fsub double %110, %112\l  %114 = fadd double %109, %113\l  %115 = fadd double %111, %114\l  %116 = tail call double @llvm.fabs.f64(double %38) #3\l  %117 = fcmp oeq double %116, 0x7FF0000000000000\l  %118 = select i1 %117, double %38, double %115\l  %119 = fcmp olt double %38, 0.000000e+00\l  %120 = select i1 %119, double 0x7FF8000000000000, double %118\l  %121 = fcmp oeq double %38, 0.000000e+00\l  %122 = select i1 %121, double 0xFFF0000000000000, double %120\l  %123 = fadd contract float %29, %23\l  %124 = tail call i1 @llvm.amdgcn.class.f32(float %123, i32 144)\l  %125 = select i1 %124, float 0x41F0000000000000, float 1.000000e+00\l  %126 = fmul float %123, %125\l  %127 = tail call float @llvm.log2.f32(float %126)\l  %128 = fmul float %127, 0x3FE62E42E0000000\l  %129 = tail call i1 @llvm.amdgcn.class.f32(float %127, i32 519)\l  %130 = fneg float %128\l  %131 = tail call float @llvm.fma.f32(float %127, float 0x3FE62E42E0000000,\l... float %130)\l  %132 = tail call float @llvm.fma.f32(float %127, float 0x3E6EFA39E0000000,\l... float %131)\l  %133 = fadd float %128, %132\l  %134 = select i1 %129, float %127, float %133\l  %135 = select i1 %124, float 0x40362E4300000000, float 0.000000e+00\l  %136 = fsub float %134, %135\l  %137 = fpext float %136 to double\l  %138 = fsub contract double %122, %137\l  %139 = fptrunc double %138 to float\l  %140 = getelementptr inbounds float, float addrspace(1)* %0, i64 %33\l  store float %139, float addrspace(1)* %140, align 4, !tbaa !7\l  %141 = add nuw i32 %25, 1\l  %142 = icmp eq i32 %141, %5\l  br i1 %142, label %143, label %24, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4bae040:s0 -> Node0x4badd80;
	Node0x4bae040:s1 -> Node0x4bae040;
	Node0x4badd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%143:\l143:                                              \l  ret void\l}"];
}
