digraph "CFG for '_Z21BernoulliNBCalcKernelPKfPKiPfS3_jjj' function" {
	label="CFG for '_Z21BernoulliNBCalcKernelPKfPKiPfS3_jjj' function";

	Node0x4c10af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !5, !invariant.load !6\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = add i32 %15, %8\l  %17 = icmp ult i32 %16, %6\l  %18 = icmp ne i32 %4, 0\l  %19 = select i1 %17, i1 %18, i1 false\l  br i1 %19, label %20, label %228\l|{<s0>T|<s1>F}}"];
	Node0x4c10af0:s0 -> Node0x4c12bd0;
	Node0x4c10af0:s1 -> Node0x4c12c60;
	Node0x4c12bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%20:\l20:                                               \l  %21 = icmp eq i32 %16, 0\l  br i1 %21, label %27, label %22\l|{<s0>T|<s1>F}}"];
	Node0x4c12bd0:s0 -> Node0x4c12e30;
	Node0x4c12bd0:s1 -> Node0x4c12e80;
	Node0x4c12e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%22:\l22:                                               \l  %23 = and i32 %4, 3\l  %24 = icmp ult i32 %4, 4\l  br i1 %24, label %205, label %25\l|{<s0>T|<s1>F}}"];
	Node0x4c12e80:s0 -> Node0x4c13140;
	Node0x4c12e80:s1 -> Node0x4c13190;
	Node0x4c13190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%25:\l25:                                               \l  %26 = and i32 %4, -4\l  br label %32\l}"];
	Node0x4c13190 -> Node0x4c13390;
	Node0x4c12e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%27:\l27:                                               \l  %28 = and i32 %4, 3\l  %29 = icmp ult i32 %4, 4\l  br i1 %29, label %178, label %30\l|{<s0>T|<s1>F}}"];
	Node0x4c12e30:s0 -> Node0x4c13570;
	Node0x4c12e30:s1 -> Node0x4c135c0;
	Node0x4c135c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%30:\l30:                                               \l  %31 = and i32 %4, -4\l  br label %97\l}"];
	Node0x4c135c0 -> Node0x4c13790;
	Node0x4c13390 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%32:\l32:                                               \l  %33 = phi i32 [ 0, %25 ], [ %94, %32 ]\l  %34 = phi i32 [ 0, %25 ], [ %95, %32 ]\l  %35 = zext i32 %33 to i64\l  %36 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %35\l  %37 = load i32, i32 addrspace(1)* %36, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %38 = mul i32 %33, %6\l  %39 = add i32 %38, %16\l  %40 = zext i32 %39 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !11\l  %43 = mul i32 %37, %6\l  %44 = add i32 %43, %16\l  %45 = zext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %2, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !11\l  %48 = fadd contract float %42, %47\l  store float %48, float addrspace(1)* %46, align 4, !tbaa !11\l  %49 = or i32 %33, 1\l  %50 = zext i32 %49 to i64\l  %51 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %50\l  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %53 = mul i32 %49, %6\l  %54 = add i32 %53, %16\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !11\l  %58 = mul i32 %52, %6\l  %59 = add i32 %58, %16\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !11\l  %63 = fadd contract float %57, %62\l  store float %63, float addrspace(1)* %61, align 4, !tbaa !11\l  %64 = or i32 %33, 2\l  %65 = zext i32 %64 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %65\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %68 = mul i32 %64, %6\l  %69 = add i32 %68, %16\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !11\l  %73 = mul i32 %67, %6\l  %74 = add i32 %73, %16\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !11\l  %78 = fadd contract float %72, %77\l  store float %78, float addrspace(1)* %76, align 4, !tbaa !11\l  %79 = or i32 %33, 3\l  %80 = zext i32 %79 to i64\l  %81 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %80\l  %82 = load i32, i32 addrspace(1)* %81, align 4, !tbaa !7, !amdgpu.noclobber\l... !6\l  %83 = mul i32 %79, %6\l  %84 = add i32 %83, %16\l  %85 = zext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !11\l  %88 = mul i32 %82, %6\l  %89 = add i32 %88, %16\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !11\l  %93 = fadd contract float %87, %92\l  store float %93, float addrspace(1)* %91, align 4, !tbaa !11\l  %94 = add nuw i32 %33, 4\l  %95 = add i32 %34, 4\l  %96 = icmp eq i32 %95, %26\l  br i1 %96, label %205, label %32, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4c13390:s0 -> Node0x4c13140;
	Node0x4c13390:s1 -> Node0x4c13390;
	Node0x4c13790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%97:\l97:                                               \l  %98 = phi i32 [ 0, %30 ], [ %175, %97 ]\l  %99 = phi i32 [ 0, %30 ], [ %176, %97 ]\l  %100 = zext i32 %98 to i64\l  %101 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %100\l  %102 = load i32, i32 addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %103 = mul i32 %98, %6\l  %104 = add i32 %103, %16\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !11\l  %108 = mul i32 %102, %6\l  %109 = add i32 %108, %16\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !11\l  %113 = fadd contract float %107, %112\l  store float %113, float addrspace(1)* %111, align 4, !tbaa !11\l  %114 = zext i32 %102 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %3, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !11\l  %117 = fadd contract float %116, 1.000000e+00\l  store float %117, float addrspace(1)* %115, align 4, !tbaa !11\l  %118 = or i32 %98, 1\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %119\l  %121 = load i32, i32 addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %122 = mul i32 %118, %6\l  %123 = add i32 %122, %16\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !11\l  %127 = mul i32 %121, %6\l  %128 = add i32 %127, %16\l  %129 = zext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %2, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !11\l  %132 = fadd contract float %126, %131\l  store float %132, float addrspace(1)* %130, align 4, !tbaa !11\l  %133 = zext i32 %121 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %3, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !11\l  %136 = fadd contract float %135, 1.000000e+00\l  store float %136, float addrspace(1)* %134, align 4, !tbaa !11\l  %137 = or i32 %98, 2\l  %138 = zext i32 %137 to i64\l  %139 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %138\l  %140 = load i32, i32 addrspace(1)* %139, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %141 = mul i32 %137, %6\l  %142 = add i32 %141, %16\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !11\l  %146 = mul i32 %140, %6\l  %147 = add i32 %146, %16\l  %148 = zext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %2, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !11\l  %151 = fadd contract float %145, %150\l  store float %151, float addrspace(1)* %149, align 4, !tbaa !11\l  %152 = zext i32 %140 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %3, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !11\l  %155 = fadd contract float %154, 1.000000e+00\l  store float %155, float addrspace(1)* %153, align 4, !tbaa !11\l  %156 = or i32 %98, 3\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %157\l  %159 = load i32, i32 addrspace(1)* %158, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %160 = mul i32 %156, %6\l  %161 = add i32 %160, %16\l  %162 = zext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %0, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !11\l  %165 = mul i32 %159, %6\l  %166 = add i32 %165, %16\l  %167 = zext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %2, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !11\l  %170 = fadd contract float %164, %169\l  store float %170, float addrspace(1)* %168, align 4, !tbaa !11\l  %171 = zext i32 %159 to i64\l  %172 = getelementptr inbounds float, float addrspace(1)* %3, i64 %171\l  %173 = load float, float addrspace(1)* %172, align 4, !tbaa !11\l  %174 = fadd contract float %173, 1.000000e+00\l  store float %174, float addrspace(1)* %172, align 4, !tbaa !11\l  %175 = add nuw i32 %98, 4\l  %176 = add i32 %99, 4\l  %177 = icmp eq i32 %176, %31\l  br i1 %177, label %178, label %97, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4c13790:s0 -> Node0x4c13570;
	Node0x4c13790:s1 -> Node0x4c13790;
	Node0x4c13570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%178:\l178:                                              \l  %179 = phi i32 [ 0, %27 ], [ %175, %97 ]\l  %180 = icmp eq i32 %28, 0\l  br i1 %180, label %228, label %181\l|{<s0>T|<s1>F}}"];
	Node0x4c13570:s0 -> Node0x4c12c60;
	Node0x4c13570:s1 -> Node0x4c1beb0;
	Node0x4c1beb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%181:\l181:                                              \l  %182 = phi i32 [ %202, %181 ], [ %179, %178 ]\l  %183 = phi i32 [ %203, %181 ], [ 0, %178 ]\l  %184 = zext i32 %182 to i64\l  %185 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %184\l  %186 = load i32, i32 addrspace(1)* %185, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %187 = mul i32 %182, %6\l  %188 = add i32 %187, %16\l  %189 = zext i32 %188 to i64\l  %190 = getelementptr inbounds float, float addrspace(1)* %0, i64 %189\l  %191 = load float, float addrspace(1)* %190, align 4, !tbaa !11\l  %192 = mul i32 %186, %6\l  %193 = add i32 %192, %16\l  %194 = zext i32 %193 to i64\l  %195 = getelementptr inbounds float, float addrspace(1)* %2, i64 %194\l  %196 = load float, float addrspace(1)* %195, align 4, !tbaa !11\l  %197 = fadd contract float %191, %196\l  store float %197, float addrspace(1)* %195, align 4, !tbaa !11\l  %198 = zext i32 %186 to i64\l  %199 = getelementptr inbounds float, float addrspace(1)* %3, i64 %198\l  %200 = load float, float addrspace(1)* %199, align 4, !tbaa !11\l  %201 = fadd contract float %200, 1.000000e+00\l  store float %201, float addrspace(1)* %199, align 4, !tbaa !11\l  %202 = add nuw i32 %182, 1\l  %203 = add i32 %183, 1\l  %204 = icmp eq i32 %203, %28\l  br i1 %204, label %228, label %181, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4c1beb0:s0 -> Node0x4c12c60;
	Node0x4c1beb0:s1 -> Node0x4c1beb0;
	Node0x4c13140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%205:\l205:                                              \l  %206 = phi i32 [ 0, %22 ], [ %94, %32 ]\l  %207 = icmp eq i32 %23, 0\l  br i1 %207, label %228, label %208\l|{<s0>T|<s1>F}}"];
	Node0x4c13140:s0 -> Node0x4c12c60;
	Node0x4c13140:s1 -> Node0x4c10f70;
	Node0x4c10f70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%208:\l208:                                              \l  %209 = phi i32 [ %225, %208 ], [ %206, %205 ]\l  %210 = phi i32 [ %226, %208 ], [ 0, %205 ]\l  %211 = zext i32 %209 to i64\l  %212 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %211\l  %213 = load i32, i32 addrspace(1)* %212, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %214 = mul i32 %209, %6\l  %215 = add i32 %214, %16\l  %216 = zext i32 %215 to i64\l  %217 = getelementptr inbounds float, float addrspace(1)* %0, i64 %216\l  %218 = load float, float addrspace(1)* %217, align 4, !tbaa !11\l  %219 = mul i32 %213, %6\l  %220 = add i32 %219, %16\l  %221 = zext i32 %220 to i64\l  %222 = getelementptr inbounds float, float addrspace(1)* %2, i64 %221\l  %223 = load float, float addrspace(1)* %222, align 4, !tbaa !11\l  %224 = fadd contract float %218, %223\l  store float %224, float addrspace(1)* %222, align 4, !tbaa !11\l  %225 = add nuw i32 %209, 1\l  %226 = add i32 %210, 1\l  %227 = icmp eq i32 %226, %23\l  br i1 %227, label %228, label %208, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x4c10f70:s0 -> Node0x4c12c60;
	Node0x4c10f70:s1 -> Node0x4c10f70;
	Node0x4c12c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%228:\l228:                                              \l  ret void\l}"];
}
