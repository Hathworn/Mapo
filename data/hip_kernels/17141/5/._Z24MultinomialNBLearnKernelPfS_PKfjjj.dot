digraph "CFG for '_Z24MultinomialNBLearnKernelPfS_PKfjjj' function" {
	label="CFG for '_Z24MultinomialNBLearnKernelPfS_PKfjjj' function";

	Node0x5cc3e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = mul i32 %8, %13\l  %15 = add i32 %14, %7\l  %16 = icmp ult i32 %15, %5\l  %17 = icmp ne i32 %4, 0\l  %18 = select i1 %16, i1 %17, i1 false\l  br i1 %18, label %19, label %243\l|{<s0>T|<s1>F}}"];
	Node0x5cc3e70:s0 -> Node0x5cc5f50;
	Node0x5cc3e70:s1 -> Node0x5cc5fe0;
	Node0x5cc5f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%19:\l19:                                               \l  %20 = uitofp i32 %5 to double\l  %21 = icmp eq i32 %15, 0\l  %22 = uitofp i32 %3 to float\l  br i1 %21, label %125, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5cc5f50:s0 -> Node0x5cc6290;
	Node0x5cc5f50:s1 -> Node0x5cc62e0;
	Node0x5cc62e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i32 [ %123, %23 ], [ 0, %19 ]\l  %25 = mul i32 %24, %5\l  %26 = add i32 %25, %15\l  %27 = zext i32 %26 to i64\l  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27\l  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !7\l  %30 = fpext float %29 to double\l  %31 = fadd contract double %30, 1.000000e+00\l  %32 = zext i32 %24 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %2, i64 %32\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7\l  %35 = fpext float %34 to double\l  %36 = fsub contract double %35, %20\l  %37 = fdiv contract double %31, %36\l  %38 = tail call double @llvm.amdgcn.frexp.mant.f64(double %37)\l  %39 = fcmp olt double %38, 0x3FE5555555555555\l  %40 = zext i1 %39 to i32\l  %41 = tail call double @llvm.amdgcn.ldexp.f64(double %38, i32 %40)\l  %42 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %37)\l  %43 = sub nsw i32 %42, %40\l  %44 = fadd double %41, -1.000000e+00\l  %45 = fadd double %41, 1.000000e+00\l  %46 = fadd double %45, -1.000000e+00\l  %47 = fsub double %41, %46\l  %48 = tail call double @llvm.amdgcn.rcp.f64(double %45)\l  %49 = fneg double %45\l  %50 = tail call double @llvm.fma.f64(double %49, double %48, double\l... 1.000000e+00)\l  %51 = tail call double @llvm.fma.f64(double %50, double %48, double %48)\l  %52 = tail call double @llvm.fma.f64(double %49, double %51, double\l... 1.000000e+00)\l  %53 = tail call double @llvm.fma.f64(double %52, double %51, double %51)\l  %54 = fmul double %44, %53\l  %55 = fmul double %45, %54\l  %56 = fneg double %55\l  %57 = tail call double @llvm.fma.f64(double %54, double %45, double %56)\l  %58 = tail call double @llvm.fma.f64(double %54, double %47, double %57)\l  %59 = fadd double %55, %58\l  %60 = fsub double %59, %55\l  %61 = fsub double %58, %60\l  %62 = fsub double %44, %59\l  %63 = fsub double %44, %62\l  %64 = fsub double %63, %59\l  %65 = fsub double %64, %61\l  %66 = fadd double %62, %65\l  %67 = fmul double %53, %66\l  %68 = fadd double %54, %67\l  %69 = fsub double %68, %54\l  %70 = fsub double %67, %69\l  %71 = fmul double %68, %68\l  %72 = tail call double @llvm.fma.f64(double %71, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %73 = tail call double @llvm.fma.f64(double %71, double %72, double\l... 0x3FC7474DD7F4DF2E)\l  %74 = tail call double @llvm.fma.f64(double %71, double %73, double\l... 0x3FCC71C016291751)\l  %75 = tail call double @llvm.fma.f64(double %71, double %74, double\l... 0x3FD249249B27ACF1)\l  %76 = tail call double @llvm.fma.f64(double %71, double %75, double\l... 0x3FD99999998EF7B6)\l  %77 = tail call double @llvm.fma.f64(double %71, double %76, double\l... 0x3FE5555555555780)\l  %78 = tail call double @llvm.amdgcn.ldexp.f64(double %68, i32 1)\l  %79 = tail call double @llvm.amdgcn.ldexp.f64(double %70, i32 1)\l  %80 = fmul double %68, %71\l  %81 = fmul double %80, %77\l  %82 = fadd double %78, %81\l  %83 = fsub double %82, %78\l  %84 = fsub double %81, %83\l  %85 = fadd double %79, %84\l  %86 = fadd double %82, %85\l  %87 = fsub double %86, %82\l  %88 = fsub double %85, %87\l  %89 = sitofp i32 %43 to double\l  %90 = fmul double %89, 0x3FE62E42FEFA39EF\l  %91 = fneg double %90\l  %92 = tail call double @llvm.fma.f64(double %89, double 0x3FE62E42FEFA39EF,\l... double %91)\l  %93 = tail call double @llvm.fma.f64(double %89, double 0x3C7ABC9E3B39803F,\l... double %92)\l  %94 = fadd double %90, %93\l  %95 = fsub double %94, %90\l  %96 = fsub double %93, %95\l  %97 = fadd double %94, %86\l  %98 = fsub double %97, %94\l  %99 = fsub double %97, %98\l  %100 = fsub double %94, %99\l  %101 = fsub double %86, %98\l  %102 = fadd double %101, %100\l  %103 = fadd double %96, %88\l  %104 = fsub double %103, %96\l  %105 = fsub double %103, %104\l  %106 = fsub double %96, %105\l  %107 = fsub double %88, %104\l  %108 = fadd double %107, %106\l  %109 = fadd double %103, %102\l  %110 = fadd double %97, %109\l  %111 = fsub double %110, %97\l  %112 = fsub double %109, %111\l  %113 = fadd double %108, %112\l  %114 = fadd double %110, %113\l  %115 = tail call double @llvm.fabs.f64(double %37) #3\l  %116 = fcmp oeq double %115, 0x7FF0000000000000\l  %117 = select i1 %116, double %37, double %114\l  %118 = fcmp olt double %37, 0.000000e+00\l  %119 = select i1 %118, double 0x7FF8000000000000, double %117\l  %120 = fcmp oeq double %37, 0.000000e+00\l  %121 = select i1 %120, double 0xFFF0000000000000, double %119\l  %122 = fptrunc double %121 to float\l  store float %122, float addrspace(1)* %28, align 4, !tbaa !7\l  %123 = add nuw i32 %24, 1\l  %124 = icmp eq i32 %123, %4\l  br i1 %124, label %243, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5cc62e0:s0 -> Node0x5cc5fe0;
	Node0x5cc62e0:s1 -> Node0x5cc62e0;
	Node0x5cc6290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d8564670",label="{%125:\l125:                                              \l  %126 = phi i32 [ %241, %125 ], [ 0, %19 ]\l  %127 = mul i32 %126, %5\l  %128 = add i32 %127, %15\l  %129 = zext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7\l  %132 = fpext float %131 to double\l  %133 = fadd contract double %132, 1.000000e+00\l  %134 = zext i32 %126 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %2, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !7\l  %137 = fpext float %136 to double\l  %138 = fsub contract double %137, %20\l  %139 = fdiv contract double %133, %138\l  %140 = tail call double @llvm.amdgcn.frexp.mant.f64(double %139)\l  %141 = fcmp olt double %140, 0x3FE5555555555555\l  %142 = zext i1 %141 to i32\l  %143 = tail call double @llvm.amdgcn.ldexp.f64(double %140, i32 %142)\l  %144 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %139)\l  %145 = sub nsw i32 %144, %142\l  %146 = fadd double %143, -1.000000e+00\l  %147 = fadd double %143, 1.000000e+00\l  %148 = fadd double %147, -1.000000e+00\l  %149 = fsub double %143, %148\l  %150 = tail call double @llvm.amdgcn.rcp.f64(double %147)\l  %151 = fneg double %147\l  %152 = tail call double @llvm.fma.f64(double %151, double %150, double\l... 1.000000e+00)\l  %153 = tail call double @llvm.fma.f64(double %152, double %150, double %150)\l  %154 = tail call double @llvm.fma.f64(double %151, double %153, double\l... 1.000000e+00)\l  %155 = tail call double @llvm.fma.f64(double %154, double %153, double %153)\l  %156 = fmul double %146, %155\l  %157 = fmul double %147, %156\l  %158 = fneg double %157\l  %159 = tail call double @llvm.fma.f64(double %156, double %147, double %158)\l  %160 = tail call double @llvm.fma.f64(double %156, double %149, double %159)\l  %161 = fadd double %157, %160\l  %162 = fsub double %161, %157\l  %163 = fsub double %160, %162\l  %164 = fsub double %146, %161\l  %165 = fsub double %146, %164\l  %166 = fsub double %165, %161\l  %167 = fsub double %166, %163\l  %168 = fadd double %164, %167\l  %169 = fmul double %155, %168\l  %170 = fadd double %156, %169\l  %171 = fsub double %170, %156\l  %172 = fsub double %169, %171\l  %173 = fmul double %170, %170\l  %174 = tail call double @llvm.fma.f64(double %173, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %175 = tail call double @llvm.fma.f64(double %173, double %174, double\l... 0x3FC7474DD7F4DF2E)\l  %176 = tail call double @llvm.fma.f64(double %173, double %175, double\l... 0x3FCC71C016291751)\l  %177 = tail call double @llvm.fma.f64(double %173, double %176, double\l... 0x3FD249249B27ACF1)\l  %178 = tail call double @llvm.fma.f64(double %173, double %177, double\l... 0x3FD99999998EF7B6)\l  %179 = tail call double @llvm.fma.f64(double %173, double %178, double\l... 0x3FE5555555555780)\l  %180 = tail call double @llvm.amdgcn.ldexp.f64(double %170, i32 1)\l  %181 = tail call double @llvm.amdgcn.ldexp.f64(double %172, i32 1)\l  %182 = fmul double %170, %173\l  %183 = fmul double %182, %179\l  %184 = fadd double %180, %183\l  %185 = fsub double %184, %180\l  %186 = fsub double %183, %185\l  %187 = fadd double %181, %186\l  %188 = fadd double %184, %187\l  %189 = fsub double %188, %184\l  %190 = fsub double %187, %189\l  %191 = sitofp i32 %145 to double\l  %192 = fmul double %191, 0x3FE62E42FEFA39EF\l  %193 = fneg double %192\l  %194 = tail call double @llvm.fma.f64(double %191, double\l... 0x3FE62E42FEFA39EF, double %193)\l  %195 = tail call double @llvm.fma.f64(double %191, double\l... 0x3C7ABC9E3B39803F, double %194)\l  %196 = fadd double %192, %195\l  %197 = fsub double %196, %192\l  %198 = fsub double %195, %197\l  %199 = fadd double %196, %188\l  %200 = fsub double %199, %196\l  %201 = fsub double %199, %200\l  %202 = fsub double %196, %201\l  %203 = fsub double %188, %200\l  %204 = fadd double %203, %202\l  %205 = fadd double %198, %190\l  %206 = fsub double %205, %198\l  %207 = fsub double %205, %206\l  %208 = fsub double %198, %207\l  %209 = fsub double %190, %206\l  %210 = fadd double %209, %208\l  %211 = fadd double %205, %204\l  %212 = fadd double %199, %211\l  %213 = fsub double %212, %199\l  %214 = fsub double %211, %213\l  %215 = fadd double %210, %214\l  %216 = fadd double %212, %215\l  %217 = tail call double @llvm.fabs.f64(double %139) #3\l  %218 = fcmp oeq double %217, 0x7FF0000000000000\l  %219 = select i1 %218, double %139, double %216\l  %220 = fcmp olt double %139, 0.000000e+00\l  %221 = select i1 %220, double 0x7FF8000000000000, double %219\l  %222 = fcmp oeq double %139, 0.000000e+00\l  %223 = select i1 %222, double 0xFFF0000000000000, double %221\l  %224 = fptrunc double %223 to float\l  store float %224, float addrspace(1)* %130, align 4, !tbaa !7\l  %225 = getelementptr inbounds float, float addrspace(1)* %1, i64 %134\l  %226 = load float, float addrspace(1)* %225, align 4, !tbaa !7\l  %227 = fdiv contract float %226, %22\l  %228 = tail call i1 @llvm.amdgcn.class.f32(float %227, i32 144)\l  %229 = select i1 %228, float 0x41F0000000000000, float 1.000000e+00\l  %230 = fmul float %227, %229\l  %231 = tail call float @llvm.log2.f32(float %230)\l  %232 = fmul float %231, 0x3FE62E42E0000000\l  %233 = tail call i1 @llvm.amdgcn.class.f32(float %231, i32 519)\l  %234 = fneg float %232\l  %235 = tail call float @llvm.fma.f32(float %231, float 0x3FE62E42E0000000,\l... float %234)\l  %236 = tail call float @llvm.fma.f32(float %231, float 0x3E6EFA39E0000000,\l... float %235)\l  %237 = fadd float %232, %236\l  %238 = select i1 %233, float %231, float %237\l  %239 = select i1 %228, float 0x40362E4300000000, float 0.000000e+00\l  %240 = fsub float %238, %239\l  store float %240, float addrspace(1)* %225, align 4, !tbaa !7\l  %241 = add nuw i32 %126, 1\l  %242 = icmp eq i32 %241, %4\l  br i1 %242, label %243, label %125, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5cc6290:s0 -> Node0x5cc5fe0;
	Node0x5cc6290:s1 -> Node0x5cc6290;
	Node0x5cc5fe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%243:\l243:                                              \l  ret void\l}"];
}
