digraph "CFG for '_Z7paddingPiS_iiiiii' function" {
	label="CFG for '_Z7paddingPiS_iiiiii' function";

	Node0x4aadcb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 16\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 8, !tbaa !4\l  %14 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 2, !range !13, !invariant.load\l... !14\l  %17 = zext i16 %16 to i32\l  %18 = udiv i32 %13, %17\l  %19 = mul i32 %18, %17\l  %20 = icmp ugt i32 %13, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %25 = getelementptr inbounds i8, i8 addrspace(4)* %10, i64 12\l  %26 = bitcast i8 addrspace(4)* %25 to i32 addrspace(4)*\l  %27 = load i32, i32 addrspace(4)* %26, align 4, !tbaa !15\l  %28 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 4, !range !13, !invariant.load\l... !14\l  %31 = zext i16 %30 to i32\l  %32 = udiv i32 %27, %31\l  %33 = mul i32 %32, %31\l  %34 = icmp ugt i32 %27, %33\l  %35 = zext i1 %34 to i32\l  %36 = add i32 %32, %35\l  %37 = mul i32 %36, %24\l  %38 = add i32 %37, %9\l  %39 = mul i32 %38, %22\l  %40 = add i32 %39, %23\l  %41 = mul i32 %40, %31\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %43 = add i32 %41, %42\l  %44 = mul i32 %5, %4\l  %45 = mul i32 %44, %3\l  %46 = freeze i32 %43\l  %47 = freeze i32 %45\l  %48 = udiv i32 %46, %47\l  %49 = mul i32 %48, %47\l  %50 = sub i32 %46, %49\l  %51 = freeze i32 %44\l  %52 = udiv i32 %50, %51\l  %53 = mul i32 %52, %51\l  %54 = sub i32 %50, %53\l  %55 = freeze i32 %54\l  %56 = freeze i32 %5\l  %57 = udiv i32 %55, %56\l  %58 = mul i32 %57, %56\l  %59 = sub i32 %55, %58\l  %60 = mul nsw i32 %48, %3\l  %61 = mul i32 %44, %60\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %62\l  %64 = mul i32 %44, %52\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %63, i64 %65\l  %67 = mul nsw i32 %57, %5\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds i32, i32 addrspace(1)* %66, i64 %68\l  %70 = sext i32 %59 to i64\l  %71 = getelementptr inbounds i32, i32 addrspace(1)* %69, i64 %70\l  %72 = load i32, i32 addrspace(1)* %71, align 4, !tbaa !17, !amdgpu.noclobber\l... !14\l  %73 = shl nsw i32 %6, 1\l  %74 = add nsw i32 %73, %4\l  %75 = shl nsw i32 %7, 1\l  %76 = add nsw i32 %75, %5\l  %77 = mul i32 %76, %74\l  %78 = mul i32 %77, %60\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %79\l  %81 = mul i32 %77, %52\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds i32, i32 addrspace(1)* %80, i64 %82\l  %84 = add nsw i32 %57, %6\l  %85 = mul nsw i32 %84, %76\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds i32, i32 addrspace(1)* %83, i64 %86\l  %88 = add nsw i32 %59, %7\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds i32, i32 addrspace(1)* %87, i64 %89\l  store i32 %72, i32 addrspace(1)* %90, align 4, !tbaa !17\l  ret void\l}"];
}
