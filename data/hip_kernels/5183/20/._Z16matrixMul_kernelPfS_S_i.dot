digraph "CFG for '_Z16matrixMul_kernelPfS_S_i' function" {
	label="CFG for '_Z16matrixMul_kernelPfS_S_i' function";

	Node0x4afbbb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp slt i32 %13, %3\l  %23 = icmp slt i32 %21, %3\l  %24 = select i1 %22, i1 %23, i1 false\l  %25 = icmp sgt i32 %3, 0\l  %26 = and i1 %24, %25\l  %27 = mul nsw i32 %13, %3\l  br i1 %26, label %28, label %158\l|{<s0>T|<s1>F}}"];
	Node0x4afbbb0:s0 -> Node0x4aff830;
	Node0x4afbbb0:s1 -> Node0x4aff8c0;
	Node0x4aff830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = and i32 %3, 7\l  %30 = icmp ult i32 %3, 8\l  br i1 %30, label %135, label %31\l|{<s0>T|<s1>F}}"];
	Node0x4aff830:s0 -> Node0x4affb80;
	Node0x4aff830:s1 -> Node0x4affbd0;
	Node0x4affbd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %3, -8\l  br label %33\l}"];
	Node0x4affbd0 -> Node0x4afdd20;
	Node0x4afdd20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%33:\l33:                                               \l  %34 = phi i32 [ 0, %31 ], [ %132, %33 ]\l  %35 = phi float [ 0.000000e+00, %31 ], [ %131, %33 ]\l  %36 = phi i32 [ 0, %31 ], [ %133, %33 ]\l  %37 = add nsw i32 %34, %27\l  %38 = sext i32 %37 to i64\l  %39 = getelementptr inbounds float, float addrspace(1)* %0, i64 %38\l  %40 = load float, float addrspace(1)* %39, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %41 = mul nsw i32 %34, %3\l  %42 = add nsw i32 %41, %21\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %1, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %46 = fmul contract float %40, %45\l  %47 = fadd contract float %35, %46\l  %48 = or i32 %34, 1\l  %49 = add nsw i32 %48, %27\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = mul nsw i32 %48, %3\l  %54 = add nsw i32 %53, %21\l  %55 = sext i32 %54 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %1, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = fmul contract float %52, %57\l  %59 = fadd contract float %47, %58\l  %60 = or i32 %34, 2\l  %61 = add nsw i32 %60, %27\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %0, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = mul nsw i32 %60, %3\l  %66 = add nsw i32 %65, %21\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = fmul contract float %64, %69\l  %71 = fadd contract float %59, %70\l  %72 = or i32 %34, 3\l  %73 = add nsw i32 %72, %27\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %77 = mul nsw i32 %72, %3\l  %78 = add nsw i32 %77, %21\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = fmul contract float %76, %81\l  %83 = fadd contract float %71, %82\l  %84 = or i32 %34, 4\l  %85 = add nsw i32 %84, %27\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = mul nsw i32 %84, %3\l  %90 = add nsw i32 %89, %21\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = fmul contract float %88, %93\l  %95 = fadd contract float %83, %94\l  %96 = or i32 %34, 5\l  %97 = add nsw i32 %96, %27\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %0, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %101 = mul nsw i32 %96, %3\l  %102 = add nsw i32 %101, %21\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %1, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %100, %105\l  %107 = fadd contract float %95, %106\l  %108 = or i32 %34, 6\l  %109 = add nsw i32 %108, %27\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = mul nsw i32 %108, %3\l  %114 = add nsw i32 %113, %21\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fmul contract float %112, %117\l  %119 = fadd contract float %107, %118\l  %120 = or i32 %34, 7\l  %121 = add nsw i32 %120, %27\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %0, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %125 = mul nsw i32 %120, %3\l  %126 = add nsw i32 %125, %21\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %1, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = fmul contract float %124, %129\l  %131 = fadd contract float %119, %130\l  %132 = add nuw nsw i32 %34, 8\l  %133 = add i32 %36, 8\l  %134 = icmp eq i32 %133, %32\l  br i1 %134, label %135, label %33, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4afdd20:s0 -> Node0x4affb80;
	Node0x4afdd20:s1 -> Node0x4afdd20;
	Node0x4affb80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%135:\l135:                                              \l  %136 = phi float [ undef, %28 ], [ %131, %33 ]\l  %137 = phi i32 [ 0, %28 ], [ %132, %33 ]\l  %138 = phi float [ 0.000000e+00, %28 ], [ %131, %33 ]\l  %139 = icmp eq i32 %29, 0\l  br i1 %139, label %158, label %140\l|{<s0>T|<s1>F}}"];
	Node0x4affb80:s0 -> Node0x4aff8c0;
	Node0x4affb80:s1 -> Node0x4b05bd0;
	Node0x4b05bd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%140:\l140:                                              \l  %141 = phi i32 [ %155, %140 ], [ %137, %135 ]\l  %142 = phi float [ %154, %140 ], [ %138, %135 ]\l  %143 = phi i32 [ %156, %140 ], [ 0, %135 ]\l  %144 = add nsw i32 %141, %27\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %148 = mul nsw i32 %141, %3\l  %149 = add nsw i32 %148, %21\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %1, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %153 = fmul contract float %147, %152\l  %154 = fadd contract float %142, %153\l  %155 = add nuw nsw i32 %141, 1\l  %156 = add i32 %143, 1\l  %157 = icmp eq i32 %156, %29\l  br i1 %157, label %158, label %140, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b05bd0:s0 -> Node0x4aff8c0;
	Node0x4b05bd0:s1 -> Node0x4b05bd0;
	Node0x4aff8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%158:\l158:                                              \l  %159 = phi float [ 0.000000e+00, %4 ], [ %136, %135 ], [ %154, %140 ]\l  %160 = add nsw i32 %27, %21\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %2, i64 %161\l  store float %159, float addrspace(1)* %162, align 4, !tbaa !7\l  ret void\l}"];
}
