digraph "CFG for '_Z12transposeRowPfS_ii' function" {
	label="CFG for '_Z12transposeRowPfS_ii' function";

	Node0x537c6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %22 = add i32 %20, %21\l  %23 = udiv i32 %13, %10\l  %24 = mul i32 %23, %10\l  %25 = icmp ugt i32 %13, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %22\l  %29 = add i32 %28, %6\l  %30 = mul i32 %29, %10\l  %31 = add i32 %30, %14\l  %32 = icmp ult i32 %31, %3\l  br i1 %32, label %33, label %119\l|{<s0>T|<s1>F}}"];
	Node0x537c6c0:s0 -> Node0x537e990;
	Node0x537c6c0:s1 -> Node0x537ea20;
	Node0x537e990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%33:\l33:                                               \l  %34 = mul i32 %31, %2\l  %35 = add nuw i32 %31, 1\l  %36 = mul i32 %35, %2\l  %37 = icmp slt i32 %34, %36\l  br i1 %37, label %38, label %119\l|{<s0>T|<s1>F}}"];
	Node0x537e990:s0 -> Node0x5380c10;
	Node0x537e990:s1 -> Node0x537ea20;
	Node0x5380c10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%38:\l38:                                               \l  %39 = add i32 %2, -1\l  %40 = and i32 %2, 7\l  %41 = icmp eq i32 %40, 0\l  br i1 %41, label %55, label %42\l|{<s0>T|<s1>F}}"];
	Node0x5380c10:s0 -> Node0x5380f50;
	Node0x5380c10:s1 -> Node0x5380fa0;
	Node0x5380fa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ %52, %42 ], [ %34, %38 ]\l  %44 = phi i32 [ %51, %42 ], [ %31, %38 ]\l  %45 = phi i32 [ %53, %42 ], [ 0, %38 ]\l  %46 = sext i32 %43 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !16\l  %49 = sext i32 %44 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  store float %48, float addrspace(1)* %50, align 4, !tbaa !16\l  %51 = add nsw i32 %44, %2\l  %52 = add nsw i32 %43, 1\l  %53 = add i32 %45, 1\l  %54 = icmp eq i32 %53, %40\l  br i1 %54, label %55, label %42, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5380fa0:s0 -> Node0x5380f50;
	Node0x5380fa0:s1 -> Node0x5380fa0;
	Node0x5380f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%55:\l55:                                               \l  %56 = phi i32 [ %34, %38 ], [ %52, %42 ]\l  %57 = phi i32 [ %31, %38 ], [ %51, %42 ]\l  %58 = icmp ult i32 %39, 7\l  br i1 %58, label %119, label %59\l|{<s0>T|<s1>F}}"];
	Node0x5380f50:s0 -> Node0x537ea20;
	Node0x5380f50:s1 -> Node0x5382400;
	Node0x5382400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%59:\l59:                                               \l  %60 = phi i32 [ %117, %59 ], [ %56, %55 ]\l  %61 = phi i32 [ %116, %59 ], [ %57, %55 ]\l  %62 = sext i32 %60 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %1, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !16\l  %65 = sext i32 %61 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  store float %64, float addrspace(1)* %66, align 4, !tbaa !16\l  %67 = add nsw i32 %61, %2\l  %68 = add nsw i32 %60, 1\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %1, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !16\l  %72 = sext i32 %67 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  store float %71, float addrspace(1)* %73, align 4, !tbaa !16\l  %74 = add nsw i32 %67, %2\l  %75 = add nsw i32 %60, 2\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16\l  %79 = sext i32 %74 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  store float %78, float addrspace(1)* %80, align 4, !tbaa !16\l  %81 = add nsw i32 %74, %2\l  %82 = add nsw i32 %60, 3\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %1, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16\l  %86 = sext i32 %81 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  store float %85, float addrspace(1)* %87, align 4, !tbaa !16\l  %88 = add nsw i32 %81, %2\l  %89 = add nsw i32 %60, 4\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16\l  %93 = sext i32 %88 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  store float %92, float addrspace(1)* %94, align 4, !tbaa !16\l  %95 = add nsw i32 %88, %2\l  %96 = add nsw i32 %60, 5\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %1, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16\l  %100 = sext i32 %95 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100\l  store float %99, float addrspace(1)* %101, align 4, !tbaa !16\l  %102 = add nsw i32 %95, %2\l  %103 = add nsw i32 %60, 6\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !16\l  %107 = sext i32 %102 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  store float %106, float addrspace(1)* %108, align 4, !tbaa !16\l  %109 = add nsw i32 %102, %2\l  %110 = add nsw i32 %60, 7\l  %111 = sext i32 %110 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !16\l  %114 = sext i32 %109 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %0, i64 %114\l  store float %113, float addrspace(1)* %115, align 4, !tbaa !16\l  %116 = add nsw i32 %109, %2\l  %117 = add nsw i32 %60, 8\l  %118 = icmp eq i32 %117, %36\l  br i1 %118, label %119, label %59, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5382400:s0 -> Node0x537ea20;
	Node0x5382400:s1 -> Node0x5382400;
	Node0x537ea20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%119:\l119:                                              \l  ret void\l}"];
}
