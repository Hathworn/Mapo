digraph "CFG for '_Z37RecurrentWeightsRTRLDerivativesKernelPfS_S_S_S_' function" {
	label="CFG for '_Z37RecurrentWeightsRTRLDerivativesKernelPfS_S_S_S_' function";

	Node0x5489040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12\l  %12 = bitcast i8 addrspace(4)* %11 to i32 addrspace(4)*\l  %13 = load i32, i32 addrspace(4)* %12, align 4, !tbaa !6\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = udiv i32 %13, %10\l  %17 = mul i32 %16, %10\l  %18 = icmp ugt i32 %13, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %15\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %14\l  %24 = mul i32 %23, %10\l  %25 = add i32 %24, %22\l  %26 = load i32, i32 addrspace(4)* @D_HIDDEN_UNITS, align 4, !tbaa !16\l  %27 = mul nsw i32 %26, %26\l  %28 = mul nsw i32 %27, %26\l  %29 = icmp slt i32 %25, %28\l  br i1 %29, label %30, label %187\l|{<s0>T|<s1>F}}"];
	Node0x5489040:s0 -> Node0x548b4d0;
	Node0x5489040:s1 -> Node0x548b560;
	Node0x548b4d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%30:\l30:                                               \l  %31 = freeze i32 %25\l  %32 = freeze i32 %27\l  %33 = sdiv i32 %31, %32\l  %34 = mul i32 %33, %32\l  %35 = sub i32 %31, %34\l  %36 = freeze i32 %26\l  %37 = sdiv i32 %35, %36\l  %38 = mul i32 %37, %36\l  %39 = sub i32 %35, %38\l  %40 = icmp sgt i32 %26, 0\l  br i1 %40, label %41, label %70\l|{<s0>T|<s1>F}}"];
	Node0x548b4d0:s0 -> Node0x548bcf0;
	Node0x548b4d0:s1 -> Node0x548bd40;
	Node0x548bcf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%41:\l41:                                               \l  %42 = mul nsw i32 %33, %26\l  %43 = and i32 %26, 7\l  %44 = icmp ult i32 %26, 8\l  br i1 %44, label %47, label %45\l|{<s0>T|<s1>F}}"];
	Node0x548bcf0:s0 -> Node0x548c060;
	Node0x548bcf0:s1 -> Node0x548c0b0;
	Node0x548c0b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%45:\l45:                                               \l  %46 = and i32 %26, -8\l  br label %85\l}"];
	Node0x548c0b0 -> Node0x548c2b0;
	Node0x548c060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%47:\l47:                                               \l  %48 = phi float [ undef, %41 ], [ %183, %85 ]\l  %49 = phi i32 [ 0, %41 ], [ %184, %85 ]\l  %50 = phi float [ 0.000000e+00, %41 ], [ %183, %85 ]\l  %51 = icmp eq i32 %43, 0\l  br i1 %51, label %70, label %52\l|{<s0>T|<s1>F}}"];
	Node0x548c060:s0 -> Node0x548bd40;
	Node0x548c060:s1 -> Node0x548d520;
	Node0x548d520 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%52:\l52:                                               \l  %53 = phi i32 [ %67, %52 ], [ %49, %47 ]\l  %54 = phi float [ %66, %52 ], [ %50, %47 ]\l  %55 = phi i32 [ %68, %52 ], [ 0, %47 ]\l  %56 = add nsw i32 %53, %42\l  %57 = sext i32 %56 to i64\l  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 %57\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %60 = mul nsw i32 %53, %27\l  %61 = add nsw i32 %60, %35\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %4, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %65 = fmul contract float %59, %64\l  %66 = fadd contract float %54, %65\l  %67 = add nuw nsw i32 %53, 1\l  %68 = add i32 %55, 1\l  %69 = icmp eq i32 %68, %43\l  br i1 %69, label %70, label %52, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x548d520:s0 -> Node0x548bd40;
	Node0x548d520:s1 -> Node0x548d520;
	Node0x548bd40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%70:\l70:                                               \l  %71 = phi float [ 0.000000e+00, %30 ], [ %48, %47 ], [ %66, %52 ]\l  %72 = sext i32 %33 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %75 = icmp eq i32 %33, %37\l  %76 = uitofp i1 %75 to float\l  %77 = sext i32 %39 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %80 = fmul contract float %79, %76\l  %81 = fadd contract float %71, %80\l  %82 = fmul contract float %74, %81\l  %83 = sext i32 %25 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %3, i64 %83\l  store float %82, float addrspace(1)* %84, align 4, !tbaa !20\l  br label %187\l}"];
	Node0x548bd40 -> Node0x548b560;
	Node0x548c2b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%85:\l85:                                               \l  %86 = phi i32 [ 0, %45 ], [ %184, %85 ]\l  %87 = phi float [ 0.000000e+00, %45 ], [ %183, %85 ]\l  %88 = phi i32 [ 0, %45 ], [ %185, %85 ]\l  %89 = add nsw i32 %86, %42\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %93 = mul nsw i32 %86, %27\l  %94 = add nsw i32 %93, %35\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %4, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %98 = fmul contract float %92, %97\l  %99 = fadd contract float %87, %98\l  %100 = or i32 %86, 1\l  %101 = add nsw i32 %100, %42\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %2, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %105 = mul nsw i32 %100, %27\l  %106 = add nsw i32 %105, %35\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %4, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %110 = fmul contract float %104, %109\l  %111 = fadd contract float %99, %110\l  %112 = or i32 %86, 2\l  %113 = add nsw i32 %112, %42\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %2, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %117 = mul nsw i32 %112, %27\l  %118 = add nsw i32 %117, %35\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %4, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %122 = fmul contract float %116, %121\l  %123 = fadd contract float %111, %122\l  %124 = or i32 %86, 3\l  %125 = add nsw i32 %124, %42\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %2, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %129 = mul nsw i32 %124, %27\l  %130 = add nsw i32 %129, %35\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %4, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %134 = fmul contract float %128, %133\l  %135 = fadd contract float %123, %134\l  %136 = or i32 %86, 4\l  %137 = add nsw i32 %136, %42\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %2, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %141 = mul nsw i32 %136, %27\l  %142 = add nsw i32 %141, %35\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %4, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %146 = fmul contract float %140, %145\l  %147 = fadd contract float %135, %146\l  %148 = or i32 %86, 5\l  %149 = add nsw i32 %148, %42\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %2, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %153 = mul nsw i32 %148, %27\l  %154 = add nsw i32 %153, %35\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %4, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %158 = fmul contract float %152, %157\l  %159 = fadd contract float %147, %158\l  %160 = or i32 %86, 6\l  %161 = add nsw i32 %160, %42\l  %162 = sext i32 %161 to i64\l  %163 = getelementptr inbounds float, float addrspace(1)* %2, i64 %162\l  %164 = load float, float addrspace(1)* %163, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %165 = mul nsw i32 %160, %27\l  %166 = add nsw i32 %165, %35\l  %167 = sext i32 %166 to i64\l  %168 = getelementptr inbounds float, float addrspace(1)* %4, i64 %167\l  %169 = load float, float addrspace(1)* %168, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %170 = fmul contract float %164, %169\l  %171 = fadd contract float %159, %170\l  %172 = or i32 %86, 7\l  %173 = add nsw i32 %172, %42\l  %174 = sext i32 %173 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %2, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %177 = mul nsw i32 %172, %27\l  %178 = add nsw i32 %177, %35\l  %179 = sext i32 %178 to i64\l  %180 = getelementptr inbounds float, float addrspace(1)* %4, i64 %179\l  %181 = load float, float addrspace(1)* %180, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %182 = fmul contract float %176, %181\l  %183 = fadd contract float %171, %182\l  %184 = add nuw nsw i32 %86, 8\l  %185 = add i32 %88, 8\l  %186 = icmp eq i32 %185, %46\l  br i1 %186, label %47, label %85, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x548c2b0:s0 -> Node0x548c060;
	Node0x548c2b0:s1 -> Node0x548c2b0;
	Node0x548b560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%187:\l187:                                              \l  ret void\l}"];
}
