digraph "CFG for '_Z25GoniometricFunctionKernelPfS_ii' function" {
	label="CFG for '_Z25GoniometricFunctionKernelPfS_ii' function";

	Node0x5f9c430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = udiv i32 %12, %9\l  %16 = mul i32 %15, %9\l  %17 = icmp ugt i32 %12, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %14\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %22 = add i32 %20, %13\l  %23 = mul i32 %22, %9\l  %24 = add i32 %23, %21\l  %25 = icmp slt i32 %24, %2\l  br i1 %25, label %26, label %838\l|{<s0>T|<s1>F}}"];
	Node0x5f9c430:s0 -> Node0x5f9ecc0;
	Node0x5f9c430:s1 -> Node0x5f9ed50;
	Node0x5f9ecc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%26:\l26:                                               \l  switch i32 %3, label %838 [\l    i32 0, label %27\l    i32 1, label %173\l    i32 2, label %315\l    i32 3, label %465\l    i32 4, label %499\l    i32 5, label %623\l    i32 6, label %744\l    i32 7, label %767\l    i32 10, label %791\l  ]\l|{<s0>def|<s1>0|<s2>1|<s3>2|<s4>3|<s5>4|<s6>5|<s7>6|<s8>7|<s9>10}}"];
	Node0x5f9ecc0:s0 -> Node0x5f9ed50;
	Node0x5f9ecc0:s1 -> Node0x5f9ee90;
	Node0x5f9ecc0:s2 -> Node0x5f9ef10;
	Node0x5f9ecc0:s3 -> Node0x5f9efd0;
	Node0x5f9ecc0:s4 -> Node0x5f9f090;
	Node0x5f9ecc0:s5 -> Node0x5f9f150;
	Node0x5f9ecc0:s6 -> Node0x5f9f210;
	Node0x5f9ecc0:s7 -> Node0x5f9f2d0;
	Node0x5f9ecc0:s8 -> Node0x5f9f390;
	Node0x5f9ecc0:s9 -> Node0x5f9f450;
	Node0x5f9ee90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%27:\l27:                                               \l  %28 = sext i32 %24 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %0, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %31 = tail call float @llvm.fabs.f32(float %30)\l  %32 = fcmp olt float %31, 1.310720e+05\l  br i1 %32, label %33, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5f9ee90:s0 -> Node0x5f9e430;
	Node0x5f9ee90:s1 -> Node0x5f9e4c0;
	Node0x5f9e430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = fmul float %31, 0x3FE45F3060000000\l  %35 = tail call float @llvm.rint.f32(float %34)\l  %36 = tail call float @llvm.fma.f32(float %35, float 0xBFF921FB40000000,\l... float %31)\l  %37 = tail call float @llvm.fma.f32(float %35, float 0xBE74442D00000000,\l... float %36)\l  %38 = tail call float @llvm.fma.f32(float %35, float 0xBCF8469880000000,\l... float %37)\l  %39 = fptosi float %35 to i32\l  %40 = bitcast float %31 to i32\l  br label %147\l}"];
	Node0x5f9e430 -> Node0x5fa19e0;
	Node0x5f9e4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%41:\l41:                                               \l  %42 = bitcast float %31 to i32\l  %43 = lshr i32 %42, 23\l  %44 = and i32 %42, 8388607\l  %45 = or i32 %44, 8388608\l  %46 = zext i32 %45 to i64\l  %47 = mul nuw nsw i64 %46, 4266746795\l  %48 = trunc i64 %47 to i32\l  %49 = lshr i64 %47, 32\l  %50 = mul nuw nsw i64 %46, 1011060801\l  %51 = add nuw nsw i64 %49, %50\l  %52 = trunc i64 %51 to i32\l  %53 = lshr i64 %51, 32\l  %54 = mul nuw nsw i64 %46, 3680671129\l  %55 = add nuw nsw i64 %53, %54\l  %56 = trunc i64 %55 to i32\l  %57 = lshr i64 %55, 32\l  %58 = mul nuw nsw i64 %46, 4113882560\l  %59 = add nuw nsw i64 %57, %58\l  %60 = trunc i64 %59 to i32\l  %61 = lshr i64 %59, 32\l  %62 = mul nuw nsw i64 %46, 4230436817\l  %63 = add nuw nsw i64 %61, %62\l  %64 = trunc i64 %63 to i32\l  %65 = lshr i64 %63, 32\l  %66 = mul nuw nsw i64 %46, 1313084713\l  %67 = add nuw nsw i64 %65, %66\l  %68 = trunc i64 %67 to i32\l  %69 = lshr i64 %67, 32\l  %70 = mul nuw nsw i64 %46, 2734261102\l  %71 = add nuw nsw i64 %69, %70\l  %72 = trunc i64 %71 to i32\l  %73 = lshr i64 %71, 32\l  %74 = trunc i64 %73 to i32\l  %75 = add nsw i32 %43, -120\l  %76 = icmp ugt i32 %75, 63\l  %77 = select i1 %76, i32 %68, i32 %74\l  %78 = select i1 %76, i32 %64, i32 %72\l  %79 = select i1 %76, i32 %60, i32 %68\l  %80 = select i1 %76, i32 %56, i32 %64\l  %81 = select i1 %76, i32 %52, i32 %60\l  %82 = select i1 %76, i32 %48, i32 %56\l  %83 = select i1 %76, i32 -64, i32 0\l  %84 = add nsw i32 %83, %75\l  %85 = icmp ugt i32 %84, 31\l  %86 = select i1 %85, i32 %78, i32 %77\l  %87 = select i1 %85, i32 %79, i32 %78\l  %88 = select i1 %85, i32 %80, i32 %79\l  %89 = select i1 %85, i32 %81, i32 %80\l  %90 = select i1 %85, i32 %82, i32 %81\l  %91 = select i1 %85, i32 -32, i32 0\l  %92 = add nsw i32 %91, %84\l  %93 = icmp ugt i32 %92, 31\l  %94 = select i1 %93, i32 %87, i32 %86\l  %95 = select i1 %93, i32 %88, i32 %87\l  %96 = select i1 %93, i32 %89, i32 %88\l  %97 = select i1 %93, i32 %90, i32 %89\l  %98 = select i1 %93, i32 -32, i32 0\l  %99 = add nsw i32 %98, %92\l  %100 = icmp eq i32 %99, 0\l  %101 = sub nsw i32 32, %99\l  %102 = tail call i32 @llvm.fshr.i32(i32 %94, i32 %95, i32 %101)\l  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %101)\l  %104 = tail call i32 @llvm.fshr.i32(i32 %96, i32 %97, i32 %101)\l  %105 = select i1 %100, i32 %94, i32 %102\l  %106 = select i1 %100, i32 %95, i32 %103\l  %107 = select i1 %100, i32 %96, i32 %104\l  %108 = lshr i32 %105, 29\l  %109 = tail call i32 @llvm.fshl.i32(i32 %105, i32 %106, i32 2)\l  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 2)\l  %111 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %97, i32 2)\l  %112 = and i32 %108, 1\l  %113 = sub nsw i32 0, %112\l  %114 = shl i32 %108, 31\l  %115 = xor i32 %109, %113\l  %116 = xor i32 %110, %113\l  %117 = xor i32 %111, %113\l  %118 = tail call i32 @llvm.ctlz.i32(i32 %115, i1 false), !range !20\l  %119 = sub nsw i32 31, %118\l  %120 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %116, i32 %119)\l  %121 = tail call i32 @llvm.fshr.i32(i32 %116, i32 %117, i32 %119)\l  %122 = shl nuw nsw i32 %118, 23\l  %123 = sub nuw nsw i32 1056964608, %122\l  %124 = lshr i32 %120, 9\l  %125 = or i32 %124, %123\l  %126 = or i32 %125, %114\l  %127 = bitcast i32 %126 to float\l  %128 = tail call i32 @llvm.fshl.i32(i32 %120, i32 %121, i32 23)\l  %129 = tail call i32 @llvm.ctlz.i32(i32 %128, i1 false), !range !20\l  %130 = fmul float %127, 0x3FF921FB40000000\l  %131 = add nuw nsw i32 %129, %118\l  %132 = shl nuw nsw i32 %131, 23\l  %133 = sub nuw nsw i32 855638016, %132\l  %134 = sub nsw i32 31, %129\l  %135 = tail call i32 @llvm.fshr.i32(i32 %128, i32 %121, i32 %134)\l  %136 = lshr i32 %135, 9\l  %137 = or i32 %133, %136\l  %138 = or i32 %137, %114\l  %139 = bitcast i32 %138 to float\l  %140 = fneg float %130\l  %141 = tail call float @llvm.fma.f32(float %127, float 0x3FF921FB40000000,\l... float %140)\l  %142 = tail call float @llvm.fma.f32(float %127, float 0x3E74442D00000000,\l... float %141)\l  %143 = tail call float @llvm.fma.f32(float %139, float 0x3FF921FB40000000,\l... float %142)\l  %144 = fadd float %130, %143\l  %145 = lshr i32 %105, 30\l  %146 = add nuw nsw i32 %112, %145\l  br label %147\l}"];
	Node0x5f9e4c0 -> Node0x5fa19e0;
	Node0x5fa19e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%147:\l147:                                              \l  %148 = phi i32 [ %40, %33 ], [ %42, %41 ]\l  %149 = phi float [ %38, %33 ], [ %144, %41 ]\l  %150 = phi i32 [ %39, %33 ], [ %146, %41 ]\l  %151 = fmul float %149, %149\l  %152 = tail call float @llvm.fmuladd.f32(float %151, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %153 = tail call float @llvm.fmuladd.f32(float %151, float %152, float\l... 0xBFC55553A0000000)\l  %154 = fmul float %151, %153\l  %155 = tail call float @llvm.fmuladd.f32(float %149, float %154, float %149)\l  %156 = tail call float @llvm.fmuladd.f32(float %151, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %157 = tail call float @llvm.fmuladd.f32(float %151, float %156, float\l... 0x3FA5557EE0000000)\l  %158 = tail call float @llvm.fmuladd.f32(float %151, float %157, float\l... 0xBFE0000080000000)\l  %159 = tail call float @llvm.fmuladd.f32(float %151, float %158, float\l... 1.000000e+00)\l  %160 = and i32 %150, 1\l  %161 = icmp eq i32 %160, 0\l  %162 = select i1 %161, float %155, float %159\l  %163 = bitcast float %162 to i32\l  %164 = shl i32 %150, 30\l  %165 = and i32 %164, -2147483648\l  %166 = bitcast float %30 to i32\l  %167 = xor i32 %148, %166\l  %168 = xor i32 %167, %165\l  %169 = xor i32 %168, %163\l  %170 = bitcast i32 %169 to float\l  %171 = tail call i1 @llvm.amdgcn.class.f32(float %31, i32 504)\l  %172 = select i1 %171, float %170, float 0x7FF8000000000000\l  br label %834\l}"];
	Node0x5fa19e0 -> Node0x5fa8dc0;
	Node0x5f9ef10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%173:\l173:                                              \l  %174 = sext i32 %24 to i64\l  %175 = getelementptr inbounds float, float addrspace(1)* %0, i64 %174\l  %176 = load float, float addrspace(1)* %175, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %177 = tail call float @llvm.fabs.f32(float %176)\l  %178 = fcmp olt float %177, 1.310720e+05\l  br i1 %178, label %179, label %186\l|{<s0>T|<s1>F}}"];
	Node0x5f9ef10:s0 -> Node0x5fa9840;
	Node0x5f9ef10:s1 -> Node0x5fa98d0;
	Node0x5fa9840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%179:\l179:                                              \l  %180 = fmul float %177, 0x3FE45F3060000000\l  %181 = tail call float @llvm.rint.f32(float %180)\l  %182 = tail call float @llvm.fma.f32(float %181, float 0xBFF921FB40000000,\l... float %177)\l  %183 = tail call float @llvm.fma.f32(float %181, float 0xBE74442D00000000,\l... float %182)\l  %184 = tail call float @llvm.fma.f32(float %181, float 0xBCF8469880000000,\l... float %183)\l  %185 = fptosi float %181 to i32\l  br label %292\l}"];
	Node0x5fa9840 -> Node0x5fa9f90;
	Node0x5fa98d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%186:\l186:                                              \l  %187 = bitcast float %177 to i32\l  %188 = lshr i32 %187, 23\l  %189 = and i32 %187, 8388607\l  %190 = or i32 %189, 8388608\l  %191 = zext i32 %190 to i64\l  %192 = mul nuw nsw i64 %191, 4266746795\l  %193 = trunc i64 %192 to i32\l  %194 = lshr i64 %192, 32\l  %195 = mul nuw nsw i64 %191, 1011060801\l  %196 = add nuw nsw i64 %194, %195\l  %197 = trunc i64 %196 to i32\l  %198 = lshr i64 %196, 32\l  %199 = mul nuw nsw i64 %191, 3680671129\l  %200 = add nuw nsw i64 %198, %199\l  %201 = trunc i64 %200 to i32\l  %202 = lshr i64 %200, 32\l  %203 = mul nuw nsw i64 %191, 4113882560\l  %204 = add nuw nsw i64 %202, %203\l  %205 = trunc i64 %204 to i32\l  %206 = lshr i64 %204, 32\l  %207 = mul nuw nsw i64 %191, 4230436817\l  %208 = add nuw nsw i64 %206, %207\l  %209 = trunc i64 %208 to i32\l  %210 = lshr i64 %208, 32\l  %211 = mul nuw nsw i64 %191, 1313084713\l  %212 = add nuw nsw i64 %210, %211\l  %213 = trunc i64 %212 to i32\l  %214 = lshr i64 %212, 32\l  %215 = mul nuw nsw i64 %191, 2734261102\l  %216 = add nuw nsw i64 %214, %215\l  %217 = trunc i64 %216 to i32\l  %218 = lshr i64 %216, 32\l  %219 = trunc i64 %218 to i32\l  %220 = add nsw i32 %188, -120\l  %221 = icmp ugt i32 %220, 63\l  %222 = select i1 %221, i32 %213, i32 %219\l  %223 = select i1 %221, i32 %209, i32 %217\l  %224 = select i1 %221, i32 %205, i32 %213\l  %225 = select i1 %221, i32 %201, i32 %209\l  %226 = select i1 %221, i32 %197, i32 %205\l  %227 = select i1 %221, i32 %193, i32 %201\l  %228 = select i1 %221, i32 -64, i32 0\l  %229 = add nsw i32 %228, %220\l  %230 = icmp ugt i32 %229, 31\l  %231 = select i1 %230, i32 %223, i32 %222\l  %232 = select i1 %230, i32 %224, i32 %223\l  %233 = select i1 %230, i32 %225, i32 %224\l  %234 = select i1 %230, i32 %226, i32 %225\l  %235 = select i1 %230, i32 %227, i32 %226\l  %236 = select i1 %230, i32 -32, i32 0\l  %237 = add nsw i32 %236, %229\l  %238 = icmp ugt i32 %237, 31\l  %239 = select i1 %238, i32 %232, i32 %231\l  %240 = select i1 %238, i32 %233, i32 %232\l  %241 = select i1 %238, i32 %234, i32 %233\l  %242 = select i1 %238, i32 %235, i32 %234\l  %243 = select i1 %238, i32 -32, i32 0\l  %244 = add nsw i32 %243, %237\l  %245 = icmp eq i32 %244, 0\l  %246 = sub nsw i32 32, %244\l  %247 = tail call i32 @llvm.fshr.i32(i32 %239, i32 %240, i32 %246)\l  %248 = tail call i32 @llvm.fshr.i32(i32 %240, i32 %241, i32 %246)\l  %249 = tail call i32 @llvm.fshr.i32(i32 %241, i32 %242, i32 %246)\l  %250 = select i1 %245, i32 %239, i32 %247\l  %251 = select i1 %245, i32 %240, i32 %248\l  %252 = select i1 %245, i32 %241, i32 %249\l  %253 = lshr i32 %250, 29\l  %254 = tail call i32 @llvm.fshl.i32(i32 %250, i32 %251, i32 2)\l  %255 = tail call i32 @llvm.fshl.i32(i32 %251, i32 %252, i32 2)\l  %256 = tail call i32 @llvm.fshl.i32(i32 %252, i32 %242, i32 2)\l  %257 = and i32 %253, 1\l  %258 = sub nsw i32 0, %257\l  %259 = shl i32 %253, 31\l  %260 = xor i32 %254, %258\l  %261 = xor i32 %255, %258\l  %262 = xor i32 %256, %258\l  %263 = tail call i32 @llvm.ctlz.i32(i32 %260, i1 false), !range !20\l  %264 = sub nsw i32 31, %263\l  %265 = tail call i32 @llvm.fshr.i32(i32 %260, i32 %261, i32 %264)\l  %266 = tail call i32 @llvm.fshr.i32(i32 %261, i32 %262, i32 %264)\l  %267 = shl nuw nsw i32 %263, 23\l  %268 = sub nuw nsw i32 1056964608, %267\l  %269 = lshr i32 %265, 9\l  %270 = or i32 %269, %268\l  %271 = or i32 %270, %259\l  %272 = bitcast i32 %271 to float\l  %273 = tail call i32 @llvm.fshl.i32(i32 %265, i32 %266, i32 23)\l  %274 = tail call i32 @llvm.ctlz.i32(i32 %273, i1 false), !range !20\l  %275 = fmul float %272, 0x3FF921FB40000000\l  %276 = add nuw nsw i32 %274, %263\l  %277 = shl nuw nsw i32 %276, 23\l  %278 = sub nuw nsw i32 855638016, %277\l  %279 = sub nsw i32 31, %274\l  %280 = tail call i32 @llvm.fshr.i32(i32 %273, i32 %266, i32 %279)\l  %281 = lshr i32 %280, 9\l  %282 = or i32 %278, %281\l  %283 = or i32 %282, %259\l  %284 = bitcast i32 %283 to float\l  %285 = fneg float %275\l  %286 = tail call float @llvm.fma.f32(float %272, float 0x3FF921FB40000000,\l... float %285)\l  %287 = tail call float @llvm.fma.f32(float %272, float 0x3E74442D00000000,\l... float %286)\l  %288 = tail call float @llvm.fma.f32(float %284, float 0x3FF921FB40000000,\l... float %287)\l  %289 = fadd float %275, %288\l  %290 = lshr i32 %250, 30\l  %291 = add nuw nsw i32 %257, %290\l  br label %292\l}"];
	Node0x5fa98d0 -> Node0x5fa9f90;
	Node0x5fa9f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%292:\l292:                                              \l  %293 = phi float [ %184, %179 ], [ %289, %186 ]\l  %294 = phi i32 [ %185, %179 ], [ %291, %186 ]\l  %295 = fmul float %293, %293\l  %296 = tail call float @llvm.fmuladd.f32(float %295, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %297 = tail call float @llvm.fmuladd.f32(float %295, float %296, float\l... 0xBFC55553A0000000)\l  %298 = fmul float %295, %297\l  %299 = tail call float @llvm.fmuladd.f32(float %293, float %298, float %293)\l  %300 = tail call float @llvm.fmuladd.f32(float %295, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %301 = tail call float @llvm.fmuladd.f32(float %295, float %300, float\l... 0x3FA5557EE0000000)\l  %302 = tail call float @llvm.fmuladd.f32(float %295, float %301, float\l... 0xBFE0000080000000)\l  %303 = tail call float @llvm.fmuladd.f32(float %295, float %302, float\l... 1.000000e+00)\l  %304 = fneg float %299\l  %305 = and i32 %294, 1\l  %306 = icmp eq i32 %305, 0\l  %307 = select i1 %306, float %303, float %304\l  %308 = bitcast float %307 to i32\l  %309 = shl i32 %294, 30\l  %310 = and i32 %309, -2147483648\l  %311 = xor i32 %310, %308\l  %312 = bitcast i32 %311 to float\l  %313 = tail call i1 @llvm.amdgcn.class.f32(float %177, i32 504)\l  %314 = select i1 %313, float %312, float 0x7FF8000000000000\l  br label %834\l}"];
	Node0x5fa9f90 -> Node0x5fa8dc0;
	Node0x5f9efd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%315:\l315:                                              \l  %316 = sext i32 %24 to i64\l  %317 = getelementptr inbounds float, float addrspace(1)* %0, i64 %316\l  %318 = load float, float addrspace(1)* %317, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %319 = tail call float @llvm.fabs.f32(float %318)\l  %320 = fcmp olt float %319, 1.310720e+05\l  br i1 %320, label %321, label %329\l|{<s0>T|<s1>F}}"];
	Node0x5f9efd0:s0 -> Node0x5fb0330;
	Node0x5f9efd0:s1 -> Node0x5fb0380;
	Node0x5fb0330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%321:\l321:                                              \l  %322 = fmul float %319, 0x3FE45F3060000000\l  %323 = tail call float @llvm.rint.f32(float %322)\l  %324 = tail call float @llvm.fma.f32(float %323, float 0xBFF921FB40000000,\l... float %319)\l  %325 = tail call float @llvm.fma.f32(float %323, float 0xBE74442D00000000,\l... float %324)\l  %326 = tail call float @llvm.fma.f32(float %323, float 0xBCF8469880000000,\l... float %325)\l  %327 = fptosi float %323 to i32\l  %328 = bitcast float %319 to i32\l  br label %435\l}"];
	Node0x5fb0330 -> Node0x5fb0a70;
	Node0x5fb0380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%329:\l329:                                              \l  %330 = bitcast float %319 to i32\l  %331 = lshr i32 %330, 23\l  %332 = and i32 %330, 8388607\l  %333 = or i32 %332, 8388608\l  %334 = zext i32 %333 to i64\l  %335 = mul nuw nsw i64 %334, 4266746795\l  %336 = trunc i64 %335 to i32\l  %337 = lshr i64 %335, 32\l  %338 = mul nuw nsw i64 %334, 1011060801\l  %339 = add nuw nsw i64 %337, %338\l  %340 = trunc i64 %339 to i32\l  %341 = lshr i64 %339, 32\l  %342 = mul nuw nsw i64 %334, 3680671129\l  %343 = add nuw nsw i64 %341, %342\l  %344 = trunc i64 %343 to i32\l  %345 = lshr i64 %343, 32\l  %346 = mul nuw nsw i64 %334, 4113882560\l  %347 = add nuw nsw i64 %345, %346\l  %348 = trunc i64 %347 to i32\l  %349 = lshr i64 %347, 32\l  %350 = mul nuw nsw i64 %334, 4230436817\l  %351 = add nuw nsw i64 %349, %350\l  %352 = trunc i64 %351 to i32\l  %353 = lshr i64 %351, 32\l  %354 = mul nuw nsw i64 %334, 1313084713\l  %355 = add nuw nsw i64 %353, %354\l  %356 = trunc i64 %355 to i32\l  %357 = lshr i64 %355, 32\l  %358 = mul nuw nsw i64 %334, 2734261102\l  %359 = add nuw nsw i64 %357, %358\l  %360 = trunc i64 %359 to i32\l  %361 = lshr i64 %359, 32\l  %362 = trunc i64 %361 to i32\l  %363 = add nsw i32 %331, -120\l  %364 = icmp ugt i32 %363, 63\l  %365 = select i1 %364, i32 %356, i32 %362\l  %366 = select i1 %364, i32 %352, i32 %360\l  %367 = select i1 %364, i32 %348, i32 %356\l  %368 = select i1 %364, i32 %344, i32 %352\l  %369 = select i1 %364, i32 %340, i32 %348\l  %370 = select i1 %364, i32 %336, i32 %344\l  %371 = select i1 %364, i32 -64, i32 0\l  %372 = add nsw i32 %371, %363\l  %373 = icmp ugt i32 %372, 31\l  %374 = select i1 %373, i32 %366, i32 %365\l  %375 = select i1 %373, i32 %367, i32 %366\l  %376 = select i1 %373, i32 %368, i32 %367\l  %377 = select i1 %373, i32 %369, i32 %368\l  %378 = select i1 %373, i32 %370, i32 %369\l  %379 = select i1 %373, i32 -32, i32 0\l  %380 = add nsw i32 %379, %372\l  %381 = icmp ugt i32 %380, 31\l  %382 = select i1 %381, i32 %375, i32 %374\l  %383 = select i1 %381, i32 %376, i32 %375\l  %384 = select i1 %381, i32 %377, i32 %376\l  %385 = select i1 %381, i32 %378, i32 %377\l  %386 = select i1 %381, i32 -32, i32 0\l  %387 = add nsw i32 %386, %380\l  %388 = icmp eq i32 %387, 0\l  %389 = sub nsw i32 32, %387\l  %390 = tail call i32 @llvm.fshr.i32(i32 %382, i32 %383, i32 %389)\l  %391 = tail call i32 @llvm.fshr.i32(i32 %383, i32 %384, i32 %389)\l  %392 = tail call i32 @llvm.fshr.i32(i32 %384, i32 %385, i32 %389)\l  %393 = select i1 %388, i32 %382, i32 %390\l  %394 = select i1 %388, i32 %383, i32 %391\l  %395 = select i1 %388, i32 %384, i32 %392\l  %396 = lshr i32 %393, 29\l  %397 = tail call i32 @llvm.fshl.i32(i32 %393, i32 %394, i32 2)\l  %398 = tail call i32 @llvm.fshl.i32(i32 %394, i32 %395, i32 2)\l  %399 = tail call i32 @llvm.fshl.i32(i32 %395, i32 %385, i32 2)\l  %400 = and i32 %396, 1\l  %401 = sub nsw i32 0, %400\l  %402 = shl i32 %396, 31\l  %403 = xor i32 %397, %401\l  %404 = xor i32 %398, %401\l  %405 = xor i32 %399, %401\l  %406 = tail call i32 @llvm.ctlz.i32(i32 %403, i1 false), !range !20\l  %407 = sub nsw i32 31, %406\l  %408 = tail call i32 @llvm.fshr.i32(i32 %403, i32 %404, i32 %407)\l  %409 = tail call i32 @llvm.fshr.i32(i32 %404, i32 %405, i32 %407)\l  %410 = shl nuw nsw i32 %406, 23\l  %411 = sub nuw nsw i32 1056964608, %410\l  %412 = lshr i32 %408, 9\l  %413 = or i32 %412, %411\l  %414 = or i32 %413, %402\l  %415 = bitcast i32 %414 to float\l  %416 = tail call i32 @llvm.fshl.i32(i32 %408, i32 %409, i32 23)\l  %417 = tail call i32 @llvm.ctlz.i32(i32 %416, i1 false), !range !20\l  %418 = fmul float %415, 0x3FF921FB40000000\l  %419 = add nuw nsw i32 %417, %406\l  %420 = shl nuw nsw i32 %419, 23\l  %421 = sub nuw nsw i32 855638016, %420\l  %422 = sub nsw i32 31, %417\l  %423 = tail call i32 @llvm.fshr.i32(i32 %416, i32 %409, i32 %422)\l  %424 = lshr i32 %423, 9\l  %425 = or i32 %421, %424\l  %426 = or i32 %425, %402\l  %427 = bitcast i32 %426 to float\l  %428 = fneg float %418\l  %429 = tail call float @llvm.fma.f32(float %415, float 0x3FF921FB40000000,\l... float %428)\l  %430 = tail call float @llvm.fma.f32(float %415, float 0x3E74442D00000000,\l... float %429)\l  %431 = tail call float @llvm.fma.f32(float %427, float 0x3FF921FB40000000,\l... float %430)\l  %432 = fadd float %418, %431\l  %433 = lshr i32 %393, 30\l  %434 = add nuw nsw i32 %400, %433\l  br label %435\l}"];
	Node0x5fb0380 -> Node0x5fb0a70;
	Node0x5fb0a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%435:\l435:                                              \l  %436 = phi i32 [ %328, %321 ], [ %330, %329 ]\l  %437 = phi float [ %326, %321 ], [ %432, %329 ]\l  %438 = phi i32 [ %327, %321 ], [ %434, %329 ]\l  %439 = and i32 %438, 1\l  %440 = fmul float %437, %437\l  %441 = tail call float @llvm.fmuladd.f32(float %440, float\l... 0xBF919DBA60000000, float 0x3FD8A8B0E0000000)\l  %442 = tail call float @llvm.fmuladd.f32(float %440, float\l... 0x3F92E29000000000, float 0xBFE07266E0000000)\l  %443 = tail call float @llvm.fmuladd.f32(float %440, float %442, float\l... 0x3FF27E84A0000000)\l  %444 = tail call float @llvm.amdgcn.rcp.f32(float %443)\l  %445 = fmul float %441, %444\l  %446 = fmul float %440, %445\l  %447 = tail call float @llvm.fma.f32(float %446, float %437, float %437)\l  %448 = fsub float %447, %437\l  %449 = fneg float %448\l  %450 = tail call float @llvm.fma.f32(float %446, float %437, float %449)\l  %451 = tail call float @llvm.amdgcn.rcp.f32(float %447)\l  %452 = fneg float %451\l  %453 = tail call float @llvm.fma.f32(float %447, float %452, float\l... 1.000000e+00)\l  %454 = tail call float @llvm.fma.f32(float %450, float %452, float %453)\l  %455 = tail call float @llvm.fma.f32(float %454, float %452, float %452)\l  %456 = icmp eq i32 %439, 0\l  %457 = select i1 %456, float %447, float %455\l  %458 = bitcast float %457 to i32\l  %459 = bitcast float %318 to i32\l  %460 = xor i32 %436, %459\l  %461 = xor i32 %460, %458\l  %462 = bitcast i32 %461 to float\l  %463 = tail call i1 @llvm.amdgcn.class.f32(float %319, i32 504)\l  %464 = select i1 %463, float %462, float 0x7FF8000000000000\l  br label %834\l}"];
	Node0x5fb0a70 -> Node0x5fa8dc0;
	Node0x5f9f090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%465:\l465:                                              \l  %466 = sext i32 %24 to i64\l  %467 = getelementptr inbounds float, float addrspace(1)* %0, i64 %466\l  %468 = load float, float addrspace(1)* %467, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %469 = tail call float @llvm.fabs.f32(float %468)\l  %470 = fcmp olt float %469, 6.250000e-01\l  br i1 %470, label %471, label %479\l|{<s0>T|<s1>F}}"];
	Node0x5f9f090:s0 -> Node0x5fb6d00;
	Node0x5f9f090:s1 -> Node0x5fb6d90;
	Node0x5fb6d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%471:\l471:                                              \l  %472 = fmul float %468, %468\l  %473 = tail call float @llvm.fmuladd.f32(float %472, float\l... 0xBF7758E7A0000000, float 0x3F95211920000000)\l  %474 = tail call float @llvm.fmuladd.f32(float %472, float %473, float\l... 0xBFAB8389C0000000)\l  %475 = tail call float @llvm.fmuladd.f32(float %472, float %474, float\l... 0x3FC1107040000000)\l  %476 = tail call float @llvm.fmuladd.f32(float %472, float %475, float\l... 0xBFD5555320000000)\l  %477 = fmul float %469, %476\l  %478 = tail call float @llvm.fmuladd.f32(float %472, float %477, float %469)\l  br label %496\l}"];
	Node0x5fb6d00 -> Node0x5fb7700;
	Node0x5fb6d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%479:\l479:                                              \l  %480 = fmul float %469, 2.000000e+00\l  %481 = fmul float %480, 0x3FF7154760000000\l  %482 = tail call float @llvm.rint.f32(float %481)\l  %483 = fcmp ogt float %480, 0x40562E4300000000\l  %484 = fneg float %481\l  %485 = tail call float @llvm.fma.f32(float %480, float 0x3FF7154760000000,\l... float %484)\l  %486 = tail call float @llvm.fma.f32(float %480, float 0x3E54AE0BE0000000,\l... float %485)\l  %487 = fsub float %481, %482\l  %488 = fadd float %486, %487\l  %489 = tail call float @llvm.exp2.f32(float %488)\l  %490 = fptosi float %482 to i32\l  %491 = tail call float @llvm.amdgcn.ldexp.f32(float %489, i32 %490)\l  %492 = fadd float %491, 1.000000e+00\l  %493 = select i1 %483, float 0x7FF0000000000000, float %492\l  %494 = tail call float @llvm.amdgcn.rcp.f32(float %493)\l  %495 = tail call float @llvm.fmuladd.f32(float %494, float -2.000000e+00,\l... float 1.000000e+00)\l  br label %496\l}"];
	Node0x5fb6d90 -> Node0x5fb7700;
	Node0x5fb7700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%496:\l496:                                              \l  %497 = phi float [ %478, %471 ], [ %495, %479 ]\l  %498 = tail call float @llvm.copysign.f32(float %497, float %468)\l  br label %834\l}"];
	Node0x5fb7700 -> Node0x5fa8dc0;
	Node0x5f9f150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%499:\l499:                                              \l  %500 = sext i32 %24 to i64\l  %501 = getelementptr inbounds float, float addrspace(1)* %0, i64 %500\l  %502 = load float, float addrspace(1)* %501, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %503 = tail call float @llvm.fabs.f32(float %502)\l  %504 = fadd float %503, 0xBFE62E4300000000\l  %505 = fsub float %504, %503\l  %506 = fsub float %505, %504\l  %507 = fadd float %503, %506\l  %508 = fadd float %505, 0x3FE62E4300000000\l  %509 = fsub float %507, %508\l  %510 = fadd float %509, 0x3E205C6100000000\l  %511 = fadd float %504, %510\l  %512 = fsub float %511, %504\l  %513 = fsub float %510, %512\l  %514 = fmul float %511, 0x3FF7154760000000\l  %515 = tail call float @llvm.rint.f32(float %514)\l  %516 = tail call float @llvm.fmuladd.f32(float %515, float\l... 0xBFE62E4000000000, float %511)\l  %517 = fadd float %513, %516\l  %518 = fsub float %517, %516\l  %519 = fsub float %513, %518\l  %520 = fmul float %515, 0x3EB7F78000000000\l  %521 = fsub float %517, %520\l  %522 = fsub float %517, %521\l  %523 = fsub float %522, %520\l  %524 = fadd float %519, %523\l  %525 = fadd float %521, %524\l  %526 = fsub float %525, %521\l  %527 = fsub float %524, %526\l  %528 = fmul float %515, 0x3DD473DE60000000\l  %529 = fsub float %525, %528\l  %530 = fsub float %525, %529\l  %531 = fsub float %530, %528\l  %532 = fadd float %527, %531\l  %533 = fadd float %529, %532\l  %534 = fsub float %533, %529\l  %535 = fsub float %532, %534\l  %536 = tail call float @llvm.fmuladd.f32(float %533, float\l... 0x3F56850E40000000, float 0x3F8123BCC0000000)\l  %537 = tail call float @llvm.fmuladd.f32(float %533, float %536, float\l... 0x3FA555B980000000)\l  %538 = tail call float @llvm.fmuladd.f32(float %533, float %537, float\l... 0x3FC55548E0000000)\l  %539 = tail call float @llvm.fmuladd.f32(float %533, float %538, float\l... 0x3FDFFFFF80000000)\l  %540 = fmul float %533, %533\l  %541 = fneg float %540\l  %542 = tail call float @llvm.fma.f32(float %533, float %533, float %541)\l  %543 = fmul float %535, 2.000000e+00\l  %544 = tail call float @llvm.fma.f32(float %533, float %543, float %542)\l  %545 = fadd float %540, %544\l  %546 = fsub float %545, %540\l  %547 = fsub float %544, %546\l  %548 = fmul float %539, %545\l  %549 = fneg float %548\l  %550 = tail call float @llvm.fma.f32(float %545, float %539, float %549)\l  %551 = tail call float @llvm.fma.f32(float %547, float %539, float %550)\l  %552 = fadd float %548, %551\l  %553 = fsub float %552, %548\l  %554 = fsub float %551, %553\l  %555 = fadd float %533, %552\l  %556 = fsub float %555, %533\l  %557 = fsub float %552, %556\l  %558 = fadd float %535, %554\l  %559 = fadd float %558, %557\l  %560 = fadd float %555, %559\l  %561 = fsub float %560, %555\l  %562 = fsub float %559, %561\l  %563 = fadd float %560, 1.000000e+00\l  %564 = fadd float %563, -1.000000e+00\l  %565 = fsub float %560, %564\l  %566 = fadd float %562, %565\l  %567 = fadd float %563, %566\l  %568 = fsub float %567, %563\l  %569 = fsub float %566, %568\l  %570 = fptosi float %515 to i32\l  %571 = tail call float @llvm.amdgcn.ldexp.f32(float %567, i32 %570)\l  %572 = tail call float @llvm.amdgcn.ldexp.f32(float %569, i32 %570)\l  %573 = tail call float @llvm.amdgcn.rcp.f32(float %571)\l  %574 = fmul float %571, %573\l  %575 = fneg float %574\l  %576 = tail call float @llvm.fma.f32(float %573, float %571, float %575)\l  %577 = tail call float @llvm.fma.f32(float %573, float %572, float %576)\l  %578 = fadd float %574, %577\l  %579 = fsub float %578, %574\l  %580 = fsub float %577, %579\l  %581 = fsub float 1.000000e+00, %578\l  %582 = fsub float 1.000000e+00, %581\l  %583 = fsub float %582, %578\l  %584 = fsub float %583, %580\l  %585 = fadd float %581, %584\l  %586 = fmul float %573, %585\l  %587 = fmul float %571, %586\l  %588 = fneg float %587\l  %589 = tail call float @llvm.fma.f32(float %586, float %571, float %588)\l  %590 = tail call float @llvm.fma.f32(float %586, float %572, float %589)\l  %591 = fsub float %585, %581\l  %592 = fsub float %584, %591\l  %593 = fadd float %587, %590\l  %594 = fsub float %593, %587\l  %595 = fsub float %590, %594\l  %596 = fsub float %585, %593\l  %597 = fsub float %585, %596\l  %598 = fsub float %597, %593\l  %599 = fadd float %592, %598\l  %600 = fsub float %599, %595\l  %601 = fadd float %596, %600\l  %602 = fmul float %573, %601\l  %603 = fadd float %573, %586\l  %604 = fsub float %603, %573\l  %605 = fsub float %586, %604\l  %606 = fadd float %605, %602\l  %607 = fadd float %603, %606\l  %608 = fsub float %607, %603\l  %609 = fsub float %606, %608\l  %610 = tail call float @llvm.amdgcn.ldexp.f32(float %607, i32 -2)\l  %611 = tail call float @llvm.amdgcn.ldexp.f32(float %609, i32 -2)\l  %612 = fsub float %571, %610\l  %613 = fsub float %571, %612\l  %614 = fsub float %613, %610\l  %615 = fadd float %572, %614\l  %616 = fsub float %615, %611\l  %617 = fadd float %612, %616\l  %618 = fcmp ogt float %503, 0x40565A9F80000000\l  %619 = select i1 %618, float 0x7FF0000000000000, float %617\l  %620 = fcmp olt float %503, 0x3F30000000000000\l  %621 = select i1 %620, float %503, float %619\l  %622 = tail call float @llvm.copysign.f32(float %621, float %502)\l  br label %834\l}"];
	Node0x5f9f150 -> Node0x5fa8dc0;
	Node0x5f9f210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%623:\l623:                                              \l  %624 = sext i32 %24 to i64\l  %625 = getelementptr inbounds float, float addrspace(1)* %0, i64 %624\l  %626 = load float, float addrspace(1)* %625, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %627 = tail call float @llvm.fabs.f32(float %626)\l  %628 = fadd float %627, 0xBFE62E4300000000\l  %629 = fsub float %628, %627\l  %630 = fsub float %629, %628\l  %631 = fadd float %627, %630\l  %632 = fadd float %629, 0x3FE62E4300000000\l  %633 = fsub float %631, %632\l  %634 = fadd float %633, 0x3E205C6100000000\l  %635 = fadd float %628, %634\l  %636 = fsub float %635, %628\l  %637 = fsub float %634, %636\l  %638 = fmul float %635, 0x3FF7154760000000\l  %639 = tail call float @llvm.rint.f32(float %638)\l  %640 = tail call float @llvm.fmuladd.f32(float %639, float\l... 0xBFE62E4000000000, float %635)\l  %641 = fadd float %637, %640\l  %642 = fsub float %641, %640\l  %643 = fsub float %637, %642\l  %644 = fmul float %639, 0x3EB7F78000000000\l  %645 = fsub float %641, %644\l  %646 = fsub float %641, %645\l  %647 = fsub float %646, %644\l  %648 = fadd float %643, %647\l  %649 = fadd float %645, %648\l  %650 = fsub float %649, %645\l  %651 = fsub float %648, %650\l  %652 = fmul float %639, 0x3DD473DE60000000\l  %653 = fsub float %649, %652\l  %654 = fsub float %649, %653\l  %655 = fsub float %654, %652\l  %656 = fadd float %651, %655\l  %657 = fadd float %653, %656\l  %658 = fsub float %657, %653\l  %659 = fsub float %656, %658\l  %660 = tail call float @llvm.fmuladd.f32(float %657, float\l... 0x3F56850E40000000, float 0x3F8123BCC0000000)\l  %661 = tail call float @llvm.fmuladd.f32(float %657, float %660, float\l... 0x3FA555B980000000)\l  %662 = tail call float @llvm.fmuladd.f32(float %657, float %661, float\l... 0x3FC55548E0000000)\l  %663 = tail call float @llvm.fmuladd.f32(float %657, float %662, float\l... 0x3FDFFFFF80000000)\l  %664 = fmul float %657, %657\l  %665 = fneg float %664\l  %666 = tail call float @llvm.fma.f32(float %657, float %657, float %665)\l  %667 = fmul float %659, 2.000000e+00\l  %668 = tail call float @llvm.fma.f32(float %657, float %667, float %666)\l  %669 = fadd float %664, %668\l  %670 = fsub float %669, %664\l  %671 = fsub float %668, %670\l  %672 = fmul float %663, %669\l  %673 = fneg float %672\l  %674 = tail call float @llvm.fma.f32(float %669, float %663, float %673)\l  %675 = tail call float @llvm.fma.f32(float %671, float %663, float %674)\l  %676 = fadd float %672, %675\l  %677 = fsub float %676, %672\l  %678 = fsub float %675, %677\l  %679 = fadd float %657, %676\l  %680 = fsub float %679, %657\l  %681 = fsub float %676, %680\l  %682 = fadd float %659, %678\l  %683 = fadd float %682, %681\l  %684 = fadd float %679, %683\l  %685 = fsub float %684, %679\l  %686 = fsub float %683, %685\l  %687 = fadd float %684, 1.000000e+00\l  %688 = fadd float %687, -1.000000e+00\l  %689 = fsub float %684, %688\l  %690 = fadd float %686, %689\l  %691 = fadd float %687, %690\l  %692 = fsub float %691, %687\l  %693 = fsub float %690, %692\l  %694 = fptosi float %639 to i32\l  %695 = tail call float @llvm.amdgcn.ldexp.f32(float %691, i32 %694)\l  %696 = tail call float @llvm.amdgcn.ldexp.f32(float %693, i32 %694)\l  %697 = tail call float @llvm.amdgcn.rcp.f32(float %695)\l  %698 = fmul float %695, %697\l  %699 = fneg float %698\l  %700 = tail call float @llvm.fma.f32(float %697, float %695, float %699)\l  %701 = tail call float @llvm.fma.f32(float %697, float %696, float %700)\l  %702 = fadd float %698, %701\l  %703 = fsub float %702, %698\l  %704 = fsub float %701, %703\l  %705 = fsub float 1.000000e+00, %702\l  %706 = fsub float 1.000000e+00, %705\l  %707 = fsub float %706, %702\l  %708 = fsub float %707, %704\l  %709 = fadd float %705, %708\l  %710 = fmul float %697, %709\l  %711 = fmul float %695, %710\l  %712 = fneg float %711\l  %713 = tail call float @llvm.fma.f32(float %710, float %695, float %712)\l  %714 = tail call float @llvm.fma.f32(float %710, float %696, float %713)\l  %715 = fsub float %709, %705\l  %716 = fsub float %708, %715\l  %717 = fadd float %711, %714\l  %718 = fsub float %717, %711\l  %719 = fsub float %714, %718\l  %720 = fsub float %709, %717\l  %721 = fsub float %709, %720\l  %722 = fsub float %721, %717\l  %723 = fadd float %716, %722\l  %724 = fsub float %723, %719\l  %725 = fadd float %720, %724\l  %726 = fmul float %697, %725\l  %727 = fadd float %697, %710\l  %728 = fsub float %727, %697\l  %729 = fsub float %710, %728\l  %730 = fadd float %729, %726\l  %731 = fadd float %727, %730\l  %732 = fsub float %731, %727\l  %733 = fsub float %730, %732\l  %734 = tail call float @llvm.amdgcn.ldexp.f32(float %731, i32 -2)\l  %735 = tail call float @llvm.amdgcn.ldexp.f32(float %733, i32 -2)\l  %736 = fadd float %695, %734\l  %737 = fsub float %736, %695\l  %738 = fsub float %734, %737\l  %739 = fadd float %696, %735\l  %740 = fadd float %739, %738\l  %741 = fadd float %736, %740\l  %742 = fcmp ogt float %627, 0x40565A9F80000000\l  %743 = select i1 %742, float 0x7FF0000000000000, float %741\l  br label %834\l}"];
	Node0x5f9f210 -> Node0x5fa8dc0;
	Node0x5f9f2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%744:\l744:                                              \l  %745 = sext i32 %24 to i64\l  %746 = getelementptr inbounds float, float addrspace(1)* %0, i64 %745\l  %747 = load float, float addrspace(1)* %746, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %748 = tail call float @llvm.fabs.f32(float %747)\l  %749 = tail call float @llvm.fmuladd.f32(float %748, float -5.000000e-01,\l... float 5.000000e-01)\l  %750 = fmul float %747, %747\l  %751 = fcmp oge float %748, 5.000000e-01\l  %752 = select i1 %751, float %749, float %750\l  %753 = tail call float @llvm.fmuladd.f32(float %752, float\l... 0x3FA38434E0000000, float 0x3F8BF8BB40000000)\l  %754 = tail call float @llvm.fmuladd.f32(float %752, float %753, float\l... 0x3FA0698780000000)\l  %755 = tail call float @llvm.fmuladd.f32(float %752, float %754, float\l... 0x3FA6C83620000000)\l  %756 = tail call float @llvm.fmuladd.f32(float %752, float %755, float\l... 0x3FB3337900000000)\l  %757 = tail call float @llvm.fmuladd.f32(float %752, float %756, float\l... 0x3FC5555580000000)\l  %758 = fmul float %752, %757\l  %759 = tail call float @llvm.sqrt.f32(float %752)\l  %760 = tail call float @llvm.fmuladd.f32(float %759, float %758, float %759)\l  %761 = fmul float %760, 2.000000e+00\l  %762 = fsub float 0x3FF921FB60000000, %761\l  %763 = tail call float @llvm.fmuladd.f32(float %748, float %758, float %748)\l  %764 = fcmp olt float %748, 5.000000e-01\l  %765 = select i1 %764, float %763, float %762\l  %766 = tail call float @llvm.copysign.f32(float %765, float %747)\l  br label %834\l}"];
	Node0x5f9f2d0 -> Node0x5fa8dc0;
	Node0x5f9f390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%767:\l767:                                              \l  %768 = sext i32 %24 to i64\l  %769 = getelementptr inbounds float, float addrspace(1)* %0, i64 %768\l  %770 = load float, float addrspace(1)* %769, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %771 = tail call float @llvm.fabs.f32(float %770)\l  %772 = tail call float @llvm.fmuladd.f32(float %771, float -5.000000e-01,\l... float 5.000000e-01)\l  %773 = fmul float %770, %770\l  %774 = fcmp ogt float %771, 5.000000e-01\l  %775 = select i1 %774, float %772, float %773\l  %776 = tail call float @llvm.fmuladd.f32(float %775, float\l... 0x3FA38434E0000000, float 0x3F8BF8BB40000000)\l  %777 = tail call float @llvm.fmuladd.f32(float %775, float %776, float\l... 0x3FA0698780000000)\l  %778 = tail call float @llvm.fmuladd.f32(float %775, float %777, float\l... 0x3FA6C83620000000)\l  %779 = tail call float @llvm.fmuladd.f32(float %775, float %778, float\l... 0x3FB3337900000000)\l  %780 = tail call float @llvm.fmuladd.f32(float %775, float %779, float\l... 0x3FC5555580000000)\l  %781 = fmul float %775, %780\l  %782 = tail call float @llvm.sqrt.f32(float %775)\l  %783 = tail call float @llvm.fmuladd.f32(float %782, float %781, float %782)\l  %784 = fmul float %783, 2.000000e+00\l  %785 = fsub float 0x400921FB60000000, %784\l  %786 = fcmp olt float %770, 0.000000e+00\l  %787 = select i1 %786, float %785, float %784\l  %788 = tail call float @llvm.fmuladd.f32(float %770, float %781, float %770)\l  %789 = fsub float 0x3FF921FB60000000, %788\l  %790 = select i1 %774, float %787, float %789\l  br label %834\l}"];
	Node0x5f9f390 -> Node0x5fa8dc0;
	Node0x5f9f450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%791:\l791:                                              \l  %792 = shl nsw i32 %24, 1\l  %793 = sext i32 %792 to i64\l  %794 = getelementptr inbounds float, float addrspace(1)* %0, i64 %793\l  %795 = bitcast float addrspace(1)* %794 to \<2 x float\> addrspace(1)*\l  %796 = load \<2 x float\>, \<2 x float\> addrspace(1)* %795, align 4, !tbaa !16\l  %797 = extractelement \<2 x float\> %796, i64 1\l  %798 = tail call float @llvm.fabs.f32(float %797)\l  %799 = extractelement \<2 x float\> %796, i64 0\l  %800 = tail call float @llvm.fabs.f32(float %799)\l  %801 = tail call float @llvm.minnum.f32(float %798, float %800)\l  %802 = tail call float @llvm.maxnum.f32(float %798, float %800)\l  %803 = fdiv float %801, %802, !fpmath !21\l  %804 = fmul float %803, %803\l  %805 = tail call float @llvm.fmuladd.f32(float %804, float\l... 0x3F65A54B00000000, float 0xBF8F4B2180000000)\l  %806 = tail call float @llvm.fmuladd.f32(float %804, float %805, float\l... 0x3FA53F67E0000000)\l  %807 = tail call float @llvm.fmuladd.f32(float %804, float %806, float\l... 0xBFB2FA9AE0000000)\l  %808 = tail call float @llvm.fmuladd.f32(float %804, float %807, float\l... 0x3FBB263640000000)\l  %809 = tail call float @llvm.fmuladd.f32(float %804, float %808, float\l... 0xBFC22C1CC0000000)\l  %810 = tail call float @llvm.fmuladd.f32(float %804, float %809, float\l... 0x3FC99717E0000000)\l  %811 = tail call float @llvm.fmuladd.f32(float %804, float %810, float\l... 0xBFD5554C40000000)\l  %812 = fmul float %804, %811\l  %813 = tail call float @llvm.fmuladd.f32(float %803, float %812, float %803)\l  %814 = fsub float 0x3FF921FB60000000, %813\l  %815 = fcmp ogt float %800, %798\l  %816 = select i1 %815, float %814, float %813\l  %817 = fsub float 0x400921FB60000000, %816\l  %818 = fcmp olt float %797, 0.000000e+00\l  %819 = select i1 %818, float %817, float %816\l  %820 = bitcast float %797 to i32\l  %821 = icmp slt i32 %820, 0\l  %822 = select i1 %821, float 0x400921FB60000000, float 0.000000e+00\l  %823 = fcmp oeq float %799, 0.000000e+00\l  %824 = select i1 %823, float %822, float %819\l  %825 = select i1 %818, float 0x4002D97C80000000, float 0x3FE921FB60000000\l  %826 = fcmp oeq float %798, 0x7FF0000000000000\l  %827 = fcmp oeq float %800, 0x7FF0000000000000\l  %828 = and i1 %827, %826\l  %829 = select i1 %828, float %825, float %824\l  %830 = fcmp uno float %797, %799\l  %831 = select i1 %830, float 0x7FF8000000000000, float %829\l  %832 = tail call float @llvm.copysign.f32(float %831, float %799)\l  %833 = sext i32 %24 to i64\l  br label %834\l}"];
	Node0x5f9f450 -> Node0x5fa8dc0;
	Node0x5fa8dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%834:\l834:                                              \l  %835 = phi i64 [ %28, %147 ], [ %174, %292 ], [ %316, %435 ], [ %466, %496\l... ], [ %500, %499 ], [ %624, %623 ], [ %745, %744 ], [ %768, %767 ], [ %833,\l... %791 ]\l  %836 = phi float [ %172, %147 ], [ %314, %292 ], [ %464, %435 ], [ %498,\l... %496 ], [ %622, %499 ], [ %743, %623 ], [ %766, %744 ], [ %790, %767 ], [\l... %832, %791 ]\l  %837 = getelementptr inbounds float, float addrspace(1)* %1, i64 %835\l  store float %836, float addrspace(1)* %837, align 4, !tbaa !16\l  br label %838\l}"];
	Node0x5fa8dc0 -> Node0x5f9ed50;
	Node0x5f9ed50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%838:\l838:                                              \l  ret void\l}"];
}
