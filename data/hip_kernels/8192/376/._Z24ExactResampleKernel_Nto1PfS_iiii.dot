digraph "CFG for '_Z24ExactResampleKernel_Nto1PfS_iiii' function" {
	label="CFG for '_Z24ExactResampleKernel_Nto1PfS_iiii' function";

	Node0x5b0a980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%6:\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !6\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = udiv i32 %14, %11\l  %18 = mul i32 %17, %11\l  %19 = icmp ugt i32 %14, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %16\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %24 = add i32 %22, %15\l  %25 = mul i32 %24, %11\l  %26 = add i32 %25, %23\l  %27 = mul nsw i32 %5, %4\l  %28 = icmp slt i32 %26, %27\l  br i1 %28, label %29, label %152\l|{<s0>T|<s1>F}}"];
	Node0x5b0a980:s0 -> Node0x5b0d260;
	Node0x5b0a980:s1 -> Node0x5b0d2f0;
	Node0x5b0d260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%29:\l29:                                               \l  %30 = freeze i32 %26\l  %31 = freeze i32 %4\l  %32 = sdiv i32 %30, %31\l  %33 = mul i32 %32, %31\l  %34 = sub i32 %30, %33\l  %35 = sdiv i32 %2, %4\l  %36 = sdiv i32 %3, %5\l  %37 = icmp sgt i32 %35, 0\l  br i1 %37, label %38, label %51\l|{<s0>T|<s1>F}}"];
	Node0x5b0d260:s0 -> Node0x5b0c8b0;
	Node0x5b0d260:s1 -> Node0x5b0d9f0;
	Node0x5b0c8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%38:\l38:                                               \l  %39 = icmp sgt i32 %36, 0\l  %40 = mul nsw i32 %35, %34\l  %41 = mul nsw i32 %36, %32\l  %42 = and i32 %36, 7\l  %43 = icmp ult i32 %36, 8\l  %44 = and i32 %36, -8\l  %45 = icmp eq i32 %42, 0\l  br label %46\l}"];
	Node0x5b0c8b0 -> Node0x5b0df80;
	Node0x5b0df80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %38 ], [ %79, %78 ]\l  %48 = phi i32 [ 0, %38 ], [ %80, %78 ]\l  br i1 %39, label %49, label %78\l|{<s0>T|<s1>F}}"];
	Node0x5b0df80:s0 -> Node0x5b0ed20;
	Node0x5b0df80:s1 -> Node0x5b0eac0;
	Node0x5b0ed20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%49:\l49:                                               \l  %50 = add nsw i32 %48, %40\l  br i1 %43, label %60, label %82\l|{<s0>T|<s1>F}}"];
	Node0x5b0ed20:s0 -> Node0x5b0eef0;
	Node0x5b0ed20:s1 -> Node0x5b0ef40;
	Node0x5b0d9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %29 ], [ %79, %78 ]\l  %53 = mul nsw i32 %36, %35\l  %54 = sitofp i32 %53 to float\l  %55 = fdiv contract float %52, %54\l  %56 = mul nsw i32 %32, %4\l  %57 = add nsw i32 %56, %34\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  store float %55, float addrspace(1)* %59, align 4, !tbaa !16\l  br label %152\l}"];
	Node0x5b0d9f0 -> Node0x5b0d2f0;
	Node0x5b0eef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%60:\l60:                                               \l  %61 = phi float [ undef, %49 ], [ %148, %82 ]\l  %62 = phi float [ %47, %49 ], [ %148, %82 ]\l  %63 = phi i32 [ 0, %49 ], [ %149, %82 ]\l  br i1 %45, label %78, label %64\l|{<s0>T|<s1>F}}"];
	Node0x5b0eef0:s0 -> Node0x5b0eac0;
	Node0x5b0eef0:s1 -> Node0x5b0fdb0;
	Node0x5b0fdb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%64:\l64:                                               \l  %65 = phi float [ %74, %64 ], [ %62, %60 ]\l  %66 = phi i32 [ %75, %64 ], [ %63, %60 ]\l  %67 = phi i32 [ %76, %64 ], [ 0, %60 ]\l  %68 = add nsw i32 %66, %41\l  %69 = mul nsw i32 %68, %2\l  %70 = add nsw i32 %50, %69\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %74 = fadd contract float %65, %73\l  %75 = add nuw nsw i32 %66, 1\l  %76 = add i32 %67, 1\l  %77 = icmp eq i32 %76, %42\l  br i1 %77, label %78, label %64, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5b0fdb0:s0 -> Node0x5b0eac0;
	Node0x5b0fdb0:s1 -> Node0x5b0fdb0;
	Node0x5b0eac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%78:\l78:                                               \l  %79 = phi float [ %47, %46 ], [ %61, %60 ], [ %74, %64 ]\l  %80 = add nuw nsw i32 %48, 1\l  %81 = icmp eq i32 %80, %35\l  br i1 %81, label %51, label %46, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5b0eac0:s0 -> Node0x5b0d9f0;
	Node0x5b0eac0:s1 -> Node0x5b0df80;
	Node0x5b0ef40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%82:\l82:                                               \l  %83 = phi float [ %148, %82 ], [ %47, %49 ]\l  %84 = phi i32 [ %149, %82 ], [ 0, %49 ]\l  %85 = phi i32 [ %150, %82 ], [ 0, %49 ]\l  %86 = add nsw i32 %84, %41\l  %87 = mul nsw i32 %86, %2\l  %88 = add nsw i32 %50, %87\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %92 = fadd contract float %83, %91\l  %93 = or i32 %84, 1\l  %94 = add nsw i32 %93, %41\l  %95 = mul nsw i32 %94, %2\l  %96 = add nsw i32 %50, %95\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %100 = fadd contract float %92, %99\l  %101 = or i32 %84, 2\l  %102 = add nsw i32 %101, %41\l  %103 = mul nsw i32 %102, %2\l  %104 = add nsw i32 %50, %103\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %108 = fadd contract float %100, %107\l  %109 = or i32 %84, 3\l  %110 = add nsw i32 %109, %41\l  %111 = mul nsw i32 %110, %2\l  %112 = add nsw i32 %50, %111\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %116 = fadd contract float %108, %115\l  %117 = or i32 %84, 4\l  %118 = add nsw i32 %117, %41\l  %119 = mul nsw i32 %118, %2\l  %120 = add nsw i32 %50, %119\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %124 = fadd contract float %116, %123\l  %125 = or i32 %84, 5\l  %126 = add nsw i32 %125, %41\l  %127 = mul nsw i32 %126, %2\l  %128 = add nsw i32 %50, %127\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %132 = fadd contract float %124, %131\l  %133 = or i32 %84, 6\l  %134 = add nsw i32 %133, %41\l  %135 = mul nsw i32 %134, %2\l  %136 = add nsw i32 %50, %135\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %140 = fadd contract float %132, %139\l  %141 = or i32 %84, 7\l  %142 = add nsw i32 %141, %41\l  %143 = mul nsw i32 %142, %2\l  %144 = add nsw i32 %50, %143\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %0, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %148 = fadd contract float %140, %147\l  %149 = add nuw nsw i32 %84, 8\l  %150 = add i32 %85, 8\l  %151 = icmp eq i32 %150, %44\l  br i1 %151, label %60, label %82, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5b0ef40:s0 -> Node0x5b0eef0;
	Node0x5b0ef40:s1 -> Node0x5b0ef40;
	Node0x5b0d2f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%152:\l152:                                              \l  ret void\l}"];
}
