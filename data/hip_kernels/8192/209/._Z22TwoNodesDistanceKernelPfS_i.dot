digraph "CFG for '_Z22TwoNodesDistanceKernelPfS_i' function" {
	label="CFG for '_Z22TwoNodesDistanceKernelPfS_i' function";

	Node0x57a5a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%3:\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !6\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = udiv i32 %11, %8\l  %15 = mul i32 %14, %8\l  %16 = icmp ugt i32 %11, %15\l  %17 = zext i1 %16 to i32\l  %18 = add i32 %14, %17\l  %19 = mul i32 %18, %13\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %21 = add i32 %19, %12\l  %22 = mul i32 %21, %8\l  %23 = add i32 %22, %20\l  %24 = icmp slt i32 %23, 1\l  br i1 %24, label %25, label %138\l|{<s0>T|<s1>F}}"];
	Node0x57a5a40:s0 -> Node0x57a82b0;
	Node0x57a5a40:s1 -> Node0x57a8340;
	Node0x57a82b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%25:\l25:                                               \l  %26 = icmp sgt i32 %2, 0\l  br i1 %26, label %27, label %51\l|{<s0>T|<s1>F}}"];
	Node0x57a82b0:s0 -> Node0x57a8540;
	Node0x57a82b0:s1 -> Node0x57a8590;
	Node0x57a8540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%27:\l27:                                               \l  %28 = mul nsw i32 %23, %2\l  %29 = and i32 %2, 7\l  %30 = icmp ult i32 %2, 8\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x57a8540:s0 -> Node0x57a88e0;
	Node0x57a8540:s1 -> Node0x57a8930;
	Node0x57a8930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %2, -8\l  br label %76\l}"];
	Node0x57a8930 -> Node0x57a7a90;
	Node0x57a88e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi float [ undef, %27 ], [ %134, %76 ]\l  %35 = phi i32 [ 0, %27 ], [ %135, %76 ]\l  %36 = phi float [ 0.000000e+00, %27 ], [ %134, %76 ]\l  %37 = icmp eq i32 %29, 0\l  br i1 %37, label %51, label %38\l|{<s0>T|<s1>F}}"];
	Node0x57a88e0:s0 -> Node0x57a8590;
	Node0x57a88e0:s1 -> Node0x57a9eb0;
	Node0x57a9eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i32 [ %48, %38 ], [ %35, %33 ]\l  %40 = phi float [ %47, %38 ], [ %36, %33 ]\l  %41 = phi i32 [ %49, %38 ], [ 0, %33 ]\l  %42 = add nsw i32 %39, %28\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %46 = fmul contract float %45, %45\l  %47 = fadd contract float %40, %46\l  %48 = add nuw nsw i32 %39, 1\l  %49 = add i32 %41, 1\l  %50 = icmp eq i32 %49, %29\l  br i1 %50, label %51, label %38, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x57a9eb0:s0 -> Node0x57a8590;
	Node0x57a9eb0:s1 -> Node0x57a9eb0;
	Node0x57a8590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%51:\l51:                                               \l  %52 = phi float [ 0.000000e+00, %25 ], [ %34, %33 ], [ %47, %38 ]\l  %53 = fcmp olt float %52, 0x39F0000000000000\l  %54 = select i1 %53, float 0x41F0000000000000, float 1.000000e+00\l  %55 = fmul float %52, %54\l  %56 = tail call float @llvm.sqrt.f32(float %55)\l  %57 = bitcast float %56 to i32\l  %58 = add nsw i32 %57, -1\l  %59 = bitcast i32 %58 to float\l  %60 = add nsw i32 %57, 1\l  %61 = bitcast i32 %60 to float\l  %62 = tail call i1 @llvm.amdgcn.class.f32(float %55, i32 608)\l  %63 = select i1 %53, float 0x3EF0000000000000, float 1.000000e+00\l  %64 = fneg float %61\l  %65 = tail call float @llvm.fma.f32(float %64, float %56, float %55)\l  %66 = fcmp ogt float %65, 0.000000e+00\l  %67 = fneg float %59\l  %68 = tail call float @llvm.fma.f32(float %67, float %56, float %55)\l  %69 = fcmp ole float %68, 0.000000e+00\l  %70 = select i1 %69, float %59, float %56\l  %71 = select i1 %66, float %61, float %70\l  %72 = fmul float %63, %71\l  %73 = select i1 %62, float %55, float %72\l  %74 = sext i32 %23 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %74\l  store float %73, float addrspace(1)* %75, align 4, !tbaa !16\l  br label %138\l}"];
	Node0x57a8590 -> Node0x57a8340;
	Node0x57a7a90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%76:\l76:                                               \l  %77 = phi i32 [ 0, %31 ], [ %135, %76 ]\l  %78 = phi float [ 0.000000e+00, %31 ], [ %134, %76 ]\l  %79 = phi i32 [ 0, %31 ], [ %136, %76 ]\l  %80 = add nsw i32 %77, %28\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %84 = fmul contract float %83, %83\l  %85 = fadd contract float %78, %84\l  %86 = or i32 %77, 1\l  %87 = add nsw i32 %86, %28\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %90, %90\l  %92 = fadd contract float %85, %91\l  %93 = or i32 %77, 2\l  %94 = add nsw i32 %93, %28\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %98 = fmul contract float %97, %97\l  %99 = fadd contract float %92, %98\l  %100 = or i32 %77, 3\l  %101 = add nsw i32 %100, %28\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %105 = fmul contract float %104, %104\l  %106 = fadd contract float %99, %105\l  %107 = or i32 %77, 4\l  %108 = add nsw i32 %107, %28\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %0, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %112 = fmul contract float %111, %111\l  %113 = fadd contract float %106, %112\l  %114 = or i32 %77, 5\l  %115 = add nsw i32 %114, %28\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %119 = fmul contract float %118, %118\l  %120 = fadd contract float %113, %119\l  %121 = or i32 %77, 6\l  %122 = add nsw i32 %121, %28\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %125, %125\l  %127 = fadd contract float %120, %126\l  %128 = or i32 %77, 7\l  %129 = add nsw i32 %128, %28\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %133 = fmul contract float %132, %132\l  %134 = fadd contract float %127, %133\l  %135 = add nuw nsw i32 %77, 8\l  %136 = add i32 %79, 8\l  %137 = icmp eq i32 %136, %32\l  br i1 %137, label %33, label %76, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x57a7a90:s0 -> Node0x57a88e0;
	Node0x57a7a90:s1 -> Node0x57a7a90;
	Node0x57a8340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%138:\l138:                                              \l  ret void\l}"];
}
