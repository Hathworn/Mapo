digraph "CFG for '_Z28ChangeRecurrentWeightsKernelPfS_S_S_S_ff' function" {
	label="CFG for '_Z28ChangeRecurrentWeightsKernelPfS_S_S_S_ff' function";

	Node0x587f370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !6\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = udiv i32 %15, %12\l  %19 = mul i32 %18, %12\l  %20 = icmp ugt i32 %15, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %22, %17\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %25 = add i32 %23, %16\l  %26 = mul i32 %25, %12\l  %27 = add i32 %26, %24\l  %28 = load i32, i32 addrspace(4)* @D_HIDDEN_UNITS, align 4, !tbaa !16\l  %29 = mul i32 %28, %28\l  %30 = icmp slt i32 %27, %29\l  br i1 %30, label %31, label %189\l|{<s0>T|<s1>F}}"];
	Node0x587f370:s0 -> Node0x5881800;
	Node0x587f370:s1 -> Node0x5881890;
	Node0x5881800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%31:\l31:                                               \l  %32 = load i32, i32 addrspace(4)* @D_OUTPUT_UNITS, align 4, !tbaa !16\l  %33 = icmp sgt i32 %32, 0\l  br i1 %33, label %34, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5881800:s0 -> Node0x5880ab0;
	Node0x5881800:s1 -> Node0x5882260;
	Node0x5880ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%34:\l34:                                               \l  %35 = icmp sgt i32 %28, 0\l  %36 = and i32 %28, 7\l  %37 = icmp ult i32 %28, 8\l  %38 = and i32 %28, -8\l  %39 = icmp eq i32 %36, 0\l  br label %40\l}"];
	Node0x5880ab0 -> Node0x58826a0;
	Node0x58826a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%40:\l40:                                               \l  %41 = phi float [ 0.000000e+00, %34 ], [ %84, %78 ]\l  %42 = phi i32 [ 0, %34 ], [ %85, %78 ]\l  br i1 %35, label %43, label %78\l|{<s0>T|<s1>F}}"];
	Node0x58826a0:s0 -> Node0x5883440;
	Node0x58826a0:s1 -> Node0x58831e0;
	Node0x5883440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%43:\l43:                                               \l  %44 = mul nsw i32 %42, %28\l  br i1 %37, label %56, label %87\l|{<s0>T|<s1>F}}"];
	Node0x5883440:s0 -> Node0x5883610;
	Node0x5883440:s1 -> Node0x5883660;
	Node0x5882260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%45:\l45:                                               \l  %46 = phi float [ 0.000000e+00, %31 ], [ %84, %78 ]\l  %47 = fmul contract float %46, %5\l  %48 = sext i32 %27 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %51 = fmul contract float %50, %6\l  %52 = fadd contract float %47, %51\l  store float %52, float addrspace(1)* %49, align 4, !tbaa !20\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !20\l  %55 = fadd contract float %54, %52\l  store float %55, float addrspace(1)* %53, align 4, !tbaa !20\l  br label %189\l}"];
	Node0x5882260 -> Node0x5881890;
	Node0x5883610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%56:\l56:                                               \l  %57 = phi float [ undef, %43 ], [ %185, %87 ]\l  %58 = phi i32 [ 0, %43 ], [ %186, %87 ]\l  %59 = phi float [ 0.000000e+00, %43 ], [ %185, %87 ]\l  br i1 %39, label %78, label %60\l|{<s0>T|<s1>F}}"];
	Node0x5883610:s0 -> Node0x58831e0;
	Node0x5883610:s1 -> Node0x5885310;
	Node0x5885310 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%60:\l60:                                               \l  %61 = phi i32 [ %75, %60 ], [ %58, %56 ]\l  %62 = phi float [ %74, %60 ], [ %59, %56 ]\l  %63 = phi i32 [ %76, %60 ], [ 0, %56 ]\l  %64 = add nsw i32 %61, %44\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %68 = mul i32 %29, %61\l  %69 = add nsw i32 %68, %27\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %4, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %73 = fmul contract float %67, %72\l  %74 = fadd contract float %62, %73\l  %75 = add nuw nsw i32 %61, 1\l  %76 = add i32 %63, 1\l  %77 = icmp eq i32 %76, %36\l  br i1 %77, label %78, label %60, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5885310:s0 -> Node0x58831e0;
	Node0x5885310:s1 -> Node0x5885310;
	Node0x58831e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%78:\l78:                                               \l  %79 = phi float [ 0.000000e+00, %40 ], [ %57, %56 ], [ %74, %60 ]\l  %80 = zext i32 %42 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %3, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %83 = fmul contract float %79, %82\l  %84 = fadd contract float %41, %83\l  %85 = add nuw nsw i32 %42, 1\l  %86 = icmp eq i32 %85, %32\l  br i1 %86, label %45, label %40, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x58831e0:s0 -> Node0x5882260;
	Node0x58831e0:s1 -> Node0x58826a0;
	Node0x5883660 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%87:\l87:                                               \l  %88 = phi i32 [ %186, %87 ], [ 0, %43 ]\l  %89 = phi float [ %185, %87 ], [ 0.000000e+00, %43 ]\l  %90 = phi i32 [ %187, %87 ], [ 0, %43 ]\l  %91 = add nsw i32 %88, %44\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %2, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %95 = mul i32 %29, %88\l  %96 = add nsw i32 %95, %27\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %4, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %100 = fmul contract float %94, %99\l  %101 = fadd contract float %89, %100\l  %102 = or i32 %88, 1\l  %103 = add nsw i32 %102, %44\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %2, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %107 = mul i32 %29, %102\l  %108 = add nsw i32 %107, %27\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds float, float addrspace(1)* %4, i64 %109\l  %111 = load float, float addrspace(1)* %110, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %112 = fmul contract float %106, %111\l  %113 = fadd contract float %101, %112\l  %114 = or i32 %88, 2\l  %115 = add nsw i32 %114, %44\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %2, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %119 = mul i32 %29, %114\l  %120 = add nsw i32 %119, %27\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %4, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %124 = fmul contract float %118, %123\l  %125 = fadd contract float %113, %124\l  %126 = or i32 %88, 3\l  %127 = add nsw i32 %126, %44\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %2, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %131 = mul i32 %29, %126\l  %132 = add nsw i32 %131, %27\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %4, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %136 = fmul contract float %130, %135\l  %137 = fadd contract float %125, %136\l  %138 = or i32 %88, 4\l  %139 = add nsw i32 %138, %44\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %2, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %143 = mul i32 %29, %138\l  %144 = add nsw i32 %143, %27\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds float, float addrspace(1)* %4, i64 %145\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %148 = fmul contract float %142, %147\l  %149 = fadd contract float %137, %148\l  %150 = or i32 %88, 5\l  %151 = add nsw i32 %150, %44\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %2, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %155 = mul i32 %29, %150\l  %156 = add nsw i32 %155, %27\l  %157 = sext i32 %156 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %4, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %160 = fmul contract float %154, %159\l  %161 = fadd contract float %149, %160\l  %162 = or i32 %88, 6\l  %163 = add nsw i32 %162, %44\l  %164 = sext i32 %163 to i64\l  %165 = getelementptr inbounds float, float addrspace(1)* %2, i64 %164\l  %166 = load float, float addrspace(1)* %165, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %167 = mul i32 %29, %162\l  %168 = add nsw i32 %167, %27\l  %169 = sext i32 %168 to i64\l  %170 = getelementptr inbounds float, float addrspace(1)* %4, i64 %169\l  %171 = load float, float addrspace(1)* %170, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %172 = fmul contract float %166, %171\l  %173 = fadd contract float %161, %172\l  %174 = or i32 %88, 7\l  %175 = add nsw i32 %174, %44\l  %176 = sext i32 %175 to i64\l  %177 = getelementptr inbounds float, float addrspace(1)* %2, i64 %176\l  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %179 = mul i32 %29, %174\l  %180 = add nsw i32 %179, %27\l  %181 = sext i32 %180 to i64\l  %182 = getelementptr inbounds float, float addrspace(1)* %4, i64 %181\l  %183 = load float, float addrspace(1)* %182, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %184 = fmul contract float %178, %183\l  %185 = fadd contract float %173, %184\l  %186 = add nuw nsw i32 %88, 8\l  %187 = add i32 %90, 8\l  %188 = icmp eq i32 %187, %38\l  br i1 %188, label %56, label %87, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5883660:s0 -> Node0x5883610;
	Node0x5883660:s1 -> Node0x5883660;
	Node0x5881890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%189:\l189:                                              \l  ret void\l}"];
}
