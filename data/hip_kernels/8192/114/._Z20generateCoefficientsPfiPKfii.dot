digraph "CFG for '_Z20generateCoefficientsPfiPKfii' function" {
	label="CFG for '_Z20generateCoefficientsPfiPKfii' function";

	Node0x56e1af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%5:\l  %6 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 2, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 8\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %7, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !6\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %25 = add i32 %21, %22\l  %26 = mul i32 %25, %16\l  %27 = add i32 %26, %23\l  %28 = mul i32 %27, %12\l  %29 = add i32 %28, %24\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %33 = fptosi float %32 to i32\l  %34 = shl i32 %33, %29\l  %35 = sitofp i32 %29 to float\l  %36 = add nsw i32 %3, -1\l  %37 = icmp eq i32 %29, %36\l  br i1 %37, label %38, label %40\l|{<s0>T|<s1>F}}"];
	Node0x56e1af0:s0 -> Node0x56e9200;
	Node0x56e1af0:s1 -> Node0x56e9290;
	Node0x56e9200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%38:\l38:                                               \l  %39 = load float, float addrspace(1)* %2, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  br label %40\l}"];
	Node0x56e9200 -> Node0x56e9290;
	Node0x56e9290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%40:\l40:                                               \l  %41 = phi contract float [ %39, %38 ], [ %32, %5 ]\l  %42 = fmul contract float %41, %35\l  %43 = fptoui float %42 to i64\l  %44 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %44) #3\l  %45 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 0\l  %46 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 1\l  %47 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 2\l  %48 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 3\l  %49 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 4\l  %50 = xor i32 %34, 746559103\l  %51 = icmp sgt i32 %34, -1\l  %52 = mul i32 %50, 1228688033\l  %53 = select i1 %51, i32 -1973591729, i32 -100066652\l  %54 = add i32 %52, 123456789\l  store i32 %54, i32 addrspace(5)* %45, align 8, !tbaa !11\l  %55 = xor i32 %52, 362436069\l  store i32 %55, i32 addrspace(5)* %46, align 4, !tbaa !11\l  %56 = add nsw i32 %53, 521288629\l  store i32 %56, i32 addrspace(5)* %47, align 8, !tbaa !11\l  %57 = xor i32 %53, 88675123\l  store i32 %57, i32 addrspace(5)* %48, align 4, !tbaa !11\l  %58 = add i32 %52, 5783321\l  store i32 %58, i32 addrspace(5)* %49, align 8, !tbaa !11\l  %59 = add i32 %52, 6615241\l  %60 = add i32 %59, %53\l  %61 = icmp eq i64 %43, 0\l  br i1 %61, label %249, label %62\l|{<s0>T|<s1>F}}"];
	Node0x56e9290:s0 -> Node0x56eb6f0;
	Node0x56e9290:s1 -> Node0x56eb780;
	Node0x56eb780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%62:\l62:                                               \l  %63 = phi i32 [ %76, %75 ], [ %58, %40 ]\l  %64 = phi i32 [ %77, %75 ], [ %57, %40 ]\l  %65 = phi i32 [ %78, %75 ], [ %56, %40 ]\l  %66 = phi i32 [ %79, %75 ], [ %55, %40 ]\l  %67 = phi i32 [ %80, %75 ], [ %54, %40 ]\l  %68 = phi i64 [ %82, %75 ], [ %43, %40 ]\l  %69 = phi i32 [ %81, %75 ], [ 0, %40 ]\l  %70 = trunc i64 %68 to i32\l  %71 = and i32 %70, 3\l  %72 = icmp eq i32 %71, 0\l  br i1 %72, label %75, label %73\l|{<s0>T|<s1>F}}"];
	Node0x56eb780:s0 -> Node0x56eb8f0;
	Node0x56eb780:s1 -> Node0x56ec480;
	Node0x56ec480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%73:\l73:                                               \l  %74 = zext i32 %69 to i64\l  br label %84\l}"];
	Node0x56ec480 -> Node0x56ec630;
	Node0x56eb8f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{%75:\l75:                                               \l  %76 = phi i32 [ %63, %62 ], [ %243, %246 ]\l  %77 = phi i32 [ %64, %62 ], [ %237, %246 ]\l  %78 = phi i32 [ %65, %62 ], [ %231, %246 ]\l  %79 = phi i32 [ %66, %62 ], [ %225, %246 ]\l  %80 = phi i32 [ %67, %62 ], [ %219, %246 ]\l  %81 = add nuw nsw i32 %69, 1\l  %82 = lshr i64 %68, 2\l  %83 = icmp ult i64 %68, 4\l  br i1 %83, label %249, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x56eb8f0:s0 -> Node0x56eb6f0;
	Node0x56eb8f0:s1 -> Node0x56eb780;
	Node0x56ec630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%84:\l84:                                               \l  %85 = phi i32 [ 0, %73 ], [ %247, %246 ]\l  br label %86\l}"];
	Node0x56ec630 -> Node0x56eceb0;
	Node0x56eceb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%86:\l86:                                               \l  %87 = phi i32 [ 0, %84 ], [ %219, %86 ]\l  %88 = phi i32 [ 0, %84 ], [ %225, %86 ]\l  %89 = phi i32 [ 0, %84 ], [ %231, %86 ]\l  %90 = phi i32 [ 0, %84 ], [ %237, %86 ]\l  %91 = phi i32 [ 0, %84 ], [ %243, %86 ]\l  %92 = phi i32 [ 0, %84 ], [ %244, %86 ]\l  %93 = lshr i32 %92, 5\l  %94 = and i32 %92, 28\l  %95 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 %93\l  %96 = load i32, i32 addrspace(5)* %95, align 4, !tbaa !11\l  %97 = shl nuw i32 1, %94\l  %98 = and i32 %97, %96\l  %99 = icmp eq i32 %98, 0\l  %100 = mul nuw nsw i32 %92, 5\l  %101 = zext i32 %100 to i64\l  %102 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %101\l  %103 = load i32, i32 addrspace(4)* %102, align 16, !tbaa !11\l  %104 = select i1 %99, i32 0, i32 %103\l  %105 = xor i32 %104, %87\l  %106 = or i32 %100, 1\l  %107 = zext i32 %106 to i64\l  %108 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %107\l  %109 = load i32, i32 addrspace(4)* %108, align 4, !tbaa !11\l  %110 = select i1 %99, i32 0, i32 %109\l  %111 = xor i32 %110, %88\l  %112 = or i32 %100, 2\l  %113 = zext i32 %112 to i64\l  %114 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %113\l  %115 = load i32, i32 addrspace(4)* %114, align 8, !tbaa !11\l  %116 = select i1 %99, i32 0, i32 %115\l  %117 = xor i32 %116, %89\l  %118 = or i32 %100, 3\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %119\l  %121 = load i32, i32 addrspace(4)* %120, align 4, !tbaa !11\l  %122 = select i1 %99, i32 0, i32 %121\l  %123 = xor i32 %122, %90\l  %124 = add nuw nsw i32 %100, 4\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %125\l  %127 = load i32, i32 addrspace(4)* %126, align 16, !tbaa !11\l  %128 = select i1 %99, i32 0, i32 %127\l  %129 = xor i32 %128, %91\l  %130 = or i32 %92, 1\l  %131 = lshr i32 %92, 5\l  %132 = and i32 %130, 29\l  %133 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 %131\l  %134 = load i32, i32 addrspace(5)* %133, align 4, !tbaa !11\l  %135 = shl nuw i32 1, %132\l  %136 = and i32 %135, %134\l  %137 = icmp eq i32 %136, 0\l  %138 = mul nuw nsw i32 %130, 5\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %139\l  %141 = load i32, i32 addrspace(4)* %140, align 4, !tbaa !11\l  %142 = select i1 %137, i32 0, i32 %141\l  %143 = xor i32 %142, %105\l  %144 = add nuw nsw i32 %138, 1\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %145\l  %147 = load i32, i32 addrspace(4)* %146, align 8, !tbaa !11\l  %148 = select i1 %137, i32 0, i32 %147\l  %149 = xor i32 %148, %111\l  %150 = or i32 %138, 2\l  %151 = zext i32 %150 to i64\l  %152 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %151\l  %153 = load i32, i32 addrspace(4)* %152, align 4, !tbaa !11\l  %154 = select i1 %137, i32 0, i32 %153\l  %155 = xor i32 %154, %117\l  %156 = add nuw nsw i32 %138, 3\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %157\l  %159 = load i32, i32 addrspace(4)* %158, align 16, !tbaa !11\l  %160 = select i1 %137, i32 0, i32 %159\l  %161 = xor i32 %160, %123\l  %162 = add nuw nsw i32 %138, 4\l  %163 = zext i32 %162 to i64\l  %164 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %163\l  %165 = load i32, i32 addrspace(4)* %164, align 4, !tbaa !11\l  %166 = select i1 %137, i32 0, i32 %165\l  %167 = xor i32 %166, %129\l  %168 = or i32 %92, 2\l  %169 = lshr i32 %92, 5\l  %170 = and i32 %168, 30\l  %171 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 %169\l  %172 = load i32, i32 addrspace(5)* %171, align 4, !tbaa !11\l  %173 = shl nuw i32 1, %170\l  %174 = and i32 %173, %172\l  %175 = icmp eq i32 %174, 0\l  %176 = mul nuw nsw i32 %168, 5\l  %177 = zext i32 %176 to i64\l  %178 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %177\l  %179 = load i32, i32 addrspace(4)* %178, align 8, !tbaa !11\l  %180 = select i1 %175, i32 0, i32 %179\l  %181 = xor i32 %180, %143\l  %182 = or i32 %176, 1\l  %183 = zext i32 %182 to i64\l  %184 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %183\l  %185 = load i32, i32 addrspace(4)* %184, align 4, !tbaa !11\l  %186 = select i1 %175, i32 0, i32 %185\l  %187 = xor i32 %186, %149\l  %188 = add nuw nsw i32 %176, 2\l  %189 = zext i32 %188 to i64\l  %190 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %189\l  %191 = load i32, i32 addrspace(4)* %190, align 16, !tbaa !11\l  %192 = select i1 %175, i32 0, i32 %191\l  %193 = xor i32 %192, %155\l  %194 = add nuw nsw i32 %176, 3\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %195\l  %197 = load i32, i32 addrspace(4)* %196, align 4, !tbaa !11\l  %198 = select i1 %175, i32 0, i32 %197\l  %199 = xor i32 %198, %161\l  %200 = add nuw nsw i32 %176, 4\l  %201 = zext i32 %200 to i64\l  %202 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %201\l  %203 = load i32, i32 addrspace(4)* %202, align 8, !tbaa !11\l  %204 = select i1 %175, i32 0, i32 %203\l  %205 = xor i32 %204, %167\l  %206 = or i32 %92, 3\l  %207 = lshr i32 %92, 5\l  %208 = and i32 %206, 31\l  %209 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %6, i32 0, i32 0, i32 5,\l... i32 %207\l  %210 = load i32, i32 addrspace(5)* %209, align 4, !tbaa !11\l  %211 = shl nuw i32 1, %208\l  %212 = and i32 %211, %210\l  %213 = icmp eq i32 %212, 0\l  %214 = mul nuw nsw i32 %206, 5\l  %215 = zext i32 %214 to i64\l  %216 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %215\l  %217 = load i32, i32 addrspace(4)* %216, align 4, !tbaa !11\l  %218 = select i1 %213, i32 0, i32 %217\l  %219 = xor i32 %218, %181\l  %220 = add nuw nsw i32 %214, 1\l  %221 = zext i32 %220 to i64\l  %222 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %221\l  %223 = load i32, i32 addrspace(4)* %222, align 16, !tbaa !11\l  %224 = select i1 %213, i32 0, i32 %223\l  %225 = xor i32 %224, %187\l  %226 = add nuw nsw i32 %214, 2\l  %227 = zext i32 %226 to i64\l  %228 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %227\l  %229 = load i32, i32 addrspace(4)* %228, align 4, !tbaa !11\l  %230 = select i1 %213, i32 0, i32 %229\l  %231 = xor i32 %230, %193\l  %232 = add nuw nsw i32 %214, 3\l  %233 = zext i32 %232 to i64\l  %234 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %233\l  %235 = load i32, i32 addrspace(4)* %234, align 8, !tbaa !11\l  %236 = select i1 %213, i32 0, i32 %235\l  %237 = xor i32 %236, %199\l  %238 = add nuw nsw i32 %214, 4\l  %239 = zext i32 %238 to i64\l  %240 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %74, i64 %239\l  %241 = load i32, i32 addrspace(4)* %240, align 4, !tbaa !11\l  %242 = select i1 %213, i32 0, i32 %241\l  %243 = xor i32 %242, %205\l  %244 = add nuw nsw i32 %92, 4\l  %245 = icmp eq i32 %244, 160\l  br i1 %245, label %246, label %86, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56eceb0:s0 -> Node0x56ec720;
	Node0x56eceb0:s1 -> Node0x56eceb0;
	Node0x56ec720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%246:\l246:                                              \l  store i32 %219, i32 addrspace(5)* %45, align 8, !tbaa !11\l  store i32 %225, i32 addrspace(5)* %46, align 4, !tbaa !11\l  store i32 %231, i32 addrspace(5)* %47, align 8, !tbaa !11\l  store i32 %237, i32 addrspace(5)* %48, align 4, !tbaa !11\l  store i32 %243, i32 addrspace(5)* %49, align 8, !tbaa !11\l  %247 = add nuw nsw i32 %85, 1\l  %248 = icmp eq i32 %247, %71\l  br i1 %248, label %75, label %84, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x56ec720:s0 -> Node0x56eb8f0;
	Node0x56ec720:s1 -> Node0x56ec630;
	Node0x56eb6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%249:\l249:                                              \l  %250 = phi i32 [ %58, %40 ], [ %76, %75 ]\l  %251 = phi i32 [ %57, %40 ], [ %77, %75 ]\l  %252 = phi i32 [ %56, %40 ], [ %78, %75 ]\l  %253 = phi i32 [ %55, %40 ], [ %79, %75 ]\l  %254 = phi i32 [ %54, %40 ], [ %80, %75 ]\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %44) #3\l  %255 = icmp sgt i32 %29, 0\l  %256 = icmp sgt i32 %1, 0\l  %257 = select i1 %255, i1 %256, i1 false\l  br i1 %257, label %258, label %379\l|{<s0>T|<s1>F}}"];
	Node0x56eb6f0:s0 -> Node0x56eead0;
	Node0x56eb6f0:s1 -> Node0x56eeb20;
	Node0x56eead0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%258:\l258:                                              \l  %259 = sitofp i32 %4 to float\l  %260 = mul nsw i32 %29, %1\l  %261 = and i32 %1, 1\l  %262 = icmp eq i32 %1, 1\l  br i1 %262, label %340, label %263\l|{<s0>T|<s1>F}}"];
	Node0x56eead0:s0 -> Node0x56eee80;
	Node0x56eead0:s1 -> Node0x56eeed0;
	Node0x56eeed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7093f370",label="{%263:\l263:                                              \l  %264 = and i32 %1, -2\l  br label %265\l}"];
	Node0x56eeed0 -> Node0x56ef0a0;
	Node0x56ef0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%265:\l265:                                              \l  %266 = phi i32 [ 0, %263 ], [ %337, %265 ]\l  %267 = phi i32 [ %60, %263 ], [ %326, %265 ]\l  %268 = phi i32 [ %254, %263 ], [ %272, %265 ]\l  %269 = phi i32 [ %253, %263 ], [ %280, %265 ]\l  %270 = phi i32 [ %252, %263 ], [ %293, %265 ]\l  %271 = phi i32 [ %251, %263 ], [ %312, %265 ]\l  %272 = phi i32 [ %250, %263 ], [ %325, %265 ]\l  %273 = phi i32 [ 0, %263 ], [ %338, %265 ]\l  %274 = lshr i32 %268, 2\l  %275 = xor i32 %274, %268\l  %276 = shl i32 %272, 4\l  %277 = shl i32 %275, 1\l  %278 = xor i32 %276, %277\l  %279 = xor i32 %278, %272\l  %280 = xor i32 %279, %275\l  %281 = add i32 %267, 362437\l  %282 = add i32 %281, %280\l  %283 = uitofp i32 %282 to float\l  %284 = fmul contract float %283, 0x3DF0000000000000\l  %285 = fadd contract float %284, 0x3DF0000000000000\l  %286 = fcmp contract olt float %285, 5.000000e-01\l  %287 = lshr i32 %269, 2\l  %288 = xor i32 %287, %269\l  %289 = shl i32 %280, 4\l  %290 = shl i32 %288, 1\l  %291 = xor i32 %290, %289\l  %292 = xor i32 %291, %288\l  %293 = xor i32 %292, %280\l  %294 = add i32 %267, 724874\l  %295 = add i32 %293, %294\l  %296 = uitofp i32 %295 to float\l  %297 = fmul contract float %296, 0x3DF0000000000000\l  %298 = fadd contract float %297, 0x3DF0000000000000\l  %299 = fneg contract float %298\l  %300 = select i1 %286, float %298, float %299\l  %301 = fmul contract float %300, %259\l  %302 = add nsw i32 %266, %260\l  %303 = sext i32 %302 to i64\l  %304 = getelementptr inbounds float, float addrspace(1)* %0, i64 %303\l  store float %301, float addrspace(1)* %304, align 4, !tbaa !7\l  %305 = or i32 %266, 1\l  %306 = lshr i32 %270, 2\l  %307 = xor i32 %306, %270\l  %308 = shl i32 %293, 4\l  %309 = shl i32 %307, 1\l  %310 = xor i32 %308, %309\l  %311 = xor i32 %310, %293\l  %312 = xor i32 %311, %307\l  %313 = add i32 %267, 1087311\l  %314 = add i32 %313, %312\l  %315 = uitofp i32 %314 to float\l  %316 = fmul contract float %315, 0x3DF0000000000000\l  %317 = fadd contract float %316, 0x3DF0000000000000\l  %318 = fcmp contract olt float %317, 5.000000e-01\l  %319 = lshr i32 %271, 2\l  %320 = xor i32 %319, %271\l  %321 = shl i32 %312, 4\l  %322 = shl i32 %320, 1\l  %323 = xor i32 %322, %321\l  %324 = xor i32 %323, %320\l  %325 = xor i32 %324, %312\l  %326 = add i32 %267, 1449748\l  %327 = add i32 %325, %326\l  %328 = uitofp i32 %327 to float\l  %329 = fmul contract float %328, 0x3DF0000000000000\l  %330 = fadd contract float %329, 0x3DF0000000000000\l  %331 = fneg contract float %330\l  %332 = select i1 %318, float %330, float %331\l  %333 = fmul contract float %332, %259\l  %334 = add nsw i32 %305, %260\l  %335 = sext i32 %334 to i64\l  %336 = getelementptr inbounds float, float addrspace(1)* %0, i64 %335\l  store float %333, float addrspace(1)* %336, align 4, !tbaa !7\l  %337 = add nuw nsw i32 %266, 2\l  %338 = add i32 %273, 2\l  %339 = icmp eq i32 %338, %264\l  br i1 %339, label %340, label %265, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x56ef0a0:s0 -> Node0x56eee80;
	Node0x56ef0a0:s1 -> Node0x56ef0a0;
	Node0x56eee80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%340:\l340:                                              \l  %341 = phi i32 [ 0, %258 ], [ %337, %265 ]\l  %342 = phi i32 [ %60, %258 ], [ %326, %265 ]\l  %343 = phi i32 [ %254, %258 ], [ %272, %265 ]\l  %344 = phi i32 [ %253, %258 ], [ %280, %265 ]\l  %345 = phi i32 [ %250, %258 ], [ %325, %265 ]\l  %346 = icmp eq i32 %261, 0\l  br i1 %346, label %379, label %347\l|{<s0>T|<s1>F}}"];
	Node0x56eee80:s0 -> Node0x56eeb20;
	Node0x56eee80:s1 -> Node0x56eaee0;
	Node0x56eaee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7093f370",label="{%347:\l347:                                              \l  %348 = lshr i32 %343, 2\l  %349 = xor i32 %348, %343\l  %350 = shl i32 %345, 4\l  %351 = shl i32 %349, 1\l  %352 = xor i32 %350, %351\l  %353 = xor i32 %352, %345\l  %354 = xor i32 %353, %349\l  %355 = add i32 %342, 362437\l  %356 = add i32 %355, %354\l  %357 = uitofp i32 %356 to float\l  %358 = fmul contract float %357, 0x3DF0000000000000\l  %359 = fadd contract float %358, 0x3DF0000000000000\l  %360 = fcmp contract olt float %359, 5.000000e-01\l  %361 = lshr i32 %344, 2\l  %362 = xor i32 %361, %344\l  %363 = shl i32 %354, 4\l  %364 = shl i32 %362, 1\l  %365 = xor i32 %364, %363\l  %366 = xor i32 %365, %362\l  %367 = xor i32 %366, %354\l  %368 = add i32 %342, 724874\l  %369 = add i32 %367, %368\l  %370 = uitofp i32 %369 to float\l  %371 = fmul contract float %370, 0x3DF0000000000000\l  %372 = fadd contract float %371, 0x3DF0000000000000\l  %373 = fneg contract float %372\l  %374 = select i1 %360, float %372, float %373\l  %375 = fmul contract float %374, %259\l  %376 = add nsw i32 %341, %260\l  %377 = sext i32 %376 to i64\l  %378 = getelementptr inbounds float, float addrspace(1)* %0, i64 %377\l  store float %375, float addrspace(1)* %378, align 4, !tbaa !7\l  br label %379\l}"];
	Node0x56eaee0 -> Node0x56eeb20;
	Node0x56eeb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%379:\l379:                                              \l  ret void\l}"];
}
