digraph "CFG for '_Z24ChangeInputWeightsKernelPfS_S_S_S_ff' function" {
	label="CFG for '_Z24ChangeInputWeightsKernelPfS_S_S_S_ff' function";

	Node0x5b6b5d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !6\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = udiv i32 %15, %12\l  %19 = mul i32 %18, %12\l  %20 = icmp ugt i32 %15, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %22, %17\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %25 = add i32 %23, %16\l  %26 = mul i32 %25, %12\l  %27 = add i32 %26, %24\l  %28 = load i32, i32 addrspace(4)* @D_HIDDEN_UNITS, align 4, !tbaa !16\l  %29 = load i32, i32 addrspace(4)* @D_INPUT_UNITS, align 4, !tbaa !16\l  %30 = mul i32 %29, %28\l  %31 = icmp slt i32 %27, %30\l  br i1 %31, label %32, label %190\l|{<s0>T|<s1>F}}"];
	Node0x5b6b5d0:s0 -> Node0x5b6e0e0;
	Node0x5b6b5d0:s1 -> Node0x5b6e170;
	Node0x5b6e0e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%32:\l32:                                               \l  %33 = load i32, i32 addrspace(4)* @D_OUTPUT_UNITS, align 4, !tbaa !16\l  %34 = icmp sgt i32 %33, 0\l  br i1 %34, label %35, label %46\l|{<s0>T|<s1>F}}"];
	Node0x5b6e0e0:s0 -> Node0x5b6e4c0;
	Node0x5b6e0e0:s1 -> Node0x5b6e510;
	Node0x5b6e4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%35:\l35:                                               \l  %36 = icmp sgt i32 %28, 0\l  %37 = and i32 %28, 7\l  %38 = icmp ult i32 %28, 8\l  %39 = and i32 %28, -8\l  %40 = icmp eq i32 %37, 0\l  br label %41\l}"];
	Node0x5b6e4c0 -> Node0x5b6e980;
	Node0x5b6e980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%41:\l41:                                               \l  %42 = phi float [ 0.000000e+00, %35 ], [ %85, %79 ]\l  %43 = phi i32 [ 0, %35 ], [ %86, %79 ]\l  br i1 %36, label %44, label %79\l|{<s0>T|<s1>F}}"];
	Node0x5b6e980:s0 -> Node0x5b6f720;
	Node0x5b6e980:s1 -> Node0x5b6f4c0;
	Node0x5b6f720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = mul nsw i32 %43, %28\l  br i1 %38, label %57, label %88\l|{<s0>T|<s1>F}}"];
	Node0x5b6f720:s0 -> Node0x5b6f8f0;
	Node0x5b6f720:s1 -> Node0x5b6f940;
	Node0x5b6e510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%46:\l46:                                               \l  %47 = phi float [ 0.000000e+00, %32 ], [ %85, %79 ]\l  %48 = fmul contract float %47, %5\l  %49 = sext i32 %27 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %52 = fmul contract float %51, %6\l  %53 = fadd contract float %48, %52\l  store float %53, float addrspace(1)* %50, align 4, !tbaa !20\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %49\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !20\l  %56 = fadd contract float %55, %53\l  store float %56, float addrspace(1)* %54, align 4, !tbaa !20\l  br label %190\l}"];
	Node0x5b6e510 -> Node0x5b6e170;
	Node0x5b6f8f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%57:\l57:                                               \l  %58 = phi float [ undef, %44 ], [ %186, %88 ]\l  %59 = phi i32 [ 0, %44 ], [ %187, %88 ]\l  %60 = phi float [ 0.000000e+00, %44 ], [ %186, %88 ]\l  br i1 %40, label %79, label %61\l|{<s0>T|<s1>F}}"];
	Node0x5b6f8f0:s0 -> Node0x5b6f4c0;
	Node0x5b6f8f0:s1 -> Node0x5b715f0;
	Node0x5b715f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%61:\l61:                                               \l  %62 = phi i32 [ %76, %61 ], [ %59, %57 ]\l  %63 = phi float [ %75, %61 ], [ %60, %57 ]\l  %64 = phi i32 [ %77, %61 ], [ 0, %57 ]\l  %65 = add nsw i32 %62, %45\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %2, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %69 = mul i32 %30, %62\l  %70 = add nsw i32 %69, %27\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %4, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %74 = fmul contract float %68, %73\l  %75 = fadd contract float %63, %74\l  %76 = add nuw nsw i32 %62, 1\l  %77 = add i32 %64, 1\l  %78 = icmp eq i32 %77, %37\l  br i1 %78, label %79, label %61, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5b715f0:s0 -> Node0x5b6f4c0;
	Node0x5b715f0:s1 -> Node0x5b715f0;
	Node0x5b6f4c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%79:\l79:                                               \l  %80 = phi float [ 0.000000e+00, %41 ], [ %58, %57 ], [ %75, %61 ]\l  %81 = zext i32 %43 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %3, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %84 = fmul contract float %80, %83\l  %85 = fadd contract float %42, %84\l  %86 = add nuw nsw i32 %43, 1\l  %87 = icmp eq i32 %86, %33\l  br i1 %87, label %46, label %41, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5b6f4c0:s0 -> Node0x5b6e510;
	Node0x5b6f4c0:s1 -> Node0x5b6e980;
	Node0x5b6f940 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%88:\l88:                                               \l  %89 = phi i32 [ %187, %88 ], [ 0, %44 ]\l  %90 = phi float [ %186, %88 ], [ 0.000000e+00, %44 ]\l  %91 = phi i32 [ %188, %88 ], [ 0, %44 ]\l  %92 = add nsw i32 %89, %45\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %96 = mul i32 %30, %89\l  %97 = add nsw i32 %96, %27\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %4, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %101 = fmul contract float %95, %100\l  %102 = fadd contract float %90, %101\l  %103 = or i32 %89, 1\l  %104 = add nsw i32 %103, %45\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %2, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %108 = mul i32 %30, %103\l  %109 = add nsw i32 %108, %27\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %4, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %113 = fmul contract float %107, %112\l  %114 = fadd contract float %102, %113\l  %115 = or i32 %89, 2\l  %116 = add nsw i32 %115, %45\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %2, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %120 = mul i32 %30, %115\l  %121 = add nsw i32 %120, %27\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %4, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %125 = fmul contract float %119, %124\l  %126 = fadd contract float %114, %125\l  %127 = or i32 %89, 3\l  %128 = add nsw i32 %127, %45\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %2, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %132 = mul i32 %30, %127\l  %133 = add nsw i32 %132, %27\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %4, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %137 = fmul contract float %131, %136\l  %138 = fadd contract float %126, %137\l  %139 = or i32 %89, 4\l  %140 = add nsw i32 %139, %45\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %2, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %144 = mul i32 %30, %139\l  %145 = add nsw i32 %144, %27\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %4, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %149 = fmul contract float %143, %148\l  %150 = fadd contract float %138, %149\l  %151 = or i32 %89, 5\l  %152 = add nsw i32 %151, %45\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %2, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %156 = mul i32 %30, %151\l  %157 = add nsw i32 %156, %27\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %4, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %161 = fmul contract float %155, %160\l  %162 = fadd contract float %150, %161\l  %163 = or i32 %89, 6\l  %164 = add nsw i32 %163, %45\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %2, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %168 = mul i32 %30, %163\l  %169 = add nsw i32 %168, %27\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %4, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %173 = fmul contract float %167, %172\l  %174 = fadd contract float %162, %173\l  %175 = or i32 %89, 7\l  %176 = add nsw i32 %175, %45\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds float, float addrspace(1)* %2, i64 %177\l  %179 = load float, float addrspace(1)* %178, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %180 = mul i32 %30, %175\l  %181 = add nsw i32 %180, %27\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds float, float addrspace(1)* %4, i64 %182\l  %184 = load float, float addrspace(1)* %183, align 4, !tbaa !20,\l... !amdgpu.noclobber !5\l  %185 = fmul contract float %179, %184\l  %186 = fadd contract float %174, %185\l  %187 = add nuw nsw i32 %89, 8\l  %188 = add i32 %91, 8\l  %189 = icmp eq i32 %188, %39\l  br i1 %189, label %57, label %88, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x5b6f940:s0 -> Node0x5b6f8f0;
	Node0x5b6f940:s1 -> Node0x5b6f940;
	Node0x5b6e170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%190:\l190:                                              \l  ret void\l}"];
}
