digraph "CFG for '_Z16RBMForwardKernelPfS_S_S_fiibbfS_' function" {
	label="CFG for '_Z16RBMForwardKernelPfS_S_S_fiibbfS_' function";

	Node0x4566ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%11:\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*\l  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !6\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %22 = udiv i32 %19, %16\l  %23 = mul i32 %22, %16\l  %24 = icmp ugt i32 %19, %23\l  %25 = zext i1 %24 to i32\l  %26 = add i32 %22, %25\l  %27 = mul i32 %26, %21\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %20\l  %30 = mul i32 %29, %16\l  %31 = add i32 %30, %28\l  %32 = icmp slt i32 %31, %6\l  br i1 %32, label %33, label %193\l|{<s0>T|<s1>F}}"];
	Node0x4566ce0:s0 -> Node0x4569020;
	Node0x4566ce0:s1 -> Node0x45690b0;
	Node0x4569020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%33:\l33:                                               \l  %34 = xor i1 %8, true\l  %35 = select i1 %8, i1 %7, i1 false\l  br i1 %35, label %36, label %41\l|{<s0>T|<s1>F}}"];
	Node0x4569020:s0 -> Node0x456a4e0;
	Node0x4569020:s1 -> Node0x456a530;
	Node0x456a4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%36:\l36:                                               \l  %37 = sext i32 %31 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %10, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %40 = fcmp contract une float %39, 0.000000e+00\l  br i1 %40, label %41, label %189\l|{<s0>T|<s1>F}}"];
	Node0x456a4e0:s0 -> Node0x456a530;
	Node0x456a4e0:s1 -> Node0x456ba90;
	Node0x456a530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%41:\l41:                                               \l  %42 = icmp sgt i32 %5, 0\l  br i1 %42, label %43, label %158\l|{<s0>T|<s1>F}}"];
	Node0x456a530:s0 -> Node0x456bc60;
	Node0x456a530:s1 -> Node0x456bcb0;
	Node0x456bc60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%43:\l43:                                               \l  %44 = and i32 %5, 7\l  %45 = icmp ult i32 %5, 8\l  br i1 %45, label %135, label %46\l|{<s0>T|<s1>F}}"];
	Node0x456bc60:s0 -> Node0x456bf70;
	Node0x456bc60:s1 -> Node0x456bfc0;
	Node0x456bfc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%46:\l46:                                               \l  %47 = and i32 %5, -8\l  br label %48\l}"];
	Node0x456bfc0 -> Node0x456c1c0;
	Node0x456c1c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%48:\l48:                                               \l  %49 = phi i32 [ %31, %46 ], [ %131, %48 ]\l  %50 = phi float [ 0.000000e+00, %46 ], [ %130, %48 ]\l  %51 = phi i32 [ 0, %46 ], [ %132, %48 ]\l  %52 = phi i32 [ 0, %46 ], [ %133, %48 ]\l  %53 = sext i32 %49 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %2, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %56 = zext i32 %51 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %59 = fmul contract float %55, %58\l  %60 = fadd contract float %50, %59\l  %61 = add nsw i32 %49, %6\l  %62 = or i32 %51, 1\l  %63 = sext i32 %61 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %2, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %66 = zext i32 %62 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %69 = fmul contract float %65, %68\l  %70 = fadd contract float %60, %69\l  %71 = add nsw i32 %61, %6\l  %72 = or i32 %51, 2\l  %73 = sext i32 %71 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %2, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %76 = zext i32 %72 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %79 = fmul contract float %75, %78\l  %80 = fadd contract float %70, %79\l  %81 = add nsw i32 %71, %6\l  %82 = or i32 %51, 3\l  %83 = sext i32 %81 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %2, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %86 = zext i32 %82 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %89 = fmul contract float %85, %88\l  %90 = fadd contract float %80, %89\l  %91 = add nsw i32 %81, %6\l  %92 = or i32 %51, 4\l  %93 = sext i32 %91 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %2, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %96 = zext i32 %92 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %99 = fmul contract float %95, %98\l  %100 = fadd contract float %90, %99\l  %101 = add nsw i32 %91, %6\l  %102 = or i32 %51, 5\l  %103 = sext i32 %101 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %2, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %106 = zext i32 %102 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %109 = fmul contract float %105, %108\l  %110 = fadd contract float %100, %109\l  %111 = add nsw i32 %101, %6\l  %112 = or i32 %51, 6\l  %113 = sext i32 %111 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %2, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %116 = zext i32 %112 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %0, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %119 = fmul contract float %115, %118\l  %120 = fadd contract float %110, %119\l  %121 = add nsw i32 %111, %6\l  %122 = or i32 %51, 7\l  %123 = sext i32 %121 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %2, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %126 = zext i32 %122 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %129 = fmul contract float %125, %128\l  %130 = fadd contract float %120, %129\l  %131 = add nsw i32 %121, %6\l  %132 = add nuw nsw i32 %51, 8\l  %133 = add i32 %52, 8\l  %134 = icmp eq i32 %133, %47\l  br i1 %134, label %135, label %48, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x456c1c0:s0 -> Node0x456bf70;
	Node0x456c1c0:s1 -> Node0x456c1c0;
	Node0x456bf70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%135:\l135:                                              \l  %136 = phi float [ undef, %43 ], [ %130, %48 ]\l  %137 = phi i32 [ %31, %43 ], [ %131, %48 ]\l  %138 = phi float [ 0.000000e+00, %43 ], [ %130, %48 ]\l  %139 = phi i32 [ 0, %43 ], [ %132, %48 ]\l  %140 = icmp eq i32 %44, 0\l  br i1 %140, label %158, label %141\l|{<s0>T|<s1>F}}"];
	Node0x456bf70:s0 -> Node0x456bcb0;
	Node0x456bf70:s1 -> Node0x4570ba0;
	Node0x4570ba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%141:\l141:                                              \l  %142 = phi i32 [ %154, %141 ], [ %137, %135 ]\l  %143 = phi float [ %153, %141 ], [ %138, %135 ]\l  %144 = phi i32 [ %155, %141 ], [ %139, %135 ]\l  %145 = phi i32 [ %156, %141 ], [ 0, %135 ]\l  %146 = sext i32 %142 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %2, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %149 = zext i32 %144 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %0, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %152 = fmul contract float %148, %151\l  %153 = fadd contract float %143, %152\l  %154 = add nsw i32 %142, %6\l  %155 = add nuw nsw i32 %144, 1\l  %156 = add i32 %145, 1\l  %157 = icmp eq i32 %156, %44\l  br i1 %157, label %158, label %141, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4570ba0:s0 -> Node0x456bcb0;
	Node0x4570ba0:s1 -> Node0x4570ba0;
	Node0x456bcb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%158:\l158:                                              \l  %159 = phi float [ 0.000000e+00, %41 ], [ %136, %135 ], [ %153, %141 ]\l  %160 = sext i32 %31 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %3, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %163 = fadd contract float %159, %162\l  %164 = fneg contract float %4\l  %165 = fmul contract float %163, %164\l  %166 = fmul float %165, 0x3FF7154760000000\l  %167 = tail call float @llvm.rint.f32(float %166)\l  %168 = fcmp ogt float %165, 0x40562E4300000000\l  %169 = fcmp olt float %165, 0xC059D1DA00000000\l  %170 = fneg float %166\l  %171 = tail call float @llvm.fma.f32(float %165, float 0x3FF7154760000000,\l... float %170)\l  %172 = tail call float @llvm.fma.f32(float %165, float 0x3E54AE0BE0000000,\l... float %171)\l  %173 = fsub float %166, %167\l  %174 = fadd float %172, %173\l  %175 = tail call float @llvm.exp2.f32(float %174)\l  %176 = fptosi float %167 to i32\l  %177 = tail call float @llvm.amdgcn.ldexp.f32(float %175, i32 %176)\l  %178 = select i1 %169, float 0.000000e+00, float %177\l  %179 = select i1 %168, float 0x7FF0000000000000, float %178\l  %180 = fpext float %179 to double\l  %181 = fadd contract double %180, 1.000000e+00\l  %182 = fdiv contract double 1.000000e+00, %181\l  %183 = fptrunc double %182 to float\l  %184 = fcmp contract uge float %9, 1.000000e+00\l  %185 = select i1 %34, i1 true, i1 %7\l  %186 = select i1 %185, i1 true, i1 %184\l  %187 = select i1 %186, float 1.000000e+00, float %9\l  %188 = fdiv contract float %183, %187\l  br label %189\l}"];
	Node0x456bcb0 -> Node0x456ba90;
	Node0x456ba90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%189:\l189:                                              \l  %190 = phi i64 [ %160, %158 ], [ %37, %36 ]\l  %191 = phi float [ %188, %158 ], [ 0.000000e+00, %36 ]\l  %192 = getelementptr inbounds float, float addrspace(1)* %1, i64 %190\l  store float %191, float addrspace(1)* %192, align 4, !tbaa !16\l  br label %193\l}"];
	Node0x456ba90 -> Node0x45690b0;
	Node0x45690b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%193:\l193:                                              \l  ret void\l}"];
}
