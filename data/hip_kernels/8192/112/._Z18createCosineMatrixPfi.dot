digraph "CFG for '_Z18createCosineMatrixPfi' function" {
	label="CFG for '_Z18createCosineMatrixPfi' function";

	Node0x618ae10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4\l  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*\l  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5\l  %8 = zext i16 %7 to i32\l  %9 = getelementptr i8, i8 addrspace(4)* %4, i64 6\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 2, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr i8, i8 addrspace(4)* %4, i64 8\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %3, %16\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !6\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %17, %18\l  %22 = mul i32 %21, %12\l  %23 = add i32 %22, %19\l  %24 = mul i32 %23, %8\l  %25 = add i32 %24, %20\l  %26 = icmp sgt i32 %1, 0\l  br i1 %26, label %27, label %235\l|{<s0>T|<s1>F}}"];
	Node0x618ae10:s0 -> Node0x618eaf0;
	Node0x618ae10:s1 -> Node0x618eb80;
	Node0x618eaf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%27:\l27:                                               \l  %28 = icmp eq i32 %25, 0\l  %29 = sitofp i32 %1 to float\l  %30 = fdiv contract float 2.000000e+00, %29\l  %31 = fcmp olt float %30, 0x39F0000000000000\l  %32 = select i1 %31, float 0x41F0000000000000, float 1.000000e+00\l  %33 = fmul float %30, %32\l  %34 = tail call float @llvm.sqrt.f32(float %33)\l  %35 = bitcast float %34 to i32\l  %36 = add nsw i32 %35, -1\l  %37 = bitcast i32 %36 to float\l  %38 = add nsw i32 %35, 1\l  %39 = bitcast i32 %38 to float\l  %40 = tail call i1 @llvm.amdgcn.class.f32(float %33, i32 608)\l  %41 = select i1 %31, float 0x3EF0000000000000, float 1.000000e+00\l  %42 = fneg float %39\l  %43 = tail call float @llvm.fma.f32(float %42, float %34, float %33)\l  %44 = fcmp ogt float %43, 0.000000e+00\l  %45 = fneg float %37\l  %46 = tail call float @llvm.fma.f32(float %45, float %34, float %33)\l  %47 = fcmp ole float %46, 0.000000e+00\l  %48 = select i1 %47, float %37, float %34\l  %49 = select i1 %44, float %39, float %48\l  %50 = fmul float %41, %49\l  %51 = select i1 %40, float %33, float %50\l  %52 = fpext float %51 to double\l  %53 = sitofp i32 %25 to double\l  %54 = shl nuw nsw i32 %1, 1\l  %55 = sitofp i32 %54 to double\l  %56 = tail call float @llvm.sqrt.f32(float %29)\l  %57 = bitcast float %56 to i32\l  %58 = add nsw i32 %57, -1\l  %59 = bitcast i32 %58 to float\l  %60 = add nsw i32 %57, 1\l  %61 = bitcast i32 %60 to float\l  %62 = tail call i1 @llvm.amdgcn.class.f32(float %29, i32 608)\l  %63 = fneg float %61\l  %64 = tail call float @llvm.fma.f32(float %63, float %56, float %29)\l  %65 = fcmp ogt float %64, 0.000000e+00\l  %66 = fneg float %59\l  %67 = tail call float @llvm.fma.f32(float %66, float %56, float %29)\l  %68 = fcmp ole float %67, 0.000000e+00\l  %69 = select i1 %68, float %59, float %56\l  %70 = select i1 %65, float %61, float %69\l  %71 = select i1 %62, float %29, float %70\l  %72 = fdiv contract float 1.000000e+00, %71\l  br label %73\l}"];
	Node0x618eaf0 -> Node0x6191cb0;
	Node0x6191cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  %74 = phi i32 [ 0, %27 ], [ %233, %228 ]\l  br i1 %28, label %75, label %77\l|{<s0>T|<s1>F}}"];
	Node0x6191cb0:s0 -> Node0x6191eb0;
	Node0x6191cb0:s1 -> Node0x6191f40;
	Node0x6191eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%75:\l75:                                               \l  %76 = mul nsw i32 %74, %1\l  br label %228\l}"];
	Node0x6191eb0 -> Node0x6191d70;
	Node0x6191f40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%77:\l77:                                               \l  %78 = shl nuw nsw i32 %74, 1\l  %79 = add nuw nsw i32 %78, 1\l  %80 = sitofp i32 %79 to double\l  %81 = fmul contract double %80, 0x400921FB54442D18\l  %82 = fmul contract double %81, %53\l  %83 = fdiv contract double %82, %55\l  %84 = tail call double @llvm.fabs.f64(double %83)\l  %85 = fcmp olt double %84, 0x41D0000000000000\l  br i1 %85, label %86, label %105\l|{<s0>T|<s1>F}}"];
	Node0x6191f40:s0 -> Node0x6192740;
	Node0x6191f40:s1 -> Node0x61927d0;
	Node0x6192740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%86:\l86:                                               \l  %87 = fmul double %84, 0x3FE45F306DC9C883\l  %88 = tail call double @llvm.rint.f64(double %87)\l  %89 = tail call double @llvm.fma.f64(double %88, double 0xBFF921FB54442D18,\l... double %84)\l  %90 = tail call double @llvm.fma.f64(double %88, double 0xBC91A62633145C00,\l... double %89)\l  %91 = fmul double %88, 0x3C91A62633145C00\l  %92 = fneg double %91\l  %93 = tail call double @llvm.fma.f64(double %88, double 0x3C91A62633145C00,\l... double %92)\l  %94 = fsub double %89, %91\l  %95 = fsub double %89, %94\l  %96 = fsub double %95, %91\l  %97 = fsub double %94, %90\l  %98 = fadd double %97, %96\l  %99 = fsub double %98, %93\l  %100 = tail call double @llvm.fma.f64(double %88, double 0xB97B839A252049C0,\l... double %99)\l  %101 = fadd double %90, %100\l  %102 = fsub double %101, %90\l  %103 = fsub double %100, %102\l  %104 = fptosi double %88 to i32\l  br label %181\l}"];
	Node0x6192740 -> Node0x6193990;
	Node0x61927d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%105:\l105:                                              \l  %106 = tail call double @llvm.amdgcn.trig.preop.f64(double %84, i32 0)\l  %107 = tail call double @llvm.amdgcn.trig.preop.f64(double %84, i32 1)\l  %108 = tail call double @llvm.amdgcn.trig.preop.f64(double %84, i32 2)\l  %109 = fcmp oge double %84, 0x7B00000000000000\l  %110 = tail call double @llvm.amdgcn.ldexp.f64(double %84, i32 -128)\l  %111 = select i1 %109, double %110, double %84\l  %112 = fmul double %108, %111\l  %113 = fneg double %112\l  %114 = tail call double @llvm.fma.f64(double %108, double %111, double %113)\l  %115 = fmul double %107, %111\l  %116 = fneg double %115\l  %117 = tail call double @llvm.fma.f64(double %107, double %111, double %116)\l  %118 = fmul double %106, %111\l  %119 = fneg double %118\l  %120 = tail call double @llvm.fma.f64(double %106, double %111, double %119)\l  %121 = fadd double %115, %120\l  %122 = fsub double %121, %115\l  %123 = fsub double %121, %122\l  %124 = fsub double %120, %122\l  %125 = fsub double %115, %123\l  %126 = fadd double %124, %125\l  %127 = fadd double %112, %117\l  %128 = fsub double %127, %112\l  %129 = fsub double %127, %128\l  %130 = fsub double %117, %128\l  %131 = fsub double %112, %129\l  %132 = fadd double %130, %131\l  %133 = fadd double %127, %126\l  %134 = fsub double %133, %127\l  %135 = fsub double %133, %134\l  %136 = fsub double %126, %134\l  %137 = fsub double %127, %135\l  %138 = fadd double %136, %137\l  %139 = fadd double %132, %138\l  %140 = fadd double %114, %139\l  %141 = fadd double %118, %121\l  %142 = fsub double %141, %118\l  %143 = fsub double %121, %142\l  %144 = fadd double %143, %133\l  %145 = fsub double %144, %143\l  %146 = fsub double %133, %145\l  %147 = fadd double %146, %140\l  %148 = tail call double @llvm.amdgcn.ldexp.f64(double %141, i32 -2)\l  %149 = tail call double @llvm.amdgcn.fract.f64(double %148)\l  %150 = tail call i1 @llvm.amdgcn.class.f64(double %148, i32 516)\l  %151 = select i1 %150, double 0.000000e+00, double %149\l  %152 = tail call double @llvm.amdgcn.ldexp.f64(double %151, i32 2)\l  %153 = fadd double %152, %144\l  %154 = fcmp olt double %153, 0.000000e+00\l  %155 = select i1 %154, double 4.000000e+00, double 0.000000e+00\l  %156 = fadd double %152, %155\l  %157 = fadd double %144, %156\l  %158 = fptosi double %157 to i32\l  %159 = sitofp i32 %158 to double\l  %160 = fsub double %156, %159\l  %161 = fadd double %144, %160\l  %162 = fsub double %161, %160\l  %163 = fsub double %144, %162\l  %164 = fadd double %147, %163\l  %165 = fcmp oge double %161, 5.000000e-01\l  %166 = zext i1 %165 to i32\l  %167 = add nsw i32 %166, %158\l  %168 = select i1 %165, double 1.000000e+00, double 0.000000e+00\l  %169 = fsub double %161, %168\l  %170 = fadd double %169, %164\l  %171 = fsub double %170, %169\l  %172 = fsub double %164, %171\l  %173 = fmul double %170, 0x3FF921FB54442D18\l  %174 = fneg double %173\l  %175 = tail call double @llvm.fma.f64(double %170, double\l... 0x3FF921FB54442D18, double %174)\l  %176 = tail call double @llvm.fma.f64(double %170, double\l... 0x3C91A62633145C07, double %175)\l  %177 = tail call double @llvm.fma.f64(double %172, double\l... 0x3FF921FB54442D18, double %176)\l  %178 = fadd double %173, %177\l  %179 = fsub double %178, %173\l  %180 = fsub double %177, %179\l  br label %181\l}"];
	Node0x61927d0 -> Node0x6193990;
	Node0x6193990 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%181:\l181:                                              \l  %182 = phi double [ %103, %86 ], [ %180, %105 ]\l  %183 = phi double [ %101, %86 ], [ %178, %105 ]\l  %184 = phi i32 [ %104, %86 ], [ %167, %105 ]\l  %185 = fmul double %183, %183\l  %186 = fmul double %185, 5.000000e-01\l  %187 = fsub double 1.000000e+00, %186\l  %188 = fsub double 1.000000e+00, %187\l  %189 = fsub double %188, %186\l  %190 = fmul double %185, %185\l  %191 = tail call double @llvm.fma.f64(double %185, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %192 = tail call double @llvm.fma.f64(double %185, double %191, double\l... 0xBE927E4FA17F65F6)\l  %193 = tail call double @llvm.fma.f64(double %185, double %192, double\l... 0x3EFA01A019F4EC90)\l  %194 = tail call double @llvm.fma.f64(double %185, double %193, double\l... 0xBF56C16C16C16967)\l  %195 = tail call double @llvm.fma.f64(double %185, double %194, double\l... 0x3FA5555555555555)\l  %196 = fneg double %182\l  %197 = tail call double @llvm.fma.f64(double %183, double %196, double %189)\l  %198 = tail call double @llvm.fma.f64(double %190, double %195, double %197)\l  %199 = fadd double %187, %198\l  %200 = tail call double @llvm.fma.f64(double %185, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %201 = tail call double @llvm.fma.f64(double %185, double %200, double\l... 0x3EC71DE3796CDE01)\l  %202 = tail call double @llvm.fma.f64(double %185, double %201, double\l... 0xBF2A01A019E83E5C)\l  %203 = tail call double @llvm.fma.f64(double %185, double %202, double\l... 0x3F81111111110BB3)\l  %204 = fneg double %185\l  %205 = fmul double %183, %204\l  %206 = fmul double %182, 5.000000e-01\l  %207 = tail call double @llvm.fma.f64(double %205, double %203, double %206)\l  %208 = tail call double @llvm.fma.f64(double %185, double %207, double %196)\l  %209 = tail call double @llvm.fma.f64(double %205, double\l... 0xBFC5555555555555, double %208)\l  %210 = fsub double %183, %209\l  %211 = fneg double %210\l  %212 = and i32 %184, 1\l  %213 = icmp eq i32 %212, 0\l  %214 = select i1 %213, double %199, double %211\l  %215 = bitcast double %214 to \<2 x i32\>\l  %216 = shl i32 %184, 30\l  %217 = and i32 %216, -2147483648\l  %218 = extractelement \<2 x i32\> %215, i64 1\l  %219 = xor i32 %218, %217\l  %220 = insertelement \<2 x i32\> %215, i32 %219, i64 1\l  %221 = tail call i1 @llvm.amdgcn.class.f64(double %84, i32 504)\l  %222 = select i1 %221, \<2 x i32\> %220, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %223 = bitcast \<2 x i32\> %222 to double\l  %224 = fmul contract double %52, %223\l  %225 = fptrunc double %224 to float\l  %226 = mul nsw i32 %74, %1\l  %227 = add nsw i32 %226, %25\l  br label %228\l}"];
	Node0x6193990 -> Node0x6191d70;
	Node0x6191d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%228:\l228:                                              \l  %229 = phi i32 [ %76, %75 ], [ %227, %181 ]\l  %230 = phi float [ %72, %75 ], [ %225, %181 ]\l  %231 = sext i32 %229 to i64\l  %232 = getelementptr inbounds float, float addrspace(1)* %0, i64 %231\l  store float %230, float addrspace(1)* %232, align 4, !tbaa !7\l  %233 = add nuw nsw i32 %74, 1\l  %234 = icmp eq i32 %233, %1\l  br i1 %234, label %235, label %73, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x6191d70:s0 -> Node0x618eb80;
	Node0x6191d70:s1 -> Node0x6191cb0;
	Node0x618eb80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%235:\l235:                                              \l  ret void\l}"];
}
