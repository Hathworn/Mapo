digraph "CFG for '_Z31ComputeEuklidianDistancesKernelPfiiS_S_ii' function" {
	label="CFG for '_Z31ComputeEuklidianDistancesKernelPfiiS_S_ii' function";

	Node0x627ef70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%7:\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !6\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = udiv i32 %15, %12\l  %19 = mul i32 %18, %12\l  %20 = icmp ugt i32 %15, %19\l  %21 = zext i1 %20 to i32\l  %22 = add i32 %18, %21\l  %23 = mul i32 %22, %17\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %25 = add i32 %23, %16\l  %26 = mul i32 %25, %12\l  %27 = add i32 %26, %24\l  %28 = icmp slt i32 %27, %6\l  br i1 %28, label %29, label %168\l|{<s0>T|<s1>F}}"];
	Node0x627ef70:s0 -> Node0x62817b0;
	Node0x627ef70:s1 -> Node0x6281840;
	Node0x62817b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%29:\l29:                                               \l  %30 = freeze i32 %27\l  %31 = freeze i32 %1\l  %32 = sdiv i32 %30, %31\l  %33 = mul i32 %32, %31\l  %34 = sub i32 %30, %33\l  %35 = sitofp i32 %34 to float\l  %36 = sitofp i32 %32 to float\l  %37 = icmp sgt i32 %5, 0\l  br i1 %37, label %38, label %168\l|{<s0>T|<s1>F}}"];
	Node0x62817b0:s0 -> Node0x6281e90;
	Node0x62817b0:s1 -> Node0x6281840;
	Node0x6281e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%38:\l38:                                               \l  %39 = and i32 %5, 1\l  %40 = icmp eq i32 %5, 1\l  br i1 %40, label %126, label %41\l|{<s0>T|<s1>F}}"];
	Node0x6281e90:s0 -> Node0x62820e0;
	Node0x6281e90:s1 -> Node0x6282130;
	Node0x6282130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%41:\l41:                                               \l  %42 = and i32 %5, -2\l  br label %43\l}"];
	Node0x6282130 -> Node0x6282330;
	Node0x6282330 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = phi i32 [ 0, %41 ], [ %123, %43 ]\l  %45 = phi i32 [ 0, %41 ], [ %124, %43 ]\l  %46 = shl nuw nsw i32 %44, 1\l  %47 = zext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %3, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !16\l  %50 = add nuw nsw i32 %46, 1\l  %51 = zext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %3, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !16\l  %54 = fsub contract float %49, %35\l  %55 = fmul contract float %54, %54\l  %56 = fsub contract float %53, %36\l  %57 = fmul contract float %56, %56\l  %58 = fadd contract float %55, %57\l  %59 = fcmp olt float %58, 0x39F0000000000000\l  %60 = select i1 %59, float 0x41F0000000000000, float 1.000000e+00\l  %61 = fmul float %58, %60\l  %62 = tail call float @llvm.sqrt.f32(float %61)\l  %63 = bitcast float %62 to i32\l  %64 = add nsw i32 %63, -1\l  %65 = bitcast i32 %64 to float\l  %66 = add nsw i32 %63, 1\l  %67 = bitcast i32 %66 to float\l  %68 = tail call i1 @llvm.amdgcn.class.f32(float %61, i32 608)\l  %69 = select i1 %59, float 0x3EF0000000000000, float 1.000000e+00\l  %70 = fneg float %67\l  %71 = tail call float @llvm.fma.f32(float %70, float %62, float %61)\l  %72 = fcmp ogt float %71, 0.000000e+00\l  %73 = fneg float %65\l  %74 = tail call float @llvm.fma.f32(float %73, float %62, float %61)\l  %75 = fcmp ole float %74, 0.000000e+00\l  %76 = select i1 %75, float %65, float %62\l  %77 = select i1 %72, float %67, float %76\l  %78 = fmul float %69, %77\l  %79 = select i1 %68, float %61, float %78\l  %80 = mul nsw i32 %44, %6\l  %81 = add nsw i32 %80, %27\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %4, i64 %82\l  store float %79, float addrspace(1)* %83, align 4, !tbaa !16\l  %84 = or i32 %44, 1\l  %85 = shl nuw nsw i32 %84, 1\l  %86 = zext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %3, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = add nuw nsw i32 %85, 1\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %3, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16\l  %93 = fsub contract float %88, %35\l  %94 = fmul contract float %93, %93\l  %95 = fsub contract float %92, %36\l  %96 = fmul contract float %95, %95\l  %97 = fadd contract float %94, %96\l  %98 = fcmp olt float %97, 0x39F0000000000000\l  %99 = select i1 %98, float 0x41F0000000000000, float 1.000000e+00\l  %100 = fmul float %97, %99\l  %101 = tail call float @llvm.sqrt.f32(float %100)\l  %102 = bitcast float %101 to i32\l  %103 = add nsw i32 %102, -1\l  %104 = bitcast i32 %103 to float\l  %105 = add nsw i32 %102, 1\l  %106 = bitcast i32 %105 to float\l  %107 = tail call i1 @llvm.amdgcn.class.f32(float %100, i32 608)\l  %108 = select i1 %98, float 0x3EF0000000000000, float 1.000000e+00\l  %109 = fneg float %106\l  %110 = tail call float @llvm.fma.f32(float %109, float %101, float %100)\l  %111 = fcmp ogt float %110, 0.000000e+00\l  %112 = fneg float %104\l  %113 = tail call float @llvm.fma.f32(float %112, float %101, float %100)\l  %114 = fcmp ole float %113, 0.000000e+00\l  %115 = select i1 %114, float %104, float %101\l  %116 = select i1 %111, float %106, float %115\l  %117 = fmul float %108, %116\l  %118 = select i1 %107, float %100, float %117\l  %119 = mul nsw i32 %84, %6\l  %120 = add nsw i32 %119, %27\l  %121 = sext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %4, i64 %121\l  store float %118, float addrspace(1)* %122, align 4, !tbaa !16\l  %123 = add nuw nsw i32 %44, 2\l  %124 = add nuw i32 %45, 2\l  %125 = icmp eq i32 %124, %42\l  br i1 %125, label %126, label %43, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6282330:s0 -> Node0x62820e0;
	Node0x6282330:s1 -> Node0x6282330;
	Node0x62820e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%126:\l126:                                              \l  %127 = phi i32 [ 0, %38 ], [ %123, %43 ]\l  %128 = icmp eq i32 %39, 0\l  br i1 %128, label %168, label %129\l|{<s0>T|<s1>F}}"];
	Node0x62820e0:s0 -> Node0x6281840;
	Node0x62820e0:s1 -> Node0x62843f0;
	Node0x62843f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%129:\l129:                                              \l  %130 = shl nuw nsw i32 %127, 1\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %3, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !16\l  %134 = add nuw nsw i32 %130, 1\l  %135 = zext i32 %134 to i64\l  %136 = getelementptr inbounds float, float addrspace(1)* %3, i64 %135\l  %137 = load float, float addrspace(1)* %136, align 4, !tbaa !16\l  %138 = fsub contract float %133, %35\l  %139 = fmul contract float %138, %138\l  %140 = fsub contract float %137, %36\l  %141 = fmul contract float %140, %140\l  %142 = fadd contract float %139, %141\l  %143 = fcmp olt float %142, 0x39F0000000000000\l  %144 = select i1 %143, float 0x41F0000000000000, float 1.000000e+00\l  %145 = fmul float %142, %144\l  %146 = tail call float @llvm.sqrt.f32(float %145)\l  %147 = bitcast float %146 to i32\l  %148 = add nsw i32 %147, -1\l  %149 = bitcast i32 %148 to float\l  %150 = add nsw i32 %147, 1\l  %151 = bitcast i32 %150 to float\l  %152 = tail call i1 @llvm.amdgcn.class.f32(float %145, i32 608)\l  %153 = select i1 %143, float 0x3EF0000000000000, float 1.000000e+00\l  %154 = fneg float %151\l  %155 = tail call float @llvm.fma.f32(float %154, float %146, float %145)\l  %156 = fcmp ogt float %155, 0.000000e+00\l  %157 = fneg float %149\l  %158 = tail call float @llvm.fma.f32(float %157, float %146, float %145)\l  %159 = fcmp ole float %158, 0.000000e+00\l  %160 = select i1 %159, float %149, float %146\l  %161 = select i1 %156, float %151, float %160\l  %162 = fmul float %153, %161\l  %163 = select i1 %152, float %145, float %162\l  %164 = mul nsw i32 %127, %6\l  %165 = add nsw i32 %164, %27\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds float, float addrspace(1)* %4, i64 %166\l  store float %163, float addrspace(1)* %167, align 4, !tbaa !16\l  br label %168\l}"];
	Node0x62843f0 -> Node0x6281840;
	Node0x6281840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%168:\l168:                                              \l  ret void\l}"];
}
