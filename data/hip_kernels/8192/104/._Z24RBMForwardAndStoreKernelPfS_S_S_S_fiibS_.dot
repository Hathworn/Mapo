digraph "CFG for '_Z24RBMForwardAndStoreKernelPfS_S_S_S_fiibS_' function" {
	label="CFG for '_Z24RBMForwardAndStoreKernelPfS_S_S_S_fiibS_' function";

	Node0x5af8cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%10:\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !6\l  %19 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %21 = udiv i32 %18, %15\l  %22 = mul i32 %21, %15\l  %23 = icmp ugt i32 %18, %22\l  %24 = zext i1 %23 to i32\l  %25 = add i32 %21, %24\l  %26 = mul i32 %25, %20\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = add i32 %26, %19\l  %29 = mul i32 %28, %15\l  %30 = add i32 %29, %27\l  %31 = icmp slt i32 %30, %7\l  br i1 %31, label %32, label %186\l|{<s0>T|<s1>F}}"];
	Node0x5af8cb0:s0 -> Node0x5afc060;
	Node0x5af8cb0:s1 -> Node0x5afc0f0;
	Node0x5afc060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%32:\l32:                                               \l  br i1 %8, label %33, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5afc060:s0 -> Node0x5afb080;
	Node0x5afc060:s1 -> Node0x5afb0d0;
	Node0x5afb080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%33:\l33:                                               \l  %34 = sext i32 %30 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %9, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %37 = fcmp contract une float %36, 0.000000e+00\l  br i1 %37, label %38, label %181\l|{<s0>T|<s1>F}}"];
	Node0x5afb080:s0 -> Node0x5afb0d0;
	Node0x5afb080:s1 -> Node0x5afd8e0;
	Node0x5afb0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%38:\l38:                                               \l  %39 = icmp sgt i32 %6, 0\l  br i1 %39, label %40, label %155\l|{<s0>T|<s1>F}}"];
	Node0x5afb0d0:s0 -> Node0x5afdab0;
	Node0x5afb0d0:s1 -> Node0x5afdb00;
	Node0x5afdab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%40:\l40:                                               \l  %41 = and i32 %6, 7\l  %42 = icmp ult i32 %6, 8\l  br i1 %42, label %132, label %43\l|{<s0>T|<s1>F}}"];
	Node0x5afdab0:s0 -> Node0x5afdd90;
	Node0x5afdab0:s1 -> Node0x5afdde0;
	Node0x5afdde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%43:\l43:                                               \l  %44 = and i32 %6, -8\l  br label %45\l}"];
	Node0x5afdde0 -> Node0x5afdfe0;
	Node0x5afdfe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%45:\l45:                                               \l  %46 = phi i32 [ 0, %43 ], [ %129, %45 ]\l  %47 = phi i32 [ %30, %43 ], [ %128, %45 ]\l  %48 = phi float [ 0.000000e+00, %43 ], [ %127, %45 ]\l  %49 = phi i32 [ 0, %43 ], [ %130, %45 ]\l  %50 = sext i32 %47 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %2, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %53 = zext i32 %46 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %56 = fmul contract float %52, %55\l  %57 = fadd contract float %48, %56\l  %58 = add nsw i32 %47, %7\l  %59 = or i32 %46, 1\l  %60 = sext i32 %58 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %63 = zext i32 %59 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %66 = fmul contract float %62, %65\l  %67 = fadd contract float %57, %66\l  %68 = add nsw i32 %58, %7\l  %69 = or i32 %46, 2\l  %70 = sext i32 %68 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %73 = zext i32 %69 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %76 = fmul contract float %72, %75\l  %77 = fadd contract float %67, %76\l  %78 = add nsw i32 %68, %7\l  %79 = or i32 %46, 3\l  %80 = sext i32 %78 to i64\l  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %83 = zext i32 %79 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %86 = fmul contract float %82, %85\l  %87 = fadd contract float %77, %86\l  %88 = add nsw i32 %78, %7\l  %89 = or i32 %46, 4\l  %90 = sext i32 %88 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %2, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %93 = zext i32 %89 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %96 = fmul contract float %92, %95\l  %97 = fadd contract float %87, %96\l  %98 = add nsw i32 %88, %7\l  %99 = or i32 %46, 5\l  %100 = sext i32 %98 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %2, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %103 = zext i32 %99 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %106 = fmul contract float %102, %105\l  %107 = fadd contract float %97, %106\l  %108 = add nsw i32 %98, %7\l  %109 = or i32 %46, 6\l  %110 = sext i32 %108 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %2, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %113 = zext i32 %109 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %112, %115\l  %117 = fadd contract float %107, %116\l  %118 = add nsw i32 %108, %7\l  %119 = or i32 %46, 7\l  %120 = sext i32 %118 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %123 = zext i32 %119 to i64\l  %124 = getelementptr inbounds float, float addrspace(1)* %0, i64 %123\l  %125 = load float, float addrspace(1)* %124, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %126 = fmul contract float %122, %125\l  %127 = fadd contract float %117, %126\l  %128 = add nsw i32 %118, %7\l  %129 = add nuw nsw i32 %46, 8\l  %130 = add i32 %49, 8\l  %131 = icmp eq i32 %130, %44\l  br i1 %131, label %132, label %45, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5afdfe0:s0 -> Node0x5afdd90;
	Node0x5afdfe0:s1 -> Node0x5afdfe0;
	Node0x5afdd90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%132:\l132:                                              \l  %133 = phi float [ undef, %40 ], [ %127, %45 ]\l  %134 = phi i32 [ 0, %40 ], [ %129, %45 ]\l  %135 = phi i32 [ %30, %40 ], [ %128, %45 ]\l  %136 = phi float [ 0.000000e+00, %40 ], [ %127, %45 ]\l  %137 = icmp eq i32 %41, 0\l  br i1 %137, label %155, label %138\l|{<s0>T|<s1>F}}"];
	Node0x5afdd90:s0 -> Node0x5afdb00;
	Node0x5afdd90:s1 -> Node0x5b029c0;
	Node0x5b029c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%138:\l138:                                              \l  %139 = phi i32 [ %152, %138 ], [ %134, %132 ]\l  %140 = phi i32 [ %151, %138 ], [ %135, %132 ]\l  %141 = phi float [ %150, %138 ], [ %136, %132 ]\l  %142 = phi i32 [ %153, %138 ], [ 0, %132 ]\l  %143 = sext i32 %140 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %2, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %146 = zext i32 %139 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %0, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %149 = fmul contract float %145, %148\l  %150 = fadd contract float %141, %149\l  %151 = add nsw i32 %140, %7\l  %152 = add nuw nsw i32 %139, 1\l  %153 = add i32 %142, 1\l  %154 = icmp eq i32 %153, %41\l  br i1 %154, label %155, label %138, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5b029c0:s0 -> Node0x5afdb00;
	Node0x5b029c0:s1 -> Node0x5b029c0;
	Node0x5afdb00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%155:\l155:                                              \l  %156 = phi float [ 0.000000e+00, %38 ], [ %133, %132 ], [ %150, %138 ]\l  %157 = sext i32 %30 to i64\l  %158 = getelementptr inbounds float, float addrspace(1)* %3, i64 %157\l  %159 = load float, float addrspace(1)* %158, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %160 = fadd contract float %156, %159\l  %161 = fneg contract float %5\l  %162 = fmul contract float %160, %161\l  %163 = fmul float %162, 0x3FF7154760000000\l  %164 = tail call float @llvm.rint.f32(float %163)\l  %165 = fcmp ogt float %162, 0x40562E4300000000\l  %166 = fcmp olt float %162, 0xC059D1DA00000000\l  %167 = fneg float %163\l  %168 = tail call float @llvm.fma.f32(float %162, float 0x3FF7154760000000,\l... float %167)\l  %169 = tail call float @llvm.fma.f32(float %162, float 0x3E54AE0BE0000000,\l... float %168)\l  %170 = fsub float %163, %164\l  %171 = fadd float %169, %170\l  %172 = tail call float @llvm.exp2.f32(float %171)\l  %173 = fptosi float %164 to i32\l  %174 = tail call float @llvm.amdgcn.ldexp.f32(float %172, i32 %173)\l  %175 = select i1 %166, float 0.000000e+00, float %174\l  %176 = select i1 %165, float 0x7FF0000000000000, float %175\l  %177 = fpext float %176 to double\l  %178 = fadd contract double %177, 1.000000e+00\l  %179 = fdiv contract double 1.000000e+00, %178\l  %180 = fptrunc double %179 to float\l  br label %181\l}"];
	Node0x5afdb00 -> Node0x5afd8e0;
	Node0x5afd8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%181:\l181:                                              \l  %182 = phi i64 [ %157, %155 ], [ %34, %33 ]\l  %183 = phi float [ %180, %155 ], [ 0.000000e+00, %33 ]\l  %184 = getelementptr inbounds float, float addrspace(1)* %1, i64 %182\l  store float %183, float addrspace(1)* %184, align 4, !tbaa !16\l  %185 = getelementptr inbounds float, float addrspace(1)* %4, i64 %182\l  store float %183, float addrspace(1)* %185, align 4, !tbaa !16\l  br label %186\l}"];
	Node0x5afd8e0 -> Node0x5afc0f0;
	Node0x5afc0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%186:\l186:                                              \l  ret void\l}"];
}
