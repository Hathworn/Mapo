digraph "CFG for '_Z15LSTMDeltaKernelPfS_S_S_S_S_ii' function" {
	label="CFG for '_Z15LSTMDeltaKernelPfS_S_S_S_S_ii' function";

	Node0x4ff4250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%8:\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %15 = bitcast i8 addrspace(4)* %14 to i32 addrspace(4)*\l  %16 = load i32, i32 addrspace(4)* %15, align 4, !tbaa !6\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = udiv i32 %16, %13\l  %20 = mul i32 %19, %13\l  %21 = icmp ugt i32 %16, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %18\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %17\l  %27 = mul i32 %26, %13\l  %28 = add i32 %27, %25\l  %29 = sdiv i32 %6, %7\l  %30 = icmp slt i32 %28, %29\l  br i1 %30, label %31, label %162\l|{<s0>T|<s1>F}}"];
	Node0x4ff4250:s0 -> Node0x4ff6b30;
	Node0x4ff4250:s1 -> Node0x4ff6bc0;
	Node0x4ff6b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %28, %7\l  %33 = add nsw i32 %28, 1\l  %34 = mul nsw i32 %33, %7\l  %35 = icmp slt i32 %32, %34\l  %36 = sext i32 %28 to i64\l  br i1 %35, label %37, label %64\l|{<s0>T|<s1>F}}"];
	Node0x4ff6b30:s0 -> Node0x4ff70c0;
	Node0x4ff6b30:s1 -> Node0x4ff7110;
	Node0x4ff70c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%37:\l37:                                               \l  %38 = getelementptr inbounds float, float addrspace(1)* %3, i64 %36\l  %39 = add i32 %7, -1\l  %40 = and i32 %7, 7\l  %41 = icmp eq i32 %40, 0\l  br i1 %41, label %59, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4ff70c0:s0 -> Node0x4ff7530;
	Node0x4ff70c0:s1 -> Node0x4ff7580;
	Node0x4ff7580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi float [ %55, %42 ], [ 0.000000e+00, %37 ]\l  %44 = phi i32 [ %56, %42 ], [ %32, %37 ]\l  %45 = phi i32 [ %57, %42 ], [ 0, %37 ]\l  %46 = sext i32 %44 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %5, i64 %46\l  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !16\l  %49 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %50 = fmul contract float %48, %49\l  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %46\l  store float %50, float addrspace(1)* %51, align 4, !tbaa !16\l  %52 = getelementptr inbounds float, float addrspace(1)* %2, i64 %46\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !16\l  %54 = fmul contract float %48, %53\l  %55 = fadd contract float %43, %54\l  %56 = add nsw i32 %44, 1\l  %57 = add i32 %45, 1\l  %58 = icmp eq i32 %57, %40\l  br i1 %58, label %59, label %42, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4ff7580:s0 -> Node0x4ff7530;
	Node0x4ff7580:s1 -> Node0x4ff7580;
	Node0x4ff7530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%59:\l59:                                               \l  %60 = phi float [ undef, %37 ], [ %55, %42 ]\l  %61 = phi float [ 0.000000e+00, %37 ], [ %55, %42 ]\l  %62 = phi i32 [ %32, %37 ], [ %56, %42 ]\l  %63 = icmp ult i32 %39, 7\l  br i1 %63, label %64, label %70\l|{<s0>T|<s1>F}}"];
	Node0x4ff7530:s0 -> Node0x4ff7110;
	Node0x4ff7530:s1 -> Node0x4ff9b20;
	Node0x4ff7110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%64:\l64:                                               \l  %65 = phi float [ 0.000000e+00, %31 ], [ %60, %59 ], [ %159, %70 ]\l  %66 = getelementptr inbounds float, float addrspace(1)* %4, i64 %36\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16\l  %68 = fmul contract float %65, %67\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36\l  store float %68, float addrspace(1)* %69, align 4, !tbaa !16\l  br label %162\l}"];
	Node0x4ff7110 -> Node0x4ff6bc0;
	Node0x4ff9b20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%70:\l70:                                               \l  %71 = phi float [ %159, %70 ], [ %61, %59 ]\l  %72 = phi i32 [ %160, %70 ], [ %62, %59 ]\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %5, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !16\l  %76 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %77 = fmul contract float %75, %76\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  store float %77, float addrspace(1)* %78, align 4, !tbaa !16\l  %79 = getelementptr inbounds float, float addrspace(1)* %2, i64 %73\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !16\l  %81 = fmul contract float %75, %80\l  %82 = fadd contract float %71, %81\l  %83 = add nsw i32 %72, 1\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %5, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %88 = fmul contract float %86, %87\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  store float %88, float addrspace(1)* %89, align 4, !tbaa !16\l  %90 = getelementptr inbounds float, float addrspace(1)* %2, i64 %84\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !16\l  %92 = fmul contract float %86, %91\l  %93 = fadd contract float %82, %92\l  %94 = add nsw i32 %72, 2\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %5, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !16\l  %98 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %99 = fmul contract float %97, %98\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  store float %99, float addrspace(1)* %100, align 4, !tbaa !16\l  %101 = getelementptr inbounds float, float addrspace(1)* %2, i64 %95\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !16\l  %103 = fmul contract float %97, %102\l  %104 = fadd contract float %93, %103\l  %105 = add nsw i32 %72, 3\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %5, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !16\l  %109 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %110 = fmul contract float %108, %109\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  store float %110, float addrspace(1)* %111, align 4, !tbaa !16\l  %112 = getelementptr inbounds float, float addrspace(1)* %2, i64 %106\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !16\l  %114 = fmul contract float %108, %113\l  %115 = fadd contract float %104, %114\l  %116 = add nsw i32 %72, 4\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %5, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %121 = fmul contract float %119, %120\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  store float %121, float addrspace(1)* %122, align 4, !tbaa !16\l  %123 = getelementptr inbounds float, float addrspace(1)* %2, i64 %117\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !16\l  %125 = fmul contract float %119, %124\l  %126 = fadd contract float %115, %125\l  %127 = add nsw i32 %72, 5\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %5, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !16\l  %131 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %132 = fmul contract float %130, %131\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %128\l  store float %132, float addrspace(1)* %133, align 4, !tbaa !16\l  %134 = getelementptr inbounds float, float addrspace(1)* %2, i64 %128\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !16\l  %136 = fmul contract float %130, %135\l  %137 = fadd contract float %126, %136\l  %138 = add nsw i32 %72, 6\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %5, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %142 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %143 = fmul contract float %141, %142\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %139\l  store float %143, float addrspace(1)* %144, align 4, !tbaa !16\l  %145 = getelementptr inbounds float, float addrspace(1)* %2, i64 %139\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !16\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %137, %147\l  %149 = add nsw i32 %72, 7\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %5, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !16\l  %153 = load float, float addrspace(1)* %38, align 4, !tbaa !16\l  %154 = fmul contract float %152, %153\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %150\l  store float %154, float addrspace(1)* %155, align 4, !tbaa !16\l  %156 = getelementptr inbounds float, float addrspace(1)* %2, i64 %150\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !16\l  %158 = fmul contract float %152, %157\l  %159 = fadd contract float %148, %158\l  %160 = add nsw i32 %72, 8\l  %161 = icmp eq i32 %160, %34\l  br i1 %161, label %64, label %70, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4ff9b20:s0 -> Node0x4ff7110;
	Node0x4ff9b20:s1 -> Node0x4ff9b20;
	Node0x4ff6bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%162:\l162:                                              \l  ret void\l}"];
}
