digraph "CFG for '_Z12DecodeValuesPfiS_S_iiS_S_S_S_S_S_' function" {
	label="CFG for '_Z12DecodeValuesPfiS_S_iiS_S_S_S_S_S_' function";

	Node0x625fa00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%12:\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !6\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %23 = udiv i32 %20, %17\l  %24 = mul i32 %23, %17\l  %25 = icmp ugt i32 %20, %24\l  %26 = zext i1 %25 to i32\l  %27 = add i32 %23, %26\l  %28 = mul i32 %27, %22\l  %29 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %30 = add i32 %28, %21\l  %31 = mul i32 %30, %17\l  %32 = add i32 %31, %29\l  %33 = icmp slt i32 %32, %4\l  br i1 %33, label %34, label %164\l|{<s0>T|<s1>F}}"];
	Node0x625fa00:s0 -> Node0x6261d90;
	Node0x625fa00:s1 -> Node0x6262fb0;
	Node0x6261d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%34:\l34:                                               \l  %35 = sext i32 %32 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %2, i64 %35\l  store float 0.000000e+00, float addrspace(1)* %36, align 4, !tbaa !16\l  %37 = getelementptr inbounds float, float addrspace(1)* %3, i64 %35\l  store float 0.000000e+00, float addrspace(1)* %37, align 4, !tbaa !16\l  %38 = icmp eq i32 %32, 0\l  %39 = select i1 %38, float addrspace(1)* %6, float addrspace(1)* %7\l  %40 = select i1 %38, float addrspace(1)* %8, float addrspace(1)* %9\l  %41 = select i1 %38, float addrspace(1)* %10, float addrspace(1)* %11\l  %42 = icmp sgt i32 %1, 0\l  br i1 %42, label %43, label %76\l|{<s0>T|<s1>F}}"];
	Node0x6261d90:s0 -> Node0x6264850;
	Node0x6261d90:s1 -> Node0x62648e0;
	Node0x6264850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%43:\l43:                                               \l  %44 = and i32 %1, 3\l  %45 = icmp ult i32 %1, 4\l  br i1 %45, label %48, label %46\l|{<s0>T|<s1>F}}"];
	Node0x6264850:s0 -> Node0x6264b70;
	Node0x6264850:s1 -> Node0x6264bc0;
	Node0x6264bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%46:\l46:                                               \l  %47 = and i32 %1, -4\l  br label %83\l}"];
	Node0x6264bc0 -> Node0x6264dc0;
	Node0x6264b70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%48:\l48:                                               \l  %49 = phi float [ undef, %43 ], [ %160, %83 ]\l  %50 = phi i32 [ 0, %43 ], [ %161, %83 ]\l  %51 = icmp eq i32 %44, 0\l  br i1 %51, label %76, label %52\l|{<s0>T|<s1>F}}"];
	Node0x6264b70:s0 -> Node0x62648e0;
	Node0x6264b70:s1 -> Node0x6265530;
	Node0x6265530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%52:\l52:                                               \l  %53 = phi i32 [ %73, %52 ], [ %50, %48 ]\l  %54 = phi i32 [ %74, %52 ], [ 0, %48 ]\l  %55 = zext i32 %53 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !16\l  %58 = getelementptr inbounds float, float addrspace(1)* %39, i64 %55\l  %59 = load float, float addrspace(1)* %58, align 4, !tbaa !16\l  %60 = fmul contract float %57, %59\l  %61 = getelementptr inbounds float, float addrspace(1)* %40, i64 %55\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = fmul contract float %57, %62\l  %64 = fsub contract float %60, %63\l  %65 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %66 = fadd contract float %65, %64\l  store float %66, float addrspace(1)* %36, align 4, !tbaa !16\l  %67 = load float, float addrspace(1)* %56, align 4, !tbaa !16\l  %68 = getelementptr inbounds float, float addrspace(1)* %41, i64 %55\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !16\l  %70 = fmul contract float %67, %69\l  %71 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %72 = fadd contract float %71, %70\l  store float %72, float addrspace(1)* %37, align 4, !tbaa !16\l  %73 = add nuw nsw i32 %53, 1\l  %74 = add i32 %54, 1\l  %75 = icmp eq i32 %74, %44\l  br i1 %75, label %76, label %52, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6265530:s0 -> Node0x62648e0;
	Node0x6265530:s1 -> Node0x6265530;
	Node0x62648e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%76:\l76:                                               \l  %77 = phi float [ 0.000000e+00, %34 ], [ %49, %48 ], [ %72, %52 ]\l  %78 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %79 = tail call float @llvm.fabs.f32(float %78)\l  %80 = fadd contract float %77, %79\l  store float %80, float addrspace(1)* %37, align 4, !tbaa !16\l  %81 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %82 = fdiv contract float %81, %80\l  store float %82, float addrspace(1)* %36, align 4, !tbaa !16\l  br label %164\l}"];
	Node0x62648e0 -> Node0x6262fb0;
	Node0x6264dc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%83:\l83:                                               \l  %84 = phi i32 [ 0, %46 ], [ %161, %83 ]\l  %85 = phi i32 [ 0, %46 ], [ %162, %83 ]\l  %86 = zext i32 %84 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = getelementptr inbounds float, float addrspace(1)* %39, i64 %86\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !16\l  %91 = fmul contract float %88, %90\l  %92 = getelementptr inbounds float, float addrspace(1)* %40, i64 %86\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !16\l  %94 = fmul contract float %88, %93\l  %95 = fsub contract float %91, %94\l  %96 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %97 = fadd contract float %96, %95\l  store float %97, float addrspace(1)* %36, align 4, !tbaa !16\l  %98 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %99 = getelementptr inbounds float, float addrspace(1)* %41, i64 %86\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = fmul contract float %98, %100\l  %102 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %103 = fadd contract float %102, %101\l  store float %103, float addrspace(1)* %37, align 4, !tbaa !16\l  %104 = or i32 %84, 1\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = getelementptr inbounds float, float addrspace(1)* %39, i64 %105\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !16\l  %110 = fmul contract float %107, %109\l  %111 = getelementptr inbounds float, float addrspace(1)* %40, i64 %105\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = fmul contract float %107, %112\l  %114 = fsub contract float %110, %113\l  %115 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %116 = fadd contract float %115, %114\l  store float %116, float addrspace(1)* %36, align 4, !tbaa !16\l  %117 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %118 = getelementptr inbounds float, float addrspace(1)* %41, i64 %105\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = fmul contract float %117, %119\l  %121 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %122 = fadd contract float %121, %120\l  store float %122, float addrspace(1)* %37, align 4, !tbaa !16\l  %123 = or i32 %84, 2\l  %124 = zext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %127 = getelementptr inbounds float, float addrspace(1)* %39, i64 %124\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !16\l  %129 = fmul contract float %126, %128\l  %130 = getelementptr inbounds float, float addrspace(1)* %40, i64 %124\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %132 = fmul contract float %126, %131\l  %133 = fsub contract float %129, %132\l  %134 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %135 = fadd contract float %134, %133\l  store float %135, float addrspace(1)* %36, align 4, !tbaa !16\l  %136 = load float, float addrspace(1)* %125, align 4, !tbaa !16\l  %137 = getelementptr inbounds float, float addrspace(1)* %41, i64 %124\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !16\l  %139 = fmul contract float %136, %138\l  %140 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %141 = fadd contract float %140, %139\l  store float %141, float addrspace(1)* %37, align 4, !tbaa !16\l  %142 = or i32 %84, 3\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !16\l  %146 = getelementptr inbounds float, float addrspace(1)* %39, i64 %143\l  %147 = load float, float addrspace(1)* %146, align 4, !tbaa !16\l  %148 = fmul contract float %145, %147\l  %149 = getelementptr inbounds float, float addrspace(1)* %40, i64 %143\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16\l  %151 = fmul contract float %145, %150\l  %152 = fsub contract float %148, %151\l  %153 = load float, float addrspace(1)* %36, align 4, !tbaa !16\l  %154 = fadd contract float %153, %152\l  store float %154, float addrspace(1)* %36, align 4, !tbaa !16\l  %155 = load float, float addrspace(1)* %144, align 4, !tbaa !16\l  %156 = getelementptr inbounds float, float addrspace(1)* %41, i64 %143\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !16\l  %158 = fmul contract float %155, %157\l  %159 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %160 = fadd contract float %159, %158\l  store float %160, float addrspace(1)* %37, align 4, !tbaa !16\l  %161 = add nuw nsw i32 %84, 4\l  %162 = add i32 %85, 4\l  %163 = icmp eq i32 %162, %47\l  br i1 %163, label %48, label %83, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x6264dc0:s0 -> Node0x6264b70;
	Node0x6264dc0:s1 -> Node0x6264dc0;
	Node0x6262fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%164:\l164:                                              \l  ret void\l}"];
}
