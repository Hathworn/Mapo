digraph "CFG for '_Z12matmulKernelPfS_S_iii' function" {
	label="CFG for '_Z12matmulKernelPfS_S_iii' function";

	Node0x62edf50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !4\l  %12 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !13, !invariant.load\l... !14\l  %15 = zext i16 %14 to i32\l  %16 = udiv i32 %11, %15\l  %17 = mul i32 %16, %15\l  %18 = icmp ugt i32 %11, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = mul i32 %20, %7\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = add i32 %21, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %25 = mul nuw nsw i32 %24, %15\l  %26 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %27 = add nuw nsw i32 %25, %26\l  %28 = icmp slt i32 %23, %3\l  %29 = icmp slt i32 %27, %5\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %167\l|{<s0>T|<s1>F}}"];
	Node0x62edf50:s0 -> Node0x62f10e0;
	Node0x62edf50:s1 -> Node0x62f1170;
	Node0x62f10e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %23, %5\l  %33 = add nsw i32 %32, %27\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %2, i64 %34\l  store float 0.000000e+00, float addrspace(1)* %35, align 4, !tbaa !16\l  %36 = icmp sgt i32 %4, 0\l  br i1 %36, label %37, label %167\l|{<s0>T|<s1>F}}"];
	Node0x62f10e0:s0 -> Node0x62f2290;
	Node0x62f10e0:s1 -> Node0x62f1170;
	Node0x62f2290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = mul nsw i32 %23, %4\l  %39 = and i32 %4, 7\l  %40 = icmp ult i32 %4, 8\l  br i1 %40, label %145, label %41\l|{<s0>T|<s1>F}}"];
	Node0x62f2290:s0 -> Node0x62f25e0;
	Node0x62f2290:s1 -> Node0x62f2630;
	Node0x62f2630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%41:\l41:                                               \l  %42 = and i32 %4, -8\l  br label %43\l}"];
	Node0x62f2630 -> Node0x62f2830;
	Node0x62f2830 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%43:\l43:                                               \l  %44 = phi float [ 0.000000e+00, %41 ], [ %141, %43 ]\l  %45 = phi i32 [ 0, %41 ], [ %142, %43 ]\l  %46 = phi i32 [ 0, %41 ], [ %143, %43 ]\l  %47 = add nsw i32 %45, %38\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %0, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !16\l  %51 = mul nsw i32 %45, %5\l  %52 = add nsw i32 %51, %27\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %1, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !16\l  %56 = fmul contract float %50, %55\l  %57 = fadd contract float %44, %56\l  store float %57, float addrspace(1)* %35, align 4, !tbaa !16\l  %58 = or i32 %45, 1\l  %59 = add nsw i32 %58, %38\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = mul nsw i32 %58, %5\l  %64 = add nsw i32 %63, %27\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %1, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16\l  %68 = fmul contract float %62, %67\l  %69 = fadd contract float %57, %68\l  store float %69, float addrspace(1)* %35, align 4, !tbaa !16\l  %70 = or i32 %45, 2\l  %71 = add nsw i32 %70, %38\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !16\l  %75 = mul nsw i32 %70, %5\l  %76 = add nsw i32 %75, %27\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !16\l  %80 = fmul contract float %74, %79\l  %81 = fadd contract float %69, %80\l  store float %81, float addrspace(1)* %35, align 4, !tbaa !16\l  %82 = or i32 %45, 3\l  %83 = add nsw i32 %82, %38\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !16\l  %87 = mul nsw i32 %82, %5\l  %88 = add nsw i32 %87, %27\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !16\l  %92 = fmul contract float %86, %91\l  %93 = fadd contract float %81, %92\l  store float %93, float addrspace(1)* %35, align 4, !tbaa !16\l  %94 = or i32 %45, 4\l  %95 = add nsw i32 %94, %38\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16\l  %99 = mul nsw i32 %94, %5\l  %100 = add nsw i32 %99, %27\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !16\l  %104 = fmul contract float %98, %103\l  %105 = fadd contract float %93, %104\l  store float %105, float addrspace(1)* %35, align 4, !tbaa !16\l  %106 = or i32 %45, 5\l  %107 = add nsw i32 %106, %38\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !16\l  %111 = mul nsw i32 %106, %5\l  %112 = add nsw i32 %111, %27\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !16\l  %116 = fmul contract float %110, %115\l  %117 = fadd contract float %105, %116\l  store float %117, float addrspace(1)* %35, align 4, !tbaa !16\l  %118 = or i32 %45, 6\l  %119 = add nsw i32 %118, %38\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !16\l  %123 = mul nsw i32 %118, %5\l  %124 = add nsw i32 %123, %27\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !16\l  %128 = fmul contract float %122, %127\l  %129 = fadd contract float %117, %128\l  store float %129, float addrspace(1)* %35, align 4, !tbaa !16\l  %130 = or i32 %45, 7\l  %131 = add nsw i32 %130, %38\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = mul nsw i32 %130, %5\l  %136 = add nsw i32 %135, %27\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !16\l  %140 = fmul contract float %134, %139\l  %141 = fadd contract float %129, %140\l  store float %141, float addrspace(1)* %35, align 4, !tbaa !16\l  %142 = add nuw nsw i32 %45, 8\l  %143 = add i32 %46, 8\l  %144 = icmp eq i32 %143, %42\l  br i1 %144, label %145, label %43, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x62f2830:s0 -> Node0x62f25e0;
	Node0x62f2830:s1 -> Node0x62f2830;
	Node0x62f25e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%145:\l145:                                              \l  %146 = phi float [ 0.000000e+00, %37 ], [ %141, %43 ]\l  %147 = phi i32 [ 0, %37 ], [ %142, %43 ]\l  %148 = icmp eq i32 %39, 0\l  br i1 %148, label %167, label %149\l|{<s0>T|<s1>F}}"];
	Node0x62f25e0:s0 -> Node0x62f1170;
	Node0x62f25e0:s1 -> Node0x62f7530;
	Node0x62f7530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%149:\l149:                                              \l  %150 = phi float [ %163, %149 ], [ %146, %145 ]\l  %151 = phi i32 [ %164, %149 ], [ %147, %145 ]\l  %152 = phi i32 [ %165, %149 ], [ 0, %145 ]\l  %153 = add nsw i32 %151, %38\l  %154 = sext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %0, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !16\l  %157 = mul nsw i32 %151, %5\l  %158 = add nsw i32 %157, %27\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds float, float addrspace(1)* %1, i64 %159\l  %161 = load float, float addrspace(1)* %160, align 4, !tbaa !16\l  %162 = fmul contract float %156, %161\l  %163 = fadd contract float %150, %162\l  store float %163, float addrspace(1)* %35, align 4, !tbaa !16\l  %164 = add nuw nsw i32 %151, 1\l  %165 = add i32 %152, 1\l  %166 = icmp eq i32 %165, %39\l  br i1 %166, label %167, label %149, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x62f7530:s0 -> Node0x62f1170;
	Node0x62f7530:s1 -> Node0x62f7530;
	Node0x62f1170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%167:\l167:                                              \l  ret void\l}"];
}
