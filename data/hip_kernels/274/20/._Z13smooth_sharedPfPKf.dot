digraph "CFG for '_Z13smooth_sharedPfPKf' function" {
	label="CFG for '_Z13smooth_sharedPfPKf' function";

	Node0x52713a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %4 = getelementptr i8, i8 addrspace(4)* %3, i64 4\l  %5 = bitcast i8 addrspace(4)* %4 to i16 addrspace(4)*\l  %6 = load i16, i16 addrspace(4)* %5, align 4, !range !4, !invariant.load !5\l  %7 = zext i16 %6 to i32\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %3, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !6\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %12 = mul i32 %11, %7\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %14 = add i32 %12, %13\l  %15 = sext i32 %14 to i64\l  %16 = getelementptr inbounds float, float addrspace(1)* %1, i64 %15\l  %17 = load float, float addrspace(1)* %16, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %18 = add nuw nsw i32 %13, 1\l  %19 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @s, i32\l... 0, i32 %18\l  store float %17, float addrspace(3)* %19, align 4, !tbaa !16\l  %20 = icmp eq i32 %13, 0\l  br i1 %20, label %21, label %44\l|{<s0>T|<s1>F}}"];
	Node0x52713a0:s0 -> Node0x52747d0;
	Node0x52713a0:s1 -> Node0x5274860;
	Node0x52747d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%21:\l21:                                               \l  %22 = tail call i32 @llvm.smax.i32(i32 %12, i32 1)\l  %23 = add nsw i32 %22, -1\l  %24 = zext i32 %23 to i64\l  %25 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  store float %26, float addrspace(3)* getelementptr inbounds ([0 x float], [0\l... x float] addrspace(3)* @s, i32 0, i32 0), align 4, !tbaa !16\l  %27 = udiv i32 %10, %7\l  %28 = mul i32 %27, %7\l  %29 = icmp ugt i32 %10, %28\l  %30 = zext i1 %29 to i32\l  %31 = add i32 %27, %30\l  %32 = mul i32 %31, %7\l  %33 = add nsw i32 %32, -1\l  %34 = add i32 %12, %7\l  %35 = sitofp i32 %33 to double\l  %36 = uitofp i32 %34 to double\l  %37 = tail call double @llvm.minnum.f64(double %35, double %36)\l  %38 = fptosi double %37 to i32\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !16,\l... !amdgpu.noclobber !5\l  %42 = add nuw nsw i32 %7, 1\l  %43 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @s, i32\l... 0, i32 %42\l  store float %41, float addrspace(3)* %43, align 4, !tbaa !16\l  br label %44\l}"];
	Node0x52747d0 -> Node0x5274860;
	Node0x5274860 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %45 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @s, i32\l... 0, i32 %13\l  %46 = load float, float addrspace(3)* %45, align 4, !tbaa !16\l  %47 = fmul contract float %46, 2.500000e-01\l  %48 = load float, float addrspace(3)* %19, align 4, !tbaa !16\l  %49 = fmul contract float %48, 5.000000e-01\l  %50 = fadd contract float %47, %49\l  %51 = add nuw nsw i32 %13, 2\l  %52 = getelementptr inbounds [0 x float], [0 x float] addrspace(3)* @s, i32\l... 0, i32 %51\l  %53 = load float, float addrspace(3)* %52, align 4, !tbaa !16\l  %54 = fmul contract float %53, 2.500000e-01\l  %55 = fadd contract float %50, %54\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %15\l  store float %55, float addrspace(1)* %56, align 4, !tbaa !16\l  ret void\l}"];
}
