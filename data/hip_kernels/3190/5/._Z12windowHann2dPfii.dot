digraph "CFG for '_Z12windowHann2dPfii' function" {
	label="CFG for '_Z12windowHann2dPfii' function";

	Node0x64eb3e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = add i32 %11, %4\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !5, !invariant.load !6\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = add i32 %19, %13\l  %21 = icmp slt i32 %12, %1\l  %22 = icmp slt i32 %20, %2\l  %23 = select i1 %21, i1 %22, i1 false\l  br i1 %23, label %24, label %325\l|{<s0>T|<s1>F}}"];
	Node0x64eb3e0:s0 -> Node0x64eee70;
	Node0x64eb3e0:s1 -> Node0x64eef00;
	Node0x64eee70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%24:\l24:                                               \l  %25 = shl nsw i32 %20, 1\l  %26 = sitofp i32 %25 to float\l  %27 = fmul contract float %26, 0x400921FA00000000\l  %28 = add nsw i32 %2, -1\l  %29 = sitofp i32 %28 to float\l  %30 = fdiv contract float %27, %29\l  %31 = tail call float @llvm.fabs.f32(float %30)\l  %32 = fcmp olt float %31, 1.310720e+05\l  br i1 %32, label %33, label %40\l|{<s0>T|<s1>F}}"];
	Node0x64eee70:s0 -> Node0x64edd30;
	Node0x64eee70:s1 -> Node0x64eddc0;
	Node0x64edd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%33:\l33:                                               \l  %34 = fmul float %31, 0x3FE45F3060000000\l  %35 = tail call float @llvm.rint.f32(float %34)\l  %36 = tail call float @llvm.fma.f32(float %35, float 0xBFF921FB40000000,\l... float %31)\l  %37 = tail call float @llvm.fma.f32(float %35, float 0xBE74442D00000000,\l... float %36)\l  %38 = tail call float @llvm.fma.f32(float %35, float 0xBCF8469880000000,\l... float %37)\l  %39 = fptosi float %35 to i32\l  br label %146\l}"];
	Node0x64edd30 -> Node0x64f0c30;
	Node0x64eddc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%40:\l40:                                               \l  %41 = bitcast float %31 to i32\l  %42 = lshr i32 %41, 23\l  %43 = and i32 %41, 8388607\l  %44 = or i32 %43, 8388608\l  %45 = zext i32 %44 to i64\l  %46 = mul nuw nsw i64 %45, 4266746795\l  %47 = trunc i64 %46 to i32\l  %48 = lshr i64 %46, 32\l  %49 = mul nuw nsw i64 %45, 1011060801\l  %50 = add nuw nsw i64 %48, %49\l  %51 = trunc i64 %50 to i32\l  %52 = lshr i64 %50, 32\l  %53 = mul nuw nsw i64 %45, 3680671129\l  %54 = add nuw nsw i64 %52, %53\l  %55 = trunc i64 %54 to i32\l  %56 = lshr i64 %54, 32\l  %57 = mul nuw nsw i64 %45, 4113882560\l  %58 = add nuw nsw i64 %56, %57\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = mul nuw nsw i64 %45, 4230436817\l  %62 = add nuw nsw i64 %60, %61\l  %63 = trunc i64 %62 to i32\l  %64 = lshr i64 %62, 32\l  %65 = mul nuw nsw i64 %45, 1313084713\l  %66 = add nuw nsw i64 %64, %65\l  %67 = trunc i64 %66 to i32\l  %68 = lshr i64 %66, 32\l  %69 = mul nuw nsw i64 %45, 2734261102\l  %70 = add nuw nsw i64 %68, %69\l  %71 = trunc i64 %70 to i32\l  %72 = lshr i64 %70, 32\l  %73 = trunc i64 %72 to i32\l  %74 = add nsw i32 %42, -120\l  %75 = icmp ugt i32 %74, 63\l  %76 = select i1 %75, i32 %67, i32 %73\l  %77 = select i1 %75, i32 %63, i32 %71\l  %78 = select i1 %75, i32 %59, i32 %67\l  %79 = select i1 %75, i32 %55, i32 %63\l  %80 = select i1 %75, i32 %51, i32 %59\l  %81 = select i1 %75, i32 %47, i32 %55\l  %82 = select i1 %75, i32 -64, i32 0\l  %83 = add nsw i32 %82, %74\l  %84 = icmp ugt i32 %83, 31\l  %85 = select i1 %84, i32 %77, i32 %76\l  %86 = select i1 %84, i32 %78, i32 %77\l  %87 = select i1 %84, i32 %79, i32 %78\l  %88 = select i1 %84, i32 %80, i32 %79\l  %89 = select i1 %84, i32 %81, i32 %80\l  %90 = select i1 %84, i32 -32, i32 0\l  %91 = add nsw i32 %90, %83\l  %92 = icmp ugt i32 %91, 31\l  %93 = select i1 %92, i32 %86, i32 %85\l  %94 = select i1 %92, i32 %87, i32 %86\l  %95 = select i1 %92, i32 %88, i32 %87\l  %96 = select i1 %92, i32 %89, i32 %88\l  %97 = select i1 %92, i32 -32, i32 0\l  %98 = add nsw i32 %97, %91\l  %99 = icmp eq i32 %98, 0\l  %100 = sub nsw i32 32, %98\l  %101 = tail call i32 @llvm.fshr.i32(i32 %93, i32 %94, i32 %100)\l  %102 = tail call i32 @llvm.fshr.i32(i32 %94, i32 %95, i32 %100)\l  %103 = tail call i32 @llvm.fshr.i32(i32 %95, i32 %96, i32 %100)\l  %104 = select i1 %99, i32 %93, i32 %101\l  %105 = select i1 %99, i32 %94, i32 %102\l  %106 = select i1 %99, i32 %95, i32 %103\l  %107 = lshr i32 %104, 29\l  %108 = tail call i32 @llvm.fshl.i32(i32 %104, i32 %105, i32 2)\l  %109 = tail call i32 @llvm.fshl.i32(i32 %105, i32 %106, i32 2)\l  %110 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %96, i32 2)\l  %111 = and i32 %107, 1\l  %112 = sub nsw i32 0, %111\l  %113 = shl i32 %107, 31\l  %114 = xor i32 %108, %112\l  %115 = xor i32 %109, %112\l  %116 = xor i32 %110, %112\l  %117 = tail call i32 @llvm.ctlz.i32(i32 %114, i1 false), !range !7\l  %118 = sub nsw i32 31, %117\l  %119 = tail call i32 @llvm.fshr.i32(i32 %114, i32 %115, i32 %118)\l  %120 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %116, i32 %118)\l  %121 = shl nuw nsw i32 %117, 23\l  %122 = sub nuw nsw i32 1056964608, %121\l  %123 = lshr i32 %119, 9\l  %124 = or i32 %123, %122\l  %125 = or i32 %124, %113\l  %126 = bitcast i32 %125 to float\l  %127 = tail call i32 @llvm.fshl.i32(i32 %119, i32 %120, i32 23)\l  %128 = tail call i32 @llvm.ctlz.i32(i32 %127, i1 false), !range !7\l  %129 = fmul float %126, 0x3FF921FB40000000\l  %130 = add nuw nsw i32 %128, %117\l  %131 = shl nuw nsw i32 %130, 23\l  %132 = sub nuw nsw i32 855638016, %131\l  %133 = sub nsw i32 31, %128\l  %134 = tail call i32 @llvm.fshr.i32(i32 %127, i32 %120, i32 %133)\l  %135 = lshr i32 %134, 9\l  %136 = or i32 %132, %135\l  %137 = or i32 %136, %113\l  %138 = bitcast i32 %137 to float\l  %139 = fneg float %129\l  %140 = tail call float @llvm.fma.f32(float %126, float 0x3FF921FB40000000,\l... float %139)\l  %141 = tail call float @llvm.fma.f32(float %126, float 0x3E74442D00000000,\l... float %140)\l  %142 = tail call float @llvm.fma.f32(float %138, float 0x3FF921FB40000000,\l... float %141)\l  %143 = fadd float %129, %142\l  %144 = lshr i32 %104, 30\l  %145 = add nuw nsw i32 %111, %144\l  br label %146\l}"];
	Node0x64eddc0 -> Node0x64f0c30;
	Node0x64f0c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%146:\l146:                                              \l  %147 = phi float [ %38, %33 ], [ %143, %40 ]\l  %148 = phi i32 [ %39, %33 ], [ %145, %40 ]\l  %149 = fmul float %147, %147\l  %150 = tail call float @llvm.fmuladd.f32(float %149, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %151 = tail call float @llvm.fmuladd.f32(float %149, float %150, float\l... 0xBFC55553A0000000)\l  %152 = fmul float %149, %151\l  %153 = tail call float @llvm.fmuladd.f32(float %147, float %152, float %147)\l  %154 = tail call float @llvm.fmuladd.f32(float %149, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %155 = tail call float @llvm.fmuladd.f32(float %149, float %154, float\l... 0x3FA5557EE0000000)\l  %156 = tail call float @llvm.fmuladd.f32(float %149, float %155, float\l... 0xBFE0000080000000)\l  %157 = tail call float @llvm.fmuladd.f32(float %149, float %156, float\l... 1.000000e+00)\l  %158 = fneg float %153\l  %159 = and i32 %148, 1\l  %160 = icmp eq i32 %159, 0\l  %161 = select i1 %160, float %157, float %158\l  %162 = bitcast float %161 to i32\l  %163 = shl i32 %148, 30\l  %164 = and i32 %163, -2147483648\l  %165 = xor i32 %164, %162\l  %166 = bitcast i32 %165 to float\l  %167 = tail call i1 @llvm.amdgcn.class.f32(float %31, i32 504)\l  %168 = fadd contract float %166, 1.000000e+00\l  %169 = fpext float %168 to double\l  %170 = fmul contract double %169, 5.000000e-01\l  %171 = fmul contract double %170, 5.000000e-01\l  %172 = select i1 %167, double %171, double 0x7FF8000000000000\l  %173 = shl nsw i32 %12, 1\l  %174 = sitofp i32 %173 to float\l  %175 = fmul contract float %174, 0x400921FA00000000\l  %176 = add nsw i32 %1, -1\l  %177 = sitofp i32 %176 to float\l  %178 = fdiv contract float %175, %177\l  %179 = tail call float @llvm.fabs.f32(float %178)\l  %180 = fcmp olt float %179, 1.310720e+05\l  br i1 %180, label %181, label %188\l|{<s0>T|<s1>F}}"];
	Node0x64f0c30:s0 -> Node0x64f85e0;
	Node0x64f0c30:s1 -> Node0x64f8670;
	Node0x64f85e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%181:\l181:                                              \l  %182 = fmul float %179, 0x3FE45F3060000000\l  %183 = tail call float @llvm.rint.f32(float %182)\l  %184 = tail call float @llvm.fma.f32(float %183, float 0xBFF921FB40000000,\l... float %179)\l  %185 = tail call float @llvm.fma.f32(float %183, float 0xBE74442D00000000,\l... float %184)\l  %186 = tail call float @llvm.fma.f32(float %183, float 0xBCF8469880000000,\l... float %185)\l  %187 = fptosi float %183 to i32\l  br label %294\l}"];
	Node0x64f85e0 -> Node0x64f8d30;
	Node0x64f8670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%188:\l188:                                              \l  %189 = bitcast float %179 to i32\l  %190 = lshr i32 %189, 23\l  %191 = and i32 %189, 8388607\l  %192 = or i32 %191, 8388608\l  %193 = zext i32 %192 to i64\l  %194 = mul nuw nsw i64 %193, 4266746795\l  %195 = trunc i64 %194 to i32\l  %196 = lshr i64 %194, 32\l  %197 = mul nuw nsw i64 %193, 1011060801\l  %198 = add nuw nsw i64 %196, %197\l  %199 = trunc i64 %198 to i32\l  %200 = lshr i64 %198, 32\l  %201 = mul nuw nsw i64 %193, 3680671129\l  %202 = add nuw nsw i64 %200, %201\l  %203 = trunc i64 %202 to i32\l  %204 = lshr i64 %202, 32\l  %205 = mul nuw nsw i64 %193, 4113882560\l  %206 = add nuw nsw i64 %204, %205\l  %207 = trunc i64 %206 to i32\l  %208 = lshr i64 %206, 32\l  %209 = mul nuw nsw i64 %193, 4230436817\l  %210 = add nuw nsw i64 %208, %209\l  %211 = trunc i64 %210 to i32\l  %212 = lshr i64 %210, 32\l  %213 = mul nuw nsw i64 %193, 1313084713\l  %214 = add nuw nsw i64 %212, %213\l  %215 = trunc i64 %214 to i32\l  %216 = lshr i64 %214, 32\l  %217 = mul nuw nsw i64 %193, 2734261102\l  %218 = add nuw nsw i64 %216, %217\l  %219 = trunc i64 %218 to i32\l  %220 = lshr i64 %218, 32\l  %221 = trunc i64 %220 to i32\l  %222 = add nsw i32 %190, -120\l  %223 = icmp ugt i32 %222, 63\l  %224 = select i1 %223, i32 %215, i32 %221\l  %225 = select i1 %223, i32 %211, i32 %219\l  %226 = select i1 %223, i32 %207, i32 %215\l  %227 = select i1 %223, i32 %203, i32 %211\l  %228 = select i1 %223, i32 %199, i32 %207\l  %229 = select i1 %223, i32 %195, i32 %203\l  %230 = select i1 %223, i32 -64, i32 0\l  %231 = add nsw i32 %230, %222\l  %232 = icmp ugt i32 %231, 31\l  %233 = select i1 %232, i32 %225, i32 %224\l  %234 = select i1 %232, i32 %226, i32 %225\l  %235 = select i1 %232, i32 %227, i32 %226\l  %236 = select i1 %232, i32 %228, i32 %227\l  %237 = select i1 %232, i32 %229, i32 %228\l  %238 = select i1 %232, i32 -32, i32 0\l  %239 = add nsw i32 %238, %231\l  %240 = icmp ugt i32 %239, 31\l  %241 = select i1 %240, i32 %234, i32 %233\l  %242 = select i1 %240, i32 %235, i32 %234\l  %243 = select i1 %240, i32 %236, i32 %235\l  %244 = select i1 %240, i32 %237, i32 %236\l  %245 = select i1 %240, i32 -32, i32 0\l  %246 = add nsw i32 %245, %239\l  %247 = icmp eq i32 %246, 0\l  %248 = sub nsw i32 32, %246\l  %249 = tail call i32 @llvm.fshr.i32(i32 %241, i32 %242, i32 %248)\l  %250 = tail call i32 @llvm.fshr.i32(i32 %242, i32 %243, i32 %248)\l  %251 = tail call i32 @llvm.fshr.i32(i32 %243, i32 %244, i32 %248)\l  %252 = select i1 %247, i32 %241, i32 %249\l  %253 = select i1 %247, i32 %242, i32 %250\l  %254 = select i1 %247, i32 %243, i32 %251\l  %255 = lshr i32 %252, 29\l  %256 = tail call i32 @llvm.fshl.i32(i32 %252, i32 %253, i32 2)\l  %257 = tail call i32 @llvm.fshl.i32(i32 %253, i32 %254, i32 2)\l  %258 = tail call i32 @llvm.fshl.i32(i32 %254, i32 %244, i32 2)\l  %259 = and i32 %255, 1\l  %260 = sub nsw i32 0, %259\l  %261 = shl i32 %255, 31\l  %262 = xor i32 %256, %260\l  %263 = xor i32 %257, %260\l  %264 = xor i32 %258, %260\l  %265 = tail call i32 @llvm.ctlz.i32(i32 %262, i1 false), !range !7\l  %266 = sub nsw i32 31, %265\l  %267 = tail call i32 @llvm.fshr.i32(i32 %262, i32 %263, i32 %266)\l  %268 = tail call i32 @llvm.fshr.i32(i32 %263, i32 %264, i32 %266)\l  %269 = shl nuw nsw i32 %265, 23\l  %270 = sub nuw nsw i32 1056964608, %269\l  %271 = lshr i32 %267, 9\l  %272 = or i32 %271, %270\l  %273 = or i32 %272, %261\l  %274 = bitcast i32 %273 to float\l  %275 = tail call i32 @llvm.fshl.i32(i32 %267, i32 %268, i32 23)\l  %276 = tail call i32 @llvm.ctlz.i32(i32 %275, i1 false), !range !7\l  %277 = fmul float %274, 0x3FF921FB40000000\l  %278 = add nuw nsw i32 %276, %265\l  %279 = shl nuw nsw i32 %278, 23\l  %280 = sub nuw nsw i32 855638016, %279\l  %281 = sub nsw i32 31, %276\l  %282 = tail call i32 @llvm.fshr.i32(i32 %275, i32 %268, i32 %281)\l  %283 = lshr i32 %282, 9\l  %284 = or i32 %280, %283\l  %285 = or i32 %284, %261\l  %286 = bitcast i32 %285 to float\l  %287 = fneg float %277\l  %288 = tail call float @llvm.fma.f32(float %274, float 0x3FF921FB40000000,\l... float %287)\l  %289 = tail call float @llvm.fma.f32(float %274, float 0x3E74442D00000000,\l... float %288)\l  %290 = tail call float @llvm.fma.f32(float %286, float 0x3FF921FB40000000,\l... float %289)\l  %291 = fadd float %277, %290\l  %292 = lshr i32 %252, 30\l  %293 = add nuw nsw i32 %259, %292\l  br label %294\l}"];
	Node0x64f8670 -> Node0x64f8d30;
	Node0x64f8d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%294:\l294:                                              \l  %295 = phi float [ %186, %181 ], [ %291, %188 ]\l  %296 = phi i32 [ %187, %181 ], [ %293, %188 ]\l  %297 = fmul float %295, %295\l  %298 = tail call float @llvm.fmuladd.f32(float %297, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %299 = tail call float @llvm.fmuladd.f32(float %297, float %298, float\l... 0xBFC55553A0000000)\l  %300 = fmul float %297, %299\l  %301 = tail call float @llvm.fmuladd.f32(float %295, float %300, float %295)\l  %302 = tail call float @llvm.fmuladd.f32(float %297, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %303 = tail call float @llvm.fmuladd.f32(float %297, float %302, float\l... 0x3FA5557EE0000000)\l  %304 = tail call float @llvm.fmuladd.f32(float %297, float %303, float\l... 0xBFE0000080000000)\l  %305 = tail call float @llvm.fmuladd.f32(float %297, float %304, float\l... 1.000000e+00)\l  %306 = fneg float %301\l  %307 = and i32 %296, 1\l  %308 = icmp eq i32 %307, 0\l  %309 = select i1 %308, float %305, float %306\l  %310 = bitcast float %309 to i32\l  %311 = shl i32 %296, 30\l  %312 = and i32 %311, -2147483648\l  %313 = xor i32 %312, %310\l  %314 = bitcast i32 %313 to float\l  %315 = tail call i1 @llvm.amdgcn.class.f32(float %179, i32 504)\l  %316 = fadd contract float %314, 1.000000e+00\l  %317 = fpext float %316 to double\l  %318 = select i1 %315, double %317, double 0x7FF8000000000000\l  %319 = fmul contract double %172, %318\l  %320 = fptrunc double %319 to float\l  %321 = mul nsw i32 %20, %1\l  %322 = add nsw i32 %321, %12\l  %323 = sext i32 %322 to i64\l  %324 = getelementptr inbounds float, float addrspace(1)* %0, i64 %323\l  store float %320, float addrspace(1)* %324, align 4, !tbaa !8\l  br label %325\l}"];
	Node0x64f8d30 -> Node0x64eef00;
	Node0x64eef00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%325:\l325:                                              \l  ret void\l}"];
}
