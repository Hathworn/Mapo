digraph "CFG for '_Z14windowBlackmanPfi' function" {
	label="CFG for '_Z14windowBlackmanPfi' function";

	Node0x5738390 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !5, !invariant.load !6\l  %9 = zext i16 %8 to i32\l  %10 = mul i32 %4, %9\l  %11 = add i32 %10, %3\l  %12 = icmp slt i32 %11, %1\l  br i1 %12, label %13, label %309\l|{<s0>T|<s1>F}}"];
	Node0x5738390:s0 -> Node0x5739300;
	Node0x5738390:s1 -> Node0x573a320;
	Node0x5739300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%13:\l13:                                               \l  %14 = sitofp i32 %11 to float\l  %15 = fmul contract float %14, 0x401921FA00000000\l  %16 = add nsw i32 %1, -1\l  %17 = sitofp i32 %16 to float\l  %18 = fdiv contract float %15, %17\l  %19 = tail call float @llvm.fabs.f32(float %18)\l  %20 = fcmp olt float %19, 1.310720e+05\l  br i1 %20, label %21, label %28\l|{<s0>T|<s1>F}}"];
	Node0x5739300:s0 -> Node0x573b460;
	Node0x5739300:s1 -> Node0x573b4f0;
	Node0x573b460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%21:\l21:                                               \l  %22 = fmul float %19, 0x3FE45F3060000000\l  %23 = tail call float @llvm.rint.f32(float %22)\l  %24 = tail call float @llvm.fma.f32(float %23, float 0xBFF921FB40000000,\l... float %19)\l  %25 = tail call float @llvm.fma.f32(float %23, float 0xBE74442D00000000,\l... float %24)\l  %26 = tail call float @llvm.fma.f32(float %23, float 0xBCF8469880000000,\l... float %25)\l  %27 = fptosi float %23 to i32\l  br label %134\l}"];
	Node0x573b460 -> Node0x573bf30;
	Node0x573b4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%28:\l28:                                               \l  %29 = bitcast float %19 to i32\l  %30 = lshr i32 %29, 23\l  %31 = and i32 %29, 8388607\l  %32 = or i32 %31, 8388608\l  %33 = zext i32 %32 to i64\l  %34 = mul nuw nsw i64 %33, 4266746795\l  %35 = trunc i64 %34 to i32\l  %36 = lshr i64 %34, 32\l  %37 = mul nuw nsw i64 %33, 1011060801\l  %38 = add nuw nsw i64 %36, %37\l  %39 = trunc i64 %38 to i32\l  %40 = lshr i64 %38, 32\l  %41 = mul nuw nsw i64 %33, 3680671129\l  %42 = add nuw nsw i64 %40, %41\l  %43 = trunc i64 %42 to i32\l  %44 = lshr i64 %42, 32\l  %45 = mul nuw nsw i64 %33, 4113882560\l  %46 = add nuw nsw i64 %44, %45\l  %47 = trunc i64 %46 to i32\l  %48 = lshr i64 %46, 32\l  %49 = mul nuw nsw i64 %33, 4230436817\l  %50 = add nuw nsw i64 %48, %49\l  %51 = trunc i64 %50 to i32\l  %52 = lshr i64 %50, 32\l  %53 = mul nuw nsw i64 %33, 1313084713\l  %54 = add nuw nsw i64 %52, %53\l  %55 = trunc i64 %54 to i32\l  %56 = lshr i64 %54, 32\l  %57 = mul nuw nsw i64 %33, 2734261102\l  %58 = add nuw nsw i64 %56, %57\l  %59 = trunc i64 %58 to i32\l  %60 = lshr i64 %58, 32\l  %61 = trunc i64 %60 to i32\l  %62 = add nsw i32 %30, -120\l  %63 = icmp ugt i32 %62, 63\l  %64 = select i1 %63, i32 %55, i32 %61\l  %65 = select i1 %63, i32 %51, i32 %59\l  %66 = select i1 %63, i32 %47, i32 %55\l  %67 = select i1 %63, i32 %43, i32 %51\l  %68 = select i1 %63, i32 %39, i32 %47\l  %69 = select i1 %63, i32 %35, i32 %43\l  %70 = select i1 %63, i32 -64, i32 0\l  %71 = add nsw i32 %70, %62\l  %72 = icmp ugt i32 %71, 31\l  %73 = select i1 %72, i32 %65, i32 %64\l  %74 = select i1 %72, i32 %66, i32 %65\l  %75 = select i1 %72, i32 %67, i32 %66\l  %76 = select i1 %72, i32 %68, i32 %67\l  %77 = select i1 %72, i32 %69, i32 %68\l  %78 = select i1 %72, i32 -32, i32 0\l  %79 = add nsw i32 %78, %71\l  %80 = icmp ugt i32 %79, 31\l  %81 = select i1 %80, i32 %74, i32 %73\l  %82 = select i1 %80, i32 %75, i32 %74\l  %83 = select i1 %80, i32 %76, i32 %75\l  %84 = select i1 %80, i32 %77, i32 %76\l  %85 = select i1 %80, i32 -32, i32 0\l  %86 = add nsw i32 %85, %79\l  %87 = icmp eq i32 %86, 0\l  %88 = sub nsw i32 32, %86\l  %89 = tail call i32 @llvm.fshr.i32(i32 %81, i32 %82, i32 %88)\l  %90 = tail call i32 @llvm.fshr.i32(i32 %82, i32 %83, i32 %88)\l  %91 = tail call i32 @llvm.fshr.i32(i32 %83, i32 %84, i32 %88)\l  %92 = select i1 %87, i32 %81, i32 %89\l  %93 = select i1 %87, i32 %82, i32 %90\l  %94 = select i1 %87, i32 %83, i32 %91\l  %95 = lshr i32 %92, 29\l  %96 = tail call i32 @llvm.fshl.i32(i32 %92, i32 %93, i32 2)\l  %97 = tail call i32 @llvm.fshl.i32(i32 %93, i32 %94, i32 2)\l  %98 = tail call i32 @llvm.fshl.i32(i32 %94, i32 %84, i32 2)\l  %99 = and i32 %95, 1\l  %100 = sub nsw i32 0, %99\l  %101 = shl i32 %95, 31\l  %102 = xor i32 %96, %100\l  %103 = xor i32 %97, %100\l  %104 = xor i32 %98, %100\l  %105 = tail call i32 @llvm.ctlz.i32(i32 %102, i1 false), !range !7\l  %106 = sub nsw i32 31, %105\l  %107 = tail call i32 @llvm.fshr.i32(i32 %102, i32 %103, i32 %106)\l  %108 = tail call i32 @llvm.fshr.i32(i32 %103, i32 %104, i32 %106)\l  %109 = shl nuw nsw i32 %105, 23\l  %110 = sub nuw nsw i32 1056964608, %109\l  %111 = lshr i32 %107, 9\l  %112 = or i32 %111, %110\l  %113 = or i32 %112, %101\l  %114 = bitcast i32 %113 to float\l  %115 = tail call i32 @llvm.fshl.i32(i32 %107, i32 %108, i32 23)\l  %116 = tail call i32 @llvm.ctlz.i32(i32 %115, i1 false), !range !7\l  %117 = fmul float %114, 0x3FF921FB40000000\l  %118 = add nuw nsw i32 %116, %105\l  %119 = shl nuw nsw i32 %118, 23\l  %120 = sub nuw nsw i32 855638016, %119\l  %121 = sub nsw i32 31, %116\l  %122 = tail call i32 @llvm.fshr.i32(i32 %115, i32 %108, i32 %121)\l  %123 = lshr i32 %122, 9\l  %124 = or i32 %120, %123\l  %125 = or i32 %124, %101\l  %126 = bitcast i32 %125 to float\l  %127 = fneg float %117\l  %128 = tail call float @llvm.fma.f32(float %114, float 0x3FF921FB40000000,\l... float %127)\l  %129 = tail call float @llvm.fma.f32(float %114, float 0x3E74442D00000000,\l... float %128)\l  %130 = tail call float @llvm.fma.f32(float %126, float 0x3FF921FB40000000,\l... float %129)\l  %131 = fadd float %117, %130\l  %132 = lshr i32 %92, 30\l  %133 = add nuw nsw i32 %99, %132\l  br label %134\l}"];
	Node0x573b4f0 -> Node0x573bf30;
	Node0x573bf30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%134:\l134:                                              \l  %135 = phi float [ %26, %21 ], [ %131, %28 ]\l  %136 = phi i32 [ %27, %21 ], [ %133, %28 ]\l  %137 = fmul float %135, %135\l  %138 = tail call float @llvm.fmuladd.f32(float %137, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %139 = tail call float @llvm.fmuladd.f32(float %137, float %138, float\l... 0xBFC55553A0000000)\l  %140 = fmul float %137, %139\l  %141 = tail call float @llvm.fmuladd.f32(float %135, float %140, float %135)\l  %142 = tail call float @llvm.fmuladd.f32(float %137, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %143 = tail call float @llvm.fmuladd.f32(float %137, float %142, float\l... 0x3FA5557EE0000000)\l  %144 = tail call float @llvm.fmuladd.f32(float %137, float %143, float\l... 0xBFE0000080000000)\l  %145 = tail call float @llvm.fmuladd.f32(float %137, float %144, float\l... 1.000000e+00)\l  %146 = fneg float %141\l  %147 = and i32 %136, 1\l  %148 = icmp eq i32 %147, 0\l  %149 = select i1 %148, float %145, float %146\l  %150 = bitcast float %149 to i32\l  %151 = shl i32 %136, 30\l  %152 = and i32 %151, -2147483648\l  %153 = xor i32 %152, %150\l  %154 = bitcast i32 %153 to float\l  %155 = tail call i1 @llvm.amdgcn.class.f32(float %19, i32 504)\l  %156 = fpext float %154 to double\l  %157 = fmul contract double %156, -1.850000e-01\l  %158 = select i1 %155, double %157, double 0x7FF8000000000000\l  %159 = fmul contract float %14, 0x402921FA00000000\l  %160 = fdiv contract float %159, %17\l  %161 = tail call float @llvm.fabs.f32(float %160)\l  %162 = fcmp olt float %161, 1.310720e+05\l  br i1 %162, label %163, label %171\l|{<s0>T|<s1>F}}"];
	Node0x573bf30:s0 -> Node0x5743760;
	Node0x573bf30:s1 -> Node0x57437f0;
	Node0x5743760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%163:\l163:                                              \l  %164 = fmul float %161, 0x3FE45F3060000000\l  %165 = tail call float @llvm.rint.f32(float %164)\l  %166 = tail call float @llvm.fma.f32(float %165, float 0xBFF921FB40000000,\l... float %161)\l  %167 = tail call float @llvm.fma.f32(float %165, float 0xBE74442D00000000,\l... float %166)\l  %168 = tail call float @llvm.fma.f32(float %165, float 0xBCF8469880000000,\l... float %167)\l  %169 = fptosi float %165 to i32\l  %170 = bitcast float %161 to i32\l  br label %277\l}"];
	Node0x5743760 -> Node0x5743f20;
	Node0x57437f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%171:\l171:                                              \l  %172 = bitcast float %161 to i32\l  %173 = lshr i32 %172, 23\l  %174 = and i32 %172, 8388607\l  %175 = or i32 %174, 8388608\l  %176 = zext i32 %175 to i64\l  %177 = mul nuw nsw i64 %176, 4266746795\l  %178 = trunc i64 %177 to i32\l  %179 = lshr i64 %177, 32\l  %180 = mul nuw nsw i64 %176, 1011060801\l  %181 = add nuw nsw i64 %179, %180\l  %182 = trunc i64 %181 to i32\l  %183 = lshr i64 %181, 32\l  %184 = mul nuw nsw i64 %176, 3680671129\l  %185 = add nuw nsw i64 %183, %184\l  %186 = trunc i64 %185 to i32\l  %187 = lshr i64 %185, 32\l  %188 = mul nuw nsw i64 %176, 4113882560\l  %189 = add nuw nsw i64 %187, %188\l  %190 = trunc i64 %189 to i32\l  %191 = lshr i64 %189, 32\l  %192 = mul nuw nsw i64 %176, 4230436817\l  %193 = add nuw nsw i64 %191, %192\l  %194 = trunc i64 %193 to i32\l  %195 = lshr i64 %193, 32\l  %196 = mul nuw nsw i64 %176, 1313084713\l  %197 = add nuw nsw i64 %195, %196\l  %198 = trunc i64 %197 to i32\l  %199 = lshr i64 %197, 32\l  %200 = mul nuw nsw i64 %176, 2734261102\l  %201 = add nuw nsw i64 %199, %200\l  %202 = trunc i64 %201 to i32\l  %203 = lshr i64 %201, 32\l  %204 = trunc i64 %203 to i32\l  %205 = add nsw i32 %173, -120\l  %206 = icmp ugt i32 %205, 63\l  %207 = select i1 %206, i32 %198, i32 %204\l  %208 = select i1 %206, i32 %194, i32 %202\l  %209 = select i1 %206, i32 %190, i32 %198\l  %210 = select i1 %206, i32 %186, i32 %194\l  %211 = select i1 %206, i32 %182, i32 %190\l  %212 = select i1 %206, i32 %178, i32 %186\l  %213 = select i1 %206, i32 -64, i32 0\l  %214 = add nsw i32 %213, %205\l  %215 = icmp ugt i32 %214, 31\l  %216 = select i1 %215, i32 %208, i32 %207\l  %217 = select i1 %215, i32 %209, i32 %208\l  %218 = select i1 %215, i32 %210, i32 %209\l  %219 = select i1 %215, i32 %211, i32 %210\l  %220 = select i1 %215, i32 %212, i32 %211\l  %221 = select i1 %215, i32 -32, i32 0\l  %222 = add nsw i32 %221, %214\l  %223 = icmp ugt i32 %222, 31\l  %224 = select i1 %223, i32 %217, i32 %216\l  %225 = select i1 %223, i32 %218, i32 %217\l  %226 = select i1 %223, i32 %219, i32 %218\l  %227 = select i1 %223, i32 %220, i32 %219\l  %228 = select i1 %223, i32 -32, i32 0\l  %229 = add nsw i32 %228, %222\l  %230 = icmp eq i32 %229, 0\l  %231 = sub nsw i32 32, %229\l  %232 = tail call i32 @llvm.fshr.i32(i32 %224, i32 %225, i32 %231)\l  %233 = tail call i32 @llvm.fshr.i32(i32 %225, i32 %226, i32 %231)\l  %234 = tail call i32 @llvm.fshr.i32(i32 %226, i32 %227, i32 %231)\l  %235 = select i1 %230, i32 %224, i32 %232\l  %236 = select i1 %230, i32 %225, i32 %233\l  %237 = select i1 %230, i32 %226, i32 %234\l  %238 = lshr i32 %235, 29\l  %239 = tail call i32 @llvm.fshl.i32(i32 %235, i32 %236, i32 2)\l  %240 = tail call i32 @llvm.fshl.i32(i32 %236, i32 %237, i32 2)\l  %241 = tail call i32 @llvm.fshl.i32(i32 %237, i32 %227, i32 2)\l  %242 = and i32 %238, 1\l  %243 = sub nsw i32 0, %242\l  %244 = shl i32 %238, 31\l  %245 = xor i32 %239, %243\l  %246 = xor i32 %240, %243\l  %247 = xor i32 %241, %243\l  %248 = tail call i32 @llvm.ctlz.i32(i32 %245, i1 false), !range !7\l  %249 = sub nsw i32 31, %248\l  %250 = tail call i32 @llvm.fshr.i32(i32 %245, i32 %246, i32 %249)\l  %251 = tail call i32 @llvm.fshr.i32(i32 %246, i32 %247, i32 %249)\l  %252 = shl nuw nsw i32 %248, 23\l  %253 = sub nuw nsw i32 1056964608, %252\l  %254 = lshr i32 %250, 9\l  %255 = or i32 %254, %253\l  %256 = or i32 %255, %244\l  %257 = bitcast i32 %256 to float\l  %258 = tail call i32 @llvm.fshl.i32(i32 %250, i32 %251, i32 23)\l  %259 = tail call i32 @llvm.ctlz.i32(i32 %258, i1 false), !range !7\l  %260 = fmul float %257, 0x3FF921FB40000000\l  %261 = add nuw nsw i32 %259, %248\l  %262 = shl nuw nsw i32 %261, 23\l  %263 = sub nuw nsw i32 855638016, %262\l  %264 = sub nsw i32 31, %259\l  %265 = tail call i32 @llvm.fshr.i32(i32 %258, i32 %251, i32 %264)\l  %266 = lshr i32 %265, 9\l  %267 = or i32 %263, %266\l  %268 = or i32 %267, %244\l  %269 = bitcast i32 %268 to float\l  %270 = fneg float %260\l  %271 = tail call float @llvm.fma.f32(float %257, float 0x3FF921FB40000000,\l... float %270)\l  %272 = tail call float @llvm.fma.f32(float %257, float 0x3E74442D00000000,\l... float %271)\l  %273 = tail call float @llvm.fma.f32(float %269, float 0x3FF921FB40000000,\l... float %272)\l  %274 = fadd float %260, %273\l  %275 = lshr i32 %235, 30\l  %276 = add nuw nsw i32 %242, %275\l  br label %277\l}"];
	Node0x57437f0 -> Node0x5743f20;
	Node0x5743f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%277:\l277:                                              \l  %278 = phi i32 [ %170, %163 ], [ %172, %171 ]\l  %279 = phi float [ %168, %163 ], [ %274, %171 ]\l  %280 = phi i32 [ %169, %163 ], [ %276, %171 ]\l  %281 = fmul float %279, %279\l  %282 = tail call float @llvm.fmuladd.f32(float %281, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %283 = tail call float @llvm.fmuladd.f32(float %281, float %282, float\l... 0xBFC55553A0000000)\l  %284 = fmul float %281, %283\l  %285 = tail call float @llvm.fmuladd.f32(float %279, float %284, float %279)\l  %286 = tail call float @llvm.fmuladd.f32(float %281, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %287 = tail call float @llvm.fmuladd.f32(float %281, float %286, float\l... 0x3FA5557EE0000000)\l  %288 = tail call float @llvm.fmuladd.f32(float %281, float %287, float\l... 0xBFE0000080000000)\l  %289 = tail call float @llvm.fmuladd.f32(float %281, float %288, float\l... 1.000000e+00)\l  %290 = and i32 %280, 1\l  %291 = icmp eq i32 %290, 0\l  %292 = select i1 %291, float %285, float %289\l  %293 = bitcast float %292 to i32\l  %294 = shl i32 %280, 30\l  %295 = and i32 %294, -2147483648\l  %296 = bitcast float %160 to i32\l  %297 = xor i32 %278, %296\l  %298 = xor i32 %297, %295\l  %299 = xor i32 %298, %293\l  %300 = bitcast i32 %299 to float\l  %301 = tail call i1 @llvm.amdgcn.class.f32(float %161, i32 504)\l  %302 = fpext float %300 to double\l  %303 = fmul contract double %302, 8.000000e-02\l  %304 = select i1 %301, double %303, double 0x7FF8000000000000\l  %305 = fadd contract double %158, %304\l  %306 = fptrunc double %305 to float\l  %307 = sext i32 %11 to i64\l  %308 = getelementptr inbounds float, float addrspace(1)* %0, i64 %307\l  store float %306, float addrspace(1)* %308, align 4, !tbaa !8\l  br label %309\l}"];
	Node0x5743f20 -> Node0x573a320;
	Node0x573a320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%309:\l309:                                              \l  ret void\l}"];
}
