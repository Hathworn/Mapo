digraph "CFG for '_Z7upscalePfS_liiiiii' function" {
	label="CFG for '_Z7upscalePfS_liiiiii' function";

	Node0x64b0ee0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*\l  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !7\l  %20 = mul i32 %12, %16\l  %21 = add i32 %20, %10\l  %22 = zext i32 %21 to i64\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %25 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 2, !range !5, !invariant.load !6\l  %28 = zext i16 %27 to i32\l  %29 = udiv i32 %19, %16\l  %30 = mul i32 %29, %16\l  %31 = icmp ugt i32 %19, %30\l  %32 = zext i1 %31 to i32\l  %33 = add i32 %29, %32\l  %34 = mul i32 %24, %16\l  %35 = mul i32 %34, %28\l  %36 = mul i32 %35, %33\l  %37 = add i32 %36, %23\l  %38 = zext i32 %37 to i64\l  %39 = add nuw nsw i64 %38, %22\l  %40 = icmp slt i64 %39, %2\l  br i1 %40, label %41, label %73\l|{<s0>T|<s1>F}}"];
	Node0x64b0ee0:s0 -> Node0x64b5ca0;
	Node0x64b0ee0:s1 -> Node0x64b5d30;
	Node0x64b5ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%41:\l41:                                               \l  %42 = trunc i64 %39 to i32\l  %43 = freeze i32 %42\l  %44 = freeze i32 %8\l  %45 = sdiv i32 %43, %44\l  %46 = mul i32 %45, %44\l  %47 = sub i32 %43, %46\l  %48 = freeze i32 %7\l  %49 = sdiv i32 %45, %48\l  %50 = mul i32 %49, %48\l  %51 = sub i32 %45, %50\l  %52 = freeze i32 %6\l  %53 = sdiv i32 %49, %52\l  %54 = mul i32 %53, %52\l  %55 = sub i32 %49, %54\l  %56 = freeze i32 %53\l  %57 = sdiv i32 %47, %4\l  %58 = sdiv i32 %51, %4\l  %59 = sdiv i32 %55, %3\l  %60 = sdiv i32 %6, %3\l  %61 = sdiv i32 %7, %4\l  %62 = sdiv i32 %8, %4\l  %63 = mul nsw i32 %60, %56\l  %64 = add nsw i32 %63, %59\l  %65 = mul nsw i32 %64, %61\l  %66 = add nsw i32 %65, %58\l  %67 = mul nsw i32 %66, %62\l  %68 = add nsw i32 %67, %57\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !16,\l... !amdgpu.noclobber !6\l  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  store float %71, float addrspace(1)* %72, align 4, !tbaa !16\l  br label %73\l}"];
	Node0x64b5ca0 -> Node0x64b5d30;
	Node0x64b5d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%73:\l73:                                               \l  ret void\l}"];
}
