digraph "CFG for '_Z9downscalePfS_liiiiii' function" {
	label="CFG for '_Z9downscalePfS_liiiiii' function";

	Node0x47b3d50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !5, !invariant.load !6\l  %16 = zext i16 %15 to i32\l  %17 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %18 = bitcast i8 addrspace(4)* %17 to i32 addrspace(4)*\l  %19 = load i32, i32 addrspace(4)* %18, align 4, !tbaa !7\l  %20 = mul i32 %12, %16\l  %21 = add i32 %20, %10\l  %22 = zext i32 %21 to i64\l  %23 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %25 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 2, !range !5, !invariant.load !6\l  %28 = zext i16 %27 to i32\l  %29 = udiv i32 %19, %16\l  %30 = mul i32 %29, %16\l  %31 = icmp ugt i32 %19, %30\l  %32 = zext i1 %31 to i32\l  %33 = add i32 %29, %32\l  %34 = mul i32 %24, %16\l  %35 = mul i32 %34, %28\l  %36 = mul i32 %35, %33\l  %37 = add i32 %36, %23\l  %38 = zext i32 %37 to i64\l  %39 = add nuw nsw i64 %38, %22\l  %40 = icmp slt i64 %39, %2\l  %41 = icmp sgt i32 %3, 0\l  %42 = select i1 %40, i1 %41, i1 false\l  br i1 %42, label %43, label %149\l|{<s0>T|<s1>F}}"];
	Node0x47b3d50:s0 -> Node0x47b8c80;
	Node0x47b3d50:s1 -> Node0x47b8d10;
	Node0x47b8c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%43:\l43:                                               \l  %44 = icmp sgt i32 %4, 0\l  %45 = trunc i64 %39 to i32\l  %46 = getelementptr inbounds float, float addrspace(1)* %0, i64 %39\l  %47 = and i32 %4, 3\l  %48 = icmp ult i32 %4, 4\l  %49 = and i32 %4, -4\l  %50 = icmp eq i32 %47, 0\l  br label %51\l}"];
	Node0x47b8c80 -> Node0x47b92c0;
	Node0x47b92c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %43 ], [ %79, %78 ]\l  br i1 %44, label %53, label %78\l|{<s0>T|<s1>F}}"];
	Node0x47b92c0:s0 -> Node0x47b94f0;
	Node0x47b92c0:s1 -> Node0x47b93b0;
	Node0x47b94f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%53:\l53:                                               \l  %54 = freeze i32 %45\l  %55 = freeze i32 %8\l  %56 = sdiv i32 %54, %55\l  %57 = mul i32 %56, %55\l  %58 = sub i32 %54, %57\l  %59 = freeze i32 %7\l  %60 = sdiv i32 %56, %59\l  %61 = mul i32 %60, %59\l  %62 = sub i32 %56, %61\l  %63 = freeze i32 %6\l  %64 = sdiv i32 %60, %63\l  %65 = mul i32 %64, %63\l  %66 = sub i32 %60, %65\l  %67 = freeze i32 %64\l  %68 = mul i32 %67, %6\l  %69 = add i32 %68, %66\l  %70 = mul i32 %69, %3\l  %71 = add i32 %70, %52\l  %72 = mul i32 %71, %7\l  %73 = add i32 %72, %62\l  %74 = mul i32 %73, %4\l  br label %75\l}"];
	Node0x47b94f0 -> Node0x47b8730;
	Node0x47b8730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%75:\l75:                                               \l  %76 = phi i32 [ %101, %100 ], [ 0, %53 ]\l  %77 = load float, float addrspace(1)* %46, align 4, !tbaa !16\l  br i1 %48, label %81, label %103\l|{<s0>T|<s1>F}}"];
	Node0x47b8730:s0 -> Node0x47ba770;
	Node0x47b8730:s1 -> Node0x47ba800;
	Node0x47b93b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%78:\l78:                                               \l  %79 = add nuw nsw i32 %52, 1\l  %80 = icmp eq i32 %79, %3\l  br i1 %80, label %149, label %51, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x47b93b0:s0 -> Node0x47b8d10;
	Node0x47b93b0:s1 -> Node0x47b92c0;
	Node0x47ba770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%81:\l81:                                               \l  %82 = phi float [ %77, %75 ], [ %145, %103 ]\l  %83 = phi i32 [ 0, %75 ], [ %146, %103 ]\l  br i1 %50, label %100, label %84\l|{<s0>T|<s1>F}}"];
	Node0x47ba770:s0 -> Node0x47ba450;
	Node0x47ba770:s1 -> Node0x47bada0;
	Node0x47bada0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%84:\l84:                                               \l  %85 = phi float [ %96, %84 ], [ %82, %81 ]\l  %86 = phi i32 [ %97, %84 ], [ %83, %81 ]\l  %87 = phi i32 [ %98, %84 ], [ 0, %81 ]\l  %88 = add i32 %74, %86\l  %89 = mul i32 %88, %8\l  %90 = add i32 %89, %58\l  %91 = mul i32 %90, %4\l  %92 = add i32 %91, %76\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16\l  %96 = fadd contract float %95, %85\l  store float %96, float addrspace(1)* %46, align 4, !tbaa !16\l  %97 = add nuw nsw i32 %86, 1\l  %98 = add i32 %87, 1\l  %99 = icmp eq i32 %98, %47\l  br i1 %99, label %100, label %84, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x47bada0:s0 -> Node0x47ba450;
	Node0x47bada0:s1 -> Node0x47bada0;
	Node0x47ba450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%100:\l100:                                              \l  %101 = add nuw nsw i32 %76, 1\l  %102 = icmp eq i32 %101, %4\l  br i1 %102, label %78, label %75, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x47ba450:s0 -> Node0x47b93b0;
	Node0x47ba450:s1 -> Node0x47b8730;
	Node0x47ba800 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%103:\l103:                                              \l  %104 = phi float [ %145, %103 ], [ %77, %75 ]\l  %105 = phi i32 [ %146, %103 ], [ 0, %75 ]\l  %106 = phi i32 [ %147, %103 ], [ 0, %75 ]\l  %107 = add i32 %74, %105\l  %108 = mul i32 %107, %8\l  %109 = add i32 %108, %58\l  %110 = mul i32 %109, %4\l  %111 = add i32 %110, %76\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !16\l  %115 = fadd contract float %114, %104\l  store float %115, float addrspace(1)* %46, align 4, !tbaa !16\l  %116 = or i32 %105, 1\l  %117 = add i32 %74, %116\l  %118 = mul i32 %117, %8\l  %119 = add i32 %118, %58\l  %120 = mul i32 %119, %4\l  %121 = add i32 %120, %76\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !16\l  %125 = fadd contract float %124, %115\l  store float %125, float addrspace(1)* %46, align 4, !tbaa !16\l  %126 = or i32 %105, 2\l  %127 = add i32 %74, %126\l  %128 = mul i32 %127, %8\l  %129 = add i32 %128, %58\l  %130 = mul i32 %129, %4\l  %131 = add i32 %130, %76\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !16\l  %135 = fadd contract float %134, %125\l  store float %135, float addrspace(1)* %46, align 4, !tbaa !16\l  %136 = or i32 %105, 3\l  %137 = add i32 %74, %136\l  %138 = mul i32 %137, %8\l  %139 = add i32 %138, %58\l  %140 = mul i32 %139, %4\l  %141 = add i32 %140, %76\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %1, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !16\l  %145 = fadd contract float %144, %135\l  store float %145, float addrspace(1)* %46, align 4, !tbaa !16\l  %146 = add nuw nsw i32 %105, 4\l  %147 = add i32 %106, 4\l  %148 = icmp eq i32 %147, %49\l  br i1 %148, label %81, label %103, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x47ba800:s0 -> Node0x47ba770;
	Node0x47ba800:s1 -> Node0x47ba800;
	Node0x47b8d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%149:\l149:                                              \l  ret void\l}"];
}
