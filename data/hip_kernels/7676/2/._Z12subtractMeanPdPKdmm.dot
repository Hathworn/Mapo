digraph "CFG for '_Z12subtractMeanPdPKdmm' function" {
	label="CFG for '_Z12subtractMeanPdPKdmm' function";

	Node0x58dacc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = zext i32 %13 to i64\l  %15 = icmp ult i64 %14, %3\l  %16 = icmp ne i64 %2, 0\l  %17 = select i1 %15, i1 %16, i1 false\l  br i1 %17, label %18, label %82\l|{<s0>T|<s1>F}}"];
	Node0x58dacc0:s0 -> Node0x58db8a0;
	Node0x58dacc0:s1 -> Node0x58dced0;
	Node0x58db8a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = getelementptr inbounds double, double addrspace(1)* %1, i64 %14\l  %20 = and i64 %2, 3\l  %21 = icmp ult i64 %2, 4\l  br i1 %21, label %65, label %22\l|{<s0>T|<s1>F}}"];
	Node0x58db8a0:s0 -> Node0x58dd200;
	Node0x58db8a0:s1 -> Node0x58dd250;
	Node0x58dd250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%22:\l22:                                               \l  %23 = and i64 %2, -4\l  br label %24\l}"];
	Node0x58dd250 -> Node0x58dd450;
	Node0x58dd450 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%24:\l24:                                               \l  %25 = phi i64 [ 0, %22 ], [ %62, %24 ]\l  %26 = phi i64 [ 0, %22 ], [ %63, %24 ]\l  %27 = load double, double addrspace(1)* %19, align 8, !tbaa !7\l  %28 = mul i64 %25, %3\l  %29 = add i64 %28, %14\l  %30 = getelementptr inbounds double, double addrspace(1)* %0, i64 %29\l  %31 = load double, double addrspace(1)* %30, align 8, !tbaa !7\l  %32 = fsub contract double %31, %27\l  %33 = fcmp contract olt double %32, 0.000000e+00\l  %34 = select i1 %33, double 0.000000e+00, double %32\l  store double %34, double addrspace(1)* %30, align 8, !tbaa !7\l  %35 = or i64 %25, 1\l  %36 = load double, double addrspace(1)* %19, align 8, !tbaa !7\l  %37 = mul i64 %35, %3\l  %38 = add i64 %37, %14\l  %39 = getelementptr inbounds double, double addrspace(1)* %0, i64 %38\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7\l  %41 = fsub contract double %40, %36\l  %42 = fcmp contract olt double %41, 0.000000e+00\l  %43 = select i1 %42, double 0.000000e+00, double %41\l  store double %43, double addrspace(1)* %39, align 8, !tbaa !7\l  %44 = or i64 %25, 2\l  %45 = load double, double addrspace(1)* %19, align 8, !tbaa !7\l  %46 = mul i64 %44, %3\l  %47 = add i64 %46, %14\l  %48 = getelementptr inbounds double, double addrspace(1)* %0, i64 %47\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !7\l  %50 = fsub contract double %49, %45\l  %51 = fcmp contract olt double %50, 0.000000e+00\l  %52 = select i1 %51, double 0.000000e+00, double %50\l  store double %52, double addrspace(1)* %48, align 8, !tbaa !7\l  %53 = or i64 %25, 3\l  %54 = load double, double addrspace(1)* %19, align 8, !tbaa !7\l  %55 = mul i64 %53, %3\l  %56 = add i64 %55, %14\l  %57 = getelementptr inbounds double, double addrspace(1)* %0, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !7\l  %59 = fsub contract double %58, %54\l  %60 = fcmp contract olt double %59, 0.000000e+00\l  %61 = select i1 %60, double 0.000000e+00, double %59\l  store double %61, double addrspace(1)* %57, align 8, !tbaa !7\l  %62 = add nuw i64 %25, 4\l  %63 = add i64 %26, 4\l  %64 = icmp eq i64 %63, %23\l  br i1 %64, label %65, label %24, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x58dd450:s0 -> Node0x58dd200;
	Node0x58dd450:s1 -> Node0x58dd450;
	Node0x58dd200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%65:\l65:                                               \l  %66 = phi i64 [ 0, %18 ], [ %62, %24 ]\l  %67 = icmp eq i64 %20, 0\l  br i1 %67, label %82, label %68\l|{<s0>T|<s1>F}}"];
	Node0x58dd200:s0 -> Node0x58dced0;
	Node0x58dd200:s1 -> Node0x58de380;
	Node0x58de380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%68:\l68:                                               \l  %69 = phi i64 [ %79, %68 ], [ %66, %65 ]\l  %70 = phi i64 [ %80, %68 ], [ 0, %65 ]\l  %71 = load double, double addrspace(1)* %19, align 8, !tbaa !7\l  %72 = mul i64 %69, %3\l  %73 = add i64 %72, %14\l  %74 = getelementptr inbounds double, double addrspace(1)* %0, i64 %73\l  %75 = load double, double addrspace(1)* %74, align 8, !tbaa !7\l  %76 = fsub contract double %75, %71\l  %77 = fcmp contract olt double %76, 0.000000e+00\l  %78 = select i1 %77, double 0.000000e+00, double %76\l  store double %78, double addrspace(1)* %74, align 8, !tbaa !7\l  %79 = add nuw i64 %69, 1\l  %80 = add i64 %70, 1\l  %81 = icmp eq i64 %80, %20\l  br i1 %81, label %82, label %68, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x58de380:s0 -> Node0x58dced0;
	Node0x58de380:s1 -> Node0x58de380;
	Node0x58dced0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%82:\l82:                                               \l  ret void\l}"];
}
