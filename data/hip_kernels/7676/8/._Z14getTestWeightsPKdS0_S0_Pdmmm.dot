digraph "CFG for '_Z14getTestWeightsPKdS0_S0_Pdmmm' function" {
	label="CFG for '_Z14getTestWeightsPKdS0_S0_Pdmmm' function";

	Node0x4b65610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%7:\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = zext i32 %8 to i64\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = mul i32 %10, %15\l  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %18 = add i32 %16, %17\l  %19 = zext i32 %18 to i64\l  %20 = icmp ult i64 %19, %4\l  %21 = icmp ult i64 %9, %6\l  %22 = select i1 %20, i1 %21, i1 false\l  br i1 %22, label %23, label %121\l|{<s0>T|<s1>F}}"];
	Node0x4b65610:s0 -> Node0x4b679c0;
	Node0x4b65610:s1 -> Node0x4b67a50;
	Node0x4b679c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%23:\l23:                                               \l  %24 = mul i64 %9, %4\l  %25 = add i64 %24, %19\l  %26 = getelementptr inbounds double, double addrspace(1)* %3, i64 %25\l  store double 0.000000e+00, double addrspace(1)* %26, align 8, !tbaa !7\l  %27 = icmp eq i64 %5, 0\l  br i1 %27, label %121, label %28\l|{<s0>T|<s1>F}}"];
	Node0x4b679c0:s0 -> Node0x4b67a50;
	Node0x4b679c0:s1 -> Node0x4b689f0;
	Node0x4b689f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = mul i64 %19, %5\l  %30 = mul i64 %9, %5\l  %31 = and i64 %5, 3\l  %32 = icmp ult i64 %5, 4\l  br i1 %32, label %97, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4b689f0:s0 -> Node0x4b67310;
	Node0x4b689f0:s1 -> Node0x4b67360;
	Node0x4b67360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i64 %5, -4\l  br label %35\l}"];
	Node0x4b67360 -> Node0x4b690f0;
	Node0x4b690f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%35:\l35:                                               \l  %36 = phi double [ 0.000000e+00, %33 ], [ %93, %35 ]\l  %37 = phi i64 [ 0, %33 ], [ %94, %35 ]\l  %38 = phi i64 [ 0, %33 ], [ %95, %35 ]\l  %39 = add i64 %37, %29\l  %40 = getelementptr inbounds double, double addrspace(1)* %2, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7\l  %42 = getelementptr inbounds double, double addrspace(1)* %1, i64 %37\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !7\l  %44 = fsub contract double %41, %43\l  %45 = fcmp contract olt double %44, 0.000000e+00\l  %46 = select i1 %45, double 0.000000e+00, double %44\l  %47 = add i64 %37, %30\l  %48 = getelementptr inbounds double, double addrspace(1)* %0, i64 %47\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !7\l  %50 = fmul contract double %49, %46\l  %51 = fadd contract double %36, %50\l  store double %51, double addrspace(1)* %26, align 8, !tbaa !7\l  %52 = or i64 %37, 1\l  %53 = add i64 %52, %29\l  %54 = getelementptr inbounds double, double addrspace(1)* %2, i64 %53\l  %55 = load double, double addrspace(1)* %54, align 8, !tbaa !7\l  %56 = getelementptr inbounds double, double addrspace(1)* %1, i64 %52\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !7\l  %58 = fsub contract double %55, %57\l  %59 = fcmp contract olt double %58, 0.000000e+00\l  %60 = select i1 %59, double 0.000000e+00, double %58\l  %61 = add i64 %52, %30\l  %62 = getelementptr inbounds double, double addrspace(1)* %0, i64 %61\l  %63 = load double, double addrspace(1)* %62, align 8, !tbaa !7\l  %64 = fmul contract double %63, %60\l  %65 = fadd contract double %51, %64\l  store double %65, double addrspace(1)* %26, align 8, !tbaa !7\l  %66 = or i64 %37, 2\l  %67 = add i64 %66, %29\l  %68 = getelementptr inbounds double, double addrspace(1)* %2, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !7\l  %70 = getelementptr inbounds double, double addrspace(1)* %1, i64 %66\l  %71 = load double, double addrspace(1)* %70, align 8, !tbaa !7\l  %72 = fsub contract double %69, %71\l  %73 = fcmp contract olt double %72, 0.000000e+00\l  %74 = select i1 %73, double 0.000000e+00, double %72\l  %75 = add i64 %66, %30\l  %76 = getelementptr inbounds double, double addrspace(1)* %0, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !7\l  %78 = fmul contract double %77, %74\l  %79 = fadd contract double %65, %78\l  store double %79, double addrspace(1)* %26, align 8, !tbaa !7\l  %80 = or i64 %37, 3\l  %81 = add i64 %80, %29\l  %82 = getelementptr inbounds double, double addrspace(1)* %2, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !7\l  %84 = getelementptr inbounds double, double addrspace(1)* %1, i64 %80\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7\l  %86 = fsub contract double %83, %85\l  %87 = fcmp contract olt double %86, 0.000000e+00\l  %88 = select i1 %87, double 0.000000e+00, double %86\l  %89 = add i64 %80, %30\l  %90 = getelementptr inbounds double, double addrspace(1)* %0, i64 %89\l  %91 = load double, double addrspace(1)* %90, align 8, !tbaa !7\l  %92 = fmul contract double %91, %88\l  %93 = fadd contract double %79, %92\l  store double %93, double addrspace(1)* %26, align 8, !tbaa !7\l  %94 = add nuw i64 %37, 4\l  %95 = add i64 %38, 4\l  %96 = icmp eq i64 %95, %34\l  br i1 %96, label %97, label %35, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4b690f0:s0 -> Node0x4b67310;
	Node0x4b690f0:s1 -> Node0x4b690f0;
	Node0x4b67310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%97:\l97:                                               \l  %98 = phi double [ 0.000000e+00, %28 ], [ %93, %35 ]\l  %99 = phi i64 [ 0, %28 ], [ %94, %35 ]\l  %100 = icmp eq i64 %31, 0\l  br i1 %100, label %121, label %101\l|{<s0>T|<s1>F}}"];
	Node0x4b67310:s0 -> Node0x4b67a50;
	Node0x4b67310:s1 -> Node0x4b6c360;
	Node0x4b6c360 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%101:\l101:                                              \l  %102 = phi double [ %117, %101 ], [ %98, %97 ]\l  %103 = phi i64 [ %118, %101 ], [ %99, %97 ]\l  %104 = phi i64 [ %119, %101 ], [ 0, %97 ]\l  %105 = add i64 %103, %29\l  %106 = getelementptr inbounds double, double addrspace(1)* %2, i64 %105\l  %107 = load double, double addrspace(1)* %106, align 8, !tbaa !7\l  %108 = getelementptr inbounds double, double addrspace(1)* %1, i64 %103\l  %109 = load double, double addrspace(1)* %108, align 8, !tbaa !7\l  %110 = fsub contract double %107, %109\l  %111 = fcmp contract olt double %110, 0.000000e+00\l  %112 = select i1 %111, double 0.000000e+00, double %110\l  %113 = add i64 %103, %30\l  %114 = getelementptr inbounds double, double addrspace(1)* %0, i64 %113\l  %115 = load double, double addrspace(1)* %114, align 8, !tbaa !7\l  %116 = fmul contract double %115, %112\l  %117 = fadd contract double %102, %116\l  store double %117, double addrspace(1)* %26, align 8, !tbaa !7\l  %118 = add nuw i64 %103, 1\l  %119 = add i64 %104, 1\l  %120 = icmp eq i64 %119, %31\l  br i1 %120, label %121, label %101, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4b6c360:s0 -> Node0x4b67a50;
	Node0x4b6c360:s1 -> Node0x4b6c360;
	Node0x4b67a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%121:\l121:                                              \l  ret void\l}"];
}
