digraph "CFG for '_Z10getWeightsPKdS0_Pdmmm' function" {
	label="CFG for '_Z10getWeightsPKdS0_Pdmmm' function";

	Node0x5d48830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = zext i32 %7 to i64\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = zext i32 %17 to i64\l  %19 = icmp ult i64 %18, %3\l  %20 = icmp ult i64 %8, %5\l  %21 = select i1 %19, i1 %20, i1 false\l  br i1 %21, label %22, label %131\l|{<s0>T|<s1>F}}"];
	Node0x5d48830:s0 -> Node0x5d4ab90;
	Node0x5d48830:s1 -> Node0x5d4ac20;
	Node0x5d4ab90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%22:\l22:                                               \l  %23 = mul i64 %8, %3\l  %24 = add i64 %23, %18\l  %25 = getelementptr inbounds double, double addrspace(1)* %2, i64 %24\l  store double 0.000000e+00, double addrspace(1)* %25, align 8, !tbaa !7\l  %26 = icmp eq i64 %4, 0\l  br i1 %26, label %131, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5d4ab90:s0 -> Node0x5d4ac20;
	Node0x5d4ab90:s1 -> Node0x5d4bbc0;
	Node0x5d4bbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%27:\l27:                                               \l  %28 = mul i64 %8, %4\l  %29 = mul i64 %18, %4\l  %30 = and i64 %4, 7\l  %31 = icmp ult i64 %4, 8\l  br i1 %31, label %112, label %32\l|{<s0>T|<s1>F}}"];
	Node0x5d4bbc0:s0 -> Node0x5d4bfa0;
	Node0x5d4bbc0:s1 -> Node0x5d4bff0;
	Node0x5d4bff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i64 %4, -8\l  br label %34\l}"];
	Node0x5d4bff0 -> Node0x5d4a900;
	Node0x5d4a900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%34:\l34:                                               \l  %35 = phi double [ 0.000000e+00, %32 ], [ %108, %34 ]\l  %36 = phi i64 [ 0, %32 ], [ %109, %34 ]\l  %37 = phi i64 [ 0, %32 ], [ %110, %34 ]\l  %38 = add i64 %36, %28\l  %39 = getelementptr inbounds double, double addrspace(1)* %0, i64 %38\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7\l  %41 = add i64 %36, %29\l  %42 = getelementptr inbounds double, double addrspace(1)* %1, i64 %41\l  %43 = load double, double addrspace(1)* %42, align 8, !tbaa !7\l  %44 = fmul contract double %40, %43\l  %45 = fadd contract double %35, %44\l  store double %45, double addrspace(1)* %25, align 8, !tbaa !7\l  %46 = or i64 %36, 1\l  %47 = add i64 %46, %28\l  %48 = getelementptr inbounds double, double addrspace(1)* %0, i64 %47\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !7\l  %50 = add i64 %46, %29\l  %51 = getelementptr inbounds double, double addrspace(1)* %1, i64 %50\l  %52 = load double, double addrspace(1)* %51, align 8, !tbaa !7\l  %53 = fmul contract double %49, %52\l  %54 = fadd contract double %45, %53\l  store double %54, double addrspace(1)* %25, align 8, !tbaa !7\l  %55 = or i64 %36, 2\l  %56 = add i64 %55, %28\l  %57 = getelementptr inbounds double, double addrspace(1)* %0, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !7\l  %59 = add i64 %55, %29\l  %60 = getelementptr inbounds double, double addrspace(1)* %1, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !7\l  %62 = fmul contract double %58, %61\l  %63 = fadd contract double %54, %62\l  store double %63, double addrspace(1)* %25, align 8, !tbaa !7\l  %64 = or i64 %36, 3\l  %65 = add i64 %64, %28\l  %66 = getelementptr inbounds double, double addrspace(1)* %0, i64 %65\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !7\l  %68 = add i64 %64, %29\l  %69 = getelementptr inbounds double, double addrspace(1)* %1, i64 %68\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !7\l  %71 = fmul contract double %67, %70\l  %72 = fadd contract double %63, %71\l  store double %72, double addrspace(1)* %25, align 8, !tbaa !7\l  %73 = or i64 %36, 4\l  %74 = add i64 %73, %28\l  %75 = getelementptr inbounds double, double addrspace(1)* %0, i64 %74\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7\l  %77 = add i64 %73, %29\l  %78 = getelementptr inbounds double, double addrspace(1)* %1, i64 %77\l  %79 = load double, double addrspace(1)* %78, align 8, !tbaa !7\l  %80 = fmul contract double %76, %79\l  %81 = fadd contract double %72, %80\l  store double %81, double addrspace(1)* %25, align 8, !tbaa !7\l  %82 = or i64 %36, 5\l  %83 = add i64 %82, %28\l  %84 = getelementptr inbounds double, double addrspace(1)* %0, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7\l  %86 = add i64 %82, %29\l  %87 = getelementptr inbounds double, double addrspace(1)* %1, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7\l  %89 = fmul contract double %85, %88\l  %90 = fadd contract double %81, %89\l  store double %90, double addrspace(1)* %25, align 8, !tbaa !7\l  %91 = or i64 %36, 6\l  %92 = add i64 %91, %28\l  %93 = getelementptr inbounds double, double addrspace(1)* %0, i64 %92\l  %94 = load double, double addrspace(1)* %93, align 8, !tbaa !7\l  %95 = add i64 %91, %29\l  %96 = getelementptr inbounds double, double addrspace(1)* %1, i64 %95\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !7\l  %98 = fmul contract double %94, %97\l  %99 = fadd contract double %90, %98\l  store double %99, double addrspace(1)* %25, align 8, !tbaa !7\l  %100 = or i64 %36, 7\l  %101 = add i64 %100, %28\l  %102 = getelementptr inbounds double, double addrspace(1)* %0, i64 %101\l  %103 = load double, double addrspace(1)* %102, align 8, !tbaa !7\l  %104 = add i64 %100, %29\l  %105 = getelementptr inbounds double, double addrspace(1)* %1, i64 %104\l  %106 = load double, double addrspace(1)* %105, align 8, !tbaa !7\l  %107 = fmul contract double %103, %106\l  %108 = fadd contract double %99, %107\l  store double %108, double addrspace(1)* %25, align 8, !tbaa !7\l  %109 = add nuw i64 %36, 8\l  %110 = add i64 %37, 8\l  %111 = icmp eq i64 %110, %33\l  br i1 %111, label %112, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5d4a900:s0 -> Node0x5d4bfa0;
	Node0x5d4a900:s1 -> Node0x5d4a900;
	Node0x5d4bfa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%112:\l112:                                              \l  %113 = phi double [ 0.000000e+00, %27 ], [ %108, %34 ]\l  %114 = phi i64 [ 0, %27 ], [ %109, %34 ]\l  %115 = icmp eq i64 %30, 0\l  br i1 %115, label %131, label %116\l|{<s0>T|<s1>F}}"];
	Node0x5d4bfa0:s0 -> Node0x5d4ac20;
	Node0x5d4bfa0:s1 -> Node0x5d50080;
	Node0x5d50080 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%116:\l116:                                              \l  %117 = phi double [ %127, %116 ], [ %113, %112 ]\l  %118 = phi i64 [ %128, %116 ], [ %114, %112 ]\l  %119 = phi i64 [ %129, %116 ], [ 0, %112 ]\l  %120 = add i64 %118, %28\l  %121 = getelementptr inbounds double, double addrspace(1)* %0, i64 %120\l  %122 = load double, double addrspace(1)* %121, align 8, !tbaa !7\l  %123 = add i64 %118, %29\l  %124 = getelementptr inbounds double, double addrspace(1)* %1, i64 %123\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !7\l  %126 = fmul contract double %122, %125\l  %127 = fadd contract double %117, %126\l  store double %127, double addrspace(1)* %25, align 8, !tbaa !7\l  %128 = add nuw i64 %118, 1\l  %129 = add i64 %119, 1\l  %130 = icmp eq i64 %129, %30\l  br i1 %130, label %131, label %116, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5d50080:s0 -> Node0x5d4ac20;
	Node0x5d50080:s1 -> Node0x5d50080;
	Node0x5d4ac20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%131:\l131:                                              \l  ret void\l}"];
}
