digraph "CFG for '_Z20kernel_updateweightsiPdS_S_d' function" {
	label="CFG for '_Z20kernel_updateweightsiPdS_S_d' function";

	Node0x51fa440 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = icmp ult i32 %14, %0\l  br i1 %15, label %16, label %111\l|{<s0>T|<s1>F}}"];
	Node0x51fa440:s0 -> Node0x51fc340;
	Node0x51fa440:s1 -> Node0x51fc3d0;
	Node0x51fc340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%16:\l16:                                               \l  %17 = fadd contract double %4, 1.000000e+00\l  %18 = zext i32 %14 to i64\l  %19 = getelementptr inbounds double, double addrspace(1)* %2, i64 %18\l  %20 = load double, double addrspace(1)* %19, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %21 = fmul contract double %20, %20\l  %22 = fadd contract double %21, %4\l  %23 = fdiv contract double %17, %22\l  %24 = getelementptr inbounds double, double addrspace(1)* %1, i64 %18\l  store double %23, double addrspace(1)* %24, align 8, !tbaa !7\l  %25 = tail call double @llvm.amdgcn.frexp.mant.f64(double %23)\l  %26 = fcmp olt double %25, 0x3FE5555555555555\l  %27 = zext i1 %26 to i32\l  %28 = tail call double @llvm.amdgcn.ldexp.f64(double %25, i32 %27)\l  %29 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %23)\l  %30 = sub nsw i32 %29, %27\l  %31 = fadd double %28, -1.000000e+00\l  %32 = fadd double %28, 1.000000e+00\l  %33 = fadd double %32, -1.000000e+00\l  %34 = fsub double %28, %33\l  %35 = tail call double @llvm.amdgcn.rcp.f64(double %32)\l  %36 = fneg double %32\l  %37 = tail call double @llvm.fma.f64(double %36, double %35, double\l... 1.000000e+00)\l  %38 = tail call double @llvm.fma.f64(double %37, double %35, double %35)\l  %39 = tail call double @llvm.fma.f64(double %36, double %38, double\l... 1.000000e+00)\l  %40 = tail call double @llvm.fma.f64(double %39, double %38, double %38)\l  %41 = fmul double %31, %40\l  %42 = fmul double %32, %41\l  %43 = fneg double %42\l  %44 = tail call double @llvm.fma.f64(double %41, double %32, double %43)\l  %45 = tail call double @llvm.fma.f64(double %41, double %34, double %44)\l  %46 = fadd double %42, %45\l  %47 = fsub double %46, %42\l  %48 = fsub double %45, %47\l  %49 = fsub double %31, %46\l  %50 = fsub double %31, %49\l  %51 = fsub double %50, %46\l  %52 = fsub double %51, %48\l  %53 = fadd double %49, %52\l  %54 = fmul double %40, %53\l  %55 = fadd double %41, %54\l  %56 = fsub double %55, %41\l  %57 = fsub double %54, %56\l  %58 = fmul double %55, %55\l  %59 = tail call double @llvm.fma.f64(double %58, double 0x3FC3AB76BF559E2B,\l... double 0x3FC385386B47B09A)\l  %60 = tail call double @llvm.fma.f64(double %58, double %59, double\l... 0x3FC7474DD7F4DF2E)\l  %61 = tail call double @llvm.fma.f64(double %58, double %60, double\l... 0x3FCC71C016291751)\l  %62 = tail call double @llvm.fma.f64(double %58, double %61, double\l... 0x3FD249249B27ACF1)\l  %63 = tail call double @llvm.fma.f64(double %58, double %62, double\l... 0x3FD99999998EF7B6)\l  %64 = tail call double @llvm.fma.f64(double %58, double %63, double\l... 0x3FE5555555555780)\l  %65 = tail call double @llvm.amdgcn.ldexp.f64(double %55, i32 1)\l  %66 = tail call double @llvm.amdgcn.ldexp.f64(double %57, i32 1)\l  %67 = fmul double %55, %58\l  %68 = fmul double %67, %64\l  %69 = fadd double %65, %68\l  %70 = fsub double %69, %65\l  %71 = fsub double %68, %70\l  %72 = fadd double %66, %71\l  %73 = fadd double %69, %72\l  %74 = fsub double %73, %69\l  %75 = fsub double %72, %74\l  %76 = sitofp i32 %30 to double\l  %77 = fmul double %76, 0x3FE62E42FEFA39EF\l  %78 = fneg double %77\l  %79 = tail call double @llvm.fma.f64(double %76, double 0x3FE62E42FEFA39EF,\l... double %78)\l  %80 = tail call double @llvm.fma.f64(double %76, double 0x3C7ABC9E3B39803F,\l... double %79)\l  %81 = fadd double %77, %80\l  %82 = fsub double %81, %77\l  %83 = fsub double %80, %82\l  %84 = fadd double %81, %73\l  %85 = fsub double %84, %81\l  %86 = fsub double %84, %85\l  %87 = fsub double %81, %86\l  %88 = fsub double %73, %85\l  %89 = fadd double %88, %87\l  %90 = fadd double %83, %75\l  %91 = fsub double %90, %83\l  %92 = fsub double %90, %91\l  %93 = fsub double %83, %92\l  %94 = fsub double %75, %91\l  %95 = fadd double %94, %93\l  %96 = fadd double %90, %89\l  %97 = fadd double %84, %96\l  %98 = fsub double %97, %84\l  %99 = fsub double %96, %98\l  %100 = fadd double %95, %99\l  %101 = fadd double %97, %100\l  %102 = tail call double @llvm.fabs.f64(double %23) #3\l  %103 = fcmp oeq double %102, 0x7FF0000000000000\l  %104 = select i1 %103, double %23, double %101\l  %105 = fcmp olt double %23, 0.000000e+00\l  %106 = select i1 %105, double 0x7FF8000000000000, double %104\l  %107 = fcmp oeq double %23, 0.000000e+00\l  %108 = select i1 %107, double 0xFFF0000000000000, double %106\l  %109 = fsub contract double %23, %108\l  %110 = getelementptr inbounds double, double addrspace(1)* %3, i64 %18\l  store double %109, double addrspace(1)* %110, align 8, !tbaa !7\l  br label %111\l}"];
	Node0x51fc340 -> Node0x51fc3d0;
	Node0x51fc3d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%111:\l111:                                              \l  ret void\l}"];
}
