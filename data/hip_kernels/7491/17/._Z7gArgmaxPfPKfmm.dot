digraph "CFG for '_Z7gArgmaxPfPKfmm' function" {
	label="CFG for '_Z7gArgmaxPfPKfmm' function";

	Node0x623cde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = zext i32 %5 to i64\l  %7 = mul i64 %6, %3\l  %8 = icmp eq i64 %3, 0\l  br i1 %8, label %36, label %9\l|{<s0>T|<s1>F}}"];
	Node0x623cde0:s0 -> Node0x623ce30;
	Node0x623cde0:s1 -> Node0x623d880;
	Node0x623d880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%9:\l9:                                                \l  %10 = and i64 %3, 7\l  %11 = icmp ult i64 %3, 8\l  br i1 %11, label %14, label %12\l|{<s0>T|<s1>F}}"];
	Node0x623d880:s0 -> Node0x623db40;
	Node0x623d880:s1 -> Node0x623db90;
	Node0x623db90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%12:\l12:                                               \l  %13 = and i64 %3, -8\l  br label %39\l}"];
	Node0x623db90 -> Node0x623dd90;
	Node0x623db40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = phi float [ -9.999900e+04, %9 ], [ %98, %39 ]\l  %16 = phi i64 [ undef, %9 ], [ %97, %39 ]\l  %17 = phi i64 [ 0, %9 ], [ %99, %39 ]\l  %18 = icmp eq i64 %10, 0\l  br i1 %18, label %33, label %19\l|{<s0>T|<s1>F}}"];
	Node0x623db40:s0 -> Node0x623f100;
	Node0x623db40:s1 -> Node0x623f190;
	Node0x623f190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%19:\l19:                                               \l  %20 = phi float [ %29, %19 ], [ %15, %14 ]\l  %21 = phi i64 [ %28, %19 ], [ %16, %14 ]\l  %22 = phi i64 [ %30, %19 ], [ %17, %14 ]\l  %23 = phi i64 [ %31, %19 ], [ 0, %14 ]\l  %24 = add i64 %22, %7\l  %25 = getelementptr inbounds float, float addrspace(1)* %1, i64 %24\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %27 = fcmp contract ogt float %26, %20\l  %28 = select i1 %27, i64 %22, i64 %21\l  %29 = select i1 %27, float %26, float %20\l  %30 = add nuw i64 %22, 1\l  %31 = add i64 %23, 1\l  %32 = icmp eq i64 %31, %10\l  br i1 %32, label %33, label %19, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x623f190:s0 -> Node0x623f100;
	Node0x623f190:s1 -> Node0x623f190;
	Node0x623f100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi i64 [ %16, %14 ], [ %28, %19 ]\l  %35 = uitofp i64 %34 to float\l  br label %36\l}"];
	Node0x623f100 -> Node0x623ce30;
	Node0x623ce30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%36:\l36:                                               \l  %37 = phi float [ 0.000000e+00, %4 ], [ %35, %33 ]\l  %38 = getelementptr inbounds float, float addrspace(1)* %0, i64 %6\l  store float %37, float addrspace(1)* %38, align 4, !tbaa !4\l  ret void\l}"];
	Node0x623dd90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%39:\l39:                                               \l  %40 = phi float [ -9.999900e+04, %12 ], [ %98, %39 ]\l  %41 = phi i64 [ undef, %12 ], [ %97, %39 ]\l  %42 = phi i64 [ 0, %12 ], [ %99, %39 ]\l  %43 = phi i64 [ 0, %12 ], [ %100, %39 ]\l  %44 = add i64 %42, %7\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %47 = fcmp contract ogt float %46, %40\l  %48 = select i1 %47, i64 %42, i64 %41\l  %49 = select i1 %47, float %46, float %40\l  %50 = or i64 %42, 1\l  %51 = add i64 %50, %7\l  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %54 = fcmp contract ogt float %53, %49\l  %55 = select i1 %54, i64 %50, i64 %48\l  %56 = select i1 %54, float %53, float %49\l  %57 = or i64 %42, 2\l  %58 = add i64 %57, %7\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %61 = fcmp contract ogt float %60, %56\l  %62 = select i1 %61, i64 %57, i64 %55\l  %63 = select i1 %61, float %60, float %56\l  %64 = or i64 %42, 3\l  %65 = add i64 %64, %7\l  %66 = getelementptr inbounds float, float addrspace(1)* %1, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %68 = fcmp contract ogt float %67, %63\l  %69 = select i1 %68, i64 %64, i64 %62\l  %70 = select i1 %68, float %67, float %63\l  %71 = or i64 %42, 4\l  %72 = add i64 %71, %7\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %75 = fcmp contract ogt float %74, %70\l  %76 = select i1 %75, i64 %71, i64 %69\l  %77 = select i1 %75, float %74, float %70\l  %78 = or i64 %42, 5\l  %79 = add i64 %78, %7\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %82 = fcmp contract ogt float %81, %77\l  %83 = select i1 %82, i64 %78, i64 %76\l  %84 = select i1 %82, float %81, float %77\l  %85 = or i64 %42, 6\l  %86 = add i64 %85, %7\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %89 = fcmp contract ogt float %88, %84\l  %90 = select i1 %89, i64 %85, i64 %83\l  %91 = select i1 %89, float %88, float %84\l  %92 = or i64 %42, 7\l  %93 = add i64 %92, %7\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %96 = fcmp contract ogt float %95, %91\l  %97 = select i1 %96, i64 %92, i64 %90\l  %98 = select i1 %96, float %95, float %91\l  %99 = add nuw i64 %42, 8\l  %100 = add i64 %43, 8\l  %101 = icmp eq i64 %100, %13\l  br i1 %101, label %14, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x623dd90:s0 -> Node0x623db40;
	Node0x623dd90:s1 -> Node0x623dd90;
}
