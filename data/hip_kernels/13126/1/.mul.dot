digraph "CFG for 'mul' function" {
	label="CFG for 'mul' function";

	Node0x4cf47f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %3\l  %15 = icmp sgt i32 %3, 0\l  %16 = and i1 %14, %15\l  br i1 %16, label %17, label %156\l|{<s0>T|<s1>F}}"];
	Node0x4cf47f0:s0 -> Node0x4cf53b0;
	Node0x4cf47f0:s1 -> Node0x4cf6940;
	Node0x4cf53b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%17:\l17:                                               \l  %18 = mul nsw i32 %13, %3\l  %19 = and i32 %3, 7\l  %20 = icmp ult i32 %3, 8\l  %21 = and i32 %3, -8\l  %22 = icmp eq i32 %19, 0\l  br label %23\l}"];
	Node0x4cf53b0 -> Node0x4cf6de0;
	Node0x4cf6de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%23:\l23:                                               \l  %24 = phi i32 [ 0, %17 ], [ %52, %47 ]\l  br i1 %20, label %25, label %54\l|{<s0>T|<s1>F}}"];
	Node0x4cf6de0:s0 -> Node0x4cf7010;
	Node0x4cf6de0:s1 -> Node0x4cf70a0;
	Node0x4cf7010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%25:\l25:                                               \l  %26 = phi double [ undef, %23 ], [ %152, %54 ]\l  %27 = phi i32 [ 0, %23 ], [ %153, %54 ]\l  %28 = phi double [ 0.000000e+00, %23 ], [ %152, %54 ]\l  br i1 %22, label %47, label %29\l|{<s0>T|<s1>F}}"];
	Node0x4cf7010:s0 -> Node0x4cf6ed0;
	Node0x4cf7010:s1 -> Node0x4cf8300;
	Node0x4cf8300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %44, %29 ], [ %27, %25 ]\l  %31 = phi double [ %43, %29 ], [ %28, %25 ]\l  %32 = phi i32 [ %45, %29 ], [ 0, %25 ]\l  %33 = add nsw i32 %30, %18\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds double, double addrspace(1)* %0, i64 %34\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7\l  %37 = mul nsw i32 %30, %3\l  %38 = add nsw i32 %37, %24\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %1, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7\l  %42 = fmul contract double %36, %41\l  %43 = fadd contract double %31, %42\l  %44 = add nuw nsw i32 %30, 1\l  %45 = add i32 %32, 1\l  %46 = icmp eq i32 %45, %19\l  br i1 %46, label %47, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4cf8300:s0 -> Node0x4cf6ed0;
	Node0x4cf8300:s1 -> Node0x4cf8300;
	Node0x4cf6ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%47:\l47:                                               \l  %48 = phi double [ %26, %25 ], [ %43, %29 ]\l  %49 = add nsw i32 %24, %18\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds double, double addrspace(1)* %2, i64 %50\l  store double %48, double addrspace(1)* %51, align 8, !tbaa !7\l  %52 = add nuw nsw i32 %24, 1\l  %53 = icmp eq i32 %52, %3\l  br i1 %53, label %156, label %23, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4cf6ed0:s0 -> Node0x4cf6940;
	Node0x4cf6ed0:s1 -> Node0x4cf6de0;
	Node0x4cf70a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%54:\l54:                                               \l  %55 = phi i32 [ %153, %54 ], [ 0, %23 ]\l  %56 = phi double [ %152, %54 ], [ 0.000000e+00, %23 ]\l  %57 = phi i32 [ %154, %54 ], [ 0, %23 ]\l  %58 = add nsw i32 %55, %18\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds double, double addrspace(1)* %0, i64 %59\l  %61 = load double, double addrspace(1)* %60, align 8, !tbaa !7\l  %62 = mul nsw i32 %55, %3\l  %63 = add nsw i32 %62, %24\l  %64 = sext i32 %63 to i64\l  %65 = getelementptr inbounds double, double addrspace(1)* %1, i64 %64\l  %66 = load double, double addrspace(1)* %65, align 8, !tbaa !7\l  %67 = fmul contract double %61, %66\l  %68 = fadd contract double %56, %67\l  %69 = or i32 %55, 1\l  %70 = add nsw i32 %69, %18\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds double, double addrspace(1)* %0, i64 %71\l  %73 = load double, double addrspace(1)* %72, align 8, !tbaa !7\l  %74 = mul nsw i32 %69, %3\l  %75 = add nsw i32 %74, %24\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %1, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7\l  %79 = fmul contract double %73, %78\l  %80 = fadd contract double %68, %79\l  %81 = or i32 %55, 2\l  %82 = add nsw i32 %81, %18\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds double, double addrspace(1)* %0, i64 %83\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7\l  %86 = mul nsw i32 %81, %3\l  %87 = add nsw i32 %86, %24\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds double, double addrspace(1)* %1, i64 %88\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !7\l  %91 = fmul contract double %85, %90\l  %92 = fadd contract double %80, %91\l  %93 = or i32 %55, 3\l  %94 = add nsw i32 %93, %18\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds double, double addrspace(1)* %0, i64 %95\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !7\l  %98 = mul nsw i32 %93, %3\l  %99 = add nsw i32 %98, %24\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds double, double addrspace(1)* %1, i64 %100\l  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !7\l  %103 = fmul contract double %97, %102\l  %104 = fadd contract double %92, %103\l  %105 = or i32 %55, 4\l  %106 = add nsw i32 %105, %18\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds double, double addrspace(1)* %0, i64 %107\l  %109 = load double, double addrspace(1)* %108, align 8, !tbaa !7\l  %110 = mul nsw i32 %105, %3\l  %111 = add nsw i32 %110, %24\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds double, double addrspace(1)* %1, i64 %112\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !7\l  %115 = fmul contract double %109, %114\l  %116 = fadd contract double %104, %115\l  %117 = or i32 %55, 5\l  %118 = add nsw i32 %117, %18\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds double, double addrspace(1)* %0, i64 %119\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !7\l  %122 = mul nsw i32 %117, %3\l  %123 = add nsw i32 %122, %24\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds double, double addrspace(1)* %1, i64 %124\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !7\l  %127 = fmul contract double %121, %126\l  %128 = fadd contract double %116, %127\l  %129 = or i32 %55, 6\l  %130 = add nsw i32 %129, %18\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds double, double addrspace(1)* %0, i64 %131\l  %133 = load double, double addrspace(1)* %132, align 8, !tbaa !7\l  %134 = mul nsw i32 %129, %3\l  %135 = add nsw i32 %134, %24\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds double, double addrspace(1)* %1, i64 %136\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !7\l  %139 = fmul contract double %133, %138\l  %140 = fadd contract double %128, %139\l  %141 = or i32 %55, 7\l  %142 = add nsw i32 %141, %18\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds double, double addrspace(1)* %0, i64 %143\l  %145 = load double, double addrspace(1)* %144, align 8, !tbaa !7\l  %146 = mul nsw i32 %141, %3\l  %147 = add nsw i32 %146, %24\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds double, double addrspace(1)* %1, i64 %148\l  %150 = load double, double addrspace(1)* %149, align 8, !tbaa !7\l  %151 = fmul contract double %145, %150\l  %152 = fadd contract double %140, %151\l  %153 = add nuw nsw i32 %55, 8\l  %154 = add i32 %57, 8\l  %155 = icmp eq i32 %154, %21\l  br i1 %155, label %25, label %54, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4cf70a0:s0 -> Node0x4cf7010;
	Node0x4cf70a0:s1 -> Node0x4cf70a0;
	Node0x4cf6940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%156:\l156:                                              \l  ret void\l}"];
}
