digraph "CFG for '_Z19Shrink_DownSamplingPfPKfiiii' function" {
	label="CFG for '_Z19Shrink_DownSamplingPfPKfiiii' function";

	Node0x5fec030 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 2, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 4, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %23 = add i32 %21, %22\l  %24 = shl i32 %4, 1\l  %25 = mul i32 %24, %15\l  %26 = shl nsw i32 %23, 1\l  %27 = add nsw i32 %25, %26\l  %28 = icmp slt i32 %15, %3\l  %29 = icmp slt i32 %23, %2\l  %30 = select i1 %28, i1 %29, i1 false\l  br i1 %30, label %31, label %104\l|{<s0>T|<s1>F}}"];
	Node0x5fec030:s0 -> Node0x5fefd60;
	Node0x5fec030:s1 -> Node0x5fefdf0;
	Node0x5fefd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%31:\l31:                                               \l  %32 = mul nsw i32 %15, %2\l  %33 = add nsw i32 %32, %23\l  %34 = mul nsw i32 %27, 3\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %1, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %38 = add i32 %34, 3\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fadd contract float %37, %41\l  %43 = add nsw i32 %27, %4\l  %44 = mul nsw i32 %43, 3\l  %45 = sext i32 %44 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45\l  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %48 = fadd contract float %42, %47\l  %49 = add i32 %44, 3\l  %50 = sext i32 %49 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fadd contract float %48, %52\l  %54 = fmul contract float %53, 2.500000e-01\l  %55 = mul nsw i32 %33, 3\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  store float %54, float addrspace(1)* %57, align 4, !tbaa !7\l  %58 = or i32 %34, 1\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %1, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !7\l  %62 = add i32 %34, 4\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !7\l  %66 = fadd contract float %61, %65\l  %67 = add nsw i32 %44, 1\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %1, i64 %68\l  %70 = load float, float addrspace(1)* %69, align 4, !tbaa !7\l  %71 = fadd contract float %66, %70\l  %72 = add i32 %44, 4\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %1, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7\l  %76 = fadd contract float %71, %75\l  %77 = fmul contract float %76, 2.500000e-01\l  %78 = add nsw i32 %55, 1\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  store float %77, float addrspace(1)* %80, align 4, !tbaa !7\l  %81 = add nsw i32 %34, 2\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7\l  %85 = add i32 %34, 5\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !7\l  %89 = fadd contract float %84, %88\l  %90 = add nsw i32 %44, 2\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7\l  %94 = fadd contract float %89, %93\l  %95 = add i32 %44, 5\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7\l  %99 = fadd contract float %94, %98\l  %100 = fmul contract float %99, 2.500000e-01\l  %101 = add nsw i32 %55, 2\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %0, i64 %102\l  store float %100, float addrspace(1)* %103, align 4, !tbaa !7\l  br label %104\l}"];
	Node0x5fefd60 -> Node0x5fefdf0;
	Node0x5fefdf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%104:\l104:                                              \l  ret void\l}"];
}
