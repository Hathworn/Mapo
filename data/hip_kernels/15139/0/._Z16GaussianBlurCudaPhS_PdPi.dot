digraph "CFG for '_Z16GaussianBlurCudaPhS_PdPi' function" {
	label="CFG for '_Z16GaussianBlurCudaPhS_PdPi' function";

	Node0x5929d30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = bitcast i32 addrspace(1)* %3 to \<2 x i32\> addrspace(1)*\l  %15 = load \<2 x i32\>, \<2 x i32\> addrspace(1)* %14, align 4, !tbaa !7\l  %16 = extractelement \<2 x i32\> %15, i64 0\l  %17 = extractelement \<2 x i32\> %15, i64 1\l  %18 = mul nsw i32 %17, %16\l  %19 = icmp sge i32 %13, %18\l  %20 = icmp slt i32 %13, 0\l  %21 = or i1 %19, %20\l  br i1 %21, label %174, label %22\l|{<s0>T|<s1>F}}"];
	Node0x5929d30:s0 -> Node0x592c850;
	Node0x5929d30:s1 -> Node0x592c8e0;
	Node0x592c8e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%22:\l22:                                               \l  %23 = freeze i32 %13\l  %24 = freeze i32 %16\l  %25 = sdiv i32 %23, %24\l  %26 = mul i32 %25, %24\l  %27 = sub i32 %23, %26\l  %28 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 2\l  %29 = load i32, i32 addrspace(1)* %28, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %30 = sdiv i32 %29, 2\l  %31 = icmp sge i32 %25, %30\l  %32 = sub nsw i32 %17, %30\l  %33 = icmp slt i32 %25, %32\l  %34 = select i1 %31, i1 %33, i1 false\l  br i1 %34, label %35, label %174\l|{<s0>T|<s1>F}}"];
	Node0x592c8e0:s0 -> Node0x592c530;
	Node0x592c8e0:s1 -> Node0x592c850;
	Node0x592c530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%35:\l35:                                               \l  %36 = icmp sge i32 %27, %30\l  %37 = sub nsw i32 %16, %30\l  %38 = icmp slt i32 %27, %37\l  %39 = select i1 %36, i1 %38, i1 false\l  br i1 %39, label %40, label %174\l|{<s0>T|<s1>F}}"];
	Node0x592c530:s0 -> Node0x592e210;
	Node0x592c530:s1 -> Node0x592c850;
	Node0x592e210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%40:\l40:                                               \l  %41 = icmp eq i32 %29, 0\l  br i1 %41, label %97, label %42\l|{<s0>T|<s1>F}}"];
	Node0x592e210:s0 -> Node0x592e3a0;
	Node0x592e210:s1 -> Node0x592e3f0;
	Node0x592e3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%42:\l42:                                               \l  %43 = mul i32 %29, %29\l  %44 = sub i32 %25, %30\l  %45 = sub i32 %27, %30\l  %46 = tail call i32 @llvm.umax.i32(i32 %43, i32 1)\l  %47 = and i32 %46, 1\l  %48 = icmp ult i32 %43, 2\l  br i1 %48, label %51, label %49\l|{<s0>T|<s1>F}}"];
	Node0x592e3f0:s0 -> Node0x592ea00;
	Node0x592e3f0:s1 -> Node0x592ea90;
	Node0x592ea90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%49:\l49:                                               \l  %50 = and i32 %46, -2\l  br label %106\l}"];
	Node0x592ea90 -> Node0x592ec90;
	Node0x592ea00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%51:\l51:                                               \l  %52 = phi double [ undef, %42 ], [ %160, %106 ]\l  %53 = phi double [ undef, %42 ], [ %165, %106 ]\l  %54 = phi double [ undef, %42 ], [ %170, %106 ]\l  %55 = phi i32 [ 0, %42 ], [ %171, %106 ]\l  %56 = phi double [ 0.000000e+00, %42 ], [ %160, %106 ]\l  %57 = phi double [ 0.000000e+00, %42 ], [ %165, %106 ]\l  %58 = phi double [ 0.000000e+00, %42 ], [ %170, %106 ]\l  %59 = icmp eq i32 %47, 0\l  br i1 %59, label %90, label %60\l|{<s0>T|<s1>F}}"];
	Node0x592ea00:s0 -> Node0x59302a0;
	Node0x592ea00:s1 -> Node0x5930330;
	Node0x5930330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%60:\l60:                                               \l  %61 = freeze i32 %55\l  %62 = freeze i32 %29\l  %63 = sdiv i32 %61, %62\l  %64 = mul i32 %63, %62\l  %65 = sub i32 %61, %64\l  %66 = add i32 %44, %63\l  %67 = mul nsw i32 %66, %16\l  %68 = add i32 %45, %65\l  %69 = add i32 %68, %67\l  %70 = mul nsw i32 %69, 3\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %71\l  %73 = load i8, i8 addrspace(1)* %72, align 1, !tbaa !11, !amdgpu.noclobber !5\l  %74 = uitofp i8 %73 to double\l  %75 = zext i32 %55 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %2, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !12,\l... !amdgpu.noclobber !5\l  %78 = fmul contract double %77, %74\l  %79 = fadd contract double %56, %78\l  %80 = getelementptr inbounds i8, i8 addrspace(1)* %72, i64 1\l  %81 = load i8, i8 addrspace(1)* %80, align 1, !tbaa !11, !amdgpu.noclobber !5\l  %82 = uitofp i8 %81 to double\l  %83 = fmul contract double %77, %82\l  %84 = fadd contract double %57, %83\l  %85 = getelementptr inbounds i8, i8 addrspace(1)* %72, i64 2\l  %86 = load i8, i8 addrspace(1)* %85, align 1, !tbaa !11, !amdgpu.noclobber !5\l  %87 = uitofp i8 %86 to double\l  %88 = fmul contract double %77, %87\l  %89 = fadd contract double %58, %88\l  br label %90\l}"];
	Node0x5930330 -> Node0x59302a0;
	Node0x59302a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%90:\l90:                                               \l  %91 = phi double [ %52, %51 ], [ %79, %60 ]\l  %92 = phi double [ %53, %51 ], [ %84, %60 ]\l  %93 = phi double [ %54, %51 ], [ %89, %60 ]\l  %94 = fptoui double %91 to i8\l  %95 = fptoui double %92 to i8\l  %96 = fptoui double %93 to i8\l  br label %97\l}"];
	Node0x59302a0 -> Node0x592e3a0;
	Node0x592e3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%97:\l97:                                               \l  %98 = phi i8 [ 0, %40 ], [ %96, %90 ]\l  %99 = phi i8 [ 0, %40 ], [ %95, %90 ]\l  %100 = phi i8 [ 0, %40 ], [ %94, %90 ]\l  %101 = mul nsw i32 %13, 3\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %102\l  store i8 %100, i8 addrspace(1)* %103, align 1, !tbaa !11\l  %104 = getelementptr inbounds i8, i8 addrspace(1)* %103, i64 1\l  store i8 %99, i8 addrspace(1)* %104, align 1, !tbaa !11\l  %105 = getelementptr inbounds i8, i8 addrspace(1)* %103, i64 2\l  store i8 %98, i8 addrspace(1)* %105, align 1, !tbaa !11\l  br label %174\l}"];
	Node0x592e3a0 -> Node0x592c850;
	Node0x592ec90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i32 [ 0, %49 ], [ %171, %106 ]\l  %108 = phi double [ 0.000000e+00, %49 ], [ %160, %106 ]\l  %109 = phi double [ 0.000000e+00, %49 ], [ %165, %106 ]\l  %110 = phi double [ 0.000000e+00, %49 ], [ %170, %106 ]\l  %111 = phi i32 [ 0, %49 ], [ %172, %106 ]\l  %112 = freeze i32 %107\l  %113 = freeze i32 %29\l  %114 = sdiv i32 %112, %113\l  %115 = mul i32 %114, %113\l  %116 = sub i32 %112, %115\l  %117 = add i32 %44, %114\l  %118 = mul nsw i32 %117, %16\l  %119 = add i32 %45, %116\l  %120 = add i32 %119, %118\l  %121 = mul nsw i32 %120, 3\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %122\l  %124 = load i8, i8 addrspace(1)* %123, align 1, !tbaa !11, !amdgpu.noclobber\l... !5\l  %125 = uitofp i8 %124 to double\l  %126 = zext i32 %107 to i64\l  %127 = getelementptr inbounds double, double addrspace(1)* %2, i64 %126\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !12,\l... !amdgpu.noclobber !5\l  %129 = fmul contract double %128, %125\l  %130 = fadd contract double %108, %129\l  %131 = getelementptr inbounds i8, i8 addrspace(1)* %123, i64 1\l  %132 = load i8, i8 addrspace(1)* %131, align 1, !tbaa !11, !amdgpu.noclobber\l... !5\l  %133 = uitofp i8 %132 to double\l  %134 = fmul contract double %128, %133\l  %135 = fadd contract double %109, %134\l  %136 = getelementptr inbounds i8, i8 addrspace(1)* %123, i64 2\l  %137 = load i8, i8 addrspace(1)* %136, align 1, !tbaa !11, !amdgpu.noclobber\l... !5\l  %138 = uitofp i8 %137 to double\l  %139 = fmul contract double %128, %138\l  %140 = fadd contract double %110, %139\l  %141 = or i32 %107, 1\l  %142 = freeze i32 %141\l  %143 = freeze i32 %29\l  %144 = sdiv i32 %142, %143\l  %145 = mul i32 %144, %143\l  %146 = sub i32 %142, %145\l  %147 = add i32 %44, %144\l  %148 = mul nsw i32 %147, %16\l  %149 = add i32 %45, %146\l  %150 = add i32 %149, %148\l  %151 = mul nsw i32 %150, 3\l  %152 = sext i32 %151 to i64\l  %153 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %152\l  %154 = load i8, i8 addrspace(1)* %153, align 1, !tbaa !11, !amdgpu.noclobber\l... !5\l  %155 = uitofp i8 %154 to double\l  %156 = zext i32 %141 to i64\l  %157 = getelementptr inbounds double, double addrspace(1)* %2, i64 %156\l  %158 = load double, double addrspace(1)* %157, align 8, !tbaa !12,\l... !amdgpu.noclobber !5\l  %159 = fmul contract double %158, %155\l  %160 = fadd contract double %130, %159\l  %161 = getelementptr inbounds i8, i8 addrspace(1)* %153, i64 1\l  %162 = load i8, i8 addrspace(1)* %161, align 1, !tbaa !11, !amdgpu.noclobber\l... !5\l  %163 = uitofp i8 %162 to double\l  %164 = fmul contract double %158, %163\l  %165 = fadd contract double %135, %164\l  %166 = getelementptr inbounds i8, i8 addrspace(1)* %153, i64 2\l  %167 = load i8, i8 addrspace(1)* %166, align 1, !tbaa !11, !amdgpu.noclobber\l... !5\l  %168 = uitofp i8 %167 to double\l  %169 = fmul contract double %158, %168\l  %170 = fadd contract double %140, %169\l  %171 = add nuw nsw i32 %107, 2\l  %172 = add i32 %111, 2\l  %173 = icmp eq i32 %172, %50\l  br i1 %173, label %51, label %106, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x592ec90:s0 -> Node0x592ea00;
	Node0x592ec90:s1 -> Node0x592ec90;
	Node0x592c850 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%174:\l174:                                              \l  ret void\l}"];
}
