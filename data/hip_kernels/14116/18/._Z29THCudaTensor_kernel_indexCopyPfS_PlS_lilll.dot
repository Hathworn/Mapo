digraph "CFG for '_Z29THCudaTensor_kernel_indexCopyPfS_PlS_lilll' function" {
	label="CFG for '_Z29THCudaTensor_kernel_indexCopyPfS_PlS_lilll' function";

	Node0x508e440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !4, !invariant.load !5\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr i8, i8 addrspace(4)* %11, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %10, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %23 = add i32 %20, %21\l  %24 = mul i32 %23, %15\l  %25 = add i32 %24, %22\l  %26 = freeze i32 %25\l  %27 = sdiv i64 %7, %6\l  %28 = sext i32 %26 to i64\l  %29 = icmp sgt i64 %27, %28\l  %30 = icmp sgt i64 %6, 0\l  %31 = and i1 %29, %30\l  br i1 %31, label %32, label %99\l|{<s0>T|<s1>F}}"];
	Node0x508e440:s0 -> Node0x5092950;
	Node0x508e440:s1 -> Node0x50929e0;
	Node0x5092950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%32:\l32:                                               \l  %33 = icmp sgt i64 %4, 0\l  %34 = sext i32 %5 to i64\l  %35 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %34\l  %36 = load i64, i64 addrspace(1)* %35, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  br label %37\l}"];
	Node0x5092950 -> Node0x5092ff0;
	Node0x5092ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%37:\l37:                                               \l  %38 = phi i64 [ 0, %32 ], [ %56, %39 ]\l  br i1 %33, label %58, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5092ff0:s0 -> Node0x5093230;
	Node0x5092ff0:s1 -> Node0x50930f0;
	Node0x50930f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%39:\l39:                                               \l  %40 = phi i32 [ 0, %37 ], [ %93, %91 ]\l  %41 = phi i32 [ 0, %37 ], [ %94, %91 ]\l  %42 = sext i32 %40 to i64\l  %43 = mul nsw i64 %36, %38\l  %44 = add nsw i64 %43, %42\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !11\l  %47 = sext i32 %41 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %3, i64 %38\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !11\l  %50 = fptosi float %49 to i64\l  %51 = add nsw i64 %50, -1\l  %52 = mul nsw i64 %51, %36\l  %53 = add nsw i64 %52, %47\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  store float %46, float addrspace(1)* %54, align 4, !tbaa !11\l  %55 = add nuw nsw i64 %38, 1\l  %56 = and i64 %55, 4294967295\l  %57 = icmp slt i64 %56, %6\l  br i1 %57, label %37, label %99, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x50930f0:s0 -> Node0x5092ff0;
	Node0x50930f0:s1 -> Node0x50929e0;
	Node0x5093230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%58:\l58:                                               \l  %59 = phi i64 [ %97, %91 ], [ 0, %37 ]\l  %60 = phi i32 [ %96, %91 ], [ %26, %37 ]\l  %61 = phi i32 [ %94, %91 ], [ 0, %37 ]\l  %62 = phi i32 [ %93, %91 ], [ 0, %37 ]\l  %63 = trunc i64 %59 to i32\l  %64 = icmp slt i32 %63, %5\l  br i1 %64, label %65, label %80\l|{<s0>T|<s1>F}}"];
	Node0x5093230:s0 -> Node0x5092b20;
	Node0x5093230:s1 -> Node0x5092bb0;
	Node0x5092b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%65:\l65:                                               \l  %66 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %59\l  %67 = load i64, i64 addrspace(1)* %66, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %68 = sdiv i64 %67, %8\l  %69 = sext i32 %60 to i64\l  %70 = sdiv i64 %69, %68\l  %71 = mul nsw i64 %70, %68\l  %72 = trunc i64 %71 to i32\l  %73 = sub i32 %60, %72\l  %74 = mul nsw i64 %71, %6\l  %75 = trunc i64 %74 to i32\l  %76 = add i32 %62, %75\l  %77 = mul nsw i64 %70, %67\l  %78 = trunc i64 %77 to i32\l  %79 = add i32 %61, %78\l  br label %91\l}"];
	Node0x5092b20 -> Node0x50933d0;
	Node0x5092bb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%80:\l80:                                               \l  %81 = icmp sgt i32 %63, %5\l  br i1 %81, label %82, label %91\l|{<s0>T|<s1>F}}"];
	Node0x5092bb0:s0 -> Node0x5095f80;
	Node0x5092bb0:s1 -> Node0x50933d0;
	Node0x5095f80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%82:\l82:                                               \l  %83 = sext i32 %60 to i64\l  %84 = getelementptr inbounds i64, i64 addrspace(1)* %2, i64 %59\l  %85 = load i64, i64 addrspace(1)* %84, align 8, !tbaa !7, !amdgpu.noclobber\l... !5\l  %86 = srem i64 %83, %85\l  %87 = trunc i64 %86 to i32\l  %88 = sub i32 %60, %87\l  %89 = add i32 %88, %62\l  %90 = add i32 %88, %61\l  br label %91\l}"];
	Node0x5095f80 -> Node0x50933d0;
	Node0x50933d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%91:\l91:                                               \l  %92 = phi i32 [ %73, %65 ], [ %87, %82 ], [ %60, %80 ]\l  %93 = phi i32 [ %76, %65 ], [ %89, %82 ], [ %62, %80 ]\l  %94 = phi i32 [ %79, %65 ], [ %90, %82 ], [ %61, %80 ]\l  %95 = add nuw nsw i64 %59, 1\l  %96 = freeze i32 %92\l  %97 = and i64 %95, 4294967295\l  %98 = icmp slt i64 %97, %4\l  br i1 %98, label %58, label %39, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x50933d0:s0 -> Node0x5093230;
	Node0x50933d0:s1 -> Node0x50930f0;
	Node0x50929e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%99:\l99:                                               \l  ret void\l}"];
}
