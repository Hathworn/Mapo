digraph "CFG for '_Z14DeviceMultiplyPdS_S_iii' function" {
	label="CFG for '_Z14DeviceMultiplyPdS_S_iii' function";

	Node0x4fb0cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*\l  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !5, !invariant.load !6\l  %13 = zext i16 %12 to i32\l  %14 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 2, !range !5, !invariant.load !6\l  %17 = zext i16 %16 to i32\l  %18 = icmp slt i32 %7, %3\l  br i1 %18, label %19, label %32\l|{<s0>T|<s1>F}}"];
	Node0x4fb0cb0:s0 -> Node0x4fb3f40;
	Node0x4fb0cb0:s1 -> Node0x4fb3fd0;
	Node0x4fb3f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%19:\l19:                                               \l  %20 = icmp slt i32 %8, %5\l  %21 = icmp sgt i32 %4, 0\l  %22 = and i32 %4, 7\l  %23 = icmp ult i32 %4, 8\l  %24 = and i32 %4, -8\l  %25 = icmp eq i32 %22, 0\l  br label %26\l}"];
	Node0x4fb3f40 -> Node0x4fb4530;
	Node0x4fb4530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%26:\l26:                                               \l  %27 = phi i32 [ %7, %19 ], [ %35, %33 ]\l  %28 = phi i32 [ 0, %19 ], [ %34, %33 ]\l  br i1 %20, label %29, label %33\l|{<s0>T|<s1>F}}"];
	Node0x4fb4530:s0 -> Node0x4fb4880;
	Node0x4fb4530:s1 -> Node0x4fb4620;
	Node0x4fb4880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%29:\l29:                                               \l  %30 = mul nsw i32 %27, %4\l  %31 = mul nsw i32 %27, %5\l  br label %37\l}"];
	Node0x4fb4880 -> Node0x4fb4ae0;
	Node0x4fb3fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%32:\l32:                                               \l  ret void\l}"];
	Node0x4fb4620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%33:\l33:                                               \l  %34 = add nuw nsw i32 %28, %17\l  %35 = add nuw nsw i32 %34, %7\l  %36 = icmp slt i32 %35, %3\l  br i1 %36, label %26, label %32, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x4fb4620:s0 -> Node0x4fb4530;
	Node0x4fb4620:s1 -> Node0x4fb3fd0;
	Node0x4fb4ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%37:\l37:                                               \l  %38 = phi i32 [ 0, %29 ], [ %68, %63 ]\l  %39 = add nuw i32 %38, %8\l  br i1 %21, label %40, label %63\l|{<s0>T|<s1>F}}"];
	Node0x4fb4ae0:s0 -> Node0x4fb5190;
	Node0x4fb4ae0:s1 -> Node0x4fb5000;
	Node0x4fb5190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%40:\l40:                                               \l  br i1 %23, label %41, label %71\l|{<s0>T|<s1>F}}"];
	Node0x4fb5190:s0 -> Node0x4fb52d0;
	Node0x4fb5190:s1 -> Node0x4fb5320;
	Node0x4fb52d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%41:\l41:                                               \l  %42 = phi double [ undef, %40 ], [ %169, %71 ]\l  %43 = phi double [ 0.000000e+00, %40 ], [ %169, %71 ]\l  %44 = phi i32 [ 0, %40 ], [ %170, %71 ]\l  br i1 %25, label %63, label %45\l|{<s0>T|<s1>F}}"];
	Node0x4fb52d0:s0 -> Node0x4fb5000;
	Node0x4fb52d0:s1 -> Node0x4fb6510;
	Node0x4fb6510 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi double [ %59, %45 ], [ %43, %41 ]\l  %47 = phi i32 [ %60, %45 ], [ %44, %41 ]\l  %48 = phi i32 [ %61, %45 ], [ 0, %41 ]\l  %49 = add nsw i32 %47, %30\l  %50 = mul nsw i32 %47, %5\l  %51 = add i32 %39, %50\l  %52 = sext i32 %49 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %0, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !9\l  %55 = sext i32 %51 to i64\l  %56 = getelementptr inbounds double, double addrspace(1)* %1, i64 %55\l  %57 = load double, double addrspace(1)* %56, align 8, !tbaa !9\l  %58 = fmul contract double %54, %57\l  %59 = fadd contract double %46, %58\l  %60 = add nuw nsw i32 %47, 1\l  %61 = add i32 %48, 1\l  %62 = icmp eq i32 %61, %22\l  br i1 %62, label %63, label %45, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x4fb6510:s0 -> Node0x4fb5000;
	Node0x4fb6510:s1 -> Node0x4fb6510;
	Node0x4fb5000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%63:\l63:                                               \l  %64 = phi double [ 0.000000e+00, %37 ], [ %42, %41 ], [ %59, %45 ]\l  %65 = add i32 %39, %31\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %2, i64 %66\l  store double %64, double addrspace(1)* %67, align 8, !tbaa !9\l  %68 = add nuw nsw i32 %38, %13\l  %69 = add nuw nsw i32 %68, %8\l  %70 = icmp slt i32 %69, %5\l  br i1 %70, label %37, label %33, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x4fb5000:s0 -> Node0x4fb4ae0;
	Node0x4fb5000:s1 -> Node0x4fb4620;
	Node0x4fb5320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%71:\l71:                                               \l  %72 = phi double [ %169, %71 ], [ 0.000000e+00, %40 ]\l  %73 = phi i32 [ %170, %71 ], [ 0, %40 ]\l  %74 = phi i32 [ %171, %71 ], [ 0, %40 ]\l  %75 = add nsw i32 %73, %30\l  %76 = mul nsw i32 %73, %5\l  %77 = add i32 %39, %76\l  %78 = sext i32 %75 to i64\l  %79 = getelementptr inbounds double, double addrspace(1)* %0, i64 %78\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !9\l  %81 = sext i32 %77 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %1, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !9\l  %84 = fmul contract double %80, %83\l  %85 = fadd contract double %72, %84\l  %86 = or i32 %73, 1\l  %87 = add nsw i32 %86, %30\l  %88 = mul nsw i32 %86, %5\l  %89 = add i32 %39, %88\l  %90 = sext i32 %87 to i64\l  %91 = getelementptr inbounds double, double addrspace(1)* %0, i64 %90\l  %92 = load double, double addrspace(1)* %91, align 8, !tbaa !9\l  %93 = sext i32 %89 to i64\l  %94 = getelementptr inbounds double, double addrspace(1)* %1, i64 %93\l  %95 = load double, double addrspace(1)* %94, align 8, !tbaa !9\l  %96 = fmul contract double %92, %95\l  %97 = fadd contract double %85, %96\l  %98 = or i32 %73, 2\l  %99 = add nsw i32 %98, %30\l  %100 = mul nsw i32 %98, %5\l  %101 = add i32 %39, %100\l  %102 = sext i32 %99 to i64\l  %103 = getelementptr inbounds double, double addrspace(1)* %0, i64 %102\l  %104 = load double, double addrspace(1)* %103, align 8, !tbaa !9\l  %105 = sext i32 %101 to i64\l  %106 = getelementptr inbounds double, double addrspace(1)* %1, i64 %105\l  %107 = load double, double addrspace(1)* %106, align 8, !tbaa !9\l  %108 = fmul contract double %104, %107\l  %109 = fadd contract double %97, %108\l  %110 = or i32 %73, 3\l  %111 = add nsw i32 %110, %30\l  %112 = mul nsw i32 %110, %5\l  %113 = add i32 %39, %112\l  %114 = sext i32 %111 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %0, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !9\l  %117 = sext i32 %113 to i64\l  %118 = getelementptr inbounds double, double addrspace(1)* %1, i64 %117\l  %119 = load double, double addrspace(1)* %118, align 8, !tbaa !9\l  %120 = fmul contract double %116, %119\l  %121 = fadd contract double %109, %120\l  %122 = or i32 %73, 4\l  %123 = add nsw i32 %122, %30\l  %124 = mul nsw i32 %122, %5\l  %125 = add i32 %39, %124\l  %126 = sext i32 %123 to i64\l  %127 = getelementptr inbounds double, double addrspace(1)* %0, i64 %126\l  %128 = load double, double addrspace(1)* %127, align 8, !tbaa !9\l  %129 = sext i32 %125 to i64\l  %130 = getelementptr inbounds double, double addrspace(1)* %1, i64 %129\l  %131 = load double, double addrspace(1)* %130, align 8, !tbaa !9\l  %132 = fmul contract double %128, %131\l  %133 = fadd contract double %121, %132\l  %134 = or i32 %73, 5\l  %135 = add nsw i32 %134, %30\l  %136 = mul nsw i32 %134, %5\l  %137 = add i32 %39, %136\l  %138 = sext i32 %135 to i64\l  %139 = getelementptr inbounds double, double addrspace(1)* %0, i64 %138\l  %140 = load double, double addrspace(1)* %139, align 8, !tbaa !9\l  %141 = sext i32 %137 to i64\l  %142 = getelementptr inbounds double, double addrspace(1)* %1, i64 %141\l  %143 = load double, double addrspace(1)* %142, align 8, !tbaa !9\l  %144 = fmul contract double %140, %143\l  %145 = fadd contract double %133, %144\l  %146 = or i32 %73, 6\l  %147 = add nsw i32 %146, %30\l  %148 = mul nsw i32 %146, %5\l  %149 = add i32 %39, %148\l  %150 = sext i32 %147 to i64\l  %151 = getelementptr inbounds double, double addrspace(1)* %0, i64 %150\l  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !9\l  %153 = sext i32 %149 to i64\l  %154 = getelementptr inbounds double, double addrspace(1)* %1, i64 %153\l  %155 = load double, double addrspace(1)* %154, align 8, !tbaa !9\l  %156 = fmul contract double %152, %155\l  %157 = fadd contract double %145, %156\l  %158 = or i32 %73, 7\l  %159 = add nsw i32 %158, %30\l  %160 = mul nsw i32 %158, %5\l  %161 = add i32 %39, %160\l  %162 = sext i32 %159 to i64\l  %163 = getelementptr inbounds double, double addrspace(1)* %0, i64 %162\l  %164 = load double, double addrspace(1)* %163, align 8, !tbaa !9\l  %165 = sext i32 %161 to i64\l  %166 = getelementptr inbounds double, double addrspace(1)* %1, i64 %165\l  %167 = load double, double addrspace(1)* %166, align 8, !tbaa !9\l  %168 = fmul contract double %164, %167\l  %169 = fadd contract double %157, %168\l  %170 = add nuw nsw i32 %73, 8\l  %171 = add i32 %74, 8\l  %172 = icmp eq i32 %171, %24\l  br i1 %172, label %41, label %71, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x4fb5320:s0 -> Node0x4fb52d0;
	Node0x4fb5320:s1 -> Node0x4fb5320;
}
