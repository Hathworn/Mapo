digraph "CFG for '_Z12setup_kernelP12hiprandStatePii' function" {
	label="CFG for '_Z12setup_kernelP12hiprandStatePii' function";

	Node0x51a4a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = mul i32 %19, %6\l  %21 = add i32 %20, %5\l  %22 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 2, !range !13, !invariant.load\l... !14\l  %25 = zext i16 %24 to i32\l  %26 = getelementptr i8, i8 addrspace(4)* %7, i64 8\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 4, !range !13, !invariant.load\l... !14\l  %29 = zext i16 %28 to i32\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15\l  %31 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %32 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %33 = mul i32 %21, %29\l  %34 = add i32 %33, %30\l  %35 = mul i32 %34, %25\l  %36 = add i32 %35, %31\l  %37 = mul i32 %36, %14\l  %38 = add i32 %37, %32\l  %39 = icmp slt i32 %38, %2\l  br i1 %39, label %40, label %245\l|{<s0>T|<s1>F}}"];
	Node0x51a4a90:s0 -> Node0x51a9f50;
	Node0x51a4a90:s1 -> Node0x51ac5d0;
	Node0x51a9f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%40:\l40:                                               \l  %41 = sext i32 %38 to i64\l  %42 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %41\l  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !16, !amdgpu.noclobber\l... !14\l  %44 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %41\l  %45 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %45) #4\l  %46 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %47 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %48 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %49 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %50 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %51 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 0\l  %52 = xor i32 %43, 746559103\l  %53 = icmp sgt i32 %43, -1\l  %54 = mul i32 %52, 1228688033\l  %55 = select i1 %53, i32 -1973591729, i32 -100066652\l  %56 = add i32 %54, 123456789\l  store i32 %56, i32 addrspace(5)* %46, align 8, !tbaa !16\l  %57 = xor i32 %54, 362436069\l  store i32 %57, i32 addrspace(5)* %47, align 4, !tbaa !16\l  %58 = add nsw i32 %55, 521288629\l  store i32 %58, i32 addrspace(5)* %48, align 8, !tbaa !16\l  %59 = xor i32 %55, 88675123\l  store i32 %59, i32 addrspace(5)* %49, align 4, !tbaa !16\l  %60 = add i32 %54, 5783321\l  store i32 %60, i32 addrspace(5)* %50, align 8, !tbaa !16\l  %61 = add i32 %54, 6615241\l  %62 = add i32 %61, %55\l  store i32 %62, i32 addrspace(5)* %51, align 8, !tbaa !20\l  %63 = icmp eq i32 %38, 0\l  br i1 %63, label %241, label %64\l|{<s0>T|<s1>F}}"];
	Node0x51a9f50:s0 -> Node0x51ae6e0;
	Node0x51a9f50:s1 -> Node0x51ae770;
	Node0x51ae770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%64:\l64:                                               \l  %65 = phi i64 [ %74, %72 ], [ %41, %40 ]\l  %66 = phi i32 [ %73, %72 ], [ 0, %40 ]\l  %67 = trunc i64 %65 to i32\l  %68 = and i32 %67, 3\l  %69 = icmp eq i32 %68, 0\l  br i1 %69, label %72, label %70\l|{<s0>T|<s1>F}}"];
	Node0x51ae770:s0 -> Node0x51ac020;
	Node0x51ae770:s1 -> Node0x51aeeb0;
	Node0x51aeeb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%70:\l70:                                               \l  %71 = zext i32 %66 to i64\l  br label %76\l}"];
	Node0x51aeeb0 -> Node0x51af060;
	Node0x51ac020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%72:\l72:                                               \l  %73 = add nuw nsw i32 %66, 1\l  %74 = lshr i64 %65, 2\l  %75 = icmp ult i64 %65, 4\l  br i1 %75, label %241, label %64, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x51ac020:s0 -> Node0x51ae6e0;
	Node0x51ac020:s1 -> Node0x51ae770;
	Node0x51af060 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%76:\l76:                                               \l  %77 = phi i32 [ 0, %70 ], [ %239, %238 ]\l  br label %78\l}"];
	Node0x51af060 -> Node0x51af540;
	Node0x51af540 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = phi i32 [ 0, %76 ], [ %211, %78 ]\l  %80 = phi i32 [ 0, %76 ], [ %217, %78 ]\l  %81 = phi i32 [ 0, %76 ], [ %223, %78 ]\l  %82 = phi i32 [ 0, %76 ], [ %229, %78 ]\l  %83 = phi i32 [ 0, %76 ], [ %235, %78 ]\l  %84 = phi i32 [ 0, %76 ], [ %236, %78 ]\l  %85 = lshr i32 %84, 5\l  %86 = and i32 %84, 28\l  %87 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %85\l  %88 = load i32, i32 addrspace(5)* %87, align 4, !tbaa !16\l  %89 = shl nuw i32 1, %86\l  %90 = and i32 %89, %88\l  %91 = icmp eq i32 %90, 0\l  %92 = mul nuw nsw i32 %84, 5\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %93\l  %95 = load i32, i32 addrspace(4)* %94, align 16, !tbaa !16\l  %96 = select i1 %91, i32 0, i32 %95\l  %97 = xor i32 %96, %79\l  %98 = or i32 %92, 1\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %99\l  %101 = load i32, i32 addrspace(4)* %100, align 4, !tbaa !16\l  %102 = select i1 %91, i32 0, i32 %101\l  %103 = xor i32 %102, %80\l  %104 = or i32 %92, 2\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %105\l  %107 = load i32, i32 addrspace(4)* %106, align 8, !tbaa !16\l  %108 = select i1 %91, i32 0, i32 %107\l  %109 = xor i32 %108, %81\l  %110 = or i32 %92, 3\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %111\l  %113 = load i32, i32 addrspace(4)* %112, align 4, !tbaa !16\l  %114 = select i1 %91, i32 0, i32 %113\l  %115 = xor i32 %114, %82\l  %116 = add nuw nsw i32 %92, 4\l  %117 = zext i32 %116 to i64\l  %118 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %117\l  %119 = load i32, i32 addrspace(4)* %118, align 16, !tbaa !16\l  %120 = select i1 %91, i32 0, i32 %119\l  %121 = xor i32 %120, %83\l  %122 = or i32 %84, 1\l  %123 = lshr i32 %84, 5\l  %124 = and i32 %122, 29\l  %125 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %123\l  %126 = load i32, i32 addrspace(5)* %125, align 4, !tbaa !16\l  %127 = shl nuw i32 1, %124\l  %128 = and i32 %127, %126\l  %129 = icmp eq i32 %128, 0\l  %130 = mul nuw nsw i32 %122, 5\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %131\l  %133 = load i32, i32 addrspace(4)* %132, align 4, !tbaa !16\l  %134 = select i1 %129, i32 0, i32 %133\l  %135 = xor i32 %134, %97\l  %136 = add nuw nsw i32 %130, 1\l  %137 = zext i32 %136 to i64\l  %138 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %137\l  %139 = load i32, i32 addrspace(4)* %138, align 8, !tbaa !16\l  %140 = select i1 %129, i32 0, i32 %139\l  %141 = xor i32 %140, %103\l  %142 = or i32 %130, 2\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %143\l  %145 = load i32, i32 addrspace(4)* %144, align 4, !tbaa !16\l  %146 = select i1 %129, i32 0, i32 %145\l  %147 = xor i32 %146, %109\l  %148 = add nuw nsw i32 %130, 3\l  %149 = zext i32 %148 to i64\l  %150 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %149\l  %151 = load i32, i32 addrspace(4)* %150, align 16, !tbaa !16\l  %152 = select i1 %129, i32 0, i32 %151\l  %153 = xor i32 %152, %115\l  %154 = add nuw nsw i32 %130, 4\l  %155 = zext i32 %154 to i64\l  %156 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %155\l  %157 = load i32, i32 addrspace(4)* %156, align 4, !tbaa !16\l  %158 = select i1 %129, i32 0, i32 %157\l  %159 = xor i32 %158, %121\l  %160 = or i32 %84, 2\l  %161 = lshr i32 %84, 5\l  %162 = and i32 %160, 30\l  %163 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %161\l  %164 = load i32, i32 addrspace(5)* %163, align 4, !tbaa !16\l  %165 = shl nuw i32 1, %162\l  %166 = and i32 %165, %164\l  %167 = icmp eq i32 %166, 0\l  %168 = mul nuw nsw i32 %160, 5\l  %169 = zext i32 %168 to i64\l  %170 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %169\l  %171 = load i32, i32 addrspace(4)* %170, align 8, !tbaa !16\l  %172 = select i1 %167, i32 0, i32 %171\l  %173 = xor i32 %172, %135\l  %174 = or i32 %168, 1\l  %175 = zext i32 %174 to i64\l  %176 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %175\l  %177 = load i32, i32 addrspace(4)* %176, align 4, !tbaa !16\l  %178 = select i1 %167, i32 0, i32 %177\l  %179 = xor i32 %178, %141\l  %180 = add nuw nsw i32 %168, 2\l  %181 = zext i32 %180 to i64\l  %182 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %181\l  %183 = load i32, i32 addrspace(4)* %182, align 16, !tbaa !16\l  %184 = select i1 %167, i32 0, i32 %183\l  %185 = xor i32 %184, %147\l  %186 = add nuw nsw i32 %168, 3\l  %187 = zext i32 %186 to i64\l  %188 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %187\l  %189 = load i32, i32 addrspace(4)* %188, align 4, !tbaa !16\l  %190 = select i1 %167, i32 0, i32 %189\l  %191 = xor i32 %190, %153\l  %192 = add nuw nsw i32 %168, 4\l  %193 = zext i32 %192 to i64\l  %194 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %193\l  %195 = load i32, i32 addrspace(4)* %194, align 8, !tbaa !16\l  %196 = select i1 %167, i32 0, i32 %195\l  %197 = xor i32 %196, %159\l  %198 = or i32 %84, 3\l  %199 = lshr i32 %84, 5\l  %200 = and i32 %198, 31\l  %201 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %199\l  %202 = load i32, i32 addrspace(5)* %201, align 4, !tbaa !16\l  %203 = shl nuw i32 1, %200\l  %204 = and i32 %203, %202\l  %205 = icmp eq i32 %204, 0\l  %206 = mul nuw nsw i32 %198, 5\l  %207 = zext i32 %206 to i64\l  %208 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %207\l  %209 = load i32, i32 addrspace(4)* %208, align 4, !tbaa !16\l  %210 = select i1 %205, i32 0, i32 %209\l  %211 = xor i32 %210, %173\l  %212 = add nuw nsw i32 %206, 1\l  %213 = zext i32 %212 to i64\l  %214 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %213\l  %215 = load i32, i32 addrspace(4)* %214, align 16, !tbaa !16\l  %216 = select i1 %205, i32 0, i32 %215\l  %217 = xor i32 %216, %179\l  %218 = add nuw nsw i32 %206, 2\l  %219 = zext i32 %218 to i64\l  %220 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %219\l  %221 = load i32, i32 addrspace(4)* %220, align 4, !tbaa !16\l  %222 = select i1 %205, i32 0, i32 %221\l  %223 = xor i32 %222, %185\l  %224 = add nuw nsw i32 %206, 3\l  %225 = zext i32 %224 to i64\l  %226 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %225\l  %227 = load i32, i32 addrspace(4)* %226, align 8, !tbaa !16\l  %228 = select i1 %205, i32 0, i32 %227\l  %229 = xor i32 %228, %191\l  %230 = add nuw nsw i32 %206, 4\l  %231 = zext i32 %230 to i64\l  %232 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %71, i64 %231\l  %233 = load i32, i32 addrspace(4)* %232, align 4, !tbaa !16\l  %234 = select i1 %205, i32 0, i32 %233\l  %235 = xor i32 %234, %197\l  %236 = add nuw nsw i32 %84, 4\l  %237 = icmp eq i32 %236, 160\l  br i1 %237, label %238, label %78, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x51af540:s0 -> Node0x51af400;
	Node0x51af540:s1 -> Node0x51af540;
	Node0x51af400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%238:\l238:                                              \l  store i32 %211, i32 addrspace(5)* %46, align 8, !tbaa !16\l  store i32 %217, i32 addrspace(5)* %47, align 4, !tbaa !16\l  store i32 %223, i32 addrspace(5)* %48, align 8, !tbaa !16\l  store i32 %229, i32 addrspace(5)* %49, align 4, !tbaa !16\l  store i32 %235, i32 addrspace(5)* %50, align 8, !tbaa !16\l  %239 = add nuw nsw i32 %77, 1\l  %240 = icmp eq i32 %239, %68\l  br i1 %240, label %72, label %76, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x51af400:s0 -> Node0x51ac020;
	Node0x51af400:s1 -> Node0x51af060;
	Node0x51ae6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%241:\l241:                                              \l  %242 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %242, align 4, !tbaa !29\l  %243 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %243, align 8, !tbaa !30\l  %244 = bitcast %struct.hiprandState addrspace(1)* %44 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %244, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %45, i64 48, i1 false), !tbaa.struct !31\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %45) #4\l  br label %245\l}"];
	Node0x51ae6e0 -> Node0x51ac5d0;
	Node0x51ac5d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%245:\l245:                                              \l  ret void\l}"];
}
