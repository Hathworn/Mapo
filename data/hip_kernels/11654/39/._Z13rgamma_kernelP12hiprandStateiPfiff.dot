digraph "CFG for '_Z13rgamma_kernelP12hiprandStateiPfiff' function" {
	label="CFG for '_Z13rgamma_kernelP12hiprandStateiPfiff' function";

	Node0x54dadb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %9, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !4\l  %13 = getelementptr i8, i8 addrspace(4)* %9, i64 4\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 4, !range !13, !invariant.load\l... !14\l  %16 = zext i16 %15 to i32\l  %17 = udiv i32 %12, %16\l  %18 = mul i32 %17, %16\l  %19 = icmp ugt i32 %12, %18\l  %20 = zext i1 %19 to i32\l  %21 = add i32 %17, %20\l  %22 = mul i32 %21, %8\l  %23 = add i32 %22, %7\l  %24 = getelementptr i8, i8 addrspace(4)* %9, i64 6\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 2, !range !13, !invariant.load\l... !14\l  %27 = zext i16 %26 to i32\l  %28 = getelementptr i8, i8 addrspace(4)* %9, i64 8\l  %29 = bitcast i8 addrspace(4)* %28 to i16 addrspace(4)*\l  %30 = load i16, i16 addrspace(4)* %29, align 4, !range !13, !invariant.load\l... !14\l  %31 = zext i16 %30 to i32\l  %32 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15\l  %33 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %34 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %35 = mul i32 %23, %31\l  %36 = add i32 %35, %32\l  %37 = mul i32 %36, %27\l  %38 = add i32 %37, %33\l  %39 = mul i32 %38, %16\l  %40 = add i32 %39, %34\l  %41 = icmp slt i32 %40, %1\l  br i1 %41, label %42, label %891\l|{<s0>T|<s1>F}}"];
	Node0x54dadb0:s0 -> Node0x54df3c0;
	Node0x54dadb0:s1 -> Node0x54df450;
	Node0x54df3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%42:\l42:                                               \l  %43 = freeze i32 %3\l  %44 = freeze i32 %1\l  %45 = sdiv i32 %43, %44\l  %46 = mul i32 %45, %44\l  %47 = sub i32 %43, %46\l  %48 = add nsw i32 %45, 1\l  %49 = icmp slt i32 %40, %47\l  br i1 %49, label %50, label %52\l|{<s0>T|<s1>F}}"];
	Node0x54df3c0:s0 -> Node0x54df940;
	Node0x54df3c0:s1 -> Node0x54df990;
	Node0x54df940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%50:\l50:                                               \l  %51 = mul nsw i32 %48, %40\l  br label %57\l}"];
	Node0x54df940 -> Node0x54dfb60;
	Node0x54df990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%52:\l52:                                               \l  %53 = mul nsw i32 %48, %47\l  %54 = sub nsw i32 %40, %47\l  %55 = mul nsw i32 %45, %54\l  %56 = add nsw i32 %53, %55\l  br label %57\l}"];
	Node0x54df990 -> Node0x54dfb60;
	Node0x54dfb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%57:\l57:                                               \l  %58 = phi i32 [ %48, %50 ], [ %45, %52 ]\l  %59 = phi i32 [ %51, %50 ], [ %56, %52 ]\l  %60 = icmp sgt i32 %58, 0\l  br i1 %60, label %61, label %891\l|{<s0>T|<s1>F}}"];
	Node0x54dfb60:s0 -> Node0x54e00f0;
	Node0x54dfb60:s1 -> Node0x54df450;
	Node0x54e00f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%61:\l61:                                               \l  %62 = fpext float %4 to double\l  %63 = fcmp contract olt float %4, 1.000000e+00\l  %64 = fadd contract float %4, -5.000000e-01\l  %65 = fcmp olt float %64, 0x39F0000000000000\l  %66 = select i1 %65, float 0x41F0000000000000, float 1.000000e+00\l  %67 = fmul float %64, %66\l  %68 = tail call float @llvm.sqrt.f32(float %67)\l  %69 = bitcast float %68 to i32\l  %70 = add nsw i32 %69, -1\l  %71 = bitcast i32 %70 to float\l  %72 = add nsw i32 %69, 1\l  %73 = bitcast i32 %72 to float\l  %74 = tail call i1 @llvm.amdgcn.class.f32(float %67, i32 608)\l  %75 = select i1 %65, float 0x3EF0000000000000, float 1.000000e+00\l  %76 = fneg float %73\l  %77 = tail call float @llvm.fma.f32(float %76, float %68, float %67)\l  %78 = fcmp ogt float %77, 0.000000e+00\l  %79 = fneg float %71\l  %80 = tail call float @llvm.fma.f32(float %79, float %68, float %67)\l  %81 = fcmp ole float %80, 0.000000e+00\l  %82 = select i1 %81, float %71, float %68\l  %83 = select i1 %78, float %73, float %82\l  %84 = fmul float %75, %83\l  %85 = select i1 %74, float %67, float %84\l  %86 = fpext float %85 to double\l  %87 = fmul contract double %86, 1.200000e+01\l  %88 = fsub contract double 0x4016A09E60000000, %87\l  %89 = fptrunc double %88 to float\l  %90 = sext i32 %40 to i64\l  %91 = getelementptr %struct.hiprandState, %struct.hiprandState addrspace(1)*\l... %0, i64 %90, i32 0, i32 0, i32 1\l  %92 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 3\l  %93 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 5, i64 0\l  %94 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 5, i64 1\l  %95 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 5, i64 2\l  %96 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 5, i64 3\l  %97 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 5, i64 4\l  %98 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 0\l  %99 = fdiv contract float 1.000000e+00, %4\l  %100 = fmul contract float %99, 0x3F2FC59820000000\l  %101 = fadd contract float %100, 0x3F30104360000000\l  %102 = fmul contract float %99, %101\l  %103 = fadd contract float %102, 0xBF135E00C0000000\l  %104 = fmul contract float %99, %103\l  %105 = fadd contract float %104, 0x3F579CDF80000000\l  %106 = fmul contract float %99, %105\l  %107 = fadd contract float %106, 0x3F80688C60000000\l  %108 = fmul contract float %99, %107\l  %109 = fadd contract float %108, 0x3F9554D900000000\l  %110 = fmul contract float %99, %109\l  %111 = fadd contract float %110, 0x3FA5555620000000\l  %112 = fmul contract float %99, %111\l  %113 = fcmp contract ugt double %62, 3.686000e+00\l  %114 = fcmp contract ugt double %62, 1.302200e+01\l  %115 = fcmp contract oeq float %4, 0.000000e+00\l  %116 = fmul contract float %4, 0x3FD78B5640000000\l  %117 = fadd contract float %116, 1.000000e+00\l  %118 = fsub contract double 1.000000e+00, %62\l  br label %119\l}"];
	Node0x54e00f0 -> Node0x54e3d60;
	Node0x54e3d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%119:\l119:                                              \l  %120 = phi i32 [ 0, %61 ], [ %889, %875 ]\l  %121 = phi float [ undef, %61 ], [ %885, %875 ]\l  %122 = phi float [ undef, %61 ], [ %884, %875 ]\l  %123 = phi float [ undef, %61 ], [ %883, %875 ]\l  %124 = phi float [ undef, %61 ], [ %882, %875 ]\l  %125 = phi float [ undef, %61 ], [ %881, %875 ]\l  %126 = phi float [ undef, %61 ], [ %880, %875 ]\l  %127 = phi float [ undef, %61 ], [ %879, %875 ]\l  %128 = phi float [ 0.000000e+00, %61 ], [ %878, %875 ]\l  %129 = phi float [ 0.000000e+00, %61 ], [ %877, %875 ]\l  br i1 %63, label %130, label %345\l|{<s0>T|<s1>F}}"];
	Node0x54e3d60:s0 -> Node0x54e0eb0;
	Node0x54e3d60:s1 -> Node0x54e0f40;
	Node0x54e0eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%130:\l130:                                              \l  br i1 %115, label %875, label %131\l|{<s0>T|<s1>F}}"];
	Node0x54e0eb0:s0 -> Node0x54e3e90;
	Node0x54e0eb0:s1 -> Node0x54e1080;
	Node0x54e1080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%131:\l131:                                              \l  %132 = load i32, i32 addrspace(1)* %91, align 4, !tbaa !16\l  br label %133\l}"];
	Node0x54e1080 -> Node0x54e5690;
	Node0x54e5690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%133:\l133:                                              \l  %134 = phi i32 [ %132, %131 ], [ %209, %339 ]\l  %135 = icmp eq i32 %134, 0\l  br i1 %135, label %138, label %136\l|{<s0>T|<s1>F}}"];
	Node0x54e5690:s0 -> Node0x54e5960;
	Node0x54e5690:s1 -> Node0x54e59f0;
	Node0x54e59f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%136:\l136:                                              \l  store i32 0, i32 addrspace(1)* %91, align 4, !tbaa !16\l  %137 = load float, float addrspace(1)* %92, align 4, !tbaa !24\l  br label %208\l}"];
	Node0x54e59f0 -> Node0x54e6380;
	Node0x54e5960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%138:\l138:                                              \l  %139 = load i32, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %140 = lshr i32 %139, 2\l  %141 = xor i32 %140, %139\l  %142 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !25\l  %143 = load i32, i32 addrspace(1)* %95, align 8, !tbaa !25\l  %144 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %145 = load i32, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %146 = shl i32 %145, 4\l  %147 = shl i32 %141, 1\l  %148 = xor i32 %147, %146\l  %149 = xor i32 %148, %141\l  %150 = xor i32 %149, %145\l  %151 = load i32, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %152 = add i32 %151, 362437\l  %153 = add i32 %152, %150\l  %154 = lshr i32 %142, 2\l  %155 = xor i32 %154, %142\l  store i32 %143, i32 addrspace(1)* %93, align 8, !tbaa !25\l  store i32 %144, i32 addrspace(1)* %94, align 4, !tbaa !25\l  store i32 %145, i32 addrspace(1)* %95, align 8, !tbaa !25\l  store i32 %150, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %156 = shl i32 %150, 4\l  %157 = shl i32 %155, 1\l  %158 = xor i32 %157, %156\l  %159 = xor i32 %158, %155\l  %160 = xor i32 %159, %150\l  store i32 %160, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %161 = add i32 %151, 724874\l  store i32 %161, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %162 = add i32 %160, %161\l  %163 = uitofp i32 %153 to float\l  %164 = fmul contract float %163, 0x3DF0000000000000\l  %165 = fadd contract float %164, 0x3DF0000000000000\l  %166 = uitofp i32 %162 to float\l  %167 = fmul contract float %166, 0x3E1921FB60000000\l  %168 = fadd contract float %167, 0x3E1921FB60000000\l  %169 = tail call i1 @llvm.amdgcn.class.f32(float %165, i32 144)\l  %170 = select i1 %169, float 0x41F0000000000000, float 1.000000e+00\l  %171 = fmul float %165, %170\l  %172 = tail call float @llvm.log2.f32(float %171)\l  %173 = fmul float %172, 0x3FE62E42E0000000\l  %174 = tail call i1 @llvm.amdgcn.class.f32(float %172, i32 519)\l  %175 = fneg float %173\l  %176 = tail call float @llvm.fma.f32(float %172, float 0x3FE62E42E0000000,\l... float %175)\l  %177 = tail call float @llvm.fma.f32(float %172, float 0x3E6EFA39E0000000,\l... float %176)\l  %178 = fadd float %173, %177\l  %179 = select i1 %174, float %172, float %178\l  %180 = select i1 %169, float 0x40362E4300000000, float 0.000000e+00\l  %181 = fsub float %179, %180\l  %182 = fmul contract float %181, -2.000000e+00\l  %183 = fcmp olt float %182, 0x39F0000000000000\l  %184 = select i1 %183, float 0x41F0000000000000, float 1.000000e+00\l  %185 = fmul float %182, %184\l  %186 = tail call float @llvm.sqrt.f32(float %185)\l  %187 = bitcast float %186 to i32\l  %188 = add nsw i32 %187, -1\l  %189 = bitcast i32 %188 to float\l  %190 = add nsw i32 %187, 1\l  %191 = bitcast i32 %190 to float\l  %192 = tail call i1 @llvm.amdgcn.class.f32(float %185, i32 608)\l  %193 = select i1 %183, float 0x3EF0000000000000, float 1.000000e+00\l  %194 = fneg float %191\l  %195 = tail call float @llvm.fma.f32(float %194, float %186, float %185)\l  %196 = fcmp ogt float %195, 0.000000e+00\l  %197 = fneg float %189\l  %198 = tail call float @llvm.fma.f32(float %197, float %186, float %185)\l  %199 = fcmp ole float %198, 0.000000e+00\l  %200 = select i1 %199, float %189, float %186\l  %201 = select i1 %196, float %191, float %200\l  %202 = fmul float %193, %201\l  %203 = select i1 %192, float %185, float %202\l  %204 = tail call float @llvm.sin.f32(float %168)\l  %205 = tail call float @llvm.cos.f32(float %168)\l  %206 = fmul contract float %204, %203\l  %207 = fmul contract float %205, %203\l  store i32 1, i32 addrspace(1)* %91, align 4, !tbaa !16\l  store float %207, float addrspace(1)* %92, align 4, !tbaa !24\l  br label %208\l}"];
	Node0x54e5960 -> Node0x54e6380;
	Node0x54e6380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%208:\l208:                                              \l  %209 = phi i32 [ 0, %136 ], [ 1, %138 ]\l  %210 = phi float [ %137, %136 ], [ %206, %138 ]\l  %211 = fmul contract float %117, %210\l  %212 = fcmp contract ult float %211, 1.000000e+00\l  br i1 %212, label %278, label %213\l|{<s0>T|<s1>F}}"];
	Node0x54e6380:s0 -> Node0x54eb220;
	Node0x54e6380:s1 -> Node0x54eb270;
	Node0x54eb270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%213:\l213:                                              \l  %214 = fsub contract float %117, %211\l  %215 = fdiv contract float %214, %4\l  %216 = tail call i1 @llvm.amdgcn.class.f32(float %215, i32 144)\l  %217 = select i1 %216, float 0x41F0000000000000, float 1.000000e+00\l  %218 = fmul float %215, %217\l  %219 = tail call float @llvm.log2.f32(float %218)\l  %220 = fmul float %219, 0x3FE62E42E0000000\l  %221 = tail call i1 @llvm.amdgcn.class.f32(float %219, i32 519)\l  %222 = fneg float %220\l  %223 = tail call float @llvm.fma.f32(float %219, float 0x3FE62E42E0000000,\l... float %222)\l  %224 = tail call float @llvm.fma.f32(float %219, float 0x3E6EFA39E0000000,\l... float %223)\l  %225 = fadd float %220, %224\l  %226 = select i1 %221, float %219, float %225\l  %227 = select i1 %216, float 0x40362E4300000000, float 0.000000e+00\l  %228 = fsub float %226, %227\l  %229 = fneg contract float %228\l  %230 = load i32, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %231 = lshr i32 %230, 2\l  %232 = xor i32 %231, %230\l  %233 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !25\l  store i32 %233, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %234 = load i32, i32 addrspace(1)* %95, align 8, !tbaa !25\l  store i32 %234, i32 addrspace(1)* %94, align 4, !tbaa !25\l  %235 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !25\l  store i32 %235, i32 addrspace(1)* %95, align 8, !tbaa !25\l  %236 = load i32, i32 addrspace(1)* %97, align 8, !tbaa !25\l  store i32 %236, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %237 = shl i32 %236, 4\l  %238 = shl i32 %232, 1\l  %239 = xor i32 %238, %237\l  %240 = xor i32 %239, %232\l  %241 = xor i32 %240, %236\l  store i32 %241, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %242 = load i32, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %243 = add i32 %242, 362437\l  store i32 %243, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %244 = add i32 %243, %241\l  %245 = uitofp i32 %244 to float\l  %246 = fmul contract float %245, 0x3DF0000000000000\l  %247 = fadd contract float %246, 0x3DF0000000000000\l  %248 = tail call i1 @llvm.amdgcn.class.f32(float %247, i32 144)\l  %249 = select i1 %248, float 0x41F0000000000000, float 1.000000e+00\l  %250 = fmul float %247, %249\l  %251 = tail call float @llvm.log2.f32(float %250)\l  %252 = fmul float %251, 0x3FE62E42E0000000\l  %253 = tail call i1 @llvm.amdgcn.class.f32(float %251, i32 519)\l  %254 = fneg float %252\l  %255 = tail call float @llvm.fma.f32(float %251, float 0x3FE62E42E0000000,\l... float %254)\l  %256 = tail call float @llvm.fma.f32(float %251, float 0x3E6EFA39E0000000,\l... float %255)\l  %257 = fadd float %252, %256\l  %258 = select i1 %253, float %251, float %257\l  %259 = select i1 %248, float 0x40362E4300000000, float 0.000000e+00\l  %260 = fsub float %258, %259\l  %261 = fpext float %260 to double\l  %262 = tail call i1 @llvm.amdgcn.class.f32(float %229, i32 144)\l  %263 = select i1 %262, float 0x41F0000000000000, float 1.000000e+00\l  %264 = fmul float %263, %229\l  %265 = tail call float @llvm.log2.f32(float %264)\l  %266 = fmul float %265, 0x3FE62E42E0000000\l  %267 = tail call i1 @llvm.amdgcn.class.f32(float %265, i32 519)\l  %268 = fneg float %266\l  %269 = tail call float @llvm.fma.f32(float %265, float 0x3FE62E42E0000000,\l... float %268)\l  %270 = tail call float @llvm.fma.f32(float %265, float 0x3E6EFA39E0000000,\l... float %269)\l  %271 = fadd float %266, %270\l  %272 = select i1 %267, float %265, float %271\l  %273 = select i1 %262, float 0x40362E4300000000, float 0.000000e+00\l  %274 = fsub float %272, %273\l  %275 = fpext float %274 to double\l  %276 = fmul contract double %118, %275\l  %277 = fcmp contract ult double %276, %261\l  br i1 %277, label %339, label %340\l|{<s0>T|<s1>F}}"];
	Node0x54eb270:s0 -> Node0x54e5790;
	Node0x54eb270:s1 -> Node0x54eeab0;
	Node0x54eb220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%278:\l278:                                              \l  %279 = tail call i1 @llvm.amdgcn.class.f32(float %211, i32 144)\l  %280 = select i1 %279, float 0x41F0000000000000, float 1.000000e+00\l  %281 = fmul float %211, %280\l  %282 = tail call float @llvm.log2.f32(float %281)\l  %283 = fmul float %282, 0x3FE62E42E0000000\l  %284 = tail call i1 @llvm.amdgcn.class.f32(float %282, i32 519)\l  %285 = fneg float %283\l  %286 = tail call float @llvm.fma.f32(float %282, float 0x3FE62E42E0000000,\l... float %285)\l  %287 = tail call float @llvm.fma.f32(float %282, float 0x3E6EFA39E0000000,\l... float %286)\l  %288 = fadd float %283, %287\l  %289 = select i1 %284, float %282, float %288\l  %290 = select i1 %279, float 0x40362E4300000000, float 0.000000e+00\l  %291 = fsub float %289, %290\l  %292 = fdiv contract float %291, %4\l  %293 = fmul float %292, 0x3FF7154760000000\l  %294 = tail call float @llvm.rint.f32(float %293)\l  %295 = fcmp ogt float %292, 0x40562E4300000000\l  %296 = fcmp olt float %292, 0xC059D1DA00000000\l  %297 = fneg float %293\l  %298 = tail call float @llvm.fma.f32(float %292, float 0x3FF7154760000000,\l... float %297)\l  %299 = tail call float @llvm.fma.f32(float %292, float 0x3E54AE0BE0000000,\l... float %298)\l  %300 = fsub float %293, %294\l  %301 = fadd float %299, %300\l  %302 = tail call float @llvm.exp2.f32(float %301)\l  %303 = fptosi float %294 to i32\l  %304 = tail call float @llvm.amdgcn.ldexp.f32(float %302, i32 %303)\l  %305 = select i1 %296, float 0.000000e+00, float %304\l  %306 = select i1 %295, float 0x7FF0000000000000, float %305\l  %307 = load i32, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %308 = lshr i32 %307, 2\l  %309 = xor i32 %308, %307\l  %310 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !25\l  store i32 %310, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %311 = load i32, i32 addrspace(1)* %95, align 8, !tbaa !25\l  store i32 %311, i32 addrspace(1)* %94, align 4, !tbaa !25\l  %312 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !25\l  store i32 %312, i32 addrspace(1)* %95, align 8, !tbaa !25\l  %313 = load i32, i32 addrspace(1)* %97, align 8, !tbaa !25\l  store i32 %313, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %314 = shl i32 %313, 4\l  %315 = shl i32 %309, 1\l  %316 = xor i32 %315, %314\l  %317 = xor i32 %316, %309\l  %318 = xor i32 %317, %313\l  store i32 %318, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %319 = load i32, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %320 = add i32 %319, 362437\l  store i32 %320, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %321 = add i32 %320, %318\l  %322 = uitofp i32 %321 to float\l  %323 = fmul contract float %322, 0x3DF0000000000000\l  %324 = fadd contract float %323, 0x3DF0000000000000\l  %325 = tail call i1 @llvm.amdgcn.class.f32(float %324, i32 144)\l  %326 = select i1 %325, float 0x41F0000000000000, float 1.000000e+00\l  %327 = fmul float %324, %326\l  %328 = tail call float @llvm.log2.f32(float %327)\l  %329 = fmul float %328, 0x3FE62E42E0000000\l  %330 = tail call i1 @llvm.amdgcn.class.f32(float %328, i32 519)\l  %331 = fneg float %329\l  %332 = tail call float @llvm.fma.f32(float %328, float 0x3FE62E42E0000000,\l... float %331)\l  %333 = tail call float @llvm.fma.f32(float %328, float 0x3E6EFA39E0000000,\l... float %332)\l  %334 = fadd float %329, %333\l  %335 = select i1 %330, float %328, float %334\l  %336 = select i1 %325, float 0x40362E4300000000, float 0.000000e+00\l  %337 = fsub float %335, %336\l  %338 = fcmp contract ugt float %337, %306\l  br i1 %338, label %339, label %342\l|{<s0>T|<s1>F}}"];
	Node0x54eb220:s0 -> Node0x54e5790;
	Node0x54eb220:s1 -> Node0x54f26d0;
	Node0x54e5790 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%339:\l339:                                              \l  br label %133, !llvm.loop !27\l}"];
	Node0x54e5790 -> Node0x54e5690;
	Node0x54eeab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%340:\l340:                                              \l  %341 = fneg contract float %228\l  br label %342\l}"];
	Node0x54eeab0 -> Node0x54f26d0;
	Node0x54f26d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%342:\l342:                                              \l  %343 = phi float [ %341, %340 ], [ %306, %278 ]\l  %344 = fmul contract float %343, %5\l  br label %875\l}"];
	Node0x54f26d0 -> Node0x54e3e90;
	Node0x54e0f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%345:\l345:                                              \l  %346 = fcmp contract une float %129, %4\l  br i1 %346, label %347, label %348\l|{<s0>T|<s1>F}}"];
	Node0x54e0f40:s0 -> Node0x54f2c60;
	Node0x54e0f40:s1 -> Node0x54f2cb0;
	Node0x54f2c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%347:\l347:                                              \l  br label %348\l}"];
	Node0x54f2c60 -> Node0x54f2cb0;
	Node0x54f2cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%348:\l348:                                              \l  %349 = phi float [ %4, %347 ], [ %129, %345 ]\l  %350 = phi float [ %85, %347 ], [ %127, %345 ]\l  %351 = phi float [ %64, %347 ], [ %126, %345 ]\l  %352 = phi float [ %89, %347 ], [ %125, %345 ]\l  %353 = load i32, i32 addrspace(1)* %91, align 4, !tbaa !16\l  %354 = icmp eq i32 %353, 0\l  br i1 %354, label %357, label %355\l|{<s0>T|<s1>F}}"];
	Node0x54f2cb0:s0 -> Node0x54f31e0;
	Node0x54f2cb0:s1 -> Node0x54f3230;
	Node0x54f3230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%355:\l355:                                              \l  store i32 0, i32 addrspace(1)* %91, align 4, !tbaa !16\l  %356 = load float, float addrspace(1)* %92, align 4, !tbaa !24\l  br label %427\l}"];
	Node0x54f3230 -> Node0x54f3430;
	Node0x54f31e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%357:\l357:                                              \l  %358 = load i32, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %359 = lshr i32 %358, 2\l  %360 = xor i32 %359, %358\l  %361 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !25\l  %362 = load i32, i32 addrspace(1)* %95, align 8, !tbaa !25\l  %363 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %364 = load i32, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %365 = shl i32 %364, 4\l  %366 = shl i32 %360, 1\l  %367 = xor i32 %366, %365\l  %368 = xor i32 %367, %360\l  %369 = xor i32 %368, %364\l  %370 = load i32, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %371 = add i32 %370, 362437\l  %372 = add i32 %371, %369\l  %373 = lshr i32 %361, 2\l  %374 = xor i32 %373, %361\l  store i32 %362, i32 addrspace(1)* %93, align 8, !tbaa !25\l  store i32 %363, i32 addrspace(1)* %94, align 4, !tbaa !25\l  store i32 %364, i32 addrspace(1)* %95, align 8, !tbaa !25\l  store i32 %369, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %375 = shl i32 %369, 4\l  %376 = shl i32 %374, 1\l  %377 = xor i32 %376, %375\l  %378 = xor i32 %377, %374\l  %379 = xor i32 %378, %369\l  store i32 %379, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %380 = add i32 %370, 724874\l  store i32 %380, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %381 = add i32 %379, %380\l  %382 = uitofp i32 %372 to float\l  %383 = fmul contract float %382, 0x3DF0000000000000\l  %384 = fadd contract float %383, 0x3DF0000000000000\l  %385 = uitofp i32 %381 to float\l  %386 = fmul contract float %385, 0x3E1921FB60000000\l  %387 = fadd contract float %386, 0x3E1921FB60000000\l  %388 = tail call i1 @llvm.amdgcn.class.f32(float %384, i32 144)\l  %389 = select i1 %388, float 0x41F0000000000000, float 1.000000e+00\l  %390 = fmul float %384, %389\l  %391 = tail call float @llvm.log2.f32(float %390)\l  %392 = fmul float %391, 0x3FE62E42E0000000\l  %393 = tail call i1 @llvm.amdgcn.class.f32(float %391, i32 519)\l  %394 = fneg float %392\l  %395 = tail call float @llvm.fma.f32(float %391, float 0x3FE62E42E0000000,\l... float %394)\l  %396 = tail call float @llvm.fma.f32(float %391, float 0x3E6EFA39E0000000,\l... float %395)\l  %397 = fadd float %392, %396\l  %398 = select i1 %393, float %391, float %397\l  %399 = select i1 %388, float 0x40362E4300000000, float 0.000000e+00\l  %400 = fsub float %398, %399\l  %401 = fmul contract float %400, -2.000000e+00\l  %402 = fcmp olt float %401, 0x39F0000000000000\l  %403 = select i1 %402, float 0x41F0000000000000, float 1.000000e+00\l  %404 = fmul float %401, %403\l  %405 = tail call float @llvm.sqrt.f32(float %404)\l  %406 = bitcast float %405 to i32\l  %407 = add nsw i32 %406, -1\l  %408 = bitcast i32 %407 to float\l  %409 = add nsw i32 %406, 1\l  %410 = bitcast i32 %409 to float\l  %411 = tail call i1 @llvm.amdgcn.class.f32(float %404, i32 608)\l  %412 = select i1 %402, float 0x3EF0000000000000, float 1.000000e+00\l  %413 = fneg float %410\l  %414 = tail call float @llvm.fma.f32(float %413, float %405, float %404)\l  %415 = fcmp ogt float %414, 0.000000e+00\l  %416 = fneg float %408\l  %417 = tail call float @llvm.fma.f32(float %416, float %405, float %404)\l  %418 = fcmp ole float %417, 0.000000e+00\l  %419 = select i1 %418, float %408, float %405\l  %420 = select i1 %415, float %410, float %419\l  %421 = fmul float %412, %420\l  %422 = select i1 %411, float %404, float %421\l  %423 = tail call float @llvm.sin.f32(float %387)\l  %424 = tail call float @llvm.cos.f32(float %387)\l  %425 = fmul contract float %423, %422\l  %426 = fmul contract float %424, %422\l  store i32 1, i32 addrspace(1)* %91, align 4, !tbaa !16\l  store float %426, float addrspace(1)* %92, align 4, !tbaa !24\l  br label %427\l}"];
	Node0x54f31e0 -> Node0x54f3430;
	Node0x54f3430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%427:\l427:                                              \l  %428 = phi float [ %356, %355 ], [ %425, %357 ]\l  %429 = fpext float %350 to double\l  %430 = fpext float %428 to double\l  %431 = fmul contract double %430, 5.000000e-01\l  %432 = fadd contract double %431, %429\l  %433 = fptrunc double %432 to float\l  %434 = fmul contract float %433, %433\l  %435 = fcmp contract ult float %428, 0.000000e+00\l  br i1 %435, label %438, label %436\l|{<s0>T|<s1>F}}"];
	Node0x54f3430:s0 -> Node0x54f69b0;
	Node0x54f3430:s1 -> Node0x54f6a00;
	Node0x54f6a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%436:\l436:                                              \l  %437 = fmul contract float %434, %5\l  br label %875\l}"];
	Node0x54f6a00 -> Node0x54e3e90;
	Node0x54f69b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%438:\l438:                                              \l  %439 = load i32, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %440 = lshr i32 %439, 2\l  %441 = xor i32 %440, %439\l  %442 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !25\l  store i32 %442, i32 addrspace(1)* %93, align 8, !tbaa !25\l  %443 = load i32, i32 addrspace(1)* %95, align 8, !tbaa !25\l  store i32 %443, i32 addrspace(1)* %94, align 4, !tbaa !25\l  %444 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !25\l  store i32 %444, i32 addrspace(1)* %95, align 8, !tbaa !25\l  %445 = load i32, i32 addrspace(1)* %97, align 8, !tbaa !25\l  store i32 %445, i32 addrspace(1)* %96, align 4, !tbaa !25\l  %446 = shl i32 %445, 4\l  %447 = shl i32 %441, 1\l  %448 = xor i32 %447, %446\l  %449 = xor i32 %448, %441\l  %450 = xor i32 %449, %445\l  store i32 %450, i32 addrspace(1)* %97, align 8, !tbaa !25\l  %451 = load i32, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %452 = add i32 %451, 362437\l  store i32 %452, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %453 = add i32 %452, %450\l  %454 = uitofp i32 %453 to float\l  %455 = fmul contract float %454, 0x3DF0000000000000\l  %456 = fadd contract float %455, 0x3DF0000000000000\l  %457 = fmul contract float %352, %456\l  %458 = fmul contract float %428, %428\l  %459 = fmul contract float %428, %458\l  %460 = fcmp contract ugt float %457, %459\l  br i1 %460, label %463, label %461\l|{<s0>T|<s1>F}}"];
	Node0x54f69b0:s0 -> Node0x54f8510;
	Node0x54f69b0:s1 -> Node0x54f8560;
	Node0x54f8560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%461:\l461:                                              \l  %462 = fmul contract float %434, %5\l  br label %875\l}"];
	Node0x54f8560 -> Node0x54e3e90;
	Node0x54f8510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%463:\l463:                                              \l  %464 = fcmp contract une float %128, %4\l  br i1 %464, label %465, label %492\l|{<s0>T|<s1>F}}"];
	Node0x54f8510:s0 -> Node0x54f87f0;
	Node0x54f8510:s1 -> Node0x54f8840;
	Node0x54f87f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%465:\l465:                                              \l  br i1 %113, label %477, label %466\l|{<s0>T|<s1>F}}"];
	Node0x54f87f0:s0 -> Node0x54f8940;
	Node0x54f87f0:s1 -> Node0x54f8990;
	Node0x54f8990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%466:\l466:                                              \l  %467 = fadd contract double %429, 4.630000e-01\l  %468 = fpext float %351 to double\l  %469 = fmul contract double %468, 1.780000e-01\l  %470 = fadd contract double %467, %469\l  %471 = fptrunc double %470 to float\l  %472 = fdiv contract double 1.950000e-01, %429\l  %473 = fadd contract double %472, -7.900000e-02\l  %474 = fmul contract double %429, 1.600000e-01\l  %475 = fadd contract double %474, %473\l  %476 = fptrunc double %475 to float\l  br label %492\l}"];
	Node0x54f8990 -> Node0x54f8840;
	Node0x54f8940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%477:\l477:                                              \l  br i1 %114, label %489, label %478\l|{<s0>T|<s1>F}}"];
	Node0x54f8940:s0 -> Node0x54f9180;
	Node0x54f8940:s1 -> Node0x54f91d0;
	Node0x54f91d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%478:\l478:                                              \l  %479 = fpext float %351 to double\l  %480 = fmul contract double %479, 0x3F7F212D77318FC5\l  %481 = fadd contract double %480, 1.654000e+00\l  %482 = fptrunc double %481 to float\l  %483 = fdiv contract double 1.680000e+00, %429\l  %484 = fadd contract double %483, 2.750000e-01\l  %485 = fptrunc double %484 to float\l  %486 = fdiv contract double 6.200000e-02, %429\l  %487 = fadd contract double %486, 2.400000e-02\l  %488 = fptrunc double %487 to float\l  br label %492\l}"];
	Node0x54f91d0 -> Node0x54f8840;
	Node0x54f9180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%489:\l489:                                              \l  %490 = fdiv contract double 1.515000e-01, %429\l  %491 = fptrunc double %490 to float\l  br label %492\l}"];
	Node0x54f9180 -> Node0x54f8840;
	Node0x54f8840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%492:\l492:                                              \l  %493 = phi float [ %4, %466 ], [ %4, %478 ], [ %4, %489 ], [ %128, %463 ]\l  %494 = phi float [ %112, %466 ], [ %112, %478 ], [ %112, %489 ], [ %124,\l... %463 ]\l  %495 = phi float [ %471, %466 ], [ %482, %478 ], [ 0x3FFC51EB80000000, %489\l... ], [ %123, %463 ]\l  %496 = phi float [ 0x3FF3C28F60000000, %466 ], [ %485, %478 ], [\l... 7.500000e-01, %489 ], [ %122, %463 ]\l  %497 = phi float [ %476, %466 ], [ %488, %478 ], [ %491, %489 ], [ %121,\l... %463 ]\l  %498 = fcmp contract ogt float %433, 0.000000e+00\l  %499 = fadd contract float %350, %350\l  br i1 %498, label %500, label %641\l|{<s0>T|<s1>F}}"];
	Node0x54f8840:s0 -> Node0x54fa1f0;
	Node0x54f8840:s1 -> Node0x54fa280;
	Node0x54fa1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%500:\l500:                                              \l  %501 = fdiv contract float %428, %499\l  %502 = tail call float @llvm.fabs.f32(float %501)\l  %503 = fcmp contract ugt float %502, 2.500000e-01\l  br i1 %503, label %524, label %504\l|{<s0>T|<s1>F}}"];
	Node0x54fa1f0:s0 -> Node0x54fa6a0;
	Node0x54fa1f0:s1 -> Node0x54fa730;
	Node0x54fa730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%504:\l504:                                              \l  %505 = fpext float %494 to double\l  %506 = fmul contract double %431, %430\l  %507 = fmul contract float %501, 0x3FBF95CC80000000\l  %508 = fadd contract float %507, 0xBFC17FF740000000\l  %509 = fmul contract float %501, %508\l  %510 = fadd contract float %509, 0x3FC2390A00000000\l  %511 = fmul contract float %501, %510\l  %512 = fadd contract float %511, 0xBFC5490F40000000\l  %513 = fmul contract float %501, %512\l  %514 = fadd contract float %513, 0x3FC999CDA0000000\l  %515 = fmul contract float %501, %514\l  %516 = fadd contract float %515, 0xBFD0000CA0000000\l  %517 = fmul contract float %501, %516\l  %518 = fadd contract float %517, 0x3FD5555540000000\l  %519 = fpext float %518 to double\l  %520 = fmul contract double %506, %519\l  %521 = fpext float %501 to double\l  %522 = fmul contract double %520, %521\l  %523 = fadd contract double %522, %505\l  br label %621\l}"];
	Node0x54fa730 -> Node0x54ed4e0;
	Node0x54fa6a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%524:\l524:                                              \l  %525 = fmul contract float %350, %428\l  %526 = fsub contract float %494, %525\l  %527 = fpext float %526 to double\l  %528 = fmul contract double %430, 2.500000e-01\l  %529 = fmul contract double %528, %430\l  %530 = fadd contract double %529, %527\l  %531 = fadd contract float %351, %351\l  %532 = fpext float %531 to double\l  %533 = fpext float %501 to double\l  %534 = fadd contract double %533, 1.000000e+00\l  %535 = tail call double @llvm.amdgcn.frexp.mant.f64(double %534)\l  %536 = fcmp olt double %535, 0x3FE5555555555555\l  %537 = zext i1 %536 to i32\l  %538 = tail call double @llvm.amdgcn.ldexp.f64(double %535, i32 %537)\l  %539 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %534)\l  %540 = sub nsw i32 %539, %537\l  %541 = fadd double %538, -1.000000e+00\l  %542 = fadd double %538, 1.000000e+00\l  %543 = fadd double %542, -1.000000e+00\l  %544 = fsub double %538, %543\l  %545 = tail call double @llvm.amdgcn.rcp.f64(double %542)\l  %546 = fneg double %542\l  %547 = tail call double @llvm.fma.f64(double %546, double %545, double\l... 1.000000e+00)\l  %548 = tail call double @llvm.fma.f64(double %547, double %545, double %545)\l  %549 = tail call double @llvm.fma.f64(double %546, double %548, double\l... 1.000000e+00)\l  %550 = tail call double @llvm.fma.f64(double %549, double %548, double %548)\l  %551 = fmul double %541, %550\l  %552 = fmul double %542, %551\l  %553 = fneg double %552\l  %554 = tail call double @llvm.fma.f64(double %551, double %542, double %553)\l  %555 = tail call double @llvm.fma.f64(double %551, double %544, double %554)\l  %556 = fadd double %552, %555\l  %557 = fsub double %556, %552\l  %558 = fsub double %555, %557\l  %559 = fsub double %541, %556\l  %560 = fsub double %541, %559\l  %561 = fsub double %560, %556\l  %562 = fsub double %561, %558\l  %563 = fadd double %559, %562\l  %564 = fmul double %550, %563\l  %565 = fadd double %551, %564\l  %566 = fsub double %565, %551\l  %567 = fsub double %564, %566\l  %568 = fmul double %565, %565\l  %569 = tail call double @llvm.fma.f64(double %568, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %570 = tail call double @llvm.fma.f64(double %568, double %569, double\l... 0x3FC7474DD7F4DF2E)\l  %571 = tail call double @llvm.fma.f64(double %568, double %570, double\l... 0x3FCC71C016291751)\l  %572 = tail call double @llvm.fma.f64(double %568, double %571, double\l... 0x3FD249249B27ACF1)\l  %573 = tail call double @llvm.fma.f64(double %568, double %572, double\l... 0x3FD99999998EF7B6)\l  %574 = tail call double @llvm.fma.f64(double %568, double %573, double\l... 0x3FE5555555555780)\l  %575 = tail call double @llvm.amdgcn.ldexp.f64(double %565, i32 1)\l  %576 = tail call double @llvm.amdgcn.ldexp.f64(double %567, i32 1)\l  %577 = fmul double %565, %568\l  %578 = fmul double %577, %574\l  %579 = fadd double %575, %578\l  %580 = fsub double %579, %575\l  %581 = fsub double %578, %580\l  %582 = fadd double %576, %581\l  %583 = fadd double %579, %582\l  %584 = fsub double %583, %579\l  %585 = fsub double %582, %584\l  %586 = sitofp i32 %540 to double\l  %587 = fmul double %586, 0x3FE62E42FEFA39EF\l  %588 = fneg double %587\l  %589 = tail call double @llvm.fma.f64(double %586, double\l... 0x3FE62E42FEFA39EF, double %588)\l  %590 = tail call double @llvm.fma.f64(double %586, double\l... 0x3C7ABC9E3B39803F, double %589)\l  %591 = fadd double %587, %590\l  %592 = fsub double %591, %587\l  %593 = fsub double %590, %592\l  %594 = fadd double %591, %583\l  %595 = fsub double %594, %591\l  %596 = fsub double %594, %595\l  %597 = fsub double %591, %596\l  %598 = fsub double %583, %595\l  %599 = fadd double %598, %597\l  %600 = fadd double %593, %585\l  %601 = fsub double %600, %593\l  %602 = fsub double %600, %601\l  %603 = fsub double %593, %602\l  %604 = fsub double %585, %601\l  %605 = fadd double %604, %603\l  %606 = fadd double %600, %599\l  %607 = fadd double %594, %606\l  %608 = fsub double %607, %594\l  %609 = fsub double %606, %608\l  %610 = fadd double %605, %609\l  %611 = fadd double %607, %610\l  %612 = tail call double @llvm.fabs.f64(double %534) #3\l  %613 = fcmp oeq double %612, 0x7FF0000000000000\l  %614 = select i1 %613, double %534, double %611\l  %615 = fcmp olt double %534, 0.000000e+00\l  %616 = select i1 %615, double 0x7FF8000000000000, double %614\l  %617 = fcmp oeq double %534, 0.000000e+00\l  %618 = select i1 %617, double 0xFFF0000000000000, double %616\l  %619 = fmul contract double %618, %532\l  %620 = fadd contract double %619, %530\l  br label %621\l}"];
	Node0x54fa6a0 -> Node0x54ed4e0;
	Node0x54ed4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%621:\l621:                                              \l  %622 = phi double [ %523, %504 ], [ %620, %524 ]\l  %623 = fptrunc double %622 to float\l  %624 = fsub contract float 1.000000e+00, %456\l  %625 = tail call i1 @llvm.amdgcn.class.f32(float %624, i32 144)\l  %626 = select i1 %625, float 0x41F0000000000000, float 1.000000e+00\l  %627 = fmul float %624, %626\l  %628 = tail call float @llvm.log2.f32(float %627)\l  %629 = fmul float %628, 0x3FE62E42E0000000\l  %630 = tail call i1 @llvm.amdgcn.class.f32(float %628, i32 519)\l  %631 = fneg float %629\l  %632 = tail call float @llvm.fma.f32(float %628, float 0x3FE62E42E0000000,\l... float %631)\l  %633 = tail call float @llvm.fma.f32(float %628, float 0x3E6EFA39E0000000,\l... float %632)\l  %634 = fadd float %629, %633\l  %635 = select i1 %630, float %628, float %634\l  %636 = select i1 %625, float 0x40362E4300000000, float 0.000000e+00\l  %637 = fsub float %635, %636\l  %638 = fcmp contract ugt float %637, %623\l  br i1 %638, label %641, label %639\l|{<s0>T|<s1>F}}"];
	Node0x54ed4e0:s0 -> Node0x54fa280;
	Node0x54ed4e0:s1 -> Node0x55028f0;
	Node0x55028f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%639:\l639:                                              \l  %640 = fmul contract float %434, %5\l  br label %875\l}"];
	Node0x55028f0 -> Node0x54e3e90;
	Node0x54fa280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%641:\l641:                                              \l  %642 = fpext float %494 to double\l  %643 = fadd contract float %351, %351\l  %644 = fpext float %643 to double\l  br label %645\l}"];
	Node0x54fa280 -> Node0x5502c60;
	Node0x5502c60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%645:\l645:                                              \l  %646 = phi i32 [ %452, %641 ], [ %685, %821 ]\l  %647 = phi i32 [ %450, %641 ], [ %684, %821 ]\l  %648 = phi i32 [ %445, %641 ], [ %658, %821 ]\l  %649 = phi i32 [ %444, %641 ], [ %647, %821 ]\l  %650 = phi i32 [ %443, %641 ], [ %648, %821 ]\l  %651 = phi i32 [ %442, %641 ], [ %649, %821 ]\l  %652 = lshr i32 %651, 2\l  %653 = xor i32 %652, %651\l  %654 = shl i32 %647, 4\l  %655 = shl i32 %653, 1\l  %656 = xor i32 %655, %654\l  %657 = xor i32 %656, %653\l  %658 = xor i32 %657, %647\l  %659 = add i32 %646, 362437\l  %660 = add i32 %659, %658\l  %661 = uitofp i32 %660 to float\l  %662 = fmul contract float %661, 0x3DF0000000000000\l  %663 = fadd contract float %662, 0x3DF0000000000000\l  %664 = tail call i1 @llvm.amdgcn.class.f32(float %663, i32 144)\l  %665 = select i1 %664, float 0x41F0000000000000, float 1.000000e+00\l  %666 = fmul float %663, %665\l  %667 = tail call float @llvm.log2.f32(float %666)\l  %668 = fmul float %667, 0x3FE62E42E0000000\l  %669 = tail call i1 @llvm.amdgcn.class.f32(float %667, i32 519)\l  %670 = fneg float %668\l  %671 = tail call float @llvm.fma.f32(float %667, float 0x3FE62E42E0000000,\l... float %670)\l  %672 = tail call float @llvm.fma.f32(float %667, float 0x3E6EFA39E0000000,\l... float %671)\l  %673 = fadd float %668, %672\l  %674 = select i1 %669, float %667, float %673\l  %675 = select i1 %664, float 0x40362E4300000000, float 0.000000e+00\l  %676 = fsub float %674, %675\l  %677 = fneg contract float %676\l  %678 = lshr i32 %650, 2\l  %679 = xor i32 %678, %650\l  %680 = shl i32 %658, 4\l  %681 = shl i32 %679, 1\l  %682 = xor i32 %681, %680\l  %683 = xor i32 %682, %679\l  %684 = xor i32 %683, %658\l  %685 = add i32 %646, 724874\l  %686 = add i32 %684, %685\l  %687 = uitofp i32 %686 to float\l  %688 = fmul contract float %687, 0x3DF0000000000000\l  %689 = fadd contract float %688, 0x3DF0000000000000\l  %690 = fadd contract float %689, %689\l  %691 = fadd contract float %690, -1.000000e+00\l  %692 = fcmp contract olt float %691, 0.000000e+00\l  %693 = select i1 %692, float %677, float %676\l  %694 = fmul contract float %496, %693\l  %695 = fsub contract float %495, %694\l  %696 = fpext float %695 to double\l  %697 = fcmp contract ult double %696, 0xBFE6FFF52C8540C9\l  br i1 %697, label %821, label %698\l|{<s0>T|<s1>F}}"];
	Node0x5502c60:s0 -> Node0x5502d20;
	Node0x5502c60:s1 -> Node0x5504ed0;
	Node0x5504ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%698:\l698:                                              \l  %699 = fdiv contract float %695, %499\l  %700 = tail call float @llvm.fabs.f32(float %699)\l  %701 = fcmp contract ugt float %700, 2.500000e-01\l  br i1 %701, label %722, label %702\l|{<s0>T|<s1>F}}"];
	Node0x5504ed0:s0 -> Node0x55051e0;
	Node0x5504ed0:s1 -> Node0x5505230;
	Node0x5505230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%702:\l702:                                              \l  %703 = fmul contract double %696, 5.000000e-01\l  %704 = fmul contract double %703, %696\l  %705 = fmul contract float %699, 0x3FBF95CC80000000\l  %706 = fadd contract float %705, 0xBFC17FF740000000\l  %707 = fmul contract float %699, %706\l  %708 = fadd contract float %707, 0x3FC2390A00000000\l  %709 = fmul contract float %699, %708\l  %710 = fadd contract float %709, 0xBFC5490F40000000\l  %711 = fmul contract float %699, %710\l  %712 = fadd contract float %711, 0x3FC999CDA0000000\l  %713 = fmul contract float %699, %712\l  %714 = fadd contract float %713, 0xBFD0000CA0000000\l  %715 = fmul contract float %699, %714\l  %716 = fadd contract float %715, 0x3FD5555540000000\l  %717 = fpext float %716 to double\l  %718 = fmul contract double %704, %717\l  %719 = fpext float %699 to double\l  %720 = fmul contract double %718, %719\l  %721 = fadd contract double %720, %642\l  br label %817\l}"];
	Node0x5505230 -> Node0x5505de0;
	Node0x55051e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%722:\l722:                                              \l  %723 = fmul contract float %350, %695\l  %724 = fsub contract float %494, %723\l  %725 = fpext float %724 to double\l  %726 = fmul contract double %696, 2.500000e-01\l  %727 = fmul contract double %726, %696\l  %728 = fadd contract double %727, %725\l  %729 = fpext float %699 to double\l  %730 = fadd contract double %729, 1.000000e+00\l  %731 = tail call double @llvm.amdgcn.frexp.mant.f64(double %730)\l  %732 = fcmp olt double %731, 0x3FE5555555555555\l  %733 = zext i1 %732 to i32\l  %734 = tail call double @llvm.amdgcn.ldexp.f64(double %731, i32 %733)\l  %735 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %730)\l  %736 = sub nsw i32 %735, %733\l  %737 = fadd double %734, -1.000000e+00\l  %738 = fadd double %734, 1.000000e+00\l  %739 = fadd double %738, -1.000000e+00\l  %740 = fsub double %734, %739\l  %741 = tail call double @llvm.amdgcn.rcp.f64(double %738)\l  %742 = fneg double %738\l  %743 = tail call double @llvm.fma.f64(double %742, double %741, double\l... 1.000000e+00)\l  %744 = tail call double @llvm.fma.f64(double %743, double %741, double %741)\l  %745 = tail call double @llvm.fma.f64(double %742, double %744, double\l... 1.000000e+00)\l  %746 = tail call double @llvm.fma.f64(double %745, double %744, double %744)\l  %747 = fmul double %737, %746\l  %748 = fmul double %738, %747\l  %749 = fneg double %748\l  %750 = tail call double @llvm.fma.f64(double %747, double %738, double %749)\l  %751 = tail call double @llvm.fma.f64(double %747, double %740, double %750)\l  %752 = fadd double %748, %751\l  %753 = fsub double %752, %748\l  %754 = fsub double %751, %753\l  %755 = fsub double %737, %752\l  %756 = fsub double %737, %755\l  %757 = fsub double %756, %752\l  %758 = fsub double %757, %754\l  %759 = fadd double %755, %758\l  %760 = fmul double %746, %759\l  %761 = fadd double %747, %760\l  %762 = fsub double %761, %747\l  %763 = fsub double %760, %762\l  %764 = fmul double %761, %761\l  %765 = tail call double @llvm.fma.f64(double %764, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %766 = tail call double @llvm.fma.f64(double %764, double %765, double\l... 0x3FC7474DD7F4DF2E)\l  %767 = tail call double @llvm.fma.f64(double %764, double %766, double\l... 0x3FCC71C016291751)\l  %768 = tail call double @llvm.fma.f64(double %764, double %767, double\l... 0x3FD249249B27ACF1)\l  %769 = tail call double @llvm.fma.f64(double %764, double %768, double\l... 0x3FD99999998EF7B6)\l  %770 = tail call double @llvm.fma.f64(double %764, double %769, double\l... 0x3FE5555555555780)\l  %771 = tail call double @llvm.amdgcn.ldexp.f64(double %761, i32 1)\l  %772 = tail call double @llvm.amdgcn.ldexp.f64(double %763, i32 1)\l  %773 = fmul double %761, %764\l  %774 = fmul double %773, %770\l  %775 = fadd double %771, %774\l  %776 = fsub double %775, %771\l  %777 = fsub double %774, %776\l  %778 = fadd double %772, %777\l  %779 = fadd double %775, %778\l  %780 = fsub double %779, %775\l  %781 = fsub double %778, %780\l  %782 = sitofp i32 %736 to double\l  %783 = fmul double %782, 0x3FE62E42FEFA39EF\l  %784 = fneg double %783\l  %785 = tail call double @llvm.fma.f64(double %782, double\l... 0x3FE62E42FEFA39EF, double %784)\l  %786 = tail call double @llvm.fma.f64(double %782, double\l... 0x3C7ABC9E3B39803F, double %785)\l  %787 = fadd double %783, %786\l  %788 = fsub double %787, %783\l  %789 = fsub double %786, %788\l  %790 = fadd double %787, %779\l  %791 = fsub double %790, %787\l  %792 = fsub double %790, %791\l  %793 = fsub double %787, %792\l  %794 = fsub double %779, %791\l  %795 = fadd double %794, %793\l  %796 = fadd double %789, %781\l  %797 = fsub double %796, %789\l  %798 = fsub double %796, %797\l  %799 = fsub double %789, %798\l  %800 = fsub double %781, %797\l  %801 = fadd double %800, %799\l  %802 = fadd double %796, %795\l  %803 = fadd double %790, %802\l  %804 = fsub double %803, %790\l  %805 = fsub double %802, %804\l  %806 = fadd double %801, %805\l  %807 = fadd double %803, %806\l  %808 = tail call double @llvm.fabs.f64(double %730) #3\l  %809 = fcmp oeq double %808, 0x7FF0000000000000\l  %810 = select i1 %809, double %730, double %807\l  %811 = fcmp olt double %730, 0.000000e+00\l  %812 = select i1 %811, double 0x7FF8000000000000, double %810\l  %813 = fcmp oeq double %730, 0.000000e+00\l  %814 = select i1 %813, double 0xFFF0000000000000, double %812\l  %815 = fmul contract double %814, %644\l  %816 = fadd contract double %728, %815\l  br label %817\l}"];
	Node0x55051e0 -> Node0x5505de0;
	Node0x5505de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%817:\l817:                                              \l  %818 = phi double [ %721, %702 ], [ %816, %722 ]\l  %819 = fptrunc double %818 to float\l  %820 = fcmp contract ogt float %819, 0.000000e+00\l  br i1 %820, label %822, label %821\l|{<s0>T|<s1>F}}"];
	Node0x5505de0:s0 -> Node0x550a130;
	Node0x5505de0:s1 -> Node0x5502d20;
	Node0x5502d20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%821:\l821:                                              \l  br label %645, !llvm.loop !29\l}"];
	Node0x5502d20 -> Node0x5502c60;
	Node0x550a130 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%822:\l822:                                              \l  %823 = fmul float %819, 0x3FF7154760000000\l  %824 = tail call float @llvm.rint.f32(float %823)\l  %825 = fneg float %824\l  %826 = tail call float @llvm.fma.f32(float %825, float 0x3FE62E4300000000,\l... float %819)\l  %827 = tail call float @llvm.fma.f32(float %825, float 0xBE205C6100000000,\l... float %826)\l  %828 = tail call float @llvm.fmuladd.f32(float %827, float\l... 0x3F2A267620000000, float 0x3F56D2E000000000)\l  %829 = tail call float @llvm.fmuladd.f32(float %827, float %828, float\l... 0x3F8110FF20000000)\l  %830 = tail call float @llvm.fmuladd.f32(float %827, float %829, float\l... 0x3FA5555020000000)\l  %831 = tail call float @llvm.fmuladd.f32(float %827, float %830, float\l... 0x3FC5555560000000)\l  %832 = tail call float @llvm.fmuladd.f32(float %827, float %831, float\l... 5.000000e-01)\l  %833 = fmul float %827, %832\l  %834 = tail call float @llvm.fma.f32(float %827, float %833, float %827)\l  %835 = fcmp oeq float %824, 1.280000e+02\l  %836 = fptosi float %824 to i32\l  %837 = select i1 %835, i32 127, i32 %836\l  %838 = tail call float @llvm.amdgcn.ldexp.f32(float 1.000000e+00, i32 %837)\l  %839 = fadd float %838, -1.000000e+00\l  %840 = tail call float @llvm.fma.f32(float %838, float %834, float %839)\l  %841 = fmul float %840, 2.000000e+00\l  %842 = select i1 %835, float %841, float %840\l  %843 = fcmp ogt float %819, 0x40562E42E0000000\l  %844 = select i1 %843, float 0x7FF0000000000000, float %842\l  %845 = fcmp olt float %819, -1.700000e+01\l  %846 = select i1 %845, float -1.000000e+00, float %844\l  %847 = tail call float @llvm.fabs.f32(float %691)\l  %848 = fmul contract float %497, %847\l  %849 = fpext float %677 to double\l  %850 = fmul contract double %696, 5.000000e-01\l  %851 = fmul contract double %850, %696\l  %852 = fsub contract double %849, %851\l  %853 = fptrunc double %852 to float\l  %854 = fmul float %853, 0x3FF7154760000000\l  %855 = tail call float @llvm.rint.f32(float %854)\l  %856 = fcmp ogt float %853, 0x40562E4300000000\l  %857 = fcmp olt float %853, 0xC059D1DA00000000\l  %858 = fneg float %854\l  %859 = tail call float @llvm.fma.f32(float %853, float 0x3FF7154760000000,\l... float %858)\l  %860 = tail call float @llvm.fma.f32(float %853, float 0x3E54AE0BE0000000,\l... float %859)\l  %861 = fsub float %854, %855\l  %862 = fadd float %860, %861\l  %863 = tail call float @llvm.exp2.f32(float %862)\l  %864 = fptosi float %855 to i32\l  %865 = tail call float @llvm.amdgcn.ldexp.f32(float %863, i32 %864)\l  %866 = select i1 %857, float 0.000000e+00, float %865\l  %867 = select i1 %856, float 0x7FF0000000000000, float %866\l  %868 = fmul contract float %867, %846\l  %869 = fcmp contract ugt float %848, %868\l  br i1 %869, label %821, label %870\l|{<s0>T|<s1>F}}"];
	Node0x550a130:s0 -> Node0x5502d20;
	Node0x550a130:s1 -> Node0x550cb10;
	Node0x550cb10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%870:\l870:                                              \l  store i32 %649, i32 addrspace(1)* %93, align 8, !tbaa !25\l  store i32 %648, i32 addrspace(1)* %94, align 4, !tbaa !25\l  store i32 %647, i32 addrspace(1)* %95, align 8, !tbaa !25\l  store i32 %658, i32 addrspace(1)* %96, align 4, !tbaa !25\l  store i32 %684, i32 addrspace(1)* %97, align 8, !tbaa !25\l  store i32 %685, i32 addrspace(1)* %98, align 8, !tbaa !26\l  %871 = fadd contract double %850, %429\l  %872 = fptrunc double %871 to float\l  %873 = fmul contract float %872, %5\l  %874 = fmul contract float %873, %872\l  br label %875\l}"];
	Node0x550cb10 -> Node0x54e3e90;
	Node0x54e3e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%875:\l875:                                              \l  %876 = phi float [ %874, %870 ], [ %640, %639 ], [ %462, %461 ], [ %437,\l... %436 ], [ %344, %342 ], [ 0.000000e+00, %130 ]\l  %877 = phi float [ %349, %870 ], [ %349, %639 ], [ %349, %461 ], [ %349,\l... %436 ], [ %129, %342 ], [ %129, %130 ]\l  %878 = phi float [ %493, %870 ], [ %493, %639 ], [ %128, %461 ], [ %128,\l... %436 ], [ %128, %342 ], [ %128, %130 ]\l  %879 = phi float [ %350, %870 ], [ %350, %639 ], [ %350, %461 ], [ %350,\l... %436 ], [ %127, %342 ], [ %127, %130 ]\l  %880 = phi float [ %351, %870 ], [ %351, %639 ], [ %351, %461 ], [ %351,\l... %436 ], [ %126, %342 ], [ %126, %130 ]\l  %881 = phi float [ %352, %870 ], [ %352, %639 ], [ %352, %461 ], [ %352,\l... %436 ], [ %125, %342 ], [ %125, %130 ]\l  %882 = phi float [ %494, %870 ], [ %494, %639 ], [ %124, %461 ], [ %124,\l... %436 ], [ %124, %342 ], [ %124, %130 ]\l  %883 = phi float [ %495, %870 ], [ %495, %639 ], [ %123, %461 ], [ %123,\l... %436 ], [ %123, %342 ], [ %123, %130 ]\l  %884 = phi float [ %496, %870 ], [ %496, %639 ], [ %122, %461 ], [ %122,\l... %436 ], [ %122, %342 ], [ %122, %130 ]\l  %885 = phi float [ %497, %870 ], [ %497, %639 ], [ %121, %461 ], [ %121,\l... %436 ], [ %121, %342 ], [ %121, %130 ]\l  %886 = add nsw i32 %120, %59\l  %887 = sext i32 %886 to i64\l  %888 = getelementptr inbounds float, float addrspace(1)* %2, i64 %887\l  store float %876, float addrspace(1)* %888, align 4, !tbaa !30\l  %889 = add nuw nsw i32 %120, 1\l  %890 = icmp eq i32 %889, %58\l  br i1 %890, label %891, label %119, !llvm.loop !31\l|{<s0>T|<s1>F}}"];
	Node0x54e3e90:s0 -> Node0x54df450;
	Node0x54e3e90:s1 -> Node0x54e3d60;
	Node0x54df450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%891:\l891:                                              \l  ret void\l}"];
}
