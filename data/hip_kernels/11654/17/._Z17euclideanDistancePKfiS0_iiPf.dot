digraph "CFG for '_Z17euclideanDistancePKfiS0_iiPf' function" {
	label="CFG for '_Z17euclideanDistancePKfiS0_iiPf' function";

	Node0x5042dd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %8 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %9 = icmp slt i32 %7, %1\l  %10 = icmp slt i32 %8, %3\l  %11 = select i1 %9, i1 %10, i1 false\l  br i1 %11, label %12, label %165\l|{<s0>T|<s1>F}}"];
	Node0x5042dd0:s0 -> Node0x5044bd0;
	Node0x5042dd0:s1 -> Node0x5044c60;
	Node0x5044bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%12:\l12:                                               \l  %13 = icmp sgt i32 %4, 0\l  br i1 %13, label %14, label %43\l|{<s0>T|<s1>F}}"];
	Node0x5044bd0:s0 -> Node0x5044e60;
	Node0x5044bd0:s1 -> Node0x5044eb0;
	Node0x5044e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%14:\l14:                                               \l  %15 = and i32 %4, 7\l  %16 = icmp ult i32 %4, 8\l  br i1 %16, label %19, label %17\l|{<s0>T|<s1>F}}"];
	Node0x5044e60:s0 -> Node0x5044360;
	Node0x5044e60:s1 -> Node0x5045280;
	Node0x5045280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%17:\l17:                                               \l  %18 = and i32 %4, -8\l  br label %70\l}"];
	Node0x5045280 -> Node0x5045440;
	Node0x5044360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%19:\l19:                                               \l  %20 = phi float [ undef, %14 ], [ %160, %70 ]\l  %21 = phi i32 [ %7, %14 ], [ %161, %70 ]\l  %22 = phi float [ 0.000000e+00, %14 ], [ %160, %70 ]\l  %23 = phi i32 [ %8, %14 ], [ %162, %70 ]\l  %24 = icmp eq i32 %15, 0\l  br i1 %24, label %43, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5044360:s0 -> Node0x5044eb0;
	Node0x5044360:s1 -> Node0x50467d0;
	Node0x50467d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%25:\l25:                                               \l  %26 = phi i32 [ %39, %25 ], [ %21, %19 ]\l  %27 = phi float [ %38, %25 ], [ %22, %19 ]\l  %28 = phi i32 [ %40, %25 ], [ %23, %19 ]\l  %29 = phi i32 [ %41, %25 ], [ 0, %19 ]\l  %30 = sext i32 %26 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %33 = sext i32 %28 to i64\l  %34 = getelementptr inbounds float, float addrspace(1)* %2, i64 %33\l  %35 = load float, float addrspace(1)* %34, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %36 = fsub contract float %32, %35\l  %37 = fmul contract float %36, %36\l  %38 = fadd contract float %27, %37\l  %39 = add nsw i32 %26, %1\l  %40 = add nsw i32 %28, %3\l  %41 = add i32 %29, 1\l  %42 = icmp eq i32 %41, %15\l  br i1 %42, label %43, label %25, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x50467d0:s0 -> Node0x5044eb0;
	Node0x50467d0:s1 -> Node0x50467d0;
	Node0x5044eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%43:\l43:                                               \l  %44 = phi float [ 0.000000e+00, %12 ], [ %20, %19 ], [ %38, %25 ]\l  %45 = fcmp olt float %44, 0x39F0000000000000\l  %46 = select i1 %45, float 0x41F0000000000000, float 1.000000e+00\l  %47 = fmul float %44, %46\l  %48 = tail call float @llvm.sqrt.f32(float %47)\l  %49 = bitcast float %48 to i32\l  %50 = add nsw i32 %49, -1\l  %51 = bitcast i32 %50 to float\l  %52 = add nsw i32 %49, 1\l  %53 = bitcast i32 %52 to float\l  %54 = tail call i1 @llvm.amdgcn.class.f32(float %47, i32 608)\l  %55 = select i1 %45, float 0x3EF0000000000000, float 1.000000e+00\l  %56 = fneg float %53\l  %57 = tail call float @llvm.fma.f32(float %56, float %48, float %47)\l  %58 = fcmp ogt float %57, 0.000000e+00\l  %59 = fneg float %51\l  %60 = tail call float @llvm.fma.f32(float %59, float %48, float %47)\l  %61 = fcmp ole float %60, 0.000000e+00\l  %62 = select i1 %61, float %51, float %48\l  %63 = select i1 %58, float %53, float %62\l  %64 = fmul float %55, %63\l  %65 = select i1 %54, float %47, float %64\l  %66 = mul nsw i32 %8, %1\l  %67 = add nsw i32 %66, %7\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %5, i64 %68\l  store float %65, float addrspace(1)* %69, align 4, !tbaa !5\l  br label %165\l}"];
	Node0x5044eb0 -> Node0x5044c60;
	Node0x5045440 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%70:\l70:                                               \l  %71 = phi i32 [ %7, %17 ], [ %161, %70 ]\l  %72 = phi float [ 0.000000e+00, %17 ], [ %160, %70 ]\l  %73 = phi i32 [ %8, %17 ], [ %162, %70 ]\l  %74 = phi i32 [ 0, %17 ], [ %163, %70 ]\l  %75 = sext i32 %71 to i64\l  %76 = getelementptr inbounds float, float addrspace(1)* %0, i64 %75\l  %77 = load float, float addrspace(1)* %76, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %78 = sext i32 %73 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %2, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %81 = fsub contract float %77, %80\l  %82 = fmul contract float %81, %81\l  %83 = fadd contract float %72, %82\l  %84 = add nsw i32 %71, %1\l  %85 = add nsw i32 %73, %3\l  %86 = sext i32 %84 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %0, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %89 = sext i32 %85 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %2, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %92 = fsub contract float %88, %91\l  %93 = fmul contract float %92, %92\l  %94 = fadd contract float %83, %93\l  %95 = add nsw i32 %84, %1\l  %96 = add nsw i32 %85, %3\l  %97 = sext i32 %95 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %100 = sext i32 %96 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %2, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %103 = fsub contract float %99, %102\l  %104 = fmul contract float %103, %103\l  %105 = fadd contract float %94, %104\l  %106 = add nsw i32 %95, %1\l  %107 = add nsw i32 %96, %3\l  %108 = sext i32 %106 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %111 = sext i32 %107 to i64\l  %112 = getelementptr inbounds float, float addrspace(1)* %2, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %114 = fsub contract float %110, %113\l  %115 = fmul contract float %114, %114\l  %116 = fadd contract float %105, %115\l  %117 = add nsw i32 %106, %1\l  %118 = add nsw i32 %107, %3\l  %119 = sext i32 %117 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %122 = sext i32 %118 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %2, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %125 = fsub contract float %121, %124\l  %126 = fmul contract float %125, %125\l  %127 = fadd contract float %116, %126\l  %128 = add nsw i32 %117, %1\l  %129 = add nsw i32 %118, %3\l  %130 = sext i32 %128 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %133 = sext i32 %129 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %2, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %136 = fsub contract float %132, %135\l  %137 = fmul contract float %136, %136\l  %138 = fadd contract float %127, %137\l  %139 = add nsw i32 %128, %1\l  %140 = add nsw i32 %129, %3\l  %141 = sext i32 %139 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %144 = sext i32 %140 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %2, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %147 = fsub contract float %143, %146\l  %148 = fmul contract float %147, %147\l  %149 = fadd contract float %138, %148\l  %150 = add nsw i32 %139, %1\l  %151 = add nsw i32 %140, %3\l  %152 = sext i32 %150 to i64\l  %153 = getelementptr inbounds float, float addrspace(1)* %0, i64 %152\l  %154 = load float, float addrspace(1)* %153, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %155 = sext i32 %151 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %2, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %158 = fsub contract float %154, %157\l  %159 = fmul contract float %158, %158\l  %160 = fadd contract float %149, %159\l  %161 = add nsw i32 %150, %1\l  %162 = add nsw i32 %151, %3\l  %163 = add i32 %74, 8\l  %164 = icmp eq i32 %163, %18\l  br i1 %164, label %19, label %70, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5045440:s0 -> Node0x5044360;
	Node0x5045440:s1 -> Node0x5045440;
	Node0x5044c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%165:\l165:                                              \l  ret void\l}"];
}
