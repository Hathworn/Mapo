digraph "CFG for '_ZL17resizeBatchKernelPKtiiPtii' function" {
	label="CFG for '_ZL17resizeBatchKernelPKtiiPtii' function";

	Node0x5787640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = sdiv i32 %2, %5\l  switch i32 %24, label %365 [\l    i32 4, label %25\l    i32 6, label %163\l    i32 2, label %221\l  ]\l|{<s0>def|<s1>4|<s2>6|<s3>2}}"];
	Node0x5787640:s0 -> Node0x578af20;
	Node0x5787640:s1 -> Node0x578afe0;
	Node0x5787640:s2 -> Node0x578b0a0;
	Node0x5787640:s3 -> Node0x578b160;
	Node0x578afe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%25:\l25:                                               \l  %26 = sdiv i32 %4, 6\l  %27 = icmp slt i32 %15, %26\l  %28 = icmp slt i32 %23, %5\l  %29 = select i1 %27, i1 %28, i1 false\l  br i1 %29, label %30, label %365\l|{<s0>T|<s1>F}}"];
	Node0x578afe0:s0 -> Node0x578b5e0;
	Node0x578afe0:s1 -> Node0x578af20;
	Node0x578b5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %23, %1\l  %32 = shl nsw i32 %31, 2\l  %33 = shl nsw i32 %15, 5\l  %34 = add nsw i32 %32, %33\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %35\l  %37 = load i16, i16 addrspace(1)* %36, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %38 = zext i16 %37 to i32\l  %39 = or i32 %34, 1\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %40\l  %42 = load i16, i16 addrspace(1)* %41, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %43 = zext i16 %42 to i32\l  %44 = shl nuw i32 %43, 16\l  %45 = or i32 %44, %38\l  %46 = add nsw i32 %34, 6\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %47\l  %49 = load i16, i16 addrspace(1)* %48, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %50 = lshr i16 %42, 4\l  %51 = and i16 %50, 1023\l  %52 = lshr i32 %45, 10\l  %53 = and i16 %37, 1023\l  %54 = and i16 %49, 1023\l  %55 = add nsw i32 %34, 10\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %56\l  %58 = load i16, i16 addrspace(1)* %57, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %59 = zext i16 %58 to i32\l  %60 = add nsw i32 %34, 11\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %61\l  %63 = load i16, i16 addrspace(1)* %62, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %64 = zext i16 %63 to i32\l  %65 = shl nuw i32 %64, 16\l  %66 = or i32 %65, %59\l  %67 = add nsw i32 %34, 12\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %68\l  %70 = load i16, i16 addrspace(1)* %69, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %71 = lshr i16 %63, 4\l  %72 = and i16 %71, 1023\l  %73 = lshr i32 %66, 10\l  %74 = and i16 %70, 1023\l  %75 = add nsw i32 %34, 16\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %76\l  %78 = load i16, i16 addrspace(1)* %77, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %79 = zext i16 %78 to i32\l  %80 = add nsw i32 %34, 17\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %81\l  %83 = load i16, i16 addrspace(1)* %82, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %84 = zext i16 %83 to i32\l  %85 = shl nuw i32 %84, 16\l  %86 = or i32 %85, %79\l  %87 = add nsw i32 %34, 21\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %88\l  %90 = load i16, i16 addrspace(1)* %89, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %91 = add nsw i32 %34, 22\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %92\l  %94 = load i16, i16 addrspace(1)* %93, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %95 = zext i16 %94 to i32\l  %96 = add nsw i32 %34, 23\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %97\l  %99 = load i16, i16 addrspace(1)* %98, align 2, !tbaa !7, !amdgpu.noclobber\l... !5\l  %100 = zext i16 %99 to i32\l  %101 = shl nuw i32 %100, 16\l  %102 = or i32 %101, %95\l  %103 = lshr i32 %86, 10\l  %104 = lshr i16 %90, 4\l  %105 = and i16 %104, 1023\l  %106 = lshr i32 %102, 10\l  %107 = and i16 %94, 1023\l  %108 = add nsw i32 %34, 27\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %109\l  %111 = load i16, i16 addrspace(1)* %110, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = lshr i16 %111, 4\l  %113 = and i16 %112, 1023\l  %114 = mul nsw i32 %15, 6\l  %115 = mul nsw i32 %23, %4\l  %116 = trunc i32 %52 to i16\l  %117 = and i16 %116, 1023\l  %118 = add nsw i32 %115, %114\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %119\l  store i16 %117, i16 addrspace(1)* %120, align 2, !tbaa !7\l  %121 = add nsw i32 %118, 1\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %122\l  store i16 %54, i16 addrspace(1)* %123, align 2, !tbaa !7\l  %124 = add nsw i32 %118, 2\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %125\l  store i16 %72, i16 addrspace(1)* %126, align 2, !tbaa !7\l  %127 = trunc i32 %103 to i16\l  %128 = and i16 %127, 1023\l  %129 = add nsw i32 %118, 3\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %130\l  store i16 %128, i16 addrspace(1)* %131, align 2, !tbaa !7\l  %132 = add nsw i32 %118, 4\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %133\l  store i16 %107, i16 addrspace(1)* %134, align 2, !tbaa !7\l  %135 = add nsw i32 %118, 5\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %136\l  store i16 %113, i16 addrspace(1)* %137, align 2, !tbaa !7\l  %138 = mul nsw i32 %15, 3\l  %139 = sdiv i32 %115, 2\l  %140 = mul nsw i32 %5, %4\l  %141 = add i32 %139, %138\l  %142 = add i32 %141, %140\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %143\l  store i16 %53, i16 addrspace(1)* %144, align 2, !tbaa !7\l  %145 = trunc i32 %73 to i16\l  %146 = and i16 %145, 1023\l  %147 = add nsw i32 %142, 1\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %148\l  store i16 %146, i16 addrspace(1)* %149, align 2, !tbaa !7\l  %150 = add nsw i32 %142, 2\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %151\l  store i16 %105, i16 addrspace(1)* %152, align 2, !tbaa !7\l  %153 = mul nsw i32 %140, 3\l  %154 = sdiv i32 %153, 2\l  %155 = add i32 %141, %154\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %156\l  store i16 %51, i16 addrspace(1)* %157, align 2, !tbaa !7\l  %158 = add nsw i32 %155, 1\l  %159 = sext i32 %158 to i64\l  %160 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %159\l  store i16 %74, i16 addrspace(1)* %160, align 2, !tbaa !7\l  %161 = trunc i32 %106 to i16\l  %162 = add nsw i32 %155, 2\l  br label %359\l}"];
	Node0x578b5e0 -> Node0x5791730;
	Node0x578b0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%163:\l163:                                              \l  %164 = sdiv i32 %4, 2\l  %165 = icmp slt i32 %15, %164\l  %166 = icmp slt i32 %23, %5\l  %167 = select i1 %165, i1 %166, i1 false\l  br i1 %167, label %168, label %365\l|{<s0>T|<s1>F}}"];
	Node0x578b0a0:s0 -> Node0x5791a90;
	Node0x578b0a0:s1 -> Node0x578af20;
	Node0x5791a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%168:\l168:                                              \l  %169 = mul nsw i32 %23, %1\l  %170 = mul nsw i32 %169, 6\l  %171 = shl nsw i32 %15, 4\l  %172 = add nsw i32 %170, %171\l  %173 = sext i32 %172 to i64\l  %174 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %173\l  %175 = load i16, i16 addrspace(1)* %174, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %176 = zext i16 %175 to i32\l  %177 = or i32 %172, 1\l  %178 = sext i32 %177 to i64\l  %179 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %178\l  %180 = load i16, i16 addrspace(1)* %179, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %181 = zext i16 %180 to i32\l  %182 = shl nuw i32 %181, 16\l  %183 = or i32 %182, %176\l  %184 = lshr i16 %180, 4\l  %185 = lshr i32 %183, 10\l  %186 = and i16 %175, 1023\l  %187 = add nsw i32 %172, 8\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %188\l  %190 = load i16, i16 addrspace(1)* %189, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %191 = zext i16 %190 to i32\l  %192 = add nsw i32 %172, 9\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %193\l  %195 = load i16, i16 addrspace(1)* %194, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %196 = zext i16 %195 to i32\l  %197 = shl nuw i32 %196, 16\l  %198 = or i32 %197, %191\l  %199 = lshr i32 %198, 10\l  %200 = shl nsw i32 %15, 1\l  %201 = mul nsw i32 %23, %4\l  %202 = trunc i32 %185 to i16\l  %203 = and i16 %202, 1023\l  %204 = add nsw i32 %201, %200\l  %205 = sext i32 %204 to i64\l  %206 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %205\l  store i16 %203, i16 addrspace(1)* %206, align 2, !tbaa !7\l  %207 = trunc i32 %199 to i16\l  %208 = and i16 %207, 1023\l  %209 = add nsw i32 %204, 1\l  %210 = sext i32 %209 to i64\l  %211 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %210\l  store i16 %208, i16 addrspace(1)* %211, align 2, !tbaa !7\l  %212 = sdiv i32 %201, 2\l  %213 = mul nsw i32 %5, %4\l  %214 = add i32 %212, %15\l  %215 = add i32 %214, %213\l  %216 = sext i32 %215 to i64\l  %217 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %216\l  store i16 %186, i16 addrspace(1)* %217, align 2, !tbaa !7\l  %218 = mul nsw i32 %213, 3\l  %219 = sdiv i32 %218, 2\l  %220 = add i32 %214, %219\l  br label %359\l}"];
	Node0x5791a90 -> Node0x5791730;
	Node0x578b160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%221:\l221:                                              \l  %222 = sdiv i32 %4, 6\l  %223 = icmp slt i32 %15, %222\l  %224 = icmp slt i32 %23, %5\l  %225 = select i1 %223, i1 %224, i1 false\l  br i1 %225, label %226, label %365\l|{<s0>T|<s1>F}}"];
	Node0x578b160:s0 -> Node0x5793cc0;
	Node0x578b160:s1 -> Node0x578af20;
	Node0x5793cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%226:\l226:                                              \l  %227 = mul nsw i32 %23, %1\l  %228 = shl nsw i32 %227, 1\l  %229 = shl nsw i32 %15, 4\l  %230 = add nsw i32 %228, %229\l  %231 = sext i32 %230 to i64\l  %232 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %231\l  %233 = load i16, i16 addrspace(1)* %232, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %234 = zext i16 %233 to i32\l  %235 = or i32 %230, 1\l  %236 = sext i32 %235 to i64\l  %237 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %236\l  %238 = load i16, i16 addrspace(1)* %237, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %239 = zext i16 %238 to i32\l  %240 = shl nuw i32 %239, 16\l  %241 = or i32 %240, %234\l  %242 = add nsw i32 %230, 3\l  %243 = sext i32 %242 to i64\l  %244 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %243\l  %245 = load i16, i16 addrspace(1)* %244, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %246 = add nsw i32 %230, 5\l  %247 = sext i32 %246 to i64\l  %248 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %247\l  %249 = load i16, i16 addrspace(1)* %248, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %250 = add nsw i32 %230, 6\l  %251 = sext i32 %250 to i64\l  %252 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %251\l  %253 = load i16, i16 addrspace(1)* %252, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %254 = zext i16 %253 to i32\l  %255 = add nsw i32 %230, 7\l  %256 = sext i32 %255 to i64\l  %257 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %256\l  %258 = load i16, i16 addrspace(1)* %257, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %259 = zext i16 %258 to i32\l  %260 = shl nuw i32 %259, 16\l  %261 = or i32 %260, %254\l  %262 = lshr i16 %238, 4\l  %263 = and i16 %262, 1023\l  %264 = lshr i32 %241, 10\l  %265 = and i16 %233, 1023\l  %266 = lshr i16 %245, 4\l  %267 = and i16 %266, 1023\l  %268 = lshr i16 %249, 4\l  %269 = and i16 %268, 1023\l  %270 = lshr i32 %261, 10\l  %271 = and i16 %253, 1023\l  %272 = add nsw i32 %230, 8\l  %273 = sext i32 %272 to i64\l  %274 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %273\l  %275 = load i16, i16 addrspace(1)* %274, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %276 = zext i16 %275 to i32\l  %277 = add nsw i32 %230, 9\l  %278 = sext i32 %277 to i64\l  %279 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %278\l  %280 = load i16, i16 addrspace(1)* %279, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %281 = zext i16 %280 to i32\l  %282 = shl nuw i32 %281, 16\l  %283 = or i32 %282, %276\l  %284 = add nsw i32 %230, 10\l  %285 = sext i32 %284 to i64\l  %286 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %285\l  %287 = load i16, i16 addrspace(1)* %286, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %288 = zext i16 %287 to i32\l  %289 = add nsw i32 %230, 11\l  %290 = sext i32 %289 to i64\l  %291 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %290\l  %292 = load i16, i16 addrspace(1)* %291, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %293 = zext i16 %292 to i32\l  %294 = shl nuw i32 %293, 16\l  %295 = or i32 %294, %288\l  %296 = add nsw i32 %230, 12\l  %297 = sext i32 %296 to i64\l  %298 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %297\l  %299 = load i16, i16 addrspace(1)* %298, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %300 = add nsw i32 %230, 14\l  %301 = sext i32 %300 to i64\l  %302 = getelementptr inbounds i16, i16 addrspace(1)* %0, i64 %301\l  %303 = load i16, i16 addrspace(1)* %302, align 2, !tbaa !7,\l... !amdgpu.noclobber !5\l  %304 = lshr i32 %283, 10\l  %305 = lshr i16 %292, 4\l  %306 = and i16 %305, 1023\l  %307 = lshr i32 %295, 10\l  %308 = and i16 %303, 1023\l  %309 = mul nsw i32 %15, 6\l  %310 = mul nsw i32 %23, %4\l  %311 = trunc i32 %264 to i16\l  %312 = and i16 %311, 1023\l  %313 = add nsw i32 %310, %309\l  %314 = sext i32 %313 to i64\l  %315 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %314\l  store i16 %312, i16 addrspace(1)* %315, align 2, !tbaa !7\l  %316 = add nsw i32 %313, 1\l  %317 = sext i32 %316 to i64\l  %318 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %317\l  store i16 %267, i16 addrspace(1)* %318, align 2, !tbaa !7\l  %319 = add nsw i32 %313, 2\l  %320 = sext i32 %319 to i64\l  %321 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %320\l  store i16 %271, i16 addrspace(1)* %321, align 2, !tbaa !7\l  %322 = trunc i32 %304 to i16\l  %323 = and i16 %322, 1023\l  %324 = add nsw i32 %313, 3\l  %325 = sext i32 %324 to i64\l  %326 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %325\l  store i16 %323, i16 addrspace(1)* %326, align 2, !tbaa !7\l  %327 = add nsw i32 %313, 4\l  %328 = sext i32 %327 to i64\l  %329 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %328\l  store i16 %306, i16 addrspace(1)* %329, align 2, !tbaa !7\l  %330 = add nsw i32 %313, 5\l  %331 = sext i32 %330 to i64\l  %332 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %331\l  store i16 %308, i16 addrspace(1)* %332, align 2, !tbaa !7\l  %333 = mul nsw i32 %15, 3\l  %334 = sdiv i32 %310, 2\l  %335 = mul nsw i32 %5, %4\l  %336 = add i32 %334, %333\l  %337 = add i32 %336, %335\l  %338 = sext i32 %337 to i64\l  %339 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %338\l  store i16 %265, i16 addrspace(1)* %339, align 2, !tbaa !7\l  %340 = add nsw i32 %337, 1\l  %341 = sext i32 %340 to i64\l  %342 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %341\l  store i16 %269, i16 addrspace(1)* %342, align 2, !tbaa !7\l  %343 = trunc i32 %307 to i16\l  %344 = and i16 %343, 1023\l  %345 = add nsw i32 %337, 2\l  %346 = sext i32 %345 to i64\l  %347 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %346\l  store i16 %344, i16 addrspace(1)* %347, align 2, !tbaa !7\l  %348 = mul nsw i32 %335, 3\l  %349 = sdiv i32 %348, 2\l  %350 = add i32 %336, %349\l  %351 = sext i32 %350 to i64\l  %352 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %351\l  store i16 %263, i16 addrspace(1)* %352, align 2, !tbaa !7\l  %353 = trunc i32 %270 to i16\l  %354 = and i16 %353, 1023\l  %355 = add nsw i32 %350, 1\l  %356 = sext i32 %355 to i64\l  %357 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %356\l  store i16 %354, i16 addrspace(1)* %357, align 2, !tbaa !7\l  %358 = add nsw i32 %350, 2\l  br label %359\l}"];
	Node0x5793cc0 -> Node0x5791730;
	Node0x5791730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%359:\l359:                                              \l  %360 = phi i32 [ %358, %226 ], [ %220, %168 ], [ %162, %30 ]\l  %361 = phi i16 [ %299, %226 ], [ %184, %168 ], [ %161, %30 ]\l  %362 = and i16 %361, 1023\l  %363 = sext i32 %360 to i64\l  %364 = getelementptr inbounds i16, i16 addrspace(1)* %3, i64 %363\l  store i16 %362, i16 addrspace(1)* %364, align 2, !tbaa !7\l  br label %365\l}"];
	Node0x5791730 -> Node0x578af20;
	Node0x578af20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%365:\l365:                                              \l  ret void\l}"];
}
