digraph "CFG for '_Z24CorrelateDataSubtract_1diiiiiiiiiiiiiiiiPKfS0_Pf' function" {
	label="CFG for '_Z24CorrelateDataSubtract_1diiiiiiiiiiiiiiiiPKfS0_Pf' function";

	Node0x6236510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%19:\l  %20 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %21 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %22 = getelementptr i8, i8 addrspace(4)* %21, i64 4\l  %23 = bitcast i8 addrspace(4)* %22 to i16 addrspace(4)*\l  %24 = load i16, i16 addrspace(4)* %23, align 4, !range !4, !invariant.load !5\l  %25 = zext i16 %24 to i32\l  %26 = getelementptr inbounds i8, i8 addrspace(4)* %21, i64 12\l  %27 = bitcast i8 addrspace(4)* %26 to i32 addrspace(4)*\l  %28 = load i32, i32 addrspace(4)* %27, align 4, !tbaa !6\l  %29 = mul i32 %20, %25\l  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %31 = add i32 %29, %30\l  %32 = icmp slt i32 %31, %0\l  br i1 %32, label %33, label %57\l|{<s0>T|<s1>F}}"];
	Node0x6236510:s0 -> Node0x6237c50;
	Node0x6236510:s1 -> Node0x6237ce0;
	Node0x6237c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6a8bef70",label="{%33:\l33:                                               \l  %34 = add i32 %10, %7\l  %35 = sub i32 0, %10\l  %36 = icmp slt i32 %10, 0\l  %37 = icmp sgt i32 %15, 0\l  %38 = mul nsw i32 %14, %2\l  %39 = add i32 %38, %10\l  %40 = shl nsw i32 %10, 1\l  %41 = add nuw nsw i32 %40, 1\l  %42 = mul nsw i32 %41, %41\l  %43 = mul nsw i32 %42, %15\l  %44 = sitofp i32 %43 to float\l  %45 = mul nsw i32 %6, %2\l  %46 = udiv i32 %28, %25\l  %47 = mul i32 %46, %25\l  %48 = icmp ugt i32 %28, %47\l  %49 = zext i1 %48 to i32\l  %50 = add i32 %46, %49\l  %51 = mul i32 %50, %25\l  %52 = tail call i32 @llvm.abs.i32(i32 %10, i1 false)\l  %53 = and i32 %15, 7\l  %54 = icmp ult i32 %15, 8\l  %55 = and i32 %15, -8\l  %56 = icmp eq i32 %53, 0\l  br label %58\l}"];
	Node0x6237c50 -> Node0x623bdc0;
	Node0x6237ce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7a9df870",label="{%57:\l57:                                               \l  ret void\l}"];
	Node0x623bdc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%58:\l58:                                               \l  %59 = phi i32 [ %31, %33 ], [ %91, %85 ]\l  %60 = freeze i32 %59\l  %61 = freeze i32 %3\l  %62 = sdiv i32 %60, %61\l  %63 = mul i32 %62, %61\l  %64 = sub i32 %60, %63\l  %65 = freeze i32 %4\l  %66 = sdiv i32 %62, %65\l  %67 = srem i32 %66, %5\l  %68 = srem i32 %67, %9\l  %69 = add nsw i32 %68, %8\l  %70 = mul nsw i32 %69, %12\l  %71 = mul nsw i32 %64, %11\l  %72 = add i32 %34, %71\l  br i1 %36, label %85, label %73\l|{<s0>T|<s1>F}}"];
	Node0x623bdc0:s0 -> Node0x623bf40;
	Node0x623bdc0:s1 -> Node0x623ad80;
	Node0x623ad80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%73:\l73:                                               \l  %74 = mul i32 %66, %65\l  %75 = sub i32 %62, %74\l  %76 = mul nsw i32 %75, %11\l  %77 = add i32 %39, %76\l  br label %78\l}"];
	Node0x623ad80 -> Node0x623cce0;
	Node0x623cce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%78:\l78:                                               \l  %79 = phi float [ 0.000000e+00, %73 ], [ %127, %101 ]\l  %80 = phi i32 [ %35, %73 ], [ %102, %101 ]\l  %81 = add i32 %77, %80\l  %82 = mul nsw i32 %81, %13\l  %83 = add i32 %82, %72\l  %84 = add i32 %83, %70\l  br label %93\l}"];
	Node0x623cce0 -> Node0x623dc90;
	Node0x623bf40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bbd1f870",label="{%85:\l85:                                               \l  %86 = phi float [ 0.000000e+00, %58 ], [ %127, %101 ]\l  %87 = fdiv contract float %86, %44\l  %88 = add nsw i32 %59, %45\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %18, i64 %89\l  store float %87, float addrspace(1)* %90, align 4, !tbaa !16\l  %91 = add i32 %51, %59\l  %92 = icmp slt i32 %91, %0\l  br i1 %92, label %58, label %57, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x623bf40:s0 -> Node0x623bdc0;
	Node0x623bf40:s1 -> Node0x6237ce0;
	Node0x623dc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%93:\l93:                                               \l  %94 = phi float [ %79, %78 ], [ %127, %126 ]\l  %95 = phi i32 [ %35, %78 ], [ %128, %126 ]\l  br i1 %37, label %96, label %126\l|{<s0>T|<s1>F}}"];
	Node0x623dc90:s0 -> Node0x623e720;
	Node0x623dc90:s1 -> Node0x623e530;
	Node0x623e720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%96:\l96:                                               \l  %97 = add nsw i32 %83, %95\l  %98 = mul nsw i32 %97, %15\l  %99 = add i32 %84, %95\l  %100 = mul nsw i32 %99, %15\l  br i1 %54, label %104, label %130\l|{<s0>T|<s1>F}}"];
	Node0x623e720:s0 -> Node0x623eaa0;
	Node0x623e720:s1 -> Node0x623eaf0;
	Node0x623d7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%101:\l101:                                              \l  %102 = add i32 %80, 1\l  %103 = icmp eq i32 %80, %52\l  br i1 %103, label %85, label %78, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x623d7f0:s0 -> Node0x623bf40;
	Node0x623d7f0:s1 -> Node0x623cce0;
	Node0x623eaa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%104:\l104:                                              \l  %105 = phi float [ undef, %96 ], [ %228, %130 ]\l  %106 = phi float [ %94, %96 ], [ %228, %130 ]\l  %107 = phi i32 [ 0, %96 ], [ %229, %130 ]\l  br i1 %56, label %126, label %108\l|{<s0>T|<s1>F}}"];
	Node0x623eaa0:s0 -> Node0x623e530;
	Node0x623eaa0:s1 -> Node0x623f520;
	Node0x623f520 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%108:\l108:                                              \l  %109 = phi float [ %122, %108 ], [ %106, %104 ]\l  %110 = phi i32 [ %123, %108 ], [ %107, %104 ]\l  %111 = phi i32 [ %124, %108 ], [ 0, %104 ]\l  %112 = add nsw i32 %110, %98\l  %113 = add nsw i32 %110, %100\l  %114 = sext i32 %112 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %16, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !16\l  %117 = sext i32 %113 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %17, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = fsub contract float %116, %119\l  %121 = tail call float @llvm.fabs.f32(float %120)\l  %122 = fadd contract float %109, %121\l  %123 = add nuw nsw i32 %110, 1\l  %124 = add i32 %111, 1\l  %125 = icmp eq i32 %124, %53\l  br i1 %125, label %126, label %108, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x623f520:s0 -> Node0x623e530;
	Node0x623f520:s1 -> Node0x623f520;
	Node0x623e530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%126:\l126:                                              \l  %127 = phi float [ %94, %93 ], [ %105, %104 ], [ %122, %108 ]\l  %128 = add i32 %95, 1\l  %129 = icmp eq i32 %95, %52\l  br i1 %129, label %101, label %93, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x623e530:s0 -> Node0x623d7f0;
	Node0x623e530:s1 -> Node0x623dc90;
	Node0x623eaf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%130:\l130:                                              \l  %131 = phi float [ %228, %130 ], [ %94, %96 ]\l  %132 = phi i32 [ %229, %130 ], [ 0, %96 ]\l  %133 = phi i32 [ %230, %130 ], [ 0, %96 ]\l  %134 = add nsw i32 %132, %98\l  %135 = add nsw i32 %132, %100\l  %136 = sext i32 %134 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %16, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !16\l  %139 = sext i32 %135 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %17, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !16\l  %142 = fsub contract float %138, %141\l  %143 = tail call float @llvm.fabs.f32(float %142)\l  %144 = fadd contract float %131, %143\l  %145 = or i32 %132, 1\l  %146 = add nsw i32 %145, %98\l  %147 = add nsw i32 %145, %100\l  %148 = sext i32 %146 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %16, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !16\l  %151 = sext i32 %147 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %17, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !16\l  %154 = fsub contract float %150, %153\l  %155 = tail call float @llvm.fabs.f32(float %154)\l  %156 = fadd contract float %144, %155\l  %157 = or i32 %132, 2\l  %158 = add nsw i32 %157, %98\l  %159 = add nsw i32 %157, %100\l  %160 = sext i32 %158 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %16, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !16\l  %163 = sext i32 %159 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %17, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !16\l  %166 = fsub contract float %162, %165\l  %167 = tail call float @llvm.fabs.f32(float %166)\l  %168 = fadd contract float %156, %167\l  %169 = or i32 %132, 3\l  %170 = add nsw i32 %169, %98\l  %171 = add nsw i32 %169, %100\l  %172 = sext i32 %170 to i64\l  %173 = getelementptr inbounds float, float addrspace(1)* %16, i64 %172\l  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !16\l  %175 = sext i32 %171 to i64\l  %176 = getelementptr inbounds float, float addrspace(1)* %17, i64 %175\l  %177 = load float, float addrspace(1)* %176, align 4, !tbaa !16\l  %178 = fsub contract float %174, %177\l  %179 = tail call float @llvm.fabs.f32(float %178)\l  %180 = fadd contract float %168, %179\l  %181 = or i32 %132, 4\l  %182 = add nsw i32 %181, %98\l  %183 = add nsw i32 %181, %100\l  %184 = sext i32 %182 to i64\l  %185 = getelementptr inbounds float, float addrspace(1)* %16, i64 %184\l  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !16\l  %187 = sext i32 %183 to i64\l  %188 = getelementptr inbounds float, float addrspace(1)* %17, i64 %187\l  %189 = load float, float addrspace(1)* %188, align 4, !tbaa !16\l  %190 = fsub contract float %186, %189\l  %191 = tail call float @llvm.fabs.f32(float %190)\l  %192 = fadd contract float %180, %191\l  %193 = or i32 %132, 5\l  %194 = add nsw i32 %193, %98\l  %195 = add nsw i32 %193, %100\l  %196 = sext i32 %194 to i64\l  %197 = getelementptr inbounds float, float addrspace(1)* %16, i64 %196\l  %198 = load float, float addrspace(1)* %197, align 4, !tbaa !16\l  %199 = sext i32 %195 to i64\l  %200 = getelementptr inbounds float, float addrspace(1)* %17, i64 %199\l  %201 = load float, float addrspace(1)* %200, align 4, !tbaa !16\l  %202 = fsub contract float %198, %201\l  %203 = tail call float @llvm.fabs.f32(float %202)\l  %204 = fadd contract float %192, %203\l  %205 = or i32 %132, 6\l  %206 = add nsw i32 %205, %98\l  %207 = add nsw i32 %205, %100\l  %208 = sext i32 %206 to i64\l  %209 = getelementptr inbounds float, float addrspace(1)* %16, i64 %208\l  %210 = load float, float addrspace(1)* %209, align 4, !tbaa !16\l  %211 = sext i32 %207 to i64\l  %212 = getelementptr inbounds float, float addrspace(1)* %17, i64 %211\l  %213 = load float, float addrspace(1)* %212, align 4, !tbaa !16\l  %214 = fsub contract float %210, %213\l  %215 = tail call float @llvm.fabs.f32(float %214)\l  %216 = fadd contract float %204, %215\l  %217 = or i32 %132, 7\l  %218 = add nsw i32 %217, %98\l  %219 = add nsw i32 %217, %100\l  %220 = sext i32 %218 to i64\l  %221 = getelementptr inbounds float, float addrspace(1)* %16, i64 %220\l  %222 = load float, float addrspace(1)* %221, align 4, !tbaa !16\l  %223 = sext i32 %219 to i64\l  %224 = getelementptr inbounds float, float addrspace(1)* %17, i64 %223\l  %225 = load float, float addrspace(1)* %224, align 4, !tbaa !16\l  %226 = fsub contract float %222, %225\l  %227 = tail call float @llvm.fabs.f32(float %226)\l  %228 = fadd contract float %216, %227\l  %229 = add nuw nsw i32 %132, 8\l  %230 = add i32 %133, 8\l  %231 = icmp eq i32 %230, %55\l  br i1 %231, label %104, label %130, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x623eaf0:s0 -> Node0x623eaa0;
	Node0x623eaf0:s1 -> Node0x623eaf0;
}
