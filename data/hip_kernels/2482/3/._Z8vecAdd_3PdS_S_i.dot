digraph "CFG for '_Z8vecAdd_3PdS_S_i' function" {
	label="CFG for '_Z8vecAdd_3PdS_S_i' function";

	Node0x610c3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %6 = icmp sgt i32 %3, 0\l  br i1 %6, label %7, label %30\l|{<s0>T|<s1>F}}"];
	Node0x610c3a0:s0 -> Node0x610d7f0;
	Node0x610c3a0:s1 -> Node0x610d880;
	Node0x610d7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%7:\l7:                                                \l  %8 = and i32 %3, 7\l  %9 = icmp ult i32 %3, 8\l  br i1 %9, label %12, label %10\l|{<s0>T|<s1>F}}"];
	Node0x610d7f0:s0 -> Node0x610c3f0;
	Node0x610d7f0:s1 -> Node0x610dbd0;
	Node0x610dbd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%10:\l10:                                               \l  %11 = and i32 %3, -8\l  br label %31\l}"];
	Node0x610dbd0 -> Node0x610ddd0;
	Node0x610c3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%12:\l12:                                               \l  %13 = phi i32 [ 0, %7 ], [ %113, %31 ]\l  %14 = icmp eq i32 %8, 0\l  br i1 %14, label %30, label %15\l|{<s0>T|<s1>F}}"];
	Node0x610c3f0:s0 -> Node0x610d880;
	Node0x610c3f0:s1 -> Node0x610e000;
	Node0x610e000 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%15:\l15:                                               \l  %16 = phi i32 [ %27, %15 ], [ %13, %12 ]\l  %17 = phi i32 [ %28, %15 ], [ 0, %12 ]\l  %18 = mul nsw i32 %16, %3\l  %19 = add nsw i32 %18, %5\l  %20 = sext i32 %19 to i64\l  %21 = getelementptr inbounds double, double addrspace(1)* %0, i64 %20\l  %22 = load double, double addrspace(1)* %21, align 8, !tbaa !5\l  %23 = getelementptr inbounds double, double addrspace(1)* %1, i64 %20\l  %24 = load double, double addrspace(1)* %23, align 8, !tbaa !5\l  %25 = fadd contract double %22, %24\l  %26 = getelementptr inbounds double, double addrspace(1)* %2, i64 %20\l  store double %25, double addrspace(1)* %26, align 8, !tbaa !5\l  %27 = add nuw nsw i32 %16, 1\l  %28 = add i32 %17, 1\l  %29 = icmp eq i32 %28, %8\l  br i1 %29, label %30, label %15, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x610e000:s0 -> Node0x610d880;
	Node0x610e000:s1 -> Node0x610e000;
	Node0x610d880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%30:\l30:                                               \l  ret void\l}"];
	Node0x610ddd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%31:\l31:                                               \l  %32 = phi i32 [ 0, %10 ], [ %113, %31 ]\l  %33 = phi i32 [ 0, %10 ], [ %114, %31 ]\l  %34 = mul nsw i32 %32, %3\l  %35 = add nsw i32 %34, %5\l  %36 = sext i32 %35 to i64\l  %37 = getelementptr inbounds double, double addrspace(1)* %0, i64 %36\l  %38 = load double, double addrspace(1)* %37, align 8, !tbaa !5\l  %39 = getelementptr inbounds double, double addrspace(1)* %1, i64 %36\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !5\l  %41 = fadd contract double %38, %40\l  %42 = getelementptr inbounds double, double addrspace(1)* %2, i64 %36\l  store double %41, double addrspace(1)* %42, align 8, !tbaa !5\l  %43 = or i32 %32, 1\l  %44 = mul nsw i32 %43, %3\l  %45 = add nsw i32 %44, %5\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds double, double addrspace(1)* %0, i64 %46\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !5\l  %49 = getelementptr inbounds double, double addrspace(1)* %1, i64 %46\l  %50 = load double, double addrspace(1)* %49, align 8, !tbaa !5\l  %51 = fadd contract double %48, %50\l  %52 = getelementptr inbounds double, double addrspace(1)* %2, i64 %46\l  store double %51, double addrspace(1)* %52, align 8, !tbaa !5\l  %53 = or i32 %32, 2\l  %54 = mul nsw i32 %53, %3\l  %55 = add nsw i32 %54, %5\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds double, double addrspace(1)* %0, i64 %56\l  %58 = load double, double addrspace(1)* %57, align 8, !tbaa !5\l  %59 = getelementptr inbounds double, double addrspace(1)* %1, i64 %56\l  %60 = load double, double addrspace(1)* %59, align 8, !tbaa !5\l  %61 = fadd contract double %58, %60\l  %62 = getelementptr inbounds double, double addrspace(1)* %2, i64 %56\l  store double %61, double addrspace(1)* %62, align 8, !tbaa !5\l  %63 = or i32 %32, 3\l  %64 = mul nsw i32 %63, %3\l  %65 = add nsw i32 %64, %5\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds double, double addrspace(1)* %0, i64 %66\l  %68 = load double, double addrspace(1)* %67, align 8, !tbaa !5\l  %69 = getelementptr inbounds double, double addrspace(1)* %1, i64 %66\l  %70 = load double, double addrspace(1)* %69, align 8, !tbaa !5\l  %71 = fadd contract double %68, %70\l  %72 = getelementptr inbounds double, double addrspace(1)* %2, i64 %66\l  store double %71, double addrspace(1)* %72, align 8, !tbaa !5\l  %73 = or i32 %32, 4\l  %74 = mul nsw i32 %73, %3\l  %75 = add nsw i32 %74, %5\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds double, double addrspace(1)* %0, i64 %76\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !5\l  %79 = getelementptr inbounds double, double addrspace(1)* %1, i64 %76\l  %80 = load double, double addrspace(1)* %79, align 8, !tbaa !5\l  %81 = fadd contract double %78, %80\l  %82 = getelementptr inbounds double, double addrspace(1)* %2, i64 %76\l  store double %81, double addrspace(1)* %82, align 8, !tbaa !5\l  %83 = or i32 %32, 5\l  %84 = mul nsw i32 %83, %3\l  %85 = add nsw i32 %84, %5\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds double, double addrspace(1)* %0, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !5\l  %89 = getelementptr inbounds double, double addrspace(1)* %1, i64 %86\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !5\l  %91 = fadd contract double %88, %90\l  %92 = getelementptr inbounds double, double addrspace(1)* %2, i64 %86\l  store double %91, double addrspace(1)* %92, align 8, !tbaa !5\l  %93 = or i32 %32, 6\l  %94 = mul nsw i32 %93, %3\l  %95 = add nsw i32 %94, %5\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds double, double addrspace(1)* %0, i64 %96\l  %98 = load double, double addrspace(1)* %97, align 8, !tbaa !5\l  %99 = getelementptr inbounds double, double addrspace(1)* %1, i64 %96\l  %100 = load double, double addrspace(1)* %99, align 8, !tbaa !5\l  %101 = fadd contract double %98, %100\l  %102 = getelementptr inbounds double, double addrspace(1)* %2, i64 %96\l  store double %101, double addrspace(1)* %102, align 8, !tbaa !5\l  %103 = or i32 %32, 7\l  %104 = mul nsw i32 %103, %3\l  %105 = add nsw i32 %104, %5\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds double, double addrspace(1)* %0, i64 %106\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !5\l  %109 = getelementptr inbounds double, double addrspace(1)* %1, i64 %106\l  %110 = load double, double addrspace(1)* %109, align 8, !tbaa !5\l  %111 = fadd contract double %108, %110\l  %112 = getelementptr inbounds double, double addrspace(1)* %2, i64 %106\l  store double %111, double addrspace(1)* %112, align 8, !tbaa !5\l  %113 = add nuw nsw i32 %32, 8\l  %114 = add i32 %33, 8\l  %115 = icmp eq i32 %114, %11\l  br i1 %115, label %12, label %31, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x610ddd0:s0 -> Node0x610c3f0;
	Node0x610ddd0:s1 -> Node0x610ddd0;
}
