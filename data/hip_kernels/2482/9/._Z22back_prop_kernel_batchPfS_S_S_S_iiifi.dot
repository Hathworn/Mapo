digraph "CFG for '_Z22back_prop_kernel_batchPfS_S_S_S_iiifi' function" {
	label="CFG for '_Z22back_prop_kernel_batchPfS_S_S_S_iiifi' function";

	Node0x58e2e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%10:\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = freeze i32 %12\l  %14 = freeze i32 %6\l  %15 = udiv i32 %13, %14\l  %16 = mul i32 %15, %14\l  %17 = sub i32 %13, %16\l  %18 = icmp eq i32 %11, 0\l  %19 = icmp slt i32 %17, %6\l  %20 = select i1 %18, i1 %19, i1 false\l  %21 = icmp sgt i32 %7, 0\l  %22 = select i1 %20, i1 %21, i1 false\l  br i1 %22, label %23, label %150\l|{<s0>T|<s1>F}}"];
	Node0x58e2e10:s0 -> Node0x58e50b0;
	Node0x58e2e10:s1 -> Node0x58e5140;
	Node0x58e50b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%23:\l23:                                               \l  %24 = load float, float addrspace(3)*\l... @_ZZ22back_prop_kernel_batchPfS_S_S_S_iiifiE11weightedSum.0, align 4, !tbaa !5\l  %25 = mul nsw i32 %17, %7\l  %26 = add nuw nsw i32 %7, 1\l  %27 = mul nsw i32 %15, %26\l  %28 = and i32 %7, 7\l  %29 = icmp ult i32 %7, 8\l  br i1 %29, label %126, label %30\l|{<s0>T|<s1>F}}"];
	Node0x58e50b0:s0 -> Node0x58e5810;
	Node0x58e50b0:s1 -> Node0x58e58a0;
	Node0x58e58a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%30:\l30:                                               \l  %31 = and i32 %7, -8\l  br label %32\l}"];
	Node0x58e58a0 -> Node0x58e5aa0;
	Node0x58e5aa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%32:\l32:                                               \l  %33 = phi i32 [ 0, %30 ], [ %123, %32 ]\l  %34 = phi float [ %24, %30 ], [ %122, %32 ]\l  %35 = phi i32 [ 0, %30 ], [ %124, %32 ]\l  %36 = add nsw i32 %33, %25\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds float, float addrspace(1)* %3, i64 %37\l  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %40 = add nsw i32 %33, %27\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds float, float addrspace(1)* %4, i64 %41\l  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %44 = fmul contract float %39, %43\l  %45 = fadd contract float %34, %44\l  %46 = or i32 %33, 1\l  %47 = add nsw i32 %46, %25\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %3, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %51 = add nsw i32 %46, %27\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %4, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %55 = fmul contract float %50, %54\l  %56 = fadd contract float %45, %55\l  %57 = or i32 %33, 2\l  %58 = add nsw i32 %57, %25\l  %59 = sext i32 %58 to i64\l  %60 = getelementptr inbounds float, float addrspace(1)* %3, i64 %59\l  %61 = load float, float addrspace(1)* %60, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %62 = add nsw i32 %57, %27\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %4, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %66 = fmul contract float %61, %65\l  %67 = fadd contract float %56, %66\l  %68 = or i32 %33, 3\l  %69 = add nsw i32 %68, %25\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %3, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %73 = add nsw i32 %68, %27\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %4, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %77 = fmul contract float %72, %76\l  %78 = fadd contract float %67, %77\l  %79 = or i32 %33, 4\l  %80 = add nsw i32 %79, %25\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %3, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %84 = add nsw i32 %79, %27\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %4, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %88 = fmul contract float %83, %87\l  %89 = fadd contract float %78, %88\l  %90 = or i32 %33, 5\l  %91 = add nsw i32 %90, %25\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %3, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %95 = add nsw i32 %90, %27\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %4, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %99 = fmul contract float %94, %98\l  %100 = fadd contract float %89, %99\l  %101 = or i32 %33, 6\l  %102 = add nsw i32 %101, %25\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %3, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %106 = add nsw i32 %101, %27\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %4, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %110 = fmul contract float %105, %109\l  %111 = fadd contract float %100, %110\l  %112 = or i32 %33, 7\l  %113 = add nsw i32 %112, %25\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %3, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %117 = add nsw i32 %112, %27\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %4, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %121 = fmul contract float %116, %120\l  %122 = fadd contract float %111, %121\l  %123 = add nuw nsw i32 %33, 8\l  %124 = add i32 %35, 8\l  %125 = icmp eq i32 %124, %31\l  br i1 %125, label %126, label %32, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x58e5aa0:s0 -> Node0x58e5810;
	Node0x58e5aa0:s1 -> Node0x58e5aa0;
	Node0x58e5810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%126:\l126:                                              \l  %127 = phi float [ undef, %23 ], [ %122, %32 ]\l  %128 = phi i32 [ 0, %23 ], [ %123, %32 ]\l  %129 = phi float [ %24, %23 ], [ %122, %32 ]\l  %130 = icmp eq i32 %28, 0\l  br i1 %130, label %148, label %131\l|{<s0>T|<s1>F}}"];
	Node0x58e5810:s0 -> Node0x58e7f00;
	Node0x58e5810:s1 -> Node0x58e7f50;
	Node0x58e7f50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%131:\l131:                                              \l  %132 = phi i32 [ %145, %131 ], [ %128, %126 ]\l  %133 = phi float [ %144, %131 ], [ %129, %126 ]\l  %134 = phi i32 [ %146, %131 ], [ 0, %126 ]\l  %135 = add nsw i32 %132, %25\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %3, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %139 = add nsw i32 %132, %27\l  %140 = sext i32 %139 to i64\l  %141 = getelementptr inbounds float, float addrspace(1)* %4, i64 %140\l  %142 = load float, float addrspace(1)* %141, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %143 = fmul contract float %138, %142\l  %144 = fadd contract float %133, %143\l  %145 = add nuw nsw i32 %132, 1\l  %146 = add i32 %134, 1\l  %147 = icmp eq i32 %146, %28\l  br i1 %147, label %148, label %131, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x58e7f50:s0 -> Node0x58e7f00;
	Node0x58e7f50:s1 -> Node0x58e7f50;
	Node0x58e7f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%148:\l148:                                              \l  %149 = phi float [ %127, %126 ], [ %144, %131 ]\l  store float %149, float addrspace(3)*\l... @_ZZ22back_prop_kernel_batchPfS_S_S_S_iiifiE11weightedSum.0, align 4, !tbaa !5\l  br label %150\l}"];
	Node0x58e7f00 -> Node0x58e5140;
	Node0x58e5140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%150:\l150:                                              \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %151 = icmp slt i32 %11, %5\l  br i1 %151, label %152, label %176\l|{<s0>T|<s1>F}}"];
	Node0x58e5140:s0 -> Node0x58ebcc0;
	Node0x58e5140:s1 -> Node0x58ebd10;
	Node0x58ebcc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%152:\l152:                                              \l  %153 = add nuw nsw i32 %5, 1\l  %154 = mul nsw i32 %15, %153\l  %155 = add nsw i32 %154, %11\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %159 = fmul contract float %158, %8\l  %160 = add nsw i32 %6, 1\l  %161 = mul nsw i32 %15, %160\l  %162 = add nsw i32 %161, %17\l  %163 = sext i32 %162 to i64\l  %164 = getelementptr inbounds float, float addrspace(1)* %2, i64 %163\l  %165 = load float, float addrspace(1)* %164, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %166 = fmul contract float %159, %165\l  %167 = fsub contract float 1.000000e+00, %165\l  %168 = fmul contract float %166, %167\l  %169 = load float, float addrspace(3)*\l... @_ZZ22back_prop_kernel_batchPfS_S_S_S_iiifiE11weightedSum.0, align 4, !tbaa !5\l  %170 = fmul contract float %169, %168\l  %171 = mul nsw i32 %11, %6\l  %172 = add nsw i32 %17, %171\l  %173 = sext i32 %172 to i64\l  %174 = getelementptr inbounds float, float addrspace(1)* %0, i64 %173\l  %175 = atomicrmw fadd float addrspace(1)* %174, float %170\l... syncscope(\"agent-one-as\") monotonic, align 4\l  br label %176\l}"];
	Node0x58ebcc0 -> Node0x58ebd10;
	Node0x58ebd10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%176:\l176:                                              \l  ret void\l}"];
}
