digraph "CFG for '_Z29_mean_variance_forward_kernelPfiiiS_S_' function" {
	label="CFG for '_Z29_mean_variance_forward_kernelPfiiiS_S_' function";

	Node0x6455520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%6:\l  %7 = mul nsw i32 %3, %1\l  %8 = sitofp i32 %7 to float\l  %9 = fdiv contract float 1.000000e+00, %8\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %12 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %12, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !4\l  %16 = getelementptr i8, i8 addrspace(4)* %12, i64 4\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 4, !range !13, !invariant.load\l... !14\l  %19 = zext i16 %18 to i32\l  %20 = udiv i32 %15, %19\l  %21 = mul i32 %20, %19\l  %22 = icmp ugt i32 %15, %21\l  %23 = zext i1 %22 to i32\l  %24 = add i32 %20, %23\l  %25 = mul i32 %24, %11\l  %26 = add i32 %25, %10\l  %27 = mul i32 %26, %19\l  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %29 = add i32 %27, %28\l  %30 = icmp slt i32 %29, %2\l  br i1 %30, label %31, label %172\l|{<s0>T|<s1>F}}"];
	Node0x6455520:s0 -> Node0x6458980;
	Node0x6455520:s1 -> Node0x6458a10;
	Node0x6458980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%31:\l31:                                               \l  %32 = sext i32 %29 to i64\l  %33 = getelementptr inbounds float, float addrspace(1)* %4, i64 %32\l  store float 0.000000e+00, float addrspace(1)* %33, align 4, !tbaa !16\l  %34 = icmp sgt i32 %1, 0\l  br i1 %34, label %35, label %164\l|{<s0>T|<s1>F}}"];
	Node0x6458980:s0 -> Node0x6458ff0;
	Node0x6458980:s1 -> Node0x6459080;
	Node0x6458ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%35:\l35:                                               \l  %36 = icmp sgt i32 %3, 0\l  %37 = getelementptr inbounds float, float addrspace(1)* %5, i64 %32\l  %38 = and i32 %3, 7\l  %39 = icmp ult i32 %3, 8\l  %40 = and i32 %3, -8\l  %41 = icmp eq i32 %38, 0\l  br label %42\l}"];
	Node0x6458ff0 -> Node0x6459590;
	Node0x6459590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%42:\l42:                                               \l  %43 = phi i32 [ 0, %35 ], [ %160, %159 ]\l  br i1 %36, label %44, label %159\l|{<s0>T|<s1>F}}"];
	Node0x6459590:s0 -> Node0x64597c0;
	Node0x6459590:s1 -> Node0x6459680;
	Node0x64597c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = mul nsw i32 %43, %2\l  %46 = add i32 %45, %29\l  %47 = mul i32 %46, %3\l  br i1 %39, label %141, label %48\l|{<s0>T|<s1>F}}"];
	Node0x64597c0:s0 -> Node0x6459ab0;
	Node0x64597c0:s1 -> Node0x6459b00;
	Node0x6459b00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%48:\l48:                                               \l  %49 = phi i32 [ %138, %48 ], [ 0, %44 ]\l  %50 = phi i32 [ %139, %48 ], [ 0, %44 ]\l  %51 = add nsw i32 %49, %47\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds float, float addrspace(1)* %0, i64 %52\l  %54 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %55 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %56 = fadd contract float %54, %55\l  store float %56, float addrspace(1)* %33, align 4, !tbaa !16\l  %57 = load float, float addrspace(1)* %53, align 4, !tbaa !16\l  %58 = fmul contract float %57, %57\l  %59 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %60 = fadd contract float %59, %58\l  store float %60, float addrspace(1)* %37, align 4, !tbaa !16\l  %61 = or i32 %49, 1\l  %62 = add nsw i32 %61, %47\l  %63 = sext i32 %62 to i64\l  %64 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63\l  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !16\l  %66 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %67 = fadd contract float %65, %66\l  store float %67, float addrspace(1)* %33, align 4, !tbaa !16\l  %68 = load float, float addrspace(1)* %64, align 4, !tbaa !16\l  %69 = fmul contract float %68, %68\l  %70 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %71 = fadd contract float %70, %69\l  store float %71, float addrspace(1)* %37, align 4, !tbaa !16\l  %72 = or i32 %49, 2\l  %73 = add nsw i32 %72, %47\l  %74 = sext i32 %73 to i64\l  %75 = getelementptr inbounds float, float addrspace(1)* %0, i64 %74\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16\l  %77 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %78 = fadd contract float %76, %77\l  store float %78, float addrspace(1)* %33, align 4, !tbaa !16\l  %79 = load float, float addrspace(1)* %75, align 4, !tbaa !16\l  %80 = fmul contract float %79, %79\l  %81 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %82 = fadd contract float %81, %80\l  store float %82, float addrspace(1)* %37, align 4, !tbaa !16\l  %83 = or i32 %49, 3\l  %84 = add nsw i32 %83, %47\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !16\l  %88 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %89 = fadd contract float %87, %88\l  store float %89, float addrspace(1)* %33, align 4, !tbaa !16\l  %90 = load float, float addrspace(1)* %86, align 4, !tbaa !16\l  %91 = fmul contract float %90, %90\l  %92 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %93 = fadd contract float %92, %91\l  store float %93, float addrspace(1)* %37, align 4, !tbaa !16\l  %94 = or i32 %49, 4\l  %95 = add nsw i32 %94, %47\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !16\l  %99 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %100 = fadd contract float %98, %99\l  store float %100, float addrspace(1)* %33, align 4, !tbaa !16\l  %101 = load float, float addrspace(1)* %97, align 4, !tbaa !16\l  %102 = fmul contract float %101, %101\l  %103 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %104 = fadd contract float %103, %102\l  store float %104, float addrspace(1)* %37, align 4, !tbaa !16\l  %105 = or i32 %49, 5\l  %106 = add nsw i32 %105, %47\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !16\l  %110 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %111 = fadd contract float %109, %110\l  store float %111, float addrspace(1)* %33, align 4, !tbaa !16\l  %112 = load float, float addrspace(1)* %108, align 4, !tbaa !16\l  %113 = fmul contract float %112, %112\l  %114 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %115 = fadd contract float %114, %113\l  store float %115, float addrspace(1)* %37, align 4, !tbaa !16\l  %116 = or i32 %49, 6\l  %117 = add nsw i32 %116, %47\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %0, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !16\l  %121 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %122 = fadd contract float %120, %121\l  store float %122, float addrspace(1)* %33, align 4, !tbaa !16\l  %123 = load float, float addrspace(1)* %119, align 4, !tbaa !16\l  %124 = fmul contract float %123, %123\l  %125 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %126 = fadd contract float %125, %124\l  store float %126, float addrspace(1)* %37, align 4, !tbaa !16\l  %127 = or i32 %49, 7\l  %128 = add nsw i32 %127, %47\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %132 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %133 = fadd contract float %131, %132\l  store float %133, float addrspace(1)* %33, align 4, !tbaa !16\l  %134 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %135 = fmul contract float %134, %134\l  %136 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %137 = fadd contract float %136, %135\l  store float %137, float addrspace(1)* %37, align 4, !tbaa !16\l  %138 = add nuw nsw i32 %49, 8\l  %139 = add i32 %50, 8\l  %140 = icmp eq i32 %139, %40\l  br i1 %140, label %141, label %48, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x6459b00:s0 -> Node0x6459ab0;
	Node0x6459b00:s1 -> Node0x6459b00;
	Node0x6459ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%141:\l141:                                              \l  %142 = phi i32 [ 0, %44 ], [ %138, %48 ]\l  br i1 %41, label %159, label %143\l|{<s0>T|<s1>F}}"];
	Node0x6459ab0:s0 -> Node0x6459680;
	Node0x6459ab0:s1 -> Node0x645a5b0;
	Node0x645a5b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%143:\l143:                                              \l  %144 = phi i32 [ %156, %143 ], [ %142, %141 ]\l  %145 = phi i32 [ %157, %143 ], [ 0, %141 ]\l  %146 = add nsw i32 %144, %47\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %0, i64 %147\l  %149 = load float, float addrspace(1)* %148, align 4, !tbaa !16\l  %150 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %151 = fadd contract float %149, %150\l  store float %151, float addrspace(1)* %33, align 4, !tbaa !16\l  %152 = load float, float addrspace(1)* %148, align 4, !tbaa !16\l  %153 = fmul contract float %152, %152\l  %154 = load float, float addrspace(1)* %37, align 4, !tbaa !16\l  %155 = fadd contract float %154, %153\l  store float %155, float addrspace(1)* %37, align 4, !tbaa !16\l  %156 = add nuw nsw i32 %144, 1\l  %157 = add i32 %145, 1\l  %158 = icmp eq i32 %157, %38\l  br i1 %158, label %159, label %143, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x645a5b0:s0 -> Node0x6459680;
	Node0x645a5b0:s1 -> Node0x645a5b0;
	Node0x6459680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%159:\l159:                                              \l  %160 = add nuw nsw i32 %43, 1\l  %161 = icmp eq i32 %160, %1\l  br i1 %161, label %162, label %42, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x6459680:s0 -> Node0x64601f0;
	Node0x6459680:s1 -> Node0x6459590;
	Node0x64601f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%162:\l162:                                              \l  %163 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  br label %164\l}"];
	Node0x64601f0 -> Node0x6459080;
	Node0x6459080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%164:\l164:                                              \l  %165 = phi float [ %163, %162 ], [ 0.000000e+00, %31 ]\l  %166 = fmul contract float %9, %165\l  store float %166, float addrspace(1)* %33, align 4, !tbaa !16\l  %167 = getelementptr inbounds float, float addrspace(1)* %5, i64 %32\l  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !16\l  %169 = fmul contract float %9, %168\l  %170 = fmul contract float %166, %166\l  %171 = fsub contract float %169, %170\l  store float %171, float addrspace(1)* %167, align 4, !tbaa !16\l  br label %172\l}"];
	Node0x6459080 -> Node0x6458a10;
	Node0x6458a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%172:\l172:                                              \l  ret void\l}"];
}
