digraph "CFG for '_Z10matrixMultPiS_S_i' function" {
	label="CFG for '_Z10matrixMultPiS_S_i' function";

	Node0x49018a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %3, 0\l  %23 = mul nsw i32 %13, %3\l  br i1 %22, label %24, label %51\l|{<s0>T|<s1>F}}"];
	Node0x49018a0:s0 -> Node0x4905290;
	Node0x49018a0:s1 -> Node0x4905320;
	Node0x4905290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = mul nsw i32 %21, %3\l  %26 = and i32 %3, 7\l  %27 = icmp ult i32 %3, 8\l  br i1 %27, label %30, label %28\l|{<s0>T|<s1>F}}"];
	Node0x4905290:s0 -> Node0x4905670;
	Node0x4905290:s1 -> Node0x49056c0;
	Node0x49056c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%28:\l28:                                               \l  %29 = and i32 %3, -8\l  br label %56\l}"];
	Node0x49056c0 -> Node0x49058c0;
	Node0x4905670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = phi i32 [ 0, %24 ], [ %147, %56 ]\l  %32 = phi i32 [ undef, %24 ], [ %146, %56 ]\l  %33 = icmp eq i32 %26, 0\l  br i1 %33, label %51, label %34\l|{<s0>T|<s1>F}}"];
	Node0x4905670:s0 -> Node0x4905320;
	Node0x4905670:s1 -> Node0x4903aa0;
	Node0x4903aa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi i32 [ %48, %34 ], [ %31, %30 ]\l  %36 = phi i32 [ %47, %34 ], [ %32, %30 ]\l  %37 = phi i32 [ %49, %34 ], [ 0, %30 ]\l  %38 = add nsw i32 %35, %23\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %39\l  %41 = load i32, i32 addrspace(1)* %40, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %42 = add nsw i32 %35, %25\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %43\l  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %46 = mul nsw i32 %45, %41\l  %47 = add nsw i32 %46, %36\l  %48 = add nuw nsw i32 %35, 1\l  %49 = add i32 %37, 1\l  %50 = icmp eq i32 %49, %26\l  br i1 %50, label %51, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4903aa0:s0 -> Node0x4905320;
	Node0x4903aa0:s1 -> Node0x4903aa0;
	Node0x4905320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%51:\l51:                                               \l  %52 = phi i32 [ undef, %4 ], [ %32, %30 ], [ %47, %34 ]\l  %53 = add nsw i32 %23, %21\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %54\l  store i32 %52, i32 addrspace(1)* %55, align 4, !tbaa !7\l  ret void\l}"];
	Node0x49058c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%56:\l56:                                               \l  %57 = phi i32 [ 0, %28 ], [ %147, %56 ]\l  %58 = phi i32 [ undef, %28 ], [ %146, %56 ]\l  %59 = phi i32 [ 0, %28 ], [ %148, %56 ]\l  %60 = add nsw i32 %57, %23\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %61\l  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %64 = add nsw i32 %57, %25\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %65\l  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %68 = mul nsw i32 %67, %63\l  %69 = add nsw i32 %68, %58\l  %70 = or i32 %57, 1\l  %71 = add nsw i32 %70, %23\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %72\l  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %75 = add nsw i32 %70, %25\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %76\l  %78 = load i32, i32 addrspace(1)* %77, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %79 = mul nsw i32 %78, %74\l  %80 = add nsw i32 %79, %69\l  %81 = or i32 %57, 2\l  %82 = add nsw i32 %81, %23\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %83\l  %85 = load i32, i32 addrspace(1)* %84, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %86 = add nsw i32 %81, %25\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %87\l  %89 = load i32, i32 addrspace(1)* %88, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %90 = mul nsw i32 %89, %85\l  %91 = add nsw i32 %90, %80\l  %92 = or i32 %57, 3\l  %93 = add nsw i32 %92, %23\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %94\l  %96 = load i32, i32 addrspace(1)* %95, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %97 = add nsw i32 %92, %25\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %98\l  %100 = load i32, i32 addrspace(1)* %99, align 4, !tbaa !7, !amdgpu.noclobber\l... !5\l  %101 = mul nsw i32 %100, %96\l  %102 = add nsw i32 %101, %91\l  %103 = or i32 %57, 4\l  %104 = add nsw i32 %103, %23\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %105\l  %107 = load i32, i32 addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = add nsw i32 %103, %25\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %109\l  %111 = load i32, i32 addrspace(1)* %110, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = mul nsw i32 %111, %107\l  %113 = add nsw i32 %112, %102\l  %114 = or i32 %57, 5\l  %115 = add nsw i32 %114, %23\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %116\l  %118 = load i32, i32 addrspace(1)* %117, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %119 = add nsw i32 %114, %25\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %120\l  %122 = load i32, i32 addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = mul nsw i32 %122, %118\l  %124 = add nsw i32 %123, %113\l  %125 = or i32 %57, 6\l  %126 = add nsw i32 %125, %23\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %127\l  %129 = load i32, i32 addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = add nsw i32 %125, %25\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %131\l  %133 = load i32, i32 addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = mul nsw i32 %133, %129\l  %135 = add nsw i32 %134, %124\l  %136 = or i32 %57, 7\l  %137 = add nsw i32 %136, %23\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %138\l  %140 = load i32, i32 addrspace(1)* %139, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %141 = add nsw i32 %136, %25\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %142\l  %144 = load i32, i32 addrspace(1)* %143, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = mul nsw i32 %144, %140\l  %146 = add nsw i32 %145, %135\l  %147 = add nuw nsw i32 %57, 8\l  %148 = add i32 %59, 8\l  %149 = icmp eq i32 %148, %29\l  br i1 %149, label %30, label %56, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x49058c0:s0 -> Node0x4905670;
	Node0x49058c0:s1 -> Node0x49058c0;
}
