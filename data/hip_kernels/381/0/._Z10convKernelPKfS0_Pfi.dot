digraph "CFG for '_Z10convKernelPKfS0_Pfi' function" {
	label="CFG for '_Z10convKernelPKfS0_Pfi' function";

	Node0x5d69820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp slt i32 %13, %3\l  br i1 %14, label %15, label %145\l|{<s0>T|<s1>F}}"];
	Node0x5d69820:s0 -> Node0x5d6b730;
	Node0x5d69820:s1 -> Node0x5d6b7c0;
	Node0x5d6b730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%15:\l15:                                               \l  %16 = icmp sgt i32 %3, 0\l  br i1 %16, label %17, label %47\l|{<s0>T|<s1>F}}"];
	Node0x5d6b730:s0 -> Node0x5d6a3d0;
	Node0x5d6b730:s1 -> Node0x5d6baa0;
	Node0x5d6a3d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%17:\l17:                                               \l  %18 = lshr i32 %3, 1\l  %19 = add nuw nsw i32 %18, %3\l  %20 = add nsw i32 %19, %13\l  %21 = and i32 %3, 7\l  %22 = icmp ult i32 %3, 8\l  br i1 %22, label %25, label %23\l|{<s0>T|<s1>F}}"];
	Node0x5d6a3d0:s0 -> Node0x5d6bf00;
	Node0x5d6a3d0:s1 -> Node0x5d6bf50;
	Node0x5d6bf50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%23:\l23:                                               \l  %24 = and i32 %3, -8\l  br label %51\l}"];
	Node0x5d6bf50 -> Node0x5d6c150;
	Node0x5d6bf00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%25:\l25:                                               \l  %26 = phi float [ undef, %17 ], [ %141, %51 ]\l  %27 = phi i32 [ 0, %17 ], [ %142, %51 ]\l  %28 = phi float [ 0.000000e+00, %17 ], [ %141, %51 ]\l  %29 = icmp eq i32 %21, 0\l  br i1 %29, label %47, label %30\l|{<s0>T|<s1>F}}"];
	Node0x5d6bf00:s0 -> Node0x5d6baa0;
	Node0x5d6bf00:s1 -> Node0x5d6d3c0;
	Node0x5d6d3c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%30:\l30:                                               \l  %31 = phi i32 [ %44, %30 ], [ %27, %25 ]\l  %32 = phi float [ %43, %30 ], [ %28, %25 ]\l  %33 = phi i32 [ %45, %30 ], [ 0, %25 ]\l  %34 = zext i32 %31 to i64\l  %35 = getelementptr inbounds float, float addrspace(1)* %0, i64 %34\l  %36 = load float, float addrspace(1)* %35, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %37 = sub i32 %20, %31\l  %38 = srem i32 %37, %3\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds float, float addrspace(1)* %1, i64 %39\l  %41 = load float, float addrspace(1)* %40, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = fmul contract float %36, %41\l  %43 = fadd contract float %32, %42\l  %44 = add nuw nsw i32 %31, 1\l  %45 = add i32 %33, 1\l  %46 = icmp eq i32 %45, %21\l  br i1 %46, label %47, label %30, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5d6d3c0:s0 -> Node0x5d6baa0;
	Node0x5d6d3c0:s1 -> Node0x5d6d3c0;
	Node0x5d6baa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = phi float [ 0.000000e+00, %15 ], [ %26, %25 ], [ %43, %30 ]\l  %49 = sext i32 %13 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %2, i64 %49\l  store float %48, float addrspace(1)* %50, align 4, !tbaa !7\l  br label %145\l}"];
	Node0x5d6baa0 -> Node0x5d6b7c0;
	Node0x5d6c150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %23 ], [ %142, %51 ]\l  %53 = phi float [ 0.000000e+00, %23 ], [ %141, %51 ]\l  %54 = phi i32 [ 0, %23 ], [ %143, %51 ]\l  %55 = zext i32 %52 to i64\l  %56 = getelementptr inbounds float, float addrspace(1)* %0, i64 %55\l  %57 = load float, float addrspace(1)* %56, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %58 = sub i32 %20, %52\l  %59 = srem i32 %58, %3\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %63 = fmul contract float %57, %62\l  %64 = fadd contract float %53, %63\l  %65 = or i32 %52, 1\l  %66 = zext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %0, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %69 = sub i32 %20, %65\l  %70 = srem i32 %69, %3\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = fmul contract float %68, %73\l  %75 = fadd contract float %64, %74\l  %76 = or i32 %52, 2\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = sub i32 %20, %76\l  %81 = srem i32 %80, %3\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %85 = fmul contract float %79, %84\l  %86 = fadd contract float %75, %85\l  %87 = or i32 %52, 3\l  %88 = zext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = sub i32 %20, %87\l  %92 = srem i32 %91, %3\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %1, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = fmul contract float %90, %95\l  %97 = fadd contract float %86, %96\l  %98 = or i32 %52, 4\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %102 = sub i32 %20, %98\l  %103 = srem i32 %102, %3\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %1, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %107 = fmul contract float %101, %106\l  %108 = fadd contract float %97, %107\l  %109 = or i32 %52, 5\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %0, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %113 = sub i32 %20, %109\l  %114 = srem i32 %113, %3\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fmul contract float %112, %117\l  %119 = fadd contract float %108, %118\l  %120 = or i32 %52, 6\l  %121 = zext i32 %120 to i64\l  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %121\l  %123 = load float, float addrspace(1)* %122, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %124 = sub i32 %20, %120\l  %125 = srem i32 %124, %3\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %129 = fmul contract float %123, %128\l  %130 = fadd contract float %119, %129\l  %131 = or i32 %52, 7\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = sub i32 %20, %131\l  %136 = srem i32 %135, %3\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = fmul contract float %134, %139\l  %141 = fadd contract float %130, %140\l  %142 = add nuw nsw i32 %52, 8\l  %143 = add i32 %54, 8\l  %144 = icmp eq i32 %143, %24\l  br i1 %144, label %25, label %51, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5d6c150:s0 -> Node0x5d6bf00;
	Node0x5d6c150:s1 -> Node0x5d6c150;
	Node0x5d6b7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%145:\l145:                                              \l  ret void\l}"];
}
