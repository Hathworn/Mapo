digraph "CFG for '_ZL28cudaEvaluateRightGammaKernelPiPdS0_S0_S0_i' function" {
	label="CFG for '_ZL28cudaEvaluateRightGammaKernelPiPdS0_S0_S0_i' function";

	Node0x5f1e620 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = mul i32 %7, %12\l  %14 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %15 = add i32 %13, %14\l  %16 = sext i32 %15 to i64\l  %17 = getelementptr inbounds double, double addrspace(1)* %4, i64 %16\l  store double 0.000000e+00, double addrspace(1)* %17, align 8, !tbaa !7\l  %18 = icmp slt i32 %15, %5\l  br i1 %18, label %19, label %253\l|{<s0>T|<s1>F}}"];
	Node0x5f1e620:s0 -> Node0x5f212b0;
	Node0x5f1e620:s1 -> Node0x5f21340;
	Node0x5f212b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%19:\l19:                                               \l  %20 = shl nsw i32 %15, 4\l  %21 = sext i32 %20 to i64\l  %22 = getelementptr inbounds double, double addrspace(1)* %1, i64 %21\l  %23 = getelementptr inbounds double, double addrspace(1)* %2, i64 %21\l  %24 = load double, double addrspace(1)* %22, align 8, !tbaa !7\l  %25 = load double, double addrspace(1)* %23, align 8, !tbaa !7\l  %26 = fmul contract double %24, %25\l  %27 = load double, double addrspace(1)* %3, align 8, !tbaa !7\l  %28 = fmul contract double %26, %27\l  %29 = fadd contract double %28, 0.000000e+00\l  %30 = getelementptr inbounds double, double addrspace(1)* %22, i64 1\l  %31 = load double, double addrspace(1)* %30, align 8, !tbaa !7\l  %32 = getelementptr inbounds double, double addrspace(1)* %23, i64 1\l  %33 = load double, double addrspace(1)* %32, align 8, !tbaa !7\l  %34 = fmul contract double %31, %33\l  %35 = getelementptr inbounds double, double addrspace(1)* %3, i64 1\l  %36 = load double, double addrspace(1)* %35, align 8, !tbaa !7\l  %37 = fmul contract double %34, %36\l  %38 = fadd contract double %29, %37\l  %39 = getelementptr inbounds double, double addrspace(1)* %22, i64 2\l  %40 = load double, double addrspace(1)* %39, align 8, !tbaa !7\l  %41 = getelementptr inbounds double, double addrspace(1)* %23, i64 2\l  %42 = load double, double addrspace(1)* %41, align 8, !tbaa !7\l  %43 = fmul contract double %40, %42\l  %44 = getelementptr inbounds double, double addrspace(1)* %3, i64 2\l  %45 = load double, double addrspace(1)* %44, align 8, !tbaa !7\l  %46 = fmul contract double %43, %45\l  %47 = fadd contract double %38, %46\l  %48 = getelementptr inbounds double, double addrspace(1)* %22, i64 3\l  %49 = load double, double addrspace(1)* %48, align 8, !tbaa !7\l  %50 = getelementptr inbounds double, double addrspace(1)* %23, i64 3\l  %51 = load double, double addrspace(1)* %50, align 8, !tbaa !7\l  %52 = fmul contract double %49, %51\l  %53 = getelementptr inbounds double, double addrspace(1)* %3, i64 3\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !7\l  %55 = fmul contract double %52, %54\l  %56 = fadd contract double %47, %55\l  %57 = getelementptr inbounds double, double addrspace(1)* %22, i64 4\l  %58 = getelementptr inbounds double, double addrspace(1)* %23, i64 4\l  %59 = getelementptr inbounds double, double addrspace(1)* %3, i64 4\l  %60 = load double, double addrspace(1)* %57, align 8, !tbaa !7\l  %61 = load double, double addrspace(1)* %58, align 8, !tbaa !7\l  %62 = fmul contract double %60, %61\l  %63 = load double, double addrspace(1)* %59, align 8, !tbaa !7\l  %64 = fmul contract double %62, %63\l  %65 = fadd contract double %56, %64\l  %66 = getelementptr inbounds double, double addrspace(1)* %57, i64 1\l  %67 = load double, double addrspace(1)* %66, align 8, !tbaa !7\l  %68 = getelementptr inbounds double, double addrspace(1)* %58, i64 1\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !7\l  %70 = fmul contract double %67, %69\l  %71 = getelementptr inbounds double, double addrspace(1)* %3, i64 5\l  %72 = load double, double addrspace(1)* %71, align 8, !tbaa !7\l  %73 = fmul contract double %70, %72\l  %74 = fadd contract double %65, %73\l  %75 = getelementptr inbounds double, double addrspace(1)* %57, i64 2\l  %76 = load double, double addrspace(1)* %75, align 8, !tbaa !7\l  %77 = getelementptr inbounds double, double addrspace(1)* %58, i64 2\l  %78 = load double, double addrspace(1)* %77, align 8, !tbaa !7\l  %79 = fmul contract double %76, %78\l  %80 = getelementptr inbounds double, double addrspace(1)* %3, i64 6\l  %81 = load double, double addrspace(1)* %80, align 8, !tbaa !7\l  %82 = fmul contract double %79, %81\l  %83 = fadd contract double %74, %82\l  %84 = getelementptr inbounds double, double addrspace(1)* %57, i64 3\l  %85 = load double, double addrspace(1)* %84, align 8, !tbaa !7\l  %86 = getelementptr inbounds double, double addrspace(1)* %58, i64 3\l  %87 = load double, double addrspace(1)* %86, align 8, !tbaa !7\l  %88 = fmul contract double %85, %87\l  %89 = getelementptr inbounds double, double addrspace(1)* %3, i64 7\l  %90 = load double, double addrspace(1)* %89, align 8, !tbaa !7\l  %91 = fmul contract double %88, %90\l  %92 = fadd contract double %83, %91\l  %93 = getelementptr inbounds double, double addrspace(1)* %57, i64 4\l  %94 = getelementptr inbounds double, double addrspace(1)* %58, i64 4\l  %95 = getelementptr inbounds double, double addrspace(1)* %3, i64 8\l  %96 = load double, double addrspace(1)* %93, align 8, !tbaa !7\l  %97 = load double, double addrspace(1)* %94, align 8, !tbaa !7\l  %98 = fmul contract double %96, %97\l  %99 = load double, double addrspace(1)* %95, align 8, !tbaa !7\l  %100 = fmul contract double %98, %99\l  %101 = fadd contract double %92, %100\l  %102 = getelementptr inbounds double, double addrspace(1)* %93, i64 1\l  %103 = load double, double addrspace(1)* %102, align 8, !tbaa !7\l  %104 = getelementptr inbounds double, double addrspace(1)* %94, i64 1\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !7\l  %106 = fmul contract double %103, %105\l  %107 = getelementptr inbounds double, double addrspace(1)* %3, i64 9\l  %108 = load double, double addrspace(1)* %107, align 8, !tbaa !7\l  %109 = fmul contract double %106, %108\l  %110 = fadd contract double %101, %109\l  %111 = getelementptr inbounds double, double addrspace(1)* %93, i64 2\l  %112 = load double, double addrspace(1)* %111, align 8, !tbaa !7\l  %113 = getelementptr inbounds double, double addrspace(1)* %94, i64 2\l  %114 = load double, double addrspace(1)* %113, align 8, !tbaa !7\l  %115 = fmul contract double %112, %114\l  %116 = getelementptr inbounds double, double addrspace(1)* %3, i64 10\l  %117 = load double, double addrspace(1)* %116, align 8, !tbaa !7\l  %118 = fmul contract double %115, %117\l  %119 = fadd contract double %110, %118\l  %120 = getelementptr inbounds double, double addrspace(1)* %93, i64 3\l  %121 = load double, double addrspace(1)* %120, align 8, !tbaa !7\l  %122 = getelementptr inbounds double, double addrspace(1)* %94, i64 3\l  %123 = load double, double addrspace(1)* %122, align 8, !tbaa !7\l  %124 = fmul contract double %121, %123\l  %125 = getelementptr inbounds double, double addrspace(1)* %3, i64 11\l  %126 = load double, double addrspace(1)* %125, align 8, !tbaa !7\l  %127 = fmul contract double %124, %126\l  %128 = fadd contract double %119, %127\l  %129 = getelementptr inbounds double, double addrspace(1)* %93, i64 4\l  %130 = getelementptr inbounds double, double addrspace(1)* %94, i64 4\l  %131 = getelementptr inbounds double, double addrspace(1)* %3, i64 12\l  %132 = load double, double addrspace(1)* %129, align 8, !tbaa !7\l  %133 = load double, double addrspace(1)* %130, align 8, !tbaa !7\l  %134 = fmul contract double %132, %133\l  %135 = load double, double addrspace(1)* %131, align 8, !tbaa !7\l  %136 = fmul contract double %134, %135\l  %137 = fadd contract double %128, %136\l  %138 = getelementptr inbounds double, double addrspace(1)* %129, i64 1\l  %139 = load double, double addrspace(1)* %138, align 8, !tbaa !7\l  %140 = getelementptr inbounds double, double addrspace(1)* %130, i64 1\l  %141 = load double, double addrspace(1)* %140, align 8, !tbaa !7\l  %142 = fmul contract double %139, %141\l  %143 = getelementptr inbounds double, double addrspace(1)* %3, i64 13\l  %144 = load double, double addrspace(1)* %143, align 8, !tbaa !7\l  %145 = fmul contract double %142, %144\l  %146 = fadd contract double %137, %145\l  %147 = getelementptr inbounds double, double addrspace(1)* %129, i64 2\l  %148 = load double, double addrspace(1)* %147, align 8, !tbaa !7\l  %149 = getelementptr inbounds double, double addrspace(1)* %130, i64 2\l  %150 = load double, double addrspace(1)* %149, align 8, !tbaa !7\l  %151 = fmul contract double %148, %150\l  %152 = getelementptr inbounds double, double addrspace(1)* %3, i64 14\l  %153 = load double, double addrspace(1)* %152, align 8, !tbaa !7\l  %154 = fmul contract double %151, %153\l  %155 = fadd contract double %146, %154\l  %156 = getelementptr inbounds double, double addrspace(1)* %129, i64 3\l  %157 = load double, double addrspace(1)* %156, align 8, !tbaa !7\l  %158 = getelementptr inbounds double, double addrspace(1)* %130, i64 3\l  %159 = load double, double addrspace(1)* %158, align 8, !tbaa !7\l  %160 = fmul contract double %157, %159\l  %161 = getelementptr inbounds double, double addrspace(1)* %3, i64 15\l  %162 = load double, double addrspace(1)* %161, align 8, !tbaa !7\l  %163 = fmul contract double %160, %162\l  %164 = fadd contract double %155, %163\l  %165 = tail call double @llvm.fabs.f64(double %164)\l  %166 = fmul contract double %165, 2.500000e-01\l  %167 = tail call double @llvm.amdgcn.frexp.mant.f64(double %166)\l  %168 = fcmp olt double %167, 0x3FE5555555555555\l  %169 = zext i1 %168 to i32\l  %170 = tail call double @llvm.amdgcn.ldexp.f64(double %167, i32 %169)\l  %171 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %166)\l  %172 = sub nsw i32 %171, %169\l  %173 = fadd double %170, -1.000000e+00\l  %174 = fadd double %170, 1.000000e+00\l  %175 = fadd double %174, -1.000000e+00\l  %176 = fsub double %170, %175\l  %177 = tail call double @llvm.amdgcn.rcp.f64(double %174)\l  %178 = fneg double %174\l  %179 = tail call double @llvm.fma.f64(double %178, double %177, double\l... 1.000000e+00)\l  %180 = tail call double @llvm.fma.f64(double %179, double %177, double %177)\l  %181 = tail call double @llvm.fma.f64(double %178, double %180, double\l... 1.000000e+00)\l  %182 = tail call double @llvm.fma.f64(double %181, double %180, double %180)\l  %183 = fmul double %173, %182\l  %184 = fmul double %174, %183\l  %185 = fneg double %184\l  %186 = tail call double @llvm.fma.f64(double %183, double %174, double %185)\l  %187 = tail call double @llvm.fma.f64(double %183, double %176, double %186)\l  %188 = fadd double %184, %187\l  %189 = fsub double %188, %184\l  %190 = fsub double %187, %189\l  %191 = fsub double %173, %188\l  %192 = fsub double %173, %191\l  %193 = fsub double %192, %188\l  %194 = fsub double %193, %190\l  %195 = fadd double %191, %194\l  %196 = fmul double %182, %195\l  %197 = fadd double %183, %196\l  %198 = fsub double %197, %183\l  %199 = fsub double %196, %198\l  %200 = fmul double %197, %197\l  %201 = tail call double @llvm.fma.f64(double %200, double\l... 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)\l  %202 = tail call double @llvm.fma.f64(double %200, double %201, double\l... 0x3FC7474DD7F4DF2E)\l  %203 = tail call double @llvm.fma.f64(double %200, double %202, double\l... 0x3FCC71C016291751)\l  %204 = tail call double @llvm.fma.f64(double %200, double %203, double\l... 0x3FD249249B27ACF1)\l  %205 = tail call double @llvm.fma.f64(double %200, double %204, double\l... 0x3FD99999998EF7B6)\l  %206 = tail call double @llvm.fma.f64(double %200, double %205, double\l... 0x3FE5555555555780)\l  %207 = tail call double @llvm.amdgcn.ldexp.f64(double %197, i32 1)\l  %208 = tail call double @llvm.amdgcn.ldexp.f64(double %199, i32 1)\l  %209 = fmul double %197, %200\l  %210 = fmul double %209, %206\l  %211 = fadd double %207, %210\l  %212 = fsub double %211, %207\l  %213 = fsub double %210, %212\l  %214 = fadd double %208, %213\l  %215 = fadd double %211, %214\l  %216 = fsub double %215, %211\l  %217 = fsub double %214, %216\l  %218 = sitofp i32 %172 to double\l  %219 = fmul double %218, 0x3FE62E42FEFA39EF\l  %220 = fneg double %219\l  %221 = tail call double @llvm.fma.f64(double %218, double\l... 0x3FE62E42FEFA39EF, double %220)\l  %222 = tail call double @llvm.fma.f64(double %218, double\l... 0x3C7ABC9E3B39803F, double %221)\l  %223 = fadd double %219, %222\l  %224 = fsub double %223, %219\l  %225 = fsub double %222, %224\l  %226 = fadd double %223, %215\l  %227 = fsub double %226, %223\l  %228 = fsub double %226, %227\l  %229 = fsub double %223, %228\l  %230 = fsub double %215, %227\l  %231 = fadd double %230, %229\l  %232 = fadd double %225, %217\l  %233 = fsub double %232, %225\l  %234 = fsub double %232, %233\l  %235 = fsub double %225, %234\l  %236 = fsub double %217, %233\l  %237 = fadd double %236, %235\l  %238 = fadd double %232, %231\l  %239 = fadd double %226, %238\l  %240 = fsub double %239, %226\l  %241 = fsub double %238, %240\l  %242 = fadd double %237, %241\l  %243 = fadd double %239, %242\l  %244 = fcmp oeq double %166, 0x7FF0000000000000\l  %245 = select i1 %244, double %166, double %243\l  %246 = fcmp oeq double %166, 0.000000e+00\l  %247 = select i1 %246, double 0xFFF0000000000000, double %245\l  %248 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %16\l  %249 = load i32, i32 addrspace(1)* %248, align 4, !tbaa !11,\l... !amdgpu.noclobber !5\l  %250 = sitofp i32 %249 to double\l  %251 = fmul contract double %247, %250\l  %252 = fadd contract double %251, 0.000000e+00\l  store double %252, double addrspace(1)* %17, align 8, !tbaa !7\l  br label %253\l}"];
	Node0x5f212b0 -> Node0x5f21340;
	Node0x5f21340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%253:\l253:                                              \l  ret void\l}"];
}
