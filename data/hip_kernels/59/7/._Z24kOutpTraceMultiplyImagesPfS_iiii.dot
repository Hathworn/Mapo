digraph "CFG for '_Z24kOutpTraceMultiplyImagesPfS_iiii' function" {
	label="CFG for '_Z24kOutpTraceMultiplyImagesPfS_iiii' function";

	Node0x5e99770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%6:\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %9 = mul nsw i32 %4, %2\l  %10 = mul i32 %9, %7\l  %11 = mul i32 %10, %5\l  %12 = sext i32 %11 to i64\l  %13 = getelementptr inbounds float, float addrspace(1)* %0, i64 %12\l  %14 = mul nsw i32 %8, %2\l  %15 = sext i32 %14 to i64\l  %16 = getelementptr inbounds float, float addrspace(1)* %13, i64 %15\l  %17 = sext i32 %10 to i64\l  %18 = getelementptr inbounds float, float addrspace(1)* %1, i64 %17\l  %19 = getelementptr inbounds float, float addrspace(1)* %18, i64 %15\l  %20 = icmp sgt i32 %5, 0\l  br i1 %20, label %21, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5e99770:s0 -> Node0x5e9a950;
	Node0x5e99770:s1 -> Node0x5e9a9e0;
	Node0x5e9a950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%21:\l21:                                               \l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %23 = icmp slt i32 %22, %2\l  %24 = tail call align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()\l  %25 = getelementptr i8, i8 addrspace(4)* %24, i64 4\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  br label %28\l}"];
	Node0x5e9a950 -> Node0x5e9bc60;
	Node0x5e9a9e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%27:\l27:                                               \l  ret void\l}"];
	Node0x5e9bc60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%28:\l28:                                               \l  %29 = phi i32 [ 0, %21 ], [ %35, %34 ]\l  br i1 %23, label %30, label %34\l|{<s0>T|<s1>F}}"];
	Node0x5e9bc60:s0 -> Node0x5e9bee0;
	Node0x5e9bc60:s1 -> Node0x5e9bde0;
	Node0x5e9bee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%30:\l30:                                               \l  %31 = mul nsw i32 %29, %9\l  %32 = load i16, i16 addrspace(4)* %26, align 4, !range !5, !invariant.load !6\l  %33 = zext i16 %32 to i32\l  br label %37\l}"];
	Node0x5e9bee0 -> Node0x5e9a0d0;
	Node0x5e9bde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%34:\l34:                                               \l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %35 = add nuw nsw i32 %29, 1\l  %36 = icmp eq i32 %35, %5\l  br i1 %36, label %27, label %28, !llvm.loop !7\l|{<s0>T|<s1>F}}"];
	Node0x5e9bde0:s0 -> Node0x5e9a9e0;
	Node0x5e9bde0:s1 -> Node0x5e9bc60;
	Node0x5e9a0d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi i32 [ %22, %30 ], [ %47, %37 ]\l  %39 = add nsw i32 %38, %31\l  %40 = sext i32 %38 to i64\l  %41 = getelementptr inbounds float, float addrspace(1)* %19, i64 %40\l  %42 = load float, float addrspace(1)* %41, align 4, !tbaa !9\l  %43 = sext i32 %39 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %16, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !9\l  %46 = fmul contract float %42, %45\l  store float %46, float addrspace(1)* %44, align 4, !tbaa !9\l  %47 = add i32 %38, %33\l  %48 = icmp slt i32 %47, %2\l  br i1 %48, label %37, label %34, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5e9a0d0:s0 -> Node0x5e9a0d0;
	Node0x5e9a0d0:s1 -> Node0x5e9bde0;
}
