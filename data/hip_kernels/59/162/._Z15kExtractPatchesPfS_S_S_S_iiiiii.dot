digraph "CFG for '_Z15kExtractPatchesPfS_S_S_S_iiiiii' function" {
	label="CFG for '_Z15kExtractPatchesPfS_S_S_S_iiiiii' function";

	Node0x5c05030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %13 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %14 = getelementptr i8, i8 addrspace(4)* %13, i64 4\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 4, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %13, i64 12\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 4, !tbaa !6\l  %21 = mul i32 %12, %17\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %23 = add i32 %21, %22\l  %24 = zext i32 %23 to i64\l  %25 = udiv i32 %20, %17\l  %26 = mul i32 %25, %17\l  %27 = icmp ugt i32 %20, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = mul i32 %29, %17\l  %31 = zext i32 %30 to i64\l  %32 = mul i32 %8, %5\l  %33 = mul i32 %32, %9\l  %34 = mul i32 %33, %10\l  %35 = sext i32 %34 to i64\l  %36 = icmp ult i64 %24, %35\l  br i1 %36, label %37, label %44\l|{<s0>T|<s1>F}}"];
	Node0x5c05030:s0 -> Node0x5c08580;
	Node0x5c05030:s1 -> Node0x5c08610;
	Node0x5c08580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%37:\l37:                                               \l  %38 = sext i32 %5 to i64\l  %39 = sext i32 %8 to i64\l  %40 = sext i32 %9 to i64\l  %41 = sext i32 %10 to i64\l  %42 = sext i32 %6 to i64\l  %43 = sext i32 %7 to i64\l  br label %45\l}"];
	Node0x5c08580 -> Node0x5c089f0;
	Node0x5c08610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%44:\l44:                                               \l  ret void\l}"];
	Node0x5c089f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%45:\l45:                                               \l  %46 = phi i64 [ %24, %37 ], [ %84, %45 ]\l  %47 = freeze i64 %46\l  %48 = freeze i64 %38\l  %49 = udiv i64 %47, %48\l  %50 = mul i64 %49, %48\l  %51 = sub i64 %47, %50\l  %52 = freeze i64 %39\l  %53 = udiv i64 %49, %52\l  %54 = mul i64 %53, %52\l  %55 = sub i64 %49, %54\l  %56 = freeze i64 %40\l  %57 = udiv i64 %53, %56\l  %58 = mul i64 %57, %56\l  %59 = sub i64 %53, %58\l  %60 = urem i64 %57, %41\l  %61 = getelementptr inbounds float, float addrspace(1)* %4, i64 %51\l  %62 = load float, float addrspace(1)* %61, align 4, !tbaa !16\l  %63 = fptosi float %62 to i32\l  %64 = sext i32 %63 to i64\l  %65 = add i64 %59, %64\l  %66 = getelementptr inbounds float, float addrspace(1)* %3, i64 %51\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !16\l  %68 = fptosi float %67 to i32\l  %69 = sext i32 %68 to i64\l  %70 = add i64 %55, %69\l  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 %51\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !16\l  %73 = fptosi float %72 to i32\l  %74 = mul nsw i32 %73, %10\l  %75 = sext i32 %74 to i64\l  %76 = add i64 %60, %75\l  %77 = mul i64 %76, %43\l  %78 = add i64 %65, %77\l  %79 = mul i64 %78, %42\l  %80 = add i64 %70, %79\l  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80\l  %82 = load float, float addrspace(1)* %81, align 4, !tbaa !16\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46\l  store float %82, float addrspace(1)* %83, align 4, !tbaa !16\l  %84 = add i64 %46, %31\l  %85 = icmp ult i64 %84, %35\l  br i1 %85, label %45, label %44, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5c089f0:s0 -> Node0x5c089f0;
	Node0x5c089f0:s1 -> Node0x5c08610;
}
