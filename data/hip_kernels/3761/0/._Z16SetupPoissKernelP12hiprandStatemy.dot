digraph "CFG for '_Z16SetupPoissKernelP12hiprandStatemy' function" {
	label="CFG for '_Z16SetupPoissKernelP12hiprandStatemy' function";

	Node0x5218a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = zext i32 %5 to i64\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %9 = bitcast i8 addrspace(4)* %8 to i32 addrspace(4)*\l  %10 = load i32, i32 addrspace(4)* %9, align 4, !tbaa !4\l  %11 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !13, !invariant.load\l... !14\l  %14 = zext i16 %13 to i32\l  %15 = udiv i32 %10, %14\l  %16 = mul i32 %15, %14\l  %17 = icmp ugt i32 %10, %16\l  %18 = zext i1 %17 to i32\l  %19 = add i32 %15, %18\l  %20 = zext i32 %19 to i64\l  %21 = mul nuw i64 %20, %6\l  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %23 = zext i32 %22 to i64\l  %24 = add nuw i64 %21, %23\l  %25 = zext i16 %13 to i64\l  %26 = mul i64 %24, %25\l  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %28 = zext i32 %27 to i64\l  %29 = add i64 %26, %28\l  %30 = icmp ult i64 %29, %1\l  br i1 %30, label %31, label %236\l|{<s0>T|<s1>F}}"];
	Node0x5218a60:s0 -> Node0x521e8b0;
	Node0x5218a60:s1 -> Node0x521e940;
	Node0x521e8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%31:\l31:                                               \l  %32 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %0, i64 %29\l  %33 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %33) #4\l  %34 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %35 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %36 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %37 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %38 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %39 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 0\l  %40 = trunc i64 %2 to i32\l  %41 = xor i32 %40, 746559103\l  %42 = lshr i64 %2, 32\l  %43 = trunc i64 %42 to i32\l  %44 = xor i32 %43, -1607034933\l  %45 = mul i32 %41, 1228688033\l  %46 = mul i32 %44, 2073658381\l  %47 = add i32 %45, 123456789\l  store i32 %47, i32 addrspace(5)* %34, align 8, !tbaa !16\l  %48 = xor i32 %45, 362436069\l  store i32 %48, i32 addrspace(5)* %35, align 4, !tbaa !16\l  %49 = add i32 %46, 521288629\l  store i32 %49, i32 addrspace(5)* %36, align 8, !tbaa !16\l  %50 = xor i32 %46, 88675123\l  store i32 %50, i32 addrspace(5)* %37, align 4, !tbaa !16\l  %51 = add i32 %45, 5783321\l  store i32 %51, i32 addrspace(5)* %38, align 8, !tbaa !16\l  %52 = add i32 %45, 6615241\l  %53 = add i32 %52, %46\l  store i32 %53, i32 addrspace(5)* %39, align 8, !tbaa !20\l  %54 = icmp eq i64 %29, 0\l  br i1 %54, label %232, label %55\l|{<s0>T|<s1>F}}"];
	Node0x521e8b0:s0 -> Node0x5220ab0;
	Node0x521e8b0:s1 -> Node0x5220b40;
	Node0x5220b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%55:\l55:                                               \l  %56 = phi i64 [ %65, %63 ], [ %29, %31 ]\l  %57 = phi i32 [ %64, %63 ], [ 0, %31 ]\l  %58 = trunc i64 %56 to i32\l  %59 = and i32 %58, 3\l  %60 = icmp eq i32 %59, 0\l  br i1 %60, label %63, label %61\l|{<s0>T|<s1>F}}"];
	Node0x5220b40:s0 -> Node0x5220cb0;
	Node0x5220b40:s1 -> Node0x52210a0;
	Node0x52210a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%61:\l61:                                               \l  %62 = zext i32 %57 to i64\l  br label %67\l}"];
	Node0x52210a0 -> Node0x5221250;
	Node0x5220cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%63:\l63:                                               \l  %64 = add nuw nsw i32 %57, 1\l  %65 = lshr i64 %56, 2\l  %66 = icmp ult i64 %56, 4\l  br i1 %66, label %232, label %55, !llvm.loop !25\l|{<s0>T|<s1>F}}"];
	Node0x5220cb0:s0 -> Node0x5220ab0;
	Node0x5220cb0:s1 -> Node0x5220b40;
	Node0x5221250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%67:\l67:                                               \l  %68 = phi i32 [ 0, %61 ], [ %230, %229 ]\l  br label %69\l}"];
	Node0x5221250 -> Node0x5221970;
	Node0x5221970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%69:\l69:                                               \l  %70 = phi i32 [ 0, %67 ], [ %202, %69 ]\l  %71 = phi i32 [ 0, %67 ], [ %208, %69 ]\l  %72 = phi i32 [ 0, %67 ], [ %214, %69 ]\l  %73 = phi i32 [ 0, %67 ], [ %220, %69 ]\l  %74 = phi i32 [ 0, %67 ], [ %226, %69 ]\l  %75 = phi i32 [ 0, %67 ], [ %227, %69 ]\l  %76 = lshr i32 %75, 5\l  %77 = and i32 %75, 28\l  %78 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %76\l  %79 = load i32, i32 addrspace(5)* %78, align 4, !tbaa !16\l  %80 = shl nuw i32 1, %77\l  %81 = and i32 %80, %79\l  %82 = icmp eq i32 %81, 0\l  %83 = mul nuw nsw i32 %75, 5\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %84\l  %86 = load i32, i32 addrspace(4)* %85, align 16, !tbaa !16\l  %87 = select i1 %82, i32 0, i32 %86\l  %88 = xor i32 %87, %70\l  %89 = or i32 %83, 1\l  %90 = zext i32 %89 to i64\l  %91 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %90\l  %92 = load i32, i32 addrspace(4)* %91, align 4, !tbaa !16\l  %93 = select i1 %82, i32 0, i32 %92\l  %94 = xor i32 %93, %71\l  %95 = or i32 %83, 2\l  %96 = zext i32 %95 to i64\l  %97 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %96\l  %98 = load i32, i32 addrspace(4)* %97, align 8, !tbaa !16\l  %99 = select i1 %82, i32 0, i32 %98\l  %100 = xor i32 %99, %72\l  %101 = or i32 %83, 3\l  %102 = zext i32 %101 to i64\l  %103 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %102\l  %104 = load i32, i32 addrspace(4)* %103, align 4, !tbaa !16\l  %105 = select i1 %82, i32 0, i32 %104\l  %106 = xor i32 %105, %73\l  %107 = add nuw nsw i32 %83, 4\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %108\l  %110 = load i32, i32 addrspace(4)* %109, align 16, !tbaa !16\l  %111 = select i1 %82, i32 0, i32 %110\l  %112 = xor i32 %111, %74\l  %113 = or i32 %75, 1\l  %114 = lshr i32 %75, 5\l  %115 = and i32 %113, 29\l  %116 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %114\l  %117 = load i32, i32 addrspace(5)* %116, align 4, !tbaa !16\l  %118 = shl nuw i32 1, %115\l  %119 = and i32 %118, %117\l  %120 = icmp eq i32 %119, 0\l  %121 = mul nuw nsw i32 %113, 5\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %122\l  %124 = load i32, i32 addrspace(4)* %123, align 4, !tbaa !16\l  %125 = select i1 %120, i32 0, i32 %124\l  %126 = xor i32 %125, %88\l  %127 = add nuw nsw i32 %121, 1\l  %128 = zext i32 %127 to i64\l  %129 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %128\l  %130 = load i32, i32 addrspace(4)* %129, align 8, !tbaa !16\l  %131 = select i1 %120, i32 0, i32 %130\l  %132 = xor i32 %131, %94\l  %133 = or i32 %121, 2\l  %134 = zext i32 %133 to i64\l  %135 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %134\l  %136 = load i32, i32 addrspace(4)* %135, align 4, !tbaa !16\l  %137 = select i1 %120, i32 0, i32 %136\l  %138 = xor i32 %137, %100\l  %139 = add nuw nsw i32 %121, 3\l  %140 = zext i32 %139 to i64\l  %141 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %140\l  %142 = load i32, i32 addrspace(4)* %141, align 16, !tbaa !16\l  %143 = select i1 %120, i32 0, i32 %142\l  %144 = xor i32 %143, %106\l  %145 = add nuw nsw i32 %121, 4\l  %146 = zext i32 %145 to i64\l  %147 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %146\l  %148 = load i32, i32 addrspace(4)* %147, align 4, !tbaa !16\l  %149 = select i1 %120, i32 0, i32 %148\l  %150 = xor i32 %149, %112\l  %151 = or i32 %75, 2\l  %152 = lshr i32 %75, 5\l  %153 = and i32 %151, 30\l  %154 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %152\l  %155 = load i32, i32 addrspace(5)* %154, align 4, !tbaa !16\l  %156 = shl nuw i32 1, %153\l  %157 = and i32 %156, %155\l  %158 = icmp eq i32 %157, 0\l  %159 = mul nuw nsw i32 %151, 5\l  %160 = zext i32 %159 to i64\l  %161 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %160\l  %162 = load i32, i32 addrspace(4)* %161, align 8, !tbaa !16\l  %163 = select i1 %158, i32 0, i32 %162\l  %164 = xor i32 %163, %126\l  %165 = or i32 %159, 1\l  %166 = zext i32 %165 to i64\l  %167 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %166\l  %168 = load i32, i32 addrspace(4)* %167, align 4, !tbaa !16\l  %169 = select i1 %158, i32 0, i32 %168\l  %170 = xor i32 %169, %132\l  %171 = add nuw nsw i32 %159, 2\l  %172 = zext i32 %171 to i64\l  %173 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %172\l  %174 = load i32, i32 addrspace(4)* %173, align 16, !tbaa !16\l  %175 = select i1 %158, i32 0, i32 %174\l  %176 = xor i32 %175, %138\l  %177 = add nuw nsw i32 %159, 3\l  %178 = zext i32 %177 to i64\l  %179 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %178\l  %180 = load i32, i32 addrspace(4)* %179, align 4, !tbaa !16\l  %181 = select i1 %158, i32 0, i32 %180\l  %182 = xor i32 %181, %144\l  %183 = add nuw nsw i32 %159, 4\l  %184 = zext i32 %183 to i64\l  %185 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %184\l  %186 = load i32, i32 addrspace(4)* %185, align 8, !tbaa !16\l  %187 = select i1 %158, i32 0, i32 %186\l  %188 = xor i32 %187, %150\l  %189 = or i32 %75, 3\l  %190 = lshr i32 %75, 5\l  %191 = and i32 %189, 31\l  %192 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %190\l  %193 = load i32, i32 addrspace(5)* %192, align 4, !tbaa !16\l  %194 = shl nuw i32 1, %191\l  %195 = and i32 %194, %193\l  %196 = icmp eq i32 %195, 0\l  %197 = mul nuw nsw i32 %189, 5\l  %198 = zext i32 %197 to i64\l  %199 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %198\l  %200 = load i32, i32 addrspace(4)* %199, align 4, !tbaa !16\l  %201 = select i1 %196, i32 0, i32 %200\l  %202 = xor i32 %201, %164\l  %203 = add nuw nsw i32 %197, 1\l  %204 = zext i32 %203 to i64\l  %205 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %204\l  %206 = load i32, i32 addrspace(4)* %205, align 16, !tbaa !16\l  %207 = select i1 %196, i32 0, i32 %206\l  %208 = xor i32 %207, %170\l  %209 = add nuw nsw i32 %197, 2\l  %210 = zext i32 %209 to i64\l  %211 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %210\l  %212 = load i32, i32 addrspace(4)* %211, align 4, !tbaa !16\l  %213 = select i1 %196, i32 0, i32 %212\l  %214 = xor i32 %213, %176\l  %215 = add nuw nsw i32 %197, 3\l  %216 = zext i32 %215 to i64\l  %217 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %216\l  %218 = load i32, i32 addrspace(4)* %217, align 8, !tbaa !16\l  %219 = select i1 %196, i32 0, i32 %218\l  %220 = xor i32 %219, %182\l  %221 = add nuw nsw i32 %197, 4\l  %222 = zext i32 %221 to i64\l  %223 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %62, i64 %222\l  %224 = load i32, i32 addrspace(4)* %223, align 4, !tbaa !16\l  %225 = select i1 %196, i32 0, i32 %224\l  %226 = xor i32 %225, %188\l  %227 = add nuw nsw i32 %75, 4\l  %228 = icmp eq i32 %227, 160\l  br i1 %228, label %229, label %69, !llvm.loop !27\l|{<s0>T|<s1>F}}"];
	Node0x5221970:s0 -> Node0x5221830;
	Node0x5221970:s1 -> Node0x5221970;
	Node0x5221830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%229:\l229:                                              \l  store i32 %202, i32 addrspace(5)* %34, align 8, !tbaa !16\l  store i32 %208, i32 addrspace(5)* %35, align 4, !tbaa !16\l  store i32 %214, i32 addrspace(5)* %36, align 8, !tbaa !16\l  store i32 %220, i32 addrspace(5)* %37, align 4, !tbaa !16\l  store i32 %226, i32 addrspace(5)* %38, align 8, !tbaa !16\l  %230 = add nuw nsw i32 %68, 1\l  %231 = icmp eq i32 %230, %59\l  br i1 %231, label %63, label %67, !llvm.loop !28\l|{<s0>T|<s1>F}}"];
	Node0x5221830:s0 -> Node0x5220cb0;
	Node0x5221830:s1 -> Node0x5221250;
	Node0x5220ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%232:\l232:                                              \l  %233 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %233, align 4, !tbaa !29\l  %234 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %234, align 8, !tbaa !30\l  %235 = bitcast %struct.hiprandState addrspace(1)* %32 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %235, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %33, i64 48, i1 false), !tbaa.struct !31\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %33) #4\l  br label %236\l}"];
	Node0x5220ab0 -> Node0x521e940;
	Node0x521e940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8caffe70",label="{%236:\l236:                                              \l  ret void\l}"];
}
