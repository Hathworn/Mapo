; ModuleID = '../data/hip_kernels/4211/0/main.cu'
source_filename = "../data/hip_kernels/4211/0/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.HIP_vector_type = type { %struct.HIP_vector_base }
%struct.HIP_vector_base = type { %union.anon }
%union.anon = type { <2 x double> }

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z10geo_invertP15HIP_vector_typeIdLj2EES1_PdS2_l(%struct.HIP_vector_type addrspace(1)* nocapture %0, %struct.HIP_vector_type addrspace(1)* nocapture %1, double addrspace(1)* nocapture writeonly %2, double addrspace(1)* nocapture writeonly %3, i64 %4) local_unnamed_addr #0 {
  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4
  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*
  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5
  %11 = zext i16 %10 to i32
  %12 = mul i32 %6, %11
  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6
  %14 = add i32 %12, %13
  %15 = sext i32 %14 to i64
  %16 = icmp slt i64 %15, %4
  br i1 %16, label %17, label %1246

17:                                               ; preds = %5
  %18 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %15, i32 0, i32 0, i32 0, i64 0
  %19 = load double, double addrspace(1)* %18, align 16, !tbaa !7, !amdgpu.noclobber !5
  %20 = fmul contract double %19, 0x400921FB54442D18
  %21 = fdiv contract double %20, 1.800000e+02
  store double %21, double addrspace(1)* %18, align 16, !tbaa !7
  %22 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %15, i32 0, i32 0, i32 0, i64 1
  %23 = load double, double addrspace(1)* %22, align 8, !tbaa !7, !amdgpu.noclobber !5
  %24 = fmul contract double %23, 0x400921FB54442D18
  %25 = fdiv contract double %24, 1.800000e+02
  store double %25, double addrspace(1)* %22, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %15, i32 0, i32 0, i32 0, i64 0
  %27 = load double, double addrspace(1)* %26, align 16, !tbaa !7
  %28 = fmul contract double %27, 0x400921FB54442D18
  %29 = fdiv contract double %28, 1.800000e+02
  store double %29, double addrspace(1)* %26, align 16, !tbaa !7
  %30 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %15, i32 0, i32 0, i32 0, i64 1
  %31 = load double, double addrspace(1)* %30, align 8, !tbaa !7
  %32 = fmul contract double %31, 0x400921FB54442D18
  %33 = fdiv contract double %32, 1.800000e+02
  store double %33, double addrspace(1)* %30, align 8, !tbaa !7
  %34 = load double, double addrspace(1)* %18, align 16, !tbaa !7
  %35 = tail call double @llvm.fabs.f64(double %34)
  %36 = fcmp olt double %35, 0x41D0000000000000
  br i1 %36, label %37, label %56

37:                                               ; preds = %17
  %38 = fmul double %35, 0x3FE45F306DC9C883
  %39 = tail call double @llvm.rint.f64(double %38)
  %40 = tail call double @llvm.fma.f64(double %39, double 0xBFF921FB54442D18, double %35)
  %41 = tail call double @llvm.fma.f64(double %39, double 0xBC91A62633145C00, double %40)
  %42 = fmul double %39, 0x3C91A62633145C00
  %43 = fneg double %42
  %44 = tail call double @llvm.fma.f64(double %39, double 0x3C91A62633145C00, double %43)
  %45 = fsub double %40, %42
  %46 = fsub double %40, %45
  %47 = fsub double %46, %42
  %48 = fsub double %45, %41
  %49 = fadd double %48, %47
  %50 = fsub double %49, %44
  %51 = tail call double @llvm.fma.f64(double %39, double 0xB97B839A252049C0, double %50)
  %52 = fadd double %41, %51
  %53 = fsub double %52, %41
  %54 = fsub double %51, %53
  %55 = fptosi double %39 to i32
  br label %132

56:                                               ; preds = %17
  %57 = tail call double @llvm.amdgcn.trig.preop.f64(double %35, i32 0)
  %58 = tail call double @llvm.amdgcn.trig.preop.f64(double %35, i32 1)
  %59 = tail call double @llvm.amdgcn.trig.preop.f64(double %35, i32 2)
  %60 = fcmp oge double %35, 0x7B00000000000000
  %61 = tail call double @llvm.amdgcn.ldexp.f64(double %35, i32 -128)
  %62 = select i1 %60, double %61, double %35
  %63 = fmul double %59, %62
  %64 = fneg double %63
  %65 = tail call double @llvm.fma.f64(double %59, double %62, double %64)
  %66 = fmul double %58, %62
  %67 = fneg double %66
  %68 = tail call double @llvm.fma.f64(double %58, double %62, double %67)
  %69 = fmul double %57, %62
  %70 = fneg double %69
  %71 = tail call double @llvm.fma.f64(double %57, double %62, double %70)
  %72 = fadd double %66, %71
  %73 = fsub double %72, %66
  %74 = fsub double %72, %73
  %75 = fsub double %71, %73
  %76 = fsub double %66, %74
  %77 = fadd double %75, %76
  %78 = fadd double %63, %68
  %79 = fsub double %78, %63
  %80 = fsub double %78, %79
  %81 = fsub double %68, %79
  %82 = fsub double %63, %80
  %83 = fadd double %81, %82
  %84 = fadd double %78, %77
  %85 = fsub double %84, %78
  %86 = fsub double %84, %85
  %87 = fsub double %77, %85
  %88 = fsub double %78, %86
  %89 = fadd double %87, %88
  %90 = fadd double %83, %89
  %91 = fadd double %65, %90
  %92 = fadd double %69, %72
  %93 = fsub double %92, %69
  %94 = fsub double %72, %93
  %95 = fadd double %94, %84
  %96 = fsub double %95, %94
  %97 = fsub double %84, %96
  %98 = fadd double %97, %91
  %99 = tail call double @llvm.amdgcn.ldexp.f64(double %92, i32 -2)
  %100 = tail call double @llvm.amdgcn.fract.f64(double %99)
  %101 = tail call i1 @llvm.amdgcn.class.f64(double %99, i32 516)
  %102 = select i1 %101, double 0.000000e+00, double %100
  %103 = tail call double @llvm.amdgcn.ldexp.f64(double %102, i32 2)
  %104 = fadd double %103, %95
  %105 = fcmp olt double %104, 0.000000e+00
  %106 = select i1 %105, double 4.000000e+00, double 0.000000e+00
  %107 = fadd double %103, %106
  %108 = fadd double %95, %107
  %109 = fptosi double %108 to i32
  %110 = sitofp i32 %109 to double
  %111 = fsub double %107, %110
  %112 = fadd double %95, %111
  %113 = fsub double %112, %111
  %114 = fsub double %95, %113
  %115 = fadd double %98, %114
  %116 = fcmp oge double %112, 5.000000e-01
  %117 = zext i1 %116 to i32
  %118 = add nsw i32 %117, %109
  %119 = select i1 %116, double 1.000000e+00, double 0.000000e+00
  %120 = fsub double %112, %119
  %121 = fadd double %120, %115
  %122 = fsub double %121, %120
  %123 = fsub double %115, %122
  %124 = fmul double %121, 0x3FF921FB54442D18
  %125 = fneg double %124
  %126 = tail call double @llvm.fma.f64(double %121, double 0x3FF921FB54442D18, double %125)
  %127 = tail call double @llvm.fma.f64(double %121, double 0x3C91A62633145C07, double %126)
  %128 = tail call double @llvm.fma.f64(double %123, double 0x3FF921FB54442D18, double %127)
  %129 = fadd double %124, %128
  %130 = fsub double %129, %124
  %131 = fsub double %128, %130
  br label %132

132:                                              ; preds = %37, %56
  %133 = phi double [ %54, %37 ], [ %131, %56 ]
  %134 = phi double [ %52, %37 ], [ %129, %56 ]
  %135 = phi i32 [ %55, %37 ], [ %118, %56 ]
  %136 = fmul double %134, %134
  %137 = fmul double %136, 5.000000e-01
  %138 = fsub double 1.000000e+00, %137
  %139 = fsub double 1.000000e+00, %138
  %140 = fsub double %139, %137
  %141 = fmul double %136, %136
  %142 = tail call double @llvm.fma.f64(double %136, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %143 = tail call double @llvm.fma.f64(double %136, double %142, double 0xBE927E4FA17F65F6)
  %144 = tail call double @llvm.fma.f64(double %136, double %143, double 0x3EFA01A019F4EC90)
  %145 = tail call double @llvm.fma.f64(double %136, double %144, double 0xBF56C16C16C16967)
  %146 = tail call double @llvm.fma.f64(double %136, double %145, double 0x3FA5555555555555)
  %147 = fneg double %133
  %148 = tail call double @llvm.fma.f64(double %134, double %147, double %140)
  %149 = tail call double @llvm.fma.f64(double %141, double %146, double %148)
  %150 = fadd double %138, %149
  %151 = tail call double @llvm.fma.f64(double %136, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %152 = tail call double @llvm.fma.f64(double %136, double %151, double 0x3EC71DE3796CDE01)
  %153 = tail call double @llvm.fma.f64(double %136, double %152, double 0xBF2A01A019E83E5C)
  %154 = tail call double @llvm.fma.f64(double %136, double %153, double 0x3F81111111110BB3)
  %155 = fneg double %136
  %156 = fmul double %134, %155
  %157 = fmul double %133, 5.000000e-01
  %158 = tail call double @llvm.fma.f64(double %156, double %154, double %157)
  %159 = tail call double @llvm.fma.f64(double %136, double %158, double %147)
  %160 = tail call double @llvm.fma.f64(double %156, double 0xBFC5555555555555, double %159)
  %161 = fsub double %134, %160
  %162 = fneg double %161
  %163 = and i32 %135, 1
  %164 = icmp eq i32 %163, 0
  %165 = select i1 %164, double %150, double %162
  %166 = bitcast double %165 to <2 x i32>
  %167 = shl i32 %135, 30
  %168 = and i32 %167, -2147483648
  %169 = extractelement <2 x i32> %166, i64 1
  %170 = xor i32 %169, %168
  %171 = insertelement <2 x i32> %166, i32 %170, i64 1
  %172 = tail call i1 @llvm.amdgcn.class.f64(double %35, i32 504)
  %173 = select i1 %172, <2 x i32> %171, <2 x i32> <i32 0, i32 2146959360>
  %174 = bitcast <2 x i32> %173 to double
  %175 = tail call double @llvm.fabs.f64(double %29)
  %176 = fcmp olt double %175, 0x41D0000000000000
  br i1 %176, label %177, label %196

177:                                              ; preds = %132
  %178 = fmul double %175, 0x3FE45F306DC9C883
  %179 = tail call double @llvm.rint.f64(double %178)
  %180 = tail call double @llvm.fma.f64(double %179, double 0xBFF921FB54442D18, double %175)
  %181 = tail call double @llvm.fma.f64(double %179, double 0xBC91A62633145C00, double %180)
  %182 = fmul double %179, 0x3C91A62633145C00
  %183 = fneg double %182
  %184 = tail call double @llvm.fma.f64(double %179, double 0x3C91A62633145C00, double %183)
  %185 = fsub double %180, %182
  %186 = fsub double %180, %185
  %187 = fsub double %186, %182
  %188 = fsub double %185, %181
  %189 = fadd double %188, %187
  %190 = fsub double %189, %184
  %191 = tail call double @llvm.fma.f64(double %179, double 0xB97B839A252049C0, double %190)
  %192 = fadd double %181, %191
  %193 = fsub double %192, %181
  %194 = fsub double %191, %193
  %195 = fptosi double %179 to i32
  br label %272

196:                                              ; preds = %132
  %197 = tail call double @llvm.amdgcn.trig.preop.f64(double %175, i32 0)
  %198 = tail call double @llvm.amdgcn.trig.preop.f64(double %175, i32 1)
  %199 = tail call double @llvm.amdgcn.trig.preop.f64(double %175, i32 2)
  %200 = fcmp oge double %175, 0x7B00000000000000
  %201 = tail call double @llvm.amdgcn.ldexp.f64(double %175, i32 -128)
  %202 = select i1 %200, double %201, double %175
  %203 = fmul double %199, %202
  %204 = fneg double %203
  %205 = tail call double @llvm.fma.f64(double %199, double %202, double %204)
  %206 = fmul double %198, %202
  %207 = fneg double %206
  %208 = tail call double @llvm.fma.f64(double %198, double %202, double %207)
  %209 = fmul double %197, %202
  %210 = fneg double %209
  %211 = tail call double @llvm.fma.f64(double %197, double %202, double %210)
  %212 = fadd double %206, %211
  %213 = fsub double %212, %206
  %214 = fsub double %212, %213
  %215 = fsub double %211, %213
  %216 = fsub double %206, %214
  %217 = fadd double %215, %216
  %218 = fadd double %203, %208
  %219 = fsub double %218, %203
  %220 = fsub double %218, %219
  %221 = fsub double %208, %219
  %222 = fsub double %203, %220
  %223 = fadd double %221, %222
  %224 = fadd double %218, %217
  %225 = fsub double %224, %218
  %226 = fsub double %224, %225
  %227 = fsub double %217, %225
  %228 = fsub double %218, %226
  %229 = fadd double %227, %228
  %230 = fadd double %223, %229
  %231 = fadd double %205, %230
  %232 = fadd double %209, %212
  %233 = fsub double %232, %209
  %234 = fsub double %212, %233
  %235 = fadd double %234, %224
  %236 = fsub double %235, %234
  %237 = fsub double %224, %236
  %238 = fadd double %237, %231
  %239 = tail call double @llvm.amdgcn.ldexp.f64(double %232, i32 -2)
  %240 = tail call double @llvm.amdgcn.fract.f64(double %239)
  %241 = tail call i1 @llvm.amdgcn.class.f64(double %239, i32 516)
  %242 = select i1 %241, double 0.000000e+00, double %240
  %243 = tail call double @llvm.amdgcn.ldexp.f64(double %242, i32 2)
  %244 = fadd double %243, %235
  %245 = fcmp olt double %244, 0.000000e+00
  %246 = select i1 %245, double 4.000000e+00, double 0.000000e+00
  %247 = fadd double %243, %246
  %248 = fadd double %235, %247
  %249 = fptosi double %248 to i32
  %250 = sitofp i32 %249 to double
  %251 = fsub double %247, %250
  %252 = fadd double %235, %251
  %253 = fsub double %252, %251
  %254 = fsub double %235, %253
  %255 = fadd double %238, %254
  %256 = fcmp oge double %252, 5.000000e-01
  %257 = zext i1 %256 to i32
  %258 = add nsw i32 %257, %249
  %259 = select i1 %256, double 1.000000e+00, double 0.000000e+00
  %260 = fsub double %252, %259
  %261 = fadd double %260, %255
  %262 = fsub double %261, %260
  %263 = fsub double %255, %262
  %264 = fmul double %261, 0x3FF921FB54442D18
  %265 = fneg double %264
  %266 = tail call double @llvm.fma.f64(double %261, double 0x3FF921FB54442D18, double %265)
  %267 = tail call double @llvm.fma.f64(double %261, double 0x3C91A62633145C07, double %266)
  %268 = tail call double @llvm.fma.f64(double %263, double 0x3FF921FB54442D18, double %267)
  %269 = fadd double %264, %268
  %270 = fsub double %269, %264
  %271 = fsub double %268, %270
  br label %272

272:                                              ; preds = %177, %196
  %273 = phi double [ %194, %177 ], [ %271, %196 ]
  %274 = phi double [ %192, %177 ], [ %269, %196 ]
  %275 = phi i32 [ %195, %177 ], [ %258, %196 ]
  %276 = fmul double %274, %274
  %277 = fmul double %276, 5.000000e-01
  %278 = fsub double 1.000000e+00, %277
  %279 = fsub double 1.000000e+00, %278
  %280 = fsub double %279, %277
  %281 = fmul double %276, %276
  %282 = tail call double @llvm.fma.f64(double %276, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %283 = tail call double @llvm.fma.f64(double %276, double %282, double 0xBE927E4FA17F65F6)
  %284 = tail call double @llvm.fma.f64(double %276, double %283, double 0x3EFA01A019F4EC90)
  %285 = tail call double @llvm.fma.f64(double %276, double %284, double 0xBF56C16C16C16967)
  %286 = tail call double @llvm.fma.f64(double %276, double %285, double 0x3FA5555555555555)
  %287 = fneg double %273
  %288 = tail call double @llvm.fma.f64(double %274, double %287, double %280)
  %289 = tail call double @llvm.fma.f64(double %281, double %286, double %288)
  %290 = fadd double %278, %289
  %291 = tail call double @llvm.fma.f64(double %276, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %292 = tail call double @llvm.fma.f64(double %276, double %291, double 0x3EC71DE3796CDE01)
  %293 = tail call double @llvm.fma.f64(double %276, double %292, double 0xBF2A01A019E83E5C)
  %294 = tail call double @llvm.fma.f64(double %276, double %293, double 0x3F81111111110BB3)
  %295 = fneg double %276
  %296 = fmul double %274, %295
  %297 = fmul double %273, 5.000000e-01
  %298 = tail call double @llvm.fma.f64(double %296, double %294, double %297)
  %299 = tail call double @llvm.fma.f64(double %276, double %298, double %287)
  %300 = tail call double @llvm.fma.f64(double %296, double 0xBFC5555555555555, double %299)
  %301 = fsub double %274, %300
  %302 = fneg double %301
  %303 = and i32 %275, 1
  %304 = icmp eq i32 %303, 0
  %305 = select i1 %304, double %290, double %302
  %306 = bitcast double %305 to <2 x i32>
  %307 = shl i32 %275, 30
  %308 = and i32 %307, -2147483648
  %309 = extractelement <2 x i32> %306, i64 1
  %310 = xor i32 %309, %308
  %311 = insertelement <2 x i32> %306, i32 %310, i64 1
  %312 = tail call i1 @llvm.amdgcn.class.f64(double %175, i32 504)
  %313 = select i1 %312, <2 x i32> %311, <2 x i32> <i32 0, i32 2146959360>
  %314 = bitcast <2 x i32> %313 to double
  br i1 %36, label %315, label %334

315:                                              ; preds = %272
  %316 = fmul double %35, 0x3FE45F306DC9C883
  %317 = tail call double @llvm.rint.f64(double %316)
  %318 = tail call double @llvm.fma.f64(double %317, double 0xBFF921FB54442D18, double %35)
  %319 = tail call double @llvm.fma.f64(double %317, double 0xBC91A62633145C00, double %318)
  %320 = fmul double %317, 0x3C91A62633145C00
  %321 = fneg double %320
  %322 = tail call double @llvm.fma.f64(double %317, double 0x3C91A62633145C00, double %321)
  %323 = fsub double %318, %320
  %324 = fsub double %318, %323
  %325 = fsub double %324, %320
  %326 = fsub double %323, %319
  %327 = fadd double %326, %325
  %328 = fsub double %327, %322
  %329 = tail call double @llvm.fma.f64(double %317, double 0xB97B839A252049C0, double %328)
  %330 = fadd double %319, %329
  %331 = fsub double %330, %319
  %332 = fsub double %329, %331
  %333 = fptosi double %317 to i32
  br label %410

334:                                              ; preds = %272
  %335 = tail call double @llvm.amdgcn.trig.preop.f64(double %35, i32 0)
  %336 = tail call double @llvm.amdgcn.trig.preop.f64(double %35, i32 1)
  %337 = tail call double @llvm.amdgcn.trig.preop.f64(double %35, i32 2)
  %338 = fcmp oge double %35, 0x7B00000000000000
  %339 = tail call double @llvm.amdgcn.ldexp.f64(double %35, i32 -128)
  %340 = select i1 %338, double %339, double %35
  %341 = fmul double %337, %340
  %342 = fneg double %341
  %343 = tail call double @llvm.fma.f64(double %337, double %340, double %342)
  %344 = fmul double %336, %340
  %345 = fneg double %344
  %346 = tail call double @llvm.fma.f64(double %336, double %340, double %345)
  %347 = fmul double %335, %340
  %348 = fneg double %347
  %349 = tail call double @llvm.fma.f64(double %335, double %340, double %348)
  %350 = fadd double %344, %349
  %351 = fsub double %350, %344
  %352 = fsub double %350, %351
  %353 = fsub double %349, %351
  %354 = fsub double %344, %352
  %355 = fadd double %353, %354
  %356 = fadd double %341, %346
  %357 = fsub double %356, %341
  %358 = fsub double %356, %357
  %359 = fsub double %346, %357
  %360 = fsub double %341, %358
  %361 = fadd double %359, %360
  %362 = fadd double %356, %355
  %363 = fsub double %362, %356
  %364 = fsub double %362, %363
  %365 = fsub double %355, %363
  %366 = fsub double %356, %364
  %367 = fadd double %365, %366
  %368 = fadd double %361, %367
  %369 = fadd double %343, %368
  %370 = fadd double %347, %350
  %371 = fsub double %370, %347
  %372 = fsub double %350, %371
  %373 = fadd double %372, %362
  %374 = fsub double %373, %372
  %375 = fsub double %362, %374
  %376 = fadd double %375, %369
  %377 = tail call double @llvm.amdgcn.ldexp.f64(double %370, i32 -2)
  %378 = tail call double @llvm.amdgcn.fract.f64(double %377)
  %379 = tail call i1 @llvm.amdgcn.class.f64(double %377, i32 516)
  %380 = select i1 %379, double 0.000000e+00, double %378
  %381 = tail call double @llvm.amdgcn.ldexp.f64(double %380, i32 2)
  %382 = fadd double %381, %373
  %383 = fcmp olt double %382, 0.000000e+00
  %384 = select i1 %383, double 4.000000e+00, double 0.000000e+00
  %385 = fadd double %381, %384
  %386 = fadd double %373, %385
  %387 = fptosi double %386 to i32
  %388 = sitofp i32 %387 to double
  %389 = fsub double %385, %388
  %390 = fadd double %373, %389
  %391 = fsub double %390, %389
  %392 = fsub double %373, %391
  %393 = fadd double %376, %392
  %394 = fcmp oge double %390, 5.000000e-01
  %395 = zext i1 %394 to i32
  %396 = add nsw i32 %395, %387
  %397 = select i1 %394, double 1.000000e+00, double 0.000000e+00
  %398 = fsub double %390, %397
  %399 = fadd double %398, %393
  %400 = fsub double %399, %398
  %401 = fsub double %393, %400
  %402 = fmul double %399, 0x3FF921FB54442D18
  %403 = fneg double %402
  %404 = tail call double @llvm.fma.f64(double %399, double 0x3FF921FB54442D18, double %403)
  %405 = tail call double @llvm.fma.f64(double %399, double 0x3C91A62633145C07, double %404)
  %406 = tail call double @llvm.fma.f64(double %401, double 0x3FF921FB54442D18, double %405)
  %407 = fadd double %402, %406
  %408 = fsub double %407, %402
  %409 = fsub double %406, %408
  br label %410

410:                                              ; preds = %315, %334
  %411 = phi double [ %332, %315 ], [ %409, %334 ]
  %412 = phi double [ %330, %315 ], [ %407, %334 ]
  %413 = phi i32 [ %333, %315 ], [ %396, %334 ]
  %414 = fmul double %412, %412
  %415 = fmul double %414, 5.000000e-01
  %416 = fsub double 1.000000e+00, %415
  %417 = fsub double 1.000000e+00, %416
  %418 = fsub double %417, %415
  %419 = fmul double %414, %414
  %420 = tail call double @llvm.fma.f64(double %414, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %421 = tail call double @llvm.fma.f64(double %414, double %420, double 0xBE927E4FA17F65F6)
  %422 = tail call double @llvm.fma.f64(double %414, double %421, double 0x3EFA01A019F4EC90)
  %423 = tail call double @llvm.fma.f64(double %414, double %422, double 0xBF56C16C16C16967)
  %424 = tail call double @llvm.fma.f64(double %414, double %423, double 0x3FA5555555555555)
  %425 = fneg double %411
  %426 = tail call double @llvm.fma.f64(double %412, double %425, double %418)
  %427 = tail call double @llvm.fma.f64(double %419, double %424, double %426)
  %428 = fadd double %416, %427
  %429 = tail call double @llvm.fma.f64(double %414, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %430 = tail call double @llvm.fma.f64(double %414, double %429, double 0x3EC71DE3796CDE01)
  %431 = tail call double @llvm.fma.f64(double %414, double %430, double 0xBF2A01A019E83E5C)
  %432 = tail call double @llvm.fma.f64(double %414, double %431, double 0x3F81111111110BB3)
  %433 = fneg double %414
  %434 = fmul double %412, %433
  %435 = fmul double %411, 5.000000e-01
  %436 = tail call double @llvm.fma.f64(double %434, double %432, double %435)
  %437 = tail call double @llvm.fma.f64(double %414, double %436, double %425)
  %438 = tail call double @llvm.fma.f64(double %434, double 0xBFC5555555555555, double %437)
  %439 = fsub double %412, %438
  %440 = and i32 %413, 1
  %441 = icmp eq i32 %440, 0
  %442 = select i1 %441, double %439, double %428
  %443 = bitcast double %442 to <2 x i32>
  %444 = shl i32 %413, 30
  %445 = bitcast double %34 to <2 x i32>
  %446 = extractelement <2 x i32> %445, i64 1
  %447 = xor i32 %444, %446
  %448 = and i32 %447, -2147483648
  %449 = extractelement <2 x i32> %443, i64 1
  %450 = xor i32 %449, %448
  %451 = insertelement <2 x i32> %443, i32 %450, i64 1
  %452 = select i1 %172, <2 x i32> %451, <2 x i32> <i32 0, i32 2146959360>
  %453 = bitcast <2 x i32> %452 to double
  br i1 %176, label %454, label %473

454:                                              ; preds = %410
  %455 = fmul double %175, 0x3FE45F306DC9C883
  %456 = tail call double @llvm.rint.f64(double %455)
  %457 = tail call double @llvm.fma.f64(double %456, double 0xBFF921FB54442D18, double %175)
  %458 = tail call double @llvm.fma.f64(double %456, double 0xBC91A62633145C00, double %457)
  %459 = fmul double %456, 0x3C91A62633145C00
  %460 = fneg double %459
  %461 = tail call double @llvm.fma.f64(double %456, double 0x3C91A62633145C00, double %460)
  %462 = fsub double %457, %459
  %463 = fsub double %457, %462
  %464 = fsub double %463, %459
  %465 = fsub double %462, %458
  %466 = fadd double %465, %464
  %467 = fsub double %466, %461
  %468 = tail call double @llvm.fma.f64(double %456, double 0xB97B839A252049C0, double %467)
  %469 = fadd double %458, %468
  %470 = fsub double %469, %458
  %471 = fsub double %468, %470
  %472 = fptosi double %456 to i32
  br label %549

473:                                              ; preds = %410
  %474 = tail call double @llvm.amdgcn.trig.preop.f64(double %175, i32 0)
  %475 = tail call double @llvm.amdgcn.trig.preop.f64(double %175, i32 1)
  %476 = tail call double @llvm.amdgcn.trig.preop.f64(double %175, i32 2)
  %477 = fcmp oge double %175, 0x7B00000000000000
  %478 = tail call double @llvm.amdgcn.ldexp.f64(double %175, i32 -128)
  %479 = select i1 %477, double %478, double %175
  %480 = fmul double %476, %479
  %481 = fneg double %480
  %482 = tail call double @llvm.fma.f64(double %476, double %479, double %481)
  %483 = fmul double %475, %479
  %484 = fneg double %483
  %485 = tail call double @llvm.fma.f64(double %475, double %479, double %484)
  %486 = fmul double %474, %479
  %487 = fneg double %486
  %488 = tail call double @llvm.fma.f64(double %474, double %479, double %487)
  %489 = fadd double %483, %488
  %490 = fsub double %489, %483
  %491 = fsub double %489, %490
  %492 = fsub double %488, %490
  %493 = fsub double %483, %491
  %494 = fadd double %492, %493
  %495 = fadd double %480, %485
  %496 = fsub double %495, %480
  %497 = fsub double %495, %496
  %498 = fsub double %485, %496
  %499 = fsub double %480, %497
  %500 = fadd double %498, %499
  %501 = fadd double %495, %494
  %502 = fsub double %501, %495
  %503 = fsub double %501, %502
  %504 = fsub double %494, %502
  %505 = fsub double %495, %503
  %506 = fadd double %504, %505
  %507 = fadd double %500, %506
  %508 = fadd double %482, %507
  %509 = fadd double %486, %489
  %510 = fsub double %509, %486
  %511 = fsub double %489, %510
  %512 = fadd double %511, %501
  %513 = fsub double %512, %511
  %514 = fsub double %501, %513
  %515 = fadd double %514, %508
  %516 = tail call double @llvm.amdgcn.ldexp.f64(double %509, i32 -2)
  %517 = tail call double @llvm.amdgcn.fract.f64(double %516)
  %518 = tail call i1 @llvm.amdgcn.class.f64(double %516, i32 516)
  %519 = select i1 %518, double 0.000000e+00, double %517
  %520 = tail call double @llvm.amdgcn.ldexp.f64(double %519, i32 2)
  %521 = fadd double %520, %512
  %522 = fcmp olt double %521, 0.000000e+00
  %523 = select i1 %522, double 4.000000e+00, double 0.000000e+00
  %524 = fadd double %520, %523
  %525 = fadd double %512, %524
  %526 = fptosi double %525 to i32
  %527 = sitofp i32 %526 to double
  %528 = fsub double %524, %527
  %529 = fadd double %512, %528
  %530 = fsub double %529, %528
  %531 = fsub double %512, %530
  %532 = fadd double %515, %531
  %533 = fcmp oge double %529, 5.000000e-01
  %534 = zext i1 %533 to i32
  %535 = add nsw i32 %534, %526
  %536 = select i1 %533, double 1.000000e+00, double 0.000000e+00
  %537 = fsub double %529, %536
  %538 = fadd double %537, %532
  %539 = fsub double %538, %537
  %540 = fsub double %532, %539
  %541 = fmul double %538, 0x3FF921FB54442D18
  %542 = fneg double %541
  %543 = tail call double @llvm.fma.f64(double %538, double 0x3FF921FB54442D18, double %542)
  %544 = tail call double @llvm.fma.f64(double %538, double 0x3C91A62633145C07, double %543)
  %545 = tail call double @llvm.fma.f64(double %540, double 0x3FF921FB54442D18, double %544)
  %546 = fadd double %541, %545
  %547 = fsub double %546, %541
  %548 = fsub double %545, %547
  br label %549

549:                                              ; preds = %454, %473
  %550 = phi double [ %471, %454 ], [ %548, %473 ]
  %551 = phi double [ %469, %454 ], [ %546, %473 ]
  %552 = phi i32 [ %472, %454 ], [ %535, %473 ]
  %553 = fmul double %551, %551
  %554 = fmul double %553, 5.000000e-01
  %555 = fsub double 1.000000e+00, %554
  %556 = fsub double 1.000000e+00, %555
  %557 = fsub double %556, %554
  %558 = fmul double %553, %553
  %559 = tail call double @llvm.fma.f64(double %553, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %560 = tail call double @llvm.fma.f64(double %553, double %559, double 0xBE927E4FA17F65F6)
  %561 = tail call double @llvm.fma.f64(double %553, double %560, double 0x3EFA01A019F4EC90)
  %562 = tail call double @llvm.fma.f64(double %553, double %561, double 0xBF56C16C16C16967)
  %563 = tail call double @llvm.fma.f64(double %553, double %562, double 0x3FA5555555555555)
  %564 = fneg double %550
  %565 = tail call double @llvm.fma.f64(double %551, double %564, double %557)
  %566 = tail call double @llvm.fma.f64(double %558, double %563, double %565)
  %567 = fadd double %555, %566
  %568 = tail call double @llvm.fma.f64(double %553, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %569 = tail call double @llvm.fma.f64(double %553, double %568, double 0x3EC71DE3796CDE01)
  %570 = tail call double @llvm.fma.f64(double %553, double %569, double 0xBF2A01A019E83E5C)
  %571 = tail call double @llvm.fma.f64(double %553, double %570, double 0x3F81111111110BB3)
  %572 = fneg double %553
  %573 = fmul double %551, %572
  %574 = fmul double %550, 5.000000e-01
  %575 = tail call double @llvm.fma.f64(double %573, double %571, double %574)
  %576 = tail call double @llvm.fma.f64(double %553, double %575, double %564)
  %577 = tail call double @llvm.fma.f64(double %573, double 0xBFC5555555555555, double %576)
  %578 = fsub double %551, %577
  %579 = and i32 %552, 1
  %580 = icmp eq i32 %579, 0
  %581 = select i1 %580, double %578, double %567
  %582 = bitcast double %581 to <2 x i32>
  %583 = shl i32 %552, 30
  %584 = bitcast double %29 to <2 x i32>
  %585 = extractelement <2 x i32> %584, i64 1
  %586 = xor i32 %583, %585
  %587 = and i32 %586, -2147483648
  %588 = extractelement <2 x i32> %582, i64 1
  %589 = xor i32 %588, %587
  %590 = insertelement <2 x i32> %582, i32 %589, i64 1
  %591 = select i1 %312, <2 x i32> %590, <2 x i32> <i32 0, i32 2146959360>
  %592 = bitcast <2 x i32> %591 to double
  %593 = load double, double addrspace(1)* %22, align 8, !tbaa !7
  %594 = fsub contract double %33, %593
  %595 = tail call double @llvm.fabs.f64(double %594)
  %596 = fcmp olt double %595, 0x41D0000000000000
  br i1 %596, label %597, label %654

597:                                              ; preds = %549
  %598 = fmul double %595, 0x3FE45F306DC9C883
  %599 = tail call double @llvm.rint.f64(double %598)
  %600 = tail call double @llvm.fma.f64(double %599, double 0xBFF921FB54442D18, double %595)
  %601 = tail call double @llvm.fma.f64(double %599, double 0xBC91A62633145C00, double %600)
  %602 = fmul double %599, 0x3C91A62633145C00
  %603 = fneg double %602
  %604 = tail call double @llvm.fma.f64(double %599, double 0x3C91A62633145C00, double %603)
  %605 = fsub double %600, %602
  %606 = fsub double %600, %605
  %607 = fsub double %606, %602
  %608 = fsub double %605, %601
  %609 = fadd double %608, %607
  %610 = fsub double %609, %604
  %611 = tail call double @llvm.fma.f64(double %599, double 0xB97B839A252049C0, double %610)
  %612 = fadd double %601, %611
  %613 = fsub double %612, %601
  %614 = fsub double %611, %613
  %615 = fptosi double %599 to i32
  %616 = fmul double %612, %612
  %617 = fmul double %616, 5.000000e-01
  %618 = fsub double 1.000000e+00, %617
  %619 = fsub double 1.000000e+00, %618
  %620 = fsub double %619, %617
  %621 = fmul double %616, %616
  %622 = tail call double @llvm.fma.f64(double %616, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %623 = tail call double @llvm.fma.f64(double %616, double %622, double 0xBE927E4FA17F65F6)
  %624 = tail call double @llvm.fma.f64(double %616, double %623, double 0x3EFA01A019F4EC90)
  %625 = tail call double @llvm.fma.f64(double %616, double %624, double 0xBF56C16C16C16967)
  %626 = tail call double @llvm.fma.f64(double %616, double %625, double 0x3FA5555555555555)
  %627 = fneg double %614
  %628 = tail call double @llvm.fma.f64(double %612, double %627, double %620)
  %629 = tail call double @llvm.fma.f64(double %621, double %626, double %628)
  %630 = fadd double %618, %629
  %631 = tail call double @llvm.fma.f64(double %616, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %632 = tail call double @llvm.fma.f64(double %616, double %631, double 0x3EC71DE3796CDE01)
  %633 = tail call double @llvm.fma.f64(double %616, double %632, double 0xBF2A01A019E83E5C)
  %634 = tail call double @llvm.fma.f64(double %616, double %633, double 0x3F81111111110BB3)
  %635 = fneg double %616
  %636 = fmul double %612, %635
  %637 = fmul double %614, 5.000000e-01
  %638 = tail call double @llvm.fma.f64(double %636, double %634, double %637)
  %639 = tail call double @llvm.fma.f64(double %616, double %638, double %627)
  %640 = tail call double @llvm.fma.f64(double %636, double 0xBFC5555555555555, double %639)
  %641 = fsub double %612, %640
  %642 = fneg double %641
  %643 = and i32 %615, 1
  %644 = icmp eq i32 %643, 0
  %645 = select i1 %644, double %630, double %642
  %646 = bitcast double %645 to <2 x i32>
  %647 = shl i32 %615, 30
  %648 = and i32 %647, -2147483648
  %649 = extractelement <2 x i32> %646, i64 1
  %650 = xor i32 %649, %648
  %651 = insertelement <2 x i32> %646, i32 %650, i64 1
  %652 = tail call i1 @llvm.amdgcn.class.f64(double %595, i32 504)
  %653 = select i1 %652, <2 x i32> %651, <2 x i32> <i32 0, i32 2146959360>
  br label %768

654:                                              ; preds = %549
  %655 = tail call double @llvm.amdgcn.trig.preop.f64(double %595, i32 0)
  %656 = tail call double @llvm.amdgcn.trig.preop.f64(double %595, i32 1)
  %657 = tail call double @llvm.amdgcn.trig.preop.f64(double %595, i32 2)
  %658 = fcmp oge double %595, 0x7B00000000000000
  %659 = tail call double @llvm.amdgcn.ldexp.f64(double %595, i32 -128)
  %660 = select i1 %658, double %659, double %595
  %661 = fmul double %657, %660
  %662 = fneg double %661
  %663 = tail call double @llvm.fma.f64(double %657, double %660, double %662)
  %664 = fmul double %656, %660
  %665 = fneg double %664
  %666 = tail call double @llvm.fma.f64(double %656, double %660, double %665)
  %667 = fmul double %655, %660
  %668 = fneg double %667
  %669 = tail call double @llvm.fma.f64(double %655, double %660, double %668)
  %670 = fadd double %664, %669
  %671 = fsub double %670, %664
  %672 = fsub double %670, %671
  %673 = fsub double %669, %671
  %674 = fsub double %664, %672
  %675 = fadd double %673, %674
  %676 = fadd double %661, %666
  %677 = fsub double %676, %661
  %678 = fsub double %676, %677
  %679 = fsub double %666, %677
  %680 = fsub double %661, %678
  %681 = fadd double %679, %680
  %682 = fadd double %676, %675
  %683 = fsub double %682, %676
  %684 = fsub double %682, %683
  %685 = fsub double %675, %683
  %686 = fsub double %676, %684
  %687 = fadd double %685, %686
  %688 = fadd double %681, %687
  %689 = fadd double %663, %688
  %690 = fadd double %667, %670
  %691 = fsub double %690, %667
  %692 = fsub double %670, %691
  %693 = fadd double %692, %682
  %694 = fsub double %693, %692
  %695 = fsub double %682, %694
  %696 = fadd double %695, %689
  %697 = tail call double @llvm.amdgcn.ldexp.f64(double %690, i32 -2)
  %698 = tail call double @llvm.amdgcn.fract.f64(double %697)
  %699 = tail call i1 @llvm.amdgcn.class.f64(double %697, i32 516)
  %700 = select i1 %699, double 0.000000e+00, double %698
  %701 = tail call double @llvm.amdgcn.ldexp.f64(double %700, i32 2)
  %702 = fadd double %701, %693
  %703 = fcmp olt double %702, 0.000000e+00
  %704 = select i1 %703, double 4.000000e+00, double 0.000000e+00
  %705 = fadd double %701, %704
  %706 = fadd double %693, %705
  %707 = fptosi double %706 to i32
  %708 = sitofp i32 %707 to double
  %709 = fsub double %705, %708
  %710 = fadd double %693, %709
  %711 = fsub double %710, %709
  %712 = fsub double %693, %711
  %713 = fadd double %696, %712
  %714 = fcmp oge double %710, 5.000000e-01
  %715 = zext i1 %714 to i32
  %716 = add nsw i32 %715, %707
  %717 = select i1 %714, double 1.000000e+00, double 0.000000e+00
  %718 = fsub double %710, %717
  %719 = fadd double %718, %713
  %720 = fsub double %719, %718
  %721 = fsub double %713, %720
  %722 = fmul double %719, 0x3FF921FB54442D18
  %723 = fneg double %722
  %724 = tail call double @llvm.fma.f64(double %719, double 0x3FF921FB54442D18, double %723)
  %725 = tail call double @llvm.fma.f64(double %719, double 0x3C91A62633145C07, double %724)
  %726 = tail call double @llvm.fma.f64(double %721, double 0x3FF921FB54442D18, double %725)
  %727 = fadd double %722, %726
  %728 = fsub double %727, %722
  %729 = fsub double %726, %728
  %730 = fmul double %727, %727
  %731 = fmul double %730, 5.000000e-01
  %732 = fsub double 1.000000e+00, %731
  %733 = fsub double 1.000000e+00, %732
  %734 = fsub double %733, %731
  %735 = fmul double %730, %730
  %736 = tail call double @llvm.fma.f64(double %730, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %737 = tail call double @llvm.fma.f64(double %730, double %736, double 0xBE927E4FA17F65F6)
  %738 = tail call double @llvm.fma.f64(double %730, double %737, double 0x3EFA01A019F4EC90)
  %739 = tail call double @llvm.fma.f64(double %730, double %738, double 0xBF56C16C16C16967)
  %740 = tail call double @llvm.fma.f64(double %730, double %739, double 0x3FA5555555555555)
  %741 = fneg double %729
  %742 = tail call double @llvm.fma.f64(double %727, double %741, double %734)
  %743 = tail call double @llvm.fma.f64(double %735, double %740, double %742)
  %744 = fadd double %732, %743
  %745 = tail call double @llvm.fma.f64(double %730, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %746 = tail call double @llvm.fma.f64(double %730, double %745, double 0x3EC71DE3796CDE01)
  %747 = tail call double @llvm.fma.f64(double %730, double %746, double 0xBF2A01A019E83E5C)
  %748 = tail call double @llvm.fma.f64(double %730, double %747, double 0x3F81111111110BB3)
  %749 = fneg double %730
  %750 = fmul double %727, %749
  %751 = fmul double %729, 5.000000e-01
  %752 = tail call double @llvm.fma.f64(double %750, double %748, double %751)
  %753 = tail call double @llvm.fma.f64(double %730, double %752, double %741)
  %754 = tail call double @llvm.fma.f64(double %750, double 0xBFC5555555555555, double %753)
  %755 = fsub double %727, %754
  %756 = fneg double %755
  %757 = and i32 %716, 1
  %758 = icmp eq i32 %757, 0
  %759 = select i1 %758, double %744, double %756
  %760 = bitcast double %759 to <2 x i32>
  %761 = shl i32 %716, 30
  %762 = and i32 %761, -2147483648
  %763 = extractelement <2 x i32> %760, i64 1
  %764 = xor i32 %763, %762
  %765 = insertelement <2 x i32> %760, i32 %764, i64 1
  %766 = tail call i1 @llvm.amdgcn.class.f64(double %595, i32 504)
  %767 = select i1 %766, <2 x i32> %765, <2 x i32> <i32 0, i32 2146959360>
  br label %768

768:                                              ; preds = %597, %654
  %769 = phi i32 [ %647, %597 ], [ %761, %654 ]
  %770 = phi i32 [ %643, %597 ], [ %757, %654 ]
  %771 = phi double [ %641, %597 ], [ %755, %654 ]
  %772 = phi double [ %630, %597 ], [ %744, %654 ]
  %773 = phi <2 x i32> [ %653, %597 ], [ %767, %654 ]
  %774 = phi i1 [ %652, %597 ], [ %766, %654 ]
  %775 = bitcast <2 x i32> %773 to double
  %776 = icmp eq i32 %770, 0
  %777 = select i1 %776, double %771, double %772
  %778 = bitcast double %777 to <2 x i32>
  %779 = bitcast double %594 to <2 x i32>
  %780 = extractelement <2 x i32> %779, i64 1
  %781 = xor i32 %769, %780
  %782 = and i32 %781, -2147483648
  %783 = extractelement <2 x i32> %778, i64 1
  %784 = xor i32 %783, %782
  %785 = insertelement <2 x i32> %778, i32 %784, i64 1
  %786 = select i1 %774, <2 x i32> %785, <2 x i32> <i32 0, i32 2146959360>
  %787 = bitcast <2 x i32> %786 to double
  %788 = fmul contract double %314, %787
  %789 = tail call double @llvm.fabs.f64(double %788)
  %790 = tail call double @llvm.amdgcn.frexp.mant.f64(double %789)
  %791 = fcmp olt double %790, 0x3FE5555555555555
  %792 = zext i1 %791 to i32
  %793 = tail call double @llvm.amdgcn.ldexp.f64(double %790, i32 %792)
  %794 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %789)
  %795 = sub nsw i32 %794, %792
  %796 = fadd double %793, -1.000000e+00
  %797 = fadd double %793, 1.000000e+00
  %798 = fadd double %797, -1.000000e+00
  %799 = fsub double %793, %798
  %800 = tail call double @llvm.amdgcn.rcp.f64(double %797)
  %801 = fneg double %797
  %802 = tail call double @llvm.fma.f64(double %801, double %800, double 1.000000e+00)
  %803 = tail call double @llvm.fma.f64(double %802, double %800, double %800)
  %804 = tail call double @llvm.fma.f64(double %801, double %803, double 1.000000e+00)
  %805 = tail call double @llvm.fma.f64(double %804, double %803, double %803)
  %806 = fmul double %796, %805
  %807 = fmul double %797, %806
  %808 = fneg double %807
  %809 = tail call double @llvm.fma.f64(double %806, double %797, double %808)
  %810 = tail call double @llvm.fma.f64(double %806, double %799, double %809)
  %811 = fadd double %807, %810
  %812 = fsub double %811, %807
  %813 = fsub double %810, %812
  %814 = fsub double %796, %811
  %815 = fsub double %796, %814
  %816 = fsub double %815, %811
  %817 = fsub double %816, %813
  %818 = fadd double %814, %817
  %819 = fmul double %805, %818
  %820 = fadd double %806, %819
  %821 = fsub double %820, %806
  %822 = fsub double %819, %821
  %823 = fmul double %820, %820
  %824 = fneg double %823
  %825 = tail call double @llvm.fma.f64(double %820, double %820, double %824)
  %826 = fmul double %822, 2.000000e+00
  %827 = tail call double @llvm.fma.f64(double %820, double %826, double %825)
  %828 = fadd double %823, %827
  %829 = fsub double %828, %823
  %830 = fsub double %827, %829
  %831 = tail call double @llvm.fma.f64(double %828, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %832 = tail call double @llvm.fma.f64(double %828, double %831, double 0x3FBE25E43ABE935A)
  %833 = tail call double @llvm.fma.f64(double %828, double %832, double 0x3FC110EF47E6C9C2)
  %834 = tail call double @llvm.fma.f64(double %828, double %833, double 0x3FC3B13BCFA74449)
  %835 = tail call double @llvm.fma.f64(double %828, double %834, double 0x3FC745D171BF3C30)
  %836 = tail call double @llvm.fma.f64(double %828, double %835, double 0x3FCC71C71C7792CE)
  %837 = tail call double @llvm.fma.f64(double %828, double %836, double 0x3FD24924924920DA)
  %838 = tail call double @llvm.fma.f64(double %828, double %837, double 0x3FD999999999999C)
  %839 = sitofp i32 %795 to double
  %840 = fmul double %839, 0x3FE62E42FEFA39EF
  %841 = fneg double %840
  %842 = tail call double @llvm.fma.f64(double %839, double 0x3FE62E42FEFA39EF, double %841)
  %843 = tail call double @llvm.fma.f64(double %839, double 0x3C7ABC9E3B39803F, double %842)
  %844 = fadd double %840, %843
  %845 = fsub double %844, %840
  %846 = fsub double %843, %845
  %847 = tail call double @llvm.amdgcn.ldexp.f64(double %820, i32 1)
  %848 = tail call double @llvm.amdgcn.ldexp.f64(double %822, i32 1)
  %849 = fmul double %820, %828
  %850 = fneg double %849
  %851 = tail call double @llvm.fma.f64(double %828, double %820, double %850)
  %852 = tail call double @llvm.fma.f64(double %828, double %822, double %851)
  %853 = tail call double @llvm.fma.f64(double %830, double %820, double %852)
  %854 = fadd double %849, %853
  %855 = fsub double %854, %849
  %856 = fsub double %853, %855
  %857 = fmul double %828, %838
  %858 = fneg double %857
  %859 = tail call double @llvm.fma.f64(double %828, double %838, double %858)
  %860 = tail call double @llvm.fma.f64(double %830, double %838, double %859)
  %861 = fadd double %857, %860
  %862 = fsub double %861, %857
  %863 = fsub double %860, %862
  %864 = fadd double %861, 0x3FE5555555555555
  %865 = fadd double %864, 0xBFE5555555555555
  %866 = fsub double %861, %865
  %867 = fadd double %863, 0x3C8543B0D5DF274D
  %868 = fadd double %867, %866
  %869 = fadd double %864, %868
  %870 = fsub double %869, %864
  %871 = fsub double %868, %870
  %872 = fmul double %854, %869
  %873 = fneg double %872
  %874 = tail call double @llvm.fma.f64(double %854, double %869, double %873)
  %875 = tail call double @llvm.fma.f64(double %854, double %871, double %874)
  %876 = tail call double @llvm.fma.f64(double %856, double %869, double %875)
  %877 = fadd double %872, %876
  %878 = fsub double %877, %872
  %879 = fsub double %876, %878
  %880 = fadd double %847, %877
  %881 = fsub double %880, %847
  %882 = fsub double %877, %881
  %883 = fadd double %848, %879
  %884 = fadd double %883, %882
  %885 = fadd double %880, %884
  %886 = fsub double %885, %880
  %887 = fsub double %884, %886
  %888 = fadd double %844, %885
  %889 = fsub double %888, %844
  %890 = fsub double %888, %889
  %891 = fsub double %844, %890
  %892 = fsub double %885, %889
  %893 = fadd double %892, %891
  %894 = fadd double %846, %887
  %895 = fsub double %894, %846
  %896 = fsub double %894, %895
  %897 = fsub double %846, %896
  %898 = fsub double %887, %895
  %899 = fadd double %898, %897
  %900 = fadd double %894, %893
  %901 = fadd double %888, %900
  %902 = fsub double %901, %888
  %903 = fsub double %900, %902
  %904 = fadd double %899, %903
  %905 = fadd double %901, %904
  %906 = fsub double %905, %901
  %907 = fsub double %904, %906
  %908 = fmul double %905, 2.000000e+00
  %909 = fneg double %908
  %910 = tail call double @llvm.fma.f64(double %905, double 2.000000e+00, double %909)
  %911 = tail call double @llvm.fma.f64(double %907, double 2.000000e+00, double %910)
  %912 = fadd double %908, %911
  %913 = fsub double %912, %908
  %914 = fsub double %911, %913
  %915 = tail call double @llvm.fabs.f64(double %908) #3
  %916 = fcmp oeq double %915, 0x7FF0000000000000
  %917 = select i1 %916, double %908, double %912
  %918 = tail call double @llvm.fabs.f64(double %917) #3
  %919 = fcmp oeq double %918, 0x7FF0000000000000
  %920 = select i1 %919, double 0.000000e+00, double %914
  %921 = fmul double %917, 0x3FF71547652B82FE
  %922 = tail call double @llvm.rint.f64(double %921)
  %923 = fneg double %922
  %924 = tail call double @llvm.fma.f64(double %923, double 0x3FE62E42FEFA39EF, double %917)
  %925 = tail call double @llvm.fma.f64(double %923, double 0x3C7ABC9E3B39803F, double %924)
  %926 = tail call double @llvm.fma.f64(double %925, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %927 = tail call double @llvm.fma.f64(double %925, double %926, double 0x3EC71DEE623FDE64)
  %928 = tail call double @llvm.fma.f64(double %925, double %927, double 0x3EFA01997C89E6B0)
  %929 = tail call double @llvm.fma.f64(double %925, double %928, double 0x3F2A01A014761F6E)
  %930 = tail call double @llvm.fma.f64(double %925, double %929, double 0x3F56C16C1852B7B0)
  %931 = tail call double @llvm.fma.f64(double %925, double %930, double 0x3F81111111122322)
  %932 = tail call double @llvm.fma.f64(double %925, double %931, double 0x3FA55555555502A1)
  %933 = tail call double @llvm.fma.f64(double %925, double %932, double 0x3FC5555555555511)
  %934 = tail call double @llvm.fma.f64(double %925, double %933, double 0x3FE000000000000B)
  %935 = tail call double @llvm.fma.f64(double %925, double %934, double 1.000000e+00)
  %936 = tail call double @llvm.fma.f64(double %925, double %935, double 1.000000e+00)
  %937 = fptosi double %922 to i32
  %938 = tail call double @llvm.amdgcn.ldexp.f64(double %936, i32 %937)
  %939 = fcmp ogt double %917, 1.024000e+03
  %940 = select i1 %939, double 0x7FF0000000000000, double %938
  %941 = fcmp olt double %917, -1.075000e+03
  %942 = select i1 %941, double 0.000000e+00, double %940
  %943 = tail call double @llvm.fma.f64(double %942, double %920, double %942)
  %944 = tail call double @llvm.fabs.f64(double %942) #3
  %945 = fcmp oeq double %944, 0x7FF0000000000000
  %946 = select i1 %945, double %942, double %943
  %947 = tail call double @llvm.fabs.f64(double %946)
  %948 = fcmp oeq double %789, 0x7FF0000000000000
  %949 = fcmp oeq double %788, 0.000000e+00
  %950 = select i1 %948, double 0x7FF0000000000000, double %947
  %951 = select i1 %949, double 0.000000e+00, double %950
  %952 = fcmp uno double %788, 0.000000e+00
  %953 = select i1 %952, double 0x7FF8000000000000, double %951
  %954 = fmul contract double %174, %592
  %955 = fmul contract double %314, %453
  %956 = fmul contract double %955, %775
  %957 = fsub contract double %954, %956
  %958 = tail call double @llvm.fabs.f64(double %957)
  %959 = tail call double @llvm.amdgcn.frexp.mant.f64(double %958)
  %960 = fcmp olt double %959, 0x3FE5555555555555
  %961 = zext i1 %960 to i32
  %962 = tail call double @llvm.amdgcn.ldexp.f64(double %959, i32 %961)
  %963 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %958)
  %964 = sub nsw i32 %963, %961
  %965 = fadd double %962, -1.000000e+00
  %966 = fadd double %962, 1.000000e+00
  %967 = fadd double %966, -1.000000e+00
  %968 = fsub double %962, %967
  %969 = tail call double @llvm.amdgcn.rcp.f64(double %966)
  %970 = fneg double %966
  %971 = tail call double @llvm.fma.f64(double %970, double %969, double 1.000000e+00)
  %972 = tail call double @llvm.fma.f64(double %971, double %969, double %969)
  %973 = tail call double @llvm.fma.f64(double %970, double %972, double 1.000000e+00)
  %974 = tail call double @llvm.fma.f64(double %973, double %972, double %972)
  %975 = fmul double %965, %974
  %976 = fmul double %966, %975
  %977 = fneg double %976
  %978 = tail call double @llvm.fma.f64(double %975, double %966, double %977)
  %979 = tail call double @llvm.fma.f64(double %975, double %968, double %978)
  %980 = fadd double %976, %979
  %981 = fsub double %980, %976
  %982 = fsub double %979, %981
  %983 = fsub double %965, %980
  %984 = fsub double %965, %983
  %985 = fsub double %984, %980
  %986 = fsub double %985, %982
  %987 = fadd double %983, %986
  %988 = fmul double %974, %987
  %989 = fadd double %975, %988
  %990 = fsub double %989, %975
  %991 = fsub double %988, %990
  %992 = fmul double %989, %989
  %993 = fneg double %992
  %994 = tail call double @llvm.fma.f64(double %989, double %989, double %993)
  %995 = fmul double %991, 2.000000e+00
  %996 = tail call double @llvm.fma.f64(double %989, double %995, double %994)
  %997 = fadd double %992, %996
  %998 = fsub double %997, %992
  %999 = fsub double %996, %998
  %1000 = tail call double @llvm.fma.f64(double %997, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %1001 = tail call double @llvm.fma.f64(double %997, double %1000, double 0x3FBE25E43ABE935A)
  %1002 = tail call double @llvm.fma.f64(double %997, double %1001, double 0x3FC110EF47E6C9C2)
  %1003 = tail call double @llvm.fma.f64(double %997, double %1002, double 0x3FC3B13BCFA74449)
  %1004 = tail call double @llvm.fma.f64(double %997, double %1003, double 0x3FC745D171BF3C30)
  %1005 = tail call double @llvm.fma.f64(double %997, double %1004, double 0x3FCC71C71C7792CE)
  %1006 = tail call double @llvm.fma.f64(double %997, double %1005, double 0x3FD24924924920DA)
  %1007 = tail call double @llvm.fma.f64(double %997, double %1006, double 0x3FD999999999999C)
  %1008 = sitofp i32 %964 to double
  %1009 = fmul double %1008, 0x3FE62E42FEFA39EF
  %1010 = fneg double %1009
  %1011 = tail call double @llvm.fma.f64(double %1008, double 0x3FE62E42FEFA39EF, double %1010)
  %1012 = tail call double @llvm.fma.f64(double %1008, double 0x3C7ABC9E3B39803F, double %1011)
  %1013 = fadd double %1009, %1012
  %1014 = fsub double %1013, %1009
  %1015 = fsub double %1012, %1014
  %1016 = tail call double @llvm.amdgcn.ldexp.f64(double %989, i32 1)
  %1017 = tail call double @llvm.amdgcn.ldexp.f64(double %991, i32 1)
  %1018 = fmul double %989, %997
  %1019 = fneg double %1018
  %1020 = tail call double @llvm.fma.f64(double %997, double %989, double %1019)
  %1021 = tail call double @llvm.fma.f64(double %997, double %991, double %1020)
  %1022 = tail call double @llvm.fma.f64(double %999, double %989, double %1021)
  %1023 = fadd double %1018, %1022
  %1024 = fsub double %1023, %1018
  %1025 = fsub double %1022, %1024
  %1026 = fmul double %997, %1007
  %1027 = fneg double %1026
  %1028 = tail call double @llvm.fma.f64(double %997, double %1007, double %1027)
  %1029 = tail call double @llvm.fma.f64(double %999, double %1007, double %1028)
  %1030 = fadd double %1026, %1029
  %1031 = fsub double %1030, %1026
  %1032 = fsub double %1029, %1031
  %1033 = fadd double %1030, 0x3FE5555555555555
  %1034 = fadd double %1033, 0xBFE5555555555555
  %1035 = fsub double %1030, %1034
  %1036 = fadd double %1032, 0x3C8543B0D5DF274D
  %1037 = fadd double %1036, %1035
  %1038 = fadd double %1033, %1037
  %1039 = fsub double %1038, %1033
  %1040 = fsub double %1037, %1039
  %1041 = fmul double %1023, %1038
  %1042 = fneg double %1041
  %1043 = tail call double @llvm.fma.f64(double %1023, double %1038, double %1042)
  %1044 = tail call double @llvm.fma.f64(double %1023, double %1040, double %1043)
  %1045 = tail call double @llvm.fma.f64(double %1025, double %1038, double %1044)
  %1046 = fadd double %1041, %1045
  %1047 = fsub double %1046, %1041
  %1048 = fsub double %1045, %1047
  %1049 = fadd double %1016, %1046
  %1050 = fsub double %1049, %1016
  %1051 = fsub double %1046, %1050
  %1052 = fadd double %1017, %1048
  %1053 = fadd double %1052, %1051
  %1054 = fadd double %1049, %1053
  %1055 = fsub double %1054, %1049
  %1056 = fsub double %1053, %1055
  %1057 = fadd double %1013, %1054
  %1058 = fsub double %1057, %1013
  %1059 = fsub double %1057, %1058
  %1060 = fsub double %1013, %1059
  %1061 = fsub double %1054, %1058
  %1062 = fadd double %1061, %1060
  %1063 = fadd double %1015, %1056
  %1064 = fsub double %1063, %1015
  %1065 = fsub double %1063, %1064
  %1066 = fsub double %1015, %1065
  %1067 = fsub double %1056, %1064
  %1068 = fadd double %1067, %1066
  %1069 = fadd double %1063, %1062
  %1070 = fadd double %1057, %1069
  %1071 = fsub double %1070, %1057
  %1072 = fsub double %1069, %1071
  %1073 = fadd double %1068, %1072
  %1074 = fadd double %1070, %1073
  %1075 = fsub double %1074, %1070
  %1076 = fsub double %1073, %1075
  %1077 = fmul double %1074, 2.000000e+00
  %1078 = fneg double %1077
  %1079 = tail call double @llvm.fma.f64(double %1074, double 2.000000e+00, double %1078)
  %1080 = tail call double @llvm.fma.f64(double %1076, double 2.000000e+00, double %1079)
  %1081 = fadd double %1077, %1080
  %1082 = fsub double %1081, %1077
  %1083 = fsub double %1080, %1082
  %1084 = tail call double @llvm.fabs.f64(double %1077) #3
  %1085 = fcmp oeq double %1084, 0x7FF0000000000000
  %1086 = select i1 %1085, double %1077, double %1081
  %1087 = tail call double @llvm.fabs.f64(double %1086) #3
  %1088 = fcmp oeq double %1087, 0x7FF0000000000000
  %1089 = select i1 %1088, double 0.000000e+00, double %1083
  %1090 = fmul double %1086, 0x3FF71547652B82FE
  %1091 = tail call double @llvm.rint.f64(double %1090)
  %1092 = fneg double %1091
  %1093 = tail call double @llvm.fma.f64(double %1092, double 0x3FE62E42FEFA39EF, double %1086)
  %1094 = tail call double @llvm.fma.f64(double %1092, double 0x3C7ABC9E3B39803F, double %1093)
  %1095 = tail call double @llvm.fma.f64(double %1094, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1096 = tail call double @llvm.fma.f64(double %1094, double %1095, double 0x3EC71DEE623FDE64)
  %1097 = tail call double @llvm.fma.f64(double %1094, double %1096, double 0x3EFA01997C89E6B0)
  %1098 = tail call double @llvm.fma.f64(double %1094, double %1097, double 0x3F2A01A014761F6E)
  %1099 = tail call double @llvm.fma.f64(double %1094, double %1098, double 0x3F56C16C1852B7B0)
  %1100 = tail call double @llvm.fma.f64(double %1094, double %1099, double 0x3F81111111122322)
  %1101 = tail call double @llvm.fma.f64(double %1094, double %1100, double 0x3FA55555555502A1)
  %1102 = tail call double @llvm.fma.f64(double %1094, double %1101, double 0x3FC5555555555511)
  %1103 = tail call double @llvm.fma.f64(double %1094, double %1102, double 0x3FE000000000000B)
  %1104 = tail call double @llvm.fma.f64(double %1094, double %1103, double 1.000000e+00)
  %1105 = tail call double @llvm.fma.f64(double %1094, double %1104, double 1.000000e+00)
  %1106 = fptosi double %1091 to i32
  %1107 = tail call double @llvm.amdgcn.ldexp.f64(double %1105, i32 %1106)
  %1108 = fcmp ogt double %1086, 1.024000e+03
  %1109 = select i1 %1108, double 0x7FF0000000000000, double %1107
  %1110 = fcmp olt double %1086, -1.075000e+03
  %1111 = select i1 %1110, double 0.000000e+00, double %1109
  %1112 = tail call double @llvm.fma.f64(double %1111, double %1089, double %1111)
  %1113 = tail call double @llvm.fabs.f64(double %1111) #3
  %1114 = fcmp oeq double %1113, 0x7FF0000000000000
  %1115 = select i1 %1114, double %1111, double %1112
  %1116 = tail call double @llvm.fabs.f64(double %1115)
  %1117 = fcmp oeq double %958, 0x7FF0000000000000
  %1118 = fcmp oeq double %957, 0.000000e+00
  %1119 = select i1 %1117, double 0x7FF0000000000000, double %1116
  %1120 = select i1 %1118, double 0.000000e+00, double %1119
  %1121 = fcmp uno double %957, 0.000000e+00
  %1122 = select i1 %1121, double 0x7FF8000000000000, double %1120
  %1123 = fadd contract double %1122, %953
  %1124 = fcmp olt double %1123, 0x1000000000000000
  %1125 = select i1 %1124, double 0x4FF0000000000000, double 1.000000e+00
  %1126 = fmul double %1123, %1125
  %1127 = tail call double @llvm.amdgcn.rsq.f64(double %1126)
  %1128 = fmul double %1126, %1127
  %1129 = fmul double %1127, 5.000000e-01
  %1130 = fneg double %1129
  %1131 = tail call double @llvm.fma.f64(double %1130, double %1128, double 5.000000e-01)
  %1132 = tail call double @llvm.fma.f64(double %1129, double %1131, double %1129)
  %1133 = tail call double @llvm.fma.f64(double %1128, double %1131, double %1128)
  %1134 = fneg double %1133
  %1135 = tail call double @llvm.fma.f64(double %1134, double %1133, double %1126)
  %1136 = tail call double @llvm.fma.f64(double %1135, double %1132, double %1133)
  %1137 = fneg double %1136
  %1138 = tail call double @llvm.fma.f64(double %1137, double %1136, double %1126)
  %1139 = tail call double @llvm.fma.f64(double %1138, double %1132, double %1136)
  %1140 = select i1 %1124, double 0x37F0000000000000, double 1.000000e+00
  %1141 = fmul double %1140, %1139
  %1142 = fcmp oeq double %1126, 0.000000e+00
  %1143 = fcmp oeq double %1126, 0x7FF0000000000000
  %1144 = or i1 %1142, %1143
  %1145 = select i1 %1144, double %1126, double %1141
  %1146 = fmul contract double %453, %592
  %1147 = fmul contract double %174, %314
  %1148 = fmul contract double %1147, %775
  %1149 = fadd contract double %1146, %1148
  %1150 = fdiv contract double %1145, %1149
  %1151 = tail call double @llvm.fabs.f64(double %1150)
  %1152 = fcmp ogt double %1151, 1.000000e+00
  %1153 = fdiv double 1.000000e+00, %1151
  %1154 = select i1 %1152, double %1153, double %1151
  %1155 = fmul double %1154, %1154
  %1156 = tail call double @llvm.fma.f64(double %1155, double 0x3EEBA404B5E68A13, double 0xBF23E260BD3237F4)
  %1157 = tail call double @llvm.fma.f64(double %1155, double %1156, double 0x3F4B2BB069EFB384)
  %1158 = tail call double @llvm.fma.f64(double %1155, double %1157, double 0xBF67952DAF56DE9B)
  %1159 = tail call double @llvm.fma.f64(double %1155, double %1158, double 0x3F7D6D43A595C56F)
  %1160 = tail call double @llvm.fma.f64(double %1155, double %1159, double 0xBF8C6EA4A57D9582)
  %1161 = tail call double @llvm.fma.f64(double %1155, double %1160, double 0x3F967E295F08B19F)
  %1162 = tail call double @llvm.fma.f64(double %1155, double %1161, double 0xBF9E9AE6FC27006A)
  %1163 = tail call double @llvm.fma.f64(double %1155, double %1162, double 0x3FA2C15B5711927A)
  %1164 = tail call double @llvm.fma.f64(double %1155, double %1163, double 0xBFA59976E82D3FF0)
  %1165 = tail call double @llvm.fma.f64(double %1155, double %1164, double 0x3FA82D5D6EF28734)
  %1166 = tail call double @llvm.fma.f64(double %1155, double %1165, double 0xBFAAE5CE6A214619)
  %1167 = tail call double @llvm.fma.f64(double %1155, double %1166, double 0x3FAE1BB48427B883)
  %1168 = tail call double @llvm.fma.f64(double %1155, double %1167, double 0xBFB110E48B207F05)
  %1169 = tail call double @llvm.fma.f64(double %1155, double %1168, double 0x3FB3B13657B87036)
  %1170 = tail call double @llvm.fma.f64(double %1155, double %1169, double 0xBFB745D119378E4F)
  %1171 = tail call double @llvm.fma.f64(double %1155, double %1170, double 0x3FBC71C717E1913C)
  %1172 = tail call double @llvm.fma.f64(double %1155, double %1171, double 0xBFC2492492376B7D)
  %1173 = tail call double @llvm.fma.f64(double %1155, double %1172, double 0x3FC99999999952CC)
  %1174 = tail call double @llvm.fma.f64(double %1155, double %1173, double 0xBFD5555555555523)
  %1175 = fmul double %1155, %1174
  %1176 = tail call double @llvm.fma.f64(double %1154, double %1175, double %1154)
  %1177 = fneg double %1176
  %1178 = tail call double @llvm.fma.f64(double 0x3FEDD9AD336A0500, double 0x3FFAF154EEB562D6, double %1177)
  %1179 = select i1 %1152, double %1178, double %1176
  %1180 = tail call double @llvm.copysign.f64(double %1179, double %1150)
  %1181 = fmul contract double %1180, 0x41584F6EC0000000
  %1182 = getelementptr inbounds double, double addrspace(1)* %2, i64 %15
  store double %1181, double addrspace(1)* %1182, align 8, !tbaa !10
  br i1 %1118, label %1183, label %1188

1183:                                             ; preds = %768
  %1184 = fcmp contract ogt double %788, 0.000000e+00
  br i1 %1184, label %1226, label %1185

1185:                                             ; preds = %1183
  %1186 = fcmp contract olt double %788, 0.000000e+00
  %1187 = select i1 %1186, double 9.000000e+01, double 0.000000e+00
  br label %1226

1188:                                             ; preds = %768
  %1189 = fneg contract double %788
  %1190 = fdiv contract double %1189, %957
  %1191 = tail call double @llvm.fabs.f64(double %1190)
  %1192 = fcmp ogt double %1191, 1.000000e+00
  %1193 = fdiv double 1.000000e+00, %1191
  %1194 = select i1 %1192, double %1193, double %1191
  %1195 = fmul double %1194, %1194
  %1196 = tail call double @llvm.fma.f64(double %1195, double 0x3EEBA404B5E68A13, double 0xBF23E260BD3237F4)
  %1197 = tail call double @llvm.fma.f64(double %1195, double %1196, double 0x3F4B2BB069EFB384)
  %1198 = tail call double @llvm.fma.f64(double %1195, double %1197, double 0xBF67952DAF56DE9B)
  %1199 = tail call double @llvm.fma.f64(double %1195, double %1198, double 0x3F7D6D43A595C56F)
  %1200 = tail call double @llvm.fma.f64(double %1195, double %1199, double 0xBF8C6EA4A57D9582)
  %1201 = tail call double @llvm.fma.f64(double %1195, double %1200, double 0x3F967E295F08B19F)
  %1202 = tail call double @llvm.fma.f64(double %1195, double %1201, double 0xBF9E9AE6FC27006A)
  %1203 = tail call double @llvm.fma.f64(double %1195, double %1202, double 0x3FA2C15B5711927A)
  %1204 = tail call double @llvm.fma.f64(double %1195, double %1203, double 0xBFA59976E82D3FF0)
  %1205 = tail call double @llvm.fma.f64(double %1195, double %1204, double 0x3FA82D5D6EF28734)
  %1206 = tail call double @llvm.fma.f64(double %1195, double %1205, double 0xBFAAE5CE6A214619)
  %1207 = tail call double @llvm.fma.f64(double %1195, double %1206, double 0x3FAE1BB48427B883)
  %1208 = tail call double @llvm.fma.f64(double %1195, double %1207, double 0xBFB110E48B207F05)
  %1209 = tail call double @llvm.fma.f64(double %1195, double %1208, double 0x3FB3B13657B87036)
  %1210 = tail call double @llvm.fma.f64(double %1195, double %1209, double 0xBFB745D119378E4F)
  %1211 = tail call double @llvm.fma.f64(double %1195, double %1210, double 0x3FBC71C717E1913C)
  %1212 = tail call double @llvm.fma.f64(double %1195, double %1211, double 0xBFC2492492376B7D)
  %1213 = tail call double @llvm.fma.f64(double %1195, double %1212, double 0x3FC99999999952CC)
  %1214 = tail call double @llvm.fma.f64(double %1195, double %1213, double 0xBFD5555555555523)
  %1215 = fmul double %1195, %1214
  %1216 = tail call double @llvm.fma.f64(double %1194, double %1215, double %1194)
  %1217 = fneg double %1216
  %1218 = tail call double @llvm.fma.f64(double 0x3FEDD9AD336A0500, double 0x3FFAF154EEB562D6, double %1217)
  %1219 = select i1 %1192, double %1218, double %1216
  %1220 = tail call double @llvm.copysign.f64(double %1219, double %1190)
  %1221 = fmul contract double %1220, 1.800000e+02
  %1222 = fdiv contract double %1221, 0x400921FB54442D18
  %1223 = fcmp contract olt double %957, 0.000000e+00
  %1224 = fadd contract double %1222, 1.800000e+02
  %1225 = select i1 %1223, double %1224, double %1222
  br label %1226

1226:                                             ; preds = %1188, %1185, %1183
  %1227 = phi double [ -9.000000e+01, %1183 ], [ %1187, %1185 ], [ %1225, %1188 ]
  %1228 = fadd contract double %1227, 1.800000e+02
  %1229 = fcmp contract ult double %1228, 3.600000e+02
  br i1 %1229, label %1234, label %1230

1230:                                             ; preds = %1226, %1230
  %1231 = phi double [ %1232, %1230 ], [ %1228, %1226 ]
  %1232 = fadd contract double %1231, -3.600000e+02
  %1233 = fcmp contract ult double %1232, 3.600000e+02
  br i1 %1233, label %1234, label %1230, !llvm.loop !12

1234:                                             ; preds = %1230, %1226
  %1235 = phi double [ %1228, %1226 ], [ %1232, %1230 ]
  %1236 = fadd contract double %1235, -1.800000e+02
  %1237 = fmul contract double %1236, 0xC00921FB54442D18
  %1238 = fdiv contract double %1237, 1.800000e+02
  %1239 = fdiv contract double %1238, 0x401921FB54442D18
  %1240 = tail call double @llvm.floor.f64(double %1239)
  %1241 = fmul contract double %1240, 0x401921FB54442D18
  %1242 = fsub contract double %1238, %1241
  %1243 = fmul contract double %1242, 1.800000e+02
  %1244 = fdiv contract double %1243, 0x400921FB54442D18
  %1245 = getelementptr inbounds double, double addrspace(1)* %3, i64 %15
  store double %1244, double addrspace(1)* %1245, align 8, !tbaa !10
  br label %1246

1246:                                             ; preds = %1234, %5
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.frexp.mant.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rcp.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.rsq.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
!10 = !{!11, !11, i64 0}
!11 = !{!"double", !8, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
