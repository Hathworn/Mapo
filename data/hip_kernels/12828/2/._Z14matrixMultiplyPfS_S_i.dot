digraph "CFG for '_Z14matrixMultiplyPfS_S_i' function" {
	label="CFG for '_Z14matrixMultiplyPfS_S_i' function";

	Node0x469e1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = icmp sgt i32 %3, 0\l  br i1 %14, label %15, label %55\l|{<s0>T|<s1>F}}"];
	Node0x469e1f0:s0 -> Node0x46a0100;
	Node0x469e1f0:s1 -> Node0x46a0190;
	Node0x46a0100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %17 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*\l  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !4, !invariant.load !5\l  %20 = zext i16 %19 to i32\l  %21 = mul i32 %16, %20\l  %22 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %23 = add i32 %21, %22\l  %24 = mul nsw i32 %23, %3\l  %25 = add nsw i32 %24, %13\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds float, float addrspace(1)* %2, i64 %26\l  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !7\l  %29 = and i32 %3, 3\l  %30 = icmp ult i32 %3, 4\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x46a0100:s0 -> Node0x46a2240;
	Node0x46a0100:s1 -> Node0x46a22d0;
	Node0x46a22d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %3, -4\l  br label %56\l}"];
	Node0x46a22d0 -> Node0x46a0470;
	Node0x46a2240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi float [ %28, %15 ], [ %106, %56 ]\l  %35 = phi i32 [ 0, %15 ], [ %107, %56 ]\l  %36 = icmp eq i32 %29, 0\l  br i1 %36, label %55, label %37\l|{<s0>T|<s1>F}}"];
	Node0x46a2240:s0 -> Node0x46a0190;
	Node0x46a2240:s1 -> Node0x46a2940;
	Node0x46a2940 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi float [ %51, %37 ], [ %34, %33 ]\l  %39 = phi i32 [ %52, %37 ], [ %35, %33 ]\l  %40 = phi i32 [ %53, %37 ], [ 0, %33 ]\l  %41 = add nsw i32 %39, %24\l  %42 = sext i32 %41 to i64\l  %43 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  %44 = load float, float addrspace(1)* %43, align 4, !tbaa !7\l  %45 = mul nsw i32 %39, %3\l  %46 = add nsw i32 %45, %13\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %1, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7\l  %50 = fadd contract float %44, %49\l  %51 = fadd contract float %38, %50\l  store float %51, float addrspace(1)* %27, align 4, !tbaa !7\l  %52 = add nuw nsw i32 %39, 1\l  %53 = add i32 %40, 1\l  %54 = icmp eq i32 %53, %29\l  br i1 %54, label %55, label %37, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x46a2940:s0 -> Node0x46a0190;
	Node0x46a2940:s1 -> Node0x46a2940;
	Node0x46a0190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%55:\l55:                                               \l  ret void\l}"];
	Node0x46a0470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%56:\l56:                                               \l  %57 = phi float [ %28, %31 ], [ %106, %56 ]\l  %58 = phi i32 [ 0, %31 ], [ %107, %56 ]\l  %59 = phi i32 [ 0, %31 ], [ %108, %56 ]\l  %60 = add nsw i32 %58, %24\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %0, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7\l  %64 = mul nsw i32 %58, %3\l  %65 = add nsw i32 %64, %13\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = fadd contract float %63, %68\l  %70 = fadd contract float %57, %69\l  store float %70, float addrspace(1)* %27, align 4, !tbaa !7\l  %71 = or i32 %58, 1\l  %72 = add nsw i32 %71, %24\l  %73 = sext i32 %72 to i64\l  %74 = getelementptr inbounds float, float addrspace(1)* %0, i64 %73\l  %75 = load float, float addrspace(1)* %74, align 4, !tbaa !7\l  %76 = mul nsw i32 %71, %3\l  %77 = add nsw i32 %76, %13\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = fadd contract float %75, %80\l  %82 = fadd contract float %70, %81\l  store float %82, float addrspace(1)* %27, align 4, !tbaa !7\l  %83 = or i32 %58, 2\l  %84 = add nsw i32 %83, %24\l  %85 = sext i32 %84 to i64\l  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %85\l  %87 = load float, float addrspace(1)* %86, align 4, !tbaa !7\l  %88 = mul nsw i32 %83, %3\l  %89 = add nsw i32 %88, %13\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7\l  %93 = fadd contract float %87, %92\l  %94 = fadd contract float %82, %93\l  store float %94, float addrspace(1)* %27, align 4, !tbaa !7\l  %95 = or i32 %58, 3\l  %96 = add nsw i32 %95, %24\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7\l  %100 = mul nsw i32 %95, %3\l  %101 = add nsw i32 %100, %13\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7\l  %105 = fadd contract float %99, %104\l  %106 = fadd contract float %94, %105\l  store float %106, float addrspace(1)* %27, align 4, !tbaa !7\l  %107 = add nuw nsw i32 %58, 4\l  %108 = add i32 %59, 4\l  %109 = icmp eq i32 %108, %32\l  br i1 %109, label %33, label %56, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x46a0470:s0 -> Node0x46a2240;
	Node0x46a0470:s1 -> Node0x46a0470;
}
