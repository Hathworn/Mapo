digraph "CFG for '_ZL10GetMatrixAPiPfii' function" {
	label="CFG for '_ZL10GetMatrixAPiPfii' function";

	Node0x48d2390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = add nsw i32 %2, 1\l  %15 = mul nsw i32 %14, %14\l  %16 = icmp slt i32 %13, %15\l  br i1 %16, label %470, label %17\l|{<s0>T|<s1>F}}"];
	Node0x48d2390:s0 -> Node0x48d2f40;
	Node0x48d2390:s1 -> Node0x48d44d0;
	Node0x48d44d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%17:\l17:                                               \l  %18 = tail call i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr()\l  %19 = getelementptr inbounds i8, i8 addrspace(4)* %18, i64 24\l  %20 = bitcast i8 addrspace(4)* %19 to i64 addrspace(4)*\l  %21 = load i64, i64 addrspace(4)* %20, align 8, !tbaa !7\l  %22 = inttoptr i64 %21 to i8 addrspace(1)*\l  %23 = addrspacecast i8 addrspace(1)* %22 to i8*\l  %24 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0,\l... i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  %25 = extractelement \<2 x i64\> %24, i64 0\l  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds\l... ([30 x i8], [30 x i8] addrspace(4)* @.str, i64 0, i64 0) to i8*), i8* null),\l... label %26, label %30\l|{<s0>T|<s1>F}}"];
	Node0x48d44d0:s0 -> Node0x48d5430;
	Node0x48d44d0:s1 -> Node0x48d5e20;
	Node0x48d5430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%26:\l26:                                               \l  %27 = and i64 %25, -227\l  %28 = or i64 %27, 34\l  %29 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %28, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0,\l... i64 noundef 0, i64 noundef 0, i64 noundef 0) #10\l  br label %724\l}"];
	Node0x48d5430 -> Node0x48d6100;
	Node0x48d5e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%30:\l30:                                               \l  %31 = and i64 %25, -3\l  %32 = insertelement \<2 x i64\> \<i64 poison, i64 0\>, i64 %31, i64 0\l  br label %33\l}"];
	Node0x48d5e20 -> Node0x48d43c0;
	Node0x48d43c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%33:\l33:                                               \l  %34 = phi i64 [ select (i1 icmp eq (i8* addrspacecast (i8 addrspace(4)*\l... getelementptr inbounds ([30 x i8], [30 x i8] addrspace(4)* @.str, i64 0, i64\l... 0) to i8*), i8* null), i64 0, i64 add (i64 ptrtoint (i8* addrspacecast (i8\l... addrspace(4)* getelementptr inbounds ([30 x i8], [30 x i8] addrspace(4)*\l... @.str, i64 0, i64 29) to i8*) to i64), i64 add (i64 sub (i64 0, i64 ptrtoint\l... ([30 x i8]* addrspacecast ([30 x i8] addrspace(4)* @.str to [30 x i8]*) to\l... i64)), i64 1))), %30 ], [ %467, %459 ]\l  %35 = phi i8 addrspace(4)* [ getelementptr inbounds ([30 x i8], [30 x i8]\l... addrspace(4)* @.str, i64 0, i64 0), %30 ], [ %468, %459 ]\l  %36 = phi \<2 x i64\> [ %32, %30 ], [ %466, %459 ]\l  %37 = icmp ugt i64 %34, 56\l  %38 = extractelement \<2 x i64\> %36, i64 0\l  %39 = or i64 %38, 2\l  %40 = insertelement \<2 x i64\> poison, i64 %39, i64 0\l  %41 = select i1 %37, \<2 x i64\> %36, \<2 x i64\> %40\l  %42 = tail call i64 @llvm.umin.i64(i64 %34, i64 56)\l  %43 = trunc i64 %42 to i32\l  %44 = extractelement \<2 x i64\> %41, i64 0\l  %45 = icmp ugt i32 %43, 7\l  br i1 %45, label %48, label %46\l|{<s0>T|<s1>F}}"];
	Node0x48d43c0:s0 -> Node0x48d7c80;
	Node0x48d43c0:s1 -> Node0x48d7d10;
	Node0x48d7d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%46:\l46:                                               \l  %47 = icmp eq i32 %43, 0\l  br i1 %47, label %101, label %88\l|{<s0>T|<s1>F}}"];
	Node0x48d7d10:s0 -> Node0x48d7f10;
	Node0x48d7d10:s1 -> Node0x48d7f60;
	Node0x48d7c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%48:\l48:                                               \l  %49 = load i8, i8 addrspace(4)* %35, align 1, !tbaa !11\l  %50 = zext i8 %49 to i64\l  %51 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 1\l  %52 = load i8, i8 addrspace(4)* %51, align 1, !tbaa !11\l  %53 = zext i8 %52 to i64\l  %54 = shl nuw nsw i64 %53, 8\l  %55 = or i64 %54, %50\l  %56 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 2\l  %57 = load i8, i8 addrspace(4)* %56, align 1, !tbaa !11\l  %58 = zext i8 %57 to i64\l  %59 = shl nuw nsw i64 %58, 16\l  %60 = or i64 %55, %59\l  %61 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 3\l  %62 = load i8, i8 addrspace(4)* %61, align 1, !tbaa !11\l  %63 = zext i8 %62 to i64\l  %64 = shl nuw nsw i64 %63, 24\l  %65 = or i64 %60, %64\l  %66 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 4\l  %67 = load i8, i8 addrspace(4)* %66, align 1, !tbaa !11\l  %68 = zext i8 %67 to i64\l  %69 = shl nuw nsw i64 %68, 32\l  %70 = or i64 %65, %69\l  %71 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 5\l  %72 = load i8, i8 addrspace(4)* %71, align 1, !tbaa !11\l  %73 = zext i8 %72 to i64\l  %74 = shl nuw nsw i64 %73, 40\l  %75 = or i64 %70, %74\l  %76 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 6\l  %77 = load i8, i8 addrspace(4)* %76, align 1, !tbaa !11\l  %78 = zext i8 %77 to i64\l  %79 = shl nuw nsw i64 %78, 48\l  %80 = or i64 %75, %79\l  %81 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 7\l  %82 = load i8, i8 addrspace(4)* %81, align 1, !tbaa !11\l  %83 = zext i8 %82 to i64\l  %84 = shl nuw i64 %83, 56\l  %85 = or i64 %80, %84\l  %86 = add nsw i32 %43, -8\l  %87 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 8\l  br label %101\l}"];
	Node0x48d7c80 -> Node0x48d7f10;
	Node0x48d7f60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%88:\l88:                                               \l  %89 = phi i32 [ %99, %88 ], [ 0, %46 ]\l  %90 = phi i64 [ %98, %88 ], [ 0, %46 ]\l  %91 = zext i32 %89 to i64\l  %92 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 %91\l  %93 = load i8, i8 addrspace(4)* %92, align 1, !tbaa !11\l  %94 = zext i8 %93 to i64\l  %95 = shl i32 %89, 3\l  %96 = zext i32 %95 to i64\l  %97 = shl nuw i64 %94, %96\l  %98 = or i64 %97, %90\l  %99 = add nuw nsw i32 %89, 1\l  %100 = icmp eq i32 %99, %43\l  br i1 %100, label %101, label %88, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x48d7f60:s0 -> Node0x48d7f10;
	Node0x48d7f60:s1 -> Node0x48d7f60;
	Node0x48d7f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%101:\l101:                                              \l  %102 = phi i8 addrspace(4)* [ %87, %48 ], [ %35, %46 ], [ %35, %88 ]\l  %103 = phi i32 [ %86, %48 ], [ 0, %46 ], [ 0, %88 ]\l  %104 = phi i64 [ %85, %48 ], [ 0, %46 ], [ %98, %88 ]\l  %105 = icmp ugt i32 %103, 7\l  br i1 %105, label %108, label %106\l|{<s0>T|<s1>F}}"];
	Node0x48d7f10:s0 -> Node0x48dac40;
	Node0x48d7f10:s1 -> Node0x48dac90;
	Node0x48dac90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%106:\l106:                                              \l  %107 = icmp eq i32 %103, 0\l  br i1 %107, label %161, label %148\l|{<s0>T|<s1>F}}"];
	Node0x48dac90:s0 -> Node0x48dae60;
	Node0x48dac90:s1 -> Node0x48daeb0;
	Node0x48dac40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%108:\l108:                                              \l  %109 = load i8, i8 addrspace(4)* %102, align 1, !tbaa !11\l  %110 = zext i8 %109 to i64\l  %111 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 1\l  %112 = load i8, i8 addrspace(4)* %111, align 1, !tbaa !11\l  %113 = zext i8 %112 to i64\l  %114 = shl nuw nsw i64 %113, 8\l  %115 = or i64 %114, %110\l  %116 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 2\l  %117 = load i8, i8 addrspace(4)* %116, align 1, !tbaa !11\l  %118 = zext i8 %117 to i64\l  %119 = shl nuw nsw i64 %118, 16\l  %120 = or i64 %115, %119\l  %121 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 3\l  %122 = load i8, i8 addrspace(4)* %121, align 1, !tbaa !11\l  %123 = zext i8 %122 to i64\l  %124 = shl nuw nsw i64 %123, 24\l  %125 = or i64 %120, %124\l  %126 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 4\l  %127 = load i8, i8 addrspace(4)* %126, align 1, !tbaa !11\l  %128 = zext i8 %127 to i64\l  %129 = shl nuw nsw i64 %128, 32\l  %130 = or i64 %125, %129\l  %131 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 5\l  %132 = load i8, i8 addrspace(4)* %131, align 1, !tbaa !11\l  %133 = zext i8 %132 to i64\l  %134 = shl nuw nsw i64 %133, 40\l  %135 = or i64 %130, %134\l  %136 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 6\l  %137 = load i8, i8 addrspace(4)* %136, align 1, !tbaa !11\l  %138 = zext i8 %137 to i64\l  %139 = shl nuw nsw i64 %138, 48\l  %140 = or i64 %135, %139\l  %141 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 7\l  %142 = load i8, i8 addrspace(4)* %141, align 1, !tbaa !11\l  %143 = zext i8 %142 to i64\l  %144 = shl nuw i64 %143, 56\l  %145 = or i64 %140, %144\l  %146 = add nsw i32 %103, -8\l  %147 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 8\l  br label %161\l}"];
	Node0x48dac40 -> Node0x48dae60;
	Node0x48daeb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%148:\l148:                                              \l  %149 = phi i32 [ %159, %148 ], [ 0, %106 ]\l  %150 = phi i64 [ %158, %148 ], [ 0, %106 ]\l  %151 = zext i32 %149 to i64\l  %152 = getelementptr inbounds i8, i8 addrspace(4)* %102, i64 %151\l  %153 = load i8, i8 addrspace(4)* %152, align 1, !tbaa !11\l  %154 = zext i8 %153 to i64\l  %155 = shl i32 %149, 3\l  %156 = zext i32 %155 to i64\l  %157 = shl nuw i64 %154, %156\l  %158 = or i64 %157, %150\l  %159 = add nuw nsw i32 %149, 1\l  %160 = icmp eq i32 %159, %103\l  br i1 %160, label %161, label %148\l|{<s0>T|<s1>F}}"];
	Node0x48daeb0:s0 -> Node0x48dae60;
	Node0x48daeb0:s1 -> Node0x48daeb0;
	Node0x48dae60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%161:\l161:                                              \l  %162 = phi i8 addrspace(4)* [ %147, %108 ], [ %102, %106 ], [ %102, %148 ]\l  %163 = phi i32 [ %146, %108 ], [ 0, %106 ], [ 0, %148 ]\l  %164 = phi i64 [ %145, %108 ], [ 0, %106 ], [ %158, %148 ]\l  %165 = icmp ugt i32 %163, 7\l  br i1 %165, label %168, label %166\l|{<s0>T|<s1>F}}"];
	Node0x48dae60:s0 -> Node0x48dd340;
	Node0x48dae60:s1 -> Node0x48dd390;
	Node0x48dd390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%166:\l166:                                              \l  %167 = icmp eq i32 %163, 0\l  br i1 %167, label %221, label %208\l|{<s0>T|<s1>F}}"];
	Node0x48dd390:s0 -> Node0x48dd520;
	Node0x48dd390:s1 -> Node0x48dd570;
	Node0x48dd340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%168:\l168:                                              \l  %169 = load i8, i8 addrspace(4)* %162, align 1, !tbaa !11\l  %170 = zext i8 %169 to i64\l  %171 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 1\l  %172 = load i8, i8 addrspace(4)* %171, align 1, !tbaa !11\l  %173 = zext i8 %172 to i64\l  %174 = shl nuw nsw i64 %173, 8\l  %175 = or i64 %174, %170\l  %176 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 2\l  %177 = load i8, i8 addrspace(4)* %176, align 1, !tbaa !11\l  %178 = zext i8 %177 to i64\l  %179 = shl nuw nsw i64 %178, 16\l  %180 = or i64 %175, %179\l  %181 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 3\l  %182 = load i8, i8 addrspace(4)* %181, align 1, !tbaa !11\l  %183 = zext i8 %182 to i64\l  %184 = shl nuw nsw i64 %183, 24\l  %185 = or i64 %180, %184\l  %186 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 4\l  %187 = load i8, i8 addrspace(4)* %186, align 1, !tbaa !11\l  %188 = zext i8 %187 to i64\l  %189 = shl nuw nsw i64 %188, 32\l  %190 = or i64 %185, %189\l  %191 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 5\l  %192 = load i8, i8 addrspace(4)* %191, align 1, !tbaa !11\l  %193 = zext i8 %192 to i64\l  %194 = shl nuw nsw i64 %193, 40\l  %195 = or i64 %190, %194\l  %196 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 6\l  %197 = load i8, i8 addrspace(4)* %196, align 1, !tbaa !11\l  %198 = zext i8 %197 to i64\l  %199 = shl nuw nsw i64 %198, 48\l  %200 = or i64 %195, %199\l  %201 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 7\l  %202 = load i8, i8 addrspace(4)* %201, align 1, !tbaa !11\l  %203 = zext i8 %202 to i64\l  %204 = shl nuw i64 %203, 56\l  %205 = or i64 %200, %204\l  %206 = add nsw i32 %163, -8\l  %207 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 8\l  br label %221\l}"];
	Node0x48dd340 -> Node0x48dd520;
	Node0x48dd570 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%208:\l208:                                              \l  %209 = phi i32 [ %219, %208 ], [ 0, %166 ]\l  %210 = phi i64 [ %218, %208 ], [ 0, %166 ]\l  %211 = zext i32 %209 to i64\l  %212 = getelementptr inbounds i8, i8 addrspace(4)* %162, i64 %211\l  %213 = load i8, i8 addrspace(4)* %212, align 1, !tbaa !11\l  %214 = zext i8 %213 to i64\l  %215 = shl i32 %209, 3\l  %216 = zext i32 %215 to i64\l  %217 = shl nuw i64 %214, %216\l  %218 = or i64 %217, %210\l  %219 = add nuw nsw i32 %209, 1\l  %220 = icmp eq i32 %219, %163\l  br i1 %220, label %221, label %208\l|{<s0>T|<s1>F}}"];
	Node0x48dd570:s0 -> Node0x48dd520;
	Node0x48dd570:s1 -> Node0x48dd570;
	Node0x48dd520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%221:\l221:                                              \l  %222 = phi i8 addrspace(4)* [ %207, %168 ], [ %162, %166 ], [ %162, %208 ]\l  %223 = phi i32 [ %206, %168 ], [ 0, %166 ], [ 0, %208 ]\l  %224 = phi i64 [ %205, %168 ], [ 0, %166 ], [ %218, %208 ]\l  %225 = icmp ugt i32 %223, 7\l  br i1 %225, label %228, label %226\l|{<s0>T|<s1>F}}"];
	Node0x48dd520:s0 -> Node0x48df590;
	Node0x48dd520:s1 -> Node0x48df5e0;
	Node0x48df5e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%226:\l226:                                              \l  %227 = icmp eq i32 %223, 0\l  br i1 %227, label %281, label %268\l|{<s0>T|<s1>F}}"];
	Node0x48df5e0:s0 -> Node0x48df770;
	Node0x48df5e0:s1 -> Node0x48df7c0;
	Node0x48df590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%228:\l228:                                              \l  %229 = load i8, i8 addrspace(4)* %222, align 1, !tbaa !11\l  %230 = zext i8 %229 to i64\l  %231 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 1\l  %232 = load i8, i8 addrspace(4)* %231, align 1, !tbaa !11\l  %233 = zext i8 %232 to i64\l  %234 = shl nuw nsw i64 %233, 8\l  %235 = or i64 %234, %230\l  %236 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 2\l  %237 = load i8, i8 addrspace(4)* %236, align 1, !tbaa !11\l  %238 = zext i8 %237 to i64\l  %239 = shl nuw nsw i64 %238, 16\l  %240 = or i64 %235, %239\l  %241 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 3\l  %242 = load i8, i8 addrspace(4)* %241, align 1, !tbaa !11\l  %243 = zext i8 %242 to i64\l  %244 = shl nuw nsw i64 %243, 24\l  %245 = or i64 %240, %244\l  %246 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 4\l  %247 = load i8, i8 addrspace(4)* %246, align 1, !tbaa !11\l  %248 = zext i8 %247 to i64\l  %249 = shl nuw nsw i64 %248, 32\l  %250 = or i64 %245, %249\l  %251 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 5\l  %252 = load i8, i8 addrspace(4)* %251, align 1, !tbaa !11\l  %253 = zext i8 %252 to i64\l  %254 = shl nuw nsw i64 %253, 40\l  %255 = or i64 %250, %254\l  %256 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 6\l  %257 = load i8, i8 addrspace(4)* %256, align 1, !tbaa !11\l  %258 = zext i8 %257 to i64\l  %259 = shl nuw nsw i64 %258, 48\l  %260 = or i64 %255, %259\l  %261 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 7\l  %262 = load i8, i8 addrspace(4)* %261, align 1, !tbaa !11\l  %263 = zext i8 %262 to i64\l  %264 = shl nuw i64 %263, 56\l  %265 = or i64 %260, %264\l  %266 = add nsw i32 %223, -8\l  %267 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 8\l  br label %281\l}"];
	Node0x48df590 -> Node0x48df770;
	Node0x48df7c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%268:\l268:                                              \l  %269 = phi i32 [ %279, %268 ], [ 0, %226 ]\l  %270 = phi i64 [ %278, %268 ], [ 0, %226 ]\l  %271 = zext i32 %269 to i64\l  %272 = getelementptr inbounds i8, i8 addrspace(4)* %222, i64 %271\l  %273 = load i8, i8 addrspace(4)* %272, align 1, !tbaa !11\l  %274 = zext i8 %273 to i64\l  %275 = shl i32 %269, 3\l  %276 = zext i32 %275 to i64\l  %277 = shl nuw i64 %274, %276\l  %278 = or i64 %277, %270\l  %279 = add nuw nsw i32 %269, 1\l  %280 = icmp eq i32 %279, %223\l  br i1 %280, label %281, label %268\l|{<s0>T|<s1>F}}"];
	Node0x48df7c0:s0 -> Node0x48df770;
	Node0x48df7c0:s1 -> Node0x48df7c0;
	Node0x48df770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%281:\l281:                                              \l  %282 = phi i8 addrspace(4)* [ %267, %228 ], [ %222, %226 ], [ %222, %268 ]\l  %283 = phi i32 [ %266, %228 ], [ 0, %226 ], [ 0, %268 ]\l  %284 = phi i64 [ %265, %228 ], [ 0, %226 ], [ %278, %268 ]\l  %285 = icmp ugt i32 %283, 7\l  br i1 %285, label %288, label %286\l|{<s0>T|<s1>F}}"];
	Node0x48df770:s0 -> Node0x48e1fe0;
	Node0x48df770:s1 -> Node0x48e2030;
	Node0x48e2030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%286:\l286:                                              \l  %287 = icmp eq i32 %283, 0\l  br i1 %287, label %341, label %328\l|{<s0>T|<s1>F}}"];
	Node0x48e2030:s0 -> Node0x48e21c0;
	Node0x48e2030:s1 -> Node0x48e2210;
	Node0x48e1fe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%288:\l288:                                              \l  %289 = load i8, i8 addrspace(4)* %282, align 1, !tbaa !11\l  %290 = zext i8 %289 to i64\l  %291 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 1\l  %292 = load i8, i8 addrspace(4)* %291, align 1, !tbaa !11\l  %293 = zext i8 %292 to i64\l  %294 = shl nuw nsw i64 %293, 8\l  %295 = or i64 %294, %290\l  %296 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 2\l  %297 = load i8, i8 addrspace(4)* %296, align 1, !tbaa !11\l  %298 = zext i8 %297 to i64\l  %299 = shl nuw nsw i64 %298, 16\l  %300 = or i64 %295, %299\l  %301 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 3\l  %302 = load i8, i8 addrspace(4)* %301, align 1, !tbaa !11\l  %303 = zext i8 %302 to i64\l  %304 = shl nuw nsw i64 %303, 24\l  %305 = or i64 %300, %304\l  %306 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 4\l  %307 = load i8, i8 addrspace(4)* %306, align 1, !tbaa !11\l  %308 = zext i8 %307 to i64\l  %309 = shl nuw nsw i64 %308, 32\l  %310 = or i64 %305, %309\l  %311 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 5\l  %312 = load i8, i8 addrspace(4)* %311, align 1, !tbaa !11\l  %313 = zext i8 %312 to i64\l  %314 = shl nuw nsw i64 %313, 40\l  %315 = or i64 %310, %314\l  %316 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 6\l  %317 = load i8, i8 addrspace(4)* %316, align 1, !tbaa !11\l  %318 = zext i8 %317 to i64\l  %319 = shl nuw nsw i64 %318, 48\l  %320 = or i64 %315, %319\l  %321 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 7\l  %322 = load i8, i8 addrspace(4)* %321, align 1, !tbaa !11\l  %323 = zext i8 %322 to i64\l  %324 = shl nuw i64 %323, 56\l  %325 = or i64 %320, %324\l  %326 = add nsw i32 %283, -8\l  %327 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 8\l  br label %341\l}"];
	Node0x48e1fe0 -> Node0x48e21c0;
	Node0x48e2210 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%328:\l328:                                              \l  %329 = phi i32 [ %339, %328 ], [ 0, %286 ]\l  %330 = phi i64 [ %338, %328 ], [ 0, %286 ]\l  %331 = zext i32 %329 to i64\l  %332 = getelementptr inbounds i8, i8 addrspace(4)* %282, i64 %331\l  %333 = load i8, i8 addrspace(4)* %332, align 1, !tbaa !11\l  %334 = zext i8 %333 to i64\l  %335 = shl i32 %329, 3\l  %336 = zext i32 %335 to i64\l  %337 = shl nuw i64 %334, %336\l  %338 = or i64 %337, %330\l  %339 = add nuw nsw i32 %329, 1\l  %340 = icmp eq i32 %339, %283\l  br i1 %340, label %341, label %328\l|{<s0>T|<s1>F}}"];
	Node0x48e2210:s0 -> Node0x48e21c0;
	Node0x48e2210:s1 -> Node0x48e2210;
	Node0x48e21c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%341:\l341:                                              \l  %342 = phi i8 addrspace(4)* [ %327, %288 ], [ %282, %286 ], [ %282, %328 ]\l  %343 = phi i32 [ %326, %288 ], [ 0, %286 ], [ 0, %328 ]\l  %344 = phi i64 [ %325, %288 ], [ 0, %286 ], [ %338, %328 ]\l  %345 = icmp ugt i32 %343, 7\l  br i1 %345, label %348, label %346\l|{<s0>T|<s1>F}}"];
	Node0x48e21c0:s0 -> Node0x48e4c30;
	Node0x48e21c0:s1 -> Node0x48e4c80;
	Node0x48e4c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%346:\l346:                                              \l  %347 = icmp eq i32 %343, 0\l  br i1 %347, label %401, label %388\l|{<s0>T|<s1>F}}"];
	Node0x48e4c80:s0 -> Node0x48e4e10;
	Node0x48e4c80:s1 -> Node0x48e4e60;
	Node0x48e4c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%348:\l348:                                              \l  %349 = load i8, i8 addrspace(4)* %342, align 1, !tbaa !11\l  %350 = zext i8 %349 to i64\l  %351 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 1\l  %352 = load i8, i8 addrspace(4)* %351, align 1, !tbaa !11\l  %353 = zext i8 %352 to i64\l  %354 = shl nuw nsw i64 %353, 8\l  %355 = or i64 %354, %350\l  %356 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 2\l  %357 = load i8, i8 addrspace(4)* %356, align 1, !tbaa !11\l  %358 = zext i8 %357 to i64\l  %359 = shl nuw nsw i64 %358, 16\l  %360 = or i64 %355, %359\l  %361 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 3\l  %362 = load i8, i8 addrspace(4)* %361, align 1, !tbaa !11\l  %363 = zext i8 %362 to i64\l  %364 = shl nuw nsw i64 %363, 24\l  %365 = or i64 %360, %364\l  %366 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 4\l  %367 = load i8, i8 addrspace(4)* %366, align 1, !tbaa !11\l  %368 = zext i8 %367 to i64\l  %369 = shl nuw nsw i64 %368, 32\l  %370 = or i64 %365, %369\l  %371 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 5\l  %372 = load i8, i8 addrspace(4)* %371, align 1, !tbaa !11\l  %373 = zext i8 %372 to i64\l  %374 = shl nuw nsw i64 %373, 40\l  %375 = or i64 %370, %374\l  %376 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 6\l  %377 = load i8, i8 addrspace(4)* %376, align 1, !tbaa !11\l  %378 = zext i8 %377 to i64\l  %379 = shl nuw nsw i64 %378, 48\l  %380 = or i64 %375, %379\l  %381 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 7\l  %382 = load i8, i8 addrspace(4)* %381, align 1, !tbaa !11\l  %383 = zext i8 %382 to i64\l  %384 = shl nuw i64 %383, 56\l  %385 = or i64 %380, %384\l  %386 = add nsw i32 %343, -8\l  %387 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 8\l  br label %401\l}"];
	Node0x48e4c30 -> Node0x48e4e10;
	Node0x48e4e60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%388:\l388:                                              \l  %389 = phi i32 [ %399, %388 ], [ 0, %346 ]\l  %390 = phi i64 [ %398, %388 ], [ 0, %346 ]\l  %391 = zext i32 %389 to i64\l  %392 = getelementptr inbounds i8, i8 addrspace(4)* %342, i64 %391\l  %393 = load i8, i8 addrspace(4)* %392, align 1, !tbaa !11\l  %394 = zext i8 %393 to i64\l  %395 = shl i32 %389, 3\l  %396 = zext i32 %395 to i64\l  %397 = shl nuw i64 %394, %396\l  %398 = or i64 %397, %390\l  %399 = add nuw nsw i32 %389, 1\l  %400 = icmp eq i32 %399, %343\l  br i1 %400, label %401, label %388\l|{<s0>T|<s1>F}}"];
	Node0x48e4e60:s0 -> Node0x48e4e10;
	Node0x48e4e60:s1 -> Node0x48e4e60;
	Node0x48e4e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%401:\l401:                                              \l  %402 = phi i8 addrspace(4)* [ %387, %348 ], [ %342, %346 ], [ %342, %388 ]\l  %403 = phi i32 [ %386, %348 ], [ 0, %346 ], [ 0, %388 ]\l  %404 = phi i64 [ %385, %348 ], [ 0, %346 ], [ %398, %388 ]\l  %405 = icmp ugt i32 %403, 7\l  br i1 %405, label %408, label %406\l|{<s0>T|<s1>F}}"];
	Node0x48e4e10:s0 -> Node0x48e7490;
	Node0x48e4e10:s1 -> Node0x48e74e0;
	Node0x48e74e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%406:\l406:                                              \l  %407 = icmp eq i32 %403, 0\l  br i1 %407, label %459, label %446\l|{<s0>T|<s1>F}}"];
	Node0x48e74e0:s0 -> Node0x48d7180;
	Node0x48e74e0:s1 -> Node0x48e7670;
	Node0x48e7490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%408:\l408:                                              \l  %409 = load i8, i8 addrspace(4)* %402, align 1, !tbaa !11\l  %410 = zext i8 %409 to i64\l  %411 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 1\l  %412 = load i8, i8 addrspace(4)* %411, align 1, !tbaa !11\l  %413 = zext i8 %412 to i64\l  %414 = shl nuw nsw i64 %413, 8\l  %415 = or i64 %414, %410\l  %416 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 2\l  %417 = load i8, i8 addrspace(4)* %416, align 1, !tbaa !11\l  %418 = zext i8 %417 to i64\l  %419 = shl nuw nsw i64 %418, 16\l  %420 = or i64 %415, %419\l  %421 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 3\l  %422 = load i8, i8 addrspace(4)* %421, align 1, !tbaa !11\l  %423 = zext i8 %422 to i64\l  %424 = shl nuw nsw i64 %423, 24\l  %425 = or i64 %420, %424\l  %426 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 4\l  %427 = load i8, i8 addrspace(4)* %426, align 1, !tbaa !11\l  %428 = zext i8 %427 to i64\l  %429 = shl nuw nsw i64 %428, 32\l  %430 = or i64 %425, %429\l  %431 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 5\l  %432 = load i8, i8 addrspace(4)* %431, align 1, !tbaa !11\l  %433 = zext i8 %432 to i64\l  %434 = shl nuw nsw i64 %433, 40\l  %435 = or i64 %430, %434\l  %436 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 6\l  %437 = load i8, i8 addrspace(4)* %436, align 1, !tbaa !11\l  %438 = zext i8 %437 to i64\l  %439 = shl nuw nsw i64 %438, 48\l  %440 = or i64 %435, %439\l  %441 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 7\l  %442 = load i8, i8 addrspace(4)* %441, align 1, !tbaa !11\l  %443 = zext i8 %442 to i64\l  %444 = shl nuw i64 %443, 56\l  %445 = or i64 %440, %444\l  br label %459\l}"];
	Node0x48e7490 -> Node0x48d7180;
	Node0x48e7670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%446:\l446:                                              \l  %447 = phi i32 [ %457, %446 ], [ 0, %406 ]\l  %448 = phi i64 [ %456, %446 ], [ 0, %406 ]\l  %449 = zext i32 %447 to i64\l  %450 = getelementptr inbounds i8, i8 addrspace(4)* %402, i64 %449\l  %451 = load i8, i8 addrspace(4)* %450, align 1, !tbaa !11\l  %452 = zext i8 %451 to i64\l  %453 = shl i32 %447, 3\l  %454 = zext i32 %453 to i64\l  %455 = shl nuw i64 %452, %454\l  %456 = or i64 %455, %448\l  %457 = add nuw nsw i32 %447, 1\l  %458 = icmp eq i32 %457, %403\l  br i1 %458, label %459, label %446\l|{<s0>T|<s1>F}}"];
	Node0x48e7670:s0 -> Node0x48d7180;
	Node0x48e7670:s1 -> Node0x48e7670;
	Node0x48d7180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%459:\l459:                                              \l  %460 = phi i64 [ %445, %408 ], [ 0, %406 ], [ %456, %446 ]\l  %461 = shl nuw nsw i64 %42, 2\l  %462 = add nuw nsw i64 %461, 28\l  %463 = and i64 %462, 480\l  %464 = and i64 %44, -225\l  %465 = or i64 %464, %463\l  %466 = tail call fastcc \<2 x i64\> @__ockl_hostcall_internal(i8* noundef %23,\l... i64 noundef %465, i64 noundef %104, i64 noundef %164, i64 noundef %224, i64\l... noundef %284, i64 noundef %344, i64 noundef %404, i64 noundef %460) #10\l  %467 = sub i64 %34, %42\l  %468 = getelementptr inbounds i8, i8 addrspace(4)* %35, i64 %42\l  %469 = icmp eq i64 %467, 0\l  br i1 %469, label %724, label %33\l|{<s0>T|<s1>F}}"];
	Node0x48d7180:s0 -> Node0x48d6100;
	Node0x48d7180:s1 -> Node0x48d43c0;
	Node0x48d2f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%470:\l470:                                              \l  %471 = freeze i32 %13\l  %472 = freeze i32 %14\l  %473 = sdiv i32 %471, %472\l  %474 = mul i32 %473, %472\l  %475 = sub i32 %471, %474\l  %476 = icmp sgt i32 %3, 0\l  br i1 %476, label %477, label %503\l|{<s0>T|<s1>F}}"];
	Node0x48d2f40:s0 -> Node0x48e9de0;
	Node0x48d2f40:s1 -> Node0x48e9e30;
	Node0x48e9de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%477:\l477:                                              \l  %478 = sitofp i32 %3 to float\l  %479 = sub nsw i32 %2, %475\l  %480 = and i32 %479, -65536\l  %481 = sitofp i32 %480 to float\l  %482 = and i32 %479, 65535\l  %483 = sitofp i32 %482 to float\l  %484 = fadd float %481, %483\l  %485 = fsub float %481, %484\l  %486 = fadd float %485, %483\l  %487 = and i32 %479, 1\l  %488 = icmp eq i32 %487, 0\l  %489 = lshr i32 %479, 31\l  %490 = icmp eq i32 %475, %2\l  %491 = sub nsw i32 %2, %473\l  %492 = and i32 %491, -65536\l  %493 = sitofp i32 %492 to float\l  %494 = and i32 %491, 65535\l  %495 = sitofp i32 %494 to float\l  %496 = fadd float %493, %495\l  %497 = fsub float %493, %496\l  %498 = fadd float %497, %495\l  %499 = and i32 %491, 1\l  %500 = icmp eq i32 %499, 0\l  %501 = lshr i32 %491, 31\l  %502 = icmp eq i32 %473, %2\l  br label %507\l}"];
	Node0x48e9de0 -> Node0x48eaca0;
	Node0x48e9e30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%503:\l503:                                              \l  %504 = phi float [ 0.000000e+00, %470 ], [ %721, %507 ]\l  %505 = sext i32 %13 to i64\l  %506 = getelementptr inbounds float, float addrspace(1)* %1, i64 %505\l  store float %504, float addrspace(1)* %506, align 4, !tbaa !14\l  br label %724\l}"];
	Node0x48e9e30 -> Node0x48d6100;
	Node0x48eaca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%507:\l507:                                              \l  %508 = phi float [ 0.000000e+00, %477 ], [ %721, %507 ]\l  %509 = phi i32 [ 0, %477 ], [ %722, %507 ]\l  %510 = sitofp i32 %509 to float\l  %511 = fdiv contract float %510, %478\l  %512 = tail call float @llvm.fabs.f32(float %511)\l  %513 = tail call float @llvm.amdgcn.frexp.mant.f32(float %512)\l  %514 = fcmp olt float %513, 0x3FE5555560000000\l  %515 = zext i1 %514 to i32\l  %516 = tail call float @llvm.amdgcn.ldexp.f32(float %513, i32 %515)\l  %517 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %512)\l  %518 = sub nsw i32 %517, %515\l  %519 = fadd float %516, -1.000000e+00\l  %520 = fadd float %516, 1.000000e+00\l  %521 = fadd float %520, -1.000000e+00\l  %522 = fsub float %516, %521\l  %523 = tail call float @llvm.amdgcn.rcp.f32(float %520)\l  %524 = fmul float %519, %523\l  %525 = fmul float %520, %524\l  %526 = fneg float %525\l  %527 = tail call float @llvm.fma.f32(float %524, float %520, float %526)\l  %528 = tail call float @llvm.fma.f32(float %524, float %522, float %527)\l  %529 = fadd float %525, %528\l  %530 = fsub float %529, %525\l  %531 = fsub float %528, %530\l  %532 = fsub float %519, %529\l  %533 = fsub float %519, %532\l  %534 = fsub float %533, %529\l  %535 = fsub float %534, %531\l  %536 = fadd float %532, %535\l  %537 = fmul float %523, %536\l  %538 = fadd float %524, %537\l  %539 = fsub float %538, %524\l  %540 = fsub float %537, %539\l  %541 = fmul float %538, %538\l  %542 = fneg float %541\l  %543 = tail call float @llvm.fma.f32(float %538, float %538, float %542)\l  %544 = fmul float %540, 2.000000e+00\l  %545 = tail call float @llvm.fma.f32(float %538, float %544, float %543)\l  %546 = fadd float %541, %545\l  %547 = fsub float %546, %541\l  %548 = fsub float %545, %547\l  %549 = tail call float @llvm.fmuladd.f32(float %546, float\l... 0x3FCED89C20000000, float 0x3FD23E9880000000)\l  %550 = tail call float @llvm.fmuladd.f32(float %546, float %549, float\l... 0x3FD999BDE0000000)\l  %551 = sitofp i32 %518 to float\l  %552 = fmul float %551, 0x3FE62E4300000000\l  %553 = fneg float %552\l  %554 = tail call float @llvm.fma.f32(float %551, float 0x3FE62E4300000000,\l... float %553)\l  %555 = tail call float @llvm.fma.f32(float %551, float 0xBE205C6100000000,\l... float %554)\l  %556 = fadd float %552, %555\l  %557 = fsub float %556, %552\l  %558 = fsub float %555, %557\l  %559 = tail call float @llvm.amdgcn.ldexp.f32(float %538, i32 1)\l  %560 = fmul float %538, %546\l  %561 = fneg float %560\l  %562 = tail call float @llvm.fma.f32(float %546, float %538, float %561)\l  %563 = tail call float @llvm.fma.f32(float %546, float %540, float %562)\l  %564 = tail call float @llvm.fma.f32(float %548, float %538, float %563)\l  %565 = fadd float %560, %564\l  %566 = fsub float %565, %560\l  %567 = fsub float %564, %566\l  %568 = fmul float %546, %550\l  %569 = fneg float %568\l  %570 = tail call float @llvm.fma.f32(float %546, float %550, float %569)\l  %571 = tail call float @llvm.fma.f32(float %548, float %550, float %570)\l  %572 = fadd float %568, %571\l  %573 = fsub float %572, %568\l  %574 = fsub float %571, %573\l  %575 = fadd float %572, 0x3FE5555540000000\l  %576 = fadd float %575, 0xBFE5555540000000\l  %577 = fsub float %572, %576\l  %578 = fadd float %574, 0x3E2E720200000000\l  %579 = fadd float %578, %577\l  %580 = fadd float %575, %579\l  %581 = fsub float %580, %575\l  %582 = fsub float %579, %581\l  %583 = fmul float %565, %580\l  %584 = fneg float %583\l  %585 = tail call float @llvm.fma.f32(float %565, float %580, float %584)\l  %586 = tail call float @llvm.fma.f32(float %565, float %582, float %585)\l  %587 = tail call float @llvm.fma.f32(float %567, float %580, float %586)\l  %588 = tail call float @llvm.amdgcn.ldexp.f32(float %540, i32 1)\l  %589 = fadd float %583, %587\l  %590 = fsub float %589, %583\l  %591 = fsub float %587, %590\l  %592 = fadd float %559, %589\l  %593 = fsub float %592, %559\l  %594 = fsub float %589, %593\l  %595 = fadd float %588, %591\l  %596 = fadd float %595, %594\l  %597 = fadd float %592, %596\l  %598 = fsub float %597, %592\l  %599 = fsub float %596, %598\l  %600 = fadd float %556, %597\l  %601 = fsub float %600, %556\l  %602 = fsub float %600, %601\l  %603 = fsub float %556, %602\l  %604 = fsub float %597, %601\l  %605 = fadd float %604, %603\l  %606 = fadd float %558, %599\l  %607 = fsub float %606, %558\l  %608 = fsub float %606, %607\l  %609 = fsub float %558, %608\l  %610 = fsub float %599, %607\l  %611 = fadd float %610, %609\l  %612 = fadd float %606, %605\l  %613 = fadd float %600, %612\l  %614 = fsub float %613, %600\l  %615 = fsub float %612, %614\l  %616 = fadd float %611, %615\l  %617 = fadd float %613, %616\l  %618 = fsub float %617, %613\l  %619 = fsub float %616, %618\l  %620 = fmul float %484, %617\l  %621 = fneg float %620\l  %622 = tail call float @llvm.fma.f32(float %484, float %617, float %621)\l  %623 = fmul float %486, %617\l  %624 = tail call float @llvm.fma.f32(float %484, float %619, float %623)\l  %625 = fadd float %622, %624\l  %626 = fadd float %620, %625\l  %627 = fsub float %626, %620\l  %628 = fsub float %625, %627\l  %629 = tail call float @llvm.fabs.f32(float %620) #11\l  %630 = fcmp oeq float %629, 0x7FF0000000000000\l  %631 = select i1 %630, float %620, float %626\l  %632 = tail call float @llvm.fabs.f32(float %631) #11\l  %633 = fcmp oeq float %632, 0x7FF0000000000000\l  %634 = select i1 %633, float 0.000000e+00, float %628\l  %635 = fcmp oeq float %631, 0x40562E4300000000\l  %636 = select i1 %635, float 0x3EE0000000000000, float 0.000000e+00\l  %637 = fsub float %631, %636\l  %638 = fadd float %636, %634\l  %639 = fmul float %637, 0x3FF7154760000000\l  %640 = tail call float @llvm.rint.f32(float %639)\l  %641 = fcmp ogt float %637, 0x40562E4300000000\l  %642 = fcmp olt float %637, 0xC059D1DA00000000\l  %643 = fneg float %639\l  %644 = tail call float @llvm.fma.f32(float %637, float 0x3FF7154760000000,\l... float %643)\l  %645 = tail call float @llvm.fma.f32(float %637, float 0x3E54AE0BE0000000,\l... float %644)\l  %646 = fsub float %639, %640\l  %647 = fadd float %645, %646\l  %648 = tail call float @llvm.exp2.f32(float %647)\l  %649 = fptosi float %640 to i32\l  %650 = tail call float @llvm.amdgcn.ldexp.f32(float %648, i32 %649)\l  %651 = select i1 %642, float 0.000000e+00, float %650\l  %652 = select i1 %641, float 0x7FF0000000000000, float %651\l  %653 = tail call float @llvm.fma.f32(float %652, float %638, float %652)\l  %654 = tail call float @llvm.fabs.f32(float %652) #11\l  %655 = fcmp oeq float %654, 0x7FF0000000000000\l  %656 = select i1 %655, float %652, float %653\l  %657 = fcmp uge float %511, 0.000000e+00\l  %658 = or i1 %488, %657\l  %659 = select i1 %658, float 0.000000e+00, float -0.000000e+00\l  %660 = tail call float @llvm.copysign.f32(float %656, float %659)\l  %661 = fcmp oeq float %512, 0x7FF0000000000000\l  %662 = fcmp oeq float %511, 0.000000e+00\l  %663 = or i1 %662, %661\l  %664 = zext i1 %662 to i32\l  %665 = icmp eq i32 %489, %664\l  %666 = select i1 %665, float 0x7FF0000000000000, float 0.000000e+00\l  %667 = select i1 %488, float 0.000000e+00, float %511\l  %668 = tail call float @llvm.copysign.f32(float %666, float %667)\l  %669 = select i1 %663, float %668, float %660\l  %670 = fcmp uno float %511, 0.000000e+00\l  %671 = select i1 %670, float 0x7FF8000000000000, float %669\l  %672 = select i1 %490, float 1.000000e+00, float %671\l  %673 = fmul float %496, %617\l  %674 = fneg float %673\l  %675 = tail call float @llvm.fma.f32(float %496, float %617, float %674)\l  %676 = fmul float %498, %617\l  %677 = tail call float @llvm.fma.f32(float %496, float %619, float %676)\l  %678 = fadd float %675, %677\l  %679 = fadd float %673, %678\l  %680 = fsub float %679, %673\l  %681 = fsub float %678, %680\l  %682 = tail call float @llvm.fabs.f32(float %673) #11\l  %683 = fcmp oeq float %682, 0x7FF0000000000000\l  %684 = select i1 %683, float %673, float %679\l  %685 = tail call float @llvm.fabs.f32(float %684) #11\l  %686 = fcmp oeq float %685, 0x7FF0000000000000\l  %687 = select i1 %686, float 0.000000e+00, float %681\l  %688 = fcmp oeq float %684, 0x40562E4300000000\l  %689 = select i1 %688, float 0x3EE0000000000000, float 0.000000e+00\l  %690 = fsub float %684, %689\l  %691 = fadd float %689, %687\l  %692 = fmul float %690, 0x3FF7154760000000\l  %693 = tail call float @llvm.rint.f32(float %692)\l  %694 = fcmp ogt float %690, 0x40562E4300000000\l  %695 = fcmp olt float %690, 0xC059D1DA00000000\l  %696 = fneg float %692\l  %697 = tail call float @llvm.fma.f32(float %690, float 0x3FF7154760000000,\l... float %696)\l  %698 = tail call float @llvm.fma.f32(float %690, float 0x3E54AE0BE0000000,\l... float %697)\l  %699 = fsub float %692, %693\l  %700 = fadd float %698, %699\l  %701 = tail call float @llvm.exp2.f32(float %700)\l  %702 = fptosi float %693 to i32\l  %703 = tail call float @llvm.amdgcn.ldexp.f32(float %701, i32 %702)\l  %704 = select i1 %695, float 0.000000e+00, float %703\l  %705 = select i1 %694, float 0x7FF0000000000000, float %704\l  %706 = tail call float @llvm.fma.f32(float %705, float %691, float %705)\l  %707 = tail call float @llvm.fabs.f32(float %705) #11\l  %708 = fcmp oeq float %707, 0x7FF0000000000000\l  %709 = select i1 %708, float %705, float %706\l  %710 = or i1 %500, %657\l  %711 = select i1 %710, float 0.000000e+00, float -0.000000e+00\l  %712 = tail call float @llvm.copysign.f32(float %709, float %711)\l  %713 = icmp eq i32 %501, %664\l  %714 = select i1 %713, float 0x7FF0000000000000, float 0.000000e+00\l  %715 = select i1 %500, float 0.000000e+00, float %511\l  %716 = tail call float @llvm.copysign.f32(float %714, float %715)\l  %717 = select i1 %663, float %716, float %712\l  %718 = select i1 %670, float 0x7FF8000000000000, float %717\l  %719 = select i1 %502, float 1.000000e+00, float %718\l  %720 = fmul contract float %672, %719\l  %721 = fadd contract float %508, %720\l  %722 = add nuw nsw i32 %509, 1\l  %723 = icmp eq i32 %722, %3\l  br i1 %723, label %503, label %507, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x48eaca0:s0 -> Node0x48e9e30;
	Node0x48eaca0:s1 -> Node0x48eaca0;
	Node0x48d6100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%724:\l724:                                              \l  ret void\l}"];
}
