digraph "CFG for '_Z7maxpoolPfS_ii' function" {
	label="CFG for '_Z7maxpoolPfS_ii' function";

	Node0x56ef720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %6, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %15 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 2, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %3, 0\l  br i1 %22, label %23, label %34\l|{<s0>T|<s1>F}}"];
	Node0x56ef720:s0 -> Node0x56f3080;
	Node0x56ef720:s1 -> Node0x56f3110;
	Node0x56f3080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%23:\l23:                                               \l  %24 = mul i32 %21, %3\l  %25 = mul nsw i32 %13, %3\l  %26 = and i32 %3, 7\l  %27 = icmp ult i32 %3, 8\l  %28 = and i32 %3, -8\l  %29 = icmp eq i32 %26, 0\l  br label %30\l}"];
	Node0x56f3080 -> Node0x56f3640;
	Node0x56f3640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%30:\l30:                                               \l  %31 = phi i32 [ 0, %23 ], [ %61, %59 ]\l  %32 = phi float [ 0xC12E847FC0000000, %23 ], [ %60, %59 ]\l  %33 = add i32 %31, %25\l  br i1 %27, label %40, label %63\l|{<s0>T|<s1>F}}"];
	Node0x56f3640:s0 -> Node0x56f1920;
	Node0x56f3640:s1 -> Node0x56f4630;
	Node0x56f3110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%34:\l34:                                               \l  %35 = phi float [ 0xC12E847FC0000000, %4 ], [ %60, %59 ]\l  %36 = sdiv i32 %2, %3\l  %37 = icmp slt i32 %13, %36\l  %38 = icmp slt i32 %21, %36\l  %39 = select i1 %37, i1 %38, i1 false\l  br i1 %39, label %141, label %146\l|{<s0>T|<s1>F}}"];
	Node0x56f3110:s0 -> Node0x56f4a80;
	Node0x56f3110:s1 -> Node0x56f4ad0;
	Node0x56f1920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%40:\l40:                                               \l  %41 = phi float [ undef, %30 ], [ %137, %63 ]\l  %42 = phi i32 [ 0, %30 ], [ %138, %63 ]\l  %43 = phi float [ %32, %30 ], [ %137, %63 ]\l  br i1 %29, label %59, label %44\l|{<s0>T|<s1>F}}"];
	Node0x56f1920:s0 -> Node0x56f3730;
	Node0x56f1920:s1 -> Node0x56f52e0;
	Node0x56f52e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  %45 = phi i32 [ %56, %44 ], [ %42, %40 ]\l  %46 = phi float [ %55, %44 ], [ %43, %40 ]\l  %47 = phi i32 [ %57, %44 ], [ 0, %40 ]\l  %48 = add i32 %45, %24\l  %49 = mul i32 %48, %2\l  %50 = add i32 %33, %49\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %0, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %54 = fcmp contract olt float %46, %53\l  %55 = select i1 %54, float %53, float %46\l  %56 = add nuw nsw i32 %45, 1\l  %57 = add i32 %47, 1\l  %58 = icmp eq i32 %57, %26\l  br i1 %58, label %59, label %44, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x56f52e0:s0 -> Node0x56f3730;
	Node0x56f52e0:s1 -> Node0x56f52e0;
	Node0x56f3730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%59:\l59:                                               \l  %60 = phi float [ %41, %40 ], [ %55, %44 ]\l  %61 = add nuw nsw i32 %31, 1\l  %62 = icmp eq i32 %61, %3\l  br i1 %62, label %34, label %30, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x56f3730:s0 -> Node0x56f3110;
	Node0x56f3730:s1 -> Node0x56f3640;
	Node0x56f4630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%63:\l63:                                               \l  %64 = phi i32 [ %138, %63 ], [ 0, %30 ]\l  %65 = phi float [ %137, %63 ], [ %32, %30 ]\l  %66 = phi i32 [ %139, %63 ], [ 0, %30 ]\l  %67 = add i32 %64, %24\l  %68 = mul i32 %67, %2\l  %69 = add i32 %33, %68\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %73 = fcmp contract olt float %65, %72\l  %74 = select i1 %73, float %72, float %65\l  %75 = or i32 %64, 1\l  %76 = add i32 %75, %24\l  %77 = mul i32 %76, %2\l  %78 = add i32 %33, %77\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %0, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = fcmp contract olt float %74, %81\l  %83 = select i1 %82, float %81, float %74\l  %84 = or i32 %64, 2\l  %85 = add i32 %84, %24\l  %86 = mul i32 %85, %2\l  %87 = add i32 %33, %86\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fcmp contract olt float %83, %90\l  %92 = select i1 %91, float %90, float %83\l  %93 = or i32 %64, 3\l  %94 = add i32 %93, %24\l  %95 = mul i32 %94, %2\l  %96 = add i32 %33, %95\l  %97 = sext i32 %96 to i64\l  %98 = getelementptr inbounds float, float addrspace(1)* %0, i64 %97\l  %99 = load float, float addrspace(1)* %98, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %100 = fcmp contract olt float %92, %99\l  %101 = select i1 %100, float %99, float %92\l  %102 = or i32 %64, 4\l  %103 = add i32 %102, %24\l  %104 = mul i32 %103, %2\l  %105 = add i32 %33, %104\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %0, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %109 = fcmp contract olt float %101, %108\l  %110 = select i1 %109, float %108, float %101\l  %111 = or i32 %64, 5\l  %112 = add i32 %111, %24\l  %113 = mul i32 %112, %2\l  %114 = add i32 %33, %113\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %0, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = fcmp contract olt float %110, %117\l  %119 = select i1 %118, float %117, float %110\l  %120 = or i32 %64, 6\l  %121 = add i32 %120, %24\l  %122 = mul i32 %121, %2\l  %123 = add i32 %33, %122\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %0, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fcmp contract olt float %119, %126\l  %128 = select i1 %127, float %126, float %119\l  %129 = or i32 %64, 7\l  %130 = add i32 %129, %24\l  %131 = mul i32 %130, %2\l  %132 = add i32 %33, %131\l  %133 = sext i32 %132 to i64\l  %134 = getelementptr inbounds float, float addrspace(1)* %0, i64 %133\l  %135 = load float, float addrspace(1)* %134, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %136 = fcmp contract olt float %128, %135\l  %137 = select i1 %136, float %135, float %128\l  %138 = add nuw nsw i32 %64, 8\l  %139 = add i32 %66, 8\l  %140 = icmp eq i32 %139, %28\l  br i1 %140, label %40, label %63, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56f4630:s0 -> Node0x56f1920;
	Node0x56f4630:s1 -> Node0x56f4630;
	Node0x56f4a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#88abfd70",label="{%141:\l141:                                              \l  %142 = mul nsw i32 %36, %21\l  %143 = add nsw i32 %142, %13\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  store float %35, float addrspace(1)* %145, align 4, !tbaa !7\l  br label %146\l}"];
	Node0x56f4a80 -> Node0x56f4ad0;
	Node0x56f4ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%146:\l146:                                              \l  ret void\l}"];
}
