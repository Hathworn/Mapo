digraph "CFG for '_Z6RandomPfij' function" {
	label="CFG for '_Z6RandomPfij' function";

	Node0x6300a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%3:\l  %4 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %10) #3\l  %11 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 0\l  %12 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 1\l  %13 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 2\l  %14 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 3\l  %15 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 4\l  %16 = xor i32 %2, 746559103\l  %17 = mul i32 %16, 1228688033\l  %18 = add i32 %17, 123456789\l  store i32 %18, i32 addrspace(5)* %11, align 8, !tbaa !6\l  %19 = xor i32 %17, 362436069\l  store i32 %19, i32 addrspace(5)* %12, align 4, !tbaa !6\l  store i32 -1452303100, i32 addrspace(5)* %13, align 8, !tbaa !6\l  store i32 -1894485380, i32 addrspace(5)* %14, align 4, !tbaa !6\l  %20 = add i32 %17, 5783321\l  store i32 %20, i32 addrspace(5)* %15, align 8, !tbaa !6\l  %21 = icmp eq i32 %5, 0\l  br i1 %21, label %205, label %22\l|{<s0>T|<s1>F}}"];
	Node0x6300a00:s0 -> Node0x6306e90;
	Node0x6300a00:s1 -> Node0x6306f20;
	Node0x6306f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%22:\l22:                                               \l  %23 = zext i32 %5 to i64\l  br label %24\l}"];
	Node0x6306f20 -> Node0x63070d0;
	Node0x63070d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%24:\l24:                                               \l  %25 = phi i32 [ %35, %34 ], [ %20, %22 ]\l  %26 = phi i32 [ %36, %34 ], [ %18, %22 ]\l  %27 = phi i64 [ %38, %34 ], [ %23, %22 ]\l  %28 = phi i32 [ %37, %34 ], [ 0, %22 ]\l  %29 = trunc i64 %27 to i32\l  %30 = and i32 %29, 3\l  %31 = icmp eq i32 %30, 0\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x63070d0:s0 -> Node0x6307190;
	Node0x63070d0:s1 -> Node0x63077c0;
	Node0x63077c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%32:\l32:                                               \l  %33 = zext i32 %28 to i64\l  br label %40\l}"];
	Node0x63077c0 -> Node0x6306040;
	Node0x6307190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%34:\l34:                                               \l  %35 = phi i32 [ %25, %24 ], [ %199, %202 ]\l  %36 = phi i32 [ %26, %24 ], [ %175, %202 ]\l  %37 = add nuw nsw i32 %28, 1\l  %38 = lshr i64 %27, 2\l  %39 = icmp ult i64 %27, 4\l  br i1 %39, label %205, label %24, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x6307190:s0 -> Node0x6306e90;
	Node0x6307190:s1 -> Node0x63070d0;
	Node0x6306040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%40:\l40:                                               \l  %41 = phi i32 [ 0, %32 ], [ %203, %202 ]\l  br label %42\l}"];
	Node0x6306040 -> Node0x6308100;
	Node0x6308100 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i32 [ 0, %40 ], [ %175, %42 ]\l  %44 = phi i32 [ 0, %40 ], [ %181, %42 ]\l  %45 = phi i32 [ 0, %40 ], [ %187, %42 ]\l  %46 = phi i32 [ 0, %40 ], [ %193, %42 ]\l  %47 = phi i32 [ 0, %40 ], [ %199, %42 ]\l  %48 = phi i32 [ 0, %40 ], [ %200, %42 ]\l  %49 = lshr i32 %48, 5\l  %50 = and i32 %48, 28\l  %51 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %49\l  %52 = load i32, i32 addrspace(5)* %51, align 4, !tbaa !6\l  %53 = shl nuw i32 1, %50\l  %54 = and i32 %53, %52\l  %55 = icmp eq i32 %54, 0\l  %56 = mul nuw nsw i32 %48, 5\l  %57 = zext i32 %56 to i64\l  %58 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %57\l  %59 = load i32, i32 addrspace(4)* %58, align 16, !tbaa !6\l  %60 = select i1 %55, i32 0, i32 %59\l  %61 = xor i32 %60, %43\l  %62 = or i32 %56, 1\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %63\l  %65 = load i32, i32 addrspace(4)* %64, align 4, !tbaa !6\l  %66 = select i1 %55, i32 0, i32 %65\l  %67 = xor i32 %66, %44\l  %68 = or i32 %56, 2\l  %69 = zext i32 %68 to i64\l  %70 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %69\l  %71 = load i32, i32 addrspace(4)* %70, align 8, !tbaa !6\l  %72 = select i1 %55, i32 0, i32 %71\l  %73 = xor i32 %72, %45\l  %74 = or i32 %56, 3\l  %75 = zext i32 %74 to i64\l  %76 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %75\l  %77 = load i32, i32 addrspace(4)* %76, align 4, !tbaa !6\l  %78 = select i1 %55, i32 0, i32 %77\l  %79 = xor i32 %78, %46\l  %80 = add nuw nsw i32 %56, 4\l  %81 = zext i32 %80 to i64\l  %82 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %81\l  %83 = load i32, i32 addrspace(4)* %82, align 16, !tbaa !6\l  %84 = select i1 %55, i32 0, i32 %83\l  %85 = xor i32 %84, %47\l  %86 = or i32 %48, 1\l  %87 = lshr i32 %48, 5\l  %88 = and i32 %86, 29\l  %89 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %87\l  %90 = load i32, i32 addrspace(5)* %89, align 4, !tbaa !6\l  %91 = shl nuw i32 1, %88\l  %92 = and i32 %91, %90\l  %93 = icmp eq i32 %92, 0\l  %94 = mul nuw nsw i32 %86, 5\l  %95 = zext i32 %94 to i64\l  %96 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %95\l  %97 = load i32, i32 addrspace(4)* %96, align 4, !tbaa !6\l  %98 = select i1 %93, i32 0, i32 %97\l  %99 = xor i32 %98, %61\l  %100 = add nuw nsw i32 %94, 1\l  %101 = zext i32 %100 to i64\l  %102 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %101\l  %103 = load i32, i32 addrspace(4)* %102, align 8, !tbaa !6\l  %104 = select i1 %93, i32 0, i32 %103\l  %105 = xor i32 %104, %67\l  %106 = or i32 %94, 2\l  %107 = zext i32 %106 to i64\l  %108 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %107\l  %109 = load i32, i32 addrspace(4)* %108, align 4, !tbaa !6\l  %110 = select i1 %93, i32 0, i32 %109\l  %111 = xor i32 %110, %73\l  %112 = add nuw nsw i32 %94, 3\l  %113 = zext i32 %112 to i64\l  %114 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %113\l  %115 = load i32, i32 addrspace(4)* %114, align 16, !tbaa !6\l  %116 = select i1 %93, i32 0, i32 %115\l  %117 = xor i32 %116, %79\l  %118 = add nuw nsw i32 %94, 4\l  %119 = zext i32 %118 to i64\l  %120 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %119\l  %121 = load i32, i32 addrspace(4)* %120, align 4, !tbaa !6\l  %122 = select i1 %93, i32 0, i32 %121\l  %123 = xor i32 %122, %85\l  %124 = or i32 %48, 2\l  %125 = lshr i32 %48, 5\l  %126 = and i32 %124, 30\l  %127 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %125\l  %128 = load i32, i32 addrspace(5)* %127, align 4, !tbaa !6\l  %129 = shl nuw i32 1, %126\l  %130 = and i32 %129, %128\l  %131 = icmp eq i32 %130, 0\l  %132 = mul nuw nsw i32 %124, 5\l  %133 = zext i32 %132 to i64\l  %134 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %133\l  %135 = load i32, i32 addrspace(4)* %134, align 8, !tbaa !6\l  %136 = select i1 %131, i32 0, i32 %135\l  %137 = xor i32 %136, %99\l  %138 = or i32 %132, 1\l  %139 = zext i32 %138 to i64\l  %140 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %139\l  %141 = load i32, i32 addrspace(4)* %140, align 4, !tbaa !6\l  %142 = select i1 %131, i32 0, i32 %141\l  %143 = xor i32 %142, %105\l  %144 = add nuw nsw i32 %132, 2\l  %145 = zext i32 %144 to i64\l  %146 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %145\l  %147 = load i32, i32 addrspace(4)* %146, align 16, !tbaa !6\l  %148 = select i1 %131, i32 0, i32 %147\l  %149 = xor i32 %148, %111\l  %150 = add nuw nsw i32 %132, 3\l  %151 = zext i32 %150 to i64\l  %152 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %151\l  %153 = load i32, i32 addrspace(4)* %152, align 4, !tbaa !6\l  %154 = select i1 %131, i32 0, i32 %153\l  %155 = xor i32 %154, %117\l  %156 = add nuw nsw i32 %132, 4\l  %157 = zext i32 %156 to i64\l  %158 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %157\l  %159 = load i32, i32 addrspace(4)* %158, align 8, !tbaa !6\l  %160 = select i1 %131, i32 0, i32 %159\l  %161 = xor i32 %160, %123\l  %162 = or i32 %48, 3\l  %163 = lshr i32 %48, 5\l  %164 = and i32 %162, 31\l  %165 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %4, i32 0, i32 0, i32 5,\l... i32 %163\l  %166 = load i32, i32 addrspace(5)* %165, align 4, !tbaa !6\l  %167 = shl nuw i32 1, %164\l  %168 = and i32 %167, %166\l  %169 = icmp eq i32 %168, 0\l  %170 = mul nuw nsw i32 %162, 5\l  %171 = zext i32 %170 to i64\l  %172 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %171\l  %173 = load i32, i32 addrspace(4)* %172, align 4, !tbaa !6\l  %174 = select i1 %169, i32 0, i32 %173\l  %175 = xor i32 %174, %137\l  %176 = add nuw nsw i32 %170, 1\l  %177 = zext i32 %176 to i64\l  %178 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %177\l  %179 = load i32, i32 addrspace(4)* %178, align 16, !tbaa !6\l  %180 = select i1 %169, i32 0, i32 %179\l  %181 = xor i32 %180, %143\l  %182 = add nuw nsw i32 %170, 2\l  %183 = zext i32 %182 to i64\l  %184 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %183\l  %185 = load i32, i32 addrspace(4)* %184, align 4, !tbaa !6\l  %186 = select i1 %169, i32 0, i32 %185\l  %187 = xor i32 %186, %149\l  %188 = add nuw nsw i32 %170, 3\l  %189 = zext i32 %188 to i64\l  %190 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %189\l  %191 = load i32, i32 addrspace(4)* %190, align 8, !tbaa !6\l  %192 = select i1 %169, i32 0, i32 %191\l  %193 = xor i32 %192, %155\l  %194 = add nuw nsw i32 %170, 4\l  %195 = zext i32 %194 to i64\l  %196 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %33, i64 %195\l  %197 = load i32, i32 addrspace(4)* %196, align 4, !tbaa !6\l  %198 = select i1 %169, i32 0, i32 %197\l  %199 = xor i32 %198, %161\l  %200 = add nuw nsw i32 %48, 4\l  %201 = icmp eq i32 %200, 160\l  br i1 %201, label %202, label %42, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x6308100:s0 -> Node0x6307b80;
	Node0x6308100:s1 -> Node0x6308100;
	Node0x6307b80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%202:\l202:                                              \l  store i32 %175, i32 addrspace(5)* %11, align 8, !tbaa !6\l  store i32 %181, i32 addrspace(5)* %12, align 4, !tbaa !6\l  store i32 %187, i32 addrspace(5)* %13, align 8, !tbaa !6\l  store i32 %193, i32 addrspace(5)* %14, align 4, !tbaa !6\l  store i32 %199, i32 addrspace(5)* %15, align 8, !tbaa !6\l  %203 = add nuw nsw i32 %41, 1\l  %204 = icmp eq i32 %203, %30\l  br i1 %204, label %34, label %40, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x6307b80:s0 -> Node0x6307190;
	Node0x6307b80:s1 -> Node0x6306040;
	Node0x6306e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%205:\l205:                                              \l  %206 = phi i32 [ %20, %3 ], [ %35, %34 ]\l  %207 = phi i32 [ %18, %3 ], [ %36, %34 ]\l  %208 = zext i16 %9 to i32\l  %209 = mul i32 %5, %208\l  %210 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !14\l  %211 = add i32 %209, %210\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %10) #3\l  %212 = lshr i32 %207, 2\l  %213 = xor i32 %212, %207\l  %214 = shl i32 %206, 4\l  %215 = shl i32 %213, 1\l  %216 = xor i32 %214, %215\l  %217 = xor i32 %216, %206\l  %218 = xor i32 %217, %213\l  %219 = add i32 %17, -1966614051\l  %220 = add i32 %219, %218\l  %221 = uitofp i32 %220 to float\l  %222 = fdiv contract float %221, 1.000000e+03\l  %223 = sext i32 %211 to i64\l  %224 = getelementptr inbounds float, float addrspace(1)* %0, i64 %223\l  store float %222, float addrspace(1)* %224, align 4, !tbaa !15\l  ret void\l}"];
}
