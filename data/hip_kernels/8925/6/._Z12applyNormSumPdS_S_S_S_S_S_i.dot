digraph "CFG for '_Z12applyNormSumPdS_S_S_S_S_S_i' function" {
	label="CFG for '_Z12applyNormSumPdS_S_S_S_S_S_i' function";

	Node0x60a2990 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %11 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %12 = getelementptr i8, i8 addrspace(4)* %11, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !5, !invariant.load !6\l  %15 = zext i16 %14 to i32\l  %16 = getelementptr inbounds i8, i8 addrspace(4)* %11, i64 12\l  %17 = bitcast i8 addrspace(4)* %16 to i32 addrspace(4)*\l  %18 = load i32, i32 addrspace(4)* %17, align 4, !tbaa !7\l  %19 = mul i32 %10, %15\l  %20 = add i32 %19, %9\l  %21 = load double, double addrspace(1)* %2, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %22 = load double, double addrspace(1)* %3, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %23 = fsub contract double %21, %22\l  %24 = fmul contract double %23, %23\l  %25 = load double, double addrspace(1)* %5, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %26 = load double, double addrspace(1)* %6, align 8, !tbaa !16,\l... !amdgpu.noclobber !6\l  %27 = fsub contract double %25, %26\l  %28 = fmul contract double %27, %27\l  %29 = icmp slt i32 %20, %7\l  br i1 %29, label %30, label %52\l|{<s0>T|<s1>F}}"];
	Node0x60a2990:s0 -> Node0x60a5e70;
	Node0x60a2990:s1 -> Node0x60a5f00;
	Node0x60a5e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%30:\l30:                                               \l  %31 = udiv i32 %18, %15\l  %32 = mul i32 %31, %15\l  %33 = icmp ugt i32 %18, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = mul i32 %35, %15\l  br label %37\l}"];
	Node0x60a5e70 -> Node0x60a6490;
	Node0x60a6490 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%37:\l37:                                               \l  %38 = phi i32 [ %20, %30 ], [ %50, %37 ]\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %1, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !16\l  %42 = fmul contract double %24, %41\l  %43 = getelementptr inbounds double, double addrspace(1)* %4, i64 %39\l  %44 = load double, double addrspace(1)* %43, align 8, !tbaa !16\l  %45 = fmul contract double %28, %44\l  %46 = fadd contract double %42, %45\l  %47 = getelementptr inbounds double, double addrspace(1)* %0, i64 %39\l  %48 = load double, double addrspace(1)* %47, align 8, !tbaa !16\l  %49 = fadd contract double %48, %46\l  store double %49, double addrspace(1)* %47, align 8, !tbaa !16\l  %50 = add i32 %36, %38\l  %51 = icmp slt i32 %50, %7\l  br i1 %51, label %37, label %52, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x60a6490:s0 -> Node0x60a6490;
	Node0x60a6490:s1 -> Node0x60a5f00;
	Node0x60a5f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%52:\l52:                                               \l  ret void\l}"];
}
