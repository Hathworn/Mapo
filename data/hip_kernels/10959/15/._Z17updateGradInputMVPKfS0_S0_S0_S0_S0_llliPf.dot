digraph "CFG for '_Z17updateGradInputMVPKfS0_S0_S0_S0_S0_llliPf' function" {
	label="CFG for '_Z17updateGradInputMVPKfS0_S0_S0_S0_S0_llliPf' function";

	Node0x5a77ed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%11:\l  %12 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %13 = zext i32 %12 to i64\l  %14 = mul nsw i64 %13, %6\l  %15 = getelementptr inbounds float, float addrspace(1)* %10, i64 %14\l  %16 = mul nsw i64 %13, %8\l  %17 = getelementptr inbounds float, float addrspace(1)* %0, i64 %16\l  %18 = getelementptr inbounds float, float addrspace(1)* %5, i64 %13\l  %19 = load float, float addrspace(1)* %18, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %20 = fadd contract float %19, -5.000000e-01\l  %21 = fptosi float %20 to i32\l  %22 = shl nsw i32 %21, 1\l  %23 = sext i32 %22 to i64\l  %24 = getelementptr inbounds float, float addrspace(1)* %2, i64 %23\l  %25 = load float, float addrspace(1)* %24, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %26 = fadd contract float %25, -5.000000e-01\l  %27 = fptosi float %26 to i32\l  %28 = sext i32 %27 to i64\l  %29 = getelementptr inbounds float, float addrspace(1)* %4, i64 %28\l  %30 = load float, float addrspace(1)* %29, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %31 = fadd contract float %30, 5.000000e-01\l  %32 = fptosi float %31 to i32\l  %33 = getelementptr inbounds float, float addrspace(1)* %3, i64 %28\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !4,\l... !amdgpu.noclobber !8\l  %35 = fadd contract float %34, 5.000000e-01\l  %36 = fptosi float %35 to i32\l  %37 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %38 = shl i32 %37, 7\l  %39 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !9\l  %40 = add i32 %38, %39\l  %41 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %42 = getelementptr inbounds i8, i8 addrspace(4)* %41, i64 12\l  %43 = bitcast i8 addrspace(4)* %42 to i32 addrspace(4)*\l  %44 = load i32, i32 addrspace(4)* %43, align 4, !tbaa !10\l  %45 = getelementptr i8, i8 addrspace(4)* %41, i64 4\l  %46 = bitcast i8 addrspace(4)* %45 to i16 addrspace(4)*\l  %47 = load i16, i16 addrspace(4)* %46, align 4, !range !19, !invariant.load\l... !8\l  %48 = zext i16 %47 to i32\l  %49 = udiv i32 %44, %48\l  %50 = mul i32 %49, %48\l  %51 = icmp ugt i32 %44, %50\l  %52 = zext i1 %51 to i32\l  %53 = add i32 %49, %52\l  %54 = shl i32 %53, 7\l  %55 = sext i32 %32 to i64\l  %56 = mul nsw i64 %55, %7\l  %57 = getelementptr inbounds float, float addrspace(1)* %1, i64 %56\l  %58 = icmp slt i32 %40, %9\l  br i1 %58, label %59, label %65\l|{<s0>T|<s1>F}}"];
	Node0x5a77ed0:s0 -> Node0x5a7db20;
	Node0x5a77ed0:s1 -> Node0x5a7dbb0;
	Node0x5a7db20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%59:\l59:                                               \l  %60 = icmp sgt i32 %36, 0\l  %61 = and i32 %36, 3\l  %62 = icmp ult i32 %36, 4\l  %63 = and i32 %36, -4\l  %64 = icmp eq i32 %61, 0\l  br label %66\l}"];
	Node0x5a7db20 -> Node0x5a7c280;
	Node0x5a7dbb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%65:\l65:                                               \l  ret void\l}"];
	Node0x5a7c280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%66:\l66:                                               \l  %67 = phi i32 [ %40, %59 ], [ %93, %90 ]\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds float, float addrspace(1)* %57, i64 %68\l  br i1 %60, label %70, label %90\l|{<s0>T|<s1>F}}"];
	Node0x5a7c280:s0 -> Node0x5a7e5a0;
	Node0x5a7c280:s1 -> Node0x5a7c3c0;
	Node0x5a7e5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%70:\l70:                                               \l  br i1 %62, label %71, label %95\l|{<s0>T|<s1>F}}"];
	Node0x5a7e5a0:s0 -> Node0x5a7e6e0;
	Node0x5a7e5a0:s1 -> Node0x5a7e730;
	Node0x5a7e6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%71:\l71:                                               \l  %72 = phi float [ undef, %70 ], [ %133, %95 ]\l  %73 = phi i32 [ 0, %70 ], [ %134, %95 ]\l  %74 = phi float [ 0.000000e+00, %70 ], [ %133, %95 ]\l  br i1 %64, label %90, label %75\l|{<s0>T|<s1>F}}"];
	Node0x5a7e6e0:s0 -> Node0x5a7c3c0;
	Node0x5a7e6e0:s1 -> Node0x5a7ef40;
	Node0x5a7ef40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%75:\l75:                                               \l  %76 = phi i32 [ %87, %75 ], [ %73, %71 ]\l  %77 = phi float [ %86, %75 ], [ %74, %71 ]\l  %78 = phi i32 [ %88, %75 ], [ 0, %71 ]\l  %79 = zext i32 %76 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %17, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !4\l  %82 = mul nsw i64 %79, %7\l  %83 = getelementptr inbounds float, float addrspace(1)* %69, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !4\l  %85 = fmul contract float %81, %84\l  %86 = fadd contract float %77, %85\l  %87 = add nuw nsw i32 %76, 1\l  %88 = add i32 %78, 1\l  %89 = icmp eq i32 %88, %61\l  br i1 %89, label %90, label %75, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x5a7ef40:s0 -> Node0x5a7c3c0;
	Node0x5a7ef40:s1 -> Node0x5a7ef40;
	Node0x5a7c3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%90:\l90:                                               \l  %91 = phi float [ 0.000000e+00, %66 ], [ %72, %71 ], [ %86, %75 ]\l  %92 = getelementptr inbounds float, float addrspace(1)* %15, i64 %68\l  store float %91, float addrspace(1)* %92, align 4, !tbaa !4\l  %93 = add nsw i32 %67, %54\l  %94 = icmp slt i32 %93, %9\l  br i1 %94, label %66, label %65, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x5a7c3c0:s0 -> Node0x5a7c280;
	Node0x5a7c3c0:s1 -> Node0x5a7dbb0;
	Node0x5a7e730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%95:\l95:                                               \l  %96 = phi i32 [ %134, %95 ], [ 0, %70 ]\l  %97 = phi float [ %133, %95 ], [ 0.000000e+00, %70 ]\l  %98 = phi i32 [ %135, %95 ], [ 0, %70 ]\l  %99 = zext i32 %96 to i64\l  %100 = getelementptr inbounds float, float addrspace(1)* %17, i64 %99\l  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4\l  %102 = mul nsw i64 %99, %7\l  %103 = getelementptr inbounds float, float addrspace(1)* %69, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !4\l  %105 = fmul contract float %101, %104\l  %106 = fadd contract float %97, %105\l  %107 = or i32 %96, 1\l  %108 = zext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %17, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4\l  %111 = mul nsw i64 %108, %7\l  %112 = getelementptr inbounds float, float addrspace(1)* %69, i64 %111\l  %113 = load float, float addrspace(1)* %112, align 4, !tbaa !4\l  %114 = fmul contract float %110, %113\l  %115 = fadd contract float %106, %114\l  %116 = or i32 %96, 2\l  %117 = zext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %17, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4\l  %120 = mul nsw i64 %117, %7\l  %121 = getelementptr inbounds float, float addrspace(1)* %69, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !4\l  %123 = fmul contract float %119, %122\l  %124 = fadd contract float %115, %123\l  %125 = or i32 %96, 3\l  %126 = zext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %17, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4\l  %129 = mul nsw i64 %126, %7\l  %130 = getelementptr inbounds float, float addrspace(1)* %69, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !4\l  %132 = fmul contract float %128, %131\l  %133 = fadd contract float %124, %132\l  %134 = add nuw nsw i32 %96, 4\l  %135 = add i32 %98, 4\l  %136 = icmp eq i32 %135, %63\l  br i1 %136, label %71, label %95, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5a7e730:s0 -> Node0x5a7e6e0;
	Node0x5a7e730:s1 -> Node0x5a7e730;
}
