digraph "CFG for '_Z10initCURANDjP12hiprandState' function" {
	label="CFG for '_Z10initCURANDjP12hiprandState' function";

	Node0x62e1a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%2:\l  %3 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %5 = zext i32 %4 to i64\l  %6 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %6) #4\l  %7 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 0\l  %8 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 1\l  %9 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 2\l  %10 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 3\l  %11 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 4\l  %12 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 0\l  %13 = xor i32 %0, 746559103\l  %14 = mul i32 %13, 1228688033\l  %15 = add i32 %14, 123456789\l  store i32 %15, i32 addrspace(5)* %7, align 8, !tbaa !4\l  %16 = xor i32 %14, 362436069\l  store i32 %16, i32 addrspace(5)* %8, align 4, !tbaa !4\l  store i32 -1452303100, i32 addrspace(5)* %9, align 8, !tbaa !4\l  store i32 -1894485380, i32 addrspace(5)* %10, align 4, !tbaa !4\l  %17 = add i32 %14, 5783321\l  store i32 %17, i32 addrspace(5)* %11, align 8, !tbaa !4\l  %18 = add i32 %14, -1966976488\l  store i32 %18, i32 addrspace(5)* %12, align 8, !tbaa !8\l  %19 = icmp eq i32 %4, 0\l  br i1 %19, label %197, label %20\l|{<s0>T|<s1>F}}"];
	Node0x62e1a30:s0 -> Node0x62e7bc0;
	Node0x62e1a30:s1 -> Node0x62e7c50;
	Node0x62e7c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%20:\l20:                                               \l  %21 = phi i64 [ %30, %28 ], [ %5, %2 ]\l  %22 = phi i32 [ %29, %28 ], [ 0, %2 ]\l  %23 = trunc i64 %21 to i32\l  %24 = and i32 %23, 3\l  %25 = icmp eq i32 %24, 0\l  br i1 %25, label %28, label %26\l|{<s0>T|<s1>F}}"];
	Node0x62e7c50:s0 -> Node0x62e7d90;
	Node0x62e7c50:s1 -> Node0x62e8180;
	Node0x62e8180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%26:\l26:                                               \l  %27 = zext i32 %22 to i64\l  br label %32\l}"];
	Node0x62e8180 -> Node0x62e8330;
	Node0x62e7d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%28:\l28:                                               \l  %29 = add nuw nsw i32 %22, 1\l  %30 = lshr i64 %21, 2\l  %31 = icmp ult i64 %21, 4\l  br i1 %31, label %197, label %20, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x62e7d90:s0 -> Node0x62e7bc0;
	Node0x62e7d90:s1 -> Node0x62e7c50;
	Node0x62e8330 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%32:\l32:                                               \l  %33 = phi i32 [ 0, %26 ], [ %195, %194 ]\l  br label %34\l}"];
	Node0x62e8330 -> Node0x62e8970;
	Node0x62e8970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi i32 [ 0, %32 ], [ %167, %34 ]\l  %36 = phi i32 [ 0, %32 ], [ %173, %34 ]\l  %37 = phi i32 [ 0, %32 ], [ %179, %34 ]\l  %38 = phi i32 [ 0, %32 ], [ %185, %34 ]\l  %39 = phi i32 [ 0, %32 ], [ %191, %34 ]\l  %40 = phi i32 [ 0, %32 ], [ %192, %34 ]\l  %41 = lshr i32 %40, 5\l  %42 = and i32 %40, 28\l  %43 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %41\l  %44 = load i32, i32 addrspace(5)* %43, align 4, !tbaa !4\l  %45 = shl nuw i32 1, %42\l  %46 = and i32 %45, %44\l  %47 = icmp eq i32 %46, 0\l  %48 = mul nuw nsw i32 %40, 5\l  %49 = zext i32 %48 to i64\l  %50 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %49\l  %51 = load i32, i32 addrspace(4)* %50, align 16, !tbaa !4\l  %52 = select i1 %47, i32 0, i32 %51\l  %53 = xor i32 %52, %35\l  %54 = or i32 %48, 1\l  %55 = zext i32 %54 to i64\l  %56 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %55\l  %57 = load i32, i32 addrspace(4)* %56, align 4, !tbaa !4\l  %58 = select i1 %47, i32 0, i32 %57\l  %59 = xor i32 %58, %36\l  %60 = or i32 %48, 2\l  %61 = zext i32 %60 to i64\l  %62 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %61\l  %63 = load i32, i32 addrspace(4)* %62, align 8, !tbaa !4\l  %64 = select i1 %47, i32 0, i32 %63\l  %65 = xor i32 %64, %37\l  %66 = or i32 %48, 3\l  %67 = zext i32 %66 to i64\l  %68 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %67\l  %69 = load i32, i32 addrspace(4)* %68, align 4, !tbaa !4\l  %70 = select i1 %47, i32 0, i32 %69\l  %71 = xor i32 %70, %38\l  %72 = add nuw nsw i32 %48, 4\l  %73 = zext i32 %72 to i64\l  %74 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %73\l  %75 = load i32, i32 addrspace(4)* %74, align 16, !tbaa !4\l  %76 = select i1 %47, i32 0, i32 %75\l  %77 = xor i32 %76, %39\l  %78 = or i32 %40, 1\l  %79 = lshr i32 %40, 5\l  %80 = and i32 %78, 29\l  %81 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %79\l  %82 = load i32, i32 addrspace(5)* %81, align 4, !tbaa !4\l  %83 = shl nuw i32 1, %80\l  %84 = and i32 %83, %82\l  %85 = icmp eq i32 %84, 0\l  %86 = mul nuw nsw i32 %78, 5\l  %87 = zext i32 %86 to i64\l  %88 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %87\l  %89 = load i32, i32 addrspace(4)* %88, align 4, !tbaa !4\l  %90 = select i1 %85, i32 0, i32 %89\l  %91 = xor i32 %90, %53\l  %92 = add nuw nsw i32 %86, 1\l  %93 = zext i32 %92 to i64\l  %94 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %93\l  %95 = load i32, i32 addrspace(4)* %94, align 8, !tbaa !4\l  %96 = select i1 %85, i32 0, i32 %95\l  %97 = xor i32 %96, %59\l  %98 = or i32 %86, 2\l  %99 = zext i32 %98 to i64\l  %100 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %99\l  %101 = load i32, i32 addrspace(4)* %100, align 4, !tbaa !4\l  %102 = select i1 %85, i32 0, i32 %101\l  %103 = xor i32 %102, %65\l  %104 = add nuw nsw i32 %86, 3\l  %105 = zext i32 %104 to i64\l  %106 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %105\l  %107 = load i32, i32 addrspace(4)* %106, align 16, !tbaa !4\l  %108 = select i1 %85, i32 0, i32 %107\l  %109 = xor i32 %108, %71\l  %110 = add nuw nsw i32 %86, 4\l  %111 = zext i32 %110 to i64\l  %112 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %111\l  %113 = load i32, i32 addrspace(4)* %112, align 4, !tbaa !4\l  %114 = select i1 %85, i32 0, i32 %113\l  %115 = xor i32 %114, %77\l  %116 = or i32 %40, 2\l  %117 = lshr i32 %40, 5\l  %118 = and i32 %116, 30\l  %119 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %117\l  %120 = load i32, i32 addrspace(5)* %119, align 4, !tbaa !4\l  %121 = shl nuw i32 1, %118\l  %122 = and i32 %121, %120\l  %123 = icmp eq i32 %122, 0\l  %124 = mul nuw nsw i32 %116, 5\l  %125 = zext i32 %124 to i64\l  %126 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %125\l  %127 = load i32, i32 addrspace(4)* %126, align 8, !tbaa !4\l  %128 = select i1 %123, i32 0, i32 %127\l  %129 = xor i32 %128, %91\l  %130 = or i32 %124, 1\l  %131 = zext i32 %130 to i64\l  %132 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %131\l  %133 = load i32, i32 addrspace(4)* %132, align 4, !tbaa !4\l  %134 = select i1 %123, i32 0, i32 %133\l  %135 = xor i32 %134, %97\l  %136 = add nuw nsw i32 %124, 2\l  %137 = zext i32 %136 to i64\l  %138 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %137\l  %139 = load i32, i32 addrspace(4)* %138, align 16, !tbaa !4\l  %140 = select i1 %123, i32 0, i32 %139\l  %141 = xor i32 %140, %103\l  %142 = add nuw nsw i32 %124, 3\l  %143 = zext i32 %142 to i64\l  %144 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %143\l  %145 = load i32, i32 addrspace(4)* %144, align 4, !tbaa !4\l  %146 = select i1 %123, i32 0, i32 %145\l  %147 = xor i32 %146, %109\l  %148 = add nuw nsw i32 %124, 4\l  %149 = zext i32 %148 to i64\l  %150 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %149\l  %151 = load i32, i32 addrspace(4)* %150, align 8, !tbaa !4\l  %152 = select i1 %123, i32 0, i32 %151\l  %153 = xor i32 %152, %115\l  %154 = or i32 %40, 3\l  %155 = lshr i32 %40, 5\l  %156 = and i32 %154, 31\l  %157 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 5,\l... i32 %155\l  %158 = load i32, i32 addrspace(5)* %157, align 4, !tbaa !4\l  %159 = shl nuw i32 1, %156\l  %160 = and i32 %159, %158\l  %161 = icmp eq i32 %160, 0\l  %162 = mul nuw nsw i32 %154, 5\l  %163 = zext i32 %162 to i64\l  %164 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %163\l  %165 = load i32, i32 addrspace(4)* %164, align 4, !tbaa !4\l  %166 = select i1 %161, i32 0, i32 %165\l  %167 = xor i32 %166, %129\l  %168 = add nuw nsw i32 %162, 1\l  %169 = zext i32 %168 to i64\l  %170 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %169\l  %171 = load i32, i32 addrspace(4)* %170, align 16, !tbaa !4\l  %172 = select i1 %161, i32 0, i32 %171\l  %173 = xor i32 %172, %135\l  %174 = add nuw nsw i32 %162, 2\l  %175 = zext i32 %174 to i64\l  %176 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %175\l  %177 = load i32, i32 addrspace(4)* %176, align 4, !tbaa !4\l  %178 = select i1 %161, i32 0, i32 %177\l  %179 = xor i32 %178, %141\l  %180 = add nuw nsw i32 %162, 3\l  %181 = zext i32 %180 to i64\l  %182 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %181\l  %183 = load i32, i32 addrspace(4)* %182, align 8, !tbaa !4\l  %184 = select i1 %161, i32 0, i32 %183\l  %185 = xor i32 %184, %147\l  %186 = add nuw nsw i32 %162, 4\l  %187 = zext i32 %186 to i64\l  %188 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %27, i64 %187\l  %189 = load i32, i32 addrspace(4)* %188, align 4, !tbaa !4\l  %190 = select i1 %161, i32 0, i32 %189\l  %191 = xor i32 %190, %153\l  %192 = add nuw nsw i32 %40, 4\l  %193 = icmp eq i32 %192, 160\l  br i1 %193, label %194, label %34, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x62e8970:s0 -> Node0x62e2b40;
	Node0x62e8970:s1 -> Node0x62e8970;
	Node0x62e2b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%194:\l194:                                              \l  store i32 %167, i32 addrspace(5)* %7, align 8, !tbaa !4\l  store i32 %173, i32 addrspace(5)* %8, align 4, !tbaa !4\l  store i32 %179, i32 addrspace(5)* %9, align 8, !tbaa !4\l  store i32 %185, i32 addrspace(5)* %10, align 4, !tbaa !4\l  store i32 %191, i32 addrspace(5)* %11, align 8, !tbaa !4\l  %195 = add nuw nsw i32 %33, 1\l  %196 = icmp eq i32 %195, %24\l  br i1 %196, label %28, label %32, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x62e2b40:s0 -> Node0x62e7d90;
	Node0x62e2b40:s1 -> Node0x62e8330;
	Node0x62e7bc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%197:\l197:                                              \l  %198 = getelementptr inbounds %struct.hiprandState, %struct.hiprandState\l... addrspace(1)* %1, i64 %5\l  %199 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 1\l  store i32 0, i32 addrspace(5)* %199, align 4, !tbaa !17\l  %200 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %3, i32 0, i32 0, i32 2\l  store i32 0, i32 addrspace(5)* %200, align 8, !tbaa !18\l  %201 = bitcast %struct.hiprandState addrspace(1)* %198 to i8 addrspace(1)*\l  call void @llvm.memcpy.p1i8.p5i8.i64(i8 addrspace(1)* noundef align 8\l... dereferenceable(48) %201, i8 addrspace(5)* noundef align 8\l... dereferenceable(48) %6, i64 48, i1 false), !tbaa.struct !19\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %6) #4\l  ret void\l}"];
}
