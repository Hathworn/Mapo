digraph "CFG for '_Z15gHighwayForwardPfPKfS1_S1_m' function" {
	label="CFG for '_Z15gHighwayForwardPfPKfS1_S1_m' function";

	Node0x64d5270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%5:\l  %6 = icmp eq i64 %4, 0\l  br i1 %6, label %25, label %7\l|{<s0>T|<s1>F}}"];
	Node0x64d5270:s0 -> Node0x64d5210;
	Node0x64d5270:s1 -> Node0x64d59a0;
	Node0x64d59a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%7:\l7:                                                \l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !4, !invariant.load !5\l  %12 = zext i16 %11 to i32\l  %13 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %14 = bitcast i8 addrspace(4)* %13 to i32 addrspace(4)*\l  %15 = load i32, i32 addrspace(4)* %14, align 4, !tbaa !6\l  %16 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %17 = mul i32 %16, %12\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %19 = udiv i32 %15, %12\l  %20 = mul i32 %19, %12\l  %21 = icmp ugt i32 %15, %20\l  %22 = zext i1 %21 to i32\l  %23 = add i32 %19, %22\l  %24 = mul i32 %23, %12\l  br label %26\l}"];
	Node0x64d59a0 -> Node0x64d7900;
	Node0x64d5210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%25:\l25:                                               \l  ret void\l}"];
	Node0x64d7900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32 [ 0, %7 ], [ %85, %84 ]\l  %28 = add i32 %27, %18\l  %29 = add i32 %28, %17\l  %30 = sext i32 %29 to i64\l  %31 = icmp ult i64 %30, %4\l  br i1 %31, label %32, label %84\l|{<s0>T|<s1>F}}"];
	Node0x64d7900:s0 -> Node0x64d7da0;
	Node0x64d7900:s1 -> Node0x64d7a80;
	Node0x64d7da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%32:\l32:                                               \l  %33 = getelementptr inbounds float, float addrspace(1)* %3, i64 %30\l  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !16\l  %35 = fcmp contract ult float %34, 0.000000e+00\l  br i1 %35, label %53, label %36\l|{<s0>T|<s1>F}}"];
	Node0x64d7da0:s0 -> Node0x64d8d00;
	Node0x64d7da0:s1 -> Node0x64d8d90;
	Node0x64d8d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%36:\l36:                                               \l  %37 = fneg contract float %34\l  %38 = fmul float %34, 0xBFF7154760000000\l  %39 = tail call float @llvm.rint.f32(float %38)\l  %40 = fcmp olt float %34, 0xC0562E4300000000\l  %41 = fcmp ogt float %34, 0x4059D1DA00000000\l  %42 = fneg float %38\l  %43 = tail call float @llvm.fma.f32(float %37, float 0x3FF7154760000000,\l... float %42)\l  %44 = tail call float @llvm.fma.f32(float %37, float 0x3E54AE0BE0000000,\l... float %43)\l  %45 = fsub float %38, %39\l  %46 = fadd float %44, %45\l  %47 = tail call float @llvm.exp2.f32(float %46)\l  %48 = fptosi float %39 to i32\l  %49 = tail call float @llvm.amdgcn.ldexp.f32(float %47, i32 %48)\l  %50 = select i1 %41, float 0.000000e+00, float %49\l  %51 = select i1 %40, float 0x7FF0000000000000, float %50\l  %52 = fpext float %51 to double\l  br label %69\l}"];
	Node0x64d8d90 -> Node0x64d9ff0;
	Node0x64d8d00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%53:\l53:                                               \l  %54 = fmul float %34, 0x3FF7154760000000\l  %55 = tail call float @llvm.rint.f32(float %54)\l  %56 = fcmp ogt float %34, 0x40562E4300000000\l  %57 = fcmp olt float %34, 0xC059D1DA00000000\l  %58 = fneg float %54\l  %59 = tail call float @llvm.fma.f32(float %34, float 0x3FF7154760000000,\l... float %58)\l  %60 = tail call float @llvm.fma.f32(float %34, float 0x3E54AE0BE0000000,\l... float %59)\l  %61 = fsub float %54, %55\l  %62 = fadd float %60, %61\l  %63 = tail call float @llvm.exp2.f32(float %62)\l  %64 = fptosi float %55 to i32\l  %65 = tail call float @llvm.amdgcn.ldexp.f32(float %63, i32 %64)\l  %66 = select i1 %57, float 0.000000e+00, float %65\l  %67 = select i1 %56, float 0x7FF0000000000000, float %66\l  %68 = fpext float %67 to double\l  br label %69\l}"];
	Node0x64d8d00 -> Node0x64d9ff0;
	Node0x64d9ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%69:\l69:                                               \l  %70 = phi double [ %68, %53 ], [ %52, %36 ]\l  %71 = phi double [ %68, %53 ], [ 1.000000e+00, %36 ]\l  %72 = fadd contract double %70, 1.000000e+00\l  %73 = fdiv contract double %71, %72\l  %74 = fptrunc double %73 to float\l  %75 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30\l  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !16\l  %77 = fmul contract float %76, %74\l  %78 = getelementptr inbounds float, float addrspace(1)* %2, i64 %30\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !16\l  %80 = fsub contract float 1.000000e+00, %74\l  %81 = fmul contract float %79, %80\l  %82 = fadd contract float %77, %81\l  %83 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  store float %82, float addrspace(1)* %83, align 4, !tbaa !16\l  br label %84\l}"];
	Node0x64d9ff0 -> Node0x64d7a80;
	Node0x64d7a80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%84:\l84:                                               \l  %85 = add i32 %24, %27\l  %86 = sext i32 %85 to i64\l  %87 = icmp ult i64 %86, %4\l  br i1 %87, label %26, label %25, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x64d7a80:s0 -> Node0x64d7900;
	Node0x64d7a80:s1 -> Node0x64d5210;
}
