digraph "CFG for '_Z12Overlay_CudaiiPhiS_iiiS_iii' function" {
	label="CFG for '_Z12Overlay_CudaiiPhiS_iiiS_iii' function";

	Node0x64e4f70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %17 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %18 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %19 = add nsw i32 %6, %0\l  %20 = add nsw i32 %7, %1\l  %21 = bitcast i8 addrspace(4)* %15 to \<2 x i16\> addrspace(4)*\l  %22 = load \<2 x i16\>, \<2 x i16\> addrspace(4)* %21, align 4, !invariant.load\l... !5\l  %23 = zext \<2 x i16\> %22 to \<2 x i32\>\l  %24 = insertelement \<2 x i32\> poison, i32 %13, i64 0\l  %25 = insertelement \<2 x i32\> %24, i32 %17, i64 1\l  %26 = mul \<2 x i32\> %25, %23\l  %27 = insertelement \<2 x i32\> poison, i32 %16, i64 0\l  %28 = insertelement \<2 x i32\> %27, i32 %18, i64 1\l  %29 = add \<2 x i32\> %26, %28\l  %30 = shufflevector \<2 x i32\> %29, \<2 x i32\> poison, \<4 x i32\> \<i32 0, i32\l... 1, i32 1, i32 0\>\l  %31 = insertelement \<4 x i32\> poison, i32 %0, i64 0\l  %32 = insertelement \<4 x i32\> %31, i32 %1, i64 1\l  %33 = insertelement \<4 x i32\> %32, i32 %20, i64 2\l  %34 = insertelement \<4 x i32\> %33, i32 %19, i64 3\l  %35 = icmp slt \<4 x i32\> %30, %34\l  %36 = icmp sge \<4 x i32\> %30, %34\l  %37 = shufflevector \<4 x i1\> %35, \<4 x i1\> %36, \<4 x i32\> \<i32 0, i32 1, i32\l... 6, i32 7\>\l  %38 = freeze \<4 x i1\> %37\l  %39 = bitcast \<4 x i1\> %38 to i4\l  %40 = icmp eq i4 %39, 0\l  br i1 %40, label %41, label %76\l|{<s0>T|<s1>F}}"];
	Node0x64e4f70:s0 -> Node0x64ea000;
	Node0x64e4f70:s1 -> Node0x64ea090;
	Node0x64ea000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%41:\l41:                                               \l  %42 = extractelement \<2 x i32\> %29, i64 0\l  %43 = sub nsw i32 %42, %0\l  %44 = extractelement \<2 x i32\> %29, i64 1\l  %45 = sub nsw i32 %44, %1\l  %46 = icmp eq i32 %9, 0\l  br i1 %46, label %57, label %47\l|{<s0>T|<s1>F}}"];
	Node0x64ea000:s0 -> Node0x64ea4a0;
	Node0x64ea000:s1 -> Node0x64ea4f0;
	Node0x64ea4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%47:\l47:                                               \l  %48 = mul nsw i32 %43, %10\l  %49 = mul i32 %11, %9\l  %50 = mul i32 %49, %45\l  %51 = add nsw i32 %50, %48\l  %52 = sext i32 %51 to i64\l  %53 = getelementptr inbounds i8, i8 addrspace(1)* %8, i64 %52\l  %54 = load i8, i8 addrspace(1)* %53, align 1, !tbaa !6, !amdgpu.noclobber !5\l  %55 = uitofp i8 %54 to float\l  %56 = fdiv contract float %55, 2.550000e+02\l  br label %57\l}"];
	Node0x64ea4f0 -> Node0x64ea4a0;
	Node0x64ea4a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%57:\l57:                                               \l  %58 = phi float [ %56, %47 ], [ 1.000000e+00, %41 ]\l  %59 = mul nsw i32 %45, %5\l  %60 = add nsw i32 %59, %43\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds i8, i8 addrspace(1)* %4, i64 %61\l  %63 = load i8, i8 addrspace(1)* %62, align 1, !tbaa !6, !amdgpu.noclobber !5\l  %64 = uitofp i8 %63 to float\l  %65 = fmul contract float %58, %64\l  %66 = fsub contract float 1.000000e+00, %58\l  %67 = mul nsw i32 %44, %3\l  %68 = add nsw i32 %67, %42\l  %69 = sext i32 %68 to i64\l  %70 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %69\l  %71 = load i8, i8 addrspace(1)* %70, align 1, !tbaa !6, !amdgpu.noclobber !5\l  %72 = uitofp i8 %71 to float\l  %73 = fmul contract float %66, %72\l  %74 = fadd contract float %65, %73\l  %75 = fptoui float %74 to i8\l  store i8 %75, i8 addrspace(1)* %70, align 1, !tbaa !6\l  br label %76\l}"];
	Node0x64ea4a0 -> Node0x64ea090;
	Node0x64ea090 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  ret void\l}"];
}
