digraph "CFG for '_Z17SetBufferToRandomPfffi' function" {
	label="CFG for '_Z17SetBufferToRandomPfffi' function";

	Node0x50fea70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%4:\l  %5 = alloca %\"class.rocrand_device::xorwow_engine\", align 8, addrspace(5)\l  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !5, !invariant.load !6\l  %11 = zext i16 %10 to i32\l  %12 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 12\l  %13 = bitcast i8 addrspace(4)* %12 to i32 addrspace(4)*\l  %14 = load i32, i32 addrspace(4)* %13, align 4, !tbaa !7\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %16 = udiv i32 %14, %11\l  %17 = mul i32 %16, %11\l  %18 = icmp ugt i32 %14, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %22 = getelementptr inbounds i8, i8 addrspace(4)* %7, i64 16\l  %23 = bitcast i8 addrspace(4)* %22 to i32 addrspace(4)*\l  %24 = load i32, i32 addrspace(4)* %23, align 8, !tbaa !16\l  %25 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %26 = bitcast i8 addrspace(4)* %25 to i16 addrspace(4)*\l  %27 = load i16, i16 addrspace(4)* %26, align 2, !range !5, !invariant.load !6\l  %28 = zext i16 %27 to i32\l  %29 = udiv i32 %24, %28\l  %30 = mul i32 %29, %28\l  %31 = icmp ugt i32 %24, %30\l  %32 = zext i1 %31 to i32\l  %33 = add i32 %29, %32\l  %34 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %35 = mul i32 %33, %34\l  %36 = add i32 %35, %21\l  %37 = mul i32 %36, %20\l  %38 = add i32 %37, %15\l  %39 = mul i32 %38, %11\l  %40 = add i32 %39, %6\l  %41 = add nsw i32 %40, 7\l  %42 = sext i32 %40 to i64\l  %43 = bitcast %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5 to i8\l... addrspace(5)*\l  call void @llvm.lifetime.start.p5i8(i64 48, i8 addrspace(5)* %43) #4\l  %44 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 0\l  %45 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 1\l  %46 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 2\l  %47 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 3\l  %48 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 4\l  %49 = xor i32 %41, 746559103\l  %50 = icmp sgt i32 %40, -8\l  %51 = mul i32 %49, 1228688033\l  %52 = select i1 %50, i32 -1973591729, i32 -100066652\l  %53 = add i32 %51, 123456789\l  store i32 %53, i32 addrspace(5)* %44, align 8, !tbaa !17\l  %54 = xor i32 %51, 362436069\l  store i32 %54, i32 addrspace(5)* %45, align 4, !tbaa !17\l  %55 = add nsw i32 %52, 521288629\l  store i32 %55, i32 addrspace(5)* %46, align 8, !tbaa !17\l  %56 = xor i32 %52, 88675123\l  store i32 %56, i32 addrspace(5)* %47, align 4, !tbaa !17\l  %57 = add i32 %51, 5783321\l  store i32 %57, i32 addrspace(5)* %48, align 8, !tbaa !17\l  %58 = add nuw nsw i32 %52, 6615241\l  %59 = add i32 %58, %51\l  %60 = icmp eq i32 %40, 0\l  br i1 %60, label %242, label %61\l|{<s0>T|<s1>F}}"];
	Node0x50fea70:s0 -> Node0x5107a60;
	Node0x50fea70:s1 -> Node0x5107af0;
	Node0x5107af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%61:\l61:                                               \l  %62 = phi i32 [ %72, %71 ], [ %57, %4 ]\l  %63 = phi i32 [ %73, %71 ], [ %53, %4 ]\l  %64 = phi i64 [ %75, %71 ], [ %42, %4 ]\l  %65 = phi i32 [ %74, %71 ], [ 0, %4 ]\l  %66 = trunc i64 %64 to i32\l  %67 = and i32 %66, 3\l  %68 = icmp eq i32 %67, 0\l  br i1 %68, label %71, label %69\l|{<s0>T|<s1>F}}"];
	Node0x5107af0:s0 -> Node0x5107c60;
	Node0x5107af0:s1 -> Node0x5105930;
	Node0x5105930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%69:\l69:                                               \l  %70 = zext i32 %65 to i64\l  br label %77\l}"];
	Node0x5105930 -> Node0x5108670;
	Node0x5107c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%71:\l71:                                               \l  %72 = phi i32 [ %62, %61 ], [ %236, %239 ]\l  %73 = phi i32 [ %63, %61 ], [ %212, %239 ]\l  %74 = add nuw nsw i32 %65, 1\l  %75 = lshr i64 %64, 2\l  %76 = icmp ult i64 %64, 4\l  br i1 %76, label %242, label %61, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x5107c60:s0 -> Node0x5107a60;
	Node0x5107c60:s1 -> Node0x5107af0;
	Node0x5108670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%77:\l77:                                               \l  %78 = phi i32 [ 0, %69 ], [ %240, %239 ]\l  br label %79\l}"];
	Node0x5108670 -> Node0x5108cb0;
	Node0x5108cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%79:\l79:                                               \l  %80 = phi i32 [ 0, %77 ], [ %212, %79 ]\l  %81 = phi i32 [ 0, %77 ], [ %218, %79 ]\l  %82 = phi i32 [ 0, %77 ], [ %224, %79 ]\l  %83 = phi i32 [ 0, %77 ], [ %230, %79 ]\l  %84 = phi i32 [ 0, %77 ], [ %236, %79 ]\l  %85 = phi i32 [ 0, %77 ], [ %237, %79 ]\l  %86 = lshr i32 %85, 5\l  %87 = and i32 %85, 28\l  %88 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %86\l  %89 = load i32, i32 addrspace(5)* %88, align 4, !tbaa !17\l  %90 = shl nuw i32 1, %87\l  %91 = and i32 %90, %89\l  %92 = icmp eq i32 %91, 0\l  %93 = mul nuw nsw i32 %85, 5\l  %94 = zext i32 %93 to i64\l  %95 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %94\l  %96 = load i32, i32 addrspace(4)* %95, align 16, !tbaa !17\l  %97 = select i1 %92, i32 0, i32 %96\l  %98 = xor i32 %97, %80\l  %99 = or i32 %93, 1\l  %100 = zext i32 %99 to i64\l  %101 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %100\l  %102 = load i32, i32 addrspace(4)* %101, align 4, !tbaa !17\l  %103 = select i1 %92, i32 0, i32 %102\l  %104 = xor i32 %103, %81\l  %105 = or i32 %93, 2\l  %106 = zext i32 %105 to i64\l  %107 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %106\l  %108 = load i32, i32 addrspace(4)* %107, align 8, !tbaa !17\l  %109 = select i1 %92, i32 0, i32 %108\l  %110 = xor i32 %109, %82\l  %111 = or i32 %93, 3\l  %112 = zext i32 %111 to i64\l  %113 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %112\l  %114 = load i32, i32 addrspace(4)* %113, align 4, !tbaa !17\l  %115 = select i1 %92, i32 0, i32 %114\l  %116 = xor i32 %115, %83\l  %117 = add nuw nsw i32 %93, 4\l  %118 = zext i32 %117 to i64\l  %119 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %118\l  %120 = load i32, i32 addrspace(4)* %119, align 16, !tbaa !17\l  %121 = select i1 %92, i32 0, i32 %120\l  %122 = xor i32 %121, %84\l  %123 = or i32 %85, 1\l  %124 = lshr i32 %85, 5\l  %125 = and i32 %123, 29\l  %126 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %124\l  %127 = load i32, i32 addrspace(5)* %126, align 4, !tbaa !17\l  %128 = shl nuw i32 1, %125\l  %129 = and i32 %128, %127\l  %130 = icmp eq i32 %129, 0\l  %131 = mul nuw nsw i32 %123, 5\l  %132 = zext i32 %131 to i64\l  %133 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %132\l  %134 = load i32, i32 addrspace(4)* %133, align 4, !tbaa !17\l  %135 = select i1 %130, i32 0, i32 %134\l  %136 = xor i32 %135, %98\l  %137 = add nuw nsw i32 %131, 1\l  %138 = zext i32 %137 to i64\l  %139 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %138\l  %140 = load i32, i32 addrspace(4)* %139, align 8, !tbaa !17\l  %141 = select i1 %130, i32 0, i32 %140\l  %142 = xor i32 %141, %104\l  %143 = or i32 %131, 2\l  %144 = zext i32 %143 to i64\l  %145 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %144\l  %146 = load i32, i32 addrspace(4)* %145, align 4, !tbaa !17\l  %147 = select i1 %130, i32 0, i32 %146\l  %148 = xor i32 %147, %110\l  %149 = add nuw nsw i32 %131, 3\l  %150 = zext i32 %149 to i64\l  %151 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %150\l  %152 = load i32, i32 addrspace(4)* %151, align 16, !tbaa !17\l  %153 = select i1 %130, i32 0, i32 %152\l  %154 = xor i32 %153, %116\l  %155 = add nuw nsw i32 %131, 4\l  %156 = zext i32 %155 to i64\l  %157 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %156\l  %158 = load i32, i32 addrspace(4)* %157, align 4, !tbaa !17\l  %159 = select i1 %130, i32 0, i32 %158\l  %160 = xor i32 %159, %122\l  %161 = or i32 %85, 2\l  %162 = lshr i32 %85, 5\l  %163 = and i32 %161, 30\l  %164 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %162\l  %165 = load i32, i32 addrspace(5)* %164, align 4, !tbaa !17\l  %166 = shl nuw i32 1, %163\l  %167 = and i32 %166, %165\l  %168 = icmp eq i32 %167, 0\l  %169 = mul nuw nsw i32 %161, 5\l  %170 = zext i32 %169 to i64\l  %171 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %170\l  %172 = load i32, i32 addrspace(4)* %171, align 8, !tbaa !17\l  %173 = select i1 %168, i32 0, i32 %172\l  %174 = xor i32 %173, %136\l  %175 = or i32 %169, 1\l  %176 = zext i32 %175 to i64\l  %177 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %176\l  %178 = load i32, i32 addrspace(4)* %177, align 4, !tbaa !17\l  %179 = select i1 %168, i32 0, i32 %178\l  %180 = xor i32 %179, %142\l  %181 = add nuw nsw i32 %169, 2\l  %182 = zext i32 %181 to i64\l  %183 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %182\l  %184 = load i32, i32 addrspace(4)* %183, align 16, !tbaa !17\l  %185 = select i1 %168, i32 0, i32 %184\l  %186 = xor i32 %185, %148\l  %187 = add nuw nsw i32 %169, 3\l  %188 = zext i32 %187 to i64\l  %189 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %188\l  %190 = load i32, i32 addrspace(4)* %189, align 4, !tbaa !17\l  %191 = select i1 %168, i32 0, i32 %190\l  %192 = xor i32 %191, %154\l  %193 = add nuw nsw i32 %169, 4\l  %194 = zext i32 %193 to i64\l  %195 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %194\l  %196 = load i32, i32 addrspace(4)* %195, align 8, !tbaa !17\l  %197 = select i1 %168, i32 0, i32 %196\l  %198 = xor i32 %197, %160\l  %199 = or i32 %85, 3\l  %200 = lshr i32 %85, 5\l  %201 = and i32 %199, 31\l  %202 = getelementptr inbounds %\"class.rocrand_device::xorwow_engine\",\l... %\"class.rocrand_device::xorwow_engine\" addrspace(5)* %5, i32 0, i32 0, i32 5,\l... i32 %200\l  %203 = load i32, i32 addrspace(5)* %202, align 4, !tbaa !17\l  %204 = shl nuw i32 1, %201\l  %205 = and i32 %204, %203\l  %206 = icmp eq i32 %205, 0\l  %207 = mul nuw nsw i32 %199, 5\l  %208 = zext i32 %207 to i64\l  %209 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %208\l  %210 = load i32, i32 addrspace(4)* %209, align 4, !tbaa !17\l  %211 = select i1 %206, i32 0, i32 %210\l  %212 = xor i32 %211, %174\l  %213 = add nuw nsw i32 %207, 1\l  %214 = zext i32 %213 to i64\l  %215 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %214\l  %216 = load i32, i32 addrspace(4)* %215, align 16, !tbaa !17\l  %217 = select i1 %206, i32 0, i32 %216\l  %218 = xor i32 %217, %180\l  %219 = add nuw nsw i32 %207, 2\l  %220 = zext i32 %219 to i64\l  %221 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %220\l  %222 = load i32, i32 addrspace(4)* %221, align 4, !tbaa !17\l  %223 = select i1 %206, i32 0, i32 %222\l  %224 = xor i32 %223, %186\l  %225 = add nuw nsw i32 %207, 3\l  %226 = zext i32 %225 to i64\l  %227 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %226\l  %228 = load i32, i32 addrspace(4)* %227, align 8, !tbaa !17\l  %229 = select i1 %206, i32 0, i32 %228\l  %230 = xor i32 %229, %192\l  %231 = add nuw nsw i32 %207, 4\l  %232 = zext i32 %231 to i64\l  %233 = getelementptr inbounds [32 x [800 x i32]], [32 x [800 x i32]]\l... addrspace(4)* @_ZL31d_xorwow_sequence_jump_matrices, i64 0, i64 %70, i64 %232\l  %234 = load i32, i32 addrspace(4)* %233, align 4, !tbaa !17\l  %235 = select i1 %206, i32 0, i32 %234\l  %236 = xor i32 %235, %198\l  %237 = add nuw nsw i32 %85, 4\l  %238 = icmp eq i32 %237, 160\l  br i1 %238, label %239, label %79, !llvm.loop !23\l|{<s0>T|<s1>F}}"];
	Node0x5108cb0:s0 -> Node0x5108730;
	Node0x5108cb0:s1 -> Node0x5108cb0;
	Node0x5108730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%239:\l239:                                              \l  store i32 %212, i32 addrspace(5)* %44, align 8, !tbaa !17\l  store i32 %218, i32 addrspace(5)* %45, align 4, !tbaa !17\l  store i32 %224, i32 addrspace(5)* %46, align 8, !tbaa !17\l  store i32 %230, i32 addrspace(5)* %47, align 4, !tbaa !17\l  store i32 %236, i32 addrspace(5)* %48, align 8, !tbaa !17\l  %240 = add nuw nsw i32 %78, 1\l  %241 = icmp eq i32 %240, %67\l  br i1 %241, label %71, label %77, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x5108730:s0 -> Node0x5107c60;
	Node0x5108730:s1 -> Node0x5108670;
	Node0x5107a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%242:\l242:                                              \l  %243 = phi i32 [ %57, %4 ], [ %72, %71 ]\l  %244 = phi i32 [ %53, %4 ], [ %73, %71 ]\l  call void @llvm.lifetime.end.p5i8(i64 48, i8 addrspace(5)* %43) #4\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  %245 = lshr i32 %244, 2\l  %246 = xor i32 %245, %244\l  %247 = icmp slt i32 %40, %3\l  br i1 %247, label %248, label %263\l|{<s0>T|<s1>F}}"];
	Node0x5107a60:s0 -> Node0x510ffd0;
	Node0x5107a60:s1 -> Node0x5110020;
	Node0x510ffd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%248:\l248:                                              \l  %249 = add i32 %59, 362437\l  %250 = shl i32 %246, 1\l  %251 = shl i32 %243, 4\l  %252 = xor i32 %251, %250\l  %253 = xor i32 %252, %243\l  %254 = xor i32 %253, %246\l  %255 = add i32 %249, %254\l  %256 = uitofp i32 %255 to float\l  %257 = fmul contract float %256, 0x3DF0000000000000\l  %258 = fadd contract float %257, 0x3DF0000000000000\l  %259 = fsub contract float %2, %1\l  %260 = fmul contract float %259, %258\l  %261 = fadd contract float %260, %1\l  %262 = getelementptr inbounds float, float addrspace(1)* %0, i64 %42\l  store float %261, float addrspace(1)* %262, align 4, !tbaa !25\l  br label %263\l}"];
	Node0x510ffd0 -> Node0x5110020;
	Node0x5110020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%263:\l263:                                              \l  ret void\l}"];
}
