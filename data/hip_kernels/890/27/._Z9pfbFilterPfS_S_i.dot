digraph "CFG for '_Z9pfbFilterPfS_S_i' function" {
	label="CFG for '_Z9pfbFilterPfS_S_i' function";

	Node0x5b6ac50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %14 = bitcast i8 addrspace(4)* %13 to i16 addrspace(4)*\l  %15 = load i16, i16 addrspace(4)* %14, align 2, !range !4, !invariant.load !5\l  %16 = zext i16 %15 to i32\l  %17 = mul i32 %6, %16\l  %18 = add i32 %17, %12\l  %19 = mul i32 %18, %10\l  %20 = add i32 %19, %11\l  %21 = sext i32 %20 to i64\l  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %21\l  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %24 = zext i32 %11 to i64\l  %25 = getelementptr inbounds float, float addrspace(1)* %2, i64 %24\l  %26 = load float, float addrspace(1)* %25, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %27 = fmul contract float %23, %26\l  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %21\l  store float %27, float addrspace(1)* %28, align 4, !tbaa !7\l  %29 = icmp sgt i32 %3, 1\l  br i1 %29, label %30, label %59\l|{<s0>T|<s1>F}}"];
	Node0x5b6ac50:s0 -> Node0x5b6f070;
	Node0x5b6ac50:s1 -> Node0x5b6f100;
	Node0x5b6f070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = add i32 %3, -1\l  %32 = add i32 %3, -2\l  %33 = and i32 %31, 7\l  %34 = icmp ult i32 %32, 7\l  br i1 %34, label %37, label %35\l|{<s0>T|<s1>F}}"];
	Node0x5b6f070:s0 -> Node0x5b6e110;
	Node0x5b6f070:s1 -> Node0x5b6f660;
	Node0x5b6f660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%35:\l35:                                               \l  %36 = and i32 %31, -8\l  br label %60\l}"];
	Node0x5b6f660 -> Node0x5b6f860;
	Node0x5b6e110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%37:\l37:                                               \l  %38 = phi float [ %27, %30 ], [ %158, %60 ]\l  %39 = phi i32 [ 1, %30 ], [ %159, %60 ]\l  %40 = icmp eq i32 %33, 0\l  br i1 %40, label %59, label %41\l|{<s0>T|<s1>F}}"];
	Node0x5b6e110:s0 -> Node0x5b6f100;
	Node0x5b6e110:s1 -> Node0x5b6fbe0;
	Node0x5b6fbe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%41:\l41:                                               \l  %42 = phi float [ %55, %41 ], [ %38, %37 ]\l  %43 = phi i32 [ %56, %41 ], [ %39, %37 ]\l  %44 = phi i32 [ %57, %41 ], [ 0, %37 ]\l  %45 = mul nuw nsw i32 %43, %10\l  %46 = add nsw i32 %45, %20\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %1, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7\l  %50 = add nuw i32 %45, %11\l  %51 = zext i32 %50 to i64\l  %52 = getelementptr inbounds float, float addrspace(1)* %2, i64 %51\l  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !7\l  %54 = fmul contract float %49, %53\l  %55 = fadd contract float %42, %54\l  store float %55, float addrspace(1)* %28, align 4, !tbaa !7\l  %56 = add nuw nsw i32 %43, 1\l  %57 = add i32 %44, 1\l  %58 = icmp eq i32 %57, %33\l  br i1 %58, label %59, label %41, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5b6fbe0:s0 -> Node0x5b6f100;
	Node0x5b6fbe0:s1 -> Node0x5b6fbe0;
	Node0x5b6f100 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%59:\l59:                                               \l  ret void\l}"];
	Node0x5b6f860 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%60:\l60:                                               \l  %61 = phi float [ %27, %35 ], [ %158, %60 ]\l  %62 = phi i32 [ 1, %35 ], [ %159, %60 ]\l  %63 = phi i32 [ 0, %35 ], [ %160, %60 ]\l  %64 = mul nuw nsw i32 %62, %10\l  %65 = add nsw i32 %64, %20\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds float, float addrspace(1)* %1, i64 %66\l  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7\l  %69 = add nuw i32 %64, %11\l  %70 = zext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !7\l  %73 = fmul contract float %68, %72\l  %74 = fadd contract float %61, %73\l  store float %74, float addrspace(1)* %28, align 4, !tbaa !7\l  %75 = add nuw nsw i32 %62, 1\l  %76 = mul nuw nsw i32 %75, %10\l  %77 = add nsw i32 %76, %20\l  %78 = sext i32 %77 to i64\l  %79 = getelementptr inbounds float, float addrspace(1)* %1, i64 %78\l  %80 = load float, float addrspace(1)* %79, align 4, !tbaa !7\l  %81 = add nuw i32 %76, %11\l  %82 = zext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %2, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !7\l  %85 = fmul contract float %80, %84\l  %86 = fadd contract float %74, %85\l  store float %86, float addrspace(1)* %28, align 4, !tbaa !7\l  %87 = add nuw nsw i32 %62, 2\l  %88 = mul nuw nsw i32 %87, %10\l  %89 = add nsw i32 %88, %20\l  %90 = sext i32 %89 to i64\l  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90\l  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !7\l  %93 = add nuw i32 %88, %11\l  %94 = zext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %2, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !7\l  %97 = fmul contract float %92, %96\l  %98 = fadd contract float %86, %97\l  store float %98, float addrspace(1)* %28, align 4, !tbaa !7\l  %99 = add nuw nsw i32 %62, 3\l  %100 = mul nuw nsw i32 %99, %10\l  %101 = add nsw i32 %100, %20\l  %102 = sext i32 %101 to i64\l  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102\l  %104 = load float, float addrspace(1)* %103, align 4, !tbaa !7\l  %105 = add nuw i32 %100, %11\l  %106 = zext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %2, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !7\l  %109 = fmul contract float %104, %108\l  %110 = fadd contract float %98, %109\l  store float %110, float addrspace(1)* %28, align 4, !tbaa !7\l  %111 = add nuw nsw i32 %62, 4\l  %112 = mul nuw nsw i32 %111, %10\l  %113 = add nsw i32 %112, %20\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds float, float addrspace(1)* %1, i64 %114\l  %116 = load float, float addrspace(1)* %115, align 4, !tbaa !7\l  %117 = add nuw i32 %112, %11\l  %118 = zext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %2, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !7\l  %121 = fmul contract float %116, %120\l  %122 = fadd contract float %110, %121\l  store float %122, float addrspace(1)* %28, align 4, !tbaa !7\l  %123 = add nuw nsw i32 %62, 5\l  %124 = mul nuw nsw i32 %123, %10\l  %125 = add nsw i32 %124, %20\l  %126 = sext i32 %125 to i64\l  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126\l  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !7\l  %129 = add nuw i32 %124, %11\l  %130 = zext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %2, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !7\l  %133 = fmul contract float %128, %132\l  %134 = fadd contract float %122, %133\l  store float %134, float addrspace(1)* %28, align 4, !tbaa !7\l  %135 = add nuw nsw i32 %62, 6\l  %136 = mul nuw nsw i32 %135, %10\l  %137 = add nsw i32 %136, %20\l  %138 = sext i32 %137 to i64\l  %139 = getelementptr inbounds float, float addrspace(1)* %1, i64 %138\l  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !7\l  %141 = add nuw i32 %136, %11\l  %142 = zext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %2, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !7\l  %145 = fmul contract float %140, %144\l  %146 = fadd contract float %134, %145\l  store float %146, float addrspace(1)* %28, align 4, !tbaa !7\l  %147 = add nuw nsw i32 %62, 7\l  %148 = mul nuw nsw i32 %147, %10\l  %149 = add nsw i32 %148, %20\l  %150 = sext i32 %149 to i64\l  %151 = getelementptr inbounds float, float addrspace(1)* %1, i64 %150\l  %152 = load float, float addrspace(1)* %151, align 4, !tbaa !7\l  %153 = add nuw i32 %148, %11\l  %154 = zext i32 %153 to i64\l  %155 = getelementptr inbounds float, float addrspace(1)* %2, i64 %154\l  %156 = load float, float addrspace(1)* %155, align 4, !tbaa !7\l  %157 = fmul contract float %152, %156\l  %158 = fadd contract float %146, %157\l  store float %158, float addrspace(1)* %28, align 4, !tbaa !7\l  %159 = add nuw nsw i32 %62, 8\l  %160 = add i32 %63, 8\l  %161 = icmp eq i32 %160, %36\l  br i1 %161, label %37, label %60, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5b6f860:s0 -> Node0x5b6e110;
	Node0x5b6f860:s1 -> Node0x5b6f860;
}
