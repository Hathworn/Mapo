digraph "CFG for '_Z15matrixMulKernelPfS_S_ii' function" {
	label="CFG for '_Z15matrixMulKernelPfS_S_ii' function";

	Node0x556fce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %6, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %7, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = add i32 %20, %21\l  %23 = icmp slt i32 %14, %3\l  %24 = icmp slt i32 %22, %4\l  %25 = select i1 %23, i1 %24, i1 false\l  br i1 %25, label %26, label %164\l|{<s0>T|<s1>F}}"];
	Node0x556fce0:s0 -> Node0x5573750;
	Node0x556fce0:s1 -> Node0x55737e0;
	Node0x5573750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%26:\l26:                                               \l  %27 = icmp sgt i32 %3, 0\l  %28 = mul nsw i32 %22, %3\l  br i1 %27, label %29, label %57\l|{<s0>T|<s1>F}}"];
	Node0x5573750:s0 -> Node0x5573a70;
	Node0x5573750:s1 -> Node0x5573ac0;
	Node0x5573a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = and i32 %3, 7\l  %31 = icmp ult i32 %3, 8\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x5573a70:s0 -> Node0x5573d80;
	Node0x5573a70:s1 -> Node0x5573dd0;
	Node0x5573dd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %3, -8\l  br label %62\l}"];
	Node0x5573dd0 -> Node0x5571e50;
	Node0x5573d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = phi float [ undef, %29 ], [ %160, %62 ]\l  %36 = phi i32 [ 0, %29 ], [ %161, %62 ]\l  %37 = phi float [ 0.000000e+00, %29 ], [ %160, %62 ]\l  %38 = icmp eq i32 %30, 0\l  br i1 %38, label %57, label %39\l|{<s0>T|<s1>F}}"];
	Node0x5573d80:s0 -> Node0x5573ac0;
	Node0x5573d80:s1 -> Node0x5575340;
	Node0x5575340 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %54, %39 ], [ %36, %34 ]\l  %41 = phi float [ %53, %39 ], [ %37, %34 ]\l  %42 = phi i32 [ %55, %39 ], [ 0, %34 ]\l  %43 = add nsw i32 %40, %28\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %1, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = mul nsw i32 %40, %3\l  %48 = add nsw i32 %47, %14\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %2, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fmul contract float %46, %51\l  %53 = fadd contract float %41, %52\l  %54 = add nuw nsw i32 %40, 1\l  %55 = add i32 %42, 1\l  %56 = icmp eq i32 %55, %30\l  br i1 %56, label %57, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5575340:s0 -> Node0x5573ac0;
	Node0x5575340:s1 -> Node0x5575340;
	Node0x5573ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %26 ], [ %35, %34 ], [ %53, %39 ]\l  %59 = add nsw i32 %28, %14\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60\l  store float %58, float addrspace(1)* %61, align 4, !tbaa !7\l  br label %164\l}"];
	Node0x5573ac0 -> Node0x55737e0;
	Node0x5571e50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i32 [ 0, %32 ], [ %161, %62 ]\l  %64 = phi float [ 0.000000e+00, %32 ], [ %160, %62 ]\l  %65 = phi i32 [ 0, %32 ], [ %162, %62 ]\l  %66 = add nsw i32 %63, %28\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67\l  %69 = load float, float addrspace(1)* %68, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = mul nsw i32 %63, %3\l  %71 = add nsw i32 %70, %14\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %2, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = fmul contract float %69, %74\l  %76 = fadd contract float %64, %75\l  %77 = or i32 %63, 1\l  %78 = add nsw i32 %77, %28\l  %79 = sext i32 %78 to i64\l  %80 = getelementptr inbounds float, float addrspace(1)* %1, i64 %79\l  %81 = load float, float addrspace(1)* %80, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %82 = mul nsw i32 %77, %3\l  %83 = add nsw i32 %82, %14\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %2, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = fmul contract float %81, %86\l  %88 = fadd contract float %76, %87\l  %89 = or i32 %63, 2\l  %90 = add nsw i32 %89, %28\l  %91 = sext i32 %90 to i64\l  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %91\l  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %94 = mul nsw i32 %89, %3\l  %95 = add nsw i32 %94, %14\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %2, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = fmul contract float %93, %98\l  %100 = fadd contract float %88, %99\l  %101 = or i32 %63, 3\l  %102 = add nsw i32 %101, %28\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds float, float addrspace(1)* %1, i64 %103\l  %105 = load float, float addrspace(1)* %104, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %106 = mul nsw i32 %101, %3\l  %107 = add nsw i32 %106, %14\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %2, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %105, %110\l  %112 = fadd contract float %100, %111\l  %113 = or i32 %63, 4\l  %114 = add nsw i32 %113, %28\l  %115 = sext i32 %114 to i64\l  %116 = getelementptr inbounds float, float addrspace(1)* %1, i64 %115\l  %117 = load float, float addrspace(1)* %116, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %118 = mul nsw i32 %113, %3\l  %119 = add nsw i32 %118, %14\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %2, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = fmul contract float %117, %122\l  %124 = fadd contract float %112, %123\l  %125 = or i32 %63, 5\l  %126 = add nsw i32 %125, %28\l  %127 = sext i32 %126 to i64\l  %128 = getelementptr inbounds float, float addrspace(1)* %1, i64 %127\l  %129 = load float, float addrspace(1)* %128, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %130 = mul nsw i32 %125, %3\l  %131 = add nsw i32 %130, %14\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %2, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = fmul contract float %129, %134\l  %136 = fadd contract float %124, %135\l  %137 = or i32 %63, 6\l  %138 = add nsw i32 %137, %28\l  %139 = sext i32 %138 to i64\l  %140 = getelementptr inbounds float, float addrspace(1)* %1, i64 %139\l  %141 = load float, float addrspace(1)* %140, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %142 = mul nsw i32 %137, %3\l  %143 = add nsw i32 %142, %14\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %2, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = fmul contract float %141, %146\l  %148 = fadd contract float %136, %147\l  %149 = or i32 %63, 7\l  %150 = add nsw i32 %149, %28\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds float, float addrspace(1)* %1, i64 %151\l  %153 = load float, float addrspace(1)* %152, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = mul nsw i32 %149, %3\l  %155 = add nsw i32 %154, %14\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %2, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %153, %158\l  %160 = fadd contract float %148, %159\l  %161 = add nuw nsw i32 %63, 8\l  %162 = add i32 %65, 8\l  %163 = icmp eq i32 %162, %33\l  br i1 %163, label %34, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5571e50:s0 -> Node0x5573d80;
	Node0x5571e50:s1 -> Node0x5571e50;
	Node0x55737e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%164:\l164:                                              \l  ret void\l}"];
}
