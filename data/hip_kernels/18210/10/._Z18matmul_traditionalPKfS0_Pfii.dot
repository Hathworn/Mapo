digraph "CFG for '_Z18matmul_traditionalPKfS0_Pfii' function" {
	label="CFG for '_Z18matmul_traditionalPKfS0_Pfii' function";

	Node0x503fca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%5:\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %8 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*\l  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5\l  %11 = zext i16 %10 to i32\l  %12 = mul i32 %7, %11\l  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %14 = add i32 %12, %13\l  %15 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %16 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %17 = bitcast i8 addrspace(4)* %16 to i16 addrspace(4)*\l  %18 = load i16, i16 addrspace(4)* %17, align 2, !range !4, !invariant.load !5\l  %19 = zext i16 %18 to i32\l  %20 = mul i32 %15, %19\l  %21 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %22 = add i32 %20, %21\l  %23 = mul nsw i32 %14, %3\l  %24 = add nsw i32 %23, %22\l  %25 = icmp slt i32 %14, %3\l  %26 = icmp slt i32 %22, %4\l  %27 = select i1 %25, i1 %26, i1 false\l  br i1 %27, label %28, label %164\l|{<s0>T|<s1>F}}"];
	Node0x503fca0:s0 -> Node0x5043870;
	Node0x503fca0:s1 -> Node0x5043900;
	Node0x5043870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%28:\l28:                                               \l  %29 = icmp sgt i32 %3, 0\l  br i1 %29, label %30, label %58\l|{<s0>T|<s1>F}}"];
	Node0x5043870:s0 -> Node0x5043b00;
	Node0x5043870:s1 -> Node0x5043b50;
	Node0x5043b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%30:\l30:                                               \l  %31 = and i32 %3, 7\l  %32 = icmp ult i32 %3, 8\l  br i1 %32, label %35, label %33\l|{<s0>T|<s1>F}}"];
	Node0x5043b00:s0 -> Node0x5041d90;
	Node0x5043b00:s1 -> Node0x5041de0;
	Node0x5041de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%33:\l33:                                               \l  %34 = and i32 %3, -8\l  br label %62\l}"];
	Node0x5041de0 -> Node0x5044160;
	Node0x5041d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%35:\l35:                                               \l  %36 = phi float [ undef, %30 ], [ %160, %62 ]\l  %37 = phi float [ 0.000000e+00, %30 ], [ %160, %62 ]\l  %38 = phi i32 [ 0, %30 ], [ %161, %62 ]\l  %39 = icmp eq i32 %31, 0\l  br i1 %39, label %58, label %40\l|{<s0>T|<s1>F}}"];
	Node0x5041d90:s0 -> Node0x5043b50;
	Node0x5041d90:s1 -> Node0x50453d0;
	Node0x50453d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi float [ %54, %40 ], [ %37, %35 ]\l  %42 = phi i32 [ %55, %40 ], [ %38, %35 ]\l  %43 = phi i32 [ %56, %40 ], [ 0, %35 ]\l  %44 = add nsw i32 %42, %23\l  %45 = mul nsw i32 %42, %3\l  %46 = add nsw i32 %45, %22\l  %47 = sext i32 %44 to i64\l  %48 = getelementptr inbounds float, float addrspace(1)* %0, i64 %47\l  %49 = load float, float addrspace(1)* %48, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %50 = sext i32 %46 to i64\l  %51 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50\l  %52 = load float, float addrspace(1)* %51, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %53 = fmul contract float %49, %52\l  %54 = fadd contract float %41, %53\l  %55 = add nuw nsw i32 %42, 1\l  %56 = add i32 %43, 1\l  %57 = icmp eq i32 %56, %31\l  br i1 %57, label %58, label %40, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x50453d0:s0 -> Node0x5043b50;
	Node0x50453d0:s1 -> Node0x50453d0;
	Node0x5043b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%58:\l58:                                               \l  %59 = phi float [ 0.000000e+00, %28 ], [ %36, %35 ], [ %54, %40 ]\l  %60 = sext i32 %24 to i64\l  %61 = getelementptr inbounds float, float addrspace(1)* %2, i64 %60\l  store float %59, float addrspace(1)* %61, align 4, !tbaa !7\l  br label %164\l}"];
	Node0x5043b50 -> Node0x5043900;
	Node0x5044160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi float [ 0.000000e+00, %33 ], [ %160, %62 ]\l  %64 = phi i32 [ 0, %33 ], [ %161, %62 ]\l  %65 = phi i32 [ 0, %33 ], [ %162, %62 ]\l  %66 = add nsw i32 %64, %23\l  %67 = mul nsw i32 %64, %3\l  %68 = add nsw i32 %67, %22\l  %69 = sext i32 %66 to i64\l  %70 = getelementptr inbounds float, float addrspace(1)* %0, i64 %69\l  %71 = load float, float addrspace(1)* %70, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %72 = sext i32 %68 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = fmul contract float %71, %74\l  %76 = fadd contract float %63, %75\l  %77 = or i32 %64, 1\l  %78 = add nsw i32 %77, %23\l  %79 = mul nsw i32 %77, %3\l  %80 = add nsw i32 %79, %22\l  %81 = sext i32 %78 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %84 = sext i32 %80 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %1, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = fmul contract float %83, %86\l  %88 = fadd contract float %76, %87\l  %89 = or i32 %64, 2\l  %90 = add nsw i32 %89, %23\l  %91 = mul nsw i32 %89, %3\l  %92 = add nsw i32 %91, %22\l  %93 = sext i32 %90 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %96 = sext i32 %92 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %1, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = fmul contract float %95, %98\l  %100 = fadd contract float %88, %99\l  %101 = or i32 %64, 3\l  %102 = add nsw i32 %101, %23\l  %103 = mul nsw i32 %101, %3\l  %104 = add nsw i32 %103, %22\l  %105 = sext i32 %102 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %108 = sext i32 %104 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = fmul contract float %107, %110\l  %112 = fadd contract float %100, %111\l  %113 = or i32 %64, 4\l  %114 = add nsw i32 %113, %23\l  %115 = mul nsw i32 %113, %3\l  %116 = add nsw i32 %115, %22\l  %117 = sext i32 %114 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %120 = sext i32 %116 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %1, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = fmul contract float %119, %122\l  %124 = fadd contract float %112, %123\l  %125 = or i32 %64, 5\l  %126 = add nsw i32 %125, %23\l  %127 = mul nsw i32 %125, %3\l  %128 = add nsw i32 %127, %22\l  %129 = sext i32 %126 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %132 = sext i32 %128 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %1, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = fmul contract float %131, %134\l  %136 = fadd contract float %124, %135\l  %137 = or i32 %64, 6\l  %138 = add nsw i32 %137, %23\l  %139 = mul nsw i32 %137, %3\l  %140 = add nsw i32 %139, %22\l  %141 = sext i32 %138 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %144 = sext i32 %140 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %1, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = fmul contract float %143, %146\l  %148 = fadd contract float %136, %147\l  %149 = or i32 %64, 7\l  %150 = add nsw i32 %149, %23\l  %151 = mul nsw i32 %149, %3\l  %152 = add nsw i32 %151, %22\l  %153 = sext i32 %150 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %156 = sext i32 %152 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %1, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = fmul contract float %155, %158\l  %160 = fadd contract float %148, %159\l  %161 = add nuw nsw i32 %64, 8\l  %162 = add i32 %65, 8\l  %163 = icmp eq i32 %162, %34\l  br i1 %163, label %35, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5044160:s0 -> Node0x5041d90;
	Node0x5044160:s1 -> Node0x5044160;
	Node0x5043900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%164:\l164:                                              \l  ret void\l}"];
}
