digraph "CFG for '_Z11cacheMatmulPfS_S_i' function" {
	label="CFG for '_Z11cacheMatmulPfS_S_i' function";

	Node0x4daeef0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%4:\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*\l  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5\l  %9 = zext i16 %8 to i32\l  %10 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %11 = bitcast i8 addrspace(4)* %10 to i32 addrspace(4)*\l  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !6\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %15 = bitcast i8 addrspace(4)* %14 to i16 addrspace(4)*\l  %16 = load i16, i16 addrspace(4)* %15, align 2, !range !4, !invariant.load !5\l  %17 = zext i16 %16 to i32\l  %18 = mul i32 %13, %17\l  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15\l  %20 = add i32 %18, %19\l  %21 = icmp sgt i32 %3, 0\l  br i1 %21, label %22, label %42\l|{<s0>T|<s1>F}}"];
	Node0x4daeef0:s0 -> Node0x4db2000;
	Node0x4daeef0:s1 -> Node0x4db2090;
	Node0x4db2000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%22:\l22:                                               \l  %23 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %24 = mul i32 %23, %9\l  %25 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15\l  %26 = add i32 %24, %25\l  %27 = mul nsw i32 %26, %3\l  %28 = add nsw i32 %20, %27\l  %29 = sext i32 %28 to i64\l  %30 = getelementptr inbounds float, float addrspace(1)* %2, i64 %29\l  %31 = udiv i32 %12, %9\l  %32 = mul i32 %31, %9\l  %33 = icmp ugt i32 %12, %32\l  %34 = zext i1 %33 to i32\l  %35 = add i32 %31, %34\l  %36 = load float, float addrspace(1)* %30, align 4, !tbaa !16\l  %37 = add i32 %31, %34\l  %38 = add i32 %37, -1\l  %39 = and i32 %35, 7\l  %40 = icmp eq i32 %39, 0\l  %41 = icmp ult i32 %38, 7\l  br label %43\l}"];
	Node0x4db2000 -> Node0x4db37b0;
	Node0x4db2090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%42:\l42:                                               \l  ret void\l}"];
	Node0x4db37b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%43:\l43:                                               \l  %44 = phi float [ %36, %22 ], [ %74, %73 ]\l  %45 = phi i32 [ %35, %22 ], [ %76, %73 ]\l  %46 = phi i32 [ 0, %22 ], [ %48, %73 ]\l  %47 = add i32 %31, %46\l  %48 = add i32 %47, %34\l  %49 = icmp ult i32 %46, %48\l  br i1 %49, label %50, label %73\l|{<s0>T|<s1>F}}"];
	Node0x4db37b0:s0 -> Node0x4db3e20;
	Node0x4db37b0:s1 -> Node0x4db3930;
	Node0x4db3e20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%50:\l50:                                               \l  br i1 %40, label %69, label %51\l|{<s0>T|<s1>F}}"];
	Node0x4db3e20:s0 -> Node0x4db3f20;
	Node0x4db3e20:s1 -> Node0x4db3f70;
	Node0x4db3f70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = phi i32 [ %66, %51 ], [ %46, %50 ]\l  %53 = phi float [ %65, %51 ], [ %44, %50 ]\l  %54 = phi i32 [ %67, %51 ], [ 0, %50 ]\l  %55 = add nsw i32 %52, %27\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds float, float addrspace(1)* %0, i64 %56\l  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !16\l  %59 = mul nsw i32 %52, %3\l  %60 = add nsw i32 %59, %20\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !16\l  %64 = fmul contract float %58, %63\l  %65 = fadd contract float %53, %64\l  %66 = add nuw nsw i32 %52, 1\l  %67 = add i32 %54, 1\l  %68 = icmp eq i32 %67, %39\l  br i1 %68, label %69, label %51, !llvm.loop !20\l|{<s0>T|<s1>F}}"];
	Node0x4db3f70:s0 -> Node0x4db3f20;
	Node0x4db3f70:s1 -> Node0x4db3f70;
	Node0x4db3f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%69:\l69:                                               \l  %70 = phi float [ undef, %50 ], [ %65, %51 ]\l  %71 = phi i32 [ %46, %50 ], [ %66, %51 ]\l  %72 = phi float [ %44, %50 ], [ %65, %51 ]\l  br i1 %41, label %73, label %77\l|{<s0>T|<s1>F}}"];
	Node0x4db3f20:s0 -> Node0x4db3930;
	Node0x4db3f20:s1 -> Node0x4db5a60;
	Node0x4db3930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%73:\l73:                                               \l  %74 = phi float [ %44, %43 ], [ %70, %69 ], [ %174, %77 ]\l  store float %74, float addrspace(1)* %30, align 4, !tbaa !16\l  %75 = icmp slt i32 %48, %3\l  %76 = add i32 %45, %35\l  br i1 %75, label %43, label %42, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x4db3930:s0 -> Node0x4db37b0;
	Node0x4db3930:s1 -> Node0x4db2090;
	Node0x4db5a60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%77:\l77:                                               \l  %78 = phi i32 [ %175, %77 ], [ %71, %69 ]\l  %79 = phi float [ %174, %77 ], [ %72, %69 ]\l  %80 = add nsw i32 %78, %27\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81\l  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !16\l  %84 = mul nsw i32 %78, %3\l  %85 = add nsw i32 %84, %20\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %1, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !16\l  %89 = fmul contract float %83, %88\l  %90 = fadd contract float %79, %89\l  %91 = add nuw nsw i32 %78, 1\l  %92 = add nsw i32 %91, %27\l  %93 = sext i32 %92 to i64\l  %94 = getelementptr inbounds float, float addrspace(1)* %0, i64 %93\l  %95 = load float, float addrspace(1)* %94, align 4, !tbaa !16\l  %96 = mul nsw i32 %91, %3\l  %97 = add nsw i32 %96, %20\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %1, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !16\l  %101 = fmul contract float %95, %100\l  %102 = fadd contract float %90, %101\l  %103 = add nuw nsw i32 %78, 2\l  %104 = add nsw i32 %103, %27\l  %105 = sext i32 %104 to i64\l  %106 = getelementptr inbounds float, float addrspace(1)* %0, i64 %105\l  %107 = load float, float addrspace(1)* %106, align 4, !tbaa !16\l  %108 = mul nsw i32 %103, %3\l  %109 = add nsw i32 %108, %20\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %1, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !16\l  %113 = fmul contract float %107, %112\l  %114 = fadd contract float %102, %113\l  %115 = add nuw nsw i32 %78, 3\l  %116 = add nsw i32 %115, %27\l  %117 = sext i32 %116 to i64\l  %118 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117\l  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !16\l  %120 = mul nsw i32 %115, %3\l  %121 = add nsw i32 %120, %20\l  %122 = sext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %1, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !16\l  %125 = fmul contract float %119, %124\l  %126 = fadd contract float %114, %125\l  %127 = add nuw nsw i32 %78, 4\l  %128 = add nsw i32 %127, %27\l  %129 = sext i32 %128 to i64\l  %130 = getelementptr inbounds float, float addrspace(1)* %0, i64 %129\l  %131 = load float, float addrspace(1)* %130, align 4, !tbaa !16\l  %132 = mul nsw i32 %127, %3\l  %133 = add nsw i32 %132, %20\l  %134 = sext i32 %133 to i64\l  %135 = getelementptr inbounds float, float addrspace(1)* %1, i64 %134\l  %136 = load float, float addrspace(1)* %135, align 4, !tbaa !16\l  %137 = fmul contract float %131, %136\l  %138 = fadd contract float %126, %137\l  %139 = add nuw nsw i32 %78, 5\l  %140 = add nsw i32 %139, %27\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %0, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !16\l  %144 = mul nsw i32 %139, %3\l  %145 = add nsw i32 %144, %20\l  %146 = sext i32 %145 to i64\l  %147 = getelementptr inbounds float, float addrspace(1)* %1, i64 %146\l  %148 = load float, float addrspace(1)* %147, align 4, !tbaa !16\l  %149 = fmul contract float %143, %148\l  %150 = fadd contract float %138, %149\l  %151 = add nuw nsw i32 %78, 6\l  %152 = add nsw i32 %151, %27\l  %153 = sext i32 %152 to i64\l  %154 = getelementptr inbounds float, float addrspace(1)* %0, i64 %153\l  %155 = load float, float addrspace(1)* %154, align 4, !tbaa !16\l  %156 = mul nsw i32 %151, %3\l  %157 = add nsw i32 %156, %20\l  %158 = sext i32 %157 to i64\l  %159 = getelementptr inbounds float, float addrspace(1)* %1, i64 %158\l  %160 = load float, float addrspace(1)* %159, align 4, !tbaa !16\l  %161 = fmul contract float %155, %160\l  %162 = fadd contract float %150, %161\l  %163 = add nuw nsw i32 %78, 7\l  %164 = add nsw i32 %163, %27\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds float, float addrspace(1)* %0, i64 %165\l  %167 = load float, float addrspace(1)* %166, align 4, !tbaa !16\l  %168 = mul nsw i32 %163, %3\l  %169 = add nsw i32 %168, %20\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds float, float addrspace(1)* %1, i64 %170\l  %172 = load float, float addrspace(1)* %171, align 4, !tbaa !16\l  %173 = fmul contract float %167, %172\l  %174 = fadd contract float %162, %173\l  %175 = add nuw nsw i32 %78, 8\l  %176 = icmp eq i32 %175, %45\l  br i1 %176, label %73, label %77, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x4db5a60:s0 -> Node0x4db3930;
	Node0x4db5a60:s1 -> Node0x4db5a60;
}
