digraph "CFG for '_Z15MatrixMulKernelPfS_S_i' function" {
	label="CFG for '_Z15MatrixMulKernelPfS_S_i' function";

	Node0x4e48850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = shl i32 %5, 12\l  %7 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !4\l  %8 = or i32 %6, %7\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = shl i32 %9, 12\l  %11 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %12 = or i32 %10, %11\l  %13 = icmp sgt i32 %3, 0\l  %14 = mul nsw i32 %8, %3\l  br i1 %13, label %15, label %43\l|{<s0>T|<s1>F}}"];
	Node0x4e48850:s0 -> Node0x4e4ac20;
	Node0x4e48850:s1 -> Node0x4e4acb0;
	Node0x4e4ac20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%15:\l15:                                               \l  %16 = and i32 %3, 7\l  %17 = icmp ult i32 %3, 8\l  br i1 %17, label %20, label %18\l|{<s0>T|<s1>F}}"];
	Node0x4e4ac20:s0 -> Node0x4e49fa0;
	Node0x4e4ac20:s1 -> Node0x4e4b050;
	Node0x4e4b050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%18:\l18:                                               \l  %19 = and i32 %3, -8\l  br label %48\l}"];
	Node0x4e4b050 -> Node0x4e4b250;
	Node0x4e49fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%20:\l20:                                               \l  %21 = phi float [ undef, %15 ], [ %146, %48 ]\l  %22 = phi i32 [ 0, %15 ], [ %147, %48 ]\l  %23 = phi float [ 0.000000e+00, %15 ], [ %146, %48 ]\l  %24 = icmp eq i32 %16, 0\l  br i1 %24, label %43, label %25\l|{<s0>T|<s1>F}}"];
	Node0x4e49fa0:s0 -> Node0x4e4acb0;
	Node0x4e49fa0:s1 -> Node0x4e4c4c0;
	Node0x4e4c4c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%25:\l25:                                               \l  %26 = phi i32 [ %40, %25 ], [ %22, %20 ]\l  %27 = phi float [ %39, %25 ], [ %23, %20 ]\l  %28 = phi i32 [ %41, %25 ], [ 0, %20 ]\l  %29 = add nsw i32 %26, %14\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30\l  %32 = load float, float addrspace(1)* %31, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %33 = mul nsw i32 %26, %3\l  %34 = add nsw i32 %33, %12\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds float, float addrspace(1)* %1, i64 %35\l  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %38 = fmul contract float %32, %37\l  %39 = fadd contract float %27, %38\l  %40 = add nuw nsw i32 %26, 1\l  %41 = add i32 %28, 1\l  %42 = icmp eq i32 %41, %16\l  br i1 %42, label %43, label %25, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x4e4c4c0:s0 -> Node0x4e4acb0;
	Node0x4e4c4c0:s1 -> Node0x4e4c4c0;
	Node0x4e4acb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%43:\l43:                                               \l  %44 = phi float [ 0.000000e+00, %4 ], [ %21, %20 ], [ %39, %25 ]\l  %45 = add nsw i32 %14, %12\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds float, float addrspace(1)* %2, i64 %46\l  store float %44, float addrspace(1)* %47, align 4, !tbaa !5\l  ret void\l}"];
	Node0x4e4b250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%48:\l48:                                               \l  %49 = phi i32 [ 0, %18 ], [ %147, %48 ]\l  %50 = phi float [ 0.000000e+00, %18 ], [ %146, %48 ]\l  %51 = phi i32 [ 0, %18 ], [ %148, %48 ]\l  %52 = add nsw i32 %49, %14\l  %53 = sext i32 %52 to i64\l  %54 = getelementptr inbounds float, float addrspace(1)* %0, i64 %53\l  %55 = load float, float addrspace(1)* %54, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %56 = mul nsw i32 %49, %3\l  %57 = add nsw i32 %56, %12\l  %58 = sext i32 %57 to i64\l  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58\l  %60 = load float, float addrspace(1)* %59, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %61 = fmul contract float %55, %60\l  %62 = fadd contract float %50, %61\l  %63 = or i32 %49, 1\l  %64 = add nsw i32 %63, %14\l  %65 = sext i32 %64 to i64\l  %66 = getelementptr inbounds float, float addrspace(1)* %0, i64 %65\l  %67 = load float, float addrspace(1)* %66, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %68 = mul nsw i32 %63, %3\l  %69 = add nsw i32 %68, %12\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %73 = fmul contract float %67, %72\l  %74 = fadd contract float %62, %73\l  %75 = or i32 %49, 2\l  %76 = add nsw i32 %75, %14\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %0, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %80 = mul nsw i32 %75, %3\l  %81 = add nsw i32 %80, %12\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds float, float addrspace(1)* %1, i64 %82\l  %84 = load float, float addrspace(1)* %83, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %85 = fmul contract float %79, %84\l  %86 = fadd contract float %74, %85\l  %87 = or i32 %49, 3\l  %88 = add nsw i32 %87, %14\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %0, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %92 = mul nsw i32 %87, %3\l  %93 = add nsw i32 %92, %12\l  %94 = sext i32 %93 to i64\l  %95 = getelementptr inbounds float, float addrspace(1)* %1, i64 %94\l  %96 = load float, float addrspace(1)* %95, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %97 = fmul contract float %91, %96\l  %98 = fadd contract float %86, %97\l  %99 = or i32 %49, 4\l  %100 = add nsw i32 %99, %14\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %0, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %104 = mul nsw i32 %99, %3\l  %105 = add nsw i32 %104, %12\l  %106 = sext i32 %105 to i64\l  %107 = getelementptr inbounds float, float addrspace(1)* %1, i64 %106\l  %108 = load float, float addrspace(1)* %107, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %109 = fmul contract float %103, %108\l  %110 = fadd contract float %98, %109\l  %111 = or i32 %49, 5\l  %112 = add nsw i32 %111, %14\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %0, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %116 = mul nsw i32 %111, %3\l  %117 = add nsw i32 %116, %12\l  %118 = sext i32 %117 to i64\l  %119 = getelementptr inbounds float, float addrspace(1)* %1, i64 %118\l  %120 = load float, float addrspace(1)* %119, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %121 = fmul contract float %115, %120\l  %122 = fadd contract float %110, %121\l  %123 = or i32 %49, 6\l  %124 = add nsw i32 %123, %14\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %0, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %128 = mul nsw i32 %123, %3\l  %129 = add nsw i32 %128, %12\l  %130 = sext i32 %129 to i64\l  %131 = getelementptr inbounds float, float addrspace(1)* %1, i64 %130\l  %132 = load float, float addrspace(1)* %131, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %133 = fmul contract float %127, %132\l  %134 = fadd contract float %122, %133\l  %135 = or i32 %49, 7\l  %136 = add nsw i32 %135, %14\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %0, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %140 = mul nsw i32 %135, %3\l  %141 = add nsw i32 %140, %12\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds float, float addrspace(1)* %1, i64 %142\l  %144 = load float, float addrspace(1)* %143, align 4, !tbaa !5,\l... !amdgpu.noclobber !9\l  %145 = fmul contract float %139, %144\l  %146 = fadd contract float %134, %145\l  %147 = add nuw nsw i32 %49, 8\l  %148 = add i32 %51, 8\l  %149 = icmp eq i32 %148, %19\l  br i1 %149, label %20, label %48, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x4e4b250:s0 -> Node0x4e49fa0;
	Node0x4e4b250:s1 -> Node0x4e4b250;
}
