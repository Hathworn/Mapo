digraph "CFG for '_Z5gpuMMPdS_S_i' function" {
	label="CFG for '_Z5gpuMMPdS_S_i' function";

	Node0x6044e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 6\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 2, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %13 = add i32 %11, %12\l  %14 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %15 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %16 = bitcast i8 addrspace(4)* %15 to i16 addrspace(4)*\l  %17 = load i16, i16 addrspace(4)* %16, align 4, !range !4, !invariant.load !5\l  %18 = zext i16 %17 to i32\l  %19 = mul i32 %14, %18\l  %20 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %21 = add i32 %19, %20\l  %22 = icmp sgt i32 %3, 0\l  %23 = mul nsw i32 %13, %3\l  br i1 %22, label %24, label %57\l|{<s0>T|<s1>F}}"];
	Node0x6044e40:s0 -> Node0x6048840;
	Node0x6044e40:s1 -> Node0x60488d0;
	Node0x6048840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%24:\l24:                                               \l  %25 = and i32 %3, 7\l  %26 = icmp ult i32 %3, 8\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x6048840:s0 -> Node0x6048b90;
	Node0x6048840:s1 -> Node0x6048be0;
	Node0x6048be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%27:\l27:                                               \l  %28 = and i32 %3, -8\l  br label %62\l}"];
	Node0x6048be0 -> Node0x6048de0;
	Node0x6048b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%29:\l29:                                               \l  %30 = phi float [ undef, %24 ], [ %176, %62 ]\l  %31 = phi i32 [ 0, %24 ], [ %177, %62 ]\l  %32 = phi float [ 0.000000e+00, %24 ], [ %176, %62 ]\l  %33 = icmp eq i32 %25, 0\l  br i1 %33, label %54, label %34\l|{<s0>T|<s1>F}}"];
	Node0x6048b90:s0 -> Node0x6047050;
	Node0x6048b90:s1 -> Node0x604a210;
	Node0x604a210 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%34:\l34:                                               \l  %35 = phi i32 [ %51, %34 ], [ %31, %29 ]\l  %36 = phi float [ %50, %34 ], [ %32, %29 ]\l  %37 = phi i32 [ %52, %34 ], [ 0, %29 ]\l  %38 = add nsw i32 %35, %23\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds double, double addrspace(1)* %0, i64 %39\l  %41 = load double, double addrspace(1)* %40, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %42 = mul nsw i32 %35, %3\l  %43 = add nsw i32 %42, %21\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds double, double addrspace(1)* %1, i64 %44\l  %46 = load double, double addrspace(1)* %45, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = fmul contract double %41, %46\l  %48 = fpext float %36 to double\l  %49 = fadd contract double %47, %48\l  %50 = fptrunc double %49 to float\l  %51 = add nuw nsw i32 %35, 1\l  %52 = add i32 %37, 1\l  %53 = icmp eq i32 %52, %25\l  br i1 %53, label %54, label %34, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x604a210:s0 -> Node0x6047050;
	Node0x604a210:s1 -> Node0x604a210;
	Node0x6047050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%54:\l54:                                               \l  %55 = phi float [ %30, %29 ], [ %50, %34 ]\l  %56 = fpext float %55 to double\l  br label %57\l}"];
	Node0x6047050 -> Node0x60488d0;
	Node0x60488d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%57:\l57:                                               \l  %58 = phi double [ %56, %54 ], [ 0.000000e+00, %4 ]\l  %59 = add nsw i32 %23, %21\l  %60 = sext i32 %59 to i64\l  %61 = getelementptr inbounds double, double addrspace(1)* %2, i64 %60\l  store double %58, double addrspace(1)* %61, align 8, !tbaa !7\l  ret void\l}"];
	Node0x6048de0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i32 [ 0, %27 ], [ %177, %62 ]\l  %64 = phi float [ 0.000000e+00, %27 ], [ %176, %62 ]\l  %65 = phi i32 [ 0, %27 ], [ %178, %62 ]\l  %66 = add nsw i32 %63, %23\l  %67 = sext i32 %66 to i64\l  %68 = getelementptr inbounds double, double addrspace(1)* %0, i64 %67\l  %69 = load double, double addrspace(1)* %68, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %70 = mul nsw i32 %63, %3\l  %71 = add nsw i32 %70, %21\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds double, double addrspace(1)* %1, i64 %72\l  %74 = load double, double addrspace(1)* %73, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = fmul contract double %69, %74\l  %76 = fpext float %64 to double\l  %77 = fadd contract double %75, %76\l  %78 = fptrunc double %77 to float\l  %79 = or i32 %63, 1\l  %80 = add nsw i32 %79, %23\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds double, double addrspace(1)* %0, i64 %81\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %84 = mul nsw i32 %79, %3\l  %85 = add nsw i32 %84, %21\l  %86 = sext i32 %85 to i64\l  %87 = getelementptr inbounds double, double addrspace(1)* %1, i64 %86\l  %88 = load double, double addrspace(1)* %87, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %89 = fmul contract double %83, %88\l  %90 = fpext float %78 to double\l  %91 = fadd contract double %89, %90\l  %92 = fptrunc double %91 to float\l  %93 = or i32 %63, 2\l  %94 = add nsw i32 %93, %23\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds double, double addrspace(1)* %0, i64 %95\l  %97 = load double, double addrspace(1)* %96, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = mul nsw i32 %93, %3\l  %99 = add nsw i32 %98, %21\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds double, double addrspace(1)* %1, i64 %100\l  %102 = load double, double addrspace(1)* %101, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = fmul contract double %97, %102\l  %104 = fpext float %92 to double\l  %105 = fadd contract double %103, %104\l  %106 = fptrunc double %105 to float\l  %107 = or i32 %63, 3\l  %108 = add nsw i32 %107, %23\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds double, double addrspace(1)* %0, i64 %109\l  %111 = load double, double addrspace(1)* %110, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %112 = mul nsw i32 %107, %3\l  %113 = add nsw i32 %112, %21\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds double, double addrspace(1)* %1, i64 %114\l  %116 = load double, double addrspace(1)* %115, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %117 = fmul contract double %111, %116\l  %118 = fpext float %106 to double\l  %119 = fadd contract double %117, %118\l  %120 = fptrunc double %119 to float\l  %121 = or i32 %63, 4\l  %122 = add nsw i32 %121, %23\l  %123 = sext i32 %122 to i64\l  %124 = getelementptr inbounds double, double addrspace(1)* %0, i64 %123\l  %125 = load double, double addrspace(1)* %124, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %126 = mul nsw i32 %121, %3\l  %127 = add nsw i32 %126, %21\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds double, double addrspace(1)* %1, i64 %128\l  %130 = load double, double addrspace(1)* %129, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %131 = fmul contract double %125, %130\l  %132 = fpext float %120 to double\l  %133 = fadd contract double %131, %132\l  %134 = fptrunc double %133 to float\l  %135 = or i32 %63, 5\l  %136 = add nsw i32 %135, %23\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds double, double addrspace(1)* %0, i64 %137\l  %139 = load double, double addrspace(1)* %138, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = mul nsw i32 %135, %3\l  %141 = add nsw i32 %140, %21\l  %142 = sext i32 %141 to i64\l  %143 = getelementptr inbounds double, double addrspace(1)* %1, i64 %142\l  %144 = load double, double addrspace(1)* %143, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %145 = fmul contract double %139, %144\l  %146 = fpext float %134 to double\l  %147 = fadd contract double %145, %146\l  %148 = fptrunc double %147 to float\l  %149 = or i32 %63, 6\l  %150 = add nsw i32 %149, %23\l  %151 = sext i32 %150 to i64\l  %152 = getelementptr inbounds double, double addrspace(1)* %0, i64 %151\l  %153 = load double, double addrspace(1)* %152, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %154 = mul nsw i32 %149, %3\l  %155 = add nsw i32 %154, %21\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds double, double addrspace(1)* %1, i64 %156\l  %158 = load double, double addrspace(1)* %157, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = fmul contract double %153, %158\l  %160 = fpext float %148 to double\l  %161 = fadd contract double %159, %160\l  %162 = fptrunc double %161 to float\l  %163 = or i32 %63, 7\l  %164 = add nsw i32 %163, %23\l  %165 = sext i32 %164 to i64\l  %166 = getelementptr inbounds double, double addrspace(1)* %0, i64 %165\l  %167 = load double, double addrspace(1)* %166, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %168 = mul nsw i32 %163, %3\l  %169 = add nsw i32 %168, %21\l  %170 = sext i32 %169 to i64\l  %171 = getelementptr inbounds double, double addrspace(1)* %1, i64 %170\l  %172 = load double, double addrspace(1)* %171, align 8, !tbaa !7,\l... !amdgpu.noclobber !5\l  %173 = fmul contract double %167, %172\l  %174 = fpext float %162 to double\l  %175 = fadd contract double %173, %174\l  %176 = fptrunc double %175 to float\l  %177 = add nuw nsw i32 %63, 8\l  %178 = add i32 %65, 8\l  %179 = icmp eq i32 %178, %28\l  br i1 %179, label %29, label %62, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x6048de0:s0 -> Node0x6048b90;
	Node0x6048de0:s1 -> Node0x6048de0;
}
