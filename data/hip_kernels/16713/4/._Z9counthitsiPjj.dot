digraph "CFG for '_Z9counthitsiPjj' function" {
	label="CFG for '_Z9counthitsiPjj' function";

	Node0x5ab13e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%3:\l  %4 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 0, i64 0) #2, !srcloc !4\l  %5 = extractvalue \{ i64, i64 \} %4, 0\l  %6 = lshr i64 %5, 32\l  %7 = trunc i64 %6 to i32\l  %8 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 0, i64 0) #2, !srcloc !4\l  %9 = extractvalue \{ i64, i64 \} %8, 0\l  %10 = lshr i64 %9, 32\l  %11 = trunc i64 %10 to i32\l  %12 = xor i32 %11, -559038737\l  %13 = xor i32 %7, -559038737\l  %14 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %12, i64 0) #2, !srcloc !4\l  %15 = extractvalue \{ i64, i64 \} %14, 0\l  %16 = lshr i64 %15, 32\l  %17 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %13, i64 0) #2, !srcloc !4\l  %18 = extractvalue \{ i64, i64 \} %17, 0\l  %19 = lshr i64 %18, 32\l  %20 = xor i64 %19, %9\l  %21 = trunc i64 %20 to i32\l  %22 = xor i32 %21, 2095397032\l  %23 = xor i64 %16, %5\l  %24 = trunc i64 %23 to i32\l  %25 = xor i32 %24, -1709871756\l  %26 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %22, i64 0) #2, !srcloc !4\l  %27 = extractvalue \{ i64, i64 \} %26, 0\l  %28 = lshr i64 %27, 32\l  %29 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %25, i64 0) #2, !srcloc !4\l  %30 = extractvalue \{ i64, i64 \} %29, 0\l  %31 = lshr i64 %30, 32\l  %32 = xor i64 %31, %18\l  %33 = trunc i64 %32 to i32\l  %34 = xor i32 %33, 454865505\l  %35 = xor i64 %28, %15\l  %36 = trunc i64 %35 to i32\l  %37 = xor i32 %36, 1434262521\l  %38 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %34, i64 0) #2, !srcloc !4\l  %39 = extractvalue \{ i64, i64 \} %38, 0\l  %40 = lshr i64 %39, 32\l  %41 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %37, i64 0) #2, !srcloc !4\l  %42 = extractvalue \{ i64, i64 \} %41, 0\l  %43 = lshr i64 %42, 32\l  %44 = xor i64 %43, %30\l  %45 = trunc i64 %44 to i32\l  %46 = xor i32 %45, -1185666022\l  %47 = xor i64 %40, %27\l  %48 = trunc i64 %47 to i32\l  %49 = xor i32 %48, 283429502\l  %50 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %46, i64 0) #2, !srcloc !4\l  %51 = extractvalue \{ i64, i64 \} %50, 0\l  %52 = lshr i64 %51, 32\l  %53 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %49, i64 0) #2, !srcloc !4\l  %54 = extractvalue \{ i64, i64 \} %53, 0\l  %55 = lshr i64 %54, 32\l  %56 = xor i64 %55, %42\l  %57 = trunc i64 %56 to i32\l  %58 = xor i32 %57, 1468769747\l  %59 = xor i64 %52, %39\l  %60 = trunc i64 %59 to i32\l  %61 = xor i32 %60, -867403517\l  %62 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %58, i64 0) #2, !srcloc !4\l  %63 = extractvalue \{ i64, i64 \} %62, 0\l  %64 = lshr i64 %63, 32\l  %65 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %61, i64 0) #2, !srcloc !4\l  %66 = extractvalue \{ i64, i64 \} %65, 0\l  %67 = lshr i64 %66, 32\l  %68 = xor i64 %67, %54\l  %69 = trunc i64 %68 to i32\l  %70 = xor i32 %69, -171761780\l  %71 = xor i64 %64, %51\l  %72 = trunc i64 %71 to i32\l  %73 = xor i32 %72, -2018236536\l  %74 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %70, i64 0) #2, !srcloc !4\l  %75 = extractvalue \{ i64, i64 \} %74, 0\l  %76 = lshr i64 %75, 32\l  %77 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %73, i64 0) #2, !srcloc !4\l  %78 = extractvalue \{ i64, i64 \} %77, 0\l  %79 = lshr i64 %78, 32\l  %80 = xor i64 %79, %66\l  %81 = trunc i64 %80 to i32\l  %82 = xor i32 %81, -1812293307\l  %83 = xor i64 %76, %63\l  %84 = trunc i64 %83 to i32\l  %85 = xor i32 %84, 1125897741\l  %86 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %82, i64 0) #2, !srcloc !4\l  %87 = extractvalue \{ i64, i64 \} %86, 0\l  %88 = lshr i64 %87, 32\l  %89 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %85, i64 0) #2, !srcloc !4\l  %90 = extractvalue \{ i64, i64 \} %89, 0\l  %91 = lshr i64 %90, 32\l  %92 = xor i64 %91, %78\l  %93 = trunc i64 %92 to i32\l  %94 = xor i32 %93, 842142462\l  %95 = xor i64 %88, %75\l  %96 = trunc i64 %95 to i32\l  %97 = xor i32 %96, -24935278\l  %98 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %94, i64 0) #2, !srcloc !4\l  %99 = extractvalue \{ i64, i64 \} %98, 0\l  %100 = lshr i64 %99, 32\l  %101 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %97, i64 0) #2, !srcloc !4\l  %102 = extractvalue \{ i64, i64 \} %101, 0\l  %103 = lshr i64 %102, 32\l  %104 = xor i64 %103, %90\l  %105 = trunc i64 %104 to i32\l  %106 = xor i32 %105, -798389065\l  %107 = xor i64 %100, %87\l  %108 = trunc i64 %107 to i32\l  %109 = xor i32 %108, -1175768297\l  %110 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %106, i64 0) #2, !srcloc !4\l  %111 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %109, i64 0) #2, !srcloc !4\l  %112 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !5\l  %113 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %114 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %115 = getelementptr i8, i8 addrspace(4)* %114, i64 4\l  %116 = bitcast i8 addrspace(4)* %115 to i16 addrspace(4)*\l  %117 = load i16, i16 addrspace(4)* %116, align 4, !range !6, !invariant.load\l... !7\l  %118 = zext i16 %117 to i32\l  %119 = mul i32 %113, %118\l  %120 = add i32 %119, %112\l  %121 = add i32 %120, %2\l  %122 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 0, i64 0) #2, !srcloc !4\l  %123 = extractvalue \{ i64, i64 \} %122, 0\l  %124 = lshr i64 %123, 32\l  %125 = trunc i64 %124 to i32\l  %126 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %121, i64 0) #2, !srcloc !4\l  %127 = extractvalue \{ i64, i64 \} %126, 0\l  %128 = lshr i64 %127, 32\l  %129 = trunc i64 %128 to i32\l  %130 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %129, i64 0) #2, !srcloc !4\l  %131 = extractvalue \{ i64, i64 \} %130, 0\l  %132 = lshr i64 %131, 32\l  %133 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %125, i64 0) #2, !srcloc !4\l  %134 = extractvalue \{ i64, i64 \} %133, 0\l  %135 = lshr i64 %134, 32\l  %136 = xor i64 %135, %127\l  %137 = trunc i64 %136 to i32\l  %138 = xor i32 %137, -1640531527\l  %139 = xor i64 %132, %123\l  %140 = trunc i64 %139 to i32\l  %141 = xor i32 %140, -1150833019\l  %142 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %138, i64 0) #2, !srcloc !4\l  %143 = extractvalue \{ i64, i64 \} %142, 0\l  %144 = lshr i64 %143, 32\l  %145 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %141, i64 0) #2, !srcloc !4\l  %146 = extractvalue \{ i64, i64 \} %145, 0\l  %147 = lshr i64 %146, 32\l  %148 = xor i64 %147, %134\l  %149 = trunc i64 %148 to i32\l  %150 = xor i32 %149, 1013904242\l  %151 = xor i64 %144, %131\l  %152 = trunc i64 %151 to i32\l  %153 = xor i32 %152, 1993301258\l  %154 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %150, i64 0) #2, !srcloc !4\l  %155 = extractvalue \{ i64, i64 \} %154, 0\l  %156 = lshr i64 %155, 32\l  %157 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %153, i64 0) #2, !srcloc !4\l  %158 = extractvalue \{ i64, i64 \} %157, 0\l  %159 = lshr i64 %158, 32\l  %160 = xor i64 %159, %146\l  %161 = trunc i64 %160 to i32\l  %162 = xor i32 %161, -626627285\l  %163 = xor i64 %156, %143\l  %164 = trunc i64 %163 to i32\l  %165 = xor i32 %164, 842468239\l  %166 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %162, i64 0) #2, !srcloc !4\l  %167 = extractvalue \{ i64, i64 \} %166, 0\l  %168 = lshr i64 %167, 32\l  %169 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %165, i64 0) #2, !srcloc !4\l  %170 = extractvalue \{ i64, i64 \} %169, 0\l  %171 = lshr i64 %170, 32\l  %172 = xor i64 %171, %158\l  %173 = trunc i64 %172 to i32\l  %174 = xor i32 %173, 2027808484\l  %175 = xor i64 %168, %155\l  %176 = trunc i64 %175 to i32\l  %177 = xor i32 %176, -308364780\l  %178 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %174, i64 0) #2, !srcloc !4\l  %179 = extractvalue \{ i64, i64 \} %178, 0\l  %180 = lshr i64 %179, 32\l  %181 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %177, i64 0) #2, !srcloc !4\l  %182 = extractvalue \{ i64, i64 \} %181, 0\l  %183 = lshr i64 %182, 32\l  %184 = xor i64 %183, %170\l  %185 = trunc i64 %184 to i32\l  %186 = xor i32 %185, 387276957\l  %187 = xor i64 %180, %167\l  %188 = trunc i64 %187 to i32\l  %189 = xor i32 %188, -1459197799\l  %190 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %186, i64 0) #2, !srcloc !4\l  %191 = extractvalue \{ i64, i64 \} %190, 0\l  %192 = lshr i64 %191, 32\l  %193 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %189, i64 0) #2, !srcloc !4\l  %194 = extractvalue \{ i64, i64 \} %193, 0\l  %195 = lshr i64 %194, 32\l  %196 = xor i64 %195, %182\l  %197 = trunc i64 %196 to i32\l  %198 = xor i32 %197, -1253254570\l  %199 = xor i64 %192, %179\l  %200 = trunc i64 %199 to i32\l  %201 = xor i32 %200, 1684936478\l  %202 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %198, i64 0) #2, !srcloc !4\l  %203 = extractvalue \{ i64, i64 \} %202, 0\l  %204 = lshr i64 %203, 32\l  %205 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %201, i64 0) #2, !srcloc !4\l  %206 = extractvalue \{ i64, i64 \} %205, 0\l  %207 = lshr i64 %206, 32\l  %208 = xor i64 %207, %194\l  %209 = trunc i64 %208 to i32\l  %210 = xor i32 %209, 1401181199\l  %211 = xor i64 %204, %191\l  %212 = trunc i64 %211 to i32\l  %213 = xor i32 %212, 534103459\l  %214 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %210, i64 0) #2, !srcloc !4\l  %215 = extractvalue \{ i64, i64 \} %214, 0\l  %216 = lshr i64 %215, 32\l  %217 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %213, i64 0) #2, !srcloc !4\l  %218 = extractvalue \{ i64, i64 \} %217, 0\l  %219 = lshr i64 %218, 32\l  %220 = xor i64 %219, %206\l  %221 = trunc i64 %220 to i32\l  %222 = xor i32 %221, -239350328\l  %223 = xor i64 %216, %203\l  %224 = trunc i64 %223 to i32\l  %225 = xor i32 %224, -616729560\l  %226 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %222, i64 0) #2, !srcloc !4\l  %227 = extractvalue \{ i64, i64 \} %226, 0\l  %228 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %225, i64 0) #2, !srcloc !4\l  %229 = extractvalue \{ i64, i64 \} %228, 0\l  %230 = icmp sgt i32 %0, 0\l  br i1 %230, label %231, label %432\l|{<s0>T|<s1>F}}"];
	Node0x5ab13e0:s0 -> Node0x5ab9070;
	Node0x5ab13e0:s1 -> Node0x5abe3e0;
	Node0x5ab9070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%231:\l231:                                              \l  %232 = lshr i64 %229, 32\l  %233 = xor i64 %232, %218\l  %234 = trunc i64 %233 to i32\l  %235 = xor i32 %234, -1879881855\l  %236 = insertelement \<4 x i32\> undef, i32 %235, i64 0\l  %237 = trunc i64 %229 to i32\l  %238 = insertelement \<4 x i32\> %236, i32 %237, i64 1\l  %239 = lshr i64 %227, 32\l  %240 = xor i64 %239, %215\l  %241 = trunc i64 %240 to i32\l  %242 = xor i32 %241, -1767562579\l  %243 = insertelement \<4 x i32\> %238, i32 %242, i64 2\l  %244 = trunc i64 %227 to i32\l  %245 = insertelement \<4 x i32\> %243, i32 %244, i64 3\l  %246 = insertelement \<4 x i32\> \<i32 0, i32 0, i32 poison, i32 0\>, i32 %121,\l... i64 2\l  br label %247\l}"];
	Node0x5ab9070 -> Node0x5abd690;
	Node0x5abd690 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%247:\l247:                                              \l  %248 = phi i32 [ %429, %247 ], [ 0, %231 ]\l  %249 = phi i32 [ %430, %247 ], [ 0, %231 ]\l  %250 = phi \<4 x i32\> [ %269, %247 ], [ %246, %231 ]\l  %251 = phi \<4 x i32\> [ %393, %247 ], [ %245, %231 ]\l  %252 = extractelement \<4 x i32\> %250, i64 0\l  %253 = add i32 %252, 1\l  %254 = insertelement \<4 x i32\> poison, i32 %253, i64 0\l  %255 = icmp eq i32 %253, 0\l  %256 = zext i1 %255 to i32\l  %257 = extractelement \<4 x i32\> %250, i64 1\l  %258 = add i32 %257, %256\l  %259 = insertelement \<4 x i32\> %254, i32 %258, i64 1\l  %260 = icmp eq i32 %258, 0\l  %261 = select i1 %260, i32 %256, i32 0\l  %262 = extractelement \<4 x i32\> %250, i64 2\l  %263 = add i32 %261, %262\l  %264 = insertelement \<4 x i32\> %259, i32 %263, i64 2\l  %265 = icmp eq i32 %263, 0\l  %266 = select i1 %265, i32 %261, i32 0\l  %267 = extractelement \<4 x i32\> %250, i64 3\l  %268 = add i32 %266, %267\l  %269 = insertelement \<4 x i32\> %264, i32 %268, i64 3\l  %270 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %253, i64 0) #2, !srcloc !4\l  %271 = extractvalue \{ i64, i64 \} %270, 0\l  %272 = lshr i64 %271, 32\l  %273 = trunc i64 %272 to i32\l  %274 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %263, i64 0) #2, !srcloc !4\l  %275 = extractvalue \{ i64, i64 \} %274, 0\l  %276 = lshr i64 %275, 32\l  %277 = trunc i64 %276 to i32\l  %278 = xor i32 %258, %277\l  %279 = xor i32 %268, %273\l  %280 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %278, i64 0) #2, !srcloc !4\l  %281 = extractvalue \{ i64, i64 \} %280, 0\l  %282 = lshr i64 %281, 32\l  %283 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %279, i64 0) #2, !srcloc !4\l  %284 = extractvalue \{ i64, i64 \} %283, 0\l  %285 = lshr i64 %284, 32\l  %286 = xor i64 %285, %275\l  %287 = trunc i64 %286 to i32\l  %288 = xor i32 %287, -1640531527\l  %289 = xor i64 %282, %271\l  %290 = trunc i64 %289 to i32\l  %291 = xor i32 %290, -1150833019\l  %292 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %288, i64 0) #2, !srcloc !4\l  %293 = extractvalue \{ i64, i64 \} %292, 0\l  %294 = lshr i64 %293, 32\l  %295 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %291, i64 0) #2, !srcloc !4\l  %296 = extractvalue \{ i64, i64 \} %295, 0\l  %297 = lshr i64 %296, 32\l  %298 = xor i64 %297, %284\l  %299 = trunc i64 %298 to i32\l  %300 = xor i32 %299, 1013904242\l  %301 = xor i64 %294, %281\l  %302 = trunc i64 %301 to i32\l  %303 = xor i32 %302, 1993301258\l  %304 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %300, i64 0) #2, !srcloc !4\l  %305 = extractvalue \{ i64, i64 \} %304, 0\l  %306 = lshr i64 %305, 32\l  %307 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %303, i64 0) #2, !srcloc !4\l  %308 = extractvalue \{ i64, i64 \} %307, 0\l  %309 = lshr i64 %308, 32\l  %310 = xor i64 %309, %296\l  %311 = trunc i64 %310 to i32\l  %312 = xor i32 %311, -626627285\l  %313 = xor i64 %306, %293\l  %314 = trunc i64 %313 to i32\l  %315 = xor i32 %314, 842468239\l  %316 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %312, i64 0) #2, !srcloc !4\l  %317 = extractvalue \{ i64, i64 \} %316, 0\l  %318 = lshr i64 %317, 32\l  %319 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %315, i64 0) #2, !srcloc !4\l  %320 = extractvalue \{ i64, i64 \} %319, 0\l  %321 = lshr i64 %320, 32\l  %322 = xor i64 %321, %308\l  %323 = trunc i64 %322 to i32\l  %324 = xor i32 %323, 2027808484\l  %325 = xor i64 %318, %305\l  %326 = trunc i64 %325 to i32\l  %327 = xor i32 %326, -308364780\l  %328 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %324, i64 0) #2, !srcloc !4\l  %329 = extractvalue \{ i64, i64 \} %328, 0\l  %330 = lshr i64 %329, 32\l  %331 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %327, i64 0) #2, !srcloc !4\l  %332 = extractvalue \{ i64, i64 \} %331, 0\l  %333 = lshr i64 %332, 32\l  %334 = xor i64 %333, %320\l  %335 = trunc i64 %334 to i32\l  %336 = xor i32 %335, 387276957\l  %337 = xor i64 %330, %317\l  %338 = trunc i64 %337 to i32\l  %339 = xor i32 %338, -1459197799\l  %340 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %336, i64 0) #2, !srcloc !4\l  %341 = extractvalue \{ i64, i64 \} %340, 0\l  %342 = lshr i64 %341, 32\l  %343 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %339, i64 0) #2, !srcloc !4\l  %344 = extractvalue \{ i64, i64 \} %343, 0\l  %345 = lshr i64 %344, 32\l  %346 = xor i64 %345, %332\l  %347 = trunc i64 %346 to i32\l  %348 = xor i32 %347, -1253254570\l  %349 = xor i64 %342, %329\l  %350 = trunc i64 %349 to i32\l  %351 = xor i32 %350, 1684936478\l  %352 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %348, i64 0) #2, !srcloc !4\l  %353 = extractvalue \{ i64, i64 \} %352, 0\l  %354 = lshr i64 %353, 32\l  %355 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %351, i64 0) #2, !srcloc !4\l  %356 = extractvalue \{ i64, i64 \} %355, 0\l  %357 = lshr i64 %356, 32\l  %358 = xor i64 %357, %344\l  %359 = trunc i64 %358 to i32\l  %360 = xor i32 %359, 1401181199\l  %361 = xor i64 %354, %341\l  %362 = trunc i64 %361 to i32\l  %363 = xor i32 %362, 534103459\l  %364 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %360, i64 0) #2, !srcloc !4\l  %365 = extractvalue \{ i64, i64 \} %364, 0\l  %366 = lshr i64 %365, 32\l  %367 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %363, i64 0) #2, !srcloc !4\l  %368 = extractvalue \{ i64, i64 \} %367, 0\l  %369 = lshr i64 %368, 32\l  %370 = xor i64 %369, %356\l  %371 = trunc i64 %370 to i32\l  %372 = xor i32 %371, -239350328\l  %373 = xor i64 %366, %353\l  %374 = trunc i64 %373 to i32\l  %375 = xor i32 %374, -616729560\l  %376 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -766435501, i32 %372, i64 0) #2, !srcloc !4\l  %377 = extractvalue \{ i64, i64 \} %376, 0\l  %378 = lshr i64 %377, 32\l  %379 = trunc i64 %377 to i32\l  %380 = tail call \{ i64, i64 \} asm sideeffect \"v_mad_u64_u32 $0, $1, $2, $3,\l... $4\", \"=v,=s,r,v,v\"(i32 -845247145, i32 %375, i64 0) #2, !srcloc !4\l  %381 = extractvalue \{ i64, i64 \} %380, 0\l  %382 = lshr i64 %381, 32\l  %383 = trunc i64 %381 to i32\l  %384 = xor i64 %382, %368\l  %385 = trunc i64 %384 to i32\l  %386 = xor i32 %385, -1879881855\l  %387 = xor i64 %378, %365\l  %388 = trunc i64 %387 to i32\l  %389 = xor i32 %388, -1767562579\l  %390 = insertelement \<4 x i32\> undef, i32 %386, i64 0\l  %391 = insertelement \<4 x i32\> %390, i32 %383, i64 1\l  %392 = insertelement \<4 x i32\> %391, i32 %389, i64 2\l  %393 = insertelement \<4 x i32\> %392, i32 %379, i64 3\l  %394 = extractelement \<4 x i32\> %251, i64 0\l  %395 = uitofp i32 %394 to float\l  %396 = fmul contract float %395, 0x3DF0000000000000\l  %397 = fadd contract float %396, 0x3DF0000000000000\l  %398 = extractelement \<4 x i32\> %251, i64 1\l  %399 = uitofp i32 %398 to float\l  %400 = fmul contract float %399, 0x3DF0000000000000\l  %401 = fadd contract float %400, 0x3DF0000000000000\l  %402 = extractelement \<4 x i32\> %251, i64 2\l  %403 = uitofp i32 %402 to float\l  %404 = fmul contract float %403, 0x3DF0000000000000\l  %405 = fadd contract float %404, 0x3DF0000000000000\l  %406 = extractelement \<4 x i32\> %251, i64 3\l  %407 = uitofp i32 %406 to float\l  %408 = fmul contract float %407, 0x3DF0000000000000\l  %409 = fadd contract float %408, 0x3DF0000000000000\l  %410 = fmul contract float %397, 2.000000e+00\l  %411 = fadd contract float %410, -1.000000e+00\l  %412 = fmul contract float %401, 2.000000e+00\l  %413 = fadd contract float %412, -1.000000e+00\l  %414 = fmul contract float %405, 2.000000e+00\l  %415 = fadd contract float %414, -1.000000e+00\l  %416 = fmul contract float %409, 2.000000e+00\l  %417 = fadd contract float %416, -1.000000e+00\l  %418 = fmul contract float %411, %411\l  %419 = fmul contract float %413, %413\l  %420 = fadd contract float %418, %419\l  %421 = fcmp contract olt float %420, 1.000000e+00\l  %422 = zext i1 %421 to i32\l  %423 = add i32 %248, %422\l  %424 = fmul contract float %415, %415\l  %425 = fmul contract float %417, %417\l  %426 = fadd contract float %424, %425\l  %427 = fcmp contract olt float %426, 1.000000e+00\l  %428 = zext i1 %427 to i32\l  %429 = add i32 %423, %428\l  %430 = add nuw nsw i32 %249, 2\l  %431 = icmp slt i32 %430, %0\l  br i1 %431, label %247, label %432, !llvm.loop !8\l|{<s0>T|<s1>F}}"];
	Node0x5abd690:s0 -> Node0x5abd690;
	Node0x5abd690:s1 -> Node0x5abe3e0;
	Node0x5abe3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%432:\l432:                                              \l  %433 = phi i32 [ 0, %3 ], [ %429, %247 ]\l  %434 = sext i32 %120 to i64\l  %435 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %434\l  store i32 %433, i32 addrspace(1)* %435, align 4, !tbaa !10\l  ret void\l}"];
}
