digraph "CFG for 'vec_cosf' function" {
	label="CFG for 'vec_cosf' function";

	Node0x5eafc00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = add i32 %11, %4\l  %13 = sext i32 %12 to i64\l  %14 = icmp ult i64 %13, %0\l  br i1 %14, label %15, label %157\l|{<s0>T|<s1>F}}"];
	Node0x5eafc00:s0 -> Node0x5eb09a0;
	Node0x5eafc00:s1 -> Node0x5eb1c10;
	Node0x5eb09a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%15:\l15:                                               \l  %16 = getelementptr inbounds float, float addrspace(1)* %2, i64 %13\l  %17 = load float, float addrspace(1)* %16, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %18 = tail call float @llvm.fabs.f32(float %17)\l  %19 = fcmp olt float %18, 1.310720e+05\l  br i1 %19, label %20, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5eb09a0:s0 -> Node0x5eb3320;
	Node0x5eb09a0:s1 -> Node0x5eb33b0;
	Node0x5eb3320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%20:\l20:                                               \l  %21 = fmul float %18, 0x3FE45F3060000000\l  %22 = tail call float @llvm.rint.f32(float %21)\l  %23 = tail call float @llvm.fma.f32(float %22, float 0xBFF921FB40000000,\l... float %18)\l  %24 = tail call float @llvm.fma.f32(float %22, float 0xBE74442D00000000,\l... float %23)\l  %25 = tail call float @llvm.fma.f32(float %22, float 0xBCF8469880000000,\l... float %24)\l  %26 = fptosi float %22 to i32\l  br label %133\l}"];
	Node0x5eb3320 -> Node0x5eb3df0;
	Node0x5eb33b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%27:\l27:                                               \l  %28 = bitcast float %18 to i32\l  %29 = lshr i32 %28, 23\l  %30 = and i32 %28, 8388607\l  %31 = or i32 %30, 8388608\l  %32 = zext i32 %31 to i64\l  %33 = mul nuw nsw i64 %32, 4266746795\l  %34 = trunc i64 %33 to i32\l  %35 = lshr i64 %33, 32\l  %36 = mul nuw nsw i64 %32, 1011060801\l  %37 = add nuw nsw i64 %35, %36\l  %38 = trunc i64 %37 to i32\l  %39 = lshr i64 %37, 32\l  %40 = mul nuw nsw i64 %32, 3680671129\l  %41 = add nuw nsw i64 %39, %40\l  %42 = trunc i64 %41 to i32\l  %43 = lshr i64 %41, 32\l  %44 = mul nuw nsw i64 %32, 4113882560\l  %45 = add nuw nsw i64 %43, %44\l  %46 = trunc i64 %45 to i32\l  %47 = lshr i64 %45, 32\l  %48 = mul nuw nsw i64 %32, 4230436817\l  %49 = add nuw nsw i64 %47, %48\l  %50 = trunc i64 %49 to i32\l  %51 = lshr i64 %49, 32\l  %52 = mul nuw nsw i64 %32, 1313084713\l  %53 = add nuw nsw i64 %51, %52\l  %54 = trunc i64 %53 to i32\l  %55 = lshr i64 %53, 32\l  %56 = mul nuw nsw i64 %32, 2734261102\l  %57 = add nuw nsw i64 %55, %56\l  %58 = trunc i64 %57 to i32\l  %59 = lshr i64 %57, 32\l  %60 = trunc i64 %59 to i32\l  %61 = add nsw i32 %29, -120\l  %62 = icmp ugt i32 %61, 63\l  %63 = select i1 %62, i32 %54, i32 %60\l  %64 = select i1 %62, i32 %50, i32 %58\l  %65 = select i1 %62, i32 %46, i32 %54\l  %66 = select i1 %62, i32 %42, i32 %50\l  %67 = select i1 %62, i32 %38, i32 %46\l  %68 = select i1 %62, i32 %34, i32 %42\l  %69 = select i1 %62, i32 -64, i32 0\l  %70 = add nsw i32 %69, %61\l  %71 = icmp ugt i32 %70, 31\l  %72 = select i1 %71, i32 %64, i32 %63\l  %73 = select i1 %71, i32 %65, i32 %64\l  %74 = select i1 %71, i32 %66, i32 %65\l  %75 = select i1 %71, i32 %67, i32 %66\l  %76 = select i1 %71, i32 %68, i32 %67\l  %77 = select i1 %71, i32 -32, i32 0\l  %78 = add nsw i32 %77, %70\l  %79 = icmp ugt i32 %78, 31\l  %80 = select i1 %79, i32 %73, i32 %72\l  %81 = select i1 %79, i32 %74, i32 %73\l  %82 = select i1 %79, i32 %75, i32 %74\l  %83 = select i1 %79, i32 %76, i32 %75\l  %84 = select i1 %79, i32 -32, i32 0\l  %85 = add nsw i32 %84, %78\l  %86 = icmp eq i32 %85, 0\l  %87 = sub nsw i32 32, %85\l  %88 = tail call i32 @llvm.fshr.i32(i32 %80, i32 %81, i32 %87)\l  %89 = tail call i32 @llvm.fshr.i32(i32 %81, i32 %82, i32 %87)\l  %90 = tail call i32 @llvm.fshr.i32(i32 %82, i32 %83, i32 %87)\l  %91 = select i1 %86, i32 %80, i32 %88\l  %92 = select i1 %86, i32 %81, i32 %89\l  %93 = select i1 %86, i32 %82, i32 %90\l  %94 = lshr i32 %91, 29\l  %95 = tail call i32 @llvm.fshl.i32(i32 %91, i32 %92, i32 2)\l  %96 = tail call i32 @llvm.fshl.i32(i32 %92, i32 %93, i32 2)\l  %97 = tail call i32 @llvm.fshl.i32(i32 %93, i32 %83, i32 2)\l  %98 = and i32 %94, 1\l  %99 = sub nsw i32 0, %98\l  %100 = shl i32 %94, 31\l  %101 = xor i32 %95, %99\l  %102 = xor i32 %96, %99\l  %103 = xor i32 %97, %99\l  %104 = tail call i32 @llvm.ctlz.i32(i32 %101, i1 false), !range !11\l  %105 = sub nsw i32 31, %104\l  %106 = tail call i32 @llvm.fshr.i32(i32 %101, i32 %102, i32 %105)\l  %107 = tail call i32 @llvm.fshr.i32(i32 %102, i32 %103, i32 %105)\l  %108 = shl nuw nsw i32 %104, 23\l  %109 = sub nuw nsw i32 1056964608, %108\l  %110 = lshr i32 %106, 9\l  %111 = or i32 %110, %109\l  %112 = or i32 %111, %100\l  %113 = bitcast i32 %112 to float\l  %114 = tail call i32 @llvm.fshl.i32(i32 %106, i32 %107, i32 23)\l  %115 = tail call i32 @llvm.ctlz.i32(i32 %114, i1 false), !range !11\l  %116 = fmul float %113, 0x3FF921FB40000000\l  %117 = add nuw nsw i32 %115, %104\l  %118 = shl nuw nsw i32 %117, 23\l  %119 = sub nuw nsw i32 855638016, %118\l  %120 = sub nsw i32 31, %115\l  %121 = tail call i32 @llvm.fshr.i32(i32 %114, i32 %107, i32 %120)\l  %122 = lshr i32 %121, 9\l  %123 = or i32 %119, %122\l  %124 = or i32 %123, %100\l  %125 = bitcast i32 %124 to float\l  %126 = fneg float %116\l  %127 = tail call float @llvm.fma.f32(float %113, float 0x3FF921FB40000000,\l... float %126)\l  %128 = tail call float @llvm.fma.f32(float %113, float 0x3E74442D00000000,\l... float %127)\l  %129 = tail call float @llvm.fma.f32(float %125, float 0x3FF921FB40000000,\l... float %128)\l  %130 = fadd float %116, %129\l  %131 = lshr i32 %91, 30\l  %132 = add nuw nsw i32 %98, %131\l  br label %133\l}"];
	Node0x5eb33b0 -> Node0x5eb3df0;
	Node0x5eb3df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%133:\l133:                                              \l  %134 = phi float [ %25, %20 ], [ %130, %27 ]\l  %135 = phi i32 [ %26, %20 ], [ %132, %27 ]\l  %136 = fmul float %134, %134\l  %137 = tail call float @llvm.fmuladd.f32(float %136, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %138 = tail call float @llvm.fmuladd.f32(float %136, float %137, float\l... 0xBFC55553A0000000)\l  %139 = fmul float %136, %138\l  %140 = tail call float @llvm.fmuladd.f32(float %134, float %139, float %134)\l  %141 = tail call float @llvm.fmuladd.f32(float %136, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %142 = tail call float @llvm.fmuladd.f32(float %136, float %141, float\l... 0x3FA5557EE0000000)\l  %143 = tail call float @llvm.fmuladd.f32(float %136, float %142, float\l... 0xBFE0000080000000)\l  %144 = tail call float @llvm.fmuladd.f32(float %136, float %143, float\l... 1.000000e+00)\l  %145 = fneg float %140\l  %146 = and i32 %135, 1\l  %147 = icmp eq i32 %146, 0\l  %148 = select i1 %147, float %144, float %145\l  %149 = bitcast float %148 to i32\l  %150 = shl i32 %135, 30\l  %151 = and i32 %150, -2147483648\l  %152 = xor i32 %151, %149\l  %153 = bitcast i32 %152 to float\l  %154 = tail call i1 @llvm.amdgcn.class.f32(float %18, i32 504)\l  %155 = select i1 %154, float %153, float 0x7FF8000000000000\l  %156 = getelementptr inbounds float, float addrspace(1)* %1, i64 %13\l  store float %155, float addrspace(1)* %156, align 4, !tbaa !7\l  br label %157\l}"];
	Node0x5eb3df0 -> Node0x5eb1c10;
	Node0x5eb1c10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%157:\l157:                                              \l  ret void\l}"];
}
