digraph "CFG for 'vec_j0f' function" {
	label="CFG for 'vec_j0f' function";

	Node0x6434250 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !5, !invariant.load !6\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = add i32 %11, %4\l  %13 = sext i32 %12 to i64\l  %14 = icmp ult i64 %13, %0\l  br i1 %14, label %15, label %235\l|{<s0>T|<s1>F}}"];
	Node0x6434250:s0 -> Node0x6434ff0;
	Node0x6434250:s1 -> Node0x6436260;
	Node0x6434ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%15:\l15:                                               \l  %16 = getelementptr inbounds float, float addrspace(1)* %2, i64 %13\l  %17 = load float, float addrspace(1)* %16, align 4, !tbaa !7,\l... !amdgpu.noclobber !6\l  %18 = tail call float @llvm.fabs.f32(float %17)\l  %19 = fcmp ugt float %18, 0x4029280000000000\l  br i1 %19, label %75, label %20\l|{<s0>T|<s1>F}}"];
	Node0x6434ff0:s0 -> Node0x6436f60;
	Node0x6434ff0:s1 -> Node0x6436ff0;
	Node0x6436ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%20:\l20:                                               \l  %21 = fcmp ugt float %18, 0x4019100000000000\l  br i1 %21, label %33, label %22\l|{<s0>T|<s1>F}}"];
	Node0x6436ff0:s0 -> Node0x64371c0;
	Node0x6436ff0:s1 -> Node0x6437250;
	Node0x6437250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%22:\l22:                                               \l  %23 = fcmp ugt float %18, 1.656250e+00\l  br i1 %23, label %24, label %44\l|{<s0>T|<s1>F}}"];
	Node0x6437250:s0 -> Node0x6437420;
	Node0x6437250:s1 -> Node0x64374b0;
	Node0x6437420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%24:\l24:                                               \l  %25 = fcmp ugt float %18, 3.125000e+00\l  %26 = fcmp ugt float %18, 4.687500e+00\l  %27 = select i1 %26, float 0xBE734F46E0000000, float 0xBE74A121E0000000\l  %28 = select i1 %26, float 0x4016148F60000000, float 0x400EA75580000000\l  %29 = select i1 %26, float addrspace(4)* getelementptr inbounds ([72 x\l... float], [72 x float] addrspace(4)* @__ocmltbl_M32_J0, i64 0, i64 27), float\l... addrspace(4)* getelementptr inbounds ([72 x float], [72 x float]\l... addrspace(4)* @__ocmltbl_M32_J0, i64 0, i64 18)\l  %30 = select i1 %25, float %27, float 0x3E7D2E3680000000\l  %31 = select i1 %25, float %28, float 0x40033D1520000000\l  %32 = select i1 %25, float addrspace(4)* %29, float addrspace(4)*\l... getelementptr inbounds ([72 x float], [72 x float] addrspace(4)*\l... @__ocmltbl_M32_J0, i64 0, i64 9)\l  br label %44\l}"];
	Node0x6437420 -> Node0x64374b0;
	Node0x64371c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%33:\l33:                                               \l  %34 = fcmp ugt float %18, 7.843750e+00\l  br i1 %34, label %35, label %44\l|{<s0>T|<s1>F}}"];
	Node0x64371c0:s0 -> Node0x6438400;
	Node0x64371c0:s1 -> Node0x64374b0;
	Node0x6438400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{%35:\l35:                                               \l  %36 = fcmp ugt float %18, 0x4022D80000000000\l  %37 = fcmp ugt float %18, 0x4025F80000000000\l  %38 = select i1 %37, float 0x3E504E56C0000000, float 0xBE9E8407A0000000\l  %39 = select i1 %37, float 0x4027954400000000, float 0x402458D0E0000000\l  %40 = select i1 %37, float addrspace(4)* getelementptr inbounds ([72 x\l... float], [72 x float] addrspace(4)* @__ocmltbl_M32_J0, i64 0, i64 63), float\l... addrspace(4)* getelementptr inbounds ([72 x float], [72 x float]\l... addrspace(4)* @__ocmltbl_M32_J0, i64 0, i64 54)\l  %41 = select i1 %36, float %38, float 0x3E9999BDA0000000\l  %42 = select i1 %36, float %39, float 0x40214EB560000000\l  %43 = select i1 %36, float addrspace(4)* %40, float addrspace(4)*\l... getelementptr inbounds ([72 x float], [72 x float] addrspace(4)*\l... @__ocmltbl_M32_J0, i64 0, i64 45)\l  br label %44\l}"];
	Node0x6438400 -> Node0x64374b0;
	Node0x64374b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%44:\l44:                                               \l  %45 = phi float [ 0.000000e+00, %22 ], [ 0xBE88971B60000000, %33 ], [ %30,\l... %24 ], [ %41, %35 ]\l  %46 = phi float [ 0.000000e+00, %22 ], [ 0x401C0FF600000000, %33 ], [ %31,\l... %24 ], [ %42, %35 ]\l  %47 = phi float addrspace(4)* [ getelementptr inbounds ([72 x float], [72 x\l... float] addrspace(4)* @__ocmltbl_M32_J0, i64 0, i64 0), %22 ], [ getelementptr\l... inbounds ([72 x float], [72 x float] addrspace(4)* @__ocmltbl_M32_J0, i64 0,\l... i64 36), %33 ], [ %32, %24 ], [ %43, %35 ]\l  %48 = fsub float %18, %46\l  %49 = fsub float %48, %45\l  %50 = getelementptr inbounds float, float addrspace(4)* %47, i64 8\l  %51 = load float, float addrspace(4)* %50, align 4, !tbaa !11\l  %52 = getelementptr inbounds float, float addrspace(4)* %47, i64 7\l  %53 = load float, float addrspace(4)* %52, align 4, !tbaa !11\l  %54 = tail call float @llvm.fmuladd.f32(float %49, float %51, float %53)\l  %55 = getelementptr inbounds float, float addrspace(4)* %47, i64 6\l  %56 = load float, float addrspace(4)* %55, align 4, !tbaa !11\l  %57 = tail call float @llvm.fmuladd.f32(float %49, float %54, float %56)\l  %58 = getelementptr inbounds float, float addrspace(4)* %47, i64 5\l  %59 = load float, float addrspace(4)* %58, align 4, !tbaa !11\l  %60 = tail call float @llvm.fmuladd.f32(float %49, float %57, float %59)\l  %61 = getelementptr inbounds float, float addrspace(4)* %47, i64 4\l  %62 = load float, float addrspace(4)* %61, align 4, !tbaa !11\l  %63 = tail call float @llvm.fmuladd.f32(float %49, float %60, float %62)\l  %64 = getelementptr inbounds float, float addrspace(4)* %47, i64 3\l  %65 = load float, float addrspace(4)* %64, align 4, !tbaa !11\l  %66 = tail call float @llvm.fmuladd.f32(float %49, float %63, float %65)\l  %67 = getelementptr inbounds float, float addrspace(4)* %47, i64 2\l  %68 = load float, float addrspace(4)* %67, align 4, !tbaa !11\l  %69 = tail call float @llvm.fmuladd.f32(float %49, float %66, float %68)\l  %70 = getelementptr inbounds float, float addrspace(4)* %47, i64 1\l  %71 = load float, float addrspace(4)* %70, align 4, !tbaa !11\l  %72 = tail call float @llvm.fmuladd.f32(float %49, float %69, float %71)\l  %73 = load float, float addrspace(4)* %47, align 4, !tbaa !11\l  %74 = tail call float @llvm.fmuladd.f32(float %49, float %72, float %73)\l  br label %232\l}"];
	Node0x64374b0 -> Node0x643b360;
	Node0x6436f60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%75:\l75:                                               \l  %76 = fdiv float 1.000000e+00, %18, !fpmath !15\l  %77 = fmul float %76, %76\l  %78 = tail call float @llvm.fmuladd.f32(float %77, float 0xBFF5EC5E60000000,\l... float 0x3FCAAFB080000000)\l  %79 = tail call float @llvm.fmuladd.f32(float %77, float %78, float\l... 0xBFB0AA9260000000)\l  %80 = tail call float @llvm.fmuladd.f32(float %77, float %79, float\l... 1.250000e-01)\l  %81 = fmul float %76, %80\l  %82 = tail call float @llvm.amdgcn.rsq.f32(float %18)\l  %83 = fmul float %82, 0x3FE9884540000000\l  %84 = tail call float @llvm.fmuladd.f32(float %77, float 0x3FB92AECC0000000,\l... float 0xBFAFFE4720000000)\l  %85 = tail call float @llvm.fmuladd.f32(float %77, float %84, float\l... 1.000000e+00)\l  %86 = fmul float %83, %85\l  %87 = fcmp olt float %18, 1.310720e+05\l  br i1 %87, label %88, label %95\l|{<s0>T|<s1>F}}"];
	Node0x6436f60:s0 -> Node0x6432370;
	Node0x6436f60:s1 -> Node0x6432400;
	Node0x6432370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%88:\l88:                                               \l  %89 = fmul float %18, 0x3FE45F3060000000\l  %90 = tail call float @llvm.rint.f32(float %89)\l  %91 = tail call float @llvm.fma.f32(float %90, float 0xBFF921FB40000000,\l... float %18)\l  %92 = tail call float @llvm.fma.f32(float %90, float 0xBE74442D00000000,\l... float %91)\l  %93 = tail call float @llvm.fma.f32(float %90, float 0xBCF8469880000000,\l... float %92)\l  %94 = fptosi float %90 to i32\l  br label %201\l}"];
	Node0x6432370 -> Node0x6432de0;
	Node0x6432400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%95:\l95:                                               \l  %96 = bitcast float %18 to i32\l  %97 = lshr i32 %96, 23\l  %98 = and i32 %96, 8388607\l  %99 = or i32 %98, 8388608\l  %100 = zext i32 %99 to i64\l  %101 = mul nuw nsw i64 %100, 4266746795\l  %102 = trunc i64 %101 to i32\l  %103 = lshr i64 %101, 32\l  %104 = mul nuw nsw i64 %100, 1011060801\l  %105 = add nuw nsw i64 %103, %104\l  %106 = trunc i64 %105 to i32\l  %107 = lshr i64 %105, 32\l  %108 = mul nuw nsw i64 %100, 3680671129\l  %109 = add nuw nsw i64 %107, %108\l  %110 = trunc i64 %109 to i32\l  %111 = lshr i64 %109, 32\l  %112 = mul nuw nsw i64 %100, 4113882560\l  %113 = add nuw nsw i64 %111, %112\l  %114 = trunc i64 %113 to i32\l  %115 = lshr i64 %113, 32\l  %116 = mul nuw nsw i64 %100, 4230436817\l  %117 = add nuw nsw i64 %115, %116\l  %118 = trunc i64 %117 to i32\l  %119 = lshr i64 %117, 32\l  %120 = mul nuw nsw i64 %100, 1313084713\l  %121 = add nuw nsw i64 %119, %120\l  %122 = trunc i64 %121 to i32\l  %123 = lshr i64 %121, 32\l  %124 = mul nuw nsw i64 %100, 2734261102\l  %125 = add nuw nsw i64 %123, %124\l  %126 = trunc i64 %125 to i32\l  %127 = lshr i64 %125, 32\l  %128 = trunc i64 %127 to i32\l  %129 = add nsw i32 %97, -120\l  %130 = icmp ugt i32 %129, 63\l  %131 = select i1 %130, i32 %122, i32 %128\l  %132 = select i1 %130, i32 %118, i32 %126\l  %133 = select i1 %130, i32 %114, i32 %122\l  %134 = select i1 %130, i32 %110, i32 %118\l  %135 = select i1 %130, i32 %106, i32 %114\l  %136 = select i1 %130, i32 %102, i32 %110\l  %137 = select i1 %130, i32 -64, i32 0\l  %138 = add nsw i32 %137, %129\l  %139 = icmp ugt i32 %138, 31\l  %140 = select i1 %139, i32 %132, i32 %131\l  %141 = select i1 %139, i32 %133, i32 %132\l  %142 = select i1 %139, i32 %134, i32 %133\l  %143 = select i1 %139, i32 %135, i32 %134\l  %144 = select i1 %139, i32 %136, i32 %135\l  %145 = select i1 %139, i32 -32, i32 0\l  %146 = add nsw i32 %145, %138\l  %147 = icmp ugt i32 %146, 31\l  %148 = select i1 %147, i32 %141, i32 %140\l  %149 = select i1 %147, i32 %142, i32 %141\l  %150 = select i1 %147, i32 %143, i32 %142\l  %151 = select i1 %147, i32 %144, i32 %143\l  %152 = select i1 %147, i32 -32, i32 0\l  %153 = add nsw i32 %152, %146\l  %154 = icmp eq i32 %153, 0\l  %155 = sub nsw i32 32, %153\l  %156 = tail call i32 @llvm.fshr.i32(i32 %148, i32 %149, i32 %155)\l  %157 = tail call i32 @llvm.fshr.i32(i32 %149, i32 %150, i32 %155)\l  %158 = tail call i32 @llvm.fshr.i32(i32 %150, i32 %151, i32 %155)\l  %159 = select i1 %154, i32 %148, i32 %156\l  %160 = select i1 %154, i32 %149, i32 %157\l  %161 = select i1 %154, i32 %150, i32 %158\l  %162 = lshr i32 %159, 29\l  %163 = tail call i32 @llvm.fshl.i32(i32 %159, i32 %160, i32 2)\l  %164 = tail call i32 @llvm.fshl.i32(i32 %160, i32 %161, i32 2)\l  %165 = tail call i32 @llvm.fshl.i32(i32 %161, i32 %151, i32 2)\l  %166 = and i32 %162, 1\l  %167 = sub nsw i32 0, %166\l  %168 = shl i32 %162, 31\l  %169 = xor i32 %163, %167\l  %170 = xor i32 %164, %167\l  %171 = xor i32 %165, %167\l  %172 = tail call i32 @llvm.ctlz.i32(i32 %169, i1 false), !range !16\l  %173 = sub nsw i32 31, %172\l  %174 = tail call i32 @llvm.fshr.i32(i32 %169, i32 %170, i32 %173)\l  %175 = tail call i32 @llvm.fshr.i32(i32 %170, i32 %171, i32 %173)\l  %176 = shl nuw nsw i32 %172, 23\l  %177 = sub nuw nsw i32 1056964608, %176\l  %178 = lshr i32 %174, 9\l  %179 = or i32 %178, %177\l  %180 = or i32 %179, %168\l  %181 = bitcast i32 %180 to float\l  %182 = tail call i32 @llvm.fshl.i32(i32 %174, i32 %175, i32 23)\l  %183 = tail call i32 @llvm.ctlz.i32(i32 %182, i1 false), !range !16\l  %184 = fmul float %181, 0x3FF921FB40000000\l  %185 = add nuw nsw i32 %183, %172\l  %186 = shl nuw nsw i32 %185, 23\l  %187 = sub nuw nsw i32 855638016, %186\l  %188 = sub nsw i32 31, %183\l  %189 = tail call i32 @llvm.fshr.i32(i32 %182, i32 %175, i32 %188)\l  %190 = lshr i32 %189, 9\l  %191 = or i32 %187, %190\l  %192 = or i32 %191, %168\l  %193 = bitcast i32 %192 to float\l  %194 = fneg float %184\l  %195 = tail call float @llvm.fma.f32(float %181, float 0x3FF921FB40000000,\l... float %194)\l  %196 = tail call float @llvm.fma.f32(float %181, float 0x3E74442D00000000,\l... float %195)\l  %197 = tail call float @llvm.fma.f32(float %193, float 0x3FF921FB40000000,\l... float %196)\l  %198 = fadd float %184, %197\l  %199 = lshr i32 %159, 30\l  %200 = add nuw nsw i32 %166, %199\l  br label %201\l}"];
	Node0x6432400 -> Node0x6432de0;
	Node0x6432de0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%201:\l201:                                              \l  %202 = phi float [ %93, %88 ], [ %198, %95 ]\l  %203 = phi i32 [ %94, %88 ], [ %200, %95 ]\l  %204 = and i32 %203, 3\l  %205 = fcmp olt float %202, %81\l  %206 = sext i1 %205 to i32\l  %207 = add nsw i32 %204, %206\l  %208 = fsub float %202, %81\l  %209 = select i1 %205, float 0x3FE921FB60000000, float 0xBFE921FB60000000\l  %210 = fadd float %208, %209\l  %211 = fmul float %210, %210\l  %212 = tail call float @llvm.fmuladd.f32(float %211, float\l... 0xBF29833040000000, float 0x3F81103880000000)\l  %213 = tail call float @llvm.fmuladd.f32(float %211, float %212, float\l... 0xBFC55553A0000000)\l  %214 = fmul float %211, %213\l  %215 = tail call float @llvm.fmuladd.f32(float %210, float %214, float %210)\l  %216 = tail call float @llvm.fmuladd.f32(float %211, float\l... 0x3EFAEA6680000000, float 0xBF56C9E760000000)\l  %217 = tail call float @llvm.fmuladd.f32(float %211, float %216, float\l... 0x3FA5557EE0000000)\l  %218 = tail call float @llvm.fmuladd.f32(float %211, float %217, float\l... 0xBFE0000080000000)\l  %219 = tail call float @llvm.fmuladd.f32(float %211, float %218, float\l... 1.000000e+00)\l  %220 = fneg float %215\l  %221 = and i32 %207, 1\l  %222 = icmp eq i32 %221, 0\l  %223 = select i1 %222, float %219, float %220\l  %224 = bitcast float %223 to i32\l  %225 = shl i32 %207, 30\l  %226 = and i32 %225, -2147483648\l  %227 = xor i32 %226, %224\l  %228 = bitcast i32 %227 to float\l  %229 = fmul float %86, %228\l  %230 = tail call i1 @llvm.amdgcn.class.f32(float %18, i32 512)\l  %231 = select i1 %230, float 0.000000e+00, float %229\l  br label %232\l}"];
	Node0x6432de0 -> Node0x643b360;
	Node0x643b360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%232:\l232:                                              \l  %233 = phi float [ %74, %44 ], [ %231, %201 ]\l  %234 = getelementptr inbounds float, float addrspace(1)* %1, i64 %13\l  store float %233, float addrspace(1)* %234, align 4, !tbaa !7\l  br label %235\l}"];
	Node0x643b360 -> Node0x6436260;
	Node0x6436260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%235:\l235:                                              \l  ret void\l}"];
}
