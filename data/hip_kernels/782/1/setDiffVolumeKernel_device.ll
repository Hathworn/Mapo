; ModuleID = '../data/hip_kernels/782/1/main.cu'
source_filename = "../data/hip_kernels/782/1/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

@_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section = internal unnamed_addr addrspace(3) global [400 x float] undef, align 16
@_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section = internal unnamed_addr addrspace(3) global [400 x float] undef, align 16

; Function Attrs: convergent mustprogress norecurse nounwind
define protected amdgpu_kernel void @_Z19setDiffVolumeKernelPfPhS0_jj(float addrspace(1)* nocapture writeonly %0, i8 addrspace(1)* nocapture readonly %1, i8 addrspace(1)* nocapture readonly %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4
  %7 = trunc i32 %6 to i16
  %8 = urem i16 %7, 10
  %9 = zext i16 %8 to i32
  %10 = freeze i16 %7
  %11 = udiv i16 %10, 100
  %12 = zext i16 %11 to i32
  %13 = mul i16 %11, 100
  %14 = sub i16 %10, %13
  %15 = trunc i16 %14 to i8
  %16 = udiv i8 %15, 10
  %17 = zext i8 %16 to i32
  %18 = freeze i32 %3
  %19 = udiv i32 %18, 10
  %20 = mul i32 %19, 10
  %21 = sub i32 %18, %20
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = add nuw nsw i32 %19, %23
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %26 = urem i32 %25, %24
  %27 = mul i32 %24, %24
  %28 = freeze i32 %25
  %29 = freeze i32 %27
  %30 = udiv i32 %28, %29
  %31 = mul i32 %30, %29
  %32 = sub i32 %28, %31
  %33 = udiv i32 %32, %24
  %34 = mul i32 %33, 10
  %35 = add i32 %34, %17
  %36 = mul i32 %30, 10
  %37 = add i32 %36, %12
  %38 = mul nuw i32 %26, 10
  %39 = add i32 %38, %9
  %40 = icmp eq i16 %8, 0
  %41 = icmp ult i32 %35, %3
  %42 = select i1 %40, i1 %41, i1 false
  %43 = icmp ult i32 %37, %4
  %44 = select i1 %42, i1 %43, i1 false
  br i1 %44, label %45, label %78

45:                                               ; preds = %5
  %46 = mul i32 %37, %3
  %47 = add i32 %35, %46
  %48 = shl i32 %47, 2
  %49 = mul nuw nsw i32 %12, 10
  %50 = add nuw nsw i32 %49, %17
  %51 = shl nuw nsw i32 %50, 2
  %52 = zext i32 %48 to i64
  %53 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %52
  %54 = load i8, i8 addrspace(1)* %53, align 1, !tbaa !5, !amdgpu.noclobber !8
  %55 = uitofp i8 %54 to float
  %56 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %51
  store float %55, float addrspace(3)* %56, align 16, !tbaa !9
  %57 = add nuw nsw i32 %48, 1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %58
  %60 = load i8, i8 addrspace(1)* %59, align 1, !tbaa !5, !amdgpu.noclobber !8
  %61 = uitofp i8 %60 to float
  %62 = add nuw nsw i32 %51, 1
  %63 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %62
  store float %61, float addrspace(3)* %63, align 4, !tbaa !9
  %64 = add nuw nsw i32 %48, 2
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %65
  %67 = load i8, i8 addrspace(1)* %66, align 1, !tbaa !5, !amdgpu.noclobber !8
  %68 = uitofp i8 %67 to float
  %69 = add nuw nsw i32 %51, 2
  %70 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %69
  store float %68, float addrspace(3)* %70, align 8, !tbaa !9
  %71 = add nuw nsw i32 %48, 3
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %72
  %74 = load i8, i8 addrspace(1)* %73, align 1, !tbaa !5, !amdgpu.noclobber !8
  %75 = uitofp i8 %74 to float
  %76 = add nuw nsw i32 %51, 3
  %77 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %76
  store float %75, float addrspace(3)* %77, align 4, !tbaa !9
  br label %78

78:                                               ; preds = %45, %5
  %79 = icmp ult i16 %14, 10
  %80 = icmp ult i32 %39, %3
  %81 = select i1 %79, i1 %80, i1 false
  %82 = select i1 %81, i1 %43, i1 false
  br i1 %82, label %83, label %116

83:                                               ; preds = %78
  %84 = mul i32 %37, %3
  %85 = add i32 %84, %39
  %86 = shl i32 %85, 2
  %87 = mul nuw nsw i32 %12, 10
  %88 = add nuw nsw i32 %87, %9
  %89 = shl nuw nsw i32 %88, 2
  %90 = zext i32 %86 to i64
  %91 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %90
  %92 = load i8, i8 addrspace(1)* %91, align 1, !tbaa !5, !amdgpu.noclobber !8
  %93 = uitofp i8 %92 to float
  %94 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %89
  store float %93, float addrspace(3)* %94, align 16, !tbaa !9
  %95 = add nuw nsw i32 %86, 1
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %96
  %98 = load i8, i8 addrspace(1)* %97, align 1, !tbaa !5, !amdgpu.noclobber !8
  %99 = uitofp i8 %98 to float
  %100 = add nuw nsw i32 %89, 1
  %101 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %100
  store float %99, float addrspace(3)* %101, align 4, !tbaa !9
  %102 = add nuw nsw i32 %86, 2
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %103
  %105 = load i8, i8 addrspace(1)* %104, align 1, !tbaa !5, !amdgpu.noclobber !8
  %106 = uitofp i8 %105 to float
  %107 = add nuw nsw i32 %89, 2
  %108 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %107
  store float %106, float addrspace(3)* %108, align 8, !tbaa !9
  %109 = add nuw nsw i32 %86, 3
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8 addrspace(1)* %2, i64 %110
  %112 = load i8, i8 addrspace(1)* %111, align 1, !tbaa !5, !amdgpu.noclobber !8
  %113 = uitofp i8 %112 to float
  %114 = add nuw nsw i32 %89, 3
  %115 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %114
  store float %113, float addrspace(3)* %115, align 4, !tbaa !9
  br label %116

116:                                              ; preds = %83, %78
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %117 = select i1 %41, i1 %43, i1 false
  %118 = select i1 %117, i1 %80, i1 false
  br i1 %118, label %119, label %789

119:                                              ; preds = %116
  %120 = mul nuw nsw i32 %12, 10
  %121 = add nuw nsw i32 %120, %17
  %122 = shl nuw nsw i32 %121, 2
  %123 = add nuw nsw i32 %120, %9
  %124 = shl nuw nsw i32 %123, 2
  %125 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %122
  %126 = load float, float addrspace(3)* %125, align 16, !tbaa !9
  %127 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %124
  %128 = load float, float addrspace(3)* %127, align 16, !tbaa !9
  %129 = fsub contract float %126, %128
  %130 = tail call float @llvm.fabs.f32(float %129)
  %131 = tail call float @llvm.amdgcn.frexp.mant.f32(float %130)
  %132 = fcmp olt float %131, 0x3FE5555560000000
  %133 = zext i1 %132 to i32
  %134 = tail call float @llvm.amdgcn.ldexp.f32(float %131, i32 %133)
  %135 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %130)
  %136 = sub nsw i32 %135, %133
  %137 = fadd float %134, -1.000000e+00
  %138 = fadd float %134, 1.000000e+00
  %139 = fadd float %138, -1.000000e+00
  %140 = fsub float %134, %139
  %141 = tail call float @llvm.amdgcn.rcp.f32(float %138)
  %142 = fmul float %137, %141
  %143 = fmul float %138, %142
  %144 = fneg float %143
  %145 = tail call float @llvm.fma.f32(float %142, float %138, float %144)
  %146 = tail call float @llvm.fma.f32(float %142, float %140, float %145)
  %147 = fadd float %143, %146
  %148 = fsub float %147, %143
  %149 = fsub float %146, %148
  %150 = fsub float %137, %147
  %151 = fsub float %137, %150
  %152 = fsub float %151, %147
  %153 = fsub float %152, %149
  %154 = fadd float %150, %153
  %155 = fmul float %141, %154
  %156 = fadd float %142, %155
  %157 = fsub float %156, %142
  %158 = fsub float %155, %157
  %159 = fmul float %156, %156
  %160 = fneg float %159
  %161 = tail call float @llvm.fma.f32(float %156, float %156, float %160)
  %162 = fmul float %158, 2.000000e+00
  %163 = tail call float @llvm.fma.f32(float %156, float %162, float %161)
  %164 = fadd float %159, %163
  %165 = fsub float %164, %159
  %166 = fsub float %163, %165
  %167 = tail call float @llvm.fmuladd.f32(float %164, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %168 = tail call float @llvm.fmuladd.f32(float %164, float %167, float 0x3FD999BDE0000000)
  %169 = sitofp i32 %136 to float
  %170 = fmul float %169, 0x3FE62E4300000000
  %171 = fneg float %170
  %172 = tail call float @llvm.fma.f32(float %169, float 0x3FE62E4300000000, float %171)
  %173 = tail call float @llvm.fma.f32(float %169, float 0xBE205C6100000000, float %172)
  %174 = fadd float %170, %173
  %175 = fsub float %174, %170
  %176 = fsub float %173, %175
  %177 = tail call float @llvm.amdgcn.ldexp.f32(float %156, i32 1)
  %178 = fmul float %156, %164
  %179 = fneg float %178
  %180 = tail call float @llvm.fma.f32(float %164, float %156, float %179)
  %181 = tail call float @llvm.fma.f32(float %164, float %158, float %180)
  %182 = tail call float @llvm.fma.f32(float %166, float %156, float %181)
  %183 = fadd float %178, %182
  %184 = fsub float %183, %178
  %185 = fsub float %182, %184
  %186 = fmul float %164, %168
  %187 = fneg float %186
  %188 = tail call float @llvm.fma.f32(float %164, float %168, float %187)
  %189 = tail call float @llvm.fma.f32(float %166, float %168, float %188)
  %190 = fadd float %186, %189
  %191 = fsub float %190, %186
  %192 = fsub float %189, %191
  %193 = fadd float %190, 0x3FE5555540000000
  %194 = fadd float %193, 0xBFE5555540000000
  %195 = fsub float %190, %194
  %196 = fadd float %192, 0x3E2E720200000000
  %197 = fadd float %196, %195
  %198 = fadd float %193, %197
  %199 = fsub float %198, %193
  %200 = fsub float %197, %199
  %201 = fmul float %183, %198
  %202 = fneg float %201
  %203 = tail call float @llvm.fma.f32(float %183, float %198, float %202)
  %204 = tail call float @llvm.fma.f32(float %183, float %200, float %203)
  %205 = tail call float @llvm.fma.f32(float %185, float %198, float %204)
  %206 = tail call float @llvm.amdgcn.ldexp.f32(float %158, i32 1)
  %207 = fadd float %201, %205
  %208 = fsub float %207, %201
  %209 = fsub float %205, %208
  %210 = fadd float %177, %207
  %211 = fsub float %210, %177
  %212 = fsub float %207, %211
  %213 = fadd float %206, %209
  %214 = fadd float %213, %212
  %215 = fadd float %210, %214
  %216 = fsub float %215, %210
  %217 = fsub float %214, %216
  %218 = fadd float %174, %215
  %219 = fsub float %218, %174
  %220 = fsub float %218, %219
  %221 = fsub float %174, %220
  %222 = fsub float %215, %219
  %223 = fadd float %222, %221
  %224 = fadd float %176, %217
  %225 = fsub float %224, %176
  %226 = fsub float %224, %225
  %227 = fsub float %176, %226
  %228 = fsub float %217, %225
  %229 = fadd float %228, %227
  %230 = fadd float %224, %223
  %231 = fadd float %218, %230
  %232 = fsub float %231, %218
  %233 = fsub float %230, %232
  %234 = fadd float %229, %233
  %235 = fadd float %231, %234
  %236 = fsub float %235, %231
  %237 = fsub float %234, %236
  %238 = fmul float %235, 2.000000e+00
  %239 = fneg float %238
  %240 = tail call float @llvm.fma.f32(float %235, float 2.000000e+00, float %239)
  %241 = tail call float @llvm.fma.f32(float %237, float 2.000000e+00, float %240)
  %242 = fadd float %238, %241
  %243 = fsub float %242, %238
  %244 = fsub float %241, %243
  %245 = tail call float @llvm.fabs.f32(float %238) #4
  %246 = fcmp oeq float %245, 0x7FF0000000000000
  %247 = select i1 %246, float %238, float %242
  %248 = tail call float @llvm.fabs.f32(float %247) #4
  %249 = fcmp oeq float %248, 0x7FF0000000000000
  %250 = select i1 %249, float 0.000000e+00, float %244
  %251 = fcmp oeq float %247, 0x40562E4300000000
  %252 = select i1 %251, float 0x3EE0000000000000, float 0.000000e+00
  %253 = fsub float %247, %252
  %254 = fadd float %252, %250
  %255 = fmul float %253, 0x3FF7154760000000
  %256 = tail call float @llvm.rint.f32(float %255)
  %257 = fcmp ogt float %253, 0x40562E4300000000
  %258 = fcmp olt float %253, 0xC059D1DA00000000
  %259 = fneg float %255
  %260 = tail call float @llvm.fma.f32(float %253, float 0x3FF7154760000000, float %259)
  %261 = tail call float @llvm.fma.f32(float %253, float 0x3E54AE0BE0000000, float %260)
  %262 = fsub float %255, %256
  %263 = fadd float %261, %262
  %264 = tail call float @llvm.exp2.f32(float %263)
  %265 = fptosi float %256 to i32
  %266 = tail call float @llvm.amdgcn.ldexp.f32(float %264, i32 %265)
  %267 = select i1 %258, float 0.000000e+00, float %266
  %268 = select i1 %257, float 0x7FF0000000000000, float %267
  %269 = tail call float @llvm.fma.f32(float %268, float %254, float %268)
  %270 = tail call float @llvm.fabs.f32(float %268) #4
  %271 = fcmp oeq float %270, 0x7FF0000000000000
  %272 = select i1 %271, float %268, float %269
  %273 = tail call float @llvm.fabs.f32(float %272)
  %274 = fcmp oeq float %130, 0x7FF0000000000000
  %275 = fcmp oeq float %129, 0.000000e+00
  %276 = select i1 %274, float 0x7FF0000000000000, float %273
  %277 = select i1 %275, float 0.000000e+00, float %276
  %278 = fcmp uno float %129, 0.000000e+00
  %279 = select i1 %278, float 0x7FF8000000000000, float %277
  %280 = fcmp oeq float %129, 1.000000e+00
  %281 = select i1 %280, float 1.000000e+00, float %279
  %282 = add nuw nsw i32 %122, 1
  %283 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %282
  %284 = load float, float addrspace(3)* %283, align 4, !tbaa !9
  %285 = add nuw nsw i32 %124, 1
  %286 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %285
  %287 = load float, float addrspace(3)* %286, align 4, !tbaa !9
  %288 = fsub contract float %284, %287
  %289 = tail call float @llvm.fabs.f32(float %288)
  %290 = tail call float @llvm.amdgcn.frexp.mant.f32(float %289)
  %291 = fcmp olt float %290, 0x3FE5555560000000
  %292 = zext i1 %291 to i32
  %293 = tail call float @llvm.amdgcn.ldexp.f32(float %290, i32 %292)
  %294 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %289)
  %295 = sub nsw i32 %294, %292
  %296 = fadd float %293, -1.000000e+00
  %297 = fadd float %293, 1.000000e+00
  %298 = fadd float %297, -1.000000e+00
  %299 = fsub float %293, %298
  %300 = tail call float @llvm.amdgcn.rcp.f32(float %297)
  %301 = fmul float %296, %300
  %302 = fmul float %297, %301
  %303 = fneg float %302
  %304 = tail call float @llvm.fma.f32(float %301, float %297, float %303)
  %305 = tail call float @llvm.fma.f32(float %301, float %299, float %304)
  %306 = fadd float %302, %305
  %307 = fsub float %306, %302
  %308 = fsub float %305, %307
  %309 = fsub float %296, %306
  %310 = fsub float %296, %309
  %311 = fsub float %310, %306
  %312 = fsub float %311, %308
  %313 = fadd float %309, %312
  %314 = fmul float %300, %313
  %315 = fadd float %301, %314
  %316 = fsub float %315, %301
  %317 = fsub float %314, %316
  %318 = fmul float %315, %315
  %319 = fneg float %318
  %320 = tail call float @llvm.fma.f32(float %315, float %315, float %319)
  %321 = fmul float %317, 2.000000e+00
  %322 = tail call float @llvm.fma.f32(float %315, float %321, float %320)
  %323 = fadd float %318, %322
  %324 = fsub float %323, %318
  %325 = fsub float %322, %324
  %326 = tail call float @llvm.fmuladd.f32(float %323, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %327 = tail call float @llvm.fmuladd.f32(float %323, float %326, float 0x3FD999BDE0000000)
  %328 = sitofp i32 %295 to float
  %329 = fmul float %328, 0x3FE62E4300000000
  %330 = fneg float %329
  %331 = tail call float @llvm.fma.f32(float %328, float 0x3FE62E4300000000, float %330)
  %332 = tail call float @llvm.fma.f32(float %328, float 0xBE205C6100000000, float %331)
  %333 = fadd float %329, %332
  %334 = fsub float %333, %329
  %335 = fsub float %332, %334
  %336 = tail call float @llvm.amdgcn.ldexp.f32(float %315, i32 1)
  %337 = fmul float %315, %323
  %338 = fneg float %337
  %339 = tail call float @llvm.fma.f32(float %323, float %315, float %338)
  %340 = tail call float @llvm.fma.f32(float %323, float %317, float %339)
  %341 = tail call float @llvm.fma.f32(float %325, float %315, float %340)
  %342 = fadd float %337, %341
  %343 = fsub float %342, %337
  %344 = fsub float %341, %343
  %345 = fmul float %323, %327
  %346 = fneg float %345
  %347 = tail call float @llvm.fma.f32(float %323, float %327, float %346)
  %348 = tail call float @llvm.fma.f32(float %325, float %327, float %347)
  %349 = fadd float %345, %348
  %350 = fsub float %349, %345
  %351 = fsub float %348, %350
  %352 = fadd float %349, 0x3FE5555540000000
  %353 = fadd float %352, 0xBFE5555540000000
  %354 = fsub float %349, %353
  %355 = fadd float %351, 0x3E2E720200000000
  %356 = fadd float %355, %354
  %357 = fadd float %352, %356
  %358 = fsub float %357, %352
  %359 = fsub float %356, %358
  %360 = fmul float %342, %357
  %361 = fneg float %360
  %362 = tail call float @llvm.fma.f32(float %342, float %357, float %361)
  %363 = tail call float @llvm.fma.f32(float %342, float %359, float %362)
  %364 = tail call float @llvm.fma.f32(float %344, float %357, float %363)
  %365 = tail call float @llvm.amdgcn.ldexp.f32(float %317, i32 1)
  %366 = fadd float %360, %364
  %367 = fsub float %366, %360
  %368 = fsub float %364, %367
  %369 = fadd float %336, %366
  %370 = fsub float %369, %336
  %371 = fsub float %366, %370
  %372 = fadd float %365, %368
  %373 = fadd float %372, %371
  %374 = fadd float %369, %373
  %375 = fsub float %374, %369
  %376 = fsub float %373, %375
  %377 = fadd float %333, %374
  %378 = fsub float %377, %333
  %379 = fsub float %377, %378
  %380 = fsub float %333, %379
  %381 = fsub float %374, %378
  %382 = fadd float %381, %380
  %383 = fadd float %335, %376
  %384 = fsub float %383, %335
  %385 = fsub float %383, %384
  %386 = fsub float %335, %385
  %387 = fsub float %376, %384
  %388 = fadd float %387, %386
  %389 = fadd float %383, %382
  %390 = fadd float %377, %389
  %391 = fsub float %390, %377
  %392 = fsub float %389, %391
  %393 = fadd float %388, %392
  %394 = fadd float %390, %393
  %395 = fsub float %394, %390
  %396 = fsub float %393, %395
  %397 = fmul float %394, 2.000000e+00
  %398 = fneg float %397
  %399 = tail call float @llvm.fma.f32(float %394, float 2.000000e+00, float %398)
  %400 = tail call float @llvm.fma.f32(float %396, float 2.000000e+00, float %399)
  %401 = fadd float %397, %400
  %402 = fsub float %401, %397
  %403 = fsub float %400, %402
  %404 = tail call float @llvm.fabs.f32(float %397) #4
  %405 = fcmp oeq float %404, 0x7FF0000000000000
  %406 = select i1 %405, float %397, float %401
  %407 = tail call float @llvm.fabs.f32(float %406) #4
  %408 = fcmp oeq float %407, 0x7FF0000000000000
  %409 = select i1 %408, float 0.000000e+00, float %403
  %410 = fcmp oeq float %406, 0x40562E4300000000
  %411 = select i1 %410, float 0x3EE0000000000000, float 0.000000e+00
  %412 = fsub float %406, %411
  %413 = fadd float %411, %409
  %414 = fmul float %412, 0x3FF7154760000000
  %415 = tail call float @llvm.rint.f32(float %414)
  %416 = fcmp ogt float %412, 0x40562E4300000000
  %417 = fcmp olt float %412, 0xC059D1DA00000000
  %418 = fneg float %414
  %419 = tail call float @llvm.fma.f32(float %412, float 0x3FF7154760000000, float %418)
  %420 = tail call float @llvm.fma.f32(float %412, float 0x3E54AE0BE0000000, float %419)
  %421 = fsub float %414, %415
  %422 = fadd float %420, %421
  %423 = tail call float @llvm.exp2.f32(float %422)
  %424 = fptosi float %415 to i32
  %425 = tail call float @llvm.amdgcn.ldexp.f32(float %423, i32 %424)
  %426 = select i1 %417, float 0.000000e+00, float %425
  %427 = select i1 %416, float 0x7FF0000000000000, float %426
  %428 = tail call float @llvm.fma.f32(float %427, float %413, float %427)
  %429 = tail call float @llvm.fabs.f32(float %427) #4
  %430 = fcmp oeq float %429, 0x7FF0000000000000
  %431 = select i1 %430, float %427, float %428
  %432 = tail call float @llvm.fabs.f32(float %431)
  %433 = fcmp oeq float %289, 0x7FF0000000000000
  %434 = fcmp oeq float %288, 0.000000e+00
  %435 = select i1 %433, float 0x7FF0000000000000, float %432
  %436 = select i1 %434, float 0.000000e+00, float %435
  %437 = fcmp uno float %288, 0.000000e+00
  %438 = select i1 %437, float 0x7FF8000000000000, float %436
  %439 = fcmp oeq float %288, 1.000000e+00
  %440 = select i1 %439, float 1.000000e+00, float %438
  %441 = fadd contract float %281, %440
  %442 = add nuw nsw i32 %122, 2
  %443 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %442
  %444 = load float, float addrspace(3)* %443, align 8, !tbaa !9
  %445 = add nuw nsw i32 %124, 2
  %446 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %445
  %447 = load float, float addrspace(3)* %446, align 8, !tbaa !9
  %448 = fsub contract float %444, %447
  %449 = tail call float @llvm.fabs.f32(float %448)
  %450 = tail call float @llvm.amdgcn.frexp.mant.f32(float %449)
  %451 = fcmp olt float %450, 0x3FE5555560000000
  %452 = zext i1 %451 to i32
  %453 = tail call float @llvm.amdgcn.ldexp.f32(float %450, i32 %452)
  %454 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %449)
  %455 = sub nsw i32 %454, %452
  %456 = fadd float %453, -1.000000e+00
  %457 = fadd float %453, 1.000000e+00
  %458 = fadd float %457, -1.000000e+00
  %459 = fsub float %453, %458
  %460 = tail call float @llvm.amdgcn.rcp.f32(float %457)
  %461 = fmul float %456, %460
  %462 = fmul float %457, %461
  %463 = fneg float %462
  %464 = tail call float @llvm.fma.f32(float %461, float %457, float %463)
  %465 = tail call float @llvm.fma.f32(float %461, float %459, float %464)
  %466 = fadd float %462, %465
  %467 = fsub float %466, %462
  %468 = fsub float %465, %467
  %469 = fsub float %456, %466
  %470 = fsub float %456, %469
  %471 = fsub float %470, %466
  %472 = fsub float %471, %468
  %473 = fadd float %469, %472
  %474 = fmul float %460, %473
  %475 = fadd float %461, %474
  %476 = fsub float %475, %461
  %477 = fsub float %474, %476
  %478 = fmul float %475, %475
  %479 = fneg float %478
  %480 = tail call float @llvm.fma.f32(float %475, float %475, float %479)
  %481 = fmul float %477, 2.000000e+00
  %482 = tail call float @llvm.fma.f32(float %475, float %481, float %480)
  %483 = fadd float %478, %482
  %484 = fsub float %483, %478
  %485 = fsub float %482, %484
  %486 = tail call float @llvm.fmuladd.f32(float %483, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %487 = tail call float @llvm.fmuladd.f32(float %483, float %486, float 0x3FD999BDE0000000)
  %488 = sitofp i32 %455 to float
  %489 = fmul float %488, 0x3FE62E4300000000
  %490 = fneg float %489
  %491 = tail call float @llvm.fma.f32(float %488, float 0x3FE62E4300000000, float %490)
  %492 = tail call float @llvm.fma.f32(float %488, float 0xBE205C6100000000, float %491)
  %493 = fadd float %489, %492
  %494 = fsub float %493, %489
  %495 = fsub float %492, %494
  %496 = tail call float @llvm.amdgcn.ldexp.f32(float %475, i32 1)
  %497 = fmul float %475, %483
  %498 = fneg float %497
  %499 = tail call float @llvm.fma.f32(float %483, float %475, float %498)
  %500 = tail call float @llvm.fma.f32(float %483, float %477, float %499)
  %501 = tail call float @llvm.fma.f32(float %485, float %475, float %500)
  %502 = fadd float %497, %501
  %503 = fsub float %502, %497
  %504 = fsub float %501, %503
  %505 = fmul float %483, %487
  %506 = fneg float %505
  %507 = tail call float @llvm.fma.f32(float %483, float %487, float %506)
  %508 = tail call float @llvm.fma.f32(float %485, float %487, float %507)
  %509 = fadd float %505, %508
  %510 = fsub float %509, %505
  %511 = fsub float %508, %510
  %512 = fadd float %509, 0x3FE5555540000000
  %513 = fadd float %512, 0xBFE5555540000000
  %514 = fsub float %509, %513
  %515 = fadd float %511, 0x3E2E720200000000
  %516 = fadd float %515, %514
  %517 = fadd float %512, %516
  %518 = fsub float %517, %512
  %519 = fsub float %516, %518
  %520 = fmul float %502, %517
  %521 = fneg float %520
  %522 = tail call float @llvm.fma.f32(float %502, float %517, float %521)
  %523 = tail call float @llvm.fma.f32(float %502, float %519, float %522)
  %524 = tail call float @llvm.fma.f32(float %504, float %517, float %523)
  %525 = tail call float @llvm.amdgcn.ldexp.f32(float %477, i32 1)
  %526 = fadd float %520, %524
  %527 = fsub float %526, %520
  %528 = fsub float %524, %527
  %529 = fadd float %496, %526
  %530 = fsub float %529, %496
  %531 = fsub float %526, %530
  %532 = fadd float %525, %528
  %533 = fadd float %532, %531
  %534 = fadd float %529, %533
  %535 = fsub float %534, %529
  %536 = fsub float %533, %535
  %537 = fadd float %493, %534
  %538 = fsub float %537, %493
  %539 = fsub float %537, %538
  %540 = fsub float %493, %539
  %541 = fsub float %534, %538
  %542 = fadd float %541, %540
  %543 = fadd float %495, %536
  %544 = fsub float %543, %495
  %545 = fsub float %543, %544
  %546 = fsub float %495, %545
  %547 = fsub float %536, %544
  %548 = fadd float %547, %546
  %549 = fadd float %543, %542
  %550 = fadd float %537, %549
  %551 = fsub float %550, %537
  %552 = fsub float %549, %551
  %553 = fadd float %548, %552
  %554 = fadd float %550, %553
  %555 = fsub float %554, %550
  %556 = fsub float %553, %555
  %557 = fmul float %554, 2.000000e+00
  %558 = fneg float %557
  %559 = tail call float @llvm.fma.f32(float %554, float 2.000000e+00, float %558)
  %560 = tail call float @llvm.fma.f32(float %556, float 2.000000e+00, float %559)
  %561 = fadd float %557, %560
  %562 = fsub float %561, %557
  %563 = fsub float %560, %562
  %564 = tail call float @llvm.fabs.f32(float %557) #4
  %565 = fcmp oeq float %564, 0x7FF0000000000000
  %566 = select i1 %565, float %557, float %561
  %567 = tail call float @llvm.fabs.f32(float %566) #4
  %568 = fcmp oeq float %567, 0x7FF0000000000000
  %569 = select i1 %568, float 0.000000e+00, float %563
  %570 = fcmp oeq float %566, 0x40562E4300000000
  %571 = select i1 %570, float 0x3EE0000000000000, float 0.000000e+00
  %572 = fsub float %566, %571
  %573 = fadd float %571, %569
  %574 = fmul float %572, 0x3FF7154760000000
  %575 = tail call float @llvm.rint.f32(float %574)
  %576 = fcmp ogt float %572, 0x40562E4300000000
  %577 = fcmp olt float %572, 0xC059D1DA00000000
  %578 = fneg float %574
  %579 = tail call float @llvm.fma.f32(float %572, float 0x3FF7154760000000, float %578)
  %580 = tail call float @llvm.fma.f32(float %572, float 0x3E54AE0BE0000000, float %579)
  %581 = fsub float %574, %575
  %582 = fadd float %580, %581
  %583 = tail call float @llvm.exp2.f32(float %582)
  %584 = fptosi float %575 to i32
  %585 = tail call float @llvm.amdgcn.ldexp.f32(float %583, i32 %584)
  %586 = select i1 %577, float 0.000000e+00, float %585
  %587 = select i1 %576, float 0x7FF0000000000000, float %586
  %588 = tail call float @llvm.fma.f32(float %587, float %573, float %587)
  %589 = tail call float @llvm.fabs.f32(float %587) #4
  %590 = fcmp oeq float %589, 0x7FF0000000000000
  %591 = select i1 %590, float %587, float %588
  %592 = tail call float @llvm.fabs.f32(float %591)
  %593 = fcmp oeq float %449, 0x7FF0000000000000
  %594 = fcmp oeq float %448, 0.000000e+00
  %595 = select i1 %593, float 0x7FF0000000000000, float %592
  %596 = select i1 %594, float 0.000000e+00, float %595
  %597 = fcmp uno float %448, 0.000000e+00
  %598 = select i1 %597, float 0x7FF8000000000000, float %596
  %599 = fcmp oeq float %448, 1.000000e+00
  %600 = select i1 %599, float 1.000000e+00, float %598
  %601 = fadd contract float %441, %600
  %602 = add nuw nsw i32 %122, 3
  %603 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p1_section, i32 0, i32 %602
  %604 = load float, float addrspace(3)* %603, align 4, !tbaa !9
  %605 = add nuw nsw i32 %124, 3
  %606 = getelementptr inbounds [400 x float], [400 x float] addrspace(3)* @_ZZ19setDiffVolumeKernelPfPhS0_jjE10p2_section, i32 0, i32 %605
  %607 = load float, float addrspace(3)* %606, align 4, !tbaa !9
  %608 = fsub contract float %604, %607
  %609 = tail call float @llvm.fabs.f32(float %608)
  %610 = tail call float @llvm.amdgcn.frexp.mant.f32(float %609)
  %611 = fcmp olt float %610, 0x3FE5555560000000
  %612 = zext i1 %611 to i32
  %613 = tail call float @llvm.amdgcn.ldexp.f32(float %610, i32 %612)
  %614 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %609)
  %615 = sub nsw i32 %614, %612
  %616 = fadd float %613, -1.000000e+00
  %617 = fadd float %613, 1.000000e+00
  %618 = fadd float %617, -1.000000e+00
  %619 = fsub float %613, %618
  %620 = tail call float @llvm.amdgcn.rcp.f32(float %617)
  %621 = fmul float %616, %620
  %622 = fmul float %617, %621
  %623 = fneg float %622
  %624 = tail call float @llvm.fma.f32(float %621, float %617, float %623)
  %625 = tail call float @llvm.fma.f32(float %621, float %619, float %624)
  %626 = fadd float %622, %625
  %627 = fsub float %626, %622
  %628 = fsub float %625, %627
  %629 = fsub float %616, %626
  %630 = fsub float %616, %629
  %631 = fsub float %630, %626
  %632 = fsub float %631, %628
  %633 = fadd float %629, %632
  %634 = fmul float %620, %633
  %635 = fadd float %621, %634
  %636 = fsub float %635, %621
  %637 = fsub float %634, %636
  %638 = fmul float %635, %635
  %639 = fneg float %638
  %640 = tail call float @llvm.fma.f32(float %635, float %635, float %639)
  %641 = fmul float %637, 2.000000e+00
  %642 = tail call float @llvm.fma.f32(float %635, float %641, float %640)
  %643 = fadd float %638, %642
  %644 = fsub float %643, %638
  %645 = fsub float %642, %644
  %646 = tail call float @llvm.fmuladd.f32(float %643, float 0x3FCED89C20000000, float 0x3FD23E9880000000)
  %647 = tail call float @llvm.fmuladd.f32(float %643, float %646, float 0x3FD999BDE0000000)
  %648 = sitofp i32 %615 to float
  %649 = fmul float %648, 0x3FE62E4300000000
  %650 = fneg float %649
  %651 = tail call float @llvm.fma.f32(float %648, float 0x3FE62E4300000000, float %650)
  %652 = tail call float @llvm.fma.f32(float %648, float 0xBE205C6100000000, float %651)
  %653 = fadd float %649, %652
  %654 = fsub float %653, %649
  %655 = fsub float %652, %654
  %656 = tail call float @llvm.amdgcn.ldexp.f32(float %635, i32 1)
  %657 = fmul float %635, %643
  %658 = fneg float %657
  %659 = tail call float @llvm.fma.f32(float %643, float %635, float %658)
  %660 = tail call float @llvm.fma.f32(float %643, float %637, float %659)
  %661 = tail call float @llvm.fma.f32(float %645, float %635, float %660)
  %662 = fadd float %657, %661
  %663 = fsub float %662, %657
  %664 = fsub float %661, %663
  %665 = fmul float %643, %647
  %666 = fneg float %665
  %667 = tail call float @llvm.fma.f32(float %643, float %647, float %666)
  %668 = tail call float @llvm.fma.f32(float %645, float %647, float %667)
  %669 = fadd float %665, %668
  %670 = fsub float %669, %665
  %671 = fsub float %668, %670
  %672 = fadd float %669, 0x3FE5555540000000
  %673 = fadd float %672, 0xBFE5555540000000
  %674 = fsub float %669, %673
  %675 = fadd float %671, 0x3E2E720200000000
  %676 = fadd float %675, %674
  %677 = fadd float %672, %676
  %678 = fsub float %677, %672
  %679 = fsub float %676, %678
  %680 = fmul float %662, %677
  %681 = fneg float %680
  %682 = tail call float @llvm.fma.f32(float %662, float %677, float %681)
  %683 = tail call float @llvm.fma.f32(float %662, float %679, float %682)
  %684 = tail call float @llvm.fma.f32(float %664, float %677, float %683)
  %685 = tail call float @llvm.amdgcn.ldexp.f32(float %637, i32 1)
  %686 = fadd float %680, %684
  %687 = fsub float %686, %680
  %688 = fsub float %684, %687
  %689 = fadd float %656, %686
  %690 = fsub float %689, %656
  %691 = fsub float %686, %690
  %692 = fadd float %685, %688
  %693 = fadd float %692, %691
  %694 = fadd float %689, %693
  %695 = fsub float %694, %689
  %696 = fsub float %693, %695
  %697 = fadd float %653, %694
  %698 = fsub float %697, %653
  %699 = fsub float %697, %698
  %700 = fsub float %653, %699
  %701 = fsub float %694, %698
  %702 = fadd float %701, %700
  %703 = fadd float %655, %696
  %704 = fsub float %703, %655
  %705 = fsub float %703, %704
  %706 = fsub float %655, %705
  %707 = fsub float %696, %704
  %708 = fadd float %707, %706
  %709 = fadd float %703, %702
  %710 = fadd float %697, %709
  %711 = fsub float %710, %697
  %712 = fsub float %709, %711
  %713 = fadd float %708, %712
  %714 = fadd float %710, %713
  %715 = fsub float %714, %710
  %716 = fsub float %713, %715
  %717 = fmul float %714, 2.000000e+00
  %718 = fneg float %717
  %719 = tail call float @llvm.fma.f32(float %714, float 2.000000e+00, float %718)
  %720 = tail call float @llvm.fma.f32(float %716, float 2.000000e+00, float %719)
  %721 = fadd float %717, %720
  %722 = fsub float %721, %717
  %723 = fsub float %720, %722
  %724 = tail call float @llvm.fabs.f32(float %717) #4
  %725 = fcmp oeq float %724, 0x7FF0000000000000
  %726 = select i1 %725, float %717, float %721
  %727 = tail call float @llvm.fabs.f32(float %726) #4
  %728 = fcmp oeq float %727, 0x7FF0000000000000
  %729 = select i1 %728, float 0.000000e+00, float %723
  %730 = fcmp oeq float %726, 0x40562E4300000000
  %731 = select i1 %730, float 0x3EE0000000000000, float 0.000000e+00
  %732 = fsub float %726, %731
  %733 = fadd float %731, %729
  %734 = fmul float %732, 0x3FF7154760000000
  %735 = tail call float @llvm.rint.f32(float %734)
  %736 = fcmp ogt float %732, 0x40562E4300000000
  %737 = fcmp olt float %732, 0xC059D1DA00000000
  %738 = fneg float %734
  %739 = tail call float @llvm.fma.f32(float %732, float 0x3FF7154760000000, float %738)
  %740 = tail call float @llvm.fma.f32(float %732, float 0x3E54AE0BE0000000, float %739)
  %741 = fsub float %734, %735
  %742 = fadd float %740, %741
  %743 = tail call float @llvm.exp2.f32(float %742)
  %744 = fptosi float %735 to i32
  %745 = tail call float @llvm.amdgcn.ldexp.f32(float %743, i32 %744)
  %746 = select i1 %737, float 0.000000e+00, float %745
  %747 = select i1 %736, float 0x7FF0000000000000, float %746
  %748 = tail call float @llvm.fma.f32(float %747, float %733, float %747)
  %749 = tail call float @llvm.fabs.f32(float %747) #4
  %750 = fcmp oeq float %749, 0x7FF0000000000000
  %751 = select i1 %750, float %747, float %748
  %752 = tail call float @llvm.fabs.f32(float %751)
  %753 = fcmp oeq float %609, 0x7FF0000000000000
  %754 = fcmp oeq float %608, 0.000000e+00
  %755 = select i1 %753, float 0x7FF0000000000000, float %752
  %756 = select i1 %754, float 0.000000e+00, float %755
  %757 = fcmp uno float %608, 0.000000e+00
  %758 = select i1 %757, float 0x7FF8000000000000, float %756
  %759 = fcmp oeq float %608, 1.000000e+00
  %760 = select i1 %759, float 1.000000e+00, float %758
  %761 = fadd contract float %601, %760
  %762 = fcmp olt float %761, 0x39F0000000000000
  %763 = select i1 %762, float 0x41F0000000000000, float 1.000000e+00
  %764 = fmul float %761, %763
  %765 = tail call float @llvm.sqrt.f32(float %764)
  %766 = bitcast float %765 to i32
  %767 = add nsw i32 %766, -1
  %768 = bitcast i32 %767 to float
  %769 = add nsw i32 %766, 1
  %770 = bitcast i32 %769 to float
  %771 = tail call i1 @llvm.amdgcn.class.f32(float %764, i32 608)
  %772 = select i1 %762, float 0x3EF0000000000000, float 1.000000e+00
  %773 = fneg float %770
  %774 = tail call float @llvm.fma.f32(float %773, float %765, float %764)
  %775 = fcmp ogt float %774, 0.000000e+00
  %776 = fneg float %768
  %777 = tail call float @llvm.fma.f32(float %776, float %765, float %764)
  %778 = fcmp ole float %777, 0.000000e+00
  %779 = select i1 %778, float %768, float %765
  %780 = select i1 %775, float %770, float %779
  %781 = fmul float %772, %780
  %782 = select i1 %771, float %764, float %781
  %783 = mul i32 %37, %3
  %784 = add i32 %35, %783
  %785 = mul i32 %784, %3
  %786 = add i32 %785, %39
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds float, float addrspace(1)* %0, i64 %787
  store float %782, float addrspace(1)* %788, align 4, !tbaa !9
  br label %789

789:                                              ; preds = %119, %116
  ret void
}

; Function Attrs: convergent mustprogress nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.exp2.f32(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.ldexp.f32(float, i32) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.frexp.mant.f32(float) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.frexp.exp.i32.f32(float) #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.rcp.f32(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #3

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #3

attributes #0 = { convergent mustprogress norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
