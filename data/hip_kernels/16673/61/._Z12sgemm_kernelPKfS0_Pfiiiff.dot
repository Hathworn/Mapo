digraph "CFG for '_Z12sgemm_kernelPKfS0_Pfiiiff' function" {
	label="CFG for '_Z12sgemm_kernelPKfS0_Pfiiiff' function";

	Node0x454cd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add nuw nsw i32 %24, 1\l  %26 = add i32 %25, %23\l  %27 = icmp sgt i32 %5, 0\l  br i1 %27, label %28, label %57\l|{<s0>T|<s1>F}}"];
	Node0x454cd30:s0 -> Node0x45506f0;
	Node0x454cd30:s1 -> Node0x4550780;
	Node0x45506f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%28:\l28:                                               \l  %29 = mul nsw i32 %26, %5\l  %30 = and i32 %5, 7\l  %31 = icmp ult i32 %5, 8\l  br i1 %31, label %34, label %32\l|{<s0>T|<s1>F}}"];
	Node0x45506f0:s0 -> Node0x4550ad0;
	Node0x45506f0:s1 -> Node0x4550b20;
	Node0x4550b20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%32:\l32:                                               \l  %33 = and i32 %5, -8\l  br label %67\l}"];
	Node0x4550b20 -> Node0x454eb80;
	Node0x4550ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%34:\l34:                                               \l  %35 = phi float [ undef, %28 ], [ %165, %67 ]\l  %36 = phi i32 [ 0, %28 ], [ %166, %67 ]\l  %37 = phi float [ 0.000000e+00, %28 ], [ %165, %67 ]\l  %38 = icmp eq i32 %30, 0\l  br i1 %38, label %57, label %39\l|{<s0>T|<s1>F}}"];
	Node0x4550ad0:s0 -> Node0x4550780;
	Node0x4550ad0:s1 -> Node0x4552090;
	Node0x4552090 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%39:\l39:                                               \l  %40 = phi i32 [ %54, %39 ], [ %36, %34 ]\l  %41 = phi float [ %53, %39 ], [ %37, %34 ]\l  %42 = phi i32 [ %55, %39 ], [ 0, %34 ]\l  %43 = add nsw i32 %40, %29\l  %44 = sext i32 %43 to i64\l  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44\l  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %47 = mul nsw i32 %40, %5\l  %48 = add nsw i32 %47, %17\l  %49 = sext i32 %48 to i64\l  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49\l  %51 = load float, float addrspace(1)* %50, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %52 = fmul contract float %46, %51\l  %53 = fadd contract float %41, %52\l  %54 = add nuw nsw i32 %40, 1\l  %55 = add i32 %42, 1\l  %56 = icmp eq i32 %55, %30\l  br i1 %56, label %57, label %39, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x4552090:s0 -> Node0x4550780;
	Node0x4552090:s1 -> Node0x4552090;
	Node0x4550780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%57:\l57:                                               \l  %58 = phi float [ 0.000000e+00, %8 ], [ %35, %34 ], [ %53, %39 ]\l  %59 = fmul contract float %58, %6\l  %60 = mul nsw i32 %26, %4\l  %61 = add nsw i32 %60, %17\l  %62 = sext i32 %61 to i64\l  %63 = getelementptr inbounds float, float addrspace(1)* %2, i64 %62\l  %64 = load float, float addrspace(1)* %63, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %65 = fmul contract float %64, %7\l  %66 = fadd contract float %59, %65\l  store float %66, float addrspace(1)* %63, align 4, !tbaa !7\l  ret void\l}"];
	Node0x454eb80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%67:\l67:                                               \l  %68 = phi i32 [ 0, %32 ], [ %166, %67 ]\l  %69 = phi float [ 0.000000e+00, %32 ], [ %165, %67 ]\l  %70 = phi i32 [ 0, %32 ], [ %167, %67 ]\l  %71 = add nsw i32 %68, %29\l  %72 = sext i32 %71 to i64\l  %73 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72\l  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %75 = mul nsw i32 %68, %5\l  %76 = add nsw i32 %75, %17\l  %77 = sext i32 %76 to i64\l  %78 = getelementptr inbounds float, float addrspace(1)* %1, i64 %77\l  %79 = load float, float addrspace(1)* %78, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %80 = fmul contract float %74, %79\l  %81 = fadd contract float %69, %80\l  %82 = or i32 %68, 1\l  %83 = add nsw i32 %82, %29\l  %84 = sext i32 %83 to i64\l  %85 = getelementptr inbounds float, float addrspace(1)* %0, i64 %84\l  %86 = load float, float addrspace(1)* %85, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %87 = mul nsw i32 %82, %5\l  %88 = add nsw i32 %87, %17\l  %89 = sext i32 %88 to i64\l  %90 = getelementptr inbounds float, float addrspace(1)* %1, i64 %89\l  %91 = load float, float addrspace(1)* %90, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %92 = fmul contract float %86, %91\l  %93 = fadd contract float %81, %92\l  %94 = or i32 %68, 2\l  %95 = add nsw i32 %94, %29\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds float, float addrspace(1)* %0, i64 %96\l  %98 = load float, float addrspace(1)* %97, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %99 = mul nsw i32 %94, %5\l  %100 = add nsw i32 %99, %17\l  %101 = sext i32 %100 to i64\l  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %101\l  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %104 = fmul contract float %98, %103\l  %105 = fadd contract float %93, %104\l  %106 = or i32 %68, 3\l  %107 = add nsw i32 %106, %29\l  %108 = sext i32 %107 to i64\l  %109 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108\l  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %111 = mul nsw i32 %106, %5\l  %112 = add nsw i32 %111, %17\l  %113 = sext i32 %112 to i64\l  %114 = getelementptr inbounds float, float addrspace(1)* %1, i64 %113\l  %115 = load float, float addrspace(1)* %114, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %116 = fmul contract float %110, %115\l  %117 = fadd contract float %105, %116\l  %118 = or i32 %68, 4\l  %119 = add nsw i32 %118, %29\l  %120 = sext i32 %119 to i64\l  %121 = getelementptr inbounds float, float addrspace(1)* %0, i64 %120\l  %122 = load float, float addrspace(1)* %121, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %123 = mul nsw i32 %118, %5\l  %124 = add nsw i32 %123, %17\l  %125 = sext i32 %124 to i64\l  %126 = getelementptr inbounds float, float addrspace(1)* %1, i64 %125\l  %127 = load float, float addrspace(1)* %126, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %128 = fmul contract float %122, %127\l  %129 = fadd contract float %117, %128\l  %130 = or i32 %68, 5\l  %131 = add nsw i32 %130, %29\l  %132 = sext i32 %131 to i64\l  %133 = getelementptr inbounds float, float addrspace(1)* %0, i64 %132\l  %134 = load float, float addrspace(1)* %133, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %135 = mul nsw i32 %130, %5\l  %136 = add nsw i32 %135, %17\l  %137 = sext i32 %136 to i64\l  %138 = getelementptr inbounds float, float addrspace(1)* %1, i64 %137\l  %139 = load float, float addrspace(1)* %138, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %140 = fmul contract float %134, %139\l  %141 = fadd contract float %129, %140\l  %142 = or i32 %68, 6\l  %143 = add nsw i32 %142, %29\l  %144 = sext i32 %143 to i64\l  %145 = getelementptr inbounds float, float addrspace(1)* %0, i64 %144\l  %146 = load float, float addrspace(1)* %145, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %147 = mul nsw i32 %142, %5\l  %148 = add nsw i32 %147, %17\l  %149 = sext i32 %148 to i64\l  %150 = getelementptr inbounds float, float addrspace(1)* %1, i64 %149\l  %151 = load float, float addrspace(1)* %150, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %152 = fmul contract float %146, %151\l  %153 = fadd contract float %141, %152\l  %154 = or i32 %68, 7\l  %155 = add nsw i32 %154, %29\l  %156 = sext i32 %155 to i64\l  %157 = getelementptr inbounds float, float addrspace(1)* %0, i64 %156\l  %158 = load float, float addrspace(1)* %157, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %159 = mul nsw i32 %154, %5\l  %160 = add nsw i32 %159, %17\l  %161 = sext i32 %160 to i64\l  %162 = getelementptr inbounds float, float addrspace(1)* %1, i64 %161\l  %163 = load float, float addrspace(1)* %162, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %164 = fmul contract float %158, %163\l  %165 = fadd contract float %153, %164\l  %166 = add nuw nsw i32 %68, 8\l  %167 = add i32 %70, 8\l  %168 = icmp eq i32 %167, %33\l  br i1 %168, label %34, label %67, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x454eb80:s0 -> Node0x4550ad0;
	Node0x454eb80:s1 -> Node0x454eb80;
}
