digraph "CFG for '_Z12sgemm_kernelPKfS0_Pfiiiff' function" {
	label="CFG for '_Z12sgemm_kernelPKfS0_Pfiiiff' function";

	Node0x5bc1d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%8:\l  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %10 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %11 = getelementptr i8, i8 addrspace(4)* %10, i64 4\l  %12 = bitcast i8 addrspace(4)* %11 to i16 addrspace(4)*\l  %13 = load i16, i16 addrspace(4)* %12, align 4, !range !4, !invariant.load !5\l  %14 = zext i16 %13 to i32\l  %15 = mul i32 %9, %14\l  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %17 = add i32 %15, %16\l  %18 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %19 = getelementptr i8, i8 addrspace(4)* %10, i64 6\l  %20 = bitcast i8 addrspace(4)* %19 to i16 addrspace(4)*\l  %21 = load i16, i16 addrspace(4)* %20, align 2, !range !4, !invariant.load !5\l  %22 = zext i16 %21 to i32\l  %23 = mul i32 %18, %22\l  %24 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !6\l  %25 = add i32 %23, %24\l  %26 = icmp sgt i32 %5, 0\l  br i1 %26, label %27, label %56\l|{<s0>T|<s1>F}}"];
	Node0x5bc1d10:s0 -> Node0x5bc5610;
	Node0x5bc1d10:s1 -> Node0x5bc56a0;
	Node0x5bc5610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%27:\l27:                                               \l  %28 = mul nsw i32 %25, %5\l  %29 = and i32 %5, 7\l  %30 = icmp ult i32 %5, 8\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x5bc5610:s0 -> Node0x5bc59f0;
	Node0x5bc5610:s1 -> Node0x5bc5a40;
	Node0x5bc5a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%31:\l31:                                               \l  %32 = and i32 %5, -8\l  br label %66\l}"];
	Node0x5bc5a40 -> Node0x5bc3aa0;
	Node0x5bc59f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%33:\l33:                                               \l  %34 = phi float [ undef, %27 ], [ %164, %66 ]\l  %35 = phi i32 [ 0, %27 ], [ %165, %66 ]\l  %36 = phi float [ 0.000000e+00, %27 ], [ %164, %66 ]\l  %37 = icmp eq i32 %29, 0\l  br i1 %37, label %56, label %38\l|{<s0>T|<s1>F}}"];
	Node0x5bc59f0:s0 -> Node0x5bc56a0;
	Node0x5bc59f0:s1 -> Node0x5bc6fc0;
	Node0x5bc6fc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i32 [ %53, %38 ], [ %35, %33 ]\l  %40 = phi float [ %52, %38 ], [ %36, %33 ]\l  %41 = phi i32 [ %54, %38 ], [ 0, %33 ]\l  %42 = add nsw i32 %39, %28\l  %43 = sext i32 %42 to i64\l  %44 = getelementptr inbounds float, float addrspace(1)* %0, i64 %43\l  %45 = load float, float addrspace(1)* %44, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %46 = mul nsw i32 %39, %5\l  %47 = add nsw i32 %46, %17\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds float, float addrspace(1)* %1, i64 %48\l  %50 = load float, float addrspace(1)* %49, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %51 = fmul contract float %45, %50\l  %52 = fadd contract float %40, %51\l  %53 = add nuw nsw i32 %39, 1\l  %54 = add i32 %41, 1\l  %55 = icmp eq i32 %54, %29\l  br i1 %55, label %56, label %38, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5bc6fc0:s0 -> Node0x5bc56a0;
	Node0x5bc6fc0:s1 -> Node0x5bc6fc0;
	Node0x5bc56a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%56:\l56:                                               \l  %57 = phi float [ 0.000000e+00, %8 ], [ %34, %33 ], [ %52, %38 ]\l  %58 = fmul contract float %57, %6\l  %59 = mul nsw i32 %25, %4\l  %60 = add nsw i32 %59, %17\l  %61 = sext i32 %60 to i64\l  %62 = getelementptr inbounds float, float addrspace(1)* %2, i64 %61\l  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %64 = fmul contract float %63, %7\l  %65 = fadd contract float %58, %64\l  store float %65, float addrspace(1)* %62, align 4, !tbaa !7\l  ret void\l}"];
	Node0x5bc3aa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%66:\l66:                                               \l  %67 = phi i32 [ 0, %31 ], [ %165, %66 ]\l  %68 = phi float [ 0.000000e+00, %31 ], [ %164, %66 ]\l  %69 = phi i32 [ 0, %31 ], [ %166, %66 ]\l  %70 = add nsw i32 %67, %28\l  %71 = sext i32 %70 to i64\l  %72 = getelementptr inbounds float, float addrspace(1)* %0, i64 %71\l  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %74 = mul nsw i32 %67, %5\l  %75 = add nsw i32 %74, %17\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76\l  %78 = load float, float addrspace(1)* %77, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %79 = fmul contract float %73, %78\l  %80 = fadd contract float %68, %79\l  %81 = or i32 %67, 1\l  %82 = add nsw i32 %81, %28\l  %83 = sext i32 %82 to i64\l  %84 = getelementptr inbounds float, float addrspace(1)* %0, i64 %83\l  %85 = load float, float addrspace(1)* %84, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %86 = mul nsw i32 %81, %5\l  %87 = add nsw i32 %86, %17\l  %88 = sext i32 %87 to i64\l  %89 = getelementptr inbounds float, float addrspace(1)* %1, i64 %88\l  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %91 = fmul contract float %85, %90\l  %92 = fadd contract float %80, %91\l  %93 = or i32 %67, 2\l  %94 = add nsw i32 %93, %28\l  %95 = sext i32 %94 to i64\l  %96 = getelementptr inbounds float, float addrspace(1)* %0, i64 %95\l  %97 = load float, float addrspace(1)* %96, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %98 = mul nsw i32 %93, %5\l  %99 = add nsw i32 %98, %17\l  %100 = sext i32 %99 to i64\l  %101 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100\l  %102 = load float, float addrspace(1)* %101, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %103 = fmul contract float %97, %102\l  %104 = fadd contract float %92, %103\l  %105 = or i32 %67, 3\l  %106 = add nsw i32 %105, %28\l  %107 = sext i32 %106 to i64\l  %108 = getelementptr inbounds float, float addrspace(1)* %0, i64 %107\l  %109 = load float, float addrspace(1)* %108, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %110 = mul nsw i32 %105, %5\l  %111 = add nsw i32 %110, %17\l  %112 = sext i32 %111 to i64\l  %113 = getelementptr inbounds float, float addrspace(1)* %1, i64 %112\l  %114 = load float, float addrspace(1)* %113, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %115 = fmul contract float %109, %114\l  %116 = fadd contract float %104, %115\l  %117 = or i32 %67, 4\l  %118 = add nsw i32 %117, %28\l  %119 = sext i32 %118 to i64\l  %120 = getelementptr inbounds float, float addrspace(1)* %0, i64 %119\l  %121 = load float, float addrspace(1)* %120, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %122 = mul nsw i32 %117, %5\l  %123 = add nsw i32 %122, %17\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds float, float addrspace(1)* %1, i64 %124\l  %126 = load float, float addrspace(1)* %125, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %127 = fmul contract float %121, %126\l  %128 = fadd contract float %116, %127\l  %129 = or i32 %67, 5\l  %130 = add nsw i32 %129, %28\l  %131 = sext i32 %130 to i64\l  %132 = getelementptr inbounds float, float addrspace(1)* %0, i64 %131\l  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %134 = mul nsw i32 %129, %5\l  %135 = add nsw i32 %134, %17\l  %136 = sext i32 %135 to i64\l  %137 = getelementptr inbounds float, float addrspace(1)* %1, i64 %136\l  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %139 = fmul contract float %133, %138\l  %140 = fadd contract float %128, %139\l  %141 = or i32 %67, 6\l  %142 = add nsw i32 %141, %28\l  %143 = sext i32 %142 to i64\l  %144 = getelementptr inbounds float, float addrspace(1)* %0, i64 %143\l  %145 = load float, float addrspace(1)* %144, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %146 = mul nsw i32 %141, %5\l  %147 = add nsw i32 %146, %17\l  %148 = sext i32 %147 to i64\l  %149 = getelementptr inbounds float, float addrspace(1)* %1, i64 %148\l  %150 = load float, float addrspace(1)* %149, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %151 = fmul contract float %145, %150\l  %152 = fadd contract float %140, %151\l  %153 = or i32 %67, 7\l  %154 = add nsw i32 %153, %28\l  %155 = sext i32 %154 to i64\l  %156 = getelementptr inbounds float, float addrspace(1)* %0, i64 %155\l  %157 = load float, float addrspace(1)* %156, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %158 = mul nsw i32 %153, %5\l  %159 = add nsw i32 %158, %17\l  %160 = sext i32 %159 to i64\l  %161 = getelementptr inbounds float, float addrspace(1)* %1, i64 %160\l  %162 = load float, float addrspace(1)* %161, align 4, !tbaa !7,\l... !amdgpu.noclobber !5\l  %163 = fmul contract float %157, %162\l  %164 = fadd contract float %152, %163\l  %165 = add nuw nsw i32 %67, 8\l  %166 = add i32 %69, 8\l  %167 = icmp eq i32 %166, %32\l  br i1 %167, label %33, label %66, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5bc3aa0:s0 -> Node0x5bc59f0;
	Node0x5bc3aa0:s1 -> Node0x5bc3aa0;
}
