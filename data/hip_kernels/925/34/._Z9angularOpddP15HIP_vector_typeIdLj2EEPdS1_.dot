digraph "CFG for '_Z9angularOpddP15HIP_vector_typeIdLj2EEPdS1_' function" {
	label="CFG for '_Z9angularOpddP15HIP_vector_typeIdLj2EEPdS1_' function";

	Node0x56ab1a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %7 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %8 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %9 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 12\l  %10 = bitcast i8 addrspace(4)* %9 to i32 addrspace(4)*\l  %11 = load i32, i32 addrspace(4)* %10, align 4, !tbaa !4\l  %12 = getelementptr i8, i8 addrspace(4)* %8, i64 4\l  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*\l  %14 = load i16, i16 addrspace(4)* %13, align 4, !range !13, !invariant.load\l... !14\l  %15 = zext i16 %14 to i32\l  %16 = udiv i32 %11, %15\l  %17 = mul i32 %16, %15\l  %18 = icmp ugt i32 %11, %17\l  %19 = zext i1 %18 to i32\l  %20 = add i32 %16, %19\l  %21 = getelementptr inbounds i8, i8 addrspace(4)* %8, i64 16\l  %22 = bitcast i8 addrspace(4)* %21 to i32 addrspace(4)*\l  %23 = load i32, i32 addrspace(4)* %22, align 8, !tbaa !15\l  %24 = getelementptr i8, i8 addrspace(4)* %8, i64 6\l  %25 = bitcast i8 addrspace(4)* %24 to i16 addrspace(4)*\l  %26 = load i16, i16 addrspace(4)* %25, align 2, !range !13, !invariant.load\l... !14\l  %27 = zext i16 %26 to i32\l  %28 = udiv i32 %23, %27\l  %29 = mul i32 %28, %27\l  %30 = icmp ugt i32 %23, %29\l  %31 = zext i1 %30 to i32\l  %32 = add i32 %28, %31\l  %33 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %34 = mul i32 %32, %33\l  %35 = add i32 %34, %7\l  %36 = mul i32 %35, %20\l  %37 = add i32 %36, %6\l  %38 = getelementptr i8, i8 addrspace(4)* %8, i64 8\l  %39 = bitcast i8 addrspace(4)* %38 to i16 addrspace(4)*\l  %40 = load i16, i16 addrspace(4)* %39, align 4, !range !13, !invariant.load\l... !14\l  %41 = zext i16 %40 to i32\l  %42 = mul i32 %37, %41\l  %43 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %44 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %45 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %46 = add i32 %42, %44\l  %47 = mul i32 %46, %27\l  %48 = add i32 %47, %43\l  %49 = mul i32 %48, %15\l  %50 = add i32 %49, %45\l  %51 = fneg contract double %0\l  %52 = zext i32 %50 to i64\l  %53 = getelementptr inbounds double, double addrspace(1)* %3, i64 %52\l  %54 = load double, double addrspace(1)* %53, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %55 = fmul contract double %54, %51\l  %56 = fmul contract double %55, %1\l  %57 = fmul double %56, 0x3FF71547652B82FE\l  %58 = tail call double @llvm.rint.f64(double %57)\l  %59 = fneg double %58\l  %60 = tail call double @llvm.fma.f64(double %59, double 0x3FE62E42FEFA39EF,\l... double %56)\l  %61 = tail call double @llvm.fma.f64(double %59, double 0x3C7ABC9E3B39803F,\l... double %60)\l  %62 = tail call double @llvm.fma.f64(double %61, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %63 = tail call double @llvm.fma.f64(double %61, double %62, double\l... 0x3EC71DEE623FDE64)\l  %64 = tail call double @llvm.fma.f64(double %61, double %63, double\l... 0x3EFA01997C89E6B0)\l  %65 = tail call double @llvm.fma.f64(double %61, double %64, double\l... 0x3F2A01A014761F6E)\l  %66 = tail call double @llvm.fma.f64(double %61, double %65, double\l... 0x3F56C16C1852B7B0)\l  %67 = tail call double @llvm.fma.f64(double %61, double %66, double\l... 0x3F81111111122322)\l  %68 = tail call double @llvm.fma.f64(double %61, double %67, double\l... 0x3FA55555555502A1)\l  %69 = tail call double @llvm.fma.f64(double %61, double %68, double\l... 0x3FC5555555555511)\l  %70 = tail call double @llvm.fma.f64(double %61, double %69, double\l... 0x3FE000000000000B)\l  %71 = tail call double @llvm.fma.f64(double %61, double %70, double\l... 1.000000e+00)\l  %72 = tail call double @llvm.fma.f64(double %61, double %71, double\l... 1.000000e+00)\l  %73 = fptosi double %58 to i32\l  %74 = tail call double @llvm.amdgcn.ldexp.f64(double %72, i32 %73)\l  %75 = fcmp ogt double %56, 1.024000e+03\l  %76 = select i1 %75, double 0x7FF0000000000000, double %74\l  %77 = fcmp olt double %56, -1.075000e+03\l  %78 = select i1 %77, double 0.000000e+00, double %76\l  %79 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %52, i32 0, i32 0, i32 0, i64 0\l  %80 = load double, double addrspace(1)* %79, align 16, !tbaa !21,\l... !amdgpu.noclobber !14\l  %81 = fmul contract double %80, %78\l  %82 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %2, i64 %52, i32 0, i32 0, i32 0, i64 1\l  %83 = load double, double addrspace(1)* %82, align 8, !tbaa !21,\l... !amdgpu.noclobber !14\l  %84 = fmul contract double %83, %78\l  %85 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %52, i32 0, i32 0, i32 0, i64 0\l  store double %81, double addrspace(1)* %85, align 16\l  %86 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %4, i64 %52, i32 0, i32 0, i32 0, i64 1\l  store double %84, double addrspace(1)* %86, align 8\l  ret void\l}"];
}
