digraph "CFG for '_Z16complexMagnitudeP15HIP_vector_typeIdLj2EEPd' function" {
	label="CFG for '_Z16complexMagnitudeP15HIP_vector_typeIdLj2EEPd' function";

	Node0x5e4eb30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %4 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %6 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12\l  %7 = bitcast i8 addrspace(4)* %6 to i32 addrspace(4)*\l  %8 = load i32, i32 addrspace(4)* %7, align 4, !tbaa !4\l  %9 = getelementptr i8, i8 addrspace(4)* %5, i64 4\l  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*\l  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !13, !invariant.load\l... !14\l  %12 = zext i16 %11 to i32\l  %13 = udiv i32 %8, %12\l  %14 = mul i32 %13, %12\l  %15 = icmp ugt i32 %8, %14\l  %16 = zext i1 %15 to i32\l  %17 = add i32 %13, %16\l  %18 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 16\l  %19 = bitcast i8 addrspace(4)* %18 to i32 addrspace(4)*\l  %20 = load i32, i32 addrspace(4)* %19, align 8, !tbaa !15\l  %21 = getelementptr i8, i8 addrspace(4)* %5, i64 6\l  %22 = bitcast i8 addrspace(4)* %21 to i16 addrspace(4)*\l  %23 = load i16, i16 addrspace(4)* %22, align 2, !range !13, !invariant.load\l... !14\l  %24 = zext i16 %23 to i32\l  %25 = udiv i32 %20, %24\l  %26 = mul i32 %25, %24\l  %27 = icmp ugt i32 %20, %26\l  %28 = zext i1 %27 to i32\l  %29 = add i32 %25, %28\l  %30 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %31 = mul i32 %29, %30\l  %32 = add i32 %31, %4\l  %33 = mul i32 %32, %17\l  %34 = add i32 %33, %3\l  %35 = getelementptr i8, i8 addrspace(4)* %5, i64 8\l  %36 = bitcast i8 addrspace(4)* %35 to i16 addrspace(4)*\l  %37 = load i16, i16 addrspace(4)* %36, align 4, !range !13, !invariant.load\l... !14\l  %38 = zext i16 %37 to i32\l  %39 = mul i32 %34, %38\l  %40 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %41 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %42 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %43 = add i32 %39, %41\l  %44 = mul i32 %43, %24\l  %45 = add i32 %44, %40\l  %46 = mul i32 %45, %12\l  %47 = add i32 %46, %42\l  %48 = sext i32 %47 to i64\l  %49 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %48, i32 0, i32 0, i32 0, i64 0\l  %50 = load double, double addrspace(1)* %49, align 16, !tbaa !17,\l... !amdgpu.noclobber !14\l  %51 = fmul contract double %50, %50\l  %52 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %0, i64 %48, i32 0, i32 0, i32 0, i64 1\l  %53 = load double, double addrspace(1)* %52, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %54 = fmul contract double %53, %53\l  %55 = fadd contract double %51, %54\l  %56 = fcmp olt double %55, 0x1000000000000000\l  %57 = select i1 %56, double 0x4FF0000000000000, double 1.000000e+00\l  %58 = fmul double %55, %57\l  %59 = tail call double @llvm.amdgcn.rsq.f64(double %58)\l  %60 = fmul double %58, %59\l  %61 = fmul double %59, 5.000000e-01\l  %62 = fneg double %61\l  %63 = tail call double @llvm.fma.f64(double %62, double %60, double\l... 5.000000e-01)\l  %64 = tail call double @llvm.fma.f64(double %61, double %63, double %61)\l  %65 = tail call double @llvm.fma.f64(double %60, double %63, double %60)\l  %66 = fneg double %65\l  %67 = tail call double @llvm.fma.f64(double %66, double %65, double %58)\l  %68 = tail call double @llvm.fma.f64(double %67, double %64, double %65)\l  %69 = fneg double %68\l  %70 = tail call double @llvm.fma.f64(double %69, double %68, double %58)\l  %71 = tail call double @llvm.fma.f64(double %70, double %64, double %68)\l  %72 = select i1 %56, double 0x37F0000000000000, double 1.000000e+00\l  %73 = fmul double %72, %71\l  %74 = fcmp oeq double %58, 0.000000e+00\l  %75 = fcmp oeq double %58, 0x7FF0000000000000\l  %76 = or i1 %74, %75\l  %77 = select i1 %76, double %58, double %73\l  %78 = getelementptr inbounds double, double addrspace(1)* %1, i64 %48\l  store double %77, double addrspace(1)* %78, align 8, !tbaa !20\l  ret void\l}"];
}
