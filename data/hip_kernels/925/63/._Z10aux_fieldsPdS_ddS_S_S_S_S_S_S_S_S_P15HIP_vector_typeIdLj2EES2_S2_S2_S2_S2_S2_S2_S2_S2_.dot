digraph "CFG for '_Z10aux_fieldsPdS_ddS_S_S_S_S_S_S_S_S_P15HIP_vector_typeIdLj2EES2_S2_S2_S2_S2_S2_S2_S2_S2_' function" {
	label="CFG for '_Z10aux_fieldsPdS_ddS_S_S_S_S_S_S_S_S_P15HIP_vector_typeIdLj2EES2_S2_S2_S2_S2_S2_S2_S2_S2_' function";

	Node0x4b60230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %26 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %27 = getelementptr inbounds i8, i8 addrspace(4)* %26, i64 12\l  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*\l  %29 = load i32, i32 addrspace(4)* %28, align 4, !tbaa !4\l  %30 = getelementptr i8, i8 addrspace(4)* %26, i64 4\l  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*\l  %32 = load i16, i16 addrspace(4)* %31, align 4, !range !13, !invariant.load\l... !14\l  %33 = zext i16 %32 to i32\l  %34 = udiv i32 %29, %33\l  %35 = mul i32 %34, %33\l  %36 = icmp ugt i32 %29, %35\l  %37 = zext i1 %36 to i32\l  %38 = add i32 %34, %37\l  %39 = getelementptr inbounds i8, i8 addrspace(4)* %26, i64 16\l  %40 = bitcast i8 addrspace(4)* %39 to i32 addrspace(4)*\l  %41 = load i32, i32 addrspace(4)* %40, align 8, !tbaa !15\l  %42 = getelementptr i8, i8 addrspace(4)* %26, i64 6\l  %43 = bitcast i8 addrspace(4)* %42 to i16 addrspace(4)*\l  %44 = load i16, i16 addrspace(4)* %43, align 2, !range !13, !invariant.load\l... !14\l  %45 = zext i16 %44 to i32\l  %46 = udiv i32 %41, %45\l  %47 = mul i32 %46, %45\l  %48 = icmp ugt i32 %41, %47\l  %49 = zext i1 %48 to i32\l  %50 = add i32 %46, %49\l  %51 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %52 = mul i32 %50, %51\l  %53 = add i32 %52, %25\l  %54 = mul i32 %53, %38\l  %55 = add i32 %54, %24\l  %56 = mul i32 %24, %33\l  %57 = mul i32 %25, %45\l  %58 = getelementptr i8, i8 addrspace(4)* %26, i64 8\l  %59 = bitcast i8 addrspace(4)* %58 to i16 addrspace(4)*\l  %60 = load i16, i16 addrspace(4)* %59, align 4, !range !13, !invariant.load\l... !14\l  %61 = zext i16 %60 to i32\l  %62 = mul i32 %51, %61\l  %63 = mul i32 %55, %61\l  %64 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %65 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %66 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %67 = add i32 %63, %65\l  %68 = mul i32 %67, %45\l  %69 = add i32 %68, %64\l  %70 = mul i32 %69, %33\l  %71 = add i32 %70, %66\l  %72 = add i32 %56, %66\l  %73 = add i32 %57, %64\l  %74 = add i32 %62, %65\l  %75 = sext i32 %71 to i64\l  %76 = getelementptr inbounds double, double addrspace(1)* %0, i64 %75\l  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %78 = fneg contract double %77\l  %79 = fdiv contract double %2, 0x38F185A6A75D2CEB\l  %80 = fmul contract double %79, %78\l  %81 = fmul double %80, 0x3FF71547652B82FE\l  %82 = tail call double @llvm.rint.f64(double %81)\l  %83 = fneg double %82\l  %84 = tail call double @llvm.fma.f64(double %83, double 0x3FE62E42FEFA39EF,\l... double %80)\l  %85 = tail call double @llvm.fma.f64(double %83, double 0x3C7ABC9E3B39803F,\l... double %84)\l  %86 = tail call double @llvm.fma.f64(double %85, double 0x3E5ADE156A5DCB37,\l... double 0x3E928AF3FCA7AB0C)\l  %87 = tail call double @llvm.fma.f64(double %85, double %86, double\l... 0x3EC71DEE623FDE64)\l  %88 = tail call double @llvm.fma.f64(double %85, double %87, double\l... 0x3EFA01997C89E6B0)\l  %89 = tail call double @llvm.fma.f64(double %85, double %88, double\l... 0x3F2A01A014761F6E)\l  %90 = tail call double @llvm.fma.f64(double %85, double %89, double\l... 0x3F56C16C1852B7B0)\l  %91 = tail call double @llvm.fma.f64(double %85, double %90, double\l... 0x3F81111111122322)\l  %92 = tail call double @llvm.fma.f64(double %85, double %91, double\l... 0x3FA55555555502A1)\l  %93 = tail call double @llvm.fma.f64(double %85, double %92, double\l... 0x3FC5555555555511)\l  %94 = tail call double @llvm.fma.f64(double %85, double %93, double\l... 0x3FE000000000000B)\l  %95 = tail call double @llvm.fma.f64(double %85, double %94, double\l... 1.000000e+00)\l  %96 = tail call double @llvm.fma.f64(double %85, double %95, double\l... 1.000000e+00)\l  %97 = fptosi double %82 to i32\l  %98 = tail call double @llvm.amdgcn.ldexp.f64(double %96, i32 %97)\l  %99 = fcmp ogt double %80, 1.024000e+03\l  %100 = select i1 %99, double 0x7FF0000000000000, double %98\l  %101 = fcmp olt double %80, -1.075000e+03\l  %102 = select i1 %101, double 0.000000e+00, double %100\l  %103 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %13, i64 %75, i32 0, i32 0, i32 0, i64 0\l  store double %102, double addrspace(1)* %103, align 16, !tbaa !21\l  %104 = getelementptr inbounds double, double addrspace(1)* %1, i64 %75\l  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !17\l  %106 = fneg contract double %105\l  %107 = fdiv contract double %2, 0x38E185A6A75D2CEB\l  %108 = fmul contract double %107, %106\l  %109 = fmul double %108, 0x3FF71547652B82FE\l  %110 = tail call double @llvm.rint.f64(double %109)\l  %111 = fneg double %110\l  %112 = tail call double @llvm.fma.f64(double %111, double\l... 0x3FE62E42FEFA39EF, double %108)\l  %113 = tail call double @llvm.fma.f64(double %111, double\l... 0x3C7ABC9E3B39803F, double %112)\l  %114 = tail call double @llvm.fma.f64(double %113, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %115 = tail call double @llvm.fma.f64(double %113, double %114, double\l... 0x3EC71DEE623FDE64)\l  %116 = tail call double @llvm.fma.f64(double %113, double %115, double\l... 0x3EFA01997C89E6B0)\l  %117 = tail call double @llvm.fma.f64(double %113, double %116, double\l... 0x3F2A01A014761F6E)\l  %118 = tail call double @llvm.fma.f64(double %113, double %117, double\l... 0x3F56C16C1852B7B0)\l  %119 = tail call double @llvm.fma.f64(double %113, double %118, double\l... 0x3F81111111122322)\l  %120 = tail call double @llvm.fma.f64(double %113, double %119, double\l... 0x3FA55555555502A1)\l  %121 = tail call double @llvm.fma.f64(double %113, double %120, double\l... 0x3FC5555555555511)\l  %122 = tail call double @llvm.fma.f64(double %113, double %121, double\l... 0x3FE000000000000B)\l  %123 = tail call double @llvm.fma.f64(double %113, double %122, double\l... 1.000000e+00)\l  %124 = tail call double @llvm.fma.f64(double %113, double %123, double\l... 1.000000e+00)\l  %125 = fptosi double %110 to i32\l  %126 = tail call double @llvm.amdgcn.ldexp.f64(double %124, i32 %125)\l  %127 = fcmp ogt double %108, 1.024000e+03\l  %128 = select i1 %127, double 0x7FF0000000000000, double %126\l  %129 = fcmp olt double %108, -1.075000e+03\l  %130 = select i1 %129, double 0.000000e+00, double %128\l  %131 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %15, i64 %75, i32 0, i32 0, i32 0, i64 0\l  store double %130, double addrspace(1)* %131, align 16, !tbaa !21\l  %132 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %13, i64 %75, i32 0, i32 0, i32 0, i64 1\l  store double 0.000000e+00, double addrspace(1)* %132, align 8, !tbaa !21\l  %133 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %15, i64 %75, i32 0, i32 0, i32 0, i64 1\l  store double 0.000000e+00, double addrspace(1)* %133, align 8, !tbaa !21\l  %134 = getelementptr inbounds double, double addrspace(1)* %4, i64 %75\l  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !17\l  %136 = sext i32 %72 to i64\l  %137 = getelementptr inbounds double, double addrspace(1)* %7, i64 %136\l  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !17\l  %139 = fmul contract double %135, %138\l  %140 = getelementptr inbounds double, double addrspace(1)* %10, i64 %75\l  store double %139, double addrspace(1)* %140, align 8, !tbaa !17\l  %141 = getelementptr inbounds double, double addrspace(1)* %5, i64 %75\l  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !17\l  %143 = sext i32 %73 to i64\l  %144 = getelementptr inbounds double, double addrspace(1)* %8, i64 %143\l  %145 = load double, double addrspace(1)* %144, align 8, !tbaa !17\l  %146 = fmul contract double %142, %145\l  %147 = getelementptr inbounds double, double addrspace(1)* %11, i64 %75\l  store double %146, double addrspace(1)* %147, align 8, !tbaa !17\l  %148 = getelementptr inbounds double, double addrspace(1)* %6, i64 %75\l  %149 = load double, double addrspace(1)* %148, align 8, !tbaa !17\l  %150 = sext i32 %74 to i64\l  %151 = getelementptr inbounds double, double addrspace(1)* %9, i64 %150\l  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !17\l  %153 = fmul contract double %149, %152\l  %154 = getelementptr inbounds double, double addrspace(1)* %12, i64 %75\l  store double %153, double addrspace(1)* %154, align 8, !tbaa !17\l  %155 = load double, double addrspace(1)* %140, align 8, !tbaa !17\l  %156 = fneg contract double %155\l  %157 = fmul contract double %156, %2\l  %158 = fmul double %157, 0x3FF71547652B82FE\l  %159 = tail call double @llvm.rint.f64(double %158)\l  %160 = fneg double %159\l  %161 = tail call double @llvm.fma.f64(double %160, double\l... 0x3FE62E42FEFA39EF, double %157)\l  %162 = tail call double @llvm.fma.f64(double %160, double\l... 0x3C7ABC9E3B39803F, double %161)\l  %163 = tail call double @llvm.fma.f64(double %162, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %164 = tail call double @llvm.fma.f64(double %162, double %163, double\l... 0x3EC71DEE623FDE64)\l  %165 = tail call double @llvm.fma.f64(double %162, double %164, double\l... 0x3EFA01997C89E6B0)\l  %166 = tail call double @llvm.fma.f64(double %162, double %165, double\l... 0x3F2A01A014761F6E)\l  %167 = tail call double @llvm.fma.f64(double %162, double %166, double\l... 0x3F56C16C1852B7B0)\l  %168 = tail call double @llvm.fma.f64(double %162, double %167, double\l... 0x3F81111111122322)\l  %169 = tail call double @llvm.fma.f64(double %162, double %168, double\l... 0x3FA55555555502A1)\l  %170 = tail call double @llvm.fma.f64(double %162, double %169, double\l... 0x3FC5555555555511)\l  %171 = tail call double @llvm.fma.f64(double %162, double %170, double\l... 0x3FE000000000000B)\l  %172 = tail call double @llvm.fma.f64(double %162, double %171, double\l... 1.000000e+00)\l  %173 = tail call double @llvm.fma.f64(double %162, double %172, double\l... 1.000000e+00)\l  %174 = fptosi double %159 to i32\l  %175 = tail call double @llvm.amdgcn.ldexp.f64(double %173, i32 %174)\l  %176 = fcmp ogt double %157, 1.024000e+03\l  %177 = select i1 %176, double 0x7FF0000000000000, double %175\l  %178 = fcmp olt double %157, -1.075000e+03\l  %179 = select i1 %178, double 0.000000e+00, double %177\l  %180 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %17, i64 %75, i32 0, i32 0, i32 0, i64 0\l  store double %179, double addrspace(1)* %180, align 16, !tbaa !21\l  %181 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %17, i64 %75, i32 0, i32 0, i32 0, i64 1\l  store double 0.000000e+00, double addrspace(1)* %181, align 8, !tbaa !21\l  %182 = load double, double addrspace(1)* %147, align 8, !tbaa !17\l  %183 = fneg contract double %182\l  %184 = fmul contract double %183, %2\l  %185 = fmul double %184, 0x3FF71547652B82FE\l  %186 = tail call double @llvm.rint.f64(double %185)\l  %187 = fneg double %186\l  %188 = tail call double @llvm.fma.f64(double %187, double\l... 0x3FE62E42FEFA39EF, double %184)\l  %189 = tail call double @llvm.fma.f64(double %187, double\l... 0x3C7ABC9E3B39803F, double %188)\l  %190 = tail call double @llvm.fma.f64(double %189, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %191 = tail call double @llvm.fma.f64(double %189, double %190, double\l... 0x3EC71DEE623FDE64)\l  %192 = tail call double @llvm.fma.f64(double %189, double %191, double\l... 0x3EFA01997C89E6B0)\l  %193 = tail call double @llvm.fma.f64(double %189, double %192, double\l... 0x3F2A01A014761F6E)\l  %194 = tail call double @llvm.fma.f64(double %189, double %193, double\l... 0x3F56C16C1852B7B0)\l  %195 = tail call double @llvm.fma.f64(double %189, double %194, double\l... 0x3F81111111122322)\l  %196 = tail call double @llvm.fma.f64(double %189, double %195, double\l... 0x3FA55555555502A1)\l  %197 = tail call double @llvm.fma.f64(double %189, double %196, double\l... 0x3FC5555555555511)\l  %198 = tail call double @llvm.fma.f64(double %189, double %197, double\l... 0x3FE000000000000B)\l  %199 = tail call double @llvm.fma.f64(double %189, double %198, double\l... 1.000000e+00)\l  %200 = tail call double @llvm.fma.f64(double %189, double %199, double\l... 1.000000e+00)\l  %201 = fptosi double %186 to i32\l  %202 = tail call double @llvm.amdgcn.ldexp.f64(double %200, i32 %201)\l  %203 = fcmp ogt double %184, 1.024000e+03\l  %204 = select i1 %203, double 0x7FF0000000000000, double %202\l  %205 = fcmp olt double %184, -1.075000e+03\l  %206 = select i1 %205, double 0.000000e+00, double %204\l  %207 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %18, i64 %75, i32 0, i32 0, i32 0, i64 0\l  store double %206, double addrspace(1)* %207, align 16, !tbaa !21\l  %208 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %18, i64 %75, i32 0, i32 0, i32 0, i64 1\l  store double 0.000000e+00, double addrspace(1)* %208, align 8, !tbaa !21\l  %209 = load double, double addrspace(1)* %154, align 8, !tbaa !17\l  %210 = fneg contract double %209\l  %211 = fmul contract double %210, %2\l  %212 = fmul double %211, 0x3FF71547652B82FE\l  %213 = tail call double @llvm.rint.f64(double %212)\l  %214 = fneg double %213\l  %215 = tail call double @llvm.fma.f64(double %214, double\l... 0x3FE62E42FEFA39EF, double %211)\l  %216 = tail call double @llvm.fma.f64(double %214, double\l... 0x3C7ABC9E3B39803F, double %215)\l  %217 = tail call double @llvm.fma.f64(double %216, double\l... 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)\l  %218 = tail call double @llvm.fma.f64(double %216, double %217, double\l... 0x3EC71DEE623FDE64)\l  %219 = tail call double @llvm.fma.f64(double %216, double %218, double\l... 0x3EFA01997C89E6B0)\l  %220 = tail call double @llvm.fma.f64(double %216, double %219, double\l... 0x3F2A01A014761F6E)\l  %221 = tail call double @llvm.fma.f64(double %216, double %220, double\l... 0x3F56C16C1852B7B0)\l  %222 = tail call double @llvm.fma.f64(double %216, double %221, double\l... 0x3F81111111122322)\l  %223 = tail call double @llvm.fma.f64(double %216, double %222, double\l... 0x3FA55555555502A1)\l  %224 = tail call double @llvm.fma.f64(double %216, double %223, double\l... 0x3FC5555555555511)\l  %225 = tail call double @llvm.fma.f64(double %216, double %224, double\l... 0x3FE000000000000B)\l  %226 = tail call double @llvm.fma.f64(double %216, double %225, double\l... 1.000000e+00)\l  %227 = tail call double @llvm.fma.f64(double %216, double %226, double\l... 1.000000e+00)\l  %228 = fptosi double %213 to i32\l  %229 = tail call double @llvm.amdgcn.ldexp.f64(double %227, i32 %228)\l  %230 = fcmp ogt double %211, 1.024000e+03\l  %231 = select i1 %230, double 0x7FF0000000000000, double %229\l  %232 = fcmp olt double %211, -1.075000e+03\l  %233 = select i1 %232, double 0.000000e+00, double %231\l  %234 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %19, i64 %75, i32 0, i32 0, i32 0, i64 0\l  store double %233, double addrspace(1)* %234, align 16, !tbaa !21\l  %235 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %19, i64 %75, i32 0, i32 0, i32 0, i64 1\l  store double 0.000000e+00, double addrspace(1)* %235, align 8, !tbaa !21\l  %236 = load double, double addrspace(1)* %76, align 8, !tbaa !17\l  %237 = fneg contract double %236\l  %238 = fdiv contract double %3, 0x38F185A6A75D2CEB\l  %239 = fmul contract double %238, %237\l  %240 = tail call double @llvm.fabs.f64(double %239)\l  %241 = fcmp olt double %240, 0x41D0000000000000\l  br i1 %241, label %242, label %261\l|{<s0>T|<s1>F}}"];
	Node0x4b60230:s0 -> Node0x4b72240;
	Node0x4b60230:s1 -> Node0x4b722d0;
	Node0x4b72240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%242:\l242:                                              \l  %243 = fmul double %240, 0x3FE45F306DC9C883\l  %244 = tail call double @llvm.rint.f64(double %243)\l  %245 = tail call double @llvm.fma.f64(double %244, double\l... 0xBFF921FB54442D18, double %240)\l  %246 = tail call double @llvm.fma.f64(double %244, double\l... 0xBC91A62633145C00, double %245)\l  %247 = fmul double %244, 0x3C91A62633145C00\l  %248 = fneg double %247\l  %249 = tail call double @llvm.fma.f64(double %244, double\l... 0x3C91A62633145C00, double %248)\l  %250 = fsub double %245, %247\l  %251 = fsub double %245, %250\l  %252 = fsub double %251, %247\l  %253 = fsub double %250, %246\l  %254 = fadd double %253, %252\l  %255 = fsub double %254, %249\l  %256 = tail call double @llvm.fma.f64(double %244, double\l... 0xB97B839A252049C0, double %255)\l  %257 = fadd double %246, %256\l  %258 = fsub double %257, %246\l  %259 = fsub double %256, %258\l  %260 = fptosi double %244 to i32\l  br label %337\l}"];
	Node0x4b72240 -> Node0x4b6b400;
	Node0x4b722d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%261:\l261:                                              \l  %262 = tail call double @llvm.amdgcn.trig.preop.f64(double %240, i32 0)\l  %263 = tail call double @llvm.amdgcn.trig.preop.f64(double %240, i32 1)\l  %264 = tail call double @llvm.amdgcn.trig.preop.f64(double %240, i32 2)\l  %265 = fcmp oge double %240, 0x7B00000000000000\l  %266 = tail call double @llvm.amdgcn.ldexp.f64(double %240, i32 -128)\l  %267 = select i1 %265, double %266, double %240\l  %268 = fmul double %264, %267\l  %269 = fneg double %268\l  %270 = tail call double @llvm.fma.f64(double %264, double %267, double %269)\l  %271 = fmul double %263, %267\l  %272 = fneg double %271\l  %273 = tail call double @llvm.fma.f64(double %263, double %267, double %272)\l  %274 = fmul double %262, %267\l  %275 = fneg double %274\l  %276 = tail call double @llvm.fma.f64(double %262, double %267, double %275)\l  %277 = fadd double %271, %276\l  %278 = fsub double %277, %271\l  %279 = fsub double %277, %278\l  %280 = fsub double %276, %278\l  %281 = fsub double %271, %279\l  %282 = fadd double %280, %281\l  %283 = fadd double %268, %273\l  %284 = fsub double %283, %268\l  %285 = fsub double %283, %284\l  %286 = fsub double %273, %284\l  %287 = fsub double %268, %285\l  %288 = fadd double %286, %287\l  %289 = fadd double %283, %282\l  %290 = fsub double %289, %283\l  %291 = fsub double %289, %290\l  %292 = fsub double %282, %290\l  %293 = fsub double %283, %291\l  %294 = fadd double %292, %293\l  %295 = fadd double %288, %294\l  %296 = fadd double %270, %295\l  %297 = fadd double %274, %277\l  %298 = fsub double %297, %274\l  %299 = fsub double %277, %298\l  %300 = fadd double %299, %289\l  %301 = fsub double %300, %299\l  %302 = fsub double %289, %301\l  %303 = fadd double %302, %296\l  %304 = tail call double @llvm.amdgcn.ldexp.f64(double %297, i32 -2)\l  %305 = tail call double @llvm.amdgcn.fract.f64(double %304)\l  %306 = tail call i1 @llvm.amdgcn.class.f64(double %304, i32 516)\l  %307 = select i1 %306, double 0.000000e+00, double %305\l  %308 = tail call double @llvm.amdgcn.ldexp.f64(double %307, i32 2)\l  %309 = fadd double %308, %300\l  %310 = fcmp olt double %309, 0.000000e+00\l  %311 = select i1 %310, double 4.000000e+00, double 0.000000e+00\l  %312 = fadd double %308, %311\l  %313 = fadd double %300, %312\l  %314 = fptosi double %313 to i32\l  %315 = sitofp i32 %314 to double\l  %316 = fsub double %312, %315\l  %317 = fadd double %300, %316\l  %318 = fsub double %317, %316\l  %319 = fsub double %300, %318\l  %320 = fadd double %303, %319\l  %321 = fcmp oge double %317, 5.000000e-01\l  %322 = zext i1 %321 to i32\l  %323 = add nsw i32 %322, %314\l  %324 = select i1 %321, double 1.000000e+00, double 0.000000e+00\l  %325 = fsub double %317, %324\l  %326 = fadd double %325, %320\l  %327 = fsub double %326, %325\l  %328 = fsub double %320, %327\l  %329 = fmul double %326, 0x3FF921FB54442D18\l  %330 = fneg double %329\l  %331 = tail call double @llvm.fma.f64(double %326, double\l... 0x3FF921FB54442D18, double %330)\l  %332 = tail call double @llvm.fma.f64(double %326, double\l... 0x3C91A62633145C07, double %331)\l  %333 = tail call double @llvm.fma.f64(double %328, double\l... 0x3FF921FB54442D18, double %332)\l  %334 = fadd double %329, %333\l  %335 = fsub double %334, %329\l  %336 = fsub double %333, %335\l  br label %337\l}"];
	Node0x4b722d0 -> Node0x4b6b400;
	Node0x4b6b400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%337:\l337:                                              \l  %338 = phi double [ %259, %242 ], [ %336, %261 ]\l  %339 = phi double [ %257, %242 ], [ %334, %261 ]\l  %340 = phi i32 [ %260, %242 ], [ %323, %261 ]\l  %341 = fmul double %339, %339\l  %342 = fmul double %341, 5.000000e-01\l  %343 = fsub double 1.000000e+00, %342\l  %344 = fsub double 1.000000e+00, %343\l  %345 = fsub double %344, %342\l  %346 = fmul double %341, %341\l  %347 = tail call double @llvm.fma.f64(double %341, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %348 = tail call double @llvm.fma.f64(double %341, double %347, double\l... 0xBE927E4FA17F65F6)\l  %349 = tail call double @llvm.fma.f64(double %341, double %348, double\l... 0x3EFA01A019F4EC90)\l  %350 = tail call double @llvm.fma.f64(double %341, double %349, double\l... 0xBF56C16C16C16967)\l  %351 = tail call double @llvm.fma.f64(double %341, double %350, double\l... 0x3FA5555555555555)\l  %352 = fneg double %338\l  %353 = tail call double @llvm.fma.f64(double %339, double %352, double %345)\l  %354 = tail call double @llvm.fma.f64(double %346, double %351, double %353)\l  %355 = fadd double %343, %354\l  %356 = tail call double @llvm.fma.f64(double %341, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %357 = tail call double @llvm.fma.f64(double %341, double %356, double\l... 0x3EC71DE3796CDE01)\l  %358 = tail call double @llvm.fma.f64(double %341, double %357, double\l... 0xBF2A01A019E83E5C)\l  %359 = tail call double @llvm.fma.f64(double %341, double %358, double\l... 0x3F81111111110BB3)\l  %360 = fneg double %341\l  %361 = fmul double %339, %360\l  %362 = fmul double %338, 5.000000e-01\l  %363 = tail call double @llvm.fma.f64(double %361, double %359, double %362)\l  %364 = tail call double @llvm.fma.f64(double %341, double %363, double %352)\l  %365 = tail call double @llvm.fma.f64(double %361, double\l... 0xBFC5555555555555, double %364)\l  %366 = fsub double %339, %365\l  %367 = fneg double %366\l  %368 = and i32 %340, 1\l  %369 = icmp eq i32 %368, 0\l  %370 = select i1 %369, double %355, double %367\l  %371 = bitcast double %370 to \<2 x i32\>\l  %372 = shl i32 %340, 30\l  %373 = and i32 %372, -2147483648\l  %374 = extractelement \<2 x i32\> %371, i64 1\l  %375 = xor i32 %374, %373\l  %376 = insertelement \<2 x i32\> %371, i32 %375, i64 1\l  %377 = tail call i1 @llvm.amdgcn.class.f64(double %240, i32 504)\l  %378 = select i1 %377, \<2 x i32\> %376, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %379 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %14, i64 %75, i32 0, i32 0, i32 0, i64 0\l  %380 = bitcast double addrspace(1)* %379 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %378, \<2 x i32\> addrspace(1)* %380, align 16, !tbaa !21\l  %381 = load double, double addrspace(1)* %76, align 8, !tbaa !17\l  %382 = fneg contract double %381\l  %383 = fmul contract double %238, %382\l  %384 = tail call double @llvm.fabs.f64(double %383)\l  %385 = fcmp olt double %384, 0x41D0000000000000\l  br i1 %385, label %386, label %405\l|{<s0>T|<s1>F}}"];
	Node0x4b6b400:s0 -> Node0x4b79da0;
	Node0x4b6b400:s1 -> Node0x4b79df0;
	Node0x4b79da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%386:\l386:                                              \l  %387 = fmul double %384, 0x3FE45F306DC9C883\l  %388 = tail call double @llvm.rint.f64(double %387)\l  %389 = tail call double @llvm.fma.f64(double %388, double\l... 0xBFF921FB54442D18, double %384)\l  %390 = tail call double @llvm.fma.f64(double %388, double\l... 0xBC91A62633145C00, double %389)\l  %391 = fmul double %388, 0x3C91A62633145C00\l  %392 = fneg double %391\l  %393 = tail call double @llvm.fma.f64(double %388, double\l... 0x3C91A62633145C00, double %392)\l  %394 = fsub double %389, %391\l  %395 = fsub double %389, %394\l  %396 = fsub double %395, %391\l  %397 = fsub double %394, %390\l  %398 = fadd double %397, %396\l  %399 = fsub double %398, %393\l  %400 = tail call double @llvm.fma.f64(double %388, double\l... 0xB97B839A252049C0, double %399)\l  %401 = fadd double %390, %400\l  %402 = fsub double %401, %390\l  %403 = fsub double %400, %402\l  %404 = fptosi double %388 to i32\l  br label %481\l}"];
	Node0x4b79da0 -> Node0x4b7abf0;
	Node0x4b79df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%405:\l405:                                              \l  %406 = tail call double @llvm.amdgcn.trig.preop.f64(double %384, i32 0)\l  %407 = tail call double @llvm.amdgcn.trig.preop.f64(double %384, i32 1)\l  %408 = tail call double @llvm.amdgcn.trig.preop.f64(double %384, i32 2)\l  %409 = fcmp oge double %384, 0x7B00000000000000\l  %410 = tail call double @llvm.amdgcn.ldexp.f64(double %384, i32 -128)\l  %411 = select i1 %409, double %410, double %384\l  %412 = fmul double %408, %411\l  %413 = fneg double %412\l  %414 = tail call double @llvm.fma.f64(double %408, double %411, double %413)\l  %415 = fmul double %407, %411\l  %416 = fneg double %415\l  %417 = tail call double @llvm.fma.f64(double %407, double %411, double %416)\l  %418 = fmul double %406, %411\l  %419 = fneg double %418\l  %420 = tail call double @llvm.fma.f64(double %406, double %411, double %419)\l  %421 = fadd double %415, %420\l  %422 = fsub double %421, %415\l  %423 = fsub double %421, %422\l  %424 = fsub double %420, %422\l  %425 = fsub double %415, %423\l  %426 = fadd double %424, %425\l  %427 = fadd double %412, %417\l  %428 = fsub double %427, %412\l  %429 = fsub double %427, %428\l  %430 = fsub double %417, %428\l  %431 = fsub double %412, %429\l  %432 = fadd double %430, %431\l  %433 = fadd double %427, %426\l  %434 = fsub double %433, %427\l  %435 = fsub double %433, %434\l  %436 = fsub double %426, %434\l  %437 = fsub double %427, %435\l  %438 = fadd double %436, %437\l  %439 = fadd double %432, %438\l  %440 = fadd double %414, %439\l  %441 = fadd double %418, %421\l  %442 = fsub double %441, %418\l  %443 = fsub double %421, %442\l  %444 = fadd double %443, %433\l  %445 = fsub double %444, %443\l  %446 = fsub double %433, %445\l  %447 = fadd double %446, %440\l  %448 = tail call double @llvm.amdgcn.ldexp.f64(double %441, i32 -2)\l  %449 = tail call double @llvm.amdgcn.fract.f64(double %448)\l  %450 = tail call i1 @llvm.amdgcn.class.f64(double %448, i32 516)\l  %451 = select i1 %450, double 0.000000e+00, double %449\l  %452 = tail call double @llvm.amdgcn.ldexp.f64(double %451, i32 2)\l  %453 = fadd double %452, %444\l  %454 = fcmp olt double %453, 0.000000e+00\l  %455 = select i1 %454, double 4.000000e+00, double 0.000000e+00\l  %456 = fadd double %452, %455\l  %457 = fadd double %444, %456\l  %458 = fptosi double %457 to i32\l  %459 = sitofp i32 %458 to double\l  %460 = fsub double %456, %459\l  %461 = fadd double %444, %460\l  %462 = fsub double %461, %460\l  %463 = fsub double %444, %462\l  %464 = fadd double %447, %463\l  %465 = fcmp oge double %461, 5.000000e-01\l  %466 = zext i1 %465 to i32\l  %467 = add nsw i32 %466, %458\l  %468 = select i1 %465, double 1.000000e+00, double 0.000000e+00\l  %469 = fsub double %461, %468\l  %470 = fadd double %469, %464\l  %471 = fsub double %470, %469\l  %472 = fsub double %464, %471\l  %473 = fmul double %470, 0x3FF921FB54442D18\l  %474 = fneg double %473\l  %475 = tail call double @llvm.fma.f64(double %470, double\l... 0x3FF921FB54442D18, double %474)\l  %476 = tail call double @llvm.fma.f64(double %470, double\l... 0x3C91A62633145C07, double %475)\l  %477 = tail call double @llvm.fma.f64(double %472, double\l... 0x3FF921FB54442D18, double %476)\l  %478 = fadd double %473, %477\l  %479 = fsub double %478, %473\l  %480 = fsub double %477, %479\l  br label %481\l}"];
	Node0x4b79df0 -> Node0x4b7abf0;
	Node0x4b7abf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%481:\l481:                                              \l  %482 = phi double [ %403, %386 ], [ %480, %405 ]\l  %483 = phi double [ %401, %386 ], [ %478, %405 ]\l  %484 = phi i32 [ %404, %386 ], [ %467, %405 ]\l  %485 = fmul double %483, %483\l  %486 = fmul double %485, 5.000000e-01\l  %487 = fsub double 1.000000e+00, %486\l  %488 = fsub double 1.000000e+00, %487\l  %489 = fsub double %488, %486\l  %490 = fmul double %485, %485\l  %491 = tail call double @llvm.fma.f64(double %485, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %492 = tail call double @llvm.fma.f64(double %485, double %491, double\l... 0xBE927E4FA17F65F6)\l  %493 = tail call double @llvm.fma.f64(double %485, double %492, double\l... 0x3EFA01A019F4EC90)\l  %494 = tail call double @llvm.fma.f64(double %485, double %493, double\l... 0xBF56C16C16C16967)\l  %495 = tail call double @llvm.fma.f64(double %485, double %494, double\l... 0x3FA5555555555555)\l  %496 = fneg double %482\l  %497 = tail call double @llvm.fma.f64(double %483, double %496, double %489)\l  %498 = tail call double @llvm.fma.f64(double %490, double %495, double %497)\l  %499 = fadd double %487, %498\l  %500 = tail call double @llvm.fma.f64(double %485, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %501 = tail call double @llvm.fma.f64(double %485, double %500, double\l... 0x3EC71DE3796CDE01)\l  %502 = tail call double @llvm.fma.f64(double %485, double %501, double\l... 0xBF2A01A019E83E5C)\l  %503 = tail call double @llvm.fma.f64(double %485, double %502, double\l... 0x3F81111111110BB3)\l  %504 = fneg double %485\l  %505 = fmul double %483, %504\l  %506 = fmul double %482, 5.000000e-01\l  %507 = tail call double @llvm.fma.f64(double %505, double %503, double %506)\l  %508 = tail call double @llvm.fma.f64(double %485, double %507, double %496)\l  %509 = tail call double @llvm.fma.f64(double %505, double\l... 0xBFC5555555555555, double %508)\l  %510 = fsub double %483, %509\l  %511 = and i32 %484, 1\l  %512 = icmp eq i32 %511, 0\l  %513 = select i1 %512, double %510, double %499\l  %514 = bitcast double %513 to \<2 x i32\>\l  %515 = shl i32 %484, 30\l  %516 = bitcast double %383 to \<2 x i32\>\l  %517 = extractelement \<2 x i32\> %516, i64 1\l  %518 = xor i32 %515, %517\l  %519 = and i32 %518, -2147483648\l  %520 = extractelement \<2 x i32\> %514, i64 1\l  %521 = xor i32 %520, %519\l  %522 = insertelement \<2 x i32\> %514, i32 %521, i64 1\l  %523 = tail call i1 @llvm.amdgcn.class.f64(double %384, i32 504)\l  %524 = select i1 %523, \<2 x i32\> %522, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %525 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %14, i64 %75, i32 0, i32 0, i32 0, i64 1\l  %526 = bitcast double addrspace(1)* %525 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %524, \<2 x i32\> addrspace(1)* %526, align 8, !tbaa !21\l  %527 = load double, double addrspace(1)* %104, align 8, !tbaa !17\l  %528 = fneg contract double %527\l  %529 = fdiv contract double %3, 0x38E185A6A75D2CEB\l  %530 = fmul contract double %529, %528\l  %531 = tail call double @llvm.fabs.f64(double %530)\l  %532 = fcmp olt double %531, 0x41D0000000000000\l  br i1 %532, label %533, label %552\l|{<s0>T|<s1>F}}"];
	Node0x4b7abf0:s0 -> Node0x4b73d10;
	Node0x4b7abf0:s1 -> Node0x4b73d60;
	Node0x4b73d10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%533:\l533:                                              \l  %534 = fmul double %531, 0x3FE45F306DC9C883\l  %535 = tail call double @llvm.rint.f64(double %534)\l  %536 = tail call double @llvm.fma.f64(double %535, double\l... 0xBFF921FB54442D18, double %531)\l  %537 = tail call double @llvm.fma.f64(double %535, double\l... 0xBC91A62633145C00, double %536)\l  %538 = fmul double %535, 0x3C91A62633145C00\l  %539 = fneg double %538\l  %540 = tail call double @llvm.fma.f64(double %535, double\l... 0x3C91A62633145C00, double %539)\l  %541 = fsub double %536, %538\l  %542 = fsub double %536, %541\l  %543 = fsub double %542, %538\l  %544 = fsub double %541, %537\l  %545 = fadd double %544, %543\l  %546 = fsub double %545, %540\l  %547 = tail call double @llvm.fma.f64(double %535, double\l... 0xB97B839A252049C0, double %546)\l  %548 = fadd double %537, %547\l  %549 = fsub double %548, %537\l  %550 = fsub double %547, %549\l  %551 = fptosi double %535 to i32\l  br label %628\l}"];
	Node0x4b73d10 -> Node0x4b82430;
	Node0x4b73d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%552:\l552:                                              \l  %553 = tail call double @llvm.amdgcn.trig.preop.f64(double %531, i32 0)\l  %554 = tail call double @llvm.amdgcn.trig.preop.f64(double %531, i32 1)\l  %555 = tail call double @llvm.amdgcn.trig.preop.f64(double %531, i32 2)\l  %556 = fcmp oge double %531, 0x7B00000000000000\l  %557 = tail call double @llvm.amdgcn.ldexp.f64(double %531, i32 -128)\l  %558 = select i1 %556, double %557, double %531\l  %559 = fmul double %555, %558\l  %560 = fneg double %559\l  %561 = tail call double @llvm.fma.f64(double %555, double %558, double %560)\l  %562 = fmul double %554, %558\l  %563 = fneg double %562\l  %564 = tail call double @llvm.fma.f64(double %554, double %558, double %563)\l  %565 = fmul double %553, %558\l  %566 = fneg double %565\l  %567 = tail call double @llvm.fma.f64(double %553, double %558, double %566)\l  %568 = fadd double %562, %567\l  %569 = fsub double %568, %562\l  %570 = fsub double %568, %569\l  %571 = fsub double %567, %569\l  %572 = fsub double %562, %570\l  %573 = fadd double %571, %572\l  %574 = fadd double %559, %564\l  %575 = fsub double %574, %559\l  %576 = fsub double %574, %575\l  %577 = fsub double %564, %575\l  %578 = fsub double %559, %576\l  %579 = fadd double %577, %578\l  %580 = fadd double %574, %573\l  %581 = fsub double %580, %574\l  %582 = fsub double %580, %581\l  %583 = fsub double %573, %581\l  %584 = fsub double %574, %582\l  %585 = fadd double %583, %584\l  %586 = fadd double %579, %585\l  %587 = fadd double %561, %586\l  %588 = fadd double %565, %568\l  %589 = fsub double %588, %565\l  %590 = fsub double %568, %589\l  %591 = fadd double %590, %580\l  %592 = fsub double %591, %590\l  %593 = fsub double %580, %592\l  %594 = fadd double %593, %587\l  %595 = tail call double @llvm.amdgcn.ldexp.f64(double %588, i32 -2)\l  %596 = tail call double @llvm.amdgcn.fract.f64(double %595)\l  %597 = tail call i1 @llvm.amdgcn.class.f64(double %595, i32 516)\l  %598 = select i1 %597, double 0.000000e+00, double %596\l  %599 = tail call double @llvm.amdgcn.ldexp.f64(double %598, i32 2)\l  %600 = fadd double %599, %591\l  %601 = fcmp olt double %600, 0.000000e+00\l  %602 = select i1 %601, double 4.000000e+00, double 0.000000e+00\l  %603 = fadd double %599, %602\l  %604 = fadd double %591, %603\l  %605 = fptosi double %604 to i32\l  %606 = sitofp i32 %605 to double\l  %607 = fsub double %603, %606\l  %608 = fadd double %591, %607\l  %609 = fsub double %608, %607\l  %610 = fsub double %591, %609\l  %611 = fadd double %594, %610\l  %612 = fcmp oge double %608, 5.000000e-01\l  %613 = zext i1 %612 to i32\l  %614 = add nsw i32 %613, %605\l  %615 = select i1 %612, double 1.000000e+00, double 0.000000e+00\l  %616 = fsub double %608, %615\l  %617 = fadd double %616, %611\l  %618 = fsub double %617, %616\l  %619 = fsub double %611, %618\l  %620 = fmul double %617, 0x3FF921FB54442D18\l  %621 = fneg double %620\l  %622 = tail call double @llvm.fma.f64(double %617, double\l... 0x3FF921FB54442D18, double %621)\l  %623 = tail call double @llvm.fma.f64(double %617, double\l... 0x3C91A62633145C07, double %622)\l  %624 = tail call double @llvm.fma.f64(double %619, double\l... 0x3FF921FB54442D18, double %623)\l  %625 = fadd double %620, %624\l  %626 = fsub double %625, %620\l  %627 = fsub double %624, %626\l  br label %628\l}"];
	Node0x4b73d60 -> Node0x4b82430;
	Node0x4b82430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%628:\l628:                                              \l  %629 = phi double [ %550, %533 ], [ %627, %552 ]\l  %630 = phi double [ %548, %533 ], [ %625, %552 ]\l  %631 = phi i32 [ %551, %533 ], [ %614, %552 ]\l  %632 = fmul double %630, %630\l  %633 = fmul double %632, 5.000000e-01\l  %634 = fsub double 1.000000e+00, %633\l  %635 = fsub double 1.000000e+00, %634\l  %636 = fsub double %635, %633\l  %637 = fmul double %632, %632\l  %638 = tail call double @llvm.fma.f64(double %632, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %639 = tail call double @llvm.fma.f64(double %632, double %638, double\l... 0xBE927E4FA17F65F6)\l  %640 = tail call double @llvm.fma.f64(double %632, double %639, double\l... 0x3EFA01A019F4EC90)\l  %641 = tail call double @llvm.fma.f64(double %632, double %640, double\l... 0xBF56C16C16C16967)\l  %642 = tail call double @llvm.fma.f64(double %632, double %641, double\l... 0x3FA5555555555555)\l  %643 = fneg double %629\l  %644 = tail call double @llvm.fma.f64(double %630, double %643, double %636)\l  %645 = tail call double @llvm.fma.f64(double %637, double %642, double %644)\l  %646 = fadd double %634, %645\l  %647 = tail call double @llvm.fma.f64(double %632, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %648 = tail call double @llvm.fma.f64(double %632, double %647, double\l... 0x3EC71DE3796CDE01)\l  %649 = tail call double @llvm.fma.f64(double %632, double %648, double\l... 0xBF2A01A019E83E5C)\l  %650 = tail call double @llvm.fma.f64(double %632, double %649, double\l... 0x3F81111111110BB3)\l  %651 = fneg double %632\l  %652 = fmul double %630, %651\l  %653 = fmul double %629, 5.000000e-01\l  %654 = tail call double @llvm.fma.f64(double %652, double %650, double %653)\l  %655 = tail call double @llvm.fma.f64(double %632, double %654, double %643)\l  %656 = tail call double @llvm.fma.f64(double %652, double\l... 0xBFC5555555555555, double %655)\l  %657 = fsub double %630, %656\l  %658 = fneg double %657\l  %659 = and i32 %631, 1\l  %660 = icmp eq i32 %659, 0\l  %661 = select i1 %660, double %646, double %658\l  %662 = bitcast double %661 to \<2 x i32\>\l  %663 = shl i32 %631, 30\l  %664 = and i32 %663, -2147483648\l  %665 = extractelement \<2 x i32\> %662, i64 1\l  %666 = xor i32 %665, %664\l  %667 = insertelement \<2 x i32\> %662, i32 %666, i64 1\l  %668 = tail call i1 @llvm.amdgcn.class.f64(double %531, i32 504)\l  %669 = select i1 %668, \<2 x i32\> %667, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %670 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %16, i64 %75, i32 0, i32 0, i32 0, i64 0\l  %671 = bitcast double addrspace(1)* %670 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %669, \<2 x i32\> addrspace(1)* %671, align 16, !tbaa !21\l  %672 = load double, double addrspace(1)* %104, align 8, !tbaa !17\l  %673 = fneg contract double %672\l  %674 = fmul contract double %529, %673\l  %675 = tail call double @llvm.fabs.f64(double %674)\l  %676 = fcmp olt double %675, 0x41D0000000000000\l  br i1 %676, label %677, label %696\l|{<s0>T|<s1>F}}"];
	Node0x4b82430:s0 -> Node0x4b87c70;
	Node0x4b82430:s1 -> Node0x4b87cc0;
	Node0x4b87c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%677:\l677:                                              \l  %678 = fmul double %675, 0x3FE45F306DC9C883\l  %679 = tail call double @llvm.rint.f64(double %678)\l  %680 = tail call double @llvm.fma.f64(double %679, double\l... 0xBFF921FB54442D18, double %675)\l  %681 = tail call double @llvm.fma.f64(double %679, double\l... 0xBC91A62633145C00, double %680)\l  %682 = fmul double %679, 0x3C91A62633145C00\l  %683 = fneg double %682\l  %684 = tail call double @llvm.fma.f64(double %679, double\l... 0x3C91A62633145C00, double %683)\l  %685 = fsub double %680, %682\l  %686 = fsub double %680, %685\l  %687 = fsub double %686, %682\l  %688 = fsub double %685, %681\l  %689 = fadd double %688, %687\l  %690 = fsub double %689, %684\l  %691 = tail call double @llvm.fma.f64(double %679, double\l... 0xB97B839A252049C0, double %690)\l  %692 = fadd double %681, %691\l  %693 = fsub double %692, %681\l  %694 = fsub double %691, %693\l  %695 = fptosi double %679 to i32\l  br label %772\l}"];
	Node0x4b87c70 -> Node0x4b88a80;
	Node0x4b87cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%696:\l696:                                              \l  %697 = tail call double @llvm.amdgcn.trig.preop.f64(double %675, i32 0)\l  %698 = tail call double @llvm.amdgcn.trig.preop.f64(double %675, i32 1)\l  %699 = tail call double @llvm.amdgcn.trig.preop.f64(double %675, i32 2)\l  %700 = fcmp oge double %675, 0x7B00000000000000\l  %701 = tail call double @llvm.amdgcn.ldexp.f64(double %675, i32 -128)\l  %702 = select i1 %700, double %701, double %675\l  %703 = fmul double %699, %702\l  %704 = fneg double %703\l  %705 = tail call double @llvm.fma.f64(double %699, double %702, double %704)\l  %706 = fmul double %698, %702\l  %707 = fneg double %706\l  %708 = tail call double @llvm.fma.f64(double %698, double %702, double %707)\l  %709 = fmul double %697, %702\l  %710 = fneg double %709\l  %711 = tail call double @llvm.fma.f64(double %697, double %702, double %710)\l  %712 = fadd double %706, %711\l  %713 = fsub double %712, %706\l  %714 = fsub double %712, %713\l  %715 = fsub double %711, %713\l  %716 = fsub double %706, %714\l  %717 = fadd double %715, %716\l  %718 = fadd double %703, %708\l  %719 = fsub double %718, %703\l  %720 = fsub double %718, %719\l  %721 = fsub double %708, %719\l  %722 = fsub double %703, %720\l  %723 = fadd double %721, %722\l  %724 = fadd double %718, %717\l  %725 = fsub double %724, %718\l  %726 = fsub double %724, %725\l  %727 = fsub double %717, %725\l  %728 = fsub double %718, %726\l  %729 = fadd double %727, %728\l  %730 = fadd double %723, %729\l  %731 = fadd double %705, %730\l  %732 = fadd double %709, %712\l  %733 = fsub double %732, %709\l  %734 = fsub double %712, %733\l  %735 = fadd double %734, %724\l  %736 = fsub double %735, %734\l  %737 = fsub double %724, %736\l  %738 = fadd double %737, %731\l  %739 = tail call double @llvm.amdgcn.ldexp.f64(double %732, i32 -2)\l  %740 = tail call double @llvm.amdgcn.fract.f64(double %739)\l  %741 = tail call i1 @llvm.amdgcn.class.f64(double %739, i32 516)\l  %742 = select i1 %741, double 0.000000e+00, double %740\l  %743 = tail call double @llvm.amdgcn.ldexp.f64(double %742, i32 2)\l  %744 = fadd double %743, %735\l  %745 = fcmp olt double %744, 0.000000e+00\l  %746 = select i1 %745, double 4.000000e+00, double 0.000000e+00\l  %747 = fadd double %743, %746\l  %748 = fadd double %735, %747\l  %749 = fptosi double %748 to i32\l  %750 = sitofp i32 %749 to double\l  %751 = fsub double %747, %750\l  %752 = fadd double %735, %751\l  %753 = fsub double %752, %751\l  %754 = fsub double %735, %753\l  %755 = fadd double %738, %754\l  %756 = fcmp oge double %752, 5.000000e-01\l  %757 = zext i1 %756 to i32\l  %758 = add nsw i32 %757, %749\l  %759 = select i1 %756, double 1.000000e+00, double 0.000000e+00\l  %760 = fsub double %752, %759\l  %761 = fadd double %760, %755\l  %762 = fsub double %761, %760\l  %763 = fsub double %755, %762\l  %764 = fmul double %761, 0x3FF921FB54442D18\l  %765 = fneg double %764\l  %766 = tail call double @llvm.fma.f64(double %761, double\l... 0x3FF921FB54442D18, double %765)\l  %767 = tail call double @llvm.fma.f64(double %761, double\l... 0x3C91A62633145C07, double %766)\l  %768 = tail call double @llvm.fma.f64(double %763, double\l... 0x3FF921FB54442D18, double %767)\l  %769 = fadd double %764, %768\l  %770 = fsub double %769, %764\l  %771 = fsub double %768, %770\l  br label %772\l}"];
	Node0x4b87cc0 -> Node0x4b88a80;
	Node0x4b88a80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%772:\l772:                                              \l  %773 = phi double [ %694, %677 ], [ %771, %696 ]\l  %774 = phi double [ %692, %677 ], [ %769, %696 ]\l  %775 = phi i32 [ %695, %677 ], [ %758, %696 ]\l  %776 = fmul double %774, %774\l  %777 = fmul double %776, 5.000000e-01\l  %778 = fsub double 1.000000e+00, %777\l  %779 = fsub double 1.000000e+00, %778\l  %780 = fsub double %779, %777\l  %781 = fmul double %776, %776\l  %782 = tail call double @llvm.fma.f64(double %776, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %783 = tail call double @llvm.fma.f64(double %776, double %782, double\l... 0xBE927E4FA17F65F6)\l  %784 = tail call double @llvm.fma.f64(double %776, double %783, double\l... 0x3EFA01A019F4EC90)\l  %785 = tail call double @llvm.fma.f64(double %776, double %784, double\l... 0xBF56C16C16C16967)\l  %786 = tail call double @llvm.fma.f64(double %776, double %785, double\l... 0x3FA5555555555555)\l  %787 = fneg double %773\l  %788 = tail call double @llvm.fma.f64(double %774, double %787, double %780)\l  %789 = tail call double @llvm.fma.f64(double %781, double %786, double %788)\l  %790 = fadd double %778, %789\l  %791 = tail call double @llvm.fma.f64(double %776, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %792 = tail call double @llvm.fma.f64(double %776, double %791, double\l... 0x3EC71DE3796CDE01)\l  %793 = tail call double @llvm.fma.f64(double %776, double %792, double\l... 0xBF2A01A019E83E5C)\l  %794 = tail call double @llvm.fma.f64(double %776, double %793, double\l... 0x3F81111111110BB3)\l  %795 = fneg double %776\l  %796 = fmul double %774, %795\l  %797 = fmul double %773, 5.000000e-01\l  %798 = tail call double @llvm.fma.f64(double %796, double %794, double %797)\l  %799 = tail call double @llvm.fma.f64(double %776, double %798, double %787)\l  %800 = tail call double @llvm.fma.f64(double %796, double\l... 0xBFC5555555555555, double %799)\l  %801 = fsub double %774, %800\l  %802 = and i32 %775, 1\l  %803 = icmp eq i32 %802, 0\l  %804 = select i1 %803, double %801, double %790\l  %805 = bitcast double %804 to \<2 x i32\>\l  %806 = shl i32 %775, 30\l  %807 = bitcast double %674 to \<2 x i32\>\l  %808 = extractelement \<2 x i32\> %807, i64 1\l  %809 = xor i32 %806, %808\l  %810 = and i32 %809, -2147483648\l  %811 = extractelement \<2 x i32\> %805, i64 1\l  %812 = xor i32 %811, %810\l  %813 = insertelement \<2 x i32\> %805, i32 %812, i64 1\l  %814 = tail call i1 @llvm.amdgcn.class.f64(double %675, i32 504)\l  %815 = select i1 %814, \<2 x i32\> %813, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %816 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %16, i64 %75, i32 0, i32 0, i32 0, i64 1\l  %817 = bitcast double addrspace(1)* %816 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %815, \<2 x i32\> addrspace(1)* %817, align 8, !tbaa !21\l  %818 = load double, double addrspace(1)* %154, align 8, !tbaa !17\l  %819 = fneg contract double %818\l  %820 = fmul contract double %819, %3\l  %821 = tail call double @llvm.fabs.f64(double %820)\l  %822 = fcmp olt double %821, 0x41D0000000000000\l  br i1 %822, label %823, label %842\l|{<s0>T|<s1>F}}"];
	Node0x4b88a80:s0 -> Node0x4b8e3e0;
	Node0x4b88a80:s1 -> Node0x4b8e430;
	Node0x4b8e3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%823:\l823:                                              \l  %824 = fmul double %821, 0x3FE45F306DC9C883\l  %825 = tail call double @llvm.rint.f64(double %824)\l  %826 = tail call double @llvm.fma.f64(double %825, double\l... 0xBFF921FB54442D18, double %821)\l  %827 = tail call double @llvm.fma.f64(double %825, double\l... 0xBC91A62633145C00, double %826)\l  %828 = fmul double %825, 0x3C91A62633145C00\l  %829 = fneg double %828\l  %830 = tail call double @llvm.fma.f64(double %825, double\l... 0x3C91A62633145C00, double %829)\l  %831 = fsub double %826, %828\l  %832 = fsub double %826, %831\l  %833 = fsub double %832, %828\l  %834 = fsub double %831, %827\l  %835 = fadd double %834, %833\l  %836 = fsub double %835, %830\l  %837 = tail call double @llvm.fma.f64(double %825, double\l... 0xB97B839A252049C0, double %836)\l  %838 = fadd double %827, %837\l  %839 = fsub double %838, %827\l  %840 = fsub double %837, %839\l  %841 = fptosi double %825 to i32\l  br label %918\l}"];
	Node0x4b8e3e0 -> Node0x4b8f1f0;
	Node0x4b8e430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%842:\l842:                                              \l  %843 = tail call double @llvm.amdgcn.trig.preop.f64(double %821, i32 0)\l  %844 = tail call double @llvm.amdgcn.trig.preop.f64(double %821, i32 1)\l  %845 = tail call double @llvm.amdgcn.trig.preop.f64(double %821, i32 2)\l  %846 = fcmp oge double %821, 0x7B00000000000000\l  %847 = tail call double @llvm.amdgcn.ldexp.f64(double %821, i32 -128)\l  %848 = select i1 %846, double %847, double %821\l  %849 = fmul double %845, %848\l  %850 = fneg double %849\l  %851 = tail call double @llvm.fma.f64(double %845, double %848, double %850)\l  %852 = fmul double %844, %848\l  %853 = fneg double %852\l  %854 = tail call double @llvm.fma.f64(double %844, double %848, double %853)\l  %855 = fmul double %843, %848\l  %856 = fneg double %855\l  %857 = tail call double @llvm.fma.f64(double %843, double %848, double %856)\l  %858 = fadd double %852, %857\l  %859 = fsub double %858, %852\l  %860 = fsub double %858, %859\l  %861 = fsub double %857, %859\l  %862 = fsub double %852, %860\l  %863 = fadd double %861, %862\l  %864 = fadd double %849, %854\l  %865 = fsub double %864, %849\l  %866 = fsub double %864, %865\l  %867 = fsub double %854, %865\l  %868 = fsub double %849, %866\l  %869 = fadd double %867, %868\l  %870 = fadd double %864, %863\l  %871 = fsub double %870, %864\l  %872 = fsub double %870, %871\l  %873 = fsub double %863, %871\l  %874 = fsub double %864, %872\l  %875 = fadd double %873, %874\l  %876 = fadd double %869, %875\l  %877 = fadd double %851, %876\l  %878 = fadd double %855, %858\l  %879 = fsub double %878, %855\l  %880 = fsub double %858, %879\l  %881 = fadd double %880, %870\l  %882 = fsub double %881, %880\l  %883 = fsub double %870, %882\l  %884 = fadd double %883, %877\l  %885 = tail call double @llvm.amdgcn.ldexp.f64(double %878, i32 -2)\l  %886 = tail call double @llvm.amdgcn.fract.f64(double %885)\l  %887 = tail call i1 @llvm.amdgcn.class.f64(double %885, i32 516)\l  %888 = select i1 %887, double 0.000000e+00, double %886\l  %889 = tail call double @llvm.amdgcn.ldexp.f64(double %888, i32 2)\l  %890 = fadd double %889, %881\l  %891 = fcmp olt double %890, 0.000000e+00\l  %892 = select i1 %891, double 4.000000e+00, double 0.000000e+00\l  %893 = fadd double %889, %892\l  %894 = fadd double %881, %893\l  %895 = fptosi double %894 to i32\l  %896 = sitofp i32 %895 to double\l  %897 = fsub double %893, %896\l  %898 = fadd double %881, %897\l  %899 = fsub double %898, %897\l  %900 = fsub double %881, %899\l  %901 = fadd double %884, %900\l  %902 = fcmp oge double %898, 5.000000e-01\l  %903 = zext i1 %902 to i32\l  %904 = add nsw i32 %903, %895\l  %905 = select i1 %902, double 1.000000e+00, double 0.000000e+00\l  %906 = fsub double %898, %905\l  %907 = fadd double %906, %901\l  %908 = fsub double %907, %906\l  %909 = fsub double %901, %908\l  %910 = fmul double %907, 0x3FF921FB54442D18\l  %911 = fneg double %910\l  %912 = tail call double @llvm.fma.f64(double %907, double\l... 0x3FF921FB54442D18, double %911)\l  %913 = tail call double @llvm.fma.f64(double %907, double\l... 0x3C91A62633145C07, double %912)\l  %914 = tail call double @llvm.fma.f64(double %909, double\l... 0x3FF921FB54442D18, double %913)\l  %915 = fadd double %910, %914\l  %916 = fsub double %915, %910\l  %917 = fsub double %914, %916\l  br label %918\l}"];
	Node0x4b8e430 -> Node0x4b8f1f0;
	Node0x4b8f1f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%918:\l918:                                              \l  %919 = phi double [ %840, %823 ], [ %917, %842 ]\l  %920 = phi double [ %838, %823 ], [ %915, %842 ]\l  %921 = phi i32 [ %841, %823 ], [ %904, %842 ]\l  %922 = fmul double %920, %920\l  %923 = fmul double %922, 5.000000e-01\l  %924 = fsub double 1.000000e+00, %923\l  %925 = fsub double 1.000000e+00, %924\l  %926 = fsub double %925, %923\l  %927 = fmul double %922, %922\l  %928 = tail call double @llvm.fma.f64(double %922, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %929 = tail call double @llvm.fma.f64(double %922, double %928, double\l... 0xBE927E4FA17F65F6)\l  %930 = tail call double @llvm.fma.f64(double %922, double %929, double\l... 0x3EFA01A019F4EC90)\l  %931 = tail call double @llvm.fma.f64(double %922, double %930, double\l... 0xBF56C16C16C16967)\l  %932 = tail call double @llvm.fma.f64(double %922, double %931, double\l... 0x3FA5555555555555)\l  %933 = fneg double %919\l  %934 = tail call double @llvm.fma.f64(double %920, double %933, double %926)\l  %935 = tail call double @llvm.fma.f64(double %927, double %932, double %934)\l  %936 = fadd double %924, %935\l  %937 = tail call double @llvm.fma.f64(double %922, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %938 = tail call double @llvm.fma.f64(double %922, double %937, double\l... 0x3EC71DE3796CDE01)\l  %939 = tail call double @llvm.fma.f64(double %922, double %938, double\l... 0xBF2A01A019E83E5C)\l  %940 = tail call double @llvm.fma.f64(double %922, double %939, double\l... 0x3F81111111110BB3)\l  %941 = fneg double %922\l  %942 = fmul double %920, %941\l  %943 = fmul double %919, 5.000000e-01\l  %944 = tail call double @llvm.fma.f64(double %942, double %940, double %943)\l  %945 = tail call double @llvm.fma.f64(double %922, double %944, double %933)\l  %946 = tail call double @llvm.fma.f64(double %942, double\l... 0xBFC5555555555555, double %945)\l  %947 = fsub double %920, %946\l  %948 = fneg double %947\l  %949 = and i32 %921, 1\l  %950 = icmp eq i32 %949, 0\l  %951 = select i1 %950, double %936, double %948\l  %952 = bitcast double %951 to \<2 x i32\>\l  %953 = shl i32 %921, 30\l  %954 = and i32 %953, -2147483648\l  %955 = extractelement \<2 x i32\> %952, i64 1\l  %956 = xor i32 %955, %954\l  %957 = insertelement \<2 x i32\> %952, i32 %956, i64 1\l  %958 = tail call i1 @llvm.amdgcn.class.f64(double %821, i32 504)\l  %959 = select i1 %958, \<2 x i32\> %957, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %960 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %22, i64 %75, i32 0, i32 0, i32 0, i64 0\l  %961 = bitcast double addrspace(1)* %960 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %959, \<2 x i32\> addrspace(1)* %961, align 16, !tbaa !21\l  %962 = load double, double addrspace(1)* %154, align 8, !tbaa !17\l  %963 = fneg contract double %962\l  %964 = fmul contract double %963, %3\l  %965 = tail call double @llvm.fabs.f64(double %964)\l  %966 = fcmp olt double %965, 0x41D0000000000000\l  br i1 %966, label %967, label %986\l|{<s0>T|<s1>F}}"];
	Node0x4b8f1f0:s0 -> Node0x4b94a30;
	Node0x4b8f1f0:s1 -> Node0x4b94a80;
	Node0x4b94a30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%967:\l967:                                              \l  %968 = fmul double %965, 0x3FE45F306DC9C883\l  %969 = tail call double @llvm.rint.f64(double %968)\l  %970 = tail call double @llvm.fma.f64(double %969, double\l... 0xBFF921FB54442D18, double %965)\l  %971 = tail call double @llvm.fma.f64(double %969, double\l... 0xBC91A62633145C00, double %970)\l  %972 = fmul double %969, 0x3C91A62633145C00\l  %973 = fneg double %972\l  %974 = tail call double @llvm.fma.f64(double %969, double\l... 0x3C91A62633145C00, double %973)\l  %975 = fsub double %970, %972\l  %976 = fsub double %970, %975\l  %977 = fsub double %976, %972\l  %978 = fsub double %975, %971\l  %979 = fadd double %978, %977\l  %980 = fsub double %979, %974\l  %981 = tail call double @llvm.fma.f64(double %969, double\l... 0xB97B839A252049C0, double %980)\l  %982 = fadd double %971, %981\l  %983 = fsub double %982, %971\l  %984 = fsub double %981, %983\l  %985 = fptosi double %969 to i32\l  br label %1062\l}"];
	Node0x4b94a30 -> Node0x4b95840;
	Node0x4b94a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%986:\l986:                                              \l  %987 = tail call double @llvm.amdgcn.trig.preop.f64(double %965, i32 0)\l  %988 = tail call double @llvm.amdgcn.trig.preop.f64(double %965, i32 1)\l  %989 = tail call double @llvm.amdgcn.trig.preop.f64(double %965, i32 2)\l  %990 = fcmp oge double %965, 0x7B00000000000000\l  %991 = tail call double @llvm.amdgcn.ldexp.f64(double %965, i32 -128)\l  %992 = select i1 %990, double %991, double %965\l  %993 = fmul double %989, %992\l  %994 = fneg double %993\l  %995 = tail call double @llvm.fma.f64(double %989, double %992, double %994)\l  %996 = fmul double %988, %992\l  %997 = fneg double %996\l  %998 = tail call double @llvm.fma.f64(double %988, double %992, double %997)\l  %999 = fmul double %987, %992\l  %1000 = fneg double %999\l  %1001 = tail call double @llvm.fma.f64(double %987, double %992, double\l... %1000)\l  %1002 = fadd double %996, %1001\l  %1003 = fsub double %1002, %996\l  %1004 = fsub double %1002, %1003\l  %1005 = fsub double %1001, %1003\l  %1006 = fsub double %996, %1004\l  %1007 = fadd double %1005, %1006\l  %1008 = fadd double %993, %998\l  %1009 = fsub double %1008, %993\l  %1010 = fsub double %1008, %1009\l  %1011 = fsub double %998, %1009\l  %1012 = fsub double %993, %1010\l  %1013 = fadd double %1011, %1012\l  %1014 = fadd double %1008, %1007\l  %1015 = fsub double %1014, %1008\l  %1016 = fsub double %1014, %1015\l  %1017 = fsub double %1007, %1015\l  %1018 = fsub double %1008, %1016\l  %1019 = fadd double %1017, %1018\l  %1020 = fadd double %1013, %1019\l  %1021 = fadd double %995, %1020\l  %1022 = fadd double %999, %1002\l  %1023 = fsub double %1022, %999\l  %1024 = fsub double %1002, %1023\l  %1025 = fadd double %1024, %1014\l  %1026 = fsub double %1025, %1024\l  %1027 = fsub double %1014, %1026\l  %1028 = fadd double %1027, %1021\l  %1029 = tail call double @llvm.amdgcn.ldexp.f64(double %1022, i32 -2)\l  %1030 = tail call double @llvm.amdgcn.fract.f64(double %1029)\l  %1031 = tail call i1 @llvm.amdgcn.class.f64(double %1029, i32 516)\l  %1032 = select i1 %1031, double 0.000000e+00, double %1030\l  %1033 = tail call double @llvm.amdgcn.ldexp.f64(double %1032, i32 2)\l  %1034 = fadd double %1033, %1025\l  %1035 = fcmp olt double %1034, 0.000000e+00\l  %1036 = select i1 %1035, double 4.000000e+00, double 0.000000e+00\l  %1037 = fadd double %1033, %1036\l  %1038 = fadd double %1025, %1037\l  %1039 = fptosi double %1038 to i32\l  %1040 = sitofp i32 %1039 to double\l  %1041 = fsub double %1037, %1040\l  %1042 = fadd double %1025, %1041\l  %1043 = fsub double %1042, %1041\l  %1044 = fsub double %1025, %1043\l  %1045 = fadd double %1028, %1044\l  %1046 = fcmp oge double %1042, 5.000000e-01\l  %1047 = zext i1 %1046 to i32\l  %1048 = add nsw i32 %1047, %1039\l  %1049 = select i1 %1046, double 1.000000e+00, double 0.000000e+00\l  %1050 = fsub double %1042, %1049\l  %1051 = fadd double %1050, %1045\l  %1052 = fsub double %1051, %1050\l  %1053 = fsub double %1045, %1052\l  %1054 = fmul double %1051, 0x3FF921FB54442D18\l  %1055 = fneg double %1054\l  %1056 = tail call double @llvm.fma.f64(double %1051, double\l... 0x3FF921FB54442D18, double %1055)\l  %1057 = tail call double @llvm.fma.f64(double %1051, double\l... 0x3C91A62633145C07, double %1056)\l  %1058 = tail call double @llvm.fma.f64(double %1053, double\l... 0x3FF921FB54442D18, double %1057)\l  %1059 = fadd double %1054, %1058\l  %1060 = fsub double %1059, %1054\l  %1061 = fsub double %1058, %1060\l  br label %1062\l}"];
	Node0x4b94a80 -> Node0x4b95840;
	Node0x4b95840 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1062:\l1062:                                             \l  %1063 = phi double [ %984, %967 ], [ %1061, %986 ]\l  %1064 = phi double [ %982, %967 ], [ %1059, %986 ]\l  %1065 = phi i32 [ %985, %967 ], [ %1048, %986 ]\l  %1066 = fmul double %1064, %1064\l  %1067 = fmul double %1066, 5.000000e-01\l  %1068 = fsub double 1.000000e+00, %1067\l  %1069 = fsub double 1.000000e+00, %1068\l  %1070 = fsub double %1069, %1067\l  %1071 = fmul double %1066, %1066\l  %1072 = tail call double @llvm.fma.f64(double %1066, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %1073 = tail call double @llvm.fma.f64(double %1066, double %1072, double\l... 0xBE927E4FA17F65F6)\l  %1074 = tail call double @llvm.fma.f64(double %1066, double %1073, double\l... 0x3EFA01A019F4EC90)\l  %1075 = tail call double @llvm.fma.f64(double %1066, double %1074, double\l... 0xBF56C16C16C16967)\l  %1076 = tail call double @llvm.fma.f64(double %1066, double %1075, double\l... 0x3FA5555555555555)\l  %1077 = fneg double %1063\l  %1078 = tail call double @llvm.fma.f64(double %1064, double %1077, double\l... %1070)\l  %1079 = tail call double @llvm.fma.f64(double %1071, double %1076, double\l... %1078)\l  %1080 = fadd double %1068, %1079\l  %1081 = tail call double @llvm.fma.f64(double %1066, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %1082 = tail call double @llvm.fma.f64(double %1066, double %1081, double\l... 0x3EC71DE3796CDE01)\l  %1083 = tail call double @llvm.fma.f64(double %1066, double %1082, double\l... 0xBF2A01A019E83E5C)\l  %1084 = tail call double @llvm.fma.f64(double %1066, double %1083, double\l... 0x3F81111111110BB3)\l  %1085 = fneg double %1066\l  %1086 = fmul double %1064, %1085\l  %1087 = fmul double %1063, 5.000000e-01\l  %1088 = tail call double @llvm.fma.f64(double %1086, double %1084, double\l... %1087)\l  %1089 = tail call double @llvm.fma.f64(double %1066, double %1088, double\l... %1077)\l  %1090 = tail call double @llvm.fma.f64(double %1086, double\l... 0xBFC5555555555555, double %1089)\l  %1091 = fsub double %1064, %1090\l  %1092 = and i32 %1065, 1\l  %1093 = icmp eq i32 %1092, 0\l  %1094 = select i1 %1093, double %1091, double %1080\l  %1095 = bitcast double %1094 to \<2 x i32\>\l  %1096 = shl i32 %1065, 30\l  %1097 = bitcast double %964 to \<2 x i32\>\l  %1098 = extractelement \<2 x i32\> %1097, i64 1\l  %1099 = xor i32 %1096, %1098\l  %1100 = and i32 %1099, -2147483648\l  %1101 = extractelement \<2 x i32\> %1095, i64 1\l  %1102 = xor i32 %1101, %1100\l  %1103 = insertelement \<2 x i32\> %1095, i32 %1102, i64 1\l  %1104 = tail call i1 @llvm.amdgcn.class.f64(double %965, i32 504)\l  %1105 = select i1 %1104, \<2 x i32\> %1103, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %1106 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %22, i64 %75, i32 0, i32 0, i32 0, i64 1\l  %1107 = bitcast double addrspace(1)* %1106 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %1105, \<2 x i32\> addrspace(1)* %1107, align 8, !tbaa !21\l  %1108 = load double, double addrspace(1)* %147, align 8, !tbaa !17\l  %1109 = fneg contract double %1108\l  %1110 = fmul contract double %1109, %3\l  %1111 = tail call double @llvm.fabs.f64(double %1110)\l  %1112 = fcmp olt double %1111, 0x41D0000000000000\l  br i1 %1112, label %1113, label %1132\l|{<s0>T|<s1>F}}"];
	Node0x4b95840:s0 -> Node0x4b9d1e0;
	Node0x4b95840:s1 -> Node0x4b9d230;
	Node0x4b9d1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1113:\l1113:                                             \l  %1114 = fmul double %1111, 0x3FE45F306DC9C883\l  %1115 = tail call double @llvm.rint.f64(double %1114)\l  %1116 = tail call double @llvm.fma.f64(double %1115, double\l... 0xBFF921FB54442D18, double %1111)\l  %1117 = tail call double @llvm.fma.f64(double %1115, double\l... 0xBC91A62633145C00, double %1116)\l  %1118 = fmul double %1115, 0x3C91A62633145C00\l  %1119 = fneg double %1118\l  %1120 = tail call double @llvm.fma.f64(double %1115, double\l... 0x3C91A62633145C00, double %1119)\l  %1121 = fsub double %1116, %1118\l  %1122 = fsub double %1116, %1121\l  %1123 = fsub double %1122, %1118\l  %1124 = fsub double %1121, %1117\l  %1125 = fadd double %1124, %1123\l  %1126 = fsub double %1125, %1120\l  %1127 = tail call double @llvm.fma.f64(double %1115, double\l... 0xB97B839A252049C0, double %1126)\l  %1128 = fadd double %1117, %1127\l  %1129 = fsub double %1128, %1117\l  %1130 = fsub double %1127, %1129\l  %1131 = fptosi double %1115 to i32\l  br label %1208\l}"];
	Node0x4b9d1e0 -> Node0x4b9dff0;
	Node0x4b9d230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1132:\l1132:                                             \l  %1133 = tail call double @llvm.amdgcn.trig.preop.f64(double %1111, i32 0)\l  %1134 = tail call double @llvm.amdgcn.trig.preop.f64(double %1111, i32 1)\l  %1135 = tail call double @llvm.amdgcn.trig.preop.f64(double %1111, i32 2)\l  %1136 = fcmp oge double %1111, 0x7B00000000000000\l  %1137 = tail call double @llvm.amdgcn.ldexp.f64(double %1111, i32 -128)\l  %1138 = select i1 %1136, double %1137, double %1111\l  %1139 = fmul double %1135, %1138\l  %1140 = fneg double %1139\l  %1141 = tail call double @llvm.fma.f64(double %1135, double %1138, double\l... %1140)\l  %1142 = fmul double %1134, %1138\l  %1143 = fneg double %1142\l  %1144 = tail call double @llvm.fma.f64(double %1134, double %1138, double\l... %1143)\l  %1145 = fmul double %1133, %1138\l  %1146 = fneg double %1145\l  %1147 = tail call double @llvm.fma.f64(double %1133, double %1138, double\l... %1146)\l  %1148 = fadd double %1142, %1147\l  %1149 = fsub double %1148, %1142\l  %1150 = fsub double %1148, %1149\l  %1151 = fsub double %1147, %1149\l  %1152 = fsub double %1142, %1150\l  %1153 = fadd double %1151, %1152\l  %1154 = fadd double %1139, %1144\l  %1155 = fsub double %1154, %1139\l  %1156 = fsub double %1154, %1155\l  %1157 = fsub double %1144, %1155\l  %1158 = fsub double %1139, %1156\l  %1159 = fadd double %1157, %1158\l  %1160 = fadd double %1154, %1153\l  %1161 = fsub double %1160, %1154\l  %1162 = fsub double %1160, %1161\l  %1163 = fsub double %1153, %1161\l  %1164 = fsub double %1154, %1162\l  %1165 = fadd double %1163, %1164\l  %1166 = fadd double %1159, %1165\l  %1167 = fadd double %1141, %1166\l  %1168 = fadd double %1145, %1148\l  %1169 = fsub double %1168, %1145\l  %1170 = fsub double %1148, %1169\l  %1171 = fadd double %1170, %1160\l  %1172 = fsub double %1171, %1170\l  %1173 = fsub double %1160, %1172\l  %1174 = fadd double %1173, %1167\l  %1175 = tail call double @llvm.amdgcn.ldexp.f64(double %1168, i32 -2)\l  %1176 = tail call double @llvm.amdgcn.fract.f64(double %1175)\l  %1177 = tail call i1 @llvm.amdgcn.class.f64(double %1175, i32 516)\l  %1178 = select i1 %1177, double 0.000000e+00, double %1176\l  %1179 = tail call double @llvm.amdgcn.ldexp.f64(double %1178, i32 2)\l  %1180 = fadd double %1179, %1171\l  %1181 = fcmp olt double %1180, 0.000000e+00\l  %1182 = select i1 %1181, double 4.000000e+00, double 0.000000e+00\l  %1183 = fadd double %1179, %1182\l  %1184 = fadd double %1171, %1183\l  %1185 = fptosi double %1184 to i32\l  %1186 = sitofp i32 %1185 to double\l  %1187 = fsub double %1183, %1186\l  %1188 = fadd double %1171, %1187\l  %1189 = fsub double %1188, %1187\l  %1190 = fsub double %1171, %1189\l  %1191 = fadd double %1174, %1190\l  %1192 = fcmp oge double %1188, 5.000000e-01\l  %1193 = zext i1 %1192 to i32\l  %1194 = add nsw i32 %1193, %1185\l  %1195 = select i1 %1192, double 1.000000e+00, double 0.000000e+00\l  %1196 = fsub double %1188, %1195\l  %1197 = fadd double %1196, %1191\l  %1198 = fsub double %1197, %1196\l  %1199 = fsub double %1191, %1198\l  %1200 = fmul double %1197, 0x3FF921FB54442D18\l  %1201 = fneg double %1200\l  %1202 = tail call double @llvm.fma.f64(double %1197, double\l... 0x3FF921FB54442D18, double %1201)\l  %1203 = tail call double @llvm.fma.f64(double %1197, double\l... 0x3C91A62633145C07, double %1202)\l  %1204 = tail call double @llvm.fma.f64(double %1199, double\l... 0x3FF921FB54442D18, double %1203)\l  %1205 = fadd double %1200, %1204\l  %1206 = fsub double %1205, %1200\l  %1207 = fsub double %1204, %1206\l  br label %1208\l}"];
	Node0x4b9d230 -> Node0x4b9dff0;
	Node0x4b9dff0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1208:\l1208:                                             \l  %1209 = phi double [ %1130, %1113 ], [ %1207, %1132 ]\l  %1210 = phi double [ %1128, %1113 ], [ %1205, %1132 ]\l  %1211 = phi i32 [ %1131, %1113 ], [ %1194, %1132 ]\l  %1212 = fmul double %1210, %1210\l  %1213 = fmul double %1212, 5.000000e-01\l  %1214 = fsub double 1.000000e+00, %1213\l  %1215 = fsub double 1.000000e+00, %1214\l  %1216 = fsub double %1215, %1213\l  %1217 = fmul double %1212, %1212\l  %1218 = tail call double @llvm.fma.f64(double %1212, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %1219 = tail call double @llvm.fma.f64(double %1212, double %1218, double\l... 0xBE927E4FA17F65F6)\l  %1220 = tail call double @llvm.fma.f64(double %1212, double %1219, double\l... 0x3EFA01A019F4EC90)\l  %1221 = tail call double @llvm.fma.f64(double %1212, double %1220, double\l... 0xBF56C16C16C16967)\l  %1222 = tail call double @llvm.fma.f64(double %1212, double %1221, double\l... 0x3FA5555555555555)\l  %1223 = fneg double %1209\l  %1224 = tail call double @llvm.fma.f64(double %1210, double %1223, double\l... %1216)\l  %1225 = tail call double @llvm.fma.f64(double %1217, double %1222, double\l... %1224)\l  %1226 = fadd double %1214, %1225\l  %1227 = tail call double @llvm.fma.f64(double %1212, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %1228 = tail call double @llvm.fma.f64(double %1212, double %1227, double\l... 0x3EC71DE3796CDE01)\l  %1229 = tail call double @llvm.fma.f64(double %1212, double %1228, double\l... 0xBF2A01A019E83E5C)\l  %1230 = tail call double @llvm.fma.f64(double %1212, double %1229, double\l... 0x3F81111111110BB3)\l  %1231 = fneg double %1212\l  %1232 = fmul double %1210, %1231\l  %1233 = fmul double %1209, 5.000000e-01\l  %1234 = tail call double @llvm.fma.f64(double %1232, double %1230, double\l... %1233)\l  %1235 = tail call double @llvm.fma.f64(double %1212, double %1234, double\l... %1223)\l  %1236 = tail call double @llvm.fma.f64(double %1232, double\l... 0xBFC5555555555555, double %1235)\l  %1237 = fsub double %1210, %1236\l  %1238 = fneg double %1237\l  %1239 = and i32 %1211, 1\l  %1240 = icmp eq i32 %1239, 0\l  %1241 = select i1 %1240, double %1226, double %1238\l  %1242 = bitcast double %1241 to \<2 x i32\>\l  %1243 = shl i32 %1211, 30\l  %1244 = and i32 %1243, -2147483648\l  %1245 = extractelement \<2 x i32\> %1242, i64 1\l  %1246 = xor i32 %1245, %1244\l  %1247 = insertelement \<2 x i32\> %1242, i32 %1246, i64 1\l  %1248 = tail call i1 @llvm.amdgcn.class.f64(double %1111, i32 504)\l  %1249 = select i1 %1248, \<2 x i32\> %1247, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %1250 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %21, i64 %75, i32 0, i32 0, i32 0, i64 0\l  %1251 = bitcast double addrspace(1)* %1250 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %1249, \<2 x i32\> addrspace(1)* %1251, align 16, !tbaa !21\l  %1252 = load double, double addrspace(1)* %147, align 8, !tbaa !17\l  %1253 = fneg contract double %1252\l  %1254 = fmul contract double %1253, %3\l  %1255 = tail call double @llvm.fabs.f64(double %1254)\l  %1256 = fcmp olt double %1255, 0x41D0000000000000\l  br i1 %1256, label %1257, label %1276\l|{<s0>T|<s1>F}}"];
	Node0x4b9dff0:s0 -> Node0x4ba3830;
	Node0x4b9dff0:s1 -> Node0x4ba3880;
	Node0x4ba3830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1257:\l1257:                                             \l  %1258 = fmul double %1255, 0x3FE45F306DC9C883\l  %1259 = tail call double @llvm.rint.f64(double %1258)\l  %1260 = tail call double @llvm.fma.f64(double %1259, double\l... 0xBFF921FB54442D18, double %1255)\l  %1261 = tail call double @llvm.fma.f64(double %1259, double\l... 0xBC91A62633145C00, double %1260)\l  %1262 = fmul double %1259, 0x3C91A62633145C00\l  %1263 = fneg double %1262\l  %1264 = tail call double @llvm.fma.f64(double %1259, double\l... 0x3C91A62633145C00, double %1263)\l  %1265 = fsub double %1260, %1262\l  %1266 = fsub double %1260, %1265\l  %1267 = fsub double %1266, %1262\l  %1268 = fsub double %1265, %1261\l  %1269 = fadd double %1268, %1267\l  %1270 = fsub double %1269, %1264\l  %1271 = tail call double @llvm.fma.f64(double %1259, double\l... 0xB97B839A252049C0, double %1270)\l  %1272 = fadd double %1261, %1271\l  %1273 = fsub double %1272, %1261\l  %1274 = fsub double %1271, %1273\l  %1275 = fptosi double %1259 to i32\l  br label %1352\l}"];
	Node0x4ba3830 -> Node0x4ba4640;
	Node0x4ba3880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1276:\l1276:                                             \l  %1277 = tail call double @llvm.amdgcn.trig.preop.f64(double %1255, i32 0)\l  %1278 = tail call double @llvm.amdgcn.trig.preop.f64(double %1255, i32 1)\l  %1279 = tail call double @llvm.amdgcn.trig.preop.f64(double %1255, i32 2)\l  %1280 = fcmp oge double %1255, 0x7B00000000000000\l  %1281 = tail call double @llvm.amdgcn.ldexp.f64(double %1255, i32 -128)\l  %1282 = select i1 %1280, double %1281, double %1255\l  %1283 = fmul double %1279, %1282\l  %1284 = fneg double %1283\l  %1285 = tail call double @llvm.fma.f64(double %1279, double %1282, double\l... %1284)\l  %1286 = fmul double %1278, %1282\l  %1287 = fneg double %1286\l  %1288 = tail call double @llvm.fma.f64(double %1278, double %1282, double\l... %1287)\l  %1289 = fmul double %1277, %1282\l  %1290 = fneg double %1289\l  %1291 = tail call double @llvm.fma.f64(double %1277, double %1282, double\l... %1290)\l  %1292 = fadd double %1286, %1291\l  %1293 = fsub double %1292, %1286\l  %1294 = fsub double %1292, %1293\l  %1295 = fsub double %1291, %1293\l  %1296 = fsub double %1286, %1294\l  %1297 = fadd double %1295, %1296\l  %1298 = fadd double %1283, %1288\l  %1299 = fsub double %1298, %1283\l  %1300 = fsub double %1298, %1299\l  %1301 = fsub double %1288, %1299\l  %1302 = fsub double %1283, %1300\l  %1303 = fadd double %1301, %1302\l  %1304 = fadd double %1298, %1297\l  %1305 = fsub double %1304, %1298\l  %1306 = fsub double %1304, %1305\l  %1307 = fsub double %1297, %1305\l  %1308 = fsub double %1298, %1306\l  %1309 = fadd double %1307, %1308\l  %1310 = fadd double %1303, %1309\l  %1311 = fadd double %1285, %1310\l  %1312 = fadd double %1289, %1292\l  %1313 = fsub double %1312, %1289\l  %1314 = fsub double %1292, %1313\l  %1315 = fadd double %1314, %1304\l  %1316 = fsub double %1315, %1314\l  %1317 = fsub double %1304, %1316\l  %1318 = fadd double %1317, %1311\l  %1319 = tail call double @llvm.amdgcn.ldexp.f64(double %1312, i32 -2)\l  %1320 = tail call double @llvm.amdgcn.fract.f64(double %1319)\l  %1321 = tail call i1 @llvm.amdgcn.class.f64(double %1319, i32 516)\l  %1322 = select i1 %1321, double 0.000000e+00, double %1320\l  %1323 = tail call double @llvm.amdgcn.ldexp.f64(double %1322, i32 2)\l  %1324 = fadd double %1323, %1315\l  %1325 = fcmp olt double %1324, 0.000000e+00\l  %1326 = select i1 %1325, double 4.000000e+00, double 0.000000e+00\l  %1327 = fadd double %1323, %1326\l  %1328 = fadd double %1315, %1327\l  %1329 = fptosi double %1328 to i32\l  %1330 = sitofp i32 %1329 to double\l  %1331 = fsub double %1327, %1330\l  %1332 = fadd double %1315, %1331\l  %1333 = fsub double %1332, %1331\l  %1334 = fsub double %1315, %1333\l  %1335 = fadd double %1318, %1334\l  %1336 = fcmp oge double %1332, 5.000000e-01\l  %1337 = zext i1 %1336 to i32\l  %1338 = add nsw i32 %1337, %1329\l  %1339 = select i1 %1336, double 1.000000e+00, double 0.000000e+00\l  %1340 = fsub double %1332, %1339\l  %1341 = fadd double %1340, %1335\l  %1342 = fsub double %1341, %1340\l  %1343 = fsub double %1335, %1342\l  %1344 = fmul double %1341, 0x3FF921FB54442D18\l  %1345 = fneg double %1344\l  %1346 = tail call double @llvm.fma.f64(double %1341, double\l... 0x3FF921FB54442D18, double %1345)\l  %1347 = tail call double @llvm.fma.f64(double %1341, double\l... 0x3C91A62633145C07, double %1346)\l  %1348 = tail call double @llvm.fma.f64(double %1343, double\l... 0x3FF921FB54442D18, double %1347)\l  %1349 = fadd double %1344, %1348\l  %1350 = fsub double %1349, %1344\l  %1351 = fsub double %1348, %1350\l  br label %1352\l}"];
	Node0x4ba3880 -> Node0x4ba4640;
	Node0x4ba4640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1352:\l1352:                                             \l  %1353 = phi double [ %1274, %1257 ], [ %1351, %1276 ]\l  %1354 = phi double [ %1272, %1257 ], [ %1349, %1276 ]\l  %1355 = phi i32 [ %1275, %1257 ], [ %1338, %1276 ]\l  %1356 = fmul double %1354, %1354\l  %1357 = fmul double %1356, 5.000000e-01\l  %1358 = fsub double 1.000000e+00, %1357\l  %1359 = fsub double 1.000000e+00, %1358\l  %1360 = fsub double %1359, %1357\l  %1361 = fmul double %1356, %1356\l  %1362 = tail call double @llvm.fma.f64(double %1356, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %1363 = tail call double @llvm.fma.f64(double %1356, double %1362, double\l... 0xBE927E4FA17F65F6)\l  %1364 = tail call double @llvm.fma.f64(double %1356, double %1363, double\l... 0x3EFA01A019F4EC90)\l  %1365 = tail call double @llvm.fma.f64(double %1356, double %1364, double\l... 0xBF56C16C16C16967)\l  %1366 = tail call double @llvm.fma.f64(double %1356, double %1365, double\l... 0x3FA5555555555555)\l  %1367 = fneg double %1353\l  %1368 = tail call double @llvm.fma.f64(double %1354, double %1367, double\l... %1360)\l  %1369 = tail call double @llvm.fma.f64(double %1361, double %1366, double\l... %1368)\l  %1370 = fadd double %1358, %1369\l  %1371 = tail call double @llvm.fma.f64(double %1356, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %1372 = tail call double @llvm.fma.f64(double %1356, double %1371, double\l... 0x3EC71DE3796CDE01)\l  %1373 = tail call double @llvm.fma.f64(double %1356, double %1372, double\l... 0xBF2A01A019E83E5C)\l  %1374 = tail call double @llvm.fma.f64(double %1356, double %1373, double\l... 0x3F81111111110BB3)\l  %1375 = fneg double %1356\l  %1376 = fmul double %1354, %1375\l  %1377 = fmul double %1353, 5.000000e-01\l  %1378 = tail call double @llvm.fma.f64(double %1376, double %1374, double\l... %1377)\l  %1379 = tail call double @llvm.fma.f64(double %1356, double %1378, double\l... %1367)\l  %1380 = tail call double @llvm.fma.f64(double %1376, double\l... 0xBFC5555555555555, double %1379)\l  %1381 = fsub double %1354, %1380\l  %1382 = and i32 %1355, 1\l  %1383 = icmp eq i32 %1382, 0\l  %1384 = select i1 %1383, double %1381, double %1370\l  %1385 = bitcast double %1384 to \<2 x i32\>\l  %1386 = shl i32 %1355, 30\l  %1387 = bitcast double %1254 to \<2 x i32\>\l  %1388 = extractelement \<2 x i32\> %1387, i64 1\l  %1389 = xor i32 %1386, %1388\l  %1390 = and i32 %1389, -2147483648\l  %1391 = extractelement \<2 x i32\> %1385, i64 1\l  %1392 = xor i32 %1391, %1390\l  %1393 = insertelement \<2 x i32\> %1385, i32 %1392, i64 1\l  %1394 = tail call i1 @llvm.amdgcn.class.f64(double %1255, i32 504)\l  %1395 = select i1 %1394, \<2 x i32\> %1393, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %1396 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %21, i64 %75, i32 0, i32 0, i32 0, i64 1\l  %1397 = bitcast double addrspace(1)* %1396 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %1395, \<2 x i32\> addrspace(1)* %1397, align 8, !tbaa !21\l  %1398 = load double, double addrspace(1)* %140, align 8, !tbaa !17\l  %1399 = fneg contract double %1398\l  %1400 = fmul contract double %1399, %3\l  %1401 = tail call double @llvm.fabs.f64(double %1400)\l  %1402 = fcmp olt double %1401, 0x41D0000000000000\l  br i1 %1402, label %1403, label %1422\l|{<s0>T|<s1>F}}"];
	Node0x4ba4640:s0 -> Node0x4b62380;
	Node0x4ba4640:s1 -> Node0x4b623d0;
	Node0x4b62380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1403:\l1403:                                             \l  %1404 = fmul double %1401, 0x3FE45F306DC9C883\l  %1405 = tail call double @llvm.rint.f64(double %1404)\l  %1406 = tail call double @llvm.fma.f64(double %1405, double\l... 0xBFF921FB54442D18, double %1401)\l  %1407 = tail call double @llvm.fma.f64(double %1405, double\l... 0xBC91A62633145C00, double %1406)\l  %1408 = fmul double %1405, 0x3C91A62633145C00\l  %1409 = fneg double %1408\l  %1410 = tail call double @llvm.fma.f64(double %1405, double\l... 0x3C91A62633145C00, double %1409)\l  %1411 = fsub double %1406, %1408\l  %1412 = fsub double %1406, %1411\l  %1413 = fsub double %1412, %1408\l  %1414 = fsub double %1411, %1407\l  %1415 = fadd double %1414, %1413\l  %1416 = fsub double %1415, %1410\l  %1417 = tail call double @llvm.fma.f64(double %1405, double\l... 0xB97B839A252049C0, double %1416)\l  %1418 = fadd double %1407, %1417\l  %1419 = fsub double %1418, %1407\l  %1420 = fsub double %1417, %1419\l  %1421 = fptosi double %1405 to i32\l  br label %1498\l}"];
	Node0x4b62380 -> Node0x4bab7c0;
	Node0x4b623d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1422:\l1422:                                             \l  %1423 = tail call double @llvm.amdgcn.trig.preop.f64(double %1401, i32 0)\l  %1424 = tail call double @llvm.amdgcn.trig.preop.f64(double %1401, i32 1)\l  %1425 = tail call double @llvm.amdgcn.trig.preop.f64(double %1401, i32 2)\l  %1426 = fcmp oge double %1401, 0x7B00000000000000\l  %1427 = tail call double @llvm.amdgcn.ldexp.f64(double %1401, i32 -128)\l  %1428 = select i1 %1426, double %1427, double %1401\l  %1429 = fmul double %1425, %1428\l  %1430 = fneg double %1429\l  %1431 = tail call double @llvm.fma.f64(double %1425, double %1428, double\l... %1430)\l  %1432 = fmul double %1424, %1428\l  %1433 = fneg double %1432\l  %1434 = tail call double @llvm.fma.f64(double %1424, double %1428, double\l... %1433)\l  %1435 = fmul double %1423, %1428\l  %1436 = fneg double %1435\l  %1437 = tail call double @llvm.fma.f64(double %1423, double %1428, double\l... %1436)\l  %1438 = fadd double %1432, %1437\l  %1439 = fsub double %1438, %1432\l  %1440 = fsub double %1438, %1439\l  %1441 = fsub double %1437, %1439\l  %1442 = fsub double %1432, %1440\l  %1443 = fadd double %1441, %1442\l  %1444 = fadd double %1429, %1434\l  %1445 = fsub double %1444, %1429\l  %1446 = fsub double %1444, %1445\l  %1447 = fsub double %1434, %1445\l  %1448 = fsub double %1429, %1446\l  %1449 = fadd double %1447, %1448\l  %1450 = fadd double %1444, %1443\l  %1451 = fsub double %1450, %1444\l  %1452 = fsub double %1450, %1451\l  %1453 = fsub double %1443, %1451\l  %1454 = fsub double %1444, %1452\l  %1455 = fadd double %1453, %1454\l  %1456 = fadd double %1449, %1455\l  %1457 = fadd double %1431, %1456\l  %1458 = fadd double %1435, %1438\l  %1459 = fsub double %1458, %1435\l  %1460 = fsub double %1438, %1459\l  %1461 = fadd double %1460, %1450\l  %1462 = fsub double %1461, %1460\l  %1463 = fsub double %1450, %1462\l  %1464 = fadd double %1463, %1457\l  %1465 = tail call double @llvm.amdgcn.ldexp.f64(double %1458, i32 -2)\l  %1466 = tail call double @llvm.amdgcn.fract.f64(double %1465)\l  %1467 = tail call i1 @llvm.amdgcn.class.f64(double %1465, i32 516)\l  %1468 = select i1 %1467, double 0.000000e+00, double %1466\l  %1469 = tail call double @llvm.amdgcn.ldexp.f64(double %1468, i32 2)\l  %1470 = fadd double %1469, %1461\l  %1471 = fcmp olt double %1470, 0.000000e+00\l  %1472 = select i1 %1471, double 4.000000e+00, double 0.000000e+00\l  %1473 = fadd double %1469, %1472\l  %1474 = fadd double %1461, %1473\l  %1475 = fptosi double %1474 to i32\l  %1476 = sitofp i32 %1475 to double\l  %1477 = fsub double %1473, %1476\l  %1478 = fadd double %1461, %1477\l  %1479 = fsub double %1478, %1477\l  %1480 = fsub double %1461, %1479\l  %1481 = fadd double %1464, %1480\l  %1482 = fcmp oge double %1478, 5.000000e-01\l  %1483 = zext i1 %1482 to i32\l  %1484 = add nsw i32 %1483, %1475\l  %1485 = select i1 %1482, double 1.000000e+00, double 0.000000e+00\l  %1486 = fsub double %1478, %1485\l  %1487 = fadd double %1486, %1481\l  %1488 = fsub double %1487, %1486\l  %1489 = fsub double %1481, %1488\l  %1490 = fmul double %1487, 0x3FF921FB54442D18\l  %1491 = fneg double %1490\l  %1492 = tail call double @llvm.fma.f64(double %1487, double\l... 0x3FF921FB54442D18, double %1491)\l  %1493 = tail call double @llvm.fma.f64(double %1487, double\l... 0x3C91A62633145C07, double %1492)\l  %1494 = tail call double @llvm.fma.f64(double %1489, double\l... 0x3FF921FB54442D18, double %1493)\l  %1495 = fadd double %1490, %1494\l  %1496 = fsub double %1495, %1490\l  %1497 = fsub double %1494, %1496\l  br label %1498\l}"];
	Node0x4b623d0 -> Node0x4bab7c0;
	Node0x4bab7c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1498:\l1498:                                             \l  %1499 = phi double [ %1420, %1403 ], [ %1497, %1422 ]\l  %1500 = phi double [ %1418, %1403 ], [ %1495, %1422 ]\l  %1501 = phi i32 [ %1421, %1403 ], [ %1484, %1422 ]\l  %1502 = fmul double %1500, %1500\l  %1503 = fmul double %1502, 5.000000e-01\l  %1504 = fsub double 1.000000e+00, %1503\l  %1505 = fsub double 1.000000e+00, %1504\l  %1506 = fsub double %1505, %1503\l  %1507 = fmul double %1502, %1502\l  %1508 = tail call double @llvm.fma.f64(double %1502, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %1509 = tail call double @llvm.fma.f64(double %1502, double %1508, double\l... 0xBE927E4FA17F65F6)\l  %1510 = tail call double @llvm.fma.f64(double %1502, double %1509, double\l... 0x3EFA01A019F4EC90)\l  %1511 = tail call double @llvm.fma.f64(double %1502, double %1510, double\l... 0xBF56C16C16C16967)\l  %1512 = tail call double @llvm.fma.f64(double %1502, double %1511, double\l... 0x3FA5555555555555)\l  %1513 = fneg double %1499\l  %1514 = tail call double @llvm.fma.f64(double %1500, double %1513, double\l... %1506)\l  %1515 = tail call double @llvm.fma.f64(double %1507, double %1512, double\l... %1514)\l  %1516 = fadd double %1504, %1515\l  %1517 = tail call double @llvm.fma.f64(double %1502, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %1518 = tail call double @llvm.fma.f64(double %1502, double %1517, double\l... 0x3EC71DE3796CDE01)\l  %1519 = tail call double @llvm.fma.f64(double %1502, double %1518, double\l... 0xBF2A01A019E83E5C)\l  %1520 = tail call double @llvm.fma.f64(double %1502, double %1519, double\l... 0x3F81111111110BB3)\l  %1521 = fneg double %1502\l  %1522 = fmul double %1500, %1521\l  %1523 = fmul double %1499, 5.000000e-01\l  %1524 = tail call double @llvm.fma.f64(double %1522, double %1520, double\l... %1523)\l  %1525 = tail call double @llvm.fma.f64(double %1502, double %1524, double\l... %1513)\l  %1526 = tail call double @llvm.fma.f64(double %1522, double\l... 0xBFC5555555555555, double %1525)\l  %1527 = fsub double %1500, %1526\l  %1528 = fneg double %1527\l  %1529 = and i32 %1501, 1\l  %1530 = icmp eq i32 %1529, 0\l  %1531 = select i1 %1530, double %1516, double %1528\l  %1532 = bitcast double %1531 to \<2 x i32\>\l  %1533 = shl i32 %1501, 30\l  %1534 = and i32 %1533, -2147483648\l  %1535 = extractelement \<2 x i32\> %1532, i64 1\l  %1536 = xor i32 %1535, %1534\l  %1537 = insertelement \<2 x i32\> %1532, i32 %1536, i64 1\l  %1538 = tail call i1 @llvm.amdgcn.class.f64(double %1401, i32 504)\l  %1539 = select i1 %1538, \<2 x i32\> %1537, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %1540 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %20, i64 %75, i32 0, i32 0, i32 0, i64 0\l  %1541 = bitcast double addrspace(1)* %1540 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %1539, \<2 x i32\> addrspace(1)* %1541, align 16, !tbaa !21\l  %1542 = load double, double addrspace(1)* %140, align 8, !tbaa !17\l  %1543 = fneg contract double %1542\l  %1544 = fmul contract double %1543, %3\l  %1545 = tail call double @llvm.fabs.f64(double %1544)\l  %1546 = fcmp olt double %1545, 0x41D0000000000000\l  br i1 %1546, label %1547, label %1566\l|{<s0>T|<s1>F}}"];
	Node0x4bab7c0:s0 -> Node0x4bb1000;
	Node0x4bab7c0:s1 -> Node0x4bb1050;
	Node0x4bb1000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1547:\l1547:                                             \l  %1548 = fmul double %1545, 0x3FE45F306DC9C883\l  %1549 = tail call double @llvm.rint.f64(double %1548)\l  %1550 = tail call double @llvm.fma.f64(double %1549, double\l... 0xBFF921FB54442D18, double %1545)\l  %1551 = tail call double @llvm.fma.f64(double %1549, double\l... 0xBC91A62633145C00, double %1550)\l  %1552 = fmul double %1549, 0x3C91A62633145C00\l  %1553 = fneg double %1552\l  %1554 = tail call double @llvm.fma.f64(double %1549, double\l... 0x3C91A62633145C00, double %1553)\l  %1555 = fsub double %1550, %1552\l  %1556 = fsub double %1550, %1555\l  %1557 = fsub double %1556, %1552\l  %1558 = fsub double %1555, %1551\l  %1559 = fadd double %1558, %1557\l  %1560 = fsub double %1559, %1554\l  %1561 = tail call double @llvm.fma.f64(double %1549, double\l... 0xB97B839A252049C0, double %1560)\l  %1562 = fadd double %1551, %1561\l  %1563 = fsub double %1562, %1551\l  %1564 = fsub double %1561, %1563\l  %1565 = fptosi double %1549 to i32\l  br label %1642\l}"];
	Node0x4bb1000 -> Node0x4bb1e10;
	Node0x4bb1050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%1566:\l1566:                                             \l  %1567 = tail call double @llvm.amdgcn.trig.preop.f64(double %1545, i32 0)\l  %1568 = tail call double @llvm.amdgcn.trig.preop.f64(double %1545, i32 1)\l  %1569 = tail call double @llvm.amdgcn.trig.preop.f64(double %1545, i32 2)\l  %1570 = fcmp oge double %1545, 0x7B00000000000000\l  %1571 = tail call double @llvm.amdgcn.ldexp.f64(double %1545, i32 -128)\l  %1572 = select i1 %1570, double %1571, double %1545\l  %1573 = fmul double %1569, %1572\l  %1574 = fneg double %1573\l  %1575 = tail call double @llvm.fma.f64(double %1569, double %1572, double\l... %1574)\l  %1576 = fmul double %1568, %1572\l  %1577 = fneg double %1576\l  %1578 = tail call double @llvm.fma.f64(double %1568, double %1572, double\l... %1577)\l  %1579 = fmul double %1567, %1572\l  %1580 = fneg double %1579\l  %1581 = tail call double @llvm.fma.f64(double %1567, double %1572, double\l... %1580)\l  %1582 = fadd double %1576, %1581\l  %1583 = fsub double %1582, %1576\l  %1584 = fsub double %1582, %1583\l  %1585 = fsub double %1581, %1583\l  %1586 = fsub double %1576, %1584\l  %1587 = fadd double %1585, %1586\l  %1588 = fadd double %1573, %1578\l  %1589 = fsub double %1588, %1573\l  %1590 = fsub double %1588, %1589\l  %1591 = fsub double %1578, %1589\l  %1592 = fsub double %1573, %1590\l  %1593 = fadd double %1591, %1592\l  %1594 = fadd double %1588, %1587\l  %1595 = fsub double %1594, %1588\l  %1596 = fsub double %1594, %1595\l  %1597 = fsub double %1587, %1595\l  %1598 = fsub double %1588, %1596\l  %1599 = fadd double %1597, %1598\l  %1600 = fadd double %1593, %1599\l  %1601 = fadd double %1575, %1600\l  %1602 = fadd double %1579, %1582\l  %1603 = fsub double %1602, %1579\l  %1604 = fsub double %1582, %1603\l  %1605 = fadd double %1604, %1594\l  %1606 = fsub double %1605, %1604\l  %1607 = fsub double %1594, %1606\l  %1608 = fadd double %1607, %1601\l  %1609 = tail call double @llvm.amdgcn.ldexp.f64(double %1602, i32 -2)\l  %1610 = tail call double @llvm.amdgcn.fract.f64(double %1609)\l  %1611 = tail call i1 @llvm.amdgcn.class.f64(double %1609, i32 516)\l  %1612 = select i1 %1611, double 0.000000e+00, double %1610\l  %1613 = tail call double @llvm.amdgcn.ldexp.f64(double %1612, i32 2)\l  %1614 = fadd double %1613, %1605\l  %1615 = fcmp olt double %1614, 0.000000e+00\l  %1616 = select i1 %1615, double 4.000000e+00, double 0.000000e+00\l  %1617 = fadd double %1613, %1616\l  %1618 = fadd double %1605, %1617\l  %1619 = fptosi double %1618 to i32\l  %1620 = sitofp i32 %1619 to double\l  %1621 = fsub double %1617, %1620\l  %1622 = fadd double %1605, %1621\l  %1623 = fsub double %1622, %1621\l  %1624 = fsub double %1605, %1623\l  %1625 = fadd double %1608, %1624\l  %1626 = fcmp oge double %1622, 5.000000e-01\l  %1627 = zext i1 %1626 to i32\l  %1628 = add nsw i32 %1627, %1619\l  %1629 = select i1 %1626, double 1.000000e+00, double 0.000000e+00\l  %1630 = fsub double %1622, %1629\l  %1631 = fadd double %1630, %1625\l  %1632 = fsub double %1631, %1630\l  %1633 = fsub double %1625, %1632\l  %1634 = fmul double %1631, 0x3FF921FB54442D18\l  %1635 = fneg double %1634\l  %1636 = tail call double @llvm.fma.f64(double %1631, double\l... 0x3FF921FB54442D18, double %1635)\l  %1637 = tail call double @llvm.fma.f64(double %1631, double\l... 0x3C91A62633145C07, double %1636)\l  %1638 = tail call double @llvm.fma.f64(double %1633, double\l... 0x3FF921FB54442D18, double %1637)\l  %1639 = fadd double %1634, %1638\l  %1640 = fsub double %1639, %1634\l  %1641 = fsub double %1638, %1640\l  br label %1642\l}"];
	Node0x4bb1050 -> Node0x4bb1e10;
	Node0x4bb1e10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1642:\l1642:                                             \l  %1643 = phi double [ %1564, %1547 ], [ %1641, %1566 ]\l  %1644 = phi double [ %1562, %1547 ], [ %1639, %1566 ]\l  %1645 = phi i32 [ %1565, %1547 ], [ %1628, %1566 ]\l  %1646 = fmul double %1644, %1644\l  %1647 = fmul double %1646, 5.000000e-01\l  %1648 = fsub double 1.000000e+00, %1647\l  %1649 = fsub double 1.000000e+00, %1648\l  %1650 = fsub double %1649, %1647\l  %1651 = fmul double %1646, %1646\l  %1652 = tail call double @llvm.fma.f64(double %1646, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %1653 = tail call double @llvm.fma.f64(double %1646, double %1652, double\l... 0xBE927E4FA17F65F6)\l  %1654 = tail call double @llvm.fma.f64(double %1646, double %1653, double\l... 0x3EFA01A019F4EC90)\l  %1655 = tail call double @llvm.fma.f64(double %1646, double %1654, double\l... 0xBF56C16C16C16967)\l  %1656 = tail call double @llvm.fma.f64(double %1646, double %1655, double\l... 0x3FA5555555555555)\l  %1657 = fneg double %1643\l  %1658 = tail call double @llvm.fma.f64(double %1644, double %1657, double\l... %1650)\l  %1659 = tail call double @llvm.fma.f64(double %1651, double %1656, double\l... %1658)\l  %1660 = fadd double %1648, %1659\l  %1661 = tail call double @llvm.fma.f64(double %1646, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %1662 = tail call double @llvm.fma.f64(double %1646, double %1661, double\l... 0x3EC71DE3796CDE01)\l  %1663 = tail call double @llvm.fma.f64(double %1646, double %1662, double\l... 0xBF2A01A019E83E5C)\l  %1664 = tail call double @llvm.fma.f64(double %1646, double %1663, double\l... 0x3F81111111110BB3)\l  %1665 = fneg double %1646\l  %1666 = fmul double %1644, %1665\l  %1667 = fmul double %1643, 5.000000e-01\l  %1668 = tail call double @llvm.fma.f64(double %1666, double %1664, double\l... %1667)\l  %1669 = tail call double @llvm.fma.f64(double %1646, double %1668, double\l... %1657)\l  %1670 = tail call double @llvm.fma.f64(double %1666, double\l... 0xBFC5555555555555, double %1669)\l  %1671 = fsub double %1644, %1670\l  %1672 = and i32 %1645, 1\l  %1673 = icmp eq i32 %1672, 0\l  %1674 = select i1 %1673, double %1671, double %1660\l  %1675 = bitcast double %1674 to \<2 x i32\>\l  %1676 = shl i32 %1645, 30\l  %1677 = bitcast double %1544 to \<2 x i32\>\l  %1678 = extractelement \<2 x i32\> %1677, i64 1\l  %1679 = xor i32 %1676, %1678\l  %1680 = and i32 %1679, -2147483648\l  %1681 = extractelement \<2 x i32\> %1675, i64 1\l  %1682 = xor i32 %1681, %1680\l  %1683 = insertelement \<2 x i32\> %1675, i32 %1682, i64 1\l  %1684 = tail call i1 @llvm.amdgcn.class.f64(double %1545, i32 504)\l  %1685 = select i1 %1684, \<2 x i32\> %1683, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %1686 = getelementptr inbounds %struct.HIP_vector_type,\l... %struct.HIP_vector_type addrspace(1)* %20, i64 %75, i32 0, i32 0, i32 0, i64 1\l  %1687 = bitcast double addrspace(1)* %1686 to \<2 x i32\> addrspace(1)*\l  store \<2 x i32\> %1685, \<2 x i32\> addrspace(1)* %1687, align 8, !tbaa !21\l  ret void\l}"];
}
