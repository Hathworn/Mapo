; ModuleID = '../data/hip_kernels/925/63/main.cu'
source_filename = "../data/hip_kernels/925/63/main.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.HIP_vector_type = type { %struct.HIP_vector_base }
%struct.HIP_vector_base = type { %union.anon }
%union.anon = type { <2 x double> }

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z10aux_fieldsPdS_ddS_S_S_S_S_S_S_S_S_P15HIP_vector_typeIdLj2EES2_S2_S2_S2_S2_S2_S2_S2_S2_(double addrspace(1)* nocapture readonly %0, double addrspace(1)* nocapture readonly %1, double %2, double %3, double addrspace(1)* nocapture readonly %4, double addrspace(1)* nocapture readonly %5, double addrspace(1)* nocapture readonly %6, double addrspace(1)* nocapture readonly %7, double addrspace(1)* nocapture readonly %8, double addrspace(1)* nocapture readonly %9, double addrspace(1)* nocapture %10, double addrspace(1)* nocapture %11, double addrspace(1)* nocapture %12, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %13, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %14, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %15, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %16, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %17, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %18, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %19, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %20, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %21, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %22) local_unnamed_addr #0 {
  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %26 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  %27 = getelementptr inbounds i8, i8 addrspace(4)* %26, i64 12
  %28 = bitcast i8 addrspace(4)* %27 to i32 addrspace(4)*
  %29 = load i32, i32 addrspace(4)* %28, align 4, !tbaa !4
  %30 = getelementptr i8, i8 addrspace(4)* %26, i64 4
  %31 = bitcast i8 addrspace(4)* %30 to i16 addrspace(4)*
  %32 = load i16, i16 addrspace(4)* %31, align 4, !range !13, !invariant.load !14
  %33 = zext i16 %32 to i32
  %34 = udiv i32 %29, %33
  %35 = mul i32 %34, %33
  %36 = icmp ugt i32 %29, %35
  %37 = zext i1 %36 to i32
  %38 = add i32 %34, %37
  %39 = getelementptr inbounds i8, i8 addrspace(4)* %26, i64 16
  %40 = bitcast i8 addrspace(4)* %39 to i32 addrspace(4)*
  %41 = load i32, i32 addrspace(4)* %40, align 8, !tbaa !15
  %42 = getelementptr i8, i8 addrspace(4)* %26, i64 6
  %43 = bitcast i8 addrspace(4)* %42 to i16 addrspace(4)*
  %44 = load i16, i16 addrspace(4)* %43, align 2, !range !13, !invariant.load !14
  %45 = zext i16 %44 to i32
  %46 = udiv i32 %41, %45
  %47 = mul i32 %46, %45
  %48 = icmp ugt i32 %41, %47
  %49 = zext i1 %48 to i32
  %50 = add i32 %46, %49
  %51 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %52 = mul i32 %50, %51
  %53 = add i32 %52, %25
  %54 = mul i32 %53, %38
  %55 = add i32 %54, %24
  %56 = mul i32 %24, %33
  %57 = mul i32 %25, %45
  %58 = getelementptr i8, i8 addrspace(4)* %26, i64 8
  %59 = bitcast i8 addrspace(4)* %58 to i16 addrspace(4)*
  %60 = load i16, i16 addrspace(4)* %59, align 4, !range !13, !invariant.load !14
  %61 = zext i16 %60 to i32
  %62 = mul i32 %51, %61
  %63 = mul i32 %55, %61
  %64 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16
  %65 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16
  %66 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16
  %67 = add i32 %63, %65
  %68 = mul i32 %67, %45
  %69 = add i32 %68, %64
  %70 = mul i32 %69, %33
  %71 = add i32 %70, %66
  %72 = add i32 %56, %66
  %73 = add i32 %57, %64
  %74 = add i32 %62, %65
  %75 = sext i32 %71 to i64
  %76 = getelementptr inbounds double, double addrspace(1)* %0, i64 %75
  %77 = load double, double addrspace(1)* %76, align 8, !tbaa !17, !amdgpu.noclobber !14
  %78 = fneg contract double %77
  %79 = fdiv contract double %2, 0x38F185A6A75D2CEB
  %80 = fmul contract double %79, %78
  %81 = fmul double %80, 0x3FF71547652B82FE
  %82 = tail call double @llvm.rint.f64(double %81)
  %83 = fneg double %82
  %84 = tail call double @llvm.fma.f64(double %83, double 0x3FE62E42FEFA39EF, double %80)
  %85 = tail call double @llvm.fma.f64(double %83, double 0x3C7ABC9E3B39803F, double %84)
  %86 = tail call double @llvm.fma.f64(double %85, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %87 = tail call double @llvm.fma.f64(double %85, double %86, double 0x3EC71DEE623FDE64)
  %88 = tail call double @llvm.fma.f64(double %85, double %87, double 0x3EFA01997C89E6B0)
  %89 = tail call double @llvm.fma.f64(double %85, double %88, double 0x3F2A01A014761F6E)
  %90 = tail call double @llvm.fma.f64(double %85, double %89, double 0x3F56C16C1852B7B0)
  %91 = tail call double @llvm.fma.f64(double %85, double %90, double 0x3F81111111122322)
  %92 = tail call double @llvm.fma.f64(double %85, double %91, double 0x3FA55555555502A1)
  %93 = tail call double @llvm.fma.f64(double %85, double %92, double 0x3FC5555555555511)
  %94 = tail call double @llvm.fma.f64(double %85, double %93, double 0x3FE000000000000B)
  %95 = tail call double @llvm.fma.f64(double %85, double %94, double 1.000000e+00)
  %96 = tail call double @llvm.fma.f64(double %85, double %95, double 1.000000e+00)
  %97 = fptosi double %82 to i32
  %98 = tail call double @llvm.amdgcn.ldexp.f64(double %96, i32 %97)
  %99 = fcmp ogt double %80, 1.024000e+03
  %100 = select i1 %99, double 0x7FF0000000000000, double %98
  %101 = fcmp olt double %80, -1.075000e+03
  %102 = select i1 %101, double 0.000000e+00, double %100
  %103 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %13, i64 %75, i32 0, i32 0, i32 0, i64 0
  store double %102, double addrspace(1)* %103, align 16, !tbaa !21
  %104 = getelementptr inbounds double, double addrspace(1)* %1, i64 %75
  %105 = load double, double addrspace(1)* %104, align 8, !tbaa !17
  %106 = fneg contract double %105
  %107 = fdiv contract double %2, 0x38E185A6A75D2CEB
  %108 = fmul contract double %107, %106
  %109 = fmul double %108, 0x3FF71547652B82FE
  %110 = tail call double @llvm.rint.f64(double %109)
  %111 = fneg double %110
  %112 = tail call double @llvm.fma.f64(double %111, double 0x3FE62E42FEFA39EF, double %108)
  %113 = tail call double @llvm.fma.f64(double %111, double 0x3C7ABC9E3B39803F, double %112)
  %114 = tail call double @llvm.fma.f64(double %113, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %115 = tail call double @llvm.fma.f64(double %113, double %114, double 0x3EC71DEE623FDE64)
  %116 = tail call double @llvm.fma.f64(double %113, double %115, double 0x3EFA01997C89E6B0)
  %117 = tail call double @llvm.fma.f64(double %113, double %116, double 0x3F2A01A014761F6E)
  %118 = tail call double @llvm.fma.f64(double %113, double %117, double 0x3F56C16C1852B7B0)
  %119 = tail call double @llvm.fma.f64(double %113, double %118, double 0x3F81111111122322)
  %120 = tail call double @llvm.fma.f64(double %113, double %119, double 0x3FA55555555502A1)
  %121 = tail call double @llvm.fma.f64(double %113, double %120, double 0x3FC5555555555511)
  %122 = tail call double @llvm.fma.f64(double %113, double %121, double 0x3FE000000000000B)
  %123 = tail call double @llvm.fma.f64(double %113, double %122, double 1.000000e+00)
  %124 = tail call double @llvm.fma.f64(double %113, double %123, double 1.000000e+00)
  %125 = fptosi double %110 to i32
  %126 = tail call double @llvm.amdgcn.ldexp.f64(double %124, i32 %125)
  %127 = fcmp ogt double %108, 1.024000e+03
  %128 = select i1 %127, double 0x7FF0000000000000, double %126
  %129 = fcmp olt double %108, -1.075000e+03
  %130 = select i1 %129, double 0.000000e+00, double %128
  %131 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %15, i64 %75, i32 0, i32 0, i32 0, i64 0
  store double %130, double addrspace(1)* %131, align 16, !tbaa !21
  %132 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %13, i64 %75, i32 0, i32 0, i32 0, i64 1
  store double 0.000000e+00, double addrspace(1)* %132, align 8, !tbaa !21
  %133 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %15, i64 %75, i32 0, i32 0, i32 0, i64 1
  store double 0.000000e+00, double addrspace(1)* %133, align 8, !tbaa !21
  %134 = getelementptr inbounds double, double addrspace(1)* %4, i64 %75
  %135 = load double, double addrspace(1)* %134, align 8, !tbaa !17
  %136 = sext i32 %72 to i64
  %137 = getelementptr inbounds double, double addrspace(1)* %7, i64 %136
  %138 = load double, double addrspace(1)* %137, align 8, !tbaa !17
  %139 = fmul contract double %135, %138
  %140 = getelementptr inbounds double, double addrspace(1)* %10, i64 %75
  store double %139, double addrspace(1)* %140, align 8, !tbaa !17
  %141 = getelementptr inbounds double, double addrspace(1)* %5, i64 %75
  %142 = load double, double addrspace(1)* %141, align 8, !tbaa !17
  %143 = sext i32 %73 to i64
  %144 = getelementptr inbounds double, double addrspace(1)* %8, i64 %143
  %145 = load double, double addrspace(1)* %144, align 8, !tbaa !17
  %146 = fmul contract double %142, %145
  %147 = getelementptr inbounds double, double addrspace(1)* %11, i64 %75
  store double %146, double addrspace(1)* %147, align 8, !tbaa !17
  %148 = getelementptr inbounds double, double addrspace(1)* %6, i64 %75
  %149 = load double, double addrspace(1)* %148, align 8, !tbaa !17
  %150 = sext i32 %74 to i64
  %151 = getelementptr inbounds double, double addrspace(1)* %9, i64 %150
  %152 = load double, double addrspace(1)* %151, align 8, !tbaa !17
  %153 = fmul contract double %149, %152
  %154 = getelementptr inbounds double, double addrspace(1)* %12, i64 %75
  store double %153, double addrspace(1)* %154, align 8, !tbaa !17
  %155 = load double, double addrspace(1)* %140, align 8, !tbaa !17
  %156 = fneg contract double %155
  %157 = fmul contract double %156, %2
  %158 = fmul double %157, 0x3FF71547652B82FE
  %159 = tail call double @llvm.rint.f64(double %158)
  %160 = fneg double %159
  %161 = tail call double @llvm.fma.f64(double %160, double 0x3FE62E42FEFA39EF, double %157)
  %162 = tail call double @llvm.fma.f64(double %160, double 0x3C7ABC9E3B39803F, double %161)
  %163 = tail call double @llvm.fma.f64(double %162, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %164 = tail call double @llvm.fma.f64(double %162, double %163, double 0x3EC71DEE623FDE64)
  %165 = tail call double @llvm.fma.f64(double %162, double %164, double 0x3EFA01997C89E6B0)
  %166 = tail call double @llvm.fma.f64(double %162, double %165, double 0x3F2A01A014761F6E)
  %167 = tail call double @llvm.fma.f64(double %162, double %166, double 0x3F56C16C1852B7B0)
  %168 = tail call double @llvm.fma.f64(double %162, double %167, double 0x3F81111111122322)
  %169 = tail call double @llvm.fma.f64(double %162, double %168, double 0x3FA55555555502A1)
  %170 = tail call double @llvm.fma.f64(double %162, double %169, double 0x3FC5555555555511)
  %171 = tail call double @llvm.fma.f64(double %162, double %170, double 0x3FE000000000000B)
  %172 = tail call double @llvm.fma.f64(double %162, double %171, double 1.000000e+00)
  %173 = tail call double @llvm.fma.f64(double %162, double %172, double 1.000000e+00)
  %174 = fptosi double %159 to i32
  %175 = tail call double @llvm.amdgcn.ldexp.f64(double %173, i32 %174)
  %176 = fcmp ogt double %157, 1.024000e+03
  %177 = select i1 %176, double 0x7FF0000000000000, double %175
  %178 = fcmp olt double %157, -1.075000e+03
  %179 = select i1 %178, double 0.000000e+00, double %177
  %180 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %17, i64 %75, i32 0, i32 0, i32 0, i64 0
  store double %179, double addrspace(1)* %180, align 16, !tbaa !21
  %181 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %17, i64 %75, i32 0, i32 0, i32 0, i64 1
  store double 0.000000e+00, double addrspace(1)* %181, align 8, !tbaa !21
  %182 = load double, double addrspace(1)* %147, align 8, !tbaa !17
  %183 = fneg contract double %182
  %184 = fmul contract double %183, %2
  %185 = fmul double %184, 0x3FF71547652B82FE
  %186 = tail call double @llvm.rint.f64(double %185)
  %187 = fneg double %186
  %188 = tail call double @llvm.fma.f64(double %187, double 0x3FE62E42FEFA39EF, double %184)
  %189 = tail call double @llvm.fma.f64(double %187, double 0x3C7ABC9E3B39803F, double %188)
  %190 = tail call double @llvm.fma.f64(double %189, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %191 = tail call double @llvm.fma.f64(double %189, double %190, double 0x3EC71DEE623FDE64)
  %192 = tail call double @llvm.fma.f64(double %189, double %191, double 0x3EFA01997C89E6B0)
  %193 = tail call double @llvm.fma.f64(double %189, double %192, double 0x3F2A01A014761F6E)
  %194 = tail call double @llvm.fma.f64(double %189, double %193, double 0x3F56C16C1852B7B0)
  %195 = tail call double @llvm.fma.f64(double %189, double %194, double 0x3F81111111122322)
  %196 = tail call double @llvm.fma.f64(double %189, double %195, double 0x3FA55555555502A1)
  %197 = tail call double @llvm.fma.f64(double %189, double %196, double 0x3FC5555555555511)
  %198 = tail call double @llvm.fma.f64(double %189, double %197, double 0x3FE000000000000B)
  %199 = tail call double @llvm.fma.f64(double %189, double %198, double 1.000000e+00)
  %200 = tail call double @llvm.fma.f64(double %189, double %199, double 1.000000e+00)
  %201 = fptosi double %186 to i32
  %202 = tail call double @llvm.amdgcn.ldexp.f64(double %200, i32 %201)
  %203 = fcmp ogt double %184, 1.024000e+03
  %204 = select i1 %203, double 0x7FF0000000000000, double %202
  %205 = fcmp olt double %184, -1.075000e+03
  %206 = select i1 %205, double 0.000000e+00, double %204
  %207 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %18, i64 %75, i32 0, i32 0, i32 0, i64 0
  store double %206, double addrspace(1)* %207, align 16, !tbaa !21
  %208 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %18, i64 %75, i32 0, i32 0, i32 0, i64 1
  store double 0.000000e+00, double addrspace(1)* %208, align 8, !tbaa !21
  %209 = load double, double addrspace(1)* %154, align 8, !tbaa !17
  %210 = fneg contract double %209
  %211 = fmul contract double %210, %2
  %212 = fmul double %211, 0x3FF71547652B82FE
  %213 = tail call double @llvm.rint.f64(double %212)
  %214 = fneg double %213
  %215 = tail call double @llvm.fma.f64(double %214, double 0x3FE62E42FEFA39EF, double %211)
  %216 = tail call double @llvm.fma.f64(double %214, double 0x3C7ABC9E3B39803F, double %215)
  %217 = tail call double @llvm.fma.f64(double %216, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %218 = tail call double @llvm.fma.f64(double %216, double %217, double 0x3EC71DEE623FDE64)
  %219 = tail call double @llvm.fma.f64(double %216, double %218, double 0x3EFA01997C89E6B0)
  %220 = tail call double @llvm.fma.f64(double %216, double %219, double 0x3F2A01A014761F6E)
  %221 = tail call double @llvm.fma.f64(double %216, double %220, double 0x3F56C16C1852B7B0)
  %222 = tail call double @llvm.fma.f64(double %216, double %221, double 0x3F81111111122322)
  %223 = tail call double @llvm.fma.f64(double %216, double %222, double 0x3FA55555555502A1)
  %224 = tail call double @llvm.fma.f64(double %216, double %223, double 0x3FC5555555555511)
  %225 = tail call double @llvm.fma.f64(double %216, double %224, double 0x3FE000000000000B)
  %226 = tail call double @llvm.fma.f64(double %216, double %225, double 1.000000e+00)
  %227 = tail call double @llvm.fma.f64(double %216, double %226, double 1.000000e+00)
  %228 = fptosi double %213 to i32
  %229 = tail call double @llvm.amdgcn.ldexp.f64(double %227, i32 %228)
  %230 = fcmp ogt double %211, 1.024000e+03
  %231 = select i1 %230, double 0x7FF0000000000000, double %229
  %232 = fcmp olt double %211, -1.075000e+03
  %233 = select i1 %232, double 0.000000e+00, double %231
  %234 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %19, i64 %75, i32 0, i32 0, i32 0, i64 0
  store double %233, double addrspace(1)* %234, align 16, !tbaa !21
  %235 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %19, i64 %75, i32 0, i32 0, i32 0, i64 1
  store double 0.000000e+00, double addrspace(1)* %235, align 8, !tbaa !21
  %236 = load double, double addrspace(1)* %76, align 8, !tbaa !17
  %237 = fneg contract double %236
  %238 = fdiv contract double %3, 0x38F185A6A75D2CEB
  %239 = fmul contract double %238, %237
  %240 = tail call double @llvm.fabs.f64(double %239)
  %241 = fcmp olt double %240, 0x41D0000000000000
  br i1 %241, label %242, label %261

242:                                              ; preds = %23
  %243 = fmul double %240, 0x3FE45F306DC9C883
  %244 = tail call double @llvm.rint.f64(double %243)
  %245 = tail call double @llvm.fma.f64(double %244, double 0xBFF921FB54442D18, double %240)
  %246 = tail call double @llvm.fma.f64(double %244, double 0xBC91A62633145C00, double %245)
  %247 = fmul double %244, 0x3C91A62633145C00
  %248 = fneg double %247
  %249 = tail call double @llvm.fma.f64(double %244, double 0x3C91A62633145C00, double %248)
  %250 = fsub double %245, %247
  %251 = fsub double %245, %250
  %252 = fsub double %251, %247
  %253 = fsub double %250, %246
  %254 = fadd double %253, %252
  %255 = fsub double %254, %249
  %256 = tail call double @llvm.fma.f64(double %244, double 0xB97B839A252049C0, double %255)
  %257 = fadd double %246, %256
  %258 = fsub double %257, %246
  %259 = fsub double %256, %258
  %260 = fptosi double %244 to i32
  br label %337

261:                                              ; preds = %23
  %262 = tail call double @llvm.amdgcn.trig.preop.f64(double %240, i32 0)
  %263 = tail call double @llvm.amdgcn.trig.preop.f64(double %240, i32 1)
  %264 = tail call double @llvm.amdgcn.trig.preop.f64(double %240, i32 2)
  %265 = fcmp oge double %240, 0x7B00000000000000
  %266 = tail call double @llvm.amdgcn.ldexp.f64(double %240, i32 -128)
  %267 = select i1 %265, double %266, double %240
  %268 = fmul double %264, %267
  %269 = fneg double %268
  %270 = tail call double @llvm.fma.f64(double %264, double %267, double %269)
  %271 = fmul double %263, %267
  %272 = fneg double %271
  %273 = tail call double @llvm.fma.f64(double %263, double %267, double %272)
  %274 = fmul double %262, %267
  %275 = fneg double %274
  %276 = tail call double @llvm.fma.f64(double %262, double %267, double %275)
  %277 = fadd double %271, %276
  %278 = fsub double %277, %271
  %279 = fsub double %277, %278
  %280 = fsub double %276, %278
  %281 = fsub double %271, %279
  %282 = fadd double %280, %281
  %283 = fadd double %268, %273
  %284 = fsub double %283, %268
  %285 = fsub double %283, %284
  %286 = fsub double %273, %284
  %287 = fsub double %268, %285
  %288 = fadd double %286, %287
  %289 = fadd double %283, %282
  %290 = fsub double %289, %283
  %291 = fsub double %289, %290
  %292 = fsub double %282, %290
  %293 = fsub double %283, %291
  %294 = fadd double %292, %293
  %295 = fadd double %288, %294
  %296 = fadd double %270, %295
  %297 = fadd double %274, %277
  %298 = fsub double %297, %274
  %299 = fsub double %277, %298
  %300 = fadd double %299, %289
  %301 = fsub double %300, %299
  %302 = fsub double %289, %301
  %303 = fadd double %302, %296
  %304 = tail call double @llvm.amdgcn.ldexp.f64(double %297, i32 -2)
  %305 = tail call double @llvm.amdgcn.fract.f64(double %304)
  %306 = tail call i1 @llvm.amdgcn.class.f64(double %304, i32 516)
  %307 = select i1 %306, double 0.000000e+00, double %305
  %308 = tail call double @llvm.amdgcn.ldexp.f64(double %307, i32 2)
  %309 = fadd double %308, %300
  %310 = fcmp olt double %309, 0.000000e+00
  %311 = select i1 %310, double 4.000000e+00, double 0.000000e+00
  %312 = fadd double %308, %311
  %313 = fadd double %300, %312
  %314 = fptosi double %313 to i32
  %315 = sitofp i32 %314 to double
  %316 = fsub double %312, %315
  %317 = fadd double %300, %316
  %318 = fsub double %317, %316
  %319 = fsub double %300, %318
  %320 = fadd double %303, %319
  %321 = fcmp oge double %317, 5.000000e-01
  %322 = zext i1 %321 to i32
  %323 = add nsw i32 %322, %314
  %324 = select i1 %321, double 1.000000e+00, double 0.000000e+00
  %325 = fsub double %317, %324
  %326 = fadd double %325, %320
  %327 = fsub double %326, %325
  %328 = fsub double %320, %327
  %329 = fmul double %326, 0x3FF921FB54442D18
  %330 = fneg double %329
  %331 = tail call double @llvm.fma.f64(double %326, double 0x3FF921FB54442D18, double %330)
  %332 = tail call double @llvm.fma.f64(double %326, double 0x3C91A62633145C07, double %331)
  %333 = tail call double @llvm.fma.f64(double %328, double 0x3FF921FB54442D18, double %332)
  %334 = fadd double %329, %333
  %335 = fsub double %334, %329
  %336 = fsub double %333, %335
  br label %337

337:                                              ; preds = %242, %261
  %338 = phi double [ %259, %242 ], [ %336, %261 ]
  %339 = phi double [ %257, %242 ], [ %334, %261 ]
  %340 = phi i32 [ %260, %242 ], [ %323, %261 ]
  %341 = fmul double %339, %339
  %342 = fmul double %341, 5.000000e-01
  %343 = fsub double 1.000000e+00, %342
  %344 = fsub double 1.000000e+00, %343
  %345 = fsub double %344, %342
  %346 = fmul double %341, %341
  %347 = tail call double @llvm.fma.f64(double %341, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %348 = tail call double @llvm.fma.f64(double %341, double %347, double 0xBE927E4FA17F65F6)
  %349 = tail call double @llvm.fma.f64(double %341, double %348, double 0x3EFA01A019F4EC90)
  %350 = tail call double @llvm.fma.f64(double %341, double %349, double 0xBF56C16C16C16967)
  %351 = tail call double @llvm.fma.f64(double %341, double %350, double 0x3FA5555555555555)
  %352 = fneg double %338
  %353 = tail call double @llvm.fma.f64(double %339, double %352, double %345)
  %354 = tail call double @llvm.fma.f64(double %346, double %351, double %353)
  %355 = fadd double %343, %354
  %356 = tail call double @llvm.fma.f64(double %341, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %357 = tail call double @llvm.fma.f64(double %341, double %356, double 0x3EC71DE3796CDE01)
  %358 = tail call double @llvm.fma.f64(double %341, double %357, double 0xBF2A01A019E83E5C)
  %359 = tail call double @llvm.fma.f64(double %341, double %358, double 0x3F81111111110BB3)
  %360 = fneg double %341
  %361 = fmul double %339, %360
  %362 = fmul double %338, 5.000000e-01
  %363 = tail call double @llvm.fma.f64(double %361, double %359, double %362)
  %364 = tail call double @llvm.fma.f64(double %341, double %363, double %352)
  %365 = tail call double @llvm.fma.f64(double %361, double 0xBFC5555555555555, double %364)
  %366 = fsub double %339, %365
  %367 = fneg double %366
  %368 = and i32 %340, 1
  %369 = icmp eq i32 %368, 0
  %370 = select i1 %369, double %355, double %367
  %371 = bitcast double %370 to <2 x i32>
  %372 = shl i32 %340, 30
  %373 = and i32 %372, -2147483648
  %374 = extractelement <2 x i32> %371, i64 1
  %375 = xor i32 %374, %373
  %376 = insertelement <2 x i32> %371, i32 %375, i64 1
  %377 = tail call i1 @llvm.amdgcn.class.f64(double %240, i32 504)
  %378 = select i1 %377, <2 x i32> %376, <2 x i32> <i32 0, i32 2146959360>
  %379 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %14, i64 %75, i32 0, i32 0, i32 0, i64 0
  %380 = bitcast double addrspace(1)* %379 to <2 x i32> addrspace(1)*
  store <2 x i32> %378, <2 x i32> addrspace(1)* %380, align 16, !tbaa !21
  %381 = load double, double addrspace(1)* %76, align 8, !tbaa !17
  %382 = fneg contract double %381
  %383 = fmul contract double %238, %382
  %384 = tail call double @llvm.fabs.f64(double %383)
  %385 = fcmp olt double %384, 0x41D0000000000000
  br i1 %385, label %386, label %405

386:                                              ; preds = %337
  %387 = fmul double %384, 0x3FE45F306DC9C883
  %388 = tail call double @llvm.rint.f64(double %387)
  %389 = tail call double @llvm.fma.f64(double %388, double 0xBFF921FB54442D18, double %384)
  %390 = tail call double @llvm.fma.f64(double %388, double 0xBC91A62633145C00, double %389)
  %391 = fmul double %388, 0x3C91A62633145C00
  %392 = fneg double %391
  %393 = tail call double @llvm.fma.f64(double %388, double 0x3C91A62633145C00, double %392)
  %394 = fsub double %389, %391
  %395 = fsub double %389, %394
  %396 = fsub double %395, %391
  %397 = fsub double %394, %390
  %398 = fadd double %397, %396
  %399 = fsub double %398, %393
  %400 = tail call double @llvm.fma.f64(double %388, double 0xB97B839A252049C0, double %399)
  %401 = fadd double %390, %400
  %402 = fsub double %401, %390
  %403 = fsub double %400, %402
  %404 = fptosi double %388 to i32
  br label %481

405:                                              ; preds = %337
  %406 = tail call double @llvm.amdgcn.trig.preop.f64(double %384, i32 0)
  %407 = tail call double @llvm.amdgcn.trig.preop.f64(double %384, i32 1)
  %408 = tail call double @llvm.amdgcn.trig.preop.f64(double %384, i32 2)
  %409 = fcmp oge double %384, 0x7B00000000000000
  %410 = tail call double @llvm.amdgcn.ldexp.f64(double %384, i32 -128)
  %411 = select i1 %409, double %410, double %384
  %412 = fmul double %408, %411
  %413 = fneg double %412
  %414 = tail call double @llvm.fma.f64(double %408, double %411, double %413)
  %415 = fmul double %407, %411
  %416 = fneg double %415
  %417 = tail call double @llvm.fma.f64(double %407, double %411, double %416)
  %418 = fmul double %406, %411
  %419 = fneg double %418
  %420 = tail call double @llvm.fma.f64(double %406, double %411, double %419)
  %421 = fadd double %415, %420
  %422 = fsub double %421, %415
  %423 = fsub double %421, %422
  %424 = fsub double %420, %422
  %425 = fsub double %415, %423
  %426 = fadd double %424, %425
  %427 = fadd double %412, %417
  %428 = fsub double %427, %412
  %429 = fsub double %427, %428
  %430 = fsub double %417, %428
  %431 = fsub double %412, %429
  %432 = fadd double %430, %431
  %433 = fadd double %427, %426
  %434 = fsub double %433, %427
  %435 = fsub double %433, %434
  %436 = fsub double %426, %434
  %437 = fsub double %427, %435
  %438 = fadd double %436, %437
  %439 = fadd double %432, %438
  %440 = fadd double %414, %439
  %441 = fadd double %418, %421
  %442 = fsub double %441, %418
  %443 = fsub double %421, %442
  %444 = fadd double %443, %433
  %445 = fsub double %444, %443
  %446 = fsub double %433, %445
  %447 = fadd double %446, %440
  %448 = tail call double @llvm.amdgcn.ldexp.f64(double %441, i32 -2)
  %449 = tail call double @llvm.amdgcn.fract.f64(double %448)
  %450 = tail call i1 @llvm.amdgcn.class.f64(double %448, i32 516)
  %451 = select i1 %450, double 0.000000e+00, double %449
  %452 = tail call double @llvm.amdgcn.ldexp.f64(double %451, i32 2)
  %453 = fadd double %452, %444
  %454 = fcmp olt double %453, 0.000000e+00
  %455 = select i1 %454, double 4.000000e+00, double 0.000000e+00
  %456 = fadd double %452, %455
  %457 = fadd double %444, %456
  %458 = fptosi double %457 to i32
  %459 = sitofp i32 %458 to double
  %460 = fsub double %456, %459
  %461 = fadd double %444, %460
  %462 = fsub double %461, %460
  %463 = fsub double %444, %462
  %464 = fadd double %447, %463
  %465 = fcmp oge double %461, 5.000000e-01
  %466 = zext i1 %465 to i32
  %467 = add nsw i32 %466, %458
  %468 = select i1 %465, double 1.000000e+00, double 0.000000e+00
  %469 = fsub double %461, %468
  %470 = fadd double %469, %464
  %471 = fsub double %470, %469
  %472 = fsub double %464, %471
  %473 = fmul double %470, 0x3FF921FB54442D18
  %474 = fneg double %473
  %475 = tail call double @llvm.fma.f64(double %470, double 0x3FF921FB54442D18, double %474)
  %476 = tail call double @llvm.fma.f64(double %470, double 0x3C91A62633145C07, double %475)
  %477 = tail call double @llvm.fma.f64(double %472, double 0x3FF921FB54442D18, double %476)
  %478 = fadd double %473, %477
  %479 = fsub double %478, %473
  %480 = fsub double %477, %479
  br label %481

481:                                              ; preds = %386, %405
  %482 = phi double [ %403, %386 ], [ %480, %405 ]
  %483 = phi double [ %401, %386 ], [ %478, %405 ]
  %484 = phi i32 [ %404, %386 ], [ %467, %405 ]
  %485 = fmul double %483, %483
  %486 = fmul double %485, 5.000000e-01
  %487 = fsub double 1.000000e+00, %486
  %488 = fsub double 1.000000e+00, %487
  %489 = fsub double %488, %486
  %490 = fmul double %485, %485
  %491 = tail call double @llvm.fma.f64(double %485, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %492 = tail call double @llvm.fma.f64(double %485, double %491, double 0xBE927E4FA17F65F6)
  %493 = tail call double @llvm.fma.f64(double %485, double %492, double 0x3EFA01A019F4EC90)
  %494 = tail call double @llvm.fma.f64(double %485, double %493, double 0xBF56C16C16C16967)
  %495 = tail call double @llvm.fma.f64(double %485, double %494, double 0x3FA5555555555555)
  %496 = fneg double %482
  %497 = tail call double @llvm.fma.f64(double %483, double %496, double %489)
  %498 = tail call double @llvm.fma.f64(double %490, double %495, double %497)
  %499 = fadd double %487, %498
  %500 = tail call double @llvm.fma.f64(double %485, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %501 = tail call double @llvm.fma.f64(double %485, double %500, double 0x3EC71DE3796CDE01)
  %502 = tail call double @llvm.fma.f64(double %485, double %501, double 0xBF2A01A019E83E5C)
  %503 = tail call double @llvm.fma.f64(double %485, double %502, double 0x3F81111111110BB3)
  %504 = fneg double %485
  %505 = fmul double %483, %504
  %506 = fmul double %482, 5.000000e-01
  %507 = tail call double @llvm.fma.f64(double %505, double %503, double %506)
  %508 = tail call double @llvm.fma.f64(double %485, double %507, double %496)
  %509 = tail call double @llvm.fma.f64(double %505, double 0xBFC5555555555555, double %508)
  %510 = fsub double %483, %509
  %511 = and i32 %484, 1
  %512 = icmp eq i32 %511, 0
  %513 = select i1 %512, double %510, double %499
  %514 = bitcast double %513 to <2 x i32>
  %515 = shl i32 %484, 30
  %516 = bitcast double %383 to <2 x i32>
  %517 = extractelement <2 x i32> %516, i64 1
  %518 = xor i32 %515, %517
  %519 = and i32 %518, -2147483648
  %520 = extractelement <2 x i32> %514, i64 1
  %521 = xor i32 %520, %519
  %522 = insertelement <2 x i32> %514, i32 %521, i64 1
  %523 = tail call i1 @llvm.amdgcn.class.f64(double %384, i32 504)
  %524 = select i1 %523, <2 x i32> %522, <2 x i32> <i32 0, i32 2146959360>
  %525 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %14, i64 %75, i32 0, i32 0, i32 0, i64 1
  %526 = bitcast double addrspace(1)* %525 to <2 x i32> addrspace(1)*
  store <2 x i32> %524, <2 x i32> addrspace(1)* %526, align 8, !tbaa !21
  %527 = load double, double addrspace(1)* %104, align 8, !tbaa !17
  %528 = fneg contract double %527
  %529 = fdiv contract double %3, 0x38E185A6A75D2CEB
  %530 = fmul contract double %529, %528
  %531 = tail call double @llvm.fabs.f64(double %530)
  %532 = fcmp olt double %531, 0x41D0000000000000
  br i1 %532, label %533, label %552

533:                                              ; preds = %481
  %534 = fmul double %531, 0x3FE45F306DC9C883
  %535 = tail call double @llvm.rint.f64(double %534)
  %536 = tail call double @llvm.fma.f64(double %535, double 0xBFF921FB54442D18, double %531)
  %537 = tail call double @llvm.fma.f64(double %535, double 0xBC91A62633145C00, double %536)
  %538 = fmul double %535, 0x3C91A62633145C00
  %539 = fneg double %538
  %540 = tail call double @llvm.fma.f64(double %535, double 0x3C91A62633145C00, double %539)
  %541 = fsub double %536, %538
  %542 = fsub double %536, %541
  %543 = fsub double %542, %538
  %544 = fsub double %541, %537
  %545 = fadd double %544, %543
  %546 = fsub double %545, %540
  %547 = tail call double @llvm.fma.f64(double %535, double 0xB97B839A252049C0, double %546)
  %548 = fadd double %537, %547
  %549 = fsub double %548, %537
  %550 = fsub double %547, %549
  %551 = fptosi double %535 to i32
  br label %628

552:                                              ; preds = %481
  %553 = tail call double @llvm.amdgcn.trig.preop.f64(double %531, i32 0)
  %554 = tail call double @llvm.amdgcn.trig.preop.f64(double %531, i32 1)
  %555 = tail call double @llvm.amdgcn.trig.preop.f64(double %531, i32 2)
  %556 = fcmp oge double %531, 0x7B00000000000000
  %557 = tail call double @llvm.amdgcn.ldexp.f64(double %531, i32 -128)
  %558 = select i1 %556, double %557, double %531
  %559 = fmul double %555, %558
  %560 = fneg double %559
  %561 = tail call double @llvm.fma.f64(double %555, double %558, double %560)
  %562 = fmul double %554, %558
  %563 = fneg double %562
  %564 = tail call double @llvm.fma.f64(double %554, double %558, double %563)
  %565 = fmul double %553, %558
  %566 = fneg double %565
  %567 = tail call double @llvm.fma.f64(double %553, double %558, double %566)
  %568 = fadd double %562, %567
  %569 = fsub double %568, %562
  %570 = fsub double %568, %569
  %571 = fsub double %567, %569
  %572 = fsub double %562, %570
  %573 = fadd double %571, %572
  %574 = fadd double %559, %564
  %575 = fsub double %574, %559
  %576 = fsub double %574, %575
  %577 = fsub double %564, %575
  %578 = fsub double %559, %576
  %579 = fadd double %577, %578
  %580 = fadd double %574, %573
  %581 = fsub double %580, %574
  %582 = fsub double %580, %581
  %583 = fsub double %573, %581
  %584 = fsub double %574, %582
  %585 = fadd double %583, %584
  %586 = fadd double %579, %585
  %587 = fadd double %561, %586
  %588 = fadd double %565, %568
  %589 = fsub double %588, %565
  %590 = fsub double %568, %589
  %591 = fadd double %590, %580
  %592 = fsub double %591, %590
  %593 = fsub double %580, %592
  %594 = fadd double %593, %587
  %595 = tail call double @llvm.amdgcn.ldexp.f64(double %588, i32 -2)
  %596 = tail call double @llvm.amdgcn.fract.f64(double %595)
  %597 = tail call i1 @llvm.amdgcn.class.f64(double %595, i32 516)
  %598 = select i1 %597, double 0.000000e+00, double %596
  %599 = tail call double @llvm.amdgcn.ldexp.f64(double %598, i32 2)
  %600 = fadd double %599, %591
  %601 = fcmp olt double %600, 0.000000e+00
  %602 = select i1 %601, double 4.000000e+00, double 0.000000e+00
  %603 = fadd double %599, %602
  %604 = fadd double %591, %603
  %605 = fptosi double %604 to i32
  %606 = sitofp i32 %605 to double
  %607 = fsub double %603, %606
  %608 = fadd double %591, %607
  %609 = fsub double %608, %607
  %610 = fsub double %591, %609
  %611 = fadd double %594, %610
  %612 = fcmp oge double %608, 5.000000e-01
  %613 = zext i1 %612 to i32
  %614 = add nsw i32 %613, %605
  %615 = select i1 %612, double 1.000000e+00, double 0.000000e+00
  %616 = fsub double %608, %615
  %617 = fadd double %616, %611
  %618 = fsub double %617, %616
  %619 = fsub double %611, %618
  %620 = fmul double %617, 0x3FF921FB54442D18
  %621 = fneg double %620
  %622 = tail call double @llvm.fma.f64(double %617, double 0x3FF921FB54442D18, double %621)
  %623 = tail call double @llvm.fma.f64(double %617, double 0x3C91A62633145C07, double %622)
  %624 = tail call double @llvm.fma.f64(double %619, double 0x3FF921FB54442D18, double %623)
  %625 = fadd double %620, %624
  %626 = fsub double %625, %620
  %627 = fsub double %624, %626
  br label %628

628:                                              ; preds = %533, %552
  %629 = phi double [ %550, %533 ], [ %627, %552 ]
  %630 = phi double [ %548, %533 ], [ %625, %552 ]
  %631 = phi i32 [ %551, %533 ], [ %614, %552 ]
  %632 = fmul double %630, %630
  %633 = fmul double %632, 5.000000e-01
  %634 = fsub double 1.000000e+00, %633
  %635 = fsub double 1.000000e+00, %634
  %636 = fsub double %635, %633
  %637 = fmul double %632, %632
  %638 = tail call double @llvm.fma.f64(double %632, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %639 = tail call double @llvm.fma.f64(double %632, double %638, double 0xBE927E4FA17F65F6)
  %640 = tail call double @llvm.fma.f64(double %632, double %639, double 0x3EFA01A019F4EC90)
  %641 = tail call double @llvm.fma.f64(double %632, double %640, double 0xBF56C16C16C16967)
  %642 = tail call double @llvm.fma.f64(double %632, double %641, double 0x3FA5555555555555)
  %643 = fneg double %629
  %644 = tail call double @llvm.fma.f64(double %630, double %643, double %636)
  %645 = tail call double @llvm.fma.f64(double %637, double %642, double %644)
  %646 = fadd double %634, %645
  %647 = tail call double @llvm.fma.f64(double %632, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %648 = tail call double @llvm.fma.f64(double %632, double %647, double 0x3EC71DE3796CDE01)
  %649 = tail call double @llvm.fma.f64(double %632, double %648, double 0xBF2A01A019E83E5C)
  %650 = tail call double @llvm.fma.f64(double %632, double %649, double 0x3F81111111110BB3)
  %651 = fneg double %632
  %652 = fmul double %630, %651
  %653 = fmul double %629, 5.000000e-01
  %654 = tail call double @llvm.fma.f64(double %652, double %650, double %653)
  %655 = tail call double @llvm.fma.f64(double %632, double %654, double %643)
  %656 = tail call double @llvm.fma.f64(double %652, double 0xBFC5555555555555, double %655)
  %657 = fsub double %630, %656
  %658 = fneg double %657
  %659 = and i32 %631, 1
  %660 = icmp eq i32 %659, 0
  %661 = select i1 %660, double %646, double %658
  %662 = bitcast double %661 to <2 x i32>
  %663 = shl i32 %631, 30
  %664 = and i32 %663, -2147483648
  %665 = extractelement <2 x i32> %662, i64 1
  %666 = xor i32 %665, %664
  %667 = insertelement <2 x i32> %662, i32 %666, i64 1
  %668 = tail call i1 @llvm.amdgcn.class.f64(double %531, i32 504)
  %669 = select i1 %668, <2 x i32> %667, <2 x i32> <i32 0, i32 2146959360>
  %670 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %16, i64 %75, i32 0, i32 0, i32 0, i64 0
  %671 = bitcast double addrspace(1)* %670 to <2 x i32> addrspace(1)*
  store <2 x i32> %669, <2 x i32> addrspace(1)* %671, align 16, !tbaa !21
  %672 = load double, double addrspace(1)* %104, align 8, !tbaa !17
  %673 = fneg contract double %672
  %674 = fmul contract double %529, %673
  %675 = tail call double @llvm.fabs.f64(double %674)
  %676 = fcmp olt double %675, 0x41D0000000000000
  br i1 %676, label %677, label %696

677:                                              ; preds = %628
  %678 = fmul double %675, 0x3FE45F306DC9C883
  %679 = tail call double @llvm.rint.f64(double %678)
  %680 = tail call double @llvm.fma.f64(double %679, double 0xBFF921FB54442D18, double %675)
  %681 = tail call double @llvm.fma.f64(double %679, double 0xBC91A62633145C00, double %680)
  %682 = fmul double %679, 0x3C91A62633145C00
  %683 = fneg double %682
  %684 = tail call double @llvm.fma.f64(double %679, double 0x3C91A62633145C00, double %683)
  %685 = fsub double %680, %682
  %686 = fsub double %680, %685
  %687 = fsub double %686, %682
  %688 = fsub double %685, %681
  %689 = fadd double %688, %687
  %690 = fsub double %689, %684
  %691 = tail call double @llvm.fma.f64(double %679, double 0xB97B839A252049C0, double %690)
  %692 = fadd double %681, %691
  %693 = fsub double %692, %681
  %694 = fsub double %691, %693
  %695 = fptosi double %679 to i32
  br label %772

696:                                              ; preds = %628
  %697 = tail call double @llvm.amdgcn.trig.preop.f64(double %675, i32 0)
  %698 = tail call double @llvm.amdgcn.trig.preop.f64(double %675, i32 1)
  %699 = tail call double @llvm.amdgcn.trig.preop.f64(double %675, i32 2)
  %700 = fcmp oge double %675, 0x7B00000000000000
  %701 = tail call double @llvm.amdgcn.ldexp.f64(double %675, i32 -128)
  %702 = select i1 %700, double %701, double %675
  %703 = fmul double %699, %702
  %704 = fneg double %703
  %705 = tail call double @llvm.fma.f64(double %699, double %702, double %704)
  %706 = fmul double %698, %702
  %707 = fneg double %706
  %708 = tail call double @llvm.fma.f64(double %698, double %702, double %707)
  %709 = fmul double %697, %702
  %710 = fneg double %709
  %711 = tail call double @llvm.fma.f64(double %697, double %702, double %710)
  %712 = fadd double %706, %711
  %713 = fsub double %712, %706
  %714 = fsub double %712, %713
  %715 = fsub double %711, %713
  %716 = fsub double %706, %714
  %717 = fadd double %715, %716
  %718 = fadd double %703, %708
  %719 = fsub double %718, %703
  %720 = fsub double %718, %719
  %721 = fsub double %708, %719
  %722 = fsub double %703, %720
  %723 = fadd double %721, %722
  %724 = fadd double %718, %717
  %725 = fsub double %724, %718
  %726 = fsub double %724, %725
  %727 = fsub double %717, %725
  %728 = fsub double %718, %726
  %729 = fadd double %727, %728
  %730 = fadd double %723, %729
  %731 = fadd double %705, %730
  %732 = fadd double %709, %712
  %733 = fsub double %732, %709
  %734 = fsub double %712, %733
  %735 = fadd double %734, %724
  %736 = fsub double %735, %734
  %737 = fsub double %724, %736
  %738 = fadd double %737, %731
  %739 = tail call double @llvm.amdgcn.ldexp.f64(double %732, i32 -2)
  %740 = tail call double @llvm.amdgcn.fract.f64(double %739)
  %741 = tail call i1 @llvm.amdgcn.class.f64(double %739, i32 516)
  %742 = select i1 %741, double 0.000000e+00, double %740
  %743 = tail call double @llvm.amdgcn.ldexp.f64(double %742, i32 2)
  %744 = fadd double %743, %735
  %745 = fcmp olt double %744, 0.000000e+00
  %746 = select i1 %745, double 4.000000e+00, double 0.000000e+00
  %747 = fadd double %743, %746
  %748 = fadd double %735, %747
  %749 = fptosi double %748 to i32
  %750 = sitofp i32 %749 to double
  %751 = fsub double %747, %750
  %752 = fadd double %735, %751
  %753 = fsub double %752, %751
  %754 = fsub double %735, %753
  %755 = fadd double %738, %754
  %756 = fcmp oge double %752, 5.000000e-01
  %757 = zext i1 %756 to i32
  %758 = add nsw i32 %757, %749
  %759 = select i1 %756, double 1.000000e+00, double 0.000000e+00
  %760 = fsub double %752, %759
  %761 = fadd double %760, %755
  %762 = fsub double %761, %760
  %763 = fsub double %755, %762
  %764 = fmul double %761, 0x3FF921FB54442D18
  %765 = fneg double %764
  %766 = tail call double @llvm.fma.f64(double %761, double 0x3FF921FB54442D18, double %765)
  %767 = tail call double @llvm.fma.f64(double %761, double 0x3C91A62633145C07, double %766)
  %768 = tail call double @llvm.fma.f64(double %763, double 0x3FF921FB54442D18, double %767)
  %769 = fadd double %764, %768
  %770 = fsub double %769, %764
  %771 = fsub double %768, %770
  br label %772

772:                                              ; preds = %677, %696
  %773 = phi double [ %694, %677 ], [ %771, %696 ]
  %774 = phi double [ %692, %677 ], [ %769, %696 ]
  %775 = phi i32 [ %695, %677 ], [ %758, %696 ]
  %776 = fmul double %774, %774
  %777 = fmul double %776, 5.000000e-01
  %778 = fsub double 1.000000e+00, %777
  %779 = fsub double 1.000000e+00, %778
  %780 = fsub double %779, %777
  %781 = fmul double %776, %776
  %782 = tail call double @llvm.fma.f64(double %776, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %783 = tail call double @llvm.fma.f64(double %776, double %782, double 0xBE927E4FA17F65F6)
  %784 = tail call double @llvm.fma.f64(double %776, double %783, double 0x3EFA01A019F4EC90)
  %785 = tail call double @llvm.fma.f64(double %776, double %784, double 0xBF56C16C16C16967)
  %786 = tail call double @llvm.fma.f64(double %776, double %785, double 0x3FA5555555555555)
  %787 = fneg double %773
  %788 = tail call double @llvm.fma.f64(double %774, double %787, double %780)
  %789 = tail call double @llvm.fma.f64(double %781, double %786, double %788)
  %790 = fadd double %778, %789
  %791 = tail call double @llvm.fma.f64(double %776, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %792 = tail call double @llvm.fma.f64(double %776, double %791, double 0x3EC71DE3796CDE01)
  %793 = tail call double @llvm.fma.f64(double %776, double %792, double 0xBF2A01A019E83E5C)
  %794 = tail call double @llvm.fma.f64(double %776, double %793, double 0x3F81111111110BB3)
  %795 = fneg double %776
  %796 = fmul double %774, %795
  %797 = fmul double %773, 5.000000e-01
  %798 = tail call double @llvm.fma.f64(double %796, double %794, double %797)
  %799 = tail call double @llvm.fma.f64(double %776, double %798, double %787)
  %800 = tail call double @llvm.fma.f64(double %796, double 0xBFC5555555555555, double %799)
  %801 = fsub double %774, %800
  %802 = and i32 %775, 1
  %803 = icmp eq i32 %802, 0
  %804 = select i1 %803, double %801, double %790
  %805 = bitcast double %804 to <2 x i32>
  %806 = shl i32 %775, 30
  %807 = bitcast double %674 to <2 x i32>
  %808 = extractelement <2 x i32> %807, i64 1
  %809 = xor i32 %806, %808
  %810 = and i32 %809, -2147483648
  %811 = extractelement <2 x i32> %805, i64 1
  %812 = xor i32 %811, %810
  %813 = insertelement <2 x i32> %805, i32 %812, i64 1
  %814 = tail call i1 @llvm.amdgcn.class.f64(double %675, i32 504)
  %815 = select i1 %814, <2 x i32> %813, <2 x i32> <i32 0, i32 2146959360>
  %816 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %16, i64 %75, i32 0, i32 0, i32 0, i64 1
  %817 = bitcast double addrspace(1)* %816 to <2 x i32> addrspace(1)*
  store <2 x i32> %815, <2 x i32> addrspace(1)* %817, align 8, !tbaa !21
  %818 = load double, double addrspace(1)* %154, align 8, !tbaa !17
  %819 = fneg contract double %818
  %820 = fmul contract double %819, %3
  %821 = tail call double @llvm.fabs.f64(double %820)
  %822 = fcmp olt double %821, 0x41D0000000000000
  br i1 %822, label %823, label %842

823:                                              ; preds = %772
  %824 = fmul double %821, 0x3FE45F306DC9C883
  %825 = tail call double @llvm.rint.f64(double %824)
  %826 = tail call double @llvm.fma.f64(double %825, double 0xBFF921FB54442D18, double %821)
  %827 = tail call double @llvm.fma.f64(double %825, double 0xBC91A62633145C00, double %826)
  %828 = fmul double %825, 0x3C91A62633145C00
  %829 = fneg double %828
  %830 = tail call double @llvm.fma.f64(double %825, double 0x3C91A62633145C00, double %829)
  %831 = fsub double %826, %828
  %832 = fsub double %826, %831
  %833 = fsub double %832, %828
  %834 = fsub double %831, %827
  %835 = fadd double %834, %833
  %836 = fsub double %835, %830
  %837 = tail call double @llvm.fma.f64(double %825, double 0xB97B839A252049C0, double %836)
  %838 = fadd double %827, %837
  %839 = fsub double %838, %827
  %840 = fsub double %837, %839
  %841 = fptosi double %825 to i32
  br label %918

842:                                              ; preds = %772
  %843 = tail call double @llvm.amdgcn.trig.preop.f64(double %821, i32 0)
  %844 = tail call double @llvm.amdgcn.trig.preop.f64(double %821, i32 1)
  %845 = tail call double @llvm.amdgcn.trig.preop.f64(double %821, i32 2)
  %846 = fcmp oge double %821, 0x7B00000000000000
  %847 = tail call double @llvm.amdgcn.ldexp.f64(double %821, i32 -128)
  %848 = select i1 %846, double %847, double %821
  %849 = fmul double %845, %848
  %850 = fneg double %849
  %851 = tail call double @llvm.fma.f64(double %845, double %848, double %850)
  %852 = fmul double %844, %848
  %853 = fneg double %852
  %854 = tail call double @llvm.fma.f64(double %844, double %848, double %853)
  %855 = fmul double %843, %848
  %856 = fneg double %855
  %857 = tail call double @llvm.fma.f64(double %843, double %848, double %856)
  %858 = fadd double %852, %857
  %859 = fsub double %858, %852
  %860 = fsub double %858, %859
  %861 = fsub double %857, %859
  %862 = fsub double %852, %860
  %863 = fadd double %861, %862
  %864 = fadd double %849, %854
  %865 = fsub double %864, %849
  %866 = fsub double %864, %865
  %867 = fsub double %854, %865
  %868 = fsub double %849, %866
  %869 = fadd double %867, %868
  %870 = fadd double %864, %863
  %871 = fsub double %870, %864
  %872 = fsub double %870, %871
  %873 = fsub double %863, %871
  %874 = fsub double %864, %872
  %875 = fadd double %873, %874
  %876 = fadd double %869, %875
  %877 = fadd double %851, %876
  %878 = fadd double %855, %858
  %879 = fsub double %878, %855
  %880 = fsub double %858, %879
  %881 = fadd double %880, %870
  %882 = fsub double %881, %880
  %883 = fsub double %870, %882
  %884 = fadd double %883, %877
  %885 = tail call double @llvm.amdgcn.ldexp.f64(double %878, i32 -2)
  %886 = tail call double @llvm.amdgcn.fract.f64(double %885)
  %887 = tail call i1 @llvm.amdgcn.class.f64(double %885, i32 516)
  %888 = select i1 %887, double 0.000000e+00, double %886
  %889 = tail call double @llvm.amdgcn.ldexp.f64(double %888, i32 2)
  %890 = fadd double %889, %881
  %891 = fcmp olt double %890, 0.000000e+00
  %892 = select i1 %891, double 4.000000e+00, double 0.000000e+00
  %893 = fadd double %889, %892
  %894 = fadd double %881, %893
  %895 = fptosi double %894 to i32
  %896 = sitofp i32 %895 to double
  %897 = fsub double %893, %896
  %898 = fadd double %881, %897
  %899 = fsub double %898, %897
  %900 = fsub double %881, %899
  %901 = fadd double %884, %900
  %902 = fcmp oge double %898, 5.000000e-01
  %903 = zext i1 %902 to i32
  %904 = add nsw i32 %903, %895
  %905 = select i1 %902, double 1.000000e+00, double 0.000000e+00
  %906 = fsub double %898, %905
  %907 = fadd double %906, %901
  %908 = fsub double %907, %906
  %909 = fsub double %901, %908
  %910 = fmul double %907, 0x3FF921FB54442D18
  %911 = fneg double %910
  %912 = tail call double @llvm.fma.f64(double %907, double 0x3FF921FB54442D18, double %911)
  %913 = tail call double @llvm.fma.f64(double %907, double 0x3C91A62633145C07, double %912)
  %914 = tail call double @llvm.fma.f64(double %909, double 0x3FF921FB54442D18, double %913)
  %915 = fadd double %910, %914
  %916 = fsub double %915, %910
  %917 = fsub double %914, %916
  br label %918

918:                                              ; preds = %823, %842
  %919 = phi double [ %840, %823 ], [ %917, %842 ]
  %920 = phi double [ %838, %823 ], [ %915, %842 ]
  %921 = phi i32 [ %841, %823 ], [ %904, %842 ]
  %922 = fmul double %920, %920
  %923 = fmul double %922, 5.000000e-01
  %924 = fsub double 1.000000e+00, %923
  %925 = fsub double 1.000000e+00, %924
  %926 = fsub double %925, %923
  %927 = fmul double %922, %922
  %928 = tail call double @llvm.fma.f64(double %922, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %929 = tail call double @llvm.fma.f64(double %922, double %928, double 0xBE927E4FA17F65F6)
  %930 = tail call double @llvm.fma.f64(double %922, double %929, double 0x3EFA01A019F4EC90)
  %931 = tail call double @llvm.fma.f64(double %922, double %930, double 0xBF56C16C16C16967)
  %932 = tail call double @llvm.fma.f64(double %922, double %931, double 0x3FA5555555555555)
  %933 = fneg double %919
  %934 = tail call double @llvm.fma.f64(double %920, double %933, double %926)
  %935 = tail call double @llvm.fma.f64(double %927, double %932, double %934)
  %936 = fadd double %924, %935
  %937 = tail call double @llvm.fma.f64(double %922, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %938 = tail call double @llvm.fma.f64(double %922, double %937, double 0x3EC71DE3796CDE01)
  %939 = tail call double @llvm.fma.f64(double %922, double %938, double 0xBF2A01A019E83E5C)
  %940 = tail call double @llvm.fma.f64(double %922, double %939, double 0x3F81111111110BB3)
  %941 = fneg double %922
  %942 = fmul double %920, %941
  %943 = fmul double %919, 5.000000e-01
  %944 = tail call double @llvm.fma.f64(double %942, double %940, double %943)
  %945 = tail call double @llvm.fma.f64(double %922, double %944, double %933)
  %946 = tail call double @llvm.fma.f64(double %942, double 0xBFC5555555555555, double %945)
  %947 = fsub double %920, %946
  %948 = fneg double %947
  %949 = and i32 %921, 1
  %950 = icmp eq i32 %949, 0
  %951 = select i1 %950, double %936, double %948
  %952 = bitcast double %951 to <2 x i32>
  %953 = shl i32 %921, 30
  %954 = and i32 %953, -2147483648
  %955 = extractelement <2 x i32> %952, i64 1
  %956 = xor i32 %955, %954
  %957 = insertelement <2 x i32> %952, i32 %956, i64 1
  %958 = tail call i1 @llvm.amdgcn.class.f64(double %821, i32 504)
  %959 = select i1 %958, <2 x i32> %957, <2 x i32> <i32 0, i32 2146959360>
  %960 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %22, i64 %75, i32 0, i32 0, i32 0, i64 0
  %961 = bitcast double addrspace(1)* %960 to <2 x i32> addrspace(1)*
  store <2 x i32> %959, <2 x i32> addrspace(1)* %961, align 16, !tbaa !21
  %962 = load double, double addrspace(1)* %154, align 8, !tbaa !17
  %963 = fneg contract double %962
  %964 = fmul contract double %963, %3
  %965 = tail call double @llvm.fabs.f64(double %964)
  %966 = fcmp olt double %965, 0x41D0000000000000
  br i1 %966, label %967, label %986

967:                                              ; preds = %918
  %968 = fmul double %965, 0x3FE45F306DC9C883
  %969 = tail call double @llvm.rint.f64(double %968)
  %970 = tail call double @llvm.fma.f64(double %969, double 0xBFF921FB54442D18, double %965)
  %971 = tail call double @llvm.fma.f64(double %969, double 0xBC91A62633145C00, double %970)
  %972 = fmul double %969, 0x3C91A62633145C00
  %973 = fneg double %972
  %974 = tail call double @llvm.fma.f64(double %969, double 0x3C91A62633145C00, double %973)
  %975 = fsub double %970, %972
  %976 = fsub double %970, %975
  %977 = fsub double %976, %972
  %978 = fsub double %975, %971
  %979 = fadd double %978, %977
  %980 = fsub double %979, %974
  %981 = tail call double @llvm.fma.f64(double %969, double 0xB97B839A252049C0, double %980)
  %982 = fadd double %971, %981
  %983 = fsub double %982, %971
  %984 = fsub double %981, %983
  %985 = fptosi double %969 to i32
  br label %1062

986:                                              ; preds = %918
  %987 = tail call double @llvm.amdgcn.trig.preop.f64(double %965, i32 0)
  %988 = tail call double @llvm.amdgcn.trig.preop.f64(double %965, i32 1)
  %989 = tail call double @llvm.amdgcn.trig.preop.f64(double %965, i32 2)
  %990 = fcmp oge double %965, 0x7B00000000000000
  %991 = tail call double @llvm.amdgcn.ldexp.f64(double %965, i32 -128)
  %992 = select i1 %990, double %991, double %965
  %993 = fmul double %989, %992
  %994 = fneg double %993
  %995 = tail call double @llvm.fma.f64(double %989, double %992, double %994)
  %996 = fmul double %988, %992
  %997 = fneg double %996
  %998 = tail call double @llvm.fma.f64(double %988, double %992, double %997)
  %999 = fmul double %987, %992
  %1000 = fneg double %999
  %1001 = tail call double @llvm.fma.f64(double %987, double %992, double %1000)
  %1002 = fadd double %996, %1001
  %1003 = fsub double %1002, %996
  %1004 = fsub double %1002, %1003
  %1005 = fsub double %1001, %1003
  %1006 = fsub double %996, %1004
  %1007 = fadd double %1005, %1006
  %1008 = fadd double %993, %998
  %1009 = fsub double %1008, %993
  %1010 = fsub double %1008, %1009
  %1011 = fsub double %998, %1009
  %1012 = fsub double %993, %1010
  %1013 = fadd double %1011, %1012
  %1014 = fadd double %1008, %1007
  %1015 = fsub double %1014, %1008
  %1016 = fsub double %1014, %1015
  %1017 = fsub double %1007, %1015
  %1018 = fsub double %1008, %1016
  %1019 = fadd double %1017, %1018
  %1020 = fadd double %1013, %1019
  %1021 = fadd double %995, %1020
  %1022 = fadd double %999, %1002
  %1023 = fsub double %1022, %999
  %1024 = fsub double %1002, %1023
  %1025 = fadd double %1024, %1014
  %1026 = fsub double %1025, %1024
  %1027 = fsub double %1014, %1026
  %1028 = fadd double %1027, %1021
  %1029 = tail call double @llvm.amdgcn.ldexp.f64(double %1022, i32 -2)
  %1030 = tail call double @llvm.amdgcn.fract.f64(double %1029)
  %1031 = tail call i1 @llvm.amdgcn.class.f64(double %1029, i32 516)
  %1032 = select i1 %1031, double 0.000000e+00, double %1030
  %1033 = tail call double @llvm.amdgcn.ldexp.f64(double %1032, i32 2)
  %1034 = fadd double %1033, %1025
  %1035 = fcmp olt double %1034, 0.000000e+00
  %1036 = select i1 %1035, double 4.000000e+00, double 0.000000e+00
  %1037 = fadd double %1033, %1036
  %1038 = fadd double %1025, %1037
  %1039 = fptosi double %1038 to i32
  %1040 = sitofp i32 %1039 to double
  %1041 = fsub double %1037, %1040
  %1042 = fadd double %1025, %1041
  %1043 = fsub double %1042, %1041
  %1044 = fsub double %1025, %1043
  %1045 = fadd double %1028, %1044
  %1046 = fcmp oge double %1042, 5.000000e-01
  %1047 = zext i1 %1046 to i32
  %1048 = add nsw i32 %1047, %1039
  %1049 = select i1 %1046, double 1.000000e+00, double 0.000000e+00
  %1050 = fsub double %1042, %1049
  %1051 = fadd double %1050, %1045
  %1052 = fsub double %1051, %1050
  %1053 = fsub double %1045, %1052
  %1054 = fmul double %1051, 0x3FF921FB54442D18
  %1055 = fneg double %1054
  %1056 = tail call double @llvm.fma.f64(double %1051, double 0x3FF921FB54442D18, double %1055)
  %1057 = tail call double @llvm.fma.f64(double %1051, double 0x3C91A62633145C07, double %1056)
  %1058 = tail call double @llvm.fma.f64(double %1053, double 0x3FF921FB54442D18, double %1057)
  %1059 = fadd double %1054, %1058
  %1060 = fsub double %1059, %1054
  %1061 = fsub double %1058, %1060
  br label %1062

1062:                                             ; preds = %967, %986
  %1063 = phi double [ %984, %967 ], [ %1061, %986 ]
  %1064 = phi double [ %982, %967 ], [ %1059, %986 ]
  %1065 = phi i32 [ %985, %967 ], [ %1048, %986 ]
  %1066 = fmul double %1064, %1064
  %1067 = fmul double %1066, 5.000000e-01
  %1068 = fsub double 1.000000e+00, %1067
  %1069 = fsub double 1.000000e+00, %1068
  %1070 = fsub double %1069, %1067
  %1071 = fmul double %1066, %1066
  %1072 = tail call double @llvm.fma.f64(double %1066, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1073 = tail call double @llvm.fma.f64(double %1066, double %1072, double 0xBE927E4FA17F65F6)
  %1074 = tail call double @llvm.fma.f64(double %1066, double %1073, double 0x3EFA01A019F4EC90)
  %1075 = tail call double @llvm.fma.f64(double %1066, double %1074, double 0xBF56C16C16C16967)
  %1076 = tail call double @llvm.fma.f64(double %1066, double %1075, double 0x3FA5555555555555)
  %1077 = fneg double %1063
  %1078 = tail call double @llvm.fma.f64(double %1064, double %1077, double %1070)
  %1079 = tail call double @llvm.fma.f64(double %1071, double %1076, double %1078)
  %1080 = fadd double %1068, %1079
  %1081 = tail call double @llvm.fma.f64(double %1066, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1082 = tail call double @llvm.fma.f64(double %1066, double %1081, double 0x3EC71DE3796CDE01)
  %1083 = tail call double @llvm.fma.f64(double %1066, double %1082, double 0xBF2A01A019E83E5C)
  %1084 = tail call double @llvm.fma.f64(double %1066, double %1083, double 0x3F81111111110BB3)
  %1085 = fneg double %1066
  %1086 = fmul double %1064, %1085
  %1087 = fmul double %1063, 5.000000e-01
  %1088 = tail call double @llvm.fma.f64(double %1086, double %1084, double %1087)
  %1089 = tail call double @llvm.fma.f64(double %1066, double %1088, double %1077)
  %1090 = tail call double @llvm.fma.f64(double %1086, double 0xBFC5555555555555, double %1089)
  %1091 = fsub double %1064, %1090
  %1092 = and i32 %1065, 1
  %1093 = icmp eq i32 %1092, 0
  %1094 = select i1 %1093, double %1091, double %1080
  %1095 = bitcast double %1094 to <2 x i32>
  %1096 = shl i32 %1065, 30
  %1097 = bitcast double %964 to <2 x i32>
  %1098 = extractelement <2 x i32> %1097, i64 1
  %1099 = xor i32 %1096, %1098
  %1100 = and i32 %1099, -2147483648
  %1101 = extractelement <2 x i32> %1095, i64 1
  %1102 = xor i32 %1101, %1100
  %1103 = insertelement <2 x i32> %1095, i32 %1102, i64 1
  %1104 = tail call i1 @llvm.amdgcn.class.f64(double %965, i32 504)
  %1105 = select i1 %1104, <2 x i32> %1103, <2 x i32> <i32 0, i32 2146959360>
  %1106 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %22, i64 %75, i32 0, i32 0, i32 0, i64 1
  %1107 = bitcast double addrspace(1)* %1106 to <2 x i32> addrspace(1)*
  store <2 x i32> %1105, <2 x i32> addrspace(1)* %1107, align 8, !tbaa !21
  %1108 = load double, double addrspace(1)* %147, align 8, !tbaa !17
  %1109 = fneg contract double %1108
  %1110 = fmul contract double %1109, %3
  %1111 = tail call double @llvm.fabs.f64(double %1110)
  %1112 = fcmp olt double %1111, 0x41D0000000000000
  br i1 %1112, label %1113, label %1132

1113:                                             ; preds = %1062
  %1114 = fmul double %1111, 0x3FE45F306DC9C883
  %1115 = tail call double @llvm.rint.f64(double %1114)
  %1116 = tail call double @llvm.fma.f64(double %1115, double 0xBFF921FB54442D18, double %1111)
  %1117 = tail call double @llvm.fma.f64(double %1115, double 0xBC91A62633145C00, double %1116)
  %1118 = fmul double %1115, 0x3C91A62633145C00
  %1119 = fneg double %1118
  %1120 = tail call double @llvm.fma.f64(double %1115, double 0x3C91A62633145C00, double %1119)
  %1121 = fsub double %1116, %1118
  %1122 = fsub double %1116, %1121
  %1123 = fsub double %1122, %1118
  %1124 = fsub double %1121, %1117
  %1125 = fadd double %1124, %1123
  %1126 = fsub double %1125, %1120
  %1127 = tail call double @llvm.fma.f64(double %1115, double 0xB97B839A252049C0, double %1126)
  %1128 = fadd double %1117, %1127
  %1129 = fsub double %1128, %1117
  %1130 = fsub double %1127, %1129
  %1131 = fptosi double %1115 to i32
  br label %1208

1132:                                             ; preds = %1062
  %1133 = tail call double @llvm.amdgcn.trig.preop.f64(double %1111, i32 0)
  %1134 = tail call double @llvm.amdgcn.trig.preop.f64(double %1111, i32 1)
  %1135 = tail call double @llvm.amdgcn.trig.preop.f64(double %1111, i32 2)
  %1136 = fcmp oge double %1111, 0x7B00000000000000
  %1137 = tail call double @llvm.amdgcn.ldexp.f64(double %1111, i32 -128)
  %1138 = select i1 %1136, double %1137, double %1111
  %1139 = fmul double %1135, %1138
  %1140 = fneg double %1139
  %1141 = tail call double @llvm.fma.f64(double %1135, double %1138, double %1140)
  %1142 = fmul double %1134, %1138
  %1143 = fneg double %1142
  %1144 = tail call double @llvm.fma.f64(double %1134, double %1138, double %1143)
  %1145 = fmul double %1133, %1138
  %1146 = fneg double %1145
  %1147 = tail call double @llvm.fma.f64(double %1133, double %1138, double %1146)
  %1148 = fadd double %1142, %1147
  %1149 = fsub double %1148, %1142
  %1150 = fsub double %1148, %1149
  %1151 = fsub double %1147, %1149
  %1152 = fsub double %1142, %1150
  %1153 = fadd double %1151, %1152
  %1154 = fadd double %1139, %1144
  %1155 = fsub double %1154, %1139
  %1156 = fsub double %1154, %1155
  %1157 = fsub double %1144, %1155
  %1158 = fsub double %1139, %1156
  %1159 = fadd double %1157, %1158
  %1160 = fadd double %1154, %1153
  %1161 = fsub double %1160, %1154
  %1162 = fsub double %1160, %1161
  %1163 = fsub double %1153, %1161
  %1164 = fsub double %1154, %1162
  %1165 = fadd double %1163, %1164
  %1166 = fadd double %1159, %1165
  %1167 = fadd double %1141, %1166
  %1168 = fadd double %1145, %1148
  %1169 = fsub double %1168, %1145
  %1170 = fsub double %1148, %1169
  %1171 = fadd double %1170, %1160
  %1172 = fsub double %1171, %1170
  %1173 = fsub double %1160, %1172
  %1174 = fadd double %1173, %1167
  %1175 = tail call double @llvm.amdgcn.ldexp.f64(double %1168, i32 -2)
  %1176 = tail call double @llvm.amdgcn.fract.f64(double %1175)
  %1177 = tail call i1 @llvm.amdgcn.class.f64(double %1175, i32 516)
  %1178 = select i1 %1177, double 0.000000e+00, double %1176
  %1179 = tail call double @llvm.amdgcn.ldexp.f64(double %1178, i32 2)
  %1180 = fadd double %1179, %1171
  %1181 = fcmp olt double %1180, 0.000000e+00
  %1182 = select i1 %1181, double 4.000000e+00, double 0.000000e+00
  %1183 = fadd double %1179, %1182
  %1184 = fadd double %1171, %1183
  %1185 = fptosi double %1184 to i32
  %1186 = sitofp i32 %1185 to double
  %1187 = fsub double %1183, %1186
  %1188 = fadd double %1171, %1187
  %1189 = fsub double %1188, %1187
  %1190 = fsub double %1171, %1189
  %1191 = fadd double %1174, %1190
  %1192 = fcmp oge double %1188, 5.000000e-01
  %1193 = zext i1 %1192 to i32
  %1194 = add nsw i32 %1193, %1185
  %1195 = select i1 %1192, double 1.000000e+00, double 0.000000e+00
  %1196 = fsub double %1188, %1195
  %1197 = fadd double %1196, %1191
  %1198 = fsub double %1197, %1196
  %1199 = fsub double %1191, %1198
  %1200 = fmul double %1197, 0x3FF921FB54442D18
  %1201 = fneg double %1200
  %1202 = tail call double @llvm.fma.f64(double %1197, double 0x3FF921FB54442D18, double %1201)
  %1203 = tail call double @llvm.fma.f64(double %1197, double 0x3C91A62633145C07, double %1202)
  %1204 = tail call double @llvm.fma.f64(double %1199, double 0x3FF921FB54442D18, double %1203)
  %1205 = fadd double %1200, %1204
  %1206 = fsub double %1205, %1200
  %1207 = fsub double %1204, %1206
  br label %1208

1208:                                             ; preds = %1113, %1132
  %1209 = phi double [ %1130, %1113 ], [ %1207, %1132 ]
  %1210 = phi double [ %1128, %1113 ], [ %1205, %1132 ]
  %1211 = phi i32 [ %1131, %1113 ], [ %1194, %1132 ]
  %1212 = fmul double %1210, %1210
  %1213 = fmul double %1212, 5.000000e-01
  %1214 = fsub double 1.000000e+00, %1213
  %1215 = fsub double 1.000000e+00, %1214
  %1216 = fsub double %1215, %1213
  %1217 = fmul double %1212, %1212
  %1218 = tail call double @llvm.fma.f64(double %1212, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1219 = tail call double @llvm.fma.f64(double %1212, double %1218, double 0xBE927E4FA17F65F6)
  %1220 = tail call double @llvm.fma.f64(double %1212, double %1219, double 0x3EFA01A019F4EC90)
  %1221 = tail call double @llvm.fma.f64(double %1212, double %1220, double 0xBF56C16C16C16967)
  %1222 = tail call double @llvm.fma.f64(double %1212, double %1221, double 0x3FA5555555555555)
  %1223 = fneg double %1209
  %1224 = tail call double @llvm.fma.f64(double %1210, double %1223, double %1216)
  %1225 = tail call double @llvm.fma.f64(double %1217, double %1222, double %1224)
  %1226 = fadd double %1214, %1225
  %1227 = tail call double @llvm.fma.f64(double %1212, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1228 = tail call double @llvm.fma.f64(double %1212, double %1227, double 0x3EC71DE3796CDE01)
  %1229 = tail call double @llvm.fma.f64(double %1212, double %1228, double 0xBF2A01A019E83E5C)
  %1230 = tail call double @llvm.fma.f64(double %1212, double %1229, double 0x3F81111111110BB3)
  %1231 = fneg double %1212
  %1232 = fmul double %1210, %1231
  %1233 = fmul double %1209, 5.000000e-01
  %1234 = tail call double @llvm.fma.f64(double %1232, double %1230, double %1233)
  %1235 = tail call double @llvm.fma.f64(double %1212, double %1234, double %1223)
  %1236 = tail call double @llvm.fma.f64(double %1232, double 0xBFC5555555555555, double %1235)
  %1237 = fsub double %1210, %1236
  %1238 = fneg double %1237
  %1239 = and i32 %1211, 1
  %1240 = icmp eq i32 %1239, 0
  %1241 = select i1 %1240, double %1226, double %1238
  %1242 = bitcast double %1241 to <2 x i32>
  %1243 = shl i32 %1211, 30
  %1244 = and i32 %1243, -2147483648
  %1245 = extractelement <2 x i32> %1242, i64 1
  %1246 = xor i32 %1245, %1244
  %1247 = insertelement <2 x i32> %1242, i32 %1246, i64 1
  %1248 = tail call i1 @llvm.amdgcn.class.f64(double %1111, i32 504)
  %1249 = select i1 %1248, <2 x i32> %1247, <2 x i32> <i32 0, i32 2146959360>
  %1250 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %21, i64 %75, i32 0, i32 0, i32 0, i64 0
  %1251 = bitcast double addrspace(1)* %1250 to <2 x i32> addrspace(1)*
  store <2 x i32> %1249, <2 x i32> addrspace(1)* %1251, align 16, !tbaa !21
  %1252 = load double, double addrspace(1)* %147, align 8, !tbaa !17
  %1253 = fneg contract double %1252
  %1254 = fmul contract double %1253, %3
  %1255 = tail call double @llvm.fabs.f64(double %1254)
  %1256 = fcmp olt double %1255, 0x41D0000000000000
  br i1 %1256, label %1257, label %1276

1257:                                             ; preds = %1208
  %1258 = fmul double %1255, 0x3FE45F306DC9C883
  %1259 = tail call double @llvm.rint.f64(double %1258)
  %1260 = tail call double @llvm.fma.f64(double %1259, double 0xBFF921FB54442D18, double %1255)
  %1261 = tail call double @llvm.fma.f64(double %1259, double 0xBC91A62633145C00, double %1260)
  %1262 = fmul double %1259, 0x3C91A62633145C00
  %1263 = fneg double %1262
  %1264 = tail call double @llvm.fma.f64(double %1259, double 0x3C91A62633145C00, double %1263)
  %1265 = fsub double %1260, %1262
  %1266 = fsub double %1260, %1265
  %1267 = fsub double %1266, %1262
  %1268 = fsub double %1265, %1261
  %1269 = fadd double %1268, %1267
  %1270 = fsub double %1269, %1264
  %1271 = tail call double @llvm.fma.f64(double %1259, double 0xB97B839A252049C0, double %1270)
  %1272 = fadd double %1261, %1271
  %1273 = fsub double %1272, %1261
  %1274 = fsub double %1271, %1273
  %1275 = fptosi double %1259 to i32
  br label %1352

1276:                                             ; preds = %1208
  %1277 = tail call double @llvm.amdgcn.trig.preop.f64(double %1255, i32 0)
  %1278 = tail call double @llvm.amdgcn.trig.preop.f64(double %1255, i32 1)
  %1279 = tail call double @llvm.amdgcn.trig.preop.f64(double %1255, i32 2)
  %1280 = fcmp oge double %1255, 0x7B00000000000000
  %1281 = tail call double @llvm.amdgcn.ldexp.f64(double %1255, i32 -128)
  %1282 = select i1 %1280, double %1281, double %1255
  %1283 = fmul double %1279, %1282
  %1284 = fneg double %1283
  %1285 = tail call double @llvm.fma.f64(double %1279, double %1282, double %1284)
  %1286 = fmul double %1278, %1282
  %1287 = fneg double %1286
  %1288 = tail call double @llvm.fma.f64(double %1278, double %1282, double %1287)
  %1289 = fmul double %1277, %1282
  %1290 = fneg double %1289
  %1291 = tail call double @llvm.fma.f64(double %1277, double %1282, double %1290)
  %1292 = fadd double %1286, %1291
  %1293 = fsub double %1292, %1286
  %1294 = fsub double %1292, %1293
  %1295 = fsub double %1291, %1293
  %1296 = fsub double %1286, %1294
  %1297 = fadd double %1295, %1296
  %1298 = fadd double %1283, %1288
  %1299 = fsub double %1298, %1283
  %1300 = fsub double %1298, %1299
  %1301 = fsub double %1288, %1299
  %1302 = fsub double %1283, %1300
  %1303 = fadd double %1301, %1302
  %1304 = fadd double %1298, %1297
  %1305 = fsub double %1304, %1298
  %1306 = fsub double %1304, %1305
  %1307 = fsub double %1297, %1305
  %1308 = fsub double %1298, %1306
  %1309 = fadd double %1307, %1308
  %1310 = fadd double %1303, %1309
  %1311 = fadd double %1285, %1310
  %1312 = fadd double %1289, %1292
  %1313 = fsub double %1312, %1289
  %1314 = fsub double %1292, %1313
  %1315 = fadd double %1314, %1304
  %1316 = fsub double %1315, %1314
  %1317 = fsub double %1304, %1316
  %1318 = fadd double %1317, %1311
  %1319 = tail call double @llvm.amdgcn.ldexp.f64(double %1312, i32 -2)
  %1320 = tail call double @llvm.amdgcn.fract.f64(double %1319)
  %1321 = tail call i1 @llvm.amdgcn.class.f64(double %1319, i32 516)
  %1322 = select i1 %1321, double 0.000000e+00, double %1320
  %1323 = tail call double @llvm.amdgcn.ldexp.f64(double %1322, i32 2)
  %1324 = fadd double %1323, %1315
  %1325 = fcmp olt double %1324, 0.000000e+00
  %1326 = select i1 %1325, double 4.000000e+00, double 0.000000e+00
  %1327 = fadd double %1323, %1326
  %1328 = fadd double %1315, %1327
  %1329 = fptosi double %1328 to i32
  %1330 = sitofp i32 %1329 to double
  %1331 = fsub double %1327, %1330
  %1332 = fadd double %1315, %1331
  %1333 = fsub double %1332, %1331
  %1334 = fsub double %1315, %1333
  %1335 = fadd double %1318, %1334
  %1336 = fcmp oge double %1332, 5.000000e-01
  %1337 = zext i1 %1336 to i32
  %1338 = add nsw i32 %1337, %1329
  %1339 = select i1 %1336, double 1.000000e+00, double 0.000000e+00
  %1340 = fsub double %1332, %1339
  %1341 = fadd double %1340, %1335
  %1342 = fsub double %1341, %1340
  %1343 = fsub double %1335, %1342
  %1344 = fmul double %1341, 0x3FF921FB54442D18
  %1345 = fneg double %1344
  %1346 = tail call double @llvm.fma.f64(double %1341, double 0x3FF921FB54442D18, double %1345)
  %1347 = tail call double @llvm.fma.f64(double %1341, double 0x3C91A62633145C07, double %1346)
  %1348 = tail call double @llvm.fma.f64(double %1343, double 0x3FF921FB54442D18, double %1347)
  %1349 = fadd double %1344, %1348
  %1350 = fsub double %1349, %1344
  %1351 = fsub double %1348, %1350
  br label %1352

1352:                                             ; preds = %1257, %1276
  %1353 = phi double [ %1274, %1257 ], [ %1351, %1276 ]
  %1354 = phi double [ %1272, %1257 ], [ %1349, %1276 ]
  %1355 = phi i32 [ %1275, %1257 ], [ %1338, %1276 ]
  %1356 = fmul double %1354, %1354
  %1357 = fmul double %1356, 5.000000e-01
  %1358 = fsub double 1.000000e+00, %1357
  %1359 = fsub double 1.000000e+00, %1358
  %1360 = fsub double %1359, %1357
  %1361 = fmul double %1356, %1356
  %1362 = tail call double @llvm.fma.f64(double %1356, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1363 = tail call double @llvm.fma.f64(double %1356, double %1362, double 0xBE927E4FA17F65F6)
  %1364 = tail call double @llvm.fma.f64(double %1356, double %1363, double 0x3EFA01A019F4EC90)
  %1365 = tail call double @llvm.fma.f64(double %1356, double %1364, double 0xBF56C16C16C16967)
  %1366 = tail call double @llvm.fma.f64(double %1356, double %1365, double 0x3FA5555555555555)
  %1367 = fneg double %1353
  %1368 = tail call double @llvm.fma.f64(double %1354, double %1367, double %1360)
  %1369 = tail call double @llvm.fma.f64(double %1361, double %1366, double %1368)
  %1370 = fadd double %1358, %1369
  %1371 = tail call double @llvm.fma.f64(double %1356, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1372 = tail call double @llvm.fma.f64(double %1356, double %1371, double 0x3EC71DE3796CDE01)
  %1373 = tail call double @llvm.fma.f64(double %1356, double %1372, double 0xBF2A01A019E83E5C)
  %1374 = tail call double @llvm.fma.f64(double %1356, double %1373, double 0x3F81111111110BB3)
  %1375 = fneg double %1356
  %1376 = fmul double %1354, %1375
  %1377 = fmul double %1353, 5.000000e-01
  %1378 = tail call double @llvm.fma.f64(double %1376, double %1374, double %1377)
  %1379 = tail call double @llvm.fma.f64(double %1356, double %1378, double %1367)
  %1380 = tail call double @llvm.fma.f64(double %1376, double 0xBFC5555555555555, double %1379)
  %1381 = fsub double %1354, %1380
  %1382 = and i32 %1355, 1
  %1383 = icmp eq i32 %1382, 0
  %1384 = select i1 %1383, double %1381, double %1370
  %1385 = bitcast double %1384 to <2 x i32>
  %1386 = shl i32 %1355, 30
  %1387 = bitcast double %1254 to <2 x i32>
  %1388 = extractelement <2 x i32> %1387, i64 1
  %1389 = xor i32 %1386, %1388
  %1390 = and i32 %1389, -2147483648
  %1391 = extractelement <2 x i32> %1385, i64 1
  %1392 = xor i32 %1391, %1390
  %1393 = insertelement <2 x i32> %1385, i32 %1392, i64 1
  %1394 = tail call i1 @llvm.amdgcn.class.f64(double %1255, i32 504)
  %1395 = select i1 %1394, <2 x i32> %1393, <2 x i32> <i32 0, i32 2146959360>
  %1396 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %21, i64 %75, i32 0, i32 0, i32 0, i64 1
  %1397 = bitcast double addrspace(1)* %1396 to <2 x i32> addrspace(1)*
  store <2 x i32> %1395, <2 x i32> addrspace(1)* %1397, align 8, !tbaa !21
  %1398 = load double, double addrspace(1)* %140, align 8, !tbaa !17
  %1399 = fneg contract double %1398
  %1400 = fmul contract double %1399, %3
  %1401 = tail call double @llvm.fabs.f64(double %1400)
  %1402 = fcmp olt double %1401, 0x41D0000000000000
  br i1 %1402, label %1403, label %1422

1403:                                             ; preds = %1352
  %1404 = fmul double %1401, 0x3FE45F306DC9C883
  %1405 = tail call double @llvm.rint.f64(double %1404)
  %1406 = tail call double @llvm.fma.f64(double %1405, double 0xBFF921FB54442D18, double %1401)
  %1407 = tail call double @llvm.fma.f64(double %1405, double 0xBC91A62633145C00, double %1406)
  %1408 = fmul double %1405, 0x3C91A62633145C00
  %1409 = fneg double %1408
  %1410 = tail call double @llvm.fma.f64(double %1405, double 0x3C91A62633145C00, double %1409)
  %1411 = fsub double %1406, %1408
  %1412 = fsub double %1406, %1411
  %1413 = fsub double %1412, %1408
  %1414 = fsub double %1411, %1407
  %1415 = fadd double %1414, %1413
  %1416 = fsub double %1415, %1410
  %1417 = tail call double @llvm.fma.f64(double %1405, double 0xB97B839A252049C0, double %1416)
  %1418 = fadd double %1407, %1417
  %1419 = fsub double %1418, %1407
  %1420 = fsub double %1417, %1419
  %1421 = fptosi double %1405 to i32
  br label %1498

1422:                                             ; preds = %1352
  %1423 = tail call double @llvm.amdgcn.trig.preop.f64(double %1401, i32 0)
  %1424 = tail call double @llvm.amdgcn.trig.preop.f64(double %1401, i32 1)
  %1425 = tail call double @llvm.amdgcn.trig.preop.f64(double %1401, i32 2)
  %1426 = fcmp oge double %1401, 0x7B00000000000000
  %1427 = tail call double @llvm.amdgcn.ldexp.f64(double %1401, i32 -128)
  %1428 = select i1 %1426, double %1427, double %1401
  %1429 = fmul double %1425, %1428
  %1430 = fneg double %1429
  %1431 = tail call double @llvm.fma.f64(double %1425, double %1428, double %1430)
  %1432 = fmul double %1424, %1428
  %1433 = fneg double %1432
  %1434 = tail call double @llvm.fma.f64(double %1424, double %1428, double %1433)
  %1435 = fmul double %1423, %1428
  %1436 = fneg double %1435
  %1437 = tail call double @llvm.fma.f64(double %1423, double %1428, double %1436)
  %1438 = fadd double %1432, %1437
  %1439 = fsub double %1438, %1432
  %1440 = fsub double %1438, %1439
  %1441 = fsub double %1437, %1439
  %1442 = fsub double %1432, %1440
  %1443 = fadd double %1441, %1442
  %1444 = fadd double %1429, %1434
  %1445 = fsub double %1444, %1429
  %1446 = fsub double %1444, %1445
  %1447 = fsub double %1434, %1445
  %1448 = fsub double %1429, %1446
  %1449 = fadd double %1447, %1448
  %1450 = fadd double %1444, %1443
  %1451 = fsub double %1450, %1444
  %1452 = fsub double %1450, %1451
  %1453 = fsub double %1443, %1451
  %1454 = fsub double %1444, %1452
  %1455 = fadd double %1453, %1454
  %1456 = fadd double %1449, %1455
  %1457 = fadd double %1431, %1456
  %1458 = fadd double %1435, %1438
  %1459 = fsub double %1458, %1435
  %1460 = fsub double %1438, %1459
  %1461 = fadd double %1460, %1450
  %1462 = fsub double %1461, %1460
  %1463 = fsub double %1450, %1462
  %1464 = fadd double %1463, %1457
  %1465 = tail call double @llvm.amdgcn.ldexp.f64(double %1458, i32 -2)
  %1466 = tail call double @llvm.amdgcn.fract.f64(double %1465)
  %1467 = tail call i1 @llvm.amdgcn.class.f64(double %1465, i32 516)
  %1468 = select i1 %1467, double 0.000000e+00, double %1466
  %1469 = tail call double @llvm.amdgcn.ldexp.f64(double %1468, i32 2)
  %1470 = fadd double %1469, %1461
  %1471 = fcmp olt double %1470, 0.000000e+00
  %1472 = select i1 %1471, double 4.000000e+00, double 0.000000e+00
  %1473 = fadd double %1469, %1472
  %1474 = fadd double %1461, %1473
  %1475 = fptosi double %1474 to i32
  %1476 = sitofp i32 %1475 to double
  %1477 = fsub double %1473, %1476
  %1478 = fadd double %1461, %1477
  %1479 = fsub double %1478, %1477
  %1480 = fsub double %1461, %1479
  %1481 = fadd double %1464, %1480
  %1482 = fcmp oge double %1478, 5.000000e-01
  %1483 = zext i1 %1482 to i32
  %1484 = add nsw i32 %1483, %1475
  %1485 = select i1 %1482, double 1.000000e+00, double 0.000000e+00
  %1486 = fsub double %1478, %1485
  %1487 = fadd double %1486, %1481
  %1488 = fsub double %1487, %1486
  %1489 = fsub double %1481, %1488
  %1490 = fmul double %1487, 0x3FF921FB54442D18
  %1491 = fneg double %1490
  %1492 = tail call double @llvm.fma.f64(double %1487, double 0x3FF921FB54442D18, double %1491)
  %1493 = tail call double @llvm.fma.f64(double %1487, double 0x3C91A62633145C07, double %1492)
  %1494 = tail call double @llvm.fma.f64(double %1489, double 0x3FF921FB54442D18, double %1493)
  %1495 = fadd double %1490, %1494
  %1496 = fsub double %1495, %1490
  %1497 = fsub double %1494, %1496
  br label %1498

1498:                                             ; preds = %1403, %1422
  %1499 = phi double [ %1420, %1403 ], [ %1497, %1422 ]
  %1500 = phi double [ %1418, %1403 ], [ %1495, %1422 ]
  %1501 = phi i32 [ %1421, %1403 ], [ %1484, %1422 ]
  %1502 = fmul double %1500, %1500
  %1503 = fmul double %1502, 5.000000e-01
  %1504 = fsub double 1.000000e+00, %1503
  %1505 = fsub double 1.000000e+00, %1504
  %1506 = fsub double %1505, %1503
  %1507 = fmul double %1502, %1502
  %1508 = tail call double @llvm.fma.f64(double %1502, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1509 = tail call double @llvm.fma.f64(double %1502, double %1508, double 0xBE927E4FA17F65F6)
  %1510 = tail call double @llvm.fma.f64(double %1502, double %1509, double 0x3EFA01A019F4EC90)
  %1511 = tail call double @llvm.fma.f64(double %1502, double %1510, double 0xBF56C16C16C16967)
  %1512 = tail call double @llvm.fma.f64(double %1502, double %1511, double 0x3FA5555555555555)
  %1513 = fneg double %1499
  %1514 = tail call double @llvm.fma.f64(double %1500, double %1513, double %1506)
  %1515 = tail call double @llvm.fma.f64(double %1507, double %1512, double %1514)
  %1516 = fadd double %1504, %1515
  %1517 = tail call double @llvm.fma.f64(double %1502, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1518 = tail call double @llvm.fma.f64(double %1502, double %1517, double 0x3EC71DE3796CDE01)
  %1519 = tail call double @llvm.fma.f64(double %1502, double %1518, double 0xBF2A01A019E83E5C)
  %1520 = tail call double @llvm.fma.f64(double %1502, double %1519, double 0x3F81111111110BB3)
  %1521 = fneg double %1502
  %1522 = fmul double %1500, %1521
  %1523 = fmul double %1499, 5.000000e-01
  %1524 = tail call double @llvm.fma.f64(double %1522, double %1520, double %1523)
  %1525 = tail call double @llvm.fma.f64(double %1502, double %1524, double %1513)
  %1526 = tail call double @llvm.fma.f64(double %1522, double 0xBFC5555555555555, double %1525)
  %1527 = fsub double %1500, %1526
  %1528 = fneg double %1527
  %1529 = and i32 %1501, 1
  %1530 = icmp eq i32 %1529, 0
  %1531 = select i1 %1530, double %1516, double %1528
  %1532 = bitcast double %1531 to <2 x i32>
  %1533 = shl i32 %1501, 30
  %1534 = and i32 %1533, -2147483648
  %1535 = extractelement <2 x i32> %1532, i64 1
  %1536 = xor i32 %1535, %1534
  %1537 = insertelement <2 x i32> %1532, i32 %1536, i64 1
  %1538 = tail call i1 @llvm.amdgcn.class.f64(double %1401, i32 504)
  %1539 = select i1 %1538, <2 x i32> %1537, <2 x i32> <i32 0, i32 2146959360>
  %1540 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %20, i64 %75, i32 0, i32 0, i32 0, i64 0
  %1541 = bitcast double addrspace(1)* %1540 to <2 x i32> addrspace(1)*
  store <2 x i32> %1539, <2 x i32> addrspace(1)* %1541, align 16, !tbaa !21
  %1542 = load double, double addrspace(1)* %140, align 8, !tbaa !17
  %1543 = fneg contract double %1542
  %1544 = fmul contract double %1543, %3
  %1545 = tail call double @llvm.fabs.f64(double %1544)
  %1546 = fcmp olt double %1545, 0x41D0000000000000
  br i1 %1546, label %1547, label %1566

1547:                                             ; preds = %1498
  %1548 = fmul double %1545, 0x3FE45F306DC9C883
  %1549 = tail call double @llvm.rint.f64(double %1548)
  %1550 = tail call double @llvm.fma.f64(double %1549, double 0xBFF921FB54442D18, double %1545)
  %1551 = tail call double @llvm.fma.f64(double %1549, double 0xBC91A62633145C00, double %1550)
  %1552 = fmul double %1549, 0x3C91A62633145C00
  %1553 = fneg double %1552
  %1554 = tail call double @llvm.fma.f64(double %1549, double 0x3C91A62633145C00, double %1553)
  %1555 = fsub double %1550, %1552
  %1556 = fsub double %1550, %1555
  %1557 = fsub double %1556, %1552
  %1558 = fsub double %1555, %1551
  %1559 = fadd double %1558, %1557
  %1560 = fsub double %1559, %1554
  %1561 = tail call double @llvm.fma.f64(double %1549, double 0xB97B839A252049C0, double %1560)
  %1562 = fadd double %1551, %1561
  %1563 = fsub double %1562, %1551
  %1564 = fsub double %1561, %1563
  %1565 = fptosi double %1549 to i32
  br label %1642

1566:                                             ; preds = %1498
  %1567 = tail call double @llvm.amdgcn.trig.preop.f64(double %1545, i32 0)
  %1568 = tail call double @llvm.amdgcn.trig.preop.f64(double %1545, i32 1)
  %1569 = tail call double @llvm.amdgcn.trig.preop.f64(double %1545, i32 2)
  %1570 = fcmp oge double %1545, 0x7B00000000000000
  %1571 = tail call double @llvm.amdgcn.ldexp.f64(double %1545, i32 -128)
  %1572 = select i1 %1570, double %1571, double %1545
  %1573 = fmul double %1569, %1572
  %1574 = fneg double %1573
  %1575 = tail call double @llvm.fma.f64(double %1569, double %1572, double %1574)
  %1576 = fmul double %1568, %1572
  %1577 = fneg double %1576
  %1578 = tail call double @llvm.fma.f64(double %1568, double %1572, double %1577)
  %1579 = fmul double %1567, %1572
  %1580 = fneg double %1579
  %1581 = tail call double @llvm.fma.f64(double %1567, double %1572, double %1580)
  %1582 = fadd double %1576, %1581
  %1583 = fsub double %1582, %1576
  %1584 = fsub double %1582, %1583
  %1585 = fsub double %1581, %1583
  %1586 = fsub double %1576, %1584
  %1587 = fadd double %1585, %1586
  %1588 = fadd double %1573, %1578
  %1589 = fsub double %1588, %1573
  %1590 = fsub double %1588, %1589
  %1591 = fsub double %1578, %1589
  %1592 = fsub double %1573, %1590
  %1593 = fadd double %1591, %1592
  %1594 = fadd double %1588, %1587
  %1595 = fsub double %1594, %1588
  %1596 = fsub double %1594, %1595
  %1597 = fsub double %1587, %1595
  %1598 = fsub double %1588, %1596
  %1599 = fadd double %1597, %1598
  %1600 = fadd double %1593, %1599
  %1601 = fadd double %1575, %1600
  %1602 = fadd double %1579, %1582
  %1603 = fsub double %1602, %1579
  %1604 = fsub double %1582, %1603
  %1605 = fadd double %1604, %1594
  %1606 = fsub double %1605, %1604
  %1607 = fsub double %1594, %1606
  %1608 = fadd double %1607, %1601
  %1609 = tail call double @llvm.amdgcn.ldexp.f64(double %1602, i32 -2)
  %1610 = tail call double @llvm.amdgcn.fract.f64(double %1609)
  %1611 = tail call i1 @llvm.amdgcn.class.f64(double %1609, i32 516)
  %1612 = select i1 %1611, double 0.000000e+00, double %1610
  %1613 = tail call double @llvm.amdgcn.ldexp.f64(double %1612, i32 2)
  %1614 = fadd double %1613, %1605
  %1615 = fcmp olt double %1614, 0.000000e+00
  %1616 = select i1 %1615, double 4.000000e+00, double 0.000000e+00
  %1617 = fadd double %1613, %1616
  %1618 = fadd double %1605, %1617
  %1619 = fptosi double %1618 to i32
  %1620 = sitofp i32 %1619 to double
  %1621 = fsub double %1617, %1620
  %1622 = fadd double %1605, %1621
  %1623 = fsub double %1622, %1621
  %1624 = fsub double %1605, %1623
  %1625 = fadd double %1608, %1624
  %1626 = fcmp oge double %1622, 5.000000e-01
  %1627 = zext i1 %1626 to i32
  %1628 = add nsw i32 %1627, %1619
  %1629 = select i1 %1626, double 1.000000e+00, double 0.000000e+00
  %1630 = fsub double %1622, %1629
  %1631 = fadd double %1630, %1625
  %1632 = fsub double %1631, %1630
  %1633 = fsub double %1625, %1632
  %1634 = fmul double %1631, 0x3FF921FB54442D18
  %1635 = fneg double %1634
  %1636 = tail call double @llvm.fma.f64(double %1631, double 0x3FF921FB54442D18, double %1635)
  %1637 = tail call double @llvm.fma.f64(double %1631, double 0x3C91A62633145C07, double %1636)
  %1638 = tail call double @llvm.fma.f64(double %1633, double 0x3FF921FB54442D18, double %1637)
  %1639 = fadd double %1634, %1638
  %1640 = fsub double %1639, %1634
  %1641 = fsub double %1638, %1640
  br label %1642

1642:                                             ; preds = %1547, %1566
  %1643 = phi double [ %1564, %1547 ], [ %1641, %1566 ]
  %1644 = phi double [ %1562, %1547 ], [ %1639, %1566 ]
  %1645 = phi i32 [ %1565, %1547 ], [ %1628, %1566 ]
  %1646 = fmul double %1644, %1644
  %1647 = fmul double %1646, 5.000000e-01
  %1648 = fsub double 1.000000e+00, %1647
  %1649 = fsub double 1.000000e+00, %1648
  %1650 = fsub double %1649, %1647
  %1651 = fmul double %1646, %1646
  %1652 = tail call double @llvm.fma.f64(double %1646, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %1653 = tail call double @llvm.fma.f64(double %1646, double %1652, double 0xBE927E4FA17F65F6)
  %1654 = tail call double @llvm.fma.f64(double %1646, double %1653, double 0x3EFA01A019F4EC90)
  %1655 = tail call double @llvm.fma.f64(double %1646, double %1654, double 0xBF56C16C16C16967)
  %1656 = tail call double @llvm.fma.f64(double %1646, double %1655, double 0x3FA5555555555555)
  %1657 = fneg double %1643
  %1658 = tail call double @llvm.fma.f64(double %1644, double %1657, double %1650)
  %1659 = tail call double @llvm.fma.f64(double %1651, double %1656, double %1658)
  %1660 = fadd double %1648, %1659
  %1661 = tail call double @llvm.fma.f64(double %1646, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %1662 = tail call double @llvm.fma.f64(double %1646, double %1661, double 0x3EC71DE3796CDE01)
  %1663 = tail call double @llvm.fma.f64(double %1646, double %1662, double 0xBF2A01A019E83E5C)
  %1664 = tail call double @llvm.fma.f64(double %1646, double %1663, double 0x3F81111111110BB3)
  %1665 = fneg double %1646
  %1666 = fmul double %1644, %1665
  %1667 = fmul double %1643, 5.000000e-01
  %1668 = tail call double @llvm.fma.f64(double %1666, double %1664, double %1667)
  %1669 = tail call double @llvm.fma.f64(double %1646, double %1668, double %1657)
  %1670 = tail call double @llvm.fma.f64(double %1666, double 0xBFC5555555555555, double %1669)
  %1671 = fsub double %1644, %1670
  %1672 = and i32 %1645, 1
  %1673 = icmp eq i32 %1672, 0
  %1674 = select i1 %1673, double %1671, double %1660
  %1675 = bitcast double %1674 to <2 x i32>
  %1676 = shl i32 %1645, 30
  %1677 = bitcast double %1544 to <2 x i32>
  %1678 = extractelement <2 x i32> %1677, i64 1
  %1679 = xor i32 %1676, %1678
  %1680 = and i32 %1679, -2147483648
  %1681 = extractelement <2 x i32> %1675, i64 1
  %1682 = xor i32 %1681, %1680
  %1683 = insertelement <2 x i32> %1675, i32 %1682, i64 1
  %1684 = tail call i1 @llvm.amdgcn.class.f64(double %1545, i32 504)
  %1685 = select i1 %1684, <2 x i32> %1683, <2 x i32> <i32 0, i32 2146959360>
  %1686 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %20, i64 %75, i32 0, i32 0, i32 0, i64 1
  %1687 = bitcast double addrspace(1)* %1686 to <2 x i32> addrspace(1)*
  store <2 x i32> %1685, <2 x i32> addrspace(1)* %1687, align 8, !tbaa !21
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.ldexp.f64(double, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.amdgcn.fract.f64(double) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.z() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.z() #2

attributes #0 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git 340750feeda88c9c2ce8ad481b11d9aa7f033d39)"}
!4 = !{!5, !9, i64 12}
!5 = !{!"hsa_kernel_dispatch_packet_s", !6, i64 0, !6, i64 2, !6, i64 4, !6, i64 6, !6, i64 8, !6, i64 10, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !10, i64 32, !11, i64 40, !10, i64 48, !12, i64 56}
!6 = !{!"short", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!"long", !7, i64 0}
!11 = !{!"any pointer", !7, i64 0}
!12 = !{!"hsa_signal_s", !10, i64 0}
!13 = !{i16 1, i16 1025}
!14 = !{}
!15 = !{!5, !9, i64 16}
!16 = !{i32 0, i32 1024}
!17 = !{!18, !18, i64 0}
!18 = !{!"double", !19, i64 0}
!19 = !{!"omnipotent char", !20, i64 0}
!20 = !{!"Simple C++ TBAA"}
!21 = !{!19, !19, i64 0}
