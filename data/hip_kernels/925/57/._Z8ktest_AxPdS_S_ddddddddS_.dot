digraph "CFG for '_Z8ktest_AxPdS_S_ddddddddS_' function" {
	label="CFG for '_Z8ktest_AxPdS_S_ddddddddS_' function";

	Node0x568ff70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%12:\l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.y()\l  %14 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %15 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 12\l  %16 = bitcast i8 addrspace(4)* %15 to i32 addrspace(4)*\l  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !4\l  %18 = getelementptr i8, i8 addrspace(4)* %14, i64 4\l  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*\l  %20 = load i16, i16 addrspace(4)* %19, align 4, !range !13, !invariant.load\l... !14\l  %21 = zext i16 %20 to i32\l  %22 = udiv i32 %17, %21\l  %23 = getelementptr inbounds i8, i8 addrspace(4)* %14, i64 16\l  %24 = bitcast i8 addrspace(4)* %23 to i32 addrspace(4)*\l  %25 = load i32, i32 addrspace(4)* %24, align 8, !tbaa !15\l  %26 = getelementptr i8, i8 addrspace(4)* %14, i64 6\l  %27 = bitcast i8 addrspace(4)* %26 to i16 addrspace(4)*\l  %28 = load i16, i16 addrspace(4)* %27, align 2, !range !13, !invariant.load\l... !14\l  %29 = zext i16 %28 to i32\l  %30 = udiv i32 %25, %29\l  %31 = mul i32 %13, %29\l  %32 = getelementptr i8, i8 addrspace(4)* %14, i64 8\l  %33 = bitcast i8 addrspace(4)* %32 to i16 addrspace(4)*\l  %34 = load i16, i16 addrspace(4)* %33, align 4, !range !13, !invariant.load\l... !14\l  %35 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !16\l  %36 = add i32 %31, %35\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds double, double addrspace(1)* %1, i64 %37\l  %39 = load double, double addrspace(1)* %38, align 8, !tbaa !17,\l... !amdgpu.noclobber !14\l  %40 = fmul contract double %39, 1.000000e+05\l  %41 = tail call double @llvm.fabs.f64(double %40)\l  %42 = fcmp olt double %41, 0x41D0000000000000\l  br i1 %42, label %43, label %62\l|{<s0>T|<s1>F}}"];
	Node0x568ff70:s0 -> Node0x5695340;
	Node0x568ff70:s1 -> Node0x56953d0;
	Node0x5695340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%43:\l43:                                               \l  %44 = fmul double %41, 0x3FE45F306DC9C883\l  %45 = tail call double @llvm.rint.f64(double %44)\l  %46 = tail call double @llvm.fma.f64(double %45, double 0xBFF921FB54442D18,\l... double %41)\l  %47 = tail call double @llvm.fma.f64(double %45, double 0xBC91A62633145C00,\l... double %46)\l  %48 = fmul double %45, 0x3C91A62633145C00\l  %49 = fneg double %48\l  %50 = tail call double @llvm.fma.f64(double %45, double 0x3C91A62633145C00,\l... double %49)\l  %51 = fsub double %46, %48\l  %52 = fsub double %46, %51\l  %53 = fsub double %52, %48\l  %54 = fsub double %51, %47\l  %55 = fadd double %54, %53\l  %56 = fsub double %55, %50\l  %57 = tail call double @llvm.fma.f64(double %45, double 0xB97B839A252049C0,\l... double %56)\l  %58 = fadd double %47, %57\l  %59 = fsub double %58, %47\l  %60 = fsub double %57, %59\l  %61 = fptosi double %45 to i32\l  br label %138\l}"];
	Node0x5695340 -> Node0x56965b0;
	Node0x56953d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%62:\l62:                                               \l  %63 = tail call double @llvm.amdgcn.trig.preop.f64(double %41, i32 0)\l  %64 = tail call double @llvm.amdgcn.trig.preop.f64(double %41, i32 1)\l  %65 = tail call double @llvm.amdgcn.trig.preop.f64(double %41, i32 2)\l  %66 = fcmp oge double %41, 0x7B00000000000000\l  %67 = tail call double @llvm.amdgcn.ldexp.f64(double %41, i32 -128)\l  %68 = select i1 %66, double %67, double %41\l  %69 = fmul double %65, %68\l  %70 = fneg double %69\l  %71 = tail call double @llvm.fma.f64(double %65, double %68, double %70)\l  %72 = fmul double %64, %68\l  %73 = fneg double %72\l  %74 = tail call double @llvm.fma.f64(double %64, double %68, double %73)\l  %75 = fmul double %63, %68\l  %76 = fneg double %75\l  %77 = tail call double @llvm.fma.f64(double %63, double %68, double %76)\l  %78 = fadd double %72, %77\l  %79 = fsub double %78, %72\l  %80 = fsub double %78, %79\l  %81 = fsub double %77, %79\l  %82 = fsub double %72, %80\l  %83 = fadd double %81, %82\l  %84 = fadd double %69, %74\l  %85 = fsub double %84, %69\l  %86 = fsub double %84, %85\l  %87 = fsub double %74, %85\l  %88 = fsub double %69, %86\l  %89 = fadd double %87, %88\l  %90 = fadd double %84, %83\l  %91 = fsub double %90, %84\l  %92 = fsub double %90, %91\l  %93 = fsub double %83, %91\l  %94 = fsub double %84, %92\l  %95 = fadd double %93, %94\l  %96 = fadd double %89, %95\l  %97 = fadd double %71, %96\l  %98 = fadd double %75, %78\l  %99 = fsub double %98, %75\l  %100 = fsub double %78, %99\l  %101 = fadd double %100, %90\l  %102 = fsub double %101, %100\l  %103 = fsub double %90, %102\l  %104 = fadd double %103, %97\l  %105 = tail call double @llvm.amdgcn.ldexp.f64(double %98, i32 -2)\l  %106 = tail call double @llvm.amdgcn.fract.f64(double %105)\l  %107 = tail call i1 @llvm.amdgcn.class.f64(double %105, i32 516)\l  %108 = select i1 %107, double 0.000000e+00, double %106\l  %109 = tail call double @llvm.amdgcn.ldexp.f64(double %108, i32 2)\l  %110 = fadd double %109, %101\l  %111 = fcmp olt double %110, 0.000000e+00\l  %112 = select i1 %111, double 4.000000e+00, double 0.000000e+00\l  %113 = fadd double %109, %112\l  %114 = fadd double %101, %113\l  %115 = fptosi double %114 to i32\l  %116 = sitofp i32 %115 to double\l  %117 = fsub double %113, %116\l  %118 = fadd double %101, %117\l  %119 = fsub double %118, %117\l  %120 = fsub double %101, %119\l  %121 = fadd double %104, %120\l  %122 = fcmp oge double %118, 5.000000e-01\l  %123 = zext i1 %122 to i32\l  %124 = add nsw i32 %123, %115\l  %125 = select i1 %122, double 1.000000e+00, double 0.000000e+00\l  %126 = fsub double %118, %125\l  %127 = fadd double %126, %121\l  %128 = fsub double %127, %126\l  %129 = fsub double %121, %128\l  %130 = fmul double %127, 0x3FF921FB54442D18\l  %131 = fneg double %130\l  %132 = tail call double @llvm.fma.f64(double %127, double\l... 0x3FF921FB54442D18, double %131)\l  %133 = tail call double @llvm.fma.f64(double %127, double\l... 0x3C91A62633145C07, double %132)\l  %134 = tail call double @llvm.fma.f64(double %129, double\l... 0x3FF921FB54442D18, double %133)\l  %135 = fadd double %130, %134\l  %136 = fsub double %135, %130\l  %137 = fsub double %134, %136\l  br label %138\l}"];
	Node0x56953d0 -> Node0x56965b0;
	Node0x56965b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%138:\l138:                                              \l  %139 = phi double [ %60, %43 ], [ %137, %62 ]\l  %140 = phi double [ %58, %43 ], [ %135, %62 ]\l  %141 = phi i32 [ %61, %43 ], [ %124, %62 ]\l  %142 = mul i32 %30, %29\l  %143 = icmp ugt i32 %25, %142\l  %144 = zext i1 %143 to i32\l  %145 = add i32 %30, %144\l  %146 = tail call i32 @llvm.amdgcn.workgroup.id.z()\l  %147 = mul i32 %145, %146\l  %148 = add i32 %147, %13\l  %149 = mul i32 %22, %21\l  %150 = icmp ugt i32 %17, %149\l  %151 = zext i1 %150 to i32\l  %152 = add i32 %22, %151\l  %153 = mul i32 %148, %152\l  %154 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %155 = add i32 %153, %154\l  %156 = zext i16 %34 to i32\l  %157 = mul i32 %155, %156\l  %158 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !16\l  %159 = add i32 %157, %158\l  %160 = mul i32 %159, %29\l  %161 = add i32 %160, %35\l  %162 = mul i32 %161, %21\l  %163 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !16\l  %164 = add i32 %162, %163\l  %165 = fmul double %140, %140\l  %166 = fmul double %165, 5.000000e-01\l  %167 = fsub double 1.000000e+00, %166\l  %168 = fsub double 1.000000e+00, %167\l  %169 = fsub double %168, %166\l  %170 = fmul double %165, %165\l  %171 = tail call double @llvm.fma.f64(double %165, double\l... 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)\l  %172 = tail call double @llvm.fma.f64(double %165, double %171, double\l... 0xBE927E4FA17F65F6)\l  %173 = tail call double @llvm.fma.f64(double %165, double %172, double\l... 0x3EFA01A019F4EC90)\l  %174 = tail call double @llvm.fma.f64(double %165, double %173, double\l... 0xBF56C16C16C16967)\l  %175 = tail call double @llvm.fma.f64(double %165, double %174, double\l... 0x3FA5555555555555)\l  %176 = fneg double %139\l  %177 = tail call double @llvm.fma.f64(double %140, double %176, double %169)\l  %178 = tail call double @llvm.fma.f64(double %170, double %175, double %177)\l  %179 = fadd double %167, %178\l  %180 = tail call double @llvm.fma.f64(double %165, double\l... 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)\l  %181 = tail call double @llvm.fma.f64(double %165, double %180, double\l... 0x3EC71DE3796CDE01)\l  %182 = tail call double @llvm.fma.f64(double %165, double %181, double\l... 0xBF2A01A019E83E5C)\l  %183 = tail call double @llvm.fma.f64(double %165, double %182, double\l... 0x3F81111111110BB3)\l  %184 = fneg double %165\l  %185 = fmul double %140, %184\l  %186 = fmul double %139, 5.000000e-01\l  %187 = tail call double @llvm.fma.f64(double %185, double %183, double %186)\l  %188 = tail call double @llvm.fma.f64(double %165, double %187, double %176)\l  %189 = tail call double @llvm.fma.f64(double %185, double\l... 0xBFC5555555555555, double %188)\l  %190 = fsub double %140, %189\l  %191 = and i32 %141, 1\l  %192 = icmp eq i32 %191, 0\l  %193 = select i1 %192, double %190, double %179\l  %194 = bitcast double %193 to \<2 x i32\>\l  %195 = shl i32 %141, 30\l  %196 = bitcast double %40 to \<2 x i32\>\l  %197 = extractelement \<2 x i32\> %196, i64 1\l  %198 = xor i32 %195, %197\l  %199 = and i32 %198, -2147483648\l  %200 = extractelement \<2 x i32\> %194, i64 1\l  %201 = xor i32 %200, %199\l  %202 = insertelement \<2 x i32\> %194, i32 %201, i64 1\l  %203 = tail call i1 @llvm.amdgcn.class.f64(double %41, i32 504)\l  %204 = select i1 %203, \<2 x i32\> %202, \<2 x i32\> \<i32 0, i32 2146959360\>\l  %205 = bitcast \<2 x i32\> %204 to double\l  %206 = fadd contract double %205, 1.000000e+00\l  %207 = fmul contract double %206, %4\l  %208 = fmul contract double %207, %9\l  %209 = sext i32 %164 to i64\l  %210 = getelementptr inbounds double, double addrspace(1)* %11, i64 %209\l  store double %208, double addrspace(1)* %210, align 8, !tbaa !17\l  ret void\l}"];
}
