digraph "CFG for '_Z17GPUMultiplyMatrixPlS_ii' function" {
	label="CFG for '_Z17GPUMultiplyMatrixPlS_ii' function";

	Node0x47eab50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%4:\l  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %6 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %7 = getelementptr i8, i8 addrspace(4)* %6, i64 4\l  %8 = bitcast i8 addrspace(4)* %7 to i16 addrspace(4)*\l  %9 = load i16, i16 addrspace(4)* %8, align 4, !range !4, !invariant.load !5\l  %10 = zext i16 %9 to i32\l  %11 = mul i32 %5, %10\l  %12 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !6\l  %13 = add i32 %11, %12\l  %14 = freeze i32 %13\l  %15 = icmp sgt i32 %2, 0\l  br i1 %15, label %16, label %79\l|{<s0>T|<s1>F}}"];
	Node0x47eab50:s0 -> Node0x47ecad0;
	Node0x47eab50:s1 -> Node0x47ecb60;
	Node0x47ecad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%16:\l16:                                               \l  %17 = srem i32 %14, %3\l  %18 = icmp sgt i32 %3, 0\l  %19 = sub nsw i32 %14, %17\l  %20 = sext i32 %14 to i64\l  %21 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %20\l  %22 = and i32 %3, 1\l  %23 = icmp eq i32 %3, 1\l  %24 = and i32 %3, -2\l  %25 = icmp eq i32 %22, 0\l  br label %26\l}"];
	Node0x47ecad0 -> Node0x47ed280;
	Node0x47ed280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%26:\l26:                                               \l  %27 = phi i32 [ %2, %16 ], [ %77, %75 ]\l  br i1 %18, label %28, label %75\l|{<s0>T|<s1>F}}"];
	Node0x47ed280:s0 -> Node0x47ed4b0;
	Node0x47ed280:s1 -> Node0x47ed370;
	Node0x47ed4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%28:\l28:                                               \l  br i1 %23, label %59, label %29\l|{<s0>T|<s1>F}}"];
	Node0x47ed4b0:s0 -> Node0x47ed5f0;
	Node0x47ed4b0:s1 -> Node0x47ed640;
	Node0x47ed640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%29:\l29:                                               \l  %30 = phi i32 [ %56, %29 ], [ 0, %28 ]\l  %31 = phi i64 [ %55, %29 ], [ 0, %28 ]\l  %32 = phi i32 [ %57, %29 ], [ 0, %28 ]\l  %33 = mul nsw i32 %30, %3\l  %34 = add nsw i32 %33, %17\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %35\l  %37 = load i64, i64 addrspace(1)* %36, align 8, !tbaa !7\l  %38 = add nsw i32 %19, %30\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %39\l  %41 = load i64, i64 addrspace(1)* %40, align 8, !tbaa !7\l  %42 = mul nsw i64 %41, %37\l  %43 = add nsw i64 %42, %31\l  %44 = or i32 %30, 1\l  %45 = mul nsw i32 %44, %3\l  %46 = add nsw i32 %45, %17\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %47\l  %49 = load i64, i64 addrspace(1)* %48, align 8, !tbaa !7\l  %50 = add nsw i32 %19, %44\l  %51 = sext i32 %50 to i64\l  %52 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %51\l  %53 = load i64, i64 addrspace(1)* %52, align 8, !tbaa !7\l  %54 = mul nsw i64 %53, %49\l  %55 = add nsw i64 %54, %43\l  %56 = add nuw nsw i32 %30, 2\l  %57 = add i32 %32, 2\l  %58 = icmp eq i32 %57, %24\l  br i1 %58, label %59, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x47ed640:s0 -> Node0x47ed5f0;
	Node0x47ed640:s1 -> Node0x47ed640;
	Node0x47ed5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%59:\l59:                                               \l  %60 = phi i64 [ undef, %28 ], [ %55, %29 ]\l  %61 = phi i32 [ 0, %28 ], [ %56, %29 ]\l  %62 = phi i64 [ 0, %28 ], [ %55, %29 ]\l  br i1 %25, label %75, label %63\l|{<s0>T|<s1>F}}"];
	Node0x47ed5f0:s0 -> Node0x47ed370;
	Node0x47ed5f0:s1 -> Node0x47ef890;
	Node0x47ef890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%63:\l63:                                               \l  %64 = mul nsw i32 %61, %3\l  %65 = add nsw i32 %64, %17\l  %66 = sext i32 %65 to i64\l  %67 = getelementptr inbounds i64, i64 addrspace(1)* %0, i64 %66\l  %68 = load i64, i64 addrspace(1)* %67, align 8, !tbaa !7\l  %69 = add nsw i32 %19, %61\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds i64, i64 addrspace(1)* %1, i64 %70\l  %72 = load i64, i64 addrspace(1)* %71, align 8, !tbaa !7\l  %73 = mul nsw i64 %72, %68\l  %74 = add nsw i64 %73, %62\l  br label %75\l}"];
	Node0x47ef890 -> Node0x47ed370;
	Node0x47ed370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%75:\l75:                                               \l  %76 = phi i64 [ 0, %26 ], [ %60, %59 ], [ %74, %63 ]\l  fence syncscope(\"workgroup\") release\l  tail call void @llvm.amdgcn.s.barrier()\l  fence syncscope(\"workgroup\") acquire\l  store i64 %76, i64 addrspace(1)* %21, align 8, !tbaa !7\l  %77 = add nsw i32 %27, -1\l  %78 = icmp sgt i32 %27, 1\l  br i1 %78, label %26, label %79, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x47ed370:s0 -> Node0x47ed280;
	Node0x47ed370:s1 -> Node0x47ecb60;
	Node0x47ecb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%79:\l79:                                               \l  ret void\l}"];
}
