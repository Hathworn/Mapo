digraph "CFG for '_Z22LinearPolynomProbsImplPKfiPKiS0_S2_ifPfS2_' function" {
	label="CFG for '_Z22LinearPolynomProbsImplPKfiPKiS0_S2_ifPfS2_' function";

	Node0x64b4500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%9:\l  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !4\l  %11 = icmp ult i32 %10, %1\l  br i1 %11, label %12, label %152\l|{<s0>T|<s1>F}}"];
	Node0x64b4500:s0 -> Node0x64b4410;
	Node0x64b4500:s1 -> Node0x64b5ee0;
	Node0x64b4410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%12:\l12:                                               \l  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x()\l  %14 = zext i32 %10 to i64\l  %15 = getelementptr inbounds float, float addrspace(1)* %0, i64 %14\l  %16 = getelementptr inbounds float, float addrspace(1)* %7, i64 %14\l  %17 = icmp slt i32 %13, %5\l  br i1 %17, label %18, label %152\l|{<s0>T|<s1>F}}"];
	Node0x64b4410:s0 -> Node0x64b6480;
	Node0x64b4410:s1 -> Node0x64b5ee0;
	Node0x64b6480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%18:\l18:                                               \l  %19 = tail call align 4 dereferenceable(64) i8 addrspace(4)*\l... @llvm.amdgcn.dispatch.ptr()\l  %20 = getelementptr inbounds i8, i8 addrspace(4)* %19, i64 12\l  %21 = bitcast i8 addrspace(4)* %20 to i32 addrspace(4)*\l  %22 = load i32, i32 addrspace(4)* %21, align 4, !tbaa !5\l  %23 = getelementptr i8, i8 addrspace(4)* %19, i64 4\l  %24 = bitcast i8 addrspace(4)* %23 to i16 addrspace(4)*\l  %25 = load i16, i16 addrspace(4)* %24, align 4, !range !14, !invariant.load\l... !15\l  %26 = zext i16 %25 to i32\l  %27 = udiv i32 %22, %26\l  %28 = mul i32 %27, %26\l  %29 = icmp ugt i32 %22, %28\l  %30 = zext i1 %29 to i32\l  br label %31\l}"];
	Node0x64b6480 -> Node0x64b7880;
	Node0x64b7880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%31:\l31:                                               \l  %32 = phi i32 [ %13, %18 ], [ %150, %144 ]\l  %33 = sext i32 %32 to i64\l  %34 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %33\l  %35 = load i32, i32 addrspace(1)* %34, align 4, !tbaa !16, !amdgpu.noclobber\l... !15\l  %36 = add nsw i32 %32, 1\l  %37 = sext i32 %36 to i64\l  %38 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %37\l  %39 = load i32, i32 addrspace(1)* %38, align 4, !tbaa !16, !amdgpu.noclobber\l... !15\l  %40 = sub nsw i32 %39, %35\l  %41 = getelementptr inbounds i32, i32 addrspace(1)* %8, i64 %33\l  %42 = load i32, i32 addrspace(1)* %41, align 4, !tbaa !16, !amdgpu.noclobber\l... !15\l  %43 = icmp sgt i32 %40, 0\l  br i1 %43, label %44, label %137\l|{<s0>T|<s1>F}}"];
	Node0x64b7880:s0 -> Node0x64b9000;
	Node0x64b7880:s1 -> Node0x64b9090;
	Node0x64b9000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%44:\l44:                                               \l  %45 = sext i32 %35 to i64\l  %46 = getelementptr inbounds float, float addrspace(1)* %3, i64 %45\l  %47 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %45\l  %48 = xor i32 %35, -1\l  %49 = add i32 %39, %48\l  %50 = and i32 %40, 3\l  %51 = icmp ult i32 %49, 3\l  br i1 %51, label %54, label %52\l|{<s0>T|<s1>F}}"];
	Node0x64b9000:s0 -> Node0x64b9620;
	Node0x64b9000:s1 -> Node0x64b9670;
	Node0x64b9670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%52:\l52:                                               \l  %53 = and i32 %40, -4\l  br label %81\l}"];
	Node0x64b9670 -> Node0x64b9870;
	Node0x64b9620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%54:\l54:                                               \l  %55 = phi i1 [ undef, %44 ], [ %133, %132 ]\l  %56 = phi i32 [ 0, %44 ], [ %134, %132 ]\l  %57 = phi i1 [ false, %44 ], [ %133, %132 ]\l  %58 = icmp eq i32 %50, 0\l  br i1 %58, label %79, label %59\l|{<s0>T|<s1>F}}"];
	Node0x64b9620:s0 -> Node0x64ba180;
	Node0x64b9620:s1 -> Node0x64ba210;
	Node0x64ba210 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%59:\l59:                                               \l  %60 = phi i32 [ %76, %74 ], [ %56, %54 ]\l  %61 = phi i1 [ %75, %74 ], [ %57, %54 ]\l  %62 = phi i32 [ %77, %74 ], [ 0, %54 ]\l  br i1 %61, label %74, label %63\l|{<s0>T|<s1>F}}"];
	Node0x64ba210:s0 -> Node0x64ba380;
	Node0x64ba210:s1 -> Node0x64ba700;
	Node0x64ba700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%63:\l63:                                               \l  %64 = zext i32 %60 to i64\l  %65 = getelementptr inbounds float, float addrspace(1)* %46, i64 %64\l  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !20\l  %67 = getelementptr inbounds i32, i32 addrspace(1)* %47, i64 %64\l  %68 = load i32, i32 addrspace(1)* %67, align 4, !tbaa !16, !amdgpu.noclobber\l... !15\l  %69 = mul nsw i32 %68, %1\l  %70 = sext i32 %69 to i64\l  %71 = getelementptr inbounds float, float addrspace(1)* %15, i64 %70\l  %72 = load float, float addrspace(1)* %71, align 4, !tbaa !20\l  %73 = fcmp contract ole float %72, %66\l  br label %74\l}"];
	Node0x64ba700 -> Node0x64ba380;
	Node0x64ba380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%74:\l74:                                               \l  %75 = phi i1 [ true, %59 ], [ %73, %63 ]\l  %76 = add nuw nsw i32 %60, 1\l  %77 = add i32 %62, 1\l  %78 = icmp eq i32 %77, %50\l  br i1 %78, label %79, label %59, !llvm.loop !22\l|{<s0>T|<s1>F}}"];
	Node0x64ba380:s0 -> Node0x64ba180;
	Node0x64ba380:s1 -> Node0x64ba210;
	Node0x64ba180 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%79:\l79:                                               \l  %80 = phi i1 [ %55, %54 ], [ %75, %74 ]\l  br i1 %80, label %144, label %137\l|{<s0>T|<s1>F}}"];
	Node0x64ba180:s0 -> Node0x64b7980;
	Node0x64ba180:s1 -> Node0x64b9090;
	Node0x64b9870 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%81:\l81:                                               \l  %82 = phi i32 [ 0, %52 ], [ %134, %132 ]\l  %83 = phi i1 [ false, %52 ], [ %133, %132 ]\l  %84 = phi i32 [ 0, %52 ], [ %135, %132 ]\l  br i1 %83, label %132, label %85\l|{<s0>T|<s1>F}}"];
	Node0x64b9870:s0 -> Node0x64b9db0;
	Node0x64b9870:s1 -> Node0x64bbe60;
	Node0x64bbe60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%85:\l85:                                               \l  %86 = zext i32 %82 to i64\l  %87 = getelementptr inbounds float, float addrspace(1)* %46, i64 %86\l  %88 = load float, float addrspace(1)* %87, align 4, !tbaa !20\l  %89 = getelementptr inbounds i32, i32 addrspace(1)* %47, i64 %86\l  %90 = load i32, i32 addrspace(1)* %89, align 4, !tbaa !16, !amdgpu.noclobber\l... !15\l  %91 = mul nsw i32 %90, %1\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds float, float addrspace(1)* %15, i64 %92\l  %94 = load float, float addrspace(1)* %93, align 4, !tbaa !20\l  %95 = fcmp contract ole float %94, %88\l  br i1 %95, label %132, label %96\l|{<s0>T|<s1>F}}"];
	Node0x64bbe60:s0 -> Node0x64b9db0;
	Node0x64bbe60:s1 -> Node0x64bc490;
	Node0x64bc490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%96:\l96:                                               \l  %97 = or i32 %82, 1\l  %98 = zext i32 %97 to i64\l  %99 = getelementptr inbounds float, float addrspace(1)* %46, i64 %98\l  %100 = load float, float addrspace(1)* %99, align 4, !tbaa !20\l  %101 = getelementptr inbounds i32, i32 addrspace(1)* %47, i64 %98\l  %102 = load i32, i32 addrspace(1)* %101, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %103 = mul nsw i32 %102, %1\l  %104 = sext i32 %103 to i64\l  %105 = getelementptr inbounds float, float addrspace(1)* %15, i64 %104\l  %106 = load float, float addrspace(1)* %105, align 4, !tbaa !20\l  %107 = fcmp contract ole float %106, %100\l  br i1 %107, label %132, label %108\l|{<s0>T|<s1>F}}"];
	Node0x64bc490:s0 -> Node0x64b9db0;
	Node0x64bc490:s1 -> Node0x64bcb50;
	Node0x64bcb50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%108:\l108:                                              \l  %109 = or i32 %82, 2\l  %110 = zext i32 %109 to i64\l  %111 = getelementptr inbounds float, float addrspace(1)* %46, i64 %110\l  %112 = load float, float addrspace(1)* %111, align 4, !tbaa !20\l  %113 = getelementptr inbounds i32, i32 addrspace(1)* %47, i64 %110\l  %114 = load i32, i32 addrspace(1)* %113, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %115 = mul nsw i32 %114, %1\l  %116 = sext i32 %115 to i64\l  %117 = getelementptr inbounds float, float addrspace(1)* %15, i64 %116\l  %118 = load float, float addrspace(1)* %117, align 4, !tbaa !20\l  %119 = fcmp contract ole float %118, %112\l  br i1 %119, label %132, label %120\l|{<s0>T|<s1>F}}"];
	Node0x64bcb50:s0 -> Node0x64b9db0;
	Node0x64bcb50:s1 -> Node0x64bd250;
	Node0x64bd250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%120:\l120:                                              \l  %121 = or i32 %82, 3\l  %122 = zext i32 %121 to i64\l  %123 = getelementptr inbounds float, float addrspace(1)* %46, i64 %122\l  %124 = load float, float addrspace(1)* %123, align 4, !tbaa !20\l  %125 = getelementptr inbounds i32, i32 addrspace(1)* %47, i64 %122\l  %126 = load i32, i32 addrspace(1)* %125, align 4, !tbaa !16,\l... !amdgpu.noclobber !15\l  %127 = mul nsw i32 %126, %1\l  %128 = sext i32 %127 to i64\l  %129 = getelementptr inbounds float, float addrspace(1)* %15, i64 %128\l  %130 = load float, float addrspace(1)* %129, align 4, !tbaa !20\l  %131 = fcmp contract ole float %130, %124\l  br label %132\l}"];
	Node0x64bd250 -> Node0x64b9db0;
	Node0x64b9db0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%132:\l132:                                              \l  %133 = phi i1 [ true, %108 ], [ %131, %120 ], [ true, %85 ], [ true, %81 ],\l... [ true, %96 ]\l  %134 = add nuw nsw i32 %82, 4\l  %135 = add i32 %84, 4\l  %136 = icmp eq i32 %135, %53\l  br i1 %136, label %54, label %81, !llvm.loop !24\l|{<s0>T|<s1>F}}"];
	Node0x64b9db0:s0 -> Node0x64b9620;
	Node0x64b9db0:s1 -> Node0x64b9870;
	Node0x64b9090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%137:\l137:                                              \l  %138 = icmp eq i32 %42, -1\l  br i1 %138, label %144, label %139\l|{<s0>T|<s1>F}}"];
	Node0x64b9090:s0 -> Node0x64b7980;
	Node0x64b9090:s1 -> Node0x64bac70;
	Node0x64bac70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%139:\l139:                                              \l  %140 = mul nsw i32 %42, %1\l  %141 = sext i32 %140 to i64\l  %142 = getelementptr inbounds float, float addrspace(1)* %15, i64 %141\l  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !20\l  br label %144\l}"];
	Node0x64bac70 -> Node0x64b7980;
	Node0x64b7980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%144:\l144:                                              \l  %145 = phi float [ 0.000000e+00, %79 ], [ %143, %139 ], [ 1.000000e+00, %137\l... ]\l  %146 = mul nsw i32 %32, %1\l  %147 = sext i32 %146 to i64\l  %148 = getelementptr inbounds float, float addrspace(1)* %16, i64 %147\l  store float %145, float addrspace(1)* %148, align 4, !tbaa !20\l  %149 = add i32 %27, %32\l  %150 = add i32 %149, %30\l  %151 = icmp slt i32 %150, %5\l  br i1 %151, label %31, label %152, !llvm.loop !26\l|{<s0>T|<s1>F}}"];
	Node0x64b7980:s0 -> Node0x64b7880;
	Node0x64b7980:s1 -> Node0x64b5ee0;
	Node0x64b5ee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{%152:\l152:                                              \l  ret void\l}"];
}
